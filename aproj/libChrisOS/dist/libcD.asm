
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

9f000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"
#include "common.h"

VISIBLE char *strchr(const char *s, int c)
{
9f000000:	55                   	push   ebp
9f000001:	89 e5                	mov    ebp,esp
9f000003:	e8 8a 61 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000008:	05 d4 91 00 00       	add    eax,0x91d4
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
    while (*s != (char)c)
9f00000d:	eb 17                	jmp    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
        if (!*s++)
9f00000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000012:	8d 50 01             	lea    edx,[eax+0x1]
9f000015:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000018:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00001b:	84 c0                	test   al,al
9f00001d:	75 07                	jne    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
            return 0;
9f00001f:	b8 00 00 00 00       	mov    eax,0x0
9f000024:	eb 10                	jmp    9f000036 <strchr+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
#include "strings.h"
#include "common.h"

VISIBLE char *strchr(const char *s, int c)
{
    while (*s != (char)c)
9f000026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00002c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00002f:	38 d0                	cmp    al,dl
9f000031:	75 dc                	jne    9f00000f <strchr+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
        if (!*s++)
            return 0;
    return (char *)s;
9f000033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:15
}
9f000036:	5d                   	pop    ebp
9f000037:	c3                   	ret    

9f000038 <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18

char *strchrI(const char *s, int c)
{
9f000038:	55                   	push   ebp
9f000039:	89 e5                	mov    ebp,esp
9f00003b:	e8 52 61 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000040:	05 9c 91 00 00       	add    eax,0x919c
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
    while (*s != (char)c)
9f000045:	eb 17                	jmp    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
        if (!*s++)
9f000047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00004a:	8d 50 01             	lea    edx,[eax+0x1]
9f00004d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000050:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000053:	84 c0                	test   al,al
9f000055:	75 07                	jne    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
            return 0;
9f000057:	b8 00 00 00 00       	mov    eax,0x0
9f00005c:	eb 10                	jmp    9f00006e <strchrI+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
    return (char *)s;
}

char *strchrI(const char *s, int c)
{
    while (*s != (char)c)
9f00005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000061:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000064:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000067:	38 d0                	cmp    al,dl
9f000069:	75 dc                	jne    9f000047 <strchrI+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
        if (!*s++)
            return 0;
    return (char *)s;
9f00006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:23
}
9f00006e:	5d                   	pop    ebp
9f00006f:	c3                   	ret    

9f000070 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:39

#include "strings.h"
#include "common.h"

VISIBLE int strcspn(char* string, char* chars)
{
9f000070:	55                   	push   ebp
9f000071:	89 e5                	mov    ebp,esp
9f000073:	56                   	push   esi
9f000074:	53                   	push   ebx
9f000075:	e8 18 61 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f00007a:	05 62 91 00 00       	add    eax,0x9162
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f00007f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f000082:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000085:	89 c1                	mov    ecx,eax
9f000087:	eb 29                	jmp    9f0000b2 <strcspn+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	for (p = chars; *p != 0; p++) {
9f000089:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f00008c:	eb 15                	jmp    9f0000a3 <strcspn+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
	    if (c == *p) {
9f00008e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f000091:	38 c8                	cmp    al,cl
9f000093:	75 0b                	jne    9f0000a0 <strcspn+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:45
		return s-string;
9f000095:	89 da                	mov    edx,ebx
9f000097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00009a:	29 c2                	sub    edx,eax
9f00009c:	89 d0                	mov    eax,edx
9f00009e:	eb 21                	jmp    9f0000c1 <strcspn+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43 (discriminator 2)
VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000a0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43 (discriminator 1)
9f0000a3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000a6:	84 c0                	test   al,al
9f0000a8:	75 e4                	jne    9f00008e <strcspn+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)

VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000aa:	83 c3 01             	add    ebx,0x1
9f0000ad:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000b0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
9f0000b2:	89 c8                	mov    eax,ecx
9f0000b4:	84 c0                	test   al,al
9f0000b6:	75 d1                	jne    9f000089 <strcspn+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f0000b8:	89 da                	mov    edx,ebx
9f0000ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000bd:	29 c2                	sub    edx,eax
9f0000bf:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:50
}
9f0000c1:	5b                   	pop    ebx
9f0000c2:	5e                   	pop    esi
9f0000c3:	5d                   	pop    ebp
9f0000c4:	c3                   	ret    

9f0000c5 <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:53

int strcspnI(char* string, char* chars)
{
9f0000c5:	55                   	push   ebp
9f0000c6:	89 e5                	mov    ebp,esp
9f0000c8:	56                   	push   esi
9f0000c9:	53                   	push   ebx
9f0000ca:	e8 c3 60 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0000cf:	05 0d 91 00 00       	add    eax,0x910d
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f0000d7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000da:	89 c1                	mov    ecx,eax
9f0000dc:	eb 29                	jmp    9f000107 <strcspnI+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	for (p = chars; *p != 0; p++) {
9f0000de:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f0000e1:	eb 15                	jmp    9f0000f8 <strcspnI+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
	    if (c == *p) {
9f0000e3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000e6:	38 c8                	cmp    al,cl
9f0000e8:	75 0b                	jne    9f0000f5 <strcspnI+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:59
		return s-string;
9f0000ea:	89 da                	mov    edx,ebx
9f0000ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000ef:	29 c2                	sub    edx,eax
9f0000f1:	89 d0                	mov    eax,edx
9f0000f3:	eb 21                	jmp    9f000116 <strcspnI+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57 (discriminator 2)
int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57 (discriminator 1)
9f0000f8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000fb:	84 c0                	test   al,al
9f0000fd:	75 e4                	jne    9f0000e3 <strcspnI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)

int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000ff:	83 c3 01             	add    ebx,0x1
9f000102:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000105:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
9f000107:	89 c8                	mov    eax,ecx
9f000109:	84 c0                	test   al,al
9f00010b:	75 d1                	jne    9f0000de <strcspnI+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f00010d:	89 da                	mov    edx,ebx
9f00010f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000112:	29 c2                	sub    edx,eax
9f000114:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:64
}
9f000116:	5b                   	pop    ebx
9f000117:	5e                   	pop    esi
9f000118:	5d                   	pop    ebp
9f000119:	c3                   	ret    
9f00011a:	66 90                	xchg   ax,ax

9f00011c <strtokI>:
strtokI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:43

int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

char * strtokI(char* s, /*const*/ char* delim)
{
9f00011c:	55                   	push   ebp
9f00011d:	89 e5                	mov    ebp,esp
9f00011f:	56                   	push   esi
9f000120:	53                   	push   ebx
9f000121:	e8 ba 60 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f000126:	81 c3 b6 90 00 00    	add    ebx,0x90b6
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:47
    static char *lasts;
    register int ch;

    if (s == 0)
9f00012c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000130:	75 09                	jne    9f00013b <strtokI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
	s = lasts;
9f000132:	8b 83 48 00 00 00    	mov    eax,DWORD PTR [ebx+0x48]
9f000138:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    do {
	if ((ch = *s++) == '\0')
9f00013b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00013e:	8d 50 01             	lea    edx,[eax+0x1]
9f000141:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000147:	0f be f0             	movsx  esi,al
9f00014a:	85 f6                	test   esi,esi
9f00014c:	75 07                	jne    9f000155 <strtokI+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
	    return 0;
9f00014e:	b8 00 00 00 00       	mov    eax,0x0
9f000153:	eb 57                	jmp    9f0001ac <strtokI+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    } while (strchrI(delim, ch));
9f000155:	83 ec 08             	sub    esp,0x8
9f000158:	56                   	push   esi
9f000159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00015c:	e8 d7 fe ff ff       	call   9f000038 <strchrI>
9f000161:	83 c4 10             	add    esp,0x10
9f000164:	85 c0                	test   eax,eax
9f000166:	75 d3                	jne    9f00013b <strtokI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    --s;
9f000168:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
    lasts = s + strcspnI(s, delim);
9f00016c:	83 ec 08             	sub    esp,0x8
9f00016f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000175:	e8 4b ff ff ff       	call   9f0000c5 <strcspnI>
9f00017a:	83 c4 10             	add    esp,0x10
9f00017d:	89 c2                	mov    edx,eax
9f00017f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000182:	01 d0                	add    eax,edx
9f000184:	89 83 48 00 00 00    	mov    DWORD PTR [ebx+0x48],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    if (*lasts != 0)
9f00018a:	8b 83 48 00 00 00    	mov    eax,DWORD PTR [ebx+0x48]
9f000190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000193:	84 c0                	test   al,al
9f000195:	74 12                	je     9f0001a9 <strtokI+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
	*lasts++ = 0;
9f000197:	8b 83 48 00 00 00    	mov    eax,DWORD PTR [ebx+0x48]
9f00019d:	8d 50 01             	lea    edx,[eax+0x1]
9f0001a0:	89 93 48 00 00 00    	mov    DWORD PTR [ebx+0x48],edx
9f0001a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:57
    return s;
9f0001a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:58
}
9f0001ac:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0001af:	5b                   	pop    ebx
9f0001b0:	5e                   	pop    esi
9f0001b1:	5d                   	pop    ebp
9f0001b2:	c3                   	ret    

9f0001b3 <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:61

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
9f0001b3:	55                   	push   ebp
9f0001b4:	89 e5                	mov    ebp,esp
9f0001b6:	56                   	push   esi
9f0001b7:	53                   	push   ebx
9f0001b8:	e8 23 60 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f0001bd:	81 c3 1f 90 00 00    	add    ebx,0x901f
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:65
    static char *lasts;
    register int ch;

    if (s == 0)
9f0001c3:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0001c7:	75 09                	jne    9f0001d2 <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:66
	s = lasts;
9f0001c9:	8b 83 4c 00 00 00    	mov    eax,DWORD PTR [ebx+0x4c]
9f0001cf:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:68
    do {
	if ((ch = *s++) == '\0')
9f0001d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0001d5:	8d 50 01             	lea    edx,[eax+0x1]
9f0001d8:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0001db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0001de:	0f be f0             	movsx  esi,al
9f0001e1:	85 f6                	test   esi,esi
9f0001e3:	75 07                	jne    9f0001ec <strtok+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:69
	    return 0;
9f0001e5:	b8 00 00 00 00       	mov    eax,0x0
9f0001ea:	eb 57                	jmp    9f000243 <strtok+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:70
    } while (strchrI(delim, ch));
9f0001ec:	83 ec 08             	sub    esp,0x8
9f0001ef:	56                   	push   esi
9f0001f0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0001f3:	e8 40 fe ff ff       	call   9f000038 <strchrI>
9f0001f8:	83 c4 10             	add    esp,0x10
9f0001fb:	85 c0                	test   eax,eax
9f0001fd:	75 d3                	jne    9f0001d2 <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:71
    --s;
9f0001ff:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:72
    lasts = s + strcspnI(s, delim);
9f000203:	83 ec 08             	sub    esp,0x8
9f000206:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000209:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00020c:	e8 b4 fe ff ff       	call   9f0000c5 <strcspnI>
9f000211:	83 c4 10             	add    esp,0x10
9f000214:	89 c2                	mov    edx,eax
9f000216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000219:	01 d0                	add    eax,edx
9f00021b:	89 83 4c 00 00 00    	mov    DWORD PTR [ebx+0x4c],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:73
    if (*lasts != 0)
9f000221:	8b 83 4c 00 00 00    	mov    eax,DWORD PTR [ebx+0x4c]
9f000227:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00022a:	84 c0                	test   al,al
9f00022c:	74 12                	je     9f000240 <strtok+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:74
	*lasts++ = 0;
9f00022e:	8b 83 4c 00 00 00    	mov    eax,DWORD PTR [ebx+0x4c]
9f000234:	8d 50 01             	lea    edx,[eax+0x1]
9f000237:	89 93 4c 00 00 00    	mov    DWORD PTR [ebx+0x4c],edx
9f00023d:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:75
    return s;
9f000240:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:76
9f000243:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000246:	5b                   	pop    ebx
9f000247:	5e                   	pop    esi
9f000248:	5d                   	pop    ebp
9f000249:	c3                   	ret    
9f00024a:	66 90                	xchg   ax,ax

9f00024c <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:11

#include "common.h"
#include "strings.h"

void reverseI(char s[])
 {
9f00024c:	55                   	push   ebp
9f00024d:	89 e5                	mov    ebp,esp
9f00024f:	53                   	push   ebx
9f000250:	83 ec 14             	sub    esp,0x14
9f000253:	e8 3a 5f 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000258:	05 84 8f 00 00       	add    eax,0x8f84
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f00025d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f000264:	83 ec 0c             	sub    esp,0xc
9f000267:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00026a:	89 c3                	mov    ebx,eax
9f00026c:	e8 af 49 00 00       	call   9f004c20 <strlenI>
9f000271:	83 c4 10             	add    esp,0x10
9f000274:	83 e8 01             	sub    eax,0x1
9f000277:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00027a:	eb 39                	jmp    9f0002b5 <reverseI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         c = s[i];
9f00027c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00027f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000282:	01 d0                	add    eax,edx
9f000284:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000287:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[i] = s[j];
9f00028a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00028d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000290:	01 c2                	add    edx,eax
9f000292:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f000295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000298:	01 c8                	add    eax,ecx
9f00029a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00029d:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:18 (discriminator 3)
         s[j] = c;
9f00029f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0002a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002a5:	01 c2                	add    edx,eax
9f0002a7:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
9f0002ab:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
void reverseI(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f0002ad:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
9f0002b1:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 1)
9f0002b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0002b8:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0002bb:	7c bf                	jl     9f00027c <reverseI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:20
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
9f0002bd:	90                   	nop
9f0002be:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0002c1:	c9                   	leave  
9f0002c2:	c3                   	ret    

9f0002c3 <itoa>:
itoa():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:23

VISIBLE void itoa(int n, char s[])
 {
9f0002c3:	55                   	push   ebp
9f0002c4:	89 e5                	mov    ebp,esp
9f0002c6:	53                   	push   ebx
9f0002c7:	83 ec 14             	sub    esp,0x14
9f0002ca:	e8 c3 5e 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0002cf:	05 0d 8f 00 00       	add    eax,0x8f0d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f0002d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002d7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0002da:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0002de:	79 03                	jns    9f0002e3 <itoa+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
         n = -n;          /* make n positive */
9f0002e0:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:28
     i = 0;
9f0002e3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f0002ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0002ed:	8d 50 01             	lea    edx,[eax+0x1]
9f0002f0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0002f3:	89 c2                	mov    edx,eax
9f0002f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0002f8:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f0002fb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0002fe:	ba 67 66 66 66       	mov    edx,0x66666667
9f000303:	89 c8                	mov    eax,ecx
9f000305:	f7 ea                	imul   edx
9f000307:	c1 fa 02             	sar    edx,0x2
9f00030a:	89 c8                	mov    eax,ecx
9f00030c:	c1 f8 1f             	sar    eax,0x1f
9f00030f:	29 c2                	sub    edx,eax
9f000311:	89 d0                	mov    eax,edx
9f000313:	c1 e0 02             	shl    eax,0x2
9f000316:	01 d0                	add    eax,edx
9f000318:	01 c0                	add    eax,eax
9f00031a:	29 c1                	sub    ecx,eax
9f00031c:	89 ca                	mov    edx,ecx
9f00031e:	89 d0                	mov    eax,edx
9f000320:	83 c0 30             	add    eax,0x30
9f000323:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f000325:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000328:	ba 67 66 66 66       	mov    edx,0x66666667
9f00032d:	89 c8                	mov    eax,ecx
9f00032f:	f7 ea                	imul   edx
9f000331:	c1 fa 02             	sar    edx,0x2
9f000334:	89 c8                	mov    eax,ecx
9f000336:	c1 f8 1f             	sar    eax,0x1f
9f000339:	29 c2                	sub    edx,eax
9f00033b:	89 d0                	mov    eax,edx
9f00033d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f000340:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000344:	7f a4                	jg     9f0002ea <itoa+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
     if (sign < 0)
9f000346:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00034a:	79 13                	jns    9f00035f <itoa+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
         s[i++] = '-';
9f00034c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00034f:	8d 50 01             	lea    edx,[eax+0x1]
9f000352:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000355:	89 c2                	mov    edx,eax
9f000357:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00035a:	01 d0                	add    eax,edx
9f00035c:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     s[i] = '\0';
9f00035f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000362:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000365:	01 d0                	add    eax,edx
9f000367:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
     reverseI(s);
9f00036a:	83 ec 0c             	sub    esp,0xc
9f00036d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000370:	e8 d7 fe ff ff       	call   9f00024c <reverseI>
9f000375:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:36
 }
9f000378:	90                   	nop
9f000379:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00037c:	c9                   	leave  
9f00037d:	c3                   	ret    

9f00037e <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:39

 char *itoaI(int n, char s[])
 {
9f00037e:	55                   	push   ebp
9f00037f:	89 e5                	mov    ebp,esp
9f000381:	53                   	push   ebx
9f000382:	83 ec 14             	sub    esp,0x14
9f000385:	e8 08 5e 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f00038a:	05 52 8e 00 00       	add    eax,0x8e52
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:42
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f00038f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000392:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000395:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000399:	79 03                	jns    9f00039e <itoaI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:43
         n = -n;          /* make n positive */
9f00039b:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:44
     i = 0;
9f00039e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f0003a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0003a8:	8d 50 01             	lea    edx,[eax+0x1]
9f0003ab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0003ae:	89 c2                	mov    edx,eax
9f0003b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0003b3:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f0003b6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0003b9:	ba 67 66 66 66       	mov    edx,0x66666667
9f0003be:	89 c8                	mov    eax,ecx
9f0003c0:	f7 ea                	imul   edx
9f0003c2:	c1 fa 02             	sar    edx,0x2
9f0003c5:	89 c8                	mov    eax,ecx
9f0003c7:	c1 f8 1f             	sar    eax,0x1f
9f0003ca:	29 c2                	sub    edx,eax
9f0003cc:	89 d0                	mov    eax,edx
9f0003ce:	c1 e0 02             	shl    eax,0x2
9f0003d1:	01 d0                	add    eax,edx
9f0003d3:	01 c0                	add    eax,eax
9f0003d5:	29 c1                	sub    ecx,eax
9f0003d7:	89 ca                	mov    edx,ecx
9f0003d9:	89 d0                	mov    eax,edx
9f0003db:	83 c0 30             	add    eax,0x30
9f0003de:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:47 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f0003e0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0003e3:	ba 67 66 66 66       	mov    edx,0x66666667
9f0003e8:	89 c8                	mov    eax,ecx
9f0003ea:	f7 ea                	imul   edx
9f0003ec:	c1 fa 02             	sar    edx,0x2
9f0003ef:	89 c8                	mov    eax,ecx
9f0003f1:	c1 f8 1f             	sar    eax,0x1f
9f0003f4:	29 c2                	sub    edx,eax
9f0003f6:	89 d0                	mov    eax,edx
9f0003f8:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f0003fb:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0003ff:	7f a4                	jg     9f0003a5 <itoaI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:48
     if (sign < 0)
9f000401:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000405:	79 13                	jns    9f00041a <itoaI+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
         s[i++] = '-';
9f000407:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00040a:	8d 50 01             	lea    edx,[eax+0x1]
9f00040d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000410:	89 c2                	mov    edx,eax
9f000412:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000415:	01 d0                	add    eax,edx
9f000417:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
     s[i] = '\0';
9f00041a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00041d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000420:	01 d0                	add    eax,edx
9f000422:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:51
     reverseI(s);
9f000425:	83 ec 0c             	sub    esp,0xc
9f000428:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00042b:	e8 1c fe ff ff       	call   9f00024c <reverseI>
9f000430:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:52
     return s;
9f000433:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:53
 }
9f000436:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000439:	c9                   	leave  
9f00043a:	c3                   	ret    

9f00043b <atoiI>:
atoiI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:57

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
int atoiI(char *str)
{
9f00043b:	55                   	push   ebp
9f00043c:	89 e5                	mov    ebp,esp
9f00043e:	83 ec 10             	sub    esp,0x10
9f000441:	e8 4c 5d 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000446:	05 96 8d 00 00       	add    eax,0x8d96
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:58
    int res = 0; // Initialize result
9f00044b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:62
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f000452:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
9f000459:	eb 28                	jmp    9f000483 <atoiI+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:63 (discriminator 3)
        res = res*10 + str[i] - '0';
9f00045b:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00045e:	89 d0                	mov    eax,edx
9f000460:	c1 e0 02             	shl    eax,0x2
9f000463:	01 d0                	add    eax,edx
9f000465:	01 c0                	add    eax,eax
9f000467:	89 c1                	mov    ecx,eax
9f000469:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f00046c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00046f:	01 d0                	add    eax,edx
9f000471:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000474:	0f be c0             	movsx  eax,al
9f000477:	01 c8                	add    eax,ecx
9f000479:	83 e8 30             	sub    eax,0x30
9f00047c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:62 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f00047f:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:62 (discriminator 1)
9f000483:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f000486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000489:	01 d0                	add    eax,edx
9f00048b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00048e:	84 c0                	test   al,al
9f000490:	75 c9                	jne    9f00045b <atoiI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:66
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
9f000492:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:67
}
9f000495:	c9                   	leave  
9f000496:	c3                   	ret    

9f000497 <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:70

VISIBLE int atoi(char *str)
{
9f000497:	55                   	push   ebp
9f000498:	89 e5                	mov    ebp,esp
9f00049a:	e8 f3 5c 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f00049f:	05 3d 8d 00 00       	add    eax,0x8d3d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:71
    return atoiI(str);
9f0004a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0004a7:	e8 8f ff ff ff       	call   9f00043b <atoiI>
9f0004ac:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:72
}
9f0004af:	c9                   	leave  
9f0004b0:	c3                   	ret    
9f0004b1:	66 90                	xchg   ax,ax
9f0004b3:	90                   	nop

9f0004b4 <moveToXY>:
moveToXY():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:16
#include "ascii.h"

const char ansiEscSeq[3] =  {0x1b,0x5b,0};

VISIBLE void moveToXY(int x, int y)
{
9f0004b4:	55                   	push   ebp
9f0004b5:	89 e5                	mov    ebp,esp
9f0004b7:	53                   	push   ebx
9f0004b8:	83 ec 14             	sub    esp,0x14
9f0004bb:	e8 20 5d 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f0004c0:	81 c3 1c 8d 00 00    	add    ebx,0x8d1c
/home/yogi/src/os/aproj/libChrisOS/src/console.c:20
    char cmd[10];
    char xstr[3], ystr[3];
    
    strcpyI(cmd,ansiEscSeq);
9f0004c6:	83 ec 08             	sub    esp,0x8
9f0004c9:	8d 83 24 f6 ff ff    	lea    eax,[ebx-0x9dc]
9f0004cf:	50                   	push   eax
9f0004d0:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004d3:	50                   	push   eax
9f0004d4:	e8 33 46 00 00       	call   9f004b0c <strcpyI>
9f0004d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:21
    itoaI(x,xstr);
9f0004dc:	83 ec 08             	sub    esp,0x8
9f0004df:	8d 45 eb             	lea    eax,[ebp-0x15]
9f0004e2:	50                   	push   eax
9f0004e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0004e6:	e8 93 fe ff ff       	call   9f00037e <itoaI>
9f0004eb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:22
    strcatI(cmd,xstr);
9f0004ee:	83 ec 08             	sub    esp,0x8
9f0004f1:	8d 45 eb             	lea    eax,[ebp-0x15]
9f0004f4:	50                   	push   eax
9f0004f5:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004f8:	50                   	push   eax
9f0004f9:	e8 38 44 00 00       	call   9f004936 <strcatI>
9f0004fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:23
    strcatI(cmd,";");
9f000501:	83 ec 08             	sub    esp,0x8
9f000504:	8d 83 27 f6 ff ff    	lea    eax,[ebx-0x9d9]
9f00050a:	50                   	push   eax
9f00050b:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00050e:	50                   	push   eax
9f00050f:	e8 22 44 00 00       	call   9f004936 <strcatI>
9f000514:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:24
    itoaI(y,ystr);
9f000517:	83 ec 08             	sub    esp,0x8
9f00051a:	8d 45 e8             	lea    eax,[ebp-0x18]
9f00051d:	50                   	push   eax
9f00051e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000521:	e8 58 fe ff ff       	call   9f00037e <itoaI>
9f000526:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:25
    strcatI(cmd,ystr);
9f000529:	83 ec 08             	sub    esp,0x8
9f00052c:	8d 45 e8             	lea    eax,[ebp-0x18]
9f00052f:	50                   	push   eax
9f000530:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000533:	50                   	push   eax
9f000534:	e8 fd 43 00 00       	call   9f004936 <strcatI>
9f000539:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:26
    strcatI(cmd,"H");
9f00053c:	83 ec 08             	sub    esp,0x8
9f00053f:	8d 83 29 f6 ff ff    	lea    eax,[ebx-0x9d7]
9f000545:	50                   	push   eax
9f000546:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000549:	50                   	push   eax
9f00054a:	e8 e7 43 00 00       	call   9f004936 <strcatI>
9f00054f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:28
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f000552:	83 ec 08             	sub    esp,0x8
9f000555:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000558:	50                   	push   eax
9f000559:	8d 83 2b f6 ff ff    	lea    eax,[ebx-0x9d5]
9f00055f:	50                   	push   eax
9f000560:	e8 f8 11 00 00       	call   9f00175d <printfI>
9f000565:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:29
}
9f000568:	90                   	nop
9f000569:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00056c:	c9                   	leave  
9f00056d:	c3                   	ret    

9f00056e <saveCursorPosition>:
saveCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:32

VISIBLE void saveCursorPosition()
{
9f00056e:	55                   	push   ebp
9f00056f:	89 e5                	mov    ebp,esp
9f000571:	53                   	push   ebx
9f000572:	83 ec 14             	sub    esp,0x14
9f000575:	e8 66 5c 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f00057a:	81 c3 62 8c 00 00    	add    ebx,0x8c62
/home/yogi/src/os/aproj/libChrisOS/src/console.c:35
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f000580:	83 ec 08             	sub    esp,0x8
9f000583:	8d 83 24 f6 ff ff    	lea    eax,[ebx-0x9dc]
9f000589:	50                   	push   eax
9f00058a:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00058d:	50                   	push   eax
9f00058e:	e8 79 45 00 00       	call   9f004b0c <strcpyI>
9f000593:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:36
    strcatI(cmd,"s");
9f000596:	83 ec 08             	sub    esp,0x8
9f000599:	8d 83 2e f6 ff ff    	lea    eax,[ebx-0x9d2]
9f00059f:	50                   	push   eax
9f0005a0:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005a3:	50                   	push   eax
9f0005a4:	e8 8d 43 00 00       	call   9f004936 <strcatI>
9f0005a9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:38
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f0005ac:	83 ec 08             	sub    esp,0x8
9f0005af:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005b2:	50                   	push   eax
9f0005b3:	8d 83 2b f6 ff ff    	lea    eax,[ebx-0x9d5]
9f0005b9:	50                   	push   eax
9f0005ba:	e8 9e 11 00 00       	call   9f00175d <printfI>
9f0005bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:39
}
9f0005c2:	90                   	nop
9f0005c3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0005c6:	c9                   	leave  
9f0005c7:	c3                   	ret    

9f0005c8 <restoreCursorPosition>:
restoreCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:42

VISIBLE void restoreCursorPosition()
{
9f0005c8:	55                   	push   ebp
9f0005c9:	89 e5                	mov    ebp,esp
9f0005cb:	53                   	push   ebx
9f0005cc:	83 ec 14             	sub    esp,0x14
9f0005cf:	e8 0c 5c 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f0005d4:	81 c3 08 8c 00 00    	add    ebx,0x8c08
/home/yogi/src/os/aproj/libChrisOS/src/console.c:45
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f0005da:	83 ec 08             	sub    esp,0x8
9f0005dd:	8d 83 24 f6 ff ff    	lea    eax,[ebx-0x9dc]
9f0005e3:	50                   	push   eax
9f0005e4:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005e7:	50                   	push   eax
9f0005e8:	e8 1f 45 00 00       	call   9f004b0c <strcpyI>
9f0005ed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:46
    strcatI(cmd,"u");
9f0005f0:	83 ec 08             	sub    esp,0x8
9f0005f3:	8d 83 30 f6 ff ff    	lea    eax,[ebx-0x9d0]
9f0005f9:	50                   	push   eax
9f0005fa:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005fd:	50                   	push   eax
9f0005fe:	e8 33 43 00 00       	call   9f004936 <strcatI>
9f000603:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:48
//    writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f000606:	83 ec 08             	sub    esp,0x8
9f000609:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00060c:	50                   	push   eax
9f00060d:	8d 83 2b f6 ff ff    	lea    eax,[ebx-0x9d5]
9f000613:	50                   	push   eax
9f000614:	e8 44 11 00 00       	call   9f00175d <printfI>
9f000619:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:49
}
9f00061c:	90                   	nop
9f00061d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000620:	c9                   	leave  
9f000621:	c3                   	ret    
9f000622:	66 90                	xchg   ax,ax

9f000624 <resolveEnvVarsInStringI>:
resolveEnvVarsInStringI():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:10
 */
#include "common.h"
#include "strings.h"

char *resolveEnvVarsInStringI(char *input)
{
9f000624:	55                   	push   ebp
9f000625:	89 e5                	mov    ebp,esp
9f000627:	57                   	push   edi
9f000628:	53                   	push   ebx
9f000629:	81 ec e0 00 00 00    	sub    esp,0xe0
9f00062f:	e8 ac 5b 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f000634:	81 c3 a8 8b 00 00    	add    ebx,0x8ba8
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11
    char* lOutput=mallocI(4096);
9f00063a:	83 ec 0c             	sub    esp,0xc
9f00063d:	68 00 10 00 00       	push   0x1000
9f000642:	e8 ae 1e 00 00       	call   9f0024f5 <mallocI>
9f000647:	83 c4 10             	add    esp,0x10
9f00064a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:12
    char lVariable[100] = {0};
9f00064d:	8d 55 84             	lea    edx,[ebp-0x7c]
9f000650:	b8 00 00 00 00       	mov    eax,0x0
9f000655:	b9 19 00 00 00       	mov    ecx,0x19
9f00065a:	89 d7                	mov    edi,edx
9f00065c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:13
    char lVariableValue[100] = {0};
9f00065e:	8d 95 20 ff ff ff    	lea    edx,[ebp-0xe0]
9f000664:	b8 00 00 00 00       	mov    eax,0x0
9f000669:	b9 19 00 00 00       	mov    ecx,0x19
9f00066e:	89 d7                	mov    edi,edx
9f000670:	f3 ab                	rep stos DWORD PTR es:[edi],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:14
    char* myInput=input;
9f000672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000675:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:16
    
    strcpyI(lOutput,myInput);
9f000678:	83 ec 08             	sub    esp,0x8
9f00067b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f00067e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f000681:	e8 86 44 00 00       	call   9f004b0c <strcpyI>
9f000686:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:19
    while (1==1)
    {
        char *startPtr=strstrI(myInput,"$");
9f000689:	83 ec 08             	sub    esp,0x8
9f00068c:	8d 83 32 f6 ff ff    	lea    eax,[ebx-0x9ce]
9f000692:	50                   	push   eax
9f000693:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f000696:	e8 5b 4d 00 00       	call   9f0053f6 <strstrI>
9f00069b:	83 c4 10             	add    esp,0x10
9f00069e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:20
        int end=0;
9f0006a1:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:21
        if (startPtr>0)
9f0006a8:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f0006ac:	0f 84 ab 00 00 00    	je     9f00075d <resolveEnvVarsInStringI+0x139>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:23
        {
            strncpyI(lVariable, startPtr++, 1);
9f0006b2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0006b5:	8d 50 01             	lea    edx,[eax+0x1]
9f0006b8:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f0006bb:	83 ec 04             	sub    esp,0x4
9f0006be:	6a 01                	push   0x1
9f0006c0:	50                   	push   eax
9f0006c1:	8d 45 84             	lea    eax,[ebp-0x7c]
9f0006c4:	50                   	push   eax
9f0006c5:	e8 ca 46 00 00       	call   9f004d94 <strncpyI>
9f0006ca:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24
            while (ISALPHA(startPtr[end]) || ISDIGIT(startPtr[end]))
9f0006cd:	eb 22                	jmp    9f0006f1 <resolveEnvVarsInStringI+0xcd>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:25
                strncatI(lVariable,&startPtr[end++],1);
9f0006cf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0006d2:	8d 50 01             	lea    edx,[eax+0x1]
9f0006d5:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0006d8:	89 c2                	mov    edx,eax
9f0006da:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0006dd:	01 d0                	add    eax,edx
9f0006df:	83 ec 04             	sub    esp,0x4
9f0006e2:	6a 01                	push   0x1
9f0006e4:	50                   	push   eax
9f0006e5:	8d 45 84             	lea    eax,[ebp-0x7c]
9f0006e8:	50                   	push   eax
9f0006e9:	e8 86 42 00 00       	call   9f004974 <strncatI>
9f0006ee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24
        char *startPtr=strstrI(myInput,"$");
        int end=0;
        if (startPtr>0)
        {
            strncpyI(lVariable, startPtr++, 1);
            while (ISALPHA(startPtr[end]) || ISDIGIT(startPtr[end]))
9f0006f1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0006f4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0006f7:	01 d0                	add    eax,edx
9f0006f9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0006fc:	83 c8 20             	or     eax,0x20
9f0006ff:	0f be c0             	movsx  eax,al
9f000702:	83 e8 61             	sub    eax,0x61
9f000705:	83 f8 19             	cmp    eax,0x19
9f000708:	76 c5                	jbe    9f0006cf <resolveEnvVarsInStringI+0xab>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 1)
9f00070a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00070d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f000710:	01 d0                	add    eax,edx
9f000712:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000715:	0f be c0             	movsx  eax,al
9f000718:	83 e8 30             	sub    eax,0x30
9f00071b:	83 f8 09             	cmp    eax,0x9
9f00071e:	76 af                	jbe    9f0006cf <resolveEnvVarsInStringI+0xab>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:26
                strncatI(lVariable,&startPtr[end++],1);
            getenvI(lVariable+1,lVariableValue);
9f000720:	8d 45 84             	lea    eax,[ebp-0x7c]
9f000723:	83 c0 01             	add    eax,0x1
9f000726:	83 ec 08             	sub    esp,0x8
9f000729:	8d 95 20 ff ff ff    	lea    edx,[ebp-0xe0]
9f00072f:	52                   	push   edx
9f000730:	50                   	push   eax
9f000731:	e8 52 00 00 00       	call   9f000788 <getenvI>
9f000736:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:27
            strreplaceI(lOutput,lVariable,lVariableValue,lOutput);
9f000739:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f00073c:	8d 85 20 ff ff ff    	lea    eax,[ebp-0xe0]
9f000742:	50                   	push   eax
9f000743:	8d 45 84             	lea    eax,[ebp-0x7c]
9f000746:	50                   	push   eax
9f000747:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f00074a:	e8 c5 4a 00 00       	call   9f005214 <strreplaceI>
9f00074f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:28
            myInput=(int)startPtr;
9f000752:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f000755:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:32
        }
        else
            break;
    }
9f000758:	e9 2c ff ff ff       	jmp    9f000689 <resolveEnvVarsInStringI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:31
            getenvI(lVariable+1,lVariableValue);
            strreplaceI(lOutput,lVariable,lVariableValue,lOutput);
            myInput=(int)startPtr;
        }
        else
            break;
9f00075d:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:33
    }
    return lOutput;
9f00075e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:34
}
9f000761:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000764:	5b                   	pop    ebx
9f000765:	5f                   	pop    edi
9f000766:	5d                   	pop    ebp
9f000767:	c3                   	ret    

9f000768 <resolveEnvVarsInString>:
resolveEnvVarsInString():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:37

VISIBLE char *resolveEnvVarsInString(char *input)
{
9f000768:	55                   	push   ebp
9f000769:	89 e5                	mov    ebp,esp
9f00076b:	83 ec 08             	sub    esp,0x8
9f00076e:	e8 1f 5a 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000773:	05 69 8a 00 00       	add    eax,0x8a69
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:38
    return resolveEnvVarsInStringI(input);
9f000778:	83 ec 0c             	sub    esp,0xc
9f00077b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00077e:	e8 a1 fe ff ff       	call   9f000624 <resolveEnvVarsInStringI>
9f000783:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:39
}
9f000786:	c9                   	leave  
9f000787:	c3                   	ret    

9f000788 <getenvI>:
getenvI():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:42

int getenvI(char *varname, char *value)
{
9f000788:	55                   	push   ebp
9f000789:	89 e5                	mov    ebp,esp
9f00078b:	53                   	push   ebx
9f00078c:	83 ec 14             	sub    esp,0x14
9f00078f:	e8 4c 5a 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f000794:	81 c3 48 8a 00 00    	add    ebx,0x8a48
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:43
    for (int cnt=0;cnt<100;cnt++)
9f00079a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f0007a1:	eb 7b                	jmp    9f00081e <getenvI+0x96>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:44
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f0007a3:	83 ec 0c             	sub    esp,0xc
9f0007a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0007a9:	e8 72 44 00 00       	call   9f004c20 <strlenI>
9f0007ae:	83 c4 10             	add    esp,0x10
9f0007b1:	89 c1                	mov    ecx,eax
9f0007b3:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0007b9:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007bb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0007be:	c1 e2 02             	shl    edx,0x2
9f0007c1:	01 d0                	add    eax,edx
9f0007c3:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007c5:	83 ec 04             	sub    esp,0x4
9f0007c8:	51                   	push   ecx
9f0007c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0007cc:	50                   	push   eax
9f0007cd:	e8 59 45 00 00       	call   9f004d2b <strncmpI>
9f0007d2:	83 c4 10             	add    esp,0x10
9f0007d5:	85 c0                	test   eax,eax
9f0007d7:	75 41                	jne    9f00081a <getenvI+0x92>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:46
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
9f0007d9:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0007df:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007e1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0007e4:	c1 e2 02             	shl    edx,0x2
9f0007e7:	01 d0                	add    eax,edx
9f0007e9:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007eb:	83 ec 08             	sub    esp,0x8
9f0007ee:	8d 93 34 f6 ff ff    	lea    edx,[ebx-0x9cc]
9f0007f4:	52                   	push   edx
9f0007f5:	50                   	push   eax
9f0007f6:	e8 fb 4b 00 00       	call   9f0053f6 <strstrI>
9f0007fb:	83 c4 10             	add    esp,0x10
9f0007fe:	83 c0 01             	add    eax,0x1
9f000801:	83 ec 04             	sub    esp,0x4
9f000804:	6a 32                	push   0x32
9f000806:	50                   	push   eax
9f000807:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00080a:	e8 85 45 00 00       	call   9f004d94 <strncpyI>
9f00080f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:47
            return cnt+1;
9f000812:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000815:	83 c0 01             	add    eax,0x1
9f000818:	eb 13                	jmp    9f00082d <getenvI+0xa5>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:43 (discriminator 2)
    return resolveEnvVarsInStringI(input);
}

int getenvI(char *varname, char *value)
{
    for (int cnt=0;cnt<100;cnt++)
9f00081a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:43 (discriminator 1)
9f00081e:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
9f000822:	0f 8e 7b ff ff ff    	jle    9f0007a3 <getenvI+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:49
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
            return cnt+1;
        }
    return 0;
9f000828:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:50
}
9f00082d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000830:	c9                   	leave  
9f000831:	c3                   	ret    

9f000832 <getenv>:
getenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:53

VISIBLE int getenv(char *varname, char *value)
{
9f000832:	55                   	push   ebp
9f000833:	89 e5                	mov    ebp,esp
9f000835:	83 ec 08             	sub    esp,0x8
9f000838:	e8 55 59 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f00083d:	05 9f 89 00 00       	add    eax,0x899f
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:54
    return getenvI(varname, value);
9f000842:	83 ec 08             	sub    esp,0x8
9f000845:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000848:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00084b:	e8 38 ff ff ff       	call   9f000788 <getenvI>
9f000850:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:55
}
9f000853:	c9                   	leave  
9f000854:	c3                   	ret    

9f000855 <setenv>:
setenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:58

VISIBLE void  setenv(char *varname, char *value)
{
9f000855:	55                   	push   ebp
9f000856:	89 e5                	mov    ebp,esp
9f000858:	53                   	push   ebx
9f000859:	83 ec 14             	sub    esp,0x14
9f00085c:	e8 7f 59 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f000861:	81 c3 7b 89 00 00    	add    ebx,0x897b
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:59
    uint32_t lastPopulated = 0;
9f000867:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:61
    
    for (int cnt=0;cnt<100;cnt++)
9f00086e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f000875:	e9 d5 00 00 00       	jmp    9f00094f <setenv+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:62
        if (processEnvp[cnt]!=0)
9f00087a:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000880:	8b 00                	mov    eax,DWORD PTR [eax]
9f000882:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000885:	c1 e2 02             	shl    edx,0x2
9f000888:	01 d0                	add    eax,edx
9f00088a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00088c:	85 c0                	test   eax,eax
9f00088e:	0f 84 b7 00 00 00    	je     9f00094b <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:64
        {
            lastPopulated = (uint32_t)processEnvp[cnt];
9f000894:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00089a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00089c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00089f:	c1 e2 02             	shl    edx,0x2
9f0008a2:	01 d0                	add    eax,edx
9f0008a4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0008a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:65
            if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f0008a9:	83 ec 0c             	sub    esp,0xc
9f0008ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0008af:	e8 6c 43 00 00       	call   9f004c20 <strlenI>
9f0008b4:	83 c4 10             	add    esp,0x10
9f0008b7:	89 c1                	mov    ecx,eax
9f0008b9:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0008bf:	8b 00                	mov    eax,DWORD PTR [eax]
9f0008c1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0008c4:	c1 e2 02             	shl    edx,0x2
9f0008c7:	01 d0                	add    eax,edx
9f0008c9:	8b 00                	mov    eax,DWORD PTR [eax]
9f0008cb:	83 ec 04             	sub    esp,0x4
9f0008ce:	51                   	push   ecx
9f0008cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0008d2:	50                   	push   eax
9f0008d3:	e8 53 44 00 00       	call   9f004d2b <strncmpI>
9f0008d8:	83 c4 10             	add    esp,0x10
9f0008db:	85 c0                	test   eax,eax
9f0008dd:	75 6c                	jne    9f00094b <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:67
            {
                strcpyI(processEnvp[cnt],varname);
9f0008df:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0008e5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0008e7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0008ea:	c1 e2 02             	shl    edx,0x2
9f0008ed:	01 d0                	add    eax,edx
9f0008ef:	8b 00                	mov    eax,DWORD PTR [eax]
9f0008f1:	83 ec 08             	sub    esp,0x8
9f0008f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0008f7:	50                   	push   eax
9f0008f8:	e8 0f 42 00 00       	call   9f004b0c <strcpyI>
9f0008fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:68
                strcatI(processEnvp[cnt],"=");
9f000900:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000906:	8b 00                	mov    eax,DWORD PTR [eax]
9f000908:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00090b:	c1 e2 02             	shl    edx,0x2
9f00090e:	01 d0                	add    eax,edx
9f000910:	8b 00                	mov    eax,DWORD PTR [eax]
9f000912:	83 ec 08             	sub    esp,0x8
9f000915:	8d 93 34 f6 ff ff    	lea    edx,[ebx-0x9cc]
9f00091b:	52                   	push   edx
9f00091c:	50                   	push   eax
9f00091d:	e8 14 40 00 00       	call   9f004936 <strcatI>
9f000922:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:69
                strcatI(processEnvp[cnt],value);
9f000925:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00092b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00092d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000930:	c1 e2 02             	shl    edx,0x2
9f000933:	01 d0                	add    eax,edx
9f000935:	8b 00                	mov    eax,DWORD PTR [eax]
9f000937:	83 ec 08             	sub    esp,0x8
9f00093a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00093d:	50                   	push   eax
9f00093e:	e8 f3 3f 00 00       	call   9f004936 <strcatI>
9f000943:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:70
                return;
9f000946:	e9 c6 00 00 00       	jmp    9f000a11 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:61 (discriminator 2)

VISIBLE void  setenv(char *varname, char *value)
{
    uint32_t lastPopulated = 0;
    
    for (int cnt=0;cnt<100;cnt++)
9f00094b:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:61 (discriminator 1)
9f00094f:	83 7d f0 63          	cmp    DWORD PTR [ebp-0x10],0x63
9f000953:	0f 8e 21 ff ff ff    	jle    9f00087a <setenv+0x25>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:73
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f000959:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f000960:	e9 a2 00 00 00       	jmp    9f000a07 <setenv+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:74
        if (processEnvp[cnt]==0)
9f000965:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00096b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00096d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000970:	c1 e2 02             	shl    edx,0x2
9f000973:	01 d0                	add    eax,edx
9f000975:	8b 00                	mov    eax,DWORD PTR [eax]
9f000977:	85 c0                	test   eax,eax
9f000979:	0f 85 84 00 00 00    	jne    9f000a03 <setenv+0x1ae>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:76
        {
            processEnvp[cnt]=(char*)lastPopulated+512;
9f00097f:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000985:	8b 00                	mov    eax,DWORD PTR [eax]
9f000987:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00098a:	c1 e2 02             	shl    edx,0x2
9f00098d:	01 d0                	add    eax,edx
9f00098f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000992:	81 c2 00 02 00 00    	add    edx,0x200
9f000998:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:77
            strcpyI(processEnvp[cnt],varname);
9f00099a:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0009a0:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009a2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0009a5:	c1 e2 02             	shl    edx,0x2
9f0009a8:	01 d0                	add    eax,edx
9f0009aa:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009ac:	83 ec 08             	sub    esp,0x8
9f0009af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0009b2:	50                   	push   eax
9f0009b3:	e8 54 41 00 00       	call   9f004b0c <strcpyI>
9f0009b8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:78
            strcatI(processEnvp[cnt],"=");
9f0009bb:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0009c1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009c3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0009c6:	c1 e2 02             	shl    edx,0x2
9f0009c9:	01 d0                	add    eax,edx
9f0009cb:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009cd:	83 ec 08             	sub    esp,0x8
9f0009d0:	8d 93 34 f6 ff ff    	lea    edx,[ebx-0x9cc]
9f0009d6:	52                   	push   edx
9f0009d7:	50                   	push   eax
9f0009d8:	e8 59 3f 00 00       	call   9f004936 <strcatI>
9f0009dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:79
            strcatI(processEnvp[cnt],value);
9f0009e0:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0009e6:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009e8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0009eb:	c1 e2 02             	shl    edx,0x2
9f0009ee:	01 d0                	add    eax,edx
9f0009f0:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009f2:	83 ec 08             	sub    esp,0x8
9f0009f5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0009f8:	50                   	push   eax
9f0009f9:	e8 38 3f 00 00       	call   9f004936 <strcatI>
9f0009fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:80
            return;
9f000a01:	eb 0e                	jmp    9f000a11 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:73 (discriminator 2)
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f000a03:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:73 (discriminator 1)
9f000a07:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
9f000a0b:	0f 8e 54 ff ff ff    	jle    9f000965 <setenv+0x110>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:84
            strcatI(processEnvp[cnt],value);
            return;
        }            
    //NOTE: if we get here, the value is thrown away!        
    
}
9f000a11:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000a14:	c9                   	leave  
9f000a15:	c3                   	ret    

9f000a16 <getcwdI>:
getcwdI():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:87

char* getcwdI(char* buf, size_t size)
{
9f000a16:	55                   	push   ebp
9f000a17:	89 e5                	mov    ebp,esp
9f000a19:	53                   	push   ebx
9f000a1a:	83 ec 04             	sub    esp,0x4
9f000a1d:	e8 70 57 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000a22:	05 ba 87 00 00       	add    eax,0x87ba
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:88
    return (char*)do_syscall2(SYSCALL_GETCWD,(uint32_t)buf,size);
9f000a27:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000a2a:	83 ec 04             	sub    esp,0x4
9f000a2d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000a30:	52                   	push   edx
9f000a31:	6a 4f                	push   0x4f
9f000a33:	89 c3                	mov    ebx,eax
9f000a35:	e8 c8 0a 00 00       	call   9f001502 <do_syscall2>
9f000a3a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:90
    
}
9f000a3d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000a40:	c9                   	leave  
9f000a41:	c3                   	ret    

9f000a42 <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:93

VISIBLE char* getcwd(char* buf, size_t size)
{
9f000a42:	55                   	push   ebp
9f000a43:	89 e5                	mov    ebp,esp
9f000a45:	83 ec 08             	sub    esp,0x8
9f000a48:	e8 45 57 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000a4d:	05 8f 87 00 00       	add    eax,0x878f
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:94
    return getcwdI(buf,size);
9f000a52:	83 ec 08             	sub    esp,0x8
9f000a55:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000a58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000a5b:	e8 b6 ff ff ff       	call   9f000a16 <getcwdI>
9f000a60:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:95
}
9f000a63:	c9                   	leave  
9f000a64:	c3                   	ret    
9f000a65:	66 90                	xchg   ax,ax
9f000a67:	90                   	nop

9f000a68 <getdirI>:
getdirI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:19
    char *resolvePath_inPath;
    char *resolvePath_resPath;
    char *resolvePath_cwd;

int getdirI(char* path, direntry_t *entries, int bufferCount)
{
9f000a68:	55                   	push   ebp
9f000a69:	89 e5                	mov    ebp,esp
9f000a6b:	53                   	push   ebx
9f000a6c:	83 ec 04             	sub    esp,0x4
9f000a6f:	e8 1e 57 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000a74:	05 68 87 00 00       	add    eax,0x8768
/home/yogi/src/os/aproj/libChrisOS/src/file.c:20
    return do_syscall3(SYSCALL_GETDENTS, (uint32_t)path, (uint32_t)entries, bufferCount);
9f000a79:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000a7c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000a7f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000a82:	53                   	push   ebx
9f000a83:	51                   	push   ecx
9f000a84:	52                   	push   edx
9f000a85:	68 04 03 00 00       	push   0x304
9f000a8a:	89 c3                	mov    ebx,eax
9f000a8c:	e8 35 0a 00 00       	call   9f0014c6 <do_syscall3>
9f000a91:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:22
    
}
9f000a94:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000a97:	c9                   	leave  
9f000a98:	c3                   	ret    

9f000a99 <getdir>:
getdir():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:24
VISIBLE int getdir(char* path, direntry_t *entries, int bufferCount)
{
9f000a99:	55                   	push   ebp
9f000a9a:	89 e5                	mov    ebp,esp
9f000a9c:	83 ec 08             	sub    esp,0x8
9f000a9f:	e8 ee 56 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000aa4:	05 38 87 00 00       	add    eax,0x8738
/home/yogi/src/os/aproj/libChrisOS/src/file.c:25
    return getdirI(path, entries, bufferCount);
9f000aa9:	83 ec 04             	sub    esp,0x4
9f000aac:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000aaf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000ab2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000ab5:	e8 ae ff ff ff       	call   9f000a68 <getdirI>
9f000aba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:26
}
9f000abd:	c9                   	leave  
9f000abe:	c3                   	ret    

9f000abf <openI>:
openI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:29

void* openI(char* path, const char* mode)
{
9f000abf:	55                   	push   ebp
9f000ac0:	89 e5                	mov    ebp,esp
9f000ac2:	53                   	push   ebx
9f000ac3:	83 ec 04             	sub    esp,0x4
9f000ac6:	e8 c7 56 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000acb:	05 11 87 00 00       	add    eax,0x8711
/home/yogi/src/os/aproj/libChrisOS/src/file.c:31
    //NOTE: Using syscall3 and passing -1 as 3rd parameter, otherwise param3 will be 0 and syscall will think freopen is calling!
    return (void*)do_syscall3(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode,-1);
9f000ad0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000ad3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000ad6:	6a ff                	push   0xffffffff
9f000ad8:	51                   	push   ecx
9f000ad9:	52                   	push   edx
9f000ada:	6a 02                	push   0x2
9f000adc:	89 c3                	mov    ebx,eax
9f000ade:	e8 e3 09 00 00       	call   9f0014c6 <do_syscall3>
9f000ae3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:32
}
9f000ae6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000ae9:	c9                   	leave  
9f000aea:	c3                   	ret    

9f000aeb <open>:
open():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:35

VISIBLE void* open(char* path, const char* mode)
{
9f000aeb:	55                   	push   ebp
9f000aec:	89 e5                	mov    ebp,esp
9f000aee:	83 ec 08             	sub    esp,0x8
9f000af1:	e8 9c 56 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000af6:	05 e6 86 00 00       	add    eax,0x86e6
/home/yogi/src/os/aproj/libChrisOS/src/file.c:36
    return openI(path, mode);
9f000afb:	83 ec 08             	sub    esp,0x8
9f000afe:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000b01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000b04:	e8 b6 ff ff ff       	call   9f000abf <openI>
9f000b09:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:37
}
9f000b0c:	c9                   	leave  
9f000b0d:	c3                   	ret    

9f000b0e <file_cleanup>:
file_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:40

void file_cleanup()
{
9f000b0e:	55                   	push   ebp
9f000b0f:	89 e5                	mov    ebp,esp
9f000b11:	53                   	push   ebx
9f000b12:	83 ec 04             	sub    esp,0x4
9f000b15:	e8 c6 56 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f000b1a:	81 c3 c2 86 00 00    	add    ebx,0x86c2
/home/yogi/src/os/aproj/libChrisOS/src/file.c:41
    while (filesToClose)
9f000b20:	eb 1f                	jmp    9f000b41 <file_cleanup+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:42
        closeI(filesToClose++);
9f000b22:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000b28:	8b 00                	mov    eax,DWORD PTR [eax]
9f000b2a:	8d 48 04             	lea    ecx,[eax+0x4]
9f000b2d:	8b 93 d8 ff ff ff    	mov    edx,DWORD PTR [ebx-0x28]
9f000b33:	89 0a                	mov    DWORD PTR [edx],ecx
9f000b35:	83 ec 0c             	sub    esp,0xc
9f000b38:	50                   	push   eax
9f000b39:	e8 bc 00 00 00       	call   9f000bfa <closeI>
9f000b3e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:41
    return openI(path, mode);
}

void file_cleanup()
{
    while (filesToClose)
9f000b41:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000b47:	8b 00                	mov    eax,DWORD PTR [eax]
9f000b49:	85 c0                	test   eax,eax
9f000b4b:	75 d5                	jne    9f000b22 <file_cleanup+0x14>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:43
        closeI(filesToClose++);
    freeI(filesToClose);
9f000b4d:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000b53:	8b 00                	mov    eax,DWORD PTR [eax]
9f000b55:	83 ec 0c             	sub    esp,0xc
9f000b58:	50                   	push   eax
9f000b59:	e8 15 18 00 00       	call   9f002373 <freeI>
9f000b5e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:44
}
9f000b61:	90                   	nop
9f000b62:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000b65:	c9                   	leave  
9f000b66:	c3                   	ret    

9f000b67 <freopen>:
freopen():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:47

VISIBLE void* freopen(char* path, const char* mode, void *stream)
{
9f000b67:	55                   	push   ebp
9f000b68:	89 e5                	mov    ebp,esp
9f000b6a:	56                   	push   esi
9f000b6b:	53                   	push   ebx
9f000b6c:	83 ec 10             	sub    esp,0x10
9f000b6f:	e8 6c 56 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f000b74:	81 c3 68 86 00 00    	add    ebx,0x8668
/home/yogi/src/os/aproj/libChrisOS/src/file.c:48
    void *retVal=0;
9f000b7a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:49
    retVal = (void*)do_syscall3(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode, (uint32_t)stream);
9f000b81:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000b84:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000b87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000b8a:	51                   	push   ecx
9f000b8b:	52                   	push   edx
9f000b8c:	50                   	push   eax
9f000b8d:	6a 02                	push   0x2
9f000b8f:	e8 32 09 00 00       	call   9f0014c6 <do_syscall3>
9f000b94:	83 c4 10             	add    esp,0x10
9f000b97:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:50
    if (retVal==NULL)
9f000b9a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f000b9e:	75 07                	jne    9f000ba7 <freopen+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:51
        return (void*)-1;
9f000ba0:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f000ba5:	eb 4c                	jmp    9f000bf3 <freopen+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:52
    if (filesToClose==NULL)
9f000ba7:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000bad:	8b 00                	mov    eax,DWORD PTR [eax]
9f000baf:	85 c0                	test   eax,eax
9f000bb1:	75 17                	jne    9f000bca <freopen+0x63>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:54
    {
        filesToClose=mallocI(sizeof(uintptr_t)*25);
9f000bb3:	83 ec 0c             	sub    esp,0xc
9f000bb6:	6a 64                	push   0x64
9f000bb8:	e8 38 19 00 00       	call   9f0024f5 <mallocI>
9f000bbd:	83 c4 10             	add    esp,0x10
9f000bc0:	89 c2                	mov    edx,eax
9f000bc2:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000bc8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:56
    }
    filesToClose[filesToCloseCount++]=(uintptr_t)retVal;
9f000bca:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000bd0:	8b 30                	mov    esi,DWORD PTR [eax]
9f000bd2:	8b 83 d0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x30]
9f000bd8:	8b 00                	mov    eax,DWORD PTR [eax]
9f000bda:	8d 48 01             	lea    ecx,[eax+0x1]
9f000bdd:	8b 93 d0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x30]
9f000be3:	89 0a                	mov    DWORD PTR [edx],ecx
9f000be5:	c1 e0 02             	shl    eax,0x2
9f000be8:	8d 14 06             	lea    edx,[esi+eax*1]
9f000beb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000bee:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:57
    return retVal;
9f000bf0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:58
}
9f000bf3:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000bf6:	5b                   	pop    ebx
9f000bf7:	5e                   	pop    esi
9f000bf8:	5d                   	pop    ebp
9f000bf9:	c3                   	ret    

9f000bfa <closeI>:
closeI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:61

void closeI(void* handle)
{
9f000bfa:	55                   	push   ebp
9f000bfb:	89 e5                	mov    ebp,esp
9f000bfd:	53                   	push   ebx
9f000bfe:	83 ec 04             	sub    esp,0x4
9f000c01:	e8 8c 55 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000c06:	05 d6 85 00 00       	add    eax,0x85d6
/home/yogi/src/os/aproj/libChrisOS/src/file.c:62
    do_syscall1(SYSCALL_CLOSE, (uint32_t)handle);
9f000c0b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000c0e:	83 ec 08             	sub    esp,0x8
9f000c11:	52                   	push   edx
9f000c12:	6a 03                	push   0x3
9f000c14:	89 c3                	mov    ebx,eax
9f000c16:	e8 25 09 00 00       	call   9f001540 <do_syscall1>
9f000c1b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:63
}
9f000c1e:	90                   	nop
9f000c1f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000c22:	c9                   	leave  
9f000c23:	c3                   	ret    

9f000c24 <close>:
close():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:66

VISIBLE void close(void* handle)
{
9f000c24:	55                   	push   ebp
9f000c25:	89 e5                	mov    ebp,esp
9f000c27:	83 ec 08             	sub    esp,0x8
9f000c2a:	e8 63 55 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000c2f:	05 ad 85 00 00       	add    eax,0x85ad
/home/yogi/src/os/aproj/libChrisOS/src/file.c:67
    return closeI(handle);
9f000c34:	83 ec 0c             	sub    esp,0xc
9f000c37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000c3a:	e8 bb ff ff ff       	call   9f000bfa <closeI>
9f000c3f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:68
}
9f000c42:	c9                   	leave  
9f000c43:	c3                   	ret    

9f000c44 <readI>:
readI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:71

int readI(void* handle, void *buffer, int size, int length)
{
9f000c44:	55                   	push   ebp
9f000c45:	89 e5                	mov    ebp,esp
9f000c47:	56                   	push   esi
9f000c48:	53                   	push   ebx
9f000c49:	e8 44 55 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000c4e:	05 8e 85 00 00       	add    eax,0x858e
/home/yogi/src/os/aproj/libChrisOS/src/file.c:72
    return do_syscall4(SYSCALL_READ, (uint32_t)handle, (uint32_t)buffer, size, length);
9f000c53:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f000c56:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000c59:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000c5c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000c5f:	83 ec 0c             	sub    esp,0xc
9f000c62:	56                   	push   esi
9f000c63:	53                   	push   ebx
9f000c64:	51                   	push   ecx
9f000c65:	52                   	push   edx
9f000c66:	6a 04                	push   0x4
9f000c68:	89 c3                	mov    ebx,eax
9f000c6a:	e8 1d 08 00 00       	call   9f00148c <do_syscall4>
9f000c6f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:73
}
9f000c72:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000c75:	5b                   	pop    ebx
9f000c76:	5e                   	pop    esi
9f000c77:	5d                   	pop    ebp
9f000c78:	c3                   	ret    

9f000c79 <read>:
read():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:76

VISIBLE int read(void* handle, void *buffer, int size, int length)
{
9f000c79:	55                   	push   ebp
9f000c7a:	89 e5                	mov    ebp,esp
9f000c7c:	83 ec 08             	sub    esp,0x8
9f000c7f:	e8 0e 55 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000c84:	05 58 85 00 00       	add    eax,0x8558
/home/yogi/src/os/aproj/libChrisOS/src/file.c:77
    return readI(handle, buffer, size, length);
9f000c89:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f000c8c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000c8f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000c92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000c95:	e8 aa ff ff ff       	call   9f000c44 <readI>
9f000c9a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:78
}
9f000c9d:	c9                   	leave  
9f000c9e:	c3                   	ret    

9f000c9f <writeI>:
writeI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:80
int writeI(void* handle, void *buffer, int size, int length)
{
9f000c9f:	55                   	push   ebp
9f000ca0:	89 e5                	mov    ebp,esp
9f000ca2:	56                   	push   esi
9f000ca3:	53                   	push   ebx
9f000ca4:	e8 e9 54 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000ca9:	05 33 85 00 00       	add    eax,0x8533
/home/yogi/src/os/aproj/libChrisOS/src/file.c:81
    return do_syscall4(SYSCALL_WRITE, (uint32_t)handle, (uint32_t)buffer, size, length);
9f000cae:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f000cb1:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000cb4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000cb7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000cba:	83 ec 0c             	sub    esp,0xc
9f000cbd:	56                   	push   esi
9f000cbe:	53                   	push   ebx
9f000cbf:	51                   	push   ecx
9f000cc0:	52                   	push   edx
9f000cc1:	6a 05                	push   0x5
9f000cc3:	89 c3                	mov    ebx,eax
9f000cc5:	e8 c2 07 00 00       	call   9f00148c <do_syscall4>
9f000cca:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:82
}
9f000ccd:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000cd0:	5b                   	pop    ebx
9f000cd1:	5e                   	pop    esi
9f000cd2:	5d                   	pop    ebp
9f000cd3:	c3                   	ret    

9f000cd4 <write>:
write():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:85

VISIBLE int write(void* handle, void *buffer, int size, int length)
{
9f000cd4:	55                   	push   ebp
9f000cd5:	89 e5                	mov    ebp,esp
9f000cd7:	83 ec 08             	sub    esp,0x8
9f000cda:	e8 b3 54 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000cdf:	05 fd 84 00 00       	add    eax,0x84fd
/home/yogi/src/os/aproj/libChrisOS/src/file.c:86
    return writeI(handle, buffer, size, length);
9f000ce4:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f000ce7:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000cea:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000ced:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000cf0:	e8 aa ff ff ff       	call   9f000c9f <writeI>
9f000cf5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:87
}
9f000cf8:	c9                   	leave  
9f000cf9:	c3                   	ret    

9f000cfa <seekI>:
seekI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:90

int seekI(void* handle, long position, int whence)
{
9f000cfa:	55                   	push   ebp
9f000cfb:	89 e5                	mov    ebp,esp
9f000cfd:	53                   	push   ebx
9f000cfe:	83 ec 04             	sub    esp,0x4
9f000d01:	e8 8c 54 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000d06:	05 d6 84 00 00       	add    eax,0x84d6
/home/yogi/src/os/aproj/libChrisOS/src/file.c:91
    return do_syscall3(SYSCALL_SEEK, (uint32_t)handle, position, whence);
9f000d0b:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000d0e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000d11:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000d14:	53                   	push   ebx
9f000d15:	51                   	push   ecx
9f000d16:	52                   	push   edx
9f000d17:	6a 0b                	push   0xb
9f000d19:	89 c3                	mov    ebx,eax
9f000d1b:	e8 a6 07 00 00       	call   9f0014c6 <do_syscall3>
9f000d20:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:92
}
9f000d23:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000d26:	c9                   	leave  
9f000d27:	c3                   	ret    

9f000d28 <seek>:
seek():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:95

VISIBLE int seek(void* handle, long position, int whence)
{
9f000d28:	55                   	push   ebp
9f000d29:	89 e5                	mov    ebp,esp
9f000d2b:	83 ec 08             	sub    esp,0x8
9f000d2e:	e8 5f 54 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000d33:	05 a9 84 00 00       	add    eax,0x84a9
/home/yogi/src/os/aproj/libChrisOS/src/file.c:96
    return seekI(handle, position, whence);
9f000d38:	83 ec 04             	sub    esp,0x4
9f000d3b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000d3e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000d41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000d44:	e8 b1 ff ff ff       	call   9f000cfa <seekI>
9f000d49:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:97
}
9f000d4c:	c9                   	leave  
9f000d4d:	c3                   	ret    

9f000d4e <statI>:
statI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:99
int statI(char *path, fstat_t *stat)
{
9f000d4e:	55                   	push   ebp
9f000d4f:	89 e5                	mov    ebp,esp
9f000d51:	53                   	push   ebx
9f000d52:	83 ec 04             	sub    esp,0x4
9f000d55:	e8 38 54 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000d5a:	05 82 84 00 00       	add    eax,0x8482
/home/yogi/src/os/aproj/libChrisOS/src/file.c:100
    return do_syscall2(SYSCALL_STAT, (uint32_t)path, (uint32_t)stat);
9f000d5f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000d62:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000d65:	83 ec 04             	sub    esp,0x4
9f000d68:	51                   	push   ecx
9f000d69:	52                   	push   edx
9f000d6a:	6a 0a                	push   0xa
9f000d6c:	89 c3                	mov    ebx,eax
9f000d6e:	e8 8f 07 00 00       	call   9f001502 <do_syscall2>
9f000d73:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:101
}
9f000d76:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000d79:	c9                   	leave  
9f000d7a:	c3                   	ret    

9f000d7b <stat>:
stat():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:104

VISIBLE int stat(char *path, fstat_t *stat)
{
9f000d7b:	55                   	push   ebp
9f000d7c:	89 e5                	mov    ebp,esp
9f000d7e:	83 ec 08             	sub    esp,0x8
9f000d81:	e8 0c 54 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f000d86:	05 56 84 00 00       	add    eax,0x8456
/home/yogi/src/os/aproj/libChrisOS/src/file.c:105
    return statI(path, stat);
9f000d8b:	83 ec 08             	sub    esp,0x8
9f000d8e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000d91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000d94:	e8 b5 ff ff ff       	call   9f000d4e <statI>
9f000d99:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:106
}
9f000d9c:	c9                   	leave  
9f000d9d:	c3                   	ret    

9f000d9e <resolvePath>:
resolvePath():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:109

VISIBLE int resolvePath(const char *inPath, char *outPath, bool usePathVariable)
{
9f000d9e:	55                   	push   ebp
9f000d9f:	89 e5                	mov    ebp,esp
9f000da1:	53                   	push   ebx
9f000da2:	83 ec 34             	sub    esp,0x34
9f000da5:	e8 36 54 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f000daa:	81 c3 32 84 00 00    	add    ebx,0x8432
9f000db0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f000db3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
/home/yogi/src/os/aproj/libChrisOS/src/file.c:110
    char delim[2]=":";
9f000db6:	66 c7 45 e6 3a 00    	mov    WORD PTR [ebp-0x1a],0x3a
/home/yogi/src/os/aproj/libChrisOS/src/file.c:112
    char *token;
    int retVal=-1;
9f000dbc:	c7 45 f0 ff ff ff ff 	mov    DWORD PTR [ebp-0x10],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/file.c:115
    fstat_t fstat;
    
    if (!resolvePath_envPath)
9f000dc3:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000dc9:	8b 00                	mov    eax,DWORD PTR [eax]
9f000dcb:	85 c0                	test   eax,eax
9f000dcd:	75 1a                	jne    9f000de9 <resolvePath+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:116
        resolvePath_envPath=mallocI(1024);
9f000dcf:	83 ec 0c             	sub    esp,0xc
9f000dd2:	68 00 04 00 00       	push   0x400
9f000dd7:	e8 19 17 00 00       	call   9f0024f5 <mallocI>
9f000ddc:	83 c4 10             	add    esp,0x10
9f000ddf:	89 c2                	mov    edx,eax
9f000de1:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000de7:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:117
    if (!resolvePath_cwd)
9f000de9:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000def:	8b 00                	mov    eax,DWORD PTR [eax]
9f000df1:	85 c0                	test   eax,eax
9f000df3:	75 1a                	jne    9f000e0f <resolvePath+0x71>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:118
        resolvePath_cwd=mallocI(1024);
9f000df5:	83 ec 0c             	sub    esp,0xc
9f000df8:	68 00 04 00 00       	push   0x400
9f000dfd:	e8 f3 16 00 00       	call   9f0024f5 <mallocI>
9f000e02:	83 c4 10             	add    esp,0x10
9f000e05:	89 c2                	mov    edx,eax
9f000e07:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000e0d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:119
    if (!resolvePath_inPath)
9f000e0f:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000e15:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e17:	85 c0                	test   eax,eax
9f000e19:	75 1a                	jne    9f000e35 <resolvePath+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:120
            resolvePath_inPath=mallocI(1024);
9f000e1b:	83 ec 0c             	sub    esp,0xc
9f000e1e:	68 00 04 00 00       	push   0x400
9f000e23:	e8 cd 16 00 00       	call   9f0024f5 <mallocI>
9f000e28:	83 c4 10             	add    esp,0x10
9f000e2b:	89 c2                	mov    edx,eax
9f000e2d:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000e33:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:121
    if (!resolvePath_resPath)
9f000e35:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e3b:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e3d:	85 c0                	test   eax,eax
9f000e3f:	75 1a                	jne    9f000e5b <resolvePath+0xbd>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:122
        resolvePath_resPath=mallocI(1024);
9f000e41:	83 ec 0c             	sub    esp,0xc
9f000e44:	68 00 04 00 00       	push   0x400
9f000e49:	e8 a7 16 00 00       	call   9f0024f5 <mallocI>
9f000e4e:	83 c4 10             	add    esp,0x10
9f000e51:	89 c2                	mov    edx,eax
9f000e53:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e59:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:127

    //using the PATH variable, attempt to resolve the path to an executable when a path isn't given in the commandline
    
    //If there is a / character in the path, then don't attempt to resolve
    if (usePathVariable)
9f000e5b:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
9f000e5f:	74 1d                	je     9f000e7e <resolvePath+0xe0>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:128
        getenvI("PATH",resolvePath_envPath);
9f000e61:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000e67:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e69:	83 ec 08             	sub    esp,0x8
9f000e6c:	50                   	push   eax
9f000e6d:	8d 83 36 f6 ff ff    	lea    eax,[ebx-0x9ca]
9f000e73:	50                   	push   eax
9f000e74:	e8 0f f9 ff ff       	call   9f000788 <getenvI>
9f000e79:	83 c4 10             	add    esp,0x10
9f000e7c:	eb 0b                	jmp    9f000e89 <resolvePath+0xeb>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:130
    else
        resolvePath_envPath[0]='\0';
9f000e7e:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000e84:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e86:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:132

    getcwdI(resolvePath_cwd,1024);
9f000e89:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000e8f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e91:	83 ec 08             	sub    esp,0x8
9f000e94:	68 00 04 00 00       	push   0x400
9f000e99:	50                   	push   eax
9f000e9a:	e8 77 fb ff ff       	call   9f000a16 <getcwdI>
9f000e9f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:134
    
    if (strstrI(inPath, "/"))
9f000ea2:	83 ec 08             	sub    esp,0x8
9f000ea5:	8d 83 3b f6 ff ff    	lea    eax,[ebx-0x9c5]
9f000eab:	50                   	push   eax
9f000eac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000eaf:	e8 42 45 00 00       	call   9f0053f6 <strstrI>
9f000eb4:	83 c4 10             	add    esp,0x10
9f000eb7:	85 c0                	test   eax,eax
9f000eb9:	74 53                	je     9f000f0e <resolvePath+0x170>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:136
    {
        if (*inPath!='/')
9f000ebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000ebe:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000ec1:	3c 2f                	cmp    al,0x2f
9f000ec3:	74 2c                	je     9f000ef1 <resolvePath+0x153>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:138
        {
            strcpyI(outPath,resolvePath_cwd);
9f000ec5:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000ecb:	8b 00                	mov    eax,DWORD PTR [eax]
9f000ecd:	83 ec 08             	sub    esp,0x8
9f000ed0:	50                   	push   eax
9f000ed1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000ed4:	e8 33 3c 00 00       	call   9f004b0c <strcpyI>
9f000ed9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:139
            strcatI(outPath,"/");
9f000edc:	83 ec 08             	sub    esp,0x8
9f000edf:	8d 83 3b f6 ff ff    	lea    eax,[ebx-0x9c5]
9f000ee5:	50                   	push   eax
9f000ee6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000ee9:	e8 48 3a 00 00       	call   9f004936 <strcatI>
9f000eee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:141
        }
        strcatI(outPath,inPath);
9f000ef1:	83 ec 08             	sub    esp,0x8
9f000ef4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000ef7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000efa:	e8 37 3a 00 00       	call   9f004936 <strcatI>
9f000eff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:142
        retVal=0;
9f000f02:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f000f09:	e9 b1 01 00 00       	jmp    9f0010bf <resolvePath+0x321>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:146
    }
    else
    {
        strcpyI(resolvePath_inPath,inPath);
9f000f0e:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000f14:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f16:	83 ec 08             	sub    esp,0x8
9f000f19:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000f1c:	50                   	push   eax
9f000f1d:	e8 ea 3b 00 00       	call   9f004b0c <strcpyI>
9f000f22:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:147
        if (resolvePath_envPath[0])
9f000f25:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000f2b:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f2d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000f30:	84 c0                	test   al,al
9f000f32:	74 20                	je     9f000f54 <resolvePath+0x1b6>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:148
            token=strtokI(resolvePath_envPath,delim);
9f000f34:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000f3a:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f3c:	83 ec 08             	sub    esp,0x8
9f000f3f:	8d 55 e6             	lea    edx,[ebp-0x1a]
9f000f42:	52                   	push   edx
9f000f43:	50                   	push   eax
9f000f44:	e8 d3 f1 ff ff       	call   9f00011c <strtokI>
9f000f49:	83 c4 10             	add    esp,0x10
9f000f4c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f000f4f:	e9 c9 00 00 00       	jmp    9f00101d <resolvePath+0x27f>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:150
        else
            token=NULL;
9f000f54:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:151
        while (token!=NULL)
9f000f5b:	e9 bd 00 00 00       	jmp    9f00101d <resolvePath+0x27f>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:153
        {
            strcpyI(resolvePath_resPath,token);
9f000f60:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000f66:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f68:	83 ec 08             	sub    esp,0x8
9f000f6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f000f6e:	50                   	push   eax
9f000f6f:	e8 98 3b 00 00       	call   9f004b0c <strcpyI>
9f000f74:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:154
            if (strcmpI(resolvePath_resPath,"/")!=0)
9f000f77:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000f7d:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f7f:	83 ec 08             	sub    esp,0x8
9f000f82:	8d 93 3b f6 ff ff    	lea    edx,[ebx-0x9c5]
9f000f88:	52                   	push   edx
9f000f89:	50                   	push   eax
9f000f8a:	e8 c1 3a 00 00       	call   9f004a50 <strcmpI>
9f000f8f:	83 c4 10             	add    esp,0x10
9f000f92:	85 c0                	test   eax,eax
9f000f94:	74 1b                	je     9f000fb1 <resolvePath+0x213>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:155
                strcatI(resolvePath_resPath,"/");
9f000f96:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000f9c:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f9e:	83 ec 08             	sub    esp,0x8
9f000fa1:	8d 93 3b f6 ff ff    	lea    edx,[ebx-0x9c5]
9f000fa7:	52                   	push   edx
9f000fa8:	50                   	push   eax
9f000fa9:	e8 88 39 00 00       	call   9f004936 <strcatI>
9f000fae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:156
            strcatI(resolvePath_resPath,inPath);
9f000fb1:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000fb7:	8b 00                	mov    eax,DWORD PTR [eax]
9f000fb9:	83 ec 08             	sub    esp,0x8
9f000fbc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000fbf:	50                   	push   eax
9f000fc0:	e8 71 39 00 00       	call   9f004936 <strcatI>
9f000fc5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:157
            int res=statI(resolvePath_resPath,&fstat);
9f000fc8:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000fce:	8b 00                	mov    eax,DWORD PTR [eax]
9f000fd0:	83 ec 08             	sub    esp,0x8
9f000fd3:	8d 55 dc             	lea    edx,[ebp-0x24]
9f000fd6:	52                   	push   edx
9f000fd7:	50                   	push   eax
9f000fd8:	e8 71 fd ff ff       	call   9f000d4e <statI>
9f000fdd:	83 c4 10             	add    esp,0x10
9f000fe0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:158
            if (res==0)
9f000fe3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f000fe7:	75 20                	jne    9f001009 <resolvePath+0x26b>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:160
            {
                strcpyI(outPath,resolvePath_resPath);
9f000fe9:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000fef:	8b 00                	mov    eax,DWORD PTR [eax]
9f000ff1:	83 ec 08             	sub    esp,0x8
9f000ff4:	50                   	push   eax
9f000ff5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000ff8:	e8 0f 3b 00 00       	call   9f004b0c <strcpyI>
9f000ffd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:161
                retVal=0;
9f001000:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:162
                break;
9f001007:	eb 1e                	jmp    9f001027 <resolvePath+0x289>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:164
            }
            token=strtokI(NULL,delim);
9f001009:	83 ec 08             	sub    esp,0x8
9f00100c:	8d 45 e6             	lea    eax,[ebp-0x1a]
9f00100f:	50                   	push   eax
9f001010:	6a 00                	push   0x0
9f001012:	e8 05 f1 ff ff       	call   9f00011c <strtokI>
9f001017:	83 c4 10             	add    esp,0x10
9f00101a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:151
        strcpyI(resolvePath_inPath,inPath);
        if (resolvePath_envPath[0])
            token=strtokI(resolvePath_envPath,delim);
        else
            token=NULL;
        while (token!=NULL)
9f00101d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001021:	0f 85 39 ff ff ff    	jne    9f000f60 <resolvePath+0x1c2>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:167
                break;
            }
            token=strtokI(NULL,delim);
        }

        if (retVal==-1)
9f001027:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
9f00102b:	0f 85 8e 00 00 00    	jne    9f0010bf <resolvePath+0x321>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:169
        {
            strcpyI(resolvePath_resPath,resolvePath_cwd);
9f001031:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001037:	8b 10                	mov    edx,DWORD PTR [eax]
9f001039:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f00103f:	8b 00                	mov    eax,DWORD PTR [eax]
9f001041:	83 ec 08             	sub    esp,0x8
9f001044:	52                   	push   edx
9f001045:	50                   	push   eax
9f001046:	e8 c1 3a 00 00       	call   9f004b0c <strcpyI>
9f00104b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:170
            strcatI(resolvePath_resPath,"/");
9f00104e:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f001054:	8b 00                	mov    eax,DWORD PTR [eax]
9f001056:	83 ec 08             	sub    esp,0x8
9f001059:	8d 93 3b f6 ff ff    	lea    edx,[ebx-0x9c5]
9f00105f:	52                   	push   edx
9f001060:	50                   	push   eax
9f001061:	e8 d0 38 00 00       	call   9f004936 <strcatI>
9f001066:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:171
            strcatI(resolvePath_resPath,inPath);
9f001069:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f00106f:	8b 00                	mov    eax,DWORD PTR [eax]
9f001071:	83 ec 08             	sub    esp,0x8
9f001074:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001077:	50                   	push   eax
9f001078:	e8 b9 38 00 00       	call   9f004936 <strcatI>
9f00107d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:172
            int res=statI(resolvePath_resPath,&fstat);
9f001080:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f001086:	8b 00                	mov    eax,DWORD PTR [eax]
9f001088:	83 ec 08             	sub    esp,0x8
9f00108b:	8d 55 dc             	lea    edx,[ebp-0x24]
9f00108e:	52                   	push   edx
9f00108f:	50                   	push   eax
9f001090:	e8 b9 fc ff ff       	call   9f000d4e <statI>
9f001095:	83 c4 10             	add    esp,0x10
9f001098:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:173
            if (res==0)
9f00109b:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f00109f:	75 1e                	jne    9f0010bf <resolvePath+0x321>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:175
            {
                strcpyI(outPath,resolvePath_resPath);
9f0010a1:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f0010a7:	8b 00                	mov    eax,DWORD PTR [eax]
9f0010a9:	83 ec 08             	sub    esp,0x8
9f0010ac:	50                   	push   eax
9f0010ad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0010b0:	e8 57 3a 00 00       	call   9f004b0c <strcpyI>
9f0010b5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:176
                retVal=0;
9f0010b8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:181
            }
        }
    }
    
    return retVal;
9f0010bf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:182
}
9f0010c2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0010c5:	c9                   	leave  
9f0010c6:	c3                   	ret    

9f0010c7 <tellI>:
tellI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:185

long tellI(void *stream)
{
9f0010c7:	55                   	push   ebp
9f0010c8:	89 e5                	mov    ebp,esp
9f0010ca:	53                   	push   ebx
9f0010cb:	83 ec 04             	sub    esp,0x4
9f0010ce:	e8 bf 50 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0010d3:	05 09 81 00 00       	add    eax,0x8109
/home/yogi/src/os/aproj/libChrisOS/src/file.c:186
    return do_syscall1(SYSCALL_TELL,(uint32_t)stream);
9f0010d8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0010db:	83 ec 08             	sub    esp,0x8
9f0010de:	52                   	push   edx
9f0010df:	6a 0c                	push   0xc
9f0010e1:	89 c3                	mov    ebx,eax
9f0010e3:	e8 58 04 00 00       	call   9f001540 <do_syscall1>
9f0010e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:187
}
9f0010eb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0010ee:	c9                   	leave  
9f0010ef:	c3                   	ret    

9f0010f0 <tell>:
tell():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:190

VISIBLE long tell(void *stream)
{
9f0010f0:	55                   	push   ebp
9f0010f1:	89 e5                	mov    ebp,esp
9f0010f3:	83 ec 08             	sub    esp,0x8
9f0010f6:	e8 97 50 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0010fb:	05 e1 80 00 00       	add    eax,0x80e1
/home/yogi/src/os/aproj/libChrisOS/src/file.c:191
    return tellI(stream);
9f001100:	83 ec 0c             	sub    esp,0xc
9f001103:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001106:	e8 bc ff ff ff       	call   9f0010c7 <tellI>
9f00110b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:192
}
9f00110e:	c9                   	leave  
9f00110f:	c3                   	ret    

9f001110 <getlineI>:
getlineI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:195

size_t getlineI(char **lineptr, size_t *n, void *stream)
{
9f001110:	55                   	push   ebp
9f001111:	89 e5                	mov    ebp,esp
9f001113:	53                   	push   ebx
9f001114:	83 ec 24             	sub    esp,0x24
9f001117:	e8 c4 50 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f00111c:	81 c3 c0 80 00 00    	add    ebx,0x80c0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:197
    char *buffer;
    int bytesReturned=0;
9f001122:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:198
    size_t bytesParsed=0;
9f001129:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:199
    char *crPtr=NULL;
9f001130:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:200
    char *lineToOutput=*lineptr;
9f001137:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00113a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00113c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:201
    size_t lLinePtrLen=*n;
9f00113f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001142:	8b 00                	mov    eax,DWORD PTR [eax]
9f001144:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:202
    int startFilePos=tellI(stream);
9f001147:	83 ec 0c             	sub    esp,0xc
9f00114a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f00114d:	e8 75 ff ff ff       	call   9f0010c7 <tellI>
9f001152:	83 c4 10             	add    esp,0x10
9f001155:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:203
    int retVal=-1;
9f001158:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/file.c:205
    
    buffer=mallocI(GETLINE_BUFFER_SIZE);        
9f00115f:	83 ec 0c             	sub    esp,0xc
9f001162:	68 00 04 00 00       	push   0x400
9f001167:	e8 89 13 00 00       	call   9f0024f5 <mallocI>
9f00116c:	83 c4 10             	add    esp,0x10
9f00116f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:207
    
    while ((bytesReturned=readI(stream, buffer,GETLINE_BUFFER_SIZE,1))>0)
9f001172:	e9 22 01 00 00       	jmp    9f001299 <getlineI+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:209
    {
        if (crPtr==strstrI(buffer,"\n"))
9f001177:	83 ec 08             	sub    esp,0x8
9f00117a:	8d 83 3d f6 ff ff    	lea    eax,[ebx-0x9c3]
9f001180:	50                   	push   eax
9f001181:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001184:	e8 6d 42 00 00       	call   9f0053f6 <strstrI>
9f001189:	83 c4 10             	add    esp,0x10
9f00118c:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
9f00118f:	0f 85 cf 00 00 00    	jne    9f001264 <getlineI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:211
        { 
            if (crPtr-buffer+bytesParsed<*n)
9f001195:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f001198:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00119b:	29 c2                	sub    edx,eax
9f00119d:	89 d0                	mov    eax,edx
9f00119f:	89 c2                	mov    edx,eax
9f0011a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0011a4:	01 c2                	add    edx,eax
9f0011a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0011a9:	8b 00                	mov    eax,DWORD PTR [eax]
9f0011ab:	39 c2                	cmp    edx,eax
9f0011ad:	73 1f                	jae    9f0011ce <getlineI+0xbe>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:212
                strncatI(lineToOutput,buffer,crPtr-buffer);
9f0011af:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0011b2:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0011b5:	29 c2                	sub    edx,eax
9f0011b7:	89 d0                	mov    eax,edx
9f0011b9:	89 c2                	mov    edx,eax
9f0011bb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0011be:	83 ec 04             	sub    esp,0x4
9f0011c1:	52                   	push   edx
9f0011c2:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f0011c5:	50                   	push   eax
9f0011c6:	e8 a9 37 00 00       	call   9f004974 <strncatI>
9f0011cb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:213
            if (bytesParsed+(crPtr-buffer)>*n)
9f0011ce:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0011d1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0011d4:	29 c2                	sub    edx,eax
9f0011d6:	89 d0                	mov    eax,edx
9f0011d8:	89 c2                	mov    edx,eax
9f0011da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0011dd:	01 c2                	add    edx,eax
9f0011df:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0011e2:	8b 00                	mov    eax,DWORD PTR [eax]
9f0011e4:	39 c2                	cmp    edx,eax
9f0011e6:	76 21                	jbe    9f001209 <getlineI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:214
                reallocI(lineToOutput,bytesParsed+(crPtr-buffer));
9f0011e8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0011eb:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0011ee:	29 c2                	sub    edx,eax
9f0011f0:	89 d0                	mov    eax,edx
9f0011f2:	89 c2                	mov    edx,eax
9f0011f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0011f7:	01 c2                	add    edx,eax
9f0011f9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0011fc:	83 ec 08             	sub    esp,0x8
9f0011ff:	52                   	push   edx
9f001200:	50                   	push   eax
9f001201:	e8 cf 15 00 00       	call   9f0027d5 <reallocI>
9f001206:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:215
            strncatI(lineToOutput,buffer,crPtr-buffer);
9f001209:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00120c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00120f:	29 c2                	sub    edx,eax
9f001211:	89 d0                	mov    eax,edx
9f001213:	89 c2                	mov    edx,eax
9f001215:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001218:	83 ec 04             	sub    esp,0x4
9f00121b:	52                   	push   edx
9f00121c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f00121f:	50                   	push   eax
9f001220:	e8 4f 37 00 00       	call   9f004974 <strncatI>
9f001225:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:216
            bytesParsed+=(crPtr-buffer);
9f001228:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00122b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00122e:	29 c2                	sub    edx,eax
9f001230:	89 d0                	mov    eax,edx
9f001232:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:217
            seekI(stream, startFilePos+bytesParsed,SEEK_SET);
9f001235:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f001238:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00123b:	01 d0                	add    eax,edx
9f00123d:	83 ec 04             	sub    esp,0x4
9f001240:	6a 00                	push   0x0
9f001242:	50                   	push   eax
9f001243:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001246:	e8 af fa ff ff       	call   9f000cfa <seekI>
9f00124b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:218
            *n=lLinePtrLen;
9f00124e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001251:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001254:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:219
            lineptr=&lineToOutput;
9f001256:	8d 45 d8             	lea    eax,[ebp-0x28]
9f001259:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:220
            retVal=bytesParsed;
9f00125c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00125f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:221
            goto getlineReturn;
9f001262:	eb 57                	jmp    9f0012bb <getlineI+0x1ab>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:225
        }
        else
        {
            lLinePtrLen+=bytesReturned;
9f001264:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001267:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:226
            bytesParsed+=bytesReturned;
9f00126a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00126d:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:227
            reallocI(lineToOutput,lLinePtrLen);
9f001270:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001273:	83 ec 08             	sub    esp,0x8
9f001276:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001279:	50                   	push   eax
9f00127a:	e8 56 15 00 00       	call   9f0027d5 <reallocI>
9f00127f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:228
            strncatI(lineToOutput,buffer,GETLINE_BUFFER_SIZE);
9f001282:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001285:	83 ec 04             	sub    esp,0x4
9f001288:	68 00 04 00 00       	push   0x400
9f00128d:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001290:	50                   	push   eax
9f001291:	e8 de 36 00 00       	call   9f004974 <strncatI>
9f001296:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:207
    int startFilePos=tellI(stream);
    int retVal=-1;
    
    buffer=mallocI(GETLINE_BUFFER_SIZE);        
    
    while ((bytesReturned=readI(stream, buffer,GETLINE_BUFFER_SIZE,1))>0)
9f001299:	6a 01                	push   0x1
9f00129b:	68 00 04 00 00       	push   0x400
9f0012a0:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f0012a3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0012a6:	e8 99 f9 ff ff       	call   9f000c44 <readI>
9f0012ab:	83 c4 10             	add    esp,0x10
9f0012ae:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f0012b1:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f0012b5:	0f 8f bc fe ff ff    	jg     9f001177 <getlineI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:233
            strncatI(lineToOutput,buffer,GETLINE_BUFFER_SIZE);
        }
    }

getlineReturn:    
    freeI(buffer);
9f0012bb:	83 ec 0c             	sub    esp,0xc
9f0012be:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f0012c1:	e8 ad 10 00 00       	call   9f002373 <freeI>
9f0012c6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:234
    return retVal;
9f0012c9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:235
}
9f0012cc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0012cf:	c9                   	leave  
9f0012d0:	c3                   	ret    

9f0012d1 <getline>:
getline():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:238

VISIBLE size_t getline(char **lineptr, size_t *n, void *stream)
{
9f0012d1:	55                   	push   ebp
9f0012d2:	89 e5                	mov    ebp,esp
9f0012d4:	83 ec 08             	sub    esp,0x8
9f0012d7:	e8 b6 4e 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0012dc:	05 00 7f 00 00       	add    eax,0x7f00
/home/yogi/src/os/aproj/libChrisOS/src/file.c:239
    return getlineI(lineptr, n, stream);
9f0012e1:	83 ec 04             	sub    esp,0x4
9f0012e4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0012e7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0012ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0012ed:	e8 1e fe ff ff       	call   9f001110 <getlineI>
9f0012f2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:240
}
9f0012f5:	c9                   	leave  
9f0012f6:	c3                   	ret    

9f0012f7 <unlink>:
unlink():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:243

VISIBLE int unlink(char *filename)
{
9f0012f7:	55                   	push   ebp
9f0012f8:	89 e5                	mov    ebp,esp
9f0012fa:	53                   	push   ebx
9f0012fb:	83 ec 04             	sub    esp,0x4
9f0012fe:	e8 8f 4e 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f001303:	05 d9 7e 00 00       	add    eax,0x7ed9
/home/yogi/src/os/aproj/libChrisOS/src/file.c:244
    return do_syscall1(SYSCALL_UNLINK,(uintptr_t)filename);
9f001308:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00130b:	83 ec 08             	sub    esp,0x8
9f00130e:	52                   	push   edx
9f00130f:	6a 0d                	push   0xd
9f001311:	89 c3                	mov    ebx,eax
9f001313:	e8 28 02 00 00       	call   9f001540 <do_syscall1>
9f001318:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:245
9f00131b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00131e:	c9                   	leave  
9f00131f:	c3                   	ret    

9f001320 <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
9f001320:	55                   	push   ebp
9f001321:	89 e5                	mov    ebp,esp
9f001323:	53                   	push   ebx
9f001324:	e8 69 4e 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f001329:	05 b3 7e 00 00       	add    eax,0x7eb3
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
9f00132e:	b8 05 00 00 00       	mov    eax,0x5
9f001333:	bb 01 00 00 00       	mov    ebx,0x1
9f001338:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00133b:	89 d1                	mov    ecx,edx
9f00133d:	e8 fc ff ff ff       	call   9f00133e <puts+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
9f001342:	90                   	nop
9f001343:	5b                   	pop    ebx
9f001344:	5d                   	pop    ebp
9f001345:	c3                   	ret    

9f001346 <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
9f001346:	55                   	push   ebp
9f001347:	89 e5                	mov    ebp,esp
9f001349:	53                   	push   ebx
9f00134a:	83 ec 14             	sub    esp,0x14
9f00134d:	e8 40 4e 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f001352:	05 8a 7e 00 00       	add    eax,0x7e8a
9f001357:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00135a:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
9f00135d:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
9f001363:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
9f001367:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
9f00136a:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
9f00136e:	b8 05 00 00 00       	mov    eax,0x5
9f001373:	bb 01 00 00 00       	mov    ebx,0x1
9f001378:	8d 55 fa             	lea    edx,[ebp-0x6]
9f00137b:	89 d1                	mov    ecx,edx
9f00137d:	e8 fc ff ff ff       	call   9f00137e <putc+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
9f001382:	90                   	nop
9f001383:	83 c4 14             	add    esp,0x14
9f001386:	5b                   	pop    ebx
9f001387:	5d                   	pop    ebp
9f001388:	c3                   	ret    

9f001389 <getchar>:
getchar():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32



VISIBLE char getchar()
{
9f001389:	55                   	push   ebp
9f00138a:	89 e5                	mov    ebp,esp
9f00138c:	53                   	push   ebx
9f00138d:	83 ec 10             	sub    esp,0x10
9f001390:	e8 fd 4d 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f001395:	05 47 7e 00 00       	add    eax,0x7e47
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:36
    char c;
    while (1==1)
    {
        READCHAR(c);
9f00139a:	b8 04 00 00 00       	mov    eax,0x4
9f00139f:	ba 00 00 00 00       	mov    edx,0x0
9f0013a4:	89 d3                	mov    ebx,edx
9f0013a6:	e8 fc ff ff ff       	call   9f0013a7 <getchar+0x1e>
9f0013ab:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:37
        if (c)
9f0013ae:	80 7d fb 00          	cmp    BYTE PTR [ebp-0x5],0x0
9f0013b2:	74 06                	je     9f0013ba <getchar+0x31>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38
            return c;
9f0013b4:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
9f0013b8:	eb 0c                	jmp    9f0013c6 <getchar+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:39
        asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f0013ba:	b8 02 03 00 00       	mov    eax,0x302
9f0013bf:	e8 fc ff ff ff       	call   9f0013c0 <getchar+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:40
    }
9f0013c4:	eb d4                	jmp    9f00139a <getchar+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:42
    return 0; //Should not get here
}
9f0013c6:	83 c4 10             	add    esp,0x10
9f0013c9:	5b                   	pop    ebx
9f0013ca:	5d                   	pop    ebp
9f0013cb:	c3                   	ret    

9f0013cc <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
9f0013cc:	55                   	push   ebp
9f0013cd:	89 e5                	mov    ebp,esp
9f0013cf:	53                   	push   ebx
9f0013d0:	83 ec 14             	sub    esp,0x14
9f0013d3:	e8 ba 4d 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0013d8:	05 04 7e 00 00       	add    eax,0x7e04
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:48
    char inchar;
    int len=0;
9f0013dd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    char lbuf[2];
    
    lbuf[0]=lbuf[1]=0;
9f0013e4:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
9f0013e8:	0f b6 55 f2          	movzx  edx,BYTE PTR [ebp-0xe]
9f0013ec:	88 55 f1             	mov    BYTE PTR [ebp-0xf],dl
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52
    if (stream!=1)
9f0013ef:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f0013f3:	74 19                	je     9f00140e <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54
    {
        printI("Stream %u not implemented\n",stream);
9f0013f5:	83 ec 08             	sub    esp,0x8
9f0013f8:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0013fb:	8d 90 3f f6 ff ff    	lea    edx,[eax-0x9c1]
9f001401:	52                   	push   edx
9f001402:	89 c3                	mov    ebx,eax
9f001404:	e8 a8 03 00 00       	call   9f0017b1 <printI>
9f001409:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:55 (discriminator 1)
        getsError: goto getsError;
9f00140c:	eb fe                	jmp    9f00140c <gets+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:60
    }
    
    while (1==1)
    {
        READCHAR(inchar)
9f00140e:	b8 04 00 00 00       	mov    eax,0x4
9f001413:	ba 00 00 00 00       	mov    edx,0x0
9f001418:	89 d3                	mov    ebx,edx
9f00141a:	e8 fc ff ff ff       	call   9f00141b <gets+0x4f>
9f00141f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61
        if (inchar=='\b' && len>0)
9f001422:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
9f001426:	75 17                	jne    9f00143f <gets+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61 (discriminator 1)
9f001428:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f00142c:	7e 11                	jle    9f00143f <gets+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
        {
            buffer[len]=0;
9f00142e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001434:	01 d0                	add    eax,edx
9f001436:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:64
            len--;
9f001439:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
9f00143d:	eb 43                	jmp    9f001482 <gets+0xb6>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:66
        }
        else if (inchar!=0)
9f00143f:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
9f001443:	74 33                	je     9f001478 <gets+0xac>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:68
        {
            lbuf[0]=inchar;
9f001445:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f001449:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:70
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
9f00144c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00144f:	8d 50 01             	lea    edx,[eax+0x1]
9f001452:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f001455:	89 c2                	mov    edx,eax
9f001457:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00145a:	01 c2                	add    edx,eax
9f00145c:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f001460:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:72
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
9f001462:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001465:	83 c0 01             	add    eax,0x1
9f001468:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f00146b:	7d 06                	jge    9f001473 <gets+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:72 (discriminator 1)
9f00146d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
9f001471:	75 9b                	jne    9f00140e <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:74
            
                return len;
9f001473:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001476:	eb 0c                	jmp    9f001484 <gets+0xb8>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:77
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f001478:	b8 02 03 00 00       	mov    eax,0x302
9f00147d:	e8 fc ff ff ff       	call   9f00147e <gets+0xb2>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:82 (discriminator 2)
        //added these for 1000 hertz clock, not needed for 100 hertz
/*            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt*/

    }
9f001482:	eb 8a                	jmp    9f00140e <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:83
}
9f001484:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001487:	c9                   	leave  
9f001488:	c3                   	ret    
9f001489:	66 90                	xchg   ax,ax
9f00148b:	90                   	nop

9f00148c <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
bool libcInitialized = false;
char *printBuffer;


int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)
{
9f00148c:	55                   	push   ebp
9f00148d:	89 e5                	mov    ebp,esp
9f00148f:	56                   	push   esi
9f001490:	53                   	push   ebx
9f001491:	83 ec 10             	sub    esp,0x10
9f001494:	e8 f9 4c 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f001499:	05 43 7d 00 00       	add    eax,0x7d43
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    int retVal=0;
9f00149e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
    SYSCALL4(callnum, param1, param2, param3, param4, retVal);
9f0014a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0014a8:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0014ab:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0014ae:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f0014b1:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
9f0014b4:	e8 fc ff ff ff       	call   9f0014b5 <do_syscall4+0x29>
9f0014b9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:21
    return retVal;
9f0014bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:22
}
9f0014bf:	83 c4 10             	add    esp,0x10
9f0014c2:	5b                   	pop    ebx
9f0014c3:	5e                   	pop    esi
9f0014c4:	5d                   	pop    ebp
9f0014c5:	c3                   	ret    

9f0014c6 <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25

int do_syscall3(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
9f0014c6:	55                   	push   ebp
9f0014c7:	89 e5                	mov    ebp,esp
9f0014c9:	56                   	push   esi
9f0014ca:	53                   	push   ebx
9f0014cb:	83 ec 10             	sub    esp,0x10
9f0014ce:	e8 bf 4c 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0014d3:	05 09 7d 00 00       	add    eax,0x7d09
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    int retVal=0;
9f0014d8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
    SYSCALL3(callnum, param1, param2, param3, retVal);
9f0014df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0014e2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0014e5:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0014e8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f0014eb:	be 00 00 00 00       	mov    esi,0x0
9f0014f0:	e8 fc ff ff ff       	call   9f0014f1 <do_syscall3+0x2b>
9f0014f5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:28
    return retVal;
9f0014f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:29
}
9f0014fb:	83 c4 10             	add    esp,0x10
9f0014fe:	5b                   	pop    ebx
9f0014ff:	5e                   	pop    esi
9f001500:	5d                   	pop    ebp
9f001501:	c3                   	ret    

9f001502 <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32

int do_syscall2(int callnum, uint32_t param1, uint32_t param2)
{
9f001502:	55                   	push   ebp
9f001503:	89 e5                	mov    ebp,esp
9f001505:	56                   	push   esi
9f001506:	53                   	push   ebx
9f001507:	83 ec 10             	sub    esp,0x10
9f00150a:	e8 83 4c 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f00150f:	05 cd 7c 00 00       	add    eax,0x7ccd
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    int retVal=0;
9f001514:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
    SYSCALL2(callnum, param1, param2, retVal);
9f00151b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00151e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f001521:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f001524:	ba 00 00 00 00       	mov    edx,0x0
9f001529:	be 00 00 00 00       	mov    esi,0x0
9f00152e:	e8 fc ff ff ff       	call   9f00152f <do_syscall2+0x2d>
9f001533:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:35
    return retVal;
9f001536:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:36
}
9f001539:	83 c4 10             	add    esp,0x10
9f00153c:	5b                   	pop    ebx
9f00153d:	5e                   	pop    esi
9f00153e:	5d                   	pop    ebp
9f00153f:	c3                   	ret    

9f001540 <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39

int do_syscall1(int callnum, uint32_t param1)
{
9f001540:	55                   	push   ebp
9f001541:	89 e5                	mov    ebp,esp
9f001543:	56                   	push   esi
9f001544:	53                   	push   ebx
9f001545:	83 ec 10             	sub    esp,0x10
9f001548:	e8 45 4c 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f00154d:	05 8f 7c 00 00       	add    eax,0x7c8f
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    int retVal=0;
9f001552:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
    SYSCALL1(callnum, param1, retVal);
9f001559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00155c:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f00155f:	b9 00 00 00 00       	mov    ecx,0x0
9f001564:	ba 00 00 00 00       	mov    edx,0x0
9f001569:	be 00 00 00 00       	mov    esi,0x0
9f00156e:	e8 fc ff ff ff       	call   9f00156f <do_syscall1+0x2f>
9f001573:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:42
    return retVal;
9f001576:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:43
}
9f001579:	83 c4 10             	add    esp,0x10
9f00157c:	5b                   	pop    ebx
9f00157d:	5e                   	pop    esi
9f00157e:	5d                   	pop    ebp
9f00157f:	c3                   	ret    

9f001580 <do_syscall0>:
do_syscall0():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46

int do_syscall0(int callnum)
{
9f001580:	55                   	push   ebp
9f001581:	89 e5                	mov    ebp,esp
9f001583:	56                   	push   esi
9f001584:	53                   	push   ebx
9f001585:	83 ec 10             	sub    esp,0x10
9f001588:	e8 05 4c 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f00158d:	05 4f 7c 00 00       	add    eax,0x7c4f
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:47
    int retVal=0;
9f001592:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
    SYSCALL0(callnum, retVal);
9f001599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00159c:	bb 00 00 00 00       	mov    ebx,0x0
9f0015a1:	b9 00 00 00 00       	mov    ecx,0x0
9f0015a6:	ba 00 00 00 00       	mov    edx,0x0
9f0015ab:	be 00 00 00 00       	mov    esi,0x0
9f0015b0:	e8 fc ff ff ff       	call   9f0015b1 <do_syscall0+0x31>
9f0015b5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:49
    return retVal;
9f0015b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:50
}
9f0015bb:	83 c4 10             	add    esp,0x10
9f0015be:	5b                   	pop    ebx
9f0015bf:	5e                   	pop    esi
9f0015c0:	5d                   	pop    ebp
9f0015c1:	c3                   	ret    

9f0015c2 <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53

VISIBLE void __attribute__((constructor)) libc_init()
{
9f0015c2:	55                   	push   ebp
9f0015c3:	89 e5                	mov    ebp,esp
9f0015c5:	53                   	push   ebx
9f0015c6:	83 ec 04             	sub    esp,0x4
9f0015c9:	e8 12 4c 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f0015ce:	81 c3 0e 7c 00 00    	add    ebx,0x7c0e
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:54
    printdI(DEBUG_LIBC,"***libc_init called\n***");
9f0015d4:	83 ec 08             	sub    esp,0x8
9f0015d7:	8d 83 5c f6 ff ff    	lea    eax,[ebx-0x9a4]
9f0015dd:	50                   	push   eax
9f0015de:	68 00 00 00 02       	push   0x2000000
9f0015e3:	e8 34 02 00 00       	call   9f00181c <printdI>
9f0015e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:55
    if (!libcInitialized)
9f0015eb:	0f b6 83 68 00 00 00 	movzx  eax,BYTE PTR [ebx+0x68]
9f0015f2:	83 f0 01             	xor    eax,0x1
9f0015f5:	84 c0                	test   al,al
9f0015f7:	74 7c                	je     9f001675 <libc_init+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:57
    {
        initmalloc();
9f0015f9:	e8 8e 0c 00 00       	call   9f00228c <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:58
        filesToCloseCount=0;
9f0015fe:	8b 83 d0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x30]
9f001604:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
//        printfI("libc_init: filesToCloseCount=%u\n",filesToCloseCount);
        //processEnvp = envp;
        __asm__("mov %0,[ebp+52]\n":"=a" (processEnvp));
9f00160a:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
9f00160d:	89 c2                	mov    edx,eax
9f00160f:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f001615:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:62
        do_syscall0(SYSCALL_INVALID);
9f001617:	83 ec 0c             	sub    esp,0xc
9f00161a:	6a 00                	push   0x0
9f00161c:	e8 5f ff ff ff       	call   9f001580 <do_syscall0>
9f001621:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:63
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
9f001624:	8d 83 b1 84 ff ff    	lea    eax,[ebx-0x7b4f]
9f00162a:	83 ec 08             	sub    esp,0x8
9f00162d:	50                   	push   eax
9f00162e:	68 63 01 00 00       	push   0x163
9f001633:	e8 08 ff ff ff       	call   9f001540 <do_syscall1>
9f001638:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:64
        libcInitialized = true;
9f00163b:	c6 83 68 00 00 00 01 	mov    BYTE PTR [ebx+0x68],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:65
        printBuffer = mallocI(0x1000);
9f001642:	83 ec 0c             	sub    esp,0xc
9f001645:	68 00 10 00 00       	push   0x1000
9f00164a:	e8 a6 0e 00 00       	call   9f0024f5 <mallocI>
9f00164f:	83 c4 10             	add    esp,0x10
9f001652:	89 c2                	mov    edx,eax
9f001654:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f00165a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:66
        printdI(DEBUG_LIBC,"***libc_init completed\n");
9f00165c:	83 ec 08             	sub    esp,0x8
9f00165f:	8d 83 74 f6 ff ff    	lea    eax,[ebx-0x98c]
9f001665:	50                   	push   eax
9f001666:	68 00 00 00 02       	push   0x2000000
9f00166b:	e8 ac 01 00 00       	call   9f00181c <printdI>
9f001670:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
    }
    else
        printI("libc_init called previously, exiting\n");
}
9f001673:	eb 12                	jmp    9f001687 <libc_init+0xc5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:69
        libcInitialized = true;
        printBuffer = mallocI(0x1000);
        printdI(DEBUG_LIBC,"***libc_init completed\n");
    }
    else
        printI("libc_init called previously, exiting\n");
9f001675:	83 ec 0c             	sub    esp,0xc
9f001678:	8d 83 8c f6 ff ff    	lea    eax,[ebx-0x974]
9f00167e:	50                   	push   eax
9f00167f:	e8 2d 01 00 00       	call   9f0017b1 <printI>
9f001684:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
}
9f001687:	90                   	nop
9f001688:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00168b:	c9                   	leave  
9f00168c:	c3                   	ret    

9f00168d <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:73

void __attribute__((destructor)) libc_cleanup(void)
{
9f00168d:	55                   	push   ebp
9f00168e:	89 e5                	mov    ebp,esp
9f001690:	53                   	push   ebx
9f001691:	83 ec 04             	sub    esp,0x4
9f001694:	e8 47 4b 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f001699:	81 c3 43 7b 00 00    	add    ebx,0x7b43
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:74
    malloc_cleanup();
9f00169f:	e8 78 12 00 00       	call   9f00291c <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:75
    file_cleanup();
9f0016a4:	e8 65 f4 ff ff       	call   9f000b0e <file_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:76
}
9f0016a9:	90                   	nop
9f0016aa:	83 c4 04             	add    esp,0x4
9f0016ad:	5b                   	pop    ebx
9f0016ae:	5d                   	pop    ebp
9f0016af:	c3                   	ret    

9f0016b0 <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:79

VISIBLE int print(const char *format, ...)
{
9f0016b0:	55                   	push   ebp
9f0016b1:	89 e5                	mov    ebp,esp
9f0016b3:	53                   	push   ebx
9f0016b4:	83 ec 14             	sub    esp,0x14
9f0016b7:	e8 24 4b 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f0016bc:	81 c3 20 7b 00 00    	add    ebx,0x7b20
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:81
    va_list args;
    va_start( args, format );
9f0016c2:	8d 45 0c             	lea    eax,[ebp+0xc]
9f0016c5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:83
    
    int size = vsprintf(printBuffer, format, args);
9f0016c8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0016cb:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f0016d1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0016d3:	83 ec 04             	sub    esp,0x4
9f0016d6:	52                   	push   edx
9f0016d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0016da:	50                   	push   eax
9f0016db:	e8 de 2b 00 00       	call   9f0042be <vsprintf>
9f0016e0:	83 c4 10             	add    esp,0x10
9f0016e3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:84
    do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f0016e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0016e9:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f0016ef:	8b 12                	mov    edx,DWORD PTR [edx]
9f0016f1:	50                   	push   eax
9f0016f2:	52                   	push   edx
9f0016f3:	6a 01                	push   0x1
9f0016f5:	6a 05                	push   0x5
9f0016f7:	e8 ca fd ff ff       	call   9f0014c6 <do_syscall3>
9f0016fc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:85
    return 0;
9f0016ff:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:86
}
9f001704:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001707:	c9                   	leave  
9f001708:	c3                   	ret    

9f001709 <printf>:
printf():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:89

VISIBLE int printf(const char *format, ...)
{
9f001709:	55                   	push   ebp
9f00170a:	89 e5                	mov    ebp,esp
9f00170c:	53                   	push   ebx
9f00170d:	83 ec 14             	sub    esp,0x14
9f001710:	e8 cb 4a 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f001715:	81 c3 c7 7a 00 00    	add    ebx,0x7ac7
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:91
    va_list args;
    va_start( args, format );
9f00171b:	8d 45 0c             	lea    eax,[ebp+0xc]
9f00171e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:93
    
    int size = vsprintf(printBuffer, format, args);
9f001721:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001724:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f00172a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00172c:	83 ec 04             	sub    esp,0x4
9f00172f:	52                   	push   edx
9f001730:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001733:	50                   	push   eax
9f001734:	e8 85 2b 00 00       	call   9f0042be <vsprintf>
9f001739:	83 c4 10             	add    esp,0x10
9f00173c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:94
    return do_syscall3(SYSCALL_WRITE, STDOUT_FILE, (uint32_t)printBuffer, size);
9f00173f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001742:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f001748:	8b 12                	mov    edx,DWORD PTR [edx]
9f00174a:	50                   	push   eax
9f00174b:	52                   	push   edx
9f00174c:	6a 01                	push   0x1
9f00174e:	6a 05                	push   0x5
9f001750:	e8 71 fd ff ff       	call   9f0014c6 <do_syscall3>
9f001755:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:95
}
9f001758:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00175b:	c9                   	leave  
9f00175c:	c3                   	ret    

9f00175d <printfI>:
printfI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:98

int printfI(const char *format, ...)
{
9f00175d:	55                   	push   ebp
9f00175e:	89 e5                	mov    ebp,esp
9f001760:	53                   	push   ebx
9f001761:	83 ec 14             	sub    esp,0x14
9f001764:	e8 77 4a 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f001769:	81 c3 73 7a 00 00    	add    ebx,0x7a73
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:100
    va_list args;
    va_start( args, format );
9f00176f:	8d 45 0c             	lea    eax,[ebp+0xc]
9f001772:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:102
    
    int size = vsprintf(printBuffer, format, args);
9f001775:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001778:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f00177e:	8b 00                	mov    eax,DWORD PTR [eax]
9f001780:	83 ec 04             	sub    esp,0x4
9f001783:	52                   	push   edx
9f001784:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001787:	50                   	push   eax
9f001788:	e8 31 2b 00 00       	call   9f0042be <vsprintf>
9f00178d:	83 c4 10             	add    esp,0x10
9f001790:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:103
    return do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f001793:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001796:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f00179c:	8b 12                	mov    edx,DWORD PTR [edx]
9f00179e:	50                   	push   eax
9f00179f:	52                   	push   edx
9f0017a0:	6a 01                	push   0x1
9f0017a2:	6a 05                	push   0x5
9f0017a4:	e8 1d fd ff ff       	call   9f0014c6 <do_syscall3>
9f0017a9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:104
}
9f0017ac:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0017af:	c9                   	leave  
9f0017b0:	c3                   	ret    

9f0017b1 <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:107

int printI(const char *format, ...)
{
9f0017b1:	55                   	push   ebp
9f0017b2:	89 e5                	mov    ebp,esp
9f0017b4:	83 ec 10             	sub    esp,0x10
9f0017b7:	e8 d6 49 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0017bc:	05 20 7a 00 00       	add    eax,0x7a20
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:109
    va_list args;
    va_start( args, format );
9f0017c1:	8d 45 0c             	lea    eax,[ebp+0xc]
9f0017c4:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:110
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
9f0017c7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0017ca:	89 c2                	mov    edx,eax
9f0017cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0017cf:	52                   	push   edx
9f0017d0:	50                   	push   eax
9f0017d1:	68 00 03 00 00       	push   0x300
9f0017d6:	e8 27 fd ff ff       	call   9f001502 <do_syscall2>
9f0017db:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:111
    return 0;
9f0017de:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:112
}
9f0017e3:	c9                   	leave  
9f0017e4:	c3                   	ret    

9f0017e5 <printd>:
printd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:115

VISIBLE int printd(uint32_t DebugLevel, const char *format, ...)
{
9f0017e5:	55                   	push   ebp
9f0017e6:	89 e5                	mov    ebp,esp
9f0017e8:	83 ec 10             	sub    esp,0x10
9f0017eb:	e8 a2 49 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0017f0:	05 ec 79 00 00       	add    eax,0x79ec
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:117
    va_list args;
    va_start( args, format );
9f0017f5:	8d 45 10             	lea    eax,[ebp+0x10]
9f0017f8:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:119
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f0017fb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0017fe:	89 c2                	mov    edx,eax
9f001800:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001803:	52                   	push   edx
9f001804:	50                   	push   eax
9f001805:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001808:	68 01 03 00 00       	push   0x301
9f00180d:	e8 b4 fc ff ff       	call   9f0014c6 <do_syscall3>
9f001812:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:120
    return 0;
9f001815:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:122
    va_end(args);
}
9f00181a:	c9                   	leave  
9f00181b:	c3                   	ret    

9f00181c <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:125

int printdI(uint32_t DebugLevel, const char *format, ...)
{
9f00181c:	55                   	push   ebp
9f00181d:	89 e5                	mov    ebp,esp
9f00181f:	83 ec 10             	sub    esp,0x10
9f001822:	e8 6b 49 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f001827:	05 b5 79 00 00       	add    eax,0x79b5
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:127
    va_list args;
    va_start( args, format );
9f00182c:	8d 45 10             	lea    eax,[ebp+0x10]
9f00182f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:129
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f001832:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001835:	89 c2                	mov    edx,eax
9f001837:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00183a:	52                   	push   edx
9f00183b:	50                   	push   eax
9f00183c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00183f:	68 01 03 00 00       	push   0x301
9f001844:	e8 7d fc ff ff       	call   9f0014c6 <do_syscall3>
9f001849:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:130
    return 0;
9f00184c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:132
    va_end(args);
}
9f001851:	c9                   	leave  
9f001852:	c3                   	ret    

9f001853 <sleepMS>:
sleepMS():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:135

VISIBLE unsigned int sleepMS (unsigned int __ms)
{
9f001853:	55                   	push   ebp
9f001854:	89 e5                	mov    ebp,esp
9f001856:	56                   	push   esi
9f001857:	53                   	push   ebx
9f001858:	83 ec 10             	sub    esp,0x10
9f00185b:	e8 32 49 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f001860:	05 7c 79 00 00       	add    eax,0x797c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:136
    int ms=__ms*MS_PER_TICK;
9f001865:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001868:	69 c0 e8 03 00 00    	imul   eax,eax,0x3e8
9f00186e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f001873:	f7 e2                	mul    edx
9f001875:	89 d0                	mov    eax,edx
9f001877:	c1 e8 05             	shr    eax,0x5
9f00187a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:137
    return SLEEP_TICKS(ms);
9f00187d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001880:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001883:	b8 70 01 00 00       	mov    eax,0x170
9f001888:	bb 00 00 00 00       	mov    ebx,0x0
9f00188d:	b9 00 00 00 00       	mov    ecx,0x0
9f001892:	ba 00 00 00 00       	mov    edx,0x0
9f001897:	be 00 00 00 00       	mov    esi,0x0
9f00189c:	e8 fc ff ff ff       	call   9f00189d <sleepMS+0x4a>
9f0018a1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f0018a4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0018a7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0018aa:	01 d0                	add    eax,edx
9f0018ac:	83 e8 01             	sub    eax,0x1
9f0018af:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0018b2:	b8 66 01 00 00       	mov    eax,0x166
9f0018b7:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
9f0018ba:	b9 00 00 00 00       	mov    ecx,0x0
9f0018bf:	ba 00 00 00 00       	mov    edx,0x0
9f0018c4:	be 00 00 00 00       	mov    esi,0x0
9f0018c9:	e8 fc ff ff ff       	call   9f0018ca <sleepMS+0x77>
9f0018ce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0018d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:138
}
9f0018d4:	83 c4 10             	add    esp,0x10
9f0018d7:	5b                   	pop    ebx
9f0018d8:	5e                   	pop    esi
9f0018d9:	5d                   	pop    ebp
9f0018da:	c3                   	ret    

9f0018db <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:141

VISIBLE unsigned int sleep (unsigned int __seconds)
{
9f0018db:	55                   	push   ebp
9f0018dc:	89 e5                	mov    ebp,esp
9f0018de:	56                   	push   esi
9f0018df:	53                   	push   ebx
9f0018e0:	83 ec 10             	sub    esp,0x10
9f0018e3:	e8 aa 48 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0018e8:	05 f4 78 00 00       	add    eax,0x78f4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:142
    return SLEEP_SECONDS(__seconds);
9f0018ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0018f0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0018f3:	b8 70 01 00 00       	mov    eax,0x170
9f0018f8:	bb 00 00 00 00       	mov    ebx,0x0
9f0018fd:	b9 00 00 00 00       	mov    ecx,0x0
9f001902:	ba 00 00 00 00       	mov    edx,0x0
9f001907:	be 00 00 00 00       	mov    esi,0x0
9f00190c:	e8 fc ff ff ff       	call   9f00190d <sleep+0x32>
9f001911:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001917:	6b d0 64             	imul   edx,eax,0x64
9f00191a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00191d:	01 d0                	add    eax,edx
9f00191f:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f001922:	b8 66 01 00 00       	mov    eax,0x166
9f001927:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f00192a:	b9 00 00 00 00       	mov    ecx,0x0
9f00192f:	ba 00 00 00 00       	mov    edx,0x0
9f001934:	be 00 00 00 00       	mov    esi,0x0
9f001939:	e8 fc ff ff ff       	call   9f00193a <sleep+0x5f>
9f00193e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001941:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:143
}
9f001944:	83 c4 10             	add    esp,0x10
9f001947:	5b                   	pop    ebx
9f001948:	5e                   	pop    esi
9f001949:	5d                   	pop    ebp
9f00194a:	c3                   	ret    

9f00194b <sleepTicks>:
sleepTicks():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:146

VISIBLE unsigned int sleepTicks(unsigned int __ticks)
{
9f00194b:	55                   	push   ebp
9f00194c:	89 e5                	mov    ebp,esp
9f00194e:	56                   	push   esi
9f00194f:	53                   	push   ebx
9f001950:	83 ec 10             	sub    esp,0x10
9f001953:	e8 3a 48 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f001958:	05 84 78 00 00       	add    eax,0x7884
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:147
    return SLEEP_TICKS(__ticks);
9f00195d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001960:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001963:	b8 70 01 00 00       	mov    eax,0x170
9f001968:	bb 00 00 00 00       	mov    ebx,0x0
9f00196d:	b9 00 00 00 00       	mov    ecx,0x0
9f001972:	ba 00 00 00 00       	mov    edx,0x0
9f001977:	be 00 00 00 00       	mov    esi,0x0
9f00197c:	e8 fc ff ff ff       	call   9f00197d <sleepTicks+0x32>
9f001981:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001984:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001987:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00198a:	01 d0                	add    eax,edx
9f00198c:	83 e8 01             	sub    eax,0x1
9f00198f:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f001992:	b8 66 01 00 00       	mov    eax,0x166
9f001997:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f00199a:	b9 00 00 00 00       	mov    ecx,0x0
9f00199f:	ba 00 00 00 00       	mov    edx,0x0
9f0019a4:	be 00 00 00 00       	mov    esi,0x0
9f0019a9:	e8 fc ff ff ff       	call   9f0019aa <sleepTicks+0x5f>
9f0019ae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0019b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:149
    
}
9f0019b4:	83 c4 10             	add    esp,0x10
9f0019b7:	5b                   	pop    ebx
9f0019b8:	5e                   	pop    esi
9f0019b9:	5d                   	pop    ebp
9f0019ba:	c3                   	ret    

9f0019bb <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:152

void stop()
{
9f0019bb:	55                   	push   ebp
9f0019bc:	89 e5                	mov    ebp,esp
9f0019be:	e8 cf 47 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0019c3:	05 19 78 00 00       	add    eax,0x7819
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:153
    do_syscall0(SYSCALL_STOP);
9f0019c8:	68 68 01 00 00       	push   0x168
9f0019cd:	e8 ae fb ff ff       	call   9f001580 <do_syscall0>
9f0019d2:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:154
}
9f0019d5:	90                   	nop
9f0019d6:	c9                   	leave  
9f0019d7:	c3                   	ret    

9f0019d8 <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:157

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
9f0019d8:	55                   	push   ebp
9f0019d9:	89 e5                	mov    ebp,esp
9f0019db:	e8 b2 47 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0019e0:	05 fc 77 00 00       	add    eax,0x77fc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:158
    do_syscall3(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
9f0019e5:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0019e8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0019eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0019ee:	51                   	push   ecx
9f0019ef:	52                   	push   edx
9f0019f0:	50                   	push   eax
9f0019f1:	68 67 01 00 00       	push   0x167
9f0019f6:	e8 cb fa ff ff       	call   9f0014c6 <do_syscall3>
9f0019fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:159
}
9f0019fe:	90                   	nop
9f0019ff:	c9                   	leave  
9f001a00:	c3                   	ret    

9f001a01 <signalTask>:
signalTask():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:162

VISIBLE void signalTask(int signal, int taskNum)
{
9f001a01:	55                   	push   ebp
9f001a02:	89 e5                	mov    ebp,esp
9f001a04:	e8 89 47 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f001a09:	05 d3 77 00 00       	add    eax,0x77d3
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:163
    do_syscall2(SYSCALL_SIGNAL, signal, taskNum);
9f001a0e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001a11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001a14:	52                   	push   edx
9f001a15:	50                   	push   eax
9f001a16:	68 07 03 00 00       	push   0x307
9f001a1b:	e8 e2 fa ff ff       	call   9f001502 <do_syscall2>
9f001a20:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:164
}
9f001a23:	90                   	nop
9f001a24:	c9                   	leave  
9f001a25:	c3                   	ret    

9f001a26 <fork>:
fork():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:167

VISIBLE int fork()
{
9f001a26:	55                   	push   ebp
9f001a27:	89 e5                	mov    ebp,esp
9f001a29:	83 ec 10             	sub    esp,0x10
9f001a2c:	e8 61 47 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f001a31:	05 ab 77 00 00       	add    eax,0x77ab
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:168
    uint32_t retVal = 0;
9f001a36:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:170
    //return do_syscall0(SYSCALL_FORK);
    return do_syscall0(SYSCALL_FORK);
9f001a3d:	6a 0e                	push   0xe
9f001a3f:	e8 3c fb ff ff       	call   9f001580 <do_syscall0>
9f001a44:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:173
    //asm("call sysEnter_Vector\n":"=a" (retVal): "a" (SYSCALL_FORK));
    return retVal;
}
9f001a47:	c9                   	leave  
9f001a48:	c3                   	ret    

9f001a49 <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:176

VISIBLE int exec(char* path, int argc, char** argv)
{
9f001a49:	55                   	push   ebp
9f001a4a:	89 e5                	mov    ebp,esp
9f001a4c:	83 ec 10             	sub    esp,0x10
9f001a4f:	e8 3e 47 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f001a54:	05 88 77 00 00       	add    eax,0x7788
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:177
    int pid=0;
9f001a59:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:178
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
9f001a60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001a63:	8d 80 b2 f6 ff ff    	lea    eax,[eax-0x94e]
9f001a69:	50                   	push   eax
9f001a6a:	68 00 00 00 02       	push   0x2000000
9f001a6f:	e8 a8 fd ff ff       	call   9f00181c <printdI>
9f001a74:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:179
    pid = do_syscall3(SYSCALL_EXEC, (uintptr_t)path, argc, (uintptr_t)argv);
9f001a77:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f001a7a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001a7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001a80:	51                   	push   ecx
9f001a81:	52                   	push   edx
9f001a82:	50                   	push   eax
9f001a83:	6a 59                	push   0x59
9f001a85:	e8 3c fa ff ff       	call   9f0014c6 <do_syscall3>
9f001a8a:	83 c4 10             	add    esp,0x10
9f001a8d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:180
    return pid;
9f001a90:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:181
}
9f001a93:	c9                   	leave  
9f001a94:	c3                   	ret    

9f001a95 <execb>:
execb():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:184

VISIBLE int execb(char* path)
{
9f001a95:	55                   	push   ebp
9f001a96:	89 e5                	mov    ebp,esp
9f001a98:	53                   	push   ebx
9f001a99:	83 ec 24             	sub    esp,0x24
9f001a9c:	e8 3f 47 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f001aa1:	81 c3 3b 77 00 00    	add    ebx,0x773b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:185
    int pid=0, argc=0;
9f001aa7:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
9f001aae:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:187
    char** argv;
    char* spacePtr=path, *lastSpacePtr=path;
9f001ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001ab8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001abe:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:189
    char* program;
    program=mallocI(512);
9f001ac1:	83 ec 0c             	sub    esp,0xc
9f001ac4:	68 00 02 00 00       	push   0x200
9f001ac9:	e8 27 0a 00 00       	call   9f0024f5 <mallocI>
9f001ace:	83 c4 10             	add    esp,0x10
9f001ad1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:192
    do
    {
        spacePtr=strstrI(spacePtr," ");
9f001ad4:	83 ec 08             	sub    esp,0x8
9f001ad7:	8d 83 c5 f6 ff ff    	lea    eax,[ebx-0x93b]
9f001add:	50                   	push   eax
9f001ade:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001ae1:	e8 10 39 00 00       	call   9f0053f6 <strstrI>
9f001ae6:	83 c4 10             	add    esp,0x10
9f001ae9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:193
        if (argc==0)
9f001aec:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001af0:	75 44                	jne    9f001b36 <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:195
        {
            if (spacePtr==0)
9f001af2:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f001af6:	75 22                	jne    9f001b1a <execb+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:196
                strncpyI(program, path, strlenI(path));
9f001af8:	83 ec 0c             	sub    esp,0xc
9f001afb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001afe:	e8 1d 31 00 00       	call   9f004c20 <strlenI>
9f001b03:	83 c4 10             	add    esp,0x10
9f001b06:	83 ec 04             	sub    esp,0x4
9f001b09:	50                   	push   eax
9f001b0a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001b0d:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001b10:	e8 7f 32 00 00       	call   9f004d94 <strncpyI>
9f001b15:	83 c4 10             	add    esp,0x10
9f001b18:	eb 1c                	jmp    9f001b36 <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:198
            else
                strncpyI(program, path, spacePtr-path);
9f001b1a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b20:	29 c2                	sub    edx,eax
9f001b22:	89 d0                	mov    eax,edx
9f001b24:	83 ec 04             	sub    esp,0x4
9f001b27:	50                   	push   eax
9f001b28:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001b2b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001b2e:	e8 61 32 00 00       	call   9f004d94 <strncpyI>
9f001b33:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:200
        }
        argc++;
9f001b36:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:202
            
    } while (spacePtr++);
9f001b3a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001b3d:	8d 50 01             	lea    edx,[eax+0x1]
9f001b40:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001b43:	85 c0                	test   eax,eax
9f001b45:	75 8d                	jne    9f001ad4 <execb+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:204
    
    argv=mallocI((argc*50)+(argc*4));
9f001b47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001b4a:	6b c0 36             	imul   eax,eax,0x36
9f001b4d:	83 ec 0c             	sub    esp,0xc
9f001b50:	50                   	push   eax
9f001b51:	e8 9f 09 00 00       	call   9f0024f5 <mallocI>
9f001b56:	83 c4 10             	add    esp,0x10
9f001b59:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:205
    int argvPtr=4*argc;
9f001b5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001b5f:	c1 e0 02             	shl    eax,0x2
9f001b62:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:206
    spacePtr=path;
9f001b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b68:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:207
    for (int cnt=0;cnt<argc; cnt++)
9f001b6b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
9f001b72:	e9 c8 00 00 00       	jmp    9f001c3f <execb+0x1aa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:209
    {
        argv[cnt]=(char*)argv+argvPtr;
9f001b77:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001b7a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001b81:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001b84:	01 d0                	add    eax,edx
9f001b86:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
9f001b89:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
9f001b8c:	01 ca                	add    edx,ecx
9f001b8e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:210
        spacePtr=strstrI(spacePtr," ");
9f001b90:	83 ec 08             	sub    esp,0x8
9f001b93:	8d 83 c5 f6 ff ff    	lea    eax,[ebx-0x93b]
9f001b99:	50                   	push   eax
9f001b9a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001b9d:	e8 54 38 00 00       	call   9f0053f6 <strstrI>
9f001ba2:	83 c4 10             	add    esp,0x10
9f001ba5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:211
        if (spacePtr)
9f001ba8:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f001bac:	74 2f                	je     9f001bdd <execb+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:212
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f001bae:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001bb1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001bb4:	29 c2                	sub    edx,eax
9f001bb6:	89 d0                	mov    eax,edx
9f001bb8:	89 c1                	mov    ecx,eax
9f001bba:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001bbd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001bc4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001bc7:	01 d0                	add    eax,edx
9f001bc9:	8b 00                	mov    eax,DWORD PTR [eax]
9f001bcb:	83 ec 04             	sub    esp,0x4
9f001bce:	51                   	push   ecx
9f001bcf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001bd2:	50                   	push   eax
9f001bd3:	e8 bc 31 00 00       	call   9f004d94 <strncpyI>
9f001bd8:	83 c4 10             	add    esp,0x10
9f001bdb:	eb 31                	jmp    9f001c0e <execb+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:214
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f001bdd:	83 ec 0c             	sub    esp,0xc
9f001be0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001be3:	e8 38 30 00 00       	call   9f004c20 <strlenI>
9f001be8:	83 c4 10             	add    esp,0x10
9f001beb:	89 c2                	mov    edx,eax
9f001bed:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001bf0:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f001bf7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001bfa:	01 c8                	add    eax,ecx
9f001bfc:	8b 00                	mov    eax,DWORD PTR [eax]
9f001bfe:	83 ec 04             	sub    esp,0x4
9f001c01:	52                   	push   edx
9f001c02:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001c05:	50                   	push   eax
9f001c06:	e8 89 31 00 00       	call   9f004d94 <strncpyI>
9f001c0b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:215 (discriminator 2)
        strtrimI(argv[cnt]);
9f001c0e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001c11:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001c18:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001c1b:	01 d0                	add    eax,edx
9f001c1d:	8b 00                	mov    eax,DWORD PTR [eax]
9f001c1f:	83 ec 0c             	sub    esp,0xc
9f001c22:	50                   	push   eax
9f001c23:	e8 34 35 00 00       	call   9f00515c <strtrimI>
9f001c28:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:216 (discriminator 2)
        lastSpacePtr=spacePtr++;
9f001c2b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001c2e:	8d 50 01             	lea    edx,[eax+0x1]
9f001c31:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001c34:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:217 (discriminator 2)
        argvPtr+=50;
9f001c37:	83 45 e8 32          	add    DWORD PTR [ebp-0x18],0x32
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:207 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((argc*50)+(argc*4));
    int argvPtr=4*argc;
    spacePtr=path;
    for (int cnt=0;cnt<argc; cnt++)
9f001c3b:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:207 (discriminator 1)
9f001c3f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001c42:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001c45:	0f 8c 2c ff ff ff    	jl     9f001b77 <execb+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:219
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
        strtrimI(argv[cnt]);
        lastSpacePtr=spacePtr++;
        argvPtr+=50;
    }
    printdI(DEBUG_LIBC,"libc: execb for %s\n",path);;
9f001c4b:	83 ec 04             	sub    esp,0x4
9f001c4e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001c51:	8d 83 c7 f6 ff ff    	lea    eax,[ebx-0x939]
9f001c57:	50                   	push   eax
9f001c58:	68 00 00 00 02       	push   0x2000000
9f001c5d:	e8 ba fb ff ff       	call   9f00181c <printdI>
9f001c62:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:220
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)program, argc, (uintptr_t)argv);
9f001c65:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
9f001c68:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001c6b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001c6e:	51                   	push   ecx
9f001c6f:	52                   	push   edx
9f001c70:	50                   	push   eax
9f001c71:	68 05 03 00 00       	push   0x305
9f001c76:	e8 4b f8 ff ff       	call   9f0014c6 <do_syscall3>
9f001c7b:	83 c4 10             	add    esp,0x10
9f001c7e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:224
/*    __asm__("push ds\nint 0x80\npop ds\n"
            :"=a" (pid)
            :"a" (0x59),"b" (program),"c" (argc),"d" (argv));*/
    return pid;
9f001c81:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:227
    freeI(argv);
    freeI(program);
}
9f001c84:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001c87:	c9                   	leave  
9f001c88:	c3                   	ret    

9f001c89 <execa>:
execa():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:230

VISIBLE int execa(char* path, int argc, char** argv)
{
9f001c89:	55                   	push   ebp
9f001c8a:	89 e5                	mov    ebp,esp
9f001c8c:	83 ec 10             	sub    esp,0x10
9f001c8f:	e8 fe 44 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f001c94:	05 48 75 00 00       	add    eax,0x7548
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:231
    int pid=0;
9f001c99:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:232
    printdI(DEBUG_LIBC,"libc: execa for %s\n",path);;
9f001ca0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001ca3:	8d 80 db f6 ff ff    	lea    eax,[eax-0x925]
9f001ca9:	50                   	push   eax
9f001caa:	68 00 00 00 02       	push   0x2000000
9f001caf:	e8 68 fb ff ff       	call   9f00181c <printdI>
9f001cb4:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:233
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)path, argc, (uintptr_t)argv);
9f001cb7:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f001cba:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001cc0:	51                   	push   ecx
9f001cc1:	52                   	push   edx
9f001cc2:	50                   	push   eax
9f001cc3:	68 05 03 00 00       	push   0x305
9f001cc8:	e8 f9 f7 ff ff       	call   9f0014c6 <do_syscall3>
9f001ccd:	83 c4 10             	add    esp,0x10
9f001cd0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:234
    return pid;
9f001cd3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:235
}
9f001cd6:	c9                   	leave  
9f001cd7:	c3                   	ret    

9f001cd8 <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:238

VISIBLE int waitpid(uint32_t pid)
{
9f001cd8:	55                   	push   ebp
9f001cd9:	89 e5                	mov    ebp,esp
9f001cdb:	e8 b2 44 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f001ce0:	05 fc 74 00 00       	add    eax,0x74fc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:239
    return do_syscall1(SYSCALL_WAITFORPID,pid);
9f001ce5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001ce8:	6a 61                	push   0x61
9f001cea:	e8 51 f8 ff ff       	call   9f001540 <do_syscall1>
9f001cef:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:240
}
9f001cf2:	c9                   	leave  
9f001cf3:	c3                   	ret    

9f001cf4 <exit>:
exit():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:244


VISIBLE void exit (int status)
{
9f001cf4:	55                   	push   ebp
9f001cf5:	89 e5                	mov    ebp,esp
9f001cf7:	e8 96 44 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f001cfc:	05 e0 74 00 00       	add    eax,0x74e0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:245
    do_syscall2(SYSCALL_ENDPROCESS, 0, status);
9f001d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001d04:	50                   	push   eax
9f001d05:	6a 00                	push   0x0
9f001d07:	6a 01                	push   0x1
9f001d09:	e8 f4 f7 ff ff       	call   9f001502 <do_syscall2>
9f001d0e:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:246
}
9f001d11:	90                   	nop
9f001d12:	c9                   	leave  
9f001d13:	c3                   	ret    

9f001d14 <setcwd>:
setcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:249

VISIBLE char* setcwd(char* buf, size_t size)
{
9f001d14:	55                   	push   ebp
9f001d15:	89 e5                	mov    ebp,esp
9f001d17:	e8 76 44 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f001d1c:	05 c0 74 00 00       	add    eax,0x74c0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:250
    return (char*)do_syscall2(SYSCALL_SETCWD,(uint32_t)buf,size);
9f001d21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001d24:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001d27:	50                   	push   eax
9f001d28:	6a 50                	push   0x50
9f001d2a:	e8 d3 f7 ff ff       	call   9f001502 <do_syscall2>
9f001d2f:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:251
}
9f001d32:	c9                   	leave  
9f001d33:	c3                   	ret    

9f001d34 <splitI>:
splitI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:254

size_t splitI(char *buffer, char *argv[], size_t argv_size)
{
9f001d34:	55                   	push   ebp
9f001d35:	89 e5                	mov    ebp,esp
9f001d37:	83 ec 20             	sub    esp,0x20
9f001d3a:	e8 53 44 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f001d3f:	05 9d 74 00 00       	add    eax,0x749d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:257
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
9f001d44:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:258
    size_t argc = 0;
9f001d4b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:260

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f001d52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001d55:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
9f001d58:	e9 d8 00 00 00       	jmp    9f001e35 <splitI+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:261
        c = (unsigned char) *p;
9f001d5d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001d60:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001d63:	0f b6 c0             	movzx  eax,al
9f001d66:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:262
        switch (state) {
9f001d69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001d6c:	83 f8 01             	cmp    eax,0x1
9f001d6f:	74 7e                	je     9f001def <splitI+0xbb>
9f001d71:	83 f8 01             	cmp    eax,0x1
9f001d74:	72 0a                	jb     9f001d80 <splitI+0x4c>
9f001d76:	83 f8 02             	cmp    eax,0x2
9f001d79:	74 45                	je     9f001dc0 <splitI+0x8c>
9f001d7b:	e9 b1 00 00 00       	jmp    9f001e31 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:264
        case DULL:
            if (ISSPACE(c)) {
9f001d80:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001d84:	0f 94 c0             	sete   al
9f001d87:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
9f001d8a:	0f b6 45 eb          	movzx  eax,BYTE PTR [ebp-0x15]
9f001d8e:	84 c0                	test   al,al
9f001d90:	0f 85 94 00 00 00    	jne    9f001e2a <splitI+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:268
                continue;
            }

            if (c == '"') {
9f001d96:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001d9a:	75 15                	jne    9f001db1 <splitI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:269
                state = IN_STRING;
9f001d9c:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:270
                start_of_word = p + 1; 
9f001da3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001da6:	83 c0 01             	add    eax,0x1
9f001da9:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:271
                continue;
9f001dac:	e9 80 00 00 00       	jmp    9f001e31 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:273
            }
            state = IN_WORD;
9f001db1:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:274
            start_of_word = p;
9f001db8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001dbb:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:275
            continue;
9f001dbe:	eb 71                	jmp    9f001e31 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:278

        case IN_STRING:
            if (c == '"') {
9f001dc0:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001dc4:	75 67                	jne    9f001e2d <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:279
                *p = 0;
9f001dc6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001dc9:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:280
                argv[argc++] = start_of_word;
9f001dcc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001dcf:	8d 50 01             	lea    edx,[eax+0x1]
9f001dd2:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001dd5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001ddc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001ddf:	01 c2                	add    edx,eax
9f001de1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001de4:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:281
                state = DULL;
9f001de6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:283
            }
            continue;
9f001ded:	eb 3e                	jmp    9f001e2d <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:286

        case IN_WORD:
            if (ISSPACE(c)) {
9f001def:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001df3:	0f 94 c0             	sete   al
9f001df6:	88 45 ea             	mov    BYTE PTR [ebp-0x16],al
9f001df9:	0f b6 45 ea          	movzx  eax,BYTE PTR [ebp-0x16]
9f001dfd:	84 c0                	test   al,al
9f001dff:	74 2f                	je     9f001e30 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:287
                *p = 0;
9f001e01:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001e04:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:288
                argv[argc++] = start_of_word;
9f001e07:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001e0a:	8d 50 01             	lea    edx,[eax+0x1]
9f001e0d:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001e10:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001e17:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e1a:	01 c2                	add    edx,eax
9f001e1c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001e1f:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:289
                state = DULL;
9f001e21:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:291
            }
            continue;
9f001e28:	eb 06                	jmp    9f001e30 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:265
    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
        c = (unsigned char) *p;
        switch (state) {
        case DULL:
            if (ISSPACE(c)) {
                continue;
9f001e2a:	90                   	nop
9f001e2b:	eb 04                	jmp    9f001e31 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:283
            if (c == '"') {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f001e2d:	90                   	nop
9f001e2e:	eb 01                	jmp    9f001e31 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:291
            if (ISSPACE(c)) {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f001e30:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:260 (discriminator 2)
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
    size_t argc = 0;

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f001e31:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:260 (discriminator 1)
9f001e35:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001e38:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f001e3b:	73 0e                	jae    9f001e4b <splitI+0x117>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:260 (discriminator 3)
9f001e3d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001e40:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001e43:	84 c0                	test   al,al
9f001e45:	0f 85 12 ff ff ff    	jne    9f001d5d <splitI+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:295
            }
            continue;
        }
    }

    if (state != DULL && argc < argv_size)
9f001e4b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001e4f:	74 22                	je     9f001e73 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:295 (discriminator 1)
9f001e51:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001e54:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f001e57:	73 1a                	jae    9f001e73 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:296
        argv[argc++] = start_of_word;
9f001e59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001e5c:	8d 50 01             	lea    edx,[eax+0x1]
9f001e5f:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001e62:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001e69:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e6c:	01 c2                	add    edx,eax
9f001e6e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001e71:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:298

    return argc;
9f001e73:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:299
}
9f001e76:	c9                   	leave  
9f001e77:	c3                   	ret    

9f001e78 <split>:
split():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:302

VISIBLE size_t split(char *buffer, char *argv[], size_t argv_size)
{
9f001e78:	55                   	push   ebp
9f001e79:	89 e5                	mov    ebp,esp
9f001e7b:	e8 12 43 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f001e80:	05 5c 73 00 00       	add    eax,0x735c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:303
    return splitI(buffer, argv, argv_size);
9f001e85:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001e88:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001e8b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001e8e:	e8 a1 fe ff ff       	call   9f001d34 <splitI>
9f001e93:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:304
}
9f001e96:	c9                   	leave  
9f001e97:	c3                   	ret    

9f001e98 <cmdlineToArgvI>:
cmdlineToArgvI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:307

char** cmdlineToArgvI(const char* cmdline, int *argc)
{
9f001e98:	55                   	push   ebp
9f001e99:	89 e5                	mov    ebp,esp
9f001e9b:	56                   	push   esi
9f001e9c:	53                   	push   ebx
9f001e9d:	81 ec 30 04 00 00    	sub    esp,0x430
9f001ea3:	e8 38 43 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f001ea8:	81 c3 34 73 00 00    	add    ebx,0x7334
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:310
    char** argv;
    char cmd[1024];
    char *spacePtr=cmd, *lastSpacePtr=cmd, *quotePtr=cmd;
9f001eae:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001eb4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001eb7:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001ebd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001ec0:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001ec6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:311
    char dblquote[2] = {'"',0};
9f001ec9:	c6 85 d6 fb ff ff 22 	mov    BYTE PTR [ebp-0x42a],0x22
9f001ed0:	c6 85 d7 fb ff ff 00 	mov    BYTE PTR [ebp-0x429],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:312
    *argc = 0;
9f001ed7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001eda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:314
    
    strncpyI(cmd,cmdline,1024);
9f001ee0:	83 ec 04             	sub    esp,0x4
9f001ee3:	68 00 04 00 00       	push   0x400
9f001ee8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001eeb:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001ef1:	50                   	push   eax
9f001ef2:	e8 9d 2e 00 00       	call   9f004d94 <strncpyI>
9f001ef7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:315
    strtrimI(cmd);
9f001efa:	83 ec 0c             	sub    esp,0xc
9f001efd:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001f03:	50                   	push   eax
9f001f04:	e8 53 32 00 00       	call   9f00515c <strtrimI>
9f001f09:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:318
    do
    {
        quotePtr = strnstrI(spacePtr,dblquote,4000);        //Need to honor double quotes
9f001f0c:	83 ec 04             	sub    esp,0x4
9f001f0f:	68 a0 0f 00 00       	push   0xfa0
9f001f14:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001f1a:	50                   	push   eax
9f001f1b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001f1e:	e8 35 34 00 00       	call   9f005358 <strnstrI>
9f001f23:	83 c4 10             	add    esp,0x10
9f001f26:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:319
        spacePtr=strstrI(spacePtr," ");
9f001f29:	83 ec 08             	sub    esp,0x8
9f001f2c:	8d 83 c5 f6 ff ff    	lea    eax,[ebx-0x93b]
9f001f32:	50                   	push   eax
9f001f33:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001f36:	e8 bb 34 00 00       	call   9f0053f6 <strstrI>
9f001f3b:	83 c4 10             	add    esp,0x10
9f001f3e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:320
        if (quotePtr!=0 && (quotePtr <= spacePtr))                            //If a double quote shows up before a space ...
9f001f41:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f001f45:	74 48                	je     9f001f8f <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:320 (discriminator 1)
9f001f47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001f4a:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001f4d:	77 40                	ja     9f001f8f <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:322
        {
            char *temp = spacePtr;
9f001f4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001f52:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:323
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);  //Look for the closing double quote
9f001f55:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001f58:	8d 50 01             	lea    edx,[eax+0x1]
9f001f5b:	83 ec 04             	sub    esp,0x4
9f001f5e:	68 a0 0f 00 00       	push   0xfa0
9f001f63:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001f69:	50                   	push   eax
9f001f6a:	52                   	push   edx
9f001f6b:	e8 e8 33 00 00       	call   9f005358 <strnstrI>
9f001f70:	83 c4 10             	add    esp,0x10
9f001f73:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:324
            if (spacePtr>=quotePtr+4000)
9f001f76:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001f79:	05 a0 0f 00 00       	add    eax,0xfa0
9f001f7e:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001f81:	77 08                	ja     9f001f8b <cmdlineToArgvI+0xf3>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:325
                spacePtr = temp;                            //Didn't find it so resume normal processing (space bound)
9f001f83:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f001f86:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001f89:	eb 04                	jmp    9f001f8f <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:327
            else
                spacePtr += 1;                              //Skip the closing quote
9f001f8b:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:329
        }
        *argc+=1;
9f001f8f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001f92:	8b 00                	mov    eax,DWORD PTR [eax]
9f001f94:	8d 50 01             	lea    edx,[eax+0x1]
9f001f97:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001f9a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:330
        if (spacePtr!=0 && *spacePtr)
9f001f9c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001fa0:	74 0e                	je     9f001fb0 <cmdlineToArgvI+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:330 (discriminator 1)
9f001fa2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001fa5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001fa8:	84 c0                	test   al,al
9f001faa:	74 04                	je     9f001fb0 <cmdlineToArgvI+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:331
            spacePtr++;
9f001fac:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:333
    
    } while (spacePtr!=0 && *spacePtr);
9f001fb0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001fb4:	74 0e                	je     9f001fc4 <cmdlineToArgvI+0x12c>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:333 (discriminator 1)
9f001fb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001fb9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001fbc:	84 c0                	test   al,al
9f001fbe:	0f 85 48 ff ff ff    	jne    9f001f0c <cmdlineToArgvI+0x74>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:335
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
9f001fc4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001fc7:	8b 10                	mov    edx,DWORD PTR [eax]
9f001fc9:	89 d0                	mov    eax,edx
9f001fcb:	c1 e0 08             	shl    eax,0x8
9f001fce:	29 d0                	sub    eax,edx
9f001fd0:	89 c2                	mov    edx,eax
9f001fd2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001fd5:	8b 00                	mov    eax,DWORD PTR [eax]
9f001fd7:	c1 e0 02             	shl    eax,0x2
9f001fda:	01 d0                	add    eax,edx
9f001fdc:	83 ec 0c             	sub    esp,0xc
9f001fdf:	50                   	push   eax
9f001fe0:	e8 10 05 00 00       	call   9f0024f5 <mallocI>
9f001fe5:	83 c4 10             	add    esp,0x10
9f001fe8:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:336
    int argvPtr=4* *argc;
9f001feb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001fee:	8b 00                	mov    eax,DWORD PTR [eax]
9f001ff0:	c1 e0 02             	shl    eax,0x2
9f001ff3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:337
    spacePtr=cmd;
9f001ff6:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001ffc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:338
    for (int cnt=0;cnt<*argc; cnt++)
9f001fff:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f002006:	e9 72 01 00 00       	jmp    9f00217d <cmdlineToArgvI+0x2e5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:340
    {
        argv[cnt]=(char*)argv+argvPtr;
9f00200b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00200e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f002015:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002018:	01 d0                	add    eax,edx
9f00201a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f00201d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f002020:	01 ca                	add    edx,ecx
9f002022:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:341
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
9f002024:	83 ec 04             	sub    esp,0x4
9f002027:	68 a0 0f 00 00       	push   0xfa0
9f00202c:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f002032:	50                   	push   eax
9f002033:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002036:	e8 1d 33 00 00       	call   9f005358 <strnstrI>
9f00203b:	83 c4 10             	add    esp,0x10
9f00203e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:342
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
9f002041:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f002045:	0f 84 80 00 00 00    	je     9f0020cb <cmdlineToArgvI+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:342 (discriminator 1)
9f00204b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00204e:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f002051:	77 78                	ja     9f0020cb <cmdlineToArgvI+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:344
        {
            char *temp = spacePtr;
9f002053:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002056:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:345
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
9f002059:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00205c:	8d 50 01             	lea    edx,[eax+0x1]
9f00205f:	83 ec 04             	sub    esp,0x4
9f002062:	68 a0 0f 00 00       	push   0xfa0
9f002067:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f00206d:	50                   	push   eax
9f00206e:	52                   	push   edx
9f00206f:	e8 e4 32 00 00       	call   9f005358 <strnstrI>
9f002074:	83 c4 10             	add    esp,0x10
9f002077:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:346
            if (spacePtr>=quotePtr+4000)
9f00207a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00207d:	05 a0 0f 00 00       	add    eax,0xfa0
9f002082:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f002085:	77 0b                	ja     9f002092 <cmdlineToArgvI+0x1fa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:347
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
9f002087:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f00208a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:343
    for (int cnt=0;cnt<*argc; cnt++)
    {
        argv[cnt]=(char*)argv+argvPtr;
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
        {
9f00208d:	e9 d4 00 00 00       	jmp    9f002166 <cmdlineToArgvI+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:350
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
            if (spacePtr>=quotePtr+4000)
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
            else
            {
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
9f002092:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002095:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002098:	29 c2                	sub    edx,eax
9f00209a:	89 d0                	mov    eax,edx
9f00209c:	83 e8 02             	sub    eax,0x2
9f00209f:	89 c6                	mov    esi,eax
9f0020a1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0020a4:	8d 50 01             	lea    edx,[eax+0x1]
9f0020a7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0020aa:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f0020b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0020b4:	01 c8                	add    eax,ecx
9f0020b6:	8b 00                	mov    eax,DWORD PTR [eax]
9f0020b8:	83 ec 04             	sub    esp,0x4
9f0020bb:	56                   	push   esi
9f0020bc:	52                   	push   edx
9f0020bd:	50                   	push   eax
9f0020be:	e8 d1 2c 00 00       	call   9f004d94 <strncpyI>
9f0020c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:343
    for (int cnt=0;cnt<*argc; cnt++)
    {
        argv[cnt]=(char*)argv+argvPtr;
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
        {
9f0020c6:	e9 9b 00 00 00       	jmp    9f002166 <cmdlineToArgvI+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:355
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
            }
        }
        else
        {
            spacePtr=strstrI(spacePtr," ");
9f0020cb:	83 ec 08             	sub    esp,0x8
9f0020ce:	8d 83 c5 f6 ff ff    	lea    eax,[ebx-0x93b]
9f0020d4:	50                   	push   eax
9f0020d5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0020d8:	e8 19 33 00 00       	call   9f0053f6 <strstrI>
9f0020dd:	83 c4 10             	add    esp,0x10
9f0020e0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:356
            if (spacePtr)
9f0020e3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f0020e7:	74 2f                	je     9f002118 <cmdlineToArgvI+0x280>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:357
                strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f0020e9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0020ec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0020ef:	29 c2                	sub    edx,eax
9f0020f1:	89 d0                	mov    eax,edx
9f0020f3:	89 c1                	mov    ecx,eax
9f0020f5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0020f8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0020ff:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002102:	01 d0                	add    eax,edx
9f002104:	8b 00                	mov    eax,DWORD PTR [eax]
9f002106:	83 ec 04             	sub    esp,0x4
9f002109:	51                   	push   ecx
9f00210a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00210d:	50                   	push   eax
9f00210e:	e8 81 2c 00 00       	call   9f004d94 <strncpyI>
9f002113:	83 c4 10             	add    esp,0x10
9f002116:	eb 31                	jmp    9f002149 <cmdlineToArgvI+0x2b1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:359
            else
                strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f002118:	83 ec 0c             	sub    esp,0xc
9f00211b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00211e:	e8 fd 2a 00 00       	call   9f004c20 <strlenI>
9f002123:	83 c4 10             	add    esp,0x10
9f002126:	89 c2                	mov    edx,eax
9f002128:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00212b:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f002132:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002135:	01 c8                	add    eax,ecx
9f002137:	8b 00                	mov    eax,DWORD PTR [eax]
9f002139:	83 ec 04             	sub    esp,0x4
9f00213c:	52                   	push   edx
9f00213d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f002140:	50                   	push   eax
9f002141:	e8 4e 2c 00 00       	call   9f004d94 <strncpyI>
9f002146:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:360
            strtrimI(argv[cnt]);
9f002149:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00214c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f002153:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002156:	01 d0                	add    eax,edx
9f002158:	8b 00                	mov    eax,DWORD PTR [eax]
9f00215a:	83 ec 0c             	sub    esp,0xc
9f00215d:	50                   	push   eax
9f00215e:	e8 f9 2f 00 00       	call   9f00515c <strtrimI>
9f002163:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:362 (discriminator 2)
        }
        lastSpacePtr=spacePtr++;
9f002166:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002169:	8d 50 01             	lea    edx,[eax+0x1]
9f00216c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00216f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:363 (discriminator 2)
        argvPtr+=MAXPARAMLEN;
9f002172:	81 45 ec ff 00 00 00 	add    DWORD PTR [ebp-0x14],0xff
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:338 (discriminator 2)
    } while (spacePtr!=0 && *spacePtr);
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
    int argvPtr=4* *argc;
    spacePtr=cmd;
    for (int cnt=0;cnt<*argc; cnt++)
9f002179:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:338 (discriminator 1)
9f00217d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002180:	8b 00                	mov    eax,DWORD PTR [eax]
9f002182:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f002185:	0f 8f 80 fe ff ff    	jg     9f00200b <cmdlineToArgvI+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:365
            strtrimI(argv[cnt]);
        }
        lastSpacePtr=spacePtr++;
        argvPtr+=MAXPARAMLEN;
    }
    return argv;
9f00218b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:366
}
9f00218e:	8d 65 f8             	lea    esp,[ebp-0x8]
9f002191:	5b                   	pop    ebx
9f002192:	5e                   	pop    esi
9f002193:	5d                   	pop    ebp
9f002194:	c3                   	ret    

9f002195 <cmdlineToArgv>:
cmdlineToArgv():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:369

VISIBLE char** cmdlineToArgv(char* cmdline, int *argc)
{
9f002195:	55                   	push   ebp
9f002196:	89 e5                	mov    ebp,esp
9f002198:	83 ec 08             	sub    esp,0x8
9f00219b:	e8 f2 3f 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0021a0:	05 3c 70 00 00       	add    eax,0x703c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:370
    return cmdlineToArgvI(cmdline, argc);
9f0021a5:	83 ec 08             	sub    esp,0x8
9f0021a8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0021ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0021ae:	e8 e5 fc ff ff       	call   9f001e98 <cmdlineToArgvI>
9f0021b3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:371
}
9f0021b6:	c9                   	leave  
9f0021b7:	c3                   	ret    

9f0021b8 <setSTD>:
setSTD():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:374

VISIBLE int setSTD(int std, uint32_t filed)
{
9f0021b8:	55                   	push   ebp
9f0021b9:	89 e5                	mov    ebp,esp
9f0021bb:	e8 d2 3f 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0021c0:	05 1c 70 00 00       	add    eax,0x701c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:375
    return do_syscall2(SYSCALL_SETSTD, std, filed);
9f0021c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0021c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0021cb:	50                   	push   eax
9f0021cc:	68 06 03 00 00       	push   0x306
9f0021d1:	e8 2c f3 ff ff       	call   9f001502 <do_syscall2>
9f0021d6:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:376
}
9f0021d9:	c9                   	leave  
9f0021da:	c3                   	ret    

9f0021db <takeADump>:
takeADump():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:379

VISIBLE void takeADump()
{
9f0021db:	55                   	push   ebp
9f0021dc:	89 e5                	mov    ebp,esp
9f0021de:	e8 af 3f 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0021e3:	05 f9 6f 00 00       	add    eax,0x6ff9
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:380
    do_syscall0(SYSCALL_TAKEADUMP);
9f0021e8:	68 00 09 00 00       	push   0x900
9f0021ed:	e8 8e f3 ff ff       	call   9f001580 <do_syscall0>
9f0021f2:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:381
}
9f0021f5:	90                   	nop
9f0021f6:	c9                   	leave  
9f0021f7:	c3                   	ret    

9f0021f8 <setpriority>:
setpriority():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:384

VISIBLE int setpriority(int which, int who, int prio)
{
9f0021f8:	55                   	push   ebp
9f0021f9:	89 e5                	mov    ebp,esp
9f0021fb:	e8 92 3f 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f002200:	05 dc 6f 00 00       	add    eax,0x6fdc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:385
    return do_syscall1(SYSCALL_SETPRIORITY,prio);
9f002205:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002208:	50                   	push   eax
9f002209:	68 97 00 00 00       	push   0x97
9f00220e:	e8 2d f3 ff ff       	call   9f001540 <do_syscall1>
9f002213:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:386
9f002216:	c9                   	leave  
9f002217:	c3                   	ret    

9f002218 <mmap>:
mmap():
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:14
//#include "../../../kproj/chrisOSKernel/include/syscalls.h"

syscall_mmap_t params;

VISIBLE void* mmap (void *addr,size_t len,int prot,int flags,int fd,off_t offset)
{
9f002218:	55                   	push   ebp
9f002219:	89 e5                	mov    ebp,esp
9f00221b:	53                   	push   ebx
9f00221c:	83 ec 04             	sub    esp,0x4
9f00221f:	e8 6e 3f 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f002224:	05 b8 6f 00 00       	add    eax,0x6fb8
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:16
    
    params.addr = addr;
9f002229:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f00222f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f002232:	89 0a                	mov    DWORD PTR [edx],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:17
    params.len = len;
9f002234:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f002237:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f00223d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:18
    params.prot = prot;
9f002240:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f002246:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f002249:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:19
    params.flags = flags;
9f00224c:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f002252:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
9f002255:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:20
    params.fd = fd;
9f002258:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f00225e:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
9f002261:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:21
    params.offset = offset;
9f002264:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f00226a:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
9f00226d:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:23
    
    return (void*)do_syscall1(SYSCALL_MMAP, (uint32_t)&params);
9f002270:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f002276:	83 ec 08             	sub    esp,0x8
9f002279:	52                   	push   edx
9f00227a:	6a 11                	push   0x11
9f00227c:	89 c3                	mov    ebx,eax
9f00227e:	e8 bd f2 ff ff       	call   9f001540 <do_syscall1>
9f002283:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:24
}
9f002286:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002289:	c9                   	leave  
9f00228a:	c3                   	ret    
9f00228b:	90                   	nop

9f00228c <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:22
VISIBLE uint32_t heapBase=0;
VISIBLE uint32_t heapCurr=0;
VISIBLE uint32_t heapEnd=0;

void initmalloc()
{
9f00228c:	55                   	push   ebp
9f00228d:	89 e5                	mov    ebp,esp
9f00228f:	53                   	push   ebx
9f002290:	83 ec 04             	sub    esp,0x4
9f002293:	e8 48 3f 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f002298:	81 c3 44 6f 00 00    	add    ebx,0x6f44
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:23
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
9f00229e:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0022a4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0022a6:	50                   	push   eax
9f0022a7:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0022ad:	50                   	push   eax
9f0022ae:	8d 83 f0 f6 ff ff    	lea    eax,[ebx-0x910]
9f0022b4:	50                   	push   eax
9f0022b5:	68 00 00 00 01       	push   0x1000000
9f0022ba:	e8 5d f5 ff ff       	call   9f00181c <printdI>
9f0022bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:24
    heapBase=0;
9f0022c2:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0022c8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:25
    heapCurr=0;
9f0022ce:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0022d4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:26
    heapEnd=0;
9f0022da:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f0022e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:28

}
9f0022e6:	90                   	nop
9f0022e7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0022ea:	c9                   	leave  
9f0022eb:	c3                   	ret    

9f0022ec <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:31

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
9f0022ec:	55                   	push   ebp
9f0022ed:	89 e5                	mov    ebp,esp
9f0022ef:	83 ec 10             	sub    esp,0x10
9f0022f2:	e8 9b 3e 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0022f7:	05 e5 6e 00 00       	add    eax,0x6ee5
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:34
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
9f0022fc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0022ff:	83 c2 30             	add    edx,0x30
9f002302:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:36
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
9f002305:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f00230b:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f00230d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002310:	01 d1                	add    ecx,edx
9f002312:	8b 90 dc ff ff ff    	mov    edx,DWORD PTR [eax-0x24]
9f002318:	8b 12                	mov    edx,DWORD PTR [edx]
9f00231a:	39 d1                	cmp    ecx,edx
9f00231c:	76 4e                	jbe    9f00236c <newHeapRequiredToFulfillRequest+0x80>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:39
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
9f00231e:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f002324:	8b 12                	mov    edx,DWORD PTR [edx]
9f002326:	8b 80 dc ff ff ff    	mov    eax,DWORD PTR [eax-0x24]
9f00232c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00232e:	29 c2                	sub    edx,eax
9f002330:	89 d0                	mov    eax,edx
9f002332:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:40
        if (newSize== 0 || newSize%PAGE_SIZE)
9f002335:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
9f002339:	74 0c                	je     9f002347 <newHeapRequiredToFulfillRequest+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:40 (discriminator 1)
9f00233b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00233e:	25 ff 0f 00 00       	and    eax,0xfff
9f002343:	85 c0                	test   eax,eax
9f002345:	74 10                	je     9f002357 <newHeapRequiredToFulfillRequest+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:42
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
9f002347:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00234a:	25 00 f0 ff ff       	and    eax,0xfffff000
9f00234f:	05 00 10 00 00       	add    eax,0x1000
9f002354:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:45
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < MALLOC_MINIMUM_REQUEST_SIZE)
9f002357:	81 7d fc ff 0f 00 00 	cmp    DWORD PTR [ebp-0x4],0xfff
9f00235e:	77 07                	ja     9f002367 <newHeapRequiredToFulfillRequest+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:46
            return MALLOC_MINIMUM_REQUEST_SIZE;
9f002360:	b8 00 10 00 00       	mov    eax,0x1000
9f002365:	eb 0a                	jmp    9f002371 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:48
        else
            return newSize;
9f002367:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00236a:	eb 05                	jmp    9f002371 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:51
    }
    else
        return 0;
9f00236c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52
}
9f002371:	c9                   	leave  
9f002372:	c3                   	ret    

9f002373 <freeI>:
freeI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:55

void freeI(void* fpointer)
{
9f002373:	55                   	push   ebp
9f002374:	89 e5                	mov    ebp,esp
9f002376:	53                   	push   ebx
9f002377:	83 ec 14             	sub    esp,0x14
9f00237a:	e8 13 3e 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f00237f:	05 5d 6e 00 00       	add    eax,0x6e5d
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:58
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if ((uint32_t)fpointer < heapBase || (uint32_t)fpointer > heapCurr)
9f002384:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f002387:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f00238d:	8b 12                	mov    edx,DWORD PTR [edx]
9f00238f:	39 d1                	cmp    ecx,edx
9f002391:	72 4a                	jb     9f0023dd <freeI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:58 (discriminator 1)
9f002393:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f002396:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f00239c:	8b 12                	mov    edx,DWORD PTR [edx]
9f00239e:	39 d1                	cmp    ecx,edx
9f0023a0:	77 3b                	ja     9f0023dd <freeI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:61
        return;
    
    if (fpointer==NULL)
9f0023a2:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0023a6:	74 38                	je     9f0023e0 <freeI+0x6d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:63
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
9f0023a8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0023ab:	83 ea 18             	sub    edx,0x18
9f0023ae:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:66
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=MALLOC_MARKER_VALUE)
9f0023b1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0023b4:	8b 12                	mov    edx,DWORD PTR [edx]
9f0023b6:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f0023bc:	74 16                	je     9f0023d4 <freeI+0x61>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:68
    {
        printI("malloc: marker not found error!!!\n");
9f0023be:	83 ec 0c             	sub    esp,0xc
9f0023c1:	8d 90 14 f7 ff ff    	lea    edx,[eax-0x8ec]
9f0023c7:	52                   	push   edx
9f0023c8:	89 c3                	mov    ebx,eax
9f0023ca:	e8 e2 f3 ff ff       	call   9f0017b1 <printI>
9f0023cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:69
        return; //Return silently ... for now
9f0023d2:	eb 0d                	jmp    9f0023e1 <freeI+0x6e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:71
    }
    mp->inUse=false;
9f0023d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0023d7:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
9f0023db:	eb 04                	jmp    9f0023e1 <freeI+0x6e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:59
void freeI(void* fpointer)
{
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if ((uint32_t)fpointer < heapBase || (uint32_t)fpointer > heapCurr)
        return;
9f0023dd:	90                   	nop
9f0023de:	eb 01                	jmp    9f0023e1 <freeI+0x6e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:62
    
    if (fpointer==NULL)
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
9f0023e0:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:76
    mp->inUse=false;
#ifdef MALLOC_CLEAR_ON_FREE
    uint32_t bytesToClear=0, bytesCleared=0;
    memset(fpointer,mp->len,MALLOC_DEFAULT_CLEAR_VALUE1);
#endif
}
9f0023e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0023e4:	c9                   	leave  
9f0023e5:	c3                   	ret    

9f0023e6 <mallocFindAvailableMemory>:
mallocFindAvailableMemory():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:79

heaprec_t *mallocFindAvailableMemory(size_t size)
{
9f0023e6:	55                   	push   ebp
9f0023e7:	89 e5                	mov    ebp,esp
9f0023e9:	83 ec 10             	sub    esp,0x10
9f0023ec:	e8 a1 3d 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0023f1:	05 eb 6d 00 00       	add    eax,0x6deb
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:80
    heaprec_t* heapPtr=(heaprec_t*)heapBase;
9f0023f6:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f0023fc:	8b 12                	mov    edx,DWORD PTR [edx]
9f0023fe:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:83
    do
    {
        if (!heapPtr->inUse && heapPtr->len>=size && heapPtr->marker==MALLOC_MARKER_VALUE)
9f002401:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002404:	0f b6 52 08          	movzx  edx,BYTE PTR [edx+0x8]
9f002408:	83 f2 01             	xor    edx,0x1
9f00240b:	84 d2                	test   dl,dl
9f00240d:	74 1d                	je     9f00242c <mallocFindAvailableMemory+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:83 (discriminator 1)
9f00240f:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002412:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
9f002415:	3b 55 08             	cmp    edx,DWORD PTR [ebp+0x8]
9f002418:	72 12                	jb     9f00242c <mallocFindAvailableMemory+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:83 (discriminator 2)
9f00241a:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00241d:	8b 12                	mov    edx,DWORD PTR [edx]
9f00241f:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f002425:	75 05                	jne    9f00242c <mallocFindAvailableMemory+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:84
            return heapPtr;
9f002427:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00242a:	eb 3c                	jmp    9f002468 <mallocFindAvailableMemory+0x82>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:85
        if (heapPtr->next)
9f00242c:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00242f:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
9f002432:	85 d2                	test   edx,edx
9f002434:	74 09                	je     9f00243f <mallocFindAvailableMemory+0x59>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:86
            heapPtr=heapPtr->next;
9f002436:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002439:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
9f00243c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
        
    }
    while(heapPtr<(heaprec_t*)heapCurr && heapPtr->next && heapPtr->marker==MALLOC_MARKER_VALUE);
9f00243f:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f002445:	8b 12                	mov    edx,DWORD PTR [edx]
9f002447:	39 55 fc             	cmp    DWORD PTR [ebp-0x4],edx
9f00244a:	73 17                	jae    9f002463 <mallocFindAvailableMemory+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89 (discriminator 1)
9f00244c:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00244f:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
9f002452:	85 d2                	test   edx,edx
9f002454:	74 0d                	je     9f002463 <mallocFindAvailableMemory+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89 (discriminator 2)
9f002456:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002459:	8b 12                	mov    edx,DWORD PTR [edx]
9f00245b:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f002461:	74 9e                	je     9f002401 <mallocFindAvailableMemory+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:91
    //while (heapPtr->marker==ALLOC_MARKER_VALUE);
    return NULL;
9f002463:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:92
}
9f002468:	c9                   	leave  
9f002469:	c3                   	ret    

9f00246a <mallocSanityCheck>:
mallocSanityCheck():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:95

void mallocSanityCheck(heaprec_t *heaprec)
{
9f00246a:	55                   	push   ebp
9f00246b:	89 e5                	mov    ebp,esp
9f00246d:	53                   	push   ebx
9f00246e:	83 ec 14             	sub    esp,0x14
9f002471:	e8 1c 3d 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f002476:	05 66 6d 00 00       	add    eax,0x6d66
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:97
#ifdef MALLOC_SANITY_CHECK
    heaprec_t *heapPtr=heaprec;
9f00247b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00247e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98
    while (heapPtr>=(heaprec_t*)heapBase && heapPtr->prev!=heapPtr)
9f002481:	eb 54                	jmp    9f0024d7 <mallocSanityCheck+0x6d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:100
    {
        if (heapBase<(uintptr_t)heapPtr-8)
9f002483:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002486:	8d 4a f8             	lea    ecx,[edx-0x8]
9f002489:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f00248f:	8b 12                	mov    edx,DWORD PTR [edx]
9f002491:	39 d1                	cmp    ecx,edx
9f002493:	76 16                	jbe    9f0024ab <mallocSanityCheck+0x41>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:102
        {
                printfI("\n**************************malloc base error!!!**************************\n");
9f002495:	83 ec 0c             	sub    esp,0xc
9f002498:	8d 90 38 f7 ff ff    	lea    edx,[eax-0x8c8]
9f00249e:	52                   	push   edx
9f00249f:	89 c3                	mov    ebx,eax
9f0024a1:	e8 b7 f2 ff ff       	call   9f00175d <printfI>
9f0024a6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:104 (discriminator 1)
    SanityLoop2:
                goto SanityLoop2;
9f0024a9:	eb fe                	jmp    9f0024a9 <mallocSanityCheck+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:106
        }
        if (heapPtr->marker!=MALLOC_MARKER_VALUE)
9f0024ab:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0024ae:	8b 12                	mov    edx,DWORD PTR [edx]
9f0024b0:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f0024b6:	74 16                	je     9f0024ce <mallocSanityCheck+0x64>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:108
        {
            printfI("\n**************************malloc pointer error!!!**************************\n");
9f0024b8:	83 ec 0c             	sub    esp,0xc
9f0024bb:	8d 90 84 f7 ff ff    	lea    edx,[eax-0x87c]
9f0024c1:	52                   	push   edx
9f0024c2:	89 c3                	mov    ebx,eax
9f0024c4:	e8 94 f2 ff ff       	call   9f00175d <printfI>
9f0024c9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:110 (discriminator 2)
SanityLoop:
            goto SanityLoop;
9f0024cc:	eb fe                	jmp    9f0024cc <mallocSanityCheck+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:112
        }
        heapPtr=heapPtr->prev;
9f0024ce:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0024d1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
9f0024d4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98

void mallocSanityCheck(heaprec_t *heaprec)
{
#ifdef MALLOC_SANITY_CHECK
    heaprec_t *heapPtr=heaprec;
    while (heapPtr>=(heaprec_t*)heapBase && heapPtr->prev!=heapPtr)
9f0024d7:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f0024dd:	8b 12                	mov    edx,DWORD PTR [edx]
9f0024df:	39 55 f4             	cmp    DWORD PTR [ebp-0xc],edx
9f0024e2:	72 0b                	jb     9f0024ef <mallocSanityCheck+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98 (discriminator 1)
9f0024e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0024e7:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
9f0024ea:	3b 55 f4             	cmp    edx,DWORD PTR [ebp-0xc]
9f0024ed:	75 94                	jne    9f002483 <mallocSanityCheck+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:115
            goto SanityLoop;
        }
        heapPtr=heapPtr->prev;
    }
#endif
}
9f0024ef:	90                   	nop
9f0024f0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0024f3:	c9                   	leave  
9f0024f4:	c3                   	ret    

9f0024f5 <mallocI>:
mallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:118

void*  mallocI(size_t size)
{
9f0024f5:	55                   	push   ebp
9f0024f6:	89 e5                	mov    ebp,esp
9f0024f8:	53                   	push   ebx
9f0024f9:	83 ec 24             	sub    esp,0x24
9f0024fc:	e8 df 3c 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f002501:	81 c3 db 6c 00 00    	add    ebx,0x6cdb
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:123
    void* retVal;

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr=NULL;
9f002507:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:124
    size_t requestSize=size;
9f00250e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002511:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:127
    static heaprec_t *lastHRCreated=NULL;

    if (size<MALLOC_MIN_SIZE_TO_ALLOCATE)
9f002514:	83 7d 08 17          	cmp    DWORD PTR [ebp+0x8],0x17
9f002518:	77 07                	ja     9f002521 <mallocI+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:128
        requestSize=MALLOC_MIN_SIZE_TO_ALLOCATE;
9f00251a:	c7 45 f4 18 00 00 00 	mov    DWORD PTR [ebp-0xc],0x18
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:129
    printdI(DEBUG_MALLOC,"libc_malloc: Request for 0x%08x bytes\n",requestSize);
9f002521:	83 ec 04             	sub    esp,0x4
9f002524:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002527:	8d 83 d4 f7 ff ff    	lea    eax,[ebx-0x82c]
9f00252d:	50                   	push   eax
9f00252e:	68 00 00 00 01       	push   0x1000000
9f002533:	e8 e4 f2 ff ff       	call   9f00181c <printdI>
9f002538:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:130
    if (heapBase>0)
9f00253b:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f002541:	8b 00                	mov    eax,DWORD PTR [eax]
9f002543:	85 c0                	test   eax,eax
9f002545:	74 71                	je     9f0025b8 <mallocI+0xc3>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:132
    {
        heapPtr=mallocFindAvailableMemory(requestSize);
9f002547:	83 ec 0c             	sub    esp,0xc
9f00254a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f00254d:	e8 94 fe ff ff       	call   9f0023e6 <mallocFindAvailableMemory>
9f002552:	83 c4 10             	add    esp,0x10
9f002555:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:133
        if (heapPtr!=NULL)
9f002558:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00255c:	74 5a                	je     9f0025b8 <mallocI+0xc3>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:135
        {
            heapPtr->inUse=true;
9f00255e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002561:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:136
            heapPtr->uses++;
9f002565:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002568:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
9f00256c:	8d 50 01             	lea    edx,[eax+0x1]
9f00256f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002572:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:137
            printdI(DEBUG_MALLOC,"libc_malloc: Reusing heaprec=0x%08x, address=0x%08x (uses=%u)",heapPtr,HEAP_PTR_MEM_ADDR(heapPtr),heapPtr->uses);
9f002576:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002579:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
9f00257d:	0f b7 d0             	movzx  edx,ax
9f002580:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002586:	8b 00                	mov    eax,DWORD PTR [eax]
9f002588:	83 c0 18             	add    eax,0x18
9f00258b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f00258e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002591:	83 ec 0c             	sub    esp,0xc
9f002594:	52                   	push   edx
9f002595:	50                   	push   eax
9f002596:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f002599:	8d 83 fc f7 ff ff    	lea    eax,[ebx-0x804]
9f00259f:	50                   	push   eax
9f0025a0:	68 00 00 00 01       	push   0x1000000
9f0025a5:	e8 72 f2 ff ff       	call   9f00181c <printdI>
9f0025aa:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:138
            return ((void*)heapPtr)+sizeof(heaprec_t);
9f0025ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0025b0:	83 c0 18             	add    eax,0x18
9f0025b3:	e9 f8 01 00 00       	jmp    9f0027b0 <mallocI+0x2bb>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:142
        }
    }
    
    needed = newHeapRequiredToFulfillRequest(requestSize);
9f0025b8:	83 ec 0c             	sub    esp,0xc
9f0025bb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0025be:	e8 29 fd ff ff       	call   9f0022ec <newHeapRequiredToFulfillRequest>
9f0025c3:	83 c4 10             	add    esp,0x10
9f0025c6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:143
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
9f0025c9:	83 ec 04             	sub    esp,0x4
9f0025cc:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f0025cf:	8d 83 3a f8 ff ff    	lea    eax,[ebx-0x7c6]
9f0025d5:	50                   	push   eax
9f0025d6:	68 00 00 00 01       	push   0x1000000
9f0025db:	e8 3c f2 ff ff       	call   9f00181c <printdI>
9f0025e0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:144
    if (needed!=0)      //New heap required
9f0025e3:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f0025e7:	0f 84 e5 00 00 00    	je     9f0026d2 <mallocI+0x1dd>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:146
    {
        if (heapCurr>0)
9f0025ed:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0025f3:	8b 00                	mov    eax,DWORD PTR [eax]
9f0025f5:	85 c0                	test   eax,eax
9f0025f7:	74 17                	je     9f002610 <mallocI+0x11b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:147
            mallocSanityCheck(((heaprec_t*)heapCurr)->prev);        
9f0025f9:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0025ff:	8b 00                	mov    eax,DWORD PTR [eax]
9f002601:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f002604:	83 ec 0c             	sub    esp,0xc
9f002607:	50                   	push   eax
9f002608:	e8 5d fe ff ff       	call   9f00246a <mallocSanityCheck>
9f00260d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:148
        allocatedPtr = do_syscall1(SYSCALL_ALLOCHEAP, needed);
9f002610:	83 ec 08             	sub    esp,0x8
9f002613:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f002616:	68 65 01 00 00       	push   0x165
9f00261b:	e8 20 ef ff ff       	call   9f001540 <do_syscall1>
9f002620:	83 c4 10             	add    esp,0x10
9f002623:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:150
        //This is needed to keep in sync with what the kernel thinks
        memsetI((char*)allocatedPtr,0,needed);
9f002626:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002629:	83 ec 04             	sub    esp,0x4
9f00262c:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f00262f:	6a 00                	push   0x0
9f002631:	50                   	push   eax
9f002632:	e8 d5 04 00 00       	call   9f002b0c <memsetI>
9f002637:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:151
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
9f00263a:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f002640:	8b 00                	mov    eax,DWORD PTR [eax]
9f002642:	83 ec 04             	sub    esp,0x4
9f002645:	50                   	push   eax
9f002646:	8d 83 56 f8 ff ff    	lea    eax,[ebx-0x7aa]
9f00264c:	50                   	push   eax
9f00264d:	68 00 00 00 01       	push   0x1000000
9f002652:	e8 c5 f1 ff ff       	call   9f00181c <printdI>
9f002657:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:152
        heapEnd=allocatedPtr+needed;
9f00265a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00265d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f002660:	01 c2                	add    edx,eax
9f002662:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f002668:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:153
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
9f00266a:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f002670:	8b 00                	mov    eax,DWORD PTR [eax]
9f002672:	83 ec 0c             	sub    esp,0xc
9f002675:	50                   	push   eax
9f002676:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f002679:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f00267c:	8d 83 74 f8 ff ff    	lea    eax,[ebx-0x78c]
9f002682:	50                   	push   eax
9f002683:	68 00 00 00 01       	push   0x1000000
9f002688:	e8 8f f1 ff ff       	call   9f00181c <printdI>
9f00268d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:154
        if (heapBase==0)    //Hasn't been initialized yet!
9f002690:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f002696:	8b 00                	mov    eax,DWORD PTR [eax]
9f002698:	85 c0                	test   eax,eax
9f00269a:	75 36                	jne    9f0026d2 <mallocI+0x1dd>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:156
        {
            heapCurr=allocatedPtr;
9f00269c:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0026a2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0026a5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:157
            heapBase=allocatedPtr;
9f0026a7:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0026ad:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0026b0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:158
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
9f0026b2:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0026b8:	8b 00                	mov    eax,DWORD PTR [eax]
9f0026ba:	83 ec 04             	sub    esp,0x4
9f0026bd:	50                   	push   eax
9f0026be:	8d 83 b4 f8 ff ff    	lea    eax,[ebx-0x74c]
9f0026c4:	50                   	push   eax
9f0026c5:	68 00 00 00 01       	push   0x1000000
9f0026ca:	e8 4d f1 ff ff       	call   9f00181c <printdI>
9f0026cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:161
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
9f0026d2:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0026d8:	8b 00                	mov    eax,DWORD PTR [eax]
9f0026da:	83 ec 04             	sub    esp,0x4
9f0026dd:	50                   	push   eax
9f0026de:	8d 83 f0 f8 ff ff    	lea    eax,[ebx-0x710]
9f0026e4:	50                   	push   eax
9f0026e5:	68 00 00 00 01       	push   0x1000000
9f0026ea:	e8 2d f1 ff ff       	call   9f00181c <printdI>
9f0026ef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:162
    heapPtr = (heaprec_t*)heapCurr;
9f0026f2:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0026f8:	8b 00                	mov    eax,DWORD PTR [eax]
9f0026fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:163
    heapPtr->marker=MALLOC_MARKER_VALUE;
9f0026fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002700:	c7 00 1f 2f 3f 4f    	mov    DWORD PTR [eax],0x4f3f2f1f
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:164
    heapPtr->len=requestSize;
9f002706:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002709:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00270c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:165
    heapPtr->inUse=true;
9f00270f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002712:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:166
    heapPtr->uses++;
9f002716:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002719:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
9f00271d:	8d 50 01             	lea    edx,[eax+0x1]
9f002720:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002723:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:167
    if (lastHRCreated!=NULL)
9f002727:	8b 83 94 00 00 00    	mov    eax,DWORD PTR [ebx+0x94]
9f00272d:	85 c0                	test   eax,eax
9f00272f:	74 18                	je     9f002749 <mallocI+0x254>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:169
    {
        heapPtr->prev=lastHRCreated;
9f002731:	8b 93 94 00 00 00    	mov    edx,DWORD PTR [ebx+0x94]
9f002737:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00273a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:170
        heapPtr->prev->next=heapPtr;
9f00273d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002740:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f002743:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002746:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:173
    }

    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08x\n",heapCurr);
9f002749:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f00274f:	8b 00                	mov    eax,DWORD PTR [eax]
9f002751:	83 ec 04             	sub    esp,0x4
9f002754:	50                   	push   eax
9f002755:	8d 83 18 f9 ff ff    	lea    eax,[ebx-0x6e8]
9f00275b:	50                   	push   eax
9f00275c:	68 00 00 00 01       	push   0x1000000
9f002761:	e8 b6 f0 ff ff       	call   9f00181c <printdI>
9f002766:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:174
    retVal=((void*)(heapPtr)+sizeof(heaprec_t));
9f002769:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00276c:	83 c0 18             	add    eax,0x18
9f00276f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:175
    heapCurr+=requestSize+(sizeof(heaprec_t));
9f002772:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002778:	8b 10                	mov    edx,DWORD PTR [eax]
9f00277a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00277d:	01 d0                	add    eax,edx
9f00277f:	8d 50 18             	lea    edx,[eax+0x18]
9f002782:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002788:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:176
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
9f00278a:	83 ec 04             	sub    esp,0x4
9f00278d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f002790:	8d 83 36 f9 ff ff    	lea    eax,[ebx-0x6ca]
9f002796:	50                   	push   eax
9f002797:	68 00 00 00 01       	push   0x1000000
9f00279c:	e8 7b f0 ff ff       	call   9f00181c <printdI>
9f0027a1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:177
    lastHRCreated=heapPtr;
9f0027a4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0027a7:	89 83 94 00 00 00    	mov    DWORD PTR [ebx+0x94],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:178
    return retVal;
9f0027ad:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:179
}
9f0027b0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0027b3:	c9                   	leave  
9f0027b4:	c3                   	ret    

9f0027b5 <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:182

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
9f0027b5:	55                   	push   ebp
9f0027b6:	89 e5                	mov    ebp,esp
9f0027b8:	83 ec 08             	sub    esp,0x8
9f0027bb:	e8 d2 39 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0027c0:	05 1c 6a 00 00       	add    eax,0x6a1c
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:183
    return mallocI(size);
9f0027c5:	83 ec 0c             	sub    esp,0xc
9f0027c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0027cb:	e8 25 fd ff ff       	call   9f0024f5 <mallocI>
9f0027d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:184
}
9f0027d3:	c9                   	leave  
9f0027d4:	c3                   	ret    

9f0027d5 <reallocI>:
reallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:187

void* reallocI(void *foldptr, uint32_t newlen)
{
9f0027d5:	55                   	push   ebp
9f0027d6:	89 e5                	mov    ebp,esp
9f0027d8:	53                   	push   ebx
9f0027d9:	83 ec 14             	sub    esp,0x14
9f0027dc:	e8 ff 39 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f0027e1:	81 c3 fb 69 00 00    	add    ebx,0x69fb
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:189
    
    printdI(DEBUG_MALLOC,"libc_realloc: called for old pointer 0x%08x, new size=0x%08x",foldptr,newlen);
9f0027e7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0027ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0027ed:	8d 83 50 f9 ff ff    	lea    eax,[ebx-0x6b0]
9f0027f3:	50                   	push   eax
9f0027f4:	68 00 00 00 01       	push   0x1000000
9f0027f9:	e8 1e f0 ff ff       	call   9f00181c <printdI>
9f0027fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:192

    //Get old heap pointer
    uint32_t realSize=newlen;
9f002801:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002804:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:194
    heaprec_t* mp;  //-1 means back up to the heaprec_t struct
    HEAP_CURR(foldptr,mp);
9f002807:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00280a:	83 e8 18             	sub    eax,0x18
9f00280d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:196

    if (newlen==0)
9f002810:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002814:	75 17                	jne    9f00282d <reallocI+0x58>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:197
        printdI(DEBUG_MALLOC,"libc_relloc: Request for 0 bytes, cannot fulfill\n");
9f002816:	83 ec 08             	sub    esp,0x8
9f002819:	8d 83 90 f9 ff ff    	lea    eax,[ebx-0x670]
9f00281f:	50                   	push   eax
9f002820:	68 00 00 00 01       	push   0x1000000
9f002825:	e8 f2 ef ff ff       	call   9f00181c <printdI>
9f00282a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:198
    if (newlen==0 || newlen<=mp->len)
9f00282d:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002831:	74 0b                	je     9f00283e <reallocI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:198 (discriminator 1)
9f002833:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002836:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f002839:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f00283c:	72 08                	jb     9f002846 <reallocI+0x71>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:199
        return foldptr;
9f00283e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002841:	e9 8d 00 00 00       	jmp    9f0028d3 <reallocI+0xfe>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:201

    if (newlen<MALLOC_MIN_SIZE_TO_ALLOCATE)
9f002846:	83 7d 0c 17          	cmp    DWORD PTR [ebp+0xc],0x17
9f00284a:	77 07                	ja     9f002853 <reallocI+0x7e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:202
        realSize=MALLOC_MIN_SIZE_TO_ALLOCATE;
9f00284c:	c7 45 f4 18 00 00 00 	mov    DWORD PTR [ebp-0xc],0x18
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:205
    
    //Allocate space of newlen
    uintptr_t *fnewptr = mallocI(realSize);
9f002853:	83 ec 0c             	sub    esp,0xc
9f002856:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002859:	e8 97 fc ff ff       	call   9f0024f5 <mallocI>
9f00285e:	83 c4 10             	add    esp,0x10
9f002861:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:206
    printdI(DEBUG_MALLOC,"\tlibc_realloc: received new malloc pointer 0x%08x, old size=0x%08x, new size=0x%08x\n",fnewptr, mp->len, realSize);
9f002864:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002867:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f00286a:	83 ec 0c             	sub    esp,0xc
9f00286d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002870:	50                   	push   eax
9f002871:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002874:	8d 83 c4 f9 ff ff    	lea    eax,[ebx-0x63c]
9f00287a:	50                   	push   eax
9f00287b:	68 00 00 00 01       	push   0x1000000
9f002880:	e8 97 ef ff ff       	call   9f00181c <printdI>
9f002885:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:211
   
    //Copy from old pointer to new memory using the old pointer's length
//    if (newlen>mp->len)
//        memsetI(fnewptr+mp->len,0,newlen-mp->len);
    memcpyI(fnewptr, foldptr, mp->len>realSize?realSize:mp->len);
9f002888:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00288b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
9f00288e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002891:	39 c2                	cmp    edx,eax
9f002893:	0f 46 c2             	cmovbe eax,edx
9f002896:	83 ec 04             	sub    esp,0x4
9f002899:	50                   	push   eax
9f00289a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00289d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0028a0:	e8 ab 00 00 00       	call   9f002950 <memcpyI>
9f0028a5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:212
    printdI(DEBUG_MALLOC,"\tlibc_realloc: updated new pointer 0x%08x with old pointer data and cleared out remaing if applicable\n",fnewptr);
9f0028a8:	83 ec 04             	sub    esp,0x4
9f0028ab:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0028ae:	8d 83 1c fa ff ff    	lea    eax,[ebx-0x5e4]
9f0028b4:	50                   	push   eax
9f0028b5:	68 00 00 00 01       	push   0x1000000
9f0028ba:	e8 5d ef ff ff       	call   9f00181c <printdI>
9f0028bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:215
    
   //free old pointer
    freeI(foldptr);
9f0028c2:	83 ec 0c             	sub    esp,0xc
9f0028c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0028c8:	e8 a6 fa ff ff       	call   9f002373 <freeI>
9f0028cd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:216
    return fnewptr;
9f0028d0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:217
}
9f0028d3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0028d6:	c9                   	leave  
9f0028d7:	c3                   	ret    

9f0028d8 <realloc>:
realloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:220

VISIBLE void* realloc(void *foldptr, uint32_t newlen)
{
9f0028d8:	55                   	push   ebp
9f0028d9:	89 e5                	mov    ebp,esp
9f0028db:	83 ec 08             	sub    esp,0x8
9f0028de:	e8 af 38 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0028e3:	05 f9 68 00 00       	add    eax,0x68f9
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:221
    return reallocI(foldptr, newlen);
9f0028e8:	83 ec 08             	sub    esp,0x8
9f0028eb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0028ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0028f1:	e8 df fe ff ff       	call   9f0027d5 <reallocI>
9f0028f6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:222
}
9f0028f9:	c9                   	leave  
9f0028fa:	c3                   	ret    

9f0028fb <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:225

__attribute__((visibility("default"))) void free(void* fpointer)
{
9f0028fb:	55                   	push   ebp
9f0028fc:	89 e5                	mov    ebp,esp
9f0028fe:	83 ec 08             	sub    esp,0x8
9f002901:	e8 8c 38 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f002906:	05 d6 68 00 00       	add    eax,0x68d6
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:226
    freeI(fpointer);
9f00290b:	83 ec 0c             	sub    esp,0xc
9f00290e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002911:	e8 5d fa ff ff       	call   9f002373 <freeI>
9f002916:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:227
}
9f002919:	90                   	nop
9f00291a:	c9                   	leave  
9f00291b:	c3                   	ret    

9f00291c <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:230

void malloc_cleanup()
{
9f00291c:	55                   	push   ebp
9f00291d:	89 e5                	mov    ebp,esp
9f00291f:	53                   	push   ebx
9f002920:	83 ec 04             	sub    esp,0x4
9f002923:	e8 6a 38 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f002928:	05 b4 68 00 00       	add    eax,0x68b4
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:231
    do_syscall1(SYSCALL_FREE, heapBase);
9f00292d:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f002933:	8b 12                	mov    edx,DWORD PTR [edx]
9f002935:	83 ec 08             	sub    esp,0x8
9f002938:	52                   	push   edx
9f002939:	68 64 01 00 00       	push   0x164
9f00293e:	89 c3                	mov    ebx,eax
9f002940:	e8 fb eb ff ff       	call   9f001540 <do_syscall1>
9f002945:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:232
9f002948:	90                   	nop
9f002949:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00294c:	c9                   	leave  
9f00294d:	c3                   	ret    
9f00294e:	66 90                	xchg   ax,ax

9f002950 <memcpyI>:
memcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:12
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time

void *memcpyI(void *dest, const void *src, size_t n)
{
9f002950:	55                   	push   ebp
9f002951:	89 e5                	mov    ebp,esp
9f002953:	83 ec 20             	sub    esp,0x20
9f002956:	e8 37 38 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f00295b:	05 81 68 00 00       	add    eax,0x6881
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    bool dw,dd;
    
    dd=n%4==0;
9f002960:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002963:	83 e0 03             	and    eax,0x3
9f002966:	85 c0                	test   eax,eax
9f002968:	0f 94 c0             	sete   al
9f00296b:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    dw=n%2==0;
9f00296e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002971:	83 e0 01             	and    eax,0x1
9f002974:	85 c0                	test   eax,eax
9f002976:	0f 94 c0             	sete   al
9f002979:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:17
    if (dd)
9f00297c:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
9f002980:	74 7d                	je     9f0029ff <memcpyI+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
    {
        n /=4;
9f002982:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002985:	c1 e8 02             	shr    eax,0x2
9f002988:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        const uint32_t *f = src;
9f00298b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00298e:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:21
        uint32_t *t = dest;
9f002991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002994:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23

        if (f < t) {
9f002997:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00299a:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f00299d:	73 4b                	jae    9f0029ea <memcpyI+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                f += n;
9f00299f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0029a2:	c1 e0 02             	shl    eax,0x2
9f0029a5:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                t += n;
9f0029a8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0029ab:	c1 e0 02             	shl    eax,0x2
9f0029ae:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                while ( (n)-- > 0)
9f0029b1:	eb 12                	jmp    9f0029c5 <memcpyI+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:27
                        *--t = *--f;
9f0029b3:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
9f0029b7:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
9f0029bb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0029be:	8b 10                	mov    edx,DWORD PTR [eax]
9f0029c0:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0029c3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f0029c5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0029c8:	8d 50 ff             	lea    edx,[eax-0x1]
9f0029cb:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0029ce:	85 c0                	test   eax,eax
9f0029d0:	75 e1                	jne    9f0029b3 <memcpyI+0x63>
9f0029d2:	eb 23                	jmp    9f0029f7 <memcpyI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f0029d4:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0029d7:	8d 50 04             	lea    edx,[eax+0x4]
9f0029da:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f0029dd:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0029e0:	8d 4a 04             	lea    ecx,[edx+0x4]
9f0029e3:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
9f0029e6:	8b 12                	mov    edx,DWORD PTR [edx]
9f0029e8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f0029ea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0029ed:	8d 50 ff             	lea    edx,[eax-0x1]
9f0029f0:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0029f3:	85 c0                	test   eax,eax
9f0029f5:	75 dd                	jne    9f0029d4 <memcpyI+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:31
                        *t++ = *f++;
        return dest;
9f0029f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0029fa:	e9 ea 00 00 00       	jmp    9f002ae9 <memcpyI+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:33
    }
    else if (dw)
9f0029ff:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
9f002a03:	74 79                	je     9f002a7e <memcpyI+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
    {
        n /=2;
9f002a05:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002a08:	d1 e8                	shr    eax,1
9f002a0a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        const uint32_t *f = src;
9f002a0d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002a10:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:37
        uint32_t *t = dest;
9f002a13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a16:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39

        if (f < t) {
9f002a19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002a1c:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f002a1f:	73 4b                	jae    9f002a6c <memcpyI+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                f += n;
9f002a21:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002a24:	c1 e0 02             	shl    eax,0x2
9f002a27:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                t += n;
9f002a2a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002a2d:	c1 e0 02             	shl    eax,0x2
9f002a30:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                while ( (n)-- > 0)
9f002a33:	eb 12                	jmp    9f002a47 <memcpyI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:43
                        *--t = *--f;
9f002a35:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
9f002a39:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
9f002a3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002a40:	8b 10                	mov    edx,DWORD PTR [eax]
9f002a42:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002a45:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f002a47:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002a4a:	8d 50 ff             	lea    edx,[eax-0x1]
9f002a4d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002a50:	85 c0                	test   eax,eax
9f002a52:	75 e1                	jne    9f002a35 <memcpyI+0xe5>
9f002a54:	eb 23                	jmp    9f002a79 <memcpyI+0x129>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f002a56:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002a59:	8d 50 04             	lea    edx,[eax+0x4]
9f002a5c:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f002a5f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002a62:	8d 4a 04             	lea    ecx,[edx+0x4]
9f002a65:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
9f002a68:	8b 12                	mov    edx,DWORD PTR [edx]
9f002a6a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f002a6c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002a6f:	8d 50 ff             	lea    edx,[eax-0x1]
9f002a72:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002a75:	85 c0                	test   eax,eax
9f002a77:	75 dd                	jne    9f002a56 <memcpyI+0x106>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:47
                        *t++ = *f++;
        return dest;
9f002a79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a7c:	eb 6b                	jmp    9f002ae9 <memcpyI+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
    }
    else
    {
        const char *f = src;
9f002a7e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002a81:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:52
        char *t = dest;
9f002a84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a87:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54

        if (f < t) {
9f002a8a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002a8d:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f002a90:	73 47                	jae    9f002ad9 <memcpyI+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                f += n;
9f002a92:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002a95:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                t += n;
9f002a98:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002a9b:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                while (n-- > 0)
9f002a9e:	eb 13                	jmp    9f002ab3 <memcpyI+0x163>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:58
                        *--t = *--f;
9f002aa0:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
9f002aa4:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
9f002aa8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002aab:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002aae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f002ab1:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
9f002ab3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002ab6:	8d 50 ff             	lea    edx,[eax-0x1]
9f002ab9:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002abc:	85 c0                	test   eax,eax
9f002abe:	75 e0                	jne    9f002aa0 <memcpyI+0x150>
9f002ac0:	eb 24                	jmp    9f002ae6 <memcpyI+0x196>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
9f002ac2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f002ac5:	8d 50 01             	lea    edx,[eax+0x1]
9f002ac8:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f002acb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f002ace:	8d 4a 01             	lea    ecx,[edx+0x1]
9f002ad1:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
9f002ad4:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002ad7:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
9f002ad9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002adc:	8d 50 ff             	lea    edx,[eax-0x1]
9f002adf:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002ae2:	85 c0                	test   eax,eax
9f002ae4:	75 dc                	jne    9f002ac2 <memcpyI+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:62
                        *t++ = *f++;
        return dest;
9f002ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:64
    }
}
9f002ae9:	c9                   	leave  
9f002aea:	c3                   	ret    

9f002aeb <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:67

VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
9f002aeb:	55                   	push   ebp
9f002aec:	89 e5                	mov    ebp,esp
9f002aee:	e8 9f 36 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f002af3:	05 e9 66 00 00       	add    eax,0x66e9
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:68
    return memcpyI(dest, src, n);
9f002af8:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002afb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002afe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002b01:	e8 4a fe ff ff       	call   9f002950 <memcpyI>
9f002b06:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:69
9f002b09:	c9                   	leave  
9f002b0a:	c3                   	ret    
9f002b0b:	90                   	nop

9f002b0c <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "common.h"

void *memsetI(void *d1, int val, size_t len)
{
9f002b0c:	55                   	push   ebp
9f002b0d:	89 e5                	mov    ebp,esp
9f002b0f:	83 ec 20             	sub    esp,0x20
9f002b12:	e8 7b 36 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f002b17:	05 c5 66 00 00       	add    eax,0x66c5
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
9f002b1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002b1f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
9f002b22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002b25:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
9f002b28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002b2b:	c1 e0 10             	shl    eax,0x10
9f002b2e:	89 c2                	mov    edx,eax
9f002b30:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002b33:	c1 e0 08             	shl    eax,0x8
9f002b36:	09 c2                	or     edx,eax
9f002b38:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002b3b:	09 d0                	or     eax,edx
9f002b3d:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
9f002b41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002b44:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
9f002b47:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002b4a:	c1 e0 18             	shl    eax,0x18
9f002b4d:	89 c2                	mov    edx,eax
9f002b4f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002b52:	c1 e0 10             	shl    eax,0x10
9f002b55:	09 c2                	or     edx,eax
9f002b57:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002b5a:	c1 e0 08             	shl    eax,0x8
9f002b5d:	09 d0                	or     eax,edx
9f002b5f:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
9f002b62:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
9f002b65:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002b68:	83 e0 03             	and    eax,0x3
9f002b6b:	85 c0                	test   eax,eax
9f002b6d:	75 1c                	jne    9f002b8b <memsetI+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
9f002b6f:	eb 0e                	jmp    9f002b7f <memsetI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
9f002b71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002b74:	8d 50 04             	lea    edx,[eax+0x4]
9f002b77:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002b7a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f002b7d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
9f002b7f:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
9f002b83:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002b87:	75 e8                	jne    9f002b71 <memsetI+0x65>
9f002b89:	eb 43                	jmp    9f002bce <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
9f002b8b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002b8e:	83 e0 01             	and    eax,0x1
9f002b91:	85 c0                	test   eax,eax
9f002b93:	75 2c                	jne    9f002bc1 <memsetI+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
9f002b95:	eb 10                	jmp    9f002ba7 <memsetI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
9f002b97:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f002b9a:	8d 50 02             	lea    edx,[eax+0x2]
9f002b9d:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f002ba0:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
9f002ba4:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
9f002ba7:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
9f002bab:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002baf:	75 e6                	jne    9f002b97 <memsetI+0x8b>
9f002bb1:	eb 1b                	jmp    9f002bce <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
9f002bb3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002bb6:	8d 50 01             	lea    edx,[eax+0x1]
9f002bb9:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f002bbc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002bbf:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
9f002bc1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002bc4:	8d 50 ff             	lea    edx,[eax-0x1]
9f002bc7:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002bca:	85 c0                	test   eax,eax
9f002bcc:	75 e5                	jne    9f002bb3 <memsetI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
        *d++ = val;
    }
    return d1;
9f002bce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
9f002bd1:	c9                   	leave  
9f002bd2:	c3                   	ret    

9f002bd3 <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

VISIBLE void *memset(void *d1, int val, size_t len)
{
9f002bd3:	55                   	push   ebp
9f002bd4:	89 e5                	mov    ebp,esp
9f002bd6:	e8 b7 35 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f002bdb:	05 01 66 00 00       	add    eax,0x6601
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    return memsetI(d1, val, len);
9f002be0:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002be3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002be6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002be9:	e8 1e ff ff ff       	call   9f002b0c <memsetI>
9f002bee:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
}
9f002bf1:	c9                   	leave  
9f002bf2:	c3                   	ret    
9f002bf3:	90                   	nop

9f002bf4 <_modf>:
_modf():
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:14
.globl  _modf
.type _modf, @function

modf:
_modf:
                push    ebp
9f002bf4:	55                   	push   ebp
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:15
                mov     ebp,esp
9f002bf5:	89 e5                	mov    ebp,esp
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:16
                push    edi                     # Save register edi
9f002bf7:	57                   	push   edi
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:17
                fldd    [ebp+8]           # Load real from stack
9f002bf8:	d9 45 08             	fld    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:18
                mov     edi,dword [ebp+16]      # Put integer address in edi
9f002bfb:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:19
                fld    st(0)                     # Duplicate st
9f002bfe:	d9 c0                	fld    st(0)
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:20
                frndint                         # Round to integer
9f002c00:	d9 fc                	frndint 
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:21
                fcom    st(1)                     # Compare with orignal value
9f002c02:	d8 d1                	fcom   st(1)
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:22
                fstsw   ax                      # Get the FPU status word
9f002c04:	9b df e0             	fstsw  ax
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:23
                testd    byte [ebp+15],0x80      # Test if number is negative
9f002c07:	f7 45 10 80 00 00 00 	test   DWORD PTR [ebp+0x10],0x80
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:24
                jz      __fmodf1                # Re-direct if positive
9f002c0e:	74 09                	je     9f002c19 <__fmodf1>
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:25
                sahf                            # Store AH to flags
9f002c10:	9e                   	sahf   
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:26
                jnb     __fmodf2                # Re-direct if greater or equal
9f002c11:	73 0d                	jae    9f002c20 <__fmodf2>
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:27
                fld1                            # Load the constant 1
9f002c13:	d9 e8                	fld1   
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:28
                fadd                            # Increment integer part
9f002c15:	de c1                	faddp  st(1),st
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:29
                jmp     __fmodf2                # End of case
9f002c17:	eb 07                	jmp    9f002c20 <__fmodf2>

9f002c19 <__fmodf1>:
__fmodf1():
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:30
__fmodf1:       sahf                            # Store AH to flags
9f002c19:	9e                   	sahf   
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:31
                jna     __fmodf2                # Re-direct if less or equal
9f002c1a:	76 04                	jbe    9f002c20 <__fmodf2>
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:32
                fld1                            # Load constant 1
9f002c1c:	d9 e8                	fld1   
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:33
                fsub                            # Decrement integer part
9f002c1e:	de e9                	fsubp  st(1),st

9f002c20 <__fmodf2>:
__fmodf2():
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:34
__fmodf2:       fstd     [edi]             # Store integer part
9f002c20:	dd 17                	fst    QWORD PTR [edi]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:35
                fsub                            # Subtract to get fraction
9f002c22:	de e9                	fsubp  st(1),st
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:36
                pop     edi                     # Restore register edi
9f002c24:	5f                   	pop    edi
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:37
                mov     esp,ebp                 # Restore stack pointer
9f002c25:	89 ec                	mov    esp,ebp
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:38
                pop     ebp
9f002c27:	5d                   	pop    ebp
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:39
9f002c28:	c3                   	ret    
9f002c29:	66 90                	xchg   ax,ax
9f002c2b:	90                   	nop

9f002c2c <pipe>:
pipe():
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:11

#include "common.h"
#include "pipe.h"

VISIBLE int pipe(int pipefd[2])
{
9f002c2c:	55                   	push   ebp
9f002c2d:	89 e5                	mov    ebp,esp
9f002c2f:	53                   	push   ebx
9f002c30:	83 ec 04             	sub    esp,0x4
9f002c33:	e8 5a 35 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f002c38:	05 a4 65 00 00       	add    eax,0x65a4
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:12
    return do_syscall1(SYSCALL_PIPE, (uintptr_t)pipefd);
9f002c3d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002c40:	83 ec 08             	sub    esp,0x8
9f002c43:	52                   	push   edx
9f002c44:	6a 0f                	push   0xf
9f002c46:	89 c3                	mov    ebx,eax
9f002c48:	e8 f3 e8 ff ff       	call   9f001540 <do_syscall1>
9f002c4d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:13
}
9f002c50:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002c53:	c9                   	leave  
9f002c54:	c3                   	ret    

9f002c55 <dup3>:
dup3():
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:16

VISIBLE int dup3(int oldfd, int newfd, int flags)
{
9f002c55:	55                   	push   ebp
9f002c56:	89 e5                	mov    ebp,esp
9f002c58:	53                   	push   ebx
9f002c59:	83 ec 04             	sub    esp,0x4
9f002c5c:	e8 31 35 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f002c61:	05 7b 65 00 00       	add    eax,0x657b
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:17
    return do_syscall3(SYSCALL_DUP3,oldfd,newfd,flags);
9f002c66:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f002c69:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f002c6c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002c6f:	53                   	push   ebx
9f002c70:	51                   	push   ecx
9f002c71:	52                   	push   edx
9f002c72:	6a 10                	push   0x10
9f002c74:	89 c3                	mov    ebx,eax
9f002c76:	e8 4b e8 ff ff       	call   9f0014c6 <do_syscall3>
9f002c7b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:18
9f002c7e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002c81:	c9                   	leave  
9f002c82:	c3                   	ret    
9f002c83:	90                   	nop

9f002c84 <buildProcInfoTI>:
buildProcInfoTI():
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:17
#include "ascii.h"
#include "file.h"
#include "malloc.h"

procInfo_t *buildProcInfoTI(procInfo_t *procinfo, char *statinfo, int ticksPerUpdateInterval)
{
9f002c84:	55                   	push   ebp
9f002c85:	89 e5                	mov    ebp,esp
9f002c87:	56                   	push   esi
9f002c88:	53                   	push   ebx
9f002c89:	81 ec 50 01 00 00    	sub    esp,0x150
9f002c8f:	e8 4c 35 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f002c94:	81 c3 48 65 00 00    	add    ebx,0x6548
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:18
    char delim[4]={'\n','\t',' ','\0'};
9f002c9a:	c6 45 e8 0a          	mov    BYTE PTR [ebp-0x18],0xa
9f002c9e:	c6 45 e9 09          	mov    BYTE PTR [ebp-0x17],0x9
9f002ca2:	c6 45 ea 20          	mov    BYTE PTR [ebp-0x16],0x20
9f002ca6:	c6 45 eb 00          	mov    BYTE PTR [ebp-0x15],0x0
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:20
    char *token;
    int tokenNumber=1;
9f002caa:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:25
    int pid;
    char name[100], name2[100], name3[100];
    static struct tm tinfo;

    memsetI(name,0,100);
9f002cb1:	83 ec 04             	sub    esp,0x4
9f002cb4:	6a 64                	push   0x64
9f002cb6:	6a 00                	push   0x0
9f002cb8:	8d 45 84             	lea    eax,[ebp-0x7c]
9f002cbb:	50                   	push   eax
9f002cbc:	e8 4b fe ff ff       	call   9f002b0c <memsetI>
9f002cc1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:26
    memsetI(name2,0,100);
9f002cc4:	83 ec 04             	sub    esp,0x4
9f002cc7:	6a 64                	push   0x64
9f002cc9:	6a 00                	push   0x0
9f002ccb:	8d 85 20 ff ff ff    	lea    eax,[ebp-0xe0]
9f002cd1:	50                   	push   eax
9f002cd2:	e8 35 fe ff ff       	call   9f002b0c <memsetI>
9f002cd7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:27
    memsetI(name3,0,100);
9f002cda:	83 ec 04             	sub    esp,0x4
9f002cdd:	6a 64                	push   0x64
9f002cdf:	6a 00                	push   0x0
9f002ce1:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
9f002ce7:	50                   	push   eax
9f002ce8:	e8 1f fe ff ff       	call   9f002b0c <memsetI>
9f002ced:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:29
    
    token=strtokI(statinfo,delim);
9f002cf0:	83 ec 08             	sub    esp,0x8
9f002cf3:	8d 45 e8             	lea    eax,[ebp-0x18]
9f002cf6:	50                   	push   eax
9f002cf7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002cfa:	e8 1d d4 ff ff       	call   9f00011c <strtokI>
9f002cff:	83 c4 10             	add    esp,0x10
9f002d02:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:30
    while (token)
9f002d05:	e9 df 02 00 00       	jmp    9f002fe9 <.L3+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:32
    {
        switch (tokenNumber)
9f002d0a:	83 7d f0 17          	cmp    DWORD PTR [ebp-0x10],0x17
9f002d0e:	0f 87 bd 02 00 00    	ja     9f002fd1 <.L3>
9f002d14:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002d17:	c1 e0 02             	shl    eax,0x2
9f002d1a:	8b 84 18 a0 fa ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x560]
9f002d21:	01 d8                	add    eax,ebx
9f002d23:	ff e0                	jmp    eax

9f002d25 <.L4>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:35
        {
            case 1: //pid
                pid=atoiI(token);
9f002d25:	83 ec 0c             	sub    esp,0xc
9f002d28:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002d2b:	e8 0b d7 ff ff       	call   9f00043b <atoiI>
9f002d30:	83 c4 10             	add    esp,0x10
9f002d33:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:36
                procinfo->pid=pid;
9f002d36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d39:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f002d3c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:38
//procinfo->lastUpdateIteration=iteration;
                break;
9f002d3e:	e9 8e 02 00 00       	jmp    9f002fd1 <.L3>

9f002d43 <.L7>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:40
            case 3: //state
                procinfo->status=token[0];
9f002d43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002d46:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002d49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d4c:	88 50 2c             	mov    BYTE PTR [eax+0x2c],dl
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:41
                break;
9f002d4f:	e9 7d 02 00 00       	jmp    9f002fd1 <.L3>

9f002d54 <.L8>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:43
            case 4: //ppid
                procinfo->ppid=atoiI(token);
9f002d54:	83 ec 0c             	sub    esp,0xc
9f002d57:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002d5a:	e8 dc d6 ff ff       	call   9f00043b <atoiI>
9f002d5f:	83 c4 10             	add    esp,0x10
9f002d62:	89 c2                	mov    edx,eax
9f002d64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d67:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:44
                break;
9f002d6a:	e9 62 02 00 00       	jmp    9f002fd1 <.L3>

9f002d6f <.L9>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:46
            case 7: //tty_nr
                procinfo->tty=atoiI(token);
9f002d6f:	83 ec 0c             	sub    esp,0xc
9f002d72:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002d75:	e8 c1 d6 ff ff       	call   9f00043b <atoiI>
9f002d7a:	83 c4 10             	add    esp,0x10
9f002d7d:	89 c2                	mov    edx,eax
9f002d7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d82:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:47
                break;
9f002d85:	e9 47 02 00 00       	jmp    9f002fd1 <.L3>

9f002d8a <.L10>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:49
            case 10://minflt
                procinfo->minorFaults=atoiI(token);
9f002d8a:	83 ec 0c             	sub    esp,0xc
9f002d8d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002d90:	e8 a6 d6 ff ff       	call   9f00043b <atoiI>
9f002d95:	83 c4 10             	add    esp,0x10
9f002d98:	89 c2                	mov    edx,eax
9f002d9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d9d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:50
                break;
9f002da0:	e9 2c 02 00 00       	jmp    9f002fd1 <.L3>

9f002da5 <.L11>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:52
            case 11://majflt
                procinfo->majorFaults=atoiI(token);
9f002da5:	83 ec 0c             	sub    esp,0xc
9f002da8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002dab:	e8 8b d6 ff ff       	call   9f00043b <atoiI>
9f002db0:	83 c4 10             	add    esp,0x10
9f002db3:	89 c2                	mov    edx,eax
9f002db5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002db8:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:53
                break;
9f002dbb:	e9 11 02 00 00       	jmp    9f002fd1 <.L3>

9f002dc0 <.L13>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:55
            case 17://priority
                if (strstrI(token,"-"))
9f002dc0:	83 ec 08             	sub    esp,0x8
9f002dc3:	8d 83 84 fa ff ff    	lea    eax,[ebx-0x57c]
9f002dc9:	50                   	push   eax
9f002dca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002dcd:	e8 24 26 00 00       	call   9f0053f6 <strstrI>
9f002dd2:	83 c4 10             	add    esp,0x10
9f002dd5:	85 c0                	test   eax,eax
9f002dd7:	74 21                	je     9f002dfa <.L13+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:56
                    procinfo->priority= -atoiI(token+1);
9f002dd9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002ddc:	83 c0 01             	add    eax,0x1
9f002ddf:	83 ec 0c             	sub    esp,0xc
9f002de2:	50                   	push   eax
9f002de3:	e8 53 d6 ff ff       	call   9f00043b <atoiI>
9f002de8:	83 c4 10             	add    esp,0x10
9f002deb:	f7 d8                	neg    eax
9f002ded:	89 c2                	mov    edx,eax
9f002def:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002df2:	89 50 54             	mov    DWORD PTR [eax+0x54],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:59
                else
                    procinfo->priority=atoiI(token);
                break;
9f002df5:	e9 d7 01 00 00       	jmp    9f002fd1 <.L3>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:58
                break;
            case 17://priority
                if (strstrI(token,"-"))
                    procinfo->priority= -atoiI(token+1);
                else
                    procinfo->priority=atoiI(token);
9f002dfa:	83 ec 0c             	sub    esp,0xc
9f002dfd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002e00:	e8 36 d6 ff ff       	call   9f00043b <atoiI>
9f002e05:	83 c4 10             	add    esp,0x10
9f002e08:	89 c2                	mov    edx,eax
9f002e0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e0d:	89 50 54             	mov    DWORD PTR [eax+0x54],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:59
                break;
9f002e10:	e9 bc 01 00 00       	jmp    9f002fd1 <.L3>

9f002e15 <.L6>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:61
            case 2: //comm
                strreplaceI(token,"(","",name);
9f002e15:	8d 45 84             	lea    eax,[ebp-0x7c]
9f002e18:	50                   	push   eax
9f002e19:	8d 83 86 fa ff ff    	lea    eax,[ebx-0x57a]
9f002e1f:	50                   	push   eax
9f002e20:	8d 83 87 fa ff ff    	lea    eax,[ebx-0x579]
9f002e26:	50                   	push   eax
9f002e27:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002e2a:	e8 e5 23 00 00       	call   9f005214 <strreplaceI>
9f002e2f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:62
                strreplaceI(name,")","",name2);
9f002e32:	8d 85 20 ff ff ff    	lea    eax,[ebp-0xe0]
9f002e38:	50                   	push   eax
9f002e39:	8d 83 86 fa ff ff    	lea    eax,[ebx-0x57a]
9f002e3f:	50                   	push   eax
9f002e40:	8d 83 89 fa ff ff    	lea    eax,[ebx-0x577]
9f002e46:	50                   	push   eax
9f002e47:	8d 45 84             	lea    eax,[ebp-0x7c]
9f002e4a:	50                   	push   eax
9f002e4b:	e8 c4 23 00 00       	call   9f005214 <strreplaceI>
9f002e50:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:63
                sprintfI(name3,"%-10s",name2);
9f002e53:	83 ec 04             	sub    esp,0x4
9f002e56:	8d 85 20 ff ff ff    	lea    eax,[ebp-0xe0]
9f002e5c:	50                   	push   eax
9f002e5d:	8d 83 8b fa ff ff    	lea    eax,[ebx-0x575]
9f002e63:	50                   	push   eax
9f002e64:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
9f002e6a:	50                   	push   eax
9f002e6b:	e8 d1 19 00 00       	call   9f004841 <sprintfI>
9f002e70:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:64
                strncpyI((char*)procinfo->name,name3,9);
9f002e73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e76:	8d 50 04             	lea    edx,[eax+0x4]
9f002e79:	83 ec 04             	sub    esp,0x4
9f002e7c:	6a 09                	push   0x9
9f002e7e:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
9f002e84:	50                   	push   eax
9f002e85:	52                   	push   edx
9f002e86:	e8 09 1f 00 00       	call   9f004d94 <strncpyI>
9f002e8b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:65
                break;
9f002e8e:	e9 3e 01 00 00       	jmp    9f002fd1 <.L3>

9f002e93 <.L12>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:67
            case 13://ticks
                procinfo->ticks=atoiI(token);
9f002e93:	83 ec 0c             	sub    esp,0xc
9f002e96:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002e99:	e8 9d d5 ff ff       	call   9f00043b <atoiI>
9f002e9e:	83 c4 10             	add    esp,0x10
9f002ea1:	89 c2                	mov    edx,eax
9f002ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ea6:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:68
                procinfo->totalTicks+=(procinfo->ticks - procinfo->lastTicks);
9f002ea9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002eac:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
9f002eaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002eb2:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
9f002eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002eb8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
9f002ebb:	29 c1                	sub    ecx,eax
9f002ebd:	89 c8                	mov    eax,ecx
9f002ebf:	01 c2                	add    edx,eax
9f002ec1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ec4:	89 50 48             	mov    DWORD PTR [eax+0x48],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:69
                time_t runtime_secs=procinfo->totalTicks/TICKS_PER_SECOND;
9f002ec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002eca:	8b 48 48             	mov    ecx,DWORD PTR [eax+0x48]
9f002ecd:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002ed2:	89 c8                	mov    eax,ecx
9f002ed4:	f7 ea                	imul   edx
9f002ed6:	c1 fa 05             	sar    edx,0x5
9f002ed9:	89 c8                	mov    eax,ecx
9f002edb:	c1 f8 1f             	sar    eax,0x1f
9f002ede:	29 c2                	sub    edx,eax
9f002ee0:	89 d0                	mov    eax,edx
9f002ee2:	89 85 b8 fe ff ff    	mov    DWORD PTR [ebp-0x148],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:71
                
                memsetI(&tinfo,0,sizeof(struct tm));
9f002ee8:	83 ec 04             	sub    esp,0x4
9f002eeb:	6a 2c                	push   0x2c
9f002eed:	6a 00                	push   0x0
9f002eef:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
9f002ef5:	50                   	push   eax
9f002ef6:	e8 11 fc ff ff       	call   9f002b0c <memsetI>
9f002efb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:72
                gmtime_rI((time_t*)&runtime_secs,&tinfo);
9f002efe:	83 ec 08             	sub    esp,0x8
9f002f01:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
9f002f07:	50                   	push   eax
9f002f08:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
9f002f0e:	50                   	push   eax
9f002f0f:	e8 b4 25 00 00       	call   9f0054c8 <gmtime_rI>
9f002f14:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:73
                memsetI(procinfo->time,0,40);
9f002f17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f1a:	83 c0 64             	add    eax,0x64
9f002f1d:	83 ec 04             	sub    esp,0x4
9f002f20:	6a 28                	push   0x28
9f002f22:	6a 00                	push   0x0
9f002f24:	50                   	push   eax
9f002f25:	e8 e2 fb ff ff       	call   9f002b0c <memsetI>
9f002f2a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:74
                sprintfI(procinfo->time,"%02i:%02i:%02i",tinfo.tm_hour,tinfo.tm_min,tinfo.tm_sec);
9f002f2d:	8b 8b a4 00 00 00    	mov    ecx,DWORD PTR [ebx+0xa4]
9f002f33:	8b 93 a8 00 00 00    	mov    edx,DWORD PTR [ebx+0xa8]
9f002f39:	8b 83 ac 00 00 00    	mov    eax,DWORD PTR [ebx+0xac]
9f002f3f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
9f002f42:	83 c6 64             	add    esi,0x64
9f002f45:	83 ec 0c             	sub    esp,0xc
9f002f48:	51                   	push   ecx
9f002f49:	52                   	push   edx
9f002f4a:	50                   	push   eax
9f002f4b:	8d 83 91 fa ff ff    	lea    eax,[ebx-0x56f]
9f002f51:	50                   	push   eax
9f002f52:	56                   	push   esi
9f002f53:	e8 e9 18 00 00       	call   9f004841 <sprintfI>
9f002f58:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:75
                procinfo->cpu=(((double)procinfo->ticks-(double)procinfo->lastTicks)/(double)ticksPerUpdateInterval)*100;
9f002f5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f5e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
9f002f61:	89 85 b4 fe ff ff    	mov    DWORD PTR [ebp-0x14c],eax
9f002f67:	db 85 b4 fe ff ff    	fild   DWORD PTR [ebp-0x14c]
9f002f6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f70:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
9f002f73:	89 85 b4 fe ff ff    	mov    DWORD PTR [ebp-0x14c],eax
9f002f79:	db 85 b4 fe ff ff    	fild   DWORD PTR [ebp-0x14c]
9f002f7f:	de e9                	fsubp  st(1),st
9f002f81:	db 45 10             	fild   DWORD PTR [ebp+0x10]
9f002f84:	de f9                	fdivp  st(1),st
9f002f86:	dd 83 1c fb ff ff    	fld    QWORD PTR [ebx-0x4e4]
9f002f8c:	de c9                	fmulp  st(1),st
9f002f8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f91:	dd 58 4c             	fstp   QWORD PTR [eax+0x4c]
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:76
                procinfo->lastTicks=procinfo->ticks;
9f002f94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f97:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
9f002f9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f9d:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:79
                
//procinfo->cpu=(((double)procinfo->ticks-(double)procinfo->lastTicks)/(double)intervalTicks)*100;
                break;
9f002fa0:	eb 2f                	jmp    9f002fd1 <.L3>

9f002fa2 <.L14>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:81
            case 22://vsize
                procinfo->virtualSize=atoiI(token);
9f002fa2:	83 ec 0c             	sub    esp,0xc
9f002fa5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002fa8:	e8 8e d4 ff ff       	call   9f00043b <atoiI>
9f002fad:	83 c4 10             	add    esp,0x10
9f002fb0:	89 c2                	mov    edx,eax
9f002fb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fb5:	89 50 58             	mov    DWORD PTR [eax+0x58],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:82
                break;
9f002fb8:	eb 17                	jmp    9f002fd1 <.L3>

9f002fba <.L15>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:84
            case 23://rss
                procinfo->memorySize=atoiI(token);
9f002fba:	83 ec 0c             	sub    esp,0xc
9f002fbd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002fc0:	e8 76 d4 ff ff       	call   9f00043b <atoiI>
9f002fc5:	83 c4 10             	add    esp,0x10
9f002fc8:	89 c2                	mov    edx,eax
9f002fca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fcd:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:85
                break;
9f002fd0:	90                   	nop

9f002fd1 <.L3>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:87
        }
        tokenNumber++;
9f002fd1:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:88
        token=strtokI(NULL,delim);
9f002fd5:	83 ec 08             	sub    esp,0x8
9f002fd8:	8d 45 e8             	lea    eax,[ebp-0x18]
9f002fdb:	50                   	push   eax
9f002fdc:	6a 00                	push   0x0
9f002fde:	e8 39 d1 ff ff       	call   9f00011c <strtokI>
9f002fe3:	83 c4 10             	add    esp,0x10
9f002fe6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:30
    memsetI(name,0,100);
    memsetI(name2,0,100);
    memsetI(name3,0,100);
    
    token=strtokI(statinfo,delim);
    while (token)
9f002fe9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f002fed:	0f 85 17 fd ff ff    	jne    9f002d0a <buildProcInfoTI+0x86>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:90
                break;
        }
        tokenNumber++;
        token=strtokI(NULL,delim);
    }
    return procinfo;
9f002ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:92
    
}
9f002ff6:	8d 65 f8             	lea    esp,[ebp-0x8]
9f002ff9:	5b                   	pop    ebx
9f002ffa:	5e                   	pop    esi
9f002ffb:	5d                   	pop    ebp
9f002ffc:	c3                   	ret    

9f002ffd <buildProcInfoT>:
buildProcInfoT():
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:95

VISIBLE procInfo_t *buildProcInfoT(procInfo_t *procinfo, char *statinfo)
{
9f002ffd:	55                   	push   ebp
9f002ffe:	89 e5                	mov    ebp,esp
9f003000:	83 ec 08             	sub    esp,0x8
9f003003:	e8 8a 31 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f003008:	05 d4 61 00 00       	add    eax,0x61d4
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:96
    return buildProcInfoTI(procinfo, statinfo, 0);
9f00300d:	83 ec 04             	sub    esp,0x4
9f003010:	6a 00                	push   0x0
9f003012:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003015:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003018:	e8 67 fc ff ff       	call   9f002c84 <buildProcInfoTI>
9f00301d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:97
}
9f003020:	c9                   	leave  
9f003021:	c3                   	ret    

9f003022 <buildAllProcInfoTs>:
buildAllProcInfoTs():
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:100

VISIBLE void buildAllProcInfoTs(procInfo_t **topinfo, int intervalTicks, int iteration, double* userCPU, double* kernelCPU)
{
9f003022:	55                   	push   ebp
9f003023:	89 e5                	mov    ebp,esp
9f003025:	56                   	push   esi
9f003026:	53                   	push   ebx
9f003027:	81 ec b0 01 00 00    	sub    esp,0x1b0
9f00302d:	e8 ae 31 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f003032:	81 c3 aa 61 00 00    	add    ebx,0x61aa
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:103
    static direntry_t *dirEntries;
    
    *userCPU = *kernelCPU = 0;
9f003038:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f00303b:	d9 ee                	fldz   
9f00303d:	dd 18                	fstp   QWORD PTR [eax]
9f00303f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f003042:	dd 00                	fld    QWORD PTR [eax]
9f003044:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f003047:	dd 18                	fstp   QWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:105
    
    if (!dirEntries)
9f003049:	8b 83 d0 00 00 00    	mov    eax,DWORD PTR [ebx+0xd0]
9f00304f:	85 c0                	test   eax,eax
9f003051:	75 16                	jne    9f003069 <buildAllProcInfoTs+0x47>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:106
        dirEntries=mallocI(PROCINFO_MAX_PROCESSES*sizeof(direntry_t));
9f003053:	83 ec 0c             	sub    esp,0xc
9f003056:	68 00 17 01 00       	push   0x11700
9f00305b:	e8 95 f4 ff ff       	call   9f0024f5 <mallocI>
9f003060:	83 c4 10             	add    esp,0x10
9f003063:	89 83 d0 00 00 00    	mov    DWORD PTR [ebx+0xd0],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:109

    char path[128];
    int procCount=getdirI("/proc/",dirEntries,1024*100);
9f003069:	8b 83 d0 00 00 00    	mov    eax,DWORD PTR [ebx+0xd0]
9f00306f:	83 ec 04             	sub    esp,0x4
9f003072:	68 00 90 01 00       	push   0x19000
9f003077:	50                   	push   eax
9f003078:	8d 83 00 fb ff ff    	lea    eax,[ebx-0x500]
9f00307e:	50                   	push   eax
9f00307f:	e8 e4 d9 ff ff       	call   9f000a68 <getdirI>
9f003084:	83 c4 10             	add    esp,0x10
9f003087:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:113
    char statBuffer[256];
    procInfo_t *currProc;

    for (int cnt=0;cnt<procCount;cnt++)
9f00308a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f003091:	e9 f0 01 00 00       	jmp    9f003286 <buildAllProcInfoTs+0x264>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:115
    {
        if (dirEntries[cnt].is_dir)
9f003096:	8b 93 d0 00 00 00    	mov    edx,DWORD PTR [ebx+0xd0]
9f00309c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00309f:	69 c0 17 01 00 00    	imul   eax,eax,0x117
9f0030a5:	01 d0                	add    eax,edx
9f0030a7:	0f b6 80 04 01 00 00 	movzx  eax,BYTE PTR [eax+0x104]
9f0030ae:	84 c0                	test   al,al
9f0030b0:	0f 84 cc 01 00 00    	je     9f003282 <buildAllProcInfoTs+0x260>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:117
        {
            strcpyI(path,"/proc/");
9f0030b6:	83 ec 08             	sub    esp,0x8
9f0030b9:	8d 83 00 fb ff ff    	lea    eax,[ebx-0x500]
9f0030bf:	50                   	push   eax
9f0030c0:	8d 85 58 ff ff ff    	lea    eax,[ebp-0xa8]
9f0030c6:	50                   	push   eax
9f0030c7:	e8 40 1a 00 00       	call   9f004b0c <strcpyI>
9f0030cc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:118
            strcatI(path,dirEntries[cnt].filename);
9f0030cf:	8b 93 d0 00 00 00    	mov    edx,DWORD PTR [ebx+0xd0]
9f0030d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0030d8:	69 c0 17 01 00 00    	imul   eax,eax,0x117
9f0030de:	01 d0                	add    eax,edx
9f0030e0:	83 ec 08             	sub    esp,0x8
9f0030e3:	50                   	push   eax
9f0030e4:	8d 85 58 ff ff ff    	lea    eax,[ebp-0xa8]
9f0030ea:	50                   	push   eax
9f0030eb:	e8 46 18 00 00       	call   9f004936 <strcatI>
9f0030f0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:119
            strcatI(path,"/stat");
9f0030f3:	83 ec 08             	sub    esp,0x8
9f0030f6:	8d 83 07 fb ff ff    	lea    eax,[ebx-0x4f9]
9f0030fc:	50                   	push   eax
9f0030fd:	8d 85 58 ff ff ff    	lea    eax,[ebp-0xa8]
9f003103:	50                   	push   eax
9f003104:	e8 2d 18 00 00       	call   9f004936 <strcatI>
9f003109:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:120
            if (strstrI(path,"self")!=NULL)
9f00310c:	83 ec 08             	sub    esp,0x8
9f00310f:	8d 83 0d fb ff ff    	lea    eax,[ebx-0x4f3]
9f003115:	50                   	push   eax
9f003116:	8d 85 58 ff ff ff    	lea    eax,[ebp-0xa8]
9f00311c:	50                   	push   eax
9f00311d:	e8 d4 22 00 00       	call   9f0053f6 <strstrI>
9f003122:	83 c4 10             	add    esp,0x10
9f003125:	85 c0                	test   eax,eax
9f003127:	0f 85 54 01 00 00    	jne    9f003281 <buildAllProcInfoTs+0x25f>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:122
                continue;
            int *handle=openI(path,"r");
9f00312d:	83 ec 08             	sub    esp,0x8
9f003130:	8d 83 12 fb ff ff    	lea    eax,[ebx-0x4ee]
9f003136:	50                   	push   eax
9f003137:	8d 85 58 ff ff ff    	lea    eax,[ebp-0xa8]
9f00313d:	50                   	push   eax
9f00313e:	e8 7c d9 ff ff       	call   9f000abf <openI>
9f003143:	83 c4 10             	add    esp,0x10
9f003146:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:123
            if (handle)
9f003149:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f00314d:	0f 84 2f 01 00 00    	je     9f003282 <buildAllProcInfoTs+0x260>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:126
            {
                //CLR 11/06/2022 - Added return value ... if not > 0 then we didn't get any bytes
                int res = readI(handle,statBuffer,1024,1);
9f003153:	6a 01                	push   0x1
9f003155:	68 00 04 00 00       	push   0x400
9f00315a:	8d 85 58 fe ff ff    	lea    eax,[ebp-0x1a8]
9f003160:	50                   	push   eax
9f003161:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f003164:	e8 db da ff ff       	call   9f000c44 <readI>
9f003169:	83 c4 10             	add    esp,0x10
9f00316c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:127
                closeI(handle);
9f00316f:	83 ec 0c             	sub    esp,0xc
9f003172:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f003175:	e8 80 da ff ff       	call   9f000bfa <closeI>
9f00317a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:129
                //buildTopInfo(statBuffer,topinfo);
                if (res > 0)
9f00317d:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f003181:	0f 8e fb 00 00 00    	jle    9f003282 <buildAllProcInfoTs+0x260>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:131
                {
                    char *space=strstrI(statBuffer," ");
9f003187:	83 ec 08             	sub    esp,0x8
9f00318a:	8d 83 14 fb ff ff    	lea    eax,[ebx-0x4ec]
9f003190:	50                   	push   eax
9f003191:	8d 85 58 fe ff ff    	lea    eax,[ebp-0x1a8]
9f003197:	50                   	push   eax
9f003198:	e8 59 22 00 00       	call   9f0053f6 <strstrI>
9f00319d:	83 c4 10             	add    esp,0x10
9f0031a0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:133
                    char pid[8];
                    strncpyI(pid,statBuffer,space-statBuffer);
9f0031a3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0031a6:	8d 85 58 fe ff ff    	lea    eax,[ebp-0x1a8]
9f0031ac:	29 c2                	sub    edx,eax
9f0031ae:	89 d0                	mov    eax,edx
9f0031b0:	83 ec 04             	sub    esp,0x4
9f0031b3:	50                   	push   eax
9f0031b4:	8d 85 58 fe ff ff    	lea    eax,[ebp-0x1a8]
9f0031ba:	50                   	push   eax
9f0031bb:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
9f0031c1:	50                   	push   eax
9f0031c2:	e8 cd 1b 00 00       	call   9f004d94 <strncpyI>
9f0031c7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:134
                    int ipid=atoiI(pid);
9f0031ca:	83 ec 0c             	sub    esp,0xc
9f0031cd:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
9f0031d3:	50                   	push   eax
9f0031d4:	e8 62 d2 ff ff       	call   9f00043b <atoiI>
9f0031d9:	83 c4 10             	add    esp,0x10
9f0031dc:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:135
                    if (topinfo[ipid]==NULL)
9f0031df:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f0031e2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0031e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0031ec:	01 d0                	add    eax,edx
9f0031ee:	8b 00                	mov    eax,DWORD PTR [eax]
9f0031f0:	85 c0                	test   eax,eax
9f0031f2:	75 22                	jne    9f003216 <buildAllProcInfoTs+0x1f4>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:136
                        topinfo[ipid]=mallocI(sizeof(procInfo_t));
9f0031f4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f0031f7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0031fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003201:	8d 34 02             	lea    esi,[edx+eax*1]
9f003204:	83 ec 0c             	sub    esp,0xc
9f003207:	68 8c 00 00 00       	push   0x8c
9f00320c:	e8 e4 f2 ff ff       	call   9f0024f5 <mallocI>
9f003211:	83 c4 10             	add    esp,0x10
9f003214:	89 06                	mov    DWORD PTR [esi],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:137
                    currProc=topinfo[ipid];
9f003216:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003219:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f003220:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003223:	01 d0                	add    eax,edx
9f003225:	8b 00                	mov    eax,DWORD PTR [eax]
9f003227:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:138
                    buildProcInfoTI(currProc, statBuffer, intervalTicks);
9f00322a:	83 ec 04             	sub    esp,0x4
9f00322d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003230:	8d 85 58 fe ff ff    	lea    eax,[ebp-0x1a8]
9f003236:	50                   	push   eax
9f003237:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f00323a:	e8 45 fa ff ff       	call   9f002c84 <buildProcInfoTI>
9f00323f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:139
                    currProc->lastUpdateIteration=iteration;
9f003242:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f003245:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f003248:	89 50 60             	mov    DWORD PTR [eax+0x60],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:140
                    uint32_t* ptr = strstrI(currProc->name,"idle");
9f00324b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00324e:	8d 50 04             	lea    edx,[eax+0x4]
9f003251:	83 ec 08             	sub    esp,0x8
9f003254:	8d 83 16 fb ff ff    	lea    eax,[ebx-0x4ea]
9f00325a:	50                   	push   eax
9f00325b:	52                   	push   edx
9f00325c:	e8 95 21 00 00       	call   9f0053f6 <strstrI>
9f003261:	83 c4 10             	add    esp,0x10
9f003264:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:141
                    if (ptr == NULL)
9f003267:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f00326b:	75 15                	jne    9f003282 <buildAllProcInfoTs+0x260>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:142
                        *userCPU += currProc->cpu;
9f00326d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f003270:	dd 00                	fld    QWORD PTR [eax]
9f003272:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f003275:	dd 40 4c             	fld    QWORD PTR [eax+0x4c]
9f003278:	de c1                	faddp  st(1),st
9f00327a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f00327d:	dd 18                	fstp   QWORD PTR [eax]
9f00327f:	eb 01                	jmp    9f003282 <buildAllProcInfoTs+0x260>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:121
        {
            strcpyI(path,"/proc/");
            strcatI(path,dirEntries[cnt].filename);
            strcatI(path,"/stat");
            if (strstrI(path,"self")!=NULL)
                continue;
9f003281:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:113 (discriminator 2)
    char path[128];
    int procCount=getdirI("/proc/",dirEntries,1024*100);
    char statBuffer[256];
    procInfo_t *currProc;

    for (int cnt=0;cnt<procCount;cnt++)
9f003282:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:113 (discriminator 1)
9f003286:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003289:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f00328c:	0f 8c 04 fe ff ff    	jl     9f003096 <buildAllProcInfoTs+0x74>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:149
            }
        }
    }
    //free(dirEntries); variable is static so it will exist until the program ends
    //at which time it will be free'd automagically
9f003292:	90                   	nop
9f003293:	8d 65 f8             	lea    esp,[ebp-0x8]
9f003296:	5b                   	pop    ebx
9f003297:	5e                   	pop    esi
9f003298:	5d                   	pop    ebp
9f003299:	c3                   	ret    
9f00329a:	66 90                	xchg   ax,ax

9f00329c <cvt>:
cvt():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:61
#define is_digit(c) ((c) >= '0' && (c) <= '9')
#define CVTBUFSIZE 512 //CLR 11/14/2022
static char *digits = "0123456789abcdefghijklmnopqrstuvwxyz";
static char *upper_digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

static char *cvt(double arg, int ndigits, int *decpt, int *sign, char *buf, int eflag) {
9f00329c:	55                   	push   ebp
9f00329d:	89 e5                	mov    ebp,esp
9f00329f:	53                   	push   ebx
9f0032a0:	83 ec 44             	sub    esp,0x44
9f0032a3:	e8 38 2f 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f0032a8:	81 c3 34 5f 00 00    	add    ebx,0x5f34
9f0032ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0032b1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
9f0032b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0032b7:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:66
  int r2;
  double fi, fj;
  char *p, *p1;

  if (ndigits < 0) ndigits = 0;
9f0032ba:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0032be:	79 07                	jns    9f0032c7 <cvt+0x2b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:66 (discriminator 1)
9f0032c0:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:67
  if (ndigits >= CVTBUFSIZE - 1) ndigits = CVTBUFSIZE - 2;
9f0032c7:	81 7d 10 fe 01 00 00 	cmp    DWORD PTR [ebp+0x10],0x1fe
9f0032ce:	7e 07                	jle    9f0032d7 <cvt+0x3b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:67 (discriminator 1)
9f0032d0:	c7 45 10 fe 01 00 00 	mov    DWORD PTR [ebp+0x10],0x1fe
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:68
  r2 = 0;
9f0032d7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:69
  *sign = 0;
9f0032de:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f0032e1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:70
  p = &buf[0];
9f0032e7:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0032ea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:71
  if (arg < 0) {
9f0032ed:	d9 ee                	fldz   
9f0032ef:	dd 45 d0             	fld    QWORD PTR [ebp-0x30]
9f0032f2:	d9 c9                	fxch   st(1)
9f0032f4:	df e9                	fucomip st,st(1)
9f0032f6:	dd d8                	fstp   st(0)
9f0032f8:	76 11                	jbe    9f00330b <cvt+0x6f>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:72
    *sign = 1;
9f0032fa:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f0032fd:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:73
    arg = -arg;
9f003303:	dd 45 d0             	fld    QWORD PTR [ebp-0x30]
9f003306:	d9 e0                	fchs   
9f003308:	dd 5d d0             	fstp   QWORD PTR [ebp-0x30]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:75
  }
  arg = modf(arg, &fi);
9f00330b:	83 ec 04             	sub    esp,0x4
9f00330e:	8d 45 e0             	lea    eax,[ebp-0x20]
9f003311:	50                   	push   eax
9f003312:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f003315:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
9f003318:	e8 a3 2e 00 00       	call   9f0061c0 <__x86.get_pc_thunk.ax+0x2e>
9f00331d:	83 c4 10             	add    esp,0x10
9f003320:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
9f003323:	db 45 c4             	fild   DWORD PTR [ebp-0x3c]
9f003326:	dd 5d d0             	fstp   QWORD PTR [ebp-0x30]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:76
  p1 = &buf[CVTBUFSIZE];
9f003329:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00332c:	05 00 02 00 00       	add    eax,0x200
9f003331:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:78

  if (fi != 0) {
9f003334:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
9f003337:	d9 ee                	fldz   
9f003339:	df e9                	fucomip st,st(1)
9f00333b:	7a 0e                	jp     9f00334b <cvt+0xaf>
9f00333d:	d9 ee                	fldz   
9f00333f:	df e9                	fucomip st,st(1)
9f003341:	dd d8                	fstp   st(0)
9f003343:	0f 84 b4 00 00 00    	je     9f0033fd <cvt+0x161>
9f003349:	eb 02                	jmp    9f00334d <cvt+0xb1>
9f00334b:	dd d8                	fstp   st(0)
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:79
    p1 = &buf[CVTBUFSIZE];
9f00334d:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003350:	05 00 02 00 00       	add    eax,0x200
9f003355:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:80
    while (fi != 0) {
9f003358:	eb 6a                	jmp    9f0033c4 <cvt+0x128>
9f00335a:	dd d8                	fstp   st(0)
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
      fj = modf(fi / 10, &fi);
9f00335c:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
9f00335f:	dd 83 9c fc ff ff    	fld    QWORD PTR [ebx-0x364]
9f003365:	de f9                	fdivp  st(1),st
9f003367:	83 ec 04             	sub    esp,0x4
9f00336a:	8d 45 e0             	lea    eax,[ebp-0x20]
9f00336d:	50                   	push   eax
9f00336e:	8d 64 24 f8          	lea    esp,[esp-0x8]
9f003372:	dd 1c 24             	fstp   QWORD PTR [esp]
9f003375:	e8 46 2e 00 00       	call   9f0061c0 <__x86.get_pc_thunk.ax+0x2e>
9f00337a:	83 c4 10             	add    esp,0x10
9f00337d:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
9f003380:	db 45 c4             	fild   DWORD PTR [ebp-0x3c]
9f003383:	dd 5d d8             	fstp   QWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:82
      *--p1 = (int)((fj + .03) * 10) + '0';
9f003386:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
9f00338a:	dd 45 d8             	fld    QWORD PTR [ebp-0x28]
9f00338d:	dd 83 a4 fc ff ff    	fld    QWORD PTR [ebx-0x35c]
9f003393:	de c1                	faddp  st(1),st
9f003395:	dd 83 9c fc ff ff    	fld    QWORD PTR [ebx-0x364]
9f00339b:	de c9                	fmulp  st(1),st
9f00339d:	d9 7d ce             	fnstcw WORD PTR [ebp-0x32]
9f0033a0:	0f b7 45 ce          	movzx  eax,WORD PTR [ebp-0x32]
9f0033a4:	b4 0c                	mov    ah,0xc
9f0033a6:	66 89 45 cc          	mov    WORD PTR [ebp-0x34],ax
9f0033aa:	d9 6d cc             	fldcw  WORD PTR [ebp-0x34]
9f0033ad:	db 5d c8             	fistp  DWORD PTR [ebp-0x38]
9f0033b0:	d9 6d ce             	fldcw  WORD PTR [ebp-0x32]
9f0033b3:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
9f0033b6:	83 c0 30             	add    eax,0x30
9f0033b9:	89 c2                	mov    edx,eax
9f0033bb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0033be:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:83
      r2++;
9f0033c0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:80
  arg = modf(arg, &fi);
  p1 = &buf[CVTBUFSIZE];

  if (fi != 0) {
    p1 = &buf[CVTBUFSIZE];
    while (fi != 0) {
9f0033c4:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
9f0033c7:	d9 ee                	fldz   
9f0033c9:	df e9                	fucomip st,st(1)
9f0033cb:	7a 8d                	jp     9f00335a <cvt+0xbe>
9f0033cd:	d9 ee                	fldz   
9f0033cf:	df e9                	fucomip st,st(1)
9f0033d1:	dd d8                	fstp   st(0)
9f0033d3:	75 87                	jne    9f00335c <cvt+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:85
      fj = modf(fi / 10, &fi);
      *--p1 = (int)((fj + .03) * 10) + '0';
      r2++;
    }
    while (p1 < &buf[CVTBUFSIZE]) *p++ = *p1++;
9f0033d5:	eb 17                	jmp    9f0033ee <cvt+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:85 (discriminator 2)
9f0033d7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0033da:	8d 50 01             	lea    edx,[eax+0x1]
9f0033dd:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0033e0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0033e3:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0033e6:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
9f0033e9:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0033ec:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:85 (discriminator 1)
9f0033ee:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0033f1:	05 00 02 00 00       	add    eax,0x200
9f0033f6:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
9f0033f9:	77 dc                	ja     9f0033d7 <cvt+0x13b>
9f0033fb:	eb 32                	jmp    9f00342f <cvt+0x193>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:86
  } else if (arg > 0) {
9f0033fd:	dd 45 d0             	fld    QWORD PTR [ebp-0x30]
9f003400:	d9 ee                	fldz   
9f003402:	d9 c9                	fxch   st(1)
9f003404:	df e9                	fucomip st,st(1)
9f003406:	dd d8                	fstp   st(0)
9f003408:	76 25                	jbe    9f00342f <cvt+0x193>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:87
    while ((fj = arg * 10) < 1) {
9f00340a:	eb 0a                	jmp    9f003416 <cvt+0x17a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:88
      arg = fj;
9f00340c:	dd 45 d8             	fld    QWORD PTR [ebp-0x28]
9f00340f:	dd 5d d0             	fstp   QWORD PTR [ebp-0x30]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:89
      r2--;
9f003412:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:87
      *--p1 = (int)((fj + .03) * 10) + '0';
      r2++;
    }
    while (p1 < &buf[CVTBUFSIZE]) *p++ = *p1++;
  } else if (arg > 0) {
    while ((fj = arg * 10) < 1) {
9f003416:	dd 45 d0             	fld    QWORD PTR [ebp-0x30]
9f003419:	dd 83 9c fc ff ff    	fld    QWORD PTR [ebx-0x364]
9f00341f:	de c9                	fmulp  st(1),st
9f003421:	dd 5d d8             	fstp   QWORD PTR [ebp-0x28]
9f003424:	dd 45 d8             	fld    QWORD PTR [ebp-0x28]
9f003427:	d9 e8                	fld1   
9f003429:	df e9                	fucomip st,st(1)
9f00342b:	dd d8                	fstp   st(0)
9f00342d:	77 dd                	ja     9f00340c <cvt+0x170>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:92
      arg = fj;
      r2--;
    }
  }
  p1 = &buf[ndigits];
9f00342f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f003432:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003435:	01 d0                	add    eax,edx
9f003437:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:93
  if (eflag == 0) p1 += r2;
9f00343a:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
9f00343e:	75 06                	jne    9f003446 <cvt+0x1aa>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:93 (discriminator 1)
9f003440:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003443:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
  *decpt = r2;
9f003446:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f003449:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00344c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:95
  if (p1 < &buf[0]) {
9f00344e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003451:	3b 45 1c             	cmp    eax,DWORD PTR [ebp+0x1c]
9f003454:	73 64                	jae    9f0034ba <cvt+0x21e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:96
    buf[0] = '\0';
9f003456:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003459:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:97
    return buf;
9f00345c:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00345f:	e9 02 01 00 00       	jmp    9f003566 <cvt+0x2ca>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
  }
  while (p <= p1 && p < &buf[CVTBUFSIZE]) {
    arg *= 10;
9f003464:	dd 45 d0             	fld    QWORD PTR [ebp-0x30]
9f003467:	dd 83 9c fc ff ff    	fld    QWORD PTR [ebx-0x364]
9f00346d:	de c9                	fmulp  st(1),st
9f00346f:	dd 5d d0             	fstp   QWORD PTR [ebp-0x30]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:101
    arg = modf(arg, &fj);
9f003472:	83 ec 04             	sub    esp,0x4
9f003475:	8d 45 d8             	lea    eax,[ebp-0x28]
9f003478:	50                   	push   eax
9f003479:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f00347c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
9f00347f:	e8 3c 2d 00 00       	call   9f0061c0 <__x86.get_pc_thunk.ax+0x2e>
9f003484:	83 c4 10             	add    esp,0x10
9f003487:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
9f00348a:	db 45 c4             	fild   DWORD PTR [ebp-0x3c]
9f00348d:	dd 5d d0             	fstp   QWORD PTR [ebp-0x30]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:102
    *p++ = (int) fj + '0';
9f003490:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f003493:	8d 42 01             	lea    eax,[edx+0x1]
9f003496:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f003499:	dd 45 d8             	fld    QWORD PTR [ebp-0x28]
9f00349c:	d9 7d ce             	fnstcw WORD PTR [ebp-0x32]
9f00349f:	0f b7 45 ce          	movzx  eax,WORD PTR [ebp-0x32]
9f0034a3:	b4 0c                	mov    ah,0xc
9f0034a5:	66 89 45 cc          	mov    WORD PTR [ebp-0x34],ax
9f0034a9:	d9 6d cc             	fldcw  WORD PTR [ebp-0x34]
9f0034ac:	db 5d c8             	fistp  DWORD PTR [ebp-0x38]
9f0034af:	d9 6d ce             	fldcw  WORD PTR [ebp-0x32]
9f0034b2:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
9f0034b5:	83 c0 30             	add    eax,0x30
9f0034b8:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:99
  *decpt = r2;
  if (p1 < &buf[0]) {
    buf[0] = '\0';
    return buf;
  }
  while (p <= p1 && p < &buf[CVTBUFSIZE]) {
9f0034ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0034bd:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
9f0034c0:	77 0d                	ja     9f0034cf <cvt+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:99 (discriminator 1)
9f0034c2:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0034c5:	05 00 02 00 00       	add    eax,0x200
9f0034ca:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0034cd:	77 95                	ja     9f003464 <cvt+0x1c8>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:104
    arg *= 10;
    arg = modf(arg, &fj);
    *p++ = (int) fj + '0';
  }
  if (p1 >= &buf[CVTBUFSIZE]) {
9f0034cf:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0034d2:	05 00 02 00 00       	add    eax,0x200
9f0034d7:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
9f0034da:	77 10                	ja     9f0034ec <cvt+0x250>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:105
    buf[CVTBUFSIZE - 1] = '\0';
9f0034dc:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0034df:	05 ff 01 00 00       	add    eax,0x1ff
9f0034e4:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:106
    return buf;
9f0034e7:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0034ea:	eb 7a                	jmp    9f003566 <cvt+0x2ca>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:108
  }
  p = p1;
9f0034ec:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0034ef:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:109
  *p1 += 5;
9f0034f2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0034f5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0034f8:	83 c0 05             	add    eax,0x5
9f0034fb:	89 c2                	mov    edx,eax
9f0034fd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003500:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:110
  while (*p1 > '9') {
9f003502:	eb 4f                	jmp    9f003553 <cvt+0x2b7>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:111
    *p1 = '0';
9f003504:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003507:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:112
    if (p1 > buf) {
9f00350a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00350d:	3b 45 1c             	cmp    eax,DWORD PTR [ebp+0x1c]
9f003510:	76 16                	jbe    9f003528 <cvt+0x28c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:113
      ++*--p1;
9f003512:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
9f003516:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003519:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00351c:	83 c0 01             	add    eax,0x1
9f00351f:	89 c2                	mov    edx,eax
9f003521:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003524:	88 10                	mov    BYTE PTR [eax],dl
9f003526:	eb 2b                	jmp    9f003553 <cvt+0x2b7>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:115
    } else {
      *p1 = '1';
9f003528:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00352b:	c6 00 31             	mov    BYTE PTR [eax],0x31
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:116
      (*decpt)++;
9f00352e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f003531:	8b 00                	mov    eax,DWORD PTR [eax]
9f003533:	8d 50 01             	lea    edx,[eax+0x1]
9f003536:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f003539:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:117
      if (eflag == 0) {
9f00353b:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
9f00353f:	75 12                	jne    9f003553 <cvt+0x2b7>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:118
        if (p > buf) *p = '0';
9f003541:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003544:	3b 45 1c             	cmp    eax,DWORD PTR [ebp+0x1c]
9f003547:	76 06                	jbe    9f00354f <cvt+0x2b3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:118 (discriminator 1)
9f003549:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00354c:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119
        p++;
9f00354f:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:110
    buf[CVTBUFSIZE - 1] = '\0';
    return buf;
  }
  p = p1;
  *p1 += 5;
  while (*p1 > '9') {
9f003553:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003556:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003559:	3c 39                	cmp    al,0x39
9f00355b:	7f a7                	jg     9f003504 <cvt+0x268>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:123
        if (p > buf) *p = '0';
        p++;
      }
    }
  }
  *p = '\0';
9f00355d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003560:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:124
  return buf;
9f003563:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:125 (discriminator 1)
}
9f003566:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003569:	c9                   	leave  
9f00356a:	c3                   	ret    

9f00356b <skip_atoi>:
skip_atoi():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:133
  const char *sc;
  for (sc = s; *sc != '\0' && count--; ++sc);
  return sc - s;
}
*/
static int skip_atoi(const char **s) {
9f00356b:	55                   	push   ebp
9f00356c:	89 e5                	mov    ebp,esp
9f00356e:	53                   	push   ebx
9f00356f:	83 ec 10             	sub    esp,0x10
9f003572:	e8 1b 2c 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f003577:	05 65 5c 00 00       	add    eax,0x5c65
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:134
  int i = 0;
9f00357c:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:135
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
9f003583:	eb 29                	jmp    9f0035ae <skip_atoi+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:135 (discriminator 3)
9f003585:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f003588:	89 d0                	mov    eax,edx
9f00358a:	c1 e0 02             	shl    eax,0x2
9f00358d:	01 d0                	add    eax,edx
9f00358f:	01 c0                	add    eax,eax
9f003591:	89 c3                	mov    ebx,eax
9f003593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003596:	8b 00                	mov    eax,DWORD PTR [eax]
9f003598:	8d 48 01             	lea    ecx,[eax+0x1]
9f00359b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00359e:	89 0a                	mov    DWORD PTR [edx],ecx
9f0035a0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0035a3:	0f be c0             	movsx  eax,al
9f0035a6:	01 d8                	add    eax,ebx
9f0035a8:	83 e8 30             	sub    eax,0x30
9f0035ab:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:135 (discriminator 1)
9f0035ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035b1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0035b3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0035b6:	3c 2f                	cmp    al,0x2f
9f0035b8:	7e 0c                	jle    9f0035c6 <skip_atoi+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:135 (discriminator 2)
9f0035ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035bd:	8b 00                	mov    eax,DWORD PTR [eax]
9f0035bf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0035c2:	3c 39                	cmp    al,0x39
9f0035c4:	7e bf                	jle    9f003585 <skip_atoi+0x1a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:136
  return i;
9f0035c6:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:137
}
9f0035c9:	83 c4 10             	add    esp,0x10
9f0035cc:	5b                   	pop    ebx
9f0035cd:	5d                   	pop    ebp
9f0035ce:	c3                   	ret    

9f0035cf <number>:
number():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:139

static char *number(char *str, long num, int base, int size, int precision, int type) {
9f0035cf:	55                   	push   ebp
9f0035d0:	89 e5                	mov    ebp,esp
9f0035d2:	56                   	push   esi
9f0035d3:	53                   	push   ebx
9f0035d4:	83 ec 50             	sub    esp,0x50
9f0035d7:	e8 08 2c 00 00       	call   9f0061e4 <__x86.get_pc_thunk.cx>
9f0035dc:	81 c1 00 5c 00 00    	add    ecx,0x5c00
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:141
  char c, sign, tmp[66];
  char *dig = digits;
9f0035e2:	8b 81 20 00 00 00    	mov    eax,DWORD PTR [ecx+0x20]
9f0035e8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:144
  int i;

  if (type & LARGE)  dig = upper_digits;
9f0035eb:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0035ee:	83 e0 40             	and    eax,0x40
9f0035f1:	85 c0                	test   eax,eax
9f0035f3:	74 09                	je     9f0035fe <number+0x2f>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:144 (discriminator 1)
9f0035f5:	8b 81 24 00 00 00    	mov    eax,DWORD PTR [ecx+0x24]
9f0035fb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:145
  if (type & LEFT) type &= ~ZEROPAD;
9f0035fe:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003601:	83 e0 10             	and    eax,0x10
9f003604:	85 c0                	test   eax,eax
9f003606:	74 04                	je     9f00360c <number+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:145 (discriminator 1)
9f003608:	83 65 1c fe          	and    DWORD PTR [ebp+0x1c],0xfffffffe
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:146
  if (base < 2 || base > 36) return 0;
9f00360c:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f003610:	7e 06                	jle    9f003618 <number+0x49>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:146 (discriminator 2)
9f003612:	83 7d 10 24          	cmp    DWORD PTR [ebp+0x10],0x24
9f003616:	7e 0a                	jle    9f003622 <number+0x53>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:146 (discriminator 3)
9f003618:	b8 00 00 00 00       	mov    eax,0x0
9f00361d:	e9 ef 01 00 00       	jmp    9f003811 <number+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:148
  
  c = (type & ZEROPAD) ? '0' : ' ';
9f003622:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003625:	83 e0 01             	and    eax,0x1
9f003628:	85 c0                	test   eax,eax
9f00362a:	74 07                	je     9f003633 <number+0x64>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:148 (discriminator 1)
9f00362c:	b8 30 00 00 00       	mov    eax,0x30
9f003631:	eb 05                	jmp    9f003638 <number+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:148 (discriminator 2)
9f003633:	b8 20 00 00 00       	mov    eax,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:148 (discriminator 4)
9f003638:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:149 (discriminator 4)
  sign = 0;
9f00363b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:150 (discriminator 4)
  if (type & SIGN) {
9f00363f:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003642:	83 e0 02             	and    eax,0x2
9f003645:	85 c0                	test   eax,eax
9f003647:	74 39                	je     9f003682 <number+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:151
    if (num < 0) {
9f003649:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f00364d:	79 0d                	jns    9f00365c <number+0x8d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:152
      sign = '-';
9f00364f:	c6 45 f7 2d          	mov    BYTE PTR [ebp-0x9],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:153
      num = -num;
9f003653:	f7 5d 0c             	neg    DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:154
      size--;
9f003656:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f00365a:	eb 26                	jmp    9f003682 <number+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:155
    } else if (type & PLUS) {
9f00365c:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00365f:	83 e0 04             	and    eax,0x4
9f003662:	85 c0                	test   eax,eax
9f003664:	74 0a                	je     9f003670 <number+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:156
      sign = '+';
9f003666:	c6 45 f7 2b          	mov    BYTE PTR [ebp-0x9],0x2b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:157
      size--;
9f00366a:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f00366e:	eb 12                	jmp    9f003682 <number+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:158
    } else if (type & SPACE) {
9f003670:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003673:	83 e0 08             	and    eax,0x8
9f003676:	85 c0                	test   eax,eax
9f003678:	74 08                	je     9f003682 <number+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:159
      sign = ' ';
9f00367a:	c6 45 f7 20          	mov    BYTE PTR [ebp-0x9],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:160
      size--;
9f00367e:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:164
    }
  }

  if (type & SPECIAL) {
9f003682:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003685:	83 e0 20             	and    eax,0x20
9f003688:	85 c0                	test   eax,eax
9f00368a:	74 16                	je     9f0036a2 <number+0xd3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:165
    if (base == 16) {
9f00368c:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f003690:	75 06                	jne    9f003698 <number+0xc9>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:166
      size -= 2;
9f003692:	83 6d 14 02          	sub    DWORD PTR [ebp+0x14],0x2
9f003696:	eb 0a                	jmp    9f0036a2 <number+0xd3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:167
    } else if (base == 8) {
9f003698:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f00369c:	75 04                	jne    9f0036a2 <number+0xd3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:168
      size--;
9f00369e:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:172
    }
  }

  i = 0;
9f0036a2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:174

  if (num == 0) {
9f0036a9:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f0036ad:	75 42                	jne    9f0036f1 <number+0x122>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:175
    tmp[i++] = '0';
9f0036af:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0036b2:	8d 50 01             	lea    edx,[eax+0x1]
9f0036b5:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
9f0036b8:	c6 44 05 a9 30       	mov    BYTE PTR [ebp+eax*1-0x57],0x30
9f0036bd:	eb 38                	jmp    9f0036f7 <number+0x128>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178
  } else {
    while (num != 0) {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
9f0036bf:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
9f0036c2:	8d 43 01             	lea    eax,[ebx+0x1]
9f0036c5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f0036c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0036cb:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f0036ce:	ba 00 00 00 00       	mov    edx,0x0
9f0036d3:	f7 f6                	div    esi
9f0036d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0036d8:	01 d0                	add    eax,edx
9f0036da:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0036dd:	88 44 1d a9          	mov    BYTE PTR [ebp+ebx*1-0x57],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:179
      num = ((unsigned long) num) / (unsigned) base;
9f0036e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0036e4:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f0036e7:	ba 00 00 00 00       	mov    edx,0x0
9f0036ec:	f7 f6                	div    esi
9f0036ee:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:177
  i = 0;

  if (num == 0) {
    tmp[i++] = '0';
  } else {
    while (num != 0) {
9f0036f1:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f0036f5:	75 c8                	jne    9f0036bf <number+0xf0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:183
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
9f0036f7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0036fa:	3b 45 18             	cmp    eax,DWORD PTR [ebp+0x18]
9f0036fd:	7e 06                	jle    9f003705 <number+0x136>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:183 (discriminator 1)
9f0036ff:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003702:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:184
  size -= precision;
9f003705:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f003708:	29 45 14             	sub    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:185
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
9f00370b:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00370e:	83 e0 11             	and    eax,0x11
9f003711:	85 c0                	test   eax,eax
9f003713:	75 1b                	jne    9f003730 <number+0x161>
9f003715:	eb 0c                	jmp    9f003723 <number+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:185 (discriminator 2)
9f003717:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00371a:	8d 50 01             	lea    edx,[eax+0x1]
9f00371d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003720:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:185 (discriminator 1)
9f003723:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f003726:	8d 50 ff             	lea    edx,[eax-0x1]
9f003729:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f00372c:	85 c0                	test   eax,eax
9f00372e:	7f e7                	jg     9f003717 <number+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:186
  if (sign) *str++ = sign;
9f003730:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f003734:	74 0f                	je     9f003745 <number+0x176>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:186 (discriminator 1)
9f003736:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003739:	8d 50 01             	lea    edx,[eax+0x1]
9f00373c:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00373f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f003743:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:188
  
  if (type & SPECIAL) {
9f003745:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003748:	83 e0 20             	and    eax,0x20
9f00374b:	85 c0                	test   eax,eax
9f00374d:	74 3b                	je     9f00378a <number+0x1bb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
    if (base == 8) {
9f00374f:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f003753:	75 0e                	jne    9f003763 <number+0x194>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:190
      *str++ = '0';
9f003755:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003758:	8d 50 01             	lea    edx,[eax+0x1]
9f00375b:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00375e:	c6 00 30             	mov    BYTE PTR [eax],0x30
9f003761:	eb 27                	jmp    9f00378a <number+0x1bb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:191
    } else if (base == 16) {
9f003763:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f003767:	75 21                	jne    9f00378a <number+0x1bb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:192
      *str++ = '0';
9f003769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00376c:	8d 50 01             	lea    edx,[eax+0x1]
9f00376f:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003772:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:193
      *str++ = digits[33];
9f003775:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003778:	8d 50 01             	lea    edx,[eax+0x1]
9f00377b:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00377e:	8b 91 20 00 00 00    	mov    edx,DWORD PTR [ecx+0x20]
9f003784:	0f b6 52 21          	movzx  edx,BYTE PTR [edx+0x21]
9f003788:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:197
    }
  }

  if (!(type & LEFT)) while (size-- > 0) *str++ = c;
9f00378a:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00378d:	83 e0 10             	and    eax,0x10
9f003790:	85 c0                	test   eax,eax
9f003792:	75 2c                	jne    9f0037c0 <number+0x1f1>
9f003794:	eb 0f                	jmp    9f0037a5 <number+0x1d6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:197 (discriminator 2)
9f003796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003799:	8d 50 01             	lea    edx,[eax+0x1]
9f00379c:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00379f:	0f b6 55 eb          	movzx  edx,BYTE PTR [ebp-0x15]
9f0037a3:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:197 (discriminator 1)
9f0037a5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f0037a8:	8d 50 ff             	lea    edx,[eax-0x1]
9f0037ab:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f0037ae:	85 c0                	test   eax,eax
9f0037b0:	7f e4                	jg     9f003796 <number+0x1c7>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:198
  while (i < precision--) *str++ = '0';
9f0037b2:	eb 0c                	jmp    9f0037c0 <number+0x1f1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:198 (discriminator 2)
9f0037b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037b7:	8d 50 01             	lea    edx,[eax+0x1]
9f0037ba:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0037bd:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:198 (discriminator 1)
9f0037c0:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f0037c3:	8d 50 ff             	lea    edx,[eax-0x1]
9f0037c6:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
9f0037c9:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
9f0037cc:	7f e6                	jg     9f0037b4 <number+0x1e5>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:199
  while (i-- > 0) *str++ = tmp[i];
9f0037ce:	eb 16                	jmp    9f0037e6 <number+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:199 (discriminator 2)
9f0037d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037d3:	8d 50 01             	lea    edx,[eax+0x1]
9f0037d6:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0037d9:	8d 4d a9             	lea    ecx,[ebp-0x57]
9f0037dc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0037df:	01 ca                	add    edx,ecx
9f0037e1:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0037e4:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:199 (discriminator 1)
9f0037e6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0037e9:	8d 50 ff             	lea    edx,[eax-0x1]
9f0037ec:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
9f0037ef:	85 c0                	test   eax,eax
9f0037f1:	7f dd                	jg     9f0037d0 <number+0x201>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:200
  while (size-- > 0) *str++ = ' ';
9f0037f3:	eb 0c                	jmp    9f003801 <number+0x232>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:200 (discriminator 2)
9f0037f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037f8:	8d 50 01             	lea    edx,[eax+0x1]
9f0037fb:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0037fe:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:200 (discriminator 1)
9f003801:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f003804:	8d 50 ff             	lea    edx,[eax-0x1]
9f003807:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f00380a:	85 c0                	test   eax,eax
9f00380c:	7f e7                	jg     9f0037f5 <number+0x226>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:202

  return str;
9f00380e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:203 (discriminator 1)
}
9f003811:	83 c4 50             	add    esp,0x50
9f003814:	5b                   	pop    ebx
9f003815:	5e                   	pop    esi
9f003816:	5d                   	pop    ebp
9f003817:	c3                   	ret    

9f003818 <eaddr>:
eaddr():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:205

static char *eaddr(char *str, unsigned char *addr, int size, int precision, int type) {
9f003818:	55                   	push   ebp
9f003819:	89 e5                	mov    ebp,esp
9f00381b:	83 ec 30             	sub    esp,0x30
9f00381e:	e8 6f 29 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f003823:	05 b9 59 00 00       	add    eax,0x59b9
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:207
  char tmp[24];
  char *dig = digits;
9f003828:	8b 90 20 00 00 00    	mov    edx,DWORD PTR [eax+0x20]
9f00382e:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:210
  int i, len;

  if (type & LARGE)  dig = upper_digits;
9f003831:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
9f003834:	83 e2 40             	and    edx,0x40
9f003837:	85 d2                	test   edx,edx
9f003839:	74 09                	je     9f003844 <eaddr+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:210 (discriminator 1)
9f00383b:	8b 80 24 00 00 00    	mov    eax,DWORD PTR [eax+0x24]
9f003841:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:211
  len = 0;
9f003844:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:212
  for (i = 0; i < 6; i++) {
9f00384b:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
9f003852:	eb 66                	jmp    9f0038ba <eaddr+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:213
    if (i != 0) tmp[len++] = ':';
9f003854:	83 7d f8 00          	cmp    DWORD PTR [ebp-0x8],0x0
9f003858:	74 0e                	je     9f003868 <eaddr+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:213 (discriminator 1)
9f00385a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00385d:	8d 50 01             	lea    edx,[eax+0x1]
9f003860:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003863:	c6 44 05 dc 3a       	mov    BYTE PTR [ebp+eax*1-0x24],0x3a
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:214 (discriminator 2)
    tmp[len++] = dig[addr[i] >> 4];
9f003868:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00386b:	8d 50 01             	lea    edx,[eax+0x1]
9f00386e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003871:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
9f003874:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003877:	01 ca                	add    edx,ecx
9f003879:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f00387c:	c0 ea 04             	shr    dl,0x4
9f00387f:	0f b6 ca             	movzx  ecx,dl
9f003882:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f003885:	01 ca                	add    edx,ecx
9f003887:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f00388a:	88 54 05 dc          	mov    BYTE PTR [ebp+eax*1-0x24],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:215 (discriminator 2)
    tmp[len++] = dig[addr[i] & 0x0F];
9f00388e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003891:	8d 50 01             	lea    edx,[eax+0x1]
9f003894:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003897:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
9f00389a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00389d:	01 ca                	add    edx,ecx
9f00389f:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0038a2:	0f b6 d2             	movzx  edx,dl
9f0038a5:	89 d1                	mov    ecx,edx
9f0038a7:	83 e1 0f             	and    ecx,0xf
9f0038aa:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0038ad:	01 ca                	add    edx,ecx
9f0038af:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0038b2:	88 54 05 dc          	mov    BYTE PTR [ebp+eax*1-0x24],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:212 (discriminator 2)
  char *dig = digits;
  int i, len;

  if (type & LARGE)  dig = upper_digits;
  len = 0;
  for (i = 0; i < 6; i++) {
9f0038b6:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:212 (discriminator 1)
9f0038ba:	83 7d f8 05          	cmp    DWORD PTR [ebp-0x8],0x5
9f0038be:	7e 94                	jle    9f003854 <eaddr+0x3c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:218
    if (i != 0) tmp[len++] = ':';
    tmp[len++] = dig[addr[i] >> 4];
    tmp[len++] = dig[addr[i] & 0x0F];
  }

  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
9f0038c0:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f0038c3:	83 e0 10             	and    eax,0x10
9f0038c6:	85 c0                	test   eax,eax
9f0038c8:	75 1c                	jne    9f0038e6 <eaddr+0xce>
9f0038ca:	eb 0c                	jmp    9f0038d8 <eaddr+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:218 (discriminator 2)
9f0038cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0038cf:	8d 50 01             	lea    edx,[eax+0x1]
9f0038d2:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0038d5:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:218 (discriminator 1)
9f0038d8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0038db:	8d 50 ff             	lea    edx,[eax-0x1]
9f0038de:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0038e1:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0038e4:	7f e6                	jg     9f0038cc <eaddr+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:219
  for (i = 0; i < len; ++i) *str++ = tmp[i];
9f0038e6:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
9f0038ed:	eb 1a                	jmp    9f003909 <eaddr+0xf1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:219 (discriminator 3)
9f0038ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0038f2:	8d 50 01             	lea    edx,[eax+0x1]
9f0038f5:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0038f8:	8d 4d dc             	lea    ecx,[ebp-0x24]
9f0038fb:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0038fe:	01 ca                	add    edx,ecx
9f003900:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003903:	88 10                	mov    BYTE PTR [eax],dl
9f003905:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:219 (discriminator 1)
9f003909:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f00390c:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f00390f:	7c de                	jl     9f0038ef <eaddr+0xd7>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:220
  while (len < size--) *str++ = ' ';
9f003911:	eb 0c                	jmp    9f00391f <eaddr+0x107>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:220 (discriminator 2)
9f003913:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003916:	8d 50 01             	lea    edx,[eax+0x1]
9f003919:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00391c:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:220 (discriminator 1)
9f00391f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003922:	8d 50 ff             	lea    edx,[eax-0x1]
9f003925:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003928:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f00392b:	7f e6                	jg     9f003913 <eaddr+0xfb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:222

  return str;
9f00392d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:223
}
9f003930:	c9                   	leave  
9f003931:	c3                   	ret    

9f003932 <iaddr>:
iaddr():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:225

static char *iaddr(char *str, unsigned char *addr, int size, int precision, int type) {
9f003932:	55                   	push   ebp
9f003933:	89 e5                	mov    ebp,esp
9f003935:	57                   	push   edi
9f003936:	56                   	push   esi
9f003937:	53                   	push   ebx
9f003938:	83 ec 30             	sub    esp,0x30
9f00393b:	e8 a4 28 00 00       	call   9f0061e4 <__x86.get_pc_thunk.cx>
9f003940:	81 c1 9c 58 00 00    	add    ecx,0x589c
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:229
  char tmp[24];
  int i, n, len;

  len = 0;
9f003946:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:230
  for (i = 0; i < 4; i++) {
9f00394d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f003954:	e9 75 01 00 00       	jmp    9f003ace <iaddr+0x19c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:231
    if (i != 0) tmp[len++] = '.';
9f003959:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00395d:	74 0e                	je     9f00396d <iaddr+0x3b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:231 (discriminator 1)
9f00395f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f003962:	8d 50 01             	lea    edx,[eax+0x1]
9f003965:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f003968:	c6 44 05 d0 2e       	mov    BYTE PTR [ebp+eax*1-0x30],0x2e
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:232
    n = addr[i];
9f00396d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f003970:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003973:	01 d0                	add    eax,edx
9f003975:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003978:	0f b6 c0             	movzx  eax,al
9f00397b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:234
    
    if (n == 0) {
9f00397e:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f003982:	75 1b                	jne    9f00399f <iaddr+0x6d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:235
      tmp[len++] = digits[0];
9f003984:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f003987:	8d 50 01             	lea    edx,[eax+0x1]
9f00398a:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f00398d:	8b 91 20 00 00 00    	mov    edx,DWORD PTR [ecx+0x20]
9f003993:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003996:	88 54 05 d0          	mov    BYTE PTR [ebp+eax*1-0x30],dl
9f00399a:	e9 2b 01 00 00       	jmp    9f003aca <iaddr+0x198>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:237
    } else {
      if (n >= 100) {
9f00399f:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
9f0039a3:	0f 8e aa 00 00 00    	jle    9f003a53 <iaddr+0x121>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:238
        tmp[len++] = digits[n / 100];
9f0039a9:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
9f0039ac:	8d 43 01             	lea    eax,[ebx+0x1]
9f0039af:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f0039b2:	8b b9 20 00 00 00    	mov    edi,DWORD PTR [ecx+0x20]
9f0039b8:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
9f0039bb:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0039c0:	89 f0                	mov    eax,esi
9f0039c2:	f7 ea                	imul   edx
9f0039c4:	c1 fa 05             	sar    edx,0x5
9f0039c7:	89 f0                	mov    eax,esi
9f0039c9:	c1 f8 1f             	sar    eax,0x1f
9f0039cc:	29 c2                	sub    edx,eax
9f0039ce:	89 d0                	mov    eax,edx
9f0039d0:	01 f8                	add    eax,edi
9f0039d2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0039d5:	88 44 1d d0          	mov    BYTE PTR [ebp+ebx*1-0x30],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:239
        n = n % 100;
9f0039d9:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
9f0039dc:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0039e1:	89 d8                	mov    eax,ebx
9f0039e3:	f7 ea                	imul   edx
9f0039e5:	c1 fa 05             	sar    edx,0x5
9f0039e8:	89 d8                	mov    eax,ebx
9f0039ea:	c1 f8 1f             	sar    eax,0x1f
9f0039ed:	29 c2                	sub    edx,eax
9f0039ef:	89 d0                	mov    eax,edx
9f0039f1:	6b c0 64             	imul   eax,eax,0x64
9f0039f4:	29 c3                	sub    ebx,eax
9f0039f6:	89 d8                	mov    eax,ebx
9f0039f8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:240
        tmp[len++] = digits[n / 10];
9f0039fb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
9f0039fe:	8d 43 01             	lea    eax,[ebx+0x1]
9f003a01:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f003a04:	8b b9 20 00 00 00    	mov    edi,DWORD PTR [ecx+0x20]
9f003a0a:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
9f003a0d:	ba 67 66 66 66       	mov    edx,0x66666667
9f003a12:	89 f0                	mov    eax,esi
9f003a14:	f7 ea                	imul   edx
9f003a16:	c1 fa 02             	sar    edx,0x2
9f003a19:	89 f0                	mov    eax,esi
9f003a1b:	c1 f8 1f             	sar    eax,0x1f
9f003a1e:	29 c2                	sub    edx,eax
9f003a20:	89 d0                	mov    eax,edx
9f003a22:	01 f8                	add    eax,edi
9f003a24:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003a27:	88 44 1d d0          	mov    BYTE PTR [ebp+ebx*1-0x30],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:241
        n = n % 10;
9f003a2b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
9f003a2e:	ba 67 66 66 66       	mov    edx,0x66666667
9f003a33:	89 d8                	mov    eax,ebx
9f003a35:	f7 ea                	imul   edx
9f003a37:	c1 fa 02             	sar    edx,0x2
9f003a3a:	89 d8                	mov    eax,ebx
9f003a3c:	c1 f8 1f             	sar    eax,0x1f
9f003a3f:	29 c2                	sub    edx,eax
9f003a41:	89 d0                	mov    eax,edx
9f003a43:	c1 e0 02             	shl    eax,0x2
9f003a46:	01 d0                	add    eax,edx
9f003a48:	01 c0                	add    eax,eax
9f003a4a:	29 c3                	sub    ebx,eax
9f003a4c:	89 d8                	mov    eax,ebx
9f003a4e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f003a51:	eb 5c                	jmp    9f003aaf <iaddr+0x17d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:242
      } else if (n >= 10) {
9f003a53:	83 7d ec 09          	cmp    DWORD PTR [ebp-0x14],0x9
9f003a57:	7e 56                	jle    9f003aaf <iaddr+0x17d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:243
        tmp[len++] = digits[n / 10];
9f003a59:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
9f003a5c:	8d 43 01             	lea    eax,[ebx+0x1]
9f003a5f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f003a62:	8b b9 20 00 00 00    	mov    edi,DWORD PTR [ecx+0x20]
9f003a68:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
9f003a6b:	ba 67 66 66 66       	mov    edx,0x66666667
9f003a70:	89 f0                	mov    eax,esi
9f003a72:	f7 ea                	imul   edx
9f003a74:	c1 fa 02             	sar    edx,0x2
9f003a77:	89 f0                	mov    eax,esi
9f003a79:	c1 f8 1f             	sar    eax,0x1f
9f003a7c:	29 c2                	sub    edx,eax
9f003a7e:	89 d0                	mov    eax,edx
9f003a80:	01 f8                	add    eax,edi
9f003a82:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003a85:	88 44 1d d0          	mov    BYTE PTR [ebp+ebx*1-0x30],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:244
        n = n % 10;
9f003a89:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
9f003a8c:	ba 67 66 66 66       	mov    edx,0x66666667
9f003a91:	89 d8                	mov    eax,ebx
9f003a93:	f7 ea                	imul   edx
9f003a95:	c1 fa 02             	sar    edx,0x2
9f003a98:	89 d8                	mov    eax,ebx
9f003a9a:	c1 f8 1f             	sar    eax,0x1f
9f003a9d:	29 c2                	sub    edx,eax
9f003a9f:	89 d0                	mov    eax,edx
9f003aa1:	c1 e0 02             	shl    eax,0x2
9f003aa4:	01 d0                	add    eax,edx
9f003aa6:	01 c0                	add    eax,eax
9f003aa8:	29 c3                	sub    ebx,eax
9f003aaa:	89 d8                	mov    eax,ebx
9f003aac:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:247
      }

      tmp[len++] = digits[n];
9f003aaf:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f003ab2:	8d 50 01             	lea    edx,[eax+0x1]
9f003ab5:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f003ab8:	8b 99 20 00 00 00    	mov    ebx,DWORD PTR [ecx+0x20]
9f003abe:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f003ac1:	01 da                	add    edx,ebx
9f003ac3:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003ac6:	88 54 05 d0          	mov    BYTE PTR [ebp+eax*1-0x30],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:230 (discriminator 2)
static char *iaddr(char *str, unsigned char *addr, int size, int precision, int type) {
  char tmp[24];
  int i, n, len;

  len = 0;
  for (i = 0; i < 4; i++) {
9f003aca:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:230 (discriminator 1)
9f003ace:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
9f003ad2:	0f 8e 81 fe ff ff    	jle    9f003959 <iaddr+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:251

      tmp[len++] = digits[n];
    }
  }

  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
9f003ad8:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f003adb:	83 e0 10             	and    eax,0x10
9f003ade:	85 c0                	test   eax,eax
9f003ae0:	75 1c                	jne    9f003afe <iaddr+0x1cc>
9f003ae2:	eb 0c                	jmp    9f003af0 <iaddr+0x1be>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:251 (discriminator 2)
9f003ae4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003ae7:	8d 50 01             	lea    edx,[eax+0x1]
9f003aea:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003aed:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:251 (discriminator 1)
9f003af0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003af3:	8d 50 ff             	lea    edx,[eax-0x1]
9f003af6:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003af9:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f003afc:	7f e6                	jg     9f003ae4 <iaddr+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:252
  for (i = 0; i < len; ++i) *str++ = tmp[i];
9f003afe:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f003b05:	eb 1a                	jmp    9f003b21 <iaddr+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:252 (discriminator 3)
9f003b07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b0a:	8d 50 01             	lea    edx,[eax+0x1]
9f003b0d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003b10:	8d 4d d0             	lea    ecx,[ebp-0x30]
9f003b13:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f003b16:	01 ca                	add    edx,ecx
9f003b18:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003b1b:	88 10                	mov    BYTE PTR [eax],dl
9f003b1d:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:252 (discriminator 1)
9f003b21:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003b24:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f003b27:	7c de                	jl     9f003b07 <iaddr+0x1d5>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:253
  while (len < size--) *str++ = ' ';
9f003b29:	eb 0c                	jmp    9f003b37 <iaddr+0x205>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:253 (discriminator 2)
9f003b2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b2e:	8d 50 01             	lea    edx,[eax+0x1]
9f003b31:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003b34:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:253 (discriminator 1)
9f003b37:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003b3a:	8d 50 ff             	lea    edx,[eax-0x1]
9f003b3d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003b40:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f003b43:	7f e6                	jg     9f003b2b <iaddr+0x1f9>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:255

  return str;
9f003b45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:256
}
9f003b48:	83 c4 30             	add    esp,0x30
9f003b4b:	5b                   	pop    ebx
9f003b4c:	5e                   	pop    esi
9f003b4d:	5f                   	pop    edi
9f003b4e:	5d                   	pop    ebp
9f003b4f:	c3                   	ret    

9f003b50 <cfltcvt>:
cfltcvt():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:263
#ifndef NOFLOAT

char *ecvtbuf(double arg, int ndigits, int *decpt, int *sign, char *buf);
char *fcvtbuf(double arg, int ndigits, int *decpt, int *sign, char *buf);

static void cfltcvt(double value, char *buffer, char fmt, int precision) {
9f003b50:	55                   	push   ebp
9f003b51:	89 e5                	mov    ebp,esp
9f003b53:	53                   	push   ebx
9f003b54:	81 ec 34 02 00 00    	sub    esp,0x234
9f003b5a:	e8 81 26 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f003b5f:	81 c3 7d 56 00 00    	add    ebx,0x567d
9f003b65:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f003b68:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003b6b:	89 95 d0 fd ff ff    	mov    DWORD PTR [ebp-0x230],edx
9f003b71:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003b74:	89 95 d4 fd ff ff    	mov    DWORD PTR [ebp-0x22c],edx
9f003b7a:	88 85 cc fd ff ff    	mov    BYTE PTR [ebp-0x234],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:265
  int decpt, sign, exp, pos;
  char *digits = NULL;
9f003b80:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:267
  char cvtbuf[512];
  int capexp = 0;
9f003b87:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:270
  int magnitude;

  if (fmt == 'G' || fmt == 'E') {
9f003b8e:	80 bd cc fd ff ff 47 	cmp    BYTE PTR [ebp-0x234],0x47
9f003b95:	74 09                	je     9f003ba0 <cfltcvt+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:270 (discriminator 1)
9f003b97:	80 bd cc fd ff ff 45 	cmp    BYTE PTR [ebp-0x234],0x45
9f003b9e:	75 17                	jne    9f003bb7 <cfltcvt+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:271
    capexp = 1;
9f003ba0:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:272
    fmt += 'a' - 'A';
9f003ba7:	0f b6 85 cc fd ff ff 	movzx  eax,BYTE PTR [ebp-0x234]
9f003bae:	83 c0 20             	add    eax,0x20
9f003bb1:	88 85 cc fd ff ff    	mov    BYTE PTR [ebp-0x234],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:275
  }

  if (fmt == 'g') {
9f003bb7:	80 bd cc fd ff ff 67 	cmp    BYTE PTR [ebp-0x234],0x67
9f003bbe:	75 60                	jne    9f003c20 <cfltcvt+0xd0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:276
    digits = ecvtbuf(value, precision, &decpt, &sign, cvtbuf);
9f003bc0:	83 ec 08             	sub    esp,0x8
9f003bc3:	8d 85 dc fd ff ff    	lea    eax,[ebp-0x224]
9f003bc9:	50                   	push   eax
9f003bca:	8d 45 dc             	lea    eax,[ebp-0x24]
9f003bcd:	50                   	push   eax
9f003bce:	8d 45 e0             	lea    eax,[ebp-0x20]
9f003bd1:	50                   	push   eax
9f003bd2:	ff 75 18             	push   DWORD PTR [ebp+0x18]
9f003bd5:	ff b5 d4 fd ff ff    	push   DWORD PTR [ebp-0x22c]
9f003bdb:	ff b5 d0 fd ff ff    	push   DWORD PTR [ebp-0x230]
9f003be1:	e8 1e 0c 00 00       	call   9f004804 <ecvtbuf>
9f003be6:	83 c4 20             	add    esp,0x20
9f003be9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:277
    magnitude = decpt - 1;
9f003bec:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003bef:	83 e8 01             	sub    eax,0x1
9f003bf2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:278
    if (magnitude < -4  ||  magnitude > precision - 1) {
9f003bf5:	83 7d e4 fc          	cmp    DWORD PTR [ebp-0x1c],0xfffffffc
9f003bf9:	7c 0b                	jl     9f003c06 <cfltcvt+0xb6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:278 (discriminator 1)
9f003bfb:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f003bfe:	83 e8 01             	sub    eax,0x1
9f003c01:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
9f003c04:	7d 0d                	jge    9f003c13 <cfltcvt+0xc3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:279
      fmt = 'e';
9f003c06:	c6 85 cc fd ff ff 65 	mov    BYTE PTR [ebp-0x234],0x65
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:280
      precision -= 1;
9f003c0d:	83 6d 18 01          	sub    DWORD PTR [ebp+0x18],0x1
9f003c11:	eb 0d                	jmp    9f003c20 <cfltcvt+0xd0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:282
    } else {
      fmt = 'f';
9f003c13:	c6 85 cc fd ff ff 66 	mov    BYTE PTR [ebp-0x234],0x66
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:283
      precision -= decpt;
9f003c1a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003c1d:	29 45 18             	sub    DWORD PTR [ebp+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:287
    }
  }

  if (fmt == 'e') {
9f003c20:	80 bd cc fd ff ff 65 	cmp    BYTE PTR [ebp-0x234],0x65
9f003c27:	0f 85 d1 01 00 00    	jne    9f003dfe <cfltcvt+0x2ae>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:288
    digits = ecvtbuf(value, precision + 1, &decpt, &sign, cvtbuf);
9f003c2d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f003c30:	8d 50 01             	lea    edx,[eax+0x1]
9f003c33:	83 ec 08             	sub    esp,0x8
9f003c36:	8d 85 dc fd ff ff    	lea    eax,[ebp-0x224]
9f003c3c:	50                   	push   eax
9f003c3d:	8d 45 dc             	lea    eax,[ebp-0x24]
9f003c40:	50                   	push   eax
9f003c41:	8d 45 e0             	lea    eax,[ebp-0x20]
9f003c44:	50                   	push   eax
9f003c45:	52                   	push   edx
9f003c46:	ff b5 d4 fd ff ff    	push   DWORD PTR [ebp-0x22c]
9f003c4c:	ff b5 d0 fd ff ff    	push   DWORD PTR [ebp-0x230]
9f003c52:	e8 ad 0b 00 00       	call   9f004804 <ecvtbuf>
9f003c57:	83 c4 20             	add    esp,0x20
9f003c5a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:290

    if (sign) *buffer++ = '-';
9f003c5d:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f003c60:	85 c0                	test   eax,eax
9f003c62:	74 0c                	je     9f003c70 <cfltcvt+0x120>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:290 (discriminator 1)
9f003c64:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003c67:	8d 50 01             	lea    edx,[eax+0x1]
9f003c6a:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003c6d:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:291
    *buffer++ = *digits;
9f003c70:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003c73:	8d 50 01             	lea    edx,[eax+0x1]
9f003c76:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003c79:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f003c7c:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003c7f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:292
    if (precision > 0) *buffer++ = '.';
9f003c81:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
9f003c85:	7e 0c                	jle    9f003c93 <cfltcvt+0x143>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:292 (discriminator 1)
9f003c87:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003c8a:	8d 50 01             	lea    edx,[eax+0x1]
9f003c8d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003c90:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:293
    memcpy(buffer, digits + 1, precision);
9f003c93:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f003c96:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f003c99:	83 c2 01             	add    edx,0x1
9f003c9c:	83 ec 04             	sub    esp,0x4
9f003c9f:	50                   	push   eax
9f003ca0:	52                   	push   edx
9f003ca1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f003ca4:	e8 07 25 00 00       	call   9f0061b0 <__x86.get_pc_thunk.ax+0x1e>
9f003ca9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:294
    buffer += precision;
9f003cac:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f003caf:	01 45 10             	add    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:295
    *buffer++ = capexp ? 'E' : 'e';
9f003cb2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003cb5:	8d 50 01             	lea    edx,[eax+0x1]
9f003cb8:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003cbb:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f003cbf:	74 07                	je     9f003cc8 <cfltcvt+0x178>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:295 (discriminator 1)
9f003cc1:	ba 45 00 00 00       	mov    edx,0x45
9f003cc6:	eb 05                	jmp    9f003ccd <cfltcvt+0x17d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:295 (discriminator 2)
9f003cc8:	ba 65 00 00 00       	mov    edx,0x65
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:295 (discriminator 4)
9f003ccd:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:297 (discriminator 4)

    if (decpt == 0) {
9f003ccf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003cd2:	85 c0                	test   eax,eax
9f003cd4:	75 2e                	jne    9f003d04 <cfltcvt+0x1b4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:298
      if (value == 0.0) {
9f003cd6:	dd 85 d0 fd ff ff    	fld    QWORD PTR [ebp-0x230]
9f003cdc:	d9 ee                	fldz   
9f003cde:	df e9                	fucomip st,st(1)
9f003ce0:	dd d8                	fstp   st(0)
9f003ce2:	7a 17                	jp     9f003cfb <cfltcvt+0x1ab>
9f003ce4:	dd 85 d0 fd ff ff    	fld    QWORD PTR [ebp-0x230]
9f003cea:	d9 ee                	fldz   
9f003cec:	df e9                	fucomip st,st(1)
9f003cee:	dd d8                	fstp   st(0)
9f003cf0:	75 09                	jne    9f003cfb <cfltcvt+0x1ab>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:299
        exp = 0;
9f003cf2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f003cf9:	eb 12                	jmp    9f003d0d <cfltcvt+0x1bd>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:301
      } else {
        exp = -1;
9f003cfb:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
9f003d02:	eb 09                	jmp    9f003d0d <cfltcvt+0x1bd>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:304
      }
    } else {
      exp = decpt - 1;
9f003d04:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003d07:	83 e8 01             	sub    eax,0x1
9f003d0a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:307
    }

    if (exp < 0) {
9f003d0d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f003d11:	79 11                	jns    9f003d24 <cfltcvt+0x1d4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:308
      *buffer++ = '-';
9f003d13:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003d16:	8d 50 01             	lea    edx,[eax+0x1]
9f003d19:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003d1c:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:309
      exp = -exp;
9f003d1f:	f7 5d f4             	neg    DWORD PTR [ebp-0xc]
9f003d22:	eb 0c                	jmp    9f003d30 <cfltcvt+0x1e0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:311
    } else {
      *buffer++ = '+';
9f003d24:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003d27:	8d 50 01             	lea    edx,[eax+0x1]
9f003d2a:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003d2d:	c6 00 2b             	mov    BYTE PTR [eax],0x2b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:314
    }

    buffer[2] = (exp % 10) + '0';
9f003d30:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003d33:	8d 58 02             	lea    ebx,[eax+0x2]
9f003d36:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003d39:	ba 67 66 66 66       	mov    edx,0x66666667
9f003d3e:	89 c8                	mov    eax,ecx
9f003d40:	f7 ea                	imul   edx
9f003d42:	c1 fa 02             	sar    edx,0x2
9f003d45:	89 c8                	mov    eax,ecx
9f003d47:	c1 f8 1f             	sar    eax,0x1f
9f003d4a:	29 c2                	sub    edx,eax
9f003d4c:	89 d0                	mov    eax,edx
9f003d4e:	c1 e0 02             	shl    eax,0x2
9f003d51:	01 d0                	add    eax,edx
9f003d53:	01 c0                	add    eax,eax
9f003d55:	29 c1                	sub    ecx,eax
9f003d57:	89 ca                	mov    edx,ecx
9f003d59:	89 d0                	mov    eax,edx
9f003d5b:	83 c0 30             	add    eax,0x30
9f003d5e:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:315
    exp = exp / 10;
9f003d60:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003d63:	ba 67 66 66 66       	mov    edx,0x66666667
9f003d68:	89 c8                	mov    eax,ecx
9f003d6a:	f7 ea                	imul   edx
9f003d6c:	c1 fa 02             	sar    edx,0x2
9f003d6f:	89 c8                	mov    eax,ecx
9f003d71:	c1 f8 1f             	sar    eax,0x1f
9f003d74:	29 c2                	sub    edx,eax
9f003d76:	89 d0                	mov    eax,edx
9f003d78:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:316
    buffer[1] = (exp % 10) + '0';
9f003d7b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003d7e:	8d 58 01             	lea    ebx,[eax+0x1]
9f003d81:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003d84:	ba 67 66 66 66       	mov    edx,0x66666667
9f003d89:	89 c8                	mov    eax,ecx
9f003d8b:	f7 ea                	imul   edx
9f003d8d:	c1 fa 02             	sar    edx,0x2
9f003d90:	89 c8                	mov    eax,ecx
9f003d92:	c1 f8 1f             	sar    eax,0x1f
9f003d95:	29 c2                	sub    edx,eax
9f003d97:	89 d0                	mov    eax,edx
9f003d99:	c1 e0 02             	shl    eax,0x2
9f003d9c:	01 d0                	add    eax,edx
9f003d9e:	01 c0                	add    eax,eax
9f003da0:	29 c1                	sub    ecx,eax
9f003da2:	89 ca                	mov    edx,ecx
9f003da4:	89 d0                	mov    eax,edx
9f003da6:	83 c0 30             	add    eax,0x30
9f003da9:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:317
    exp = exp / 10;
9f003dab:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003dae:	ba 67 66 66 66       	mov    edx,0x66666667
9f003db3:	89 c8                	mov    eax,ecx
9f003db5:	f7 ea                	imul   edx
9f003db7:	c1 fa 02             	sar    edx,0x2
9f003dba:	89 c8                	mov    eax,ecx
9f003dbc:	c1 f8 1f             	sar    eax,0x1f
9f003dbf:	29 c2                	sub    edx,eax
9f003dc1:	89 d0                	mov    eax,edx
9f003dc3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:318
    buffer[0] = (exp % 10) + '0';
9f003dc6:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003dc9:	ba 67 66 66 66       	mov    edx,0x66666667
9f003dce:	89 c8                	mov    eax,ecx
9f003dd0:	f7 ea                	imul   edx
9f003dd2:	c1 fa 02             	sar    edx,0x2
9f003dd5:	89 c8                	mov    eax,ecx
9f003dd7:	c1 f8 1f             	sar    eax,0x1f
9f003dda:	29 c2                	sub    edx,eax
9f003ddc:	89 d0                	mov    eax,edx
9f003dde:	c1 e0 02             	shl    eax,0x2
9f003de1:	01 d0                	add    eax,edx
9f003de3:	01 c0                	add    eax,eax
9f003de5:	29 c1                	sub    ecx,eax
9f003de7:	89 ca                	mov    edx,ecx
9f003de9:	89 d0                	mov    eax,edx
9f003deb:	83 c0 30             	add    eax,0x30
9f003dee:	89 c2                	mov    edx,eax
9f003df0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003df3:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:319
    buffer += 3;
9f003df5:	83 45 10 03          	add    DWORD PTR [ebp+0x10],0x3
9f003df9:	e9 4b 01 00 00       	jmp    9f003f49 <cfltcvt+0x3f9>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:320
  } else if (fmt == 'f') {
9f003dfe:	80 bd cc fd ff ff 66 	cmp    BYTE PTR [ebp-0x234],0x66
9f003e05:	0f 85 3e 01 00 00    	jne    9f003f49 <cfltcvt+0x3f9>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:321
    digits = fcvtbuf(value, precision, &decpt, &sign, cvtbuf);
9f003e0b:	83 ec 08             	sub    esp,0x8
9f003e0e:	8d 85 dc fd ff ff    	lea    eax,[ebp-0x224]
9f003e14:	50                   	push   eax
9f003e15:	8d 45 dc             	lea    eax,[ebp-0x24]
9f003e18:	50                   	push   eax
9f003e19:	8d 45 e0             	lea    eax,[ebp-0x20]
9f003e1c:	50                   	push   eax
9f003e1d:	ff 75 18             	push   DWORD PTR [ebp+0x18]
9f003e20:	ff b5 d4 fd ff ff    	push   DWORD PTR [ebp-0x22c]
9f003e26:	ff b5 d0 fd ff ff    	push   DWORD PTR [ebp-0x230]
9f003e2c:	e8 96 09 00 00       	call   9f0047c7 <fcvtbuf>
9f003e31:	83 c4 20             	add    esp,0x20
9f003e34:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:322
    if (sign) *buffer++ = '-';
9f003e37:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f003e3a:	85 c0                	test   eax,eax
9f003e3c:	74 0c                	je     9f003e4a <cfltcvt+0x2fa>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:322 (discriminator 1)
9f003e3e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003e41:	8d 50 01             	lea    edx,[eax+0x1]
9f003e44:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003e47:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:323
    if (*digits) {
9f003e4a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003e4d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003e50:	84 c0                	test   al,al
9f003e52:	0f 84 b2 00 00 00    	je     9f003f0a <cfltcvt+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:324
      if (decpt <= 0) {
9f003e58:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003e5b:	85 c0                	test   eax,eax
9f003e5d:	7f 63                	jg     9f003ec2 <cfltcvt+0x372>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:325
        *buffer++ = '0';
9f003e5f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003e62:	8d 50 01             	lea    edx,[eax+0x1]
9f003e65:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003e68:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:326
        *buffer++ = '.';
9f003e6b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003e6e:	8d 50 01             	lea    edx,[eax+0x1]
9f003e71:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003e74:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:327
        for (pos = 0; pos < -decpt; pos++) *buffer++ = '0';
9f003e77:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f003e7e:	eb 10                	jmp    9f003e90 <cfltcvt+0x340>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:327 (discriminator 3)
9f003e80:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003e83:	8d 50 01             	lea    edx,[eax+0x1]
9f003e86:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003e89:	c6 00 30             	mov    BYTE PTR [eax],0x30
9f003e8c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:327 (discriminator 1)
9f003e90:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003e93:	f7 d8                	neg    eax
9f003e95:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f003e98:	7f e6                	jg     9f003e80 <cfltcvt+0x330>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:328
        while (*digits) *buffer++ = *digits++;
9f003e9a:	eb 17                	jmp    9f003eb3 <cfltcvt+0x363>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:328 (discriminator 2)
9f003e9c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003e9f:	8d 50 01             	lea    edx,[eax+0x1]
9f003ea2:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003ea5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f003ea8:	8d 4a 01             	lea    ecx,[edx+0x1]
9f003eab:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
9f003eae:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003eb1:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:328 (discriminator 1)
9f003eb3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003eb6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003eb9:	84 c0                	test   al,al
9f003ebb:	75 df                	jne    9f003e9c <cfltcvt+0x34c>
9f003ebd:	e9 87 00 00 00       	jmp    9f003f49 <cfltcvt+0x3f9>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:330
      } else {
        pos = 0;
9f003ec2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:331
        while (*digits) {
9f003ec9:	eb 33                	jmp    9f003efe <cfltcvt+0x3ae>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:332
          if (pos++ == decpt) *buffer++ = '.';
9f003ecb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003ece:	8d 50 01             	lea    edx,[eax+0x1]
9f003ed1:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f003ed4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f003ed7:	39 d0                	cmp    eax,edx
9f003ed9:	75 0c                	jne    9f003ee7 <cfltcvt+0x397>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:332 (discriminator 1)
9f003edb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003ede:	8d 50 01             	lea    edx,[eax+0x1]
9f003ee1:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003ee4:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:333
          *buffer++ = *digits++;
9f003ee7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003eea:	8d 50 01             	lea    edx,[eax+0x1]
9f003eed:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003ef0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f003ef3:	8d 4a 01             	lea    ecx,[edx+0x1]
9f003ef6:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
9f003ef9:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003efc:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:331
        *buffer++ = '.';
        for (pos = 0; pos < -decpt; pos++) *buffer++ = '0';
        while (*digits) *buffer++ = *digits++;
      } else {
        pos = 0;
        while (*digits) {
9f003efe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003f01:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003f04:	84 c0                	test   al,al
9f003f06:	75 c3                	jne    9f003ecb <cfltcvt+0x37b>
9f003f08:	eb 3f                	jmp    9f003f49 <cfltcvt+0x3f9>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:337
          if (pos++ == decpt) *buffer++ = '.';
          *buffer++ = *digits++;
        }
      }
    } else {
      *buffer++ = '0';
9f003f0a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003f0d:	8d 50 01             	lea    edx,[eax+0x1]
9f003f10:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003f13:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:338
      if (precision > 0) {
9f003f16:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
9f003f1a:	7e 2d                	jle    9f003f49 <cfltcvt+0x3f9>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:339
        *buffer++ = '.';
9f003f1c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003f1f:	8d 50 01             	lea    edx,[eax+0x1]
9f003f22:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003f25:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:340
        for (pos = 0; pos < precision; pos++) *buffer++ = '0';
9f003f28:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f003f2f:	eb 10                	jmp    9f003f41 <cfltcvt+0x3f1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:340 (discriminator 3)
9f003f31:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003f34:	8d 50 01             	lea    edx,[eax+0x1]
9f003f37:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003f3a:	c6 00 30             	mov    BYTE PTR [eax],0x30
9f003f3d:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:340 (discriminator 1)
9f003f41:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003f44:	3b 45 18             	cmp    eax,DWORD PTR [ebp+0x18]
9f003f47:	7c e8                	jl     9f003f31 <cfltcvt+0x3e1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:345
      }
    }
  }

  *buffer = '\0';
9f003f49:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003f4c:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:346
}
9f003f4f:	90                   	nop
9f003f50:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003f53:	c9                   	leave  
9f003f54:	c3                   	ret    

9f003f55 <forcdecpt>:
forcdecpt():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:348

static void forcdecpt(char *buffer) {
9f003f55:	55                   	push   ebp
9f003f56:	89 e5                	mov    ebp,esp
9f003f58:	53                   	push   ebx
9f003f59:	83 ec 14             	sub    esp,0x14
9f003f5c:	e8 31 22 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f003f61:	05 7b 52 00 00       	add    eax,0x527b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:349
  while (*buffer) {
9f003f66:	eb 29                	jmp    9f003f91 <forcdecpt+0x3c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:350
    if (*buffer == '.') return;
9f003f68:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003f6b:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003f6e:	80 fa 2e             	cmp    dl,0x2e
9f003f71:	0f 84 81 00 00 00    	je     9f003ff8 <forcdecpt+0xa3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:351
    if (*buffer == 'e' || *buffer == 'E') break;
9f003f77:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003f7a:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003f7d:	80 fa 65             	cmp    dl,0x65
9f003f80:	74 19                	je     9f003f9b <forcdecpt+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:351 (discriminator 1)
9f003f82:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003f85:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003f88:	80 fa 45             	cmp    dl,0x45
9f003f8b:	74 0e                	je     9f003f9b <forcdecpt+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:352
    buffer++;
9f003f8d:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:349

  *buffer = '\0';
}

static void forcdecpt(char *buffer) {
  while (*buffer) {
9f003f91:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003f94:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003f97:	84 d2                	test   dl,dl
9f003f99:	75 cd                	jne    9f003f68 <forcdecpt+0x13>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:355
    if (*buffer == '.') return;
    if (*buffer == 'e' || *buffer == 'E') break;
    buffer++;
  }

  if (*buffer) {
9f003f9b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003f9e:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003fa1:	84 d2                	test   dl,dl
9f003fa3:	74 3f                	je     9f003fe4 <forcdecpt+0x8f>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:356
    int n = strlen(buffer);
9f003fa5:	83 ec 0c             	sub    esp,0xc
9f003fa8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003fab:	89 c3                	mov    ebx,eax
9f003fad:	e8 1e 22 00 00       	call   9f0061d0 <__x86.get_pc_thunk.ax+0x3e>
9f003fb2:	83 c4 10             	add    esp,0x10
9f003fb5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:357
    while (n > 0) {
9f003fb8:	eb 1c                	jmp    9f003fd6 <forcdecpt+0x81>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:358
      buffer[n + 1] = buffer[n];
9f003fba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003fbd:	8d 50 01             	lea    edx,[eax+0x1]
9f003fc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003fc3:	01 c2                	add    edx,eax
9f003fc5:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003fc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003fcb:	01 c8                	add    eax,ecx
9f003fcd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003fd0:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:359
      n--;
9f003fd2:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:357
    buffer++;
  }

  if (*buffer) {
    int n = strlen(buffer);
    while (n > 0) {
9f003fd6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f003fda:	7f de                	jg     9f003fba <forcdecpt+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:362
      buffer[n + 1] = buffer[n];
      n--;
    }

    *buffer = '.';
9f003fdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003fdf:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
9f003fe2:	eb 15                	jmp    9f003ff9 <forcdecpt+0xa4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:364
  } else {
    *buffer++ = '.';
9f003fe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003fe7:	8d 50 01             	lea    edx,[eax+0x1]
9f003fea:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003fed:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:365
    *buffer = '\0';
9f003ff0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003ff3:	c6 00 00             	mov    BYTE PTR [eax],0x0
9f003ff6:	eb 01                	jmp    9f003ff9 <forcdecpt+0xa4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:350
  *buffer = '\0';
}

static void forcdecpt(char *buffer) {
  while (*buffer) {
    if (*buffer == '.') return;
9f003ff8:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:367
    *buffer = '.';
  } else {
    *buffer++ = '.';
    *buffer = '\0';
  }
}
9f003ff9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003ffc:	c9                   	leave  
9f003ffd:	c3                   	ret    

9f003ffe <cropzeros>:
cropzeros():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:369

static void cropzeros(char *buffer) {
9f003ffe:	55                   	push   ebp
9f003fff:	89 e5                	mov    ebp,esp
9f004001:	83 ec 10             	sub    esp,0x10
9f004004:	e8 89 21 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f004009:	05 d3 51 00 00       	add    eax,0x51d3
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:372
  char *stop;

  while (*buffer && *buffer != '.') buffer++;
9f00400e:	eb 04                	jmp    9f004014 <cropzeros+0x16>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:372 (discriminator 3)
9f004010:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:372 (discriminator 1)
9f004014:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004017:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00401a:	84 c0                	test   al,al
9f00401c:	74 0a                	je     9f004028 <cropzeros+0x2a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:372 (discriminator 2)
9f00401e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004021:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004024:	3c 2e                	cmp    al,0x2e
9f004026:	75 e8                	jne    9f004010 <cropzeros+0x12>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:373
  if (*buffer++) {
9f004028:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00402b:	8d 50 01             	lea    edx,[eax+0x1]
9f00402e:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f004031:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004034:	84 c0                	test   al,al
9f004036:	74 6d                	je     9f0040a5 <cropzeros+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:374
    while (*buffer && *buffer != 'e' && *buffer != 'E') buffer++;
9f004038:	eb 04                	jmp    9f00403e <cropzeros+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:374 (discriminator 4)
9f00403a:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:374 (discriminator 1)
9f00403e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004041:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004044:	84 c0                	test   al,al
9f004046:	74 14                	je     9f00405c <cropzeros+0x5e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:374 (discriminator 2)
9f004048:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00404b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00404e:	3c 65                	cmp    al,0x65
9f004050:	74 0a                	je     9f00405c <cropzeros+0x5e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:374 (discriminator 3)
9f004052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004055:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004058:	3c 45                	cmp    al,0x45
9f00405a:	75 de                	jne    9f00403a <cropzeros+0x3c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:375
    stop = buffer--;
9f00405c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00405f:	8d 50 ff             	lea    edx,[eax-0x1]
9f004062:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f004065:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:376
    while (*buffer == '0') buffer--;
9f004068:	eb 04                	jmp    9f00406e <cropzeros+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:376 (discriminator 2)
9f00406a:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:376 (discriminator 1)
9f00406e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004071:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004074:	3c 30                	cmp    al,0x30
9f004076:	74 f2                	je     9f00406a <cropzeros+0x6c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:377
    if (*buffer == '.') buffer--;
9f004078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00407b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00407e:	3c 2e                	cmp    al,0x2e
9f004080:	75 04                	jne    9f004086 <cropzeros+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:377 (discriminator 1)
9f004082:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:378 (discriminator 1)
    while (*++buffer = *stop++);
9f004086:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f00408a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00408d:	8d 50 01             	lea    edx,[eax+0x1]
9f004090:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f004093:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f004096:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004099:	88 10                	mov    BYTE PTR [eax],dl
9f00409b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00409e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0040a1:	84 c0                	test   al,al
9f0040a3:	75 e1                	jne    9f004086 <cropzeros+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:380
  }
}
9f0040a5:	90                   	nop
9f0040a6:	c9                   	leave  
9f0040a7:	c3                   	ret    

9f0040a8 <flt>:
flt():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:382

static char *flt(char *str, double num, int size, int precision, char fmt, int flags) {
9f0040a8:	55                   	push   ebp
9f0040a9:	89 e5                	mov    ebp,esp
9f0040ab:	53                   	push   ebx
9f0040ac:	81 ec 24 02 00 00    	sub    esp,0x224
9f0040b2:	e8 29 21 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f0040b7:	81 c3 25 51 00 00    	add    ebx,0x5125
9f0040bd:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0040c0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0040c3:	89 95 e0 fd ff ff    	mov    DWORD PTR [ebp-0x220],edx
9f0040c9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f0040cc:	89 95 e4 fd ff ff    	mov    DWORD PTR [ebp-0x21c],edx
9f0040d2:	88 85 dc fd ff ff    	mov    BYTE PTR [ebp-0x224],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:388
  char cvtbuf[512];
  char c, sign;
  int n, i;

  // Left align means no zero padding
  if (flags & LEFT) flags &= ~ZEROPAD;
9f0040d8:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
9f0040db:	83 e0 10             	and    eax,0x10
9f0040de:	85 c0                	test   eax,eax
9f0040e0:	74 04                	je     9f0040e6 <flt+0x3e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:388 (discriminator 1)
9f0040e2:	83 65 20 fe          	and    DWORD PTR [ebp+0x20],0xfffffffe
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:391

  // Determine padding and sign char
  c = (flags & ZEROPAD) ? '0' : ' ';
9f0040e6:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
9f0040e9:	83 e0 01             	and    eax,0x1
9f0040ec:	85 c0                	test   eax,eax
9f0040ee:	74 07                	je     9f0040f7 <flt+0x4f>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:391 (discriminator 1)
9f0040f0:	b8 30 00 00 00       	mov    eax,0x30
9f0040f5:	eb 05                	jmp    9f0040fc <flt+0x54>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:391 (discriminator 2)
9f0040f7:	b8 20 00 00 00       	mov    eax,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:391 (discriminator 4)
9f0040fc:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:392 (discriminator 4)
  sign = 0;
9f0040ff:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:393 (discriminator 4)
  if (flags & SIGN) {
9f004103:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
9f004106:	83 e0 02             	and    eax,0x2
9f004109:	85 c0                	test   eax,eax
9f00410b:	74 4e                	je     9f00415b <flt+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:394
    if (num < 0.0) {
9f00410d:	d9 ee                	fldz   
9f00410f:	dd 85 e0 fd ff ff    	fld    QWORD PTR [ebp-0x220]
9f004115:	d9 c9                	fxch   st(1)
9f004117:	df e9                	fucomip st,st(1)
9f004119:	dd d8                	fstp   st(0)
9f00411b:	76 18                	jbe    9f004135 <flt+0x8d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:395
      sign = '-';
9f00411d:	c6 45 f7 2d          	mov    BYTE PTR [ebp-0x9],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:396
      num = -num;
9f004121:	dd 85 e0 fd ff ff    	fld    QWORD PTR [ebp-0x220]
9f004127:	d9 e0                	fchs   
9f004129:	dd 9d e0 fd ff ff    	fstp   QWORD PTR [ebp-0x220]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:397
      size--;
9f00412f:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f004133:	eb 26                	jmp    9f00415b <flt+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:398
    } else if (flags & PLUS) {
9f004135:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
9f004138:	83 e0 04             	and    eax,0x4
9f00413b:	85 c0                	test   eax,eax
9f00413d:	74 0a                	je     9f004149 <flt+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:399
      sign = '+';
9f00413f:	c6 45 f7 2b          	mov    BYTE PTR [ebp-0x9],0x2b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:400
      size--;
9f004143:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f004147:	eb 12                	jmp    9f00415b <flt+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:401
    } else if (flags & SPACE) {
9f004149:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
9f00414c:	83 e0 08             	and    eax,0x8
9f00414f:	85 c0                	test   eax,eax
9f004151:	74 08                	je     9f00415b <flt+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:402
      sign = ' ';
9f004153:	c6 45 f7 20          	mov    BYTE PTR [ebp-0x9],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:403
      size--;
9f004157:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:408
    }
  }

  // Compute the precision value
  if (precision < 0) {
9f00415b:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
9f00415f:	79 09                	jns    9f00416a <flt+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:409
    precision = 6; // Default precision: 6
9f004161:	c7 45 18 06 00 00 00 	mov    DWORD PTR [ebp+0x18],0x6
9f004168:	eb 16                	jmp    9f004180 <flt+0xd8>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:410
  } else if (precision == 0 && fmt == 'g') {
9f00416a:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
9f00416e:	75 10                	jne    9f004180 <flt+0xd8>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:410 (discriminator 1)
9f004170:	80 bd dc fd ff ff 67 	cmp    BYTE PTR [ebp-0x224],0x67
9f004177:	75 07                	jne    9f004180 <flt+0xd8>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:411
    precision = 1; // ANSI specified
9f004179:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:415
  }

  // Convert floating point number to text
  cfltcvt(num, cvtbuf, fmt, precision);
9f004180:	0f be 85 dc fd ff ff 	movsx  eax,BYTE PTR [ebp-0x224]
9f004187:	83 ec 0c             	sub    esp,0xc
9f00418a:	ff 75 18             	push   DWORD PTR [ebp+0x18]
9f00418d:	50                   	push   eax
9f00418e:	8d 85 e8 fd ff ff    	lea    eax,[ebp-0x218]
9f004194:	50                   	push   eax
9f004195:	ff b5 e4 fd ff ff    	push   DWORD PTR [ebp-0x21c]
9f00419b:	ff b5 e0 fd ff ff    	push   DWORD PTR [ebp-0x220]
9f0041a1:	e8 aa f9 ff ff       	call   9f003b50 <cfltcvt>
9f0041a6:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:418

  // '#' and precision == 0 means force a decimal point
  if ((flags & SPECIAL) && precision == 0) forcdecpt(cvtbuf);
9f0041a9:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
9f0041ac:	83 e0 20             	and    eax,0x20
9f0041af:	85 c0                	test   eax,eax
9f0041b1:	74 18                	je     9f0041cb <flt+0x123>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:418 (discriminator 1)
9f0041b3:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
9f0041b7:	75 12                	jne    9f0041cb <flt+0x123>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:418 (discriminator 2)
9f0041b9:	83 ec 0c             	sub    esp,0xc
9f0041bc:	8d 85 e8 fd ff ff    	lea    eax,[ebp-0x218]
9f0041c2:	50                   	push   eax
9f0041c3:	e8 8d fd ff ff       	call   9f003f55 <forcdecpt>
9f0041c8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:421

  // 'g' format means crop zero unless '#' given
  if (fmt == 'g' && !(flags & SPECIAL)) cropzeros(cvtbuf);
9f0041cb:	80 bd dc fd ff ff 67 	cmp    BYTE PTR [ebp-0x224],0x67
9f0041d2:	75 1c                	jne    9f0041f0 <flt+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:421 (discriminator 1)
9f0041d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
9f0041d7:	83 e0 20             	and    eax,0x20
9f0041da:	85 c0                	test   eax,eax
9f0041dc:	75 12                	jne    9f0041f0 <flt+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:421 (discriminator 2)
9f0041de:	83 ec 0c             	sub    esp,0xc
9f0041e1:	8d 85 e8 fd ff ff    	lea    eax,[ebp-0x218]
9f0041e7:	50                   	push   eax
9f0041e8:	e8 11 fe ff ff       	call   9f003ffe <cropzeros>
9f0041ed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:423

  n = strlen(cvtbuf);
9f0041f0:	83 ec 0c             	sub    esp,0xc
9f0041f3:	8d 85 e8 fd ff ff    	lea    eax,[ebp-0x218]
9f0041f9:	50                   	push   eax
9f0041fa:	e8 d1 1f 00 00       	call   9f0061d0 <__x86.get_pc_thunk.ax+0x3e>
9f0041ff:	83 c4 10             	add    esp,0x10
9f004202:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:426

  // Output number with alignment and padding
  size -= n;
9f004205:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f004208:	29 45 14             	sub    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:427
  if (!(flags & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
9f00420b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
9f00420e:	83 e0 11             	and    eax,0x11
9f004211:	85 c0                	test   eax,eax
9f004213:	75 1b                	jne    9f004230 <flt+0x188>
9f004215:	eb 0c                	jmp    9f004223 <flt+0x17b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:427 (discriminator 2)
9f004217:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00421a:	8d 50 01             	lea    edx,[eax+0x1]
9f00421d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f004220:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:427 (discriminator 1)
9f004223:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f004226:	8d 50 ff             	lea    edx,[eax-0x1]
9f004229:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f00422c:	85 c0                	test   eax,eax
9f00422e:	7f e7                	jg     9f004217 <flt+0x16f>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:428
  if (sign) *str++ = sign;
9f004230:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f004234:	74 0f                	je     9f004245 <flt+0x19d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:428 (discriminator 1)
9f004236:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004239:	8d 50 01             	lea    edx,[eax+0x1]
9f00423c:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00423f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f004243:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:429
  if (!(flags & LEFT)) while (size-- > 0) *str++ = c;
9f004245:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
9f004248:	83 e0 10             	and    eax,0x10
9f00424b:	85 c0                	test   eax,eax
9f00424d:	75 1e                	jne    9f00426d <flt+0x1c5>
9f00424f:	eb 0f                	jmp    9f004260 <flt+0x1b8>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:429 (discriminator 2)
9f004251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004254:	8d 50 01             	lea    edx,[eax+0x1]
9f004257:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00425a:	0f b6 55 ef          	movzx  edx,BYTE PTR [ebp-0x11]
9f00425e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:429 (discriminator 1)
9f004260:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f004263:	8d 50 ff             	lea    edx,[eax-0x1]
9f004266:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f004269:	85 c0                	test   eax,eax
9f00426b:	7f e4                	jg     9f004251 <flt+0x1a9>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:430
  for (i = 0; i < n; i++) *str++ = cvtbuf[i];
9f00426d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f004274:	eb 1d                	jmp    9f004293 <flt+0x1eb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:430 (discriminator 3)
9f004276:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004279:	8d 50 01             	lea    edx,[eax+0x1]
9f00427c:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00427f:	8d 8d e8 fd ff ff    	lea    ecx,[ebp-0x218]
9f004285:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f004288:	01 ca                	add    edx,ecx
9f00428a:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f00428d:	88 10                	mov    BYTE PTR [eax],dl
9f00428f:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:430 (discriminator 1)
9f004293:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f004296:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f004299:	7c db                	jl     9f004276 <flt+0x1ce>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:431
  while (size-- > 0) *str++ = ' ';
9f00429b:	eb 0c                	jmp    9f0042a9 <flt+0x201>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:431 (discriminator 2)
9f00429d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0042a0:	8d 50 01             	lea    edx,[eax+0x1]
9f0042a3:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0042a6:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:431 (discriminator 1)
9f0042a9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f0042ac:	8d 50 ff             	lea    edx,[eax-0x1]
9f0042af:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f0042b2:	85 c0                	test   eax,eax
9f0042b4:	7f e7                	jg     9f00429d <flt+0x1f5>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:433

  return str;
9f0042b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:434
}
9f0042b9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0042bc:	c9                   	leave  
9f0042bd:	c3                   	ret    

9f0042be <vsprintf>:
vsprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:438

#endif

int vsprintf(char *buf, const char *fmt, va_list args) {
9f0042be:	55                   	push   ebp
9f0042bf:	89 e5                	mov    ebp,esp
9f0042c1:	56                   	push   esi
9f0042c2:	53                   	push   ebx
9f0042c3:	83 ec 30             	sub    esp,0x30
9f0042c6:	e8 15 1f 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f0042cb:	81 c3 11 4f 00 00    	add    ebx,0x4f11
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:451

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  for (str = buf; *fmt; fmt++) {
9f0042d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0042d4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f0042d7:	e9 93 04 00 00       	jmp    9f00476f <.L245+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:452
    if (*fmt != '%') {
9f0042dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0042df:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0042e2:	3c 25                	cmp    al,0x25
9f0042e4:	74 16                	je     9f0042fc <vsprintf+0x3e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:453
      *str++ = *fmt;
9f0042e6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0042e9:	8d 50 01             	lea    edx,[eax+0x1]
9f0042ec:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f0042ef:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0042f2:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0042f5:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:454
      continue;
9f0042f7:	e9 6a 04 00 00       	jmp    9f004766 <.L245+0x74>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:458
    }
                  
    // Process flags
    flags = 0;
9f0042fc:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:460
repeat:
    fmt++; // This also skips first '%'
9f004303:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004306:	83 c0 01             	add    eax,0x1
9f004309:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:461
    switch (*fmt) {
9f00430c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00430f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004312:	0f be c0             	movsx  eax,al
9f004315:	83 e8 20             	sub    eax,0x20
9f004318:	83 f8 10             	cmp    eax,0x10
9f00431b:	77 2c                	ja     9f004349 <.L188>
9f00431d:	c1 e0 02             	shl    eax,0x2
9f004320:	8b 84 18 78 fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x488]
9f004327:	01 d8                	add    eax,ebx
9f004329:	ff e0                	jmp    eax

9f00432b <.L193>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:462
      case '-': flags |= LEFT; goto repeat;
9f00432b:	83 4d e0 10          	or     DWORD PTR [ebp-0x20],0x10
9f00432f:	eb d2                	jmp    9f004303 <vsprintf+0x45>

9f004331 <.L192>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:463
      case '+': flags |= PLUS; goto repeat;
9f004331:	83 4d e0 04          	or     DWORD PTR [ebp-0x20],0x4
9f004335:	eb cc                	jmp    9f004303 <vsprintf+0x45>

9f004337 <.L189>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:464
      case ' ': flags |= SPACE; goto repeat;
9f004337:	83 4d e0 08          	or     DWORD PTR [ebp-0x20],0x8
9f00433b:	eb c6                	jmp    9f004303 <vsprintf+0x45>

9f00433d <.L191>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:465
      case '#': flags |= SPECIAL; goto repeat;
9f00433d:	83 4d e0 20          	or     DWORD PTR [ebp-0x20],0x20
9f004341:	eb c0                	jmp    9f004303 <vsprintf+0x45>

9f004343 <.L194>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:466
      case '0': flags |= ZEROPAD; goto repeat;
9f004343:	83 4d e0 01          	or     DWORD PTR [ebp-0x20],0x1
9f004347:	eb ba                	jmp    9f004303 <vsprintf+0x45>

9f004349 <.L188>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:470
    }
          
    // Get field width
    field_width = -1;
9f004349:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [ebp-0x24],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:471
    if (is_digit(*fmt)) {
9f004350:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004353:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004356:	3c 2f                	cmp    al,0x2f
9f004358:	7e 1b                	jle    9f004375 <.L188+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:471 (discriminator 1)
9f00435a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00435d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004360:	3c 39                	cmp    al,0x39
9f004362:	7f 11                	jg     9f004375 <.L188+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:472
      field_width = skip_atoi(&fmt);
9f004364:	8d 45 0c             	lea    eax,[ebp+0xc]
9f004367:	50                   	push   eax
9f004368:	e8 fe f1 ff ff       	call   9f00356b <skip_atoi>
9f00436d:	83 c4 04             	add    esp,0x4
9f004370:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
9f004373:	eb 2e                	jmp    9f0043a3 <.L188+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:473
    } else if (*fmt == '*') {
9f004375:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004378:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00437b:	3c 2a                	cmp    al,0x2a
9f00437d:	75 24                	jne    9f0043a3 <.L188+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:474
      fmt++;
9f00437f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004382:	83 c0 01             	add    eax,0x1
9f004385:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:475
      field_width = va_arg(args, int);
9f004388:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00438b:	8d 50 04             	lea    edx,[eax+0x4]
9f00438e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f004391:	8b 00                	mov    eax,DWORD PTR [eax]
9f004393:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:476
      if (field_width < 0) {
9f004396:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
9f00439a:	79 07                	jns    9f0043a3 <.L188+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:477
        field_width = -field_width;
9f00439c:	f7 5d dc             	neg    DWORD PTR [ebp-0x24]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:478
        flags |= LEFT;
9f00439f:	83 4d e0 10          	or     DWORD PTR [ebp-0x20],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:483
      }
    }

    // Get the precision
    precision = -1;
9f0043a3:	c7 45 d8 ff ff ff ff 	mov    DWORD PTR [ebp-0x28],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:484
    if (*fmt == '.') {
9f0043aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0043ad:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0043b0:	3c 2e                	cmp    al,0x2e
9f0043b2:	75 5c                	jne    9f004410 <.L188+0xc7>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:485
      ++fmt;    
9f0043b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0043b7:	83 c0 01             	add    eax,0x1
9f0043ba:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:486
      if (is_digit(*fmt)) {
9f0043bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0043c0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0043c3:	3c 2f                	cmp    al,0x2f
9f0043c5:	7e 1b                	jle    9f0043e2 <.L188+0x99>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:486 (discriminator 1)
9f0043c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0043ca:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0043cd:	3c 39                	cmp    al,0x39
9f0043cf:	7f 11                	jg     9f0043e2 <.L188+0x99>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:487
        precision = skip_atoi(&fmt);
9f0043d1:	8d 45 0c             	lea    eax,[ebp+0xc]
9f0043d4:	50                   	push   eax
9f0043d5:	e8 91 f1 ff ff       	call   9f00356b <skip_atoi>
9f0043da:	83 c4 04             	add    esp,0x4
9f0043dd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
9f0043e0:	eb 21                	jmp    9f004403 <.L188+0xba>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:488
      } else if (*fmt == '*') {
9f0043e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0043e5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0043e8:	3c 2a                	cmp    al,0x2a
9f0043ea:	75 17                	jne    9f004403 <.L188+0xba>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:489
        ++fmt;
9f0043ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0043ef:	83 c0 01             	add    eax,0x1
9f0043f2:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:490
        precision = va_arg(args, int);
9f0043f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0043f8:	8d 50 04             	lea    edx,[eax+0x4]
9f0043fb:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0043fe:	8b 00                	mov    eax,DWORD PTR [eax]
9f004400:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:492
      }
      if (precision < 0) precision = 0;
9f004403:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f004407:	79 07                	jns    9f004410 <.L188+0xc7>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:492 (discriminator 1)
9f004409:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:496
    }

    // Get the conversion qualifier
    qualifier = -1;
9f004410:	c7 45 d4 ff ff ff ff 	mov    DWORD PTR [ebp-0x2c],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:497
    if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {
9f004417:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00441a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00441d:	3c 68                	cmp    al,0x68
9f00441f:	74 14                	je     9f004435 <.L188+0xec>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:497 (discriminator 1)
9f004421:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004424:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004427:	3c 6c                	cmp    al,0x6c
9f004429:	74 0a                	je     9f004435 <.L188+0xec>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:497 (discriminator 2)
9f00442b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00442e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004431:	3c 4c                	cmp    al,0x4c
9f004433:	75 15                	jne    9f00444a <.L188+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:498
      qualifier = *fmt;
9f004435:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004438:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00443b:	0f be c0             	movsx  eax,al
9f00443e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:499
      fmt++;
9f004441:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004444:	83 c0 01             	add    eax,0x1
9f004447:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:503
    }

    // Default base
    base = 10;
9f00444a:	c7 45 ec 0a 00 00 00 	mov    DWORD PTR [ebp-0x14],0xa
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:505

    switch (*fmt) {
9f004451:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004457:	0f be c0             	movsx  eax,al
9f00445a:	83 e8 41             	sub    eax,0x41
9f00445d:	83 f8 37             	cmp    eax,0x37
9f004460:	0f 87 4e 02 00 00    	ja     9f0046b4 <.L202>
9f004466:	c1 e0 02             	shl    eax,0x2
9f004469:	8b 84 18 bc fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x444]
9f004470:	01 d8                	add    eax,ebx
9f004472:	ff e0                	jmp    eax

9f004474 <.L208>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:507
      case 'c':
        if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';
9f004474:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f004477:	83 e0 10             	and    eax,0x10
9f00447a:	85 c0                	test   eax,eax
9f00447c:	75 18                	jne    9f004496 <.L208+0x22>
9f00447e:	eb 0c                	jmp    9f00448c <.L208+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:507 (discriminator 2)
9f004480:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f004483:	8d 50 01             	lea    edx,[eax+0x1]
9f004486:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f004489:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:507 (discriminator 1)
9f00448c:	83 6d dc 01          	sub    DWORD PTR [ebp-0x24],0x1
9f004490:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
9f004494:	7f ea                	jg     9f004480 <.L208+0xc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:508
        *str++ = (unsigned char) va_arg(args, int);
9f004496:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f004499:	8d 50 01             	lea    edx,[eax+0x1]
9f00449c:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f00449f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f0044a2:	8d 4a 04             	lea    ecx,[edx+0x4]
9f0044a5:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
9f0044a8:	8b 12                	mov    edx,DWORD PTR [edx]
9f0044aa:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:509
        while (--field_width > 0) *str++ = ' ';
9f0044ac:	eb 0c                	jmp    9f0044ba <.L208+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:509 (discriminator 2)
9f0044ae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0044b1:	8d 50 01             	lea    edx,[eax+0x1]
9f0044b4:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f0044b7:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:509 (discriminator 1)
9f0044ba:	83 6d dc 01          	sub    DWORD PTR [ebp-0x24],0x1
9f0044be:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
9f0044c2:	7f ea                	jg     9f0044ae <.L208+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:510
        continue;
9f0044c4:	e9 9d 02 00 00       	jmp    9f004766 <.L245+0x74>

9f0044c9 <.L213>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:513

      case 's':
        s = va_arg(args, char *);
9f0044c9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0044cc:	8d 50 04             	lea    edx,[eax+0x4]
9f0044cf:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0044d2:	8b 00                	mov    eax,DWORD PTR [eax]
9f0044d4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:514
        if (!s) s = "<NULL>";
9f0044d7:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f0044db:	75 09                	jne    9f0044e6 <.L213+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:514 (discriminator 1)
9f0044dd:	8d 83 71 fb ff ff    	lea    eax,[ebx-0x48f]
9f0044e3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:515
        len = strnlenI(s, precision);
9f0044e6:	83 ec 08             	sub    esp,0x8
9f0044e9:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f0044ec:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f0044ef:	e8 77 07 00 00       	call   9f004c6b <strnlenI>
9f0044f4:	83 c4 10             	add    esp,0x10
9f0044f7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:516
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
9f0044fa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f0044fd:	83 e0 10             	and    eax,0x10
9f004500:	85 c0                	test   eax,eax
9f004502:	75 1c                	jne    9f004520 <.L213+0x57>
9f004504:	eb 0c                	jmp    9f004512 <.L213+0x49>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:516 (discriminator 2)
9f004506:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f004509:	8d 50 01             	lea    edx,[eax+0x1]
9f00450c:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f00450f:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:516 (discriminator 1)
9f004512:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f004515:	8d 50 ff             	lea    edx,[eax-0x1]
9f004518:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
9f00451b:	3b 45 d0             	cmp    eax,DWORD PTR [ebp-0x30]
9f00451e:	7f e6                	jg     9f004506 <.L213+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:517
        for (i = 0; i < len; ++i) *str++ = *s++;
9f004520:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f004527:	eb 1b                	jmp    9f004544 <.L213+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:517 (discriminator 3)
9f004529:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00452c:	8d 50 01             	lea    edx,[eax+0x1]
9f00452f:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f004532:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f004535:	8d 4a 01             	lea    ecx,[edx+0x1]
9f004538:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
9f00453b:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f00453e:	88 10                	mov    BYTE PTR [eax],dl
9f004540:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:517 (discriminator 1)
9f004544:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f004547:	3b 45 d0             	cmp    eax,DWORD PTR [ebp-0x30]
9f00454a:	7c dd                	jl     9f004529 <.L213+0x60>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:518
        while (len < field_width--) *str++ = ' ';
9f00454c:	eb 0c                	jmp    9f00455a <.L213+0x91>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:518 (discriminator 2)
9f00454e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f004551:	8d 50 01             	lea    edx,[eax+0x1]
9f004554:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f004557:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:518 (discriminator 1)
9f00455a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00455d:	8d 50 ff             	lea    edx,[eax-0x1]
9f004560:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
9f004563:	3b 45 d0             	cmp    eax,DWORD PTR [ebp-0x30]
9f004566:	7f e6                	jg     9f00454e <.L213+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:519
        continue;
9f004568:	e9 f9 01 00 00       	jmp    9f004766 <.L245+0x74>

9f00456d <.L212>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:522

      case 'p':
        if (field_width == -1) {
9f00456d:	83 7d dc ff          	cmp    DWORD PTR [ebp-0x24],0xffffffff
9f004571:	75 0b                	jne    9f00457e <.L212+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:523
          field_width = 2 * sizeof(void *);
9f004573:	c7 45 dc 08 00 00 00 	mov    DWORD PTR [ebp-0x24],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:524
          flags |= ZEROPAD;
9f00457a:	83 4d e0 01          	or     DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:526
        }
        str = number(str, (unsigned long) va_arg(args, void *), 16, field_width, precision, flags);
9f00457e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f004581:	8d 50 04             	lea    edx,[eax+0x4]
9f004584:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f004587:	8b 00                	mov    eax,DWORD PTR [eax]
9f004589:	83 ec 08             	sub    esp,0x8
9f00458c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f00458f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f004592:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f004595:	6a 10                	push   0x10
9f004597:	50                   	push   eax
9f004598:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f00459b:	e8 2f f0 ff ff       	call   9f0035cf <number>
9f0045a0:	83 c4 20             	add    esp,0x20
9f0045a3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:527
        continue;
9f0045a6:	e9 bb 01 00 00       	jmp    9f004766 <.L245+0x74>

9f0045ab <.L210>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:530

      case 'n':
        if (qualifier == 'l') {
9f0045ab:	83 7d d4 6c          	cmp    DWORD PTR [ebp-0x2c],0x6c
9f0045af:	75 20                	jne    9f0045d1 <.L210+0x26>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:531
          long *ip = va_arg(args, long *);
9f0045b1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0045b4:	8d 50 04             	lea    edx,[eax+0x4]
9f0045b7:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0045ba:	8b 00                	mov    eax,DWORD PTR [eax]
9f0045bc:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:532
          *ip = (str - buf);
9f0045bf:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f0045c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0045c5:	29 c2                	sub    edx,eax
9f0045c7:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
9f0045ca:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:537
        } else {
          int *ip = va_arg(args, int *);
          *ip = (str - buf);
        }
        continue;
9f0045cc:	e9 95 01 00 00       	jmp    9f004766 <.L245+0x74>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:534
      case 'n':
        if (qualifier == 'l') {
          long *ip = va_arg(args, long *);
          *ip = (str - buf);
        } else {
          int *ip = va_arg(args, int *);
9f0045d1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0045d4:	8d 50 04             	lea    edx,[eax+0x4]
9f0045d7:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0045da:	8b 00                	mov    eax,DWORD PTR [eax]
9f0045dc:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:535
          *ip = (str - buf);
9f0045df:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f0045e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0045e5:	29 c2                	sub    edx,eax
9f0045e7:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
9f0045ea:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:537
        }
        continue;
9f0045ec:	e9 75 01 00 00       	jmp    9f004766 <.L245+0x74>

9f0045f1 <.L203>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:540

      case 'A':
        flags |= LARGE;
9f0045f1:	83 4d e0 40          	or     DWORD PTR [ebp-0x20],0x40

9f0045f5 <.L207>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:543

      case 'a':
        if (qualifier == 'l') {
9f0045f5:	83 7d d4 6c          	cmp    DWORD PTR [ebp-0x2c],0x6c
9f0045f9:	75 2b                	jne    9f004626 <.L207+0x31>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:544
          str = eaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
9f0045fb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0045fe:	8d 50 04             	lea    edx,[eax+0x4]
9f004601:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f004604:	8b 00                	mov    eax,DWORD PTR [eax]
9f004606:	83 ec 0c             	sub    esp,0xc
9f004609:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f00460c:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f00460f:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f004612:	50                   	push   eax
9f004613:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f004616:	e8 fd f1 ff ff       	call   9f003818 <eaddr>
9f00461b:	83 c4 20             	add    esp,0x20
9f00461e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:548
        } else {
          str = iaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
        }
        continue;
9f004621:	e9 40 01 00 00       	jmp    9f004766 <.L245+0x74>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:546

      case 'a':
        if (qualifier == 'l') {
          str = eaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
        } else {
          str = iaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
9f004626:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f004629:	8d 50 04             	lea    edx,[eax+0x4]
9f00462c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00462f:	8b 00                	mov    eax,DWORD PTR [eax]
9f004631:	83 ec 0c             	sub    esp,0xc
9f004634:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f004637:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f00463a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f00463d:	50                   	push   eax
9f00463e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f004641:	e8 ec f2 ff ff       	call   9f003932 <iaddr>
9f004646:	83 c4 20             	add    esp,0x20
9f004649:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:548
        }
        continue;
9f00464c:	e9 15 01 00 00       	jmp    9f004766 <.L245+0x74>

9f004651 <.L211>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:552

      // Integer number formats - set up the flags and "break"
      case 'o':
        base = 8;
9f004651:	c7 45 ec 08 00 00 00 	mov    DWORD PTR [ebp-0x14],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:553
        break;
9f004658:	e9 96 00 00 00       	jmp    9f0046f3 <.L245+0x1>

9f00465d <.L206>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:556

      case 'X':
        flags |= LARGE;
9f00465d:	83 4d e0 40          	or     DWORD PTR [ebp-0x20],0x40

9f004661 <.L215>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:559

      case 'x':
        base = 16;
9f004661:	c7 45 ec 10 00 00 00 	mov    DWORD PTR [ebp-0x14],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:560
        break;
9f004668:	e9 86 00 00 00       	jmp    9f0046f3 <.L245+0x1>

9f00466d <.L209>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:564

      case 'd':
      case 'i':
        flags |= SIGN;
9f00466d:	83 4d e0 02          	or     DWORD PTR [ebp-0x20],0x2
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:567

      case 'u':
        break;
9f004671:	eb 7f                	jmp    9f0046f2 <.L245>

9f004673 <.L205>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:576
      case 'E':
      case 'G':
      case 'e':
      case 'f':
      case 'g':
        str = flt(str, va_arg(args, double), field_width, precision, *fmt, flags | SIGN);
9f004673:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f004676:	83 c8 02             	or     eax,0x2
9f004679:	89 c6                	mov    esi,eax
9f00467b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00467e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004681:	0f be d0             	movsx  edx,al
9f004684:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f004687:	8d 48 08             	lea    ecx,[eax+0x8]
9f00468a:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
9f00468d:	dd 00                	fld    QWORD PTR [eax]
9f00468f:	83 ec 04             	sub    esp,0x4
9f004692:	56                   	push   esi
9f004693:	52                   	push   edx
9f004694:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f004697:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f00469a:	8d 64 24 f8          	lea    esp,[esp-0x8]
9f00469e:	dd 1c 24             	fstp   QWORD PTR [esp]
9f0046a1:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f0046a4:	e8 ff f9 ff ff       	call   9f0040a8 <flt>
9f0046a9:	83 c4 20             	add    esp,0x20
9f0046ac:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:577
        continue;
9f0046af:	e9 b2 00 00 00       	jmp    9f004766 <.L245+0x74>

9f0046b4 <.L202>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:582

#endif

      default:
        if (*fmt != '%') *str++ = '%';
9f0046b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0046b7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0046ba:	3c 25                	cmp    al,0x25
9f0046bc:	74 0c                	je     9f0046ca <.L202+0x16>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:582 (discriminator 1)
9f0046be:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0046c1:	8d 50 01             	lea    edx,[eax+0x1]
9f0046c4:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f0046c7:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:583
        if (*fmt) {
9f0046ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0046cd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0046d0:	84 c0                	test   al,al
9f0046d2:	74 13                	je     9f0046e7 <.L202+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:584
          *str++ = *fmt;
9f0046d4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0046d7:	8d 50 01             	lea    edx,[eax+0x1]
9f0046da:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f0046dd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0046e0:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0046e3:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:588
        } else {
          --fmt;
        }
        continue;
9f0046e5:	eb 7f                	jmp    9f004766 <.L245+0x74>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:586
      default:
        if (*fmt != '%') *str++ = '%';
        if (*fmt) {
          *str++ = *fmt;
        } else {
          --fmt;
9f0046e7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0046ea:	83 e8 01             	sub    eax,0x1
9f0046ed:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:588
        }
        continue;
9f0046f0:	eb 74                	jmp    9f004766 <.L245+0x74>

9f0046f2 <.L245>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:567
      case 'd':
      case 'i':
        flags |= SIGN;

      case 'u':
        break;
9f0046f2:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:591
          --fmt;
        }
        continue;
    }

    if (qualifier == 'l') {
9f0046f3:	83 7d d4 6c          	cmp    DWORD PTR [ebp-0x2c],0x6c
9f0046f7:	75 10                	jne    9f004709 <.L245+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:592
      num = va_arg(args, unsigned long);
9f0046f9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0046fc:	8d 50 04             	lea    edx,[eax+0x4]
9f0046ff:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f004702:	8b 00                	mov    eax,DWORD PTR [eax]
9f004704:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f004707:	eb 3c                	jmp    9f004745 <.L245+0x53>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:593
    } else if (qualifier == 'h') {
9f004709:	83 7d d4 68          	cmp    DWORD PTR [ebp-0x2c],0x68
9f00470d:	75 0e                	jne    9f00471d <.L245+0x2b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:594
      if (flags & SIGN) {
9f00470f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f004712:	83 e0 02             	and    eax,0x2
9f004715:	85 c0                	test   eax,eax
9f004717:	74 02                	je     9f00471b <.L245+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:595
        num = va_arg(args, short);
9f004719:	0f 0b                	ud2    
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:597
      } else {
        num = va_arg(args, unsigned short);
9f00471b:	0f 0b                	ud2    
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:599
      }
    } else if (flags & SIGN) {
9f00471d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f004720:	83 e0 02             	and    eax,0x2
9f004723:	85 c0                	test   eax,eax
9f004725:	74 10                	je     9f004737 <.L245+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:600
      num = va_arg(args, int);
9f004727:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00472a:	8d 50 04             	lea    edx,[eax+0x4]
9f00472d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f004730:	8b 00                	mov    eax,DWORD PTR [eax]
9f004732:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f004735:	eb 0e                	jmp    9f004745 <.L245+0x53>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:602
    } else {
      num = va_arg(args, unsigned int);
9f004737:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00473a:	8d 50 04             	lea    edx,[eax+0x4]
9f00473d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f004740:	8b 00                	mov    eax,DWORD PTR [eax]
9f004742:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:605
    }

    str = number(str, num, base, field_width, precision, flags);
9f004745:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f004748:	83 ec 08             	sub    esp,0x8
9f00474b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f00474e:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f004751:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f004754:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f004757:	50                   	push   eax
9f004758:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f00475b:	e8 6f ee ff ff       	call   9f0035cf <number>
9f004760:	83 c4 20             	add    esp,0x20
9f004763:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:451 (discriminator 2)

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  for (str = buf; *fmt; fmt++) {
9f004766:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004769:	83 c0 01             	add    eax,0x1
9f00476c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:451 (discriminator 1)
9f00476f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004772:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004775:	84 c0                	test   al,al
9f004777:	0f 85 5f fb ff ff    	jne    9f0042dc <vsprintf+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:608
    }

    str = number(str, num, base, field_width, precision, flags);
  }

  *str = '\0';
9f00477d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f004780:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:609
  return str - buf;
9f004783:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f004786:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004789:	29 c2                	sub    edx,eax
9f00478b:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:610
}
9f00478d:	8d 65 f8             	lea    esp,[ebp-0x8]
9f004790:	5b                   	pop    ebx
9f004791:	5e                   	pop    esi
9f004792:	5d                   	pop    ebp
9f004793:	c3                   	ret    

9f004794 <sprintf>:
sprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:612

VISIBLE int sprintf(char *buf, const char *fmt, ...) {
9f004794:	55                   	push   ebp
9f004795:	89 e5                	mov    ebp,esp
9f004797:	83 ec 18             	sub    esp,0x18
9f00479a:	e8 f3 19 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f00479f:	05 3d 4a 00 00       	add    eax,0x4a3d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:616
  va_list args;
  int n;

  va_start(args, fmt);
9f0047a4:	8d 45 10             	lea    eax,[ebp+0x10]
9f0047a7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:617
  n = vsprintf(buf, fmt, args);
9f0047aa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0047ad:	83 ec 04             	sub    esp,0x4
9f0047b0:	50                   	push   eax
9f0047b1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0047b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0047b7:	e8 02 fb ff ff       	call   9f0042be <vsprintf>
9f0047bc:	83 c4 10             	add    esp,0x10
9f0047bf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:620
  va_end(args);

  return n;
9f0047c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:621
}
9f0047c5:	c9                   	leave  
9f0047c6:	c3                   	ret    

9f0047c7 <fcvtbuf>:
fcvtbuf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:623

char *fcvtbuf(double arg, int ndigits, int *decpt, int *sign, char *buf) {
9f0047c7:	55                   	push   ebp
9f0047c8:	89 e5                	mov    ebp,esp
9f0047ca:	83 ec 18             	sub    esp,0x18
9f0047cd:	e8 c0 19 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0047d2:	05 0a 4a 00 00       	add    eax,0x4a0a
9f0047d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0047da:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0047dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0047e0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:624
  return cvt(arg, ndigits, decpt, sign, buf, 0);
9f0047e3:	83 ec 04             	sub    esp,0x4
9f0047e6:	6a 00                	push   0x0
9f0047e8:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
9f0047eb:	ff 75 18             	push   DWORD PTR [ebp+0x18]
9f0047ee:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f0047f1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0047f4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0047f7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0047fa:	e8 9d ea ff ff       	call   9f00329c <cvt>
9f0047ff:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:625
}
9f004802:	c9                   	leave  
9f004803:	c3                   	ret    

9f004804 <ecvtbuf>:
ecvtbuf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:627

char *ecvtbuf(double arg, int ndigits, int *decpt, int *sign, char *buf) {
9f004804:	55                   	push   ebp
9f004805:	89 e5                	mov    ebp,esp
9f004807:	83 ec 18             	sub    esp,0x18
9f00480a:	e8 83 19 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f00480f:	05 cd 49 00 00       	add    eax,0x49cd
9f004814:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004817:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00481a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00481d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:628
  return cvt(arg, ndigits, decpt, sign, buf, 1);
9f004820:	83 ec 04             	sub    esp,0x4
9f004823:	6a 01                	push   0x1
9f004825:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
9f004828:	ff 75 18             	push   DWORD PTR [ebp+0x18]
9f00482b:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f00482e:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f004831:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f004834:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f004837:	e8 60 ea ff ff       	call   9f00329c <cvt>
9f00483c:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:629
}
9f00483f:	c9                   	leave  
9f004840:	c3                   	ret    

9f004841 <sprintfI>:
sprintfI():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:632

int sprintfI(char *buf, const char *fmt, ...)
{
9f004841:	55                   	push   ebp
9f004842:	89 e5                	mov    ebp,esp
9f004844:	83 ec 18             	sub    esp,0x18
9f004847:	e8 46 19 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f00484c:	05 90 49 00 00       	add    eax,0x4990
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:636
        va_list args;
        int i;

        va_start(args, fmt);
9f004851:	8d 45 10             	lea    eax,[ebp+0x10]
9f004854:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:637
        i = vsprintf(buf, fmt, args);
9f004857:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00485a:	83 ec 04             	sub    esp,0x4
9f00485d:	50                   	push   eax
9f00485e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004861:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004864:	e8 55 fa ff ff       	call   9f0042be <vsprintf>
9f004869:	83 c4 10             	add    esp,0x10
9f00486c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:639
        va_end(args);
        return i;
9f00486f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:640
}
9f004872:	c9                   	leave  
9f004873:	c3                   	ret    

9f004874 <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:18
extern int gets(char* buffer, int maxlen, int stream);


//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
9f004874:	55                   	push   ebp
9f004875:	89 e5                	mov    ebp,esp
9f004877:	53                   	push   ebx
9f004878:	83 ec 14             	sub    esp,0x14
9f00487b:	e8 60 19 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f004880:	81 c3 5c 49 00 00    	add    ebx,0x495c
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:20
    char buff[5];
    int buffPtr=0;
9f004886:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:22

    memsetI(buff,0,10);
9f00488d:	83 ec 04             	sub    esp,0x4
9f004890:	6a 0a                	push   0xa
9f004892:	6a 00                	push   0x0
9f004894:	8d 45 ef             	lea    eax,[ebp-0x11]
9f004897:	50                   	push   eax
9f004898:	e8 6f e2 ff ff       	call   9f002b0c <memsetI>
9f00489d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:25
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
9f0048a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0048a3:	8d 50 01             	lea    edx,[eax+0x1]
9f0048a6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0048a9:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:26
    buff[buffPtr++] = '[';
9f0048ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0048b1:	8d 50 01             	lea    edx,[eax+0x1]
9f0048b4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0048b7:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:27
    buff[buffPtr++] = '0';
9f0048bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0048bf:	8d 50 01             	lea    edx,[eax+0x1]
9f0048c2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0048c5:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:28
    buff[buffPtr++] = 'K';
9f0048ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0048cd:	8d 50 01             	lea    edx,[eax+0x1]
9f0048d0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0048d3:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:29
    buff[buffPtr] = '\0';
9f0048d8:	8d 55 ef             	lea    edx,[ebp-0x11]
9f0048db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0048de:	01 d0                	add    eax,edx
9f0048e0:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:30
    printI(buff);
9f0048e3:	83 ec 0c             	sub    esp,0xc
9f0048e6:	8d 45 ef             	lea    eax,[ebp-0x11]
9f0048e9:	50                   	push   eax
9f0048ea:	e8 c2 ce ff ff       	call   9f0017b1 <printI>
9f0048ef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:32
    
    return;
9f0048f2:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:33
}
9f0048f3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0048f6:	c9                   	leave  
9f0048f7:	c3                   	ret    

9f0048f8 <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
9f0048f8:	55                   	push   ebp
9f0048f9:	89 e5                	mov    ebp,esp
9f0048fb:	53                   	push   ebx
9f0048fc:	83 ec 04             	sub    esp,0x4
9f0048ff:	e8 dc 18 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f004904:	81 c3 d8 48 00 00    	add    ebx,0x48d8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     strcpyI (dest + strlenI (dest), src);
9f00490a:	83 ec 0c             	sub    esp,0xc
9f00490d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004910:	e8 0b 03 00 00       	call   9f004c20 <strlenI>
9f004915:	83 c4 10             	add    esp,0x10
9f004918:	89 c2                	mov    edx,eax
9f00491a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00491d:	01 d0                	add    eax,edx
9f00491f:	83 ec 08             	sub    esp,0x8
9f004922:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004925:	50                   	push   eax
9f004926:	e8 e1 01 00 00       	call   9f004b0c <strcpyI>
9f00492b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
     return dest;
9f00492e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:34
   }
9f004931:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f004934:	c9                   	leave  
9f004935:	c3                   	ret    

9f004936 <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37

   char* strcatI (char *dest, const char *src)
   {
9f004936:	55                   	push   ebp
9f004937:	89 e5                	mov    ebp,esp
9f004939:	53                   	push   ebx
9f00493a:	83 ec 04             	sub    esp,0x4
9f00493d:	e8 9e 18 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f004942:	81 c3 9a 48 00 00    	add    ebx,0x489a
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     strcpyI (dest + strlenI (dest), src);
9f004948:	83 ec 0c             	sub    esp,0xc
9f00494b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00494e:	e8 cd 02 00 00       	call   9f004c20 <strlenI>
9f004953:	83 c4 10             	add    esp,0x10
9f004956:	89 c2                	mov    edx,eax
9f004958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00495b:	01 d0                	add    eax,edx
9f00495d:	83 ec 08             	sub    esp,0x8
9f004960:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004963:	50                   	push   eax
9f004964:	e8 a3 01 00 00       	call   9f004b0c <strcpyI>
9f004969:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
     return dest;
9f00496c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:40
   }
9f00496f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f004972:	c9                   	leave  
9f004973:	c3                   	ret    

9f004974 <strncatI>:
strncatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:43
   
char *strncatI(char *dest, const char *src, size_t n)
{
9f004974:	55                   	push   ebp
9f004975:	89 e5                	mov    ebp,esp
9f004977:	53                   	push   ebx
9f004978:	83 ec 14             	sub    esp,0x14
9f00497b:	e8 60 18 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f004980:	81 c3 5c 48 00 00    	add    ebx,0x485c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
    size_t bytesToCopy=0;
9f004986:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:45
    size_t srcStringLen=strlenI(src);;
9f00498d:	83 ec 0c             	sub    esp,0xc
9f004990:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004993:	e8 88 02 00 00       	call   9f004c20 <strlenI>
9f004998:	83 c4 10             	add    esp,0x10
9f00499b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
    
    if (n<=srcStringLen)
9f00499e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0049a1:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0049a4:	77 08                	ja     9f0049ae <strncatI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:48
        bytesToCopy=n;
9f0049a6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0049a9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0049ac:	eb 06                	jmp    9f0049b4 <strncatI+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:50
    else
        bytesToCopy=srcStringLen;
9f0049ae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0049b1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
    
     strncpyI (dest + strlenI (dest),src,bytesToCopy);
9f0049b4:	83 ec 0c             	sub    esp,0xc
9f0049b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0049ba:	e8 61 02 00 00       	call   9f004c20 <strlenI>
9f0049bf:	83 c4 10             	add    esp,0x10
9f0049c2:	89 c2                	mov    edx,eax
9f0049c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049c7:	01 d0                	add    eax,edx
9f0049c9:	83 ec 04             	sub    esp,0x4
9f0049cc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0049cf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0049d2:	50                   	push   eax
9f0049d3:	e8 bc 03 00 00       	call   9f004d94 <strncpyI>
9f0049d8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
     return dest;
9f0049db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:54
}
9f0049de:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0049e1:	c9                   	leave  
9f0049e2:	c3                   	ret    

9f0049e3 <strncatINoCheck>:
strncatINoCheck():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:57

char *strncatINoCheck(char *dest, const char *src, size_t n)
{
9f0049e3:	55                   	push   ebp
9f0049e4:	89 e5                	mov    ebp,esp
9f0049e6:	53                   	push   ebx
9f0049e7:	83 ec 14             	sub    esp,0x14
9f0049ea:	e8 f1 17 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f0049ef:	81 c3 ed 47 00 00    	add    ebx,0x47ed
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
    size_t bytesToCopy=n;
9f0049f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0049f8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:60
    
     strncpyI (dest + strlenI (dest),src,bytesToCopy);
9f0049fb:	83 ec 0c             	sub    esp,0xc
9f0049fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004a01:	e8 1a 02 00 00       	call   9f004c20 <strlenI>
9f004a06:	83 c4 10             	add    esp,0x10
9f004a09:	89 c2                	mov    edx,eax
9f004a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a0e:	01 d0                	add    eax,edx
9f004a10:	83 ec 04             	sub    esp,0x4
9f004a13:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f004a16:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004a19:	50                   	push   eax
9f004a1a:	e8 75 03 00 00       	call   9f004d94 <strncpyI>
9f004a1f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:61
     return dest;
9f004a22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:62
}
9f004a25:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f004a28:	c9                   	leave  
9f004a29:	c3                   	ret    

9f004a2a <strncat>:
strncat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:65

VISIBLE char *strncat(char *dest, const char *src, size_t n)
{
9f004a2a:	55                   	push   ebp
9f004a2b:	89 e5                	mov    ebp,esp
9f004a2d:	83 ec 08             	sub    esp,0x8
9f004a30:	e8 5d 17 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f004a35:	05 a7 47 00 00       	add    eax,0x47a7
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:66
    return strncatINoCheck/*strncatI*/(dest, src, n);
9f004a3a:	83 ec 04             	sub    esp,0x4
9f004a3d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f004a40:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004a43:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004a46:	e8 98 ff ff ff       	call   9f0049e3 <strncatINoCheck>
9f004a4b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:67
9f004a4e:	c9                   	leave  
9f004a4f:	c3                   	ret    

9f004a50 <strcmpI>:
strcmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
   equal to or greater than S2.  */

#include "libChrisOS.h"

int strcmpI (const char *p1, const char *p2)
{
9f004a50:	55                   	push   ebp
9f004a51:	89 e5                	mov    ebp,esp
9f004a53:	56                   	push   esi
9f004a54:	53                   	push   ebx
9f004a55:	83 ec 10             	sub    esp,0x10
9f004a58:	e8 35 17 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f004a5d:	05 7f 47 00 00       	add    eax,0x477f
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:28
  register const unsigned char *s1 = (const unsigned char *) p1;
9f004a62:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:29
  register const unsigned char *s2 = (const unsigned char *) p2;
9f004a65:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
9f004a68:	89 d8                	mov    eax,ebx
9f004a6a:	8d 58 01             	lea    ebx,[eax+0x1]
9f004a6d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004a70:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
      c2 = (unsigned char) *s2++;
9f004a73:	89 f0                	mov    eax,esi
9f004a75:	8d 70 01             	lea    esi,[eax+0x1]
9f004a78:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004a7b:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:36
      if (c1 == '\0')
9f004a7e:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f004a82:	75 0e                	jne    9f004a92 <strcmpI+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
	return c1 - c2;
9f004a84:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f004a88:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f004a8c:	29 c2                	sub    edx,eax
9f004a8e:	89 d0                	mov    eax,edx
9f004a90:	eb 15                	jmp    9f004aa7 <strcmpI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39
    }
  while (c1 == c2);
9f004a92:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
9f004a96:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
9f004a99:	74 cd                	je     9f004a68 <strcmpI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:41

  return c1 - c2;
9f004a9b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f004a9f:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f004aa3:	29 c2                	sub    edx,eax
9f004aa5:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:42
}
9f004aa7:	83 c4 10             	add    esp,0x10
9f004aaa:	5b                   	pop    ebx
9f004aab:	5e                   	pop    esi
9f004aac:	5d                   	pop    ebp
9f004aad:	c3                   	ret    

9f004aae <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:45

VISIBLE int strcmp(const char *p1, const char *p2)
{
9f004aae:	55                   	push   ebp
9f004aaf:	89 e5                	mov    ebp,esp
9f004ab1:	e8 dc 16 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f004ab6:	05 26 47 00 00       	add    eax,0x4726
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:46
    return strcmpI(p1, p2);
9f004abb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004abe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004ac1:	e8 8a ff ff ff       	call   9f004a50 <strcmpI>
9f004ac6:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:47
9f004ac9:	c9                   	leave  
9f004aca:	c3                   	ret    
9f004acb:	90                   	nop

9f004acc <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
9f004acc:	55                   	push   ebp
9f004acd:	89 e5                	mov    ebp,esp
9f004acf:	83 ec 10             	sub    esp,0x10
9f004ad2:	e8 bb 16 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f004ad7:	05 05 47 00 00       	add    eax,0x4705
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
9f004adc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004adf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
9f004ae2:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
9f004ae3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004ae6:	8d 50 01             	lea    edx,[eax+0x1]
9f004ae9:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f004aec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f004aef:	8d 4a 01             	lea    ecx,[edx+0x1]
9f004af2:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f004af5:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f004af8:	88 10                	mov    BYTE PTR [eax],dl
9f004afa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004afd:	84 c0                	test   al,al
9f004aff:	75 e2                	jne    9f004ae3 <strcpy+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f004b01:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004b04:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
9f004b07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
9f004b0a:	c9                   	leave  
9f004b0b:	c3                   	ret    

9f004b0c <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
9f004b0c:	55                   	push   ebp
9f004b0d:	89 e5                	mov    ebp,esp
9f004b0f:	83 ec 10             	sub    esp,0x10
9f004b12:	e8 7b 16 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f004b17:	05 c5 46 00 00       	add    eax,0x46c5
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
9f004b1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b1f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
9f004b22:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
9f004b23:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004b26:	8d 50 01             	lea    edx,[eax+0x1]
9f004b29:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f004b2c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f004b2f:	8d 4a 01             	lea    ecx,[edx+0x1]
9f004b32:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f004b35:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f004b38:	88 10                	mov    BYTE PTR [eax],dl
9f004b3a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004b3d:	84 c0                	test   al,al
9f004b3f:	75 e2                	jne    9f004b23 <strcpyI+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f004b41:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004b44:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
9f004b47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
9f004b4a:	c9                   	leave  
9f004b4b:	c3                   	ret    

9f004b4c <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
9f004b4c:	55                   	push   ebp
9f004b4d:	89 e5                	mov    ebp,esp
9f004b4f:	83 ec 10             	sub    esp,0x10
9f004b52:	e8 3b 16 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f004b57:	05 85 46 00 00       	add    eax,0x4685
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
9f004b5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b5f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
9f004b62:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
9f004b63:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004b66:	8d 50 01             	lea    edx,[eax+0x1]
9f004b69:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f004b6c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f004b6f:	8d 4a 01             	lea    ecx,[edx+0x1]
9f004b72:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f004b75:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f004b78:	88 10                	mov    BYTE PTR [eax],dl
9f004b7a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004b7d:	84 c0                	test   al,al
9f004b7f:	74 0d                	je     9f004b8e <strcpyc+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
9f004b81:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f004b84:	8d 50 ff             	lea    edx,[eax-0x1]
9f004b87:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f004b8a:	85 c0                	test   eax,eax
9f004b8c:	75 d5                	jne    9f004b63 <strcpyc+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
9f004b8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
9f004b91:	c9                   	leave  
9f004b92:	c3                   	ret    
9f004b93:	90                   	nop

9f004b94 <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
9f004b94:	55                   	push   ebp
9f004b95:	89 e5                	mov    ebp,esp
9f004b97:	83 ec 04             	sub    esp,0x4
9f004b9a:	e8 f3 15 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f004b9f:	05 3d 46 00 00       	add    eax,0x463d
9f004ba4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004ba7:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
9f004baa:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
9f004bae:	7e 0d                	jle    9f004bbd <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
9f004bb0:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
9f004bb4:	7f 07                	jg     9f004bbd <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
9f004bb6:	b8 01 00 00 00       	mov    eax,0x1
9f004bbb:	eb 05                	jmp    9f004bc2 <check_digit+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
9f004bbd:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
9f004bc2:	c9                   	leave  
9f004bc3:	c3                   	ret    

9f004bc4 <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
9f004bc4:	55                   	push   ebp
9f004bc5:	89 e5                	mov    ebp,esp
9f004bc7:	83 ec 10             	sub    esp,0x10
9f004bca:	e8 c3 15 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f004bcf:	05 0d 46 00 00       	add    eax,0x460d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
9f004bd4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
9f004bdb:	eb 27                	jmp    9f004c04 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
9f004bdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004be0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004be3:	89 c2                	mov    edx,eax
9f004be5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004be8:	01 d0                	add    eax,edx
9f004bea:	0f be c0             	movsx  eax,al
9f004bed:	50                   	push   eax
9f004bee:	e8 a1 ff ff ff       	call   9f004b94 <check_digit>
9f004bf3:	83 c4 04             	add    esp,0x4
9f004bf6:	83 f0 01             	xor    eax,0x1
9f004bf9:	84 c0                	test   al,al
9f004bfb:	74 07                	je     9f004c04 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
9f004bfd:	b8 00 00 00 00       	mov    eax,0x0
9f004c02:	eb 17                	jmp    9f004c1b <strisnum+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18

VISIBLE bool strisnum(char* str)
{
    int cnt=0;
    
    while (*str+cnt)
9f004c04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004c07:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004c0a:	0f be d0             	movsx  edx,al
9f004c0d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004c10:	01 d0                	add    eax,edx
9f004c12:	85 c0                	test   eax,eax
9f004c14:	75 c7                	jne    9f004bdd <strisnum+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
        if (!check_digit(*str+cnt))
            return false;
    return true;
9f004c16:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
9f004c1b:	c9                   	leave  
9f004c1c:	c3                   	ret    
9f004c1d:	66 90                	xchg   ax,ax
9f004c1f:	90                   	nop

9f004c20 <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
//#include <stddef.h>
#include "libChrisOS.h"

size_t strlenI(const char* str) {
9f004c20:	55                   	push   ebp
9f004c21:	89 e5                	mov    ebp,esp
9f004c23:	83 ec 10             	sub    esp,0x10
9f004c26:	e8 67 15 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f004c2b:	05 b1 45 00 00       	add    eax,0x45b1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
          size_t ret = 0;
9f004c30:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
        while ( str[ret] != 0 )
9f004c37:	eb 04                	jmp    9f004c3d <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
9f004c39:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
//#include <stddef.h>
#include "libChrisOS.h"

size_t strlenI(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
9f004c3d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f004c40:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004c43:	01 d0                	add    eax,edx
9f004c45:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004c48:	84 c0                	test   al,al
9f004c4a:	75 ed                	jne    9f004c39 <strlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
                ret++;
        return ret;
9f004c4c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:9
}
9f004c4f:	c9                   	leave  
9f004c50:	c3                   	ret    

9f004c51 <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12

__attribute__((visibility("default"))) size_t strlen(const char* str) 
{
9f004c51:	55                   	push   ebp
9f004c52:	89 e5                	mov    ebp,esp
9f004c54:	e8 39 15 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f004c59:	05 83 45 00 00       	add    eax,0x4583
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
    return strlenI(str);
9f004c5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004c61:	e8 ba ff ff ff       	call   9f004c20 <strlenI>
9f004c66:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
}
9f004c69:	c9                   	leave  
9f004c6a:	c3                   	ret    

9f004c6b <strnlenI>:
strnlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:17

size_t strnlenI(const char* str, size_t maxlen)
{
9f004c6b:	55                   	push   ebp
9f004c6c:	89 e5                	mov    ebp,esp
9f004c6e:	83 ec 10             	sub    esp,0x10
9f004c71:	e8 1c 15 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f004c76:	05 66 45 00 00       	add    eax,0x4566
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:18
  size_t ret = 0;
9f004c7b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19
  while ( str[ret] != 0 && ret<maxlen)
9f004c82:	eb 04                	jmp    9f004c88 <strnlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:20
          ret++;
9f004c84:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19
}

size_t strnlenI(const char* str, size_t maxlen)
{
  size_t ret = 0;
  while ( str[ret] != 0 && ret<maxlen)
9f004c88:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f004c8b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004c8e:	01 d0                	add    eax,edx
9f004c90:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004c93:	84 c0                	test   al,al
9f004c95:	74 08                	je     9f004c9f <strnlenI+0x34>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19 (discriminator 1)
9f004c97:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004c9a:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f004c9d:	72 e5                	jb     9f004c84 <strnlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:21
          ret++;
  return ret;
9f004c9f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:22
}
9f004ca2:	c9                   	leave  
9f004ca3:	c3                   	ret    

9f004ca4 <strnlen>:
strnlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:25

VISIBLE size_t strnlen(const char* str, int maxlen)
{
9f004ca4:	55                   	push   ebp
9f004ca5:	89 e5                	mov    ebp,esp
9f004ca7:	e8 e6 14 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f004cac:	05 30 45 00 00       	add    eax,0x4530
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:26
    return strnlenI(str, maxlen);
9f004cb1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004cb4:	50                   	push   eax
9f004cb5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004cb8:	e8 ae ff ff ff       	call   9f004c6b <strnlenI>
9f004cbd:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:27
9f004cc0:	c9                   	leave  
9f004cc1:	c3                   	ret    
9f004cc2:	66 90                	xchg   ax,ax

9f004cc4 <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
9f004cc4:	55                   	push   ebp
9f004cc5:	89 e5                	mov    ebp,esp
9f004cc7:	e8 c6 14 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f004ccc:	05 10 45 00 00       	add    eax,0x4510
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
9f004cd1:	eb 4b                	jmp    9f004d1e <strncmp+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
9f004cd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004cd6:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f004cd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004cdc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004cdf:	38 c2                	cmp    dl,al
9f004ce1:	74 1e                	je     9f004d01 <strncmp+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f004ce3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004ce6:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f004ce9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004cec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004cef:	38 c2                	cmp    dl,al
9f004cf1:	73 07                	jae    9f004cfa <strncmp+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
9f004cf3:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f004cf8:	eb 2f                	jmp    9f004d29 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
9f004cfa:	b8 01 00 00 00       	mov    eax,0x1
9f004cff:	eb 28                	jmp    9f004d29 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
9f004d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004d04:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004d07:	84 c0                	test   al,al
9f004d09:	75 07                	jne    9f004d12 <strncmp+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
9f004d0b:	b8 00 00 00 00       	mov    eax,0x0
9f004d10:	eb 17                	jmp    9f004d29 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f004d12:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f004d16:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f004d1a:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
9f004d1e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f004d22:	75 af                	jne    9f004cd3 <strncmp+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f004d24:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
9f004d29:	5d                   	pop    ebp
9f004d2a:	c3                   	ret    

9f004d2b <strncmpI>:
strncmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:23

int strncmpI(const char *s1, const char *s2, size_t n)
{
9f004d2b:	55                   	push   ebp
9f004d2c:	89 e5                	mov    ebp,esp
9f004d2e:	e8 5f 14 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f004d33:	05 a9 44 00 00       	add    eax,0x44a9
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
9f004d38:	eb 4b                	jmp    9f004d85 <strncmpI+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:25
	if (*s1 != *s2)
9f004d3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004d3d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f004d40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004d43:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004d46:	38 c2                	cmp    dl,al
9f004d48:	74 1e                	je     9f004d68 <strncmpI+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f004d4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004d4d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f004d50:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004d53:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004d56:	38 c2                	cmp    dl,al
9f004d58:	73 07                	jae    9f004d61 <strncmpI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 1)
9f004d5a:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f004d5f:	eb 2f                	jmp    9f004d90 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 2)
9f004d61:	b8 01 00 00 00       	mov    eax,0x1
9f004d66:	eb 28                	jmp    9f004d90 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:27
	else if (*s1 == '\0')
9f004d68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004d6b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004d6e:	84 c0                	test   al,al
9f004d70:	75 07                	jne    9f004d79 <strncmpI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:28
	    return 0;
9f004d72:	b8 00 00 00 00       	mov    eax,0x0
9f004d77:	eb 17                	jmp    9f004d90 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    return 0;
}

int strncmpI(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f004d79:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f004d7d:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f004d81:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24 (discriminator 1)
9f004d85:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f004d89:	75 af                	jne    9f004d3a <strncmpI+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:29
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f004d8b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:30
}
9f004d90:	5d                   	pop    ebp
9f004d91:	c3                   	ret    
9f004d92:	66 90                	xchg   ax,ax

9f004d94 <strncpyI>:
strncpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
9f004d94:	55                   	push   ebp
9f004d95:	89 e5                	mov    ebp,esp
9f004d97:	83 ec 10             	sub    esp,0x10
9f004d9a:	e8 f3 13 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f004d9f:	05 3d 44 00 00       	add    eax,0x443d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
9f004da4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004da7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
9f004daa:	eb 1b                	jmp    9f004dc7 <strncpyI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
9f004dac:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004daf:	8d 50 01             	lea    edx,[eax+0x1]
9f004db2:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f004db5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f004db8:	8d 4a 01             	lea    ecx,[edx+0x1]
9f004dbb:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f004dbe:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f004dc1:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
9f004dc3:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
9f004dc7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f004dcb:	74 1c                	je     9f004de9 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
9f004dcd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004dd0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004dd3:	84 c0                	test   al,al
9f004dd5:	75 d5                	jne    9f004dac <strncpyI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f004dd7:	eb 10                	jmp    9f004de9 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
9f004dd9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004ddc:	8d 50 01             	lea    edx,[eax+0x1]
9f004ddf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f004de2:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
9f004de5:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f004de9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f004ded:	75 ea                	jne    9f004dd9 <strncpyI+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    if (n==0)
9f004def:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f004df3:	75 06                	jne    9f004dfb <strncpyI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
        *s='\0';
9f004df5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004df8:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:26
    return s1;
9f004dfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:27
}
9f004dfe:	c9                   	leave  
9f004dff:	c3                   	ret    

9f004e00 <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:30

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
9f004e00:	55                   	push   ebp
9f004e01:	89 e5                	mov    ebp,esp
9f004e03:	e8 8a 13 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f004e08:	05 d4 43 00 00       	add    eax,0x43d4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:31
    return strncpyI(s1, s2, n);
9f004e0d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f004e10:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004e13:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004e16:	e8 79 ff ff ff       	call   9f004d94 <strncpyI>
9f004e1b:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:32
}
9f004e1e:	c9                   	leave  
9f004e1f:	c3                   	ret    

9f004e20 <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
9f004e20:	55                   	push   ebp
9f004e21:	89 e5                	mov    ebp,esp
9f004e23:	57                   	push   edi
9f004e24:	56                   	push   esi
9f004e25:	53                   	push   ebx
9f004e26:	83 ec 08             	sub    esp,0x8
9f004e29:	e8 64 13 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f004e2e:	05 ae 43 00 00       	add    eax,0x43ae
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
9f004e33:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f004e36:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
9f004e3d:	89 f0                	mov    eax,esi
9f004e3f:	8d 70 01             	lea    esi,[eax+0x1]
9f004e42:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004e45:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
9f004e48:	83 fb 20             	cmp    ebx,0x20
9f004e4b:	74 f0                	je     9f004e3d <strtoul+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
9f004e4d:	83 fb 2d             	cmp    ebx,0x2d
9f004e50:	75 14                	jne    9f004e66 <strtoul+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
9f004e52:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
9f004e59:	89 f0                	mov    eax,esi
9f004e5b:	8d 70 01             	lea    esi,[eax+0x1]
9f004e5e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004e61:	0f be d8             	movsx  ebx,al
9f004e64:	eb 10                	jmp    9f004e76 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
9f004e66:	83 fb 2b             	cmp    ebx,0x2b
9f004e69:	75 0b                	jne    9f004e76 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
9f004e6b:	89 f0                	mov    eax,esi
9f004e6d:	8d 70 01             	lea    esi,[eax+0x1]
9f004e70:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004e73:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
9f004e76:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f004e7a:	74 06                	je     9f004e82 <strtoul+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
9f004e7c:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f004e80:	75 26                	jne    9f004ea8 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
9f004e82:	83 fb 30             	cmp    ebx,0x30
9f004e85:	75 21                	jne    9f004ea8 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f004e87:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f004e8a:	3c 78                	cmp    al,0x78
9f004e8c:	74 07                	je     9f004e95 <strtoul+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
9f004e8e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f004e91:	3c 58                	cmp    al,0x58
9f004e93:	75 13                	jne    9f004ea8 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
9f004e95:	8d 46 01             	lea    eax,[esi+0x1]
9f004e98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004e9b:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
9f004e9e:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
9f004ea1:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
9f004ea8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f004eac:	75 14                	jne    9f004ec2 <strtoul+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
9f004eae:	83 fb 30             	cmp    ebx,0x30
9f004eb1:	75 07                	jne    9f004eba <strtoul+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
9f004eb3:	b8 08 00 00 00       	mov    eax,0x8
9f004eb8:	eb 05                	jmp    9f004ebf <strtoul+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
9f004eba:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
9f004ebf:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
9f004ec2:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f004ec5:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f004eca:	ba 00 00 00 00       	mov    edx,0x0
9f004ecf:	f7 f1                	div    ecx
9f004ed1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
9f004ed4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f004ed7:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f004edc:	ba 00 00 00 00       	mov    edx,0x0
9f004ee1:	f7 f1                	div    ecx
9f004ee3:	89 d0                	mov    eax,edx
9f004ee5:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
9f004ee7:	bf 00 00 00 00       	mov    edi,0x0
9f004eec:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
9f004ef1:	8d 43 d0             	lea    eax,[ebx-0x30]
9f004ef4:	83 f8 09             	cmp    eax,0x9
9f004ef7:	77 05                	ja     9f004efe <strtoul+0xde>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
9f004ef9:	83 eb 30             	sub    ebx,0x30
9f004efc:	eb 25                	jmp    9f004f23 <strtoul+0x103>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
9f004efe:	89 d8                	mov    eax,ebx
9f004f00:	83 c8 20             	or     eax,0x20
9f004f03:	83 e8 61             	sub    eax,0x61
9f004f06:	83 f8 19             	cmp    eax,0x19
9f004f09:	77 56                	ja     9f004f61 <strtoul+0x141>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f004f0b:	83 fb 40             	cmp    ebx,0x40
9f004f0e:	7e 0c                	jle    9f004f1c <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
9f004f10:	83 fb 5a             	cmp    ebx,0x5a
9f004f13:	7f 07                	jg     9f004f1c <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
9f004f15:	b8 37 00 00 00       	mov    eax,0x37
9f004f1a:	eb 05                	jmp    9f004f21 <strtoul+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
9f004f1c:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
9f004f21:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
9f004f23:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f004f26:	7d 3c                	jge    9f004f64 <strtoul+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f004f28:	89 c8                	mov    eax,ecx
9f004f2a:	85 c0                	test   eax,eax
9f004f2c:	78 10                	js     9f004f3e <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
9f004f2e:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f004f31:	77 0b                	ja     9f004f3e <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
9f004f33:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f004f36:	75 0d                	jne    9f004f45 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
9f004f38:	89 d0                	mov    eax,edx
9f004f3a:	39 c3                	cmp    ebx,eax
9f004f3c:	7e 07                	jle    9f004f45 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
9f004f3e:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f004f43:	eb 0f                	jmp    9f004f54 <strtoul+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
9f004f45:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
9f004f4a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f004f4d:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
9f004f50:	89 d8                	mov    eax,ebx
9f004f52:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f004f54:	89 f0                	mov    eax,esi
9f004f56:	8d 70 01             	lea    esi,[eax+0x1]
9f004f59:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004f5c:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f004f5f:	eb 90                	jmp    9f004ef1 <strtoul+0xd1>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f004f61:	90                   	nop
9f004f62:	eb 01                	jmp    9f004f65 <strtoul+0x145>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
9f004f64:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f004f65:	89 c8                	mov    eax,ecx
9f004f67:	85 c0                	test   eax,eax
9f004f69:	79 07                	jns    9f004f72 <strtoul+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
9f004f6b:	bf ff ff ff ff       	mov    edi,0xffffffff
9f004f70:	eb 08                	jmp    9f004f7a <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
9f004f72:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f004f76:	74 02                	je     9f004f7a <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
9f004f78:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
9f004f7a:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f004f7e:	74 13                	je     9f004f93 <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
9f004f80:	89 c8                	mov    eax,ecx
9f004f82:	85 c0                	test   eax,eax
9f004f84:	74 05                	je     9f004f8b <strtoul+0x16b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
9f004f86:	8d 46 ff             	lea    eax,[esi-0x1]
9f004f89:	eb 03                	jmp    9f004f8e <strtoul+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
9f004f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
9f004f8e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f004f91:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
9f004f93:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
9f004f95:	83 c4 08             	add    esp,0x8
9f004f98:	5b                   	pop    ebx
9f004f99:	5e                   	pop    esi
9f004f9a:	5f                   	pop    edi
9f004f9b:	5d                   	pop    ebp
9f004f9c:	c3                   	ret    
9f004f9d:	66 90                	xchg   ax,ax
9f004f9f:	90                   	nop

9f004fa0 <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
9f004fa0:	55                   	push   ebp
9f004fa1:	89 e5                	mov    ebp,esp
9f004fa3:	e8 ea 11 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f004fa8:	05 34 42 00 00       	add    eax,0x4234
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
9f004fad:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f004fb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004fb3:	01 d0                	add    eax,edx
9f004fb5:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
9f004fb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
9f004fbb:	5d                   	pop    ebp
9f004fbc:	c3                   	ret    
9f004fbd:	66 90                	xchg   ax,ax
9f004fbf:	90                   	nop

9f004fc0 <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
9f004fc0:	55                   	push   ebp
9f004fc1:	89 e5                	mov    ebp,esp
9f004fc3:	57                   	push   edi
9f004fc4:	56                   	push   esi
9f004fc5:	53                   	push   ebx
9f004fc6:	83 ec 0c             	sub    esp,0xc
9f004fc9:	e8 c4 11 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f004fce:	05 0e 42 00 00       	add    eax,0x420e
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
9f004fd3:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f004fd6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
9f004fdd:	89 f0                	mov    eax,esi
9f004fdf:	8d 70 01             	lea    esi,[eax+0x1]
9f004fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004fe5:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
9f004fe8:	83 fb 20             	cmp    ebx,0x20
9f004feb:	74 f0                	je     9f004fdd <strtol+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
9f004fed:	83 fb 2d             	cmp    ebx,0x2d
9f004ff0:	75 14                	jne    9f005006 <strtol+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
9f004ff2:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
9f004ff9:	89 f0                	mov    eax,esi
9f004ffb:	8d 70 01             	lea    esi,[eax+0x1]
9f004ffe:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f005001:	0f be d8             	movsx  ebx,al
9f005004:	eb 10                	jmp    9f005016 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
9f005006:	83 fb 2b             	cmp    ebx,0x2b
9f005009:	75 0b                	jne    9f005016 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
9f00500b:	89 f0                	mov    eax,esi
9f00500d:	8d 70 01             	lea    esi,[eax+0x1]
9f005010:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f005013:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
9f005016:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f00501a:	74 06                	je     9f005022 <strtol+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
9f00501c:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f005020:	75 26                	jne    9f005048 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
9f005022:	83 fb 30             	cmp    ebx,0x30
9f005025:	75 21                	jne    9f005048 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f005027:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f00502a:	3c 78                	cmp    al,0x78
9f00502c:	74 07                	je     9f005035 <strtol+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
9f00502e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f005031:	3c 58                	cmp    al,0x58
9f005033:	75 13                	jne    9f005048 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
9f005035:	8d 46 01             	lea    eax,[esi+0x1]
9f005038:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00503b:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
9f00503e:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
9f005041:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
9f005048:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f00504c:	75 14                	jne    9f005062 <strtol+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
9f00504e:	83 fb 30             	cmp    ebx,0x30
9f005051:	75 07                	jne    9f00505a <strtol+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
9f005053:	b8 08 00 00 00       	mov    eax,0x8
9f005058:	eb 05                	jmp    9f00505f <strtol+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
9f00505a:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
9f00505f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
9f005062:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f005066:	74 07                	je     9f00506f <strtol+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
9f005068:	b8 00 00 00 80       	mov    eax,0x80000000
9f00506d:	eb 05                	jmp    9f005074 <strtol+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
9f00506f:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
9f005074:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f005077:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f00507a:	ba 00 00 00 00       	mov    edx,0x0
9f00507f:	f7 f1                	div    ecx
9f005081:	89 d1                	mov    ecx,edx
9f005083:	89 c8                	mov    eax,ecx
9f005085:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
9f005088:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
9f00508b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00508e:	ba 00 00 00 00       	mov    edx,0x0
9f005093:	f7 f7                	div    edi
9f005095:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
9f005098:	bf 00 00 00 00       	mov    edi,0x0
9f00509d:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
9f0050a2:	8d 43 d0             	lea    eax,[ebx-0x30]
9f0050a5:	83 f8 09             	cmp    eax,0x9
9f0050a8:	77 05                	ja     9f0050af <strtol+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
9f0050aa:	83 eb 30             	sub    ebx,0x30
9f0050ad:	eb 25                	jmp    9f0050d4 <strtol+0x114>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
9f0050af:	89 d8                	mov    eax,ebx
9f0050b1:	83 c8 20             	or     eax,0x20
9f0050b4:	83 e8 61             	sub    eax,0x61
9f0050b7:	83 f8 19             	cmp    eax,0x19
9f0050ba:	77 55                	ja     9f005111 <strtol+0x151>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f0050bc:	83 fb 40             	cmp    ebx,0x40
9f0050bf:	7e 0c                	jle    9f0050cd <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
9f0050c1:	83 fb 5a             	cmp    ebx,0x5a
9f0050c4:	7f 07                	jg     9f0050cd <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
9f0050c6:	b8 37 00 00 00       	mov    eax,0x37
9f0050cb:	eb 05                	jmp    9f0050d2 <strtol+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
9f0050cd:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
9f0050d2:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
9f0050d4:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f0050d7:	7d 3b                	jge    9f005114 <strtol+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f0050d9:	89 c8                	mov    eax,ecx
9f0050db:	85 c0                	test   eax,eax
9f0050dd:	78 0f                	js     9f0050ee <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
9f0050df:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f0050e2:	77 0a                	ja     9f0050ee <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
9f0050e4:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f0050e7:	75 0c                	jne    9f0050f5 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
9f0050e9:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
9f0050ec:	7e 07                	jle    9f0050f5 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
9f0050ee:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f0050f3:	eb 0f                	jmp    9f005104 <strtol+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
9f0050f5:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
9f0050fa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0050fd:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
9f005100:	89 d8                	mov    eax,ebx
9f005102:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f005104:	89 f0                	mov    eax,esi
9f005106:	8d 70 01             	lea    esi,[eax+0x1]
9f005109:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00510c:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f00510f:	eb 91                	jmp    9f0050a2 <strtol+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f005111:	90                   	nop
9f005112:	eb 01                	jmp    9f005115 <strtol+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
9f005114:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f005115:	89 c8                	mov    eax,ecx
9f005117:	85 c0                	test   eax,eax
9f005119:	79 16                	jns    9f005131 <strtol+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
9f00511b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00511f:	74 07                	je     9f005128 <strtol+0x168>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
9f005121:	b8 00 00 00 80       	mov    eax,0x80000000
9f005126:	eb 05                	jmp    9f00512d <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
9f005128:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
9f00512d:	89 c7                	mov    edi,eax
9f00512f:	eb 08                	jmp    9f005139 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
9f005131:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f005135:	74 02                	je     9f005139 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
9f005137:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
9f005139:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f00513d:	74 13                	je     9f005152 <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
9f00513f:	89 c8                	mov    eax,ecx
9f005141:	85 c0                	test   eax,eax
9f005143:	74 05                	je     9f00514a <strtol+0x18a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
9f005145:	8d 46 ff             	lea    eax,[esi-0x1]
9f005148:	eb 03                	jmp    9f00514d <strtol+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
9f00514a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
9f00514d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f005150:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
9f005152:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
9f005154:	83 c4 0c             	add    esp,0xc
9f005157:	5b                   	pop    ebx
9f005158:	5e                   	pop    esi
9f005159:	5f                   	pop    edi
9f00515a:	5d                   	pop    ebp
9f00515b:	c3                   	ret    

9f00515c <strtrimI>:
strtrimI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

void strtrimI(char *input)
{
9f00515c:	55                   	push   ebp
9f00515d:	89 e5                	mov    ebp,esp
9f00515f:	53                   	push   ebx
9f005160:	83 ec 14             	sub    esp,0x14
9f005163:	e8 2a 10 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f005168:	05 74 40 00 00       	add    eax,0x4074
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
9f00516d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f005170:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f005173:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f005176:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f005179:	eb 04                	jmp    9f00517f <strtrimI+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
9f00517b:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *dst = input, *src = input;
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f00517f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f005182:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f005185:	80 fa 20             	cmp    dl,0x20
9f005188:	74 f1                	je     9f00517b <strtrimI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
      ++src;
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
9f00518a:	83 ec 0c             	sub    esp,0xc
9f00518d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f005190:	89 c3                	mov    ebx,eax
9f005192:	e8 89 fa ff ff       	call   9f004c20 <strlenI>
9f005197:	83 c4 10             	add    esp,0x10
9f00519a:	8d 50 ff             	lea    edx,[eax-0x1]
9f00519d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0051a0:	01 d0                	add    eax,edx
9f0051a2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
9f0051a5:	eb 0c                	jmp    9f0051b3 <strtrimI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
9f0051a7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0051aa:	8d 50 ff             	lea    edx,[eax-0x1]
9f0051ad:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
9f0051b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
   while (end > src && *end==' ')
9f0051b3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0051b6:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0051b9:	76 0a                	jbe    9f0051c5 <strtrimI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
9f0051bb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0051be:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0051c1:	3c 20                	cmp    al,0x20
9f0051c3:	74 e2                	je     9f0051a7 <strtrimI+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
      *end-- = 0;
   }

   // Move if needed.
   //
   if (src != dst)
9f0051c5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0051c8:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0051cb:	74 1f                	je     9f0051ec <strtrimI+0x90>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
9f0051cd:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
9f0051ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0051d1:	8d 50 01             	lea    edx,[eax+0x1]
9f0051d4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0051d7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0051da:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0051dd:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
9f0051e0:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0051e3:	88 10                	mov    BYTE PTR [eax],dl
9f0051e5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0051e8:	84 c0                	test   al,al
9f0051ea:	75 e2                	jne    9f0051ce <strtrimI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
9f0051ec:	90                   	nop
9f0051ed:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0051f0:	c9                   	leave  
9f0051f1:	c3                   	ret    

9f0051f2 <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:32

__attribute__((visibility("default"))) void strtrim(char *input)
{
9f0051f2:	55                   	push   ebp
9f0051f3:	89 e5                	mov    ebp,esp
9f0051f5:	83 ec 08             	sub    esp,0x8
9f0051f8:	e8 95 0f 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0051fd:	05 df 3f 00 00       	add    eax,0x3fdf
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:33
    return strtrimI(input);
9f005202:	83 ec 0c             	sub    esp,0xc
9f005205:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f005208:	e8 4f ff ff ff       	call   9f00515c <strtrimI>
9f00520d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:34
}
9f005210:	c9                   	leave  
9f005211:	c3                   	ret    
9f005212:	66 90                	xchg   ax,ax

9f005214 <strreplaceI>:
strreplaceI():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:14



///NOTE: outString has to be big enough to hold the modified string
char *strreplaceI(const char *in, const char *pattern, const char *by, char *outString)
{
9f005214:	55                   	push   ebp
9f005215:	89 e5                	mov    ebp,esp
9f005217:	56                   	push   esi
9f005218:	53                   	push   ebx
9f005219:	83 ec 10             	sub    esp,0x10
9f00521c:	e8 bf 0f 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f005221:	81 c3 bb 3f 00 00    	add    ebx,0x3fbb
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:15
    size_t outsize = strlenI(in) + 1;
9f005227:	83 ec 0c             	sub    esp,0xc
9f00522a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00522d:	e8 ee f9 ff ff       	call   9f004c20 <strlenI>
9f005232:	83 c4 10             	add    esp,0x10
9f005235:	83 c0 01             	add    eax,0x1
9f005238:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:18
    // TODO maybe avoid reallocing by counting the non-overlapping occurences of pattern
    // use this to iterate over the output
    size_t resoffset = 0;
9f00523b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:20
    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f005242:	e9 ac 00 00 00       	jmp    9f0052f3 <strreplaceI+0xdf>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:22
        // copy everything up to the pattern
        memcpyI(outString + resoffset, in, needle - in);
9f005247:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00524a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00524d:	29 c2                	sub    edx,eax
9f00524f:	89 d0                	mov    eax,edx
9f005251:	89 c1                	mov    ecx,eax
9f005253:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f005256:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f005259:	01 d0                	add    eax,edx
9f00525b:	83 ec 04             	sub    esp,0x4
9f00525e:	51                   	push   ecx
9f00525f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f005262:	50                   	push   eax
9f005263:	e8 e8 d6 ff ff       	call   9f002950 <memcpyI>
9f005268:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:23
        resoffset += needle - in;
9f00526b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00526e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005271:	29 c2                	sub    edx,eax
9f005273:	89 d0                	mov    eax,edx
9f005275:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:26

        // skip the pattern in the input-string
        in = needle + strlenI(pattern);
9f005278:	83 ec 0c             	sub    esp,0xc
9f00527b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00527e:	e8 9d f9 ff ff       	call   9f004c20 <strlenI>
9f005283:	83 c4 10             	add    esp,0x10
9f005286:	89 c2                	mov    edx,eax
9f005288:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00528b:	01 d0                	add    eax,edx
9f00528d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:29

        // adjust space for replacement
        outsize = outsize - strlenI(pattern) + strlenI(by);
9f005290:	83 ec 0c             	sub    esp,0xc
9f005293:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f005296:	e8 85 f9 ff ff       	call   9f004c20 <strlenI>
9f00529b:	83 c4 10             	add    esp,0x10
9f00529e:	89 c2                	mov    edx,eax
9f0052a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0052a3:	29 d0                	sub    eax,edx
9f0052a5:	89 c6                	mov    esi,eax
9f0052a7:	83 ec 0c             	sub    esp,0xc
9f0052aa:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0052ad:	e8 6e f9 ff ff       	call   9f004c20 <strlenI>
9f0052b2:	83 c4 10             	add    esp,0x10
9f0052b5:	01 f0                	add    eax,esi
9f0052b7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:32

        // copy the pattern
        memcpyI(outString + resoffset, by, strlenI(by));
9f0052ba:	83 ec 0c             	sub    esp,0xc
9f0052bd:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0052c0:	e8 5b f9 ff ff       	call   9f004c20 <strlenI>
9f0052c5:	83 c4 10             	add    esp,0x10
9f0052c8:	89 c1                	mov    ecx,eax
9f0052ca:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f0052cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0052d0:	01 d0                	add    eax,edx
9f0052d2:	83 ec 04             	sub    esp,0x4
9f0052d5:	51                   	push   ecx
9f0052d6:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0052d9:	50                   	push   eax
9f0052da:	e8 71 d6 ff ff       	call   9f002950 <memcpyI>
9f0052df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:33
        resoffset += strlenI(by);
9f0052e2:	83 ec 0c             	sub    esp,0xc
9f0052e5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0052e8:	e8 33 f9 ff ff       	call   9f004c20 <strlenI>
9f0052ed:	83 c4 10             	add    esp,0x10
9f0052f0:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:20
    size_t outsize = strlenI(in) + 1;
    // TODO maybe avoid reallocing by counting the non-overlapping occurences of pattern
    // use this to iterate over the output
    size_t resoffset = 0;
    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f0052f3:	83 ec 08             	sub    esp,0x8
9f0052f6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0052f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0052fc:	e8 f5 00 00 00       	call   9f0053f6 <strstrI>
9f005301:	83 c4 10             	add    esp,0x10
9f005304:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f005307:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f00530b:	0f 85 36 ff ff ff    	jne    9f005247 <strreplaceI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:37
        memcpyI(outString + resoffset, by, strlenI(by));
        resoffset += strlenI(by);
    }

    // copy the remaining input
    strcpyI(outString + resoffset, in);
9f005311:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f005314:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f005317:	01 d0                	add    eax,edx
9f005319:	83 ec 08             	sub    esp,0x8
9f00531c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00531f:	50                   	push   eax
9f005320:	e8 e7 f7 ff ff       	call   9f004b0c <strcpyI>
9f005325:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:39

    return outString;
9f005328:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:40
}
9f00532b:	8d 65 f8             	lea    esp,[ebp-0x8]
9f00532e:	5b                   	pop    ebx
9f00532f:	5e                   	pop    esi
9f005330:	5d                   	pop    ebp
9f005331:	c3                   	ret    

9f005332 <strreplace>:
strreplace():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:43

VISIBLE char *strreplace(const char *in, const char *pattern, const char *by, char *outString)
{
9f005332:	55                   	push   ebp
9f005333:	89 e5                	mov    ebp,esp
9f005335:	83 ec 08             	sub    esp,0x8
9f005338:	e8 55 0e 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f00533d:	05 9f 3e 00 00       	add    eax,0x3e9f
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:44
    return strreplaceI(in, pattern, by, outString);
9f005342:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f005345:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f005348:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00534b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00534e:	e8 c1 fe ff ff       	call   9f005214 <strreplaceI>
9f005353:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:45
}
9f005356:	c9                   	leave  
9f005357:	c3                   	ret    

9f005358 <strnstrI>:
strnstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:53

#include "strings.h"
#include "common.h"

char* strnstrI(char* string, char* substring, int length)
{
9f005358:	55                   	push   ebp
9f005359:	89 e5                	mov    ebp,esp
9f00535b:	56                   	push   esi
9f00535c:	53                   	push   ebx
9f00535d:	83 ec 10             	sub    esp,0x10
9f005360:	e8 2d 0e 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f005365:	05 77 3e 00 00       	add    eax,0x3e77
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:60

    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */
    int len=length;
9f00536a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00536d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
    
    b = substring;
9f005370:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:63
    if (*b == 0) {
9f005373:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f005376:	84 c0                	test   al,al
9f005378:	75 66                	jne    9f0053e0 <strnstrI+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64
	return string;
9f00537a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00537d:	eb 70                	jmp    9f0053ef <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:67
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f00537f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005382:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f005385:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f005388:	38 c2                	cmp    dl,al
9f00538a:	74 12                	je     9f00539e <strnstrI+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
            if (len--<=0)
9f00538c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00538f:	8d 50 ff             	lea    edx,[eax-0x1]
9f005392:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f005395:	85 c0                	test   eax,eax
9f005397:	7f 42                	jg     9f0053db <strnstrI+0x83>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:69
                return string;
9f005399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00539c:	eb 51                	jmp    9f0053ef <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:72
	    continue;
	}
	a = string;
9f00539e:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
	while (1) {
	    if (*b == 0) {
9f0053a1:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0053a4:	84 c0                	test   al,al
9f0053a6:	75 05                	jne    9f0053ad <strnstrI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:75
		return string;
9f0053a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0053ab:	eb 42                	jmp    9f0053ef <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
	    }
            if (len--<=0)
9f0053ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0053b0:	8d 50 ff             	lea    edx,[eax-0x1]
9f0053b3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0053b6:	85 c0                	test   eax,eax
9f0053b8:	7f 05                	jg     9f0053bf <strnstrI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:78
                return string;
9f0053ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0053bd:	eb 30                	jmp    9f0053ef <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
	    if (*a++ != *b++) {
9f0053bf:	89 f0                	mov    eax,esi
9f0053c1:	8d 70 01             	lea    esi,[eax+0x1]
9f0053c4:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0053c7:	89 d8                	mov    eax,ebx
9f0053c9:	8d 58 01             	lea    ebx,[eax+0x1]
9f0053cc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0053cf:	38 c2                	cmp    dl,al
9f0053d1:	75 02                	jne    9f0053d5 <strnstrI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:82
		break;
	    }
	}
9f0053d3:	eb cc                	jmp    9f0053a1 <strnstrI+0x49>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:80
		return string;
	    }
            if (len--<=0)
                return string;
	    if (*a++ != *b++) {
		break;
9f0053d5:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:83
	    }
	}
	b = substring;
9f0053d6:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0053d9:	eb 01                	jmp    9f0053dc <strnstrI+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:70
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
            if (len--<=0)
                return string;
	    continue;
9f0053db:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    
    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f0053dc:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66 (discriminator 1)
9f0053e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0053e3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0053e6:	84 c0                	test   al,al
9f0053e8:	75 95                	jne    9f00537f <strnstrI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:85
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f0053ea:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:86
}
9f0053ef:	83 c4 10             	add    esp,0x10
9f0053f2:	5b                   	pop    ebx
9f0053f3:	5e                   	pop    esi
9f0053f4:	5d                   	pop    ebp
9f0053f5:	c3                   	ret    

9f0053f6 <strstrI>:
strstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:89

char* strstrI(const char* string, const char* substring)
{
9f0053f6:	55                   	push   ebp
9f0053f7:	89 e5                	mov    ebp,esp
9f0053f9:	56                   	push   esi
9f0053fa:	53                   	push   ebx
9f0053fb:	e8 92 0d 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f005400:	05 dc 3d 00 00       	add    eax,0x3ddc
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:97
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
9f005405:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:98
    if (*b == 0) {
9f005408:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f00540b:	84 c0                	test   al,al
9f00540d:	75 42                	jne    9f005451 <strstrI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:99
	return string;
9f00540f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005412:	eb 4c                	jmp    9f005460 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:102
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f005414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005417:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f00541a:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f00541d:	38 c2                	cmp    dl,al
9f00541f:	75 2b                	jne    9f00544c <strstrI+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:105
	    continue;
	}
	a = string;
9f005421:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:107
	while (1) {
	    if (*b == 0) {
9f005424:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f005427:	84 c0                	test   al,al
9f005429:	75 05                	jne    9f005430 <strstrI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:108
		return string;
9f00542b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00542e:	eb 30                	jmp    9f005460 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:110
	    }
	    if (*a++ != *b++) {
9f005430:	89 f0                	mov    eax,esi
9f005432:	8d 70 01             	lea    esi,[eax+0x1]
9f005435:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f005438:	89 d8                	mov    eax,ebx
9f00543a:	8d 58 01             	lea    ebx,[eax+0x1]
9f00543d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f005440:	38 c2                	cmp    dl,al
9f005442:	75 02                	jne    9f005446 <strstrI+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:113
		break;
	    }
	}
9f005444:	eb de                	jmp    9f005424 <strstrI+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:111
	while (1) {
	    if (*b == 0) {
		return string;
	    }
	    if (*a++ != *b++) {
		break;
9f005446:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:114
	    }
	}
	b = substring;
9f005447:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f00544a:	eb 01                	jmp    9f00544d <strstrI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:103
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
	    continue;
9f00544c:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:101

    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f00544d:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:101 (discriminator 1)
9f005451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f005457:	84 c0                	test   al,al
9f005459:	75 b9                	jne    9f005414 <strstrI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:116
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f00545b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:117
}
9f005460:	5b                   	pop    ebx
9f005461:	5e                   	pop    esi
9f005462:	5d                   	pop    ebp
9f005463:	c3                   	ret    

9f005464 <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:120

VISIBLE char* strstr(const char* string, const char* substring)
{
9f005464:	55                   	push   ebp
9f005465:	89 e5                	mov    ebp,esp
9f005467:	e8 26 0d 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f00546c:	05 70 3d 00 00       	add    eax,0x3d70
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:121
    return strstrI(string, substring);
9f005471:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f005474:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f005477:	e8 7a ff ff ff       	call   9f0053f6 <strstrI>
9f00547c:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:122
}
9f00547f:	c9                   	leave  
9f005480:	c3                   	ret    
9f005481:	66 90                	xchg   ax,ax
9f005483:	90                   	nop

9f005484 <getticks>:
getticks():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t getticks(/*time_t* arg*/)
{
9f005484:	55                   	push   ebp
9f005485:	89 e5                	mov    ebp,esp
9f005487:	56                   	push   esi
9f005488:	53                   	push   ebx
9f005489:	83 ec 10             	sub    esp,0x10
9f00548c:	e8 01 0d 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f005491:	05 4b 3d 00 00       	add    eax,0x3d4b
/home/yogi/src/os/aproj/libChrisOS/src/time.c:28
    uint32_t retVal=0;
9f005496:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:29
    GET_TICKS(retVal);
9f00549d:	b8 70 01 00 00       	mov    eax,0x170
9f0054a2:	bb 00 00 00 00       	mov    ebx,0x0
9f0054a7:	b9 00 00 00 00       	mov    ecx,0x0
9f0054ac:	ba 00 00 00 00       	mov    edx,0x0
9f0054b1:	be 00 00 00 00       	mov    esi,0x0
9f0054b6:	e8 fc ff ff ff       	call   9f0054b7 <getticks+0x33>
9f0054bb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:30
    return (time_t)retVal;
9f0054be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:31
}
9f0054c1:	83 c4 10             	add    esp,0x10
9f0054c4:	5b                   	pop    ebx
9f0054c5:	5e                   	pop    esi
9f0054c6:	5d                   	pop    ebp
9f0054c7:	c3                   	ret    

9f0054c8 <gmtime_rI>:
gmtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:35


struct tm *gmtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f0054c8:	55                   	push   ebp
9f0054c9:	89 e5                	mov    ebp,esp
9f0054cb:	53                   	push   ebx
9f0054cc:	83 ec 10             	sub    esp,0x10
9f0054cf:	e8 0c 0d 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f0054d4:	81 c3 08 3d 00 00    	add    ebx,0x3d08
/home/yogi/src/os/aproj/libChrisOS/src/time.c:36
  time_t time = *timer;
9f0054da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0054dd:	8b 00                	mov    eax,DWORD PTR [eax]
9f0054df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:38
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
9f0054e2:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40

  dayclock = (unsigned long) time % SECS_DAY;
9f0054e9:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f0054ec:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f0054f1:	89 c8                	mov    eax,ecx
9f0054f3:	f7 e2                	mul    edx
9f0054f5:	89 d0                	mov    eax,edx
9f0054f7:	c1 e8 10             	shr    eax,0x10
9f0054fa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f0054fd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f005500:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f005506:	29 c1                	sub    ecx,eax
9f005508:	89 c8                	mov    eax,ecx
9f00550a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  dayno = (unsigned long) time / SECS_DAY;
9f00550d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f005510:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f005515:	f7 e2                	mul    edx
9f005517:	89 d0                	mov    eax,edx
9f005519:	c1 e8 10             	shr    eax,0x10
9f00551c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43

  tmbuf->tm_sec = dayclock % 60;
9f00551f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f005522:	ba 89 88 88 88       	mov    edx,0x88888889
9f005527:	89 c8                	mov    eax,ecx
9f005529:	f7 e2                	mul    edx
9f00552b:	89 d0                	mov    eax,edx
9f00552d:	c1 e8 05             	shr    eax,0x5
9f005530:	89 c2                	mov    edx,eax
9f005532:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f005539:	89 c2                	mov    edx,eax
9f00553b:	89 d0                	mov    eax,edx
9f00553d:	c1 e0 04             	shl    eax,0x4
9f005540:	29 d0                	sub    eax,edx
9f005542:	29 c1                	sub    ecx,eax
9f005544:	89 c8                	mov    eax,ecx
9f005546:	89 c2                	mov    edx,eax
9f005548:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00554b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44
  tmbuf->tm_min = (dayclock % 3600) / 60;
9f00554d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f005550:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f005555:	89 c8                	mov    eax,ecx
9f005557:	f7 e2                	mul    edx
9f005559:	89 d0                	mov    eax,edx
9f00555b:	c1 e8 0b             	shr    eax,0xb
9f00555e:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
9f005564:	29 c1                	sub    ecx,eax
9f005566:	89 c8                	mov    eax,ecx
9f005568:	ba 89 88 88 88       	mov    edx,0x88888889
9f00556d:	f7 e2                	mul    edx
9f00556f:	89 d0                	mov    eax,edx
9f005571:	c1 e8 05             	shr    eax,0x5
9f005574:	89 c2                	mov    edx,eax
9f005576:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f005579:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45
  tmbuf->tm_hour = dayclock / 3600;
9f00557c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00557f:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f005584:	f7 e2                	mul    edx
9f005586:	89 d0                	mov    eax,edx
9f005588:	c1 e8 0b             	shr    eax,0xb
9f00558b:	89 c2                	mov    edx,eax
9f00558d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f005590:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:46
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
9f005593:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f005596:	8d 48 04             	lea    ecx,[eax+0x4]
9f005599:	ba 25 49 92 24       	mov    edx,0x24924925
9f00559e:	89 c8                	mov    eax,ecx
9f0055a0:	f7 e2                	mul    edx
9f0055a2:	89 c8                	mov    eax,ecx
9f0055a4:	29 d0                	sub    eax,edx
9f0055a6:	d1 e8                	shr    eax,1
9f0055a8:	01 d0                	add    eax,edx
9f0055aa:	c1 e8 02             	shr    eax,0x2
9f0055ad:	89 c2                	mov    edx,eax
9f0055af:	c1 e2 03             	shl    edx,0x3
9f0055b2:	29 c2                	sub    edx,eax
9f0055b4:	89 c8                	mov    eax,ecx
9f0055b6:	29 d0                	sub    eax,edx
9f0055b8:	89 c2                	mov    edx,eax
9f0055ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0055bd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f0055c0:	eb 66                	jmp    9f005628 <gmtime_rI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
    dayno -= YEARSIZE(year);
9f0055c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0055c5:	83 e0 03             	and    eax,0x3
9f0055c8:	85 c0                	test   eax,eax
9f0055ca:	75 50                	jne    9f00561c <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 1)
9f0055cc:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0055cf:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0055d4:	89 c8                	mov    eax,ecx
9f0055d6:	f7 ea                	imul   edx
9f0055d8:	c1 fa 05             	sar    edx,0x5
9f0055db:	89 c8                	mov    eax,ecx
9f0055dd:	c1 f8 1f             	sar    eax,0x1f
9f0055e0:	29 c2                	sub    edx,eax
9f0055e2:	89 d0                	mov    eax,edx
9f0055e4:	6b c0 64             	imul   eax,eax,0x64
9f0055e7:	29 c1                	sub    ecx,eax
9f0055e9:	89 c8                	mov    eax,ecx
9f0055eb:	85 c0                	test   eax,eax
9f0055ed:	75 26                	jne    9f005615 <gmtime_rI+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 4)
9f0055ef:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0055f2:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0055f7:	89 c8                	mov    eax,ecx
9f0055f9:	f7 ea                	imul   edx
9f0055fb:	c1 fa 07             	sar    edx,0x7
9f0055fe:	89 c8                	mov    eax,ecx
9f005600:	c1 f8 1f             	sar    eax,0x1f
9f005603:	29 c2                	sub    edx,eax
9f005605:	89 d0                	mov    eax,edx
9f005607:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f00560d:	29 c1                	sub    ecx,eax
9f00560f:	89 c8                	mov    eax,ecx
9f005611:	85 c0                	test   eax,eax
9f005613:	75 07                	jne    9f00561c <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 5)
9f005615:	b8 6e 01 00 00       	mov    eax,0x16e
9f00561a:	eb 05                	jmp    9f005621 <gmtime_rI+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 6)
9f00561c:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 8)
9f005621:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49 (discriminator 8)
    year++;
9f005624:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f005628:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00562b:	83 e0 03             	and    eax,0x3
9f00562e:	85 c0                	test   eax,eax
9f005630:	75 50                	jne    9f005682 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 1)
9f005632:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f005635:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00563a:	89 c8                	mov    eax,ecx
9f00563c:	f7 ea                	imul   edx
9f00563e:	c1 fa 05             	sar    edx,0x5
9f005641:	89 c8                	mov    eax,ecx
9f005643:	c1 f8 1f             	sar    eax,0x1f
9f005646:	29 c2                	sub    edx,eax
9f005648:	89 d0                	mov    eax,edx
9f00564a:	6b c0 64             	imul   eax,eax,0x64
9f00564d:	29 c1                	sub    ecx,eax
9f00564f:	89 c8                	mov    eax,ecx
9f005651:	85 c0                	test   eax,eax
9f005653:	75 26                	jne    9f00567b <gmtime_rI+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 4)
9f005655:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f005658:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00565d:	89 c8                	mov    eax,ecx
9f00565f:	f7 ea                	imul   edx
9f005661:	c1 fa 07             	sar    edx,0x7
9f005664:	89 c8                	mov    eax,ecx
9f005666:	c1 f8 1f             	sar    eax,0x1f
9f005669:	29 c2                	sub    edx,eax
9f00566b:	89 d0                	mov    eax,edx
9f00566d:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f005673:	29 c1                	sub    ecx,eax
9f005675:	89 c8                	mov    eax,ecx
9f005677:	85 c0                	test   eax,eax
9f005679:	75 07                	jne    9f005682 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 5)
9f00567b:	b8 6e 01 00 00       	mov    eax,0x16e
9f005680:	eb 05                	jmp    9f005687 <gmtime_rI+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 6)
9f005682:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 8)
9f005687:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f00568a:	0f 86 32 ff ff ff    	jbe    9f0055c2 <gmtime_rI+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
9f005690:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f005693:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
9f005699:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00569c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52
  tmbuf->tm_yday = dayno;
9f00569f:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0056a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0056a5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:53
  tmbuf->tm_mon = 0;
9f0056a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0056ab:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f0056b2:	e9 89 00 00 00       	jmp    9f005740 <gmtime_rI+0x278>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
9f0056b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0056ba:	83 e0 03             	and    eax,0x3
9f0056bd:	85 c0                	test   eax,eax
9f0056bf:	75 50                	jne    9f005711 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 1)
9f0056c1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0056c4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0056c9:	89 c8                	mov    eax,ecx
9f0056cb:	f7 ea                	imul   edx
9f0056cd:	c1 fa 05             	sar    edx,0x5
9f0056d0:	89 c8                	mov    eax,ecx
9f0056d2:	c1 f8 1f             	sar    eax,0x1f
9f0056d5:	29 c2                	sub    edx,eax
9f0056d7:	89 d0                	mov    eax,edx
9f0056d9:	6b c0 64             	imul   eax,eax,0x64
9f0056dc:	29 c1                	sub    ecx,eax
9f0056de:	89 c8                	mov    eax,ecx
9f0056e0:	85 c0                	test   eax,eax
9f0056e2:	75 26                	jne    9f00570a <gmtime_rI+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 4)
9f0056e4:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0056e7:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0056ec:	89 c8                	mov    eax,ecx
9f0056ee:	f7 ea                	imul   edx
9f0056f0:	c1 fa 07             	sar    edx,0x7
9f0056f3:	89 c8                	mov    eax,ecx
9f0056f5:	c1 f8 1f             	sar    eax,0x1f
9f0056f8:	29 c2                	sub    edx,eax
9f0056fa:	89 d0                	mov    eax,edx
9f0056fc:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f005702:	29 c1                	sub    ecx,eax
9f005704:	89 c8                	mov    eax,ecx
9f005706:	85 c0                	test   eax,eax
9f005708:	75 07                	jne    9f005711 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 5)
9f00570a:	ba 01 00 00 00       	mov    edx,0x1
9f00570f:	eb 05                	jmp    9f005716 <gmtime_rI+0x24e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 6)
9f005711:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 8)
9f005716:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f005719:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f00571c:	89 d0                	mov    eax,edx
9f00571e:	01 c0                	add    eax,eax
9f005720:	01 d0                	add    eax,edx
9f005722:	c1 e0 02             	shl    eax,0x2
9f005725:	01 c8                	add    eax,ecx
9f005727:	8b 84 83 e4 fc ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x31c]
9f00572e:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56 (discriminator 8)
    tmbuf->tm_mon++;
9f005731:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f005734:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f005737:	8d 50 01             	lea    edx,[eax+0x1]
9f00573a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00573d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f005740:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f005743:	83 e0 03             	and    eax,0x3
9f005746:	85 c0                	test   eax,eax
9f005748:	75 50                	jne    9f00579a <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 1)
9f00574a:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f00574d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005752:	89 c8                	mov    eax,ecx
9f005754:	f7 ea                	imul   edx
9f005756:	c1 fa 05             	sar    edx,0x5
9f005759:	89 c8                	mov    eax,ecx
9f00575b:	c1 f8 1f             	sar    eax,0x1f
9f00575e:	29 c2                	sub    edx,eax
9f005760:	89 d0                	mov    eax,edx
9f005762:	6b c0 64             	imul   eax,eax,0x64
9f005765:	29 c1                	sub    ecx,eax
9f005767:	89 c8                	mov    eax,ecx
9f005769:	85 c0                	test   eax,eax
9f00576b:	75 26                	jne    9f005793 <gmtime_rI+0x2cb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 4)
9f00576d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f005770:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005775:	89 c8                	mov    eax,ecx
9f005777:	f7 ea                	imul   edx
9f005779:	c1 fa 07             	sar    edx,0x7
9f00577c:	89 c8                	mov    eax,ecx
9f00577e:	c1 f8 1f             	sar    eax,0x1f
9f005781:	29 c2                	sub    edx,eax
9f005783:	89 d0                	mov    eax,edx
9f005785:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f00578b:	29 c1                	sub    ecx,eax
9f00578d:	89 c8                	mov    eax,ecx
9f00578f:	85 c0                	test   eax,eax
9f005791:	75 07                	jne    9f00579a <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 5)
9f005793:	ba 01 00 00 00       	mov    edx,0x1
9f005798:	eb 05                	jmp    9f00579f <gmtime_rI+0x2d7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 6)
9f00579a:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 8)
9f00579f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0057a2:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f0057a5:	89 d0                	mov    eax,edx
9f0057a7:	01 c0                	add    eax,eax
9f0057a9:	01 d0                	add    eax,edx
9f0057ab:	c1 e0 02             	shl    eax,0x2
9f0057ae:	01 c8                	add    eax,ecx
9f0057b0:	8b 84 83 e4 fc ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x31c]
9f0057b7:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f0057ba:	0f 86 f7 fe ff ff    	jbe    9f0056b7 <gmtime_rI+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:58
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
9f0057c0:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0057c3:	83 c0 01             	add    eax,0x1
9f0057c6:	89 c2                	mov    edx,eax
9f0057c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0057cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:59
  tmbuf->tm_isdst = 0;
9f0057ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0057d1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:60
  return tmbuf;
9f0057d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:61
}
9f0057db:	83 c4 10             	add    esp,0x10
9f0057de:	5b                   	pop    ebx
9f0057df:	5d                   	pop    ebp
9f0057e0:	c3                   	ret    

9f0057e1 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:64

VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) 
{
9f0057e1:	55                   	push   ebp
9f0057e2:	89 e5                	mov    ebp,esp
9f0057e4:	e8 a9 09 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0057e9:	05 f3 39 00 00       	add    eax,0x39f3
/home/yogi/src/os/aproj/libChrisOS/src/time.c:65
    return gmtime_rI(timer, tmbuf);
9f0057ee:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0057f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0057f4:	e8 cf fc ff ff       	call   9f0054c8 <gmtime_rI>
9f0057f9:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:66
}
9f0057fc:	c9                   	leave  
9f0057fd:	c3                   	ret    

9f0057fe <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:68

VISIBLE struct tm *localtime(const time_t *timer) {
9f0057fe:	55                   	push   ebp
9f0057ff:	89 e5                	mov    ebp,esp
9f005801:	83 ec 10             	sub    esp,0x10
9f005804:	e8 89 09 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f005809:	05 d3 39 00 00       	add    eax,0x39d3
/home/yogi/src/os/aproj/libChrisOS/src/time.c:71
  time_t t;
 
  t = *timer + (libcTZ*60*60);
9f00580e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f005811:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f005813:	8b 90 f8 ff ff ff    	mov    edx,DWORD PTR [eax-0x8]
9f005819:	8b 12                	mov    edx,DWORD PTR [edx]
9f00581b:	69 d2 10 0e 00 00    	imul   edx,edx,0xe10
9f005821:	01 ca                	add    edx,ecx
9f005823:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:72
  return gmtime_rI(&t, &tmbuf);
9f005826:	8b 80 fc ff ff ff    	mov    eax,DWORD PTR [eax-0x4]
9f00582c:	50                   	push   eax
9f00582d:	8d 45 fc             	lea    eax,[ebp-0x4]
9f005830:	50                   	push   eax
9f005831:	e8 92 fc ff ff       	call   9f0054c8 <gmtime_rI>
9f005836:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73
}
9f005839:	c9                   	leave  
9f00583a:	c3                   	ret    

9f00583b <localtime_rI>:
localtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:76

struct tm *localtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f00583b:	55                   	push   ebp
9f00583c:	89 e5                	mov    ebp,esp
9f00583e:	83 ec 10             	sub    esp,0x10
9f005841:	e8 4c 09 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f005846:	05 96 39 00 00       	add    eax,0x3996
/home/yogi/src/os/aproj/libChrisOS/src/time.c:79
  time_t t;

  t = *timer - libcTZ;
9f00584b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00584e:	8b 12                	mov    edx,DWORD PTR [edx]
9f005850:	8b 80 f8 ff ff ff    	mov    eax,DWORD PTR [eax-0x8]
9f005856:	8b 00                	mov    eax,DWORD PTR [eax]
9f005858:	29 c2                	sub    edx,eax
9f00585a:	89 d0                	mov    eax,edx
9f00585c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:80
  return gmtime_rI(&t, tmbuf);
9f00585f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f005862:	8d 45 fc             	lea    eax,[ebp-0x4]
9f005865:	50                   	push   eax
9f005866:	e8 5d fc ff ff       	call   9f0054c8 <gmtime_rI>
9f00586b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
}
9f00586e:	c9                   	leave  
9f00586f:	c3                   	ret    

9f005870 <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:83

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
9f005870:	55                   	push   ebp
9f005871:	89 e5                	mov    ebp,esp
9f005873:	e8 1a 09 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f005878:	05 64 39 00 00       	add    eax,0x3964
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84
    return localtime_rI(timer, tmbuf);
9f00587d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f005880:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f005883:	e8 b3 ff ff ff       	call   9f00583b <localtime_rI>
9f005888:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:85
}
9f00588b:	c9                   	leave  
9f00588c:	c3                   	ret    

9f00588d <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:87

VISIBLE time_t mktime(struct tm *tmbuf) {
9f00588d:	55                   	push   ebp
9f00588e:	89 e5                	mov    ebp,esp
9f005890:	57                   	push   edi
9f005891:	56                   	push   esi
9f005892:	53                   	push   ebx
9f005893:	83 ec 20             	sub    esp,0x20
9f005896:	e8 49 09 00 00       	call   9f0061e4 <__x86.get_pc_thunk.cx>
9f00589b:	81 c1 41 39 00 00    	add    ecx,0x3941
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
9f0058a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0058a4:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
9f0058a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0058aa:	8b 18                	mov    ebx,DWORD PTR [eax]
9f0058ac:	ba 89 88 88 88       	mov    edx,0x88888889
9f0058b1:	89 d8                	mov    eax,ebx
9f0058b3:	f7 ea                	imul   edx
9f0058b5:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f0058b8:	c1 f8 05             	sar    eax,0x5
9f0058bb:	89 c2                	mov    edx,eax
9f0058bd:	89 d8                	mov    eax,ebx
9f0058bf:	c1 f8 1f             	sar    eax,0x1f
9f0058c2:	29 c2                	sub    edx,eax
9f0058c4:	89 d0                	mov    eax,edx
9f0058c6:	8d 14 06             	lea    edx,[esi+eax*1]
9f0058c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0058cc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
  tmbuf->tm_sec %= 60;
9f0058cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0058d2:	8b 18                	mov    ebx,DWORD PTR [eax]
9f0058d4:	ba 89 88 88 88       	mov    edx,0x88888889
9f0058d9:	89 d8                	mov    eax,ebx
9f0058db:	f7 ea                	imul   edx
9f0058dd:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f0058e0:	c1 f8 05             	sar    eax,0x5
9f0058e3:	89 c2                	mov    edx,eax
9f0058e5:	89 d8                	mov    eax,ebx
9f0058e7:	c1 f8 1f             	sar    eax,0x1f
9f0058ea:	29 c2                	sub    edx,eax
9f0058ec:	89 d0                	mov    eax,edx
9f0058ee:	89 c2                	mov    edx,eax
9f0058f0:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f0058f7:	89 c2                	mov    edx,eax
9f0058f9:	89 d0                	mov    eax,edx
9f0058fb:	c1 e0 04             	shl    eax,0x4
9f0058fe:	29 d0                	sub    eax,edx
9f005900:	29 c3                	sub    ebx,eax
9f005902:	89 d8                	mov    eax,ebx
9f005904:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f005907:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:97
  if (tmbuf->tm_sec < 0) {
9f005909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00590c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00590e:	85 c0                	test   eax,eax
9f005910:	79 1c                	jns    9f00592e <mktime+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:98
    tmbuf->tm_sec += 60;
9f005912:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005915:	8b 00                	mov    eax,DWORD PTR [eax]
9f005917:	8d 50 3c             	lea    edx,[eax+0x3c]
9f00591a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00591d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
    tmbuf->tm_min--;
9f00591f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005922:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f005925:	8d 50 ff             	lea    edx,[eax-0x1]
9f005928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00592b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
9f00592e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005931:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
9f005934:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005937:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f00593a:	ba 89 88 88 88       	mov    edx,0x88888889
9f00593f:	89 d8                	mov    eax,ebx
9f005941:	f7 ea                	imul   edx
9f005943:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f005946:	c1 f8 05             	sar    eax,0x5
9f005949:	89 c2                	mov    edx,eax
9f00594b:	89 d8                	mov    eax,ebx
9f00594d:	c1 f8 1f             	sar    eax,0x1f
9f005950:	29 c2                	sub    edx,eax
9f005952:	89 d0                	mov    eax,edx
9f005954:	8d 14 06             	lea    edx,[esi+eax*1]
9f005957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00595a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
  tmbuf->tm_min = tmbuf->tm_min % 60;
9f00595d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005960:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f005963:	ba 89 88 88 88       	mov    edx,0x88888889
9f005968:	89 d8                	mov    eax,ebx
9f00596a:	f7 ea                	imul   edx
9f00596c:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f00596f:	c1 f8 05             	sar    eax,0x5
9f005972:	89 c2                	mov    edx,eax
9f005974:	89 d8                	mov    eax,ebx
9f005976:	c1 f8 1f             	sar    eax,0x1f
9f005979:	29 c2                	sub    edx,eax
9f00597b:	89 d0                	mov    eax,edx
9f00597d:	89 c2                	mov    edx,eax
9f00597f:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f005986:	89 c2                	mov    edx,eax
9f005988:	89 d0                	mov    eax,edx
9f00598a:	c1 e0 04             	shl    eax,0x4
9f00598d:	29 d0                	sub    eax,edx
9f00598f:	29 c3                	sub    ebx,eax
9f005991:	89 d8                	mov    eax,ebx
9f005993:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f005996:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:103
  if (tmbuf->tm_min < 0) {
9f005999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00599c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f00599f:	85 c0                	test   eax,eax
9f0059a1:	79 1e                	jns    9f0059c1 <mktime+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:104
    tmbuf->tm_min += 60;
9f0059a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0059a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0059a9:	8d 50 3c             	lea    edx,[eax+0x3c]
9f0059ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0059af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
    tmbuf->tm_hour--;
9f0059b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0059b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f0059b8:	8d 50 ff             	lea    edx,[eax-0x1]
9f0059bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0059be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
  }
  day = tmbuf->tm_hour / 24;
9f0059c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0059c4:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f0059c7:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f0059cc:	89 d8                	mov    eax,ebx
9f0059ce:	f7 ea                	imul   edx
9f0059d0:	c1 fa 02             	sar    edx,0x2
9f0059d3:	89 d8                	mov    eax,ebx
9f0059d5:	c1 f8 1f             	sar    eax,0x1f
9f0059d8:	29 c2                	sub    edx,eax
9f0059da:	89 d0                	mov    eax,edx
9f0059dc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
9f0059df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0059e2:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f0059e5:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f0059ea:	89 d8                	mov    eax,ebx
9f0059ec:	f7 ea                	imul   edx
9f0059ee:	c1 fa 02             	sar    edx,0x2
9f0059f1:	89 d8                	mov    eax,ebx
9f0059f3:	c1 f8 1f             	sar    eax,0x1f
9f0059f6:	29 c2                	sub    edx,eax
9f0059f8:	89 d0                	mov    eax,edx
9f0059fa:	01 c0                	add    eax,eax
9f0059fc:	01 d0                	add    eax,edx
9f0059fe:	c1 e0 03             	shl    eax,0x3
9f005a01:	29 c3                	sub    ebx,eax
9f005a03:	89 da                	mov    edx,ebx
9f005a05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a08:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:109
  if (tmbuf->tm_hour < 0) {
9f005a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a0e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f005a11:	85 c0                	test   eax,eax
9f005a13:	79 13                	jns    9f005a28 <mktime+0x19b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:110
    tmbuf->tm_hour += 24;
9f005a15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f005a1b:	8d 50 18             	lea    edx,[eax+0x18]
9f005a1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a21:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
    day--;
9f005a24:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
9f005a28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a2b:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
9f005a2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a31:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f005a34:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f005a39:	89 d8                	mov    eax,ebx
9f005a3b:	f7 ea                	imul   edx
9f005a3d:	d1 fa                	sar    edx,1
9f005a3f:	89 d8                	mov    eax,ebx
9f005a41:	c1 f8 1f             	sar    eax,0x1f
9f005a44:	29 c2                	sub    edx,eax
9f005a46:	89 d0                	mov    eax,edx
9f005a48:	8d 14 06             	lea    edx,[esi+eax*1]
9f005a4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a4e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
  tmbuf->tm_mon %= 12;
9f005a51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a54:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f005a57:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f005a5c:	89 d8                	mov    eax,ebx
9f005a5e:	f7 ea                	imul   edx
9f005a60:	d1 fa                	sar    edx,1
9f005a62:	89 d8                	mov    eax,ebx
9f005a64:	c1 f8 1f             	sar    eax,0x1f
9f005a67:	29 c2                	sub    edx,eax
9f005a69:	89 d0                	mov    eax,edx
9f005a6b:	01 c0                	add    eax,eax
9f005a6d:	01 d0                	add    eax,edx
9f005a6f:	c1 e0 02             	shl    eax,0x2
9f005a72:	29 c3                	sub    ebx,eax
9f005a74:	89 da                	mov    edx,ebx
9f005a76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a79:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:115
  if (tmbuf->tm_mon < 0) {
9f005a7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a7f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f005a82:	85 c0                	test   eax,eax
9f005a84:	79 1e                	jns    9f005aa4 <mktime+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
    tmbuf->tm_mon += 12;
9f005a86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a89:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f005a8c:	8d 50 0c             	lea    edx,[eax+0xc]
9f005a8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a92:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
    tmbuf->tm_year--;
9f005a95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a98:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005a9b:	8d 50 ff             	lea    edx,[eax-0x1]
9f005a9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005aa1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:119
  }
  day += (tmbuf->tm_mday - 1);
9f005aa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005aa7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f005aaa:	83 e8 01             	sub    eax,0x1
9f005aad:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
  while (day < 0) {
9f005ab0:	e9 c1 00 00 00       	jmp    9f005b76 <mktime+0x2e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:121
    if(--tmbuf->tm_mon < 0) {
9f005ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005ab8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f005abb:	8d 50 ff             	lea    edx,[eax-0x1]
9f005abe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005ac1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f005ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005ac7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f005aca:	85 c0                	test   eax,eax
9f005acc:	79 19                	jns    9f005ae7 <mktime+0x25a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
      tmbuf->tm_year--;
9f005ace:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005ad1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005ad4:	8d 50 ff             	lea    edx,[eax-0x1]
9f005ad7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005ada:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:123
      tmbuf->tm_mon = 11;
9f005add:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005ae0:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f005ae7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005aea:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005aed:	83 e0 03             	and    eax,0x3
9f005af0:	85 c0                	test   eax,eax
9f005af2:	75 62                	jne    9f005b56 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 1)
9f005af4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005af7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005afa:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f005b00:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005b05:	89 d8                	mov    eax,ebx
9f005b07:	f7 ea                	imul   edx
9f005b09:	c1 fa 05             	sar    edx,0x5
9f005b0c:	89 d8                	mov    eax,ebx
9f005b0e:	c1 f8 1f             	sar    eax,0x1f
9f005b11:	29 c2                	sub    edx,eax
9f005b13:	89 d0                	mov    eax,edx
9f005b15:	6b c0 64             	imul   eax,eax,0x64
9f005b18:	29 c3                	sub    ebx,eax
9f005b1a:	89 d8                	mov    eax,ebx
9f005b1c:	85 c0                	test   eax,eax
9f005b1e:	75 2f                	jne    9f005b4f <mktime+0x2c2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 4)
9f005b20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005b23:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005b26:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f005b2c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005b31:	89 d8                	mov    eax,ebx
9f005b33:	f7 ea                	imul   edx
9f005b35:	c1 fa 07             	sar    edx,0x7
9f005b38:	89 d8                	mov    eax,ebx
9f005b3a:	c1 f8 1f             	sar    eax,0x1f
9f005b3d:	29 c2                	sub    edx,eax
9f005b3f:	89 d0                	mov    eax,edx
9f005b41:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f005b47:	29 c3                	sub    ebx,eax
9f005b49:	89 d8                	mov    eax,ebx
9f005b4b:	85 c0                	test   eax,eax
9f005b4d:	75 07                	jne    9f005b56 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 5)
9f005b4f:	ba 01 00 00 00       	mov    edx,0x1
9f005b54:	eb 05                	jmp    9f005b5b <mktime+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 6)
9f005b56:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 8)
9f005b5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005b5e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f005b61:	89 d0                	mov    eax,edx
9f005b63:	01 c0                	add    eax,eax
9f005b65:	01 d0                	add    eax,edx
9f005b67:	c1 e0 02             	shl    eax,0x2
9f005b6a:	01 d8                	add    eax,ebx
9f005b6c:	8b 84 81 e4 fc ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x31c]
9f005b73:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
9f005b76:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f005b7a:	0f 88 35 ff ff ff    	js     9f005ab5 <mktime+0x228>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f005b80:	e9 c2 00 00 00       	jmp    9f005c47 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f005b85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005b88:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005b8b:	83 e0 03             	and    eax,0x3
9f005b8e:	85 c0                	test   eax,eax
9f005b90:	75 62                	jne    9f005bf4 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 1)
9f005b92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005b95:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005b98:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f005b9e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005ba3:	89 d8                	mov    eax,ebx
9f005ba5:	f7 ea                	imul   edx
9f005ba7:	c1 fa 05             	sar    edx,0x5
9f005baa:	89 d8                	mov    eax,ebx
9f005bac:	c1 f8 1f             	sar    eax,0x1f
9f005baf:	29 c2                	sub    edx,eax
9f005bb1:	89 d0                	mov    eax,edx
9f005bb3:	6b c0 64             	imul   eax,eax,0x64
9f005bb6:	29 c3                	sub    ebx,eax
9f005bb8:	89 d8                	mov    eax,ebx
9f005bba:	85 c0                	test   eax,eax
9f005bbc:	75 2f                	jne    9f005bed <mktime+0x360>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 4)
9f005bbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005bc1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005bc4:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f005bca:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005bcf:	89 d8                	mov    eax,ebx
9f005bd1:	f7 ea                	imul   edx
9f005bd3:	c1 fa 07             	sar    edx,0x7
9f005bd6:	89 d8                	mov    eax,ebx
9f005bd8:	c1 f8 1f             	sar    eax,0x1f
9f005bdb:	29 c2                	sub    edx,eax
9f005bdd:	89 d0                	mov    eax,edx
9f005bdf:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f005be5:	29 c3                	sub    ebx,eax
9f005be7:	89 d8                	mov    eax,ebx
9f005be9:	85 c0                	test   eax,eax
9f005beb:	75 07                	jne    9f005bf4 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 5)
9f005bed:	ba 01 00 00 00       	mov    edx,0x1
9f005bf2:	eb 05                	jmp    9f005bf9 <mktime+0x36c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 6)
9f005bf4:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 8)
9f005bf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005bfc:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f005bff:	89 d0                	mov    eax,edx
9f005c01:	01 c0                	add    eax,eax
9f005c03:	01 d0                	add    eax,edx
9f005c05:	c1 e0 02             	shl    eax,0x2
9f005c08:	01 d8                	add    eax,ebx
9f005c0a:	8b 84 81 e4 fc ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x31c]
9f005c11:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:129 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
9f005c14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005c17:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f005c1a:	8d 50 01             	lea    edx,[eax+0x1]
9f005c1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005c20:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f005c23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005c26:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f005c29:	83 f8 0c             	cmp    eax,0xc
9f005c2c:	75 19                	jne    9f005c47 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:130
      tmbuf->tm_mon = 0;
9f005c2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005c31:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:131
      tmbuf->tm_year++;
9f005c38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005c3b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005c3e:	8d 50 01             	lea    edx,[eax+0x1]
9f005c41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005c44:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f005c47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005c4a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005c4d:	83 e0 03             	and    eax,0x3
9f005c50:	85 c0                	test   eax,eax
9f005c52:	75 62                	jne    9f005cb6 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 1)
9f005c54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005c57:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005c5a:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f005c60:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005c65:	89 d8                	mov    eax,ebx
9f005c67:	f7 ea                	imul   edx
9f005c69:	c1 fa 05             	sar    edx,0x5
9f005c6c:	89 d8                	mov    eax,ebx
9f005c6e:	c1 f8 1f             	sar    eax,0x1f
9f005c71:	29 c2                	sub    edx,eax
9f005c73:	89 d0                	mov    eax,edx
9f005c75:	6b c0 64             	imul   eax,eax,0x64
9f005c78:	29 c3                	sub    ebx,eax
9f005c7a:	89 d8                	mov    eax,ebx
9f005c7c:	85 c0                	test   eax,eax
9f005c7e:	75 2f                	jne    9f005caf <mktime+0x422>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 4)
9f005c80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005c83:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005c86:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f005c8c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005c91:	89 d8                	mov    eax,ebx
9f005c93:	f7 ea                	imul   edx
9f005c95:	c1 fa 07             	sar    edx,0x7
9f005c98:	89 d8                	mov    eax,ebx
9f005c9a:	c1 f8 1f             	sar    eax,0x1f
9f005c9d:	29 c2                	sub    edx,eax
9f005c9f:	89 d0                	mov    eax,edx
9f005ca1:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f005ca7:	29 c3                	sub    ebx,eax
9f005ca9:	89 d8                	mov    eax,ebx
9f005cab:	85 c0                	test   eax,eax
9f005cad:	75 07                	jne    9f005cb6 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 5)
9f005caf:	ba 01 00 00 00       	mov    edx,0x1
9f005cb4:	eb 05                	jmp    9f005cbb <mktime+0x42e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 6)
9f005cb6:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 8)
9f005cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005cbe:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f005cc1:	89 d0                	mov    eax,edx
9f005cc3:	01 c0                	add    eax,eax
9f005cc5:	01 d0                	add    eax,edx
9f005cc7:	c1 e0 02             	shl    eax,0x2
9f005cca:	01 d8                	add    eax,ebx
9f005ccc:	8b 84 81 e4 fc ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x31c]
9f005cd3:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f005cd6:	0f 8e a9 fe ff ff    	jle    9f005b85 <mktime+0x2f8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
9f005cdc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f005cdf:	8d 50 01             	lea    edx,[eax+0x1]
9f005ce2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005ce5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  year = EPOCH_YR;
9f005ce8:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
9f005cef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005cf2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005cf5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f005cf8:	81 ea 6c 07 00 00    	sub    edx,0x76c
9f005cfe:	39 d0                	cmp    eax,edx
9f005d00:	7d 0a                	jge    9f005d0c <mktime+0x47f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136 (discriminator 1)
9f005d02:	b8 19 fc ff ff       	mov    eax,0xfffffc19
9f005d07:	e9 d0 03 00 00       	jmp    9f0060dc <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:137
  seconds = 0;
9f005d0c:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:138
  day = 0;                      // Means days since day 0 now
9f005d13:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:139
  overflow = 0;
9f005d1a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
9f005d21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005d24:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005d27:	05 6c 07 00 00       	add    eax,0x76c
9f005d2c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
9f005d2f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f005d32:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f005d35:	3d 7c c6 59 00       	cmp    eax,0x59c67c
9f005d3a:	7e 07                	jle    9f005d43 <mktime+0x4b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 1)
9f005d3c:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149
  day = (tm_year - year) * 365;
9f005d43:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f005d46:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f005d49:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
9f005d4f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
9f005d52:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f005d57:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
9f005d5a:	89 c2                	mov    edx,eax
9f005d5c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f005d5f:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f005d62:	8d 58 03             	lea    ebx,[eax+0x3]
9f005d65:	85 c0                	test   eax,eax
9f005d67:	0f 48 c3             	cmovs  eax,ebx
9f005d6a:	c1 f8 02             	sar    eax,0x2
9f005d6d:	83 c0 01             	add    eax,0x1
9f005d70:	39 c2                	cmp    edx,eax
9f005d72:	7d 04                	jge    9f005d78 <mktime+0x4eb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 1)
9f005d74:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
9f005d78:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f005d7b:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f005d7e:	8d 50 03             	lea    edx,[eax+0x3]
9f005d81:	85 c0                	test   eax,eax
9f005d83:	0f 48 c2             	cmovs  eax,edx
9f005d86:	c1 f8 02             	sar    eax,0x2
9f005d89:	89 c3                	mov    ebx,eax
9f005d8b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f005d8e:	83 e0 03             	and    eax,0x3
9f005d91:	85 c0                	test   eax,eax
9f005d93:	74 29                	je     9f005dbe <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151 (discriminator 1)
9f005d95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f005d98:	99                   	cdq    
9f005d99:	c1 ea 1e             	shr    edx,0x1e
9f005d9c:	01 d0                	add    eax,edx
9f005d9e:	83 e0 03             	and    eax,0x3
9f005da1:	29 d0                	sub    eax,edx
9f005da3:	89 c6                	mov    esi,eax
9f005da5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f005da8:	99                   	cdq    
9f005da9:	c1 ea 1e             	shr    edx,0x1e
9f005dac:	01 d0                	add    eax,edx
9f005dae:	83 e0 03             	and    eax,0x3
9f005db1:	29 d0                	sub    eax,edx
9f005db3:	39 c6                	cmp    esi,eax
9f005db5:	7d 07                	jge    9f005dbe <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151 (discriminator 3)
9f005db7:	b8 01 00 00 00       	mov    eax,0x1
9f005dbc:	eb 05                	jmp    9f005dc3 <mktime+0x536>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151 (discriminator 4)
9f005dbe:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151 (discriminator 6)
9f005dc3:	01 d8                	add    eax,ebx
9f005dc5:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
9f005dc8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f005dcb:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f005dce:	89 c3                	mov    ebx,eax
9f005dd0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005dd5:	89 d8                	mov    eax,ebx
9f005dd7:	f7 ea                	imul   edx
9f005dd9:	c1 fa 05             	sar    edx,0x5
9f005ddc:	89 d8                	mov    eax,ebx
9f005dde:	c1 f8 1f             	sar    eax,0x1f
9f005de1:	89 d7                	mov    edi,edx
9f005de3:	29 c7                	sub    edi,eax
9f005de5:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f005de8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005ded:	89 d8                	mov    eax,ebx
9f005def:	f7 ea                	imul   edx
9f005df1:	c1 fa 05             	sar    edx,0x5
9f005df4:	89 d8                	mov    eax,ebx
9f005df6:	c1 f8 1f             	sar    eax,0x1f
9f005df9:	29 c2                	sub    edx,eax
9f005dfb:	89 d0                	mov    eax,edx
9f005dfd:	6b c0 64             	imul   eax,eax,0x64
9f005e00:	29 c3                	sub    ebx,eax
9f005e02:	89 d8                	mov    eax,ebx
9f005e04:	85 c0                	test   eax,eax
9f005e06:	74 49                	je     9f005e51 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 1)
9f005e08:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f005e0b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005e10:	89 d8                	mov    eax,ebx
9f005e12:	f7 ea                	imul   edx
9f005e14:	c1 fa 05             	sar    edx,0x5
9f005e17:	89 d8                	mov    eax,ebx
9f005e19:	c1 f8 1f             	sar    eax,0x1f
9f005e1c:	89 d6                	mov    esi,edx
9f005e1e:	29 c6                	sub    esi,eax
9f005e20:	6b c6 64             	imul   eax,esi,0x64
9f005e23:	89 de                	mov    esi,ebx
9f005e25:	29 c6                	sub    esi,eax
9f005e27:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f005e2a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005e2f:	89 d8                	mov    eax,ebx
9f005e31:	f7 ea                	imul   edx
9f005e33:	c1 fa 05             	sar    edx,0x5
9f005e36:	89 d8                	mov    eax,ebx
9f005e38:	c1 f8 1f             	sar    eax,0x1f
9f005e3b:	29 c2                	sub    edx,eax
9f005e3d:	89 d0                	mov    eax,edx
9f005e3f:	6b c0 64             	imul   eax,eax,0x64
9f005e42:	29 c3                	sub    ebx,eax
9f005e44:	89 d8                	mov    eax,ebx
9f005e46:	39 c6                	cmp    esi,eax
9f005e48:	7d 07                	jge    9f005e51 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 3)
9f005e4a:	b8 01 00 00 00       	mov    eax,0x1
9f005e4f:	eb 05                	jmp    9f005e56 <mktime+0x5c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 4)
9f005e51:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)
9f005e56:	01 f8                	add    eax,edi
9f005e58:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
9f005e5b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f005e5e:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f005e61:	89 c3                	mov    ebx,eax
9f005e63:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005e68:	89 d8                	mov    eax,ebx
9f005e6a:	f7 ea                	imul   edx
9f005e6c:	c1 fa 07             	sar    edx,0x7
9f005e6f:	89 d8                	mov    eax,ebx
9f005e71:	c1 f8 1f             	sar    eax,0x1f
9f005e74:	89 d7                	mov    edi,edx
9f005e76:	29 c7                	sub    edi,eax
9f005e78:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f005e7b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005e80:	89 d8                	mov    eax,ebx
9f005e82:	f7 ea                	imul   edx
9f005e84:	c1 fa 07             	sar    edx,0x7
9f005e87:	89 d8                	mov    eax,ebx
9f005e89:	c1 f8 1f             	sar    eax,0x1f
9f005e8c:	29 c2                	sub    edx,eax
9f005e8e:	89 d0                	mov    eax,edx
9f005e90:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f005e96:	29 c3                	sub    ebx,eax
9f005e98:	89 d8                	mov    eax,ebx
9f005e9a:	85 c0                	test   eax,eax
9f005e9c:	74 4f                	je     9f005eed <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 1)
9f005e9e:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f005ea1:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005ea6:	89 d8                	mov    eax,ebx
9f005ea8:	f7 ea                	imul   edx
9f005eaa:	c1 fa 07             	sar    edx,0x7
9f005ead:	89 d8                	mov    eax,ebx
9f005eaf:	c1 f8 1f             	sar    eax,0x1f
9f005eb2:	89 d6                	mov    esi,edx
9f005eb4:	29 c6                	sub    esi,eax
9f005eb6:	69 c6 90 01 00 00    	imul   eax,esi,0x190
9f005ebc:	89 de                	mov    esi,ebx
9f005ebe:	29 c6                	sub    esi,eax
9f005ec0:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f005ec3:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005ec8:	89 d8                	mov    eax,ebx
9f005eca:	f7 ea                	imul   edx
9f005ecc:	c1 fa 07             	sar    edx,0x7
9f005ecf:	89 d8                	mov    eax,ebx
9f005ed1:	c1 f8 1f             	sar    eax,0x1f
9f005ed4:	29 c2                	sub    edx,eax
9f005ed6:	89 d0                	mov    eax,edx
9f005ed8:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f005ede:	29 c3                	sub    ebx,eax
9f005ee0:	89 d8                	mov    eax,ebx
9f005ee2:	39 c6                	cmp    esi,eax
9f005ee4:	7d 07                	jge    9f005eed <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 3)
9f005ee6:	b8 01 00 00 00       	mov    eax,0x1
9f005eeb:	eb 05                	jmp    9f005ef2 <mktime+0x665>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 4)
9f005eed:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
9f005ef2:	01 f8                	add    eax,edi
9f005ef4:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 6)

  yday = month = 0;
9f005ef7:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f005efe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f005f01:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:156 (discriminator 6)
  while (month < tmbuf->tm_mon) {
9f005f04:	eb 7b                	jmp    9f005f81 <mktime+0x6f4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157
    yday += _ytab[LEAPYEAR(tm_year)][month];
9f005f06:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f005f09:	83 e0 03             	and    eax,0x3
9f005f0c:	85 c0                	test   eax,eax
9f005f0e:	75 50                	jne    9f005f60 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 1)
9f005f10:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f005f13:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005f18:	89 d8                	mov    eax,ebx
9f005f1a:	f7 ea                	imul   edx
9f005f1c:	c1 fa 05             	sar    edx,0x5
9f005f1f:	89 d8                	mov    eax,ebx
9f005f21:	c1 f8 1f             	sar    eax,0x1f
9f005f24:	29 c2                	sub    edx,eax
9f005f26:	89 d0                	mov    eax,edx
9f005f28:	6b c0 64             	imul   eax,eax,0x64
9f005f2b:	29 c3                	sub    ebx,eax
9f005f2d:	89 d8                	mov    eax,ebx
9f005f2f:	85 c0                	test   eax,eax
9f005f31:	75 26                	jne    9f005f59 <mktime+0x6cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 4)
9f005f33:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f005f36:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005f3b:	89 d8                	mov    eax,ebx
9f005f3d:	f7 ea                	imul   edx
9f005f3f:	c1 fa 07             	sar    edx,0x7
9f005f42:	89 d8                	mov    eax,ebx
9f005f44:	c1 f8 1f             	sar    eax,0x1f
9f005f47:	29 c2                	sub    edx,eax
9f005f49:	89 d0                	mov    eax,edx
9f005f4b:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f005f51:	29 c3                	sub    ebx,eax
9f005f53:	89 d8                	mov    eax,ebx
9f005f55:	85 c0                	test   eax,eax
9f005f57:	75 07                	jne    9f005f60 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 5)
9f005f59:	ba 01 00 00 00       	mov    edx,0x1
9f005f5e:	eb 05                	jmp    9f005f65 <mktime+0x6d8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 6)
9f005f60:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 8)
9f005f65:	89 d0                	mov    eax,edx
9f005f67:	01 c0                	add    eax,eax
9f005f69:	01 d0                	add    eax,edx
9f005f6b:	c1 e0 02             	shl    eax,0x2
9f005f6e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f005f71:	01 d0                	add    eax,edx
9f005f73:	8b 84 81 e4 fc ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x31c]
9f005f7a:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158 (discriminator 8)
    month++;
9f005f7d:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:156
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
9f005f81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005f84:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f005f87:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f005f8a:	0f 8f 76 ff ff ff    	jg     9f005f06 <mktime+0x679>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:160
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
9f005f90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005f93:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f005f96:	83 e8 01             	sub    eax,0x1
9f005f99:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161
  if (day + yday < 0) overflow|=4;
9f005f9c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f005f9f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f005fa2:	01 d0                	add    eax,edx
9f005fa4:	85 c0                	test   eax,eax
9f005fa6:	79 04                	jns    9f005fac <mktime+0x71f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161 (discriminator 1)
9f005fa8:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:162
  day += yday;
9f005fac:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f005faf:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:164

  tmbuf->tm_yday = yday;
9f005fb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005fb5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f005fb8:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:165
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
9f005fbb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f005fbe:	8d 58 04             	lea    ebx,[eax+0x4]
9f005fc1:	ba 93 24 49 92       	mov    edx,0x92492493
9f005fc6:	89 d8                	mov    eax,ebx
9f005fc8:	f7 ea                	imul   edx
9f005fca:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f005fcd:	c1 f8 02             	sar    eax,0x2
9f005fd0:	89 c2                	mov    edx,eax
9f005fd2:	89 d8                	mov    eax,ebx
9f005fd4:	c1 f8 1f             	sar    eax,0x1f
9f005fd7:	29 c2                	sub    edx,eax
9f005fd9:	89 d0                	mov    eax,edx
9f005fdb:	89 c2                	mov    edx,eax
9f005fdd:	c1 e2 03             	shl    edx,0x3
9f005fe0:	29 c2                	sub    edx,eax
9f005fe2:	89 d8                	mov    eax,ebx
9f005fe4:	29 d0                	sub    eax,edx
9f005fe6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f005fe9:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:167

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
9f005fec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005fef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f005ff2:	c1 e0 02             	shl    eax,0x2
9f005ff5:	89 c2                	mov    edx,eax
9f005ff7:	c1 e2 04             	shl    edx,0x4
9f005ffa:	29 c2                	sub    edx,eax
9f005ffc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005fff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f006002:	01 d0                	add    eax,edx
9f006004:	c1 e0 02             	shl    eax,0x2
9f006007:	89 c2                	mov    edx,eax
9f006009:	c1 e2 04             	shl    edx,0x4
9f00600c:	29 c2                	sub    edx,eax
9f00600e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f006011:	8b 00                	mov    eax,DWORD PTR [eax]
9f006013:	01 d0                	add    eax,edx
9f006015:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:169

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
9f006018:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f00601d:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
9f006020:	89 c3                	mov    ebx,eax
9f006022:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f006027:	89 d8                	mov    eax,ebx
9f006029:	f7 ea                	imul   edx
9f00602b:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f00602e:	c1 f8 10             	sar    eax,0x10
9f006031:	89 c2                	mov    edx,eax
9f006033:	89 d8                	mov    eax,ebx
9f006035:	c1 f8 1f             	sar    eax,0x1f
9f006038:	29 c2                	sub    edx,eax
9f00603a:	89 d0                	mov    eax,edx
9f00603c:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f00603f:	7d 04                	jge    9f006045 <mktime+0x7b8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:169 (discriminator 1)
9f006041:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170
  seconds += day * SECS_DAY;
9f006045:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f006048:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f00604e:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:173

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f006051:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f006057:	8b 00                	mov    eax,DWORD PTR [eax]
9f006059:	85 c0                	test   eax,eax
9f00605b:	7e 16                	jle    9f006073 <mktime+0x7e6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:173 (discriminator 1)
9f00605d:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f006063:	8b 00                	mov    eax,DWORD PTR [eax]
9f006065:	ba ff ff ff 7f       	mov    edx,0x7fffffff
9f00606a:	29 c2                	sub    edx,eax
9f00606c:	89 d0                	mov    eax,edx
9f00606e:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f006071:	7c 1b                	jl     9f00608e <mktime+0x801>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174 (discriminator 3)
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f006073:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f006079:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:173 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f00607b:	85 c0                	test   eax,eax
9f00607d:	79 13                	jns    9f006092 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f00607f:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f006085:	8b 00                	mov    eax,DWORD PTR [eax]
9f006087:	f7 d8                	neg    eax
9f006089:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f00608c:	7e 04                	jle    9f006092 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:175
          overflow|=16;
9f00608e:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177
  }
  seconds += libcTZ;
9f006092:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f006098:	8b 00                	mov    eax,DWORD PTR [eax]
9f00609a:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:179

  if (tmbuf->tm_isdst) {
9f00609d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0060a0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
9f0060a3:	85 c0                	test   eax,eax
9f0060a5:	74 0b                	je     9f0060b2 <mktime+0x825>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:180
    dst = _dstbias;
9f0060a7:	8b 81 e0 00 00 00    	mov    eax,DWORD PTR [ecx+0xe0]
9f0060ad:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
9f0060b0:	eb 07                	jmp    9f0060b9 <mktime+0x82c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182
  } else {
    dst = 0;
9f0060b2:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
9f0060b9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f0060bc:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f0060bf:	7e 04                	jle    9f0060c5 <mktime+0x838>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185 (discriminator 1)
9f0060c1:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:186
  seconds -= dst;
9f0060c5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f0060c8:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188

  if (overflow) return (time_t) overflow-2;
9f0060cb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f0060cf:	74 08                	je     9f0060d9 <mktime+0x84c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188 (discriminator 1)
9f0060d1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0060d4:	83 e8 02             	sub    eax,0x2
9f0060d7:	eb 03                	jmp    9f0060dc <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:191

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
9f0060d9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:192
}
9f0060dc:	83 c4 20             	add    esp,0x20
9f0060df:	5b                   	pop    ebx
9f0060e0:	5e                   	pop    esi
9f0060e1:	5f                   	pop    edi
9f0060e2:	5d                   	pop    ebp
9f0060e3:	c3                   	ret    

9f0060e4 <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:195

VISIBLE struct tm* gettime(struct tm *time, bool localTime)
{
9f0060e4:	55                   	push   ebp
9f0060e5:	89 e5                	mov    ebp,esp
9f0060e7:	56                   	push   esi
9f0060e8:	53                   	push   ebx
9f0060e9:	83 ec 14             	sub    esp,0x14
9f0060ec:	e8 a1 00 00 00       	call   9f006192 <__x86.get_pc_thunk.ax>
9f0060f1:	05 eb 30 00 00       	add    eax,0x30eb
9f0060f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0060f9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/aproj/libChrisOS/src/time.c:196
    time_t ticks=0;
9f0060fc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:198
    
    SYSCALL0(SYSCALL_GETTIME, ticks);
9f006103:	b8 71 01 00 00       	mov    eax,0x171
9f006108:	bb 00 00 00 00       	mov    ebx,0x0
9f00610d:	b9 00 00 00 00       	mov    ecx,0x0
9f006112:	ba 00 00 00 00       	mov    edx,0x0
9f006117:	be 00 00 00 00       	mov    esi,0x0
9f00611c:	e8 fc ff ff ff       	call   9f00611d <gettime+0x39>
9f006121:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:199
    if (localTime)
9f006124:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
9f006128:	74 11                	je     9f00613b <gettime+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:200
        return localtime_rI(&ticks,time);
9f00612a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00612d:	8d 45 f4             	lea    eax,[ebp-0xc]
9f006130:	50                   	push   eax
9f006131:	e8 05 f7 ff ff       	call   9f00583b <localtime_rI>
9f006136:	83 c4 08             	add    esp,0x8
9f006139:	eb 0f                	jmp    9f00614a <gettime+0x66>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:202
    else
        return gmtime_rI((time_t*)&ticks,time);
9f00613b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00613e:	8d 45 f4             	lea    eax,[ebp-0xc]
9f006141:	50                   	push   eax
9f006142:	e8 81 f3 ff ff       	call   9f0054c8 <gmtime_rI>
9f006147:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:203 (discriminator 1)
}
9f00614a:	8d 65 f8             	lea    esp,[ebp-0x8]
9f00614d:	5b                   	pop    ebx
9f00614e:	5e                   	pop    esi
9f00614f:	5d                   	pop    ebp
9f006150:	c3                   	ret    

9f006151 <time>:
time():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:206

VISIBLE time_t time (time_t *result)
{
9f006151:	55                   	push   ebp
9f006152:	89 e5                	mov    ebp,esp
9f006154:	53                   	push   ebx
9f006155:	83 ec 14             	sub    esp,0x14
9f006158:	e8 83 00 00 00       	call   9f0061e0 <__x86.get_pc_thunk.bx>
9f00615d:	81 c3 7f 30 00 00    	add    ebx,0x307f
/home/yogi/src/os/aproj/libChrisOS/src/time.c:207
    uint32_t ticks = do_syscall0(SYSCALL_GETTIME);
9f006163:	83 ec 0c             	sub    esp,0xc
9f006166:	68 71 01 00 00       	push   0x171
9f00616b:	e8 10 b4 ff ff       	call   9f001580 <do_syscall0>
9f006170:	83 c4 10             	add    esp,0x10
9f006173:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:208
    memcpyI(result, &ticks, 4);
9f006176:	83 ec 04             	sub    esp,0x4
9f006179:	6a 04                	push   0x4
9f00617b:	8d 45 f4             	lea    eax,[ebp-0xc]
9f00617e:	50                   	push   eax
9f00617f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f006182:	e8 c9 c7 ff ff       	call   9f002950 <memcpyI>
9f006187:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:209
    return ticks;
9f00618a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:210
9f00618d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f006190:	c9                   	leave  
9f006191:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

9f006192 <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
9f006192:	8b 04 24             	mov    eax,DWORD PTR [esp]
9f006195:	c3                   	ret    

Disassembly of section .plt:

9f0061a0 <.plt>:
9f0061a0:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
9f0061a6:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
9f0061ac:	00 00                	add    BYTE PTR [eax],al
9f0061ae:	00 00                	add    BYTE PTR [eax],al
9f0061b0:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
9f0061b6:	68 00 00 00 00       	push   0x0
9f0061bb:	e9 e0 ff ff ff       	jmp    9f0061a0 <__x86.get_pc_thunk.ax+0xe>
9f0061c0:	ff a3 10 00 00 00    	jmp    DWORD PTR [ebx+0x10]
9f0061c6:	68 08 00 00 00       	push   0x8
9f0061cb:	e9 d0 ff ff ff       	jmp    9f0061a0 <__x86.get_pc_thunk.ax+0xe>
9f0061d0:	ff a3 14 00 00 00    	jmp    DWORD PTR [ebx+0x14]
9f0061d6:	68 10 00 00 00       	push   0x10
9f0061db:	e9 c0 ff ff ff       	jmp    9f0061a0 <__x86.get_pc_thunk.ax+0xe>

Disassembly of section .text.__x86.get_pc_thunk.bx:

9f0061e0 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
9f0061e0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
9f0061e3:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

9f0061e4 <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
9f0061e4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
9f0061e7:	c3                   	ret    

Disassembly of section .eh_frame:

9f0061e8 <.eh_frame>:
9f0061e8:	14 00                	adc    al,0x0
9f0061ea:	00 00                	add    BYTE PTR [eax],al
9f0061ec:	00 00                	add    BYTE PTR [eax],al
9f0061ee:	00 00                	add    BYTE PTR [eax],al
9f0061f0:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f0061f3:	00 01                	add    BYTE PTR [ecx],al
9f0061f5:	7c 08                	jl     9f0061ff <__x86.get_pc_thunk.cx+0x1b>
9f0061f7:	01 1b                	add    DWORD PTR [ebx],ebx
9f0061f9:	0c 04                	or     al,0x4
9f0061fb:	04 88                	add    al,0x88
9f0061fd:	01 00                	add    DWORD PTR [eax],eax
9f0061ff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006202:	00 00                	add    BYTE PTR [eax],al
9f006204:	1c 00                	sbb    al,0x0
9f006206:	00 00                	add    BYTE PTR [eax],al
9f006208:	f8                   	clc    
9f006209:	9d                   	popf   
9f00620a:	ff                   	(bad)  
9f00620b:	ff                   	(bad)  
9f00620c:	38 00                	cmp    BYTE PTR [eax],al
9f00620e:	00 00                	add    BYTE PTR [eax],al
9f006210:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006213:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006219:	74 c5                	je     9f0061e0 <__x86.get_pc_thunk.bx>
9f00621b:	0c 04                	or     al,0x4
9f00621d:	04 00                	add    al,0x0
9f00621f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006222:	00 00                	add    BYTE PTR [eax],al
9f006224:	3c 00                	cmp    al,0x0
9f006226:	00 00                	add    BYTE PTR [eax],al
9f006228:	10 9e ff ff 38 00    	adc    BYTE PTR [esi+0x38ffff],bl
9f00622e:	00 00                	add    BYTE PTR [eax],al
9f006230:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006233:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006239:	74 c5                	je     9f006200 <__x86.get_pc_thunk.cx+0x1c>
9f00623b:	0c 04                	or     al,0x4
9f00623d:	04 00                	add    al,0x0
9f00623f:	00 10                	add    BYTE PTR [eax],dl
9f006241:	00 00                	add    BYTE PTR [eax],al
9f006243:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
9f006247:	00 4a ff             	add    BYTE PTR [edx-0x1],cl
9f00624a:	ff                   	(bad)  
9f00624b:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f00624e:	00 00                	add    BYTE PTR [eax],al
9f006250:	00 00                	add    BYTE PTR [eax],al
9f006252:	00 00                	add    BYTE PTR [eax],al
9f006254:	24 00                	and    al,0x0
9f006256:	00 00                	add    BYTE PTR [eax],al
9f006258:	70 00                	jo     9f00625a <__x86.get_pc_thunk.cx+0x76>
9f00625a:	00 00                	add    BYTE PTR [eax],al
9f00625c:	14 9e                	adc    al,0x9e
9f00625e:	ff                   	(bad)  
9f00625f:	ff 55 00             	call   DWORD PTR [ebp+0x0]
9f006262:	00 00                	add    BYTE PTR [eax],al
9f006264:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006267:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00626d:	42                   	inc    edx
9f00626e:	86 03                	xchg   BYTE PTR [ebx],al
9f006270:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f006274:	c3                   	ret    
9f006275:	41                   	inc    ecx
9f006276:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00627a:	04 04                	add    al,0x4
9f00627c:	24 00                	and    al,0x0
9f00627e:	00 00                	add    BYTE PTR [eax],al
9f006280:	98                   	cwde   
9f006281:	00 00                	add    BYTE PTR [eax],al
9f006283:	00 41 9e             	add    BYTE PTR [ecx-0x62],al
9f006286:	ff                   	(bad)  
9f006287:	ff 55 00             	call   DWORD PTR [ebp+0x0]
9f00628a:	00 00                	add    BYTE PTR [eax],al
9f00628c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00628f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006295:	42                   	inc    edx
9f006296:	86 03                	xchg   BYTE PTR [ebx],al
9f006298:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f00629c:	c3                   	ret    
9f00629d:	41                   	inc    ecx
9f00629e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0062a2:	04 04                	add    al,0x4
9f0062a4:	24 00                	and    al,0x0
9f0062a6:	00 00                	add    BYTE PTR [eax],al
9f0062a8:	c0 00 00             	rol    BYTE PTR [eax],0x0
9f0062ab:	00 70 9e             	add    BYTE PTR [eax-0x62],dh
9f0062ae:	ff                   	(bad)  
9f0062af:	ff 97 00 00 00 00    	call   DWORD PTR [edi+0x0]
9f0062b5:	41                   	inc    ecx
9f0062b6:	0e                   	push   cs
9f0062b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0062bd:	42                   	inc    edx
9f0062be:	86 03                	xchg   BYTE PTR [ebx],al
9f0062c0:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f0062c4:	c3                   	ret    
9f0062c5:	41                   	inc    ecx
9f0062c6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0062ca:	04 04                	add    al,0x4
9f0062cc:	24 00                	and    al,0x0
9f0062ce:	00 00                	add    BYTE PTR [eax],al
9f0062d0:	e8 00 00 00 df       	call   7e0062d5 <sysEnter_Vector+0x7ded62d5>
9f0062d5:	9e                   	sahf   
9f0062d6:	ff                   	(bad)  
9f0062d7:	ff 97 00 00 00 00    	call   DWORD PTR [edi+0x0]
9f0062dd:	41                   	inc    ecx
9f0062de:	0e                   	push   cs
9f0062df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0062e5:	42                   	inc    edx
9f0062e6:	86 03                	xchg   BYTE PTR [ebx],al
9f0062e8:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f0062ec:	c3                   	ret    
9f0062ed:	41                   	inc    ecx
9f0062ee:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0062f2:	04 04                	add    al,0x4
9f0062f4:	10 00                	adc    BYTE PTR [eax],al
9f0062f6:	00 00                	add    BYTE PTR [eax],al
9f0062f8:	10 01                	adc    BYTE PTR [ecx],al
9f0062fa:	00 00                	add    BYTE PTR [eax],al
9f0062fc:	e4 fe                	in     al,0xfe
9f0062fe:	ff                   	(bad)  
9f0062ff:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f006302:	00 00                	add    BYTE PTR [eax],al
9f006304:	00 00                	add    BYTE PTR [eax],al
9f006306:	00 00                	add    BYTE PTR [eax],al
9f006308:	20 00                	and    BYTE PTR [eax],al
9f00630a:	00 00                	add    BYTE PTR [eax],al
9f00630c:	24 01                	and    al,0x1
9f00630e:	00 00                	add    BYTE PTR [eax],al
9f006310:	3c 9f                	cmp    al,0x9f
9f006312:	ff                   	(bad)  
9f006313:	ff 77 00             	push   DWORD PTR [edi+0x0]
9f006316:	00 00                	add    BYTE PTR [eax],al
9f006318:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00631b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006321:	44                   	inc    esp
9f006322:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006325:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006326:	c5 c3 0c             	(bad)  
9f006329:	04 04                	add    al,0x4
9f00632b:	00 20                	add    BYTE PTR [eax],ah
9f00632d:	00 00                	add    BYTE PTR [eax],al
9f00632f:	00 48 01             	add    BYTE PTR [eax+0x1],cl
9f006332:	00 00                	add    BYTE PTR [eax],al
9f006334:	8f                   	(bad)  
9f006335:	9f                   	lahf   
9f006336:	ff                   	(bad)  
9f006337:	ff                   	(bad)  
9f006338:	bb 00 00 00 00       	mov    ebx,0x0
9f00633d:	41                   	inc    ecx
9f00633e:	0e                   	push   cs
9f00633f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006345:	44                   	inc    esp
9f006346:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006349:	b3 c5                	mov    bl,0xc5
9f00634b:	c3                   	ret    
9f00634c:	0c 04                	or     al,0x4
9f00634e:	04 00                	add    al,0x0
9f006350:	20 00                	and    BYTE PTR [eax],al
9f006352:	00 00                	add    BYTE PTR [eax],al
9f006354:	6c                   	ins    BYTE PTR es:[edi],dx
9f006355:	01 00                	add    DWORD PTR [eax],eax
9f006357:	00 26                	add    BYTE PTR [esi],ah
9f006359:	a0 ff ff bd 00       	mov    al,ds:0xbdffff
9f00635e:	00 00                	add    BYTE PTR [eax],al
9f006360:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006363:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006369:	44                   	inc    esp
9f00636a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00636d:	b5 c5                	mov    ch,0xc5
9f00636f:	c3                   	ret    
9f006370:	0c 04                	or     al,0x4
9f006372:	04 00                	add    al,0x0
9f006374:	1c 00                	sbb    al,0x0
9f006376:	00 00                	add    BYTE PTR [eax],al
9f006378:	90                   	nop
9f006379:	01 00                	add    DWORD PTR [eax],eax
9f00637b:	00 bf a0 ff ff 5c    	add    BYTE PTR [edi+0x5cffffa0],bh
9f006381:	00 00                	add    BYTE PTR [eax],al
9f006383:	00 00                	add    BYTE PTR [eax],al
9f006385:	41                   	inc    ecx
9f006386:	0e                   	push   cs
9f006387:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00638d:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
9f006390:	0c 04                	or     al,0x4
9f006392:	04 00                	add    al,0x0
9f006394:	1c 00                	sbb    al,0x0
9f006396:	00 00                	add    BYTE PTR [eax],al
9f006398:	b0 01                	mov    al,0x1
9f00639a:	00 00                	add    BYTE PTR [eax],al
9f00639c:	fb                   	sti    
9f00639d:	a0 ff ff 1a 00       	mov    al,ds:0x1affff
9f0063a2:	00 00                	add    BYTE PTR [eax],al
9f0063a4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0063a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0063ad:	56                   	push   esi
9f0063ae:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0063b1:	04 00                	add    al,0x0
9f0063b3:	00 20                	add    BYTE PTR [eax],ah
9f0063b5:	00 00                	add    BYTE PTR [eax],al
9f0063b7:	00 d0                	add    al,dl
9f0063b9:	01 00                	add    DWORD PTR [eax],eax
9f0063bb:	00 f8                	add    al,bh
9f0063bd:	a0 ff ff ba 00       	mov    al,ds:0xbaffff
9f0063c2:	00 00                	add    BYTE PTR [eax],al
9f0063c4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0063c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0063cd:	44                   	inc    esp
9f0063ce:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0063d1:	b2 c5                	mov    dl,0xc5
9f0063d3:	c3                   	ret    
9f0063d4:	0c 04                	or     al,0x4
9f0063d6:	04 00                	add    al,0x0
9f0063d8:	20 00                	and    BYTE PTR [eax],al
9f0063da:	00 00                	add    BYTE PTR [eax],al
9f0063dc:	f4                   	hlt    
9f0063dd:	01 00                	add    DWORD PTR [eax],eax
9f0063df:	00 8e a1 ff ff 5a    	add    BYTE PTR [esi+0x5affffa1],cl
9f0063e5:	00 00                	add    BYTE PTR [eax],al
9f0063e7:	00 00                	add    BYTE PTR [eax],al
9f0063e9:	41                   	inc    ecx
9f0063ea:	0e                   	push   cs
9f0063eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0063f1:	44                   	inc    esp
9f0063f2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0063f5:	52                   	push   edx
9f0063f6:	c5 c3 0c             	(bad)  
9f0063f9:	04 04                	add    al,0x4
9f0063fb:	00 20                	add    BYTE PTR [eax],ah
9f0063fd:	00 00                	add    BYTE PTR [eax],al
9f0063ff:	00 18                	add    BYTE PTR [eax],bl
9f006401:	02 00                	add    al,BYTE PTR [eax]
9f006403:	00 c4                	add    ah,al
9f006405:	a1 ff ff 5a 00       	mov    eax,ds:0x5affff
9f00640a:	00 00                	add    BYTE PTR [eax],al
9f00640c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00640f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006415:	44                   	inc    esp
9f006416:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006419:	52                   	push   edx
9f00641a:	c5 c3 0c             	(bad)  
9f00641d:	04 04                	add    al,0x4
9f00641f:	00 28                	add    BYTE PTR [eax],ch
9f006421:	00 00                	add    BYTE PTR [eax],al
9f006423:	00 3c 02             	add    BYTE PTR [edx+eax*1],bh
9f006426:	00 00                	add    BYTE PTR [eax],al
9f006428:	fc                   	cld    
9f006429:	a1 ff ff 44 01       	mov    eax,ds:0x144ffff
9f00642e:	00 00                	add    BYTE PTR [eax],al
9f006430:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006433:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006439:	48                   	dec    eax
9f00643a:	87 03                	xchg   DWORD PTR [ebx],eax
9f00643c:	83 04 03 36          	add    DWORD PTR [ebx+eax*1],0x36
9f006440:	01 c3                	add    ebx,eax
9f006442:	41                   	inc    ecx
9f006443:	c7 41 c5 0c 04 04 00 	mov    DWORD PTR [ecx-0x3b],0x4040c
9f00644a:	00 00                	add    BYTE PTR [eax],al
9f00644c:	1c 00                	sbb    al,0x0
9f00644e:	00 00                	add    BYTE PTR [eax],al
9f006450:	68 02 00 00 14       	push   0x14000002
9f006455:	a3 ff ff 20 00       	mov    ds:0x20ffff,eax
9f00645a:	00 00                	add    BYTE PTR [eax],al
9f00645c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00645f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006465:	5c                   	pop    esp
9f006466:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006469:	04 00                	add    al,0x0
9f00646b:	00 20                	add    BYTE PTR [eax],ah
9f00646d:	00 00                	add    BYTE PTR [eax],al
9f00646f:	00 88 02 00 00 14    	add    BYTE PTR [eax+0x14000002],cl
9f006475:	a3 ff ff aa 00       	mov    ds:0xaaffff,eax
9f00647a:	00 00                	add    BYTE PTR [eax],al
9f00647c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00647f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006485:	44                   	inc    esp
9f006486:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006489:	a2 c5 c3 0c 04       	mov    ds:0x40cc3c5,al
9f00648e:	04 00                	add    al,0x0
9f006490:	1c 00                	sbb    al,0x0
9f006492:	00 00                	add    BYTE PTR [eax],al
9f006494:	ac                   	lods   al,BYTE PTR ds:[esi]
9f006495:	02 00                	add    al,BYTE PTR [eax]
9f006497:	00 9a a3 ff ff 23    	add    BYTE PTR [edx+0x23ffffa3],bl
9f00649d:	00 00                	add    BYTE PTR [eax],al
9f00649f:	00 00                	add    BYTE PTR [eax],al
9f0064a1:	41                   	inc    ecx
9f0064a2:	0e                   	push   cs
9f0064a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0064a9:	5f                   	pop    edi
9f0064aa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0064ad:	04 00                	add    al,0x0
9f0064af:	00 20                	add    BYTE PTR [eax],ah
9f0064b1:	00 00                	add    BYTE PTR [eax],al
9f0064b3:	00 cc                	add    ah,cl
9f0064b5:	02 00                	add    al,BYTE PTR [eax]
9f0064b7:	00 9d a3 ff ff c1    	add    BYTE PTR [ebp-0x3e00005d],bl
9f0064bd:	01 00                	add    DWORD PTR [eax],eax
9f0064bf:	00 00                	add    BYTE PTR [eax],al
9f0064c1:	41                   	inc    ecx
9f0064c2:	0e                   	push   cs
9f0064c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0064c9:	44                   	inc    esp
9f0064ca:	83 03 03             	add    DWORD PTR [ebx],0x3
9f0064cd:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
9f0064d2:	04 04                	add    al,0x4
9f0064d4:	20 00                	and    BYTE PTR [eax],al
9f0064d6:	00 00                	add    BYTE PTR [eax],al
9f0064d8:	f0 02 00             	lock add al,BYTE PTR [eax]
9f0064db:	00 3a                	add    BYTE PTR [edx],bh
9f0064dd:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f0064de:	ff                   	(bad)  
9f0064df:	ff 2c 00             	jmp    FWORD PTR [eax+eax*1]
9f0064e2:	00 00                	add    BYTE PTR [eax],al
9f0064e4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0064e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0064ed:	44                   	inc    esp
9f0064ee:	83 03 64             	add    DWORD PTR [ebx],0x64
9f0064f1:	c5 c3 0c             	(bad)  
9f0064f4:	04 04                	add    al,0x4
9f0064f6:	00 00                	add    BYTE PTR [eax],al
9f0064f8:	1c 00                	sbb    al,0x0
9f0064fa:	00 00                	add    BYTE PTR [eax],al
9f0064fc:	14 03                	adc    al,0x3
9f0064fe:	00 00                	add    BYTE PTR [eax],al
9f006500:	42                   	inc    edx
9f006501:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f006502:	ff                   	(bad)  
9f006503:	ff 23                	jmp    DWORD PTR [ebx]
9f006505:	00 00                	add    BYTE PTR [eax],al
9f006507:	00 00                	add    BYTE PTR [eax],al
9f006509:	41                   	inc    ecx
9f00650a:	0e                   	push   cs
9f00650b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006511:	5f                   	pop    edi
9f006512:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006515:	04 00                	add    al,0x0
9f006517:	00 20                	add    BYTE PTR [eax],ah
9f006519:	00 00                	add    BYTE PTR [eax],al
9f00651b:	00 34 03             	add    BYTE PTR [ebx+eax*1],dh
9f00651e:	00 00                	add    BYTE PTR [eax],al
9f006520:	48                   	dec    eax
9f006521:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f006522:	ff                   	(bad)  
9f006523:	ff 31                	push   DWORD PTR [ecx]
9f006525:	00 00                	add    BYTE PTR [eax],al
9f006527:	00 00                	add    BYTE PTR [eax],al
9f006529:	41                   	inc    ecx
9f00652a:	0e                   	push   cs
9f00652b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006531:	44                   	inc    esp
9f006532:	83 03 69             	add    DWORD PTR [ebx],0x69
9f006535:	c5 c3 0c             	(bad)  
9f006538:	04 04                	add    al,0x4
9f00653a:	00 00                	add    BYTE PTR [eax],al
9f00653c:	1c 00                	sbb    al,0x0
9f00653e:	00 00                	add    BYTE PTR [eax],al
9f006540:	58                   	pop    eax
9f006541:	03 00                	add    eax,DWORD PTR [eax]
9f006543:	00 55 a5             	add    BYTE PTR [ebp-0x5b],dl
9f006546:	ff                   	(bad)  
9f006547:	ff 26                	jmp    DWORD PTR [esi]
9f006549:	00 00                	add    BYTE PTR [eax],al
9f00654b:	00 00                	add    BYTE PTR [eax],al
9f00654d:	41                   	inc    ecx
9f00654e:	0e                   	push   cs
9f00654f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006555:	62                   	(bad)  
9f006556:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006559:	04 00                	add    al,0x0
9f00655b:	00 20                	add    BYTE PTR [eax],ah
9f00655d:	00 00                	add    BYTE PTR [eax],al
9f00655f:	00 78 03             	add    BYTE PTR [eax+0x3],bh
9f006562:	00 00                	add    BYTE PTR [eax],al
9f006564:	5b                   	pop    ebx
9f006565:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f006566:	ff                   	(bad)  
9f006567:	ff 2c 00             	jmp    FWORD PTR [eax+eax*1]
9f00656a:	00 00                	add    BYTE PTR [eax],al
9f00656c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00656f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006575:	44                   	inc    esp
9f006576:	83 03 64             	add    DWORD PTR [ebx],0x64
9f006579:	c5 c3 0c             	(bad)  
9f00657c:	04 04                	add    al,0x4
9f00657e:	00 00                	add    BYTE PTR [eax],al
9f006580:	1c 00                	sbb    al,0x0
9f006582:	00 00                	add    BYTE PTR [eax],al
9f006584:	9c                   	pushf  
9f006585:	03 00                	add    eax,DWORD PTR [eax]
9f006587:	00 63 a5             	add    BYTE PTR [ebx-0x5b],ah
9f00658a:	ff                   	(bad)  
9f00658b:	ff 23                	jmp    DWORD PTR [ebx]
9f00658d:	00 00                	add    BYTE PTR [eax],al
9f00658f:	00 00                	add    BYTE PTR [eax],al
9f006591:	41                   	inc    ecx
9f006592:	0e                   	push   cs
9f006593:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006599:	5f                   	pop    edi
9f00659a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00659d:	04 00                	add    al,0x0
9f00659f:	00 20                	add    BYTE PTR [eax],ah
9f0065a1:	00 00                	add    BYTE PTR [eax],al
9f0065a3:	00 bc 03 00 00 66 a5 	add    BYTE PTR [ebx+eax*1-0x5a9a0000],bh
9f0065aa:	ff                   	(bad)  
9f0065ab:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f0065ae:	00 00                	add    BYTE PTR [eax],al
9f0065b0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0065b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0065b9:	44                   	inc    esp
9f0065ba:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0065bd:	51                   	push   ecx
9f0065be:	c5 c3 0c             	(bad)  
9f0065c1:	04 04                	add    al,0x4
9f0065c3:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0065c6:	00 00                	add    BYTE PTR [eax],al
9f0065c8:	e0 03                	loopne 9f0065cd <__x86.get_pc_thunk.cx+0x3e9>
9f0065ca:	00 00                	add    BYTE PTR [eax],al
9f0065cc:	9b                   	fwait
9f0065cd:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f0065ce:	ff                   	(bad)  
9f0065cf:	ff 93 00 00 00 00    	call   DWORD PTR [ebx+0x0]
9f0065d5:	41                   	inc    ecx
9f0065d6:	0e                   	push   cs
9f0065d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0065dd:	45                   	inc    ebp
9f0065de:	86 03                	xchg   BYTE PTR [ebx],al
9f0065e0:	83 04 02 88          	add    DWORD PTR [edx+eax*1],0xffffff88
9f0065e4:	c3                   	ret    
9f0065e5:	41                   	inc    ecx
9f0065e6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0065ea:	04 04                	add    al,0x4
9f0065ec:	20 00                	and    BYTE PTR [eax],al
9f0065ee:	00 00                	add    BYTE PTR [eax],al
9f0065f0:	08 04 00             	or     BYTE PTR [eax+eax*1],al
9f0065f3:	00 06                	add    BYTE PTR [esi],al
9f0065f5:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
9f0065f6:	ff                   	(bad)  
9f0065f7:	ff 2a                	jmp    FWORD PTR [edx]
9f0065f9:	00 00                	add    BYTE PTR [eax],al
9f0065fb:	00 00                	add    BYTE PTR [eax],al
9f0065fd:	41                   	inc    ecx
9f0065fe:	0e                   	push   cs
9f0065ff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006605:	44                   	inc    esp
9f006606:	83 03 62             	add    DWORD PTR [ebx],0x62
9f006609:	c5 c3 0c             	(bad)  
9f00660c:	04 04                	add    al,0x4
9f00660e:	00 00                	add    BYTE PTR [eax],al
9f006610:	1c 00                	sbb    al,0x0
9f006612:	00 00                	add    BYTE PTR [eax],al
9f006614:	2c 04                	sub    al,0x4
9f006616:	00 00                	add    BYTE PTR [eax],al
9f006618:	0c a6                	or     al,0xa6
9f00661a:	ff                   	(bad)  
9f00661b:	ff 20                	jmp    DWORD PTR [eax]
9f00661d:	00 00                	add    BYTE PTR [eax],al
9f00661f:	00 00                	add    BYTE PTR [eax],al
9f006621:	41                   	inc    ecx
9f006622:	0e                   	push   cs
9f006623:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006629:	5c                   	pop    esp
9f00662a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00662d:	04 00                	add    al,0x0
9f00662f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f006632:	00 00                	add    BYTE PTR [eax],al
9f006634:	4c                   	dec    esp
9f006635:	04 00                	add    al,0x0
9f006637:	00 0c a6             	add    BYTE PTR [esi+eiz*4],cl
9f00663a:	ff                   	(bad)  
9f00663b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f006641:	41                   	inc    ecx
9f006642:	0e                   	push   cs
9f006643:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006649:	42                   	inc    edx
9f00664a:	86 03                	xchg   BYTE PTR [ebx],al
9f00664c:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f006653:	c5 
9f006654:	0c 04                	or     al,0x4
9f006656:	04 00                	add    al,0x0
9f006658:	1c 00                	sbb    al,0x0
9f00665a:	00 00                	add    BYTE PTR [eax],al
9f00665c:	74 04                	je     9f006662 <__x86.get_pc_thunk.cx+0x47e>
9f00665e:	00 00                	add    BYTE PTR [eax],al
9f006660:	19 a6 ff ff 26 00    	sbb    DWORD PTR [esi+0x26ffff],esp
9f006666:	00 00                	add    BYTE PTR [eax],al
9f006668:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00666b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006671:	62                   	(bad)  
9f006672:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006675:	04 00                	add    al,0x0
9f006677:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00667a:	00 00                	add    BYTE PTR [eax],al
9f00667c:	94                   	xchg   esp,eax
9f00667d:	04 00                	add    al,0x0
9f00667f:	00 1f                	add    BYTE PTR [edi],bl
9f006681:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
9f006682:	ff                   	(bad)  
9f006683:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f006689:	41                   	inc    ecx
9f00668a:	0e                   	push   cs
9f00668b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006691:	42                   	inc    edx
9f006692:	86 03                	xchg   BYTE PTR [ebx],al
9f006694:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f00669b:	c5 
9f00669c:	0c 04                	or     al,0x4
9f00669e:	04 00                	add    al,0x0
9f0066a0:	1c 00                	sbb    al,0x0
9f0066a2:	00 00                	add    BYTE PTR [eax],al
9f0066a4:	bc 04 00 00 2c       	mov    esp,0x2c000004
9f0066a9:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
9f0066aa:	ff                   	(bad)  
9f0066ab:	ff 26                	jmp    DWORD PTR [esi]
9f0066ad:	00 00                	add    BYTE PTR [eax],al
9f0066af:	00 00                	add    BYTE PTR [eax],al
9f0066b1:	41                   	inc    ecx
9f0066b2:	0e                   	push   cs
9f0066b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0066b9:	62                   	(bad)  
9f0066ba:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0066bd:	04 00                	add    al,0x0
9f0066bf:	00 20                	add    BYTE PTR [eax],ah
9f0066c1:	00 00                	add    BYTE PTR [eax],al
9f0066c3:	00 dc                	add    ah,bl
9f0066c5:	04 00                	add    al,0x0
9f0066c7:	00 32                	add    BYTE PTR [edx],dh
9f0066c9:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
9f0066ca:	ff                   	(bad)  
9f0066cb:	ff 2e                	jmp    FWORD PTR [esi]
9f0066cd:	00 00                	add    BYTE PTR [eax],al
9f0066cf:	00 00                	add    BYTE PTR [eax],al
9f0066d1:	41                   	inc    ecx
9f0066d2:	0e                   	push   cs
9f0066d3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0066d9:	44                   	inc    esp
9f0066da:	83 03 66             	add    DWORD PTR [ebx],0x66
9f0066dd:	c5 c3 0c             	(bad)  
9f0066e0:	04 04                	add    al,0x4
9f0066e2:	00 00                	add    BYTE PTR [eax],al
9f0066e4:	1c 00                	sbb    al,0x0
9f0066e6:	00 00                	add    BYTE PTR [eax],al
9f0066e8:	00 05 00 00 3c a6    	add    BYTE PTR ds:0xa63c0000,al
9f0066ee:	ff                   	(bad)  
9f0066ef:	ff 26                	jmp    DWORD PTR [esi]
9f0066f1:	00 00                	add    BYTE PTR [eax],al
9f0066f3:	00 00                	add    BYTE PTR [eax],al
9f0066f5:	41                   	inc    ecx
9f0066f6:	0e                   	push   cs
9f0066f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0066fd:	62                   	(bad)  
9f0066fe:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006701:	04 00                	add    al,0x0
9f006703:	00 20                	add    BYTE PTR [eax],ah
9f006705:	00 00                	add    BYTE PTR [eax],al
9f006707:	00 20                	add    BYTE PTR [eax],ah
9f006709:	05 00 00 42 a6       	add    eax,0xa6420000
9f00670e:	ff                   	(bad)  
9f00670f:	ff 2d 00 00 00 00    	jmp    FWORD PTR ds:0x0
9f006715:	41                   	inc    ecx
9f006716:	0e                   	push   cs
9f006717:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00671d:	44                   	inc    esp
9f00671e:	83 03 65             	add    DWORD PTR [ebx],0x65
9f006721:	c5 c3 0c             	(bad)  
9f006724:	04 04                	add    al,0x4
9f006726:	00 00                	add    BYTE PTR [eax],al
9f006728:	1c 00                	sbb    al,0x0
9f00672a:	00 00                	add    BYTE PTR [eax],al
9f00672c:	44                   	inc    esp
9f00672d:	05 00 00 4b a6       	add    eax,0xa64b0000
9f006732:	ff                   	(bad)  
9f006733:	ff 23                	jmp    DWORD PTR [ebx]
9f006735:	00 00                	add    BYTE PTR [eax],al
9f006737:	00 00                	add    BYTE PTR [eax],al
9f006739:	41                   	inc    ecx
9f00673a:	0e                   	push   cs
9f00673b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006741:	5f                   	pop    edi
9f006742:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006745:	04 00                	add    al,0x0
9f006747:	00 20                	add    BYTE PTR [eax],ah
9f006749:	00 00                	add    BYTE PTR [eax],al
9f00674b:	00 64 05 00          	add    BYTE PTR [ebp+eax*1+0x0],ah
9f00674f:	00 4e a6             	add    BYTE PTR [esi-0x5a],cl
9f006752:	ff                   	(bad)  
9f006753:	ff 29                	jmp    FWORD PTR [ecx]
9f006755:	03 00                	add    eax,DWORD PTR [eax]
9f006757:	00 00                	add    BYTE PTR [eax],al
9f006759:	41                   	inc    ecx
9f00675a:	0e                   	push   cs
9f00675b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006761:	44                   	inc    esp
9f006762:	83 03 03             	add    DWORD PTR [ebx],0x3
9f006765:	21 03                	and    DWORD PTR [ebx],eax
9f006767:	c5 c3 0c             	(bad)  
9f00676a:	04 04                	add    al,0x4
9f00676c:	20 00                	and    BYTE PTR [eax],al
9f00676e:	00 00                	add    BYTE PTR [eax],al
9f006770:	88 05 00 00 53 a9    	mov    BYTE PTR ds:0xa9530000,al
9f006776:	ff                   	(bad)  
9f006777:	ff 29                	jmp    FWORD PTR [ecx]
9f006779:	00 00                	add    BYTE PTR [eax],al
9f00677b:	00 00                	add    BYTE PTR [eax],al
9f00677d:	41                   	inc    ecx
9f00677e:	0e                   	push   cs
9f00677f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006785:	44                   	inc    esp
9f006786:	83 03 61             	add    DWORD PTR [ebx],0x61
9f006789:	c5 c3 0c             	(bad)  
9f00678c:	04 04                	add    al,0x4
9f00678e:	00 00                	add    BYTE PTR [eax],al
9f006790:	1c 00                	sbb    al,0x0
9f006792:	00 00                	add    BYTE PTR [eax],al
9f006794:	ac                   	lods   al,BYTE PTR ds:[esi]
9f006795:	05 00 00 58 a9       	add    eax,0xa9580000
9f00679a:	ff                   	(bad)  
9f00679b:	ff 20                	jmp    DWORD PTR [eax]
9f00679d:	00 00                	add    BYTE PTR [eax],al
9f00679f:	00 00                	add    BYTE PTR [eax],al
9f0067a1:	41                   	inc    ecx
9f0067a2:	0e                   	push   cs
9f0067a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0067a9:	5c                   	pop    esp
9f0067aa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0067ad:	04 00                	add    al,0x0
9f0067af:	00 20                	add    BYTE PTR [eax],ah
9f0067b1:	00 00                	add    BYTE PTR [eax],al
9f0067b3:	00 cc                	add    ah,cl
9f0067b5:	05 00 00 58 a9       	add    eax,0xa9580000
9f0067ba:	ff                   	(bad)  
9f0067bb:	ff c1                	inc    ecx
9f0067bd:	01 00                	add    DWORD PTR [eax],eax
9f0067bf:	00 00                	add    BYTE PTR [eax],al
9f0067c1:	41                   	inc    ecx
9f0067c2:	0e                   	push   cs
9f0067c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0067c9:	44                   	inc    esp
9f0067ca:	83 03 03             	add    DWORD PTR [ebx],0x3
9f0067cd:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
9f0067d2:	04 04                	add    al,0x4
9f0067d4:	1c 00                	sbb    al,0x0
9f0067d6:	00 00                	add    BYTE PTR [eax],al
9f0067d8:	f0 05 00 00 f5 aa    	lock add eax,0xaaf50000
9f0067de:	ff                   	(bad)  
9f0067df:	ff 26                	jmp    DWORD PTR [esi]
9f0067e1:	00 00                	add    BYTE PTR [eax],al
9f0067e3:	00 00                	add    BYTE PTR [eax],al
9f0067e5:	41                   	inc    ecx
9f0067e6:	0e                   	push   cs
9f0067e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0067ed:	62                   	(bad)  
9f0067ee:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0067f1:	04 00                	add    al,0x0
9f0067f3:	00 20                	add    BYTE PTR [eax],ah
9f0067f5:	00 00                	add    BYTE PTR [eax],al
9f0067f7:	00 10                	add    BYTE PTR [eax],dl
9f0067f9:	06                   	push   es
9f0067fa:	00 00                	add    BYTE PTR [eax],al
9f0067fc:	fb                   	sti    
9f0067fd:	aa                   	stos   BYTE PTR es:[edi],al
9f0067fe:	ff                   	(bad)  
9f0067ff:	ff 29                	jmp    FWORD PTR [ecx]
9f006801:	00 00                	add    BYTE PTR [eax],al
9f006803:	00 00                	add    BYTE PTR [eax],al
9f006805:	41                   	inc    ecx
9f006806:	0e                   	push   cs
9f006807:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00680d:	44                   	inc    esp
9f00680e:	83 03 61             	add    DWORD PTR [ebx],0x61
9f006811:	c5 c3 0c             	(bad)  
9f006814:	04 04                	add    al,0x4
9f006816:	00 00                	add    BYTE PTR [eax],al
9f006818:	20 00                	and    BYTE PTR [eax],al
9f00681a:	00 00                	add    BYTE PTR [eax],al
9f00681c:	34 06                	xor    al,0x6
9f00681e:	00 00                	add    BYTE PTR [eax],al
9f006820:	00 ab ff ff 26 00    	add    BYTE PTR [ebx+0x26ffff],ch
9f006826:	00 00                	add    BYTE PTR [eax],al
9f006828:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00682b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006831:	41                   	inc    ecx
9f006832:	83 03 60             	add    DWORD PTR [ebx],0x60
9f006835:	c3                   	ret    
9f006836:	41                   	inc    ecx
9f006837:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00683a:	04 00                	add    al,0x0
9f00683c:	20 00                	and    BYTE PTR [eax],al
9f00683e:	00 00                	add    BYTE PTR [eax],al
9f006840:	58                   	pop    eax
9f006841:	06                   	push   es
9f006842:	00 00                	add    BYTE PTR [eax],al
9f006844:	02 ab ff ff 43 00    	add    ch,BYTE PTR [ebx+0x43ffff]
9f00684a:	00 00                	add    BYTE PTR [eax],al
9f00684c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00684f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006855:	44                   	inc    esp
9f006856:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f006859:	c3                   	ret    
9f00685a:	41                   	inc    ecx
9f00685b:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00685e:	04 00                	add    al,0x0
9f006860:	20 00                	and    BYTE PTR [eax],al
9f006862:	00 00                	add    BYTE PTR [eax],al
9f006864:	7c 06                	jl     9f00686c <__x86.get_pc_thunk.cx+0x688>
9f006866:	00 00                	add    BYTE PTR [eax],al
9f006868:	21 ab ff ff 43 00    	and    DWORD PTR [ebx+0x43ffff],ebp
9f00686e:	00 00                	add    BYTE PTR [eax],al
9f006870:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006873:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006879:	44                   	inc    esp
9f00687a:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f00687d:	c3                   	ret    
9f00687e:	41                   	inc    ecx
9f00687f:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006882:	04 00                	add    al,0x0
9f006884:	20 00                	and    BYTE PTR [eax],al
9f006886:	00 00                	add    BYTE PTR [eax],al
9f006888:	a0 06 00 00 40       	mov    al,ds:0x40000006
9f00688d:	ab                   	stos   DWORD PTR es:[edi],eax
9f00688e:	ff                   	(bad)  
9f00688f:	ff                   	(bad)  
9f006890:	bd 00 00 00 00       	mov    ebp,0x0
9f006895:	41                   	inc    ecx
9f006896:	0e                   	push   cs
9f006897:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00689d:	44                   	inc    esp
9f00689e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0068a1:	b5 c5                	mov    ch,0xc5
9f0068a3:	c3                   	ret    
9f0068a4:	0c 04                	or     al,0x4
9f0068a6:	04 00                	add    al,0x0
9f0068a8:	24 00                	and    al,0x0
9f0068aa:	00 00                	add    BYTE PTR [eax],al
9f0068ac:	c4 06                	les    eax,FWORD PTR [esi]
9f0068ae:	00 00                	add    BYTE PTR [eax],al
9f0068b0:	dc ab ff ff 3a 00    	fsubr  QWORD PTR [ebx+0x3affff]
9f0068b6:	00 00                	add    BYTE PTR [eax],al
9f0068b8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0068bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0068c1:	45                   	inc    ebp
9f0068c2:	86 03                	xchg   BYTE PTR [ebx],al
9f0068c4:	83 04 6f c3          	add    DWORD PTR [edi+ebp*2],0xffffffc3
9f0068c8:	41                   	inc    ecx
9f0068c9:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0068cd:	04 04                	add    al,0x4
9f0068cf:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0068d2:	00 00                	add    BYTE PTR [eax],al
9f0068d4:	ec                   	in     al,dx
9f0068d5:	06                   	push   es
9f0068d6:	00 00                	add    BYTE PTR [eax],al
9f0068d8:	ee                   	out    dx,al
9f0068d9:	ab                   	stos   DWORD PTR es:[edi],eax
9f0068da:	ff                   	(bad)  
9f0068db:	ff                   	(bad)  
9f0068dc:	3c 00                	cmp    al,0x0
9f0068de:	00 00                	add    BYTE PTR [eax],al
9f0068e0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0068e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0068e9:	45                   	inc    ebp
9f0068ea:	86 03                	xchg   BYTE PTR [ebx],al
9f0068ec:	83 04 71 c3          	add    DWORD PTR [ecx+esi*2],0xffffffc3
9f0068f0:	41                   	inc    ecx
9f0068f1:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0068f5:	04 04                	add    al,0x4
9f0068f7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0068fa:	00 00                	add    BYTE PTR [eax],al
9f0068fc:	14 07                	adc    al,0x7
9f0068fe:	00 00                	add    BYTE PTR [eax],al
9f006900:	02 ac ff ff 3e 00 00 	add    ch,BYTE PTR [edi+edi*8+0x3eff]
9f006907:	00 00                	add    BYTE PTR [eax],al
9f006909:	41                   	inc    ecx
9f00690a:	0e                   	push   cs
9f00690b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006911:	45                   	inc    ebp
9f006912:	86 03                	xchg   BYTE PTR [ebx],al
9f006914:	83 04 73 c3          	add    DWORD PTR [ebx+esi*2],0xffffffc3
9f006918:	41                   	inc    ecx
9f006919:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00691d:	04 04                	add    al,0x4
9f00691f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f006922:	00 00                	add    BYTE PTR [eax],al
9f006924:	3c 07                	cmp    al,0x7
9f006926:	00 00                	add    BYTE PTR [eax],al
9f006928:	18 ac ff ff 40 00 00 	sbb    BYTE PTR [edi+edi*8+0x40ff],ch
9f00692f:	00 00                	add    BYTE PTR [eax],al
9f006931:	41                   	inc    ecx
9f006932:	0e                   	push   cs
9f006933:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006939:	45                   	inc    ebp
9f00693a:	86 03                	xchg   BYTE PTR [ebx],al
9f00693c:	83 04 75 c3 41 c6 41 	add    DWORD PTR [esi*2+0x41c641c3],0xffffffc5
9f006943:	c5 
9f006944:	0c 04                	or     al,0x4
9f006946:	04 00                	add    al,0x0
9f006948:	24 00                	and    al,0x0
9f00694a:	00 00                	add    BYTE PTR [eax],al
9f00694c:	64                   	fs
9f00694d:	07                   	pop    es
9f00694e:	00 00                	add    BYTE PTR [eax],al
9f006950:	30 ac ff ff 42 00 00 	xor    BYTE PTR [edi+edi*8+0x42ff],ch
9f006957:	00 00                	add    BYTE PTR [eax],al
9f006959:	41                   	inc    ecx
9f00695a:	0e                   	push   cs
9f00695b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006961:	45                   	inc    ebp
9f006962:	86 03                	xchg   BYTE PTR [ebx],al
9f006964:	83 04 77 c3          	add    DWORD PTR [edi+esi*2],0xffffffc3
9f006968:	41                   	inc    ecx
9f006969:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00696d:	04 04                	add    al,0x4
9f00696f:	00 20                	add    BYTE PTR [eax],ah
9f006971:	00 00                	add    BYTE PTR [eax],al
9f006973:	00 8c 07 00 00 4a ac 	add    BYTE PTR [edi+eax*1-0x53b60000],cl
9f00697a:	ff                   	(bad)  
9f00697b:	ff cb                	dec    ebx
9f00697d:	00 00                	add    BYTE PTR [eax],al
9f00697f:	00 00                	add    BYTE PTR [eax],al
9f006981:	41                   	inc    ecx
9f006982:	0e                   	push   cs
9f006983:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006989:	44                   	inc    esp
9f00698a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00698d:	c3                   	ret    
9f00698e:	c5 c3 0c             	(bad)  
9f006991:	04 04                	add    al,0x4
9f006993:	00 20                	add    BYTE PTR [eax],ah
9f006995:	00 00                	add    BYTE PTR [eax],al
9f006997:	00 b0 07 00 00 f1    	add    BYTE PTR [eax-0xefffff9],dh
9f00699d:	ac                   	lods   al,BYTE PTR ds:[esi]
9f00699e:	ff                   	(bad)  
9f00699f:	ff 23                	jmp    DWORD PTR [ebx]
9f0069a1:	00 00                	add    BYTE PTR [eax],al
9f0069a3:	00 00                	add    BYTE PTR [eax],al
9f0069a5:	41                   	inc    ecx
9f0069a6:	0e                   	push   cs
9f0069a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0069ad:	44                   	inc    esp
9f0069ae:	83 03 5a             	add    DWORD PTR [ebx],0x5a
9f0069b1:	c3                   	ret    
9f0069b2:	41                   	inc    ecx
9f0069b3:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0069b6:	04 00                	add    al,0x0
9f0069b8:	20 00                	and    BYTE PTR [eax],al
9f0069ba:	00 00                	add    BYTE PTR [eax],al
9f0069bc:	d4 07                	aam    0x7
9f0069be:	00 00                	add    BYTE PTR [eax],al
9f0069c0:	f0 ac                	lock lods al,BYTE PTR ds:[esi]
9f0069c2:	ff                   	(bad)  
9f0069c3:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f0069c6:	00 00                	add    BYTE PTR [eax],al
9f0069c8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0069cb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0069d1:	44                   	inc    esp
9f0069d2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0069d5:	51                   	push   ecx
9f0069d6:	c5 c3 0c             	(bad)  
9f0069d9:	04 04                	add    al,0x4
9f0069db:	00 20                	add    BYTE PTR [eax],ah
9f0069dd:	00 00                	add    BYTE PTR [eax],al
9f0069df:	00 f8                	add    al,bh
9f0069e1:	07                   	pop    es
9f0069e2:	00 00                	add    BYTE PTR [eax],al
9f0069e4:	25 ad ff ff 54       	and    eax,0x54ffffad
9f0069e9:	00 00                	add    BYTE PTR [eax],al
9f0069eb:	00 00                	add    BYTE PTR [eax],al
9f0069ed:	41                   	inc    ecx
9f0069ee:	0e                   	push   cs
9f0069ef:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0069f5:	44                   	inc    esp
9f0069f6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0069f9:	4c                   	dec    esp
9f0069fa:	c5 c3 0c             	(bad)  
9f0069fd:	04 04                	add    al,0x4
9f0069ff:	00 20                	add    BYTE PTR [eax],ah
9f006a01:	00 00                	add    BYTE PTR [eax],al
9f006a03:	00 1c 08             	add    BYTE PTR [eax+ecx*1],bl
9f006a06:	00 00                	add    BYTE PTR [eax],al
9f006a08:	55                   	push   ebp
9f006a09:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f006a0a:	ff                   	(bad)  
9f006a0b:	ff 54 00 00          	call   DWORD PTR [eax+eax*1+0x0]
9f006a0f:	00 00                	add    BYTE PTR [eax],al
9f006a11:	41                   	inc    ecx
9f006a12:	0e                   	push   cs
9f006a13:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006a19:	44                   	inc    esp
9f006a1a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006a1d:	4c                   	dec    esp
9f006a1e:	c5 c3 0c             	(bad)  
9f006a21:	04 04                	add    al,0x4
9f006a23:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006a26:	00 00                	add    BYTE PTR [eax],al
9f006a28:	40                   	inc    eax
9f006a29:	08 00                	or     BYTE PTR [eax],al
9f006a2b:	00 85 ad ff ff 34    	add    BYTE PTR [ebp+0x34ffffad],al
9f006a31:	00 00                	add    BYTE PTR [eax],al
9f006a33:	00 00                	add    BYTE PTR [eax],al
9f006a35:	41                   	inc    ecx
9f006a36:	0e                   	push   cs
9f006a37:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006a3d:	70 c5                	jo     9f006a04 <__x86.get_pc_thunk.cx+0x820>
9f006a3f:	0c 04                	or     al,0x4
9f006a41:	04 00                	add    al,0x0
9f006a43:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006a46:	00 00                	add    BYTE PTR [eax],al
9f006a48:	60                   	pusha  
9f006a49:	08 00                	or     BYTE PTR [eax],al
9f006a4b:	00 99 ad ff ff 37    	add    BYTE PTR [ecx+0x37ffffad],bl
9f006a51:	00 00                	add    BYTE PTR [eax],al
9f006a53:	00 00                	add    BYTE PTR [eax],al
9f006a55:	41                   	inc    ecx
9f006a56:	0e                   	push   cs
9f006a57:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006a5d:	73 c5                	jae    9f006a24 <__x86.get_pc_thunk.cx+0x840>
9f006a5f:	0c 04                	or     al,0x4
9f006a61:	04 00                	add    al,0x0
9f006a63:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006a66:	00 00                	add    BYTE PTR [eax],al
9f006a68:	80 08 00             	or     BYTE PTR [eax],0x0
9f006a6b:	00 b0 ad ff ff 37    	add    BYTE PTR [eax+0x37ffffad],dh
9f006a71:	00 00                	add    BYTE PTR [eax],al
9f006a73:	00 00                	add    BYTE PTR [eax],al
9f006a75:	41                   	inc    ecx
9f006a76:	0e                   	push   cs
9f006a77:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006a7d:	73 c5                	jae    9f006a44 <__x86.get_pc_thunk.cx+0x860>
9f006a7f:	0c 04                	or     al,0x4
9f006a81:	04 00                	add    al,0x0
9f006a83:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f006a86:	00 00                	add    BYTE PTR [eax],al
9f006a88:	a0 08 00 00 c7       	mov    al,ds:0xc7000008
9f006a8d:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f006a8e:	ff                   	(bad)  
9f006a8f:	ff 88 00 00 00 00    	dec    DWORD PTR [eax+0x0]
9f006a95:	41                   	inc    ecx
9f006a96:	0e                   	push   cs
9f006a97:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006a9d:	45                   	inc    ebp
9f006a9e:	86 03                	xchg   BYTE PTR [ebx],al
9f006aa0:	83 04 02 7d          	add    DWORD PTR [edx+eax*1],0x7d
9f006aa4:	c3                   	ret    
9f006aa5:	41                   	inc    ecx
9f006aa6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f006aaa:	04 04                	add    al,0x4
9f006aac:	24 00                	and    al,0x0
9f006aae:	00 00                	add    BYTE PTR [eax],al
9f006ab0:	c8 08 00 00          	enter  0x8,0x0
9f006ab4:	27                   	daa    
9f006ab5:	ae                   	scas   al,BYTE PTR es:[edi]
9f006ab6:	ff                   	(bad)  
9f006ab7:	ff 70 00             	push   DWORD PTR [eax+0x0]
9f006aba:	00 00                	add    BYTE PTR [eax],al
9f006abc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006abf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006ac5:	45                   	inc    ebp
9f006ac6:	86 03                	xchg   BYTE PTR [ebx],al
9f006ac8:	83 04 02 65          	add    DWORD PTR [edx+eax*1],0x65
9f006acc:	c3                   	ret    
9f006acd:	41                   	inc    ecx
9f006ace:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f006ad2:	04 04                	add    al,0x4
9f006ad4:	24 00                	and    al,0x0
9f006ad6:	00 00                	add    BYTE PTR [eax],al
9f006ad8:	f0 08 00             	lock or BYTE PTR [eax],al
9f006adb:	00 6f ae             	add    BYTE PTR [edi-0x52],ch
9f006ade:	ff                   	(bad)  
9f006adf:	ff 70 00             	push   DWORD PTR [eax+0x0]
9f006ae2:	00 00                	add    BYTE PTR [eax],al
9f006ae4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006ae7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006aed:	45                   	inc    ebp
9f006aee:	86 03                	xchg   BYTE PTR [ebx],al
9f006af0:	83 04 02 65          	add    DWORD PTR [edx+eax*1],0x65
9f006af4:	c3                   	ret    
9f006af5:	41                   	inc    ecx
9f006af6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f006afa:	04 04                	add    al,0x4
9f006afc:	1c 00                	sbb    al,0x0
9f006afe:	00 00                	add    BYTE PTR [eax],al
9f006b00:	18 09                	sbb    BYTE PTR [ecx],cl
9f006b02:	00 00                	add    BYTE PTR [eax],al
9f006b04:	b7 ae                	mov    bh,0xae
9f006b06:	ff                   	(bad)  
9f006b07:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f006b0d:	41                   	inc    ecx
9f006b0e:	0e                   	push   cs
9f006b0f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006b15:	59                   	pop    ecx
9f006b16:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006b19:	04 00                	add    al,0x0
9f006b1b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006b1e:	00 00                	add    BYTE PTR [eax],al
9f006b20:	38 09                	cmp    BYTE PTR [ecx],cl
9f006b22:	00 00                	add    BYTE PTR [eax],al
9f006b24:	b4 ae                	mov    ah,0xae
9f006b26:	ff                   	(bad)  
9f006b27:	ff 29                	jmp    FWORD PTR [ecx]
9f006b29:	00 00                	add    BYTE PTR [eax],al
9f006b2b:	00 00                	add    BYTE PTR [eax],al
9f006b2d:	41                   	inc    ecx
9f006b2e:	0e                   	push   cs
9f006b2f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006b35:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f006b39:	04 00                	add    al,0x0
9f006b3b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006b3e:	00 00                	add    BYTE PTR [eax],al
9f006b40:	58                   	pop    eax
9f006b41:	09 00                	or     DWORD PTR [eax],eax
9f006b43:	00 bd ae ff ff 25    	add    BYTE PTR [ebp+0x25ffffae],bh
9f006b49:	00 00                	add    BYTE PTR [eax],al
9f006b4b:	00 00                	add    BYTE PTR [eax],al
9f006b4d:	41                   	inc    ecx
9f006b4e:	0e                   	push   cs
9f006b4f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006b55:	61                   	popa   
9f006b56:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006b59:	04 00                	add    al,0x0
9f006b5b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006b5e:	00 00                	add    BYTE PTR [eax],al
9f006b60:	78 09                	js     9f006b6b <__x86.get_pc_thunk.cx+0x987>
9f006b62:	00 00                	add    BYTE PTR [eax],al
9f006b64:	c2 ae ff             	ret    0xffae
9f006b67:	ff 23                	jmp    DWORD PTR [ebx]
9f006b69:	00 00                	add    BYTE PTR [eax],al
9f006b6b:	00 00                	add    BYTE PTR [eax],al
9f006b6d:	41                   	inc    ecx
9f006b6e:	0e                   	push   cs
9f006b6f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006b75:	5f                   	pop    edi
9f006b76:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006b79:	04 00                	add    al,0x0
9f006b7b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006b7e:	00 00                	add    BYTE PTR [eax],al
9f006b80:	98                   	cwde   
9f006b81:	09 00                	or     DWORD PTR [eax],eax
9f006b83:	00 c5                	add    ch,al
9f006b85:	ae                   	scas   al,BYTE PTR es:[edi]
9f006b86:	ff                   	(bad)  
9f006b87:	ff 4c 00 00          	dec    DWORD PTR [eax+eax*1+0x0]
9f006b8b:	00 00                	add    BYTE PTR [eax],al
9f006b8d:	41                   	inc    ecx
9f006b8e:	0e                   	push   cs
9f006b8f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006b95:	02 48 c5             	add    cl,BYTE PTR [eax-0x3b]
9f006b98:	0c 04                	or     al,0x4
9f006b9a:	04 00                	add    al,0x0
9f006b9c:	20 00                	and    BYTE PTR [eax],al
9f006b9e:	00 00                	add    BYTE PTR [eax],al
9f006ba0:	b8 09 00 00 f1       	mov    eax,0xf1000009
9f006ba5:	ae                   	scas   al,BYTE PTR es:[edi]
9f006ba6:	ff                   	(bad)  
9f006ba7:	ff f4                	push   esp
9f006ba9:	01 00                	add    DWORD PTR [eax],eax
9f006bab:	00 00                	add    BYTE PTR [eax],al
9f006bad:	41                   	inc    ecx
9f006bae:	0e                   	push   cs
9f006baf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006bb5:	44                   	inc    esp
9f006bb6:	83 03 03             	add    DWORD PTR [ebx],0x3
9f006bb9:	ec                   	in     al,dx
9f006bba:	01 c5                	add    ebp,eax
9f006bbc:	c3                   	ret    
9f006bbd:	0c 04                	or     al,0x4
9f006bbf:	04 1c                	add    al,0x1c
9f006bc1:	00 00                	add    BYTE PTR [eax],al
9f006bc3:	00 dc                	add    ah,bl
9f006bc5:	09 00                	or     DWORD PTR [eax],eax
9f006bc7:	00 c1                	add    cl,al
9f006bc9:	b0 ff                	mov    al,0xff
9f006bcb:	ff 4f 00             	dec    DWORD PTR [edi+0x0]
9f006bce:	00 00                	add    BYTE PTR [eax],al
9f006bd0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006bd3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006bd9:	02 4b c5             	add    cl,BYTE PTR [ebx-0x3b]
9f006bdc:	0c 04                	or     al,0x4
9f006bde:	04 00                	add    al,0x0
9f006be0:	1c 00                	sbb    al,0x0
9f006be2:	00 00                	add    BYTE PTR [eax],al
9f006be4:	fc                   	cld    
9f006be5:	09 00                	or     DWORD PTR [eax],eax
9f006be7:	00 f0                	add    al,dh
9f006be9:	b0 ff                	mov    al,0xff
9f006beb:	ff 1c 00             	call   FWORD PTR [eax+eax*1]
9f006bee:	00 00                	add    BYTE PTR [eax],al
9f006bf0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006bf3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006bf9:	58                   	pop    eax
9f006bfa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006bfd:	04 00                	add    al,0x0
9f006bff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006c02:	00 00                	add    BYTE PTR [eax],al
9f006c04:	1c 0a                	sbb    al,0xa
9f006c06:	00 00                	add    BYTE PTR [eax],al
9f006c08:	ec                   	in     al,dx
9f006c09:	b0 ff                	mov    al,0xff
9f006c0b:	ff 20                	jmp    DWORD PTR [eax]
9f006c0d:	00 00                	add    BYTE PTR [eax],al
9f006c0f:	00 00                	add    BYTE PTR [eax],al
9f006c11:	41                   	inc    ecx
9f006c12:	0e                   	push   cs
9f006c13:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006c19:	5c                   	pop    esp
9f006c1a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006c1d:	04 00                	add    al,0x0
9f006c1f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006c22:	00 00                	add    BYTE PTR [eax],al
9f006c24:	3c 0a                	cmp    al,0xa
9f006c26:	00 00                	add    BYTE PTR [eax],al
9f006c28:	ec                   	in     al,dx
9f006c29:	b0 ff                	mov    al,0xff
9f006c2b:	ff 20                	jmp    DWORD PTR [eax]
9f006c2d:	00 00                	add    BYTE PTR [eax],al
9f006c2f:	00 00                	add    BYTE PTR [eax],al
9f006c31:	41                   	inc    ecx
9f006c32:	0e                   	push   cs
9f006c33:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006c39:	5c                   	pop    esp
9f006c3a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006c3d:	04 00                	add    al,0x0
9f006c3f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006c42:	00 00                	add    BYTE PTR [eax],al
9f006c44:	5c                   	pop    esp
9f006c45:	0a 00                	or     al,BYTE PTR [eax]
9f006c47:	00 ec                	add    ah,ch
9f006c49:	b0 ff                	mov    al,0xff
9f006c4b:	ff 44 01 00          	inc    DWORD PTR [ecx+eax*1+0x0]
9f006c4f:	00 00                	add    BYTE PTR [eax],al
9f006c51:	41                   	inc    ecx
9f006c52:	0e                   	push   cs
9f006c53:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006c59:	03 40 01             	add    eax,DWORD PTR [eax+0x1]
9f006c5c:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006c5f:	04 1c                	add    al,0x1c
9f006c61:	00 00                	add    BYTE PTR [eax],al
9f006c63:	00 7c 0a 00          	add    BYTE PTR [edx+ecx*1+0x0],bh
9f006c67:	00 10                	add    BYTE PTR [eax],dl
9f006c69:	b2 ff                	mov    dl,0xff
9f006c6b:	ff 20                	jmp    DWORD PTR [eax]
9f006c6d:	00 00                	add    BYTE PTR [eax],al
9f006c6f:	00 00                	add    BYTE PTR [eax],al
9f006c71:	41                   	inc    ecx
9f006c72:	0e                   	push   cs
9f006c73:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006c79:	5c                   	pop    esp
9f006c7a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006c7d:	04 00                	add    al,0x0
9f006c7f:	00 28                	add    BYTE PTR [eax],ch
9f006c81:	00 00                	add    BYTE PTR [eax],al
9f006c83:	00 9c 0a 00 00 10 b2 	add    BYTE PTR [edx+ecx*1-0x4df00000],bl
9f006c8a:	ff                   	(bad)  
9f006c8b:	ff                   	(bad)  
9f006c8c:	fd                   	std    
9f006c8d:	02 00                	add    al,BYTE PTR [eax]
9f006c8f:	00 00                	add    BYTE PTR [eax],al
9f006c91:	41                   	inc    ecx
9f006c92:	0e                   	push   cs
9f006c93:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006c99:	48                   	dec    eax
9f006c9a:	86 03                	xchg   BYTE PTR [ebx],al
9f006c9c:	83 04 03 ef          	add    DWORD PTR [ebx+eax*1],0xffffffef
9f006ca0:	02 c3                	add    al,bl
9f006ca2:	41                   	inc    ecx
9f006ca3:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f006ca7:	04 04                	add    al,0x4
9f006ca9:	00 00                	add    BYTE PTR [eax],al
9f006cab:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006cae:	00 00                	add    BYTE PTR [eax],al
9f006cb0:	c8 0a 00 00          	enter  0xa,0x0
9f006cb4:	e1 b4                	loope  9f006c6a <__x86.get_pc_thunk.cx+0xa86>
9f006cb6:	ff                   	(bad)  
9f006cb7:	ff 23                	jmp    DWORD PTR [ebx]
9f006cb9:	00 00                	add    BYTE PTR [eax],al
9f006cbb:	00 00                	add    BYTE PTR [eax],al
9f006cbd:	41                   	inc    ecx
9f006cbe:	0e                   	push   cs
9f006cbf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006cc5:	5f                   	pop    edi
9f006cc6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006cc9:	04 00                	add    al,0x0
9f006ccb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006cce:	00 00                	add    BYTE PTR [eax],al
9f006cd0:	e8 0a 00 00 e4       	call   83006cdf <sysEnter_Vector+0x82ed6cdf>
9f006cd5:	b4 ff                	mov    ah,0xff
9f006cd7:	ff 23                	jmp    DWORD PTR [ebx]
9f006cd9:	00 00                	add    BYTE PTR [eax],al
9f006cdb:	00 00                	add    BYTE PTR [eax],al
9f006cdd:	41                   	inc    ecx
9f006cde:	0e                   	push   cs
9f006cdf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006ce5:	5f                   	pop    edi
9f006ce6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006ce9:	04 00                	add    al,0x0
9f006ceb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006cee:	00 00                	add    BYTE PTR [eax],al
9f006cf0:	08 0b                	or     BYTE PTR [ebx],cl
9f006cf2:	00 00                	add    BYTE PTR [eax],al
9f006cf4:	e7 b4                	out    0xb4,eax
9f006cf6:	ff                   	(bad)  
9f006cf7:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f006cfd:	41                   	inc    ecx
9f006cfe:	0e                   	push   cs
9f006cff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006d05:	59                   	pop    ecx
9f006d06:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006d09:	04 00                	add    al,0x0
9f006d0b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006d0e:	00 00                	add    BYTE PTR [eax],al
9f006d10:	28 0b                	sub    BYTE PTR [ebx],cl
9f006d12:	00 00                	add    BYTE PTR [eax],al
9f006d14:	e4 b4                	in     al,0xb4
9f006d16:	ff                   	(bad)  
9f006d17:	ff 20                	jmp    DWORD PTR [eax]
9f006d19:	00 00                	add    BYTE PTR [eax],al
9f006d1b:	00 00                	add    BYTE PTR [eax],al
9f006d1d:	41                   	inc    ecx
9f006d1e:	0e                   	push   cs
9f006d1f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006d25:	5c                   	pop    esp
9f006d26:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006d29:	04 00                	add    al,0x0
9f006d2b:	00 20                	add    BYTE PTR [eax],ah
9f006d2d:	00 00                	add    BYTE PTR [eax],al
9f006d2f:	00 48 0b             	add    BYTE PTR [eax+0xb],cl
9f006d32:	00 00                	add    BYTE PTR [eax],al
9f006d34:	e4 b4                	in     al,0xb4
9f006d36:	ff                   	(bad)  
9f006d37:	ff 73 00             	push   DWORD PTR [ebx+0x0]
9f006d3a:	00 00                	add    BYTE PTR [eax],al
9f006d3c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006d3f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006d45:	44                   	inc    esp
9f006d46:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006d49:	6b c5 c3             	imul   eax,ebp,0xffffffc3
9f006d4c:	0c 04                	or     al,0x4
9f006d4e:	04 00                	add    al,0x0
9f006d50:	20 00                	and    BYTE PTR [eax],al
9f006d52:	00 00                	add    BYTE PTR [eax],al
9f006d54:	6c                   	ins    BYTE PTR es:[edi],dx
9f006d55:	0b 00                	or     eax,DWORD PTR [eax]
9f006d57:	00 34 b5 ff ff 60 00 	add    BYTE PTR [esi*4+0x60ffff],dh
9f006d5e:	00 00                	add    BYTE PTR [eax],al
9f006d60:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006d63:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006d69:	44                   	inc    esp
9f006d6a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006d6d:	58                   	pop    eax
9f006d6e:	c5 c3 0c             	(bad)  
9f006d71:	04 04                	add    al,0x4
9f006d73:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006d76:	00 00                	add    BYTE PTR [eax],al
9f006d78:	90                   	nop
9f006d79:	0b 00                	or     eax,DWORD PTR [eax]
9f006d7b:	00 70 b5             	add    BYTE PTR [eax-0x4b],dh
9f006d7e:	ff                   	(bad)  
9f006d7f:	ff 87 00 00 00 00    	inc    DWORD PTR [edi+0x0]
9f006d85:	41                   	inc    ecx
9f006d86:	0e                   	push   cs
9f006d87:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006d8d:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
9f006d93:	00 20                	add    BYTE PTR [eax],ah
9f006d95:	00 00                	add    BYTE PTR [eax],al
9f006d97:	00 b0 0b 00 00 d7    	add    BYTE PTR [eax-0x28fffff5],dh
9f006d9d:	b5 ff                	mov    ch,0xff
9f006d9f:	ff 73 00             	push   DWORD PTR [ebx+0x0]
9f006da2:	00 00                	add    BYTE PTR [eax],al
9f006da4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006da7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006dad:	44                   	inc    esp
9f006dae:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006db1:	6b c5 c3             	imul   eax,ebp,0xffffffc3
9f006db4:	0c 04                	or     al,0x4
9f006db6:	04 00                	add    al,0x0
9f006db8:	1c 00                	sbb    al,0x0
9f006dba:	00 00                	add    BYTE PTR [eax],al
9f006dbc:	d4 0b                	aam    0xb
9f006dbe:	00 00                	add    BYTE PTR [eax],al
9f006dc0:	26                   	es
9f006dc1:	b6 ff                	mov    dh,0xff
9f006dc3:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
9f006dca:	0e                   	push   cs
9f006dcb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006dd1:	02 80 c5 0c 04 04    	add    al,BYTE PTR [eax+0x4040cc5]
9f006dd7:	00 20                	add    BYTE PTR [eax],ah
9f006dd9:	00 00                	add    BYTE PTR [eax],al
9f006ddb:	00 f4                	add    ah,dh
9f006ddd:	0b 00                	or     eax,DWORD PTR [eax]
9f006ddf:	00 8a b6 ff ff 8b    	add    BYTE PTR [edx-0x7400004a],cl
9f006de5:	00 00                	add    BYTE PTR [eax],al
9f006de7:	00 00                	add    BYTE PTR [eax],al
9f006de9:	41                   	inc    ecx
9f006dea:	0e                   	push   cs
9f006deb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006df1:	44                   	inc    esp
9f006df2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006df5:	83 c5 c3             	add    ebp,0xffffffc3
9f006df8:	0c 04                	or     al,0x4
9f006dfa:	04 00                	add    al,0x0
9f006dfc:	20 00                	and    BYTE PTR [eax],al
9f006dfe:	00 00                	add    BYTE PTR [eax],al
9f006e00:	18 0c 00             	sbb    BYTE PTR [eax+eax*1],cl
9f006e03:	00 f1                	add    cl,dh
9f006e05:	b6 ff                	mov    dh,0xff
9f006e07:	ff c0                	inc    eax
9f006e09:	02 00                	add    al,BYTE PTR [eax]
9f006e0b:	00 00                	add    BYTE PTR [eax],al
9f006e0d:	41                   	inc    ecx
9f006e0e:	0e                   	push   cs
9f006e0f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006e15:	44                   	inc    esp
9f006e16:	83 03 03             	add    DWORD PTR [ebx],0x3
9f006e19:	b8 02 c5 c3 0c       	mov    eax,0xcc3c502
9f006e1e:	04 04                	add    al,0x4
9f006e20:	1c 00                	sbb    al,0x0
9f006e22:	00 00                	add    BYTE PTR [eax],al
9f006e24:	3c 0c                	cmp    al,0xc
9f006e26:	00 00                	add    BYTE PTR [eax],al
9f006e28:	8d b9 ff ff 20 00    	lea    edi,[ecx+0x20ffff]
9f006e2e:	00 00                	add    BYTE PTR [eax],al
9f006e30:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006e33:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006e39:	5c                   	pop    esp
9f006e3a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006e3d:	04 00                	add    al,0x0
9f006e3f:	00 20                	add    BYTE PTR [eax],ah
9f006e41:	00 00                	add    BYTE PTR [eax],al
9f006e43:	00 5c 0c 00          	add    BYTE PTR [esp+ecx*1+0x0],bl
9f006e47:	00 8d b9 ff ff 03    	add    BYTE PTR [ebp+0x3ffffb9],cl
9f006e4d:	01 00                	add    DWORD PTR [eax],eax
9f006e4f:	00 00                	add    BYTE PTR [eax],al
9f006e51:	41                   	inc    ecx
9f006e52:	0e                   	push   cs
9f006e53:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006e59:	44                   	inc    esp
9f006e5a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006e5d:	fb                   	sti    
9f006e5e:	c5 c3 0c             	(bad)  
9f006e61:	04 04                	add    al,0x4
9f006e63:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006e66:	00 00                	add    BYTE PTR [eax],al
9f006e68:	80 0c 00 00          	or     BYTE PTR [eax+eax*1],0x0
9f006e6c:	6c                   	ins    BYTE PTR es:[edi],dx
9f006e6d:	ba ff ff 23 00       	mov    edx,0x23ffff
9f006e72:	00 00                	add    BYTE PTR [eax],al
9f006e74:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006e77:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006e7d:	5f                   	pop    edi
9f006e7e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006e81:	04 00                	add    al,0x0
9f006e83:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006e86:	00 00                	add    BYTE PTR [eax],al
9f006e88:	a0 0c 00 00 6f       	mov    al,ds:0x6f00000c
9f006e8d:	ba ff ff 21 00       	mov    edx,0x21ffff
9f006e92:	00 00                	add    BYTE PTR [eax],al
9f006e94:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006e97:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006e9d:	5d                   	pop    ebp
9f006e9e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006ea1:	04 00                	add    al,0x0
9f006ea3:	00 20                	add    BYTE PTR [eax],ah
9f006ea5:	00 00                	add    BYTE PTR [eax],al
9f006ea7:	00 c0                	add    al,al
9f006ea9:	0c 00                	or     al,0x0
9f006eab:	00 70 ba             	add    BYTE PTR [eax-0x46],dh
9f006eae:	ff                   	(bad)  
9f006eaf:	ff 32                	push   DWORD PTR [edx]
9f006eb1:	00 00                	add    BYTE PTR [eax],al
9f006eb3:	00 00                	add    BYTE PTR [eax],al
9f006eb5:	41                   	inc    ecx
9f006eb6:	0e                   	push   cs
9f006eb7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006ebd:	44                   	inc    esp
9f006ebe:	83 03 6a             	add    DWORD PTR [ebx],0x6a
9f006ec1:	c5 c3 0c             	(bad)  
9f006ec4:	04 04                	add    al,0x4
9f006ec6:	00 00                	add    BYTE PTR [eax],al
9f006ec8:	1c 00                	sbb    al,0x0
9f006eca:	00 00                	add    BYTE PTR [eax],al
9f006ecc:	e4 0c                	in     al,0xc
9f006ece:	00 00                	add    BYTE PTR [eax],al
9f006ed0:	80 ba ff ff 9b 01 00 	cmp    BYTE PTR [edx+0x19bffff],0x0
9f006ed7:	00 00                	add    BYTE PTR [eax],al
9f006ed9:	41                   	inc    ecx
9f006eda:	0e                   	push   cs
9f006edb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006ee1:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
9f006ee7:	04 1c                	add    al,0x1c
9f006ee9:	00 00                	add    BYTE PTR [eax],al
9f006eeb:	00 04 0d 00 00 fb bb 	add    BYTE PTR [ecx*1-0x44050000],al
9f006ef2:	ff                   	(bad)  
9f006ef3:	ff 20                	jmp    DWORD PTR [eax]
9f006ef5:	00 00                	add    BYTE PTR [eax],al
9f006ef7:	00 00                	add    BYTE PTR [eax],al
9f006ef9:	41                   	inc    ecx
9f006efa:	0e                   	push   cs
9f006efb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006f01:	5c                   	pop    esp
9f006f02:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006f05:	04 00                	add    al,0x0
9f006f07:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006f0a:	00 00                	add    BYTE PTR [eax],al
9f006f0c:	24 0d                	and    al,0xd
9f006f0e:	00 00                	add    BYTE PTR [eax],al
9f006f10:	fc                   	cld    
9f006f11:	bb ff ff c7 00       	mov    ebx,0xc7ffff
9f006f16:	00 00                	add    BYTE PTR [eax],al
9f006f18:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006f1b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006f21:	02 c3                	add    al,bl
9f006f23:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006f26:	04 00                	add    al,0x0
9f006f28:	1c 00                	sbb    al,0x0
9f006f2a:	00 00                	add    BYTE PTR [eax],al
9f006f2c:	44                   	inc    esp
9f006f2d:	0d 00 00 a3 bc       	or     eax,0xbca30000
9f006f32:	ff                   	(bad)  
9f006f33:	ff 20                	jmp    DWORD PTR [eax]
9f006f35:	00 00                	add    BYTE PTR [eax],al
9f006f37:	00 00                	add    BYTE PTR [eax],al
9f006f39:	41                   	inc    ecx
9f006f3a:	0e                   	push   cs
9f006f3b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006f41:	5c                   	pop    esp
9f006f42:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006f45:	04 00                	add    al,0x0
9f006f47:	00 20                	add    BYTE PTR [eax],ah
9f006f49:	00 00                	add    BYTE PTR [eax],al
9f006f4b:	00 64 0d 00          	add    BYTE PTR [ebp+ecx*1+0x0],ah
9f006f4f:	00 dc                	add    ah,bl
9f006f51:	bc ff ff 29 00       	mov    esp,0x29ffff
9f006f56:	00 00                	add    BYTE PTR [eax],al
9f006f58:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006f5b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006f61:	44                   	inc    esp
9f006f62:	83 03 61             	add    DWORD PTR [ebx],0x61
9f006f65:	c5 c3 0c             	(bad)  
9f006f68:	04 04                	add    al,0x4
9f006f6a:	00 00                	add    BYTE PTR [eax],al
9f006f6c:	20 00                	and    BYTE PTR [eax],al
9f006f6e:	00 00                	add    BYTE PTR [eax],al
9f006f70:	88 0d 00 00 e1 bc    	mov    BYTE PTR ds:0xbce10000,cl
9f006f76:	ff                   	(bad)  
9f006f77:	ff 2e                	jmp    FWORD PTR [esi]
9f006f79:	00 00                	add    BYTE PTR [eax],al
9f006f7b:	00 00                	add    BYTE PTR [eax],al
9f006f7d:	41                   	inc    ecx
9f006f7e:	0e                   	push   cs
9f006f7f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006f85:	44                   	inc    esp
9f006f86:	83 03 66             	add    DWORD PTR [ebx],0x66
9f006f89:	c5 c3 0c             	(bad)  
9f006f8c:	04 04                	add    al,0x4
9f006f8e:	00 00                	add    BYTE PTR [eax],al
9f006f90:	28 00                	sub    BYTE PTR [eax],al
9f006f92:	00 00                	add    BYTE PTR [eax],al
9f006f94:	ac                   	lods   al,BYTE PTR ds:[esi]
9f006f95:	0d 00 00 ec bc       	or     eax,0xbcec0000
9f006f9a:	ff                   	(bad)  
9f006f9b:	ff                   	(bad)  
9f006f9c:	79 03                	jns    9f006fa1 <__x86.get_pc_thunk.cx+0xdbd>
9f006f9e:	00 00                	add    BYTE PTR [eax],al
9f006fa0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006fa3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006fa9:	48                   	dec    eax
9f006faa:	86 03                	xchg   BYTE PTR [ebx],al
9f006fac:	83 04 03 6b          	add    DWORD PTR [ebx+eax*1],0x6b
9f006fb0:	03 c3                	add    eax,ebx
9f006fb2:	41                   	inc    ecx
9f006fb3:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f006fb7:	04 04                	add    al,0x4
9f006fb9:	00 00                	add    BYTE PTR [eax],al
9f006fbb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006fbe:	00 00                	add    BYTE PTR [eax],al
9f006fc0:	d8 0d 00 00 39 c0    	fmul   DWORD PTR ds:0xc0390000
9f006fc6:	ff                   	(bad)  
9f006fc7:	ff 25 00 00 00 00    	jmp    DWORD PTR ds:0x0
9f006fcd:	41                   	inc    ecx
9f006fce:	0e                   	push   cs
9f006fcf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006fd5:	61                   	popa   
9f006fd6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006fd9:	04 00                	add    al,0x0
9f006fdb:	00 28                	add    BYTE PTR [eax],ch
9f006fdd:	00 00                	add    BYTE PTR [eax],al
9f006fdf:	00 f8                	add    al,bh
9f006fe1:	0d 00 00 3e c0       	or     eax,0xc03e0000
9f006fe6:	ff                   	(bad)  
9f006fe7:	ff                   	(bad)  
9f006fe8:	78 02                	js     9f006fec <__x86.get_pc_thunk.cx+0xe08>
9f006fea:	00 00                	add    BYTE PTR [eax],al
9f006fec:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006fef:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006ff5:	48                   	dec    eax
9f006ff6:	86 03                	xchg   BYTE PTR [ebx],al
9f006ff8:	83 04 03 6a          	add    DWORD PTR [ebx+eax*1],0x6a
9f006ffc:	02 c3                	add    al,bl
9f006ffe:	41                   	inc    ecx
9f006fff:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f007003:	04 04                	add    al,0x4
9f007005:	00 00                	add    BYTE PTR [eax],al
9f007007:	00 20                	add    BYTE PTR [eax],ah
9f007009:	00 00                	add    BYTE PTR [eax],al
9f00700b:	00 24 0e             	add    BYTE PTR [esi+ecx*1],ah
9f00700e:	00 00                	add    BYTE PTR [eax],al
9f007010:	8c c2                	mov    edx,es
9f007012:	ff                   	(bad)  
9f007013:	ff cf                	dec    edi
9f007015:	02 00                	add    al,BYTE PTR [eax]
9f007017:	00 00                	add    BYTE PTR [eax],al
9f007019:	41                   	inc    ecx
9f00701a:	0e                   	push   cs
9f00701b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007021:	44                   	inc    esp
9f007022:	83 03 03             	add    DWORD PTR [ebx],0x3
9f007025:	c7 02 c5 c3 0c 04    	mov    DWORD PTR [edx],0x40cc3c5
9f00702b:	04 20                	add    al,0x20
9f00702d:	00 00                	add    BYTE PTR [eax],al
9f00702f:	00 48 0e             	add    BYTE PTR [eax+0xe],cl
9f007032:	00 00                	add    BYTE PTR [eax],al
9f007034:	37                   	aaa    
9f007035:	c5 ff ff             	(bad)  
9f007038:	64 00 00             	add    BYTE PTR fs:[eax],al
9f00703b:	00 00                	add    BYTE PTR [eax],al
9f00703d:	41                   	inc    ecx
9f00703e:	0e                   	push   cs
9f00703f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007045:	44                   	inc    esp
9f007046:	83 03 02             	add    DWORD PTR [ebx],0x2
9f007049:	5b                   	pop    ebx
9f00704a:	c3                   	ret    
9f00704b:	41                   	inc    ecx
9f00704c:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00704f:	04 28                	add    al,0x28
9f007051:	00 00                	add    BYTE PTR [eax],al
9f007053:	00 6c 0e 00          	add    BYTE PTR [esi+ecx*1+0x0],ch
9f007057:	00 77 c5             	add    BYTE PTR [edi-0x3b],dh
9f00705a:	ff                   	(bad)  
9f00705b:	ff 49 02             	dec    DWORD PTR [ecx+0x2]
9f00705e:	00 00                	add    BYTE PTR [eax],al
9f007060:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f007063:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007069:	45                   	inc    ebp
9f00706a:	86 03                	xchg   BYTE PTR [ebx],al
9f00706c:	83 04 03 3e          	add    DWORD PTR [ebx+eax*1],0x3e
9f007070:	02 c3                	add    al,bl
9f007072:	41                   	inc    ecx
9f007073:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f007077:	04 04                	add    al,0x4
9f007079:	00 00                	add    BYTE PTR [eax],al
9f00707b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00707e:	00 00                	add    BYTE PTR [eax],al
9f007080:	98                   	cwde   
9f007081:	0e                   	push   cs
9f007082:	00 00                	add    BYTE PTR [eax],al
9f007084:	94                   	xchg   esp,eax
9f007085:	c7                   	(bad)  
9f007086:	ff                   	(bad)  
9f007087:	ff 1a                	call   FWORD PTR [edx]
9f007089:	01 00                	add    DWORD PTR [eax],eax
9f00708b:	00 00                	add    BYTE PTR [eax],al
9f00708d:	41                   	inc    ecx
9f00708e:	0e                   	push   cs
9f00708f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007095:	03 16                	add    edx,DWORD PTR [esi]
9f007097:	01 c5                	add    ebp,eax
9f007099:	0c 04                	or     al,0x4
9f00709b:	04 2c                	add    al,0x2c
9f00709d:	00 00                	add    BYTE PTR [eax],al
9f00709f:	00 b8 0e 00 00 8e    	add    BYTE PTR [eax-0x71fffff2],bh
9f0070a5:	c8 ff ff 1e          	enter  0xffff,0x1e
9f0070a9:	02 00                	add    al,BYTE PTR [eax]
9f0070ab:	00 00                	add    BYTE PTR [eax],al
9f0070ad:	41                   	inc    ecx
9f0070ae:	0e                   	push   cs
9f0070af:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0070b5:	46                   	inc    esi
9f0070b6:	87 03                	xchg   DWORD PTR [ebx],eax
9f0070b8:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f0070bb:	05 03 11 02 c3       	add    eax,0xc3021103
9f0070c0:	41                   	inc    ecx
9f0070c1:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f0070c5:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0070c8:	04 00                	add    al,0x0
9f0070ca:	00 00                	add    BYTE PTR [eax],al
9f0070cc:	20 00                	and    BYTE PTR [eax],al
9f0070ce:	00 00                	add    BYTE PTR [eax],al
9f0070d0:	e8 0e 00 00 7c       	call   1b0070e3 <sysEnter_Vector+0x1aed70e3>
9f0070d5:	ca ff ff             	retf   0xffff
9f0070d8:	05 04 00 00 00       	add    eax,0x4
9f0070dd:	41                   	inc    ecx
9f0070de:	0e                   	push   cs
9f0070df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0070e5:	47                   	inc    edi
9f0070e6:	83 03 03             	add    DWORD PTR [ebx],0x3
9f0070e9:	fa                   	cli    
9f0070ea:	03 c5                	add    eax,ebp
9f0070ec:	c3                   	ret    
9f0070ed:	0c 04                	or     al,0x4
9f0070ef:	04 20                	add    al,0x20
9f0070f1:	00 00                	add    BYTE PTR [eax],al
9f0070f3:	00 0c 0f             	add    BYTE PTR [edi+ecx*1],cl
9f0070f6:	00 00                	add    BYTE PTR [eax],al
9f0070f8:	5d                   	pop    ebp
9f0070f9:	ce                   	into   
9f0070fa:	ff                   	(bad)  
9f0070fb:	ff a9 00 00 00 00    	jmp    FWORD PTR [ecx+0x0]
9f007101:	41                   	inc    ecx
9f007102:	0e                   	push   cs
9f007103:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007109:	44                   	inc    esp
9f00710a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00710d:	a1 c5 c3 0c 04       	mov    eax,ds:0x40cc3c5
9f007112:	04 00                	add    al,0x0
9f007114:	1c 00                	sbb    al,0x0
9f007116:	00 00                	add    BYTE PTR [eax],al
9f007118:	30 0f                	xor    BYTE PTR [edi],cl
9f00711a:	00 00                	add    BYTE PTR [eax],al
9f00711c:	e2 ce                	loop   9f0070ec <__x86.get_pc_thunk.cx+0xf08>
9f00711e:	ff                   	(bad)  
9f00711f:	ff aa 00 00 00 00    	jmp    FWORD PTR [edx+0x0]
9f007125:	41                   	inc    ecx
9f007126:	0e                   	push   cs
9f007127:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00712d:	02 a6 c5 0c 04 04    	add    ah,BYTE PTR [esi+0x4040cc5]
9f007133:	00 20                	add    BYTE PTR [eax],ah
9f007135:	00 00                	add    BYTE PTR [eax],al
9f007137:	00 50 0f             	add    BYTE PTR [eax+0xf],dl
9f00713a:	00 00                	add    BYTE PTR [eax],al
9f00713c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00713d:	cf                   	iret   
9f00713e:	ff                   	(bad)  
9f00713f:	ff 16                	call   DWORD PTR [esi]
9f007141:	02 00                	add    al,BYTE PTR [eax]
9f007143:	00 00                	add    BYTE PTR [eax],al
9f007145:	41                   	inc    ecx
9f007146:	0e                   	push   cs
9f007147:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00714d:	47                   	inc    edi
9f00714e:	83 03 03             	add    DWORD PTR [ebx],0x3
9f007151:	0b 02                	or     eax,DWORD PTR [edx]
9f007153:	c5 c3 0c             	(bad)  
9f007156:	04 04                	add    al,0x4
9f007158:	28 00                	sub    BYTE PTR [eax],al
9f00715a:	00 00                	add    BYTE PTR [eax],al
9f00715c:	74 0f                	je     9f00716d <__x86.get_pc_thunk.cx+0xf89>
9f00715e:	00 00                	add    BYTE PTR [eax],al
9f007160:	5e                   	pop    esi
9f007161:	d1 ff                	sar    edi,1
9f007163:	ff d6                	call   esi
9f007165:	04 00                	add    al,0x0
9f007167:	00 00                	add    BYTE PTR [eax],al
9f007169:	41                   	inc    ecx
9f00716a:	0e                   	push   cs
9f00716b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007171:	45                   	inc    ebp
9f007172:	86 03                	xchg   BYTE PTR [ebx],al
9f007174:	83 04 03 cb          	add    DWORD PTR [ebx+eax*1],0xffffffcb
9f007178:	04 c3                	add    al,0xc3
9f00717a:	41                   	inc    ecx
9f00717b:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00717f:	04 04                	add    al,0x4
9f007181:	00 00                	add    BYTE PTR [eax],al
9f007183:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f007186:	00 00                	add    BYTE PTR [eax],al
9f007188:	a0 0f 00 00 08       	mov    al,ds:0x800000f
9f00718d:	d6                   	(bad)  
9f00718e:	ff                   	(bad)  
9f00718f:	ff 33                	push   DWORD PTR [ebx]
9f007191:	00 00                	add    BYTE PTR [eax],al
9f007193:	00 00                	add    BYTE PTR [eax],al
9f007195:	41                   	inc    ecx
9f007196:	0e                   	push   cs
9f007197:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00719d:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00719e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0071a1:	04 00                	add    al,0x0
9f0071a3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0071a6:	00 00                	add    BYTE PTR [eax],al
9f0071a8:	c0 0f 00             	ror    BYTE PTR [edi],0x0
9f0071ab:	00 1b                	add    BYTE PTR [ebx],bl
9f0071ad:	d6                   	(bad)  
9f0071ae:	ff                   	(bad)  
9f0071af:	ff                   	(bad)  
9f0071b0:	3d 00 00 00 00       	cmp    eax,0x0
9f0071b5:	41                   	inc    ecx
9f0071b6:	0e                   	push   cs
9f0071b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0071bd:	79 c5                	jns    9f007184 <__x86.get_pc_thunk.cx+0xfa0>
9f0071bf:	0c 04                	or     al,0x4
9f0071c1:	04 00                	add    al,0x0
9f0071c3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0071c6:	00 00                	add    BYTE PTR [eax],al
9f0071c8:	e0 0f                	loopne 9f0071d9 <__x86.get_pc_thunk.cx+0xff5>
9f0071ca:	00 00                	add    BYTE PTR [eax],al
9f0071cc:	38 d6                	cmp    dh,dl
9f0071ce:	ff                   	(bad)  
9f0071cf:	ff                   	(bad)  
9f0071d0:	3d 00 00 00 00       	cmp    eax,0x0
9f0071d5:	41                   	inc    ecx
9f0071d6:	0e                   	push   cs
9f0071d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0071dd:	79 c5                	jns    9f0071a4 <__x86.get_pc_thunk.cx+0xfc0>
9f0071df:	0c 04                	or     al,0x4
9f0071e1:	04 00                	add    al,0x0
9f0071e3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0071e6:	00 00                	add    BYTE PTR [eax],al
9f0071e8:	00 10                	add    BYTE PTR [eax],dl
9f0071ea:	00 00                	add    BYTE PTR [eax],al
9f0071ec:	55                   	push   ebp
9f0071ed:	d6                   	(bad)  
9f0071ee:	ff                   	(bad)  
9f0071ef:	ff 33                	push   DWORD PTR [ebx]
9f0071f1:	00 00                	add    BYTE PTR [eax],al
9f0071f3:	00 00                	add    BYTE PTR [eax],al
9f0071f5:	41                   	inc    ecx
9f0071f6:	0e                   	push   cs
9f0071f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0071fd:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0071fe:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007201:	04 00                	add    al,0x0
9f007203:	00 10                	add    BYTE PTR [eax],dl
9f007205:	00 00                	add    BYTE PTR [eax],al
9f007207:	00 20                	add    BYTE PTR [eax],ah
9f007209:	10 00                	adc    BYTE PTR [eax],al
9f00720b:	00 d8                	add    al,bl
9f00720d:	ef                   	out    dx,eax
9f00720e:	ff                   	(bad)  
9f00720f:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f007212:	00 00                	add    BYTE PTR [eax],al
9f007214:	00 00                	add    BYTE PTR [eax],al
9f007216:	00 00                	add    BYTE PTR [eax],al
9f007218:	20 00                	and    BYTE PTR [eax],al
9f00721a:	00 00                	add    BYTE PTR [eax],al
9f00721c:	34 10                	xor    al,0x10
9f00721e:	00 00                	add    BYTE PTR [eax],al
9f007220:	54                   	push   esp
9f007221:	d6                   	(bad)  
9f007222:	ff                   	(bad)  
9f007223:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
9f00722a:	0e                   	push   cs
9f00722b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007231:	44                   	inc    esp
9f007232:	83 03 02             	add    DWORD PTR [ebx],0x2
9f007235:	7c c5                	jl     9f0071fc <__x86.get_pc_thunk.cx+0x1018>
9f007237:	c3                   	ret    
9f007238:	0c 04                	or     al,0x4
9f00723a:	04 00                	add    al,0x0
9f00723c:	20 00                	and    BYTE PTR [eax],al
9f00723e:	00 00                	add    BYTE PTR [eax],al
9f007240:	58                   	pop    eax
9f007241:	10 00                	adc    BYTE PTR [eax],al
9f007243:	00 b4 d6 ff ff 3e 00 	add    BYTE PTR [esi+edx*8+0x3effff],dh
9f00724a:	00 00                	add    BYTE PTR [eax],al
9f00724c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00724f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007255:	44                   	inc    esp
9f007256:	83 03 76             	add    DWORD PTR [ebx],0x76
9f007259:	c5 c3 0c             	(bad)  
9f00725c:	04 04                	add    al,0x4
9f00725e:	00 00                	add    BYTE PTR [eax],al
9f007260:	20 00                	and    BYTE PTR [eax],al
9f007262:	00 00                	add    BYTE PTR [eax],al
9f007264:	7c 10                	jl     9f007276 <__x86.get_pc_thunk.cx+0x1092>
9f007266:	00 00                	add    BYTE PTR [eax],al
9f007268:	ce                   	into   
9f007269:	d6                   	(bad)  
9f00726a:	ff                   	(bad)  
9f00726b:	ff                   	(bad)  
9f00726c:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f00726f:	00 00                	add    BYTE PTR [eax],al
9f007271:	41                   	inc    ecx
9f007272:	0e                   	push   cs
9f007273:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007279:	44                   	inc    esp
9f00727a:	83 03 76             	add    DWORD PTR [ebx],0x76
9f00727d:	c5 c3 0c             	(bad)  
9f007280:	04 04                	add    al,0x4
9f007282:	00 00                	add    BYTE PTR [eax],al
9f007284:	20 00                	and    BYTE PTR [eax],al
9f007286:	00 00                	add    BYTE PTR [eax],al
9f007288:	a0 10 00 00 e8       	mov    al,ds:0xe8000010
9f00728d:	d6                   	(bad)  
9f00728e:	ff                   	(bad)  
9f00728f:	ff 6f 00             	jmp    FWORD PTR [edi+0x0]
9f007292:	00 00                	add    BYTE PTR [eax],al
9f007294:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f007297:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00729d:	44                   	inc    esp
9f00729e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0072a1:	67 c5 c3 0c          	addr16 (bad) 
9f0072a5:	04 04                	add    al,0x4
9f0072a7:	00 20                	add    BYTE PTR [eax],ah
9f0072a9:	00 00                	add    BYTE PTR [eax],al
9f0072ab:	00 c4                	add    ah,al
9f0072ad:	10 00                	adc    BYTE PTR [eax],al
9f0072af:	00 33                	add    BYTE PTR [ebx],dh
9f0072b1:	d7                   	xlat   BYTE PTR ds:[ebx]
9f0072b2:	ff                   	(bad)  
9f0072b3:	ff 47 00             	inc    DWORD PTR [edi+0x0]
9f0072b6:	00 00                	add    BYTE PTR [eax],al
9f0072b8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0072bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0072c1:	44                   	inc    esp
9f0072c2:	83 03 7f             	add    DWORD PTR [ebx],0x7f
9f0072c5:	c5 c3 0c             	(bad)  
9f0072c8:	04 04                	add    al,0x4
9f0072ca:	00 00                	add    BYTE PTR [eax],al
9f0072cc:	1c 00                	sbb    al,0x0
9f0072ce:	00 00                	add    BYTE PTR [eax],al
9f0072d0:	e8 10 00 00 56       	call   f50072e5 <tmbuf+0x55ffdfe5>
9f0072d5:	d7                   	xlat   BYTE PTR ds:[ebx]
9f0072d6:	ff                   	(bad)  
9f0072d7:	ff 26                	jmp    DWORD PTR [esi]
9f0072d9:	00 00                	add    BYTE PTR [eax],al
9f0072db:	00 00                	add    BYTE PTR [eax],al
9f0072dd:	41                   	inc    ecx
9f0072de:	0e                   	push   cs
9f0072df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0072e5:	62                   	(bad)  
9f0072e6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0072e9:	04 00                	add    al,0x0
9f0072eb:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0072ee:	00 00                	add    BYTE PTR [eax],al
9f0072f0:	08 11                	or     BYTE PTR [ecx],dl
9f0072f2:	00 00                	add    BYTE PTR [eax],al
9f0072f4:	5c                   	pop    esp
9f0072f5:	d7                   	xlat   BYTE PTR ds:[ebx]
9f0072f6:	ff                   	(bad)  
9f0072f7:	ff 5e 00             	call   FWORD PTR [esi+0x0]
9f0072fa:	00 00                	add    BYTE PTR [eax],al
9f0072fc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0072ff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007305:	45                   	inc    ebp
9f007306:	86 03                	xchg   BYTE PTR [ebx],al
9f007308:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
9f00730c:	c3                   	ret    
9f00730d:	41                   	inc    ecx
9f00730e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f007312:	04 04                	add    al,0x4
9f007314:	1c 00                	sbb    al,0x0
9f007316:	00 00                	add    BYTE PTR [eax],al
9f007318:	30 11                	xor    BYTE PTR [ecx],dl
9f00731a:	00 00                	add    BYTE PTR [eax],al
9f00731c:	92                   	xchg   edx,eax
9f00731d:	d7                   	xlat   BYTE PTR ds:[ebx]
9f00731e:	ff                   	(bad)  
9f00731f:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f007325:	41                   	inc    ecx
9f007326:	0e                   	push   cs
9f007327:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00732d:	59                   	pop    ecx
9f00732e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007331:	04 00                	add    al,0x0
9f007333:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f007336:	00 00                	add    BYTE PTR [eax],al
9f007338:	50                   	push   eax
9f007339:	11 00                	adc    DWORD PTR [eax],eax
9f00733b:	00 90 d7 ff ff 40    	add    BYTE PTR [eax+0x40ffffd7],dl
9f007341:	00 00                	add    BYTE PTR [eax],al
9f007343:	00 00                	add    BYTE PTR [eax],al
9f007345:	41                   	inc    ecx
9f007346:	0e                   	push   cs
9f007347:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00734d:	7c c5                	jl     9f007314 <__x86.get_pc_thunk.cx+0x1130>
9f00734f:	0c 04                	or     al,0x4
9f007351:	04 00                	add    al,0x0
9f007353:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f007356:	00 00                	add    BYTE PTR [eax],al
9f007358:	70 11                	jo     9f00736b <__x86.get_pc_thunk.cx+0x1187>
9f00735a:	00 00                	add    BYTE PTR [eax],al
9f00735c:	b0 d7                	mov    al,0xd7
9f00735e:	ff                   	(bad)  
9f00735f:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f007362:	00 00                	add    BYTE PTR [eax],al
9f007364:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f007367:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00736d:	7c c5                	jl     9f007334 <__x86.get_pc_thunk.cx+0x1150>
9f00736f:	0c 04                	or     al,0x4
9f007371:	04 00                	add    al,0x0
9f007373:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f007376:	00 00                	add    BYTE PTR [eax],al
9f007378:	90                   	nop
9f007379:	11 00                	adc    DWORD PTR [eax],eax
9f00737b:	00 d0                	add    al,dl
9f00737d:	d7                   	xlat   BYTE PTR ds:[ebx]
9f00737e:	ff                   	(bad)  
9f00737f:	ff 47 00             	inc    DWORD PTR [edi+0x0]
9f007382:	00 00                	add    BYTE PTR [eax],al
9f007384:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f007387:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00738d:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
9f007390:	0c 04                	or     al,0x4
9f007392:	04 00                	add    al,0x0
9f007394:	1c 00                	sbb    al,0x0
9f007396:	00 00                	add    BYTE PTR [eax],al
9f007398:	b0 11                	mov    al,0x11
9f00739a:	00 00                	add    BYTE PTR [eax],al
9f00739c:	f8                   	clc    
9f00739d:	d7                   	xlat   BYTE PTR ds:[ebx]
9f00739e:	ff                   	(bad)  
9f00739f:	ff 30                	push   DWORD PTR [eax]
9f0073a1:	00 00                	add    BYTE PTR [eax],al
9f0073a3:	00 00                	add    BYTE PTR [eax],al
9f0073a5:	41                   	inc    ecx
9f0073a6:	0e                   	push   cs
9f0073a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0073ad:	6c                   	ins    BYTE PTR es:[edi],dx
9f0073ae:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0073b1:	04 00                	add    al,0x0
9f0073b3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0073b6:	00 00                	add    BYTE PTR [eax],al
9f0073b8:	d0 11                	rcl    BYTE PTR [ecx],1
9f0073ba:	00 00                	add    BYTE PTR [eax],al
9f0073bc:	08 d8                	or     al,bl
9f0073be:	ff                   	(bad)  
9f0073bf:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f0073c2:	00 00                	add    BYTE PTR [eax],al
9f0073c4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0073c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0073cd:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
9f0073d0:	0c 04                	or     al,0x4
9f0073d2:	04 00                	add    al,0x0
9f0073d4:	1c 00                	sbb    al,0x0
9f0073d6:	00 00                	add    BYTE PTR [eax],al
9f0073d8:	f0 11 00             	lock adc DWORD PTR [eax],eax
9f0073db:	00 44 d8 ff          	add    BYTE PTR [eax+ebx*8-0x1],al
9f0073df:	ff 31                	push   DWORD PTR [ecx]
9f0073e1:	00 00                	add    BYTE PTR [eax],al
9f0073e3:	00 00                	add    BYTE PTR [eax],al
9f0073e5:	41                   	inc    ecx
9f0073e6:	0e                   	push   cs
9f0073e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0073ed:	6d                   	ins    DWORD PTR es:[edi],dx
9f0073ee:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0073f1:	04 00                	add    al,0x0
9f0073f3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0073f6:	00 00                	add    BYTE PTR [eax],al
9f0073f8:	10 12                	adc    BYTE PTR [edx],dl
9f0073fa:	00 00                	add    BYTE PTR [eax],al
9f0073fc:	55                   	push   ebp
9f0073fd:	d8 ff                	fdivr  st,st(7)
9f0073ff:	ff 1a                	call   FWORD PTR [edx]
9f007401:	00 00                	add    BYTE PTR [eax],al
9f007403:	00 00                	add    BYTE PTR [eax],al
9f007405:	41                   	inc    ecx
9f007406:	0e                   	push   cs
9f007407:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00740d:	56                   	push   esi
9f00740e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007411:	04 00                	add    al,0x0
9f007413:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f007416:	00 00                	add    BYTE PTR [eax],al
9f007418:	30 12                	xor    BYTE PTR [edx],dl
9f00741a:	00 00                	add    BYTE PTR [eax],al
9f00741c:	4f                   	dec    edi
9f00741d:	d8 ff                	fdivr  st,st(7)
9f00741f:	ff                   	(bad)  
9f007420:	39 00                	cmp    DWORD PTR [eax],eax
9f007422:	00 00                	add    BYTE PTR [eax],al
9f007424:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f007427:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00742d:	75 c5                	jne    9f0073f4 <__x86.get_pc_thunk.cx+0x1210>
9f00742f:	0c 04                	or     al,0x4
9f007431:	04 00                	add    al,0x0
9f007433:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f007436:	00 00                	add    BYTE PTR [eax],al
9f007438:	50                   	push   eax
9f007439:	12 00                	adc    al,BYTE PTR [eax]
9f00743b:	00 68 d8             	add    BYTE PTR [eax-0x28],ch
9f00743e:	ff                   	(bad)  
9f00743f:	ff 1e                	call   FWORD PTR [esi]
9f007441:	00 00                	add    BYTE PTR [eax],al
9f007443:	00 00                	add    BYTE PTR [eax],al
9f007445:	41                   	inc    ecx
9f007446:	0e                   	push   cs
9f007447:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00744d:	5a                   	pop    edx
9f00744e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007451:	04 00                	add    al,0x0
9f007453:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f007456:	00 00                	add    BYTE PTR [eax],al
9f007458:	70 12                	jo     9f00746c <__x86.get_pc_thunk.cx+0x1288>
9f00745a:	00 00                	add    BYTE PTR [eax],al
9f00745c:	68 d8 ff ff 67       	push   0x67ffffd8
9f007461:	00 00                	add    BYTE PTR [eax],al
9f007463:	00 00                	add    BYTE PTR [eax],al
9f007465:	41                   	inc    ecx
9f007466:	0e                   	push   cs
9f007467:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00746d:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f007470:	0c 04                	or     al,0x4
9f007472:	04 00                	add    al,0x0
9f007474:	1c 00                	sbb    al,0x0
9f007476:	00 00                	add    BYTE PTR [eax],al
9f007478:	90                   	nop
9f007479:	12 00                	adc    al,BYTE PTR [eax]
9f00747b:	00 af d8 ff ff 67    	add    BYTE PTR [edi+0x67ffffd8],ch
9f007481:	00 00                	add    BYTE PTR [eax],al
9f007483:	00 00                	add    BYTE PTR [eax],al
9f007485:	41                   	inc    ecx
9f007486:	0e                   	push   cs
9f007487:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00748d:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f007490:	0c 04                	or     al,0x4
9f007492:	04 00                	add    al,0x0
9f007494:	1c 00                	sbb    al,0x0
9f007496:	00 00                	add    BYTE PTR [eax],al
9f007498:	b0 12                	mov    al,0x12
9f00749a:	00 00                	add    BYTE PTR [eax],al
9f00749c:	f8                   	clc    
9f00749d:	d8 ff                	fdivr  st,st(7)
9f00749f:	ff 6c 00 00          	jmp    FWORD PTR [eax+eax*1+0x0]
9f0074a3:	00 00                	add    BYTE PTR [eax],al
9f0074a5:	41                   	inc    ecx
9f0074a6:	0e                   	push   cs
9f0074a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0074ad:	02 68 c5             	add    ch,BYTE PTR [eax-0x3b]
9f0074b0:	0c 04                	or     al,0x4
9f0074b2:	04 00                	add    al,0x0
9f0074b4:	1c 00                	sbb    al,0x0
9f0074b6:	00 00                	add    BYTE PTR [eax],al
9f0074b8:	d0 12                	rcl    BYTE PTR [edx],1
9f0074ba:	00 00                	add    BYTE PTR [eax],al
9f0074bc:	44                   	inc    esp
9f0074bd:	d9 ff                	fcos   
9f0074bf:	ff 20                	jmp    DWORD PTR [eax]
9f0074c1:	00 00                	add    BYTE PTR [eax],al
9f0074c3:	00 00                	add    BYTE PTR [eax],al
9f0074c5:	41                   	inc    ecx
9f0074c6:	0e                   	push   cs
9f0074c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0074cd:	5c                   	pop    esp
9f0074ce:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0074d1:	04 00                	add    al,0x0
9f0074d3:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f0074d6:	00 00                	add    BYTE PTR [eax],al
9f0074d8:	f0 12 00             	lock adc al,BYTE PTR [eax]
9f0074db:	00 44 d9 ff          	add    BYTE PTR [ecx+ebx*8-0x1],al
9f0074df:	ff                   	(bad)  
9f0074e0:	7d 01                	jge    9f0074e3 <__x86.get_pc_thunk.cx+0x12ff>
9f0074e2:	00 00                	add    BYTE PTR [eax],al
9f0074e4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0074e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0074ed:	46                   	inc    esi
9f0074ee:	87 03                	xchg   DWORD PTR [ebx],eax
9f0074f0:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f0074f3:	05 03 70 01 c3       	add    eax,0xc3017003
9f0074f8:	41                   	inc    ecx
9f0074f9:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f0074fd:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007500:	04 00                	add    al,0x0
9f007502:	00 00                	add    BYTE PTR [eax],al
9f007504:	1c 00                	sbb    al,0x0
9f007506:	00 00                	add    BYTE PTR [eax],al
9f007508:	20 13                	and    BYTE PTR [ebx],dl
9f00750a:	00 00                	add    BYTE PTR [eax],al
9f00750c:	94                   	xchg   esp,eax
9f00750d:	da ff                	(bad)  
9f00750f:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f007515:	41                   	inc    ecx
9f007516:	0e                   	push   cs
9f007517:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00751d:	59                   	pop    ecx
9f00751e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007521:	04 00                	add    al,0x0
9f007523:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f007526:	00 00                	add    BYTE PTR [eax],al
9f007528:	40                   	inc    eax
9f007529:	13 00                	adc    eax,DWORD PTR [eax]
9f00752b:	00 94 da ff ff 9c 01 	add    BYTE PTR [edx+ebx*8+0x19cffff],dl
9f007532:	00 00                	add    BYTE PTR [eax],al
9f007534:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f007537:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00753d:	46                   	inc    esi
9f00753e:	87 03                	xchg   DWORD PTR [ebx],eax
9f007540:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f007543:	05 03 8f 01 c3       	add    eax,0xc3018f03
9f007548:	41                   	inc    ecx
9f007549:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f00754d:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007550:	04 00                	add    al,0x0
9f007552:	00 00                	add    BYTE PTR [eax],al
9f007554:	20 00                	and    BYTE PTR [eax],al
9f007556:	00 00                	add    BYTE PTR [eax],al
9f007558:	70 13                	jo     9f00756d <__x86.get_pc_thunk.cx+0x1389>
9f00755a:	00 00                	add    BYTE PTR [eax],al
9f00755c:	00 dc                	add    ah,bl
9f00755e:	ff                   	(bad)  
9f00755f:	ff 96 00 00 00 00    	call   DWORD PTR [esi+0x0]
9f007565:	41                   	inc    ecx
9f007566:	0e                   	push   cs
9f007567:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00756d:	44                   	inc    esp
9f00756e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f007571:	8e c5                	mov    es,ebp
9f007573:	c3                   	ret    
9f007574:	0c 04                	or     al,0x4
9f007576:	04 00                	add    al,0x0
9f007578:	1c 00                	sbb    al,0x0
9f00757a:	00 00                	add    BYTE PTR [eax],al
9f00757c:	94                   	xchg   esp,eax
9f00757d:	13 00                	adc    eax,DWORD PTR [eax]
9f00757f:	00 72 dc             	add    BYTE PTR [edx-0x24],dh
9f007582:	ff                   	(bad)  
9f007583:	ff 20                	jmp    DWORD PTR [eax]
9f007585:	00 00                	add    BYTE PTR [eax],al
9f007587:	00 00                	add    BYTE PTR [eax],al
9f007589:	41                   	inc    ecx
9f00758a:	0e                   	push   cs
9f00758b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007591:	5c                   	pop    esp
9f007592:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007595:	04 00                	add    al,0x0
9f007597:	00 28                	add    BYTE PTR [eax],ch
9f007599:	00 00                	add    BYTE PTR [eax],al
9f00759b:	00 b4 13 00 00 74 dc 	add    BYTE PTR [ebx+edx*1-0x238c0000],dh
9f0075a2:	ff                   	(bad)  
9f0075a3:	ff 1e                	call   FWORD PTR [esi]
9f0075a5:	01 00                	add    DWORD PTR [eax],eax
9f0075a7:	00 00                	add    BYTE PTR [eax],al
9f0075a9:	41                   	inc    ecx
9f0075aa:	0e                   	push   cs
9f0075ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0075b1:	45                   	inc    ebp
9f0075b2:	86 03                	xchg   BYTE PTR [ebx],al
9f0075b4:	83 04 03 13          	add    DWORD PTR [ebx+eax*1],0x13
9f0075b8:	01 c3                	add    ebx,eax
9f0075ba:	41                   	inc    ecx
9f0075bb:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0075bf:	04 04                	add    al,0x4
9f0075c1:	00 00                	add    BYTE PTR [eax],al
9f0075c3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0075c6:	00 00                	add    BYTE PTR [eax],al
9f0075c8:	e0 13                	loopne 9f0075dd <__x86.get_pc_thunk.cx+0x13f9>
9f0075ca:	00 00                	add    BYTE PTR [eax],al
9f0075cc:	66                   	data16
9f0075cd:	dd ff                	(bad)  
9f0075cf:	ff 26                	jmp    DWORD PTR [esi]
9f0075d1:	00 00                	add    BYTE PTR [eax],al
9f0075d3:	00 00                	add    BYTE PTR [eax],al
9f0075d5:	41                   	inc    ecx
9f0075d6:	0e                   	push   cs
9f0075d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0075dd:	62                   	(bad)  
9f0075de:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0075e1:	04 00                	add    al,0x0
9f0075e3:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0075e6:	00 00                	add    BYTE PTR [eax],al
9f0075e8:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
9f0075eb:	00 6c dd ff          	add    BYTE PTR [ebp+ebx*8-0x1],ch
9f0075ef:	ff 9e 00 00 00 00    	call   FWORD PTR [esi+0x0]
9f0075f5:	41                   	inc    ecx
9f0075f6:	0e                   	push   cs
9f0075f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0075fd:	45                   	inc    ebp
9f0075fe:	86 03                	xchg   BYTE PTR [ebx],al
9f007600:	83 04 02 93          	add    DWORD PTR [edx+eax*1],0xffffff93
9f007604:	c3                   	ret    
9f007605:	41                   	inc    ecx
9f007606:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00760a:	04 04                	add    al,0x4
9f00760c:	24 00                	and    al,0x0
9f00760e:	00 00                	add    BYTE PTR [eax],al
9f007610:	28 14 00             	sub    BYTE PTR [eax+eax*1],dl
9f007613:	00 e2                	add    dl,ah
9f007615:	dd ff                	(bad)  
9f007617:	ff 6e 00             	jmp    FWORD PTR [esi+0x0]
9f00761a:	00 00                	add    BYTE PTR [eax],al
9f00761c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00761f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007625:	42                   	inc    edx
9f007626:	86 03                	xchg   BYTE PTR [ebx],al
9f007628:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
9f00762c:	c3                   	ret    
9f00762d:	41                   	inc    ecx
9f00762e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f007632:	04 04                	add    al,0x4
9f007634:	1c 00                	sbb    al,0x0
9f007636:	00 00                	add    BYTE PTR [eax],al
9f007638:	50                   	push   eax
9f007639:	14 00                	adc    al,0x0
9f00763b:	00 28                	add    BYTE PTR [eax],ch
9f00763d:	de ff                	fdivp  st(7),st
9f00763f:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f007645:	41                   	inc    ecx
9f007646:	0e                   	push   cs
9f007647:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00764d:	59                   	pop    ecx
9f00764e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007651:	04 00                	add    al,0x0
9f007653:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f007656:	00 00                	add    BYTE PTR [eax],al
9f007658:	70 14                	jo     9f00766e <__x86.get_pc_thunk.cx+0x148a>
9f00765a:	00 00                	add    BYTE PTR [eax],al
9f00765c:	28 de                	sub    dh,bl
9f00765e:	ff                   	(bad)  
9f00765f:	ff 44 00 00          	inc    DWORD PTR [eax+eax*1+0x0]
9f007663:	00 00                	add    BYTE PTR [eax],al
9f007665:	41                   	inc    ecx
9f007666:	0e                   	push   cs
9f007667:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00766d:	45                   	inc    ebp
9f00766e:	86 03                	xchg   BYTE PTR [ebx],al
9f007670:	83 04 79 c3          	add    DWORD PTR [ecx+edi*2],0xffffffc3
9f007674:	41                   	inc    ecx
9f007675:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f007679:	04 04                	add    al,0x4
9f00767b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00767e:	00 00                	add    BYTE PTR [eax],al
9f007680:	98                   	cwde   
9f007681:	14 00                	adc    al,0x0
9f007683:	00 44 de ff          	add    BYTE PTR [esi+ebx*8-0x1],al
9f007687:	ff 19                	call   FWORD PTR [ecx]
9f007689:	03 00                	add    eax,DWORD PTR [eax]
9f00768b:	00 00                	add    BYTE PTR [eax],al
9f00768d:	41                   	inc    ecx
9f00768e:	0e                   	push   cs
9f00768f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007695:	44                   	inc    esp
9f007696:	83 03 03             	add    DWORD PTR [ebx],0x3
9f007699:	10 03                	adc    BYTE PTR [ebx],al
9f00769b:	c3                   	ret    
9f00769c:	41                   	inc    ecx
9f00769d:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0076a0:	04 00                	add    al,0x0
9f0076a2:	00 00                	add    BYTE PTR [eax],al
9f0076a4:	1c 00                	sbb    al,0x0
9f0076a6:	00 00                	add    BYTE PTR [eax],al
9f0076a8:	c0 14 00 00          	rcl    BYTE PTR [eax+eax*1],0x0
9f0076ac:	35 e1 ff ff 1d       	xor    eax,0x1dffffe1
9f0076b1:	00 00                	add    BYTE PTR [eax],al
9f0076b3:	00 00                	add    BYTE PTR [eax],al
9f0076b5:	41                   	inc    ecx
9f0076b6:	0e                   	push   cs
9f0076b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0076bd:	59                   	pop    ecx
9f0076be:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0076c1:	04 00                	add    al,0x0
9f0076c3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0076c6:	00 00                	add    BYTE PTR [eax],al
9f0076c8:	e0 14                	loopne 9f0076de <__x86.get_pc_thunk.cx+0x14fa>
9f0076ca:	00 00                	add    BYTE PTR [eax],al
9f0076cc:	32 e1                	xor    ah,cl
9f0076ce:	ff                   	(bad)  
9f0076cf:	ff                   	(bad)  
9f0076d0:	3d 00 00 00 00       	cmp    eax,0x0
9f0076d5:	41                   	inc    ecx
9f0076d6:	0e                   	push   cs
9f0076d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0076dd:	79 c5                	jns    9f0076a4 <__x86.get_pc_thunk.cx+0x14c0>
9f0076df:	0c 04                	or     al,0x4
9f0076e1:	04 00                	add    al,0x0
9f0076e3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0076e6:	00 00                	add    BYTE PTR [eax],al
9f0076e8:	00 15 00 00 4f e1    	add    BYTE PTR ds:0xe14f0000,dl
9f0076ee:	ff                   	(bad)  
9f0076ef:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f0076f5:	41                   	inc    ecx
9f0076f6:	0e                   	push   cs
9f0076f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0076fd:	71 c5                	jno    9f0076c4 <__x86.get_pc_thunk.cx+0x14e0>
9f0076ff:	0c 04                	or     al,0x4
9f007701:	04 00                	add    al,0x0
9f007703:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f007706:	00 00                	add    BYTE PTR [eax],al
9f007708:	20 15 00 00 64 e1    	and    BYTE PTR ds:0xe1640000,dl
9f00770e:	ff                   	(bad)  
9f00770f:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f007715:	41                   	inc    ecx
9f007716:	0e                   	push   cs
9f007717:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00771d:	59                   	pop    ecx
9f00771e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007721:	04 00                	add    al,0x0
9f007723:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f007726:	00 00                	add    BYTE PTR [eax],al
9f007728:	40                   	inc    eax
9f007729:	15 00 00 61 e1       	adc    eax,0xe1610000
9f00772e:	ff                   	(bad)  
9f00772f:	ff 57 08             	call   DWORD PTR [edi+0x8]
9f007732:	00 00                	add    BYTE PTR [eax],al
9f007734:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f007737:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00773d:	46                   	inc    esi
9f00773e:	87 03                	xchg   DWORD PTR [ebx],eax
9f007740:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f007743:	05 03 4a 08 c3       	add    eax,0xc3084a03
9f007748:	41                   	inc    ecx
9f007749:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f00774d:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007750:	04 00                	add    al,0x0
9f007752:	00 00                	add    BYTE PTR [eax],al
9f007754:	24 00                	and    al,0x0
9f007756:	00 00                	add    BYTE PTR [eax],al
9f007758:	70 15                	jo     9f00776f <__x86.get_pc_thunk.cx+0x158b>
9f00775a:	00 00                	add    BYTE PTR [eax],al
9f00775c:	88 e9                	mov    cl,ch
9f00775e:	ff                   	(bad)  
9f00775f:	ff 6d 00             	jmp    FWORD PTR [ebp+0x0]
9f007762:	00 00                	add    BYTE PTR [eax],al
9f007764:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f007767:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00776d:	45                   	inc    ebp
9f00776e:	86 03                	xchg   BYTE PTR [ebx],al
9f007770:	83 04 02 62          	add    DWORD PTR [edx+eax*1],0x62
9f007774:	c3                   	ret    
9f007775:	41                   	inc    ecx
9f007776:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00777a:	04 04                	add    al,0x4
9f00777c:	20 00                	and    BYTE PTR [eax],al
9f00777e:	00 00                	add    BYTE PTR [eax],al
9f007780:	98                   	cwde   
9f007781:	15 00 00 cd e9       	adc    eax,0xe9cd0000
9f007786:	ff                   	(bad)  
9f007787:	ff 41 00             	inc    DWORD PTR [ecx+0x0]
9f00778a:	00 00                	add    BYTE PTR [eax],al
9f00778c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00778f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007795:	44                   	inc    esp
9f007796:	83 03 79             	add    DWORD PTR [ebx],0x79
9f007799:	c5 c3 0c             	(bad)  
9f00779c:	04 04                	add    al,0x4
	...

Disassembly of section .dynsym:

9f0077a0 <.dynsym>:
	...
9f0077b0:	f3 01 00             	repz add DWORD PTR [eax],eax
9f0077b3:	00 22                	add    BYTE PTR [edx],ah
9f0077b5:	30 00                	xor    BYTE PTR [eax],al
9f0077b7:	9f                   	lahf   
9f0077b8:	78 02                	js     9f0077bc <__x86.get_pc_thunk.cx+0x15d8>
9f0077ba:	00 00                	add    BYTE PTR [eax],al
9f0077bc:	12 00                	adc    al,BYTE PTR [eax]
9f0077be:	01 00                	add    DWORD PTR [eax],eax
9f0077c0:	34 02                	xor    al,0x2
9f0077c2:	00 00                	add    BYTE PTR [eax],al
9f0077c4:	cc                   	int3   
9f0077c5:	4a                   	dec    edx
9f0077c6:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
9f0077cc:	12 00                	adc    al,BYTE PTR [eax]
9f0077ce:	01 00                	add    DWORD PTR [eax],eax
9f0077d0:	4e                   	dec    esi
9f0077d1:	01 00                	add    DWORD PTR [eax],eax
9f0077d3:	00 d8                	add    al,bl
9f0077d5:	1c 00                	sbb    al,0x0
9f0077d7:	9f                   	lahf   
9f0077d8:	1c 00                	sbb    al,0x0
9f0077da:	00 00                	add    BYTE PTR [eax],al
9f0077dc:	12 00                	adc    al,BYTE PTR [eax]
9f0077de:	01 00                	add    DWORD PTR [eax],eax
9f0077e0:	fa                   	cli    
9f0077e1:	00 00                	add    BYTE PTR [eax],al
9f0077e3:	00 b0 16 00 9f 59    	add    BYTE PTR [eax+0x599f0016],dh
9f0077e9:	00 00                	add    BYTE PTR [eax],al
9f0077eb:	00 12                	add    BYTE PTR [edx],dl
9f0077ed:	00 01                	add    BYTE PTR [ecx],al
9f0077ef:	00 0e                	add    BYTE PTR [esi],cl
9f0077f1:	02 00                	add    al,BYTE PTR [eax]
9f0077f3:	00 09                	add    BYTE PTR [ecx],cl
9f0077f5:	17                   	pop    ss
9f0077f6:	00 9f 54 00 00 00    	add    BYTE PTR [edi+0x54],bl
9f0077fc:	12 00                	adc    al,BYTE PTR [eax]
9f0077fe:	01 00                	add    DWORD PTR [eax],eax
9f007800:	3d 00 00 00 c8       	cmp    eax,0xc8000000
9f007805:	05 00 9f 5a 00       	add    eax,0x5a9f00
9f00780a:	00 00                	add    BYTE PTR [eax],al
9f00780c:	12 00                	adc    al,BYTE PTR [eax]
9f00780e:	01 00                	add    DWORD PTR [eax],eax
9f007810:	43                   	inc    ebx
9f007811:	02 00                	add    al,BYTE PTR [eax]
9f007813:	00 c4                	add    ah,al
9f007815:	4b                   	dec    ebx
9f007816:	00 9f 59 00 00 00    	add    BYTE PTR [edi+0x59],bl
9f00781c:	12 00                	adc    al,BYTE PTR [eax]
9f00781e:	01 00                	add    DWORD PTR [eax],eax
9f007820:	15 02 00 00 74       	adc    eax,0x74000002
9f007825:	48                   	dec    eax
9f007826:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
9f00782c:	12 00                	adc    al,BYTE PTR [eax]
9f00782e:	01 00                	add    DWORD PTR [eax],eax
9f007830:	d4 01                	aam    0x1
9f007832:	00 00                	add    BYTE PTR [eax],al
9f007834:	f4                   	hlt    
9f007835:	2b 00                	sub    eax,DWORD PTR [eax]
9f007837:	9f                   	lahf   
9f007838:	00 00                	add    BYTE PTR [eax],al
9f00783a:	00 00                	add    BYTE PTR [eax],al
9f00783c:	12 00                	adc    al,BYTE PTR [eax]
9f00783e:	01 00                	add    DWORD PTR [eax],eax
9f007840:	6a 00                	push   0x0
9f007842:	00 00                	add    BYTE PTR [eax],al
9f007844:	32 08                	xor    cl,BYTE PTR [eax]
9f007846:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f00784c:	12 00                	adc    al,BYTE PTR [eax]
9f00784e:	01 00                	add    DWORD PTR [eax],eax
9f007850:	df 01                	fild   WORD PTR [ecx]
9f007852:	00 00                	add    BYTE PTR [eax],al
9f007854:	55                   	push   ebp
9f007855:	2c 00                	sub    al,0x0
9f007857:	9f                   	lahf   
9f007858:	2e 00 00             	add    BYTE PTR cs:[eax],al
9f00785b:	00 12                	add    BYTE PTR [edx],dl
9f00785d:	00 01                	add    BYTE PTR [ecx],al
9f00785f:	00 87 01 00 00 f8    	add    BYTE PTR [edi-0x7ffffff],al
9f007865:	21 00                	and    DWORD PTR [eax],eax
9f007867:	9f                   	lahf   
9f007868:	20 00                	and    BYTE PTR [eax],al
9f00786a:	00 00                	add    BYTE PTR [eax],al
9f00786c:	12 00                	adc    al,BYTE PTR [eax]
9f00786e:	01 00                	add    DWORD PTR [eax],eax
9f007870:	eb 00                	jmp    9f007872 <__x86.get_pc_thunk.cx+0x168e>
9f007872:	00 00                	add    BYTE PTR [eax],al
9f007874:	cc                   	int3   
9f007875:	13 00                	adc    eax,DWORD PTR [eax]
9f007877:	9f                   	lahf   
9f007878:	bd 00 00 00 12       	mov    ebp,0x12000000
9f00787d:	00 01                	add    BYTE PTR [ecx],al
9f00787f:	00 a9 00 00 00 9e    	add    BYTE PTR [ecx-0x62000000],ch
9f007885:	0d 00 9f 29 03       	or     eax,0x3299f00
9f00788a:	00 00                	add    BYTE PTR [eax],al
9f00788c:	12 00                	adc    al,BYTE PTR [eax]
9f00788e:	01 00                	add    DWORD PTR [eax],eax
9f007890:	c6 01 00             	mov    BYTE PTR [ecx],0x0
9f007893:	00 eb                	add    bl,ch
9f007895:	2a 00                	sub    al,BYTE PTR [eax]
9f007897:	9f                   	lahf   
9f007898:	20 00                	and    BYTE PTR [eax],al
9f00789a:	00 00                	add    BYTE PTR [eax],al
9f00789c:	12 00                	adc    al,BYTE PTR [eax]
9f00789e:	01 00                	add    DWORD PTR [eax],eax
9f0078a0:	62 01                	bound  eax,QWORD PTR [ecx]
9f0078a2:	00 00                	add    BYTE PTR [eax],al
9f0078a4:	78 1e                	js     9f0078c4 <__x86.get_pc_thunk.cx+0x16e0>
9f0078a6:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f0078ac:	12 00                	adc    al,BYTE PTR [eax]
9f0078ae:	01 00                	add    DWORD PTR [eax],eax
9f0078b0:	c9                   	leave  
9f0078b1:	00 00                	add    BYTE PTR [eax],al
9f0078b3:	00 20                	add    BYTE PTR [eax],ah
9f0078b5:	13 00                	adc    eax,DWORD PTR [eax]
9f0078b7:	9f                   	lahf   
9f0078b8:	26 00 00             	add    BYTE PTR es:[eax],al
9f0078bb:	00 12                	add    BYTE PTR [edx],dl
9f0078bd:	00 01                	add    BYTE PTR [ecx],al
9f0078bf:	00 b2 01 00 00 b5    	add    BYTE PTR [edx-0x4affffff],dh
9f0078c5:	27                   	daa    
9f0078c6:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f0078cc:	12 00                	adc    al,BYTE PTR [eax]
9f0078ce:	01 00                	add    DWORD PTR [eax],eax
9f0078d0:	0f 01 00             	sgdtd  [eax]
9f0078d3:	00 db                	add    bl,bl
9f0078d5:	18 00                	sbb    BYTE PTR [eax],al
9f0078d7:	9f                   	lahf   
9f0078d8:	70 00                	jo     9f0078da <__x86.get_pc_thunk.cx+0x16f6>
9f0078da:	00 00                	add    BYTE PTR [eax],al
9f0078dc:	12 00                	adc    al,BYTE PTR [eax]
9f0078de:	01 00                	add    DWORD PTR [eax],eax
9f0078e0:	68 01 00 00 95       	push   0x95000001
9f0078e5:	21 00                	and    DWORD PTR [eax],eax
9f0078e7:	9f                   	lahf   
9f0078e8:	23 00                	and    eax,DWORD PTR [eax]
9f0078ea:	00 00                	add    BYTE PTR [eax],al
9f0078ec:	12 00                	adc    al,BYTE PTR [eax]
9f0078ee:	01 00                	add    DWORD PTR [eax],eax
9f0078f0:	64 02 00             	add    al,BYTE PTR fs:[eax]
9f0078f3:	00 20                	add    BYTE PTR [eax],ah
9f0078f5:	4e                   	dec    esi
9f0078f6:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
9f0078fc:	12 00                	adc    al,BYTE PTR [eax]
9f0078fe:	01 00                	add    DWORD PTR [eax],eax
9f007900:	17                   	pop    ss
9f007901:	00 00                	add    BYTE PTR [eax],al
9f007903:	00 c3                	add    bl,al
9f007905:	02 00                	add    al,BYTE PTR [eax]
9f007907:	9f                   	lahf   
9f007908:	bb 00 00 00 12       	mov    ebx,0x12000000
9f00790d:	00 01                	add    BYTE PTR [ecx],al
9f00790f:	00 7d 01             	add    BYTE PTR [ebp+0x1],bh
9f007912:	00 00                	add    BYTE PTR [eax],al
9f007914:	db 21                	(bad)  [ecx]
9f007916:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
9f00791c:	12 00                	adc    al,BYTE PTR [eax]
9f00791e:	01 00                	add    DWORD PTR [eax],eax
9f007920:	93                   	xchg   ebx,eax
9f007921:	01 00                	add    DWORD PTR [eax],eax
9f007923:	00 18                	add    BYTE PTR [eax],bl
9f007925:	22 00                	and    al,BYTE PTR [eax]
9f007927:	9f                   	lahf   
9f007928:	73 00                	jae    9f00792a <__x86.get_pc_thunk.cx+0x1746>
9f00792a:	00 00                	add    BYTE PTR [eax],al
9f00792c:	12 00                	adc    al,BYTE PTR [eax]
9f00792e:	01 00                	add    DWORD PTR [eax],eax
9f007930:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f007931:	02 00                	add    al,BYTE PTR [eax]
9f007933:	00 e1                	add    cl,ah
9f007935:	57                   	push   edi
9f007936:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
9f00793c:	12 00                	adc    al,BYTE PTR [eax]
9f00793e:	01 00                	add    DWORD PTR [eax],eax
9f007940:	74 02                	je     9f007944 <__x86.get_pc_thunk.cx+0x1760>
9f007942:	00 00                	add    BYTE PTR [eax],al
9f007944:	c0 4f 00 9f          	ror    BYTE PTR [edi+0x0],0x9f
9f007948:	9c                   	pushf  
9f007949:	01 00                	add    DWORD PTR [eax],eax
9f00794b:	00 12                	add    BYTE PTR [edx],dl
9f00794d:	00 01                	add    BYTE PTR [ecx],al
9f00794f:	00 f0                	add    al,dh
9f007951:	00 00                	add    BYTE PTR [eax],al
9f007953:	00 c2                	add    dl,al
9f007955:	15 00 9f cb 00       	adc    eax,0xcb9f00
9f00795a:	00 00                	add    BYTE PTR [eax],al
9f00795c:	12 00                	adc    al,BYTE PTR [eax]
9f00795e:	01 00                	add    DWORD PTR [eax],eax
9f007960:	da 01                	fiadd  DWORD PTR [ecx]
9f007962:	00 00                	add    BYTE PTR [eax],al
9f007964:	2c 2c                	sub    al,0x2c
9f007966:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
9f00796c:	12 00                	adc    al,BYTE PTR [eax]
9f00796e:	01 00                	add    DWORD PTR [eax],eax
9f007970:	4c                   	dec    esp
9f007971:	02 00                	add    al,BYTE PTR [eax]
9f007973:	00 a4 4c 00 9f 1e 00 	add    BYTE PTR [esp+ecx*2+0x1e9f00],ah
9f00797a:	00 00                	add    BYTE PTR [eax],al
9f00797c:	12 00                	adc    al,BYTE PTR [eax]
9f00797e:	01 00                	add    DWORD PTR [eax],eax
9f007980:	42                   	inc    edx
9f007981:	01 00                	add    DWORD PTR [eax],eax
9f007983:	00 95 1a 00 9f f4    	add    BYTE PTR [ebp-0xb60ffe6],dl
9f007989:	01 00                	add    DWORD PTR [eax],eax
9f00798b:	00 12                	add    BYTE PTR [edx],dl
9f00798d:	00 01                	add    BYTE PTR [ecx],al
9f00798f:	00 99 00 00 00 d4    	add    BYTE PTR [ecx-0x2c000000],bl
9f007995:	0c 00                	or     al,0x0
9f007997:	9f                   	lahf   
9f007998:	26 00 00             	add    BYTE PTR es:[eax],al
9f00799b:	00 12                	add    BYTE PTR [edx],dl
9f00799d:	00 01                	add    BYTE PTR [ecx],al
9f00799f:	00 15 01 00 00 4b    	add    BYTE PTR ds:0x4b000001,dl
9f0079a5:	19 00                	sbb    DWORD PTR [eax],eax
9f0079a7:	9f                   	lahf   
9f0079a8:	70 00                	jo     9f0079aa <__x86.get_pc_thunk.cx+0x17c6>
9f0079aa:	00 00                	add    BYTE PTR [eax],al
9f0079ac:	12 00                	adc    al,BYTE PTR [eax]
9f0079ae:	01 00                	add    DWORD PTR [eax],eax
9f0079b0:	1e                   	push   ds
9f0079b1:	02 00                	add    al,BYTE PTR [eax]
9f0079b3:	00 f8                	add    al,bh
9f0079b5:	48                   	dec    eax
9f0079b6:	00 9f 3e 00 00 00    	add    BYTE PTR [edi+0x3e],bl
9f0079bc:	12 00                	adc    al,BYTE PTR [eax]
9f0079be:	01 00                	add    DWORD PTR [eax],eax
9f0079c0:	9c                   	pushf  
9f0079c1:	02 00                	add    al,BYTE PTR [eax]
9f0079c3:	00 84 54 00 9f 44 00 	add    BYTE PTR [esp+edx*2+0x449f00],al
9f0079ca:	00 00                	add    BYTE PTR [eax],al
9f0079cc:	12 00                	adc    al,BYTE PTR [eax]
9f0079ce:	01 00                	add    DWORD PTR [eax],eax
9f0079d0:	b5 00                	mov    ch,0x0
9f0079d2:	00 00                	add    BYTE PTR [eax],al
9f0079d4:	f0 10 00             	lock adc BYTE PTR [eax],al
9f0079d7:	9f                   	lahf   
9f0079d8:	20 00                	and    BYTE PTR [eax],al
9f0079da:	00 00                	add    BYTE PTR [eax],al
9f0079dc:	12 00                	adc    al,BYTE PTR [eax]
9f0079de:	01 00                	add    DWORD PTR [eax],eax
9f0079e0:	d5 01                	aad    0x1
9f0079e2:	00 00                	add    BYTE PTR [eax],al
9f0079e4:	f4                   	hlt    
9f0079e5:	2b 00                	sub    eax,DWORD PTR [eax]
9f0079e7:	9f                   	lahf   
9f0079e8:	00 00                	add    BYTE PTR [eax],al
9f0079ea:	00 00                	add    BYTE PTR [eax],al
9f0079ec:	12 00                	adc    al,BYTE PTR [eax]
9f0079ee:	01 00                	add    DWORD PTR [eax],eax
9f0079f0:	aa                   	stos   BYTE PTR es:[edi],al
9f0079f1:	01 00                	add    DWORD PTR [eax],eax
9f0079f3:	00 6c 92 00          	add    BYTE PTR [edx+edx*4+0x0],ch
9f0079f7:	9f                   	lahf   
9f0079f8:	04 00                	add    al,0x0
9f0079fa:	00 00                	add    BYTE PTR [eax],al
9f0079fc:	11 00                	adc    DWORD PTR [eax],eax
9f0079fe:	15 00 3d 01 00       	adc    eax,0x13d00
9f007a03:	00 49 1a             	add    BYTE PTR [ecx+0x1a],cl
9f007a06:	00 9f 4c 00 00 00    	add    BYTE PTR [edi+0x4c],bl
9f007a0c:	12 00                	adc    al,BYTE PTR [eax]
9f007a0e:	01 00                	add    DWORD PTR [eax],eax
9f007a10:	7f 00                	jg     9f007a12 <__x86.get_pc_thunk.cx+0x182e>
9f007a12:	00 00                	add    BYTE PTR [eax],al
9f007a14:	99                   	cdq    
9f007a15:	0a 00                	or     al,BYTE PTR [eax]
9f007a17:	9f                   	lahf   
9f007a18:	26 00 00             	add    BYTE PTR es:[eax],al
9f007a1b:	00 12                	add    BYTE PTR [edx],dl
9f007a1d:	00 01                	add    BYTE PTR [ecx],al
9f007a1f:	00 c4                	add    ah,al
9f007a21:	02 00                	add    al,BYTE PTR [eax]
9f007a23:	00 8d 58 00 9f 57    	add    BYTE PTR [ebp+0x579f0058],cl
9f007a29:	08 00                	or     BYTE PTR [eax],al
9f007a2b:	00 12                	add    BYTE PTR [edx],dl
9f007a2d:	00 01                	add    BYTE PTR [ecx],al
9f007a2f:	00 8e 02 00 00 64    	add    BYTE PTR [esi+0x64000002],cl
9f007a35:	54                   	push   esp
9f007a36:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
9f007a3c:	12 00                	adc    al,BYTE PTR [eax]
9f007a3e:	01 00                	add    DWORD PTR [eax],eax
9f007a40:	98                   	cwde   
9f007a41:	01 00                	add    DWORD PTR [eax],eax
9f007a43:	00 64 92 00          	add    BYTE PTR [edx+edx*4+0x0],ah
9f007a47:	9f                   	lahf   
9f007a48:	04 00                	add    al,0x0
9f007a4a:	00 00                	add    BYTE PTR [eax],al
9f007a4c:	11 00                	adc    DWORD PTR [eax],eax
9f007a4e:	15 00 94 00 00       	adc    eax,0x9400
9f007a53:	00 79 0c             	add    BYTE PTR [ecx+0xc],bh
9f007a56:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
9f007a5c:	12 00                	adc    al,BYTE PTR [eax]
9f007a5e:	01 00                	add    DWORD PTR [eax],eax
9f007a60:	a1 01 00 00 68       	mov    eax,ds:0x68000001
9f007a65:	92                   	xchg   edx,eax
9f007a66:	00 9f 04 00 00 00    	add    BYTE PTR [edi+0x4],bl
9f007a6c:	11 00                	adc    DWORD PTR [eax],eax
9f007a6e:	15 00 54 02 00       	adc    eax,0x25400
9f007a73:	00 c4                	add    ah,al
9f007a75:	4c                   	dec    esp
9f007a76:	00 9f 67 00 00 00    	add    BYTE PTR [edi+0x67],bl
9f007a7c:	12 00                	adc    al,BYTE PTR [eax]
9f007a7e:	01 00                	add    DWORD PTR [eax],eax
9f007a80:	5c                   	pop    esp
9f007a81:	02 00                	add    al,BYTE PTR [eax]
9f007a83:	00 00                	add    BYTE PTR [eax],al
9f007a85:	4e                   	dec    esi
9f007a86:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f007a8c:	12 00                	adc    al,BYTE PTR [eax]
9f007a8e:	01 00                	add    DWORD PTR [eax],eax
9f007a90:	c2 00 00             	ret    0x0
9f007a93:	00 f7                	add    bh,dh
9f007a95:	12 00                	adc    al,BYTE PTR [eax]
9f007a97:	9f                   	lahf   
9f007a98:	29 00                	sub    DWORD PTR [eax],eax
9f007a9a:	00 00                	add    BYTE PTR [eax],al
9f007a9c:	12 00                	adc    al,BYTE PTR [eax]
9f007a9e:	01 00                	add    DWORD PTR [eax],eax
9f007aa0:	71 00                	jno    9f007aa2 <__x86.get_pc_thunk.cx+0x18be>
9f007aa2:	00 00                	add    BYTE PTR [eax],al
9f007aa4:	55                   	push   ebp
9f007aa5:	08 00                	or     BYTE PTR [eax],al
9f007aa7:	9f                   	lahf   
9f007aa8:	c1 01 00             	rol    DWORD PTR [ecx],0x0
9f007aab:	00 12                	add    BYTE PTR [edx],dl
9f007aad:	00 01                	add    BYTE PTR [ecx],al
9f007aaf:	00 b9 01 00 00 d8    	add    BYTE PTR [ecx-0x27ffffff],bh
9f007ab5:	28 00                	sub    BYTE PTR [eax],al
9f007ab7:	9f                   	lahf   
9f007ab8:	23 00                	and    eax,DWORD PTR [eax]
9f007aba:	00 00                	add    BYTE PTR [eax],al
9f007abc:	12 00                	adc    al,BYTE PTR [eax]
9f007abe:	01 00                	add    DWORD PTR [eax],eax
9f007ac0:	10 00                	adc    BYTE PTR [eax],al
9f007ac2:	00 00                	add    BYTE PTR [eax],al
9f007ac4:	b3 01                	mov    bl,0x1
9f007ac6:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
9f007acc:	12 00                	adc    al,BYTE PTR [eax]
9f007ace:	01 00                	add    DWORD PTR [eax],eax
9f007ad0:	38 01                	cmp    BYTE PTR [ecx],al
9f007ad2:	00 00                	add    BYTE PTR [eax],al
9f007ad4:	26 1a 00             	sbb    al,BYTE PTR es:[eax]
9f007ad7:	9f                   	lahf   
9f007ad8:	23 00                	and    eax,DWORD PTR [eax]
9f007ada:	00 00                	add    BYTE PTR [eax],al
9f007adc:	12 00                	adc    al,BYTE PTR [eax]
9f007ade:	01 00                	add    DWORD PTR [eax],eax
9f007ae0:	e4 01                	in     al,0x1
9f007ae2:	00 00                	add    BYTE PTR [eax],al
9f007ae4:	fd                   	std    
9f007ae5:	2f                   	das    
9f007ae6:	00 9f 25 00 00 00    	add    BYTE PTR [edi+0x25],bl
9f007aec:	12 00                	adc    al,BYTE PTR [eax]
9f007aee:	01 00                	add    DWORD PTR [eax],eax
9f007af0:	2d 01 00 00 01       	sub    eax,0x1000001
9f007af5:	1a 00                	sbb    al,BYTE PTR [eax]
9f007af7:	9f                   	lahf   
9f007af8:	25 00 00 00 12       	and    eax,0x12000000
9f007afd:	00 01                	add    BYTE PTR [ecx],al
9f007aff:	00 25 02 00 00 2a    	add    BYTE PTR ds:0x2a000002,ah
9f007b05:	4a                   	dec    edx
9f007b06:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
9f007b0c:	12 00                	adc    al,BYTE PTR [eax]
9f007b0e:	01 00                	add    DWORD PTR [eax],eax
9f007b10:	ce                   	into   
9f007b11:	00 00                	add    BYTE PTR [eax],al
9f007b13:	00 00                	add    BYTE PTR [eax],al
9f007b15:	00 13                	add    BYTE PTR [ebx],dl
9f007b17:	00 00                	add    BYTE PTR [eax],al
9f007b19:	00 00                	add    BYTE PTR [eax],al
9f007b1b:	00 10                	add    BYTE PTR [eax],dl
9f007b1d:	00 01                	add    BYTE PTR [ecx],al
9f007b1f:	00 5b 01             	add    BYTE PTR [ebx+0x1],bl
9f007b22:	00 00                	add    BYTE PTR [eax],al
9f007b24:	14 1d                	adc    al,0x1d
9f007b26:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f007b2c:	12 00                	adc    al,BYTE PTR [eax]
9f007b2e:	01 00                	add    DWORD PTR [eax],eax
9f007b30:	ae                   	scas   al,BYTE PTR es:[edi]
9f007b31:	02 00                	add    al,BYTE PTR [eax]
9f007b33:	00 fe                	add    dh,bh
9f007b35:	57                   	push   edi
9f007b36:	00 9f 3d 00 00 00    	add    BYTE PTR [edi+0x3d],bl
9f007b3c:	12 00                	adc    al,BYTE PTR [eax]
9f007b3e:	01 00                	add    DWORD PTR [eax],eax
9f007b40:	cd 01                	int    0x1
9f007b42:	00 00                	add    BYTE PTR [eax],al
9f007b44:	d3 2b                	shr    DWORD PTR [ebx],cl
9f007b46:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f007b4c:	12 00                	adc    al,BYTE PTR [eax]
9f007b4e:	01 00                	add    DWORD PTR [eax],eax
9f007b50:	7b 02                	jnp    9f007b54 <__x86.get_pc_thunk.cx+0x1970>
9f007b52:	00 00                	add    BYTE PTR [eax],al
9f007b54:	f2 51                	repnz push ecx
9f007b56:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f007b5c:	12 00                	adc    al,BYTE PTR [eax]
9f007b5e:	01 00                	add    DWORD PTR [eax],eax
9f007b60:	e3 00                	jecxz  9f007b62 <__x86.get_pc_thunk.cx+0x197e>
9f007b62:	00 00                	add    BYTE PTR [eax],al
9f007b64:	89 13                	mov    DWORD PTR [ebx],edx
9f007b66:	00 9f 43 00 00 00    	add    BYTE PTR [edi+0x43],bl
9f007b6c:	12 00                	adc    al,BYTE PTR [eax]
9f007b6e:	01 00                	add    DWORD PTR [eax],eax
9f007b70:	c6 02 00             	mov    BYTE PTR [edx],0x0
9f007b73:	00 51 61             	add    BYTE PTR [ecx+0x61],dl
9f007b76:	00 9f 41 00 00 00    	add    BYTE PTR [edi+0x41],bl
9f007b7c:	12 00                	adc    al,BYTE PTR [eax]
9f007b7e:	01 00                	add    DWORD PTR [eax],eax
9f007b80:	9f                   	lahf   
9f007b81:	00 00                	add    BYTE PTR [eax],al
9f007b83:	00 28                	add    BYTE PTR [eax],ch
9f007b85:	0d 00 9f 26 00       	or     eax,0x269f00
9f007b8a:	00 00                	add    BYTE PTR [eax],al
9f007b8c:	12 00                	adc    al,BYTE PTR [eax]
9f007b8e:	01 00                	add    DWORD PTR [eax],eax
9f007b90:	de 00                	fiadd  WORD PTR [eax]
9f007b92:	00 00                	add    BYTE PTR [eax],al
9f007b94:	46                   	inc    esi
9f007b95:	13 00                	adc    eax,DWORD PTR [eax]
9f007b97:	9f                   	lahf   
9f007b98:	43                   	inc    ebx
9f007b99:	00 00                	add    BYTE PTR [eax],al
9f007b9b:	00 12                	add    BYTE PTR [edx],dl
9f007b9d:	00 01                	add    BYTE PTR [ecx],al
9f007b9f:	00 2d 02 00 00 ae    	add    BYTE PTR ds:0xae000002,ch
9f007ba5:	4a                   	dec    edx
9f007ba6:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
9f007bac:	12 00                	adc    al,BYTE PTR [eax]
9f007bae:	01 00                	add    DWORD PTR [eax],eax
9f007bb0:	78 00                	js     9f007bb2 <__x86.get_pc_thunk.cx+0x19ce>
9f007bb2:	00 00                	add    BYTE PTR [eax],al
9f007bb4:	42                   	inc    edx
9f007bb5:	0a 00                	or     al,BYTE PTR [eax]
9f007bb7:	9f                   	lahf   
9f007bb8:	23 00                	and    eax,DWORD PTR [eax]
9f007bba:	00 00                	add    BYTE PTR [eax],al
9f007bbc:	12 00                	adc    al,BYTE PTR [eax]
9f007bbe:	01 00                	add    DWORD PTR [eax],eax
9f007bc0:	07                   	pop    es
9f007bc1:	01 00                	add    DWORD PTR [eax],eax
9f007bc3:	00 53 18             	add    BYTE PTR [ebx+0x18],dl
9f007bc6:	00 9f 88 00 00 00    	add    BYTE PTR [edi+0x88],bl
9f007bcc:	12 00                	adc    al,BYTE PTR [eax]
9f007bce:	01 00                	add    DWORD PTR [eax],eax
9f007bd0:	0d 02 00 00 94       	or     eax,0x94000002
9f007bd5:	47                   	inc    edi
9f007bd6:	00 9f 33 00 00 00    	add    BYTE PTR [edi+0x33],bl
9f007bdc:	12 00                	adc    al,BYTE PTR [eax]
9f007bde:	01 00                	add    DWORD PTR [eax],eax
9f007be0:	00 01                	add    BYTE PTR [ecx],al
9f007be2:	00 00                	add    BYTE PTR [eax],al
9f007be4:	e5 17                	in     eax,0x17
9f007be6:	00 9f 37 00 00 00    	add    BYTE PTR [edi+0x37],bl
9f007bec:	12 00                	adc    al,BYTE PTR [eax]
9f007bee:	01 00                	add    DWORD PTR [eax],eax
9f007bf0:	08 00                	or     BYTE PTR [eax],al
9f007bf2:	00 00                	add    BYTE PTR [eax],al
9f007bf4:	70 00                	jo     9f007bf6 <__x86.get_pc_thunk.cx+0x1a12>
9f007bf6:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
9f007bfc:	12 00                	adc    al,BYTE PTR [eax]
9f007bfe:	01 00                	add    DWORD PTR [eax],eax
9f007c00:	3b 02                	cmp    eax,DWORD PTR [edx]
9f007c02:	00 00                	add    BYTE PTR [eax],al
9f007c04:	4c                   	dec    esp
9f007c05:	4b                   	dec    ebx
9f007c06:	00 9f 47 00 00 00    	add    BYTE PTR [edi+0x47],bl
9f007c0c:	12 00                	adc    al,BYTE PTR [eax]
9f007c0e:	01 00                	add    DWORD PTR [eax],eax
9f007c10:	95                   	xchg   ebp,eax
9f007c11:	02 00                	add    al,BYTE PTR [eax]
9f007c13:	00 c0                	add    al,al
9f007c15:	92                   	xchg   edx,eax
9f007c16:	00 9f 04 00 00 00    	add    BYTE PTR [edi+0x4],bl
9f007c1c:	11 00                	adc    DWORD PTR [eax],eax
9f007c1e:	15 00 20 01 00       	adc    eax,0x12000
9f007c23:	00 d8                	add    al,bl
9f007c25:	19 00                	sbb    DWORD PTR [eax],eax
9f007c27:	9f                   	lahf   
9f007c28:	29 00                	sub    DWORD PTR [eax],eax
9f007c2a:	00 00                	add    BYTE PTR [eax],al
9f007c2c:	12 00                	adc    al,BYTE PTR [eax]
9f007c2e:	01 00                	add    DWORD PTR [eax],eax
9f007c30:	b8 02 00 00 70       	mov    eax,0x70000002
9f007c35:	58                   	pop    eax
9f007c36:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
9f007c3c:	12 00                	adc    al,BYTE PTR [eax]
9f007c3e:	01 00                	add    DWORD PTR [eax],eax
9f007c40:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f007c41:	00 00                	add    BYTE PTR [eax],al
9f007c43:	00 7b 0d             	add    BYTE PTR [ebx+0xd],bh
9f007c46:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f007c4c:	12 00                	adc    al,BYTE PTR [eax]
9f007c4e:	01 00                	add    DWORD PTR [eax],eax
9f007c50:	cb                   	retf   
9f007c51:	02 00                	add    al,BYTE PTR [eax]
9f007c53:	00 e4                	add    ah,ah
9f007c55:	60                   	pusha  
9f007c56:	00 9f 6d 00 00 00    	add    BYTE PTR [edi+0x6d],bl
9f007c5c:	12 00                	adc    al,BYTE PTR [eax]
9f007c5e:	01 00                	add    DWORD PTR [eax],eax
9f007c60:	86 00                	xchg   BYTE PTR [eax],al
9f007c62:	00 00                	add    BYTE PTR [eax],al
9f007c64:	67 0b 00             	or     eax,DWORD PTR [bx+si]
9f007c67:	9f                   	lahf   
9f007c68:	93                   	xchg   ebx,eax
9f007c69:	00 00                	add    BYTE PTR [eax],al
9f007c6b:	00 12                	add    BYTE PTR [edx],dl
9f007c6d:	00 01                	add    BYTE PTR [ecx],al
9f007c6f:	00 56 01             	add    BYTE PTR [esi+0x1],dl
9f007c72:	00 00                	add    BYTE PTR [eax],al
9f007c74:	f4                   	hlt    
9f007c75:	1c 00                	sbb    al,0x0
9f007c77:	9f                   	lahf   
9f007c78:	20 00                	and    BYTE PTR [eax],al
9f007c7a:	00 00                	add    BYTE PTR [eax],al
9f007c7c:	12 00                	adc    al,BYTE PTR [eax]
9f007c7e:	01 00                	add    DWORD PTR [eax],eax
9f007c80:	1c 00                	sbb    al,0x0
9f007c82:	00 00                	add    BYTE PTR [eax],al
9f007c84:	97                   	xchg   edi,eax
9f007c85:	04 00                	add    al,0x0
9f007c87:	9f                   	lahf   
9f007c88:	1a 00                	sbb    al,BYTE PTR [eax]
9f007c8a:	00 00                	add    BYTE PTR [eax],al
9f007c8c:	12 00                	adc    al,BYTE PTR [eax]
9f007c8e:	01 00                	add    DWORD PTR [eax],eax
9f007c90:	53                   	push   ebx
9f007c91:	00 00                	add    BYTE PTR [eax],al
9f007c93:	00 68 07             	add    BYTE PTR [eax+0x7],ch
9f007c96:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f007c9c:	12 00                	adc    al,BYTE PTR [eax]
9f007c9e:	01 00                	add    DWORD PTR [eax],eax
9f007ca0:	ba 00 00 00 d1       	mov    edx,0xd1000000
9f007ca5:	12 00                	adc    al,BYTE PTR [eax]
9f007ca7:	9f                   	lahf   
9f007ca8:	26 00 00             	add    BYTE PTR es:[eax],al
9f007cab:	00 12                	add    BYTE PTR [edx],dl
9f007cad:	00 01                	add    BYTE PTR [ecx],al
9f007caf:	00 76 01             	add    BYTE PTR [esi+0x1],dh
9f007cb2:	00 00                	add    BYTE PTR [eax],al
9f007cb4:	b8 21 00 9f 23       	mov    eax,0x239f0021
9f007cb9:	00 00                	add    BYTE PTR [eax],al
9f007cbb:	00 12                	add    BYTE PTR [edx],dl
9f007cbd:	00 01                	add    BYTE PTR [ecx],al
9f007cbf:	00 06                	add    BYTE PTR [esi],al
9f007cc1:	02 00                	add    al,BYTE PTR [eax]
9f007cc3:	00 51 4c             	add    BYTE PTR [ecx+0x4c],dl
9f007cc6:	00 9f 1a 00 00 00    	add    BYTE PTR [edi+0x1a],bl
9f007ccc:	12 00                	adc    al,BYTE PTR [eax]
9f007cce:	01 00                	add    DWORD PTR [eax],eax
9f007cd0:	89 00                	mov    DWORD PTR [eax],eax
9f007cd2:	00 00                	add    BYTE PTR [eax],al
9f007cd4:	eb 0a                	jmp    9f007ce0 <__x86.get_pc_thunk.cx+0x1afc>
9f007cd6:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f007cdc:	12 00                	adc    al,BYTE PTR [eax]
9f007cde:	01 00                	add    DWORD PTR [eax],eax
9f007ce0:	2a 00                	sub    al,BYTE PTR [eax]
9f007ce2:	00 00                	add    BYTE PTR [eax],al
9f007ce4:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007ce5:	05 00 9f 5a 00       	add    eax,0x5a9f00
9f007cea:	00 00                	add    BYTE PTR [eax],al
9f007cec:	12 00                	adc    al,BYTE PTR [eax]
9f007cee:	01 00                	add    DWORD PTR [eax],eax
9f007cf0:	48                   	dec    eax
9f007cf1:	01 00                	add    DWORD PTR [eax],eax
9f007cf3:	00 89 1c 00 9f 4f    	add    BYTE PTR [ecx+0x4f9f001c],cl
9f007cf9:	00 00                	add    BYTE PTR [eax],al
9f007cfb:	00 12                	add    BYTE PTR [edx],dl
9f007cfd:	00 01                	add    BYTE PTR [ecx],al
9f007cff:	00 01                	add    BYTE PTR [ecx],al
9f007d01:	00 00                	add    BYTE PTR [eax],al
9f007d03:	00 00                	add    BYTE PTR [eax],al
9f007d05:	00 00                	add    BYTE PTR [eax],al
9f007d07:	9f                   	lahf   
9f007d08:	38 00                	cmp    BYTE PTR [eax],al
9f007d0a:	00 00                	add    BYTE PTR [eax],al
9f007d0c:	12 00                	adc    al,BYTE PTR [eax]
9f007d0e:	01 00                	add    DWORD PTR [eax],eax
9f007d10:	6c                   	ins    BYTE PTR es:[edi],dx
9f007d11:	02 00                	add    al,BYTE PTR [eax]
9f007d13:	00 a0 4f 00 9f 1d    	add    BYTE PTR [eax+0x1d9f004f],ah
9f007d19:	00 00                	add    BYTE PTR [eax],al
9f007d1b:	00 12                	add    BYTE PTR [edx],dl
9f007d1d:	00 01                	add    BYTE PTR [ecx],al
9f007d1f:	00 83 02 00 00 32    	add    BYTE PTR [ebx+0x32000002],al
9f007d25:	53                   	push   ebx
9f007d26:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
9f007d2c:	12 00                	adc    al,BYTE PTR [eax]
9f007d2e:	01 00                	add    DWORD PTR [eax],eax
9f007d30:	8e 00                	mov    es,WORD PTR [eax]
9f007d32:	00 00                	add    BYTE PTR [eax],al
9f007d34:	24 0c                	and    al,0xc
9f007d36:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f007d3c:	12 00                	adc    al,BYTE PTR [eax]
9f007d3e:	01 00                	add    DWORD PTR [eax],eax
9f007d40:	21 00                	and    DWORD PTR [eax],eax
9f007d42:	00 00                	add    BYTE PTR [eax],al
9f007d44:	b4 04                	mov    ah,0x4
9f007d46:	00 9f ba 00 00 00    	add    BYTE PTR [edi+0xba],bl
9f007d4c:	12 00                	adc    al,BYTE PTR [eax]
9f007d4e:	01 00                	add    DWORD PTR [eax],eax
9f007d50:	c1 01 00             	rol    DWORD PTR [ecx],0x0
9f007d53:	00 fb                	add    bl,bh
9f007d55:	28 00                	sub    BYTE PTR [eax],al
9f007d57:	9f                   	lahf   
9f007d58:	21 00                	and    DWORD PTR [eax],eax
9f007d5a:	00 00                	add    BYTE PTR [eax],al
9f007d5c:	12 00                	adc    al,BYTE PTR [eax]
9f007d5e:	01 00                	add    DWORD PTR [eax],eax

Disassembly of section .dynstr:

9f007d60 <.dynstr>:
9f007d60:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007d63:	72 63                	jb     9f007dc8 <__x86.get_pc_thunk.cx+0x1be4>
9f007d65:	68 72 00 73 74       	push   0x74730072
9f007d6a:	72 63                	jb     9f007dcf <__x86.get_pc_thunk.cx+0x1beb>
9f007d6c:	73 70                	jae    9f007dde <__x86.get_pc_thunk.cx+0x1bfa>
9f007d6e:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007d6f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007d72:	72 74                	jb     9f007de8 <__x86.get_pc_thunk.cx+0x1c04>
9f007d74:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007d75:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
9f007d78:	74 6f                	je     9f007de9 <__x86.get_pc_thunk.cx+0x1c05>
9f007d7a:	61                   	popa   
9f007d7b:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
9f007d7e:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007d7f:	69 00 6d 6f 76 65    	imul   eax,DWORD PTR [eax],0x65766f6d
9f007d85:	54                   	push   esp
9f007d86:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007d87:	58                   	pop    eax
9f007d88:	59                   	pop    ecx
9f007d89:	00 73 61             	add    BYTE PTR [ebx+0x61],dh
9f007d8c:	76 65                	jbe    9f007df3 <__x86.get_pc_thunk.cx+0x1c0f>
9f007d8e:	43                   	inc    ebx
9f007d8f:	75 72                	jne    9f007e03 <__x86.get_pc_thunk.cx+0x1c1f>
9f007d91:	73 6f                	jae    9f007e02 <__x86.get_pc_thunk.cx+0x1c1e>
9f007d93:	72 50                	jb     9f007de5 <__x86.get_pc_thunk.cx+0x1c01>
9f007d95:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007d96:	73 69                	jae    9f007e01 <__x86.get_pc_thunk.cx+0x1c1d>
9f007d98:	74 69                	je     9f007e03 <__x86.get_pc_thunk.cx+0x1c1f>
9f007d9a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007d9b:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007d9c:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f007d9f:	73 74                	jae    9f007e15 <__x86.get_pc_thunk.cx+0x1c31>
9f007da1:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007da2:	72 65                	jb     9f007e09 <__x86.get_pc_thunk.cx+0x1c25>
9f007da4:	43                   	inc    ebx
9f007da5:	75 72                	jne    9f007e19 <__x86.get_pc_thunk.cx+0x1c35>
9f007da7:	73 6f                	jae    9f007e18 <__x86.get_pc_thunk.cx+0x1c34>
9f007da9:	72 50                	jb     9f007dfb <__x86.get_pc_thunk.cx+0x1c17>
9f007dab:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007dac:	73 69                	jae    9f007e17 <__x86.get_pc_thunk.cx+0x1c33>
9f007dae:	74 69                	je     9f007e19 <__x86.get_pc_thunk.cx+0x1c35>
9f007db0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007db1:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007db2:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f007db5:	73 6f                	jae    9f007e26 <__x86.get_pc_thunk.cx+0x1c42>
9f007db7:	6c                   	ins    BYTE PTR es:[edi],dx
9f007db8:	76 65                	jbe    9f007e1f <__x86.get_pc_thunk.cx+0x1c3b>
9f007dba:	45                   	inc    ebp
9f007dbb:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007dbc:	76 56                	jbe    9f007e14 <__x86.get_pc_thunk.cx+0x1c30>
9f007dbe:	61                   	popa   
9f007dbf:	72 73                	jb     9f007e34 <__x86.get_pc_thunk.cx+0x1c50>
9f007dc1:	49                   	dec    ecx
9f007dc2:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007dc3:	53                   	push   ebx
9f007dc4:	74 72                	je     9f007e38 <__x86.get_pc_thunk.cx+0x1c54>
9f007dc6:	69 6e 67 00 67 65 74 	imul   ebp,DWORD PTR [esi+0x67],0x74656700
9f007dcd:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f007dcf:	76 00                	jbe    9f007dd1 <__x86.get_pc_thunk.cx+0x1bed>
9f007dd1:	73 65                	jae    9f007e38 <__x86.get_pc_thunk.cx+0x1c54>
9f007dd3:	74 65                	je     9f007e3a <__x86.get_pc_thunk.cx+0x1c56>
9f007dd5:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007dd6:	76 00                	jbe    9f007dd8 <__x86.get_pc_thunk.cx+0x1bf4>
9f007dd8:	67                   	addr16
9f007dd9:	65                   	gs
9f007dda:	74 63                	je     9f007e3f <__x86.get_pc_thunk.cx+0x1c5b>
9f007ddc:	77 64                	ja     9f007e42 <__x86.get_pc_thunk.cx+0x1c5e>
9f007dde:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f007de1:	74 64                	je     9f007e47 <__x86.get_pc_thunk.cx+0x1c63>
9f007de3:	69 72 00 66 72 65 6f 	imul   esi,DWORD PTR [edx+0x0],0x6f657266
9f007dea:	70 65                	jo     9f007e51 <__x86.get_pc_thunk.cx+0x1c6d>
9f007dec:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007ded:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
9f007df0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007df1:	73 65                	jae    9f007e58 <__x86.get_pc_thunk.cx+0x1c74>
9f007df3:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f007df6:	61                   	popa   
9f007df7:	64 00 77 72          	add    BYTE PTR fs:[edi+0x72],dh
9f007dfb:	69 74 65 00 73 65 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x6b656573
9f007e02:	6b 
9f007e03:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007e06:	61                   	popa   
9f007e07:	74 00                	je     9f007e09 <__x86.get_pc_thunk.cx+0x1c25>
9f007e09:	72 65                	jb     9f007e70 <__x86.get_pc_thunk.cx+0x1c8c>
9f007e0b:	73 6f                	jae    9f007e7c <__x86.get_pc_thunk.cx+0x1c98>
9f007e0d:	6c                   	ins    BYTE PTR es:[edi],dx
9f007e0e:	76 65                	jbe    9f007e75 <__x86.get_pc_thunk.cx+0x1c91>
9f007e10:	50                   	push   eax
9f007e11:	61                   	popa   
9f007e12:	74 68                	je     9f007e7c <__x86.get_pc_thunk.cx+0x1c98>
9f007e14:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
9f007e18:	6c                   	ins    BYTE PTR es:[edi],dx
9f007e19:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f007e1c:	74 6c                	je     9f007e8a <__x86.get_pc_thunk.cx+0x1ca6>
9f007e1e:	69 6e 65 00 75 6e 6c 	imul   ebp,DWORD PTR [esi+0x65],0x6c6e7500
9f007e25:	69 6e 6b 00 70 75 74 	imul   ebp,DWORD PTR [esi+0x6b],0x74757000
9f007e2c:	73 00                	jae    9f007e2e <__x86.get_pc_thunk.cx+0x1c4a>
9f007e2e:	73 79                	jae    9f007ea9 <__x86.get_pc_thunk.cx+0x1cc5>
9f007e30:	73 45                	jae    9f007e77 <__x86.get_pc_thunk.cx+0x1c93>
9f007e32:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007e33:	74 65                	je     9f007e9a <__x86.get_pc_thunk.cx+0x1cb6>
9f007e35:	72 5f                	jb     9f007e96 <__x86.get_pc_thunk.cx+0x1cb2>
9f007e37:	56                   	push   esi
9f007e38:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
9f007e3d:	00 70 75             	add    BYTE PTR [eax+0x75],dh
9f007e40:	74 63                	je     9f007ea5 <__x86.get_pc_thunk.cx+0x1cc1>
9f007e42:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f007e45:	74 63                	je     9f007eaa <__x86.get_pc_thunk.cx+0x1cc6>
9f007e47:	68 61 72 00 67       	push   0x67007261
9f007e4c:	65                   	gs
9f007e4d:	74 73                	je     9f007ec2 <__x86.get_pc_thunk.cx+0x1cde>
9f007e4f:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f007e53:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
9f007e56:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007e57:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
9f007e5e:	74 
9f007e5f:	00 70 72             	add    BYTE PTR [eax+0x72],dh
9f007e62:	69 6e 74 64 00 73 6c 	imul   ebp,DWORD PTR [esi+0x74],0x6c730064
9f007e69:	65                   	gs
9f007e6a:	65                   	gs
9f007e6b:	70 4d                	jo     9f007eba <__x86.get_pc_thunk.cx+0x1cd6>
9f007e6d:	53                   	push   ebx
9f007e6e:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
9f007e71:	65                   	gs
9f007e72:	65                   	gs
9f007e73:	70 00                	jo     9f007e75 <__x86.get_pc_thunk.cx+0x1c91>
9f007e75:	73 6c                	jae    9f007ee3 <__x86.get_pc_thunk.cx+0x1cff>
9f007e77:	65                   	gs
9f007e78:	65                   	gs
9f007e79:	70 54                	jo     9f007ecf <__x86.get_pc_thunk.cx+0x1ceb>
9f007e7b:	69 63 6b 73 00 6d 6f 	imul   esp,DWORD PTR [ebx+0x6b],0x6f6d0073
9f007e82:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
9f007e89:	6e 
9f007e8a:	61                   	popa   
9f007e8b:	6c                   	ins    BYTE PTR es:[edi],dx
9f007e8c:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
9f007e8f:	67 6e                	outs   dx,BYTE PTR ds:[si]
9f007e91:	61                   	popa   
9f007e92:	6c                   	ins    BYTE PTR es:[edi],dx
9f007e93:	54                   	push   esp
9f007e94:	61                   	popa   
9f007e95:	73 6b                	jae    9f007f02 <__x86.get_pc_thunk.cx+0x1d1e>
9f007e97:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
9f007e9a:	72 6b                	jb     9f007f07 <__x86.get_pc_thunk.cx+0x1d23>
9f007e9c:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
9f007e9f:	65 63 00             	arpl   WORD PTR gs:[eax],ax
9f007ea2:	65                   	gs
9f007ea3:	78 65                	js     9f007f0a <__x86.get_pc_thunk.cx+0x1d26>
9f007ea5:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
9f007ea8:	65                   	gs
9f007ea9:	78 65                	js     9f007f10 <__x86.get_pc_thunk.cx+0x1d2c>
9f007eab:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
9f007eae:	77 61                	ja     9f007f11 <__x86.get_pc_thunk.cx+0x1d2d>
9f007eb0:	69 74 70 69 64 00 65 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x78650064
9f007eb7:	78 
9f007eb8:	69 74 00 73 65 74 63 	imul   esi,DWORD PTR [eax+eax*1+0x73],0x77637465
9f007ebf:	77 
9f007ec0:	64 00 73 70          	add    BYTE PTR fs:[ebx+0x70],dh
9f007ec4:	6c                   	ins    BYTE PTR es:[edi],dx
9f007ec5:	69 74 00 63 6d 64 6c 	imul   esi,DWORD PTR [eax+eax*1+0x63],0x696c646d
9f007ecc:	69 
9f007ecd:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007ece:	65                   	gs
9f007ecf:	54                   	push   esp
9f007ed0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007ed1:	41                   	inc    ecx
9f007ed2:	72 67                	jb     9f007f3b <__x86.get_pc_thunk.cx+0x1d57>
9f007ed4:	76 00                	jbe    9f007ed6 <__x86.get_pc_thunk.cx+0x1cf2>
9f007ed6:	73 65                	jae    9f007f3d <__x86.get_pc_thunk.cx+0x1d59>
9f007ed8:	74 53                	je     9f007f2d <__x86.get_pc_thunk.cx+0x1d49>
9f007eda:	54                   	push   esp
9f007edb:	44                   	inc    esp
9f007edc:	00 74 61 6b          	add    BYTE PTR [ecx+eiz*2+0x6b],dh
9f007ee0:	65                   	gs
9f007ee1:	41                   	inc    ecx
9f007ee2:	44                   	inc    esp
9f007ee3:	75 6d                	jne    9f007f52 <__x86.get_pc_thunk.cx+0x1d6e>
9f007ee5:	70 00                	jo     9f007ee7 <__x86.get_pc_thunk.cx+0x1d03>
9f007ee7:	73 65                	jae    9f007f4e <__x86.get_pc_thunk.cx+0x1d6a>
9f007ee9:	74 70                	je     9f007f5b <__x86.get_pc_thunk.cx+0x1d77>
9f007eeb:	72 69                	jb     9f007f56 <__x86.get_pc_thunk.cx+0x1d72>
9f007eed:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007eee:	72 69                	jb     9f007f59 <__x86.get_pc_thunk.cx+0x1d75>
9f007ef0:	74 79                	je     9f007f6b <__x86.get_pc_thunk.cx+0x1d87>
9f007ef2:	00 6d 6d             	add    BYTE PTR [ebp+0x6d],ch
9f007ef5:	61                   	popa   
9f007ef6:	70 00                	jo     9f007ef8 <__x86.get_pc_thunk.cx+0x1d14>
9f007ef8:	68 65 61 70 42       	push   0x42706165
9f007efd:	61                   	popa   
9f007efe:	73 65                	jae    9f007f65 <__x86.get_pc_thunk.cx+0x1d81>
9f007f00:	00 68 65             	add    BYTE PTR [eax+0x65],ch
9f007f03:	61                   	popa   
9f007f04:	70 43                	jo     9f007f49 <__x86.get_pc_thunk.cx+0x1d65>
9f007f06:	75 72                	jne    9f007f7a <__x86.get_pc_thunk.cx+0x1d96>
9f007f08:	72 00                	jb     9f007f0a <__x86.get_pc_thunk.cx+0x1d26>
9f007f0a:	68 65 61 70 45       	push   0x45706165
9f007f0f:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007f10:	64 00 6d 61          	add    BYTE PTR fs:[ebp+0x61],ch
9f007f14:	6c                   	ins    BYTE PTR es:[edi],dx
9f007f15:	6c                   	ins    BYTE PTR es:[edi],dx
9f007f16:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007f17:	63 00                	arpl   WORD PTR [eax],ax
9f007f19:	72 65                	jb     9f007f80 <__x86.get_pc_thunk.cx+0x1d9c>
9f007f1b:	61                   	popa   
9f007f1c:	6c                   	ins    BYTE PTR es:[edi],dx
9f007f1d:	6c                   	ins    BYTE PTR es:[edi],dx
9f007f1e:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007f1f:	63 00                	arpl   WORD PTR [eax],ax
9f007f21:	66                   	data16
9f007f22:	72 65                	jb     9f007f89 <__x86.get_pc_thunk.cx+0x1da5>
9f007f24:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
9f007f28:	6d                   	ins    DWORD PTR es:[edi],dx
9f007f29:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f007f2c:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
9f007f2f:	6d                   	ins    DWORD PTR es:[edi],dx
9f007f30:	73 65                	jae    9f007f97 <__x86.get_pc_thunk.cx+0x1db3>
9f007f32:	74 00                	je     9f007f34 <__x86.get_pc_thunk.cx+0x1d50>
9f007f34:	5f                   	pop    edi
9f007f35:	6d                   	ins    DWORD PTR es:[edi],dx
9f007f36:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007f37:	64                   	fs
9f007f38:	66                   	data16
9f007f39:	00 70 69             	add    BYTE PTR [eax+0x69],dh
9f007f3c:	70 65                	jo     9f007fa3 <__x86.get_pc_thunk.cx+0x1dbf>
9f007f3e:	00 64 75 70          	add    BYTE PTR [ebp+esi*2+0x70],ah
9f007f42:	33 00                	xor    eax,DWORD PTR [eax]
9f007f44:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
9f007f47:	6c                   	ins    BYTE PTR es:[edi],dx
9f007f48:	64                   	fs
9f007f49:	50                   	push   eax
9f007f4a:	72 6f                	jb     9f007fbb <__x86.get_pc_thunk.cx+0x1dd7>
9f007f4c:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
9f007f4f:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f007f51:	54                   	push   esp
9f007f52:	00 62 75             	add    BYTE PTR [edx+0x75],ah
9f007f55:	69 6c 64 41 6c 6c 50 	imul   ebp,DWORD PTR [esp+eiz*2+0x41],0x72506c6c
9f007f5c:	72 
9f007f5d:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007f5e:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
9f007f61:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f007f63:	54                   	push   esp
9f007f64:	73 00                	jae    9f007f66 <__x86.get_pc_thunk.cx+0x1d82>
9f007f66:	73 74                	jae    9f007fdc <__x86.get_pc_thunk.cx+0x1df8>
9f007f68:	72 6c                	jb     9f007fd6 <__x86.get_pc_thunk.cx+0x1df2>
9f007f6a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f007f6c:	00 73 70             	add    BYTE PTR [ebx+0x70],dh
9f007f6f:	72 69                	jb     9f007fda <__x86.get_pc_thunk.cx+0x1df6>
9f007f71:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007f72:	74 66                	je     9f007fda <__x86.get_pc_thunk.cx+0x1df6>
9f007f74:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f007f77:	73 65                	jae    9f007fde <__x86.get_pc_thunk.cx+0x1dfa>
9f007f79:	74 52                	je     9f007fcd <__x86.get_pc_thunk.cx+0x1de9>
9f007f7b:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007f7c:	77 00                	ja     9f007f7e <__x86.get_pc_thunk.cx+0x1d9a>
9f007f7e:	73 74                	jae    9f007ff4 <__x86.get_pc_thunk.cx+0x1e10>
9f007f80:	72 63                	jb     9f007fe5 <__x86.get_pc_thunk.cx+0x1e01>
9f007f82:	61                   	popa   
9f007f83:	74 00                	je     9f007f85 <__x86.get_pc_thunk.cx+0x1da1>
9f007f85:	73 74                	jae    9f007ffb <__x86.get_pc_thunk.cx+0x1e17>
9f007f87:	72 6e                	jb     9f007ff7 <__x86.get_pc_thunk.cx+0x1e13>
9f007f89:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
9f007f8c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007f8f:	72 63                	jb     9f007ff4 <__x86.get_pc_thunk.cx+0x1e10>
9f007f91:	6d                   	ins    DWORD PTR es:[edi],dx
9f007f92:	70 00                	jo     9f007f94 <__x86.get_pc_thunk.cx+0x1db0>
9f007f94:	73 74                	jae    9f00800a <__x86.get_pc_thunk.cx+0x1e26>
9f007f96:	72 63                	jb     9f007ffb <__x86.get_pc_thunk.cx+0x1e17>
9f007f98:	70 79                	jo     9f008013 <__x86.get_pc_thunk.cx+0x1e2f>
9f007f9a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007f9d:	72 63                	jb     9f008002 <__x86.get_pc_thunk.cx+0x1e1e>
9f007f9f:	70 79                	jo     9f00801a <__x86.get_pc_thunk.cx+0x1e36>
9f007fa1:	63 00                	arpl   WORD PTR [eax],ax
9f007fa3:	73 74                	jae    9f008019 <__x86.get_pc_thunk.cx+0x1e35>
9f007fa5:	72 69                	jb     9f008010 <__x86.get_pc_thunk.cx+0x1e2c>
9f007fa7:	73 6e                	jae    9f008017 <__x86.get_pc_thunk.cx+0x1e33>
9f007fa9:	75 6d                	jne    9f008018 <__x86.get_pc_thunk.cx+0x1e34>
9f007fab:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007fae:	72 6e                	jb     9f00801e <__x86.get_pc_thunk.cx+0x1e3a>
9f007fb0:	6c                   	ins    BYTE PTR es:[edi],dx
9f007fb1:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f007fb3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007fb6:	72 6e                	jb     9f008026 <__x86.get_pc_thunk.cx+0x1e42>
9f007fb8:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
9f007fbb:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007fbe:	72 6e                	jb     9f00802e <__x86.get_pc_thunk.cx+0x1e4a>
9f007fc0:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f007fc3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007fc6:	72 74                	jb     9f00803c <__x86.get_pc_thunk.cx+0x1e58>
9f007fc8:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007fc9:	75 6c                	jne    9f008037 <__x86.get_pc_thunk.cx+0x1e53>
9f007fcb:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007fce:	72 6c                	jb     9f00803c <__x86.get_pc_thunk.cx+0x1e58>
9f007fd0:	65                   	gs
9f007fd1:	66                   	data16
9f007fd2:	74 00                	je     9f007fd4 <__x86.get_pc_thunk.cx+0x1df0>
9f007fd4:	73 74                	jae    9f00804a <__x86.get_pc_thunk.cx+0x1e66>
9f007fd6:	72 74                	jb     9f00804c <__x86.get_pc_thunk.cx+0x1e68>
9f007fd8:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007fd9:	6c                   	ins    BYTE PTR es:[edi],dx
9f007fda:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007fdd:	72 74                	jb     9f008053 <__x86.get_pc_thunk.cx+0x1e6f>
9f007fdf:	72 69                	jb     9f00804a <__x86.get_pc_thunk.cx+0x1e66>
9f007fe1:	6d                   	ins    DWORD PTR es:[edi],dx
9f007fe2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007fe5:	72 72                	jb     9f008059 <__x86.get_pc_thunk.cx+0x1e75>
9f007fe7:	65                   	gs
9f007fe8:	70 6c                	jo     9f008056 <__x86.get_pc_thunk.cx+0x1e72>
9f007fea:	61                   	popa   
9f007feb:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
9f007fee:	73 74                	jae    9f008064 <__x86.get_pc_thunk.cx+0x1e80>
9f007ff0:	72 73                	jb     9f008065 <__x86.get_pc_thunk.cx+0x1e81>
9f007ff2:	74 72                	je     9f008066 <__x86.get_pc_thunk.cx+0x1e82>
9f007ff4:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f007ff8:	63 54 5a 00          	arpl   WORD PTR [edx+ebx*2+0x0],dx
9f007ffc:	67                   	addr16
9f007ffd:	65                   	gs
9f007ffe:	74 74                	je     9f008074 <__x86.get_pc_thunk.cx+0x1e90>
9f008000:	69 63 6b 73 00 67 6d 	imul   esp,DWORD PTR [ebx+0x6b],0x6d670073
9f008007:	74 69                	je     9f008072 <__x86.get_pc_thunk.cx+0x1e8e>
9f008009:	6d                   	ins    DWORD PTR es:[edi],dx
9f00800a:	65                   	gs
9f00800b:	5f                   	pop    edi
9f00800c:	72 00                	jb     9f00800e <__x86.get_pc_thunk.cx+0x1e2a>
9f00800e:	6c                   	ins    BYTE PTR es:[edi],dx
9f00800f:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008010:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f008013:	74 69                	je     9f00807e <__x86.get_pc_thunk.cx+0x1e9a>
9f008015:	6d                   	ins    DWORD PTR es:[edi],dx
9f008016:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
9f00801b:	61                   	popa   
9f00801c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00801d:	74 69                	je     9f008088 <__x86.get_pc_thunk.cx+0x1ea4>
9f00801f:	6d                   	ins    DWORD PTR es:[edi],dx
9f008020:	65                   	gs
9f008021:	5f                   	pop    edi
9f008022:	72 00                	jb     9f008024 <__x86.get_pc_thunk.cx+0x1e40>
9f008024:	6d                   	ins    DWORD PTR es:[edi],dx
9f008025:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
9f00802a:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f00802d:	74 74                	je     9f0080a3 <__x86.get_pc_thunk.cx+0x1ebf>
9f00802f:	69                   	.byte 0x69
9f008030:	6d                   	ins    DWORD PTR es:[edi],dx
9f008031:	65                   	gs
	...

Disassembly of section .hash:

9f008034 <.hash>:
9f008034:	43                   	inc    ebx
9f008035:	00 00                	add    BYTE PTR [eax],al
9f008037:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
	...
9f008047:	00 22                	add    BYTE PTR [edx],ah
9f008049:	00 00                	add    BYTE PTR [eax],al
9f00804b:	00 56 00             	add    BYTE PTR [esi+0x0],dl
9f00804e:	00 00                	add    BYTE PTR [eax],al
9f008050:	49                   	dec    ecx
9f008051:	00 00                	add    BYTE PTR [eax],al
9f008053:	00 48 00             	add    BYTE PTR [eax+0x0],cl
9f008056:	00 00                	add    BYTE PTR [eax],al
9f008058:	20 00                	and    BYTE PTR [eax],al
9f00805a:	00 00                	add    BYTE PTR [eax],al
9f00805c:	19 00                	sbb    DWORD PTR [eax],eax
9f00805e:	00 00                	add    BYTE PTR [eax],al
9f008060:	00 00                	add    BYTE PTR [eax],al
9f008062:	00 00                	add    BYTE PTR [eax],al
9f008064:	15 00 00 00 2d       	adc    eax,0x2d000000
9f008069:	00 00                	add    BYTE PTR [eax],al
9f00806b:	00 4f 00             	add    BYTE PTR [edi+0x0],cl
9f00806e:	00 00                	add    BYTE PTR [eax],al
9f008070:	55                   	push   ebp
9f008071:	00 00                	add    BYTE PTR [eax],al
9f008073:	00 1e                	add    BYTE PTR [esi],bl
9f008075:	00 00                	add    BYTE PTR [eax],al
9f008077:	00 40 00             	add    BYTE PTR [eax+0x0],al
9f00807a:	00 00                	add    BYTE PTR [eax],al
9f00807c:	00 00                	add    BYTE PTR [eax],al
9f00807e:	00 00                	add    BYTE PTR [eax],al
9f008080:	2c 00                	sub    al,0x0
9f008082:	00 00                	add    BYTE PTR [eax],al
9f008084:	3f                   	aas    
9f008085:	00 00                	add    BYTE PTR [eax],al
9f008087:	00 16                	add    BYTE PTR [esi],dl
9f008089:	00 00                	add    BYTE PTR [eax],al
9f00808b:	00 00                	add    BYTE PTR [eax],al
9f00808d:	00 00                	add    BYTE PTR [eax],al
9f00808f:	00 3d 00 00 00 4e    	add    BYTE PTR ds:0x4e000000,bh
9f008095:	00 00                	add    BYTE PTR [eax],al
9f008097:	00 09                	add    BYTE PTR [ecx],cl
9f008099:	00 00                	add    BYTE PTR [eax],al
9f00809b:	00 39                	add    BYTE PTR [ecx],bh
9f00809d:	00 00                	add    BYTE PTR [eax],al
9f00809f:	00 59 00             	add    BYTE PTR [ecx+0x0],bl
9f0080a2:	00 00                	add    BYTE PTR [eax],al
9f0080a4:	2f                   	das    
9f0080a5:	00 00                	add    BYTE PTR [eax],al
9f0080a7:	00 00                	add    BYTE PTR [eax],al
9f0080a9:	00 00                	add    BYTE PTR [eax],al
9f0080ab:	00 47 00             	add    BYTE PTR [edi+0x0],al
9f0080ae:	00 00                	add    BYTE PTR [eax],al
9f0080b0:	00 00                	add    BYTE PTR [eax],al
9f0080b2:	00 00                	add    BYTE PTR [eax],al
9f0080b4:	57                   	push   edi
9f0080b5:	00 00                	add    BYTE PTR [eax],al
9f0080b7:	00 42 00             	add    BYTE PTR [edx+0x0],al
9f0080ba:	00 00                	add    BYTE PTR [eax],al
9f0080bc:	1f                   	pop    ds
9f0080bd:	00 00                	add    BYTE PTR [eax],al
9f0080bf:	00 51 00             	add    BYTE PTR [ecx+0x0],dl
9f0080c2:	00 00                	add    BYTE PTR [eax],al
9f0080c4:	1b 00                	sbb    eax,DWORD PTR [eax]
9f0080c6:	00 00                	add    BYTE PTR [eax],al
9f0080c8:	37                   	aaa    
9f0080c9:	00 00                	add    BYTE PTR [eax],al
9f0080cb:	00 00                	add    BYTE PTR [eax],al
9f0080cd:	00 00                	add    BYTE PTR [eax],al
9f0080cf:	00 45 00             	add    BYTE PTR [ebp+0x0],al
9f0080d2:	00 00                	add    BYTE PTR [eax],al
9f0080d4:	4a                   	dec    edx
9f0080d5:	00 00                	add    BYTE PTR [eax],al
9f0080d7:	00 32                	add    BYTE PTR [edx],dh
9f0080d9:	00 00                	add    BYTE PTR [eax],al
9f0080db:	00 46 00             	add    BYTE PTR [esi+0x0],al
9f0080de:	00 00                	add    BYTE PTR [eax],al
9f0080e0:	53                   	push   ebx
9f0080e1:	00 00                	add    BYTE PTR [eax],al
9f0080e3:	00 5a 00             	add    BYTE PTR [edx+0x0],bl
9f0080e6:	00 00                	add    BYTE PTR [eax],al
9f0080e8:	33 00                	xor    eax,DWORD PTR [eax]
9f0080ea:	00 00                	add    BYTE PTR [eax],al
9f0080ec:	54                   	push   esp
9f0080ed:	00 00                	add    BYTE PTR [eax],al
9f0080ef:	00 52 00             	add    BYTE PTR [edx+0x0],dl
	...
9f008106:	00 00                	add    BYTE PTR [eax],al
9f008108:	4b                   	dec    ebx
	...
9f008111:	00 00                	add    BYTE PTR [eax],al
9f008113:	00 41 00             	add    BYTE PTR [ecx+0x0],al
9f008116:	00 00                	add    BYTE PTR [eax],al
9f008118:	35 00 00 00 0f       	xor    eax,0xf000000
9f00811d:	00 00                	add    BYTE PTR [eax],al
9f00811f:	00 3b                	add    BYTE PTR [ebx],bh
9f008121:	00 00                	add    BYTE PTR [eax],al
9f008123:	00 00                	add    BYTE PTR [eax],al
9f008125:	00 00                	add    BYTE PTR [eax],al
9f008127:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
9f00812a:	00 00                	add    BYTE PTR [eax],al
9f00812c:	23 00                	and    eax,DWORD PTR [eax]
9f00812e:	00 00                	add    BYTE PTR [eax],al
9f008130:	5b                   	pop    ebx
9f008131:	00 00                	add    BYTE PTR [eax],al
9f008133:	00 12                	add    BYTE PTR [edx],dl
9f008135:	00 00                	add    BYTE PTR [eax],al
9f008137:	00 3c 00             	add    BYTE PTR [eax+eax*1],bh
9f00813a:	00 00                	add    BYTE PTR [eax],al
9f00813c:	18 00                	sbb    BYTE PTR [eax],al
9f00813e:	00 00                	add    BYTE PTR [eax],al
9f008140:	50                   	push   eax
9f008141:	00 00                	add    BYTE PTR [eax],al
9f008143:	00 0b                	add    BYTE PTR [ebx],cl
	...
9f008169:	00 00                	add    BYTE PTR [eax],al
9f00816b:	00 01                	add    BYTE PTR [ecx],al
	...
9f008175:	00 00                	add    BYTE PTR [eax],al
9f008177:	00 05 00 00 00 00    	add    BYTE PTR ds:0x0,al
9f00817d:	00 00                	add    BYTE PTR [eax],al
9f00817f:	00 0d 00 00 00 00    	add    BYTE PTR ds:0x0,cl
	...
9f008195:	00 00                	add    BYTE PTR [eax],al
9f008197:	00 02                	add    BYTE PTR [edx],al
	...
9f0081a1:	00 00                	add    BYTE PTR [eax],al
9f0081a3:	00 0a                	add    BYTE PTR [edx],cl
	...
9f0081b1:	00 00                	add    BYTE PTR [eax],al
9f0081b3:	00 11                	add    BYTE PTR [ecx],dl
	...
9f0081bd:	00 00                	add    BYTE PTR [eax],al
9f0081bf:	00 07                	add    BYTE PTR [edi],al
9f0081c1:	00 00                	add    BYTE PTR [eax],al
9f0081c3:	00 00                	add    BYTE PTR [eax],al
9f0081c5:	00 00                	add    BYTE PTR [eax],al
9f0081c7:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
9f0081ca:	00 00                	add    BYTE PTR [eax],al
9f0081cc:	00 00                	add    BYTE PTR [eax],al
9f0081ce:	00 00                	add    BYTE PTR [eax],al
9f0081d0:	06                   	push   es
9f0081d1:	00 00                	add    BYTE PTR [eax],al
9f0081d3:	00 00                	add    BYTE PTR [eax],al
9f0081d5:	00 00                	add    BYTE PTR [eax],al
9f0081d7:	00 0e                	add    BYTE PTR [esi],cl
9f0081d9:	00 00                	add    BYTE PTR [eax],al
9f0081db:	00 00                	add    BYTE PTR [eax],al
9f0081dd:	00 00                	add    BYTE PTR [eax],al
9f0081df:	00 10                	add    BYTE PTR [eax],dl
9f0081e1:	00 00                	add    BYTE PTR [eax],al
9f0081e3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0081e6:	00 00                	add    BYTE PTR [eax],al
9f0081e8:	08 00                	or     BYTE PTR [eax],al
9f0081ea:	00 00                	add    BYTE PTR [eax],al
9f0081ec:	00 00                	add    BYTE PTR [eax],al
9f0081ee:	00 00                	add    BYTE PTR [eax],al
9f0081f0:	25 00 00 00 00       	and    eax,0x0
9f0081f5:	00 00                	add    BYTE PTR [eax],al
9f0081f7:	00 00                	add    BYTE PTR [eax],al
9f0081f9:	00 00                	add    BYTE PTR [eax],al
9f0081fb:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0081fe:	00 00                	add    BYTE PTR [eax],al
9f008200:	28 00                	sub    BYTE PTR [eax],al
9f008202:	00 00                	add    BYTE PTR [eax],al
9f008204:	00 00                	add    BYTE PTR [eax],al
9f008206:	00 00                	add    BYTE PTR [eax],al
9f008208:	04 00                	add    al,0x0
9f00820a:	00 00                	add    BYTE PTR [eax],al
9f00820c:	00 00                	add    BYTE PTR [eax],al
9f00820e:	00 00                	add    BYTE PTR [eax],al
9f008210:	2e 00 00             	add    BYTE PTR cs:[eax],al
9f008213:	00 00                	add    BYTE PTR [eax],al
9f008215:	00 00                	add    BYTE PTR [eax],al
9f008217:	00 21                	add    BYTE PTR [ecx],ah
	...
9f008221:	00 00                	add    BYTE PTR [eax],al
9f008223:	00 31                	add    BYTE PTR [ecx],dh
	...
9f00822d:	00 00                	add    BYTE PTR [eax],al
9f00822f:	00 36                	add    BYTE PTR [esi],dh
	...
9f008239:	00 00                	add    BYTE PTR [eax],al
9f00823b:	00 2a                	add    BYTE PTR [edx],ch
9f00823d:	00 00                	add    BYTE PTR [eax],al
9f00823f:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
9f008242:	00 00                	add    BYTE PTR [eax],al
9f008244:	3a 00                	cmp    al,BYTE PTR [eax]
9f008246:	00 00                	add    BYTE PTR [eax],al
9f008248:	30 00                	xor    BYTE PTR [eax],al
9f00824a:	00 00                	add    BYTE PTR [eax],al
9f00824c:	00 00                	add    BYTE PTR [eax],al
9f00824e:	00 00                	add    BYTE PTR [eax],al
9f008250:	38 00                	cmp    BYTE PTR [eax],al
9f008252:	00 00                	add    BYTE PTR [eax],al
9f008254:	00 00                	add    BYTE PTR [eax],al
9f008256:	00 00                	add    BYTE PTR [eax],al
9f008258:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f00825b:	00 00                	add    BYTE PTR [eax],al
9f00825d:	00 00                	add    BYTE PTR [eax],al
9f00825f:	00 1a                	add    BYTE PTR [edx],bl
9f008261:	00 00                	add    BYTE PTR [eax],al
9f008263:	00 34 00             	add    BYTE PTR [eax+eax*1],dh
9f008266:	00 00                	add    BYTE PTR [eax],al
9f008268:	1d 00 00 00 44       	sbb    eax,0x44000000
9f00826d:	00 00                	add    BYTE PTR [eax],al
9f00826f:	00 17                	add    BYTE PTR [edi],dl
	...
9f008279:	00 00                	add    BYTE PTR [eax],al
9f00827b:	00 2b                	add    BYTE PTR [ebx],ch
	...
9f008289:	00 00                	add    BYTE PTR [eax],al
9f00828b:	00 27                	add    BYTE PTR [edi],ah
9f00828d:	00 00                	add    BYTE PTR [eax],al
9f00828f:	00 26                	add    BYTE PTR [esi],ah
9f008291:	00 00                	add    BYTE PTR [eax],al
9f008293:	00 00                	add    BYTE PTR [eax],al
9f008295:	00 00                	add    BYTE PTR [eax],al
9f008297:	00 4c 00 00          	add    BYTE PTR [eax+eax*1+0x0],cl
9f00829b:	00 03                	add    BYTE PTR [ebx],al
9f00829d:	00 00                	add    BYTE PTR [eax],al
9f00829f:	00 29                	add    BYTE PTR [ecx],ch
9f0082a1:	00 00                	add    BYTE PTR [eax],al
9f0082a3:	00 43 00             	add    BYTE PTR [ebx+0x0],al
9f0082a6:	00 00                	add    BYTE PTR [eax],al
9f0082a8:	00 00                	add    BYTE PTR [eax],al
9f0082aa:	00 00                	add    BYTE PTR [eax],al
9f0082ac:	13 00                	adc    eax,DWORD PTR [eax]
9f0082ae:	00 00                	add    BYTE PTR [eax],al
9f0082b0:	58                   	pop    eax
9f0082b1:	00 00                	add    BYTE PTR [eax],al
9f0082b3:	00 00                	add    BYTE PTR [eax],al
9f0082b5:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame:

9f0082b8 <.eh_frame>:
9f0082b8:	14 00                	adc    al,0x0
9f0082ba:	00 00                	add    BYTE PTR [eax],al
9f0082bc:	00 00                	add    BYTE PTR [eax],al
9f0082be:	00 00                	add    BYTE PTR [eax],al
9f0082c0:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f0082c3:	00 01                	add    BYTE PTR [ecx],al
9f0082c5:	7c 08                	jl     9f0082cf <__x86.get_pc_thunk.cx+0x20eb>
9f0082c7:	01 1b                	add    DWORD PTR [ebx],ebx
9f0082c9:	0c 04                	or     al,0x4
9f0082cb:	04 88                	add    al,0x88
9f0082cd:	01 00                	add    DWORD PTR [eax],eax
9f0082cf:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0082d2:	00 00                	add    BYTE PTR [eax],al
9f0082d4:	1c 00                	sbb    al,0x0
9f0082d6:	00 00                	add    BYTE PTR [eax],al
9f0082d8:	c8 de ff ff          	enter  0xffde,0xff
9f0082dc:	40                   	inc    eax
9f0082dd:	00 00                	add    BYTE PTR [eax],al
9f0082df:	00 00                	add    BYTE PTR [eax],al
9f0082e1:	0e                   	push   cs
9f0082e2:	08 46 0e             	or     BYTE PTR [esi+0xe],al
9f0082e5:	0c 4a                	or     al,0x4a
9f0082e7:	0f 0b                	ud2    
9f0082e9:	74 04                	je     9f0082ef <__x86.get_pc_thunk.cx+0x210b>
9f0082eb:	78 00                	js     9f0082ed <__x86.get_pc_thunk.cx+0x2109>
9f0082ed:	3f                   	aas    
9f0082ee:	1a 3b                	sbb    bh,BYTE PTR [ebx]
9f0082f0:	2a 32                	sub    dh,BYTE PTR [edx]
9f0082f2:	24 22                	and    al,0x22
9f0082f4:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame_hdr:

9f0082f8 <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
9f0082f8:	01 1b                	add    DWORD PTR [ebx],ebx
9f0082fa:	03 3b                	add    edi,DWORD PTR [ebx]
9f0082fc:	ec                   	in     al,dx
9f0082fd:	de ff                	fdivp  st(7),st
9f0082ff:	ff 9e 00 00 00 08    	call   FWORD PTR [esi+0x8000000]
9f008305:	7d ff                	jge    9f008306 <__GNU_EH_FRAME_HDR+0xe>
9f008307:	ff 08                	dec    DWORD PTR [eax]
9f008309:	df ff                	(bad)  
9f00830b:	ff 40 7d             	inc    DWORD PTR [eax+0x7d]
9f00830e:	ff                   	(bad)  
9f00830f:	ff 28                	jmp    FWORD PTR [eax]
9f008311:	df ff                	(bad)  
9f008313:	ff                   	(bad)  
9f008314:	78 7d                	js     9f008393 <__GNU_EH_FRAME_HDR+0x9b>
9f008316:	ff                   	(bad)  
9f008317:	ff 5c df ff          	call   FWORD PTR [edi+ebx*8-0x1]
9f00831b:	ff cd                	dec    ebp
9f00831d:	7d ff                	jge    9f00831e <__GNU_EH_FRAME_HDR+0x26>
9f00831f:	ff 84 df ff ff 24 7e 	inc    DWORD PTR [edi+ebx*8+0x7e24ffff]
9f008326:	ff                   	(bad)  
9f008327:	ff ac df ff ff bb 7e 	jmp    FWORD PTR [edi+ebx*8+0x7ebbffff]
9f00832e:	ff                   	(bad)  
9f00832f:	ff d4                	call   esp
9f008331:	df ff                	(bad)  
9f008333:	ff 54 7f ff          	call   DWORD PTR [edi+edi*2-0x1]
9f008337:	ff 10                	call   DWORD PTR [eax]
9f008339:	e0 ff                	loopne 9f00833a <__GNU_EH_FRAME_HDR+0x42>
9f00833b:	ff cb                	dec    ebx
9f00833d:	7f ff                	jg     9f00833e <__GNU_EH_FRAME_HDR+0x46>
9f00833f:	ff 34 e0             	push   DWORD PTR [eax+eiz*8]
9f008342:	ff                   	(bad)  
9f008343:	ff 86 80 ff ff 58    	inc    DWORD PTR [esi+0x58ffff80]
9f008349:	e0 ff                	loopne 9f00834a <__GNU_EH_FRAME_HDR+0x52>
9f00834b:	ff 43 81             	inc    DWORD PTR [ebx-0x7f]
9f00834e:	ff                   	(bad)  
9f00834f:	ff                   	(bad)  
9f008350:	7c e0                	jl     9f008332 <__GNU_EH_FRAME_HDR+0x3a>
9f008352:	ff                   	(bad)  
9f008353:	ff 9f 81 ff ff 9c    	call   FWORD PTR [edi-0x6300007f]
9f008359:	e0 ff                	loopne 9f00835a <__GNU_EH_FRAME_HDR+0x62>
9f00835b:	ff                   	(bad)  
9f00835c:	bc 81 ff ff bc       	mov    esp,0xbcffff81
9f008361:	e0 ff                	loopne 9f008362 <__GNU_EH_FRAME_HDR+0x6a>
9f008363:	ff 76 82             	push   DWORD PTR [esi-0x7e]
9f008366:	ff                   	(bad)  
9f008367:	ff e0                	jmp    eax
9f008369:	e0 ff                	loopne 9f00836a <__GNU_EH_FRAME_HDR+0x72>
9f00836b:	ff d0                	call   eax
9f00836d:	82                   	(bad)  
9f00836e:	ff                   	(bad)  
9f00836f:	ff 04 e1             	inc    DWORD PTR [ecx+eiz*8]
9f008372:	ff                   	(bad)  
9f008373:	ff 2c 83             	jmp    FWORD PTR [ebx+eax*4]
9f008376:	ff                   	(bad)  
9f008377:	ff 28                	jmp    FWORD PTR [eax]
9f008379:	e1 ff                	loope  9f00837a <__GNU_EH_FRAME_HDR+0x82>
9f00837b:	ff 70 84             	push   DWORD PTR [eax-0x7c]
9f00837e:	ff                   	(bad)  
9f00837f:	ff 54 e1 ff          	call   DWORD PTR [ecx+eiz*8-0x1]
9f008383:	ff 90 84 ff ff 74    	call   DWORD PTR [eax+0x74ffff84]
9f008389:	e1 ff                	loope  9f00838a <__GNU_EH_FRAME_HDR+0x92>
9f00838b:	ff                   	(bad)  
9f00838c:	3a 85 ff ff 98 e1    	cmp    al,BYTE PTR [ebp-0x1e670001]
9f008392:	ff                   	(bad)  
9f008393:	ff 5d 85             	call   FWORD PTR [ebp-0x7b]
9f008396:	ff                   	(bad)  
9f008397:	ff                   	(bad)  
9f008398:	b8 e1 ff ff 1e       	mov    eax,0x1effffe1
9f00839d:	87 ff                	xchg   edi,edi
9f00839f:	ff dc                	call   <internal disassembler error>
9f0083a1:	e1 ff                	loope  9f0083a2 <__GNU_EH_FRAME_HDR+0xaa>
9f0083a3:	ff 4a 87             	dec    DWORD PTR [edx-0x79]
9f0083a6:	ff                   	(bad)  
9f0083a7:	ff 00                	inc    DWORD PTR [eax]
9f0083a9:	e2 ff                	loop   9f0083aa <__GNU_EH_FRAME_HDR+0xb2>
9f0083ab:	ff 70 87             	push   DWORD PTR [eax-0x79]
9f0083ae:	ff                   	(bad)  
9f0083af:	ff 20                	jmp    DWORD PTR [eax]
9f0083b1:	e2 ff                	loop   9f0083b2 <__GNU_EH_FRAME_HDR+0xba>
9f0083b3:	ff a1 87 ff ff 44    	jmp    DWORD PTR [ecx+0x44ffff87]
9f0083b9:	e2 ff                	loop   9f0083ba <__GNU_EH_FRAME_HDR+0xc2>
9f0083bb:	ff c7                	inc    edi
9f0083bd:	87 ff                	xchg   edi,edi
9f0083bf:	ff 64 e2 ff          	jmp    DWORD PTR [edx+eiz*8-0x1]
9f0083c3:	ff f3                	push   ebx
9f0083c5:	87 ff                	xchg   edi,edi
9f0083c7:	ff 88 e2 ff ff 16    	dec    DWORD PTR [eax+0x16ffffe2]
9f0083cd:	88 ff                	mov    bh,bh
9f0083cf:	ff a8 e2 ff ff 6f    	jmp    FWORD PTR [eax+0x6fffffe2]
9f0083d5:	88 ff                	mov    bh,bh
9f0083d7:	ff cc                	dec    esp
9f0083d9:	e2 ff                	loop   9f0083da <__GNU_EH_FRAME_HDR+0xe2>
9f0083db:	ff 02                	inc    DWORD PTR [edx]
9f0083dd:	89 ff                	mov    edi,edi
9f0083df:	ff f4                	push   esp
9f0083e1:	e2 ff                	loop   9f0083e2 <__GNU_EH_FRAME_HDR+0xea>
9f0083e3:	ff 2c 89             	jmp    FWORD PTR [ecx+ecx*4]
9f0083e6:	ff                   	(bad)  
9f0083e7:	ff 18                	call   FWORD PTR [eax]
9f0083e9:	e3 ff                	jecxz  9f0083ea <__GNU_EH_FRAME_HDR+0xf2>
9f0083eb:	ff 4c 89 ff          	dec    DWORD PTR [ecx+ecx*4-0x1]
9f0083ef:	ff                   	(bad)  
9f0083f0:	38 e3                	cmp    bl,ah
9f0083f2:	ff                   	(bad)  
9f0083f3:	ff 81 89 ff ff 60    	inc    DWORD PTR [ecx+0x60ffff89]
9f0083f9:	e3 ff                	jecxz  9f0083fa <__GNU_EH_FRAME_HDR+0x102>
9f0083fb:	ff a7 89 ff ff 80    	jmp    DWORD PTR [edi-0x7f000077]
9f008401:	e3 ff                	jecxz  9f008402 <__GNU_EH_FRAME_HDR+0x10a>
9f008403:	ff dc                	call   <internal disassembler error>
9f008405:	89 ff                	mov    edi,edi
9f008407:	ff a8 e3 ff ff 02    	jmp    FWORD PTR [eax+0x2ffffe3]
9f00840d:	8a ff                	mov    bh,bh
9f00840f:	ff c8                	dec    eax
9f008411:	e3 ff                	jecxz  9f008412 <__GNU_EH_FRAME_HDR+0x11a>
9f008413:	ff 30                	push   DWORD PTR [eax]
9f008415:	8a ff                	mov    bh,bh
9f008417:	ff ec                	jmp    <internal disassembler error>
9f008419:	e3 ff                	jecxz  9f00841a <__GNU_EH_FRAME_HDR+0x122>
9f00841b:	ff 56 8a             	call   DWORD PTR [esi-0x76]
9f00841e:	ff                   	(bad)  
9f00841f:	ff 0c e4             	dec    DWORD PTR [esp+eiz*8]
9f008422:	ff                   	(bad)  
9f008423:	ff 83 8a ff ff 30    	inc    DWORD PTR [ebx+0x30ffff8a]
9f008429:	e4 ff                	in     al,0xff
9f00842b:	ff a6 8a ff ff 50    	jmp    DWORD PTR [esi+0x50ffff8a]
9f008431:	e4 ff                	in     al,0xff
9f008433:	ff cf                	dec    edi
9f008435:	8d                   	(bad)  
9f008436:	ff                   	(bad)  
9f008437:	ff 74 e4 ff          	push   DWORD PTR [esp+eiz*8-0x1]
9f00843b:	ff                   	(bad)  
9f00843c:	f8                   	clc    
9f00843d:	8d                   	(bad)  
9f00843e:	ff                   	(bad)  
9f00843f:	ff 98 e4 ff ff 18    	call   FWORD PTR [eax+0x18ffffe4]
9f008445:	8e ff                	mov    ?,edi
9f008447:	ff                   	(bad)  
9f008448:	b8 e4 ff ff d9       	mov    eax,0xd9ffffe4
9f00844d:	8f                   	(bad)  
9f00844e:	ff                   	(bad)  
9f00844f:	ff dc                	call   <internal disassembler error>
9f008451:	e4 ff                	in     al,0xff
9f008453:	ff                   	(bad)  
9f008454:	ff 8f ff ff fc e4    	dec    DWORD PTR [edi-0x1b030001]
9f00845a:	ff                   	(bad)  
9f00845b:	ff 28                	jmp    FWORD PTR [eax]
9f00845d:	90                   	nop
9f00845e:	ff                   	(bad)  
9f00845f:	ff 20                	jmp    DWORD PTR [eax]
9f008461:	e5 ff                	in     eax,0xff
9f008463:	ff 4e 90             	dec    DWORD PTR [esi-0x70]
9f008466:	ff                   	(bad)  
9f008467:	ff 44 e5 ff          	inc    DWORD PTR [ebp+eiz*8-0x1]
9f00846b:	ff 91 90 ff ff 68    	call   DWORD PTR [ecx+0x68ffff90]
9f008471:	e5 ff                	in     eax,0xff
9f008473:	ff d4                	call   esp
9f008475:	90                   	nop
9f008476:	ff                   	(bad)  
9f008477:	ff 8c e5 ff ff 94 91 	dec    DWORD PTR [ebp+eiz*8-0x6e6b0001]
9f00847e:	ff                   	(bad)  
9f00847f:	ff b0 e5 ff ff ce    	push   DWORD PTR [eax-0x3100001b]
9f008485:	91                   	xchg   ecx,eax
9f008486:	ff                   	(bad)  
9f008487:	ff d8                	call   <internal disassembler error>
9f008489:	e5 ff                	in     eax,0xff
9f00848b:	ff 0a                	dec    DWORD PTR [edx]
9f00848d:	92                   	xchg   edx,eax
9f00848e:	ff                   	(bad)  
9f00848f:	ff 00                	inc    DWORD PTR [eax]
9f008491:	e6 ff                	out    0xff,al
9f008493:	ff 48 92             	dec    DWORD PTR [eax-0x6e]
9f008496:	ff                   	(bad)  
9f008497:	ff 28                	jmp    FWORD PTR [eax]
9f008499:	e6 ff                	out    0xff,al
9f00849b:	ff 88 92 ff ff 50    	dec    DWORD PTR [eax+0x50ffff92]
9f0084a1:	e6 ff                	out    0xff,al
9f0084a3:	ff ca                	dec    edx
9f0084a5:	92                   	xchg   edx,eax
9f0084a6:	ff                   	(bad)  
9f0084a7:	ff                   	(bad)  
9f0084a8:	78 e6                	js     9f008490 <__GNU_EH_FRAME_HDR+0x198>
9f0084aa:	ff                   	(bad)  
9f0084ab:	ff 95 93 ff ff 9c    	call   DWORD PTR [ebp-0x6300006d]
9f0084b1:	e6 ff                	out    0xff,al
9f0084b3:	ff                   	(bad)  
9f0084b4:	b8 93 ff ff c0       	mov    eax,0xc0ffff93
9f0084b9:	e6 ff                	out    0xff,al
9f0084bb:	ff 11                	call   DWORD PTR [ecx]
9f0084bd:	94                   	xchg   esp,eax
9f0084be:	ff                   	(bad)  
9f0084bf:	ff e4                	jmp    esp
9f0084c1:	e6 ff                	out    0xff,al
9f0084c3:	ff 65 94             	jmp    DWORD PTR [ebp-0x6c]
9f0084c6:	ff                   	(bad)  
9f0084c7:	ff 08                	dec    DWORD PTR [eax]
9f0084c9:	e7 ff                	out    0xff,eax
9f0084cb:	ff                   	(bad)  
9f0084cc:	b9 94 ff ff 2c       	mov    ecx,0x2cffff94
9f0084d1:	e7 ff                	out    0xff,eax
9f0084d3:	ff ed                	jmp    <internal disassembler error>
9f0084d5:	94                   	xchg   esp,eax
9f0084d6:	ff                   	(bad)  
9f0084d7:	ff 4c e7 ff          	dec    DWORD PTR [edi+eiz*8-0x1]
9f0084db:	ff 24 95 ff ff 6c e7 	jmp    DWORD PTR [edx*4-0x18930001]
9f0084e2:	ff                   	(bad)  
9f0084e3:	ff 5b 95             	call   FWORD PTR [ebx-0x6b]
9f0084e6:	ff                   	(bad)  
9f0084e7:	ff 8c e7 ff ff e3 95 	dec    DWORD PTR [edi+eiz*8-0x6a1c0001]
9f0084ee:	ff                   	(bad)  
9f0084ef:	ff b4 e7 ff ff 53 96 	push   DWORD PTR [edi+eiz*8-0x69ac0001]
9f0084f6:	ff                   	(bad)  
9f0084f7:	ff dc                	call   <internal disassembler error>
9f0084f9:	e7 ff                	out    0xff,eax
9f0084fb:	ff c3                	inc    ebx
9f0084fd:	96                   	xchg   esi,eax
9f0084fe:	ff                   	(bad)  
9f0084ff:	ff 04 e8             	inc    DWORD PTR [eax+ebp*8]
9f008502:	ff                   	(bad)  
9f008503:	ff e0                	jmp    eax
9f008505:	96                   	xchg   esi,eax
9f008506:	ff                   	(bad)  
9f008507:	ff 24 e8             	jmp    DWORD PTR [eax+ebp*8]
9f00850a:	ff                   	(bad)  
9f00850b:	ff 09                	dec    DWORD PTR [ecx]
9f00850d:	97                   	xchg   edi,eax
9f00850e:	ff                   	(bad)  
9f00850f:	ff 44 e8 ff          	inc    DWORD PTR [eax+ebp*8-0x1]
9f008513:	ff 2e                	jmp    FWORD PTR [esi]
9f008515:	97                   	xchg   edi,eax
9f008516:	ff                   	(bad)  
9f008517:	ff 64 e8 ff          	jmp    DWORD PTR [eax+ebp*8-0x1]
9f00851b:	ff 51 97             	call   DWORD PTR [ecx-0x69]
9f00851e:	ff                   	(bad)  
9f00851f:	ff 84 e8 ff ff 9d 97 	inc    DWORD PTR [eax+ebp*8-0x68620001]
9f008526:	ff                   	(bad)  
9f008527:	ff a4 e8 ff ff 91 99 	jmp    DWORD PTR [eax+ebp*8-0x666e0001]
9f00852e:	ff                   	(bad)  
9f00852f:	ff c8                	dec    eax
9f008531:	e8 ff ff e0 99       	call   38e18535 <sysEnter_Vector+0x38ce8535>
9f008536:	ff                   	(bad)  
9f008537:	ff e8                	jmp    <internal disassembler error>
9f008539:	e8 ff ff fc 99       	call   38fd853d <sysEnter_Vector+0x38ea853d>
9f00853e:	ff                   	(bad)  
9f00853f:	ff 08                	dec    DWORD PTR [eax]
9f008541:	e9 ff ff 1c 9a       	jmp    391d8545 <sysEnter_Vector+0x390a8545>
9f008546:	ff                   	(bad)  
9f008547:	ff 28                	jmp    FWORD PTR [eax]
9f008549:	e9 ff ff 3c 9a       	jmp    393d854d <sysEnter_Vector+0x392a854d>
9f00854e:	ff                   	(bad)  
9f00854f:	ff 48 e9             	dec    DWORD PTR [eax-0x17]
9f008552:	ff                   	(bad)  
9f008553:	ff 80 9b ff ff 68    	inc    DWORD PTR [eax+0x68ffff9b]
9f008559:	e9 ff ff a0 9b       	jmp    3aa1855d <sysEnter_Vector+0x3a8e855d>
9f00855e:	ff                   	(bad)  
9f00855f:	ff 88 e9 ff ff 9d    	dec    DWORD PTR [eax-0x62000017]
9f008565:	9e                   	sahf   
9f008566:	ff                   	(bad)  
9f008567:	ff b4 e9 ff ff c0 9e 	push   DWORD PTR [ecx+ebp*8-0x613f0001]
9f00856e:	ff                   	(bad)  
9f00856f:	ff d4                	call   esp
9f008571:	e9 ff ff e3 9e       	jmp    3de48575 <sysEnter_Vector+0x3dd18575>
9f008576:	ff                   	(bad)  
9f008577:	ff f4                	push   esp
9f008579:	e9 ff ff 00 9f       	jmp    3e01857d <sysEnter_Vector+0x3dee857d>
9f00857e:	ff                   	(bad)  
9f00857f:	ff 14 ea             	call   DWORD PTR [edx+ebp*8]
9f008582:	ff                   	(bad)  
9f008583:	ff 20                	jmp    DWORD PTR [eax]
9f008585:	9f                   	lahf   
9f008586:	ff                   	(bad)  
9f008587:	ff 34 ea             	push   DWORD PTR [edx+ebp*8]
9f00858a:	ff                   	(bad)  
9f00858b:	ff 94 9f ff ff 58 ea 	call   DWORD PTR [edi+ebx*4-0x15a70001]
9f008592:	ff                   	(bad)  
9f008593:	ff f4                	push   esp
9f008595:	9f                   	lahf   
9f008596:	ff                   	(bad)  
9f008597:	ff                   	(bad)  
9f008598:	7c ea                	jl     9f008584 <__GNU_EH_FRAME_HDR+0x28c>
9f00859a:	ff                   	(bad)  
9f00859b:	ff                   	(bad)  
9f00859c:	7b a0                	jnp    9f00853e <__GNU_EH_FRAME_HDR+0x246>
9f00859e:	ff                   	(bad)  
9f00859f:	ff 9c ea ff ff ee a0 	call   FWORD PTR [edx+ebp*8-0x5f110001]
9f0085a6:	ff                   	(bad)  
9f0085a7:	ff c0                	inc    eax
9f0085a9:	ea ff ff 72 a1 ff ff 	jmp    0xffff:0xa172ffff
9f0085b0:	e0 ea                	loopne 9f00859c <__GNU_EH_FRAME_HDR+0x2a4>
9f0085b2:	ff                   	(bad)  
9f0085b3:	ff                   	(bad)  
9f0085b4:	fd                   	std    
9f0085b5:	a1 ff ff 04 eb       	mov    eax,ds:0xeb04ffff
9f0085ba:	ff                   	(bad)  
9f0085bb:	ff                   	(bad)  
9f0085bc:	bd a4 ff ff 28       	mov    ebp,0x28ffffa4
9f0085c1:	eb ff                	jmp    9f0085c2 <__GNU_EH_FRAME_HDR+0x2ca>
9f0085c3:	ff dd                	call   <internal disassembler error>
9f0085c5:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f0085c6:	ff                   	(bad)  
9f0085c7:	ff 48 eb             	dec    DWORD PTR [eax-0x15]
9f0085ca:	ff                   	(bad)  
9f0085cb:	ff e0                	jmp    eax
9f0085cd:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f0085ce:	ff                   	(bad)  
9f0085cf:	ff 6c eb ff          	jmp    FWORD PTR [ebx+ebp*8-0x1]
9f0085d3:	ff 03                	inc    DWORD PTR [ebx]
9f0085d5:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
9f0085d6:	ff                   	(bad)  
9f0085d7:	ff 8c eb ff ff 24 a6 	dec    DWORD PTR [ebx+ebp*8-0x59db0001]
9f0085de:	ff                   	(bad)  
9f0085df:	ff ac eb ff ff 58 a6 	jmp    FWORD PTR [ebx+ebp*8-0x59a70001]
9f0085e6:	ff                   	(bad)  
9f0085e7:	ff d0                	call   eax
9f0085e9:	eb ff                	jmp    9f0085ea <__GNU_EH_FRAME_HDR+0x2f2>
9f0085eb:	ff f3                	push   ebx
9f0085ed:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
9f0085ee:	ff                   	(bad)  
9f0085ef:	ff f0                	push   eax
9f0085f1:	eb ff                	jmp    9f0085f2 <__GNU_EH_FRAME_HDR+0x2fa>
9f0085f3:	ff 14 a8             	call   DWORD PTR [eax+ebp*4]
9f0085f6:	ff                   	(bad)  
9f0085f7:	ff 10                	call   DWORD PTR [eax]
9f0085f9:	ec                   	in     al,dx
9f0085fa:	ff                   	(bad)  
9f0085fb:	ff db                	call   <internal disassembler error>
9f0085fd:	a8 ff                	test   al,0xff
9f0085ff:	ff 30                	push   DWORD PTR [eax]
9f008601:	ec                   	in     al,dx
9f008602:	ff                   	(bad)  
9f008603:	ff 34 a9             	push   DWORD PTR [ecx+ebp*4]
9f008606:	ff                   	(bad)  
9f008607:	ff 50 ec             	call   DWORD PTR [eax-0x14]
9f00860a:	ff                   	(bad)  
9f00860b:	ff 5d a9             	call   FWORD PTR [ebp-0x57]
9f00860e:	ff                   	(bad)  
9f00860f:	ff 74 ec ff          	push   DWORD PTR [esp+ebp*8-0x1]
9f008613:	ff 8c a9 ff ff 98 ec 	dec    DWORD PTR [ecx+ebp*4-0x13670001]
9f00861a:	ff                   	(bad)  
9f00861b:	ff 05 ad ff ff c4    	inc    DWORD PTR ds:0xc4ffffad
9f008621:	ec                   	in     al,dx
9f008622:	ff                   	(bad)  
9f008623:	ff 2a                	jmp    FWORD PTR [edx]
9f008625:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f008626:	ff                   	(bad)  
9f008627:	ff e4                	jmp    esp
9f008629:	ec                   	in     al,dx
9f00862a:	ff                   	(bad)  
9f00862b:	ff a4 af ff ff 10 ed 	jmp    DWORD PTR [edi+ebp*4-0x12ef0001]
9f008632:	ff                   	(bad)  
9f008633:	ff 73 b2             	push   DWORD PTR [ebx-0x4e]
9f008636:	ff                   	(bad)  
9f008637:	ff 34 ed ff ff d7 b2 	push   DWORD PTR [ebp*8-0x4d280001]
9f00863e:	ff                   	(bad)  
9f00863f:	ff 58 ed             	call   FWORD PTR [eax-0x13]
9f008642:	ff                   	(bad)  
9f008643:	ff 20                	jmp    DWORD PTR [eax]
9f008645:	b5 ff                	mov    ch,0xff
9f008647:	ff 84 ed ff ff 3a b6 	inc    DWORD PTR [ebp+ebp*8-0x49c50001]
9f00864e:	ff                   	(bad)  
9f00864f:	ff a4 ed ff ff 58 b8 	jmp    DWORD PTR [ebp+ebp*8-0x47a70001]
9f008656:	ff                   	(bad)  
9f008657:	ff d4                	call   esp
9f008659:	ed                   	in     eax,dx
9f00865a:	ff                   	(bad)  
9f00865b:	ff 5d bc             	call   FWORD PTR [ebp-0x44]
9f00865e:	ff                   	(bad)  
9f00865f:	ff                   	(bad)  
9f008660:	f8                   	clc    
9f008661:	ed                   	in     eax,dx
9f008662:	ff                   	(bad)  
9f008663:	ff 06                	inc    DWORD PTR [esi]
9f008665:	bd ff ff 1c ee       	mov    ebp,0xee1cffff
9f00866a:	ff                   	(bad)  
9f00866b:	ff b0 bd ff ff 3c    	push   DWORD PTR [eax+0x3cffffbd]
9f008671:	ee                   	out    dx,al
9f008672:	ff                   	(bad)  
9f008673:	ff c6                	inc    esi
9f008675:	bf ff ff 60 ee       	mov    edi,0xee60ffff
9f00867a:	ff                   	(bad)  
9f00867b:	ff 9c c4 ff ff 8c ee 	call   FWORD PTR [esp+eax*8-0x11730001]
9f008682:	ff                   	(bad)  
9f008683:	ff cf                	dec    edi
9f008685:	c4                   	(bad)  
9f008686:	ff                   	(bad)  
9f008687:	ff ac ee ff ff 0c c5 	jmp    FWORD PTR [esi+ebp*8-0x3af30001]
9f00868e:	ff                   	(bad)  
9f00868f:	ff cc                	dec    esp
9f008691:	ee                   	out    dx,al
9f008692:	ff                   	(bad)  
9f008693:	ff 49 c5             	dec    DWORD PTR [ecx-0x3b]
9f008696:	ff                   	(bad)  
9f008697:	ff ec                	jmp    <internal disassembler error>
9f008699:	ee                   	out    dx,al
9f00869a:	ff                   	(bad)  
9f00869b:	ff                   	(bad)  
9f00869c:	7c c5                	jl     9f008663 <__GNU_EH_FRAME_HDR+0x36b>
9f00869e:	ff                   	(bad)  
9f00869f:	ff 20                	jmp    DWORD PTR [eax]
9f0086a1:	ef                   	out    dx,eax
9f0086a2:	ff                   	(bad)  
9f0086a3:	ff 00                	inc    DWORD PTR [eax]
9f0086a5:	c6                   	(bad)  
9f0086a6:	ff                   	(bad)  
9f0086a7:	ff 44 ef ff          	inc    DWORD PTR [edi+ebp*8-0x1]
9f0086ab:	ff                   	(bad)  
9f0086ac:	3e                   	ds
9f0086ad:	c6                   	(bad)  
9f0086ae:	ff                   	(bad)  
9f0086af:	ff 68 ef             	jmp    FWORD PTR [eax-0x11]
9f0086b2:	ff                   	(bad)  
9f0086b3:	ff                   	(bad)  
9f0086b4:	7c c6                	jl     9f00867c <__GNU_EH_FRAME_HDR+0x384>
9f0086b6:	ff                   	(bad)  
9f0086b7:	ff 8c ef ff ff eb c6 	dec    DWORD PTR [edi+ebp*8-0x39140001]
9f0086be:	ff                   	(bad)  
9f0086bf:	ff b0 ef ff ff 32    	push   DWORD PTR [eax+0x32ffffef]
9f0086c5:	c7                   	(bad)  
9f0086c6:	ff                   	(bad)  
9f0086c7:	ff d4                	call   esp
9f0086c9:	ef                   	out    dx,eax
9f0086ca:	ff                   	(bad)  
9f0086cb:	ff 58 c7             	call   FWORD PTR [eax-0x39]
9f0086ce:	ff                   	(bad)  
9f0086cf:	ff f4                	push   esp
9f0086d1:	ef                   	out    dx,eax
9f0086d2:	ff                   	(bad)  
9f0086d3:	ff b6 c7 ff ff 1c    	push   DWORD PTR [esi+0x1cffffc7]
9f0086d9:	f0 ff                	lock (bad) 
9f0086db:	ff d4                	call   esp
9f0086dd:	c7                   	(bad)  
9f0086de:	ff                   	(bad)  
9f0086df:	ff                   	(bad)  
9f0086e0:	3c f0                	cmp    al,0xf0
9f0086e2:	ff                   	(bad)  
9f0086e3:	ff 14 c8             	call   DWORD PTR [eax+ecx*8]
9f0086e6:	ff                   	(bad)  
9f0086e7:	ff 5c f0 ff          	call   FWORD PTR [eax+esi*8-0x1]
9f0086eb:	ff 54 c8 ff          	call   DWORD PTR [eax+ecx*8-0x1]
9f0086ef:	ff                   	(bad)  
9f0086f0:	7c f0                	jl     9f0086e2 <__GNU_EH_FRAME_HDR+0x3ea>
9f0086f2:	ff                   	(bad)  
9f0086f3:	ff 9c c8 ff ff 9c f0 	call   FWORD PTR [eax+ecx*8-0xf630001]
9f0086fa:	ff                   	(bad)  
9f0086fb:	ff cc                	dec    esp
9f0086fd:	c8 ff ff bc          	enter  0xffff,0xbc
9f008701:	f0 ff                	lock (bad) 
9f008703:	ff 28                	jmp    FWORD PTR [eax]
9f008705:	c9                   	leave  
9f008706:	ff                   	(bad)  
9f008707:	ff dc                	call   <internal disassembler error>
9f008709:	f0 ff                	lock (bad) 
9f00870b:	ff 59 c9             	call   FWORD PTR [ecx-0x37]
9f00870e:	ff                   	(bad)  
9f00870f:	ff                   	(bad)  
9f008710:	fc                   	cld    
9f008711:	f0 ff                	lock (bad) 
9f008713:	ff 73 c9             	push   DWORD PTR [ebx-0x37]
9f008716:	ff                   	(bad)  
9f008717:	ff 1c f1             	call   FWORD PTR [ecx+esi*8]
9f00871a:	ff                   	(bad)  
9f00871b:	ff ac c9 ff ff 3c f1 	jmp    FWORD PTR [ecx+ecx*8-0xec30001]
9f008722:	ff                   	(bad)  
9f008723:	ff cc                	dec    esp
9f008725:	c9                   	leave  
9f008726:	ff                   	(bad)  
9f008727:	ff 5c f1 ff          	call   FWORD PTR [ecx+esi*8-0x1]
9f00872b:	ff 33                	push   DWORD PTR [ebx]
9f00872d:	ca ff ff             	retf   0xffff
9f008730:	7c f1                	jl     9f008723 <__GNU_EH_FRAME_HDR+0x42b>
9f008732:	ff                   	(bad)  
9f008733:	ff 9c ca ff ff 9c f1 	call   FWORD PTR [edx+ecx*8-0xe630001]
9f00873a:	ff                   	(bad)  
9f00873b:	ff 08                	dec    DWORD PTR [eax]
9f00873d:	cb                   	retf   
9f00873e:	ff                   	(bad)  
9f00873f:	ff                   	(bad)  
9f008740:	bc f1 ff ff 28       	mov    esp,0x28fffff1
9f008745:	cb                   	retf   
9f008746:	ff                   	(bad)  
9f008747:	ff dc                	call   <internal disassembler error>
9f008749:	f1                   	icebp  
9f00874a:	ff                   	(bad)  
9f00874b:	ff a8 cc ff ff 0c    	jmp    FWORD PTR [eax+0xcffffcc]
9f008751:	f2 ff                	repnz (bad) 
9f008753:	ff c8                	dec    eax
9f008755:	cc                   	int3   
9f008756:	ff                   	(bad)  
9f008757:	ff 2c f2             	jmp    FWORD PTR [edx+esi*8]
9f00875a:	ff                   	(bad)  
9f00875b:	ff 64 ce ff          	jmp    DWORD PTR [esi+ecx*8-0x1]
9f00875f:	ff 5c f2 ff          	call   FWORD PTR [edx+esi*8-0x1]
9f008763:	ff                   	(bad)  
9f008764:	fa                   	cli    
9f008765:	ce                   	into   
9f008766:	ff                   	(bad)  
9f008767:	ff 80 f2 ff ff 1c    	inc    DWORD PTR [eax+0x1cfffff2]
9f00876d:	cf                   	iret   
9f00876e:	ff                   	(bad)  
9f00876f:	ff a0 f2 ff ff 3a    	jmp    DWORD PTR [eax+0x3afffff2]
9f008775:	d0 ff                	sar    bh,1
9f008777:	ff cc                	dec    esp
9f008779:	f2 ff                	repnz (bad) 
9f00877b:	ff 60 d0             	jmp    DWORD PTR [eax-0x30]
9f00877e:	ff                   	(bad)  
9f00877f:	ff ec                	jmp    <internal disassembler error>
9f008781:	f2 ff                	repnz (bad) 
9f008783:	ff                   	(bad)  
9f008784:	fe                   	(bad)  
9f008785:	d0 ff                	sar    bh,1
9f008787:	ff 14 f3             	call   DWORD PTR [ebx+esi*8]
9f00878a:	ff                   	(bad)  
9f00878b:	ff 6c d1 ff          	jmp    FWORD PTR [ecx+edx*8-0x1]
9f00878f:	ff                   	(bad)  
9f008790:	3c f3                	cmp    al,0xf3
9f008792:	ff                   	(bad)  
9f008793:	ff 8c d1 ff ff 5c f3 	dec    DWORD PTR [ecx+edx*8-0xca30001]
9f00879a:	ff                   	(bad)  
9f00879b:	ff d0                	call   eax
9f00879d:	d1 ff                	sar    edi,1
9f00879f:	ff 84 f3 ff ff e9 d4 	inc    DWORD PTR [ebx+esi*8-0x2b160001]
9f0087a6:	ff                   	(bad)  
9f0087a7:	ff ac f3 ff ff 06 d5 	jmp    FWORD PTR [ebx+esi*8-0x2af90001]
9f0087ae:	ff                   	(bad)  
9f0087af:	ff cc                	dec    esp
9f0087b1:	f3 ff                	repz (bad) 
9f0087b3:	ff 43 d5             	inc    DWORD PTR [ebx-0x2b]
9f0087b6:	ff                   	(bad)  
9f0087b7:	ff ec                	jmp    <internal disassembler error>
9f0087b9:	f3 ff                	repz (bad) 
9f0087bb:	ff                   	(bad)  
9f0087bc:	78 d5                	js     9f008793 <__GNU_EH_FRAME_HDR+0x49b>
9f0087be:	ff                   	(bad)  
9f0087bf:	ff 0c f4             	dec    DWORD PTR [esp+esi*8]
9f0087c2:	ff                   	(bad)  
9f0087c3:	ff 95 d5 ff ff 2c    	call   DWORD PTR [ebp+0x2cffffd5]
9f0087c9:	f4                   	hlt    
9f0087ca:	ff                   	(bad)  
9f0087cb:	ff ec                	jmp    <internal disassembler error>
9f0087cd:	dd ff                	(bad)  
9f0087cf:	ff 5c f4 ff          	call   FWORD PTR [esp+esi*8-0x1]
9f0087d3:	ff 59 de             	call   FWORD PTR [ecx-0x22]
9f0087d6:	ff                   	(bad)  
9f0087d7:	ff 84 f4 ff ff 9a de 	inc    DWORD PTR [esp+esi*8-0x21650001]
9f0087de:	ff                   	(bad)  
9f0087df:	ff 48 df             	dec    DWORD PTR [eax-0x21]
9f0087e2:	ff                   	(bad)  
9f0087e3:	ff e8                	jmp    <internal disassembler error>
9f0087e5:	de ff                	fdivp  st(7),st
9f0087e7:	ff                   	(bad)  
9f0087e8:	fc                   	cld    
9f0087e9:	df ff                	(bad)  
9f0087eb:	ff ec                	jmp    <internal disassembler error>
9f0087ed:	de ff                	fdivp  st(7),st
9f0087ef:	ff 0c ef             	dec    DWORD PTR [edi+ebp*8]
9f0087f2:	ff                   	(bad)  
9f0087f3:	ff                   	.byte 0xff

Disassembly of section .rodata:

9f008800 <ansiEscSeq>:
9f008800:	1b 5b 00             	sbb    ebx,DWORD PTR [ebx+0x0]
9f008803:	3b 00                	cmp    eax,DWORD PTR [eax]
9f008805:	48                   	dec    eax
9f008806:	00 25 73 00 73 00    	add    BYTE PTR ds:0x730073,ah
9f00880c:	75 00                	jne    9f00880e <ansiEscSeq+0xe>
9f00880e:	24 00                	and    al,0x0
9f008810:	3d 00 50 41 54       	cmp    eax,0x54415000
9f008815:	48                   	dec    eax
9f008816:	00 2f                	add    BYTE PTR [edi],ch
9f008818:	00 0a                	add    BYTE PTR [edx],cl
9f00881a:	00 53 74             	add    BYTE PTR [ebx+0x74],dl
9f00881d:	72 65                	jb     9f008884 <ansiEscSeq+0x84>
9f00881f:	61                   	popa   
9f008820:	6d                   	ins    DWORD PTR es:[edi],dx
9f008821:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
9f008827:	74 20                	je     9f008849 <ansiEscSeq+0x49>
9f008829:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
9f008830:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f008831:	74 65                	je     9f008898 <ansiEscSeq+0x98>
9f008833:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f008836:	00 00                	add    BYTE PTR [eax],al
9f008838:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00883a:	2a 6c 69 62          	sub    ch,BYTE PTR [ecx+ebp*2+0x62]
9f00883e:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
9f008841:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f008842:	69 74 20 63 61 6c 6c 	imul   esi,DWORD PTR [eax+eiz*1+0x63],0x656c6c61
9f008849:	65 
9f00884a:	64 0a 2a             	or     ch,BYTE PTR fs:[edx]
9f00884d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00884f:	00 2a                	add    BYTE PTR [edx],ch
9f008851:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008853:	6c                   	ins    BYTE PTR es:[edi],dx
9f008854:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f00885b:	74 20                	je     9f00887d <ansiEscSeq+0x7d>
9f00885d:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f008860:	70 6c                	jo     9f0088ce <ansiEscSeq+0xce>
9f008862:	65                   	gs
9f008863:	74 65                	je     9f0088ca <ansiEscSeq+0xca>
9f008865:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f008868:	6c                   	ins    BYTE PTR es:[edi],dx
9f008869:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f008870:	74 20                	je     9f008892 <ansiEscSeq+0x92>
9f008872:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f008875:	6c                   	ins    BYTE PTR es:[edi],dx
9f008876:	65 64 20 70 72       	gs and BYTE PTR fs:gs:[eax+0x72],dh
9f00887b:	65                   	gs
9f00887c:	76 69                	jbe    9f0088e7 <ansiEscSeq+0xe7>
9f00887e:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00887f:	75 73                	jne    9f0088f4 <ansiEscSeq+0xf4>
9f008881:	6c                   	ins    BYTE PTR es:[edi],dx
9f008882:	79 2c                	jns    9f0088b0 <ansiEscSeq+0xb0>
9f008884:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f008887:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x6c000a67
9f00888e:	6c 
9f00888f:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f008896:	65 63 20             	arpl   WORD PTR gs:[eax],sp
9f008899:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f00889b:	72 20                	jb     9f0088bd <ansiEscSeq+0xbd>
9f00889d:	25 73 0a 00 20       	and    eax,0x20000a73
9f0088a2:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f0088a6:	63 3a                	arpl   WORD PTR [edx],di
9f0088a8:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f0088ab:	65 63 62 20          	arpl   WORD PTR gs:[edx+0x20],sp
9f0088af:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0088b1:	72 20                	jb     9f0088d3 <ansiEscSeq+0xd3>
9f0088b3:	25 73 0a 00 6c       	and    eax,0x6c000a73
9f0088b8:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f0088bf:	65 63 61 20          	arpl   WORD PTR gs:[ecx+0x20],sp
9f0088c3:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0088c5:	72 20                	jb     9f0088e7 <ansiEscSeq+0xe7>
9f0088c7:	25 73 0a 00 00       	and    eax,0xa73
9f0088cc:	68 65 61 70 42       	push   0x42706165
9f0088d1:	61                   	popa   
9f0088d2:	73 65                	jae    9f008939 <ansiEscSeq+0x139>
9f0088d4:	20 40 20             	and    BYTE PTR [eax+0x20],al
9f0088d7:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
9f0088da:	30 38                	xor    BYTE PTR [eax],bh
9f0088dc:	58                   	pop    eax
9f0088dd:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
9f0088e3:	30 38                	xor    BYTE PTR [eax],bh
9f0088e5:	58                   	pop    eax
9f0088e6:	20 62 65             	and    BYTE PTR [edx+0x65],ah
9f0088e9:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0088eb:	72 65                	jb     9f008952 <ansiEscSeq+0x152>
9f0088ed:	0a 00                	or     al,BYTE PTR [eax]
9f0088ef:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f0088f2:	6c                   	ins    BYTE PTR es:[edi],dx
9f0088f3:	6c                   	ins    BYTE PTR es:[edi],dx
9f0088f4:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0088f5:	63 3a                	arpl   WORD PTR [edx],di
9f0088f7:	20 6d 61             	and    BYTE PTR [ebp+0x61],ch
9f0088fa:	72 6b                	jb     9f008967 <ansiEscSeq+0x167>
9f0088fc:	65                   	gs
9f0088fd:	72 20                	jb     9f00891f <ansiEscSeq+0x11f>
9f0088ff:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f008900:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008901:	74 20                	je     9f008923 <ansiEscSeq+0x123>
9f008903:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f008905:	75 6e                	jne    9f008975 <ansiEscSeq+0x175>
9f008907:	64 20 65 72          	and    BYTE PTR fs:[ebp+0x72],ah
9f00890b:	72 6f                	jb     9f00897c <ansiEscSeq+0x17c>
9f00890d:	72 21                	jb     9f008930 <ansiEscSeq+0x130>
9f00890f:	21 21                	and    DWORD PTR [ecx],esp
9f008911:	0a 00                	or     al,BYTE PTR [eax]
9f008913:	00 0a                	add    BYTE PTR [edx],cl
9f008915:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008917:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008919:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00891b:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00891d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00891f:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008921:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008923:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008925:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008927:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008929:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00892b:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00892d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00892f:	6d                   	ins    DWORD PTR es:[edi],dx
9f008930:	61                   	popa   
9f008931:	6c                   	ins    BYTE PTR es:[edi],dx
9f008932:	6c                   	ins    BYTE PTR es:[edi],dx
9f008933:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008934:	63 20                	arpl   WORD PTR [eax],sp
9f008936:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
9f008939:	65 20 65 72          	and    BYTE PTR gs:[ebp+0x72],ah
9f00893d:	72 6f                	jb     9f0089ae <ansiEscSeq+0x1ae>
9f00893f:	72 21                	jb     9f008962 <ansiEscSeq+0x162>
9f008941:	21 21                	and    DWORD PTR [ecx],esp
9f008943:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008945:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008947:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008949:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00894b:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00894d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00894f:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008951:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008953:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008955:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008957:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008959:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00895b:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00895d:	0a 00                	or     al,BYTE PTR [eax]
9f00895f:	00 0a                	add    BYTE PTR [edx],cl
9f008961:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008963:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008965:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008967:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008969:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00896b:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00896d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00896f:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008971:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008973:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008975:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008977:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008979:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00897b:	6d                   	ins    DWORD PTR es:[edi],dx
9f00897c:	61                   	popa   
9f00897d:	6c                   	ins    BYTE PTR es:[edi],dx
9f00897e:	6c                   	ins    BYTE PTR es:[edi],dx
9f00897f:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008980:	63 20                	arpl   WORD PTR [eax],sp
9f008982:	70 6f                	jo     9f0089f3 <ansiEscSeq+0x1f3>
9f008984:	69 6e 74 65 72 20 65 	imul   ebp,DWORD PTR [esi+0x74],0x65207265
9f00898b:	72 72                	jb     9f0089ff <ansiEscSeq+0x1ff>
9f00898d:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00898e:	72 21                	jb     9f0089b1 <ansiEscSeq+0x1b1>
9f008990:	21 21                	and    DWORD PTR [ecx],esp
9f008992:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008994:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008996:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008998:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00899a:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00899c:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00899e:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0089a0:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0089a2:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0089a4:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0089a6:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0089a8:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0089aa:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0089ac:	0a 00                	or     al,BYTE PTR [eax]
9f0089ae:	00 00                	add    BYTE PTR [eax],al
9f0089b0:	6c                   	ins    BYTE PTR es:[edi],dx
9f0089b1:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f0089b8:	6c                   	ins    BYTE PTR es:[edi],dx
9f0089b9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0089ba:	63 3a                	arpl   WORD PTR [edx],di
9f0089bc:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f0089bf:	71 75                	jno    9f008a36 <ansiEscSeq+0x236>
9f0089c1:	65                   	gs
9f0089c2:	73 74                	jae    9f008a38 <ansiEscSeq+0x238>
9f0089c4:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
9f0089c7:	72 20                	jb     9f0089e9 <ansiEscSeq+0x1e9>
9f0089c9:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f0089cc:	30 38                	xor    BYTE PTR [eax],bh
9f0089ce:	78 20                	js     9f0089f0 <ansiEscSeq+0x1f0>
9f0089d0:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
9f0089d3:	65                   	gs
9f0089d4:	73 0a                	jae    9f0089e0 <ansiEscSeq+0x1e0>
9f0089d6:	00 00                	add    BYTE PTR [eax],al
9f0089d8:	6c                   	ins    BYTE PTR es:[edi],dx
9f0089d9:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f0089e0:	6c                   	ins    BYTE PTR es:[edi],dx
9f0089e1:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0089e2:	63 3a                	arpl   WORD PTR [edx],di
9f0089e4:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f0089e7:	75 73                	jne    9f008a5c <ansiEscSeq+0x25c>
9f0089e9:	69 6e 67 20 68 65 61 	imul   ebp,DWORD PTR [esi+0x67],0x61656820
9f0089f0:	70 72                	jo     9f008a64 <ansiEscSeq+0x264>
9f0089f2:	65 63 3d 30 78 25 30 	arpl   WORD PTR gs:0x30257830,di
9f0089f9:	38 78 2c             	cmp    BYTE PTR [eax+0x2c],bh
9f0089fc:	20 61 64             	and    BYTE PTR [ecx+0x64],ah
9f0089ff:	64                   	fs
9f008a00:	72 65                	jb     9f008a67 <ansiEscSeq+0x267>
9f008a02:	73 73                	jae    9f008a77 <ansiEscSeq+0x277>
9f008a04:	3d 30 78 25 30       	cmp    eax,0x30257830
9f008a09:	38 78 20             	cmp    BYTE PTR [eax+0x20],bh
9f008a0c:	28 75 73             	sub    BYTE PTR [ebp+0x73],dh
9f008a0f:	65                   	gs
9f008a10:	73 3d                	jae    9f008a4f <ansiEscSeq+0x24f>
9f008a12:	25 75 29 00 6c       	and    eax,0x6c002975
9f008a17:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f008a1e:	6c                   	ins    BYTE PTR es:[edi],dx
9f008a1f:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008a20:	63 3a                	arpl   WORD PTR [edx],di
9f008a22:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f008a25:	65                   	gs
9f008a26:	64                   	fs
9f008a27:	65                   	gs
9f008a28:	64                   	fs
9f008a29:	3d 30 78 25 30       	cmp    eax,0x30257830
9f008a2e:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f008a31:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f008a35:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f008a38:	61                   	popa   
9f008a39:	6c                   	ins    BYTE PTR es:[edi],dx
9f008a3a:	6c                   	ins    BYTE PTR es:[edi],dx
9f008a3b:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008a3c:	63 3a                	arpl   WORD PTR [edx],di
9f008a3e:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f008a41:	61                   	popa   
9f008a42:	45                   	inc    ebp
9f008a43:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f008a44:	64                   	fs
9f008a45:	3d 30 78 25 30       	cmp    eax,0x30257830
9f008a4a:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f008a4d:	00 00                	add    BYTE PTR [eax],al
9f008a4f:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f008a53:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f008a56:	61                   	popa   
9f008a57:	6c                   	ins    BYTE PTR es:[edi],dx
9f008a58:	6c                   	ins    BYTE PTR es:[edi],dx
9f008a59:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008a5a:	63 3a                	arpl   WORD PTR [edx],di
9f008a5c:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f008a5f:	71 20                	jno    9f008a81 <ansiEscSeq+0x281>
9f008a61:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f008a64:	30 38                	xor    BYTE PTR [eax],bh
9f008a66:	58                   	pop    eax
9f008a67:	20 62 79             	and    BYTE PTR [edx+0x79],ah
9f008a6a:	74 65                	je     9f008ad1 <ansiEscSeq+0x2d1>
9f008a6c:	73 2c                	jae    9f008a9a <ansiEscSeq+0x29a>
9f008a6e:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f008a71:	74 20                	je     9f008a93 <ansiEscSeq+0x293>
9f008a73:	77 61                	ja     9f008ad6 <ansiEscSeq+0x2d6>
9f008a75:	73 20                	jae    9f008a97 <ansiEscSeq+0x297>
9f008a77:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f008a7a:	30 38                	xor    BYTE PTR [eax],bh
9f008a7c:	58                   	pop    eax
9f008a7d:	2c 20                	sub    al,0x20
9f008a7f:	68 65 61 70 45       	push   0x45706165
9f008a84:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f008a85:	64                   	fs
9f008a86:	3d 30 78 25 30       	cmp    eax,0x30257830
9f008a8b:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f008a8e:	00 00                	add    BYTE PTR [eax],al
9f008a90:	6c                   	ins    BYTE PTR es:[edi],dx
9f008a91:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f008a98:	6c                   	ins    BYTE PTR es:[edi],dx
9f008a99:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008a9a:	63 3a                	arpl   WORD PTR [edx],di
9f008a9c:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
9f008a9f:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
9f008aa6:	65 
9f008aa7:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f008aab:	61                   	popa   
9f008aac:	70 43                	jo     9f008af1 <ansiEscSeq+0x2f1>
9f008aae:	75 72                	jne    9f008b22 <ansiEscSeq+0x322>
9f008ab0:	72 20                	jb     9f008ad2 <ansiEscSeq+0x2d2>
9f008ab2:	61                   	popa   
9f008ab3:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f008ab4:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f008ab8:	61                   	popa   
9f008ab9:	70 42                	jo     9f008afd <ansiEscSeq+0x2fd>
9f008abb:	61                   	popa   
9f008abc:	73 65                	jae    9f008b23 <ansiEscSeq+0x323>
9f008abe:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
9f008ac2:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f008ac5:	30 38                	xor    BYTE PTR [eax],bh
9f008ac7:	58                   	pop    eax
9f008ac8:	0a 00                	or     al,BYTE PTR [eax]
9f008aca:	00 00                	add    BYTE PTR [eax],al
9f008acc:	6c                   	ins    BYTE PTR es:[edi],dx
9f008acd:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f008ad4:	6c                   	ins    BYTE PTR es:[edi],dx
9f008ad5:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008ad6:	63 3a                	arpl   WORD PTR [edx],di
9f008ad8:	63 72 65             	arpl   WORD PTR [edx+0x65],si
9f008adb:	61                   	popa   
9f008adc:	74 69                	je     9f008b47 <ansiEscSeq+0x347>
9f008ade:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f008adf:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
9f008ae3:	61                   	popa   
9f008ae4:	70 20                	jo     9f008b06 <ansiEscSeq+0x306>
9f008ae6:	72 65                	jb     9f008b4d <ansiEscSeq+0x34d>
9f008ae8:	63 20                	arpl   WORD PTR [eax],sp
9f008aea:	40                   	inc    eax
9f008aeb:	20 30                	and    BYTE PTR [eax],dh
9f008aed:	78 25                	js     9f008b14 <ansiEscSeq+0x314>
9f008aef:	30 38                	xor    BYTE PTR [eax],bh
9f008af1:	58                   	pop    eax
9f008af2:	0a 00                	or     al,BYTE PTR [eax]
9f008af4:	6c                   	ins    BYTE PTR es:[edi],dx
9f008af5:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f008afc:	6c                   	ins    BYTE PTR es:[edi],dx
9f008afd:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008afe:	63 3a                	arpl   WORD PTR [edx],di
9f008b00:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f008b03:	61                   	popa   
9f008b04:	70 43                	jo     9f008b49 <ansiEscSeq+0x349>
9f008b06:	75 72                	jne    9f008b7a <ansiEscSeq+0x37a>
9f008b08:	72 3d                	jb     9f008b47 <ansiEscSeq+0x347>
9f008b0a:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f008b0d:	30 38                	xor    BYTE PTR [eax],bh
9f008b0f:	78 0a                	js     9f008b1b <ansiEscSeq+0x31b>
9f008b11:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f008b14:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b15:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b16:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008b17:	63 3a                	arpl   WORD PTR [edx],di
9f008b19:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f008b1c:	74 75                	je     9f008b93 <ansiEscSeq+0x393>
9f008b1e:	72 6e                	jb     9f008b8e <ansiEscSeq+0x38e>
9f008b20:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
9f008b27:	30 38                	xor    BYTE PTR [eax],bh
9f008b29:	58                   	pop    eax
9f008b2a:	0a 00                	or     al,BYTE PTR [eax]
9f008b2c:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b2d:	69 62 63 5f 72 65 61 	imul   esp,DWORD PTR [edx+0x63],0x6165725f
9f008b34:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b35:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b36:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008b37:	63 3a                	arpl   WORD PTR [edx],di
9f008b39:	20 63 61             	and    BYTE PTR [ebx+0x61],ah
9f008b3c:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b3d:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b3e:	65 64 20 66 6f       	gs and BYTE PTR fs:gs:[esi+0x6f],ah
9f008b43:	72 20                	jb     9f008b65 <ansiEscSeq+0x365>
9f008b45:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008b46:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b47:	64 20 70 6f          	and    BYTE PTR fs:[eax+0x6f],dh
9f008b4b:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f008b52:	78 25                	js     9f008b79 <ansiEscSeq+0x379>
9f008b54:	30 38                	xor    BYTE PTR [eax],bh
9f008b56:	78 2c                	js     9f008b84 <ansiEscSeq+0x384>
9f008b58:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f008b5b:	77 20                	ja     9f008b7d <ansiEscSeq+0x37d>
9f008b5d:	73 69                	jae    9f008bc8 <ansiEscSeq+0x3c8>
9f008b5f:	7a 65                	jp     9f008bc6 <ansiEscSeq+0x3c6>
9f008b61:	3d 30 78 25 30       	cmp    eax,0x30257830
9f008b66:	38 78 00             	cmp    BYTE PTR [eax+0x0],bh
9f008b69:	00 00                	add    BYTE PTR [eax],al
9f008b6b:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f008b6f:	63 5f 72             	arpl   WORD PTR [edi+0x72],bx
9f008b72:	65                   	gs
9f008b73:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b74:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b75:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008b76:	63 3a                	arpl   WORD PTR [edx],di
9f008b78:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f008b7b:	71 75                	jno    9f008bf2 <ansiEscSeq+0x3f2>
9f008b7d:	65                   	gs
9f008b7e:	73 74                	jae    9f008bf4 <ansiEscSeq+0x3f4>
9f008b80:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
9f008b83:	72 20                	jb     9f008ba5 <ansiEscSeq+0x3a5>
9f008b85:	30 20                	xor    BYTE PTR [eax],ah
9f008b87:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
9f008b8a:	65                   	gs
9f008b8b:	73 2c                	jae    9f008bb9 <ansiEscSeq+0x3b9>
9f008b8d:	20 63 61             	and    BYTE PTR [ebx+0x61],ah
9f008b90:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f008b91:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f008b92:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008b93:	74 20                	je     9f008bb5 <ansiEscSeq+0x3b5>
9f008b95:	66                   	data16
9f008b96:	75 6c                	jne    9f008c04 <ansiEscSeq+0x404>
9f008b98:	66 69 6c 6c 0a 00 00 	imul   bp,WORD PTR [esp+ebp*2+0xa],0x0
9f008b9f:	00 09                	add    BYTE PTR [ecx],cl
9f008ba1:	6c                   	ins    BYTE PTR es:[edi],dx
9f008ba2:	69 62 63 5f 72 65 61 	imul   esp,DWORD PTR [edx+0x63],0x6165725f
9f008ba9:	6c                   	ins    BYTE PTR es:[edi],dx
9f008baa:	6c                   	ins    BYTE PTR es:[edi],dx
9f008bab:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008bac:	63 3a                	arpl   WORD PTR [edx],di
9f008bae:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f008bb1:	63 65 69             	arpl   WORD PTR [ebp+0x69],sp
9f008bb4:	76 65                	jbe    9f008c1b <ansiEscSeq+0x41b>
9f008bb6:	64 20 6e 65          	and    BYTE PTR fs:[esi+0x65],ch
9f008bba:	77 20                	ja     9f008bdc <ansiEscSeq+0x3dc>
9f008bbc:	6d                   	ins    DWORD PTR es:[edi],dx
9f008bbd:	61                   	popa   
9f008bbe:	6c                   	ins    BYTE PTR es:[edi],dx
9f008bbf:	6c                   	ins    BYTE PTR es:[edi],dx
9f008bc0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008bc1:	63 20                	arpl   WORD PTR [eax],sp
9f008bc3:	70 6f                	jo     9f008c34 <ansiEscSeq+0x434>
9f008bc5:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f008bcc:	78 25                	js     9f008bf3 <ansiEscSeq+0x3f3>
9f008bce:	30 38                	xor    BYTE PTR [eax],bh
9f008bd0:	78 2c                	js     9f008bfe <ansiEscSeq+0x3fe>
9f008bd2:	20 6f 6c             	and    BYTE PTR [edi+0x6c],ch
9f008bd5:	64 20 73 69          	and    BYTE PTR fs:[ebx+0x69],dh
9f008bd9:	7a 65                	jp     9f008c40 <ansiEscSeq+0x440>
9f008bdb:	3d 30 78 25 30       	cmp    eax,0x30257830
9f008be0:	38 78 2c             	cmp    BYTE PTR [eax+0x2c],bh
9f008be3:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f008be6:	77 20                	ja     9f008c08 <ansiEscSeq+0x408>
9f008be8:	73 69                	jae    9f008c53 <ansiEscSeq+0x453>
9f008bea:	7a 65                	jp     9f008c51 <ansiEscSeq+0x451>
9f008bec:	3d 30 78 25 30       	cmp    eax,0x30257830
9f008bf1:	38 78 0a             	cmp    BYTE PTR [eax+0xa],bh
9f008bf4:	00 00                	add    BYTE PTR [eax],al
9f008bf6:	00 00                	add    BYTE PTR [eax],al
9f008bf8:	09 6c 69 62          	or     DWORD PTR [ecx+ebp*2+0x62],ebp
9f008bfc:	63 5f 72             	arpl   WORD PTR [edi+0x72],bx
9f008bff:	65                   	gs
9f008c00:	61                   	popa   
9f008c01:	6c                   	ins    BYTE PTR es:[edi],dx
9f008c02:	6c                   	ins    BYTE PTR es:[edi],dx
9f008c03:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008c04:	63 3a                	arpl   WORD PTR [edx],di
9f008c06:	20 75 70             	and    BYTE PTR [ebp+0x70],dh
9f008c09:	64                   	fs
9f008c0a:	61                   	popa   
9f008c0b:	74 65                	je     9f008c72 <ansiEscSeq+0x472>
9f008c0d:	64 20 6e 65          	and    BYTE PTR fs:[esi+0x65],ch
9f008c11:	77 20                	ja     9f008c33 <ansiEscSeq+0x433>
9f008c13:	70 6f                	jo     9f008c84 <ansiEscSeq+0x484>
9f008c15:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f008c1c:	78 25                	js     9f008c43 <ansiEscSeq+0x443>
9f008c1e:	30 38                	xor    BYTE PTR [eax],bh
9f008c20:	78 20                	js     9f008c42 <ansiEscSeq+0x442>
9f008c22:	77 69                	ja     9f008c8d <ansiEscSeq+0x48d>
9f008c24:	74 68                	je     9f008c8e <ansiEscSeq+0x48e>
9f008c26:	20 6f 6c             	and    BYTE PTR [edi+0x6c],ch
9f008c29:	64 20 70 6f          	and    BYTE PTR fs:[eax+0x6f],dh
9f008c2d:	69 6e 74 65 72 20 64 	imul   ebp,DWORD PTR [esi+0x74],0x64207265
9f008c34:	61                   	popa   
9f008c35:	74 61                	je     9f008c98 <ansiEscSeq+0x498>
9f008c37:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
9f008c3a:	64 20 63 6c          	and    BYTE PTR fs:[ebx+0x6c],ah
9f008c3e:	65                   	gs
9f008c3f:	61                   	popa   
9f008c40:	72 65                	jb     9f008ca7 <ansiEscSeq+0x4a7>
9f008c42:	64 20 6f 75          	and    BYTE PTR fs:[edi+0x75],ch
9f008c46:	74 20                	je     9f008c68 <ansiEscSeq+0x468>
9f008c48:	72 65                	jb     9f008caf <ansiEscSeq+0x4af>
9f008c4a:	6d                   	ins    DWORD PTR es:[edi],dx
9f008c4b:	61                   	popa   
9f008c4c:	69 6e 67 20 69 66 20 	imul   ebp,DWORD PTR [esi+0x67],0x20666920
9f008c53:	61                   	popa   
9f008c54:	70 70                	jo     9f008cc6 <ansiEscSeq+0x4c6>
9f008c56:	6c                   	ins    BYTE PTR es:[edi],dx
9f008c57:	69 63 61 62 6c 65 0a 	imul   esp,DWORD PTR [ebx+0x61],0xa656c62
9f008c5e:	00 00                	add    BYTE PTR [eax],al
9f008c60:	2d 00 00 28 00       	sub    eax,0x280000
9f008c65:	29 00                	sub    DWORD PTR [eax],eax
9f008c67:	25 2d 31 30 73       	and    eax,0x7330312d
9f008c6c:	00 25 30 32 69 3a    	add    BYTE PTR ds:0x3a693230,ah
9f008c72:	25 30 32 69 3a       	and    eax,0x3a693230
9f008c77:	25 30 32 69 00       	and    eax,0x693230
9f008c7c:	f5                   	cmc    
9f008c7d:	9d                   	popf   
9f008c7e:	ff                   	(bad)  
9f008c7f:	ff 49 9b             	dec    DWORD PTR [ecx-0x65]
9f008c82:	ff                   	(bad)  
9f008c83:	ff                   	(bad)  
9f008c84:	39 9c ff ff 67 9b ff 	cmp    DWORD PTR [edi+edi*8-0x649801],ebx
9f008c8b:	ff                   	(bad)  
9f008c8c:	78 9b                	js     9f008c29 <ansiEscSeq+0x429>
9f008c8e:	ff                   	(bad)  
9f008c8f:	ff f5                	push   ebp
9f008c91:	9d                   	popf   
9f008c92:	ff                   	(bad)  
9f008c93:	ff f5                	push   ebp
9f008c95:	9d                   	popf   
9f008c96:	ff                   	(bad)  
9f008c97:	ff 93 9b ff ff f5    	call   DWORD PTR [ebx-0xa000065]
9f008c9d:	9d                   	popf   
9f008c9e:	ff                   	(bad)  
9f008c9f:	ff f5                	push   ebp
9f008ca1:	9d                   	popf   
9f008ca2:	ff                   	(bad)  
9f008ca3:	ff ae 9b ff ff c9    	jmp    FWORD PTR [esi-0x36000065]
9f008ca9:	9b                   	fwait
9f008caa:	ff                   	(bad)  
9f008cab:	ff f5                	push   ebp
9f008cad:	9d                   	popf   
9f008cae:	ff                   	(bad)  
9f008caf:	ff b7 9c ff ff f5    	push   DWORD PTR [edi-0xa000064]
9f008cb5:	9d                   	popf   
9f008cb6:	ff                   	(bad)  
9f008cb7:	ff f5                	push   ebp
9f008cb9:	9d                   	popf   
9f008cba:	ff                   	(bad)  
9f008cbb:	ff f5                	push   ebp
9f008cbd:	9d                   	popf   
9f008cbe:	ff                   	(bad)  
9f008cbf:	ff e4                	jmp    esp
9f008cc1:	9b                   	fwait
9f008cc2:	ff                   	(bad)  
9f008cc3:	ff f5                	push   ebp
9f008cc5:	9d                   	popf   
9f008cc6:	ff                   	(bad)  
9f008cc7:	ff f5                	push   ebp
9f008cc9:	9d                   	popf   
9f008cca:	ff                   	(bad)  
9f008ccb:	ff f5                	push   ebp
9f008ccd:	9d                   	popf   
9f008cce:	ff                   	(bad)  
9f008ccf:	ff f5                	push   ebp
9f008cd1:	9d                   	popf   
9f008cd2:	ff                   	(bad)  
9f008cd3:	ff c6                	inc    esi
9f008cd5:	9d                   	popf   
9f008cd6:	ff                   	(bad)  
9f008cd7:	ff de                	call   <internal disassembler error>
9f008cd9:	9d                   	popf   
9f008cda:	ff                   	(bad)  
9f008cdb:	ff 2f                	jmp    FWORD PTR [edi]
9f008cdd:	70 72                	jo     9f008d51 <ansiEscSeq+0x551>
9f008cdf:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008ce0:	63 2f                	arpl   WORD PTR [edi],bp
9f008ce2:	00 2f                	add    BYTE PTR [edi],ch
9f008ce4:	73 74                	jae    9f008d5a <ansiEscSeq+0x55a>
9f008ce6:	61                   	popa   
9f008ce7:	74 00                	je     9f008ce9 <ansiEscSeq+0x4e9>
9f008ce9:	73 65                	jae    9f008d50 <ansiEscSeq+0x550>
9f008ceb:	6c                   	ins    BYTE PTR es:[edi],dx
9f008cec:	66                   	data16
9f008ced:	00 72 00             	add    BYTE PTR [edx+0x0],dh
9f008cf0:	20 00                	and    BYTE PTR [eax],al
9f008cf2:	69 64 6c 65 00 00 00 	imul   esp,DWORD PTR [esp+ebp*2+0x65],0x0
9f008cf9:	00 
9f008cfa:	00 00                	add    BYTE PTR [eax],al
9f008cfc:	00 00                	add    BYTE PTR [eax],al
9f008cfe:	59                   	pop    ecx
9f008cff:	40                   	inc    eax
9f008d00:	30 31                	xor    BYTE PTR [ecx],dh
9f008d02:	32 33                	xor    dh,BYTE PTR [ebx]
9f008d04:	34 35                	xor    al,0x35
9f008d06:	36                   	ss
9f008d07:	37                   	aaa    
9f008d08:	38 39                	cmp    BYTE PTR [ecx],bh
9f008d0a:	61                   	popa   
9f008d0b:	62 63 64             	bound  esp,QWORD PTR [ebx+0x64]
9f008d0e:	65                   	gs
9f008d0f:	66 67 68 69 6a       	addr16 pushw 0x6a69
9f008d14:	6b 6c 6d 6e 6f       	imul   ebp,DWORD PTR [ebp+ebp*2+0x6e],0x6f
9f008d19:	70 71                	jo     9f008d8c <ansiEscSeq+0x58c>
9f008d1b:	72 73                	jb     9f008d90 <ansiEscSeq+0x590>
9f008d1d:	74 75                	je     9f008d94 <ansiEscSeq+0x594>
9f008d1f:	76 77                	jbe    9f008d98 <ansiEscSeq+0x598>
9f008d21:	78 79                	js     9f008d9c <ansiEscSeq+0x59c>
9f008d23:	7a 00                	jp     9f008d25 <ansiEscSeq+0x525>
9f008d25:	00 00                	add    BYTE PTR [eax],al
9f008d27:	00 30                	add    BYTE PTR [eax],dh
9f008d29:	31 32                	xor    DWORD PTR [edx],esi
9f008d2b:	33 34 35 36 37 38 39 	xor    esi,DWORD PTR [esi*1+0x39383736]
9f008d32:	41                   	inc    ecx
9f008d33:	42                   	inc    edx
9f008d34:	43                   	inc    ebx
9f008d35:	44                   	inc    esp
9f008d36:	45                   	inc    ebp
9f008d37:	46                   	inc    esi
9f008d38:	47                   	inc    edi
9f008d39:	48                   	dec    eax
9f008d3a:	49                   	dec    ecx
9f008d3b:	4a                   	dec    edx
9f008d3c:	4b                   	dec    ebx
9f008d3d:	4c                   	dec    esp
9f008d3e:	4d                   	dec    ebp
9f008d3f:	4e                   	dec    esi
9f008d40:	4f                   	dec    edi
9f008d41:	50                   	push   eax
9f008d42:	51                   	push   ecx
9f008d43:	52                   	push   edx
9f008d44:	53                   	push   ebx
9f008d45:	54                   	push   esp
9f008d46:	55                   	push   ebp
9f008d47:	56                   	push   esi
9f008d48:	57                   	push   edi
9f008d49:	58                   	pop    eax
9f008d4a:	59                   	pop    ecx
9f008d4b:	5a                   	pop    edx
9f008d4c:	00 3c 4e             	add    BYTE PTR [esi+ecx*2],bh
9f008d4f:	55                   	push   ebp
9f008d50:	4c                   	dec    esp
9f008d51:	4c                   	dec    esp
9f008d52:	3e 00 5b b1          	add    BYTE PTR ds:[ebx-0x4f],bl
9f008d56:	ff                   	(bad)  
9f008d57:	ff 6d b1             	jmp    FWORD PTR [ebp-0x4f]
9f008d5a:	ff                   	(bad)  
9f008d5b:	ff 6d b1             	jmp    FWORD PTR [ebp-0x4f]
9f008d5e:	ff                   	(bad)  
9f008d5f:	ff 61 b1             	jmp    DWORD PTR [ecx-0x4f]
9f008d62:	ff                   	(bad)  
9f008d63:	ff 6d b1             	jmp    FWORD PTR [ebp-0x4f]
9f008d66:	ff                   	(bad)  
9f008d67:	ff 6d b1             	jmp    FWORD PTR [ebp-0x4f]
9f008d6a:	ff                   	(bad)  
9f008d6b:	ff 6d b1             	jmp    FWORD PTR [ebp-0x4f]
9f008d6e:	ff                   	(bad)  
9f008d6f:	ff 6d b1             	jmp    FWORD PTR [ebp-0x4f]
9f008d72:	ff                   	(bad)  
9f008d73:	ff 6d b1             	jmp    FWORD PTR [ebp-0x4f]
9f008d76:	ff                   	(bad)  
9f008d77:	ff 6d b1             	jmp    FWORD PTR [ebp-0x4f]
9f008d7a:	ff                   	(bad)  
9f008d7b:	ff 6d b1             	jmp    FWORD PTR [ebp-0x4f]
9f008d7e:	ff                   	(bad)  
9f008d7f:	ff 55 b1             	call   DWORD PTR [ebp-0x4f]
9f008d82:	ff                   	(bad)  
9f008d83:	ff 6d b1             	jmp    FWORD PTR [ebp-0x4f]
9f008d86:	ff                   	(bad)  
9f008d87:	ff 4f b1             	dec    DWORD PTR [edi-0x4f]
9f008d8a:	ff                   	(bad)  
9f008d8b:	ff 6d b1             	jmp    FWORD PTR [ebp-0x4f]
9f008d8e:	ff                   	(bad)  
9f008d8f:	ff 6d b1             	jmp    FWORD PTR [ebp-0x4f]
9f008d92:	ff                   	(bad)  
9f008d93:	ff 67 b1             	jmp    DWORD PTR [edi-0x4f]
9f008d96:	ff                   	(bad)  
9f008d97:	ff 15 b4 ff ff d8    	call   DWORD PTR ds:0xd8ffffb4
9f008d9d:	b4 ff                	mov    ah,0xff
9f008d9f:	ff d8                	call   <internal disassembler error>
9f008da1:	b4 ff                	mov    ah,0xff
9f008da3:	ff d8                	call   <internal disassembler error>
9f008da5:	b4 ff                	mov    ah,0xff
9f008da7:	ff 97 b4 ff ff d8    	call   DWORD PTR [edi-0x2700004c]
9f008dad:	b4 ff                	mov    ah,0xff
9f008daf:	ff 97 b4 ff ff d8    	call   DWORD PTR [edi-0x2700004c]
9f008db5:	b4 ff                	mov    ah,0xff
9f008db7:	ff d8                	call   <internal disassembler error>
9f008db9:	b4 ff                	mov    ah,0xff
9f008dbb:	ff d8                	call   <internal disassembler error>
9f008dbd:	b4 ff                	mov    ah,0xff
9f008dbf:	ff d8                	call   <internal disassembler error>
9f008dc1:	b4 ff                	mov    ah,0xff
9f008dc3:	ff d8                	call   <internal disassembler error>
9f008dc5:	b4 ff                	mov    ah,0xff
9f008dc7:	ff d8                	call   <internal disassembler error>
9f008dc9:	b4 ff                	mov    ah,0xff
9f008dcb:	ff d8                	call   <internal disassembler error>
9f008dcd:	b4 ff                	mov    ah,0xff
9f008dcf:	ff d8                	call   <internal disassembler error>
9f008dd1:	b4 ff                	mov    ah,0xff
9f008dd3:	ff d8                	call   <internal disassembler error>
9f008dd5:	b4 ff                	mov    ah,0xff
9f008dd7:	ff d8                	call   <internal disassembler error>
9f008dd9:	b4 ff                	mov    ah,0xff
9f008ddb:	ff d8                	call   <internal disassembler error>
9f008ddd:	b4 ff                	mov    ah,0xff
9f008ddf:	ff d8                	call   <internal disassembler error>
9f008de1:	b4 ff                	mov    ah,0xff
9f008de3:	ff d8                	call   <internal disassembler error>
9f008de5:	b4 ff                	mov    ah,0xff
9f008de7:	ff d8                	call   <internal disassembler error>
9f008de9:	b4 ff                	mov    ah,0xff
9f008deb:	ff d8                	call   <internal disassembler error>
9f008ded:	b4 ff                	mov    ah,0xff
9f008def:	ff d8                	call   <internal disassembler error>
9f008df1:	b4 ff                	mov    ah,0xff
9f008df3:	ff 81 b4 ff ff d8    	inc    DWORD PTR [ecx-0x2700004c]
9f008df9:	b4 ff                	mov    ah,0xff
9f008dfb:	ff d8                	call   <internal disassembler error>
9f008dfd:	b4 ff                	mov    ah,0xff
9f008dff:	ff d8                	call   <internal disassembler error>
9f008e01:	b4 ff                	mov    ah,0xff
9f008e03:	ff d8                	call   <internal disassembler error>
9f008e05:	b4 ff                	mov    ah,0xff
9f008e07:	ff d8                	call   <internal disassembler error>
9f008e09:	b4 ff                	mov    ah,0xff
9f008e0b:	ff d8                	call   <internal disassembler error>
9f008e0d:	b4 ff                	mov    ah,0xff
9f008e0f:	ff d8                	call   <internal disassembler error>
9f008e11:	b4 ff                	mov    ah,0xff
9f008e13:	ff d8                	call   <internal disassembler error>
9f008e15:	b4 ff                	mov    ah,0xff
9f008e17:	ff 19                	call   FWORD PTR [ecx]
9f008e19:	b4 ff                	mov    ah,0xff
9f008e1b:	ff d8                	call   <internal disassembler error>
9f008e1d:	b4 ff                	mov    ah,0xff
9f008e1f:	ff 98 b2 ff ff 91    	call   FWORD PTR [eax-0x6e00004e]
9f008e25:	b4 ff                	mov    ah,0xff
9f008e27:	ff 97 b4 ff ff 97    	call   DWORD PTR [edi-0x6800004c]
9f008e2d:	b4 ff                	mov    ah,0xff
9f008e2f:	ff 97 b4 ff ff d8    	call   DWORD PTR [edi-0x2700004c]
9f008e35:	b4 ff                	mov    ah,0xff
9f008e37:	ff 91 b4 ff ff d8    	call   DWORD PTR [ecx-0x2700004c]
9f008e3d:	b4 ff                	mov    ah,0xff
9f008e3f:	ff d8                	call   <internal disassembler error>
9f008e41:	b4 ff                	mov    ah,0xff
9f008e43:	ff d8                	call   <internal disassembler error>
9f008e45:	b4 ff                	mov    ah,0xff
9f008e47:	ff d8                	call   <internal disassembler error>
9f008e49:	b4 ff                	mov    ah,0xff
9f008e4b:	ff cf                	dec    edi
9f008e4d:	b3 ff                	mov    bl,0xff
9f008e4f:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
9f008e52:	ff                   	(bad)  
9f008e53:	ff 91 b3 ff ff d8    	call   DWORD PTR [ecx-0x2700004d]
9f008e59:	b4 ff                	mov    ah,0xff
9f008e5b:	ff d8                	call   <internal disassembler error>
9f008e5d:	b4 ff                	mov    ah,0xff
9f008e5f:	ff ed                	jmp    <internal disassembler error>
9f008e61:	b2 ff                	mov    dl,0xff
9f008e63:	ff d8                	call   <internal disassembler error>
9f008e65:	b4 ff                	mov    ah,0xff
9f008e67:	ff 16                	call   DWORD PTR [esi]
9f008e69:	b5 ff                	mov    ch,0xff
9f008e6b:	ff d8                	call   <internal disassembler error>
9f008e6d:	b4 ff                	mov    ah,0xff
9f008e6f:	ff d8                	call   <internal disassembler error>
9f008e71:	b4 ff                	mov    ah,0xff
9f008e73:	ff 85 b4 ff ff 00    	inc    DWORD PTR [ebp+0xffffb4]
9f008e79:	00 00                	add    BYTE PTR [eax],al
9f008e7b:	00 00                	add    BYTE PTR [eax],al
9f008e7d:	00 24 40             	add    BYTE PTR [eax+eax*2],ah
9f008e80:	b8 1e 85 eb 51       	mov    eax,0x51eb851e
9f008e85:	b8 9e 3f 00 00       	mov    eax,0x3f9e
	...
9f008e9e:	00 00                	add    BYTE PTR [eax],al
9f008ea0:	47                   	inc    edi
9f008ea1:	4d                   	dec    ebp
9f008ea2:	54                   	push   esp
	...

9f008ec0 <_ytab>:
9f008ec0:	1f                   	pop    ds
9f008ec1:	00 00                	add    BYTE PTR [eax],al
9f008ec3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f008ec6:	00 00                	add    BYTE PTR [eax],al
9f008ec8:	1f                   	pop    ds
9f008ec9:	00 00                	add    BYTE PTR [eax],al
9f008ecb:	00 1e                	add    BYTE PTR [esi],bl
9f008ecd:	00 00                	add    BYTE PTR [eax],al
9f008ecf:	00 1f                	add    BYTE PTR [edi],bl
9f008ed1:	00 00                	add    BYTE PTR [eax],al
9f008ed3:	00 1e                	add    BYTE PTR [esi],bl
9f008ed5:	00 00                	add    BYTE PTR [eax],al
9f008ed7:	00 1f                	add    BYTE PTR [edi],bl
9f008ed9:	00 00                	add    BYTE PTR [eax],al
9f008edb:	00 1f                	add    BYTE PTR [edi],bl
9f008edd:	00 00                	add    BYTE PTR [eax],al
9f008edf:	00 1e                	add    BYTE PTR [esi],bl
9f008ee1:	00 00                	add    BYTE PTR [eax],al
9f008ee3:	00 1f                	add    BYTE PTR [edi],bl
9f008ee5:	00 00                	add    BYTE PTR [eax],al
9f008ee7:	00 1e                	add    BYTE PTR [esi],bl
9f008ee9:	00 00                	add    BYTE PTR [eax],al
9f008eeb:	00 1f                	add    BYTE PTR [edi],bl
9f008eed:	00 00                	add    BYTE PTR [eax],al
9f008eef:	00 1f                	add    BYTE PTR [edi],bl
9f008ef1:	00 00                	add    BYTE PTR [eax],al
9f008ef3:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
9f008ef9:	00 00                	add    BYTE PTR [eax],al
9f008efb:	00 1e                	add    BYTE PTR [esi],bl
9f008efd:	00 00                	add    BYTE PTR [eax],al
9f008eff:	00 1f                	add    BYTE PTR [edi],bl
9f008f01:	00 00                	add    BYTE PTR [eax],al
9f008f03:	00 1e                	add    BYTE PTR [esi],bl
9f008f05:	00 00                	add    BYTE PTR [eax],al
9f008f07:	00 1f                	add    BYTE PTR [edi],bl
9f008f09:	00 00                	add    BYTE PTR [eax],al
9f008f0b:	00 1f                	add    BYTE PTR [edi],bl
9f008f0d:	00 00                	add    BYTE PTR [eax],al
9f008f0f:	00 1e                	add    BYTE PTR [esi],bl
9f008f11:	00 00                	add    BYTE PTR [eax],al
9f008f13:	00 1f                	add    BYTE PTR [edi],bl
9f008f15:	00 00                	add    BYTE PTR [eax],al
9f008f17:	00 1e                	add    BYTE PTR [esi],bl
9f008f19:	00 00                	add    BYTE PTR [eax],al
9f008f1b:	00 1f                	add    BYTE PTR [edi],bl
9f008f1d:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

9f008f20 <.rel.dyn>:
9f008f20:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f008f21:	91                   	xchg   ecx,eax
9f008f22:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f008f28:	a8 91                	test   al,0x91
9f008f2a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f008f30:	ac                   	lods   al,BYTE PTR ds:[esi]
9f008f31:	91                   	xchg   ecx,eax
9f008f32:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f008f38:	b0 91                	mov    al,0x91
9f008f3a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f008f40:	b4 91                	mov    ah,0x91
9f008f42:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f008f48:	bc 91 00 9f 08       	mov    esp,0x89f0091
9f008f4d:	00 00                	add    BYTE PTR [eax],al
9f008f4f:	00 c8                	add    al,cl
9f008f51:	91                   	xchg   ecx,eax
9f008f52:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f008f58:	cc                   	int3   
9f008f59:	91                   	xchg   ecx,eax
9f008f5a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f008f60:	d0 91 00 9f 08 00    	rcl    BYTE PTR [ecx+0x89f00],1
9f008f66:	00 00                	add    BYTE PTR [eax],al
9f008f68:	d8 91 00 9f 08 00    	fcom   DWORD PTR [ecx+0x89f00]
9f008f6e:	00 00                	add    BYTE PTR [eax],al
9f008f70:	f8                   	clc    
9f008f71:	91                   	xchg   ecx,eax
9f008f72:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f008f78:	fc                   	cld    
9f008f79:	91                   	xchg   ecx,eax
9f008f7a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f008f80:	00 92 00 9f 08 00    	add    BYTE PTR [edx+0x89f00],dl
9f008f86:	00 00                	add    BYTE PTR [eax],al
9f008f88:	04 92                	add    al,0x92
9f008f8a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f008f90:	08 92 00 9f 08 00    	or     BYTE PTR [edx+0x89f00],dl
9f008f96:	00 00                	add    BYTE PTR [eax],al
9f008f98:	3e 13 00             	adc    eax,DWORD PTR ds:[eax]
9f008f9b:	9f                   	lahf   
9f008f9c:	02 37                	add    dh,BYTE PTR [edi]
9f008f9e:	00 00                	add    BYTE PTR [eax],al
9f008fa0:	7e 13                	jle    9f008fb5 <_ytab+0xf5>
9f008fa2:	00 9f 02 37 00 00    	add    BYTE PTR [edi+0x3702],bl
9f008fa8:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
9f008fa9:	13 00                	adc    eax,DWORD PTR [eax]
9f008fab:	9f                   	lahf   
9f008fac:	02 37                	add    dh,BYTE PTR [edi]
9f008fae:	00 00                	add    BYTE PTR [eax],al
9f008fb0:	c0 13 00             	rcl    BYTE PTR [ebx],0x0
9f008fb3:	9f                   	lahf   
9f008fb4:	02 37                	add    dh,BYTE PTR [edi]
9f008fb6:	00 00                	add    BYTE PTR [eax],al
9f008fb8:	1b 14 00             	sbb    edx,DWORD PTR [eax+eax*1]
9f008fbb:	9f                   	lahf   
9f008fbc:	02 37                	add    dh,BYTE PTR [edi]
9f008fbe:	00 00                	add    BYTE PTR [eax],al
9f008fc0:	7e 14                	jle    9f008fd6 <_ytab+0x116>
9f008fc2:	00 9f 02 37 00 00    	add    BYTE PTR [edi+0x3702],bl
9f008fc8:	b5 14                	mov    ch,0x14
9f008fca:	00 9f 02 37 00 00    	add    BYTE PTR [edi+0x3702],bl
9f008fd0:	f1                   	icebp  
9f008fd1:	14 00                	adc    al,0x0
9f008fd3:	9f                   	lahf   
9f008fd4:	02 37                	add    dh,BYTE PTR [edi]
9f008fd6:	00 00                	add    BYTE PTR [eax],al
9f008fd8:	2f                   	das    
9f008fd9:	15 00 9f 02 37       	adc    eax,0x37029f00
9f008fde:	00 00                	add    BYTE PTR [eax],al
9f008fe0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008fe1:	15 00 9f 02 37       	adc    eax,0x37029f00
9f008fe6:	00 00                	add    BYTE PTR [eax],al
9f008fe8:	b1 15                	mov    cl,0x15
9f008fea:	00 9f 02 37 00 00    	add    BYTE PTR [edi+0x3702],bl
9f008ff0:	9d                   	popf   
9f008ff1:	18 00                	sbb    BYTE PTR [eax],al
9f008ff3:	9f                   	lahf   
9f008ff4:	02 37                	add    dh,BYTE PTR [edi]
9f008ff6:	00 00                	add    BYTE PTR [eax],al
9f008ff8:	ca 18 00             	retf   0x18
9f008ffb:	9f                   	lahf   
9f008ffc:	02 37                	add    dh,BYTE PTR [edi]
9f008ffe:	00 00                	add    BYTE PTR [eax],al
9f009000:	0d 19 00 9f 02       	or     eax,0x29f0019
9f009005:	37                   	aaa    
9f009006:	00 00                	add    BYTE PTR [eax],al
9f009008:	3a 19                	cmp    bl,BYTE PTR [ecx]
9f00900a:	00 9f 02 37 00 00    	add    BYTE PTR [edi+0x3702],bl
9f009010:	7d 19                	jge    9f00902b <_ytab+0x16b>
9f009012:	00 9f 02 37 00 00    	add    BYTE PTR [edi+0x3702],bl
9f009018:	aa                   	stos   BYTE PTR es:[edi],al
9f009019:	19 00                	sbb    DWORD PTR [eax],eax
9f00901b:	9f                   	lahf   
9f00901c:	02 37                	add    dh,BYTE PTR [edi]
9f00901e:	00 00                	add    BYTE PTR [eax],al
9f009020:	b7 54                	mov    bh,0x54
9f009022:	00 9f 02 37 00 00    	add    BYTE PTR [edi+0x3702],bl
9f009028:	1d 61 00 9f 02       	sbb    eax,0x29f0061
9f00902d:	37                   	aaa    
9f00902e:	00 00                	add    BYTE PTR [eax],al
9f009030:	b8 91 00 9f 06       	mov    eax,0x69f0091
9f009035:	25 00 00 c0 91       	and    eax,0x91c00000
9f00903a:	00 9f 06 2a 00 00    	add    BYTE PTR [edi+0x2a06],bl
9f009040:	c4 91 00 9f 06 2c    	les    edx,FWORD PTR [ecx+0x2c069f00]
9f009046:	00 00                	add    BYTE PTR [eax],al
9f009048:	d4 91                	aam    0x91
9f00904a:	00 9f 06 47 00 00    	add    BYTE PTR [edi+0x4706],bl
9f009050:	f4                   	hlt    
9f009051:	91                   	xchg   ecx,eax
9f009052:	00 9f 01 1b 00 00    	add    BYTE PTR [edi+0x1b01],bl
9f009058:	e8 91 00 9f 07       	call   a69f90ee <tmbuf+0x79efdee>
9f00905d:	0f 00 00             	sldt   WORD PTR [eax]
9f009060:	ec                   	in     al,dx
9f009061:	91                   	xchg   ecx,eax
9f009062:	00 9f 07 24 00 00    	add    BYTE PTR [edi+0x2407],bl
9f009068:	f0 91                	lock xchg ecx,eax
9f00906a:	00 9f 07 52 00 00    	add    BYTE PTR [edi+0x5207],bl

Disassembly of section .data:

9f009080 <rcsid>:
9f009080:	24 48                	and    al,0x48
9f009082:	65                   	gs
9f009083:	61                   	popa   
9f009084:	64                   	fs
9f009085:	65                   	gs
9f009086:	72 3a                	jb     9f0090c2 <rcsid+0x42>
9f009088:	20 2f                	and    BYTE PTR [edi],ch
9f00908a:	75 73                	jne    9f0090ff <_DYNAMIC+0x13>
9f00908c:	65                   	gs
9f00908d:	72 36                	jb     9f0090c5 <rcsid+0x45>
9f00908f:	2f                   	das    
9f009090:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f009091:	75 73                	jne    9f009106 <_DYNAMIC+0x1a>
9f009093:	74 65                	je     9f0090fa <_DYNAMIC+0xe>
9f009095:	72 2f                	jb     9f0090c6 <rcsid+0x46>
9f009097:	74 63                	je     9f0090fc <_DYNAMIC+0x10>
9f009099:	6c                   	ins    BYTE PTR es:[edi],dx
9f00909a:	2f                   	das    
9f00909b:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f00909e:	70 61                	jo     9f009101 <_DYNAMIC+0x15>
9f0090a0:	74 2f                	je     9f0090d1 <rcsid+0x51>
9f0090a2:	52                   	push   edx
9f0090a3:	43                   	inc    ebx
9f0090a4:	53                   	push   ebx
9f0090a5:	2f                   	das    
9f0090a6:	73 74                	jae    9f00911c <_DYNAMIC+0x30>
9f0090a8:	72 73                	jb     9f00911d <_DYNAMIC+0x31>
9f0090aa:	74 72                	je     9f00911e <_DYNAMIC+0x32>
9f0090ac:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
9f0090b0:	20 31                	and    BYTE PTR [ecx],dh
9f0090b2:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
9f0090b5:	39 33                	cmp    DWORD PTR [ebx],esi
9f0090b7:	2f                   	das    
9f0090b8:	30 33                	xor    BYTE PTR [ebx],dh
9f0090ba:	2f                   	das    
9f0090bb:	31 39                	xor    DWORD PTR [ecx],edi
9f0090bd:	20 31                	and    BYTE PTR [ecx],dh
9f0090bf:	35 3a 32 35 3a       	xor    eax,0x3a35323a
9f0090c4:	34 30                	xor    al,0x30
9f0090c6:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
9f0090c9:	73 74                	jae    9f00913f <_DYNAMIC+0x53>
9f0090cb:	65                   	gs
9f0090cc:	72 20                	jb     9f0090ee <_DYNAMIC+0x2>
9f0090ce:	45                   	inc    ebp
9f0090cf:	78 70                	js     9f009141 <_DYNAMIC+0x55>
9f0090d1:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
9f0090d4:	53                   	push   ebx
9f0090d5:	50                   	push   eax
9f0090d6:	52                   	push   edx
9f0090d7:	49                   	dec    ecx
9f0090d8:	54                   	push   esp
9f0090d9:	45                   	inc    ebp
9f0090da:	20 28                	and    BYTE PTR [eax],ch
9f0090dc:	42                   	inc    edx
9f0090dd:	65                   	gs
9f0090de:	72 6b                	jb     9f00914b <_DYNAMIC+0x5f>
9f0090e0:	65                   	gs
9f0090e1:	6c                   	ins    BYTE PTR es:[edi],dx
9f0090e2:	65                   	gs
9f0090e3:	79 29                	jns    9f00910e <_DYNAMIC+0x22>
9f0090e5:	00 00                	add    BYTE PTR [eax],al
	...

9f0090e8 <_daylight>:
9f0090e8:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

9f0090ec <_DYNAMIC>:
9f0090ec:	19 00                	sbb    DWORD PTR [eax],eax
9f0090ee:	00 00                	add    BYTE PTR [eax],al
9f0090f0:	f4                   	hlt    
9f0090f1:	91                   	xchg   ecx,eax
9f0090f2:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
9f0090f8:	04 00                	add    al,0x0
9f0090fa:	00 00                	add    BYTE PTR [eax],al
9f0090fc:	1a 00                	sbb    al,BYTE PTR [eax]
9f0090fe:	00 00                	add    BYTE PTR [eax],al
9f009100:	f8                   	clc    
9f009101:	91                   	xchg   ecx,eax
9f009102:	00 9f 1c 00 00 00    	add    BYTE PTR [edi+0x1c],bl
9f009108:	04 00                	add    al,0x0
9f00910a:	00 00                	add    BYTE PTR [eax],al
9f00910c:	04 00                	add    al,0x0
9f00910e:	00 00                	add    BYTE PTR [eax],al
9f009110:	34 80                	xor    al,0x80
9f009112:	00 9f 05 00 00 00    	add    BYTE PTR [edi+0x5],bl
9f009118:	60                   	pusha  
9f009119:	7d 00                	jge    9f00911b <_DYNAMIC+0x2f>
9f00911b:	9f                   	lahf   
9f00911c:	06                   	push   es
9f00911d:	00 00                	add    BYTE PTR [eax],al
9f00911f:	00 a0 77 00 9f 0a    	add    BYTE PTR [eax+0xa9f0077],ah
9f009125:	00 00                	add    BYTE PTR [eax],al
9f009127:	00 d3                	add    bl,dl
9f009129:	02 00                	add    al,BYTE PTR [eax]
9f00912b:	00 0b                	add    BYTE PTR [ebx],cl
9f00912d:	00 00                	add    BYTE PTR [eax],al
9f00912f:	00 10                	add    BYTE PTR [eax],dl
9f009131:	00 00                	add    BYTE PTR [eax],al
9f009133:	00 03                	add    BYTE PTR [ebx],al
9f009135:	00 00                	add    BYTE PTR [eax],al
9f009137:	00 dc                	add    ah,bl
9f009139:	91                   	xchg   ecx,eax
9f00913a:	00 9f 02 00 00 00    	add    BYTE PTR [edi+0x2],bl
9f009140:	18 00                	sbb    BYTE PTR [eax],al
9f009142:	00 00                	add    BYTE PTR [eax],al
9f009144:	14 00                	adc    al,0x0
9f009146:	00 00                	add    BYTE PTR [eax],al
9f009148:	11 00                	adc    DWORD PTR [eax],eax
9f00914a:	00 00                	add    BYTE PTR [eax],al
9f00914c:	17                   	pop    ss
9f00914d:	00 00                	add    BYTE PTR [eax],al
9f00914f:	00 58 90             	add    BYTE PTR [eax-0x70],bl
9f009152:	00 9f 11 00 00 00    	add    BYTE PTR [edi+0x11],bl
9f009158:	20 8f 00 9f 12 00    	and    BYTE PTR [edi+0x129f00],cl
9f00915e:	00 00                	add    BYTE PTR [eax],al
9f009160:	38 01                	cmp    BYTE PTR [ecx],al
9f009162:	00 00                	add    BYTE PTR [eax],al
9f009164:	13 00                	adc    eax,DWORD PTR [eax]
9f009166:	00 00                	add    BYTE PTR [eax],al
9f009168:	08 00                	or     BYTE PTR [eax],al
9f00916a:	00 00                	add    BYTE PTR [eax],al
9f00916c:	16                   	push   ss
9f00916d:	00 00                	add    BYTE PTR [eax],al
9f00916f:	00 00                	add    BYTE PTR [eax],al
9f009171:	00 00                	add    BYTE PTR [eax],al
9f009173:	00 fa                	add    dl,bh
9f009175:	ff                   	(bad)  
9f009176:	ff 6f 0f             	jmp    FWORD PTR [edi+0xf]
	...

Disassembly of section .got:

9f0091a4 <.got>:
9f0091a4:	34 92                	xor    al,0x92
9f0091a6:	00 9f 4c 92 00 9f    	add    BYTE PTR [edi-0x60ff6db4],bl
9f0091ac:	2c 92                	sub    al,0x92
9f0091ae:	00 9f 38 92 00 9f    	add    BYTE PTR [edi-0x60ff6dc8],bl
9f0091b4:	30 92 00 9f 00 00    	xor    BYTE PTR [edx+0x9f00],dl
9f0091ba:	00 00                	add    BYTE PTR [eax],al
9f0091bc:	48                   	dec    eax
9f0091bd:	92                   	xchg   edx,eax
9f0091be:	00 9f 00 00 00 00    	add    BYTE PTR [edi+0x0],bl
9f0091c4:	00 00                	add    BYTE PTR [eax],al
9f0091c6:	00 00                	add    BYTE PTR [eax],al
9f0091c8:	20 92 00 9f 3c 92    	and    BYTE PTR [edx-0x6dc36100],dl
9f0091ce:	00 9f 40 92 00 9f    	add    BYTE PTR [edi-0x60ff6dc0],bl
9f0091d4:	00 00                	add    BYTE PTR [eax],al
9f0091d6:	00 00                	add    BYTE PTR [eax],al
9f0091d8:	00                   	.byte 0x0
9f0091d9:	93                   	xchg   ebx,eax
9f0091da:	00                   	.byte 0x0
9f0091db:	9f                   	lahf   

Disassembly of section .got.plt:

9f0091dc <_GLOBAL_OFFSET_TABLE_>:
9f0091dc:	ec                   	in     al,dx
9f0091dd:	90                   	nop
9f0091de:	00 9f 00 00 00 00    	add    BYTE PTR [edi+0x0],bl
9f0091e4:	00 00                	add    BYTE PTR [eax],al
9f0091e6:	00 00                	add    BYTE PTR [eax],al
9f0091e8:	b6 61                	mov    dh,0x61
9f0091ea:	00 9f c6 61 00 9f    	add    BYTE PTR [edi-0x60ff9e3a],bl
9f0091f0:	d6                   	(bad)  
9f0091f1:	61                   	popa   
9f0091f2:	00                   	.byte 0x0
9f0091f3:	9f                   	lahf   

Disassembly of section .init_array:

9f0091f4 <.init_array>:
9f0091f4:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

9f0091f8 <.fini_array>:
9f0091f8:	8d 16                	lea    edx,[esi]
9f0091fa:	00                   	.byte 0x0
9f0091fb:	9f                   	lahf   

Disassembly of section .data.rel.local:

9f0091fc <digits>:
9f0091fc:	00 8d 00 9f 28 8d    	add    BYTE PTR [ebp-0x72d76100],cl

9f009200 <upper_digits>:
9f009200:	28 8d 00 9f a0 8e    	sub    BYTE PTR [ebp-0x715f6100],cl

9f009204 <_tzname>:
9f009204:	a0 8e 00 9f a0       	mov    al,ds:0xa09f008e
9f009209:	8e 00                	mov    es,WORD PTR [eax]
9f00920b:	9f                   	lahf   

Disassembly of section .bss:

9f009220 <processEnvp>:
9f009220:	00 00                	add    BYTE PTR [eax],al
	...

9f009224 <lasts.1297>:
9f009224:	00 00                	add    BYTE PTR [eax],al
	...

9f009228 <lasts.1305>:
9f009228:	00 00                	add    BYTE PTR [eax],al
	...

9f00922c <filesToCloseCount>:
9f00922c:	00 00                	add    BYTE PTR [eax],al
	...

9f009230 <filesToClose>:
9f009230:	00 00                	add    BYTE PTR [eax],al
	...

9f009234 <resolvePath_envPath>:
9f009234:	00 00                	add    BYTE PTR [eax],al
	...

9f009238 <resolvePath_resPath>:
9f009238:	00 00                	add    BYTE PTR [eax],al
	...

9f00923c <resolvePath_cwd>:
9f00923c:	00 00                	add    BYTE PTR [eax],al
	...

9f009240 <resolvePath_inPath>:
9f009240:	00 00                	add    BYTE PTR [eax],al
	...

9f009244 <libcInitialized>:
9f009244:	00 00                	add    BYTE PTR [eax],al
	...

9f009248 <printBuffer>:
9f009248:	00 00                	add    BYTE PTR [eax],al
	...

9f00924c <params>:
	...

9f009264 <heapBase>:
9f009264:	00 00                	add    BYTE PTR [eax],al
	...

9f009268 <heapCurr>:
9f009268:	00 00                	add    BYTE PTR [eax],al
	...

9f00926c <heapEnd>:
9f00926c:	00 00                	add    BYTE PTR [eax],al
	...

9f009270 <lastHRCreated.1278>:
	...

9f009280 <tinfo.1484>:
	...

9f0092ac <dirEntries.1512>:
9f0092ac:	00 00                	add    BYTE PTR [eax],al
	...

9f0092b0 <cpuid_extended_feature_bits>:
9f0092b0:	00 00                	add    BYTE PTR [eax],al
	...

9f0092b4 <cpuid_procinfo>:
	...

9f0092bc <_dstbias>:
9f0092bc:	00 00                	add    BYTE PTR [eax],al
	...

9f0092c0 <libcTZ>:
	...

9f0092e0 <ticksToWait>:
	...

9f009300 <tmbuf>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	09 01                	or     DWORD PTR [ecx],eax
       2:	00 00                	add    BYTE PTR [eax],al
       4:	04 00                	add    al,0x0
       6:	00 00                	add    BYTE PTR [eax],al
       8:	00 00                	add    BYTE PTR [eax],al
       a:	04 01                	add    al,0x1
       c:	c3                   	ret    
       d:	00 00                	add    BYTE PTR [eax],al
       f:	00 0c 84             	add    BYTE PTR [esp+eax*4],cl
      12:	00 00                	add    BYTE PTR [eax],al
      14:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
      17:	00 00                	add    BYTE PTR [eax],al
      19:	00 00                	add    BYTE PTR [eax],al
      1b:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
      21:	00 00                	add    BYTE PTR [eax],al
      23:	00 00                	add    BYTE PTR [eax],al
      25:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
      2c:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
      2f:	32 00                	xor    al,BYTE PTR [eax]
      31:	00 00                	add    BYTE PTR [eax],al
      33:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
      3a:	03 08                	add    ecx,DWORD PTR [eax]
      3c:	05 00 00 00 00       	add    eax,0x0
      41:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
      44:	ad                   	lods   eax,DWORD PTR ds:[esi]
      45:	00 00                	add    BYTE PTR [eax],al
      47:	00 03                	add    BYTE PTR [ebx],al
      49:	01 06                	add    DWORD PTR [esi],eax
      4b:	48                   	dec    eax
      4c:	00 00                	add    BYTE PTR [eax],al
      4e:	00 03                	add    BYTE PTR [ebx],al
      50:	01 08                	add    DWORD PTR [eax],ecx
      52:	3f                   	aas    
      53:	00 00                	add    BYTE PTR [eax],al
      55:	00 03                	add    BYTE PTR [ebx],al
      57:	02 07                	add    al,BYTE PTR [edi]
      59:	0e                   	push   cs
      5a:	00 00                	add    BYTE PTR [eax],al
      5c:	00 03                	add    BYTE PTR [ebx],al
      5e:	04 07                	add    al,0x7
      60:	2d 00 00 00 03       	sub    eax,0x3000000
      65:	01 06                	add    DWORD PTR [esi],eax
      67:	41                   	inc    ecx
      68:	00 00                	add    BYTE PTR [eax],al
      6a:	00 03                	add    BYTE PTR [ebx],al
      6c:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
      72:	03 08                	add    ecx,DWORD PTR [eax]
      74:	07                   	pop    es
      75:	28 00                	sub    BYTE PTR [eax],al
      77:	00 00                	add    BYTE PTR [eax],al
      79:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
      7c:	2a 01                	sub    al,BYTE PTR [ecx]
      7e:	00 00                	add    BYTE PTR [eax],al
      80:	04 04                	add    al,0x4
      82:	48                   	dec    eax
      83:	00 00                	add    BYTE PTR [eax],al
      85:	00 05 21 00 00 00    	add    BYTE PTR ds:0x21,al
      8b:	01 09                	add    DWORD PTR [ecx],ecx
      8d:	80 00 00             	add    BYTE PTR [eax],0x0
      90:	00 00                	add    BYTE PTR [eax],al
      92:	00 00                	add    BYTE PTR [eax],al
      94:	9f                   	lahf   
      95:	38 00                	cmp    BYTE PTR [eax],al
      97:	00 00                	add    BYTE PTR [eax],al
      99:	01 9c b8 00 00 00 06 	add    DWORD PTR [eax+edi*4+0x6000000],ebx
      a0:	73 00                	jae    a2 <sysEnter_Vector-0x12ff5e>
      a2:	01 09                	add    DWORD PTR [ecx],ecx
      a4:	b8 00 00 00 02       	mov    eax,0x2000000
      a9:	91                   	xchg   ecx,eax
      aa:	00 06                	add    BYTE PTR [esi],al
      ac:	63 00                	arpl   WORD PTR [eax],ax
      ae:	01 09                	add    DWORD PTR [ecx],ecx
      b0:	25 00 00 00 02       	and    eax,0x2000000
      b5:	91                   	xchg   ecx,eax
      b6:	04 00                	add    al,0x0
      b8:	04 04                	add    al,0x4
      ba:	be 00 00 00 07       	mov    esi,0x7000000
      bf:	48                   	dec    eax
      c0:	00 00                	add    BYTE PTR [eax],al
      c2:	00 05 70 00 00 00    	add    BYTE PTR ds:0x70,al
      c8:	01 11                	add    DWORD PTR [ecx],edx
      ca:	80 00 00             	add    BYTE PTR [eax],0x0
      cd:	00 38                	add    BYTE PTR [eax],bh
      cf:	00 00                	add    BYTE PTR [eax],al
      d1:	9f                   	lahf   
      d2:	38 00                	cmp    BYTE PTR [eax],al
      d4:	00 00                	add    BYTE PTR [eax],al
      d6:	01 9c f5 00 00 00 06 	add    DWORD PTR [ebp+esi*8+0x6000000],ebx
      dd:	73 00                	jae    df <sysEnter_Vector-0x12ff21>
      df:	01 11                	add    DWORD PTR [ecx],edx
      e1:	b8 00 00 00 02       	mov    eax,0x2000000
      e6:	91                   	xchg   ecx,eax
      e7:	00 06                	add    BYTE PTR [esi],al
      e9:	63 00                	arpl   WORD PTR [eax],ax
      eb:	01 11                	add    DWORD PTR [ecx],edx
      ed:	25 00 00 00 02       	and    eax,0x2000000
      f2:	91                   	xchg   ecx,eax
      f3:	04 00                	add    al,0x0
      f5:	08 78 00             	or     BYTE PTR [eax+0x0],bh
      f8:	00 00                	add    BYTE PTR [eax],al
      fa:	02 33                	add    dh,BYTE PTR [ebx]
      fc:	06                   	push   es
      fd:	01 00                	add    DWORD PTR [eax],eax
      ff:	00 05 03 20 92 00    	add    BYTE PTR ds:0x922003,al
     105:	9f                   	lahf   
     106:	04 04                	add    al,0x4
     108:	80 00 00             	add    BYTE PTR [eax],0x0
     10b:	00 00                	add    BYTE PTR [eax],al
     10d:	48                   	dec    eax
     10e:	01 00                	add    DWORD PTR [eax],eax
     110:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     113:	76 00                	jbe    115 <sysEnter_Vector-0x12feeb>
     115:	00 00                	add    BYTE PTR [eax],al
     117:	04 01                	add    al,0x1
     119:	c3                   	ret    
     11a:	00 00                	add    BYTE PTR [eax],al
     11c:	00 0c 39             	add    BYTE PTR [ecx+edi*1],cl
     11f:	01 00                	add    DWORD PTR [eax],eax
     121:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
     124:	00 00                	add    BYTE PTR [eax],al
     126:	70 00                	jo     128 <sysEnter_Vector-0x12fed8>
     128:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
     12e:	79 00                	jns    130 <sysEnter_Vector-0x12fed0>
     130:	00 00                	add    BYTE PTR [eax],al
     132:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
     139:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
     13c:	32 00                	xor    al,BYTE PTR [eax]
     13e:	00 00                	add    BYTE PTR [eax],al
     140:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
     147:	03 08                	add    ecx,DWORD PTR [eax]
     149:	05 00 00 00 00       	add    eax,0x0
     14e:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
     151:	ad                   	lods   eax,DWORD PTR ds:[esi]
     152:	00 00                	add    BYTE PTR [eax],al
     154:	00 03                	add    BYTE PTR [ebx],al
     156:	01 06                	add    DWORD PTR [esi],eax
     158:	48                   	dec    eax
     159:	00 00                	add    BYTE PTR [eax],al
     15b:	00 03                	add    BYTE PTR [ebx],al
     15d:	01 08                	add    DWORD PTR [eax],ecx
     15f:	3f                   	aas    
     160:	00 00                	add    BYTE PTR [eax],al
     162:	00 03                	add    BYTE PTR [ebx],al
     164:	02 07                	add    al,BYTE PTR [edi]
     166:	0e                   	push   cs
     167:	00 00                	add    BYTE PTR [eax],al
     169:	00 03                	add    BYTE PTR [ebx],al
     16b:	04 07                	add    al,0x7
     16d:	2d 00 00 00 03       	sub    eax,0x3000000
     172:	01 06                	add    DWORD PTR [esi],eax
     174:	41                   	inc    ecx
     175:	00 00                	add    BYTE PTR [eax],al
     177:	00 03                	add    BYTE PTR [ebx],al
     179:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     17f:	03 08                	add    ecx,DWORD PTR [eax]
     181:	07                   	pop    es
     182:	28 00                	sub    BYTE PTR [eax],al
     184:	00 00                	add    BYTE PTR [eax],al
     186:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
     189:	2a 01                	sub    al,BYTE PTR [ecx]
     18b:	00 00                	add    BYTE PTR [eax],al
     18d:	04 04                	add    al,0x4
     18f:	48                   	dec    eax
     190:	00 00                	add    BYTE PTR [eax],al
     192:	00 05 63 01 00 00    	add    BYTE PTR ds:0x163,al
     198:	01 26                	add    DWORD PTR [esi],esp
     19a:	25 00 00 00 70       	and    eax,0x70000000
     19f:	00 00                	add    BYTE PTR [eax],al
     1a1:	9f                   	lahf   
     1a2:	55                   	push   ebp
     1a3:	00 00                	add    BYTE PTR [eax],al
     1a5:	00 01                	add    BYTE PTR [ecx],al
     1a7:	9c                   	pushf  
     1a8:	dd 00                	fld    QWORD PTR [eax]
     1aa:	00 00                	add    BYTE PTR [eax],al
     1ac:	06                   	push   es
     1ad:	2c 12                	sub    al,0x12
     1af:	00 00                	add    BYTE PTR [eax],al
     1b1:	01 26                	add    DWORD PTR [esi],esp
     1b3:	80 00 00             	add    BYTE PTR [eax],0x0
     1b6:	00 02                	add    BYTE PTR [edx],al
     1b8:	91                   	xchg   ecx,eax
     1b9:	00 06                	add    BYTE PTR [esi],al
     1bb:	33 01                	xor    eax,DWORD PTR [ecx]
     1bd:	00 00                	add    BYTE PTR [eax],al
     1bf:	01 26                	add    DWORD PTR [esi],esp
     1c1:	80 00 00             	add    BYTE PTR [eax],0x0
     1c4:	00 02                	add    BYTE PTR [edx],al
     1c6:	91                   	xchg   ecx,eax
     1c7:	04 07                	add    al,0x7
     1c9:	63 00                	arpl   WORD PTR [eax],ax
     1cb:	01 28                	add    DWORD PTR [eax],ebp
     1cd:	48                   	dec    eax
     1ce:	00 00                	add    BYTE PTR [eax],al
     1d0:	00 01                	add    BYTE PTR [ecx],al
     1d2:	51                   	push   ecx
     1d3:	07                   	pop    es
     1d4:	70 00                	jo     1d6 <sysEnter_Vector-0x12fe2a>
     1d6:	01 28                	add    DWORD PTR [eax],ebp
     1d8:	80 00 00             	add    BYTE PTR [eax],0x0
     1db:	00 01                	add    BYTE PTR [ecx],al
     1dd:	56                   	push   esi
     1de:	07                   	pop    es
     1df:	73 00                	jae    1e1 <sysEnter_Vector-0x12fe1f>
     1e1:	01 28                	add    DWORD PTR [eax],ebp
     1e3:	80 00 00             	add    BYTE PTR [eax],0x0
     1e6:	00 01                	add    BYTE PTR [ecx],al
     1e8:	53                   	push   ebx
     1e9:	00 05 6b 01 00 00    	add    BYTE PTR ds:0x16b,al
     1ef:	01 34 25 00 00 00 c5 	add    DWORD PTR [eiz*1-0x3b000000],esi
     1f6:	00 00                	add    BYTE PTR [eax],al
     1f8:	9f                   	lahf   
     1f9:	55                   	push   ebp
     1fa:	00 00                	add    BYTE PTR [eax],al
     1fc:	00 01                	add    BYTE PTR [ecx],al
     1fe:	9c                   	pushf  
     1ff:	34 01                	xor    al,0x1
     201:	00 00                	add    BYTE PTR [eax],al
     203:	06                   	push   es
     204:	2c 12                	sub    al,0x12
     206:	00 00                	add    BYTE PTR [eax],al
     208:	01 34 80             	add    DWORD PTR [eax+eax*4],esi
     20b:	00 00                	add    BYTE PTR [eax],al
     20d:	00 02                	add    BYTE PTR [edx],al
     20f:	91                   	xchg   ecx,eax
     210:	00 06                	add    BYTE PTR [esi],al
     212:	33 01                	xor    eax,DWORD PTR [ecx]
     214:	00 00                	add    BYTE PTR [eax],al
     216:	01 34 80             	add    DWORD PTR [eax+eax*4],esi
     219:	00 00                	add    BYTE PTR [eax],al
     21b:	00 02                	add    BYTE PTR [edx],al
     21d:	91                   	xchg   ecx,eax
     21e:	04 07                	add    al,0x7
     220:	63 00                	arpl   WORD PTR [eax],ax
     222:	01 36                	add    DWORD PTR [esi],esi
     224:	48                   	dec    eax
     225:	00 00                	add    BYTE PTR [eax],al
     227:	00 01                	add    BYTE PTR [ecx],al
     229:	51                   	push   ecx
     22a:	07                   	pop    es
     22b:	70 00                	jo     22d <sysEnter_Vector-0x12fdd3>
     22d:	01 36                	add    DWORD PTR [esi],esi
     22f:	80 00 00             	add    BYTE PTR [eax],0x0
     232:	00 01                	add    BYTE PTR [ecx],al
     234:	56                   	push   esi
     235:	07                   	pop    es
     236:	73 00                	jae    238 <sysEnter_Vector-0x12fdc8>
     238:	01 36                	add    DWORD PTR [esi],esi
     23a:	80 00 00             	add    BYTE PTR [eax],0x0
     23d:	00 01                	add    BYTE PTR [ecx],al
     23f:	53                   	push   ebx
     240:	00 08                	add    BYTE PTR [eax],cl
     242:	78 00                	js     244 <sysEnter_Vector-0x12fdbc>
     244:	00 00                	add    BYTE PTR [eax],al
     246:	02 33                	add    dh,BYTE PTR [ebx]
     248:	45                   	inc    ebp
     249:	01 00                	add    DWORD PTR [eax],eax
     24b:	00 05 03 20 92 00    	add    BYTE PTR ds:0x922003,al
     251:	9f                   	lahf   
     252:	04 04                	add    al,0x4
     254:	80 00 00             	add    BYTE PTR [eax],0x0
     257:	00 00                	add    BYTE PTR [eax],al
     259:	3c 01                	cmp    al,0x1
     25b:	00 00                	add    BYTE PTR [eax],al
     25d:	04 00                	add    al,0x0
     25f:	f4                   	hlt    
     260:	00 00                	add    BYTE PTR [eax],al
     262:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     265:	c3                   	ret    
     266:	00 00                	add    BYTE PTR [eax],al
     268:	00 0c 82             	add    BYTE PTR [edx+eax*4],cl
     26b:	01 00                	add    DWORD PTR [eax],eax
     26d:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
     270:	00 00                	add    BYTE PTR [eax],al
     272:	1c 01                	sbb    al,0x1
     274:	00 9f 2e 01 00 00    	add    BYTE PTR [edi+0x12e],bl
     27a:	23 01                	and    eax,DWORD PTR [ecx]
     27c:	00 00                	add    BYTE PTR [eax],al
     27e:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
     285:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
     288:	32 00                	xor    al,BYTE PTR [eax]
     28a:	00 00                	add    BYTE PTR [eax],al
     28c:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
     293:	03 08                	add    ecx,DWORD PTR [eax]
     295:	05 00 00 00 00       	add    eax,0x0
     29a:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
     29d:	ad                   	lods   eax,DWORD PTR ds:[esi]
     29e:	00 00                	add    BYTE PTR [eax],al
     2a0:	00 03                	add    BYTE PTR [ebx],al
     2a2:	01 06                	add    DWORD PTR [esi],eax
     2a4:	48                   	dec    eax
     2a5:	00 00                	add    BYTE PTR [eax],al
     2a7:	00 03                	add    BYTE PTR [ebx],al
     2a9:	01 08                	add    DWORD PTR [eax],ecx
     2ab:	3f                   	aas    
     2ac:	00 00                	add    BYTE PTR [eax],al
     2ae:	00 03                	add    BYTE PTR [ebx],al
     2b0:	02 07                	add    al,BYTE PTR [edi]
     2b2:	0e                   	push   cs
     2b3:	00 00                	add    BYTE PTR [eax],al
     2b5:	00 03                	add    BYTE PTR [ebx],al
     2b7:	04 07                	add    al,0x7
     2b9:	2d 00 00 00 03       	sub    eax,0x3000000
     2be:	01 06                	add    DWORD PTR [esi],eax
     2c0:	41                   	inc    ecx
     2c1:	00 00                	add    BYTE PTR [eax],al
     2c3:	00 03                	add    BYTE PTR [ebx],al
     2c5:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     2cb:	03 08                	add    ecx,DWORD PTR [eax]
     2cd:	07                   	pop    es
     2ce:	28 00                	sub    BYTE PTR [eax],al
     2d0:	00 00                	add    BYTE PTR [eax],al
     2d2:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
     2d5:	2a 01                	sub    al,BYTE PTR [ecx]
     2d7:	00 00                	add    BYTE PTR [eax],al
     2d9:	04 04                	add    al,0x4
     2db:	48                   	dec    eax
     2dc:	00 00                	add    BYTE PTR [eax],al
     2de:	00 05 74 01 00 00    	add    BYTE PTR ds:0x174,al
     2e4:	01 2a                	add    DWORD PTR [edx],ebp
     2e6:	80 00 00             	add    BYTE PTR [eax],0x0
     2e9:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     2ec:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
     2f2:	01 9c d7 00 00 00 06 	add    DWORD PTR [edi+edx*8+0x6000000],ebx
     2f9:	73 00                	jae    2fb <sysEnter_Vector-0x12fd05>
     2fb:	01 2a                	add    DWORD PTR [edx],ebp
     2fd:	80 00 00             	add    BYTE PTR [eax],0x0
     300:	00 02                	add    BYTE PTR [edx],al
     302:	91                   	xchg   ecx,eax
     303:	00 07                	add    BYTE PTR [edi],al
     305:	7c 01                	jl     308 <sysEnter_Vector-0x12fcf8>
     307:	00 00                	add    BYTE PTR [eax],al
     309:	01 2a                	add    DWORD PTR [edx],ebp
     30b:	80 00 00             	add    BYTE PTR [eax],0x0
     30e:	00 02                	add    BYTE PTR [edx],al
     310:	91                   	xchg   ecx,eax
     311:	04 08                	add    al,0x8
     313:	ab                   	stos   DWORD PTR es:[edi],eax
     314:	01 00                	add    DWORD PTR [eax],eax
     316:	00 01                	add    BYTE PTR [ecx],al
     318:	2c 80                	sub    al,0x80
     31a:	00 00                	add    BYTE PTR [eax],al
     31c:	00 05 03 24 92 00    	add    BYTE PTR ds:0x922403,al
     322:	9f                   	lahf   
     323:	09 63 68             	or     DWORD PTR [ebx+0x68],esp
     326:	00 01                	add    BYTE PTR [ecx],al
     328:	2d 25 00 00 00       	sub    eax,0x25
     32d:	01 56 00             	add    DWORD PTR [esi+0x0],edx
     330:	05 b1 01 00 00       	add    eax,0x1b1
     335:	01 3c 80             	add    DWORD PTR [eax+eax*4],edi
     338:	00 00                	add    BYTE PTR [eax],al
     33a:	00 b3 01 00 9f 97    	add    BYTE PTR [ebx-0x6860ffff],dh
     340:	00 00                	add    BYTE PTR [eax],al
     342:	00 01                	add    BYTE PTR [ecx],al
     344:	9c                   	pushf  
     345:	28 01                	sub    BYTE PTR [ecx],al
     347:	00 00                	add    BYTE PTR [eax],al
     349:	06                   	push   es
     34a:	73 00                	jae    34c <sysEnter_Vector-0x12fcb4>
     34c:	01 3c 80             	add    DWORD PTR [eax+eax*4],edi
     34f:	00 00                	add    BYTE PTR [eax],al
     351:	00 02                	add    BYTE PTR [edx],al
     353:	91                   	xchg   ecx,eax
     354:	00 07                	add    BYTE PTR [edi],al
     356:	7c 01                	jl     359 <sysEnter_Vector-0x12fca7>
     358:	00 00                	add    BYTE PTR [eax],al
     35a:	01 3c 80             	add    DWORD PTR [eax+eax*4],edi
     35d:	00 00                	add    BYTE PTR [eax],al
     35f:	00 02                	add    BYTE PTR [edx],al
     361:	91                   	xchg   ecx,eax
     362:	04 08                	add    al,0x8
     364:	ab                   	stos   DWORD PTR es:[edi],eax
     365:	01 00                	add    DWORD PTR [eax],eax
     367:	00 01                	add    BYTE PTR [ecx],al
     369:	3e 80 00 00          	add    BYTE PTR ds:[eax],0x0
     36d:	00 05 03 28 92 00    	add    BYTE PTR ds:0x922803,al
     373:	9f                   	lahf   
     374:	09 63 68             	or     DWORD PTR [ebx+0x68],esp
     377:	00 01                	add    BYTE PTR [ecx],al
     379:	3f                   	aas    
     37a:	25 00 00 00 01       	and    eax,0x1000000
     37f:	56                   	push   esi
     380:	00 0a                	add    BYTE PTR [edx],cl
     382:	78 00                	js     384 <sysEnter_Vector-0x12fc7c>
     384:	00 00                	add    BYTE PTR [eax],al
     386:	02 33                	add    dh,BYTE PTR [ebx]
     388:	39 01                	cmp    DWORD PTR [ecx],eax
     38a:	00 00                	add    BYTE PTR [eax],al
     38c:	05 03 20 92 00       	add    eax,0x922003
     391:	9f                   	lahf   
     392:	04 04                	add    al,0x4
     394:	80 00 00             	add    BYTE PTR [eax],0x0
     397:	00 00                	add    BYTE PTR [eax],al
     399:	e8 01 00 00 04       	call   400039f <sysEnter_Vector+0x3ed039f>
     39e:	00 90 01 00 00 04    	add    BYTE PTR [eax+0x4000001],dl
     3a4:	01 c3                	add    ebx,eax
     3a6:	00 00                	add    BYTE PTR [eax],al
     3a8:	00 0c d7             	add    BYTE PTR [edi+edx*8],cl
     3ab:	01 00                	add    DWORD PTR [eax],eax
     3ad:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
     3b0:	00 00                	add    BYTE PTR [eax],al
     3b2:	4c                   	dec    esp
     3b3:	02 00                	add    al,BYTE PTR [eax]
     3b5:	9f                   	lahf   
     3b6:	65 02 00             	add    al,BYTE PTR gs:[eax]
     3b9:	00 ae 01 00 00 02    	add    BYTE PTR [esi+0x2000001],ch
     3bf:	01 08                	add    DWORD PTR [eax],ecx
     3c1:	3f                   	aas    
     3c2:	00 00                	add    BYTE PTR [eax],al
     3c4:	00 02                	add    BYTE PTR [edx],al
     3c6:	02 07                	add    al,BYTE PTR [edi]
     3c8:	0e                   	push   cs
     3c9:	00 00                	add    BYTE PTR [eax],al
     3cb:	00 02                	add    BYTE PTR [edx],al
     3cd:	04 07                	add    al,0x7
     3cf:	32 00                	xor    al,BYTE PTR [eax]
     3d1:	00 00                	add    BYTE PTR [eax],al
     3d3:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     3d6:	2d 00 00 00 02       	sub    eax,0x2000000
     3db:	01 06                	add    DWORD PTR [esi],eax
     3dd:	41                   	inc    ecx
     3de:	00 00                	add    BYTE PTR [eax],al
     3e0:	00 02                	add    BYTE PTR [edx],al
     3e2:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     3e8:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     3ef:	02 08                	add    cl,BYTE PTR [eax]
     3f1:	05 00 00 00 00       	add    eax,0x0
     3f6:	02 08                	add    cl,BYTE PTR [eax]
     3f8:	07                   	pop    es
     3f9:	28 00                	sub    BYTE PTR [eax],al
     3fb:	00 00                	add    BYTE PTR [eax],al
     3fd:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     404:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     407:	2a 01                	sub    al,BYTE PTR [ecx]
     409:	00 00                	add    BYTE PTR [eax],al
     40b:	04 04                	add    al,0x4
     40d:	78 00                	js     40f <sysEnter_Vector-0x12fbf1>
     40f:	00 00                	add    BYTE PTR [eax],al
     411:	02 01                	add    al,BYTE PTR [ecx]
     413:	06                   	push   es
     414:	48                   	dec    eax
     415:	00 00                	add    BYTE PTR [eax],al
     417:	00 02                	add    BYTE PTR [edx],al
     419:	0c 04                	or     al,0x4
     41b:	ad                   	lods   eax,DWORD PTR ds:[esi]
     41c:	00 00                	add    BYTE PTR [eax],al
     41e:	00 05 c9 01 00 00    	add    BYTE PTR ds:0x1c9,al
     424:	01 0a                	add    DWORD PTR [edx],ecx
     426:	4c                   	dec    esp
     427:	02 00                	add    al,BYTE PTR [eax]
     429:	9f                   	lahf   
     42a:	77 00                	ja     42c <sysEnter_Vector-0x12fbd4>
     42c:	00 00                	add    BYTE PTR [eax],al
     42e:	01 9c cc 00 00 00 06 	add    DWORD PTR [esp+ecx*8+0x6000000],ebx
     435:	73 00                	jae    437 <sysEnter_Vector-0x12fbc9>
     437:	01 0a                	add    DWORD PTR [edx],ecx
     439:	72 00                	jb     43b <sysEnter_Vector-0x12fbc5>
     43b:	00 00                	add    BYTE PTR [eax],al
     43d:	02 91 00 07 69 00    	add    dl,BYTE PTR [ecx+0x690700]
     443:	01 0c 4f             	add    DWORD PTR [edi+ecx*2],ecx
     446:	00 00                	add    BYTE PTR [eax],al
     448:	00 02                	add    BYTE PTR [edx],al
     44a:	91                   	xchg   ecx,eax
     44b:	6c                   	ins    BYTE PTR es:[edi],dx
     44c:	07                   	pop    es
     44d:	6a 00                	push   0x0
     44f:	01 0c 4f             	add    DWORD PTR [edi+ecx*2],ecx
     452:	00 00                	add    BYTE PTR [eax],al
     454:	00 02                	add    BYTE PTR [edx],al
     456:	91                   	xchg   ecx,eax
     457:	68 07 63 00 01       	push   0x1006307
     45c:	0d 78 00 00 00       	or     eax,0x78
     461:	02 91 67 00 05 b8    	add    dl,BYTE PTR [ecx-0x47faff99]
     467:	01 00                	add    DWORD PTR [eax],eax
     469:	00 01                	add    BYTE PTR [ecx],al
     46b:	16                   	push   ss
     46c:	c3                   	ret    
     46d:	02 00                	add    al,BYTE PTR [eax]
     46f:	9f                   	lahf   
     470:	bb 00 00 00 01       	mov    ebx,0x1000000
     475:	9c                   	pushf  
     476:	14 01                	adc    al,0x1
     478:	00 00                	add    BYTE PTR [eax],al
     47a:	06                   	push   es
     47b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     47c:	00 01                	add    BYTE PTR [ecx],al
     47e:	16                   	push   ss
     47f:	4f                   	dec    edi
     480:	00 00                	add    BYTE PTR [eax],al
     482:	00 02                	add    BYTE PTR [edx],al
     484:	91                   	xchg   ecx,eax
     485:	00 06                	add    BYTE PTR [esi],al
     487:	73 00                	jae    489 <sysEnter_Vector-0x12fb77>
     489:	01 16                	add    DWORD PTR [esi],edx
     48b:	72 00                	jb     48d <sysEnter_Vector-0x12fb73>
     48d:	00 00                	add    BYTE PTR [eax],al
     48f:	02 91 04 07 69 00    	add    dl,BYTE PTR [ecx+0x690704]
     495:	01 18                	add    DWORD PTR [eax],ebx
     497:	4f                   	dec    edi
     498:	00 00                	add    BYTE PTR [eax],al
     49a:	00 02                	add    BYTE PTR [edx],al
     49c:	91                   	xchg   ecx,eax
     49d:	6c                   	ins    BYTE PTR es:[edi],dx
     49e:	08 d2                	or     dl,dl
     4a0:	01 00                	add    DWORD PTR [eax],eax
     4a2:	00 01                	add    BYTE PTR [ecx],al
     4a4:	18 4f 00             	sbb    BYTE PTR [edi+0x0],cl
     4a7:	00 00                	add    BYTE PTR [eax],al
     4a9:	02 91 68 00 09 bd    	add    dl,BYTE PTR [ecx-0x42f6ff98]
     4af:	01 00                	add    DWORD PTR [eax],eax
     4b1:	00 01                	add    BYTE PTR [ecx],al
     4b3:	26                   	es
     4b4:	72 00                	jb     4b6 <sysEnter_Vector-0x12fb4a>
     4b6:	00 00                	add    BYTE PTR [eax],al
     4b8:	7e 03                	jle    4bd <sysEnter_Vector-0x12fb43>
     4ba:	00 9f bd 00 00 00    	add    BYTE PTR [edi+0xbd],bl
     4c0:	01 9c 60 01 00 00 06 	add    DWORD PTR [eax+eiz*2+0x6000001],ebx
     4c7:	6e                   	outs   dx,BYTE PTR ds:[esi]
     4c8:	00 01                	add    BYTE PTR [ecx],al
     4ca:	26                   	es
     4cb:	4f                   	dec    edi
     4cc:	00 00                	add    BYTE PTR [eax],al
     4ce:	00 02                	add    BYTE PTR [edx],al
     4d0:	91                   	xchg   ecx,eax
     4d1:	00 06                	add    BYTE PTR [esi],al
     4d3:	73 00                	jae    4d5 <sysEnter_Vector-0x12fb2b>
     4d5:	01 26                	add    DWORD PTR [esi],esp
     4d7:	72 00                	jb     4d9 <sysEnter_Vector-0x12fb27>
     4d9:	00 00                	add    BYTE PTR [eax],al
     4db:	02 91 04 07 69 00    	add    dl,BYTE PTR [ecx+0x690704]
     4e1:	01 28                	add    DWORD PTR [eax],ebp
     4e3:	4f                   	dec    edi
     4e4:	00 00                	add    BYTE PTR [eax],al
     4e6:	00 02                	add    BYTE PTR [edx],al
     4e8:	91                   	xchg   ecx,eax
     4e9:	6c                   	ins    BYTE PTR es:[edi],dx
     4ea:	08 d2                	or     dl,dl
     4ec:	01 00                	add    DWORD PTR [eax],eax
     4ee:	00 01                	add    BYTE PTR [ecx],al
     4f0:	28 4f 00             	sub    BYTE PTR [edi+0x0],cl
     4f3:	00 00                	add    BYTE PTR [eax],al
     4f5:	02 91 68 00 0a c3    	add    dl,BYTE PTR [ecx-0x3cf5ff98]
     4fb:	01 00                	add    DWORD PTR [eax],eax
     4fd:	00 01                	add    BYTE PTR [ecx],al
     4ff:	38 4f 00             	cmp    BYTE PTR [edi+0x0],cl
     502:	00 00                	add    BYTE PTR [eax],al
     504:	3b 04 00             	cmp    eax,DWORD PTR [eax+eax*1]
     507:	9f                   	lahf   
     508:	5c                   	pop    esp
     509:	00 00                	add    BYTE PTR [eax],al
     50b:	00 01                	add    BYTE PTR [ecx],al
     50d:	9c                   	pushf  
     50e:	ac                   	lods   al,BYTE PTR ds:[esi]
     50f:	01 00                	add    DWORD PTR [eax],eax
     511:	00 06                	add    BYTE PTR [esi],al
     513:	73 74                	jae    589 <sysEnter_Vector-0x12fa77>
     515:	72 00                	jb     517 <sysEnter_Vector-0x12fae9>
     517:	01 38                	add    DWORD PTR [eax],edi
     519:	72 00                	jb     51b <sysEnter_Vector-0x12fae5>
     51b:	00 00                	add    BYTE PTR [eax],al
     51d:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
     523:	73 00                	jae    525 <sysEnter_Vector-0x12fadb>
     525:	01 3a                	add    DWORD PTR [edx],edi
     527:	4f                   	dec    edi
     528:	00 00                	add    BYTE PTR [eax],al
     52a:	00 02                	add    BYTE PTR [edx],al
     52c:	91                   	xchg   ecx,eax
     52d:	74 0b                	je     53a <sysEnter_Vector-0x12fac6>
     52f:	52                   	push   edx
     530:	04 00                	add    al,0x0
     532:	9f                   	lahf   
     533:	40                   	inc    eax
     534:	00 00                	add    BYTE PTR [eax],al
     536:	00 07                	add    BYTE PTR [edi],al
     538:	69 00 01 3e 4f 00    	imul   eax,DWORD PTR [eax],0x4f3e01
     53e:	00 00                	add    BYTE PTR [eax],al
     540:	02 91 70 00 00 09    	add    dl,BYTE PTR [ecx+0x9000070]
     546:	43                   	inc    ebx
     547:	0f 00 00             	sldt   WORD PTR [eax]
     54a:	01 45 4f             	add    DWORD PTR [ebp+0x4f],eax
     54d:	00 00                	add    BYTE PTR [eax],al
     54f:	00 97 04 00 9f 1a    	add    BYTE PTR [edi+0x1a9f0004],dl
     555:	00 00                	add    BYTE PTR [eax],al
     557:	00 01                	add    BYTE PTR [ecx],al
     559:	9c                   	pushf  
     55a:	d4 01                	aam    0x1
     55c:	00 00                	add    BYTE PTR [eax],al
     55e:	06                   	push   es
     55f:	73 74                	jae    5d5 <sysEnter_Vector-0x12fa2b>
     561:	72 00                	jb     563 <sysEnter_Vector-0x12fa9d>
     563:	01 45 72             	add    DWORD PTR [ebp+0x72],eax
     566:	00 00                	add    BYTE PTR [eax],al
     568:	00 02                	add    BYTE PTR [edx],al
     56a:	91                   	xchg   ecx,eax
     56b:	00 00                	add    BYTE PTR [eax],al
     56d:	0c 78                	or     al,0x78
     56f:	00 00                	add    BYTE PTR [eax],al
     571:	00 02                	add    BYTE PTR [edx],al
     573:	33 e5                	xor    esp,ebp
     575:	01 00                	add    DWORD PTR [eax],eax
     577:	00 05 03 20 92 00    	add    BYTE PTR ds:0x922003,al
     57d:	9f                   	lahf   
     57e:	04 04                	add    al,0x4
     580:	72 00                	jb     582 <sysEnter_Vector-0x12fa7e>
     582:	00 00                	add    BYTE PTR [eax],al
     584:	00 ae 01 00 00 04    	add    BYTE PTR [esi+0x4000001],ch
     58a:	00 5c 02 00          	add    BYTE PTR [edx+eax*1+0x0],bl
     58e:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     591:	c3                   	ret    
     592:	00 00                	add    BYTE PTR [eax],al
     594:	00 0c 5c             	add    BYTE PTR [esp+ebx*2],cl
     597:	02 00                	add    al,BYTE PTR [eax]
     599:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
     59c:	00 00                	add    BYTE PTR [eax],al
     59e:	b4 04                	mov    ah,0x4
     5a0:	00 9f 6e 01 00 00    	add    BYTE PTR [edi+0x16e],bl
     5a6:	69 02 00 00 02 01    	imul   eax,DWORD PTR [edx],0x1020000
     5ac:	06                   	push   es
     5ad:	41                   	inc    ecx
     5ae:	00 00                	add    BYTE PTR [eax],al
     5b0:	00 02                	add    BYTE PTR [edx],al
     5b2:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     5b8:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     5bf:	02 08                	add    cl,BYTE PTR [eax]
     5c1:	05 00 00 00 00       	add    eax,0x0
     5c6:	02 01                	add    al,BYTE PTR [ecx]
     5c8:	08 3f                	or     BYTE PTR [edi],bh
     5ca:	00 00                	add    BYTE PTR [eax],al
     5cc:	00 02                	add    BYTE PTR [edx],al
     5ce:	02 07                	add    al,BYTE PTR [edi]
     5d0:	0e                   	push   cs
     5d1:	00 00                	add    BYTE PTR [eax],al
     5d3:	00 04 45 02 00 00 02 	add    BYTE PTR [eax*2+0x2000002],al
     5da:	34 5a                	xor    al,0x5a
     5dc:	00 00                	add    BYTE PTR [eax],al
     5de:	00 02                	add    BYTE PTR [edx],al
     5e0:	04 07                	add    al,0x7
     5e2:	32 00                	xor    al,BYTE PTR [eax]
     5e4:	00 00                	add    BYTE PTR [eax],al
     5e6:	02 08                	add    cl,BYTE PTR [eax]
     5e8:	07                   	pop    es
     5e9:	28 00                	sub    BYTE PTR [eax],al
     5eb:	00 00                	add    BYTE PTR [eax],al
     5ed:	04 01                	add    al,0x1
     5ef:	02 00                	add    al,BYTE PTR [eax]
     5f1:	00 02                	add    BYTE PTR [edx],al
     5f3:	56                   	push   esi
     5f4:	5a                   	pop    edx
     5f5:	00 00                	add    BYTE PTR [eax],al
     5f7:	00 02                	add    BYTE PTR [edx],al
     5f9:	04 05                	add    al,0x5
     5fb:	05 00 00 00 02       	add    eax,0x2000000
     600:	0c 04                	or     al,0x4
     602:	ad                   	lods   eax,DWORD PTR ds:[esi]
     603:	00 00                	add    BYTE PTR [eax],al
     605:	00 02                	add    BYTE PTR [edx],al
     607:	04 07                	add    al,0x7
     609:	2a 01                	sub    al,BYTE PTR [ecx]
     60b:	00 00                	add    BYTE PTR [eax],al
     60d:	02 01                	add    al,BYTE PTR [ecx]
     60f:	06                   	push   es
     610:	48                   	dec    eax
     611:	00 00                	add    BYTE PTR [eax],al
     613:	00 02                	add    BYTE PTR [edx],al
     615:	04 07                	add    al,0x7
     617:	2d 00 00 00 05       	sub    eax,0x5000000
     61c:	04 88                	add    al,0x88
     61e:	00 00                	add    BYTE PTR [eax],al
     620:	00 06                	add    BYTE PTR [esi],al
     622:	4e                   	dec    esi
     623:	02 00                	add    al,BYTE PTR [eax]
     625:	00 01                	add    BYTE PTR [ecx],al
     627:	0f b4 04 00          	lfs    eax,FWORD PTR [eax+eax*1]
     62b:	9f                   	lahf   
     62c:	ba 00 00 00 01       	mov    edx,0x1000000
     631:	9c                   	pushf  
     632:	f4                   	hlt    
     633:	00 00                	add    BYTE PTR [eax],al
     635:	00 07                	add    BYTE PTR [edi],al
     637:	78 00                	js     639 <sysEnter_Vector-0x12f9c7>
     639:	01 0f                	add    DWORD PTR [edi],ecx
     63b:	33 00                	xor    eax,DWORD PTR [eax]
     63d:	00 00                	add    BYTE PTR [eax],al
     63f:	02 91 00 07 79 00    	add    dl,BYTE PTR [ecx+0x790700]
     645:	01 0f                	add    DWORD PTR [edi],ecx
     647:	33 00                	xor    eax,DWORD PTR [eax]
     649:	00 00                	add    BYTE PTR [eax],al
     64b:	02 91 04 08 63 6d    	add    dl,BYTE PTR [ecx+0x6d630804]
     651:	64 00 01             	add    BYTE PTR fs:[ecx],al
     654:	11 f4                	adc    esp,esi
     656:	00 00                	add    BYTE PTR [eax],al
     658:	00 02                	add    BYTE PTR [edx],al
     65a:	91                   	xchg   ecx,eax
     65b:	66 09 0b             	or     WORD PTR [ebx],cx
     65e:	02 00                	add    al,BYTE PTR [eax]
     660:	00 01                	add    BYTE PTR [ecx],al
     662:	12 04 01             	adc    al,BYTE PTR [ecx+eax*1]
     665:	00 00                	add    BYTE PTR [eax],al
     667:	02 91 63 09 57 02    	add    dl,BYTE PTR [ecx+0x2570963]
     66d:	00 00                	add    BYTE PTR [eax],al
     66f:	01 12                	add    DWORD PTR [edx],edx
     671:	04 01                	add    al,0x1
     673:	00 00                	add    BYTE PTR [eax],al
     675:	02 91 60 00 0a 88    	add    dl,BYTE PTR [ecx-0x77f5ffa0]
     67b:	00 00                	add    BYTE PTR [eax],al
     67d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     680:	00 00                	add    BYTE PTR [eax],al
     682:	0b 81 00 00 00 09    	or     eax,DWORD PTR [ecx+0x9000000]
     688:	00 0a                	add    BYTE PTR [edx],cl
     68a:	88 00                	mov    BYTE PTR [eax],al
     68c:	00 00                	add    BYTE PTR [eax],al
     68e:	14 01                	adc    al,0x1
     690:	00 00                	add    BYTE PTR [eax],al
     692:	0b 81 00 00 00 02    	or     eax,DWORD PTR [ecx+0x2000000]
     698:	00 0c ee             	add    BYTE PTR [esi+ebp*8],cl
     69b:	01 00                	add    DWORD PTR [eax],eax
     69d:	00 01                	add    BYTE PTR [ecx],al
     69f:	1f                   	pop    ds
     6a0:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6a1:	05 00 9f 5a 00       	add    eax,0x5a9f00
     6a6:	00 00                	add    BYTE PTR [eax],al
     6a8:	01 9c 38 01 00 00 08 	add    DWORD PTR [eax+edi*1+0x8000001],ebx
     6af:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     6b2:	00 01                	add    BYTE PTR [ecx],al
     6b4:	21 f4                	and    esp,esi
     6b6:	00 00                	add    BYTE PTR [eax],al
     6b8:	00 02                	add    BYTE PTR [edx],al
     6ba:	91                   	xchg   ecx,eax
     6bb:	66                   	data16
     6bc:	00 0c 1d 02 00 00 01 	add    BYTE PTR [ebx*1+0x1000002],cl
     6c3:	29 c8                	sub    eax,ecx
     6c5:	05 00 9f 5a 00       	add    eax,0x5a9f00
     6ca:	00 00                	add    BYTE PTR [eax],al
     6cc:	01 9c 5c 01 00 00 08 	add    DWORD PTR [esp+ebx*2+0x8000001],ebx
     6d3:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     6d6:	00 01                	add    BYTE PTR [ecx],al
     6d8:	2b f4                	sub    esi,esp
     6da:	00 00                	add    BYTE PTR [eax],al
     6dc:	00 02                	add    BYTE PTR [edx],al
     6de:	91                   	xchg   ecx,eax
     6df:	66                   	data16
     6e0:	00 0d 10 02 00 00    	add    BYTE PTR ds:0x210,cl
     6e6:	03 35 6d 01 00 00    	add    esi,DWORD PTR ds:0x16d
     6ec:	05 03 30 92 00       	add    eax,0x923003
     6f1:	9f                   	lahf   
     6f2:	05 04 68 00 00       	add    eax,0x6804
     6f7:	00 0d 33 02 00 00    	add    BYTE PTR ds:0x233,cl
     6fd:	03 36                	add    esi,DWORD PTR [esi]
     6ff:	4f                   	dec    edi
     700:	00 00                	add    BYTE PTR [eax],al
     702:	00 05 03 2c 92 00    	add    BYTE PTR ds:0x922c03,al
     708:	9f                   	lahf   
     709:	0d 78 00 00 00       	or     eax,0x78
     70e:	04 33                	add    al,0x33
     710:	95                   	xchg   ebp,eax
     711:	01 00                	add    DWORD PTR [eax],eax
     713:	00 05 03 20 92 00    	add    BYTE PTR ds:0x922003,al
     719:	9f                   	lahf   
     71a:	05 04 96 00 00       	add    eax,0x9604
     71f:	00 0d e3 01 00 00    	add    BYTE PTR ds:0x1e3,cl
     725:	01 0d ac 01 00 00    	add    DWORD PTR ds:0x1ac,ecx
     72b:	05 03 00 88 00       	add    eax,0x880003
     730:	9f                   	lahf   
     731:	0e                   	push   cs
     732:	04 01                	add    al,0x1
     734:	00 00                	add    BYTE PTR [eax],al
     736:	00 f9                	add    cl,bh
     738:	03 00                	add    eax,DWORD PTR [eax]
     73a:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     73d:	25 03 00 00 04       	and    eax,0x4000003
     742:	01 c3                	add    ebx,eax
     744:	00 00                	add    BYTE PTR [eax],al
     746:	00 0c ed 02 00 00 4d 	add    BYTE PTR [ebp*8+0x4d000002],cl
     74d:	00 00                	add    BYTE PTR [eax],al
     74f:	00 24 06             	add    BYTE PTR [esi+eax*1],ah
     752:	00 9f 41 04 00 00    	add    BYTE PTR [edi+0x441],bl
     758:	35 03 00 00 02       	xor    eax,0x2000003
     75d:	01 08                	add    DWORD PTR [eax],ecx
     75f:	3f                   	aas    
     760:	00 00                	add    BYTE PTR [eax],al
     762:	00 02                	add    BYTE PTR [edx],al
     764:	02 07                	add    al,BYTE PTR [edi]
     766:	0e                   	push   cs
     767:	00 00                	add    BYTE PTR [eax],al
     769:	00 02                	add    BYTE PTR [edx],al
     76b:	04 07                	add    al,0x7
     76d:	32 00                	xor    al,BYTE PTR [eax]
     76f:	00 00                	add    BYTE PTR [eax],al
     771:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     774:	2d 00 00 00 02       	sub    eax,0x2000000
     779:	01 06                	add    DWORD PTR [esi],eax
     77b:	41                   	inc    ecx
     77c:	00 00                	add    BYTE PTR [eax],al
     77e:	00 02                	add    BYTE PTR [edx],al
     780:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     786:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     78d:	02 08                	add    cl,BYTE PTR [eax]
     78f:	05 00 00 00 00       	add    eax,0x0
     794:	02 08                	add    cl,BYTE PTR [eax]
     796:	07                   	pop    es
     797:	28 00                	sub    BYTE PTR [eax],al
     799:	00 00                	add    BYTE PTR [eax],al
     79b:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     7a2:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     7a5:	2a 01                	sub    al,BYTE PTR [ecx]
     7a7:	00 00                	add    BYTE PTR [eax],al
     7a9:	04 04                	add    al,0x4
     7ab:	78 00                	js     7ad <sysEnter_Vector-0x12f853>
     7ad:	00 00                	add    BYTE PTR [eax],al
     7af:	02 01                	add    al,BYTE PTR [ecx]
     7b1:	06                   	push   es
     7b2:	48                   	dec    eax
     7b3:	00 00                	add    BYTE PTR [eax],al
     7b5:	00 05 45 02 00 00    	add    BYTE PTR ds:0x245,al
     7bb:	02 34 33             	add    dh,BYTE PTR [ebx+esi*1]
     7be:	00 00                	add    BYTE PTR [eax],al
     7c0:	00 05 91 02 00 00    	add    BYTE PTR ds:0x291,al
     7c6:	03 d8                	add    ebx,eax
     7c8:	33 00                	xor    eax,DWORD PTR [eax]
     7ca:	00 00                	add    BYTE PTR [eax],al
     7cc:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     7cf:	ad                   	lods   eax,DWORD PTR ds:[esi]
     7d0:	00 00                	add    BYTE PTR [eax],al
     7d2:	00 06                	add    BYTE PTR [esi],al
     7d4:	a0 03 00 00 04       	mov    al,ds:0x4000003
     7d9:	33 00                	xor    eax,DWORD PTR [eax]
     7db:	00 00                	add    BYTE PTR [eax],al
     7dd:	04 15                	add    al,0x15
     7df:	9d                   	popf   
     7e0:	01 00                	add    DWORD PTR [eax],eax
     7e2:	00 07                	add    BYTE PTR [edi],al
     7e4:	51                   	push   ecx
     7e5:	04 00                	add    al,0x0
     7e7:	00 00                	add    BYTE PTR [eax],al
     7e9:	07                   	pop    es
     7ea:	96                   	xchg   esi,eax
     7eb:	04 00                	add    al,0x0
     7ed:	00 01                	add    BYTE PTR [ecx],al
     7ef:	07                   	pop    es
     7f0:	84 02                	test   BYTE PTR [edx],al
     7f2:	00 00                	add    BYTE PTR [eax],al
     7f4:	02 07                	add    al,BYTE PTR [edi]
     7f6:	83 03 00             	add    DWORD PTR [ebx],0x0
     7f9:	00 03                	add    BYTE PTR [ebx],al
     7fb:	07                   	pop    es
     7fc:	6a 02                	push   0x2
     7fe:	00 00                	add    BYTE PTR [eax],al
     800:	04 07                	add    al,0x7
     802:	da 04 00             	fiadd  DWORD PTR [eax+eax*1]
     805:	00 05 07 78 04 00    	add    BYTE PTR ds:0x47807,al
     80b:	00 0a                	add    BYTE PTR [edx],cl
     80d:	07                   	pop    es
     80e:	c4 03                	les    eax,FWORD PTR [ebx]
     810:	00 00                	add    BYTE PTR [eax],al
     812:	0b 07                	or     eax,DWORD PTR [edi]
     814:	2a 04 00             	sub    al,BYTE PTR [eax+eax*1]
     817:	00 0c 07             	add    BYTE PTR [edi+eax*1],cl
     81a:	91                   	xchg   ecx,eax
     81b:	03 00                	add    eax,DWORD PTR [eax]
     81d:	00 0d 07 aa 03 00    	add    BYTE PTR ds:0x3aa07,cl
     823:	00 0e                	add    BYTE PTR [esi],cl
     825:	07                   	pop    es
     826:	77 02                	ja     82a <sysEnter_Vector-0x12f7d6>
     828:	00 00                	add    BYTE PTR [eax],al
     82a:	0f 07                	sysret 
     82c:	f4                   	hlt    
     82d:	03 00                	add    eax,DWORD PTR [eax]
     82f:	00 10                	add    BYTE PTR [eax],dl
     831:	07                   	pop    es
     832:	27                   	daa    
     833:	05 00 00 11 07       	add    eax,0x7110000
     838:	05 05 00 00 4f       	add    eax,0x4f000005
     83d:	07                   	pop    es
     83e:	cb                   	retf   
     83f:	04 00                	add    al,0x0
     841:	00 50 07             	add    BYTE PTR [eax+0x7],dl
     844:	44                   	inc    esp
     845:	04 00                	add    al,0x0
     847:	00 59 07             	add    BYTE PTR [ecx+0x7],bl
     84a:	14 05                	adc    al,0x5
     84c:	00 00                	add    BYTE PTR [eax],al
     84e:	61                   	popa   
     84f:	07                   	pop    es
     850:	49                   	dec    ecx
     851:	03 00                	add    eax,DWORD PTR [eax]
     853:	00 97 08 61 04 00    	add    BYTE PTR [edi+0x46108],dl
     859:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     85c:	08 37                	or     BYTE PTR [edi],dh
     85e:	04 00                	add    al,0x0
     860:	00 64 01 08          	add    BYTE PTR [ecx+eax*1+0x8],ah
     864:	44                   	inc    esp
     865:	05 00 00 65 01       	add    eax,0x1650000
     86a:	08 25 03 00 00 66    	or     BYTE PTR ds:0x66000003,ah
     870:	01 08                	add    DWORD PTR [eax],ecx
     872:	56                   	push   esi
     873:	05 00 00 67 01       	add    eax,0x1670000
     878:	08 b7 03 00 00 68    	or     BYTE PTR [edi+0x68000003],dh
     87e:	01 08                	add    DWORD PTR [eax],ecx
     880:	d6                   	(bad)  
     881:	02 00                	add    al,BYTE PTR [eax]
     883:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
     886:	08 85 04 00 00 70    	or     BYTE PTR [ebp+0x70000004],al
     88c:	01 08                	add    DWORD PTR [eax],ecx
     88e:	39 03                	cmp    DWORD PTR [ebx],eax
     890:	00 00                	add    BYTE PTR [eax],al
     892:	71 01                	jno    895 <sysEnter_Vector-0x12f76b>
     894:	08 e8                	or     al,ch
     896:	04 00                	add    al,0x0
     898:	00 00                	add    BYTE PTR [eax],al
     89a:	03 08                	add    ecx,DWORD PTR [eax]
     89c:	d9 03                	fld    DWORD PTR [ebx]
     89e:	00 00                	add    BYTE PTR [eax],al
     8a0:	01 03                	add    DWORD PTR [ebx],eax
     8a2:	08 e8                	or     al,ch
     8a4:	03 00                	add    eax,DWORD PTR [eax]
     8a6:	00 02                	add    BYTE PTR [edx],al
     8a8:	03 08                	add    ecx,DWORD PTR [eax]
     8aa:	73 03                	jae    8af <sysEnter_Vector-0x12f751>
     8ac:	00 00                	add    BYTE PTR [eax],al
     8ae:	03 03                	add    eax,DWORD PTR [ebx]
     8b0:	08 b6 02 00 00 04    	or     BYTE PTR [esi+0x4000002],dh
     8b6:	03 08                	add    ecx,DWORD PTR [eax]
     8b8:	15 03 00 00 05       	adc    eax,0x5000003
     8bd:	03 08                	add    ecx,DWORD PTR [eax]
     8bf:	64 03 00             	add    eax,DWORD PTR fs:[eax]
     8c2:	00 06                	add    BYTE PTR [esi],al
     8c4:	03 08                	add    ecx,DWORD PTR [eax]
     8c6:	b2 04                	mov    dl,0x4
     8c8:	00 00                	add    BYTE PTR [eax],al
     8ca:	07                   	pop    es
     8cb:	03 08                	add    ecx,DWORD PTR [eax]
     8cd:	01 04 00             	add    DWORD PTR [eax+eax*1],eax
     8d0:	00 00                	add    BYTE PTR [eax],al
     8d2:	09 00                	or     DWORD PTR [eax],eax
     8d4:	09 9e 02 00 00 01    	or     DWORD PTR [esi+0x1000002],ebx
     8da:	09 72 00             	or     DWORD PTR [edx+0x0],esi
     8dd:	00 00                	add    BYTE PTR [eax],al
     8df:	24 06                	and    al,0x6
     8e1:	00 9f 44 01 00 00    	add    BYTE PTR [edi+0x144],bl
     8e7:	01 9c 49 02 00 00 0a 	add    DWORD PTR [ecx+ecx*2+0xa000002],ebx
     8ee:	98                   	cwde   
     8ef:	02 00                	add    al,BYTE PTR [eax]
     8f1:	00 01                	add    BYTE PTR [ecx],al
     8f3:	09 72 00             	or     DWORD PTR [edx+0x0],esi
     8f6:	00 00                	add    BYTE PTR [eax],al
     8f8:	02 91 00 0b d1 03    	add    dl,BYTE PTR [ecx+0x3d10b00]
     8fe:	00 00                	add    BYTE PTR [eax],al
     900:	01 0b                	add    DWORD PTR [ebx],ecx
     902:	72 00                	jb     904 <sysEnter_Vector-0x12f6fc>
     904:	00 00                	add    BYTE PTR [eax],al
     906:	02 91 64 0c 0d 03    	add    dl,BYTE PTR [ecx+0x30d0c64]
     90c:	00 00                	add    BYTE PTR [eax],al
     90e:	01 0b                	add    DWORD PTR [ebx],ecx
     910:	4f                   	dec    edi
     911:	00 00                	add    BYTE PTR [eax],al
     913:	00 e3                	add    bl,ah
     915:	01 00                	add    DWORD PTR [eax],eax
     917:	00 0d 00 0b c1 04    	add    BYTE PTR ds:0x4c10b00,cl
     91d:	00 00                	add    BYTE PTR [eax],al
     91f:	01 0c 49             	add    DWORD PTR [ecx+ecx*2],ecx
     922:	02 00                	add    al,BYTE PTR [eax]
     924:	00 03                	add    BYTE PTR [ebx],al
     926:	91                   	xchg   ecx,eax
     927:	fc                   	cld    
     928:	7e 0b                	jle    935 <sysEnter_Vector-0x12f6cb>
     92a:	f6 04 00 00          	test   BYTE PTR [eax+eax*1],0x0
     92e:	01 0d 49 02 00 00    	add    DWORD PTR ds:0x249,ecx
     934:	03 91 98 7e 0b e5    	add    edx,DWORD PTR [ecx-0x1af48168]
     93a:	02 00                	add    al,BYTE PTR [eax]
     93c:	00 01                	add    BYTE PTR [ecx],al
     93e:	0e                   	push   cs
     93f:	72 00                	jb     941 <sysEnter_Vector-0x12f6bf>
     941:	00 00                	add    BYTE PTR [eax],al
     943:	02 91 6c 0e 00 00    	add    dl,BYTE PTR [ecx+0xe6c]
     949:	00 00                	add    BYTE PTR [eax],al
     94b:	0b a9 04 00 00 01    	or     ebp,DWORD PTR [ecx+0x1000004]
     951:	13 72 00             	adc    esi,DWORD PTR [edx+0x0]
     954:	00 00                	add    BYTE PTR [eax],al
     956:	02 91 60 0f 65 6e    	add    dl,BYTE PTR [ecx+0x6e650f60]
     95c:	64 00 01             	add    BYTE PTR fs:[ecx],al
     95f:	14 4f                	adc    al,0x4f
     961:	00 00                	add    BYTE PTR [eax],al
     963:	00 02                	add    BYTE PTR [edx],al
     965:	91                   	xchg   ecx,eax
     966:	68 10 b2 06 00       	push   0x6b210
     96b:	9f                   	lahf   
     96c:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
     96d:	00 00                	add    BYTE PTR [eax],al
     96f:	00 11                	add    BYTE PTR [ecx],dl
     971:	34 05                	xor    al,0x5
     973:	00 00                	add    BYTE PTR [eax],al
     975:	01 1a                	add    DWORD PTR [edx],ebx
     977:	4f                   	dec    edi
     978:	00 00                	add    BYTE PTR [eax],al
     97a:	00 0d 00 00 00 00    	add    BYTE PTR ds:0x0,cl
     980:	12 78 00             	adc    bh,BYTE PTR [eax+0x0]
     983:	00 00                	add    BYTE PTR [eax],al
     985:	59                   	pop    ecx
     986:	02 00                	add    al,BYTE PTR [eax]
     988:	00 13                	add    BYTE PTR [ebx],dl
     98a:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
     98d:	00 63 00             	add    BYTE PTR [ebx+0x0],ah
     990:	09 13                	or     DWORD PTR [ebx],edx
     992:	04 00                	add    al,0x0
     994:	00 01                	add    BYTE PTR [ecx],al
     996:	24 72                	and    al,0x72
     998:	00 00                	add    BYTE PTR [eax],al
     99a:	00 68 07             	add    BYTE PTR [eax+0x7],ch
     99d:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
     9a3:	01 9c 81 02 00 00 0a 	add    DWORD PTR [ecx+eax*4+0xa000002],ebx
     9aa:	98                   	cwde   
     9ab:	02 00                	add    al,BYTE PTR [eax]
     9ad:	00 01                	add    BYTE PTR [ecx],al
     9af:	24 72                	and    al,0x72
     9b1:	00 00                	add    BYTE PTR [eax],al
     9b3:	00 02                	add    BYTE PTR [edx],al
     9b5:	91                   	xchg   ecx,eax
     9b6:	00 00                	add    BYTE PTR [eax],al
     9b8:	09 34 05 00 00 01 29 	or     DWORD PTR [eax*1+0x29010000],esi
     9bf:	4f                   	dec    edi
     9c0:	00 00                	add    BYTE PTR [eax],al
     9c2:	00 88 07 00 9f aa    	add    BYTE PTR [eax-0x5560fff9],cl
     9c8:	00 00                	add    BYTE PTR [eax],al
     9ca:	00 01                	add    BYTE PTR [ecx],al
     9cc:	9c                   	pushf  
     9cd:	cf                   	iret   
     9ce:	02 00                	add    al,BYTE PTR [eax]
     9d0:	00 0a                	add    BYTE PTR [edx],cl
     9d2:	3c 05                	cmp    al,0x5
     9d4:	00 00                	add    BYTE PTR [eax],al
     9d6:	01 29                	add    DWORD PTR [ecx],ebp
     9d8:	72 00                	jb     9da <sysEnter_Vector-0x12f626>
     9da:	00 00                	add    BYTE PTR [eax],al
     9dc:	02 91 00 0a 33 03    	add    dl,BYTE PTR [ecx+0x3330a00]
     9e2:	00 00                	add    BYTE PTR [eax],al
     9e4:	01 29                	add    DWORD PTR [ecx],ebp
     9e6:	72 00                	jb     9e8 <sysEnter_Vector-0x12f618>
     9e8:	00 00                	add    BYTE PTR [eax],al
     9ea:	02 91 04 10 9a 07    	add    dl,BYTE PTR [ecx+0x79a1004]
     9f0:	00 9f 8e 00 00 00    	add    BYTE PTR [edi+0x8e],bl
     9f6:	0f 63 6e 74          	packsswb mm5,QWORD PTR [esi+0x74]
     9fa:	00 01                	add    BYTE PTR [ecx],al
     9fc:	2b 4f 00             	sub    ecx,DWORD PTR [edi+0x0]
     9ff:	00 00                	add    BYTE PTR [eax],al
     a01:	02 91 6c 00 00 09    	add    dl,BYTE PTR [ecx+0x900006c]
     a07:	c7 02 00 00 01 34    	mov    DWORD PTR [edx],0x34010000
     a0d:	4f                   	dec    edi
     a0e:	00 00                	add    BYTE PTR [eax],al
     a10:	00 32                	add    BYTE PTR [edx],dh
     a12:	08 00                	or     BYTE PTR [eax],al
     a14:	9f                   	lahf   
     a15:	23 00                	and    eax,DWORD PTR [eax]
     a17:	00 00                	add    BYTE PTR [eax],al
     a19:	01 9c 05 03 00 00 0a 	add    DWORD PTR [ebp+eax*1+0xa000003],ebx
     a20:	3c 05                	cmp    al,0x5
     a22:	00 00                	add    BYTE PTR [eax],al
     a24:	01 34 72             	add    DWORD PTR [edx+esi*2],esi
     a27:	00 00                	add    BYTE PTR [eax],al
     a29:	00 02                	add    BYTE PTR [edx],al
     a2b:	91                   	xchg   ecx,eax
     a2c:	00 0a                	add    BYTE PTR [edx],cl
     a2e:	33 03                	xor    eax,DWORD PTR [ebx]
     a30:	00 00                	add    BYTE PTR [eax],al
     a32:	01 34 72             	add    DWORD PTR [edx+esi*2],esi
     a35:	00 00                	add    BYTE PTR [eax],al
     a37:	00 02                	add    BYTE PTR [edx],al
     a39:	91                   	xchg   ecx,eax
     a3a:	04 00                	add    al,0x0
     a3c:	14 5d                	adc    al,0x5d
     a3e:	03 00                	add    eax,DWORD PTR [eax]
     a40:	00 01                	add    BYTE PTR [ecx],al
     a42:	39 55 08             	cmp    DWORD PTR [ebp+0x8],edx
     a45:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
     a4b:	01 9c 79 03 00 00 0a 	add    DWORD PTR [ecx+edi*2+0xa000003],ebx
     a52:	3c 05                	cmp    al,0x5
     a54:	00 00                	add    BYTE PTR [eax],al
     a56:	01 39                	add    DWORD PTR [ecx],edi
     a58:	72 00                	jb     a5a <sysEnter_Vector-0x12f5a6>
     a5a:	00 00                	add    BYTE PTR [eax],al
     a5c:	02 91 00 0a 33 03    	add    dl,BYTE PTR [ecx+0x3330a00]
     a62:	00 00                	add    BYTE PTR [eax],al
     a64:	01 39                	add    DWORD PTR [ecx],edi
     a66:	72 00                	jb     a68 <sysEnter_Vector-0x12f598>
     a68:	00 00                	add    BYTE PTR [eax],al
     a6a:	02 91 04 0b ff 02    	add    dl,BYTE PTR [ecx+0x2ff0b04]
     a70:	00 00                	add    BYTE PTR [eax],al
     a72:	01 3b                	add    DWORD PTR [ebx],edi
     a74:	7f 00                	jg     a76 <sysEnter_Vector-0x12f58a>
     a76:	00 00                	add    BYTE PTR [eax],al
     a78:	02 91 6c 15 6e 08    	add    dl,BYTE PTR [ecx+0x86e156c]
     a7e:	00 9f eb 00 00 00    	add    BYTE PTR [edi+0xeb],bl
     a84:	60                   	pusha  
     a85:	03 00                	add    eax,DWORD PTR [eax]
     a87:	00 0f                	add    BYTE PTR [edi],cl
     a89:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
     a8c:	00 01                	add    BYTE PTR [ecx],al
     a8e:	3d 4f 00 00 00       	cmp    eax,0x4f
     a93:	02 91 68 00 10 59    	add    dl,BYTE PTR [ecx+0x59100068]
     a99:	09 00                	or     DWORD PTR [eax],eax
     a9b:	9f                   	lahf   
     a9c:	b8 00 00 00 0f       	mov    eax,0xf000000
     aa1:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
     aa4:	00 01                	add    BYTE PTR [ecx],al
     aa6:	49                   	dec    ecx
     aa7:	4f                   	dec    edi
     aa8:	00 00                	add    BYTE PTR [eax],al
     aaa:	00 02                	add    BYTE PTR [edx],al
     aac:	91                   	xchg   ecx,eax
     aad:	64 00 00             	add    BYTE PTR fs:[eax],al
     ab0:	09 ce                	or     esi,ecx
     ab2:	02 00                	add    al,BYTE PTR [eax]
     ab4:	00 01                	add    BYTE PTR [ecx],al
     ab6:	56                   	push   esi
     ab7:	72 00                	jb     ab9 <sysEnter_Vector-0x12f547>
     ab9:	00 00                	add    BYTE PTR [eax],al
     abb:	16                   	push   ss
     abc:	0a 00                	or     al,BYTE PTR [eax]
     abe:	9f                   	lahf   
     abf:	2c 00                	sub    al,0x0
     ac1:	00 00                	add    BYTE PTR [eax],al
     ac3:	01 9c af 03 00 00 16 	add    DWORD PTR [edi+ebp*4+0x16000003],ebx
     aca:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     acd:	00 01                	add    BYTE PTR [ecx],al
     acf:	56                   	push   esi
     ad0:	72 00                	jb     ad2 <sysEnter_Vector-0x12f52e>
     ad2:	00 00                	add    BYTE PTR [eax],al
     ad4:	02 91 00 0a 58 07    	add    dl,BYTE PTR [ecx+0x7580a00]
     ada:	00 00                	add    BYTE PTR [eax],al
     adc:	01 56 8a             	add    DWORD PTR [esi-0x76],edx
     adf:	00 00                	add    BYTE PTR [eax],al
     ae1:	00 02                	add    BYTE PTR [edx],al
     ae3:	91                   	xchg   ecx,eax
     ae4:	04 00                	add    al,0x0
     ae6:	09 6b 05             	or     DWORD PTR [ebx+0x5],ebp
     ae9:	00 00                	add    BYTE PTR [eax],al
     aeb:	01 5c 72 00          	add    DWORD PTR [edx+esi*2+0x0],ebx
     aef:	00 00                	add    BYTE PTR [eax],al
     af1:	42                   	inc    edx
     af2:	0a 00                	or     al,BYTE PTR [eax]
     af4:	9f                   	lahf   
     af5:	23 00                	and    eax,DWORD PTR [eax]
     af7:	00 00                	add    BYTE PTR [eax],al
     af9:	01 9c e5 03 00 00 16 	add    DWORD PTR [ebp+eiz*8+0x16000003],ebx
     b00:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     b03:	00 01                	add    BYTE PTR [ecx],al
     b05:	5c                   	pop    esp
     b06:	72 00                	jb     b08 <sysEnter_Vector-0x12f4f8>
     b08:	00 00                	add    BYTE PTR [eax],al
     b0a:	02 91 00 0a 58 07    	add    dl,BYTE PTR [ecx+0x7580a00]
     b10:	00 00                	add    BYTE PTR [eax],al
     b12:	01 5c 8a 00          	add    DWORD PTR [edx+ecx*4+0x0],ebx
     b16:	00 00                	add    BYTE PTR [eax],al
     b18:	02 91 04 00 17 78    	add    dl,BYTE PTR [ecx+0x78170004]
     b1e:	00 00                	add    BYTE PTR [eax],al
     b20:	00 05 33 f6 03 00    	add    BYTE PTR ds:0x3f633,al
     b26:	00 05 03 20 92 00    	add    BYTE PTR ds:0x922003,al
     b2c:	9f                   	lahf   
     b2d:	04 04                	add    al,0x4
     b2f:	72 00                	jb     b31 <sysEnter_Vector-0x12f4cf>
     b31:	00 00                	add    BYTE PTR [eax],al
     b33:	00 44 09 00          	add    BYTE PTR [ecx+ecx*1+0x0],al
     b37:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     b3a:	61                   	popa   
     b3b:	04 00                	add    al,0x0
     b3d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     b40:	c3                   	ret    
     b41:	00 00                	add    BYTE PTR [eax],al
     b43:	00 0c 42             	add    BYTE PTR [edx+eax*2],cl
     b46:	07                   	pop    es
     b47:	00 00                	add    BYTE PTR [eax],al
     b49:	4d                   	dec    ebp
     b4a:	00 00                	add    BYTE PTR [eax],al
     b4c:	00 68 0a             	add    BYTE PTR [eax+0xa],ch
     b4f:	00 9f b8 08 00 00    	add    BYTE PTR [edi+0x8b8],bl
     b55:	ad                   	lods   eax,DWORD PTR ds:[esi]
     b56:	04 00                	add    al,0x0
     b58:	00 02                	add    BYTE PTR [edx],al
     b5a:	01 08                	add    DWORD PTR [eax],ecx
     b5c:	3f                   	aas    
     b5d:	00 00                	add    BYTE PTR [eax],al
     b5f:	00 02                	add    BYTE PTR [edx],al
     b61:	02 07                	add    al,BYTE PTR [edi]
     b63:	0e                   	push   cs
     b64:	00 00                	add    BYTE PTR [eax],al
     b66:	00 02                	add    BYTE PTR [edx],al
     b68:	04 07                	add    al,0x7
     b6a:	32 00                	xor    al,BYTE PTR [eax]
     b6c:	00 00                	add    BYTE PTR [eax],al
     b6e:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     b71:	2d 00 00 00 02       	sub    eax,0x2000000
     b76:	01 06                	add    DWORD PTR [esi],eax
     b78:	41                   	inc    ecx
     b79:	00 00                	add    BYTE PTR [eax],al
     b7b:	00 02                	add    BYTE PTR [edx],al
     b7d:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     b83:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     b8a:	02 08                	add    cl,BYTE PTR [eax]
     b8c:	05 00 00 00 00       	add    eax,0x0
     b91:	02 08                	add    cl,BYTE PTR [eax]
     b93:	07                   	pop    es
     b94:	28 00                	sub    BYTE PTR [eax],al
     b96:	00 00                	add    BYTE PTR [eax],al
     b98:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     b9f:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     ba2:	2a 01                	sub    al,BYTE PTR [ecx]
     ba4:	00 00                	add    BYTE PTR [eax],al
     ba6:	04 04                	add    al,0x4
     ba8:	05 04 7a 00 00       	add    eax,0x7a04
     bad:	00 02                	add    BYTE PTR [edx],al
     baf:	01 06                	add    DWORD PTR [esi],eax
     bb1:	48                   	dec    eax
     bb2:	00 00                	add    BYTE PTR [eax],al
     bb4:	00 06                	add    BYTE PTR [esi],al
     bb6:	4d                   	dec    ebp
     bb7:	07                   	pop    es
     bb8:	00 00                	add    BYTE PTR [eax],al
     bba:	02 2e                	add    ch,BYTE PTR [esi]
     bbc:	25 00 00 00 06       	and    eax,0x6000000
     bc1:	07                   	pop    es
     bc2:	06                   	push   es
     bc3:	00 00                	add    BYTE PTR [eax],al
     bc5:	02 31                	add    dh,BYTE PTR [ecx]
     bc7:	2c 00                	sub    al,0x0
     bc9:	00 00                	add    BYTE PTR [eax],al
     bcb:	06                   	push   es
     bcc:	45                   	inc    ebp
     bcd:	02 00                	add    al,BYTE PTR [eax]
     bcf:	00 02                	add    BYTE PTR [edx],al
     bd1:	34 33                	xor    al,0x33
     bd3:	00 00                	add    BYTE PTR [eax],al
     bd5:	00 06                	add    BYTE PTR [esi],al
     bd7:	01 02                	add    DWORD PTR [edx],eax
     bd9:	00 00                	add    BYTE PTR [eax],al
     bdb:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
     bde:	00 00                	add    BYTE PTR [eax],al
     be0:	00 06                	add    BYTE PTR [esi],al
     be2:	91                   	xchg   ecx,eax
     be3:	02 00                	add    al,BYTE PTR [eax]
     be5:	00 03                	add    BYTE PTR [ebx],al
     be7:	d8 33                	fdiv   DWORD PTR [ebx]
     be9:	00 00                	add    BYTE PTR [eax],al
     beb:	00 02                	add    BYTE PTR [edx],al
     bed:	0c 04                	or     al,0x4
     bef:	ad                   	lods   eax,DWORD PTR ds:[esi]
     bf0:	00 00                	add    BYTE PTR [eax],al
     bf2:	00 07                	add    BYTE PTR [edi],al
     bf4:	a0 03 00 00 04       	mov    al,ds:0x4000003
     bf9:	33 00                	xor    eax,DWORD PTR [eax]
     bfb:	00 00                	add    BYTE PTR [eax],al
     bfd:	06                   	push   es
     bfe:	15 c0 01 00 00       	adc    eax,0x1c0
     c03:	08 51 04             	or     BYTE PTR [ecx+0x4],dl
     c06:	00 00                	add    BYTE PTR [eax],al
     c08:	00 08                	add    BYTE PTR [eax],cl
     c0a:	96                   	xchg   esi,eax
     c0b:	04 00                	add    al,0x0
     c0d:	00 01                	add    BYTE PTR [ecx],al
     c0f:	08 84 02 00 00 02 08 	or     BYTE PTR [edx+eax*1+0x8020000],al
     c16:	83 03 00             	add    DWORD PTR [ebx],0x0
     c19:	00 03                	add    BYTE PTR [ebx],al
     c1b:	08 6a 02             	or     BYTE PTR [edx+0x2],ch
     c1e:	00 00                	add    BYTE PTR [eax],al
     c20:	04 08                	add    al,0x8
     c22:	da 04 00             	fiadd  DWORD PTR [eax+eax*1]
     c25:	00 05 08 78 04 00    	add    BYTE PTR ds:0x47808,al
     c2b:	00 0a                	add    BYTE PTR [edx],cl
     c2d:	08 c4                	or     ah,al
     c2f:	03 00                	add    eax,DWORD PTR [eax]
     c31:	00 0b                	add    BYTE PTR [ebx],cl
     c33:	08 2a                	or     BYTE PTR [edx],ch
     c35:	04 00                	add    al,0x0
     c37:	00 0c 08             	add    BYTE PTR [eax+ecx*1],cl
     c3a:	91                   	xchg   ecx,eax
     c3b:	03 00                	add    eax,DWORD PTR [eax]
     c3d:	00 0d 08 aa 03 00    	add    BYTE PTR ds:0x3aa08,cl
     c43:	00 0e                	add    BYTE PTR [esi],cl
     c45:	08 77 02             	or     BYTE PTR [edi+0x2],dh
     c48:	00 00                	add    BYTE PTR [eax],al
     c4a:	0f 08                	invd   
     c4c:	f4                   	hlt    
     c4d:	03 00                	add    eax,DWORD PTR [eax]
     c4f:	00 10                	add    BYTE PTR [eax],dl
     c51:	08 27                	or     BYTE PTR [edi],ah
     c53:	05 00 00 11 08       	add    eax,0x8110000
     c58:	05 05 00 00 4f       	add    eax,0x4f000005
     c5d:	08 cb                	or     bl,cl
     c5f:	04 00                	add    al,0x0
     c61:	00 50 08             	add    BYTE PTR [eax+0x8],dl
     c64:	44                   	inc    esp
     c65:	04 00                	add    al,0x0
     c67:	00 59 08             	add    BYTE PTR [ecx+0x8],bl
     c6a:	14 05                	adc    al,0x5
     c6c:	00 00                	add    BYTE PTR [eax],al
     c6e:	61                   	popa   
     c6f:	08 49 03             	or     BYTE PTR [ecx+0x3],cl
     c72:	00 00                	add    BYTE PTR [eax],al
     c74:	97                   	xchg   edi,eax
     c75:	09 61 04             	or     DWORD PTR [ecx+0x4],esp
     c78:	00 00                	add    BYTE PTR [eax],al
     c7a:	63 01                	arpl   WORD PTR [ecx],ax
     c7c:	09 37                	or     DWORD PTR [edi],esi
     c7e:	04 00                	add    al,0x0
     c80:	00 64 01 09          	add    BYTE PTR [ecx+eax*1+0x9],ah
     c84:	44                   	inc    esp
     c85:	05 00 00 65 01       	add    eax,0x1650000
     c8a:	09 25 03 00 00 66    	or     DWORD PTR ds:0x66000003,esp
     c90:	01 09                	add    DWORD PTR [ecx],ecx
     c92:	56                   	push   esi
     c93:	05 00 00 67 01       	add    eax,0x1670000
     c98:	09 b7 03 00 00 68    	or     DWORD PTR [edi+0x68000003],esi
     c9e:	01 09                	add    DWORD PTR [ecx],ecx
     ca0:	d6                   	(bad)  
     ca1:	02 00                	add    al,BYTE PTR [eax]
     ca3:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
     ca6:	09 85 04 00 00 70    	or     DWORD PTR [ebp+0x70000004],eax
     cac:	01 09                	add    DWORD PTR [ecx],ecx
     cae:	39 03                	cmp    DWORD PTR [ebx],eax
     cb0:	00 00                	add    BYTE PTR [eax],al
     cb2:	71 01                	jno    cb5 <sysEnter_Vector-0x12f34b>
     cb4:	09 e8                	or     eax,ebp
     cb6:	04 00                	add    al,0x0
     cb8:	00 00                	add    BYTE PTR [eax],al
     cba:	03 09                	add    ecx,DWORD PTR [ecx]
     cbc:	d9 03                	fld    DWORD PTR [ebx]
     cbe:	00 00                	add    BYTE PTR [eax],al
     cc0:	01 03                	add    DWORD PTR [ebx],eax
     cc2:	09 e8                	or     eax,ebp
     cc4:	03 00                	add    eax,DWORD PTR [eax]
     cc6:	00 02                	add    BYTE PTR [edx],al
     cc8:	03 09                	add    ecx,DWORD PTR [ecx]
     cca:	73 03                	jae    ccf <sysEnter_Vector-0x12f331>
     ccc:	00 00                	add    BYTE PTR [eax],al
     cce:	03 03                	add    eax,DWORD PTR [ebx]
     cd0:	09 b6 02 00 00 04    	or     DWORD PTR [esi+0x4000002],esi
     cd6:	03 09                	add    ecx,DWORD PTR [ecx]
     cd8:	15 03 00 00 05       	adc    eax,0x5000003
     cdd:	03 09                	add    ecx,DWORD PTR [ecx]
     cdf:	64 03 00             	add    eax,DWORD PTR fs:[eax]
     ce2:	00 06                	add    BYTE PTR [esi],al
     ce4:	03 09                	add    ecx,DWORD PTR [ecx]
     ce6:	b2 04                	mov    dl,0x4
     ce8:	00 00                	add    BYTE PTR [eax],al
     cea:	07                   	pop    es
     ceb:	03 09                	add    ecx,DWORD PTR [ecx]
     ced:	01 04 00             	add    DWORD PTR [eax+eax*1],eax
     cf0:	00 00                	add    BYTE PTR [eax],al
     cf2:	09 00                	or     DWORD PTR [eax],eax
     cf4:	0a f6                	or     dh,dh
     cf6:	06                   	push   es
     cf7:	00 00                	add    BYTE PTR [eax],al
     cf9:	17                   	pop    ss
     cfa:	01 04 1f             	add    DWORD PTR [edi+ebx*1],eax
     cfd:	42                   	inc    edx
     cfe:	02 00                	add    al,BYTE PTR [eax]
     d00:	00 0b                	add    BYTE PTR [ebx],cl
     d02:	af                   	scas   eax,DWORD PTR es:[edi]
     d03:	06                   	push   es
     d04:	00 00                	add    BYTE PTR [eax],al
     d06:	04 21                	add    al,0x21
     d08:	42                   	inc    edx
     d09:	02 00                	add    al,BYTE PTR [eax]
     d0b:	00 00                	add    BYTE PTR [eax],al
     d0d:	0c c8                	or     al,0xc8
     d0f:	06                   	push   es
     d10:	00 00                	add    BYTE PTR [eax],al
     d12:	04 22                	add    al,0x22
     d14:	81 00 00 00 04 01    	add    DWORD PTR [eax],0x1040000
     d1a:	0c 7f                	or     al,0x7f
     d1c:	06                   	push   es
     d1d:	00 00                	add    BYTE PTR [eax],al
     d1f:	04 23                	add    al,0x23
     d21:	97                   	xchg   edi,eax
     d22:	00 00                	add    BYTE PTR [eax],al
     d24:	00 05 01 0c 58 07    	add    BYTE PTR ds:0x7580c01,al
     d2a:	00 00                	add    BYTE PTR [eax],al
     d2c:	04 24                	add    al,0x24
     d2e:	97                   	xchg   edi,eax
     d2f:	00 00                	add    BYTE PTR [eax],al
     d31:	00 09                	add    BYTE PTR [ecx],cl
     d33:	01 0c 87             	add    DWORD PTR [edi+eax*4],ecx
     d36:	06                   	push   es
     d37:	00 00                	add    BYTE PTR [eax],al
     d39:	04 25                	add    al,0x25
     d3b:	8c 00                	mov    WORD PTR [eax],es
     d3d:	00 00                	add    BYTE PTR [eax],al
     d3f:	0d 01 0c 9f 05       	or     eax,0x59f0c01
     d44:	00 00                	add    BYTE PTR [eax],al
     d46:	04 26                	add    al,0x26
     d48:	8c 00                	mov    WORD PTR [eax],es
     d4a:	00 00                	add    BYTE PTR [eax],al
     d4c:	0f 01 0c 10          	sidtd  [eax+edx*1]
     d50:	06                   	push   es
     d51:	00 00                	add    BYTE PTR [eax],al
     d53:	04 27                	add    al,0x27
     d55:	8c 00                	mov    WORD PTR [eax],es
     d57:	00 00                	add    BYTE PTR [eax],al
     d59:	11 01                	adc    DWORD PTR [ecx],eax
     d5b:	0c f2                	or     al,0xf2
     d5d:	05 00 00 04 28       	add    eax,0x28040000
     d62:	8c 00                	mov    WORD PTR [eax],es
     d64:	00 00                	add    BYTE PTR [eax],al
     d66:	13 01                	adc    eax,DWORD PTR [ecx]
     d68:	0c 29                	or     al,0x29
     d6a:	07                   	pop    es
     d6b:	00 00                	add    BYTE PTR [eax],al
     d6d:	04 29                	add    al,0x29
     d6f:	8c 00                	mov    WORD PTR [eax],es
     d71:	00 00                	add    BYTE PTR [eax],al
     d73:	15 01 00 0d 7a       	adc    eax,0x7a0d0001
     d78:	00 00                	add    BYTE PTR [eax],al
     d7a:	00 53 02             	add    BYTE PTR [ebx+0x2],dl
     d7d:	00 00                	add    BYTE PTR [eax],al
     d7f:	0e                   	push   cs
     d80:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
     d83:	00 03                	add    BYTE PTR [ebx],al
     d85:	01 00                	add    DWORD PTR [eax],eax
     d87:	0f 93 06             	setae  BYTE PTR [esi]
     d8a:	00 00                	add    BYTE PTR [eax],al
     d8c:	08 04 2c             	or     BYTE PTR [esp+ebp*1],al
     d8f:	78 02                	js     d93 <sysEnter_Vector-0x12f26d>
     d91:	00 00                	add    BYTE PTR [eax],al
     d93:	0b 55 07             	or     edx,DWORD PTR [ebp+0x7]
     d96:	00 00                	add    BYTE PTR [eax],al
     d98:	04 2e                	add    al,0x2e
     d9a:	97                   	xchg   edi,eax
     d9b:	00 00                	add    BYTE PTR [eax],al
     d9d:	00 00                	add    BYTE PTR [eax],al
     d9f:	0b 2d 06 00 00 04    	or     ebp,DWORD PTR ds:0x4000006
     da5:	2f                   	das    
     da6:	97                   	xchg   edi,eax
     da7:	00 00                	add    BYTE PTR [eax],al
     da9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     dac:	06                   	push   es
     dad:	cf                   	iret   
     dae:	06                   	push   es
     daf:	00 00                	add    BYTE PTR [eax],al
     db1:	04 32                	add    al,0x32
     db3:	c0 01 00             	rol    BYTE PTR [ecx],0x0
     db6:	00 06                	add    BYTE PTR [esi],al
     db8:	da 06                	fiadd  DWORD PTR [esi]
     dba:	00 00                	add    BYTE PTR [eax],al
     dbc:	04 33                	add    al,0x33
     dbe:	53                   	push   ebx
     dbf:	02 00                	add    al,BYTE PTR [eax]
     dc1:	00 05 04 94 02 00    	add    BYTE PTR ds:0x29404,al
     dc7:	00 10                	add    BYTE PTR [eax],dl
     dc9:	7a 00                	jp     dcb <sysEnter_Vector-0x12f235>
     dcb:	00 00                	add    BYTE PTR [eax],al
     dcd:	02 01                	add    al,BYTE PTR [ecx]
     dcf:	02 e8                	add    ch,al
     dd1:	06                   	push   es
     dd2:	00 00                	add    BYTE PTR [eax],al
     dd4:	11 ee                	adc    esi,ebp
     dd6:	06                   	push   es
     dd7:	00 00                	add    BYTE PTR [eax],al
     dd9:	01 12                	add    DWORD PTR [edx],edx
     ddb:	4f                   	dec    edi
     ddc:	00 00                	add    BYTE PTR [eax],al
     dde:	00 68 0a             	add    BYTE PTR [eax+0xa],ch
     de1:	00 9f 31 00 00 00    	add    BYTE PTR [edi+0x31],bl
     de7:	01 9c e4 02 00 00 12 	add    DWORD PTR [esp+eiz*8+0x12000002],ebx
     dee:	9a 05 00 00 01 12 74 	call   0x7412:0x1000005
     df5:	00 00                	add    BYTE PTR [eax],al
     df7:	00 02                	add    BYTE PTR [edx],al
     df9:	91                   	xchg   ecx,eax
     dfa:	00 12                	add    BYTE PTR [edx],dl
     dfc:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     dfd:	06                   	push   es
     dfe:	00 00                	add    BYTE PTR [eax],al
     e00:	01 12                	add    DWORD PTR [edx],edx
     e02:	e4 02                	in     al,0x2
     e04:	00 00                	add    BYTE PTR [eax],al
     e06:	02 91 04 12 b5 07    	add    dl,BYTE PTR [ecx+0x7b51204]
     e0c:	00 00                	add    BYTE PTR [eax],al
     e0e:	01 12                	add    DWORD PTR [edx],edx
     e10:	4f                   	dec    edi
     e11:	00 00                	add    BYTE PTR [eax],al
     e13:	00 02                	add    BYTE PTR [edx],al
     e15:	91                   	xchg   ecx,eax
     e16:	08 00                	or     BYTE PTR [eax],al
     e18:	05 04 78 02 00       	add    eax,0x27804
     e1d:	00 11                	add    BYTE PTR [ecx],dl
     e1f:	ae                   	scas   al,BYTE PTR es:[edi]
     e20:	07                   	pop    es
     e21:	00 00                	add    BYTE PTR [eax],al
     e23:	01 17                	add    DWORD PTR [edi],edx
     e25:	4f                   	dec    edi
     e26:	00 00                	add    BYTE PTR [eax],al
     e28:	00 99 0a 00 9f 26    	add    BYTE PTR [ecx+0x269f000a],bl
     e2e:	00 00                	add    BYTE PTR [eax],al
     e30:	00 01                	add    BYTE PTR [ecx],al
     e32:	9c                   	pushf  
     e33:	2e 03 00             	add    eax,DWORD PTR cs:[eax]
     e36:	00 12                	add    BYTE PTR [edx],dl
     e38:	9a 05 00 00 01 17 74 	call   0x7417:0x1000005
     e3f:	00 00                	add    BYTE PTR [eax],al
     e41:	00 02                	add    BYTE PTR [edx],al
     e43:	91                   	xchg   ecx,eax
     e44:	00 12                	add    BYTE PTR [edx],dl
     e46:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     e47:	06                   	push   es
     e48:	00 00                	add    BYTE PTR [eax],al
     e4a:	01 17                	add    DWORD PTR [edi],edx
     e4c:	e4 02                	in     al,0x2
     e4e:	00 00                	add    BYTE PTR [eax],al
     e50:	02 91 04 12 b5 07    	add    dl,BYTE PTR [ecx+0x7b51204]
     e56:	00 00                	add    BYTE PTR [eax],al
     e58:	01 17                	add    DWORD PTR [edi],edx
     e5a:	4f                   	dec    edi
     e5b:	00 00                	add    BYTE PTR [eax],al
     e5d:	00 02                	add    BYTE PTR [edx],al
     e5f:	91                   	xchg   ecx,eax
     e60:	08 00                	or     BYTE PTR [eax],al
     e62:	11 1b                	adc    DWORD PTR [ebx],ebx
     e64:	06                   	push   es
     e65:	00 00                	add    BYTE PTR [eax],al
     e67:	01 1c 72             	add    DWORD PTR [edx+esi*2],ebx
     e6a:	00 00                	add    BYTE PTR [eax],al
     e6c:	00 bf 0a 00 9f 2c    	add    BYTE PTR [edi+0x2c9f000a],bh
     e72:	00 00                	add    BYTE PTR [eax],al
     e74:	00 01                	add    BYTE PTR [ecx],al
     e76:	9c                   	pushf  
     e77:	64 03 00             	add    eax,DWORD PTR fs:[eax]
     e7a:	00 12                	add    BYTE PTR [edx],dl
     e7c:	9a 05 00 00 01 1c 74 	call   0x741c:0x1000005
     e83:	00 00                	add    BYTE PTR [eax],al
     e85:	00 02                	add    BYTE PTR [edx],al
     e87:	91                   	xchg   ecx,eax
     e88:	00 12                	add    BYTE PTR [edx],dl
     e8a:	11 07                	adc    DWORD PTR [edi],eax
     e8c:	00 00                	add    BYTE PTR [eax],al
     e8e:	01 1c 8e             	add    DWORD PTR [esi+ecx*4],ebx
     e91:	02 00                	add    al,BYTE PTR [eax]
     e93:	00 02                	add    BYTE PTR [edx],al
     e95:	91                   	xchg   ecx,eax
     e96:	04 00                	add    al,0x0
     e98:	11 6d 06             	adc    DWORD PTR [ebp+0x6],ebp
     e9b:	00 00                	add    BYTE PTR [eax],al
     e9d:	01 22                	add    DWORD PTR [edx],esp
     e9f:	72 00                	jb     ea1 <sysEnter_Vector-0x12f15f>
     ea1:	00 00                	add    BYTE PTR [eax],al
     ea3:	eb 0a                	jmp    eaf <sysEnter_Vector-0x12f151>
     ea5:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
     eab:	01 9c 9a 03 00 00 12 	add    DWORD PTR [edx+ebx*4+0x12000003],ebx
     eb2:	9a 05 00 00 01 22 74 	call   0x7422:0x1000005
     eb9:	00 00                	add    BYTE PTR [eax],al
     ebb:	00 02                	add    BYTE PTR [edx],al
     ebd:	91                   	xchg   ecx,eax
     ebe:	00 12                	add    BYTE PTR [edx],dl
     ec0:	11 07                	adc    DWORD PTR [edi],eax
     ec2:	00 00                	add    BYTE PTR [eax],al
     ec4:	01 22                	add    DWORD PTR [edx],esp
     ec6:	8e 02                	mov    es,WORD PTR [edx]
     ec8:	00 00                	add    BYTE PTR [eax],al
     eca:	02 91 04 00 13 93    	add    dl,BYTE PTR [ecx-0x6cecfffc]
     ed0:	07                   	pop    es
     ed1:	00 00                	add    BYTE PTR [eax],al
     ed3:	01 27                	add    DWORD PTR [edi],esp
     ed5:	0e                   	push   cs
     ed6:	0b 00                	or     eax,DWORD PTR [eax]
     ed8:	9f                   	lahf   
     ed9:	59                   	pop    ecx
     eda:	00 00                	add    BYTE PTR [eax],al
     edc:	00 01                	add    BYTE PTR [ecx],al
     ede:	9c                   	pushf  
     edf:	11 6a 06             	adc    DWORD PTR [edx+0x6],ebp
     ee2:	00 00                	add    BYTE PTR [eax],al
     ee4:	01 2e                	add    DWORD PTR [esi],ebp
     ee6:	72 00                	jb     ee8 <sysEnter_Vector-0x12f118>
     ee8:	00 00                	add    BYTE PTR [eax],al
     eea:	67 0b 00             	or     eax,DWORD PTR [bx+si]
     eed:	9f                   	lahf   
     eee:	93                   	xchg   ebx,eax
     eef:	00 00                	add    BYTE PTR [eax],al
     ef1:	00 01                	add    BYTE PTR [ecx],al
     ef3:	9c                   	pushf  
     ef4:	fd                   	std    
     ef5:	03 00                	add    eax,DWORD PTR [eax]
     ef7:	00 12                	add    BYTE PTR [edx],dl
     ef9:	9a 05 00 00 01 2e 74 	call   0x742e:0x1000005
     f00:	00 00                	add    BYTE PTR [eax],al
     f02:	00 02                	add    BYTE PTR [edx],al
     f04:	91                   	xchg   ecx,eax
     f05:	00 12                	add    BYTE PTR [edx],dl
     f07:	11 07                	adc    DWORD PTR [edi],eax
     f09:	00 00                	add    BYTE PTR [eax],al
     f0b:	01 2e                	add    DWORD PTR [esi],ebp
     f0d:	8e 02                	mov    es,WORD PTR [edx]
     f0f:	00 00                	add    BYTE PTR [eax],al
     f11:	02 91 04 12 93 05    	add    dl,BYTE PTR [ecx+0x5931204]
     f17:	00 00                	add    BYTE PTR [eax],al
     f19:	01 2e                	add    DWORD PTR [esi],ebp
     f1b:	72 00                	jb     f1d <sysEnter_Vector-0x12f0e3>
     f1d:	00 00                	add    BYTE PTR [eax],al
     f1f:	02 91 08 14 72 05    	add    dl,BYTE PTR [ecx+0x5721408]
     f25:	00 00                	add    BYTE PTR [eax],al
     f27:	01 30                	add    DWORD PTR [eax],esi
     f29:	72 00                	jb     f2b <sysEnter_Vector-0x12f0d5>
     f2b:	00 00                	add    BYTE PTR [eax],al
     f2d:	02 91 6c 00 15 35    	add    dl,BYTE PTR [ecx+0x3515006c]
     f33:	07                   	pop    es
     f34:	00 00                	add    BYTE PTR [eax],al
     f36:	01 3c fa             	add    DWORD PTR [edx+edi*8],edi
     f39:	0b 00                	or     eax,DWORD PTR [eax]
     f3b:	9f                   	lahf   
     f3c:	2a 00                	sub    al,BYTE PTR [eax]
     f3e:	00 00                	add    BYTE PTR [eax],al
     f40:	01 9c 21 04 00 00 12 	add    DWORD PTR [ecx+eiz*1+0x12000004],ebx
     f47:	6d                   	ins    DWORD PTR es:[edi],dx
     f48:	07                   	pop    es
     f49:	00 00                	add    BYTE PTR [eax],al
     f4b:	01 3c 72             	add    DWORD PTR [edx+esi*2],edi
     f4e:	00 00                	add    BYTE PTR [eax],al
     f50:	00 02                	add    BYTE PTR [edx],al
     f52:	91                   	xchg   ecx,eax
     f53:	00 00                	add    BYTE PTR [eax],al
     f55:	15 79 05 00 00       	adc    eax,0x579
     f5a:	01 41 24             	add    DWORD PTR [ecx+0x24],eax
     f5d:	0c 00                	or     al,0x0
     f5f:	9f                   	lahf   
     f60:	20 00                	and    BYTE PTR [eax],al
     f62:	00 00                	add    BYTE PTR [eax],al
     f64:	01 9c 45 04 00 00 12 	add    DWORD PTR [ebp+eax*2+0x12000004],ebx
     f6b:	6d                   	ins    DWORD PTR es:[edi],dx
     f6c:	07                   	pop    es
     f6d:	00 00                	add    BYTE PTR [eax],al
     f6f:	01 41 72             	add    DWORD PTR [ecx+0x72],eax
     f72:	00 00                	add    BYTE PTR [eax],al
     f74:	00 02                	add    BYTE PTR [edx],al
     f76:	91                   	xchg   ecx,eax
     f77:	00 00                	add    BYTE PTR [eax],al
     f79:	11 ff                	adc    edi,edi
     f7b:	06                   	push   es
     f7c:	00 00                	add    BYTE PTR [eax],al
     f7e:	01 46 4f             	add    DWORD PTR [esi+0x4f],eax
     f81:	00 00                	add    BYTE PTR [eax],al
     f83:	00 44 0c 00          	add    BYTE PTR [esp+ecx*1+0x0],al
     f87:	9f                   	lahf   
     f88:	35 00 00 00 01       	xor    eax,0x1000000
     f8d:	9c                   	pushf  
     f8e:	97                   	xchg   edi,eax
     f8f:	04 00                	add    al,0x0
     f91:	00 12                	add    BYTE PTR [edx],dl
     f93:	6d                   	ins    DWORD PTR es:[edi],dx
     f94:	07                   	pop    es
     f95:	00 00                	add    BYTE PTR [eax],al
     f97:	01 46 72             	add    DWORD PTR [esi+0x72],eax
     f9a:	00 00                	add    BYTE PTR [eax],al
     f9c:	00 02                	add    BYTE PTR [edx],al
     f9e:	91                   	xchg   ecx,eax
     f9f:	00 12                	add    BYTE PTR [edx],dl
     fa1:	16                   	push   ss
     fa2:	07                   	pop    es
     fa3:	00 00                	add    BYTE PTR [eax],al
     fa5:	01 46 72             	add    DWORD PTR [esi+0x72],eax
     fa8:	00 00                	add    BYTE PTR [eax],al
     faa:	00 02                	add    BYTE PTR [edx],al
     fac:	91                   	xchg   ecx,eax
     fad:	04 12                	add    al,0x12
     faf:	58                   	pop    eax
     fb0:	07                   	pop    es
     fb1:	00 00                	add    BYTE PTR [eax],al
     fb3:	01 46 4f             	add    DWORD PTR [esi+0x4f],eax
     fb6:	00 00                	add    BYTE PTR [eax],al
     fb8:	00 02                	add    BYTE PTR [edx],al
     fba:	91                   	xchg   ecx,eax
     fbb:	08 12                	or     BYTE PTR [edx],dl
     fbd:	05 07 00 00 01       	add    eax,0x1000007
     fc2:	46                   	inc    esi
     fc3:	4f                   	dec    edi
     fc4:	00 00                	add    BYTE PTR [eax],al
     fc6:	00 02                	add    BYTE PTR [edx],al
     fc8:	91                   	xchg   ecx,eax
     fc9:	0c 00                	or     al,0x0
     fcb:	11 0c 07             	adc    DWORD PTR [edi+eax*1],ecx
     fce:	00 00                	add    BYTE PTR [eax],al
     fd0:	01 4b 4f             	add    DWORD PTR [ebx+0x4f],ecx
     fd3:	00 00                	add    BYTE PTR [eax],al
     fd5:	00 79 0c             	add    BYTE PTR [ecx+0xc],bh
     fd8:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
     fde:	01 9c e9 04 00 00 12 	add    DWORD PTR [ecx+ebp*8+0x12000004],ebx
     fe5:	6d                   	ins    DWORD PTR es:[edi],dx
     fe6:	07                   	pop    es
     fe7:	00 00                	add    BYTE PTR [eax],al
     fe9:	01 4b 72             	add    DWORD PTR [ebx+0x72],ecx
     fec:	00 00                	add    BYTE PTR [eax],al
     fee:	00 02                	add    BYTE PTR [edx],al
     ff0:	91                   	xchg   ecx,eax
     ff1:	00 12                	add    BYTE PTR [edx],dl
     ff3:	16                   	push   ss
     ff4:	07                   	pop    es
     ff5:	00 00                	add    BYTE PTR [eax],al
     ff7:	01 4b 72             	add    DWORD PTR [ebx+0x72],ecx
     ffa:	00 00                	add    BYTE PTR [eax],al
     ffc:	00 02                	add    BYTE PTR [edx],al
     ffe:	91                   	xchg   ecx,eax
     fff:	04 12                	add    al,0x12
    1001:	58                   	pop    eax
    1002:	07                   	pop    es
    1003:	00 00                	add    BYTE PTR [eax],al
    1005:	01 4b 4f             	add    DWORD PTR [ebx+0x4f],ecx
    1008:	00 00                	add    BYTE PTR [eax],al
    100a:	00 02                	add    BYTE PTR [edx],al
    100c:	91                   	xchg   ecx,eax
    100d:	08 12                	or     BYTE PTR [edx],dl
    100f:	05 07 00 00 01       	add    eax,0x1000007
    1014:	4b                   	dec    ebx
    1015:	4f                   	dec    edi
    1016:	00 00                	add    BYTE PTR [eax],al
    1018:	00 02                	add    BYTE PTR [edx],al
    101a:	91                   	xchg   ecx,eax
    101b:	0c 00                	or     al,0x0
    101d:	11 41 06             	adc    DWORD PTR [ecx+0x6],eax
    1020:	00 00                	add    BYTE PTR [eax],al
    1022:	01 4f 4f             	add    DWORD PTR [edi+0x4f],ecx
    1025:	00 00                	add    BYTE PTR [eax],al
    1027:	00 9f 0c 00 9f 35    	add    BYTE PTR [edi+0x359f000c],bl
    102d:	00 00                	add    BYTE PTR [eax],al
    102f:	00 01                	add    BYTE PTR [ecx],al
    1031:	9c                   	pushf  
    1032:	3b 05 00 00 12 6d    	cmp    eax,DWORD PTR ds:0x6d120000
    1038:	07                   	pop    es
    1039:	00 00                	add    BYTE PTR [eax],al
    103b:	01 4f 72             	add    DWORD PTR [edi+0x72],ecx
    103e:	00 00                	add    BYTE PTR [eax],al
    1040:	00 02                	add    BYTE PTR [edx],al
    1042:	91                   	xchg   ecx,eax
    1043:	00 12                	add    BYTE PTR [edx],dl
    1045:	16                   	push   ss
    1046:	07                   	pop    es
    1047:	00 00                	add    BYTE PTR [eax],al
    1049:	01 4f 72             	add    DWORD PTR [edi+0x72],ecx
    104c:	00 00                	add    BYTE PTR [eax],al
    104e:	00 02                	add    BYTE PTR [edx],al
    1050:	91                   	xchg   ecx,eax
    1051:	04 12                	add    al,0x12
    1053:	58                   	pop    eax
    1054:	07                   	pop    es
    1055:	00 00                	add    BYTE PTR [eax],al
    1057:	01 4f 4f             	add    DWORD PTR [edi+0x4f],ecx
    105a:	00 00                	add    BYTE PTR [eax],al
    105c:	00 02                	add    BYTE PTR [edx],al
    105e:	91                   	xchg   ecx,eax
    105f:	08 12                	or     BYTE PTR [edx],dl
    1061:	05 07 00 00 01       	add    eax,0x1000007
    1066:	4f                   	dec    edi
    1067:	4f                   	dec    edi
    1068:	00 00                	add    BYTE PTR [eax],al
    106a:	00 02                	add    BYTE PTR [edx],al
    106c:	91                   	xchg   ecx,eax
    106d:	0c 00                	or     al,0x0
    106f:	11 9a 06 00 00 01    	adc    DWORD PTR [edx+0x1000006],ebx
    1075:	54                   	push   esp
    1076:	4f                   	dec    edi
    1077:	00 00                	add    BYTE PTR [eax],al
    1079:	00 d4                	add    ah,dl
    107b:	0c 00                	or     al,0x0
    107d:	9f                   	lahf   
    107e:	26 00 00             	add    BYTE PTR es:[eax],al
    1081:	00 01                	add    BYTE PTR [ecx],al
    1083:	9c                   	pushf  
    1084:	8d 05 00 00 12 6d    	lea    eax,ds:0x6d120000
    108a:	07                   	pop    es
    108b:	00 00                	add    BYTE PTR [eax],al
    108d:	01 54 72 00          	add    DWORD PTR [edx+esi*2+0x0],edx
    1091:	00 00                	add    BYTE PTR [eax],al
    1093:	02 91 00 12 16 07    	add    dl,BYTE PTR [ecx+0x7161200]
    1099:	00 00                	add    BYTE PTR [eax],al
    109b:	01 54 72 00          	add    DWORD PTR [edx+esi*2+0x0],edx
    109f:	00 00                	add    BYTE PTR [eax],al
    10a1:	02 91 04 12 58 07    	add    dl,BYTE PTR [ecx+0x7581204]
    10a7:	00 00                	add    BYTE PTR [eax],al
    10a9:	01 54 4f 00          	add    DWORD PTR [edi+ecx*2+0x0],edx
    10ad:	00 00                	add    BYTE PTR [eax],al
    10af:	02 91 08 12 05 07    	add    dl,BYTE PTR [ecx+0x7051208]
    10b5:	00 00                	add    BYTE PTR [eax],al
    10b7:	01 54 4f 00          	add    DWORD PTR [edi+ecx*2+0x0],edx
    10bb:	00 00                	add    BYTE PTR [eax],al
    10bd:	02 91 0c 00 11 3c    	add    dl,BYTE PTR [ecx+0x3c11000c]
    10c3:	07                   	pop    es
    10c4:	00 00                	add    BYTE PTR [eax],al
    10c6:	01 59 4f             	add    DWORD PTR [ecx+0x4f],ebx
    10c9:	00 00                	add    BYTE PTR [eax],al
    10cb:	00 fa                	add    dl,bh
    10cd:	0c 00                	or     al,0x0
    10cf:	9f                   	lahf   
    10d0:	2e 00 00             	add    BYTE PTR cs:[eax],al
    10d3:	00 01                	add    BYTE PTR [ecx],al
    10d5:	9c                   	pushf  
    10d6:	d1 05 00 00 12 6d    	rol    DWORD PTR ds:0x6d120000,1
    10dc:	07                   	pop    es
    10dd:	00 00                	add    BYTE PTR [eax],al
    10df:	01 59 72             	add    DWORD PTR [ecx+0x72],ebx
    10e2:	00 00                	add    BYTE PTR [eax],al
    10e4:	00 02                	add    BYTE PTR [edx],al
    10e6:	91                   	xchg   ecx,eax
    10e7:	00 12                	add    BYTE PTR [edx],dl
    10e9:	38 06                	cmp    BYTE PTR [esi],al
    10eb:	00 00                	add    BYTE PTR [eax],al
    10ed:	01 59 64             	add    DWORD PTR [ecx+0x64],ebx
    10f0:	00 00                	add    BYTE PTR [eax],al
    10f2:	00 02                	add    BYTE PTR [edx],al
    10f4:	91                   	xchg   ecx,eax
    10f5:	04 12                	add    al,0x12
    10f7:	4d                   	dec    ebp
    10f8:	06                   	push   es
    10f9:	00 00                	add    BYTE PTR [eax],al
    10fb:	01 59 4f             	add    DWORD PTR [ecx+0x4f],ebx
    10fe:	00 00                	add    BYTE PTR [eax],al
    1100:	00 02                	add    BYTE PTR [edx],al
    1102:	91                   	xchg   ecx,eax
    1103:	08 00                	or     BYTE PTR [eax],al
    1105:	11 48 06             	adc    DWORD PTR [eax+0x6],ecx
    1108:	00 00                	add    BYTE PTR [eax],al
    110a:	01 5e 4f             	add    DWORD PTR [esi+0x4f],ebx
    110d:	00 00                	add    BYTE PTR [eax],al
    110f:	00 28                	add    BYTE PTR [eax],ch
    1111:	0d 00 9f 26 00       	or     eax,0x269f00
    1116:	00 00                	add    BYTE PTR [eax],al
    1118:	01 9c 15 06 00 00 12 	add    DWORD PTR [ebp+edx*1+0x12000006],ebx
    111f:	6d                   	ins    DWORD PTR es:[edi],dx
    1120:	07                   	pop    es
    1121:	00 00                	add    BYTE PTR [eax],al
    1123:	01 5e 72             	add    DWORD PTR [esi+0x72],ebx
    1126:	00 00                	add    BYTE PTR [eax],al
    1128:	00 02                	add    BYTE PTR [edx],al
    112a:	91                   	xchg   ecx,eax
    112b:	00 12                	add    BYTE PTR [edx],dl
    112d:	38 06                	cmp    BYTE PTR [esi],al
    112f:	00 00                	add    BYTE PTR [eax],al
    1131:	01 5e 64             	add    DWORD PTR [esi+0x64],ebx
    1134:	00 00                	add    BYTE PTR [eax],al
    1136:	00 02                	add    BYTE PTR [edx],al
    1138:	91                   	xchg   ecx,eax
    1139:	04 12                	add    al,0x12
    113b:	4d                   	dec    ebp
    113c:	06                   	push   es
    113d:	00 00                	add    BYTE PTR [eax],al
    113f:	01 5e 4f             	add    DWORD PTR [esi+0x4f],ebx
    1142:	00 00                	add    BYTE PTR [eax],al
    1144:	00 02                	add    BYTE PTR [edx],al
    1146:	91                   	xchg   ecx,eax
    1147:	08 00                	or     BYTE PTR [eax],al
    1149:	11 bd 05 00 00 01    	adc    DWORD PTR [ebp+0x1000005],edi
    114f:	62 4f 00             	bound  ecx,QWORD PTR [edi+0x0]
    1152:	00 00                	add    BYTE PTR [eax],al
    1154:	4e                   	dec    esi
    1155:	0d 00 9f 2d 00       	or     eax,0x2d9f00
    115a:	00 00                	add    BYTE PTR [eax],al
    115c:	01 9c 4b 06 00 00 12 	add    DWORD PTR [ebx+ecx*2+0x12000006],ebx
    1163:	9a 05 00 00 01 62 74 	call   0x7462:0x1000005
    116a:	00 00                	add    BYTE PTR [eax],al
    116c:	00 02                	add    BYTE PTR [edx],al
    116e:	91                   	xchg   ecx,eax
    116f:	00 12                	add    BYTE PTR [edx],dl
    1171:	95                   	xchg   ebp,eax
    1172:	06                   	push   es
    1173:	00 00                	add    BYTE PTR [eax],al
    1175:	01 62 4b             	add    DWORD PTR [edx+0x4b],esp
    1178:	06                   	push   es
    1179:	00 00                	add    BYTE PTR [eax],al
    117b:	02 91 04 00 05 04    	add    dl,BYTE PTR [ecx+0x4050004]
    1181:	83 02 00             	add    DWORD PTR [edx],0x0
    1184:	00 11                	add    BYTE PTR [ecx],dl
    1186:	95                   	xchg   ebp,eax
    1187:	06                   	push   es
    1188:	00 00                	add    BYTE PTR [eax],al
    118a:	01 67 4f             	add    DWORD PTR [edi+0x4f],esp
    118d:	00 00                	add    BYTE PTR [eax],al
    118f:	00 7b 0d             	add    BYTE PTR [ebx+0xd],bh
    1192:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
    1198:	01 9c 87 06 00 00 12 	add    DWORD PTR [edi+eax*4+0x12000006],ebx
    119f:	9a 05 00 00 01 67 74 	call   0x7467:0x1000005
    11a6:	00 00                	add    BYTE PTR [eax],al
    11a8:	00 02                	add    BYTE PTR [edx],al
    11aa:	91                   	xchg   ecx,eax
    11ab:	00 12                	add    BYTE PTR [edx],dl
    11ad:	95                   	xchg   ebp,eax
    11ae:	06                   	push   es
    11af:	00 00                	add    BYTE PTR [eax],al
    11b1:	01 67 4b             	add    DWORD PTR [edi+0x4b],esp
    11b4:	06                   	push   es
    11b5:	00 00                	add    BYTE PTR [eax],al
    11b7:	02 91 04 00 11 21    	add    dl,BYTE PTR [ecx+0x21110004]
    11bd:	06                   	push   es
    11be:	00 00                	add    BYTE PTR [eax],al
    11c0:	01 6c 4f 00          	add    DWORD PTR [edi+ecx*2+0x0],ebp
    11c4:	00 00                	add    BYTE PTR [eax],al
    11c6:	9e                   	sahf   
    11c7:	0d 00 9f 29 03       	or     eax,0x3299f00
    11cc:	00 00                	add    BYTE PTR [eax],al
    11ce:	01 9c 37 07 00 00 12 	add    DWORD PTR [edi+esi*1+0x12000007],ebx
    11d5:	80 07 00             	add    BYTE PTR [edi],0x0
    11d8:	00 01                	add    BYTE PTR [ecx],al
    11da:	6c                   	ins    BYTE PTR es:[edi],dx
    11db:	8e 02                	mov    es,WORD PTR [edx]
    11dd:	00 00                	add    BYTE PTR [eax],al
    11df:	02 91 00 12 b8 06    	add    dl,BYTE PTR [ecx+0x6b81200]
    11e5:	00 00                	add    BYTE PTR [eax],al
    11e7:	01 6c 74 00          	add    DWORD PTR [esp+esi*2+0x0],ebp
    11eb:	00 00                	add    BYTE PTR [eax],al
    11ed:	02 91 04 12 c9 05    	add    dl,BYTE PTR [ecx+0x5c91204]
    11f3:	00 00                	add    BYTE PTR [eax],al
    11f5:	01 6c 99 02          	add    DWORD PTR [ecx+ebx*4+0x2],ebp
    11f9:	00 00                	add    BYTE PTR [eax],al
    11fb:	02 91 4c 14 7c 01    	add    dl,BYTE PTR [ecx+0x17c144c]
    1201:	00 00                	add    BYTE PTR [eax],al
    1203:	01 6e 37             	add    DWORD PTR [esi+0x37],ebp
    1206:	07                   	pop    es
    1207:	00 00                	add    BYTE PTR [eax],al
    1209:	02 91 5e 14 e2 06    	add    dl,BYTE PTR [ecx+0x6e2145e]
    120f:	00 00                	add    BYTE PTR [eax],al
    1211:	01 6f 74             	add    DWORD PTR [edi+0x74],ebp
    1214:	00 00                	add    BYTE PTR [eax],al
    1216:	00 02                	add    BYTE PTR [edx],al
    1218:	91                   	xchg   ecx,eax
    1219:	6c                   	ins    BYTE PTR es:[edi],dx
    121a:	14 72                	adc    al,0x72
    121c:	05 00 00 01 70       	add    eax,0x70010000
    1221:	4f                   	dec    edi
    1222:	00 00                	add    BYTE PTR [eax],al
    1224:	00 02                	add    BYTE PTR [edx],al
    1226:	91                   	xchg   ecx,eax
    1227:	68 14 94 06 00       	push   0x69414
    122c:	00 01                	add    BYTE PTR [ecx],al
    122e:	71 83                	jno    11b3 <sysEnter_Vector-0x12ee4d>
    1230:	02 00                	add    al,BYTE PTR [eax]
    1232:	00 02                	add    BYTE PTR [edx],al
    1234:	91                   	xchg   ecx,eax
    1235:	54                   	push   esp
    1236:	16                   	push   ss
    1237:	60                   	pusha  
    1238:	0f 00 9f bd 00 00 00 	ltr    WORD PTR [edi+0xbd]
    123f:	1e                   	push   ds
    1240:	07                   	pop    es
    1241:	00 00                	add    BYTE PTR [eax],al
    1243:	17                   	pop    ss
    1244:	72 65                	jb     12ab <sysEnter_Vector-0x12ed55>
    1246:	73 00                	jae    1248 <sysEnter_Vector-0x12edb8>
    1248:	01 9d 4f 00 00 00    	add    DWORD PTR [ebp+0x4f],ebx
    124e:	02 91 64 00 18 31    	add    dl,BYTE PTR [ecx+0x31180064]
    1254:	10 00                	adc    BYTE PTR [eax],al
    1256:	9f                   	lahf   
    1257:	8e 00                	mov    es,WORD PTR [eax]
    1259:	00 00                	add    BYTE PTR [eax],al
    125b:	17                   	pop    ss
    125c:	72 65                	jb     12c3 <sysEnter_Vector-0x12ed3d>
    125e:	73 00                	jae    1260 <sysEnter_Vector-0x12eda0>
    1260:	01 ac 4f 00 00 00 02 	add    DWORD PTR [edi+ecx*2+0x2000000],ebp
    1267:	91                   	xchg   ecx,eax
    1268:	60                   	pusha  
    1269:	00 00                	add    BYTE PTR [eax],al
    126b:	0d 7a 00 00 00       	or     eax,0x7a
    1270:	47                   	inc    edi
    1271:	07                   	pop    es
    1272:	00 00                	add    BYTE PTR [eax],al
    1274:	19 6b 00             	sbb    DWORD PTR [ebx+0x0],ebp
    1277:	00 00                	add    BYTE PTR [eax],al
    1279:	01 00                	add    DWORD PTR [eax],eax
    127b:	11 aa 05 00 00 01    	adc    DWORD PTR [edx+0x1000005],ebp
    1281:	b8 64 00 00 00       	mov    eax,0x64
    1286:	c7                   	(bad)  
    1287:	10 00                	adc    BYTE PTR [eax],al
    1289:	9f                   	lahf   
    128a:	29 00                	sub    DWORD PTR [eax],eax
    128c:	00 00                	add    BYTE PTR [eax],al
    128e:	01 9c 6f 07 00 00 12 	add    DWORD PTR [edi+ebp*2+0x12000007],ebx
    1295:	93                   	xchg   ebx,eax
    1296:	05 00 00 01 b8       	add    eax,0xb8010000
    129b:	72 00                	jb     129d <sysEnter_Vector-0x12ed63>
    129d:	00 00                	add    BYTE PTR [eax],al
    129f:	02 91 00 00 11 ed    	add    dl,BYTE PTR [ecx-0x12ef0000]
    12a5:	05 00 00 01 bd       	add    eax,0xbd010000
    12aa:	64 00 00             	add    BYTE PTR fs:[eax],al
    12ad:	00 f0                	add    al,dh
    12af:	10 00                	adc    BYTE PTR [eax],al
    12b1:	9f                   	lahf   
    12b2:	20 00                	and    BYTE PTR [eax],al
    12b4:	00 00                	add    BYTE PTR [eax],al
    12b6:	01 9c 97 07 00 00 12 	add    DWORD PTR [edi+edx*4+0x12000007],ebx
    12bd:	93                   	xchg   ebx,eax
    12be:	05 00 00 01 bd       	add    eax,0xbd010000
    12c3:	72 00                	jb     12c5 <sysEnter_Vector-0x12ed3b>
    12c5:	00 00                	add    BYTE PTR [eax],al
    12c7:	02 91 00 00 11 fe    	add    dl,BYTE PTR [ecx-0x1ef0000]
    12cd:	05 00 00 01 c2       	add    eax,0xc2010000
    12d2:	ad                   	lods   eax,DWORD PTR ds:[esi]
    12d3:	00 00                	add    BYTE PTR [eax],al
    12d5:	00 10                	add    BYTE PTR [eax],dl
    12d7:	11 00                	adc    DWORD PTR [eax],eax
    12d9:	9f                   	lahf   
    12da:	c1 01 00             	rol    DWORD PTR [ecx],0x0
    12dd:	00 01                	add    BYTE PTR [ecx],al
    12df:	9c                   	pushf  
    12e0:	54                   	push   esp
    12e1:	08 00                	or     BYTE PTR [eax],al
    12e3:	00 12                	add    BYTE PTR [edx],dl
    12e5:	c0 06 00             	rol    BYTE PTR [esi],0x0
    12e8:	00 01                	add    BYTE PTR [ecx],al
    12ea:	c2 54 08             	ret    0x854
    12ed:	00 00                	add    BYTE PTR [eax],al
    12ef:	02 91 00 1a 6e 00    	add    dl,BYTE PTR [ecx+0x6e1a00]
    12f5:	01 c2                	add    edx,eax
    12f7:	5a                   	pop    edx
    12f8:	08 00                	or     BYTE PTR [eax],al
    12fa:	00 02                	add    BYTE PTR [edx],al
    12fc:	91                   	xchg   ecx,eax
    12fd:	04 12                	add    al,0x12
    12ff:	93                   	xchg   ebx,eax
    1300:	05 00 00 01 c2       	add    eax,0xc2010000
    1305:	72 00                	jb     1307 <sysEnter_Vector-0x12ecf9>
    1307:	00 00                	add    BYTE PTR [eax],al
    1309:	02 91 08 14 16 07    	add    dl,BYTE PTR [ecx+0x7161408]
    130f:	00 00                	add    BYTE PTR [eax],al
    1311:	01 c4                	add    esp,eax
    1313:	74 00                	je     1315 <sysEnter_Vector-0x12eceb>
    1315:	00 00                	add    BYTE PTR [eax],al
    1317:	02 91 54 14 a0 07    	add    dl,BYTE PTR [ecx+0x7a01454]
    131d:	00 00                	add    BYTE PTR [eax],al
    131f:	01 c5                	add    ebp,eax
    1321:	4f                   	dec    edi
    1322:	00 00                	add    BYTE PTR [eax],al
    1324:	00 02                	add    BYTE PTR [edx],al
    1326:	91                   	xchg   ecx,eax
    1327:	60                   	pusha  
    1328:	14 1d                	adc    al,0x1d
    132a:	07                   	pop    es
    132b:	00 00                	add    BYTE PTR [eax],al
    132d:	01 c6                	add    esi,eax
    132f:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1330:	00 00                	add    BYTE PTR [eax],al
    1332:	00 02                	add    BYTE PTR [edx],al
    1334:	91                   	xchg   ecx,eax
    1335:	6c                   	ins    BYTE PTR es:[edi],dx
    1336:	14 c3                	adc    al,0xc3
    1338:	05 00 00 01 c7       	add    eax,0xc7010000
    133d:	74 00                	je     133f <sysEnter_Vector-0x12ecc1>
    133f:	00 00                	add    BYTE PTR [eax],al
    1341:	02 91 5c 14 72 06    	add    dl,BYTE PTR [ecx+0x672145c]
    1347:	00 00                	add    BYTE PTR [eax],al
    1349:	01 c8                	add    eax,ecx
    134b:	74 00                	je     134d <sysEnter_Vector-0x12ecb3>
    134d:	00 00                	add    BYTE PTR [eax],al
    134f:	02 91 50 14 87 07    	add    dl,BYTE PTR [ecx+0x7871450]
    1355:	00 00                	add    BYTE PTR [eax],al
    1357:	01 c9                	add    ecx,ecx
    1359:	ad                   	lods   eax,DWORD PTR ds:[esi]
    135a:	00 00                	add    BYTE PTR [eax],al
    135c:	00 02                	add    BYTE PTR [edx],al
    135e:	91                   	xchg   ecx,eax
    135f:	68 14 b0 05 00       	push   0x5b014
    1364:	00 01                	add    BYTE PTR [ecx],al
    1366:	ca 4f 00             	retf   0x4f
    1369:	00 00                	add    BYTE PTR [eax],al
    136b:	02 91 58 14 72 05    	add    dl,BYTE PTR [ecx+0x5721458]
    1371:	00 00                	add    BYTE PTR [eax],al
    1373:	01 cb                	add    ebx,ecx
    1375:	4f                   	dec    edi
    1376:	00 00                	add    BYTE PTR [eax],al
    1378:	00 02                	add    BYTE PTR [edx],al
    137a:	91                   	xchg   ecx,eax
    137b:	64 1b 5c 06 00       	sbb    ebx,DWORD PTR fs:[esi+eax*1+0x0]
    1380:	00 01                	add    BYTE PTR [ecx],al
    1382:	e8 bb 12 00 9f       	call   9f002642 <mallocI+0x14d>
    1387:	00 05 04 74 00 00    	add    BYTE PTR ds:0x7404,al
    138d:	00 05 04 ad 00 00    	add    BYTE PTR ds:0xad04,al
    1393:	00 11                	add    BYTE PTR [ecx],dl
    1395:	54                   	push   esp
    1396:	06                   	push   es
    1397:	00 00                	add    BYTE PTR [eax],al
    1399:	01 ed                	add    ebp,ebp
    139b:	ad                   	lods   eax,DWORD PTR ds:[esi]
    139c:	00 00                	add    BYTE PTR [eax],al
    139e:	00 d1                	add    cl,dl
    13a0:	12 00                	adc    al,BYTE PTR [eax]
    13a2:	9f                   	lahf   
    13a3:	26 00 00             	add    BYTE PTR es:[eax],al
    13a6:	00 01                	add    BYTE PTR [ecx],al
    13a8:	9c                   	pushf  
    13a9:	a2 08 00 00 12       	mov    ds:0x12000008,al
    13ae:	c0 06 00             	rol    BYTE PTR [esi],0x0
    13b1:	00 01                	add    BYTE PTR [ecx],al
    13b3:	ed                   	in     eax,dx
    13b4:	54                   	push   esp
    13b5:	08 00                	or     BYTE PTR [eax],al
    13b7:	00 02                	add    BYTE PTR [edx],al
    13b9:	91                   	xchg   ecx,eax
    13ba:	00 1a                	add    BYTE PTR [edx],bl
    13bc:	6e                   	outs   dx,BYTE PTR ds:[esi]
    13bd:	00 01                	add    BYTE PTR [ecx],al
    13bf:	ed                   	in     eax,dx
    13c0:	5a                   	pop    edx
    13c1:	08 00                	or     BYTE PTR [eax],al
    13c3:	00 02                	add    BYTE PTR [edx],al
    13c5:	91                   	xchg   ecx,eax
    13c6:	04 12                	add    al,0x12
    13c8:	93                   	xchg   ebx,eax
    13c9:	05 00 00 01 ed       	add    eax,0xed010000
    13ce:	72 00                	jb     13d0 <sysEnter_Vector-0x12ec30>
    13d0:	00 00                	add    BYTE PTR [eax],al
    13d2:	02 91 08 00 11 a0    	add    dl,BYTE PTR [ecx-0x5feefff8]
    13d8:	06                   	push   es
    13d9:	00 00                	add    BYTE PTR [eax],al
    13db:	01 f2                	add    edx,esi
    13dd:	4f                   	dec    edi
    13de:	00 00                	add    BYTE PTR [eax],al
    13e0:	00 f7                	add    bh,dh
    13e2:	12 00                	adc    al,BYTE PTR [eax]
    13e4:	9f                   	lahf   
    13e5:	29 00                	sub    DWORD PTR [eax],eax
    13e7:	00 00                	add    BYTE PTR [eax],al
    13e9:	01 9c ca 08 00 00 12 	add    DWORD PTR [edx+ecx*8+0x12000008],ebx
    13f0:	af                   	scas   eax,DWORD PTR es:[edi]
    13f1:	06                   	push   es
    13f2:	00 00                	add    BYTE PTR [eax],al
    13f4:	01 f2                	add    edx,esi
    13f6:	74 00                	je     13f8 <sysEnter_Vector-0x12ec08>
    13f8:	00 00                	add    BYTE PTR [eax],al
    13fa:	02 91 00 00 1c 78    	add    dl,BYTE PTR [ecx+0x781c0000]
    1400:	00 00                	add    BYTE PTR [eax],al
    1402:	00 05 33 54 08 00    	add    BYTE PTR ds:0x85433,al
    1408:	00 05 03 20 92 00    	add    BYTE PTR ds:0x922003,al
    140e:	9f                   	lahf   
    140f:	1c 10                	sbb    al,0x10
    1411:	02 00                	add    al,BYTE PTR [eax]
    1413:	00 04 35 ec 08 00 00 	add    BYTE PTR [esi*1+0x8ec],al
    141a:	05 03 30 92 00       	add    eax,0x923003
    141f:	9f                   	lahf   
    1420:	05 04 a2 00 00       	add    eax,0xa204
    1425:	00 1c 33             	add    BYTE PTR [ebx+esi*1],bl
    1428:	02 00                	add    al,BYTE PTR [eax]
    142a:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    142d:	97                   	xchg   edi,eax
    142e:	00 00                	add    BYTE PTR [eax],al
    1430:	00 05 03 2c 92 00    	add    BYTE PTR ds:0x922c03,al
    1436:	9f                   	lahf   
    1437:	1c 7f                	sbb    al,0x7f
    1439:	05 00 00 01 0d       	add    eax,0xd010000
    143e:	74 00                	je     1440 <sysEnter_Vector-0x12ebc0>
    1440:	00 00                	add    BYTE PTR [eax],al
    1442:	05 03 34 92 00       	add    eax,0x923403
    1447:	9f                   	lahf   
    1448:	1c 74                	sbb    al,0x74
    144a:	07                   	pop    es
    144b:	00 00                	add    BYTE PTR [eax],al
    144d:	01 0e                	add    DWORD PTR [esi],ecx
    144f:	74 00                	je     1451 <sysEnter_Vector-0x12ebaf>
    1451:	00 00                	add    BYTE PTR [eax],al
    1453:	05 03 40 92 00       	add    eax,0x924003
    1458:	9f                   	lahf   
    1459:	1c d9                	sbb    al,0xd9
    145b:	05 00 00 01 0f       	add    eax,0xf010000
    1460:	74 00                	je     1462 <sysEnter_Vector-0x12eb9e>
    1462:	00 00                	add    BYTE PTR [eax],al
    1464:	05 03 38 92 00       	add    eax,0x923803
    1469:	9f                   	lahf   
    146a:	1c 5d                	sbb    al,0x5d
    146c:	07                   	pop    es
    146d:	00 00                	add    BYTE PTR [eax],al
    146f:	01 10                	add    DWORD PTR [eax],edx
    1471:	74 00                	je     1473 <sysEnter_Vector-0x12eb8d>
    1473:	00 00                	add    BYTE PTR [eax],al
    1475:	05 03 3c 92 00       	add    eax,0x923c03
    147a:	9f                   	lahf   
    147b:	00 9e 02 00 00 04    	add    BYTE PTR [esi+0x4000002],bl
    1481:	00 e3                	add    bl,ah
    1483:	05 00 00 04 01       	add    eax,0x1040000
    1488:	c3                   	ret    
    1489:	00 00                	add    BYTE PTR [eax],al
    148b:	00 0c e6             	add    BYTE PTR [esi+eiz*8],cl
    148e:	07                   	pop    es
    148f:	00 00                	add    BYTE PTR [eax],al
    1491:	4d                   	dec    ebp
    1492:	00 00                	add    BYTE PTR [eax],al
    1494:	00 20                	add    BYTE PTR [eax],ah
    1496:	13 00                	adc    eax,DWORD PTR [eax]
    1498:	9f                   	lahf   
    1499:	69 01 00 00 79 06    	imul   eax,DWORD PTR [ecx],0x6790000
    149f:	00 00                	add    BYTE PTR [eax],al
    14a1:	02 01                	add    al,BYTE PTR [ecx]
    14a3:	08 3f                	or     BYTE PTR [edi],bh
    14a5:	00 00                	add    BYTE PTR [eax],al
    14a7:	00 02                	add    BYTE PTR [edx],al
    14a9:	02 07                	add    al,BYTE PTR [edi]
    14ab:	0e                   	push   cs
    14ac:	00 00                	add    BYTE PTR [eax],al
    14ae:	00 02                	add    BYTE PTR [edx],al
    14b0:	04 07                	add    al,0x7
    14b2:	32 00                	xor    al,BYTE PTR [eax]
    14b4:	00 00                	add    BYTE PTR [eax],al
    14b6:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    14b9:	2d 00 00 00 02       	sub    eax,0x2000000
    14be:	01 06                	add    DWORD PTR [esi],eax
    14c0:	41                   	inc    ecx
    14c1:	00 00                	add    BYTE PTR [eax],al
    14c3:	00 02                	add    BYTE PTR [edx],al
    14c5:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    14cb:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    14d2:	02 08                	add    cl,BYTE PTR [eax]
    14d4:	05 00 00 00 00       	add    eax,0x0
    14d9:	02 08                	add    cl,BYTE PTR [eax]
    14db:	07                   	pop    es
    14dc:	28 00                	sub    BYTE PTR [eax],al
    14de:	00 00                	add    BYTE PTR [eax],al
    14e0:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    14e7:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    14ea:	2a 01                	sub    al,BYTE PTR [ecx]
    14ec:	00 00                	add    BYTE PTR [eax],al
    14ee:	04 04                	add    al,0x4
    14f0:	78 00                	js     14f2 <sysEnter_Vector-0x12eb0e>
    14f2:	00 00                	add    BYTE PTR [eax],al
    14f4:	02 01                	add    al,BYTE PTR [ecx]
    14f6:	06                   	push   es
    14f7:	48                   	dec    eax
    14f8:	00 00                	add    BYTE PTR [eax],al
    14fa:	00 02                	add    BYTE PTR [edx],al
    14fc:	0c 04                	or     al,0x4
    14fe:	ad                   	lods   eax,DWORD PTR ds:[esi]
    14ff:	00 00                	add    BYTE PTR [eax],al
    1501:	00 05 a0 03 00 00    	add    BYTE PTR ds:0x3a0,al
    1507:	04 33                	add    al,0x33
    1509:	00 00                	add    BYTE PTR [eax],al
    150b:	00 02                	add    BYTE PTR [edx],al
    150d:	15 87 01 00 00       	adc    eax,0x187
    1512:	06                   	push   es
    1513:	51                   	push   ecx
    1514:	04 00                	add    al,0x0
    1516:	00 00                	add    BYTE PTR [eax],al
    1518:	06                   	push   es
    1519:	96                   	xchg   esi,eax
    151a:	04 00                	add    al,0x0
    151c:	00 01                	add    BYTE PTR [ecx],al
    151e:	06                   	push   es
    151f:	84 02                	test   BYTE PTR [edx],al
    1521:	00 00                	add    BYTE PTR [eax],al
    1523:	02 06                	add    al,BYTE PTR [esi]
    1525:	83 03 00             	add    DWORD PTR [ebx],0x0
    1528:	00 03                	add    BYTE PTR [ebx],al
    152a:	06                   	push   es
    152b:	6a 02                	push   0x2
    152d:	00 00                	add    BYTE PTR [eax],al
    152f:	04 06                	add    al,0x6
    1531:	da 04 00             	fiadd  DWORD PTR [eax+eax*1]
    1534:	00 05 06 78 04 00    	add    BYTE PTR ds:0x47806,al
    153a:	00 0a                	add    BYTE PTR [edx],cl
    153c:	06                   	push   es
    153d:	c4 03                	les    eax,FWORD PTR [ebx]
    153f:	00 00                	add    BYTE PTR [eax],al
    1541:	0b 06                	or     eax,DWORD PTR [esi]
    1543:	2a 04 00             	sub    al,BYTE PTR [eax+eax*1]
    1546:	00 0c 06             	add    BYTE PTR [esi+eax*1],cl
    1549:	91                   	xchg   ecx,eax
    154a:	03 00                	add    eax,DWORD PTR [eax]
    154c:	00 0d 06 aa 03 00    	add    BYTE PTR ds:0x3aa06,cl
    1552:	00 0e                	add    BYTE PTR [esi],cl
    1554:	06                   	push   es
    1555:	77 02                	ja     1559 <sysEnter_Vector-0x12eaa7>
    1557:	00 00                	add    BYTE PTR [eax],al
    1559:	0f 06                	clts   
    155b:	f4                   	hlt    
    155c:	03 00                	add    eax,DWORD PTR [eax]
    155e:	00 10                	add    BYTE PTR [eax],dl
    1560:	06                   	push   es
    1561:	27                   	daa    
    1562:	05 00 00 11 06       	add    eax,0x6110000
    1567:	05 05 00 00 4f       	add    eax,0x4f000005
    156c:	06                   	push   es
    156d:	cb                   	retf   
    156e:	04 00                	add    al,0x0
    1570:	00 50 06             	add    BYTE PTR [eax+0x6],dl
    1573:	44                   	inc    esp
    1574:	04 00                	add    al,0x0
    1576:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
    1579:	14 05                	adc    al,0x5
    157b:	00 00                	add    BYTE PTR [eax],al
    157d:	61                   	popa   
    157e:	06                   	push   es
    157f:	49                   	dec    ecx
    1580:	03 00                	add    eax,DWORD PTR [eax]
    1582:	00 97 07 61 04 00    	add    BYTE PTR [edi+0x46107],dl
    1588:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    158b:	07                   	pop    es
    158c:	37                   	aaa    
    158d:	04 00                	add    al,0x0
    158f:	00 64 01 07          	add    BYTE PTR [ecx+eax*1+0x7],ah
    1593:	44                   	inc    esp
    1594:	05 00 00 65 01       	add    eax,0x1650000
    1599:	07                   	pop    es
    159a:	25 03 00 00 66       	and    eax,0x66000003
    159f:	01 07                	add    DWORD PTR [edi],eax
    15a1:	56                   	push   esi
    15a2:	05 00 00 67 01       	add    eax,0x1670000
    15a7:	07                   	pop    es
    15a8:	b7 03                	mov    bh,0x3
    15aa:	00 00                	add    BYTE PTR [eax],al
    15ac:	68 01 07 d6 02       	push   0x2d60701
    15b1:	00 00                	add    BYTE PTR [eax],al
    15b3:	69 01 07 85 04 00    	imul   eax,DWORD PTR [ecx],0x48507
    15b9:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    15bc:	07                   	pop    es
    15bd:	39 03                	cmp    DWORD PTR [ebx],eax
    15bf:	00 00                	add    BYTE PTR [eax],al
    15c1:	71 01                	jno    15c4 <sysEnter_Vector-0x12ea3c>
    15c3:	07                   	pop    es
    15c4:	e8 04 00 00 00       	call   15cd <sysEnter_Vector-0x12ea33>
    15c9:	03 07                	add    eax,DWORD PTR [edi]
    15cb:	d9 03                	fld    DWORD PTR [ebx]
    15cd:	00 00                	add    BYTE PTR [eax],al
    15cf:	01 03                	add    DWORD PTR [ebx],eax
    15d1:	07                   	pop    es
    15d2:	e8 03 00 00 02       	call   20015da <sysEnter_Vector+0x1ed15da>
    15d7:	03 07                	add    eax,DWORD PTR [edi]
    15d9:	73 03                	jae    15de <sysEnter_Vector-0x12ea22>
    15db:	00 00                	add    BYTE PTR [eax],al
    15dd:	03 03                	add    eax,DWORD PTR [ebx]
    15df:	07                   	pop    es
    15e0:	b6 02                	mov    dh,0x2
    15e2:	00 00                	add    BYTE PTR [eax],al
    15e4:	04 03                	add    al,0x3
    15e6:	07                   	pop    es
    15e7:	15 03 00 00 05       	adc    eax,0x5000003
    15ec:	03 07                	add    eax,DWORD PTR [edi]
    15ee:	64 03 00             	add    eax,DWORD PTR fs:[eax]
    15f1:	00 06                	add    BYTE PTR [esi],al
    15f3:	03 07                	add    eax,DWORD PTR [edi]
    15f5:	b2 04                	mov    dl,0x4
    15f7:	00 00                	add    BYTE PTR [eax],al
    15f9:	07                   	pop    es
    15fa:	03 07                	add    eax,DWORD PTR [edi]
    15fc:	01 04 00             	add    DWORD PTR [eax+eax*1],eax
    15ff:	00 00                	add    BYTE PTR [eax],al
    1601:	09 00                	or     DWORD PTR [eax],eax
    1603:	08 d3                	or     bl,dl
    1605:	07                   	pop    es
    1606:	00 00                	add    BYTE PTR [eax],al
    1608:	01 0f                	add    DWORD PTR [edi],ecx
    160a:	20 13                	and    BYTE PTR [ebx],dl
    160c:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
    1612:	01 9c ab 01 00 00 09 	add    DWORD PTR [ebx+ebp*4+0x9000001],ebx
    1619:	16                   	push   ss
    161a:	07                   	pop    es
    161b:	00 00                	add    BYTE PTR [eax],al
    161d:	01 0f                	add    DWORD PTR [edi],ecx
    161f:	72 00                	jb     1621 <sysEnter_Vector-0x12e9df>
    1621:	00 00                	add    BYTE PTR [eax],al
    1623:	02 91 00 00 08 ce    	add    dl,BYTE PTR [ecx-0x31f80000]
    1629:	07                   	pop    es
    162a:	00 00                	add    BYTE PTR [eax],al
    162c:	01 14 46             	add    DWORD PTR [esi+eax*2],edx
    162f:	13 00                	adc    eax,DWORD PTR [eax]
    1631:	9f                   	lahf   
    1632:	43                   	inc    ebx
    1633:	00 00                	add    BYTE PTR [eax],al
    1635:	00 01                	add    BYTE PTR [ecx],al
    1637:	9c                   	pushf  
    1638:	db 01                	fild   DWORD PTR [ecx]
    163a:	00 00                	add    BYTE PTR [eax],al
    163c:	0a 63 00             	or     ah,BYTE PTR [ebx+0x0]
    163f:	01 14 78             	add    DWORD PTR [eax+edi*2],edx
    1642:	00 00                	add    BYTE PTR [eax],al
    1644:	00 02                	add    BYTE PTR [edx],al
    1646:	91                   	xchg   ecx,eax
    1647:	60                   	pusha  
    1648:	0b 16                	or     edx,DWORD PTR [esi]
    164a:	07                   	pop    es
    164b:	00 00                	add    BYTE PTR [eax],al
    164d:	01 16                	add    DWORD PTR [esi],edx
    164f:	db 01                	fild   DWORD PTR [ecx]
    1651:	00 00                	add    BYTE PTR [eax],al
    1653:	02 91 72 00 0c 78    	add    dl,BYTE PTR [ecx+0x780c0072]
    1659:	00 00                	add    BYTE PTR [eax],al
    165b:	00 eb                	add    bl,ch
    165d:	01 00                	add    DWORD PTR [eax],eax
    165f:	00 0d 6b 00 00 00    	add    BYTE PTR ds:0x6b,cl
    1665:	01 00                	add    DWORD PTR [eax],eax
    1667:	0e                   	push   cs
    1668:	c1 07 00             	rol    DWORD PTR [edi],0x0
    166b:	00 01                	add    BYTE PTR [ecx],al
    166d:	1f                   	pop    ds
    166e:	78 00                	js     1670 <sysEnter_Vector-0x12e990>
    1670:	00 00                	add    BYTE PTR [eax],al
    1672:	89 13                	mov    DWORD PTR [ebx],edx
    1674:	00 9f 43 00 00 00    	add    BYTE PTR [edi+0x43],bl
    167a:	01 9c 11 02 00 00 0f 	add    DWORD PTR [ecx+edx*1+0xf000002],ebx
    1681:	63 00                	arpl   WORD PTR [eax],ax
    1683:	01 21                	add    DWORD PTR [ecx],esp
    1685:	78 00                	js     1687 <sysEnter_Vector-0x12e979>
    1687:	00 00                	add    BYTE PTR [eax],al
    1689:	02 91 73 00 10 c9    	add    dl,BYTE PTR [ecx-0x36efff8d]
    168f:	07                   	pop    es
    1690:	00 00                	add    BYTE PTR [eax],al
    1692:	01 2d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ebp
    1698:	cc                   	int3   
    1699:	13 00                	adc    eax,DWORD PTR [eax]
    169b:	9f                   	lahf   
    169c:	bd 00 00 00 01       	mov    ebp,0x1000000
    16a1:	9c                   	pushf  
    16a2:	8a 02                	mov    al,BYTE PTR [edx]
    16a4:	00 00                	add    BYTE PTR [eax],al
    16a6:	09 16                	or     DWORD PTR [esi],edx
    16a8:	07                   	pop    es
    16a9:	00 00                	add    BYTE PTR [eax],al
    16ab:	01 2d 72 00 00 00    	add    DWORD PTR ds:0x72,ebp
    16b1:	02 91 00 09 d8 07    	add    dl,BYTE PTR [ecx+0x7d80900]
    16b7:	00 00                	add    BYTE PTR [eax],al
    16b9:	01 2d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ebp
    16bf:	02 91 04 09 93 05    	add    dl,BYTE PTR [ecx+0x5930904]
    16c5:	00 00                	add    BYTE PTR [eax],al
    16c7:	01 2d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ebp
    16cd:	02 91 08 0b df 07    	add    dl,BYTE PTR [ecx+0x7df0b08]
    16d3:	00 00                	add    BYTE PTR [eax],al
    16d5:	01 2f                	add    DWORD PTR [edi],ebp
    16d7:	78 00                	js     16d9 <sysEnter_Vector-0x12e927>
    16d9:	00 00                	add    BYTE PTR [eax],al
    16db:	02 91 6b 0f 6c 65    	add    dl,BYTE PTR [ecx+0x656c0f6b]
    16e1:	6e                   	outs   dx,BYTE PTR ds:[esi]
    16e2:	00 01                	add    BYTE PTR [ecx],al
    16e4:	30 4f 00             	xor    BYTE PTR [edi+0x0],cl
    16e7:	00 00                	add    BYTE PTR [eax],al
    16e9:	02 91 6c 0b 02 08    	add    dl,BYTE PTR [ecx+0x8020b6c]
    16ef:	00 00                	add    BYTE PTR [eax],al
    16f1:	01 31                	add    DWORD PTR [ecx],esi
    16f3:	db 01                	fild   DWORD PTR [ecx]
    16f5:	00 00                	add    BYTE PTR [eax],al
    16f7:	02 91 69 11 f8 07    	add    dl,BYTE PTR [ecx+0x7f81169]
    16fd:	00 00                	add    BYTE PTR [eax],al
    16ff:	01 37                	add    DWORD PTR [edi],esi
    1701:	0c 14                	or     al,0x14
    1703:	00 9f 00 12 78 00    	add    BYTE PTR [edi+0x781200],bl
    1709:	00 00                	add    BYTE PTR [eax],al
    170b:	03 33                	add    esi,DWORD PTR [ebx]
    170d:	9b                   	fwait
    170e:	02 00                	add    al,BYTE PTR [eax]
    1710:	00 05 03 20 92 00    	add    BYTE PTR ds:0x922003,al
    1716:	9f                   	lahf   
    1717:	04 04                	add    al,0x4
    1719:	72 00                	jb     171b <sysEnter_Vector-0x12e8e5>
    171b:	00 00                	add    BYTE PTR [eax],al
    171d:	00 fe                	add    dh,bh
    171f:	0b 00                	or     eax,DWORD PTR [eax]
    1721:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1724:	f5                   	cmc    
    1725:	06                   	push   es
    1726:	00 00                	add    BYTE PTR [eax],al
    1728:	04 01                	add    al,0x1
    172a:	c3                   	ret    
    172b:	00 00                	add    BYTE PTR [eax],al
    172d:	00 0c c9             	add    BYTE PTR [ecx+ecx*8],cl
    1730:	09 00                	or     DWORD PTR [eax],eax
    1732:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    1735:	00 00                	add    BYTE PTR [eax],al
    1737:	8c 14 00             	mov    WORD PTR [eax+eax*1],ss
    173a:	9f                   	lahf   
    173b:	8c 0d 00 00 49 07    	mov    WORD PTR ds:0x7490000,cs
    1741:	00 00                	add    BYTE PTR [eax],al
    1743:	02 01                	add    al,BYTE PTR [ecx]
    1745:	08 3f                	or     BYTE PTR [edi],bh
    1747:	00 00                	add    BYTE PTR [eax],al
    1749:	00 02                	add    BYTE PTR [edx],al
    174b:	02 07                	add    al,BYTE PTR [edi]
    174d:	0e                   	push   cs
    174e:	00 00                	add    BYTE PTR [eax],al
    1750:	00 02                	add    BYTE PTR [edx],al
    1752:	04 07                	add    al,0x7
    1754:	32 00                	xor    al,BYTE PTR [eax]
    1756:	00 00                	add    BYTE PTR [eax],al
    1758:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    175b:	2d 00 00 00 02       	sub    eax,0x2000000
    1760:	01 06                	add    DWORD PTR [esi],eax
    1762:	41                   	inc    ecx
    1763:	00 00                	add    BYTE PTR [eax],al
    1765:	00 02                	add    BYTE PTR [edx],al
    1767:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    176d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1774:	02 08                	add    cl,BYTE PTR [eax]
    1776:	05 00 00 00 00       	add    eax,0x0
    177b:	02 08                	add    cl,BYTE PTR [eax]
    177d:	07                   	pop    es
    177e:	28 00                	sub    BYTE PTR [eax],al
    1780:	00 00                	add    BYTE PTR [eax],al
    1782:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1789:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    178c:	2a 01                	sub    al,BYTE PTR [ecx]
    178e:	00 00                	add    BYTE PTR [eax],al
    1790:	04 04                	add    al,0x4
    1792:	05 04 7a 00 00       	add    eax,0x7a04
    1797:	00 02                	add    BYTE PTR [edx],al
    1799:	01 06                	add    DWORD PTR [esi],eax
    179b:	48                   	dec    eax
    179c:	00 00                	add    BYTE PTR [eax],al
    179e:	00 06                	add    BYTE PTR [esi],al
    17a0:	35 09 00 00 02       	xor    eax,0x2000009
    17a5:	28 8c 00 00 00 07 04 	sub    BYTE PTR [eax+eax*1+0x4070000],cl
    17ac:	61                   	popa   
    17ad:	08 00                	or     BYTE PTR [eax],al
    17af:	00 7a 00             	add    BYTE PTR [edx+0x0],bh
    17b2:	00 00                	add    BYTE PTR [eax],al
    17b4:	06                   	push   es
    17b5:	3c 09                	cmp    al,0x9
    17b7:	00 00                	add    BYTE PTR [eax],al
    17b9:	02 62 81             	add    ah,BYTE PTR [edx-0x7f]
    17bc:	00 00                	add    BYTE PTR [eax],al
    17be:	00 06                	add    BYTE PTR [esi],al
    17c0:	45                   	inc    ebp
    17c1:	02 00                	add    al,BYTE PTR [eax]
    17c3:	00 03                	add    BYTE PTR [ebx],al
    17c5:	34 33                	xor    al,0x33
    17c7:	00 00                	add    BYTE PTR [eax],al
    17c9:	00 06                	add    BYTE PTR [esi],al
    17cb:	01 02                	add    DWORD PTR [edx],eax
    17cd:	00 00                	add    BYTE PTR [eax],al
    17cf:	03 56 33             	add    edx,DWORD PTR [esi+0x33]
    17d2:	00 00                	add    BYTE PTR [eax],al
    17d4:	00 06                	add    BYTE PTR [esi],al
    17d6:	91                   	xchg   ecx,eax
    17d7:	02 00                	add    al,BYTE PTR [eax]
    17d9:	00 04 d8             	add    BYTE PTR [eax+ebx*8],al
    17dc:	33 00                	xor    eax,DWORD PTR [eax]
    17de:	00 00                	add    BYTE PTR [eax],al
    17e0:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    17e3:	ad                   	lods   eax,DWORD PTR ds:[esi]
    17e4:	00 00                	add    BYTE PTR [eax],al
    17e6:	00 08                	add    BYTE PTR [eax],cl
    17e8:	a0 03 00 00 04       	mov    al,ds:0x4000003
    17ed:	33 00                	xor    eax,DWORD PTR [eax]
    17ef:	00 00                	add    BYTE PTR [eax],al
    17f1:	05 15 ca 01 00       	add    eax,0x1ca15
    17f6:	00 09                	add    BYTE PTR [ecx],cl
    17f8:	51                   	push   ecx
    17f9:	04 00                	add    al,0x0
    17fb:	00 00                	add    BYTE PTR [eax],al
    17fd:	09 96 04 00 00 01    	or     DWORD PTR [esi+0x1000004],edx
    1803:	09 84 02 00 00 02 09 	or     DWORD PTR [edx+eax*1+0x9020000],eax
    180a:	83 03 00             	add    DWORD PTR [ebx],0x0
    180d:	00 03                	add    BYTE PTR [ebx],al
    180f:	09 6a 02             	or     DWORD PTR [edx+0x2],ebp
    1812:	00 00                	add    BYTE PTR [eax],al
    1814:	04 09                	add    al,0x9
    1816:	da 04 00             	fiadd  DWORD PTR [eax+eax*1]
    1819:	00 05 09 78 04 00    	add    BYTE PTR ds:0x47809,al
    181f:	00 0a                	add    BYTE PTR [edx],cl
    1821:	09 c4                	or     esp,eax
    1823:	03 00                	add    eax,DWORD PTR [eax]
    1825:	00 0b                	add    BYTE PTR [ebx],cl
    1827:	09 2a                	or     DWORD PTR [edx],ebp
    1829:	04 00                	add    al,0x0
    182b:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    182e:	91                   	xchg   ecx,eax
    182f:	03 00                	add    eax,DWORD PTR [eax]
    1831:	00 0d 09 aa 03 00    	add    BYTE PTR ds:0x3aa09,cl
    1837:	00 0e                	add    BYTE PTR [esi],cl
    1839:	09 77 02             	or     DWORD PTR [edi+0x2],esi
    183c:	00 00                	add    BYTE PTR [eax],al
    183e:	0f 09                	wbinvd 
    1840:	f4                   	hlt    
    1841:	03 00                	add    eax,DWORD PTR [eax]
    1843:	00 10                	add    BYTE PTR [eax],dl
    1845:	09 27                	or     DWORD PTR [edi],esp
    1847:	05 00 00 11 09       	add    eax,0x9110000
    184c:	05 05 00 00 4f       	add    eax,0x4f000005
    1851:	09 cb                	or     ebx,ecx
    1853:	04 00                	add    al,0x0
    1855:	00 50 09             	add    BYTE PTR [eax+0x9],dl
    1858:	44                   	inc    esp
    1859:	04 00                	add    al,0x0
    185b:	00 59 09             	add    BYTE PTR [ecx+0x9],bl
    185e:	14 05                	adc    al,0x5
    1860:	00 00                	add    BYTE PTR [eax],al
    1862:	61                   	popa   
    1863:	09 49 03             	or     DWORD PTR [ecx+0x3],ecx
    1866:	00 00                	add    BYTE PTR [eax],al
    1868:	97                   	xchg   edi,eax
    1869:	0a 61 04             	or     ah,BYTE PTR [ecx+0x4]
    186c:	00 00                	add    BYTE PTR [eax],al
    186e:	63 01                	arpl   WORD PTR [ecx],ax
    1870:	0a 37                	or     dh,BYTE PTR [edi]
    1872:	04 00                	add    al,0x0
    1874:	00 64 01 0a          	add    BYTE PTR [ecx+eax*1+0xa],ah
    1878:	44                   	inc    esp
    1879:	05 00 00 65 01       	add    eax,0x1650000
    187e:	0a 25 03 00 00 66    	or     ah,BYTE PTR ds:0x66000003
    1884:	01 0a                	add    DWORD PTR [edx],ecx
    1886:	56                   	push   esi
    1887:	05 00 00 67 01       	add    eax,0x1670000
    188c:	0a b7 03 00 00 68    	or     dh,BYTE PTR [edi+0x68000003]
    1892:	01 0a                	add    DWORD PTR [edx],ecx
    1894:	d6                   	(bad)  
    1895:	02 00                	add    al,BYTE PTR [eax]
    1897:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    189a:	0a 85 04 00 00 70    	or     al,BYTE PTR [ebp+0x70000004]
    18a0:	01 0a                	add    DWORD PTR [edx],ecx
    18a2:	39 03                	cmp    DWORD PTR [ebx],eax
    18a4:	00 00                	add    BYTE PTR [eax],al
    18a6:	71 01                	jno    18a9 <sysEnter_Vector-0x12e757>
    18a8:	0a e8                	or     ch,al
    18aa:	04 00                	add    al,0x0
    18ac:	00 00                	add    BYTE PTR [eax],al
    18ae:	03 0a                	add    ecx,DWORD PTR [edx]
    18b0:	d9 03                	fld    DWORD PTR [ebx]
    18b2:	00 00                	add    BYTE PTR [eax],al
    18b4:	01 03                	add    DWORD PTR [ebx],eax
    18b6:	0a e8                	or     ch,al
    18b8:	03 00                	add    eax,DWORD PTR [eax]
    18ba:	00 02                	add    BYTE PTR [edx],al
    18bc:	03 0a                	add    ecx,DWORD PTR [edx]
    18be:	73 03                	jae    18c3 <sysEnter_Vector-0x12e73d>
    18c0:	00 00                	add    BYTE PTR [eax],al
    18c2:	03 03                	add    eax,DWORD PTR [ebx]
    18c4:	0a b6 02 00 00 04    	or     dh,BYTE PTR [esi+0x4000002]
    18ca:	03 0a                	add    ecx,DWORD PTR [edx]
    18cc:	15 03 00 00 05       	adc    eax,0x5000003
    18d1:	03 0a                	add    ecx,DWORD PTR [edx]
    18d3:	64 03 00             	add    eax,DWORD PTR fs:[eax]
    18d6:	00 06                	add    BYTE PTR [esi],al
    18d8:	03 0a                	add    ecx,DWORD PTR [edx]
    18da:	b2 04                	mov    dl,0x4
    18dc:	00 00                	add    BYTE PTR [eax],al
    18de:	07                   	pop    es
    18df:	03 0a                	add    ecx,DWORD PTR [edx]
    18e1:	01 04 00             	add    DWORD PTR [eax+eax*1],eax
    18e4:	00 00                	add    BYTE PTR [eax],al
    18e6:	09 00                	or     DWORD PTR [eax],eax
    18e8:	05 04 d0 01 00       	add    eax,0x1d004
    18ed:	00 0b                	add    BYTE PTR [ebx],cl
    18ef:	7a 00                	jp     18f1 <sysEnter_Vector-0x12e70f>
    18f1:	00 00                	add    BYTE PTR [eax],al
    18f3:	02 01                	add    al,BYTE PTR [ecx]
    18f5:	02 e8                	add    ch,al
    18f7:	06                   	push   es
    18f8:	00 00                	add    BYTE PTR [eax],al
    18fa:	02 08                	add    cl,BYTE PTR [eax]
    18fc:	04 b2                	add    al,0xb2
    18fe:	00 00                	add    BYTE PTR [eax],al
    1900:	00 0c f4             	add    BYTE PTR [esp+esi*8],cl
    1903:	08 00                	or     BYTE PTR [eax],al
    1905:	00 01                	add    BYTE PTR [ecx],al
    1907:	11 4f 00             	adc    DWORD PTR [edi+0x0],ecx
    190a:	00 00                	add    BYTE PTR [eax],al
    190c:	8c 14 00             	mov    WORD PTR [eax+eax*1],ss
    190f:	9f                   	lahf   
    1910:	3a 00                	cmp    al,BYTE PTR [eax]
    1912:	00 00                	add    BYTE PTR [eax],al
    1914:	01 9c 51 02 00 00 0d 	add    DWORD PTR [ecx+edx*2+0xd000002],ebx
    191b:	b9 08 00 00 01       	mov    ecx,0x1000008
    1920:	11 4f 00             	adc    DWORD PTR [edi+0x0],ecx
    1923:	00 00                	add    BYTE PTR [eax],al
    1925:	02 91 00 0d 51 09    	add    dl,BYTE PTR [ecx+0x9510d00]
    192b:	00 00                	add    BYTE PTR [eax],al
    192d:	01 11                	add    DWORD PTR [ecx],edx
    192f:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1934:	91                   	xchg   ecx,eax
    1935:	04 0d                	add    al,0xd
    1937:	58                   	pop    eax
    1938:	09 00                	or     DWORD PTR [eax],eax
    193a:	00 01                	add    BYTE PTR [ecx],al
    193c:	11 a1 00 00 00 02    	adc    DWORD PTR [ecx+0x2000000],esp
    1942:	91                   	xchg   ecx,eax
    1943:	08 0d 5f 09 00 00    	or     BYTE PTR ds:0x95f,cl
    1949:	01 11                	add    DWORD PTR [ecx],edx
    194b:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1950:	91                   	xchg   ecx,eax
    1951:	0c 0d                	or     al,0xd
    1953:	66 09 00             	or     WORD PTR [eax],ax
    1956:	00 01                	add    BYTE PTR [ecx],al
    1958:	11 a1 00 00 00 02    	adc    DWORD PTR [ecx+0x2000000],esp
    195e:	91                   	xchg   ecx,eax
    195f:	10 0e                	adc    BYTE PTR [esi],cl
    1961:	72 05                	jb     1968 <sysEnter_Vector-0x12e698>
    1963:	00 00                	add    BYTE PTR [eax],al
    1965:	01 13                	add    DWORD PTR [ebx],edx
    1967:	4f                   	dec    edi
    1968:	00 00                	add    BYTE PTR [eax],al
    196a:	00 02                	add    BYTE PTR [edx],al
    196c:	91                   	xchg   ecx,eax
    196d:	6c                   	ins    BYTE PTR es:[edi],dx
    196e:	00 0c e8             	add    BYTE PTR [eax+ebp*8],cl
    1971:	08 00                	or     BYTE PTR [eax],al
    1973:	00 01                	add    BYTE PTR [ecx],al
    1975:	18 4f 00             	sbb    BYTE PTR [edi+0x0],cl
    1978:	00 00                	add    BYTE PTR [eax],al
    197a:	c6                   	(bad)  
    197b:	14 00                	adc    al,0x0
    197d:	9f                   	lahf   
    197e:	3c 00                	cmp    al,0x0
    1980:	00 00                	add    BYTE PTR [eax],al
    1982:	01 9c b1 02 00 00 0d 	add    DWORD PTR [ecx+esi*4+0xd000002],ebx
    1989:	b9 08 00 00 01       	mov    ecx,0x1000008
    198e:	18 4f 00             	sbb    BYTE PTR [edi+0x0],cl
    1991:	00 00                	add    BYTE PTR [eax],al
    1993:	02 91 00 0d 51 09    	add    dl,BYTE PTR [ecx+0x9510d00]
    1999:	00 00                	add    BYTE PTR [eax],al
    199b:	01 18                	add    DWORD PTR [eax],ebx
    199d:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    19a2:	91                   	xchg   ecx,eax
    19a3:	04 0d                	add    al,0xd
    19a5:	58                   	pop    eax
    19a6:	09 00                	or     DWORD PTR [eax],eax
    19a8:	00 01                	add    BYTE PTR [ecx],al
    19aa:	18 a1 00 00 00 02    	sbb    BYTE PTR [ecx+0x2000000],ah
    19b0:	91                   	xchg   ecx,eax
    19b1:	08 0d 5f 09 00 00    	or     BYTE PTR ds:0x95f,cl
    19b7:	01 18                	add    DWORD PTR [eax],ebx
    19b9:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    19be:	91                   	xchg   ecx,eax
    19bf:	0c 0e                	or     al,0xe
    19c1:	72 05                	jb     19c8 <sysEnter_Vector-0x12e638>
    19c3:	00 00                	add    BYTE PTR [eax],al
    19c5:	01 1a                	add    DWORD PTR [edx],ebx
    19c7:	4f                   	dec    edi
    19c8:	00 00                	add    BYTE PTR [eax],al
    19ca:	00 02                	add    BYTE PTR [edx],al
    19cc:	91                   	xchg   ecx,eax
    19cd:	6c                   	ins    BYTE PTR es:[edi],dx
    19ce:	00 0c dc             	add    BYTE PTR [esp+ebx*8],cl
    19d1:	08 00                	or     BYTE PTR [eax],al
    19d3:	00 01                	add    BYTE PTR [ecx],al
    19d5:	1f                   	pop    ds
    19d6:	4f                   	dec    edi
    19d7:	00 00                	add    BYTE PTR [eax],al
    19d9:	00 02                	add    BYTE PTR [edx],al
    19db:	15 00 9f 3e 00       	adc    eax,0x3e9f00
    19e0:	00 00                	add    BYTE PTR [eax],al
    19e2:	01 9c 03 03 00 00 0d 	add    DWORD PTR [ebx+eax*1+0xd000003],ebx
    19e9:	b9 08 00 00 01       	mov    ecx,0x1000008
    19ee:	1f                   	pop    ds
    19ef:	4f                   	dec    edi
    19f0:	00 00                	add    BYTE PTR [eax],al
    19f2:	00 02                	add    BYTE PTR [edx],al
    19f4:	91                   	xchg   ecx,eax
    19f5:	00 0d 51 09 00 00    	add    BYTE PTR ds:0x951,cl
    19fb:	01 1f                	add    DWORD PTR [edi],ebx
    19fd:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1a02:	91                   	xchg   ecx,eax
    1a03:	04 0d                	add    al,0xd
    1a05:	58                   	pop    eax
    1a06:	09 00                	or     DWORD PTR [eax],eax
    1a08:	00 01                	add    BYTE PTR [ecx],al
    1a0a:	1f                   	pop    ds
    1a0b:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1a10:	91                   	xchg   ecx,eax
    1a11:	08 0e                	or     BYTE PTR [esi],cl
    1a13:	72 05                	jb     1a1a <sysEnter_Vector-0x12e5e6>
    1a15:	00 00                	add    BYTE PTR [eax],al
    1a17:	01 21                	add    DWORD PTR [ecx],esp
    1a19:	4f                   	dec    edi
    1a1a:	00 00                	add    BYTE PTR [eax],al
    1a1c:	00 02                	add    BYTE PTR [edx],al
    1a1e:	91                   	xchg   ecx,eax
    1a1f:	6c                   	ins    BYTE PTR es:[edi],dx
    1a20:	00 0c d0             	add    BYTE PTR [eax+edx*8],cl
    1a23:	08 00                	or     BYTE PTR [eax],al
    1a25:	00 01                	add    BYTE PTR [ecx],al
    1a27:	26                   	es
    1a28:	4f                   	dec    edi
    1a29:	00 00                	add    BYTE PTR [eax],al
    1a2b:	00 40 15             	add    BYTE PTR [eax+0x15],al
    1a2e:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    1a34:	01 9c 47 03 00 00 0d 	add    DWORD PTR [edi+eax*2+0xd000003],ebx
    1a3b:	b9 08 00 00 01       	mov    ecx,0x1000008
    1a40:	26                   	es
    1a41:	4f                   	dec    edi
    1a42:	00 00                	add    BYTE PTR [eax],al
    1a44:	00 02                	add    BYTE PTR [edx],al
    1a46:	91                   	xchg   ecx,eax
    1a47:	00 0d 51 09 00 00    	add    BYTE PTR ds:0x951,cl
    1a4d:	01 26                	add    DWORD PTR [esi],esp
    1a4f:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1a54:	91                   	xchg   ecx,eax
    1a55:	04 0e                	add    al,0xe
    1a57:	72 05                	jb     1a5e <sysEnter_Vector-0x12e5a2>
    1a59:	00 00                	add    BYTE PTR [eax],al
    1a5b:	01 28                	add    DWORD PTR [eax],ebp
    1a5d:	4f                   	dec    edi
    1a5e:	00 00                	add    BYTE PTR [eax],al
    1a60:	00 02                	add    BYTE PTR [edx],al
    1a62:	91                   	xchg   ecx,eax
    1a63:	6c                   	ins    BYTE PTR es:[edi],dx
    1a64:	00 0c e7             	add    BYTE PTR [edi+eiz*8],cl
    1a67:	09 00                	or     DWORD PTR [eax],eax
    1a69:	00 01                	add    BYTE PTR [ecx],al
    1a6b:	2d 4f 00 00 00       	sub    eax,0x4f
    1a70:	80 15 00 9f 42 00 00 	adc    BYTE PTR ds:0x429f00,0x0
    1a77:	00 01                	add    BYTE PTR [ecx],al
    1a79:	9c                   	pushf  
    1a7a:	7d 03                	jge    1a7f <sysEnter_Vector-0x12e581>
    1a7c:	00 00                	add    BYTE PTR [eax],al
    1a7e:	0d b9 08 00 00       	or     eax,0x8b9
    1a83:	01 2d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ebp
    1a89:	02 91 00 0e 72 05    	add    dl,BYTE PTR [ecx+0x5720e00]
    1a8f:	00 00                	add    BYTE PTR [eax],al
    1a91:	01 2f                	add    DWORD PTR [edi],ebp
    1a93:	4f                   	dec    edi
    1a94:	00 00                	add    BYTE PTR [eax],al
    1a96:	00 02                	add    BYTE PTR [edx],al
    1a98:	91                   	xchg   ecx,eax
    1a99:	6c                   	ins    BYTE PTR es:[edi],dx
    1a9a:	00 0f                	add    BYTE PTR [edi],cl
    1a9c:	51                   	push   ecx
    1a9d:	08 00                	or     BYTE PTR [eax],al
    1a9f:	00 01                	add    BYTE PTR [ecx],al
    1aa1:	34 c2                	xor    al,0xc2
    1aa3:	15 00 9f cb 00       	adc    eax,0xcb9f00
    1aa8:	00 00                	add    BYTE PTR [eax],al
    1aaa:	01 9c 10 06 0a 00 00 	add    DWORD PTR [eax+edx*1+0xa06],ebx
    1ab1:	01 48 8d             	add    DWORD PTR [eax-0x73],ecx
    1ab4:	16                   	push   ss
    1ab5:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
    1abb:	01 9c 11 07 08 00 00 	add    DWORD PTR [ecx+edx*1+0x807],ebx
    1ac2:	01 4e 4f             	add    DWORD PTR [esi+0x4f],ecx
    1ac5:	00 00                	add    BYTE PTR [eax],al
    1ac7:	00 b0 16 00 9f 59    	add    BYTE PTR [eax+0x599f0016],dh
    1acd:	00 00                	add    BYTE PTR [eax],al
    1acf:	00 01                	add    BYTE PTR [ecx],al
    1ad1:	9c                   	pushf  
    1ad2:	e4 03                	in     al,0x3
    1ad4:	00 00                	add    BYTE PTR [eax],al
    1ad6:	0d 8a 09 00 00       	or     eax,0x98a
    1adb:	01 4e ca             	add    DWORD PTR [esi-0x36],ecx
    1ade:	01 00                	add    DWORD PTR [eax],eax
    1ae0:	00 02                	add    BYTE PTR [edx],al
    1ae2:	91                   	xchg   ecx,eax
    1ae3:	00 12                	add    BYTE PTR [edx],dl
    1ae5:	0e                   	push   cs
    1ae6:	72 0a                	jb     1af2 <sysEnter_Vector-0x12e50e>
    1ae8:	00 00                	add    BYTE PTR [eax],al
    1aea:	01 50 96             	add    DWORD PTR [eax-0x6a],edx
    1aed:	00 00                	add    BYTE PTR [eax],al
    1aef:	00 02                	add    BYTE PTR [edx],al
    1af1:	91                   	xchg   ecx,eax
    1af2:	68 0e 58 07 00       	push   0x7580e
    1af7:	00 01                	add    BYTE PTR [ecx],al
    1af9:	53                   	push   ebx
    1afa:	4f                   	dec    edi
    1afb:	00 00                	add    BYTE PTR [eax],al
    1afd:	00 02                	add    BYTE PTR [edx],al
    1aff:	91                   	xchg   ecx,eax
    1b00:	6c                   	ins    BYTE PTR es:[edi],dx
    1b01:	00 11                	add    BYTE PTR [ecx],dl
    1b03:	f6                   	(bad)  
    1b04:	0e                   	push   cs
    1b05:	00 00                	add    BYTE PTR [eax],al
    1b07:	01 58 4f             	add    DWORD PTR [eax+0x4f],ebx
    1b0a:	00 00                	add    BYTE PTR [eax],al
    1b0c:	00 09                	add    BYTE PTR [ecx],cl
    1b0e:	17                   	pop    ss
    1b0f:	00 9f 54 00 00 00    	add    BYTE PTR [edi+0x54],bl
    1b15:	01 9c 29 04 00 00 0d 	add    DWORD PTR [ecx+ebp*1+0xd000004],ebx
    1b1c:	8a 09                	mov    cl,BYTE PTR [ecx]
    1b1e:	00 00                	add    BYTE PTR [eax],al
    1b20:	01 58 ca             	add    DWORD PTR [eax-0x36],ebx
    1b23:	01 00                	add    DWORD PTR [eax],eax
    1b25:	00 02                	add    BYTE PTR [edx],al
    1b27:	91                   	xchg   ecx,eax
    1b28:	00 12                	add    BYTE PTR [edx],dl
    1b2a:	0e                   	push   cs
    1b2b:	72 0a                	jb     1b37 <sysEnter_Vector-0x12e4c9>
    1b2d:	00 00                	add    BYTE PTR [eax],al
    1b2f:	01 5a 96             	add    DWORD PTR [edx-0x6a],ebx
    1b32:	00 00                	add    BYTE PTR [eax],al
    1b34:	00 02                	add    BYTE PTR [edx],al
    1b36:	91                   	xchg   ecx,eax
    1b37:	68 0e 58 07 00       	push   0x7580e
    1b3c:	00 01                	add    BYTE PTR [ecx],al
    1b3e:	5d                   	pop    ebp
    1b3f:	4f                   	dec    edi
    1b40:	00 00                	add    BYTE PTR [eax],al
    1b42:	00 02                	add    BYTE PTR [edx],al
    1b44:	91                   	xchg   ecx,eax
    1b45:	6c                   	ins    BYTE PTR es:[edi],dx
    1b46:	00 11                	add    BYTE PTR [ecx],dl
    1b48:	ec                   	in     al,dx
    1b49:	0e                   	push   cs
    1b4a:	00 00                	add    BYTE PTR [eax],al
    1b4c:	01 61 4f             	add    DWORD PTR [ecx+0x4f],esp
    1b4f:	00 00                	add    BYTE PTR [eax],al
    1b51:	00 5d 17             	add    BYTE PTR [ebp+0x17],bl
    1b54:	00 9f 54 00 00 00    	add    BYTE PTR [edi+0x54],bl
    1b5a:	01 9c 6e 04 00 00 0d 	add    DWORD PTR [esi+ebp*2+0xd000004],ebx
    1b61:	8a 09                	mov    cl,BYTE PTR [ecx]
    1b63:	00 00                	add    BYTE PTR [eax],al
    1b65:	01 61 ca             	add    DWORD PTR [ecx-0x36],esp
    1b68:	01 00                	add    DWORD PTR [eax],eax
    1b6a:	00 02                	add    BYTE PTR [edx],al
    1b6c:	91                   	xchg   ecx,eax
    1b6d:	00 12                	add    BYTE PTR [edx],dl
    1b6f:	0e                   	push   cs
    1b70:	72 0a                	jb     1b7c <sysEnter_Vector-0x12e484>
    1b72:	00 00                	add    BYTE PTR [eax],al
    1b74:	01 63 96             	add    DWORD PTR [ebx-0x6a],esp
    1b77:	00 00                	add    BYTE PTR [eax],al
    1b79:	00 02                	add    BYTE PTR [edx],al
    1b7b:	91                   	xchg   ecx,eax
    1b7c:	68 0e 58 07 00       	push   0x7580e
    1b81:	00 01                	add    BYTE PTR [ecx],al
    1b83:	66 4f                	dec    di
    1b85:	00 00                	add    BYTE PTR [eax],al
    1b87:	00 02                	add    BYTE PTR [edx],al
    1b89:	91                   	xchg   ecx,eax
    1b8a:	6c                   	ins    BYTE PTR es:[edi],dx
    1b8b:	00 11                	add    BYTE PTR [ecx],dl
    1b8d:	77 0a                	ja     1b99 <sysEnter_Vector-0x12e467>
    1b8f:	00 00                	add    BYTE PTR [eax],al
    1b91:	01 6a 4f             	add    DWORD PTR [edx+0x4f],ebp
    1b94:	00 00                	add    BYTE PTR [eax],al
    1b96:	00 b1 17 00 9f 34    	add    BYTE PTR [ecx+0x349f0017],dh
    1b9c:	00 00                	add    BYTE PTR [eax],al
    1b9e:	00 01                	add    BYTE PTR [ecx],al
    1ba0:	9c                   	pushf  
    1ba1:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1ba2:	04 00                	add    al,0x0
    1ba4:	00 0d 8a 09 00 00    	add    BYTE PTR ds:0x98a,cl
    1baa:	01 6a ca             	add    DWORD PTR [edx-0x36],ebp
    1bad:	01 00                	add    DWORD PTR [eax],eax
    1baf:	00 02                	add    BYTE PTR [edx],al
    1bb1:	91                   	xchg   ecx,eax
    1bb2:	00 12                	add    BYTE PTR [edx],dl
    1bb4:	0e                   	push   cs
    1bb5:	72 0a                	jb     1bc1 <sysEnter_Vector-0x12e43f>
    1bb7:	00 00                	add    BYTE PTR [eax],al
    1bb9:	01 6c 96 00          	add    DWORD PTR [esi+edx*4+0x0],ebp
    1bbd:	00 00                	add    BYTE PTR [eax],al
    1bbf:	02 91 74 00 11 83    	add    dl,BYTE PTR [ecx-0x7ceeff8c]
    1bc5:	0a 00                	or     al,BYTE PTR [eax]
    1bc7:	00 01                	add    BYTE PTR [ecx],al
    1bc9:	72 4f                	jb     1c1a <sysEnter_Vector-0x12e3e6>
    1bcb:	00 00                	add    BYTE PTR [eax],al
    1bcd:	00 e5                	add    ch,ah
    1bcf:	17                   	pop    ss
    1bd0:	00 9f 37 00 00 00    	add    BYTE PTR [edi+0x37],bl
    1bd6:	01 9c ea 04 00 00 0d 	add    DWORD PTR [edx+ebp*8+0xd000004],ebx
    1bdd:	a8 08                	test   al,0x8
    1bdf:	00 00                	add    BYTE PTR [eax],al
    1be1:	01 72 a1             	add    DWORD PTR [edx-0x5f],esi
    1be4:	00 00                	add    BYTE PTR [eax],al
    1be6:	00 02                	add    BYTE PTR [edx],al
    1be8:	91                   	xchg   ecx,eax
    1be9:	00 0d 8a 09 00 00    	add    BYTE PTR ds:0x98a,cl
    1bef:	01 72 ca             	add    DWORD PTR [edx-0x36],esi
    1bf2:	01 00                	add    DWORD PTR [eax],eax
    1bf4:	00 02                	add    BYTE PTR [edx],al
    1bf6:	91                   	xchg   ecx,eax
    1bf7:	04 12                	add    al,0x12
    1bf9:	0e                   	push   cs
    1bfa:	72 0a                	jb     1c06 <sysEnter_Vector-0x12e3fa>
    1bfc:	00 00                	add    BYTE PTR [eax],al
    1bfe:	01 74 96 00          	add    DWORD PTR [esi+edx*4+0x0],esi
    1c02:	00 00                	add    BYTE PTR [eax],al
    1c04:	02 91 74 00 11 49    	add    dl,BYTE PTR [ecx+0x49110074]
    1c0a:	09 00                	or     DWORD PTR [eax],eax
    1c0c:	00 01                	add    BYTE PTR [ecx],al
    1c0e:	7c 4f                	jl     1c5f <sysEnter_Vector-0x12e3a1>
    1c10:	00 00                	add    BYTE PTR [eax],al
    1c12:	00 1c 18             	add    BYTE PTR [eax+ebx*1],bl
    1c15:	00 9f 37 00 00 00    	add    BYTE PTR [edi+0x37],bl
    1c1b:	01 9c 2f 05 00 00 0d 	add    DWORD PTR [edi+ebp*1+0xd000005],ebx
    1c22:	a8 08                	test   al,0x8
    1c24:	00 00                	add    BYTE PTR [eax],al
    1c26:	01 7c a1 00          	add    DWORD PTR [ecx+eiz*4+0x0],edi
    1c2a:	00 00                	add    BYTE PTR [eax],al
    1c2c:	02 91 00 0d 8a 09    	add    dl,BYTE PTR [ecx+0x98a0d00]
    1c32:	00 00                	add    BYTE PTR [eax],al
    1c34:	01 7c ca 01          	add    DWORD PTR [edx+ecx*8+0x1],edi
    1c38:	00 00                	add    BYTE PTR [eax],al
    1c3a:	02 91 04 12 0e 72    	add    dl,BYTE PTR [ecx+0x720e1204]
    1c40:	0a 00                	or     al,BYTE PTR [eax]
    1c42:	00 01                	add    BYTE PTR [ecx],al
    1c44:	7e 96                	jle    1bdc <sysEnter_Vector-0x12e424>
    1c46:	00 00                	add    BYTE PTR [eax],al
    1c48:	00 02                	add    BYTE PTR [edx],al
    1c4a:	91                   	xchg   ecx,eax
    1c4b:	74 00                	je     1c4d <sysEnter_Vector-0x12e3b3>
    1c4d:	0c 82                	or     al,0x82
    1c4f:	09 00                	or     DWORD PTR [eax],eax
    1c51:	00 01                	add    BYTE PTR [ecx],al
    1c53:	86 33                	xchg   BYTE PTR [ebx],dh
    1c55:	00 00                	add    BYTE PTR [eax],al
    1c57:	00 53 18             	add    BYTE PTR [ebx+0x18],dl
    1c5a:	00 9f 88 00 00 00    	add    BYTE PTR [edi+0x88],bl
    1c60:	01 9c 88 05 00 00 0d 	add    DWORD PTR [eax+ecx*4+0xd000005],ebx
    1c67:	00 09                	add    BYTE PTR [ecx],cl
    1c69:	00 00                	add    BYTE PTR [eax],al
    1c6b:	01 86 33 00 00 00    	add    DWORD PTR [esi+0x33],eax
    1c71:	02 91 00 13 6d 73    	add    dl,BYTE PTR [ecx+0x736d1300]
    1c77:	00 01                	add    BYTE PTR [ecx],al
    1c79:	88 4f 00             	mov    BYTE PTR [edi+0x0],cl
    1c7c:	00 00                	add    BYTE PTR [eax],al
    1c7e:	02 91 6c 14 7d 18    	add    dl,BYTE PTR [ecx+0x187d146c]
    1c84:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    1c8a:	13 73 32             	adc    esi,DWORD PTR [ebx+0x32]
    1c8d:	00 01                	add    BYTE PTR [ecx],al
    1c8f:	89 a1 00 00 00 02    	mov    DWORD PTR [ecx+0x2000000],esp
    1c95:	91                   	xchg   ecx,eax
    1c96:	68 13 63 74 00       	push   0x746313
    1c9b:	01 89 a1 00 00 00    	add    DWORD PTR [ecx+0xa1],ecx
    1ca1:	02 91 64 00 00 0c    	add    dl,BYTE PTR [ecx+0xc000064]
    1ca7:	ca 08 00             	retf   0x8
    1caa:	00 01                	add    BYTE PTR [ecx],al
    1cac:	8c 33                	mov    WORD PTR [ebx],?
    1cae:	00 00                	add    BYTE PTR [eax],al
    1cb0:	00 db                	add    bl,bl
    1cb2:	18 00                	sbb    BYTE PTR [eax],al
    1cb4:	9f                   	lahf   
    1cb5:	70 00                	jo     1cb7 <sysEnter_Vector-0x12e349>
    1cb7:	00 00                	add    BYTE PTR [eax],al
    1cb9:	01 9c d4 05 00 00 0d 	add    DWORD PTR [esp+edx*8+0xd000005],ebx
    1cc0:	a9 09 00 00 01       	test   eax,0x1000009
    1cc5:	8c 33                	mov    WORD PTR [ebx],?
    1cc7:	00 00                	add    BYTE PTR [eax],al
    1cc9:	00 02                	add    BYTE PTR [edx],al
    1ccb:	91                   	xchg   ecx,eax
    1ccc:	00 14 ed 18 00 9f 57 	add    BYTE PTR [ebp*8+0x579f0018],dl
    1cd3:	00 00                	add    BYTE PTR [eax],al
    1cd5:	00 13                	add    BYTE PTR [ebx],dl
    1cd7:	73 32                	jae    1d0b <sysEnter_Vector-0x12e2f5>
    1cd9:	00 01                	add    BYTE PTR [ecx],al
    1cdb:	8e a1 00 00 00 02    	mov    fs,WORD PTR [ecx+0x2000000]
    1ce1:	91                   	xchg   ecx,eax
    1ce2:	6c                   	ins    BYTE PTR es:[edi],dx
    1ce3:	13 63 74             	adc    esp,DWORD PTR [ebx+0x74]
    1ce6:	00 01                	add    BYTE PTR [ecx],al
    1ce8:	8e a1 00 00 00 02    	mov    fs,WORD PTR [ecx+0x2000000]
    1cee:	91                   	xchg   ecx,eax
    1cef:	68 00 00 0c 22       	push   0x220c0000
    1cf4:	08 00                	or     BYTE PTR [eax],al
    1cf6:	00 01                	add    BYTE PTR [ecx],al
    1cf8:	91                   	xchg   ecx,eax
    1cf9:	33 00                	xor    eax,DWORD PTR [eax]
    1cfb:	00 00                	add    BYTE PTR [eax],al
    1cfd:	4b                   	dec    ebx
    1cfe:	19 00                	sbb    DWORD PTR [eax],eax
    1d00:	9f                   	lahf   
    1d01:	70 00                	jo     1d03 <sysEnter_Vector-0x12e2fd>
    1d03:	00 00                	add    BYTE PTR [eax],al
    1d05:	01 9c 20 06 00 00 0d 	add    DWORD PTR [eax+eiz*1+0xd000006],ebx
    1d0c:	4d                   	dec    ebp
    1d0d:	0a 00                	or     al,BYTE PTR [eax]
    1d0f:	00 01                	add    BYTE PTR [ecx],al
    1d11:	91                   	xchg   ecx,eax
    1d12:	33 00                	xor    eax,DWORD PTR [eax]
    1d14:	00 00                	add    BYTE PTR [eax],al
    1d16:	02 91 00 14 5d 19    	add    dl,BYTE PTR [ecx+0x195d1400]
    1d1c:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    1d22:	13 73 32             	adc    esi,DWORD PTR [ebx+0x32]
    1d25:	00 01                	add    BYTE PTR [ecx],al
    1d27:	93                   	xchg   ebx,eax
    1d28:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1d2d:	91                   	xchg   ecx,eax
    1d2e:	6c                   	ins    BYTE PTR es:[edi],dx
    1d2f:	13 63 74             	adc    esp,DWORD PTR [ebx+0x74]
    1d32:	00 01                	add    BYTE PTR [ecx],al
    1d34:	93                   	xchg   ebx,eax
    1d35:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1d3a:	91                   	xchg   ecx,eax
    1d3b:	68 00 00 0f 7e       	push   0x7e0f0000
    1d40:	0a 00                	or     al,BYTE PTR [eax]
    1d42:	00 01                	add    BYTE PTR [ecx],al
    1d44:	97                   	xchg   edi,eax
    1d45:	bb 19 00 9f 1d       	mov    ebx,0x1d9f0019
    1d4a:	00 00                	add    BYTE PTR [eax],al
    1d4c:	00 01                	add    BYTE PTR [ecx],al
    1d4e:	9c                   	pushf  
    1d4f:	15 65 0a 00 00       	adc    eax,0xa65
    1d54:	01 9c d8 19 00 9f 29 	add    DWORD PTR [eax+ebx*8+0x299f0019],ebx
    1d5b:	00 00                	add    BYTE PTR [eax],al
    1d5d:	00 01                	add    BYTE PTR [ecx],al
    1d5f:	9c                   	pushf  
    1d60:	71 06                	jno    1d68 <sysEnter_Vector-0x12e298>
    1d62:	00 00                	add    BYTE PTR [eax],al
    1d64:	0d 9d 09 00 00       	or     eax,0x99d
    1d69:	01 9c 4f 00 00 00 02 	add    DWORD PTR [edi+ecx*2+0x2000000],ebx
    1d70:	91                   	xchg   ecx,eax
    1d71:	00 0d 42 0a 00 00    	add    BYTE PTR ds:0xa42,cl
    1d77:	01 9c 72 00 00 00 02 	add    DWORD PTR [edx+esi*2+0x2000000],ebx
    1d7e:	91                   	xchg   ecx,eax
    1d7f:	04 0d                	add    al,0xd
    1d81:	1a 08                	sbb    cl,BYTE PTR [eax]
    1d83:	00 00                	add    BYTE PTR [eax],al
    1d85:	01 9c 4f 00 00 00 02 	add    DWORD PTR [edi+ecx*2+0x2000000],ebx
    1d8c:	91                   	xchg   ecx,eax
    1d8d:	08 00                	or     BYTE PTR [eax],al
    1d8f:	15 79 08 00 00       	adc    eax,0x879
    1d94:	01 a1 01 1a 00 9f    	add    DWORD PTR [ecx-0x60ffe5ff],esp
    1d9a:	25 00 00 00 01       	and    eax,0x1000000
    1d9f:	9c                   	pushf  
    1da0:	a3 06 00 00 0d       	mov    ds:0xd000006,eax
    1da5:	9d                   	popf   
    1da6:	09 00                	or     DWORD PTR [eax],eax
    1da8:	00 01                	add    BYTE PTR [ecx],al
    1daa:	a1 4f 00 00 00       	mov    eax,ds:0x4f
    1daf:	02 91 00 0d 13 0a    	add    dl,BYTE PTR [ecx+0xa130d00]
    1db5:	00 00                	add    BYTE PTR [eax],al
    1db7:	01 a1 4f 00 00 00    	add    DWORD PTR [ecx+0x4f],esp
    1dbd:	02 91 04 00 16 4c    	add    dl,BYTE PTR [ecx+0x4c160004]
    1dc3:	08 00                	or     BYTE PTR [eax],al
    1dc5:	00 01                	add    BYTE PTR [ecx],al
    1dc7:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    1dc8:	4f                   	dec    edi
    1dc9:	00 00                	add    BYTE PTR [eax],al
    1dcb:	00 26                	add    BYTE PTR [esi],ah
    1dcd:	1a 00                	sbb    al,BYTE PTR [eax]
    1dcf:	9f                   	lahf   
    1dd0:	23 00                	and    eax,DWORD PTR [eax]
    1dd2:	00 00                	add    BYTE PTR [eax],al
    1dd4:	01 9c cb 06 00 00 0e 	add    DWORD PTR [ebx+ecx*8+0xe000006],ebx
    1ddb:	72 05                	jb     1de2 <sysEnter_Vector-0x12e21e>
    1ddd:	00 00                	add    BYTE PTR [eax],al
    1ddf:	01 a8 a1 00 00 00    	add    DWORD PTR [eax+0xa1],ebp
    1de5:	02 91 74 00 11 a4    	add    dl,BYTE PTR [ecx-0x5beeff8c]
    1deb:	09 00                	or     DWORD PTR [eax],eax
    1ded:	00 01                	add    BYTE PTR [ecx],al
    1def:	af                   	scas   eax,DWORD PTR es:[edi]
    1df0:	4f                   	dec    edi
    1df1:	00 00                	add    BYTE PTR [eax],al
    1df3:	00 49 1a             	add    BYTE PTR [ecx+0x1a],cl
    1df6:	00 9f 4c 00 00 00    	add    BYTE PTR [edi+0x4c],bl
    1dfc:	01 9c 1d 07 00 00 0d 	add    DWORD PTR [ebp+ebx*1+0xd000007],ebx
    1e03:	9a 05 00 00 01 af 74 	call   0x74af:0x1000005
    1e0a:	00 00                	add    BYTE PTR [eax],al
    1e0c:	00 02                	add    BYTE PTR [edx],al
    1e0e:	91                   	xchg   ecx,eax
    1e0f:	00 0d da 09 00 00    	add    BYTE PTR ds:0x9da,cl
    1e15:	01 af 4f 00 00 00    	add    DWORD PTR [edi+0x4f],ebp
    1e1b:	02 91 04 0d 2a 0a    	add    dl,BYTE PTR [ecx+0xa2a0d04]
    1e21:	00 00                	add    BYTE PTR [eax],al
    1e23:	01 af 1d 07 00 00    	add    DWORD PTR [edi+0x71d],ebp
    1e29:	02 91 08 13 70 69    	add    dl,BYTE PTR [ecx+0x69701308]
    1e2f:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1e32:	b1 4f                	mov    cl,0x4f
    1e34:	00 00                	add    BYTE PTR [eax],al
    1e36:	00 02                	add    BYTE PTR [edx],al
    1e38:	91                   	xchg   ecx,eax
    1e39:	74 00                	je     1e3b <sysEnter_Vector-0x12e1c5>
    1e3b:	05 04 74 00 00       	add    eax,0x7404
    1e40:	00 11                	add    BYTE PTR [ecx],dl
    1e42:	b3 08                	mov    bl,0x8
    1e44:	00 00                	add    BYTE PTR [eax],al
    1e46:	01 b7 4f 00 00 00    	add    DWORD PTR [edi+0x4f],esi
    1e4c:	95                   	xchg   ebp,eax
    1e4d:	1a 00                	sbb    al,BYTE PTR [eax]
    1e4f:	9f                   	lahf   
    1e50:	f4                   	hlt    
    1e51:	01 00                	add    DWORD PTR [eax],eax
    1e53:	00 01                	add    BYTE PTR [ecx],al
    1e55:	9c                   	pushf  
    1e56:	c5 07                	lds    eax,FWORD PTR [edi]
    1e58:	00 00                	add    BYTE PTR [eax],al
    1e5a:	0d 9a 05 00 00       	or     eax,0x59a
    1e5f:	01 b7 74 00 00 00    	add    DWORD PTR [edi+0x74],esi
    1e65:	02 91 00 13 70 69    	add    dl,BYTE PTR [ecx+0x69701300]
    1e6b:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1e6e:	b9 4f 00 00 00       	mov    ecx,0x4f
    1e73:	02 91 58 0e da 09    	add    dl,BYTE PTR [ecx+0x9da0e58]
    1e79:	00 00                	add    BYTE PTR [eax],al
    1e7b:	01 b9 4f 00 00 00    	add    DWORD PTR [ecx+0x4f],edi
    1e81:	02 91 6c 0e 2a 0a    	add    dl,BYTE PTR [ecx+0xa2a0e6c]
    1e87:	00 00                	add    BYTE PTR [eax],al
    1e89:	01 ba 1d 07 00 00    	add    DWORD PTR [edx+0x71d],edi
    1e8f:	02 91 50 0e 84 08    	add    dl,BYTE PTR [ecx+0x8840e50]
    1e95:	00 00                	add    BYTE PTR [eax],al
    1e97:	01 bb 74 00 00 00    	add    DWORD PTR [ebx+0x74],edi
    1e9d:	02 91 68 0e 0d 08    	add    dl,BYTE PTR [ecx+0x80d0e68]
    1ea3:	00 00                	add    BYTE PTR [eax],al
    1ea5:	01 bb 74 00 00 00    	add    DWORD PTR [ebx+0x74],edi
    1eab:	02 91 64 0e 74 09    	add    dl,BYTE PTR [ecx+0x9740e64]
    1eb1:	00 00                	add    BYTE PTR [eax],al
    1eb3:	01 bc 74 00 00 00 02 	add    DWORD PTR [esp+esi*2+0x2000000],edi
    1eba:	91                   	xchg   ecx,eax
    1ebb:	54                   	push   esp
    1ebc:	0e                   	push   cs
    1ebd:	36 08 00             	or     BYTE PTR ss:[eax],al
    1ec0:	00 01                	add    BYTE PTR [ecx],al
    1ec2:	cd 4f                	int    0x4f
    1ec4:	00 00                	add    BYTE PTR [eax],al
    1ec6:	00 02                	add    BYTE PTR [edx],al
    1ec8:	91                   	xchg   ecx,eax
    1ec9:	60                   	pusha  
    1eca:	14 6b                	adc    al,0x6b
    1ecc:	1b 00                	sbb    eax,DWORD PTR [eax]
    1ece:	9f                   	lahf   
    1ecf:	e0 00                	loopne 1ed1 <sysEnter_Vector-0x12e12f>
    1ed1:	00 00                	add    BYTE PTR [eax],al
    1ed3:	13 63 6e             	adc    esp,DWORD PTR [ebx+0x6e]
    1ed6:	74 00                	je     1ed8 <sysEnter_Vector-0x12e128>
    1ed8:	01 cf                	add    edi,ecx
    1eda:	4f                   	dec    edi
    1edb:	00 00                	add    BYTE PTR [eax],al
    1edd:	00 02                	add    BYTE PTR [edx],al
    1edf:	91                   	xchg   ecx,eax
    1ee0:	5c                   	pop    esp
    1ee1:	00 00                	add    BYTE PTR [eax],al
    1ee3:	11 7c 09 00          	adc    DWORD PTR [ecx+ecx*1+0x0],edi
    1ee7:	00 01                	add    BYTE PTR [ecx],al
    1ee9:	e5 4f                	in     eax,0x4f
    1eeb:	00 00                	add    BYTE PTR [eax],al
    1eed:	00 89 1c 00 9f 4f    	add    BYTE PTR [ecx+0x4f9f001c],cl
    1ef3:	00 00                	add    BYTE PTR [eax],al
    1ef5:	00 01                	add    BYTE PTR [ecx],al
    1ef7:	9c                   	pushf  
    1ef8:	17                   	pop    ss
    1ef9:	08 00                	or     BYTE PTR [eax],al
    1efb:	00 0d 9a 05 00 00    	add    BYTE PTR ds:0x59a,cl
    1f01:	01 e5                	add    ebp,esp
    1f03:	74 00                	je     1f05 <sysEnter_Vector-0x12e0fb>
    1f05:	00 00                	add    BYTE PTR [eax],al
    1f07:	02 91 00 0d da 09    	add    dl,BYTE PTR [ecx+0x9da0d00]
    1f0d:	00 00                	add    BYTE PTR [eax],al
    1f0f:	01 e5                	add    ebp,esp
    1f11:	4f                   	dec    edi
    1f12:	00 00                	add    BYTE PTR [eax],al
    1f14:	00 02                	add    BYTE PTR [edx],al
    1f16:	91                   	xchg   ecx,eax
    1f17:	04 0d                	add    al,0xd
    1f19:	2a 0a                	sub    cl,BYTE PTR [edx]
    1f1b:	00 00                	add    BYTE PTR [eax],al
    1f1d:	01 e5                	add    ebp,esp
    1f1f:	1d 07 00 00 02       	sbb    eax,0x2000007
    1f24:	91                   	xchg   ecx,eax
    1f25:	08 13                	or     BYTE PTR [ebx],dl
    1f27:	70 69                	jo     1f92 <sysEnter_Vector-0x12e06e>
    1f29:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1f2c:	e7 4f                	out    0x4f,eax
    1f2e:	00 00                	add    BYTE PTR [eax],al
    1f30:	00 02                	add    BYTE PTR [edx],al
    1f32:	91                   	xchg   ecx,eax
    1f33:	74 00                	je     1f35 <sysEnter_Vector-0x12e0cb>
    1f35:	11 a0 08 00 00 01    	adc    DWORD PTR [eax+0x1000008],esp
    1f3b:	ed                   	in     eax,dx
    1f3c:	4f                   	dec    edi
    1f3d:	00 00                	add    BYTE PTR [eax],al
    1f3f:	00 d8                	add    al,bl
    1f41:	1c 00                	sbb    al,0x0
    1f43:	9f                   	lahf   
    1f44:	1c 00                	sbb    al,0x0
    1f46:	00 00                	add    BYTE PTR [eax],al
    1f48:	01 9c 3f 08 00 00 17 	add    DWORD PTR [edi+edi*1+0x17000008],ebx
    1f4f:	70 69                	jo     1fba <sysEnter_Vector-0x12e046>
    1f51:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1f54:	ed                   	in     eax,dx
    1f55:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1f5a:	91                   	xchg   ecx,eax
    1f5b:	00 00                	add    BYTE PTR [eax],al
    1f5d:	15 2f 0a 00 00       	adc    eax,0xa2f
    1f62:	01 f3                	add    ebx,esi
    1f64:	f4                   	hlt    
    1f65:	1c 00                	sbb    al,0x0
    1f67:	9f                   	lahf   
    1f68:	20 00                	and    BYTE PTR [eax],al
    1f6a:	00 00                	add    BYTE PTR [eax],al
    1f6c:	01 9c 63 08 00 00 0d 	add    DWORD PTR [ebx+eiz*2+0xd000008],ebx
    1f73:	34 0a                	xor    al,0xa
    1f75:	00 00                	add    BYTE PTR [eax],al
    1f77:	01 f3                	add    ebx,esi
    1f79:	4f                   	dec    edi
    1f7a:	00 00                	add    BYTE PTR [eax],al
    1f7c:	00 02                	add    BYTE PTR [edx],al
    1f7e:	91                   	xchg   ecx,eax
    1f7f:	00 00                	add    BYTE PTR [eax],al
    1f81:	11 6d 09             	adc    DWORD PTR [ebp+0x9],ebp
    1f84:	00 00                	add    BYTE PTR [eax],al
    1f86:	01 f8                	add    eax,edi
    1f88:	74 00                	je     1f8a <sysEnter_Vector-0x12e076>
    1f8a:	00 00                	add    BYTE PTR [eax],al
    1f8c:	14 1d                	adc    al,0x1d
    1f8e:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    1f94:	01 9c 99 08 00 00 17 	add    DWORD PTR [ecx+ebx*4+0x17000008],ebx
    1f9b:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    1f9e:	00 01                	add    BYTE PTR [ecx],al
    1fa0:	f8                   	clc    
    1fa1:	74 00                	je     1fa3 <sysEnter_Vector-0x12e05d>
    1fa3:	00 00                	add    BYTE PTR [eax],al
    1fa5:	02 91 00 0d 58 07    	add    dl,BYTE PTR [ecx+0x7580d00]
    1fab:	00 00                	add    BYTE PTR [eax],al
    1fad:	01 f8                	add    eax,edi
    1faf:	b7 00                	mov    bh,0x0
    1fb1:	00 00                	add    BYTE PTR [eax],al
    1fb3:	02 91 04 00 0c f3    	add    dl,BYTE PTR [ecx-0xcf3fffc]
    1fb9:	09 00                	or     DWORD PTR [eax],eax
    1fbb:	00 01                	add    BYTE PTR [ecx],al
    1fbd:	fd                   	std    
    1fbe:	b7 00                	mov    bh,0x0
    1fc0:	00 00                	add    BYTE PTR [eax],al
    1fc2:	34 1d                	xor    al,0x1d
    1fc4:	00 9f 44 01 00 00    	add    BYTE PTR [edi+0x144],bl
    1fca:	01 9c 7c 09 00 00 0d 	add    DWORD PTR [esp+edi*2+0xd000009],ebx
    1fd1:	16                   	push   ss
    1fd2:	07                   	pop    es
    1fd3:	00 00                	add    BYTE PTR [eax],al
    1fd5:	01 fd                	add    ebp,edi
    1fd7:	74 00                	je     1fd9 <sysEnter_Vector-0x12e027>
    1fd9:	00 00                	add    BYTE PTR [eax],al
    1fdb:	02 91 00 0d 2a 0a    	add    dl,BYTE PTR [ecx+0xa2a0d00]
    1fe1:	00 00                	add    BYTE PTR [eax],al
    1fe3:	01 fd                	add    ebp,edi
    1fe5:	1d 07 00 00 02       	sbb    eax,0x2000007
    1fea:	91                   	xchg   ecx,eax
    1feb:	04 0d                	add    al,0xd
    1fed:	0d 09 00 00 01       	or     eax,0x1000009
    1ff2:	fd                   	std    
    1ff3:	b7 00                	mov    bh,0x0
    1ff5:	00 00                	add    BYTE PTR [eax],al
    1ff7:	02 91 08 13 70 00    	add    dl,BYTE PTR [ecx+0x701308]
    1ffd:	01 ff                	add    edi,edi
    1fff:	74 00                	je     2001 <sysEnter_Vector-0x12dfff>
    2001:	00 00                	add    BYTE PTR [eax],al
    2003:	02 91 74 0e 3e 08    	add    dl,BYTE PTR [ecx+0x83e0e74]
    2009:	00 00                	add    BYTE PTR [eax],al
    200b:	01 ff                	add    edi,edi
    200d:	74 00                	je     200f <sysEnter_Vector-0x12dff1>
    200f:	00 00                	add    BYTE PTR [eax],al
    2011:	02 91 70 18 63 00    	add    dl,BYTE PTR [ecx+0x631870]
    2017:	01 00                	add    DWORD PTR [eax],eax
    2019:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    201c:	00 00                	add    BYTE PTR [eax],al
    201e:	02 91 64 19 b8 09    	add    dl,BYTE PTR [ecx+0x9b81964]
    2024:	00 00                	add    BYTE PTR [eax],al
    2026:	04 33                	add    al,0x33
    2028:	00 00                	add    BYTE PTR [eax],al
    202a:	00 01                	add    BYTE PTR [ecx],al
    202c:	01 01                	add    DWORD PTR [ecx],eax
    202e:	27                   	daa    
    202f:	09 00                	or     DWORD PTR [eax],eax
    2031:	00 09                	add    BYTE PTR [ecx],cl
    2033:	b3 09                	mov    bl,0x9
    2035:	00 00                	add    BYTE PTR [eax],al
    2037:	00 09                	add    BYTE PTR [ecx],cl
    2039:	05 09 00 00 01       	add    eax,0x1000009
    203e:	09 bf 09 00 00 02    	or     DWORD PTR [edi+0x2000009],edi
    2044:	00 1a                	add    BYTE PTR [edx],bl
    2046:	5b                   	pop    ebx
    2047:	08 00                	or     BYTE PTR [eax],al
    2049:	00 01                	add    BYTE PTR [ecx],al
    204b:	01 01                	add    DWORD PTR [ecx],eax
    204d:	03 09                	add    ecx,DWORD PTR [ecx]
    204f:	00 00                	add    BYTE PTR [eax],al
    2051:	02 91 6c 1a da 09    	add    dl,BYTE PTR [ecx+0x9da1a6c]
    2057:	00 00                	add    BYTE PTR [eax],al
    2059:	01 02                	add    DWORD PTR [edx],eax
    205b:	01 b7 00 00 00 02    	add    DWORD PTR [edi+0x2000000],esi
    2061:	91                   	xchg   ecx,eax
    2062:	68 1b 80 1d 00       	push   0x1d801b
    2067:	9f                   	lahf   
    2068:	0e                   	push   cs
    2069:	00 00                	add    BYTE PTR [eax],al
    206b:	00 62 09             	add    BYTE PTR [edx+0x9],ah
    206e:	00 00                	add    BYTE PTR [eax],al
    2070:	1a 2d 09 00 00 01    	sbb    ch,BYTE PTR ds:0x1000009
    2076:	08 01                	or     BYTE PTR [ecx],al
    2078:	d5 01                	aad    0x1
    207a:	00 00                	add    BYTE PTR [eax],al
    207c:	02 91 63 00 14 ef    	add    dl,BYTE PTR [ecx-0x10ebff9d]
    2082:	1d 00 9f 0e 00       	sbb    eax,0xe9f00
    2087:	00 00                	add    BYTE PTR [eax],al
    2089:	1a 2d 09 00 00 01    	sbb    ch,BYTE PTR ds:0x1000009
    208f:	1e                   	push   ds
    2090:	01 d5                	add    ebp,edx
    2092:	01 00                	add    DWORD PTR [eax],eax
    2094:	00 02                	add    BYTE PTR [edx],al
    2096:	91                   	xchg   ecx,eax
    2097:	62 00                	bound  eax,QWORD PTR [eax]
    2099:	00 1c 73             	add    BYTE PTR [ebx+esi*2],bl
    209c:	08 00                	or     BYTE PTR [eax],al
    209e:	00 01                	add    BYTE PTR [ecx],al
    20a0:	2d 01 b7 00 00       	sub    eax,0xb701
    20a5:	00 78 1e             	add    BYTE PTR [eax+0x1e],bh
    20a8:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    20ae:	01 9c c4 09 00 00 1d 	add    DWORD PTR [esp+eax*8+0x1d000009],ebx
    20b5:	16                   	push   ss
    20b6:	07                   	pop    es
    20b7:	00 00                	add    BYTE PTR [eax],al
    20b9:	01 2d 01 74 00 00    	add    DWORD PTR ds:0x7401,ebp
    20bf:	00 02                	add    BYTE PTR [edx],al
    20c1:	91                   	xchg   ecx,eax
    20c2:	00 1d 2a 0a 00 00    	add    BYTE PTR ds:0xa2a,bl
    20c8:	01 2d 01 1d 07 00    	add    DWORD PTR ds:0x71d01,ebp
    20ce:	00 02                	add    BYTE PTR [edx],al
    20d0:	91                   	xchg   ecx,eax
    20d1:	04 1d                	add    al,0x1d
    20d3:	0d 09 00 00 01       	or     eax,0x1000009
    20d8:	2d 01 b7 00 00       	sub    eax,0xb701
    20dd:	00 02                	add    BYTE PTR [edx],al
    20df:	91                   	xchg   ecx,eax
    20e0:	08 00                	or     BYTE PTR [eax],al
    20e2:	1c 1b                	sbb    al,0x1b
    20e4:	0a 00                	or     al,BYTE PTR [eax]
    20e6:	00 01                	add    BYTE PTR [ecx],al
    20e8:	32 01                	xor    al,BYTE PTR [ecx]
    20ea:	1d 07 00 00 98       	sbb    eax,0x98000007
    20ef:	1e                   	push   ds
    20f0:	00 9f fd 02 00 00    	add    BYTE PTR [edi+0x2fd],bl
    20f6:	01 9c b3 0a 00 00 1d 	add    DWORD PTR [ebx+esi*4+0x1d00000a],ebx
    20fd:	df 09                	fisttp WORD PTR [ecx]
    20ff:	00 00                	add    BYTE PTR [eax],al
    2101:	01 32                	add    DWORD PTR [edx],esi
    2103:	01 ca                	add    edx,ecx
    2105:	01 00                	add    DWORD PTR [eax],eax
    2107:	00 02                	add    BYTE PTR [edx],al
    2109:	91                   	xchg   ecx,eax
    210a:	00 1d da 09 00 00    	add    BYTE PTR ds:0x9da,bl
    2110:	01 32                	add    DWORD PTR [edx],esi
    2112:	01 b3 0a 00 00 02    	add    DWORD PTR [ebx+0x200000a],esi
    2118:	91                   	xchg   ecx,eax
    2119:	04 1a                	add    al,0x1a
    211b:	2a 0a                	sub    cl,BYTE PTR [edx]
    211d:	00 00                	add    BYTE PTR [eax],al
    211f:	01 34 01             	add    DWORD PTR [ecx+eax*1],esi
    2122:	1d 07 00 00 02       	sbb    eax,0x2000007
    2127:	91                   	xchg   ecx,eax
    2128:	54                   	push   esp
    2129:	18 63 6d             	sbb    BYTE PTR [ebx+0x6d],ah
    212c:	64 00 01             	add    BYTE PTR fs:[ecx],al
    212f:	35 01 b9 0a 00       	xor    eax,0xab901
    2134:	00 03                	add    BYTE PTR [ebx],al
    2136:	91                   	xchg   ecx,eax
    2137:	d0                   	(bad)  
    2138:	77 1a                	ja     2154 <sysEnter_Vector-0x12deac>
    213a:	84 08                	test   BYTE PTR [eax],cl
    213c:	00 00                	add    BYTE PTR [eax],al
    213e:	01 36                	add    DWORD PTR [esi],esi
    2140:	01 74 00 00          	add    DWORD PTR [eax+eax*1+0x0],esi
    2144:	00 02                	add    BYTE PTR [edx],al
    2146:	91                   	xchg   ecx,eax
    2147:	6c                   	ins    BYTE PTR es:[edi],dx
    2148:	1a 0d 08 00 00 01    	sbb    cl,BYTE PTR ds:0x1000008
    214e:	36 01 74 00 00       	add    DWORD PTR ss:[eax+eax*1+0x0],esi
    2153:	00 02                	add    BYTE PTR [edx],al
    2155:	91                   	xchg   ecx,eax
    2156:	68 1a 2d 08 00       	push   0x82d1a
    215b:	00 01                	add    BYTE PTR [ecx],al
    215d:	36 01 74 00 00       	add    DWORD PTR ss:[eax+eax*1+0x0],esi
    2162:	00 02                	add    BYTE PTR [edx],al
    2164:	91                   	xchg   ecx,eax
    2165:	5c                   	pop    esp
    2166:	1a c1                	sbb    al,cl
    2168:	08 00                	or     BYTE PTR [eax],al
    216a:	00 01                	add    BYTE PTR [ecx],al
    216c:	37                   	aaa    
    216d:	01 ca                	add    edx,ecx
    216f:	0a 00                	or     al,BYTE PTR [eax]
    2171:	00 03                	add    BYTE PTR [ebx],al
    2173:	91                   	xchg   ecx,eax
    2174:	ce                   	into   
    2175:	77 1a                	ja     2191 <sysEnter_Vector-0x12de6f>
    2177:	36 08 00             	or     BYTE PTR ss:[eax],al
    217a:	00 01                	add    BYTE PTR [ecx],al
    217c:	50                   	push   eax
    217d:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    2180:	00 00                	add    BYTE PTR [eax],al
    2182:	02 91 64 1b 4f 1f    	add    dl,BYTE PTR [ecx+0x1f4f1b64]
    2188:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    218e:	84 0a                	test   BYTE PTR [edx],cl
    2190:	00 00                	add    BYTE PTR [eax],al
    2192:	1a 8d 08 00 00 01    	sbb    cl,BYTE PTR [ebp+0x1000008]
    2198:	42                   	inc    edx
    2199:	01 74 00 00          	add    DWORD PTR [eax+eax*1+0x0],esi
    219d:	00 02                	add    BYTE PTR [edx],al
    219f:	91                   	xchg   ecx,eax
    21a0:	58                   	pop    eax
    21a1:	00 14 ff             	add    BYTE PTR [edi+edi*8],dl
    21a4:	1f                   	pop    ds
    21a5:	00 9f 8c 01 00 00    	add    BYTE PTR [edi+0x18c],bl
    21ab:	18 63 6e             	sbb    BYTE PTR [ebx+0x6e],ah
    21ae:	74 00                	je     21b0 <sysEnter_Vector-0x12de50>
    21b0:	01 52 01             	add    DWORD PTR [edx+0x1],edx
    21b3:	4f                   	dec    edi
    21b4:	00 00                	add    BYTE PTR [eax],al
    21b6:	00 02                	add    BYTE PTR [edx],al
    21b8:	91                   	xchg   ecx,eax
    21b9:	60                   	pusha  
    21ba:	1e                   	push   ds
    21bb:	18 00                	sbb    BYTE PTR [eax],al
    21bd:	00 00                	add    BYTE PTR [eax],al
    21bf:	1a 8d 08 00 00 01    	sbb    cl,BYTE PTR [ebp+0x1000008]
    21c5:	58                   	pop    eax
    21c6:	01 74 00 00          	add    DWORD PTR [eax+eax*1+0x0],esi
    21ca:	00 02                	add    BYTE PTR [edx],al
    21cc:	91                   	xchg   ecx,eax
    21cd:	50                   	push   eax
    21ce:	00 00                	add    BYTE PTR [eax],al
    21d0:	00 05 04 4f 00 00    	add    BYTE PTR ds:0x4f04,al
    21d6:	00 1f                	add    BYTE PTR [edi],bl
    21d8:	7a 00                	jp     21da <sysEnter_Vector-0x12de26>
    21da:	00 00                	add    BYTE PTR [eax],al
    21dc:	ca 0a 00             	retf   0xa
    21df:	00 20                	add    BYTE PTR [eax],ah
    21e1:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    21e4:	00 ff                	add    bh,bh
    21e6:	03 00                	add    eax,DWORD PTR [eax]
    21e8:	1f                   	pop    ds
    21e9:	7a 00                	jp     21eb <sysEnter_Vector-0x12de15>
    21eb:	00 00                	add    BYTE PTR [eax],al
    21ed:	da 0a                	fimul  DWORD PTR [edx]
    21ef:	00 00                	add    BYTE PTR [eax],al
    21f1:	21 6b 00             	and    DWORD PTR [ebx+0x0],ebp
    21f4:	00 00                	add    BYTE PTR [eax],al
    21f6:	01 00                	add    DWORD PTR [eax],eax
    21f8:	1c 92                	sbb    al,0x92
    21fa:	08 00                	or     BYTE PTR [eax],al
    21fc:	00 01                	add    BYTE PTR [ecx],al
    21fe:	70 01                	jo     2201 <sysEnter_Vector-0x12ddff>
    2200:	1d 07 00 00 95       	sbb    eax,0x95000007
    2205:	21 00                	and    DWORD PTR [eax],eax
    2207:	9f                   	lahf   
    2208:	23 00                	and    eax,DWORD PTR [eax]
    220a:	00 00                	add    BYTE PTR [eax],al
    220c:	01 9c 13 0b 00 00 1d 	add    DWORD PTR [ebx+edx*1+0x1d00000b],ebx
    2213:	df 09                	fisttp WORD PTR [ecx]
    2215:	00 00                	add    BYTE PTR [eax],al
    2217:	01 70 01             	add    DWORD PTR [eax+0x1],esi
    221a:	74 00                	je     221c <sysEnter_Vector-0x12dde4>
    221c:	00 00                	add    BYTE PTR [eax],al
    221e:	02 91 00 1d da 09    	add    dl,BYTE PTR [ecx+0x9da1d00]
    2224:	00 00                	add    BYTE PTR [eax],al
    2226:	01 70 01             	add    DWORD PTR [eax+0x1],esi
    2229:	b3 0a                	mov    bl,0xa
    222b:	00 00                	add    BYTE PTR [eax],al
    222d:	02 91 04 00 1c 3b    	add    dl,BYTE PTR [ecx+0x3b1c0004]
    2233:	0a 00                	or     al,BYTE PTR [eax]
    2235:	00 01                	add    BYTE PTR [ecx],al
    2237:	75 01                	jne    223a <sysEnter_Vector-0x12ddc6>
    2239:	4f                   	dec    edi
    223a:	00 00                	add    BYTE PTR [eax],al
    223c:	00 b8 21 00 9f 23    	add    BYTE PTR [eax+0x239f0021],bh
    2242:	00 00                	add    BYTE PTR [eax],al
    2244:	00 01                	add    BYTE PTR [ecx],al
    2246:	9c                   	pushf  
    2247:	4c                   	dec    esp
    2248:	0b 00                	or     eax,DWORD PTR [eax]
    224a:	00 22                	add    BYTE PTR [edx],ah
    224c:	73 74                	jae    22c2 <sysEnter_Vector-0x12dd3e>
    224e:	64 00 01             	add    BYTE PTR fs:[ecx],al
    2251:	75 01                	jne    2254 <sysEnter_Vector-0x12ddac>
    2253:	4f                   	dec    edi
    2254:	00 00                	add    BYTE PTR [eax],al
    2256:	00 02                	add    BYTE PTR [edx],al
    2258:	91                   	xchg   ecx,eax
    2259:	00 1d 5f 0a 00 00    	add    BYTE PTR ds:0xa5f,bl
    225f:	01 75 01             	add    DWORD PTR [ebp+0x1],esi
    2262:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    2267:	91                   	xchg   ecx,eax
    2268:	04 00                	add    al,0x0
    226a:	23 55 0a             	and    edx,DWORD PTR [ebp+0xa]
    226d:	00 00                	add    BYTE PTR [eax],al
    226f:	01 7a 01             	add    DWORD PTR [edx+0x1],edi
    2272:	db 21                	(bad)  [ecx]
    2274:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    227a:	01 9c 1c fa 09 00 00 	add    DWORD PTR [esp+ebx*1+0x9fa],ebx
    2281:	01 7f 01             	add    DWORD PTR [edi+0x1],edi
    2284:	4f                   	dec    edi
    2285:	00 00                	add    BYTE PTR [eax],al
    2287:	00 f8                	add    al,bh
    2289:	21 00                	and    DWORD PTR [eax],eax
    228b:	9f                   	lahf   
    228c:	20 00                	and    BYTE PTR [eax],al
    228e:	00 00                	add    BYTE PTR [eax],al
    2290:	01 9c a6 0b 00 00 1d 	add    DWORD PTR [esi+eiz*4+0x1d00000b],ebx
    2297:	27                   	daa    
    2298:	09 00                	or     DWORD PTR [eax],eax
    229a:	00 01                	add    BYTE PTR [ecx],al
    229c:	7f 01                	jg     229f <sysEnter_Vector-0x12dd61>
    229e:	4f                   	dec    edi
    229f:	00 00                	add    BYTE PTR [eax],al
    22a1:	00 02                	add    BYTE PTR [edx],al
    22a3:	91                   	xchg   ecx,eax
    22a4:	00 22                	add    BYTE PTR [edx],ah
    22a6:	77 68                	ja     2310 <sysEnter_Vector-0x12dcf0>
    22a8:	6f                   	outs   dx,DWORD PTR ds:[esi]
    22a9:	00 01                	add    BYTE PTR [ecx],al
    22ab:	7f 01                	jg     22ae <sysEnter_Vector-0x12dd52>
    22ad:	4f                   	dec    edi
    22ae:	00 00                	add    BYTE PTR [eax],al
    22b0:	00 02                	add    BYTE PTR [edx],al
    22b2:	91                   	xchg   ecx,eax
    22b3:	04 1d                	add    al,0x1d
    22b5:	44                   	inc    esp
    22b6:	09 00                	or     DWORD PTR [eax],eax
    22b8:	00 01                	add    BYTE PTR [ecx],al
    22ba:	7f 01                	jg     22bd <sysEnter_Vector-0x12dd43>
    22bc:	4f                   	dec    edi
    22bd:	00 00                	add    BYTE PTR [eax],al
    22bf:	00 02                	add    BYTE PTR [edx],al
    22c1:	91                   	xchg   ecx,eax
    22c2:	08 00                	or     BYTE PTR [eax],al
    22c4:	24 78                	and    al,0x78
    22c6:	00 00                	add    BYTE PTR [eax],al
    22c8:	00 06                	add    BYTE PTR [esi],al
    22ca:	33 1d 07 00 00 05    	xor    ebx,DWORD PTR ds:0x5000007
    22d0:	03 20                	add    esp,DWORD PTR [eax]
    22d2:	92                   	xchg   edx,eax
    22d3:	00 9f 24 10 02 00    	add    BYTE PTR [edi+0x21024],bl
    22d9:	00 07                	add    BYTE PTR [edi],al
    22db:	35 c8 0b 00 00       	xor    eax,0xbc8
    22e0:	05 03 30 92 00       	add    eax,0x923003
    22e5:	9f                   	lahf   
    22e6:	05 04 ac 00 00       	add    eax,0xac04
    22eb:	00 24 33             	add    BYTE PTR [ebx+esi*1],ah
    22ee:	02 00                	add    al,BYTE PTR [eax]
    22f0:	00 07                	add    BYTE PTR [edi],al
    22f2:	36 a1 00 00 00 05    	mov    eax,ss:0x5000000
    22f8:	03 2c 92             	add    ebp,DWORD PTR [edx+edx*4]
    22fb:	00 9f 24 17 09 00    	add    BYTE PTR [edi+0x91724],bl
    2301:	00 01                	add    BYTE PTR [ecx],al
    2303:	0d d5 01 00 00       	or     eax,0x1d5
    2308:	05 03 44 92 00       	add    eax,0x924403
    230d:	9f                   	lahf   
    230e:	24 91                	and    al,0x91
    2310:	09 00                	or     DWORD PTR [eax],eax
    2312:	00 01                	add    BYTE PTR [ecx],al
    2314:	0e                   	push   cs
    2315:	74 00                	je     2317 <sysEnter_Vector-0x12dce9>
    2317:	00 00                	add    BYTE PTR [eax],al
    2319:	05 03 48 92 00       	add    eax,0x924803
    231e:	9f                   	lahf   
    231f:	00 9b 02 00 00 04    	add    BYTE PTR [ebx+0x4000002],bl
    2325:	00 12                	add    BYTE PTR [edx],dl
    2327:	09 00                	or     DWORD PTR [eax],eax
    2329:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    232c:	c3                   	ret    
    232d:	00 00                	add    BYTE PTR [eax],al
    232f:	00 0c aa             	add    BYTE PTR [edx+ebp*4],cl
    2332:	0a 00                	or     al,BYTE PTR [eax]
    2334:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    2337:	00 00                	add    BYTE PTR [eax],al
    2339:	18 22                	sbb    BYTE PTR [edx],ah
    233b:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    2341:	fe 09                	dec    BYTE PTR [ecx]
    2343:	00 00                	add    BYTE PTR [eax],al
    2345:	02 01                	add    al,BYTE PTR [ecx]
    2347:	08 3f                	or     BYTE PTR [edi],bh
    2349:	00 00                	add    BYTE PTR [eax],al
    234b:	00 02                	add    BYTE PTR [edx],al
    234d:	02 07                	add    al,BYTE PTR [edi]
    234f:	0e                   	push   cs
    2350:	00 00                	add    BYTE PTR [eax],al
    2352:	00 02                	add    BYTE PTR [edx],al
    2354:	04 07                	add    al,0x7
    2356:	32 00                	xor    al,BYTE PTR [eax]
    2358:	00 00                	add    BYTE PTR [eax],al
    235a:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    235d:	2d 00 00 00 02       	sub    eax,0x2000000
    2362:	01 06                	add    DWORD PTR [esi],eax
    2364:	41                   	inc    ecx
    2365:	00 00                	add    BYTE PTR [eax],al
    2367:	00 02                	add    BYTE PTR [edx],al
    2369:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    236f:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2376:	02 08                	add    cl,BYTE PTR [eax]
    2378:	05 00 00 00 00       	add    eax,0x0
    237d:	02 08                	add    cl,BYTE PTR [eax]
    237f:	07                   	pop    es
    2380:	28 00                	sub    BYTE PTR [eax],al
    2382:	00 00                	add    BYTE PTR [eax],al
    2384:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    238b:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    238e:	2a 01                	sub    al,BYTE PTR [ecx]
    2390:	00 00                	add    BYTE PTR [eax],al
    2392:	04 04                	add    al,0x4
    2394:	05 04 7a 00 00       	add    eax,0x7a04
    2399:	00 02                	add    BYTE PTR [edx],al
    239b:	01 06                	add    DWORD PTR [esi],eax
    239d:	48                   	dec    eax
    239e:	00 00                	add    BYTE PTR [eax],al
    23a0:	00 06                	add    BYTE PTR [esi],al
    23a2:	45                   	inc    ebp
    23a3:	02 00                	add    al,BYTE PTR [eax]
    23a5:	00 02                	add    BYTE PTR [edx],al
    23a7:	34 33                	xor    al,0x33
    23a9:	00 00                	add    BYTE PTR [eax],al
    23ab:	00 06                	add    BYTE PTR [esi],al
    23ad:	91                   	xchg   ecx,eax
    23ae:	02 00                	add    al,BYTE PTR [eax]
    23b0:	00 03                	add    BYTE PTR [ebx],al
    23b2:	d8 33                	fdiv   DWORD PTR [ebx]
    23b4:	00 00                	add    BYTE PTR [eax],al
    23b6:	00 02                	add    BYTE PTR [edx],al
    23b8:	0c 04                	or     al,0x4
    23ba:	ad                   	lods   eax,DWORD PTR ds:[esi]
    23bb:	00 00                	add    BYTE PTR [eax],al
    23bd:	00 07                	add    BYTE PTR [edi],al
    23bf:	a0 03 00 00 04       	mov    al,ds:0x4000003
    23c4:	33 00                	xor    eax,DWORD PTR [eax]
    23c6:	00 00                	add    BYTE PTR [eax],al
    23c8:	04 15                	add    al,0x15
    23ca:	9f                   	lahf   
    23cb:	01 00                	add    DWORD PTR [eax],eax
    23cd:	00 08                	add    BYTE PTR [eax],cl
    23cf:	51                   	push   ecx
    23d0:	04 00                	add    al,0x0
    23d2:	00 00                	add    BYTE PTR [eax],al
    23d4:	08 96 04 00 00 01    	or     BYTE PTR [esi+0x1000004],dl
    23da:	08 84 02 00 00 02 08 	or     BYTE PTR [edx+eax*1+0x8020000],al
    23e1:	83 03 00             	add    DWORD PTR [ebx],0x0
    23e4:	00 03                	add    BYTE PTR [ebx],al
    23e6:	08 6a 02             	or     BYTE PTR [edx+0x2],ch
    23e9:	00 00                	add    BYTE PTR [eax],al
    23eb:	04 08                	add    al,0x8
    23ed:	da 04 00             	fiadd  DWORD PTR [eax+eax*1]
    23f0:	00 05 08 78 04 00    	add    BYTE PTR ds:0x47808,al
    23f6:	00 0a                	add    BYTE PTR [edx],cl
    23f8:	08 c4                	or     ah,al
    23fa:	03 00                	add    eax,DWORD PTR [eax]
    23fc:	00 0b                	add    BYTE PTR [ebx],cl
    23fe:	08 2a                	or     BYTE PTR [edx],ch
    2400:	04 00                	add    al,0x0
    2402:	00 0c 08             	add    BYTE PTR [eax+ecx*1],cl
    2405:	91                   	xchg   ecx,eax
    2406:	03 00                	add    eax,DWORD PTR [eax]
    2408:	00 0d 08 aa 03 00    	add    BYTE PTR ds:0x3aa08,cl
    240e:	00 0e                	add    BYTE PTR [esi],cl
    2410:	08 77 02             	or     BYTE PTR [edi+0x2],dh
    2413:	00 00                	add    BYTE PTR [eax],al
    2415:	0f 08                	invd   
    2417:	f4                   	hlt    
    2418:	03 00                	add    eax,DWORD PTR [eax]
    241a:	00 10                	add    BYTE PTR [eax],dl
    241c:	08 27                	or     BYTE PTR [edi],ah
    241e:	05 00 00 11 08       	add    eax,0x8110000
    2423:	05 05 00 00 4f       	add    eax,0x4f000005
    2428:	08 cb                	or     bl,cl
    242a:	04 00                	add    al,0x0
    242c:	00 50 08             	add    BYTE PTR [eax+0x8],dl
    242f:	44                   	inc    esp
    2430:	04 00                	add    al,0x0
    2432:	00 59 08             	add    BYTE PTR [ecx+0x8],bl
    2435:	14 05                	adc    al,0x5
    2437:	00 00                	add    BYTE PTR [eax],al
    2439:	61                   	popa   
    243a:	08 49 03             	or     BYTE PTR [ecx+0x3],cl
    243d:	00 00                	add    BYTE PTR [eax],al
    243f:	97                   	xchg   edi,eax
    2440:	09 61 04             	or     DWORD PTR [ecx+0x4],esp
    2443:	00 00                	add    BYTE PTR [eax],al
    2445:	63 01                	arpl   WORD PTR [ecx],ax
    2447:	09 37                	or     DWORD PTR [edi],esi
    2449:	04 00                	add    al,0x0
    244b:	00 64 01 09          	add    BYTE PTR [ecx+eax*1+0x9],ah
    244f:	44                   	inc    esp
    2450:	05 00 00 65 01       	add    eax,0x1650000
    2455:	09 25 03 00 00 66    	or     DWORD PTR ds:0x66000003,esp
    245b:	01 09                	add    DWORD PTR [ecx],ecx
    245d:	56                   	push   esi
    245e:	05 00 00 67 01       	add    eax,0x1670000
    2463:	09 b7 03 00 00 68    	or     DWORD PTR [edi+0x68000003],esi
    2469:	01 09                	add    DWORD PTR [ecx],ecx
    246b:	d6                   	(bad)  
    246c:	02 00                	add    al,BYTE PTR [eax]
    246e:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    2471:	09 85 04 00 00 70    	or     DWORD PTR [ebp+0x70000004],eax
    2477:	01 09                	add    DWORD PTR [ecx],ecx
    2479:	39 03                	cmp    DWORD PTR [ebx],eax
    247b:	00 00                	add    BYTE PTR [eax],al
    247d:	71 01                	jno    2480 <sysEnter_Vector-0x12db80>
    247f:	09 e8                	or     eax,ebp
    2481:	04 00                	add    al,0x0
    2483:	00 00                	add    BYTE PTR [eax],al
    2485:	03 09                	add    ecx,DWORD PTR [ecx]
    2487:	d9 03                	fld    DWORD PTR [ebx]
    2489:	00 00                	add    BYTE PTR [eax],al
    248b:	01 03                	add    DWORD PTR [ebx],eax
    248d:	09 e8                	or     eax,ebp
    248f:	03 00                	add    eax,DWORD PTR [eax]
    2491:	00 02                	add    BYTE PTR [edx],al
    2493:	03 09                	add    ecx,DWORD PTR [ecx]
    2495:	73 03                	jae    249a <sysEnter_Vector-0x12db66>
    2497:	00 00                	add    BYTE PTR [eax],al
    2499:	03 03                	add    eax,DWORD PTR [ebx]
    249b:	09 b6 02 00 00 04    	or     DWORD PTR [esi+0x4000002],esi
    24a1:	03 09                	add    ecx,DWORD PTR [ecx]
    24a3:	15 03 00 00 05       	adc    eax,0x5000003
    24a8:	03 09                	add    ecx,DWORD PTR [ecx]
    24aa:	64 03 00             	add    eax,DWORD PTR fs:[eax]
    24ad:	00 06                	add    BYTE PTR [esi],al
    24af:	03 09                	add    ecx,DWORD PTR [ecx]
    24b1:	b2 04                	mov    dl,0x4
    24b3:	00 00                	add    BYTE PTR [eax],al
    24b5:	07                   	pop    es
    24b6:	03 09                	add    ecx,DWORD PTR [ecx]
    24b8:	01 04 00             	add    DWORD PTR [eax+eax*1],eax
    24bb:	00 00                	add    BYTE PTR [eax],al
    24bd:	09 00                	or     DWORD PTR [eax],eax
    24bf:	0a 8a 0a 00 00 18    	or     cl,BYTE PTR [edx+0x1800000a]
    24c5:	04 3e                	add    al,0x3e
    24c7:	f3 01 00             	repz add DWORD PTR [eax],eax
    24ca:	00 0b                	add    BYTE PTR [ebx],cl
    24cc:	89 0e                	mov    DWORD PTR [esi],ecx
    24ce:	00 00                	add    BYTE PTR [eax],al
    24d0:	04 40                	add    al,0x40
    24d2:	72 00                	jb     24d4 <sysEnter_Vector-0x12db2c>
    24d4:	00 00                	add    BYTE PTR [eax],al
    24d6:	00 0c 6c             	add    BYTE PTR [esp+ebp*2],cl
    24d9:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    24db:	00 04 41             	add    BYTE PTR [ecx+eax*2],al
    24de:	4f                   	dec    edi
    24df:	00 00                	add    BYTE PTR [eax],al
    24e1:	00 04 0b             	add    BYTE PTR [ebx+ecx*1],al
    24e4:	b9 0a 00 00 04       	mov    ecx,0x400000a
    24e9:	42                   	inc    edx
    24ea:	4f                   	dec    edi
    24eb:	00 00                	add    BYTE PTR [eax],al
    24ed:	00 08                	add    BYTE PTR [eax],cl
    24ef:	0b a4 0a 00 00 04 43 	or     esp,DWORD PTR [edx+ecx*1+0x43040000]
    24f6:	4f                   	dec    edi
    24f7:	00 00                	add    BYTE PTR [eax],al
    24f9:	00 0c 0c             	add    BYTE PTR [esp+ecx*1],cl
    24fc:	66                   	data16
    24fd:	64 00 04 44          	add    BYTE PTR fs:[esp+eax*2],al
    2501:	4f                   	dec    edi
    2502:	00 00                	add    BYTE PTR [eax],al
    2504:	00 10                	add    BYTE PTR [eax],dl
    2506:	0b ce                	or     ecx,esi
    2508:	11 00                	adc    DWORD PTR [eax],eax
    250a:	00 04 45 4f 00 00 00 	add    BYTE PTR [eax*2+0x4f],al
    2511:	14 00                	adc    al,0x0
    2513:	06                   	push   es
    2514:	c3                   	ret    
    2515:	0a 00                	or     al,BYTE PTR [eax]
    2517:	00 04 46             	add    BYTE PTR [esi+eax*2],al
    251a:	9f                   	lahf   
    251b:	01 00                	add    DWORD PTR [eax],eax
    251d:	00 06                	add    BYTE PTR [esi],al
    251f:	97                   	xchg   edi,eax
    2520:	0a 00                	or     al,BYTE PTR [eax]
    2522:	00 05 15 64 00 00    	add    BYTE PTR ds:0x6415,al
    2528:	00 0d be 0a 00 00    	add    BYTE PTR ds:0xabe,cl
    252e:	01 0d 72 00 00 00    	add    DWORD PTR ds:0x72,ecx
    2534:	18 22                	sbb    BYTE PTR [edx],ah
    2536:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    253c:	01 9c 76 02 00 00 0e 	add    DWORD PTR [esi+esi*2+0xe000002],ebx
    2543:	89 0e                	mov    DWORD PTR [esi],ecx
    2545:	00 00                	add    BYTE PTR [eax],al
    2547:	01 0d 72 00 00 00    	add    DWORD PTR ds:0x72,ecx
    254d:	02 91 00 0f 6c 65    	add    dl,BYTE PTR [ecx+0x656c0f00]
    2553:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2554:	00 01                	add    BYTE PTR [ecx],al
    2556:	0d 8c 00 00 00       	or     eax,0x8c
    255b:	02 91 04 0e b9 0a    	add    dl,BYTE PTR [ecx+0xab90e04]
    2561:	00 00                	add    BYTE PTR [eax],al
    2563:	01 0d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ecx
    2569:	02 91 08 0e a4 0a    	add    dl,BYTE PTR [ecx+0xaa40e08]
    256f:	00 00                	add    BYTE PTR [eax],al
    2571:	01 0d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ecx
    2577:	02 91 0c 0f 66 64    	add    dl,BYTE PTR [ecx+0x64660f0c]
    257d:	00 01                	add    BYTE PTR [ecx],al
    257f:	0d 4f 00 00 00       	or     eax,0x4f
    2584:	02 91 10 0e ce 11    	add    dl,BYTE PTR [ecx+0x11ce0e10]
    258a:	00 00                	add    BYTE PTR [eax],al
    258c:	01 0d fe 01 00 00    	add    DWORD PTR ds:0x1fe,ecx
    2592:	02 91 14 00 10 78    	add    dl,BYTE PTR [ecx+0x78100014]
    2598:	00 00                	add    BYTE PTR [eax],al
    259a:	00 06                	add    BYTE PTR [esi],al
    259c:	33 87 02 00 00 05    	xor    eax,DWORD PTR [edi+0x5000002]
    25a2:	03 20                	add    esp,DWORD PTR [eax]
    25a4:	92                   	xchg   edx,eax
    25a5:	00 9f 05 04 74 00    	add    BYTE PTR [edi+0x740405],bl
    25ab:	00 00                	add    BYTE PTR [eax],al
    25ad:	10 9d 0a 00 00 01    	adc    BYTE PTR [ebp+0x100000a],bl
    25b3:	0b f3                	or     esi,ebx
    25b5:	01 00                	add    DWORD PTR [eax],eax
    25b7:	00 05 03 4c 92 00    	add    BYTE PTR ds:0x924c03,al
    25bd:	9f                   	lahf   
    25be:	00 0b                	add    BYTE PTR [ebx],cl
    25c0:	05 00 00 04 00       	add    eax,0x40000
    25c5:	f4                   	hlt    
    25c6:	09 00                	or     DWORD PTR [eax],eax
    25c8:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    25cb:	c3                   	ret    
    25cc:	00 00                	add    BYTE PTR [eax],al
    25ce:	00 0c c1             	add    BYTE PTR [ecx+eax*8],cl
    25d1:	0b 00                	or     eax,DWORD PTR [eax]
    25d3:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    25d6:	00 00                	add    BYTE PTR [eax],al
    25d8:	8c 22                	mov    WORD PTR [edx],fs
    25da:	00 9f c2 06 00 00    	add    BYTE PTR [edi+0x6c2],bl
    25e0:	f9                   	stc    
    25e1:	0a 00                	or     al,BYTE PTR [eax]
    25e3:	00 02                	add    BYTE PTR [edx],al
    25e5:	01 06                	add    DWORD PTR [esi],eax
    25e7:	41                   	inc    ecx
    25e8:	00 00                	add    BYTE PTR [eax],al
    25ea:	00 02                	add    BYTE PTR [edx],al
    25ec:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    25f2:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    25f9:	02 08                	add    cl,BYTE PTR [eax]
    25fb:	05 00 00 00 00       	add    eax,0x0
    2600:	04 4d                	add    al,0x4d
    2602:	07                   	pop    es
    2603:	00 00                	add    BYTE PTR [eax],al
    2605:	02 2e                	add    ch,BYTE PTR [esi]
    2607:	4c                   	dec    esp
    2608:	00 00                	add    BYTE PTR [eax],al
    260a:	00 02                	add    BYTE PTR [edx],al
    260c:	01 08                	add    DWORD PTR [eax],ecx
    260e:	3f                   	aas    
    260f:	00 00                	add    BYTE PTR [eax],al
    2611:	00 04 07             	add    BYTE PTR [edi+eax*1],al
    2614:	06                   	push   es
    2615:	00 00                	add    BYTE PTR [eax],al
    2617:	02 31                	add    dh,BYTE PTR [ecx]
    2619:	5e                   	pop    esi
    261a:	00 00                	add    BYTE PTR [eax],al
    261c:	00 02                	add    BYTE PTR [edx],al
    261e:	02 07                	add    al,BYTE PTR [edi]
    2620:	0e                   	push   cs
    2621:	00 00                	add    BYTE PTR [eax],al
    2623:	00 04 45 02 00 00 02 	add    BYTE PTR [eax*2+0x2000002],al
    262a:	34 70                	xor    al,0x70
    262c:	00 00                	add    BYTE PTR [eax],al
    262e:	00 02                	add    BYTE PTR [edx],al
    2630:	04 07                	add    al,0x7
    2632:	32 00                	xor    al,BYTE PTR [eax]
    2634:	00 00                	add    BYTE PTR [eax],al
    2636:	02 08                	add    cl,BYTE PTR [eax]
    2638:	07                   	pop    es
    2639:	28 00                	sub    BYTE PTR [eax],al
    263b:	00 00                	add    BYTE PTR [eax],al
    263d:	04 01                	add    al,0x1
    263f:	02 00                	add    al,BYTE PTR [eax]
    2641:	00 02                	add    BYTE PTR [edx],al
    2643:	56                   	push   esi
    2644:	70 00                	jo     2646 <sysEnter_Vector-0x12d9ba>
    2646:	00 00                	add    BYTE PTR [eax],al
    2648:	04 91                	add    al,0x91
    264a:	02 00                	add    al,BYTE PTR [eax]
    264c:	00 03                	add    BYTE PTR [ebx],al
    264e:	d8 70 00             	fdiv   DWORD PTR [eax+0x0]
    2651:	00 00                	add    BYTE PTR [eax],al
    2653:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    265a:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    265d:	ad                   	lods   eax,DWORD PTR ds:[esi]
    265e:	00 00                	add    BYTE PTR [eax],al
    2660:	00 02                	add    BYTE PTR [edx],al
    2662:	01 06                	add    DWORD PTR [esi],eax
    2664:	48                   	dec    eax
    2665:	00 00                	add    BYTE PTR [eax],al
    2667:	00 05 40 0b 00 00    	add    BYTE PTR ds:0xb40,al
    266d:	18 04 33             	sbb    BYTE PTR [ebx+esi*1],al
    2670:	0a 01                	or     al,BYTE PTR [ecx]
    2672:	00 00                	add    BYTE PTR [eax],al
    2674:	06                   	push   es
    2675:	0c 0b                	or     al,0xb
    2677:	00 00                	add    BYTE PTR [eax],al
    2679:	04 35                	add    al,0x35
    267b:	65 00 00             	add    BYTE PTR gs:[eax],al
    267e:	00 00                	add    BYTE PTR [eax],al
    2680:	07                   	pop    es
    2681:	6c                   	ins    BYTE PTR es:[edi],dx
    2682:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    2684:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    2687:	65 00 00             	add    BYTE PTR gs:[eax],al
    268a:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    268d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    268f:	00 00                	add    BYTE PTR [eax],al
    2691:	04 37                	add    al,0x37
    2693:	0a 01                	or     al,BYTE PTR [ecx]
    2695:	00 00                	add    BYTE PTR [eax],al
    2697:	08 06                	or     BYTE PTR [esi],al
    2699:	ac                   	lods   al,BYTE PTR ds:[esi]
    269a:	0b 00                	or     eax,DWORD PTR [eax]
    269c:	00 04 38             	add    BYTE PTR [eax+edi*1],al
    269f:	53                   	push   ebx
    26a0:	00 00                	add    BYTE PTR [eax],al
    26a2:	00 0a                	add    BYTE PTR [edx],cl
    26a4:	06                   	push   es
    26a5:	33 0b                	xor    ecx,DWORD PTR [ebx]
    26a7:	00 00                	add    BYTE PTR [eax],al
    26a9:	04 39                	add    al,0x39
    26ab:	41                   	inc    ecx
    26ac:	00 00                	add    BYTE PTR [eax],al
    26ae:	00 0c 06             	add    BYTE PTR [esi+eax*1],cl
    26b1:	d2 0a                	ror    BYTE PTR [edx],cl
    26b3:	00 00                	add    BYTE PTR [eax],al
    26b5:	04 3a                	add    al,0x3a
    26b7:	11 01                	adc    DWORD PTR [ecx],eax
    26b9:	00 00                	add    BYTE PTR [eax],al
    26bb:	10 06                	adc    BYTE PTR [esi],al
    26bd:	ee                   	out    dx,al
    26be:	0a 00                	or     al,BYTE PTR [eax]
    26c0:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    26c3:	11 01                	adc    DWORD PTR [ecx],eax
    26c5:	00 00                	add    BYTE PTR [eax],al
    26c7:	14 00                	adc    al,0x0
    26c9:	02 01                	add    al,BYTE PTR [ecx]
    26cb:	02 e8                	add    ch,al
    26cd:	06                   	push   es
    26ce:	00 00                	add    BYTE PTR [eax],al
    26d0:	08 04 a9             	or     BYTE PTR [ecx+ebp*4],al
    26d3:	00 00                	add    BYTE PTR [eax],al
    26d5:	00 04 f3             	add    BYTE PTR [ebx+esi*8],al
    26d8:	0a 00                	or     al,BYTE PTR [eax]
    26da:	00 04 3b             	add    BYTE PTR [ebx+edi*1],al
    26dd:	a9 00 00 00 02       	test   eax,0x2000000
    26e2:	04 07                	add    al,0x7
    26e4:	2d 00 00 00 02       	sub    eax,0x2000000
    26e9:	04 07                	add    al,0x7
    26eb:	2a 01                	sub    al,BYTE PTR [ecx]
    26ed:	00 00                	add    BYTE PTR [eax],al
    26ef:	09 04 08             	or     DWORD PTR [eax+ecx*1],eax
    26f2:	04 a2                	add    al,0xa2
    26f4:	00 00                	add    BYTE PTR [eax],al
    26f6:	00 0a                	add    BYTE PTR [edx],cl
    26f8:	a0 03 00 00 04       	mov    al,ds:0x4000003
    26fd:	70 00                	jo     26ff <sysEnter_Vector-0x12d901>
    26ff:	00 00                	add    BYTE PTR [eax],al
    2701:	06                   	push   es
    2702:	15 39 02 00 00       	adc    eax,0x239
    2707:	0b 51 04             	or     edx,DWORD PTR [ecx+0x4]
    270a:	00 00                	add    BYTE PTR [eax],al
    270c:	00 0b                	add    BYTE PTR [ebx],cl
    270e:	96                   	xchg   esi,eax
    270f:	04 00                	add    al,0x0
    2711:	00 01                	add    BYTE PTR [ecx],al
    2713:	0b 84 02 00 00 02 0b 	or     eax,DWORD PTR [edx+eax*1+0xb020000]
    271a:	83 03 00             	add    DWORD PTR [ebx],0x0
    271d:	00 03                	add    BYTE PTR [ebx],al
    271f:	0b 6a 02             	or     ebp,DWORD PTR [edx+0x2]
    2722:	00 00                	add    BYTE PTR [eax],al
    2724:	04 0b                	add    al,0xb
    2726:	da 04 00             	fiadd  DWORD PTR [eax+eax*1]
    2729:	00 05 0b 78 04 00    	add    BYTE PTR ds:0x4780b,al
    272f:	00 0a                	add    BYTE PTR [edx],cl
    2731:	0b c4                	or     eax,esp
    2733:	03 00                	add    eax,DWORD PTR [eax]
    2735:	00 0b                	add    BYTE PTR [ebx],cl
    2737:	0b 2a                	or     ebp,DWORD PTR [edx]
    2739:	04 00                	add    al,0x0
    273b:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
    273e:	91                   	xchg   ecx,eax
    273f:	03 00                	add    eax,DWORD PTR [eax]
    2741:	00 0d 0b aa 03 00    	add    BYTE PTR ds:0x3aa0b,cl
    2747:	00 0e                	add    BYTE PTR [esi],cl
    2749:	0b 77 02             	or     esi,DWORD PTR [edi+0x2]
    274c:	00 00                	add    BYTE PTR [eax],al
    274e:	0f 0b                	ud2    
    2750:	f4                   	hlt    
    2751:	03 00                	add    eax,DWORD PTR [eax]
    2753:	00 10                	add    BYTE PTR [eax],dl
    2755:	0b 27                	or     esp,DWORD PTR [edi]
    2757:	05 00 00 11 0b       	add    eax,0xb110000
    275c:	05 05 00 00 4f       	add    eax,0x4f000005
    2761:	0b cb                	or     ecx,ebx
    2763:	04 00                	add    al,0x0
    2765:	00 50 0b             	add    BYTE PTR [eax+0xb],dl
    2768:	44                   	inc    esp
    2769:	04 00                	add    al,0x0
    276b:	00 59 0b             	add    BYTE PTR [ecx+0xb],bl
    276e:	14 05                	adc    al,0x5
    2770:	00 00                	add    BYTE PTR [eax],al
    2772:	61                   	popa   
    2773:	0b 49 03             	or     ecx,DWORD PTR [ecx+0x3]
    2776:	00 00                	add    BYTE PTR [eax],al
    2778:	97                   	xchg   edi,eax
    2779:	0c 61                	or     al,0x61
    277b:	04 00                	add    al,0x0
    277d:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    2780:	0c 37                	or     al,0x37
    2782:	04 00                	add    al,0x0
    2784:	00 64 01 0c          	add    BYTE PTR [ecx+eax*1+0xc],ah
    2788:	44                   	inc    esp
    2789:	05 00 00 65 01       	add    eax,0x1650000
    278e:	0c 25                	or     al,0x25
    2790:	03 00                	add    eax,DWORD PTR [eax]
    2792:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    2795:	0c 56                	or     al,0x56
    2797:	05 00 00 67 01       	add    eax,0x1670000
    279c:	0c b7                	or     al,0xb7
    279e:	03 00                	add    eax,DWORD PTR [eax]
    27a0:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    27a3:	0c d6                	or     al,0xd6
    27a5:	02 00                	add    al,BYTE PTR [eax]
    27a7:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    27aa:	0c 85                	or     al,0x85
    27ac:	04 00                	add    al,0x0
    27ae:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    27b1:	0c 39                	or     al,0x39
    27b3:	03 00                	add    eax,DWORD PTR [eax]
    27b5:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    27b8:	0c e8                	or     al,0xe8
    27ba:	04 00                	add    al,0x0
    27bc:	00 00                	add    BYTE PTR [eax],al
    27be:	03 0c d9             	add    ecx,DWORD PTR [ecx+ebx*8]
    27c1:	03 00                	add    eax,DWORD PTR [eax]
    27c3:	00 01                	add    BYTE PTR [ecx],al
    27c5:	03 0c e8             	add    ecx,DWORD PTR [eax+ebp*8]
    27c8:	03 00                	add    eax,DWORD PTR [eax]
    27ca:	00 02                	add    BYTE PTR [edx],al
    27cc:	03 0c 73             	add    ecx,DWORD PTR [ebx+esi*2]
    27cf:	03 00                	add    eax,DWORD PTR [eax]
    27d1:	00 03                	add    BYTE PTR [ebx],al
    27d3:	03 0c b6             	add    ecx,DWORD PTR [esi+esi*4]
    27d6:	02 00                	add    al,BYTE PTR [eax]
    27d8:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    27db:	0c 15                	or     al,0x15
    27dd:	03 00                	add    eax,DWORD PTR [eax]
    27df:	00 05 03 0c 64 03    	add    BYTE PTR ds:0x3640c03,al
    27e5:	00 00                	add    BYTE PTR [eax],al
    27e7:	06                   	push   es
    27e8:	03 0c b2             	add    ecx,DWORD PTR [edx+esi*4]
    27eb:	04 00                	add    al,0x0
    27ed:	00 07                	add    BYTE PTR [edi],al
    27ef:	03 0c 01             	add    ecx,DWORD PTR [ecx+eax*1]
    27f2:	04 00                	add    al,0x0
    27f4:	00 00                	add    BYTE PTR [eax],al
    27f6:	09 00                	or     DWORD PTR [eax],eax
    27f8:	0d 46 0b 00 00       	or     eax,0xb46
    27fd:	01 15 8c 22 00 9f    	add    DWORD PTR ds:0x9f00228c,edx
    2803:	60                   	pusha  
    2804:	00 00                	add    BYTE PTR [eax],al
    2806:	00 01                	add    BYTE PTR [ecx],al
    2808:	9c                   	pushf  
    2809:	0e                   	push   cs
    280a:	13 0b                	adc    ecx,DWORD PTR [ebx]
    280c:	00 00                	add    BYTE PTR [eax],al
    280e:	01 1e                	add    DWORD PTR [esi],ebx
    2810:	65 00 00             	add    BYTE PTR gs:[eax],al
    2813:	00 ec                	add    ah,ch
    2815:	22 00                	and    al,BYTE PTR [eax]
    2817:	9f                   	lahf   
    2818:	87 00                	xchg   DWORD PTR [eax],eax
    281a:	00 00                	add    BYTE PTR [eax],al
    281c:	01 9c 80 02 00 00 0f 	add    DWORD PTR [eax+eax*4+0xf000002],ebx
    2823:	58                   	pop    eax
    2824:	07                   	pop    es
    2825:	00 00                	add    BYTE PTR [eax],al
    2827:	01 1e                	add    DWORD PTR [esi],ebx
    2829:	89 00                	mov    DWORD PTR [eax],eax
    282b:	00 00                	add    BYTE PTR [eax],al
    282d:	02 91 00 10 8b 0b    	add    dl,BYTE PTR [ecx+0xb8b1000]
    2833:	00 00                	add    BYTE PTR [eax],al
    2835:	01 22                	add    DWORD PTR [edx],esp
    2837:	65 00 00             	add    BYTE PTR gs:[eax],al
    283a:	00 02                	add    BYTE PTR [edx],al
    283c:	91                   	xchg   ecx,eax
    283d:	74 00                	je     283f <sysEnter_Vector-0x12d7c1>
    283f:	11 06                	adc    DWORD PTR [esi],eax
    2841:	0b 00                	or     eax,DWORD PTR [eax]
    2843:	00 01                	add    BYTE PTR [ecx],al
    2845:	36                   	ss
    2846:	73 23                	jae    286b <sysEnter_Vector-0x12d795>
    2848:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    284e:	01 9c b1 02 00 00 0f 	add    DWORD PTR [ecx+esi*4+0xf000002],ebx
    2855:	e3 0b                	jecxz  2862 <sysEnter_Vector-0x12d79e>
    2857:	00 00                	add    BYTE PTR [eax],al
    2859:	01 36                	add    DWORD PTR [esi],esi
    285b:	30 01                	xor    BYTE PTR [ecx],al
    285d:	00 00                	add    BYTE PTR [eax],al
    285f:	02 91 00 12 6d 70    	add    dl,BYTE PTR [ecx+0x706d1200]
    2865:	00 01                	add    BYTE PTR [ecx],al
    2867:	38 b1 02 00 00 02    	cmp    BYTE PTR [ecx+0x2000002],dh
    286d:	91                   	xchg   ecx,eax
    286e:	6c                   	ins    BYTE PTR es:[edi],dx
    286f:	00 08                	add    BYTE PTR [eax],cl
    2871:	04 17                	add    al,0x17
    2873:	01 00                	add    DWORD PTR [eax],eax
    2875:	00 0e                	add    BYTE PTR [esi],cl
    2877:	f8                   	clc    
    2878:	0b 00                	or     eax,DWORD PTR [eax]
    287a:	00 01                	add    BYTE PTR [ecx],al
    287c:	4e                   	dec    esi
    287d:	b1 02                	mov    cl,0x2
    287f:	00 00                	add    BYTE PTR [eax],al
    2881:	e6 23                	out    0x23,al
    2883:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
    2889:	01 9c ed 02 00 00 0f 	add    DWORD PTR [ebp+ebp*8+0xf000002],ebx
    2890:	58                   	pop    eax
    2891:	07                   	pop    es
    2892:	00 00                	add    BYTE PTR [eax],al
    2894:	01 4e 89             	add    DWORD PTR [esi-0x77],ecx
    2897:	00 00                	add    BYTE PTR [eax],al
    2899:	00 02                	add    BYTE PTR [edx],al
    289b:	91                   	xchg   ecx,eax
    289c:	00 10                	add    BYTE PTR [eax],dl
    289e:	ce                   	into   
    289f:	0b 00                	or     eax,DWORD PTR [eax]
    28a1:	00 01                	add    BYTE PTR [ecx],al
    28a3:	50                   	push   eax
    28a4:	b1 02                	mov    cl,0x2
    28a6:	00 00                	add    BYTE PTR [eax],al
    28a8:	02 91 74 00 11 22    	add    dl,BYTE PTR [ecx+0x22110074]
    28ae:	0c 00                	or     al,0x0
    28b0:	00 01                	add    BYTE PTR [ecx],al
    28b2:	5e                   	pop    esi
    28b3:	6a 24                	push   0x24
    28b5:	00 9f 8b 00 00 00    	add    BYTE PTR [edi+0x8b],bl
    28bb:	01 9c 35 03 00 00 0f 	add    DWORD PTR [ebp+esi*1+0xf000003],ebx
    28c2:	b1 0b                	mov    cl,0xb
    28c4:	00 00                	add    BYTE PTR [eax],al
    28c6:	01 5e b1             	add    DWORD PTR [esi-0x4f],ebx
    28c9:	02 00                	add    al,BYTE PTR [eax]
    28cb:	00 02                	add    BYTE PTR [edx],al
    28cd:	91                   	xchg   ecx,eax
    28ce:	00 10                	add    BYTE PTR [eax],dl
    28d0:	ce                   	into   
    28d1:	0b 00                	or     eax,DWORD PTR [eax]
    28d3:	00 01                	add    BYTE PTR [ecx],al
    28d5:	61                   	popa   
    28d6:	b1 02                	mov    cl,0x2
    28d8:	00 00                	add    BYTE PTR [eax],al
    28da:	02 91 6c 13 ec 0b    	add    dl,BYTE PTR [ecx+0xbec136c]
    28e0:	00 00                	add    BYTE PTR [eax],al
    28e2:	01 67 a9             	add    DWORD PTR [edi-0x57],esp
    28e5:	24 00                	and    al,0x0
    28e7:	9f                   	lahf   
    28e8:	13 80 0b 00 00 01    	adc    eax,DWORD PTR [eax+0x100000b]
    28ee:	6d                   	ins    DWORD PTR es:[edi],dx
    28ef:	cc                   	int3   
    28f0:	24 00                	and    al,0x0
    28f2:	9f                   	lahf   
    28f3:	00 14 0d 03 00 00 01 	add    BYTE PTR [ecx*1+0x1000003],dl
    28fa:	75 30                	jne    292c <sysEnter_Vector-0x12d6d4>
    28fc:	01 00                	add    DWORD PTR [eax],eax
    28fe:	00 f5                	add    ch,dh
    2900:	24 00                	and    al,0x0
    2902:	9f                   	lahf   
    2903:	c0 02 00             	rol    BYTE PTR [edx],0x0
    2906:	00 01                	add    BYTE PTR [ecx],al
    2908:	9c                   	pushf  
    2909:	cc                   	int3   
    290a:	03 00                	add    eax,DWORD PTR [eax]
    290c:	00 0f                	add    BYTE PTR [edi],cl
    290e:	58                   	pop    eax
    290f:	07                   	pop    es
    2910:	00 00                	add    BYTE PTR [eax],al
    2912:	01 75 89             	add    DWORD PTR [ebp-0x77],esi
    2915:	00 00                	add    BYTE PTR [eax],al
    2917:	00 02                	add    BYTE PTR [edx],al
    2919:	91                   	xchg   ecx,eax
    291a:	00 10                	add    BYTE PTR [eax],dl
    291c:	72 05                	jb     2923 <sysEnter_Vector-0x12d6dd>
    291e:	00 00                	add    BYTE PTR [eax],al
    2920:	01 77 30             	add    DWORD PTR [edi+0x30],esi
    2923:	01 00                	add    DWORD PTR [eax],eax
    2925:	00 02                	add    BYTE PTR [edx],al
    2927:	91                   	xchg   ecx,eax
    2928:	58                   	pop    eax
    2929:	10 9c 0b 00 00 01 79 	adc    BYTE PTR [ebx+ecx*1+0x79010000],bl
    2930:	65 00 00             	add    BYTE PTR gs:[eax],al
    2933:	00 02                	add    BYTE PTR [edx],al
    2935:	91                   	xchg   ecx,eax
    2936:	60                   	pusha  
    2937:	10 6c 0b 00          	adc    BYTE PTR [ebx+ecx*1+0x0],ch
    293b:	00 01                	add    BYTE PTR [ecx],al
    293d:	7a 65                	jp     29a4 <sysEnter_Vector-0x12d65c>
    293f:	00 00                	add    BYTE PTR [eax],al
    2941:	00 02                	add    BYTE PTR [edx],al
    2943:	91                   	xchg   ecx,eax
    2944:	5c                   	pop    esp
    2945:	10 ce                	adc    dh,cl
    2947:	0b 00                	or     eax,DWORD PTR [eax]
    2949:	00 01                	add    BYTE PTR [ecx],al
    294b:	7b b1                	jnp    28fe <sysEnter_Vector-0x12d702>
    294d:	02 00                	add    al,BYTE PTR [eax]
    294f:	00 02                	add    BYTE PTR [edx],al
    2951:	91                   	xchg   ecx,eax
    2952:	68 10 51 0b 00       	push   0xb5110
    2957:	00 01                	add    BYTE PTR [ecx],al
    2959:	7c 89                	jl     28e4 <sysEnter_Vector-0x12d71c>
    295b:	00 00                	add    BYTE PTR [eax],al
    295d:	00 02                	add    BYTE PTR [edx],al
    295f:	91                   	xchg   ecx,eax
    2960:	6c                   	ins    BYTE PTR es:[edi],dx
    2961:	10 d7                	adc    bh,dl
    2963:	0a 00                	or     al,BYTE PTR [eax]
    2965:	00 01                	add    BYTE PTR [ecx],al
    2967:	7d b1                	jge    291a <sysEnter_Vector-0x12d6e6>
    2969:	02 00                	add    al,BYTE PTR [eax]
    296b:	00 05 03 70 92 00    	add    BYTE PTR ds:0x927003,al
    2971:	9f                   	lahf   
    2972:	15 80 25 00 9f       	adc    eax,0x9f002580
    2977:	11 00                	adc    DWORD PTR [eax],eax
    2979:	00 00                	add    BYTE PTR [eax],al
    297b:	12 70 74             	adc    dh,BYTE PTR [eax+0x74]
    297e:	72 00                	jb     2980 <sysEnter_Vector-0x12d680>
    2980:	01 89 30 01 00 00    	add    DWORD PTR [ecx+0x130],ecx
    2986:	02 91 64 00 00 14    	add    dl,BYTE PTR [ecx+0x14000064]
    298c:	4a                   	dec    edx
    298d:	0b 00                	or     eax,DWORD PTR [eax]
    298f:	00 01                	add    BYTE PTR [ecx],al
    2991:	b5 30                	mov    ch,0x30
    2993:	01 00                	add    DWORD PTR [eax],eax
    2995:	00 b5 27 00 9f 20    	add    BYTE PTR [ebp+0x209f0027],dh
    299b:	00 00                	add    BYTE PTR [eax],al
    299d:	00 01                	add    BYTE PTR [ecx],al
    299f:	9c                   	pushf  
    29a0:	f4                   	hlt    
    29a1:	03 00                	add    eax,DWORD PTR [eax]
    29a3:	00 0f                	add    BYTE PTR [edi],cl
    29a5:	58                   	pop    eax
    29a6:	07                   	pop    es
    29a7:	00 00                	add    BYTE PTR [eax],al
    29a9:	01 b5 89 00 00 00    	add    DWORD PTR [ebp+0x89],esi
    29af:	02 91 00 00 14 a3    	add    dl,BYTE PTR [ecx-0x5cec0000]
    29b5:	0b 00                	or     eax,DWORD PTR [eax]
    29b7:	00 01                	add    BYTE PTR [ecx],al
    29b9:	ba 30 01 00 00       	mov    edx,0x130
    29be:	d5 27                	aad    0x27
    29c0:	00 9f 03 01 00 00    	add    BYTE PTR [edi+0x103],bl
    29c6:	01 9c 53 04 00 00 0f 	add    DWORD PTR [ebx+edx*2+0xf000004],ebx
    29cd:	d6                   	(bad)  
    29ce:	0b 00                	or     eax,DWORD PTR [eax]
    29d0:	00 01                	add    BYTE PTR [ecx],al
    29d2:	ba 30 01 00 00       	mov    edx,0x130
    29d7:	02 91 00 0f 79 0b    	add    dl,BYTE PTR [ecx+0xb790f00]
    29dd:	00 00                	add    BYTE PTR [eax],al
    29df:	01 ba 65 00 00 00    	add    DWORD PTR [edx+0x65],edi
    29e5:	02 91 04 10 93 0b    	add    dl,BYTE PTR [ecx+0xb931004]
    29eb:	00 00                	add    BYTE PTR [eax],al
    29ed:	01 c0                	add    eax,eax
    29ef:	65 00 00             	add    BYTE PTR gs:[eax],al
    29f2:	00 02                	add    BYTE PTR [edx],al
    29f4:	91                   	xchg   ecx,eax
    29f5:	6c                   	ins    BYTE PTR es:[edi],dx
    29f6:	12 6d 70             	adc    ch,BYTE PTR [ebp+0x70]
    29f9:	00 01                	add    BYTE PTR [ecx],al
    29fb:	c1                   	(bad)  
    29fc:	b1 02                	mov    cl,0x2
    29fe:	00 00                	add    BYTE PTR [eax],al
    2a00:	02 91 68 10 b9 0b    	add    dl,BYTE PTR [ecx+0xbb91068]
    2a06:	00 00                	add    BYTE PTR [eax],al
    2a08:	01 cd                	add    ebp,ecx
    2a0a:	53                   	push   ebx
    2a0b:	04 00                	add    al,0x0
    2a0d:	00 02                	add    BYTE PTR [edx],al
    2a0f:	91                   	xchg   ecx,eax
    2a10:	64 00 08             	add    BYTE PTR fs:[eax],cl
    2a13:	04 7e                	add    al,0x7e
    2a15:	00 00                	add    BYTE PTR [eax],al
    2a17:	00 14 12             	add    BYTE PTR [edx+edx*1],dl
    2a1a:	0c 00                	or     al,0x0
    2a1c:	00 01                	add    BYTE PTR [ecx],al
    2a1e:	db 30                	(bad)  [eax]
    2a20:	01 00                	add    DWORD PTR [eax],eax
    2a22:	00 d8                	add    al,bl
    2a24:	28 00                	sub    BYTE PTR [eax],al
    2a26:	9f                   	lahf   
    2a27:	23 00                	and    eax,DWORD PTR [eax]
    2a29:	00 00                	add    BYTE PTR [eax],al
    2a2b:	01 9c 8f 04 00 00 0f 	add    DWORD PTR [edi+ecx*4+0xf000004],ebx
    2a32:	d6                   	(bad)  
    2a33:	0b 00                	or     eax,DWORD PTR [eax]
    2a35:	00 01                	add    BYTE PTR [ecx],al
    2a37:	db 30                	(bad)  [eax]
    2a39:	01 00                	add    DWORD PTR [eax],eax
    2a3b:	00 02                	add    BYTE PTR [edx],al
    2a3d:	91                   	xchg   ecx,eax
    2a3e:	00 0f                	add    BYTE PTR [edi],cl
    2a40:	79 0b                	jns    2a4d <sysEnter_Vector-0x12d5b3>
    2a42:	00 00                	add    BYTE PTR [eax],al
    2a44:	01 db                	add    ebx,ebx
    2a46:	65 00 00             	add    BYTE PTR gs:[eax],al
    2a49:	00 02                	add    BYTE PTR [edx],al
    2a4b:	91                   	xchg   ecx,eax
    2a4c:	04 00                	add    al,0x0
    2a4e:	11 de                	adc    esi,ebx
    2a50:	0b 00                	or     eax,DWORD PTR [eax]
    2a52:	00 01                	add    BYTE PTR [ecx],al
    2a54:	e0 fb                	loopne 2a51 <sysEnter_Vector-0x12d5af>
    2a56:	28 00                	sub    BYTE PTR [eax],al
    2a58:	9f                   	lahf   
    2a59:	21 00                	and    DWORD PTR [eax],eax
    2a5b:	00 00                	add    BYTE PTR [eax],al
    2a5d:	01 9c b3 04 00 00 0f 	add    DWORD PTR [ebx+esi*4+0xf000004],ebx
    2a64:	e3 0b                	jecxz  2a71 <sysEnter_Vector-0x12d58f>
    2a66:	00 00                	add    BYTE PTR [eax],al
    2a68:	01 e0                	add    eax,esp
    2a6a:	30 01                	xor    BYTE PTR [ecx],al
    2a6c:	00 00                	add    BYTE PTR [eax],al
    2a6e:	02 91 00 00 0d 5d    	add    dl,BYTE PTR [ecx+0x5d0d0000]
    2a74:	0b 00                	or     eax,DWORD PTR [eax]
    2a76:	00 01                	add    BYTE PTR [ecx],al
    2a78:	e5 1c                	in     eax,0x1c
    2a7a:	29 00                	sub    DWORD PTR [eax],eax
    2a7c:	9f                   	lahf   
    2a7d:	32 00                	xor    al,BYTE PTR [eax]
    2a7f:	00 00                	add    BYTE PTR [eax],al
    2a81:	01 9c 16 78 00 00 00 	add    DWORD PTR [esi+edx*1+0x78],ebx
    2a88:	05 33 d5 04 00       	add    eax,0x4d533
    2a8d:	00 05 03 20 92 00    	add    BYTE PTR ds:0x922003,al
    2a93:	9f                   	lahf   
    2a94:	08 04 32             	or     BYTE PTR [edx+esi*1],al
    2a97:	01 00                	add    DWORD PTR [eax],eax
    2a99:	00 16                	add    BYTE PTR [esi],dl
    2a9b:	fd                   	std    
    2a9c:	0a 00                	or     al,BYTE PTR [eax]
    2a9e:	00 01                	add    BYTE PTR [ecx],al
    2aa0:	11 65 00             	adc    DWORD PTR [ebp+0x0],esp
    2aa3:	00 00                	add    BYTE PTR [eax],al
    2aa5:	05 03 64 92 00       	add    eax,0x926403
    2aaa:	9f                   	lahf   
    2aab:	16                   	push   ss
    2aac:	e5 0a                	in     eax,0xa
    2aae:	00 00                	add    BYTE PTR [eax],al
    2ab0:	01 12                	add    DWORD PTR [edx],edx
    2ab2:	65 00 00             	add    BYTE PTR gs:[eax],al
    2ab5:	00 05 03 68 92 00    	add    BYTE PTR ds:0x926803,al
    2abb:	9f                   	lahf   
    2abc:	16                   	push   ss
    2abd:	1a 0c 00             	sbb    cl,BYTE PTR [eax+eax*1]
    2ac0:	00 01                	add    BYTE PTR [ecx],al
    2ac2:	13 65 00             	adc    esp,DWORD PTR [ebp+0x0]
    2ac5:	00 00                	add    BYTE PTR [eax],al
    2ac7:	05 03 6c 92 00       	add    eax,0x926c03
    2acc:	9f                   	lahf   
    2acd:	00 e8                	add    al,ch
    2acf:	01 00                	add    DWORD PTR [eax],eax
    2ad1:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2ad4:	47                   	inc    edi
    2ad5:	0b 00                	or     eax,DWORD PTR [eax]
    2ad7:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2ada:	c3                   	ret    
    2adb:	00 00                	add    BYTE PTR [eax],al
    2add:	00 0c 48             	add    BYTE PTR [eax+ecx*2],cl
    2ae0:	0c 00                	or     al,0x0
    2ae2:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    2ae5:	00 00                	add    BYTE PTR [eax],al
    2ae7:	50                   	push   eax
    2ae8:	29 00                	sub    DWORD PTR [eax],eax
    2aea:	9f                   	lahf   
    2aeb:	bb 01 00 00 cf       	mov    ebx,0xcf000001
    2af0:	0c 00                	or     al,0x0
    2af2:	00 02                	add    BYTE PTR [edx],al
    2af4:	01 08                	add    DWORD PTR [eax],ecx
    2af6:	3f                   	aas    
    2af7:	00 00                	add    BYTE PTR [eax],al
    2af9:	00 02                	add    BYTE PTR [edx],al
    2afb:	02 07                	add    al,BYTE PTR [edi]
    2afd:	0e                   	push   cs
    2afe:	00 00                	add    BYTE PTR [eax],al
    2b00:	00 02                	add    BYTE PTR [edx],al
    2b02:	04 07                	add    al,0x7
    2b04:	32 00                	xor    al,BYTE PTR [eax]
    2b06:	00 00                	add    BYTE PTR [eax],al
    2b08:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2b0b:	2d 00 00 00 02       	sub    eax,0x2000000
    2b10:	01 06                	add    DWORD PTR [esi],eax
    2b12:	41                   	inc    ecx
    2b13:	00 00                	add    BYTE PTR [eax],al
    2b15:	00 02                	add    BYTE PTR [edx],al
    2b17:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    2b1d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2b24:	02 08                	add    cl,BYTE PTR [eax]
    2b26:	05 00 00 00 00       	add    eax,0x0
    2b2b:	02 08                	add    cl,BYTE PTR [eax]
    2b2d:	07                   	pop    es
    2b2e:	28 00                	sub    BYTE PTR [eax],al
    2b30:	00 00                	add    BYTE PTR [eax],al
    2b32:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2b39:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2b3c:	2a 01                	sub    al,BYTE PTR [ecx]
    2b3e:	00 00                	add    BYTE PTR [eax],al
    2b40:	04 04                	add    al,0x4
    2b42:	05 04 7a 00 00       	add    eax,0x7a04
    2b47:	00 02                	add    BYTE PTR [edx],al
    2b49:	01 06                	add    DWORD PTR [esi],eax
    2b4b:	48                   	dec    eax
    2b4c:	00 00                	add    BYTE PTR [eax],al
    2b4e:	00 06                	add    BYTE PTR [esi],al
    2b50:	45                   	inc    ebp
    2b51:	02 00                	add    al,BYTE PTR [eax]
    2b53:	00 02                	add    BYTE PTR [edx],al
    2b55:	34 33                	xor    al,0x33
    2b57:	00 00                	add    BYTE PTR [eax],al
    2b59:	00 05 04 92 00 00    	add    BYTE PTR ds:0x9204,al
    2b5f:	00 07                	add    BYTE PTR [edi],al
    2b61:	7a 00                	jp     2b63 <sysEnter_Vector-0x12d49d>
    2b63:	00 00                	add    BYTE PTR [eax],al
    2b65:	06                   	push   es
    2b66:	91                   	xchg   ecx,eax
    2b67:	02 00                	add    al,BYTE PTR [eax]
    2b69:	00 03                	add    BYTE PTR [ebx],al
    2b6b:	d8 33                	fdiv   DWORD PTR [ebx]
    2b6d:	00 00                	add    BYTE PTR [eax],al
    2b6f:	00 02                	add    BYTE PTR [edx],al
    2b71:	0c 04                	or     al,0x4
    2b73:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2b74:	00 00                	add    BYTE PTR [eax],al
    2b76:	00 08                	add    BYTE PTR [eax],cl
    2b78:	34 0c                	xor    al,0xc
    2b7a:	00 00                	add    BYTE PTR [eax],al
    2b7c:	01 0b                	add    DWORD PTR [ebx],ecx
    2b7e:	72 00                	jb     2b80 <sysEnter_Vector-0x12d480>
    2b80:	00 00                	add    BYTE PTR [eax],al
    2b82:	50                   	push   eax
    2b83:	29 00                	sub    DWORD PTR [eax],eax
    2b85:	9f                   	lahf   
    2b86:	9b                   	fwait
    2b87:	01 00                	add    DWORD PTR [eax],eax
    2b89:	00 01                	add    BYTE PTR [ecx],al
    2b8b:	9c                   	pushf  
    2b8c:	73 01                	jae    2b8f <sysEnter_Vector-0x12d471>
    2b8e:	00 00                	add    BYTE PTR [eax],al
    2b90:	09 3c 0c             	or     DWORD PTR [esp+ecx*1],edi
    2b93:	00 00                	add    BYTE PTR [eax],al
    2b95:	01 0b                	add    DWORD PTR [ebx],ecx
    2b97:	72 00                	jb     2b99 <sysEnter_Vector-0x12d467>
    2b99:	00 00                	add    BYTE PTR [eax],al
    2b9b:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    2ba1:	63 00                	arpl   WORD PTR [eax],ax
    2ba3:	01 0b                	add    DWORD PTR [ebx],ecx
    2ba5:	73 01                	jae    2ba8 <sysEnter_Vector-0x12d458>
    2ba7:	00 00                	add    BYTE PTR [eax],al
    2ba9:	02 91 04 0a 6e 00    	add    dl,BYTE PTR [ecx+0x6e0a04]
    2baf:	01 0b                	add    DWORD PTR [ebx],ecx
    2bb1:	97                   	xchg   edi,eax
    2bb2:	00 00                	add    BYTE PTR [eax],al
    2bb4:	00 02                	add    BYTE PTR [edx],al
    2bb6:	91                   	xchg   ecx,eax
    2bb7:	08 0b                	or     BYTE PTR [ebx],cl
    2bb9:	64                   	fs
    2bba:	77 00                	ja     2bbc <sysEnter_Vector-0x12d444>
    2bbc:	01 0d 7a 01 00 00    	add    DWORD PTR ds:0x17a,ecx
    2bc2:	02 91 5e 0b 64 64    	add    dl,BYTE PTR [ecx+0x64640b5e]
    2bc8:	00 01                	add    BYTE PTR [ecx],al
    2bca:	0d 7a 01 00 00       	or     eax,0x17a
    2bcf:	02 91 5f 0c 82 29    	add    dl,BYTE PTR [ecx+0x29820c5f]
    2bd5:	00 9f 7d 00 00 00    	add    BYTE PTR [edi+0x7d],bl
    2bdb:	2a 01                	sub    al,BYTE PTR [ecx]
    2bdd:	00 00                	add    BYTE PTR [eax],al
    2bdf:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    2be2:	01 14 81             	add    DWORD PTR [ecx+eax*4],edx
    2be5:	01 00                	add    DWORD PTR [eax],eax
    2be7:	00 02                	add    BYTE PTR [edx],al
    2be9:	91                   	xchg   ecx,eax
    2bea:	74 0b                	je     2bf7 <sysEnter_Vector-0x12d409>
    2bec:	74 00                	je     2bee <sysEnter_Vector-0x12d412>
    2bee:	01 15 8c 01 00 00    	add    DWORD PTR ds:0x18c,edx
    2bf4:	02 91 70 00 0c 05    	add    dl,BYTE PTR [ecx+0x50c0070]
    2bfa:	2a 00                	sub    al,BYTE PTR [eax]
    2bfc:	9f                   	lahf   
    2bfd:	79 00                	jns    2bff <sysEnter_Vector-0x12d401>
    2bff:	00 00                	add    BYTE PTR [eax],al
    2c01:	50                   	push   eax
    2c02:	01 00                	add    DWORD PTR [eax],eax
    2c04:	00 0b                	add    BYTE PTR [ebx],cl
    2c06:	66                   	data16
    2c07:	00 01                	add    BYTE PTR [ecx],al
    2c09:	24 81                	and    al,0x81
    2c0b:	01 00                	add    DWORD PTR [eax],eax
    2c0d:	00 02                	add    BYTE PTR [edx],al
    2c0f:	91                   	xchg   ecx,eax
    2c10:	6c                   	ins    BYTE PTR es:[edi],dx
    2c11:	0b 74 00 01          	or     esi,DWORD PTR [eax+eax*1+0x1]
    2c15:	25 8c 01 00 00       	and    eax,0x18c
    2c1a:	02 91 68 00 0d 7e    	add    dl,BYTE PTR [ecx+0x7e0d0068]
    2c20:	2a 00                	sub    al,BYTE PTR [eax]
    2c22:	9f                   	lahf   
    2c23:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    2c26:	00 0b                	add    BYTE PTR [ebx],cl
    2c28:	66                   	data16
    2c29:	00 01                	add    BYTE PTR [ecx],al
    2c2b:	33 8c 00 00 00 02 91 	xor    ecx,DWORD PTR [eax+eax*1-0x6efe0000]
    2c32:	64 0b 74 00 01       	or     esi,DWORD PTR fs:[eax+eax*1+0x1]
    2c37:	34 74                	xor    al,0x74
    2c39:	00 00                	add    BYTE PTR [eax],al
    2c3b:	00 02                	add    BYTE PTR [edx],al
    2c3d:	91                   	xchg   ecx,eax
    2c3e:	60                   	pusha  
    2c3f:	00 00                	add    BYTE PTR [eax],al
    2c41:	05 04 79 01 00       	add    eax,0x17904
    2c46:	00 0e                	add    BYTE PTR [esi],cl
    2c48:	02 01                	add    al,BYTE PTR [ecx]
    2c4a:	02 e8                	add    ch,al
    2c4c:	06                   	push   es
    2c4d:	00 00                	add    BYTE PTR [eax],al
    2c4f:	05 04 87 01 00       	add    eax,0x18704
    2c54:	00 07                	add    BYTE PTR [edi],al
    2c56:	81 00 00 00 05 04    	add    DWORD PTR [eax],0x4050000
    2c5c:	81 00 00 00 0f 41    	add    DWORD PTR [eax],0x410f0000
    2c62:	0c 00                	or     al,0x0
    2c64:	00 01                	add    BYTE PTR [ecx],al
    2c66:	42                   	inc    edx
    2c67:	72 00                	jb     2c69 <sysEnter_Vector-0x12d397>
    2c69:	00 00                	add    BYTE PTR [eax],al
    2c6b:	eb 2a                	jmp    2c97 <sysEnter_Vector-0x12d369>
    2c6d:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    2c73:	01 9c d4 01 00 00 09 	add    DWORD PTR [esp+edx*8+0x9000001],ebx
    2c7a:	3c 0c                	cmp    al,0xc
    2c7c:	00 00                	add    BYTE PTR [eax],al
    2c7e:	01 42 72             	add    DWORD PTR [edx+0x72],eax
    2c81:	00 00                	add    BYTE PTR [eax],al
    2c83:	00 02                	add    BYTE PTR [edx],al
    2c85:	91                   	xchg   ecx,eax
    2c86:	00 0a                	add    BYTE PTR [edx],cl
    2c88:	73 72                	jae    2cfc <sysEnter_Vector-0x12d304>
    2c8a:	63 00                	arpl   WORD PTR [eax],ax
    2c8c:	01 42 73             	add    DWORD PTR [edx+0x73],eax
    2c8f:	01 00                	add    DWORD PTR [eax],eax
    2c91:	00 02                	add    BYTE PTR [edx],al
    2c93:	91                   	xchg   ecx,eax
    2c94:	04 0a                	add    al,0xa
    2c96:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2c97:	00 01                	add    BYTE PTR [ecx],al
    2c99:	42                   	inc    edx
    2c9a:	97                   	xchg   edi,eax
    2c9b:	00 00                	add    BYTE PTR [eax],al
    2c9d:	00 02                	add    BYTE PTR [edx],al
    2c9f:	91                   	xchg   ecx,eax
    2ca0:	08 00                	or     BYTE PTR [eax],al
    2ca2:	10 78 00             	adc    BYTE PTR [eax+0x0],bh
    2ca5:	00 00                	add    BYTE PTR [eax],al
    2ca7:	04 33                	add    al,0x33
    2ca9:	e5 01                	in     eax,0x1
    2cab:	00 00                	add    BYTE PTR [eax],al
    2cad:	05 03 20 92 00       	add    eax,0x922003
    2cb2:	9f                   	lahf   
    2cb3:	05 04 74 00 00       	add    eax,0x7404
    2cb8:	00 00                	add    BYTE PTR [eax],al
    2cba:	a0 01 00 00 04       	mov    al,ds:0x4000001
    2cbf:	00 24 0c             	add    BYTE PTR [esp+ecx*1],ah
    2cc2:	00 00                	add    BYTE PTR [eax],al
    2cc4:	04 01                	add    al,0x1
    2cc6:	c3                   	ret    
    2cc7:	00 00                	add    BYTE PTR [eax],al
    2cc9:	00 0c 55 0c 00 00 4d 	add    BYTE PTR [edx*2+0x4d00000c],cl
    2cd0:	00 00                	add    BYTE PTR [eax],al
    2cd2:	00 0c 2b             	add    BYTE PTR [ebx+ebp*1],cl
    2cd5:	00 9f e7 00 00 00    	add    BYTE PTR [edi+0xe7],bl
    2cdb:	aa                   	stos   BYTE PTR es:[edi],al
    2cdc:	0d 00 00 02 01       	or     eax,0x1020000
    2ce1:	08 3f                	or     BYTE PTR [edi],bh
    2ce3:	00 00                	add    BYTE PTR [eax],al
    2ce5:	00 02                	add    BYTE PTR [edx],al
    2ce7:	02 07                	add    al,BYTE PTR [edi]
    2ce9:	0e                   	push   cs
    2cea:	00 00                	add    BYTE PTR [eax],al
    2cec:	00 02                	add    BYTE PTR [edx],al
    2cee:	04 07                	add    al,0x7
    2cf0:	32 00                	xor    al,BYTE PTR [eax]
    2cf2:	00 00                	add    BYTE PTR [eax],al
    2cf4:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2cf7:	2d 00 00 00 02       	sub    eax,0x2000000
    2cfc:	01 06                	add    DWORD PTR [esi],eax
    2cfe:	41                   	inc    ecx
    2cff:	00 00                	add    BYTE PTR [eax],al
    2d01:	00 02                	add    BYTE PTR [edx],al
    2d03:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    2d09:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2d10:	02 08                	add    cl,BYTE PTR [eax]
    2d12:	05 00 00 00 00       	add    eax,0x0
    2d17:	02 08                	add    cl,BYTE PTR [eax]
    2d19:	07                   	pop    es
    2d1a:	28 00                	sub    BYTE PTR [eax],al
    2d1c:	00 00                	add    BYTE PTR [eax],al
    2d1e:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2d25:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2d28:	2a 01                	sub    al,BYTE PTR [ecx]
    2d2a:	00 00                	add    BYTE PTR [eax],al
    2d2c:	04 04                	add    al,0x4
    2d2e:	05 04 7a 00 00       	add    eax,0x7a04
    2d33:	00 02                	add    BYTE PTR [edx],al
    2d35:	01 06                	add    DWORD PTR [esi],eax
    2d37:	48                   	dec    eax
    2d38:	00 00                	add    BYTE PTR [eax],al
    2d3a:	00 06                	add    BYTE PTR [esi],al
    2d3c:	4d                   	dec    ebp
    2d3d:	07                   	pop    es
    2d3e:	00 00                	add    BYTE PTR [eax],al
    2d40:	02 2e                	add    ch,BYTE PTR [esi]
    2d42:	25 00 00 00 06       	and    eax,0x6000000
    2d47:	07                   	pop    es
    2d48:	06                   	push   es
    2d49:	00 00                	add    BYTE PTR [eax],al
    2d4b:	02 31                	add    dh,BYTE PTR [ecx]
    2d4d:	2c 00                	sub    al,0x0
    2d4f:	00 00                	add    BYTE PTR [eax],al
    2d51:	06                   	push   es
    2d52:	45                   	inc    ebp
    2d53:	02 00                	add    al,BYTE PTR [eax]
    2d55:	00 02                	add    BYTE PTR [edx],al
    2d57:	34 33                	xor    al,0x33
    2d59:	00 00                	add    BYTE PTR [eax],al
    2d5b:	00 06                	add    BYTE PTR [esi],al
    2d5d:	91                   	xchg   ecx,eax
    2d5e:	02 00                	add    al,BYTE PTR [eax]
    2d60:	00 03                	add    BYTE PTR [ebx],al
    2d62:	d8 33                	fdiv   DWORD PTR [ebx]
    2d64:	00 00                	add    BYTE PTR [eax],al
    2d66:	00 02                	add    BYTE PTR [edx],al
    2d68:	0c 04                	or     al,0x4
    2d6a:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2d6b:	00 00                	add    BYTE PTR [eax],al
    2d6d:	00 07                	add    BYTE PTR [edi],al
    2d6f:	69 0c 00 00 01 08 72 	imul   ecx,DWORD PTR [eax+eax*1],0x72080100
    2d76:	00 00                	add    BYTE PTR [eax],al
    2d78:	00 0c 2b             	add    BYTE PTR [ebx+ebp*1],cl
    2d7b:	00 9f c7 00 00 00    	add    BYTE PTR [edi+0xc7],bl
    2d81:	01 9c 37 01 00 00 08 	add    DWORD PTR [edi+esi*1+0x8000001],ebx
    2d88:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    2d8b:	01 08                	add    DWORD PTR [eax],ecx
    2d8d:	72 00                	jb     2d8f <sysEnter_Vector-0x12d271>
    2d8f:	00 00                	add    BYTE PTR [eax],al
    2d91:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    2d97:	6c                   	ins    BYTE PTR es:[edi],dx
    2d98:	00 01                	add    BYTE PTR [ecx],al
    2d9a:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
    2d9d:	00 00                	add    BYTE PTR [eax],al
    2d9f:	02 91 04 08 6c 65    	add    dl,BYTE PTR [ecx+0x656c0804]
    2da5:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2da6:	00 01                	add    BYTE PTR [ecx],al
    2da8:	08 a2 00 00 00 02    	or     BYTE PTR [edx+0x2000000],ah
    2dae:	91                   	xchg   ecx,eax
    2daf:	08 09                	or     BYTE PTR [ecx],cl
    2db1:	64 00 01             	add    BYTE PTR fs:[ecx],al
    2db4:	0a 37                	or     dh,BYTE PTR [edi]
    2db6:	01 00                	add    DWORD PTR [eax],eax
    2db8:	00 02                	add    BYTE PTR [edx],al
    2dba:	91                   	xchg   ecx,eax
    2dbb:	74 09                	je     2dc6 <sysEnter_Vector-0x12d23a>
    2dbd:	65 00 01             	add    BYTE PTR gs:[ecx],al
    2dc0:	0b 3d 01 00 00 02    	or     edi,DWORD PTR ds:0x2000001
    2dc6:	91                   	xchg   ecx,eax
    2dc7:	70 0a                	jo     2dd3 <sysEnter_Vector-0x12d22d>
    2dc9:	71 0c                	jno    2dd7 <sysEnter_Vector-0x12d229>
    2dcb:	00 00                	add    BYTE PTR [eax],al
    2dcd:	01 0c 8c             	add    DWORD PTR [esp+ecx*4],ecx
    2dd0:	00 00                	add    BYTE PTR [eax],al
    2dd2:	00 02                	add    BYTE PTR [edx],al
    2dd4:	91                   	xchg   ecx,eax
    2dd5:	6a 09                	push   0x9
    2dd7:	66                   	data16
    2dd8:	00 01                	add    BYTE PTR [ecx],al
    2dda:	0d 43 01 00 00       	or     eax,0x143
    2ddf:	02 91 6c 0a 76 0c    	add    dl,BYTE PTR [ecx+0xc760a6c]
    2de5:	00 00                	add    BYTE PTR [eax],al
    2de7:	01 0e                	add    DWORD PTR [esi],ecx
    2de9:	97                   	xchg   edi,eax
    2dea:	00 00                	add    BYTE PTR [eax],al
    2dec:	00 02                	add    BYTE PTR [edx],al
    2dee:	91                   	xchg   ecx,eax
    2def:	64 00 05 04 81 00 00 	add    BYTE PTR fs:0x8104,al
    2df6:	00 05 04 8c 00 00    	add    BYTE PTR ds:0x8c04,al
    2dfc:	00 05 04 97 00 00    	add    BYTE PTR ds:0x9704,al
    2e02:	00 0b                	add    BYTE PTR [ebx],cl
    2e04:	62 0c 00             	bound  ecx,QWORD PTR [eax+eax*1]
    2e07:	00 01                	add    BYTE PTR [ecx],al
    2e09:	1f                   	pop    ds
    2e0a:	72 00                	jb     2e0c <sysEnter_Vector-0x12d1f4>
    2e0c:	00 00                	add    BYTE PTR [eax],al
    2e0e:	d3 2b                	shr    DWORD PTR [ebx],cl
    2e10:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    2e16:	01 9c 8c 01 00 00 08 	add    DWORD PTR [esp+ecx*4+0x8000001],ebx
    2e1d:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    2e20:	01 1f                	add    DWORD PTR [edi],ebx
    2e22:	72 00                	jb     2e24 <sysEnter_Vector-0x12d1dc>
    2e24:	00 00                	add    BYTE PTR [eax],al
    2e26:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    2e2c:	6c                   	ins    BYTE PTR es:[edi],dx
    2e2d:	00 01                	add    BYTE PTR [ecx],al
    2e2f:	1f                   	pop    ds
    2e30:	4f                   	dec    edi
    2e31:	00 00                	add    BYTE PTR [eax],al
    2e33:	00 02                	add    BYTE PTR [edx],al
    2e35:	91                   	xchg   ecx,eax
    2e36:	04 08                	add    al,0x8
    2e38:	6c                   	ins    BYTE PTR es:[edi],dx
    2e39:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    2e3b:	00 01                	add    BYTE PTR [ecx],al
    2e3d:	1f                   	pop    ds
    2e3e:	a2 00 00 00 02       	mov    ds:0x2000000,al
    2e43:	91                   	xchg   ecx,eax
    2e44:	08 00                	or     BYTE PTR [eax],al
    2e46:	0c 78                	or     al,0x78
    2e48:	00 00                	add    BYTE PTR [eax],al
    2e4a:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    2e4d:	9d                   	popf   
    2e4e:	01 00                	add    DWORD PTR [eax],eax
    2e50:	00 05 03 20 92 00    	add    BYTE PTR ds:0x922003,al
    2e56:	9f                   	lahf   
    2e57:	05 04 74 00 00       	add    eax,0x7404
    2e5c:	00 00                	add    BYTE PTR [eax],al
    2e5e:	54                   	push   esp
    2e5f:	00 00                	add    BYTE PTR [eax],al
    2e61:	00 02                	add    BYTE PTR [edx],al
    2e63:	00 e1                	add    cl,ah
    2e65:	0c 00                	or     al,0x0
    2e67:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2e6a:	68 0e 00 00 f4       	push   0xf400000e
    2e6f:	2b 00                	sub    eax,DWORD PTR [eax]
    2e71:	9f                   	lahf   
    2e72:	29 2c 00             	sub    DWORD PTR [eax+eax*1],ebp
    2e75:	9f                   	lahf   
    2e76:	73 72                	jae    2eea <sysEnter_Vector-0x12d116>
    2e78:	63 2f                	arpl   WORD PTR [edi],bp
    2e7a:	6d                   	ins    DWORD PTR es:[edi],dx
    2e7b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2e7c:	64                   	fs
    2e7d:	66                   	data16
    2e7e:	2e                   	cs
    2e7f:	61                   	popa   
    2e80:	73 6d                	jae    2eef <sysEnter_Vector-0x12d111>
    2e82:	00 2f                	add    BYTE PTR [edi],ch
    2e84:	68 6f 6d 65 2f       	push   0x2f656d6f
    2e89:	79 6f                	jns    2efa <sysEnter_Vector-0x12d106>
    2e8b:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
    2e92:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2e93:	73 2f                	jae    2ec4 <sysEnter_Vector-0x12d13c>
    2e95:	61                   	popa   
    2e96:	70 72                	jo     2f0a <sysEnter_Vector-0x12d0f6>
    2e98:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2e99:	6a 2f                	push   0x2f
    2e9b:	6c                   	ins    BYTE PTR es:[edi],dx
    2e9c:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    2ea3:	4f                   	dec    edi
    2ea4:	53                   	push   ebx
    2ea5:	00 47 4e             	add    BYTE PTR [edi+0x4e],al
    2ea8:	55                   	push   ebp
    2ea9:	20 41 53             	and    BYTE PTR [ecx+0x53],al
    2eac:	20 32                	and    BYTE PTR [edx],dh
    2eae:	2e 32 33             	xor    dh,BYTE PTR cs:[ebx]
    2eb1:	2e 31 00             	xor    DWORD PTR cs:[eax],eax
    2eb4:	01 80 18 02 00 00    	add    DWORD PTR [eax+0x218],eax
    2eba:	04 00                	add    al,0x0
    2ebc:	f5                   	cmc    
    2ebd:	0c 00                	or     al,0x0
    2ebf:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2ec2:	c3                   	ret    
    2ec3:	00 00                	add    BYTE PTR [eax],al
    2ec5:	00 0c 91             	add    BYTE PTR [ecx+edx*4],cl
    2ec8:	0c 00                	or     al,0x0
    2eca:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    2ecd:	00 00                	add    BYTE PTR [eax],al
    2ecf:	2c 2c                	sub    al,0x2c
    2ed1:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    2ed7:	bd 0e 00 00 02       	mov    ebp,0x200000e
    2edc:	01 08                	add    DWORD PTR [eax],ecx
    2ede:	3f                   	aas    
    2edf:	00 00                	add    BYTE PTR [eax],al
    2ee1:	00 02                	add    BYTE PTR [edx],al
    2ee3:	02 07                	add    al,BYTE PTR [edi]
    2ee5:	0e                   	push   cs
    2ee6:	00 00                	add    BYTE PTR [eax],al
    2ee8:	00 02                	add    BYTE PTR [edx],al
    2eea:	04 07                	add    al,0x7
    2eec:	32 00                	xor    al,BYTE PTR [eax]
    2eee:	00 00                	add    BYTE PTR [eax],al
    2ef0:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2ef3:	2d 00 00 00 02       	sub    eax,0x2000000
    2ef8:	01 06                	add    DWORD PTR [esi],eax
    2efa:	41                   	inc    ecx
    2efb:	00 00                	add    BYTE PTR [eax],al
    2efd:	00 02                	add    BYTE PTR [edx],al
    2eff:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    2f05:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2f0c:	02 08                	add    cl,BYTE PTR [eax]
    2f0e:	05 00 00 00 00       	add    eax,0x0
    2f13:	02 08                	add    cl,BYTE PTR [eax]
    2f15:	07                   	pop    es
    2f16:	28 00                	sub    BYTE PTR [eax],al
    2f18:	00 00                	add    BYTE PTR [eax],al
    2f1a:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2f21:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2f24:	2a 01                	sub    al,BYTE PTR [ecx]
    2f26:	00 00                	add    BYTE PTR [eax],al
    2f28:	04 04                	add    al,0x4
    2f2a:	78 00                	js     2f2c <sysEnter_Vector-0x12d0d4>
    2f2c:	00 00                	add    BYTE PTR [eax],al
    2f2e:	02 01                	add    al,BYTE PTR [ecx]
    2f30:	06                   	push   es
    2f31:	48                   	dec    eax
    2f32:	00 00                	add    BYTE PTR [eax],al
    2f34:	00 05 01 02 00 00    	add    BYTE PTR ds:0x201,al
    2f3a:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
    2f3d:	00 00                	add    BYTE PTR [eax],al
    2f3f:	00 02                	add    BYTE PTR [edx],al
    2f41:	0c 04                	or     al,0x4
    2f43:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2f44:	00 00                	add    BYTE PTR [eax],al
    2f46:	00 06                	add    BYTE PTR [esi],al
    2f48:	a0 03 00 00 04       	mov    al,ds:0x4000003
    2f4d:	33 00                	xor    eax,DWORD PTR [eax]
    2f4f:	00 00                	add    BYTE PTR [eax],al
    2f51:	03 15 92 01 00 00    	add    edx,DWORD PTR ds:0x192
    2f57:	07                   	pop    es
    2f58:	51                   	push   ecx
    2f59:	04 00                	add    al,0x0
    2f5b:	00 00                	add    BYTE PTR [eax],al
    2f5d:	07                   	pop    es
    2f5e:	96                   	xchg   esi,eax
    2f5f:	04 00                	add    al,0x0
    2f61:	00 01                	add    BYTE PTR [ecx],al
    2f63:	07                   	pop    es
    2f64:	84 02                	test   BYTE PTR [edx],al
    2f66:	00 00                	add    BYTE PTR [eax],al
    2f68:	02 07                	add    al,BYTE PTR [edi]
    2f6a:	83 03 00             	add    DWORD PTR [ebx],0x0
    2f6d:	00 03                	add    BYTE PTR [ebx],al
    2f6f:	07                   	pop    es
    2f70:	6a 02                	push   0x2
    2f72:	00 00                	add    BYTE PTR [eax],al
    2f74:	04 07                	add    al,0x7
    2f76:	da 04 00             	fiadd  DWORD PTR [eax+eax*1]
    2f79:	00 05 07 78 04 00    	add    BYTE PTR ds:0x47807,al
    2f7f:	00 0a                	add    BYTE PTR [edx],cl
    2f81:	07                   	pop    es
    2f82:	c4 03                	les    eax,FWORD PTR [ebx]
    2f84:	00 00                	add    BYTE PTR [eax],al
    2f86:	0b 07                	or     eax,DWORD PTR [edi]
    2f88:	2a 04 00             	sub    al,BYTE PTR [eax+eax*1]
    2f8b:	00 0c 07             	add    BYTE PTR [edi+eax*1],cl
    2f8e:	91                   	xchg   ecx,eax
    2f8f:	03 00                	add    eax,DWORD PTR [eax]
    2f91:	00 0d 07 aa 03 00    	add    BYTE PTR ds:0x3aa07,cl
    2f97:	00 0e                	add    BYTE PTR [esi],cl
    2f99:	07                   	pop    es
    2f9a:	77 02                	ja     2f9e <sysEnter_Vector-0x12d062>
    2f9c:	00 00                	add    BYTE PTR [eax],al
    2f9e:	0f 07                	sysret 
    2fa0:	f4                   	hlt    
    2fa1:	03 00                	add    eax,DWORD PTR [eax]
    2fa3:	00 10                	add    BYTE PTR [eax],dl
    2fa5:	07                   	pop    es
    2fa6:	27                   	daa    
    2fa7:	05 00 00 11 07       	add    eax,0x7110000
    2fac:	05 05 00 00 4f       	add    eax,0x4f000005
    2fb1:	07                   	pop    es
    2fb2:	cb                   	retf   
    2fb3:	04 00                	add    al,0x0
    2fb5:	00 50 07             	add    BYTE PTR [eax+0x7],dl
    2fb8:	44                   	inc    esp
    2fb9:	04 00                	add    al,0x0
    2fbb:	00 59 07             	add    BYTE PTR [ecx+0x7],bl
    2fbe:	14 05                	adc    al,0x5
    2fc0:	00 00                	add    BYTE PTR [eax],al
    2fc2:	61                   	popa   
    2fc3:	07                   	pop    es
    2fc4:	49                   	dec    ecx
    2fc5:	03 00                	add    eax,DWORD PTR [eax]
    2fc7:	00 97 08 61 04 00    	add    BYTE PTR [edi+0x46108],dl
    2fcd:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    2fd0:	08 37                	or     BYTE PTR [edi],dh
    2fd2:	04 00                	add    al,0x0
    2fd4:	00 64 01 08          	add    BYTE PTR [ecx+eax*1+0x8],ah
    2fd8:	44                   	inc    esp
    2fd9:	05 00 00 65 01       	add    eax,0x1650000
    2fde:	08 25 03 00 00 66    	or     BYTE PTR ds:0x66000003,ah
    2fe4:	01 08                	add    DWORD PTR [eax],ecx
    2fe6:	56                   	push   esi
    2fe7:	05 00 00 67 01       	add    eax,0x1670000
    2fec:	08 b7 03 00 00 68    	or     BYTE PTR [edi+0x68000003],dh
    2ff2:	01 08                	add    DWORD PTR [eax],ecx
    2ff4:	d6                   	(bad)  
    2ff5:	02 00                	add    al,BYTE PTR [eax]
    2ff7:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    2ffa:	08 85 04 00 00 70    	or     BYTE PTR [ebp+0x70000004],al
    3000:	01 08                	add    DWORD PTR [eax],ecx
    3002:	39 03                	cmp    DWORD PTR [ebx],eax
    3004:	00 00                	add    BYTE PTR [eax],al
    3006:	71 01                	jno    3009 <sysEnter_Vector-0x12cff7>
    3008:	08 e8                	or     al,ch
    300a:	04 00                	add    al,0x0
    300c:	00 00                	add    BYTE PTR [eax],al
    300e:	03 08                	add    ecx,DWORD PTR [eax]
    3010:	d9 03                	fld    DWORD PTR [ebx]
    3012:	00 00                	add    BYTE PTR [eax],al
    3014:	01 03                	add    DWORD PTR [ebx],eax
    3016:	08 e8                	or     al,ch
    3018:	03 00                	add    eax,DWORD PTR [eax]
    301a:	00 02                	add    BYTE PTR [edx],al
    301c:	03 08                	add    ecx,DWORD PTR [eax]
    301e:	73 03                	jae    3023 <sysEnter_Vector-0x12cfdd>
    3020:	00 00                	add    BYTE PTR [eax],al
    3022:	03 03                	add    eax,DWORD PTR [ebx]
    3024:	08 b6 02 00 00 04    	or     BYTE PTR [esi+0x4000002],dh
    302a:	03 08                	add    ecx,DWORD PTR [eax]
    302c:	15 03 00 00 05       	adc    eax,0x5000003
    3031:	03 08                	add    ecx,DWORD PTR [eax]
    3033:	64 03 00             	add    eax,DWORD PTR fs:[eax]
    3036:	00 06                	add    BYTE PTR [esi],al
    3038:	03 08                	add    ecx,DWORD PTR [eax]
    303a:	b2 04                	mov    dl,0x4
    303c:	00 00                	add    BYTE PTR [eax],al
    303e:	07                   	pop    es
    303f:	03 08                	add    ecx,DWORD PTR [eax]
    3041:	01 04 00             	add    DWORD PTR [eax+eax*1],eax
    3044:	00 00                	add    BYTE PTR [eax],al
    3046:	09 00                	or     DWORD PTR [eax],eax
    3048:	09 8c 0c 00 00 01 0a 	or     DWORD PTR [esp+ecx*1+0xa010000],ecx
    304f:	4f                   	dec    edi
    3050:	00 00                	add    BYTE PTR [eax],al
    3052:	00 2c 2c             	add    BYTE PTR [esp+ebp*1],ch
    3055:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
    305b:	01 9c ba 01 00 00 0a 	add    DWORD PTR [edx+edi*4+0xa000001],ebx
    3062:	a0 0c 00 00 01       	mov    al,ds:0x100000c
    3067:	0a ba 01 00 00 02    	or     bh,BYTE PTR [edx+0x2000001]
    306d:	91                   	xchg   ecx,eax
    306e:	00 00                	add    BYTE PTR [eax],al
    3070:	04 04                	add    al,0x4
    3072:	4f                   	dec    edi
    3073:	00 00                	add    BYTE PTR [eax],al
    3075:	00 09                	add    BYTE PTR [ecx],cl
    3077:	81 0c 00 00 01 0f 4f 	or     DWORD PTR [eax+eax*1],0x4f0f0100
    307e:	00 00                	add    BYTE PTR [eax],al
    3080:	00 55 2c             	add    BYTE PTR [ebp+0x2c],dl
    3083:	00 9f 2e 00 00 00    	add    BYTE PTR [edi+0x2e],bl
    3089:	01 9c 04 02 00 00 0a 	add    DWORD PTR [esp+eax*1+0xa000002],ebx
    3090:	7b 0c                	jnp    309e <sysEnter_Vector-0x12cf62>
    3092:	00 00                	add    BYTE PTR [eax],al
    3094:	01 0f                	add    DWORD PTR [edi],ecx
    3096:	4f                   	dec    edi
    3097:	00 00                	add    BYTE PTR [eax],al
    3099:	00 02                	add    BYTE PTR [edx],al
    309b:	91                   	xchg   ecx,eax
    309c:	00 0a                	add    BYTE PTR [edx],cl
    309e:	86 0c 00             	xchg   BYTE PTR [eax+eax*1],cl
    30a1:	00 01                	add    BYTE PTR [ecx],al
    30a3:	0f 4f 00             	cmovg  eax,DWORD PTR [eax]
    30a6:	00 00                	add    BYTE PTR [eax],al
    30a8:	02 91 04 0a a4 0a    	add    dl,BYTE PTR [ecx+0xaa40a04]
    30ae:	00 00                	add    BYTE PTR [eax],al
    30b0:	01 0f                	add    DWORD PTR [edi],ecx
    30b2:	4f                   	dec    edi
    30b3:	00 00                	add    BYTE PTR [eax],al
    30b5:	00 02                	add    BYTE PTR [edx],al
    30b7:	91                   	xchg   ecx,eax
    30b8:	08 00                	or     BYTE PTR [eax],al
    30ba:	0b 78 00             	or     edi,DWORD PTR [eax+0x0]
    30bd:	00 00                	add    BYTE PTR [eax],al
    30bf:	04 33                	add    al,0x33
    30c1:	15 02 00 00 05       	adc    eax,0x5000002
    30c6:	03 20                	add    esp,DWORD PTR [eax]
    30c8:	92                   	xchg   edx,eax
    30c9:	00 9f 04 04 72 00    	add    BYTE PTR [edi+0x720404],bl
    30cf:	00 00                	add    BYTE PTR [eax],al
    30d1:	00 d7                	add    bh,dl
    30d3:	05 00 00 04 00       	add    eax,0x40000
    30d8:	94                   	xchg   esp,eax
    30d9:	0d 00 00 04 01       	or     eax,0x1040000
    30de:	c3                   	ret    
    30df:	00 00                	add    BYTE PTR [eax],al
    30e1:	00 0c a7             	add    BYTE PTR [edi+eiz*4],cl
    30e4:	0c 00                	or     al,0x0
    30e6:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    30e9:	00 00                	add    BYTE PTR [eax],al
    30eb:	84 2c 00             	test   BYTE PTR [eax+eax*1],ch
    30ee:	9f                   	lahf   
    30ef:	16                   	push   ss
    30f0:	06                   	push   es
    30f1:	00 00                	add    BYTE PTR [eax],al
    30f3:	a0 0f 00 00 02       	mov    al,ds:0x200000f
    30f8:	0a 0e                	or     cl,BYTE PTR [esi]
    30fa:	00 00                	add    BYTE PTR [eax],al
    30fc:	02 19                	add    bl,BYTE PTR [ecx]
    30fe:	30 00                	xor    BYTE PTR [eax],al
    3100:	00 00                	add    BYTE PTR [eax],al
    3102:	03 00                	add    eax,DWORD PTR [eax]
    3104:	0e                   	push   cs
    3105:	00 00                	add    BYTE PTR [eax],al
    3107:	8c 02                	mov    WORD PTR [edx],es
    3109:	1b fd                	sbb    edi,ebp
    310b:	00 00                	add    BYTE PTR [eax],al
    310d:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    3110:	69 64 00 02 1d fd 00 	imul   esp,DWORD PTR [eax+eax*1+0x2],0xfd1d
    3117:	00 
    3118:	00 00                	add    BYTE PTR [eax],al
    311a:	05 b3 06 00 00       	add    eax,0x6b3
    311f:	02 1e                	add    bl,BYTE PTR [esi]
    3121:	04 01                	add    al,0x1
    3123:	00 00                	add    BYTE PTR [eax],al
    3125:	04 05                	add    al,0x5
    3127:	34 0a                	xor    al,0xa
    3129:	00 00                	add    BYTE PTR [eax],al
    312b:	02 1f                	add    bl,BYTE PTR [edi]
    312d:	1b 01                	sbb    eax,DWORD PTR [ecx]
    312f:	00 00                	add    BYTE PTR [eax],al
    3131:	2c 05                	sub    al,0x5
    3133:	59                   	pop    ecx
    3134:	0e                   	push   cs
    3135:	00 00                	add    BYTE PTR [eax],al
    3137:	02 20                	add    ah,BYTE PTR [eax]
    3139:	fd                   	std    
    313a:	00 00                	add    BYTE PTR [eax],al
    313c:	00 30                	add    BYTE PTR [eax],dh
    313e:	04 74                	add    al,0x74
    3140:	74 79                	je     31bb <sysEnter_Vector-0x12ce45>
    3142:	00 02                	add    BYTE PTR [edx],al
    3144:	21 fd                	and    ebp,edi
    3146:	00 00                	add    BYTE PTR [eax],al
    3148:	00 34 05 43 0e 00 00 	add    BYTE PTR [eax*1+0xe43],dh
    314f:	02 22                	add    ah,BYTE PTR [edx]
    3151:	fd                   	std    
    3152:	00 00                	add    BYTE PTR [eax],al
    3154:	00 38                	add    BYTE PTR [eax],bh
    3156:	05 9d 0d 00 00       	add    eax,0xd9d
    315b:	02 23                	add    ah,BYTE PTR [ebx]
    315d:	fd                   	std    
    315e:	00 00                	add    BYTE PTR [eax],al
    3160:	00 3c 05 4f 0a 00 00 	add    BYTE PTR [eax*1+0xa4f],bh
    3167:	02 24 fd 00 00 00 40 	add    ah,BYTE PTR [edi*8+0x40000000]
    316e:	05 b1 0d 00 00       	add    eax,0xdb1
    3173:	02 24 fd 00 00 00 44 	add    ah,BYTE PTR [edi*8+0x44000000]
    317a:	05 79 0d 00 00       	add    eax,0xd79
    317f:	02 24 fd 00 00 00 48 	add    ah,BYTE PTR [edi*8+0x48000000]
    3186:	04 63                	add    al,0x63
    3188:	70 75                	jo     31ff <sysEnter_Vector-0x12ce01>
    318a:	00 02                	add    BYTE PTR [edx],al
    318c:	25 22 01 00 00       	and    eax,0x122
    3191:	4c                   	dec    esp
    3192:	05 fd 09 00 00       	add    eax,0x9fd
    3197:	02 26                	add    ah,BYTE PTR [esi]
    3199:	fd                   	std    
    319a:	00 00                	add    BYTE PTR [eax],al
    319c:	00 54 05 62          	add    BYTE PTR [ebp+eax*1+0x62],dl
    31a0:	0d 00 00 02 27       	or     eax,0x27020000
    31a5:	fd                   	std    
    31a6:	00 00                	add    BYTE PTR [eax],al
    31a8:	00 58 05             	add    BYTE PTR [eax+0x5],bl
    31ab:	6e                   	outs   dx,BYTE PTR ds:[esi]
    31ac:	0d 00 00 02 28       	or     eax,0x28020000
    31b1:	fd                   	std    
    31b2:	00 00                	add    BYTE PTR [eax],al
    31b4:	00 5c 05 de          	add    BYTE PTR [ebp+eax*1-0x22],bl
    31b8:	0c 00                	or     al,0x0
    31ba:	00 02                	add    BYTE PTR [edx],al
    31bc:	29 fd                	sub    ebp,edi
    31be:	00 00                	add    BYTE PTR [eax],al
    31c0:	00 60 05             	add    BYTE PTR [eax+0x5],ah
    31c3:	30 07                	xor    BYTE PTR [edi],al
    31c5:	00 00                	add    BYTE PTR [eax],al
    31c7:	02 2a                	add    ch,BYTE PTR [edx]
    31c9:	04 01                	add    al,0x1
    31cb:	00 00                	add    BYTE PTR [eax],al
    31cd:	64 00 06             	add    BYTE PTR fs:[esi],al
    31d0:	04 05                	add    al,0x5
    31d2:	69 6e 74 00 07 1b 01 	imul   ebp,DWORD PTR [esi+0x74],0x11b0700
    31d9:	00 00                	add    BYTE PTR [eax],al
    31db:	14 01                	adc    al,0x1
    31dd:	00 00                	add    BYTE PTR [eax],al
    31df:	08 14 01             	or     BYTE PTR [ecx+eax*1],dl
    31e2:	00 00                	add    BYTE PTR [eax],al
    31e4:	27                   	daa    
    31e5:	00 09                	add    BYTE PTR [ecx],cl
    31e7:	04 07                	add    al,0x7
    31e9:	2a 01                	sub    al,BYTE PTR [ecx]
    31eb:	00 00                	add    BYTE PTR [eax],al
    31ed:	09 01                	or     DWORD PTR [ecx],eax
    31ef:	06                   	push   es
    31f0:	48                   	dec    eax
    31f1:	00 00                	add    BYTE PTR [eax],al
    31f3:	00 09                	add    BYTE PTR [ecx],cl
    31f5:	08 04 b2             	or     BYTE PTR [edx+esi*4],al
    31f8:	00 00                	add    BYTE PTR [eax],al
    31fa:	00 09                	add    BYTE PTR [ecx],cl
    31fc:	01 08                	add    DWORD PTR [eax],ecx
    31fe:	3f                   	aas    
    31ff:	00 00                	add    BYTE PTR [eax],al
    3201:	00 09                	add    BYTE PTR [ecx],cl
    3203:	02 07                	add    al,BYTE PTR [edi]
    3205:	0e                   	push   cs
    3206:	00 00                	add    BYTE PTR [eax],al
    3208:	00 09                	add    BYTE PTR [ecx],cl
    320a:	04 07                	add    al,0x7
    320c:	32 00                	xor    al,BYTE PTR [eax]
    320e:	00 00                	add    BYTE PTR [eax],al
    3210:	09 04 07             	or     DWORD PTR [edi+eax*1],eax
    3213:	2d 00 00 00 09       	sub    eax,0x9000000
    3218:	01 06                	add    DWORD PTR [esi],eax
    321a:	41                   	inc    ecx
    321b:	00 00                	add    BYTE PTR [eax],al
    321d:	00 09                	add    BYTE PTR [ecx],cl
    321f:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    3225:	09 08                	or     DWORD PTR [eax],ecx
    3227:	05 00 00 00 00       	add    eax,0x0
    322c:	09 08                	or     DWORD PTR [eax],ecx
    322e:	07                   	pop    es
    322f:	28 00                	sub    BYTE PTR [eax],al
    3231:	00 00                	add    BYTE PTR [eax],al
    3233:	09 04 05 05 00 00 00 	or     DWORD PTR [eax*1+0x5],eax
    323a:	0a 04 1b             	or     al,BYTE PTR [ebx+ebx*1]
    323d:	01 00                	add    DWORD PTR [eax],eax
    323f:	00 02                	add    BYTE PTR [edx],al
    3241:	4d                   	dec    ebp
    3242:	07                   	pop    es
    3243:	00 00                	add    BYTE PTR [eax],al
    3245:	03 2e                	add    ebp,DWORD PTR [esi]
    3247:	29 01                	sub    DWORD PTR [ecx],eax
    3249:	00 00                	add    BYTE PTR [eax],al
    324b:	02 07                	add    al,BYTE PTR [edi]
    324d:	06                   	push   es
    324e:	00 00                	add    BYTE PTR [eax],al
    3250:	03 31                	add    esi,DWORD PTR [ecx]
    3252:	30 01                	xor    BYTE PTR [ecx],al
    3254:	00 00                	add    BYTE PTR [eax],al
    3256:	02 45 02             	add    al,BYTE PTR [ebp+0x2]
    3259:	00 00                	add    BYTE PTR [eax],al
    325b:	03 34 37             	add    esi,DWORD PTR [edi+esi*1]
    325e:	01 00                	add    DWORD PTR [eax],eax
    3260:	00 02                	add    BYTE PTR [edx],al
    3262:	01 02                	add    DWORD PTR [edx],eax
    3264:	00 00                	add    BYTE PTR [eax],al
    3266:	03 56 37             	add    edx,DWORD PTR [esi+0x37]
    3269:	01 00                	add    DWORD PTR [eax],eax
    326b:	00 09                	add    BYTE PTR [ecx],cl
    326d:	0c 04                	or     al,0x4
    326f:	ad                   	lods   eax,DWORD PTR ds:[esi]
    3270:	00 00                	add    BYTE PTR [eax],al
    3272:	00 02                	add    BYTE PTR [edx],al
    3274:	bb 0d 00 00 04       	mov    ebx,0x400000d
    3279:	2a 61 01             	sub    ah,BYTE PTR [ecx+0x1]
    327c:	00 00                	add    BYTE PTR [eax],al
    327e:	0b 74 6d 00          	or     esi,DWORD PTR [ebp+ebp*2+0x0]
    3282:	2c 04                	sub    al,0x4
    3284:	2c 3c                	sub    al,0x3c
    3286:	02 00                	add    al,BYTE PTR [eax]
    3288:	00 05 3c 0e 00 00    	add    BYTE PTR ds:0xe3c,al
    328e:	04 2e                	add    al,0x2e
    3290:	fd                   	std    
    3291:	00 00                	add    BYTE PTR [eax],al
    3293:	00 00                	add    BYTE PTR [eax],al
    3295:	05 8e 0d 00 00       	add    eax,0xd8e
    329a:	04 2f                	add    al,0x2f
    329c:	fd                   	std    
    329d:	00 00                	add    BYTE PTR [eax],al
    329f:	00 04 05 b6 0c 00 00 	add    BYTE PTR [eax*1+0xcb6],al
    32a6:	04 30                	add    al,0x30
    32a8:	fd                   	std    
    32a9:	00 00                	add    BYTE PTR [eax],al
    32ab:	00 08                	add    BYTE PTR [eax],cl
    32ad:	05 1d 0e 00 00       	add    eax,0xe1d
    32b2:	04 31                	add    al,0x31
    32b4:	fd                   	std    
    32b5:	00 00                	add    BYTE PTR [eax],al
    32b7:	00 0c 05 0c 0d 00 00 	add    BYTE PTR [eax*1+0xd0c],cl
    32be:	04 32                	add    al,0x32
    32c0:	fd                   	std    
    32c1:	00 00                	add    BYTE PTR [eax],al
    32c3:	00 10                	add    BYTE PTR [eax],dl
    32c5:	05 26 0d 00 00       	add    eax,0xd26
    32ca:	04 33                	add    al,0x33
    32cc:	fd                   	std    
    32cd:	00 00                	add    BYTE PTR [eax],al
    32cf:	00 14 05 15 0e 00 00 	add    BYTE PTR [eax*1+0xe15],dl
    32d6:	04 34                	add    al,0x34
    32d8:	fd                   	std    
    32d9:	00 00                	add    BYTE PTR [eax],al
    32db:	00 18                	add    BYTE PTR [eax],bl
    32dd:	05 95 0d 00 00       	add    eax,0xd95
    32e2:	04 35                	add    al,0x35
    32e4:	fd                   	std    
    32e5:	00 00                	add    BYTE PTR [eax],al
    32e7:	00 1c 05 59 0d 00 00 	add    BYTE PTR [eax*1+0xd59],bl
    32ee:	04 36                	add    al,0x36
    32f0:	fd                   	std    
    32f1:	00 00                	add    BYTE PTR [eax],al
    32f3:	00 20                	add    BYTE PTR [eax],ah
    32f5:	05 dc 0d 00 00       	add    eax,0xddc
    32fa:	04 37                	add    al,0x37
    32fc:	61                   	popa   
    32fd:	01 00                	add    DWORD PTR [eax],eax
    32ff:	00 24 05 cb 0c 00 00 	add    BYTE PTR [eax*1+0xccb],ah
    3306:	04 38                	add    al,0x38
    3308:	3c 02                	cmp    al,0x2
    330a:	00 00                	add    BYTE PTR [eax],al
    330c:	28 00                	sub    BYTE PTR [eax],al
    330e:	0a 04 42             	or     al,BYTE PTR [edx+eax*2]
    3311:	02 00                	add    al,BYTE PTR [eax]
    3313:	00 0c 1b             	add    BYTE PTR [ebx+ebx*1],cl
    3316:	01 00                	add    DWORD PTR [eax],eax
    3318:	00 0d f6 06 00 00    	add    BYTE PTR ds:0x6f6,cl
    331e:	17                   	pop    ss
    331f:	01 05 1f c9 02 00    	add    DWORD PTR ds:0x2c91f,eax
    3325:	00 05 af 06 00 00    	add    BYTE PTR ds:0x6af,al
    332b:	05 21 c9 02 00       	add    eax,0x2c921
    3330:	00 00                	add    BYTE PTR [eax],al
    3332:	0e                   	push   cs
    3333:	c8 06 00 00          	enter  0x6,0x0
    3337:	05 22 6e 01 00       	add    eax,0x16e22
    333c:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    333f:	0e                   	push   cs
    3340:	7f 06                	jg     3348 <sysEnter_Vector-0x12ccb8>
    3342:	00 00                	add    BYTE PTR [eax],al
    3344:	05 23 84 01 00       	add    eax,0x18423
    3349:	00 05 01 0e 58 07    	add    BYTE PTR ds:0x7580e01,al
    334f:	00 00                	add    BYTE PTR [eax],al
    3351:	05 24 84 01 00       	add    eax,0x18424
    3356:	00 09                	add    BYTE PTR [ecx],cl
    3358:	01 0e                	add    DWORD PTR [esi],ecx
    335a:	87 06                	xchg   DWORD PTR [esi],eax
    335c:	00 00                	add    BYTE PTR [eax],al
    335e:	05 25 79 01 00       	add    eax,0x17925
    3363:	00 0d 01 0e 9f 05    	add    BYTE PTR ds:0x59f0e01,cl
    3369:	00 00                	add    BYTE PTR [eax],al
    336b:	05 26 79 01 00       	add    eax,0x17926
    3370:	00 0f                	add    BYTE PTR [edi],cl
    3372:	01 0e                	add    DWORD PTR [esi],ecx
    3374:	10 06                	adc    BYTE PTR [esi],al
    3376:	00 00                	add    BYTE PTR [eax],al
    3378:	05 27 79 01 00       	add    eax,0x17927
    337d:	00 11                	add    BYTE PTR [ecx],dl
    337f:	01 0e                	add    DWORD PTR [esi],ecx
    3381:	f2 05 00 00 05 28    	repnz add eax,0x28050000
    3387:	79 01                	jns    338a <sysEnter_Vector-0x12cc76>
    3389:	00 00                	add    BYTE PTR [eax],al
    338b:	13 01                	adc    eax,DWORD PTR [ecx]
    338d:	0e                   	push   cs
    338e:	29 07                	sub    DWORD PTR [edi],eax
    3390:	00 00                	add    BYTE PTR [eax],al
    3392:	05 29 79 01 00       	add    eax,0x17929
    3397:	00 15 01 00 07 1b    	add    BYTE PTR ds:0x1b070001,dl
    339d:	01 00                	add    DWORD PTR [eax],eax
    339f:	00 da                	add    dl,bl
    33a1:	02 00                	add    al,BYTE PTR [eax]
    33a3:	00 0f                	add    BYTE PTR [edi],cl
    33a5:	14 01                	adc    al,0x1
    33a7:	00 00                	add    BYTE PTR [eax],al
    33a9:	03 01                	add    eax,DWORD PTR [ecx]
    33ab:	00 02                	add    BYTE PTR [edx],al
    33ad:	cf                   	iret   
    33ae:	06                   	push   es
    33af:	00 00                	add    BYTE PTR [eax],al
    33b1:	05 32 47 02 00       	add    eax,0x24732
    33b6:	00 09                	add    BYTE PTR [ecx],cl
    33b8:	01 02                	add    DWORD PTR [edx],eax
    33ba:	e8 06 00 00 10       	call   100033c5 <sysEnter_Vector+0xfed33c5>
    33bf:	49                   	dec    ecx
    33c0:	0d 00 00 01 10       	or     eax,0x10010000
    33c5:	bf 03 00 00 84       	mov    edi,0x84000003
    33ca:	2c 00                	sub    al,0x0
    33cc:	9f                   	lahf   
    33cd:	79 03                	jns    33d2 <sysEnter_Vector-0x12cc2e>
    33cf:	00 00                	add    BYTE PTR [eax],al
    33d1:	01 9c bf 03 00 00 11 	add    DWORD PTR [edi+edi*4+0x11000003],ebx
    33d8:	a2 0e 00 00 01       	mov    ds:0x100000e,al
    33dd:	10 bf 03 00 00 02    	adc    BYTE PTR [edi+0x2000003],bh
    33e3:	91                   	xchg   ecx,eax
    33e4:	00 11                	add    BYTE PTR [ecx],dl
    33e6:	38 0d 00 00 01 10    	cmp    BYTE PTR ds:0x10010000,cl
    33ec:	68 01 00 00 02       	push   0x2000001
    33f1:	91                   	xchg   ecx,eax
    33f2:	04 11                	add    al,0x11
    33f4:	25 0e 00 00 01       	and    eax,0x100000e
    33f9:	10 fd                	adc    ch,bh
    33fb:	00 00                	add    BYTE PTR [eax],al
    33fd:	00 02                	add    BYTE PTR [edx],al
    33ff:	91                   	xchg   ecx,eax
    3400:	08 12                	or     BYTE PTR [edx],dl
    3402:	7c 01                	jl     3405 <sysEnter_Vector-0x12cbfb>
    3404:	00 00                	add    BYTE PTR [eax],al
    3406:	01 12                	add    DWORD PTR [edx],edx
    3408:	c5 03                	lds    eax,FWORD PTR [ebx]
    340a:	00 00                	add    BYTE PTR [eax],al
    340c:	02 91 60 12 e2 06    	add    dl,BYTE PTR [ecx+0x6e21260]
    3412:	00 00                	add    BYTE PTR [eax],al
    3414:	01 13                	add    DWORD PTR [ebx],edx
    3416:	68 01 00 00 02       	push   0x2000001
    341b:	91                   	xchg   ecx,eax
    341c:	6c                   	ins    BYTE PTR es:[edi],dx
    341d:	12 e6                	adc    ah,dh
    341f:	0d 00 00 01 14       	or     eax,0x14010000
    3424:	fd                   	std    
    3425:	00 00                	add    BYTE PTR [eax],al
    3427:	00 02                	add    BYTE PTR [edx],al
    3429:	91                   	xchg   ecx,eax
    342a:	68 13 70 69 64       	push   0x64697013
    342f:	00 01                	add    BYTE PTR [ecx],al
    3431:	15 fd 00 00 00       	adc    eax,0xfd
    3436:	02 91 64 12 b3 06    	add    dl,BYTE PTR [ecx+0x6b31264]
    343c:	00 00                	add    BYTE PTR [eax],al
    343e:	01 16                	add    DWORD PTR [esi],edx
    3440:	d5 03                	aad    0x3
    3442:	00 00                	add    BYTE PTR [eax],al
    3444:	03 91 fc 7e 12 c2    	add    edx,DWORD PTR [ecx-0x3ded8104]
    344a:	0d 00 00 01 16       	or     eax,0x16010000
    344f:	d5 03                	aad    0x3
    3451:	00 00                	add    BYTE PTR [eax],al
    3453:	03 91 98 7e 12 c8    	add    edx,DWORD PTR [ecx-0x37ed8168]
    3459:	0d 00 00 01 16       	or     eax,0x16010000
    345e:	d5 03                	aad    0x3
    3460:	00 00                	add    BYTE PTR [eax],al
    3462:	03 91 b4 7d 12 3b    	add    edx,DWORD PTR [ecx+0x3b127db4]
    3468:	0d 00 00 01 17       	or     eax,0x17010000
    346d:	ac                   	lods   al,BYTE PTR ds:[esi]
    346e:	01 00                	add    DWORD PTR [eax],eax
    3470:	00 05 03 80 92 00    	add    BYTE PTR ds:0x928003,al
    3476:	9f                   	lahf   
    3477:	14 25                	adc    al,0x25
    3479:	2d 00 9f ac 02       	sub    eax,0x2ac9f00
    347e:	00 00                	add    BYTE PTR [eax],al
    3480:	12 be 0c 00 00 01    	adc    bh,BYTE PTR [esi+0x100000c]
    3486:	45                   	inc    ebp
    3487:	a1 01 00 00 03       	mov    eax,ds:0x3000001
    348c:	91                   	xchg   ecx,eax
    348d:	b0 7d                	mov    al,0x7d
    348f:	00 00                	add    BYTE PTR [eax],al
    3491:	0a 04 25 00 00 00 07 	or     al,BYTE PTR [eiz*1+0x7000000]
    3498:	1b 01                	sbb    eax,DWORD PTR [ecx]
    349a:	00 00                	add    BYTE PTR [eax],al
    349c:	d5 03                	aad    0x3
    349e:	00 00                	add    BYTE PTR [eax],al
    34a0:	08 14 01             	or     BYTE PTR [ecx+eax*1],dl
    34a3:	00 00                	add    BYTE PTR [eax],al
    34a5:	03 00                	add    eax,DWORD PTR [eax]
    34a7:	07                   	pop    es
    34a8:	1b 01                	sbb    eax,DWORD PTR [ecx]
    34aa:	00 00                	add    BYTE PTR [eax],al
    34ac:	e5 03                	in     eax,0x3
    34ae:	00 00                	add    BYTE PTR [eax],al
    34b0:	08 14 01             	or     BYTE PTR [ecx+eax*1],dl
    34b3:	00 00                	add    BYTE PTR [eax],al
    34b5:	63 00                	arpl   WORD PTR [eax],ax
    34b7:	10 fd                	adc    ch,bh
    34b9:	0c 00                	or     al,0x0
    34bb:	00 01                	add    BYTE PTR [ecx],al
    34bd:	5e                   	pop    esi
    34be:	bf 03 00 00 fd       	mov    edi,0xfd000003
    34c3:	2f                   	das    
    34c4:	00 9f 25 00 00 00    	add    BYTE PTR [edi+0x25],bl
    34ca:	01 9c 1b 04 00 00 11 	add    DWORD PTR [ebx+ebx*1+0x11000004],ebx
    34d1:	a2 0e 00 00 01       	mov    ds:0x100000e,al
    34d6:	5e                   	pop    esi
    34d7:	bf 03 00 00 02       	mov    edi,0x2000003
    34dc:	91                   	xchg   ecx,eax
    34dd:	00 11                	add    BYTE PTR [ecx],dl
    34df:	38 0d 00 00 01 5e    	cmp    BYTE PTR ds:0x5e010000,cl
    34e5:	68 01 00 00 02       	push   0x2000001
    34ea:	91                   	xchg   ecx,eax
    34eb:	04 00                	add    al,0x0
    34ed:	15 13 0d 00 00       	adc    eax,0xd13
    34f2:	01 63 22             	add    DWORD PTR [ebx+0x22],esp
    34f5:	30 00                	xor    BYTE PTR [eax],al
    34f7:	9f                   	lahf   
    34f8:	78 02                	js     34fc <sysEnter_Vector-0x12cb04>
    34fa:	00 00                	add    BYTE PTR [eax],al
    34fc:	01 9c 4d 05 00 00 11 	add    DWORD PTR [ebp+ecx*2+0x11000005],ebx
    3503:	41                   	inc    ecx
    3504:	0d 00 00 01 63       	or     eax,0x63010000
    3509:	4d                   	dec    ebp
    350a:	05 00 00 02 91       	add    eax,0x91020000
    350f:	00 11                	add    BYTE PTR [ecx],dl
    3511:	f2 0d 00 00 01 63    	repnz or eax,0x63010000
    3517:	fd                   	std    
    3518:	00 00                	add    BYTE PTR [eax],al
    351a:	00 02                	add    BYTE PTR [edx],al
    351c:	91                   	xchg   ecx,eax
    351d:	04 11                	add    al,0x11
    351f:	2e                   	cs
    3520:	0d 00 00 01 63       	or     eax,0x63010000
    3525:	fd                   	std    
    3526:	00 00                	add    BYTE PTR [eax],al
    3528:	00 02                	add    BYTE PTR [edx],al
    352a:	91                   	xchg   ecx,eax
    352b:	08 11                	or     BYTE PTR [ecx],dl
    352d:	a9 0d 00 00 01       	test   eax,0x100000d
    3532:	63 53 05             	arpl   WORD PTR [ebx+0x5],dx
    3535:	00 00                	add    BYTE PTR [eax],al
    3537:	02 91 0c 11 4f 0e    	add    dl,BYTE PTR [ecx+0xe4f110c]
    353d:	00 00                	add    BYTE PTR [eax],al
    353f:	01 63 53             	add    DWORD PTR [ebx+0x53],esp
    3542:	05 00 00 02 91       	add    eax,0x91020000
    3547:	10 12                	adc    BYTE PTR [edx],dl
    3549:	f2 0c 00             	repnz or al,0x0
    354c:	00 01                	add    BYTE PTR [ecx],al
    354e:	65                   	gs
    354f:	59                   	pop    ecx
    3550:	05 00 00 05 03       	add    eax,0x3050000
    3555:	ac                   	lods   al,BYTE PTR ds:[esi]
    3556:	92                   	xchg   edx,eax
    3557:	00 9f 12 9a 05 00    	add    BYTE PTR [edi+0x59a12],bl
    355d:	00 01                	add    BYTE PTR [ecx],al
    355f:	6c                   	ins    BYTE PTR es:[edi],dx
    3560:	5f                   	pop    edi
    3561:	05 00 00 03 91       	add    eax,0x91030000
    3566:	d0 7e 12             	sar    BYTE PTR [esi+0x12],1
    3569:	84 0d 00 00 01 6d    	test   BYTE PTR ds:0x6d010000,cl
    356f:	fd                   	std    
    3570:	00 00                	add    BYTE PTR [eax],al
    3572:	00 02                	add    BYTE PTR [edx],al
    3574:	91                   	xchg   ecx,eax
    3575:	68 12 d3 0c 00       	push   0xcd312
    357a:	00 01                	add    BYTE PTR [ecx],al
    357c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    357d:	6f                   	outs   dx,DWORD PTR ds:[esi]
    357e:	05 00 00 03 91       	add    eax,0x91030000
    3583:	d0 7c 12 ce          	sar    BYTE PTR [edx+edx*1-0x32],1
    3587:	0d 00 00 01 6f       	or     eax,0x6f010000
    358c:	bf 03 00 00 02       	mov    edi,0x2000003
    3591:	91                   	xchg   ecx,eax
    3592:	54                   	push   esp
    3593:	14 8a                	adc    al,0x8a
    3595:	30 00                	xor    BYTE PTR [eax],al
    3597:	9f                   	lahf   
    3598:	08 02                	or     BYTE PTR [edx],al
    359a:	00 00                	add    BYTE PTR [eax],al
    359c:	13 63 6e             	adc    esp,DWORD PTR [ebx+0x6e]
    359f:	74 00                	je     35a1 <sysEnter_Vector-0x12ca5f>
    35a1:	01 71 fd             	add    DWORD PTR [ecx-0x3],esi
    35a4:	00 00                	add    BYTE PTR [eax],al
    35a6:	00 02                	add    BYTE PTR [edx],al
    35a8:	91                   	xchg   ecx,eax
    35a9:	6c                   	ins    BYTE PTR es:[edi],dx
    35aa:	14 b6                	adc    al,0xb6
    35ac:	30 00                	xor    BYTE PTR [eax],al
    35ae:	9f                   	lahf   
    35af:	cc                   	int3   
    35b0:	01 00                	add    DWORD PTR [eax],eax
    35b2:	00 12                	add    BYTE PTR [edx],dl
    35b4:	6d                   	ins    DWORD PTR es:[edi],dx
    35b5:	07                   	pop    es
    35b6:	00 00                	add    BYTE PTR [eax],al
    35b8:	01 7a 7f             	add    DWORD PTR [edx+0x7f],edi
    35bb:	05 00 00 02 91       	add    eax,0x91020000
    35c0:	64                   	fs
    35c1:	14 53                	adc    al,0x53
    35c3:	31 00                	xor    DWORD PTR [eax],eax
    35c5:	9f                   	lahf   
    35c6:	2e 01 00             	add    DWORD PTR cs:[eax],eax
    35c9:	00 13                	add    BYTE PTR [ebx],dl
    35cb:	72 65                	jb     3632 <sysEnter_Vector-0x12c9ce>
    35cd:	73 00                	jae    35cf <sysEnter_Vector-0x12ca31>
    35cf:	01 7e fd             	add    DWORD PTR [esi-0x3],edi
    35d2:	00 00                	add    BYTE PTR [eax],al
    35d4:	00 02                	add    BYTE PTR [edx],al
    35d6:	91                   	xchg   ecx,eax
    35d7:	60                   	pusha  
    35d8:	14 87                	adc    al,0x87
    35da:	31 00                	xor    DWORD PTR [eax],eax
    35dc:	9f                   	lahf   
    35dd:	fa                   	cli    
    35de:	00 00                	add    BYTE PTR [eax],al
    35e0:	00 12                	add    BYTE PTR [edx],dl
    35e2:	2f                   	das    
    35e3:	09 00                	or     DWORD PTR [eax],eax
    35e5:	00 01                	add    BYTE PTR [ecx],al
    35e7:	83 68 01 00          	sub    DWORD PTR [eax+0x1],0x0
    35eb:	00 02                	add    BYTE PTR [edx],al
    35ed:	91                   	xchg   ecx,eax
    35ee:	5c                   	pop    esp
    35ef:	13 70 69             	adc    esi,DWORD PTR [eax+0x69]
    35f2:	64 00 01             	add    BYTE PTR fs:[ecx],al
    35f5:	84 85 05 00 00 03    	test   BYTE PTR [ebp+0x3000005],al
    35fb:	91                   	xchg   ecx,eax
    35fc:	c8 7c 12 d7          	enter  0x127c,0xd7
    3600:	0d 00 00 01 86       	or     eax,0x86010000
    3605:	fd                   	std    
    3606:	00 00                	add    BYTE PTR [eax],al
    3608:	00 02                	add    BYTE PTR [edx],al
    360a:	91                   	xchg   ecx,eax
    360b:	58                   	pop    eax
    360c:	13 70 74             	adc    esi,DWORD PTR [eax+0x74]
    360f:	72 00                	jb     3611 <sysEnter_Vector-0x12c9ef>
    3611:	01 8c 95 05 00 00 02 	add    DWORD PTR [ebp+edx*4+0x2000005],ecx
    3618:	91                   	xchg   ecx,eax
    3619:	50                   	push   eax
    361a:	00 00                	add    BYTE PTR [eax],al
    361c:	00 00                	add    BYTE PTR [eax],al
    361e:	00 0a                	add    BYTE PTR [edx],cl
    3620:	04 bf                	add    al,0xbf
    3622:	03 00                	add    eax,DWORD PTR [eax]
    3624:	00 0a                	add    BYTE PTR [edx],cl
    3626:	04 22                	add    al,0x22
    3628:	01 00                	add    DWORD PTR [eax],eax
    362a:	00 0a                	add    BYTE PTR [edx],cl
    362c:	04 da                	add    al,0xda
    362e:	02 00                	add    al,BYTE PTR [eax]
    3630:	00 07                	add    BYTE PTR [edi],al
    3632:	1b 01                	sbb    eax,DWORD PTR [ecx]
    3634:	00 00                	add    BYTE PTR [eax],al
    3636:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3637:	05 00 00 08 14       	add    eax,0x14080000
    363c:	01 00                	add    DWORD PTR [eax],eax
    363e:	00 7f 00             	add    BYTE PTR [edi+0x0],bh
    3641:	07                   	pop    es
    3642:	1b 01                	sbb    eax,DWORD PTR [ecx]
    3644:	00 00                	add    BYTE PTR [eax],al
    3646:	7f 05                	jg     364d <sysEnter_Vector-0x12c9b3>
    3648:	00 00                	add    BYTE PTR [eax],al
    364a:	08 14 01             	or     BYTE PTR [ecx+eax*1],dl
    364d:	00 00                	add    BYTE PTR [eax],al
    364f:	ff 00                	inc    DWORD PTR [eax]
    3651:	0a 04 fd 00 00 00 07 	or     al,BYTE PTR [edi*8+0x7000000]
    3658:	1b 01                	sbb    eax,DWORD PTR [ecx]
    365a:	00 00                	add    BYTE PTR [eax],al
    365c:	95                   	xchg   ebp,eax
    365d:	05 00 00 08 14       	add    eax,0x14080000
    3662:	01 00                	add    DWORD PTR [eax],eax
    3664:	00 07                	add    BYTE PTR [edi],al
    3666:	00 0a                	add    BYTE PTR [edx],cl
    3668:	04 84                	add    al,0x84
    366a:	01 00                	add    DWORD PTR [eax],eax
    366c:	00 16                	add    BYTE PTR [esi],dl
    366e:	78 00                	js     3670 <sysEnter_Vector-0x12c990>
    3670:	00 00                	add    BYTE PTR [eax],al
    3672:	06                   	push   es
    3673:	33 ac 05 00 00 05 03 	xor    ebp,DWORD PTR [ebp+eax*1+0x3050000]
    367a:	20 92 00 9f 0a 04    	and    BYTE PTR [edx+0x40a9f00],dl
    3680:	68 01 00 00 16       	push   0x16000001
    3685:	10 02                	adc    BYTE PTR [edx],al
    3687:	00 00                	add    BYTE PTR [eax],al
    3689:	05 35 c3 05 00       	add    eax,0x5c335
    368e:	00 05 03 30 92 00    	add    BYTE PTR ds:0x923003,al
    3694:	9f                   	lahf   
    3695:	0a 04 8f             	or     al,BYTE PTR [edi+ecx*4]
    3698:	01 00                	add    DWORD PTR [eax],eax
    369a:	00 16                	add    BYTE PTR [esi],dl
    369c:	33 02                	xor    eax,DWORD PTR [edx]
    369e:	00 00                	add    BYTE PTR [eax],al
    36a0:	05 36 84 01 00       	add    eax,0x18436
    36a5:	00 05 03 2c 92 00    	add    BYTE PTR ds:0x922c03,al
    36ab:	9f                   	lahf   
    36ac:	00 05 0a 00 00 04    	add    BYTE PTR ds:0x400000a,al
    36b2:	00 cd                	add    ch,cl
    36b4:	0e                   	push   cs
    36b5:	00 00                	add    BYTE PTR [eax],al
    36b7:	04 01                	add    al,0x1
    36b9:	c3                   	ret    
    36ba:	00 00                	add    BYTE PTR [eax],al
    36bc:	00 0c 8e             	add    BYTE PTR [esi+ecx*4],cl
    36bf:	0e                   	push   cs
    36c0:	00 00                	add    BYTE PTR [eax],al
    36c2:	4d                   	dec    ebp
    36c3:	00 00                	add    BYTE PTR [eax],al
    36c5:	00 9c 32 00 9f d8 15 	add    BYTE PTR [edx+esi*1+0x15d89f00],bl
    36cc:	00 00                	add    BYTE PTR [eax],al
    36ce:	00 11                	add    BYTE PTR [ecx],dl
    36d0:	00 00                	add    BYTE PTR [eax],al
    36d2:	02 01                	add    al,BYTE PTR [ecx]
    36d4:	08 3f                	or     BYTE PTR [edi],bh
    36d6:	00 00                	add    BYTE PTR [eax],al
    36d8:	00 02                	add    BYTE PTR [edx],al
    36da:	02 07                	add    al,BYTE PTR [edi]
    36dc:	0e                   	push   cs
    36dd:	00 00                	add    BYTE PTR [eax],al
    36df:	00 02                	add    BYTE PTR [edx],al
    36e1:	04 07                	add    al,0x7
    36e3:	32 00                	xor    al,BYTE PTR [eax]
    36e5:	00 00                	add    BYTE PTR [eax],al
    36e7:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    36ea:	2d 00 00 00 02       	sub    eax,0x2000000
    36ef:	01 06                	add    DWORD PTR [esi],eax
    36f1:	41                   	inc    ecx
    36f2:	00 00                	add    BYTE PTR [eax],al
    36f4:	00 02                	add    BYTE PTR [edx],al
    36f6:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    36fc:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3703:	02 08                	add    cl,BYTE PTR [eax]
    3705:	05 00 00 00 00       	add    eax,0x0
    370a:	02 08                	add    cl,BYTE PTR [eax]
    370c:	07                   	pop    es
    370d:	28 00                	sub    BYTE PTR [eax],al
    370f:	00 00                	add    BYTE PTR [eax],al
    3711:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    3718:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    371b:	2a 01                	sub    al,BYTE PTR [ecx]
    371d:	00 00                	add    BYTE PTR [eax],al
    371f:	04 04                	add    al,0x4
    3721:	78 00                	js     3723 <sysEnter_Vector-0x12c8dd>
    3723:	00 00                	add    BYTE PTR [eax],al
    3725:	02 01                	add    al,BYTE PTR [ecx]
    3727:	06                   	push   es
    3728:	48                   	dec    eax
    3729:	00 00                	add    BYTE PTR [eax],al
    372b:	00 05 4d 07 00 00    	add    BYTE PTR ds:0x74d,al
    3731:	02 2e                	add    ch,BYTE PTR [esi]
    3733:	25 00 00 00 05       	and    eax,0x5000000
    3738:	45                   	inc    ebp
    3739:	02 00                	add    al,BYTE PTR [eax]
    373b:	00 02                	add    BYTE PTR [edx],al
    373d:	34 33                	xor    al,0x33
    373f:	00 00                	add    BYTE PTR [eax],al
    3741:	00 05 01 02 00 00    	add    BYTE PTR ds:0x201,al
    3747:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
    374a:	00 00                	add    BYTE PTR [eax],al
    374c:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    374f:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    3750:	00 00                	add    BYTE PTR [eax],al
    3752:	00 06                	add    BYTE PTR [esi],al
    3754:	78 00                	js     3756 <sysEnter_Vector-0x12c8aa>
    3756:	00 00                	add    BYTE PTR [eax],al
    3758:	07                   	pop    es
    3759:	78 00                	js     375b <sysEnter_Vector-0x12c8a5>
    375b:	00 00                	add    BYTE PTR [eax],al
    375d:	bb 00 00 00 08       	mov    ebx,0x8000000
    3762:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    3765:	00 17                	add    BYTE PTR [edi],dl
    3767:	00 05 35 09 00 00    	add    BYTE PTR ds:0x935,al
    376d:	03 28                	add    ebp,DWORD PTR [eax]
    376f:	c6 00 00             	mov    BYTE PTR [eax],0x0
    3772:	00 09                	add    BYTE PTR [ecx],cl
    3774:	04 61                	add    al,0x61
    3776:	08 00                	or     BYTE PTR [eax],al
    3778:	00 78 00             	add    BYTE PTR [eax+0x0],bh
    377b:	00 00                	add    BYTE PTR [eax],al
    377d:	05 3c 09 00 00       	add    eax,0x93c
    3782:	03 62 bb             	add    esp,DWORD PTR [edx-0x45]
    3785:	00 00                	add    BYTE PTR [eax],al
    3787:	00 0a                	add    BYTE PTR [edx],cl
    3789:	05 04 58 5c 01       	add    eax,0x15c5804
    378e:	00 00                	add    BYTE PTR [eax],al
    3790:	0b 80 0f 00 00 04    	or     eax,DWORD PTR [eax+0x400000f]
    3796:	59                   	pop    ecx
    3797:	7f 00                	jg     3799 <sysEnter_Vector-0x12c867>
    3799:	00 00                	add    BYTE PTR [eax],al
    379b:	01 04 04             	add    DWORD PTR [esp+eax*1],eax
    379e:	00 0b                	add    BYTE PTR [ebx],cl
    37a0:	cb                   	retf   
    37a1:	0e                   	push   cs
    37a2:	00 00                	add    BYTE PTR [eax],al
    37a4:	04 5a                	add    al,0x5a
    37a6:	7f 00                	jg     37a8 <sysEnter_Vector-0x12c858>
    37a8:	00 00                	add    BYTE PTR [eax],al
    37aa:	01 04 00             	add    DWORD PTR [eax+eax*1],eax
    37ad:	00 0b                	add    BYTE PTR [ebx],cl
    37af:	de 0e                	fimul  WORD PTR [esi]
    37b1:	00 00                	add    BYTE PTR [eax],al
    37b3:	04 5b                	add    al,0x5b
    37b5:	7f 00                	jg     37b7 <sysEnter_Vector-0x12c849>
    37b7:	00 00                	add    BYTE PTR [eax],al
    37b9:	01 04 04             	add    DWORD PTR [esp+eax*1],eax
    37bc:	01 0b                	add    DWORD PTR [ebx],ecx
    37be:	2e 01 00             	add    DWORD PTR cs:[eax],eax
    37c1:	00 04 5c             	add    BYTE PTR [esp+ebx*2],al
    37c4:	7f 00                	jg     37c6 <sysEnter_Vector-0x12c83a>
    37c6:	00 00                	add    BYTE PTR [eax],al
    37c8:	01 02                	add    DWORD PTR [edx],eax
    37ca:	02 01                	add    al,BYTE PTR [ecx]
    37cc:	0b ab 0e 00 00 04    	or     ebp,DWORD PTR [ebx+0x400000e]
    37d2:	5d                   	pop    ebp
    37d3:	7f 00                	jg     37d5 <sysEnter_Vector-0x12c82b>
    37d5:	00 00                	add    BYTE PTR [eax],al
    37d7:	01 02                	add    DWORD PTR [edx],eax
    37d9:	00 01                	add    BYTE PTR [ecx],al
    37db:	0b ca                	or     ecx,edx
    37dd:	0e                   	push   cs
    37de:	00 00                	add    BYTE PTR [eax],al
    37e0:	04 5e                	add    al,0x5e
    37e2:	7f 00                	jg     37e4 <sysEnter_Vector-0x12c81c>
    37e4:	00 00                	add    BYTE PTR [eax],al
    37e6:	01 04 04             	add    DWORD PTR [esp+eax*1],eax
    37e9:	02 0b                	add    cl,BYTE PTR [ebx]
    37eb:	dd 0e                	fisttp QWORD PTR [esi]
    37ed:	00 00                	add    BYTE PTR [eax],al
    37ef:	04 5f                	add    al,0x5f
    37f1:	7f 00                	jg     37f3 <sysEnter_Vector-0x12c80d>
    37f3:	00 00                	add    BYTE PTR [eax],al
    37f5:	01 08                	add    DWORD PTR [eax],ecx
    37f7:	00 03                	add    BYTE PTR [ebx],al
    37f9:	0b b0 0e 00 00 04    	or     esi,DWORD PTR [eax+0x400000e]
    37ff:	60                   	pusha  
    3800:	7f 00                	jg     3802 <sysEnter_Vector-0x12c7fe>
    3802:	00 00                	add    BYTE PTR [eax],al
    3804:	01 04 04             	add    DWORD PTR [esp+eax*1],eax
    3807:	04 00                	add    al,0x0
    3809:	0c 08                	or     al,0x8
    380b:	04 56                	add    al,0x56
    380d:	75 01                	jne    3810 <sysEnter_Vector-0x12c7f0>
    380f:	00 00                	add    BYTE PTR [eax],al
    3811:	0d db 00 00 00       	or     eax,0xdb
    3816:	0e                   	push   cs
    3817:	72 65                	jb     387e <sysEnter_Vector-0x12c782>
    3819:	67 00 04             	add    BYTE PTR [si],al
    381c:	62 8a 00 00 00 00    	bound  ecx,QWORD PTR [edx+0x0]
    3822:	0a 04 04             	or     al,BYTE PTR [esp+eax*1]
    3825:	db ab 01 00 00 0b    	fld    TBYTE PTR [ebx+0xb000001]
    382b:	d1 0e                	ror    DWORD PTR [esi],1
    382d:	00 00                	add    BYTE PTR [eax],al
    382f:	04 dc                	add    al,0xdc
    3831:	7f 00                	jg     3833 <sysEnter_Vector-0x12c7cd>
    3833:	00 00                	add    BYTE PTR [eax],al
    3835:	01 01                	add    DWORD PTR [ecx],eax
    3837:	07                   	pop    es
    3838:	00 0b                	add    BYTE PTR [ebx],cl
    383a:	0d 0f 00 00 04       	or     eax,0x400000f
    383f:	dd 7f 00             	fnstsw WORD PTR [edi+0x0]
    3842:	00 00                	add    BYTE PTR [eax],al
    3844:	01 01                	add    DWORD PTR [ecx],eax
    3846:	06                   	push   es
    3847:	00 0b                	add    BYTE PTR [ebx],cl
    3849:	77 0f                	ja     385a <sysEnter_Vector-0x12c7a6>
    384b:	00 00                	add    BYTE PTR [eax],al
    384d:	04 de                	add    al,0xde
    384f:	8a 00                	mov    al,BYTE PTR [eax]
    3851:	00 00                	add    BYTE PTR [eax],al
    3853:	04 1e                	add    al,0x1e
    3855:	00 00                	add    BYTE PTR [eax],al
    3857:	00 0c 04             	add    BYTE PTR [esp+eax*1],cl
    385a:	04 da                	add    al,0xda
    385c:	c4 01                	les    eax,FWORD PTR [ecx]
    385e:	00 00                	add    BYTE PTR [eax],al
    3860:	0d 75 01 00 00       	or     eax,0x175
    3865:	0e                   	push   cs
    3866:	72 65                	jb     38cd <sysEnter_Vector-0x12c733>
    3868:	67 00 04             	add    BYTE PTR [si],al
    386b:	e0 8a                	loopne 37f7 <sysEnter_Vector-0x12c809>
    386d:	00 00                	add    BYTE PTR [eax],al
    386f:	00 00                	add    BYTE PTR [eax],al
    3871:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    3874:	ad                   	lods   eax,DWORD PTR ds:[esi]
    3875:	00 00                	add    BYTE PTR [eax],al
    3877:	00 02                	add    BYTE PTR [edx],al
    3879:	01 02                	add    DWORD PTR [edx],eax
    387b:	e8 06 00 00 02       	call   2003886 <sysEnter_Vector+0x1ed3886>
    3880:	08 04 b2             	or     BYTE PTR [edx+esi*4],al
    3883:	00 00                	add    BYTE PTR [eax],al
    3885:	00 0f                	add    BYTE PTR [edi],cl
    3887:	63 76 74             	arpl   WORD PTR [esi+0x74],si
    388a:	00 01                	add    BYTE PTR [ecx],al
    388c:	3d 72 00 00 00       	cmp    eax,0x72
    3891:	9c                   	pushf  
    3892:	32 00                	xor    al,BYTE PTR [eax]
    3894:	9f                   	lahf   
    3895:	cf                   	iret   
    3896:	02 00                	add    al,BYTE PTR [eax]
    3898:	00 01                	add    BYTE PTR [ecx],al
    389a:	9c                   	pushf  
    389b:	94                   	xchg   esp,eax
    389c:	02 00                	add    al,BYTE PTR [eax]
    389e:	00 10                	add    BYTE PTR [eax],dl
    38a0:	61                   	popa   
    38a1:	72 67                	jb     390a <sysEnter_Vector-0x12c6f6>
    38a3:	00 01                	add    BYTE PTR [ecx],al
    38a5:	3d d2 01 00 00       	cmp    eax,0x1d2
    38aa:	02 91 48 11 6a 0e    	add    dl,BYTE PTR [ecx+0xe6a1148]
    38b0:	00 00                	add    BYTE PTR [eax],al
    38b2:	01 3d 4f 00 00 00    	add    DWORD PTR ds:0x4f,edi
    38b8:	02 91 08 11 07 0f    	add    dl,BYTE PTR [ecx+0xf071108]
    38be:	00 00                	add    BYTE PTR [eax],al
    38c0:	01 3d 94 02 00 00    	add    DWORD PTR ds:0x294,edi
    38c6:	02 91 0c 11 d2 01    	add    dl,BYTE PTR [ecx+0x1d2110c]
    38cc:	00 00                	add    BYTE PTR [eax],al
    38ce:	01 3d 94 02 00 00    	add    DWORD PTR ds:0x294,edi
    38d4:	02 91 10 10 62 75    	add    dl,BYTE PTR [ecx+0x75621010]
    38da:	66                   	data16
    38db:	00 01                	add    BYTE PTR [ecx],al
    38dd:	3d 72 00 00 00       	cmp    eax,0x72
    38e2:	02 91 14 11 fd 0e    	add    dl,BYTE PTR [ecx+0xefd1114]
    38e8:	00 00                	add    BYTE PTR [eax],al
    38ea:	01 3d 4f 00 00 00    	add    DWORD PTR ds:0x4f,edi
    38f0:	02 91 18 12 72 32    	add    dl,BYTE PTR [ecx+0x32721218]
    38f6:	00 01                	add    BYTE PTR [ecx],al
    38f8:	3e                   	ds
    38f9:	4f                   	dec    edi
    38fa:	00 00                	add    BYTE PTR [eax],al
    38fc:	00 02                	add    BYTE PTR [edx],al
    38fe:	91                   	xchg   ecx,eax
    38ff:	6c                   	ins    BYTE PTR es:[edi],dx
    3900:	12 66 69             	adc    ah,BYTE PTR [esi+0x69]
    3903:	00 01                	add    BYTE PTR [ecx],al
    3905:	3f                   	aas    
    3906:	d2 01                	rol    BYTE PTR [ecx],cl
    3908:	00 00                	add    BYTE PTR [eax],al
    390a:	02 91 58 12 66 6a    	add    dl,BYTE PTR [ecx+0x6a661258]
    3910:	00 01                	add    BYTE PTR [ecx],al
    3912:	3f                   	aas    
    3913:	d2 01                	rol    BYTE PTR [ecx],cl
    3915:	00 00                	add    BYTE PTR [eax],al
    3917:	02 91 50 12 70 00    	add    dl,BYTE PTR [ecx+0x701250]
    391d:	01 40 72             	add    DWORD PTR [eax+0x72],eax
    3920:	00 00                	add    BYTE PTR [eax],al
    3922:	00 02                	add    BYTE PTR [edx],al
    3924:	91                   	xchg   ecx,eax
    3925:	68 12 70 31 00       	push   0x317012
    392a:	01 40 72             	add    DWORD PTR [eax+0x72],eax
    392d:	00 00                	add    BYTE PTR [eax],al
    392f:	00 02                	add    BYTE PTR [edx],al
    3931:	91                   	xchg   ecx,eax
    3932:	64 13 83 0e 00 00 01 	adc    eax,DWORD PTR fs:[ebx+0x100000e]
    3939:	4b                   	dec    ebx
    393a:	4f                   	dec    edi
    393b:	00 00                	add    BYTE PTR [eax],al
    393d:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
    3940:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3943:	4f                   	dec    edi
    3944:	00 00                	add    BYTE PTR [eax],al
    3946:	00 15 3e 0f 00 00    	add    BYTE PTR ds:0xf3e,dl
    394c:	01 85 4f 00 00 00    	add    DWORD PTR [ebp+0x4f],eax
    3952:	6b 35 00 9f 64 00 00 	imul   esi,DWORD PTR ds:0x649f00,0x0
    3959:	00 01                	add    BYTE PTR [ecx],al
    395b:	9c                   	pushf  
    395c:	cc                   	int3   
    395d:	02 00                	add    al,BYTE PTR [eax]
    395f:	00 10                	add    BYTE PTR [eax],dl
    3961:	73 00                	jae    3963 <sysEnter_Vector-0x12c69d>
    3963:	01 85 cc 02 00 00    	add    DWORD PTR [ebp+0x2cc],eax
    3969:	02 91 00 12 69 00    	add    dl,BYTE PTR [ecx+0x691200]
    396f:	01 86 4f 00 00 00    	add    DWORD PTR [esi+0x4f],eax
    3975:	02 91 70 00 04 04    	add    dl,BYTE PTR [ecx+0x4040070]
    397b:	a0 00 00 00 15       	mov    al,ds:0x15000000
    3980:	6b 0f 00             	imul   ecx,DWORD PTR [edi],0x0
    3983:	00 01                	add    BYTE PTR [ecx],al
    3985:	8b 72 00             	mov    esi,DWORD PTR [edx+0x0]
    3988:	00 00                	add    BYTE PTR [eax],al
    398a:	cf                   	iret   
    398b:	35 00 9f 49 02       	xor    eax,0x2499f00
    3990:	00 00                	add    BYTE PTR [eax],al
    3992:	01 9c 83 03 00 00 10 	add    DWORD PTR [ebx+eax*4+0x10000003],ebx
    3999:	73 74                	jae    3a0f <sysEnter_Vector-0x12c5f1>
    399b:	72 00                	jb     399d <sysEnter_Vector-0x12c663>
    399d:	01 8b 72 00 00 00    	add    DWORD PTR [ebx+0x72],ecx
    39a3:	02 91 00 10 6e 75    	add    dl,BYTE PTR [ecx+0x756e1000]
    39a9:	6d                   	ins    DWORD PTR es:[edi],dx
    39aa:	00 01                	add    BYTE PTR [ecx],al
    39ac:	8b 64 00 00          	mov    esp,DWORD PTR [eax+eax*1+0x0]
    39b0:	00 02                	add    BYTE PTR [edx],al
    39b2:	91                   	xchg   ecx,eax
    39b3:	04 11                	add    al,0x11
    39b5:	72 0f                	jb     39c6 <sysEnter_Vector-0x12c63a>
    39b7:	00 00                	add    BYTE PTR [eax],al
    39b9:	01 8b 4f 00 00 00    	add    DWORD PTR [ebx+0x4f],ecx
    39bf:	02 91 08 11 58 07    	add    dl,BYTE PTR [ecx+0x7581108]
    39c5:	00 00                	add    BYTE PTR [eax],al
    39c7:	01 8b 4f 00 00 00    	add    DWORD PTR [ebx+0x4f],ecx
    39cd:	02 91 0c 11 8c 0f    	add    dl,BYTE PTR [ecx+0xf8c110c]
    39d3:	00 00                	add    BYTE PTR [eax],al
    39d5:	01 8b 4f 00 00 00    	add    DWORD PTR [ebx+0x4f],ecx
    39db:	02 91 10 11 2e 01    	add    dl,BYTE PTR [ecx+0x12e1110]
    39e1:	00 00                	add    BYTE PTR [eax],al
    39e3:	01 8b 4f 00 00 00    	add    DWORD PTR [ebx+0x4f],ecx
    39e9:	02 91 14 12 63 00    	add    dl,BYTE PTR [ecx+0x631214]
    39ef:	01 8c 78 00 00 00 02 	add    DWORD PTR [eax+edi*2+0x2000000],ecx
    39f6:	91                   	xchg   ecx,eax
    39f7:	63 16                	arpl   WORD PTR [esi],dx
    39f9:	d2 01                	rol    BYTE PTR [ecx],cl
    39fb:	00 00                	add    BYTE PTR [eax],al
    39fd:	01 8c 78 00 00 00 02 	add    DWORD PTR [eax+edi*2+0x2000000],ecx
    3a04:	91                   	xchg   ecx,eax
    3a05:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3a06:	12 74 6d 70          	adc    dh,BYTE PTR [ebp+ebp*2+0x70]
    3a0a:	00 01                	add    BYTE PTR [ecx],al
    3a0c:	8c 83 03 00 00 03    	mov    WORD PTR [ebx+0x3000003],es
    3a12:	91                   	xchg   ecx,eax
    3a13:	a1 7f 12 64 69       	mov    eax,ds:0x6964127f
    3a18:	67 00 01             	add    BYTE PTR [bx+di],al
    3a1b:	8d 72 00             	lea    esi,[edx+0x0]
    3a1e:	00 00                	add    BYTE PTR [eax],al
    3a20:	02 91 68 12 69 00    	add    dl,BYTE PTR [ecx+0x691268]
    3a26:	01 8e 4f 00 00 00    	add    DWORD PTR [esi+0x4f],ecx
    3a2c:	02 91 64 00 07 78    	add    dl,BYTE PTR [ecx+0x78070064]
    3a32:	00 00                	add    BYTE PTR [eax],al
    3a34:	00 93 03 00 00 08    	add    BYTE PTR [ebx+0x8000003],dl
    3a3a:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    3a3d:	00 41 00             	add    BYTE PTR [ecx+0x0],al
    3a40:	15 88 0e 00 00       	adc    eax,0xe88
    3a45:	01 cd                	add    ebp,ecx
    3a47:	72 00                	jb     3a49 <sysEnter_Vector-0x12c5b7>
    3a49:	00 00                	add    BYTE PTR [eax],al
    3a4b:	18 38                	sbb    BYTE PTR [eax],bh
    3a4d:	00 9f 1a 01 00 00    	add    BYTE PTR [edi+0x11a],bl
    3a53:	01 9c 29 04 00 00 10 	add    DWORD PTR [ecx+ebp*1+0x10000004],ebx
    3a5a:	73 74                	jae    3ad0 <sysEnter_Vector-0x12c530>
    3a5c:	72 00                	jb     3a5e <sysEnter_Vector-0x12c5a2>
    3a5e:	01 cd                	add    ebp,ecx
    3a60:	72 00                	jb     3a62 <sysEnter_Vector-0x12c59e>
    3a62:	00 00                	add    BYTE PTR [eax],al
    3a64:	02 91 00 11 89 0e    	add    dl,BYTE PTR [ecx+0xe891100]
    3a6a:	00 00                	add    BYTE PTR [eax],al
    3a6c:	01 cd                	add    ebp,ecx
    3a6e:	29 04 00             	sub    DWORD PTR [eax+eax*1],eax
    3a71:	00 02                	add    BYTE PTR [edx],al
    3a73:	91                   	xchg   ecx,eax
    3a74:	04 11                	add    al,0x11
    3a76:	58                   	pop    eax
    3a77:	07                   	pop    es
    3a78:	00 00                	add    BYTE PTR [eax],al
    3a7a:	01 cd                	add    ebp,ecx
    3a7c:	4f                   	dec    edi
    3a7d:	00 00                	add    BYTE PTR [eax],al
    3a7f:	00 02                	add    BYTE PTR [edx],al
    3a81:	91                   	xchg   ecx,eax
    3a82:	08 11                	or     BYTE PTR [ecx],dl
    3a84:	8c 0f                	mov    WORD PTR [edi],cs
    3a86:	00 00                	add    BYTE PTR [eax],al
    3a88:	01 cd                	add    ebp,ecx
    3a8a:	4f                   	dec    edi
    3a8b:	00 00                	add    BYTE PTR [eax],al
    3a8d:	00 02                	add    BYTE PTR [edx],al
    3a8f:	91                   	xchg   ecx,eax
    3a90:	0c 11                	or     al,0x11
    3a92:	2e 01 00             	add    DWORD PTR cs:[eax],eax
    3a95:	00 01                	add    BYTE PTR [ecx],al
    3a97:	cd 4f                	int    0x4f
    3a99:	00 00                	add    BYTE PTR [eax],al
    3a9b:	00 02                	add    BYTE PTR [edx],al
    3a9d:	91                   	xchg   ecx,eax
    3a9e:	10 12                	adc    BYTE PTR [edx],dl
    3aa0:	74 6d                	je     3b0f <sysEnter_Vector-0x12c4f1>
    3aa2:	70 00                	jo     3aa4 <sysEnter_Vector-0x12c55c>
    3aa4:	01 ce                	add    esi,ecx
    3aa6:	ab                   	stos   DWORD PTR es:[edi],eax
    3aa7:	00 00                	add    BYTE PTR [eax],al
    3aa9:	00 02                	add    BYTE PTR [edx],al
    3aab:	91                   	xchg   ecx,eax
    3aac:	54                   	push   esp
    3aad:	12 64 69 67          	adc    ah,BYTE PTR [ecx+ebp*2+0x67]
    3ab1:	00 01                	add    BYTE PTR [ecx],al
    3ab3:	cf                   	iret   
    3ab4:	72 00                	jb     3ab6 <sysEnter_Vector-0x12c54a>
    3ab6:	00 00                	add    BYTE PTR [eax],al
    3ab8:	02 91 74 12 69 00    	add    dl,BYTE PTR [ecx+0x691274]
    3abe:	01 d0                	add    eax,edx
    3ac0:	4f                   	dec    edi
    3ac1:	00 00                	add    BYTE PTR [eax],al
    3ac3:	00 02                	add    BYTE PTR [edx],al
    3ac5:	91                   	xchg   ecx,eax
    3ac6:	70 12                	jo     3ada <sysEnter_Vector-0x12c526>
    3ac8:	6c                   	ins    BYTE PTR es:[edi],dx
    3ac9:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    3acb:	00 01                	add    BYTE PTR [ecx],al
    3acd:	d0 4f 00             	ror    BYTE PTR [edi+0x0],1
    3ad0:	00 00                	add    BYTE PTR [eax],al
    3ad2:	02 91 6c 00 04 04    	add    dl,BYTE PTR [ecx+0x404006c]
    3ad8:	25 00 00 00 15       	and    eax,0x15000000
    3add:	e5 0e                	in     eax,0xe
    3adf:	00 00                	add    BYTE PTR [eax],al
    3ae1:	01 e1                	add    ecx,esp
    3ae3:	72 00                	jb     3ae5 <sysEnter_Vector-0x12c51b>
    3ae5:	00 00                	add    BYTE PTR [eax],al
    3ae7:	32 39                	xor    bh,BYTE PTR [ecx]
    3ae9:	00 9f 1e 02 00 00    	add    BYTE PTR [edi+0x21e],bl
    3aef:	01 9c c3 04 00 00 10 	add    DWORD PTR [ebx+eax*8+0x10000004],ebx
    3af6:	73 74                	jae    3b6c <sysEnter_Vector-0x12c494>
    3af8:	72 00                	jb     3afa <sysEnter_Vector-0x12c506>
    3afa:	01 e1                	add    ecx,esp
    3afc:	72 00                	jb     3afe <sysEnter_Vector-0x12c502>
    3afe:	00 00                	add    BYTE PTR [eax],al
    3b00:	02 91 00 11 89 0e    	add    dl,BYTE PTR [ecx+0xe891100]
    3b06:	00 00                	add    BYTE PTR [eax],al
    3b08:	01 e1                	add    ecx,esp
    3b0a:	29 04 00             	sub    DWORD PTR [eax+eax*1],eax
    3b0d:	00 02                	add    BYTE PTR [edx],al
    3b0f:	91                   	xchg   ecx,eax
    3b10:	04 11                	add    al,0x11
    3b12:	58                   	pop    eax
    3b13:	07                   	pop    es
    3b14:	00 00                	add    BYTE PTR [eax],al
    3b16:	01 e1                	add    ecx,esp
    3b18:	4f                   	dec    edi
    3b19:	00 00                	add    BYTE PTR [eax],al
    3b1b:	00 02                	add    BYTE PTR [edx],al
    3b1d:	91                   	xchg   ecx,eax
    3b1e:	08 11                	or     BYTE PTR [ecx],dl
    3b20:	8c 0f                	mov    WORD PTR [edi],cs
    3b22:	00 00                	add    BYTE PTR [eax],al
    3b24:	01 e1                	add    ecx,esp
    3b26:	4f                   	dec    edi
    3b27:	00 00                	add    BYTE PTR [eax],al
    3b29:	00 02                	add    BYTE PTR [edx],al
    3b2b:	91                   	xchg   ecx,eax
    3b2c:	0c 11                	or     al,0x11
    3b2e:	2e 01 00             	add    DWORD PTR cs:[eax],eax
    3b31:	00 01                	add    BYTE PTR [ecx],al
    3b33:	e1 4f                	loope  3b84 <sysEnter_Vector-0x12c47c>
    3b35:	00 00                	add    BYTE PTR [eax],al
    3b37:	00 02                	add    BYTE PTR [edx],al
    3b39:	91                   	xchg   ecx,eax
    3b3a:	10 12                	adc    BYTE PTR [edx],dl
    3b3c:	74 6d                	je     3bab <sysEnter_Vector-0x12c455>
    3b3e:	70 00                	jo     3b40 <sysEnter_Vector-0x12c4c0>
    3b40:	01 e2                	add    edx,esp
    3b42:	ab                   	stos   DWORD PTR es:[edi],eax
    3b43:	00 00                	add    BYTE PTR [eax],al
    3b45:	00 02                	add    BYTE PTR [edx],al
    3b47:	91                   	xchg   ecx,eax
    3b48:	48                   	dec    eax
    3b49:	12 69 00             	adc    ch,BYTE PTR [ecx+0x0]
    3b4c:	01 e3                	add    ebx,esp
    3b4e:	4f                   	dec    edi
    3b4f:	00 00                	add    BYTE PTR [eax],al
    3b51:	00 02                	add    BYTE PTR [edx],al
    3b53:	91                   	xchg   ecx,eax
    3b54:	68 12 6e 00 01       	push   0x1006e12
    3b59:	e3 4f                	jecxz  3baa <sysEnter_Vector-0x12c456>
    3b5b:	00 00                	add    BYTE PTR [eax],al
    3b5d:	00 02                	add    BYTE PTR [edx],al
    3b5f:	91                   	xchg   ecx,eax
    3b60:	64 12 6c 65 6e       	adc    ch,BYTE PTR fs:[ebp+eiz*2+0x6e]
    3b65:	00 01                	add    BYTE PTR [ecx],al
    3b67:	e3 4f                	jecxz  3bb8 <sysEnter_Vector-0x12c448>
    3b69:	00 00                	add    BYTE PTR [eax],al
    3b6b:	00 02                	add    BYTE PTR [edx],al
    3b6d:	91                   	xchg   ecx,eax
    3b6e:	60                   	pusha  
    3b6f:	00 17                	add    BYTE PTR [edi],dl
    3b71:	63 0f                	arpl   WORD PTR [edi],cx
    3b73:	00 00                	add    BYTE PTR [eax],al
    3b75:	01 07                	add    DWORD PTR [edi],eax
    3b77:	01 50 3b             	add    DWORD PTR [eax+0x3b],edx
    3b7a:	00 9f 05 04 00 00    	add    BYTE PTR [edi+0x405],bl
    3b80:	01 9c 91 05 00 00 18 	add    DWORD PTR [ecx+edx*4+0x18000005],ebx
    3b87:	33 03                	xor    eax,DWORD PTR [ebx]
    3b89:	00 00                	add    BYTE PTR [eax],al
    3b8b:	01 07                	add    DWORD PTR [edi],eax
    3b8d:	01 d2                	add    edx,edx
    3b8f:	01 00                	add    DWORD PTR [eax],eax
    3b91:	00 03                	add    BYTE PTR [ebx],al
    3b93:	91                   	xchg   ecx,eax
    3b94:	c8 7b 18 16          	enter  0x187b,0x16
    3b98:	07                   	pop    es
    3b99:	00 00                	add    BYTE PTR [eax],al
    3b9b:	01 07                	add    DWORD PTR [edi],eax
    3b9d:	01 72 00             	add    DWORD PTR [edx+0x0],esi
    3ba0:	00 00                	add    BYTE PTR [eax],al
    3ba2:	02 91 08 19 66 6d    	add    dl,BYTE PTR [ecx+0x6d661908]
    3ba8:	74 00                	je     3baa <sysEnter_Vector-0x12c456>
    3baa:	01 07                	add    DWORD PTR [edi],eax
    3bac:	01 78 00             	add    DWORD PTR [eax+0x0],edi
    3baf:	00 00                	add    BYTE PTR [eax],al
    3bb1:	03 91 c4 7b 18 8c    	add    edx,DWORD PTR [ecx-0x73e7843c]
    3bb7:	0f 00 00             	sldt   WORD PTR [eax]
    3bba:	01 07                	add    DWORD PTR [edi],eax
    3bbc:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    3bbf:	00 00                	add    BYTE PTR [eax],al
    3bc1:	02 91 10 1a 07 0f    	add    dl,BYTE PTR [ecx+0xf071a10]
    3bc7:	00 00                	add    BYTE PTR [eax],al
    3bc9:	01 08                	add    DWORD PTR [eax],ecx
    3bcb:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    3bce:	00 00                	add    BYTE PTR [eax],al
    3bd0:	02 91 58 1a d2 01    	add    dl,BYTE PTR [ecx+0x1d21a58]
    3bd6:	00 00                	add    BYTE PTR [eax],al
    3bd8:	01 08                	add    DWORD PTR [eax],ecx
    3bda:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    3bdd:	00 00                	add    BYTE PTR [eax],al
    3bdf:	02 91 54 1b 65 78    	add    dl,BYTE PTR [ecx+0x78651b54]
    3be5:	70 00                	jo     3be7 <sysEnter_Vector-0x12c419>
    3be7:	01 08                	add    DWORD PTR [eax],ecx
    3be9:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    3bec:	00 00                	add    BYTE PTR [eax],al
    3bee:	02 91 6c 1b 70 6f    	add    dl,BYTE PTR [ecx+0x6f701b6c]
    3bf4:	73 00                	jae    3bf6 <sysEnter_Vector-0x12c40a>
    3bf6:	01 08                	add    DWORD PTR [eax],ecx
    3bf8:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    3bfb:	00 00                	add    BYTE PTR [eax],al
    3bfd:	02 91 68 1a bb 0e    	add    dl,BYTE PTR [ecx+0xebb1a68]
    3c03:	00 00                	add    BYTE PTR [eax],al
    3c05:	01 09                	add    DWORD PTR [ecx],ecx
    3c07:	01 72 00             	add    DWORD PTR [edx+0x0],esi
    3c0a:	00 00                	add    BYTE PTR [eax],al
    3c0c:	02 91 64 1a 49 0f    	add    dl,BYTE PTR [ecx+0xf491a64]
    3c12:	00 00                	add    BYTE PTR [eax],al
    3c14:	01 0a                	add    DWORD PTR [edx],ecx
    3c16:	01 91 05 00 00 03    	add    DWORD PTR [ecx+0x3000005],edx
    3c1c:	91                   	xchg   ecx,eax
    3c1d:	d4 7b                	aam    0x7b
    3c1f:	1a 85 0f 00 00 01    	sbb    al,BYTE PTR [ebp+0x100000f]
    3c25:	0b 01                	or     eax,DWORD PTR [ecx]
    3c27:	4f                   	dec    edi
    3c28:	00 00                	add    BYTE PTR [eax],al
    3c2a:	00 02                	add    BYTE PTR [edx],al
    3c2c:	91                   	xchg   ecx,eax
    3c2d:	60                   	pusha  
    3c2e:	1a 59 0f             	sbb    bl,BYTE PTR [ecx+0xf]
    3c31:	00 00                	add    BYTE PTR [eax],al
    3c33:	01 0c 01             	add    DWORD PTR [ecx+eax*1],ecx
    3c36:	4f                   	dec    edi
    3c37:	00 00                	add    BYTE PTR [eax],al
    3c39:	00 02                	add    BYTE PTR [edx],al
    3c3b:	91                   	xchg   ecx,eax
    3c3c:	5c                   	pop    esp
    3c3d:	00 07                	add    BYTE PTR [edi],al
    3c3f:	78 00                	js     3c41 <sysEnter_Vector-0x12c3bf>
    3c41:	00 00                	add    BYTE PTR [eax],al
    3c43:	a2 05 00 00 1c       	mov    ds:0x1c000005,al
    3c48:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    3c4b:	00 ff                	add    bh,bh
    3c4d:	01 00                	add    DWORD PTR [eax],eax
    3c4f:	17                   	pop    ss
    3c50:	03 0f                	add    ecx,DWORD PTR [edi]
    3c52:	00 00                	add    BYTE PTR [eax],al
    3c54:	01 5c 01 55          	add    DWORD PTR [ecx+eax*1+0x55],ebx
    3c58:	3f                   	aas    
    3c59:	00 9f a9 00 00 00    	add    BYTE PTR [edi+0xa9],bl
    3c5f:	01 9c df 05 00 00 18 	add    DWORD PTR [edi+ebx*8+0x18000005],ebx
    3c66:	16                   	push   ss
    3c67:	07                   	pop    es
    3c68:	00 00                	add    BYTE PTR [eax],al
    3c6a:	01 5c 01 72          	add    DWORD PTR [ecx+eax*1+0x72],ebx
    3c6e:	00 00                	add    BYTE PTR [eax],al
    3c70:	00 02                	add    BYTE PTR [edx],al
    3c72:	91                   	xchg   ecx,eax
    3c73:	00 1d a5 3f 00 9f    	add    BYTE PTR ds:0x9f003fa5,bl
    3c79:	3d 00 00 00 1b       	cmp    eax,0x1b000000
    3c7e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3c7f:	00 01                	add    BYTE PTR [ecx],al
    3c81:	64 01 4f 00          	add    DWORD PTR fs:[edi+0x0],ecx
    3c85:	00 00                	add    BYTE PTR [eax],al
    3c87:	02 91 6c 00 00 1e    	add    dl,BYTE PTR [ecx+0x1e00006c]
    3c8d:	79 0e                	jns    3c9d <sysEnter_Vector-0x12c363>
    3c8f:	00 00                	add    BYTE PTR [eax],al
    3c91:	01 71 01             	add    DWORD PTR [ecx+0x1],esi
    3c94:	fe                   	(bad)  
    3c95:	3f                   	aas    
    3c96:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
    3c9c:	01 9c 14 06 00 00 18 	add    DWORD PTR [esp+edx*1+0x18000006],ebx
    3ca3:	16                   	push   ss
    3ca4:	07                   	pop    es
    3ca5:	00 00                	add    BYTE PTR [eax],al
    3ca7:	01 71 01             	add    DWORD PTR [ecx+0x1],esi
    3caa:	72 00                	jb     3cac <sysEnter_Vector-0x12c354>
    3cac:	00 00                	add    BYTE PTR [eax],al
    3cae:	02 91 00 1a 7e 0a    	add    dl,BYTE PTR [ecx+0xa7e1a00]
    3cb4:	00 00                	add    BYTE PTR [eax],al
    3cb6:	01 72 01             	add    DWORD PTR [edx+0x1],esi
    3cb9:	72 00                	jb     3cbb <sysEnter_Vector-0x12c345>
    3cbb:	00 00                	add    BYTE PTR [eax],al
    3cbd:	02 91 74 00 1f 66    	add    dl,BYTE PTR [ecx+0x661f0074]
    3cc3:	6c                   	ins    BYTE PTR es:[edi],dx
    3cc4:	74 00                	je     3cc6 <sysEnter_Vector-0x12c33a>
    3cc6:	01 7e 01             	add    DWORD PTR [esi+0x1],edi
    3cc9:	72 00                	jb     3ccb <sysEnter_Vector-0x12c335>
    3ccb:	00 00                	add    BYTE PTR [eax],al
    3ccd:	a8 40                	test   al,0x40
    3ccf:	00 9f 16 02 00 00    	add    BYTE PTR [edi+0x216],bl
    3cd5:	01 9c d1 06 00 00 19 	add    DWORD PTR [ecx+edx*8+0x19000006],ebx
    3cdc:	73 74                	jae    3d52 <sysEnter_Vector-0x12c2ae>
    3cde:	72 00                	jb     3ce0 <sysEnter_Vector-0x12c320>
    3ce0:	01 7e 01             	add    DWORD PTR [esi+0x1],edi
    3ce3:	72 00                	jb     3ce5 <sysEnter_Vector-0x12c31b>
    3ce5:	00 00                	add    BYTE PTR [eax],al
    3ce7:	02 91 00 19 6e 75    	add    dl,BYTE PTR [ecx+0x756e1900]
    3ced:	6d                   	ins    DWORD PTR es:[edi],dx
    3cee:	00 01                	add    BYTE PTR [ecx],al
    3cf0:	7e 01                	jle    3cf3 <sysEnter_Vector-0x12c30d>
    3cf2:	d2 01                	rol    BYTE PTR [ecx],cl
    3cf4:	00 00                	add    BYTE PTR [eax],al
    3cf6:	03 91 d8 7b 18 58    	add    edx,DWORD PTR [ecx+0x58187bd8]
    3cfc:	07                   	pop    es
    3cfd:	00 00                	add    BYTE PTR [eax],al
    3cff:	01 7e 01             	add    DWORD PTR [esi+0x1],edi
    3d02:	4f                   	dec    edi
    3d03:	00 00                	add    BYTE PTR [eax],al
    3d05:	00 02                	add    BYTE PTR [edx],al
    3d07:	91                   	xchg   ecx,eax
    3d08:	0c 18                	or     al,0x18
    3d0a:	8c 0f                	mov    WORD PTR [edi],cs
    3d0c:	00 00                	add    BYTE PTR [eax],al
    3d0e:	01 7e 01             	add    DWORD PTR [esi+0x1],edi
    3d11:	4f                   	dec    edi
    3d12:	00 00                	add    BYTE PTR [eax],al
    3d14:	00 02                	add    BYTE PTR [edx],al
    3d16:	91                   	xchg   ecx,eax
    3d17:	10 19                	adc    BYTE PTR [ecx],bl
    3d19:	66 6d                	ins    WORD PTR es:[edi],dx
    3d1b:	74 00                	je     3d1d <sysEnter_Vector-0x12c2e3>
    3d1d:	01 7e 01             	add    DWORD PTR [esi+0x1],edi
    3d20:	78 00                	js     3d22 <sysEnter_Vector-0x12c2de>
    3d22:	00 00                	add    BYTE PTR [eax],al
    3d24:	03 91 d4 7b 18 a4    	add    edx,DWORD PTR [ecx-0x5be7842c]
    3d2a:	0a 00                	or     al,BYTE PTR [eax]
    3d2c:	00 01                	add    BYTE PTR [ecx],al
    3d2e:	7e 01                	jle    3d31 <sysEnter_Vector-0x12c2cf>
    3d30:	4f                   	dec    edi
    3d31:	00 00                	add    BYTE PTR [eax],al
    3d33:	00 02                	add    BYTE PTR [edx],al
    3d35:	91                   	xchg   ecx,eax
    3d36:	18 1a                	sbb    BYTE PTR [edx],bl
    3d38:	49                   	dec    ecx
    3d39:	0f 00 00             	sldt   WORD PTR [eax]
    3d3c:	01 7f 01             	add    DWORD PTR [edi+0x1],edi
    3d3f:	91                   	xchg   ecx,eax
    3d40:	05 00 00 03 91       	add    eax,0x91030000
    3d45:	e0 7b                	loopne 3dc2 <sysEnter_Vector-0x12c23e>
    3d47:	1b 63 00             	sbb    esp,DWORD PTR [ebx+0x0]
    3d4a:	01 80 01 78 00 00    	add    DWORD PTR [eax+0x7801],eax
    3d50:	00 02                	add    BYTE PTR [edx],al
    3d52:	91                   	xchg   ecx,eax
    3d53:	67 1a d2             	addr16 sbb dl,dl
    3d56:	01 00                	add    DWORD PTR [eax],eax
    3d58:	00 01                	add    BYTE PTR [ecx],al
    3d5a:	80 01 78             	add    BYTE PTR [ecx],0x78
    3d5d:	00 00                	add    BYTE PTR [eax],al
    3d5f:	00 02                	add    BYTE PTR [edx],al
    3d61:	91                   	xchg   ecx,eax
    3d62:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3d63:	1b 6e 00             	sbb    ebp,DWORD PTR [esi+0x0]
    3d66:	01 81 01 4f 00 00    	add    DWORD PTR [ecx+0x4f01],eax
    3d6c:	00 02                	add    BYTE PTR [edx],al
    3d6e:	91                   	xchg   ecx,eax
    3d6f:	60                   	pusha  
    3d70:	1b 69 00             	sbb    ebp,DWORD PTR [ecx+0x0]
    3d73:	01 81 01 4f 00 00    	add    DWORD PTR [ecx+0x4f01],eax
    3d79:	00 02                	add    BYTE PTR [edx],al
    3d7b:	91                   	xchg   ecx,eax
    3d7c:	68 00 20 f4 0e       	push   0xef42000
    3d81:	00 00                	add    BYTE PTR [eax],al
    3d83:	01 b6 01 4f 00 00    	add    DWORD PTR [esi+0x4f01],esi
    3d89:	00 be 42 00 9f d6    	add    BYTE PTR [esi-0x2960ffbe],bh
    3d8f:	04 00                	add    al,0x0
    3d91:	00 01                	add    BYTE PTR [ecx],al
    3d93:	9c                   	pushf  
    3d94:	07                   	pop    es
    3d95:	08 00                	or     BYTE PTR [eax],al
    3d97:	00 19                	add    BYTE PTR [ecx],bl
    3d99:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    3d9c:	00 01                	add    BYTE PTR [ecx],al
    3d9e:	b6 01                	mov    dh,0x1
    3da0:	72 00                	jb     3da2 <sysEnter_Vector-0x12c25e>
    3da2:	00 00                	add    BYTE PTR [eax],al
    3da4:	02 91 00 19 66 6d    	add    dl,BYTE PTR [ecx+0x6d661900]
    3daa:	74 00                	je     3dac <sysEnter_Vector-0x12c254>
    3dac:	01 b6 01 a0 00 00    	add    DWORD PTR [esi+0xa001],esi
    3db2:	00 02                	add    BYTE PTR [edx],al
    3db4:	91                   	xchg   ecx,eax
    3db5:	04 18                	add    al,0x18
    3db7:	72 0a                	jb     3dc3 <sysEnter_Vector-0x12c23d>
    3db9:	00 00                	add    BYTE PTR [eax],al
    3dbb:	01 b6 01 d0 00 00    	add    DWORD PTR [esi+0xd001],esi
    3dc1:	00 02                	add    BYTE PTR [edx],al
    3dc3:	91                   	xchg   ecx,eax
    3dc4:	08 1b                	or     BYTE PTR [ebx],bl
    3dc6:	6c                   	ins    BYTE PTR es:[edi],dx
    3dc7:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    3dc9:	00 01                	add    BYTE PTR [ecx],al
    3dcb:	b7 01                	mov    bh,0x1
    3dcd:	4f                   	dec    edi
    3dce:	00 00                	add    BYTE PTR [eax],al
    3dd0:	00 02                	add    BYTE PTR [edx],al
    3dd2:	91                   	xchg   ecx,eax
    3dd3:	48                   	dec    eax
    3dd4:	1b 6e 75             	sbb    ebp,DWORD PTR [esi+0x75]
    3dd7:	6d                   	ins    DWORD PTR es:[edi],dx
    3dd8:	00 01                	add    BYTE PTR [ecx],al
    3dda:	b8 01 3a 00 00       	mov    eax,0x3a01
    3ddf:	00 02                	add    BYTE PTR [edx],al
    3de1:	91                   	xchg   ecx,eax
    3de2:	6c                   	ins    BYTE PTR es:[edi],dx
    3de3:	1b 69 00             	sbb    ebp,DWORD PTR [ecx+0x0]
    3de6:	01 b9 01 4f 00 00    	add    DWORD PTR [ecx+0x4f01],edi
    3dec:	00 02                	add    BYTE PTR [edx],al
    3dee:	91                   	xchg   ecx,eax
    3def:	68 1a 72 0f 00       	push   0xf721a
    3df4:	00 01                	add    BYTE PTR [ecx],al
    3df6:	b9 01 4f 00 00       	mov    ecx,0x4f01
    3dfb:	00 02                	add    BYTE PTR [edx],al
    3dfd:	91                   	xchg   ecx,eax
    3dfe:	64 1b 73 74          	sbb    esi,DWORD PTR fs:[ebx+0x74]
    3e02:	72 00                	jb     3e04 <sysEnter_Vector-0x12c1fc>
    3e04:	01 ba 01 72 00 00    	add    DWORD PTR [edx+0x7201],edi
    3e0a:	00 02                	add    BYTE PTR [edx],al
    3e0c:	91                   	xchg   ecx,eax
    3e0d:	60                   	pusha  
    3e0e:	1b 73 00             	sbb    esi,DWORD PTR [ebx+0x0]
    3e11:	01 bb 01 72 00 00    	add    DWORD PTR [ebx+0x7201],edi
    3e17:	00 02                	add    BYTE PTR [edx],al
    3e19:	91                   	xchg   ecx,eax
    3e1a:	5c                   	pop    esp
    3e1b:	1a a4 0a 00 00 01 bd 	sbb    ah,BYTE PTR [edx+ecx*1-0x42ff0000]
    3e22:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    3e25:	00 00                	add    BYTE PTR [eax],al
    3e27:	02 91 58 1a 5e 0e    	add    dl,BYTE PTR [ecx+0xe5e1a58]
    3e2d:	00 00                	add    BYTE PTR [eax],al
    3e2f:	01 bf 01 4f 00 00    	add    DWORD PTR [edi+0x4f01],edi
    3e35:	00 02                	add    BYTE PTR [edx],al
    3e37:	91                   	xchg   ecx,eax
    3e38:	54                   	push   esp
    3e39:	1a 8c 0f 00 00 01 c0 	sbb    cl,BYTE PTR [edi+ecx*1-0x3fff0000]
    3e40:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    3e43:	00 00                	add    BYTE PTR [eax],al
    3e45:	02 91 50 1a 34 0f    	add    dl,BYTE PTR [ecx+0xf341a50]
    3e4b:	00 00                	add    BYTE PTR [eax],al
    3e4d:	01 c1                	add    ecx,eax
    3e4f:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    3e52:	00 00                	add    BYTE PTR [eax],al
    3e54:	02 91 4c 21 72 0e    	add    dl,BYTE PTR [ecx+0xe72214c]
    3e5a:	00 00                	add    BYTE PTR [eax],al
    3e5c:	01 cb                	add    ebx,ecx
    3e5e:	01 03                	add    DWORD PTR [ebx],eax
    3e60:	43                   	inc    ebx
    3e61:	00 9f 1d 74 44 00    	add    BYTE PTR [edi+0x44741d],bl
    3e67:	9f                   	lahf   
    3e68:	7f 02                	jg     3e6c <sysEnter_Vector-0x12c194>
    3e6a:	00 00                	add    BYTE PTR [eax],al
    3e6c:	22 50 0f             	and    dl,BYTE PTR [eax+0xf]
    3e6f:	00 00                	add    BYTE PTR [eax],al
    3e71:	01 03                	add    DWORD PTR [ebx],eax
    3e73:	02 4f 00             	add    cl,BYTE PTR [edi+0x0]
    3e76:	00 00                	add    BYTE PTR [eax],al
    3e78:	d1 07                	rol    DWORD PTR [edi],1
    3e7a:	00 00                	add    BYTE PTR [eax],al
    3e7c:	14 00                	adc    al,0x0
    3e7e:	23 b1 45 00 9f 1b    	and    esi,DWORD PTR [ecx+0x1b9f0045]
    3e84:	00 00                	add    BYTE PTR [eax],al
    3e86:	00 ed                	add    ch,ch
    3e88:	07                   	pop    es
    3e89:	00 00                	add    BYTE PTR [eax],al
    3e8b:	1b 69 70             	sbb    ebp,DWORD PTR [ecx+0x70]
    3e8e:	00 01                	add    BYTE PTR [ecx],al
    3e90:	13 02                	adc    eax,DWORD PTR [edx]
    3e92:	07                   	pop    es
    3e93:	08 00                	or     BYTE PTR [eax],al
    3e95:	00 02                	add    BYTE PTR [edx],al
    3e97:	91                   	xchg   ecx,eax
    3e98:	44                   	inc    esp
    3e99:	00 1d d1 45 00 9f    	add    BYTE PTR ds:0x9f0045d1,bl
    3e9f:	1b 00                	sbb    eax,DWORD PTR [eax]
    3ea1:	00 00                	add    BYTE PTR [eax],al
    3ea3:	1b 69 70             	sbb    ebp,DWORD PTR [ecx+0x70]
    3ea6:	00 01                	add    BYTE PTR [ecx],al
    3ea8:	16                   	push   ss
    3ea9:	02 94 02 00 00 02 91 	add    dl,BYTE PTR [edx+eax*1-0x6efe0000]
    3eb0:	40                   	inc    eax
    3eb1:	00 00                	add    BYTE PTR [eax],al
    3eb3:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3eb6:	64 00 00             	add    BYTE PTR fs:[eax],al
    3eb9:	00 20                	add    BYTE PTR [eax],ah
    3ebb:	f5                   	cmc    
    3ebc:	0e                   	push   cs
    3ebd:	00 00                	add    BYTE PTR [eax],al
    3ebf:	01 64 02 4f          	add    DWORD PTR [edx+eax*1+0x4f],esp
    3ec3:	00 00                	add    BYTE PTR [eax],al
    3ec5:	00 94 47 00 9f 33 00 	add    BYTE PTR [edi+eax*2+0x339f00],dl
    3ecc:	00 00                	add    BYTE PTR [eax],al
    3ece:	01 9c 63 08 00 00 19 	add    DWORD PTR [ebx+eiz*2+0x19000008],ebx
    3ed5:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    3ed8:	00 01                	add    BYTE PTR [ecx],al
    3eda:	64 02 72 00          	add    dh,BYTE PTR fs:[edx+0x0]
    3ede:	00 00                	add    BYTE PTR [eax],al
    3ee0:	02 91 00 19 66 6d    	add    dl,BYTE PTR [ecx+0x6d661900]
    3ee6:	74 00                	je     3ee8 <sysEnter_Vector-0x12c118>
    3ee8:	01 64 02 a0          	add    DWORD PTR [edx+eax*1-0x60],esp
    3eec:	00 00                	add    BYTE PTR [eax],al
    3eee:	00 02                	add    BYTE PTR [edx],al
    3ef0:	91                   	xchg   ecx,eax
    3ef1:	04 14                	add    al,0x14
    3ef3:	1a 72 0a             	sbb    dh,BYTE PTR [edx+0xa]
    3ef6:	00 00                	add    BYTE PTR [eax],al
    3ef8:	01 65 02             	add    DWORD PTR [ebp+0x2],esp
    3efb:	d0 00                	rol    BYTE PTR [eax],1
    3efd:	00 00                	add    BYTE PTR [eax],al
    3eff:	02 91 68 1b 6e 00    	add    dl,BYTE PTR [ecx+0x6e1b68]
    3f05:	01 66 02             	add    DWORD PTR [esi+0x2],esp
    3f08:	4f                   	dec    edi
    3f09:	00 00                	add    BYTE PTR [eax],al
    3f0b:	00 02                	add    BYTE PTR [edx],al
    3f0d:	91                   	xchg   ecx,eax
    3f0e:	6c                   	ins    BYTE PTR es:[edi],dx
    3f0f:	00 20                	add    BYTE PTR [eax],ah
    3f11:	c2 0e 00             	ret    0xe
    3f14:	00 01                	add    BYTE PTR [ecx],al
    3f16:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3f17:	02 72 00             	add    dh,BYTE PTR [edx+0x0]
    3f1a:	00 00                	add    BYTE PTR [eax],al
    3f1c:	c7 47 00 9f 3d 00 00 	mov    DWORD PTR [edi+0x0],0x3d9f
    3f23:	00 01                	add    BYTE PTR [ecx],al
    3f25:	9c                   	pushf  
    3f26:	c9                   	leave  
    3f27:	08 00                	or     BYTE PTR [eax],al
    3f29:	00 19                	add    BYTE PTR [ecx],bl
    3f2b:	61                   	popa   
    3f2c:	72 67                	jb     3f95 <sysEnter_Vector-0x12c06b>
    3f2e:	00 01                	add    BYTE PTR [ecx],al
    3f30:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3f31:	02 d2                	add    dl,dl
    3f33:	01 00                	add    DWORD PTR [eax],eax
    3f35:	00 02                	add    BYTE PTR [edx],al
    3f37:	91                   	xchg   ecx,eax
    3f38:	68 18 6a 0e 00       	push   0xe6a18
    3f3d:	00 01                	add    BYTE PTR [ecx],al
    3f3f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3f40:	02 4f 00             	add    cl,BYTE PTR [edi+0x0]
    3f43:	00 00                	add    BYTE PTR [eax],al
    3f45:	02 91 08 18 07 0f    	add    dl,BYTE PTR [ecx+0xf071808]
    3f4b:	00 00                	add    BYTE PTR [eax],al
    3f4d:	01 6f 02             	add    DWORD PTR [edi+0x2],ebp
    3f50:	94                   	xchg   esp,eax
    3f51:	02 00                	add    al,BYTE PTR [eax]
    3f53:	00 02                	add    BYTE PTR [edx],al
    3f55:	91                   	xchg   ecx,eax
    3f56:	0c 18                	or     al,0x18
    3f58:	d2 01                	rol    BYTE PTR [ecx],cl
    3f5a:	00 00                	add    BYTE PTR [eax],al
    3f5c:	01 6f 02             	add    DWORD PTR [edi+0x2],ebp
    3f5f:	94                   	xchg   esp,eax
    3f60:	02 00                	add    al,BYTE PTR [eax]
    3f62:	00 02                	add    BYTE PTR [edx],al
    3f64:	91                   	xchg   ecx,eax
    3f65:	10 19                	adc    BYTE PTR [ecx],bl
    3f67:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    3f6a:	00 01                	add    BYTE PTR [ecx],al
    3f6c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3f6d:	02 72 00             	add    dh,BYTE PTR [edx+0x0]
    3f70:	00 00                	add    BYTE PTR [eax],al
    3f72:	02 91 14 00 20 48    	add    dl,BYTE PTR [ecx+0x48200014]
    3f78:	0f 00 00             	sldt   WORD PTR [eax]
    3f7b:	01 73 02             	add    DWORD PTR [ebx+0x2],esi
    3f7e:	72 00                	jb     3f80 <sysEnter_Vector-0x12c080>
    3f80:	00 00                	add    BYTE PTR [eax],al
    3f82:	04 48                	add    al,0x48
    3f84:	00 9f 3d 00 00 00    	add    BYTE PTR [edi+0x3d],bl
    3f8a:	01 9c 2f 09 00 00 19 	add    DWORD PTR [edi+ebp*1+0x19000009],ebx
    3f91:	61                   	popa   
    3f92:	72 67                	jb     3ffb <sysEnter_Vector-0x12c005>
    3f94:	00 01                	add    BYTE PTR [ecx],al
    3f96:	73 02                	jae    3f9a <sysEnter_Vector-0x12c066>
    3f98:	d2 01                	rol    BYTE PTR [ecx],cl
    3f9a:	00 00                	add    BYTE PTR [eax],al
    3f9c:	02 91 68 18 6a 0e    	add    dl,BYTE PTR [ecx+0xe6a1868]
    3fa2:	00 00                	add    BYTE PTR [eax],al
    3fa4:	01 73 02             	add    DWORD PTR [ebx+0x2],esi
    3fa7:	4f                   	dec    edi
    3fa8:	00 00                	add    BYTE PTR [eax],al
    3faa:	00 02                	add    BYTE PTR [edx],al
    3fac:	91                   	xchg   ecx,eax
    3fad:	08 18                	or     BYTE PTR [eax],bl
    3faf:	07                   	pop    es
    3fb0:	0f 00 00             	sldt   WORD PTR [eax]
    3fb3:	01 73 02             	add    DWORD PTR [ebx+0x2],esi
    3fb6:	94                   	xchg   esp,eax
    3fb7:	02 00                	add    al,BYTE PTR [eax]
    3fb9:	00 02                	add    BYTE PTR [edx],al
    3fbb:	91                   	xchg   ecx,eax
    3fbc:	0c 18                	or     al,0x18
    3fbe:	d2 01                	rol    BYTE PTR [ecx],cl
    3fc0:	00 00                	add    BYTE PTR [eax],al
    3fc2:	01 73 02             	add    DWORD PTR [ebx+0x2],esi
    3fc5:	94                   	xchg   esp,eax
    3fc6:	02 00                	add    al,BYTE PTR [eax]
    3fc8:	00 02                	add    BYTE PTR [edx],al
    3fca:	91                   	xchg   ecx,eax
    3fcb:	10 19                	adc    BYTE PTR [ecx],bl
    3fcd:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    3fd0:	00 01                	add    BYTE PTR [ecx],al
    3fd2:	73 02                	jae    3fd6 <sysEnter_Vector-0x12c02a>
    3fd4:	72 00                	jb     3fd6 <sysEnter_Vector-0x12c02a>
    3fd6:	00 00                	add    BYTE PTR [eax],al
    3fd8:	02 91 14 00 20 eb    	add    dl,BYTE PTR [ecx-0x14dfffec]
    3fde:	0e                   	push   cs
    3fdf:	00 00                	add    BYTE PTR [eax],al
    3fe1:	01 77 02             	add    DWORD PTR [edi+0x2],esi
    3fe4:	4f                   	dec    edi
    3fe5:	00 00                	add    BYTE PTR [eax],al
    3fe7:	00 41 48             	add    BYTE PTR [ecx+0x48],al
    3fea:	00 9f 33 00 00 00    	add    BYTE PTR [edi+0x33],bl
    3ff0:	01 9c 85 09 00 00 19 	add    DWORD PTR [ebp+eax*4+0x19000009],ebx
    3ff7:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    3ffa:	00 01                	add    BYTE PTR [ecx],al
    3ffc:	77 02                	ja     4000 <sysEnter_Vector-0x12c000>
    3ffe:	72 00                	jb     4000 <sysEnter_Vector-0x12c000>
    4000:	00 00                	add    BYTE PTR [eax],al
    4002:	02 91 00 19 66 6d    	add    dl,BYTE PTR [ecx+0x6d661900]
    4008:	74 00                	je     400a <sysEnter_Vector-0x12bff6>
    400a:	01 77 02             	add    DWORD PTR [edi+0x2],esi
    400d:	a0 00 00 00 02       	mov    al,ds:0x2000000
    4012:	91                   	xchg   ecx,eax
    4013:	04 14                	add    al,0x14
    4015:	1a 72 0a             	sbb    dh,BYTE PTR [edx+0xa]
    4018:	00 00                	add    BYTE PTR [eax],al
    401a:	01 79 02             	add    DWORD PTR [ecx+0x2],edi
    401d:	d0 00                	rol    BYTE PTR [eax],1
    401f:	00 00                	add    BYTE PTR [eax],al
    4021:	02 91 68 1b 69 00    	add    dl,BYTE PTR [ecx+0x691b68]
    4027:	01 7a 02             	add    DWORD PTR [edx+0x2],edi
    402a:	4f                   	dec    edi
    402b:	00 00                	add    BYTE PTR [eax],al
    402d:	00 02                	add    BYTE PTR [edx],al
    402f:	91                   	xchg   ecx,eax
    4030:	6c                   	ins    BYTE PTR es:[edi],dx
    4031:	00 16                	add    BYTE PTR [esi],dl
    4033:	bb 0e 00 00 01       	mov    ebx,0x100000e
    4038:	3a 72 00             	cmp    dh,BYTE PTR [edx+0x0]
    403b:	00 00                	add    BYTE PTR [eax],al
    403d:	05 03 fc 91 00       	add    eax,0x91fc03
    4042:	9f                   	lahf   
    4043:	16                   	push   ss
    4044:	b5 0e                	mov    ch,0xe
    4046:	00 00                	add    BYTE PTR [eax],al
    4048:	01 3b                	add    DWORD PTR [ebx],edi
    404a:	72 00                	jb     404c <sysEnter_Vector-0x12bfb4>
    404c:	00 00                	add    BYTE PTR [eax],al
    404e:	05 03 00 92 00       	add    eax,0x920003
    4053:	9f                   	lahf   
    4054:	24 9c                	and    al,0x9c
    4056:	0e                   	push   cs
    4057:	00 00                	add    BYTE PTR [eax],al
    4059:	04 63                	add    al,0x63
    405b:	5c                   	pop    esp
    405c:	01 00                	add    DWORD PTR [eax],eax
    405e:	00 05 03 b4 92 00    	add    BYTE PTR ds:0x92b403,al
    4064:	9f                   	lahf   
    4065:	24 18                	and    al,0x18
    4067:	0f 00 00             	sldt   WORD PTR [eax]
    406a:	04 e1                	add    al,0xe1
    406c:	ab                   	stos   DWORD PTR es:[edi],eax
    406d:	01 00                	add    DWORD PTR [eax],eax
    406f:	00 05 03 b0 92 00    	add    BYTE PTR ds:0x92b003,al
    4075:	9f                   	lahf   
    4076:	24 78                	and    al,0x78
    4078:	00 00                	add    BYTE PTR [eax],al
    407a:	00 05 33 da 09 00    	add    BYTE PTR ds:0x9da33,al
    4080:	00 05 03 20 92 00    	add    BYTE PTR ds:0x922003,al
    4086:	9f                   	lahf   
    4087:	04 04                	add    al,0x4
    4089:	72 00                	jb     408b <sysEnter_Vector-0x12bf75>
    408b:	00 00                	add    BYTE PTR [eax],al
    408d:	24 10                	and    al,0x10
    408f:	02 00                	add    al,BYTE PTR [eax]
    4091:	00 06                	add    BYTE PTR [esi],al
    4093:	35 f1 09 00 00       	xor    eax,0x9f1
    4098:	05 03 30 92 00       	add    eax,0x923003
    409d:	9f                   	lahf   
    409e:	04 04                	add    al,0x4
    40a0:	95                   	xchg   ebp,eax
    40a1:	00 00                	add    BYTE PTR [eax],al
    40a3:	00 24 33             	add    BYTE PTR [ebx+esi*1],ah
    40a6:	02 00                	add    al,BYTE PTR [eax]
    40a8:	00 06                	add    BYTE PTR [esi],al
    40aa:	36 8a 00             	mov    al,BYTE PTR ss:[eax]
    40ad:	00 00                	add    BYTE PTR [eax],al
    40af:	05 03 2c 92 00       	add    eax,0x922c03
    40b4:	9f                   	lahf   
    40b5:	00 dc                	add    ah,bl
    40b7:	00 00                	add    BYTE PTR [eax],al
    40b9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    40bc:	ea 10 00 00 04 01 c3 	jmp    0xc301:0x4000010
    40c3:	00 00                	add    BYTE PTR [eax],al
    40c5:	00 0c 9e             	add    BYTE PTR [esi+ebx*4],cl
    40c8:	0f 00 00             	sldt   WORD PTR [eax]
    40cb:	4d                   	dec    ebp
    40cc:	00 00                	add    BYTE PTR [eax],al
    40ce:	00 74 48 00          	add    BYTE PTR [eax+ecx*2+0x0],dh
    40d2:	9f                   	lahf   
    40d3:	84 00                	test   BYTE PTR [eax],al
    40d5:	00 00                	add    BYTE PTR [eax],al
    40d7:	9e                   	sahf   
    40d8:	16                   	push   ss
    40d9:	00 00                	add    BYTE PTR [eax],al
    40db:	02 01                	add    al,BYTE PTR [ecx]
    40dd:	08 3f                	or     BYTE PTR [edi],bh
    40df:	00 00                	add    BYTE PTR [eax],al
    40e1:	00 02                	add    BYTE PTR [edx],al
    40e3:	02 07                	add    al,BYTE PTR [edi]
    40e5:	0e                   	push   cs
    40e6:	00 00                	add    BYTE PTR [eax],al
    40e8:	00 02                	add    BYTE PTR [edx],al
    40ea:	04 07                	add    al,0x7
    40ec:	32 00                	xor    al,BYTE PTR [eax]
    40ee:	00 00                	add    BYTE PTR [eax],al
    40f0:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    40f3:	2d 00 00 00 02       	sub    eax,0x2000000
    40f8:	01 06                	add    DWORD PTR [esi],eax
    40fa:	41                   	inc    ecx
    40fb:	00 00                	add    BYTE PTR [eax],al
    40fd:	00 02                	add    BYTE PTR [edx],al
    40ff:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    4105:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    410c:	02 08                	add    cl,BYTE PTR [eax]
    410e:	05 00 00 00 00       	add    eax,0x0
    4113:	02 08                	add    cl,BYTE PTR [eax]
    4115:	07                   	pop    es
    4116:	28 00                	sub    BYTE PTR [eax],al
    4118:	00 00                	add    BYTE PTR [eax],al
    411a:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    4121:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    4124:	2a 01                	sub    al,BYTE PTR [ecx]
    4126:	00 00                	add    BYTE PTR [eax],al
    4128:	04 04                	add    al,0x4
    412a:	78 00                	js     412c <sysEnter_Vector-0x12bed4>
    412c:	00 00                	add    BYTE PTR [eax],al
    412e:	02 01                	add    al,BYTE PTR [ecx]
    4130:	06                   	push   es
    4131:	48                   	dec    eax
    4132:	00 00                	add    BYTE PTR [eax],al
    4134:	00 02                	add    BYTE PTR [edx],al
    4136:	0c 04                	or     al,0x4
    4138:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4139:	00 00                	add    BYTE PTR [eax],al
    413b:	00 05 aa 0f 00 00    	add    BYTE PTR ds:0xfaa,al
    4141:	01 11                	add    DWORD PTR [ecx],edx
    4143:	74 48                	je     418d <sysEnter_Vector-0x12be73>
    4145:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
    414b:	01 9c b8 00 00 00 06 	add    DWORD PTR [eax+edi*4+0x6000000],ebx
    4152:	b3 0f                	mov    bl,0xf
    4154:	00 00                	add    BYTE PTR [eax],al
    4156:	01 13                	add    DWORD PTR [ebx],edx
    4158:	b8 00 00 00 02       	mov    eax,0x2000000
    415d:	91                   	xchg   ecx,eax
    415e:	67 06                	addr16 push es
    4160:	96                   	xchg   esi,eax
    4161:	0f 00 00             	sldt   WORD PTR [eax]
    4164:	01 14 4f             	add    DWORD PTR [edi+ecx*2],edx
    4167:	00 00                	add    BYTE PTR [eax],al
    4169:	00 02                	add    BYTE PTR [edx],al
    416b:	91                   	xchg   ecx,eax
    416c:	6c                   	ins    BYTE PTR es:[edi],dx
    416d:	00 07                	add    BYTE PTR [edi],al
    416f:	78 00                	js     4171 <sysEnter_Vector-0x12be8f>
    4171:	00 00                	add    BYTE PTR [eax],al
    4173:	c8 00 00 00          	enter  0x0,0x0
    4177:	08 6b 00             	or     BYTE PTR [ebx+0x0],ch
    417a:	00 00                	add    BYTE PTR [eax],al
    417c:	04 00                	add    al,0x0
    417e:	09 78 00             	or     DWORD PTR [eax+0x0],edi
    4181:	00 00                	add    BYTE PTR [eax],al
    4183:	02 33                	add    dh,BYTE PTR [ebx]
    4185:	d9 00                	fld    DWORD PTR [eax]
    4187:	00 00                	add    BYTE PTR [eax],al
    4189:	05 03 20 92 00       	add    eax,0x922003
    418e:	9f                   	lahf   
    418f:	04 04                	add    al,0x4
    4191:	72 00                	jb     4193 <sysEnter_Vector-0x12be6d>
    4193:	00 00                	add    BYTE PTR [eax],al
    4195:	00 0c 02             	add    BYTE PTR [edx+eax*1],cl
    4198:	00 00                	add    BYTE PTR [eax],al
    419a:	04 00                	add    al,0x0
    419c:	67 11 00             	adc    DWORD PTR [bx+si],eax
    419f:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    41a2:	c3                   	ret    
    41a3:	00 00                	add    BYTE PTR [eax],al
    41a5:	00 0c e1             	add    BYTE PTR [ecx+eiz*8],cl
    41a8:	0f 00 00             	sldt   WORD PTR [eax]
    41ab:	4d                   	dec    ebp
    41ac:	00 00                	add    BYTE PTR [eax],al
    41ae:	00 f8                	add    al,bh
    41b0:	48                   	dec    eax
    41b1:	00 9f 58 01 00 00    	add    BYTE PTR [edi+0x158],bl
    41b7:	f9                   	stc    
    41b8:	16                   	push   ss
    41b9:	00 00                	add    BYTE PTR [eax],al
    41bb:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    41c2:	03 91 02 00 00 02    	add    edx,DWORD PTR [ecx+0x2000002]
    41c8:	d8 37                	fdiv   DWORD PTR [edi]
    41ca:	00 00                	add    BYTE PTR [eax],al
    41cc:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    41cf:	07                   	pop    es
    41d0:	32 00                	xor    al,BYTE PTR [eax]
    41d2:	00 00                	add    BYTE PTR [eax],al
    41d4:	04 04                	add    al,0x4
    41d6:	05 05 00 00 00       	add    eax,0x5
    41db:	04 08                	add    al,0x8
    41dd:	05 00 00 00 00       	add    eax,0x0
    41e2:	04 0c                	add    al,0xc
    41e4:	04 ad                	add    al,0xad
    41e6:	00 00                	add    BYTE PTR [eax],al
    41e8:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    41eb:	06                   	push   es
    41ec:	48                   	dec    eax
    41ed:	00 00                	add    BYTE PTR [eax],al
    41ef:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    41f2:	08 3f                	or     BYTE PTR [edi],bh
    41f4:	00 00                	add    BYTE PTR [eax],al
    41f6:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    41f9:	07                   	pop    es
    41fa:	0e                   	push   cs
    41fb:	00 00                	add    BYTE PTR [eax],al
    41fd:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    4200:	07                   	pop    es
    4201:	2d 00 00 00 04       	sub    eax,0x4000000
    4206:	01 06                	add    DWORD PTR [esi],eax
    4208:	41                   	inc    ecx
    4209:	00 00                	add    BYTE PTR [eax],al
    420b:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    420e:	05 b9 00 00 00       	add    eax,0xb9
    4213:	04 08                	add    al,0x8
    4215:	07                   	pop    es
    4216:	28 00                	sub    BYTE PTR [eax],al
    4218:	00 00                	add    BYTE PTR [eax],al
    421a:	04 04                	add    al,0x4
    421c:	07                   	pop    es
    421d:	2a 01                	sub    al,BYTE PTR [ecx]
    421f:	00 00                	add    BYTE PTR [eax],al
    4221:	05 04 53 00 00       	add    eax,0x5304
    4226:	00 06                	add    BYTE PTR [esi],al
    4228:	da 0f                	fimul  DWORD PTR [edi]
    422a:	00 00                	add    BYTE PTR [eax],al
    422c:	01 1e                	add    DWORD PTR [esi],ebx
    422e:	8b 00                	mov    eax,DWORD PTR [eax]
    4230:	00 00                	add    BYTE PTR [eax],al
    4232:	f8                   	clc    
    4233:	48                   	dec    eax
    4234:	00 9f 3e 00 00 00    	add    BYTE PTR [edi+0x3e],bl
    423a:	01 9c c7 00 00 00 07 	add    DWORD PTR [edi+eax*8+0x7000000],ebx
    4241:	3c 0c                	cmp    al,0xc
    4243:	00 00                	add    BYTE PTR [eax],al
    4245:	01 1e                	add    DWORD PTR [esi],ebx
    4247:	8b 00                	mov    eax,DWORD PTR [eax]
    4249:	00 00                	add    BYTE PTR [eax],al
    424b:	02 91 00 08 73 72    	add    dl,BYTE PTR [ecx+0x72730800]
    4251:	63 00                	arpl   WORD PTR [eax],ax
    4253:	01 1e                	add    DWORD PTR [esi],ebx
    4255:	c7 00 00 00 02 91    	mov    DWORD PTR [eax],0x91020000
    425b:	04 00                	add    al,0x0
    425d:	05 04 cd 00 00       	add    eax,0xcd04
    4262:	00 09                	add    BYTE PTR [ecx],cl
    4264:	53                   	push   ebx
    4265:	00 00                	add    BYTE PTR [eax],al
    4267:	00 06                	add    BYTE PTR [esi],al
    4269:	0e                   	push   cs
    426a:	10 00                	adc    BYTE PTR [eax],al
    426c:	00 01                	add    BYTE PTR [ecx],al
    426e:	24 8b                	and    al,0x8b
    4270:	00 00                	add    BYTE PTR [eax],al
    4272:	00 36                	add    BYTE PTR [esi],dh
    4274:	49                   	dec    ecx
    4275:	00 9f 3e 00 00 00    	add    BYTE PTR [edi+0x3e],bl
    427b:	01 9c 08 01 00 00 07 	add    DWORD PTR [eax+ecx*1+0x7000001],ebx
    4282:	3c 0c                	cmp    al,0xc
    4284:	00 00                	add    BYTE PTR [eax],al
    4286:	01 24 8b             	add    DWORD PTR [ebx+ecx*4],esp
    4289:	00 00                	add    BYTE PTR [eax],al
    428b:	00 02                	add    BYTE PTR [edx],al
    428d:	91                   	xchg   ecx,eax
    428e:	00 08                	add    BYTE PTR [eax],cl
    4290:	73 72                	jae    4304 <sysEnter_Vector-0x12bcfc>
    4292:	63 00                	arpl   WORD PTR [eax],ax
    4294:	01 24 c7             	add    DWORD PTR [edi+eax*8],esp
    4297:	00 00                	add    BYTE PTR [eax],al
    4299:	00 02                	add    BYTE PTR [edx],al
    429b:	91                   	xchg   ecx,eax
    429c:	04 00                	add    al,0x0
    429e:	06                   	push   es
    429f:	c4 0f                	les    ecx,FWORD PTR [edi]
    42a1:	00 00                	add    BYTE PTR [eax],al
    42a3:	01 2a                	add    DWORD PTR [edx],ebp
    42a5:	8b 00                	mov    eax,DWORD PTR [eax]
    42a7:	00 00                	add    BYTE PTR [eax],al
    42a9:	74 49                	je     42f4 <sysEnter_Vector-0x12bd0c>
    42ab:	00 9f 6f 00 00 00    	add    BYTE PTR [edi+0x6f],bl
    42b1:	01 9c 66 01 00 00 07 	add    DWORD PTR [esi+eiz*2+0x7000001],ebx
    42b8:	3c 0c                	cmp    al,0xc
    42ba:	00 00                	add    BYTE PTR [eax],al
    42bc:	01 2a                	add    DWORD PTR [edx],ebp
    42be:	8b 00                	mov    eax,DWORD PTR [eax]
    42c0:	00 00                	add    BYTE PTR [eax],al
    42c2:	02 91 00 08 73 72    	add    dl,BYTE PTR [ecx+0x72730800]
    42c8:	63 00                	arpl   WORD PTR [eax],ax
    42ca:	01 2a                	add    DWORD PTR [edx],ebp
    42cc:	c7 00 00 00 02 91    	mov    DWORD PTR [eax],0x91020000
    42d2:	04 08                	add    al,0x8
    42d4:	6e                   	outs   dx,BYTE PTR ds:[esi]
    42d5:	00 01                	add    BYTE PTR [ecx],al
    42d7:	2a 2c 00             	sub    ch,BYTE PTR [eax+eax*1]
    42da:	00 00                	add    BYTE PTR [eax],al
    42dc:	02 91 08 0a b8 0f    	add    dl,BYTE PTR [ecx+0xfb80a08]
    42e2:	00 00                	add    BYTE PTR [eax],al
    42e4:	01 2c 2c             	add    DWORD PTR [esp+ebp*1],ebp
    42e7:	00 00                	add    BYTE PTR [eax],al
    42e9:	00 02                	add    BYTE PTR [edx],al
    42eb:	91                   	xchg   ecx,eax
    42ec:	6c                   	ins    BYTE PTR es:[edi],dx
    42ed:	0a cd                	or     cl,ch
    42ef:	0f 00 00             	sldt   WORD PTR [eax]
    42f2:	01 2d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ebp
    42f8:	02 91 68 00 06 fe    	add    dl,BYTE PTR [ecx-0x1f9ff98]
    42fe:	0f 00 00             	sldt   WORD PTR [eax]
    4301:	01 38                	add    DWORD PTR [eax],edi
    4303:	8b 00                	mov    eax,DWORD PTR [eax]
    4305:	00 00                	add    BYTE PTR [eax],al
    4307:	e3 49                	jecxz  4352 <sysEnter_Vector-0x12bcae>
    4309:	00 9f 47 00 00 00    	add    BYTE PTR [edi+0x47],bl
    430f:	01 9c b6 01 00 00 07 	add    DWORD PTR [esi+esi*4+0x7000001],ebx
    4316:	3c 0c                	cmp    al,0xc
    4318:	00 00                	add    BYTE PTR [eax],al
    431a:	01 38                	add    DWORD PTR [eax],edi
    431c:	8b 00                	mov    eax,DWORD PTR [eax]
    431e:	00 00                	add    BYTE PTR [eax],al
    4320:	02 91 00 08 73 72    	add    dl,BYTE PTR [ecx+0x72730800]
    4326:	63 00                	arpl   WORD PTR [eax],ax
    4328:	01 38                	add    DWORD PTR [eax],edi
    432a:	c7 00 00 00 02 91    	mov    DWORD PTR [eax],0x91020000
    4330:	04 08                	add    al,0x8
    4332:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4333:	00 01                	add    BYTE PTR [ecx],al
    4335:	38 2c 00             	cmp    BYTE PTR [eax+eax*1],ch
    4338:	00 00                	add    BYTE PTR [eax],al
    433a:	02 91 08 0a b8 0f    	add    dl,BYTE PTR [ecx+0xfb80a08]
    4340:	00 00                	add    BYTE PTR [eax],al
    4342:	01 3a                	add    DWORD PTR [edx],edi
    4344:	2c 00                	sub    al,0x0
    4346:	00 00                	add    BYTE PTR [eax],al
    4348:	02 91 6c 00 06 f6    	add    dl,BYTE PTR [ecx-0x9f9ff94]
    434e:	0f 00 00             	sldt   WORD PTR [eax]
    4351:	01 40 8b             	add    DWORD PTR [eax-0x75],eax
    4354:	00 00                	add    BYTE PTR [eax],al
    4356:	00 2a                	add    BYTE PTR [edx],ch
    4358:	4a                   	dec    edx
    4359:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
    435f:	01 9c f8 01 00 00 07 	add    DWORD PTR [eax+edi*8+0x7000001],ebx
    4366:	3c 0c                	cmp    al,0xc
    4368:	00 00                	add    BYTE PTR [eax],al
    436a:	01 40 8b             	add    DWORD PTR [eax-0x75],eax
    436d:	00 00                	add    BYTE PTR [eax],al
    436f:	00 02                	add    BYTE PTR [edx],al
    4371:	91                   	xchg   ecx,eax
    4372:	00 08                	add    BYTE PTR [eax],cl
    4374:	73 72                	jae    43e8 <sysEnter_Vector-0x12bc18>
    4376:	63 00                	arpl   WORD PTR [eax],ax
    4378:	01 40 c7             	add    DWORD PTR [eax-0x39],eax
    437b:	00 00                	add    BYTE PTR [eax],al
    437d:	00 02                	add    BYTE PTR [edx],al
    437f:	91                   	xchg   ecx,eax
    4380:	04 08                	add    al,0x8
    4382:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4383:	00 01                	add    BYTE PTR [ecx],al
    4385:	40                   	inc    eax
    4386:	2c 00                	sub    al,0x0
    4388:	00 00                	add    BYTE PTR [eax],al
    438a:	02 91 08 00 0b 78    	add    dl,BYTE PTR [ecx+0x780b0008]
    4390:	00 00                	add    BYTE PTR [eax],al
    4392:	00 03                	add    BYTE PTR [ebx],al
    4394:	33 09                	xor    ecx,DWORD PTR [ecx]
    4396:	02 00                	add    al,BYTE PTR [eax]
    4398:	00 05 03 20 92 00    	add    BYTE PTR ds:0x922003,al
    439e:	9f                   	lahf   
    439f:	05 04 8b 00 00       	add    eax,0x8b04
    43a4:	00 00                	add    BYTE PTR [eax],al
    43a6:	96                   	xchg   esi,eax
    43a7:	01 00                	add    DWORD PTR [eax],eax
    43a9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    43ac:	08 12                	or     BYTE PTR [edx],dl
    43ae:	00 00                	add    BYTE PTR [eax],al
    43b0:	04 01                	add    al,0x1
    43b2:	c3                   	ret    
    43b3:	00 00                	add    BYTE PTR [eax],al
    43b5:	00 0c 25 10 00 00 4d 	add    BYTE PTR [eiz*1+0x4d000010],cl
    43bc:	00 00                	add    BYTE PTR [eax],al
    43be:	00 50 4a             	add    BYTE PTR [eax+0x4a],dl
    43c1:	00 9f 7b 00 00 00    	add    BYTE PTR [edi+0x7b],bl
    43c7:	c0 17 00             	rcl    BYTE PTR [edi],0x0
    43ca:	00 02                	add    BYTE PTR [edx],al
    43cc:	01 08                	add    DWORD PTR [eax],ecx
    43ce:	3f                   	aas    
    43cf:	00 00                	add    BYTE PTR [eax],al
    43d1:	00 02                	add    BYTE PTR [edx],al
    43d3:	02 07                	add    al,BYTE PTR [edi]
    43d5:	0e                   	push   cs
    43d6:	00 00                	add    BYTE PTR [eax],al
    43d8:	00 02                	add    BYTE PTR [edx],al
    43da:	04 07                	add    al,0x7
    43dc:	32 00                	xor    al,BYTE PTR [eax]
    43de:	00 00                	add    BYTE PTR [eax],al
    43e0:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    43e3:	2d 00 00 00 02       	sub    eax,0x2000000
    43e8:	01 06                	add    DWORD PTR [esi],eax
    43ea:	41                   	inc    ecx
    43eb:	00 00                	add    BYTE PTR [eax],al
    43ed:	00 02                	add    BYTE PTR [edx],al
    43ef:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    43f5:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    43fc:	02 08                	add    cl,BYTE PTR [eax]
    43fe:	05 00 00 00 00       	add    eax,0x0
    4403:	02 08                	add    cl,BYTE PTR [eax]
    4405:	07                   	pop    es
    4406:	28 00                	sub    BYTE PTR [eax],al
    4408:	00 00                	add    BYTE PTR [eax],al
    440a:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    4411:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    4414:	2a 01                	sub    al,BYTE PTR [ecx]
    4416:	00 00                	add    BYTE PTR [eax],al
    4418:	04 04                	add    al,0x4
    441a:	78 00                	js     441c <sysEnter_Vector-0x12bbe4>
    441c:	00 00                	add    BYTE PTR [eax],al
    441e:	02 01                	add    al,BYTE PTR [ecx]
    4420:	06                   	push   es
    4421:	48                   	dec    eax
    4422:	00 00                	add    BYTE PTR [eax],al
    4424:	00 05 45 02 00 00    	add    BYTE PTR ds:0x245,al
    442a:	02 34 33             	add    dh,BYTE PTR [ebx+esi*1]
    442d:	00 00                	add    BYTE PTR [eax],al
    442f:	00 05 01 02 00 00    	add    BYTE PTR ds:0x201,al
    4435:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
    4438:	00 00                	add    BYTE PTR [eax],al
    443a:	00 02                	add    BYTE PTR [edx],al
    443c:	0c 04                	or     al,0x4
    443e:	ad                   	lods   eax,DWORD PTR ds:[esi]
    443f:	00 00                	add    BYTE PTR [eax],al
    4441:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    4444:	a2 00 00 00 06       	mov    ds:0x6000000,al
    4449:	78 00                	js     444b <sysEnter_Vector-0x12bbb5>
    444b:	00 00                	add    BYTE PTR [eax],al
    444d:	02 01                	add    al,BYTE PTR [ecx]
    444f:	02 e8                	add    ch,al
    4451:	06                   	push   es
    4452:	00 00                	add    BYTE PTR [eax],al
    4454:	02 08                	add    cl,BYTE PTR [eax]
    4456:	04 b2                	add    al,0xb2
    4458:	00 00                	add    BYTE PTR [eax],al
    445a:	00 07                	add    BYTE PTR [edi],al
    445c:	16                   	push   ss
    445d:	10 00                	adc    BYTE PTR [eax],al
    445f:	00 01                	add    BYTE PTR [ecx],al
    4461:	1a 4f 00             	sbb    cl,BYTE PTR [edi+0x0]
    4464:	00 00                	add    BYTE PTR [eax],al
    4466:	50                   	push   eax
    4467:	4a                   	dec    edx
    4468:	00 9f 5e 00 00 00    	add    BYTE PTR [edi+0x5e],bl
    446e:	01 9c 1b 01 00 00 08 	add    DWORD PTR [ebx+ebx*1+0x8000001],ebx
    4475:	70 31                	jo     44a8 <sysEnter_Vector-0x12bb58>
    4477:	00 01                	add    BYTE PTR [ecx],al
    4479:	1a 9c 00 00 00 02 91 	sbb    bl,BYTE PTR [eax+eax*1-0x6efe0000]
    4480:	00 08                	add    BYTE PTR [eax],cl
    4482:	70 32                	jo     44b6 <sysEnter_Vector-0x12bb4a>
    4484:	00 01                	add    BYTE PTR [ecx],al
    4486:	1a 9c 00 00 00 02 91 	sbb    bl,BYTE PTR [eax+eax*1-0x6efe0000]
    448d:	04 09                	add    al,0x9
    448f:	73 31                	jae    44c2 <sysEnter_Vector-0x12bb3e>
    4491:	00 01                	add    BYTE PTR [ecx],al
    4493:	1c 1b                	sbb    al,0x1b
    4495:	01 00                	add    DWORD PTR [eax],eax
    4497:	00 01                	add    BYTE PTR [ecx],al
    4499:	53                   	push   ebx
    449a:	09 73 32             	or     DWORD PTR [ebx+0x32],esi
    449d:	00 01                	add    BYTE PTR [ecx],al
    449f:	1d 1b 01 00 00       	sbb    eax,0x11b
    44a4:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    44a7:	63 31                	arpl   WORD PTR [ecx],si
    44a9:	00 01                	add    BYTE PTR [ecx],al
    44ab:	1e                   	push   ds
    44ac:	25 00 00 00 02       	and    eax,0x2000000
    44b1:	91                   	xchg   ecx,eax
    44b2:	6f                   	outs   dx,DWORD PTR ds:[esi]
    44b3:	09 63 32             	or     DWORD PTR [ebx+0x32],esp
    44b6:	00 01                	add    BYTE PTR [ecx],al
    44b8:	1e                   	push   ds
    44b9:	25 00 00 00 02       	and    eax,0x2000000
    44be:	91                   	xchg   ecx,eax
    44bf:	6e                   	outs   dx,BYTE PTR ds:[esi]
    44c0:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    44c3:	21 01                	and    DWORD PTR [ecx],eax
    44c5:	00 00                	add    BYTE PTR [eax],al
    44c7:	06                   	push   es
    44c8:	25 00 00 00 0a       	and    eax,0xa000000
    44cd:	1e                   	push   ds
    44ce:	10 00                	adc    BYTE PTR [eax],al
    44d0:	00 01                	add    BYTE PTR [ecx],al
    44d2:	2c 4f                	sub    al,0x4f
    44d4:	00 00                	add    BYTE PTR [eax],al
    44d6:	00 ae 4a 00 9f 1d    	add    BYTE PTR [esi+0x1d9f004a],ch
    44dc:	00 00                	add    BYTE PTR [eax],al
    44de:	00 01                	add    BYTE PTR [ecx],al
    44e0:	9c                   	pushf  
    44e1:	5a                   	pop    edx
    44e2:	01 00                	add    DWORD PTR [eax],eax
    44e4:	00 08                	add    BYTE PTR [eax],cl
    44e6:	70 31                	jo     4519 <sysEnter_Vector-0x12bae7>
    44e8:	00 01                	add    BYTE PTR [ecx],al
    44ea:	2c 9c                	sub    al,0x9c
    44ec:	00 00                	add    BYTE PTR [eax],al
    44ee:	00 02                	add    BYTE PTR [edx],al
    44f0:	91                   	xchg   ecx,eax
    44f1:	00 08                	add    BYTE PTR [eax],cl
    44f3:	70 32                	jo     4527 <sysEnter_Vector-0x12bad9>
    44f5:	00 01                	add    BYTE PTR [ecx],al
    44f7:	2c 9c                	sub    al,0x9c
    44f9:	00 00                	add    BYTE PTR [eax],al
    44fb:	00 02                	add    BYTE PTR [edx],al
    44fd:	91                   	xchg   ecx,eax
    44fe:	04 00                	add    al,0x0
    4500:	0b 78 00             	or     edi,DWORD PTR [eax+0x0]
    4503:	00 00                	add    BYTE PTR [eax],al
    4505:	03 33                	add    esi,DWORD PTR [ebx]
    4507:	6b 01 00             	imul   eax,DWORD PTR [ecx],0x0
    450a:	00 05 03 20 92 00    	add    BYTE PTR ds:0x922003,al
    4510:	9f                   	lahf   
    4511:	04 04                	add    al,0x4
    4513:	72 00                	jb     4515 <sysEnter_Vector-0x12baeb>
    4515:	00 00                	add    BYTE PTR [eax],al
    4517:	0b 10                	or     edx,DWORD PTR [eax]
    4519:	02 00                	add    al,BYTE PTR [eax]
    451b:	00 04 35 82 01 00 00 	add    BYTE PTR [esi*1+0x182],al
    4522:	05 03 30 92 00       	add    eax,0x923003
    4527:	9f                   	lahf   
    4528:	04 04                	add    al,0x4
    452a:	8a 00                	mov    al,BYTE PTR [eax]
    452c:	00 00                	add    BYTE PTR [eax],al
    452e:	0b 33                	or     esi,DWORD PTR [ebx]
    4530:	02 00                	add    al,BYTE PTR [eax]
    4532:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    4535:	7f 00                	jg     4537 <sysEnter_Vector-0x12bac9>
    4537:	00 00                	add    BYTE PTR [eax],al
    4539:	05 03 2c 92 00       	add    eax,0x922c03
    453e:	9f                   	lahf   
    453f:	00 27                	add    BYTE PTR [edi],ah
    4541:	01 00                	add    DWORD PTR [eax],eax
    4543:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4546:	b6 12                	mov    dh,0x12
    4548:	00 00                	add    BYTE PTR [eax],al
    454a:	04 01                	add    al,0x1
    454c:	c3                   	ret    
    454d:	00 00                	add    BYTE PTR [eax],al
    454f:	00 0c 57             	add    BYTE PTR [edi+edx*2],cl
    4552:	10 00                	adc    BYTE PTR [eax],al
    4554:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    4557:	00 00                	add    BYTE PTR [eax],al
    4559:	cc                   	int3   
    455a:	4a                   	dec    edx
    455b:	00 9f c7 00 00 00    	add    BYTE PTR [edi+0xc7],bl
    4561:	7c 18                	jl     457b <sysEnter_Vector-0x12ba85>
    4563:	00 00                	add    BYTE PTR [eax],al
    4565:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    456c:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    456f:	32 00                	xor    al,BYTE PTR [eax]
    4571:	00 00                	add    BYTE PTR [eax],al
    4573:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    457a:	03 08                	add    ecx,DWORD PTR [eax]
    457c:	05 00 00 00 00       	add    eax,0x0
    4581:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    4584:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4585:	00 00                	add    BYTE PTR [eax],al
    4587:	00 03                	add    BYTE PTR [ebx],al
    4589:	01 06                	add    DWORD PTR [esi],eax
    458b:	48                   	dec    eax
    458c:	00 00                	add    BYTE PTR [eax],al
    458e:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    4591:	10 00                	adc    BYTE PTR [eax],al
    4593:	00 01                	add    BYTE PTR [ecx],al
    4595:	04 8f                	add    al,0x8f
    4597:	00 00                	add    BYTE PTR [eax],al
    4599:	00 cc                	add    ah,cl
    459b:	4a                   	dec    edx
    459c:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    45a2:	01 9c 8f 00 00 00 05 	add    DWORD PTR [edi+ecx*4+0x5000000],ebx
    45a9:	73 31                	jae    45dc <sysEnter_Vector-0x12ba24>
    45ab:	00 01                	add    BYTE PTR [ecx],al
    45ad:	04 8f                	add    al,0x8f
    45af:	00 00                	add    BYTE PTR [eax],al
    45b1:	00 02                	add    BYTE PTR [edx],al
    45b3:	91                   	xchg   ecx,eax
    45b4:	00 05 73 32 00 01    	add    BYTE PTR ds:0x1003273,al
    45ba:	04 95                	add    al,0x95
    45bc:	00 00                	add    BYTE PTR [eax],al
    45be:	00 02                	add    BYTE PTR [edx],al
    45c0:	91                   	xchg   ecx,eax
    45c1:	04 06                	add    al,0x6
    45c3:	73 00                	jae    45c5 <sysEnter_Vector-0x12ba3b>
    45c5:	01 06                	add    DWORD PTR [esi],eax
    45c7:	8f 00                	pop    DWORD PTR [eax]
    45c9:	00 00                	add    BYTE PTR [eax],al
    45cb:	02 91 74 00 07 04    	add    dl,BYTE PTR [ecx+0x4070074]
    45d1:	48                   	dec    eax
    45d2:	00 00                	add    BYTE PTR [eax],al
    45d4:	00 07                	add    BYTE PTR [edi],al
    45d6:	04 9b                	add    al,0x9b
    45d8:	00 00                	add    BYTE PTR [eax],al
    45da:	00 08                	add    BYTE PTR [eax],cl
    45dc:	48                   	dec    eax
    45dd:	00 00                	add    BYTE PTR [eax],al
    45df:	00 04 4f             	add    BYTE PTR [edi+ecx*2],al
    45e2:	10 00                	adc    BYTE PTR [eax],al
    45e4:	00 01                	add    BYTE PTR [ecx],al
    45e6:	0e                   	push   cs
    45e7:	8f 00                	pop    DWORD PTR [eax]
    45e9:	00 00                	add    BYTE PTR [eax],al
    45eb:	0c 4b                	or     al,0x4b
    45ed:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    45f3:	01 9c e0 00 00 00 05 	add    DWORD PTR [eax+eiz*8+0x5000000],ebx
    45fa:	73 31                	jae    462d <sysEnter_Vector-0x12b9d3>
    45fc:	00 01                	add    BYTE PTR [ecx],al
    45fe:	0e                   	push   cs
    45ff:	8f 00                	pop    DWORD PTR [eax]
    4601:	00 00                	add    BYTE PTR [eax],al
    4603:	02 91 00 05 73 32    	add    dl,BYTE PTR [ecx+0x32730500]
    4609:	00 01                	add    BYTE PTR [ecx],al
    460b:	0e                   	push   cs
    460c:	95                   	xchg   ebp,eax
    460d:	00 00                	add    BYTE PTR [eax],al
    460f:	00 02                	add    BYTE PTR [edx],al
    4611:	91                   	xchg   ecx,eax
    4612:	04 06                	add    al,0x6
    4614:	73 00                	jae    4616 <sysEnter_Vector-0x12b9ea>
    4616:	01 10                	add    DWORD PTR [eax],edx
    4618:	8f 00                	pop    DWORD PTR [eax]
    461a:	00 00                	add    BYTE PTR [eax],al
    461c:	02 91 74 00 09 47    	add    dl,BYTE PTR [ecx+0x47090074]
    4622:	10 00                	adc    BYTE PTR [eax],al
    4624:	00 01                	add    BYTE PTR [ecx],al
    4626:	18 8f 00 00 00 4c    	sbb    BYTE PTR [edi+0x4c000000],cl
    462c:	4b                   	dec    ebx
    462d:	00 9f 47 00 00 00    	add    BYTE PTR [edi+0x47],bl
    4633:	01 9c 05 73 31 00 01 	add    DWORD PTR [ebp+eax*1+0x1003173],ebx
    463a:	18 8f 00 00 00 02    	sbb    BYTE PTR [edi+0x2000000],cl
    4640:	91                   	xchg   ecx,eax
    4641:	00 05 73 32 00 01    	add    BYTE PTR ds:0x1003273,al
    4647:	18 95 00 00 00 02    	sbb    BYTE PTR [ebp+0x2000000],dl
    464d:	91                   	xchg   ecx,eax
    464e:	04 0a                	add    al,0xa
    4650:	41                   	inc    ecx
    4651:	10 00                	adc    BYTE PTR [eax],al
    4653:	00 01                	add    BYTE PTR [ecx],al
    4655:	18 2c 00             	sbb    BYTE PTR [eax+eax*1],ch
    4658:	00 00                	add    BYTE PTR [eax],al
    465a:	02 91 08 06 73 00    	add    dl,BYTE PTR [ecx+0x730608]
    4660:	01 1a                	add    DWORD PTR [edx],ebx
    4662:	8f 00                	pop    DWORD PTR [eax]
    4664:	00 00                	add    BYTE PTR [eax],al
    4666:	02 91 74 00 00 42    	add    dl,BYTE PTR [ecx+0x42000074]
    466c:	01 00                	add    DWORD PTR [eax],eax
    466e:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4671:	53                   	push   ebx
    4672:	13 00                	adc    eax,DWORD PTR [eax]
    4674:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4677:	c3                   	ret    
    4678:	00 00                	add    BYTE PTR [eax],al
    467a:	00 0c 75 10 00 00 4d 	add    BYTE PTR [esi*2+0x4d000010],cl
    4681:	00 00                	add    BYTE PTR [eax],al
    4683:	00 94 4b 00 9f 89 00 	add    BYTE PTR [ebx+ecx*2+0x899f00],dl
    468a:	00 00                	add    BYTE PTR [eax],al
    468c:	eb 18                	jmp    46a6 <sysEnter_Vector-0x12b95a>
    468e:	00 00                	add    BYTE PTR [eax],al
    4690:	02 01                	add    al,BYTE PTR [ecx]
    4692:	08 3f                	or     BYTE PTR [edi],bh
    4694:	00 00                	add    BYTE PTR [eax],al
    4696:	00 02                	add    BYTE PTR [edx],al
    4698:	02 07                	add    al,BYTE PTR [edi]
    469a:	0e                   	push   cs
    469b:	00 00                	add    BYTE PTR [eax],al
    469d:	00 02                	add    BYTE PTR [edx],al
    469f:	04 07                	add    al,0x7
    46a1:	32 00                	xor    al,BYTE PTR [eax]
    46a3:	00 00                	add    BYTE PTR [eax],al
    46a5:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    46a8:	2d 00 00 00 02       	sub    eax,0x2000000
    46ad:	01 06                	add    DWORD PTR [esi],eax
    46af:	41                   	inc    ecx
    46b0:	00 00                	add    BYTE PTR [eax],al
    46b2:	00 02                	add    BYTE PTR [edx],al
    46b4:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    46ba:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    46c1:	02 08                	add    cl,BYTE PTR [eax]
    46c3:	05 00 00 00 00       	add    eax,0x0
    46c8:	02 08                	add    cl,BYTE PTR [eax]
    46ca:	07                   	pop    es
    46cb:	28 00                	sub    BYTE PTR [eax],al
    46cd:	00 00                	add    BYTE PTR [eax],al
    46cf:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    46d6:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    46d9:	2a 01                	sub    al,BYTE PTR [ecx]
    46db:	00 00                	add    BYTE PTR [eax],al
    46dd:	04 04                	add    al,0x4
    46df:	78 00                	js     46e1 <sysEnter_Vector-0x12b91f>
    46e1:	00 00                	add    BYTE PTR [eax],al
    46e3:	02 01                	add    al,BYTE PTR [ecx]
    46e5:	06                   	push   es
    46e6:	48                   	dec    eax
    46e7:	00 00                	add    BYTE PTR [eax],al
    46e9:	00 05 45 02 00 00    	add    BYTE PTR ds:0x245,al
    46ef:	02 34 33             	add    dh,BYTE PTR [ebx+esi*1]
    46f2:	00 00                	add    BYTE PTR [eax],al
    46f4:	00 05 01 02 00 00    	add    BYTE PTR ds:0x201,al
    46fa:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
    46fd:	00 00                	add    BYTE PTR [eax],al
    46ff:	00 02                	add    BYTE PTR [edx],al
    4701:	0c 04                	or     al,0x4
    4703:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4704:	00 00                	add    BYTE PTR [eax],al
    4706:	00 02                	add    BYTE PTR [edx],al
    4708:	01 02                	add    DWORD PTR [edx],eax
    470a:	e8 06 00 00 02       	call   2004715 <sysEnter_Vector+0x1ed4715>
    470f:	08 04 b2             	or     BYTE PTR [edx+esi*4],al
    4712:	00 00                	add    BYTE PTR [eax],al
    4714:	00 06                	add    BYTE PTR [esi],al
    4716:	8c 10                	mov    WORD PTR [eax],ss
    4718:	00 00                	add    BYTE PTR [eax],al
    471a:	01 09                	add    DWORD PTR [ecx],ecx
    471c:	9c                   	pushf  
    471d:	00 00                	add    BYTE PTR [eax],al
    471f:	00 94 4b 00 9f 30 00 	add    BYTE PTR [ebx+ecx*2+0x309f00],dl
    4726:	00 00                	add    BYTE PTR [eax],al
    4728:	01 9c d0 00 00 00 07 	add    DWORD PTR [eax+edx*8+0x7000000],ebx
    472f:	63 00                	arpl   WORD PTR [eax],ax
    4731:	01 09                	add    DWORD PTR [ecx],ecx
    4733:	78 00                	js     4735 <sysEnter_Vector-0x12b8cb>
    4735:	00 00                	add    BYTE PTR [eax],al
    4737:	02 91 74 00 08 6c    	add    dl,BYTE PTR [ecx+0x6c080074]
    473d:	10 00                	adc    BYTE PTR [eax],al
    473f:	00 01                	add    BYTE PTR [ecx],al
    4741:	0e                   	push   cs
    4742:	9c                   	pushf  
    4743:	00 00                	add    BYTE PTR [eax],al
    4745:	00 c4                	add    ah,al
    4747:	4b                   	dec    ebx
    4748:	00 9f 59 00 00 00    	add    BYTE PTR [edi+0x59],bl
    474e:	01 9c 06 01 00 00 07 	add    DWORD PTR [esi+eax*1+0x7000001],ebx
    4755:	73 74                	jae    47cb <sysEnter_Vector-0x12b835>
    4757:	72 00                	jb     4759 <sysEnter_Vector-0x12b8a7>
    4759:	01 0e                	add    DWORD PTR [esi],ecx
    475b:	72 00                	jb     475d <sysEnter_Vector-0x12b8a3>
    475d:	00 00                	add    BYTE PTR [eax],al
    475f:	02 91 00 09 63 6e    	add    dl,BYTE PTR [ecx+0x6e630900]
    4765:	74 00                	je     4767 <sysEnter_Vector-0x12b899>
    4767:	01 10                	add    DWORD PTR [eax],edx
    4769:	4f                   	dec    edi
    476a:	00 00                	add    BYTE PTR [eax],al
    476c:	00 02                	add    BYTE PTR [edx],al
    476e:	91                   	xchg   ecx,eax
    476f:	74 00                	je     4771 <sysEnter_Vector-0x12b88f>
    4771:	0a 78 00             	or     bh,BYTE PTR [eax+0x0]
    4774:	00 00                	add    BYTE PTR [eax],al
    4776:	03 33                	add    esi,DWORD PTR [ebx]
    4778:	17                   	pop    ss
    4779:	01 00                	add    DWORD PTR [eax],eax
    477b:	00 05 03 20 92 00    	add    BYTE PTR ds:0x922003,al
    4781:	9f                   	lahf   
    4782:	04 04                	add    al,0x4
    4784:	72 00                	jb     4786 <sysEnter_Vector-0x12b87a>
    4786:	00 00                	add    BYTE PTR [eax],al
    4788:	0a 10                	or     dl,BYTE PTR [eax]
    478a:	02 00                	add    al,BYTE PTR [eax]
    478c:	00 04 35 2e 01 00 00 	add    BYTE PTR [esi*1+0x12e],al
    4793:	05 03 30 92 00       	add    eax,0x923003
    4798:	9f                   	lahf   
    4799:	04 04                	add    al,0x4
    479b:	8a 00                	mov    al,BYTE PTR [eax]
    479d:	00 00                	add    BYTE PTR [eax],al
    479f:	0a 33                	or     dh,BYTE PTR [ebx]
    47a1:	02 00                	add    al,BYTE PTR [eax]
    47a3:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    47a6:	7f 00                	jg     47a8 <sysEnter_Vector-0x12b858>
    47a8:	00 00                	add    BYTE PTR [eax],al
    47aa:	05 03 2c 92 00       	add    eax,0x922c03
    47af:	9f                   	lahf   
    47b0:	00 d4                	add    ah,dl
    47b2:	01 00                	add    DWORD PTR [eax],eax
    47b4:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    47b7:	fa                   	cli    
    47b8:	13 00                	adc    eax,DWORD PTR [eax]
    47ba:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    47bd:	c3                   	ret    
    47be:	00 00                	add    BYTE PTR [eax],al
    47c0:	00 0c af             	add    BYTE PTR [edi+ebp*4],cl
    47c3:	10 00                	adc    BYTE PTR [eax],al
    47c5:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    47c8:	00 00                	add    BYTE PTR [eax],al
    47ca:	20 4c 00 9f          	and    BYTE PTR [eax+eax*1-0x61],cl
    47ce:	a2 00 00 00 b4       	mov    ds:0xb4000000,al
    47d3:	19 00                	sbb    DWORD PTR [eax],eax
    47d5:	00 02                	add    BYTE PTR [edx],al
    47d7:	01 08                	add    DWORD PTR [eax],ecx
    47d9:	3f                   	aas    
    47da:	00 00                	add    BYTE PTR [eax],al
    47dc:	00 02                	add    BYTE PTR [edx],al
    47de:	02 07                	add    al,BYTE PTR [edi]
    47e0:	0e                   	push   cs
    47e1:	00 00                	add    BYTE PTR [eax],al
    47e3:	00 02                	add    BYTE PTR [edx],al
    47e5:	04 07                	add    al,0x7
    47e7:	32 00                	xor    al,BYTE PTR [eax]
    47e9:	00 00                	add    BYTE PTR [eax],al
    47eb:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    47ee:	2d 00 00 00 02       	sub    eax,0x2000000
    47f3:	01 06                	add    DWORD PTR [esi],eax
    47f5:	41                   	inc    ecx
    47f6:	00 00                	add    BYTE PTR [eax],al
    47f8:	00 02                	add    BYTE PTR [edx],al
    47fa:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    4800:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    4807:	02 08                	add    cl,BYTE PTR [eax]
    4809:	05 00 00 00 00       	add    eax,0x0
    480e:	02 08                	add    cl,BYTE PTR [eax]
    4810:	07                   	pop    es
    4811:	28 00                	sub    BYTE PTR [eax],al
    4813:	00 00                	add    BYTE PTR [eax],al
    4815:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    481c:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    481f:	2a 01                	sub    al,BYTE PTR [ecx]
    4821:	00 00                	add    BYTE PTR [eax],al
    4823:	04 04                	add    al,0x4
    4825:	78 00                	js     4827 <sysEnter_Vector-0x12b7d9>
    4827:	00 00                	add    BYTE PTR [eax],al
    4829:	02 01                	add    al,BYTE PTR [ecx]
    482b:	06                   	push   es
    482c:	48                   	dec    eax
    482d:	00 00                	add    BYTE PTR [eax],al
    482f:	00 05 45 02 00 00    	add    BYTE PTR ds:0x245,al
    4835:	02 34 33             	add    dh,BYTE PTR [ebx+esi*1]
    4838:	00 00                	add    BYTE PTR [eax],al
    483a:	00 05 01 02 00 00    	add    BYTE PTR ds:0x201,al
    4840:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
    4843:	00 00                	add    BYTE PTR [eax],al
    4845:	00 05 91 02 00 00    	add    BYTE PTR ds:0x291,al
    484b:	03 d8                	add    ebx,eax
    484d:	33 00                	xor    eax,DWORD PTR [eax]
    484f:	00 00                	add    BYTE PTR [eax],al
    4851:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    4854:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4855:	00 00                	add    BYTE PTR [eax],al
    4857:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    485a:	ad                   	lods   eax,DWORD PTR ds:[esi]
    485b:	00 00                	add    BYTE PTR [eax],al
    485d:	00 06                	add    BYTE PTR [esi],al
    485f:	78 00                	js     4861 <sysEnter_Vector-0x12b79f>
    4861:	00 00                	add    BYTE PTR [eax],al
    4863:	02 01                	add    al,BYTE PTR [ecx]
    4865:	02 e8                	add    ch,al
    4867:	06                   	push   es
    4868:	00 00                	add    BYTE PTR [eax],al
    486a:	02 08                	add    cl,BYTE PTR [eax]
    486c:	04 b2                	add    al,0xb2
    486e:	00 00                	add    BYTE PTR [eax],al
    4870:	00 07                	add    BYTE PTR [edi],al
    4872:	98                   	cwde   
    4873:	10 00                	adc    BYTE PTR [eax],al
    4875:	00 01                	add    BYTE PTR [ecx],al
    4877:	04 95                	add    al,0x95
    4879:	00 00                	add    BYTE PTR [eax],al
    487b:	00 20                	add    BYTE PTR [eax],ah
    487d:	4c                   	dec    esp
    487e:	00 9f 31 00 00 00    	add    BYTE PTR [edi+0x31],bl
    4884:	01 9c f6 00 00 00 08 	add    DWORD PTR [esi+esi*8+0x8000000],ebx
    488b:	73 74                	jae    4901 <sysEnter_Vector-0x12b6ff>
    488d:	72 00                	jb     488f <sysEnter_Vector-0x12b771>
    488f:	01 04 a7             	add    DWORD PTR [edi+eiz*4],eax
    4892:	00 00                	add    BYTE PTR [eax],al
    4894:	00 02                	add    BYTE PTR [edx],al
    4896:	91                   	xchg   ecx,eax
    4897:	00 09                	add    BYTE PTR [ecx],cl
    4899:	72 65                	jb     4900 <sysEnter_Vector-0x12b700>
    489b:	74 00                	je     489d <sysEnter_Vector-0x12b763>
    489d:	01 05 95 00 00 00    	add    DWORD PTR ds:0x95,eax
    48a3:	02 91 74 00 0a a0    	add    dl,BYTE PTR [ecx-0x5ff5ff8c]
    48a9:	10 00                	adc    BYTE PTR [eax],al
    48ab:	00 01                	add    BYTE PTR [ecx],al
    48ad:	0b 95 00 00 00 51    	or     edx,DWORD PTR [ebp+0x51000000]
    48b3:	4c                   	dec    esp
    48b4:	00 9f 1a 00 00 00    	add    BYTE PTR [edi+0x1a],bl
    48ba:	01 9c 1e 01 00 00 08 	add    DWORD PTR [esi+ebx*1+0x8000001],ebx
    48c1:	73 74                	jae    4937 <sysEnter_Vector-0x12b6c9>
    48c3:	72 00                	jb     48c5 <sysEnter_Vector-0x12b73b>
    48c5:	01 0b                	add    DWORD PTR [ebx],ecx
    48c7:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    48c8:	00 00                	add    BYTE PTR [eax],al
    48ca:	00 02                	add    BYTE PTR [edx],al
    48cc:	91                   	xchg   ecx,eax
    48cd:	00 00                	add    BYTE PTR [eax],al
    48cf:	07                   	pop    es
    48d0:	50                   	push   eax
    48d1:	0f 00 00             	sldt   WORD PTR [eax]
    48d4:	01 10                	add    DWORD PTR [eax],edx
    48d6:	95                   	xchg   ebp,eax
    48d7:	00 00                	add    BYTE PTR [eax],al
    48d9:	00 6b 4c             	add    BYTE PTR [ebx+0x4c],ch
    48dc:	00 9f 39 00 00 00    	add    BYTE PTR [edi+0x39],bl
    48e2:	01 9c 62 01 00 00 08 	add    DWORD PTR [edx+eiz*2+0x8000001],ebx
    48e9:	73 74                	jae    495f <sysEnter_Vector-0x12b6a1>
    48eb:	72 00                	jb     48ed <sysEnter_Vector-0x12b713>
    48ed:	01 10                	add    DWORD PTR [eax],edx
    48ef:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    48f0:	00 00                	add    BYTE PTR [eax],al
    48f2:	00 02                	add    BYTE PTR [edx],al
    48f4:	91                   	xchg   ecx,eax
    48f5:	00 0b                	add    BYTE PTR [ebx],cl
    48f7:	d8 07                	fadd   DWORD PTR [edi]
    48f9:	00 00                	add    BYTE PTR [eax],al
    48fb:	01 10                	add    DWORD PTR [eax],edx
    48fd:	95                   	xchg   ebp,eax
    48fe:	00 00                	add    BYTE PTR [eax],al
    4900:	00 02                	add    BYTE PTR [edx],al
    4902:	91                   	xchg   ecx,eax
    4903:	04 09                	add    al,0x9
    4905:	72 65                	jb     496c <sysEnter_Vector-0x12b694>
    4907:	74 00                	je     4909 <sysEnter_Vector-0x12b6f7>
    4909:	01 12                	add    DWORD PTR [edx],edx
    490b:	95                   	xchg   ebp,eax
    490c:	00 00                	add    BYTE PTR [eax],al
    490e:	00 02                	add    BYTE PTR [edx],al
    4910:	91                   	xchg   ecx,eax
    4911:	74 00                	je     4913 <sysEnter_Vector-0x12b6ed>
    4913:	0a a7 10 00 00 01    	or     ah,BYTE PTR [edi+0x1000010]
    4919:	18 95 00 00 00 a4    	sbb    BYTE PTR [ebp-0x5c000000],dl
    491f:	4c                   	dec    esp
    4920:	00 9f 1e 00 00 00    	add    BYTE PTR [edi+0x1e],bl
    4926:	01 9c 98 01 00 00 08 	add    DWORD PTR [eax+ebx*4+0x8000001],ebx
    492d:	73 74                	jae    49a3 <sysEnter_Vector-0x12b65d>
    492f:	72 00                	jb     4931 <sysEnter_Vector-0x12b6cf>
    4931:	01 18                	add    DWORD PTR [eax],ebx
    4933:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    4934:	00 00                	add    BYTE PTR [eax],al
    4936:	00 02                	add    BYTE PTR [edx],al
    4938:	91                   	xchg   ecx,eax
    4939:	00 0b                	add    BYTE PTR [ebx],cl
    493b:	d8 07                	fadd   DWORD PTR [edi]
    493d:	00 00                	add    BYTE PTR [eax],al
    493f:	01 18                	add    DWORD PTR [eax],ebx
    4941:	4f                   	dec    edi
    4942:	00 00                	add    BYTE PTR [eax],al
    4944:	00 02                	add    BYTE PTR [edx],al
    4946:	91                   	xchg   ecx,eax
    4947:	04 00                	add    al,0x0
    4949:	0c 78                	or     al,0x78
    494b:	00 00                	add    BYTE PTR [eax],al
    494d:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    4950:	a9 01 00 00 05       	test   eax,0x5000001
    4955:	03 20                	add    esp,DWORD PTR [eax]
    4957:	92                   	xchg   edx,eax
    4958:	00 9f 04 04 72 00    	add    BYTE PTR [edi+0x720404],bl
    495e:	00 00                	add    BYTE PTR [eax],al
    4960:	0c 10                	or     al,0x10
    4962:	02 00                	add    al,BYTE PTR [eax]
    4964:	00 05 35 c0 01 00    	add    BYTE PTR ds:0x1c035,al
    496a:	00 05 03 30 92 00    	add    BYTE PTR ds:0x923003,al
    4970:	9f                   	lahf   
    4971:	04 04                	add    al,0x4
    4973:	8a 00                	mov    al,BYTE PTR [eax]
    4975:	00 00                	add    BYTE PTR [eax],al
    4977:	0c 33                	or     al,0x33
    4979:	02 00                	add    al,BYTE PTR [eax]
    497b:	00 05 36 7f 00 00    	add    BYTE PTR ds:0x7f36,al
    4981:	00 05 03 2c 92 00    	add    BYTE PTR ds:0x922c03,al
    4987:	9f                   	lahf   
    4988:	00 de                	add    dh,bl
    498a:	00 00                	add    BYTE PTR [eax],al
    498c:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    498f:	b7 14                	mov    bh,0x14
    4991:	00 00                	add    BYTE PTR [eax],al
    4993:	04 01                	add    al,0x1
    4995:	c3                   	ret    
    4996:	00 00                	add    BYTE PTR [eax],al
    4998:	00 0c d5 10 00 00 4d 	add    BYTE PTR [edx*8+0x4d000010],cl
    499f:	00 00                	add    BYTE PTR [eax],al
    49a1:	00 c4                	add    ah,al
    49a3:	4c                   	dec    esp
    49a4:	00 9f ce 00 00 00    	add    BYTE PTR [edi+0xce],bl
    49aa:	87 1a                	xchg   DWORD PTR [edx],ebx
    49ac:	00 00                	add    BYTE PTR [eax],al
    49ae:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    49b5:	03 91 02 00 00 02    	add    edx,DWORD PTR [ecx+0x2000002]
    49bb:	d8 37                	fdiv   DWORD PTR [edi]
    49bd:	00 00                	add    BYTE PTR [eax],al
    49bf:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    49c2:	07                   	pop    es
    49c3:	32 00                	xor    al,BYTE PTR [eax]
    49c5:	00 00                	add    BYTE PTR [eax],al
    49c7:	04 04                	add    al,0x4
    49c9:	05 05 00 00 00       	add    eax,0x5
    49ce:	04 08                	add    al,0x8
    49d0:	05 00 00 00 00       	add    eax,0x0
    49d5:	04 0c                	add    al,0xc
    49d7:	04 ad                	add    al,0xad
    49d9:	00 00                	add    BYTE PTR [eax],al
    49db:	00 05 cd 10 00 00    	add    BYTE PTR ds:0x10cd,al
    49e1:	01 0c 25 00 00 00 c4 	add    DWORD PTR [eiz*1-0x3c000000],ecx
    49e8:	4c                   	dec    esp
    49e9:	00 9f 67 00 00 00    	add    BYTE PTR [edi+0x67],bl
    49ef:	01 9c 93 00 00 00 06 	add    DWORD PTR [ebx+edx*4+0x6000000],ebx
    49f6:	73 31                	jae    4a29 <sysEnter_Vector-0x12b5d7>
    49f8:	00 01                	add    BYTE PTR [ecx],al
    49fa:	0c 93                	or     al,0x93
    49fc:	00 00                	add    BYTE PTR [eax],al
    49fe:	00 02                	add    BYTE PTR [edx],al
    4a00:	91                   	xchg   ecx,eax
    4a01:	00 06                	add    BYTE PTR [esi],al
    4a03:	73 32                	jae    4a37 <sysEnter_Vector-0x12b5c9>
    4a05:	00 01                	add    BYTE PTR [ecx],al
    4a07:	0c 93                	or     al,0x93
    4a09:	00 00                	add    BYTE PTR [eax],al
    4a0b:	00 02                	add    BYTE PTR [edx],al
    4a0d:	91                   	xchg   ecx,eax
    4a0e:	04 06                	add    al,0x6
    4a10:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4a11:	00 01                	add    BYTE PTR [ecx],al
    4a13:	0c 2c                	or     al,0x2c
    4a15:	00 00                	add    BYTE PTR [eax],al
    4a17:	00 02                	add    BYTE PTR [edx],al
    4a19:	91                   	xchg   ecx,eax
    4a1a:	08 00                	or     BYTE PTR [eax],al
    4a1c:	07                   	pop    es
    4a1d:	04 a0                	add    al,0xa0
    4a1f:	00 00                	add    BYTE PTR [eax],al
    4a21:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4a24:	06                   	push   es
    4a25:	48                   	dec    eax
    4a26:	00 00                	add    BYTE PTR [eax],al
    4a28:	00 08                	add    BYTE PTR [eax],cl
    4a2a:	99                   	cdq    
    4a2b:	00 00                	add    BYTE PTR [eax],al
    4a2d:	00 09                	add    BYTE PTR [ecx],cl
    4a2f:	c4 10                	les    edx,FWORD PTR [eax]
    4a31:	00 00                	add    BYTE PTR [eax],al
    4a33:	01 16                	add    DWORD PTR [esi],edx
    4a35:	25 00 00 00 2b       	and    eax,0x2b000000
    4a3a:	4d                   	dec    ebp
    4a3b:	00 9f 67 00 00 00    	add    BYTE PTR [edi+0x67],bl
    4a41:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    4a48:	16                   	push   ss
    4a49:	93                   	xchg   ebx,eax
    4a4a:	00 00                	add    BYTE PTR [eax],al
    4a4c:	00 02                	add    BYTE PTR [edx],al
    4a4e:	91                   	xchg   ecx,eax
    4a4f:	00 06                	add    BYTE PTR [esi],al
    4a51:	73 32                	jae    4a85 <sysEnter_Vector-0x12b57b>
    4a53:	00 01                	add    BYTE PTR [ecx],al
    4a55:	16                   	push   ss
    4a56:	93                   	xchg   ebx,eax
    4a57:	00 00                	add    BYTE PTR [eax],al
    4a59:	00 02                	add    BYTE PTR [edx],al
    4a5b:	91                   	xchg   ecx,eax
    4a5c:	04 06                	add    al,0x6
    4a5e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4a5f:	00 01                	add    BYTE PTR [ecx],al
    4a61:	16                   	push   ss
    4a62:	2c 00                	sub    al,0x0
    4a64:	00 00                	add    BYTE PTR [eax],al
    4a66:	02 91 08 00 00 f0    	add    dl,BYTE PTR [ecx-0xffffff8]
    4a6c:	00 00                	add    BYTE PTR [eax],al
    4a6e:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4a71:	43                   	inc    ebx
    4a72:	15 00 00 04 01       	adc    eax,0x1040000
    4a77:	c3                   	ret    
    4a78:	00 00                	add    BYTE PTR [eax],al
    4a7a:	00 0c eb             	add    BYTE PTR [ebx+ebp*8],cl
    4a7d:	10 00                	adc    BYTE PTR [eax],al
    4a7f:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    4a82:	00 00                	add    BYTE PTR [eax],al
    4a84:	94                   	xchg   esp,eax
    4a85:	4d                   	dec    ebp
    4a86:	00 9f 8c 00 00 00    	add    BYTE PTR [edi+0x8c],bl
    4a8c:	4c                   	dec    esp
    4a8d:	1b 00                	sbb    eax,DWORD PTR [eax]
    4a8f:	00 02                	add    BYTE PTR [edx],al
    4a91:	04 05                	add    al,0x5
    4a93:	69 6e 74 00 03 91 02 	imul   ebp,DWORD PTR [esi+0x74],0x2910300
    4a9a:	00 00                	add    BYTE PTR [eax],al
    4a9c:	02 d8                	add    bl,al
    4a9e:	37                   	aaa    
    4a9f:	00 00                	add    BYTE PTR [eax],al
    4aa1:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    4aa4:	07                   	pop    es
    4aa5:	32 00                	xor    al,BYTE PTR [eax]
    4aa7:	00 00                	add    BYTE PTR [eax],al
    4aa9:	04 04                	add    al,0x4
    4aab:	05 05 00 00 00       	add    eax,0x5
    4ab0:	04 08                	add    al,0x8
    4ab2:	05 00 00 00 00       	add    eax,0x0
    4ab7:	04 0c                	add    al,0xc
    4ab9:	04 ad                	add    al,0xad
    4abb:	00 00                	add    BYTE PTR [eax],al
    4abd:	00 05 01 11 00 00    	add    BYTE PTR ds:0x1101,al
    4ac3:	01 0d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ecx
    4ac9:	94                   	xchg   esp,eax
    4aca:	4d                   	dec    ebp
    4acb:	00 9f 6c 00 00 00    	add    BYTE PTR [edi+0x6c],bl
    4ad1:	01 9c 9f 00 00 00 06 	add    DWORD PTR [edi+ebx*4+0x6000000],ebx
    4ad8:	73 31                	jae    4b0b <sysEnter_Vector-0x12b4f5>
    4ada:	00 01                	add    BYTE PTR [ecx],al
    4adc:	0d 9f 00 00 00       	or     eax,0x9f
    4ae1:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    4ae7:	00 01                	add    BYTE PTR [ecx],al
    4ae9:	0d ac 00 00 00       	or     eax,0xac
    4aee:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    4af4:	01 0d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ecx
    4afa:	02 91 08 07 73 00    	add    dl,BYTE PTR [ecx+0x730708]
    4b00:	01 0f                	add    DWORD PTR [edi],ecx
    4b02:	9f                   	lahf   
    4b03:	00 00                	add    BYTE PTR [eax],al
    4b05:	00 02                	add    BYTE PTR [edx],al
    4b07:	91                   	xchg   ecx,eax
    4b08:	74 00                	je     4b0a <sysEnter_Vector-0x12b4f6>
    4b0a:	08 04 a5 00 00 00 04 	or     BYTE PTR [eiz*4+0x4000000],al
    4b11:	01 06                	add    DWORD PTR [esi],eax
    4b13:	48                   	dec    eax
    4b14:	00 00                	add    BYTE PTR [eax],al
    4b16:	00 08                	add    BYTE PTR [eax],cl
    4b18:	04 b2                	add    al,0xb2
    4b1a:	00 00                	add    BYTE PTR [eax],al
    4b1c:	00 09                	add    BYTE PTR [ecx],cl
    4b1e:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    4b1f:	00 00                	add    BYTE PTR [eax],al
    4b21:	00 0a                	add    BYTE PTR [edx],cl
    4b23:	0a 11                	or     dl,BYTE PTR [ecx]
    4b25:	00 00                	add    BYTE PTR [eax],al
    4b27:	01 1d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ebx
    4b2d:	00 4e 00             	add    BYTE PTR [esi+0x0],cl
    4b30:	9f                   	lahf   
    4b31:	20 00                	and    BYTE PTR [eax],al
    4b33:	00 00                	add    BYTE PTR [eax],al
    4b35:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    4b3c:	1d 9f 00 00 00       	sbb    eax,0x9f
    4b41:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    4b47:	00 01                	add    BYTE PTR [ecx],al
    4b49:	1d ac 00 00 00       	sbb    eax,0xac
    4b4e:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    4b54:	01 1d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ebx
    4b5a:	02 91 08 00 00 01    	add    dl,BYTE PTR [ecx+0x1000008]
    4b60:	01 00                	add    DWORD PTR [eax],eax
    4b62:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4b65:	de 15 00 00 04 01    	ficom  WORD PTR ds:0x1040000
    4b6b:	c3                   	ret    
    4b6c:	00 00                	add    BYTE PTR [eax],al
    4b6e:	00 0c 25 11 00 00 4d 	add    BYTE PTR [eiz*1+0x4d000011],cl
    4b75:	00 00                	add    BYTE PTR [eax],al
    4b77:	00 20                	add    BYTE PTR [eax],ah
    4b79:	4e                   	dec    esi
    4b7a:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
    4b80:	f3 1b 00             	repz sbb eax,DWORD PTR [eax]
    4b83:	00 02                	add    BYTE PTR [edx],al
    4b85:	04 05                	add    al,0x5
    4b87:	69 6e 74 00 03 04 07 	imul   ebp,DWORD PTR [esi+0x74],0x7040300
    4b8e:	32 00                	xor    al,BYTE PTR [eax]
    4b90:	00 00                	add    BYTE PTR [eax],al
    4b92:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    4b99:	03 08                	add    ecx,DWORD PTR [eax]
    4b9b:	05 00 00 00 00       	add    eax,0x0
    4ba0:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    4ba3:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4ba4:	00 00                	add    BYTE PTR [eax],al
    4ba6:	00 03                	add    BYTE PTR [ebx],al
    4ba8:	01 06                	add    DWORD PTR [esi],eax
    4baa:	48                   	dec    eax
    4bab:	00 00                	add    BYTE PTR [eax],al
    4bad:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    4bb0:	11 00                	adc    DWORD PTR [eax],eax
    4bb2:	00 01                	add    BYTE PTR [ecx],al
    4bb4:	3b e6                	cmp    esp,esi
    4bb6:	00 00                	add    BYTE PTR [eax],al
    4bb8:	00 20                	add    BYTE PTR [eax],ah
    4bba:	4e                   	dec    esi
    4bbb:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
    4bc1:	01 9c e6 00 00 00 05 	add    DWORD PTR [esi+eiz*8+0x5000000],ebx
    4bc8:	12 11                	adc    dl,BYTE PTR [ecx]
    4bca:	00 00                	add    BYTE PTR [eax],al
    4bcc:	01 3b                	add    DWORD PTR [ebx],edi
    4bce:	ed                   	in     eax,dx
    4bcf:	00 00                	add    BYTE PTR [eax],al
    4bd1:	00 02                	add    BYTE PTR [edx],al
    4bd3:	91                   	xchg   ecx,eax
    4bd4:	00 05 42 11 00 00    	add    BYTE PTR ds:0x1142,al
    4bda:	01 3b                	add    DWORD PTR [ebx],edi
    4bdc:	f8                   	clc    
    4bdd:	00 00                	add    BYTE PTR [eax],al
    4bdf:	00 02                	add    BYTE PTR [edx],al
    4be1:	91                   	xchg   ecx,eax
    4be2:	04 05                	add    al,0x5
    4be4:	72 0f                	jb     4bf5 <sysEnter_Vector-0x12b40b>
    4be6:	00 00                	add    BYTE PTR [eax],al
    4be8:	01 3b                	add    DWORD PTR [ebx],edi
    4bea:	25 00 00 00 02       	and    eax,0x2000000
    4bef:	91                   	xchg   ecx,eax
    4bf0:	08 06                	or     BYTE PTR [esi],al
    4bf2:	73 00                	jae    4bf4 <sysEnter_Vector-0x12b40c>
    4bf4:	01 3d ed 00 00 00    	add    DWORD PTR ds:0xed,edi
    4bfa:	01 56 06             	add    DWORD PTR [esi+0x6],edx
    4bfd:	61                   	popa   
    4bfe:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    4c01:	01 3e                	add    DWORD PTR [esi],edi
    4c03:	e6 00                	out    0x0,al
    4c05:	00 00                	add    BYTE PTR [eax],al
    4c07:	01 57 06             	add    DWORD PTR [edi+0x6],edx
    4c0a:	63 00                	arpl   WORD PTR [eax],ax
    4c0c:	01 3f                	add    DWORD PTR [edi],edi
    4c0e:	25 00 00 00 01       	and    eax,0x1000000
    4c13:	53                   	push   ebx
    4c14:	07                   	pop    es
    4c15:	17                   	pop    ss
    4c16:	11 00                	adc    DWORD PTR [eax],eax
    4c18:	00 01                	add    BYTE PTR [ecx],al
    4c1a:	40                   	inc    eax
    4c1b:	e6 00                	out    0x0,al
    4c1d:	00 00                	add    BYTE PTR [eax],al
    4c1f:	08 6e 65             	or     BYTE PTR [esi+0x65],ch
    4c22:	67 00 01             	add    BYTE PTR [bx+di],al
    4c25:	41                   	inc    ecx
    4c26:	25 00 00 00 06       	and    eax,0x6000000
    4c2b:	61                   	popa   
    4c2c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4c2d:	79 00                	jns    4c2f <sysEnter_Vector-0x12b3d1>
    4c2f:	01 41 25             	add    DWORD PTR [ecx+0x25],eax
    4c32:	00 00                	add    BYTE PTR [eax],al
    4c34:	00 01                	add    BYTE PTR [ecx],al
    4c36:	51                   	push   ecx
    4c37:	09 1e                	or     DWORD PTR [esi],ebx
    4c39:	11 00                	adc    DWORD PTR [eax],eax
    4c3b:	00 01                	add    BYTE PTR [ecx],al
    4c3d:	41                   	inc    ecx
    4c3e:	25 00 00 00 01       	and    eax,0x1000000
    4c43:	52                   	push   edx
    4c44:	00 03                	add    BYTE PTR [ebx],al
    4c46:	04 07                	add    al,0x7
    4c48:	2d 00 00 00 0a       	sub    eax,0xa000000
    4c4d:	04 f3                	add    al,0xf3
    4c4f:	00 00                	add    BYTE PTR [eax],al
    4c51:	00 0b                	add    BYTE PTR [ebx],cl
    4c53:	48                   	dec    eax
    4c54:	00 00                	add    BYTE PTR [eax],al
    4c56:	00 0a                	add    BYTE PTR [edx],cl
    4c58:	04 fe                	add    al,0xfe
    4c5a:	00 00                	add    BYTE PTR [eax],al
    4c5c:	00 0a                	add    BYTE PTR [edx],cl
    4c5e:	04 48                	add    al,0x48
    4c60:	00 00                	add    BYTE PTR [eax],al
    4c62:	00 00                	add    BYTE PTR [eax],al
    4c64:	6c                   	ins    BYTE PTR es:[edi],dx
    4c65:	00 00                	add    BYTE PTR [eax],al
    4c67:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4c6a:	7b 16                	jnp    4c82 <sysEnter_Vector-0x12b37e>
    4c6c:	00 00                	add    BYTE PTR [eax],al
    4c6e:	04 01                	add    al,0x1
    4c70:	c3                   	ret    
    4c71:	00 00                	add    BYTE PTR [eax],al
    4c73:	00 0c 49             	add    BYTE PTR [ecx+ecx*2],cl
    4c76:	11 00                	adc    DWORD PTR [eax],eax
    4c78:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    4c7b:	00 00                	add    BYTE PTR [eax],al
    4c7d:	a0 4f 00 9f 1d       	mov    al,ds:0x1d9f004f
    4c82:	00 00                	add    BYTE PTR [eax],al
    4c84:	00 cf                	add    bh,cl
    4c86:	1c 00                	sbb    al,0x0
    4c88:	00 02                	add    BYTE PTR [edx],al
    4c8a:	60                   	pusha  
    4c8b:	11 00                	adc    DWORD PTR [eax],eax
    4c8d:	00 01                	add    BYTE PTR [ecx],al
    4c8f:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    4c92:	00 00                	add    BYTE PTR [eax],al
    4c94:	a0 4f 00 9f 1d       	mov    al,ds:0x1d9f004f
    4c99:	00 00                	add    BYTE PTR [eax],al
    4c9b:	00 01                	add    BYTE PTR [ecx],al
    4c9d:	9c                   	pushf  
    4c9e:	5b                   	pop    ebx
    4c9f:	00 00                	add    BYTE PTR [eax],al
    4ca1:	00 03                	add    BYTE PTR [ebx],al
    4ca3:	76 61                	jbe    4d06 <sysEnter_Vector-0x12b2fa>
    4ca5:	6c                   	ins    BYTE PTR es:[edi],dx
    4ca6:	00 01                	add    BYTE PTR [ecx],al
    4ca8:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    4cab:	00 00                	add    BYTE PTR [eax],al
    4cad:	02 91 00 03 63 6e    	add    dl,BYTE PTR [ecx+0x6e630300]
    4cb3:	74 00                	je     4cb5 <sysEnter_Vector-0x12b34b>
    4cb5:	01 01                	add    DWORD PTR [ecx],eax
    4cb7:	68 00 00 00 02       	push   0x2000000
    4cbc:	91                   	xchg   ecx,eax
    4cbd:	04 00                	add    al,0x0
    4cbf:	04 04                	add    al,0x4
    4cc1:	61                   	popa   
    4cc2:	00 00                	add    BYTE PTR [eax],al
    4cc4:	00 05 01 06 48 00    	add    BYTE PTR ds:0x480601,al
    4cca:	00 00                	add    BYTE PTR [eax],al
    4ccc:	06                   	push   es
    4ccd:	04 05                	add    al,0x5
    4ccf:	69 6e 74 00 00 ff 00 	imul   ebp,DWORD PTR [esi+0x74],0xff0000
    4cd6:	00 00                	add    BYTE PTR [eax],al
    4cd8:	04 00                	add    al,0x0
    4cda:	d9 16                	fst    DWORD PTR [esi]
    4cdc:	00 00                	add    BYTE PTR [eax],al
    4cde:	04 01                	add    al,0x1
    4ce0:	c3                   	ret    
    4ce1:	00 00                	add    BYTE PTR [eax],al
    4ce3:	00 0c 6f             	add    BYTE PTR [edi+ebp*2],cl
    4ce6:	11 00                	adc    DWORD PTR [eax],eax
    4ce8:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    4ceb:	00 00                	add    BYTE PTR [eax],al
    4ced:	c0 4f 00 9f          	ror    BYTE PTR [edi+0x0],0x9f
    4cf1:	9c                   	pushf  
    4cf2:	01 00                	add    DWORD PTR [eax],eax
    4cf4:	00 16                	add    BYTE PTR [esi],dl
    4cf6:	1d 00 00 02 04       	sbb    eax,0x4020000
    4cfb:	05 69 6e 74 00       	add    eax,0x746e69
    4d00:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    4d03:	32 00                	xor    al,BYTE PTR [eax]
    4d05:	00 00                	add    BYTE PTR [eax],al
    4d07:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    4d0e:	03 08                	add    ecx,DWORD PTR [eax]
    4d10:	05 00 00 00 00       	add    eax,0x0
    4d15:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    4d18:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4d19:	00 00                	add    BYTE PTR [eax],al
    4d1b:	00 03                	add    BYTE PTR [ebx],al
    4d1d:	01 06                	add    DWORD PTR [esi],eax
    4d1f:	48                   	dec    eax
    4d20:	00 00                	add    BYTE PTR [eax],al
    4d22:	00 04 68             	add    BYTE PTR [eax+ebp*2],al
    4d25:	11 00                	adc    DWORD PTR [eax],eax
    4d27:	00 01                	add    BYTE PTR [ecx],al
    4d29:	57                   	push   edi
    4d2a:	33 00                	xor    eax,DWORD PTR [eax]
    4d2c:	00 00                	add    BYTE PTR [eax],al
    4d2e:	c0 4f 00 9f          	ror    BYTE PTR [edi+0x0],0x9f
    4d32:	9c                   	pushf  
    4d33:	01 00                	add    DWORD PTR [eax],eax
    4d35:	00 01                	add    BYTE PTR [ecx],al
    4d37:	9c                   	pushf  
    4d38:	e4 00                	in     al,0x0
    4d3a:	00 00                	add    BYTE PTR [eax],al
    4d3c:	05 12 11 00 00       	add    eax,0x1112
    4d41:	01 57 e4             	add    DWORD PTR [edi-0x1c],edx
    4d44:	00 00                	add    BYTE PTR [eax],al
    4d46:	00 02                	add    BYTE PTR [edx],al
    4d48:	91                   	xchg   ecx,eax
    4d49:	00 05 42 11 00 00    	add    BYTE PTR ds:0x1142,al
    4d4f:	01 57 ef             	add    DWORD PTR [edi-0x11],edx
    4d52:	00 00                	add    BYTE PTR [eax],al
    4d54:	00 02                	add    BYTE PTR [edx],al
    4d56:	91                   	xchg   ecx,eax
    4d57:	04 05                	add    al,0x5
    4d59:	72 0f                	jb     4d6a <sysEnter_Vector-0x12b296>
    4d5b:	00 00                	add    BYTE PTR [eax],al
    4d5d:	01 57 25             	add    DWORD PTR [edi+0x25],edx
    4d60:	00 00                	add    BYTE PTR [eax],al
    4d62:	00 02                	add    BYTE PTR [edx],al
    4d64:	91                   	xchg   ecx,eax
    4d65:	08 06                	or     BYTE PTR [esi],al
    4d67:	73 00                	jae    4d69 <sysEnter_Vector-0x12b297>
    4d69:	01 59 e4             	add    DWORD PTR [ecx-0x1c],ebx
    4d6c:	00 00                	add    BYTE PTR [eax],al
    4d6e:	00 01                	add    BYTE PTR [ecx],al
    4d70:	56                   	push   esi
    4d71:	06                   	push   es
    4d72:	61                   	popa   
    4d73:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    4d76:	01 5a fb             	add    DWORD PTR [edx-0x5],ebx
    4d79:	00 00                	add    BYTE PTR [eax],al
    4d7b:	00 01                	add    BYTE PTR [ecx],al
    4d7d:	57                   	push   edi
    4d7e:	06                   	push   es
    4d7f:	63 00                	arpl   WORD PTR [eax],ax
    4d81:	01 5b 25             	add    DWORD PTR [ebx+0x25],ebx
    4d84:	00 00                	add    BYTE PTR [eax],al
    4d86:	00 01                	add    BYTE PTR [ecx],al
    4d88:	53                   	push   ebx
    4d89:	07                   	pop    es
    4d8a:	17                   	pop    ss
    4d8b:	11 00                	adc    DWORD PTR [eax],eax
    4d8d:	00 01                	add    BYTE PTR [ecx],al
    4d8f:	5c                   	pop    esp
    4d90:	fb                   	sti    
    4d91:	00 00                	add    BYTE PTR [eax],al
    4d93:	00 08                	add    BYTE PTR [eax],cl
    4d95:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4d96:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    4d9a:	5d                   	pop    ebp
    4d9b:	25 00 00 00 06       	and    eax,0x6000000
    4da0:	61                   	popa   
    4da1:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4da2:	79 00                	jns    4da4 <sysEnter_Vector-0x12b25c>
    4da4:	01 5d 25             	add    DWORD PTR [ebp+0x25],ebx
    4da7:	00 00                	add    BYTE PTR [eax],al
    4da9:	00 01                	add    BYTE PTR [ecx],al
    4dab:	51                   	push   ecx
    4dac:	07                   	pop    es
    4dad:	1e                   	push   ds
    4dae:	11 00                	adc    DWORD PTR [eax],eax
    4db0:	00 01                	add    BYTE PTR [ecx],al
    4db2:	5d                   	pop    ebp
    4db3:	25 00 00 00 00       	and    eax,0x0
    4db8:	09 04 ea             	or     DWORD PTR [edx+ebp*8],eax
    4dbb:	00 00                	add    BYTE PTR [eax],al
    4dbd:	00 0a                	add    BYTE PTR [edx],cl
    4dbf:	48                   	dec    eax
    4dc0:	00 00                	add    BYTE PTR [eax],al
    4dc2:	00 09                	add    BYTE PTR [ecx],cl
    4dc4:	04 f5                	add    al,0xf5
    4dc6:	00 00                	add    BYTE PTR [eax],al
    4dc8:	00 09                	add    BYTE PTR [ecx],cl
    4dca:	04 48                	add    al,0x48
    4dcc:	00 00                	add    BYTE PTR [eax],al
    4dce:	00 03                	add    BYTE PTR [ebx],al
    4dd0:	04 07                	add    al,0x7
    4dd2:	2d 00 00 00 00       	sub    eax,0x0
    4dd7:	c0 00 00             	rol    BYTE PTR [eax],0x0
    4dda:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4ddd:	67 17                	addr16 pop ss
    4ddf:	00 00                	add    BYTE PTR [eax],al
    4de1:	04 01                	add    al,0x1
    4de3:	c3                   	ret    
    4de4:	00 00                	add    BYTE PTR [eax],al
    4de6:	00 0c 84             	add    BYTE PTR [esp+eax*4],cl
    4de9:	11 00                	adc    DWORD PTR [eax],eax
    4deb:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    4dee:	00 00                	add    BYTE PTR [eax],al
    4df0:	5c                   	pop    esp
    4df1:	51                   	push   ecx
    4df2:	00 9f b6 00 00 00    	add    BYTE PTR [edi+0xb6],bl
    4df8:	1e                   	push   ds
    4df9:	1e                   	push   ds
    4dfa:	00 00                	add    BYTE PTR [eax],al
    4dfc:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    4e03:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    4e06:	32 00                	xor    al,BYTE PTR [eax]
    4e08:	00 00                	add    BYTE PTR [eax],al
    4e0a:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    4e11:	03 08                	add    ecx,DWORD PTR [eax]
    4e13:	05 00 00 00 00       	add    eax,0x0
    4e18:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    4e1b:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4e1c:	00 00                	add    BYTE PTR [eax],al
    4e1e:	00 03                	add    BYTE PTR [ebx],al
    4e20:	01 06                	add    DWORD PTR [esi],eax
    4e22:	48                   	dec    eax
    4e23:	00 00                	add    BYTE PTR [eax],al
    4e25:	00 04 a2             	add    BYTE PTR [edx+eiz*4],al
    4e28:	11 00                	adc    DWORD PTR [eax],eax
    4e2a:	00 01                	add    BYTE PTR [ecx],al
    4e2c:	03 5c 51 00          	add    ebx,DWORD PTR [ecx+edx*2+0x0]
    4e30:	9f                   	lahf   
    4e31:	96                   	xchg   esi,eax
    4e32:	00 00                	add    BYTE PTR [eax],al
    4e34:	00 01                	add    BYTE PTR [ecx],al
    4e36:	9c                   	pushf  
    4e37:	9d                   	popf   
    4e38:	00 00                	add    BYTE PTR [eax],al
    4e3a:	00 05 98 02 00 00    	add    BYTE PTR ds:0x298,al
    4e40:	01 03                	add    DWORD PTR [ebx],eax
    4e42:	9d                   	popf   
    4e43:	00 00                	add    BYTE PTR [eax],al
    4e45:	00 02                	add    BYTE PTR [edx],al
    4e47:	91                   	xchg   ecx,eax
    4e48:	00 06                	add    BYTE PTR [esi],al
    4e4a:	64                   	fs
    4e4b:	73 74                	jae    4ec1 <sysEnter_Vector-0x12b13f>
    4e4d:	00 01                	add    BYTE PTR [ecx],al
    4e4f:	05 9d 00 00 00       	add    eax,0x9d
    4e54:	02 91 6c 06 73 72    	add    dl,BYTE PTR [ecx+0x7273066c]
    4e5a:	63 00                	arpl   WORD PTR [eax],ax
    4e5c:	01 05 9d 00 00 00    	add    DWORD PTR ds:0x9d,eax
    4e62:	02 91 68 06 65 6e    	add    dl,BYTE PTR [ecx+0x6e650668]
    4e68:	64 00 01             	add    BYTE PTR fs:[ecx],al
    4e6b:	06                   	push   es
    4e6c:	9d                   	popf   
    4e6d:	00 00                	add    BYTE PTR [eax],al
    4e6f:	00 02                	add    BYTE PTR [edx],al
    4e71:	91                   	xchg   ecx,eax
    4e72:	64 00 07             	add    BYTE PTR fs:[edi],al
    4e75:	04 48                	add    al,0x48
    4e77:	00 00                	add    BYTE PTR [eax],al
    4e79:	00 08                	add    BYTE PTR [eax],cl
    4e7b:	9a 11 00 00 01 1f f2 	call   0xf21f:0x1000011
    4e82:	51                   	push   ecx
    4e83:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    4e89:	01 9c 05 98 02 00 00 	add    DWORD PTR [ebp+eax*1+0x298],ebx
    4e90:	01 1f                	add    DWORD PTR [edi],ebx
    4e92:	9d                   	popf   
    4e93:	00 00                	add    BYTE PTR [eax],al
    4e95:	00 02                	add    BYTE PTR [edx],al
    4e97:	91                   	xchg   ecx,eax
    4e98:	00 00                	add    BYTE PTR [eax],al
    4e9a:	00 c6                	add    dh,al
    4e9c:	01 00                	add    DWORD PTR [eax],eax
    4e9e:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4ea1:	ea 17 00 00 04 01 c3 	jmp    0xc301:0x4000017
    4ea8:	00 00                	add    BYTE PTR [eax],al
    4eaa:	00 0c b3             	add    BYTE PTR [ebx+esi*4],cl
    4ead:	11 00                	adc    DWORD PTR [eax],eax
    4eaf:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    4eb2:	00 00                	add    BYTE PTR [eax],al
    4eb4:	14 52                	adc    al,0x52
    4eb6:	00 9f 44 01 00 00    	add    BYTE PTR [edi+0x144],bl
    4ebc:	80 1e 00             	sbb    BYTE PTR [esi],0x0
    4ebf:	00 02                	add    BYTE PTR [edx],al
    4ec1:	04 05                	add    al,0x5
    4ec3:	69 6e 74 00 03 91 02 	imul   ebp,DWORD PTR [esi+0x74],0x2910300
    4eca:	00 00                	add    BYTE PTR [eax],al
    4ecc:	02 d8                	add    bl,al
    4ece:	37                   	aaa    
    4ecf:	00 00                	add    BYTE PTR [eax],al
    4ed1:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    4ed4:	07                   	pop    es
    4ed5:	32 00                	xor    al,BYTE PTR [eax]
    4ed7:	00 00                	add    BYTE PTR [eax],al
    4ed9:	04 04                	add    al,0x4
    4edb:	05 05 00 00 00       	add    eax,0x5
    4ee0:	04 08                	add    al,0x8
    4ee2:	05 00 00 00 00       	add    eax,0x0
    4ee7:	04 0c                	add    al,0xc
    4ee9:	04 ad                	add    al,0xad
    4eeb:	00 00                	add    BYTE PTR [eax],al
    4eed:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4ef0:	06                   	push   es
    4ef1:	48                   	dec    eax
    4ef2:	00 00                	add    BYTE PTR [eax],al
    4ef4:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4ef7:	08 3f                	or     BYTE PTR [edi],bh
    4ef9:	00 00                	add    BYTE PTR [eax],al
    4efb:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    4efe:	07                   	pop    es
    4eff:	0e                   	push   cs
    4f00:	00 00                	add    BYTE PTR [eax],al
    4f02:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    4f05:	07                   	pop    es
    4f06:	2d 00 00 00 04       	sub    eax,0x4000000
    4f0b:	01 06                	add    DWORD PTR [esi],eax
    4f0d:	41                   	inc    ecx
    4f0e:	00 00                	add    BYTE PTR [eax],al
    4f10:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    4f13:	05 b9 00 00 00       	add    eax,0xb9
    4f18:	04 08                	add    al,0x8
    4f1a:	07                   	pop    es
    4f1b:	28 00                	sub    BYTE PTR [eax],al
    4f1d:	00 00                	add    BYTE PTR [eax],al
    4f1f:	04 04                	add    al,0x4
    4f21:	07                   	pop    es
    4f22:	2a 01                	sub    al,BYTE PTR [ecx]
    4f24:	00 00                	add    BYTE PTR [eax],al
    4f26:	05 04 53 00 00       	add    eax,0x5304
    4f2b:	00 03                	add    BYTE PTR [ebx],al
    4f2d:	45                   	inc    ebp
    4f2e:	02 00                	add    al,BYTE PTR [eax]
    4f30:	00 03                	add    BYTE PTR [ebx],al
    4f32:	34 37                	xor    al,0x37
    4f34:	00 00                	add    BYTE PTR [eax],al
    4f36:	00 03                	add    BYTE PTR [ebx],al
    4f38:	01 02                	add    DWORD PTR [edx],eax
    4f3a:	00 00                	add    BYTE PTR [eax],al
    4f3c:	03 56 37             	add    edx,DWORD PTR [esi+0x37]
    4f3f:	00 00                	add    BYTE PTR [eax],al
    4f41:	00 05 04 ad 00 00    	add    BYTE PTR ds:0xad04,al
    4f47:	00 06                	add    BYTE PTR [esi],al
    4f49:	53                   	push   ebx
    4f4a:	00 00                	add    BYTE PTR [eax],al
    4f4c:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4f4f:	02 e8                	add    ch,al
    4f51:	06                   	push   es
    4f52:	00 00                	add    BYTE PTR [eax],al
    4f54:	04 08                	add    al,0x8
    4f56:	04 b2                	add    al,0xb2
    4f58:	00 00                	add    BYTE PTR [eax],al
    4f5a:	00 07                	add    BYTE PTR [edi],al
    4f5c:	e8 11 00 00 01       	call   1004f72 <sysEnter_Vector+0xed4f72>
    4f61:	0d 8b 00 00 00       	or     eax,0x8b
    4f66:	14 52                	adc    al,0x52
    4f68:	00 9f 1e 01 00 00    	add    BYTE PTR [edi+0x11e],bl
    4f6e:	01 9c 3a 01 00 00 08 	add    DWORD PTR [edx+edi*1+0x8000001],ebx
    4f75:	69 6e 00 01 0d a7 00 	imul   ebp,DWORD PTR [esi+0x0],0xa70d01
    4f7c:	00 00                	add    BYTE PTR [eax],al
    4f7e:	02 91 00 09 e0 11    	add    dl,BYTE PTR [ecx+0x11e00900]
    4f84:	00 00                	add    BYTE PTR [eax],al
    4f86:	01 0d a7 00 00 00    	add    DWORD PTR ds:0xa7,ecx
    4f8c:	02 91 04 08 62 79    	add    dl,BYTE PTR [ecx+0x79620804]
    4f92:	00 01                	add    BYTE PTR [ecx],al
    4f94:	0d a7 00 00 00       	or     eax,0xa7
    4f99:	02 91 08 09 f4 11    	add    dl,BYTE PTR [ecx+0x11f40908]
    4f9f:	00 00                	add    BYTE PTR [eax],al
    4fa1:	01 0d 8b 00 00 00    	add    DWORD PTR ds:0x8b,ecx
    4fa7:	02 91 0c 0a ab 11    	add    dl,BYTE PTR [ecx+0x11ab0a0c]
    4fad:	00 00                	add    BYTE PTR [eax],al
    4faf:	01 0f                	add    DWORD PTR [edi],ecx
    4fb1:	2c 00                	sub    al,0x0
    4fb3:	00 00                	add    BYTE PTR [eax],al
    4fb5:	02 91 6c 0a cb 11    	add    dl,BYTE PTR [ecx+0x11cb0a6c]
    4fbb:	00 00                	add    BYTE PTR [eax],al
    4fbd:	01 12                	add    DWORD PTR [edx],edx
    4fbf:	2c 00                	sub    al,0x0
    4fc1:	00 00                	add    BYTE PTR [eax],al
    4fc3:	02 91 68 0a c4 11    	add    dl,BYTE PTR [ecx+0x11c40a68]
    4fc9:	00 00                	add    BYTE PTR [eax],al
    4fcb:	01 13                	add    DWORD PTR [ebx],edx
    4fcd:	8b 00                	mov    eax,DWORD PTR [eax]
    4fcf:	00 00                	add    BYTE PTR [eax],al
    4fd1:	02 91 64 00 07 d5    	add    dl,BYTE PTR [ecx-0x2af8ff9c]
    4fd7:	11 00                	adc    DWORD PTR [eax],eax
    4fd9:	00 01                	add    BYTE PTR [ecx],al
    4fdb:	2a 8b 00 00 00 32    	sub    cl,BYTE PTR [ebx+0x32000000]
    4fe1:	53                   	push   ebx
    4fe2:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
    4fe8:	01 9c 8a 01 00 00 08 	add    DWORD PTR [edx+ecx*4+0x8000001],ebx
    4fef:	69 6e 00 01 2a a7 00 	imul   ebp,DWORD PTR [esi+0x0],0xa72a01
    4ff6:	00 00                	add    BYTE PTR [eax],al
    4ff8:	02 91 00 09 e0 11    	add    dl,BYTE PTR [ecx+0x11e00900]
    4ffe:	00 00                	add    BYTE PTR [eax],al
    5000:	01 2a                	add    DWORD PTR [edx],ebp
    5002:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    5003:	00 00                	add    BYTE PTR [eax],al
    5005:	00 02                	add    BYTE PTR [edx],al
    5007:	91                   	xchg   ecx,eax
    5008:	04 08                	add    al,0x8
    500a:	62 79 00             	bound  edi,QWORD PTR [ecx+0x0]
    500d:	01 2a                	add    DWORD PTR [edx],ebp
    500f:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    5010:	00 00                	add    BYTE PTR [eax],al
    5012:	00 02                	add    BYTE PTR [edx],al
    5014:	91                   	xchg   ecx,eax
    5015:	08 09                	or     BYTE PTR [ecx],cl
    5017:	f4                   	hlt    
    5018:	11 00                	adc    DWORD PTR [eax],eax
    501a:	00 01                	add    BYTE PTR [ecx],al
    501c:	2a 8b 00 00 00 02    	sub    cl,BYTE PTR [ebx+0x2000000]
    5022:	91                   	xchg   ecx,eax
    5023:	0c 00                	or     al,0x0
    5025:	0b 78 00             	or     edi,DWORD PTR [eax+0x0]
    5028:	00 00                	add    BYTE PTR [eax],al
    502a:	04 33                	add    al,0x33
    502c:	9b                   	fwait
    502d:	01 00                	add    DWORD PTR [eax],eax
    502f:	00 05 03 20 92 00    	add    BYTE PTR ds:0x922003,al
    5035:	9f                   	lahf   
    5036:	05 04 8b 00 00       	add    eax,0x8b04
    503b:	00 0b                	add    BYTE PTR [ebx],cl
    503d:	10 02                	adc    BYTE PTR [edx],al
    503f:	00 00                	add    BYTE PTR [eax],al
    5041:	05 35 b2 01 00       	add    eax,0x1b235
    5046:	00 05 03 30 92 00    	add    BYTE PTR ds:0x923003,al
    504c:	9f                   	lahf   
    504d:	05 04 9c 00 00       	add    eax,0x9c04
    5052:	00 0b                	add    BYTE PTR [ebx],cl
    5054:	33 02                	xor    eax,DWORD PTR [edx]
    5056:	00 00                	add    BYTE PTR [eax],al
    5058:	05 36 91 00 00       	add    eax,0x9136
    505d:	00 05 03 2c 92 00    	add    BYTE PTR ds:0x922c03,al
    5063:	9f                   	lahf   
    5064:	00 b0 01 00 00 04    	add    BYTE PTR [eax+0x4000001],dh
    506a:	00 8b 18 00 00 04    	add    BYTE PTR [ebx+0x4000018],cl
    5070:	01 c3                	add    ebx,eax
    5072:	00 00                	add    BYTE PTR [eax],al
    5074:	00 0c 06             	add    BYTE PTR [esi+eax*1],cl
    5077:	12 00                	adc    al,BYTE PTR [eax]
    5079:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    507c:	00 00                	add    BYTE PTR [eax],al
    507e:	58                   	pop    eax
    507f:	53                   	push   ebx
    5080:	00 9f 29 01 00 00    	add    BYTE PTR [edi+0x129],bl
    5086:	58                   	pop    eax
    5087:	1f                   	pop    ds
    5088:	00 00                	add    BYTE PTR [eax],al
    508a:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    5091:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    5094:	32 00                	xor    al,BYTE PTR [eax]
    5096:	00 00                	add    BYTE PTR [eax],al
    5098:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    509f:	03 08                	add    ecx,DWORD PTR [eax]
    50a1:	05 00 00 00 00       	add    eax,0x0
    50a6:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    50a9:	ad                   	lods   eax,DWORD PTR ds:[esi]
    50aa:	00 00                	add    BYTE PTR [eax],al
    50ac:	00 03                	add    BYTE PTR [ebx],al
    50ae:	01 06                	add    DWORD PTR [esi],eax
    50b0:	48                   	dec    eax
    50b1:	00 00                	add    BYTE PTR [eax],al
    50b3:	00 03                	add    BYTE PTR [ebx],al
    50b5:	01 08                	add    DWORD PTR [eax],ecx
    50b7:	3f                   	aas    
    50b8:	00 00                	add    BYTE PTR [eax],al
    50ba:	00 03                	add    BYTE PTR [ebx],al
    50bc:	02 07                	add    al,BYTE PTR [edi]
    50be:	0e                   	push   cs
    50bf:	00 00                	add    BYTE PTR [eax],al
    50c1:	00 03                	add    BYTE PTR [ebx],al
    50c3:	04 07                	add    al,0x7
    50c5:	2d 00 00 00 03       	sub    eax,0x3000000
    50ca:	01 06                	add    DWORD PTR [esi],eax
    50cc:	41                   	inc    ecx
    50cd:	00 00                	add    BYTE PTR [eax],al
    50cf:	00 03                	add    BYTE PTR [ebx],al
    50d1:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    50d7:	03 08                	add    ecx,DWORD PTR [eax]
    50d9:	07                   	pop    es
    50da:	28 00                	sub    BYTE PTR [eax],al
    50dc:	00 00                	add    BYTE PTR [eax],al
    50de:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    50e1:	2a 01                	sub    al,BYTE PTR [ecx]
    50e3:	00 00                	add    BYTE PTR [eax],al
    50e5:	04 04                	add    al,0x4
    50e7:	48                   	dec    eax
    50e8:	00 00                	add    BYTE PTR [eax],al
    50ea:	00 05 1a 12 00 00    	add    BYTE PTR ds:0x121a,al
    50f0:	01 34 80             	add    DWORD PTR [eax+eax*4],esi
    50f3:	00 00                	add    BYTE PTR [eax],al
    50f5:	00 58 53             	add    BYTE PTR [eax+0x53],bl
    50f8:	00 9f 9e 00 00 00    	add    BYTE PTR [edi+0x9e],bl
    50fe:	01 9c ee 00 00 00 06 	add    DWORD PTR [esi+ebp*8+0x6000000],ebx
    5105:	2c 12                	sub    al,0x12
    5107:	00 00                	add    BYTE PTR [eax],al
    5109:	01 34 80             	add    DWORD PTR [eax+eax*4],esi
    510c:	00 00                	add    BYTE PTR [eax],al
    510e:	00 02                	add    BYTE PTR [edx],al
    5110:	91                   	xchg   ecx,eax
    5111:	00 06                	add    BYTE PTR [esi],al
    5113:	29 12                	sub    DWORD PTR [edx],edx
    5115:	00 00                	add    BYTE PTR [eax],al
    5117:	01 34 80             	add    DWORD PTR [eax+eax*4],esi
    511a:	00 00                	add    BYTE PTR [eax],al
    511c:	00 02                	add    BYTE PTR [edx],al
    511e:	91                   	xchg   ecx,eax
    511f:	04 06                	add    al,0x6
    5121:	05 07 00 00 01       	add    eax,0x1000007
    5126:	34 25                	xor    al,0x25
    5128:	00 00                	add    BYTE PTR [eax],al
    512a:	00 02                	add    BYTE PTR [edx],al
    512c:	91                   	xchg   ecx,eax
    512d:	08 07                	or     BYTE PTR [edi],al
    512f:	61                   	popa   
    5130:	00 01                	add    BYTE PTR [ecx],al
    5132:	36 80 00 00          	add    BYTE PTR ss:[eax],0x0
    5136:	00 01                	add    BYTE PTR [ecx],al
    5138:	56                   	push   esi
    5139:	07                   	pop    es
    513a:	62 00                	bound  eax,QWORD PTR [eax]
    513c:	01 36                	add    DWORD PTR [esi],esi
    513e:	80 00 00             	add    BYTE PTR [eax],0x0
    5141:	00 01                	add    BYTE PTR [ecx],al
    5143:	53                   	push   ebx
    5144:	07                   	pop    es
    5145:	6c                   	ins    BYTE PTR es:[edi],dx
    5146:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    5148:	00 01                	add    BYTE PTR [ecx],al
    514a:	3c 25                	cmp    al,0x25
    514c:	00 00                	add    BYTE PTR [eax],al
    514e:	00 02                	add    BYTE PTR [edx],al
    5150:	91                   	xchg   ecx,eax
    5151:	6c                   	ins    BYTE PTR es:[edi],dx
    5152:	00 05 fe 11 00 00    	add    BYTE PTR ds:0x11fe,al
    5158:	01 58 80             	add    DWORD PTR [eax-0x80],ebx
    515b:	00 00                	add    BYTE PTR [eax],al
    515d:	00 f6                	add    dh,dh
    515f:	53                   	push   ebx
    5160:	00 9f 6e 00 00 00    	add    BYTE PTR [edi+0x6e],bl
    5166:	01 9c 3a 01 00 00 06 	add    DWORD PTR [edx+edi*1+0x6000001],ebx
    516d:	2c 12                	sub    al,0x12
    516f:	00 00                	add    BYTE PTR [eax],al
    5171:	01 58 3a             	add    DWORD PTR [eax+0x3a],ebx
    5174:	01 00                	add    DWORD PTR [eax],eax
    5176:	00 02                	add    BYTE PTR [edx],al
    5178:	91                   	xchg   ecx,eax
    5179:	00 06                	add    BYTE PTR [esi],al
    517b:	29 12                	sub    DWORD PTR [edx],edx
    517d:	00 00                	add    BYTE PTR [eax],al
    517f:	01 58 3a             	add    DWORD PTR [eax+0x3a],ebx
    5182:	01 00                	add    DWORD PTR [eax],eax
    5184:	00 02                	add    BYTE PTR [edx],al
    5186:	91                   	xchg   ecx,eax
    5187:	04 07                	add    al,0x7
    5189:	61                   	popa   
    518a:	00 01                	add    BYTE PTR [ecx],al
    518c:	5a                   	pop    edx
    518d:	80 00 00             	add    BYTE PTR [eax],0x0
    5190:	00 01                	add    BYTE PTR [ecx],al
    5192:	56                   	push   esi
    5193:	07                   	pop    es
    5194:	62 00                	bound  eax,QWORD PTR [eax]
    5196:	01 5a 80             	add    DWORD PTR [edx-0x80],ebx
    5199:	00 00                	add    BYTE PTR [eax],al
    519b:	00 01                	add    BYTE PTR [ecx],al
    519d:	53                   	push   ebx
    519e:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    51a1:	40                   	inc    eax
    51a2:	01 00                	add    DWORD PTR [eax],eax
    51a4:	00 08                	add    BYTE PTR [eax],cl
    51a6:	48                   	dec    eax
    51a7:	00 00                	add    BYTE PTR [eax],al
    51a9:	00 09                	add    BYTE PTR [ecx],cl
    51ab:	13 12                	adc    edx,DWORD PTR [edx]
    51ad:	00 00                	add    BYTE PTR [eax],al
    51af:	01 77 80             	add    DWORD PTR [edi-0x80],esi
    51b2:	00 00                	add    BYTE PTR [eax],al
    51b4:	00 64 54 00          	add    BYTE PTR [esp+edx*2+0x0],ah
    51b8:	9f                   	lahf   
    51b9:	1d 00 00 00 01       	sbb    eax,0x1000000
    51be:	9c                   	pushf  
    51bf:	7b 01                	jnp    51c2 <sysEnter_Vector-0x12ae3e>
    51c1:	00 00                	add    BYTE PTR [eax],al
    51c3:	06                   	push   es
    51c4:	2c 12                	sub    al,0x12
    51c6:	00 00                	add    BYTE PTR [eax],al
    51c8:	01 77 3a             	add    DWORD PTR [edi+0x3a],esi
    51cb:	01 00                	add    DWORD PTR [eax],eax
    51cd:	00 02                	add    BYTE PTR [edx],al
    51cf:	91                   	xchg   ecx,eax
    51d0:	00 06                	add    BYTE PTR [esi],al
    51d2:	29 12                	sub    DWORD PTR [edx],edx
    51d4:	00 00                	add    BYTE PTR [eax],al
    51d6:	01 77 3a             	add    DWORD PTR [edi+0x3a],esi
    51d9:	01 00                	add    DWORD PTR [eax],eax
    51db:	00 02                	add    BYTE PTR [edx],al
    51dd:	91                   	xchg   ecx,eax
    51de:	04 00                	add    al,0x0
    51e0:	0a 48 00             	or     cl,BYTE PTR [eax+0x0]
    51e3:	00 00                	add    BYTE PTR [eax],al
    51e5:	8b 01                	mov    eax,DWORD PTR [ecx]
    51e7:	00 00                	add    BYTE PTR [eax],al
    51e9:	0b 79 00             	or     edi,DWORD PTR [ecx+0x0]
    51ec:	00 00                	add    BYTE PTR [eax],al
    51ee:	65 00 0c 23          	add    BYTE PTR gs:[ebx+eiz*1],cl
    51f2:	12 00                	adc    al,BYTE PTR [eax]
    51f4:	00 01                	add    BYTE PTR [ecx],al
    51f6:	19 7b 01             	sbb    DWORD PTR [ebx+0x1],edi
    51f9:	00 00                	add    BYTE PTR [eax],al
    51fb:	05 03 80 90 00       	add    eax,0x908003
    5200:	9f                   	lahf   
    5201:	0d 78 00 00 00       	or     eax,0x78
    5206:	02 33                	add    dh,BYTE PTR [ebx]
    5208:	ad                   	lods   eax,DWORD PTR ds:[esi]
    5209:	01 00                	add    DWORD PTR [eax],eax
    520b:	00 05 03 20 92 00    	add    BYTE PTR ds:0x922003,al
    5211:	9f                   	lahf   
    5212:	04 04                	add    al,0x4
    5214:	80 00 00             	add    BYTE PTR [eax],0x0
    5217:	00 00                	add    BYTE PTR [eax],al
    5219:	96                   	xchg   esi,eax
    521a:	05 00 00 04 00       	add    eax,0x40000
    521f:	4d                   	dec    ebp
    5220:	19 00                	sbb    DWORD PTR [eax],eax
    5222:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    5225:	c3                   	ret    
    5226:	00 00                	add    BYTE PTR [eax],al
    5228:	00 0c 33             	add    BYTE PTR [ebx+esi*1],cl
    522b:	12 00                	adc    al,BYTE PTR [eax]
    522d:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    5230:	00 00                	add    BYTE PTR [eax],al
    5232:	84 54 00 9f          	test   BYTE PTR [eax+eax*1-0x61],dl
    5236:	0e                   	push   cs
    5237:	0d 00 00 e8 1f       	or     eax,0x1fe80000
    523c:	00 00                	add    BYTE PTR [eax],al
    523e:	02 a0 03 00 00 04    	add    ah,BYTE PTR [eax+0x4000003]
    5244:	26 01 00             	add    DWORD PTR es:[eax],eax
    5247:	00 05 15 26 01 00    	add    BYTE PTR ds:0x12615,al
    524d:	00 03                	add    BYTE PTR [ebx],al
    524f:	51                   	push   ecx
    5250:	04 00                	add    al,0x0
    5252:	00 00                	add    BYTE PTR [eax],al
    5254:	03 96 04 00 00 01    	add    edx,DWORD PTR [esi+0x1000004]
    525a:	03 84 02 00 00 02 03 	add    eax,DWORD PTR [edx+eax*1+0x3020000]
    5261:	83 03 00             	add    DWORD PTR [ebx],0x0
    5264:	00 03                	add    BYTE PTR [ebx],al
    5266:	03 6a 02             	add    ebp,DWORD PTR [edx+0x2]
    5269:	00 00                	add    BYTE PTR [eax],al
    526b:	04 03                	add    al,0x3
    526d:	da 04 00             	fiadd  DWORD PTR [eax+eax*1]
    5270:	00 05 03 78 04 00    	add    BYTE PTR ds:0x47803,al
    5276:	00 0a                	add    BYTE PTR [edx],cl
    5278:	03 c4                	add    eax,esp
    527a:	03 00                	add    eax,DWORD PTR [eax]
    527c:	00 0b                	add    BYTE PTR [ebx],cl
    527e:	03 2a                	add    ebp,DWORD PTR [edx]
    5280:	04 00                	add    al,0x0
    5282:	00 0c 03             	add    BYTE PTR [ebx+eax*1],cl
    5285:	91                   	xchg   ecx,eax
    5286:	03 00                	add    eax,DWORD PTR [eax]
    5288:	00 0d 03 aa 03 00    	add    BYTE PTR ds:0x3aa03,cl
    528e:	00 0e                	add    BYTE PTR [esi],cl
    5290:	03 77 02             	add    esi,DWORD PTR [edi+0x2]
    5293:	00 00                	add    BYTE PTR [eax],al
    5295:	0f 03 f4             	lsl    esi,sp
    5298:	03 00                	add    eax,DWORD PTR [eax]
    529a:	00 10                	add    BYTE PTR [eax],dl
    529c:	03 27                	add    esp,DWORD PTR [edi]
    529e:	05 00 00 11 03       	add    eax,0x3110000
    52a3:	05 05 00 00 4f       	add    eax,0x4f000005
    52a8:	03 cb                	add    ecx,ebx
    52aa:	04 00                	add    al,0x0
    52ac:	00 50 03             	add    BYTE PTR [eax+0x3],dl
    52af:	44                   	inc    esp
    52b0:	04 00                	add    al,0x0
    52b2:	00 59 03             	add    BYTE PTR [ecx+0x3],bl
    52b5:	14 05                	adc    al,0x5
    52b7:	00 00                	add    BYTE PTR [eax],al
    52b9:	61                   	popa   
    52ba:	03 49 03             	add    ecx,DWORD PTR [ecx+0x3]
    52bd:	00 00                	add    BYTE PTR [eax],al
    52bf:	97                   	xchg   edi,eax
    52c0:	04 61                	add    al,0x61
    52c2:	04 00                	add    al,0x0
    52c4:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    52c7:	04 37                	add    al,0x37
    52c9:	04 00                	add    al,0x0
    52cb:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    52cf:	44                   	inc    esp
    52d0:	05 00 00 65 01       	add    eax,0x1650000
    52d5:	04 25                	add    al,0x25
    52d7:	03 00                	add    eax,DWORD PTR [eax]
    52d9:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    52dc:	04 56                	add    al,0x56
    52de:	05 00 00 67 01       	add    eax,0x1670000
    52e3:	04 b7                	add    al,0xb7
    52e5:	03 00                	add    eax,DWORD PTR [eax]
    52e7:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    52ea:	04 d6                	add    al,0xd6
    52ec:	02 00                	add    al,BYTE PTR [eax]
    52ee:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    52f1:	04 85                	add    al,0x85
    52f3:	04 00                	add    al,0x0
    52f5:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    52f8:	04 39                	add    al,0x39
    52fa:	03 00                	add    eax,DWORD PTR [eax]
    52fc:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    52ff:	04 e8                	add    al,0xe8
    5301:	04 00                	add    al,0x0
    5303:	00 00                	add    BYTE PTR [eax],al
    5305:	03 04 d9             	add    eax,DWORD PTR [ecx+ebx*8]
    5308:	03 00                	add    eax,DWORD PTR [eax]
    530a:	00 01                	add    BYTE PTR [ecx],al
    530c:	03 04 e8             	add    eax,DWORD PTR [eax+ebp*8]
    530f:	03 00                	add    eax,DWORD PTR [eax]
    5311:	00 02                	add    BYTE PTR [edx],al
    5313:	03 04 73             	add    eax,DWORD PTR [ebx+esi*2]
    5316:	03 00                	add    eax,DWORD PTR [eax]
    5318:	00 03                	add    BYTE PTR [ebx],al
    531a:	03 04 b6             	add    eax,DWORD PTR [esi+esi*4]
    531d:	02 00                	add    al,BYTE PTR [eax]
    531f:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    5322:	04 15                	add    al,0x15
    5324:	03 00                	add    eax,DWORD PTR [eax]
    5326:	00 05 03 04 64 03    	add    BYTE PTR ds:0x3640403,al
    532c:	00 00                	add    BYTE PTR [eax],al
    532e:	06                   	push   es
    532f:	03 04 b2             	add    eax,DWORD PTR [edx+esi*4]
    5332:	04 00                	add    al,0x0
    5334:	00 07                	add    BYTE PTR [edi],al
    5336:	03 04 01             	add    eax,DWORD PTR [ecx+eax*1]
    5339:	04 00                	add    al,0x0
    533b:	00 00                	add    BYTE PTR [eax],al
    533d:	09 00                	or     DWORD PTR [eax],eax
    533f:	05 04 07 32 00       	add    eax,0x320704
    5344:	00 00                	add    BYTE PTR [eax],al
    5346:	06                   	push   es
    5347:	04 05                	add    al,0x5
    5349:	69 6e 74 00 05 01 08 	imul   ebp,DWORD PTR [esi+0x74],0x8010500
    5350:	3f                   	aas    
    5351:	00 00                	add    BYTE PTR [eax],al
    5353:	00 05 02 07 0e 00    	add    BYTE PTR ds:0xe0702,al
    5359:	00 00                	add    BYTE PTR [eax],al
    535b:	05 04 07 2d 00       	add    eax,0x2d0704
    5360:	00 00                	add    BYTE PTR [eax],al
    5362:	05 01 06 41 00       	add    eax,0x410601
    5367:	00 00                	add    BYTE PTR [eax],al
    5369:	05 02 05 b9 00       	add    eax,0xb90502
    536e:	00 00                	add    BYTE PTR [eax],al
    5370:	05 08 05 00 00       	add    eax,0x508
    5375:	00 00                	add    BYTE PTR [eax],al
    5377:	05 08 07 28 00       	add    eax,0x280708
    537c:	00 00                	add    BYTE PTR [eax],al
    537e:	05 04 05 05 00       	add    eax,0x50504
    5383:	00 00                	add    BYTE PTR [eax],al
    5385:	05 04 07 2a 01       	add    eax,0x12a0704
    538a:	00 00                	add    BYTE PTR [eax],al
    538c:	07                   	pop    es
    538d:	04 79                	add    al,0x79
    538f:	01 00                	add    DWORD PTR [eax],eax
    5391:	00 05 01 06 48 00    	add    BYTE PTR ds:0x480601,al
    5397:	00 00                	add    BYTE PTR [eax],al
    5399:	08 45 02             	or     BYTE PTR [ebp+0x2],al
    539c:	00 00                	add    BYTE PTR [eax],al
    539e:	02 34 26             	add    dh,BYTE PTR [esi+eiz*1]
    53a1:	01 00                	add    DWORD PTR [eax],eax
    53a3:	00 05 0c 04 ad 00    	add    BYTE PTR ds:0xad040c,al
    53a9:	00 00                	add    BYTE PTR [eax],al
    53ab:	08 bb 0d 00 00 03    	or     BYTE PTR [ebx+0x300000d],bh
    53b1:	2a 65 01             	sub    ah,BYTE PTR [ebp+0x1]
    53b4:	00 00                	add    BYTE PTR [eax],al
    53b6:	09 74 6d 00          	or     DWORD PTR [ebp+ebp*2+0x0],esi
    53ba:	2c 03                	sub    al,0x3
    53bc:	2c 2d                	sub    al,0x2d
    53be:	02 00                	add    al,BYTE PTR [eax]
    53c0:	00 0a                	add    BYTE PTR [edx],cl
    53c2:	3c 0e                	cmp    al,0xe
    53c4:	00 00                	add    BYTE PTR [eax],al
    53c6:	03 2e                	add    ebp,DWORD PTR [esi]
    53c8:	2d 01 00 00 00       	sub    eax,0x1
    53cd:	0a 8e 0d 00 00 03    	or     cl,BYTE PTR [esi+0x300000d]
    53d3:	2f                   	das    
    53d4:	2d 01 00 00 04       	sub    eax,0x4000001
    53d9:	0a b6 0c 00 00 03    	or     dh,BYTE PTR [esi+0x300000c]
    53df:	30 2d 01 00 00 08    	xor    BYTE PTR ds:0x8000001,ch
    53e5:	0a 1d 0e 00 00 03    	or     bl,BYTE PTR ds:0x300000e
    53eb:	31 2d 01 00 00 0c    	xor    DWORD PTR ds:0xc000001,ebp
    53f1:	0a 0c 0d 00 00 03 32 	or     cl,BYTE PTR [ecx*1+0x32030000]
    53f8:	2d 01 00 00 10       	sub    eax,0x10000001
    53fd:	0a 26                	or     ah,BYTE PTR [esi]
    53ff:	0d 00 00 03 33       	or     eax,0x33030000
    5404:	2d 01 00 00 14       	sub    eax,0x14000001
    5409:	0a 15 0e 00 00 03    	or     dl,BYTE PTR ds:0x300000e
    540f:	34 2d                	xor    al,0x2d
    5411:	01 00                	add    DWORD PTR [eax],eax
    5413:	00 18                	add    BYTE PTR [eax],bl
    5415:	0a 95 0d 00 00 03    	or     dl,BYTE PTR [ebp+0x300000d]
    541b:	35 2d 01 00 00       	xor    eax,0x12d
    5420:	1c 0a                	sbb    al,0xa
    5422:	59                   	pop    ecx
    5423:	0d 00 00 03 36       	or     eax,0x36030000
    5428:	2d 01 00 00 20       	sub    eax,0x20000001
    542d:	0a dc                	or     bl,ah
    542f:	0d 00 00 03 37       	or     eax,0x37030000
    5434:	65 01 00             	add    DWORD PTR gs:[eax],eax
    5437:	00 24 0a             	add    BYTE PTR [edx+ecx*1],ah
    543a:	cb                   	retf   
    543b:	0c 00                	or     al,0x0
    543d:	00 03                	add    BYTE PTR [ebx],al
    543f:	38 2d 02 00 00 28    	cmp    BYTE PTR ds:0x28000002,ch
    5445:	00 07                	add    BYTE PTR [edi],al
    5447:	04 33                	add    al,0x33
    5449:	02 00                	add    al,BYTE PTR [eax]
    544b:	00 0b                	add    BYTE PTR [ebx],cl
    544d:	79 01                	jns    5450 <sysEnter_Vector-0x12abb0>
    544f:	00 00                	add    BYTE PTR [eax],al
    5451:	0c 48                	or     al,0x48
    5453:	12 00                	adc    al,BYTE PTR [eax]
    5455:	00 01                	add    BYTE PTR [ecx],al
    5457:	1a 92 01 00 00 84    	sbb    dl,BYTE PTR [edx-0x7bffffff]
    545d:	54                   	push   esp
    545e:	00 9f 44 00 00 00    	add    BYTE PTR [edi+0x44],bl
    5464:	01 9c 60 02 00 00 0d 	add    DWORD PTR [eax+eiz*2+0xd000002],ebx
    546b:	72 05                	jb     5472 <sysEnter_Vector-0x12ab8e>
    546d:	00 00                	add    BYTE PTR [eax],al
    546f:	01 1c 80             	add    DWORD PTR [eax+eax*4],ebx
    5472:	01 00                	add    DWORD PTR [eax],eax
    5474:	00 02                	add    BYTE PTR [edx],al
    5476:	91                   	xchg   ecx,eax
    5477:	6c                   	ins    BYTE PTR es:[edi],dx
    5478:	00 0e                	add    BYTE PTR [esi],cl
    547a:	93                   	xchg   ebx,eax
    547b:	12 00                	adc    al,BYTE PTR [eax]
    547d:	00 01                	add    BYTE PTR [ecx],al
    547f:	22 ce                	and    cl,dh
    5481:	02 00                	add    al,BYTE PTR [eax]
    5483:	00 c8                	add    al,cl
    5485:	54                   	push   esp
    5486:	00 9f 19 03 00 00    	add    BYTE PTR [edi+0x319],bl
    548c:	01 9c ce 02 00 00 0f 	add    DWORD PTR [esi+ecx*8+0xf000002],ebx
    5493:	cf                   	iret   
    5494:	12 00                	adc    al,BYTE PTR [eax]
    5496:	00 01                	add    BYTE PTR [ecx],al
    5498:	22 d4                	and    dl,ah
    549a:	02 00                	add    al,BYTE PTR [eax]
    549c:	00 02                	add    BYTE PTR [edx],al
    549e:	91                   	xchg   ecx,eax
    549f:	00 0f                	add    BYTE PTR [edi],cl
    54a1:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    54a2:	12 00                	adc    al,BYTE PTR [eax]
    54a4:	00 01                	add    BYTE PTR [ecx],al
    54a6:	22 ce                	and    cl,dh
    54a8:	02 00                	add    al,BYTE PTR [eax]
    54aa:	00 02                	add    BYTE PTR [edx],al
    54ac:	91                   	xchg   ecx,eax
    54ad:	04 0d                	add    al,0xd
    54af:	30 07                	xor    BYTE PTR [edi],al
    54b1:	00 00                	add    BYTE PTR [eax],al
    54b3:	01 24 92             	add    DWORD PTR [edx+edx*4],esp
    54b6:	01 00                	add    DWORD PTR [eax],eax
    54b8:	00 02                	add    BYTE PTR [edx],al
    54ba:	91                   	xchg   ecx,eax
    54bb:	68 0d b9 12 00       	push   0x12b90d
    54c0:	00 01                	add    BYTE PTR [ecx],al
    54c2:	25 42 01 00 00       	and    eax,0x142
    54c7:	02 91 64 0d 8d 12    	add    dl,BYTE PTR [ecx+0x128d0d64]
    54cd:	00 00                	add    BYTE PTR [eax],al
    54cf:	01 25 42 01 00 00    	add    DWORD PTR ds:0x142,esp
    54d5:	02 91 70 0d 29 0d    	add    dl,BYTE PTR [ecx+0xd290d70]
    54db:	00 00                	add    BYTE PTR [eax],al
    54dd:	01 26                	add    DWORD PTR [esi],esp
    54df:	2d 01 00 00 02       	sub    eax,0x2000001
    54e4:	91                   	xchg   ecx,eax
    54e5:	6c                   	ins    BYTE PTR es:[edi],dx
    54e6:	00 07                	add    BYTE PTR [edi],al
    54e8:	04 9d                	add    al,0x9d
    54ea:	01 00                	add    DWORD PTR [eax],eax
    54ec:	00 07                	add    BYTE PTR [edi],al
    54ee:	04 da                	add    al,0xda
    54f0:	02 00                	add    al,BYTE PTR [eax]
    54f2:	00 0b                	add    BYTE PTR [ebx],cl
    54f4:	92                   	xchg   edx,eax
    54f5:	01 00                	add    DWORD PTR [eax],eax
    54f7:	00 10                	add    BYTE PTR [eax],dl
    54f9:	6a 12                	push   0x12
    54fb:	00 00                	add    BYTE PTR [eax],al
    54fd:	01 3f                	add    DWORD PTR [edi],edi
    54ff:	ce                   	into   
    5500:	02 00                	add    al,BYTE PTR [eax]
    5502:	00 e1                	add    cl,ah
    5504:	57                   	push   edi
    5505:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    550b:	01 9c 15 03 00 00 0f 	add    DWORD PTR [ebp+edx*1+0xf000003],ebx
    5512:	cf                   	iret   
    5513:	12 00                	adc    al,BYTE PTR [eax]
    5515:	00 01                	add    BYTE PTR [ecx],al
    5517:	3f                   	aas    
    5518:	d4 02                	aam    0x2
    551a:	00 00                	add    BYTE PTR [eax],al
    551c:	02 91 00 0f a7 12    	add    dl,BYTE PTR [ecx+0x12a70f00]
    5522:	00 00                	add    BYTE PTR [eax],al
    5524:	01 3f                	add    DWORD PTR [edi],edi
    5526:	ce                   	into   
    5527:	02 00                	add    al,BYTE PTR [eax]
    5529:	00 02                	add    BYTE PTR [edx],al
    552b:	91                   	xchg   ecx,eax
    552c:	04 00                	add    al,0x0
    552e:	10 3e                	adc    BYTE PTR [esi],bh
    5530:	12 00                	adc    al,BYTE PTR [eax]
    5532:	00 01                	add    BYTE PTR [ecx],al
    5534:	44                   	inc    esp
    5535:	ce                   	into   
    5536:	02 00                	add    al,BYTE PTR [eax]
    5538:	00 fe                	add    dh,bh
    553a:	57                   	push   edi
    553b:	00 9f 3d 00 00 00    	add    BYTE PTR [edi+0x3d],bl
    5541:	01 9c 49 03 00 00 0f 	add    DWORD PTR [ecx+ecx*2+0xf000003],ebx
    5548:	cf                   	iret   
    5549:	12 00                	adc    al,BYTE PTR [eax]
    554b:	00 01                	add    BYTE PTR [ecx],al
    554d:	44                   	inc    esp
    554e:	d4 02                	aam    0x2
    5550:	00 00                	add    BYTE PTR [eax],al
    5552:	02 91 00 11 74 00    	add    dl,BYTE PTR [ecx+0x741100]
    5558:	01 45 92             	add    DWORD PTR [ebp-0x6e],eax
    555b:	01 00                	add    DWORD PTR [eax],eax
    555d:	00 02                	add    BYTE PTR [edx],al
    555f:	91                   	xchg   ecx,eax
    5560:	74 00                	je     5562 <sysEnter_Vector-0x12aa9e>
    5562:	10 d5                	adc    ch,dl
    5564:	12 00                	adc    al,BYTE PTR [eax]
    5566:	00 01                	add    BYTE PTR [ecx],al
    5568:	4b                   	dec    ebx
    5569:	ce                   	into   
    556a:	02 00                	add    al,BYTE PTR [eax]
    556c:	00 3b                	add    BYTE PTR [ebx],bh
    556e:	58                   	pop    eax
    556f:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
    5575:	01 9c 8b 03 00 00 0f 	add    DWORD PTR [ebx+ecx*4+0xf000003],ebx
    557c:	cf                   	iret   
    557d:	12 00                	adc    al,BYTE PTR [eax]
    557f:	00 01                	add    BYTE PTR [ecx],al
    5581:	4b                   	dec    ebx
    5582:	d4 02                	aam    0x2
    5584:	00 00                	add    BYTE PTR [eax],al
    5586:	02 91 00 0f a7 12    	add    dl,BYTE PTR [ecx+0x12a70f00]
    558c:	00 00                	add    BYTE PTR [eax],al
    558e:	01 4b ce             	add    DWORD PTR [ebx-0x32],ecx
    5591:	02 00                	add    al,BYTE PTR [eax]
    5593:	00 02                	add    BYTE PTR [edx],al
    5595:	91                   	xchg   ecx,eax
    5596:	04 11                	add    al,0x11
    5598:	74 00                	je     559a <sysEnter_Vector-0x12aa66>
    559a:	01 4d 92             	add    DWORD PTR [ebp-0x6e],ecx
    559d:	01 00                	add    DWORD PTR [eax],eax
    559f:	00 02                	add    BYTE PTR [edx],al
    55a1:	91                   	xchg   ecx,eax
    55a2:	74 00                	je     55a4 <sysEnter_Vector-0x12aa5c>
    55a4:	10 ad 12 00 00 01    	adc    BYTE PTR [ebp+0x1000012],ch
    55aa:	53                   	push   ebx
    55ab:	ce                   	into   
    55ac:	02 00                	add    al,BYTE PTR [eax]
    55ae:	00 70 58             	add    BYTE PTR [eax+0x58],dh
    55b1:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    55b7:	01 9c c1 03 00 00 0f 	add    DWORD PTR [ecx+eax*8+0xf000003],ebx
    55be:	cf                   	iret   
    55bf:	12 00                	adc    al,BYTE PTR [eax]
    55c1:	00 01                	add    BYTE PTR [ecx],al
    55c3:	53                   	push   ebx
    55c4:	d4 02                	aam    0x2
    55c6:	00 00                	add    BYTE PTR [eax],al
    55c8:	02 91 00 0f a7 12    	add    dl,BYTE PTR [ecx+0x12a70f00]
    55ce:	00 00                	add    BYTE PTR [eax],al
    55d0:	01 53 ce             	add    DWORD PTR [ebx-0x32],edx
    55d3:	02 00                	add    al,BYTE PTR [eax]
    55d5:	00 02                	add    BYTE PTR [edx],al
    55d7:	91                   	xchg   ecx,eax
    55d8:	04 00                	add    al,0x0
    55da:	0e                   	push   cs
    55db:	c2 12 00             	ret    0x12
    55de:	00 01                	add    BYTE PTR [ecx],al
    55e0:	57                   	push   edi
    55e1:	92                   	xchg   edx,eax
    55e2:	01 00                	add    DWORD PTR [eax],eax
    55e4:	00 8d 58 00 9f 57    	add    BYTE PTR [ebp+0x579f0058],cl
    55ea:	08 00                	or     BYTE PTR [eax],al
    55ec:	00 01                	add    BYTE PTR [ecx],al
    55ee:	9c                   	pushf  
    55ef:	59                   	pop    ecx
    55f0:	04 00                	add    al,0x0
    55f2:	00 0f                	add    BYTE PTR [edi],cl
    55f4:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    55f5:	12 00                	adc    al,BYTE PTR [eax]
    55f7:	00 01                	add    BYTE PTR [ecx],al
    55f9:	57                   	push   edi
    55fa:	ce                   	into   
    55fb:	02 00                	add    al,BYTE PTR [eax]
    55fd:	00 02                	add    BYTE PTR [edx],al
    55ff:	91                   	xchg   ecx,eax
    5600:	00 11                	add    BYTE PTR [ecx],dl
    5602:	64                   	fs
    5603:	61                   	popa   
    5604:	79 00                	jns    5606 <sysEnter_Vector-0x12a9fa>
    5606:	01 58 65             	add    DWORD PTR [eax+0x65],ebx
    5609:	01 00                	add    DWORD PTR [eax],eax
    560b:	00 02                	add    BYTE PTR [edx],al
    560d:	91                   	xchg   ecx,eax
    560e:	68 0d 29 0d 00       	push   0xd290d
    5613:	00 01                	add    BYTE PTR [ecx],al
    5615:	58                   	pop    eax
    5616:	65 01 00             	add    DWORD PTR gs:[eax],eax
    5619:	00 02                	add    BYTE PTR [edx],al
    561b:	91                   	xchg   ecx,eax
    561c:	54                   	push   esp
    561d:	0d 26 0d 00 00       	or     eax,0xd26
    5622:	01 59 2d             	add    DWORD PTR [ecx+0x2d],ebx
    5625:	01 00                	add    DWORD PTR [eax],eax
    5627:	00 02                	add    BYTE PTR [edx],al
    5629:	91                   	xchg   ecx,eax
    562a:	4c                   	dec    esp
    562b:	0d 98 0d 00 00       	or     eax,0xd98
    5630:	01 5a 2d             	add    DWORD PTR [edx+0x2d],ebx
    5633:	01 00                	add    DWORD PTR [eax],eax
    5635:	00 02                	add    BYTE PTR [edx],al
    5637:	91                   	xchg   ecx,eax
    5638:	64                   	fs
    5639:	0d 7f 12 00 00       	or     eax,0x127f
    563e:	01 5a 2d             	add    DWORD PTR [edx+0x2d],ebx
    5641:	01 00                	add    DWORD PTR [eax],eax
    5643:	00 02                	add    BYTE PTR [edx],al
    5645:	91                   	xchg   ecx,eax
    5646:	60                   	pusha  
    5647:	0d ab 09 00 00       	or     eax,0x9ab
    564c:	01 5b 65             	add    DWORD PTR [ebx+0x65],ebx
    564f:	01 00                	add    DWORD PTR [eax],eax
    5651:	00 02                	add    BYTE PTR [edx],al
    5653:	91                   	xchg   ecx,eax
    5654:	50                   	push   eax
    5655:	0d f2 12 00 00       	or     eax,0x12f2
    565a:	01 5c 2d 01          	add    DWORD PTR [ebp+ebp*1+0x1],ebx
    565e:	00 00                	add    BYTE PTR [eax],al
    5660:	02 91 5c 11 64 73    	add    dl,BYTE PTR [ecx+0x7364115c]
    5666:	74 00                	je     5668 <sysEnter_Vector-0x12a998>
    5668:	01 5d 65             	add    DWORD PTR [ebp+0x65],ebx
    566b:	01 00                	add    DWORD PTR [eax],eax
    566d:	00 02                	add    BYTE PTR [edx],al
    566f:	91                   	xchg   ecx,eax
    5670:	58                   	pop    eax
    5671:	00 10                	add    BYTE PTR [eax],dl
    5673:	85 12                	test   DWORD PTR [edx],edx
    5675:	00 00                	add    BYTE PTR [eax],al
    5677:	01 c2                	add    edx,eax
    5679:	ce                   	into   
    567a:	02 00                	add    al,BYTE PTR [eax]
    567c:	00 e4                	add    ah,ah
    567e:	60                   	pusha  
    567f:	00 9f 6d 00 00 00    	add    BYTE PTR [edi+0x6d],bl
    5685:	01 9c 9d 04 00 00 0f 	add    DWORD PTR [ebp+ebx*4+0xf000004],ebx
    568c:	30 07                	xor    BYTE PTR [edi],al
    568e:	00 00                	add    BYTE PTR [eax],al
    5690:	01 c2                	add    edx,eax
    5692:	ce                   	into   
    5693:	02 00                	add    al,BYTE PTR [eax]
    5695:	00 02                	add    BYTE PTR [edx],al
    5697:	91                   	xchg   ecx,eax
    5698:	00 0f                	add    BYTE PTR [edi],cl
    569a:	9d                   	popf   
    569b:	12 00                	adc    al,BYTE PTR [eax]
    569d:	00 01                	add    BYTE PTR [ecx],al
    569f:	c2 9d 04             	ret    0x49d
    56a2:	00 00                	add    BYTE PTR [eax],al
    56a4:	02 91 5c 0d 4f 0a    	add    dl,BYTE PTR [ecx+0xa4f0d5c]
    56aa:	00 00                	add    BYTE PTR [eax],al
    56ac:	01 c4                	add    esp,eax
    56ae:	92                   	xchg   edx,eax
    56af:	01 00                	add    DWORD PTR [eax],eax
    56b1:	00 02                	add    BYTE PTR [edx],al
    56b3:	91                   	xchg   ecx,eax
    56b4:	6c                   	ins    BYTE PTR es:[edi],dx
    56b5:	00 05 01 02 e8 06    	add    BYTE PTR ds:0x6e80201,al
    56bb:	00 00                	add    BYTE PTR [eax],al
    56bd:	10 30                	adc    BYTE PTR [eax],dh
    56bf:	07                   	pop    es
    56c0:	00 00                	add    BYTE PTR [eax],al
    56c2:	01 cd                	add    ebp,ecx
    56c4:	92                   	xchg   edx,eax
    56c5:	01 00                	add    DWORD PTR [eax],eax
    56c7:	00 51 61             	add    BYTE PTR [ecx+0x61],dl
    56ca:	00 9f 41 00 00 00    	add    BYTE PTR [edi+0x41],bl
    56d0:	01 9c da 04 00 00 0f 	add    DWORD PTR [edx+ebx*8+0xf000004],ebx
    56d7:	eb 12                	jmp    56eb <sysEnter_Vector-0x12a915>
    56d9:	00 00                	add    BYTE PTR [eax],al
    56db:	01 cd                	add    ebp,ecx
    56dd:	da 04 00             	fiadd  DWORD PTR [eax+eax*1]
    56e0:	00 02                	add    BYTE PTR [edx],al
    56e2:	91                   	xchg   ecx,eax
    56e3:	00 0d 4f 0a 00 00    	add    BYTE PTR ds:0xa4f,cl
    56e9:	01 cf                	add    edi,ecx
    56eb:	80 01 00             	add    BYTE PTR [ecx],0x0
    56ee:	00 02                	add    BYTE PTR [edx],al
    56f0:	91                   	xchg   ecx,eax
    56f1:	6c                   	ins    BYTE PTR es:[edi],dx
    56f2:	00 07                	add    BYTE PTR [edi],al
    56f4:	04 92                	add    al,0x92
    56f6:	01 00                	add    DWORD PTR [eax],eax
    56f8:	00 12                	add    BYTE PTR [edx],dl
    56fa:	78 00                	js     56fc <sysEnter_Vector-0x12a904>
    56fc:	00 00                	add    BYTE PTR [eax],al
    56fe:	04 33                	add    al,0x33
    5700:	f1                   	icebp  
    5701:	04 00                	add    al,0x0
    5703:	00 05 03 20 92 00    	add    BYTE PTR ds:0x922003,al
    5709:	9f                   	lahf   
    570a:	07                   	pop    es
    570b:	04 73                	add    al,0x73
    570d:	01 00                	add    DWORD PTR [eax],eax
    570f:	00 12                	add    BYTE PTR [edx],dl
    5711:	51                   	push   ecx
    5712:	12 00                	adc    al,BYTE PTR [eax]
    5714:	00 01                	add    BYTE PTR [ecx],al
    5716:	0d 2d 01 00 00       	or     eax,0x12d
    571b:	05 03 e8 90 00       	add    eax,0x90e803
    5720:	9f                   	lahf   
    5721:	12 e2                	adc    ah,dl
    5723:	12 00                	adc    al,BYTE PTR [eax]
    5725:	00 01                	add    BYTE PTR [ecx],al
    5727:	0e                   	push   cs
    5728:	65 01 00             	add    DWORD PTR gs:[eax],eax
    572b:	00 05 03 bc 92 00    	add    BYTE PTR ds:0x92bc03,al
    5731:	9f                   	lahf   
    5732:	13 73 01             	adc    esi,DWORD PTR [ebx+0x1]
    5735:	00 00                	add    BYTE PTR [eax],al
    5737:	29 05 00 00 14 6c    	sub    DWORD PTR ds:0x6c140000,eax
    573d:	01 00                	add    DWORD PTR [eax],eax
    573f:	00 01                	add    BYTE PTR [ecx],al
    5741:	00 12                	add    BYTE PTR [edx],dl
    5743:	62 12                	bound  edx,QWORD PTR [edx]
    5745:	00 00                	add    BYTE PTR [eax],al
    5747:	01 0f                	add    DWORD PTR [edi],ecx
    5749:	19 05 00 00 05 03    	sbb    DWORD PTR ds:0x3050000,eax
    574f:	04 92                	add    al,0x92
    5751:	00 9f 12 73 12 00    	add    BYTE PTR [edi+0x127312],bl
    5757:	00 01                	add    BYTE PTR [ecx],al
    5759:	10 2d 01 00 00 05    	adc    BYTE PTR ds:0x5000001,ch
    575f:	03 e0                	add    esp,eax
    5761:	92                   	xchg   edx,eax
    5762:	00 9f 12 a7 12 00    	add    BYTE PTR [edi+0x12a712],bl
    5768:	00 01                	add    BYTE PTR [ecx],al
    576a:	11 9d 01 00 00 05    	adc    DWORD PTR [ebp+0x5000001],ebx
    5770:	03 00                	add    eax,DWORD PTR [eax]
    5772:	93                   	xchg   ebx,eax
    5773:	00 9f 12 5b 12 00    	add    BYTE PTR [edi+0x125b12],bl
    5779:	00 01                	add    BYTE PTR [ecx],al
    577b:	13 65 01             	adc    esp,DWORD PTR [ebp+0x1]
    577e:	00 00                	add    BYTE PTR [eax],al
    5780:	05 03 c0 92 00       	add    eax,0x92c003
    5785:	9f                   	lahf   
    5786:	13 2d 01 00 00 83    	adc    ebp,DWORD PTR ds:0x83000001
    578c:	05 00 00 14 6c       	add    eax,0x6c140000
    5791:	01 00                	add    DWORD PTR [eax],eax
    5793:	00 01                	add    BYTE PTR [ecx],al
    5795:	14 6c                	adc    al,0x6c
    5797:	01 00                	add    DWORD PTR [eax],eax
    5799:	00 0b                	add    BYTE PTR [ebx],cl
    579b:	00 12                	add    BYTE PTR [edx],dl
    579d:	c9                   	leave  
    579e:	12 00                	adc    al,BYTE PTR [eax]
    57a0:	00 01                	add    BYTE PTR [ecx],al
    57a2:	15 94 05 00 00       	adc    eax,0x594
    57a7:	05 03 c0 8e 00       	add    eax,0x8ec003
    57ac:	9f                   	lahf   
    57ad:	0b 6d 05             	or     ebp,DWORD PTR [ebp+0x5]
    57b0:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	01 11                	add    DWORD PTR [ecx],edx
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
       b:	11 01                	adc    DWORD PTR [ecx],eax
       d:	12 06                	adc    al,BYTE PTR [esi]
       f:	10 17                	adc    BYTE PTR [edi],dl
      11:	00 00                	add    BYTE PTR [eax],al
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      1b:	08 00                	or     BYTE PTR [eax],al
      1d:	00 03                	add    BYTE PTR [ebx],al
      1f:	24 00                	and    al,0x0
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      26:	0e                   	push   cs
      27:	00 00                	add    BYTE PTR [eax],al
      29:	04 0f                	add    al,0xf
      2b:	00 0b                	add    BYTE PTR [ebx],cl
      2d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      30:	00 00                	add    BYTE PTR [eax],al
      32:	05 2e 01 3f 19       	add    eax,0x193f012e
      37:	03 0e                	add    ecx,DWORD PTR [esi]
      39:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      3b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      3d:	27                   	daa    
      3e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      41:	11 01                	adc    DWORD PTR [ecx],eax
      43:	12 06                	adc    al,BYTE PTR [esi]
      45:	40                   	inc    eax
      46:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      4c:	00 00                	add    BYTE PTR [eax],al
      4e:	06                   	push   es
      4f:	05 00 03 08 3a       	add    eax,0x3a080300
      54:	0b 3b                	or     edi,DWORD PTR [ebx]
      56:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      59:	02 18                	add    bl,BYTE PTR [eax]
      5b:	00 00                	add    BYTE PTR [eax],al
      5d:	07                   	pop    es
      5e:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
      62:	00 00                	add    BYTE PTR [eax],al
      64:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
      67:	03 0e                	add    ecx,DWORD PTR [esi]
      69:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      6b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      6d:	49                   	dec    ecx
      6e:	13 3f                	adc    edi,DWORD PTR [edi]
      70:	19 02                	sbb    DWORD PTR [edx],eax
      72:	18 00                	sbb    BYTE PTR [eax],al
      74:	00 00                	add    BYTE PTR [eax],al
      76:	01 11                	add    DWORD PTR [ecx],edx
      78:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      7e:	0e                   	push   cs
      7f:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      81:	11 01                	adc    DWORD PTR [ecx],eax
      83:	12 06                	adc    al,BYTE PTR [esi]
      85:	10 17                	adc    BYTE PTR [edi],dl
      87:	00 00                	add    BYTE PTR [eax],al
      89:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      8c:	0b 0b                	or     ecx,DWORD PTR [ebx]
      8e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      91:	08 00                	or     BYTE PTR [eax],al
      93:	00 03                	add    BYTE PTR [ebx],al
      95:	24 00                	and    al,0x0
      97:	0b 0b                	or     ecx,DWORD PTR [ebx]
      99:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      9c:	0e                   	push   cs
      9d:	00 00                	add    BYTE PTR [eax],al
      9f:	04 0f                	add    al,0xf
      a1:	00 0b                	add    BYTE PTR [ebx],cl
      a3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      a6:	00 00                	add    BYTE PTR [eax],al
      a8:	05 2e 01 3f 19       	add    eax,0x193f012e
      ad:	03 0e                	add    ecx,DWORD PTR [esi]
      af:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      b1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      b3:	27                   	daa    
      b4:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      b7:	11 01                	adc    DWORD PTR [ecx],eax
      b9:	12 06                	adc    al,BYTE PTR [esi]
      bb:	40                   	inc    eax
      bc:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      c2:	00 00                	add    BYTE PTR [eax],al
      c4:	06                   	push   es
      c5:	05 00 03 0e 3a       	add    eax,0x3a0e0300
      ca:	0b 3b                	or     edi,DWORD PTR [ebx]
      cc:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      cf:	02 18                	add    bl,BYTE PTR [eax]
      d1:	00 00                	add    BYTE PTR [eax],al
      d3:	07                   	pop    es
      d4:	34 00                	xor    al,0x0
      d6:	03 08                	add    ecx,DWORD PTR [eax]
      d8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      da:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      dc:	49                   	dec    ecx
      dd:	13 02                	adc    eax,DWORD PTR [edx]
      df:	18 00                	sbb    BYTE PTR [eax],al
      e1:	00 08                	add    BYTE PTR [eax],cl
      e3:	34 00                	xor    al,0x0
      e5:	03 0e                	add    ecx,DWORD PTR [esi]
      e7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      e9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      eb:	49                   	dec    ecx
      ec:	13 3f                	adc    edi,DWORD PTR [edi]
      ee:	19 02                	sbb    DWORD PTR [edx],eax
      f0:	18 00                	sbb    BYTE PTR [eax],al
      f2:	00 00                	add    BYTE PTR [eax],al
      f4:	01 11                	add    DWORD PTR [ecx],edx
      f6:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      fc:	0e                   	push   cs
      fd:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      ff:	11 01                	adc    DWORD PTR [ecx],eax
     101:	12 06                	adc    al,BYTE PTR [esi]
     103:	10 17                	adc    BYTE PTR [edi],dl
     105:	00 00                	add    BYTE PTR [eax],al
     107:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     10a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     10c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     10f:	08 00                	or     BYTE PTR [eax],al
     111:	00 03                	add    BYTE PTR [ebx],al
     113:	24 00                	and    al,0x0
     115:	0b 0b                	or     ecx,DWORD PTR [ebx]
     117:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     11a:	0e                   	push   cs
     11b:	00 00                	add    BYTE PTR [eax],al
     11d:	04 0f                	add    al,0xf
     11f:	00 0b                	add    BYTE PTR [ebx],cl
     121:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     124:	00 00                	add    BYTE PTR [eax],al
     126:	05 2e 01 3f 19       	add    eax,0x193f012e
     12b:	03 0e                	add    ecx,DWORD PTR [esi]
     12d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     12f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     131:	27                   	daa    
     132:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     135:	11 01                	adc    DWORD PTR [ecx],eax
     137:	12 06                	adc    al,BYTE PTR [esi]
     139:	40                   	inc    eax
     13a:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     140:	00 00                	add    BYTE PTR [eax],al
     142:	06                   	push   es
     143:	05 00 03 08 3a       	add    eax,0x3a080300
     148:	0b 3b                	or     edi,DWORD PTR [ebx]
     14a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     14d:	02 18                	add    bl,BYTE PTR [eax]
     14f:	00 00                	add    BYTE PTR [eax],al
     151:	07                   	pop    es
     152:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     157:	0b 3b                	or     edi,DWORD PTR [ebx]
     159:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     15c:	02 18                	add    bl,BYTE PTR [eax]
     15e:	00 00                	add    BYTE PTR [eax],al
     160:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     163:	03 0e                	add    ecx,DWORD PTR [esi]
     165:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     167:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     169:	49                   	dec    ecx
     16a:	13 02                	adc    eax,DWORD PTR [edx]
     16c:	18 00                	sbb    BYTE PTR [eax],al
     16e:	00 09                	add    BYTE PTR [ecx],cl
     170:	34 00                	xor    al,0x0
     172:	03 08                	add    ecx,DWORD PTR [eax]
     174:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     176:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     178:	49                   	dec    ecx
     179:	13 02                	adc    eax,DWORD PTR [edx]
     17b:	18 00                	sbb    BYTE PTR [eax],al
     17d:	00 0a                	add    BYTE PTR [edx],cl
     17f:	34 00                	xor    al,0x0
     181:	03 0e                	add    ecx,DWORD PTR [esi]
     183:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     185:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     187:	49                   	dec    ecx
     188:	13 3f                	adc    edi,DWORD PTR [edi]
     18a:	19 02                	sbb    DWORD PTR [edx],eax
     18c:	18 00                	sbb    BYTE PTR [eax],al
     18e:	00 00                	add    BYTE PTR [eax],al
     190:	01 11                	add    DWORD PTR [ecx],edx
     192:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     198:	0e                   	push   cs
     199:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     19b:	11 01                	adc    DWORD PTR [ecx],eax
     19d:	12 06                	adc    al,BYTE PTR [esi]
     19f:	10 17                	adc    BYTE PTR [edi],dl
     1a1:	00 00                	add    BYTE PTR [eax],al
     1a3:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     1a6:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1a8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1ab:	0e                   	push   cs
     1ac:	00 00                	add    BYTE PTR [eax],al
     1ae:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     1b1:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1b3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1b6:	08 00                	or     BYTE PTR [eax],al
     1b8:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     1bb:	00 0b                	add    BYTE PTR [ebx],cl
     1bd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     1c0:	00 00                	add    BYTE PTR [eax],al
     1c2:	05 2e 01 3f 19       	add    eax,0x193f012e
     1c7:	03 0e                	add    ecx,DWORD PTR [esi]
     1c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1cd:	27                   	daa    
     1ce:	19 11                	sbb    DWORD PTR [ecx],edx
     1d0:	01 12                	add    DWORD PTR [edx],edx
     1d2:	06                   	push   es
     1d3:	40                   	inc    eax
     1d4:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     1da:	00 00                	add    BYTE PTR [eax],al
     1dc:	06                   	push   es
     1dd:	05 00 03 08 3a       	add    eax,0x3a080300
     1e2:	0b 3b                	or     edi,DWORD PTR [ebx]
     1e4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     1e7:	02 18                	add    bl,BYTE PTR [eax]
     1e9:	00 00                	add    BYTE PTR [eax],al
     1eb:	07                   	pop    es
     1ec:	34 00                	xor    al,0x0
     1ee:	03 08                	add    ecx,DWORD PTR [eax]
     1f0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1f2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1f4:	49                   	dec    ecx
     1f5:	13 02                	adc    eax,DWORD PTR [edx]
     1f7:	18 00                	sbb    BYTE PTR [eax],al
     1f9:	00 08                	add    BYTE PTR [eax],cl
     1fb:	34 00                	xor    al,0x0
     1fd:	03 0e                	add    ecx,DWORD PTR [esi]
     1ff:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     201:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     203:	49                   	dec    ecx
     204:	13 02                	adc    eax,DWORD PTR [edx]
     206:	18 00                	sbb    BYTE PTR [eax],al
     208:	00 09                	add    BYTE PTR [ecx],cl
     20a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     20d:	19 03                	sbb    DWORD PTR [ebx],eax
     20f:	0e                   	push   cs
     210:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     212:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     214:	27                   	daa    
     215:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     218:	11 01                	adc    DWORD PTR [ecx],eax
     21a:	12 06                	adc    al,BYTE PTR [esi]
     21c:	40                   	inc    eax
     21d:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     223:	00 00                	add    BYTE PTR [eax],al
     225:	0a 2e                	or     ch,BYTE PTR [esi]
     227:	01 3f                	add    DWORD PTR [edi],edi
     229:	19 03                	sbb    DWORD PTR [ebx],eax
     22b:	0e                   	push   cs
     22c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     22e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     230:	27                   	daa    
     231:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     234:	11 01                	adc    DWORD PTR [ecx],eax
     236:	12 06                	adc    al,BYTE PTR [esi]
     238:	40                   	inc    eax
     239:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     23f:	00 00                	add    BYTE PTR [eax],al
     241:	0b 0b                	or     ecx,DWORD PTR [ebx]
     243:	01 11                	add    DWORD PTR [ecx],edx
     245:	01 12                	add    DWORD PTR [edx],edx
     247:	06                   	push   es
     248:	00 00                	add    BYTE PTR [eax],al
     24a:	0c 34                	or     al,0x34
     24c:	00 03                	add    BYTE PTR [ebx],al
     24e:	0e                   	push   cs
     24f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     251:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     253:	49                   	dec    ecx
     254:	13 3f                	adc    edi,DWORD PTR [edi]
     256:	19 02                	sbb    DWORD PTR [edx],eax
     258:	18 00                	sbb    BYTE PTR [eax],al
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	01 11                	add    DWORD PTR [ecx],edx
     25e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     264:	0e                   	push   cs
     265:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     267:	11 01                	adc    DWORD PTR [ecx],eax
     269:	12 06                	adc    al,BYTE PTR [esi]
     26b:	10 17                	adc    BYTE PTR [edi],dl
     26d:	00 00                	add    BYTE PTR [eax],al
     26f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     272:	0b 0b                	or     ecx,DWORD PTR [ebx]
     274:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     277:	0e                   	push   cs
     278:	00 00                	add    BYTE PTR [eax],al
     27a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     27d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     27f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     282:	08 00                	or     BYTE PTR [eax],al
     284:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     287:	00 03                	add    BYTE PTR [ebx],al
     289:	0e                   	push   cs
     28a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     28c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     28e:	49                   	dec    ecx
     28f:	13 00                	adc    eax,DWORD PTR [eax]
     291:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     297:	49                   	dec    ecx
     298:	13 00                	adc    eax,DWORD PTR [eax]
     29a:	00 06                	add    BYTE PTR [esi],al
     29c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     29f:	19 03                	sbb    DWORD PTR [ebx],eax
     2a1:	0e                   	push   cs
     2a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2a6:	27                   	daa    
     2a7:	19 11                	sbb    DWORD PTR [ecx],edx
     2a9:	01 12                	add    DWORD PTR [edx],edx
     2ab:	06                   	push   es
     2ac:	40                   	inc    eax
     2ad:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     2b3:	00 00                	add    BYTE PTR [eax],al
     2b5:	07                   	pop    es
     2b6:	05 00 03 08 3a       	add    eax,0x3a080300
     2bb:	0b 3b                	or     edi,DWORD PTR [ebx]
     2bd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     2c0:	02 18                	add    bl,BYTE PTR [eax]
     2c2:	00 00                	add    BYTE PTR [eax],al
     2c4:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     2c7:	03 08                	add    ecx,DWORD PTR [eax]
     2c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2cd:	49                   	dec    ecx
     2ce:	13 02                	adc    eax,DWORD PTR [edx]
     2d0:	18 00                	sbb    BYTE PTR [eax],al
     2d2:	00 09                	add    BYTE PTR [ecx],cl
     2d4:	34 00                	xor    al,0x0
     2d6:	03 0e                	add    ecx,DWORD PTR [esi]
     2d8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2da:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2dc:	49                   	dec    ecx
     2dd:	13 02                	adc    eax,DWORD PTR [edx]
     2df:	18 00                	sbb    BYTE PTR [eax],al
     2e1:	00 0a                	add    BYTE PTR [edx],cl
     2e3:	01 01                	add    DWORD PTR [ecx],eax
     2e5:	49                   	dec    ecx
     2e6:	13 01                	adc    eax,DWORD PTR [ecx]
     2e8:	13 00                	adc    eax,DWORD PTR [eax]
     2ea:	00 0b                	add    BYTE PTR [ebx],cl
     2ec:	21 00                	and    DWORD PTR [eax],eax
     2ee:	49                   	dec    ecx
     2ef:	13 2f                	adc    ebp,DWORD PTR [edi]
     2f1:	0b 00                	or     eax,DWORD PTR [eax]
     2f3:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     2f6:	01 3f                	add    DWORD PTR [edi],edi
     2f8:	19 03                	sbb    DWORD PTR [ebx],eax
     2fa:	0e                   	push   cs
     2fb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2fd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2ff:	11 01                	adc    DWORD PTR [ecx],eax
     301:	12 06                	adc    al,BYTE PTR [esi]
     303:	40                   	inc    eax
     304:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     30a:	00 00                	add    BYTE PTR [eax],al
     30c:	0d 34 00 03 0e       	or     eax,0xe030034
     311:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     313:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     315:	49                   	dec    ecx
     316:	13 3f                	adc    edi,DWORD PTR [edi]
     318:	19 02                	sbb    DWORD PTR [edx],eax
     31a:	18 00                	sbb    BYTE PTR [eax],al
     31c:	00 0e                	add    BYTE PTR [esi],cl
     31e:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     322:	00 00                	add    BYTE PTR [eax],al
     324:	00 01                	add    BYTE PTR [ecx],al
     326:	11 01                	adc    DWORD PTR [ecx],eax
     328:	25 0e 13 0b 03       	and    eax,0x30b130e
     32d:	0e                   	push   cs
     32e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     330:	11 01                	adc    DWORD PTR [ecx],eax
     332:	12 06                	adc    al,BYTE PTR [esi]
     334:	10 17                	adc    BYTE PTR [edi],dl
     336:	00 00                	add    BYTE PTR [eax],al
     338:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     33b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     33d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     340:	0e                   	push   cs
     341:	00 00                	add    BYTE PTR [eax],al
     343:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     346:	0b 0b                	or     ecx,DWORD PTR [ebx]
     348:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     34b:	08 00                	or     BYTE PTR [eax],al
     34d:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     350:	00 0b                	add    BYTE PTR [ebx],cl
     352:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     355:	00 00                	add    BYTE PTR [eax],al
     357:	05 16 00 03 0e       	add    eax,0xe030016
     35c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     35e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     360:	49                   	dec    ecx
     361:	13 00                	adc    eax,DWORD PTR [eax]
     363:	00 06                	add    BYTE PTR [esi],al
     365:	04 01                	add    al,0x1
     367:	03 0e                	add    ecx,DWORD PTR [esi]
     369:	0b 0b                	or     ecx,DWORD PTR [ebx]
     36b:	49                   	dec    ecx
     36c:	13 3a                	adc    edi,DWORD PTR [edx]
     36e:	0b 3b                	or     edi,DWORD PTR [ebx]
     370:	0b 01                	or     eax,DWORD PTR [ecx]
     372:	13 00                	adc    eax,DWORD PTR [eax]
     374:	00 07                	add    BYTE PTR [edi],al
     376:	28 00                	sub    BYTE PTR [eax],al
     378:	03 0e                	add    ecx,DWORD PTR [esi]
     37a:	1c 0b                	sbb    al,0xb
     37c:	00 00                	add    BYTE PTR [eax],al
     37e:	08 28                	or     BYTE PTR [eax],ch
     380:	00 03                	add    BYTE PTR [ebx],al
     382:	0e                   	push   cs
     383:	1c 05                	sbb    al,0x5
     385:	00 00                	add    BYTE PTR [eax],al
     387:	09 2e                	or     DWORD PTR [esi],ebp
     389:	01 3f                	add    DWORD PTR [edi],edi
     38b:	19 03                	sbb    DWORD PTR [ebx],eax
     38d:	0e                   	push   cs
     38e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     390:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     392:	27                   	daa    
     393:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     396:	11 01                	adc    DWORD PTR [ecx],eax
     398:	12 06                	adc    al,BYTE PTR [esi]
     39a:	40                   	inc    eax
     39b:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3a1:	00 00                	add    BYTE PTR [eax],al
     3a3:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     3a9:	0b 3b                	or     edi,DWORD PTR [ebx]
     3ab:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     3ae:	02 18                	add    bl,BYTE PTR [eax]
     3b0:	00 00                	add    BYTE PTR [eax],al
     3b2:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     3b5:	03 0e                	add    ecx,DWORD PTR [esi]
     3b7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3b9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3bb:	49                   	dec    ecx
     3bc:	13 02                	adc    eax,DWORD PTR [edx]
     3be:	18 00                	sbb    BYTE PTR [eax],al
     3c0:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     3c3:	01 3f                	add    DWORD PTR [edi],edi
     3c5:	19 03                	sbb    DWORD PTR [ebx],eax
     3c7:	0e                   	push   cs
     3c8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3ca:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3cc:	49                   	dec    ecx
     3cd:	13 3c 19             	adc    edi,DWORD PTR [ecx+ebx*1]
     3d0:	01 13                	add    DWORD PTR [ebx],edx
     3d2:	00 00                	add    BYTE PTR [eax],al
     3d4:	0d 18 00 00 00       	or     eax,0x18
     3d9:	0e                   	push   cs
     3da:	0b 01                	or     eax,DWORD PTR [ecx]
     3dc:	55                   	push   ebp
     3dd:	17                   	pop    ss
     3de:	00 00                	add    BYTE PTR [eax],al
     3e0:	0f 34                	sysenter 
     3e2:	00 03                	add    BYTE PTR [ebx],al
     3e4:	08 3a                	or     BYTE PTR [edx],bh
     3e6:	0b 3b                	or     edi,DWORD PTR [ebx]
     3e8:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     3eb:	02 18                	add    bl,BYTE PTR [eax]
     3ed:	00 00                	add    BYTE PTR [eax],al
     3ef:	10 0b                	adc    BYTE PTR [ebx],cl
     3f1:	01 11                	add    DWORD PTR [ecx],edx
     3f3:	01 12                	add    DWORD PTR [edx],edx
     3f5:	06                   	push   es
     3f6:	00 00                	add    BYTE PTR [eax],al
     3f8:	11 2e                	adc    DWORD PTR [esi],ebp
     3fa:	01 3f                	add    DWORD PTR [edi],edi
     3fc:	19 03                	sbb    DWORD PTR [ebx],eax
     3fe:	0e                   	push   cs
     3ff:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     401:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     403:	49                   	dec    ecx
     404:	13 3c 19             	adc    edi,DWORD PTR [ecx+ebx*1]
     407:	00 00                	add    BYTE PTR [eax],al
     409:	12 01                	adc    al,BYTE PTR [ecx]
     40b:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
     40e:	01 13                	add    DWORD PTR [ebx],edx
     410:	00 00                	add    BYTE PTR [eax],al
     412:	13 21                	adc    esp,DWORD PTR [ecx]
     414:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     417:	2f                   	das    
     418:	0b 00                	or     eax,DWORD PTR [eax]
     41a:	00 14 2e             	add    BYTE PTR [esi+ebp*1],dl
     41d:	01 3f                	add    DWORD PTR [edi],edi
     41f:	19 03                	sbb    DWORD PTR [ebx],eax
     421:	0e                   	push   cs
     422:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     424:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     426:	27                   	daa    
     427:	19 11                	sbb    DWORD PTR [ecx],edx
     429:	01 12                	add    DWORD PTR [edx],edx
     42b:	06                   	push   es
     42c:	40                   	inc    eax
     42d:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     433:	00 00                	add    BYTE PTR [eax],al
     435:	15 0b 01 11 01       	adc    eax,0x111010b
     43a:	12 06                	adc    al,BYTE PTR [esi]
     43c:	01 13                	add    DWORD PTR [ebx],edx
     43e:	00 00                	add    BYTE PTR [eax],al
     440:	16                   	push   ss
     441:	05 00 03 08 3a       	add    eax,0x3a080300
     446:	0b 3b                	or     edi,DWORD PTR [ebx]
     448:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     44b:	02 18                	add    bl,BYTE PTR [eax]
     44d:	00 00                	add    BYTE PTR [eax],al
     44f:	17                   	pop    ss
     450:	34 00                	xor    al,0x0
     452:	03 0e                	add    ecx,DWORD PTR [esi]
     454:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     456:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     458:	49                   	dec    ecx
     459:	13 3f                	adc    edi,DWORD PTR [edi]
     45b:	19 02                	sbb    DWORD PTR [edx],eax
     45d:	18 00                	sbb    BYTE PTR [eax],al
     45f:	00 00                	add    BYTE PTR [eax],al
     461:	01 11                	add    DWORD PTR [ecx],edx
     463:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     469:	0e                   	push   cs
     46a:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     46c:	11 01                	adc    DWORD PTR [ecx],eax
     46e:	12 06                	adc    al,BYTE PTR [esi]
     470:	10 17                	adc    BYTE PTR [edi],dl
     472:	00 00                	add    BYTE PTR [eax],al
     474:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     477:	0b 0b                	or     ecx,DWORD PTR [ebx]
     479:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     47c:	0e                   	push   cs
     47d:	00 00                	add    BYTE PTR [eax],al
     47f:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     482:	0b 0b                	or     ecx,DWORD PTR [ebx]
     484:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     487:	08 00                	or     BYTE PTR [eax],al
     489:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     48c:	00 0b                	add    BYTE PTR [ebx],cl
     48e:	0b 00                	or     eax,DWORD PTR [eax]
     490:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     496:	49                   	dec    ecx
     497:	13 00                	adc    eax,DWORD PTR [eax]
     499:	00 06                	add    BYTE PTR [esi],al
     49b:	16                   	push   ss
     49c:	00 03                	add    BYTE PTR [ebx],al
     49e:	0e                   	push   cs
     49f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4a1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4a3:	49                   	dec    ecx
     4a4:	13 00                	adc    eax,DWORD PTR [eax]
     4a6:	00 07                	add    BYTE PTR [edi],al
     4a8:	04 01                	add    al,0x1
     4aa:	03 0e                	add    ecx,DWORD PTR [esi]
     4ac:	0b 0b                	or     ecx,DWORD PTR [ebx]
     4ae:	49                   	dec    ecx
     4af:	13 3a                	adc    edi,DWORD PTR [edx]
     4b1:	0b 3b                	or     edi,DWORD PTR [ebx]
     4b3:	0b 01                	or     eax,DWORD PTR [ecx]
     4b5:	13 00                	adc    eax,DWORD PTR [eax]
     4b7:	00 08                	add    BYTE PTR [eax],cl
     4b9:	28 00                	sub    BYTE PTR [eax],al
     4bb:	03 0e                	add    ecx,DWORD PTR [esi]
     4bd:	1c 0b                	sbb    al,0xb
     4bf:	00 00                	add    BYTE PTR [eax],al
     4c1:	09 28                	or     DWORD PTR [eax],ebp
     4c3:	00 03                	add    BYTE PTR [ebx],al
     4c5:	0e                   	push   cs
     4c6:	1c 05                	sbb    al,0x5
     4c8:	00 00                	add    BYTE PTR [eax],al
     4ca:	0a 13                	or     dl,BYTE PTR [ebx]
     4cc:	01 03                	add    DWORD PTR [ebx],eax
     4ce:	0e                   	push   cs
     4cf:	0b 05 3a 0b 3b 0b    	or     eax,DWORD PTR ds:0xb3b0b3a
     4d5:	01 13                	add    DWORD PTR [ebx],edx
     4d7:	00 00                	add    BYTE PTR [eax],al
     4d9:	0b 0d 00 03 0e 3a    	or     ecx,DWORD PTR ds:0x3a0e0300
     4df:	0b 3b                	or     edi,DWORD PTR [ebx]
     4e1:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     4e4:	38 0b                	cmp    BYTE PTR [ebx],cl
     4e6:	00 00                	add    BYTE PTR [eax],al
     4e8:	0c 0d                	or     al,0xd
     4ea:	00 03                	add    BYTE PTR [ebx],al
     4ec:	0e                   	push   cs
     4ed:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4ef:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4f1:	49                   	dec    ecx
     4f2:	13 38                	adc    edi,DWORD PTR [eax]
     4f4:	05 00 00 0d 01       	add    eax,0x10d0000
     4f9:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
     4fc:	01 13                	add    DWORD PTR [ebx],edx
     4fe:	00 00                	add    BYTE PTR [eax],al
     500:	0e                   	push   cs
     501:	21 00                	and    DWORD PTR [eax],eax
     503:	49                   	dec    ecx
     504:	13 2f                	adc    ebp,DWORD PTR [edi]
     506:	05 00 00 0f 13       	add    eax,0x130f0000
     50b:	01 03                	add    DWORD PTR [ebx],eax
     50d:	0e                   	push   cs
     50e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     510:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     512:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     514:	01 13                	add    DWORD PTR [ebx],edx
     516:	00 00                	add    BYTE PTR [eax],al
     518:	10 26                	adc    BYTE PTR [esi],ah
     51a:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     51d:	00 00                	add    BYTE PTR [eax],al
     51f:	11 2e                	adc    DWORD PTR [esi],ebp
     521:	01 3f                	add    DWORD PTR [edi],edi
     523:	19 03                	sbb    DWORD PTR [ebx],eax
     525:	0e                   	push   cs
     526:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     528:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     52a:	27                   	daa    
     52b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     52e:	11 01                	adc    DWORD PTR [ecx],eax
     530:	12 06                	adc    al,BYTE PTR [esi]
     532:	40                   	inc    eax
     533:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     539:	00 00                	add    BYTE PTR [eax],al
     53b:	12 05 00 03 0e 3a    	adc    al,BYTE PTR ds:0x3a0e0300
     541:	0b 3b                	or     edi,DWORD PTR [ebx]
     543:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     546:	02 18                	add    bl,BYTE PTR [eax]
     548:	00 00                	add    BYTE PTR [eax],al
     54a:	13 2e                	adc    ebp,DWORD PTR [esi]
     54c:	00 3f                	add    BYTE PTR [edi],bh
     54e:	19 03                	sbb    DWORD PTR [ebx],eax
     550:	0e                   	push   cs
     551:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     553:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     555:	11 01                	adc    DWORD PTR [ecx],eax
     557:	12 06                	adc    al,BYTE PTR [esi]
     559:	40                   	inc    eax
     55a:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     560:	14 34                	adc    al,0x34
     562:	00 03                	add    BYTE PTR [ebx],al
     564:	0e                   	push   cs
     565:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     567:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     569:	49                   	dec    ecx
     56a:	13 02                	adc    eax,DWORD PTR [edx]
     56c:	18 00                	sbb    BYTE PTR [eax],al
     56e:	00 15 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,dl
     574:	03 0e                	add    ecx,DWORD PTR [esi]
     576:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     578:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     57a:	27                   	daa    
     57b:	19 11                	sbb    DWORD PTR [ecx],edx
     57d:	01 12                	add    DWORD PTR [edx],edx
     57f:	06                   	push   es
     580:	40                   	inc    eax
     581:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     587:	00 00                	add    BYTE PTR [eax],al
     589:	16                   	push   ss
     58a:	0b 01                	or     eax,DWORD PTR [ecx]
     58c:	11 01                	adc    DWORD PTR [ecx],eax
     58e:	12 06                	adc    al,BYTE PTR [esi]
     590:	01 13                	add    DWORD PTR [ebx],edx
     592:	00 00                	add    BYTE PTR [eax],al
     594:	17                   	pop    ss
     595:	34 00                	xor    al,0x0
     597:	03 08                	add    ecx,DWORD PTR [eax]
     599:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     59b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     59d:	49                   	dec    ecx
     59e:	13 02                	adc    eax,DWORD PTR [edx]
     5a0:	18 00                	sbb    BYTE PTR [eax],al
     5a2:	00 18                	add    BYTE PTR [eax],bl
     5a4:	0b 01                	or     eax,DWORD PTR [ecx]
     5a6:	11 01                	adc    DWORD PTR [ecx],eax
     5a8:	12 06                	adc    al,BYTE PTR [esi]
     5aa:	00 00                	add    BYTE PTR [eax],al
     5ac:	19 21                	sbb    DWORD PTR [ecx],esp
     5ae:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     5b1:	2f                   	das    
     5b2:	0b 00                	or     eax,DWORD PTR [eax]
     5b4:	00 1a                	add    BYTE PTR [edx],bl
     5b6:	05 00 03 08 3a       	add    eax,0x3a080300
     5bb:	0b 3b                	or     edi,DWORD PTR [ebx]
     5bd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     5c0:	02 18                	add    bl,BYTE PTR [eax]
     5c2:	00 00                	add    BYTE PTR [eax],al
     5c4:	1b 0a                	sbb    ecx,DWORD PTR [edx]
     5c6:	00 03                	add    BYTE PTR [ebx],al
     5c8:	0e                   	push   cs
     5c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5cd:	11 01                	adc    DWORD PTR [ecx],eax
     5cf:	00 00                	add    BYTE PTR [eax],al
     5d1:	1c 34                	sbb    al,0x34
     5d3:	00 03                	add    BYTE PTR [ebx],al
     5d5:	0e                   	push   cs
     5d6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5d8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5da:	49                   	dec    ecx
     5db:	13 3f                	adc    edi,DWORD PTR [edi]
     5dd:	19 02                	sbb    DWORD PTR [edx],eax
     5df:	18 00                	sbb    BYTE PTR [eax],al
     5e1:	00 00                	add    BYTE PTR [eax],al
     5e3:	01 11                	add    DWORD PTR [ecx],edx
     5e5:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     5eb:	0e                   	push   cs
     5ec:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     5ee:	11 01                	adc    DWORD PTR [ecx],eax
     5f0:	12 06                	adc    al,BYTE PTR [esi]
     5f2:	10 17                	adc    BYTE PTR [edi],dl
     5f4:	00 00                	add    BYTE PTR [eax],al
     5f6:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     5f9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     5fb:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     5fe:	0e                   	push   cs
     5ff:	00 00                	add    BYTE PTR [eax],al
     601:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     604:	0b 0b                	or     ecx,DWORD PTR [ebx]
     606:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     609:	08 00                	or     BYTE PTR [eax],al
     60b:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     60e:	00 0b                	add    BYTE PTR [ebx],cl
     610:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     613:	00 00                	add    BYTE PTR [eax],al
     615:	05 04 01 03 0e       	add    eax,0xe030104
     61a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     61c:	49                   	dec    ecx
     61d:	13 3a                	adc    edi,DWORD PTR [edx]
     61f:	0b 3b                	or     edi,DWORD PTR [ebx]
     621:	0b 01                	or     eax,DWORD PTR [ecx]
     623:	13 00                	adc    eax,DWORD PTR [eax]
     625:	00 06                	add    BYTE PTR [esi],al
     627:	28 00                	sub    BYTE PTR [eax],al
     629:	03 0e                	add    ecx,DWORD PTR [esi]
     62b:	1c 0b                	sbb    al,0xb
     62d:	00 00                	add    BYTE PTR [eax],al
     62f:	07                   	pop    es
     630:	28 00                	sub    BYTE PTR [eax],al
     632:	03 0e                	add    ecx,DWORD PTR [esi]
     634:	1c 05                	sbb    al,0x5
     636:	00 00                	add    BYTE PTR [eax],al
     638:	08 2e                	or     BYTE PTR [esi],ch
     63a:	01 3f                	add    DWORD PTR [edi],edi
     63c:	19 03                	sbb    DWORD PTR [ebx],eax
     63e:	0e                   	push   cs
     63f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     641:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     643:	27                   	daa    
     644:	19 11                	sbb    DWORD PTR [ecx],edx
     646:	01 12                	add    DWORD PTR [edx],edx
     648:	06                   	push   es
     649:	40                   	inc    eax
     64a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     650:	00 00                	add    BYTE PTR [eax],al
     652:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     658:	0b 3b                	or     edi,DWORD PTR [ebx]
     65a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     65d:	02 18                	add    bl,BYTE PTR [eax]
     65f:	00 00                	add    BYTE PTR [eax],al
     661:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     667:	0b 3b                	or     edi,DWORD PTR [ebx]
     669:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     66c:	02 18                	add    bl,BYTE PTR [eax]
     66e:	00 00                	add    BYTE PTR [eax],al
     670:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     673:	03 0e                	add    ecx,DWORD PTR [esi]
     675:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     677:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     679:	49                   	dec    ecx
     67a:	13 02                	adc    eax,DWORD PTR [edx]
     67c:	18 00                	sbb    BYTE PTR [eax],al
     67e:	00 0c 01             	add    BYTE PTR [ecx+eax*1],cl
     681:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
     684:	01 13                	add    DWORD PTR [ebx],edx
     686:	00 00                	add    BYTE PTR [eax],al
     688:	0d 21 00 49 13       	or     eax,0x13490021
     68d:	2f                   	das    
     68e:	0b 00                	or     eax,DWORD PTR [eax]
     690:	00 0e                	add    BYTE PTR [esi],cl
     692:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     695:	19 03                	sbb    DWORD PTR [ebx],eax
     697:	0e                   	push   cs
     698:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     69a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     69c:	49                   	dec    ecx
     69d:	13 11                	adc    edx,DWORD PTR [ecx]
     69f:	01 12                	add    DWORD PTR [edx],edx
     6a1:	06                   	push   es
     6a2:	40                   	inc    eax
     6a3:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     6a9:	00 00                	add    BYTE PTR [eax],al
     6ab:	0f 34                	sysenter 
     6ad:	00 03                	add    BYTE PTR [ebx],al
     6af:	08 3a                	or     BYTE PTR [edx],bh
     6b1:	0b 3b                	or     edi,DWORD PTR [ebx]
     6b3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     6b6:	02 18                	add    bl,BYTE PTR [eax]
     6b8:	00 00                	add    BYTE PTR [eax],al
     6ba:	10 2e                	adc    BYTE PTR [esi],ch
     6bc:	01 3f                	add    DWORD PTR [edi],edi
     6be:	19 03                	sbb    DWORD PTR [ebx],eax
     6c0:	0e                   	push   cs
     6c1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6c3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6c5:	27                   	daa    
     6c6:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     6c9:	11 01                	adc    DWORD PTR [ecx],eax
     6cb:	12 06                	adc    al,BYTE PTR [esi]
     6cd:	40                   	inc    eax
     6ce:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     6d4:	00 00                	add    BYTE PTR [eax],al
     6d6:	11 0a                	adc    DWORD PTR [edx],ecx
     6d8:	00 03                	add    BYTE PTR [ebx],al
     6da:	0e                   	push   cs
     6db:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6dd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6df:	11 01                	adc    DWORD PTR [ecx],eax
     6e1:	00 00                	add    BYTE PTR [eax],al
     6e3:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     6e6:	03 0e                	add    ecx,DWORD PTR [esi]
     6e8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6ea:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6ec:	49                   	dec    ecx
     6ed:	13 3f                	adc    edi,DWORD PTR [edi]
     6ef:	19 02                	sbb    DWORD PTR [edx],eax
     6f1:	18 00                	sbb    BYTE PTR [eax],al
     6f3:	00 00                	add    BYTE PTR [eax],al
     6f5:	01 11                	add    DWORD PTR [ecx],edx
     6f7:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     6fd:	0e                   	push   cs
     6fe:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     700:	11 01                	adc    DWORD PTR [ecx],eax
     702:	12 06                	adc    al,BYTE PTR [esi]
     704:	10 17                	adc    BYTE PTR [edi],dl
     706:	00 00                	add    BYTE PTR [eax],al
     708:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     70b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     70d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     710:	0e                   	push   cs
     711:	00 00                	add    BYTE PTR [eax],al
     713:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     716:	0b 0b                	or     ecx,DWORD PTR [ebx]
     718:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     71b:	08 00                	or     BYTE PTR [eax],al
     71d:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     720:	00 0b                	add    BYTE PTR [ebx],cl
     722:	0b 00                	or     eax,DWORD PTR [eax]
     724:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     72a:	49                   	dec    ecx
     72b:	13 00                	adc    eax,DWORD PTR [eax]
     72d:	00 06                	add    BYTE PTR [esi],al
     72f:	16                   	push   ss
     730:	00 03                	add    BYTE PTR [ebx],al
     732:	0e                   	push   cs
     733:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     735:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     737:	49                   	dec    ecx
     738:	13 00                	adc    eax,DWORD PTR [eax]
     73a:	00 07                	add    BYTE PTR [edi],al
     73c:	0f 00 0b             	str    WORD PTR [ebx]
     73f:	0b 03                	or     eax,DWORD PTR [ebx]
     741:	0e                   	push   cs
     742:	49                   	dec    ecx
     743:	13 00                	adc    eax,DWORD PTR [eax]
     745:	00 08                	add    BYTE PTR [eax],cl
     747:	04 01                	add    al,0x1
     749:	03 0e                	add    ecx,DWORD PTR [esi]
     74b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     74d:	49                   	dec    ecx
     74e:	13 3a                	adc    edi,DWORD PTR [edx]
     750:	0b 3b                	or     edi,DWORD PTR [ebx]
     752:	0b 01                	or     eax,DWORD PTR [ecx]
     754:	13 00                	adc    eax,DWORD PTR [eax]
     756:	00 09                	add    BYTE PTR [ecx],cl
     758:	28 00                	sub    BYTE PTR [eax],al
     75a:	03 0e                	add    ecx,DWORD PTR [esi]
     75c:	1c 0b                	sbb    al,0xb
     75e:	00 00                	add    BYTE PTR [eax],al
     760:	0a 28                	or     ch,BYTE PTR [eax]
     762:	00 03                	add    BYTE PTR [ebx],al
     764:	0e                   	push   cs
     765:	1c 05                	sbb    al,0x5
     767:	00 00                	add    BYTE PTR [eax],al
     769:	0b 26                	or     esp,DWORD PTR [esi]
     76b:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     76e:	00 00                	add    BYTE PTR [eax],al
     770:	0c 2e                	or     al,0x2e
     772:	01 3f                	add    DWORD PTR [edi],edi
     774:	19 03                	sbb    DWORD PTR [ebx],eax
     776:	0e                   	push   cs
     777:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     779:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     77b:	27                   	daa    
     77c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     77f:	11 01                	adc    DWORD PTR [ecx],eax
     781:	12 06                	adc    al,BYTE PTR [esi]
     783:	40                   	inc    eax
     784:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     78a:	00 00                	add    BYTE PTR [eax],al
     78c:	0d 05 00 03 0e       	or     eax,0xe030005
     791:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     793:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     795:	49                   	dec    ecx
     796:	13 02                	adc    eax,DWORD PTR [edx]
     798:	18 00                	sbb    BYTE PTR [eax],al
     79a:	00 0e                	add    BYTE PTR [esi],cl
     79c:	34 00                	xor    al,0x0
     79e:	03 0e                	add    ecx,DWORD PTR [esi]
     7a0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7a2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7a4:	49                   	dec    ecx
     7a5:	13 02                	adc    eax,DWORD PTR [edx]
     7a7:	18 00                	sbb    BYTE PTR [eax],al
     7a9:	00 0f                	add    BYTE PTR [edi],cl
     7ab:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     7ae:	19 03                	sbb    DWORD PTR [ebx],eax
     7b0:	0e                   	push   cs
     7b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7b5:	11 01                	adc    DWORD PTR [ecx],eax
     7b7:	12 06                	adc    al,BYTE PTR [esi]
     7b9:	40                   	inc    eax
     7ba:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     7c0:	10 2e                	adc    BYTE PTR [esi],ch
     7c2:	00 3f                	add    BYTE PTR [edi],bh
     7c4:	19 03                	sbb    DWORD PTR [ebx],eax
     7c6:	0e                   	push   cs
     7c7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7c9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7cb:	27                   	daa    
     7cc:	19 11                	sbb    DWORD PTR [ecx],edx
     7ce:	01 12                	add    DWORD PTR [edx],edx
     7d0:	06                   	push   es
     7d1:	40                   	inc    eax
     7d2:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     7d8:	11 2e                	adc    DWORD PTR [esi],ebp
     7da:	01 3f                	add    DWORD PTR [edi],edi
     7dc:	19 03                	sbb    DWORD PTR [ebx],eax
     7de:	0e                   	push   cs
     7df:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7e1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7e3:	27                   	daa    
     7e4:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     7e7:	11 01                	adc    DWORD PTR [ecx],eax
     7e9:	12 06                	adc    al,BYTE PTR [esi]
     7eb:	40                   	inc    eax
     7ec:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     7f2:	00 00                	add    BYTE PTR [eax],al
     7f4:	12 18                	adc    bl,BYTE PTR [eax]
     7f6:	00 00                	add    BYTE PTR [eax],al
     7f8:	00 13                	add    BYTE PTR [ebx],dl
     7fa:	34 00                	xor    al,0x0
     7fc:	03 08                	add    ecx,DWORD PTR [eax]
     7fe:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     800:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     802:	49                   	dec    ecx
     803:	13 02                	adc    eax,DWORD PTR [edx]
     805:	18 00                	sbb    BYTE PTR [eax],al
     807:	00 14 0b             	add    BYTE PTR [ebx+ecx*1],dl
     80a:	01 11                	add    DWORD PTR [ecx],edx
     80c:	01 12                	add    DWORD PTR [edx],edx
     80e:	06                   	push   es
     80f:	00 00                	add    BYTE PTR [eax],al
     811:	15 2e 01 3f 19       	adc    eax,0x193f012e
     816:	03 0e                	add    ecx,DWORD PTR [esi]
     818:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     81a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     81c:	27                   	daa    
     81d:	19 11                	sbb    DWORD PTR [ecx],edx
     81f:	01 12                	add    DWORD PTR [edx],edx
     821:	06                   	push   es
     822:	40                   	inc    eax
     823:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     829:	00 00                	add    BYTE PTR [eax],al
     82b:	16                   	push   ss
     82c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     82f:	19 03                	sbb    DWORD PTR [ebx],eax
     831:	0e                   	push   cs
     832:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     834:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     836:	49                   	dec    ecx
     837:	13 11                	adc    edx,DWORD PTR [ecx]
     839:	01 12                	add    DWORD PTR [edx],edx
     83b:	06                   	push   es
     83c:	40                   	inc    eax
     83d:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     843:	00 00                	add    BYTE PTR [eax],al
     845:	17                   	pop    ss
     846:	05 00 03 08 3a       	add    eax,0x3a080300
     84b:	0b 3b                	or     edi,DWORD PTR [ebx]
     84d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     850:	02 18                	add    bl,BYTE PTR [eax]
     852:	00 00                	add    BYTE PTR [eax],al
     854:	18 34 00             	sbb    BYTE PTR [eax+eax*1],dh
     857:	03 08                	add    ecx,DWORD PTR [eax]
     859:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     85b:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     861:	00 00                	add    BYTE PTR [eax],al
     863:	19 04 01             	sbb    DWORD PTR [ecx+eax*1],eax
     866:	03 0e                	add    ecx,DWORD PTR [esi]
     868:	0b 0b                	or     ecx,DWORD PTR [ebx]
     86a:	49                   	dec    ecx
     86b:	13 3a                	adc    edi,DWORD PTR [edx]
     86d:	0b 3b                	or     edi,DWORD PTR [ebx]
     86f:	05 01 13 00 00       	add    eax,0x1301
     874:	1a 34 00             	sbb    dh,BYTE PTR [eax+eax*1]
     877:	03 0e                	add    ecx,DWORD PTR [esi]
     879:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     87b:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     881:	00 00                	add    BYTE PTR [eax],al
     883:	1b 0b                	sbb    ecx,DWORD PTR [ebx]
     885:	01 11                	add    DWORD PTR [ecx],edx
     887:	01 12                	add    DWORD PTR [edx],edx
     889:	06                   	push   es
     88a:	01 13                	add    DWORD PTR [ebx],edx
     88c:	00 00                	add    BYTE PTR [eax],al
     88e:	1c 2e                	sbb    al,0x2e
     890:	01 3f                	add    DWORD PTR [edi],edi
     892:	19 03                	sbb    DWORD PTR [ebx],eax
     894:	0e                   	push   cs
     895:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     897:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     89d:	11 01                	adc    DWORD PTR [ecx],eax
     89f:	12 06                	adc    al,BYTE PTR [esi]
     8a1:	40                   	inc    eax
     8a2:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     8a8:	00 00                	add    BYTE PTR [eax],al
     8aa:	1d 05 00 03 0e       	sbb    eax,0xe030005
     8af:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8b1:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     8b7:	00 00                	add    BYTE PTR [eax],al
     8b9:	1e                   	push   ds
     8ba:	0b 01                	or     eax,DWORD PTR [ecx]
     8bc:	55                   	push   ebp
     8bd:	17                   	pop    ss
     8be:	00 00                	add    BYTE PTR [eax],al
     8c0:	1f                   	pop    ds
     8c1:	01 01                	add    DWORD PTR [ecx],eax
     8c3:	49                   	dec    ecx
     8c4:	13 01                	adc    eax,DWORD PTR [ecx]
     8c6:	13 00                	adc    eax,DWORD PTR [eax]
     8c8:	00 20                	add    BYTE PTR [eax],ah
     8ca:	21 00                	and    DWORD PTR [eax],eax
     8cc:	49                   	dec    ecx
     8cd:	13 2f                	adc    ebp,DWORD PTR [edi]
     8cf:	05 00 00 21 21       	add    eax,0x21210000
     8d4:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     8d7:	2f                   	das    
     8d8:	0b 00                	or     eax,DWORD PTR [eax]
     8da:	00 22                	add    BYTE PTR [edx],ah
     8dc:	05 00 03 08 3a       	add    eax,0x3a080300
     8e1:	0b 3b                	or     edi,DWORD PTR [ebx]
     8e3:	05 49 13 02 18       	add    eax,0x18021349
     8e8:	00 00                	add    BYTE PTR [eax],al
     8ea:	23 2e                	and    ebp,DWORD PTR [esi]
     8ec:	00 3f                	add    BYTE PTR [edi],bh
     8ee:	19 03                	sbb    DWORD PTR [ebx],eax
     8f0:	0e                   	push   cs
     8f1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8f3:	3b 05 11 01 12 06    	cmp    eax,DWORD PTR ds:0x6120111
     8f9:	40                   	inc    eax
     8fa:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     900:	24 34                	and    al,0x34
     902:	00 03                	add    BYTE PTR [ebx],al
     904:	0e                   	push   cs
     905:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     907:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     909:	49                   	dec    ecx
     90a:	13 3f                	adc    edi,DWORD PTR [edi]
     90c:	19 02                	sbb    DWORD PTR [edx],eax
     90e:	18 00                	sbb    BYTE PTR [eax],al
     910:	00 00                	add    BYTE PTR [eax],al
     912:	01 11                	add    DWORD PTR [ecx],edx
     914:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     91a:	0e                   	push   cs
     91b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     91d:	11 01                	adc    DWORD PTR [ecx],eax
     91f:	12 06                	adc    al,BYTE PTR [esi]
     921:	10 17                	adc    BYTE PTR [edi],dl
     923:	00 00                	add    BYTE PTR [eax],al
     925:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     928:	0b 0b                	or     ecx,DWORD PTR [ebx]
     92a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     92d:	0e                   	push   cs
     92e:	00 00                	add    BYTE PTR [eax],al
     930:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     933:	0b 0b                	or     ecx,DWORD PTR [ebx]
     935:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     938:	08 00                	or     BYTE PTR [eax],al
     93a:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     93d:	00 0b                	add    BYTE PTR [ebx],cl
     93f:	0b 00                	or     eax,DWORD PTR [eax]
     941:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     947:	49                   	dec    ecx
     948:	13 00                	adc    eax,DWORD PTR [eax]
     94a:	00 06                	add    BYTE PTR [esi],al
     94c:	16                   	push   ss
     94d:	00 03                	add    BYTE PTR [ebx],al
     94f:	0e                   	push   cs
     950:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     952:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     954:	49                   	dec    ecx
     955:	13 00                	adc    eax,DWORD PTR [eax]
     957:	00 07                	add    BYTE PTR [edi],al
     959:	04 01                	add    al,0x1
     95b:	03 0e                	add    ecx,DWORD PTR [esi]
     95d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     95f:	49                   	dec    ecx
     960:	13 3a                	adc    edi,DWORD PTR [edx]
     962:	0b 3b                	or     edi,DWORD PTR [ebx]
     964:	0b 01                	or     eax,DWORD PTR [ecx]
     966:	13 00                	adc    eax,DWORD PTR [eax]
     968:	00 08                	add    BYTE PTR [eax],cl
     96a:	28 00                	sub    BYTE PTR [eax],al
     96c:	03 0e                	add    ecx,DWORD PTR [esi]
     96e:	1c 0b                	sbb    al,0xb
     970:	00 00                	add    BYTE PTR [eax],al
     972:	09 28                	or     DWORD PTR [eax],ebp
     974:	00 03                	add    BYTE PTR [ebx],al
     976:	0e                   	push   cs
     977:	1c 05                	sbb    al,0x5
     979:	00 00                	add    BYTE PTR [eax],al
     97b:	0a 13                	or     dl,BYTE PTR [ebx]
     97d:	01 03                	add    DWORD PTR [ebx],eax
     97f:	0e                   	push   cs
     980:	0b 0b                	or     ecx,DWORD PTR [ebx]
     982:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     984:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     986:	01 13                	add    DWORD PTR [ebx],edx
     988:	00 00                	add    BYTE PTR [eax],al
     98a:	0b 0d 00 03 0e 3a    	or     ecx,DWORD PTR ds:0x3a0e0300
     990:	0b 3b                	or     edi,DWORD PTR [ebx]
     992:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     995:	38 0b                	cmp    BYTE PTR [ebx],cl
     997:	00 00                	add    BYTE PTR [eax],al
     999:	0c 0d                	or     al,0xd
     99b:	00 03                	add    BYTE PTR [ebx],al
     99d:	08 3a                	or     BYTE PTR [edx],bh
     99f:	0b 3b                	or     edi,DWORD PTR [ebx]
     9a1:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9a4:	38 0b                	cmp    BYTE PTR [ebx],cl
     9a6:	00 00                	add    BYTE PTR [eax],al
     9a8:	0d 2e 01 3f 19       	or     eax,0x193f012e
     9ad:	03 0e                	add    ecx,DWORD PTR [esi]
     9af:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9b1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9b3:	27                   	daa    
     9b4:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     9b7:	11 01                	adc    DWORD PTR [ecx],eax
     9b9:	12 06                	adc    al,BYTE PTR [esi]
     9bb:	40                   	inc    eax
     9bc:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     9c2:	00 00                	add    BYTE PTR [eax],al
     9c4:	0e                   	push   cs
     9c5:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     9ca:	0b 3b                	or     edi,DWORD PTR [ebx]
     9cc:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9cf:	02 18                	add    bl,BYTE PTR [eax]
     9d1:	00 00                	add    BYTE PTR [eax],al
     9d3:	0f 05                	syscall 
     9d5:	00 03                	add    BYTE PTR [ebx],al
     9d7:	08 3a                	or     BYTE PTR [edx],bh
     9d9:	0b 3b                	or     edi,DWORD PTR [ebx]
     9db:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9de:	02 18                	add    bl,BYTE PTR [eax]
     9e0:	00 00                	add    BYTE PTR [eax],al
     9e2:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     9e5:	03 0e                	add    ecx,DWORD PTR [esi]
     9e7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9e9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9eb:	49                   	dec    ecx
     9ec:	13 3f                	adc    edi,DWORD PTR [edi]
     9ee:	19 02                	sbb    DWORD PTR [edx],eax
     9f0:	18 00                	sbb    BYTE PTR [eax],al
     9f2:	00 00                	add    BYTE PTR [eax],al
     9f4:	01 11                	add    DWORD PTR [ecx],edx
     9f6:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     9fc:	0e                   	push   cs
     9fd:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     9ff:	11 01                	adc    DWORD PTR [ecx],eax
     a01:	12 06                	adc    al,BYTE PTR [esi]
     a03:	10 17                	adc    BYTE PTR [edi],dl
     a05:	00 00                	add    BYTE PTR [eax],al
     a07:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     a0a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a0c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a0f:	0e                   	push   cs
     a10:	00 00                	add    BYTE PTR [eax],al
     a12:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     a15:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a17:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a1a:	08 00                	or     BYTE PTR [eax],al
     a1c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     a1f:	00 03                	add    BYTE PTR [ebx],al
     a21:	0e                   	push   cs
     a22:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a24:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a26:	49                   	dec    ecx
     a27:	13 00                	adc    eax,DWORD PTR [eax]
     a29:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     a2f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a31:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a33:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a35:	01 13                	add    DWORD PTR [ebx],edx
     a37:	00 00                	add    BYTE PTR [eax],al
     a39:	06                   	push   es
     a3a:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     a3f:	0b 3b                	or     edi,DWORD PTR [ebx]
     a41:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a44:	38 0b                	cmp    BYTE PTR [ebx],cl
     a46:	00 00                	add    BYTE PTR [eax],al
     a48:	07                   	pop    es
     a49:	0d 00 03 08 3a       	or     eax,0x3a080300
     a4e:	0b 3b                	or     edi,DWORD PTR [ebx]
     a50:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a53:	38 0b                	cmp    BYTE PTR [ebx],cl
     a55:	00 00                	add    BYTE PTR [eax],al
     a57:	08 0f                	or     BYTE PTR [edi],cl
     a59:	00 0b                	add    BYTE PTR [ebx],cl
     a5b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a5e:	00 00                	add    BYTE PTR [eax],al
     a60:	09 0f                	or     DWORD PTR [edi],ecx
     a62:	00 0b                	add    BYTE PTR [ebx],cl
     a64:	0b 00                	or     eax,DWORD PTR [eax]
     a66:	00 0a                	add    BYTE PTR [edx],cl
     a68:	04 01                	add    al,0x1
     a6a:	03 0e                	add    ecx,DWORD PTR [esi]
     a6c:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a6e:	49                   	dec    ecx
     a6f:	13 3a                	adc    edi,DWORD PTR [edx]
     a71:	0b 3b                	or     edi,DWORD PTR [ebx]
     a73:	0b 01                	or     eax,DWORD PTR [ecx]
     a75:	13 00                	adc    eax,DWORD PTR [eax]
     a77:	00 0b                	add    BYTE PTR [ebx],cl
     a79:	28 00                	sub    BYTE PTR [eax],al
     a7b:	03 0e                	add    ecx,DWORD PTR [esi]
     a7d:	1c 0b                	sbb    al,0xb
     a7f:	00 00                	add    BYTE PTR [eax],al
     a81:	0c 28                	or     al,0x28
     a83:	00 03                	add    BYTE PTR [ebx],al
     a85:	0e                   	push   cs
     a86:	1c 05                	sbb    al,0x5
     a88:	00 00                	add    BYTE PTR [eax],al
     a8a:	0d 2e 00 3f 19       	or     eax,0x193f002e
     a8f:	03 0e                	add    ecx,DWORD PTR [esi]
     a91:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a93:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a95:	11 01                	adc    DWORD PTR [ecx],eax
     a97:	12 06                	adc    al,BYTE PTR [esi]
     a99:	40                   	inc    eax
     a9a:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     aa0:	0e                   	push   cs
     aa1:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     aa4:	19 03                	sbb    DWORD PTR [ebx],eax
     aa6:	0e                   	push   cs
     aa7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     aa9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     aab:	27                   	daa    
     aac:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     aaf:	11 01                	adc    DWORD PTR [ecx],eax
     ab1:	12 06                	adc    al,BYTE PTR [esi]
     ab3:	40                   	inc    eax
     ab4:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     aba:	00 00                	add    BYTE PTR [eax],al
     abc:	0f 05                	syscall 
     abe:	00 03                	add    BYTE PTR [ebx],al
     ac0:	0e                   	push   cs
     ac1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ac3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ac5:	49                   	dec    ecx
     ac6:	13 02                	adc    eax,DWORD PTR [edx]
     ac8:	18 00                	sbb    BYTE PTR [eax],al
     aca:	00 10                	add    BYTE PTR [eax],dl
     acc:	34 00                	xor    al,0x0
     ace:	03 0e                	add    ecx,DWORD PTR [esi]
     ad0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ad2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ad4:	49                   	dec    ecx
     ad5:	13 02                	adc    eax,DWORD PTR [edx]
     ad7:	18 00                	sbb    BYTE PTR [eax],al
     ad9:	00 11                	add    BYTE PTR [ecx],dl
     adb:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     ade:	19 03                	sbb    DWORD PTR [ebx],eax
     ae0:	0e                   	push   cs
     ae1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ae3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ae5:	27                   	daa    
     ae6:	19 11                	sbb    DWORD PTR [ecx],edx
     ae8:	01 12                	add    DWORD PTR [edx],edx
     aea:	06                   	push   es
     aeb:	40                   	inc    eax
     aec:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     af2:	00 00                	add    BYTE PTR [eax],al
     af4:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     af7:	03 08                	add    ecx,DWORD PTR [eax]
     af9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     afb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     afd:	49                   	dec    ecx
     afe:	13 02                	adc    eax,DWORD PTR [edx]
     b00:	18 00                	sbb    BYTE PTR [eax],al
     b02:	00 13                	add    BYTE PTR [ebx],dl
     b04:	0a 00                	or     al,BYTE PTR [eax]
     b06:	03 0e                	add    ecx,DWORD PTR [esi]
     b08:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b0a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b0c:	11 01                	adc    DWORD PTR [ecx],eax
     b0e:	00 00                	add    BYTE PTR [eax],al
     b10:	14 2e                	adc    al,0x2e
     b12:	01 3f                	add    DWORD PTR [edi],edi
     b14:	19 03                	sbb    DWORD PTR [ebx],eax
     b16:	0e                   	push   cs
     b17:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b19:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b1b:	27                   	daa    
     b1c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     b1f:	11 01                	adc    DWORD PTR [ecx],eax
     b21:	12 06                	adc    al,BYTE PTR [esi]
     b23:	40                   	inc    eax
     b24:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     b2a:	00 00                	add    BYTE PTR [eax],al
     b2c:	15 0b 01 11 01       	adc    eax,0x111010b
     b31:	12 06                	adc    al,BYTE PTR [esi]
     b33:	00 00                	add    BYTE PTR [eax],al
     b35:	16                   	push   ss
     b36:	34 00                	xor    al,0x0
     b38:	03 0e                	add    ecx,DWORD PTR [esi]
     b3a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b3c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b3e:	49                   	dec    ecx
     b3f:	13 3f                	adc    edi,DWORD PTR [edi]
     b41:	19 02                	sbb    DWORD PTR [edx],eax
     b43:	18 00                	sbb    BYTE PTR [eax],al
     b45:	00 00                	add    BYTE PTR [eax],al
     b47:	01 11                	add    DWORD PTR [ecx],edx
     b49:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     b4f:	0e                   	push   cs
     b50:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     b52:	11 01                	adc    DWORD PTR [ecx],eax
     b54:	12 06                	adc    al,BYTE PTR [esi]
     b56:	10 17                	adc    BYTE PTR [edi],dl
     b58:	00 00                	add    BYTE PTR [eax],al
     b5a:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     b5d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b5f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b62:	0e                   	push   cs
     b63:	00 00                	add    BYTE PTR [eax],al
     b65:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     b68:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b6a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b6d:	08 00                	or     BYTE PTR [eax],al
     b6f:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     b72:	00 0b                	add    BYTE PTR [ebx],cl
     b74:	0b 00                	or     eax,DWORD PTR [eax]
     b76:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     b7c:	49                   	dec    ecx
     b7d:	13 00                	adc    eax,DWORD PTR [eax]
     b7f:	00 06                	add    BYTE PTR [esi],al
     b81:	16                   	push   ss
     b82:	00 03                	add    BYTE PTR [ebx],al
     b84:	0e                   	push   cs
     b85:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b87:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b89:	49                   	dec    ecx
     b8a:	13 00                	adc    eax,DWORD PTR [eax]
     b8c:	00 07                	add    BYTE PTR [edi],al
     b8e:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     b92:	00 00                	add    BYTE PTR [eax],al
     b94:	08 2e                	or     BYTE PTR [esi],ch
     b96:	01 3f                	add    DWORD PTR [edi],edi
     b98:	19 03                	sbb    DWORD PTR [ebx],eax
     b9a:	0e                   	push   cs
     b9b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b9d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b9f:	27                   	daa    
     ba0:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     ba3:	11 01                	adc    DWORD PTR [ecx],eax
     ba5:	12 06                	adc    al,BYTE PTR [esi]
     ba7:	40                   	inc    eax
     ba8:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     bae:	00 00                	add    BYTE PTR [eax],al
     bb0:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     bb6:	0b 3b                	or     edi,DWORD PTR [ebx]
     bb8:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     bbb:	02 18                	add    bl,BYTE PTR [eax]
     bbd:	00 00                	add    BYTE PTR [eax],al
     bbf:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     bc5:	0b 3b                	or     edi,DWORD PTR [ebx]
     bc7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     bca:	02 18                	add    bl,BYTE PTR [eax]
     bcc:	00 00                	add    BYTE PTR [eax],al
     bce:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     bd1:	03 08                	add    ecx,DWORD PTR [eax]
     bd3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bd5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bd7:	49                   	dec    ecx
     bd8:	13 02                	adc    eax,DWORD PTR [edx]
     bda:	18 00                	sbb    BYTE PTR [eax],al
     bdc:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     bdf:	01 11                	add    DWORD PTR [ecx],edx
     be1:	01 12                	add    DWORD PTR [edx],edx
     be3:	06                   	push   es
     be4:	01 13                	add    DWORD PTR [ebx],edx
     be6:	00 00                	add    BYTE PTR [eax],al
     be8:	0d 0b 01 11 01       	or     eax,0x111010b
     bed:	12 06                	adc    al,BYTE PTR [esi]
     bef:	00 00                	add    BYTE PTR [eax],al
     bf1:	0e                   	push   cs
     bf2:	26 00 00             	add    BYTE PTR es:[eax],al
     bf5:	00 0f                	add    BYTE PTR [edi],cl
     bf7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     bfa:	19 03                	sbb    DWORD PTR [ebx],eax
     bfc:	0e                   	push   cs
     bfd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c01:	27                   	daa    
     c02:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c05:	11 01                	adc    DWORD PTR [ecx],eax
     c07:	12 06                	adc    al,BYTE PTR [esi]
     c09:	40                   	inc    eax
     c0a:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     c10:	00 00                	add    BYTE PTR [eax],al
     c12:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     c15:	03 0e                	add    ecx,DWORD PTR [esi]
     c17:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c19:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c1b:	49                   	dec    ecx
     c1c:	13 3f                	adc    edi,DWORD PTR [edi]
     c1e:	19 02                	sbb    DWORD PTR [edx],eax
     c20:	18 00                	sbb    BYTE PTR [eax],al
     c22:	00 00                	add    BYTE PTR [eax],al
     c24:	01 11                	add    DWORD PTR [ecx],edx
     c26:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     c2c:	0e                   	push   cs
     c2d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     c2f:	11 01                	adc    DWORD PTR [ecx],eax
     c31:	12 06                	adc    al,BYTE PTR [esi]
     c33:	10 17                	adc    BYTE PTR [edi],dl
     c35:	00 00                	add    BYTE PTR [eax],al
     c37:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     c3a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c3c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c3f:	0e                   	push   cs
     c40:	00 00                	add    BYTE PTR [eax],al
     c42:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     c45:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c47:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c4a:	08 00                	or     BYTE PTR [eax],al
     c4c:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     c4f:	00 0b                	add    BYTE PTR [ebx],cl
     c51:	0b 00                	or     eax,DWORD PTR [eax]
     c53:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     c59:	49                   	dec    ecx
     c5a:	13 00                	adc    eax,DWORD PTR [eax]
     c5c:	00 06                	add    BYTE PTR [esi],al
     c5e:	16                   	push   ss
     c5f:	00 03                	add    BYTE PTR [ebx],al
     c61:	0e                   	push   cs
     c62:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c64:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c66:	49                   	dec    ecx
     c67:	13 00                	adc    eax,DWORD PTR [eax]
     c69:	00 07                	add    BYTE PTR [edi],al
     c6b:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     c6e:	19 03                	sbb    DWORD PTR [ebx],eax
     c70:	0e                   	push   cs
     c71:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c73:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c75:	27                   	daa    
     c76:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c79:	11 01                	adc    DWORD PTR [ecx],eax
     c7b:	12 06                	adc    al,BYTE PTR [esi]
     c7d:	40                   	inc    eax
     c7e:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     c84:	00 00                	add    BYTE PTR [eax],al
     c86:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     c8c:	0b 3b                	or     edi,DWORD PTR [ebx]
     c8e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c91:	02 18                	add    bl,BYTE PTR [eax]
     c93:	00 00                	add    BYTE PTR [eax],al
     c95:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     c98:	03 08                	add    ecx,DWORD PTR [eax]
     c9a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c9c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c9e:	49                   	dec    ecx
     c9f:	13 02                	adc    eax,DWORD PTR [edx]
     ca1:	18 00                	sbb    BYTE PTR [eax],al
     ca3:	00 0a                	add    BYTE PTR [edx],cl
     ca5:	34 00                	xor    al,0x0
     ca7:	03 0e                	add    ecx,DWORD PTR [esi]
     ca9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cab:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cad:	49                   	dec    ecx
     cae:	13 02                	adc    eax,DWORD PTR [edx]
     cb0:	18 00                	sbb    BYTE PTR [eax],al
     cb2:	00 0b                	add    BYTE PTR [ebx],cl
     cb4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     cb7:	19 03                	sbb    DWORD PTR [ebx],eax
     cb9:	0e                   	push   cs
     cba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cbc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cbe:	27                   	daa    
     cbf:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     cc2:	11 01                	adc    DWORD PTR [ecx],eax
     cc4:	12 06                	adc    al,BYTE PTR [esi]
     cc6:	40                   	inc    eax
     cc7:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     ccd:	00 00                	add    BYTE PTR [eax],al
     ccf:	0c 34                	or     al,0x34
     cd1:	00 03                	add    BYTE PTR [ebx],al
     cd3:	0e                   	push   cs
     cd4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cd6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cd8:	49                   	dec    ecx
     cd9:	13 3f                	adc    edi,DWORD PTR [edi]
     cdb:	19 02                	sbb    DWORD PTR [edx],eax
     cdd:	18 00                	sbb    BYTE PTR [eax],al
     cdf:	00 00                	add    BYTE PTR [eax],al
     ce1:	01 11                	add    DWORD PTR [ecx],edx
     ce3:	00 10                	add    BYTE PTR [eax],dl
     ce5:	06                   	push   es
     ce6:	11 01                	adc    DWORD PTR [ecx],eax
     ce8:	12 01                	adc    al,BYTE PTR [ecx]
     cea:	03 08                	add    ecx,DWORD PTR [eax]
     cec:	1b 08                	sbb    ecx,DWORD PTR [eax]
     cee:	25 08 13 05 00       	and    eax,0x51308
     cf3:	00 00                	add    BYTE PTR [eax],al
     cf5:	01 11                	add    DWORD PTR [ecx],edx
     cf7:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     cfd:	0e                   	push   cs
     cfe:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     d00:	11 01                	adc    DWORD PTR [ecx],eax
     d02:	12 06                	adc    al,BYTE PTR [esi]
     d04:	10 17                	adc    BYTE PTR [edi],dl
     d06:	00 00                	add    BYTE PTR [eax],al
     d08:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     d0b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d0d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d10:	0e                   	push   cs
     d11:	00 00                	add    BYTE PTR [eax],al
     d13:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     d16:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d1b:	08 00                	or     BYTE PTR [eax],al
     d1d:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     d20:	00 0b                	add    BYTE PTR [ebx],cl
     d22:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d25:	00 00                	add    BYTE PTR [eax],al
     d27:	05 16 00 03 0e       	add    eax,0xe030016
     d2c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d2e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d30:	49                   	dec    ecx
     d31:	13 00                	adc    eax,DWORD PTR [eax]
     d33:	00 06                	add    BYTE PTR [esi],al
     d35:	04 01                	add    al,0x1
     d37:	03 0e                	add    ecx,DWORD PTR [esi]
     d39:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d3b:	49                   	dec    ecx
     d3c:	13 3a                	adc    edi,DWORD PTR [edx]
     d3e:	0b 3b                	or     edi,DWORD PTR [ebx]
     d40:	0b 01                	or     eax,DWORD PTR [ecx]
     d42:	13 00                	adc    eax,DWORD PTR [eax]
     d44:	00 07                	add    BYTE PTR [edi],al
     d46:	28 00                	sub    BYTE PTR [eax],al
     d48:	03 0e                	add    ecx,DWORD PTR [esi]
     d4a:	1c 0b                	sbb    al,0xb
     d4c:	00 00                	add    BYTE PTR [eax],al
     d4e:	08 28                	or     BYTE PTR [eax],ch
     d50:	00 03                	add    BYTE PTR [ebx],al
     d52:	0e                   	push   cs
     d53:	1c 05                	sbb    al,0x5
     d55:	00 00                	add    BYTE PTR [eax],al
     d57:	09 2e                	or     DWORD PTR [esi],ebp
     d59:	01 3f                	add    DWORD PTR [edi],edi
     d5b:	19 03                	sbb    DWORD PTR [ebx],eax
     d5d:	0e                   	push   cs
     d5e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d60:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d62:	27                   	daa    
     d63:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d66:	11 01                	adc    DWORD PTR [ecx],eax
     d68:	12 06                	adc    al,BYTE PTR [esi]
     d6a:	40                   	inc    eax
     d6b:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     d71:	00 00                	add    BYTE PTR [eax],al
     d73:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     d79:	0b 3b                	or     edi,DWORD PTR [ebx]
     d7b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d7e:	02 18                	add    bl,BYTE PTR [eax]
     d80:	00 00                	add    BYTE PTR [eax],al
     d82:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     d85:	03 0e                	add    ecx,DWORD PTR [esi]
     d87:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d89:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d8b:	49                   	dec    ecx
     d8c:	13 3f                	adc    edi,DWORD PTR [edi]
     d8e:	19 02                	sbb    DWORD PTR [edx],eax
     d90:	18 00                	sbb    BYTE PTR [eax],al
     d92:	00 00                	add    BYTE PTR [eax],al
     d94:	01 11                	add    DWORD PTR [ecx],edx
     d96:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     d9c:	0e                   	push   cs
     d9d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     d9f:	11 01                	adc    DWORD PTR [ecx],eax
     da1:	12 06                	adc    al,BYTE PTR [esi]
     da3:	10 17                	adc    BYTE PTR [edi],dl
     da5:	00 00                	add    BYTE PTR [eax],al
     da7:	02 16                	add    dl,BYTE PTR [esi]
     da9:	00 03                	add    BYTE PTR [ebx],al
     dab:	0e                   	push   cs
     dac:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dae:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     db0:	49                   	dec    ecx
     db1:	13 00                	adc    eax,DWORD PTR [eax]
     db3:	00 03                	add    BYTE PTR [ebx],al
     db5:	13 01                	adc    eax,DWORD PTR [ecx]
     db7:	03 0e                	add    ecx,DWORD PTR [esi]
     db9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     dbb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dbd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     dbf:	01 13                	add    DWORD PTR [ebx],edx
     dc1:	00 00                	add    BYTE PTR [eax],al
     dc3:	04 0d                	add    al,0xd
     dc5:	00 03                	add    BYTE PTR [ebx],al
     dc7:	08 3a                	or     BYTE PTR [edx],bh
     dc9:	0b 3b                	or     edi,DWORD PTR [ebx]
     dcb:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     dce:	38 0b                	cmp    BYTE PTR [ebx],cl
     dd0:	00 00                	add    BYTE PTR [eax],al
     dd2:	05 0d 00 03 0e       	add    eax,0xe03000d
     dd7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dd9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ddb:	49                   	dec    ecx
     ddc:	13 38                	adc    edi,DWORD PTR [eax]
     dde:	0b 00                	or     eax,DWORD PTR [eax]
     de0:	00 06                	add    BYTE PTR [esi],al
     de2:	24 00                	and    al,0x0
     de4:	0b 0b                	or     ecx,DWORD PTR [ebx]
     de6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     de9:	08 00                	or     BYTE PTR [eax],al
     deb:	00 07                	add    BYTE PTR [edi],al
     ded:	01 01                	add    DWORD PTR [ecx],eax
     def:	49                   	dec    ecx
     df0:	13 01                	adc    eax,DWORD PTR [ecx]
     df2:	13 00                	adc    eax,DWORD PTR [eax]
     df4:	00 08                	add    BYTE PTR [eax],cl
     df6:	21 00                	and    DWORD PTR [eax],eax
     df8:	49                   	dec    ecx
     df9:	13 2f                	adc    ebp,DWORD PTR [edi]
     dfb:	0b 00                	or     eax,DWORD PTR [eax]
     dfd:	00 09                	add    BYTE PTR [ecx],cl
     dff:	24 00                	and    al,0x0
     e01:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e03:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e06:	0e                   	push   cs
     e07:	00 00                	add    BYTE PTR [eax],al
     e09:	0a 0f                	or     cl,BYTE PTR [edi]
     e0b:	00 0b                	add    BYTE PTR [ebx],cl
     e0d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e10:	00 00                	add    BYTE PTR [eax],al
     e12:	0b 13                	or     edx,DWORD PTR [ebx]
     e14:	01 03                	add    DWORD PTR [ebx],eax
     e16:	08 0b                	or     BYTE PTR [ebx],cl
     e18:	0b 3a                	or     edi,DWORD PTR [edx]
     e1a:	0b 3b                	or     edi,DWORD PTR [ebx]
     e1c:	0b 01                	or     eax,DWORD PTR [ecx]
     e1e:	13 00                	adc    eax,DWORD PTR [eax]
     e20:	00 0c 26             	add    BYTE PTR [esi+eiz*1],cl
     e23:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     e26:	00 00                	add    BYTE PTR [eax],al
     e28:	0d 13 01 03 0e       	or     eax,0xe030113
     e2d:	0b 05 3a 0b 3b 0b    	or     eax,DWORD PTR ds:0xb3b0b3a
     e33:	01 13                	add    DWORD PTR [ebx],edx
     e35:	00 00                	add    BYTE PTR [eax],al
     e37:	0e                   	push   cs
     e38:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     e3d:	0b 3b                	or     edi,DWORD PTR [ebx]
     e3f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e42:	38 05 00 00 0f 21    	cmp    BYTE PTR ds:0x210f0000,al
     e48:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     e4b:	2f                   	das    
     e4c:	05 00 00 10 2e       	add    eax,0x2e100000
     e51:	01 3f                	add    DWORD PTR [edi],edi
     e53:	19 03                	sbb    DWORD PTR [ebx],eax
     e55:	0e                   	push   cs
     e56:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e58:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e5a:	27                   	daa    
     e5b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e5e:	11 01                	adc    DWORD PTR [ecx],eax
     e60:	12 06                	adc    al,BYTE PTR [esi]
     e62:	40                   	inc    eax
     e63:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     e69:	00 00                	add    BYTE PTR [eax],al
     e6b:	11 05 00 03 0e 3a    	adc    DWORD PTR ds:0x3a0e0300,eax
     e71:	0b 3b                	or     edi,DWORD PTR [ebx]
     e73:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e76:	02 18                	add    bl,BYTE PTR [eax]
     e78:	00 00                	add    BYTE PTR [eax],al
     e7a:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     e7d:	03 0e                	add    ecx,DWORD PTR [esi]
     e7f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e81:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e83:	49                   	dec    ecx
     e84:	13 02                	adc    eax,DWORD PTR [edx]
     e86:	18 00                	sbb    BYTE PTR [eax],al
     e88:	00 13                	add    BYTE PTR [ebx],dl
     e8a:	34 00                	xor    al,0x0
     e8c:	03 08                	add    ecx,DWORD PTR [eax]
     e8e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e90:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e92:	49                   	dec    ecx
     e93:	13 02                	adc    eax,DWORD PTR [edx]
     e95:	18 00                	sbb    BYTE PTR [eax],al
     e97:	00 14 0b             	add    BYTE PTR [ebx+ecx*1],dl
     e9a:	01 11                	add    DWORD PTR [ecx],edx
     e9c:	01 12                	add    DWORD PTR [edx],edx
     e9e:	06                   	push   es
     e9f:	00 00                	add    BYTE PTR [eax],al
     ea1:	15 2e 01 3f 19       	adc    eax,0x193f012e
     ea6:	03 0e                	add    ecx,DWORD PTR [esi]
     ea8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     eaa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     eac:	27                   	daa    
     ead:	19 11                	sbb    DWORD PTR [ecx],edx
     eaf:	01 12                	add    DWORD PTR [edx],edx
     eb1:	06                   	push   es
     eb2:	40                   	inc    eax
     eb3:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     eb9:	00 00                	add    BYTE PTR [eax],al
     ebb:	16                   	push   ss
     ebc:	34 00                	xor    al,0x0
     ebe:	03 0e                	add    ecx,DWORD PTR [esi]
     ec0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ec2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ec4:	49                   	dec    ecx
     ec5:	13 3f                	adc    edi,DWORD PTR [edi]
     ec7:	19 02                	sbb    DWORD PTR [edx],eax
     ec9:	18 00                	sbb    BYTE PTR [eax],al
     ecb:	00 00                	add    BYTE PTR [eax],al
     ecd:	01 11                	add    DWORD PTR [ecx],edx
     ecf:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     ed5:	0e                   	push   cs
     ed6:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     ed8:	11 01                	adc    DWORD PTR [ecx],eax
     eda:	12 06                	adc    al,BYTE PTR [esi]
     edc:	10 17                	adc    BYTE PTR [edi],dl
     ede:	00 00                	add    BYTE PTR [eax],al
     ee0:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     ee3:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ee5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ee8:	0e                   	push   cs
     ee9:	00 00                	add    BYTE PTR [eax],al
     eeb:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     eee:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ef0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ef3:	08 00                	or     BYTE PTR [eax],al
     ef5:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     ef8:	00 0b                	add    BYTE PTR [ebx],cl
     efa:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     efd:	00 00                	add    BYTE PTR [eax],al
     eff:	05 16 00 03 0e       	add    eax,0xe030016
     f04:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f06:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f08:	49                   	dec    ecx
     f09:	13 00                	adc    eax,DWORD PTR [eax]
     f0b:	00 06                	add    BYTE PTR [esi],al
     f0d:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     f11:	00 00                	add    BYTE PTR [eax],al
     f13:	07                   	pop    es
     f14:	01 01                	add    DWORD PTR [ecx],eax
     f16:	49                   	dec    ecx
     f17:	13 01                	adc    eax,DWORD PTR [ecx]
     f19:	13 00                	adc    eax,DWORD PTR [eax]
     f1b:	00 08                	add    BYTE PTR [eax],cl
     f1d:	21 00                	and    DWORD PTR [eax],eax
     f1f:	49                   	dec    ecx
     f20:	13 2f                	adc    ebp,DWORD PTR [edi]
     f22:	0b 00                	or     eax,DWORD PTR [eax]
     f24:	00 09                	add    BYTE PTR [ecx],cl
     f26:	0f 00 0b             	str    WORD PTR [ebx]
     f29:	0b 03                	or     eax,DWORD PTR [ebx]
     f2b:	0e                   	push   cs
     f2c:	49                   	dec    ecx
     f2d:	13 00                	adc    eax,DWORD PTR [eax]
     f2f:	00 0a                	add    BYTE PTR [edx],cl
     f31:	13 01                	adc    eax,DWORD PTR [ecx]
     f33:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f35:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f37:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f39:	01 13                	add    DWORD PTR [ebx],edx
     f3b:	00 00                	add    BYTE PTR [eax],al
     f3d:	0b 0d 00 03 0e 3a    	or     ecx,DWORD PTR ds:0x3a0e0300
     f43:	0b 3b                	or     edi,DWORD PTR [ebx]
     f45:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f48:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f4a:	0d 0b 0c 0b 38       	or     eax,0x380b0c0b
     f4f:	0b 00                	or     eax,DWORD PTR [eax]
     f51:	00 0c 17             	add    BYTE PTR [edi+edx*1],cl
     f54:	01 0b                	add    DWORD PTR [ebx],ecx
     f56:	0b 3a                	or     edi,DWORD PTR [edx]
     f58:	0b 3b                	or     edi,DWORD PTR [ebx]
     f5a:	0b 01                	or     eax,DWORD PTR [ecx]
     f5c:	13 00                	adc    eax,DWORD PTR [eax]
     f5e:	00 0d 0d 00 49 13    	add    BYTE PTR ds:0x1349000d,cl
     f64:	00 00                	add    BYTE PTR [eax],al
     f66:	0e                   	push   cs
     f67:	0d 00 03 08 3a       	or     eax,0x3a080300
     f6c:	0b 3b                	or     edi,DWORD PTR [ebx]
     f6e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f71:	00 00                	add    BYTE PTR [eax],al
     f73:	0f 2e 01             	ucomiss xmm0,DWORD PTR [ecx]
     f76:	03 08                	add    ecx,DWORD PTR [eax]
     f78:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f7a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f7c:	27                   	daa    
     f7d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f80:	11 01                	adc    DWORD PTR [ecx],eax
     f82:	12 06                	adc    al,BYTE PTR [esi]
     f84:	40                   	inc    eax
     f85:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     f8b:	00 00                	add    BYTE PTR [eax],al
     f8d:	10 05 00 03 08 3a    	adc    BYTE PTR ds:0x3a080300,al
     f93:	0b 3b                	or     edi,DWORD PTR [ebx]
     f95:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f98:	02 18                	add    bl,BYTE PTR [eax]
     f9a:	00 00                	add    BYTE PTR [eax],al
     f9c:	11 05 00 03 0e 3a    	adc    DWORD PTR ds:0x3a0e0300,eax
     fa2:	0b 3b                	or     edi,DWORD PTR [ebx]
     fa4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fa7:	02 18                	add    bl,BYTE PTR [eax]
     fa9:	00 00                	add    BYTE PTR [eax],al
     fab:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     fae:	03 08                	add    ecx,DWORD PTR [eax]
     fb0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fb2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fb4:	49                   	dec    ecx
     fb5:	13 02                	adc    eax,DWORD PTR [edx]
     fb7:	18 00                	sbb    BYTE PTR [eax],al
     fb9:	00 13                	add    BYTE PTR [ebx],dl
     fbb:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     fbe:	19 03                	sbb    DWORD PTR [ebx],eax
     fc0:	0e                   	push   cs
     fc1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fc3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fc5:	49                   	dec    ecx
     fc6:	13 3c 19             	adc    edi,DWORD PTR [ecx+ebx*1]
     fc9:	00 00                	add    BYTE PTR [eax],al
     fcb:	14 18                	adc    al,0x18
     fcd:	00 00                	add    BYTE PTR [eax],al
     fcf:	00 15 2e 01 03 0e    	add    BYTE PTR ds:0xe03012e,dl
     fd5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fd7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fd9:	27                   	daa    
     fda:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     fdd:	11 01                	adc    DWORD PTR [ecx],eax
     fdf:	12 06                	adc    al,BYTE PTR [esi]
     fe1:	40                   	inc    eax
     fe2:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     fe8:	00 00                	add    BYTE PTR [eax],al
     fea:	16                   	push   ss
     feb:	34 00                	xor    al,0x0
     fed:	03 0e                	add    ecx,DWORD PTR [esi]
     fef:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ff1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ff3:	49                   	dec    ecx
     ff4:	13 02                	adc    eax,DWORD PTR [edx]
     ff6:	18 00                	sbb    BYTE PTR [eax],al
     ff8:	00 17                	add    BYTE PTR [edi],dl
     ffa:	2e 01 03             	add    DWORD PTR cs:[ebx],eax
     ffd:	0e                   	push   cs
     ffe:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1000:	3b 05 27 19 11 01    	cmp    eax,DWORD PTR ds:0x1111927
    1006:	12 06                	adc    al,BYTE PTR [esi]
    1008:	40                   	inc    eax
    1009:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    100f:	00 00                	add    BYTE PTR [eax],al
    1011:	18 05 00 03 0e 3a    	sbb    BYTE PTR ds:0x3a0e0300,al
    1017:	0b 3b                	or     edi,DWORD PTR [ebx]
    1019:	05 49 13 02 18       	add    eax,0x18021349
    101e:	00 00                	add    BYTE PTR [eax],al
    1020:	19 05 00 03 08 3a    	sbb    DWORD PTR ds:0x3a080300,eax
    1026:	0b 3b                	or     edi,DWORD PTR [ebx]
    1028:	05 49 13 02 18       	add    eax,0x18021349
    102d:	00 00                	add    BYTE PTR [eax],al
    102f:	1a 34 00             	sbb    dh,BYTE PTR [eax+eax*1]
    1032:	03 0e                	add    ecx,DWORD PTR [esi]
    1034:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1036:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
    103c:	00 00                	add    BYTE PTR [eax],al
    103e:	1b 34 00             	sbb    esi,DWORD PTR [eax+eax*1]
    1041:	03 08                	add    ecx,DWORD PTR [eax]
    1043:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1045:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
    104b:	00 00                	add    BYTE PTR [eax],al
    104d:	1c 21                	sbb    al,0x21
    104f:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1052:	2f                   	das    
    1053:	05 00 00 1d 0b       	add    eax,0xb1d0000
    1058:	01 11                	add    DWORD PTR [ecx],edx
    105a:	01 12                	add    DWORD PTR [edx],edx
    105c:	06                   	push   es
    105d:	00 00                	add    BYTE PTR [eax],al
    105f:	1e                   	push   ds
    1060:	2e 01 03             	add    DWORD PTR cs:[ebx],eax
    1063:	0e                   	push   cs
    1064:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1066:	3b 05 27 19 11 01    	cmp    eax,DWORD PTR ds:0x1111927
    106c:	12 06                	adc    al,BYTE PTR [esi]
    106e:	40                   	inc    eax
    106f:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1075:	00 00                	add    BYTE PTR [eax],al
    1077:	1f                   	pop    ds
    1078:	2e 01 03             	add    DWORD PTR cs:[ebx],eax
    107b:	08 3a                	or     BYTE PTR [edx],bh
    107d:	0b 3b                	or     edi,DWORD PTR [ebx]
    107f:	05 27 19 49 13       	add    eax,0x13491927
    1084:	11 01                	adc    DWORD PTR [ecx],eax
    1086:	12 06                	adc    al,BYTE PTR [esi]
    1088:	40                   	inc    eax
    1089:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    108f:	00 00                	add    BYTE PTR [eax],al
    1091:	20 2e                	and    BYTE PTR [esi],ch
    1093:	01 3f                	add    DWORD PTR [edi],edi
    1095:	19 03                	sbb    DWORD PTR [ebx],eax
    1097:	0e                   	push   cs
    1098:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    109a:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
    10a0:	11 01                	adc    DWORD PTR [ecx],eax
    10a2:	12 06                	adc    al,BYTE PTR [esi]
    10a4:	40                   	inc    eax
    10a5:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    10ab:	00 00                	add    BYTE PTR [eax],al
    10ad:	21 0a                	and    DWORD PTR [edx],ecx
    10af:	00 03                	add    BYTE PTR [ebx],al
    10b1:	0e                   	push   cs
    10b2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10b4:	3b 05 11 01 00 00    	cmp    eax,DWORD PTR ds:0x111
    10ba:	22 2e                	and    ch,BYTE PTR [esi]
    10bc:	01 3f                	add    DWORD PTR [edi],edi
    10be:	19 03                	sbb    DWORD PTR [ebx],eax
    10c0:	0e                   	push   cs
    10c1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10c3:	3b 05 49 13 3c 19    	cmp    eax,DWORD PTR ds:0x193c1349
    10c9:	01 13                	add    DWORD PTR [ebx],edx
    10cb:	00 00                	add    BYTE PTR [eax],al
    10cd:	23 0b                	and    ecx,DWORD PTR [ebx]
    10cf:	01 11                	add    DWORD PTR [ecx],edx
    10d1:	01 12                	add    DWORD PTR [edx],edx
    10d3:	06                   	push   es
    10d4:	01 13                	add    DWORD PTR [ebx],edx
    10d6:	00 00                	add    BYTE PTR [eax],al
    10d8:	24 34                	and    al,0x34
    10da:	00 03                	add    BYTE PTR [ebx],al
    10dc:	0e                   	push   cs
    10dd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10df:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10e1:	49                   	dec    ecx
    10e2:	13 3f                	adc    edi,DWORD PTR [edi]
    10e4:	19 02                	sbb    DWORD PTR [edx],eax
    10e6:	18 00                	sbb    BYTE PTR [eax],al
    10e8:	00 00                	add    BYTE PTR [eax],al
    10ea:	01 11                	add    DWORD PTR [ecx],edx
    10ec:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    10f2:	0e                   	push   cs
    10f3:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    10f5:	11 01                	adc    DWORD PTR [ecx],eax
    10f7:	12 06                	adc    al,BYTE PTR [esi]
    10f9:	10 17                	adc    BYTE PTR [edi],dl
    10fb:	00 00                	add    BYTE PTR [eax],al
    10fd:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1100:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1102:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1105:	0e                   	push   cs
    1106:	00 00                	add    BYTE PTR [eax],al
    1108:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    110b:	0b 0b                	or     ecx,DWORD PTR [ebx]
    110d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1110:	08 00                	or     BYTE PTR [eax],al
    1112:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
    1115:	00 0b                	add    BYTE PTR [ebx],cl
    1117:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    111a:	00 00                	add    BYTE PTR [eax],al
    111c:	05 2e 01 3f 19       	add    eax,0x193f012e
    1121:	03 0e                	add    ecx,DWORD PTR [esi]
    1123:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1125:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1127:	11 01                	adc    DWORD PTR [ecx],eax
    1129:	12 06                	adc    al,BYTE PTR [esi]
    112b:	40                   	inc    eax
    112c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1132:	00 00                	add    BYTE PTR [eax],al
    1134:	06                   	push   es
    1135:	34 00                	xor    al,0x0
    1137:	03 0e                	add    ecx,DWORD PTR [esi]
    1139:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    113b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    113d:	49                   	dec    ecx
    113e:	13 02                	adc    eax,DWORD PTR [edx]
    1140:	18 00                	sbb    BYTE PTR [eax],al
    1142:	00 07                	add    BYTE PTR [edi],al
    1144:	01 01                	add    DWORD PTR [ecx],eax
    1146:	49                   	dec    ecx
    1147:	13 01                	adc    eax,DWORD PTR [ecx]
    1149:	13 00                	adc    eax,DWORD PTR [eax]
    114b:	00 08                	add    BYTE PTR [eax],cl
    114d:	21 00                	and    DWORD PTR [eax],eax
    114f:	49                   	dec    ecx
    1150:	13 2f                	adc    ebp,DWORD PTR [edi]
    1152:	0b 00                	or     eax,DWORD PTR [eax]
    1154:	00 09                	add    BYTE PTR [ecx],cl
    1156:	34 00                	xor    al,0x0
    1158:	03 0e                	add    ecx,DWORD PTR [esi]
    115a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    115c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    115e:	49                   	dec    ecx
    115f:	13 3f                	adc    edi,DWORD PTR [edi]
    1161:	19 02                	sbb    DWORD PTR [edx],eax
    1163:	18 00                	sbb    BYTE PTR [eax],al
    1165:	00 00                	add    BYTE PTR [eax],al
    1167:	01 11                	add    DWORD PTR [ecx],edx
    1169:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    116f:	0e                   	push   cs
    1170:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1172:	11 01                	adc    DWORD PTR [ecx],eax
    1174:	12 06                	adc    al,BYTE PTR [esi]
    1176:	10 17                	adc    BYTE PTR [edi],dl
    1178:	00 00                	add    BYTE PTR [eax],al
    117a:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    117d:	0b 0b                	or     ecx,DWORD PTR [ebx]
    117f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1182:	08 00                	or     BYTE PTR [eax],al
    1184:	00 03                	add    BYTE PTR [ebx],al
    1186:	16                   	push   ss
    1187:	00 03                	add    BYTE PTR [ebx],al
    1189:	0e                   	push   cs
    118a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    118c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    118e:	49                   	dec    ecx
    118f:	13 00                	adc    eax,DWORD PTR [eax]
    1191:	00 04 24             	add    BYTE PTR [esp],al
    1194:	00 0b                	add    BYTE PTR [ebx],cl
    1196:	0b 3e                	or     edi,DWORD PTR [esi]
    1198:	0b 03                	or     eax,DWORD PTR [ebx]
    119a:	0e                   	push   cs
    119b:	00 00                	add    BYTE PTR [eax],al
    119d:	05 0f 00 0b 0b       	add    eax,0xb0b000f
    11a2:	49                   	dec    ecx
    11a3:	13 00                	adc    eax,DWORD PTR [eax]
    11a5:	00 06                	add    BYTE PTR [esi],al
    11a7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    11aa:	19 03                	sbb    DWORD PTR [ebx],eax
    11ac:	0e                   	push   cs
    11ad:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11af:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11b1:	27                   	daa    
    11b2:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    11b5:	11 01                	adc    DWORD PTR [ecx],eax
    11b7:	12 06                	adc    al,BYTE PTR [esi]
    11b9:	40                   	inc    eax
    11ba:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    11c0:	00 00                	add    BYTE PTR [eax],al
    11c2:	07                   	pop    es
    11c3:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    11c8:	0b 3b                	or     edi,DWORD PTR [ebx]
    11ca:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    11cd:	02 18                	add    bl,BYTE PTR [eax]
    11cf:	00 00                	add    BYTE PTR [eax],al
    11d1:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    11d7:	0b 3b                	or     edi,DWORD PTR [ebx]
    11d9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    11dc:	02 18                	add    bl,BYTE PTR [eax]
    11de:	00 00                	add    BYTE PTR [eax],al
    11e0:	09 26                	or     DWORD PTR [esi],esp
    11e2:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    11e5:	00 00                	add    BYTE PTR [eax],al
    11e7:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
    11ea:	03 0e                	add    ecx,DWORD PTR [esi]
    11ec:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11ee:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11f0:	49                   	dec    ecx
    11f1:	13 02                	adc    eax,DWORD PTR [edx]
    11f3:	18 00                	sbb    BYTE PTR [eax],al
    11f5:	00 0b                	add    BYTE PTR [ebx],cl
    11f7:	34 00                	xor    al,0x0
    11f9:	03 0e                	add    ecx,DWORD PTR [esi]
    11fb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11fd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11ff:	49                   	dec    ecx
    1200:	13 3f                	adc    edi,DWORD PTR [edi]
    1202:	19 02                	sbb    DWORD PTR [edx],eax
    1204:	18 00                	sbb    BYTE PTR [eax],al
    1206:	00 00                	add    BYTE PTR [eax],al
    1208:	01 11                	add    DWORD PTR [ecx],edx
    120a:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1210:	0e                   	push   cs
    1211:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1213:	11 01                	adc    DWORD PTR [ecx],eax
    1215:	12 06                	adc    al,BYTE PTR [esi]
    1217:	10 17                	adc    BYTE PTR [edi],dl
    1219:	00 00                	add    BYTE PTR [eax],al
    121b:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    121e:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1220:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1223:	0e                   	push   cs
    1224:	00 00                	add    BYTE PTR [eax],al
    1226:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1229:	0b 0b                	or     ecx,DWORD PTR [ebx]
    122b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    122e:	08 00                	or     BYTE PTR [eax],al
    1230:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
    1233:	00 0b                	add    BYTE PTR [ebx],cl
    1235:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1238:	00 00                	add    BYTE PTR [eax],al
    123a:	05 16 00 03 0e       	add    eax,0xe030016
    123f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1241:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1243:	49                   	dec    ecx
    1244:	13 00                	adc    eax,DWORD PTR [eax]
    1246:	00 06                	add    BYTE PTR [esi],al
    1248:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    124c:	00 00                	add    BYTE PTR [eax],al
    124e:	07                   	pop    es
    124f:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1252:	19 03                	sbb    DWORD PTR [ebx],eax
    1254:	0e                   	push   cs
    1255:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1257:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1259:	27                   	daa    
    125a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    125d:	11 01                	adc    DWORD PTR [ecx],eax
    125f:	12 06                	adc    al,BYTE PTR [esi]
    1261:	40                   	inc    eax
    1262:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1268:	00 00                	add    BYTE PTR [eax],al
    126a:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    1270:	0b 3b                	or     edi,DWORD PTR [ebx]
    1272:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1275:	02 18                	add    bl,BYTE PTR [eax]
    1277:	00 00                	add    BYTE PTR [eax],al
    1279:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    127c:	03 08                	add    ecx,DWORD PTR [eax]
    127e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1280:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1282:	49                   	dec    ecx
    1283:	13 02                	adc    eax,DWORD PTR [edx]
    1285:	18 00                	sbb    BYTE PTR [eax],al
    1287:	00 0a                	add    BYTE PTR [edx],cl
    1289:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    128c:	19 03                	sbb    DWORD PTR [ebx],eax
    128e:	0e                   	push   cs
    128f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1291:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1293:	27                   	daa    
    1294:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1297:	11 01                	adc    DWORD PTR [ecx],eax
    1299:	12 06                	adc    al,BYTE PTR [esi]
    129b:	40                   	inc    eax
    129c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    12a2:	00 00                	add    BYTE PTR [eax],al
    12a4:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
    12a7:	03 0e                	add    ecx,DWORD PTR [esi]
    12a9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12ab:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12ad:	49                   	dec    ecx
    12ae:	13 3f                	adc    edi,DWORD PTR [edi]
    12b0:	19 02                	sbb    DWORD PTR [edx],eax
    12b2:	18 00                	sbb    BYTE PTR [eax],al
    12b4:	00 00                	add    BYTE PTR [eax],al
    12b6:	01 11                	add    DWORD PTR [ecx],edx
    12b8:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    12be:	0e                   	push   cs
    12bf:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    12c1:	11 01                	adc    DWORD PTR [ecx],eax
    12c3:	12 06                	adc    al,BYTE PTR [esi]
    12c5:	10 17                	adc    BYTE PTR [edi],dl
    12c7:	00 00                	add    BYTE PTR [eax],al
    12c9:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    12cc:	0b 0b                	or     ecx,DWORD PTR [ebx]
    12ce:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    12d1:	08 00                	or     BYTE PTR [eax],al
    12d3:	00 03                	add    BYTE PTR [ebx],al
    12d5:	24 00                	and    al,0x0
    12d7:	0b 0b                	or     ecx,DWORD PTR [ebx]
    12d9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    12dc:	0e                   	push   cs
    12dd:	00 00                	add    BYTE PTR [eax],al
    12df:	04 2e                	add    al,0x2e
    12e1:	01 3f                	add    DWORD PTR [edi],edi
    12e3:	19 03                	sbb    DWORD PTR [ebx],eax
    12e5:	0e                   	push   cs
    12e6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12e8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12ea:	27                   	daa    
    12eb:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    12ee:	11 01                	adc    DWORD PTR [ecx],eax
    12f0:	12 06                	adc    al,BYTE PTR [esi]
    12f2:	40                   	inc    eax
    12f3:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    12f9:	00 00                	add    BYTE PTR [eax],al
    12fb:	05 05 00 03 08       	add    eax,0x8030005
    1300:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1302:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1304:	49                   	dec    ecx
    1305:	13 02                	adc    eax,DWORD PTR [edx]
    1307:	18 00                	sbb    BYTE PTR [eax],al
    1309:	00 06                	add    BYTE PTR [esi],al
    130b:	34 00                	xor    al,0x0
    130d:	03 08                	add    ecx,DWORD PTR [eax]
    130f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1311:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1313:	49                   	dec    ecx
    1314:	13 02                	adc    eax,DWORD PTR [edx]
    1316:	18 00                	sbb    BYTE PTR [eax],al
    1318:	00 07                	add    BYTE PTR [edi],al
    131a:	0f 00 0b             	str    WORD PTR [ebx]
    131d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1320:	00 00                	add    BYTE PTR [eax],al
    1322:	08 26                	or     BYTE PTR [esi],ah
    1324:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1327:	00 00                	add    BYTE PTR [eax],al
    1329:	09 2e                	or     DWORD PTR [esi],ebp
    132b:	01 3f                	add    DWORD PTR [edi],edi
    132d:	19 03                	sbb    DWORD PTR [ebx],eax
    132f:	0e                   	push   cs
    1330:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1332:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1334:	27                   	daa    
    1335:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1338:	11 01                	adc    DWORD PTR [ecx],eax
    133a:	12 06                	adc    al,BYTE PTR [esi]
    133c:	40                   	inc    eax
    133d:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    1343:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
    1349:	0b 3b                	or     edi,DWORD PTR [ebx]
    134b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    134e:	02 18                	add    bl,BYTE PTR [eax]
    1350:	00 00                	add    BYTE PTR [eax],al
    1352:	00 01                	add    BYTE PTR [ecx],al
    1354:	11 01                	adc    DWORD PTR [ecx],eax
    1356:	25 0e 13 0b 03       	and    eax,0x30b130e
    135b:	0e                   	push   cs
    135c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    135e:	11 01                	adc    DWORD PTR [ecx],eax
    1360:	12 06                	adc    al,BYTE PTR [esi]
    1362:	10 17                	adc    BYTE PTR [edi],dl
    1364:	00 00                	add    BYTE PTR [eax],al
    1366:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1369:	0b 0b                	or     ecx,DWORD PTR [ebx]
    136b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    136e:	0e                   	push   cs
    136f:	00 00                	add    BYTE PTR [eax],al
    1371:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1374:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1376:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1379:	08 00                	or     BYTE PTR [eax],al
    137b:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
    137e:	00 0b                	add    BYTE PTR [ebx],cl
    1380:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1383:	00 00                	add    BYTE PTR [eax],al
    1385:	05 16 00 03 0e       	add    eax,0xe030016
    138a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    138c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    138e:	49                   	dec    ecx
    138f:	13 00                	adc    eax,DWORD PTR [eax]
    1391:	00 06                	add    BYTE PTR [esi],al
    1393:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1396:	19 03                	sbb    DWORD PTR [ebx],eax
    1398:	0e                   	push   cs
    1399:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    139b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    139d:	27                   	daa    
    139e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13a1:	11 01                	adc    DWORD PTR [ecx],eax
    13a3:	12 06                	adc    al,BYTE PTR [esi]
    13a5:	40                   	inc    eax
    13a6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    13ac:	00 00                	add    BYTE PTR [eax],al
    13ae:	07                   	pop    es
    13af:	05 00 03 08 3a       	add    eax,0x3a080300
    13b4:	0b 3b                	or     edi,DWORD PTR [ebx]
    13b6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    13b9:	02 18                	add    bl,BYTE PTR [eax]
    13bb:	00 00                	add    BYTE PTR [eax],al
    13bd:	08 2e                	or     BYTE PTR [esi],ch
    13bf:	01 3f                	add    DWORD PTR [edi],edi
    13c1:	19 03                	sbb    DWORD PTR [ebx],eax
    13c3:	0e                   	push   cs
    13c4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13c6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13c8:	27                   	daa    
    13c9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13cc:	11 01                	adc    DWORD PTR [ecx],eax
    13ce:	12 06                	adc    al,BYTE PTR [esi]
    13d0:	40                   	inc    eax
    13d1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    13d7:	00 00                	add    BYTE PTR [eax],al
    13d9:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    13dc:	03 08                	add    ecx,DWORD PTR [eax]
    13de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13e2:	49                   	dec    ecx
    13e3:	13 02                	adc    eax,DWORD PTR [edx]
    13e5:	18 00                	sbb    BYTE PTR [eax],al
    13e7:	00 0a                	add    BYTE PTR [edx],cl
    13e9:	34 00                	xor    al,0x0
    13eb:	03 0e                	add    ecx,DWORD PTR [esi]
    13ed:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13ef:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13f1:	49                   	dec    ecx
    13f2:	13 3f                	adc    edi,DWORD PTR [edi]
    13f4:	19 02                	sbb    DWORD PTR [edx],eax
    13f6:	18 00                	sbb    BYTE PTR [eax],al
    13f8:	00 00                	add    BYTE PTR [eax],al
    13fa:	01 11                	add    DWORD PTR [ecx],edx
    13fc:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1402:	0e                   	push   cs
    1403:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1405:	11 01                	adc    DWORD PTR [ecx],eax
    1407:	12 06                	adc    al,BYTE PTR [esi]
    1409:	10 17                	adc    BYTE PTR [edi],dl
    140b:	00 00                	add    BYTE PTR [eax],al
    140d:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1410:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1412:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1415:	0e                   	push   cs
    1416:	00 00                	add    BYTE PTR [eax],al
    1418:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    141b:	0b 0b                	or     ecx,DWORD PTR [ebx]
    141d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1420:	08 00                	or     BYTE PTR [eax],al
    1422:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
    1425:	00 0b                	add    BYTE PTR [ebx],cl
    1427:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    142a:	00 00                	add    BYTE PTR [eax],al
    142c:	05 16 00 03 0e       	add    eax,0xe030016
    1431:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1433:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1435:	49                   	dec    ecx
    1436:	13 00                	adc    eax,DWORD PTR [eax]
    1438:	00 06                	add    BYTE PTR [esi],al
    143a:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    143e:	00 00                	add    BYTE PTR [eax],al
    1440:	07                   	pop    es
    1441:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1444:	19 03                	sbb    DWORD PTR [ebx],eax
    1446:	0e                   	push   cs
    1447:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1449:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    144b:	27                   	daa    
    144c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    144f:	11 01                	adc    DWORD PTR [ecx],eax
    1451:	12 06                	adc    al,BYTE PTR [esi]
    1453:	40                   	inc    eax
    1454:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    145a:	00 00                	add    BYTE PTR [eax],al
    145c:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    1462:	0b 3b                	or     edi,DWORD PTR [ebx]
    1464:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1467:	02 18                	add    bl,BYTE PTR [eax]
    1469:	00 00                	add    BYTE PTR [eax],al
    146b:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    146e:	03 08                	add    ecx,DWORD PTR [eax]
    1470:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1472:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1474:	49                   	dec    ecx
    1475:	13 02                	adc    eax,DWORD PTR [edx]
    1477:	18 00                	sbb    BYTE PTR [eax],al
    1479:	00 0a                	add    BYTE PTR [edx],cl
    147b:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    147e:	19 03                	sbb    DWORD PTR [ebx],eax
    1480:	0e                   	push   cs
    1481:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1483:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1485:	27                   	daa    
    1486:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1489:	11 01                	adc    DWORD PTR [ecx],eax
    148b:	12 06                	adc    al,BYTE PTR [esi]
    148d:	40                   	inc    eax
    148e:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1494:	00 00                	add    BYTE PTR [eax],al
    1496:	0b 05 00 03 0e 3a    	or     eax,DWORD PTR ds:0x3a0e0300
    149c:	0b 3b                	or     edi,DWORD PTR [ebx]
    149e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    14a1:	02 18                	add    bl,BYTE PTR [eax]
    14a3:	00 00                	add    BYTE PTR [eax],al
    14a5:	0c 34                	or     al,0x34
    14a7:	00 03                	add    BYTE PTR [ebx],al
    14a9:	0e                   	push   cs
    14aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14ae:	49                   	dec    ecx
    14af:	13 3f                	adc    edi,DWORD PTR [edi]
    14b1:	19 02                	sbb    DWORD PTR [edx],eax
    14b3:	18 00                	sbb    BYTE PTR [eax],al
    14b5:	00 00                	add    BYTE PTR [eax],al
    14b7:	01 11                	add    DWORD PTR [ecx],edx
    14b9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    14bf:	0e                   	push   cs
    14c0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    14c2:	11 01                	adc    DWORD PTR [ecx],eax
    14c4:	12 06                	adc    al,BYTE PTR [esi]
    14c6:	10 17                	adc    BYTE PTR [edi],dl
    14c8:	00 00                	add    BYTE PTR [eax],al
    14ca:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    14cd:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14cf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14d2:	08 00                	or     BYTE PTR [eax],al
    14d4:	00 03                	add    BYTE PTR [ebx],al
    14d6:	16                   	push   ss
    14d7:	00 03                	add    BYTE PTR [ebx],al
    14d9:	0e                   	push   cs
    14da:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14dc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14de:	49                   	dec    ecx
    14df:	13 00                	adc    eax,DWORD PTR [eax]
    14e1:	00 04 24             	add    BYTE PTR [esp],al
    14e4:	00 0b                	add    BYTE PTR [ebx],cl
    14e6:	0b 3e                	or     edi,DWORD PTR [esi]
    14e8:	0b 03                	or     eax,DWORD PTR [ebx]
    14ea:	0e                   	push   cs
    14eb:	00 00                	add    BYTE PTR [eax],al
    14ed:	05 2e 01 3f 19       	add    eax,0x193f012e
    14f2:	03 0e                	add    ecx,DWORD PTR [esi]
    14f4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14f6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14f8:	27                   	daa    
    14f9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    14fc:	11 01                	adc    DWORD PTR [ecx],eax
    14fe:	12 06                	adc    al,BYTE PTR [esi]
    1500:	40                   	inc    eax
    1501:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1507:	00 00                	add    BYTE PTR [eax],al
    1509:	06                   	push   es
    150a:	05 00 03 08 3a       	add    eax,0x3a080300
    150f:	0b 3b                	or     edi,DWORD PTR [ebx]
    1511:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1514:	02 18                	add    bl,BYTE PTR [eax]
    1516:	00 00                	add    BYTE PTR [eax],al
    1518:	07                   	pop    es
    1519:	0f 00 0b             	str    WORD PTR [ebx]
    151c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    151f:	00 00                	add    BYTE PTR [eax],al
    1521:	08 26                	or     BYTE PTR [esi],ah
    1523:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1526:	00 00                	add    BYTE PTR [eax],al
    1528:	09 2e                	or     DWORD PTR [esi],ebp
    152a:	01 3f                	add    DWORD PTR [edi],edi
    152c:	19 03                	sbb    DWORD PTR [ebx],eax
    152e:	0e                   	push   cs
    152f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1531:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1533:	27                   	daa    
    1534:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1537:	11 01                	adc    DWORD PTR [ecx],eax
    1539:	12 06                	adc    al,BYTE PTR [esi]
    153b:	40                   	inc    eax
    153c:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    1542:	00 01                	add    BYTE PTR [ecx],al
    1544:	11 01                	adc    DWORD PTR [ecx],eax
    1546:	25 0e 13 0b 03       	and    eax,0x30b130e
    154b:	0e                   	push   cs
    154c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    154e:	11 01                	adc    DWORD PTR [ecx],eax
    1550:	12 06                	adc    al,BYTE PTR [esi]
    1552:	10 17                	adc    BYTE PTR [edi],dl
    1554:	00 00                	add    BYTE PTR [eax],al
    1556:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1559:	0b 0b                	or     ecx,DWORD PTR [ebx]
    155b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    155e:	08 00                	or     BYTE PTR [eax],al
    1560:	00 03                	add    BYTE PTR [ebx],al
    1562:	16                   	push   ss
    1563:	00 03                	add    BYTE PTR [ebx],al
    1565:	0e                   	push   cs
    1566:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1568:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    156a:	49                   	dec    ecx
    156b:	13 00                	adc    eax,DWORD PTR [eax]
    156d:	00 04 24             	add    BYTE PTR [esp],al
    1570:	00 0b                	add    BYTE PTR [ebx],cl
    1572:	0b 3e                	or     edi,DWORD PTR [esi]
    1574:	0b 03                	or     eax,DWORD PTR [ebx]
    1576:	0e                   	push   cs
    1577:	00 00                	add    BYTE PTR [eax],al
    1579:	05 2e 01 3f 19       	add    eax,0x193f012e
    157e:	03 0e                	add    ecx,DWORD PTR [esi]
    1580:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1582:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1584:	27                   	daa    
    1585:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1588:	11 01                	adc    DWORD PTR [ecx],eax
    158a:	12 06                	adc    al,BYTE PTR [esi]
    158c:	40                   	inc    eax
    158d:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1593:	00 00                	add    BYTE PTR [eax],al
    1595:	06                   	push   es
    1596:	05 00 03 08 3a       	add    eax,0x3a080300
    159b:	0b 3b                	or     edi,DWORD PTR [ebx]
    159d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    15a0:	02 18                	add    bl,BYTE PTR [eax]
    15a2:	00 00                	add    BYTE PTR [eax],al
    15a4:	07                   	pop    es
    15a5:	34 00                	xor    al,0x0
    15a7:	03 08                	add    ecx,DWORD PTR [eax]
    15a9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15ab:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15ad:	49                   	dec    ecx
    15ae:	13 02                	adc    eax,DWORD PTR [edx]
    15b0:	18 00                	sbb    BYTE PTR [eax],al
    15b2:	00 08                	add    BYTE PTR [eax],cl
    15b4:	0f 00 0b             	str    WORD PTR [ebx]
    15b7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    15ba:	00 00                	add    BYTE PTR [eax],al
    15bc:	09 26                	or     DWORD PTR [esi],esp
    15be:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    15c1:	00 00                	add    BYTE PTR [eax],al
    15c3:	0a 2e                	or     ch,BYTE PTR [esi]
    15c5:	01 3f                	add    DWORD PTR [edi],edi
    15c7:	19 03                	sbb    DWORD PTR [ebx],eax
    15c9:	0e                   	push   cs
    15ca:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15cc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15ce:	27                   	daa    
    15cf:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    15d2:	11 01                	adc    DWORD PTR [ecx],eax
    15d4:	12 06                	adc    al,BYTE PTR [esi]
    15d6:	40                   	inc    eax
    15d7:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
    15dd:	00 01                	add    BYTE PTR [ecx],al
    15df:	11 01                	adc    DWORD PTR [ecx],eax
    15e1:	25 0e 13 0b 03       	and    eax,0x30b130e
    15e6:	0e                   	push   cs
    15e7:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    15e9:	11 01                	adc    DWORD PTR [ecx],eax
    15eb:	12 06                	adc    al,BYTE PTR [esi]
    15ed:	10 17                	adc    BYTE PTR [edi],dl
    15ef:	00 00                	add    BYTE PTR [eax],al
    15f1:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    15f4:	0b 0b                	or     ecx,DWORD PTR [ebx]
    15f6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    15f9:	08 00                	or     BYTE PTR [eax],al
    15fb:	00 03                	add    BYTE PTR [ebx],al
    15fd:	24 00                	and    al,0x0
    15ff:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1601:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1604:	0e                   	push   cs
    1605:	00 00                	add    BYTE PTR [eax],al
    1607:	04 2e                	add    al,0x2e
    1609:	01 3f                	add    DWORD PTR [edi],edi
    160b:	19 03                	sbb    DWORD PTR [ebx],eax
    160d:	0e                   	push   cs
    160e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1610:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1612:	27                   	daa    
    1613:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1616:	11 01                	adc    DWORD PTR [ecx],eax
    1618:	12 06                	adc    al,BYTE PTR [esi]
    161a:	40                   	inc    eax
    161b:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1621:	00 00                	add    BYTE PTR [eax],al
    1623:	05 05 00 03 0e       	add    eax,0xe030005
    1628:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    162a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    162c:	49                   	dec    ecx
    162d:	13 02                	adc    eax,DWORD PTR [edx]
    162f:	18 00                	sbb    BYTE PTR [eax],al
    1631:	00 06                	add    BYTE PTR [esi],al
    1633:	34 00                	xor    al,0x0
    1635:	03 08                	add    ecx,DWORD PTR [eax]
    1637:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1639:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    163b:	49                   	dec    ecx
    163c:	13 02                	adc    eax,DWORD PTR [edx]
    163e:	18 00                	sbb    BYTE PTR [eax],al
    1640:	00 07                	add    BYTE PTR [edi],al
    1642:	34 00                	xor    al,0x0
    1644:	03 0e                	add    ecx,DWORD PTR [esi]
    1646:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1648:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    164a:	49                   	dec    ecx
    164b:	13 00                	adc    eax,DWORD PTR [eax]
    164d:	00 08                	add    BYTE PTR [eax],cl
    164f:	34 00                	xor    al,0x0
    1651:	03 08                	add    ecx,DWORD PTR [eax]
    1653:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1655:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1657:	49                   	dec    ecx
    1658:	13 00                	adc    eax,DWORD PTR [eax]
    165a:	00 09                	add    BYTE PTR [ecx],cl
    165c:	34 00                	xor    al,0x0
    165e:	03 0e                	add    ecx,DWORD PTR [esi]
    1660:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1662:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1664:	49                   	dec    ecx
    1665:	13 02                	adc    eax,DWORD PTR [edx]
    1667:	18 00                	sbb    BYTE PTR [eax],al
    1669:	00 0a                	add    BYTE PTR [edx],cl
    166b:	0f 00 0b             	str    WORD PTR [ebx]
    166e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1671:	00 00                	add    BYTE PTR [eax],al
    1673:	0b 26                	or     esp,DWORD PTR [esi]
    1675:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1678:	00 00                	add    BYTE PTR [eax],al
    167a:	00 01                	add    BYTE PTR [ecx],al
    167c:	11 01                	adc    DWORD PTR [ecx],eax
    167e:	25 0e 13 0b 03       	and    eax,0x30b130e
    1683:	0e                   	push   cs
    1684:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1686:	11 01                	adc    DWORD PTR [ecx],eax
    1688:	12 06                	adc    al,BYTE PTR [esi]
    168a:	10 17                	adc    BYTE PTR [edi],dl
    168c:	00 00                	add    BYTE PTR [eax],al
    168e:	02 2e                	add    ch,BYTE PTR [esi]
    1690:	01 3f                	add    DWORD PTR [edi],edi
    1692:	19 03                	sbb    DWORD PTR [ebx],eax
    1694:	0e                   	push   cs
    1695:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1697:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1699:	27                   	daa    
    169a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    169d:	11 01                	adc    DWORD PTR [ecx],eax
    169f:	12 06                	adc    al,BYTE PTR [esi]
    16a1:	40                   	inc    eax
    16a2:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    16a8:	00 00                	add    BYTE PTR [eax],al
    16aa:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
    16b0:	0b 3b                	or     edi,DWORD PTR [ebx]
    16b2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    16b5:	02 18                	add    bl,BYTE PTR [eax]
    16b7:	00 00                	add    BYTE PTR [eax],al
    16b9:	04 0f                	add    al,0xf
    16bb:	00 0b                	add    BYTE PTR [ebx],cl
    16bd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    16c0:	00 00                	add    BYTE PTR [eax],al
    16c2:	05 24 00 0b 0b       	add    eax,0xb0b0024
    16c7:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    16ca:	0e                   	push   cs
    16cb:	00 00                	add    BYTE PTR [eax],al
    16cd:	06                   	push   es
    16ce:	24 00                	and    al,0x0
    16d0:	0b 0b                	or     ecx,DWORD PTR [ebx]
    16d2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    16d5:	08 00                	or     BYTE PTR [eax],al
    16d7:	00 00                	add    BYTE PTR [eax],al
    16d9:	01 11                	add    DWORD PTR [ecx],edx
    16db:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    16e1:	0e                   	push   cs
    16e2:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    16e4:	11 01                	adc    DWORD PTR [ecx],eax
    16e6:	12 06                	adc    al,BYTE PTR [esi]
    16e8:	10 17                	adc    BYTE PTR [edi],dl
    16ea:	00 00                	add    BYTE PTR [eax],al
    16ec:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    16ef:	0b 0b                	or     ecx,DWORD PTR [ebx]
    16f1:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    16f4:	08 00                	or     BYTE PTR [eax],al
    16f6:	00 03                	add    BYTE PTR [ebx],al
    16f8:	24 00                	and    al,0x0
    16fa:	0b 0b                	or     ecx,DWORD PTR [ebx]
    16fc:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    16ff:	0e                   	push   cs
    1700:	00 00                	add    BYTE PTR [eax],al
    1702:	04 2e                	add    al,0x2e
    1704:	01 3f                	add    DWORD PTR [edi],edi
    1706:	19 03                	sbb    DWORD PTR [ebx],eax
    1708:	0e                   	push   cs
    1709:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    170b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    170d:	27                   	daa    
    170e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1711:	11 01                	adc    DWORD PTR [ecx],eax
    1713:	12 06                	adc    al,BYTE PTR [esi]
    1715:	40                   	inc    eax
    1716:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    171c:	00 00                	add    BYTE PTR [eax],al
    171e:	05 05 00 03 0e       	add    eax,0xe030005
    1723:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1725:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1727:	49                   	dec    ecx
    1728:	13 02                	adc    eax,DWORD PTR [edx]
    172a:	18 00                	sbb    BYTE PTR [eax],al
    172c:	00 06                	add    BYTE PTR [esi],al
    172e:	34 00                	xor    al,0x0
    1730:	03 08                	add    ecx,DWORD PTR [eax]
    1732:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1734:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1736:	49                   	dec    ecx
    1737:	13 02                	adc    eax,DWORD PTR [edx]
    1739:	18 00                	sbb    BYTE PTR [eax],al
    173b:	00 07                	add    BYTE PTR [edi],al
    173d:	34 00                	xor    al,0x0
    173f:	03 0e                	add    ecx,DWORD PTR [esi]
    1741:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1743:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1745:	49                   	dec    ecx
    1746:	13 00                	adc    eax,DWORD PTR [eax]
    1748:	00 08                	add    BYTE PTR [eax],cl
    174a:	34 00                	xor    al,0x0
    174c:	03 08                	add    ecx,DWORD PTR [eax]
    174e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1750:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1752:	49                   	dec    ecx
    1753:	13 00                	adc    eax,DWORD PTR [eax]
    1755:	00 09                	add    BYTE PTR [ecx],cl
    1757:	0f 00 0b             	str    WORD PTR [ebx]
    175a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    175d:	00 00                	add    BYTE PTR [eax],al
    175f:	0a 26                	or     ah,BYTE PTR [esi]
    1761:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1764:	00 00                	add    BYTE PTR [eax],al
    1766:	00 01                	add    BYTE PTR [ecx],al
    1768:	11 01                	adc    DWORD PTR [ecx],eax
    176a:	25 0e 13 0b 03       	and    eax,0x30b130e
    176f:	0e                   	push   cs
    1770:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1772:	11 01                	adc    DWORD PTR [ecx],eax
    1774:	12 06                	adc    al,BYTE PTR [esi]
    1776:	10 17                	adc    BYTE PTR [edi],dl
    1778:	00 00                	add    BYTE PTR [eax],al
    177a:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    177d:	0b 0b                	or     ecx,DWORD PTR [ebx]
    177f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1782:	08 00                	or     BYTE PTR [eax],al
    1784:	00 03                	add    BYTE PTR [ebx],al
    1786:	24 00                	and    al,0x0
    1788:	0b 0b                	or     ecx,DWORD PTR [ebx]
    178a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    178d:	0e                   	push   cs
    178e:	00 00                	add    BYTE PTR [eax],al
    1790:	04 2e                	add    al,0x2e
    1792:	01 3f                	add    DWORD PTR [edi],edi
    1794:	19 03                	sbb    DWORD PTR [ebx],eax
    1796:	0e                   	push   cs
    1797:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1799:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    179b:	27                   	daa    
    179c:	19 11                	sbb    DWORD PTR [ecx],edx
    179e:	01 12                	add    DWORD PTR [edx],edx
    17a0:	06                   	push   es
    17a1:	40                   	inc    eax
    17a2:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    17a8:	00 00                	add    BYTE PTR [eax],al
    17aa:	05 05 00 03 0e       	add    eax,0xe030005
    17af:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17b1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17b3:	49                   	dec    ecx
    17b4:	13 02                	adc    eax,DWORD PTR [edx]
    17b6:	18 00                	sbb    BYTE PTR [eax],al
    17b8:	00 06                	add    BYTE PTR [esi],al
    17ba:	34 00                	xor    al,0x0
    17bc:	03 08                	add    ecx,DWORD PTR [eax]
    17be:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17c0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17c2:	49                   	dec    ecx
    17c3:	13 02                	adc    eax,DWORD PTR [edx]
    17c5:	18 00                	sbb    BYTE PTR [eax],al
    17c7:	00 07                	add    BYTE PTR [edi],al
    17c9:	0f 00 0b             	str    WORD PTR [ebx]
    17cc:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    17cf:	00 00                	add    BYTE PTR [eax],al
    17d1:	08 2e                	or     BYTE PTR [esi],ch
    17d3:	01 3f                	add    DWORD PTR [edi],edi
    17d5:	19 03                	sbb    DWORD PTR [ebx],eax
    17d7:	0e                   	push   cs
    17d8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17da:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17dc:	27                   	daa    
    17dd:	19 11                	sbb    DWORD PTR [ecx],edx
    17df:	01 12                	add    DWORD PTR [edx],edx
    17e1:	06                   	push   es
    17e2:	40                   	inc    eax
    17e3:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
    17e9:	00 01                	add    BYTE PTR [ecx],al
    17eb:	11 01                	adc    DWORD PTR [ecx],eax
    17ed:	25 0e 13 0b 03       	and    eax,0x30b130e
    17f2:	0e                   	push   cs
    17f3:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    17f5:	11 01                	adc    DWORD PTR [ecx],eax
    17f7:	12 06                	adc    al,BYTE PTR [esi]
    17f9:	10 17                	adc    BYTE PTR [edi],dl
    17fb:	00 00                	add    BYTE PTR [eax],al
    17fd:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1800:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1802:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1805:	08 00                	or     BYTE PTR [eax],al
    1807:	00 03                	add    BYTE PTR [ebx],al
    1809:	16                   	push   ss
    180a:	00 03                	add    BYTE PTR [ebx],al
    180c:	0e                   	push   cs
    180d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    180f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1811:	49                   	dec    ecx
    1812:	13 00                	adc    eax,DWORD PTR [eax]
    1814:	00 04 24             	add    BYTE PTR [esp],al
    1817:	00 0b                	add    BYTE PTR [ebx],cl
    1819:	0b 3e                	or     edi,DWORD PTR [esi]
    181b:	0b 03                	or     eax,DWORD PTR [ebx]
    181d:	0e                   	push   cs
    181e:	00 00                	add    BYTE PTR [eax],al
    1820:	05 0f 00 0b 0b       	add    eax,0xb0b000f
    1825:	49                   	dec    ecx
    1826:	13 00                	adc    eax,DWORD PTR [eax]
    1828:	00 06                	add    BYTE PTR [esi],al
    182a:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    182e:	00 00                	add    BYTE PTR [eax],al
    1830:	07                   	pop    es
    1831:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1834:	19 03                	sbb    DWORD PTR [ebx],eax
    1836:	0e                   	push   cs
    1837:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1839:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    183b:	27                   	daa    
    183c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    183f:	11 01                	adc    DWORD PTR [ecx],eax
    1841:	12 06                	adc    al,BYTE PTR [esi]
    1843:	40                   	inc    eax
    1844:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    184a:	00 00                	add    BYTE PTR [eax],al
    184c:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    1852:	0b 3b                	or     edi,DWORD PTR [ebx]
    1854:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1857:	02 18                	add    bl,BYTE PTR [eax]
    1859:	00 00                	add    BYTE PTR [eax],al
    185b:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
    1861:	0b 3b                	or     edi,DWORD PTR [ebx]
    1863:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1866:	02 18                	add    bl,BYTE PTR [eax]
    1868:	00 00                	add    BYTE PTR [eax],al
    186a:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
    186d:	03 0e                	add    ecx,DWORD PTR [esi]
    186f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1871:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1873:	49                   	dec    ecx
    1874:	13 02                	adc    eax,DWORD PTR [edx]
    1876:	18 00                	sbb    BYTE PTR [eax],al
    1878:	00 0b                	add    BYTE PTR [ebx],cl
    187a:	34 00                	xor    al,0x0
    187c:	03 0e                	add    ecx,DWORD PTR [esi]
    187e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1880:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1882:	49                   	dec    ecx
    1883:	13 3f                	adc    edi,DWORD PTR [edi]
    1885:	19 02                	sbb    DWORD PTR [edx],eax
    1887:	18 00                	sbb    BYTE PTR [eax],al
    1889:	00 00                	add    BYTE PTR [eax],al
    188b:	01 11                	add    DWORD PTR [ecx],edx
    188d:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1893:	0e                   	push   cs
    1894:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1896:	11 01                	adc    DWORD PTR [ecx],eax
    1898:	12 06                	adc    al,BYTE PTR [esi]
    189a:	10 17                	adc    BYTE PTR [edi],dl
    189c:	00 00                	add    BYTE PTR [eax],al
    189e:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    18a1:	0b 0b                	or     ecx,DWORD PTR [ebx]
    18a3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    18a6:	08 00                	or     BYTE PTR [eax],al
    18a8:	00 03                	add    BYTE PTR [ebx],al
    18aa:	24 00                	and    al,0x0
    18ac:	0b 0b                	or     ecx,DWORD PTR [ebx]
    18ae:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    18b1:	0e                   	push   cs
    18b2:	00 00                	add    BYTE PTR [eax],al
    18b4:	04 0f                	add    al,0xf
    18b6:	00 0b                	add    BYTE PTR [ebx],cl
    18b8:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    18bb:	00 00                	add    BYTE PTR [eax],al
    18bd:	05 2e 01 3f 19       	add    eax,0x193f012e
    18c2:	03 0e                	add    ecx,DWORD PTR [esi]
    18c4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    18c6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    18c8:	27                   	daa    
    18c9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    18cc:	11 01                	adc    DWORD PTR [ecx],eax
    18ce:	12 06                	adc    al,BYTE PTR [esi]
    18d0:	40                   	inc    eax
    18d1:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    18d7:	00 00                	add    BYTE PTR [eax],al
    18d9:	06                   	push   es
    18da:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    18df:	0b 3b                	or     edi,DWORD PTR [ebx]
    18e1:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    18e4:	02 18                	add    bl,BYTE PTR [eax]
    18e6:	00 00                	add    BYTE PTR [eax],al
    18e8:	07                   	pop    es
    18e9:	34 00                	xor    al,0x0
    18eb:	03 08                	add    ecx,DWORD PTR [eax]
    18ed:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    18ef:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    18f1:	49                   	dec    ecx
    18f2:	13 02                	adc    eax,DWORD PTR [edx]
    18f4:	18 00                	sbb    BYTE PTR [eax],al
    18f6:	00 08                	add    BYTE PTR [eax],cl
    18f8:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    18fc:	00 00                	add    BYTE PTR [eax],al
    18fe:	09 2e                	or     DWORD PTR [esi],ebp
    1900:	01 3f                	add    DWORD PTR [edi],edi
    1902:	19 03                	sbb    DWORD PTR [ebx],eax
    1904:	0e                   	push   cs
    1905:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1907:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1909:	27                   	daa    
    190a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    190d:	11 01                	adc    DWORD PTR [ecx],eax
    190f:	12 06                	adc    al,BYTE PTR [esi]
    1911:	40                   	inc    eax
    1912:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1918:	00 00                	add    BYTE PTR [eax],al
    191a:	0a 01                	or     al,BYTE PTR [ecx]
    191c:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
    191f:	01 13                	add    DWORD PTR [ebx],edx
    1921:	00 00                	add    BYTE PTR [eax],al
    1923:	0b 21                	or     esp,DWORD PTR [ecx]
    1925:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1928:	2f                   	das    
    1929:	0b 00                	or     eax,DWORD PTR [eax]
    192b:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    192e:	00 03                	add    BYTE PTR [ebx],al
    1930:	0e                   	push   cs
    1931:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1933:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1935:	49                   	dec    ecx
    1936:	13 02                	adc    eax,DWORD PTR [edx]
    1938:	18 00                	sbb    BYTE PTR [eax],al
    193a:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    1940:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1942:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1944:	49                   	dec    ecx
    1945:	13 3f                	adc    edi,DWORD PTR [edi]
    1947:	19 02                	sbb    DWORD PTR [edx],eax
    1949:	18 00                	sbb    BYTE PTR [eax],al
    194b:	00 00                	add    BYTE PTR [eax],al
    194d:	01 11                	add    DWORD PTR [ecx],edx
    194f:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1955:	0e                   	push   cs
    1956:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1958:	11 01                	adc    DWORD PTR [ecx],eax
    195a:	12 06                	adc    al,BYTE PTR [esi]
    195c:	10 17                	adc    BYTE PTR [edi],dl
    195e:	00 00                	add    BYTE PTR [eax],al
    1960:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1963:	03 0e                	add    ecx,DWORD PTR [esi]
    1965:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1967:	49                   	dec    ecx
    1968:	13 3a                	adc    edi,DWORD PTR [edx]
    196a:	0b 3b                	or     edi,DWORD PTR [ebx]
    196c:	0b 01                	or     eax,DWORD PTR [ecx]
    196e:	13 00                	adc    eax,DWORD PTR [eax]
    1970:	00 03                	add    BYTE PTR [ebx],al
    1972:	28 00                	sub    BYTE PTR [eax],al
    1974:	03 0e                	add    ecx,DWORD PTR [esi]
    1976:	1c 0b                	sbb    al,0xb
    1978:	00 00                	add    BYTE PTR [eax],al
    197a:	04 28                	add    al,0x28
    197c:	00 03                	add    BYTE PTR [ebx],al
    197e:	0e                   	push   cs
    197f:	1c 05                	sbb    al,0x5
    1981:	00 00                	add    BYTE PTR [eax],al
    1983:	05 24 00 0b 0b       	add    eax,0xb0b0024
    1988:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    198b:	0e                   	push   cs
    198c:	00 00                	add    BYTE PTR [eax],al
    198e:	06                   	push   es
    198f:	24 00                	and    al,0x0
    1991:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1993:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1996:	08 00                	or     BYTE PTR [eax],al
    1998:	00 07                	add    BYTE PTR [edi],al
    199a:	0f 00 0b             	str    WORD PTR [ebx]
    199d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    19a0:	00 00                	add    BYTE PTR [eax],al
    19a2:	08 16                	or     BYTE PTR [esi],dl
    19a4:	00 03                	add    BYTE PTR [ebx],al
    19a6:	0e                   	push   cs
    19a7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    19a9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    19ab:	49                   	dec    ecx
    19ac:	13 00                	adc    eax,DWORD PTR [eax]
    19ae:	00 09                	add    BYTE PTR [ecx],cl
    19b0:	13 01                	adc    eax,DWORD PTR [ecx]
    19b2:	03 08                	add    ecx,DWORD PTR [eax]
    19b4:	0b 0b                	or     ecx,DWORD PTR [ebx]
    19b6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    19b8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    19ba:	01 13                	add    DWORD PTR [ebx],edx
    19bc:	00 00                	add    BYTE PTR [eax],al
    19be:	0a 0d 00 03 0e 3a    	or     cl,BYTE PTR ds:0x3a0e0300
    19c4:	0b 3b                	or     edi,DWORD PTR [ebx]
    19c6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    19c9:	38 0b                	cmp    BYTE PTR [ebx],cl
    19cb:	00 00                	add    BYTE PTR [eax],al
    19cd:	0b 26                	or     esp,DWORD PTR [esi]
    19cf:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    19d2:	00 00                	add    BYTE PTR [eax],al
    19d4:	0c 2e                	or     al,0x2e
    19d6:	01 3f                	add    DWORD PTR [edi],edi
    19d8:	19 03                	sbb    DWORD PTR [ebx],eax
    19da:	0e                   	push   cs
    19db:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    19dd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    19df:	49                   	dec    ecx
    19e0:	13 11                	adc    edx,DWORD PTR [ecx]
    19e2:	01 12                	add    DWORD PTR [edx],edx
    19e4:	06                   	push   es
    19e5:	40                   	inc    eax
    19e6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    19ec:	00 00                	add    BYTE PTR [eax],al
    19ee:	0d 34 00 03 0e       	or     eax,0xe030034
    19f3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    19f5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    19f7:	49                   	dec    ecx
    19f8:	13 02                	adc    eax,DWORD PTR [edx]
    19fa:	18 00                	sbb    BYTE PTR [eax],al
    19fc:	00 0e                	add    BYTE PTR [esi],cl
    19fe:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1a01:	19 03                	sbb    DWORD PTR [ebx],eax
    1a03:	0e                   	push   cs
    1a04:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1a06:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1a08:	27                   	daa    
    1a09:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1a0c:	11 01                	adc    DWORD PTR [ecx],eax
    1a0e:	12 06                	adc    al,BYTE PTR [esi]
    1a10:	40                   	inc    eax
    1a11:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1a17:	00 00                	add    BYTE PTR [eax],al
    1a19:	0f 05                	syscall 
    1a1b:	00 03                	add    BYTE PTR [ebx],al
    1a1d:	0e                   	push   cs
    1a1e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1a20:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1a22:	49                   	dec    ecx
    1a23:	13 02                	adc    eax,DWORD PTR [edx]
    1a25:	18 00                	sbb    BYTE PTR [eax],al
    1a27:	00 10                	add    BYTE PTR [eax],dl
    1a29:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1a2c:	19 03                	sbb    DWORD PTR [ebx],eax
    1a2e:	0e                   	push   cs
    1a2f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1a31:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1a33:	27                   	daa    
    1a34:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1a37:	11 01                	adc    DWORD PTR [ecx],eax
    1a39:	12 06                	adc    al,BYTE PTR [esi]
    1a3b:	40                   	inc    eax
    1a3c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1a42:	00 00                	add    BYTE PTR [eax],al
    1a44:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    1a47:	03 08                	add    ecx,DWORD PTR [eax]
    1a49:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1a4b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1a4d:	49                   	dec    ecx
    1a4e:	13 02                	adc    eax,DWORD PTR [edx]
    1a50:	18 00                	sbb    BYTE PTR [eax],al
    1a52:	00 12                	add    BYTE PTR [edx],dl
    1a54:	34 00                	xor    al,0x0
    1a56:	03 0e                	add    ecx,DWORD PTR [esi]
    1a58:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1a5a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1a5c:	49                   	dec    ecx
    1a5d:	13 3f                	adc    edi,DWORD PTR [edi]
    1a5f:	19 02                	sbb    DWORD PTR [edx],eax
    1a61:	18 00                	sbb    BYTE PTR [eax],al
    1a63:	00 13                	add    BYTE PTR [ebx],dl
    1a65:	01 01                	add    DWORD PTR [ecx],eax
    1a67:	49                   	dec    ecx
    1a68:	13 01                	adc    eax,DWORD PTR [ecx]
    1a6a:	13 00                	adc    eax,DWORD PTR [eax]
    1a6c:	00 14 21             	add    BYTE PTR [ecx+eiz*1],dl
    1a6f:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1a72:	2f                   	das    
    1a73:	0b 00                	or     eax,DWORD PTR [eax]
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
   c:	00 00                	add    BYTE PTR [eax],al
   e:	00 00                	add    BYTE PTR [eax],al
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
	...
  20:	1c 00                	sbb    al,0x0
  22:	00 00                	add    BYTE PTR [eax],al
  24:	02 00                	add    al,BYTE PTR [eax]
  26:	0d 01 00 00 04       	or     eax,0x4000001
  2b:	00 00                	add    BYTE PTR [eax],al
  2d:	00 00                	add    BYTE PTR [eax],al
  2f:	00 70 00             	add    BYTE PTR [eax+0x0],dh
  32:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
	...
  40:	1c 00                	sbb    al,0x0
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	59                   	pop    ecx
  47:	02 00                	add    al,BYTE PTR [eax]
  49:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  4c:	00 00                	add    BYTE PTR [eax],al
  4e:	00 00                	add    BYTE PTR [eax],al
  50:	1c 01                	sbb    al,0x1
  52:	00 9f 2e 01 00 00    	add    BYTE PTR [edi+0x12e],bl
	...
  60:	1c 00                	sbb    al,0x0
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	99                   	cdq    
  67:	03 00                	add    eax,DWORD PTR [eax]
  69:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	4c                   	dec    esp
  71:	02 00                	add    al,BYTE PTR [eax]
  73:	9f                   	lahf   
  74:	65 02 00             	add    al,BYTE PTR gs:[eax]
	...
  7f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	85 05 00 00 04 00    	test   DWORD PTR ds:0x40000,eax
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	b4 04                	mov    ah,0x4
  92:	00 9f 6e 01 00 00    	add    BYTE PTR [edi+0x16e],bl
	...
  a0:	1c 00                	sbb    al,0x0
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	37                   	aaa    
  a7:	07                   	pop    es
  a8:	00 00                	add    BYTE PTR [eax],al
  aa:	04 00                	add    al,0x0
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	24 06                	and    al,0x6
  b2:	00 9f 41 04 00 00    	add    BYTE PTR [edi+0x441],bl
	...
  c0:	1c 00                	sbb    al,0x0
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	34 0b                	xor    al,0xb
  c8:	00 00                	add    BYTE PTR [eax],al
  ca:	04 00                	add    al,0x0
  cc:	00 00                	add    BYTE PTR [eax],al
  ce:	00 00                	add    BYTE PTR [eax],al
  d0:	68 0a 00 9f b8       	push   0xb89f000a
  d5:	08 00                	or     BYTE PTR [eax],al
	...
  df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	7c 14                	jl     fc <sysEnter_Vector-0x12ff04>
  e8:	00 00                	add    BYTE PTR [eax],al
  ea:	04 00                	add    al,0x0
  ec:	00 00                	add    BYTE PTR [eax],al
  ee:	00 00                	add    BYTE PTR [eax],al
  f0:	20 13                	and    BYTE PTR [ebx],dl
  f2:	00 9f 69 01 00 00    	add    BYTE PTR [edi+0x169],bl
	...
 100:	1c 00                	sbb    al,0x0
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	1e                   	push   ds
 107:	17                   	pop    ss
 108:	00 00                	add    BYTE PTR [eax],al
 10a:	04 00                	add    al,0x0
 10c:	00 00                	add    BYTE PTR [eax],al
 10e:	00 00                	add    BYTE PTR [eax],al
 110:	8c 14 00             	mov    WORD PTR [eax+eax*1],ss
 113:	9f                   	lahf   
 114:	8c 0d 00 00 00 00    	mov    WORD PTR ds:0x0,cs
 11a:	00 00                	add    BYTE PTR [eax],al
 11c:	00 00                	add    BYTE PTR [eax],al
 11e:	00 00                	add    BYTE PTR [eax],al
 120:	1c 00                	sbb    al,0x0
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	20 23                	and    BYTE PTR [ebx],ah
 128:	00 00                	add    BYTE PTR [eax],al
 12a:	04 00                	add    al,0x0
 12c:	00 00                	add    BYTE PTR [eax],al
 12e:	00 00                	add    BYTE PTR [eax],al
 130:	18 22                	sbb    BYTE PTR [edx],ah
 132:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
	...
 140:	1c 00                	sbb    al,0x0
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	bf 25 00 00 04       	mov    edi,0x4000025
 14b:	00 00                	add    BYTE PTR [eax],al
 14d:	00 00                	add    BYTE PTR [eax],al
 14f:	00 8c 22 00 9f c2 06 	add    BYTE PTR [edx+eiz*1+0x6c29f00],cl
	...
 15e:	00 00                	add    BYTE PTR [eax],al
 160:	1c 00                	sbb    al,0x0
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	ce                   	into   
 167:	2a 00                	sub    al,BYTE PTR [eax]
 169:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 16c:	00 00                	add    BYTE PTR [eax],al
 16e:	00 00                	add    BYTE PTR [eax],al
 170:	50                   	push   eax
 171:	29 00                	sub    DWORD PTR [eax],eax
 173:	9f                   	lahf   
 174:	bb 01 00 00 00       	mov    ebx,0x1
 179:	00 00                	add    BYTE PTR [eax],al
 17b:	00 00                	add    BYTE PTR [eax],al
 17d:	00 00                	add    BYTE PTR [eax],al
 17f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 182:	00 00                	add    BYTE PTR [eax],al
 184:	02 00                	add    al,BYTE PTR [eax]
 186:	ba 2c 00 00 04       	mov    edx,0x400002c
 18b:	00 00                	add    BYTE PTR [eax],al
 18d:	00 00                	add    BYTE PTR [eax],al
 18f:	00 0c 2b             	add    BYTE PTR [ebx+ebp*1],cl
 192:	00 9f e7 00 00 00    	add    BYTE PTR [edi+0xe7],bl
	...
 1a0:	1c 00                	sbb    al,0x0
 1a2:	00 00                	add    BYTE PTR [eax],al
 1a4:	02 00                	add    al,BYTE PTR [eax]
 1a6:	5e                   	pop    esi
 1a7:	2e 00 00             	add    BYTE PTR cs:[eax],al
 1aa:	04 00                	add    al,0x0
 1ac:	00 00                	add    BYTE PTR [eax],al
 1ae:	00 00                	add    BYTE PTR [eax],al
 1b0:	f4                   	hlt    
 1b1:	2b 00                	sub    eax,DWORD PTR [eax]
 1b3:	9f                   	lahf   
 1b4:	35 00 00 00 00       	xor    eax,0x0
 1b9:	00 00                	add    BYTE PTR [eax],al
 1bb:	00 00                	add    BYTE PTR [eax],al
 1bd:	00 00                	add    BYTE PTR [eax],al
 1bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 1c2:	00 00                	add    BYTE PTR [eax],al
 1c4:	02 00                	add    al,BYTE PTR [eax]
 1c6:	b6 2e                	mov    dh,0x2e
 1c8:	00 00                	add    BYTE PTR [eax],al
 1ca:	04 00                	add    al,0x0
 1cc:	00 00                	add    BYTE PTR [eax],al
 1ce:	00 00                	add    BYTE PTR [eax],al
 1d0:	2c 2c                	sub    al,0x2c
 1d2:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
	...
 1e0:	1c 00                	sbb    al,0x0
 1e2:	00 00                	add    BYTE PTR [eax],al
 1e4:	02 00                	add    al,BYTE PTR [eax]
 1e6:	d2                   	(bad)  
 1e7:	30 00                	xor    BYTE PTR [eax],al
 1e9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 1ec:	00 00                	add    BYTE PTR [eax],al
 1ee:	00 00                	add    BYTE PTR [eax],al
 1f0:	84 2c 00             	test   BYTE PTR [eax+eax*1],ch
 1f3:	9f                   	lahf   
 1f4:	16                   	push   ss
 1f5:	06                   	push   es
	...
 1fe:	00 00                	add    BYTE PTR [eax],al
 200:	1c 00                	sbb    al,0x0
 202:	00 00                	add    BYTE PTR [eax],al
 204:	02 00                	add    al,BYTE PTR [eax]
 206:	ad                   	lods   eax,DWORD PTR ds:[esi]
 207:	36 00 00             	add    BYTE PTR ss:[eax],al
 20a:	04 00                	add    al,0x0
 20c:	00 00                	add    BYTE PTR [eax],al
 20e:	00 00                	add    BYTE PTR [eax],al
 210:	9c                   	pushf  
 211:	32 00                	xor    al,BYTE PTR [eax]
 213:	9f                   	lahf   
 214:	d8 15 00 00 00 00    	fcom   DWORD PTR ds:0x0
 21a:	00 00                	add    BYTE PTR [eax],al
 21c:	00 00                	add    BYTE PTR [eax],al
 21e:	00 00                	add    BYTE PTR [eax],al
 220:	1c 00                	sbb    al,0x0
 222:	00 00                	add    BYTE PTR [eax],al
 224:	02 00                	add    al,BYTE PTR [eax]
 226:	b6 40                	mov    dh,0x40
 228:	00 00                	add    BYTE PTR [eax],al
 22a:	04 00                	add    al,0x0
 22c:	00 00                	add    BYTE PTR [eax],al
 22e:	00 00                	add    BYTE PTR [eax],al
 230:	74 48                	je     27a <sysEnter_Vector-0x12fd86>
 232:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
	...
 240:	1c 00                	sbb    al,0x0
 242:	00 00                	add    BYTE PTR [eax],al
 244:	02 00                	add    al,BYTE PTR [eax]
 246:	96                   	xchg   esi,eax
 247:	41                   	inc    ecx
 248:	00 00                	add    BYTE PTR [eax],al
 24a:	04 00                	add    al,0x0
 24c:	00 00                	add    BYTE PTR [eax],al
 24e:	00 00                	add    BYTE PTR [eax],al
 250:	f8                   	clc    
 251:	48                   	dec    eax
 252:	00 9f 58 01 00 00    	add    BYTE PTR [edi+0x158],bl
	...
 260:	1c 00                	sbb    al,0x0
 262:	00 00                	add    BYTE PTR [eax],al
 264:	02 00                	add    al,BYTE PTR [eax]
 266:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
 267:	43                   	inc    ebx
 268:	00 00                	add    BYTE PTR [eax],al
 26a:	04 00                	add    al,0x0
 26c:	00 00                	add    BYTE PTR [eax],al
 26e:	00 00                	add    BYTE PTR [eax],al
 270:	50                   	push   eax
 271:	4a                   	dec    edx
 272:	00 9f 7b 00 00 00    	add    BYTE PTR [edi+0x7b],bl
	...
 280:	1c 00                	sbb    al,0x0
 282:	00 00                	add    BYTE PTR [eax],al
 284:	02 00                	add    al,BYTE PTR [eax]
 286:	40                   	inc    eax
 287:	45                   	inc    ebp
 288:	00 00                	add    BYTE PTR [eax],al
 28a:	04 00                	add    al,0x0
 28c:	00 00                	add    BYTE PTR [eax],al
 28e:	00 00                	add    BYTE PTR [eax],al
 290:	cc                   	int3   
 291:	4a                   	dec    edx
 292:	00 9f c7 00 00 00    	add    BYTE PTR [edi+0xc7],bl
	...
 2a0:	1c 00                	sbb    al,0x0
 2a2:	00 00                	add    BYTE PTR [eax],al
 2a4:	02 00                	add    al,BYTE PTR [eax]
 2a6:	6b 46 00 00          	imul   eax,DWORD PTR [esi+0x0],0x0
 2aa:	04 00                	add    al,0x0
 2ac:	00 00                	add    BYTE PTR [eax],al
 2ae:	00 00                	add    BYTE PTR [eax],al
 2b0:	94                   	xchg   esp,eax
 2b1:	4b                   	dec    ebx
 2b2:	00 9f 89 00 00 00    	add    BYTE PTR [edi+0x89],bl
	...
 2c0:	1c 00                	sbb    al,0x0
 2c2:	00 00                	add    BYTE PTR [eax],al
 2c4:	02 00                	add    al,BYTE PTR [eax]
 2c6:	b1 47                	mov    cl,0x47
 2c8:	00 00                	add    BYTE PTR [eax],al
 2ca:	04 00                	add    al,0x0
 2cc:	00 00                	add    BYTE PTR [eax],al
 2ce:	00 00                	add    BYTE PTR [eax],al
 2d0:	20 4c 00 9f          	and    BYTE PTR [eax+eax*1-0x61],cl
 2d4:	a2 00 00 00 00       	mov    ds:0x0,al
 2d9:	00 00                	add    BYTE PTR [eax],al
 2db:	00 00                	add    BYTE PTR [eax],al
 2dd:	00 00                	add    BYTE PTR [eax],al
 2df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2e2:	00 00                	add    BYTE PTR [eax],al
 2e4:	02 00                	add    al,BYTE PTR [eax]
 2e6:	89 49 00             	mov    DWORD PTR [ecx+0x0],ecx
 2e9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 2ec:	00 00                	add    BYTE PTR [eax],al
 2ee:	00 00                	add    BYTE PTR [eax],al
 2f0:	c4 4c 00 9f          	les    ecx,FWORD PTR [eax+eax*1-0x61]
 2f4:	ce                   	into   
	...
 2fd:	00 00                	add    BYTE PTR [eax],al
 2ff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 302:	00 00                	add    BYTE PTR [eax],al
 304:	02 00                	add    al,BYTE PTR [eax]
 306:	6b 4a 00 00          	imul   ecx,DWORD PTR [edx+0x0],0x0
 30a:	04 00                	add    al,0x0
 30c:	00 00                	add    BYTE PTR [eax],al
 30e:	00 00                	add    BYTE PTR [eax],al
 310:	94                   	xchg   esp,eax
 311:	4d                   	dec    ebp
 312:	00 9f 8c 00 00 00    	add    BYTE PTR [edi+0x8c],bl
	...
 320:	1c 00                	sbb    al,0x0
 322:	00 00                	add    BYTE PTR [eax],al
 324:	02 00                	add    al,BYTE PTR [eax]
 326:	5f                   	pop    edi
 327:	4b                   	dec    ebx
 328:	00 00                	add    BYTE PTR [eax],al
 32a:	04 00                	add    al,0x0
 32c:	00 00                	add    BYTE PTR [eax],al
 32e:	00 00                	add    BYTE PTR [eax],al
 330:	20 4e 00             	and    BYTE PTR [esi+0x0],cl
 333:	9f                   	lahf   
 334:	7d 01                	jge    337 <sysEnter_Vector-0x12fcc9>
	...
 33e:	00 00                	add    BYTE PTR [eax],al
 340:	1c 00                	sbb    al,0x0
 342:	00 00                	add    BYTE PTR [eax],al
 344:	02 00                	add    al,BYTE PTR [eax]
 346:	64                   	fs
 347:	4c                   	dec    esp
 348:	00 00                	add    BYTE PTR [eax],al
 34a:	04 00                	add    al,0x0
 34c:	00 00                	add    BYTE PTR [eax],al
 34e:	00 00                	add    BYTE PTR [eax],al
 350:	a0 4f 00 9f 1d       	mov    al,ds:0x1d9f004f
	...
 35d:	00 00                	add    BYTE PTR [eax],al
 35f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 362:	00 00                	add    BYTE PTR [eax],al
 364:	02 00                	add    al,BYTE PTR [eax]
 366:	d4 4c                	aam    0x4c
 368:	00 00                	add    BYTE PTR [eax],al
 36a:	04 00                	add    al,0x0
 36c:	00 00                	add    BYTE PTR [eax],al
 36e:	00 00                	add    BYTE PTR [eax],al
 370:	c0 4f 00 9f          	ror    BYTE PTR [edi+0x0],0x9f
 374:	9c                   	pushf  
 375:	01 00                	add    DWORD PTR [eax],eax
	...
 37f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 382:	00 00                	add    BYTE PTR [eax],al
 384:	02 00                	add    al,BYTE PTR [eax]
 386:	d7                   	xlat   BYTE PTR ds:[ebx]
 387:	4d                   	dec    ebp
 388:	00 00                	add    BYTE PTR [eax],al
 38a:	04 00                	add    al,0x0
 38c:	00 00                	add    BYTE PTR [eax],al
 38e:	00 00                	add    BYTE PTR [eax],al
 390:	5c                   	pop    esp
 391:	51                   	push   ecx
 392:	00 9f b6 00 00 00    	add    BYTE PTR [edi+0xb6],bl
	...
 3a0:	1c 00                	sbb    al,0x0
 3a2:	00 00                	add    BYTE PTR [eax],al
 3a4:	02 00                	add    al,BYTE PTR [eax]
 3a6:	9b                   	fwait
 3a7:	4e                   	dec    esi
 3a8:	00 00                	add    BYTE PTR [eax],al
 3aa:	04 00                	add    al,0x0
 3ac:	00 00                	add    BYTE PTR [eax],al
 3ae:	00 00                	add    BYTE PTR [eax],al
 3b0:	14 52                	adc    al,0x52
 3b2:	00 9f 44 01 00 00    	add    BYTE PTR [edi+0x144],bl
	...
 3c0:	1c 00                	sbb    al,0x0
 3c2:	00 00                	add    BYTE PTR [eax],al
 3c4:	02 00                	add    al,BYTE PTR [eax]
 3c6:	65                   	gs
 3c7:	50                   	push   eax
 3c8:	00 00                	add    BYTE PTR [eax],al
 3ca:	04 00                	add    al,0x0
 3cc:	00 00                	add    BYTE PTR [eax],al
 3ce:	00 00                	add    BYTE PTR [eax],al
 3d0:	58                   	pop    eax
 3d1:	53                   	push   ebx
 3d2:	00 9f 29 01 00 00    	add    BYTE PTR [edi+0x129],bl
	...
 3e0:	1c 00                	sbb    al,0x0
 3e2:	00 00                	add    BYTE PTR [eax],al
 3e4:	02 00                	add    al,BYTE PTR [eax]
 3e6:	19 52 00             	sbb    DWORD PTR [edx+0x0],edx
 3e9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 3ec:	00 00                	add    BYTE PTR [eax],al
 3ee:	00 00                	add    BYTE PTR [eax],al
 3f0:	84 54 00 9f          	test   BYTE PTR [eax+eax*1-0x61],dl
 3f4:	0e                   	push   cs
 3f5:	0d 00 00 00 00       	or     eax,0x0
 3fa:	00 00                	add    BYTE PTR [eax],al
 3fc:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	75 00                	jne    2 <sysEnter_Vector-0x12fffe>
       2:	00 00                	add    BYTE PTR [eax],al
       4:	02 00                	add    al,BYTE PTR [eax]
       6:	53                   	push   ebx
       7:	00 00                	add    BYTE PTR [eax],al
       9:	00 01                	add    BYTE PTR [ecx],al
       b:	01 fb                	add    ebx,edi
       d:	0e                   	push   cs
       e:	0d 00 01 01 01       	or     eax,0x1010100
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
      1b:	2e                   	cs
      1c:	2e                   	cs
      1d:	2f                   	das    
      1e:	2e                   	cs
      1f:	2e                   	cs
      20:	2f                   	das    
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      25:	6a 2f                	push   0x2f
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      31:	63 2f                	arpl   WORD PTR [edi],bp
      33:	73 74                	jae    a9 <sysEnter_Vector-0x12ff57>
      35:	72 69                	jb     a0 <sysEnter_Vector-0x12ff60>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <sysEnter_Vector-0x12ffc5>
      3b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      42:	00 00                	add    BYTE PTR [eax],al
      44:	73 74                	jae    ba <sysEnter_Vector-0x12ff46>
      46:	72 63                	jb     ab <sysEnter_Vector-0x12ff55>
      48:	68 72 2e 63 00       	push   0x632e72
      4d:	01 00                	add    DWORD PTR [eax],eax
      4f:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
      52:	6d                   	ins    DWORD PTR es:[edi],dx
      53:	6d                   	ins    DWORD PTR es:[edi],dx
      54:	6f                   	outs   dx,DWORD PTR ds:[esi]
      55:	6e                   	outs   dx,BYTE PTR ds:[esi]
      56:	2e                   	cs
      57:	68 00 02 00 00       	push   0x200
      5c:	00 00                	add    BYTE PTR [eax],al
      5e:	05 02 00 00 00       	add    eax,0x2
      63:	9f                   	lahf   
      64:	03 09                	add    ecx,DWORD PTR [ecx]
      66:	01 c9                	add    ecx,ecx
      68:	2f                   	das    
      69:	f3 72 cb             	repz jb 37 <sysEnter_Vector-0x12ffc9>
      6c:	3d 31 c9 2f f3       	cmp    eax,0xf32fc931
      71:	72 cb                	jb     3e <sysEnter_Vector-0x12ffc2>
      73:	3d 02 02 00 01       	cmp    eax,0x1000202
      78:	01 a6 00 00 00 02    	add    DWORD PTR [esi+0x2000000],esp
      7e:	00 54 00 00          	add    BYTE PTR [eax+eax*1+0x0],dl
      82:	00 01                	add    BYTE PTR [ecx],al
      84:	01 fb                	add    ebx,edi
      86:	0e                   	push   cs
      87:	0d 00 01 01 01       	or     eax,0x1010100
      8c:	01 00                	add    DWORD PTR [eax],eax
      8e:	00 00                	add    BYTE PTR [eax],al
      90:	01 00                	add    DWORD PTR [eax],eax
      92:	00 01                	add    BYTE PTR [ecx],al
      94:	2e                   	cs
      95:	2e                   	cs
      96:	2f                   	das    
      97:	2e                   	cs
      98:	2e                   	cs
      99:	2f                   	das    
      9a:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      9e:	6a 2f                	push   0x2f
      a0:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      a3:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      aa:	63 2f                	arpl   WORD PTR [edi],bp
      ac:	73 74                	jae    122 <sysEnter_Vector-0x12fede>
      ae:	72 69                	jb     119 <sysEnter_Vector-0x12fee7>
      b0:	6e                   	outs   dx,BYTE PTR ds:[esi]
      b1:	67 73 00             	addr16 jae b4 <sysEnter_Vector-0x12ff4c>
      b4:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      bb:	00 00                	add    BYTE PTR [eax],al
      bd:	73 74                	jae    133 <sysEnter_Vector-0x12fecd>
      bf:	72 63                	jb     124 <sysEnter_Vector-0x12fedc>
      c1:	73 70                	jae    133 <sysEnter_Vector-0x12fecd>
      c3:	6e                   	outs   dx,BYTE PTR ds:[esi]
      c4:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
      c7:	01 00                	add    DWORD PTR [eax],eax
      c9:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
      cc:	6d                   	ins    DWORD PTR es:[edi],dx
      cd:	6d                   	ins    DWORD PTR es:[edi],dx
      ce:	6f                   	outs   dx,DWORD PTR ds:[esi]
      cf:	6e                   	outs   dx,BYTE PTR ds:[esi]
      d0:	2e                   	cs
      d1:	68 00 02 00 00       	push   0x200
      d6:	00 00                	add    BYTE PTR [eax],al
      d8:	05 02 70 00 00       	add    eax,0x7002
      dd:	9f                   	lahf   
      de:	03 26                	add    esp,DWORD PTR [esi]
      e0:	01 e7                	add    edi,esp
      e2:	9f                   	lahf   
      e3:	59                   	pop    ecx
      e4:	75 00                	jne    e6 <sysEnter_Vector-0x12ff1a>
      e6:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
      e9:	aa                   	stos   BYTE PTR es:[edi],al
      ea:	00 02                	add    BYTE PTR [edx],al
      ec:	04 01                	add    al,0x1
      ee:	06                   	push   es
      ef:	3c 00                	cmp    al,0x0
      f1:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
      f4:	06                   	push   es
      f5:	73 00                	jae    f7 <sysEnter_Vector-0x12ff09>
      f7:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
      fa:	06                   	push   es
      fb:	82                   	(bad)  
      fc:	06                   	push   es
      fd:	6d                   	ins    DWORD PTR es:[edi],dx
      fe:	91                   	xchg   ecx,eax
      ff:	4d                   	dec    ebp
     100:	e7 9f                	out    0x9f,eax
     102:	59                   	pop    ecx
     103:	75 00                	jne    105 <sysEnter_Vector-0x12fefb>
     105:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     108:	aa                   	stos   BYTE PTR es:[edi],al
     109:	00 02                	add    BYTE PTR [edx],al
     10b:	04 01                	add    al,0x1
     10d:	06                   	push   es
     10e:	3c 00                	cmp    al,0x0
     110:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     113:	06                   	push   es
     114:	73 00                	jae    116 <sysEnter_Vector-0x12feea>
     116:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     119:	06                   	push   es
     11a:	82                   	(bad)  
     11b:	06                   	push   es
     11c:	6d                   	ins    DWORD PTR es:[edi],dx
     11d:	91                   	xchg   ecx,eax
     11e:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     121:	01 01                	add    DWORD PTR [ecx],eax
     123:	87 00                	xchg   DWORD PTR [eax],eax
     125:	00 00                	add    BYTE PTR [eax],al
     127:	02 00                	add    al,BYTE PTR [eax]
     129:	53                   	push   ebx
     12a:	00 00                	add    BYTE PTR [eax],al
     12c:	00 01                	add    BYTE PTR [ecx],al
     12e:	01 fb                	add    ebx,edi
     130:	0e                   	push   cs
     131:	0d 00 01 01 01       	or     eax,0x1010100
     136:	01 00                	add    DWORD PTR [eax],eax
     138:	00 00                	add    BYTE PTR [eax],al
     13a:	01 00                	add    DWORD PTR [eax],eax
     13c:	00 01                	add    BYTE PTR [ecx],al
     13e:	2e                   	cs
     13f:	2e                   	cs
     140:	2f                   	das    
     141:	2e                   	cs
     142:	2e                   	cs
     143:	2f                   	das    
     144:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     148:	6a 2f                	push   0x2f
     14a:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     14d:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     154:	63 2f                	arpl   WORD PTR [edi],bp
     156:	73 74                	jae    1cc <sysEnter_Vector-0x12fe34>
     158:	72 69                	jb     1c3 <sysEnter_Vector-0x12fe3d>
     15a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     15b:	67 73 00             	addr16 jae 15e <sysEnter_Vector-0x12fea2>
     15e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     165:	00 00                	add    BYTE PTR [eax],al
     167:	73 74                	jae    1dd <sysEnter_Vector-0x12fe23>
     169:	72 74                	jb     1df <sysEnter_Vector-0x12fe21>
     16b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     16c:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     16f:	00 01                	add    BYTE PTR [ecx],al
     171:	00 00                	add    BYTE PTR [eax],al
     173:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     176:	6d                   	ins    DWORD PTR es:[edi],dx
     177:	6f                   	outs   dx,DWORD PTR ds:[esi]
     178:	6e                   	outs   dx,BYTE PTR ds:[esi]
     179:	2e                   	cs
     17a:	68 00 02 00 00       	push   0x200
     17f:	00 00                	add    BYTE PTR [eax],al
     181:	05 02 1c 01 00       	add    eax,0x11c02
     186:	9f                   	lahf   
     187:	03 2a                	add    ebp,DWORD PTR [edx]
     189:	01 f6                	add    esi,esi
     18b:	67 92                	addr16 xchg edx,eax
     18d:	08 2f                	or     BYTE PTR [edi],ch
     18f:	75 08                	jne    199 <sysEnter_Vector-0x12fe67>
     191:	2f                   	das    
     192:	4b                   	dec    ebx
     193:	08 c9                	or     cl,cl
     195:	c9                   	leave  
     196:	08 21                	or     BYTE PTR [ecx],ah
     198:	3d 77 f6 67 92       	cmp    eax,0x9267f677
     19d:	08 2f                	or     BYTE PTR [edi],ch
     19f:	75 08                	jne    1a9 <sysEnter_Vector-0x12fe57>
     1a1:	2f                   	das    
     1a2:	4b                   	dec    ebx
     1a3:	08 c9                	or     cl,cl
     1a5:	c9                   	leave  
     1a6:	08 21                	or     BYTE PTR [ecx],ah
     1a8:	3d 02 07 00 01       	cmp    eax,0x1000702
     1ad:	01 b7 00 00 00 02    	add    DWORD PTR [edi+0x2000000],esi
     1b3:	00 36                	add    BYTE PTR [esi],dh
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	00 01                	add    BYTE PTR [ecx],al
     1b9:	01 fb                	add    ebx,edi
     1bb:	0e                   	push   cs
     1bc:	0d 00 01 01 01       	or     eax,0x1010100
     1c1:	01 00                	add    DWORD PTR [eax],eax
     1c3:	00 00                	add    BYTE PTR [eax],al
     1c5:	01 00                	add    DWORD PTR [eax],eax
     1c7:	00 01                	add    BYTE PTR [ecx],al
     1c9:	73 72                	jae    23d <sysEnter_Vector-0x12fdc3>
     1cb:	63 00                	arpl   WORD PTR [eax],ax
     1cd:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     1d4:	00 00                	add    BYTE PTR [eax],al
     1d6:	61                   	popa   
     1d7:	73 63                	jae    23c <sysEnter_Vector-0x12fdc4>
     1d9:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     1e0:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     1e3:	6d                   	ins    DWORD PTR es:[edi],dx
     1e4:	6d                   	ins    DWORD PTR es:[edi],dx
     1e5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1e6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     1e7:	2e                   	cs
     1e8:	68 00 02 00 00       	push   0x200
     1ed:	00 00                	add    BYTE PTR [eax],al
     1ef:	05 02 4c 02 00       	add    eax,0x24c02
     1f4:	9f                   	lahf   
     1f5:	03 0a                	add    ecx,DWORD PTR [edx]
     1f7:	01 08                	add    DWORD PTR [eax],ecx
     1f9:	16                   	push   ss
     1fa:	00 02                	add    BYTE PTR [edx],al
     1fc:	04 03                	add    al,0x3
     1fe:	08 d7                	or     bh,dl
     200:	00 02                	add    BYTE PTR [edx],al
     202:	04 03                	add    al,0x3
     204:	d7                   	xlat   BYTE PTR ds:[ebx]
     205:	00 02                	add    BYTE PTR [edx],al
     207:	04 03                	add    al,0x3
     209:	08 4b 00             	or     BYTE PTR [ebx+0x0],cl
     20c:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     20f:	d3 00                	rol    DWORD PTR [eax],cl
     211:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     214:	06                   	push   es
     215:	82                   	(bad)  
     216:	06                   	push   es
     217:	87 69 08             	xchg   DWORD PTR [ecx+0x8],ebp
     21a:	15 bb 3d 00 02       	adc    eax,0x2003dbb
     21f:	04 01                	add    al,0x1
     221:	76 00                	jbe    223 <sysEnter_Vector-0x12fddd>
     223:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     226:	02 3b                	add    bh,BYTE PTR [ebx]
     228:	13 08                	adc    ecx,DWORD PTR [eax]
     22a:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     22e:	ad                   	lods   eax,DWORD PTR ds:[esi]
     22f:	d7                   	xlat   BYTE PTR ds:[ebx]
     230:	69 08 15 bb 3d 00    	imul   ecx,DWORD PTR [eax],0x3dbb15
     236:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     239:	76 00                	jbe    23b <sysEnter_Vector-0x12fdc5>
     23b:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     23e:	02 3b                	add    bh,BYTE PTR [ebx]
     240:	13 08                	adc    ecx,DWORD PTR [eax]
     242:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     246:	ad                   	lods   eax,DWORD PTR ds:[esi]
     247:	d7                   	xlat   BYTE PTR ds:[ebx]
     248:	3d 5c f3 78 00       	cmp    eax,0x78f35c
     24d:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     250:	91                   	xchg   ecx,eax
     251:	00 02                	add    BYTE PTR [edx],al
     253:	04 03                	add    al,0x3
     255:	02 24 11             	add    ah,BYTE PTR [ecx+edx*1]
     258:	00 02                	add    BYTE PTR [edx],al
     25a:	04 01                	add    al,0x1
     25c:	06                   	push   es
     25d:	4a                   	dec    edx
     25e:	06                   	push   es
     25f:	e8 3d 31 c9 ad       	call   adc933a1 <tmbuf+0xec8a0a1>
     264:	02 02                	add    al,BYTE PTR [edx]
     266:	00 01                	add    BYTE PTR [ecx],al
     268:	01 c8                	add    eax,ecx
     26a:	00 00                	add    BYTE PTR [eax],al
     26c:	00 02                	add    BYTE PTR [edx],al
     26e:	00 8f 00 00 00 01    	add    BYTE PTR [edi+0x1000000],cl
     274:	01 fb                	add    ebx,edi
     276:	0e                   	push   cs
     277:	0d 00 01 01 01       	or     eax,0x1010100
     27c:	01 00                	add    DWORD PTR [eax],eax
     27e:	00 00                	add    BYTE PTR [eax],al
     280:	01 00                	add    DWORD PTR [eax],eax
     282:	00 01                	add    BYTE PTR [ecx],al
     284:	73 72                	jae    2f8 <sysEnter_Vector-0x12fd08>
     286:	63 00                	arpl   WORD PTR [eax],ax
     288:	2f                   	das    
     289:	68 6f 6d 65 2f       	push   0x2f656d6f
     28e:	79 6f                	jns    2ff <sysEnter_Vector-0x12fd01>
     290:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     297:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     29a:	73 73                	jae    30f <sysEnter_Vector-0x12fcf1>
     29c:	2f                   	das    
     29d:	6c                   	ins    BYTE PTR es:[edi],dx
     29e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     2a5:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     2ab:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     2b1:	78 2d                	js     2e0 <sysEnter_Vector-0x12fd20>
     2b3:	67 6e                	outs   dx,BYTE PTR ds:[si]
     2b5:	75 2f                	jne    2e6 <sysEnter_Vector-0x12fd1a>
     2b7:	35 2e 33 2e 30       	xor    eax,0x302e332e
     2bc:	2f                   	das    
     2bd:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     2c4:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     2c7:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     2cb:	65 00 00             	add    BYTE PTR gs:[eax],al
     2ce:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     2d1:	73 6f                	jae    342 <sysEnter_Vector-0x12fcbe>
     2d3:	6c                   	ins    BYTE PTR es:[edi],dx
     2d4:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
     2d8:	01 00                	add    DWORD PTR [eax],eax
     2da:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     2dd:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     2e4:	63 
     2e5:	2e                   	cs
     2e6:	68 00 02 00 00       	push   0x200
     2eb:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     2f2:	03 00                	add    eax,DWORD PTR [eax]
     2f4:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     2f7:	6d                   	ins    DWORD PTR es:[edi],dx
     2f8:	6d                   	ins    DWORD PTR es:[edi],dx
     2f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     2fa:	6e                   	outs   dx,BYTE PTR ds:[esi]
     2fb:	2e                   	cs
     2fc:	68 00 03 00 00       	push   0x300
     301:	00 00                	add    BYTE PTR [eax],al
     303:	05 02 b4 04 00       	add    eax,0x4b402
     308:	9f                   	lahf   
     309:	03 0f                	add    ecx,DWORD PTR [edi]
     30b:	01 08                	add    DWORD PTR [eax],ecx
     30d:	24 08                	and    al,0x8
     30f:	59                   	pop    ecx
     310:	08 21                	or     BYTE PTR [ecx],ah
     312:	08 2f                	or     BYTE PTR [edi],ch
     314:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     317:	21 08                	and    DWORD PTR [eax],ecx
     319:	2f                   	das    
     31a:	08 5a 08             	or     BYTE PTR [edx+0x8],bl
     31d:	59                   	pop    ecx
     31e:	69 08 23 08 59 08    	imul   ecx,DWORD PTR [eax],0x8590823
     324:	5a                   	pop    edx
     325:	08 59 69             	or     BYTE PTR [ecx+0x69],bl
     328:	08 23                	or     BYTE PTR [ebx],ah
     32a:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     32d:	5a                   	pop    edx
     32e:	08 59 02             	or     BYTE PTR [ecx+0x2],bl
     331:	06                   	push   es
     332:	00 01                	add    BYTE PTR [ecx],al
     334:	01 74 01 00          	add    DWORD PTR [ecx+eax*1+0x0],esi
     338:	00 02                	add    BYTE PTR [edx],al
     33a:	00 d0                	add    al,dl
     33c:	00 00                	add    BYTE PTR [eax],al
     33e:	00 01                	add    BYTE PTR [ecx],al
     340:	01 fb                	add    ebx,edi
     342:	0e                   	push   cs
     343:	0d 00 01 01 01       	or     eax,0x1010100
     348:	01 00                	add    DWORD PTR [eax],eax
     34a:	00 00                	add    BYTE PTR [eax],al
     34c:	01 00                	add    DWORD PTR [eax],eax
     34e:	00 01                	add    BYTE PTR [ecx],al
     350:	73 72                	jae    3c4 <sysEnter_Vector-0x12fc3c>
     352:	63 00                	arpl   WORD PTR [eax],ax
     354:	2f                   	das    
     355:	68 6f 6d 65 2f       	push   0x2f656d6f
     35a:	79 6f                	jns    3cb <sysEnter_Vector-0x12fc35>
     35c:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     363:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     366:	73 73                	jae    3db <sysEnter_Vector-0x12fc25>
     368:	2f                   	das    
     369:	6c                   	ins    BYTE PTR es:[edi],dx
     36a:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     371:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     377:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     37d:	78 2d                	js     3ac <sysEnter_Vector-0x12fc54>
     37f:	67 6e                	outs   dx,BYTE PTR ds:[si]
     381:	75 2f                	jne    3b2 <sysEnter_Vector-0x12fc4e>
     383:	35 2e 33 2e 30       	xor    eax,0x302e332e
     388:	2f                   	das    
     389:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     390:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     393:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     397:	65                   	gs
     398:	2f                   	das    
     399:	2e                   	cs
     39a:	2e                   	cs
     39b:	2f                   	das    
     39c:	2e                   	cs
     39d:	2e                   	cs
     39e:	2f                   	das    
     39f:	2e                   	cs
     3a0:	2e                   	cs
     3a1:	2f                   	das    
     3a2:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     3a6:	6a 2f                	push   0x2f
     3a8:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     3ab:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     3b2:	6e                   	outs   dx,BYTE PTR ds:[esi]
     3b3:	65                   	gs
     3b4:	6c                   	ins    BYTE PTR es:[edi],dx
     3b5:	2f                   	das    
     3b6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     3bd:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     3c0:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     3c4:	65 00 00             	add    BYTE PTR gs:[eax],al
     3c7:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     3c9:	76 69                	jbe    434 <sysEnter_Vector-0x12fbcc>
     3cb:	72 6f                	jb     43c <sysEnter_Vector-0x12fbc4>
     3cd:	6e                   	outs   dx,BYTE PTR ds:[esi]
     3ce:	6d                   	ins    DWORD PTR es:[edi],dx
     3cf:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     3d1:	74 2e                	je     401 <sysEnter_Vector-0x12fbff>
     3d3:	63 00                	arpl   WORD PTR [eax],ax
     3d5:	01 00                	add    DWORD PTR [eax],eax
     3d7:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     3da:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     3e1:	63 
     3e2:	2e                   	cs
     3e3:	68 00 02 00 00       	push   0x200
     3e8:	73 74                	jae    45e <sysEnter_Vector-0x12fba2>
     3ea:	64                   	fs
     3eb:	64                   	fs
     3ec:	65                   	gs
     3ed:	66                   	data16
     3ee:	2e                   	cs
     3ef:	68 00 02 00 00       	push   0x200
     3f4:	73 79                	jae    46f <sysEnter_Vector-0x12fb91>
     3f6:	73 63                	jae    45b <sysEnter_Vector-0x12fba5>
     3f8:	61                   	popa   
     3f9:	6c                   	ins    BYTE PTR es:[edi],dx
     3fa:	6c                   	ins    BYTE PTR es:[edi],dx
     3fb:	73 2e                	jae    42b <sysEnter_Vector-0x12fbd5>
     3fd:	68 00 03 00 00       	push   0x300
     402:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     405:	6d                   	ins    DWORD PTR es:[edi],dx
     406:	6f                   	outs   dx,DWORD PTR ds:[esi]
     407:	6e                   	outs   dx,BYTE PTR ds:[esi]
     408:	2e                   	cs
     409:	68 00 04 00 00       	push   0x400
     40e:	00 00                	add    BYTE PTR [eax],al
     410:	05 02 24 06 00       	add    eax,0x62402
     415:	9f                   	lahf   
     416:	03 09                	add    ecx,DWORD PTR [ecx]
     418:	01 08                	add    DWORD PTR [eax],ecx
     41a:	59                   	pop    ecx
     41b:	08 2f                	or     BYTE PTR [edi],ch
     41d:	08 13                	or     BYTE PTR [ebx],dl
     41f:	08 3d 68 08 15 08    	or     BYTE PTR ds:0x8150868,bh
     425:	75 75                	jne    49c <sysEnter_Vector-0x12fb64>
     427:	a0 08 9f 2f 08       	mov    al,ds:0x82f9f08
     42c:	ff 00                	inc    DWORD PTR [eax]
     42e:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     431:	06                   	push   es
     432:	08 82 06 08 5a 08    	or     BYTE PTR [edx+0x85a0806],al
     438:	83 08 83             	or     DWORD PTR [eax],0xffffff83
     43b:	6a 57                	push   0x57
     43d:	22 3d 77 f3 d7 31    	and    bh,BYTE PTR ds:0x31d7f377
     443:	08 21                	or     BYTE PTR [ecx],ah
     445:	91                   	xchg   ecx,eax
     446:	02 36                	add    dh,BYTE PTR [esi]
     448:	14 02                	adc    al,0x2
     44a:	39 13                	cmp    DWORD PTR [ebx],edx
     44c:	00 02                	add    BYTE PTR [edx],al
     44e:	04 02                	add    al,0x2
     450:	7e 00                	jle    452 <sysEnter_Vector-0x12fbae>
     452:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     455:	06                   	push   es
     456:	4a                   	dec    edx
     457:	06                   	push   es
     458:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     459:	59                   	pop    ecx
     45a:	5b                   	pop    ebx
     45b:	f3 08 13             	repz or BYTE PTR [ebx],dl
     45e:	31 08                	xor    DWORD PTR [eax],ecx
     460:	21 76 bb             	and    DWORD PTR [esi-0x45],esi
     463:	08 92 08 4b 02 36    	or     BYTE PTR [edx+0x36024b08],dl
     469:	14 08                	adc    al,0x8
     46b:	f3 02 25 13 08 f3 00 	repz add ah,BYTE PTR ds:0xf30813
     472:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     475:	03 77 58             	add    esi,DWORD PTR [edi+0x58]
     478:	00 02                	add    BYTE PTR [edx],al
     47a:	04 01                	add    al,0x1
     47c:	06                   	push   es
     47d:	4a                   	dec    edx
     47e:	06                   	push   es
     47f:	03 0c 9e             	add    ecx,DWORD PTR [esi+ebx*4]
     482:	bb 08 92 08 9f       	mov    ebx,0x9f089208
     487:	08 f3                	or     bl,dh
     489:	02 25 13 08 f3 00    	add    ah,BYTE PTR ds:0xf30813
     48f:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     492:	03 79 2e             	add    edi,DWORD PTR [ecx+0x2e]
     495:	00 02                	add    BYTE PTR [edx],al
     497:	04 01                	add    al,0x1
     499:	06                   	push   es
     49a:	4a                   	dec    edx
     49b:	06                   	push   es
     49c:	03 0b                	add    ecx,DWORD PTR [ebx]
     49e:	9e                   	sahf   
     49f:	5b                   	pop    ebx
     4a0:	08 13                	or     BYTE PTR [ebx],dl
     4a2:	08 5a 5b             	or     BYTE PTR [edx+0x5b],bl
     4a5:	f3 08 13             	repz or BYTE PTR [ebx],dl
     4a8:	02 02                	add    al,BYTE PTR [edx]
     4aa:	00 01                	add    BYTE PTR [ecx],al
     4ac:	01 c8                	add    eax,ecx
     4ae:	01 00                	add    DWORD PTR [eax],eax
     4b0:	00 02                	add    BYTE PTR [edx],al
     4b2:	00 d3                	add    bl,dl
     4b4:	00 00                	add    BYTE PTR [eax],al
     4b6:	00 01                	add    BYTE PTR [ecx],al
     4b8:	01 fb                	add    ebx,edi
     4ba:	0e                   	push   cs
     4bb:	0d 00 01 01 01       	or     eax,0x1010100
     4c0:	01 00                	add    DWORD PTR [eax],eax
     4c2:	00 00                	add    BYTE PTR [eax],al
     4c4:	01 00                	add    DWORD PTR [eax],eax
     4c6:	00 01                	add    BYTE PTR [ecx],al
     4c8:	73 72                	jae    53c <sysEnter_Vector-0x12fac4>
     4ca:	63 00                	arpl   WORD PTR [eax],ax
     4cc:	2f                   	das    
     4cd:	68 6f 6d 65 2f       	push   0x2f656d6f
     4d2:	79 6f                	jns    543 <sysEnter_Vector-0x12fabd>
     4d4:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     4db:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     4de:	73 73                	jae    553 <sysEnter_Vector-0x12faad>
     4e0:	2f                   	das    
     4e1:	6c                   	ins    BYTE PTR es:[edi],dx
     4e2:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     4e9:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     4ef:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     4f5:	78 2d                	js     524 <sysEnter_Vector-0x12fadc>
     4f7:	67 6e                	outs   dx,BYTE PTR ds:[si]
     4f9:	75 2f                	jne    52a <sysEnter_Vector-0x12fad6>
     4fb:	35 2e 33 2e 30       	xor    eax,0x302e332e
     500:	2f                   	das    
     501:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     508:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     50b:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     50f:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     513:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     517:	65                   	gs
     518:	2f                   	das    
     519:	2e                   	cs
     51a:	2e                   	cs
     51b:	2f                   	das    
     51c:	2e                   	cs
     51d:	2e                   	cs
     51e:	2f                   	das    
     51f:	2e                   	cs
     520:	2e                   	cs
     521:	2f                   	das    
     522:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     526:	6a 2f                	push   0x2f
     528:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     52b:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     532:	6e                   	outs   dx,BYTE PTR ds:[esi]
     533:	65                   	gs
     534:	6c                   	ins    BYTE PTR es:[edi],dx
     535:	2f                   	das    
     536:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     53d:	00 00                	add    BYTE PTR [eax],al
     53f:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     546:	01 00                	add    DWORD PTR [eax],eax
     548:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     54b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     552:	63 
     553:	2e                   	cs
     554:	68 00 02 00 00       	push   0x200
     559:	73 74                	jae    5cf <sysEnter_Vector-0x12fa31>
     55b:	64                   	fs
     55c:	64                   	fs
     55d:	65                   	gs
     55e:	66                   	data16
     55f:	2e                   	cs
     560:	68 00 02 00 00       	push   0x200
     565:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     56c:	03 00                	add    eax,DWORD PTR [eax]
     56e:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     571:	6d                   	ins    DWORD PTR es:[edi],dx
     572:	6d                   	ins    DWORD PTR es:[edi],dx
     573:	6f                   	outs   dx,DWORD PTR ds:[esi]
     574:	6e                   	outs   dx,BYTE PTR ds:[esi]
     575:	2e                   	cs
     576:	68 00 03 00 00       	push   0x300
     57b:	73 79                	jae    5f6 <sysEnter_Vector-0x12fa0a>
     57d:	73 63                	jae    5e2 <sysEnter_Vector-0x12fa1e>
     57f:	61                   	popa   
     580:	6c                   	ins    BYTE PTR es:[edi],dx
     581:	6c                   	ins    BYTE PTR es:[edi],dx
     582:	73 2e                	jae    5b2 <sysEnter_Vector-0x12fa4e>
     584:	68 00 04 00 00       	push   0x400
     589:	00 00                	add    BYTE PTR [eax],al
     58b:	05 02 68 0a 00       	add    eax,0xa6802
     590:	9f                   	lahf   
     591:	03 12                	add    edx,DWORD PTR [edx]
     593:	01 08                	add    DWORD PTR [eax],ecx
     595:	13 08                	adc    ecx,DWORD PTR [eax]
     597:	a0 5a f3 08 3d       	mov    al,ds:0x3d08f35a
     59c:	31 08                	xor    DWORD PTR [eax],ecx
     59e:	14 08                	adc    al,0x8
     5a0:	59                   	pop    ecx
     5a1:	5b                   	pop    ebx
     5a2:	f3 08 13             	repz or BYTE PTR [ebx],dl
     5a5:	31 08                	xor    DWORD PTR [eax],ecx
     5a7:	21 2f                	and    DWORD PTR [edi],ebp
     5a9:	08 d5                	or     ch,dl
     5ab:	bc 08 3d 69 08       	mov    esp,0x8693d08
     5b0:	2f                   	das    
     5b1:	75 08                	jne    5bb <sysEnter_Vector-0x12fa45>
     5b3:	83 67 75 bc          	and    DWORD PTR [edi+0x75],0xffffffbc
     5b7:	08 68 02             	or     BYTE PTR [eax+0x2],ch
     5ba:	26 13 3d 77 08 13 08 	adc    edi,DWORD PTR es:0x8130877
     5c1:	2f                   	das    
     5c2:	69 f3 d7 31 e5 08    	imul   esi,ebx,0x8e531d7
     5c8:	d7                   	xlat   BYTE PTR ds:[ebx]
     5c9:	77 f3                	ja     5be <sysEnter_Vector-0x12fa42>
     5cb:	08 3d 30 e5 08 d7    	or     BYTE PTR ds:0xd708e530,bh
     5d1:	77 f3                	ja     5c6 <sysEnter_Vector-0x12fa3a>
     5d3:	08 3d 31 08 13 08    	or     BYTE PTR ds:0x8130831,bh
     5d9:	75 5b                	jne    636 <sysEnter_Vector-0x12f9ca>
     5db:	f3 08 3d 30 08 13 08 	repz or BYTE PTR ds:0x8130830,bh
     5e2:	67 5b                	addr16 pop ebx
     5e4:	f3 08 13             	repz or BYTE PTR [ebx],dl
     5e7:	31 08                	xor    DWORD PTR [eax],ecx
     5e9:	75 68                	jne    653 <sysEnter_Vector-0x12f9ad>
     5eb:	77 bb                	ja     5a8 <sysEnter_Vector-0x12fa58>
     5ed:	08 91 bb 08 91 bb    	or     BYTE PTR [ecx-0x446ef745],dl
     5f3:	08 91 bb 08 95 67    	or     BYTE PTR [ecx+0x679508bb],dl
     5f9:	08 bc ae 08 84 08 84 	or     BYTE PTR [esi+ebp*4-0x7bf77bf8],bh
     600:	a0 08 67 08 4c       	mov    al,ds:0x4c086708
     605:	08 13                	or     BYTE PTR [ebx],dl
     607:	be 08 67 e5 08       	mov    esi,0x8e56708
     60c:	e6 75                	out    0x75,al
     60e:	5a                   	pop    edx
     60f:	08 67 08             	or     BYTE PTR [edi+0x8],ah
     612:	d7                   	xlat   BYTE PTR ds:[ebx]
     613:	08 9f 08 67 08 9f    	or     BYTE PTR [edi-0x60f798f8],bl
     619:	68 08 67 75 30       	push   0x30756708
     61e:	03 73 08             	add    esi,DWORD PTR [ebx+0x8]
     621:	3c 03                	cmp    al,0x3
     623:	10 9e a0 08 bb 08    	adc    BYTE PTR [esi+0x8bb08a0],bl
     629:	9f                   	lahf   
     62a:	08 67 08             	or     BYTE PTR [edi+0x8],ah
     62d:	9f                   	lahf   
     62e:	68 08 67 79 3d       	push   0x3d796708
     633:	5b                   	pop    ebx
     634:	08 13                	or     BYTE PTR [ebx],dl
     636:	08 2f                	or     BYTE PTR [edi],ch
     638:	5b                   	pop    ebx
     639:	f3 d7                	repz xlat BYTE PTR ds:[ebx]
     63b:	31 08                	xor    DWORD PTR [eax],ecx
     63d:	22 75 75             	and    dh,BYTE PTR [ebp+0x75]
     640:	75 83                	jne    5c5 <sysEnter_Vector-0x12fa3b>
     642:	83 08 13             	or     DWORD PTR [eax],0x13
     645:	76 08                	jbe    64f <sysEnter_Vector-0x12f9b1>
     647:	30 5a 08             	xor    BYTE PTR [edx+0x8],bl
     64a:	ca 08 91             	retf   0x9108
     64d:	08 d7                	or     bh,dl
     64f:	08 91 08 f3 08 d7    	or     BYTE PTR [ecx-0x28f70cf8],dl
     655:	c9                   	leave  
     656:	08 83 83 67 67 32    	or     BYTE PTR [ebx+0x32676783],al
     65c:	67 67 08 21          	addr32 or BYTE PTR [bx+di],ah
     660:	03 6b 08             	add    ebp,DWORD PTR [ebx+0x8]
     663:	66 03 1a             	add    bx,WORD PTR [edx]
     666:	02 22                	add    ah,BYTE PTR [edx]
     668:	01 d7                	add    edi,edx
     66a:	3d 5b f3 08 3d       	cmp    eax,0x3d08f35b
     66f:	31 08                	xor    DWORD PTR [eax],ecx
     671:	13 08                	adc    ecx,DWORD PTR [eax]
     673:	2f                   	das    
     674:	02 05 00 01 01 cc    	add    al,BYTE PTR ds:0xcc010100
     67a:	00 00                	add    BYTE PTR [eax],al
     67c:	00 02                	add    BYTE PTR [edx],al
     67e:	00 77 00             	add    BYTE PTR [edi+0x0],dh
     681:	00 00                	add    BYTE PTR [eax],al
     683:	01 01                	add    DWORD PTR [ecx],eax
     685:	fb                   	sti    
     686:	0e                   	push   cs
     687:	0d 00 01 01 01       	or     eax,0x1010100
     68c:	01 00                	add    DWORD PTR [eax],eax
     68e:	00 00                	add    BYTE PTR [eax],al
     690:	01 00                	add    DWORD PTR [eax],eax
     692:	00 01                	add    BYTE PTR [ecx],al
     694:	73 72                	jae    708 <sysEnter_Vector-0x12f8f8>
     696:	63 2f                	arpl   WORD PTR [edi],bp
     698:	69 6e 70 75 74 00 69 	imul   ebp,DWORD PTR [esi+0x70],0x69007475
     69f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6a0:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     6a4:	65                   	gs
     6a5:	2f                   	das    
     6a6:	2e                   	cs
     6a7:	2e                   	cs
     6a8:	2f                   	das    
     6a9:	2e                   	cs
     6aa:	2e                   	cs
     6ab:	2f                   	das    
     6ac:	2e                   	cs
     6ad:	2e                   	cs
     6ae:	2f                   	das    
     6af:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     6b3:	6a 2f                	push   0x2f
     6b5:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     6b8:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     6bf:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6c0:	65                   	gs
     6c1:	6c                   	ins    BYTE PTR es:[edi],dx
     6c2:	2f                   	das    
     6c3:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     6ca:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     6cd:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     6d1:	65 00 00             	add    BYTE PTR gs:[eax],al
     6d4:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     6db:	00 01                	add    BYTE PTR [ecx],al
     6dd:	00 00                	add    BYTE PTR [eax],al
     6df:	73 79                	jae    75a <sysEnter_Vector-0x12f8a6>
     6e1:	73 63                	jae    746 <sysEnter_Vector-0x12f8ba>
     6e3:	61                   	popa   
     6e4:	6c                   	ins    BYTE PTR es:[edi],dx
     6e5:	6c                   	ins    BYTE PTR es:[edi],dx
     6e6:	73 2e                	jae    716 <sysEnter_Vector-0x12f8ea>
     6e8:	68 00 02 00 00       	push   0x200
     6ed:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     6f0:	6d                   	ins    DWORD PTR es:[edi],dx
     6f1:	6f                   	outs   dx,DWORD PTR ds:[esi]
     6f2:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6f3:	2e                   	cs
     6f4:	68 00 03 00 00       	push   0x300
     6f9:	00 00                	add    BYTE PTR [eax],al
     6fb:	05 02 20 13 00       	add    eax,0x132002
     700:	9f                   	lahf   
     701:	03 0f                	add    ecx,DWORD PTR [edi]
     703:	01 d7                	add    edi,edx
     705:	08 3d 4d 08 67 68    	or     BYTE PTR ds:0x6867084d,bh
     70b:	75 4b                	jne    758 <sysEnter_Vector-0x12f8a8>
     70d:	08 3d 79 08 16 08    	or     BYTE PTR ds:0x8160879,bh
     713:	3d 67 67 9f 30       	cmp    eax,0x309f6767
     718:	6a 08                	push   0x8
     71a:	14 77                	adc    al,0x77
     71c:	ad                   	lods   eax,DWORD PTR ds:[esi]
     71d:	68 00 02 04 01       	push   0x1040200
     722:	08 67 33             	or     BYTE PTR [edi+0x33],ah
     725:	08 3d 00 02 04 01    	or     BYTE PTR ds:0x1040200,bh
     72b:	06                   	push   es
     72c:	66 06                	pushw  es
     72e:	68 ad 68 68 76       	push   0x766868ad
     733:	08 5a 00             	or     BYTE PTR [edx+0x0],bl
     736:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     739:	06                   	push   es
     73a:	ac                   	lods   al,BYTE PTR ds:[esi]
     73b:	06                   	push   es
     73c:	68 5b 00 02 04       	push   0x402005b
     741:	02 a3 2f 02 05 00    	add    ah,BYTE PTR [ebx+0x5022f]
     747:	01 01                	add    DWORD PTR [ecx],eax
     749:	b1 02                	mov    cl,0x2
     74b:	00 00                	add    BYTE PTR [eax],al
     74d:	02 00                	add    al,BYTE PTR [eax]
     74f:	e5 00                	in     eax,0x0
     751:	00 00                	add    BYTE PTR [eax],al
     753:	01 01                	add    DWORD PTR [ecx],eax
     755:	fb                   	sti    
     756:	0e                   	push   cs
     757:	0d 00 01 01 01       	or     eax,0x1010100
     75c:	01 00                	add    DWORD PTR [eax],eax
     75e:	00 00                	add    BYTE PTR [eax],al
     760:	01 00                	add    DWORD PTR [eax],eax
     762:	00 01                	add    BYTE PTR [ecx],al
     764:	73 72                	jae    7d8 <sysEnter_Vector-0x12f828>
     766:	63 00                	arpl   WORD PTR [eax],ax
     768:	2f                   	das    
     769:	68 6f 6d 65 2f       	push   0x2f656d6f
     76e:	79 6f                	jns    7df <sysEnter_Vector-0x12f821>
     770:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     777:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     77a:	73 73                	jae    7ef <sysEnter_Vector-0x12f811>
     77c:	2f                   	das    
     77d:	6c                   	ins    BYTE PTR es:[edi],dx
     77e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     785:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     78b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     791:	78 2d                	js     7c0 <sysEnter_Vector-0x12f840>
     793:	67 6e                	outs   dx,BYTE PTR ds:[si]
     795:	75 2f                	jne    7c6 <sysEnter_Vector-0x12f83a>
     797:	35 2e 33 2e 30       	xor    eax,0x302e332e
     79c:	2f                   	das    
     79d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     7a4:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     7a7:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     7ab:	65                   	gs
     7ac:	2f                   	das    
     7ad:	2e                   	cs
     7ae:	2e                   	cs
     7af:	2f                   	das    
     7b0:	2e                   	cs
     7b1:	2e                   	cs
     7b2:	2f                   	das    
     7b3:	2e                   	cs
     7b4:	2e                   	cs
     7b5:	2f                   	das    
     7b6:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     7ba:	6a 2f                	push   0x2f
     7bc:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     7bf:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     7c6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     7c7:	65                   	gs
     7c8:	6c                   	ins    BYTE PTR es:[edi],dx
     7c9:	2f                   	das    
     7ca:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     7d1:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     7d4:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     7d8:	65 00 00             	add    BYTE PTR gs:[eax],al
     7db:	6c                   	ins    BYTE PTR es:[edi],dx
     7dc:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     7e3:	4f                   	dec    edi
     7e4:	53                   	push   ebx
     7e5:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     7e8:	01 00                	add    DWORD PTR [eax],eax
     7ea:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     7ed:	64                   	fs
     7ee:	61                   	popa   
     7ef:	72 67                	jb     858 <sysEnter_Vector-0x12f7a8>
     7f1:	2e                   	cs
     7f2:	68 00 02 00 00       	push   0x200
     7f7:	73 74                	jae    86d <sysEnter_Vector-0x12f793>
     7f9:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     800:	63 
     801:	2e                   	cs
     802:	68 00 02 00 00       	push   0x200
     807:	73 74                	jae    87d <sysEnter_Vector-0x12f783>
     809:	64                   	fs
     80a:	64                   	fs
     80b:	65                   	gs
     80c:	66                   	data16
     80d:	2e                   	cs
     80e:	68 00 02 00 00       	push   0x200
     813:	73 79                	jae    88e <sysEnter_Vector-0x12f772>
     815:	73 63                	jae    87a <sysEnter_Vector-0x12f786>
     817:	61                   	popa   
     818:	6c                   	ins    BYTE PTR es:[edi],dx
     819:	6c                   	ins    BYTE PTR es:[edi],dx
     81a:	73 2e                	jae    84a <sysEnter_Vector-0x12f7b6>
     81c:	68 00 03 00 00       	push   0x300
     821:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     824:	6d                   	ins    DWORD PTR es:[edi],dx
     825:	6f                   	outs   dx,DWORD PTR ds:[esi]
     826:	6e                   	outs   dx,BYTE PTR ds:[esi]
     827:	2e                   	cs
     828:	68 00 04 00 00       	push   0x400
     82d:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     834:	04 00                	add    al,0x0
     836:	00 00                	add    BYTE PTR [eax],al
     838:	00 05 02 8c 14 00    	add    BYTE PTR ds:0x148c02,al
     83e:	9f                   	lahf   
     83f:	03 11                	add    edx,DWORD PTR [ecx]
     841:	01 08                	add    DWORD PTR [eax],ecx
     843:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
     846:	67 3d 77 08 21 75    	addr16 cmp eax,0x75210877
     84c:	08 83 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],al
     852:	75 08                	jne    85c <sysEnter_Vector-0x12f7a4>
     854:	9f                   	lahf   
     855:	3d 77 08 21 75       	cmp    eax,0x75210877
     85a:	08 bb 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],bh
     860:	75 08                	jne    86a <sysEnter_Vector-0x12f796>
     862:	d7                   	xlat   BYTE PTR ds:[ebx]
     863:	3d 77 08 21 08       	cmp    eax,0x8210877
     868:	67 d8 59 bd          	fcomp  DWORD PTR [bx+di-0x43]
     86c:	c9                   	leave  
     86d:	c9                   	leave  
     86e:	08 67 75             	or     BYTE PTR [edi+0x75],ah
     871:	08 91 08 6a 2d 08    	or     BYTE PTR [ecx+0x82d6a08],dl
     877:	21 69 08             	and    DWORD PTR [ecx+0x8],ebp
     87a:	21 59 59             	and    DWORD PTR [ecx+0x59],ebx
     87d:	77 08                	ja     887 <sysEnter_Vector-0x12f779>
     87f:	22 68 08             	and    ch,BYTE PTR [eax+0x8]
     882:	c9                   	leave  
     883:	08 83 59 5b 08 22    	or     BYTE PTR [ebx+0x22085b59],al
     889:	68 08 c9 08 83       	push   0x8308c908
     88e:	5b                   	pop    ebx
     88f:	08 22                	or     BYTE PTR [edx],ah
     891:	68 08 c9 08 83       	push   0x8308c908
     896:	5b                   	pop    ebx
     897:	f4                   	hlt    
     898:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     89c:	31 f4                	xor    esp,esi
     89e:	68 08 91 5a 31       	push   0x315a9108
     8a3:	f4                   	hlt    
     8a4:	68 08 91 5a 31       	push   0x315a9108
     8a9:	08 21                	or     BYTE PTR [ecx],ah
     8ab:	08 75 02             	or     BYTE PTR [ebp+0x2],dh
     8ae:	57                   	push   edi
     8af:	13 77 08             	adc    esi,DWORD PTR [edi+0x8]
     8b2:	21 02                	and    DWORD PTR [edx],eax
     8b4:	57                   	push   edi
     8b5:	13 77 08             	adc    esi,DWORD PTR [edi+0x8]
     8b8:	21 02                	and    DWORD PTR [edx],eax
     8ba:	57                   	push   edi
     8bb:	14 77                	adc    al,0x77
     8bd:	c9                   	leave  
     8be:	c9                   	leave  
     8bf:	3f                   	aas    
     8c0:	c9                   	leave  
     8c1:	08 83 3f c9 08 4b    	or     BYTE PTR [ebx+0x4b08c93f],al
     8c7:	3f                   	aas    
     8c8:	f3 76 a1             	repz jbe 86c <sysEnter_Vector-0x12f794>
     8cb:	31 f3                	xor    ebx,esi
     8cd:	75 08                	jne    8d7 <sysEnter_Vector-0x12f729>
     8cf:	67 08 83 3d 31       	or     BYTE PTR [bp+di+0x313d],al
     8d4:	08 21                	or     BYTE PTR [ecx],ah
     8d6:	d8 bc 08 31 08 75 68 	fdivr  DWORD PTR [eax+ecx*1+0x68750831]
     8dd:	67 02 22             	add    ah,BYTE PTR [bp+si]
     8e0:	14 08                	adc    al,0x8
     8e2:	ae                   	scas   al,BYTE PTR es:[edi]
     8e3:	4c                   	dec    esp
     8e4:	ca 08 4b             	retf   0x4b08
     8e7:	91                   	xchg   ecx,eax
     8e8:	67 bc 08 83 08 75    	addr16 mov esp,0x75088308
     8ee:	67 02 2f             	add    ch,BYTE PTR [bx]
     8f1:	14 00                	adc    al,0x0
     8f3:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     8f6:	02 31                	add    dh,BYTE PTR [ecx]
     8f8:	13 00                	adc    eax,DWORD PTR [eax]
     8fa:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     8fd:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     903:	bb 00 02 04 02       	mov    ebx,0x2040200
     908:	03 76 4a             	add    esi,DWORD PTR [esi+0x4a]
     90b:	00 02                	add    BYTE PTR [edx],al
     90d:	04 01                	add    al,0x1
     90f:	06                   	push   es
     910:	4a                   	dec    edx
     911:	06                   	push   es
     912:	03 0c ba             	add    ecx,DWORD PTR [edx+edi*4]
     915:	08 91 08 b0 3f 5b    	or     BYTE PTR [ecx+0x5b3fb008],dl
     91b:	f3 75 08             	repz jne 926 <sysEnter_Vector-0x12f6da>
     91e:	67 08 ad 3d 31       	or     BYTE PTR [di+0x313d],ch
     923:	c9                   	leave  
     924:	c9                   	leave  
     925:	32 c9                	xor    cl,cl
     927:	f3 3f                	repz aas 
     929:	c9                   	leave  
     92a:	08 13                	or     BYTE PTR [ebx],dl
     92c:	31 f5                	xor    ebp,esi
     92e:	75 76                	jne    9a6 <sysEnter_Vector-0x12f65a>
     930:	ad                   	lods   eax,DWORD PTR ds:[esi]
     931:	bb 08 68 08 5c       	mov    ebx,0x5c086808
     936:	67 75 91             	addr16 jne 8ca <sysEnter_Vector-0x12f736>
     939:	5a                   	pop    edx
     93a:	75 67                	jne    9a3 <sysEnter_Vector-0x12f65d>
     93c:	31 67 67             	xor    DWORD PTR [edi+0x67],esp
     93f:	08 91 76 31 08 21    	or     BYTE PTR [ecx+0x21083176],dl
     945:	67 08 91 76 03       	or     BYTE PTR [bx+di+0x376],dl
     94a:	66 2e 03 12          	add    dx,WORD PTR cs:[edx]
     94e:	3c 44                	cmp    al,0x44
     950:	00 02                	add    BYTE PTR [edx],al
     952:	04 02                	add    al,0x2
     954:	03 61 20             	add    esp,DWORD PTR [ecx+0x20]
     957:	00 02                	add    BYTE PTR [edx],al
     959:	04 01                	add    al,0x1
     95b:	06                   	push   es
     95c:	4a                   	dec    edx
     95d:	00 02                	add    BYTE PTR [edx],al
     95f:	04 03                	add    al,0x3
     961:	82                   	(bad)  
     962:	06                   	push   es
     963:	03 23                	add    esp,DWORD PTR [ebx]
     965:	d6                   	(bad)  
     966:	00 02                	add    BYTE PTR [edx],al
     968:	04 01                	add    al,0x1
     96a:	06                   	push   es
     96b:	66 06                	pushw  es
     96d:	83 08 92             	or     DWORD PTR [eax],0xffffff92
     970:	3d 31 c9 08 13       	cmp    eax,0x1308c931
     975:	31 08                	xor    DWORD PTR [eax],ecx
     977:	5b                   	pop    ebx
     978:	08 9f d7 92 08 91    	or     BYTE PTR [edi-0x6ef76d29],bl
     97e:	08 23                	or     BYTE PTR [ebx],ah
     980:	08 bb 08 75 00 02    	or     BYTE PTR [ebx+0x2007508],bh
     986:	04 01                	add    al,0x1
     988:	06                   	push   es
     989:	66 06                	pushw  es
     98b:	84 67 08             	test   BYTE PTR [edi+0x8],ah
     98e:	f3 c9                	repz leave 
     990:	84 4c c9 00          	test   BYTE PTR [ecx+ecx*8+0x0],cl
     994:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     997:	06                   	push   es
     998:	66 06                	pushw  es
     99a:	9f                   	lahf   
     99b:	4c                   	dec    esp
     99c:	00 02                	add    BYTE PTR [edx],al
     99e:	04 01                	add    al,0x1
     9a0:	06                   	push   es
     9a1:	66 06                	pushw  es
     9a3:	d8 02                	fadd   DWORD PTR [edx]
     9a5:	27                   	daa    
     9a6:	13 ad 91 bc 08 83    	adc    ebp,DWORD PTR [ebp-0x7cf7436f]
     9ac:	08 bb 00 02 04 01    	or     BYTE PTR [ebx+0x1040200],bh
     9b2:	06                   	push   es
     9b3:	9e                   	sahf   
     9b4:	06                   	push   es
     9b5:	84 67 08             	test   BYTE PTR [edi+0x8],ah
     9b8:	f3 c9                	repz leave 
     9ba:	62 5f 03             	bound  ebx,QWORD PTR [edi+0x3]
     9bd:	79 02                	jns    9c1 <sysEnter_Vector-0x12f63f>
     9bf:	34 01                	xor    al,0x1
     9c1:	03 0c 58             	add    ecx,DWORD PTR [eax+ebx*2]
     9c4:	08 75 67             	or     BYTE PTR [ebp+0x67],dh
     9c7:	02 2f                	add    ch,BYTE PTR [edi]
     9c9:	14 02                	adc    al,0x2
     9cb:	31 13                	xor    DWORD PTR [ebx],edx
     9cd:	00 02                	add    BYTE PTR [edx],al
     9cf:	04 02                	add    al,0x2
     9d1:	08 bc 00 02 04 02 bb 	or     BYTE PTR [eax+eax*1-0x44fdfbfe],bh
     9d8:	00 02                	add    BYTE PTR [edx],al
     9da:	04 02                	add    al,0x2
     9dc:	03 67 74             	add    esp,DWORD PTR [edi+0x74]
     9df:	00 02                	add    BYTE PTR [edx],al
     9e1:	04 01                	add    al,0x1
     9e3:	06                   	push   es
     9e4:	4a                   	dec    edx
     9e5:	06                   	push   es
     9e6:	03 1b                	add    ebx,DWORD PTR [ebx]
     9e8:	d6                   	(bad)  
     9e9:	3d 77 f3 08 13       	cmp    eax,0x1308f377
     9ee:	31 c9                	xor    ecx,ecx
     9f0:	08 3d 31 c9 c9 3f    	or     BYTE PTR ds:0x3fc9c931,bh
     9f6:	c9                   	leave  
     9f7:	08 13                	or     BYTE PTR [ebx],dl
     9f9:	02 02                	add    al,BYTE PTR [edx]
     9fb:	00 01                	add    BYTE PTR [ecx],al
     9fd:	01 f7                	add    edi,esi
     9ff:	00 00                	add    BYTE PTR [eax],al
     a01:	00 02                	add    BYTE PTR [edx],al
     a03:	00 d8                	add    al,bl
     a05:	00 00                	add    BYTE PTR [eax],al
     a07:	00 01                	add    BYTE PTR [ecx],al
     a09:	01 fb                	add    ebx,edi
     a0b:	0e                   	push   cs
     a0c:	0d 00 01 01 01       	or     eax,0x1010100
     a11:	01 00                	add    DWORD PTR [eax],eax
     a13:	00 00                	add    BYTE PTR [eax],al
     a15:	01 00                	add    DWORD PTR [eax],eax
     a17:	00 01                	add    BYTE PTR [ecx],al
     a19:	73 72                	jae    a8d <sysEnter_Vector-0x12f573>
     a1b:	63 00                	arpl   WORD PTR [eax],ax
     a1d:	2f                   	das    
     a1e:	68 6f 6d 65 2f       	push   0x2f656d6f
     a23:	79 6f                	jns    a94 <sysEnter_Vector-0x12f56c>
     a25:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     a2c:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     a2f:	73 73                	jae    aa4 <sysEnter_Vector-0x12f55c>
     a31:	2f                   	das    
     a32:	6c                   	ins    BYTE PTR es:[edi],dx
     a33:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     a3a:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     a40:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     a46:	78 2d                	js     a75 <sysEnter_Vector-0x12f58b>
     a48:	67 6e                	outs   dx,BYTE PTR ds:[si]
     a4a:	75 2f                	jne    a7b <sysEnter_Vector-0x12f585>
     a4c:	35 2e 33 2e 30       	xor    eax,0x302e332e
     a51:	2f                   	das    
     a52:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     a59:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     a5c:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     a60:	65                   	gs
     a61:	2f                   	das    
     a62:	2e                   	cs
     a63:	2e                   	cs
     a64:	2f                   	das    
     a65:	2e                   	cs
     a66:	2e                   	cs
     a67:	2f                   	das    
     a68:	2e                   	cs
     a69:	2e                   	cs
     a6a:	2f                   	das    
     a6b:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     a6f:	6a 2f                	push   0x2f
     a71:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     a74:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     a7b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     a7c:	65                   	gs
     a7d:	6c                   	ins    BYTE PTR es:[edi],dx
     a7e:	2f                   	das    
     a7f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     a86:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     a89:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     a8d:	65 00 00             	add    BYTE PTR gs:[eax],al
     a90:	6c                   	ins    BYTE PTR es:[edi],dx
     a91:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
     a98:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     a9b:	01 00                	add    DWORD PTR [eax],eax
     a9d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     aa0:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     aa7:	63 
     aa8:	2e                   	cs
     aa9:	68 00 02 00 00       	push   0x200
     aae:	73 74                	jae    b24 <sysEnter_Vector-0x12f4dc>
     ab0:	64                   	fs
     ab1:	64                   	fs
     ab2:	65                   	gs
     ab3:	66                   	data16
     ab4:	2e                   	cs
     ab5:	68 00 02 00 00       	push   0x200
     aba:	73 79                	jae    b35 <sysEnter_Vector-0x12f4cb>
     abc:	73 63                	jae    b21 <sysEnter_Vector-0x12f4df>
     abe:	61                   	popa   
     abf:	6c                   	ins    BYTE PTR es:[edi],dx
     ac0:	6c                   	ins    BYTE PTR es:[edi],dx
     ac1:	73 2e                	jae    af1 <sysEnter_Vector-0x12f50f>
     ac3:	68 00 03 00 00       	push   0x300
     ac8:	74 79                	je     b43 <sysEnter_Vector-0x12f4bd>
     aca:	70 65                	jo     b31 <sysEnter_Vector-0x12f4cf>
     acc:	73 2e                	jae    afc <sysEnter_Vector-0x12f504>
     ace:	68 00 04 00 00       	push   0x400
     ad3:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     ad6:	6d                   	ins    DWORD PTR es:[edi],dx
     ad7:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ad8:	6e                   	outs   dx,BYTE PTR ds:[esi]
     ad9:	2e                   	cs
     ada:	68 00 04 00 00       	push   0x400
     adf:	00 00                	add    BYTE PTR [eax],al
     ae1:	05 02 18 22 00       	add    eax,0x221802
     ae6:	9f                   	lahf   
     ae7:	03 0d 01 08 14 ad    	add    ecx,DWORD PTR ds:0xad140801
     aed:	bb bb bb bb bc       	mov    ebx,0xbcbbbbbb
     af2:	08 59 02             	or     BYTE PTR [ecx+0x2],bl
     af5:	05 00 01 01 d2       	add    eax,0xd2010100
     afa:	01 00                	add    DWORD PTR [eax],eax
     afc:	00 02                	add    BYTE PTR [edx],al
     afe:	00 d7                	add    bh,dl
     b00:	00 00                	add    BYTE PTR [eax],al
     b02:	00 01                	add    BYTE PTR [ecx],al
     b04:	01 fb                	add    ebx,edi
     b06:	0e                   	push   cs
     b07:	0d 00 01 01 01       	or     eax,0x1010100
     b0c:	01 00                	add    DWORD PTR [eax],eax
     b0e:	00 00                	add    BYTE PTR [eax],al
     b10:	01 00                	add    DWORD PTR [eax],eax
     b12:	00 01                	add    BYTE PTR [ecx],al
     b14:	73 72                	jae    b88 <sysEnter_Vector-0x12f478>
     b16:	63 00                	arpl   WORD PTR [eax],ax
     b18:	2f                   	das    
     b19:	68 6f 6d 65 2f       	push   0x2f656d6f
     b1e:	79 6f                	jns    b8f <sysEnter_Vector-0x12f471>
     b20:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     b27:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     b2a:	73 73                	jae    b9f <sysEnter_Vector-0x12f461>
     b2c:	2f                   	das    
     b2d:	6c                   	ins    BYTE PTR es:[edi],dx
     b2e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     b35:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     b3b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     b41:	78 2d                	js     b70 <sysEnter_Vector-0x12f490>
     b43:	67 6e                	outs   dx,BYTE PTR ds:[si]
     b45:	75 2f                	jne    b76 <sysEnter_Vector-0x12f48a>
     b47:	35 2e 33 2e 30       	xor    eax,0x302e332e
     b4c:	2f                   	das    
     b4d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b54:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     b57:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     b5b:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     b5f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     b63:	65                   	gs
     b64:	2f                   	das    
     b65:	2e                   	cs
     b66:	2e                   	cs
     b67:	2f                   	das    
     b68:	2e                   	cs
     b69:	2e                   	cs
     b6a:	2f                   	das    
     b6b:	2e                   	cs
     b6c:	2e                   	cs
     b6d:	2f                   	das    
     b6e:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     b72:	6a 2f                	push   0x2f
     b74:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     b77:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     b7e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b7f:	65                   	gs
     b80:	6c                   	ins    BYTE PTR es:[edi],dx
     b81:	2f                   	das    
     b82:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b89:	00 00                	add    BYTE PTR [eax],al
     b8b:	6d                   	ins    DWORD PTR es:[edi],dx
     b8c:	61                   	popa   
     b8d:	6c                   	ins    BYTE PTR es:[edi],dx
     b8e:	6c                   	ins    BYTE PTR es:[edi],dx
     b8f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b90:	63 2e                	arpl   WORD PTR [esi],bp
     b92:	63 00                	arpl   WORD PTR [eax],ax
     b94:	01 00                	add    DWORD PTR [eax],eax
     b96:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     b99:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     ba0:	63 
     ba1:	2e                   	cs
     ba2:	68 00 02 00 00       	push   0x200
     ba7:	73 74                	jae    c1d <sysEnter_Vector-0x12f3e3>
     ba9:	64                   	fs
     baa:	64                   	fs
     bab:	65                   	gs
     bac:	66                   	data16
     bad:	2e                   	cs
     bae:	68 00 02 00 00       	push   0x200
     bb3:	6d                   	ins    DWORD PTR es:[edi],dx
     bb4:	61                   	popa   
     bb5:	6c                   	ins    BYTE PTR es:[edi],dx
     bb6:	6c                   	ins    BYTE PTR es:[edi],dx
     bb7:	6f                   	outs   dx,DWORD PTR ds:[esi]
     bb8:	63 2e                	arpl   WORD PTR [esi],bp
     bba:	68 00 03 00 00       	push   0x300
     bbf:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     bc2:	6d                   	ins    DWORD PTR es:[edi],dx
     bc3:	6f                   	outs   dx,DWORD PTR ds:[esi]
     bc4:	6e                   	outs   dx,BYTE PTR ds:[esi]
     bc5:	2e                   	cs
     bc6:	68 00 03 00 00       	push   0x300
     bcb:	73 79                	jae    c46 <sysEnter_Vector-0x12f3ba>
     bcd:	73 63                	jae    c32 <sysEnter_Vector-0x12f3ce>
     bcf:	61                   	popa   
     bd0:	6c                   	ins    BYTE PTR es:[edi],dx
     bd1:	6c                   	ins    BYTE PTR es:[edi],dx
     bd2:	73 2e                	jae    c02 <sysEnter_Vector-0x12f3fe>
     bd4:	68 00 04 00 00       	push   0x400
     bd9:	00 00                	add    BYTE PTR [eax],al
     bdb:	05 02 8c 22 00       	add    eax,0x228c02
     be0:	9f                   	lahf   
     be1:	03 15 01 08 21 02    	add    edx,DWORD PTR ds:0x2210801
     be7:	24 13                	and    al,0x13
     be9:	bb bb bc 69 f5       	mov    ebx,0xf569bcbb
     bee:	92                   	xchg   edx,eax
     bef:	08 85 08 67 00 02    	or     BYTE PTR [ebp+0x2006708],al
     bf5:	04 01                	add    al,0x1
     bf7:	06                   	push   es
     bf8:	66 06                	pushw  es
     bfa:	bc f5 91 76 5b       	mov    esp,0x5b7691f5
     bff:	59                   	pop    ecx
     c00:	31 08                	xor    DWORD PTR [eax],ecx
     c02:	15 00 02 04 01       	adc    eax,0x1040200
     c07:	06                   	push   es
     c08:	e4 06                	in     al,0x6
     c0a:	e7 68                	out    0x68,eax
     c0c:	93                   	xchg   ebx,eax
     c0d:	ca 08 3d             	retf   0x3d08
     c10:	30 03                	xor    BYTE PTR [ebx],al
     c12:	74 90                	je     ba4 <sysEnter_Vector-0x12f45c>
     c14:	3f                   	aas    
     c15:	03 0e                	add    ecx,DWORD PTR [esi]
     c17:	20 5b f3             	and    BYTE PTR [ebx-0xd],bl
     c1a:	af                   	scas   eax,DWORD PTR es:[edi]
     c1b:	00 02                	add    BYTE PTR [edx],al
     c1d:	04 01                	add    al,0x1
     c1f:	06                   	push   es
     c20:	d6                   	(bad)  
     c21:	00 02                	add    BYTE PTR [edx],al
     c23:	04 02                	add    al,0x2
     c25:	ac                   	lods   al,BYTE PTR ds:[esi]
     c26:	06                   	push   es
     c27:	c9                   	leave  
     c28:	59                   	pop    ecx
     c29:	9f                   	lahf   
     c2a:	93                   	xchg   ebx,eax
     c2b:	00 02                	add    BYTE PTR [edx],al
     c2d:	04 01                	add    al,0x1
     c2f:	06                   	push   es
     c30:	c8 00 02 04          	enter  0x200,0x4
     c34:	02 9e 06 ca 59 31    	add    bl,BYTE PTR [esi+0x3159ca06]
     c3a:	08 14 67             	or     BYTE PTR [edi+eiz*2],dl
     c3d:	30 08                	xor    BYTE PTR [eax],cl
     c3f:	22 00                	and    al,BYTE PTR [eax]
     c41:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     c44:	08 3e                	or     BYTE PTR [esi],bh
     c46:	30 ca                	xor    dl,cl
     c48:	00 02                	add    BYTE PTR [edx],al
     c4a:	04 02                	add    al,0x2
     c4c:	08 3e                	or     BYTE PTR [esi],bh
     c4e:	30 03                	xor    BYTE PTR [ebx],al
     c50:	72 90                	jb     be2 <sysEnter_Vector-0x12f41e>
     c52:	00 02                	add    BYTE PTR [edx],al
     c54:	04 01                	add    al,0x1
     c56:	06                   	push   es
     c57:	c8 06 03 11          	enter  0x306,0x11
     c5b:	ac                   	lods   al,BYTE PTR ds:[esi]
     c5c:	69 08 25 75 69 67    	imul   ecx,DWORD PTR [eax],0x67697525
     c62:	75 08                	jne    c6c <sysEnter_Vector-0x12f394>
     c64:	91                   	xchg   ecx,eax
     c65:	bc 08 13 68 75       	mov    esp,0x75681308
     c6a:	08 13                	or     BYTE PTR [ebx],dl
     c6c:	02 37                	add    dh,BYTE PTR [edi]
     c6e:	13 b0 08 13 08 91    	adc    esi,DWORD PTR [eax-0x6ef7ecf8]
     c74:	a0 bb 08 67 08       	mov    al,ds:0x86708bb
     c79:	5a                   	pop    edx
     c7a:	08 3d 08 e5 f3 02    	or     BYTE PTR ds:0x2f3e508,bh
     c80:	26 13 bc ad ad 08 e7 	adc    edi,DWORD PTR es:[ebp+ebp*4+0x8e708ad]
     c87:	08 
     c88:	e5 ad                	in     eax,0xad
     c8a:	91                   	xchg   ecx,eax
     c8b:	91                   	xchg   ecx,eax
     c8c:	75 08                	jne    c96 <sysEnter_Vector-0x12f36a>
     c8e:	13 a0 bb bd 08 e5    	adc    esp,DWORD PTR [eax-0x1af74245]
     c94:	91                   	xchg   ecx,eax
     c95:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
     c98:	91                   	xchg   ecx,eax
     c99:	91                   	xchg   ecx,eax
     c9a:	3d 5b f3 d7 31       	cmp    eax,0x31d7f35b
     c9f:	08 22                	or     BYTE PTR [edx],ah
     ca1:	08 93 68 92 67 08    	or     BYTE PTR [ebx+0x8679268],dl
     ca7:	67 00 02             	add    BYTE PTR [bp+si],al
     caa:	04 01                	add    al,0x1
     cac:	06                   	push   es
     cad:	66 06                	pushw  es
     caf:	ad                   	lods   eax,DWORD PTR ds:[esi]
     cb0:	84 67 77             	test   BYTE PTR [edi+0x77],ah
     cb3:	08 13                	or     BYTE PTR [ebx],dl
     cb5:	02 24 17             	add    ah,BYTE PTR [edi+edx*1]
     cb8:	08 e5                	or     ch,ah
     cba:	08 93 d7 3d 5b f3    	or     BYTE PTR [ebx-0xca4c229],dl
     cc0:	08 13                	or     BYTE PTR [ebx],dl
     cc2:	31 f3                	xor    ebx,esi
     cc4:	d7                   	xlat   BYTE PTR ds:[ebx]
     cc5:	3f                   	aas    
     cc6:	08 13                	or     BYTE PTR [ebx],dl
     cc8:	08 9f 02 06 00 01    	or     BYTE PTR [edi+0x1000602],bl
     cce:	01 d7                	add    edi,edx
     cd0:	00 00                	add    BYTE PTR [eax],al
     cd2:	00 02                	add    BYTE PTR [edx],al
     cd4:	00 90 00 00 00 01    	add    BYTE PTR [eax+0x1000000],dl
     cda:	01 fb                	add    ebx,edi
     cdc:	0e                   	push   cs
     cdd:	0d 00 01 01 01       	or     eax,0x1010100
     ce2:	01 00                	add    DWORD PTR [eax],eax
     ce4:	00 00                	add    BYTE PTR [eax],al
     ce6:	01 00                	add    DWORD PTR [eax],eax
     ce8:	00 01                	add    BYTE PTR [ecx],al
     cea:	73 72                	jae    d5e <sysEnter_Vector-0x12f2a2>
     cec:	63 00                	arpl   WORD PTR [eax],ax
     cee:	2f                   	das    
     cef:	68 6f 6d 65 2f       	push   0x2f656d6f
     cf4:	79 6f                	jns    d65 <sysEnter_Vector-0x12f29b>
     cf6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     cfd:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     d00:	73 73                	jae    d75 <sysEnter_Vector-0x12f28b>
     d02:	2f                   	das    
     d03:	6c                   	ins    BYTE PTR es:[edi],dx
     d04:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     d0b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     d11:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     d17:	78 2d                	js     d46 <sysEnter_Vector-0x12f2ba>
     d19:	67 6e                	outs   dx,BYTE PTR ds:[si]
     d1b:	75 2f                	jne    d4c <sysEnter_Vector-0x12f2b4>
     d1d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     d22:	2f                   	das    
     d23:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d2a:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     d2d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     d31:	65 00 00             	add    BYTE PTR gs:[eax],al
     d34:	6d                   	ins    DWORD PTR es:[edi],dx
     d35:	65                   	gs
     d36:	6d                   	ins    DWORD PTR es:[edi],dx
     d37:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     d3a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     d3d:	01 00                	add    DWORD PTR [eax],eax
     d3f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     d42:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     d49:	63 
     d4a:	2e                   	cs
     d4b:	68 00 02 00 00       	push   0x200
     d50:	73 74                	jae    dc6 <sysEnter_Vector-0x12f23a>
     d52:	64                   	fs
     d53:	64                   	fs
     d54:	65                   	gs
     d55:	66                   	data16
     d56:	2e                   	cs
     d57:	68 00 02 00 00       	push   0x200
     d5c:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     d5f:	6d                   	ins    DWORD PTR es:[edi],dx
     d60:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d61:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d62:	2e                   	cs
     d63:	68 00 03 00 00       	push   0x300
     d68:	00 00                	add    BYTE PTR [eax],al
     d6a:	05 02 50 29 00       	add    eax,0x295002
     d6f:	9f                   	lahf   
     d70:	03 0b                	add    ecx,DWORD PTR [ebx]
     d72:	01 f5                	add    ebp,esi
     d74:	d7                   	xlat   BYTE PTR ds:[ebx]
     d75:	d7                   	xlat   BYTE PTR ds:[ebx]
     d76:	68 91 67 68 83       	push   0x83686791
     d7b:	91                   	xchg   ecx,eax
     d7c:	91                   	xchg   ecx,eax
     d7d:	2f                   	das    
     d7e:	08 1f                	or     BYTE PTR [edi],bl
     d80:	e8 08 57 ca 84       	call   84ca648d <sysEnter_Vector+0x84b7648d>
     d85:	68 83 67 68 83       	push   0x83686783
     d8a:	91                   	xchg   ecx,eax
     d8b:	91                   	xchg   ecx,eax
     d8c:	2f                   	das    
     d8d:	08 1f                	or     BYTE PTR [edi],bl
     d8f:	e8 08 57 ca 5c       	call   5cca649c <sysEnter_Vector+0x5cb7649c>
     d94:	67 68 83 67 67 2f    	addr16 push 0x2f676783
     d9a:	08 2d e8 08 65 ca    	or     BYTE PTR ds:0xca6508e8,ch
     da0:	3e                   	ds
     da1:	31 c9                	xor    ecx,ecx
     da3:	08 13                	or     BYTE PTR [ebx],dl
     da5:	02 02                	add    al,BYTE PTR [edx]
     da7:	00 01                	add    BYTE PTR [ecx],al
     da9:	01 ba 00 00 00 02    	add    DWORD PTR [edx+0x2000000],edi
     daf:	00 90 00 00 00 01    	add    BYTE PTR [eax+0x1000000],dl
     db5:	01 fb                	add    ebx,edi
     db7:	0e                   	push   cs
     db8:	0d 00 01 01 01       	or     eax,0x1010100
     dbd:	01 00                	add    DWORD PTR [eax],eax
     dbf:	00 00                	add    BYTE PTR [eax],al
     dc1:	01 00                	add    DWORD PTR [eax],eax
     dc3:	00 01                	add    BYTE PTR [ecx],al
     dc5:	73 72                	jae    e39 <sysEnter_Vector-0x12f1c7>
     dc7:	63 00                	arpl   WORD PTR [eax],ax
     dc9:	2f                   	das    
     dca:	68 6f 6d 65 2f       	push   0x2f656d6f
     dcf:	79 6f                	jns    e40 <sysEnter_Vector-0x12f1c0>
     dd1:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     dd8:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     ddb:	73 73                	jae    e50 <sysEnter_Vector-0x12f1b0>
     ddd:	2f                   	das    
     dde:	6c                   	ins    BYTE PTR es:[edi],dx
     ddf:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     de6:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     dec:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     df2:	78 2d                	js     e21 <sysEnter_Vector-0x12f1df>
     df4:	67 6e                	outs   dx,BYTE PTR ds:[si]
     df6:	75 2f                	jne    e27 <sysEnter_Vector-0x12f1d9>
     df8:	35 2e 33 2e 30       	xor    eax,0x302e332e
     dfd:	2f                   	das    
     dfe:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     e05:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     e08:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     e0c:	65 00 00             	add    BYTE PTR gs:[eax],al
     e0f:	6d                   	ins    DWORD PTR es:[edi],dx
     e10:	65                   	gs
     e11:	6d                   	ins    DWORD PTR es:[edi],dx
     e12:	73 65                	jae    e79 <sysEnter_Vector-0x12f187>
     e14:	74 2e                	je     e44 <sysEnter_Vector-0x12f1bc>
     e16:	63 00                	arpl   WORD PTR [eax],ax
     e18:	01 00                	add    DWORD PTR [eax],eax
     e1a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     e1d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     e24:	63 
     e25:	2e                   	cs
     e26:	68 00 02 00 00       	push   0x200
     e2b:	73 74                	jae    ea1 <sysEnter_Vector-0x12f15f>
     e2d:	64                   	fs
     e2e:	64                   	fs
     e2f:	65                   	gs
     e30:	66                   	data16
     e31:	2e                   	cs
     e32:	68 00 02 00 00       	push   0x200
     e37:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     e3a:	6d                   	ins    DWORD PTR es:[edi],dx
     e3b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e3c:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e3d:	2e                   	cs
     e3e:	68 00 03 00 00       	push   0x300
     e43:	00 00                	add    BYTE PTR [eax],al
     e45:	05 02 0c 2b 00       	add    eax,0x2b0c02
     e4a:	9f                   	lahf   
     e4b:	1a f3                	sbb    dh,bl
     e4d:	67 67 08 83 67 08    	addr32 or BYTE PTR [bp+di+0x867],al
     e53:	ca 9f 2f             	retf   0x2f9f
     e56:	d5 bd                	aad    0xbd
     e58:	9f                   	lahf   
     e59:	2f                   	das    
     e5a:	f1                   	icebp  
     e5b:	bf d5 cb 3d 31       	mov    edi,0x313dcbd5
     e60:	c9                   	leave  
     e61:	08 13                	or     BYTE PTR [ebx],dl
     e63:	02 02                	add    al,BYTE PTR [edx]
     e65:	00 01                	add    BYTE PTR [ecx],al
     e67:	01 51 00             	add    DWORD PTR [ecx+0x0],edx
     e6a:	00 00                	add    BYTE PTR [eax],al
     e6c:	02 00                	add    al,BYTE PTR [eax]
     e6e:	23 00                	and    eax,DWORD PTR [eax]
     e70:	00 00                	add    BYTE PTR [eax],al
     e72:	01 01                	add    DWORD PTR [ecx],eax
     e74:	fb                   	sti    
     e75:	0e                   	push   cs
     e76:	0d 00 01 01 01       	or     eax,0x1010100
     e7b:	01 00                	add    DWORD PTR [eax],eax
     e7d:	00 00                	add    BYTE PTR [eax],al
     e7f:	01 00                	add    DWORD PTR [eax],eax
     e81:	00 01                	add    BYTE PTR [ecx],al
     e83:	73 72                	jae    ef7 <sysEnter_Vector-0x12f109>
     e85:	63 00                	arpl   WORD PTR [eax],ax
     e87:	00 6d 6f             	add    BYTE PTR [ebp+0x6f],ch
     e8a:	64                   	fs
     e8b:	66                   	data16
     e8c:	2e                   	cs
     e8d:	61                   	popa   
     e8e:	73 6d                	jae    efd <sysEnter_Vector-0x12f103>
     e90:	00 01                	add    BYTE PTR [ecx],al
     e92:	00 00                	add    BYTE PTR [eax],al
     e94:	00 00                	add    BYTE PTR [eax],al
     e96:	05 02 f4 2b 00       	add    eax,0x2bf402
     e9b:	9f                   	lahf   
     e9c:	03 0d 01 21 2f 21    	add    ecx,DWORD PTR ds:0x212f2101
     ea2:	3d 3d 2f 2f 2f       	cmp    eax,0x2f2f2f3d
     ea7:	3d 75 2f 21 2f       	cmp    eax,0x2f212f75
     eac:	2f                   	das    
     ead:	2f                   	das    
     eae:	2f                   	das    
     eaf:	21 2f                	and    DWORD PTR [edi],ebp
     eb1:	2f                   	das    
     eb2:	2f                   	das    
     eb3:	2f                   	das    
     eb4:	2f                   	das    
     eb5:	21 2f                	and    DWORD PTR [edi],ebp
     eb7:	21 02                	and    DWORD PTR [edx],eax
     eb9:	01 00                	add    DWORD PTR [eax],eax
     ebb:	01 01                	add    DWORD PTR [ecx],eax
     ebd:	df 00                	fild   WORD PTR [eax]
     ebf:	00 00                	add    BYTE PTR [eax],al
     ec1:	02 00                	add    al,BYTE PTR [eax]
     ec3:	c1 00 00             	rol    DWORD PTR [eax],0x0
     ec6:	00 01                	add    BYTE PTR [ecx],al
     ec8:	01 fb                	add    ebx,edi
     eca:	0e                   	push   cs
     ecb:	0d 00 01 01 01       	or     eax,0x1010100
     ed0:	01 00                	add    DWORD PTR [eax],eax
     ed2:	00 00                	add    BYTE PTR [eax],al
     ed4:	01 00                	add    DWORD PTR [eax],eax
     ed6:	00 01                	add    BYTE PTR [ecx],al
     ed8:	73 72                	jae    f4c <sysEnter_Vector-0x12f0b4>
     eda:	63 00                	arpl   WORD PTR [eax],ax
     edc:	2f                   	das    
     edd:	68 6f 6d 65 2f       	push   0x2f656d6f
     ee2:	79 6f                	jns    f53 <sysEnter_Vector-0x12f0ad>
     ee4:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     eeb:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     eee:	73 73                	jae    f63 <sysEnter_Vector-0x12f09d>
     ef0:	2f                   	das    
     ef1:	6c                   	ins    BYTE PTR es:[edi],dx
     ef2:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     ef9:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     eff:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     f05:	78 2d                	js     f34 <sysEnter_Vector-0x12f0cc>
     f07:	67 6e                	outs   dx,BYTE PTR ds:[si]
     f09:	75 2f                	jne    f3a <sysEnter_Vector-0x12f0c6>
     f0b:	35 2e 33 2e 30       	xor    eax,0x302e332e
     f10:	2f                   	das    
     f11:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f18:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     f1b:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     f1f:	65                   	gs
     f20:	2f                   	das    
     f21:	2e                   	cs
     f22:	2e                   	cs
     f23:	2f                   	das    
     f24:	2e                   	cs
     f25:	2e                   	cs
     f26:	2f                   	das    
     f27:	2e                   	cs
     f28:	2e                   	cs
     f29:	2f                   	das    
     f2a:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     f2e:	6a 2f                	push   0x2f
     f30:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     f33:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     f3a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f3b:	65                   	gs
     f3c:	6c                   	ins    BYTE PTR es:[edi],dx
     f3d:	2f                   	das    
     f3e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f45:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     f48:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     f4c:	65 00 00             	add    BYTE PTR gs:[eax],al
     f4f:	70 69                	jo     fba <sysEnter_Vector-0x12f046>
     f51:	70 65                	jo     fb8 <sysEnter_Vector-0x12f048>
     f53:	5f                   	pop    edi
     f54:	6c                   	ins    BYTE PTR es:[edi],dx
     f55:	69 62 2e 63 00 01 00 	imul   esp,DWORD PTR [edx+0x2e],0x10063
     f5c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f5f:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     f66:	63 
     f67:	2e                   	cs
     f68:	68 00 02 00 00       	push   0x200
     f6d:	73 79                	jae    fe8 <sysEnter_Vector-0x12f018>
     f6f:	73 63                	jae    fd4 <sysEnter_Vector-0x12f02c>
     f71:	61                   	popa   
     f72:	6c                   	ins    BYTE PTR es:[edi],dx
     f73:	6c                   	ins    BYTE PTR es:[edi],dx
     f74:	73 2e                	jae    fa4 <sysEnter_Vector-0x12f05c>
     f76:	68 00 03 00 00       	push   0x300
     f7b:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     f7e:	6d                   	ins    DWORD PTR es:[edi],dx
     f7f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     f80:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f81:	2e                   	cs
     f82:	68 00 04 00 00       	push   0x400
     f87:	00 00                	add    BYTE PTR [eax],al
     f89:	05 02 2c 2c 00       	add    eax,0x2c2c02
     f8e:	9f                   	lahf   
     f8f:	03 0a                	add    ecx,DWORD PTR [edx]
     f91:	01 08                	add    DWORD PTR [eax],ecx
     f93:	13 08                	adc    ecx,DWORD PTR [eax]
     f95:	2f                   	das    
     f96:	5b                   	pop    ebx
     f97:	08 13                	or     BYTE PTR [ebx],dl
     f99:	08 75 02             	or     BYTE PTR [ebp+0x2],dh
     f9c:	05 00 01 01 5c       	add    eax,0x5c010100
     fa1:	01 00                	add    DWORD PTR [eax],eax
     fa3:	00 02                	add    BYTE PTR [edx],al
     fa5:	00 a8 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ch
     fab:	01 fb                	add    ebx,edi
     fad:	0e                   	push   cs
     fae:	0d 00 01 01 01       	or     eax,0x1010100
     fb3:	01 00                	add    DWORD PTR [eax],eax
     fb5:	00 00                	add    BYTE PTR [eax],al
     fb7:	01 00                	add    DWORD PTR [eax],eax
     fb9:	00 01                	add    BYTE PTR [ecx],al
     fbb:	73 72                	jae    102f <sysEnter_Vector-0x12efd1>
     fbd:	63 00                	arpl   WORD PTR [eax],ax
     fbf:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     fc6:	00 2f                	add    BYTE PTR [edi],ch
     fc8:	68 6f 6d 65 2f       	push   0x2f656d6f
     fcd:	79 6f                	jns    103e <sysEnter_Vector-0x12efc2>
     fcf:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     fd6:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     fd9:	73 73                	jae    104e <sysEnter_Vector-0x12efb2>
     fdb:	2f                   	das    
     fdc:	6c                   	ins    BYTE PTR es:[edi],dx
     fdd:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     fe4:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     fea:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     ff0:	78 2d                	js     101f <sysEnter_Vector-0x12efe1>
     ff2:	67 6e                	outs   dx,BYTE PTR ds:[si]
     ff4:	75 2f                	jne    1025 <sysEnter_Vector-0x12efdb>
     ff6:	35 2e 33 2e 30       	xor    eax,0x302e332e
     ffb:	2f                   	das    
     ffc:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1003:	00 00                	add    BYTE PTR [eax],al
    1005:	70 72                	jo     1079 <sysEnter_Vector-0x12ef87>
    1007:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1008:	63 69 6e             	arpl   WORD PTR [ecx+0x6e],bp
    100b:	66 6f                	outs   dx,WORD PTR ds:[esi]
    100d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1010:	01 00                	add    DWORD PTR [eax],eax
    1012:	00 70 72             	add    BYTE PTR [eax+0x72],dh
    1015:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1016:	63 69 6e             	arpl   WORD PTR [ecx+0x6e],bp
    1019:	66 6f                	outs   dx,WORD PTR ds:[esi]
    101b:	2e                   	cs
    101c:	68 00 02 00 00       	push   0x200
    1021:	73 74                	jae    1097 <sysEnter_Vector-0x12ef69>
    1023:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    102a:	63 
    102b:	2e                   	cs
    102c:	68 00 03 00 00       	push   0x300
    1031:	74 69                	je     109c <sysEnter_Vector-0x12ef64>
    1033:	6d                   	ins    DWORD PTR es:[edi],dx
    1034:	65                   	gs
    1035:	2e                   	cs
    1036:	68 00 02 00 00       	push   0x200
    103b:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1042:	02 00                	add    al,BYTE PTR [eax]
    1044:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
    1047:	6d                   	ins    DWORD PTR es:[edi],dx
    1048:	6d                   	ins    DWORD PTR es:[edi],dx
    1049:	6f                   	outs   dx,DWORD PTR ds:[esi]
    104a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    104b:	2e                   	cs
    104c:	68 00 02 00 00       	push   0x200
    1051:	00 00                	add    BYTE PTR [eax],al
    1053:	05 02 84 2c 00       	add    eax,0x2c8402
    1058:	9f                   	lahf   
    1059:	03 10                	add    edx,DWORD PTR [eax]
    105b:	01 08                	add    DWORD PTR [eax],ecx
    105d:	59                   	pop    ecx
    105e:	f4                   	hlt    
    105f:	79 08                	jns    1069 <sysEnter_Vector-0x12ef97>
    1061:	2f                   	das    
    1062:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
    1065:	5a                   	pop    edx
    1066:	08 4b 5a             	or     BYTE PTR [ebx+0x5a],cl
    1069:	08 a1 08 13 84 5a    	or     BYTE PTR [ecx+0x5a841308],ah
    106f:	bb 5a 08 59 5a       	mov    ebx,0x5a59085a
    1074:	08 59 5a             	or     BYTE PTR [ecx+0x5a],bl
    1077:	08 59 5a             	or     BYTE PTR [ecx+0x5a],bl
    107a:	08 59 5a             	or     BYTE PTR [ecx+0x5a],bl
    107d:	08 83 08 af 57 08    	or     BYTE PTR [ebx+0x857af08],al
    1083:	59                   	pop    ecx
    1084:	5a                   	pop    edx
    1085:	08 bb 08 f3 08 e5    	or     BYTE PTR [ebx-0x1af70cf8],bh
    108b:	08 9f 5a 08 59 08    	or     BYTE PTR [edi+0x859085a],bl
    1091:	c9                   	leave  
    1092:	08 f4                	or     ah,dh
    1094:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
    1097:	83 08 59             	or     DWORD PTR [eax],0x59
    109a:	02 2e                	add    ch,BYTE PTR [esi]
    109c:	13 02                	adc    eax,DWORD PTR [edx]
    109e:	39 13                	cmp    DWORD PTR [ebx],edx
    10a0:	bd 30 08 59 30       	mov    ebp,0x30590830
    10a5:	08 59 22             	or     BYTE PTR [ecx+0x22],bl
    10a8:	4b                   	dec    ebx
    10a9:	03 46 08             	add    eax,DWORD PTR [esi+0x8]
    10ac:	3c 03                	cmp    al,0x3
    10ae:	3c 9e                	cmp    al,0x9e
    10b0:	3e                   	ds
    10b1:	77 f3                	ja     10a6 <sysEnter_Vector-0x12ef5a>
    10b3:	08 2f                	or     BYTE PTR [edi],ch
    10b5:	31 08                	xor    DWORD PTR [eax],ecx
    10b7:	5b                   	pop    ebx
    10b8:	08 14 9f             	or     BYTE PTR [edi+ebx*4],dl
    10bb:	08 5b 08             	or     BYTE PTR [ebx+0x8],bl
    10be:	f6 bc 08 e6 08 83 02 	idiv   BYTE PTR [eax+ecx*1+0x28308e6]
    10c5:	24 13                	and    al,0x13
    10c7:	08 83 08 f4 08 ad    	or     BYTE PTR [ebx-0x52f70bf8],al
    10cd:	a1 08 ad d8 a0       	mov    eax,ds:0xa0d8ad08
    10d2:	08 ae 02 27 13 08    	or     BYTE PTR [esi+0x8132702],ch
    10d8:	4b                   	dec    ebx
    10d9:	08 4b 02             	or     BYTE PTR [ebx+0x2],cl
    10dc:	22 13                	and    dl,BYTE PTR [ebx]
    10de:	08 3d 08 75 91 08    	or     BYTE PTR ds:0x8917508,bh
    10e4:	ad                   	lods   eax,DWORD PTR ds:[esi]
    10e5:	67 03 6b 08          	add    ebp,DWORD PTR [bp+di+0x8]
    10e9:	3c 00                	cmp    al,0x0
    10eb:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    10ee:	03 78 20             	add    edi,DWORD PTR [eax+0x20]
    10f1:	00 02                	add    BYTE PTR [edx],al
    10f3:	04 01                	add    al,0x1
    10f5:	06                   	push   es
    10f6:	4a                   	dec    edx
    10f7:	06                   	push   es
    10f8:	03 24 ba             	add    esp,DWORD PTR [edx+edi*4]
    10fb:	02 08                	add    cl,BYTE PTR [eax]
    10fd:	00 01                	add    BYTE PTR [ecx],al
    10ff:	01 9a 05 00 00 02    	add    DWORD PTR [edx+0x2000005],ebx
    1105:	00 c5                	add    ch,al
    1107:	00 00                	add    BYTE PTR [eax],al
    1109:	00 01                	add    BYTE PTR [ecx],al
    110b:	01 fb                	add    ebx,edi
    110d:	0e                   	push   cs
    110e:	0d 00 01 01 01       	or     eax,0x1010100
    1113:	01 00                	add    DWORD PTR [eax],eax
    1115:	00 00                	add    BYTE PTR [eax],al
    1117:	01 00                	add    DWORD PTR [eax],eax
    1119:	00 01                	add    BYTE PTR [ecx],al
    111b:	73 72                	jae    118f <sysEnter_Vector-0x12ee71>
    111d:	63 00                	arpl   WORD PTR [eax],ax
    111f:	2f                   	das    
    1120:	68 6f 6d 65 2f       	push   0x2f656d6f
    1125:	79 6f                	jns    1196 <sysEnter_Vector-0x12ee6a>
    1127:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    112e:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1131:	73 73                	jae    11a6 <sysEnter_Vector-0x12ee5a>
    1133:	2f                   	das    
    1134:	6c                   	ins    BYTE PTR es:[edi],dx
    1135:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    113c:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1142:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1148:	78 2d                	js     1177 <sysEnter_Vector-0x12ee89>
    114a:	67 6e                	outs   dx,BYTE PTR ds:[si]
    114c:	75 2f                	jne    117d <sysEnter_Vector-0x12ee83>
    114e:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1153:	2f                   	das    
    1154:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    115b:	00 2e                	add    BYTE PTR [esi],ch
    115d:	2e                   	cs
    115e:	2f                   	das    
    115f:	2e                   	cs
    1160:	2e                   	cs
    1161:	2f                   	das    
    1162:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    1166:	6a 2f                	push   0x2f
    1168:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    116b:	69 73 4f 53 2f 69 6e 	imul   esi,DWORD PTR [ebx+0x4f],0x6e692f53
    1172:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1176:	65                   	gs
    1177:	2f                   	das    
    1178:	69 33 38 36 00 69    	imul   esi,DWORD PTR [ebx],0x69003638
    117e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    117f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1183:	65 00 00             	add    BYTE PTR gs:[eax],al
    1186:	73 70                	jae    11f8 <sysEnter_Vector-0x12ee08>
    1188:	72 69                	jb     11f3 <sysEnter_Vector-0x12ee0d>
    118a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    118b:	74 66                	je     11f3 <sysEnter_Vector-0x12ee0d>
    118d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1190:	01 00                	add    DWORD PTR [eax],eax
    1192:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1195:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    119c:	63 
    119d:	2e                   	cs
    119e:	68 00 02 00 00       	push   0x200
    11a3:	73 74                	jae    1219 <sysEnter_Vector-0x12ede7>
    11a5:	64                   	fs
    11a6:	61                   	popa   
    11a7:	72 67                	jb     1210 <sysEnter_Vector-0x12edf0>
    11a9:	2e                   	cs
    11aa:	68 00 02 00 00       	push   0x200
    11af:	63 70 75             	arpl   WORD PTR [eax+0x75],si
    11b2:	2e                   	cs
    11b3:	68 00 03 00 00       	push   0x300
    11b8:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    11bb:	6d                   	ins    DWORD PTR es:[edi],dx
    11bc:	6f                   	outs   dx,DWORD PTR ds:[esi]
    11bd:	6e                   	outs   dx,BYTE PTR ds:[esi]
    11be:	2e                   	cs
    11bf:	68 00 04 00 00       	push   0x400
    11c4:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    11cb:	04 00                	add    al,0x0
    11cd:	00 00                	add    BYTE PTR [eax],al
    11cf:	00 05 02 9c 32 00    	add    BYTE PTR ds:0x329c02,al
    11d5:	9f                   	lahf   
    11d6:	03 3c 01             	add    edi,DWORD PTR [ecx+eax*1]
    11d9:	08 cd                	or     ch,cl
    11db:	00 02                	add    BYTE PTR [edx],al
    11dd:	04 01                	add    al,0x1
    11df:	06                   	push   es
    11e0:	66 06                	pushw  es
    11e2:	75 00                	jne    11e4 <sysEnter_Vector-0x12ee1c>
    11e4:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    11e7:	06                   	push   es
    11e8:	90                   	nop
    11e9:	06                   	push   es
    11ea:	75 75                	jne    1261 <sysEnter_Vector-0x12ed9f>
    11ec:	91                   	xchg   ecx,eax
    11ed:	67 c9                	addr16 leave 
    11ef:	91                   	xchg   ecx,eax
    11f0:	84 08                	test   BYTE PTR [eax],cl
    11f2:	c9                   	leave  
    11f3:	ae                   	scas   al,BYTE PTR es:[edi]
    11f4:	08 83 ad 4b 02 2a    	or     BYTE PTR [ebx+0x2a024bad],al
    11fa:	13 02                	adc    eax,DWORD PTR [edx]
    11fc:	3a 13                	cmp    dl,BYTE PTR [ebx]
    11fe:	47                   	inc    edi
    11ff:	08 17                	or     BYTE PTR [edi],dl
    1201:	00 02                	add    BYTE PTR [edx],al
    1203:	04 02                	add    al,0x2
    1205:	06                   	push   es
    1206:	2e 00 02             	add    BYTE PTR cs:[edx],al
    1209:	04 01                	add    al,0x1
    120b:	08 66 06             	or     BYTE PTR [esi+0x6],ah
    120e:	e5 c9                	in     eax,0xc9
    1210:	2f                   	das    
    1211:	67 48                	addr16 dec eax
    1213:	08 87 ad 00 02 04    	or     BYTE PTR [edi+0x40200ad],al
    1219:	01 06                	add    DWORD PTR [esi],eax
    121b:	66 06                	pushw  es
    121d:	67 83 83 67 85 d7    	add    DWORD PTR [bp+di-0x7a99],0xffffffd7
    1223:	08 c9                	or     cl,cl
    1225:	02 2a                	add    ch,BYTE PTR [edx]
    1227:	0f 00 02             	sldt   WORD PTR [edx]
    122a:	04 01                	add    al,0x1
    122c:	06                   	push   es
    122d:	82                   	(bad)  
    122e:	06                   	push   es
    122f:	cd c9                	int    0xc9
    1231:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1232:	5a                   	pop    edx
    1233:	67 f3 2f             	addr16 repz das 
    1236:	67 83 08 5a          	or     DWORD PTR [bx+si],0x5a
    123a:	67 c9                	addr16 leave 
    123c:	67 00 02             	add    BYTE PTR [bp+si],al
    123f:	04 01                	add    al,0x1
    1241:	06                   	push   es
    1242:	82                   	(bad)  
    1243:	06                   	push   es
    1244:	67 03 77 4a          	add    esi,DWORD PTR [bx+0x4a]
    1248:	03 0d 9e 67 00 02    	add    ecx,DWORD PTR ds:0x200679e
    124e:	04 01                	add    al,0x1
    1250:	3d 60 08 13 75       	cmp    eax,0x75130860
    1255:	00 02                	add    BYTE PTR [edx],al
    1257:	04 03                	add    al,0x3
    1259:	06                   	push   es
    125a:	2e 00 02             	add    BYTE PTR cs:[edx],al
    125d:	04 01                	add    al,0x1
    125f:	02 29                	add    ch,BYTE PTR [ecx]
    1261:	12 00                	adc    al,BYTE PTR [eax]
    1263:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    1266:	ba 06 bb 3d 68       	mov    edx,0x683dbb06
    126b:	08 30                	or     BYTE PTR [eax],dh
    126d:	93                   	xchg   ebx,eax
    126e:	00 02                	add    BYTE PTR [edx],al
    1270:	04 01                	add    al,0x1
    1272:	06                   	push   es
    1273:	9e                   	sahf   
    1274:	06                   	push   es
    1275:	91                   	xchg   ecx,eax
    1276:	00 02                	add    BYTE PTR [edx],al
    1278:	04 01                	add    al,0x1
    127a:	06                   	push   es
    127b:	9e                   	sahf   
    127c:	06                   	push   es
    127d:	4b                   	dec    ebx
    127e:	00 02                	add    BYTE PTR [edx],al
    1280:	04 02                	add    al,0x2
    1282:	06                   	push   es
    1283:	66                   	data16
    1284:	00 02                	add    BYTE PTR [edx],al
    1286:	04 03                	add    al,0x3
    1288:	66 06                	pushw  es
    128a:	a0 00 02 04 01       	mov    al,ds:0x1040200
    128f:	06                   	push   es
    1290:	9e                   	sahf   
    1291:	00 02                	add    BYTE PTR [edx],al
    1293:	04 02                	add    al,0x2
    1295:	74 00                	je     1297 <sysEnter_Vector-0x12ed69>
    1297:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    129a:	58                   	pop    eax
    129b:	00 02                	add    BYTE PTR [edx],al
    129d:	04 04                	add    al,0x4
    129f:	06                   	push   es
    12a0:	3d 00 02 04 04       	cmp    eax,0x4040200
    12a5:	4b                   	dec    ebx
    12a6:	9f                   	lahf   
    12a7:	67 4b                	addr16 dec ebx
    12a9:	3d 67 9f 4b 67       	cmp    eax,0x674b9f67
    12ae:	9f                   	lahf   
    12af:	4b                   	dec    ebx
    12b0:	4e                   	dec    esi
    12b1:	9f                   	lahf   
    12b2:	67 67 67 4e          	addr32 addr32 addr16 dec esi
    12b6:	76 67                	jbe    131f <sysEnter_Vector-0x12ece1>
    12b8:	f5                   	cmc    
    12b9:	02 22                	add    ah,BYTE PTR [edx]
    12bb:	13 f0                	adc    esi,eax
    12bd:	6c                   	ins    BYTE PTR es:[edi],dx
    12be:	00 02                	add    BYTE PTR [edx],al
    12c0:	04 01                	add    al,0x1
    12c2:	06                   	push   es
    12c3:	82                   	(bad)  
    12c4:	06                   	push   es
    12c5:	67 67 00 02          	addr32 add BYTE PTR [bp+si],al
    12c9:	04 02                	add    al,0x2
    12cb:	06                   	push   es
    12cc:	ba 00 02 04 01       	mov    edx,0x1040200
    12d1:	ba 06 c9 00 02       	mov    edx,0x200c906
    12d6:	04 01                	add    al,0x1
    12d8:	06                   	push   es
    12d9:	66 06                	pushw  es
    12db:	e6 9f                	out    0x9f,al
    12dd:	67 d7                	xlat   BYTE PTR ds:[bx]
    12df:	67 bb 08 4e 00 02    	addr16 mov ebx,0x2004e08
    12e5:	04 02                	add    al,0x2
    12e7:	06                   	push   es
    12e8:	ba 00 02 04 01       	mov    edx,0x1040200
    12ed:	e4 06                	in     al,0x6
    12ef:	c9                   	leave  
    12f0:	00 02                	add    BYTE PTR [edx],al
    12f2:	04 02                	add    al,0x2
    12f4:	06                   	push   es
    12f5:	2e 00 02             	add    BYTE PTR cs:[edx],al
    12f8:	04 01                	add    al,0x1
    12fa:	ba 06 d7 00 02       	mov    edx,0x200d706
    12ff:	04 02                	add    al,0x2
    1301:	06                   	push   es
    1302:	2e 00 02             	add    BYTE PTR cs:[edx],al
    1305:	04 01                	add    al,0x1
    1307:	08 58 06             	or     BYTE PTR [eax+0x6],bl
    130a:	c9                   	leave  
    130b:	00 02                	add    BYTE PTR [edx],al
    130d:	04 02                	add    al,0x2
    130f:	06                   	push   es
    1310:	2e 00 02             	add    BYTE PTR cs:[edx],al
    1313:	04 01                	add    al,0x1
    1315:	ba 06 ca 00 02       	mov    edx,0x200ca06
    131a:	04 01                	add    al,0x1
    131c:	3d 76 f4 93 00       	cmp    eax,0x93f476
    1321:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1324:	06                   	push   es
    1325:	9e                   	sahf   
    1326:	06                   	push   es
    1327:	91                   	xchg   ecx,eax
    1328:	75 91                	jne    12bb <sysEnter_Vector-0x12ed45>
    132a:	00 02                	add    BYTE PTR [edx],al
    132c:	04 01                	add    al,0x1
    132e:	06                   	push   es
    132f:	66                   	data16
    1330:	00 02                	add    BYTE PTR [edx],al
    1332:	04 02                	add    al,0x2
    1334:	06                   	push   es
    1335:	d7                   	xlat   BYTE PTR ds:[ebx]
    1336:	00 02                	add    BYTE PTR [edx],al
    1338:	04 02                	add    al,0x2
    133a:	02 26                	add    ah,BYTE PTR [esi]
    133c:	13 00                	adc    eax,DWORD PTR [eax]
    133e:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    1341:	02 28                	add    ch,BYTE PTR [eax]
    1343:	0f 00 02             	sldt   WORD PTR [edx]
    1346:	04 01                	add    al,0x1
    1348:	06                   	push   es
    1349:	4a                   	dec    edx
    134a:	06                   	push   es
    134b:	6c                   	ins    BYTE PTR es:[edi],dx
    134c:	00 02                	add    BYTE PTR [edx],al
    134e:	04 02                	add    al,0x2
    1350:	06                   	push   es
    1351:	ba 00 02 04 01       	mov    edx,0x1040200
    1356:	ba 06 d7 00 02       	mov    edx,0x200d706
    135b:	04 03                	add    al,0x3
    135d:	06                   	push   es
    135e:	90                   	nop
    135f:	00 02                	add    BYTE PTR [edx],al
    1361:	04 01                	add    al,0x1
    1363:	08 90 06 83 00 02    	or     BYTE PTR [eax+0x2008306],dl
    1369:	04 02                	add    al,0x2
    136b:	06                   	push   es
    136c:	2e 00 02             	add    BYTE PTR cs:[edx],al
    136f:	04 01                	add    al,0x1
    1371:	ba 06 d8 3d 30       	mov    edx,0x303dd806
    1376:	08 40 75             	or     BYTE PTR [eax+0x75],al
    1379:	bb 00 02 04 01       	mov    ebx,0x1040200
    137e:	06                   	push   es
    137f:	66 06                	pushw  es
    1381:	d7                   	xlat   BYTE PTR ds:[ebx]
    1382:	08 14 67             	or     BYTE PTR [edi+eiz*2],dl
    1385:	08 a0 9f 02 30 13    	or     BYTE PTR [eax+0x1330029f],ah
    138b:	02 22                	add    ah,BYTE PTR [edx]
    138d:	13 02                	adc    eax,DWORD PTR [edx]
    138f:	30 13                	xor    BYTE PTR [ebx],dl
    1391:	02 28                	add    ch,BYTE PTR [eax]
    1393:	13 67 02             	adc    esp,DWORD PTR [edi+0x2]
    1396:	30 13                	xor    BYTE PTR [ebx],dl
    1398:	02 26                	add    ah,BYTE PTR [esi]
    139a:	15 00 02 04 02       	adc    eax,0x2040200
    139f:	03 6f 08             	add    ebp,DWORD PTR [edi+0x8]
    13a2:	9e                   	sahf   
    13a3:	00 02                	add    BYTE PTR [edx],al
    13a5:	04 01                	add    al,0x1
    13a7:	06                   	push   es
    13a8:	4a                   	dec    edx
    13a9:	06                   	push   es
    13aa:	03 15 9e 00 02 04    	add    edx,DWORD PTR ds:0x402009e
    13b0:	02 06                	add    al,BYTE PTR [esi]
    13b2:	ba 00 02 04 01       	mov    edx,0x1040200
    13b7:	ba 06 d7 00 02       	mov    edx,0x200d706
    13bc:	04 03                	add    al,0x3
    13be:	06                   	push   es
    13bf:	90                   	nop
    13c0:	00 02                	add    BYTE PTR [edx],al
    13c2:	04 01                	add    al,0x1
    13c4:	08 90 06 83 00 02    	or     BYTE PTR [eax+0x2008306],dl
    13ca:	04 02                	add    al,0x2
    13cc:	06                   	push   es
    13cd:	2e 00 02             	add    BYTE PTR cs:[edx],al
    13d0:	04 01                	add    al,0x1
    13d2:	ba 06 d8 3d 89       	mov    edx,0x893dd806
    13d7:	02 30                	add    dh,BYTE PTR [eax]
    13d9:	14 76                	adc    al,0x76
    13db:	77 00                	ja     13dd <sysEnter_Vector-0x12ec23>
    13dd:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    13e0:	06                   	push   es
    13e1:	90                   	nop
    13e2:	06                   	push   es
    13e3:	91                   	xchg   ecx,eax
    13e4:	75 f5                	jne    13db <sysEnter_Vector-0x12ec25>
    13e6:	91                   	xchg   ecx,eax
    13e7:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    13ea:	91                   	xchg   ecx,eax
    13eb:	00 02                	add    BYTE PTR [edx],al
    13ed:	04 01                	add    al,0x1
    13ef:	06                   	push   es
    13f0:	66 06                	pushw  es
    13f2:	ad                   	lods   eax,DWORD PTR ds:[esi]
    13f3:	75 68                	jne    145d <sysEnter_Vector-0x12eba3>
    13f5:	75 6a                	jne    1461 <sysEnter_Vector-0x12eb9f>
    13f7:	c9                   	leave  
    13f8:	02 30                	add    dh,BYTE PTR [eax]
    13fa:	14 00                	adc    al,0x0
    13fc:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    13ff:	06                   	push   es
    1400:	74 06                	je     1408 <sysEnter_Vector-0x12ebf8>
    1402:	bb 08 13 00 02       	mov    ebx,0x2001308
    1407:	04 01                	add    al,0x1
    1409:	06                   	push   es
    140a:	66 06                	pushw  es
    140c:	bb 08 83 67 00       	mov    ebx,0x678308
    1411:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1414:	06                   	push   es
    1415:	e4 00                	in     al,0x0
    1417:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    141a:	74 00                	je     141c <sysEnter_Vector-0x12ebe4>
    141c:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    141f:	58                   	pop    eax
    1420:	00 02                	add    BYTE PTR [edx],al
    1422:	04 04                	add    al,0x4
    1424:	06                   	push   es
    1425:	30 75 08             	xor    BYTE PTR [ebp+0x8],dh
    1428:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1429:	92                   	xchg   edx,eax
    142a:	93                   	xchg   ebx,eax
    142b:	93                   	xchg   ebx,eax
    142c:	67 bb 5a bd 02 30    	addr16 mov ebx,0x3002bd5a
    1432:	13 08                	adc    ecx,DWORD PTR [eax]
    1434:	9f                   	lahf   
    1435:	02 30                	add    dh,BYTE PTR [eax]
    1437:	13 08                	adc    ecx,DWORD PTR [eax]
    1439:	9f                   	lahf   
    143a:	02 2f                	add    ch,BYTE PTR [edi]
    143c:	13 91 c9 02 2c 13    	adc    edx,DWORD PTR [ecx+0x132c02c9]
    1442:	00 02                	add    BYTE PTR [edx],al
    1444:	04 01                	add    al,0x1
    1446:	06                   	push   es
    1447:	74 06                	je     144f <sysEnter_Vector-0x12ebb1>
    1449:	bb d7 75 bb bb       	mov    ebx,0xbbbb75d7
    144e:	00 02                	add    BYTE PTR [edx],al
    1450:	04 03                	add    al,0x3
    1452:	06                   	push   es
    1453:	90                   	nop
    1454:	00 02                	add    BYTE PTR [edx],al
    1456:	04 01                	add    al,0x1
    1458:	f2 06                	repnz push es
    145a:	9f                   	lahf   
    145b:	00 02                	add    BYTE PTR [edx],al
    145d:	04 02                	add    al,0x2
    145f:	06                   	push   es
    1460:	2e 00 02             	add    BYTE PTR cs:[edx],al
    1463:	04 01                	add    al,0x1
    1465:	08 66 06             	or     BYTE PTR [esi+0x6],ah
    1468:	e6 75                	out    0x75,al
    146a:	2f                   	das    
    146b:	00 02                	add    BYTE PTR [edx],al
    146d:	04 01                	add    al,0x1
    146f:	06                   	push   es
    1470:	f2 06                	repnz push es
    1472:	bb 08 64 c0 bb       	mov    ebx,0xbbc06408
    1477:	67 bb 00 02 04 03    	addr16 mov ebx,0x3040200
    147d:	06                   	push   es
    147e:	90                   	nop
    147f:	00 02                	add    BYTE PTR [edx],al
    1481:	04 01                	add    al,0x1
    1483:	f2 06                	repnz push es
    1485:	87 67 68             	xchg   DWORD PTR [edi+0x68],esp
    1488:	08 13                	or     BYTE PTR [ebx],dl
    148a:	2f                   	das    
    148b:	e5 00                	in     eax,0x0
    148d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1490:	06                   	push   es
    1491:	ac                   	lods   al,BYTE PTR ds:[esi]
    1492:	06                   	push   es
    1493:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1494:	47                   	inc    edi
    1495:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    1496:	9f                   	lahf   
    1497:	08 2f                	or     BYTE PTR [edi],ch
    1499:	2f                   	das    
    149a:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    149d:	6b 84 bb 03 71 82 03 	imul   eax,DWORD PTR [ebx+edi*4+0x3827103],0x11
    14a4:	11 
    14a5:	20 5a f5             	and    BYTE PTR [edx-0xb],bl
    14a8:	00 02                	add    BYTE PTR [edx],al
    14aa:	04 03                	add    al,0x3
    14ac:	06                   	push   es
    14ad:	2e 00 02             	add    BYTE PTR cs:[edx],al
    14b0:	04 01                	add    al,0x1
    14b2:	4a                   	dec    edx
    14b3:	00 02                	add    BYTE PTR [edx],al
    14b5:	04 02                	add    al,0x2
    14b7:	9e                   	sahf   
    14b8:	06                   	push   es
    14b9:	9f                   	lahf   
    14ba:	f3 00 02             	repz add BYTE PTR [edx],al
    14bd:	04 04                	add    al,0x4
    14bf:	06                   	push   es
    14c0:	2e 00 02             	add    BYTE PTR cs:[edx],al
    14c3:	04 01                	add    al,0x1
    14c5:	4a                   	dec    edx
    14c6:	00 02                	add    BYTE PTR [edx],al
    14c8:	04 02                	add    al,0x2
    14ca:	9e                   	sahf   
    14cb:	00 02                	add    BYTE PTR [edx],al
    14cd:	04 03                	add    al,0x3
    14cf:	9e                   	sahf   
    14d0:	06                   	push   es
    14d1:	9f                   	lahf   
    14d2:	bb 00 02 04 02       	mov    ebx,0x2040200
    14d7:	06                   	push   es
    14d8:	2e 00 02             	add    BYTE PTR cs:[edx],al
    14db:	04 01                	add    al,0x1
    14dd:	4a                   	dec    edx
    14de:	06                   	push   es
    14df:	9f                   	lahf   
    14e0:	00 02                	add    BYTE PTR [edx],al
    14e2:	04 01                	add    al,0x1
    14e4:	06                   	push   es
    14e5:	9e                   	sahf   
    14e6:	00 02                	add    BYTE PTR [edx],al
    14e8:	04 01                	add    al,0x1
    14ea:	06                   	push   es
    14eb:	4b                   	dec    ebx
    14ec:	08 d8                	or     al,bl
    14ee:	3e 02 30             	add    dh,BYTE PTR ds:[eax]
    14f1:	18 00                	sbb    BYTE PTR [eax],al
    14f3:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    14f6:	06                   	push   es
    14f7:	9e                   	sahf   
    14f8:	06                   	push   es
    14f9:	4d                   	dec    ebp
    14fa:	00 02                	add    BYTE PTR [edx],al
    14fc:	04 01                	add    al,0x1
    14fe:	06                   	push   es
    14ff:	9e                   	sahf   
    1500:	00 02                	add    BYTE PTR [edx],al
    1502:	04 02                	add    al,0x2
    1504:	74 00                	je     1506 <sysEnter_Vector-0x12eafa>
    1506:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1509:	58                   	pop    eax
    150a:	00 02                	add    BYTE PTR [edx],al
    150c:	04 04                	add    al,0x4
    150e:	06                   	push   es
    150f:	3d 00 02 04 04       	cmp    eax,0x4040200
    1514:	4b                   	dec    ebx
    1515:	9f                   	lahf   
    1516:	f3 4b                	repz dec ebx
    1518:	d7                   	xlat   BYTE PTR ds:[ebx]
    1519:	67 9f                	addr16 lahf 
    151b:	4b                   	dec    ebx
    151c:	67 9f                	addr16 lahf 
    151e:	4b                   	dec    ebx
    151f:	4f                   	dec    edi
    1520:	67 91                	addr16 xchg ecx,eax
    1522:	00 02                	add    BYTE PTR [edx],al
    1524:	04 01                	add    al,0x1
    1526:	06                   	push   es
    1527:	66 06                	pushw  es
    1529:	91                   	xchg   ecx,eax
    152a:	78 02                	js     152e <sysEnter_Vector-0x12ead2>
    152c:	29 15 00 02 04 01    	sub    DWORD PTR ds:0x1040200,edx
    1532:	06                   	push   es
    1533:	9e                   	sahf   
    1534:	00 02                	add    BYTE PTR [edx],al
    1536:	04 02                	add    al,0x2
    1538:	66 06                	pushw  es
    153a:	08 23                	or     BYTE PTR [ebx],ah
    153c:	00 02                	add    BYTE PTR [edx],al
    153e:	04 01                	add    al,0x1
    1540:	06                   	push   es
    1541:	90                   	nop
    1542:	00 02                	add    BYTE PTR [edx],al
    1544:	04 02                	add    al,0x2
    1546:	9e                   	sahf   
    1547:	06                   	push   es
    1548:	08 22                	or     BYTE PTR [edx],ah
    154a:	08 4d 67             	or     BYTE PTR [ebp+0x67],cl
    154d:	00 02                	add    BYTE PTR [edx],al
    154f:	04 02                	add    al,0x2
    1551:	06                   	push   es
    1552:	ba 00 02 04 01       	mov    edx,0x1040200
    1557:	ba 06 c9 00 02       	mov    edx,0x200c906
    155c:	04 01                	add    al,0x1
    155e:	06                   	push   es
    155f:	66 06                	pushw  es
    1561:	e5 00                	in     eax,0x0
    1563:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    1566:	06                   	push   es
    1567:	ba 00 02 04 01       	mov    edx,0x1040200
    156c:	e4 06                	in     al,0x6
    156e:	c9                   	leave  
    156f:	00 02                	add    BYTE PTR [edx],al
    1571:	04 03                	add    al,0x3
    1573:	06                   	push   es
    1574:	90                   	nop
    1575:	00 02                	add    BYTE PTR [edx],al
    1577:	04 01                	add    al,0x1
    1579:	08 ba 06 83 00 02    	or     BYTE PTR [edx+0x2008306],bh
    157f:	04 02                	add    al,0x2
    1581:	06                   	push   es
    1582:	2e 00 02             	add    BYTE PTR cs:[edx],al
    1585:	04 01                	add    al,0x1
    1587:	ba 06 ca 3d 5c       	mov    edx,0x5c3dca06
    158c:	03 0d 08 2e ad 9f    	add    ecx,DWORD PTR ds:0x9fad2e08
    1592:	08 13                	or     BYTE PTR [ebx],dl
    1594:	5c                   	pop    esp
    1595:	76 91                	jbe    1528 <sysEnter_Vector-0x12ead8>
    1597:	08 d7                	or     bh,dl
    1599:	67 67 67 67 6a 75    	addr32 addr32 addr32 addr16 push 0x75
    159f:	00 02                	add    BYTE PTR [edx],al
    15a1:	04 01                	add    al,0x1
    15a3:	06                   	push   es
    15a4:	9e                   	sahf   
    15a5:	06                   	push   es
    15a6:	9f                   	lahf   
    15a7:	08 13                	or     BYTE PTR [ebx],dl
    15a9:	9f                   	lahf   
    15aa:	91                   	xchg   ecx,eax
    15ab:	d7                   	xlat   BYTE PTR ds:[ebx]
    15ac:	67 3d 4f 75 9f 91    	addr16 cmp eax,0x919f754f
    15b2:	00 02                	add    BYTE PTR [edx],al
    15b4:	04 01                	add    al,0x1
    15b6:	06                   	push   es
    15b7:	9e                   	sahf   
    15b8:	06                   	push   es
    15b9:	9f                   	lahf   
    15ba:	08 13                	or     BYTE PTR [ebx],dl
    15bc:	9f                   	lahf   
    15bd:	91                   	xchg   ecx,eax
    15be:	d8 00                	fadd   DWORD PTR [eax]
    15c0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    15c3:	06                   	push   es
    15c4:	66 06                	pushw  es
    15c6:	78 75                	js     163d <sysEnter_Vector-0x12e9c3>
    15c8:	00 02                	add    BYTE PTR [edx],al
    15ca:	04 01                	add    al,0x1
    15cc:	06                   	push   es
    15cd:	9e                   	sahf   
    15ce:	00 02                	add    BYTE PTR [edx],al
    15d0:	04 02                	add    al,0x2
    15d2:	9e                   	sahf   
    15d3:	06                   	push   es
    15d4:	9f                   	lahf   
    15d5:	bb 94 76 02 23       	mov    ebx,0x23027694
    15da:	14 00                	adc    al,0x0
    15dc:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    15df:	06                   	push   es
    15e0:	ba 00 02 04 01       	mov    edx,0x1040200
    15e5:	ba 06 9f 08 59       	mov    edx,0x59089f06
    15ea:	00 02                	add    BYTE PTR [edx],al
    15ec:	04 02                	add    al,0x2
    15ee:	06                   	push   es
    15ef:	2e 00 02             	add    BYTE PTR cs:[edx],al
    15f2:	04 01                	add    al,0x1
    15f4:	ba 06 9f 5b d7       	mov    edx,0xd75b9f06
    15f9:	00 02                	add    BYTE PTR [edx],al
    15fb:	04 01                	add    al,0x1
    15fd:	06                   	push   es
    15fe:	66 06                	pushw  es
    1600:	91                   	xchg   ecx,eax
    1601:	08 3d 00 02 04 02    	or     BYTE PTR ds:0x2040200,bh
    1607:	06                   	push   es
    1608:	ba 00 02 04 01       	mov    edx,0x1040200
    160d:	ba 06 d7 00 02       	mov    edx,0x200d706
    1612:	04 03                	add    al,0x3
    1614:	06                   	push   es
    1615:	90                   	nop
    1616:	00 02                	add    BYTE PTR [edx],al
    1618:	04 01                	add    al,0x1
    161a:	08 9e 06 83 00 02    	or     BYTE PTR [esi+0x2008306],bl
    1620:	04 02                	add    al,0x2
    1622:	06                   	push   es
    1623:	2e 00 02             	add    BYTE PTR cs:[edx],al
    1626:	04 01                	add    al,0x1
    1628:	ba 06 d7 5b 67       	mov    edx,0x675bd706
    162d:	75 4c                	jne    167b <sysEnter_Vector-0x12e985>
    162f:	02 28                	add    ch,BYTE PTR [eax]
    1631:	13 5b 67             	adc    ebx,DWORD PTR [ebx+0x67]
    1634:	d7                   	xlat   BYTE PTR ds:[ebx]
    1635:	cd 55                	int    0x55
    1637:	d7                   	xlat   BYTE PTR ds:[ebx]
    1638:	ca 5b 4d             	retf   0x4d5b
    163b:	67 02 26 16 56       	add    ah,BYTE PTR ds:0x5616
    1640:	02 26                	add    ah,BYTE PTR [esi]
    1642:	14 5c                	adc    al,0x5c
    1644:	75 5b                	jne    16a1 <sysEnter_Vector-0x12e95f>
    1646:	4d                   	dec    ebp
    1647:	75 5c                	jne    16a5 <sysEnter_Vector-0x12e95b>
    1649:	4d                   	dec    ebp
    164a:	03 09                	add    ecx,DWORD PTR [ecx]
    164c:	2e 02 3c 13          	add    bh,BYTE PTR cs:[ebx+edx*1]
    1650:	5d                   	pop    ebp
    1651:	00 02                	add    BYTE PTR [edx],al
    1653:	04 01                	add    al,0x1
    1655:	06                   	push   es
    1656:	9e                   	sahf   
    1657:	06                   	push   es
    1658:	bb 9f 08 16 2c       	mov    ebx,0x2c16089f
    165d:	92                   	xchg   edx,eax
    165e:	03 6b 2e             	add    ebp,DWORD PTR [ebx+0x2e]
    1661:	03 18                	add    ebx,DWORD PTR [eax]
    1663:	20 67 f3             	and    BYTE PTR [edi-0xd],ah
    1666:	67 9f                	addr16 lahf 
    1668:	30 30                	xor    BYTE PTR [eax],dh
    166a:	9f                   	lahf   
    166b:	f4                   	hlt    
    166c:	d9 00                	fld    DWORD PTR [eax]
    166e:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    1671:	03 e6                	add    esp,esi
    1673:	7e 08                	jle    167d <sysEnter_Vector-0x12e983>
    1675:	f2 00 02             	repnz add BYTE PTR [edx],al
    1678:	04 01                	add    al,0x1
    167a:	06                   	push   es
    167b:	90                   	nop
    167c:	06                   	push   es
    167d:	03 9d 01 d6 67 9f    	add    ebx,DWORD PTR [ebp-0x609829ff]
    1683:	76 f6                	jbe    167b <sysEnter_Vector-0x12e985>
    1685:	67 08 77 3d          	or     BYTE PTR [bx+0x3d],dh
    1689:	30 08                	xor    BYTE PTR [eax],cl
    168b:	ad                   	lods   eax,DWORD PTR ds:[esi]
    168c:	08 d7                	or     bh,dl
    168e:	30 08                	xor    BYTE PTR [eax],cl
    1690:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1691:	08 d7                	or     bh,dl
    1693:	31 f6                	xor    esi,esi
    1695:	67 08 76 3d          	or     BYTE PTR [bp+0x3d],dh
    1699:	02 02                	add    al,BYTE PTR [edx]
    169b:	00 01                	add    BYTE PTR [ecx],al
    169d:	01 57 00             	add    DWORD PTR [edi+0x0],edx
    16a0:	00 00                	add    BYTE PTR [eax],al
    16a2:	02 00                	add    al,BYTE PTR [eax]
    16a4:	36 00 00             	add    BYTE PTR ss:[eax],al
    16a7:	00 01                	add    BYTE PTR [ecx],al
    16a9:	01 fb                	add    ebx,edi
    16ab:	0e                   	push   cs
    16ac:	0d 00 01 01 01       	or     eax,0x1010100
    16b1:	01 00                	add    DWORD PTR [eax],eax
    16b3:	00 00                	add    BYTE PTR [eax],al
    16b5:	01 00                	add    DWORD PTR [eax],eax
    16b7:	00 01                	add    BYTE PTR [ecx],al
    16b9:	73 72                	jae    172d <sysEnter_Vector-0x12e8d3>
    16bb:	63 00                	arpl   WORD PTR [eax],ax
    16bd:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    16c4:	00 00                	add    BYTE PTR [eax],al
    16c6:	73 74                	jae    173c <sysEnter_Vector-0x12e8c4>
    16c8:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
    16cf:	00 
    16d0:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
    16d3:	6d                   	ins    DWORD PTR es:[edi],dx
    16d4:	6d                   	ins    DWORD PTR es:[edi],dx
    16d5:	6f                   	outs   dx,DWORD PTR ds:[esi]
    16d6:	6e                   	outs   dx,BYTE PTR ds:[esi]
    16d7:	2e                   	cs
    16d8:	68 00 02 00 00       	push   0x200
    16dd:	00 00                	add    BYTE PTR [eax],al
    16df:	05 02 74 48 00       	add    eax,0x487402
    16e4:	9f                   	lahf   
    16e5:	03 11                	add    edx,DWORD PTR [ecx]
    16e7:	01 08                	add    DWORD PTR [eax],ecx
    16e9:	22 76 08             	and    dh,BYTE PTR [esi+0x8]
    16ec:	31 d7                	xor    edi,edx
    16ee:	d7                   	xlat   BYTE PTR ds:[ebx]
    16ef:	d7                   	xlat   BYTE PTR ds:[ebx]
    16f0:	d7                   	xlat   BYTE PTR ds:[ebx]
    16f1:	ad                   	lods   eax,DWORD PTR ds:[esi]
    16f2:	e6 21                	out    0x21,al
    16f4:	02 05 00 01 01 c3    	add    al,BYTE PTR ds:0xc3010100
    16fa:	00 00                	add    BYTE PTR [eax],al
    16fc:	00 02                	add    BYTE PTR [edx],al
    16fe:	00 88 00 00 00 01    	add    BYTE PTR [eax+0x1000000],cl
    1704:	01 fb                	add    ebx,edi
    1706:	0e                   	push   cs
    1707:	0d 00 01 01 01       	or     eax,0x1010100
    170c:	01 00                	add    DWORD PTR [eax],eax
    170e:	00 00                	add    BYTE PTR [eax],al
    1710:	01 00                	add    DWORD PTR [eax],eax
    1712:	00 01                	add    BYTE PTR [ecx],al
    1714:	73 72                	jae    1788 <sysEnter_Vector-0x12e878>
    1716:	63 2f                	arpl   WORD PTR [edi],bp
    1718:	73 74                	jae    178e <sysEnter_Vector-0x12e872>
    171a:	72 69                	jb     1785 <sysEnter_Vector-0x12e87b>
    171c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    171d:	67 73 00             	addr16 jae 1720 <sysEnter_Vector-0x12e8e0>
    1720:	2f                   	das    
    1721:	68 6f 6d 65 2f       	push   0x2f656d6f
    1726:	79 6f                	jns    1797 <sysEnter_Vector-0x12e869>
    1728:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    172f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1732:	73 73                	jae    17a7 <sysEnter_Vector-0x12e859>
    1734:	2f                   	das    
    1735:	6c                   	ins    BYTE PTR es:[edi],dx
    1736:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    173d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1743:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1749:	78 2d                	js     1778 <sysEnter_Vector-0x12e888>
    174b:	67 6e                	outs   dx,BYTE PTR ds:[si]
    174d:	75 2f                	jne    177e <sysEnter_Vector-0x12e882>
    174f:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1754:	2f                   	das    
    1755:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    175c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    175f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1763:	65 00 00             	add    BYTE PTR gs:[eax],al
    1766:	73 74                	jae    17dc <sysEnter_Vector-0x12e824>
    1768:	72 63                	jb     17cd <sysEnter_Vector-0x12e833>
    176a:	61                   	popa   
    176b:	74 2e                	je     179b <sysEnter_Vector-0x12e865>
    176d:	63 00                	arpl   WORD PTR [eax],ax
    176f:	01 00                	add    DWORD PTR [eax],eax
    1771:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1774:	64                   	fs
    1775:	64                   	fs
    1776:	65                   	gs
    1777:	66                   	data16
    1778:	2e                   	cs
    1779:	68 00 02 00 00       	push   0x200
    177e:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    1781:	6d                   	ins    DWORD PTR es:[edi],dx
    1782:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1783:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1784:	2e                   	cs
    1785:	68 00 03 00 00       	push   0x300
    178a:	00 00                	add    BYTE PTR [eax],al
    178c:	05 02 f8 48 00       	add    eax,0x48f802
    1791:	9f                   	lahf   
    1792:	03 1e                	add    ebx,DWORD PTR [esi]
    1794:	01 08                	add    DWORD PTR [eax],ecx
    1796:	21 02                	and    DWORD PTR [edx],eax
    1798:	24 13                	and    al,0x13
    179a:	3d 5b 08 21 02       	cmp    eax,0x221085b
    179f:	24 13                	and    al,0x13
    17a1:	3d 5b 08 21 75       	cmp    eax,0x7521085b
    17a6:	08 14 83             	or     BYTE PTR [ebx+eax*4],dl
    17a9:	84 68 02             	test   BYTE PTR [eax+0x2],ch
    17ac:	27                   	daa    
    17ad:	13 3d 5b 08 21 68    	adc    edi,DWORD PTR ds:0x6821085b
    17b3:	02 27                	add    ah,BYTE PTR [edi]
    17b5:	13 3d 5b f3 08 3d    	adc    edi,DWORD PTR ds:0x3d08f35b
    17bb:	02 02                	add    al,BYTE PTR [edx]
    17bd:	00 01                	add    BYTE PTR [ecx],al
    17bf:	01 b8 00 00 00 02    	add    DWORD PTR [eax+0x2000000],edi
    17c5:	00 96 00 00 00 01    	add    BYTE PTR [esi+0x1000000],dl
    17cb:	01 fb                	add    ebx,edi
    17cd:	0e                   	push   cs
    17ce:	0d 00 01 01 01       	or     eax,0x1010100
    17d3:	01 00                	add    DWORD PTR [eax],eax
    17d5:	00 00                	add    BYTE PTR [eax],al
    17d7:	01 00                	add    DWORD PTR [eax],eax
    17d9:	00 01                	add    BYTE PTR [ecx],al
    17db:	73 72                	jae    184f <sysEnter_Vector-0x12e7b1>
    17dd:	63 2f                	arpl   WORD PTR [edi],bp
    17df:	73 74                	jae    1855 <sysEnter_Vector-0x12e7ab>
    17e1:	72 69                	jb     184c <sysEnter_Vector-0x12e7b4>
    17e3:	6e                   	outs   dx,BYTE PTR ds:[esi]
    17e4:	67 73 00             	addr16 jae 17e7 <sysEnter_Vector-0x12e819>
    17e7:	2f                   	das    
    17e8:	68 6f 6d 65 2f       	push   0x2f656d6f
    17ed:	79 6f                	jns    185e <sysEnter_Vector-0x12e7a2>
    17ef:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    17f6:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    17f9:	73 73                	jae    186e <sysEnter_Vector-0x12e792>
    17fb:	2f                   	das    
    17fc:	6c                   	ins    BYTE PTR es:[edi],dx
    17fd:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1804:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    180a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1810:	78 2d                	js     183f <sysEnter_Vector-0x12e7c1>
    1812:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1814:	75 2f                	jne    1845 <sysEnter_Vector-0x12e7bb>
    1816:	35 2e 33 2e 30       	xor    eax,0x302e332e
    181b:	2f                   	das    
    181c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1823:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1826:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    182a:	65 00 00             	add    BYTE PTR gs:[eax],al
    182d:	73 74                	jae    18a3 <sysEnter_Vector-0x12e75d>
    182f:	72 63                	jb     1894 <sysEnter_Vector-0x12e76c>
    1831:	6d                   	ins    DWORD PTR es:[edi],dx
    1832:	70 2e                	jo     1862 <sysEnter_Vector-0x12e79e>
    1834:	63 00                	arpl   WORD PTR [eax],ax
    1836:	01 00                	add    DWORD PTR [eax],eax
    1838:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    183b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1842:	63 
    1843:	2e                   	cs
    1844:	68 00 02 00 00       	push   0x200
    1849:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    184c:	6d                   	ins    DWORD PTR es:[edi],dx
    184d:	6f                   	outs   dx,DWORD PTR ds:[esi]
    184e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    184f:	2e                   	cs
    1850:	68 00 03 00 00       	push   0x300
    1855:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    185c:	03 00                	add    eax,DWORD PTR [eax]
    185e:	00 00                	add    BYTE PTR [eax],al
    1860:	00 05 02 50 4a 00    	add    BYTE PTR ds:0x4a5002,al
    1866:	9f                   	lahf   
    1867:	03 1a                	add    ebx,DWORD PTR [edx]
    1869:	01 08                	add    DWORD PTR [eax],ecx
    186b:	21 3d 41 ad ad 67    	and    DWORD PTR ds:0x67adad41,edi
    1871:	d8 92 bb 77 c9 d7    	fcom   DWORD PTR [edx-0x28368845]
    1877:	02 02                	add    al,BYTE PTR [edx]
    1879:	00 01                	add    BYTE PTR [ecx],al
    187b:	01 6b 00             	add    DWORD PTR [ebx+0x0],ebp
    187e:	00 00                	add    BYTE PTR [eax],al
    1880:	02 00                	add    al,BYTE PTR [eax]
    1882:	2b 00                	sub    eax,DWORD PTR [eax]
    1884:	00 00                	add    BYTE PTR [eax],al
    1886:	01 01                	add    DWORD PTR [ecx],eax
    1888:	fb                   	sti    
    1889:	0e                   	push   cs
    188a:	0d 00 01 01 01       	or     eax,0x1010100
    188f:	01 00                	add    DWORD PTR [eax],eax
    1891:	00 00                	add    BYTE PTR [eax],al
    1893:	01 00                	add    DWORD PTR [eax],eax
    1895:	00 01                	add    BYTE PTR [ecx],al
    1897:	73 72                	jae    190b <sysEnter_Vector-0x12e6f5>
    1899:	63 2f                	arpl   WORD PTR [edi],bp
    189b:	73 74                	jae    1911 <sysEnter_Vector-0x12e6ef>
    189d:	72 69                	jb     1908 <sysEnter_Vector-0x12e6f8>
    189f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    18a0:	67 73 00             	addr16 jae 18a3 <sysEnter_Vector-0x12e75d>
    18a3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    18a6:	72 63                	jb     190b <sysEnter_Vector-0x12e6f5>
    18a8:	70 79                	jo     1923 <sysEnter_Vector-0x12e6dd>
    18aa:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    18ad:	01 00                	add    DWORD PTR [eax],eax
    18af:	00 00                	add    BYTE PTR [eax],al
    18b1:	00 05 02 cc 4a 00    	add    BYTE PTR ds:0x4acc02,al
    18b7:	9f                   	lahf   
    18b8:	16                   	push   ss
    18b9:	f3 67 00 02          	repz add BYTE PTR [bp+si],al
    18bd:	04 01                	add    al,0x1
    18bf:	06                   	push   es
    18c0:	20 06                	and    BYTE PTR [esi],al
    18c2:	08 ca                	or     dl,cl
    18c4:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    18ca:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    18cd:	06                   	push   es
    18ce:	20 06                	and    BYTE PTR [esi],al
    18d0:	08 ca                	or     dl,cl
    18d2:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    18d8:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    18db:	06                   	push   es
    18dc:	20 00                	and    BYTE PTR [eax],al
    18de:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    18e1:	08 c8                	or     al,cl
    18e3:	06                   	push   es
    18e4:	ca 3d 02             	retf   0x23d
    18e7:	02 00                	add    al,BYTE PTR [eax]
    18e9:	01 01                	add    DWORD PTR [ecx],eax
    18eb:	c5 00                	lds    eax,FWORD PTR [eax]
    18ed:	00 00                	add    BYTE PTR [eax],al
    18ef:	02 00                	add    al,BYTE PTR [eax]
    18f1:	98                   	cwde   
    18f2:	00 00                	add    BYTE PTR [eax],al
    18f4:	00 01                	add    BYTE PTR [ecx],al
    18f6:	01 fb                	add    ebx,edi
    18f8:	0e                   	push   cs
    18f9:	0d 00 01 01 01       	or     eax,0x1010100
    18fe:	01 00                	add    DWORD PTR [eax],eax
    1900:	00 00                	add    BYTE PTR [eax],al
    1902:	01 00                	add    DWORD PTR [eax],eax
    1904:	00 01                	add    BYTE PTR [ecx],al
    1906:	73 72                	jae    197a <sysEnter_Vector-0x12e686>
    1908:	63 2f                	arpl   WORD PTR [edi],bp
    190a:	73 74                	jae    1980 <sysEnter_Vector-0x12e680>
    190c:	72 69                	jb     1977 <sysEnter_Vector-0x12e689>
    190e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    190f:	67 73 00             	addr16 jae 1912 <sysEnter_Vector-0x12e6ee>
    1912:	2f                   	das    
    1913:	68 6f 6d 65 2f       	push   0x2f656d6f
    1918:	79 6f                	jns    1989 <sysEnter_Vector-0x12e677>
    191a:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1921:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1924:	73 73                	jae    1999 <sysEnter_Vector-0x12e667>
    1926:	2f                   	das    
    1927:	6c                   	ins    BYTE PTR es:[edi],dx
    1928:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    192f:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1935:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    193b:	78 2d                	js     196a <sysEnter_Vector-0x12e696>
    193d:	67 6e                	outs   dx,BYTE PTR ds:[si]
    193f:	75 2f                	jne    1970 <sysEnter_Vector-0x12e690>
    1941:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1946:	2f                   	das    
    1947:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    194e:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1951:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1955:	65 00 00             	add    BYTE PTR gs:[eax],al
    1958:	73 74                	jae    19ce <sysEnter_Vector-0x12e632>
    195a:	72 69                	jb     19c5 <sysEnter_Vector-0x12e63b>
    195c:	73 6e                	jae    19cc <sysEnter_Vector-0x12e634>
    195e:	75 6d                	jne    19cd <sysEnter_Vector-0x12e633>
    1960:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1963:	01 00                	add    DWORD PTR [eax],eax
    1965:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1968:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    196f:	63 
    1970:	2e                   	cs
    1971:	68 00 02 00 00       	push   0x200
    1976:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    1979:	6d                   	ins    DWORD PTR es:[edi],dx
    197a:	6f                   	outs   dx,DWORD PTR ds:[esi]
    197b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    197c:	2e                   	cs
    197d:	68 00 03 00 00       	push   0x300
    1982:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1989:	03 00                	add    eax,DWORD PTR [eax]
    198b:	00 00                	add    BYTE PTR [eax],al
    198d:	00 05 02 94 4b 00    	add    BYTE PTR ds:0x4b9402,al
    1993:	9f                   	lahf   
    1994:	1a 08                	sbb    cl,BYTE PTR [eax]
    1996:	59                   	pop    ecx
    1997:	00 02                	add    BYTE PTR [edx],al
    1999:	04 01                	add    al,0x1
    199b:	06                   	push   es
    199c:	66                   	data16
    199d:	00 02                	add    BYTE PTR [edx],al
    199f:	04 02                	add    al,0x2
    19a1:	66 06                	pushw  es
    19a3:	75 59                	jne    19fe <sysEnter_Vector-0x12e602>
    19a5:	31 f3                	xor    ebx,esi
    19a7:	76 2f                	jbe    19d8 <sysEnter_Vector-0x12e628>
    19a9:	08 e5                	or     ch,ah
    19ab:	72 08                	jb     19b5 <sysEnter_Vector-0x12e64b>
    19ad:	23 5a 02             	and    ebx,DWORD PTR [edx+0x2]
    19b0:	02 00                	add    al,BYTE PTR [eax]
    19b2:	01 01                	add    DWORD PTR [ecx],eax
    19b4:	cf                   	iret   
    19b5:	00 00                	add    BYTE PTR [eax],al
    19b7:	00 02                	add    BYTE PTR [edx],al
    19b9:	00 a2 00 00 00 01    	add    BYTE PTR [edx+0x1000000],ah
    19bf:	01 fb                	add    ebx,edi
    19c1:	0e                   	push   cs
    19c2:	0d 00 01 01 01       	or     eax,0x1010100
    19c7:	01 00                	add    DWORD PTR [eax],eax
    19c9:	00 00                	add    BYTE PTR [eax],al
    19cb:	01 00                	add    DWORD PTR [eax],eax
    19cd:	00 01                	add    BYTE PTR [ecx],al
    19cf:	73 72                	jae    1a43 <sysEnter_Vector-0x12e5bd>
    19d1:	63 2f                	arpl   WORD PTR [edi],bp
    19d3:	73 74                	jae    1a49 <sysEnter_Vector-0x12e5b7>
    19d5:	72 69                	jb     1a40 <sysEnter_Vector-0x12e5c0>
    19d7:	6e                   	outs   dx,BYTE PTR ds:[esi]
    19d8:	67 73 00             	addr16 jae 19db <sysEnter_Vector-0x12e625>
    19db:	2f                   	das    
    19dc:	68 6f 6d 65 2f       	push   0x2f656d6f
    19e1:	79 6f                	jns    1a52 <sysEnter_Vector-0x12e5ae>
    19e3:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    19ea:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    19ed:	73 73                	jae    1a62 <sysEnter_Vector-0x12e59e>
    19ef:	2f                   	das    
    19f0:	6c                   	ins    BYTE PTR es:[edi],dx
    19f1:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    19f8:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    19fe:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1a04:	78 2d                	js     1a33 <sysEnter_Vector-0x12e5cd>
    1a06:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1a08:	75 2f                	jne    1a39 <sysEnter_Vector-0x12e5c7>
    1a0a:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1a0f:	2f                   	das    
    1a10:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1a17:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1a1a:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1a1e:	65 00 00             	add    BYTE PTR gs:[eax],al
    1a21:	73 74                	jae    1a97 <sysEnter_Vector-0x12e569>
    1a23:	72 6c                	jb     1a91 <sysEnter_Vector-0x12e56f>
    1a25:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1a27:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1a2a:	01 00                	add    DWORD PTR [eax],eax
    1a2c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1a2f:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1a36:	63 
    1a37:	2e                   	cs
    1a38:	68 00 02 00 00       	push   0x200
    1a3d:	73 74                	jae    1ab3 <sysEnter_Vector-0x12e54d>
    1a3f:	64                   	fs
    1a40:	64                   	fs
    1a41:	65                   	gs
    1a42:	66                   	data16
    1a43:	2e                   	cs
    1a44:	68 00 02 00 00       	push   0x200
    1a49:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    1a4c:	6d                   	ins    DWORD PTR es:[edi],dx
    1a4d:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1a4e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1a4f:	2e                   	cs
    1a50:	68 00 03 00 00       	push   0x300
    1a55:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1a5c:	03 00                	add    eax,DWORD PTR [eax]
    1a5e:	00 00                	add    BYTE PTR [eax],al
    1a60:	00 05 02 20 4c 00    	add    BYTE PTR ds:0x4c2002,al
    1a66:	9f                   	lahf   
    1a67:	15 f3 75 2f 49       	adc    eax,0x492f75f3
    1a6c:	e6 3d                	out    0x3d,al
    1a6e:	31 c9                	xor    ecx,ecx
    1a70:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1a71:	31 f3                	xor    ebx,esi
    1a73:	75 2f                	jne    1aa4 <sysEnter_Vector-0x12e55c>
    1a75:	49                   	dec    ecx
    1a76:	00 02                	add    BYTE PTR [edx],al
    1a78:	04 01                	add    al,0x1
    1a7a:	06                   	push   es
    1a7b:	e4 06                	in     al,0x6
    1a7d:	84 3d 31 c9 e5 02    	test   BYTE PTR ds:0x2e5c931,bh
    1a83:	02 00                	add    al,BYTE PTR [eax]
    1a85:	01 01                	add    DWORD PTR [ecx],eax
    1a87:	c1 00 00             	rol    DWORD PTR [eax],0x0
    1a8a:	00 02                	add    BYTE PTR [edx],al
    1a8c:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    1a8f:	00 00                	add    BYTE PTR [eax],al
    1a91:	01 01                	add    DWORD PTR [ecx],eax
    1a93:	fb                   	sti    
    1a94:	0e                   	push   cs
    1a95:	0d 00 01 01 01       	or     eax,0x1010100
    1a9a:	01 00                	add    DWORD PTR [eax],eax
    1a9c:	00 00                	add    BYTE PTR [eax],al
    1a9e:	01 00                	add    DWORD PTR [eax],eax
    1aa0:	00 01                	add    BYTE PTR [ecx],al
    1aa2:	73 72                	jae    1b16 <sysEnter_Vector-0x12e4ea>
    1aa4:	63 2f                	arpl   WORD PTR [edi],bp
    1aa6:	73 74                	jae    1b1c <sysEnter_Vector-0x12e4e4>
    1aa8:	72 69                	jb     1b13 <sysEnter_Vector-0x12e4ed>
    1aaa:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1aab:	67 73 00             	addr16 jae 1aae <sysEnter_Vector-0x12e552>
    1aae:	2f                   	das    
    1aaf:	68 6f 6d 65 2f       	push   0x2f656d6f
    1ab4:	79 6f                	jns    1b25 <sysEnter_Vector-0x12e4db>
    1ab6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1abd:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1ac0:	73 73                	jae    1b35 <sysEnter_Vector-0x12e4cb>
    1ac2:	2f                   	das    
    1ac3:	6c                   	ins    BYTE PTR es:[edi],dx
    1ac4:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1acb:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1ad1:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1ad7:	78 2d                	js     1b06 <sysEnter_Vector-0x12e4fa>
    1ad9:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1adb:	75 2f                	jne    1b0c <sysEnter_Vector-0x12e4f4>
    1add:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1ae2:	2f                   	das    
    1ae3:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1aea:	00 00                	add    BYTE PTR [eax],al
    1aec:	73 74                	jae    1b62 <sysEnter_Vector-0x12e49e>
    1aee:	72 6e                	jb     1b5e <sysEnter_Vector-0x12e4a2>
    1af0:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    1af3:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1af6:	01 00                	add    DWORD PTR [eax],eax
    1af8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1afb:	64                   	fs
    1afc:	64                   	fs
    1afd:	65                   	gs
    1afe:	66                   	data16
    1aff:	2e                   	cs
    1b00:	68 00 02 00 00       	push   0x200
    1b05:	00 00                	add    BYTE PTR [eax],al
    1b07:	05 02 c4 4c 00       	add    eax,0x4cc402
    1b0c:	9f                   	lahf   
    1b0d:	03 0c 01             	add    ecx,DWORD PTR [ecx+eax*1]
    1b10:	c9                   	leave  
    1b11:	2f                   	das    
    1b12:	f3 00 02             	repz add BYTE PTR [edx],al
    1b15:	04 01                	add    al,0x1
    1b17:	06                   	push   es
    1b18:	f2 00 02             	repnz add BYTE PTR [edx],al
    1b1b:	04 02                	add    al,0x2
    1b1d:	74 06                	je     1b25 <sysEnter_Vector-0x12e4db>
    1b1f:	75 9f                	jne    1ac0 <sysEnter_Vector-0x12e540>
    1b21:	70 00                	jo     1b23 <sysEnter_Vector-0x12e4dd>
    1b23:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b26:	06                   	push   es
    1b27:	ba 06 6b 59 31       	mov    edx,0x31596b06
    1b2c:	c9                   	leave  
    1b2d:	2f                   	das    
    1b2e:	f3 00 02             	repz add BYTE PTR [edx],al
    1b31:	04 01                	add    al,0x1
    1b33:	06                   	push   es
    1b34:	f2 00 02             	repnz add BYTE PTR [edx],al
    1b37:	04 02                	add    al,0x2
    1b39:	74 06                	je     1b41 <sysEnter_Vector-0x12e4bf>
    1b3b:	75 9f                	jne    1adc <sysEnter_Vector-0x12e524>
    1b3d:	70 00                	jo     1b3f <sysEnter_Vector-0x12e4c1>
    1b3f:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b42:	06                   	push   es
    1b43:	ba 06 6b 59 02       	mov    edx,0x2596b06
    1b48:	02 00                	add    al,BYTE PTR [eax]
    1b4a:	01 01                	add    DWORD PTR [ecx],eax
    1b4c:	a3 00 00 00 02       	mov    ds:0x2000000,eax
    1b51:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    1b54:	00 00                	add    BYTE PTR [eax],al
    1b56:	01 01                	add    DWORD PTR [ecx],eax
    1b58:	fb                   	sti    
    1b59:	0e                   	push   cs
    1b5a:	0d 00 01 01 01       	or     eax,0x1010100
    1b5f:	01 00                	add    DWORD PTR [eax],eax
    1b61:	00 00                	add    BYTE PTR [eax],al
    1b63:	01 00                	add    DWORD PTR [eax],eax
    1b65:	00 01                	add    BYTE PTR [ecx],al
    1b67:	73 72                	jae    1bdb <sysEnter_Vector-0x12e425>
    1b69:	63 2f                	arpl   WORD PTR [edi],bp
    1b6b:	73 74                	jae    1be1 <sysEnter_Vector-0x12e41f>
    1b6d:	72 69                	jb     1bd8 <sysEnter_Vector-0x12e428>
    1b6f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1b70:	67 73 00             	addr16 jae 1b73 <sysEnter_Vector-0x12e48d>
    1b73:	2f                   	das    
    1b74:	68 6f 6d 65 2f       	push   0x2f656d6f
    1b79:	79 6f                	jns    1bea <sysEnter_Vector-0x12e416>
    1b7b:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1b82:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1b85:	73 73                	jae    1bfa <sysEnter_Vector-0x12e406>
    1b87:	2f                   	das    
    1b88:	6c                   	ins    BYTE PTR es:[edi],dx
    1b89:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1b90:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1b96:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1b9c:	78 2d                	js     1bcb <sysEnter_Vector-0x12e435>
    1b9e:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1ba0:	75 2f                	jne    1bd1 <sysEnter_Vector-0x12e42f>
    1ba2:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1ba7:	2f                   	das    
    1ba8:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1baf:	00 00                	add    BYTE PTR [eax],al
    1bb1:	73 74                	jae    1c27 <sysEnter_Vector-0x12e3d9>
    1bb3:	72 6e                	jb     1c23 <sysEnter_Vector-0x12e3dd>
    1bb5:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    1bb8:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1bbb:	01 00                	add    DWORD PTR [eax],eax
    1bbd:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1bc0:	64                   	fs
    1bc1:	64                   	fs
    1bc2:	65                   	gs
    1bc3:	66                   	data16
    1bc4:	2e                   	cs
    1bc5:	68 00 02 00 00       	push   0x200
    1bca:	00 00                	add    BYTE PTR [eax],al
    1bcc:	05 02 94 4d 00       	add    eax,0x4d9402
    1bd1:	9f                   	lahf   
    1bd2:	03 0d 01 f3 67 2f    	add    ecx,DWORD PTR ds:0x2f67f301
    1bd8:	08 67 48             	or     BYTE PTR [edi+0x48],ah
    1bdb:	00 02                	add    BYTE PTR [edx],al
    1bdd:	04 01                	add    al,0x1
    1bdf:	06                   	push   es
    1be0:	66 06                	pushw  es
    1be2:	a2 2f bb 48 6a       	mov    ds:0x6a48bb2f,al
    1be7:	67 67 3d 31 c9 08 13 	addr32 addr16 cmp eax,0x1308c931
    1bee:	02 02                	add    al,BYTE PTR [edx]
    1bf0:	00 01                	add    BYTE PTR [ecx],al
    1bf2:	01 d8                	add    eax,ebx
    1bf4:	00 00                	add    BYTE PTR [eax],al
    1bf6:	00 02                	add    BYTE PTR [edx],al
    1bf8:	00 2b                	add    BYTE PTR [ebx],ch
    1bfa:	00 00                	add    BYTE PTR [eax],al
    1bfc:	00 01                	add    BYTE PTR [ecx],al
    1bfe:	01 fb                	add    ebx,edi
    1c00:	0e                   	push   cs
    1c01:	0d 00 01 01 01       	or     eax,0x1010100
    1c06:	01 00                	add    DWORD PTR [eax],eax
    1c08:	00 00                	add    BYTE PTR [eax],al
    1c0a:	01 00                	add    DWORD PTR [eax],eax
    1c0c:	00 01                	add    BYTE PTR [ecx],al
    1c0e:	73 72                	jae    1c82 <sysEnter_Vector-0x12e37e>
    1c10:	63 2f                	arpl   WORD PTR [edi],bp
    1c12:	73 74                	jae    1c88 <sysEnter_Vector-0x12e378>
    1c14:	72 69                	jb     1c7f <sysEnter_Vector-0x12e381>
    1c16:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1c17:	67 73 00             	addr16 jae 1c1a <sysEnter_Vector-0x12e3e6>
    1c1a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1c1d:	72 6f                	jb     1c8e <sysEnter_Vector-0x12e372>
    1c1f:	75 6c                	jne    1c8d <sysEnter_Vector-0x12e373>
    1c21:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1c24:	01 00                	add    DWORD PTR [eax],eax
    1c26:	00 00                	add    BYTE PTR [eax],al
    1c28:	00 05 02 20 4e 00    	add    BYTE PTR ds:0x4e2002,al
    1c2e:	9f                   	lahf   
    1c2f:	03 3b                	add    edi,DWORD PTR [ebx]
    1c31:	01 08                	add    DWORD PTR [eax],ecx
    1c33:	2f                   	das    
    1c34:	40                   	inc    eax
    1c35:	00 02                	add    BYTE PTR [edx],al
    1c37:	04 01                	add    al,0x1
    1c39:	7a 00                	jp     1c3b <sysEnter_Vector-0x12e3c5>
    1c3b:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1c3e:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1c3f:	59                   	pop    ecx
    1c40:	59                   	pop    ecx
    1c41:	75 c9                	jne    1c0c <sysEnter_Vector-0x12e3f4>
    1c43:	59                   	pop    ecx
    1c44:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1c45:	00 02                	add    BYTE PTR [edx],al
    1c47:	04 02                	add    al,0x2
    1c49:	06                   	push   es
    1c4a:	66                   	data16
    1c4b:	00 02                	add    BYTE PTR [edx],al
    1c4d:	04 03                	add    al,0x3
    1c4f:	66 06                	pushw  es
    1c51:	59                   	pop    ecx
    1c52:	00 02                	add    BYTE PTR [edx],al
    1c54:	04 01                	add    al,0x1
    1c56:	06                   	push   es
    1c57:	74 06                	je     1c5f <sysEnter_Vector-0x12e3a1>
    1c59:	75 91                	jne    1bec <sysEnter_Vector-0x12e414>
    1c5b:	3d 76 67 00 02       	cmp    eax,0x2006776
    1c60:	04 01                	add    al,0x1
    1c62:	06                   	push   es
    1c63:	58                   	pop    eax
    1c64:	00 02                	add    BYTE PTR [edx],al
    1c66:	04 02                	add    al,0x2
    1c68:	74 00                	je     1c6a <sysEnter_Vector-0x12e396>
    1c6a:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1c6d:	58                   	pop    eax
    1c6e:	06                   	push   es
    1c6f:	3d 08 21 08 2f       	cmp    eax,0x2f082108
    1c74:	9f                   	lahf   
    1c75:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1c79:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1c7c:	06                   	push   es
    1c7d:	58                   	pop    eax
    1c7e:	00 02                	add    BYTE PTR [edx],al
    1c80:	04 03                	add    al,0x3
    1c82:	58                   	pop    eax
    1c83:	00 02                	add    BYTE PTR [edx],al
    1c85:	04 04                	add    al,0x4
    1c87:	74 00                	je     1c89 <sysEnter_Vector-0x12e377>
    1c89:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1c8c:	58                   	pop    eax
    1c8d:	06                   	push   es
    1c8e:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1c91:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1c94:	06                   	push   es
    1c95:	66                   	data16
    1c96:	00 02                	add    BYTE PTR [edx],al
    1c98:	04 02                	add    al,0x2
    1c9a:	58                   	pop    eax
    1c9b:	00 02                	add    BYTE PTR [edx],al
    1c9d:	04 03                	add    al,0x3
    1c9f:	58                   	pop    eax
    1ca0:	06                   	push   es
    1ca1:	67 76 59             	addr16 jbe 1cfd <sysEnter_Vector-0x12e303>
    1ca4:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    1ca8:	03 10                	add    edx,DWORD PTR [eax]
    1caa:	ac                   	lods   al,BYTE PTR ds:[esi]
    1cab:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    1cae:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1cb1:	20 67 75             	and    BYTE PTR [edi+0x75],ah
    1cb4:	67 2f                	addr16 das 
    1cb6:	67 00 02             	add    BYTE PTR [bp+si],al
    1cb9:	04 01                	add    al,0x1
    1cbb:	06                   	push   es
    1cbc:	66                   	data16
    1cbd:	00 02                	add    BYTE PTR [edx],al
    1cbf:	04 02                	add    al,0x2
    1cc1:	58                   	pop    eax
    1cc2:	00 02                	add    BYTE PTR [edx],al
    1cc4:	04 04                	add    al,0x4
    1cc6:	3c 06                	cmp    al,0x6
    1cc8:	59                   	pop    ecx
    1cc9:	2f                   	das    
    1cca:	02 08                	add    cl,BYTE PTR [eax]
    1ccc:	00 01                	add    BYTE PTR [ecx],al
    1cce:	01 43 00             	add    DWORD PTR [ebx+0x0],eax
    1cd1:	00 00                	add    BYTE PTR [eax],al
    1cd3:	02 00                	add    al,BYTE PTR [eax]
    1cd5:	2d 00 00 00 01       	sub    eax,0x1000000
    1cda:	01 fb                	add    ebx,edi
    1cdc:	0e                   	push   cs
    1cdd:	0d 00 01 01 01       	or     eax,0x1010100
    1ce2:	01 00                	add    DWORD PTR [eax],eax
    1ce4:	00 00                	add    BYTE PTR [eax],al
    1ce6:	01 00                	add    DWORD PTR [eax],eax
    1ce8:	00 01                	add    BYTE PTR [ecx],al
    1cea:	73 72                	jae    1d5e <sysEnter_Vector-0x12e2a2>
    1cec:	63 2f                	arpl   WORD PTR [edi],bp
    1cee:	73 74                	jae    1d64 <sysEnter_Vector-0x12e29c>
    1cf0:	72 69                	jb     1d5b <sysEnter_Vector-0x12e2a5>
    1cf2:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1cf3:	67 73 00             	addr16 jae 1cf6 <sysEnter_Vector-0x12e30a>
    1cf6:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1cf9:	72 70                	jb     1d6b <sysEnter_Vector-0x12e295>
    1cfb:	61                   	popa   
    1cfc:	72 74                	jb     1d72 <sysEnter_Vector-0x12e28e>
    1cfe:	73 2e                	jae    1d2e <sysEnter_Vector-0x12e2d2>
    1d00:	63 00                	arpl   WORD PTR [eax],ax
    1d02:	01 00                	add    DWORD PTR [eax],eax
    1d04:	00 00                	add    BYTE PTR [eax],al
    1d06:	00 05 02 a0 4f 00    	add    BYTE PTR ds:0x4fa002,al
    1d0c:	9f                   	lahf   
    1d0d:	13 c9                	adc    ecx,ecx
    1d0f:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1d10:	3d 02 02 00 01       	cmp    eax,0x1000202
    1d15:	01 04 01             	add    DWORD PTR [ecx+eax*1],eax
    1d18:	00 00                	add    BYTE PTR [eax],al
    1d1a:	02 00                	add    al,BYTE PTR [eax]
    1d1c:	2b 00                	sub    eax,DWORD PTR [eax]
    1d1e:	00 00                	add    BYTE PTR [eax],al
    1d20:	01 01                	add    DWORD PTR [ecx],eax
    1d22:	fb                   	sti    
    1d23:	0e                   	push   cs
    1d24:	0d 00 01 01 01       	or     eax,0x1010100
    1d29:	01 00                	add    DWORD PTR [eax],eax
    1d2b:	00 00                	add    BYTE PTR [eax],al
    1d2d:	01 00                	add    DWORD PTR [eax],eax
    1d2f:	00 01                	add    BYTE PTR [ecx],al
    1d31:	73 72                	jae    1da5 <sysEnter_Vector-0x12e25b>
    1d33:	63 2f                	arpl   WORD PTR [edi],bp
    1d35:	73 74                	jae    1dab <sysEnter_Vector-0x12e255>
    1d37:	72 69                	jb     1da2 <sysEnter_Vector-0x12e25e>
    1d39:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1d3a:	67 73 00             	addr16 jae 1d3d <sysEnter_Vector-0x12e2c3>
    1d3d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1d40:	72 74                	jb     1db6 <sysEnter_Vector-0x12e24a>
    1d42:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1d43:	6c                   	ins    BYTE PTR es:[edi],dx
    1d44:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1d47:	01 00                	add    DWORD PTR [eax],eax
    1d49:	00 00                	add    BYTE PTR [eax],al
    1d4b:	00 05 02 c0 4f 00    	add    BYTE PTR ds:0x4fc002,al
    1d51:	9f                   	lahf   
    1d52:	03 d7                	add    edx,edi
    1d54:	00 01                	add    BYTE PTR [ecx],al
    1d56:	08 2f                	or     BYTE PTR [edi],ch
    1d58:	40                   	inc    eax
    1d59:	00 02                	add    BYTE PTR [edx],al
    1d5b:	04 01                	add    al,0x1
    1d5d:	7c 00                	jl     1d5f <sysEnter_Vector-0x12e2a1>
    1d5f:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1d62:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1d63:	59                   	pop    ecx
    1d64:	59                   	pop    ecx
    1d65:	75 c9                	jne    1d30 <sysEnter_Vector-0x12e2d0>
    1d67:	59                   	pop    ecx
    1d68:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1d69:	00 02                	add    BYTE PTR [edx],al
    1d6b:	04 02                	add    al,0x2
    1d6d:	06                   	push   es
    1d6e:	66                   	data16
    1d6f:	00 02                	add    BYTE PTR [edx],al
    1d71:	04 03                	add    al,0x3
    1d73:	66 06                	pushw  es
    1d75:	59                   	pop    ecx
    1d76:	00 02                	add    BYTE PTR [edx],al
    1d78:	04 01                	add    al,0x1
    1d7a:	06                   	push   es
    1d7b:	74 06                	je     1d83 <sysEnter_Vector-0x12e27d>
    1d7d:	75 91                	jne    1d10 <sysEnter_Vector-0x12e2f0>
    1d7f:	3d 76 67 00 02       	cmp    eax,0x2006776
    1d84:	04 01                	add    al,0x1
    1d86:	06                   	push   es
    1d87:	58                   	pop    eax
    1d88:	00 02                	add    BYTE PTR [edx],al
    1d8a:	04 02                	add    al,0x2
    1d8c:	74 00                	je     1d8e <sysEnter_Vector-0x12e272>
    1d8e:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1d91:	58                   	pop    eax
    1d92:	06                   	push   es
    1d93:	03 13                	add    edx,DWORD PTR [ebx]
    1d95:	3c 00                	cmp    al,0x0
    1d97:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1d9a:	06                   	push   es
    1d9b:	66                   	data16
    1d9c:	00 02                	add    BYTE PTR [edx],al
    1d9e:	04 02                	add    al,0x2
    1da0:	74 00                	je     1da2 <sysEnter_Vector-0x12e25e>
    1da2:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1da5:	06                   	push   es
    1da6:	59                   	pop    ecx
    1da7:	00 02                	add    BYTE PTR [edx],al
    1da9:	04 04                	add    al,0x4
    1dab:	08 3d 00 02 04 04    	or     BYTE PTR ds:0x4040200,bh
    1db1:	f3 9f                	repz lahf 
    1db3:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1db7:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1dba:	06                   	push   es
    1dbb:	58                   	pop    eax
    1dbc:	00 02                	add    BYTE PTR [edx],al
    1dbe:	04 03                	add    al,0x3
    1dc0:	58                   	pop    eax
    1dc1:	00 02                	add    BYTE PTR [edx],al
    1dc3:	04 04                	add    al,0x4
    1dc5:	74 00                	je     1dc7 <sysEnter_Vector-0x12e239>
    1dc7:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1dca:	58                   	pop    eax
    1dcb:	06                   	push   es
    1dcc:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1dcf:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1dd2:	06                   	push   es
    1dd3:	66                   	data16
    1dd4:	00 02                	add    BYTE PTR [edx],al
    1dd6:	04 02                	add    al,0x2
    1dd8:	58                   	pop    eax
    1dd9:	00 02                	add    BYTE PTR [edx],al
    1ddb:	04 03                	add    al,0x3
    1ddd:	58                   	pop    eax
    1dde:	06                   	push   es
    1ddf:	59                   	pop    ecx
    1de0:	76 59                	jbe    1e3b <sysEnter_Vector-0x12e1c5>
    1de2:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    1de6:	03 10                	add    edx,DWORD PTR [eax]
    1de8:	ac                   	lods   al,BYTE PTR ds:[esi]
    1de9:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    1dec:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1def:	20 67 00             	and    BYTE PTR [edi+0x0],ah
    1df2:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1df5:	06                   	push   es
    1df6:	66                   	data16
    1df7:	00 02                	add    BYTE PTR [edx],al
    1df9:	04 02                	add    al,0x2
    1dfb:	74 00                	je     1dfd <sysEnter_Vector-0x12e203>
    1dfd:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1e00:	58                   	pop    eax
    1e01:	06                   	push   es
    1e02:	4b                   	dec    ebx
    1e03:	67 2f                	addr16 das 
    1e05:	67 00 02             	add    BYTE PTR [bp+si],al
    1e08:	04 01                	add    al,0x1
    1e0a:	06                   	push   es
    1e0b:	66                   	data16
    1e0c:	00 02                	add    BYTE PTR [edx],al
    1e0e:	04 02                	add    al,0x2
    1e10:	58                   	pop    eax
    1e11:	00 02                	add    BYTE PTR [edx],al
    1e13:	04 04                	add    al,0x4
    1e15:	3c 06                	cmp    al,0x6
    1e17:	59                   	pop    ecx
    1e18:	2f                   	das    
    1e19:	02 08                	add    cl,BYTE PTR [eax]
    1e1b:	00 01                	add    BYTE PTR [ecx],al
    1e1d:	01 5e 00             	add    DWORD PTR [esi+0x0],ebx
    1e20:	00 00                	add    BYTE PTR [eax],al
    1e22:	02 00                	add    al,BYTE PTR [eax]
    1e24:	2c 00                	sub    al,0x0
    1e26:	00 00                	add    BYTE PTR [eax],al
    1e28:	01 01                	add    DWORD PTR [ecx],eax
    1e2a:	fb                   	sti    
    1e2b:	0e                   	push   cs
    1e2c:	0d 00 01 01 01       	or     eax,0x1010100
    1e31:	01 00                	add    DWORD PTR [eax],eax
    1e33:	00 00                	add    BYTE PTR [eax],al
    1e35:	01 00                	add    DWORD PTR [eax],eax
    1e37:	00 01                	add    BYTE PTR [ecx],al
    1e39:	73 72                	jae    1ead <sysEnter_Vector-0x12e153>
    1e3b:	63 2f                	arpl   WORD PTR [edi],bp
    1e3d:	73 74                	jae    1eb3 <sysEnter_Vector-0x12e14d>
    1e3f:	72 69                	jb     1eaa <sysEnter_Vector-0x12e156>
    1e41:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1e42:	67 73 00             	addr16 jae 1e45 <sysEnter_Vector-0x12e1bb>
    1e45:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1e48:	72 74                	jb     1ebe <sysEnter_Vector-0x12e142>
    1e4a:	72 69                	jb     1eb5 <sysEnter_Vector-0x12e14b>
    1e4c:	6d                   	ins    DWORD PTR es:[edi],dx
    1e4d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1e50:	01 00                	add    DWORD PTR [eax],eax
    1e52:	00 00                	add    BYTE PTR [eax],al
    1e54:	00 05 02 5c 51 00    	add    BYTE PTR ds:0x515c02,al
    1e5a:	9f                   	lahf   
    1e5b:	15 08 13 bf 30       	adc    eax,0x30bf1308
    1e60:	48                   	dec    eax
    1e61:	b3 08                	mov    bl,0x8
    1e63:	9f                   	lahf   
    1e64:	30 b8 00 02 04 01    	xor    BYTE PTR [eax+0x1040200],bh
    1e6a:	06                   	push   es
    1e6b:	82                   	(bad)  
    1e6c:	06                   	push   es
    1e6d:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1e6e:	84 00                	test   BYTE PTR [eax],al
    1e70:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1e73:	06                   	push   es
    1e74:	20 06                	and    BYTE PTR [esi],al
    1e76:	08 ca                	or     dl,cl
    1e78:	69 f3 d7 02 02 00    	imul   esi,ebx,0x202d7
    1e7e:	01 01                	add    DWORD PTR [ecx],eax
    1e80:	d4 00                	aam    0x0
    1e82:	00 00                	add    BYTE PTR [eax],al
    1e84:	02 00                	add    al,BYTE PTR [eax]
    1e86:	9e                   	sahf   
    1e87:	00 00                	add    BYTE PTR [eax],al
    1e89:	00 01                	add    BYTE PTR [ecx],al
    1e8b:	01 fb                	add    ebx,edi
    1e8d:	0e                   	push   cs
    1e8e:	0d 00 01 01 01       	or     eax,0x1010100
    1e93:	01 00                	add    DWORD PTR [eax],eax
    1e95:	00 00                	add    BYTE PTR [eax],al
    1e97:	01 00                	add    DWORD PTR [eax],eax
    1e99:	00 01                	add    BYTE PTR [ecx],al
    1e9b:	73 72                	jae    1f0f <sysEnter_Vector-0x12e0f1>
    1e9d:	63 00                	arpl   WORD PTR [eax],ax
    1e9f:	2f                   	das    
    1ea0:	68 6f 6d 65 2f       	push   0x2f656d6f
    1ea5:	79 6f                	jns    1f16 <sysEnter_Vector-0x12e0ea>
    1ea7:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1eae:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1eb1:	73 73                	jae    1f26 <sysEnter_Vector-0x12e0da>
    1eb3:	2f                   	das    
    1eb4:	6c                   	ins    BYTE PTR es:[edi],dx
    1eb5:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1ebc:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1ec2:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1ec8:	78 2d                	js     1ef7 <sysEnter_Vector-0x12e109>
    1eca:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1ecc:	75 2f                	jne    1efd <sysEnter_Vector-0x12e103>
    1ece:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1ed3:	2f                   	das    
    1ed4:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1edb:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1ede:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1ee2:	65 00 00             	add    BYTE PTR gs:[eax],al
    1ee5:	73 74                	jae    1f5b <sysEnter_Vector-0x12e0a5>
    1ee7:	72 72                	jb     1f5b <sysEnter_Vector-0x12e0a5>
    1ee9:	65                   	gs
    1eea:	70 6c                	jo     1f58 <sysEnter_Vector-0x12e0a8>
    1eec:	61                   	popa   
    1eed:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
    1ef0:	63 00                	arpl   WORD PTR [eax],ax
    1ef2:	01 00                	add    DWORD PTR [eax],eax
    1ef4:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1ef7:	64                   	fs
    1ef8:	64                   	fs
    1ef9:	65                   	gs
    1efa:	66                   	data16
    1efb:	2e                   	cs
    1efc:	68 00 02 00 00       	push   0x200
    1f01:	73 74                	jae    1f77 <sysEnter_Vector-0x12e089>
    1f03:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1f0a:	63 
    1f0b:	2e                   	cs
    1f0c:	68 00 02 00 00       	push   0x200
    1f11:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    1f14:	6d                   	ins    DWORD PTR es:[edi],dx
    1f15:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1f16:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1f17:	2e                   	cs
    1f18:	68 00 03 00 00       	push   0x300
    1f1d:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1f24:	03 00                	add    eax,DWORD PTR [eax]
    1f26:	00 00                	add    BYTE PTR [eax],al
    1f28:	00 05 02 14 52 00    	add    BYTE PTR ds:0x521402,al
    1f2e:	9f                   	lahf   
    1f2f:	03 0d 01 08 2f 08    	add    ecx,DWORD PTR ds:0x82f0801
    1f35:	3f                   	aas    
    1f36:	76 5a                	jbe    1f92 <sysEnter_Vector-0x12e06e>
    1f38:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
    1f3b:	cb                   	retf   
    1f3c:	08 77 02             	or     BYTE PTR [edi+0x2],dh
    1f3f:	2a 15 02 28 13 03    	sub    dl,BYTE PTR ds:0x3132802
    1f45:	73 08                	jae    1f4f <sysEnter_Vector-0x12e0b1>
    1f47:	12 03                	adc    al,BYTE PTR [ebx]
    1f49:	11 08                	adc    DWORD PTR [eax],ecx
    1f4b:	c8 08 68 3d          	enter  0x6808,0x3d
    1f4f:	77 f3                	ja     1f44 <sysEnter_Vector-0x12e0bc>
    1f51:	08 3d 02 02 00 01    	or     BYTE PTR ds:0x1000202,bh
    1f57:	01 8c 00 00 00 02 00 	add    DWORD PTR [eax+eax*1+0x20000],ecx
    1f5e:	37                   	aaa    
    1f5f:	00 00                	add    BYTE PTR [eax],al
    1f61:	00 01                	add    BYTE PTR [ecx],al
    1f63:	01 fb                	add    ebx,edi
    1f65:	0e                   	push   cs
    1f66:	0d 00 01 01 01       	or     eax,0x1010100
    1f6b:	01 00                	add    DWORD PTR [eax],eax
    1f6d:	00 00                	add    BYTE PTR [eax],al
    1f6f:	01 00                	add    DWORD PTR [eax],eax
    1f71:	00 01                	add    BYTE PTR [ecx],al
    1f73:	73 72                	jae    1fe7 <sysEnter_Vector-0x12e019>
    1f75:	63 00                	arpl   WORD PTR [eax],ax
    1f77:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1f7e:	00 00                	add    BYTE PTR [eax],al
    1f80:	73 74                	jae    1ff6 <sysEnter_Vector-0x12e00a>
    1f82:	72 73                	jb     1ff7 <sysEnter_Vector-0x12e009>
    1f84:	74 72                	je     1ff8 <sysEnter_Vector-0x12e008>
    1f86:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1f89:	01 00                	add    DWORD PTR [eax],eax
    1f8b:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
    1f8e:	6d                   	ins    DWORD PTR es:[edi],dx
    1f8f:	6d                   	ins    DWORD PTR es:[edi],dx
    1f90:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1f91:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1f92:	2e                   	cs
    1f93:	68 00 02 00 00       	push   0x200
    1f98:	00 00                	add    BYTE PTR [eax],al
    1f9a:	05 02 58 53 00       	add    eax,0x535802
    1f9f:	9f                   	lahf   
    1fa0:	03 34 01             	add    esi,DWORD PTR [ecx+eax*1]
    1fa3:	08 27                	or     BYTE PTR [edi],ah
    1fa5:	68 3d 75 5b c9       	push   0xc95b753d
    1faa:	c9                   	leave  
    1fab:	5b                   	pop    ebx
    1fac:	3e                   	ds
    1fad:	75 5a                	jne    2009 <sysEnter_Vector-0x12dff7>
    1faf:	c9                   	leave  
    1fb0:	59                   	pop    ecx
    1fb1:	08 3f                	or     BYTE PTR [edi],bh
    1fb3:	2c 23                	sub    al,0x23
    1fb5:	03 73 58             	add    esi,DWORD PTR [ebx+0x58]
    1fb8:	1c 00                	sbb    al,0x0
    1fba:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1fbd:	06                   	push   es
    1fbe:	4a                   	dec    edx
    1fbf:	06                   	push   es
    1fc0:	03 13                	add    edx,DWORD PTR [ebx]
    1fc2:	9e                   	sahf   
    1fc3:	59                   	pop    ecx
    1fc4:	77 ec                	ja     1fb2 <sysEnter_Vector-0x12e04e>
    1fc6:	3d 75 5b cb 3e       	cmp    eax,0x3ecb5b75
    1fcb:	75 5a                	jne    2027 <sysEnter_Vector-0x12dfd9>
    1fcd:	08 3f                	or     BYTE PTR [edi],bh
    1fcf:	2c 23                	sub    al,0x23
    1fd1:	03 75 58             	add    esi,DWORD PTR [ebp+0x58]
    1fd4:	1e                   	push   ds
    1fd5:	00 02                	add    BYTE PTR [edx],al
    1fd7:	04 01                	add    al,0x1
    1fd9:	06                   	push   es
    1fda:	4a                   	dec    edx
    1fdb:	06                   	push   es
    1fdc:	03 0f                	add    ecx,DWORD PTR [edi]
    1fde:	9e                   	sahf   
    1fdf:	59                   	pop    ecx
    1fe0:	4d                   	dec    ebp
    1fe1:	c9                   	leave  
    1fe2:	d7                   	xlat   BYTE PTR ds:[ebx]
    1fe3:	02 02                	add    al,BYTE PTR [edx]
    1fe5:	00 01                	add    BYTE PTR [ecx],al
    1fe7:	01 32                	add    DWORD PTR [edx],esi
    1fe9:	03 00                	add    eax,DWORD PTR [eax]
    1feb:	00 02                	add    BYTE PTR [edx],al
    1fed:	00 bc 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bh
    1ff4:	fb                   	sti    
    1ff5:	0e                   	push   cs
    1ff6:	0d 00 01 01 01       	or     eax,0x1010100
    1ffb:	01 00                	add    DWORD PTR [eax],eax
    1ffd:	00 00                	add    BYTE PTR [eax],al
    1fff:	01 00                	add    DWORD PTR [eax],eax
    2001:	00 01                	add    BYTE PTR [ecx],al
    2003:	73 72                	jae    2077 <sysEnter_Vector-0x12df89>
    2005:	63 00                	arpl   WORD PTR [eax],ax
    2007:	2f                   	das    
    2008:	68 6f 6d 65 2f       	push   0x2f656d6f
    200d:	79 6f                	jns    207e <sysEnter_Vector-0x12df82>
    200f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    2016:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    2019:	73 73                	jae    208e <sysEnter_Vector-0x12df72>
    201b:	2f                   	das    
    201c:	6c                   	ins    BYTE PTR es:[edi],dx
    201d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    2024:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    202a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    2030:	78 2d                	js     205f <sysEnter_Vector-0x12dfa1>
    2032:	67 6e                	outs   dx,BYTE PTR ds:[si]
    2034:	75 2f                	jne    2065 <sysEnter_Vector-0x12df9b>
    2036:	35 2e 33 2e 30       	xor    eax,0x302e332e
    203b:	2f                   	das    
    203c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    2043:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    2046:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    204a:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    204d:	2e                   	cs
    204e:	2f                   	das    
    204f:	2e                   	cs
    2050:	2e                   	cs
    2051:	2f                   	das    
    2052:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    2056:	6a 2f                	push   0x2f
    2058:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    205b:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    2062:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2063:	65                   	gs
    2064:	6c                   	ins    BYTE PTR es:[edi],dx
    2065:	2f                   	das    
    2066:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    206d:	00 00                	add    BYTE PTR [eax],al
    206f:	74 69                	je     20da <sysEnter_Vector-0x12df26>
    2071:	6d                   	ins    DWORD PTR es:[edi],dx
    2072:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    2076:	01 00                	add    DWORD PTR [eax],eax
    2078:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    207b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    2082:	63 
    2083:	2e                   	cs
    2084:	68 00 02 00 00       	push   0x200
    2089:	74 69                	je     20f4 <sysEnter_Vector-0x12df0c>
    208b:	6d                   	ins    DWORD PTR es:[edi],dx
    208c:	65                   	gs
    208d:	2e                   	cs
    208e:	68 00 03 00 00       	push   0x300
    2093:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    2096:	6d                   	ins    DWORD PTR es:[edi],dx
    2097:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2098:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2099:	2e                   	cs
    209a:	68 00 03 00 00       	push   0x300
    209f:	73 79                	jae    211a <sysEnter_Vector-0x12dee6>
    20a1:	73 63                	jae    2106 <sysEnter_Vector-0x12defa>
    20a3:	61                   	popa   
    20a4:	6c                   	ins    BYTE PTR es:[edi],dx
    20a5:	6c                   	ins    BYTE PTR es:[edi],dx
    20a6:	73 2e                	jae    20d6 <sysEnter_Vector-0x12df2a>
    20a8:	68 00 04 00 00       	push   0x400
    20ad:	00 00                	add    BYTE PTR [eax],al
    20af:	05 02 84 54 00       	add    eax,0x548402
    20b4:	9f                   	lahf   
    20b5:	03 1a                	add    ebx,DWORD PTR [edx]
    20b7:	01 08                	add    DWORD PTR [eax],ecx
    20b9:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
    20bc:	f3 3d 78 08 21 84    	repz cmp eax,0x84210878
    20c2:	76 02                	jbe    20c6 <sysEnter_Vector-0x12df3a>
    20c4:	24 13                	and    al,0x13
    20c6:	08 22                	or     BYTE PTR [edx],ah
    20c8:	02 2e                	add    ch,BYTE PTR [esi]
    20ca:	13 02                	adc    eax,DWORD PTR [edx]
    20cc:	2f                   	das    
    20cd:	13 08                	adc    ecx,DWORD PTR [eax]
    20cf:	67 02 2d             	add    ch,BYTE PTR [di]
    20d2:	13 2f                	adc    ebp,DWORD PTR [edi]
    20d4:	00 02                	add    BYTE PTR [edx],al
    20d6:	04 01                	add    al,0x1
    20d8:	06                   	push   es
    20d9:	9e                   	sahf   
    20da:	00 02                	add    BYTE PTR [edx],al
    20dc:	04 04                	add    al,0x4
    20de:	02 23                	add    ah,BYTE PTR [ebx]
    20e0:	12 00                	adc    al,BYTE PTR [eax]
    20e2:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    20e9:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    20ec:	74 00                	je     20ee <sysEnter_Vector-0x12df12>
    20ee:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    20f1:	58                   	pop    eax
    20f2:	00 02                	add    BYTE PTR [edx],al
    20f4:	04 08                	add    al,0x8
    20f6:	06                   	push   es
    20f7:	3d 48 00 02 04       	cmp    eax,0x4020048
    20fc:	01 06                	add    DWORD PTR [esi],eax
    20fe:	9e                   	sahf   
    20ff:	00 02                	add    BYTE PTR [edx],al
    2101:	04 04                	add    al,0x4
    2103:	02 23                	add    ah,BYTE PTR [ebx]
    2105:	12 00                	adc    al,BYTE PTR [eax]
    2107:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    210e:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2111:	74 00                	je     2113 <sysEnter_Vector-0x12deed>
    2113:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2116:	58                   	pop    eax
    2117:	06                   	push   es
    2118:	94                   	xchg   esp,eax
    2119:	e5 91                	in     eax,0x91
    211b:	9f                   	lahf   
    211c:	59                   	pop    ecx
    211d:	00 02                	add    BYTE PTR [edx],al
    211f:	04 01                	add    al,0x1
    2121:	06                   	push   es
    2122:	9e                   	sahf   
    2123:	00 02                	add    BYTE PTR [edx],al
    2125:	04 04                	add    al,0x4
    2127:	02 23                	add    ah,BYTE PTR [ebx]
    2129:	12 00                	adc    al,BYTE PTR [eax]
    212b:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    2132:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2135:	74 00                	je     2137 <sysEnter_Vector-0x12dec9>
    2137:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    213a:	58                   	pop    eax
    213b:	00 02                	add    BYTE PTR [edx],al
    213d:	04 08                	add    al,0x8
    213f:	06                   	push   es
    2140:	08 9f e2 00 02 04    	or     BYTE PTR [edi+0x40200e2],bl
    2146:	01 06                	add    DWORD PTR [esi],eax
    2148:	9e                   	sahf   
    2149:	00 02                	add    BYTE PTR [edx],al
    214b:	04 04                	add    al,0x4
    214d:	02 23                	add    ah,BYTE PTR [ebx]
    214f:	12 00                	adc    al,BYTE PTR [eax]
    2151:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    2158:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    215b:	74 00                	je     215d <sysEnter_Vector-0x12dea3>
    215d:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2160:	58                   	pop    eax
    2161:	06                   	push   es
    2162:	08 f6                	or     dh,dh
    2164:	d7                   	xlat   BYTE PTR ds:[ebx]
    2165:	9f                   	lahf   
    2166:	3d 69 c9 d7 30       	cmp    eax,0x30d7c969
    216b:	f5                   	cmc    
    216c:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
    216f:	2f                   	das    
    2170:	31 f5                	xor    ebp,esi
    2172:	08 3d e5 30 c9 d7    	or     BYTE PTR ds:0xd7c930e5,bh
    2178:	30 08                	xor    BYTE PTR [eax],cl
    217a:	44                   	inc    esp
    217b:	02 2e                	add    ch,BYTE PTR [esi]
    217d:	13 02                	adc    eax,DWORD PTR [edx]
    217f:	3a 13                	cmp    dl,BYTE PTR [ebx]
    2181:	91                   	xchg   ecx,eax
    2182:	c9                   	leave  
    2183:	e6 02                	out    0x2,al
    2185:	2f                   	das    
    2186:	13 02                	adc    eax,DWORD PTR [edx]
    2188:	3c 13                	cmp    al,0x13
    218a:	9f                   	lahf   
    218b:	e5 e6                	in     eax,0xe6
    218d:	08 c9                	or     cl,cl
    218f:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    2192:	9f                   	lahf   
    2193:	e5 4c                	in     eax,0x4c
    2195:	02 29                	add    ch,BYTE PTR [ecx]
    2197:	13 02                	adc    eax,DWORD PTR [edx]
    2199:	2b 13                	sub    edx,DWORD PTR [ebx]
    219b:	9f                   	lahf   
    219c:	e5 e6                	in     eax,0xe6
    219e:	bb 59 08 83 e5       	mov    ebx,0xe5830859
    21a3:	a0 00 02 04 01       	mov    al,ds:0x1040200
    21a8:	06                   	push   es
    21a9:	c8 00 02 04          	enter  0x200,0x4
    21ad:	04 02                	add    al,0x2
    21af:	2c 12                	sub    al,0x12
    21b1:	00 02                	add    BYTE PTR [edx],al
    21b3:	04 05                	add    al,0x5
    21b5:	02 2f                	add    ch,BYTE PTR [edi]
    21b7:	12 00                	adc    al,BYTE PTR [eax]
    21b9:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    21bc:	74 00                	je     21be <sysEnter_Vector-0x12de42>
    21be:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    21c1:	58                   	pop    eax
    21c2:	06                   	push   es
    21c3:	08 99 a5 59 00 02    	or     BYTE PTR [ecx+0x20059a5],bl
    21c9:	04 01                	add    al,0x1
    21cb:	06                   	push   es
    21cc:	c8 00 02 04          	enter  0x200,0x4
    21d0:	04 02                	add    al,0x2
    21d2:	2c 12                	sub    al,0x12
    21d4:	00 02                	add    BYTE PTR [edx],al
    21d6:	04 05                	add    al,0x5
    21d8:	02 2f                	add    ch,BYTE PTR [edi]
    21da:	12 00                	adc    al,BYTE PTR [eax]
    21dc:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    21df:	74 00                	je     21e1 <sysEnter_Vector-0x12de1f>
    21e1:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    21e4:	58                   	pop    eax
    21e5:	00 02                	add    BYTE PTR [edx],al
    21e7:	04 08                	add    al,0x8
    21e9:	06                   	push   es
    21ea:	08 9f 08 91 9f e0    	or     BYTE PTR [edi-0x1f606ef8],bl
    21f0:	00 02                	add    BYTE PTR [edx],al
    21f2:	04 01                	add    al,0x1
    21f4:	06                   	push   es
    21f5:	c8 00 02 04          	enter  0x200,0x4
    21f9:	04 02                	add    al,0x2
    21fb:	2c 12                	sub    al,0x12
    21fd:	00 02                	add    BYTE PTR [edx],al
    21ff:	04 05                	add    al,0x5
    2201:	02 2f                	add    ch,BYTE PTR [edi]
    2203:	12 00                	adc    al,BYTE PTR [eax]
    2205:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2208:	74 00                	je     220a <sysEnter_Vector-0x12ddf6>
    220a:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    220d:	58                   	pop    eax
    220e:	06                   	push   es
    220f:	08 f9                	or     cl,bh
    2211:	bb 75 00 02 04       	mov    ebx,0x4020075
    2216:	01 06                	add    DWORD PTR [esi],eax
    2218:	08 2e                	or     BYTE PTR [esi],ch
    221a:	06                   	push   es
    221b:	9f                   	lahf   
    221c:	75 75                	jne    2293 <sysEnter_Vector-0x12dd6d>
    221e:	7b d8                	jnp    21f8 <sysEnter_Vector-0x12de08>
    2220:	00 02                	add    BYTE PTR [edx],al
    2222:	04 01                	add    al,0x1
    2224:	06                   	push   es
    2225:	c8 06 75 e5          	enter  0x7506,0xe5
    2229:	00 02                	add    BYTE PTR [edx],al
    222b:	04 01                	add    al,0x1
    222d:	06                   	push   es
    222e:	02 22                	add    ah,BYTE PTR [edx]
    2230:	12 06                	adc    al,BYTE PTR [esi]
    2232:	4b                   	dec    ebx
    2233:	00 02                	add    BYTE PTR [edx],al
    2235:	04 01                	add    al,0x1
    2237:	06                   	push   es
    2238:	08 ba 00 02 04 03    	or     BYTE PTR [edx+0x3040200],bh
    223e:	02 22                	add    ah,BYTE PTR [edx]
    2240:	12 00                	adc    al,BYTE PTR [eax]
    2242:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    2245:	74 00                	je     2247 <sysEnter_Vector-0x12ddb9>
    2247:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    224a:	58                   	pop    eax
    224b:	00 02                	add    BYTE PTR [edx],al
    224d:	04 06                	add    al,0x6
    224f:	06                   	push   es
    2250:	59                   	pop    ecx
    2251:	00 02                	add    BYTE PTR [edx],al
    2253:	04 01                	add    al,0x1
    2255:	06                   	push   es
    2256:	02 40 12             	add    al,BYTE PTR [eax+0x12]
    2259:	00 02                	add    BYTE PTR [edx],al
    225b:	04 03                	add    al,0x3
    225d:	02 42 12             	add    al,BYTE PTR [edx+0x12]
    2260:	00 02                	add    BYTE PTR [edx],al
    2262:	04 04                	add    al,0x4
    2264:	74 00                	je     2266 <sysEnter_Vector-0x12dd9a>
    2266:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2269:	58                   	pop    eax
    226a:	00 02                	add    BYTE PTR [edx],al
    226c:	04 06                	add    al,0x6
    226e:	06                   	push   es
    226f:	59                   	pop    ecx
    2270:	00 02                	add    BYTE PTR [edx],al
    2272:	04 01                	add    al,0x1
    2274:	06                   	push   es
    2275:	02 43 12             	add    al,BYTE PTR [ebx+0x12]
    2278:	00 02                	add    BYTE PTR [edx],al
    227a:	04 03                	add    al,0x3
    227c:	02 48 12             	add    cl,BYTE PTR [eax+0x12]
    227f:	00 02                	add    BYTE PTR [edx],al
    2281:	04 04                	add    al,0x4
    2283:	74 00                	je     2285 <sysEnter_Vector-0x12dd7b>
    2285:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2288:	58                   	pop    eax
    2289:	00 02                	add    BYTE PTR [edx],al
    228b:	04 06                	add    al,0x6
    228d:	06                   	push   es
    228e:	5a                   	pop    edx
    228f:	00 02                	add    BYTE PTR [edx],al
    2291:	04 06                	add    al,0x6
    2293:	c9                   	leave  
    2294:	2f                   	das    
    2295:	00 02                	add    BYTE PTR [edx],al
    2297:	04 01                	add    al,0x1
    2299:	06                   	push   es
    229a:	9e                   	sahf   
    229b:	00 02                	add    BYTE PTR [edx],al
    229d:	04 04                	add    al,0x4
    229f:	02 23                	add    ah,BYTE PTR [ebx]
    22a1:	12 00                	adc    al,BYTE PTR [eax]
    22a3:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    22aa:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    22ad:	74 00                	je     22af <sysEnter_Vector-0x12dd51>
    22af:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    22b2:	58                   	pop    eax
    22b3:	00 02                	add    BYTE PTR [edx],al
    22b5:	04 08                	add    al,0x8
    22b7:	06                   	push   es
    22b8:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    22bb:	e8 bb 00 02 04       	call   402237b <sysEnter_Vector+0x3ef237b>
    22c0:	01 06                	add    DWORD PTR [esi],eax
    22c2:	ba 06 4b 68 91       	mov    edx,0x91684b06
    22c7:	02 31                	add    dh,BYTE PTR [ecx]
    22c9:	14 02                	adc    al,0x2
    22cb:	2c 14                	sub    al,0x14
    22cd:	00 02                	add    BYTE PTR [edx],al
    22cf:	04 01                	add    al,0x1
    22d1:	06                   	push   es
    22d2:	02 29                	add    ch,BYTE PTR [ecx]
    22d4:	12 06                	adc    al,BYTE PTR [esi]
    22d6:	4b                   	dec    ebx
    22d7:	bd 00 02 04 01       	mov    ebp,0x1040200
    22dc:	06                   	push   es
    22dd:	ba 00 02 04 03       	mov    edx,0x3040200
    22e2:	06                   	push   es
    22e3:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    22e6:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
    22e9:	81 4b e5 4c ae 9f ae 	or     DWORD PTR [ebx-0x1b],0xae9fae4c
    22f0:	77 00                	ja     22f2 <sysEnter_Vector-0x12dd0e>
    22f2:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    22f5:	06                   	push   es
    22f6:	82                   	(bad)  
    22f7:	06                   	push   es
    22f8:	4b                   	dec    ebx
    22f9:	68 00 02 04 01       	push   0x1040200
    22fe:	06                   	push   es
    22ff:	66 06                	pushw  es
    2301:	85 3d 85 08 75 76    	test   DWORD PTR ds:0x76750885,edi
    2307:	08 f3                	or     bl,dh
    2309:	67 08 14             	or     BYTE PTR [si],dl
    230c:	00 02                	add    BYTE PTR [edx],al
    230e:	04 01                	add    al,0x1
    2310:	e5 77                	in     eax,0x77
    2312:	08 21                	or     BYTE PTR [ecx],ah
    2314:	08 2f                	or     BYTE PTR [edi],ch
    2316:	08 3d 3d 02 05 00    	or     BYTE PTR ds:0x5023d,bh
    231c:	01 01                	add    DWORD PTR [ecx],eax

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	6c                   	ins    BYTE PTR es:[edi],dx
       1:	6f                   	outs   dx,DWORD PTR ds:[esi]
       2:	6e                   	outs   dx,BYTE PTR ds:[esi]
       3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
       7:	6e                   	outs   dx,BYTE PTR ds:[esi]
       8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
       c:	74 00                	je     e <sysEnter_Vector-0x12fff2>
       e:	73 68                	jae    78 <sysEnter_Vector-0x12ff88>
      10:	6f                   	outs   dx,DWORD PTR ds:[esi]
      11:	72 74                	jb     87 <sysEnter_Vector-0x12ff79>
      13:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
      16:	73 69                	jae    81 <sysEnter_Vector-0x12ff7f>
      18:	67 6e                	outs   dx,BYTE PTR ds:[si]
      1a:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
      1f:	74 00                	je     21 <sysEnter_Vector-0x12ffdf>
      21:	73 74                	jae    97 <sysEnter_Vector-0x12ff69>
      23:	72 63                	jb     88 <sysEnter_Vector-0x12ff78>
      25:	68 72 00 6c 6f       	push   0x6f6c0072
      2a:	6e                   	outs   dx,BYTE PTR ds:[esi]
      2b:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
      2f:	6e                   	outs   dx,BYTE PTR ds:[esi]
      30:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
      34:	73 69                	jae    9f <sysEnter_Vector-0x12ff61>
      36:	67 6e                	outs   dx,BYTE PTR ds:[si]
      38:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
      3d:	74 00                	je     3f <sysEnter_Vector-0x12ffc1>
      3f:	75 6e                	jne    af <sysEnter_Vector-0x12ff51>
      41:	73 69                	jae    ac <sysEnter_Vector-0x12ff54>
      43:	67 6e                	outs   dx,BYTE PTR ds:[si]
      45:	65 64 20 63 68       	gs and BYTE PTR fs:gs:[ebx+0x68],ah
      4a:	61                   	popa   
      4b:	72 00                	jb     4d <sysEnter_Vector-0x12ffb3>
      4d:	2f                   	das    
      4e:	68 6f 6d 65 2f       	push   0x2f656d6f
      53:	79 6f                	jns    c4 <sysEnter_Vector-0x12ff3c>
      55:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
      5c:	6f                   	outs   dx,DWORD PTR ds:[esi]
      5d:	73 2f                	jae    8e <sysEnter_Vector-0x12ff72>
      5f:	61                   	popa   
      60:	70 72                	jo     d4 <sysEnter_Vector-0x12ff2c>
      62:	6f                   	outs   dx,DWORD PTR ds:[esi]
      63:	6a 2f                	push   0x2f
      65:	6c                   	ins    BYTE PTR es:[edi],dx
      66:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
      6d:	4f                   	dec    edi
      6e:	53                   	push   ebx
      6f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
      72:	72 63                	jb     d7 <sysEnter_Vector-0x12ff29>
      74:	68 72 49 00 70       	push   0x70004972
      79:	72 6f                	jb     ea <sysEnter_Vector-0x12ff16>
      7b:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
      7e:	73 45                	jae    c5 <sysEnter_Vector-0x12ff3b>
      80:	6e                   	outs   dx,BYTE PTR ds:[esi]
      81:	76 70                	jbe    f3 <sysEnter_Vector-0x12ff0d>
      83:	00 2e                	add    BYTE PTR [esi],ch
      85:	2e                   	cs
      86:	2f                   	das    
      87:	2e                   	cs
      88:	2e                   	cs
      89:	2f                   	das    
      8a:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      8e:	6a 2f                	push   0x2f
      90:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      93:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      9a:	63 2f                	arpl   WORD PTR [edi],bp
      9c:	73 74                	jae    112 <sysEnter_Vector-0x12feee>
      9e:	72 69                	jb     109 <sysEnter_Vector-0x12fef7>
      a0:	6e                   	outs   dx,BYTE PTR ds:[esi]
      a1:	67 73 2f             	addr16 jae d3 <sysEnter_Vector-0x12ff2d>
      a4:	73 74                	jae    11a <sysEnter_Vector-0x12fee6>
      a6:	72 63                	jb     10b <sysEnter_Vector-0x12fef5>
      a8:	68 72 2e 63 00       	push   0x632e72
      ad:	6c                   	ins    BYTE PTR es:[edi],dx
      ae:	6f                   	outs   dx,DWORD PTR ds:[esi]
      af:	6e                   	outs   dx,BYTE PTR ds:[esi]
      b0:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
      b4:	75 62                	jne    118 <sysEnter_Vector-0x12fee8>
      b6:	6c                   	ins    BYTE PTR es:[edi],dx
      b7:	65 00 73 68          	add    BYTE PTR gs:[ebx+0x68],dh
      bb:	6f                   	outs   dx,DWORD PTR ds:[esi]
      bc:	72 74                	jb     132 <sysEnter_Vector-0x12fece>
      be:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
      c1:	74 00                	je     c3 <sysEnter_Vector-0x12ff3d>
      c3:	47                   	inc    edi
      c4:	4e                   	dec    esi
      c5:	55                   	push   ebp
      c6:	20 43 31             	and    BYTE PTR [ebx+0x31],al
      c9:	31 20                	xor    DWORD PTR [eax],esp
      cb:	35 2e 33 2e 30       	xor    eax,0x302e332e
      d0:	20 2d 6d 61 73 6d    	and    BYTE PTR ds:0x6d73616d,ch
      d6:	3d 69 6e 74 65       	cmp    eax,0x65746e69
      db:	6c                   	ins    BYTE PTR es:[edi],dx
      dc:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
      e2:	65                   	gs
      e3:	3d 67 65 6e 65       	cmp    eax,0x656e6567
      e8:	72 69                	jb     153 <sysEnter_Vector-0x12fead>
      ea:	63 20                	arpl   WORD PTR [eax],sp
      ec:	2d 6d 61 72 63       	sub    eax,0x6372616d
      f1:	68 3d 70 65 6e       	push   0x6e65703d
      f6:	74 69                	je     161 <sysEnter_Vector-0x12fe9f>
      f8:	75 6d                	jne    167 <sysEnter_Vector-0x12fe99>
      fa:	70 72                	jo     16e <sysEnter_Vector-0x12fe92>
      fc:	6f                   	outs   dx,DWORD PTR ds:[esi]
      fd:	20 2d 67 20 2d 66    	and    BYTE PTR ds:0x662d2067,ch
     103:	66                   	data16
     104:	72 65                	jb     16b <sysEnter_Vector-0x12fe95>
     106:	65                   	gs
     107:	73 74                	jae    17d <sysEnter_Vector-0x12fe83>
     109:	61                   	popa   
     10a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     10b:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
     112:	76 
     113:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
     11a:	74 79                	je     195 <sysEnter_Vector-0x12fe6b>
     11c:	3d 68 69 64 64       	cmp    eax,0x64646968
     121:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     123:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
     129:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     12c:	7a 65                	jp     193 <sysEnter_Vector-0x12fe6d>
     12e:	74 79                	je     1a9 <sysEnter_Vector-0x12fe57>
     130:	70 65                	jo     197 <sysEnter_Vector-0x12fe69>
     132:	00 63 68             	add    BYTE PTR [ebx+0x68],ah
     135:	61                   	popa   
     136:	72 73                	jb     1ab <sysEnter_Vector-0x12fe55>
     138:	00 2e                	add    BYTE PTR [esi],ch
     13a:	2e                   	cs
     13b:	2f                   	das    
     13c:	2e                   	cs
     13d:	2e                   	cs
     13e:	2f                   	das    
     13f:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     143:	6a 2f                	push   0x2f
     145:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     148:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     14f:	63 2f                	arpl   WORD PTR [edi],bp
     151:	73 74                	jae    1c7 <sysEnter_Vector-0x12fe39>
     153:	72 69                	jb     1be <sysEnter_Vector-0x12fe42>
     155:	6e                   	outs   dx,BYTE PTR ds:[esi]
     156:	67 73 2f             	addr16 jae 188 <sysEnter_Vector-0x12fe78>
     159:	73 74                	jae    1cf <sysEnter_Vector-0x12fe31>
     15b:	72 63                	jb     1c0 <sysEnter_Vector-0x12fe40>
     15d:	73 70                	jae    1cf <sysEnter_Vector-0x12fe31>
     15f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     160:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     163:	73 74                	jae    1d9 <sysEnter_Vector-0x12fe27>
     165:	72 63                	jb     1ca <sysEnter_Vector-0x12fe36>
     167:	73 70                	jae    1d9 <sysEnter_Vector-0x12fe27>
     169:	6e                   	outs   dx,BYTE PTR ds:[esi]
     16a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     16d:	72 63                	jb     1d2 <sysEnter_Vector-0x12fe2e>
     16f:	73 70                	jae    1e1 <sysEnter_Vector-0x12fe1f>
     171:	6e                   	outs   dx,BYTE PTR ds:[esi]
     172:	49                   	dec    ecx
     173:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     176:	72 74                	jb     1ec <sysEnter_Vector-0x12fe14>
     178:	6f                   	outs   dx,DWORD PTR ds:[esi]
     179:	6b 49 00 64          	imul   ecx,DWORD PTR [ecx+0x0],0x64
     17d:	65                   	gs
     17e:	6c                   	ins    BYTE PTR es:[edi],dx
     17f:	69 6d 00 2e 2e 2f 2e 	imul   ebp,DWORD PTR [ebp+0x0],0x2e2f2e2e
     186:	2e                   	cs
     187:	2f                   	das    
     188:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     18c:	6a 2f                	push   0x2f
     18e:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     191:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     198:	63 2f                	arpl   WORD PTR [edi],bp
     19a:	73 74                	jae    210 <sysEnter_Vector-0x12fdf0>
     19c:	72 69                	jb     207 <sysEnter_Vector-0x12fdf9>
     19e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     19f:	67 73 2f             	addr16 jae 1d1 <sysEnter_Vector-0x12fe2f>
     1a2:	73 74                	jae    218 <sysEnter_Vector-0x12fde8>
     1a4:	72 74                	jb     21a <sysEnter_Vector-0x12fde6>
     1a6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1a7:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     1aa:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
     1ae:	74 73                	je     223 <sysEnter_Vector-0x12fddd>
     1b0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     1b3:	72 74                	jb     229 <sysEnter_Vector-0x12fdd7>
     1b5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1b6:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
     1b9:	74 6f                	je     22a <sysEnter_Vector-0x12fdd6>
     1bb:	61                   	popa   
     1bc:	00 69 74             	add    BYTE PTR [ecx+0x74],ch
     1bf:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1c0:	61                   	popa   
     1c1:	49                   	dec    ecx
     1c2:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
     1c5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1c6:	69 49 00 72 65 76 65 	imul   ecx,DWORD PTR [ecx+0x0],0x65766572
     1cd:	72 73                	jb     242 <sysEnter_Vector-0x12fdbe>
     1cf:	65                   	gs
     1d0:	49                   	dec    ecx
     1d1:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     1d4:	67 6e                	outs   dx,BYTE PTR ds:[si]
     1d6:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     1d9:	63 2f                	arpl   WORD PTR [edi],bp
     1db:	61                   	popa   
     1dc:	73 63                	jae    241 <sysEnter_Vector-0x12fdbf>
     1de:	69 69 2e 63 00 61 6e 	imul   ebp,DWORD PTR [ecx+0x2e],0x6e610063
     1e5:	73 69                	jae    250 <sysEnter_Vector-0x12fdb0>
     1e7:	45                   	inc    ebp
     1e8:	73 63                	jae    24d <sysEnter_Vector-0x12fdb3>
     1ea:	53                   	push   ebx
     1eb:	65                   	gs
     1ec:	71 00                	jno    1ee <sysEnter_Vector-0x12fe12>
     1ee:	73 61                	jae    251 <sysEnter_Vector-0x12fdaf>
     1f0:	76 65                	jbe    257 <sysEnter_Vector-0x12fda9>
     1f2:	43                   	inc    ebx
     1f3:	75 72                	jne    267 <sysEnter_Vector-0x12fd99>
     1f5:	73 6f                	jae    266 <sysEnter_Vector-0x12fd9a>
     1f7:	72 50                	jb     249 <sysEnter_Vector-0x12fdb7>
     1f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1fa:	73 69                	jae    265 <sysEnter_Vector-0x12fd9b>
     1fc:	74 69                	je     267 <sysEnter_Vector-0x12fd99>
     1fe:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1ff:	6e                   	outs   dx,BYTE PTR ds:[esi]
     200:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
     203:	6e                   	outs   dx,BYTE PTR ds:[esi]
     204:	74 70                	je     276 <sysEnter_Vector-0x12fd8a>
     206:	74 72                	je     27a <sysEnter_Vector-0x12fd86>
     208:	5f                   	pop    edi
     209:	74 00                	je     20b <sysEnter_Vector-0x12fdf5>
     20b:	78 73                	js     280 <sysEnter_Vector-0x12fd80>
     20d:	74 72                	je     281 <sysEnter_Vector-0x12fd7f>
     20f:	00 66 69             	add    BYTE PTR [esi+0x69],ah
     212:	6c                   	ins    BYTE PTR es:[edi],dx
     213:	65                   	gs
     214:	73 54                	jae    26a <sysEnter_Vector-0x12fd96>
     216:	6f                   	outs   dx,DWORD PTR ds:[esi]
     217:	43                   	inc    ebx
     218:	6c                   	ins    BYTE PTR es:[edi],dx
     219:	6f                   	outs   dx,DWORD PTR ds:[esi]
     21a:	73 65                	jae    281 <sysEnter_Vector-0x12fd7f>
     21c:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     21f:	73 74                	jae    295 <sysEnter_Vector-0x12fd6b>
     221:	6f                   	outs   dx,DWORD PTR ds:[esi]
     222:	72 65                	jb     289 <sysEnter_Vector-0x12fd77>
     224:	43                   	inc    ebx
     225:	75 72                	jne    299 <sysEnter_Vector-0x12fd67>
     227:	73 6f                	jae    298 <sysEnter_Vector-0x12fd68>
     229:	72 50                	jb     27b <sysEnter_Vector-0x12fd85>
     22b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     22c:	73 69                	jae    297 <sysEnter_Vector-0x12fd69>
     22e:	74 69                	je     299 <sysEnter_Vector-0x12fd67>
     230:	6f                   	outs   dx,DWORD PTR ds:[esi]
     231:	6e                   	outs   dx,BYTE PTR ds:[esi]
     232:	00 66 69             	add    BYTE PTR [esi+0x69],ah
     235:	6c                   	ins    BYTE PTR es:[edi],dx
     236:	65                   	gs
     237:	73 54                	jae    28d <sysEnter_Vector-0x12fd73>
     239:	6f                   	outs   dx,DWORD PTR ds:[esi]
     23a:	43                   	inc    ebx
     23b:	6c                   	ins    BYTE PTR es:[edi],dx
     23c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     23d:	73 65                	jae    2a4 <sysEnter_Vector-0x12fd5c>
     23f:	43                   	inc    ebx
     240:	6f                   	outs   dx,DWORD PTR ds:[esi]
     241:	75 6e                	jne    2b1 <sysEnter_Vector-0x12fd4f>
     243:	74 00                	je     245 <sysEnter_Vector-0x12fdbb>
     245:	75 69                	jne    2b0 <sysEnter_Vector-0x12fd50>
     247:	6e                   	outs   dx,BYTE PTR ds:[esi]
     248:	74 33                	je     27d <sysEnter_Vector-0x12fd83>
     24a:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
     24d:	00 6d 6f             	add    BYTE PTR [ebp+0x6f],ch
     250:	76 65                	jbe    2b7 <sysEnter_Vector-0x12fd49>
     252:	54                   	push   esp
     253:	6f                   	outs   dx,DWORD PTR ds:[esi]
     254:	58                   	pop    eax
     255:	59                   	pop    ecx
     256:	00 79 73             	add    BYTE PTR [ecx+0x73],bh
     259:	74 72                	je     2cd <sysEnter_Vector-0x12fd33>
     25b:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     25e:	63 2f                	arpl   WORD PTR [edi],bp
     260:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     263:	73 6f                	jae    2d4 <sysEnter_Vector-0x12fd2c>
     265:	6c                   	ins    BYTE PTR es:[edi],dx
     266:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
     26a:	53                   	push   ebx
     26b:	59                   	pop    ecx
     26c:	53                   	push   ebx
     26d:	43                   	inc    ebx
     26e:	41                   	inc    ecx
     26f:	4c                   	dec    esp
     270:	4c                   	dec    esp
     271:	5f                   	pop    edi
     272:	52                   	push   edx
     273:	45                   	inc    ebp
     274:	41                   	inc    ecx
     275:	44                   	inc    esp
     276:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     279:	53                   	push   ebx
     27a:	43                   	inc    ebx
     27b:	41                   	inc    ecx
     27c:	4c                   	dec    esp
     27d:	4c                   	dec    esp
     27e:	5f                   	pop    edi
     27f:	50                   	push   eax
     280:	49                   	dec    ecx
     281:	50                   	push   eax
     282:	45                   	inc    ebp
     283:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     286:	53                   	push   ebx
     287:	43                   	inc    ebx
     288:	41                   	inc    ecx
     289:	4c                   	dec    esp
     28a:	4c                   	dec    esp
     28b:	5f                   	pop    edi
     28c:	4f                   	dec    edi
     28d:	50                   	push   eax
     28e:	45                   	inc    ebp
     28f:	4e                   	dec    esi
     290:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     293:	7a 65                	jp     2fa <sysEnter_Vector-0x12fd06>
     295:	5f                   	pop    edi
     296:	74 00                	je     298 <sysEnter_Vector-0x12fd68>
     298:	69 6e 70 75 74 00 72 	imul   ebp,DWORD PTR [esi+0x70],0x72007475
     29f:	65                   	gs
     2a0:	73 6f                	jae    311 <sysEnter_Vector-0x12fcef>
     2a2:	6c                   	ins    BYTE PTR es:[edi],dx
     2a3:	76 65                	jbe    30a <sysEnter_Vector-0x12fcf6>
     2a5:	45                   	inc    ebp
     2a6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     2a7:	76 56                	jbe    2ff <sysEnter_Vector-0x12fd01>
     2a9:	61                   	popa   
     2aa:	72 73                	jb     31f <sysEnter_Vector-0x12fce1>
     2ac:	49                   	dec    ecx
     2ad:	6e                   	outs   dx,BYTE PTR ds:[esi]
     2ae:	53                   	push   ebx
     2af:	74 72                	je     323 <sysEnter_Vector-0x12fcdd>
     2b1:	69 6e 67 49 00 53 59 	imul   ebp,DWORD PTR [esi+0x67],0x59530049
     2b8:	53                   	push   ebx
     2b9:	43                   	inc    ebx
     2ba:	41                   	inc    ecx
     2bb:	4c                   	dec    esp
     2bc:	4c                   	dec    esp
     2bd:	5f                   	pop    edi
     2be:	47                   	inc    edi
     2bf:	45                   	inc    ebp
     2c0:	54                   	push   esp
     2c1:	44                   	inc    esp
     2c2:	45                   	inc    ebp
     2c3:	4e                   	dec    esi
     2c4:	54                   	push   esp
     2c5:	53                   	push   ebx
     2c6:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     2c9:	74 65                	je     330 <sysEnter_Vector-0x12fcd0>
     2cb:	6e                   	outs   dx,BYTE PTR ds:[esi]
     2cc:	76 00                	jbe    2ce <sysEnter_Vector-0x12fd32>
     2ce:	67                   	addr16
     2cf:	65                   	gs
     2d0:	74 63                	je     335 <sysEnter_Vector-0x12fccb>
     2d2:	77 64                	ja     338 <sysEnter_Vector-0x12fcc8>
     2d4:	49                   	dec    ecx
     2d5:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     2d8:	53                   	push   ebx
     2d9:	43                   	inc    ebx
     2da:	41                   	inc    ecx
     2db:	4c                   	dec    esp
     2dc:	4c                   	dec    esp
     2dd:	5f                   	pop    edi
     2de:	52                   	push   edx
     2df:	45                   	inc    ebp
     2e0:	42                   	inc    edx
     2e1:	4f                   	dec    edi
     2e2:	4f                   	dec    edi
     2e3:	54                   	push   esp
     2e4:	00 6d 79             	add    BYTE PTR [ebp+0x79],ch
     2e7:	49                   	dec    ecx
     2e8:	6e                   	outs   dx,BYTE PTR ds:[esi]
     2e9:	70 75                	jo     360 <sysEnter_Vector-0x12fca0>
     2eb:	74 00                	je     2ed <sysEnter_Vector-0x12fd13>
     2ed:	73 72                	jae    361 <sysEnter_Vector-0x12fc9f>
     2ef:	63 2f                	arpl   WORD PTR [edi],bp
     2f1:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     2f3:	76 69                	jbe    35e <sysEnter_Vector-0x12fca2>
     2f5:	72 6f                	jb     366 <sysEnter_Vector-0x12fc9a>
     2f7:	6e                   	outs   dx,BYTE PTR ds:[esi]
     2f8:	6d                   	ins    DWORD PTR es:[edi],dx
     2f9:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     2fb:	74 2e                	je     32b <sysEnter_Vector-0x12fcd5>
     2fd:	63 00                	arpl   WORD PTR [eax],ax
     2ff:	6c                   	ins    BYTE PTR es:[edi],dx
     300:	61                   	popa   
     301:	73 74                	jae    377 <sysEnter_Vector-0x12fc89>
     303:	50                   	push   eax
     304:	6f                   	outs   dx,DWORD PTR ds:[esi]
     305:	70 75                	jo     37c <sysEnter_Vector-0x12fc84>
     307:	6c                   	ins    BYTE PTR es:[edi],dx
     308:	61                   	popa   
     309:	74 65                	je     370 <sysEnter_Vector-0x12fc90>
     30b:	64 00 6d 61          	add    BYTE PTR fs:[ebp+0x61],ch
     30f:	6c                   	ins    BYTE PTR es:[edi],dx
     310:	6c                   	ins    BYTE PTR es:[edi],dx
     311:	6f                   	outs   dx,DWORD PTR ds:[esi]
     312:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
     315:	53                   	push   ebx
     316:	59                   	pop    ecx
     317:	53                   	push   ebx
     318:	43                   	inc    ebx
     319:	41                   	inc    ecx
     31a:	4c                   	dec    esp
     31b:	4c                   	dec    esp
     31c:	5f                   	pop    edi
     31d:	45                   	inc    ebp
     31e:	58                   	pop    eax
     31f:	45                   	inc    ebp
     320:	43                   	inc    ebx
     321:	4e                   	dec    esi
     322:	45                   	inc    ebp
     323:	57                   	push   edi
     324:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     327:	53                   	push   ebx
     328:	43                   	inc    ebx
     329:	41                   	inc    ecx
     32a:	4c                   	dec    esp
     32b:	4c                   	dec    esp
     32c:	5f                   	pop    edi
     32d:	53                   	push   ebx
     32e:	4c                   	dec    esp
     32f:	45                   	inc    ebp
     330:	45                   	inc    ebp
     331:	50                   	push   eax
     332:	00 76 61             	add    BYTE PTR [esi+0x61],dh
     335:	6c                   	ins    BYTE PTR es:[edi],dx
     336:	75 65                	jne    39d <sysEnter_Vector-0x12fc63>
     338:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     33b:	53                   	push   ebx
     33c:	43                   	inc    ebx
     33d:	41                   	inc    ecx
     33e:	4c                   	dec    esp
     33f:	4c                   	dec    esp
     340:	5f                   	pop    edi
     341:	47                   	inc    edi
     342:	45                   	inc    ebp
     343:	54                   	push   esp
     344:	54                   	push   esp
     345:	49                   	dec    ecx
     346:	4d                   	dec    ebp
     347:	45                   	inc    ebp
     348:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     34b:	53                   	push   ebx
     34c:	43                   	inc    ebx
     34d:	41                   	inc    ecx
     34e:	4c                   	dec    esp
     34f:	4c                   	dec    esp
     350:	5f                   	pop    edi
     351:	53                   	push   ebx
     352:	45                   	inc    ebp
     353:	54                   	push   esp
     354:	50                   	push   eax
     355:	52                   	push   edx
     356:	49                   	dec    ecx
     357:	4f                   	dec    edi
     358:	52                   	push   edx
     359:	49                   	dec    ecx
     35a:	54                   	push   esp
     35b:	59                   	pop    ecx
     35c:	00 73 65             	add    BYTE PTR [ebx+0x65],dh
     35f:	74 65                	je     3c6 <sysEnter_Vector-0x12fc3a>
     361:	6e                   	outs   dx,BYTE PTR ds:[esi]
     362:	76 00                	jbe    364 <sysEnter_Vector-0x12fc9c>
     364:	53                   	push   ebx
     365:	59                   	pop    ecx
     366:	53                   	push   ebx
     367:	43                   	inc    ebx
     368:	41                   	inc    ecx
     369:	4c                   	dec    esp
     36a:	4c                   	dec    esp
     36b:	5f                   	pop    edi
     36c:	53                   	push   ebx
     36d:	45                   	inc    ebp
     36e:	54                   	push   esp
     36f:	53                   	push   ebx
     370:	54                   	push   esp
     371:	44                   	inc    esp
     372:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     375:	53                   	push   ebx
     376:	43                   	inc    ebx
     377:	41                   	inc    ecx
     378:	4c                   	dec    esp
     379:	4c                   	dec    esp
     37a:	5f                   	pop    edi
     37b:	4d                   	dec    ebp
     37c:	41                   	inc    ecx
     37d:	53                   	push   ebx
     37e:	4b                   	dec    ebx
     37f:	53                   	push   ebx
     380:	49                   	dec    ecx
     381:	47                   	inc    edi
     382:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     385:	53                   	push   ebx
     386:	43                   	inc    ebx
     387:	41                   	inc    ecx
     388:	4c                   	dec    esp
     389:	4c                   	dec    esp
     38a:	5f                   	pop    edi
     38b:	43                   	inc    ebx
     38c:	4c                   	dec    esp
     38d:	4f                   	dec    edi
     38e:	53                   	push   ebx
     38f:	45                   	inc    ebp
     390:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     393:	53                   	push   ebx
     394:	43                   	inc    ebx
     395:	41                   	inc    ecx
     396:	4c                   	dec    esp
     397:	4c                   	dec    esp
     398:	5f                   	pop    edi
     399:	55                   	push   ebp
     39a:	4e                   	dec    esi
     39b:	4c                   	dec    esp
     39c:	49                   	dec    ecx
     39d:	4e                   	dec    esi
     39e:	4b                   	dec    ebx
     39f:	00 65 73             	add    BYTE PTR [ebp+0x73],ah
     3a2:	79 73                	jns    417 <sysEnter_Vector-0x12fbe9>
     3a4:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
     3a7:	6c                   	ins    BYTE PTR es:[edi],dx
     3a8:	73 00                	jae    3aa <sysEnter_Vector-0x12fc56>
     3aa:	53                   	push   ebx
     3ab:	59                   	pop    ecx
     3ac:	53                   	push   ebx
     3ad:	43                   	inc    ebx
     3ae:	41                   	inc    ecx
     3af:	4c                   	dec    esp
     3b0:	4c                   	dec    esp
     3b1:	5f                   	pop    edi
     3b2:	46                   	inc    esi
     3b3:	4f                   	dec    edi
     3b4:	52                   	push   edx
     3b5:	4b                   	dec    ebx
     3b6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3b9:	53                   	push   ebx
     3ba:	43                   	inc    ebx
     3bb:	41                   	inc    ecx
     3bc:	4c                   	dec    esp
     3bd:	4c                   	dec    esp
     3be:	5f                   	pop    edi
     3bf:	53                   	push   ebx
     3c0:	54                   	push   esp
     3c1:	4f                   	dec    edi
     3c2:	50                   	push   eax
     3c3:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3c6:	53                   	push   ebx
     3c7:	43                   	inc    ebx
     3c8:	41                   	inc    ecx
     3c9:	4c                   	dec    esp
     3ca:	4c                   	dec    esp
     3cb:	5f                   	pop    edi
     3cc:	53                   	push   ebx
     3cd:	45                   	inc    ebp
     3ce:	45                   	inc    ebp
     3cf:	4b                   	dec    ebx
     3d0:	00 6c 4f 75          	add    BYTE PTR [edi+ecx*2+0x75],ch
     3d4:	74 70                	je     446 <sysEnter_Vector-0x12fbba>
     3d6:	75 74                	jne    44c <sysEnter_Vector-0x12fbb4>
     3d8:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3db:	53                   	push   ebx
     3dc:	43                   	inc    ebx
     3dd:	41                   	inc    ecx
     3de:	4c                   	dec    esp
     3df:	4c                   	dec    esp
     3e0:	5f                   	pop    edi
     3e1:	50                   	push   eax
     3e2:	52                   	push   edx
     3e3:	49                   	dec    ecx
     3e4:	4e                   	dec    esi
     3e5:	54                   	push   esp
     3e6:	44                   	inc    esp
     3e7:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3ea:	53                   	push   ebx
     3eb:	43                   	inc    ebx
     3ec:	41                   	inc    ecx
     3ed:	4c                   	dec    esp
     3ee:	4c                   	dec    esp
     3ef:	5f                   	pop    edi
     3f0:	48                   	dec    eax
     3f1:	4c                   	dec    esp
     3f2:	54                   	push   esp
     3f3:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3f6:	53                   	push   ebx
     3f7:	43                   	inc    ebx
     3f8:	41                   	inc    ecx
     3f9:	4c                   	dec    esp
     3fa:	4c                   	dec    esp
     3fb:	5f                   	pop    edi
     3fc:	44                   	inc    esp
     3fd:	55                   	push   ebp
     3fe:	50                   	push   eax
     3ff:	33 00                	xor    eax,DWORD PTR [eax]
     401:	53                   	push   ebx
     402:	59                   	pop    ecx
     403:	53                   	push   ebx
     404:	43                   	inc    ebx
     405:	41                   	inc    ecx
     406:	4c                   	dec    esp
     407:	4c                   	dec    esp
     408:	5f                   	pop    edi
     409:	54                   	push   esp
     40a:	41                   	inc    ecx
     40b:	4b                   	dec    ebx
     40c:	45                   	inc    ebp
     40d:	41                   	inc    ecx
     40e:	44                   	inc    esp
     40f:	55                   	push   ebp
     410:	4d                   	dec    ebp
     411:	50                   	push   eax
     412:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     415:	73 6f                	jae    486 <sysEnter_Vector-0x12fb7a>
     417:	6c                   	ins    BYTE PTR es:[edi],dx
     418:	76 65                	jbe    47f <sysEnter_Vector-0x12fb81>
     41a:	45                   	inc    ebp
     41b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     41c:	76 56                	jbe    474 <sysEnter_Vector-0x12fb8c>
     41e:	61                   	popa   
     41f:	72 73                	jb     494 <sysEnter_Vector-0x12fb6c>
     421:	49                   	dec    ecx
     422:	6e                   	outs   dx,BYTE PTR ds:[esi]
     423:	53                   	push   ebx
     424:	74 72                	je     498 <sysEnter_Vector-0x12fb68>
     426:	69 6e 67 00 53 59 53 	imul   ebp,DWORD PTR [esi+0x67],0x53595300
     42d:	43                   	inc    ebx
     42e:	41                   	inc    ecx
     42f:	4c                   	dec    esp
     430:	4c                   	dec    esp
     431:	5f                   	pop    edi
     432:	54                   	push   esp
     433:	45                   	inc    ebp
     434:	4c                   	dec    esp
     435:	4c                   	dec    esp
     436:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     439:	53                   	push   ebx
     43a:	43                   	inc    ebx
     43b:	41                   	inc    ecx
     43c:	4c                   	dec    esp
     43d:	4c                   	dec    esp
     43e:	5f                   	pop    edi
     43f:	46                   	inc    esi
     440:	52                   	push   edx
     441:	45                   	inc    ebp
     442:	45                   	inc    ebp
     443:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     446:	53                   	push   ebx
     447:	43                   	inc    ebx
     448:	41                   	inc    ecx
     449:	4c                   	dec    esp
     44a:	4c                   	dec    esp
     44b:	5f                   	pop    edi
     44c:	45                   	inc    ebp
     44d:	58                   	pop    eax
     44e:	45                   	inc    ebp
     44f:	43                   	inc    ebx
     450:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     453:	53                   	push   ebx
     454:	43                   	inc    ebx
     455:	41                   	inc    ecx
     456:	4c                   	dec    esp
     457:	4c                   	dec    esp
     458:	5f                   	pop    edi
     459:	49                   	dec    ecx
     45a:	4e                   	dec    esi
     45b:	56                   	push   esi
     45c:	41                   	inc    ecx
     45d:	4c                   	dec    esp
     45e:	49                   	dec    ecx
     45f:	44                   	inc    esp
     460:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     463:	53                   	push   ebx
     464:	43                   	inc    ebx
     465:	41                   	inc    ecx
     466:	4c                   	dec    esp
     467:	4c                   	dec    esp
     468:	5f                   	pop    edi
     469:	52                   	push   edx
     46a:	45                   	inc    ebp
     46b:	47                   	inc    edi
     46c:	45                   	inc    ebp
     46d:	58                   	pop    eax
     46e:	49                   	dec    ecx
     46f:	54                   	push   esp
     470:	48                   	dec    eax
     471:	41                   	inc    ecx
     472:	4e                   	dec    esi
     473:	44                   	inc    esp
     474:	4c                   	dec    esp
     475:	45                   	inc    ebp
     476:	52                   	push   edx
     477:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     47a:	53                   	push   ebx
     47b:	43                   	inc    ebx
     47c:	41                   	inc    ecx
     47d:	4c                   	dec    esp
     47e:	4c                   	dec    esp
     47f:	5f                   	pop    edi
     480:	53                   	push   ebx
     481:	54                   	push   esp
     482:	41                   	inc    ecx
     483:	54                   	push   esp
     484:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     487:	53                   	push   ebx
     488:	43                   	inc    ebx
     489:	41                   	inc    ecx
     48a:	4c                   	dec    esp
     48b:	4c                   	dec    esp
     48c:	5f                   	pop    edi
     48d:	47                   	inc    edi
     48e:	45                   	inc    ebp
     48f:	54                   	push   esp
     490:	54                   	push   esp
     491:	49                   	dec    ecx
     492:	43                   	inc    ebx
     493:	4b                   	dec    ebx
     494:	53                   	push   ebx
     495:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     498:	53                   	push   ebx
     499:	43                   	inc    ebx
     49a:	41                   	inc    ecx
     49b:	4c                   	dec    esp
     49c:	4c                   	dec    esp
     49d:	5f                   	pop    edi
     49e:	45                   	inc    ebp
     49f:	4e                   	dec    esi
     4a0:	44                   	inc    esp
     4a1:	50                   	push   eax
     4a2:	52                   	push   edx
     4a3:	4f                   	dec    edi
     4a4:	43                   	inc    ebx
     4a5:	45                   	inc    ebp
     4a6:	53                   	push   ebx
     4a7:	53                   	push   ebx
     4a8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     4ab:	61                   	popa   
     4ac:	72 74                	jb     522 <sysEnter_Vector-0x12fade>
     4ae:	50                   	push   eax
     4af:	74 72                	je     523 <sysEnter_Vector-0x12fadd>
     4b1:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     4b4:	53                   	push   ebx
     4b5:	43                   	inc    ebx
     4b6:	41                   	inc    ecx
     4b7:	4c                   	dec    esp
     4b8:	4c                   	dec    esp
     4b9:	5f                   	pop    edi
     4ba:	53                   	push   ebx
     4bb:	49                   	dec    ecx
     4bc:	47                   	inc    edi
     4bd:	4e                   	dec    esi
     4be:	41                   	inc    ecx
     4bf:	4c                   	dec    esp
     4c0:	00 6c 56 61          	add    BYTE PTR [esi+edx*2+0x61],ch
     4c4:	72 69                	jb     52f <sysEnter_Vector-0x12fad1>
     4c6:	61                   	popa   
     4c7:	62 6c 65 00          	bound  ebp,QWORD PTR [ebp+eiz*2+0x0]
     4cb:	53                   	push   ebx
     4cc:	59                   	pop    ecx
     4cd:	53                   	push   ebx
     4ce:	43                   	inc    ebx
     4cf:	41                   	inc    ecx
     4d0:	4c                   	dec    esp
     4d1:	4c                   	dec    esp
     4d2:	5f                   	pop    edi
     4d3:	53                   	push   ebx
     4d4:	45                   	inc    ebp
     4d5:	54                   	push   esp
     4d6:	43                   	inc    ebx
     4d7:	57                   	push   edi
     4d8:	44                   	inc    esp
     4d9:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     4dc:	53                   	push   ebx
     4dd:	43                   	inc    ebx
     4de:	41                   	inc    ecx
     4df:	4c                   	dec    esp
     4e0:	4c                   	dec    esp
     4e1:	5f                   	pop    edi
     4e2:	57                   	push   edi
     4e3:	52                   	push   edx
     4e4:	49                   	dec    ecx
     4e5:	54                   	push   esp
     4e6:	45                   	inc    ebp
     4e7:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     4ea:	53                   	push   ebx
     4eb:	43                   	inc    ebx
     4ec:	41                   	inc    ecx
     4ed:	4c                   	dec    esp
     4ee:	4c                   	dec    esp
     4ef:	5f                   	pop    edi
     4f0:	50                   	push   eax
     4f1:	52                   	push   edx
     4f2:	49                   	dec    ecx
     4f3:	4e                   	dec    esi
     4f4:	54                   	push   esp
     4f5:	00 6c 56 61          	add    BYTE PTR [esi+edx*2+0x61],ch
     4f9:	72 69                	jb     564 <sysEnter_Vector-0x12fa9c>
     4fb:	61                   	popa   
     4fc:	62 6c 65 56          	bound  ebp,QWORD PTR [ebp+eiz*2+0x56]
     500:	61                   	popa   
     501:	6c                   	ins    BYTE PTR es:[edi],dx
     502:	75 65                	jne    569 <sysEnter_Vector-0x12fa97>
     504:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     507:	53                   	push   ebx
     508:	43                   	inc    ebx
     509:	41                   	inc    ecx
     50a:	4c                   	dec    esp
     50b:	4c                   	dec    esp
     50c:	5f                   	pop    edi
     50d:	47                   	inc    edi
     50e:	45                   	inc    ebp
     50f:	54                   	push   esp
     510:	43                   	inc    ebx
     511:	57                   	push   edi
     512:	44                   	inc    esp
     513:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     516:	53                   	push   ebx
     517:	43                   	inc    ebx
     518:	41                   	inc    ecx
     519:	4c                   	dec    esp
     51a:	4c                   	dec    esp
     51b:	5f                   	pop    edi
     51c:	57                   	push   edi
     51d:	41                   	inc    ecx
     51e:	49                   	dec    ecx
     51f:	54                   	push   esp
     520:	46                   	inc    esi
     521:	4f                   	dec    edi
     522:	52                   	push   edx
     523:	50                   	push   eax
     524:	49                   	dec    ecx
     525:	44                   	inc    esp
     526:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     529:	53                   	push   ebx
     52a:	43                   	inc    ebx
     52b:	41                   	inc    ecx
     52c:	4c                   	dec    esp
     52d:	4c                   	dec    esp
     52e:	5f                   	pop    edi
     52f:	4d                   	dec    ebp
     530:	4d                   	dec    ebp
     531:	41                   	inc    ecx
     532:	50                   	push   eax
     533:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     536:	74 65                	je     59d <sysEnter_Vector-0x12fa63>
     538:	6e                   	outs   dx,BYTE PTR ds:[esi]
     539:	76 49                	jbe    584 <sysEnter_Vector-0x12fa7c>
     53b:	00 76 61             	add    BYTE PTR [esi+0x61],dh
     53e:	72 6e                	jb     5ae <sysEnter_Vector-0x12fa52>
     540:	61                   	popa   
     541:	6d                   	ins    DWORD PTR es:[edi],dx
     542:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
     546:	53                   	push   ebx
     547:	43                   	inc    ebx
     548:	41                   	inc    ecx
     549:	4c                   	dec    esp
     54a:	4c                   	dec    esp
     54b:	5f                   	pop    edi
     54c:	41                   	inc    ecx
     54d:	4c                   	dec    esp
     54e:	4c                   	dec    esp
     54f:	4f                   	dec    edi
     550:	43                   	inc    ebx
     551:	48                   	dec    eax
     552:	45                   	inc    ebp
     553:	41                   	inc    ecx
     554:	50                   	push   eax
     555:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     558:	53                   	push   ebx
     559:	43                   	inc    ebx
     55a:	41                   	inc    ecx
     55b:	4c                   	dec    esp
     55c:	4c                   	dec    esp
     55d:	5f                   	pop    edi
     55e:	53                   	push   ebx
     55f:	45                   	inc    ebp
     560:	54                   	push   esp
     561:	53                   	push   ebx
     562:	49                   	dec    ecx
     563:	47                   	inc    edi
     564:	41                   	inc    ecx
     565:	43                   	inc    ebx
     566:	54                   	push   esp
     567:	49                   	dec    ecx
     568:	4f                   	dec    edi
     569:	4e                   	dec    esi
     56a:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     56d:	74 63                	je     5d2 <sysEnter_Vector-0x12fa2e>
     56f:	77 64                	ja     5d5 <sysEnter_Vector-0x12fa2b>
     571:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     574:	74 56                	je     5cc <sysEnter_Vector-0x12fa34>
     576:	61                   	popa   
     577:	6c                   	ins    BYTE PTR es:[edi],dx
     578:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
     57b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     57c:	73 65                	jae    5e3 <sysEnter_Vector-0x12fa1d>
     57e:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     581:	73 6f                	jae    5f2 <sysEnter_Vector-0x12fa0e>
     583:	6c                   	ins    BYTE PTR es:[edi],dx
     584:	76 65                	jbe    5eb <sysEnter_Vector-0x12fa15>
     586:	50                   	push   eax
     587:	61                   	popa   
     588:	74 68                	je     5f2 <sysEnter_Vector-0x12fa0e>
     58a:	5f                   	pop    edi
     58b:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     58d:	76 50                	jbe    5df <sysEnter_Vector-0x12fa21>
     58f:	61                   	popa   
     590:	74 68                	je     5fa <sysEnter_Vector-0x12fa06>
     592:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     595:	72 65                	jb     5fc <sysEnter_Vector-0x12fa04>
     597:	61                   	popa   
     598:	6d                   	ins    DWORD PTR es:[edi],dx
     599:	00 70 61             	add    BYTE PTR [eax+0x61],dh
     59c:	74 68                	je     606 <sysEnter_Vector-0x12f9fa>
     59e:	00 77 72             	add    BYTE PTR [edi+0x72],dh
     5a1:	69 74 65 5f 74 69 6d 	imul   esi,DWORD PTR [ebp+eiz*2+0x5f],0x656d6974
     5a8:	65 
     5a9:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
     5ad:	6c                   	ins    BYTE PTR es:[edi],dx
     5ae:	49                   	dec    ecx
     5af:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     5b2:	61                   	popa   
     5b3:	72 74                	jb     629 <sysEnter_Vector-0x12f9d7>
     5b5:	46                   	inc    esi
     5b6:	69 6c 65 50 6f 73 00 	imul   ebp,DWORD PTR [ebp+eiz*2+0x50],0x7300736f
     5bd:	73 
     5be:	74 61                	je     621 <sysEnter_Vector-0x12f9df>
     5c0:	74 49                	je     60b <sysEnter_Vector-0x12f9f5>
     5c2:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
     5c5:	50                   	push   eax
     5c6:	74 72                	je     63a <sysEnter_Vector-0x12f9c6>
     5c8:	00 75 73             	add    BYTE PTR [ebp+0x73],dh
     5cb:	65                   	gs
     5cc:	50                   	push   eax
     5cd:	61                   	popa   
     5ce:	74 68                	je     638 <sysEnter_Vector-0x12f9c8>
     5d0:	56                   	push   esi
     5d1:	61                   	popa   
     5d2:	72 69                	jb     63d <sysEnter_Vector-0x12f9c3>
     5d4:	61                   	popa   
     5d5:	62 6c 65 00          	bound  ebp,QWORD PTR [ebp+eiz*2+0x0]
     5d9:	72 65                	jb     640 <sysEnter_Vector-0x12f9c0>
     5db:	73 6f                	jae    64c <sysEnter_Vector-0x12f9b4>
     5dd:	6c                   	ins    BYTE PTR es:[edi],dx
     5de:	76 65                	jbe    645 <sysEnter_Vector-0x12f9bb>
     5e0:	50                   	push   eax
     5e1:	61                   	popa   
     5e2:	74 68                	je     64c <sysEnter_Vector-0x12f9b4>
     5e4:	5f                   	pop    edi
     5e5:	72 65                	jb     64c <sysEnter_Vector-0x12f9b4>
     5e7:	73 50                	jae    639 <sysEnter_Vector-0x12f9c7>
     5e9:	61                   	popa   
     5ea:	74 68                	je     654 <sysEnter_Vector-0x12f9ac>
     5ec:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
     5f0:	6c                   	ins    BYTE PTR es:[edi],dx
     5f1:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
     5f4:	65                   	gs
     5f5:	61                   	popa   
     5f6:	74 65                	je     65d <sysEnter_Vector-0x12f9a3>
     5f8:	5f                   	pop    edi
     5f9:	64                   	fs
     5fa:	61                   	popa   
     5fb:	74 65                	je     662 <sysEnter_Vector-0x12f99e>
     5fd:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     600:	74 6c                	je     66e <sysEnter_Vector-0x12f992>
     602:	69 6e 65 49 00 75 69 	imul   ebp,DWORD PTR [esi+0x65],0x69750049
     609:	6e                   	outs   dx,BYTE PTR ds:[esi]
     60a:	74 31                	je     63d <sysEnter_Vector-0x12f9c3>
     60c:	36                   	ss
     60d:	5f                   	pop    edi
     60e:	74 00                	je     610 <sysEnter_Vector-0x12f9f0>
     610:	77 72                	ja     684 <sysEnter_Vector-0x12f97c>
     612:	69 74 65 5f 64 61 74 	imul   esi,DWORD PTR [ebp+eiz*2+0x5f],0x65746164
     619:	65 
     61a:	00 6f 70             	add    BYTE PTR [edi+0x70],ch
     61d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     61f:	49                   	dec    ecx
     620:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     623:	73 6f                	jae    694 <sysEnter_Vector-0x12f96c>
     625:	6c                   	ins    BYTE PTR es:[edi],dx
     626:	76 65                	jbe    68d <sysEnter_Vector-0x12f973>
     628:	50                   	push   eax
     629:	61                   	popa   
     62a:	74 68                	je     694 <sysEnter_Vector-0x12f96c>
     62c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     62f:	5f                   	pop    edi
     630:	6c                   	ins    BYTE PTR es:[edi],dx
     631:	61                   	popa   
     632:	73 74                	jae    6a8 <sysEnter_Vector-0x12f958>
     634:	6d                   	ins    DWORD PTR es:[edi],dx
     635:	6f                   	outs   dx,DWORD PTR ds:[esi]
     636:	64 00 70 6f          	add    BYTE PTR fs:[eax+0x6f],dh
     63a:	73 69                	jae    6a5 <sysEnter_Vector-0x12f95b>
     63c:	74 69                	je     6a7 <sysEnter_Vector-0x12f959>
     63e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     63f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     640:	00 77 72             	add    BYTE PTR [edi+0x72],dh
     643:	69 74 65 49 00 73 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x49],0x65657300
     64a:	65 
     64b:	6b 00 77             	imul   eax,DWORD PTR [eax],0x77
     64e:	68 65 6e 63 65       	push   0x65636e65
     653:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     656:	74 6c                	je     6c4 <sysEnter_Vector-0x12f93c>
     658:	69 6e 65 00 67 65 74 	imul   ebp,DWORD PTR [esi+0x65],0x74656700
     65f:	6c                   	ins    BYTE PTR es:[edi],dx
     660:	69 6e 65 52 65 74 75 	imul   ebp,DWORD PTR [esi+0x65],0x75746552
     667:	72 6e                	jb     6d7 <sysEnter_Vector-0x12f929>
     669:	00 66 72             	add    BYTE PTR [esi+0x72],ah
     66c:	65 6f                	outs   dx,DWORD PTR gs:[esi]
     66e:	70 65                	jo     6d5 <sysEnter_Vector-0x12f92b>
     670:	6e                   	outs   dx,BYTE PTR ds:[esi]
     671:	00 6c 69 6e          	add    BYTE PTR [ecx+ebp*2+0x6e],ch
     675:	65                   	gs
     676:	54                   	push   esp
     677:	6f                   	outs   dx,DWORD PTR ds:[esi]
     678:	4f                   	dec    edi
     679:	75 74                	jne    6ef <sysEnter_Vector-0x12f911>
     67b:	70 75                	jo     6f2 <sysEnter_Vector-0x12f90e>
     67d:	74 00                	je     67f <sysEnter_Vector-0x12f981>
     67f:	63 6c 75 73          	arpl   WORD PTR [ebp+esi*2+0x73],bp
     683:	74 65                	je     6ea <sysEnter_Vector-0x12f916>
     685:	72 00                	jb     687 <sysEnter_Vector-0x12f979>
     687:	61                   	popa   
     688:	63 63 65             	arpl   WORD PTR [ebx+0x65],sp
     68b:	73 73                	jae    700 <sysEnter_Vector-0x12f900>
     68d:	5f                   	pop    edi
     68e:	64                   	fs
     68f:	61                   	popa   
     690:	74 65                	je     6f7 <sysEnter_Vector-0x12f909>
     692:	00 73 66             	add    BYTE PTR [ebx+0x66],dh
     695:	73 74                	jae    70b <sysEnter_Vector-0x12f8f5>
     697:	61                   	popa   
     698:	74 00                	je     69a <sysEnter_Vector-0x12f966>
     69a:	77 72                	ja     70e <sysEnter_Vector-0x12f8f2>
     69c:	69 74 65 00 75 6e 6c 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x696c6e75
     6a3:	69 
     6a4:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6a5:	6b 00 65             	imul   eax,DWORD PTR [eax],0x65
     6a8:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6a9:	74 72                	je     71d <sysEnter_Vector-0x12f8e3>
     6ab:	69 65 73 00 66 69 6c 	imul   esp,DWORD PTR [ebp+0x73],0x6c696600
     6b2:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     6b4:	61                   	popa   
     6b5:	6d                   	ins    DWORD PTR es:[edi],dx
     6b6:	65 00 6f 75          	add    BYTE PTR gs:[edi+0x75],ch
     6ba:	74 50                	je     70c <sysEnter_Vector-0x12f8f4>
     6bc:	61                   	popa   
     6bd:	74 68                	je     727 <sysEnter_Vector-0x12f8d9>
     6bf:	00 6c 69 6e          	add    BYTE PTR [ecx+ebp*2+0x6e],ch
     6c3:	65                   	gs
     6c4:	70 74                	jo     73a <sysEnter_Vector-0x12f8c6>
     6c6:	72 00                	jb     6c8 <sysEnter_Vector-0x12f938>
     6c8:	69 73 5f 64 69 72 00 	imul   esi,DWORD PTR [ebx+0x5f],0x726964
     6cf:	64 69 72 65 6e 74 72 	imul   esi,DWORD PTR fs:[edx+0x65],0x7972746e
     6d6:	79 
     6d7:	5f                   	pop    edi
     6d8:	74 00                	je     6da <sysEnter_Vector-0x12f926>
     6da:	66                   	data16
     6db:	73 74                	jae    751 <sysEnter_Vector-0x12f8af>
     6dd:	61                   	popa   
     6de:	74 5f                	je     73f <sysEnter_Vector-0x12f8c1>
     6e0:	74 00                	je     6e2 <sysEnter_Vector-0x12f91e>
     6e2:	74 6f                	je     753 <sysEnter_Vector-0x12f8ad>
     6e4:	6b 65 6e 00          	imul   esp,DWORD PTR [ebp+0x6e],0x0
     6e8:	5f                   	pop    edi
     6e9:	42                   	inc    edx
     6ea:	6f                   	outs   dx,DWORD PTR ds:[esi]
     6eb:	6f                   	outs   dx,DWORD PTR ds:[esi]
     6ec:	6c                   	ins    BYTE PTR es:[edi],dx
     6ed:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     6f0:	74 64                	je     756 <sysEnter_Vector-0x12f8aa>
     6f2:	69 72 49 00 64 69 72 	imul   esi,DWORD PTR [edx+0x49],0x72696400
     6f9:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     6fb:	74 72                	je     76f <sysEnter_Vector-0x12f891>
     6fd:	79 00                	jns    6ff <sysEnter_Vector-0x12f901>
     6ff:	72 65                	jb     766 <sysEnter_Vector-0x12f89a>
     701:	61                   	popa   
     702:	64                   	fs
     703:	49                   	dec    ecx
     704:	00 6c 65 6e          	add    BYTE PTR [ebp+eiz*2+0x6e],ch
     708:	67 74 68             	addr16 je 773 <sysEnter_Vector-0x12f88d>
     70b:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     70e:	61                   	popa   
     70f:	64 00 6d 6f          	add    BYTE PTR fs:[ebp+0x6f],ch
     713:	64 65 00 62 75       	fs add BYTE PTR fs:gs:[edx+0x75],ah
     718:	66                   	data16
     719:	66                   	data16
     71a:	65                   	gs
     71b:	72 00                	jb     71d <sysEnter_Vector-0x12f8e3>
     71d:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
     720:	65                   	gs
     721:	73 50                	jae    773 <sysEnter_Vector-0x12f88d>
     723:	61                   	popa   
     724:	72 73                	jb     799 <sysEnter_Vector-0x12f867>
     726:	65 64 00 63 72       	gs add BYTE PTR fs:gs:[ebx+0x72],ah
     72b:	65                   	gs
     72c:	61                   	popa   
     72d:	74 65                	je     794 <sysEnter_Vector-0x12f86c>
     72f:	5f                   	pop    edi
     730:	74 69                	je     79b <sysEnter_Vector-0x12f865>
     732:	6d                   	ins    DWORD PTR es:[edi],dx
     733:	65 00 63 6c          	add    BYTE PTR gs:[ebx+0x6c],ah
     737:	6f                   	outs   dx,DWORD PTR ds:[esi]
     738:	73 65                	jae    79f <sysEnter_Vector-0x12f861>
     73a:	49                   	dec    ecx
     73b:	00 73 65             	add    BYTE PTR [ebx+0x65],dh
     73e:	65 6b 49 00 73       	imul   ecx,DWORD PTR gs:[ecx+0x0],0x73
     743:	72 63                	jb     7a8 <sysEnter_Vector-0x12f858>
     745:	2f                   	das    
     746:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     74d:	75 69                	jne    7b8 <sysEnter_Vector-0x12f848>
     74f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     750:	74 38                	je     78a <sysEnter_Vector-0x12f876>
     752:	5f                   	pop    edi
     753:	74 00                	je     755 <sysEnter_Vector-0x12f8ab>
     755:	73 74                	jae    7cb <sysEnter_Vector-0x12f835>
     757:	5f                   	pop    edi
     758:	73 69                	jae    7c3 <sysEnter_Vector-0x12f83d>
     75a:	7a 65                	jp     7c1 <sysEnter_Vector-0x12f83f>
     75c:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     75f:	73 6f                	jae    7d0 <sysEnter_Vector-0x12f830>
     761:	6c                   	ins    BYTE PTR es:[edi],dx
     762:	76 65                	jbe    7c9 <sysEnter_Vector-0x12f837>
     764:	50                   	push   eax
     765:	61                   	popa   
     766:	74 68                	je     7d0 <sysEnter_Vector-0x12f830>
     768:	5f                   	pop    edi
     769:	63 77 64             	arpl   WORD PTR [edi+0x64],si
     76c:	00 68 61             	add    BYTE PTR [eax+0x61],ch
     76f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     770:	64                   	fs
     771:	6c                   	ins    BYTE PTR es:[edi],dx
     772:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
     776:	73 6f                	jae    7e7 <sysEnter_Vector-0x12f819>
     778:	6c                   	ins    BYTE PTR es:[edi],dx
     779:	76 65                	jbe    7e0 <sysEnter_Vector-0x12f820>
     77b:	50                   	push   eax
     77c:	61                   	popa   
     77d:	74 68                	je     7e7 <sysEnter_Vector-0x12f819>
     77f:	5f                   	pop    edi
     780:	69 6e 50 61 74 68 00 	imul   ebp,DWORD PTR [esi+0x50],0x687461
     787:	6c                   	ins    BYTE PTR es:[edi],dx
     788:	4c                   	dec    esp
     789:	69 6e 65 50 74 72 4c 	imul   ebp,DWORD PTR [esi+0x65],0x4c727450
     790:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     792:	00 66 69             	add    BYTE PTR [esi+0x69],ah
     795:	6c                   	ins    BYTE PTR es:[edi],dx
     796:	65                   	gs
     797:	5f                   	pop    edi
     798:	63 6c 65 61          	arpl   WORD PTR [ebp+eiz*2+0x61],bp
     79c:	6e                   	outs   dx,BYTE PTR ds:[esi]
     79d:	75 70                	jne    80f <sysEnter_Vector-0x12f7f1>
     79f:	00 62 79             	add    BYTE PTR [edx+0x79],ah
     7a2:	74 65                	je     809 <sysEnter_Vector-0x12f7f7>
     7a4:	73 52                	jae    7f8 <sysEnter_Vector-0x12f808>
     7a6:	65                   	gs
     7a7:	74 75                	je     81e <sysEnter_Vector-0x12f7e2>
     7a9:	72 6e                	jb     819 <sysEnter_Vector-0x12f7e7>
     7ab:	65 64 00 67 65       	gs add BYTE PTR fs:gs:[edi+0x65],ah
     7b0:	74 64                	je     816 <sysEnter_Vector-0x12f7ea>
     7b2:	69 72 00 62 75 66 66 	imul   esi,DWORD PTR [edx+0x0],0x66667562
     7b9:	65                   	gs
     7ba:	72 43                	jb     7ff <sysEnter_Vector-0x12f801>
     7bc:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7bd:	75 6e                	jne    82d <sysEnter_Vector-0x12f7d3>
     7bf:	74 00                	je     7c1 <sysEnter_Vector-0x12f83f>
     7c1:	67                   	addr16
     7c2:	65                   	gs
     7c3:	74 63                	je     828 <sysEnter_Vector-0x12f7d8>
     7c5:	68 61 72 00 67       	push   0x67007261
     7ca:	65                   	gs
     7cb:	74 73                	je     840 <sysEnter_Vector-0x12f7c0>
     7cd:	00 70 75             	add    BYTE PTR [eax+0x75],dh
     7d0:	74 63                	je     835 <sysEnter_Vector-0x12f7cb>
     7d2:	00 70 75             	add    BYTE PTR [eax+0x75],dh
     7d5:	74 73                	je     84a <sysEnter_Vector-0x12f7b6>
     7d7:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     7da:	78 6c                	js     848 <sysEnter_Vector-0x12f7b8>
     7dc:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     7de:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     7e1:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
     7e4:	72 00                	jb     7e6 <sysEnter_Vector-0x12f81a>
     7e6:	73 72                	jae    85a <sysEnter_Vector-0x12f7a6>
     7e8:	63 2f                	arpl   WORD PTR [edi],bp
     7ea:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
     7f1:	6e                   	outs   dx,BYTE PTR ds:[esi]
     7f2:	70 75                	jo     869 <sysEnter_Vector-0x12f797>
     7f4:	74 2e                	je     824 <sysEnter_Vector-0x12f7dc>
     7f6:	63 00                	arpl   WORD PTR [eax],ax
     7f8:	67                   	addr16
     7f9:	65                   	gs
     7fa:	74 73                	je     86f <sysEnter_Vector-0x12f791>
     7fc:	45                   	inc    ebp
     7fd:	72 72                	jb     871 <sysEnter_Vector-0x12f78f>
     7ff:	6f                   	outs   dx,DWORD PTR ds:[esi]
     800:	72 00                	jb     802 <sysEnter_Vector-0x12f7fe>
     802:	6c                   	ins    BYTE PTR es:[edi],dx
     803:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     806:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     809:	69 6e 74 00 6c 61 73 	imul   ebp,DWORD PTR [esi+0x74],0x73616c00
     810:	74 53                	je     865 <sysEnter_Vector-0x12f79b>
     812:	70 61                	jo     875 <sysEnter_Vector-0x12f78b>
     814:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
     817:	74 72                	je     88b <sysEnter_Vector-0x12f775>
     819:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     81c:	67 44                	addr16 inc esp
     81e:	61                   	popa   
     81f:	74 61                	je     882 <sysEnter_Vector-0x12f77e>
     821:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
     824:	65                   	gs
     825:	65                   	gs
     826:	70 54                	jo     87c <sysEnter_Vector-0x12f784>
     828:	69 63 6b 73 00 71 75 	imul   esp,DWORD PTR [ebx+0x6b],0x75710073
     82f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     830:	74 65                	je     897 <sysEnter_Vector-0x12f769>
     832:	50                   	push   eax
     833:	74 72                	je     8a7 <sysEnter_Vector-0x12f759>
     835:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
     838:	67 76 50             	addr16 jbe 88b <sysEnter_Vector-0x12f775>
     83b:	74 72                	je     8af <sysEnter_Vector-0x12f751>
     83d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     840:	61                   	popa   
     841:	72 74                	jb     8b7 <sysEnter_Vector-0x12f749>
     843:	5f                   	pop    edi
     844:	6f                   	outs   dx,DWORD PTR ds:[esi]
     845:	66 5f                	pop    di
     847:	77 6f                	ja     8b8 <sysEnter_Vector-0x12f748>
     849:	72 64                	jb     8af <sysEnter_Vector-0x12f751>
     84b:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
     84e:	72 6b                	jb     8bb <sysEnter_Vector-0x12f745>
     850:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     854:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
     857:	6e                   	outs   dx,BYTE PTR ds:[esi]
     858:	69 74 00 73 74 61 74 	imul   esi,DWORD PTR [eax+eax*1+0x73],0x65746174
     85f:	65 
     860:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
     863:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
     866:	6c                   	ins    BYTE PTR es:[edi],dx
     867:	74 69                	je     8d2 <sysEnter_Vector-0x12f72e>
     869:	6e                   	outs   dx,BYTE PTR ds:[esi]
     86a:	5f                   	pop    edi
     86b:	76 61                	jbe    8ce <sysEnter_Vector-0x12f732>
     86d:	5f                   	pop    edi
     86e:	6c                   	ins    BYTE PTR es:[edi],dx
     86f:	69 73 74 00 73 70 6c 	imul   esi,DWORD PTR [ebx+0x74],0x6c707300
     876:	69 74 00 73 69 67 6e 	imul   esi,DWORD PTR [eax+eax*1+0x73],0x616e6769
     87d:	61 
     87e:	6c                   	ins    BYTE PTR es:[edi],dx
     87f:	54                   	push   esp
     880:	61                   	popa   
     881:	73 6b                	jae    8ee <sysEnter_Vector-0x12f712>
     883:	00 73 70             	add    BYTE PTR [ebx+0x70],dh
     886:	61                   	popa   
     887:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
     88a:	74 72                	je     8fe <sysEnter_Vector-0x12f702>
     88c:	00 74 65 6d          	add    BYTE PTR [ebp+eiz*2+0x6d],dh
     890:	70 00                	jo     892 <sysEnter_Vector-0x12f76e>
     892:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     895:	6c                   	ins    BYTE PTR es:[edi],dx
     896:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
     89d:	67 76 00             	addr16 jbe 8a0 <sysEnter_Vector-0x12f760>
     8a0:	77 61                	ja     903 <sysEnter_Vector-0x12f6fd>
     8a2:	69 74 70 69 64 00 44 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65440064
     8a9:	65 
     8aa:	62 75 67             	bound  esi,QWORD PTR [ebp+0x67]
     8ad:	4c                   	dec    esp
     8ae:	65                   	gs
     8af:	76 65                	jbe    916 <sysEnter_Vector-0x12f6ea>
     8b1:	6c                   	ins    BYTE PTR es:[edi],dx
     8b2:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
     8b5:	65 63 62 00          	arpl   WORD PTR gs:[edx+0x0],sp
     8b9:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
     8bc:	6c                   	ins    BYTE PTR es:[edi],dx
     8bd:	6e                   	outs   dx,BYTE PTR ds:[esi]
     8be:	75 6d                	jne    92d <sysEnter_Vector-0x12f6d3>
     8c0:	00 64 62 6c          	add    BYTE PTR [edx+eiz*2+0x6c],ah
     8c4:	71 75                	jno    93b <sysEnter_Vector-0x12f6c5>
     8c6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     8c7:	74 65                	je     92e <sysEnter_Vector-0x12f6d2>
     8c9:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
     8cc:	65                   	gs
     8cd:	65                   	gs
     8ce:	70 00                	jo     8d0 <sysEnter_Vector-0x12f730>
     8d0:	64 6f                	outs   dx,DWORD PTR fs:[esi]
     8d2:	5f                   	pop    edi
     8d3:	73 79                	jae    94e <sysEnter_Vector-0x12f6b2>
     8d5:	73 63                	jae    93a <sysEnter_Vector-0x12f6c6>
     8d7:	61                   	popa   
     8d8:	6c                   	ins    BYTE PTR es:[edi],dx
     8d9:	6c                   	ins    BYTE PTR es:[edi],dx
     8da:	31 00                	xor    DWORD PTR [eax],eax
     8dc:	64 6f                	outs   dx,DWORD PTR fs:[esi]
     8de:	5f                   	pop    edi
     8df:	73 79                	jae    95a <sysEnter_Vector-0x12f6a6>
     8e1:	73 63                	jae    946 <sysEnter_Vector-0x12f6ba>
     8e3:	61                   	popa   
     8e4:	6c                   	ins    BYTE PTR es:[edi],dx
     8e5:	6c                   	ins    BYTE PTR es:[edi],dx
     8e6:	32 00                	xor    al,BYTE PTR [eax]
     8e8:	64 6f                	outs   dx,DWORD PTR fs:[esi]
     8ea:	5f                   	pop    edi
     8eb:	73 79                	jae    966 <sysEnter_Vector-0x12f69a>
     8ed:	73 63                	jae    952 <sysEnter_Vector-0x12f6ae>
     8ef:	61                   	popa   
     8f0:	6c                   	ins    BYTE PTR es:[edi],dx
     8f1:	6c                   	ins    BYTE PTR es:[edi],dx
     8f2:	33 00                	xor    eax,DWORD PTR [eax]
     8f4:	64 6f                	outs   dx,DWORD PTR fs:[esi]
     8f6:	5f                   	pop    edi
     8f7:	73 79                	jae    972 <sysEnter_Vector-0x12f68e>
     8f9:	73 63                	jae    95e <sysEnter_Vector-0x12f6a2>
     8fb:	61                   	popa   
     8fc:	6c                   	ins    BYTE PTR es:[edi],dx
     8fd:	6c                   	ins    BYTE PTR es:[edi],dx
     8fe:	34 00                	xor    al,0x0
     900:	5f                   	pop    edi
     901:	5f                   	pop    edi
     902:	6d                   	ins    DWORD PTR es:[edi],dx
     903:	73 00                	jae    905 <sysEnter_Vector-0x12f6fb>
     905:	49                   	dec    ecx
     906:	4e                   	dec    esi
     907:	5f                   	pop    edi
     908:	57                   	push   edi
     909:	4f                   	dec    edi
     90a:	52                   	push   edx
     90b:	44                   	inc    esp
     90c:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
     90f:	67 76 5f             	addr16 jbe 971 <sysEnter_Vector-0x12f68f>
     912:	73 69                	jae    97d <sysEnter_Vector-0x12f683>
     914:	7a 65                	jp     97b <sysEnter_Vector-0x12f685>
     916:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     91a:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     91d:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
     924:	65 
     925:	64 00 77 68          	add    BYTE PTR fs:[edi+0x68],dh
     929:	69 63 68 00 69 73 73 	imul   esp,DWORD PTR [ebx+0x68],0x73736900
     930:	70 61                	jo     993 <sysEnter_Vector-0x12f66d>
     932:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
     935:	5f                   	pop    edi
     936:	5f                   	pop    edi
     937:	67 6e                	outs   dx,BYTE PTR ds:[si]
     939:	75 63                	jne    99e <sysEnter_Vector-0x12f662>
     93b:	5f                   	pop    edi
     93c:	76 61                	jbe    99f <sysEnter_Vector-0x12f661>
     93e:	5f                   	pop    edi
     93f:	6c                   	ins    BYTE PTR es:[edi],dx
     940:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
     947:	6f                   	outs   dx,DWORD PTR ds:[esi]
     948:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     94b:	69 6e 74 64 49 00 70 	imul   ebp,DWORD PTR [esi+0x74],0x70004964
     952:	61                   	popa   
     953:	72 61                	jb     9b6 <sysEnter_Vector-0x12f64a>
     955:	6d                   	ins    DWORD PTR es:[edi],dx
     956:	31 00                	xor    DWORD PTR [eax],eax
     958:	70 61                	jo     9bb <sysEnter_Vector-0x12f645>
     95a:	72 61                	jb     9bd <sysEnter_Vector-0x12f643>
     95c:	6d                   	ins    DWORD PTR es:[edi],dx
     95d:	32 00                	xor    al,BYTE PTR [eax]
     95f:	70 61                	jo     9c2 <sysEnter_Vector-0x12f63e>
     961:	72 61                	jb     9c4 <sysEnter_Vector-0x12f63c>
     963:	6d                   	ins    DWORD PTR es:[edi],dx
     964:	33 00                	xor    eax,DWORD PTR [eax]
     966:	70 61                	jo     9c9 <sysEnter_Vector-0x12f637>
     968:	72 61                	jb     9cb <sysEnter_Vector-0x12f635>
     96a:	6d                   	ins    DWORD PTR es:[edi],dx
     96b:	34 00                	xor    al,0x0
     96d:	73 65                	jae    9d4 <sysEnter_Vector-0x12f62c>
     96f:	74 63                	je     9d4 <sysEnter_Vector-0x12f62c>
     971:	77 64                	ja     9d7 <sysEnter_Vector-0x12f629>
     973:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     976:	6f                   	outs   dx,DWORD PTR ds:[esi]
     977:	67 72 61             	addr16 jb 9db <sysEnter_Vector-0x12f625>
     97a:	6d                   	ins    DWORD PTR es:[edi],dx
     97b:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
     97e:	65 63 61 00          	arpl   WORD PTR gs:[ecx+0x0],sp
     982:	73 6c                	jae    9f0 <sysEnter_Vector-0x12f610>
     984:	65                   	gs
     985:	65                   	gs
     986:	70 4d                	jo     9d5 <sysEnter_Vector-0x12f62b>
     988:	53                   	push   ebx
     989:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
     98c:	72 6d                	jb     9fb <sysEnter_Vector-0x12f605>
     98e:	61                   	popa   
     98f:	74 00                	je     991 <sysEnter_Vector-0x12f66f>
     991:	70 72                	jo     a05 <sysEnter_Vector-0x12f5fb>
     993:	69 6e 74 42 75 66 66 	imul   ebp,DWORD PTR [esi+0x74],0x66667542
     99a:	65                   	gs
     99b:	72 00                	jb     99d <sysEnter_Vector-0x12f663>
     99d:	73 69                	jae    a08 <sysEnter_Vector-0x12f5f8>
     99f:	67 6e                	outs   dx,BYTE PTR ds:[si]
     9a1:	61                   	popa   
     9a2:	6c                   	ins    BYTE PTR es:[edi],dx
     9a3:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
     9a6:	65 63 00             	arpl   WORD PTR gs:[eax],ax
     9a9:	5f                   	pop    edi
     9aa:	5f                   	pop    edi
     9ab:	73 65                	jae    a12 <sysEnter_Vector-0x12f5ee>
     9ad:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     9b0:	64                   	fs
     9b1:	73 00                	jae    9b3 <sysEnter_Vector-0x12f64d>
     9b3:	44                   	inc    esp
     9b4:	55                   	push   ebp
     9b5:	4c                   	dec    esp
     9b6:	4c                   	dec    esp
     9b7:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     9ba:	61                   	popa   
     9bb:	74 65                	je     a22 <sysEnter_Vector-0x12f5de>
     9bd:	73 00                	jae    9bf <sysEnter_Vector-0x12f641>
     9bf:	49                   	dec    ecx
     9c0:	4e                   	dec    esi
     9c1:	5f                   	pop    edi
     9c2:	53                   	push   ebx
     9c3:	54                   	push   esp
     9c4:	52                   	push   edx
     9c5:	49                   	dec    ecx
     9c6:	4e                   	dec    esi
     9c7:	47                   	inc    edi
     9c8:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     9cb:	63 2f                	arpl   WORD PTR [edi],bp
     9cd:	6c                   	ins    BYTE PTR es:[edi],dx
     9ce:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     9d5:	4f                   	dec    edi
     9d6:	53                   	push   ebx
     9d7:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     9da:	61                   	popa   
     9db:	72 67                	jb     a44 <sysEnter_Vector-0x12f5bc>
     9dd:	63 00                	arpl   WORD PTR [eax],ax
     9df:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     9e2:	6c                   	ins    BYTE PTR es:[edi],dx
     9e3:	69 6e 65 00 64 6f 5f 	imul   ebp,DWORD PTR [esi+0x65],0x5f6f6400
     9ea:	73 79                	jae    a65 <sysEnter_Vector-0x12f59b>
     9ec:	73 63                	jae    a51 <sysEnter_Vector-0x12f5af>
     9ee:	61                   	popa   
     9ef:	6c                   	ins    BYTE PTR es:[edi],dx
     9f0:	6c                   	ins    BYTE PTR es:[edi],dx
     9f1:	30 00                	xor    BYTE PTR [eax],al
     9f3:	73 70                	jae    a65 <sysEnter_Vector-0x12f59b>
     9f5:	6c                   	ins    BYTE PTR es:[edi],dx
     9f6:	69 74 49 00 73 65 74 	imul   esi,DWORD PTR [ecx+ecx*2+0x0],0x70746573
     9fd:	70 
     9fe:	72 69                	jb     a69 <sysEnter_Vector-0x12f597>
     a00:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a01:	72 69                	jb     a6c <sysEnter_Vector-0x12f594>
     a03:	74 79                	je     a7e <sysEnter_Vector-0x12f582>
     a05:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     a09:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
     a0c:	6c                   	ins    BYTE PTR es:[edi],dx
     a0d:	65                   	gs
     a0e:	61                   	popa   
     a0f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     a10:	75 70                	jne    a82 <sysEnter_Vector-0x12f57e>
     a12:	00 74 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],dh
     a16:	6b 4e 75 6d          	imul   ecx,DWORD PTR [esi+0x75],0x6d
     a1a:	00 63 6d             	add    BYTE PTR [ebx+0x6d],ah
     a1d:	64                   	fs
     a1e:	6c                   	ins    BYTE PTR es:[edi],dx
     a1f:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
     a26:	67 76 49             	addr16 jbe a72 <sysEnter_Vector-0x12f58e>
     a29:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
     a2c:	67 76 00             	addr16 jbe a2f <sysEnter_Vector-0x12f5d1>
     a2f:	65                   	gs
     a30:	78 69                	js     a9b <sysEnter_Vector-0x12f565>
     a32:	74 00                	je     a34 <sysEnter_Vector-0x12f5cc>
     a34:	73 74                	jae    aaa <sysEnter_Vector-0x12f556>
     a36:	61                   	popa   
     a37:	74 75                	je     aae <sysEnter_Vector-0x12f552>
     a39:	73 00                	jae    a3b <sysEnter_Vector-0x12f5c5>
     a3b:	73 65                	jae    aa2 <sysEnter_Vector-0x12f55e>
     a3d:	74 53                	je     a92 <sysEnter_Vector-0x12f56e>
     a3f:	54                   	push   esp
     a40:	44                   	inc    esp
     a41:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     a44:	67 48                	addr16 dec eax
     a46:	61                   	popa   
     a47:	6e                   	outs   dx,BYTE PTR ds:[esi]
     a48:	64                   	fs
     a49:	6c                   	ins    BYTE PTR es:[edi],dx
     a4a:	65                   	gs
     a4b:	72 00                	jb     a4d <sysEnter_Vector-0x12f5b3>
     a4d:	5f                   	pop    edi
     a4e:	5f                   	pop    edi
     a4f:	74 69                	je     aba <sysEnter_Vector-0x12f546>
     a51:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
     a54:	00 74 61 6b          	add    BYTE PTR [ecx+eiz*2+0x6b],dh
     a58:	65                   	gs
     a59:	41                   	inc    ecx
     a5a:	44                   	inc    esp
     a5b:	75 6d                	jne    aca <sysEnter_Vector-0x12f536>
     a5d:	70 00                	jo     a5f <sysEnter_Vector-0x12f5a1>
     a5f:	66 69 6c 65 64 00 6d 	imul   bp,WORD PTR [ebp+eiz*2+0x64],0x6d00
     a66:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a67:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
     a6e:	6e 
     a6f:	61                   	popa   
     a70:	6c                   	ins    BYTE PTR es:[edi],dx
     a71:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
     a74:	67 73 00             	addr16 jae a77 <sysEnter_Vector-0x12f589>
     a77:	70 72                	jo     aeb <sysEnter_Vector-0x12f515>
     a79:	69 6e 74 49 00 73 74 	imul   ebp,DWORD PTR [esi+0x74],0x74730049
     a80:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a81:	70 00                	jo     a83 <sysEnter_Vector-0x12f57d>
     a83:	70 72                	jo     af7 <sysEnter_Vector-0x12f509>
     a85:	69 6e 74 64 00 73 4d 	imul   ebp,DWORD PTR [esi+0x74],0x4d730064
     a8c:	4d                   	dec    ebp
     a8d:	61                   	popa   
     a8e:	70 53                	jo     ae3 <sysEnter_Vector-0x12f51d>
     a90:	79 73                	jns    b05 <sysEnter_Vector-0x12f4fb>
     a92:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
     a95:	6c                   	ins    BYTE PTR es:[edi],dx
     a96:	00 6f 66             	add    BYTE PTR [edi+0x66],ch
     a99:	66 5f                	pop    di
     a9b:	74 00                	je     a9d <sysEnter_Vector-0x12f563>
     a9d:	70 61                	jo     b00 <sysEnter_Vector-0x12f500>
     a9f:	72 61                	jb     b02 <sysEnter_Vector-0x12f4fe>
     aa1:	6d                   	ins    DWORD PTR es:[edi],dx
     aa2:	73 00                	jae    aa4 <sysEnter_Vector-0x12f55c>
     aa4:	66                   	data16
     aa5:	6c                   	ins    BYTE PTR es:[edi],dx
     aa6:	61                   	popa   
     aa7:	67 73 00             	addr16 jae aaa <sysEnter_Vector-0x12f556>
     aaa:	73 72                	jae    b1e <sysEnter_Vector-0x12f4e2>
     aac:	63 2f                	arpl   WORD PTR [edi],bp
     aae:	6c                   	ins    BYTE PTR es:[edi],dx
     aaf:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
     ab6:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     ab9:	70 72                	jo     b2d <sysEnter_Vector-0x12f4d3>
     abb:	6f                   	outs   dx,DWORD PTR ds:[esi]
     abc:	74 00                	je     abe <sysEnter_Vector-0x12f542>
     abe:	6d                   	ins    DWORD PTR es:[edi],dx
     abf:	6d                   	ins    DWORD PTR es:[edi],dx
     ac0:	61                   	popa   
     ac1:	70 00                	jo     ac3 <sysEnter_Vector-0x12f53d>
     ac3:	73 79                	jae    b3e <sysEnter_Vector-0x12f4c2>
     ac5:	73 63                	jae    b2a <sysEnter_Vector-0x12f4d6>
     ac7:	61                   	popa   
     ac8:	6c                   	ins    BYTE PTR es:[edi],dx
     ac9:	6c                   	ins    BYTE PTR es:[edi],dx
     aca:	5f                   	pop    edi
     acb:	6d                   	ins    DWORD PTR es:[edi],dx
     acc:	6d                   	ins    DWORD PTR es:[edi],dx
     acd:	61                   	popa   
     ace:	70 5f                	jo     b2f <sysEnter_Vector-0x12f4d1>
     ad0:	74 00                	je     ad2 <sysEnter_Vector-0x12f52e>
     ad2:	70 72                	jo     b46 <sysEnter_Vector-0x12f4ba>
     ad4:	65                   	gs
     ad5:	76 00                	jbe    ad7 <sysEnter_Vector-0x12f529>
     ad7:	6c                   	ins    BYTE PTR es:[edi],dx
     ad8:	61                   	popa   
     ad9:	73 74                	jae    b4f <sysEnter_Vector-0x12f4b1>
     adb:	48                   	dec    eax
     adc:	52                   	push   edx
     add:	43                   	inc    ebx
     ade:	72 65                	jb     b45 <sysEnter_Vector-0x12f4bb>
     ae0:	61                   	popa   
     ae1:	74 65                	je     b48 <sysEnter_Vector-0x12f4b8>
     ae3:	64 00 68 65          	add    BYTE PTR fs:[eax+0x65],ch
     ae7:	61                   	popa   
     ae8:	70 43                	jo     b2d <sysEnter_Vector-0x12f4d3>
     aea:	75 72                	jne    b5e <sysEnter_Vector-0x12f4a2>
     aec:	72 00                	jb     aee <sysEnter_Vector-0x12f512>
     aee:	6e                   	outs   dx,BYTE PTR ds:[esi]
     aef:	65                   	gs
     af0:	78 74                	js     b66 <sysEnter_Vector-0x12f49a>
     af2:	00 68 65             	add    BYTE PTR [eax+0x65],ch
     af5:	61                   	popa   
     af6:	70 72                	jo     b6a <sysEnter_Vector-0x12f496>
     af8:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
     afc:	00 68 65             	add    BYTE PTR [eax+0x65],ch
     aff:	61                   	popa   
     b00:	70 42                	jo     b44 <sysEnter_Vector-0x12f4bc>
     b02:	61                   	popa   
     b03:	73 65                	jae    b6a <sysEnter_Vector-0x12f496>
     b05:	00 66 72             	add    BYTE PTR [esi+0x72],ah
     b08:	65                   	gs
     b09:	65                   	gs
     b0a:	49                   	dec    ecx
     b0b:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     b0e:	72 6b                	jb     b7b <sysEnter_Vector-0x12f485>
     b10:	65                   	gs
     b11:	72 00                	jb     b13 <sysEnter_Vector-0x12f4ed>
     b13:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b14:	65                   	gs
     b15:	77 48                	ja     b5f <sysEnter_Vector-0x12f4a1>
     b17:	65                   	gs
     b18:	61                   	popa   
     b19:	70 52                	jo     b6d <sysEnter_Vector-0x12f493>
     b1b:	65                   	gs
     b1c:	71 75                	jno    b93 <sysEnter_Vector-0x12f46d>
     b1e:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
     b25:	75 6c                	jne    b93 <sysEnter_Vector-0x12f46d>
     b27:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
     b2e:	75 65                	jne    b95 <sysEnter_Vector-0x12f46b>
     b30:	73 74                	jae    ba6 <sysEnter_Vector-0x12f45a>
     b32:	00 66 69             	add    BYTE PTR [esi+0x69],ah
     b35:	6c                   	ins    BYTE PTR es:[edi],dx
     b36:	6c                   	ins    BYTE PTR es:[edi],dx
     b37:	65                   	gs
     b38:	72 00                	jb     b3a <sysEnter_Vector-0x12f4c6>
     b3a:	69 6e 55 73 65 00 73 	imul   ebp,DWORD PTR [esi+0x55],0x73006573
     b41:	68 65 61 70 00       	push   0x706165
     b46:	69 6e 69 74 6d 61 6c 	imul   ebp,DWORD PTR [esi+0x69],0x6c616d74
     b4d:	6c                   	ins    BYTE PTR es:[edi],dx
     b4e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b4f:	63 00                	arpl   WORD PTR [eax],ax
     b51:	72 65                	jb     bb8 <sysEnter_Vector-0x12f448>
     b53:	71 75                	jno    bca <sysEnter_Vector-0x12f436>
     b55:	65                   	gs
     b56:	73 74                	jae    bcc <sysEnter_Vector-0x12f434>
     b58:	53                   	push   ebx
     b59:	69 7a 65 00 6d 61 6c 	imul   edi,DWORD PTR [edx+0x65],0x6c616d00
     b60:	6c                   	ins    BYTE PTR es:[edi],dx
     b61:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b62:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
     b65:	6c                   	ins    BYTE PTR es:[edi],dx
     b66:	65                   	gs
     b67:	61                   	popa   
     b68:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b69:	75 70                	jne    bdb <sysEnter_Vector-0x12f425>
     b6b:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
     b6e:	6c                   	ins    BYTE PTR es:[edi],dx
     b6f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b70:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
     b73:	65                   	gs
     b74:	64                   	fs
     b75:	50                   	push   eax
     b76:	74 72                	je     bea <sysEnter_Vector-0x12f416>
     b78:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
     b7b:	77 6c                	ja     be9 <sysEnter_Vector-0x12f417>
     b7d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     b7f:	00 53 61             	add    BYTE PTR [ebx+0x61],dl
     b82:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b83:	69 74 79 4c 6f 6f 70 	imul   esi,DWORD PTR [ecx+edi*2+0x4c],0x706f6f
     b8a:	00 
     b8b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b8c:	65                   	gs
     b8d:	77 53                	ja     be2 <sysEnter_Vector-0x12f41e>
     b8f:	69 7a 65 00 72 65 61 	imul   edi,DWORD PTR [edx+0x65],0x61657200
     b96:	6c                   	ins    BYTE PTR es:[edi],dx
     b97:	53                   	push   ebx
     b98:	69 7a 65 00 6e 65 65 	imul   edi,DWORD PTR [edx+0x65],0x65656e00
     b9f:	64 65 64 00 72 65    	fs gs add BYTE PTR fs:gs:[edx+0x65],dh
     ba5:	61                   	popa   
     ba6:	6c                   	ins    BYTE PTR es:[edi],dx
     ba7:	6c                   	ins    BYTE PTR es:[edi],dx
     ba8:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ba9:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
     bac:	75 73                	jne    c21 <sysEnter_Vector-0x12f3df>
     bae:	65                   	gs
     baf:	73 00                	jae    bb1 <sysEnter_Vector-0x12f44f>
     bb1:	68 65 61 70 72       	push   0x72706165
     bb6:	65 63 00             	arpl   WORD PTR gs:[eax],ax
     bb9:	66                   	data16
     bba:	6e                   	outs   dx,BYTE PTR ds:[esi]
     bbb:	65                   	gs
     bbc:	77 70                	ja     c2e <sysEnter_Vector-0x12f3d2>
     bbe:	74 72                	je     c32 <sysEnter_Vector-0x12f3ce>
     bc0:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     bc3:	63 2f                	arpl   WORD PTR [edi],bp
     bc5:	6d                   	ins    DWORD PTR es:[edi],dx
     bc6:	61                   	popa   
     bc7:	6c                   	ins    BYTE PTR es:[edi],dx
     bc8:	6c                   	ins    BYTE PTR es:[edi],dx
     bc9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     bca:	63 2e                	arpl   WORD PTR [esi],bp
     bcc:	63 00                	arpl   WORD PTR [eax],ax
     bce:	68 65 61 70 50       	push   0x50706165
     bd3:	74 72                	je     c47 <sysEnter_Vector-0x12f3b9>
     bd5:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
     bd8:	6c                   	ins    BYTE PTR es:[edi],dx
     bd9:	64                   	fs
     bda:	70 74                	jo     c50 <sysEnter_Vector-0x12f3b0>
     bdc:	72 00                	jb     bde <sysEnter_Vector-0x12f422>
     bde:	66                   	data16
     bdf:	72 65                	jb     c46 <sysEnter_Vector-0x12f3ba>
     be1:	65 00 66 70          	add    BYTE PTR gs:[esi+0x70],ah
     be5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     be6:	69 6e 74 65 72 00 53 	imul   ebp,DWORD PTR [esi+0x74],0x53007265
     bed:	61                   	popa   
     bee:	6e                   	outs   dx,BYTE PTR ds:[esi]
     bef:	69 74 79 4c 6f 6f 70 	imul   esi,DWORD PTR [ecx+edi*2+0x4c],0x32706f6f
     bf6:	32 
     bf7:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     bfa:	6c                   	ins    BYTE PTR es:[edi],dx
     bfb:	6c                   	ins    BYTE PTR es:[edi],dx
     bfc:	6f                   	outs   dx,DWORD PTR ds:[esi]
     bfd:	63 46 69             	arpl   WORD PTR [esi+0x69],ax
     c00:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c01:	64                   	fs
     c02:	41                   	inc    ecx
     c03:	76 61                	jbe    c66 <sysEnter_Vector-0x12f39a>
     c05:	69 6c 61 62 6c 65 4d 	imul   ebp,DWORD PTR [ecx+eiz*2+0x62],0x654d656c
     c0c:	65 
     c0d:	6d                   	ins    DWORD PTR es:[edi],dx
     c0e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c0f:	72 79                	jb     c8a <sysEnter_Vector-0x12f376>
     c11:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     c14:	61                   	popa   
     c15:	6c                   	ins    BYTE PTR es:[edi],dx
     c16:	6c                   	ins    BYTE PTR es:[edi],dx
     c17:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c18:	63 00                	arpl   WORD PTR [eax],ax
     c1a:	68 65 61 70 45       	push   0x45706165
     c1f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c20:	64 00 6d 61          	add    BYTE PTR fs:[ebp+0x61],ch
     c24:	6c                   	ins    BYTE PTR es:[edi],dx
     c25:	6c                   	ins    BYTE PTR es:[edi],dx
     c26:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c27:	63 53 61             	arpl   WORD PTR [ebx+0x61],dx
     c2a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c2b:	69 74 79 43 68 65 63 	imul   esi,DWORD PTR [ecx+edi*2+0x43],0x6b636568
     c32:	6b 
     c33:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
     c36:	6d                   	ins    DWORD PTR es:[edi],dx
     c37:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     c3a:	49                   	dec    ecx
     c3b:	00 64 65 73          	add    BYTE PTR [ebp+eiz*2+0x73],ah
     c3f:	74 00                	je     c41 <sysEnter_Vector-0x12f3bf>
     c41:	6d                   	ins    DWORD PTR es:[edi],dx
     c42:	65                   	gs
     c43:	6d                   	ins    DWORD PTR es:[edi],dx
     c44:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     c47:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     c4a:	63 2f                	arpl   WORD PTR [edi],bp
     c4c:	6d                   	ins    DWORD PTR es:[edi],dx
     c4d:	65                   	gs
     c4e:	6d                   	ins    DWORD PTR es:[edi],dx
     c4f:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     c52:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     c55:	73 72                	jae    cc9 <sysEnter_Vector-0x12f337>
     c57:	63 2f                	arpl   WORD PTR [edi],bp
     c59:	6d                   	ins    DWORD PTR es:[edi],dx
     c5a:	65                   	gs
     c5b:	6d                   	ins    DWORD PTR es:[edi],dx
     c5c:	73 65                	jae    cc3 <sysEnter_Vector-0x12f33d>
     c5e:	74 2e                	je     c8e <sysEnter_Vector-0x12f372>
     c60:	63 00                	arpl   WORD PTR [eax],ax
     c62:	6d                   	ins    DWORD PTR es:[edi],dx
     c63:	65                   	gs
     c64:	6d                   	ins    DWORD PTR es:[edi],dx
     c65:	73 65                	jae    ccc <sysEnter_Vector-0x12f334>
     c67:	74 00                	je     c69 <sysEnter_Vector-0x12f397>
     c69:	6d                   	ins    DWORD PTR es:[edi],dx
     c6a:	65                   	gs
     c6b:	6d                   	ins    DWORD PTR es:[edi],dx
     c6c:	73 65                	jae    cd3 <sysEnter_Vector-0x12f32d>
     c6e:	74 49                	je     cb9 <sysEnter_Vector-0x12f347>
     c70:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
     c73:	61                   	popa   
     c74:	6c                   	ins    BYTE PTR es:[edi],dx
     c75:	00 66 56             	add    BYTE PTR [esi+0x56],ah
     c78:	61                   	popa   
     c79:	6c                   	ins    BYTE PTR es:[edi],dx
     c7a:	00 6f 6c             	add    BYTE PTR [edi+0x6c],ch
     c7d:	64                   	fs
     c7e:	66                   	data16
     c7f:	64 00 64 75 70       	add    BYTE PTR fs:[ebp+esi*2+0x70],ah
     c84:	33 00                	xor    eax,DWORD PTR [eax]
     c86:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c87:	65                   	gs
     c88:	77 66                	ja     cf0 <sysEnter_Vector-0x12f310>
     c8a:	64 00 70 69          	add    BYTE PTR fs:[eax+0x69],dh
     c8e:	70 65                	jo     cf5 <sysEnter_Vector-0x12f30b>
     c90:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     c93:	63 2f                	arpl   WORD PTR [edi],bp
     c95:	70 69                	jo     d00 <sysEnter_Vector-0x12f300>
     c97:	70 65                	jo     cfe <sysEnter_Vector-0x12f302>
     c99:	5f                   	pop    edi
     c9a:	6c                   	ins    BYTE PTR es:[edi],dx
     c9b:	69 62 2e 63 00 70 69 	imul   esp,DWORD PTR [edx+0x2e],0x69700063
     ca2:	70 65                	jo     d09 <sysEnter_Vector-0x12f2f7>
     ca4:	66                   	data16
     ca5:	64 00 73 72          	add    BYTE PTR fs:[ebx+0x72],dh
     ca9:	63 2f                	arpl   WORD PTR [edi],bp
     cab:	70 72                	jo     d1f <sysEnter_Vector-0x12f2e1>
     cad:	6f                   	outs   dx,DWORD PTR ds:[esi]
     cae:	63 69 6e             	arpl   WORD PTR [ecx+0x6e],bp
     cb1:	66 6f                	outs   dx,WORD PTR ds:[esi]
     cb3:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     cb6:	74 6d                	je     d25 <sysEnter_Vector-0x12f2db>
     cb8:	5f                   	pop    edi
     cb9:	68 6f 75 72 00       	push   0x72756f
     cbe:	72 75                	jb     d35 <sysEnter_Vector-0x12f2cb>
     cc0:	6e                   	outs   dx,BYTE PTR ds:[esi]
     cc1:	74 69                	je     d2c <sysEnter_Vector-0x12f2d4>
     cc3:	6d                   	ins    DWORD PTR es:[edi],dx
     cc4:	65                   	gs
     cc5:	5f                   	pop    edi
     cc6:	73 65                	jae    d2d <sysEnter_Vector-0x12f2d3>
     cc8:	63 73 00             	arpl   WORD PTR [ebx+0x0],si
     ccb:	74 6d                	je     d3a <sysEnter_Vector-0x12f2c6>
     ccd:	5f                   	pop    edi
     cce:	7a 6f                	jp     d3f <sysEnter_Vector-0x12f2c1>
     cd0:	6e                   	outs   dx,BYTE PTR ds:[esi]
     cd1:	65 00 73 74          	add    BYTE PTR gs:[ebx+0x74],dh
     cd5:	61                   	popa   
     cd6:	74 42                	je     d1a <sysEnter_Vector-0x12f2e6>
     cd8:	75 66                	jne    d40 <sysEnter_Vector-0x12f2c0>
     cda:	66                   	data16
     cdb:	65                   	gs
     cdc:	72 00                	jb     cde <sysEnter_Vector-0x12f322>
     cde:	6c                   	ins    BYTE PTR es:[edi],dx
     cdf:	61                   	popa   
     ce0:	73 74                	jae    d56 <sysEnter_Vector-0x12f2aa>
     ce2:	55                   	push   ebp
     ce3:	70 64                	jo     d49 <sysEnter_Vector-0x12f2b7>
     ce5:	61                   	popa   
     ce6:	74 65                	je     d4d <sysEnter_Vector-0x12f2b3>
     ce8:	49                   	dec    ecx
     ce9:	74 65                	je     d50 <sysEnter_Vector-0x12f2b0>
     ceb:	72 61                	jb     d4e <sysEnter_Vector-0x12f2b2>
     ced:	74 69                	je     d58 <sysEnter_Vector-0x12f2a8>
     cef:	6f                   	outs   dx,DWORD PTR ds:[esi]
     cf0:	6e                   	outs   dx,BYTE PTR ds:[esi]
     cf1:	00 64 69 72          	add    BYTE PTR [ecx+ebp*2+0x72],ah
     cf5:	45                   	inc    ebp
     cf6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     cf7:	74 72                	je     d6b <sysEnter_Vector-0x12f295>
     cf9:	69 65 73 00 62 75 69 	imul   esp,DWORD PTR [ebp+0x73],0x69756200
     d00:	6c                   	ins    BYTE PTR es:[edi],dx
     d01:	64                   	fs
     d02:	50                   	push   eax
     d03:	72 6f                	jb     d74 <sysEnter_Vector-0x12f28c>
     d05:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     d08:	66 6f                	outs   dx,WORD PTR ds:[esi]
     d0a:	54                   	push   esp
     d0b:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
     d0f:	6d                   	ins    DWORD PTR es:[edi],dx
     d10:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d11:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d12:	00 62 75             	add    BYTE PTR [edx+0x75],ah
     d15:	69 6c 64 41 6c 6c 50 	imul   ebp,DWORD PTR [esp+eiz*2+0x41],0x72506c6c
     d1c:	72 
     d1d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d1e:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     d21:	66 6f                	outs   dx,WORD PTR ds:[esi]
     d23:	54                   	push   esp
     d24:	73 00                	jae    d26 <sysEnter_Vector-0x12f2da>
     d26:	74 6d                	je     d95 <sysEnter_Vector-0x12f26b>
     d28:	5f                   	pop    edi
     d29:	79 65                	jns    d90 <sysEnter_Vector-0x12f270>
     d2b:	61                   	popa   
     d2c:	72 00                	jb     d2e <sysEnter_Vector-0x12f2d2>
     d2e:	69 74 65 72 61 74 69 	imul   esi,DWORD PTR [ebp+eiz*2+0x72],0x6f697461
     d35:	6f 
     d36:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d37:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     d3a:	61                   	popa   
     d3b:	74 69                	je     da6 <sysEnter_Vector-0x12f25a>
     d3d:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d3e:	66 6f                	outs   dx,WORD PTR ds:[esi]
     d40:	00 74 6f 70          	add    BYTE PTR [edi+ebp*2+0x70],dh
     d44:	69 6e 66 6f 00 62 75 	imul   ebp,DWORD PTR [esi+0x66],0x7562006f
     d4b:	69 6c 64 50 72 6f 63 	imul   ebp,DWORD PTR [esp+eiz*2+0x50],0x49636f72
     d52:	49 
     d53:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d54:	66 6f                	outs   dx,WORD PTR ds:[esi]
     d56:	54                   	push   esp
     d57:	49                   	dec    ecx
     d58:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
     d5c:	69 73 64 73 74 00 76 	imul   esi,DWORD PTR [ebx+0x64],0x76007473
     d63:	69 72 74 75 61 6c 53 	imul   esi,DWORD PTR [edx+0x74],0x536c6175
     d6a:	69 7a 65 00 6d 65 6d 	imul   edi,DWORD PTR [edx+0x65],0x6d656d00
     d71:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d72:	72 79                	jb     ded <sysEnter_Vector-0x12f213>
     d74:	53                   	push   ebx
     d75:	69 7a 65 00 74 6f 74 	imul   edi,DWORD PTR [edx+0x65],0x746f7400
     d7c:	61                   	popa   
     d7d:	6c                   	ins    BYTE PTR es:[edi],dx
     d7e:	54                   	push   esp
     d7f:	69 63 6b 73 00 70 72 	imul   esp,DWORD PTR [ebx+0x6b],0x72700073
     d86:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d87:	63 43 6f             	arpl   WORD PTR [ebx+0x6f],ax
     d8a:	75 6e                	jne    dfa <sysEnter_Vector-0x12f206>
     d8c:	74 00                	je     d8e <sysEnter_Vector-0x12f272>
     d8e:	74 6d                	je     dfd <sysEnter_Vector-0x12f203>
     d90:	5f                   	pop    edi
     d91:	6d                   	ins    DWORD PTR es:[edi],dx
     d92:	69 6e 00 74 6d 5f 79 	imul   ebp,DWORD PTR [esi+0x0],0x795f6d74
     d99:	64                   	fs
     d9a:	61                   	popa   
     d9b:	79 00                	jns    d9d <sysEnter_Vector-0x12f263>
     d9d:	6d                   	ins    DWORD PTR es:[edi],dx
     d9e:	61                   	popa   
     d9f:	6a 6f                	push   0x6f
     da1:	72 46                	jb     de9 <sysEnter_Vector-0x12f217>
     da3:	61                   	popa   
     da4:	75 6c                	jne    e12 <sysEnter_Vector-0x12f1ee>
     da6:	74 73                	je     e1b <sysEnter_Vector-0x12f1e5>
     da8:	00 75 73             	add    BYTE PTR [ebp+0x73],dh
     dab:	65                   	gs
     dac:	72 43                	jb     df1 <sysEnter_Vector-0x12f20f>
     dae:	50                   	push   eax
     daf:	55                   	push   ebp
     db0:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
     db4:	74 54                	je     e0a <sysEnter_Vector-0x12f1f6>
     db6:	69 63 6b 73 00 74 69 	imul   esp,DWORD PTR [ebx+0x6b],0x69740073
     dbd:	6d                   	ins    DWORD PTR es:[edi],dx
     dbe:	65                   	gs
     dbf:	5f                   	pop    edi
     dc0:	74 00                	je     dc2 <sysEnter_Vector-0x12f23e>
     dc2:	6e                   	outs   dx,BYTE PTR ds:[esi]
     dc3:	61                   	popa   
     dc4:	6d                   	ins    DWORD PTR es:[edi],dx
     dc5:	65 32 00             	xor    al,BYTE PTR gs:[eax]
     dc8:	6e                   	outs   dx,BYTE PTR ds:[esi]
     dc9:	61                   	popa   
     dca:	6d                   	ins    DWORD PTR es:[edi],dx
     dcb:	65 33 00             	xor    eax,DWORD PTR gs:[eax]
     dce:	63 75 72             	arpl   WORD PTR [ebp+0x72],si
     dd1:	72 50                	jb     e23 <sysEnter_Vector-0x12f1dd>
     dd3:	72 6f                	jb     e44 <sysEnter_Vector-0x12f1bc>
     dd5:	63 00                	arpl   WORD PTR [eax],ax
     dd7:	69 70 69 64 00 74 6d 	imul   esi,DWORD PTR [eax+0x69],0x6d740064
     dde:	5f                   	pop    edi
     ddf:	67 6d                	ins    DWORD PTR es:[di],dx
     de1:	74 6f                	je     e52 <sysEnter_Vector-0x12f1ae>
     de3:	66                   	data16
     de4:	66                   	data16
     de5:	00 74 6f 6b          	add    BYTE PTR [edi+ebp*2+0x6b],dh
     de9:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     deb:	4e                   	dec    esi
     dec:	75 6d                	jne    e5b <sysEnter_Vector-0x12f1a5>
     dee:	62 65 72             	bound  esp,QWORD PTR [ebp+0x72]
     df1:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     df4:	74 65                	je     e5b <sysEnter_Vector-0x12f1a5>
     df6:	72 76                	jb     e6e <sysEnter_Vector-0x12f192>
     df8:	61                   	popa   
     df9:	6c                   	ins    BYTE PTR es:[edi],dx
     dfa:	54                   	push   esp
     dfb:	69 63 6b 73 00 73 50 	imul   esp,DWORD PTR [ebx+0x6b],0x50730073
     e02:	72 6f                	jb     e73 <sysEnter_Vector-0x12f18d>
     e04:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     e07:	66 6f                	outs   dx,WORD PTR ds:[esi]
     e09:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     e0c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e0d:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     e10:	66 6f                	outs   dx,WORD PTR ds:[esi]
     e12:	5f                   	pop    edi
     e13:	74 00                	je     e15 <sysEnter_Vector-0x12f1eb>
     e15:	74 6d                	je     e84 <sysEnter_Vector-0x12f17c>
     e17:	5f                   	pop    edi
     e18:	77 64                	ja     e7e <sysEnter_Vector-0x12f182>
     e1a:	61                   	popa   
     e1b:	79 00                	jns    e1d <sysEnter_Vector-0x12f1e3>
     e1d:	74 6d                	je     e8c <sysEnter_Vector-0x12f174>
     e1f:	5f                   	pop    edi
     e20:	6d                   	ins    DWORD PTR es:[edi],dx
     e21:	64                   	fs
     e22:	61                   	popa   
     e23:	79 00                	jns    e25 <sysEnter_Vector-0x12f1db>
     e25:	74 69                	je     e90 <sysEnter_Vector-0x12f170>
     e27:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
     e2a:	50                   	push   eax
     e2b:	65                   	gs
     e2c:	72 55                	jb     e83 <sysEnter_Vector-0x12f17d>
     e2e:	70 64                	jo     e94 <sysEnter_Vector-0x12f16c>
     e30:	61                   	popa   
     e31:	74 65                	je     e98 <sysEnter_Vector-0x12f168>
     e33:	49                   	dec    ecx
     e34:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e35:	74 65                	je     e9c <sysEnter_Vector-0x12f164>
     e37:	72 76                	jb     eaf <sysEnter_Vector-0x12f151>
     e39:	61                   	popa   
     e3a:	6c                   	ins    BYTE PTR es:[edi],dx
     e3b:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
     e3f:	73 65                	jae    ea6 <sysEnter_Vector-0x12f15a>
     e41:	63 00                	arpl   WORD PTR [eax],ax
     e43:	6d                   	ins    DWORD PTR es:[edi],dx
     e44:	69 6e 6f 72 46 61 75 	imul   ebp,DWORD PTR [esi+0x6f],0x75614672
     e4b:	6c                   	ins    BYTE PTR es:[edi],dx
     e4c:	74 73                	je     ec1 <sysEnter_Vector-0x12f13f>
     e4e:	00 6b 65             	add    BYTE PTR [ebx+0x65],ch
     e51:	72 6e                	jb     ec1 <sysEnter_Vector-0x12f13f>
     e53:	65                   	gs
     e54:	6c                   	ins    BYTE PTR es:[edi],dx
     e55:	43                   	inc    ebx
     e56:	50                   	push   eax
     e57:	55                   	push   ebp
     e58:	00 70 70             	add    BYTE PTR [eax+0x70],dh
     e5b:	69 64 00 66 69 65 6c 	imul   esp,DWORD PTR [eax+eax*1+0x66],0x646c6569
     e62:	64 
     e63:	5f                   	pop    edi
     e64:	77 69                	ja     ecf <sysEnter_Vector-0x12f131>
     e66:	64                   	fs
     e67:	74 68                	je     ed1 <sysEnter_Vector-0x12f12f>
     e69:	00 6e 64             	add    BYTE PTR [esi+0x64],ch
     e6c:	69 67 69 74 73 00 72 	imul   esp,DWORD PTR [edi+0x69],0x72007374
     e73:	65                   	gs
     e74:	70 65                	jo     edb <sysEnter_Vector-0x12f125>
     e76:	61                   	popa   
     e77:	74 00                	je     e79 <sysEnter_Vector-0x12f187>
     e79:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     e7c:	70 7a                	jo     ef8 <sysEnter_Vector-0x12f108>
     e7e:	65                   	gs
     e7f:	72 6f                	jb     ef0 <sysEnter_Vector-0x12f110>
     e81:	73 00                	jae    e83 <sysEnter_Vector-0x12f17d>
     e83:	6d                   	ins    DWORD PTR es:[edi],dx
     e84:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e85:	64                   	fs
     e86:	66                   	data16
     e87:	00 65 61             	add    BYTE PTR [ebp+0x61],ah
     e8a:	64                   	fs
     e8b:	64                   	fs
     e8c:	72 00                	jb     e8e <sysEnter_Vector-0x12f172>
     e8e:	73 72                	jae    f02 <sysEnter_Vector-0x12f0fe>
     e90:	63 2f                	arpl   WORD PTR [edi],bp
     e92:	73 70                	jae    f04 <sysEnter_Vector-0x12f0fc>
     e94:	72 69                	jb     eff <sysEnter_Vector-0x12f101>
     e96:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e97:	74 66                	je     eff <sysEnter_Vector-0x12f101>
     e99:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     e9c:	63 70 75             	arpl   WORD PTR [eax+0x75],si
     e9f:	69 64 5f 70 72 6f 63 	imul   esp,DWORD PTR [edi+ebx*2+0x70],0x69636f72
     ea6:	69 
     ea7:	6e                   	outs   dx,BYTE PTR ds:[esi]
     ea8:	66 6f                	outs   dx,WORD PTR ds:[esi]
     eaa:	00 70 61             	add    BYTE PTR [eax+0x61],dh
     ead:	64 31 00             	xor    DWORD PTR fs:[eax],eax
     eb0:	70 61                	jo     f13 <sysEnter_Vector-0x12f0ed>
     eb2:	64 32 00             	xor    al,BYTE PTR fs:[eax]
     eb5:	75 70                	jne    f27 <sysEnter_Vector-0x12f0d9>
     eb7:	70 65                	jo     f1e <sysEnter_Vector-0x12f0e2>
     eb9:	72 5f                	jb     f1a <sysEnter_Vector-0x12f0e6>
     ebb:	64 69 67 69 74 73 00 	imul   esp,DWORD PTR fs:[edi+0x69],0x66007374
     ec2:	66 
     ec3:	63 76 74             	arpl   WORD PTR [esi+0x74],si
     ec6:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     ec9:	00 65 6d             	add    BYTE PTR [ebp+0x6d],ah
     ecc:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ecd:	64                   	fs
     ece:	65                   	gs
     ecf:	6c                   	ins    BYTE PTR es:[edi],dx
     ed0:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     ed3:	65                   	gs
     ed4:	66                   	data16
     ed5:	65                   	gs
     ed6:	74 63                	je     f3b <sysEnter_Vector-0x12f0c5>
     ed8:	68 77 74 31 00       	push   0x317477
     edd:	65                   	gs
     ede:	66 61                	popaw  
     ee0:	6d                   	ins    DWORD PTR es:[edi],dx
     ee1:	69 6c 79 00 69 61 64 	imul   ebp,DWORD PTR [ecx+edi*2+0x0],0x64646169
     ee8:	64 
     ee9:	72 00                	jb     eeb <sysEnter_Vector-0x12f115>
     eeb:	73 70                	jae    f5d <sysEnter_Vector-0x12f0a3>
     eed:	72 69                	jb     f58 <sysEnter_Vector-0x12f0a8>
     eef:	6e                   	outs   dx,BYTE PTR ds:[esi]
     ef0:	74 66                	je     f58 <sysEnter_Vector-0x12f0a8>
     ef2:	49                   	dec    ecx
     ef3:	00 76 73             	add    BYTE PTR [esi+0x73],dh
     ef6:	70 72                	jo     f6a <sysEnter_Vector-0x12f096>
     ef8:	69 6e 74 66 00 65 66 	imul   ebp,DWORD PTR [esi+0x74],0x66650066
     eff:	6c                   	ins    BYTE PTR es:[edi],dx
     f00:	61                   	popa   
     f01:	67 00 66 6f          	add    BYTE PTR [bp+0x6f],ah
     f05:	72 63                	jb     f6a <sysEnter_Vector-0x12f096>
     f07:	64 65 63 70 74       	fs arpl WORD PTR fs:gs:[eax+0x74],si
     f0c:	00 61 76             	add    BYTE PTR [ecx+0x76],ah
     f0f:	78 35                	js     f46 <sysEnter_Vector-0x12f0ba>
     f11:	31 32                	xor    DWORD PTR [edx],esi
     f13:	76 62                	jbe    f77 <sysEnter_Vector-0x12f089>
     f15:	6d                   	ins    DWORD PTR es:[edi],dx
     f16:	69 00 63 70 75 69    	imul   eax,DWORD PTR [eax],0x69757063
     f1c:	64                   	fs
     f1d:	5f                   	pop    edi
     f1e:	65                   	gs
     f1f:	78 74                	js     f95 <sysEnter_Vector-0x12f06b>
     f21:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     f23:	64                   	fs
     f24:	65                   	gs
     f25:	64                   	fs
     f26:	5f                   	pop    edi
     f27:	66                   	data16
     f28:	65                   	gs
     f29:	61                   	popa   
     f2a:	74 75                	je     fa1 <sysEnter_Vector-0x12f05f>
     f2c:	72 65                	jb     f93 <sysEnter_Vector-0x12f06d>
     f2e:	5f                   	pop    edi
     f2f:	62 69 74             	bound  ebp,QWORD PTR [ecx+0x74]
     f32:	73 00                	jae    f34 <sysEnter_Vector-0x12f0cc>
     f34:	71 75                	jno    fab <sysEnter_Vector-0x12f055>
     f36:	61                   	popa   
     f37:	6c                   	ins    BYTE PTR es:[edi],dx
     f38:	69 66 69 65 72 00 73 	imul   esp,DWORD PTR [esi+0x69],0x73007265
     f3f:	6b 69 70 5f          	imul   ebp,DWORD PTR [ecx+0x70],0x5f
     f43:	61                   	popa   
     f44:	74 6f                	je     fb5 <sysEnter_Vector-0x12f04b>
     f46:	69 00 65 63 76 74    	imul   eax,DWORD PTR [eax],0x74766365
     f4c:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     f4f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f52:	72 6e                	jb     fc2 <sysEnter_Vector-0x12f03e>
     f54:	6c                   	ins    BYTE PTR es:[edi],dx
     f55:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     f57:	49                   	dec    ecx
     f58:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     f5b:	67 6e                	outs   dx,BYTE PTR ds:[si]
     f5d:	69 74 75 64 65 00 63 	imul   esi,DWORD PTR [ebp+esi*2+0x64],0x66630065
     f64:	66 
     f65:	6c                   	ins    BYTE PTR es:[edi],dx
     f66:	74 63                	je     fcb <sysEnter_Vector-0x12f035>
     f68:	76 74                	jbe    fde <sysEnter_Vector-0x12f022>
     f6a:	00 6e 75             	add    BYTE PTR [esi+0x75],ch
     f6d:	6d                   	ins    DWORD PTR es:[edi],dx
     f6e:	62 65 72             	bound  esp,QWORD PTR [ebp+0x72]
     f71:	00 62 61             	add    BYTE PTR [edx+0x61],ah
     f74:	73 65                	jae    fdb <sysEnter_Vector-0x12f025>
     f76:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     f79:	73 65                	jae    fe0 <sysEnter_Vector-0x12f020>
     f7b:	72 76                	jb     ff3 <sysEnter_Vector-0x12f00d>
     f7d:	65 64 00 73 74       	gs add BYTE PTR fs:gs:[ebx+0x74],dh
     f82:	65                   	gs
     f83:	70 00                	jo     f85 <sysEnter_Vector-0x12f07b>
     f85:	63 61 70             	arpl   WORD PTR [ecx+0x70],sp
     f88:	65                   	gs
     f89:	78 70                	js     ffb <sysEnter_Vector-0x12f005>
     f8b:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     f8e:	65 63 69 73          	arpl   WORD PTR gs:[ecx+0x73],bp
     f92:	69 6f 6e 00 62 75 66 	imul   ebp,DWORD PTR [edi+0x6e],0x66756200
     f99:	66 50                	push   ax
     f9b:	74 72                	je     100f <sysEnter_Vector-0x12eff1>
     f9d:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     fa0:	63 2f                	arpl   WORD PTR [edi],bp
     fa2:	73 74                	jae    1018 <sysEnter_Vector-0x12efe8>
     fa4:	64 69 6f 2e 63 00 72 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x65720063
     fab:	65 
     fac:	73 65                	jae    1013 <sysEnter_Vector-0x12efed>
     fae:	74 52                	je     1002 <sysEnter_Vector-0x12effe>
     fb0:	6f                   	outs   dx,DWORD PTR ds:[esi]
     fb1:	77 00                	ja     fb3 <sysEnter_Vector-0x12f04d>
     fb3:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     fb6:	66                   	data16
     fb7:	00 62 79             	add    BYTE PTR [edx+0x79],ah
     fba:	74 65                	je     1021 <sysEnter_Vector-0x12efdf>
     fbc:	73 54                	jae    1012 <sysEnter_Vector-0x12efee>
     fbe:	6f                   	outs   dx,DWORD PTR ds:[esi]
     fbf:	43                   	inc    ebx
     fc0:	6f                   	outs   dx,DWORD PTR ds:[esi]
     fc1:	70 79                	jo     103c <sysEnter_Vector-0x12efc4>
     fc3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     fc6:	72 6e                	jb     1036 <sysEnter_Vector-0x12efca>
     fc8:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
     fcb:	49                   	dec    ecx
     fcc:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     fcf:	63 53 74             	arpl   WORD PTR [ebx+0x74],dx
     fd2:	72 69                	jb     103d <sysEnter_Vector-0x12efc3>
     fd4:	6e                   	outs   dx,BYTE PTR ds:[esi]
     fd5:	67 4c                	addr16 dec esp
     fd7:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     fd9:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     fdc:	72 63                	jb     1041 <sysEnter_Vector-0x12efbf>
     fde:	61                   	popa   
     fdf:	74 00                	je     fe1 <sysEnter_Vector-0x12f01f>
     fe1:	73 72                	jae    1055 <sysEnter_Vector-0x12efab>
     fe3:	63 2f                	arpl   WORD PTR [edi],bp
     fe5:	73 74                	jae    105b <sysEnter_Vector-0x12efa5>
     fe7:	72 69                	jb     1052 <sysEnter_Vector-0x12efae>
     fe9:	6e                   	outs   dx,BYTE PTR ds:[esi]
     fea:	67 73 2f             	addr16 jae 101c <sysEnter_Vector-0x12efe4>
     fed:	73 74                	jae    1063 <sysEnter_Vector-0x12ef9d>
     fef:	72 63                	jb     1054 <sysEnter_Vector-0x12efac>
     ff1:	61                   	popa   
     ff2:	74 2e                	je     1022 <sysEnter_Vector-0x12efde>
     ff4:	63 00                	arpl   WORD PTR [eax],ax
     ff6:	73 74                	jae    106c <sysEnter_Vector-0x12ef94>
     ff8:	72 6e                	jb     1068 <sysEnter_Vector-0x12ef98>
     ffa:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
     ffd:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1000:	72 6e                	jb     1070 <sysEnter_Vector-0x12ef90>
    1002:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
    1005:	49                   	dec    ecx
    1006:	4e                   	dec    esi
    1007:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1008:	43                   	inc    ebx
    1009:	68 65 63 6b 00       	push   0x6b6365
    100e:	73 74                	jae    1084 <sysEnter_Vector-0x12ef7c>
    1010:	72 63                	jb     1075 <sysEnter_Vector-0x12ef8b>
    1012:	61                   	popa   
    1013:	74 49                	je     105e <sysEnter_Vector-0x12efa2>
    1015:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1018:	72 63                	jb     107d <sysEnter_Vector-0x12ef83>
    101a:	6d                   	ins    DWORD PTR es:[edi],dx
    101b:	70 49                	jo     1066 <sysEnter_Vector-0x12ef9a>
    101d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1020:	72 63                	jb     1085 <sysEnter_Vector-0x12ef7b>
    1022:	6d                   	ins    DWORD PTR es:[edi],dx
    1023:	70 00                	jo     1025 <sysEnter_Vector-0x12efdb>
    1025:	73 72                	jae    1099 <sysEnter_Vector-0x12ef67>
    1027:	63 2f                	arpl   WORD PTR [edi],bp
    1029:	73 74                	jae    109f <sysEnter_Vector-0x12ef61>
    102b:	72 69                	jb     1096 <sysEnter_Vector-0x12ef6a>
    102d:	6e                   	outs   dx,BYTE PTR ds:[esi]
    102e:	67 73 2f             	addr16 jae 1060 <sysEnter_Vector-0x12efa0>
    1031:	73 74                	jae    10a7 <sysEnter_Vector-0x12ef59>
    1033:	72 63                	jb     1098 <sysEnter_Vector-0x12ef68>
    1035:	6d                   	ins    DWORD PTR es:[edi],dx
    1036:	70 2e                	jo     1066 <sysEnter_Vector-0x12ef9a>
    1038:	63 00                	arpl   WORD PTR [eax],ax
    103a:	73 74                	jae    10b0 <sysEnter_Vector-0x12ef50>
    103c:	72 63                	jb     10a1 <sysEnter_Vector-0x12ef5f>
    103e:	70 79                	jo     10b9 <sysEnter_Vector-0x12ef47>
    1040:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
    1043:	75 6e                	jne    10b3 <sysEnter_Vector-0x12ef4d>
    1045:	74 00                	je     1047 <sysEnter_Vector-0x12efb9>
    1047:	73 74                	jae    10bd <sysEnter_Vector-0x12ef43>
    1049:	72 63                	jb     10ae <sysEnter_Vector-0x12ef52>
    104b:	70 79                	jo     10c6 <sysEnter_Vector-0x12ef3a>
    104d:	63 00                	arpl   WORD PTR [eax],ax
    104f:	73 74                	jae    10c5 <sysEnter_Vector-0x12ef3b>
    1051:	72 63                	jb     10b6 <sysEnter_Vector-0x12ef4a>
    1053:	70 79                	jo     10ce <sysEnter_Vector-0x12ef32>
    1055:	49                   	dec    ecx
    1056:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
    1059:	63 2f                	arpl   WORD PTR [edi],bp
    105b:	73 74                	jae    10d1 <sysEnter_Vector-0x12ef2f>
    105d:	72 69                	jb     10c8 <sysEnter_Vector-0x12ef38>
    105f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1060:	67 73 2f             	addr16 jae 1092 <sysEnter_Vector-0x12ef6e>
    1063:	73 74                	jae    10d9 <sysEnter_Vector-0x12ef27>
    1065:	72 63                	jb     10ca <sysEnter_Vector-0x12ef36>
    1067:	70 79                	jo     10e2 <sysEnter_Vector-0x12ef1e>
    1069:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    106c:	73 74                	jae    10e2 <sysEnter_Vector-0x12ef1e>
    106e:	72 69                	jb     10d9 <sysEnter_Vector-0x12ef27>
    1070:	73 6e                	jae    10e0 <sysEnter_Vector-0x12ef20>
    1072:	75 6d                	jne    10e1 <sysEnter_Vector-0x12ef1f>
    1074:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
    1077:	63 2f                	arpl   WORD PTR [edi],bp
    1079:	73 74                	jae    10ef <sysEnter_Vector-0x12ef11>
    107b:	72 69                	jb     10e6 <sysEnter_Vector-0x12ef1a>
    107d:	6e                   	outs   dx,BYTE PTR ds:[esi]
    107e:	67 73 2f             	addr16 jae 10b0 <sysEnter_Vector-0x12ef50>
    1081:	73 74                	jae    10f7 <sysEnter_Vector-0x12ef09>
    1083:	72 69                	jb     10ee <sysEnter_Vector-0x12ef12>
    1085:	73 6e                	jae    10f5 <sysEnter_Vector-0x12ef0b>
    1087:	75 6d                	jne    10f6 <sysEnter_Vector-0x12ef0a>
    1089:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    108c:	63 68 65             	arpl   WORD PTR [eax+0x65],bp
    108f:	63 6b 5f             	arpl   WORD PTR [ebx+0x5f],bp
    1092:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
    1099:	74 
    109a:	72 6c                	jb     1108 <sysEnter_Vector-0x12eef8>
    109c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    109e:	49                   	dec    ecx
    109f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    10a2:	72 6c                	jb     1110 <sysEnter_Vector-0x12eef0>
    10a4:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    10a6:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    10a9:	72 6e                	jb     1119 <sysEnter_Vector-0x12eee7>
    10ab:	6c                   	ins    BYTE PTR es:[edi],dx
    10ac:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    10ae:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
    10b1:	63 2f                	arpl   WORD PTR [edi],bp
    10b3:	73 74                	jae    1129 <sysEnter_Vector-0x12eed7>
    10b5:	72 69                	jb     1120 <sysEnter_Vector-0x12eee0>
    10b7:	6e                   	outs   dx,BYTE PTR ds:[esi]
    10b8:	67 73 2f             	addr16 jae 10ea <sysEnter_Vector-0x12ef16>
    10bb:	73 74                	jae    1131 <sysEnter_Vector-0x12eecf>
    10bd:	72 6c                	jb     112b <sysEnter_Vector-0x12eed5>
    10bf:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    10c1:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    10c4:	73 74                	jae    113a <sysEnter_Vector-0x12eec6>
    10c6:	72 6e                	jb     1136 <sysEnter_Vector-0x12eeca>
    10c8:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    10cb:	49                   	dec    ecx
    10cc:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    10cf:	72 6e                	jb     113f <sysEnter_Vector-0x12eec1>
    10d1:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    10d4:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
    10d7:	63 2f                	arpl   WORD PTR [edi],bp
    10d9:	73 74                	jae    114f <sysEnter_Vector-0x12eeb1>
    10db:	72 69                	jb     1146 <sysEnter_Vector-0x12eeba>
    10dd:	6e                   	outs   dx,BYTE PTR ds:[esi]
    10de:	67 73 2f             	addr16 jae 1110 <sysEnter_Vector-0x12eef0>
    10e1:	73 74                	jae    1157 <sysEnter_Vector-0x12eea9>
    10e3:	72 6e                	jb     1153 <sysEnter_Vector-0x12eead>
    10e5:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    10e8:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    10eb:	73 72                	jae    115f <sysEnter_Vector-0x12eea1>
    10ed:	63 2f                	arpl   WORD PTR [edi],bp
    10ef:	73 74                	jae    1165 <sysEnter_Vector-0x12ee9b>
    10f1:	72 69                	jb     115c <sysEnter_Vector-0x12eea4>
    10f3:	6e                   	outs   dx,BYTE PTR ds:[esi]
    10f4:	67 73 2f             	addr16 jae 1126 <sysEnter_Vector-0x12eeda>
    10f7:	73 74                	jae    116d <sysEnter_Vector-0x12ee93>
    10f9:	72 6e                	jb     1169 <sysEnter_Vector-0x12ee97>
    10fb:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    10fe:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1101:	73 74                	jae    1177 <sysEnter_Vector-0x12ee89>
    1103:	72 6e                	jb     1173 <sysEnter_Vector-0x12ee8d>
    1105:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    1108:	49                   	dec    ecx
    1109:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    110c:	72 6e                	jb     117c <sysEnter_Vector-0x12ee84>
    110e:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    1111:	00 6e 70             	add    BYTE PTR [esi+0x70],ch
    1114:	74 72                	je     1188 <sysEnter_Vector-0x12ee78>
    1116:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
    1119:	74 6f                	je     118a <sysEnter_Vector-0x12ee76>
    111b:	66                   	data16
    111c:	66                   	data16
    111d:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
    1120:	74 6c                	je     118e <sysEnter_Vector-0x12ee72>
    1122:	69 6d 00 73 72 63 2f 	imul   ebp,DWORD PTR [ebp+0x0],0x2f637273
    1129:	73 74                	jae    119f <sysEnter_Vector-0x12ee61>
    112b:	72 69                	jb     1196 <sysEnter_Vector-0x12ee6a>
    112d:	6e                   	outs   dx,BYTE PTR ds:[esi]
    112e:	67 73 2f             	addr16 jae 1160 <sysEnter_Vector-0x12eea0>
    1131:	73 74                	jae    11a7 <sysEnter_Vector-0x12ee59>
    1133:	72 6f                	jb     11a4 <sysEnter_Vector-0x12ee5c>
    1135:	75 6c                	jne    11a3 <sysEnter_Vector-0x12ee5d>
    1137:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    113a:	73 74                	jae    11b0 <sysEnter_Vector-0x12ee50>
    113c:	72 74                	jb     11b2 <sysEnter_Vector-0x12ee4e>
    113e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    113f:	75 6c                	jne    11ad <sysEnter_Vector-0x12ee53>
    1141:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
    1144:	64                   	fs
    1145:	70 74                	jo     11bb <sysEnter_Vector-0x12ee45>
    1147:	72 00                	jb     1149 <sysEnter_Vector-0x12eeb7>
    1149:	73 72                	jae    11bd <sysEnter_Vector-0x12ee43>
    114b:	63 2f                	arpl   WORD PTR [edi],bp
    114d:	73 74                	jae    11c3 <sysEnter_Vector-0x12ee3d>
    114f:	72 69                	jb     11ba <sysEnter_Vector-0x12ee46>
    1151:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1152:	67 73 2f             	addr16 jae 1184 <sysEnter_Vector-0x12ee7c>
    1155:	73 74                	jae    11cb <sysEnter_Vector-0x12ee35>
    1157:	72 70                	jb     11c9 <sysEnter_Vector-0x12ee37>
    1159:	61                   	popa   
    115a:	72 74                	jb     11d0 <sysEnter_Vector-0x12ee30>
    115c:	73 2e                	jae    118c <sysEnter_Vector-0x12ee74>
    115e:	63 00                	arpl   WORD PTR [eax],ax
    1160:	73 74                	jae    11d6 <sysEnter_Vector-0x12ee2a>
    1162:	72 6c                	jb     11d0 <sysEnter_Vector-0x12ee30>
    1164:	65                   	gs
    1165:	66                   	data16
    1166:	74 00                	je     1168 <sysEnter_Vector-0x12ee98>
    1168:	73 74                	jae    11de <sysEnter_Vector-0x12ee22>
    116a:	72 74                	jb     11e0 <sysEnter_Vector-0x12ee20>
    116c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    116d:	6c                   	ins    BYTE PTR es:[edi],dx
    116e:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
    1171:	63 2f                	arpl   WORD PTR [edi],bp
    1173:	73 74                	jae    11e9 <sysEnter_Vector-0x12ee17>
    1175:	72 69                	jb     11e0 <sysEnter_Vector-0x12ee20>
    1177:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1178:	67 73 2f             	addr16 jae 11aa <sysEnter_Vector-0x12ee56>
    117b:	73 74                	jae    11f1 <sysEnter_Vector-0x12ee0f>
    117d:	72 74                	jb     11f3 <sysEnter_Vector-0x12ee0d>
    117f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1180:	6c                   	ins    BYTE PTR es:[edi],dx
    1181:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1184:	73 72                	jae    11f8 <sysEnter_Vector-0x12ee08>
    1186:	63 2f                	arpl   WORD PTR [edi],bp
    1188:	73 74                	jae    11fe <sysEnter_Vector-0x12ee02>
    118a:	72 69                	jb     11f5 <sysEnter_Vector-0x12ee0b>
    118c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    118d:	67 73 2f             	addr16 jae 11bf <sysEnter_Vector-0x12ee41>
    1190:	73 74                	jae    1206 <sysEnter_Vector-0x12edfa>
    1192:	72 74                	jb     1208 <sysEnter_Vector-0x12edf8>
    1194:	72 69                	jb     11ff <sysEnter_Vector-0x12ee01>
    1196:	6d                   	ins    DWORD PTR es:[edi],dx
    1197:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    119a:	73 74                	jae    1210 <sysEnter_Vector-0x12edf0>
    119c:	72 74                	jb     1212 <sysEnter_Vector-0x12edee>
    119e:	72 69                	jb     1209 <sysEnter_Vector-0x12edf7>
    11a0:	6d                   	ins    DWORD PTR es:[edi],dx
    11a1:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    11a4:	72 74                	jb     121a <sysEnter_Vector-0x12ede6>
    11a6:	72 69                	jb     1211 <sysEnter_Vector-0x12edef>
    11a8:	6d                   	ins    DWORD PTR es:[edi],dx
    11a9:	49                   	dec    ecx
    11aa:	00 6f 75             	add    BYTE PTR [edi+0x75],ch
    11ad:	74 73                	je     1222 <sysEnter_Vector-0x12edde>
    11af:	69 7a 65 00 73 72 63 	imul   edi,DWORD PTR [edx+0x65],0x63727300
    11b6:	2f                   	das    
    11b7:	73 74                	jae    122d <sysEnter_Vector-0x12edd3>
    11b9:	72 72                	jb     122d <sysEnter_Vector-0x12edd3>
    11bb:	65                   	gs
    11bc:	70 6c                	jo     122a <sysEnter_Vector-0x12edd6>
    11be:	61                   	popa   
    11bf:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
    11c2:	63 00                	arpl   WORD PTR [eax],ax
    11c4:	6e                   	outs   dx,BYTE PTR ds:[esi]
    11c5:	65                   	gs
    11c6:	65                   	gs
    11c7:	64                   	fs
    11c8:	6c                   	ins    BYTE PTR es:[edi],dx
    11c9:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
    11cd:	73 6f                	jae    123e <sysEnter_Vector-0x12edc2>
    11cf:	66                   	data16
    11d0:	66                   	data16
    11d1:	73 65                	jae    1238 <sysEnter_Vector-0x12edc8>
    11d3:	74 00                	je     11d5 <sysEnter_Vector-0x12ee2b>
    11d5:	73 74                	jae    124b <sysEnter_Vector-0x12edb5>
    11d7:	72 72                	jb     124b <sysEnter_Vector-0x12edb5>
    11d9:	65                   	gs
    11da:	70 6c                	jo     1248 <sysEnter_Vector-0x12edb8>
    11dc:	61                   	popa   
    11dd:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
    11e0:	70 61                	jo     1243 <sysEnter_Vector-0x12edbd>
    11e2:	74 74                	je     1258 <sysEnter_Vector-0x12eda8>
    11e4:	65                   	gs
    11e5:	72 6e                	jb     1255 <sysEnter_Vector-0x12edab>
    11e7:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    11ea:	72 72                	jb     125e <sysEnter_Vector-0x12eda2>
    11ec:	65                   	gs
    11ed:	70 6c                	jo     125b <sysEnter_Vector-0x12eda5>
    11ef:	61                   	popa   
    11f0:	63 65 49             	arpl   WORD PTR [ebp+0x49],sp
    11f3:	00 6f 75             	add    BYTE PTR [edi+0x75],ch
    11f6:	74 53                	je     124b <sysEnter_Vector-0x12edb5>
    11f8:	74 72                	je     126c <sysEnter_Vector-0x12ed94>
    11fa:	69 6e 67 00 73 74 72 	imul   ebp,DWORD PTR [esi+0x67],0x72747300
    1201:	73 74                	jae    1277 <sysEnter_Vector-0x12ed89>
    1203:	72 49                	jb     124e <sysEnter_Vector-0x12edb2>
    1205:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
    1208:	63 2f                	arpl   WORD PTR [edi],bp
    120a:	73 74                	jae    1280 <sysEnter_Vector-0x12ed80>
    120c:	72 73                	jb     1281 <sysEnter_Vector-0x12ed7f>
    120e:	74 72                	je     1282 <sysEnter_Vector-0x12ed7e>
    1210:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1213:	73 74                	jae    1289 <sysEnter_Vector-0x12ed77>
    1215:	72 73                	jb     128a <sysEnter_Vector-0x12ed76>
    1217:	74 72                	je     128b <sysEnter_Vector-0x12ed75>
    1219:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    121c:	72 6e                	jb     128c <sysEnter_Vector-0x12ed74>
    121e:	73 74                	jae    1294 <sysEnter_Vector-0x12ed6c>
    1220:	72 49                	jb     126b <sysEnter_Vector-0x12ed95>
    1222:	00 72 63             	add    BYTE PTR [edx+0x63],dh
    1225:	73 69                	jae    1290 <sysEnter_Vector-0x12ed70>
    1227:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
    122b:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
    122e:	72 69                	jb     1299 <sysEnter_Vector-0x12ed67>
    1230:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1231:	67 00 73 72          	add    BYTE PTR [bp+di+0x72],dh
    1235:	63 2f                	arpl   WORD PTR [edi],bp
    1237:	74 69                	je     12a2 <sysEnter_Vector-0x12ed5e>
    1239:	6d                   	ins    DWORD PTR es:[edi],dx
    123a:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    123e:	6c                   	ins    BYTE PTR es:[edi],dx
    123f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1240:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
    1243:	74 69                	je     12ae <sysEnter_Vector-0x12ed52>
    1245:	6d                   	ins    DWORD PTR es:[edi],dx
    1246:	65 00 67 65          	add    BYTE PTR gs:[edi+0x65],ah
    124a:	74 74                	je     12c0 <sysEnter_Vector-0x12ed40>
    124c:	69 63 6b 73 00 5f 64 	imul   esp,DWORD PTR [ebx+0x6b],0x645f0073
    1253:	61                   	popa   
    1254:	79 6c                	jns    12c2 <sysEnter_Vector-0x12ed3e>
    1256:	69 67 68 74 00 6c 69 	imul   esp,DWORD PTR [edi+0x68],0x696c0074
    125d:	62 63 54             	bound  esp,QWORD PTR [ebx+0x54]
    1260:	5a                   	pop    edx
    1261:	00 5f 74             	add    BYTE PTR [edi+0x74],bl
    1264:	7a 6e                	jp     12d4 <sysEnter_Vector-0x12ed2c>
    1266:	61                   	popa   
    1267:	6d                   	ins    DWORD PTR es:[edi],dx
    1268:	65 00 67 6d          	add    BYTE PTR gs:[edi+0x6d],ah
    126c:	74 69                	je     12d7 <sysEnter_Vector-0x12ed29>
    126e:	6d                   	ins    DWORD PTR es:[edi],dx
    126f:	65                   	gs
    1270:	5f                   	pop    edi
    1271:	72 00                	jb     1273 <sysEnter_Vector-0x12ed8d>
    1273:	74 69                	je     12de <sysEnter_Vector-0x12ed22>
    1275:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
    1278:	54                   	push   esp
    1279:	6f                   	outs   dx,DWORD PTR ds:[esi]
    127a:	57                   	push   edi
    127b:	61                   	popa   
    127c:	69 74 00 6d 6f 6e 74 	imul   esi,DWORD PTR [eax+eax*1+0x6d],0x68746e6f
    1283:	68 
    1284:	00 67 65             	add    BYTE PTR [edi+0x65],ah
    1287:	74 74                	je     12fd <sysEnter_Vector-0x12ed03>
    1289:	69 6d 65 00 64 61 79 	imul   ebp,DWORD PTR [ebp+0x65],0x79616400
    1290:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1291:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1292:	00 67 6d             	add    BYTE PTR [edi+0x6d],ah
    1295:	74 69                	je     1300 <sysEnter_Vector-0x12ed00>
    1297:	6d                   	ins    DWORD PTR es:[edi],dx
    1298:	65                   	gs
    1299:	5f                   	pop    edi
    129a:	72 49                	jb     12e5 <sysEnter_Vector-0x12ed1b>
    129c:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
    12a0:	61                   	popa   
    12a1:	6c                   	ins    BYTE PTR es:[edi],dx
    12a2:	54                   	push   esp
    12a3:	69 6d 65 00 74 6d 62 	imul   ebp,DWORD PTR [ebp+0x65],0x626d7400
    12aa:	75 66                	jne    1312 <sysEnter_Vector-0x12ecee>
    12ac:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
    12b0:	61                   	popa   
    12b1:	6c                   	ins    BYTE PTR es:[edi],dx
    12b2:	74 69                	je     131d <sysEnter_Vector-0x12ece3>
    12b4:	6d                   	ins    DWORD PTR es:[edi],dx
    12b5:	65                   	gs
    12b6:	5f                   	pop    edi
    12b7:	72 00                	jb     12b9 <sysEnter_Vector-0x12ed47>
    12b9:	64                   	fs
    12ba:	61                   	popa   
    12bb:	79 63                	jns    1320 <sysEnter_Vector-0x12ece0>
    12bd:	6c                   	ins    BYTE PTR es:[edi],dx
    12be:	6f                   	outs   dx,DWORD PTR ds:[esi]
    12bf:	63 6b 00             	arpl   WORD PTR [ebx+0x0],bp
    12c2:	6d                   	ins    DWORD PTR es:[edi],dx
    12c3:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
    12c8:	00 5f 79             	add    BYTE PTR [edi+0x79],bl
    12cb:	74 61                	je     132e <sysEnter_Vector-0x12ecd2>
    12cd:	62 00                	bound  eax,QWORD PTR [eax]
    12cf:	74 69                	je     133a <sysEnter_Vector-0x12ecc6>
    12d1:	6d                   	ins    DWORD PTR es:[edi],dx
    12d2:	65                   	gs
    12d3:	72 00                	jb     12d5 <sysEnter_Vector-0x12ed2b>
    12d5:	6c                   	ins    BYTE PTR es:[edi],dx
    12d6:	6f                   	outs   dx,DWORD PTR ds:[esi]
    12d7:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
    12da:	74 69                	je     1345 <sysEnter_Vector-0x12ecbb>
    12dc:	6d                   	ins    DWORD PTR es:[edi],dx
    12dd:	65                   	gs
    12de:	5f                   	pop    edi
    12df:	72 49                	jb     132a <sysEnter_Vector-0x12ecd6>
    12e1:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
    12e4:	73 74                	jae    135a <sysEnter_Vector-0x12eca6>
    12e6:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
    12e9:	73 00                	jae    12eb <sysEnter_Vector-0x12ed15>
    12eb:	72 65                	jb     1352 <sysEnter_Vector-0x12ecae>
    12ed:	73 75                	jae    1364 <sysEnter_Vector-0x12ec9c>
    12ef:	6c                   	ins    BYTE PTR es:[edi],dx
    12f0:	74 00                	je     12f2 <sysEnter_Vector-0x12ed0e>
    12f2:	6f                   	outs   dx,DWORD PTR ds:[esi]
    12f3:	76 65                	jbe    135a <sysEnter_Vector-0x12eca6>
    12f5:	72 66                	jb     135d <sysEnter_Vector-0x12eca3>
    12f7:	6c                   	ins    BYTE PTR es:[edi],dx
    12f8:	6f                   	outs   dx,DWORD PTR ds:[esi]
    12f9:	77 00                	ja     12fb <sysEnter_Vector-0x12ed05>

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    edi
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
   5:	28 47 4e             	sub    BYTE PTR [edi+0x4e],al
   8:	55                   	push   ebp
   9:	29 20                	sub    DWORD PTR [eax],esp
   b:	35 2e 33 2e 30       	xor    eax,0x302e332e
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	65 00 00             	add    BYTE PTR gs:[eax],al
   3:	00 34 01             	add    BYTE PTR [ecx+eax*1],dh
   6:	00 00                	add    BYTE PTR [eax],al
   8:	39 01                	cmp    DWORD PTR [ecx],eax
   a:	00 00                	add    BYTE PTR [eax],al
   c:	3a 01                	cmp    al,BYTE PTR [ecx]
	...
  16:	00 00                	add    BYTE PTR [eax],al
  18:	c7                   	(bad)  
  19:	0b 00                	or     eax,DWORD PTR [eax]
  1b:	00 01                	add    BYTE PTR [ecx],al
  1d:	0c 00                	or     al,0x0
  1f:	00 06                	add    BYTE PTR [esi],al
  21:	0c 00                	or     al,0x0
  23:	00 3a                	add    BYTE PTR [edx],bh
  25:	0c 00                	or     al,0x0
	...
