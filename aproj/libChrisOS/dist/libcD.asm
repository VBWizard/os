
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

9f000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:9
 * and open the template in the editor.
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
9f000000:	55                   	push   ebp
9f000001:	89 e5                	mov    ebp,esp
9f000003:	e8 ba 48 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f000008:	05 54 72 00 00       	add    eax,0x7254
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
    while (*s != (char)c)
9f00000d:	eb 17                	jmp    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
        if (!*s++)
9f00000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000012:	8d 50 01             	lea    edx,[eax+0x1]
9f000015:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000018:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00001b:	84 c0                	test   al,al
9f00001d:	75 07                	jne    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
            return 0;
9f00001f:	b8 00 00 00 00       	mov    eax,0x0
9f000024:	eb 10                	jmp    9f000036 <strchr+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
    while (*s != (char)c)
9f000026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00002c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00002f:	38 d0                	cmp    al,dl
9f000031:	75 dc                	jne    9f00000f <strchr+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
        if (!*s++)
            return 0;
    return (char *)s;
9f000033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
}
9f000036:	5d                   	pop    ebp
9f000037:	c3                   	ret    

9f000038 <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:17

char *strchrI(const char *s, int c)
{
9f000038:	55                   	push   ebp
9f000039:	89 e5                	mov    ebp,esp
9f00003b:	e8 82 48 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f000040:	05 1c 72 00 00       	add    eax,0x721c
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    while (*s != (char)c)
9f000045:	eb 17                	jmp    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
        if (!*s++)
9f000047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00004a:	8d 50 01             	lea    edx,[eax+0x1]
9f00004d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000050:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000053:	84 c0                	test   al,al
9f000055:	75 07                	jne    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
            return 0;
9f000057:	b8 00 00 00 00       	mov    eax,0x0
9f00005c:	eb 10                	jmp    9f00006e <strchrI+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    return (char *)s;
}

char *strchrI(const char *s, int c)
{
    while (*s != (char)c)
9f00005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000061:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000064:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000067:	38 d0                	cmp    al,dl
9f000069:	75 dc                	jne    9f000047 <strchrI+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
        if (!*s++)
            return 0;
    return (char *)s;
9f00006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
}
9f00006e:	5d                   	pop    ebp
9f00006f:	c3                   	ret    

9f000070 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:38
 */

#include "strings.h"

VISIBLE int strcspn(char* string, char* chars)
{
9f000070:	55                   	push   ebp
9f000071:	89 e5                	mov    ebp,esp
9f000073:	56                   	push   esi
9f000074:	53                   	push   ebx
9f000075:	e8 48 48 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f00007a:	05 e2 71 00 00       	add    eax,0x71e2
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f00007f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f000082:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000085:	89 c1                	mov    ecx,eax
9f000087:	eb 29                	jmp    9f0000b2 <strcspn+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
	for (p = chars; *p != 0; p++) {
9f000089:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f00008c:	eb 15                	jmp    9f0000a3 <strcspn+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	    if (c == *p) {
9f00008e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f000091:	38 c8                	cmp    al,cl
9f000093:	75 0b                	jne    9f0000a0 <strcspn+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
		return s-string;
9f000095:	89 da                	mov    edx,ebx
9f000097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00009a:	29 c2                	sub    edx,eax
9f00009c:	89 d0                	mov    eax,edx
9f00009e:	eb 21                	jmp    9f0000c1 <strcspn+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)
VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000a0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
9f0000a3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000a6:	84 c0                	test   al,al
9f0000a8:	75 e4                	jne    9f00008e <strcspn+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 2)

VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000aa:	83 c3 01             	add    ebx,0x1
9f0000ad:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000b0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 1)
9f0000b2:	89 c8                	mov    eax,ecx
9f0000b4:	84 c0                	test   al,al
9f0000b6:	75 d1                	jne    9f000089 <strcspn+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:48
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f0000b8:	89 da                	mov    edx,ebx
9f0000ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000bd:	29 c2                	sub    edx,eax
9f0000bf:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
}
9f0000c1:	5b                   	pop    ebx
9f0000c2:	5e                   	pop    esi
9f0000c3:	5d                   	pop    ebp
9f0000c4:	c3                   	ret    

9f0000c5 <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:52

int strcspnI(char* string, char* chars)
{
9f0000c5:	55                   	push   ebp
9f0000c6:	89 e5                	mov    ebp,esp
9f0000c8:	56                   	push   esi
9f0000c9:	53                   	push   ebx
9f0000ca:	e8 f3 47 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0000cf:	05 8d 71 00 00       	add    eax,0x718d
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f0000d7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000da:	89 c1                	mov    ecx,eax
9f0000dc:	eb 29                	jmp    9f000107 <strcspnI+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
	for (p = chars; *p != 0; p++) {
9f0000de:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f0000e1:	eb 15                	jmp    9f0000f8 <strcspnI+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	    if (c == *p) {
9f0000e3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000e6:	38 c8                	cmp    al,cl
9f0000e8:	75 0b                	jne    9f0000f5 <strcspnI+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
		return s-string;
9f0000ea:	89 da                	mov    edx,ebx
9f0000ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000ef:	29 c2                	sub    edx,eax
9f0000f1:	89 d0                	mov    eax,edx
9f0000f3:	eb 21                	jmp    9f000116 <strcspnI+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)
int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
9f0000f8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000fb:	84 c0                	test   al,al
9f0000fd:	75 e4                	jne    9f0000e3 <strcspnI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 2)

int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000ff:	83 c3 01             	add    ebx,0x1
9f000102:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000105:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 1)
9f000107:	89 c8                	mov    eax,ecx
9f000109:	84 c0                	test   al,al
9f00010b:	75 d1                	jne    9f0000de <strcspnI+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:62
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f00010d:	89 da                	mov    edx,ebx
9f00010f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000112:	29 c2                	sub    edx,eax
9f000114:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
}
9f000116:	5b                   	pop    ebx
9f000117:	5e                   	pop    esi
9f000118:	5d                   	pop    ebp
9f000119:	c3                   	ret    
9f00011a:	66 90                	xchg   ax,ax

9f00011c <strtokI>:
strtokI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:41
#include "strings.h"
int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

char * strtokI(char* s, /*const*/ char* delim)
{
9f00011c:	55                   	push   ebp
9f00011d:	89 e5                	mov    ebp,esp
9f00011f:	56                   	push   esi
9f000120:	53                   	push   ebx
9f000121:	e8 da 47 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f000126:	81 c3 36 71 00 00    	add    ebx,0x7136
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:45
    static char *lasts;
    register int ch;

    if (s == 0)
9f00012c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000130:	75 09                	jne    9f00013b <strtokI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:46
	s = lasts;
9f000132:	8b 83 40 00 00 00    	mov    eax,DWORD PTR [ebx+0x40]
9f000138:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
    do {
	if ((ch = *s++) == '\0')
9f00013b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00013e:	8d 50 01             	lea    edx,[eax+0x1]
9f000141:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000147:	0f be f0             	movsx  esi,al
9f00014a:	85 f6                	test   esi,esi
9f00014c:	75 07                	jne    9f000155 <strtokI+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:49
	    return 0;
9f00014e:	b8 00 00 00 00       	mov    eax,0x0
9f000153:	eb 57                	jmp    9f0001ac <strtokI+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    } while (strchrI(delim, ch));
9f000155:	83 ec 08             	sub    esp,0x8
9f000158:	56                   	push   esi
9f000159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00015c:	e8 d7 fe ff ff       	call   9f000038 <strchrI>
9f000161:	83 c4 10             	add    esp,0x10
9f000164:	85 c0                	test   eax,eax
9f000166:	75 d3                	jne    9f00013b <strtokI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
    --s;
9f000168:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    lasts = s + strcspnI(s, delim);
9f00016c:	83 ec 08             	sub    esp,0x8
9f00016f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000175:	e8 4b ff ff ff       	call   9f0000c5 <strcspnI>
9f00017a:	83 c4 10             	add    esp,0x10
9f00017d:	89 c2                	mov    edx,eax
9f00017f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000182:	01 d0                	add    eax,edx
9f000184:	89 83 40 00 00 00    	mov    DWORD PTR [ebx+0x40],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    if (*lasts != 0)
9f00018a:	8b 83 40 00 00 00    	mov    eax,DWORD PTR [ebx+0x40]
9f000190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000193:	84 c0                	test   al,al
9f000195:	74 12                	je     9f0001a9 <strtokI+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
	*lasts++ = 0;
9f000197:	8b 83 40 00 00 00    	mov    eax,DWORD PTR [ebx+0x40]
9f00019d:	8d 50 01             	lea    edx,[eax+0x1]
9f0001a0:	89 93 40 00 00 00    	mov    DWORD PTR [ebx+0x40],edx
9f0001a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    return s;
9f0001a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
}
9f0001ac:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0001af:	5b                   	pop    ebx
9f0001b0:	5e                   	pop    esi
9f0001b1:	5d                   	pop    ebp
9f0001b2:	c3                   	ret    

9f0001b3 <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:59

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
9f0001b3:	55                   	push   ebp
9f0001b4:	89 e5                	mov    ebp,esp
9f0001b6:	56                   	push   esi
9f0001b7:	53                   	push   ebx
9f0001b8:	e8 43 47 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f0001bd:	81 c3 9f 70 00 00    	add    ebx,0x709f
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:63
    static char *lasts;
    register int ch;

    if (s == 0)
9f0001c3:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0001c7:	75 09                	jne    9f0001d2 <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:64
	s = lasts;
9f0001c9:	8b 83 44 00 00 00    	mov    eax,DWORD PTR [ebx+0x44]
9f0001cf:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:66
    do {
	if ((ch = *s++) == '\0')
9f0001d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0001d5:	8d 50 01             	lea    edx,[eax+0x1]
9f0001d8:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0001db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0001de:	0f be f0             	movsx  esi,al
9f0001e1:	85 f6                	test   esi,esi
9f0001e3:	75 07                	jne    9f0001ec <strtok+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:67
	    return 0;
9f0001e5:	b8 00 00 00 00       	mov    eax,0x0
9f0001ea:	eb 57                	jmp    9f000243 <strtok+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:68
    } while (strchrI(delim, ch));
9f0001ec:	83 ec 08             	sub    esp,0x8
9f0001ef:	56                   	push   esi
9f0001f0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0001f3:	e8 40 fe ff ff       	call   9f000038 <strchrI>
9f0001f8:	83 c4 10             	add    esp,0x10
9f0001fb:	85 c0                	test   eax,eax
9f0001fd:	75 d3                	jne    9f0001d2 <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:69
    --s;
9f0001ff:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:70
    lasts = s + strcspnI(s, delim);
9f000203:	83 ec 08             	sub    esp,0x8
9f000206:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000209:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00020c:	e8 b4 fe ff ff       	call   9f0000c5 <strcspnI>
9f000211:	83 c4 10             	add    esp,0x10
9f000214:	89 c2                	mov    edx,eax
9f000216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000219:	01 d0                	add    eax,edx
9f00021b:	89 83 44 00 00 00    	mov    DWORD PTR [ebx+0x44],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:71
    if (*lasts != 0)
9f000221:	8b 83 44 00 00 00    	mov    eax,DWORD PTR [ebx+0x44]
9f000227:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00022a:	84 c0                	test   al,al
9f00022c:	74 12                	je     9f000240 <strtok+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:72
	*lasts++ = 0;
9f00022e:	8b 83 44 00 00 00    	mov    eax,DWORD PTR [ebx+0x44]
9f000234:	8d 50 01             	lea    edx,[eax+0x1]
9f000237:	89 93 44 00 00 00    	mov    DWORD PTR [ebx+0x44],edx
9f00023d:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:73
    return s;
9f000240:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:74
9f000243:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000246:	5b                   	pop    ebx
9f000247:	5e                   	pop    esi
9f000248:	5d                   	pop    ebp
9f000249:	c3                   	ret    
9f00024a:	66 90                	xchg   ax,ax

9f00024c <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:10
 */

#include "libChrisOS.h"

void reverseI(char s[])
 {
9f00024c:	55                   	push   ebp
9f00024d:	89 e5                	mov    ebp,esp
9f00024f:	53                   	push   ebx
9f000250:	83 ec 14             	sub    esp,0x14
9f000253:	e8 6a 46 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f000258:	05 04 70 00 00       	add    eax,0x7004
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f00025d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f000264:	83 ec 0c             	sub    esp,0xc
9f000267:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00026a:	89 c3                	mov    ebx,eax
9f00026c:	e8 df 30 00 00       	call   9f003350 <strlenI>
9f000271:	83 c4 10             	add    esp,0x10
9f000274:	83 e8 01             	sub    eax,0x1
9f000277:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00027a:	eb 39                	jmp    9f0002b5 <reverseI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
         c = s[i];
9f00027c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00027f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000282:	01 d0                	add    eax,edx
9f000284:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000287:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         s[i] = s[j];
9f00028a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00028d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000290:	01 c2                	add    edx,eax
9f000292:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f000295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000298:	01 c8                	add    eax,ecx
9f00029a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00029d:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[j] = c;
9f00029f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0002a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002a5:	01 c2                	add    edx,eax
9f0002a7:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
9f0002ab:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 3)
void reverseI(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f0002ad:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
9f0002b1:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 1)
9f0002b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0002b8:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0002bb:	7c bf                	jl     9f00027c <reverseI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:19
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
9f0002bd:	90                   	nop
9f0002be:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0002c1:	c9                   	leave  
9f0002c2:	c3                   	ret    

9f0002c3 <itoa>:
itoa():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:22

VISIBLE void itoa(int n, char s[])
 {
9f0002c3:	55                   	push   ebp
9f0002c4:	89 e5                	mov    ebp,esp
9f0002c6:	53                   	push   ebx
9f0002c7:	83 ec 14             	sub    esp,0x14
9f0002ca:	e8 f3 45 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0002cf:	05 8d 6f 00 00       	add    eax,0x6f8d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:25
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f0002d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002d7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0002da:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0002de:	79 03                	jns    9f0002e3 <itoa+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
         n = -n;          /* make n positive */
9f0002e0:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
     i = 0;
9f0002e3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:29 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f0002ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0002ed:	8d 50 01             	lea    edx,[eax+0x1]
9f0002f0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0002f3:	89 c2                	mov    edx,eax
9f0002f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0002f8:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f0002fb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0002fe:	ba 67 66 66 66       	mov    edx,0x66666667
9f000303:	89 c8                	mov    eax,ecx
9f000305:	f7 ea                	imul   edx
9f000307:	c1 fa 02             	sar    edx,0x2
9f00030a:	89 c8                	mov    eax,ecx
9f00030c:	c1 f8 1f             	sar    eax,0x1f
9f00030f:	29 c2                	sub    edx,eax
9f000311:	89 d0                	mov    eax,edx
9f000313:	c1 e0 02             	shl    eax,0x2
9f000316:	01 d0                	add    eax,edx
9f000318:	01 c0                	add    eax,eax
9f00031a:	29 c1                	sub    ecx,eax
9f00031c:	89 ca                	mov    edx,ecx
9f00031e:	89 d0                	mov    eax,edx
9f000320:	83 c0 30             	add    eax,0x30
9f000323:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f000325:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000328:	ba 67 66 66 66       	mov    edx,0x66666667
9f00032d:	89 c8                	mov    eax,ecx
9f00032f:	f7 ea                	imul   edx
9f000331:	c1 fa 02             	sar    edx,0x2
9f000334:	89 c8                	mov    eax,ecx
9f000336:	c1 f8 1f             	sar    eax,0x1f
9f000339:	29 c2                	sub    edx,eax
9f00033b:	89 d0                	mov    eax,edx
9f00033d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f000340:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000344:	7f a4                	jg     9f0002ea <itoa+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31
     if (sign < 0)
9f000346:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00034a:	79 13                	jns    9f00035f <itoa+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
         s[i++] = '-';
9f00034c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00034f:	8d 50 01             	lea    edx,[eax+0x1]
9f000352:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000355:	89 c2                	mov    edx,eax
9f000357:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00035a:	01 d0                	add    eax,edx
9f00035c:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
     s[i] = '\0';
9f00035f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000362:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000365:	01 d0                	add    eax,edx
9f000367:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     reverseI(s);
9f00036a:	83 ec 0c             	sub    esp,0xc
9f00036d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000370:	e8 d7 fe ff ff       	call   9f00024c <reverseI>
9f000375:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
 }
9f000378:	90                   	nop
9f000379:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00037c:	c9                   	leave  
9f00037d:	c3                   	ret    

9f00037e <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:38

 void itoaI(int n, char s[])
 {
9f00037e:	55                   	push   ebp
9f00037f:	89 e5                	mov    ebp,esp
9f000381:	53                   	push   ebx
9f000382:	83 ec 14             	sub    esp,0x14
9f000385:	e8 38 45 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f00038a:	05 d2 6e 00 00       	add    eax,0x6ed2
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:41
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f00038f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000392:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000395:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000399:	79 03                	jns    9f00039e <itoaI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:42
         n = -n;          /* make n positive */
9f00039b:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:43
     i = 0;
9f00039e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:45 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f0003a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0003a8:	8d 50 01             	lea    edx,[eax+0x1]
9f0003ab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0003ae:	89 c2                	mov    edx,eax
9f0003b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0003b3:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f0003b6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0003b9:	ba 67 66 66 66       	mov    edx,0x66666667
9f0003be:	89 c8                	mov    eax,ecx
9f0003c0:	f7 ea                	imul   edx
9f0003c2:	c1 fa 02             	sar    edx,0x2
9f0003c5:	89 c8                	mov    eax,ecx
9f0003c7:	c1 f8 1f             	sar    eax,0x1f
9f0003ca:	29 c2                	sub    edx,eax
9f0003cc:	89 d0                	mov    eax,edx
9f0003ce:	c1 e0 02             	shl    eax,0x2
9f0003d1:	01 d0                	add    eax,edx
9f0003d3:	01 c0                	add    eax,eax
9f0003d5:	29 c1                	sub    ecx,eax
9f0003d7:	89 ca                	mov    edx,ecx
9f0003d9:	89 d0                	mov    eax,edx
9f0003db:	83 c0 30             	add    eax,0x30
9f0003de:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f0003e0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0003e3:	ba 67 66 66 66       	mov    edx,0x66666667
9f0003e8:	89 c8                	mov    eax,ecx
9f0003ea:	f7 ea                	imul   edx
9f0003ec:	c1 fa 02             	sar    edx,0x2
9f0003ef:	89 c8                	mov    eax,ecx
9f0003f1:	c1 f8 1f             	sar    eax,0x1f
9f0003f4:	29 c2                	sub    edx,eax
9f0003f6:	89 d0                	mov    eax,edx
9f0003f8:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f0003fb:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0003ff:	7f a4                	jg     9f0003a5 <itoaI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:47
     if (sign < 0)
9f000401:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000405:	79 13                	jns    9f00041a <itoaI+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:48
         s[i++] = '-';
9f000407:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00040a:	8d 50 01             	lea    edx,[eax+0x1]
9f00040d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000410:	89 c2                	mov    edx,eax
9f000412:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000415:	01 d0                	add    eax,edx
9f000417:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
     s[i] = '\0';
9f00041a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00041d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000420:	01 d0                	add    eax,edx
9f000422:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
     reverseI(s);
9f000425:	83 ec 0c             	sub    esp,0xc
9f000428:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00042b:	e8 1c fe ff ff       	call   9f00024c <reverseI>
9f000430:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:51
 }
9f000433:	90                   	nop
9f000434:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000437:	c9                   	leave  
9f000438:	c3                   	ret    

9f000439 <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:55

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
VISIBLE int atoi(char *str)
{
9f000439:	55                   	push   ebp
9f00043a:	89 e5                	mov    ebp,esp
9f00043c:	83 ec 10             	sub    esp,0x10
9f00043f:	e8 7e 44 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f000444:	05 18 6e 00 00       	add    eax,0x6e18
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:56
    int res = 0; // Initialize result
9f000449:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f000450:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
9f000457:	eb 28                	jmp    9f000481 <atoi+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:61 (discriminator 3)
        res = res*10 + str[i] - '0';
9f000459:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00045c:	89 d0                	mov    eax,edx
9f00045e:	c1 e0 02             	shl    eax,0x2
9f000461:	01 d0                	add    eax,edx
9f000463:	01 c0                	add    eax,eax
9f000465:	89 c1                	mov    ecx,eax
9f000467:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f00046a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00046d:	01 d0                	add    eax,edx
9f00046f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000472:	0f be c0             	movsx  eax,al
9f000475:	01 c8                	add    eax,ecx
9f000477:	83 e8 30             	sub    eax,0x30
9f00047a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f00047d:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 1)
9f000481:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f000484:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000487:	01 d0                	add    eax,edx
9f000489:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00048c:	84 c0                	test   al,al
9f00048e:	75 c9                	jne    9f000459 <atoi+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:64
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
9f000490:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:65
9f000493:	c9                   	leave  
9f000494:	c3                   	ret    
9f000495:	66 90                	xchg   ax,ax
9f000497:	90                   	nop

9f000498 <moveToXY>:
moveToXY():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:14
#include "console.h"

const char ansiEscSeq[3] =  {0x1b,0x5b,0};

VISIBLE void moveToXY(int x, int y)
{
9f000498:	55                   	push   ebp
9f000499:	89 e5                	mov    ebp,esp
9f00049b:	53                   	push   ebx
9f00049c:	83 ec 14             	sub    esp,0x14
9f00049f:	e8 5c 44 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f0004a4:	81 c3 b8 6d 00 00    	add    ebx,0x6db8
/home/yogi/src/os/aproj/libChrisOS/src/console.c:18
    char cmd[10];
    char xstr[3], ystr[3];
    
    strcpyI(cmd,ansiEscSeq);
9f0004aa:	83 ec 08             	sub    esp,0x8
9f0004ad:	8d 83 24 f7 ff ff    	lea    eax,[ebx-0x8dc]
9f0004b3:	50                   	push   eax
9f0004b4:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004b7:	50                   	push   eax
9f0004b8:	e8 7f 2d 00 00       	call   9f00323c <strcpyI>
9f0004bd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:19
    itoaI(x,xstr);
9f0004c0:	83 ec 08             	sub    esp,0x8
9f0004c3:	8d 45 eb             	lea    eax,[ebp-0x15]
9f0004c6:	50                   	push   eax
9f0004c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0004ca:	e8 af fe ff ff       	call   9f00037e <itoaI>
9f0004cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:20
    strcatI(cmd,xstr);
9f0004d2:	83 ec 08             	sub    esp,0x8
9f0004d5:	8d 45 eb             	lea    eax,[ebp-0x15]
9f0004d8:	50                   	push   eax
9f0004d9:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004dc:	50                   	push   eax
9f0004dd:	e8 c8 2b 00 00       	call   9f0030aa <strcatI>
9f0004e2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:21
    strcatI(cmd,";");
9f0004e5:	83 ec 08             	sub    esp,0x8
9f0004e8:	8d 83 27 f7 ff ff    	lea    eax,[ebx-0x8d9]
9f0004ee:	50                   	push   eax
9f0004ef:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004f2:	50                   	push   eax
9f0004f3:	e8 b2 2b 00 00       	call   9f0030aa <strcatI>
9f0004f8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:22
    itoaI(y,ystr);
9f0004fb:	83 ec 08             	sub    esp,0x8
9f0004fe:	8d 45 e8             	lea    eax,[ebp-0x18]
9f000501:	50                   	push   eax
9f000502:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000505:	e8 74 fe ff ff       	call   9f00037e <itoaI>
9f00050a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:23
    strcatI(cmd,ystr);
9f00050d:	83 ec 08             	sub    esp,0x8
9f000510:	8d 45 e8             	lea    eax,[ebp-0x18]
9f000513:	50                   	push   eax
9f000514:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000517:	50                   	push   eax
9f000518:	e8 8d 2b 00 00       	call   9f0030aa <strcatI>
9f00051d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:24
    strcatI(cmd,"H");
9f000520:	83 ec 08             	sub    esp,0x8
9f000523:	8d 83 29 f7 ff ff    	lea    eax,[ebx-0x8d7]
9f000529:	50                   	push   eax
9f00052a:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00052d:	50                   	push   eax
9f00052e:	e8 77 2b 00 00       	call   9f0030aa <strcatI>
9f000533:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:26
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f000536:	83 ec 08             	sub    esp,0x8
9f000539:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00053c:	50                   	push   eax
9f00053d:	8d 83 2b f7 ff ff    	lea    eax,[ebx-0x8d5]
9f000543:	50                   	push   eax
9f000544:	e8 d0 0f 00 00       	call   9f001519 <printfI>
9f000549:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:27
}
9f00054c:	90                   	nop
9f00054d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000550:	c9                   	leave  
9f000551:	c3                   	ret    

9f000552 <saveCursorPosition>:
saveCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:30

VISIBLE void saveCursorPosition()
{
9f000552:	55                   	push   ebp
9f000553:	89 e5                	mov    ebp,esp
9f000555:	53                   	push   ebx
9f000556:	83 ec 14             	sub    esp,0x14
9f000559:	e8 a2 43 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f00055e:	81 c3 fe 6c 00 00    	add    ebx,0x6cfe
/home/yogi/src/os/aproj/libChrisOS/src/console.c:33
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f000564:	83 ec 08             	sub    esp,0x8
9f000567:	8d 83 24 f7 ff ff    	lea    eax,[ebx-0x8dc]
9f00056d:	50                   	push   eax
9f00056e:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000571:	50                   	push   eax
9f000572:	e8 c5 2c 00 00       	call   9f00323c <strcpyI>
9f000577:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:34
    strcatI(cmd,"s");
9f00057a:	83 ec 08             	sub    esp,0x8
9f00057d:	8d 83 2e f7 ff ff    	lea    eax,[ebx-0x8d2]
9f000583:	50                   	push   eax
9f000584:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000587:	50                   	push   eax
9f000588:	e8 1d 2b 00 00       	call   9f0030aa <strcatI>
9f00058d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:36
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f000590:	83 ec 08             	sub    esp,0x8
9f000593:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000596:	50                   	push   eax
9f000597:	8d 83 2b f7 ff ff    	lea    eax,[ebx-0x8d5]
9f00059d:	50                   	push   eax
9f00059e:	e8 76 0f 00 00       	call   9f001519 <printfI>
9f0005a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:37
}
9f0005a6:	90                   	nop
9f0005a7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0005aa:	c9                   	leave  
9f0005ab:	c3                   	ret    

9f0005ac <restoreCursorPosition>:
restoreCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:40

VISIBLE void restoreCursorPosition()
{
9f0005ac:	55                   	push   ebp
9f0005ad:	89 e5                	mov    ebp,esp
9f0005af:	53                   	push   ebx
9f0005b0:	83 ec 14             	sub    esp,0x14
9f0005b3:	e8 48 43 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f0005b8:	81 c3 a4 6c 00 00    	add    ebx,0x6ca4
/home/yogi/src/os/aproj/libChrisOS/src/console.c:43
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f0005be:	83 ec 08             	sub    esp,0x8
9f0005c1:	8d 83 24 f7 ff ff    	lea    eax,[ebx-0x8dc]
9f0005c7:	50                   	push   eax
9f0005c8:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005cb:	50                   	push   eax
9f0005cc:	e8 6b 2c 00 00       	call   9f00323c <strcpyI>
9f0005d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:44
    strcatI(cmd,"u");
9f0005d4:	83 ec 08             	sub    esp,0x8
9f0005d7:	8d 83 30 f7 ff ff    	lea    eax,[ebx-0x8d0]
9f0005dd:	50                   	push   eax
9f0005de:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005e1:	50                   	push   eax
9f0005e2:	e8 c3 2a 00 00       	call   9f0030aa <strcatI>
9f0005e7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:46
//    writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f0005ea:	83 ec 08             	sub    esp,0x8
9f0005ed:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005f0:	50                   	push   eax
9f0005f1:	8d 83 2b f7 ff ff    	lea    eax,[ebx-0x8d5]
9f0005f7:	50                   	push   eax
9f0005f8:	e8 1c 0f 00 00       	call   9f001519 <printfI>
9f0005fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:47
}
9f000600:	90                   	nop
9f000601:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000604:	c9                   	leave  
9f000605:	c3                   	ret    
9f000606:	66 90                	xchg   ax,ax

9f000608 <getenvI>:
getenvI():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:10
 */
#include "libChrisOS.h"
#include "strings.h"

int getenvI(char *varname, char *value)
{
9f000608:	55                   	push   ebp
9f000609:	89 e5                	mov    ebp,esp
9f00060b:	53                   	push   ebx
9f00060c:	83 ec 14             	sub    esp,0x14
9f00060f:	e8 ec 42 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f000614:	81 c3 48 6c 00 00    	add    ebx,0x6c48
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11
    for (int cnt=0;cnt<100;cnt++)
9f00061a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f000621:	eb 7b                	jmp    9f00069e <getenvI+0x96>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:12
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f000623:	83 ec 0c             	sub    esp,0xc
9f000626:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000629:	e8 22 2d 00 00       	call   9f003350 <strlenI>
9f00062e:	83 c4 10             	add    esp,0x10
9f000631:	89 c1                	mov    ecx,eax
9f000633:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000639:	8b 00                	mov    eax,DWORD PTR [eax]
9f00063b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00063e:	c1 e2 02             	shl    edx,0x2
9f000641:	01 d0                	add    eax,edx
9f000643:	8b 00                	mov    eax,DWORD PTR [eax]
9f000645:	83 ec 04             	sub    esp,0x4
9f000648:	51                   	push   ecx
9f000649:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00064c:	50                   	push   eax
9f00064d:	e8 09 2e 00 00       	call   9f00345b <strncmpI>
9f000652:	83 c4 10             	add    esp,0x10
9f000655:	85 c0                	test   eax,eax
9f000657:	75 41                	jne    9f00069a <getenvI+0x92>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:14
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
9f000659:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00065f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000661:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000664:	c1 e2 02             	shl    edx,0x2
9f000667:	01 d0                	add    eax,edx
9f000669:	8b 00                	mov    eax,DWORD PTR [eax]
9f00066b:	83 ec 08             	sub    esp,0x8
9f00066e:	8d 93 32 f7 ff ff    	lea    edx,[ebx-0x8ce]
9f000674:	52                   	push   edx
9f000675:	50                   	push   eax
9f000676:	e8 ab 34 00 00       	call   9f003b26 <strstrI>
9f00067b:	83 c4 10             	add    esp,0x10
9f00067e:	83 c0 01             	add    eax,0x1
9f000681:	83 ec 04             	sub    esp,0x4
9f000684:	6a 32                	push   0x32
9f000686:	50                   	push   eax
9f000687:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00068a:	e8 35 2e 00 00       	call   9f0034c4 <strncpyI>
9f00068f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:15
            return cnt+1;
9f000692:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000695:	83 c0 01             	add    eax,0x1
9f000698:	eb 13                	jmp    9f0006ad <getenvI+0xa5>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 2)
#include "libChrisOS.h"
#include "strings.h"

int getenvI(char *varname, char *value)
{
    for (int cnt=0;cnt<100;cnt++)
9f00069a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 1)
9f00069e:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
9f0006a2:	0f 8e 7b ff ff ff    	jle    9f000623 <getenvI+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:17
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
            return cnt+1;
        }
    return 0;
9f0006a8:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:18
}
9f0006ad:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0006b0:	c9                   	leave  
9f0006b1:	c3                   	ret    

9f0006b2 <getenv>:
getenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:21

VISIBLE int getenv(char *varname, char *value)
{
9f0006b2:	55                   	push   ebp
9f0006b3:	89 e5                	mov    ebp,esp
9f0006b5:	83 ec 08             	sub    esp,0x8
9f0006b8:	e8 05 42 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0006bd:	05 9f 6b 00 00       	add    eax,0x6b9f
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:22
    return getenvI(varname, value);
9f0006c2:	83 ec 08             	sub    esp,0x8
9f0006c5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0006c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0006cb:	e8 38 ff ff ff       	call   9f000608 <getenvI>
9f0006d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:23
}
9f0006d3:	c9                   	leave  
9f0006d4:	c3                   	ret    

9f0006d5 <setenv>:
setenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:26

VISIBLE void  setenv(char *varname, char *value)
{
9f0006d5:	55                   	push   ebp
9f0006d6:	89 e5                	mov    ebp,esp
9f0006d8:	53                   	push   ebx
9f0006d9:	83 ec 14             	sub    esp,0x14
9f0006dc:	e8 1f 42 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f0006e1:	81 c3 7b 6b 00 00    	add    ebx,0x6b7b
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:27
    uint32_t lastPopulated = 0;
9f0006e7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:29
    
    for (int cnt=0;cnt<100;cnt++)
9f0006ee:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f0006f5:	e9 d5 00 00 00       	jmp    9f0007cf <setenv+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:30
        if (processEnvp[cnt]!=0)
9f0006fa:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000700:	8b 00                	mov    eax,DWORD PTR [eax]
9f000702:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000705:	c1 e2 02             	shl    edx,0x2
9f000708:	01 d0                	add    eax,edx
9f00070a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00070c:	85 c0                	test   eax,eax
9f00070e:	0f 84 b7 00 00 00    	je     9f0007cb <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:32
        {
            lastPopulated = (uint32_t)processEnvp[cnt];
9f000714:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00071a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00071c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00071f:	c1 e2 02             	shl    edx,0x2
9f000722:	01 d0                	add    eax,edx
9f000724:	8b 00                	mov    eax,DWORD PTR [eax]
9f000726:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:33
            if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f000729:	83 ec 0c             	sub    esp,0xc
9f00072c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00072f:	e8 1c 2c 00 00       	call   9f003350 <strlenI>
9f000734:	83 c4 10             	add    esp,0x10
9f000737:	89 c1                	mov    ecx,eax
9f000739:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00073f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000741:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000744:	c1 e2 02             	shl    edx,0x2
9f000747:	01 d0                	add    eax,edx
9f000749:	8b 00                	mov    eax,DWORD PTR [eax]
9f00074b:	83 ec 04             	sub    esp,0x4
9f00074e:	51                   	push   ecx
9f00074f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000752:	50                   	push   eax
9f000753:	e8 03 2d 00 00       	call   9f00345b <strncmpI>
9f000758:	83 c4 10             	add    esp,0x10
9f00075b:	85 c0                	test   eax,eax
9f00075d:	75 6c                	jne    9f0007cb <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:35
            {
                strcpyI(processEnvp[cnt],varname);
9f00075f:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000765:	8b 00                	mov    eax,DWORD PTR [eax]
9f000767:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00076a:	c1 e2 02             	shl    edx,0x2
9f00076d:	01 d0                	add    eax,edx
9f00076f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000771:	83 ec 08             	sub    esp,0x8
9f000774:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000777:	50                   	push   eax
9f000778:	e8 bf 2a 00 00       	call   9f00323c <strcpyI>
9f00077d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36
                strcatI(processEnvp[cnt],"=");
9f000780:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000786:	8b 00                	mov    eax,DWORD PTR [eax]
9f000788:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00078b:	c1 e2 02             	shl    edx,0x2
9f00078e:	01 d0                	add    eax,edx
9f000790:	8b 00                	mov    eax,DWORD PTR [eax]
9f000792:	83 ec 08             	sub    esp,0x8
9f000795:	8d 93 32 f7 ff ff    	lea    edx,[ebx-0x8ce]
9f00079b:	52                   	push   edx
9f00079c:	50                   	push   eax
9f00079d:	e8 08 29 00 00       	call   9f0030aa <strcatI>
9f0007a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:37
                strcatI(processEnvp[cnt],value);
9f0007a5:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0007ab:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007ad:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0007b0:	c1 e2 02             	shl    edx,0x2
9f0007b3:	01 d0                	add    eax,edx
9f0007b5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007b7:	83 ec 08             	sub    esp,0x8
9f0007ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0007bd:	50                   	push   eax
9f0007be:	e8 e7 28 00 00       	call   9f0030aa <strcatI>
9f0007c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:38
                return;
9f0007c6:	e9 c6 00 00 00       	jmp    9f000891 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:29 (discriminator 2)

VISIBLE void  setenv(char *varname, char *value)
{
    uint32_t lastPopulated = 0;
    
    for (int cnt=0;cnt<100;cnt++)
9f0007cb:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:29 (discriminator 1)
9f0007cf:	83 7d f0 63          	cmp    DWORD PTR [ebp-0x10],0x63
9f0007d3:	0f 8e 21 ff ff ff    	jle    9f0006fa <setenv+0x25>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f0007d9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f0007e0:	e9 a2 00 00 00       	jmp    9f000887 <setenv+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:42
        if (processEnvp[cnt]==0)
9f0007e5:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0007eb:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007ed:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0007f0:	c1 e2 02             	shl    edx,0x2
9f0007f3:	01 d0                	add    eax,edx
9f0007f5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007f7:	85 c0                	test   eax,eax
9f0007f9:	0f 85 84 00 00 00    	jne    9f000883 <setenv+0x1ae>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:44
        {
            processEnvp[cnt]=(char*)lastPopulated+512;
9f0007ff:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000805:	8b 00                	mov    eax,DWORD PTR [eax]
9f000807:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00080a:	c1 e2 02             	shl    edx,0x2
9f00080d:	01 d0                	add    eax,edx
9f00080f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000812:	81 c2 00 02 00 00    	add    edx,0x200
9f000818:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:45
            strcpyI(processEnvp[cnt],varname);
9f00081a:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000820:	8b 00                	mov    eax,DWORD PTR [eax]
9f000822:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000825:	c1 e2 02             	shl    edx,0x2
9f000828:	01 d0                	add    eax,edx
9f00082a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00082c:	83 ec 08             	sub    esp,0x8
9f00082f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000832:	50                   	push   eax
9f000833:	e8 04 2a 00 00       	call   9f00323c <strcpyI>
9f000838:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:46
            strcatI(processEnvp[cnt],"=");
9f00083b:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000841:	8b 00                	mov    eax,DWORD PTR [eax]
9f000843:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000846:	c1 e2 02             	shl    edx,0x2
9f000849:	01 d0                	add    eax,edx
9f00084b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00084d:	83 ec 08             	sub    esp,0x8
9f000850:	8d 93 32 f7 ff ff    	lea    edx,[ebx-0x8ce]
9f000856:	52                   	push   edx
9f000857:	50                   	push   eax
9f000858:	e8 4d 28 00 00       	call   9f0030aa <strcatI>
9f00085d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:47
            strcatI(processEnvp[cnt],value);
9f000860:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000866:	8b 00                	mov    eax,DWORD PTR [eax]
9f000868:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00086b:	c1 e2 02             	shl    edx,0x2
9f00086e:	01 d0                	add    eax,edx
9f000870:	8b 00                	mov    eax,DWORD PTR [eax]
9f000872:	83 ec 08             	sub    esp,0x8
9f000875:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000878:	50                   	push   eax
9f000879:	e8 2c 28 00 00       	call   9f0030aa <strcatI>
9f00087e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:48
            return;
9f000881:	eb 0e                	jmp    9f000891 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41 (discriminator 2)
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f000883:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41 (discriminator 1)
9f000887:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
9f00088b:	0f 8e 54 ff ff ff    	jle    9f0007e5 <setenv+0x110>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:52
            strcatI(processEnvp[cnt],value);
            return;
        }            
    //NOTE: if we get here, the value is thrown away!        
    
}
9f000891:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000894:	c9                   	leave  
9f000895:	c3                   	ret    

9f000896 <getcwdI>:
getcwdI():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:55

char* getcwdI(char* buf, size_t size)
{
9f000896:	55                   	push   ebp
9f000897:	89 e5                	mov    ebp,esp
9f000899:	53                   	push   ebx
9f00089a:	83 ec 04             	sub    esp,0x4
9f00089d:	e8 20 40 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0008a2:	05 ba 69 00 00       	add    eax,0x69ba
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:56
    return (char*)do_syscall2(SYSCALL_GETCWD,(uint32_t)buf,size);
9f0008a7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0008aa:	83 ec 04             	sub    esp,0x4
9f0008ad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0008b0:	52                   	push   edx
9f0008b1:	6a 4f                	push   0x4f
9f0008b3:	89 c3                	mov    ebx,eax
9f0008b5:	e8 04 0a 00 00       	call   9f0012be <do_syscall2>
9f0008ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:58
    
}
9f0008bd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0008c0:	c9                   	leave  
9f0008c1:	c3                   	ret    

9f0008c2 <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:61

VISIBLE char* getcwd(char* buf, size_t size)
{
9f0008c2:	55                   	push   ebp
9f0008c3:	89 e5                	mov    ebp,esp
9f0008c5:	83 ec 08             	sub    esp,0x8
9f0008c8:	e8 f5 3f 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0008cd:	05 8f 69 00 00       	add    eax,0x698f
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:62
    return getcwdI(buf,size);
9f0008d2:	83 ec 08             	sub    esp,0x8
9f0008d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0008d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0008db:	e8 b6 ff ff ff       	call   9f000896 <getcwdI>
9f0008e0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:63
}
9f0008e3:	c9                   	leave  
9f0008e4:	c3                   	ret    
9f0008e5:	66 90                	xchg   ax,ax
9f0008e7:	90                   	nop

9f0008e8 <getdir>:
getdir():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:15
    char *resolvePath_inPath;
    char *resolvePath_resPath;
    char *resolvePath_cwd;

VISIBLE int getdir(char* path, direntry_t *entries, int bufferCount)
{
9f0008e8:	55                   	push   ebp
9f0008e9:	89 e5                	mov    ebp,esp
9f0008eb:	53                   	push   ebx
9f0008ec:	83 ec 04             	sub    esp,0x4
9f0008ef:	e8 ce 3f 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0008f4:	05 68 69 00 00       	add    eax,0x6968
/home/yogi/src/os/aproj/libChrisOS/src/file.c:16
    return do_syscall3(SYSCALL_GETDENTS, (uint32_t)path, (uint32_t)entries, bufferCount);
9f0008f9:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f0008fc:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f0008ff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000902:	53                   	push   ebx
9f000903:	51                   	push   ecx
9f000904:	52                   	push   edx
9f000905:	68 04 03 00 00       	push   0x304
9f00090a:	89 c3                	mov    ebx,eax
9f00090c:	e8 71 09 00 00       	call   9f001282 <do_syscall3>
9f000911:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:17
}
9f000914:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000917:	c9                   	leave  
9f000918:	c3                   	ret    

9f000919 <open>:
open():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:20

VISIBLE void* open(char* path, const char* mode)
{
9f000919:	55                   	push   ebp
9f00091a:	89 e5                	mov    ebp,esp
9f00091c:	53                   	push   ebx
9f00091d:	83 ec 04             	sub    esp,0x4
9f000920:	e8 9d 3f 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f000925:	05 37 69 00 00       	add    eax,0x6937
/home/yogi/src/os/aproj/libChrisOS/src/file.c:22
    //NOTE: Using syscall3 and passing -1 as 3rd parameter, otherwise param3 will be 0 and syscall will think freopen is calling!
    return (void*)do_syscall3(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode,-1);
9f00092a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f00092d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000930:	6a ff                	push   0xffffffff
9f000932:	51                   	push   ecx
9f000933:	52                   	push   edx
9f000934:	6a 02                	push   0x2
9f000936:	89 c3                	mov    ebx,eax
9f000938:	e8 45 09 00 00       	call   9f001282 <do_syscall3>
9f00093d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:23
}
9f000940:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000943:	c9                   	leave  
9f000944:	c3                   	ret    

9f000945 <file_cleanup>:
file_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:26

void file_cleanup()
{
9f000945:	55                   	push   ebp
9f000946:	89 e5                	mov    ebp,esp
9f000948:	53                   	push   ebx
9f000949:	83 ec 04             	sub    esp,0x4
9f00094c:	e8 af 3f 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f000951:	81 c3 0b 69 00 00    	add    ebx,0x690b
/home/yogi/src/os/aproj/libChrisOS/src/file.c:27
    while (filesToClose)
9f000957:	eb 1f                	jmp    9f000978 <file_cleanup+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:28
        close(filesToClose++);
9f000959:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f00095f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000961:	8d 48 04             	lea    ecx,[eax+0x4]
9f000964:	8b 93 d8 ff ff ff    	mov    edx,DWORD PTR [ebx-0x28]
9f00096a:	89 0a                	mov    DWORD PTR [edx],ecx
9f00096c:	83 ec 0c             	sub    esp,0xc
9f00096f:	50                   	push   eax
9f000970:	e8 7b 3f 00 00       	call   9f0048f0 <__x86.get_pc_thunk.ax+0x2e>
9f000975:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:27
    return (void*)do_syscall3(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode,-1);
}

void file_cleanup()
{
    while (filesToClose)
9f000978:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f00097e:	8b 00                	mov    eax,DWORD PTR [eax]
9f000980:	85 c0                	test   eax,eax
9f000982:	75 d5                	jne    9f000959 <file_cleanup+0x14>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:29
        close(filesToClose++);
    freeI(filesToClose);
9f000984:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f00098a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00098c:	83 ec 0c             	sub    esp,0xc
9f00098f:	50                   	push   eax
9f000990:	e8 de 16 00 00       	call   9f002073 <freeI>
9f000995:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:30
}
9f000998:	90                   	nop
9f000999:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00099c:	c9                   	leave  
9f00099d:	c3                   	ret    

9f00099e <freopen>:
freopen():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:33

VISIBLE void* freopen(char* path, const char* mode, void *stream)
{
9f00099e:	55                   	push   ebp
9f00099f:	89 e5                	mov    ebp,esp
9f0009a1:	56                   	push   esi
9f0009a2:	53                   	push   ebx
9f0009a3:	83 ec 10             	sub    esp,0x10
9f0009a6:	e8 55 3f 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f0009ab:	81 c3 b1 68 00 00    	add    ebx,0x68b1
/home/yogi/src/os/aproj/libChrisOS/src/file.c:34
    void *retVal=0;
9f0009b1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:35
    retVal = (void*)do_syscall3(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode, (uint32_t)stream);
9f0009b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0009bb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0009be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0009c1:	51                   	push   ecx
9f0009c2:	52                   	push   edx
9f0009c3:	50                   	push   eax
9f0009c4:	6a 02                	push   0x2
9f0009c6:	e8 b7 08 00 00       	call   9f001282 <do_syscall3>
9f0009cb:	83 c4 10             	add    esp,0x10
9f0009ce:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:36
    if (retVal==NULL)
9f0009d1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f0009d5:	75 07                	jne    9f0009de <freopen+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:37
        return (void*)-1;
9f0009d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f0009dc:	eb 4c                	jmp    9f000a2a <freopen+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:38
    if (filesToClose==NULL)
9f0009de:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f0009e4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009e6:	85 c0                	test   eax,eax
9f0009e8:	75 17                	jne    9f000a01 <freopen+0x63>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:40
    {
        filesToClose=mallocI(sizeof(uintptr_t)*25);
9f0009ea:	83 ec 0c             	sub    esp,0xc
9f0009ed:	6a 64                	push   0x64
9f0009ef:	e8 01 18 00 00       	call   9f0021f5 <mallocI>
9f0009f4:	83 c4 10             	add    esp,0x10
9f0009f7:	89 c2                	mov    edx,eax
9f0009f9:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f0009ff:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:42
    }
    filesToClose[filesToCloseCount++]=(uintptr_t)retVal;
9f000a01:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000a07:	8b 30                	mov    esi,DWORD PTR [eax]
9f000a09:	8b 83 d0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x30]
9f000a0f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000a11:	8d 48 01             	lea    ecx,[eax+0x1]
9f000a14:	8b 93 d0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x30]
9f000a1a:	89 0a                	mov    DWORD PTR [edx],ecx
9f000a1c:	c1 e0 02             	shl    eax,0x2
9f000a1f:	8d 14 06             	lea    edx,[esi+eax*1]
9f000a22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000a25:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:43
    return retVal;
9f000a27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:44
}
9f000a2a:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000a2d:	5b                   	pop    ebx
9f000a2e:	5e                   	pop    esi
9f000a2f:	5d                   	pop    ebp
9f000a30:	c3                   	ret    

9f000a31 <close>:
close():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:47

VISIBLE void close(void* handle)
{
9f000a31:	55                   	push   ebp
9f000a32:	89 e5                	mov    ebp,esp
9f000a34:	53                   	push   ebx
9f000a35:	83 ec 04             	sub    esp,0x4
9f000a38:	e8 85 3e 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f000a3d:	05 1f 68 00 00       	add    eax,0x681f
/home/yogi/src/os/aproj/libChrisOS/src/file.c:48
    do_syscall1(SYSCALL_CLOSE, (uint32_t)handle);
9f000a42:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000a45:	83 ec 08             	sub    esp,0x8
9f000a48:	52                   	push   edx
9f000a49:	6a 03                	push   0x3
9f000a4b:	89 c3                	mov    ebx,eax
9f000a4d:	e8 aa 08 00 00       	call   9f0012fc <do_syscall1>
9f000a52:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:49
}
9f000a55:	90                   	nop
9f000a56:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000a59:	c9                   	leave  
9f000a5a:	c3                   	ret    

9f000a5b <readI>:
readI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:52

int readI(void* handle, void *buffer, int size, int length)
{
9f000a5b:	55                   	push   ebp
9f000a5c:	89 e5                	mov    ebp,esp
9f000a5e:	56                   	push   esi
9f000a5f:	53                   	push   ebx
9f000a60:	e8 5d 3e 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f000a65:	05 f7 67 00 00       	add    eax,0x67f7
/home/yogi/src/os/aproj/libChrisOS/src/file.c:53
    return do_syscall4(SYSCALL_READ, (uint32_t)handle, (uint32_t)buffer, size, length);
9f000a6a:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f000a6d:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000a70:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000a73:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000a76:	83 ec 0c             	sub    esp,0xc
9f000a79:	56                   	push   esi
9f000a7a:	53                   	push   ebx
9f000a7b:	51                   	push   ecx
9f000a7c:	52                   	push   edx
9f000a7d:	6a 04                	push   0x4
9f000a7f:	89 c3                	mov    ebx,eax
9f000a81:	e8 c2 07 00 00       	call   9f001248 <do_syscall4>
9f000a86:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:54
}
9f000a89:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000a8c:	5b                   	pop    ebx
9f000a8d:	5e                   	pop    esi
9f000a8e:	5d                   	pop    ebp
9f000a8f:	c3                   	ret    

9f000a90 <read>:
read():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:57

VISIBLE int read(void* handle, void *buffer, int size, int length)
{
9f000a90:	55                   	push   ebp
9f000a91:	89 e5                	mov    ebp,esp
9f000a93:	83 ec 08             	sub    esp,0x8
9f000a96:	e8 27 3e 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f000a9b:	05 c1 67 00 00       	add    eax,0x67c1
/home/yogi/src/os/aproj/libChrisOS/src/file.c:58
    return readI(handle, buffer, size, length);
9f000aa0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f000aa3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000aa6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000aa9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000aac:	e8 aa ff ff ff       	call   9f000a5b <readI>
9f000ab1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:59
}
9f000ab4:	c9                   	leave  
9f000ab5:	c3                   	ret    

9f000ab6 <writeI>:
writeI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:62

int writeI(void* handle, void *buffer, int size, int length)
{
9f000ab6:	55                   	push   ebp
9f000ab7:	89 e5                	mov    ebp,esp
9f000ab9:	56                   	push   esi
9f000aba:	53                   	push   ebx
9f000abb:	e8 02 3e 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f000ac0:	05 9c 67 00 00       	add    eax,0x679c
/home/yogi/src/os/aproj/libChrisOS/src/file.c:63
    return do_syscall4(SYSCALL_WRITE, (uint32_t)handle, (uint32_t)buffer, size, length);
9f000ac5:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f000ac8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000acb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000ace:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000ad1:	83 ec 0c             	sub    esp,0xc
9f000ad4:	56                   	push   esi
9f000ad5:	53                   	push   ebx
9f000ad6:	51                   	push   ecx
9f000ad7:	52                   	push   edx
9f000ad8:	6a 05                	push   0x5
9f000ada:	89 c3                	mov    ebx,eax
9f000adc:	e8 67 07 00 00       	call   9f001248 <do_syscall4>
9f000ae1:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:64
}
9f000ae4:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000ae7:	5b                   	pop    ebx
9f000ae8:	5e                   	pop    esi
9f000ae9:	5d                   	pop    ebp
9f000aea:	c3                   	ret    

9f000aeb <write>:
write():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:67

VISIBLE int write(void* handle, void *buffer, int size, int length)
{
9f000aeb:	55                   	push   ebp
9f000aec:	89 e5                	mov    ebp,esp
9f000aee:	83 ec 08             	sub    esp,0x8
9f000af1:	e8 cc 3d 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f000af6:	05 66 67 00 00       	add    eax,0x6766
/home/yogi/src/os/aproj/libChrisOS/src/file.c:68
    return writeI(handle, buffer, size, length);
9f000afb:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f000afe:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000b01:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000b04:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000b07:	e8 aa ff ff ff       	call   9f000ab6 <writeI>
9f000b0c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:69
}
9f000b0f:	c9                   	leave  
9f000b10:	c3                   	ret    

9f000b11 <seekI>:
seekI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:72

int seekI(void* handle, long position, int whence)
{
9f000b11:	55                   	push   ebp
9f000b12:	89 e5                	mov    ebp,esp
9f000b14:	53                   	push   ebx
9f000b15:	83 ec 04             	sub    esp,0x4
9f000b18:	e8 a5 3d 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f000b1d:	05 3f 67 00 00       	add    eax,0x673f
/home/yogi/src/os/aproj/libChrisOS/src/file.c:73
    return do_syscall3(SYSCALL_SEEK, (uint32_t)handle, position, whence);
9f000b22:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000b25:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000b28:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000b2b:	53                   	push   ebx
9f000b2c:	51                   	push   ecx
9f000b2d:	52                   	push   edx
9f000b2e:	6a 0b                	push   0xb
9f000b30:	89 c3                	mov    ebx,eax
9f000b32:	e8 4b 07 00 00       	call   9f001282 <do_syscall3>
9f000b37:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:74
}
9f000b3a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000b3d:	c9                   	leave  
9f000b3e:	c3                   	ret    

9f000b3f <seek>:
seek():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:77

VISIBLE int seek(void* handle, long position, int whence)
{
9f000b3f:	55                   	push   ebp
9f000b40:	89 e5                	mov    ebp,esp
9f000b42:	83 ec 08             	sub    esp,0x8
9f000b45:	e8 78 3d 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f000b4a:	05 12 67 00 00       	add    eax,0x6712
/home/yogi/src/os/aproj/libChrisOS/src/file.c:78
    return seekI(handle, position, whence);
9f000b4f:	83 ec 04             	sub    esp,0x4
9f000b52:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000b55:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000b58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000b5b:	e8 b1 ff ff ff       	call   9f000b11 <seekI>
9f000b60:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:79
}
9f000b63:	c9                   	leave  
9f000b64:	c3                   	ret    

9f000b65 <statI>:
statI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:81
int statI(char *path, fstat_t *stat)
{
9f000b65:	55                   	push   ebp
9f000b66:	89 e5                	mov    ebp,esp
9f000b68:	53                   	push   ebx
9f000b69:	83 ec 04             	sub    esp,0x4
9f000b6c:	e8 51 3d 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f000b71:	05 eb 66 00 00       	add    eax,0x66eb
/home/yogi/src/os/aproj/libChrisOS/src/file.c:82
    return do_syscall2(SYSCALL_STAT, (uint32_t)path, (uint32_t)stat);
9f000b76:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000b79:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000b7c:	83 ec 04             	sub    esp,0x4
9f000b7f:	51                   	push   ecx
9f000b80:	52                   	push   edx
9f000b81:	6a 0a                	push   0xa
9f000b83:	89 c3                	mov    ebx,eax
9f000b85:	e8 34 07 00 00       	call   9f0012be <do_syscall2>
9f000b8a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:83
}
9f000b8d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000b90:	c9                   	leave  
9f000b91:	c3                   	ret    

9f000b92 <stat>:
stat():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:86

VISIBLE int stat(char *path, fstat_t *stat)
{
9f000b92:	55                   	push   ebp
9f000b93:	89 e5                	mov    ebp,esp
9f000b95:	83 ec 08             	sub    esp,0x8
9f000b98:	e8 25 3d 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f000b9d:	05 bf 66 00 00       	add    eax,0x66bf
/home/yogi/src/os/aproj/libChrisOS/src/file.c:87
    return statI(path, stat);
9f000ba2:	83 ec 08             	sub    esp,0x8
9f000ba5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000ba8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000bab:	e8 b5 ff ff ff       	call   9f000b65 <statI>
9f000bb0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:88
}
9f000bb3:	c9                   	leave  
9f000bb4:	c3                   	ret    

9f000bb5 <resolvePath>:
resolvePath():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:91

VISIBLE int resolvePath(const char *inPath, char *outPath)
{
9f000bb5:	55                   	push   ebp
9f000bb6:	89 e5                	mov    ebp,esp
9f000bb8:	53                   	push   ebx
9f000bb9:	83 ec 24             	sub    esp,0x24
9f000bbc:	e8 3f 3d 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f000bc1:	81 c3 9b 66 00 00    	add    ebx,0x669b
/home/yogi/src/os/aproj/libChrisOS/src/file.c:92
    char delim[2]=":";
9f000bc7:	66 c7 45 e6 3a 00    	mov    WORD PTR [ebp-0x1a],0x3a
/home/yogi/src/os/aproj/libChrisOS/src/file.c:94
    char *token;
    int retVal=-1;
9f000bcd:	c7 45 f0 ff ff ff ff 	mov    DWORD PTR [ebp-0x10],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/file.c:97
    fstat_t fstat;
    
    if (!resolvePath_envPath)
9f000bd4:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000bda:	8b 00                	mov    eax,DWORD PTR [eax]
9f000bdc:	85 c0                	test   eax,eax
9f000bde:	75 1a                	jne    9f000bfa <resolvePath+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:98
        resolvePath_envPath=mallocI(1024);
9f000be0:	83 ec 0c             	sub    esp,0xc
9f000be3:	68 00 04 00 00       	push   0x400
9f000be8:	e8 08 16 00 00       	call   9f0021f5 <mallocI>
9f000bed:	83 c4 10             	add    esp,0x10
9f000bf0:	89 c2                	mov    edx,eax
9f000bf2:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000bf8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:99
    if (!resolvePath_cwd)
9f000bfa:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000c00:	8b 00                	mov    eax,DWORD PTR [eax]
9f000c02:	85 c0                	test   eax,eax
9f000c04:	75 1a                	jne    9f000c20 <resolvePath+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:100
        resolvePath_cwd=mallocI(1024);
9f000c06:	83 ec 0c             	sub    esp,0xc
9f000c09:	68 00 04 00 00       	push   0x400
9f000c0e:	e8 e2 15 00 00       	call   9f0021f5 <mallocI>
9f000c13:	83 c4 10             	add    esp,0x10
9f000c16:	89 c2                	mov    edx,eax
9f000c18:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000c1e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:101
    if (!resolvePath_inPath)
9f000c20:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000c26:	8b 00                	mov    eax,DWORD PTR [eax]
9f000c28:	85 c0                	test   eax,eax
9f000c2a:	75 1a                	jne    9f000c46 <resolvePath+0x91>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:102
            resolvePath_inPath=mallocI(1024);
9f000c2c:	83 ec 0c             	sub    esp,0xc
9f000c2f:	68 00 04 00 00       	push   0x400
9f000c34:	e8 bc 15 00 00       	call   9f0021f5 <mallocI>
9f000c39:	83 c4 10             	add    esp,0x10
9f000c3c:	89 c2                	mov    edx,eax
9f000c3e:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000c44:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:103
    if (!resolvePath_resPath)
9f000c46:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000c4c:	8b 00                	mov    eax,DWORD PTR [eax]
9f000c4e:	85 c0                	test   eax,eax
9f000c50:	75 1a                	jne    9f000c6c <resolvePath+0xb7>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:104
        resolvePath_resPath=mallocI(1024);
9f000c52:	83 ec 0c             	sub    esp,0xc
9f000c55:	68 00 04 00 00       	push   0x400
9f000c5a:	e8 96 15 00 00       	call   9f0021f5 <mallocI>
9f000c5f:	83 c4 10             	add    esp,0x10
9f000c62:	89 c2                	mov    edx,eax
9f000c64:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000c6a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:109

    //using the PATH variable, attempt to resolve the path to an executable when a path isn't given in the commandline
    
    //If there is a / character in the path, then don't attempt to resolve
    getenvI("PATH",resolvePath_envPath);
9f000c6c:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000c72:	8b 00                	mov    eax,DWORD PTR [eax]
9f000c74:	83 ec 08             	sub    esp,0x8
9f000c77:	50                   	push   eax
9f000c78:	8d 83 34 f7 ff ff    	lea    eax,[ebx-0x8cc]
9f000c7e:	50                   	push   eax
9f000c7f:	e8 84 f9 ff ff       	call   9f000608 <getenvI>
9f000c84:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:111

    getcwdI(resolvePath_cwd,1024);
9f000c87:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000c8d:	8b 00                	mov    eax,DWORD PTR [eax]
9f000c8f:	83 ec 08             	sub    esp,0x8
9f000c92:	68 00 04 00 00       	push   0x400
9f000c97:	50                   	push   eax
9f000c98:	e8 f9 fb ff ff       	call   9f000896 <getcwdI>
9f000c9d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:113
    
    if (strstrI(inPath, "/"))
9f000ca0:	83 ec 08             	sub    esp,0x8
9f000ca3:	8d 83 39 f7 ff ff    	lea    eax,[ebx-0x8c7]
9f000ca9:	50                   	push   eax
9f000caa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000cad:	e8 74 2e 00 00       	call   9f003b26 <strstrI>
9f000cb2:	83 c4 10             	add    esp,0x10
9f000cb5:	85 c0                	test   eax,eax
9f000cb7:	74 53                	je     9f000d0c <resolvePath+0x157>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:115
    {
        if (*inPath!='/')
9f000cb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000cbc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000cbf:	3c 2f                	cmp    al,0x2f
9f000cc1:	74 2c                	je     9f000cef <resolvePath+0x13a>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:117
        {
            strcpyI(outPath,resolvePath_cwd);
9f000cc3:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000cc9:	8b 00                	mov    eax,DWORD PTR [eax]
9f000ccb:	83 ec 08             	sub    esp,0x8
9f000cce:	50                   	push   eax
9f000ccf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000cd2:	e8 65 25 00 00       	call   9f00323c <strcpyI>
9f000cd7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:118
            strcatI(outPath,"/");
9f000cda:	83 ec 08             	sub    esp,0x8
9f000cdd:	8d 83 39 f7 ff ff    	lea    eax,[ebx-0x8c7]
9f000ce3:	50                   	push   eax
9f000ce4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000ce7:	e8 be 23 00 00       	call   9f0030aa <strcatI>
9f000cec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:120
        }
        strcatI(outPath,inPath);
9f000cef:	83 ec 08             	sub    esp,0x8
9f000cf2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000cf5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000cf8:	e8 ad 23 00 00       	call   9f0030aa <strcatI>
9f000cfd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:121
        retVal=0;
9f000d00:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f000d07:	e9 96 01 00 00       	jmp    9f000ea2 <resolvePath+0x2ed>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:125
    }
    else
    {
        strcpyI(resolvePath_inPath,inPath);
9f000d0c:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000d12:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d14:	83 ec 08             	sub    esp,0x8
9f000d17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000d1a:	50                   	push   eax
9f000d1b:	e8 1c 25 00 00       	call   9f00323c <strcpyI>
9f000d20:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:126
        token=strtokI(resolvePath_envPath,delim);
9f000d23:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000d29:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d2b:	83 ec 08             	sub    esp,0x8
9f000d2e:	8d 55 e6             	lea    edx,[ebp-0x1a]
9f000d31:	52                   	push   edx
9f000d32:	50                   	push   eax
9f000d33:	e8 e4 f3 ff ff       	call   9f00011c <strtokI>
9f000d38:	83 c4 10             	add    esp,0x10
9f000d3b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:127
        while (token!=NULL)
9f000d3e:	e9 bd 00 00 00       	jmp    9f000e00 <resolvePath+0x24b>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:129
        {
            strcpyI(resolvePath_resPath,token);
9f000d43:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000d49:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d4b:	83 ec 08             	sub    esp,0x8
9f000d4e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f000d51:	50                   	push   eax
9f000d52:	e8 e5 24 00 00       	call   9f00323c <strcpyI>
9f000d57:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:130
            if (strcmpI(resolvePath_resPath,"/")!=0)
9f000d5a:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000d60:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d62:	83 ec 08             	sub    esp,0x8
9f000d65:	8d 93 39 f7 ff ff    	lea    edx,[ebx-0x8c7]
9f000d6b:	52                   	push   edx
9f000d6c:	50                   	push   eax
9f000d6d:	e8 0e 24 00 00       	call   9f003180 <strcmpI>
9f000d72:	83 c4 10             	add    esp,0x10
9f000d75:	85 c0                	test   eax,eax
9f000d77:	74 1b                	je     9f000d94 <resolvePath+0x1df>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:131
                strcatI(resolvePath_resPath,"/");
9f000d79:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000d7f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d81:	83 ec 08             	sub    esp,0x8
9f000d84:	8d 93 39 f7 ff ff    	lea    edx,[ebx-0x8c7]
9f000d8a:	52                   	push   edx
9f000d8b:	50                   	push   eax
9f000d8c:	e8 19 23 00 00       	call   9f0030aa <strcatI>
9f000d91:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:132
            strcatI(resolvePath_resPath,inPath);
9f000d94:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000d9a:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d9c:	83 ec 08             	sub    esp,0x8
9f000d9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000da2:	50                   	push   eax
9f000da3:	e8 02 23 00 00       	call   9f0030aa <strcatI>
9f000da8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:133
            int res=statI(resolvePath_resPath,&fstat);
9f000dab:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000db1:	8b 00                	mov    eax,DWORD PTR [eax]
9f000db3:	83 ec 08             	sub    esp,0x8
9f000db6:	8d 55 dc             	lea    edx,[ebp-0x24]
9f000db9:	52                   	push   edx
9f000dba:	50                   	push   eax
9f000dbb:	e8 a5 fd ff ff       	call   9f000b65 <statI>
9f000dc0:	83 c4 10             	add    esp,0x10
9f000dc3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:134
            if (res==0)
9f000dc6:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f000dca:	75 20                	jne    9f000dec <resolvePath+0x237>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:136
            {
                strcpyI(outPath,resolvePath_resPath);
9f000dcc:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000dd2:	8b 00                	mov    eax,DWORD PTR [eax]
9f000dd4:	83 ec 08             	sub    esp,0x8
9f000dd7:	50                   	push   eax
9f000dd8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000ddb:	e8 5c 24 00 00       	call   9f00323c <strcpyI>
9f000de0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:137
                retVal=0;
9f000de3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:138
                break;
9f000dea:	eb 1e                	jmp    9f000e0a <resolvePath+0x255>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:140
            }
            token=strtokI(NULL,delim);
9f000dec:	83 ec 08             	sub    esp,0x8
9f000def:	8d 45 e6             	lea    eax,[ebp-0x1a]
9f000df2:	50                   	push   eax
9f000df3:	6a 00                	push   0x0
9f000df5:	e8 22 f3 ff ff       	call   9f00011c <strtokI>
9f000dfa:	83 c4 10             	add    esp,0x10
9f000dfd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:127
    }
    else
    {
        strcpyI(resolvePath_inPath,inPath);
        token=strtokI(resolvePath_envPath,delim);
        while (token!=NULL)
9f000e00:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f000e04:	0f 85 39 ff ff ff    	jne    9f000d43 <resolvePath+0x18e>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:143
                break;
            }
            token=strtokI(NULL,delim);
        }

        if (retVal==-1)
9f000e0a:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
9f000e0e:	0f 85 8e 00 00 00    	jne    9f000ea2 <resolvePath+0x2ed>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:145
        {
            strcpyI(resolvePath_resPath,resolvePath_cwd);
9f000e14:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000e1a:	8b 10                	mov    edx,DWORD PTR [eax]
9f000e1c:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e22:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e24:	83 ec 08             	sub    esp,0x8
9f000e27:	52                   	push   edx
9f000e28:	50                   	push   eax
9f000e29:	e8 0e 24 00 00       	call   9f00323c <strcpyI>
9f000e2e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:146
            strcatI(resolvePath_resPath,"/");
9f000e31:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e37:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e39:	83 ec 08             	sub    esp,0x8
9f000e3c:	8d 93 39 f7 ff ff    	lea    edx,[ebx-0x8c7]
9f000e42:	52                   	push   edx
9f000e43:	50                   	push   eax
9f000e44:	e8 61 22 00 00       	call   9f0030aa <strcatI>
9f000e49:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:147
            strcatI(resolvePath_resPath,inPath);
9f000e4c:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e52:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e54:	83 ec 08             	sub    esp,0x8
9f000e57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000e5a:	50                   	push   eax
9f000e5b:	e8 4a 22 00 00       	call   9f0030aa <strcatI>
9f000e60:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:148
            int res=statI(resolvePath_resPath,&fstat);
9f000e63:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e69:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e6b:	83 ec 08             	sub    esp,0x8
9f000e6e:	8d 55 dc             	lea    edx,[ebp-0x24]
9f000e71:	52                   	push   edx
9f000e72:	50                   	push   eax
9f000e73:	e8 ed fc ff ff       	call   9f000b65 <statI>
9f000e78:	83 c4 10             	add    esp,0x10
9f000e7b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:149
            if (res==0)
9f000e7e:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f000e82:	75 1e                	jne    9f000ea2 <resolvePath+0x2ed>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:151
            {
                strcpyI(outPath,resolvePath_resPath);
9f000e84:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e8a:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e8c:	83 ec 08             	sub    esp,0x8
9f000e8f:	50                   	push   eax
9f000e90:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000e93:	e8 a4 23 00 00       	call   9f00323c <strcpyI>
9f000e98:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:152
                retVal=0;
9f000e9b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:157
            }
        }
    }
    
    return retVal;
9f000ea2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:158
}
9f000ea5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000ea8:	c9                   	leave  
9f000ea9:	c3                   	ret    

9f000eaa <tellI>:
tellI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:161

long tellI(void *stream)
{
9f000eaa:	55                   	push   ebp
9f000eab:	89 e5                	mov    ebp,esp
9f000ead:	53                   	push   ebx
9f000eae:	83 ec 04             	sub    esp,0x4
9f000eb1:	e8 0c 3a 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f000eb6:	05 a6 63 00 00       	add    eax,0x63a6
/home/yogi/src/os/aproj/libChrisOS/src/file.c:162
    return do_syscall1(SYSCALL_TELL,(uint32_t)stream);
9f000ebb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000ebe:	83 ec 08             	sub    esp,0x8
9f000ec1:	52                   	push   edx
9f000ec2:	6a 0c                	push   0xc
9f000ec4:	89 c3                	mov    ebx,eax
9f000ec6:	e8 31 04 00 00       	call   9f0012fc <do_syscall1>
9f000ecb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:163
}
9f000ece:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000ed1:	c9                   	leave  
9f000ed2:	c3                   	ret    

9f000ed3 <tell>:
tell():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:166

VISIBLE long tell(void *stream)
{
9f000ed3:	55                   	push   ebp
9f000ed4:	89 e5                	mov    ebp,esp
9f000ed6:	83 ec 08             	sub    esp,0x8
9f000ed9:	e8 e4 39 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f000ede:	05 7e 63 00 00       	add    eax,0x637e
/home/yogi/src/os/aproj/libChrisOS/src/file.c:167
    return tellI(stream);
9f000ee3:	83 ec 0c             	sub    esp,0xc
9f000ee6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000ee9:	e8 bc ff ff ff       	call   9f000eaa <tellI>
9f000eee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:168
}
9f000ef1:	c9                   	leave  
9f000ef2:	c3                   	ret    

9f000ef3 <getlineI>:
getlineI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:171

size_t getlineI(char **lineptr, size_t *n, void *stream)
{
9f000ef3:	55                   	push   ebp
9f000ef4:	89 e5                	mov    ebp,esp
9f000ef6:	53                   	push   ebx
9f000ef7:	83 ec 24             	sub    esp,0x24
9f000efa:	e8 01 3a 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f000eff:	81 c3 5d 63 00 00    	add    ebx,0x635d
/home/yogi/src/os/aproj/libChrisOS/src/file.c:173
    char *buffer;
    int bytesReturned=0;
9f000f05:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:174
    size_t bytesParsed=0;
9f000f0c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:175
    char *crPtr=NULL;
9f000f13:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:176
    char *lineToOutput=*lineptr;
9f000f1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000f1d:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f1f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:177
    size_t lLinePtrLen=*n;
9f000f22:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000f25:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f27:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:178
    int startFilePos=tellI(stream);
9f000f2a:	83 ec 0c             	sub    esp,0xc
9f000f2d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000f30:	e8 75 ff ff ff       	call   9f000eaa <tellI>
9f000f35:	83 c4 10             	add    esp,0x10
9f000f38:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:179
    int retVal=-1;
9f000f3b:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/file.c:181
    
    buffer=mallocI(GETLINE_BUFFER_SIZE);        
9f000f42:	83 ec 0c             	sub    esp,0xc
9f000f45:	68 00 04 00 00       	push   0x400
9f000f4a:	e8 a6 12 00 00       	call   9f0021f5 <mallocI>
9f000f4f:	83 c4 10             	add    esp,0x10
9f000f52:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:183
    
    while ((bytesReturned=readI(stream, buffer,GETLINE_BUFFER_SIZE,1))>0)
9f000f55:	e9 22 01 00 00       	jmp    9f00107c <getlineI+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:185
    {
        if (crPtr==strstrI(buffer,"\n"))
9f000f5a:	83 ec 08             	sub    esp,0x8
9f000f5d:	8d 83 3b f7 ff ff    	lea    eax,[ebx-0x8c5]
9f000f63:	50                   	push   eax
9f000f64:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f000f67:	e8 ba 2b 00 00       	call   9f003b26 <strstrI>
9f000f6c:	83 c4 10             	add    esp,0x10
9f000f6f:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
9f000f72:	0f 85 cf 00 00 00    	jne    9f001047 <getlineI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:187
        { 
            if (crPtr-buffer+bytesParsed<*n)
9f000f78:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f000f7b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f000f7e:	29 c2                	sub    edx,eax
9f000f80:	89 d0                	mov    eax,edx
9f000f82:	89 c2                	mov    edx,eax
9f000f84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000f87:	01 c2                	add    edx,eax
9f000f89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000f8c:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f8e:	39 c2                	cmp    edx,eax
9f000f90:	73 1f                	jae    9f000fb1 <getlineI+0xbe>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:188
                strncatI(lineToOutput,buffer,crPtr-buffer);
9f000f92:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f000f95:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f000f98:	29 c2                	sub    edx,eax
9f000f9a:	89 d0                	mov    eax,edx
9f000f9c:	89 c2                	mov    edx,eax
9f000f9e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f000fa1:	83 ec 04             	sub    esp,0x4
9f000fa4:	52                   	push   edx
9f000fa5:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f000fa8:	50                   	push   eax
9f000fa9:	e8 3a 21 00 00       	call   9f0030e8 <strncatI>
9f000fae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:189
            if (bytesParsed+(crPtr-buffer)>*n)
9f000fb1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f000fb4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f000fb7:	29 c2                	sub    edx,eax
9f000fb9:	89 d0                	mov    eax,edx
9f000fbb:	89 c2                	mov    edx,eax
9f000fbd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000fc0:	01 c2                	add    edx,eax
9f000fc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000fc5:	8b 00                	mov    eax,DWORD PTR [eax]
9f000fc7:	39 c2                	cmp    edx,eax
9f000fc9:	76 21                	jbe    9f000fec <getlineI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:190
                reallocI(lineToOutput,bytesParsed+(crPtr-buffer));
9f000fcb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f000fce:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f000fd1:	29 c2                	sub    edx,eax
9f000fd3:	89 d0                	mov    eax,edx
9f000fd5:	89 c2                	mov    edx,eax
9f000fd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000fda:	01 c2                	add    edx,eax
9f000fdc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f000fdf:	83 ec 08             	sub    esp,0x8
9f000fe2:	52                   	push   edx
9f000fe3:	50                   	push   eax
9f000fe4:	e8 6f 14 00 00       	call   9f002458 <reallocI>
9f000fe9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:191
            strncatI(lineToOutput,buffer,crPtr-buffer);
9f000fec:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f000fef:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f000ff2:	29 c2                	sub    edx,eax
9f000ff4:	89 d0                	mov    eax,edx
9f000ff6:	89 c2                	mov    edx,eax
9f000ff8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f000ffb:	83 ec 04             	sub    esp,0x4
9f000ffe:	52                   	push   edx
9f000fff:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001002:	50                   	push   eax
9f001003:	e8 e0 20 00 00       	call   9f0030e8 <strncatI>
9f001008:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:192
            bytesParsed+=(crPtr-buffer);
9f00100b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00100e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001011:	29 c2                	sub    edx,eax
9f001013:	89 d0                	mov    eax,edx
9f001015:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:193
            seekI(stream, startFilePos+bytesParsed,SEEK_SET);
9f001018:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f00101b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00101e:	01 d0                	add    eax,edx
9f001020:	83 ec 04             	sub    esp,0x4
9f001023:	6a 00                	push   0x0
9f001025:	50                   	push   eax
9f001026:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001029:	e8 e3 fa ff ff       	call   9f000b11 <seekI>
9f00102e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:194
            *n=lLinePtrLen;
9f001031:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001034:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001037:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:195
            lineptr=&lineToOutput;
9f001039:	8d 45 d8             	lea    eax,[ebp-0x28]
9f00103c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:196
            retVal=bytesParsed;
9f00103f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001042:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:197
            goto getlineReturn;
9f001045:	eb 57                	jmp    9f00109e <getlineI+0x1ab>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:201
        }
        else
        {
            lLinePtrLen+=bytesReturned;
9f001047:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00104a:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:202
            bytesParsed+=bytesReturned;
9f00104d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001050:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:203
            reallocI(lineToOutput,lLinePtrLen);
9f001053:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001056:	83 ec 08             	sub    esp,0x8
9f001059:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00105c:	50                   	push   eax
9f00105d:	e8 f6 13 00 00       	call   9f002458 <reallocI>
9f001062:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:204
            strncatI(lineToOutput,buffer,GETLINE_BUFFER_SIZE);
9f001065:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001068:	83 ec 04             	sub    esp,0x4
9f00106b:	68 00 04 00 00       	push   0x400
9f001070:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001073:	50                   	push   eax
9f001074:	e8 6f 20 00 00       	call   9f0030e8 <strncatI>
9f001079:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:183
    int startFilePos=tellI(stream);
    int retVal=-1;
    
    buffer=mallocI(GETLINE_BUFFER_SIZE);        
    
    while ((bytesReturned=readI(stream, buffer,GETLINE_BUFFER_SIZE,1))>0)
9f00107c:	6a 01                	push   0x1
9f00107e:	68 00 04 00 00       	push   0x400
9f001083:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001086:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001089:	e8 cd f9 ff ff       	call   9f000a5b <readI>
9f00108e:	83 c4 10             	add    esp,0x10
9f001091:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f001094:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f001098:	0f 8f bc fe ff ff    	jg     9f000f5a <getlineI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:209
            strncatI(lineToOutput,buffer,GETLINE_BUFFER_SIZE);
        }
    }

getlineReturn:    
    freeI(buffer);
9f00109e:	83 ec 0c             	sub    esp,0xc
9f0010a1:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f0010a4:	e8 ca 0f 00 00       	call   9f002073 <freeI>
9f0010a9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:210
    return retVal;
9f0010ac:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:211
}
9f0010af:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0010b2:	c9                   	leave  
9f0010b3:	c3                   	ret    

9f0010b4 <getline>:
getline():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:214

VISIBLE size_t getline(char **lineptr, size_t *n, void *stream)
{
9f0010b4:	55                   	push   ebp
9f0010b5:	89 e5                	mov    ebp,esp
9f0010b7:	83 ec 08             	sub    esp,0x8
9f0010ba:	e8 03 38 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0010bf:	05 9d 61 00 00       	add    eax,0x619d
/home/yogi/src/os/aproj/libChrisOS/src/file.c:215
    return getlineI(lineptr, n, stream);
9f0010c4:	83 ec 04             	sub    esp,0x4
9f0010c7:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0010ca:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0010cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0010d0:	e8 1e fe ff ff       	call   9f000ef3 <getlineI>
9f0010d5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:216
9f0010d8:	c9                   	leave  
9f0010d9:	c3                   	ret    
9f0010da:	66 90                	xchg   ax,ax

9f0010dc <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
9f0010dc:	55                   	push   ebp
9f0010dd:	89 e5                	mov    ebp,esp
9f0010df:	53                   	push   ebx
9f0010e0:	e8 dd 37 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0010e5:	05 77 61 00 00       	add    eax,0x6177
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
9f0010ea:	b8 05 00 00 00       	mov    eax,0x5
9f0010ef:	bb 01 00 00 00       	mov    ebx,0x1
9f0010f4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0010f7:	89 d1                	mov    ecx,edx
9f0010f9:	e8 fc ff ff ff       	call   9f0010fa <puts+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
9f0010fe:	90                   	nop
9f0010ff:	5b                   	pop    ebx
9f001100:	5d                   	pop    ebp
9f001101:	c3                   	ret    

9f001102 <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
9f001102:	55                   	push   ebp
9f001103:	89 e5                	mov    ebp,esp
9f001105:	53                   	push   ebx
9f001106:	83 ec 14             	sub    esp,0x14
9f001109:	e8 b4 37 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f00110e:	05 4e 61 00 00       	add    eax,0x614e
9f001113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001116:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
9f001119:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
9f00111f:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
9f001123:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
9f001126:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
9f00112a:	b8 05 00 00 00       	mov    eax,0x5
9f00112f:	bb 01 00 00 00       	mov    ebx,0x1
9f001134:	8d 55 fa             	lea    edx,[ebp-0x6]
9f001137:	89 d1                	mov    ecx,edx
9f001139:	e8 fc ff ff ff       	call   9f00113a <putc+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
9f00113e:	90                   	nop
9f00113f:	83 c4 14             	add    esp,0x14
9f001142:	5b                   	pop    ebx
9f001143:	5d                   	pop    ebp
9f001144:	c3                   	ret    

9f001145 <getchar>:
getchar():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32



VISIBLE char getchar()
{
9f001145:	55                   	push   ebp
9f001146:	89 e5                	mov    ebp,esp
9f001148:	53                   	push   ebx
9f001149:	83 ec 10             	sub    esp,0x10
9f00114c:	e8 71 37 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f001151:	05 0b 61 00 00       	add    eax,0x610b
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:36
    char c;
    while (1==1)
    {
        READCHAR(c);
9f001156:	b8 04 00 00 00       	mov    eax,0x4
9f00115b:	ba 00 00 00 00       	mov    edx,0x0
9f001160:	89 d3                	mov    ebx,edx
9f001162:	e8 fc ff ff ff       	call   9f001163 <getchar+0x1e>
9f001167:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:37
        if (c)
9f00116a:	80 7d fb 00          	cmp    BYTE PTR [ebp-0x5],0x0
9f00116e:	74 06                	je     9f001176 <getchar+0x31>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38
            return c;
9f001170:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
9f001174:	eb 0c                	jmp    9f001182 <getchar+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:39
        asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f001176:	b8 02 03 00 00       	mov    eax,0x302
9f00117b:	e8 fc ff ff ff       	call   9f00117c <getchar+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:40
    }
9f001180:	eb d4                	jmp    9f001156 <getchar+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:42
    return 0; //Should not get here
}
9f001182:	83 c4 10             	add    esp,0x10
9f001185:	5b                   	pop    ebx
9f001186:	5d                   	pop    ebp
9f001187:	c3                   	ret    

9f001188 <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
9f001188:	55                   	push   ebp
9f001189:	89 e5                	mov    ebp,esp
9f00118b:	53                   	push   ebx
9f00118c:	83 ec 14             	sub    esp,0x14
9f00118f:	e8 2e 37 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f001194:	05 c8 60 00 00       	add    eax,0x60c8
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:48
    char inchar;
    int len=0;
9f001199:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    char lbuf[2];
    
    lbuf[0]=lbuf[1]=0;
9f0011a0:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
9f0011a4:	0f b6 55 f2          	movzx  edx,BYTE PTR [ebp-0xe]
9f0011a8:	88 55 f1             	mov    BYTE PTR [ebp-0xf],dl
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52
    if (stream!=1)
9f0011ab:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f0011af:	74 19                	je     9f0011ca <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54
    {
        printI("Stream %u not implemented\n",stream);
9f0011b1:	83 ec 08             	sub    esp,0x8
9f0011b4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0011b7:	8d 90 3d f7 ff ff    	lea    edx,[eax-0x8c3]
9f0011bd:	52                   	push   edx
9f0011be:	89 c3                	mov    ebx,eax
9f0011c0:	e8 a8 03 00 00       	call   9f00156d <printI>
9f0011c5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:55 (discriminator 1)
        getsError: goto getsError;
9f0011c8:	eb fe                	jmp    9f0011c8 <gets+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:60
    }
    
    while (1==1)
    {
        READCHAR(inchar)
9f0011ca:	b8 04 00 00 00       	mov    eax,0x4
9f0011cf:	ba 00 00 00 00       	mov    edx,0x0
9f0011d4:	89 d3                	mov    ebx,edx
9f0011d6:	e8 fc ff ff ff       	call   9f0011d7 <gets+0x4f>
9f0011db:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61
        if (inchar=='\b' && len>0)
9f0011de:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
9f0011e2:	75 17                	jne    9f0011fb <gets+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61 (discriminator 1)
9f0011e4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f0011e8:	7e 11                	jle    9f0011fb <gets+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
        {
            buffer[len]=0;
9f0011ea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0011ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0011f0:	01 d0                	add    eax,edx
9f0011f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:64
            len--;
9f0011f5:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
9f0011f9:	eb 43                	jmp    9f00123e <gets+0xb6>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:66
        }
        else if (inchar!=0)
9f0011fb:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
9f0011ff:	74 33                	je     9f001234 <gets+0xac>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:68
        {
            lbuf[0]=inchar;
9f001201:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f001205:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:70
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
9f001208:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00120b:	8d 50 01             	lea    edx,[eax+0x1]
9f00120e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f001211:	89 c2                	mov    edx,eax
9f001213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001216:	01 c2                	add    edx,eax
9f001218:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f00121c:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:72
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
9f00121e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001221:	83 c0 01             	add    eax,0x1
9f001224:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f001227:	7d 06                	jge    9f00122f <gets+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:72 (discriminator 1)
9f001229:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
9f00122d:	75 9b                	jne    9f0011ca <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:74
            
                return len;
9f00122f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001232:	eb 0c                	jmp    9f001240 <gets+0xb8>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:77
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f001234:	b8 02 03 00 00       	mov    eax,0x302
9f001239:	e8 fc ff ff ff       	call   9f00123a <gets+0xb2>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:82 (discriminator 2)
        //added these for 1000 hertz clock, not needed for 100 hertz
/*            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt*/

    }
9f00123e:	eb 8a                	jmp    9f0011ca <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:83
}
9f001240:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001243:	c9                   	leave  
9f001244:	c3                   	ret    
9f001245:	66 90                	xchg   ax,ax
9f001247:	90                   	nop

9f001248 <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
bool libcInitialized = false;
char *printBuffer;


int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)
{
9f001248:	55                   	push   ebp
9f001249:	89 e5                	mov    ebp,esp
9f00124b:	56                   	push   esi
9f00124c:	53                   	push   ebx
9f00124d:	83 ec 10             	sub    esp,0x10
9f001250:	e8 6d 36 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f001255:	05 07 60 00 00       	add    eax,0x6007
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    int retVal=0;
9f00125a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
    SYSCALL4(callnum, param1, param2, param3, param4, retVal);
9f001261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001264:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f001267:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00126a:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f00126d:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
9f001270:	e8 fc ff ff ff       	call   9f001271 <do_syscall4+0x29>
9f001275:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:21
    return retVal;
9f001278:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:22
}
9f00127b:	83 c4 10             	add    esp,0x10
9f00127e:	5b                   	pop    ebx
9f00127f:	5e                   	pop    esi
9f001280:	5d                   	pop    ebp
9f001281:	c3                   	ret    

9f001282 <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25

int do_syscall3(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
9f001282:	55                   	push   ebp
9f001283:	89 e5                	mov    ebp,esp
9f001285:	56                   	push   esi
9f001286:	53                   	push   ebx
9f001287:	83 ec 10             	sub    esp,0x10
9f00128a:	e8 33 36 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f00128f:	05 cd 5f 00 00       	add    eax,0x5fcd
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    int retVal=0;
9f001294:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
    SYSCALL3(callnum, param1, param2, param3, retVal);
9f00129b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00129e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0012a1:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0012a4:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f0012a7:	be 00 00 00 00       	mov    esi,0x0
9f0012ac:	e8 fc ff ff ff       	call   9f0012ad <do_syscall3+0x2b>
9f0012b1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:28
    return retVal;
9f0012b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:29
}
9f0012b7:	83 c4 10             	add    esp,0x10
9f0012ba:	5b                   	pop    ebx
9f0012bb:	5e                   	pop    esi
9f0012bc:	5d                   	pop    ebp
9f0012bd:	c3                   	ret    

9f0012be <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32

int do_syscall2(int callnum, uint32_t param1, uint32_t param2)
{
9f0012be:	55                   	push   ebp
9f0012bf:	89 e5                	mov    ebp,esp
9f0012c1:	56                   	push   esi
9f0012c2:	53                   	push   ebx
9f0012c3:	83 ec 10             	sub    esp,0x10
9f0012c6:	e8 f7 35 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0012cb:	05 91 5f 00 00       	add    eax,0x5f91
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    int retVal=0;
9f0012d0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
    SYSCALL2(callnum, param1, param2, retVal);
9f0012d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0012da:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0012dd:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0012e0:	ba 00 00 00 00       	mov    edx,0x0
9f0012e5:	be 00 00 00 00       	mov    esi,0x0
9f0012ea:	e8 fc ff ff ff       	call   9f0012eb <do_syscall2+0x2d>
9f0012ef:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:35
    return retVal;
9f0012f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:36
}
9f0012f5:	83 c4 10             	add    esp,0x10
9f0012f8:	5b                   	pop    ebx
9f0012f9:	5e                   	pop    esi
9f0012fa:	5d                   	pop    ebp
9f0012fb:	c3                   	ret    

9f0012fc <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39

int do_syscall1(int callnum, uint32_t param1)
{
9f0012fc:	55                   	push   ebp
9f0012fd:	89 e5                	mov    ebp,esp
9f0012ff:	56                   	push   esi
9f001300:	53                   	push   ebx
9f001301:	83 ec 10             	sub    esp,0x10
9f001304:	e8 b9 35 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f001309:	05 53 5f 00 00       	add    eax,0x5f53
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    int retVal=0;
9f00130e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
    SYSCALL1(callnum, param1, retVal);
9f001315:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001318:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f00131b:	b9 00 00 00 00       	mov    ecx,0x0
9f001320:	ba 00 00 00 00       	mov    edx,0x0
9f001325:	be 00 00 00 00       	mov    esi,0x0
9f00132a:	e8 fc ff ff ff       	call   9f00132b <do_syscall1+0x2f>
9f00132f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:42
    return retVal;
9f001332:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:43
}
9f001335:	83 c4 10             	add    esp,0x10
9f001338:	5b                   	pop    ebx
9f001339:	5e                   	pop    esi
9f00133a:	5d                   	pop    ebp
9f00133b:	c3                   	ret    

9f00133c <do_syscall0>:
do_syscall0():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46

int do_syscall0(int callnum)
{
9f00133c:	55                   	push   ebp
9f00133d:	89 e5                	mov    ebp,esp
9f00133f:	56                   	push   esi
9f001340:	53                   	push   ebx
9f001341:	83 ec 10             	sub    esp,0x10
9f001344:	e8 79 35 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f001349:	05 13 5f 00 00       	add    eax,0x5f13
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:47
    int retVal=0;
9f00134e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
    SYSCALL0(callnum, retVal);
9f001355:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001358:	bb 00 00 00 00       	mov    ebx,0x0
9f00135d:	b9 00 00 00 00       	mov    ecx,0x0
9f001362:	ba 00 00 00 00       	mov    edx,0x0
9f001367:	be 00 00 00 00       	mov    esi,0x0
9f00136c:	e8 fc ff ff ff       	call   9f00136d <do_syscall0+0x31>
9f001371:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:49
    return retVal;
9f001374:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:50
}
9f001377:	83 c4 10             	add    esp,0x10
9f00137a:	5b                   	pop    ebx
9f00137b:	5e                   	pop    esi
9f00137c:	5d                   	pop    ebp
9f00137d:	c3                   	ret    

9f00137e <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53

VISIBLE void __attribute__((constructor)) libc_init()
{
9f00137e:	55                   	push   ebp
9f00137f:	89 e5                	mov    ebp,esp
9f001381:	53                   	push   ebx
9f001382:	83 ec 04             	sub    esp,0x4
9f001385:	e8 76 35 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f00138a:	81 c3 d2 5e 00 00    	add    ebx,0x5ed2
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:54
    printdI(DEBUG_LIBC,"***libc_init called\n***");
9f001390:	83 ec 08             	sub    esp,0x8
9f001393:	8d 83 58 f7 ff ff    	lea    eax,[ebx-0x8a8]
9f001399:	50                   	push   eax
9f00139a:	68 00 00 00 02       	push   0x2000000
9f00139f:	e8 34 02 00 00       	call   9f0015d8 <printdI>
9f0013a4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:55
    if (!libcInitialized)
9f0013a7:	0f b6 83 58 00 00 00 	movzx  eax,BYTE PTR [ebx+0x58]
9f0013ae:	83 f0 01             	xor    eax,0x1
9f0013b1:	84 c0                	test   al,al
9f0013b3:	74 7c                	je     9f001431 <libc_init+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:57
    {
        initmalloc();
9f0013b5:	e8 c6 0b 00 00       	call   9f001f80 <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:58
        filesToCloseCount=0;
9f0013ba:	8b 83 d0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x30]
9f0013c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
//        printfI("libc_init: filesToCloseCount=%u\n",filesToCloseCount);
        //processEnvp = envp;
        __asm__("mov %0,[ebp+52]\n":"=a" (processEnvp));
9f0013c6:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
9f0013c9:	89 c2                	mov    edx,eax
9f0013cb:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0013d1:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:62
        do_syscall0(SYSCALL_INVALID);
9f0013d3:	83 ec 0c             	sub    esp,0xc
9f0013d6:	6a 00                	push   0x0
9f0013d8:	e8 5f ff ff ff       	call   9f00133c <do_syscall0>
9f0013dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:63
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
9f0013e0:	8d 83 ed a1 ff ff    	lea    eax,[ebx-0x5e13]
9f0013e6:	83 ec 08             	sub    esp,0x8
9f0013e9:	50                   	push   eax
9f0013ea:	68 63 01 00 00       	push   0x163
9f0013ef:	e8 08 ff ff ff       	call   9f0012fc <do_syscall1>
9f0013f4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:64
        libcInitialized = true;
9f0013f7:	c6 83 58 00 00 00 01 	mov    BYTE PTR [ebx+0x58],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:65
        printBuffer = mallocI(0x1000);
9f0013fe:	83 ec 0c             	sub    esp,0xc
9f001401:	68 00 10 00 00       	push   0x1000
9f001406:	e8 ea 0d 00 00       	call   9f0021f5 <mallocI>
9f00140b:	83 c4 10             	add    esp,0x10
9f00140e:	89 c2                	mov    edx,eax
9f001410:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f001416:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:66
        printdI(DEBUG_LIBC,"***libc_init completed\n");
9f001418:	83 ec 08             	sub    esp,0x8
9f00141b:	8d 83 70 f7 ff ff    	lea    eax,[ebx-0x890]
9f001421:	50                   	push   eax
9f001422:	68 00 00 00 02       	push   0x2000000
9f001427:	e8 ac 01 00 00       	call   9f0015d8 <printdI>
9f00142c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
    }
    else
        printI("libc_init called previously, exiting\n");
}
9f00142f:	eb 12                	jmp    9f001443 <libc_init+0xc5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:69
        libcInitialized = true;
        printBuffer = mallocI(0x1000);
        printdI(DEBUG_LIBC,"***libc_init completed\n");
    }
    else
        printI("libc_init called previously, exiting\n");
9f001431:	83 ec 0c             	sub    esp,0xc
9f001434:	8d 83 88 f7 ff ff    	lea    eax,[ebx-0x878]
9f00143a:	50                   	push   eax
9f00143b:	e8 2d 01 00 00       	call   9f00156d <printI>
9f001440:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
}
9f001443:	90                   	nop
9f001444:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001447:	c9                   	leave  
9f001448:	c3                   	ret    

9f001449 <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:73

void __attribute__((destructor)) libc_cleanup(void)
{
9f001449:	55                   	push   ebp
9f00144a:	89 e5                	mov    ebp,esp
9f00144c:	53                   	push   ebx
9f00144d:	83 ec 04             	sub    esp,0x4
9f001450:	e8 ab 34 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f001455:	81 c3 07 5e 00 00    	add    ebx,0x5e07
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:74
    malloc_cleanup();
9f00145b:	e8 3f 11 00 00       	call   9f00259f <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:75
    file_cleanup();
9f001460:	e8 e0 f4 ff ff       	call   9f000945 <file_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:76
}
9f001465:	90                   	nop
9f001466:	83 c4 04             	add    esp,0x4
9f001469:	5b                   	pop    ebx
9f00146a:	5d                   	pop    ebp
9f00146b:	c3                   	ret    

9f00146c <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:79

VISIBLE int print(const char *format, ...)
{
9f00146c:	55                   	push   ebp
9f00146d:	89 e5                	mov    ebp,esp
9f00146f:	53                   	push   ebx
9f001470:	83 ec 14             	sub    esp,0x14
9f001473:	e8 88 34 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f001478:	81 c3 e4 5d 00 00    	add    ebx,0x5de4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:81
    va_list args;
    va_start( args, format );
9f00147e:	8d 45 0c             	lea    eax,[ebp+0xc]
9f001481:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:83
    
    int size = vsprintf(printBuffer, format, args);
9f001484:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001487:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f00148d:	8b 00                	mov    eax,DWORD PTR [eax]
9f00148f:	83 ec 04             	sub    esp,0x4
9f001492:	52                   	push   edx
9f001493:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001496:	50                   	push   eax
9f001497:	e8 d1 16 00 00       	call   9f002b6d <vsprintf>
9f00149c:	83 c4 10             	add    esp,0x10
9f00149f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:84
    do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f0014a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0014a5:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f0014ab:	8b 12                	mov    edx,DWORD PTR [edx]
9f0014ad:	50                   	push   eax
9f0014ae:	52                   	push   edx
9f0014af:	6a 01                	push   0x1
9f0014b1:	6a 05                	push   0x5
9f0014b3:	e8 ca fd ff ff       	call   9f001282 <do_syscall3>
9f0014b8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:85
    return 0;
9f0014bb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:86
}
9f0014c0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0014c3:	c9                   	leave  
9f0014c4:	c3                   	ret    

9f0014c5 <printf>:
printf():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:89

VISIBLE int printf(const char *format, ...)
{
9f0014c5:	55                   	push   ebp
9f0014c6:	89 e5                	mov    ebp,esp
9f0014c8:	53                   	push   ebx
9f0014c9:	83 ec 14             	sub    esp,0x14
9f0014cc:	e8 2f 34 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f0014d1:	81 c3 8b 5d 00 00    	add    ebx,0x5d8b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:91
    va_list args;
    va_start( args, format );
9f0014d7:	8d 45 0c             	lea    eax,[ebp+0xc]
9f0014da:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:93
    
    int size = vsprintf(printBuffer, format, args);
9f0014dd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0014e0:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f0014e6:	8b 00                	mov    eax,DWORD PTR [eax]
9f0014e8:	83 ec 04             	sub    esp,0x4
9f0014eb:	52                   	push   edx
9f0014ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0014ef:	50                   	push   eax
9f0014f0:	e8 78 16 00 00       	call   9f002b6d <vsprintf>
9f0014f5:	83 c4 10             	add    esp,0x10
9f0014f8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:94
    return do_syscall3(SYSCALL_WRITE, STDOUT_FILE, (uint32_t)printBuffer, size);
9f0014fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0014fe:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f001504:	8b 12                	mov    edx,DWORD PTR [edx]
9f001506:	50                   	push   eax
9f001507:	52                   	push   edx
9f001508:	6a 01                	push   0x1
9f00150a:	6a 05                	push   0x5
9f00150c:	e8 71 fd ff ff       	call   9f001282 <do_syscall3>
9f001511:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:95
}
9f001514:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001517:	c9                   	leave  
9f001518:	c3                   	ret    

9f001519 <printfI>:
printfI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:98

int printfI(const char *format, ...)
{
9f001519:	55                   	push   ebp
9f00151a:	89 e5                	mov    ebp,esp
9f00151c:	53                   	push   ebx
9f00151d:	83 ec 14             	sub    esp,0x14
9f001520:	e8 db 33 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f001525:	81 c3 37 5d 00 00    	add    ebx,0x5d37
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:100
    va_list args;
    va_start( args, format );
9f00152b:	8d 45 0c             	lea    eax,[ebp+0xc]
9f00152e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:102
    
    int size = vsprintf(printBuffer, format, args);
9f001531:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001534:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f00153a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00153c:	83 ec 04             	sub    esp,0x4
9f00153f:	52                   	push   edx
9f001540:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001543:	50                   	push   eax
9f001544:	e8 24 16 00 00       	call   9f002b6d <vsprintf>
9f001549:	83 c4 10             	add    esp,0x10
9f00154c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:103
    return do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f00154f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001552:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f001558:	8b 12                	mov    edx,DWORD PTR [edx]
9f00155a:	50                   	push   eax
9f00155b:	52                   	push   edx
9f00155c:	6a 01                	push   0x1
9f00155e:	6a 05                	push   0x5
9f001560:	e8 1d fd ff ff       	call   9f001282 <do_syscall3>
9f001565:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:104
}
9f001568:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00156b:	c9                   	leave  
9f00156c:	c3                   	ret    

9f00156d <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:107

int printI(const char *format, ...)
{
9f00156d:	55                   	push   ebp
9f00156e:	89 e5                	mov    ebp,esp
9f001570:	83 ec 10             	sub    esp,0x10
9f001573:	e8 4a 33 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f001578:	05 e4 5c 00 00       	add    eax,0x5ce4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:109
    va_list args;
    va_start( args, format );
9f00157d:	8d 45 0c             	lea    eax,[ebp+0xc]
9f001580:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:110
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
9f001583:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001586:	89 c2                	mov    edx,eax
9f001588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00158b:	52                   	push   edx
9f00158c:	50                   	push   eax
9f00158d:	68 00 03 00 00       	push   0x300
9f001592:	e8 27 fd ff ff       	call   9f0012be <do_syscall2>
9f001597:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:111
    return 0;
9f00159a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:112
}
9f00159f:	c9                   	leave  
9f0015a0:	c3                   	ret    

9f0015a1 <printd>:
printd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:115

VISIBLE int printd(uint32_t DebugLevel, const char *format, ...)
{
9f0015a1:	55                   	push   ebp
9f0015a2:	89 e5                	mov    ebp,esp
9f0015a4:	83 ec 10             	sub    esp,0x10
9f0015a7:	e8 16 33 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0015ac:	05 b0 5c 00 00       	add    eax,0x5cb0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:117
    va_list args;
    va_start( args, format );
9f0015b1:	8d 45 10             	lea    eax,[ebp+0x10]
9f0015b4:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:119
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f0015b7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0015ba:	89 c2                	mov    edx,eax
9f0015bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0015bf:	52                   	push   edx
9f0015c0:	50                   	push   eax
9f0015c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0015c4:	68 01 03 00 00       	push   0x301
9f0015c9:	e8 b4 fc ff ff       	call   9f001282 <do_syscall3>
9f0015ce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:120
    return 0;
9f0015d1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:122
    va_end(args);
}
9f0015d6:	c9                   	leave  
9f0015d7:	c3                   	ret    

9f0015d8 <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:125

int printdI(uint32_t DebugLevel, const char *format, ...)
{
9f0015d8:	55                   	push   ebp
9f0015d9:	89 e5                	mov    ebp,esp
9f0015db:	83 ec 10             	sub    esp,0x10
9f0015de:	e8 df 32 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0015e3:	05 79 5c 00 00       	add    eax,0x5c79
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:127
    va_list args;
    va_start( args, format );
9f0015e8:	8d 45 10             	lea    eax,[ebp+0x10]
9f0015eb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:129
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f0015ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0015f1:	89 c2                	mov    edx,eax
9f0015f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0015f6:	52                   	push   edx
9f0015f7:	50                   	push   eax
9f0015f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0015fb:	68 01 03 00 00       	push   0x301
9f001600:	e8 7d fc ff ff       	call   9f001282 <do_syscall3>
9f001605:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:130
    return 0;
9f001608:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:132
    va_end(args);
}
9f00160d:	c9                   	leave  
9f00160e:	c3                   	ret    

9f00160f <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:135

VISIBLE unsigned int sleep (unsigned int __seconds)
{
9f00160f:	55                   	push   ebp
9f001610:	89 e5                	mov    ebp,esp
9f001612:	56                   	push   esi
9f001613:	53                   	push   ebx
9f001614:	83 ec 10             	sub    esp,0x10
9f001617:	e8 a6 32 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f00161c:	05 40 5c 00 00       	add    eax,0x5c40
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:136
    return SLEEP_SECONDS(__seconds);
9f001621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001624:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001627:	b8 70 01 00 00       	mov    eax,0x170
9f00162c:	bb 00 00 00 00       	mov    ebx,0x0
9f001631:	b9 00 00 00 00       	mov    ecx,0x0
9f001636:	ba 00 00 00 00       	mov    edx,0x0
9f00163b:	be 00 00 00 00       	mov    esi,0x0
9f001640:	e8 fc ff ff ff       	call   9f001641 <sleep+0x32>
9f001645:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001648:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00164b:	6b d0 64             	imul   edx,eax,0x64
9f00164e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001651:	01 d0                	add    eax,edx
9f001653:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f001656:	b8 66 01 00 00       	mov    eax,0x166
9f00165b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f00165e:	b9 00 00 00 00       	mov    ecx,0x0
9f001663:	ba 00 00 00 00       	mov    edx,0x0
9f001668:	be 00 00 00 00       	mov    esi,0x0
9f00166d:	e8 fc ff ff ff       	call   9f00166e <sleep+0x5f>
9f001672:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001675:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:137
}
9f001678:	83 c4 10             	add    esp,0x10
9f00167b:	5b                   	pop    ebx
9f00167c:	5e                   	pop    esi
9f00167d:	5d                   	pop    ebp
9f00167e:	c3                   	ret    

9f00167f <sleepTicks>:
sleepTicks():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:140

VISIBLE unsigned int sleepTicks(unsigned int __milliseconds)
{
9f00167f:	55                   	push   ebp
9f001680:	89 e5                	mov    ebp,esp
9f001682:	56                   	push   esi
9f001683:	53                   	push   ebx
9f001684:	83 ec 10             	sub    esp,0x10
9f001687:	e8 36 32 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f00168c:	05 d0 5b 00 00       	add    eax,0x5bd0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:141
    return SLEEP_MS(__milliseconds);
9f001691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001694:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001697:	b8 70 01 00 00       	mov    eax,0x170
9f00169c:	bb 00 00 00 00       	mov    ebx,0x0
9f0016a1:	b9 00 00 00 00       	mov    ecx,0x0
9f0016a6:	ba 00 00 00 00       	mov    edx,0x0
9f0016ab:	be 00 00 00 00       	mov    esi,0x0
9f0016b0:	e8 fc ff ff ff       	call   9f0016b1 <sleepTicks+0x32>
9f0016b5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0016b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0016bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0016be:	01 d0                	add    eax,edx
9f0016c0:	83 e8 01             	sub    eax,0x1
9f0016c3:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f0016c6:	b8 66 01 00 00       	mov    eax,0x166
9f0016cb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f0016ce:	b9 00 00 00 00       	mov    ecx,0x0
9f0016d3:	ba 00 00 00 00       	mov    edx,0x0
9f0016d8:	be 00 00 00 00       	mov    esi,0x0
9f0016dd:	e8 fc ff ff ff       	call   9f0016de <sleepTicks+0x5f>
9f0016e2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0016e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:143
    
}
9f0016e8:	83 c4 10             	add    esp,0x10
9f0016eb:	5b                   	pop    ebx
9f0016ec:	5e                   	pop    esi
9f0016ed:	5d                   	pop    ebp
9f0016ee:	c3                   	ret    

9f0016ef <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:146

void stop()
{
9f0016ef:	55                   	push   ebp
9f0016f0:	89 e5                	mov    ebp,esp
9f0016f2:	e8 cb 31 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0016f7:	05 65 5b 00 00       	add    eax,0x5b65
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:147
    do_syscall0(SYSCALL_STOP);
9f0016fc:	68 68 01 00 00       	push   0x168
9f001701:	e8 36 fc ff ff       	call   9f00133c <do_syscall0>
9f001706:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:148
}
9f001709:	90                   	nop
9f00170a:	c9                   	leave  
9f00170b:	c3                   	ret    

9f00170c <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:151

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
9f00170c:	55                   	push   ebp
9f00170d:	89 e5                	mov    ebp,esp
9f00170f:	e8 ae 31 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f001714:	05 48 5b 00 00       	add    eax,0x5b48
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:152
    do_syscall3(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
9f001719:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00171c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00171f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001722:	51                   	push   ecx
9f001723:	52                   	push   edx
9f001724:	50                   	push   eax
9f001725:	68 67 01 00 00       	push   0x167
9f00172a:	e8 53 fb ff ff       	call   9f001282 <do_syscall3>
9f00172f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:153
}
9f001732:	90                   	nop
9f001733:	c9                   	leave  
9f001734:	c3                   	ret    

9f001735 <fork>:
fork():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:156

VISIBLE int fork()
{
9f001735:	55                   	push   ebp
9f001736:	89 e5                	mov    ebp,esp
9f001738:	83 ec 10             	sub    esp,0x10
9f00173b:	e8 82 31 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f001740:	05 1c 5b 00 00       	add    eax,0x5b1c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:157
    uint32_t retVal = 0;
9f001745:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:159
    //return do_syscall0(SYSCALL_FORK);
    asm("call sysEnter_Vector\n":"=a" (retVal): "a" (SYSCALL_FORK));
9f00174c:	b8 0d 00 00 00       	mov    eax,0xd
9f001751:	e8 fc ff ff ff       	call   9f001752 <fork+0x1d>
9f001756:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:160
    return retVal;
9f001759:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:161
}
9f00175c:	c9                   	leave  
9f00175d:	c3                   	ret    

9f00175e <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:164

VISIBLE int exec(char* path, int argc, char** argv)
{
9f00175e:	55                   	push   ebp
9f00175f:	89 e5                	mov    ebp,esp
9f001761:	83 ec 10             	sub    esp,0x10
9f001764:	e8 59 31 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f001769:	05 f3 5a 00 00       	add    eax,0x5af3
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:165
    int pid=0;
9f00176e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:166
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
9f001775:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001778:	8d 80 ae f7 ff ff    	lea    eax,[eax-0x852]
9f00177e:	50                   	push   eax
9f00177f:	68 00 00 00 02       	push   0x2000000
9f001784:	e8 4f fe ff ff       	call   9f0015d8 <printdI>
9f001789:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:167
    pid = do_syscall3(SYSCALL_EXEC, (uintptr_t)path, argc, (uintptr_t)argv);
9f00178c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00178f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001795:	51                   	push   ecx
9f001796:	52                   	push   edx
9f001797:	50                   	push   eax
9f001798:	6a 59                	push   0x59
9f00179a:	e8 e3 fa ff ff       	call   9f001282 <do_syscall3>
9f00179f:	83 c4 10             	add    esp,0x10
9f0017a2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:168
    return pid;
9f0017a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:169
}
9f0017a8:	c9                   	leave  
9f0017a9:	c3                   	ret    

9f0017aa <execb>:
execb():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:172

VISIBLE int execb(char* path)
{
9f0017aa:	55                   	push   ebp
9f0017ab:	89 e5                	mov    ebp,esp
9f0017ad:	53                   	push   ebx
9f0017ae:	83 ec 24             	sub    esp,0x24
9f0017b1:	e8 4a 31 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f0017b6:	81 c3 a6 5a 00 00    	add    ebx,0x5aa6
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:173
    int pid=0, argc=0;
9f0017bc:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
9f0017c3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:175
    char** argv;
    char* spacePtr=path, *lastSpacePtr=path;
9f0017ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0017cd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0017d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0017d3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:177
    char* program;
    program=mallocI(512);
9f0017d6:	83 ec 0c             	sub    esp,0xc
9f0017d9:	68 00 02 00 00       	push   0x200
9f0017de:	e8 12 0a 00 00       	call   9f0021f5 <mallocI>
9f0017e3:	83 c4 10             	add    esp,0x10
9f0017e6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:180
    do
    {
        spacePtr=strstrI(spacePtr," ");
9f0017e9:	83 ec 08             	sub    esp,0x8
9f0017ec:	8d 83 c1 f7 ff ff    	lea    eax,[ebx-0x83f]
9f0017f2:	50                   	push   eax
9f0017f3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0017f6:	e8 2b 23 00 00       	call   9f003b26 <strstrI>
9f0017fb:	83 c4 10             	add    esp,0x10
9f0017fe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:181
        if (argc==0)
9f001801:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001805:	75 44                	jne    9f00184b <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:183
        {
            if (spacePtr==0)
9f001807:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00180b:	75 22                	jne    9f00182f <execb+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:184
                strncpyI(program, path, strlenI(path));
9f00180d:	83 ec 0c             	sub    esp,0xc
9f001810:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001813:	e8 38 1b 00 00       	call   9f003350 <strlenI>
9f001818:	83 c4 10             	add    esp,0x10
9f00181b:	83 ec 04             	sub    esp,0x4
9f00181e:	50                   	push   eax
9f00181f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001822:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001825:	e8 9a 1c 00 00       	call   9f0034c4 <strncpyI>
9f00182a:	83 c4 10             	add    esp,0x10
9f00182d:	eb 1c                	jmp    9f00184b <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:186
            else
                strncpyI(program, path, spacePtr-path);
9f00182f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001835:	29 c2                	sub    edx,eax
9f001837:	89 d0                	mov    eax,edx
9f001839:	83 ec 04             	sub    esp,0x4
9f00183c:	50                   	push   eax
9f00183d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001840:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001843:	e8 7c 1c 00 00       	call   9f0034c4 <strncpyI>
9f001848:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:188
        }
        argc++;
9f00184b:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:190
            
    } while (spacePtr++);
9f00184f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001852:	8d 50 01             	lea    edx,[eax+0x1]
9f001855:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001858:	85 c0                	test   eax,eax
9f00185a:	75 8d                	jne    9f0017e9 <execb+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:192
    
    argv=mallocI((argc*50)+(argc*4));
9f00185c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00185f:	6b c0 36             	imul   eax,eax,0x36
9f001862:	83 ec 0c             	sub    esp,0xc
9f001865:	50                   	push   eax
9f001866:	e8 8a 09 00 00       	call   9f0021f5 <mallocI>
9f00186b:	83 c4 10             	add    esp,0x10
9f00186e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:193
    int argvPtr=4*argc;
9f001871:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001874:	c1 e0 02             	shl    eax,0x2
9f001877:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:194
    spacePtr=path;
9f00187a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00187d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:195
    for (int cnt=0;cnt<argc; cnt++)
9f001880:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
9f001887:	e9 c8 00 00 00       	jmp    9f001954 <execb+0x1aa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:197
    {
        argv[cnt]=(char*)argv+argvPtr;
9f00188c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00188f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001896:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001899:	01 d0                	add    eax,edx
9f00189b:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
9f00189e:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
9f0018a1:	01 ca                	add    edx,ecx
9f0018a3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:198
        spacePtr=strstrI(spacePtr," ");
9f0018a5:	83 ec 08             	sub    esp,0x8
9f0018a8:	8d 83 c1 f7 ff ff    	lea    eax,[ebx-0x83f]
9f0018ae:	50                   	push   eax
9f0018af:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0018b2:	e8 6f 22 00 00       	call   9f003b26 <strstrI>
9f0018b7:	83 c4 10             	add    esp,0x10
9f0018ba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:199
        if (spacePtr)
9f0018bd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0018c1:	74 2f                	je     9f0018f2 <execb+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:200
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f0018c3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0018c6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0018c9:	29 c2                	sub    edx,eax
9f0018cb:	89 d0                	mov    eax,edx
9f0018cd:	89 c1                	mov    ecx,eax
9f0018cf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0018d2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0018d9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0018dc:	01 d0                	add    eax,edx
9f0018de:	8b 00                	mov    eax,DWORD PTR [eax]
9f0018e0:	83 ec 04             	sub    esp,0x4
9f0018e3:	51                   	push   ecx
9f0018e4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0018e7:	50                   	push   eax
9f0018e8:	e8 d7 1b 00 00       	call   9f0034c4 <strncpyI>
9f0018ed:	83 c4 10             	add    esp,0x10
9f0018f0:	eb 31                	jmp    9f001923 <execb+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:202
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f0018f2:	83 ec 0c             	sub    esp,0xc
9f0018f5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0018f8:	e8 53 1a 00 00       	call   9f003350 <strlenI>
9f0018fd:	83 c4 10             	add    esp,0x10
9f001900:	89 c2                	mov    edx,eax
9f001902:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001905:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f00190c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f00190f:	01 c8                	add    eax,ecx
9f001911:	8b 00                	mov    eax,DWORD PTR [eax]
9f001913:	83 ec 04             	sub    esp,0x4
9f001916:	52                   	push   edx
9f001917:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f00191a:	50                   	push   eax
9f00191b:	e8 a4 1b 00 00       	call   9f0034c4 <strncpyI>
9f001920:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:203 (discriminator 2)
        strtrimI(argv[cnt]);
9f001923:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001926:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f00192d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001930:	01 d0                	add    eax,edx
9f001932:	8b 00                	mov    eax,DWORD PTR [eax]
9f001934:	83 ec 0c             	sub    esp,0xc
9f001937:	50                   	push   eax
9f001938:	e8 4f 1f 00 00       	call   9f00388c <strtrimI>
9f00193d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:204 (discriminator 2)
        lastSpacePtr=spacePtr++;
9f001940:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001943:	8d 50 01             	lea    edx,[eax+0x1]
9f001946:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001949:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:205 (discriminator 2)
        argvPtr+=50;
9f00194c:	83 45 e8 32          	add    DWORD PTR [ebp-0x18],0x32
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:195 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((argc*50)+(argc*4));
    int argvPtr=4*argc;
    spacePtr=path;
    for (int cnt=0;cnt<argc; cnt++)
9f001950:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:195 (discriminator 1)
9f001954:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001957:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f00195a:	0f 8c 2c ff ff ff    	jl     9f00188c <execb+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:207
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
        strtrimI(argv[cnt]);
        lastSpacePtr=spacePtr++;
        argvPtr+=50;
    }
    printdI(DEBUG_LIBC,"libc: execb for %s\n",path);;
9f001960:	83 ec 04             	sub    esp,0x4
9f001963:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001966:	8d 83 c3 f7 ff ff    	lea    eax,[ebx-0x83d]
9f00196c:	50                   	push   eax
9f00196d:	68 00 00 00 02       	push   0x2000000
9f001972:	e8 61 fc ff ff       	call   9f0015d8 <printdI>
9f001977:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:208
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)program, argc, (uintptr_t)argv);
9f00197a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
9f00197d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001980:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001983:	51                   	push   ecx
9f001984:	52                   	push   edx
9f001985:	50                   	push   eax
9f001986:	68 05 03 00 00       	push   0x305
9f00198b:	e8 f2 f8 ff ff       	call   9f001282 <do_syscall3>
9f001990:	83 c4 10             	add    esp,0x10
9f001993:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:212
/*    __asm__("push ds\nint 0x80\npop ds\n"
            :"=a" (pid)
            :"a" (0x59),"b" (program),"c" (argc),"d" (argv));*/
    return pid;
9f001996:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:215
    freeI(argv);
    freeI(program);
}
9f001999:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00199c:	c9                   	leave  
9f00199d:	c3                   	ret    

9f00199e <execa>:
execa():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:218

VISIBLE int execa(char* path, int argc, char** argv)
{
9f00199e:	55                   	push   ebp
9f00199f:	89 e5                	mov    ebp,esp
9f0019a1:	83 ec 10             	sub    esp,0x10
9f0019a4:	e8 19 2f 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0019a9:	05 b3 58 00 00       	add    eax,0x58b3
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:219
    int pid=0;
9f0019ae:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:220
    printdI(DEBUG_LIBC,"libc: execa for %s\n",path);;
9f0019b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0019b8:	8d 80 d7 f7 ff ff    	lea    eax,[eax-0x829]
9f0019be:	50                   	push   eax
9f0019bf:	68 00 00 00 02       	push   0x2000000
9f0019c4:	e8 0f fc ff ff       	call   9f0015d8 <printdI>
9f0019c9:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:221
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)path, argc, (uintptr_t)argv);
9f0019cc:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0019cf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0019d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0019d5:	51                   	push   ecx
9f0019d6:	52                   	push   edx
9f0019d7:	50                   	push   eax
9f0019d8:	68 05 03 00 00       	push   0x305
9f0019dd:	e8 a0 f8 ff ff       	call   9f001282 <do_syscall3>
9f0019e2:	83 c4 10             	add    esp,0x10
9f0019e5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:222
    return pid;
9f0019e8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:223
}
9f0019eb:	c9                   	leave  
9f0019ec:	c3                   	ret    

9f0019ed <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:226

VISIBLE int waitpid(uint32_t pid)
{
9f0019ed:	55                   	push   ebp
9f0019ee:	89 e5                	mov    ebp,esp
9f0019f0:	e8 cd 2e 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0019f5:	05 67 58 00 00       	add    eax,0x5867
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:227
    return do_syscall1(SYSCALL_WAITFORPID,pid);
9f0019fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0019fd:	6a 61                	push   0x61
9f0019ff:	e8 f8 f8 ff ff       	call   9f0012fc <do_syscall1>
9f001a04:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:228
}
9f001a07:	c9                   	leave  
9f001a08:	c3                   	ret    

9f001a09 <exit>:
exit():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:232


VISIBLE void exit (int status)
{
9f001a09:	55                   	push   ebp
9f001a0a:	89 e5                	mov    ebp,esp
9f001a0c:	e8 b1 2e 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f001a11:	05 4b 58 00 00       	add    eax,0x584b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:233
    do_syscall2(SYSCALL_ENDPROCESS, 0, status);
9f001a16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001a19:	50                   	push   eax
9f001a1a:	6a 00                	push   0x0
9f001a1c:	6a 01                	push   0x1
9f001a1e:	e8 9b f8 ff ff       	call   9f0012be <do_syscall2>
9f001a23:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:234
}
9f001a26:	90                   	nop
9f001a27:	c9                   	leave  
9f001a28:	c3                   	ret    

9f001a29 <setcwd>:
setcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:237

VISIBLE char* setcwd(char* buf, size_t size)
{
9f001a29:	55                   	push   ebp
9f001a2a:	89 e5                	mov    ebp,esp
9f001a2c:	e8 91 2e 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f001a31:	05 2b 58 00 00       	add    eax,0x582b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:238
    return (char*)do_syscall2(SYSCALL_SETCWD,(uint32_t)buf,size);
9f001a36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001a39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001a3c:	50                   	push   eax
9f001a3d:	6a 50                	push   0x50
9f001a3f:	e8 7a f8 ff ff       	call   9f0012be <do_syscall2>
9f001a44:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:239
}
9f001a47:	c9                   	leave  
9f001a48:	c3                   	ret    

9f001a49 <splitI>:
splitI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:242

size_t splitI(char *buffer, char *argv[], size_t argv_size)
{
9f001a49:	55                   	push   ebp
9f001a4a:	89 e5                	mov    ebp,esp
9f001a4c:	83 ec 20             	sub    esp,0x20
9f001a4f:	e8 6e 2e 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f001a54:	05 08 58 00 00       	add    eax,0x5808
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:245
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
9f001a59:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:246
    size_t argc = 0;
9f001a60:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:248

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f001a67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001a6a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
9f001a6d:	e9 d8 00 00 00       	jmp    9f001b4a <splitI+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:249
        c = (unsigned char) *p;
9f001a72:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001a75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001a78:	0f b6 c0             	movzx  eax,al
9f001a7b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:250
        switch (state) {
9f001a7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001a81:	83 f8 01             	cmp    eax,0x1
9f001a84:	74 7e                	je     9f001b04 <splitI+0xbb>
9f001a86:	83 f8 01             	cmp    eax,0x1
9f001a89:	72 0a                	jb     9f001a95 <splitI+0x4c>
9f001a8b:	83 f8 02             	cmp    eax,0x2
9f001a8e:	74 45                	je     9f001ad5 <splitI+0x8c>
9f001a90:	e9 b1 00 00 00       	jmp    9f001b46 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:252
        case DULL:
            if (ISSPACE(c)) {
9f001a95:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001a99:	0f 94 c0             	sete   al
9f001a9c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
9f001a9f:	0f b6 45 eb          	movzx  eax,BYTE PTR [ebp-0x15]
9f001aa3:	84 c0                	test   al,al
9f001aa5:	0f 85 94 00 00 00    	jne    9f001b3f <splitI+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:256
                continue;
            }

            if (c == '"') {
9f001aab:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001aaf:	75 15                	jne    9f001ac6 <splitI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:257
                state = IN_STRING;
9f001ab1:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:258
                start_of_word = p + 1; 
9f001ab8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001abb:	83 c0 01             	add    eax,0x1
9f001abe:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:259
                continue;
9f001ac1:	e9 80 00 00 00       	jmp    9f001b46 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:261
            }
            state = IN_WORD;
9f001ac6:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:262
            start_of_word = p;
9f001acd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001ad0:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:263
            continue;
9f001ad3:	eb 71                	jmp    9f001b46 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:266

        case IN_STRING:
            if (c == '"') {
9f001ad5:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001ad9:	75 67                	jne    9f001b42 <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:267
                *p = 0;
9f001adb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001ade:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:268
                argv[argc++] = start_of_word;
9f001ae1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001ae4:	8d 50 01             	lea    edx,[eax+0x1]
9f001ae7:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001aea:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001af1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001af4:	01 c2                	add    edx,eax
9f001af6:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001af9:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:269
                state = DULL;
9f001afb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:271
            }
            continue;
9f001b02:	eb 3e                	jmp    9f001b42 <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:274

        case IN_WORD:
            if (ISSPACE(c)) {
9f001b04:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001b08:	0f 94 c0             	sete   al
9f001b0b:	88 45 ea             	mov    BYTE PTR [ebp-0x16],al
9f001b0e:	0f b6 45 ea          	movzx  eax,BYTE PTR [ebp-0x16]
9f001b12:	84 c0                	test   al,al
9f001b14:	74 2f                	je     9f001b45 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:275
                *p = 0;
9f001b16:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001b19:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:276
                argv[argc++] = start_of_word;
9f001b1c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001b1f:	8d 50 01             	lea    edx,[eax+0x1]
9f001b22:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001b25:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001b2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001b2f:	01 c2                	add    edx,eax
9f001b31:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001b34:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:277
                state = DULL;
9f001b36:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:279
            }
            continue;
9f001b3d:	eb 06                	jmp    9f001b45 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:253
    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
        c = (unsigned char) *p;
        switch (state) {
        case DULL:
            if (ISSPACE(c)) {
                continue;
9f001b3f:	90                   	nop
9f001b40:	eb 04                	jmp    9f001b46 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:271
            if (c == '"') {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f001b42:	90                   	nop
9f001b43:	eb 01                	jmp    9f001b46 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:279
            if (ISSPACE(c)) {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f001b45:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:248 (discriminator 2)
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
    size_t argc = 0;

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f001b46:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:248 (discriminator 1)
9f001b4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001b4d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f001b50:	73 0e                	jae    9f001b60 <splitI+0x117>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:248 (discriminator 3)
9f001b52:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001b55:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001b58:	84 c0                	test   al,al
9f001b5a:	0f 85 12 ff ff ff    	jne    9f001a72 <splitI+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:283
            }
            continue;
        }
    }

    if (state != DULL && argc < argv_size)
9f001b60:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001b64:	74 22                	je     9f001b88 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:283 (discriminator 1)
9f001b66:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001b69:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f001b6c:	73 1a                	jae    9f001b88 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:284
        argv[argc++] = start_of_word;
9f001b6e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001b71:	8d 50 01             	lea    edx,[eax+0x1]
9f001b74:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001b77:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001b7e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001b81:	01 c2                	add    edx,eax
9f001b83:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001b86:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:286

    return argc;
9f001b88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:287
}
9f001b8b:	c9                   	leave  
9f001b8c:	c3                   	ret    

9f001b8d <split>:
split():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:290

VISIBLE size_t split(char *buffer, char *argv[], size_t argv_size)
{
9f001b8d:	55                   	push   ebp
9f001b8e:	89 e5                	mov    ebp,esp
9f001b90:	e8 2d 2d 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f001b95:	05 c7 56 00 00       	add    eax,0x56c7
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:291
    return splitI(buffer, argv, argv_size);
9f001b9a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001b9d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001ba0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001ba3:	e8 a1 fe ff ff       	call   9f001a49 <splitI>
9f001ba8:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:292
}
9f001bab:	c9                   	leave  
9f001bac:	c3                   	ret    

9f001bad <cmdlineToArgvI>:
cmdlineToArgvI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:295

char** cmdlineToArgvI(const char* cmdline, int *argc)
{
9f001bad:	55                   	push   ebp
9f001bae:	89 e5                	mov    ebp,esp
9f001bb0:	56                   	push   esi
9f001bb1:	53                   	push   ebx
9f001bb2:	81 ec 30 04 00 00    	sub    esp,0x430
9f001bb8:	e8 43 2d 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f001bbd:	81 c3 9f 56 00 00    	add    ebx,0x569f
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:298
    char** argv;
    char cmd[1024];
    char *spacePtr=cmd, *lastSpacePtr=cmd, *quotePtr=cmd;
9f001bc3:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001bc9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001bcc:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001bd2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001bd5:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001bdb:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:299
    char dblquote[2] = {'"',0};
9f001bde:	c6 85 d6 fb ff ff 22 	mov    BYTE PTR [ebp-0x42a],0x22
9f001be5:	c6 85 d7 fb ff ff 00 	mov    BYTE PTR [ebp-0x429],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:300
    *argc = 0;
9f001bec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001bef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:302
    
    strncpyI(cmd,cmdline,1024);
9f001bf5:	83 ec 04             	sub    esp,0x4
9f001bf8:	68 00 04 00 00       	push   0x400
9f001bfd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001c00:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001c06:	50                   	push   eax
9f001c07:	e8 b8 18 00 00       	call   9f0034c4 <strncpyI>
9f001c0c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:303
    strtrimI(cmd);
9f001c0f:	83 ec 0c             	sub    esp,0xc
9f001c12:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001c18:	50                   	push   eax
9f001c19:	e8 6e 1c 00 00       	call   9f00388c <strtrimI>
9f001c1e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:306
    do
    {
        quotePtr = strnstrI(spacePtr,dblquote,4000);        //Need to honor double quotes
9f001c21:	83 ec 04             	sub    esp,0x4
9f001c24:	68 a0 0f 00 00       	push   0xfa0
9f001c29:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001c2f:	50                   	push   eax
9f001c30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001c33:	e8 50 1e 00 00       	call   9f003a88 <strnstrI>
9f001c38:	83 c4 10             	add    esp,0x10
9f001c3b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:307
        spacePtr=strstrI(spacePtr," ");
9f001c3e:	83 ec 08             	sub    esp,0x8
9f001c41:	8d 83 c1 f7 ff ff    	lea    eax,[ebx-0x83f]
9f001c47:	50                   	push   eax
9f001c48:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001c4b:	e8 d6 1e 00 00       	call   9f003b26 <strstrI>
9f001c50:	83 c4 10             	add    esp,0x10
9f001c53:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:308
        if (quotePtr!=0 && (quotePtr <= spacePtr))                            //If a double quote shows up before a space ...
9f001c56:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f001c5a:	74 48                	je     9f001ca4 <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:308 (discriminator 1)
9f001c5c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001c5f:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001c62:	77 40                	ja     9f001ca4 <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:310
        {
            char *temp = spacePtr;
9f001c64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001c67:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:311
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);  //Look for the closing double quote
9f001c6a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001c6d:	8d 50 01             	lea    edx,[eax+0x1]
9f001c70:	83 ec 04             	sub    esp,0x4
9f001c73:	68 a0 0f 00 00       	push   0xfa0
9f001c78:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001c7e:	50                   	push   eax
9f001c7f:	52                   	push   edx
9f001c80:	e8 03 1e 00 00       	call   9f003a88 <strnstrI>
9f001c85:	83 c4 10             	add    esp,0x10
9f001c88:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:312
            if (spacePtr>=quotePtr+4000)
9f001c8b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001c8e:	05 a0 0f 00 00       	add    eax,0xfa0
9f001c93:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001c96:	77 08                	ja     9f001ca0 <cmdlineToArgvI+0xf3>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:313
                spacePtr = temp;                            //Didn't find it so resume normal processing (space bound)
9f001c98:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f001c9b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001c9e:	eb 04                	jmp    9f001ca4 <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:315
            else
                spacePtr += 1;                              //Skip the closing quote
9f001ca0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:317
        }
        *argc+=1;
9f001ca4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001ca7:	8b 00                	mov    eax,DWORD PTR [eax]
9f001ca9:	8d 50 01             	lea    edx,[eax+0x1]
9f001cac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001caf:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:318
        if (spacePtr!=0 && *spacePtr)
9f001cb1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001cb5:	74 0e                	je     9f001cc5 <cmdlineToArgvI+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:318 (discriminator 1)
9f001cb7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001cba:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001cbd:	84 c0                	test   al,al
9f001cbf:	74 04                	je     9f001cc5 <cmdlineToArgvI+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:319
            spacePtr++;
9f001cc1:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:321
    
    } while (spacePtr!=0 && *spacePtr);
9f001cc5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001cc9:	74 0e                	je     9f001cd9 <cmdlineToArgvI+0x12c>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:321 (discriminator 1)
9f001ccb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001cce:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001cd1:	84 c0                	test   al,al
9f001cd3:	0f 85 48 ff ff ff    	jne    9f001c21 <cmdlineToArgvI+0x74>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:323
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
9f001cd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001cdc:	8b 10                	mov    edx,DWORD PTR [eax]
9f001cde:	89 d0                	mov    eax,edx
9f001ce0:	c1 e0 08             	shl    eax,0x8
9f001ce3:	29 d0                	sub    eax,edx
9f001ce5:	89 c2                	mov    edx,eax
9f001ce7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001cea:	8b 00                	mov    eax,DWORD PTR [eax]
9f001cec:	c1 e0 02             	shl    eax,0x2
9f001cef:	01 d0                	add    eax,edx
9f001cf1:	83 ec 0c             	sub    esp,0xc
9f001cf4:	50                   	push   eax
9f001cf5:	e8 fb 04 00 00       	call   9f0021f5 <mallocI>
9f001cfa:	83 c4 10             	add    esp,0x10
9f001cfd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:324
    int argvPtr=4* *argc;
9f001d00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d03:	8b 00                	mov    eax,DWORD PTR [eax]
9f001d05:	c1 e0 02             	shl    eax,0x2
9f001d08:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:325
    spacePtr=cmd;
9f001d0b:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001d11:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:326
    for (int cnt=0;cnt<*argc; cnt++)
9f001d14:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f001d1b:	e9 72 01 00 00       	jmp    9f001e92 <cmdlineToArgvI+0x2e5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:328
    {
        argv[cnt]=(char*)argv+argvPtr;
9f001d20:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001d23:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001d2a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001d2d:	01 d0                	add    eax,edx
9f001d2f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f001d32:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f001d35:	01 ca                	add    edx,ecx
9f001d37:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:329
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
9f001d39:	83 ec 04             	sub    esp,0x4
9f001d3c:	68 a0 0f 00 00       	push   0xfa0
9f001d41:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001d47:	50                   	push   eax
9f001d48:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001d4b:	e8 38 1d 00 00       	call   9f003a88 <strnstrI>
9f001d50:	83 c4 10             	add    esp,0x10
9f001d53:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:330
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
9f001d56:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f001d5a:	0f 84 80 00 00 00    	je     9f001de0 <cmdlineToArgvI+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:330 (discriminator 1)
9f001d60:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001d63:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001d66:	77 78                	ja     9f001de0 <cmdlineToArgvI+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:332
        {
            char *temp = spacePtr;
9f001d68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001d6b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:333
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
9f001d6e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001d71:	8d 50 01             	lea    edx,[eax+0x1]
9f001d74:	83 ec 04             	sub    esp,0x4
9f001d77:	68 a0 0f 00 00       	push   0xfa0
9f001d7c:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001d82:	50                   	push   eax
9f001d83:	52                   	push   edx
9f001d84:	e8 ff 1c 00 00       	call   9f003a88 <strnstrI>
9f001d89:	83 c4 10             	add    esp,0x10
9f001d8c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:334
            if (spacePtr>=quotePtr+4000)
9f001d8f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001d92:	05 a0 0f 00 00       	add    eax,0xfa0
9f001d97:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001d9a:	77 0b                	ja     9f001da7 <cmdlineToArgvI+0x1fa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:335
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
9f001d9c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001d9f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:331
    for (int cnt=0;cnt<*argc; cnt++)
    {
        argv[cnt]=(char*)argv+argvPtr;
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
        {
9f001da2:	e9 d4 00 00 00       	jmp    9f001e7b <cmdlineToArgvI+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:338
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
            if (spacePtr>=quotePtr+4000)
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
            else
            {
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
9f001da7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001daa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001dad:	29 c2                	sub    edx,eax
9f001daf:	89 d0                	mov    eax,edx
9f001db1:	83 e8 02             	sub    eax,0x2
9f001db4:	89 c6                	mov    esi,eax
9f001db6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001db9:	8d 50 01             	lea    edx,[eax+0x1]
9f001dbc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001dbf:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f001dc6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001dc9:	01 c8                	add    eax,ecx
9f001dcb:	8b 00                	mov    eax,DWORD PTR [eax]
9f001dcd:	83 ec 04             	sub    esp,0x4
9f001dd0:	56                   	push   esi
9f001dd1:	52                   	push   edx
9f001dd2:	50                   	push   eax
9f001dd3:	e8 ec 16 00 00       	call   9f0034c4 <strncpyI>
9f001dd8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:331
    for (int cnt=0;cnt<*argc; cnt++)
    {
        argv[cnt]=(char*)argv+argvPtr;
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
        {
9f001ddb:	e9 9b 00 00 00       	jmp    9f001e7b <cmdlineToArgvI+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:343
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
            }
        }
        else
        {
            spacePtr=strstrI(spacePtr," ");
9f001de0:	83 ec 08             	sub    esp,0x8
9f001de3:	8d 83 c1 f7 ff ff    	lea    eax,[ebx-0x83f]
9f001de9:	50                   	push   eax
9f001dea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001ded:	e8 34 1d 00 00       	call   9f003b26 <strstrI>
9f001df2:	83 c4 10             	add    esp,0x10
9f001df5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:344
            if (spacePtr)
9f001df8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001dfc:	74 2f                	je     9f001e2d <cmdlineToArgvI+0x280>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:345
                strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f001dfe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001e01:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001e04:	29 c2                	sub    edx,eax
9f001e06:	89 d0                	mov    eax,edx
9f001e08:	89 c1                	mov    ecx,eax
9f001e0a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001e0d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001e17:	01 d0                	add    eax,edx
9f001e19:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e1b:	83 ec 04             	sub    esp,0x4
9f001e1e:	51                   	push   ecx
9f001e1f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001e22:	50                   	push   eax
9f001e23:	e8 9c 16 00 00       	call   9f0034c4 <strncpyI>
9f001e28:	83 c4 10             	add    esp,0x10
9f001e2b:	eb 31                	jmp    9f001e5e <cmdlineToArgvI+0x2b1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:347
            else
                strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f001e2d:	83 ec 0c             	sub    esp,0xc
9f001e30:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001e33:	e8 18 15 00 00       	call   9f003350 <strlenI>
9f001e38:	83 c4 10             	add    esp,0x10
9f001e3b:	89 c2                	mov    edx,eax
9f001e3d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001e40:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f001e47:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001e4a:	01 c8                	add    eax,ecx
9f001e4c:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e4e:	83 ec 04             	sub    esp,0x4
9f001e51:	52                   	push   edx
9f001e52:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001e55:	50                   	push   eax
9f001e56:	e8 69 16 00 00       	call   9f0034c4 <strncpyI>
9f001e5b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:348
            strtrimI(argv[cnt]);
9f001e5e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001e61:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001e68:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001e6b:	01 d0                	add    eax,edx
9f001e6d:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e6f:	83 ec 0c             	sub    esp,0xc
9f001e72:	50                   	push   eax
9f001e73:	e8 14 1a 00 00       	call   9f00388c <strtrimI>
9f001e78:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:350 (discriminator 2)
        }
        lastSpacePtr=spacePtr++;
9f001e7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001e7e:	8d 50 01             	lea    edx,[eax+0x1]
9f001e81:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f001e84:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:351 (discriminator 2)
        argvPtr+=MAXPARAMLEN;
9f001e87:	81 45 ec ff 00 00 00 	add    DWORD PTR [ebp-0x14],0xff
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:326 (discriminator 2)
    } while (spacePtr!=0 && *spacePtr);
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
    int argvPtr=4* *argc;
    spacePtr=cmd;
    for (int cnt=0;cnt<*argc; cnt++)
9f001e8e:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:326 (discriminator 1)
9f001e92:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e95:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e97:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f001e9a:	0f 8f 80 fe ff ff    	jg     9f001d20 <cmdlineToArgvI+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:353
            strtrimI(argv[cnt]);
        }
        lastSpacePtr=spacePtr++;
        argvPtr+=MAXPARAMLEN;
    }
    return argv;
9f001ea0:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:354
}
9f001ea3:	8d 65 f8             	lea    esp,[ebp-0x8]
9f001ea6:	5b                   	pop    ebx
9f001ea7:	5e                   	pop    esi
9f001ea8:	5d                   	pop    ebp
9f001ea9:	c3                   	ret    

9f001eaa <cmdlineToArgv>:
cmdlineToArgv():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:357

VISIBLE char** cmdlineToArgv(char* cmdline, int *argc)
{
9f001eaa:	55                   	push   ebp
9f001eab:	89 e5                	mov    ebp,esp
9f001ead:	83 ec 08             	sub    esp,0x8
9f001eb0:	e8 0d 2a 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f001eb5:	05 a7 53 00 00       	add    eax,0x53a7
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:358
    return cmdlineToArgvI(cmdline, argc);
9f001eba:	83 ec 08             	sub    esp,0x8
9f001ebd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001ec0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001ec3:	e8 e5 fc ff ff       	call   9f001bad <cmdlineToArgvI>
9f001ec8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:359
}
9f001ecb:	c9                   	leave  
9f001ecc:	c3                   	ret    

9f001ecd <setSTD>:
setSTD():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:362

VISIBLE int setSTD(int std, uint32_t filed)
{
9f001ecd:	55                   	push   ebp
9f001ece:	89 e5                	mov    ebp,esp
9f001ed0:	e8 ed 29 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f001ed5:	05 87 53 00 00       	add    eax,0x5387
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:363
    return do_syscall2(SYSCALL_SETSTD, std, filed);
9f001eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001edd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001ee0:	50                   	push   eax
9f001ee1:	68 06 03 00 00       	push   0x306
9f001ee6:	e8 d3 f3 ff ff       	call   9f0012be <do_syscall2>
9f001eeb:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:364
}
9f001eee:	c9                   	leave  
9f001eef:	c3                   	ret    

9f001ef0 <takeADump>:
takeADump():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:367

VISIBLE void takeADump()
{
9f001ef0:	55                   	push   ebp
9f001ef1:	89 e5                	mov    ebp,esp
9f001ef3:	e8 ca 29 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f001ef8:	05 64 53 00 00       	add    eax,0x5364
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:368
    return do_syscall0(SYSCALL_TAKEADUMP);
9f001efd:	68 00 09 00 00       	push   0x900
9f001f02:	e8 35 f4 ff ff       	call   9f00133c <do_syscall0>
9f001f07:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:369
9f001f0a:	c9                   	leave  
9f001f0b:	c3                   	ret    

9f001f0c <mmap>:
mmap():
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:14
//#include "../../../kproj/chrisOSKernel/include/syscalls.h"

syscall_mmap_t params;

VISIBLE void* mmap (void *addr,size_t len,int prot,int flags,int fd,off_t offset)
{
9f001f0c:	55                   	push   ebp
9f001f0d:	89 e5                	mov    ebp,esp
9f001f0f:	53                   	push   ebx
9f001f10:	83 ec 04             	sub    esp,0x4
9f001f13:	e8 aa 29 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f001f18:	05 44 53 00 00       	add    eax,0x5344
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:16
    
    params.addr = addr;
9f001f1d:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f23:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f001f26:	89 0a                	mov    DWORD PTR [edx],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:17
    params.len = len;
9f001f28:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f001f2b:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f31:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:18
    params.prot = prot;
9f001f34:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f3a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f001f3d:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:19
    params.flags = flags;
9f001f40:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f46:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
9f001f49:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:20
    params.fd = fd;
9f001f4c:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f52:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
9f001f55:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:21
    params.offset = offset;
9f001f58:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f5e:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
9f001f61:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:23
    
    return (void*)do_syscall1(SYSCALL_MMAP, (uint32_t)&params);
9f001f64:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f6a:	83 ec 08             	sub    esp,0x8
9f001f6d:	52                   	push   edx
9f001f6e:	6a 10                	push   0x10
9f001f70:	89 c3                	mov    ebx,eax
9f001f72:	e8 85 f3 ff ff       	call   9f0012fc <do_syscall1>
9f001f77:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:24
}
9f001f7a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001f7d:	c9                   	leave  
9f001f7e:	c3                   	ret    
9f001f7f:	90                   	nop

9f001f80 <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:16
#define HEAP_GET_NEXT(s,t) {t=(uint8_t*)s+s->len+sizeof(heaprec_t);}
#define HEAP_GET_NEXTr(s) ({s=(uint8_t*)s+s->len+sizeof(heaprec_t);s;})
#define HEAP_CURR(s,t) {t=((heaprec_t*)s)-1;}
#define HEAP_PTR_MEM_ADDR(s) ({void *ptr=((void*)heapCurr)+sizeof(heaprec_t);ptr;})
void initmalloc()
{
9f001f80:	55                   	push   ebp
9f001f81:	89 e5                	mov    ebp,esp
9f001f83:	53                   	push   ebx
9f001f84:	83 ec 04             	sub    esp,0x4
9f001f87:	e8 74 29 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f001f8c:	81 c3 d0 52 00 00    	add    ebx,0x52d0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:17
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
9f001f92:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f001f98:	8b 00                	mov    eax,DWORD PTR [eax]
9f001f9a:	50                   	push   eax
9f001f9b:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f001fa1:	50                   	push   eax
9f001fa2:	8d 83 ec f7 ff ff    	lea    eax,[ebx-0x814]
9f001fa8:	50                   	push   eax
9f001fa9:	68 00 00 00 01       	push   0x1000000
9f001fae:	e8 25 f6 ff ff       	call   9f0015d8 <printdI>
9f001fb3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:18
    heapBase=0;
9f001fb6:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f001fbc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:19
    heapCurr=0;
9f001fc2:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f001fc8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:20
    heapEnd=0;
9f001fce:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f001fd4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:21
    libcTZ=-5;
9f001fda:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f001fe0:	c7 00 fb ff ff ff    	mov    DWORD PTR [eax],0xfffffffb
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:23

}
9f001fe6:	90                   	nop
9f001fe7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001fea:	c9                   	leave  
9f001feb:	c3                   	ret    

9f001fec <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:26

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
9f001fec:	55                   	push   ebp
9f001fed:	89 e5                	mov    ebp,esp
9f001fef:	83 ec 10             	sub    esp,0x10
9f001ff2:	e8 cb 28 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f001ff7:	05 65 52 00 00       	add    eax,0x5265
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:29
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
9f001ffc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001fff:	83 c2 30             	add    edx,0x30
9f002002:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:31
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
9f002005:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f00200b:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f00200d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002010:	01 d1                	add    ecx,edx
9f002012:	8b 90 dc ff ff ff    	mov    edx,DWORD PTR [eax-0x24]
9f002018:	8b 12                	mov    edx,DWORD PTR [edx]
9f00201a:	39 d1                	cmp    ecx,edx
9f00201c:	76 4e                	jbe    9f00206c <newHeapRequiredToFulfillRequest+0x80>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:34
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
9f00201e:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f002024:	8b 12                	mov    edx,DWORD PTR [edx]
9f002026:	8b 80 dc ff ff ff    	mov    eax,DWORD PTR [eax-0x24]
9f00202c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00202e:	29 c2                	sub    edx,eax
9f002030:	89 d0                	mov    eax,edx
9f002032:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:35
        if (newSize== 0 || newSize%PAGE_SIZE)
9f002035:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
9f002039:	74 0c                	je     9f002047 <newHeapRequiredToFulfillRequest+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:35 (discriminator 1)
9f00203b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00203e:	25 ff 0f 00 00       	and    eax,0xfff
9f002043:	85 c0                	test   eax,eax
9f002045:	74 10                	je     9f002057 <newHeapRequiredToFulfillRequest+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:37
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
9f002047:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00204a:	25 00 f0 ff ff       	and    eax,0xfffff000
9f00204f:	05 00 10 00 00       	add    eax,0x1000
9f002054:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:40
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < ALLOC_REQUEST_SIZE)
9f002057:	81 7d fc ff 0f 00 00 	cmp    DWORD PTR [ebp-0x4],0xfff
9f00205e:	77 07                	ja     9f002067 <newHeapRequiredToFulfillRequest+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:41
            return ALLOC_REQUEST_SIZE;
9f002060:	b8 00 10 00 00       	mov    eax,0x1000
9f002065:	eb 0a                	jmp    9f002071 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:43
        else
            return newSize;
9f002067:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00206a:	eb 05                	jmp    9f002071 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:46
    }
    else
        return 0;
9f00206c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:47
}
9f002071:	c9                   	leave  
9f002072:	c3                   	ret    

9f002073 <freeI>:
freeI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:50

void freeI(void* fpointer)
{
9f002073:	55                   	push   ebp
9f002074:	89 e5                	mov    ebp,esp
9f002076:	53                   	push   ebx
9f002077:	83 ec 14             	sub    esp,0x14
9f00207a:	e8 43 28 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f00207f:	05 dd 51 00 00       	add    eax,0x51dd
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:53
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if ((uint32_t)fpointer < heapBase || (uint32_t)fpointer > heapCurr)
9f002084:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f002087:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f00208d:	8b 12                	mov    edx,DWORD PTR [edx]
9f00208f:	39 d1                	cmp    ecx,edx
9f002091:	72 4a                	jb     9f0020dd <freeI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:53 (discriminator 1)
9f002093:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f002096:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f00209c:	8b 12                	mov    edx,DWORD PTR [edx]
9f00209e:	39 d1                	cmp    ecx,edx
9f0020a0:	77 3b                	ja     9f0020dd <freeI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:56
        return;
    
    if (fpointer==NULL)
9f0020a2:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0020a6:	74 38                	je     9f0020e0 <freeI+0x6d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:58
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
9f0020a8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0020ab:	83 ea 18             	sub    edx,0x18
9f0020ae:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:61
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
9f0020b1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0020b4:	8b 12                	mov    edx,DWORD PTR [edx]
9f0020b6:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f0020bc:	74 16                	je     9f0020d4 <freeI+0x61>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:63
    {
        printI("malloc: marker not found error!!!\n");
9f0020be:	83 ec 0c             	sub    esp,0xc
9f0020c1:	8d 90 10 f8 ff ff    	lea    edx,[eax-0x7f0]
9f0020c7:	52                   	push   edx
9f0020c8:	89 c3                	mov    ebx,eax
9f0020ca:	e8 9e f4 ff ff       	call   9f00156d <printI>
9f0020cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:64
        return; //Return silently ... for now
9f0020d2:	eb 0d                	jmp    9f0020e1 <freeI+0x6e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:66
    }
    mp->inUse=false;
9f0020d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0020d7:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
9f0020db:	eb 04                	jmp    9f0020e1 <freeI+0x6e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:54
void freeI(void* fpointer)
{
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if ((uint32_t)fpointer < heapBase || (uint32_t)fpointer > heapCurr)
        return;
9f0020dd:	90                   	nop
9f0020de:	eb 01                	jmp    9f0020e1 <freeI+0x6e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:57
    
    if (fpointer==NULL)
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
9f0020e0:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:68
        printI("malloc: marker not found error!!!\n");
        return; //Return silently ... for now
    }
    mp->inUse=false;
    
}
9f0020e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0020e4:	c9                   	leave  
9f0020e5:	c3                   	ret    

9f0020e6 <mallocFindAvailableMemory>:
mallocFindAvailableMemory():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:71

heaprec_t *mallocFindAvailableMemory(size_t size)
{
9f0020e6:	55                   	push   ebp
9f0020e7:	89 e5                	mov    ebp,esp
9f0020e9:	83 ec 10             	sub    esp,0x10
9f0020ec:	e8 d1 27 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0020f1:	05 6b 51 00 00       	add    eax,0x516b
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:72
    heaprec_t* heapPtr=(heaprec_t*)heapBase;
9f0020f6:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f0020fc:	8b 12                	mov    edx,DWORD PTR [edx]
9f0020fe:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:75
    do
    {
        if (!heapPtr->inUse && heapPtr->len>=size && heapPtr->marker==ALLOC_MARKER_VALUE)
9f002101:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002104:	0f b6 52 08          	movzx  edx,BYTE PTR [edx+0x8]
9f002108:	83 f2 01             	xor    edx,0x1
9f00210b:	84 d2                	test   dl,dl
9f00210d:	74 1d                	je     9f00212c <mallocFindAvailableMemory+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:75 (discriminator 1)
9f00210f:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002112:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
9f002115:	3b 55 08             	cmp    edx,DWORD PTR [ebp+0x8]
9f002118:	72 12                	jb     9f00212c <mallocFindAvailableMemory+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:75 (discriminator 2)
9f00211a:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00211d:	8b 12                	mov    edx,DWORD PTR [edx]
9f00211f:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f002125:	75 05                	jne    9f00212c <mallocFindAvailableMemory+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:76
            return heapPtr;
9f002127:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00212a:	eb 3c                	jmp    9f002168 <mallocFindAvailableMemory+0x82>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:77
        if (heapPtr->next)
9f00212c:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00212f:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
9f002132:	85 d2                	test   edx,edx
9f002134:	74 09                	je     9f00213f <mallocFindAvailableMemory+0x59>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:78
            heapPtr=heapPtr->next;
9f002136:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002139:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
9f00213c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:81
        
    }
    while(heapPtr<(heaprec_t*)heapCurr && heapPtr->next && heapPtr->marker==ALLOC_MARKER_VALUE);
9f00213f:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f002145:	8b 12                	mov    edx,DWORD PTR [edx]
9f002147:	39 55 fc             	cmp    DWORD PTR [ebp-0x4],edx
9f00214a:	73 17                	jae    9f002163 <mallocFindAvailableMemory+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:81 (discriminator 1)
9f00214c:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00214f:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
9f002152:	85 d2                	test   edx,edx
9f002154:	74 0d                	je     9f002163 <mallocFindAvailableMemory+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:81 (discriminator 2)
9f002156:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002159:	8b 12                	mov    edx,DWORD PTR [edx]
9f00215b:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f002161:	74 9e                	je     9f002101 <mallocFindAvailableMemory+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:83
    //while (heapPtr->marker==ALLOC_MARKER_VALUE);
    return NULL;
9f002163:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:84
}
9f002168:	c9                   	leave  
9f002169:	c3                   	ret    

9f00216a <mallocSanityCheck>:
mallocSanityCheck():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:87

void mallocSanityCheck(heaprec_t *heaprec)
{
9f00216a:	55                   	push   ebp
9f00216b:	89 e5                	mov    ebp,esp
9f00216d:	53                   	push   ebx
9f00216e:	83 ec 14             	sub    esp,0x14
9f002171:	e8 4c 27 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f002176:	05 e6 50 00 00       	add    eax,0x50e6
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
#ifdef ALLOC_MALLOC_SANITY_CHECK
    heaprec_t *heapPtr=heaprec;
9f00217b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00217e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:90
    while (heapPtr>=(heaprec_t*)heapBase && heapPtr->prev!=heapPtr)
9f002181:	eb 54                	jmp    9f0021d7 <mallocSanityCheck+0x6d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:92
    {
        if (heapBase<(uintptr_t)heapPtr-8)
9f002183:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002186:	8d 4a f8             	lea    ecx,[edx-0x8]
9f002189:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f00218f:	8b 12                	mov    edx,DWORD PTR [edx]
9f002191:	39 d1                	cmp    ecx,edx
9f002193:	76 16                	jbe    9f0021ab <mallocSanityCheck+0x41>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:94
        {
                printfI("\n**************************malloc base error!!!**************************\n");
9f002195:	83 ec 0c             	sub    esp,0xc
9f002198:	8d 90 34 f8 ff ff    	lea    edx,[eax-0x7cc]
9f00219e:	52                   	push   edx
9f00219f:	89 c3                	mov    ebx,eax
9f0021a1:	e8 73 f3 ff ff       	call   9f001519 <printfI>
9f0021a6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:96 (discriminator 1)
    SanityLoop2:
                goto SanityLoop2;
9f0021a9:	eb fe                	jmp    9f0021a9 <mallocSanityCheck+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98
        }
        if (heapPtr->marker!=ALLOC_MARKER_VALUE)
9f0021ab:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0021ae:	8b 12                	mov    edx,DWORD PTR [edx]
9f0021b0:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f0021b6:	74 16                	je     9f0021ce <mallocSanityCheck+0x64>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:100
        {
            printfI("\n**************************malloc pointer error!!!**************************\n");
9f0021b8:	83 ec 0c             	sub    esp,0xc
9f0021bb:	8d 90 80 f8 ff ff    	lea    edx,[eax-0x780]
9f0021c1:	52                   	push   edx
9f0021c2:	89 c3                	mov    ebx,eax
9f0021c4:	e8 50 f3 ff ff       	call   9f001519 <printfI>
9f0021c9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:102 (discriminator 2)
SanityLoop:
            goto SanityLoop;
9f0021cc:	eb fe                	jmp    9f0021cc <mallocSanityCheck+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:104
        }
        heapPtr=heapPtr->prev;
9f0021ce:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0021d1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
9f0021d4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:90

void mallocSanityCheck(heaprec_t *heaprec)
{
#ifdef ALLOC_MALLOC_SANITY_CHECK
    heaprec_t *heapPtr=heaprec;
    while (heapPtr>=(heaprec_t*)heapBase && heapPtr->prev!=heapPtr)
9f0021d7:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f0021dd:	8b 12                	mov    edx,DWORD PTR [edx]
9f0021df:	39 55 f4             	cmp    DWORD PTR [ebp-0xc],edx
9f0021e2:	72 0b                	jb     9f0021ef <mallocSanityCheck+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:90 (discriminator 1)
9f0021e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0021e7:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
9f0021ea:	3b 55 f4             	cmp    edx,DWORD PTR [ebp-0xc]
9f0021ed:	75 94                	jne    9f002183 <mallocSanityCheck+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:107
            goto SanityLoop;
        }
        heapPtr=heapPtr->prev;
    }
#endif
}
9f0021ef:	90                   	nop
9f0021f0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0021f3:	c9                   	leave  
9f0021f4:	c3                   	ret    

9f0021f5 <mallocI>:
mallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:110

void*  mallocI(size_t size)
{
9f0021f5:	55                   	push   ebp
9f0021f6:	89 e5                	mov    ebp,esp
9f0021f8:	53                   	push   ebx
9f0021f9:	83 ec 24             	sub    esp,0x24
9f0021fc:	e8 ff 26 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f002201:	81 c3 5b 50 00 00    	add    ebx,0x505b
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:115
    void* retVal;

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr=NULL;
9f002207:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:116
    size_t requestSize=size;
9f00220e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002211:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:119
    static heaprec_t *lastHRCreated=NULL;

    if (size<ALLOC_MIN_MALLOC_SIZE)
9f002214:	83 7d 08 17          	cmp    DWORD PTR [ebp+0x8],0x17
9f002218:	77 07                	ja     9f002221 <mallocI+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:120
        requestSize=ALLOC_MIN_MALLOC_SIZE;
9f00221a:	c7 45 f4 18 00 00 00 	mov    DWORD PTR [ebp-0xc],0x18
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:121
    printdI(DEBUG_MALLOC,"libc_malloc: Request for 0x%08x bytes\n",requestSize);
9f002221:	83 ec 04             	sub    esp,0x4
9f002224:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002227:	8d 83 d0 f8 ff ff    	lea    eax,[ebx-0x730]
9f00222d:	50                   	push   eax
9f00222e:	68 00 00 00 01       	push   0x1000000
9f002233:	e8 a0 f3 ff ff       	call   9f0015d8 <printdI>
9f002238:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:134
            printdI(DEBUG_MALLOC,"libc_malloc: Reusing heaprec=0x%08x, address=0x%08x (uses=%u)",heapPtr,HEAP_PTR_MEM_ADDR(heapPtr),heapPtr->uses);
            return ((void*)heapPtr)+sizeof(heaprec_t);
        }
    }
*/    
    needed = newHeapRequiredToFulfillRequest(requestSize);
9f00223b:	83 ec 0c             	sub    esp,0xc
9f00223e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002241:	e8 a6 fd ff ff       	call   9f001fec <newHeapRequiredToFulfillRequest>
9f002246:	83 c4 10             	add    esp,0x10
9f002249:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:135
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
9f00224c:	83 ec 04             	sub    esp,0x4
9f00224f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002252:	8d 83 f7 f8 ff ff    	lea    eax,[ebx-0x709]
9f002258:	50                   	push   eax
9f002259:	68 00 00 00 01       	push   0x1000000
9f00225e:	e8 75 f3 ff ff       	call   9f0015d8 <printdI>
9f002263:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:136
    if (needed!=0)      //New heap required
9f002266:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f00226a:	0f 84 e5 00 00 00    	je     9f002355 <mallocI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:138
    {
        if (heapCurr>0)
9f002270:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002276:	8b 00                	mov    eax,DWORD PTR [eax]
9f002278:	85 c0                	test   eax,eax
9f00227a:	74 17                	je     9f002293 <mallocI+0x9e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:139
            mallocSanityCheck(((heaprec_t*)heapCurr)->prev);        
9f00227c:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002282:	8b 00                	mov    eax,DWORD PTR [eax]
9f002284:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f002287:	83 ec 0c             	sub    esp,0xc
9f00228a:	50                   	push   eax
9f00228b:	e8 da fe ff ff       	call   9f00216a <mallocSanityCheck>
9f002290:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:140
        allocatedPtr = do_syscall1(SYSCALL_ALLOCHEAP, needed);
9f002293:	83 ec 08             	sub    esp,0x8
9f002296:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002299:	68 65 01 00 00       	push   0x165
9f00229e:	e8 59 f0 ff ff       	call   9f0012fc <do_syscall1>
9f0022a3:	83 c4 10             	add    esp,0x10
9f0022a6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:142
        //This is needed to keep in sync with what the kernel thinks
        memset((char*)allocatedPtr,0,needed);
9f0022a9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0022ac:	83 ec 04             	sub    esp,0x4
9f0022af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0022b2:	6a 00                	push   0x0
9f0022b4:	50                   	push   eax
9f0022b5:	e8 26 26 00 00       	call   9f0048e0 <__x86.get_pc_thunk.ax+0x1e>
9f0022ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:143
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
9f0022bd:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f0022c3:	8b 00                	mov    eax,DWORD PTR [eax]
9f0022c5:	83 ec 04             	sub    esp,0x4
9f0022c8:	50                   	push   eax
9f0022c9:	8d 83 13 f9 ff ff    	lea    eax,[ebx-0x6ed]
9f0022cf:	50                   	push   eax
9f0022d0:	68 00 00 00 01       	push   0x1000000
9f0022d5:	e8 fe f2 ff ff       	call   9f0015d8 <printdI>
9f0022da:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:144
        heapEnd=allocatedPtr+needed;
9f0022dd:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f0022e0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0022e3:	01 c2                	add    edx,eax
9f0022e5:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f0022eb:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:145
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
9f0022ed:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f0022f3:	8b 00                	mov    eax,DWORD PTR [eax]
9f0022f5:	83 ec 0c             	sub    esp,0xc
9f0022f8:	50                   	push   eax
9f0022f9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f0022fc:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0022ff:	8d 83 30 f9 ff ff    	lea    eax,[ebx-0x6d0]
9f002305:	50                   	push   eax
9f002306:	68 00 00 00 01       	push   0x1000000
9f00230b:	e8 c8 f2 ff ff       	call   9f0015d8 <printdI>
9f002310:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:146
        if (heapBase==0)    //Hasn't been initialized yet!
9f002313:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f002319:	8b 00                	mov    eax,DWORD PTR [eax]
9f00231b:	85 c0                	test   eax,eax
9f00231d:	75 36                	jne    9f002355 <mallocI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:148
        {
            heapCurr=allocatedPtr;
9f00231f:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002325:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f002328:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:149
            heapBase=allocatedPtr;
9f00232a:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f002330:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f002333:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:150
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
9f002335:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f00233b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00233d:	83 ec 04             	sub    esp,0x4
9f002340:	50                   	push   eax
9f002341:	8d 83 70 f9 ff ff    	lea    eax,[ebx-0x690]
9f002347:	50                   	push   eax
9f002348:	68 00 00 00 01       	push   0x1000000
9f00234d:	e8 86 f2 ff ff       	call   9f0015d8 <printdI>
9f002352:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:153
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
9f002355:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f00235b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00235d:	83 ec 04             	sub    esp,0x4
9f002360:	50                   	push   eax
9f002361:	8d 83 ac f9 ff ff    	lea    eax,[ebx-0x654]
9f002367:	50                   	push   eax
9f002368:	68 00 00 00 01       	push   0x1000000
9f00236d:	e8 66 f2 ff ff       	call   9f0015d8 <printdI>
9f002372:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:154
    heapPtr = (heaprec_t*)heapCurr;
9f002375:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f00237b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00237d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:155
    heapPtr->marker=ALLOC_MARKER_VALUE;
9f002380:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002383:	c7 00 1f 2f 3f 4f    	mov    DWORD PTR [eax],0x4f3f2f1f
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:156
    heapPtr->len=requestSize;
9f002389:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00238c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00238f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:157
    heapPtr->inUse=true;
9f002392:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002395:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:158
    heapPtr->uses++;
9f002399:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00239c:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
9f0023a0:	8d 50 01             	lea    edx,[eax+0x1]
9f0023a3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0023a6:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:159
    if (lastHRCreated!=NULL)
9f0023aa:	8b 83 78 00 00 00    	mov    eax,DWORD PTR [ebx+0x78]
9f0023b0:	85 c0                	test   eax,eax
9f0023b2:	74 18                	je     9f0023cc <mallocI+0x1d7>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:161
    {
        heapPtr->prev=lastHRCreated;
9f0023b4:	8b 93 78 00 00 00    	mov    edx,DWORD PTR [ebx+0x78]
9f0023ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0023bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:162
        heapPtr->prev->next=heapPtr;
9f0023c0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0023c3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0023c6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0023c9:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:165
    }

    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08x\n",heapCurr);
9f0023cc:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0023d2:	8b 00                	mov    eax,DWORD PTR [eax]
9f0023d4:	83 ec 04             	sub    esp,0x4
9f0023d7:	50                   	push   eax
9f0023d8:	8d 83 d4 f9 ff ff    	lea    eax,[ebx-0x62c]
9f0023de:	50                   	push   eax
9f0023df:	68 00 00 00 01       	push   0x1000000
9f0023e4:	e8 ef f1 ff ff       	call   9f0015d8 <printdI>
9f0023e9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:166
    retVal=((void*)(heapPtr)+sizeof(heaprec_t));
9f0023ec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0023ef:	83 c0 18             	add    eax,0x18
9f0023f2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:167
    heapCurr+=requestSize+(sizeof(heaprec_t));
9f0023f5:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0023fb:	8b 10                	mov    edx,DWORD PTR [eax]
9f0023fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002400:	01 d0                	add    eax,edx
9f002402:	8d 50 18             	lea    edx,[eax+0x18]
9f002405:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f00240b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:168
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
9f00240d:	83 ec 04             	sub    esp,0x4
9f002410:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f002413:	8d 83 f2 f9 ff ff    	lea    eax,[ebx-0x60e]
9f002419:	50                   	push   eax
9f00241a:	68 00 00 00 01       	push   0x1000000
9f00241f:	e8 b4 f1 ff ff       	call   9f0015d8 <printdI>
9f002424:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:169
    lastHRCreated=heapPtr;
9f002427:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00242a:	89 83 78 00 00 00    	mov    DWORD PTR [ebx+0x78],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:170
    return retVal;
9f002430:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:171
}
9f002433:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002436:	c9                   	leave  
9f002437:	c3                   	ret    

9f002438 <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:174

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
9f002438:	55                   	push   ebp
9f002439:	89 e5                	mov    ebp,esp
9f00243b:	83 ec 08             	sub    esp,0x8
9f00243e:	e8 7f 24 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f002443:	05 19 4e 00 00       	add    eax,0x4e19
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:175
    return mallocI(size);
9f002448:	83 ec 0c             	sub    esp,0xc
9f00244b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00244e:	e8 a2 fd ff ff       	call   9f0021f5 <mallocI>
9f002453:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:176
}
9f002456:	c9                   	leave  
9f002457:	c3                   	ret    

9f002458 <reallocI>:
reallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:179

void* reallocI(void *foldptr, uint32_t newlen)
{
9f002458:	55                   	push   ebp
9f002459:	89 e5                	mov    ebp,esp
9f00245b:	53                   	push   ebx
9f00245c:	83 ec 14             	sub    esp,0x14
9f00245f:	e8 9c 24 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f002464:	81 c3 f8 4d 00 00    	add    ebx,0x4df8
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:181
    
    printdI(DEBUG_MALLOC,"libc_realloc: called for old pointer 0x%08x, new size=0x%08x",foldptr,newlen);
9f00246a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00246d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002470:	8d 83 0c fa ff ff    	lea    eax,[ebx-0x5f4]
9f002476:	50                   	push   eax
9f002477:	68 00 00 00 01       	push   0x1000000
9f00247c:	e8 57 f1 ff ff       	call   9f0015d8 <printdI>
9f002481:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:184

    //Get old heap pointer
    uint32_t realSize=newlen;
9f002484:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002487:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:186
    heaprec_t* mp;  //-1 means back up to the heaprec_t struct
    HEAP_CURR(foldptr,mp);
9f00248a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00248d:	83 e8 18             	sub    eax,0x18
9f002490:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:188

    if (newlen==0)
9f002493:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002497:	75 17                	jne    9f0024b0 <reallocI+0x58>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:189
        printdI(DEBUG_MALLOC,"libc_relloc: Request for 0 bytes, cannot fulfill\n");
9f002499:	83 ec 08             	sub    esp,0x8
9f00249c:	8d 83 4c fa ff ff    	lea    eax,[ebx-0x5b4]
9f0024a2:	50                   	push   eax
9f0024a3:	68 00 00 00 01       	push   0x1000000
9f0024a8:	e8 2b f1 ff ff       	call   9f0015d8 <printdI>
9f0024ad:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:190
    if (newlen==0 || newlen<=mp->len)
9f0024b0:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f0024b4:	74 0b                	je     9f0024c1 <reallocI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:190 (discriminator 1)
9f0024b6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0024b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0024bc:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f0024bf:	72 08                	jb     9f0024c9 <reallocI+0x71>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:191
        return foldptr;
9f0024c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0024c4:	e9 8d 00 00 00       	jmp    9f002556 <reallocI+0xfe>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:193

    if (newlen<ALLOC_MIN_MALLOC_SIZE)
9f0024c9:	83 7d 0c 17          	cmp    DWORD PTR [ebp+0xc],0x17
9f0024cd:	77 07                	ja     9f0024d6 <reallocI+0x7e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:194
        realSize=ALLOC_MIN_MALLOC_SIZE;
9f0024cf:	c7 45 f4 18 00 00 00 	mov    DWORD PTR [ebp-0xc],0x18
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:197
    
    //Allocate space of newlen
    uintptr_t *fnewptr = mallocI(realSize);
9f0024d6:	83 ec 0c             	sub    esp,0xc
9f0024d9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0024dc:	e8 14 fd ff ff       	call   9f0021f5 <mallocI>
9f0024e1:	83 c4 10             	add    esp,0x10
9f0024e4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:198
    printdI(DEBUG_MALLOC,"\tlibc_realloc: received new malloc pointer 0x%08x, old size=0x%08x, new size=0x%08x\n",fnewptr, mp->len, realSize);
9f0024e7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0024ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0024ed:	83 ec 0c             	sub    esp,0xc
9f0024f0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0024f3:	50                   	push   eax
9f0024f4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0024f7:	8d 83 80 fa ff ff    	lea    eax,[ebx-0x580]
9f0024fd:	50                   	push   eax
9f0024fe:	68 00 00 00 01       	push   0x1000000
9f002503:	e8 d0 f0 ff ff       	call   9f0015d8 <printdI>
9f002508:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:203
   
    //Copy from old pointer to new memory using the old pointer's length
//    if (newlen>mp->len)
//        memsetI(fnewptr+mp->len,0,newlen-mp->len);
    memcpyI(fnewptr, foldptr, mp->len>realSize?realSize:mp->len);
9f00250b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00250e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
9f002511:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002514:	39 c2                	cmp    edx,eax
9f002516:	0f 46 c2             	cmovbe eax,edx
9f002519:	83 ec 04             	sub    esp,0x4
9f00251c:	50                   	push   eax
9f00251d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002520:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002523:	e8 ac 00 00 00       	call   9f0025d4 <memcpyI>
9f002528:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:204
    printdI(DEBUG_MALLOC,"\tlibc_realloc: updated new pointer 0x%08x with old pointer data and cleared out remaing if applicable\n",fnewptr);
9f00252b:	83 ec 04             	sub    esp,0x4
9f00252e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002531:	8d 83 d8 fa ff ff    	lea    eax,[ebx-0x528]
9f002537:	50                   	push   eax
9f002538:	68 00 00 00 01       	push   0x1000000
9f00253d:	e8 96 f0 ff ff       	call   9f0015d8 <printdI>
9f002542:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:207
    
   //free old pointer
    freeI(foldptr);
9f002545:	83 ec 0c             	sub    esp,0xc
9f002548:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00254b:	e8 23 fb ff ff       	call   9f002073 <freeI>
9f002550:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:208
    return fnewptr;
9f002553:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:209
}
9f002556:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002559:	c9                   	leave  
9f00255a:	c3                   	ret    

9f00255b <realloc>:
realloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:212

VISIBLE void* realloc(void *foldptr, uint32_t newlen)
{
9f00255b:	55                   	push   ebp
9f00255c:	89 e5                	mov    ebp,esp
9f00255e:	83 ec 08             	sub    esp,0x8
9f002561:	e8 5c 23 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f002566:	05 f6 4c 00 00       	add    eax,0x4cf6
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:213
    return reallocI(foldptr, newlen);
9f00256b:	83 ec 08             	sub    esp,0x8
9f00256e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002571:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002574:	e8 df fe ff ff       	call   9f002458 <reallocI>
9f002579:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:214
}
9f00257c:	c9                   	leave  
9f00257d:	c3                   	ret    

9f00257e <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:217

__attribute__((visibility("default"))) void free(void* fpointer)
{
9f00257e:	55                   	push   ebp
9f00257f:	89 e5                	mov    ebp,esp
9f002581:	83 ec 08             	sub    esp,0x8
9f002584:	e8 39 23 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f002589:	05 d3 4c 00 00       	add    eax,0x4cd3
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:218
    freeI(fpointer);
9f00258e:	83 ec 0c             	sub    esp,0xc
9f002591:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002594:	e8 da fa ff ff       	call   9f002073 <freeI>
9f002599:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:219
}
9f00259c:	90                   	nop
9f00259d:	c9                   	leave  
9f00259e:	c3                   	ret    

9f00259f <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:222

void malloc_cleanup()
{
9f00259f:	55                   	push   ebp
9f0025a0:	89 e5                	mov    ebp,esp
9f0025a2:	53                   	push   ebx
9f0025a3:	83 ec 04             	sub    esp,0x4
9f0025a6:	e8 17 23 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0025ab:	05 b1 4c 00 00       	add    eax,0x4cb1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:223
    do_syscall1(SYSCALL_FREE, heapBase);
9f0025b0:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f0025b6:	8b 12                	mov    edx,DWORD PTR [edx]
9f0025b8:	83 ec 08             	sub    esp,0x8
9f0025bb:	52                   	push   edx
9f0025bc:	68 64 01 00 00       	push   0x164
9f0025c1:	89 c3                	mov    ebx,eax
9f0025c3:	e8 34 ed ff ff       	call   9f0012fc <do_syscall1>
9f0025c8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:224
9f0025cb:	90                   	nop
9f0025cc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0025cf:	c9                   	leave  
9f0025d0:	c3                   	ret    
9f0025d1:	66 90                	xchg   ax,ax
9f0025d3:	90                   	nop

9f0025d4 <memcpyI>:
memcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:12
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time

void *memcpyI(void *dest, const void *src, size_t n)
{
9f0025d4:	55                   	push   ebp
9f0025d5:	89 e5                	mov    ebp,esp
9f0025d7:	83 ec 20             	sub    esp,0x20
9f0025da:	e8 e3 22 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0025df:	05 7d 4c 00 00       	add    eax,0x4c7d
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    bool dw,dd;
    
    dd=n%4==0;
9f0025e4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0025e7:	83 e0 03             	and    eax,0x3
9f0025ea:	85 c0                	test   eax,eax
9f0025ec:	0f 94 c0             	sete   al
9f0025ef:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    dw=n%2==0;
9f0025f2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0025f5:	83 e0 01             	and    eax,0x1
9f0025f8:	85 c0                	test   eax,eax
9f0025fa:	0f 94 c0             	sete   al
9f0025fd:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:17
    if (dd)
9f002600:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
9f002604:	74 7d                	je     9f002683 <memcpyI+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
    {
        n /=4;
9f002606:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002609:	c1 e8 02             	shr    eax,0x2
9f00260c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        const uint32_t *f = src;
9f00260f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002612:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:21
        uint32_t *t = dest;
9f002615:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002618:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23

        if (f < t) {
9f00261b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00261e:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f002621:	73 4b                	jae    9f00266e <memcpyI+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                f += n;
9f002623:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002626:	c1 e0 02             	shl    eax,0x2
9f002629:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                t += n;
9f00262c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00262f:	c1 e0 02             	shl    eax,0x2
9f002632:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                while ( (n)-- > 0)
9f002635:	eb 12                	jmp    9f002649 <memcpyI+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:27
                        *--t = *--f;
9f002637:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
9f00263b:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
9f00263f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002642:	8b 10                	mov    edx,DWORD PTR [eax]
9f002644:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f002647:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f002649:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00264c:	8d 50 ff             	lea    edx,[eax-0x1]
9f00264f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002652:	85 c0                	test   eax,eax
9f002654:	75 e1                	jne    9f002637 <memcpyI+0x63>
9f002656:	eb 23                	jmp    9f00267b <memcpyI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f002658:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f00265b:	8d 50 04             	lea    edx,[eax+0x4]
9f00265e:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f002661:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002664:	8d 4a 04             	lea    ecx,[edx+0x4]
9f002667:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
9f00266a:	8b 12                	mov    edx,DWORD PTR [edx]
9f00266c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f00266e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002671:	8d 50 ff             	lea    edx,[eax-0x1]
9f002674:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002677:	85 c0                	test   eax,eax
9f002679:	75 dd                	jne    9f002658 <memcpyI+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:31
                        *t++ = *f++;
        return dest;
9f00267b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00267e:	e9 ea 00 00 00       	jmp    9f00276d <memcpyI+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:33
    }
    else if (dw)
9f002683:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
9f002687:	74 79                	je     9f002702 <memcpyI+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
    {
        n /=2;
9f002689:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00268c:	d1 e8                	shr    eax,1
9f00268e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        const uint32_t *f = src;
9f002691:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002694:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:37
        uint32_t *t = dest;
9f002697:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00269a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39

        if (f < t) {
9f00269d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0026a0:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0026a3:	73 4b                	jae    9f0026f0 <memcpyI+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                f += n;
9f0026a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0026a8:	c1 e0 02             	shl    eax,0x2
9f0026ab:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                t += n;
9f0026ae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0026b1:	c1 e0 02             	shl    eax,0x2
9f0026b4:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                while ( (n)-- > 0)
9f0026b7:	eb 12                	jmp    9f0026cb <memcpyI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:43
                        *--t = *--f;
9f0026b9:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
9f0026bd:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
9f0026c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0026c4:	8b 10                	mov    edx,DWORD PTR [eax]
9f0026c6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0026c9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f0026cb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0026ce:	8d 50 ff             	lea    edx,[eax-0x1]
9f0026d1:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0026d4:	85 c0                	test   eax,eax
9f0026d6:	75 e1                	jne    9f0026b9 <memcpyI+0xe5>
9f0026d8:	eb 23                	jmp    9f0026fd <memcpyI+0x129>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f0026da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0026dd:	8d 50 04             	lea    edx,[eax+0x4]
9f0026e0:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0026e3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0026e6:	8d 4a 04             	lea    ecx,[edx+0x4]
9f0026e9:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
9f0026ec:	8b 12                	mov    edx,DWORD PTR [edx]
9f0026ee:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f0026f0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0026f3:	8d 50 ff             	lea    edx,[eax-0x1]
9f0026f6:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0026f9:	85 c0                	test   eax,eax
9f0026fb:	75 dd                	jne    9f0026da <memcpyI+0x106>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:47
                        *t++ = *f++;
        return dest;
9f0026fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002700:	eb 6b                	jmp    9f00276d <memcpyI+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
    }
    else
    {
        const char *f = src;
9f002702:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002705:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:52
        char *t = dest;
9f002708:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00270b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54

        if (f < t) {
9f00270e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002711:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f002714:	73 47                	jae    9f00275d <memcpyI+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                f += n;
9f002716:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002719:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                t += n;
9f00271c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00271f:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                while (n-- > 0)
9f002722:	eb 13                	jmp    9f002737 <memcpyI+0x163>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:58
                        *--t = *--f;
9f002724:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
9f002728:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
9f00272c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00272f:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002732:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f002735:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
9f002737:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00273a:	8d 50 ff             	lea    edx,[eax-0x1]
9f00273d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002740:	85 c0                	test   eax,eax
9f002742:	75 e0                	jne    9f002724 <memcpyI+0x150>
9f002744:	eb 24                	jmp    9f00276a <memcpyI+0x196>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
9f002746:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f002749:	8d 50 01             	lea    edx,[eax+0x1]
9f00274c:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f00274f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f002752:	8d 4a 01             	lea    ecx,[edx+0x1]
9f002755:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
9f002758:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f00275b:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
9f00275d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002760:	8d 50 ff             	lea    edx,[eax-0x1]
9f002763:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002766:	85 c0                	test   eax,eax
9f002768:	75 dc                	jne    9f002746 <memcpyI+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:62
                        *t++ = *f++;
        return dest;
9f00276a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:64
    }
}
9f00276d:	c9                   	leave  
9f00276e:	c3                   	ret    

9f00276f <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:67

VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
9f00276f:	55                   	push   ebp
9f002770:	89 e5                	mov    ebp,esp
9f002772:	e8 4b 21 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f002777:	05 e5 4a 00 00       	add    eax,0x4ae5
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:68
    return memcpyI(dest, src, n);
9f00277c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f00277f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002782:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002785:	e8 4a fe ff ff       	call   9f0025d4 <memcpyI>
9f00278a:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:69
9f00278d:	c9                   	leave  
9f00278e:	c3                   	ret    
9f00278f:	90                   	nop

9f002790 <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"

void *memsetI(void *d1, int val, size_t len)
{
9f002790:	55                   	push   ebp
9f002791:	89 e5                	mov    ebp,esp
9f002793:	83 ec 20             	sub    esp,0x20
9f002796:	e8 27 21 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f00279b:	05 c1 4a 00 00       	add    eax,0x4ac1
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
9f0027a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0027a3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
9f0027a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0027a9:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
9f0027ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0027af:	c1 e0 10             	shl    eax,0x10
9f0027b2:	89 c2                	mov    edx,eax
9f0027b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0027b7:	c1 e0 08             	shl    eax,0x8
9f0027ba:	09 c2                	or     edx,eax
9f0027bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0027bf:	09 d0                	or     eax,edx
9f0027c1:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
9f0027c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0027c8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
9f0027cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0027ce:	c1 e0 18             	shl    eax,0x18
9f0027d1:	89 c2                	mov    edx,eax
9f0027d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0027d6:	c1 e0 10             	shl    eax,0x10
9f0027d9:	09 c2                	or     edx,eax
9f0027db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0027de:	c1 e0 08             	shl    eax,0x8
9f0027e1:	09 d0                	or     eax,edx
9f0027e3:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
9f0027e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
9f0027e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0027ec:	83 e0 03             	and    eax,0x3
9f0027ef:	85 c0                	test   eax,eax
9f0027f1:	75 1c                	jne    9f00280f <memsetI+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
9f0027f3:	eb 0e                	jmp    9f002803 <memsetI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
9f0027f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0027f8:	8d 50 04             	lea    edx,[eax+0x4]
9f0027fb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0027fe:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f002801:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
9f002803:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
9f002807:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f00280b:	75 e8                	jne    9f0027f5 <memsetI+0x65>
9f00280d:	eb 43                	jmp    9f002852 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
9f00280f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002812:	83 e0 01             	and    eax,0x1
9f002815:	85 c0                	test   eax,eax
9f002817:	75 2c                	jne    9f002845 <memsetI+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
9f002819:	eb 10                	jmp    9f00282b <memsetI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
9f00281b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f00281e:	8d 50 02             	lea    edx,[eax+0x2]
9f002821:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f002824:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
9f002828:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
9f00282b:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
9f00282f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002833:	75 e6                	jne    9f00281b <memsetI+0x8b>
9f002835:	eb 1b                	jmp    9f002852 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
9f002837:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00283a:	8d 50 01             	lea    edx,[eax+0x1]
9f00283d:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f002840:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002843:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
9f002845:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002848:	8d 50 ff             	lea    edx,[eax-0x1]
9f00284b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00284e:	85 c0                	test   eax,eax
9f002850:	75 e5                	jne    9f002837 <memsetI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
        *d++ = val;
    }
    return d1;
9f002852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
9f002855:	c9                   	leave  
9f002856:	c3                   	ret    

9f002857 <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

VISIBLE void *memset(void *d1, int val, size_t len)
{
9f002857:	55                   	push   ebp
9f002858:	89 e5                	mov    ebp,esp
9f00285a:	e8 63 20 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f00285f:	05 fd 49 00 00       	add    eax,0x49fd
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    return memsetI(d1, val, len);
9f002864:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002867:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00286a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00286d:	e8 1e ff ff ff       	call   9f002790 <memsetI>
9f002872:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
}
9f002875:	c9                   	leave  
9f002876:	c3                   	ret    
9f002877:	90                   	nop

9f002878 <pipe>:
pipe():
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:11

#include "libChrisOS.h"
#include "pipe.h"

VISIBLE int pipe(int pipefd[2])
{
9f002878:	55                   	push   ebp
9f002879:	89 e5                	mov    ebp,esp
9f00287b:	53                   	push   ebx
9f00287c:	83 ec 04             	sub    esp,0x4
9f00287f:	e8 3e 20 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f002884:	05 d8 49 00 00       	add    eax,0x49d8
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:12
    return do_syscall1(SYSCALL_PIPE, (uintptr_t)pipefd);
9f002889:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00288c:	83 ec 08             	sub    esp,0x8
9f00288f:	52                   	push   edx
9f002890:	6a 0e                	push   0xe
9f002892:	89 c3                	mov    ebx,eax
9f002894:	e8 63 ea ff ff       	call   9f0012fc <do_syscall1>
9f002899:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:13
}
9f00289c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00289f:	c9                   	leave  
9f0028a0:	c3                   	ret    

9f0028a1 <dup3>:
dup3():
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:16

VISIBLE int dup3(int oldfd, int newfd, int flags)
{
9f0028a1:	55                   	push   ebp
9f0028a2:	89 e5                	mov    ebp,esp
9f0028a4:	53                   	push   ebx
9f0028a5:	83 ec 04             	sub    esp,0x4
9f0028a8:	e8 15 20 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0028ad:	05 af 49 00 00       	add    eax,0x49af
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:17
    return do_syscall3(SYSCALL_DUP3,oldfd,newfd,flags);
9f0028b2:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f0028b5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f0028b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0028bb:	53                   	push   ebx
9f0028bc:	51                   	push   ecx
9f0028bd:	52                   	push   edx
9f0028be:	6a 0f                	push   0xf
9f0028c0:	89 c3                	mov    ebx,eax
9f0028c2:	e8 bb e9 ff ff       	call   9f001282 <do_syscall3>
9f0028c7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:18
9f0028ca:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0028cd:	c9                   	leave  
9f0028ce:	c3                   	ret    
9f0028cf:	90                   	nop

9f0028d0 <skip_atoi>:
skip_atoi():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:11

#include <stdarg.h>
#include "strings.h"

static int skip_atoi(const char **s)
{
9f0028d0:	55                   	push   ebp
9f0028d1:	89 e5                	mov    ebp,esp
9f0028d3:	53                   	push   ebx
9f0028d4:	83 ec 10             	sub    esp,0x10
9f0028d7:	e8 e6 1f 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0028dc:	05 80 49 00 00       	add    eax,0x4980
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:12
	int i = 0;
9f0028e1:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:14

	while (ISDIGIT(**s))
9f0028e8:	eb 29                	jmp    9f002913 <skip_atoi+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:15
		i = i * 10 + *((*s)++) - '0';
9f0028ea:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0028ed:	89 d0                	mov    eax,edx
9f0028ef:	c1 e0 02             	shl    eax,0x2
9f0028f2:	01 d0                	add    eax,edx
9f0028f4:	01 c0                	add    eax,eax
9f0028f6:	89 c3                	mov    ebx,eax
9f0028f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0028fb:	8b 00                	mov    eax,DWORD PTR [eax]
9f0028fd:	8d 48 01             	lea    ecx,[eax+0x1]
9f002900:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002903:	89 0a                	mov    DWORD PTR [edx],ecx
9f002905:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002908:	0f be c0             	movsx  eax,al
9f00290b:	01 d8                	add    eax,ebx
9f00290d:	83 e8 30             	sub    eax,0x30
9f002910:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:14

static int skip_atoi(const char **s)
{
	int i = 0;

	while (ISDIGIT(**s))
9f002913:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002916:	8b 00                	mov    eax,DWORD PTR [eax]
9f002918:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00291b:	0f be c0             	movsx  eax,al
9f00291e:	83 e8 30             	sub    eax,0x30
9f002921:	83 f8 09             	cmp    eax,0x9
9f002924:	76 c4                	jbe    9f0028ea <skip_atoi+0x1a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:16
		i = i * 10 + *((*s)++) - '0';
	return i;
9f002926:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:17
}
9f002929:	83 c4 10             	add    esp,0x10
9f00292c:	5b                   	pop    ebx
9f00292d:	5d                   	pop    ebp
9f00292e:	c3                   	ret    

9f00292f <number>:
number():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:35
n = ((unsigned long) n) / (unsigned) base; \
__res; })

static char *number(char *str, long num, int base, int size, int precision,
		    int type)
{
9f00292f:	55                   	push   ebp
9f002930:	89 e5                	mov    ebp,esp
9f002932:	56                   	push   esi
9f002933:	53                   	push   ebx
9f002934:	83 ec 60             	sub    esp,0x60
9f002937:	e8 c4 1f 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f00293c:	81 c3 20 49 00 00    	add    ebx,0x4920
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:45
	char c, sign, locase;
	int i;

	/* locase = 0 or 0x20. ORing digits or letters with 'locase'
	 * produces same digits or (maybe lowercased) letters */
	locase = (type & SMALL);
9f002942:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f002945:	83 e0 20             	and    eax,0x20
9f002948:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:46
	if (type & LEFT)
9f00294b:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00294e:	83 e0 10             	and    eax,0x10
9f002951:	85 c0                	test   eax,eax
9f002953:	74 04                	je     9f002959 <number+0x2a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:47
		type &= ~ZEROPAD;
9f002955:	83 65 1c fe          	and    DWORD PTR [ebp+0x1c],0xfffffffe
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:48
	if (base < 2 || base > 16)
9f002959:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f00295d:	7e 06                	jle    9f002965 <number+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:48 (discriminator 1)
9f00295f:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f002963:	7e 0a                	jle    9f00296f <number+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:49
		return NULL;
9f002965:	b8 00 00 00 00       	mov    eax,0x0
9f00296a:	e9 f7 01 00 00       	jmp    9f002b66 <number+0x237>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50
	c = (type & ZEROPAD) ? '0' : ' ';
9f00296f:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f002972:	83 e0 01             	and    eax,0x1
9f002975:	85 c0                	test   eax,eax
9f002977:	74 07                	je     9f002980 <number+0x51>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 1)
9f002979:	b8 30 00 00 00       	mov    eax,0x30
9f00297e:	eb 05                	jmp    9f002985 <number+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 2)
9f002980:	b8 20 00 00 00       	mov    eax,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 4)
9f002985:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:51 (discriminator 4)
	sign = 0;
9f002988:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:52 (discriminator 4)
	if (type & SIGN) {
9f00298c:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00298f:	83 e0 02             	and    eax,0x2
9f002992:	85 c0                	test   eax,eax
9f002994:	74 39                	je     9f0029cf <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:53
		if (num < 0) {
9f002996:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f00299a:	79 0d                	jns    9f0029a9 <number+0x7a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:54
			sign = '-';
9f00299c:	c6 45 f7 2d          	mov    BYTE PTR [ebp-0x9],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:55
			num = -num;
9f0029a0:	f7 5d 0c             	neg    DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:56
			size--;
9f0029a3:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f0029a7:	eb 26                	jmp    9f0029cf <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:57
		} else if (type & PLUS) {
9f0029a9:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0029ac:	83 e0 04             	and    eax,0x4
9f0029af:	85 c0                	test   eax,eax
9f0029b1:	74 0a                	je     9f0029bd <number+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:58
			sign = '+';
9f0029b3:	c6 45 f7 2b          	mov    BYTE PTR [ebp-0x9],0x2b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:59
			size--;
9f0029b7:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f0029bb:	eb 12                	jmp    9f0029cf <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:60
		} else if (type & SPACE) {
9f0029bd:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0029c0:	83 e0 08             	and    eax,0x8
9f0029c3:	85 c0                	test   eax,eax
9f0029c5:	74 08                	je     9f0029cf <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:61
			sign = ' ';
9f0029c7:	c6 45 f7 20          	mov    BYTE PTR [ebp-0x9],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:62
			size--;
9f0029cb:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:65
		}
	}
	if (type & SPECIAL) {
9f0029cf:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0029d2:	83 e0 40             	and    eax,0x40
9f0029d5:	85 c0                	test   eax,eax
9f0029d7:	74 16                	je     9f0029ef <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:66
		if (base == 16)
9f0029d9:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f0029dd:	75 06                	jne    9f0029e5 <number+0xb6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:67
			size -= 2;
9f0029df:	83 6d 14 02          	sub    DWORD PTR [ebp+0x14],0x2
9f0029e3:	eb 0a                	jmp    9f0029ef <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:68
		else if (base == 8)
9f0029e5:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f0029e9:	75 04                	jne    9f0029ef <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:69
			size--;
9f0029eb:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:71
	}
	i = 0;
9f0029ef:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:72
	if (num == 0)
9f0029f6:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f0029fa:	75 4d                	jne    9f002a49 <number+0x11a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:73
		tmp[i++] = '0';
9f0029fc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0029ff:	8d 50 01             	lea    edx,[eax+0x1]
9f002a02:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f002a05:	c6 44 05 a6 30       	mov    BYTE PTR [ebp+eax*1-0x5a],0x30
9f002a0a:	eb 43                	jmp    9f002a4f <number+0x120>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:76
	else
		while (num != 0)
			tmp[i++] = (digits[__do_div(num, base)] | locase);
9f002a0c:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f002a0f:	8d 41 01             	lea    eax,[ecx+0x1]
9f002a12:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f002a15:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002a18:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f002a1b:	ba 00 00 00 00       	mov    edx,0x0
9f002a20:	f7 f6                	div    esi
9f002a22:	89 d0                	mov    eax,edx
9f002a24:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f002a27:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002a2a:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f002a2d:	ba 00 00 00 00       	mov    edx,0x0
9f002a32:	f7 f6                	div    esi
9f002a34:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
9f002a37:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f002a3a:	0f b6 84 03 d4 fc ff 	movzx  eax,BYTE PTR [ebx+eax*1-0x32c]
9f002a41:	ff 
9f002a42:	0a 45 ef             	or     al,BYTE PTR [ebp-0x11]
9f002a45:	88 44 0d a6          	mov    BYTE PTR [ebp+ecx*1-0x5a],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:75
	}
	i = 0;
	if (num == 0)
		tmp[i++] = '0';
	else
		while (num != 0)
9f002a49:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002a4d:	75 bd                	jne    9f002a0c <number+0xdd>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:77
			tmp[i++] = (digits[__do_div(num, base)] | locase);
	if (i > precision)
9f002a4f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002a52:	3b 45 18             	cmp    eax,DWORD PTR [ebp+0x18]
9f002a55:	7e 06                	jle    9f002a5d <number+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:78
		precision = i;
9f002a57:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002a5a:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:79
	size -= precision;
9f002a5d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f002a60:	29 45 14             	sub    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:80
	if (!(type & (ZEROPAD + LEFT)))
9f002a63:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f002a66:	83 e0 11             	and    eax,0x11
9f002a69:	85 c0                	test   eax,eax
9f002a6b:	75 1b                	jne    9f002a88 <number+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
		while (size-- > 0)
9f002a6d:	eb 0c                	jmp    9f002a7b <number+0x14c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:82
			*str++ = ' ';
9f002a6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a72:	8d 50 01             	lea    edx,[eax+0x1]
9f002a75:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002a78:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
			tmp[i++] = (digits[__do_div(num, base)] | locase);
	if (i > precision)
		precision = i;
	size -= precision;
	if (!(type & (ZEROPAD + LEFT)))
		while (size-- > 0)
9f002a7b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f002a7e:	8d 50 ff             	lea    edx,[eax-0x1]
9f002a81:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f002a84:	85 c0                	test   eax,eax
9f002a86:	7f e7                	jg     9f002a6f <number+0x140>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:83
			*str++ = ' ';
	if (sign)
9f002a88:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f002a8c:	74 0f                	je     9f002a9d <number+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:84
		*str++ = sign;
9f002a8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a91:	8d 50 01             	lea    edx,[eax+0x1]
9f002a94:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002a97:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f002a9b:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:85
	if (type & SPECIAL) {
9f002a9d:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f002aa0:	83 e0 40             	and    eax,0x40
9f002aa3:	85 c0                	test   eax,eax
9f002aa5:	74 38                	je     9f002adf <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:86
		if (base == 8)
9f002aa7:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f002aab:	75 0e                	jne    9f002abb <number+0x18c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:87
			*str++ = '0';
9f002aad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ab0:	8d 50 01             	lea    edx,[eax+0x1]
9f002ab3:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002ab6:	c6 00 30             	mov    BYTE PTR [eax],0x30
9f002ab9:	eb 24                	jmp    9f002adf <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:88
		else if (base == 16) {
9f002abb:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f002abf:	75 1e                	jne    9f002adf <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:89
			*str++ = '0';
9f002ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ac4:	8d 50 01             	lea    edx,[eax+0x1]
9f002ac7:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002aca:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:90
			*str++ = ('X' | locase);
9f002acd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ad0:	8d 50 01             	lea    edx,[eax+0x1]
9f002ad3:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002ad6:	0f b6 55 ef          	movzx  edx,BYTE PTR [ebp-0x11]
9f002ada:	83 ca 58             	or     edx,0x58
9f002add:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:93
		}
	}
	if (!(type & LEFT))
9f002adf:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f002ae2:	83 e0 10             	and    eax,0x10
9f002ae5:	85 c0                	test   eax,eax
9f002ae7:	75 2c                	jne    9f002b15 <number+0x1e6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
		while (size-- > 0)
9f002ae9:	eb 0f                	jmp    9f002afa <number+0x1cb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:95
			*str++ = c;
9f002aeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002aee:	8d 50 01             	lea    edx,[eax+0x1]
9f002af1:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002af4:	0f b6 55 ee          	movzx  edx,BYTE PTR [ebp-0x12]
9f002af8:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
			*str++ = '0';
			*str++ = ('X' | locase);
		}
	}
	if (!(type & LEFT))
		while (size-- > 0)
9f002afa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f002afd:	8d 50 ff             	lea    edx,[eax-0x1]
9f002b00:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f002b03:	85 c0                	test   eax,eax
9f002b05:	7f e4                	jg     9f002aeb <number+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:96
			*str++ = c;
	while (i < precision--)
9f002b07:	eb 0c                	jmp    9f002b15 <number+0x1e6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:97
		*str++ = '0';
9f002b09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002b0c:	8d 50 01             	lea    edx,[eax+0x1]
9f002b0f:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002b12:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:96
		}
	}
	if (!(type & LEFT))
		while (size-- > 0)
			*str++ = c;
	while (i < precision--)
9f002b15:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f002b18:	8d 50 ff             	lea    edx,[eax-0x1]
9f002b1b:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
9f002b1e:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f002b21:	7f e6                	jg     9f002b09 <number+0x1da>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98
		*str++ = '0';
	while (i-- > 0)
9f002b23:	eb 16                	jmp    9f002b3b <number+0x20c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:99
		*str++ = tmp[i];
9f002b25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002b28:	8d 50 01             	lea    edx,[eax+0x1]
9f002b2b:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002b2e:	8d 4d a6             	lea    ecx,[ebp-0x5a]
9f002b31:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002b34:	01 ca                	add    edx,ecx
9f002b36:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002b39:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98
	if (!(type & LEFT))
		while (size-- > 0)
			*str++ = c;
	while (i < precision--)
		*str++ = '0';
	while (i-- > 0)
9f002b3b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002b3e:	8d 50 ff             	lea    edx,[eax-0x1]
9f002b41:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f002b44:	85 c0                	test   eax,eax
9f002b46:	7f dd                	jg     9f002b25 <number+0x1f6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
		*str++ = tmp[i];
	while (size-- > 0)
9f002b48:	eb 0c                	jmp    9f002b56 <number+0x227>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:101
		*str++ = ' ';
9f002b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002b4d:	8d 50 01             	lea    edx,[eax+0x1]
9f002b50:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002b53:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
			*str++ = c;
	while (i < precision--)
		*str++ = '0';
	while (i-- > 0)
		*str++ = tmp[i];
	while (size-- > 0)
9f002b56:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f002b59:	8d 50 ff             	lea    edx,[eax-0x1]
9f002b5c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f002b5f:	85 c0                	test   eax,eax
9f002b61:	7f e7                	jg     9f002b4a <number+0x21b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:102
		*str++ = ' ';
	return str;
9f002b63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:103 (discriminator 1)
}
9f002b66:	83 c4 60             	add    esp,0x60
9f002b69:	5b                   	pop    ebx
9f002b6a:	5e                   	pop    esi
9f002b6b:	5d                   	pop    ebp
9f002b6c:	c3                   	ret    

9f002b6d <vsprintf>:
vsprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:105
int vsprintf(char *buf, const char *fmt, va_list args)
{
9f002b6d:	55                   	push   ebp
9f002b6e:	89 e5                	mov    ebp,esp
9f002b70:	53                   	push   ebx
9f002b71:	83 ec 34             	sub    esp,0x34
9f002b74:	e8 87 1d 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f002b79:	81 c3 e3 46 00 00    	add    ebx,0x46e3
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f002b7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002b82:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
9f002b85:	e9 08 04 00 00       	jmp    9f002f92 <.L96+0x95>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:120
		if (*fmt != '%') {
9f002b8a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002b8d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002b90:	3c 25                	cmp    al,0x25
9f002b92:	74 16                	je     9f002baa <vsprintf+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:121
			*str++ = *fmt;
9f002b94:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002b97:	8d 50 01             	lea    edx,[eax+0x1]
9f002b9a:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002b9d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002ba0:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002ba3:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:122
			continue;
9f002ba5:	e9 df 03 00 00       	jmp    9f002f89 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:126
		}

		/* process flags */
		flags = 0;
9f002baa:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:128
	      repeat:
		++fmt;		/* this also skips first '%' */
9f002bb1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002bb4:	83 c0 01             	add    eax,0x1
9f002bb7:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:129
		switch (*fmt) {
9f002bba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002bbd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002bc0:	0f be c0             	movsx  eax,al
9f002bc3:	83 e8 20             	sub    eax,0x20
9f002bc6:	83 f8 10             	cmp    eax,0x10
9f002bc9:	77 2c                	ja     9f002bf7 <.L43>
9f002bcb:	c1 e0 02             	shl    eax,0x2
9f002bce:	8b 84 18 40 fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x4c0]
9f002bd5:	01 d8                	add    eax,ebx
9f002bd7:	ff e0                	jmp    eax

9f002bd9 <.L48>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:131
		case '-':
			flags |= LEFT;
9f002bd9:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:132
			goto repeat;
9f002bdd:	eb d2                	jmp    9f002bb1 <vsprintf+0x44>

9f002bdf <.L47>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:134
		case '+':
			flags |= PLUS;
9f002bdf:	83 4d dc 04          	or     DWORD PTR [ebp-0x24],0x4
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:135
			goto repeat;
9f002be3:	eb cc                	jmp    9f002bb1 <vsprintf+0x44>

9f002be5 <.L44>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:137
		case ' ':
			flags |= SPACE;
9f002be5:	83 4d dc 08          	or     DWORD PTR [ebp-0x24],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:138
			goto repeat;
9f002be9:	eb c6                	jmp    9f002bb1 <vsprintf+0x44>

9f002beb <.L46>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:140
		case '#':
			flags |= SPECIAL;
9f002beb:	83 4d dc 40          	or     DWORD PTR [ebp-0x24],0x40
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:141
			goto repeat;
9f002bef:	eb c0                	jmp    9f002bb1 <vsprintf+0x44>

9f002bf1 <.L49>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:143
		case '0':
			flags |= ZEROPAD;
9f002bf1:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:144
			goto repeat;
9f002bf5:	eb ba                	jmp    9f002bb1 <vsprintf+0x44>

9f002bf7 <.L43>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:148
		}

		/* get field width */
		field_width = -1;
9f002bf7:	c7 45 d8 ff ff ff ff 	mov    DWORD PTR [ebp-0x28],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:149
		if (ISDIGIT(*fmt))
9f002bfe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c01:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c04:	0f be c0             	movsx  eax,al
9f002c07:	83 e8 30             	sub    eax,0x30
9f002c0a:	83 f8 09             	cmp    eax,0x9
9f002c0d:	77 11                	ja     9f002c20 <.L43+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:150
			field_width = skip_atoi(&fmt);
9f002c0f:	8d 45 0c             	lea    eax,[ebp+0xc]
9f002c12:	50                   	push   eax
9f002c13:	e8 b8 fc ff ff       	call   9f0028d0 <skip_atoi>
9f002c18:	83 c4 04             	add    esp,0x4
9f002c1b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
9f002c1e:	eb 2e                	jmp    9f002c4e <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:151
		else if (*fmt == '*') {
9f002c20:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c26:	3c 2a                	cmp    al,0x2a
9f002c28:	75 24                	jne    9f002c4e <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:152
			++fmt;
9f002c2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c2d:	83 c0 01             	add    eax,0x1
9f002c30:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:154
			/* it's the next argument */
			field_width = va_arg(args, int);
9f002c33:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002c36:	8d 50 04             	lea    edx,[eax+0x4]
9f002c39:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002c3c:	8b 00                	mov    eax,DWORD PTR [eax]
9f002c3e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:155
			if (field_width < 0) {
9f002c41:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f002c45:	79 07                	jns    9f002c4e <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:156
				field_width = -field_width;
9f002c47:	f7 5d d8             	neg    DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:157
				flags |= LEFT;
9f002c4a:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:162
			}
		}

		/* get the precision */
		precision = -1;
9f002c4e:	c7 45 d4 ff ff ff ff 	mov    DWORD PTR [ebp-0x2c],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:163
		if (*fmt == '.') {
9f002c55:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c58:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c5b:	3c 2e                	cmp    al,0x2e
9f002c5d:	75 59                	jne    9f002cb8 <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:164
			++fmt;
9f002c5f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c62:	83 c0 01             	add    eax,0x1
9f002c65:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:165
			if (ISDIGIT(*fmt))
9f002c68:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c6b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c6e:	0f be c0             	movsx  eax,al
9f002c71:	83 e8 30             	sub    eax,0x30
9f002c74:	83 f8 09             	cmp    eax,0x9
9f002c77:	77 11                	ja     9f002c8a <.L43+0x93>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:166
				precision = skip_atoi(&fmt);
9f002c79:	8d 45 0c             	lea    eax,[ebp+0xc]
9f002c7c:	50                   	push   eax
9f002c7d:	e8 4e fc ff ff       	call   9f0028d0 <skip_atoi>
9f002c82:	83 c4 04             	add    esp,0x4
9f002c85:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
9f002c88:	eb 21                	jmp    9f002cab <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:167
			else if (*fmt == '*') {
9f002c8a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c8d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c90:	3c 2a                	cmp    al,0x2a
9f002c92:	75 17                	jne    9f002cab <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:168
				++fmt;
9f002c94:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c97:	83 c0 01             	add    eax,0x1
9f002c9a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:170
				/* it's the next argument */
				precision = va_arg(args, int);
9f002c9d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002ca0:	8d 50 04             	lea    edx,[eax+0x4]
9f002ca3:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002ca6:	8b 00                	mov    eax,DWORD PTR [eax]
9f002ca8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:172
			}
			if (precision < 0)
9f002cab:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
9f002caf:	79 07                	jns    9f002cb8 <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:173
				precision = 0;
9f002cb1:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:177
		}

		/* get the conversion qualifier */
		qualifier = -1;
9f002cb8:	c7 45 d0 ff ff ff ff 	mov    DWORD PTR [ebp-0x30],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {
9f002cbf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002cc2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002cc5:	3c 68                	cmp    al,0x68
9f002cc7:	74 14                	je     9f002cdd <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178 (discriminator 1)
9f002cc9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002ccc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002ccf:	3c 6c                	cmp    al,0x6c
9f002cd1:	74 0a                	je     9f002cdd <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178 (discriminator 2)
9f002cd3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002cd6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002cd9:	3c 4c                	cmp    al,0x4c
9f002cdb:	75 15                	jne    9f002cf2 <.L43+0xfb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:179
			qualifier = *fmt;
9f002cdd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002ce0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002ce3:	0f be c0             	movsx  eax,al
9f002ce6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:180
			++fmt;
9f002ce9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002cec:	83 c0 01             	add    eax,0x1
9f002cef:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:184
		}

		/* default base */
		base = 10;
9f002cf2:	c7 45 e8 0a 00 00 00 	mov    DWORD PTR [ebp-0x18],0xa
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:186

		switch (*fmt) {
9f002cf9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002cfc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002cff:	0f be c0             	movsx  eax,al
9f002d02:	83 e8 25             	sub    eax,0x25
9f002d05:	83 f8 53             	cmp    eax,0x53
9f002d08:	0f 87 b5 01 00 00    	ja     9f002ec3 <.L57>
9f002d0e:	c1 e0 02             	shl    eax,0x2
9f002d11:	8b 84 18 84 fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x47c]
9f002d18:	01 d8                	add    eax,ebx
9f002d1a:	ff e0                	jmp    eax

9f002d1c <.L61>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:188
		case 'c':
			if (!(flags & LEFT))
9f002d1c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002d1f:	83 e0 10             	and    eax,0x10
9f002d22:	85 c0                	test   eax,eax
9f002d24:	75 18                	jne    9f002d3e <.L61+0x22>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
				while (--field_width > 0)
9f002d26:	eb 0c                	jmp    9f002d34 <.L61+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:190
					*str++ = ' ';
9f002d28:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002d2b:	8d 50 01             	lea    edx,[eax+0x1]
9f002d2e:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002d31:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
		base = 10;

		switch (*fmt) {
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
9f002d34:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f002d38:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f002d3c:	7f ea                	jg     9f002d28 <.L61+0xc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:191
					*str++ = ' ';
			*str++ = (unsigned char)va_arg(args, int);
9f002d3e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002d41:	8d 50 01             	lea    edx,[eax+0x1]
9f002d44:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002d47:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f002d4a:	8d 4a 04             	lea    ecx,[edx+0x4]
9f002d4d:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
9f002d50:	8b 12                	mov    edx,DWORD PTR [edx]
9f002d52:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:192
			while (--field_width > 0)
9f002d54:	eb 0c                	jmp    9f002d62 <.L61+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:193
				*str++ = ' ';
9f002d56:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002d59:	8d 50 01             	lea    edx,[eax+0x1]
9f002d5c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002d5f:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:192
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
					*str++ = ' ';
			*str++ = (unsigned char)va_arg(args, int);
			while (--field_width > 0)
9f002d62:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f002d66:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f002d6a:	7f ea                	jg     9f002d56 <.L61+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:194
				*str++ = ' ';
			continue;
9f002d6c:	e9 18 02 00 00       	jmp    9f002f89 <.L96+0x8c>

9f002d71 <.L66>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:197

		case 's':
			s = va_arg(args, char *);
9f002d71:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002d74:	8d 50 04             	lea    edx,[eax+0x4]
9f002d77:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002d7a:	8b 00                	mov    eax,DWORD PTR [eax]
9f002d7c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:198
			if (s) //CLR 01/09/2019: Handling case where pointer is NULL
9f002d7f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
9f002d83:	74 13                	je     9f002d98 <.L66+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:199
                            len = strlenI(s);
9f002d85:	83 ec 0c             	sub    esp,0xc
9f002d88:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f002d8b:	e8 c0 05 00 00       	call   9f003350 <strlenI>
9f002d90:	83 c4 10             	add    esp,0x10
9f002d93:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f002d96:	eb 07                	jmp    9f002d9f <.L66+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:201
                        else
                            len = 0;
9f002d98:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:203

			if (!(flags & LEFT))
9f002d9f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002da2:	83 e0 10             	and    eax,0x10
9f002da5:	85 c0                	test   eax,eax
9f002da7:	75 1c                	jne    9f002dc5 <.L66+0x54>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204
				while (len < field_width--)
9f002da9:	eb 0c                	jmp    9f002db7 <.L66+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:205
					*str++ = ' ';
9f002dab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002dae:	8d 50 01             	lea    edx,[eax+0x1]
9f002db1:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002db4:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204
                            len = strlenI(s);
                        else
                            len = 0;

			if (!(flags & LEFT))
				while (len < field_width--)
9f002db7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f002dba:	8d 50 ff             	lea    edx,[eax-0x1]
9f002dbd:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f002dc0:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f002dc3:	7f e6                	jg     9f002dab <.L66+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206
					*str++ = ' ';
			for (i = 0; i < len; ++i)
9f002dc5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f002dcc:	eb 1b                	jmp    9f002de9 <.L66+0x78>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:207 (discriminator 3)
				*str++ = *s++;
9f002dce:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002dd1:	8d 50 01             	lea    edx,[eax+0x1]
9f002dd4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002dd7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f002dda:	8d 4a 01             	lea    ecx,[edx+0x1]
9f002ddd:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
9f002de0:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002de3:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206 (discriminator 3)
                            len = 0;

			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
9f002de5:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206 (discriminator 1)
9f002de9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002dec:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f002def:	7c dd                	jl     9f002dce <.L66+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:208
				*str++ = *s++;
			while (len < field_width--)
9f002df1:	eb 0c                	jmp    9f002dff <.L66+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:209
				*str++ = ' ';
9f002df3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002df6:	8d 50 01             	lea    edx,[eax+0x1]
9f002df9:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002dfc:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:208
			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
				*str++ = *s++;
			while (len < field_width--)
9f002dff:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f002e02:	8d 50 ff             	lea    edx,[eax-0x1]
9f002e05:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f002e08:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f002e0b:	7f e6                	jg     9f002df3 <.L66+0x82>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:210
				*str++ = ' ';
			continue;
9f002e0d:	e9 77 01 00 00       	jmp    9f002f89 <.L96+0x8c>

9f002e12 <.L65>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:213

		case 'p':
			if (field_width == -1) {
9f002e12:	83 7d d8 ff          	cmp    DWORD PTR [ebp-0x28],0xffffffff
9f002e16:	75 0b                	jne    9f002e23 <.L65+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:214
				field_width = 2 * sizeof(void *);
9f002e18:	c7 45 d8 08 00 00 00 	mov    DWORD PTR [ebp-0x28],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:215
				flags |= ZEROPAD;
9f002e1f:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:218
			}
			str = number(str,
				     (unsigned long)va_arg(args, void *), 16,
9f002e23:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002e26:	8d 50 04             	lea    edx,[eax+0x4]
9f002e29:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002e2c:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:217
		case 'p':
			if (field_width == -1) {
				field_width = 2 * sizeof(void *);
				flags |= ZEROPAD;
			}
			str = number(str,
9f002e2e:	83 ec 08             	sub    esp,0x8
9f002e31:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f002e34:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f002e37:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f002e3a:	6a 10                	push   0x10
9f002e3c:	50                   	push   eax
9f002e3d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f002e40:	e8 ea fa ff ff       	call   9f00292f <number>
9f002e45:	83 c4 20             	add    esp,0x20
9f002e48:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:220
				     (unsigned long)va_arg(args, void *), 16,
				     field_width, precision, flags);
			continue;
9f002e4b:	e9 39 01 00 00       	jmp    9f002f89 <.L96+0x8c>

9f002e50 <.L63>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:223

		case 'n':
			if (qualifier == 'l') {
9f002e50:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f002e54:	75 20                	jne    9f002e76 <.L63+0x26>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:224
				long *ip = va_arg(args, long *);
9f002e56:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002e59:	8d 50 04             	lea    edx,[eax+0x4]
9f002e5c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002e5f:	8b 00                	mov    eax,DWORD PTR [eax]
9f002e61:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:225
				*ip = (str - buf);
9f002e64:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f002e67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e6a:	29 c2                	sub    edx,eax
9f002e6c:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
9f002e6f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:230
			} else {
				int *ip = va_arg(args, int *);
				*ip = (str - buf);
			}
			continue;
9f002e71:	e9 13 01 00 00       	jmp    9f002f89 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:227
		case 'n':
			if (qualifier == 'l') {
				long *ip = va_arg(args, long *);
				*ip = (str - buf);
			} else {
				int *ip = va_arg(args, int *);
9f002e76:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002e79:	8d 50 04             	lea    edx,[eax+0x4]
9f002e7c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002e7f:	8b 00                	mov    eax,DWORD PTR [eax]
9f002e81:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:228
				*ip = (str - buf);
9f002e84:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f002e87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e8a:	29 c2                	sub    edx,eax
9f002e8c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
9f002e8f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:230
			}
			continue;
9f002e91:	e9 f3 00 00 00       	jmp    9f002f89 <.L96+0x8c>

9f002e96 <.L58>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:233

		case '%':
			*str++ = '%';
9f002e96:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002e99:	8d 50 01             	lea    edx,[eax+0x1]
9f002e9c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002e9f:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:234
			continue;
9f002ea2:	e9 e2 00 00 00       	jmp    9f002f89 <.L96+0x8c>

9f002ea7 <.L64>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:238

			/* integer number formats - set up the flags and "break" */
		case 'o':
			base = 8;
9f002ea7:	c7 45 e8 08 00 00 00 	mov    DWORD PTR [ebp-0x18],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:239
			break;
9f002eae:	eb 4e                	jmp    9f002efe <.L96+0x1>

9f002eb0 <.L68>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:242

		case 'x':
			flags |= SMALL;
9f002eb0:	83 4d dc 20          	or     DWORD PTR [ebp-0x24],0x20

9f002eb4 <.L60>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:244
		case 'X':
			base = 16;
9f002eb4:	c7 45 e8 10 00 00 00 	mov    DWORD PTR [ebp-0x18],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:245
			break;
9f002ebb:	eb 41                	jmp    9f002efe <.L96+0x1>

9f002ebd <.L62>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:249

		case 'd':
		case 'i':
			flags |= SIGN;
9f002ebd:	83 4d dc 02          	or     DWORD PTR [ebp-0x24],0x2
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:251
		case 'u':
			break;
9f002ec1:	eb 3a                	jmp    9f002efd <.L96>

9f002ec3 <.L57>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:254

		default:
			*str++ = '%';
9f002ec3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002ec6:	8d 50 01             	lea    edx,[eax+0x1]
9f002ec9:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002ecc:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:255
			if (*fmt)
9f002ecf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002ed2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002ed5:	84 c0                	test   al,al
9f002ed7:	74 16                	je     9f002eef <.L57+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:256
				*str++ = *fmt;
9f002ed9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002edc:	8d 50 01             	lea    edx,[eax+0x1]
9f002edf:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002ee2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002ee5:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002ee8:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:259
			else
				--fmt;
			continue;
9f002eea:	e9 9a 00 00 00       	jmp    9f002f89 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:258
		default:
			*str++ = '%';
			if (*fmt)
				*str++ = *fmt;
			else
				--fmt;
9f002eef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002ef2:	83 e8 01             	sub    eax,0x1
9f002ef5:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:259
			continue;
9f002ef8:	e9 8c 00 00 00       	jmp    9f002f89 <.L96+0x8c>

9f002efd <.L96>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:251

		case 'd':
		case 'i':
			flags |= SIGN;
		case 'u':
			break;
9f002efd:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:261
				*str++ = *fmt;
			else
				--fmt;
			continue;
		}
		if (qualifier == 'l')
9f002efe:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f002f02:	75 10                	jne    9f002f14 <.L96+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:262
			num = va_arg(args, unsigned long);
9f002f04:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002f07:	8d 50 04             	lea    edx,[eax+0x4]
9f002f0a:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002f0d:	8b 00                	mov    eax,DWORD PTR [eax]
9f002f0f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f002f12:	eb 54                	jmp    9f002f68 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:263
		else if (qualifier == 'h') {
9f002f14:	83 7d d0 68          	cmp    DWORD PTR [ebp-0x30],0x68
9f002f18:	75 26                	jne    9f002f40 <.L96+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:264
			num = (unsigned short)va_arg(args, int);
9f002f1a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002f1d:	8d 50 04             	lea    edx,[eax+0x4]
9f002f20:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002f23:	8b 00                	mov    eax,DWORD PTR [eax]
9f002f25:	25 ff ff 00 00       	and    eax,0xffff
9f002f2a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:265
			if (flags & SIGN)
9f002f2d:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002f30:	83 e0 02             	and    eax,0x2
9f002f33:	85 c0                	test   eax,eax
9f002f35:	74 31                	je     9f002f68 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:266
				num = (short)num;
9f002f37:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002f3a:	98                   	cwde   
9f002f3b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f002f3e:	eb 28                	jmp    9f002f68 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:267
		} else if (flags & SIGN)
9f002f40:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002f43:	83 e0 02             	and    eax,0x2
9f002f46:	85 c0                	test   eax,eax
9f002f48:	74 10                	je     9f002f5a <.L96+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:268
			num = va_arg(args, int);
9f002f4a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002f4d:	8d 50 04             	lea    edx,[eax+0x4]
9f002f50:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002f53:	8b 00                	mov    eax,DWORD PTR [eax]
9f002f55:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f002f58:	eb 0e                	jmp    9f002f68 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:270
		else
			num = va_arg(args, unsigned int);
9f002f5a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002f5d:	8d 50 04             	lea    edx,[eax+0x4]
9f002f60:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002f63:	8b 00                	mov    eax,DWORD PTR [eax]
9f002f65:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:271
		str = number(str, num, base, field_width, precision, flags);
9f002f68:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002f6b:	83 ec 08             	sub    esp,0x8
9f002f6e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f002f71:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f002f74:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f002f77:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f002f7a:	50                   	push   eax
9f002f7b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f002f7e:	e8 ac f9 ff ff       	call   9f00292f <number>
9f002f83:	83 c4 20             	add    esp,0x20
9f002f86:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119 (discriminator 2)
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f002f89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002f8c:	83 c0 01             	add    eax,0x1
9f002f8f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119 (discriminator 1)
9f002f92:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002f95:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002f98:	84 c0                	test   al,al
9f002f9a:	0f 85 ea fb ff ff    	jne    9f002b8a <vsprintf+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:273
			num = va_arg(args, int);
		else
			num = va_arg(args, unsigned int);
		str = number(str, num, base, field_width, precision, flags);
	}
	*str = '\0';
9f002fa0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002fa3:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:274
	return str - buf;
9f002fa6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f002fa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fac:	29 c2                	sub    edx,eax
9f002fae:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:275
}
9f002fb0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002fb3:	c9                   	leave  
9f002fb4:	c3                   	ret    

9f002fb5 <sprintf>:
sprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:278

VISIBLE int sprintf(char *buf, const char *fmt, ...)
{
9f002fb5:	55                   	push   ebp
9f002fb6:	89 e5                	mov    ebp,esp
9f002fb8:	83 ec 18             	sub    esp,0x18
9f002fbb:	e8 02 19 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f002fc0:	05 9c 42 00 00       	add    eax,0x429c
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:282
	va_list args;
	int i;

	va_start(args, fmt);
9f002fc5:	8d 45 10             	lea    eax,[ebp+0x10]
9f002fc8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:283
	i = vsprintf(buf, fmt, args);
9f002fcb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002fce:	83 ec 04             	sub    esp,0x4
9f002fd1:	50                   	push   eax
9f002fd2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002fd5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002fd8:	e8 90 fb ff ff       	call   9f002b6d <vsprintf>
9f002fdd:	83 c4 10             	add    esp,0x10
9f002fe0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:285
	va_end(args);
	return i;
9f002fe3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:286
}
9f002fe6:	c9                   	leave  
9f002fe7:	c3                   	ret    

9f002fe8 <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:17
extern int gets(char* buffer, int maxlen, int stream);


//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
9f002fe8:	55                   	push   ebp
9f002fe9:	89 e5                	mov    ebp,esp
9f002feb:	53                   	push   ebx
9f002fec:	83 ec 14             	sub    esp,0x14
9f002fef:	e8 0c 19 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f002ff4:	81 c3 68 42 00 00    	add    ebx,0x4268
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:19
    char buff[5];
    int buffPtr=0;
9f002ffa:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:21

    memsetI(buff,0,10);
9f003001:	83 ec 04             	sub    esp,0x4
9f003004:	6a 0a                	push   0xa
9f003006:	6a 00                	push   0x0
9f003008:	8d 45 ef             	lea    eax,[ebp-0x11]
9f00300b:	50                   	push   eax
9f00300c:	e8 7f f7 ff ff       	call   9f002790 <memsetI>
9f003011:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:24
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
9f003014:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003017:	8d 50 01             	lea    edx,[eax+0x1]
9f00301a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00301d:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:25
    buff[buffPtr++] = '[';
9f003022:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003025:	8d 50 01             	lea    edx,[eax+0x1]
9f003028:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00302b:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:26
    buff[buffPtr++] = '0';
9f003030:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003033:	8d 50 01             	lea    edx,[eax+0x1]
9f003036:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003039:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:27
    buff[buffPtr++] = 'K';
9f00303e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003041:	8d 50 01             	lea    edx,[eax+0x1]
9f003044:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003047:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:28
    buff[buffPtr] = '\0';
9f00304c:	8d 55 ef             	lea    edx,[ebp-0x11]
9f00304f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003052:	01 d0                	add    eax,edx
9f003054:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:29
    printI(buff);
9f003057:	83 ec 0c             	sub    esp,0xc
9f00305a:	8d 45 ef             	lea    eax,[ebp-0x11]
9f00305d:	50                   	push   eax
9f00305e:	e8 0a e5 ff ff       	call   9f00156d <printI>
9f003063:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:31
    
    return;
9f003066:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:32
}
9f003067:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00306a:	c9                   	leave  
9f00306b:	c3                   	ret    

9f00306c <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
9f00306c:	55                   	push   ebp
9f00306d:	89 e5                	mov    ebp,esp
9f00306f:	53                   	push   ebx
9f003070:	83 ec 04             	sub    esp,0x4
9f003073:	e8 88 18 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f003078:	81 c3 e4 41 00 00    	add    ebx,0x41e4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
     strcpyI (dest + strlenI (dest), src);
9f00307e:	83 ec 0c             	sub    esp,0xc
9f003081:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003084:	e8 c7 02 00 00       	call   9f003350 <strlenI>
9f003089:	83 c4 10             	add    esp,0x10
9f00308c:	89 c2                	mov    edx,eax
9f00308e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003091:	01 d0                	add    eax,edx
9f003093:	83 ec 08             	sub    esp,0x8
9f003096:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003099:	50                   	push   eax
9f00309a:	e8 9d 01 00 00       	call   9f00323c <strcpyI>
9f00309f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     return dest;
9f0030a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
   }
9f0030a5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0030a8:	c9                   	leave  
9f0030a9:	c3                   	ret    

9f0030aa <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:36

   char* strcatI (char *dest, const char *src)
   {
9f0030aa:	55                   	push   ebp
9f0030ab:	89 e5                	mov    ebp,esp
9f0030ad:	53                   	push   ebx
9f0030ae:	83 ec 04             	sub    esp,0x4
9f0030b1:	e8 4a 18 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f0030b6:	81 c3 a6 41 00 00    	add    ebx,0x41a6
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37
     strcpyI (dest + strlenI (dest), src);
9f0030bc:	83 ec 0c             	sub    esp,0xc
9f0030bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0030c2:	e8 89 02 00 00       	call   9f003350 <strlenI>
9f0030c7:	83 c4 10             	add    esp,0x10
9f0030ca:	89 c2                	mov    edx,eax
9f0030cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0030cf:	01 d0                	add    eax,edx
9f0030d1:	83 ec 08             	sub    esp,0x8
9f0030d4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0030d7:	50                   	push   eax
9f0030d8:	e8 5f 01 00 00       	call   9f00323c <strcpyI>
9f0030dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     return dest;
9f0030e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
   }
9f0030e3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0030e6:	c9                   	leave  
9f0030e7:	c3                   	ret    

9f0030e8 <strncatI>:
strncatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:42
   
char *strncatI(char *dest, const char *src, size_t n)
{
9f0030e8:	55                   	push   ebp
9f0030e9:	89 e5                	mov    ebp,esp
9f0030eb:	53                   	push   ebx
9f0030ec:	83 ec 14             	sub    esp,0x14
9f0030ef:	e8 0c 18 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f0030f4:	81 c3 68 41 00 00    	add    ebx,0x4168
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:43
    size_t bytesToCopy=0;
9f0030fa:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
    size_t srcStringLen=strlenI(src);;
9f003101:	83 ec 0c             	sub    esp,0xc
9f003104:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003107:	e8 44 02 00 00       	call   9f003350 <strlenI>
9f00310c:	83 c4 10             	add    esp,0x10
9f00310f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
    
    if (n<=srcStringLen)
9f003112:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003115:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f003118:	77 08                	ja     9f003122 <strncatI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
        bytesToCopy=n;
9f00311a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00311d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f003120:	eb 06                	jmp    9f003128 <strncatI+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:49
    else
        bytesToCopy=srcStringLen;
9f003122:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003125:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:51
    
     strncpyI (dest + strlenI (dest),src,bytesToCopy);
9f003128:	83 ec 0c             	sub    esp,0xc
9f00312b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00312e:	e8 1d 02 00 00       	call   9f003350 <strlenI>
9f003133:	83 c4 10             	add    esp,0x10
9f003136:	89 c2                	mov    edx,eax
9f003138:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00313b:	01 d0                	add    eax,edx
9f00313d:	83 ec 04             	sub    esp,0x4
9f003140:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f003143:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003146:	50                   	push   eax
9f003147:	e8 78 03 00 00       	call   9f0034c4 <strncpyI>
9f00314c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
     return dest;
9f00314f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
}
9f003152:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003155:	c9                   	leave  
9f003156:	c3                   	ret    

9f003157 <strncat>:
strncat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:56

VISIBLE char *strncat(char *dest, const char *src, size_t n)
{
9f003157:	55                   	push   ebp
9f003158:	89 e5                	mov    ebp,esp
9f00315a:	83 ec 08             	sub    esp,0x8
9f00315d:	e8 60 17 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f003162:	05 fa 40 00 00       	add    eax,0x40fa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:57
    return strncatI(dest, src, n);
9f003167:	83 ec 04             	sub    esp,0x4
9f00316a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f00316d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003170:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003173:	e8 70 ff ff ff       	call   9f0030e8 <strncatI>
9f003178:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
9f00317b:	c9                   	leave  
9f00317c:	c3                   	ret    
9f00317d:	66 90                	xchg   ax,ax
9f00317f:	90                   	nop

9f003180 <strcmpI>:
strcmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
   equal to or greater than S2.  */

#include "libChrisOS.h"

int strcmpI (const char *p1, const char *p2)
{
9f003180:	55                   	push   ebp
9f003181:	89 e5                	mov    ebp,esp
9f003183:	56                   	push   esi
9f003184:	53                   	push   ebx
9f003185:	83 ec 10             	sub    esp,0x10
9f003188:	e8 35 17 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f00318d:	05 cf 40 00 00       	add    eax,0x40cf
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:28
  register const unsigned char *s1 = (const unsigned char *) p1;
9f003192:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:29
  register const unsigned char *s2 = (const unsigned char *) p2;
9f003195:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
9f003198:	89 d8                	mov    eax,ebx
9f00319a:	8d 58 01             	lea    ebx,[eax+0x1]
9f00319d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0031a0:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
      c2 = (unsigned char) *s2++;
9f0031a3:	89 f0                	mov    eax,esi
9f0031a5:	8d 70 01             	lea    esi,[eax+0x1]
9f0031a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0031ab:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:36
      if (c1 == '\0')
9f0031ae:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f0031b2:	75 0e                	jne    9f0031c2 <strcmpI+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
	return c1 - c2;
9f0031b4:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f0031b8:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f0031bc:	29 c2                	sub    edx,eax
9f0031be:	89 d0                	mov    eax,edx
9f0031c0:	eb 15                	jmp    9f0031d7 <strcmpI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39
    }
  while (c1 == c2);
9f0031c2:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
9f0031c6:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
9f0031c9:	74 cd                	je     9f003198 <strcmpI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:41

  return c1 - c2;
9f0031cb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f0031cf:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f0031d3:	29 c2                	sub    edx,eax
9f0031d5:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:42
}
9f0031d7:	83 c4 10             	add    esp,0x10
9f0031da:	5b                   	pop    ebx
9f0031db:	5e                   	pop    esi
9f0031dc:	5d                   	pop    ebp
9f0031dd:	c3                   	ret    

9f0031de <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:45

VISIBLE int strcmp(const char *p1, const char *p2)
{
9f0031de:	55                   	push   ebp
9f0031df:	89 e5                	mov    ebp,esp
9f0031e1:	e8 dc 16 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0031e6:	05 76 40 00 00       	add    eax,0x4076
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:46
    return strcmpI(p1, p2);
9f0031eb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0031ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0031f1:	e8 8a ff ff ff       	call   9f003180 <strcmpI>
9f0031f6:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:47
9f0031f9:	c9                   	leave  
9f0031fa:	c3                   	ret    
9f0031fb:	90                   	nop

9f0031fc <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
9f0031fc:	55                   	push   ebp
9f0031fd:	89 e5                	mov    ebp,esp
9f0031ff:	83 ec 10             	sub    esp,0x10
9f003202:	e8 bb 16 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f003207:	05 55 40 00 00       	add    eax,0x4055
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
9f00320c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00320f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
9f003212:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
9f003213:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003216:	8d 50 01             	lea    edx,[eax+0x1]
9f003219:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f00321c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00321f:	8d 4a 01             	lea    ecx,[edx+0x1]
9f003222:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f003225:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003228:	88 10                	mov    BYTE PTR [eax],dl
9f00322a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00322d:	84 c0                	test   al,al
9f00322f:	75 e2                	jne    9f003213 <strcpy+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f003231:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003234:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
9f003237:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
9f00323a:	c9                   	leave  
9f00323b:	c3                   	ret    

9f00323c <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
9f00323c:	55                   	push   ebp
9f00323d:	89 e5                	mov    ebp,esp
9f00323f:	83 ec 10             	sub    esp,0x10
9f003242:	e8 7b 16 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f003247:	05 15 40 00 00       	add    eax,0x4015
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
9f00324c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00324f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
9f003252:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
9f003253:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003256:	8d 50 01             	lea    edx,[eax+0x1]
9f003259:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f00325c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00325f:	8d 4a 01             	lea    ecx,[edx+0x1]
9f003262:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f003265:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003268:	88 10                	mov    BYTE PTR [eax],dl
9f00326a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00326d:	84 c0                	test   al,al
9f00326f:	75 e2                	jne    9f003253 <strcpyI+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f003271:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003274:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
9f003277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
9f00327a:	c9                   	leave  
9f00327b:	c3                   	ret    

9f00327c <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
9f00327c:	55                   	push   ebp
9f00327d:	89 e5                	mov    ebp,esp
9f00327f:	83 ec 10             	sub    esp,0x10
9f003282:	e8 3b 16 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f003287:	05 d5 3f 00 00       	add    eax,0x3fd5
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
9f00328c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00328f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
9f003292:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
9f003293:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003296:	8d 50 01             	lea    edx,[eax+0x1]
9f003299:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f00329c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00329f:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0032a2:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f0032a5:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0032a8:	88 10                	mov    BYTE PTR [eax],dl
9f0032aa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0032ad:	84 c0                	test   al,al
9f0032af:	74 0d                	je     9f0032be <strcpyc+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
9f0032b1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0032b4:	8d 50 ff             	lea    edx,[eax-0x1]
9f0032b7:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0032ba:	85 c0                	test   eax,eax
9f0032bc:	75 d5                	jne    9f003293 <strcpyc+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
9f0032be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
9f0032c1:	c9                   	leave  
9f0032c2:	c3                   	ret    
9f0032c3:	90                   	nop

9f0032c4 <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
9f0032c4:	55                   	push   ebp
9f0032c5:	89 e5                	mov    ebp,esp
9f0032c7:	83 ec 04             	sub    esp,0x4
9f0032ca:	e8 f3 15 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0032cf:	05 8d 3f 00 00       	add    eax,0x3f8d
9f0032d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0032d7:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
9f0032da:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
9f0032de:	7e 0d                	jle    9f0032ed <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
9f0032e0:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
9f0032e4:	7f 07                	jg     9f0032ed <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
9f0032e6:	b8 01 00 00 00       	mov    eax,0x1
9f0032eb:	eb 05                	jmp    9f0032f2 <check_digit+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
9f0032ed:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
9f0032f2:	c9                   	leave  
9f0032f3:	c3                   	ret    

9f0032f4 <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
9f0032f4:	55                   	push   ebp
9f0032f5:	89 e5                	mov    ebp,esp
9f0032f7:	83 ec 10             	sub    esp,0x10
9f0032fa:	e8 c3 15 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0032ff:	05 5d 3f 00 00       	add    eax,0x3f5d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
9f003304:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
9f00330b:	eb 27                	jmp    9f003334 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
9f00330d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003310:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003313:	89 c2                	mov    edx,eax
9f003315:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003318:	01 d0                	add    eax,edx
9f00331a:	0f be c0             	movsx  eax,al
9f00331d:	50                   	push   eax
9f00331e:	e8 a1 ff ff ff       	call   9f0032c4 <check_digit>
9f003323:	83 c4 04             	add    esp,0x4
9f003326:	83 f0 01             	xor    eax,0x1
9f003329:	84 c0                	test   al,al
9f00332b:	74 07                	je     9f003334 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
9f00332d:	b8 00 00 00 00       	mov    eax,0x0
9f003332:	eb 17                	jmp    9f00334b <strisnum+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18

VISIBLE bool strisnum(char* str)
{
    int cnt=0;
    
    while (*str+cnt)
9f003334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003337:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00333a:	0f be d0             	movsx  edx,al
9f00333d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003340:	01 d0                	add    eax,edx
9f003342:	85 c0                	test   eax,eax
9f003344:	75 c7                	jne    9f00330d <strisnum+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
        if (!check_digit(*str+cnt))
            return false;
    return true;
9f003346:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
9f00334b:	c9                   	leave  
9f00334c:	c3                   	ret    
9f00334d:	66 90                	xchg   ax,ax
9f00334f:	90                   	nop

9f003350 <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
//#include <stddef.h>
#include "libChrisOS.h"

size_t strlenI(const char* str) {
9f003350:	55                   	push   ebp
9f003351:	89 e5                	mov    ebp,esp
9f003353:	83 ec 10             	sub    esp,0x10
9f003356:	e8 67 15 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f00335b:	05 01 3f 00 00       	add    eax,0x3f01
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
          size_t ret = 0;
9f003360:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
        while ( str[ret] != 0 )
9f003367:	eb 04                	jmp    9f00336d <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
9f003369:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
//#include <stddef.h>
#include "libChrisOS.h"

size_t strlenI(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
9f00336d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003370:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003373:	01 d0                	add    eax,edx
9f003375:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003378:	84 c0                	test   al,al
9f00337a:	75 ed                	jne    9f003369 <strlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
                ret++;
        return ret;
9f00337c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:9
}
9f00337f:	c9                   	leave  
9f003380:	c3                   	ret    

9f003381 <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12

__attribute__((visibility("default"))) size_t strlen(const char* str) 
{
9f003381:	55                   	push   ebp
9f003382:	89 e5                	mov    ebp,esp
9f003384:	e8 39 15 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f003389:	05 d3 3e 00 00       	add    eax,0x3ed3
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
    return strlenI(str);
9f00338e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003391:	e8 ba ff ff ff       	call   9f003350 <strlenI>
9f003396:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
}
9f003399:	c9                   	leave  
9f00339a:	c3                   	ret    

9f00339b <strnlenI>:
strnlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:17

size_t strnlenI(const char* str, size_t maxlen)
{
9f00339b:	55                   	push   ebp
9f00339c:	89 e5                	mov    ebp,esp
9f00339e:	83 ec 10             	sub    esp,0x10
9f0033a1:	e8 1c 15 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0033a6:	05 b6 3e 00 00       	add    eax,0x3eb6
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:18
  size_t ret = 0;
9f0033ab:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19
  while ( str[ret] != 0 && ret<maxlen)
9f0033b2:	eb 04                	jmp    9f0033b8 <strnlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:20
          ret++;
9f0033b4:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19
}

size_t strnlenI(const char* str, size_t maxlen)
{
  size_t ret = 0;
  while ( str[ret] != 0 && ret<maxlen)
9f0033b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0033bb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0033be:	01 d0                	add    eax,edx
9f0033c0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0033c3:	84 c0                	test   al,al
9f0033c5:	74 08                	je     9f0033cf <strnlenI+0x34>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19 (discriminator 1)
9f0033c7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0033ca:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f0033cd:	72 e5                	jb     9f0033b4 <strnlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:21
          ret++;
  return ret;
9f0033cf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:22
}
9f0033d2:	c9                   	leave  
9f0033d3:	c3                   	ret    

9f0033d4 <strnlen>:
strnlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:25

VISIBLE size_t strnlen(const char* str, int maxlen)
{
9f0033d4:	55                   	push   ebp
9f0033d5:	89 e5                	mov    ebp,esp
9f0033d7:	e8 e6 14 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0033dc:	05 80 3e 00 00       	add    eax,0x3e80
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:26
    return strnlenI(str, maxlen);
9f0033e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0033e4:	50                   	push   eax
9f0033e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0033e8:	e8 ae ff ff ff       	call   9f00339b <strnlenI>
9f0033ed:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:27
9f0033f0:	c9                   	leave  
9f0033f1:	c3                   	ret    
9f0033f2:	66 90                	xchg   ax,ax

9f0033f4 <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
9f0033f4:	55                   	push   ebp
9f0033f5:	89 e5                	mov    ebp,esp
9f0033f7:	e8 c6 14 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0033fc:	05 60 3e 00 00       	add    eax,0x3e60
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
9f003401:	eb 4b                	jmp    9f00344e <strncmp+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
9f003403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003406:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003409:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00340c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00340f:	38 c2                	cmp    dl,al
9f003411:	74 1e                	je     9f003431 <strncmp+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f003413:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003416:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003419:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00341c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00341f:	38 c2                	cmp    dl,al
9f003421:	73 07                	jae    9f00342a <strncmp+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
9f003423:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f003428:	eb 2f                	jmp    9f003459 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
9f00342a:	b8 01 00 00 00       	mov    eax,0x1
9f00342f:	eb 28                	jmp    9f003459 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
9f003431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003434:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003437:	84 c0                	test   al,al
9f003439:	75 07                	jne    9f003442 <strncmp+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
9f00343b:	b8 00 00 00 00       	mov    eax,0x0
9f003440:	eb 17                	jmp    9f003459 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f003442:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f003446:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f00344a:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
9f00344e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003452:	75 af                	jne    9f003403 <strncmp+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f003454:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
9f003459:	5d                   	pop    ebp
9f00345a:	c3                   	ret    

9f00345b <strncmpI>:
strncmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:23

int strncmpI(const char *s1, const char *s2, size_t n)
{
9f00345b:	55                   	push   ebp
9f00345c:	89 e5                	mov    ebp,esp
9f00345e:	e8 5f 14 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f003463:	05 f9 3d 00 00       	add    eax,0x3df9
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
9f003468:	eb 4b                	jmp    9f0034b5 <strncmpI+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:25
	if (*s1 != *s2)
9f00346a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00346d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003470:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003473:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003476:	38 c2                	cmp    dl,al
9f003478:	74 1e                	je     9f003498 <strncmpI+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f00347a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00347d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003480:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003483:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003486:	38 c2                	cmp    dl,al
9f003488:	73 07                	jae    9f003491 <strncmpI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 1)
9f00348a:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f00348f:	eb 2f                	jmp    9f0034c0 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 2)
9f003491:	b8 01 00 00 00       	mov    eax,0x1
9f003496:	eb 28                	jmp    9f0034c0 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:27
	else if (*s1 == '\0')
9f003498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00349b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00349e:	84 c0                	test   al,al
9f0034a0:	75 07                	jne    9f0034a9 <strncmpI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:28
	    return 0;
9f0034a2:	b8 00 00 00 00       	mov    eax,0x0
9f0034a7:	eb 17                	jmp    9f0034c0 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    return 0;
}

int strncmpI(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f0034a9:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f0034ad:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f0034b1:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24 (discriminator 1)
9f0034b5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0034b9:	75 af                	jne    9f00346a <strncmpI+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:29
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f0034bb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:30
}
9f0034c0:	5d                   	pop    ebp
9f0034c1:	c3                   	ret    
9f0034c2:	66 90                	xchg   ax,ax

9f0034c4 <strncpyI>:
strncpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
9f0034c4:	55                   	push   ebp
9f0034c5:	89 e5                	mov    ebp,esp
9f0034c7:	83 ec 10             	sub    esp,0x10
9f0034ca:	e8 f3 13 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0034cf:	05 8d 3d 00 00       	add    eax,0x3d8d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
9f0034d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0034d7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
9f0034da:	eb 1b                	jmp    9f0034f7 <strncpyI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
9f0034dc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0034df:	8d 50 01             	lea    edx,[eax+0x1]
9f0034e2:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0034e5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0034e8:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0034eb:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f0034ee:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0034f1:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
9f0034f3:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
9f0034f7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0034fb:	74 1c                	je     9f003519 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
9f0034fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003500:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003503:	84 c0                	test   al,al
9f003505:	75 d5                	jne    9f0034dc <strncpyI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f003507:	eb 10                	jmp    9f003519 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
9f003509:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00350c:	8d 50 01             	lea    edx,[eax+0x1]
9f00350f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f003512:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
9f003515:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f003519:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f00351d:	75 ea                	jne    9f003509 <strncpyI+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    if (n==0)
9f00351f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003523:	75 06                	jne    9f00352b <strncpyI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
        *s='\0';
9f003525:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003528:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:26
    return s1;
9f00352b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:27
}
9f00352e:	c9                   	leave  
9f00352f:	c3                   	ret    

9f003530 <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:30

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
9f003530:	55                   	push   ebp
9f003531:	89 e5                	mov    ebp,esp
9f003533:	e8 8a 13 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f003538:	05 24 3d 00 00       	add    eax,0x3d24
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:31
    return strncpyI(s1, s2, n);
9f00353d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f003540:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003543:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003546:	e8 79 ff ff ff       	call   9f0034c4 <strncpyI>
9f00354b:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:32
}
9f00354e:	c9                   	leave  
9f00354f:	c3                   	ret    

9f003550 <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
9f003550:	55                   	push   ebp
9f003551:	89 e5                	mov    ebp,esp
9f003553:	57                   	push   edi
9f003554:	56                   	push   esi
9f003555:	53                   	push   ebx
9f003556:	83 ec 08             	sub    esp,0x8
9f003559:	e8 64 13 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f00355e:	05 fe 3c 00 00       	add    eax,0x3cfe
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
9f003563:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f003566:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
9f00356d:	89 f0                	mov    eax,esi
9f00356f:	8d 70 01             	lea    esi,[eax+0x1]
9f003572:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003575:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
9f003578:	83 fb 20             	cmp    ebx,0x20
9f00357b:	74 f0                	je     9f00356d <strtoul+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
9f00357d:	83 fb 2d             	cmp    ebx,0x2d
9f003580:	75 14                	jne    9f003596 <strtoul+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
9f003582:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
9f003589:	89 f0                	mov    eax,esi
9f00358b:	8d 70 01             	lea    esi,[eax+0x1]
9f00358e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003591:	0f be d8             	movsx  ebx,al
9f003594:	eb 10                	jmp    9f0035a6 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
9f003596:	83 fb 2b             	cmp    ebx,0x2b
9f003599:	75 0b                	jne    9f0035a6 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
9f00359b:	89 f0                	mov    eax,esi
9f00359d:	8d 70 01             	lea    esi,[eax+0x1]
9f0035a0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0035a3:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
9f0035a6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0035aa:	74 06                	je     9f0035b2 <strtoul+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
9f0035ac:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f0035b0:	75 26                	jne    9f0035d8 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
9f0035b2:	83 fb 30             	cmp    ebx,0x30
9f0035b5:	75 21                	jne    9f0035d8 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f0035b7:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0035ba:	3c 78                	cmp    al,0x78
9f0035bc:	74 07                	je     9f0035c5 <strtoul+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
9f0035be:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0035c1:	3c 58                	cmp    al,0x58
9f0035c3:	75 13                	jne    9f0035d8 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
9f0035c5:	8d 46 01             	lea    eax,[esi+0x1]
9f0035c8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0035cb:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
9f0035ce:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
9f0035d1:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
9f0035d8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0035dc:	75 14                	jne    9f0035f2 <strtoul+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
9f0035de:	83 fb 30             	cmp    ebx,0x30
9f0035e1:	75 07                	jne    9f0035ea <strtoul+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
9f0035e3:	b8 08 00 00 00       	mov    eax,0x8
9f0035e8:	eb 05                	jmp    9f0035ef <strtoul+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
9f0035ea:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
9f0035ef:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
9f0035f2:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0035f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f0035fa:	ba 00 00 00 00       	mov    edx,0x0
9f0035ff:	f7 f1                	div    ecx
9f003601:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
9f003604:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f003607:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f00360c:	ba 00 00 00 00       	mov    edx,0x0
9f003611:	f7 f1                	div    ecx
9f003613:	89 d0                	mov    eax,edx
9f003615:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
9f003617:	bf 00 00 00 00       	mov    edi,0x0
9f00361c:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
9f003621:	8d 43 d0             	lea    eax,[ebx-0x30]
9f003624:	83 f8 09             	cmp    eax,0x9
9f003627:	77 05                	ja     9f00362e <strtoul+0xde>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
9f003629:	83 eb 30             	sub    ebx,0x30
9f00362c:	eb 25                	jmp    9f003653 <strtoul+0x103>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
9f00362e:	89 d8                	mov    eax,ebx
9f003630:	83 c8 20             	or     eax,0x20
9f003633:	83 e8 61             	sub    eax,0x61
9f003636:	83 f8 19             	cmp    eax,0x19
9f003639:	77 56                	ja     9f003691 <strtoul+0x141>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f00363b:	83 fb 40             	cmp    ebx,0x40
9f00363e:	7e 0c                	jle    9f00364c <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
9f003640:	83 fb 5a             	cmp    ebx,0x5a
9f003643:	7f 07                	jg     9f00364c <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
9f003645:	b8 37 00 00 00       	mov    eax,0x37
9f00364a:	eb 05                	jmp    9f003651 <strtoul+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
9f00364c:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
9f003651:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
9f003653:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f003656:	7d 3c                	jge    9f003694 <strtoul+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f003658:	89 c8                	mov    eax,ecx
9f00365a:	85 c0                	test   eax,eax
9f00365c:	78 10                	js     9f00366e <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
9f00365e:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f003661:	77 0b                	ja     9f00366e <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
9f003663:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f003666:	75 0d                	jne    9f003675 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
9f003668:	89 d0                	mov    eax,edx
9f00366a:	39 c3                	cmp    ebx,eax
9f00366c:	7e 07                	jle    9f003675 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
9f00366e:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f003673:	eb 0f                	jmp    9f003684 <strtoul+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
9f003675:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
9f00367a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00367d:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
9f003680:	89 d8                	mov    eax,ebx
9f003682:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f003684:	89 f0                	mov    eax,esi
9f003686:	8d 70 01             	lea    esi,[eax+0x1]
9f003689:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00368c:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f00368f:	eb 90                	jmp    9f003621 <strtoul+0xd1>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f003691:	90                   	nop
9f003692:	eb 01                	jmp    9f003695 <strtoul+0x145>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
9f003694:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f003695:	89 c8                	mov    eax,ecx
9f003697:	85 c0                	test   eax,eax
9f003699:	79 07                	jns    9f0036a2 <strtoul+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
9f00369b:	bf ff ff ff ff       	mov    edi,0xffffffff
9f0036a0:	eb 08                	jmp    9f0036aa <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
9f0036a2:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0036a6:	74 02                	je     9f0036aa <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
9f0036a8:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
9f0036aa:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f0036ae:	74 13                	je     9f0036c3 <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
9f0036b0:	89 c8                	mov    eax,ecx
9f0036b2:	85 c0                	test   eax,eax
9f0036b4:	74 05                	je     9f0036bb <strtoul+0x16b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
9f0036b6:	8d 46 ff             	lea    eax,[esi-0x1]
9f0036b9:	eb 03                	jmp    9f0036be <strtoul+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
9f0036bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
9f0036be:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0036c1:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
9f0036c3:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
9f0036c5:	83 c4 08             	add    esp,0x8
9f0036c8:	5b                   	pop    ebx
9f0036c9:	5e                   	pop    esi
9f0036ca:	5f                   	pop    edi
9f0036cb:	5d                   	pop    ebp
9f0036cc:	c3                   	ret    
9f0036cd:	66 90                	xchg   ax,ax
9f0036cf:	90                   	nop

9f0036d0 <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
9f0036d0:	55                   	push   ebp
9f0036d1:	89 e5                	mov    ebp,esp
9f0036d3:	e8 ea 11 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0036d8:	05 84 3b 00 00       	add    eax,0x3b84
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
9f0036dd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0036e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036e3:	01 d0                	add    eax,edx
9f0036e5:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
9f0036e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
9f0036eb:	5d                   	pop    ebp
9f0036ec:	c3                   	ret    
9f0036ed:	66 90                	xchg   ax,ax
9f0036ef:	90                   	nop

9f0036f0 <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
9f0036f0:	55                   	push   ebp
9f0036f1:	89 e5                	mov    ebp,esp
9f0036f3:	57                   	push   edi
9f0036f4:	56                   	push   esi
9f0036f5:	53                   	push   ebx
9f0036f6:	83 ec 0c             	sub    esp,0xc
9f0036f9:	e8 c4 11 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f0036fe:	05 5e 3b 00 00       	add    eax,0x3b5e
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
9f003703:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f003706:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
9f00370d:	89 f0                	mov    eax,esi
9f00370f:	8d 70 01             	lea    esi,[eax+0x1]
9f003712:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003715:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
9f003718:	83 fb 20             	cmp    ebx,0x20
9f00371b:	74 f0                	je     9f00370d <strtol+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
9f00371d:	83 fb 2d             	cmp    ebx,0x2d
9f003720:	75 14                	jne    9f003736 <strtol+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
9f003722:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
9f003729:	89 f0                	mov    eax,esi
9f00372b:	8d 70 01             	lea    esi,[eax+0x1]
9f00372e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003731:	0f be d8             	movsx  ebx,al
9f003734:	eb 10                	jmp    9f003746 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
9f003736:	83 fb 2b             	cmp    ebx,0x2b
9f003739:	75 0b                	jne    9f003746 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
9f00373b:	89 f0                	mov    eax,esi
9f00373d:	8d 70 01             	lea    esi,[eax+0x1]
9f003740:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003743:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
9f003746:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f00374a:	74 06                	je     9f003752 <strtol+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
9f00374c:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f003750:	75 26                	jne    9f003778 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
9f003752:	83 fb 30             	cmp    ebx,0x30
9f003755:	75 21                	jne    9f003778 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f003757:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f00375a:	3c 78                	cmp    al,0x78
9f00375c:	74 07                	je     9f003765 <strtol+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
9f00375e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f003761:	3c 58                	cmp    al,0x58
9f003763:	75 13                	jne    9f003778 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
9f003765:	8d 46 01             	lea    eax,[esi+0x1]
9f003768:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00376b:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
9f00376e:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
9f003771:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
9f003778:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f00377c:	75 14                	jne    9f003792 <strtol+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
9f00377e:	83 fb 30             	cmp    ebx,0x30
9f003781:	75 07                	jne    9f00378a <strtol+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
9f003783:	b8 08 00 00 00       	mov    eax,0x8
9f003788:	eb 05                	jmp    9f00378f <strtol+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
9f00378a:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
9f00378f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
9f003792:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f003796:	74 07                	je     9f00379f <strtol+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
9f003798:	b8 00 00 00 80       	mov    eax,0x80000000
9f00379d:	eb 05                	jmp    9f0037a4 <strtol+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
9f00379f:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
9f0037a4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0037a7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f0037aa:	ba 00 00 00 00       	mov    edx,0x0
9f0037af:	f7 f1                	div    ecx
9f0037b1:	89 d1                	mov    ecx,edx
9f0037b3:	89 c8                	mov    eax,ecx
9f0037b5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
9f0037b8:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
9f0037bb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0037be:	ba 00 00 00 00       	mov    edx,0x0
9f0037c3:	f7 f7                	div    edi
9f0037c5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
9f0037c8:	bf 00 00 00 00       	mov    edi,0x0
9f0037cd:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
9f0037d2:	8d 43 d0             	lea    eax,[ebx-0x30]
9f0037d5:	83 f8 09             	cmp    eax,0x9
9f0037d8:	77 05                	ja     9f0037df <strtol+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
9f0037da:	83 eb 30             	sub    ebx,0x30
9f0037dd:	eb 25                	jmp    9f003804 <strtol+0x114>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
9f0037df:	89 d8                	mov    eax,ebx
9f0037e1:	83 c8 20             	or     eax,0x20
9f0037e4:	83 e8 61             	sub    eax,0x61
9f0037e7:	83 f8 19             	cmp    eax,0x19
9f0037ea:	77 55                	ja     9f003841 <strtol+0x151>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f0037ec:	83 fb 40             	cmp    ebx,0x40
9f0037ef:	7e 0c                	jle    9f0037fd <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
9f0037f1:	83 fb 5a             	cmp    ebx,0x5a
9f0037f4:	7f 07                	jg     9f0037fd <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
9f0037f6:	b8 37 00 00 00       	mov    eax,0x37
9f0037fb:	eb 05                	jmp    9f003802 <strtol+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
9f0037fd:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
9f003802:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
9f003804:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f003807:	7d 3b                	jge    9f003844 <strtol+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f003809:	89 c8                	mov    eax,ecx
9f00380b:	85 c0                	test   eax,eax
9f00380d:	78 0f                	js     9f00381e <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
9f00380f:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f003812:	77 0a                	ja     9f00381e <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
9f003814:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f003817:	75 0c                	jne    9f003825 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
9f003819:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
9f00381c:	7e 07                	jle    9f003825 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
9f00381e:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f003823:	eb 0f                	jmp    9f003834 <strtol+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
9f003825:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
9f00382a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00382d:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
9f003830:	89 d8                	mov    eax,ebx
9f003832:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f003834:	89 f0                	mov    eax,esi
9f003836:	8d 70 01             	lea    esi,[eax+0x1]
9f003839:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00383c:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f00383f:	eb 91                	jmp    9f0037d2 <strtol+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f003841:	90                   	nop
9f003842:	eb 01                	jmp    9f003845 <strtol+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
9f003844:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f003845:	89 c8                	mov    eax,ecx
9f003847:	85 c0                	test   eax,eax
9f003849:	79 16                	jns    9f003861 <strtol+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
9f00384b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00384f:	74 07                	je     9f003858 <strtol+0x168>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
9f003851:	b8 00 00 00 80       	mov    eax,0x80000000
9f003856:	eb 05                	jmp    9f00385d <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
9f003858:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
9f00385d:	89 c7                	mov    edi,eax
9f00385f:	eb 08                	jmp    9f003869 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
9f003861:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f003865:	74 02                	je     9f003869 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
9f003867:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
9f003869:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f00386d:	74 13                	je     9f003882 <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
9f00386f:	89 c8                	mov    eax,ecx
9f003871:	85 c0                	test   eax,eax
9f003873:	74 05                	je     9f00387a <strtol+0x18a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
9f003875:	8d 46 ff             	lea    eax,[esi-0x1]
9f003878:	eb 03                	jmp    9f00387d <strtol+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
9f00387a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
9f00387d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003880:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
9f003882:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
9f003884:	83 c4 0c             	add    esp,0xc
9f003887:	5b                   	pop    ebx
9f003888:	5e                   	pop    esi
9f003889:	5f                   	pop    edi
9f00388a:	5d                   	pop    ebp
9f00388b:	c3                   	ret    

9f00388c <strtrimI>:
strtrimI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

void strtrimI(char *input)
{
9f00388c:	55                   	push   ebp
9f00388d:	89 e5                	mov    ebp,esp
9f00388f:	53                   	push   ebx
9f003890:	83 ec 14             	sub    esp,0x14
9f003893:	e8 2a 10 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f003898:	05 c4 39 00 00       	add    eax,0x39c4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
9f00389d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0038a0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0038a3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0038a6:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f0038a9:	eb 04                	jmp    9f0038af <strtrimI+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
9f0038ab:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *dst = input, *src = input;
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f0038af:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0038b2:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0038b5:	80 fa 20             	cmp    dl,0x20
9f0038b8:	74 f1                	je     9f0038ab <strtrimI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
      ++src;
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
9f0038ba:	83 ec 0c             	sub    esp,0xc
9f0038bd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0038c0:	89 c3                	mov    ebx,eax
9f0038c2:	e8 89 fa ff ff       	call   9f003350 <strlenI>
9f0038c7:	83 c4 10             	add    esp,0x10
9f0038ca:	8d 50 ff             	lea    edx,[eax-0x1]
9f0038cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0038d0:	01 d0                	add    eax,edx
9f0038d2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
9f0038d5:	eb 0c                	jmp    9f0038e3 <strtrimI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
9f0038d7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0038da:	8d 50 ff             	lea    edx,[eax-0x1]
9f0038dd:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
9f0038e0:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
   while (end > src && *end==' ')
9f0038e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0038e6:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0038e9:	76 0a                	jbe    9f0038f5 <strtrimI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
9f0038eb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0038ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0038f1:	3c 20                	cmp    al,0x20
9f0038f3:	74 e2                	je     9f0038d7 <strtrimI+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
      *end-- = 0;
   }

   // Move if needed.
   //
   if (src != dst)
9f0038f5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0038f8:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0038fb:	74 1f                	je     9f00391c <strtrimI+0x90>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
9f0038fd:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
9f0038fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003901:	8d 50 01             	lea    edx,[eax+0x1]
9f003904:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003907:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00390a:	8d 4a 01             	lea    ecx,[edx+0x1]
9f00390d:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
9f003910:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003913:	88 10                	mov    BYTE PTR [eax],dl
9f003915:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003918:	84 c0                	test   al,al
9f00391a:	75 e2                	jne    9f0038fe <strtrimI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
9f00391c:	90                   	nop
9f00391d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003920:	c9                   	leave  
9f003921:	c3                   	ret    

9f003922 <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:32

__attribute__((visibility("default"))) void strtrim(char *input)
{
9f003922:	55                   	push   ebp
9f003923:	89 e5                	mov    ebp,esp
9f003925:	83 ec 08             	sub    esp,0x8
9f003928:	e8 95 0f 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f00392d:	05 2f 39 00 00       	add    eax,0x392f
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:33
    return strtrimI(input);
9f003932:	83 ec 0c             	sub    esp,0xc
9f003935:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003938:	e8 4f ff ff ff       	call   9f00388c <strtrimI>
9f00393d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:34
}
9f003940:	c9                   	leave  
9f003941:	c3                   	ret    
9f003942:	66 90                	xchg   ax,ax

9f003944 <strreplaceI>:
strreplaceI():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:14



///NOTE: outString has to be big enough to hold the modified string
char *strreplaceI(const char *in, const char *pattern, const char *by, char *outString)
{
9f003944:	55                   	push   ebp
9f003945:	89 e5                	mov    ebp,esp
9f003947:	56                   	push   esi
9f003948:	53                   	push   ebx
9f003949:	83 ec 10             	sub    esp,0x10
9f00394c:	e8 af 0f 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f003951:	81 c3 0b 39 00 00    	add    ebx,0x390b
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:15
    size_t outsize = strlenI(in) + 1;
9f003957:	83 ec 0c             	sub    esp,0xc
9f00395a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00395d:	e8 ee f9 ff ff       	call   9f003350 <strlenI>
9f003962:	83 c4 10             	add    esp,0x10
9f003965:	83 c0 01             	add    eax,0x1
9f003968:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:18
    // TODO maybe avoid reallocing by counting the non-overlapping occurences of pattern
    // use this to iterate over the output
    size_t resoffset = 0;
9f00396b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:20
    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f003972:	e9 ac 00 00 00       	jmp    9f003a23 <strreplaceI+0xdf>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:22
        // copy everything up to the pattern
        memcpyI(outString + resoffset, in, needle - in);
9f003977:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00397a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00397d:	29 c2                	sub    edx,eax
9f00397f:	89 d0                	mov    eax,edx
9f003981:	89 c1                	mov    ecx,eax
9f003983:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f003986:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003989:	01 d0                	add    eax,edx
9f00398b:	83 ec 04             	sub    esp,0x4
9f00398e:	51                   	push   ecx
9f00398f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003992:	50                   	push   eax
9f003993:	e8 3c ec ff ff       	call   9f0025d4 <memcpyI>
9f003998:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:23
        resoffset += needle - in;
9f00399b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00399e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0039a1:	29 c2                	sub    edx,eax
9f0039a3:	89 d0                	mov    eax,edx
9f0039a5:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:26

        // skip the pattern in the input-string
        in = needle + strlenI(pattern);
9f0039a8:	83 ec 0c             	sub    esp,0xc
9f0039ab:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0039ae:	e8 9d f9 ff ff       	call   9f003350 <strlenI>
9f0039b3:	83 c4 10             	add    esp,0x10
9f0039b6:	89 c2                	mov    edx,eax
9f0039b8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0039bb:	01 d0                	add    eax,edx
9f0039bd:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:29

        // adjust space for replacement
        outsize = outsize - strlenI(pattern) + strlenI(by);
9f0039c0:	83 ec 0c             	sub    esp,0xc
9f0039c3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0039c6:	e8 85 f9 ff ff       	call   9f003350 <strlenI>
9f0039cb:	83 c4 10             	add    esp,0x10
9f0039ce:	89 c2                	mov    edx,eax
9f0039d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0039d3:	29 d0                	sub    eax,edx
9f0039d5:	89 c6                	mov    esi,eax
9f0039d7:	83 ec 0c             	sub    esp,0xc
9f0039da:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0039dd:	e8 6e f9 ff ff       	call   9f003350 <strlenI>
9f0039e2:	83 c4 10             	add    esp,0x10
9f0039e5:	01 f0                	add    eax,esi
9f0039e7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:32

        // copy the pattern
        memcpyI(outString + resoffset, by, strlenI(by));
9f0039ea:	83 ec 0c             	sub    esp,0xc
9f0039ed:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0039f0:	e8 5b f9 ff ff       	call   9f003350 <strlenI>
9f0039f5:	83 c4 10             	add    esp,0x10
9f0039f8:	89 c1                	mov    ecx,eax
9f0039fa:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f0039fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003a00:	01 d0                	add    eax,edx
9f003a02:	83 ec 04             	sub    esp,0x4
9f003a05:	51                   	push   ecx
9f003a06:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f003a09:	50                   	push   eax
9f003a0a:	e8 c5 eb ff ff       	call   9f0025d4 <memcpyI>
9f003a0f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:33
        resoffset += strlenI(by);
9f003a12:	83 ec 0c             	sub    esp,0xc
9f003a15:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f003a18:	e8 33 f9 ff ff       	call   9f003350 <strlenI>
9f003a1d:	83 c4 10             	add    esp,0x10
9f003a20:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:20
    size_t outsize = strlenI(in) + 1;
    // TODO maybe avoid reallocing by counting the non-overlapping occurences of pattern
    // use this to iterate over the output
    size_t resoffset = 0;
    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f003a23:	83 ec 08             	sub    esp,0x8
9f003a26:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003a29:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003a2c:	e8 f5 00 00 00       	call   9f003b26 <strstrI>
9f003a31:	83 c4 10             	add    esp,0x10
9f003a34:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f003a37:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f003a3b:	0f 85 36 ff ff ff    	jne    9f003977 <strreplaceI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:37
        memcpyI(outString + resoffset, by, strlenI(by));
        resoffset += strlenI(by);
    }

    // copy the remaining input
    strcpyI(outString + resoffset, in);
9f003a41:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f003a44:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003a47:	01 d0                	add    eax,edx
9f003a49:	83 ec 08             	sub    esp,0x8
9f003a4c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003a4f:	50                   	push   eax
9f003a50:	e8 e7 f7 ff ff       	call   9f00323c <strcpyI>
9f003a55:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:39

    return outString;
9f003a58:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:40
}
9f003a5b:	8d 65 f8             	lea    esp,[ebp-0x8]
9f003a5e:	5b                   	pop    ebx
9f003a5f:	5e                   	pop    esi
9f003a60:	5d                   	pop    ebp
9f003a61:	c3                   	ret    

9f003a62 <strreplace>:
strreplace():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:43

VISIBLE char *strreplace(const char *in, const char *pattern, const char *by, char *outString)
{
9f003a62:	55                   	push   ebp
9f003a63:	89 e5                	mov    ebp,esp
9f003a65:	83 ec 08             	sub    esp,0x8
9f003a68:	e8 55 0e 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f003a6d:	05 ef 37 00 00       	add    eax,0x37ef
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:44
    return strreplaceI(in, pattern, by, outString);
9f003a72:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f003a75:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f003a78:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003a7b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003a7e:	e8 c1 fe ff ff       	call   9f003944 <strreplaceI>
9f003a83:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:45
}
9f003a86:	c9                   	leave  
9f003a87:	c3                   	ret    

9f003a88 <strnstrI>:
strnstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:52
 */

#include "strings.h"

char* strnstrI(char* string, char* substring, int length)
{
9f003a88:	55                   	push   ebp
9f003a89:	89 e5                	mov    ebp,esp
9f003a8b:	56                   	push   esi
9f003a8c:	53                   	push   ebx
9f003a8d:	83 ec 10             	sub    esp,0x10
9f003a90:	e8 2d 0e 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f003a95:	05 c7 37 00 00       	add    eax,0x37c7
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:59

    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */
    int len=length;
9f003a9a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003a9d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:61
    
    b = substring;
9f003aa0:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
    if (*b == 0) {
9f003aa3:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003aa6:	84 c0                	test   al,al
9f003aa8:	75 66                	jne    9f003b10 <strnstrI+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:63
	return string;
9f003aaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003aad:	eb 70                	jmp    9f003b1f <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f003aaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003ab2:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003ab5:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003ab8:	38 c2                	cmp    dl,al
9f003aba:	74 12                	je     9f003ace <strnstrI+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:67
            if (len--<=0)
9f003abc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003abf:	8d 50 ff             	lea    edx,[eax-0x1]
9f003ac2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003ac5:	85 c0                	test   eax,eax
9f003ac7:	7f 42                	jg     9f003b0b <strnstrI+0x83>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
                return string;
9f003ac9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003acc:	eb 51                	jmp    9f003b1f <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:71
	    continue;
	}
	a = string;
9f003ace:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:73
	while (1) {
	    if (*b == 0) {
9f003ad1:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003ad4:	84 c0                	test   al,al
9f003ad6:	75 05                	jne    9f003add <strnstrI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
		return string;
9f003ad8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003adb:	eb 42                	jmp    9f003b1f <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:76
	    }
            if (len--<=0)
9f003add:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003ae0:	8d 50 ff             	lea    edx,[eax-0x1]
9f003ae3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003ae6:	85 c0                	test   eax,eax
9f003ae8:	7f 05                	jg     9f003aef <strnstrI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
                return string;
9f003aea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003aed:	eb 30                	jmp    9f003b1f <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:78
	    if (*a++ != *b++) {
9f003aef:	89 f0                	mov    eax,esi
9f003af1:	8d 70 01             	lea    esi,[eax+0x1]
9f003af4:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003af7:	89 d8                	mov    eax,ebx
9f003af9:	8d 58 01             	lea    ebx,[eax+0x1]
9f003afc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003aff:	38 c2                	cmp    dl,al
9f003b01:	75 02                	jne    9f003b05 <strnstrI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:81
		break;
	    }
	}
9f003b03:	eb cc                	jmp    9f003ad1 <strnstrI+0x49>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
		return string;
	    }
            if (len--<=0)
                return string;
	    if (*a++ != *b++) {
		break;
9f003b05:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:82
	    }
	}
	b = substring;
9f003b06:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f003b09:	eb 01                	jmp    9f003b0c <strnstrI+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:69
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
            if (len--<=0)
                return string;
	    continue;
9f003b0b:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65
    
    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f003b0c:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65 (discriminator 1)
9f003b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003b16:	84 c0                	test   al,al
9f003b18:	75 95                	jne    9f003aaf <strnstrI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:84
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f003b1a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:85
}
9f003b1f:	83 c4 10             	add    esp,0x10
9f003b22:	5b                   	pop    ebx
9f003b23:	5e                   	pop    esi
9f003b24:	5d                   	pop    ebp
9f003b25:	c3                   	ret    

9f003b26 <strstrI>:
strstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:88

char* strstrI(const char* string, const char* substring)
{
9f003b26:	55                   	push   ebp
9f003b27:	89 e5                	mov    ebp,esp
9f003b29:	56                   	push   esi
9f003b2a:	53                   	push   ebx
9f003b2b:	e8 92 0d 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f003b30:	05 2c 37 00 00       	add    eax,0x372c
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:96
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
9f003b35:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:97
    if (*b == 0) {
9f003b38:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003b3b:	84 c0                	test   al,al
9f003b3d:	75 42                	jne    9f003b81 <strstrI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:98
	return string;
9f003b3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b42:	eb 4c                	jmp    9f003b90 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:101
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f003b44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b47:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003b4a:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003b4d:	38 c2                	cmp    dl,al
9f003b4f:	75 2b                	jne    9f003b7c <strstrI+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:104
	    continue;
	}
	a = string;
9f003b51:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:106
	while (1) {
	    if (*b == 0) {
9f003b54:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003b57:	84 c0                	test   al,al
9f003b59:	75 05                	jne    9f003b60 <strstrI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:107
		return string;
9f003b5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b5e:	eb 30                	jmp    9f003b90 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:109
	    }
	    if (*a++ != *b++) {
9f003b60:	89 f0                	mov    eax,esi
9f003b62:	8d 70 01             	lea    esi,[eax+0x1]
9f003b65:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003b68:	89 d8                	mov    eax,ebx
9f003b6a:	8d 58 01             	lea    ebx,[eax+0x1]
9f003b6d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003b70:	38 c2                	cmp    dl,al
9f003b72:	75 02                	jne    9f003b76 <strstrI+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:112
		break;
	    }
	}
9f003b74:	eb de                	jmp    9f003b54 <strstrI+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:110
	while (1) {
	    if (*b == 0) {
		return string;
	    }
	    if (*a++ != *b++) {
		break;
9f003b76:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:113
	    }
	}
	b = substring;
9f003b77:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f003b7a:	eb 01                	jmp    9f003b7d <strstrI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:102
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
	    continue;
9f003b7c:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:100

    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f003b7d:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:100 (discriminator 1)
9f003b81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b84:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003b87:	84 c0                	test   al,al
9f003b89:	75 b9                	jne    9f003b44 <strstrI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:115
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f003b8b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:116
}
9f003b90:	5b                   	pop    ebx
9f003b91:	5e                   	pop    esi
9f003b92:	5d                   	pop    ebp
9f003b93:	c3                   	ret    

9f003b94 <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:119

VISIBLE char* strstr(const char* string, const char* substring)
{
9f003b94:	55                   	push   ebp
9f003b95:	89 e5                	mov    ebp,esp
9f003b97:	e8 26 0d 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f003b9c:	05 c0 36 00 00       	add    eax,0x36c0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:120
    return strstrI(string, substring);
9f003ba1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003ba4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003ba7:	e8 7a ff ff ff       	call   9f003b26 <strstrI>
9f003bac:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:121
}
9f003baf:	c9                   	leave  
9f003bb0:	c3                   	ret    
9f003bb1:	66 90                	xchg   ax,ax
9f003bb3:	90                   	nop

9f003bb4 <getticks>:
getticks():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:24
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t getticks(/*time_t* arg*/)
{
9f003bb4:	55                   	push   ebp
9f003bb5:	89 e5                	mov    ebp,esp
9f003bb7:	56                   	push   esi
9f003bb8:	53                   	push   ebx
9f003bb9:	83 ec 10             	sub    esp,0x10
9f003bbc:	e8 01 0d 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f003bc1:	05 9b 36 00 00       	add    eax,0x369b
/home/yogi/src/os/aproj/libChrisOS/src/time.c:25
    uint32_t retVal=0;
9f003bc6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:26
    GET_TICKS(retVal);
9f003bcd:	b8 70 01 00 00       	mov    eax,0x170
9f003bd2:	bb 00 00 00 00       	mov    ebx,0x0
9f003bd7:	b9 00 00 00 00       	mov    ecx,0x0
9f003bdc:	ba 00 00 00 00       	mov    edx,0x0
9f003be1:	be 00 00 00 00       	mov    esi,0x0
9f003be6:	e8 fc ff ff ff       	call   9f003be7 <getticks+0x33>
9f003beb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
    return (time_t)retVal;
9f003bee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:28
}
9f003bf1:	83 c4 10             	add    esp,0x10
9f003bf4:	5b                   	pop    ebx
9f003bf5:	5e                   	pop    esi
9f003bf6:	5d                   	pop    ebp
9f003bf7:	c3                   	ret    

9f003bf8 <gmtime_rI>:
gmtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:32


struct tm *gmtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f003bf8:	55                   	push   ebp
9f003bf9:	89 e5                	mov    ebp,esp
9f003bfb:	53                   	push   ebx
9f003bfc:	83 ec 10             	sub    esp,0x10
9f003bff:	e8 fc 0c 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f003c04:	81 c3 58 36 00 00    	add    ebx,0x3658
/home/yogi/src/os/aproj/libChrisOS/src/time.c:33
  time_t time = *timer;
9f003c0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003c0d:	8b 00                	mov    eax,DWORD PTR [eax]
9f003c0f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:35
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
9f003c12:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:37

  dayclock = (unsigned long) time % SECS_DAY;
9f003c19:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f003c1c:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f003c21:	89 c8                	mov    eax,ecx
9f003c23:	f7 e2                	mul    edx
9f003c25:	89 d0                	mov    eax,edx
9f003c27:	c1 e8 10             	shr    eax,0x10
9f003c2a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f003c2d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003c30:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f003c36:	29 c1                	sub    ecx,eax
9f003c38:	89 c8                	mov    eax,ecx
9f003c3a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:38
  dayno = (unsigned long) time / SECS_DAY;
9f003c3d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003c40:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f003c45:	f7 e2                	mul    edx
9f003c47:	89 d0                	mov    eax,edx
9f003c49:	c1 e8 10             	shr    eax,0x10
9f003c4c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40

  tmbuf->tm_sec = dayclock % 60;
9f003c4f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f003c52:	ba 89 88 88 88       	mov    edx,0x88888889
9f003c57:	89 c8                	mov    eax,ecx
9f003c59:	f7 e2                	mul    edx
9f003c5b:	89 d0                	mov    eax,edx
9f003c5d:	c1 e8 05             	shr    eax,0x5
9f003c60:	89 c2                	mov    edx,eax
9f003c62:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f003c69:	89 c2                	mov    edx,eax
9f003c6b:	89 d0                	mov    eax,edx
9f003c6d:	c1 e0 04             	shl    eax,0x4
9f003c70:	29 d0                	sub    eax,edx
9f003c72:	29 c1                	sub    ecx,eax
9f003c74:	89 c8                	mov    eax,ecx
9f003c76:	89 c2                	mov    edx,eax
9f003c78:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003c7b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  tmbuf->tm_min = (dayclock % 3600) / 60;
9f003c7d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f003c80:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f003c85:	89 c8                	mov    eax,ecx
9f003c87:	f7 e2                	mul    edx
9f003c89:	89 d0                	mov    eax,edx
9f003c8b:	c1 e8 0b             	shr    eax,0xb
9f003c8e:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
9f003c94:	29 c1                	sub    ecx,eax
9f003c96:	89 c8                	mov    eax,ecx
9f003c98:	ba 89 88 88 88       	mov    edx,0x88888889
9f003c9d:	f7 e2                	mul    edx
9f003c9f:	89 d0                	mov    eax,edx
9f003ca1:	c1 e8 05             	shr    eax,0x5
9f003ca4:	89 c2                	mov    edx,eax
9f003ca6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003ca9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42
  tmbuf->tm_hour = dayclock / 3600;
9f003cac:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003caf:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f003cb4:	f7 e2                	mul    edx
9f003cb6:	89 d0                	mov    eax,edx
9f003cb8:	c1 e8 0b             	shr    eax,0xb
9f003cbb:	89 c2                	mov    edx,eax
9f003cbd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003cc0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
9f003cc3:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f003cc6:	8d 48 04             	lea    ecx,[eax+0x4]
9f003cc9:	ba 25 49 92 24       	mov    edx,0x24924925
9f003cce:	89 c8                	mov    eax,ecx
9f003cd0:	f7 e2                	mul    edx
9f003cd2:	89 c8                	mov    eax,ecx
9f003cd4:	29 d0                	sub    eax,edx
9f003cd6:	d1 e8                	shr    eax,1
9f003cd8:	01 d0                	add    eax,edx
9f003cda:	c1 e8 02             	shr    eax,0x2
9f003cdd:	89 c2                	mov    edx,eax
9f003cdf:	c1 e2 03             	shl    edx,0x3
9f003ce2:	29 c2                	sub    edx,eax
9f003ce4:	89 c8                	mov    eax,ecx
9f003ce6:	29 d0                	sub    eax,edx
9f003ce8:	89 c2                	mov    edx,eax
9f003cea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003ced:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f003cf0:	eb 66                	jmp    9f003d58 <gmtime_rI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45
    dayno -= YEARSIZE(year);
9f003cf2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003cf5:	83 e0 03             	and    eax,0x3
9f003cf8:	85 c0                	test   eax,eax
9f003cfa:	75 50                	jne    9f003d4c <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 1)
9f003cfc:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003cff:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003d04:	89 c8                	mov    eax,ecx
9f003d06:	f7 ea                	imul   edx
9f003d08:	c1 fa 05             	sar    edx,0x5
9f003d0b:	89 c8                	mov    eax,ecx
9f003d0d:	c1 f8 1f             	sar    eax,0x1f
9f003d10:	29 c2                	sub    edx,eax
9f003d12:	89 d0                	mov    eax,edx
9f003d14:	6b c0 64             	imul   eax,eax,0x64
9f003d17:	29 c1                	sub    ecx,eax
9f003d19:	89 c8                	mov    eax,ecx
9f003d1b:	85 c0                	test   eax,eax
9f003d1d:	75 26                	jne    9f003d45 <gmtime_rI+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 4)
9f003d1f:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003d22:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003d27:	89 c8                	mov    eax,ecx
9f003d29:	f7 ea                	imul   edx
9f003d2b:	c1 fa 07             	sar    edx,0x7
9f003d2e:	89 c8                	mov    eax,ecx
9f003d30:	c1 f8 1f             	sar    eax,0x1f
9f003d33:	29 c2                	sub    edx,eax
9f003d35:	89 d0                	mov    eax,edx
9f003d37:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003d3d:	29 c1                	sub    ecx,eax
9f003d3f:	89 c8                	mov    eax,ecx
9f003d41:	85 c0                	test   eax,eax
9f003d43:	75 07                	jne    9f003d4c <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 5)
9f003d45:	b8 6e 01 00 00       	mov    eax,0x16e
9f003d4a:	eb 05                	jmp    9f003d51 <gmtime_rI+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 6)
9f003d4c:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 8)
9f003d51:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:46 (discriminator 8)
    year++;
9f003d54:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f003d58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003d5b:	83 e0 03             	and    eax,0x3
9f003d5e:	85 c0                	test   eax,eax
9f003d60:	75 50                	jne    9f003db2 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 1)
9f003d62:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003d65:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003d6a:	89 c8                	mov    eax,ecx
9f003d6c:	f7 ea                	imul   edx
9f003d6e:	c1 fa 05             	sar    edx,0x5
9f003d71:	89 c8                	mov    eax,ecx
9f003d73:	c1 f8 1f             	sar    eax,0x1f
9f003d76:	29 c2                	sub    edx,eax
9f003d78:	89 d0                	mov    eax,edx
9f003d7a:	6b c0 64             	imul   eax,eax,0x64
9f003d7d:	29 c1                	sub    ecx,eax
9f003d7f:	89 c8                	mov    eax,ecx
9f003d81:	85 c0                	test   eax,eax
9f003d83:	75 26                	jne    9f003dab <gmtime_rI+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 4)
9f003d85:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003d88:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003d8d:	89 c8                	mov    eax,ecx
9f003d8f:	f7 ea                	imul   edx
9f003d91:	c1 fa 07             	sar    edx,0x7
9f003d94:	89 c8                	mov    eax,ecx
9f003d96:	c1 f8 1f             	sar    eax,0x1f
9f003d99:	29 c2                	sub    edx,eax
9f003d9b:	89 d0                	mov    eax,edx
9f003d9d:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003da3:	29 c1                	sub    ecx,eax
9f003da5:	89 c8                	mov    eax,ecx
9f003da7:	85 c0                	test   eax,eax
9f003da9:	75 07                	jne    9f003db2 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 5)
9f003dab:	b8 6e 01 00 00       	mov    eax,0x16e
9f003db0:	eb 05                	jmp    9f003db7 <gmtime_rI+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 6)
9f003db2:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 8)
9f003db7:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f003dba:	0f 86 32 ff ff ff    	jbe    9f003cf2 <gmtime_rI+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
9f003dc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003dc3:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
9f003dc9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003dcc:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49
  tmbuf->tm_yday = dayno;
9f003dcf:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f003dd2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003dd5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
  tmbuf->tm_mon = 0;
9f003dd8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003ddb:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f003de2:	e9 89 00 00 00       	jmp    9f003e70 <gmtime_rI+0x278>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
9f003de7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003dea:	83 e0 03             	and    eax,0x3
9f003ded:	85 c0                	test   eax,eax
9f003def:	75 50                	jne    9f003e41 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 1)
9f003df1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003df4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003df9:	89 c8                	mov    eax,ecx
9f003dfb:	f7 ea                	imul   edx
9f003dfd:	c1 fa 05             	sar    edx,0x5
9f003e00:	89 c8                	mov    eax,ecx
9f003e02:	c1 f8 1f             	sar    eax,0x1f
9f003e05:	29 c2                	sub    edx,eax
9f003e07:	89 d0                	mov    eax,edx
9f003e09:	6b c0 64             	imul   eax,eax,0x64
9f003e0c:	29 c1                	sub    ecx,eax
9f003e0e:	89 c8                	mov    eax,ecx
9f003e10:	85 c0                	test   eax,eax
9f003e12:	75 26                	jne    9f003e3a <gmtime_rI+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 4)
9f003e14:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003e17:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003e1c:	89 c8                	mov    eax,ecx
9f003e1e:	f7 ea                	imul   edx
9f003e20:	c1 fa 07             	sar    edx,0x7
9f003e23:	89 c8                	mov    eax,ecx
9f003e25:	c1 f8 1f             	sar    eax,0x1f
9f003e28:	29 c2                	sub    edx,eax
9f003e2a:	89 d0                	mov    eax,edx
9f003e2c:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003e32:	29 c1                	sub    ecx,eax
9f003e34:	89 c8                	mov    eax,ecx
9f003e36:	85 c0                	test   eax,eax
9f003e38:	75 07                	jne    9f003e41 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 5)
9f003e3a:	ba 01 00 00 00       	mov    edx,0x1
9f003e3f:	eb 05                	jmp    9f003e46 <gmtime_rI+0x24e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 6)
9f003e41:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 8)
9f003e46:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003e49:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f003e4c:	89 d0                	mov    eax,edx
9f003e4e:	01 c0                	add    eax,eax
9f003e50:	01 d0                	add    eax,edx
9f003e52:	c1 e0 02             	shl    eax,0x2
9f003e55:	01 c8                	add    eax,ecx
9f003e57:	8b 84 83 04 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2fc]
9f003e5e:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:53 (discriminator 8)
    tmbuf->tm_mon++;
9f003e61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003e64:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f003e67:	8d 50 01             	lea    edx,[eax+0x1]
9f003e6a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003e6d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f003e70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003e73:	83 e0 03             	and    eax,0x3
9f003e76:	85 c0                	test   eax,eax
9f003e78:	75 50                	jne    9f003eca <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 1)
9f003e7a:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003e7d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003e82:	89 c8                	mov    eax,ecx
9f003e84:	f7 ea                	imul   edx
9f003e86:	c1 fa 05             	sar    edx,0x5
9f003e89:	89 c8                	mov    eax,ecx
9f003e8b:	c1 f8 1f             	sar    eax,0x1f
9f003e8e:	29 c2                	sub    edx,eax
9f003e90:	89 d0                	mov    eax,edx
9f003e92:	6b c0 64             	imul   eax,eax,0x64
9f003e95:	29 c1                	sub    ecx,eax
9f003e97:	89 c8                	mov    eax,ecx
9f003e99:	85 c0                	test   eax,eax
9f003e9b:	75 26                	jne    9f003ec3 <gmtime_rI+0x2cb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 4)
9f003e9d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003ea0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003ea5:	89 c8                	mov    eax,ecx
9f003ea7:	f7 ea                	imul   edx
9f003ea9:	c1 fa 07             	sar    edx,0x7
9f003eac:	89 c8                	mov    eax,ecx
9f003eae:	c1 f8 1f             	sar    eax,0x1f
9f003eb1:	29 c2                	sub    edx,eax
9f003eb3:	89 d0                	mov    eax,edx
9f003eb5:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003ebb:	29 c1                	sub    ecx,eax
9f003ebd:	89 c8                	mov    eax,ecx
9f003ebf:	85 c0                	test   eax,eax
9f003ec1:	75 07                	jne    9f003eca <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 5)
9f003ec3:	ba 01 00 00 00       	mov    edx,0x1
9f003ec8:	eb 05                	jmp    9f003ecf <gmtime_rI+0x2d7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 6)
9f003eca:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 8)
9f003ecf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003ed2:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f003ed5:	89 d0                	mov    eax,edx
9f003ed7:	01 c0                	add    eax,eax
9f003ed9:	01 d0                	add    eax,edx
9f003edb:	c1 e0 02             	shl    eax,0x2
9f003ede:	01 c8                	add    eax,ecx
9f003ee0:	8b 84 83 04 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2fc]
9f003ee7:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f003eea:	0f 86 f7 fe ff ff    	jbe    9f003de7 <gmtime_rI+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
9f003ef0:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f003ef3:	83 c0 01             	add    eax,0x1
9f003ef6:	89 c2                	mov    edx,eax
9f003ef8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003efb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56
  tmbuf->tm_isdst = 0;
9f003efe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003f01:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:57
  return tmbuf;
9f003f08:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:58
}
9f003f0b:	83 c4 10             	add    esp,0x10
9f003f0e:	5b                   	pop    ebx
9f003f0f:	5d                   	pop    ebp
9f003f10:	c3                   	ret    

9f003f11 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:61

VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) 
{
9f003f11:	55                   	push   ebp
9f003f12:	89 e5                	mov    ebp,esp
9f003f14:	e8 a9 09 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f003f19:	05 43 33 00 00       	add    eax,0x3343
/home/yogi/src/os/aproj/libChrisOS/src/time.c:62
    return gmtime_rI(timer, tmbuf);
9f003f1e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003f21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003f24:	e8 cf fc ff ff       	call   9f003bf8 <gmtime_rI>
9f003f29:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:63
}
9f003f2c:	c9                   	leave  
9f003f2d:	c3                   	ret    

9f003f2e <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:65

VISIBLE struct tm *localtime(const time_t *timer) {
9f003f2e:	55                   	push   ebp
9f003f2f:	89 e5                	mov    ebp,esp
9f003f31:	83 ec 10             	sub    esp,0x10
9f003f34:	e8 89 09 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f003f39:	05 23 33 00 00       	add    eax,0x3323
/home/yogi/src/os/aproj/libChrisOS/src/time.c:68
  time_t t;
 
  t = *timer + (libcTZ*60*60);
9f003f3e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003f41:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f003f43:	8b 90 f8 ff ff ff    	mov    edx,DWORD PTR [eax-0x8]
9f003f49:	8b 12                	mov    edx,DWORD PTR [edx]
9f003f4b:	69 d2 10 0e 00 00    	imul   edx,edx,0xe10
9f003f51:	01 ca                	add    edx,ecx
9f003f53:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:69
  return gmtime_rI(&t, &tmbuf);
9f003f56:	8b 80 fc ff ff ff    	mov    eax,DWORD PTR [eax-0x4]
9f003f5c:	50                   	push   eax
9f003f5d:	8d 45 fc             	lea    eax,[ebp-0x4]
9f003f60:	50                   	push   eax
9f003f61:	e8 92 fc ff ff       	call   9f003bf8 <gmtime_rI>
9f003f66:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:70
}
9f003f69:	c9                   	leave  
9f003f6a:	c3                   	ret    

9f003f6b <localtime_rI>:
localtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73

struct tm *localtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f003f6b:	55                   	push   ebp
9f003f6c:	89 e5                	mov    ebp,esp
9f003f6e:	83 ec 10             	sub    esp,0x10
9f003f71:	e8 4c 09 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f003f76:	05 e6 32 00 00       	add    eax,0x32e6
/home/yogi/src/os/aproj/libChrisOS/src/time.c:76
  time_t t;

  t = *timer - libcTZ;
9f003f7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003f7e:	8b 12                	mov    edx,DWORD PTR [edx]
9f003f80:	8b 80 f8 ff ff ff    	mov    eax,DWORD PTR [eax-0x8]
9f003f86:	8b 00                	mov    eax,DWORD PTR [eax]
9f003f88:	29 c2                	sub    edx,eax
9f003f8a:	89 d0                	mov    eax,edx
9f003f8c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:77
  return gmtime_rI(&t, tmbuf);
9f003f8f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003f92:	8d 45 fc             	lea    eax,[ebp-0x4]
9f003f95:	50                   	push   eax
9f003f96:	e8 5d fc ff ff       	call   9f003bf8 <gmtime_rI>
9f003f9b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:78
}
9f003f9e:	c9                   	leave  
9f003f9f:	c3                   	ret    

9f003fa0 <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:80

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
9f003fa0:	55                   	push   ebp
9f003fa1:	89 e5                	mov    ebp,esp
9f003fa3:	e8 1a 09 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f003fa8:	05 b4 32 00 00       	add    eax,0x32b4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
    return localtime_rI(timer, tmbuf);
9f003fad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003fb0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003fb3:	e8 b3 ff ff ff       	call   9f003f6b <localtime_rI>
9f003fb8:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:82
}
9f003fbb:	c9                   	leave  
9f003fbc:	c3                   	ret    

9f003fbd <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84

VISIBLE time_t mktime(struct tm *tmbuf) {
9f003fbd:	55                   	push   ebp
9f003fbe:	89 e5                	mov    ebp,esp
9f003fc0:	57                   	push   edi
9f003fc1:	56                   	push   esi
9f003fc2:	53                   	push   ebx
9f003fc3:	83 ec 20             	sub    esp,0x20
9f003fc6:	e8 39 09 00 00       	call   9f004904 <__x86.get_pc_thunk.cx>
9f003fcb:	81 c1 91 32 00 00    	add    ecx,0x3291
/home/yogi/src/os/aproj/libChrisOS/src/time.c:92
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
9f003fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003fd4:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
9f003fd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003fda:	8b 18                	mov    ebx,DWORD PTR [eax]
9f003fdc:	ba 89 88 88 88       	mov    edx,0x88888889
9f003fe1:	89 d8                	mov    eax,ebx
9f003fe3:	f7 ea                	imul   edx
9f003fe5:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f003fe8:	c1 f8 05             	sar    eax,0x5
9f003feb:	89 c2                	mov    edx,eax
9f003fed:	89 d8                	mov    eax,ebx
9f003fef:	c1 f8 1f             	sar    eax,0x1f
9f003ff2:	29 c2                	sub    edx,eax
9f003ff4:	89 d0                	mov    eax,edx
9f003ff6:	8d 14 06             	lea    edx,[esi+eax*1]
9f003ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003ffc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:93
  tmbuf->tm_sec %= 60;
9f003fff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004002:	8b 18                	mov    ebx,DWORD PTR [eax]
9f004004:	ba 89 88 88 88       	mov    edx,0x88888889
9f004009:	89 d8                	mov    eax,ebx
9f00400b:	f7 ea                	imul   edx
9f00400d:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f004010:	c1 f8 05             	sar    eax,0x5
9f004013:	89 c2                	mov    edx,eax
9f004015:	89 d8                	mov    eax,ebx
9f004017:	c1 f8 1f             	sar    eax,0x1f
9f00401a:	29 c2                	sub    edx,eax
9f00401c:	89 d0                	mov    eax,edx
9f00401e:	89 c2                	mov    edx,eax
9f004020:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f004027:	89 c2                	mov    edx,eax
9f004029:	89 d0                	mov    eax,edx
9f00402b:	c1 e0 04             	shl    eax,0x4
9f00402e:	29 d0                	sub    eax,edx
9f004030:	29 c3                	sub    ebx,eax
9f004032:	89 d8                	mov    eax,ebx
9f004034:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f004037:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:94
  if (tmbuf->tm_sec < 0) {
9f004039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00403c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00403e:	85 c0                	test   eax,eax
9f004040:	79 1c                	jns    9f00405e <mktime+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
    tmbuf->tm_sec += 60;
9f004042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004045:	8b 00                	mov    eax,DWORD PTR [eax]
9f004047:	8d 50 3c             	lea    edx,[eax+0x3c]
9f00404a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00404d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
    tmbuf->tm_min--;
9f00404f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004052:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f004055:	8d 50 ff             	lea    edx,[eax-0x1]
9f004058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00405b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:98
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
9f00405e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004061:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
9f004064:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004067:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f00406a:	ba 89 88 88 88       	mov    edx,0x88888889
9f00406f:	89 d8                	mov    eax,ebx
9f004071:	f7 ea                	imul   edx
9f004073:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f004076:	c1 f8 05             	sar    eax,0x5
9f004079:	89 c2                	mov    edx,eax
9f00407b:	89 d8                	mov    eax,ebx
9f00407d:	c1 f8 1f             	sar    eax,0x1f
9f004080:	29 c2                	sub    edx,eax
9f004082:	89 d0                	mov    eax,edx
9f004084:	8d 14 06             	lea    edx,[esi+eax*1]
9f004087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00408a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
  tmbuf->tm_min = tmbuf->tm_min % 60;
9f00408d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004090:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f004093:	ba 89 88 88 88       	mov    edx,0x88888889
9f004098:	89 d8                	mov    eax,ebx
9f00409a:	f7 ea                	imul   edx
9f00409c:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f00409f:	c1 f8 05             	sar    eax,0x5
9f0040a2:	89 c2                	mov    edx,eax
9f0040a4:	89 d8                	mov    eax,ebx
9f0040a6:	c1 f8 1f             	sar    eax,0x1f
9f0040a9:	29 c2                	sub    edx,eax
9f0040ab:	89 d0                	mov    eax,edx
9f0040ad:	89 c2                	mov    edx,eax
9f0040af:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f0040b6:	89 c2                	mov    edx,eax
9f0040b8:	89 d0                	mov    eax,edx
9f0040ba:	c1 e0 04             	shl    eax,0x4
9f0040bd:	29 d0                	sub    eax,edx
9f0040bf:	29 c3                	sub    ebx,eax
9f0040c1:	89 d8                	mov    eax,ebx
9f0040c3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0040c6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:100
  if (tmbuf->tm_min < 0) {
9f0040c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0040cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0040cf:	85 c0                	test   eax,eax
9f0040d1:	79 1e                	jns    9f0040f1 <mktime+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
    tmbuf->tm_min += 60;
9f0040d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0040d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0040d9:	8d 50 3c             	lea    edx,[eax+0x3c]
9f0040dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0040df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
    tmbuf->tm_hour--;
9f0040e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0040e5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f0040e8:	8d 50 ff             	lea    edx,[eax-0x1]
9f0040eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0040ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:104
  }
  day = tmbuf->tm_hour / 24;
9f0040f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0040f4:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f0040f7:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f0040fc:	89 d8                	mov    eax,ebx
9f0040fe:	f7 ea                	imul   edx
9f004100:	c1 fa 02             	sar    edx,0x2
9f004103:	89 d8                	mov    eax,ebx
9f004105:	c1 f8 1f             	sar    eax,0x1f
9f004108:	29 c2                	sub    edx,eax
9f00410a:	89 d0                	mov    eax,edx
9f00410c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
9f00410f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004112:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f004115:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f00411a:	89 d8                	mov    eax,ebx
9f00411c:	f7 ea                	imul   edx
9f00411e:	c1 fa 02             	sar    edx,0x2
9f004121:	89 d8                	mov    eax,ebx
9f004123:	c1 f8 1f             	sar    eax,0x1f
9f004126:	29 c2                	sub    edx,eax
9f004128:	89 d0                	mov    eax,edx
9f00412a:	01 c0                	add    eax,eax
9f00412c:	01 d0                	add    eax,edx
9f00412e:	c1 e0 03             	shl    eax,0x3
9f004131:	29 c3                	sub    ebx,eax
9f004133:	89 da                	mov    edx,ebx
9f004135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004138:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:106
  if (tmbuf->tm_hour < 0) {
9f00413b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00413e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f004141:	85 c0                	test   eax,eax
9f004143:	79 13                	jns    9f004158 <mktime+0x19b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
    tmbuf->tm_hour += 24;
9f004145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004148:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f00414b:	8d 50 18             	lea    edx,[eax+0x18]
9f00414e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004151:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
    day--;
9f004154:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:110
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
9f004158:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00415b:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
9f00415e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004161:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004164:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f004169:	89 d8                	mov    eax,ebx
9f00416b:	f7 ea                	imul   edx
9f00416d:	d1 fa                	sar    edx,1
9f00416f:	89 d8                	mov    eax,ebx
9f004171:	c1 f8 1f             	sar    eax,0x1f
9f004174:	29 c2                	sub    edx,eax
9f004176:	89 d0                	mov    eax,edx
9f004178:	8d 14 06             	lea    edx,[esi+eax*1]
9f00417b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00417e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
  tmbuf->tm_mon %= 12;
9f004181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004184:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004187:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f00418c:	89 d8                	mov    eax,ebx
9f00418e:	f7 ea                	imul   edx
9f004190:	d1 fa                	sar    edx,1
9f004192:	89 d8                	mov    eax,ebx
9f004194:	c1 f8 1f             	sar    eax,0x1f
9f004197:	29 c2                	sub    edx,eax
9f004199:	89 d0                	mov    eax,edx
9f00419b:	01 c0                	add    eax,eax
9f00419d:	01 d0                	add    eax,edx
9f00419f:	c1 e0 02             	shl    eax,0x2
9f0041a2:	29 c3                	sub    ebx,eax
9f0041a4:	89 da                	mov    edx,ebx
9f0041a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:112
  if (tmbuf->tm_mon < 0) {
9f0041ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0041b2:	85 c0                	test   eax,eax
9f0041b4:	79 1e                	jns    9f0041d4 <mktime+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
    tmbuf->tm_mon += 12;
9f0041b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0041bc:	8d 50 0c             	lea    edx,[eax+0xc]
9f0041bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041c2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
    tmbuf->tm_year--;
9f0041c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041c8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0041cb:	8d 50 ff             	lea    edx,[eax-0x1]
9f0041ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041d1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
  }
  day += (tmbuf->tm_mday - 1);
9f0041d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f0041da:	83 e8 01             	sub    eax,0x1
9f0041dd:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  while (day < 0) {
9f0041e0:	e9 c1 00 00 00       	jmp    9f0042a6 <mktime+0x2e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:118
    if(--tmbuf->tm_mon < 0) {
9f0041e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041e8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0041eb:	8d 50 ff             	lea    edx,[eax-0x1]
9f0041ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041f1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f0041f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0041fa:	85 c0                	test   eax,eax
9f0041fc:	79 19                	jns    9f004217 <mktime+0x25a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:119
      tmbuf->tm_year--;
9f0041fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004201:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004204:	8d 50 ff             	lea    edx,[eax-0x1]
9f004207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00420a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
      tmbuf->tm_mon = 11;
9f00420d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004210:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f004217:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00421a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00421d:	83 e0 03             	and    eax,0x3
9f004220:	85 c0                	test   eax,eax
9f004222:	75 62                	jne    9f004286 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 1)
9f004224:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004227:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00422a:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004230:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004235:	89 d8                	mov    eax,ebx
9f004237:	f7 ea                	imul   edx
9f004239:	c1 fa 05             	sar    edx,0x5
9f00423c:	89 d8                	mov    eax,ebx
9f00423e:	c1 f8 1f             	sar    eax,0x1f
9f004241:	29 c2                	sub    edx,eax
9f004243:	89 d0                	mov    eax,edx
9f004245:	6b c0 64             	imul   eax,eax,0x64
9f004248:	29 c3                	sub    ebx,eax
9f00424a:	89 d8                	mov    eax,ebx
9f00424c:	85 c0                	test   eax,eax
9f00424e:	75 2f                	jne    9f00427f <mktime+0x2c2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 4)
9f004250:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004253:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004256:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f00425c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004261:	89 d8                	mov    eax,ebx
9f004263:	f7 ea                	imul   edx
9f004265:	c1 fa 07             	sar    edx,0x7
9f004268:	89 d8                	mov    eax,ebx
9f00426a:	c1 f8 1f             	sar    eax,0x1f
9f00426d:	29 c2                	sub    edx,eax
9f00426f:	89 d0                	mov    eax,edx
9f004271:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004277:	29 c3                	sub    ebx,eax
9f004279:	89 d8                	mov    eax,ebx
9f00427b:	85 c0                	test   eax,eax
9f00427d:	75 07                	jne    9f004286 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 5)
9f00427f:	ba 01 00 00 00       	mov    edx,0x1
9f004284:	eb 05                	jmp    9f00428b <mktime+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 6)
9f004286:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 8)
9f00428b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00428e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004291:	89 d0                	mov    eax,edx
9f004293:	01 c0                	add    eax,eax
9f004295:	01 d0                	add    eax,edx
9f004297:	c1 e0 02             	shl    eax,0x2
9f00429a:	01 d8                	add    eax,ebx
9f00429c:	8b 84 81 04 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2fc]
9f0042a3:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
9f0042a6:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0042aa:	0f 88 35 ff ff ff    	js     9f0041e5 <mktime+0x228>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f0042b0:	e9 c2 00 00 00       	jmp    9f004377 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f0042b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0042b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0042bb:	83 e0 03             	and    eax,0x3
9f0042be:	85 c0                	test   eax,eax
9f0042c0:	75 62                	jne    9f004324 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 1)
9f0042c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0042c5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0042c8:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f0042ce:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0042d3:	89 d8                	mov    eax,ebx
9f0042d5:	f7 ea                	imul   edx
9f0042d7:	c1 fa 05             	sar    edx,0x5
9f0042da:	89 d8                	mov    eax,ebx
9f0042dc:	c1 f8 1f             	sar    eax,0x1f
9f0042df:	29 c2                	sub    edx,eax
9f0042e1:	89 d0                	mov    eax,edx
9f0042e3:	6b c0 64             	imul   eax,eax,0x64
9f0042e6:	29 c3                	sub    ebx,eax
9f0042e8:	89 d8                	mov    eax,ebx
9f0042ea:	85 c0                	test   eax,eax
9f0042ec:	75 2f                	jne    9f00431d <mktime+0x360>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 4)
9f0042ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0042f1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0042f4:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f0042fa:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0042ff:	89 d8                	mov    eax,ebx
9f004301:	f7 ea                	imul   edx
9f004303:	c1 fa 07             	sar    edx,0x7
9f004306:	89 d8                	mov    eax,ebx
9f004308:	c1 f8 1f             	sar    eax,0x1f
9f00430b:	29 c2                	sub    edx,eax
9f00430d:	89 d0                	mov    eax,edx
9f00430f:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004315:	29 c3                	sub    ebx,eax
9f004317:	89 d8                	mov    eax,ebx
9f004319:	85 c0                	test   eax,eax
9f00431b:	75 07                	jne    9f004324 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 5)
9f00431d:	ba 01 00 00 00       	mov    edx,0x1
9f004322:	eb 05                	jmp    9f004329 <mktime+0x36c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 6)
9f004324:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 8)
9f004329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00432c:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f00432f:	89 d0                	mov    eax,edx
9f004331:	01 c0                	add    eax,eax
9f004333:	01 d0                	add    eax,edx
9f004335:	c1 e0 02             	shl    eax,0x2
9f004338:	01 d8                	add    eax,ebx
9f00433a:	8b 84 81 04 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2fc]
9f004341:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:126 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
9f004344:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004347:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00434a:	8d 50 01             	lea    edx,[eax+0x1]
9f00434d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004350:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f004353:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004356:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004359:	83 f8 0c             	cmp    eax,0xc
9f00435c:	75 19                	jne    9f004377 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_mon = 0;
9f00435e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004361:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128
      tmbuf->tm_year++;
9f004368:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00436b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00436e:	8d 50 01             	lea    edx,[eax+0x1]
9f004371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004374:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f004377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00437a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00437d:	83 e0 03             	and    eax,0x3
9f004380:	85 c0                	test   eax,eax
9f004382:	75 62                	jne    9f0043e6 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 1)
9f004384:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004387:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00438a:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004390:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004395:	89 d8                	mov    eax,ebx
9f004397:	f7 ea                	imul   edx
9f004399:	c1 fa 05             	sar    edx,0x5
9f00439c:	89 d8                	mov    eax,ebx
9f00439e:	c1 f8 1f             	sar    eax,0x1f
9f0043a1:	29 c2                	sub    edx,eax
9f0043a3:	89 d0                	mov    eax,edx
9f0043a5:	6b c0 64             	imul   eax,eax,0x64
9f0043a8:	29 c3                	sub    ebx,eax
9f0043aa:	89 d8                	mov    eax,ebx
9f0043ac:	85 c0                	test   eax,eax
9f0043ae:	75 2f                	jne    9f0043df <mktime+0x422>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 4)
9f0043b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0043b3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0043b6:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f0043bc:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0043c1:	89 d8                	mov    eax,ebx
9f0043c3:	f7 ea                	imul   edx
9f0043c5:	c1 fa 07             	sar    edx,0x7
9f0043c8:	89 d8                	mov    eax,ebx
9f0043ca:	c1 f8 1f             	sar    eax,0x1f
9f0043cd:	29 c2                	sub    edx,eax
9f0043cf:	89 d0                	mov    eax,edx
9f0043d1:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0043d7:	29 c3                	sub    ebx,eax
9f0043d9:	89 d8                	mov    eax,ebx
9f0043db:	85 c0                	test   eax,eax
9f0043dd:	75 07                	jne    9f0043e6 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 5)
9f0043df:	ba 01 00 00 00       	mov    edx,0x1
9f0043e4:	eb 05                	jmp    9f0043eb <mktime+0x42e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 6)
9f0043e6:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 8)
9f0043eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0043ee:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f0043f1:	89 d0                	mov    eax,edx
9f0043f3:	01 c0                	add    eax,eax
9f0043f5:	01 d0                	add    eax,edx
9f0043f7:	c1 e0 02             	shl    eax,0x2
9f0043fa:	01 d8                	add    eax,ebx
9f0043fc:	8b 84 81 04 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2fc]
9f004403:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f004406:	0f 8e a9 fe ff ff    	jle    9f0042b5 <mktime+0x2f8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:131
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
9f00440c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00440f:	8d 50 01             	lea    edx,[eax+0x1]
9f004412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004415:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:132
  year = EPOCH_YR;
9f004418:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
9f00441f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004422:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004425:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f004428:	81 ea 6c 07 00 00    	sub    edx,0x76c
9f00442e:	39 d0                	cmp    eax,edx
9f004430:	7d 0a                	jge    9f00443c <mktime+0x47f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133 (discriminator 1)
9f004432:	b8 19 fc ff ff       	mov    eax,0xfffffc19
9f004437:	e9 d0 03 00 00       	jmp    9f00480c <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134
  seconds = 0;
9f00443c:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  day = 0;                      // Means days since day 0 now
9f004443:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  overflow = 0;
9f00444a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
9f004451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004454:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004457:	05 6c 07 00 00       	add    eax,0x76c
9f00445c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
9f00445f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004462:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004465:	3d 7c c6 59 00       	cmp    eax,0x59c67c
9f00446a:	7e 07                	jle    9f004473 <mktime+0x4b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145 (discriminator 1)
9f00446c:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
  day = (tm_year - year) * 365;
9f004473:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004476:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004479:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
9f00447f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
9f004482:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f004487:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
9f00448a:	89 c2                	mov    edx,eax
9f00448c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f00448f:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004492:	8d 58 03             	lea    ebx,[eax+0x3]
9f004495:	85 c0                	test   eax,eax
9f004497:	0f 48 c3             	cmovs  eax,ebx
9f00449a:	c1 f8 02             	sar    eax,0x2
9f00449d:	83 c0 01             	add    eax,0x1
9f0044a0:	39 c2                	cmp    edx,eax
9f0044a2:	7d 04                	jge    9f0044a8 <mktime+0x4eb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147 (discriminator 1)
9f0044a4:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
9f0044a8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f0044ab:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f0044ae:	8d 50 03             	lea    edx,[eax+0x3]
9f0044b1:	85 c0                	test   eax,eax
9f0044b3:	0f 48 c2             	cmovs  eax,edx
9f0044b6:	c1 f8 02             	sar    eax,0x2
9f0044b9:	89 c3                	mov    ebx,eax
9f0044bb:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f0044be:	83 e0 03             	and    eax,0x3
9f0044c1:	85 c0                	test   eax,eax
9f0044c3:	74 29                	je     9f0044ee <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 1)
9f0044c5:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f0044c8:	99                   	cdq    
9f0044c9:	c1 ea 1e             	shr    edx,0x1e
9f0044cc:	01 d0                	add    eax,edx
9f0044ce:	83 e0 03             	and    eax,0x3
9f0044d1:	29 d0                	sub    eax,edx
9f0044d3:	89 c6                	mov    esi,eax
9f0044d5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0044d8:	99                   	cdq    
9f0044d9:	c1 ea 1e             	shr    edx,0x1e
9f0044dc:	01 d0                	add    eax,edx
9f0044de:	83 e0 03             	and    eax,0x3
9f0044e1:	29 d0                	sub    eax,edx
9f0044e3:	39 c6                	cmp    esi,eax
9f0044e5:	7d 07                	jge    9f0044ee <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 3)
9f0044e7:	b8 01 00 00 00       	mov    eax,0x1
9f0044ec:	eb 05                	jmp    9f0044f3 <mktime+0x536>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 4)
9f0044ee:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 6)
9f0044f3:	01 d8                	add    eax,ebx
9f0044f5:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
9f0044f8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f0044fb:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f0044fe:	89 c3                	mov    ebx,eax
9f004500:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004505:	89 d8                	mov    eax,ebx
9f004507:	f7 ea                	imul   edx
9f004509:	c1 fa 05             	sar    edx,0x5
9f00450c:	89 d8                	mov    eax,ebx
9f00450e:	c1 f8 1f             	sar    eax,0x1f
9f004511:	89 d7                	mov    edi,edx
9f004513:	29 c7                	sub    edi,eax
9f004515:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004518:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00451d:	89 d8                	mov    eax,ebx
9f00451f:	f7 ea                	imul   edx
9f004521:	c1 fa 05             	sar    edx,0x5
9f004524:	89 d8                	mov    eax,ebx
9f004526:	c1 f8 1f             	sar    eax,0x1f
9f004529:	29 c2                	sub    edx,eax
9f00452b:	89 d0                	mov    eax,edx
9f00452d:	6b c0 64             	imul   eax,eax,0x64
9f004530:	29 c3                	sub    ebx,eax
9f004532:	89 d8                	mov    eax,ebx
9f004534:	85 c0                	test   eax,eax
9f004536:	74 49                	je     9f004581 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 1)
9f004538:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f00453b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004540:	89 d8                	mov    eax,ebx
9f004542:	f7 ea                	imul   edx
9f004544:	c1 fa 05             	sar    edx,0x5
9f004547:	89 d8                	mov    eax,ebx
9f004549:	c1 f8 1f             	sar    eax,0x1f
9f00454c:	89 d6                	mov    esi,edx
9f00454e:	29 c6                	sub    esi,eax
9f004550:	6b c6 64             	imul   eax,esi,0x64
9f004553:	89 de                	mov    esi,ebx
9f004555:	29 c6                	sub    esi,eax
9f004557:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f00455a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00455f:	89 d8                	mov    eax,ebx
9f004561:	f7 ea                	imul   edx
9f004563:	c1 fa 05             	sar    edx,0x5
9f004566:	89 d8                	mov    eax,ebx
9f004568:	c1 f8 1f             	sar    eax,0x1f
9f00456b:	29 c2                	sub    edx,eax
9f00456d:	89 d0                	mov    eax,edx
9f00456f:	6b c0 64             	imul   eax,eax,0x64
9f004572:	29 c3                	sub    ebx,eax
9f004574:	89 d8                	mov    eax,ebx
9f004576:	39 c6                	cmp    esi,eax
9f004578:	7d 07                	jge    9f004581 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 3)
9f00457a:	b8 01 00 00 00       	mov    eax,0x1
9f00457f:	eb 05                	jmp    9f004586 <mktime+0x5c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 4)
9f004581:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
9f004586:	01 f8                	add    eax,edi
9f004588:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
9f00458b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f00458e:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004591:	89 c3                	mov    ebx,eax
9f004593:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004598:	89 d8                	mov    eax,ebx
9f00459a:	f7 ea                	imul   edx
9f00459c:	c1 fa 07             	sar    edx,0x7
9f00459f:	89 d8                	mov    eax,ebx
9f0045a1:	c1 f8 1f             	sar    eax,0x1f
9f0045a4:	89 d7                	mov    edi,edx
9f0045a6:	29 c7                	sub    edi,eax
9f0045a8:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f0045ab:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0045b0:	89 d8                	mov    eax,ebx
9f0045b2:	f7 ea                	imul   edx
9f0045b4:	c1 fa 07             	sar    edx,0x7
9f0045b7:	89 d8                	mov    eax,ebx
9f0045b9:	c1 f8 1f             	sar    eax,0x1f
9f0045bc:	29 c2                	sub    edx,eax
9f0045be:	89 d0                	mov    eax,edx
9f0045c0:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0045c6:	29 c3                	sub    ebx,eax
9f0045c8:	89 d8                	mov    eax,ebx
9f0045ca:	85 c0                	test   eax,eax
9f0045cc:	74 4f                	je     9f00461d <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 1)
9f0045ce:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f0045d1:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0045d6:	89 d8                	mov    eax,ebx
9f0045d8:	f7 ea                	imul   edx
9f0045da:	c1 fa 07             	sar    edx,0x7
9f0045dd:	89 d8                	mov    eax,ebx
9f0045df:	c1 f8 1f             	sar    eax,0x1f
9f0045e2:	89 d6                	mov    esi,edx
9f0045e4:	29 c6                	sub    esi,eax
9f0045e6:	69 c6 90 01 00 00    	imul   eax,esi,0x190
9f0045ec:	89 de                	mov    esi,ebx
9f0045ee:	29 c6                	sub    esi,eax
9f0045f0:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f0045f3:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0045f8:	89 d8                	mov    eax,ebx
9f0045fa:	f7 ea                	imul   edx
9f0045fc:	c1 fa 07             	sar    edx,0x7
9f0045ff:	89 d8                	mov    eax,ebx
9f004601:	c1 f8 1f             	sar    eax,0x1f
9f004604:	29 c2                	sub    edx,eax
9f004606:	89 d0                	mov    eax,edx
9f004608:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f00460e:	29 c3                	sub    ebx,eax
9f004610:	89 d8                	mov    eax,ebx
9f004612:	39 c6                	cmp    esi,eax
9f004614:	7d 07                	jge    9f00461d <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 3)
9f004616:	b8 01 00 00 00       	mov    eax,0x1
9f00461b:	eb 05                	jmp    9f004622 <mktime+0x665>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 4)
9f00461d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
9f004622:	01 f8                	add    eax,edi
9f004624:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)

  yday = month = 0;
9f004627:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f00462e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f004631:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
  while (month < tmbuf->tm_mon) {
9f004634:	eb 7b                	jmp    9f0046b1 <mktime+0x6f4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154
    yday += _ytab[LEAPYEAR(tm_year)][month];
9f004636:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004639:	83 e0 03             	and    eax,0x3
9f00463c:	85 c0                	test   eax,eax
9f00463e:	75 50                	jne    9f004690 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 1)
9f004640:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004643:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004648:	89 d8                	mov    eax,ebx
9f00464a:	f7 ea                	imul   edx
9f00464c:	c1 fa 05             	sar    edx,0x5
9f00464f:	89 d8                	mov    eax,ebx
9f004651:	c1 f8 1f             	sar    eax,0x1f
9f004654:	29 c2                	sub    edx,eax
9f004656:	89 d0                	mov    eax,edx
9f004658:	6b c0 64             	imul   eax,eax,0x64
9f00465b:	29 c3                	sub    ebx,eax
9f00465d:	89 d8                	mov    eax,ebx
9f00465f:	85 c0                	test   eax,eax
9f004661:	75 26                	jne    9f004689 <mktime+0x6cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 4)
9f004663:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004666:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00466b:	89 d8                	mov    eax,ebx
9f00466d:	f7 ea                	imul   edx
9f00466f:	c1 fa 07             	sar    edx,0x7
9f004672:	89 d8                	mov    eax,ebx
9f004674:	c1 f8 1f             	sar    eax,0x1f
9f004677:	29 c2                	sub    edx,eax
9f004679:	89 d0                	mov    eax,edx
9f00467b:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004681:	29 c3                	sub    ebx,eax
9f004683:	89 d8                	mov    eax,ebx
9f004685:	85 c0                	test   eax,eax
9f004687:	75 07                	jne    9f004690 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 5)
9f004689:	ba 01 00 00 00       	mov    edx,0x1
9f00468e:	eb 05                	jmp    9f004695 <mktime+0x6d8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 6)
9f004690:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 8)
9f004695:	89 d0                	mov    eax,edx
9f004697:	01 c0                	add    eax,eax
9f004699:	01 d0                	add    eax,edx
9f00469b:	c1 e0 02             	shl    eax,0x2
9f00469e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f0046a1:	01 d0                	add    eax,edx
9f0046a3:	8b 84 81 04 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2fc]
9f0046aa:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 8)
    month++;
9f0046ad:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
9f0046b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0046b4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0046b7:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f0046ba:	0f 8f 76 ff ff ff    	jg     9f004636 <mktime+0x679>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
9f0046c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0046c3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f0046c6:	83 e8 01             	sub    eax,0x1
9f0046c9:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158
  if (day + yday < 0) overflow|=4;
9f0046cc:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0046cf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0046d2:	01 d0                	add    eax,edx
9f0046d4:	85 c0                	test   eax,eax
9f0046d6:	79 04                	jns    9f0046dc <mktime+0x71f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158 (discriminator 1)
9f0046d8:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159
  day += yday;
9f0046dc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0046df:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161

  tmbuf->tm_yday = yday;
9f0046e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0046e5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0046e8:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:162
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
9f0046eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0046ee:	8d 58 04             	lea    ebx,[eax+0x4]
9f0046f1:	ba 93 24 49 92       	mov    edx,0x92492493
9f0046f6:	89 d8                	mov    eax,ebx
9f0046f8:	f7 ea                	imul   edx
9f0046fa:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f0046fd:	c1 f8 02             	sar    eax,0x2
9f004700:	89 c2                	mov    edx,eax
9f004702:	89 d8                	mov    eax,ebx
9f004704:	c1 f8 1f             	sar    eax,0x1f
9f004707:	29 c2                	sub    edx,eax
9f004709:	89 d0                	mov    eax,edx
9f00470b:	89 c2                	mov    edx,eax
9f00470d:	c1 e2 03             	shl    edx,0x3
9f004710:	29 c2                	sub    edx,eax
9f004712:	89 d8                	mov    eax,ebx
9f004714:	29 d0                	sub    eax,edx
9f004716:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f004719:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:164

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
9f00471c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00471f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f004722:	c1 e0 02             	shl    eax,0x2
9f004725:	89 c2                	mov    edx,eax
9f004727:	c1 e2 04             	shl    edx,0x4
9f00472a:	29 c2                	sub    edx,eax
9f00472c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00472f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f004732:	01 d0                	add    eax,edx
9f004734:	c1 e0 02             	shl    eax,0x2
9f004737:	89 c2                	mov    edx,eax
9f004739:	c1 e2 04             	shl    edx,0x4
9f00473c:	29 c2                	sub    edx,eax
9f00473e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004741:	8b 00                	mov    eax,DWORD PTR [eax]
9f004743:	01 d0                	add    eax,edx
9f004745:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
9f004748:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f00474d:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
9f004750:	89 c3                	mov    ebx,eax
9f004752:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f004757:	89 d8                	mov    eax,ebx
9f004759:	f7 ea                	imul   edx
9f00475b:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f00475e:	c1 f8 10             	sar    eax,0x10
9f004761:	89 c2                	mov    edx,eax
9f004763:	89 d8                	mov    eax,ebx
9f004765:	c1 f8 1f             	sar    eax,0x1f
9f004768:	29 c2                	sub    edx,eax
9f00476a:	89 d0                	mov    eax,edx
9f00476c:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f00476f:	7d 04                	jge    9f004775 <mktime+0x7b8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166 (discriminator 1)
9f004771:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:167
  seconds += day * SECS_DAY;
9f004775:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f004778:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f00477e:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f004781:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004787:	8b 00                	mov    eax,DWORD PTR [eax]
9f004789:	85 c0                	test   eax,eax
9f00478b:	7e 16                	jle    9f0047a3 <mktime+0x7e6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 1)
9f00478d:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004793:	8b 00                	mov    eax,DWORD PTR [eax]
9f004795:	ba ff ff ff 7f       	mov    edx,0x7fffffff
9f00479a:	29 c2                	sub    edx,eax
9f00479c:	89 d0                	mov    eax,edx
9f00479e:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f0047a1:	7c 1b                	jl     9f0047be <mktime+0x801>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171 (discriminator 3)
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f0047a3:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f0047a9:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f0047ab:	85 c0                	test   eax,eax
9f0047ad:	79 13                	jns    9f0047c2 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f0047af:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f0047b5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0047b7:	f7 d8                	neg    eax
9f0047b9:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f0047bc:	7e 04                	jle    9f0047c2 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:172
          overflow|=16;
9f0047be:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174
  }
  seconds += libcTZ;
9f0047c2:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f0047c8:	8b 00                	mov    eax,DWORD PTR [eax]
9f0047ca:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:176

  if (tmbuf->tm_isdst) {
9f0047cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0047d0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
9f0047d3:	85 c0                	test   eax,eax
9f0047d5:	74 0b                	je     9f0047e2 <mktime+0x825>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177
    dst = _dstbias;
9f0047d7:	8b 81 7c 00 00 00    	mov    eax,DWORD PTR [ecx+0x7c]
9f0047dd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
9f0047e0:	eb 07                	jmp    9f0047e9 <mktime+0x82c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:179
  } else {
    dst = 0;
9f0047e2:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
9f0047e9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f0047ec:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f0047ef:	7e 04                	jle    9f0047f5 <mktime+0x838>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182 (discriminator 1)
9f0047f1:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:183
  seconds -= dst;
9f0047f5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f0047f8:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185

  if (overflow) return (time_t) overflow-2;
9f0047fb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f0047ff:	74 08                	je     9f004809 <mktime+0x84c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185 (discriminator 1)
9f004801:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f004804:	83 e8 02             	sub    eax,0x2
9f004807:	eb 03                	jmp    9f00480c <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
9f004809:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:189
}
9f00480c:	83 c4 20             	add    esp,0x20
9f00480f:	5b                   	pop    ebx
9f004810:	5e                   	pop    esi
9f004811:	5f                   	pop    edi
9f004812:	5d                   	pop    ebp
9f004813:	c3                   	ret    

9f004814 <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:192

VISIBLE struct tm* gettime(struct tm *time, bool localTime)
{
9f004814:	55                   	push   ebp
9f004815:	89 e5                	mov    ebp,esp
9f004817:	56                   	push   esi
9f004818:	53                   	push   ebx
9f004819:	83 ec 14             	sub    esp,0x14
9f00481c:	e8 a1 00 00 00       	call   9f0048c2 <__x86.get_pc_thunk.ax>
9f004821:	05 3b 2a 00 00       	add    eax,0x2a3b
9f004826:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004829:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/aproj/libChrisOS/src/time.c:193
    time_t ticks=0;
9f00482c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:195
    
    SYSCALL0(SYSCALL_GETTIME, ticks);
9f004833:	b8 71 01 00 00       	mov    eax,0x171
9f004838:	bb 00 00 00 00       	mov    ebx,0x0
9f00483d:	b9 00 00 00 00       	mov    ecx,0x0
9f004842:	ba 00 00 00 00       	mov    edx,0x0
9f004847:	be 00 00 00 00       	mov    esi,0x0
9f00484c:	e8 fc ff ff ff       	call   9f00484d <gettime+0x39>
9f004851:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:196
    if (localTime)
9f004854:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
9f004858:	74 11                	je     9f00486b <gettime+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:197
        return localtime_rI(&ticks,time);
9f00485a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00485d:	8d 45 f4             	lea    eax,[ebp-0xc]
9f004860:	50                   	push   eax
9f004861:	e8 05 f7 ff ff       	call   9f003f6b <localtime_rI>
9f004866:	83 c4 08             	add    esp,0x8
9f004869:	eb 0f                	jmp    9f00487a <gettime+0x66>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:199
    else
        return gmtime_rI((time_t*)&ticks,time);
9f00486b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00486e:	8d 45 f4             	lea    eax,[ebp-0xc]
9f004871:	50                   	push   eax
9f004872:	e8 81 f3 ff ff       	call   9f003bf8 <gmtime_rI>
9f004877:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:200 (discriminator 1)
}
9f00487a:	8d 65 f8             	lea    esp,[ebp-0x8]
9f00487d:	5b                   	pop    ebx
9f00487e:	5e                   	pop    esi
9f00487f:	5d                   	pop    ebp
9f004880:	c3                   	ret    

9f004881 <time>:
time():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:203

VISIBLE time_t time (time_t *result)
{
9f004881:	55                   	push   ebp
9f004882:	89 e5                	mov    ebp,esp
9f004884:	53                   	push   ebx
9f004885:	83 ec 14             	sub    esp,0x14
9f004888:	e8 73 00 00 00       	call   9f004900 <__x86.get_pc_thunk.bx>
9f00488d:	81 c3 cf 29 00 00    	add    ebx,0x29cf
/home/yogi/src/os/aproj/libChrisOS/src/time.c:204
    uint32_t ticks = do_syscall0(SYSCALL_GETTIME);
9f004893:	83 ec 0c             	sub    esp,0xc
9f004896:	68 71 01 00 00       	push   0x171
9f00489b:	e8 9c ca ff ff       	call   9f00133c <do_syscall0>
9f0048a0:	83 c4 10             	add    esp,0x10
9f0048a3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:205
    memcpyI(result, &ticks, 4);
9f0048a6:	83 ec 04             	sub    esp,0x4
9f0048a9:	6a 04                	push   0x4
9f0048ab:	8d 45 f4             	lea    eax,[ebp-0xc]
9f0048ae:	50                   	push   eax
9f0048af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0048b2:	e8 1d dd ff ff       	call   9f0025d4 <memcpyI>
9f0048b7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:206
    return ticks;
9f0048ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:207
9f0048bd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0048c0:	c9                   	leave  
9f0048c1:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

9f0048c2 <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
9f0048c2:	8b 04 24             	mov    eax,DWORD PTR [esp]
9f0048c5:	c3                   	ret    

Disassembly of section .plt:

9f0048d0 <.plt>:
9f0048d0:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
9f0048d6:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
9f0048dc:	00 00                	add    BYTE PTR [eax],al
9f0048de:	00 00                	add    BYTE PTR [eax],al
9f0048e0:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
9f0048e6:	68 00 00 00 00       	push   0x0
9f0048eb:	e9 e0 ff ff ff       	jmp    9f0048d0 <__x86.get_pc_thunk.ax+0xe>
9f0048f0:	ff a3 10 00 00 00    	jmp    DWORD PTR [ebx+0x10]
9f0048f6:	68 08 00 00 00       	push   0x8
9f0048fb:	e9 d0 ff ff ff       	jmp    9f0048d0 <__x86.get_pc_thunk.ax+0xe>

Disassembly of section .text.__x86.get_pc_thunk.bx:

9f004900 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
9f004900:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
9f004903:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

9f004904 <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
9f004904:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
9f004907:	c3                   	ret    

Disassembly of section .eh_frame:

9f004908 <.eh_frame>:
9f004908:	14 00                	adc    al,0x0
9f00490a:	00 00                	add    BYTE PTR [eax],al
9f00490c:	00 00                	add    BYTE PTR [eax],al
9f00490e:	00 00                	add    BYTE PTR [eax],al
9f004910:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f004913:	00 01                	add    BYTE PTR [ecx],al
9f004915:	7c 08                	jl     9f00491f <__x86.get_pc_thunk.cx+0x1b>
9f004917:	01 1b                	add    DWORD PTR [ebx],ebx
9f004919:	0c 04                	or     al,0x4
9f00491b:	04 88                	add    al,0x88
9f00491d:	01 00                	add    DWORD PTR [eax],eax
9f00491f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004922:	00 00                	add    BYTE PTR [eax],al
9f004924:	1c 00                	sbb    al,0x0
9f004926:	00 00                	add    BYTE PTR [eax],al
9f004928:	d8 b6 ff ff 38 00    	fdiv   DWORD PTR [esi+0x38ffff]
9f00492e:	00 00                	add    BYTE PTR [eax],al
9f004930:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004933:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004939:	74 c5                	je     9f004900 <__x86.get_pc_thunk.bx>
9f00493b:	0c 04                	or     al,0x4
9f00493d:	04 00                	add    al,0x0
9f00493f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004942:	00 00                	add    BYTE PTR [eax],al
9f004944:	3c 00                	cmp    al,0x0
9f004946:	00 00                	add    BYTE PTR [eax],al
9f004948:	f0 b6 ff             	lock mov dh,0xff
9f00494b:	ff                   	(bad)  
9f00494c:	38 00                	cmp    BYTE PTR [eax],al
9f00494e:	00 00                	add    BYTE PTR [eax],al
9f004950:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004953:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004959:	74 c5                	je     9f004920 <__x86.get_pc_thunk.cx+0x1c>
9f00495b:	0c 04                	or     al,0x4
9f00495d:	04 00                	add    al,0x0
9f00495f:	00 10                	add    BYTE PTR [eax],dl
9f004961:	00 00                	add    BYTE PTR [eax],al
9f004963:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
9f004967:	00 5a ff             	add    BYTE PTR [edx-0x1],bl
9f00496a:	ff                   	(bad)  
9f00496b:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f00496e:	00 00                	add    BYTE PTR [eax],al
9f004970:	00 00                	add    BYTE PTR [eax],al
9f004972:	00 00                	add    BYTE PTR [eax],al
9f004974:	24 00                	and    al,0x0
9f004976:	00 00                	add    BYTE PTR [eax],al
9f004978:	70 00                	jo     9f00497a <__x86.get_pc_thunk.cx+0x76>
9f00497a:	00 00                	add    BYTE PTR [eax],al
9f00497c:	f4                   	hlt    
9f00497d:	b6 ff                	mov    dh,0xff
9f00497f:	ff 55 00             	call   DWORD PTR [ebp+0x0]
9f004982:	00 00                	add    BYTE PTR [eax],al
9f004984:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004987:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00498d:	42                   	inc    edx
9f00498e:	86 03                	xchg   BYTE PTR [ebx],al
9f004990:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f004994:	c3                   	ret    
9f004995:	41                   	inc    ecx
9f004996:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00499a:	04 04                	add    al,0x4
9f00499c:	24 00                	and    al,0x0
9f00499e:	00 00                	add    BYTE PTR [eax],al
9f0049a0:	98                   	cwde   
9f0049a1:	00 00                	add    BYTE PTR [eax],al
9f0049a3:	00 21                	add    BYTE PTR [ecx],ah
9f0049a5:	b7 ff                	mov    bh,0xff
9f0049a7:	ff 55 00             	call   DWORD PTR [ebp+0x0]
9f0049aa:	00 00                	add    BYTE PTR [eax],al
9f0049ac:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0049af:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0049b5:	42                   	inc    edx
9f0049b6:	86 03                	xchg   BYTE PTR [ebx],al
9f0049b8:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f0049bc:	c3                   	ret    
9f0049bd:	41                   	inc    ecx
9f0049be:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0049c2:	04 04                	add    al,0x4
9f0049c4:	24 00                	and    al,0x0
9f0049c6:	00 00                	add    BYTE PTR [eax],al
9f0049c8:	c0 00 00             	rol    BYTE PTR [eax],0x0
9f0049cb:	00 50 b7             	add    BYTE PTR [eax-0x49],dl
9f0049ce:	ff                   	(bad)  
9f0049cf:	ff 97 00 00 00 00    	call   DWORD PTR [edi+0x0]
9f0049d5:	41                   	inc    ecx
9f0049d6:	0e                   	push   cs
9f0049d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0049dd:	42                   	inc    edx
9f0049de:	86 03                	xchg   BYTE PTR [ebx],al
9f0049e0:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f0049e4:	c3                   	ret    
9f0049e5:	41                   	inc    ecx
9f0049e6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0049ea:	04 04                	add    al,0x4
9f0049ec:	24 00                	and    al,0x0
9f0049ee:	00 00                	add    BYTE PTR [eax],al
9f0049f0:	e8 00 00 00 bf       	call   5e0049f5 <sysEnter_Vector+0x5ded49f5>
9f0049f5:	b7 ff                	mov    bh,0xff
9f0049f7:	ff 97 00 00 00 00    	call   DWORD PTR [edi+0x0]
9f0049fd:	41                   	inc    ecx
9f0049fe:	0e                   	push   cs
9f0049ff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a05:	42                   	inc    edx
9f004a06:	86 03                	xchg   BYTE PTR [ebx],al
9f004a08:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f004a0c:	c3                   	ret    
9f004a0d:	41                   	inc    ecx
9f004a0e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004a12:	04 04                	add    al,0x4
9f004a14:	10 00                	adc    BYTE PTR [eax],al
9f004a16:	00 00                	add    BYTE PTR [eax],al
9f004a18:	10 01                	adc    BYTE PTR [ecx],al
9f004a1a:	00 00                	add    BYTE PTR [eax],al
9f004a1c:	e4 fe                	in     al,0xfe
9f004a1e:	ff                   	(bad)  
9f004a1f:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f004a22:	00 00                	add    BYTE PTR [eax],al
9f004a24:	00 00                	add    BYTE PTR [eax],al
9f004a26:	00 00                	add    BYTE PTR [eax],al
9f004a28:	20 00                	and    BYTE PTR [eax],al
9f004a2a:	00 00                	add    BYTE PTR [eax],al
9f004a2c:	24 01                	and    al,0x1
9f004a2e:	00 00                	add    BYTE PTR [eax],al
9f004a30:	1c b8                	sbb    al,0xb8
9f004a32:	ff                   	(bad)  
9f004a33:	ff 77 00             	push   DWORD PTR [edi+0x0]
9f004a36:	00 00                	add    BYTE PTR [eax],al
9f004a38:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004a3b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a41:	44                   	inc    esp
9f004a42:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004a45:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004a46:	c5 c3 0c             	(bad)  
9f004a49:	04 04                	add    al,0x4
9f004a4b:	00 20                	add    BYTE PTR [eax],ah
9f004a4d:	00 00                	add    BYTE PTR [eax],al
9f004a4f:	00 48 01             	add    BYTE PTR [eax+0x1],cl
9f004a52:	00 00                	add    BYTE PTR [eax],al
9f004a54:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004a55:	b8 ff ff bb 00       	mov    eax,0xbbffff
9f004a5a:	00 00                	add    BYTE PTR [eax],al
9f004a5c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004a5f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a65:	44                   	inc    esp
9f004a66:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004a69:	b3 c5                	mov    bl,0xc5
9f004a6b:	c3                   	ret    
9f004a6c:	0c 04                	or     al,0x4
9f004a6e:	04 00                	add    al,0x0
9f004a70:	20 00                	and    BYTE PTR [eax],al
9f004a72:	00 00                	add    BYTE PTR [eax],al
9f004a74:	6c                   	ins    BYTE PTR es:[edi],dx
9f004a75:	01 00                	add    DWORD PTR [eax],eax
9f004a77:	00 06                	add    BYTE PTR [esi],al
9f004a79:	b9 ff ff bb 00       	mov    ecx,0xbbffff
9f004a7e:	00 00                	add    BYTE PTR [eax],al
9f004a80:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004a83:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a89:	44                   	inc    esp
9f004a8a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004a8d:	b3 c5                	mov    bl,0xc5
9f004a8f:	c3                   	ret    
9f004a90:	0c 04                	or     al,0x4
9f004a92:	04 00                	add    al,0x0
9f004a94:	1c 00                	sbb    al,0x0
9f004a96:	00 00                	add    BYTE PTR [eax],al
9f004a98:	90                   	nop
9f004a99:	01 00                	add    DWORD PTR [eax],eax
9f004a9b:	00 9d b9 ff ff 5c    	add    BYTE PTR [ebp+0x5cffffb9],bl
9f004aa1:	00 00                	add    BYTE PTR [eax],al
9f004aa3:	00 00                	add    BYTE PTR [eax],al
9f004aa5:	41                   	inc    ecx
9f004aa6:	0e                   	push   cs
9f004aa7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004aad:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
9f004ab0:	0c 04                	or     al,0x4
9f004ab2:	04 00                	add    al,0x0
9f004ab4:	20 00                	and    BYTE PTR [eax],al
9f004ab6:	00 00                	add    BYTE PTR [eax],al
9f004ab8:	b0 01                	mov    al,0x1
9f004aba:	00 00                	add    BYTE PTR [eax],al
9f004abc:	dc b9 ff ff ba 00    	fdivr  QWORD PTR [ecx+0xbaffff]
9f004ac2:	00 00                	add    BYTE PTR [eax],al
9f004ac4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004ac7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004acd:	44                   	inc    esp
9f004ace:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004ad1:	b2 c5                	mov    dl,0xc5
9f004ad3:	c3                   	ret    
9f004ad4:	0c 04                	or     al,0x4
9f004ad6:	04 00                	add    al,0x0
9f004ad8:	20 00                	and    BYTE PTR [eax],al
9f004ada:	00 00                	add    BYTE PTR [eax],al
9f004adc:	d4 01                	aam    0x1
9f004ade:	00 00                	add    BYTE PTR [eax],al
9f004ae0:	72 ba                	jb     9f004a9c <__x86.get_pc_thunk.cx+0x198>
9f004ae2:	ff                   	(bad)  
9f004ae3:	ff 5a 00             	call   FWORD PTR [edx+0x0]
9f004ae6:	00 00                	add    BYTE PTR [eax],al
9f004ae8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004aeb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004af1:	44                   	inc    esp
9f004af2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004af5:	52                   	push   edx
9f004af6:	c5 c3 0c             	(bad)  
9f004af9:	04 04                	add    al,0x4
9f004afb:	00 20                	add    BYTE PTR [eax],ah
9f004afd:	00 00                	add    BYTE PTR [eax],al
9f004aff:	00 f8                	add    al,bh
9f004b01:	01 00                	add    DWORD PTR [eax],eax
9f004b03:	00 a8 ba ff ff 5a    	add    BYTE PTR [eax+0x5affffba],ch
9f004b09:	00 00                	add    BYTE PTR [eax],al
9f004b0b:	00 00                	add    BYTE PTR [eax],al
9f004b0d:	41                   	inc    ecx
9f004b0e:	0e                   	push   cs
9f004b0f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b15:	44                   	inc    esp
9f004b16:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004b19:	52                   	push   edx
9f004b1a:	c5 c3 0c             	(bad)  
9f004b1d:	04 04                	add    al,0x4
9f004b1f:	00 20                	add    BYTE PTR [eax],ah
9f004b21:	00 00                	add    BYTE PTR [eax],al
9f004b23:	00 1c 02             	add    BYTE PTR [edx+eax*1],bl
9f004b26:	00 00                	add    BYTE PTR [eax],al
9f004b28:	e0 ba                	loopne 9f004ae4 <__x86.get_pc_thunk.cx+0x1e0>
9f004b2a:	ff                   	(bad)  
9f004b2b:	ff aa 00 00 00 00    	jmp    FWORD PTR [edx+0x0]
9f004b31:	41                   	inc    ecx
9f004b32:	0e                   	push   cs
9f004b33:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b39:	44                   	inc    esp
9f004b3a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004b3d:	a2 c5 c3 0c 04       	mov    ds:0x40cc3c5,al
9f004b42:	04 00                	add    al,0x0
9f004b44:	1c 00                	sbb    al,0x0
9f004b46:	00 00                	add    BYTE PTR [eax],al
9f004b48:	40                   	inc    eax
9f004b49:	02 00                	add    al,BYTE PTR [eax]
9f004b4b:	00 66 bb             	add    BYTE PTR [esi-0x45],ah
9f004b4e:	ff                   	(bad)  
9f004b4f:	ff 23                	jmp    DWORD PTR [ebx]
9f004b51:	00 00                	add    BYTE PTR [eax],al
9f004b53:	00 00                	add    BYTE PTR [eax],al
9f004b55:	41                   	inc    ecx
9f004b56:	0e                   	push   cs
9f004b57:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b5d:	5f                   	pop    edi
9f004b5e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004b61:	04 00                	add    al,0x0
9f004b63:	00 20                	add    BYTE PTR [eax],ah
9f004b65:	00 00                	add    BYTE PTR [eax],al
9f004b67:	00 60 02             	add    BYTE PTR [eax+0x2],ah
9f004b6a:	00 00                	add    BYTE PTR [eax],al
9f004b6c:	69 bb ff ff c1 01 00 	imul   edi,DWORD PTR [ebx+0x1c1ffff],0x41000000
9f004b73:	00 00 41 
9f004b76:	0e                   	push   cs
9f004b77:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b7d:	44                   	inc    esp
9f004b7e:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004b81:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
9f004b86:	04 04                	add    al,0x4
9f004b88:	20 00                	and    BYTE PTR [eax],al
9f004b8a:	00 00                	add    BYTE PTR [eax],al
9f004b8c:	84 02                	test   BYTE PTR [edx],al
9f004b8e:	00 00                	add    BYTE PTR [eax],al
9f004b90:	06                   	push   es
9f004b91:	bd ff ff 2c 00       	mov    ebp,0x2cffff
9f004b96:	00 00                	add    BYTE PTR [eax],al
9f004b98:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004b9b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004ba1:	44                   	inc    esp
9f004ba2:	83 03 64             	add    DWORD PTR [ebx],0x64
9f004ba5:	c5 c3 0c             	(bad)  
9f004ba8:	04 04                	add    al,0x4
9f004baa:	00 00                	add    BYTE PTR [eax],al
9f004bac:	1c 00                	sbb    al,0x0
9f004bae:	00 00                	add    BYTE PTR [eax],al
9f004bb0:	a8 02                	test   al,0x2
9f004bb2:	00 00                	add    BYTE PTR [eax],al
9f004bb4:	0e                   	push   cs
9f004bb5:	bd ff ff 23 00       	mov    ebp,0x23ffff
9f004bba:	00 00                	add    BYTE PTR [eax],al
9f004bbc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004bbf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004bc5:	5f                   	pop    edi
9f004bc6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004bc9:	04 00                	add    al,0x0
9f004bcb:	00 20                	add    BYTE PTR [eax],ah
9f004bcd:	00 00                	add    BYTE PTR [eax],al
9f004bcf:	00 c8                	add    al,cl
9f004bd1:	02 00                	add    al,BYTE PTR [eax]
9f004bd3:	00 14 bd ff ff 31 00 	add    BYTE PTR [edi*4+0x31ffff],dl
9f004bda:	00 00                	add    BYTE PTR [eax],al
9f004bdc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004bdf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004be5:	44                   	inc    esp
9f004be6:	83 03 69             	add    DWORD PTR [ebx],0x69
9f004be9:	c5 c3 0c             	(bad)  
9f004bec:	04 04                	add    al,0x4
9f004bee:	00 00                	add    BYTE PTR [eax],al
9f004bf0:	20 00                	and    BYTE PTR [eax],al
9f004bf2:	00 00                	add    BYTE PTR [eax],al
9f004bf4:	ec                   	in     al,dx
9f004bf5:	02 00                	add    al,BYTE PTR [eax]
9f004bf7:	00 21                	add    BYTE PTR [ecx],ah
9f004bf9:	bd ff ff 2c 00       	mov    ebp,0x2cffff
9f004bfe:	00 00                	add    BYTE PTR [eax],al
9f004c00:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004c03:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c09:	44                   	inc    esp
9f004c0a:	83 03 64             	add    DWORD PTR [ebx],0x64
9f004c0d:	c5 c3 0c             	(bad)  
9f004c10:	04 04                	add    al,0x4
9f004c12:	00 00                	add    BYTE PTR [eax],al
9f004c14:	20 00                	and    BYTE PTR [eax],al
9f004c16:	00 00                	add    BYTE PTR [eax],al
9f004c18:	10 03                	adc    BYTE PTR [ebx],al
9f004c1a:	00 00                	add    BYTE PTR [eax],al
9f004c1c:	29 bd ff ff 59 00    	sub    DWORD PTR [ebp+0x59ffff],edi
9f004c22:	00 00                	add    BYTE PTR [eax],al
9f004c24:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004c27:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c2d:	44                   	inc    esp
9f004c2e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004c31:	51                   	push   ecx
9f004c32:	c5 c3 0c             	(bad)  
9f004c35:	04 04                	add    al,0x4
9f004c37:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004c3a:	00 00                	add    BYTE PTR [eax],al
9f004c3c:	34 03                	xor    al,0x3
9f004c3e:	00 00                	add    BYTE PTR [eax],al
9f004c40:	5e                   	pop    esi
9f004c41:	bd ff ff 93 00       	mov    ebp,0x93ffff
9f004c46:	00 00                	add    BYTE PTR [eax],al
9f004c48:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004c4b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c51:	45                   	inc    ebp
9f004c52:	86 03                	xchg   BYTE PTR [ebx],al
9f004c54:	83 04 02 88          	add    DWORD PTR [edx+eax*1],0xffffff88
9f004c58:	c3                   	ret    
9f004c59:	41                   	inc    ecx
9f004c5a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004c5e:	04 04                	add    al,0x4
9f004c60:	20 00                	and    BYTE PTR [eax],al
9f004c62:	00 00                	add    BYTE PTR [eax],al
9f004c64:	5c                   	pop    esp
9f004c65:	03 00                	add    eax,DWORD PTR [eax]
9f004c67:	00 c9                	add    cl,cl
9f004c69:	bd ff ff 2a 00       	mov    ebp,0x2affff
9f004c6e:	00 00                	add    BYTE PTR [eax],al
9f004c70:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004c73:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c79:	44                   	inc    esp
9f004c7a:	83 03 62             	add    DWORD PTR [ebx],0x62
9f004c7d:	c5 c3 0c             	(bad)  
9f004c80:	04 04                	add    al,0x4
9f004c82:	00 00                	add    BYTE PTR [eax],al
9f004c84:	24 00                	and    al,0x0
9f004c86:	00 00                	add    BYTE PTR [eax],al
9f004c88:	80 03 00             	add    BYTE PTR [ebx],0x0
9f004c8b:	00 cf                	add    bh,cl
9f004c8d:	bd ff ff 35 00       	mov    ebp,0x35ffff
9f004c92:	00 00                	add    BYTE PTR [eax],al
9f004c94:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004c97:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c9d:	42                   	inc    edx
9f004c9e:	86 03                	xchg   BYTE PTR [ebx],al
9f004ca0:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f004ca7:	c5 
9f004ca8:	0c 04                	or     al,0x4
9f004caa:	04 00                	add    al,0x0
9f004cac:	1c 00                	sbb    al,0x0
9f004cae:	00 00                	add    BYTE PTR [eax],al
9f004cb0:	a8 03                	test   al,0x3
9f004cb2:	00 00                	add    BYTE PTR [eax],al
9f004cb4:	dc bd ff ff 26 00    	fdivr  QWORD PTR [ebp+0x26ffff]
9f004cba:	00 00                	add    BYTE PTR [eax],al
9f004cbc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004cbf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004cc5:	62                   	(bad)  
9f004cc6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004cc9:	04 00                	add    al,0x0
9f004ccb:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004cce:	00 00                	add    BYTE PTR [eax],al
9f004cd0:	c8 03 00 00          	enter  0x3,0x0
9f004cd4:	e2 bd                	loop   9f004c93 <__x86.get_pc_thunk.cx+0x38f>
9f004cd6:	ff                   	(bad)  
9f004cd7:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f004cdd:	41                   	inc    ecx
9f004cde:	0e                   	push   cs
9f004cdf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004ce5:	42                   	inc    edx
9f004ce6:	86 03                	xchg   BYTE PTR [ebx],al
9f004ce8:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f004cef:	c5 
9f004cf0:	0c 04                	or     al,0x4
9f004cf2:	04 00                	add    al,0x0
9f004cf4:	1c 00                	sbb    al,0x0
9f004cf6:	00 00                	add    BYTE PTR [eax],al
9f004cf8:	f0 03 00             	lock add eax,DWORD PTR [eax]
9f004cfb:	00 ef                	add    bh,ch
9f004cfd:	bd ff ff 26 00       	mov    ebp,0x26ffff
9f004d02:	00 00                	add    BYTE PTR [eax],al
9f004d04:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004d07:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004d0d:	62                   	(bad)  
9f004d0e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004d11:	04 00                	add    al,0x0
9f004d13:	00 20                	add    BYTE PTR [eax],ah
9f004d15:	00 00                	add    BYTE PTR [eax],al
9f004d17:	00 10                	add    BYTE PTR [eax],dl
9f004d19:	04 00                	add    al,0x0
9f004d1b:	00 f5                	add    ch,dh
9f004d1d:	bd ff ff 2e 00       	mov    ebp,0x2effff
9f004d22:	00 00                	add    BYTE PTR [eax],al
9f004d24:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004d27:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004d2d:	44                   	inc    esp
9f004d2e:	83 03 66             	add    DWORD PTR [ebx],0x66
9f004d31:	c5 c3 0c             	(bad)  
9f004d34:	04 04                	add    al,0x4
9f004d36:	00 00                	add    BYTE PTR [eax],al
9f004d38:	1c 00                	sbb    al,0x0
9f004d3a:	00 00                	add    BYTE PTR [eax],al
9f004d3c:	34 04                	xor    al,0x4
9f004d3e:	00 00                	add    BYTE PTR [eax],al
9f004d40:	ff                   	(bad)  
9f004d41:	bd ff ff 26 00       	mov    ebp,0x26ffff
9f004d46:	00 00                	add    BYTE PTR [eax],al
9f004d48:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004d4b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004d51:	62                   	(bad)  
9f004d52:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004d55:	04 00                	add    al,0x0
9f004d57:	00 20                	add    BYTE PTR [eax],ah
9f004d59:	00 00                	add    BYTE PTR [eax],al
9f004d5b:	00 54 04 00          	add    BYTE PTR [esp+eax*1+0x0],dl
9f004d5f:	00 05 be ff ff 2d    	add    BYTE PTR ds:0x2dffffbe,al
9f004d65:	00 00                	add    BYTE PTR [eax],al
9f004d67:	00 00                	add    BYTE PTR [eax],al
9f004d69:	41                   	inc    ecx
9f004d6a:	0e                   	push   cs
9f004d6b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004d71:	44                   	inc    esp
9f004d72:	83 03 65             	add    DWORD PTR [ebx],0x65
9f004d75:	c5 c3 0c             	(bad)  
9f004d78:	04 04                	add    al,0x4
9f004d7a:	00 00                	add    BYTE PTR [eax],al
9f004d7c:	1c 00                	sbb    al,0x0
9f004d7e:	00 00                	add    BYTE PTR [eax],al
9f004d80:	78 04                	js     9f004d86 <__x86.get_pc_thunk.cx+0x482>
9f004d82:	00 00                	add    BYTE PTR [eax],al
9f004d84:	0e                   	push   cs
9f004d85:	be ff ff 23 00       	mov    esi,0x23ffff
9f004d8a:	00 00                	add    BYTE PTR [eax],al
9f004d8c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004d8f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004d95:	5f                   	pop    edi
9f004d96:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004d99:	04 00                	add    al,0x0
9f004d9b:	00 20                	add    BYTE PTR [eax],ah
9f004d9d:	00 00                	add    BYTE PTR [eax],al
9f004d9f:	00 98 04 00 00 11    	add    BYTE PTR [eax+0x11000004],bl
9f004da5:	be ff ff f5 02       	mov    esi,0x2f5ffff
9f004daa:	00 00                	add    BYTE PTR [eax],al
9f004dac:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004daf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004db5:	44                   	inc    esp
9f004db6:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004db9:	ed                   	in     eax,dx
9f004dba:	02 c5                	add    al,ch
9f004dbc:	c3                   	ret    
9f004dbd:	0c 04                	or     al,0x4
9f004dbf:	04 20                	add    al,0x20
9f004dc1:	00 00                	add    BYTE PTR [eax],al
9f004dc3:	00 bc 04 00 00 e2 c0 	add    BYTE PTR [esp+eax*1-0x3f1e0000],bh
9f004dca:	ff                   	(bad)  
9f004dcb:	ff 29                	jmp    FWORD PTR [ecx]
9f004dcd:	00 00                	add    BYTE PTR [eax],al
9f004dcf:	00 00                	add    BYTE PTR [eax],al
9f004dd1:	41                   	inc    ecx
9f004dd2:	0e                   	push   cs
9f004dd3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004dd9:	44                   	inc    esp
9f004dda:	83 03 61             	add    DWORD PTR [ebx],0x61
9f004ddd:	c5 c3 0c             	(bad)  
9f004de0:	04 04                	add    al,0x4
9f004de2:	00 00                	add    BYTE PTR [eax],al
9f004de4:	1c 00                	sbb    al,0x0
9f004de6:	00 00                	add    BYTE PTR [eax],al
9f004de8:	e0 04                	loopne 9f004dee <__x86.get_pc_thunk.cx+0x4ea>
9f004dea:	00 00                	add    BYTE PTR [eax],al
9f004dec:	e7 c0                	out    0xc0,eax
9f004dee:	ff                   	(bad)  
9f004def:	ff 20                	jmp    DWORD PTR [eax]
9f004df1:	00 00                	add    BYTE PTR [eax],al
9f004df3:	00 00                	add    BYTE PTR [eax],al
9f004df5:	41                   	inc    ecx
9f004df6:	0e                   	push   cs
9f004df7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004dfd:	5c                   	pop    esp
9f004dfe:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004e01:	04 00                	add    al,0x0
9f004e03:	00 20                	add    BYTE PTR [eax],ah
9f004e05:	00 00                	add    BYTE PTR [eax],al
9f004e07:	00 00                	add    BYTE PTR [eax],al
9f004e09:	05 00 00 e7 c0       	add    eax,0xc0e70000
9f004e0e:	ff                   	(bad)  
9f004e0f:	ff c1                	inc    ecx
9f004e11:	01 00                	add    DWORD PTR [eax],eax
9f004e13:	00 00                	add    BYTE PTR [eax],al
9f004e15:	41                   	inc    ecx
9f004e16:	0e                   	push   cs
9f004e17:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004e1d:	44                   	inc    esp
9f004e1e:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004e21:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
9f004e26:	04 04                	add    al,0x4
9f004e28:	1c 00                	sbb    al,0x0
9f004e2a:	00 00                	add    BYTE PTR [eax],al
9f004e2c:	24 05                	and    al,0x5
9f004e2e:	00 00                	add    BYTE PTR [eax],al
9f004e30:	84 c2                	test   dl,al
9f004e32:	ff                   	(bad)  
9f004e33:	ff 26                	jmp    DWORD PTR [esi]
9f004e35:	00 00                	add    BYTE PTR [eax],al
9f004e37:	00 00                	add    BYTE PTR [eax],al
9f004e39:	41                   	inc    ecx
9f004e3a:	0e                   	push   cs
9f004e3b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004e41:	62                   	(bad)  
9f004e42:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004e45:	04 00                	add    al,0x0
9f004e47:	00 20                	add    BYTE PTR [eax],ah
9f004e49:	00 00                	add    BYTE PTR [eax],al
9f004e4b:	00 44 05 00          	add    BYTE PTR [ebp+eax*1+0x0],al
9f004e4f:	00 8c c2 ff ff 26 00 	add    BYTE PTR [edx+eax*8+0x26ffff],cl
9f004e56:	00 00                	add    BYTE PTR [eax],al
9f004e58:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004e5b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004e61:	41                   	inc    ecx
9f004e62:	83 03 60             	add    DWORD PTR [ebx],0x60
9f004e65:	c3                   	ret    
9f004e66:	41                   	inc    ecx
9f004e67:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004e6a:	04 00                	add    al,0x0
9f004e6c:	20 00                	and    BYTE PTR [eax],al
9f004e6e:	00 00                	add    BYTE PTR [eax],al
9f004e70:	68 05 00 00 8e       	push   0x8e000005
9f004e75:	c2 ff ff             	ret    0xffff
9f004e78:	43                   	inc    ebx
9f004e79:	00 00                	add    BYTE PTR [eax],al
9f004e7b:	00 00                	add    BYTE PTR [eax],al
9f004e7d:	41                   	inc    ecx
9f004e7e:	0e                   	push   cs
9f004e7f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004e85:	44                   	inc    esp
9f004e86:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f004e89:	c3                   	ret    
9f004e8a:	41                   	inc    ecx
9f004e8b:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004e8e:	04 00                	add    al,0x0
9f004e90:	20 00                	and    BYTE PTR [eax],al
9f004e92:	00 00                	add    BYTE PTR [eax],al
9f004e94:	8c 05 00 00 ad c2    	mov    WORD PTR ds:0xc2ad0000,es
9f004e9a:	ff                   	(bad)  
9f004e9b:	ff 43 00             	inc    DWORD PTR [ebx+0x0]
9f004e9e:	00 00                	add    BYTE PTR [eax],al
9f004ea0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004ea3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004ea9:	44                   	inc    esp
9f004eaa:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f004ead:	c3                   	ret    
9f004eae:	41                   	inc    ecx
9f004eaf:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004eb2:	04 00                	add    al,0x0
9f004eb4:	20 00                	and    BYTE PTR [eax],al
9f004eb6:	00 00                	add    BYTE PTR [eax],al
9f004eb8:	b0 05                	mov    al,0x5
9f004eba:	00 00                	add    BYTE PTR [eax],al
9f004ebc:	cc                   	int3   
9f004ebd:	c2 ff ff             	ret    0xffff
9f004ec0:	bd 00 00 00 00       	mov    ebp,0x0
9f004ec5:	41                   	inc    ecx
9f004ec6:	0e                   	push   cs
9f004ec7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004ecd:	44                   	inc    esp
9f004ece:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004ed1:	b5 c5                	mov    ch,0xc5
9f004ed3:	c3                   	ret    
9f004ed4:	0c 04                	or     al,0x4
9f004ed6:	04 00                	add    al,0x0
9f004ed8:	24 00                	and    al,0x0
9f004eda:	00 00                	add    BYTE PTR [eax],al
9f004edc:	d4 05                	aam    0x5
9f004ede:	00 00                	add    BYTE PTR [eax],al
9f004ee0:	68 c3 ff ff 3a       	push   0x3affffc3
9f004ee5:	00 00                	add    BYTE PTR [eax],al
9f004ee7:	00 00                	add    BYTE PTR [eax],al
9f004ee9:	41                   	inc    ecx
9f004eea:	0e                   	push   cs
9f004eeb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004ef1:	45                   	inc    ebp
9f004ef2:	86 03                	xchg   BYTE PTR [ebx],al
9f004ef4:	83 04 6f c3          	add    DWORD PTR [edi+ebp*2],0xffffffc3
9f004ef8:	41                   	inc    ecx
9f004ef9:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004efd:	04 04                	add    al,0x4
9f004eff:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004f02:	00 00                	add    BYTE PTR [eax],al
9f004f04:	fc                   	cld    
9f004f05:	05 00 00 7a c3       	add    eax,0xc37a0000
9f004f0a:	ff                   	(bad)  
9f004f0b:	ff                   	(bad)  
9f004f0c:	3c 00                	cmp    al,0x0
9f004f0e:	00 00                	add    BYTE PTR [eax],al
9f004f10:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004f13:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004f19:	45                   	inc    ebp
9f004f1a:	86 03                	xchg   BYTE PTR [ebx],al
9f004f1c:	83 04 71 c3          	add    DWORD PTR [ecx+esi*2],0xffffffc3
9f004f20:	41                   	inc    ecx
9f004f21:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004f25:	04 04                	add    al,0x4
9f004f27:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004f2a:	00 00                	add    BYTE PTR [eax],al
9f004f2c:	24 06                	and    al,0x6
9f004f2e:	00 00                	add    BYTE PTR [eax],al
9f004f30:	8e c3                	mov    es,ebx
9f004f32:	ff                   	(bad)  
9f004f33:	ff                   	(bad)  
9f004f34:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f004f37:	00 00                	add    BYTE PTR [eax],al
9f004f39:	41                   	inc    ecx
9f004f3a:	0e                   	push   cs
9f004f3b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004f41:	45                   	inc    ebp
9f004f42:	86 03                	xchg   BYTE PTR [ebx],al
9f004f44:	83 04 73 c3          	add    DWORD PTR [ebx+esi*2],0xffffffc3
9f004f48:	41                   	inc    ecx
9f004f49:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004f4d:	04 04                	add    al,0x4
9f004f4f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004f52:	00 00                	add    BYTE PTR [eax],al
9f004f54:	4c                   	dec    esp
9f004f55:	06                   	push   es
9f004f56:	00 00                	add    BYTE PTR [eax],al
9f004f58:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f004f59:	c3                   	ret    
9f004f5a:	ff                   	(bad)  
9f004f5b:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f004f5e:	00 00                	add    BYTE PTR [eax],al
9f004f60:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004f63:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004f69:	45                   	inc    ebp
9f004f6a:	86 03                	xchg   BYTE PTR [ebx],al
9f004f6c:	83 04 75 c3 41 c6 41 	add    DWORD PTR [esi*2+0x41c641c3],0xffffffc5
9f004f73:	c5 
9f004f74:	0c 04                	or     al,0x4
9f004f76:	04 00                	add    al,0x0
9f004f78:	24 00                	and    al,0x0
9f004f7a:	00 00                	add    BYTE PTR [eax],al
9f004f7c:	74 06                	je     9f004f84 <__x86.get_pc_thunk.cx+0x680>
9f004f7e:	00 00                	add    BYTE PTR [eax],al
9f004f80:	bc c3 ff ff 42       	mov    esp,0x42ffffc3
9f004f85:	00 00                	add    BYTE PTR [eax],al
9f004f87:	00 00                	add    BYTE PTR [eax],al
9f004f89:	41                   	inc    ecx
9f004f8a:	0e                   	push   cs
9f004f8b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004f91:	45                   	inc    ebp
9f004f92:	86 03                	xchg   BYTE PTR [ebx],al
9f004f94:	83 04 77 c3          	add    DWORD PTR [edi+esi*2],0xffffffc3
9f004f98:	41                   	inc    ecx
9f004f99:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004f9d:	04 04                	add    al,0x4
9f004f9f:	00 20                	add    BYTE PTR [eax],ah
9f004fa1:	00 00                	add    BYTE PTR [eax],al
9f004fa3:	00 9c 06 00 00 d6 c3 	add    BYTE PTR [esi+eax*1-0x3c2a0000],bl
9f004faa:	ff                   	(bad)  
9f004fab:	ff cb                	dec    ebx
9f004fad:	00 00                	add    BYTE PTR [eax],al
9f004faf:	00 00                	add    BYTE PTR [eax],al
9f004fb1:	41                   	inc    ecx
9f004fb2:	0e                   	push   cs
9f004fb3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004fb9:	44                   	inc    esp
9f004fba:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004fbd:	c3                   	ret    
9f004fbe:	c5 c3 0c             	(bad)  
9f004fc1:	04 04                	add    al,0x4
9f004fc3:	00 20                	add    BYTE PTR [eax],ah
9f004fc5:	00 00                	add    BYTE PTR [eax],al
9f004fc7:	00 c0                	add    al,al
9f004fc9:	06                   	push   es
9f004fca:	00 00                	add    BYTE PTR [eax],al
9f004fcc:	7d c4                	jge    9f004f92 <__x86.get_pc_thunk.cx+0x68e>
9f004fce:	ff                   	(bad)  
9f004fcf:	ff 23                	jmp    DWORD PTR [ebx]
9f004fd1:	00 00                	add    BYTE PTR [eax],al
9f004fd3:	00 00                	add    BYTE PTR [eax],al
9f004fd5:	41                   	inc    ecx
9f004fd6:	0e                   	push   cs
9f004fd7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004fdd:	44                   	inc    esp
9f004fde:	83 03 5a             	add    DWORD PTR [ebx],0x5a
9f004fe1:	c3                   	ret    
9f004fe2:	41                   	inc    ecx
9f004fe3:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004fe6:	04 00                	add    al,0x0
9f004fe8:	20 00                	and    BYTE PTR [eax],al
9f004fea:	00 00                	add    BYTE PTR [eax],al
9f004fec:	e4 06                	in     al,0x6
9f004fee:	00 00                	add    BYTE PTR [eax],al
9f004ff0:	7c c4                	jl     9f004fb6 <__x86.get_pc_thunk.cx+0x6b2>
9f004ff2:	ff                   	(bad)  
9f004ff3:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f004ff6:	00 00                	add    BYTE PTR [eax],al
9f004ff8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004ffb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005001:	44                   	inc    esp
9f005002:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005005:	51                   	push   ecx
9f005006:	c5 c3 0c             	(bad)  
9f005009:	04 04                	add    al,0x4
9f00500b:	00 20                	add    BYTE PTR [eax],ah
9f00500d:	00 00                	add    BYTE PTR [eax],al
9f00500f:	00 08                	add    BYTE PTR [eax],cl
9f005011:	07                   	pop    es
9f005012:	00 00                	add    BYTE PTR [eax],al
9f005014:	b1 c4                	mov    cl,0xc4
9f005016:	ff                   	(bad)  
9f005017:	ff 54 00 00          	call   DWORD PTR [eax+eax*1+0x0]
9f00501b:	00 00                	add    BYTE PTR [eax],al
9f00501d:	41                   	inc    ecx
9f00501e:	0e                   	push   cs
9f00501f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005025:	44                   	inc    esp
9f005026:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005029:	4c                   	dec    esp
9f00502a:	c5 c3 0c             	(bad)  
9f00502d:	04 04                	add    al,0x4
9f00502f:	00 20                	add    BYTE PTR [eax],ah
9f005031:	00 00                	add    BYTE PTR [eax],al
9f005033:	00 2c 07             	add    BYTE PTR [edi+eax*1],ch
9f005036:	00 00                	add    BYTE PTR [eax],al
9f005038:	e1 c4                	loope  9f004ffe <__x86.get_pc_thunk.cx+0x6fa>
9f00503a:	ff                   	(bad)  
9f00503b:	ff 54 00 00          	call   DWORD PTR [eax+eax*1+0x0]
9f00503f:	00 00                	add    BYTE PTR [eax],al
9f005041:	41                   	inc    ecx
9f005042:	0e                   	push   cs
9f005043:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005049:	44                   	inc    esp
9f00504a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00504d:	4c                   	dec    esp
9f00504e:	c5 c3 0c             	(bad)  
9f005051:	04 04                	add    al,0x4
9f005053:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005056:	00 00                	add    BYTE PTR [eax],al
9f005058:	50                   	push   eax
9f005059:	07                   	pop    es
9f00505a:	00 00                	add    BYTE PTR [eax],al
9f00505c:	11 c5                	adc    ebp,eax
9f00505e:	ff                   	(bad)  
9f00505f:	ff 34 00             	push   DWORD PTR [eax+eax*1]
9f005062:	00 00                	add    BYTE PTR [eax],al
9f005064:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005067:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00506d:	70 c5                	jo     9f005034 <__x86.get_pc_thunk.cx+0x730>
9f00506f:	0c 04                	or     al,0x4
9f005071:	04 00                	add    al,0x0
9f005073:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005076:	00 00                	add    BYTE PTR [eax],al
9f005078:	70 07                	jo     9f005081 <__x86.get_pc_thunk.cx+0x77d>
9f00507a:	00 00                	add    BYTE PTR [eax],al
9f00507c:	25 c5 ff ff 37       	and    eax,0x37ffffc5
9f005081:	00 00                	add    BYTE PTR [eax],al
9f005083:	00 00                	add    BYTE PTR [eax],al
9f005085:	41                   	inc    ecx
9f005086:	0e                   	push   cs
9f005087:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00508d:	73 c5                	jae    9f005054 <__x86.get_pc_thunk.cx+0x750>
9f00508f:	0c 04                	or     al,0x4
9f005091:	04 00                	add    al,0x0
9f005093:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005096:	00 00                	add    BYTE PTR [eax],al
9f005098:	90                   	nop
9f005099:	07                   	pop    es
9f00509a:	00 00                	add    BYTE PTR [eax],al
9f00509c:	3c c5                	cmp    al,0xc5
9f00509e:	ff                   	(bad)  
9f00509f:	ff 37                	push   DWORD PTR [edi]
9f0050a1:	00 00                	add    BYTE PTR [eax],al
9f0050a3:	00 00                	add    BYTE PTR [eax],al
9f0050a5:	41                   	inc    ecx
9f0050a6:	0e                   	push   cs
9f0050a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0050ad:	73 c5                	jae    9f005074 <__x86.get_pc_thunk.cx+0x770>
9f0050af:	0c 04                	or     al,0x4
9f0050b1:	04 00                	add    al,0x0
9f0050b3:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0050b6:	00 00                	add    BYTE PTR [eax],al
9f0050b8:	b0 07                	mov    al,0x7
9f0050ba:	00 00                	add    BYTE PTR [eax],al
9f0050bc:	53                   	push   ebx
9f0050bd:	c5 ff ff             	(bad)  
9f0050c0:	70 00                	jo     9f0050c2 <__x86.get_pc_thunk.cx+0x7be>
9f0050c2:	00 00                	add    BYTE PTR [eax],al
9f0050c4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0050c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0050cd:	45                   	inc    ebp
9f0050ce:	86 03                	xchg   BYTE PTR [ebx],al
9f0050d0:	83 04 02 65          	add    DWORD PTR [edx+eax*1],0x65
9f0050d4:	c3                   	ret    
9f0050d5:	41                   	inc    ecx
9f0050d6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0050da:	04 04                	add    al,0x4
9f0050dc:	24 00                	and    al,0x0
9f0050de:	00 00                	add    BYTE PTR [eax],al
9f0050e0:	d8 07                	fadd   DWORD PTR [edi]
9f0050e2:	00 00                	add    BYTE PTR [eax],al
9f0050e4:	9b                   	fwait
9f0050e5:	c5 ff ff             	(bad)  
9f0050e8:	70 00                	jo     9f0050ea <__x86.get_pc_thunk.cx+0x7e6>
9f0050ea:	00 00                	add    BYTE PTR [eax],al
9f0050ec:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0050ef:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0050f5:	45                   	inc    ebp
9f0050f6:	86 03                	xchg   BYTE PTR [ebx],al
9f0050f8:	83 04 02 65          	add    DWORD PTR [edx+eax*1],0x65
9f0050fc:	c3                   	ret    
9f0050fd:	41                   	inc    ecx
9f0050fe:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005102:	04 04                	add    al,0x4
9f005104:	1c 00                	sbb    al,0x0
9f005106:	00 00                	add    BYTE PTR [eax],al
9f005108:	00 08                	add    BYTE PTR [eax],cl
9f00510a:	00 00                	add    BYTE PTR [eax],al
9f00510c:	e3 c5                	jecxz  9f0050d3 <__x86.get_pc_thunk.cx+0x7cf>
9f00510e:	ff                   	(bad)  
9f00510f:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f005115:	41                   	inc    ecx
9f005116:	0e                   	push   cs
9f005117:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00511d:	59                   	pop    ecx
9f00511e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005121:	04 00                	add    al,0x0
9f005123:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005126:	00 00                	add    BYTE PTR [eax],al
9f005128:	20 08                	and    BYTE PTR [eax],cl
9f00512a:	00 00                	add    BYTE PTR [eax],al
9f00512c:	e0 c5                	loopne 9f0050f3 <__x86.get_pc_thunk.cx+0x7ef>
9f00512e:	ff                   	(bad)  
9f00512f:	ff 29                	jmp    FWORD PTR [ecx]
9f005131:	00 00                	add    BYTE PTR [eax],al
9f005133:	00 00                	add    BYTE PTR [eax],al
9f005135:	41                   	inc    ecx
9f005136:	0e                   	push   cs
9f005137:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00513d:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f005141:	04 00                	add    al,0x0
9f005143:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005146:	00 00                	add    BYTE PTR [eax],al
9f005148:	40                   	inc    eax
9f005149:	08 00                	or     BYTE PTR [eax],al
9f00514b:	00 e9                	add    cl,ch
9f00514d:	c5 ff ff             	(bad)  
9f005150:	29 00                	sub    DWORD PTR [eax],eax
9f005152:	00 00                	add    BYTE PTR [eax],al
9f005154:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005157:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00515d:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f005161:	04 00                	add    al,0x0
9f005163:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005166:	00 00                	add    BYTE PTR [eax],al
9f005168:	60                   	pusha  
9f005169:	08 00                	or     BYTE PTR [eax],al
9f00516b:	00 f2                	add    dl,dh
9f00516d:	c5 ff ff             	(bad)  
9f005170:	4c                   	dec    esp
9f005171:	00 00                	add    BYTE PTR [eax],al
9f005173:	00 00                	add    BYTE PTR [eax],al
9f005175:	41                   	inc    ecx
9f005176:	0e                   	push   cs
9f005177:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00517d:	02 48 c5             	add    cl,BYTE PTR [eax-0x3b]
9f005180:	0c 04                	or     al,0x4
9f005182:	04 00                	add    al,0x0
9f005184:	20 00                	and    BYTE PTR [eax],al
9f005186:	00 00                	add    BYTE PTR [eax],al
9f005188:	80 08 00             	or     BYTE PTR [eax],0x0
9f00518b:	00 1e                	add    BYTE PTR [esi],bl
9f00518d:	c6                   	(bad)  
9f00518e:	ff                   	(bad)  
9f00518f:	ff f4                	push   esp
9f005191:	01 00                	add    DWORD PTR [eax],eax
9f005193:	00 00                	add    BYTE PTR [eax],al
9f005195:	41                   	inc    ecx
9f005196:	0e                   	push   cs
9f005197:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00519d:	44                   	inc    esp
9f00519e:	83 03 03             	add    DWORD PTR [ebx],0x3
9f0051a1:	ec                   	in     al,dx
9f0051a2:	01 c5                	add    ebp,eax
9f0051a4:	c3                   	ret    
9f0051a5:	0c 04                	or     al,0x4
9f0051a7:	04 1c                	add    al,0x1c
9f0051a9:	00 00                	add    BYTE PTR [eax],al
9f0051ab:	00 a4 08 00 00 ee c7 	add    BYTE PTR [eax+ecx*1-0x38120000],ah
9f0051b2:	ff                   	(bad)  
9f0051b3:	ff 4f 00             	dec    DWORD PTR [edi+0x0]
9f0051b6:	00 00                	add    BYTE PTR [eax],al
9f0051b8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0051bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0051c1:	02 4b c5             	add    cl,BYTE PTR [ebx-0x3b]
9f0051c4:	0c 04                	or     al,0x4
9f0051c6:	04 00                	add    al,0x0
9f0051c8:	1c 00                	sbb    al,0x0
9f0051ca:	00 00                	add    BYTE PTR [eax],al
9f0051cc:	c4 08                	les    ecx,FWORD PTR [eax]
9f0051ce:	00 00                	add    BYTE PTR [eax],al
9f0051d0:	1d c8 ff ff 1c       	sbb    eax,0x1cffffc8
9f0051d5:	00 00                	add    BYTE PTR [eax],al
9f0051d7:	00 00                	add    BYTE PTR [eax],al
9f0051d9:	41                   	inc    ecx
9f0051da:	0e                   	push   cs
9f0051db:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0051e1:	58                   	pop    eax
9f0051e2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0051e5:	04 00                	add    al,0x0
9f0051e7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0051ea:	00 00                	add    BYTE PTR [eax],al
9f0051ec:	e4 08                	in     al,0x8
9f0051ee:	00 00                	add    BYTE PTR [eax],al
9f0051f0:	19 c8                	sbb    eax,ecx
9f0051f2:	ff                   	(bad)  
9f0051f3:	ff 20                	jmp    DWORD PTR [eax]
9f0051f5:	00 00                	add    BYTE PTR [eax],al
9f0051f7:	00 00                	add    BYTE PTR [eax],al
9f0051f9:	41                   	inc    ecx
9f0051fa:	0e                   	push   cs
9f0051fb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005201:	5c                   	pop    esp
9f005202:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005205:	04 00                	add    al,0x0
9f005207:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00520a:	00 00                	add    BYTE PTR [eax],al
9f00520c:	04 09                	add    al,0x9
9f00520e:	00 00                	add    BYTE PTR [eax],al
9f005210:	19 c8                	sbb    eax,ecx
9f005212:	ff                   	(bad)  
9f005213:	ff 20                	jmp    DWORD PTR [eax]
9f005215:	00 00                	add    BYTE PTR [eax],al
9f005217:	00 00                	add    BYTE PTR [eax],al
9f005219:	41                   	inc    ecx
9f00521a:	0e                   	push   cs
9f00521b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005221:	5c                   	pop    esp
9f005222:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005225:	04 00                	add    al,0x0
9f005227:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00522a:	00 00                	add    BYTE PTR [eax],al
9f00522c:	24 09                	and    al,0x9
9f00522e:	00 00                	add    BYTE PTR [eax],al
9f005230:	19 c8                	sbb    eax,ecx
9f005232:	ff                   	(bad)  
9f005233:	ff 44 01 00          	inc    DWORD PTR [ecx+eax*1+0x0]
9f005237:	00 00                	add    BYTE PTR [eax],al
9f005239:	41                   	inc    ecx
9f00523a:	0e                   	push   cs
9f00523b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005241:	03 40 01             	add    eax,DWORD PTR [eax+0x1]
9f005244:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005247:	04 1c                	add    al,0x1c
9f005249:	00 00                	add    BYTE PTR [eax],al
9f00524b:	00 44 09 00          	add    BYTE PTR [ecx+ecx*1+0x0],al
9f00524f:	00 3d c9 ff ff 20    	add    BYTE PTR ds:0x20ffffc9,bh
9f005255:	00 00                	add    BYTE PTR [eax],al
9f005257:	00 00                	add    BYTE PTR [eax],al
9f005259:	41                   	inc    ecx
9f00525a:	0e                   	push   cs
9f00525b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005261:	5c                   	pop    esp
9f005262:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005265:	04 00                	add    al,0x0
9f005267:	00 28                	add    BYTE PTR [eax],ch
9f005269:	00 00                	add    BYTE PTR [eax],al
9f00526b:	00 64 09 00          	add    BYTE PTR [ecx+ecx*1+0x0],ah
9f00526f:	00 3d c9 ff ff fd    	add    BYTE PTR ds:0xfdffffc9,bh
9f005275:	02 00                	add    al,BYTE PTR [eax]
9f005277:	00 00                	add    BYTE PTR [eax],al
9f005279:	41                   	inc    ecx
9f00527a:	0e                   	push   cs
9f00527b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005281:	48                   	dec    eax
9f005282:	86 03                	xchg   BYTE PTR [ebx],al
9f005284:	83 04 03 ef          	add    DWORD PTR [ebx+eax*1],0xffffffef
9f005288:	02 c3                	add    al,bl
9f00528a:	41                   	inc    ecx
9f00528b:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00528f:	04 04                	add    al,0x4
9f005291:	00 00                	add    BYTE PTR [eax],al
9f005293:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005296:	00 00                	add    BYTE PTR [eax],al
9f005298:	90                   	nop
9f005299:	09 00                	or     DWORD PTR [eax],eax
9f00529b:	00 0e                	add    BYTE PTR [esi],cl
9f00529d:	cc                   	int3   
9f00529e:	ff                   	(bad)  
9f00529f:	ff 23                	jmp    DWORD PTR [ebx]
9f0052a1:	00 00                	add    BYTE PTR [eax],al
9f0052a3:	00 00                	add    BYTE PTR [eax],al
9f0052a5:	41                   	inc    ecx
9f0052a6:	0e                   	push   cs
9f0052a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0052ad:	5f                   	pop    edi
9f0052ae:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0052b1:	04 00                	add    al,0x0
9f0052b3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0052b6:	00 00                	add    BYTE PTR [eax],al
9f0052b8:	b0 09                	mov    al,0x9
9f0052ba:	00 00                	add    BYTE PTR [eax],al
9f0052bc:	11 cc                	adc    esp,ecx
9f0052be:	ff                   	(bad)  
9f0052bf:	ff 23                	jmp    DWORD PTR [ebx]
9f0052c1:	00 00                	add    BYTE PTR [eax],al
9f0052c3:	00 00                	add    BYTE PTR [eax],al
9f0052c5:	41                   	inc    ecx
9f0052c6:	0e                   	push   cs
9f0052c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0052cd:	5f                   	pop    edi
9f0052ce:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0052d1:	04 00                	add    al,0x0
9f0052d3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0052d6:	00 00                	add    BYTE PTR [eax],al
9f0052d8:	d0 09                	ror    BYTE PTR [ecx],1
9f0052da:	00 00                	add    BYTE PTR [eax],al
9f0052dc:	14 cc                	adc    al,0xcc
9f0052de:	ff                   	(bad)  
9f0052df:	ff 1c 00             	call   FWORD PTR [eax+eax*1]
9f0052e2:	00 00                	add    BYTE PTR [eax],al
9f0052e4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0052e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0052ed:	58                   	pop    eax
9f0052ee:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0052f1:	04 00                	add    al,0x0
9f0052f3:	00 20                	add    BYTE PTR [eax],ah
9f0052f5:	00 00                	add    BYTE PTR [eax],al
9f0052f7:	00 f0                	add    al,dh
9f0052f9:	09 00                	or     DWORD PTR [eax],eax
9f0052fb:	00 10                	add    BYTE PTR [eax],dl
9f0052fd:	cc                   	int3   
9f0052fe:	ff                   	(bad)  
9f0052ff:	ff 73 00             	push   DWORD PTR [ebx+0x0]
9f005302:	00 00                	add    BYTE PTR [eax],al
9f005304:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005307:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00530d:	44                   	inc    esp
9f00530e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005311:	6b c5 c3             	imul   eax,ebp,0xffffffc3
9f005314:	0c 04                	or     al,0x4
9f005316:	04 00                	add    al,0x0
9f005318:	20 00                	and    BYTE PTR [eax],al
9f00531a:	00 00                	add    BYTE PTR [eax],al
9f00531c:	14 0a                	adc    al,0xa
9f00531e:	00 00                	add    BYTE PTR [eax],al
9f005320:	60                   	pusha  
9f005321:	cc                   	int3   
9f005322:	ff                   	(bad)  
9f005323:	ff 6c 00 00          	jmp    FWORD PTR [eax+eax*1+0x0]
9f005327:	00 00                	add    BYTE PTR [eax],al
9f005329:	41                   	inc    ecx
9f00532a:	0e                   	push   cs
9f00532b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005331:	44                   	inc    esp
9f005332:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005335:	64                   	fs
9f005336:	c5 c3 0c             	(bad)  
9f005339:	04 04                	add    al,0x4
9f00533b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00533e:	00 00                	add    BYTE PTR [eax],al
9f005340:	38 0a                	cmp    BYTE PTR [edx],cl
9f005342:	00 00                	add    BYTE PTR [eax],al
9f005344:	a8 cc                	test   al,0xcc
9f005346:	ff                   	(bad)  
9f005347:	ff 87 00 00 00 00    	inc    DWORD PTR [edi+0x0]
9f00534d:	41                   	inc    ecx
9f00534e:	0e                   	push   cs
9f00534f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005355:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
9f00535b:	00 20                	add    BYTE PTR [eax],ah
9f00535d:	00 00                	add    BYTE PTR [eax],al
9f00535f:	00 58 0a             	add    BYTE PTR [eax+0xa],bl
9f005362:	00 00                	add    BYTE PTR [eax],al
9f005364:	0f cd                	bswap  ebp
9f005366:	ff                   	(bad)  
9f005367:	ff 73 00             	push   DWORD PTR [ebx+0x0]
9f00536a:	00 00                	add    BYTE PTR [eax],al
9f00536c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00536f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005375:	44                   	inc    esp
9f005376:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005379:	6b c5 c3             	imul   eax,ebp,0xffffffc3
9f00537c:	0c 04                	or     al,0x4
9f00537e:	04 00                	add    al,0x0
9f005380:	1c 00                	sbb    al,0x0
9f005382:	00 00                	add    BYTE PTR [eax],al
9f005384:	7c 0a                	jl     9f005390 <__x86.get_pc_thunk.cx+0xa8c>
9f005386:	00 00                	add    BYTE PTR [eax],al
9f005388:	5e                   	pop    esi
9f005389:	cd ff                	int    0xff
9f00538b:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
9f005392:	0e                   	push   cs
9f005393:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005399:	02 80 c5 0c 04 04    	add    al,BYTE PTR [eax+0x4040cc5]
9f00539f:	00 20                	add    BYTE PTR [eax],ah
9f0053a1:	00 00                	add    BYTE PTR [eax],al
9f0053a3:	00 9c 0a 00 00 c2 cd 	add    BYTE PTR [edx+ecx*1-0x323e0000],bl
9f0053aa:	ff                   	(bad)  
9f0053ab:	ff 8b 00 00 00 00    	dec    DWORD PTR [ebx+0x0]
9f0053b1:	41                   	inc    ecx
9f0053b2:	0e                   	push   cs
9f0053b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0053b9:	44                   	inc    esp
9f0053ba:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0053bd:	83 c5 c3             	add    ebp,0xffffffc3
9f0053c0:	0c 04                	or     al,0x4
9f0053c2:	04 00                	add    al,0x0
9f0053c4:	20 00                	and    BYTE PTR [eax],al
9f0053c6:	00 00                	add    BYTE PTR [eax],al
9f0053c8:	c0 0a 00             	ror    BYTE PTR [edx],0x0
9f0053cb:	00 29                	add    BYTE PTR [ecx],ch
9f0053cd:	ce                   	into   
9f0053ce:	ff                   	(bad)  
9f0053cf:	ff 43 02             	inc    DWORD PTR [ebx+0x2]
9f0053d2:	00 00                	add    BYTE PTR [eax],al
9f0053d4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0053d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0053dd:	44                   	inc    esp
9f0053de:	83 03 03             	add    DWORD PTR [ebx],0x3
9f0053e1:	3b 02                	cmp    eax,DWORD PTR [edx]
9f0053e3:	c5 c3 0c             	(bad)  
9f0053e6:	04 04                	add    al,0x4
9f0053e8:	1c 00                	sbb    al,0x0
9f0053ea:	00 00                	add    BYTE PTR [eax],al
9f0053ec:	e4 0a                	in     al,0xa
9f0053ee:	00 00                	add    BYTE PTR [eax],al
9f0053f0:	48                   	dec    eax
9f0053f1:	d0 ff                	sar    bh,1
9f0053f3:	ff 20                	jmp    DWORD PTR [eax]
9f0053f5:	00 00                	add    BYTE PTR [eax],al
9f0053f7:	00 00                	add    BYTE PTR [eax],al
9f0053f9:	41                   	inc    ecx
9f0053fa:	0e                   	push   cs
9f0053fb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005401:	5c                   	pop    esp
9f005402:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005405:	04 00                	add    al,0x0
9f005407:	00 20                	add    BYTE PTR [eax],ah
9f005409:	00 00                	add    BYTE PTR [eax],al
9f00540b:	00 04 0b             	add    BYTE PTR [ebx+ecx*1],al
9f00540e:	00 00                	add    BYTE PTR [eax],al
9f005410:	48                   	dec    eax
9f005411:	d0 ff                	sar    bh,1
9f005413:	ff 03                	inc    DWORD PTR [ebx]
9f005415:	01 00                	add    DWORD PTR [eax],eax
9f005417:	00 00                	add    BYTE PTR [eax],al
9f005419:	41                   	inc    ecx
9f00541a:	0e                   	push   cs
9f00541b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005421:	44                   	inc    esp
9f005422:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005425:	fb                   	sti    
9f005426:	c5 c3 0c             	(bad)  
9f005429:	04 04                	add    al,0x4
9f00542b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00542e:	00 00                	add    BYTE PTR [eax],al
9f005430:	28 0b                	sub    BYTE PTR [ebx],cl
9f005432:	00 00                	add    BYTE PTR [eax],al
9f005434:	27                   	daa    
9f005435:	d1 ff                	sar    edi,1
9f005437:	ff 23                	jmp    DWORD PTR [ebx]
9f005439:	00 00                	add    BYTE PTR [eax],al
9f00543b:	00 00                	add    BYTE PTR [eax],al
9f00543d:	41                   	inc    ecx
9f00543e:	0e                   	push   cs
9f00543f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005445:	5f                   	pop    edi
9f005446:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005449:	04 00                	add    al,0x0
9f00544b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00544e:	00 00                	add    BYTE PTR [eax],al
9f005450:	48                   	dec    eax
9f005451:	0b 00                	or     eax,DWORD PTR [eax]
9f005453:	00 2a                	add    BYTE PTR [edx],ch
9f005455:	d1 ff                	sar    edi,1
9f005457:	ff 21                	jmp    DWORD PTR [ecx]
9f005459:	00 00                	add    BYTE PTR [eax],al
9f00545b:	00 00                	add    BYTE PTR [eax],al
9f00545d:	41                   	inc    ecx
9f00545e:	0e                   	push   cs
9f00545f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005465:	5d                   	pop    ebp
9f005466:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005469:	04 00                	add    al,0x0
9f00546b:	00 20                	add    BYTE PTR [eax],ah
9f00546d:	00 00                	add    BYTE PTR [eax],al
9f00546f:	00 68 0b             	add    BYTE PTR [eax+0xb],ch
9f005472:	00 00                	add    BYTE PTR [eax],al
9f005474:	2b d1                	sub    edx,ecx
9f005476:	ff                   	(bad)  
9f005477:	ff 32                	push   DWORD PTR [edx]
9f005479:	00 00                	add    BYTE PTR [eax],al
9f00547b:	00 00                	add    BYTE PTR [eax],al
9f00547d:	41                   	inc    ecx
9f00547e:	0e                   	push   cs
9f00547f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005485:	44                   	inc    esp
9f005486:	83 03 6a             	add    DWORD PTR [ebx],0x6a
9f005489:	c5 c3 0c             	(bad)  
9f00548c:	04 04                	add    al,0x4
9f00548e:	00 00                	add    BYTE PTR [eax],al
9f005490:	1c 00                	sbb    al,0x0
9f005492:	00 00                	add    BYTE PTR [eax],al
9f005494:	8c 0b                	mov    WORD PTR [ebx],cs
9f005496:	00 00                	add    BYTE PTR [eax],al
9f005498:	3c d1                	cmp    al,0xd1
9f00549a:	ff                   	(bad)  
9f00549b:	ff 9b 01 00 00 00    	call   FWORD PTR [ebx+0x1]
9f0054a1:	41                   	inc    ecx
9f0054a2:	0e                   	push   cs
9f0054a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0054a9:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
9f0054af:	04 1c                	add    al,0x1c
9f0054b1:	00 00                	add    BYTE PTR [eax],al
9f0054b3:	00 ac 0b 00 00 b7 d2 	add    BYTE PTR [ebx+ecx*1-0x2d490000],ch
9f0054ba:	ff                   	(bad)  
9f0054bb:	ff 20                	jmp    DWORD PTR [eax]
9f0054bd:	00 00                	add    BYTE PTR [eax],al
9f0054bf:	00 00                	add    BYTE PTR [eax],al
9f0054c1:	41                   	inc    ecx
9f0054c2:	0e                   	push   cs
9f0054c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0054c9:	5c                   	pop    esp
9f0054ca:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0054cd:	04 00                	add    al,0x0
9f0054cf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0054d2:	00 00                	add    BYTE PTR [eax],al
9f0054d4:	cc                   	int3   
9f0054d5:	0b 00                	or     eax,DWORD PTR [eax]
9f0054d7:	00 b8 d2 ff ff c7    	add    BYTE PTR [eax-0x3800002e],bh
9f0054dd:	00 00                	add    BYTE PTR [eax],al
9f0054df:	00 00                	add    BYTE PTR [eax],al
9f0054e1:	41                   	inc    ecx
9f0054e2:	0e                   	push   cs
9f0054e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0054e9:	02 c3                	add    al,bl
9f0054eb:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0054ee:	04 00                	add    al,0x0
9f0054f0:	1c 00                	sbb    al,0x0
9f0054f2:	00 00                	add    BYTE PTR [eax],al
9f0054f4:	ec                   	in     al,dx
9f0054f5:	0b 00                	or     eax,DWORD PTR [eax]
9f0054f7:	00 5f d3             	add    BYTE PTR [edi-0x2d],bl
9f0054fa:	ff                   	(bad)  
9f0054fb:	ff 20                	jmp    DWORD PTR [eax]
9f0054fd:	00 00                	add    BYTE PTR [eax],al
9f0054ff:	00 00                	add    BYTE PTR [eax],al
9f005501:	41                   	inc    ecx
9f005502:	0e                   	push   cs
9f005503:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005509:	5c                   	pop    esp
9f00550a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00550d:	04 00                	add    al,0x0
9f00550f:	00 20                	add    BYTE PTR [eax],ah
9f005511:	00 00                	add    BYTE PTR [eax],al
9f005513:	00 0c 0c             	add    BYTE PTR [esp+ecx*1],cl
9f005516:	00 00                	add    BYTE PTR [eax],al
9f005518:	60                   	pusha  
9f005519:	d3 ff                	sar    edi,cl
9f00551b:	ff 29                	jmp    FWORD PTR [ecx]
9f00551d:	00 00                	add    BYTE PTR [eax],al
9f00551f:	00 00                	add    BYTE PTR [eax],al
9f005521:	41                   	inc    ecx
9f005522:	0e                   	push   cs
9f005523:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005529:	44                   	inc    esp
9f00552a:	83 03 61             	add    DWORD PTR [ebx],0x61
9f00552d:	c5 c3 0c             	(bad)  
9f005530:	04 04                	add    al,0x4
9f005532:	00 00                	add    BYTE PTR [eax],al
9f005534:	20 00                	and    BYTE PTR [eax],al
9f005536:	00 00                	add    BYTE PTR [eax],al
9f005538:	30 0c 00             	xor    BYTE PTR [eax+eax*1],cl
9f00553b:	00 65 d3             	add    BYTE PTR [ebp-0x2d],ah
9f00553e:	ff                   	(bad)  
9f00553f:	ff 2e                	jmp    FWORD PTR [esi]
9f005541:	00 00                	add    BYTE PTR [eax],al
9f005543:	00 00                	add    BYTE PTR [eax],al
9f005545:	41                   	inc    ecx
9f005546:	0e                   	push   cs
9f005547:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00554d:	44                   	inc    esp
9f00554e:	83 03 66             	add    DWORD PTR [ebx],0x66
9f005551:	c5 c3 0c             	(bad)  
9f005554:	04 04                	add    al,0x4
9f005556:	00 00                	add    BYTE PTR [eax],al
9f005558:	20 00                	and    BYTE PTR [eax],al
9f00555a:	00 00                	add    BYTE PTR [eax],al
9f00555c:	54                   	push   esp
9f00555d:	0c 00                	or     al,0x0
9f00555f:	00 70 d3             	add    BYTE PTR [eax-0x2d],dh
9f005562:	ff                   	(bad)  
9f005563:	ff 5f 00             	call   FWORD PTR [edi+0x0]
9f005566:	00 00                	add    BYTE PTR [eax],al
9f005568:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00556b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005571:	44                   	inc    esp
9f005572:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005575:	56                   	push   esi
9f005576:	c3                   	ret    
9f005577:	41                   	inc    ecx
9f005578:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00557b:	04 28                	add    al,0x28
9f00557d:	00 00                	add    BYTE PTR [eax],al
9f00557f:	00 78 0c             	add    BYTE PTR [eax+0xc],bh
9f005582:	00 00                	add    BYTE PTR [eax],al
9f005584:	ab                   	stos   DWORD PTR es:[edi],eax
9f005585:	d3 ff                	sar    edi,cl
9f005587:	ff                   	(bad)  
9f005588:	3e 02 00             	add    al,BYTE PTR ds:[eax]
9f00558b:	00 00                	add    BYTE PTR [eax],al
9f00558d:	41                   	inc    ecx
9f00558e:	0e                   	push   cs
9f00558f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005595:	45                   	inc    ebp
9f005596:	86 03                	xchg   BYTE PTR [ebx],al
9f005598:	83 04 03 33          	add    DWORD PTR [ebx+eax*1],0x33
9f00559c:	02 c3                	add    al,bl
9f00559e:	41                   	inc    ecx
9f00559f:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0055a3:	04 04                	add    al,0x4
9f0055a5:	00 00                	add    BYTE PTR [eax],al
9f0055a7:	00 20                	add    BYTE PTR [eax],ah
9f0055a9:	00 00                	add    BYTE PTR [eax],al
9f0055ab:	00 a4 0c 00 00 bd d5 	add    BYTE PTR [esp+ecx*1-0x2a430000],ah
9f0055b2:	ff                   	(bad)  
9f0055b3:	ff 48 04             	dec    DWORD PTR [eax+0x4]
9f0055b6:	00 00                	add    BYTE PTR [eax],al
9f0055b8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0055bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0055c1:	44                   	inc    esp
9f0055c2:	83 03 03             	add    DWORD PTR [ebx],0x3
9f0055c5:	40                   	inc    eax
9f0055c6:	04 c5                	add    al,0xc5
9f0055c8:	c3                   	ret    
9f0055c9:	0c 04                	or     al,0x4
9f0055cb:	04 1c                	add    al,0x1c
9f0055cd:	00 00                	add    BYTE PTR [eax],al
9f0055cf:	00 c8                	add    al,cl
9f0055d1:	0c 00                	or     al,0x0
9f0055d3:	00 e1                	add    cl,ah
9f0055d5:	d9 ff                	fcos   
9f0055d7:	ff 33                	push   DWORD PTR [ebx]
9f0055d9:	00 00                	add    BYTE PTR [eax],al
9f0055db:	00 00                	add    BYTE PTR [eax],al
9f0055dd:	41                   	inc    ecx
9f0055de:	0e                   	push   cs
9f0055df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0055e5:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0055e6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0055e9:	04 00                	add    al,0x0
9f0055eb:	00 20                	add    BYTE PTR [eax],ah
9f0055ed:	00 00                	add    BYTE PTR [eax],al
9f0055ef:	00 e8                	add    al,ch
9f0055f1:	0c 00                	or     al,0x0
9f0055f3:	00 f4                	add    ah,dh
9f0055f5:	d9 ff                	fcos   
9f0055f7:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
9f0055fe:	0e                   	push   cs
9f0055ff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005605:	44                   	inc    esp
9f005606:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005609:	7c c5                	jl     9f0055d0 <__x86.get_pc_thunk.cx+0xccc>
9f00560b:	c3                   	ret    
9f00560c:	0c 04                	or     al,0x4
9f00560e:	04 00                	add    al,0x0
9f005610:	20 00                	and    BYTE PTR [eax],al
9f005612:	00 00                	add    BYTE PTR [eax],al
9f005614:	0c 0d                	or     al,0xd
9f005616:	00 00                	add    BYTE PTR [eax],al
9f005618:	54                   	push   esp
9f005619:	da ff                	(bad)  
9f00561b:	ff                   	(bad)  
9f00561c:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f00561f:	00 00                	add    BYTE PTR [eax],al
9f005621:	41                   	inc    ecx
9f005622:	0e                   	push   cs
9f005623:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005629:	44                   	inc    esp
9f00562a:	83 03 76             	add    DWORD PTR [ebx],0x76
9f00562d:	c5 c3 0c             	(bad)  
9f005630:	04 04                	add    al,0x4
9f005632:	00 00                	add    BYTE PTR [eax],al
9f005634:	20 00                	and    BYTE PTR [eax],al
9f005636:	00 00                	add    BYTE PTR [eax],al
9f005638:	30 0d 00 00 6e da    	xor    BYTE PTR ds:0xda6e0000,cl
9f00563e:	ff                   	(bad)  
9f00563f:	ff                   	(bad)  
9f005640:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f005643:	00 00                	add    BYTE PTR [eax],al
9f005645:	41                   	inc    ecx
9f005646:	0e                   	push   cs
9f005647:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00564d:	44                   	inc    esp
9f00564e:	83 03 76             	add    DWORD PTR [ebx],0x76
9f005651:	c5 c3 0c             	(bad)  
9f005654:	04 04                	add    al,0x4
9f005656:	00 00                	add    BYTE PTR [eax],al
9f005658:	20 00                	and    BYTE PTR [eax],al
9f00565a:	00 00                	add    BYTE PTR [eax],al
9f00565c:	54                   	push   esp
9f00565d:	0d 00 00 88 da       	or     eax,0xda880000
9f005662:	ff                   	(bad)  
9f005663:	ff 6f 00             	jmp    FWORD PTR [edi+0x0]
9f005666:	00 00                	add    BYTE PTR [eax],al
9f005668:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00566b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005671:	44                   	inc    esp
9f005672:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005675:	67 c5 c3 0c          	addr16 (bad) 
9f005679:	04 04                	add    al,0x4
9f00567b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00567e:	00 00                	add    BYTE PTR [eax],al
9f005680:	78 0d                	js     9f00568f <__x86.get_pc_thunk.cx+0xd8b>
9f005682:	00 00                	add    BYTE PTR [eax],al
9f005684:	d3 da                	rcr    edx,cl
9f005686:	ff                   	(bad)  
9f005687:	ff 26                	jmp    DWORD PTR [esi]
9f005689:	00 00                	add    BYTE PTR [eax],al
9f00568b:	00 00                	add    BYTE PTR [eax],al
9f00568d:	41                   	inc    ecx
9f00568e:	0e                   	push   cs
9f00568f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005695:	62                   	(bad)  
9f005696:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005699:	04 00                	add    al,0x0
9f00569b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00569e:	00 00                	add    BYTE PTR [eax],al
9f0056a0:	98                   	cwde   
9f0056a1:	0d 00 00 dc da       	or     eax,0xdadc0000
9f0056a6:	ff                   	(bad)  
9f0056a7:	ff 5e 00             	call   FWORD PTR [esi+0x0]
9f0056aa:	00 00                	add    BYTE PTR [eax],al
9f0056ac:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0056af:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0056b5:	45                   	inc    ebp
9f0056b6:	86 03                	xchg   BYTE PTR [ebx],al
9f0056b8:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
9f0056bc:	c3                   	ret    
9f0056bd:	41                   	inc    ecx
9f0056be:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0056c2:	04 04                	add    al,0x4
9f0056c4:	1c 00                	sbb    al,0x0
9f0056c6:	00 00                	add    BYTE PTR [eax],al
9f0056c8:	c0 0d 00 00 12 db ff 	ror    BYTE PTR ds:0xdb120000,0xff
9f0056cf:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f0056d5:	41                   	inc    ecx
9f0056d6:	0e                   	push   cs
9f0056d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0056dd:	59                   	pop    ecx
9f0056de:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0056e1:	04 00                	add    al,0x0
9f0056e3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0056e6:	00 00                	add    BYTE PTR [eax],al
9f0056e8:	e0 0d                	loopne 9f0056f7 <__x86.get_pc_thunk.cx+0xdf3>
9f0056ea:	00 00                	add    BYTE PTR [eax],al
9f0056ec:	10 db                	adc    bl,bl
9f0056ee:	ff                   	(bad)  
9f0056ef:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f0056f2:	00 00                	add    BYTE PTR [eax],al
9f0056f4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0056f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0056fd:	7c c5                	jl     9f0056c4 <__x86.get_pc_thunk.cx+0xdc0>
9f0056ff:	0c 04                	or     al,0x4
9f005701:	04 00                	add    al,0x0
9f005703:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005706:	00 00                	add    BYTE PTR [eax],al
9f005708:	00 0e                	add    BYTE PTR [esi],cl
9f00570a:	00 00                	add    BYTE PTR [eax],al
9f00570c:	30 db                	xor    bl,bl
9f00570e:	ff                   	(bad)  
9f00570f:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f005712:	00 00                	add    BYTE PTR [eax],al
9f005714:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005717:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00571d:	7c c5                	jl     9f0056e4 <__x86.get_pc_thunk.cx+0xde0>
9f00571f:	0c 04                	or     al,0x4
9f005721:	04 00                	add    al,0x0
9f005723:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005726:	00 00                	add    BYTE PTR [eax],al
9f005728:	20 0e                	and    BYTE PTR [esi],cl
9f00572a:	00 00                	add    BYTE PTR [eax],al
9f00572c:	50                   	push   eax
9f00572d:	db ff                	(bad)  
9f00572f:	ff 47 00             	inc    DWORD PTR [edi+0x0]
9f005732:	00 00                	add    BYTE PTR [eax],al
9f005734:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005737:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00573d:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
9f005740:	0c 04                	or     al,0x4
9f005742:	04 00                	add    al,0x0
9f005744:	1c 00                	sbb    al,0x0
9f005746:	00 00                	add    BYTE PTR [eax],al
9f005748:	40                   	inc    eax
9f005749:	0e                   	push   cs
9f00574a:	00 00                	add    BYTE PTR [eax],al
9f00574c:	78 db                	js     9f005729 <__x86.get_pc_thunk.cx+0xe25>
9f00574e:	ff                   	(bad)  
9f00574f:	ff 30                	push   DWORD PTR [eax]
9f005751:	00 00                	add    BYTE PTR [eax],al
9f005753:	00 00                	add    BYTE PTR [eax],al
9f005755:	41                   	inc    ecx
9f005756:	0e                   	push   cs
9f005757:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00575d:	6c                   	ins    BYTE PTR es:[edi],dx
9f00575e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005761:	04 00                	add    al,0x0
9f005763:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005766:	00 00                	add    BYTE PTR [eax],al
9f005768:	60                   	pusha  
9f005769:	0e                   	push   cs
9f00576a:	00 00                	add    BYTE PTR [eax],al
9f00576c:	88 db                	mov    bl,bl
9f00576e:	ff                   	(bad)  
9f00576f:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f005772:	00 00                	add    BYTE PTR [eax],al
9f005774:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005777:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00577d:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
9f005780:	0c 04                	or     al,0x4
9f005782:	04 00                	add    al,0x0
9f005784:	1c 00                	sbb    al,0x0
9f005786:	00 00                	add    BYTE PTR [eax],al
9f005788:	80 0e 00             	or     BYTE PTR [esi],0x0
9f00578b:	00 c4                	add    ah,al
9f00578d:	db ff                	(bad)  
9f00578f:	ff 31                	push   DWORD PTR [ecx]
9f005791:	00 00                	add    BYTE PTR [eax],al
9f005793:	00 00                	add    BYTE PTR [eax],al
9f005795:	41                   	inc    ecx
9f005796:	0e                   	push   cs
9f005797:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00579d:	6d                   	ins    DWORD PTR es:[edi],dx
9f00579e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0057a1:	04 00                	add    al,0x0
9f0057a3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0057a6:	00 00                	add    BYTE PTR [eax],al
9f0057a8:	a0 0e 00 00 d5       	mov    al,ds:0xd500000e
9f0057ad:	db ff                	(bad)  
9f0057af:	ff 1a                	call   FWORD PTR [edx]
9f0057b1:	00 00                	add    BYTE PTR [eax],al
9f0057b3:	00 00                	add    BYTE PTR [eax],al
9f0057b5:	41                   	inc    ecx
9f0057b6:	0e                   	push   cs
9f0057b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0057bd:	56                   	push   esi
9f0057be:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0057c1:	04 00                	add    al,0x0
9f0057c3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0057c6:	00 00                	add    BYTE PTR [eax],al
9f0057c8:	c0 0e 00             	ror    BYTE PTR [esi],0x0
9f0057cb:	00 cf                	add    bh,cl
9f0057cd:	db ff                	(bad)  
9f0057cf:	ff                   	(bad)  
9f0057d0:	39 00                	cmp    DWORD PTR [eax],eax
9f0057d2:	00 00                	add    BYTE PTR [eax],al
9f0057d4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0057d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0057dd:	75 c5                	jne    9f0057a4 <__x86.get_pc_thunk.cx+0xea0>
9f0057df:	0c 04                	or     al,0x4
9f0057e1:	04 00                	add    al,0x0
9f0057e3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0057e6:	00 00                	add    BYTE PTR [eax],al
9f0057e8:	e0 0e                	loopne 9f0057f8 <__x86.get_pc_thunk.cx+0xef4>
9f0057ea:	00 00                	add    BYTE PTR [eax],al
9f0057ec:	e8 db ff ff 1e       	call   be0057cc <tmbuf+0x1effe4cc>
9f0057f1:	00 00                	add    BYTE PTR [eax],al
9f0057f3:	00 00                	add    BYTE PTR [eax],al
9f0057f5:	41                   	inc    ecx
9f0057f6:	0e                   	push   cs
9f0057f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0057fd:	5a                   	pop    edx
9f0057fe:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005801:	04 00                	add    al,0x0
9f005803:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005806:	00 00                	add    BYTE PTR [eax],al
9f005808:	00 0f                	add    BYTE PTR [edi],cl
9f00580a:	00 00                	add    BYTE PTR [eax],al
9f00580c:	e8 db ff ff 67       	call   70057ec <sysEnter_Vector+0x6ed57ec>
9f005811:	00 00                	add    BYTE PTR [eax],al
9f005813:	00 00                	add    BYTE PTR [eax],al
9f005815:	41                   	inc    ecx
9f005816:	0e                   	push   cs
9f005817:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00581d:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f005820:	0c 04                	or     al,0x4
9f005822:	04 00                	add    al,0x0
9f005824:	1c 00                	sbb    al,0x0
9f005826:	00 00                	add    BYTE PTR [eax],al
9f005828:	20 0f                	and    BYTE PTR [edi],cl
9f00582a:	00 00                	add    BYTE PTR [eax],al
9f00582c:	2f                   	das    
9f00582d:	dc ff                	fdiv   st(7),st
9f00582f:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
9f005832:	00 00                	add    BYTE PTR [eax],al
9f005834:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005837:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00583d:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f005840:	0c 04                	or     al,0x4
9f005842:	04 00                	add    al,0x0
9f005844:	1c 00                	sbb    al,0x0
9f005846:	00 00                	add    BYTE PTR [eax],al
9f005848:	40                   	inc    eax
9f005849:	0f 00 00             	sldt   WORD PTR [eax]
9f00584c:	78 dc                	js     9f00582a <__x86.get_pc_thunk.cx+0xf26>
9f00584e:	ff                   	(bad)  
9f00584f:	ff 6c 00 00          	jmp    FWORD PTR [eax+eax*1+0x0]
9f005853:	00 00                	add    BYTE PTR [eax],al
9f005855:	41                   	inc    ecx
9f005856:	0e                   	push   cs
9f005857:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00585d:	02 68 c5             	add    ch,BYTE PTR [eax-0x3b]
9f005860:	0c 04                	or     al,0x4
9f005862:	04 00                	add    al,0x0
9f005864:	1c 00                	sbb    al,0x0
9f005866:	00 00                	add    BYTE PTR [eax],al
9f005868:	60                   	pusha  
9f005869:	0f 00 00             	sldt   WORD PTR [eax]
9f00586c:	c4                   	(bad)  
9f00586d:	dc ff                	fdiv   st(7),st
9f00586f:	ff 20                	jmp    DWORD PTR [eax]
9f005871:	00 00                	add    BYTE PTR [eax],al
9f005873:	00 00                	add    BYTE PTR [eax],al
9f005875:	41                   	inc    ecx
9f005876:	0e                   	push   cs
9f005877:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00587d:	5c                   	pop    esp
9f00587e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005881:	04 00                	add    al,0x0
9f005883:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f005886:	00 00                	add    BYTE PTR [eax],al
9f005888:	80 0f 00             	or     BYTE PTR [edi],0x0
9f00588b:	00 c4                	add    ah,al
9f00588d:	dc ff                	fdiv   st(7),st
9f00588f:	ff                   	(bad)  
9f005890:	7d 01                	jge    9f005893 <__x86.get_pc_thunk.cx+0xf8f>
9f005892:	00 00                	add    BYTE PTR [eax],al
9f005894:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005897:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00589d:	46                   	inc    esi
9f00589e:	87 03                	xchg   DWORD PTR [ebx],eax
9f0058a0:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f0058a3:	05 03 70 01 c3       	add    eax,0xc3017003
9f0058a8:	41                   	inc    ecx
9f0058a9:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f0058ad:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0058b0:	04 00                	add    al,0x0
9f0058b2:	00 00                	add    BYTE PTR [eax],al
9f0058b4:	1c 00                	sbb    al,0x0
9f0058b6:	00 00                	add    BYTE PTR [eax],al
9f0058b8:	b0 0f                	mov    al,0xf
9f0058ba:	00 00                	add    BYTE PTR [eax],al
9f0058bc:	14 de                	adc    al,0xde
9f0058be:	ff                   	(bad)  
9f0058bf:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f0058c5:	41                   	inc    ecx
9f0058c6:	0e                   	push   cs
9f0058c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0058cd:	59                   	pop    ecx
9f0058ce:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0058d1:	04 00                	add    al,0x0
9f0058d3:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f0058d6:	00 00                	add    BYTE PTR [eax],al
9f0058d8:	d0 0f                	ror    BYTE PTR [edi],1
9f0058da:	00 00                	add    BYTE PTR [eax],al
9f0058dc:	14 de                	adc    al,0xde
9f0058de:	ff                   	(bad)  
9f0058df:	ff 9c 01 00 00 00 41 	call   FWORD PTR [ecx+eax*1+0x41000000]
9f0058e6:	0e                   	push   cs
9f0058e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0058ed:	46                   	inc    esi
9f0058ee:	87 03                	xchg   DWORD PTR [ebx],eax
9f0058f0:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f0058f3:	05 03 8f 01 c3       	add    eax,0xc3018f03
9f0058f8:	41                   	inc    ecx
9f0058f9:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f0058fd:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005900:	04 00                	add    al,0x0
9f005902:	00 00                	add    BYTE PTR [eax],al
9f005904:	20 00                	and    BYTE PTR [eax],al
9f005906:	00 00                	add    BYTE PTR [eax],al
9f005908:	00 10                	add    BYTE PTR [eax],dl
9f00590a:	00 00                	add    BYTE PTR [eax],al
9f00590c:	80 df ff             	sbb    bh,0xff
9f00590f:	ff 96 00 00 00 00    	call   DWORD PTR [esi+0x0]
9f005915:	41                   	inc    ecx
9f005916:	0e                   	push   cs
9f005917:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00591d:	44                   	inc    esp
9f00591e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005921:	8e c5                	mov    es,ebp
9f005923:	c3                   	ret    
9f005924:	0c 04                	or     al,0x4
9f005926:	04 00                	add    al,0x0
9f005928:	1c 00                	sbb    al,0x0
9f00592a:	00 00                	add    BYTE PTR [eax],al
9f00592c:	24 10                	and    al,0x10
9f00592e:	00 00                	add    BYTE PTR [eax],al
9f005930:	f2 df ff             	repnz (bad) 
9f005933:	ff 20                	jmp    DWORD PTR [eax]
9f005935:	00 00                	add    BYTE PTR [eax],al
9f005937:	00 00                	add    BYTE PTR [eax],al
9f005939:	41                   	inc    ecx
9f00593a:	0e                   	push   cs
9f00593b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005941:	5c                   	pop    esp
9f005942:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005945:	04 00                	add    al,0x0
9f005947:	00 28                	add    BYTE PTR [eax],ch
9f005949:	00 00                	add    BYTE PTR [eax],al
9f00594b:	00 44 10 00          	add    BYTE PTR [eax+edx*1+0x0],al
9f00594f:	00 f4                	add    ah,dh
9f005951:	df ff                	(bad)  
9f005953:	ff 1e                	call   FWORD PTR [esi]
9f005955:	01 00                	add    DWORD PTR [eax],eax
9f005957:	00 00                	add    BYTE PTR [eax],al
9f005959:	41                   	inc    ecx
9f00595a:	0e                   	push   cs
9f00595b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005961:	45                   	inc    ebp
9f005962:	86 03                	xchg   BYTE PTR [ebx],al
9f005964:	83 04 03 13          	add    DWORD PTR [ebx+eax*1],0x13
9f005968:	01 c3                	add    ebx,eax
9f00596a:	41                   	inc    ecx
9f00596b:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00596f:	04 04                	add    al,0x4
9f005971:	00 00                	add    BYTE PTR [eax],al
9f005973:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005976:	00 00                	add    BYTE PTR [eax],al
9f005978:	70 10                	jo     9f00598a <__x86.get_pc_thunk.cx+0x1086>
9f00597a:	00 00                	add    BYTE PTR [eax],al
9f00597c:	e6 e0                	out    0xe0,al
9f00597e:	ff                   	(bad)  
9f00597f:	ff 26                	jmp    DWORD PTR [esi]
9f005981:	00 00                	add    BYTE PTR [eax],al
9f005983:	00 00                	add    BYTE PTR [eax],al
9f005985:	41                   	inc    ecx
9f005986:	0e                   	push   cs
9f005987:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00598d:	62                   	(bad)  
9f00598e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005991:	04 00                	add    al,0x0
9f005993:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f005996:	00 00                	add    BYTE PTR [eax],al
9f005998:	90                   	nop
9f005999:	10 00                	adc    BYTE PTR [eax],al
9f00599b:	00 ec                	add    ah,ch
9f00599d:	e0 ff                	loopne 9f00599e <__x86.get_pc_thunk.cx+0x109a>
9f00599f:	ff 9e 00 00 00 00    	call   FWORD PTR [esi+0x0]
9f0059a5:	41                   	inc    ecx
9f0059a6:	0e                   	push   cs
9f0059a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0059ad:	45                   	inc    ebp
9f0059ae:	86 03                	xchg   BYTE PTR [ebx],al
9f0059b0:	83 04 02 93          	add    DWORD PTR [edx+eax*1],0xffffff93
9f0059b4:	c3                   	ret    
9f0059b5:	41                   	inc    ecx
9f0059b6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0059ba:	04 04                	add    al,0x4
9f0059bc:	24 00                	and    al,0x0
9f0059be:	00 00                	add    BYTE PTR [eax],al
9f0059c0:	b8 10 00 00 62       	mov    eax,0x62000010
9f0059c5:	e1 ff                	loope  9f0059c6 <__x86.get_pc_thunk.cx+0x10c2>
9f0059c7:	ff 6e 00             	jmp    FWORD PTR [esi+0x0]
9f0059ca:	00 00                	add    BYTE PTR [eax],al
9f0059cc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0059cf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0059d5:	42                   	inc    edx
9f0059d6:	86 03                	xchg   BYTE PTR [ebx],al
9f0059d8:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
9f0059dc:	c3                   	ret    
9f0059dd:	41                   	inc    ecx
9f0059de:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0059e2:	04 04                	add    al,0x4
9f0059e4:	1c 00                	sbb    al,0x0
9f0059e6:	00 00                	add    BYTE PTR [eax],al
9f0059e8:	e0 10                	loopne 9f0059fa <__x86.get_pc_thunk.cx+0x10f6>
9f0059ea:	00 00                	add    BYTE PTR [eax],al
9f0059ec:	a8 e1                	test   al,0xe1
9f0059ee:	ff                   	(bad)  
9f0059ef:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f0059f5:	41                   	inc    ecx
9f0059f6:	0e                   	push   cs
9f0059f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0059fd:	59                   	pop    ecx
9f0059fe:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005a01:	04 00                	add    al,0x0
9f005a03:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f005a06:	00 00                	add    BYTE PTR [eax],al
9f005a08:	00 11                	add    BYTE PTR [ecx],dl
9f005a0a:	00 00                	add    BYTE PTR [eax],al
9f005a0c:	a8 e1                	test   al,0xe1
9f005a0e:	ff                   	(bad)  
9f005a0f:	ff 44 00 00          	inc    DWORD PTR [eax+eax*1+0x0]
9f005a13:	00 00                	add    BYTE PTR [eax],al
9f005a15:	41                   	inc    ecx
9f005a16:	0e                   	push   cs
9f005a17:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a1d:	45                   	inc    ebp
9f005a1e:	86 03                	xchg   BYTE PTR [ebx],al
9f005a20:	83 04 79 c3          	add    DWORD PTR [ecx+edi*2],0xffffffc3
9f005a24:	41                   	inc    ecx
9f005a25:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005a29:	04 04                	add    al,0x4
9f005a2b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f005a2e:	00 00                	add    BYTE PTR [eax],al
9f005a30:	28 11                	sub    BYTE PTR [ecx],dl
9f005a32:	00 00                	add    BYTE PTR [eax],al
9f005a34:	c4 e1 ff ff          	(bad)  
9f005a38:	19 03                	sbb    DWORD PTR [ebx],eax
9f005a3a:	00 00                	add    BYTE PTR [eax],al
9f005a3c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005a3f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a45:	44                   	inc    esp
9f005a46:	83 03 03             	add    DWORD PTR [ebx],0x3
9f005a49:	10 03                	adc    BYTE PTR [ebx],al
9f005a4b:	c3                   	ret    
9f005a4c:	41                   	inc    ecx
9f005a4d:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005a50:	04 00                	add    al,0x0
9f005a52:	00 00                	add    BYTE PTR [eax],al
9f005a54:	1c 00                	sbb    al,0x0
9f005a56:	00 00                	add    BYTE PTR [eax],al
9f005a58:	50                   	push   eax
9f005a59:	11 00                	adc    DWORD PTR [eax],eax
9f005a5b:	00 b5 e4 ff ff 1d    	add    BYTE PTR [ebp+0x1dffffe4],dh
9f005a61:	00 00                	add    BYTE PTR [eax],al
9f005a63:	00 00                	add    BYTE PTR [eax],al
9f005a65:	41                   	inc    ecx
9f005a66:	0e                   	push   cs
9f005a67:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a6d:	59                   	pop    ecx
9f005a6e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005a71:	04 00                	add    al,0x0
9f005a73:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005a76:	00 00                	add    BYTE PTR [eax],al
9f005a78:	70 11                	jo     9f005a8b <__x86.get_pc_thunk.cx+0x1187>
9f005a7a:	00 00                	add    BYTE PTR [eax],al
9f005a7c:	b2 e4                	mov    dl,0xe4
9f005a7e:	ff                   	(bad)  
9f005a7f:	ff                   	(bad)  
9f005a80:	3d 00 00 00 00       	cmp    eax,0x0
9f005a85:	41                   	inc    ecx
9f005a86:	0e                   	push   cs
9f005a87:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a8d:	79 c5                	jns    9f005a54 <__x86.get_pc_thunk.cx+0x1150>
9f005a8f:	0c 04                	or     al,0x4
9f005a91:	04 00                	add    al,0x0
9f005a93:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005a96:	00 00                	add    BYTE PTR [eax],al
9f005a98:	90                   	nop
9f005a99:	11 00                	adc    DWORD PTR [eax],eax
9f005a9b:	00 cf                	add    bh,cl
9f005a9d:	e4 ff                	in     al,0xff
9f005a9f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f005aa5:	41                   	inc    ecx
9f005aa6:	0e                   	push   cs
9f005aa7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005aad:	71 c5                	jno    9f005a74 <__x86.get_pc_thunk.cx+0x1170>
9f005aaf:	0c 04                	or     al,0x4
9f005ab1:	04 00                	add    al,0x0
9f005ab3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005ab6:	00 00                	add    BYTE PTR [eax],al
9f005ab8:	b0 11                	mov    al,0x11
9f005aba:	00 00                	add    BYTE PTR [eax],al
9f005abc:	e4 e4                	in     al,0xe4
9f005abe:	ff                   	(bad)  
9f005abf:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f005ac5:	41                   	inc    ecx
9f005ac6:	0e                   	push   cs
9f005ac7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005acd:	59                   	pop    ecx
9f005ace:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005ad1:	04 00                	add    al,0x0
9f005ad3:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f005ad6:	00 00                	add    BYTE PTR [eax],al
9f005ad8:	d0 11                	rcl    BYTE PTR [ecx],1
9f005ada:	00 00                	add    BYTE PTR [eax],al
9f005adc:	e1 e4                	loope  9f005ac2 <__x86.get_pc_thunk.cx+0x11be>
9f005ade:	ff                   	(bad)  
9f005adf:	ff 57 08             	call   DWORD PTR [edi+0x8]
9f005ae2:	00 00                	add    BYTE PTR [eax],al
9f005ae4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005ae7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005aed:	46                   	inc    esi
9f005aee:	87 03                	xchg   DWORD PTR [ebx],eax
9f005af0:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f005af3:	05 03 4a 08 c3       	add    eax,0xc3084a03
9f005af8:	41                   	inc    ecx
9f005af9:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f005afd:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005b00:	04 00                	add    al,0x0
9f005b02:	00 00                	add    BYTE PTR [eax],al
9f005b04:	24 00                	and    al,0x0
9f005b06:	00 00                	add    BYTE PTR [eax],al
9f005b08:	00 12                	add    BYTE PTR [edx],dl
9f005b0a:	00 00                	add    BYTE PTR [eax],al
9f005b0c:	08 ed                	or     ch,ch
9f005b0e:	ff                   	(bad)  
9f005b0f:	ff 6d 00             	jmp    FWORD PTR [ebp+0x0]
9f005b12:	00 00                	add    BYTE PTR [eax],al
9f005b14:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005b17:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005b1d:	45                   	inc    ebp
9f005b1e:	86 03                	xchg   BYTE PTR [ebx],al
9f005b20:	83 04 02 62          	add    DWORD PTR [edx+eax*1],0x62
9f005b24:	c3                   	ret    
9f005b25:	41                   	inc    ecx
9f005b26:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005b2a:	04 04                	add    al,0x4
9f005b2c:	20 00                	and    BYTE PTR [eax],al
9f005b2e:	00 00                	add    BYTE PTR [eax],al
9f005b30:	28 12                	sub    BYTE PTR [edx],dl
9f005b32:	00 00                	add    BYTE PTR [eax],al
9f005b34:	4d                   	dec    ebp
9f005b35:	ed                   	in     eax,dx
9f005b36:	ff                   	(bad)  
9f005b37:	ff 41 00             	inc    DWORD PTR [ecx+0x0]
9f005b3a:	00 00                	add    BYTE PTR [eax],al
9f005b3c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005b3f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005b45:	44                   	inc    esp
9f005b46:	83 03 79             	add    DWORD PTR [ebx],0x79
9f005b49:	c5 c3 0c             	(bad)  
9f005b4c:	04 04                	add    al,0x4
9f005b4e:	00 00                	add    BYTE PTR [eax],al
9f005b50:	10 00                	adc    BYTE PTR [eax],al
9f005b52:	00 00                	add    BYTE PTR [eax],al
9f005b54:	4c                   	dec    esp
9f005b55:	12 00                	adc    al,BYTE PTR [eax]
9f005b57:	00 ac ed ff ff 04 00 	add    BYTE PTR [ebp+ebp*8+0x4ffff],ch
9f005b5e:	00 00                	add    BYTE PTR [eax],al
9f005b60:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .dynsym:

9f005b64 <.dynsym>:
	...
9f005b74:	ae                   	scas   al,BYTE PTR es:[edi]
9f005b75:	01 00                	add    DWORD PTR [eax],eax
9f005b77:	00 fc                	add    ah,bh
9f005b79:	31 00                	xor    DWORD PTR [eax],eax
9f005b7b:	9f                   	lahf   
9f005b7c:	40                   	inc    eax
9f005b7d:	00 00                	add    BYTE PTR [eax],al
9f005b7f:	00 12                	add    BYTE PTR [edx],dl
9f005b81:	00 01                	add    BYTE PTR [ecx],al
9f005b83:	00 1d 01 00 00 ed    	add    BYTE PTR ds:0xed000001,bl
9f005b89:	19 00                	sbb    DWORD PTR [eax],eax
9f005b8b:	9f                   	lahf   
9f005b8c:	1c 00                	sbb    al,0x0
9f005b8e:	00 00                	add    BYTE PTR [eax],al
9f005b90:	12 00                	adc    al,BYTE PTR [eax]
9f005b92:	01 00                	add    DWORD PTR [eax],eax
9f005b94:	dc 00                	fadd   QWORD PTR [eax]
9f005b96:	00 00                	add    BYTE PTR [eax],al
9f005b98:	6c                   	ins    BYTE PTR es:[edi],dx
9f005b99:	14 00                	adc    al,0x0
9f005b9b:	9f                   	lahf   
9f005b9c:	59                   	pop    ecx
9f005b9d:	00 00                	add    BYTE PTR [eax],al
9f005b9f:	00 12                	add    BYTE PTR [edx],dl
9f005ba1:	00 01                	add    BYTE PTR [ecx],al
9f005ba3:	00 88 01 00 00 c5    	add    BYTE PTR [eax-0x3affffff],cl
9f005ba9:	14 00                	adc    al,0x0
9f005bab:	9f                   	lahf   
9f005bac:	54                   	push   esp
9f005bad:	00 00                	add    BYTE PTR [eax],al
9f005baf:	00 12                	add    BYTE PTR [edx],dl
9f005bb1:	00 01                	add    BYTE PTR [ecx],al
9f005bb3:	00 3d 00 00 00 ac    	add    BYTE PTR ds:0xac000000,bh
9f005bb9:	05 00 9f 5a 00       	add    eax,0x5a9f00
9f005bbe:	00 00                	add    BYTE PTR [eax],al
9f005bc0:	12 00                	adc    al,BYTE PTR [eax]
9f005bc2:	01 00                	add    DWORD PTR [eax],eax
9f005bc4:	bd 01 00 00 f4       	mov    ebp,0xf4000001
9f005bc9:	32 00                	xor    al,BYTE PTR [eax]
9f005bcb:	9f                   	lahf   
9f005bcc:	59                   	pop    ecx
9f005bcd:	00 00                	add    BYTE PTR [eax],al
9f005bcf:	00 12                	add    BYTE PTR [edx],dl
9f005bd1:	00 01                	add    BYTE PTR [ecx],al
9f005bd3:	00 8f 01 00 00 e8    	add    BYTE PTR [edi-0x17ffffff],cl
9f005bd9:	2f                   	das    
9f005bda:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
9f005be0:	12 00                	adc    al,BYTE PTR [eax]
9f005be2:	01 00                	add    DWORD PTR [eax],eax
9f005be4:	53                   	push   ebx
9f005be5:	00 00                	add    BYTE PTR [eax],al
9f005be7:	00 b2 06 00 9f 23    	add    BYTE PTR [edx+0x239f0006],dh
9f005bed:	00 00                	add    BYTE PTR [eax],al
9f005bef:	00 12                	add    BYTE PTR [edx],dl
9f005bf1:	00 01                	add    BYTE PTR [ecx],al
9f005bf3:	00 82 01 00 00 a1    	add    BYTE PTR [edx-0x5effffff],al
9f005bf9:	28 00                	sub    BYTE PTR [eax],al
9f005bfb:	9f                   	lahf   
9f005bfc:	2e 00 00             	add    BYTE PTR cs:[eax],al
9f005bff:	00 12                	add    BYTE PTR [edx],dl
9f005c01:	00 01                	add    BYTE PTR [ecx],al
9f005c03:	00 cd                	add    ch,cl
9f005c05:	00 00                	add    BYTE PTR [eax],al
9f005c07:	00 88 11 00 9f bd    	add    BYTE PTR [eax-0x4260ffef],cl
9f005c0d:	00 00                	add    BYTE PTR [eax],al
9f005c0f:	00 12                	add    BYTE PTR [edx],dl
9f005c11:	00 01                	add    BYTE PTR [ecx],al
9f005c13:	00 92 00 00 00 b5    	add    BYTE PTR [edx-0x4b000000],dl
9f005c19:	0b 00                	or     eax,DWORD PTR [eax]
9f005c1b:	9f                   	lahf   
9f005c1c:	f5                   	cmc    
9f005c1d:	02 00                	add    al,BYTE PTR [eax]
9f005c1f:	00 12                	add    BYTE PTR [edx],dl
9f005c21:	00 01                	add    BYTE PTR [ecx],al
9f005c23:	00 76 01             	add    BYTE PTR [esi+0x1],dh
9f005c26:	00 00                	add    BYTE PTR [eax],al
9f005c28:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005c29:	27                   	daa    
9f005c2a:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f005c30:	12 00                	adc    al,BYTE PTR [eax]
9f005c32:	01 00                	add    DWORD PTR [eax],eax
9f005c34:	31 01                	xor    DWORD PTR [ecx],eax
9f005c36:	00 00                	add    BYTE PTR [eax],al
9f005c38:	8d 1b                	lea    ebx,[ebx]
9f005c3a:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f005c40:	12 00                	adc    al,BYTE PTR [eax]
9f005c42:	01 00                	add    DWORD PTR [eax],eax
9f005c44:	ab                   	stos   DWORD PTR es:[edi],eax
9f005c45:	00 00                	add    BYTE PTR [eax],al
9f005c47:	00 dc                	add    ah,bl
9f005c49:	10 00                	adc    BYTE PTR [eax],al
9f005c4b:	9f                   	lahf   
9f005c4c:	26 00 00             	add    BYTE PTR es:[eax],al
9f005c4f:	00 12                	add    BYTE PTR [edx],dl
9f005c51:	00 01                	add    BYTE PTR [ecx],al
9f005c53:	00 62 01             	add    BYTE PTR [edx+0x1],ah
9f005c56:	00 00                	add    BYTE PTR [eax],al
9f005c58:	38 24 00             	cmp    BYTE PTR [eax+eax*1],ah
9f005c5b:	9f                   	lahf   
9f005c5c:	20 00                	and    BYTE PTR [eax],al
9f005c5e:	00 00                	add    BYTE PTR [eax],al
9f005c60:	12 00                	adc    al,BYTE PTR [eax]
9f005c62:	01 00                	add    DWORD PTR [eax],eax
9f005c64:	e9 00 00 00 0f       	jmp    ae005c69 <tmbuf+0xeffe969>
9f005c69:	16                   	push   ss
9f005c6a:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
9f005c70:	12 00                	adc    al,BYTE PTR [eax]
9f005c72:	01 00                	add    DWORD PTR [eax],eax
9f005c74:	37                   	aaa    
9f005c75:	01 00                	add    DWORD PTR [eax],eax
9f005c77:	00 aa 1e 00 9f 23    	add    BYTE PTR [edx+0x239f001e],ch
9f005c7d:	00 00                	add    BYTE PTR [eax],al
9f005c7f:	00 12                	add    BYTE PTR [edx],dl
9f005c81:	00 01                	add    BYTE PTR [ecx],al
9f005c83:	00 e5                	add    ch,ah
9f005c85:	01 00                	add    DWORD PTR [eax],eax
9f005c87:	00 50 35             	add    BYTE PTR [eax+0x35],dl
9f005c8a:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
9f005c90:	12 00                	adc    al,BYTE PTR [eax]
9f005c92:	01 00                	add    DWORD PTR [eax],eax
9f005c94:	17                   	pop    ss
9f005c95:	00 00                	add    BYTE PTR [eax],al
9f005c97:	00 c3                	add    bl,al
9f005c99:	02 00                	add    al,BYTE PTR [eax]
9f005c9b:	9f                   	lahf   
9f005c9c:	bb 00 00 00 12       	mov    ebx,0x12000000
9f005ca1:	00 01                	add    BYTE PTR [ecx],al
9f005ca3:	00 4c 01 00          	add    BYTE PTR [ecx+eax*1+0x0],cl
9f005ca7:	00 f0                	add    al,dh
9f005ca9:	1e                   	push   ds
9f005caa:	00 9f 1c 00 00 00    	add    BYTE PTR [edi+0x1c],bl
9f005cb0:	12 00                	adc    al,BYTE PTR [eax]
9f005cb2:	01 00                	add    DWORD PTR [eax],eax
9f005cb4:	56                   	push   esi
9f005cb5:	01 00                	add    DWORD PTR [eax],eax
9f005cb7:	00 0c 1f             	add    BYTE PTR [edi+ebx*1],cl
9f005cba:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
9f005cc0:	12 00                	adc    al,BYTE PTR [eax]
9f005cc2:	01 00                	add    DWORD PTR [eax],eax
9f005cc4:	1f                   	pop    ds
9f005cc5:	02 00                	add    al,BYTE PTR [eax]
9f005cc7:	00 11                	add    BYTE PTR [ecx],dl
9f005cc9:	3f                   	aas    
9f005cca:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
9f005cd0:	12 00                	adc    al,BYTE PTR [eax]
9f005cd2:	01 00                	add    DWORD PTR [eax],eax
9f005cd4:	f5                   	cmc    
9f005cd5:	01 00                	add    DWORD PTR [eax],eax
9f005cd7:	00 f0                	add    al,dh
9f005cd9:	36 00 9f 9c 01 00 00 	add    BYTE PTR ss:[edi+0x19c],bl
9f005ce0:	12 00                	adc    al,BYTE PTR [eax]
9f005ce2:	01 00                	add    DWORD PTR [eax],eax
9f005ce4:	d2 00                	rol    BYTE PTR [eax],cl
9f005ce6:	00 00                	add    BYTE PTR [eax],al
9f005ce8:	7e 13                	jle    9f005cfd <__x86.get_pc_thunk.cx+0x13f9>
9f005cea:	00 9f cb 00 00 00    	add    BYTE PTR [edi+0xcb],bl
9f005cf0:	12 00                	adc    al,BYTE PTR [eax]
9f005cf2:	01 00                	add    DWORD PTR [eax],eax
9f005cf4:	7d 01                	jge    9f005cf7 <__x86.get_pc_thunk.cx+0x13f3>
9f005cf6:	00 00                	add    BYTE PTR [eax],al
9f005cf8:	78 28                	js     9f005d22 <__x86.get_pc_thunk.cx+0x141e>
9f005cfa:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
9f005d00:	12 00                	adc    al,BYTE PTR [eax]
9f005d02:	01 00                	add    DWORD PTR [eax],eax
9f005d04:	cd 01                	int    0x1
9f005d06:	00 00                	add    BYTE PTR [eax],al
9f005d08:	d4 33                	aam    0x33
9f005d0a:	00 9f 1e 00 00 00    	add    BYTE PTR [edi+0x1e],bl
9f005d10:	12 00                	adc    al,BYTE PTR [eax]
9f005d12:	01 00                	add    DWORD PTR [eax],eax
9f005d14:	11 01                	adc    DWORD PTR [ecx],eax
9f005d16:	00 00                	add    BYTE PTR [eax],al
9f005d18:	aa                   	stos   BYTE PTR es:[edi],al
9f005d19:	17                   	pop    ss
9f005d1a:	00 9f f4 01 00 00    	add    BYTE PTR [edi+0x1f4],bl
9f005d20:	12 00                	adc    al,BYTE PTR [eax]
9f005d22:	01 00                	add    DWORD PTR [eax],eax
9f005d24:	82                   	(bad)  
9f005d25:	00 00                	add    BYTE PTR [eax],al
9f005d27:	00 eb                	add    bl,ch
9f005d29:	0a 00                	or     al,BYTE PTR [eax]
9f005d2b:	9f                   	lahf   
9f005d2c:	26 00 00             	add    BYTE PTR es:[eax],al
9f005d2f:	00 12                	add    BYTE PTR [edx],dl
9f005d31:	00 01                	add    BYTE PTR [ecx],al
9f005d33:	00 ef                	add    bh,ch
9f005d35:	00 00                	add    BYTE PTR [eax],al
9f005d37:	00 7f 16             	add    BYTE PTR [edi+0x16],bh
9f005d3a:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
9f005d40:	12 00                	adc    al,BYTE PTR [eax]
9f005d42:	01 00                	add    DWORD PTR [eax],eax
9f005d44:	98                   	cwde   
9f005d45:	01 00                	add    DWORD PTR [eax],eax
9f005d47:	00 6c 30 00          	add    BYTE PTR [eax+esi*1+0x0],ch
9f005d4b:	9f                   	lahf   
9f005d4c:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f005d4f:	00 12                	add    BYTE PTR [edx],dl
9f005d51:	00 01                	add    BYTE PTR [ecx],al
9f005d53:	00 16                	add    BYTE PTR [esi],dl
9f005d55:	02 00                	add    al,BYTE PTR [eax]
9f005d57:	00 b4 3b 00 9f 44 00 	add    BYTE PTR [ebx+edi*1+0x449f00],dh
9f005d5e:	00 00                	add    BYTE PTR [eax],al
9f005d60:	12 00                	adc    al,BYTE PTR [eax]
9f005d62:	01 00                	add    DWORD PTR [eax],eax
9f005d64:	9e                   	sahf   
9f005d65:	00 00                	add    BYTE PTR [eax],al
9f005d67:	00 d3                	add    bl,dl
9f005d69:	0e                   	push   cs
9f005d6a:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f005d70:	12 00                	adc    al,BYTE PTR [eax]
9f005d72:	01 00                	add    DWORD PTR [eax],eax
9f005d74:	0c 01                	or     al,0x1
9f005d76:	00 00                	add    BYTE PTR [eax],al
9f005d78:	5e                   	pop    esi
9f005d79:	17                   	pop    ss
9f005d7a:	00 9f 4c 00 00 00    	add    BYTE PTR [edi+0x4c],bl
9f005d80:	12 00                	adc    al,BYTE PTR [eax]
9f005d82:	01 00                	add    DWORD PTR [eax],eax
9f005d84:	68 00 00 00 e8       	push   0xe8000000
9f005d89:	08 00                	or     BYTE PTR [eax],al
9f005d8b:	9f                   	lahf   
9f005d8c:	31 00                	xor    DWORD PTR [eax],eax
9f005d8e:	00 00                	add    BYTE PTR [eax],al
9f005d90:	12 00                	adc    al,BYTE PTR [eax]
9f005d92:	01 00                	add    DWORD PTR [eax],eax
9f005d94:	3e 02 00             	add    al,BYTE PTR ds:[eax]
9f005d97:	00 bd 3f 00 9f 57    	add    BYTE PTR [ebp+0x579f003f],bh
9f005d9d:	08 00                	or     BYTE PTR [eax],al
9f005d9f:	00 12                	add    BYTE PTR [edx],dl
9f005da1:	00 01                	add    BYTE PTR [ecx],al
9f005da3:	00 0f                	add    BYTE PTR [edi],cl
9f005da5:	02 00                	add    al,BYTE PTR [eax]
9f005da7:	00 94 3b 00 9f 1d 00 	add    BYTE PTR [ebx+edi*1+0x1d9f00],dl
9f005dae:	00 00                	add    BYTE PTR [eax],al
9f005db0:	12 00                	adc    al,BYTE PTR [eax]
9f005db2:	01 00                	add    DWORD PTR [eax],eax
9f005db4:	7d 00                	jge    9f005db6 <__x86.get_pc_thunk.cx+0x14b2>
9f005db6:	00 00                	add    BYTE PTR [eax],al
9f005db8:	90                   	nop
9f005db9:	0a 00                	or     al,BYTE PTR [eax]
9f005dbb:	9f                   	lahf   
9f005dbc:	26 00 00             	add    BYTE PTR es:[eax],al
9f005dbf:	00 12                	add    BYTE PTR [edx],dl
9f005dc1:	00 01                	add    BYTE PTR [ecx],al
9f005dc3:	00 d5                	add    ch,dl
9f005dc5:	01 00                	add    DWORD PTR [eax],eax
9f005dc7:	00 f4                	add    ah,dh
9f005dc9:	33 00                	xor    eax,DWORD PTR [eax]
9f005dcb:	9f                   	lahf   
9f005dcc:	67 00 00             	add    BYTE PTR [bx+si],al
9f005dcf:	00 12                	add    BYTE PTR [edx],dl
9f005dd1:	00 01                	add    BYTE PTR [ecx],al
9f005dd3:	00 dd                	add    ch,bl
9f005dd5:	01 00                	add    DWORD PTR [eax],eax
9f005dd7:	00 30                	add    BYTE PTR [eax],dh
9f005dd9:	35 00 9f 20 00       	xor    eax,0x209f00
9f005dde:	00 00                	add    BYTE PTR [eax],al
9f005de0:	12 00                	adc    al,BYTE PTR [eax]
9f005de2:	01 00                	add    DWORD PTR [eax],eax
9f005de4:	5a                   	pop    edx
9f005de5:	00 00                	add    BYTE PTR [eax],al
9f005de7:	00 d5                	add    ch,dl
9f005de9:	06                   	push   es
9f005dea:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
9f005df0:	12 00                	adc    al,BYTE PTR [eax]
9f005df2:	01 00                	add    DWORD PTR [eax],eax
9f005df4:	69 01 00 00 5b 25    	imul   eax,DWORD PTR [ecx],0x255b0000
9f005dfa:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f005e00:	12 00                	adc    al,BYTE PTR [eax]
9f005e02:	01 00                	add    DWORD PTR [eax],eax
9f005e04:	10 00                	adc    BYTE PTR [eax],al
9f005e06:	00 00                	add    BYTE PTR [eax],al
9f005e08:	b3 01                	mov    bl,0x1
9f005e0a:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
9f005e10:	12 00                	adc    al,BYTE PTR [eax]
9f005e12:	01 00                	add    DWORD PTR [eax],eax
9f005e14:	07                   	pop    es
9f005e15:	01 00                	add    DWORD PTR [eax],eax
9f005e17:	00 35 17 00 9f 29    	add    BYTE PTR ds:0x299f0017,dh
9f005e1d:	00 00                	add    BYTE PTR [eax],al
9f005e1f:	00 12                	add    BYTE PTR [edx],dl
9f005e21:	00 01                	add    BYTE PTR [ecx],al
9f005e23:	00 9f 01 00 00 57    	add    BYTE PTR [edi+0x57000001],bl
9f005e29:	31 00                	xor    DWORD PTR [eax],eax
9f005e2b:	9f                   	lahf   
9f005e2c:	26 00 00             	add    BYTE PTR es:[eax],al
9f005e2f:	00 12                	add    BYTE PTR [edx],dl
9f005e31:	00 01                	add    BYTE PTR [ecx],al
9f005e33:	00 b0 00 00 00 00    	add    BYTE PTR [eax+0x0],dh
9f005e39:	00 13                	add    BYTE PTR [ebx],dl
9f005e3b:	00 00                	add    BYTE PTR [eax],al
9f005e3d:	00 00                	add    BYTE PTR [eax],al
9f005e3f:	00 10                	add    BYTE PTR [eax],dl
9f005e41:	00 01                	add    BYTE PTR [ecx],al
9f005e43:	00 2a                	add    BYTE PTR [edx],ch
9f005e45:	01 00                	add    DWORD PTR [eax],eax
9f005e47:	00 29                	add    BYTE PTR [ecx],ch
9f005e49:	1a 00                	sbb    al,BYTE PTR [eax]
9f005e4b:	9f                   	lahf   
9f005e4c:	20 00                	and    BYTE PTR [eax],al
9f005e4e:	00 00                	add    BYTE PTR [eax],al
9f005e50:	12 00                	adc    al,BYTE PTR [eax]
9f005e52:	01 00                	add    DWORD PTR [eax],eax
9f005e54:	28 02                	sub    BYTE PTR [edx],al
9f005e56:	00 00                	add    BYTE PTR [eax],al
9f005e58:	2e                   	cs
9f005e59:	3f                   	aas    
9f005e5a:	00 9f 3d 00 00 00    	add    BYTE PTR [edi+0x3d],bl
9f005e60:	12 00                	adc    al,BYTE PTR [eax]
9f005e62:	01 00                	add    DWORD PTR [eax],eax
9f005e64:	5b                   	pop    ebx
9f005e65:	01 00                	add    DWORD PTR [eax],eax
9f005e67:	00 57 28             	add    BYTE PTR [edi+0x28],dl
9f005e6a:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f005e70:	12 00                	adc    al,BYTE PTR [eax]
9f005e72:	01 00                	add    DWORD PTR [eax],eax
9f005e74:	fc                   	cld    
9f005e75:	01 00                	add    DWORD PTR [eax],eax
9f005e77:	00 22                	add    BYTE PTR [edx],ah
9f005e79:	39 00                	cmp    DWORD PTR [eax],eax
9f005e7b:	9f                   	lahf   
9f005e7c:	20 00                	and    BYTE PTR [eax],al
9f005e7e:	00 00                	add    BYTE PTR [eax],al
9f005e80:	12 00                	adc    al,BYTE PTR [eax]
9f005e82:	01 00                	add    DWORD PTR [eax],eax
9f005e84:	c5 00                	lds    eax,FWORD PTR [eax]
9f005e86:	00 00                	add    BYTE PTR [eax],al
9f005e88:	45                   	inc    ebp
9f005e89:	11 00                	adc    DWORD PTR [eax],eax
9f005e8b:	9f                   	lahf   
9f005e8c:	43                   	inc    ebx
9f005e8d:	00 00                	add    BYTE PTR [eax],al
9f005e8f:	00 12                	add    BYTE PTR [edx],dl
9f005e91:	00 01                	add    BYTE PTR [ecx],al
9f005e93:	00 40 02             	add    BYTE PTR [eax+0x2],al
9f005e96:	00 00                	add    BYTE PTR [eax],al
9f005e98:	81 48 00 9f 41 00 00 	or     DWORD PTR [eax+0x0],0x419f
9f005e9f:	00 12                	add    BYTE PTR [edx],dl
9f005ea1:	00 01                	add    BYTE PTR [ecx],al
9f005ea3:	00 88 00 00 00 3f    	add    BYTE PTR [eax+0x3f000000],cl
9f005ea9:	0b 00                	or     eax,DWORD PTR [eax]
9f005eab:	9f                   	lahf   
9f005eac:	26 00 00             	add    BYTE PTR es:[eax],al
9f005eaf:	00 12                	add    BYTE PTR [edx],dl
9f005eb1:	00 01                	add    BYTE PTR [ecx],al
9f005eb3:	00 c0                	add    al,al
9f005eb5:	00 00                	add    BYTE PTR [eax],al
9f005eb7:	00 02                	add    BYTE PTR [edx],al
9f005eb9:	11 00                	adc    DWORD PTR [eax],eax
9f005ebb:	9f                   	lahf   
9f005ebc:	43                   	inc    ebx
9f005ebd:	00 00                	add    BYTE PTR [eax],al
9f005ebf:	00 12                	add    BYTE PTR [edx],dl
9f005ec1:	00 01                	add    BYTE PTR [ecx],al
9f005ec3:	00 a7 01 00 00 de    	add    BYTE PTR [edi-0x21ffffff],ah
9f005ec9:	31 00                	xor    DWORD PTR [eax],eax
9f005ecb:	9f                   	lahf   
9f005ecc:	1d 00 00 00 12       	sbb    eax,0x12000000
9f005ed1:	00 01                	add    BYTE PTR [ecx],al
9f005ed3:	00 61 00             	add    BYTE PTR [ecx+0x0],ah
9f005ed6:	00 00                	add    BYTE PTR [eax],al
9f005ed8:	c2 08 00             	ret    0x8
9f005edb:	9f                   	lahf   
9f005edc:	23 00                	and    eax,DWORD PTR [eax]
9f005ede:	00 00                	add    BYTE PTR [eax],al
9f005ee0:	12 00                	adc    al,BYTE PTR [eax]
9f005ee2:	01 00                	add    DWORD PTR [eax],eax
9f005ee4:	87 01                	xchg   DWORD PTR [ecx],eax
9f005ee6:	00 00                	add    BYTE PTR [eax],al
9f005ee8:	b5 2f                	mov    ch,0x2f
9f005eea:	00 9f 33 00 00 00    	add    BYTE PTR [edi+0x33],bl
9f005ef0:	12 00                	adc    al,BYTE PTR [eax]
9f005ef2:	01 00                	add    DWORD PTR [eax],eax
9f005ef4:	e2 00                	loop   9f005ef6 <__x86.get_pc_thunk.cx+0x15f2>
9f005ef6:	00 00                	add    BYTE PTR [eax],al
9f005ef8:	a1 15 00 9f 37       	mov    eax,ds:0x379f0015
9f005efd:	00 00                	add    BYTE PTR [eax],al
9f005eff:	00 12                	add    BYTE PTR [edx],dl
9f005f01:	00 01                	add    BYTE PTR [ecx],al
9f005f03:	00 08                	add    BYTE PTR [eax],cl
9f005f05:	00 00                	add    BYTE PTR [eax],al
9f005f07:	00 70 00             	add    BYTE PTR [eax+0x0],dh
9f005f0a:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
9f005f10:	12 00                	adc    al,BYTE PTR [eax]
9f005f12:	01 00                	add    DWORD PTR [eax],eax
9f005f14:	b5 01                	mov    ch,0x1
9f005f16:	00 00                	add    BYTE PTR [eax],al
9f005f18:	7c 32                	jl     9f005f4c <__x86.get_pc_thunk.cx+0x1648>
9f005f1a:	00 9f 47 00 00 00    	add    BYTE PTR [edi+0x47],bl
9f005f20:	12 00                	adc    al,BYTE PTR [eax]
9f005f22:	01 00                	add    DWORD PTR [eax],eax
9f005f24:	fa                   	cli    
9f005f25:	00 00                	add    BYTE PTR [eax],al
9f005f27:	00 0c 17             	add    BYTE PTR [edi+edx*1],cl
9f005f2a:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
9f005f30:	12 00                	adc    al,BYTE PTR [eax]
9f005f32:	01 00                	add    DWORD PTR [eax],eax
9f005f34:	32 02                	xor    al,BYTE PTR [edx]
9f005f36:	00 00                	add    BYTE PTR [eax],al
9f005f38:	a0 3f 00 9f 1d       	mov    al,ds:0x1d9f003f
9f005f3d:	00 00                	add    BYTE PTR [eax],al
9f005f3f:	00 12                	add    BYTE PTR [edx],dl
9f005f41:	00 01                	add    BYTE PTR [ecx],al
9f005f43:	00 8d 00 00 00 92    	add    BYTE PTR [ebp-0x6e000000],cl
9f005f49:	0b 00                	or     eax,DWORD PTR [eax]
9f005f4b:	9f                   	lahf   
9f005f4c:	23 00                	and    eax,DWORD PTR [eax]
9f005f4e:	00 00                	add    BYTE PTR [eax],al
9f005f50:	12 00                	adc    al,BYTE PTR [eax]
9f005f52:	01 00                	add    DWORD PTR [eax],eax
9f005f54:	45                   	inc    ebp
9f005f55:	02 00                	add    al,BYTE PTR [eax]
9f005f57:	00 14 48             	add    BYTE PTR [eax+ecx*2],dl
9f005f5a:	00 9f 6d 00 00 00    	add    BYTE PTR [edi+0x6d],bl
9f005f60:	12 00                	adc    al,BYTE PTR [eax]
9f005f62:	01 00                	add    DWORD PTR [eax],eax
9f005f64:	75 00                	jne    9f005f66 <__x86.get_pc_thunk.cx+0x1662>
9f005f66:	00 00                	add    BYTE PTR [eax],al
9f005f68:	9e                   	sahf   
9f005f69:	09 00                	or     DWORD PTR [eax],eax
9f005f6b:	9f                   	lahf   
9f005f6c:	93                   	xchg   ebx,eax
9f005f6d:	00 00                	add    BYTE PTR [eax],al
9f005f6f:	00 12                	add    BYTE PTR [edx],dl
9f005f71:	00 01                	add    BYTE PTR [ecx],al
9f005f73:	00 25 01 00 00 09    	add    BYTE PTR ds:0x9000001,ah
9f005f79:	1a 00                	sbb    al,BYTE PTR [eax]
9f005f7b:	9f                   	lahf   
9f005f7c:	20 00                	and    BYTE PTR [eax],al
9f005f7e:	00 00                	add    BYTE PTR [eax],al
9f005f80:	12 00                	adc    al,BYTE PTR [eax]
9f005f82:	01 00                	add    DWORD PTR [eax],eax
9f005f84:	1c 00                	sbb    al,0x0
9f005f86:	00 00                	add    BYTE PTR [eax],al
9f005f88:	39 04 00             	cmp    DWORD PTR [eax+eax*1],eax
9f005f8b:	9f                   	lahf   
9f005f8c:	5c                   	pop    esp
9f005f8d:	00 00                	add    BYTE PTR [eax],al
9f005f8f:	00 12                	add    BYTE PTR [edx],dl
9f005f91:	00 01                	add    BYTE PTR [ecx],al
9f005f93:	00 a3 00 00 00 b4    	add    BYTE PTR [ebx-0x4c000000],ah
9f005f99:	10 00                	adc    BYTE PTR [eax],al
9f005f9b:	9f                   	lahf   
9f005f9c:	26 00 00             	add    BYTE PTR es:[eax],al
9f005f9f:	00 12                	add    BYTE PTR [edx],dl
9f005fa1:	00 01                	add    BYTE PTR [ecx],al
9f005fa3:	00 45 01             	add    BYTE PTR [ebp+0x1],al
9f005fa6:	00 00                	add    BYTE PTR [eax],al
9f005fa8:	cd 1e                	int    0x1e
9f005faa:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f005fb0:	12 00                	adc    al,BYTE PTR [eax]
9f005fb2:	01 00                	add    DWORD PTR [eax],eax
9f005fb4:	c6 01 00             	mov    BYTE PTR [ecx],0x0
9f005fb7:	00 81 33 00 9f 1a    	add    BYTE PTR [ecx+0x1a9f0033],al
9f005fbd:	00 00                	add    BYTE PTR [eax],al
9f005fbf:	00 12                	add    BYTE PTR [edx],dl
9f005fc1:	00 01                	add    BYTE PTR [ecx],al
9f005fc3:	00 78 00             	add    BYTE PTR [eax+0x0],bh
9f005fc6:	00 00                	add    BYTE PTR [eax],al
9f005fc8:	19 09                	sbb    DWORD PTR [ecx],ecx
9f005fca:	00 9f 2c 00 00 00    	add    BYTE PTR [edi+0x2c],bl
9f005fd0:	12 00                	adc    al,BYTE PTR [eax]
9f005fd2:	01 00                	add    DWORD PTR [eax],eax
9f005fd4:	2a 00                	sub    al,BYTE PTR [eax]
9f005fd6:	00 00                	add    BYTE PTR [eax],al
9f005fd8:	52                   	push   edx
9f005fd9:	05 00 9f 5a 00       	add    eax,0x5a9f00
9f005fde:	00 00                	add    BYTE PTR [eax],al
9f005fe0:	12 00                	adc    al,BYTE PTR [eax]
9f005fe2:	01 00                	add    DWORD PTR [eax],eax
9f005fe4:	17                   	pop    ss
9f005fe5:	01 00                	add    DWORD PTR [eax],eax
9f005fe7:	00 9e 19 00 9f 4f    	add    BYTE PTR [esi+0x4f9f0019],bl
9f005fed:	00 00                	add    BYTE PTR [eax],al
9f005fef:	00 12                	add    BYTE PTR [edx],dl
9f005ff1:	00 01                	add    BYTE PTR [ecx],al
9f005ff3:	00 01                	add    BYTE PTR [ecx],al
9f005ff5:	00 00                	add    BYTE PTR [eax],al
9f005ff7:	00 00                	add    BYTE PTR [eax],al
9f005ff9:	00 00                	add    BYTE PTR [eax],al
9f005ffb:	9f                   	lahf   
9f005ffc:	38 00                	cmp    BYTE PTR [eax],al
9f005ffe:	00 00                	add    BYTE PTR [eax],al
9f006000:	12 00                	adc    al,BYTE PTR [eax]
9f006002:	01 00                	add    DWORD PTR [eax],eax
9f006004:	ed                   	in     eax,dx
9f006005:	01 00                	add    DWORD PTR [eax],eax
9f006007:	00 d0                	add    al,dl
9f006009:	36 00 9f 1d 00 00 00 	add    BYTE PTR ss:[edi+0x1d],bl
9f006010:	12 00                	adc    al,BYTE PTR [eax]
9f006012:	01 00                	add    DWORD PTR [eax],eax
9f006014:	04 02                	add    al,0x2
9f006016:	00 00                	add    BYTE PTR [eax],al
9f006018:	62 3a                	bound  edi,QWORD PTR [edx]
9f00601a:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
9f006020:	12 00                	adc    al,BYTE PTR [eax]
9f006022:	01 00                	add    DWORD PTR [eax],eax
9f006024:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006025:	00 00                	add    BYTE PTR [eax],al
9f006027:	00 31                	add    BYTE PTR [ecx],dh
9f006029:	0a 00                	or     al,BYTE PTR [eax]
9f00602b:	9f                   	lahf   
9f00602c:	2a 00                	sub    al,BYTE PTR [eax]
9f00602e:	00 00                	add    BYTE PTR [eax],al
9f006030:	12 00                	adc    al,BYTE PTR [eax]
9f006032:	01 00                	add    DWORD PTR [eax],eax
9f006034:	21 00                	and    DWORD PTR [eax],eax
9f006036:	00 00                	add    BYTE PTR [eax],al
9f006038:	98                   	cwde   
9f006039:	04 00                	add    al,0x0
9f00603b:	9f                   	lahf   
9f00603c:	ba 00 00 00 12       	mov    edx,0x12000000
9f006041:	00 01                	add    BYTE PTR [ecx],al
9f006043:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
9f006046:	00 00                	add    BYTE PTR [eax],al
9f006048:	7e 25                	jle    9f00606f <__x86.get_pc_thunk.cx+0x176b>
9f00604a:	00 9f 21 00 00 00    	add    BYTE PTR [edi+0x21],bl
9f006050:	12 00                	adc    al,BYTE PTR [eax]
9f006052:	01 00                	add    DWORD PTR [eax],eax

Disassembly of section .dynstr:

9f006054 <.dynstr>:
9f006054:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006057:	72 63                	jb     9f0060bc <__x86.get_pc_thunk.cx+0x17b8>
9f006059:	68 72 00 73 74       	push   0x74730072
9f00605e:	72 63                	jb     9f0060c3 <__x86.get_pc_thunk.cx+0x17bf>
9f006060:	73 70                	jae    9f0060d2 <__x86.get_pc_thunk.cx+0x17ce>
9f006062:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006063:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006066:	72 74                	jb     9f0060dc <__x86.get_pc_thunk.cx+0x17d8>
9f006068:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006069:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
9f00606c:	74 6f                	je     9f0060dd <__x86.get_pc_thunk.cx+0x17d9>
9f00606e:	61                   	popa   
9f00606f:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
9f006072:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006073:	69 00 6d 6f 76 65    	imul   eax,DWORD PTR [eax],0x65766f6d
9f006079:	54                   	push   esp
9f00607a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00607b:	58                   	pop    eax
9f00607c:	59                   	pop    ecx
9f00607d:	00 73 61             	add    BYTE PTR [ebx+0x61],dh
9f006080:	76 65                	jbe    9f0060e7 <__x86.get_pc_thunk.cx+0x17e3>
9f006082:	43                   	inc    ebx
9f006083:	75 72                	jne    9f0060f7 <__x86.get_pc_thunk.cx+0x17f3>
9f006085:	73 6f                	jae    9f0060f6 <__x86.get_pc_thunk.cx+0x17f2>
9f006087:	72 50                	jb     9f0060d9 <__x86.get_pc_thunk.cx+0x17d5>
9f006089:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00608a:	73 69                	jae    9f0060f5 <__x86.get_pc_thunk.cx+0x17f1>
9f00608c:	74 69                	je     9f0060f7 <__x86.get_pc_thunk.cx+0x17f3>
9f00608e:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00608f:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006090:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f006093:	73 74                	jae    9f006109 <__x86.get_pc_thunk.cx+0x1805>
9f006095:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006096:	72 65                	jb     9f0060fd <__x86.get_pc_thunk.cx+0x17f9>
9f006098:	43                   	inc    ebx
9f006099:	75 72                	jne    9f00610d <__x86.get_pc_thunk.cx+0x1809>
9f00609b:	73 6f                	jae    9f00610c <__x86.get_pc_thunk.cx+0x1808>
9f00609d:	72 50                	jb     9f0060ef <__x86.get_pc_thunk.cx+0x17eb>
9f00609f:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0060a0:	73 69                	jae    9f00610b <__x86.get_pc_thunk.cx+0x1807>
9f0060a2:	74 69                	je     9f00610d <__x86.get_pc_thunk.cx+0x1809>
9f0060a4:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0060a5:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0060a6:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f0060a9:	74 65                	je     9f006110 <__x86.get_pc_thunk.cx+0x180c>
9f0060ab:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0060ac:	76 00                	jbe    9f0060ae <__x86.get_pc_thunk.cx+0x17aa>
9f0060ae:	73 65                	jae    9f006115 <__x86.get_pc_thunk.cx+0x1811>
9f0060b0:	74 65                	je     9f006117 <__x86.get_pc_thunk.cx+0x1813>
9f0060b2:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0060b3:	76 00                	jbe    9f0060b5 <__x86.get_pc_thunk.cx+0x17b1>
9f0060b5:	67                   	addr16
9f0060b6:	65                   	gs
9f0060b7:	74 63                	je     9f00611c <__x86.get_pc_thunk.cx+0x1818>
9f0060b9:	77 64                	ja     9f00611f <__x86.get_pc_thunk.cx+0x181b>
9f0060bb:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f0060be:	74 64                	je     9f006124 <__x86.get_pc_thunk.cx+0x1820>
9f0060c0:	69 72 00 63 6c 6f 73 	imul   esi,DWORD PTR [edx+0x0],0x736f6c63
9f0060c7:	65 00 66 72          	add    BYTE PTR gs:[esi+0x72],ah
9f0060cb:	65 6f                	outs   dx,DWORD PTR gs:[esi]
9f0060cd:	70 65                	jo     9f006134 <__x86.get_pc_thunk.cx+0x1830>
9f0060cf:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0060d0:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f0060d3:	61                   	popa   
9f0060d4:	64 00 77 72          	add    BYTE PTR fs:[edi+0x72],dh
9f0060d8:	69 74 65 00 73 65 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x6b656573
9f0060df:	6b 
9f0060e0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0060e3:	61                   	popa   
9f0060e4:	74 00                	je     9f0060e6 <__x86.get_pc_thunk.cx+0x17e2>
9f0060e6:	72 65                	jb     9f00614d <__x86.get_pc_thunk.cx+0x1849>
9f0060e8:	73 6f                	jae    9f006159 <__x86.get_pc_thunk.cx+0x1855>
9f0060ea:	6c                   	ins    BYTE PTR es:[edi],dx
9f0060eb:	76 65                	jbe    9f006152 <__x86.get_pc_thunk.cx+0x184e>
9f0060ed:	50                   	push   eax
9f0060ee:	61                   	popa   
9f0060ef:	74 68                	je     9f006159 <__x86.get_pc_thunk.cx+0x1855>
9f0060f1:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
9f0060f5:	6c                   	ins    BYTE PTR es:[edi],dx
9f0060f6:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f0060f9:	74 6c                	je     9f006167 <__x86.get_pc_thunk.cx+0x1863>
9f0060fb:	69 6e 65 00 70 75 74 	imul   ebp,DWORD PTR [esi+0x65],0x74757000
9f006102:	73 00                	jae    9f006104 <__x86.get_pc_thunk.cx+0x1800>
9f006104:	73 79                	jae    9f00617f <__x86.get_pc_thunk.cx+0x187b>
9f006106:	73 45                	jae    9f00614d <__x86.get_pc_thunk.cx+0x1849>
9f006108:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006109:	74 65                	je     9f006170 <__x86.get_pc_thunk.cx+0x186c>
9f00610b:	72 5f                	jb     9f00616c <__x86.get_pc_thunk.cx+0x1868>
9f00610d:	56                   	push   esi
9f00610e:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
9f006113:	00 70 75             	add    BYTE PTR [eax+0x75],dh
9f006116:	74 63                	je     9f00617b <__x86.get_pc_thunk.cx+0x1877>
9f006118:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f00611b:	74 63                	je     9f006180 <__x86.get_pc_thunk.cx+0x187c>
9f00611d:	68 61 72 00 67       	push   0x67007261
9f006122:	65                   	gs
9f006123:	74 73                	je     9f006198 <__x86.get_pc_thunk.cx+0x1894>
9f006125:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f006129:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
9f00612c:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00612d:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
9f006134:	74 
9f006135:	00 70 72             	add    BYTE PTR [eax+0x72],dh
9f006138:	69 6e 74 64 00 73 6c 	imul   ebp,DWORD PTR [esi+0x74],0x6c730064
9f00613f:	65                   	gs
9f006140:	65                   	gs
9f006141:	70 00                	jo     9f006143 <__x86.get_pc_thunk.cx+0x183f>
9f006143:	73 6c                	jae    9f0061b1 <__x86.get_pc_thunk.cx+0x18ad>
9f006145:	65                   	gs
9f006146:	65                   	gs
9f006147:	70 54                	jo     9f00619d <__x86.get_pc_thunk.cx+0x1899>
9f006149:	69 63 6b 73 00 6d 6f 	imul   esp,DWORD PTR [ebx+0x6b],0x6f6d0073
9f006150:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
9f006157:	6e 
9f006158:	61                   	popa   
9f006159:	6c                   	ins    BYTE PTR es:[edi],dx
9f00615a:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
9f00615d:	72 6b                	jb     9f0061ca <__x86.get_pc_thunk.cx+0x18c6>
9f00615f:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
9f006162:	65 63 00             	arpl   WORD PTR gs:[eax],ax
9f006165:	65                   	gs
9f006166:	78 65                	js     9f0061cd <__x86.get_pc_thunk.cx+0x18c9>
9f006168:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
9f00616b:	65                   	gs
9f00616c:	78 65                	js     9f0061d3 <__x86.get_pc_thunk.cx+0x18cf>
9f00616e:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
9f006171:	77 61                	ja     9f0061d4 <__x86.get_pc_thunk.cx+0x18d0>
9f006173:	69 74 70 69 64 00 65 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x78650064
9f00617a:	78 
9f00617b:	69 74 00 73 65 74 63 	imul   esi,DWORD PTR [eax+eax*1+0x73],0x77637465
9f006182:	77 
9f006183:	64 00 73 70          	add    BYTE PTR fs:[ebx+0x70],dh
9f006187:	6c                   	ins    BYTE PTR es:[edi],dx
9f006188:	69 74 00 63 6d 64 6c 	imul   esi,DWORD PTR [eax+eax*1+0x63],0x696c646d
9f00618f:	69 
9f006190:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006191:	65                   	gs
9f006192:	54                   	push   esp
9f006193:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006194:	41                   	inc    ecx
9f006195:	72 67                	jb     9f0061fe <__x86.get_pc_thunk.cx+0x18fa>
9f006197:	76 00                	jbe    9f006199 <__x86.get_pc_thunk.cx+0x1895>
9f006199:	73 65                	jae    9f006200 <__x86.get_pc_thunk.cx+0x18fc>
9f00619b:	74 53                	je     9f0061f0 <__x86.get_pc_thunk.cx+0x18ec>
9f00619d:	54                   	push   esp
9f00619e:	44                   	inc    esp
9f00619f:	00 74 61 6b          	add    BYTE PTR [ecx+eiz*2+0x6b],dh
9f0061a3:	65                   	gs
9f0061a4:	41                   	inc    ecx
9f0061a5:	44                   	inc    esp
9f0061a6:	75 6d                	jne    9f006215 <__x86.get_pc_thunk.cx+0x1911>
9f0061a8:	70 00                	jo     9f0061aa <__x86.get_pc_thunk.cx+0x18a6>
9f0061aa:	6d                   	ins    DWORD PTR es:[edi],dx
9f0061ab:	6d                   	ins    DWORD PTR es:[edi],dx
9f0061ac:	61                   	popa   
9f0061ad:	70 00                	jo     9f0061af <__x86.get_pc_thunk.cx+0x18ab>
9f0061af:	6d                   	ins    DWORD PTR es:[edi],dx
9f0061b0:	65                   	gs
9f0061b1:	6d                   	ins    DWORD PTR es:[edi],dx
9f0061b2:	73 65                	jae    9f006219 <__x86.get_pc_thunk.cx+0x1915>
9f0061b4:	74 00                	je     9f0061b6 <__x86.get_pc_thunk.cx+0x18b2>
9f0061b6:	6d                   	ins    DWORD PTR es:[edi],dx
9f0061b7:	61                   	popa   
9f0061b8:	6c                   	ins    BYTE PTR es:[edi],dx
9f0061b9:	6c                   	ins    BYTE PTR es:[edi],dx
9f0061ba:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0061bb:	63 00                	arpl   WORD PTR [eax],ax
9f0061bd:	72 65                	jb     9f006224 <__x86.get_pc_thunk.cx+0x1920>
9f0061bf:	61                   	popa   
9f0061c0:	6c                   	ins    BYTE PTR es:[edi],dx
9f0061c1:	6c                   	ins    BYTE PTR es:[edi],dx
9f0061c2:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0061c3:	63 00                	arpl   WORD PTR [eax],ax
9f0061c5:	66                   	data16
9f0061c6:	72 65                	jb     9f00622d <__x86.get_pc_thunk.cx+0x1929>
9f0061c8:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
9f0061cc:	6d                   	ins    DWORD PTR es:[edi],dx
9f0061cd:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f0061d0:	00 70 69             	add    BYTE PTR [eax+0x69],dh
9f0061d3:	70 65                	jo     9f00623a <__x86.get_pc_thunk.cx+0x1936>
9f0061d5:	00 64 75 70          	add    BYTE PTR [ebp+esi*2+0x70],ah
9f0061d9:	33 00                	xor    eax,DWORD PTR [eax]
9f0061db:	73 70                	jae    9f00624d <__x86.get_pc_thunk.cx+0x1949>
9f0061dd:	72 69                	jb     9f006248 <__x86.get_pc_thunk.cx+0x1944>
9f0061df:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0061e0:	74 66                	je     9f006248 <__x86.get_pc_thunk.cx+0x1944>
9f0061e2:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f0061e5:	73 65                	jae    9f00624c <__x86.get_pc_thunk.cx+0x1948>
9f0061e7:	74 52                	je     9f00623b <__x86.get_pc_thunk.cx+0x1937>
9f0061e9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0061ea:	77 00                	ja     9f0061ec <__x86.get_pc_thunk.cx+0x18e8>
9f0061ec:	73 74                	jae    9f006262 <__x86.get_pc_thunk.cx+0x195e>
9f0061ee:	72 63                	jb     9f006253 <__x86.get_pc_thunk.cx+0x194f>
9f0061f0:	61                   	popa   
9f0061f1:	74 00                	je     9f0061f3 <__x86.get_pc_thunk.cx+0x18ef>
9f0061f3:	73 74                	jae    9f006269 <__x86.get_pc_thunk.cx+0x1965>
9f0061f5:	72 6e                	jb     9f006265 <__x86.get_pc_thunk.cx+0x1961>
9f0061f7:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
9f0061fa:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0061fd:	72 63                	jb     9f006262 <__x86.get_pc_thunk.cx+0x195e>
9f0061ff:	6d                   	ins    DWORD PTR es:[edi],dx
9f006200:	70 00                	jo     9f006202 <__x86.get_pc_thunk.cx+0x18fe>
9f006202:	73 74                	jae    9f006278 <__x86.get_pc_thunk.cx+0x1974>
9f006204:	72 63                	jb     9f006269 <__x86.get_pc_thunk.cx+0x1965>
9f006206:	70 79                	jo     9f006281 <__x86.get_pc_thunk.cx+0x197d>
9f006208:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00620b:	72 63                	jb     9f006270 <__x86.get_pc_thunk.cx+0x196c>
9f00620d:	70 79                	jo     9f006288 <__x86.get_pc_thunk.cx+0x1984>
9f00620f:	63 00                	arpl   WORD PTR [eax],ax
9f006211:	73 74                	jae    9f006287 <__x86.get_pc_thunk.cx+0x1983>
9f006213:	72 69                	jb     9f00627e <__x86.get_pc_thunk.cx+0x197a>
9f006215:	73 6e                	jae    9f006285 <__x86.get_pc_thunk.cx+0x1981>
9f006217:	75 6d                	jne    9f006286 <__x86.get_pc_thunk.cx+0x1982>
9f006219:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00621c:	72 6c                	jb     9f00628a <__x86.get_pc_thunk.cx+0x1986>
9f00621e:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f006220:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006223:	72 6e                	jb     9f006293 <__x86.get_pc_thunk.cx+0x198f>
9f006225:	6c                   	ins    BYTE PTR es:[edi],dx
9f006226:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f006228:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00622b:	72 6e                	jb     9f00629b <__x86.get_pc_thunk.cx+0x1997>
9f00622d:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
9f006230:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006233:	72 6e                	jb     9f0062a3 <__x86.get_pc_thunk.cx+0x199f>
9f006235:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f006238:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00623b:	72 74                	jb     9f0062b1 <__x86.get_pc_thunk.cx+0x19ad>
9f00623d:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00623e:	75 6c                	jne    9f0062ac <__x86.get_pc_thunk.cx+0x19a8>
9f006240:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006243:	72 6c                	jb     9f0062b1 <__x86.get_pc_thunk.cx+0x19ad>
9f006245:	65                   	gs
9f006246:	66                   	data16
9f006247:	74 00                	je     9f006249 <__x86.get_pc_thunk.cx+0x1945>
9f006249:	73 74                	jae    9f0062bf <__x86.get_pc_thunk.cx+0x19bb>
9f00624b:	72 74                	jb     9f0062c1 <__x86.get_pc_thunk.cx+0x19bd>
9f00624d:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00624e:	6c                   	ins    BYTE PTR es:[edi],dx
9f00624f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006252:	72 74                	jb     9f0062c8 <__x86.get_pc_thunk.cx+0x19c4>
9f006254:	72 69                	jb     9f0062bf <__x86.get_pc_thunk.cx+0x19bb>
9f006256:	6d                   	ins    DWORD PTR es:[edi],dx
9f006257:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00625a:	72 72                	jb     9f0062ce <__x86.get_pc_thunk.cx+0x19ca>
9f00625c:	65                   	gs
9f00625d:	70 6c                	jo     9f0062cb <__x86.get_pc_thunk.cx+0x19c7>
9f00625f:	61                   	popa   
9f006260:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
9f006263:	73 74                	jae    9f0062d9 <__x86.get_pc_thunk.cx+0x19d5>
9f006265:	72 73                	jb     9f0062da <__x86.get_pc_thunk.cx+0x19d6>
9f006267:	74 72                	je     9f0062db <__x86.get_pc_thunk.cx+0x19d7>
9f006269:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f00626c:	74 74                	je     9f0062e2 <__x86.get_pc_thunk.cx+0x19de>
9f00626e:	69 63 6b 73 00 67 6d 	imul   esp,DWORD PTR [ebx+0x6b],0x6d670073
9f006275:	74 69                	je     9f0062e0 <__x86.get_pc_thunk.cx+0x19dc>
9f006277:	6d                   	ins    DWORD PTR es:[edi],dx
9f006278:	65                   	gs
9f006279:	5f                   	pop    edi
9f00627a:	72 00                	jb     9f00627c <__x86.get_pc_thunk.cx+0x1978>
9f00627c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00627d:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00627e:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f006281:	74 69                	je     9f0062ec <__x86.get_pc_thunk.cx+0x19e8>
9f006283:	6d                   	ins    DWORD PTR es:[edi],dx
9f006284:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
9f006289:	61                   	popa   
9f00628a:	6c                   	ins    BYTE PTR es:[edi],dx
9f00628b:	74 69                	je     9f0062f6 <__x86.get_pc_thunk.cx+0x19f2>
9f00628d:	6d                   	ins    DWORD PTR es:[edi],dx
9f00628e:	65                   	gs
9f00628f:	5f                   	pop    edi
9f006290:	72 00                	jb     9f006292 <__x86.get_pc_thunk.cx+0x198e>
9f006292:	6d                   	ins    DWORD PTR es:[edi],dx
9f006293:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
9f006298:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f00629b:	74 74                	je     9f006311 <__x86.get_pc_thunk.cx+0x1a0d>
9f00629d:	69                   	.byte 0x69
9f00629e:	6d                   	ins    DWORD PTR es:[edi],dx
9f00629f:	65                   	gs
	...

Disassembly of section .hash:

9f0062a4 <.hash>:
9f0062a4:	43                   	inc    ebx
9f0062a5:	00 00                	add    BYTE PTR [eax],al
9f0062a7:	00 4f 00             	add    BYTE PTR [edi+0x0],cl
	...
9f0062b6:	00 00                	add    BYTE PTR [eax],al
9f0062b8:	1f                   	pop    ds
9f0062b9:	00 00                	add    BYTE PTR [eax],al
9f0062bb:	00 49 00             	add    BYTE PTR [ecx+0x0],cl
9f0062be:	00 00                	add    BYTE PTR [eax],al
9f0062c0:	3d 00 00 00 3c       	cmp    eax,0x3c000000
9f0062c5:	00 00                	add    BYTE PTR [eax],al
9f0062c7:	00 1d 00 00 00 16    	add    BYTE PTR ds:0x16000000,bl
9f0062cd:	00 00                	add    BYTE PTR [eax],al
9f0062cf:	00 00                	add    BYTE PTR [eax],al
9f0062d1:	00 00                	add    BYTE PTR [eax],al
9f0062d3:	00 12                	add    BYTE PTR [edx],dl
9f0062d5:	00 00                	add    BYTE PTR [eax],al
9f0062d7:	00 26                	add    BYTE PTR [esi],ah
9f0062d9:	00 00                	add    BYTE PTR [eax],al
9f0062db:	00 00                	add    BYTE PTR [eax],al
9f0062dd:	00 00                	add    BYTE PTR [eax],al
9f0062df:	00 48 00             	add    BYTE PTR [eax+0x0],cl
9f0062e2:	00 00                	add    BYTE PTR [eax],al
9f0062e4:	1b 00                	sbb    eax,DWORD PTR [eax]
9f0062e6:	00 00                	add    BYTE PTR [eax],al
9f0062e8:	36 00 00             	add    BYTE PTR ss:[eax],al
	...
9f0062f3:	00 35 00 00 00 13    	add    BYTE PTR ds:0x13000000,dh
9f0062f9:	00 00                	add    BYTE PTR [eax],al
9f0062fb:	00 00                	add    BYTE PTR [eax],al
9f0062fd:	00 00                	add    BYTE PTR [eax],al
9f0062ff:	00 33                	add    BYTE PTR [ebx],dh
9f006301:	00 00                	add    BYTE PTR [eax],al
9f006303:	00 42 00             	add    BYTE PTR [edx+0x0],al
9f006306:	00 00                	add    BYTE PTR [eax],al
9f006308:	00 00                	add    BYTE PTR [eax],al
9f00630a:	00 00                	add    BYTE PTR [eax],al
9f00630c:	2f                   	das    
9f00630d:	00 00                	add    BYTE PTR [eax],al
9f00630f:	00 4c 00 00          	add    BYTE PTR [eax+eax*1+0x0],cl
	...
9f00631b:	00 1e                	add    BYTE PTR [esi],bl
9f00631d:	00 00                	add    BYTE PTR [eax],al
9f00631f:	00 00                	add    BYTE PTR [eax],al
9f006321:	00 00                	add    BYTE PTR [eax],al
9f006323:	00 4a 00             	add    BYTE PTR [edx+0x0],cl
9f006326:	00 00                	add    BYTE PTR [eax],al
9f006328:	2e 00 00             	add    BYTE PTR cs:[eax],al
9f00632b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00632e:	00 00                	add    BYTE PTR [eax],al
9f006330:	44                   	inc    esp
9f006331:	00 00                	add    BYTE PTR [eax],al
9f006333:	00 18                	add    BYTE PTR [eax],bl
9f006335:	00 00                	add    BYTE PTR [eax],al
9f006337:	00 2d 00 00 00 00    	add    BYTE PTR ds:0x0,ch
9f00633d:	00 00                	add    BYTE PTR [eax],al
9f00633f:	00 3a                	add    BYTE PTR [edx],bh
9f006341:	00 00                	add    BYTE PTR [eax],al
9f006343:	00 3e                	add    BYTE PTR [esi],bh
9f006345:	00 00                	add    BYTE PTR [eax],al
9f006347:	00 2a                	add    BYTE PTR [edx],ch
9f006349:	00 00                	add    BYTE PTR [eax],al
9f00634b:	00 3b                	add    BYTE PTR [ebx],bh
9f00634d:	00 00                	add    BYTE PTR [eax],al
9f00634f:	00 46 00             	add    BYTE PTR [esi+0x0],al
9f006352:	00 00                	add    BYTE PTR [eax],al
9f006354:	4d                   	dec    ebp
9f006355:	00 00                	add    BYTE PTR [eax],al
9f006357:	00 2b                	add    BYTE PTR [ebx],ch
9f006359:	00 00                	add    BYTE PTR [eax],al
9f00635b:	00 47 00             	add    BYTE PTR [edi+0x0],al
9f00635e:	00 00                	add    BYTE PTR [eax],al
9f006360:	45                   	inc    ebp
	...
9f006375:	00 00                	add    BYTE PTR [eax],al
9f006377:	00 3f                	add    BYTE PTR [edi],bh
	...
9f006381:	00 00                	add    BYTE PTR [eax],al
9f006383:	00 37                	add    BYTE PTR [edi],dh
9f006385:	00 00                	add    BYTE PTR [eax],al
9f006387:	00 00                	add    BYTE PTR [eax],al
9f006389:	00 00                	add    BYTE PTR [eax],al
9f00638b:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
9f00638e:	00 00                	add    BYTE PTR [eax],al
9f006390:	31 00                	xor    DWORD PTR [eax],eax
9f006392:	00 00                	add    BYTE PTR [eax],al
9f006394:	00 00                	add    BYTE PTR [eax],al
9f006396:	00 00                	add    BYTE PTR [eax],al
9f006398:	41                   	inc    ecx
9f006399:	00 00                	add    BYTE PTR [eax],al
9f00639b:	00 20                	add    BYTE PTR [eax],ah
9f00639d:	00 00                	add    BYTE PTR [eax],al
9f00639f:	00 4e 00             	add    BYTE PTR [esi+0x0],cl
9f0063a2:	00 00                	add    BYTE PTR [eax],al
9f0063a4:	0f 00 00             	sldt   WORD PTR [eax]
9f0063a7:	00 32                	add    BYTE PTR [edx],dh
9f0063a9:	00 00                	add    BYTE PTR [eax],al
9f0063ab:	00 15 00 00 00 43    	add    BYTE PTR ds:0x43000000,dl
9f0063b1:	00 00                	add    BYTE PTR [eax],al
9f0063b3:	00 09                	add    BYTE PTR [ecx],cl
	...
9f0063e1:	00 00                	add    BYTE PTR [eax],al
9f0063e3:	00 0a                	add    BYTE PTR [edx],cl
	...
9f0063f9:	00 00                	add    BYTE PTR [eax],al
9f0063fb:	00 01                	add    BYTE PTR [ecx],al
	...
9f006405:	00 00                	add    BYTE PTR [eax],al
9f006407:	00 08                	add    BYTE PTR [eax],cl
	...
9f006415:	00 00                	add    BYTE PTR [eax],al
9f006417:	00 0e                	add    BYTE PTR [esi],cl
	...
9f006421:	00 00                	add    BYTE PTR [eax],al
9f006423:	00 06                	add    BYTE PTR [esi],al
9f006425:	00 00                	add    BYTE PTR [eax],al
9f006427:	00 00                	add    BYTE PTR [eax],al
9f006429:	00 00                	add    BYTE PTR [eax],al
9f00642b:	00 04 00             	add    BYTE PTR [eax+eax*1],al
9f00642e:	00 00                	add    BYTE PTR [eax],al
9f006430:	00 00                	add    BYTE PTR [eax],al
9f006432:	00 00                	add    BYTE PTR [eax],al
9f006434:	05 00 00 00 00       	add    eax,0x0
9f006439:	00 00                	add    BYTE PTR [eax],al
9f00643b:	00 0d 00 00 00 19    	add    BYTE PTR ds:0x19000000,cl
9f006441:	00 00                	add    BYTE PTR [eax],al
9f006443:	00 07                	add    BYTE PTR [edi],al
	...
9f00644d:	00 00                	add    BYTE PTR [eax],al
9f00644f:	00 0b                	add    BYTE PTR [ebx],cl
9f006451:	00 00                	add    BYTE PTR [eax],al
9f006453:	00 23                	add    BYTE PTR [ebx],ah
9f006455:	00 00                	add    BYTE PTR [eax],al
9f006457:	00 03                	add    BYTE PTR [ebx],al
9f006459:	00 00                	add    BYTE PTR [eax],al
9f00645b:	00 00                	add    BYTE PTR [eax],al
9f00645d:	00 00                	add    BYTE PTR [eax],al
9f00645f:	00 27                	add    BYTE PTR [edi],ah
	...
9f006469:	00 00                	add    BYTE PTR [eax],al
9f00646b:	00 29                	add    BYTE PTR [ecx],ch
	...
9f006475:	00 00                	add    BYTE PTR [eax],al
9f006477:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
	...
9f006486:	00 00                	add    BYTE PTR [eax],al
9f006488:	11 00                	adc    DWORD PTR [eax],eax
9f00648a:	00 00                	add    BYTE PTR [eax],al
9f00648c:	30 00                	xor    BYTE PTR [eax],al
9f00648e:	00 00                	add    BYTE PTR [eax],al
9f006490:	28 00                	sub    BYTE PTR [eax],al
	...
9f00649a:	00 00                	add    BYTE PTR [eax],al
9f00649c:	34 00                	xor    al,0x0
9f00649e:	00 00                	add    BYTE PTR [eax],al
9f0064a0:	00 00                	add    BYTE PTR [eax],al
9f0064a2:	00 00                	add    BYTE PTR [eax],al
9f0064a4:	17                   	pop    ss
9f0064a5:	00 00                	add    BYTE PTR [eax],al
9f0064a7:	00 1a                	add    BYTE PTR [edx],bl
9f0064a9:	00 00                	add    BYTE PTR [eax],al
9f0064ab:	00 39                	add    BYTE PTR [ecx],bh
9f0064ad:	00 00                	add    BYTE PTR [eax],al
9f0064af:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
	...
9f0064ba:	00 00                	add    BYTE PTR [eax],al
9f0064bc:	25 00 00 00 00       	and    eax,0x0
9f0064c1:	00 00                	add    BYTE PTR [eax],al
9f0064c3:	00 00                	add    BYTE PTR [eax],al
9f0064c5:	00 00                	add    BYTE PTR [eax],al
9f0064c7:	00 22                	add    BYTE PTR [edx],ah
9f0064c9:	00 00                	add    BYTE PTR [eax],al
9f0064cb:	00 21                	add    BYTE PTR [ecx],ah
9f0064cd:	00 00                	add    BYTE PTR [eax],al
9f0064cf:	00 00                	add    BYTE PTR [eax],al
9f0064d1:	00 00                	add    BYTE PTR [eax],al
9f0064d3:	00 40 00             	add    BYTE PTR [eax+0x0],al
9f0064d6:	00 00                	add    BYTE PTR [eax],al
9f0064d8:	02 00                	add    al,BYTE PTR [eax]
9f0064da:	00 00                	add    BYTE PTR [eax],al
9f0064dc:	24 00                	and    al,0x0
9f0064de:	00 00                	add    BYTE PTR [eax],al
9f0064e0:	38 00                	cmp    BYTE PTR [eax],al
9f0064e2:	00 00                	add    BYTE PTR [eax],al
9f0064e4:	00 00                	add    BYTE PTR [eax],al
9f0064e6:	00 00                	add    BYTE PTR [eax],al
9f0064e8:	10 00                	adc    BYTE PTR [eax],al
9f0064ea:	00 00                	add    BYTE PTR [eax],al
9f0064ec:	4b                   	dec    ebx
9f0064ed:	00 00                	add    BYTE PTR [eax],al
9f0064ef:	00 00                	add    BYTE PTR [eax],al
9f0064f1:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame:

9f0064f4 <.eh_frame>:
9f0064f4:	14 00                	adc    al,0x0
9f0064f6:	00 00                	add    BYTE PTR [eax],al
9f0064f8:	00 00                	add    BYTE PTR [eax],al
9f0064fa:	00 00                	add    BYTE PTR [eax],al
9f0064fc:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f0064ff:	00 01                	add    BYTE PTR [ecx],al
9f006501:	7c 08                	jl     9f00650b <__x86.get_pc_thunk.cx+0x1c07>
9f006503:	01 1b                	add    DWORD PTR [ebx],ebx
9f006505:	0c 04                	or     al,0x4
9f006507:	04 88                	add    al,0x88
9f006509:	01 00                	add    DWORD PTR [eax],eax
9f00650b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00650e:	00 00                	add    BYTE PTR [eax],al
9f006510:	1c 00                	sbb    al,0x0
9f006512:	00 00                	add    BYTE PTR [eax],al
9f006514:	bc e3 ff ff 30       	mov    esp,0x30ffffe3
9f006519:	00 00                	add    BYTE PTR [eax],al
9f00651b:	00 00                	add    BYTE PTR [eax],al
9f00651d:	0e                   	push   cs
9f00651e:	08 46 0e             	or     BYTE PTR [esi+0xe],al
9f006521:	0c 4a                	or     al,0x4a
9f006523:	0f 0b                	ud2    
9f006525:	74 04                	je     9f00652b <__x86.get_pc_thunk.cx+0x1c27>
9f006527:	78 00                	js     9f006529 <__x86.get_pc_thunk.cx+0x1c25>
9f006529:	3f                   	aas    
9f00652a:	1a 3b                	sbb    bh,BYTE PTR [ebx]
9f00652c:	2a 32                	sub    dh,BYTE PTR [edx]
9f00652e:	24 22                	and    al,0x22
9f006530:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame_hdr:

9f006534 <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
9f006534:	01 1b                	add    DWORD PTR [ebx],ebx
9f006536:	03 3b                	add    edi,DWORD PTR [ebx]
9f006538:	d0 e3                	shl    bl,1
9f00653a:	ff                   	(bad)  
9f00653b:	ff 86 00 00 00 cc    	inc    DWORD PTR [esi-0x34000000]
9f006541:	9a ff ff ec e3 ff ff 	call   0xffff:0xe3ecffff
9f006548:	04 9b                	add    al,0x9b
9f00654a:	ff                   	(bad)  
9f00654b:	ff 0c e4             	dec    DWORD PTR [esp+eiz*8]
9f00654e:	ff                   	(bad)  
9f00654f:	ff                   	(bad)  
9f006550:	3c 9b                	cmp    al,0x9b
9f006552:	ff                   	(bad)  
9f006553:	ff 40 e4             	inc    DWORD PTR [eax-0x1c]
9f006556:	ff                   	(bad)  
9f006557:	ff 91 9b ff ff 68    	call   DWORD PTR [ecx+0x68ffff9b]
9f00655d:	e4 ff                	in     al,0xff
9f00655f:	ff e8                	jmp    <internal disassembler error>
9f006561:	9b                   	fwait
9f006562:	ff                   	(bad)  
9f006563:	ff 90 e4 ff ff 7f    	call   DWORD PTR [eax+0x7fffffe4]
9f006569:	9c                   	pushf  
9f00656a:	ff                   	(bad)  
9f00656b:	ff                   	(bad)  
9f00656c:	b8 e4 ff ff 18       	mov    eax,0x18ffffe4
9f006571:	9d                   	popf   
9f006572:	ff                   	(bad)  
9f006573:	ff f4                	push   esp
9f006575:	e4 ff                	in     al,0xff
9f006577:	ff 8f 9d ff ff 18    	dec    DWORD PTR [edi+0x18ffff9d]
9f00657d:	e5 ff                	in     eax,0xff
9f00657f:	ff 4a 9e             	dec    DWORD PTR [edx-0x62]
9f006582:	ff                   	(bad)  
9f006583:	ff                   	(bad)  
9f006584:	3c e5                	cmp    al,0xe5
9f006586:	ff                   	(bad)  
9f006587:	ff 05 9f ff ff 60    	inc    DWORD PTR ds:0x60ffff9f
9f00658d:	e5 ff                	in     eax,0xff
9f00658f:	ff 64 9f ff          	jmp    DWORD PTR [edi+ebx*4-0x1]
9f006593:	ff 80 e5 ff ff 1e    	inc    DWORD PTR [eax+0x1effffe5]
9f006599:	a0 ff ff a4 e5       	mov    al,ds:0xe5a4ffff
9f00659e:	ff                   	(bad)  
9f00659f:	ff                   	(bad)  
9f0065a0:	78 a0                	js     9f006542 <__GNU_EH_FRAME_HDR+0xe>
9f0065a2:	ff                   	(bad)  
9f0065a3:	ff c8                	dec    eax
9f0065a5:	e5 ff                	in     eax,0xff
9f0065a7:	ff d4                	call   esp
9f0065a9:	a0 ff ff ec e5       	mov    al,ds:0xe5ecffff
9f0065ae:	ff                   	(bad)  
9f0065af:	ff                   	(bad)  
9f0065b0:	7e a1                	jle    9f006553 <__GNU_EH_FRAME_HDR+0x1f>
9f0065b2:	ff                   	(bad)  
9f0065b3:	ff 10                	call   DWORD PTR [eax]
9f0065b5:	e6 ff                	out    0xff,al
9f0065b7:	ff a1 a1 ff ff 30    	jmp    DWORD PTR [ecx+0x30ffffa1]
9f0065bd:	e6 ff                	out    0xff,al
9f0065bf:	ff 62 a3             	jmp    DWORD PTR [edx-0x5d]
9f0065c2:	ff                   	(bad)  
9f0065c3:	ff 54 e6 ff          	call   DWORD PTR [esi+eiz*8-0x1]
9f0065c7:	ff 8e a3 ff ff 78    	dec    DWORD PTR [esi+0x78ffffa3]
9f0065cd:	e6 ff                	out    0xff,al
9f0065cf:	ff b4 a3 ff ff 98 e6 	push   DWORD PTR [ebx+eiz*4-0x19670001]
9f0065d6:	ff                   	(bad)  
9f0065d7:	ff e5                	jmp    ebp
9f0065d9:	a3 ff ff bc e6       	mov    ds:0xe6bcffff,eax
9f0065de:	ff                   	(bad)  
9f0065df:	ff 11                	call   DWORD PTR [ecx]
9f0065e1:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f0065e2:	ff                   	(bad)  
9f0065e3:	ff e0                	jmp    eax
9f0065e5:	e6 ff                	out    0xff,al
9f0065e7:	ff 6a a4             	jmp    FWORD PTR [edx-0x5c]
9f0065ea:	ff                   	(bad)  
9f0065eb:	ff 04 e7             	inc    DWORD PTR [edi+eiz*8]
9f0065ee:	ff                   	(bad)  
9f0065ef:	ff                   	(bad)  
9f0065f0:	fd                   	std    
9f0065f1:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f0065f2:	ff                   	(bad)  
9f0065f3:	ff 2c e7             	jmp    FWORD PTR [edi+eiz*8]
9f0065f6:	ff                   	(bad)  
9f0065f7:	ff 27                	jmp    DWORD PTR [edi]
9f0065f9:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f0065fa:	ff                   	(bad)  
9f0065fb:	ff 50 e7             	call   DWORD PTR [eax-0x19]
9f0065fe:	ff                   	(bad)  
9f0065ff:	ff 5c a5 ff          	call   FWORD PTR [ebp+eiz*4-0x1]
9f006603:	ff                   	(bad)  
9f006604:	78 e7                	js     9f0065ed <__GNU_EH_FRAME_HDR+0xb9>
9f006606:	ff                   	(bad)  
9f006607:	ff 82 a5 ff ff 98    	inc    DWORD PTR [edx-0x6700005b]
9f00660d:	e7 ff                	out    0xff,eax
9f00660f:	ff b7 a5 ff ff c0    	push   DWORD PTR [edi-0x3f00005b]
9f006615:	e7 ff                	out    0xff,eax
9f006617:	ff dd                	call   <internal disassembler error>
9f006619:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f00661a:	ff                   	(bad)  
9f00661b:	ff e0                	jmp    eax
9f00661d:	e7 ff                	out    0xff,eax
9f00661f:	ff 0b                	dec    DWORD PTR [ebx]
9f006621:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
9f006622:	ff                   	(bad)  
9f006623:	ff 04 e8             	inc    DWORD PTR [eax+ebp*8]
9f006626:	ff                   	(bad)  
9f006627:	ff 31                	push   DWORD PTR [ecx]
9f006629:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
9f00662a:	ff                   	(bad)  
9f00662b:	ff 24 e8             	jmp    DWORD PTR [eax+ebp*8]
9f00662e:	ff                   	(bad)  
9f00662f:	ff 5e a6             	call   FWORD PTR [esi-0x5a]
9f006632:	ff                   	(bad)  
9f006633:	ff 48 e8             	dec    DWORD PTR [eax-0x18]
9f006636:	ff                   	(bad)  
9f006637:	ff 81 a6 ff ff 68    	inc    DWORD PTR [ecx+0x68ffffa6]
9f00663d:	e8 ff ff 76 a9       	call   48776641 <sysEnter_Vector+0x48646641>
9f006642:	ff                   	(bad)  
9f006643:	ff 8c e8 ff ff 9f a9 	dec    DWORD PTR [eax+ebp*8-0x56600001]
9f00664a:	ff                   	(bad)  
9f00664b:	ff b0 e8 ff ff bf    	push   DWORD PTR [eax-0x40000018]
9f006651:	a9 ff ff d0 e8       	test   eax,0xe8d0ffff
9f006656:	ff                   	(bad)  
9f006657:	ff 80 ab ff ff f4    	inc    DWORD PTR [eax-0xb000055]
9f00665d:	e8 ff ff a8 ab       	call   4aa96661 <sysEnter_Vector+0x4a966661>
9f006662:	ff                   	(bad)  
9f006663:	ff 14 e9             	call   DWORD PTR [ecx+ebp*8]
9f006666:	ff                   	(bad)  
9f006667:	ff ce                	dec    esi
9f006669:	ab                   	stos   DWORD PTR es:[edi],eax
9f00666a:	ff                   	(bad)  
9f00666b:	ff                   	(bad)  
9f00666c:	38 e9                	cmp    cl,ch
9f00666e:	ff                   	(bad)  
9f00666f:	ff 11                	call   DWORD PTR [ecx]
9f006671:	ac                   	lods   al,BYTE PTR ds:[esi]
9f006672:	ff                   	(bad)  
9f006673:	ff 5c e9 ff          	call   FWORD PTR [ecx+ebp*8-0x1]
9f006677:	ff 54 ac ff          	call   DWORD PTR [esp+ebp*4-0x1]
9f00667b:	ff 80 e9 ff ff 14    	inc    DWORD PTR [eax+0x14ffffe9]
9f006681:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f006682:	ff                   	(bad)  
9f006683:	ff a4 e9 ff ff 4e ad 	jmp    DWORD PTR [ecx+ebp*8-0x52b10001]
9f00668a:	ff                   	(bad)  
9f00668b:	ff cc                	dec    esp
9f00668d:	e9 ff ff 8a ad       	jmp    4c8b6691 <sysEnter_Vector+0x4c786691>
9f006692:	ff                   	(bad)  
9f006693:	ff f4                	push   esp
9f006695:	e9 ff ff c8 ad       	jmp    4cc96699 <sysEnter_Vector+0x4cb66699>
9f00669a:	ff                   	(bad)  
9f00669b:	ff 1c ea             	call   FWORD PTR [edx+ebp*8]
9f00669e:	ff                   	(bad)  
9f00669f:	ff 08                	dec    DWORD PTR [eax]
9f0066a1:	ae                   	scas   al,BYTE PTR es:[edi]
9f0066a2:	ff                   	(bad)  
9f0066a3:	ff 44 ea ff          	inc    DWORD PTR [edx+ebp*8-0x1]
9f0066a7:	ff 4a ae             	dec    DWORD PTR [edx-0x52]
9f0066aa:	ff                   	(bad)  
9f0066ab:	ff 6c ea ff          	jmp    FWORD PTR [edx+ebp*8-0x1]
9f0066af:	ff 15 af ff ff 90    	call   DWORD PTR ds:0x90ffffaf
9f0066b5:	ea ff ff 38 af ff ff 	jmp    0xffff:0xaf38ffff
9f0066bc:	b4 ea                	mov    ah,0xea
9f0066be:	ff                   	(bad)  
9f0066bf:	ff 91 af ff ff d8    	call   DWORD PTR [ecx-0x27000051]
9f0066c5:	ea ff ff e5 af ff ff 	jmp    0xffff:0xafe5ffff
9f0066cc:	fc                   	cld    
9f0066cd:	ea ff ff 39 b0 ff ff 	jmp    0xffff:0xb039ffff
9f0066d4:	20 eb                	and    bl,ch
9f0066d6:	ff                   	(bad)  
9f0066d7:	ff 6d b0             	jmp    FWORD PTR [ebp-0x50]
9f0066da:	ff                   	(bad)  
9f0066db:	ff 40 eb             	inc    DWORD PTR [eax-0x15]
9f0066de:	ff                   	(bad)  
9f0066df:	ff a4 b0 ff ff 60 eb 	jmp    DWORD PTR [eax+esi*4-0x149f0001]
9f0066e6:	ff                   	(bad)  
9f0066e7:	ff db                	call   <internal disassembler error>
9f0066e9:	b0 ff                	mov    al,0xff
9f0066eb:	ff 80 eb ff ff 4b    	inc    DWORD PTR [eax+0x4bffffeb]
9f0066f1:	b1 ff                	mov    cl,0xff
9f0066f3:	ff a8 eb ff ff bb    	jmp    FWORD PTR [eax-0x44000015]
9f0066f9:	b1 ff                	mov    cl,0xff
9f0066fb:	ff d0                	call   eax
9f0066fd:	eb ff                	jmp    9f0066fe <__GNU_EH_FRAME_HDR+0x1ca>
9f0066ff:	ff d8                	call   <internal disassembler error>
9f006701:	b1 ff                	mov    cl,0xff
9f006703:	ff f0                	push   eax
9f006705:	eb ff                	jmp    9f006706 <__GNU_EH_FRAME_HDR+0x1d2>
9f006707:	ff 01                	inc    DWORD PTR [ecx]
9f006709:	b2 ff                	mov    dl,0xff
9f00670b:	ff 10                	call   DWORD PTR [eax]
9f00670d:	ec                   	in     al,dx
9f00670e:	ff                   	(bad)  
9f00670f:	ff 2a                	jmp    FWORD PTR [edx]
9f006711:	b2 ff                	mov    dl,0xff
9f006713:	ff 30                	push   DWORD PTR [eax]
9f006715:	ec                   	in     al,dx
9f006716:	ff                   	(bad)  
9f006717:	ff 76 b2             	push   DWORD PTR [esi-0x4e]
9f00671a:	ff                   	(bad)  
9f00671b:	ff 50 ec             	call   DWORD PTR [eax-0x14]
9f00671e:	ff                   	(bad)  
9f00671f:	ff 6a b4             	jmp    FWORD PTR [edx-0x4c]
9f006722:	ff                   	(bad)  
9f006723:	ff 74 ec ff          	push   DWORD PTR [esp+ebp*8-0x1]
9f006727:	ff                   	(bad)  
9f006728:	b9 b4 ff ff 94       	mov    ecx,0x94ffffb4
9f00672d:	ec                   	in     al,dx
9f00672e:	ff                   	(bad)  
9f00672f:	ff d5                	call   ebp
9f006731:	b4 ff                	mov    ah,0xff
9f006733:	ff b4 ec ff ff f5 b4 	push   DWORD PTR [esp+ebp*8-0x4b0a0001]
9f00673a:	ff                   	(bad)  
9f00673b:	ff d4                	call   esp
9f00673d:	ec                   	in     al,dx
9f00673e:	ff                   	(bad)  
9f00673f:	ff 15 b5 ff ff f4    	call   DWORD PTR ds:0xf4ffffb5
9f006745:	ec                   	in     al,dx
9f006746:	ff                   	(bad)  
9f006747:	ff 59 b6             	call   FWORD PTR [ecx-0x4a]
9f00674a:	ff                   	(bad)  
9f00674b:	ff 14 ed ff ff 79 b6 	call   DWORD PTR [ebp*8-0x49860001]
9f006752:	ff                   	(bad)  
9f006753:	ff 34 ed ff ff 76 b9 	push   DWORD PTR [ebp*8-0x46890001]
9f00675a:	ff                   	(bad)  
9f00675b:	ff 60 ed             	jmp    DWORD PTR [eax-0x13]
9f00675e:	ff                   	(bad)  
9f00675f:	ff 99 b9 ff ff 80    	call   FWORD PTR [ecx-0x7f000047]
9f006765:	ed                   	in     eax,dx
9f006766:	ff                   	(bad)  
9f006767:	ff                   	(bad)  
9f006768:	bc b9 ff ff a0       	mov    esp,0xa0ffffb9
9f00676d:	ed                   	in     eax,dx
9f00676e:	ff                   	(bad)  
9f00676f:	ff d8                	call   <internal disassembler error>
9f006771:	b9 ff ff c0 ed       	mov    ecx,0xedc0ffff
9f006776:	ff                   	(bad)  
9f006777:	ff 4c ba ff          	dec    DWORD PTR [edx+edi*4-0x1]
9f00677b:	ff e4                	jmp    esp
9f00677d:	ed                   	in     eax,dx
9f00677e:	ff                   	(bad)  
9f00677f:	ff                   	(bad)  
9f006780:	b8 ba ff ff 08       	mov    eax,0x8ffffba
9f006785:	ee                   	out    dx,al
9f006786:	ff                   	(bad)  
9f006787:	ff                   	(bad)  
9f006788:	3f                   	aas    
9f006789:	bb ff ff 28 ee       	mov    ebx,0xee28ffff
9f00678e:	ff                   	(bad)  
9f00678f:	ff b2 bb ff ff 4c    	push   DWORD PTR [edx+0x4cffffbb]
9f006795:	ee                   	out    dx,al
9f006796:	ff                   	(bad)  
9f006797:	ff 36                	push   DWORD PTR [esi]
9f006799:	bc ff ff 6c ee       	mov    esp,0xee6cffff
9f00679e:	ff                   	(bad)  
9f00679f:	ff c1                	inc    ecx
9f0067a1:	bc ff ff 90 ee       	mov    esp,0xee90ffff
9f0067a6:	ff                   	(bad)  
9f0067a7:	ff 04 bf             	inc    DWORD PTR [edi+edi*4]
9f0067aa:	ff                   	(bad)  
9f0067ab:	ff b4 ee ff ff 24 bf 	push   DWORD PTR [esi+ebp*8-0x40db0001]
9f0067b2:	ff                   	(bad)  
9f0067b3:	ff d4                	call   esp
9f0067b5:	ee                   	out    dx,al
9f0067b6:	ff                   	(bad)  
9f0067b7:	ff 27                	jmp    DWORD PTR [edi]
9f0067b9:	c0 ff ff             	sar    bh,0xff
9f0067bc:	f8                   	clc    
9f0067bd:	ee                   	out    dx,al
9f0067be:	ff                   	(bad)  
9f0067bf:	ff 4a c0             	dec    DWORD PTR [edx-0x40]
9f0067c2:	ff                   	(bad)  
9f0067c3:	ff 18                	call   FWORD PTR [eax]
9f0067c5:	ef                   	out    dx,eax
9f0067c6:	ff                   	(bad)  
9f0067c7:	ff 6b c0             	jmp    FWORD PTR [ebx-0x40]
9f0067ca:	ff                   	(bad)  
9f0067cb:	ff                   	(bad)  
9f0067cc:	38 ef                	cmp    bh,ch
9f0067ce:	ff                   	(bad)  
9f0067cf:	ff a0 c0 ff ff 5c    	jmp    DWORD PTR [eax+0x5cffffc0]
9f0067d5:	ef                   	out    dx,eax
9f0067d6:	ff                   	(bad)  
9f0067d7:	ff                   	(bad)  
9f0067d8:	3b c2                	cmp    eax,edx
9f0067da:	ff                   	(bad)  
9f0067db:	ff                   	(bad)  
9f0067dc:	7c ef                	jl     9f0067cd <__GNU_EH_FRAME_HDR+0x299>
9f0067de:	ff                   	(bad)  
9f0067df:	ff 5c c2 ff          	call   FWORD PTR [edx+eax*8-0x1]
9f0067e3:	ff 9c ef ff ff 23 c3 	call   FWORD PTR [edi+ebp*8-0x3cdc0001]
9f0067ea:	ff                   	(bad)  
9f0067eb:	ff                   	(bad)  
9f0067ec:	bc ef ff ff 44       	mov    esp,0x44ffffef
9f0067f1:	c3                   	ret    
9f0067f2:	ff                   	(bad)  
9f0067f3:	ff dc                	call   <internal disassembler error>
9f0067f5:	ef                   	out    dx,eax
9f0067f6:	ff                   	(bad)  
9f0067f7:	ff 6d c3             	jmp    FWORD PTR [ebp-0x3d]
9f0067fa:	ff                   	(bad)  
9f0067fb:	ff 00                	inc    DWORD PTR [eax]
9f0067fd:	f0 ff                	lock (bad) 
9f0067ff:	ff 9c c3 ff ff 24 f0 	call   FWORD PTR [ebx+eax*8-0xfdb0001]
9f006806:	ff                   	(bad)  
9f006807:	ff                   	(bad)  
9f006808:	fb                   	sti    
9f006809:	c3                   	ret    
9f00680a:	ff                   	(bad)  
9f00680b:	ff 48 f0             	dec    DWORD PTR [eax-0x10]
9f00680e:	ff                   	(bad)  
9f00680f:	ff                   	(bad)  
9f006810:	39 c6                	cmp    esi,eax
9f006812:	ff                   	(bad)  
9f006813:	ff 74 f0 ff          	push   DWORD PTR [eax+esi*8-0x1]
9f006817:	ff 81 ca ff ff 98    	inc    DWORD PTR [ecx-0x67000036]
9f00681d:	f0 ff                	lock (bad) 
9f00681f:	ff b4 ca ff ff b8 f0 	push   DWORD PTR [edx+ecx*8-0xf470001]
9f006826:	ff                   	(bad)  
9f006827:	ff                   	(bad)  
9f006828:	38 cb                	cmp    bl,cl
9f00682a:	ff                   	(bad)  
9f00682b:	ff dc                	call   <internal disassembler error>
9f00682d:	f0 ff                	lock (bad) 
9f00682f:	ff 76 cb             	push   DWORD PTR [esi-0x35]
9f006832:	ff                   	(bad)  
9f006833:	ff 00                	inc    DWORD PTR [eax]
9f006835:	f1                   	icebp  
9f006836:	ff                   	(bad)  
9f006837:	ff b4 cb ff ff 24 f1 	push   DWORD PTR [ebx+ecx*8-0xedb0001]
9f00683e:	ff                   	(bad)  
9f00683f:	ff 23                	jmp    DWORD PTR [ebx]
9f006841:	cc                   	int3   
9f006842:	ff                   	(bad)  
9f006843:	ff 48 f1             	dec    DWORD PTR [eax-0xf]
9f006846:	ff                   	(bad)  
9f006847:	ff 4c cc ff          	dec    DWORD PTR [esp+ecx*8-0x1]
9f00684b:	ff 68 f1             	jmp    FWORD PTR [eax-0xf]
9f00684e:	ff                   	(bad)  
9f00684f:	ff aa cc ff ff 90    	jmp    FWORD PTR [edx-0x6f000034]
9f006855:	f1                   	icebp  
9f006856:	ff                   	(bad)  
9f006857:	ff c8                	dec    eax
9f006859:	cc                   	int3   
9f00685a:	ff                   	(bad)  
9f00685b:	ff b0 f1 ff ff 08    	push   DWORD PTR [eax+0x8fffff1]
9f006861:	cd ff                	int    0xff
9f006863:	ff d0                	call   eax
9f006865:	f1                   	icebp  
9f006866:	ff                   	(bad)  
9f006867:	ff 48 cd             	dec    DWORD PTR [eax-0x33]
9f00686a:	ff                   	(bad)  
9f00686b:	ff f0                	push   eax
9f00686d:	f1                   	icebp  
9f00686e:	ff                   	(bad)  
9f00686f:	ff 90 cd ff ff 10    	call   DWORD PTR [eax+0x10ffffcd]
9f006875:	f2 ff                	repnz (bad) 
9f006877:	ff c0                	inc    eax
9f006879:	cd ff                	int    0xff
9f00687b:	ff 30                	push   DWORD PTR [eax]
9f00687d:	f2 ff                	repnz (bad) 
9f00687f:	ff 1c ce             	call   FWORD PTR [esi+ecx*8]
9f006882:	ff                   	(bad)  
9f006883:	ff 50 f2             	call   DWORD PTR [eax-0xe]
9f006886:	ff                   	(bad)  
9f006887:	ff 4d ce             	dec    DWORD PTR [ebp-0x32]
9f00688a:	ff                   	(bad)  
9f00688b:	ff 70 f2             	push   DWORD PTR [eax-0xe]
9f00688e:	ff                   	(bad)  
9f00688f:	ff 67 ce             	jmp    DWORD PTR [edi-0x32]
9f006892:	ff                   	(bad)  
9f006893:	ff 90 f2 ff ff a0    	call   DWORD PTR [eax-0x5f00000e]
9f006899:	ce                   	into   
9f00689a:	ff                   	(bad)  
9f00689b:	ff b0 f2 ff ff c0    	push   DWORD PTR [eax-0x3f00000e]
9f0068a1:	ce                   	into   
9f0068a2:	ff                   	(bad)  
9f0068a3:	ff d0                	call   eax
9f0068a5:	f2 ff                	repnz (bad) 
9f0068a7:	ff 27                	jmp    DWORD PTR [edi]
9f0068a9:	cf                   	iret   
9f0068aa:	ff                   	(bad)  
9f0068ab:	ff f0                	push   eax
9f0068ad:	f2 ff                	repnz (bad) 
9f0068af:	ff 90 cf ff ff 10    	call   DWORD PTR [eax+0x10ffffcf]
9f0068b5:	f3 ff                	repz (bad) 
9f0068b7:	ff                   	(bad)  
9f0068b8:	fc                   	cld    
9f0068b9:	cf                   	iret   
9f0068ba:	ff                   	(bad)  
9f0068bb:	ff 30                	push   DWORD PTR [eax]
9f0068bd:	f3 ff                	repz (bad) 
9f0068bf:	ff 1c d0             	call   FWORD PTR [eax+edx*8]
9f0068c2:	ff                   	(bad)  
9f0068c3:	ff 50 f3             	call   DWORD PTR [eax-0xd]
9f0068c6:	ff                   	(bad)  
9f0068c7:	ff 9c d1 ff ff 80 f3 	call   FWORD PTR [ecx+edx*8-0xc7f0001]
9f0068ce:	ff                   	(bad)  
9f0068cf:	ff                   	(bad)  
9f0068d0:	bc d1 ff ff a0       	mov    esp,0xa0ffffd1
9f0068d5:	f3 ff                	repz (bad) 
9f0068d7:	ff 58 d3             	call   FWORD PTR [eax-0x2d]
9f0068da:	ff                   	(bad)  
9f0068db:	ff d0                	call   eax
9f0068dd:	f3 ff                	repz (bad) 
9f0068df:	ff ee                	jmp    <internal disassembler error>
9f0068e1:	d3 ff                	sar    edi,cl
9f0068e3:	ff f4                	push   esp
9f0068e5:	f3 ff                	repz (bad) 
9f0068e7:	ff 10                	call   DWORD PTR [eax]
9f0068e9:	d4 ff                	aam    0xff
9f0068eb:	ff 14 f4             	call   DWORD PTR [esp+esi*8]
9f0068ee:	ff                   	(bad)  
9f0068ef:	ff 2e                	jmp    FWORD PTR [esi]
9f0068f1:	d5 ff                	aad    0xff
9f0068f3:	ff 40 f4             	inc    DWORD PTR [eax-0xc]
9f0068f6:	ff                   	(bad)  
9f0068f7:	ff 54 d5 ff          	call   DWORD PTR [ebp+edx*8-0x1]
9f0068fb:	ff 60 f4             	jmp    DWORD PTR [eax-0xc]
9f0068fe:	ff                   	(bad)  
9f0068ff:	ff f2                	push   edx
9f006901:	d5 ff                	aad    0xff
9f006903:	ff 88 f4 ff ff 60    	dec    DWORD PTR [eax+0x60fffff4]
9f006909:	d6                   	(bad)  
9f00690a:	ff                   	(bad)  
9f00690b:	ff b0 f4 ff ff 80    	push   DWORD PTR [eax-0x7f00000c]
9f006911:	d6                   	(bad)  
9f006912:	ff                   	(bad)  
9f006913:	ff d0                	call   eax
9f006915:	f4                   	hlt    
9f006916:	ff                   	(bad)  
9f006917:	ff c4                	inc    esp
9f006919:	d6                   	(bad)  
9f00691a:	ff                   	(bad)  
9f00691b:	ff                   	(bad)  
9f00691c:	f8                   	clc    
9f00691d:	f4                   	hlt    
9f00691e:	ff                   	(bad)  
9f00691f:	ff dd                	call   <internal disassembler error>
9f006921:	d9 ff                	fcos   
9f006923:	ff 20                	jmp    DWORD PTR [eax]
9f006925:	f5                   	cmc    
9f006926:	ff                   	(bad)  
9f006927:	ff                   	(bad)  
9f006928:	fa                   	cli    
9f006929:	d9 ff                	fcos   
9f00692b:	ff 40 f5             	inc    DWORD PTR [eax-0xb]
9f00692e:	ff                   	(bad)  
9f00692f:	ff 37                	push   DWORD PTR [edi]
9f006931:	da ff                	(bad)  
9f006933:	ff 60 f5             	jmp    DWORD PTR [eax-0xb]
9f006936:	ff                   	(bad)  
9f006937:	ff 6c da ff          	jmp    FWORD PTR [edx+ebx*8-0x1]
9f00693b:	ff 80 f5 ff ff 89    	inc    DWORD PTR [eax-0x7600000b]
9f006941:	da ff                	(bad)  
9f006943:	ff a0 f5 ff ff e0    	jmp    DWORD PTR [eax-0x1f00000b]
9f006949:	e2 ff                	loop   9f00694a <__GNU_EH_FRAME_HDR+0x416>
9f00694b:	ff d0                	call   eax
9f00694d:	f5                   	cmc    
9f00694e:	ff                   	(bad)  
9f00694f:	ff 4d e3             	dec    DWORD PTR [ebp-0x1d]
9f006952:	ff                   	(bad)  
9f006953:	ff                   	(bad)  
9f006954:	f8                   	clc    
9f006955:	f5                   	cmc    
9f006956:	ff                   	(bad)  
9f006957:	ff 8e e3 ff ff 2c    	dec    DWORD PTR [esi+0x2cffffe3]
9f00695d:	e4 ff                	in     al,0xff
9f00695f:	ff cc                	dec    esp
9f006961:	e3 ff                	jecxz  9f006962 <__GNU_EH_FRAME_HDR+0x42e>
9f006963:	ff e0                	jmp    eax
9f006965:	e4 ff                	in     al,0xff
9f006967:	ff d0                	call   eax
9f006969:	e3 ff                	jecxz  9f00696a <__GNU_EH_FRAME_HDR+0x436>
9f00696b:	ff 1c f6             	call   FWORD PTR [esi+esi*8]
9f00696e:	ff                   	(bad)  
9f00696f:	ff                   	.byte 0xff

Disassembly of section .rodata:

9f006980 <ansiEscSeq>:
9f006980:	1b 5b 00             	sbb    ebx,DWORD PTR [ebx+0x0]
9f006983:	3b 00                	cmp    eax,DWORD PTR [eax]
9f006985:	48                   	dec    eax
9f006986:	00 25 73 00 73 00    	add    BYTE PTR ds:0x730073,ah
9f00698c:	75 00                	jne    9f00698e <ansiEscSeq+0xe>
9f00698e:	3d 00 50 41 54       	cmp    eax,0x54415000
9f006993:	48                   	dec    eax
9f006994:	00 2f                	add    BYTE PTR [edi],ch
9f006996:	00 0a                	add    BYTE PTR [edx],cl
9f006998:	00 53 74             	add    BYTE PTR [ebx+0x74],dl
9f00699b:	72 65                	jb     9f006a02 <ansiEscSeq+0x82>
9f00699d:	61                   	popa   
9f00699e:	6d                   	ins    DWORD PTR es:[edi],dx
9f00699f:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
9f0069a5:	74 20                	je     9f0069c7 <ansiEscSeq+0x47>
9f0069a7:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
9f0069ae:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0069af:	74 65                	je     9f006a16 <ansiEscSeq+0x96>
9f0069b1:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f0069b4:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0069b6:	2a 6c 69 62          	sub    ch,BYTE PTR [ecx+ebp*2+0x62]
9f0069ba:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
9f0069bd:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0069be:	69 74 20 63 61 6c 6c 	imul   esi,DWORD PTR [eax+eiz*1+0x63],0x656c6c61
9f0069c5:	65 
9f0069c6:	64 0a 2a             	or     ch,BYTE PTR fs:[edx]
9f0069c9:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0069cb:	00 2a                	add    BYTE PTR [edx],ch
9f0069cd:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0069cf:	6c                   	ins    BYTE PTR es:[edi],dx
9f0069d0:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f0069d7:	74 20                	je     9f0069f9 <ansiEscSeq+0x79>
9f0069d9:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f0069dc:	70 6c                	jo     9f006a4a <ansiEscSeq+0xca>
9f0069de:	65                   	gs
9f0069df:	74 65                	je     9f006a46 <ansiEscSeq+0xc6>
9f0069e1:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f0069e4:	6c                   	ins    BYTE PTR es:[edi],dx
9f0069e5:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f0069ec:	74 20                	je     9f006a0e <ansiEscSeq+0x8e>
9f0069ee:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f0069f1:	6c                   	ins    BYTE PTR es:[edi],dx
9f0069f2:	65 64 20 70 72       	gs and BYTE PTR fs:gs:[eax+0x72],dh
9f0069f7:	65                   	gs
9f0069f8:	76 69                	jbe    9f006a63 <ansiEscSeq+0xe3>
9f0069fa:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0069fb:	75 73                	jne    9f006a70 <ansiEscSeq+0xf0>
9f0069fd:	6c                   	ins    BYTE PTR es:[edi],dx
9f0069fe:	79 2c                	jns    9f006a2c <ansiEscSeq+0xac>
9f006a00:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f006a03:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x6c000a67
9f006a0a:	6c 
9f006a0b:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f006a12:	65 63 20             	arpl   WORD PTR gs:[eax],sp
9f006a15:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f006a17:	72 20                	jb     9f006a39 <ansiEscSeq+0xb9>
9f006a19:	25 73 0a 00 20       	and    eax,0x20000a73
9f006a1e:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f006a22:	63 3a                	arpl   WORD PTR [edx],di
9f006a24:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f006a27:	65 63 62 20          	arpl   WORD PTR gs:[edx+0x20],sp
9f006a2b:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f006a2d:	72 20                	jb     9f006a4f <ansiEscSeq+0xcf>
9f006a2f:	25 73 0a 00 6c       	and    eax,0x6c000a73
9f006a34:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f006a3b:	65 63 61 20          	arpl   WORD PTR gs:[ecx+0x20],sp
9f006a3f:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f006a41:	72 20                	jb     9f006a63 <ansiEscSeq+0xe3>
9f006a43:	25 73 0a 00 00       	and    eax,0xa73
9f006a48:	68 65 61 70 42       	push   0x42706165
9f006a4d:	61                   	popa   
9f006a4e:	73 65                	jae    9f006ab5 <ansiEscSeq+0x135>
9f006a50:	20 40 20             	and    BYTE PTR [eax+0x20],al
9f006a53:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
9f006a56:	30 38                	xor    BYTE PTR [eax],bh
9f006a58:	58                   	pop    eax
9f006a59:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
9f006a5f:	30 38                	xor    BYTE PTR [eax],bh
9f006a61:	58                   	pop    eax
9f006a62:	20 62 65             	and    BYTE PTR [edx+0x65],ah
9f006a65:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f006a67:	72 65                	jb     9f006ace <ansiEscSeq+0x14e>
9f006a69:	0a 00                	or     al,BYTE PTR [eax]
9f006a6b:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f006a6e:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a6f:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a70:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a71:	63 3a                	arpl   WORD PTR [edx],di
9f006a73:	20 6d 61             	and    BYTE PTR [ebp+0x61],ch
9f006a76:	72 6b                	jb     9f006ae3 <ansiEscSeq+0x163>
9f006a78:	65                   	gs
9f006a79:	72 20                	jb     9f006a9b <ansiEscSeq+0x11b>
9f006a7b:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006a7c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a7d:	74 20                	je     9f006a9f <ansiEscSeq+0x11f>
9f006a7f:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f006a81:	75 6e                	jne    9f006af1 <ansiEscSeq+0x171>
9f006a83:	64 20 65 72          	and    BYTE PTR fs:[ebp+0x72],ah
9f006a87:	72 6f                	jb     9f006af8 <ansiEscSeq+0x178>
9f006a89:	72 21                	jb     9f006aac <ansiEscSeq+0x12c>
9f006a8b:	21 21                	and    DWORD PTR [ecx],esp
9f006a8d:	0a 00                	or     al,BYTE PTR [eax]
9f006a8f:	00 0a                	add    BYTE PTR [edx],cl
9f006a91:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a93:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a95:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a97:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a99:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a9b:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a9d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a9f:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006aa1:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006aa3:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006aa5:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006aa7:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006aa9:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006aab:	6d                   	ins    DWORD PTR es:[edi],dx
9f006aac:	61                   	popa   
9f006aad:	6c                   	ins    BYTE PTR es:[edi],dx
9f006aae:	6c                   	ins    BYTE PTR es:[edi],dx
9f006aaf:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006ab0:	63 20                	arpl   WORD PTR [eax],sp
9f006ab2:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
9f006ab5:	65 20 65 72          	and    BYTE PTR gs:[ebp+0x72],ah
9f006ab9:	72 6f                	jb     9f006b2a <ansiEscSeq+0x1aa>
9f006abb:	72 21                	jb     9f006ade <ansiEscSeq+0x15e>
9f006abd:	21 21                	and    DWORD PTR [ecx],esp
9f006abf:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006ac1:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006ac3:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006ac5:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006ac7:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006ac9:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006acb:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006acd:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006acf:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006ad1:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006ad3:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006ad5:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006ad7:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006ad9:	0a 00                	or     al,BYTE PTR [eax]
9f006adb:	00 0a                	add    BYTE PTR [edx],cl
9f006add:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006adf:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006ae1:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006ae3:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006ae5:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006ae7:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006ae9:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006aeb:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006aed:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006aef:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006af1:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006af3:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006af5:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006af7:	6d                   	ins    DWORD PTR es:[edi],dx
9f006af8:	61                   	popa   
9f006af9:	6c                   	ins    BYTE PTR es:[edi],dx
9f006afa:	6c                   	ins    BYTE PTR es:[edi],dx
9f006afb:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006afc:	63 20                	arpl   WORD PTR [eax],sp
9f006afe:	70 6f                	jo     9f006b6f <ansiEscSeq+0x1ef>
9f006b00:	69 6e 74 65 72 20 65 	imul   ebp,DWORD PTR [esi+0x74],0x65207265
9f006b07:	72 72                	jb     9f006b7b <ansiEscSeq+0x1fb>
9f006b09:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b0a:	72 21                	jb     9f006b2d <ansiEscSeq+0x1ad>
9f006b0c:	21 21                	and    DWORD PTR [ecx],esp
9f006b0e:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006b10:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006b12:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006b14:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006b16:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006b18:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006b1a:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006b1c:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006b1e:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006b20:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006b22:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006b24:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006b26:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006b28:	0a 00                	or     al,BYTE PTR [eax]
9f006b2a:	00 00                	add    BYTE PTR [eax],al
9f006b2c:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b2d:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f006b34:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b35:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b36:	63 3a                	arpl   WORD PTR [edx],di
9f006b38:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f006b3b:	71 75                	jno    9f006bb2 <ansiEscSeq+0x232>
9f006b3d:	65                   	gs
9f006b3e:	73 74                	jae    9f006bb4 <ansiEscSeq+0x234>
9f006b40:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
9f006b43:	72 20                	jb     9f006b65 <ansiEscSeq+0x1e5>
9f006b45:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f006b48:	30 38                	xor    BYTE PTR [eax],bh
9f006b4a:	78 20                	js     9f006b6c <ansiEscSeq+0x1ec>
9f006b4c:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
9f006b4f:	65                   	gs
9f006b50:	73 0a                	jae    9f006b5c <ansiEscSeq+0x1dc>
9f006b52:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f006b56:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f006b59:	61                   	popa   
9f006b5a:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b5b:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b5c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b5d:	63 3a                	arpl   WORD PTR [edx],di
9f006b5f:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f006b62:	65                   	gs
9f006b63:	64                   	fs
9f006b64:	65                   	gs
9f006b65:	64                   	fs
9f006b66:	3d 30 78 25 30       	cmp    eax,0x30257830
9f006b6b:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f006b6e:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f006b72:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f006b75:	61                   	popa   
9f006b76:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b77:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b78:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b79:	63 3a                	arpl   WORD PTR [edx],di
9f006b7b:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f006b7e:	61                   	popa   
9f006b7f:	45                   	inc    ebp
9f006b80:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006b81:	64                   	fs
9f006b82:	3d 30 78 25 30       	cmp    eax,0x30257830
9f006b87:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f006b8a:	00 00                	add    BYTE PTR [eax],al
9f006b8c:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b8d:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f006b94:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b95:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b96:	63 3a                	arpl   WORD PTR [edx],di
9f006b98:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f006b9b:	71 20                	jno    9f006bbd <ansiEscSeq+0x23d>
9f006b9d:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f006ba0:	30 38                	xor    BYTE PTR [eax],bh
9f006ba2:	58                   	pop    eax
9f006ba3:	20 62 79             	and    BYTE PTR [edx+0x79],ah
9f006ba6:	74 65                	je     9f006c0d <ansiEscSeq+0x28d>
9f006ba8:	73 2c                	jae    9f006bd6 <ansiEscSeq+0x256>
9f006baa:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f006bad:	74 20                	je     9f006bcf <ansiEscSeq+0x24f>
9f006baf:	77 61                	ja     9f006c12 <ansiEscSeq+0x292>
9f006bb1:	73 20                	jae    9f006bd3 <ansiEscSeq+0x253>
9f006bb3:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f006bb6:	30 38                	xor    BYTE PTR [eax],bh
9f006bb8:	58                   	pop    eax
9f006bb9:	2c 20                	sub    al,0x20
9f006bbb:	68 65 61 70 45       	push   0x45706165
9f006bc0:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006bc1:	64                   	fs
9f006bc2:	3d 30 78 25 30       	cmp    eax,0x30257830
9f006bc7:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f006bca:	00 00                	add    BYTE PTR [eax],al
9f006bcc:	6c                   	ins    BYTE PTR es:[edi],dx
9f006bcd:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f006bd4:	6c                   	ins    BYTE PTR es:[edi],dx
9f006bd5:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006bd6:	63 3a                	arpl   WORD PTR [edx],di
9f006bd8:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
9f006bdb:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
9f006be2:	65 
9f006be3:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f006be7:	61                   	popa   
9f006be8:	70 43                	jo     9f006c2d <ansiEscSeq+0x2ad>
9f006bea:	75 72                	jne    9f006c5e <ansiEscSeq+0x2de>
9f006bec:	72 20                	jb     9f006c0e <ansiEscSeq+0x28e>
9f006bee:	61                   	popa   
9f006bef:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006bf0:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f006bf4:	61                   	popa   
9f006bf5:	70 42                	jo     9f006c39 <ansiEscSeq+0x2b9>
9f006bf7:	61                   	popa   
9f006bf8:	73 65                	jae    9f006c5f <ansiEscSeq+0x2df>
9f006bfa:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
9f006bfe:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f006c01:	30 38                	xor    BYTE PTR [eax],bh
9f006c03:	58                   	pop    eax
9f006c04:	0a 00                	or     al,BYTE PTR [eax]
9f006c06:	00 00                	add    BYTE PTR [eax],al
9f006c08:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c09:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f006c10:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c11:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006c12:	63 3a                	arpl   WORD PTR [edx],di
9f006c14:	63 72 65             	arpl   WORD PTR [edx+0x65],si
9f006c17:	61                   	popa   
9f006c18:	74 69                	je     9f006c83 <ansiEscSeq+0x303>
9f006c1a:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006c1b:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
9f006c1f:	61                   	popa   
9f006c20:	70 20                	jo     9f006c42 <ansiEscSeq+0x2c2>
9f006c22:	72 65                	jb     9f006c89 <ansiEscSeq+0x309>
9f006c24:	63 20                	arpl   WORD PTR [eax],sp
9f006c26:	40                   	inc    eax
9f006c27:	20 30                	and    BYTE PTR [eax],dh
9f006c29:	78 25                	js     9f006c50 <ansiEscSeq+0x2d0>
9f006c2b:	30 38                	xor    BYTE PTR [eax],bh
9f006c2d:	58                   	pop    eax
9f006c2e:	0a 00                	or     al,BYTE PTR [eax]
9f006c30:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c31:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f006c38:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c39:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006c3a:	63 3a                	arpl   WORD PTR [edx],di
9f006c3c:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f006c3f:	61                   	popa   
9f006c40:	70 43                	jo     9f006c85 <ansiEscSeq+0x305>
9f006c42:	75 72                	jne    9f006cb6 <ansiEscSeq+0x336>
9f006c44:	72 3d                	jb     9f006c83 <ansiEscSeq+0x303>
9f006c46:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f006c49:	30 38                	xor    BYTE PTR [eax],bh
9f006c4b:	78 0a                	js     9f006c57 <ansiEscSeq+0x2d7>
9f006c4d:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f006c50:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c51:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c52:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006c53:	63 3a                	arpl   WORD PTR [edx],di
9f006c55:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f006c58:	74 75                	je     9f006ccf <ansiEscSeq+0x34f>
9f006c5a:	72 6e                	jb     9f006cca <ansiEscSeq+0x34a>
9f006c5c:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
9f006c63:	30 38                	xor    BYTE PTR [eax],bh
9f006c65:	58                   	pop    eax
9f006c66:	0a 00                	or     al,BYTE PTR [eax]
9f006c68:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c69:	69 62 63 5f 72 65 61 	imul   esp,DWORD PTR [edx+0x63],0x6165725f
9f006c70:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c71:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c72:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006c73:	63 3a                	arpl   WORD PTR [edx],di
9f006c75:	20 63 61             	and    BYTE PTR [ebx+0x61],ah
9f006c78:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c79:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c7a:	65 64 20 66 6f       	gs and BYTE PTR fs:gs:[esi+0x6f],ah
9f006c7f:	72 20                	jb     9f006ca1 <ansiEscSeq+0x321>
9f006c81:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006c82:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c83:	64 20 70 6f          	and    BYTE PTR fs:[eax+0x6f],dh
9f006c87:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f006c8e:	78 25                	js     9f006cb5 <ansiEscSeq+0x335>
9f006c90:	30 38                	xor    BYTE PTR [eax],bh
9f006c92:	78 2c                	js     9f006cc0 <ansiEscSeq+0x340>
9f006c94:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f006c97:	77 20                	ja     9f006cb9 <ansiEscSeq+0x339>
9f006c99:	73 69                	jae    9f006d04 <ansiEscSeq+0x384>
9f006c9b:	7a 65                	jp     9f006d02 <ansiEscSeq+0x382>
9f006c9d:	3d 30 78 25 30       	cmp    eax,0x30257830
9f006ca2:	38 78 00             	cmp    BYTE PTR [eax+0x0],bh
9f006ca5:	00 00                	add    BYTE PTR [eax],al
9f006ca7:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f006cab:	63 5f 72             	arpl   WORD PTR [edi+0x72],bx
9f006cae:	65                   	gs
9f006caf:	6c                   	ins    BYTE PTR es:[edi],dx
9f006cb0:	6c                   	ins    BYTE PTR es:[edi],dx
9f006cb1:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006cb2:	63 3a                	arpl   WORD PTR [edx],di
9f006cb4:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f006cb7:	71 75                	jno    9f006d2e <ansiEscSeq+0x3ae>
9f006cb9:	65                   	gs
9f006cba:	73 74                	jae    9f006d30 <ansiEscSeq+0x3b0>
9f006cbc:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
9f006cbf:	72 20                	jb     9f006ce1 <ansiEscSeq+0x361>
9f006cc1:	30 20                	xor    BYTE PTR [eax],ah
9f006cc3:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
9f006cc6:	65                   	gs
9f006cc7:	73 2c                	jae    9f006cf5 <ansiEscSeq+0x375>
9f006cc9:	20 63 61             	and    BYTE PTR [ebx+0x61],ah
9f006ccc:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006ccd:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006cce:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006ccf:	74 20                	je     9f006cf1 <ansiEscSeq+0x371>
9f006cd1:	66                   	data16
9f006cd2:	75 6c                	jne    9f006d40 <ansiEscSeq+0x3c0>
9f006cd4:	66 69 6c 6c 0a 00 00 	imul   bp,WORD PTR [esp+ebp*2+0xa],0x0
9f006cdb:	00 09                	add    BYTE PTR [ecx],cl
9f006cdd:	6c                   	ins    BYTE PTR es:[edi],dx
9f006cde:	69 62 63 5f 72 65 61 	imul   esp,DWORD PTR [edx+0x63],0x6165725f
9f006ce5:	6c                   	ins    BYTE PTR es:[edi],dx
9f006ce6:	6c                   	ins    BYTE PTR es:[edi],dx
9f006ce7:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006ce8:	63 3a                	arpl   WORD PTR [edx],di
9f006cea:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f006ced:	63 65 69             	arpl   WORD PTR [ebp+0x69],sp
9f006cf0:	76 65                	jbe    9f006d57 <ansiEscSeq+0x3d7>
9f006cf2:	64 20 6e 65          	and    BYTE PTR fs:[esi+0x65],ch
9f006cf6:	77 20                	ja     9f006d18 <ansiEscSeq+0x398>
9f006cf8:	6d                   	ins    DWORD PTR es:[edi],dx
9f006cf9:	61                   	popa   
9f006cfa:	6c                   	ins    BYTE PTR es:[edi],dx
9f006cfb:	6c                   	ins    BYTE PTR es:[edi],dx
9f006cfc:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006cfd:	63 20                	arpl   WORD PTR [eax],sp
9f006cff:	70 6f                	jo     9f006d70 <ansiEscSeq+0x3f0>
9f006d01:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f006d08:	78 25                	js     9f006d2f <ansiEscSeq+0x3af>
9f006d0a:	30 38                	xor    BYTE PTR [eax],bh
9f006d0c:	78 2c                	js     9f006d3a <ansiEscSeq+0x3ba>
9f006d0e:	20 6f 6c             	and    BYTE PTR [edi+0x6c],ch
9f006d11:	64 20 73 69          	and    BYTE PTR fs:[ebx+0x69],dh
9f006d15:	7a 65                	jp     9f006d7c <ansiEscSeq+0x3fc>
9f006d17:	3d 30 78 25 30       	cmp    eax,0x30257830
9f006d1c:	38 78 2c             	cmp    BYTE PTR [eax+0x2c],bh
9f006d1f:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f006d22:	77 20                	ja     9f006d44 <ansiEscSeq+0x3c4>
9f006d24:	73 69                	jae    9f006d8f <ansiEscSeq+0x40f>
9f006d26:	7a 65                	jp     9f006d8d <ansiEscSeq+0x40d>
9f006d28:	3d 30 78 25 30       	cmp    eax,0x30257830
9f006d2d:	38 78 0a             	cmp    BYTE PTR [eax+0xa],bh
9f006d30:	00 00                	add    BYTE PTR [eax],al
9f006d32:	00 00                	add    BYTE PTR [eax],al
9f006d34:	09 6c 69 62          	or     DWORD PTR [ecx+ebp*2+0x62],ebp
9f006d38:	63 5f 72             	arpl   WORD PTR [edi+0x72],bx
9f006d3b:	65                   	gs
9f006d3c:	61                   	popa   
9f006d3d:	6c                   	ins    BYTE PTR es:[edi],dx
9f006d3e:	6c                   	ins    BYTE PTR es:[edi],dx
9f006d3f:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006d40:	63 3a                	arpl   WORD PTR [edx],di
9f006d42:	20 75 70             	and    BYTE PTR [ebp+0x70],dh
9f006d45:	64                   	fs
9f006d46:	61                   	popa   
9f006d47:	74 65                	je     9f006dae <ansiEscSeq+0x42e>
9f006d49:	64 20 6e 65          	and    BYTE PTR fs:[esi+0x65],ch
9f006d4d:	77 20                	ja     9f006d6f <ansiEscSeq+0x3ef>
9f006d4f:	70 6f                	jo     9f006dc0 <ansiEscSeq+0x440>
9f006d51:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f006d58:	78 25                	js     9f006d7f <ansiEscSeq+0x3ff>
9f006d5a:	30 38                	xor    BYTE PTR [eax],bh
9f006d5c:	78 20                	js     9f006d7e <ansiEscSeq+0x3fe>
9f006d5e:	77 69                	ja     9f006dc9 <ansiEscSeq+0x449>
9f006d60:	74 68                	je     9f006dca <ansiEscSeq+0x44a>
9f006d62:	20 6f 6c             	and    BYTE PTR [edi+0x6c],ch
9f006d65:	64 20 70 6f          	and    BYTE PTR fs:[eax+0x6f],dh
9f006d69:	69 6e 74 65 72 20 64 	imul   ebp,DWORD PTR [esi+0x74],0x64207265
9f006d70:	61                   	popa   
9f006d71:	74 61                	je     9f006dd4 <ansiEscSeq+0x454>
9f006d73:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
9f006d76:	64 20 63 6c          	and    BYTE PTR fs:[ebx+0x6c],ah
9f006d7a:	65                   	gs
9f006d7b:	61                   	popa   
9f006d7c:	72 65                	jb     9f006de3 <ansiEscSeq+0x463>
9f006d7e:	64 20 6f 75          	and    BYTE PTR fs:[edi+0x75],ch
9f006d82:	74 20                	je     9f006da4 <ansiEscSeq+0x424>
9f006d84:	72 65                	jb     9f006deb <ansiEscSeq+0x46b>
9f006d86:	6d                   	ins    DWORD PTR es:[edi],dx
9f006d87:	61                   	popa   
9f006d88:	69 6e 67 20 69 66 20 	imul   ebp,DWORD PTR [esi+0x67],0x20666920
9f006d8f:	61                   	popa   
9f006d90:	70 70                	jo     9f006e02 <ansiEscSeq+0x482>
9f006d92:	6c                   	ins    BYTE PTR es:[edi],dx
9f006d93:	69 63 61 62 6c 65 0a 	imul   esp,DWORD PTR [ebx+0x61],0xa656c62
9f006d9a:	00 00                	add    BYTE PTR [eax],al
9f006d9c:	89 b9 ff ff 9b b9    	mov    DWORD PTR [ecx-0x46640001],edi
9f006da2:	ff                   	(bad)  
9f006da3:	ff 9b b9 ff ff 8f    	call   FWORD PTR [ebx-0x70000047]
9f006da9:	b9 ff ff 9b b9       	mov    ecx,0xb99bffff
9f006dae:	ff                   	(bad)  
9f006daf:	ff 9b b9 ff ff 9b    	call   FWORD PTR [ebx-0x64000047]
9f006db5:	b9 ff ff 9b b9       	mov    ecx,0xb99bffff
9f006dba:	ff                   	(bad)  
9f006dbb:	ff 9b b9 ff ff 9b    	call   FWORD PTR [ebx-0x64000047]
9f006dc1:	b9 ff ff 9b b9       	mov    ecx,0xb99bffff
9f006dc6:	ff                   	(bad)  
9f006dc7:	ff 83 b9 ff ff 9b    	inc    DWORD PTR [ebx-0x64000047]
9f006dcd:	b9 ff ff 7d b9       	mov    ecx,0xb97dffff
9f006dd2:	ff                   	(bad)  
9f006dd3:	ff 9b b9 ff ff 9b    	call   FWORD PTR [ebx-0x64000047]
9f006dd9:	b9 ff ff 95 b9       	mov    ecx,0xb995ffff
9f006dde:	ff                   	(bad)  
9f006ddf:	ff                   	(bad)  
9f006de0:	3a bc ff ff 67 bc ff 	cmp    bh,BYTE PTR [edi+edi*8-0x439801]
9f006de7:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006dea:	ff                   	(bad)  
9f006deb:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006dee:	ff                   	(bad)  
9f006def:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006df2:	ff                   	(bad)  
9f006df3:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006df6:	ff                   	(bad)  
9f006df7:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006dfa:	ff                   	(bad)  
9f006dfb:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006dfe:	ff                   	(bad)  
9f006dff:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e02:	ff                   	(bad)  
9f006e03:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e06:	ff                   	(bad)  
9f006e07:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e0a:	ff                   	(bad)  
9f006e0b:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e0e:	ff                   	(bad)  
9f006e0f:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e12:	ff                   	(bad)  
9f006e13:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e16:	ff                   	(bad)  
9f006e17:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e1a:	ff                   	(bad)  
9f006e1b:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e1e:	ff                   	(bad)  
9f006e1f:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e22:	ff                   	(bad)  
9f006e23:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e26:	ff                   	(bad)  
9f006e27:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e2a:	ff                   	(bad)  
9f006e2b:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e2e:	ff                   	(bad)  
9f006e2f:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e32:	ff                   	(bad)  
9f006e33:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e36:	ff                   	(bad)  
9f006e37:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e3a:	ff                   	(bad)  
9f006e3b:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e3e:	ff                   	(bad)  
9f006e3f:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e42:	ff                   	(bad)  
9f006e43:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e46:	ff                   	(bad)  
9f006e47:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e4a:	ff                   	(bad)  
9f006e4b:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e4e:	ff                   	(bad)  
9f006e4f:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e52:	ff                   	(bad)  
9f006e53:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e56:	ff                   	(bad)  
9f006e57:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e5a:	ff                   	(bad)  
9f006e5b:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e5e:	ff                   	(bad)  
9f006e5f:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e62:	ff                   	(bad)  
9f006e63:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e66:	ff                   	(bad)  
9f006e67:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e6a:	ff                   	(bad)  
9f006e6b:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e6e:	ff                   	(bad)  
9f006e6f:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e72:	ff                   	(bad)  
9f006e73:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e76:	ff                   	(bad)  
9f006e77:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e7a:	ff                   	(bad)  
9f006e7b:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e7e:	ff                   	(bad)  
9f006e7f:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e82:	ff                   	(bad)  
9f006e83:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e86:	ff                   	(bad)  
9f006e87:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e8a:	ff                   	(bad)  
9f006e8b:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e8e:	ff                   	(bad)  
9f006e8f:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e92:	ff                   	(bad)  
9f006e93:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e96:	ff                   	(bad)  
9f006e97:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e9a:	ff                   	(bad)  
9f006e9b:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006e9e:	ff                   	(bad)  
9f006e9f:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006ea2:	ff                   	(bad)  
9f006ea3:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006ea6:	ff                   	(bad)  
9f006ea7:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006eaa:	ff                   	(bad)  
9f006eab:	ff 58 bc             	call   FWORD PTR [eax-0x44]
9f006eae:	ff                   	(bad)  
9f006eaf:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006eb2:	ff                   	(bad)  
9f006eb3:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006eb6:	ff                   	(bad)  
9f006eb7:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006eba:	ff                   	(bad)  
9f006ebb:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006ebe:	ff                   	(bad)  
9f006ebf:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006ec2:	ff                   	(bad)  
9f006ec3:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006ec6:	ff                   	(bad)  
9f006ec7:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006eca:	ff                   	(bad)  
9f006ecb:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006ece:	ff                   	(bad)  
9f006ecf:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006ed2:	ff                   	(bad)  
9f006ed3:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006ed6:	ff                   	(bad)  
9f006ed7:	ff c0                	inc    eax
9f006ed9:	ba ff ff 61 bc       	mov    edx,0xbc61ffff
9f006ede:	ff                   	(bad)  
9f006edf:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006ee2:	ff                   	(bad)  
9f006ee3:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006ee6:	ff                   	(bad)  
9f006ee7:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006eea:	ff                   	(bad)  
9f006eeb:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006eee:	ff                   	(bad)  
9f006eef:	ff 61 bc             	jmp    DWORD PTR [ecx-0x44]
9f006ef2:	ff                   	(bad)  
9f006ef3:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006ef6:	ff                   	(bad)  
9f006ef7:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006efa:	ff                   	(bad)  
9f006efb:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006efe:	ff                   	(bad)  
9f006eff:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006f02:	ff                   	(bad)  
9f006f03:	ff f4                	push   esp
9f006f05:	bb ff ff 4b bc       	mov    ebx,0xbc4bffff
9f006f0a:	ff                   	(bad)  
9f006f0b:	ff b6 bb ff ff 67    	push   DWORD PTR [esi+0x67ffffbb]
9f006f11:	bc ff ff 67 bc       	mov    esp,0xbc67ffff
9f006f16:	ff                   	(bad)  
9f006f17:	ff 15 bb ff ff 67    	call   DWORD PTR ds:0x67ffffbb
9f006f1d:	bc ff ff a1 bc       	mov    esp,0xbca1ffff
9f006f22:	ff                   	(bad)  
9f006f23:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006f26:	ff                   	(bad)  
9f006f27:	ff 67 bc             	jmp    DWORD PTR [edi-0x44]
9f006f2a:	ff                   	(bad)  
9f006f2b:	ff 54 bc ff          	call   DWORD PTR [esp+edi*4-0x1]
9f006f2f:	ff 30                	push   DWORD PTR [eax]

9f006f30 <digits.1547>:
9f006f30:	30 31                	xor    BYTE PTR [ecx],dh
9f006f32:	32 33                	xor    dh,BYTE PTR [ebx]
9f006f34:	34 35                	xor    al,0x35
9f006f36:	36                   	ss
9f006f37:	37                   	aaa    
9f006f38:	38 39                	cmp    BYTE PTR [ecx],bh
9f006f3a:	41                   	inc    ecx
9f006f3b:	42                   	inc    edx
9f006f3c:	43                   	inc    ebx
9f006f3d:	44                   	inc    esp
9f006f3e:	45                   	inc    ebp
9f006f3f:	46                   	inc    esi
9f006f40:	47                   	inc    edi
9f006f41:	4d                   	dec    ebp
9f006f42:	54                   	push   esp
	...

9f006f60 <_ytab>:
9f006f60:	1f                   	pop    ds
9f006f61:	00 00                	add    BYTE PTR [eax],al
9f006f63:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006f66:	00 00                	add    BYTE PTR [eax],al
9f006f68:	1f                   	pop    ds
9f006f69:	00 00                	add    BYTE PTR [eax],al
9f006f6b:	00 1e                	add    BYTE PTR [esi],bl
9f006f6d:	00 00                	add    BYTE PTR [eax],al
9f006f6f:	00 1f                	add    BYTE PTR [edi],bl
9f006f71:	00 00                	add    BYTE PTR [eax],al
9f006f73:	00 1e                	add    BYTE PTR [esi],bl
9f006f75:	00 00                	add    BYTE PTR [eax],al
9f006f77:	00 1f                	add    BYTE PTR [edi],bl
9f006f79:	00 00                	add    BYTE PTR [eax],al
9f006f7b:	00 1f                	add    BYTE PTR [edi],bl
9f006f7d:	00 00                	add    BYTE PTR [eax],al
9f006f7f:	00 1e                	add    BYTE PTR [esi],bl
9f006f81:	00 00                	add    BYTE PTR [eax],al
9f006f83:	00 1f                	add    BYTE PTR [edi],bl
9f006f85:	00 00                	add    BYTE PTR [eax],al
9f006f87:	00 1e                	add    BYTE PTR [esi],bl
9f006f89:	00 00                	add    BYTE PTR [eax],al
9f006f8b:	00 1f                	add    BYTE PTR [edi],bl
9f006f8d:	00 00                	add    BYTE PTR [eax],al
9f006f8f:	00 1f                	add    BYTE PTR [edi],bl
9f006f91:	00 00                	add    BYTE PTR [eax],al
9f006f93:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
9f006f99:	00 00                	add    BYTE PTR [eax],al
9f006f9b:	00 1e                	add    BYTE PTR [esi],bl
9f006f9d:	00 00                	add    BYTE PTR [eax],al
9f006f9f:	00 1f                	add    BYTE PTR [edi],bl
9f006fa1:	00 00                	add    BYTE PTR [eax],al
9f006fa3:	00 1e                	add    BYTE PTR [esi],bl
9f006fa5:	00 00                	add    BYTE PTR [eax],al
9f006fa7:	00 1f                	add    BYTE PTR [edi],bl
9f006fa9:	00 00                	add    BYTE PTR [eax],al
9f006fab:	00 1f                	add    BYTE PTR [edi],bl
9f006fad:	00 00                	add    BYTE PTR [eax],al
9f006faf:	00 1e                	add    BYTE PTR [esi],bl
9f006fb1:	00 00                	add    BYTE PTR [eax],al
9f006fb3:	00 1f                	add    BYTE PTR [edi],bl
9f006fb5:	00 00                	add    BYTE PTR [eax],al
9f006fb7:	00 1e                	add    BYTE PTR [esi],bl
9f006fb9:	00 00                	add    BYTE PTR [eax],al
9f006fbb:	00 1f                	add    BYTE PTR [edi],bl
9f006fbd:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

9f006fc0 <.rel.dyn>:
9f006fc0:	24 72                	and    al,0x72
9f006fc2:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f006fc8:	28 72 00             	sub    BYTE PTR [edx+0x0],dh
9f006fcb:	9f                   	lahf   
9f006fcc:	08 00                	or     BYTE PTR [eax],al
9f006fce:	00 00                	add    BYTE PTR [eax],al
9f006fd0:	2c 72                	sub    al,0x72
9f006fd2:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f006fd8:	30 72 00             	xor    BYTE PTR [edx+0x0],dh
9f006fdb:	9f                   	lahf   
9f006fdc:	08 00                	or     BYTE PTR [eax],al
9f006fde:	00 00                	add    BYTE PTR [eax],al
9f006fe0:	34 72                	xor    al,0x72
9f006fe2:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f006fe8:	38 72 00             	cmp    BYTE PTR [edx+0x0],dh
9f006feb:	9f                   	lahf   
9f006fec:	08 00                	or     BYTE PTR [eax],al
9f006fee:	00 00                	add    BYTE PTR [eax],al
9f006ff0:	3c 72                	cmp    al,0x72
9f006ff2:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f006ff8:	40                   	inc    eax
9f006ff9:	72 00                	jb     9f006ffb <_ytab+0x9b>
9f006ffb:	9f                   	lahf   
9f006ffc:	08 00                	or     BYTE PTR [eax],al
9f006ffe:	00 00                	add    BYTE PTR [eax],al
9f007000:	44                   	inc    esp
9f007001:	72 00                	jb     9f007003 <_ytab+0xa3>
9f007003:	9f                   	lahf   
9f007004:	08 00                	or     BYTE PTR [eax],al
9f007006:	00 00                	add    BYTE PTR [eax],al
9f007008:	48                   	dec    eax
9f007009:	72 00                	jb     9f00700b <_ytab+0xab>
9f00700b:	9f                   	lahf   
9f00700c:	08 00                	or     BYTE PTR [eax],al
9f00700e:	00 00                	add    BYTE PTR [eax],al
9f007010:	4c                   	dec    esp
9f007011:	72 00                	jb     9f007013 <_ytab+0xb3>
9f007013:	9f                   	lahf   
9f007014:	08 00                	or     BYTE PTR [eax],al
9f007016:	00 00                	add    BYTE PTR [eax],al
9f007018:	50                   	push   eax
9f007019:	72 00                	jb     9f00701b <_ytab+0xbb>
9f00701b:	9f                   	lahf   
9f00701c:	08 00                	or     BYTE PTR [eax],al
9f00701e:	00 00                	add    BYTE PTR [eax],al
9f007020:	54                   	push   esp
9f007021:	72 00                	jb     9f007023 <_ytab+0xc3>
9f007023:	9f                   	lahf   
9f007024:	08 00                	or     BYTE PTR [eax],al
9f007026:	00 00                	add    BYTE PTR [eax],al
9f007028:	58                   	pop    eax
9f007029:	72 00                	jb     9f00702b <_ytab+0xcb>
9f00702b:	9f                   	lahf   
9f00702c:	08 00                	or     BYTE PTR [eax],al
9f00702e:	00 00                	add    BYTE PTR [eax],al
9f007030:	74 72                	je     9f0070a4 <_ytab+0x144>
9f007032:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f007038:	78 72                	js     9f0070ac <_ytab+0x14c>
9f00703a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f007040:	7c 72                	jl     9f0070b4 <_ytab+0x154>
9f007042:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f007048:	fa                   	cli    
9f007049:	10 00                	adc    BYTE PTR [eax],al
9f00704b:	9f                   	lahf   
9f00704c:	02 2d 00 00 3a 11    	add    ch,BYTE PTR ds:0x113a0000
9f007052:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f007058:	63 11                	arpl   WORD PTR [ecx],dx
9f00705a:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f007060:	7c 11                	jl     9f007073 <_ytab+0x113>
9f007062:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f007068:	d7                   	xlat   BYTE PTR ds:[ebx]
9f007069:	11 00                	adc    DWORD PTR [eax],eax
9f00706b:	9f                   	lahf   
9f00706c:	02 2d 00 00 3a 12    	add    ch,BYTE PTR ds:0x123a0000
9f007072:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f007078:	71 12                	jno    9f00708c <_ytab+0x12c>
9f00707a:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f007080:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f007081:	12 00                	adc    al,BYTE PTR [eax]
9f007083:	9f                   	lahf   
9f007084:	02 2d 00 00 eb 12    	add    ch,BYTE PTR ds:0x12eb0000
9f00708a:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f007090:	2b 13                	sub    edx,DWORD PTR [ebx]
9f007092:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f007098:	6d                   	ins    DWORD PTR es:[edi],dx
9f007099:	13 00                	adc    eax,DWORD PTR [eax]
9f00709b:	9f                   	lahf   
9f00709c:	02 2d 00 00 41 16    	add    ch,BYTE PTR ds:0x16410000
9f0070a2:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f0070a8:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0070a9:	16                   	push   ss
9f0070aa:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f0070b0:	b1 16                	mov    cl,0x16
9f0070b2:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f0070b8:	de 16                	ficom  WORD PTR [esi]
9f0070ba:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f0070c0:	52                   	push   edx
9f0070c1:	17                   	pop    ss
9f0070c2:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f0070c8:	e7 3b                	out    0x3b,eax
9f0070ca:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f0070d0:	4d                   	dec    ebp
9f0070d1:	48                   	dec    eax
9f0070d2:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f0070d8:	70 72                	jo     9f00714c <rcsid+0x4c>
9f0070da:	00 9f 01 18 00 00    	add    BYTE PTR [edi+0x1801],bl
9f0070e0:	68 72 00 9f 07       	push   0x79f0072
9f0070e5:	30 00                	xor    BYTE PTR [eax],al
9f0070e7:	00 6c 72 00          	add    BYTE PTR [edx+esi*2+0x0],ch
9f0070eb:	9f                   	lahf   
9f0070ec:	07                   	pop    es
9f0070ed:	4c                   	dec    esp
	...

Disassembly of section .data:

9f007100 <rcsid>:
9f007100:	24 48                	and    al,0x48
9f007102:	65                   	gs
9f007103:	61                   	popa   
9f007104:	64                   	fs
9f007105:	65                   	gs
9f007106:	72 3a                	jb     9f007142 <rcsid+0x42>
9f007108:	20 2f                	and    BYTE PTR [edi],ch
9f00710a:	75 73                	jne    9f00717f <_DYNAMIC+0x13>
9f00710c:	65                   	gs
9f00710d:	72 36                	jb     9f007145 <rcsid+0x45>
9f00710f:	2f                   	das    
9f007110:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007111:	75 73                	jne    9f007186 <_DYNAMIC+0x1a>
9f007113:	74 65                	je     9f00717a <_DYNAMIC+0xe>
9f007115:	72 2f                	jb     9f007146 <rcsid+0x46>
9f007117:	74 63                	je     9f00717c <_DYNAMIC+0x10>
9f007119:	6c                   	ins    BYTE PTR es:[edi],dx
9f00711a:	2f                   	das    
9f00711b:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f00711e:	70 61                	jo     9f007181 <_DYNAMIC+0x15>
9f007120:	74 2f                	je     9f007151 <rcsid+0x51>
9f007122:	52                   	push   edx
9f007123:	43                   	inc    ebx
9f007124:	53                   	push   ebx
9f007125:	2f                   	das    
9f007126:	73 74                	jae    9f00719c <_DYNAMIC+0x30>
9f007128:	72 73                	jb     9f00719d <_DYNAMIC+0x31>
9f00712a:	74 72                	je     9f00719e <_DYNAMIC+0x32>
9f00712c:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
9f007130:	20 31                	and    BYTE PTR [ecx],dh
9f007132:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
9f007135:	39 33                	cmp    DWORD PTR [ebx],esi
9f007137:	2f                   	das    
9f007138:	30 33                	xor    BYTE PTR [ebx],dh
9f00713a:	2f                   	das    
9f00713b:	31 39                	xor    DWORD PTR [ecx],edi
9f00713d:	20 31                	and    BYTE PTR [ecx],dh
9f00713f:	35 3a 32 35 3a       	xor    eax,0x3a35323a
9f007144:	34 30                	xor    al,0x30
9f007146:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
9f007149:	73 74                	jae    9f0071bf <_DYNAMIC+0x53>
9f00714b:	65                   	gs
9f00714c:	72 20                	jb     9f00716e <_DYNAMIC+0x2>
9f00714e:	45                   	inc    ebp
9f00714f:	78 70                	js     9f0071c1 <_DYNAMIC+0x55>
9f007151:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
9f007154:	53                   	push   ebx
9f007155:	50                   	push   eax
9f007156:	52                   	push   edx
9f007157:	49                   	dec    ecx
9f007158:	54                   	push   esp
9f007159:	45                   	inc    ebp
9f00715a:	20 28                	and    BYTE PTR [eax],ch
9f00715c:	42                   	inc    edx
9f00715d:	65                   	gs
9f00715e:	72 6b                	jb     9f0071cb <_DYNAMIC+0x5f>
9f007160:	65                   	gs
9f007161:	6c                   	ins    BYTE PTR es:[edi],dx
9f007162:	65                   	gs
9f007163:	79 29                	jns    9f00718e <_DYNAMIC+0x22>
9f007165:	00 00                	add    BYTE PTR [eax],al
	...

9f007168 <_daylight>:
9f007168:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

9f00716c <_DYNAMIC>:
9f00716c:	19 00                	sbb    DWORD PTR [eax],eax
9f00716e:	00 00                	add    BYTE PTR [eax],al
9f007170:	70 72                	jo     9f0071e4 <_DYNAMIC+0x78>
9f007172:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
9f007178:	04 00                	add    al,0x0
9f00717a:	00 00                	add    BYTE PTR [eax],al
9f00717c:	1a 00                	sbb    al,BYTE PTR [eax]
9f00717e:	00 00                	add    BYTE PTR [eax],al
9f007180:	74 72                	je     9f0071f4 <_DYNAMIC+0x88>
9f007182:	00 9f 1c 00 00 00    	add    BYTE PTR [edi+0x1c],bl
9f007188:	04 00                	add    al,0x0
9f00718a:	00 00                	add    BYTE PTR [eax],al
9f00718c:	04 00                	add    al,0x0
9f00718e:	00 00                	add    BYTE PTR [eax],al
9f007190:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f007191:	62 00                	bound  eax,QWORD PTR [eax]
9f007193:	9f                   	lahf   
9f007194:	05 00 00 00 54       	add    eax,0x54000000
9f007199:	60                   	pusha  
9f00719a:	00 9f 06 00 00 00    	add    BYTE PTR [edi+0x6],bl
9f0071a0:	64                   	fs
9f0071a1:	5b                   	pop    ebx
9f0071a2:	00 9f 0a 00 00 00    	add    BYTE PTR [edi+0xa],bl
9f0071a8:	4d                   	dec    ebp
9f0071a9:	02 00                	add    al,BYTE PTR [eax]
9f0071ab:	00 0b                	add    BYTE PTR [ebx],cl
9f0071ad:	00 00                	add    BYTE PTR [eax],al
9f0071af:	00 10                	add    BYTE PTR [eax],dl
9f0071b1:	00 00                	add    BYTE PTR [eax],al
9f0071b3:	00 03                	add    BYTE PTR [ebx],al
9f0071b5:	00 00                	add    BYTE PTR [eax],al
9f0071b7:	00 5c 72 00          	add    BYTE PTR [edx+esi*2+0x0],bl
9f0071bb:	9f                   	lahf   
9f0071bc:	02 00                	add    al,BYTE PTR [eax]
9f0071be:	00 00                	add    BYTE PTR [eax],al
9f0071c0:	10 00                	adc    BYTE PTR [eax],al
9f0071c2:	00 00                	add    BYTE PTR [eax],al
9f0071c4:	14 00                	adc    al,0x0
9f0071c6:	00 00                	add    BYTE PTR [eax],al
9f0071c8:	11 00                	adc    DWORD PTR [eax],eax
9f0071ca:	00 00                	add    BYTE PTR [eax],al
9f0071cc:	17                   	pop    ss
9f0071cd:	00 00                	add    BYTE PTR [eax],al
9f0071cf:	00 e0                	add    al,ah
9f0071d1:	70 00                	jo     9f0071d3 <_DYNAMIC+0x67>
9f0071d3:	9f                   	lahf   
9f0071d4:	11 00                	adc    DWORD PTR [eax],eax
9f0071d6:	00 00                	add    BYTE PTR [eax],al
9f0071d8:	c0 6f 00 9f          	shr    BYTE PTR [edi+0x0],0x9f
9f0071dc:	12 00                	adc    al,BYTE PTR [eax]
9f0071de:	00 00                	add    BYTE PTR [eax],al
9f0071e0:	20 01                	and    BYTE PTR [ecx],al
9f0071e2:	00 00                	add    BYTE PTR [eax],al
9f0071e4:	13 00                	adc    eax,DWORD PTR [eax]
9f0071e6:	00 00                	add    BYTE PTR [eax],al
9f0071e8:	08 00                	or     BYTE PTR [eax],al
9f0071ea:	00 00                	add    BYTE PTR [eax],al
9f0071ec:	16                   	push   ss
9f0071ed:	00 00                	add    BYTE PTR [eax],al
9f0071ef:	00 00                	add    BYTE PTR [eax],al
9f0071f1:	00 00                	add    BYTE PTR [eax],al
9f0071f3:	00 fa                	add    dl,bh
9f0071f5:	ff                   	(bad)  
9f0071f6:	ff 6f 11             	jmp    FWORD PTR [edi+0x11]
	...

Disassembly of section .got:

9f007224 <.got>:
9f007224:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f007225:	72 00                	jb     9f007227 <_DYNAMIC+0xbb>
9f007227:	9f                   	lahf   
9f007228:	bc 72 00 9f 80       	mov    esp,0x809f0072
9f00722d:	72 00                	jb     9f00722f <_DYNAMIC+0xc3>
9f00722f:	9f                   	lahf   
9f007230:	a8 72                	test   al,0x72
9f007232:	00 9f 84 72 00 9f    	add    BYTE PTR [edi-0x60ff8d7c],bl
9f007238:	88 72 00             	mov    BYTE PTR [edx+0x0],dh
9f00723b:	9f                   	lahf   
9f00723c:	b8 72 00 9f 8c       	mov    eax,0x8c9f0072
9f007241:	72 00                	jb     9f007243 <_DYNAMIC+0xd7>
9f007243:	9f                   	lahf   
9f007244:	90                   	nop
9f007245:	72 00                	jb     9f007247 <_DYNAMIC+0xdb>
9f007247:	9f                   	lahf   
9f007248:	94                   	xchg   esp,eax
9f007249:	72 00                	jb     9f00724b <_DYNAMIC+0xdf>
9f00724b:	9f                   	lahf   
9f00724c:	ac                   	lods   al,BYTE PTR ds:[esi]
9f00724d:	72 00                	jb     9f00724f <_DYNAMIC+0xe3>
9f00724f:	9f                   	lahf   
9f007250:	b0 72                	mov    al,0x72
9f007252:	00 9f 98 72 00 9f    	add    BYTE PTR [edi-0x60ff8d68],bl
9f007258:	00 73 00             	add    BYTE PTR [ebx+0x0],dh
9f00725b:	9f                   	lahf   

Disassembly of section .got.plt:

9f00725c <_GLOBAL_OFFSET_TABLE_>:
9f00725c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00725d:	71 00                	jno    9f00725f <_GLOBAL_OFFSET_TABLE_+0x3>
9f00725f:	9f                   	lahf   
	...
9f007268:	e6 48                	out    0x48,al
9f00726a:	00 9f f6 48 00 9f    	add    BYTE PTR [edi-0x60ffb70a],bl

Disassembly of section .init_array:

9f007270 <.init_array>:
9f007270:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

9f007274 <.fini_array>:
9f007274:	49                   	dec    ecx
9f007275:	14 00                	adc    al,0x0
9f007277:	9f                   	lahf   

Disassembly of section .data.rel.local:

9f007278 <_tzname>:
9f007278:	40                   	inc    eax
9f007279:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00727a:	00 9f 40 6f 00 9f    	add    BYTE PTR [edi-0x60ff90c0],bl

Disassembly of section .bss:

9f007280 <filesToCloseCount>:
9f007280:	00 00                	add    BYTE PTR [eax],al
	...

9f007284 <filesToClose>:
9f007284:	00 00                	add    BYTE PTR [eax],al
	...

9f007288 <heapEnd>:
9f007288:	00 00                	add    BYTE PTR [eax],al
	...

9f00728c <heapBase>:
9f00728c:	00 00                	add    BYTE PTR [eax],al
	...

9f007290 <heapCurr>:
9f007290:	00 00                	add    BYTE PTR [eax],al
	...

9f007294 <processEnvp>:
9f007294:	00 00                	add    BYTE PTR [eax],al
	...

9f007298 <libcTZ>:
9f007298:	00 00                	add    BYTE PTR [eax],al
	...

9f00729c <lasts.1542>:
9f00729c:	00 00                	add    BYTE PTR [eax],al
	...

9f0072a0 <lasts.1550>:
9f0072a0:	00 00                	add    BYTE PTR [eax],al
	...

9f0072a4 <resolvePath_envPath>:
9f0072a4:	00 00                	add    BYTE PTR [eax],al
	...

9f0072a8 <resolvePath_resPath>:
9f0072a8:	00 00                	add    BYTE PTR [eax],al
	...

9f0072ac <resolvePath_cwd>:
9f0072ac:	00 00                	add    BYTE PTR [eax],al
	...

9f0072b0 <resolvePath_inPath>:
9f0072b0:	00 00                	add    BYTE PTR [eax],al
	...

9f0072b4 <libcInitialized>:
9f0072b4:	00 00                	add    BYTE PTR [eax],al
	...

9f0072b8 <printBuffer>:
9f0072b8:	00 00                	add    BYTE PTR [eax],al
	...

9f0072bc <params>:
	...

9f0072d4 <lastHRCreated.1565>:
9f0072d4:	00 00                	add    BYTE PTR [eax],al
	...

9f0072d8 <_dstbias>:
	...

9f0072e0 <ticksToWait>:
	...

9f007300 <tmbuf>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	92                   	xchg   edx,eax
       1:	01 00                	add    DWORD PTR [eax],eax
       3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
       6:	00 00                	add    BYTE PTR [eax],al
       8:	00 00                	add    BYTE PTR [eax],al
       a:	04 01                	add    al,0x1
       c:	ac                   	lods   al,BYTE PTR ds:[esi]
       d:	00 00                	add    BYTE PTR [eax],al
       f:	00 0c 3d 01 00 00 1e 	add    BYTE PTR [edi*1+0x1e000001],cl
      16:	00 00                	add    BYTE PTR [eax],al
      18:	00 00                	add    BYTE PTR [eax],al
      1a:	00 00                	add    BYTE PTR [eax],al
      1c:	9f                   	lahf   
      1d:	70 00                	jo     1f <sysEnter_Vector-0x12ffe1>
      1f:	00 00                	add    BYTE PTR [eax],al
      21:	00 00                	add    BYTE PTR [eax],al
      23:	00 00                	add    BYTE PTR [eax],al
      25:	02 01                	add    al,BYTE PTR [ecx]
      27:	06                   	push   es
      28:	8c 00                	mov    WORD PTR [eax],es
      2a:	00 00                	add    BYTE PTR [eax],al
      2c:	02 01                	add    al,BYTE PTR [ecx]
      2e:	06                   	push   es
      2f:	85 00                	test   DWORD PTR [eax],eax
      31:	00 00                	add    BYTE PTR [eax],al
      33:	02 02                	add    al,BYTE PTR [edx]
      35:	05 72 01 00 00       	add    eax,0x172
      3a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
      41:	02 08                	add    cl,BYTE PTR [eax]
      43:	05 00 00 00 00       	add    eax,0x0
      48:	02 01                	add    al,BYTE PTR [ecx]
      4a:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
      50:	02 07                	add    al,BYTE PTR [edi]
      52:	19 01                	sbb    DWORD PTR [ecx],eax
      54:	00 00                	add    BYTE PTR [eax],al
      56:	04 0e                	add    al,0xe
      58:	00 00                	add    BYTE PTR [eax],al
      5a:	00 02                	add    BYTE PTR [edx],al
      5c:	34 61                	xor    al,0x61
      5e:	00 00                	add    BYTE PTR [eax],al
      60:	00 02                	add    BYTE PTR [edx],al
      62:	04 07                	add    al,0x7
      64:	61                   	popa   
      65:	00 00                	add    BYTE PTR [eax],al
      67:	00 02                	add    BYTE PTR [edx],al
      69:	08 07                	or     BYTE PTR [edi],al
      6b:	57                   	push   edi
      6c:	00 00                	add    BYTE PTR [eax],al
      6e:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
      75:	56                   	push   esi
      76:	61                   	popa   
      77:	00 00                	add    BYTE PTR [eax],al
      79:	00 02                	add    BYTE PTR [edx],al
      7b:	04 05                	add    al,0x5
      7d:	05 00 00 00 02       	add    eax,0x2000000
      82:	0c 04                	or     al,0x4
      84:	66 01 00             	add    WORD PTR [eax],ax
      87:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
      8d:	00 06                	add    BYTE PTR [esi],al
      8f:	25 00 00 00 02       	and    eax,0x2000000
      94:	01 02                	add    DWORD PTR [edx],eax
      96:	13 01                	adc    eax,DWORD PTR [ecx]
      98:	00 00                	add    BYTE PTR [eax],al
      9a:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
      9d:	83 01 00             	add    DWORD PTR [ecx],0x0
      a0:	00 02                	add    BYTE PTR [edx],al
      a2:	04 07                	add    al,0x7
      a4:	5c                   	pop    esp
      a5:	00 00                	add    BYTE PTR [eax],al
      a7:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
      ad:	00 07                	add    BYTE PTR [edi],al
      af:	17                   	pop    ss
      b0:	00 00                	add    BYTE PTR [eax],al
      b2:	00 01                	add    BYTE PTR [ecx],al
      b4:	08 a8 00 00 00 00    	or     BYTE PTR [eax+0x0],ch
      ba:	00 00                	add    BYTE PTR [eax],al
      bc:	9f                   	lahf   
      bd:	38 00                	cmp    BYTE PTR [eax],al
      bf:	00 00                	add    BYTE PTR [eax],al
      c1:	01 9c e0 00 00 00 08 	add    DWORD PTR [eax+eiz*8+0x8000000],ebx
      c8:	73 00                	jae    ca <sysEnter_Vector-0x12ff36>
      ca:	01 08                	add    DWORD PTR [eax],ecx
      cc:	88 00                	mov    BYTE PTR [eax],al
      ce:	00 00                	add    BYTE PTR [eax],al
      d0:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      d6:	01 08                	add    DWORD PTR [eax],ecx
      d8:	3a 00                	cmp    al,BYTE PTR [eax]
      da:	00 00                	add    BYTE PTR [eax],al
      dc:	02 91 04 00 07 2c    	add    dl,BYTE PTR [ecx+0x2c070004]
      e2:	01 00                	add    DWORD PTR [eax],eax
      e4:	00 01                	add    BYTE PTR [ecx],al
      e6:	10 a8 00 00 00 38    	adc    BYTE PTR [eax+0x38000000],ch
      ec:	00 00                	add    BYTE PTR [eax],al
      ee:	9f                   	lahf   
      ef:	38 00                	cmp    BYTE PTR [eax],al
      f1:	00 00                	add    BYTE PTR [eax],al
      f3:	01 9c 12 01 00 00 08 	add    DWORD PTR [edx+edx*1+0x8000001],ebx
      fa:	73 00                	jae    fc <sysEnter_Vector-0x12ff04>
      fc:	01 10                	add    DWORD PTR [eax],edx
      fe:	88 00                	mov    BYTE PTR [eax],al
     100:	00 00                	add    BYTE PTR [eax],al
     102:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
     108:	01 10                	add    DWORD PTR [eax],edx
     10a:	3a 00                	cmp    al,BYTE PTR [eax]
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	02 91 04 00 09 a3    	add    dl,BYTE PTR [ecx-0x5cf6fffc]
     114:	00 00                	add    BYTE PTR [eax],al
     116:	00 03                	add    BYTE PTR [ebx],al
     118:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
     11b:	00 00                	add    BYTE PTR [eax],al
     11d:	05 03 8c 72 00       	add    eax,0x728c03
     122:	9f                   	lahf   
     123:	09 34 01             	or     DWORD PTR [ecx+eax*1],esi
     126:	00 00                	add    BYTE PTR [eax],al
     128:	03 3a                	add    edi,DWORD PTR [edx]
     12a:	56                   	push   esi
     12b:	00 00                	add    BYTE PTR [eax],al
     12d:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
     133:	9f                   	lahf   
     134:	09 7b 00             	or     DWORD PTR [ebx+0x0],edi
     137:	00 00                	add    BYTE PTR [eax],al
     139:	03 3b                	add    edi,DWORD PTR [ebx]
     13b:	56                   	push   esi
     13c:	00 00                	add    BYTE PTR [eax],al
     13e:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
     144:	9f                   	lahf   
     145:	09 7c 01 00          	or     DWORD PTR [ecx+eax*1+0x0],edi
     149:	00 03                	add    BYTE PTR [ebx],al
     14b:	3c 7a                	cmp    al,0x7a
     14d:	00 00                	add    BYTE PTR [eax],al
     14f:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
     155:	9f                   	lahf   
     156:	09 6e 00             	or     DWORD PTR [esi+0x0],ebp
     159:	00 00                	add    BYTE PTR [eax],al
     15b:	04 34                	add    al,0x34
     15d:	67 01 00             	add    DWORD PTR [bx+si],eax
     160:	00 05 03 84 72 00    	add    BYTE PTR ds:0x728403,al
     166:	9f                   	lahf   
     167:	05 04 6f 00 00       	add    eax,0x6f04
     16c:	00 09                	add    BYTE PTR [ecx],cl
     16e:	91                   	xchg   ecx,eax
     16f:	00 00                	add    BYTE PTR [eax],al
     171:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
     178:	05 03 80 72 00       	add    eax,0x728003
     17d:	9f                   	lahf   
     17e:	09 41 00             	or     DWORD PTR [ecx+0x0],eax
     181:	00 00                	add    BYTE PTR [eax],al
     183:	05 58 8f 01 00       	add    eax,0x18f58
     188:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
     18e:	9f                   	lahf   
     18f:	05 04 a8 00 00       	add    eax,0xa804
     194:	00 00                	add    BYTE PTR [eax],al
     196:	d1 01                	rol    DWORD PTR [ecx],1
     198:	00 00                	add    BYTE PTR [eax],al
     19a:	04 00                	add    al,0x0
     19c:	83 00 00             	add    DWORD PTR [eax],0x0
     19f:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     1a2:	ac                   	lods   al,BYTE PTR ds:[esi]
     1a3:	00 00                	add    BYTE PTR [eax],al
     1a5:	00 0c 95 01 00 00 1e 	add    BYTE PTR [edx*4+0x1e000001],cl
     1ac:	00 00                	add    BYTE PTR [eax],al
     1ae:	00 70 00             	add    BYTE PTR [eax+0x0],dh
     1b1:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
     1b7:	de 00                	fiadd  WORD PTR [eax]
     1b9:	00 00                	add    BYTE PTR [eax],al
     1bb:	02 01                	add    al,BYTE PTR [ecx]
     1bd:	06                   	push   es
     1be:	8c 00                	mov    WORD PTR [eax],es
     1c0:	00 00                	add    BYTE PTR [eax],al
     1c2:	02 01                	add    al,BYTE PTR [ecx]
     1c4:	06                   	push   es
     1c5:	85 00                	test   DWORD PTR [eax],eax
     1c7:	00 00                	add    BYTE PTR [eax],al
     1c9:	02 02                	add    al,BYTE PTR [edx]
     1cb:	05 72 01 00 00       	add    eax,0x172
     1d0:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     1d7:	02 08                	add    cl,BYTE PTR [eax]
     1d9:	05 00 00 00 00       	add    eax,0x0
     1de:	02 01                	add    al,BYTE PTR [ecx]
     1e0:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     1e6:	02 07                	add    al,BYTE PTR [edi]
     1e8:	19 01                	sbb    DWORD PTR [ecx],eax
     1ea:	00 00                	add    BYTE PTR [eax],al
     1ec:	04 0e                	add    al,0xe
     1ee:	00 00                	add    BYTE PTR [eax],al
     1f0:	00 02                	add    BYTE PTR [edx],al
     1f2:	34 61                	xor    al,0x61
     1f4:	00 00                	add    BYTE PTR [eax],al
     1f6:	00 02                	add    BYTE PTR [edx],al
     1f8:	04 07                	add    al,0x7
     1fa:	61                   	popa   
     1fb:	00 00                	add    BYTE PTR [eax],al
     1fd:	00 02                	add    BYTE PTR [edx],al
     1ff:	08 07                	or     BYTE PTR [edi],al
     201:	57                   	push   edi
     202:	00 00                	add    BYTE PTR [eax],al
     204:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     20b:	56                   	push   esi
     20c:	61                   	popa   
     20d:	00 00                	add    BYTE PTR [eax],al
     20f:	00 02                	add    BYTE PTR [edx],al
     211:	04 05                	add    al,0x5
     213:	05 00 00 00 02       	add    eax,0x2000000
     218:	0c 04                	or     al,0x4
     21a:	66 01 00             	add    WORD PTR [eax],ax
     21d:	00 02                	add    BYTE PTR [edx],al
     21f:	01 02                	add    DWORD PTR [edx],eax
     221:	13 01                	adc    eax,DWORD PTR [ecx]
     223:	00 00                	add    BYTE PTR [eax],al
     225:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     228:	83 01 00             	add    DWORD PTR [ecx],0x0
     22b:	00 02                	add    BYTE PTR [edx],al
     22d:	04 07                	add    al,0x7
     22f:	5c                   	pop    esp
     230:	00 00                	add    BYTE PTR [eax],al
     232:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     238:	00 06                	add    BYTE PTR [esi],al
     23a:	c5 01                	lds    eax,FWORD PTR [ecx]
     23c:	00 00                	add    BYTE PTR [eax],al
     23e:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     244:	70 00                	jo     246 <sysEnter_Vector-0x12fdba>
     246:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
     24c:	01 9c fa 00 00 00 07 	add    DWORD PTR [edx+edi*8+0x7000000],ebx
     253:	ca 0e 00             	retf   0xe
     256:	00 01                	add    BYTE PTR [ecx],al
     258:	25 9d 00 00 00       	and    eax,0x9d
     25d:	02 91 00 07 bf 01    	add    dl,BYTE PTR [ecx+0x1bf0700]
     263:	00 00                	add    BYTE PTR [eax],al
     265:	01 25 9d 00 00 00    	add    DWORD PTR ds:0x9d,esp
     26b:	02 91 04 08 63 00    	add    dl,BYTE PTR [ecx+0x630804]
     271:	01 27                	add    DWORD PTR [edi],esp
     273:	25 00 00 00 01       	and    eax,0x1000000
     278:	51                   	push   ecx
     279:	08 70 00             	or     BYTE PTR [eax+0x0],dh
     27c:	01 27                	add    DWORD PTR [edi],esp
     27e:	9d                   	popf   
     27f:	00 00                	add    BYTE PTR [eax],al
     281:	00 01                	add    BYTE PTR [ecx],al
     283:	56                   	push   esi
     284:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
     287:	01 27                	add    DWORD PTR [edi],esp
     289:	9d                   	popf   
     28a:	00 00                	add    BYTE PTR [eax],al
     28c:	00 01                	add    BYTE PTR [ecx],al
     28e:	53                   	push   ebx
     28f:	00 06                	add    BYTE PTR [esi],al
     291:	8c 01                	mov    WORD PTR [ecx],es
     293:	00 00                	add    BYTE PTR [eax],al
     295:	01 33                	add    DWORD PTR [ebx],esi
     297:	3a 00                	cmp    al,BYTE PTR [eax]
     299:	00 00                	add    BYTE PTR [eax],al
     29b:	c5 00                	lds    eax,FWORD PTR [eax]
     29d:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
     2a3:	01 9c 51 01 00 00 07 	add    DWORD PTR [ecx+edx*2+0x7000001],ebx
     2aa:	ca 0e 00             	retf   0xe
     2ad:	00 01                	add    BYTE PTR [ecx],al
     2af:	33 9d 00 00 00 02    	xor    ebx,DWORD PTR [ebp+0x2000000]
     2b5:	91                   	xchg   ecx,eax
     2b6:	00 07                	add    BYTE PTR [edi],al
     2b8:	bf 01 00 00 01       	mov    edi,0x1000001
     2bd:	33 9d 00 00 00 02    	xor    ebx,DWORD PTR [ebp+0x2000000]
     2c3:	91                   	xchg   ecx,eax
     2c4:	04 08                	add    al,0x8
     2c6:	63 00                	arpl   WORD PTR [eax],ax
     2c8:	01 35 25 00 00 00    	add    DWORD PTR ds:0x25,esi
     2ce:	01 51 08             	add    DWORD PTR [ecx+0x8],edx
     2d1:	70 00                	jo     2d3 <sysEnter_Vector-0x12fd2d>
     2d3:	01 35 9d 00 00 00    	add    DWORD PTR ds:0x9d,esi
     2d9:	01 56 08             	add    DWORD PTR [esi+0x8],edx
     2dc:	73 00                	jae    2de <sysEnter_Vector-0x12fd22>
     2de:	01 35 9d 00 00 00    	add    DWORD PTR ds:0x9d,esi
     2e4:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
     2e7:	09 a3 00 00 00 03    	or     DWORD PTR [ebx+0x3000000],esp
     2ed:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
     2f0:	00 00                	add    BYTE PTR [eax],al
     2f2:	05 03 8c 72 00       	add    eax,0x728c03
     2f7:	9f                   	lahf   
     2f8:	09 34 01             	or     DWORD PTR [ecx+eax*1],esi
     2fb:	00 00                	add    BYTE PTR [eax],al
     2fd:	03 3a                	add    edi,DWORD PTR [edx]
     2ff:	56                   	push   esi
     300:	00 00                	add    BYTE PTR [eax],al
     302:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
     308:	9f                   	lahf   
     309:	09 7b 00             	or     DWORD PTR [ebx+0x0],edi
     30c:	00 00                	add    BYTE PTR [eax],al
     30e:	03 3b                	add    edi,DWORD PTR [ebx]
     310:	56                   	push   esi
     311:	00 00                	add    BYTE PTR [eax],al
     313:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
     319:	9f                   	lahf   
     31a:	09 7c 01 00          	or     DWORD PTR [ecx+eax*1+0x0],edi
     31e:	00 03                	add    BYTE PTR [ebx],al
     320:	3c 7a                	cmp    al,0x7a
     322:	00 00                	add    BYTE PTR [eax],al
     324:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
     32a:	9f                   	lahf   
     32b:	09 6e 00             	or     DWORD PTR [esi+0x0],ebp
     32e:	00 00                	add    BYTE PTR [eax],al
     330:	04 34                	add    al,0x34
     332:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
     333:	01 00                	add    DWORD PTR [eax],eax
     335:	00 05 03 84 72 00    	add    BYTE PTR ds:0x728403,al
     33b:	9f                   	lahf   
     33c:	05 04 6f 00 00       	add    eax,0x6f04
     341:	00 09                	add    BYTE PTR [ecx],cl
     343:	91                   	xchg   ecx,eax
     344:	00 00                	add    BYTE PTR [eax],al
     346:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
     34d:	05 03 80 72 00       	add    eax,0x728003
     352:	9f                   	lahf   
     353:	09 41 00             	or     DWORD PTR [ecx+0x0],eax
     356:	00 00                	add    BYTE PTR [eax],al
     358:	05 58 ce 01 00       	add    eax,0x1ce58
     35d:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
     363:	9f                   	lahf   
     364:	05 04 9d 00 00       	add    eax,0x9d04
     369:	00 00                	add    BYTE PTR [eax],al
     36b:	c5 01                	lds    eax,FWORD PTR [ecx]
     36d:	00 00                	add    BYTE PTR [eax],al
     36f:	04 00                	add    al,0x0
     371:	0e                   	push   cs
     372:	01 00                	add    DWORD PTR [eax],eax
     374:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     377:	ac                   	lods   al,BYTE PTR ds:[esi]
     378:	00 00                	add    BYTE PTR [eax],al
     37a:	00 0c cd 01 00 00 1e 	add    BYTE PTR [ecx*8+0x1e000001],cl
     381:	00 00                	add    BYTE PTR [eax],al
     383:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     386:	00 9f 2e 01 00 00    	add    BYTE PTR [edi+0x12e],bl
     38c:	ef                   	out    dx,eax
     38d:	01 00                	add    DWORD PTR [eax],eax
     38f:	00 02                	add    BYTE PTR [edx],al
     391:	01 06                	add    DWORD PTR [esi],eax
     393:	8c 00                	mov    WORD PTR [eax],es
     395:	00 00                	add    BYTE PTR [eax],al
     397:	02 01                	add    al,BYTE PTR [ecx]
     399:	06                   	push   es
     39a:	85 00                	test   DWORD PTR [eax],eax
     39c:	00 00                	add    BYTE PTR [eax],al
     39e:	02 02                	add    al,BYTE PTR [edx]
     3a0:	05 72 01 00 00       	add    eax,0x172
     3a5:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     3ac:	02 08                	add    cl,BYTE PTR [eax]
     3ae:	05 00 00 00 00       	add    eax,0x0
     3b3:	02 01                	add    al,BYTE PTR [ecx]
     3b5:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     3bb:	02 07                	add    al,BYTE PTR [edi]
     3bd:	19 01                	sbb    DWORD PTR [ecx],eax
     3bf:	00 00                	add    BYTE PTR [eax],al
     3c1:	04 0e                	add    al,0xe
     3c3:	00 00                	add    BYTE PTR [eax],al
     3c5:	00 02                	add    BYTE PTR [edx],al
     3c7:	34 61                	xor    al,0x61
     3c9:	00 00                	add    BYTE PTR [eax],al
     3cb:	00 02                	add    BYTE PTR [edx],al
     3cd:	04 07                	add    al,0x7
     3cf:	61                   	popa   
     3d0:	00 00                	add    BYTE PTR [eax],al
     3d2:	00 02                	add    BYTE PTR [edx],al
     3d4:	08 07                	or     BYTE PTR [edi],al
     3d6:	57                   	push   edi
     3d7:	00 00                	add    BYTE PTR [eax],al
     3d9:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     3e0:	56                   	push   esi
     3e1:	61                   	popa   
     3e2:	00 00                	add    BYTE PTR [eax],al
     3e4:	00 02                	add    BYTE PTR [edx],al
     3e6:	04 05                	add    al,0x5
     3e8:	05 00 00 00 02       	add    eax,0x2000000
     3ed:	0c 04                	or     al,0x4
     3ef:	66 01 00             	add    WORD PTR [eax],ax
     3f2:	00 02                	add    BYTE PTR [edx],al
     3f4:	01 02                	add    DWORD PTR [edx],eax
     3f6:	13 01                	adc    eax,DWORD PTR [ecx]
     3f8:	00 00                	add    BYTE PTR [eax],al
     3fa:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     3fd:	83 01 00             	add    DWORD PTR [ecx],0x0
     400:	00 02                	add    BYTE PTR [edx],al
     402:	04 07                	add    al,0x7
     404:	5c                   	pop    esp
     405:	00 00                	add    BYTE PTR [eax],al
     407:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     40d:	00 06                	add    BYTE PTR [esi],al
     40f:	09 02                	or     DWORD PTR [edx],eax
     411:	00 00                	add    BYTE PTR [eax],al
     413:	01 28                	add    DWORD PTR [eax],ebp
     415:	9d                   	popf   
     416:	00 00                	add    BYTE PTR [eax],al
     418:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     41b:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
     421:	01 9c f4 00 00 00 07 	add    DWORD PTR [esp+esi*8+0x7000000],ebx
     428:	73 00                	jae    42a <sysEnter_Vector-0x12fbd6>
     42a:	01 28                	add    DWORD PTR [eax],ebp
     42c:	9d                   	popf   
     42d:	00 00                	add    BYTE PTR [eax],al
     42f:	00 02                	add    BYTE PTR [edx],al
     431:	91                   	xchg   ecx,eax
     432:	00 08                	add    BYTE PTR [eax],cl
     434:	fc                   	cld    
     435:	01 00                	add    DWORD PTR [eax],eax
     437:	00 01                	add    BYTE PTR [ecx],al
     439:	28 9d 00 00 00 02    	sub    BYTE PTR [ebp+0x2000000],bl
     43f:	91                   	xchg   ecx,eax
     440:	04 09                	add    al,0x9
     442:	f6 01 00             	test   BYTE PTR [ecx],0x0
     445:	00 01                	add    BYTE PTR [ecx],al
     447:	2a 9d 00 00 00 05    	sub    bl,BYTE PTR [ebp+0x5000000]
     44d:	03 9c 72 00 9f 0a 63 	add    ebx,DWORD PTR [edx+esi*2+0x630a9f00]
     454:	68 00 01 2b 3a       	push   0x3a2b0100
     459:	00 00                	add    BYTE PTR [eax],al
     45b:	00 01                	add    BYTE PTR [ecx],al
     45d:	56                   	push   esi
     45e:	00 06                	add    BYTE PTR [esi],al
     460:	02 02                	add    al,BYTE PTR [edx]
     462:	00 00                	add    BYTE PTR [eax],al
     464:	01 3a                	add    DWORD PTR [edx],edi
     466:	9d                   	popf   
     467:	00 00                	add    BYTE PTR [eax],al
     469:	00 b3 01 00 9f 97    	add    BYTE PTR [ebx-0x6860ffff],dh
     46f:	00 00                	add    BYTE PTR [eax],al
     471:	00 01                	add    BYTE PTR [ecx],al
     473:	9c                   	pushf  
     474:	45                   	inc    ebp
     475:	01 00                	add    DWORD PTR [eax],eax
     477:	00 07                	add    BYTE PTR [edi],al
     479:	73 00                	jae    47b <sysEnter_Vector-0x12fb85>
     47b:	01 3a                	add    DWORD PTR [edx],edi
     47d:	9d                   	popf   
     47e:	00 00                	add    BYTE PTR [eax],al
     480:	00 02                	add    BYTE PTR [edx],al
     482:	91                   	xchg   ecx,eax
     483:	00 08                	add    BYTE PTR [eax],cl
     485:	fc                   	cld    
     486:	01 00                	add    DWORD PTR [eax],eax
     488:	00 01                	add    BYTE PTR [ecx],al
     48a:	3a 9d 00 00 00 02    	cmp    bl,BYTE PTR [ebp+0x2000000]
     490:	91                   	xchg   ecx,eax
     491:	04 09                	add    al,0x9
     493:	f6 01 00             	test   BYTE PTR [ecx],0x0
     496:	00 01                	add    BYTE PTR [ecx],al
     498:	3c 9d                	cmp    al,0x9d
     49a:	00 00                	add    BYTE PTR [eax],al
     49c:	00 05 03 a0 72 00    	add    BYTE PTR ds:0x72a003,al
     4a2:	9f                   	lahf   
     4a3:	0a 63 68             	or     ah,BYTE PTR [ebx+0x68]
     4a6:	00 01                	add    BYTE PTR [ecx],al
     4a8:	3d 3a 00 00 00       	cmp    eax,0x3a
     4ad:	01 56 00             	add    DWORD PTR [esi+0x0],edx
     4b0:	0b a3 00 00 00 03    	or     esp,DWORD PTR [ebx+0x3000000]
     4b6:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
     4b9:	00 00                	add    BYTE PTR [eax],al
     4bb:	05 03 8c 72 00       	add    eax,0x728c03
     4c0:	9f                   	lahf   
     4c1:	0b 34 01             	or     esi,DWORD PTR [ecx+eax*1]
     4c4:	00 00                	add    BYTE PTR [eax],al
     4c6:	03 3a                	add    edi,DWORD PTR [edx]
     4c8:	56                   	push   esi
     4c9:	00 00                	add    BYTE PTR [eax],al
     4cb:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
     4d1:	9f                   	lahf   
     4d2:	0b 7b 00             	or     edi,DWORD PTR [ebx+0x0]
     4d5:	00 00                	add    BYTE PTR [eax],al
     4d7:	03 3b                	add    edi,DWORD PTR [ebx]
     4d9:	56                   	push   esi
     4da:	00 00                	add    BYTE PTR [eax],al
     4dc:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
     4e2:	9f                   	lahf   
     4e3:	0b 7c 01 00          	or     edi,DWORD PTR [ecx+eax*1+0x0]
     4e7:	00 03                	add    BYTE PTR [ebx],al
     4e9:	3c 7a                	cmp    al,0x7a
     4eb:	00 00                	add    BYTE PTR [eax],al
     4ed:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
     4f3:	9f                   	lahf   
     4f4:	0b 6e 00             	or     ebp,DWORD PTR [esi+0x0]
     4f7:	00 00                	add    BYTE PTR [eax],al
     4f9:	04 34                	add    al,0x34
     4fb:	9a 01 00 00 05 03 84 	call   0x8403:0x5000001
     502:	72 00                	jb     504 <sysEnter_Vector-0x12fafc>
     504:	9f                   	lahf   
     505:	05 04 6f 00 00       	add    eax,0x6f04
     50a:	00 0b                	add    BYTE PTR [ebx],cl
     50c:	91                   	xchg   ecx,eax
     50d:	00 00                	add    BYTE PTR [eax],al
     50f:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
     516:	05 03 80 72 00       	add    eax,0x728003
     51b:	9f                   	lahf   
     51c:	0b 41 00             	or     eax,DWORD PTR [ecx+0x0]
     51f:	00 00                	add    BYTE PTR [eax],al
     521:	05 58 c2 01 00       	add    eax,0x1c258
     526:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
     52c:	9f                   	lahf   
     52d:	05 04 9d 00 00       	add    eax,0x9d04
     532:	00 00                	add    BYTE PTR [eax],al
     534:	45                   	inc    ebp
     535:	02 00                	add    al,BYTE PTR [eax]
     537:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     53a:	b7 01                	mov    bh,0x1
     53c:	00 00                	add    BYTE PTR [eax],al
     53e:	04 01                	add    al,0x1
     540:	ac                   	lods   al,BYTE PTR ds:[esi]
     541:	00 00                	add    BYTE PTR [eax],al
     543:	00 0c 11             	add    BYTE PTR [ecx+edx*1],cl
     546:	02 00                	add    al,BYTE PTR [eax]
     548:	00 1e                	add    BYTE PTR [esi],bl
     54a:	00 00                	add    BYTE PTR [eax],al
     54c:	00 4c 02 00          	add    BYTE PTR [edx+eax*1+0x0],cl
     550:	9f                   	lahf   
     551:	49                   	dec    ecx
     552:	02 00                	add    al,BYTE PTR [eax]
     554:	00 e1                	add    cl,ah
     556:	02 00                	add    al,BYTE PTR [eax]
     558:	00 02                	add    BYTE PTR [edx],al
     55a:	01 06                	add    DWORD PTR [esi],eax
     55c:	8c 00                	mov    WORD PTR [eax],es
     55e:	00 00                	add    BYTE PTR [eax],al
     560:	02 01                	add    al,BYTE PTR [ecx]
     562:	06                   	push   es
     563:	85 00                	test   DWORD PTR [eax],eax
     565:	00 00                	add    BYTE PTR [eax],al
     567:	02 02                	add    al,BYTE PTR [edx]
     569:	05 72 01 00 00       	add    eax,0x172
     56e:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     575:	02 08                	add    cl,BYTE PTR [eax]
     577:	05 00 00 00 00       	add    eax,0x0
     57c:	02 01                	add    al,BYTE PTR [ecx]
     57e:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     584:	02 07                	add    al,BYTE PTR [edi]
     586:	19 01                	sbb    DWORD PTR [ecx],eax
     588:	00 00                	add    BYTE PTR [eax],al
     58a:	04 0e                	add    al,0xe
     58c:	00 00                	add    BYTE PTR [eax],al
     58e:	00 02                	add    BYTE PTR [edx],al
     590:	34 61                	xor    al,0x61
     592:	00 00                	add    BYTE PTR [eax],al
     594:	00 02                	add    BYTE PTR [edx],al
     596:	04 07                	add    al,0x7
     598:	61                   	popa   
     599:	00 00                	add    BYTE PTR [eax],al
     59b:	00 02                	add    BYTE PTR [edx],al
     59d:	08 07                	or     BYTE PTR [edi],al
     59f:	57                   	push   edi
     5a0:	00 00                	add    BYTE PTR [eax],al
     5a2:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     5a9:	56                   	push   esi
     5aa:	61                   	popa   
     5ab:	00 00                	add    BYTE PTR [eax],al
     5ad:	00 02                	add    BYTE PTR [edx],al
     5af:	04 05                	add    al,0x5
     5b1:	05 00 00 00 02       	add    eax,0x2000000
     5b6:	0c 04                	or     al,0x4
     5b8:	66 01 00             	add    WORD PTR [eax],ax
     5bb:	00 02                	add    BYTE PTR [edx],al
     5bd:	01 02                	add    DWORD PTR [edx],eax
     5bf:	13 01                	adc    eax,DWORD PTR [ecx]
     5c1:	00 00                	add    BYTE PTR [eax],al
     5c3:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     5c6:	83 01 00             	add    DWORD PTR [ecx],0x0
     5c9:	00 02                	add    BYTE PTR [edx],al
     5cb:	04 07                	add    al,0x7
     5cd:	5c                   	pop    esp
     5ce:	00 00                	add    BYTE PTR [eax],al
     5d0:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     5d6:	00 06                	add    BYTE PTR [esi],al
     5d8:	28 02                	sub    BYTE PTR [edx],al
     5da:	00 00                	add    BYTE PTR [eax],al
     5dc:	01 09                	add    DWORD PTR [ecx],ecx
     5de:	4c                   	dec    esp
     5df:	02 00                	add    al,BYTE PTR [eax]
     5e1:	9f                   	lahf   
     5e2:	77 00                	ja     5e4 <sysEnter_Vector-0x12fa1c>
     5e4:	00 00                	add    BYTE PTR [eax],al
     5e6:	01 9c e9 00 00 00 07 	add    DWORD PTR [ecx+ebp*8+0x7000000],ebx
     5ed:	73 00                	jae    5ef <sysEnter_Vector-0x12fa11>
     5ef:	01 09                	add    DWORD PTR [ecx],ecx
     5f1:	9d                   	popf   
     5f2:	00 00                	add    BYTE PTR [eax],al
     5f4:	00 02                	add    BYTE PTR [edx],al
     5f6:	91                   	xchg   ecx,eax
     5f7:	00 08                	add    BYTE PTR [eax],cl
     5f9:	69 00 01 0b 3a 00    	imul   eax,DWORD PTR [eax],0x3a0b01
     5ff:	00 00                	add    BYTE PTR [eax],al
     601:	02 91 6c 08 6a 00    	add    dl,BYTE PTR [ecx+0x6a086c]
     607:	01 0b                	add    DWORD PTR [ebx],ecx
     609:	3a 00                	cmp    al,BYTE PTR [eax]
     60b:	00 00                	add    BYTE PTR [eax],al
     60d:	02 91 68 08 63 00    	add    dl,BYTE PTR [ecx+0x630868]
     613:	01 0c 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],ecx
     61a:	91                   	xchg   ecx,eax
     61b:	67 00 06 23 02       	add    BYTE PTR ds:0x223,al
     620:	00 00                	add    BYTE PTR [eax],al
     622:	01 15 c3 02 00 9f    	add    DWORD PTR ds:0x9f0002c3,edx
     628:	bb 00 00 00 01       	mov    ebx,0x1000000
     62d:	9c                   	pushf  
     62e:	31 01                	xor    DWORD PTR [ecx],eax
     630:	00 00                	add    BYTE PTR [eax],al
     632:	07                   	pop    es
     633:	6e                   	outs   dx,BYTE PTR ds:[esi]
     634:	00 01                	add    BYTE PTR [ecx],al
     636:	15 3a 00 00 00       	adc    eax,0x3a
     63b:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     641:	01 15 9d 00 00 00    	add    DWORD PTR ds:0x9d,edx
     647:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     64d:	01 17                	add    DWORD PTR [edi],edx
     64f:	3a 00                	cmp    al,BYTE PTR [eax]
     651:	00 00                	add    BYTE PTR [eax],al
     653:	02 91 6c 09 31 02    	add    dl,BYTE PTR [ecx+0x231096c]
     659:	00 00                	add    BYTE PTR [eax],al
     65b:	01 17                	add    DWORD PTR [edi],edx
     65d:	3a 00                	cmp    al,BYTE PTR [eax]
     65f:	00 00                	add    BYTE PTR [eax],al
     661:	02 91 68 00 06 1d    	add    dl,BYTE PTR [ecx+0x1d060068]
     667:	02 00                	add    al,BYTE PTR [eax]
     669:	00 01                	add    BYTE PTR [ecx],al
     66b:	25 7e 03 00 9f       	and    eax,0x9f00037e
     670:	bb 00 00 00 01       	mov    ebx,0x1000000
     675:	9c                   	pushf  
     676:	79 01                	jns    679 <sysEnter_Vector-0x12f987>
     678:	00 00                	add    BYTE PTR [eax],al
     67a:	07                   	pop    es
     67b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     67c:	00 01                	add    BYTE PTR [ecx],al
     67e:	25 3a 00 00 00       	and    eax,0x3a
     683:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     689:	01 25 9d 00 00 00    	add    DWORD PTR ds:0x9d,esp
     68f:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     695:	01 27                	add    DWORD PTR [edi],esp
     697:	3a 00                	cmp    al,BYTE PTR [eax]
     699:	00 00                	add    BYTE PTR [eax],al
     69b:	02 91 6c 09 31 02    	add    dl,BYTE PTR [ecx+0x231096c]
     6a1:	00 00                	add    BYTE PTR [eax],al
     6a3:	01 27                	add    DWORD PTR [edi],esp
     6a5:	3a 00                	cmp    al,BYTE PTR [eax]
     6a7:	00 00                	add    BYTE PTR [eax],al
     6a9:	02 91 68 00 0a d9    	add    dl,BYTE PTR [ecx-0x26f5ff98]
     6af:	0b 00                	or     eax,DWORD PTR [eax]
     6b1:	00 01                	add    BYTE PTR [ecx],al
     6b3:	36 3a 00             	cmp    al,BYTE PTR ss:[eax]
     6b6:	00 00                	add    BYTE PTR [eax],al
     6b8:	39 04 00             	cmp    DWORD PTR [eax+eax*1],eax
     6bb:	9f                   	lahf   
     6bc:	5c                   	pop    esp
     6bd:	00 00                	add    BYTE PTR [eax],al
     6bf:	00 01                	add    BYTE PTR [ecx],al
     6c1:	9c                   	pushf  
     6c2:	c5 01                	lds    eax,FWORD PTR [ecx]
     6c4:	00 00                	add    BYTE PTR [eax],al
     6c6:	07                   	pop    es
     6c7:	73 74                	jae    73d <sysEnter_Vector-0x12f8c3>
     6c9:	72 00                	jb     6cb <sysEnter_Vector-0x12f935>
     6cb:	01 36                	add    DWORD PTR [esi],esi
     6cd:	9d                   	popf   
     6ce:	00 00                	add    BYTE PTR [eax],al
     6d0:	00 02                	add    BYTE PTR [edx],al
     6d2:	91                   	xchg   ecx,eax
     6d3:	00 08                	add    BYTE PTR [eax],cl
     6d5:	72 65                	jb     73c <sysEnter_Vector-0x12f8c4>
     6d7:	73 00                	jae    6d9 <sysEnter_Vector-0x12f927>
     6d9:	01 38                	add    DWORD PTR [eax],edi
     6db:	3a 00                	cmp    al,BYTE PTR [eax]
     6dd:	00 00                	add    BYTE PTR [eax],al
     6df:	02 91 74 0b 50 04    	add    dl,BYTE PTR [ecx+0x4500b74]
     6e5:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
     6eb:	08 69 00             	or     BYTE PTR [ecx+0x0],ch
     6ee:	01 3c 3a             	add    DWORD PTR [edx+edi*1],edi
     6f1:	00 00                	add    BYTE PTR [eax],al
     6f3:	00 02                	add    BYTE PTR [edx],al
     6f5:	91                   	xchg   ecx,eax
     6f6:	70 00                	jo     6f8 <sysEnter_Vector-0x12f908>
     6f8:	00 0c a3             	add    BYTE PTR [ebx+eiz*4],cl
     6fb:	00 00                	add    BYTE PTR [eax],al
     6fd:	00 03                	add    BYTE PTR [ebx],al
     6ff:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
     702:	00 00                	add    BYTE PTR [eax],al
     704:	05 03 8c 72 00       	add    eax,0x728c03
     709:	9f                   	lahf   
     70a:	0c 34                	or     al,0x34
     70c:	01 00                	add    DWORD PTR [eax],eax
     70e:	00 03                	add    BYTE PTR [ebx],al
     710:	3a 56 00             	cmp    dl,BYTE PTR [esi+0x0]
     713:	00 00                	add    BYTE PTR [eax],al
     715:	05 03 90 72 00       	add    eax,0x729003
     71a:	9f                   	lahf   
     71b:	0c 7b                	or     al,0x7b
     71d:	00 00                	add    BYTE PTR [eax],al
     71f:	00 03                	add    BYTE PTR [ebx],al
     721:	3b 56 00             	cmp    edx,DWORD PTR [esi+0x0]
     724:	00 00                	add    BYTE PTR [eax],al
     726:	05 03 88 72 00       	add    eax,0x728803
     72b:	9f                   	lahf   
     72c:	0c 7c                	or     al,0x7c
     72e:	01 00                	add    DWORD PTR [eax],eax
     730:	00 03                	add    BYTE PTR [ebx],al
     732:	3c 7a                	cmp    al,0x7a
     734:	00 00                	add    BYTE PTR [eax],al
     736:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
     73c:	9f                   	lahf   
     73d:	0c 6e                	or     al,0x6e
     73f:	00 00                	add    BYTE PTR [eax],al
     741:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     744:	1a 02                	sbb    al,BYTE PTR [edx]
     746:	00 00                	add    BYTE PTR [eax],al
     748:	05 03 84 72 00       	add    eax,0x728403
     74d:	9f                   	lahf   
     74e:	05 04 6f 00 00       	add    eax,0x6f04
     753:	00 0c 91             	add    BYTE PTR [ecx+edx*4],cl
     756:	00 00                	add    BYTE PTR [eax],al
     758:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
     75f:	05 03 80 72 00       	add    eax,0x728003
     764:	9f                   	lahf   
     765:	0c 41                	or     al,0x41
     767:	00 00                	add    BYTE PTR [eax],al
     769:	00 05 58 42 02 00    	add    BYTE PTR ds:0x24258,al
     76f:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
     775:	9f                   	lahf   
     776:	05 04 9d 00 00       	add    eax,0x9d04
     77b:	00 00                	add    BYTE PTR [eax],al
     77d:	f9                   	stc    
     77e:	01 00                	add    DWORD PTR [eax],eax
     780:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     783:	74 02                	je     787 <sysEnter_Vector-0x12f879>
     785:	00 00                	add    BYTE PTR [eax],al
     787:	04 01                	add    al,0x1
     789:	ac                   	lods   al,BYTE PTR ds:[esi]
     78a:	00 00                	add    BYTE PTR [eax],al
     78c:	00 0c 36             	add    BYTE PTR [esi+esi*1],cl
     78f:	02 00                	add    al,BYTE PTR [eax]
     791:	00 1e                	add    BYTE PTR [esi],bl
     793:	00 00                	add    BYTE PTR [eax],al
     795:	00 98 04 00 9f 6e    	add    BYTE PTR [eax+0x6e9f0004],bl
     79b:	01 00                	add    DWORD PTR [eax],eax
     79d:	00 ff                	add    bh,bh
     79f:	03 00                	add    eax,DWORD PTR [eax]
     7a1:	00 02                	add    BYTE PTR [edx],al
     7a3:	01 06                	add    DWORD PTR [esi],eax
     7a5:	85 00                	test   DWORD PTR [eax],eax
     7a7:	00 00                	add    BYTE PTR [eax],al
     7a9:	02 02                	add    al,BYTE PTR [edx]
     7ab:	05 72 01 00 00       	add    eax,0x172
     7b0:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     7b7:	02 08                	add    cl,BYTE PTR [eax]
     7b9:	05 00 00 00 00       	add    eax,0x0
     7be:	02 01                	add    al,BYTE PTR [ecx]
     7c0:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     7c6:	02 07                	add    al,BYTE PTR [edi]
     7c8:	19 01                	sbb    DWORD PTR [ecx],eax
     7ca:	00 00                	add    BYTE PTR [eax],al
     7cc:	04 0e                	add    al,0xe
     7ce:	00 00                	add    BYTE PTR [eax],al
     7d0:	00 02                	add    BYTE PTR [edx],al
     7d2:	34 5a                	xor    al,0x5a
     7d4:	00 00                	add    BYTE PTR [eax],al
     7d6:	00 02                	add    BYTE PTR [edx],al
     7d8:	04 07                	add    al,0x7
     7da:	61                   	popa   
     7db:	00 00                	add    BYTE PTR [eax],al
     7dd:	00 02                	add    BYTE PTR [edx],al
     7df:	08 07                	or     BYTE PTR [edi],al
     7e1:	57                   	push   edi
     7e2:	00 00                	add    BYTE PTR [eax],al
     7e4:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     7eb:	56                   	push   esi
     7ec:	5a                   	pop    edx
     7ed:	00 00                	add    BYTE PTR [eax],al
     7ef:	00 02                	add    BYTE PTR [edx],al
     7f1:	04 05                	add    al,0x5
     7f3:	05 00 00 00 02       	add    eax,0x2000000
     7f8:	0c 04                	or     al,0x4
     7fa:	66 01 00             	add    WORD PTR [eax],ax
     7fd:	00 02                	add    BYTE PTR [edx],al
     7ff:	04 07                	add    al,0x7
     801:	83 01 00             	add    DWORD PTR [ecx],0x0
     804:	00 02                	add    BYTE PTR [edx],al
     806:	01 06                	add    DWORD PTR [esi],eax
     808:	8c 00                	mov    WORD PTR [eax],es
     80a:	00 00                	add    BYTE PTR [eax],al
     80c:	02 01                	add    al,BYTE PTR [ecx]
     80e:	02 13                	add    dl,BYTE PTR [ebx]
     810:	01 00                	add    DWORD PTR [eax],eax
     812:	00 02                	add    BYTE PTR [edx],al
     814:	04 07                	add    al,0x7
     816:	5c                   	pop    esp
     817:	00 00                	add    BYTE PTR [eax],al
     819:	00 05 04 88 00 00    	add    BYTE PTR ds:0x8804,al
     81f:	00 06                	add    BYTE PTR [esi],al
     821:	44                   	inc    esp
     822:	02 00                	add    al,BYTE PTR [eax]
     824:	00 01                	add    BYTE PTR [ecx],al
     826:	0d 98 04 00 9f       	or     eax,0x9f000498
     82b:	ba 00 00 00 01       	mov    edx,0x1000000
     830:	9c                   	pushf  
     831:	fb                   	sti    
     832:	00 00                	add    BYTE PTR [eax],al
     834:	00 07                	add    BYTE PTR [edi],al
     836:	78 00                	js     838 <sysEnter_Vector-0x12f7c8>
     838:	01 0d 33 00 00 00    	add    DWORD PTR ds:0x33,ecx
     83e:	02 91 00 07 79 00    	add    dl,BYTE PTR [ecx+0x790700]
     844:	01 0d 33 00 00 00    	add    DWORD PTR ds:0x33,ecx
     84a:	02 91 04 08 63 6d    	add    dl,BYTE PTR [ecx+0x6d630804]
     850:	64 00 01             	add    BYTE PTR fs:[ecx],al
     853:	0f fb 00             	psubq  mm0,QWORD PTR [eax]
     856:	00 00                	add    BYTE PTR [eax],al
     858:	02 91 66 09 76 02    	add    dl,BYTE PTR [ecx+0x2760966]
     85e:	00 00                	add    BYTE PTR [eax],al
     860:	01 10                	add    DWORD PTR [eax],edx
     862:	0b 01                	or     eax,DWORD PTR [ecx]
     864:	00 00                	add    BYTE PTR [eax],al
     866:	02 91 63 09 86 02    	add    dl,BYTE PTR [ecx+0x2860963]
     86c:	00 00                	add    BYTE PTR [eax],al
     86e:	01 10                	add    DWORD PTR [eax],edx
     870:	0b 01                	or     eax,DWORD PTR [ecx]
     872:	00 00                	add    BYTE PTR [eax],al
     874:	02 91 60 00 0a 88    	add    dl,BYTE PTR [ecx-0x77f5ffa0]
     87a:	00 00                	add    BYTE PTR [eax],al
     87c:	00 0b                	add    BYTE PTR [ebx],cl
     87e:	01 00                	add    DWORD PTR [eax],eax
     880:	00 0b                	add    BYTE PTR [ebx],cl
     882:	81 00 00 00 09 00    	add    DWORD PTR [eax],0x90000
     888:	0a 88 00 00 00 1b    	or     cl,BYTE PTR [eax+0x1b000000]
     88e:	01 00                	add    DWORD PTR [eax],eax
     890:	00 0b                	add    BYTE PTR [ebx],cl
     892:	81 00 00 00 02 00    	add    DWORD PTR [eax],0x20000
     898:	0c 4d                	or     al,0x4d
     89a:	02 00                	add    al,BYTE PTR [eax]
     89c:	00 01                	add    BYTE PTR [ecx],al
     89e:	1d 52 05 00 9f       	sbb    eax,0x9f000552
     8a3:	5a                   	pop    edx
     8a4:	00 00                	add    BYTE PTR [eax],al
     8a6:	00 01                	add    BYTE PTR [ecx],al
     8a8:	9c                   	pushf  
     8a9:	3f                   	aas    
     8aa:	01 00                	add    DWORD PTR [eax],eax
     8ac:	00 08                	add    BYTE PTR [eax],cl
     8ae:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     8b1:	00 01                	add    BYTE PTR [ecx],al
     8b3:	1f                   	pop    ds
     8b4:	fb                   	sti    
     8b5:	00 00                	add    BYTE PTR [eax],al
     8b7:	00 02                	add    BYTE PTR [edx],al
     8b9:	91                   	xchg   ecx,eax
     8ba:	66                   	data16
     8bb:	00 0c 60             	add    BYTE PTR [eax+eiz*2],cl
     8be:	02 00                	add    al,BYTE PTR [eax]
     8c0:	00 01                	add    BYTE PTR [ecx],al
     8c2:	27                   	daa    
     8c3:	ac                   	lods   al,BYTE PTR ds:[esi]
     8c4:	05 00 9f 5a 00       	add    eax,0x5a9f00
     8c9:	00 00                	add    BYTE PTR [eax],al
     8cb:	01 9c 63 01 00 00 08 	add    DWORD PTR [ebx+eiz*2+0x8000001],ebx
     8d2:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     8d5:	00 01                	add    BYTE PTR [ecx],al
     8d7:	29 fb                	sub    ebx,edi
     8d9:	00 00                	add    BYTE PTR [eax],al
     8db:	00 02                	add    BYTE PTR [edx],al
     8dd:	91                   	xchg   ecx,eax
     8de:	66                   	data16
     8df:	00 0d 6e 00 00 00    	add    BYTE PTR ds:0x6e,cl
     8e5:	03 34 74             	add    esi,DWORD PTR [esp+esi*2]
     8e8:	01 00                	add    DWORD PTR [eax],eax
     8ea:	00 05 03 84 72 00    	add    BYTE PTR ds:0x728403,al
     8f0:	9f                   	lahf   
     8f1:	05 04 68 00 00       	add    eax,0x6804
     8f6:	00 0d 91 00 00 00    	add    BYTE PTR ds:0x91,cl
     8fc:	03 35 4f 00 00 00    	add    esi,DWORD PTR ds:0x4f
     902:	05 03 80 72 00       	add    eax,0x728003
     907:	9f                   	lahf   
     908:	0d a3 00 00 00       	or     eax,0xa3
     90d:	04 39                	add    al,0x39
     90f:	4f                   	dec    edi
     910:	00 00                	add    BYTE PTR [eax],al
     912:	00 05 03 8c 72 00    	add    BYTE PTR ds:0x728c03,al
     918:	9f                   	lahf   
     919:	0d 34 01 00 00       	or     eax,0x134
     91e:	04 3a                	add    al,0x3a
     920:	4f                   	dec    edi
     921:	00 00                	add    BYTE PTR [eax],al
     923:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
     929:	9f                   	lahf   
     92a:	0d 7b 00 00 00       	or     eax,0x7b
     92f:	04 3b                	add    al,0x3b
     931:	4f                   	dec    edi
     932:	00 00                	add    BYTE PTR [eax],al
     934:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
     93a:	9f                   	lahf   
     93b:	0d 7c 01 00 00       	or     eax,0x17c
     940:	04 3c                	add    al,0x3c
     942:	73 00                	jae    944 <sysEnter_Vector-0x12f6bc>
     944:	00 00                	add    BYTE PTR [eax],al
     946:	05 03 98 72 00       	add    eax,0x729803
     94b:	9f                   	lahf   
     94c:	0d 41 00 00 00       	or     eax,0x41
     951:	05 58 e0 01 00       	add    eax,0x1e058
     956:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
     95c:	9f                   	lahf   
     95d:	05 04 9d 00 00       	add    eax,0x9d04
     962:	00 0d 7b 02 00 00    	add    BYTE PTR ds:0x27b,cl
     968:	01 0b                	add    DWORD PTR [ebx],ecx
     96a:	f7 01 00 00 05 03    	test   DWORD PTR [ecx],0x3050000
     970:	80 69 00 9f          	sub    BYTE PTR [ecx+0x0],0x9f
     974:	0e                   	push   cs
     975:	0b 01                	or     eax,DWORD PTR [ecx]
     977:	00 00                	add    BYTE PTR [eax],al
     979:	00 86 03 00 00 04    	add    BYTE PTR [esi+0x4000003],al
     97f:	00 3d 03 00 00 04    	add    BYTE PTR ds:0x4000003,bh
     985:	01 ac 00 00 00 0c c4 	add    DWORD PTR [eax+eax*1-0x3bf40000],ebp
     98c:	02 00                	add    al,BYTE PTR [eax]
     98e:	00 1e                	add    BYTE PTR [esi],bl
     990:	00 00                	add    BYTE PTR [eax],al
     992:	00 08                	add    BYTE PTR [eax],cl
     994:	06                   	push   es
     995:	00 9f dd 02 00 00    	add    BYTE PTR [edi+0x2dd],bl
     99b:	db 04 00             	fild   DWORD PTR [eax+eax*1]
     99e:	00 02                	add    BYTE PTR [edx],al
     9a0:	01 06                	add    DWORD PTR [esi],eax
     9a2:	8c 00                	mov    WORD PTR [eax],es
     9a4:	00 00                	add    BYTE PTR [eax],al
     9a6:	02 01                	add    al,BYTE PTR [ecx]
     9a8:	06                   	push   es
     9a9:	85 00                	test   DWORD PTR [eax],eax
     9ab:	00 00                	add    BYTE PTR [eax],al
     9ad:	02 02                	add    al,BYTE PTR [edx]
     9af:	05 72 01 00 00       	add    eax,0x172
     9b4:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     9bb:	02 08                	add    cl,BYTE PTR [eax]
     9bd:	05 00 00 00 00       	add    eax,0x0
     9c2:	02 01                	add    al,BYTE PTR [ecx]
     9c4:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     9ca:	02 07                	add    al,BYTE PTR [edi]
     9cc:	19 01                	sbb    DWORD PTR [ecx],eax
     9ce:	00 00                	add    BYTE PTR [eax],al
     9d0:	04 0e                	add    al,0xe
     9d2:	00 00                	add    BYTE PTR [eax],al
     9d4:	00 02                	add    BYTE PTR [edx],al
     9d6:	34 61                	xor    al,0x61
     9d8:	00 00                	add    BYTE PTR [eax],al
     9da:	00 02                	add    BYTE PTR [edx],al
     9dc:	04 07                	add    al,0x7
     9de:	61                   	popa   
     9df:	00 00                	add    BYTE PTR [eax],al
     9e1:	00 02                	add    BYTE PTR [edx],al
     9e3:	08 07                	or     BYTE PTR [edi],al
     9e5:	57                   	push   edi
     9e6:	00 00                	add    BYTE PTR [eax],al
     9e8:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     9ef:	56                   	push   esi
     9f0:	61                   	popa   
     9f1:	00 00                	add    BYTE PTR [eax],al
     9f3:	00 04 bd 02 00 00 03 	add    BYTE PTR [edi*4+0x3000002],al
     9fa:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
     9fd:	00 00                	add    BYTE PTR [eax],al
     9ff:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     a06:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     a09:	66 01 00             	add    WORD PTR [eax],ax
     a0c:	00 02                	add    BYTE PTR [edx],al
     a0e:	01 02                	add    DWORD PTR [edx],eax
     a10:	13 01                	adc    eax,DWORD PTR [ecx]
     a12:	00 00                	add    BYTE PTR [eax],al
     a14:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     a17:	83 01 00             	add    DWORD PTR [ecx],0x0
     a1a:	00 05 d1 03 00 00    	add    BYTE PTR ds:0x3d1,al
     a20:	04 61                	add    al,0x61
     a22:	00 00                	add    BYTE PTR [eax],al
     a24:	00 07                	add    BYTE PTR [edi],al
     a26:	15 95 01 00 00       	adc    eax,0x195
     a2b:	06                   	push   es
     a2c:	71 03                	jno    a31 <sysEnter_Vector-0x12f5cf>
     a2e:	00 00                	add    BYTE PTR [eax],al
     a30:	00 06                	add    BYTE PTR [esi],al
     a32:	dd 04 00             	fld    QWORD PTR [eax+eax*1]
     a35:	00 01                	add    BYTE PTR [ecx],al
     a37:	06                   	push   es
     a38:	d6                   	(bad)  
     a39:	02 00                	add    al,BYTE PTR [eax]
     a3b:	00 02                	add    BYTE PTR [edx],al
     a3d:	06                   	push   es
     a3e:	cf                   	iret   
     a3f:	04 00                	add    al,0x0
     a41:	00 03                	add    BYTE PTR [ebx],al
     a43:	06                   	push   es
     a44:	08 03                	or     BYTE PTR [ebx],al
     a46:	00 00                	add    BYTE PTR [eax],al
     a48:	04 06                	add    al,0x6
     a4a:	f3 02 00             	repz add al,BYTE PTR [eax]
     a4d:	00 05 06 64 03 00    	add    BYTE PTR ds:0x36406,al
     a53:	00 0a                	add    BYTE PTR [edx],cl
     a55:	06                   	push   es
     a56:	45                   	inc    ebp
     a57:	04 00                	add    al,0x0
     a59:	00 0b                	add    BYTE PTR [ebx],cl
     a5b:	06                   	push   es
     a5c:	81 03 00 00 0c 06    	add    DWORD PTR [ebx],0x60c0000
     a62:	b4 04                	mov    ah,0x4
     a64:	00 00                	add    BYTE PTR [eax],al
     a66:	0d 06 52 04 00       	or     eax,0x45206
     a6b:	00 0e                	add    BYTE PTR [esi],cl
     a6d:	06                   	push   es
     a6e:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     a6f:	04 00                	add    al,0x0
     a71:	00 0f                	add    BYTE PTR [edi],cl
     a73:	06                   	push   es
     a74:	3f                   	aas    
     a75:	03 00                	add    eax,DWORD PTR [eax]
     a77:	00 10                	add    BYTE PTR [eax],dl
     a79:	06                   	push   es
     a7a:	5f                   	pop    edi
     a7b:	04 00                	add    al,0x0
     a7d:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
     a80:	f1                   	icebp  
     a81:	03 00                	add    eax,DWORD PTR [eax]
     a83:	00 50 06             	add    BYTE PTR [eax+0x6],dl
     a86:	8a 04 00             	mov    al,BYTE PTR [eax+eax*1]
     a89:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
     a8c:	8b 02                	mov    eax,DWORD PTR [edx]
     a8e:	00 00                	add    BYTE PTR [eax],al
     a90:	61                   	popa   
     a91:	06                   	push   es
     a92:	0e                   	push   cs
     a93:	04 00                	add    al,0x0
     a95:	00 97 07 a6 03 00    	add    BYTE PTR [edi+0x3a607],dl
     a9b:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     a9e:	07                   	pop    es
     a9f:	7d 04                	jge    aa5 <sysEnter_Vector-0x12f55b>
     aa1:	00 00                	add    BYTE PTR [eax],al
     aa3:	64 01 07             	add    DWORD PTR fs:[edi],eax
     aa6:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
     aa9:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     aac:	07                   	pop    es
     aad:	af                   	scas   eax,DWORD PTR es:[edi]
     aae:	02 00                	add    al,BYTE PTR [eax]
     ab0:	00 66 01             	add    BYTE PTR [esi+0x1],ah
     ab3:	07                   	pop    es
     ab4:	2a 03                	sub    al,BYTE PTR [ebx]
     ab6:	00 00                	add    BYTE PTR [eax],al
     ab8:	67 01 07             	add    DWORD PTR [bx],eax
     abb:	1d 03 00 00 68       	sbb    eax,0x68000003
     ac0:	01 07                	add    DWORD PTR [edi],eax
     ac2:	f7 04 00 00 69 01 07 	test   DWORD PTR [eax+eax*1],0x7016900
     ac9:	9e                   	sahf   
     aca:	02 00                	add    al,BYTE PTR [eax]
     acc:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     acf:	07                   	pop    es
     ad0:	e3 02                	jecxz  ad4 <sysEnter_Vector-0x12f52c>
     ad2:	00 00                	add    BYTE PTR [eax],al
     ad4:	71 01                	jno    ad7 <sysEnter_Vector-0x12f529>
     ad6:	07                   	pop    es
     ad7:	c1 04 00 00          	rol    DWORD PTR [eax+eax*1],0x0
     adb:	00 03                	add    BYTE PTR [ebx],al
     add:	07                   	pop    es
     ade:	6e                   	outs   dx,BYTE PTR ds:[esi]
     adf:	04 00                	add    al,0x0
     ae1:	00 01                	add    BYTE PTR [ecx],al
     ae3:	03 07                	add    eax,DWORD PTR [edi]
     ae5:	bd 03 00 00 02       	mov    ebp,0x2000003
     aea:	03 07                	add    eax,DWORD PTR [edi]
     aec:	96                   	xchg   esi,eax
     aed:	03 00                	add    eax,DWORD PTR [eax]
     aef:	00 03                	add    BYTE PTR [ebx],al
     af1:	03 07                	add    eax,DWORD PTR [edi]
     af3:	34 04                	xor    al,0x4
     af5:	00 00                	add    BYTE PTR [eax],al
     af7:	04 03                	add    al,0x3
     af9:	07                   	pop    es
     afa:	97                   	xchg   edi,eax
     afb:	04 00                	add    al,0x0
     afd:	00 05 03 07 e2 03    	add    BYTE PTR ds:0x3e20703,al
     b03:	00 00                	add    BYTE PTR [eax],al
     b05:	06                   	push   es
     b06:	03 07                	add    eax,DWORD PTR [edi]
     b08:	52                   	push   edx
     b09:	03 00                	add    eax,DWORD PTR [eax]
     b0b:	00 00                	add    BYTE PTR [eax],al
     b0d:	09 00                	or     DWORD PTR [eax],eax
     b0f:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     b12:	5c                   	pop    esp
     b13:	00 00                	add    BYTE PTR [eax],al
     b15:	00 08                	add    BYTE PTR [eax],cl
     b17:	04 25                	add    al,0x25
     b19:	00 00                	add    BYTE PTR [eax],al
     b1b:	00 09                	add    BYTE PTR [ecx],cl
     b1d:	15 03 00 00 01       	adc    eax,0x1000003
     b22:	09 3a                	or     DWORD PTR [edx],edi
     b24:	00 00                	add    BYTE PTR [eax],al
     b26:	00 08                	add    BYTE PTR [eax],cl
     b28:	06                   	push   es
     b29:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
     b2f:	01 9c f0 01 00 00 0a 	add    DWORD PTR [eax+esi*8+0xa000001],ebx
     b36:	8e 03                	mov    es,WORD PTR [ebx]
     b38:	00 00                	add    BYTE PTR [eax],al
     b3a:	01 09                	add    DWORD PTR [ecx],ecx
     b3c:	9c                   	pushf  
     b3d:	01 00                	add    DWORD PTR [eax],eax
     b3f:	00 02                	add    BYTE PTR [edx],al
     b41:	91                   	xchg   ecx,eax
     b42:	00 0a                	add    BYTE PTR [edx],cl
     b44:	4c                   	dec    esp
     b45:	03 00                	add    eax,DWORD PTR [eax]
     b47:	00 01                	add    BYTE PTR [ecx],al
     b49:	09 9c 01 00 00 02 91 	or     DWORD PTR [ecx+eax*1-0x6efe0000],ebx
     b50:	04 0b                	add    al,0xb
     b52:	1a 06                	sbb    al,BYTE PTR [esi]
     b54:	00 9f 8e 00 00 00    	add    BYTE PTR [edi+0x8e],bl
     b5a:	0c 63                	or     al,0x63
     b5c:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b5d:	74 00                	je     b5f <sysEnter_Vector-0x12f4a1>
     b5f:	01 0b                	add    DWORD PTR [ebx],ecx
     b61:	3a 00                	cmp    al,BYTE PTR [eax]
     b63:	00 00                	add    BYTE PTR [eax],al
     b65:	02 91 6c 00 00 09    	add    dl,BYTE PTR [ecx+0x900006c]
     b6b:	db 03                	fild   DWORD PTR [ebx]
     b6d:	00 00                	add    BYTE PTR [eax],al
     b6f:	01 14 3a             	add    DWORD PTR [edx+edi*1],edx
     b72:	00 00                	add    BYTE PTR [eax],al
     b74:	00 b2 06 00 9f 23    	add    BYTE PTR [edx+0x239f0006],dh
     b7a:	00 00                	add    BYTE PTR [eax],al
     b7c:	00 01                	add    BYTE PTR [ecx],al
     b7e:	9c                   	pushf  
     b7f:	26 02 00             	add    al,BYTE PTR es:[eax]
     b82:	00 0a                	add    BYTE PTR [edx],cl
     b84:	8e 03                	mov    es,WORD PTR [ebx]
     b86:	00 00                	add    BYTE PTR [eax],al
     b88:	01 14 9c             	add    DWORD PTR [esp+ebx*4],edx
     b8b:	01 00                	add    DWORD PTR [eax],eax
     b8d:	00 02                	add    BYTE PTR [edx],al
     b8f:	91                   	xchg   ecx,eax
     b90:	00 0a                	add    BYTE PTR [edx],cl
     b92:	4c                   	dec    esp
     b93:	03 00                	add    eax,DWORD PTR [eax]
     b95:	00 01                	add    BYTE PTR [ecx],al
     b97:	14 9c                	adc    al,0x9c
     b99:	01 00                	add    DWORD PTR [eax],eax
     b9b:	00 02                	add    BYTE PTR [edx],al
     b9d:	91                   	xchg   ecx,eax
     b9e:	04 00                	add    al,0x0
     ba0:	0d 01 03 00 00       	or     eax,0x301
     ba5:	01 19                	add    DWORD PTR [ecx],ebx
     ba7:	d5 06                	aad    0x6
     ba9:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
     baf:	01 9c 9a 02 00 00 0a 	add    DWORD PTR [edx+ebx*4+0xa000002],ebx
     bb6:	8e 03                	mov    es,WORD PTR [ebx]
     bb8:	00 00                	add    BYTE PTR [eax],al
     bba:	01 19                	add    DWORD PTR [ecx],ebx
     bbc:	9c                   	pushf  
     bbd:	01 00                	add    DWORD PTR [eax],eax
     bbf:	00 02                	add    BYTE PTR [edx],al
     bc1:	91                   	xchg   ecx,eax
     bc2:	00 0a                	add    BYTE PTR [edx],cl
     bc4:	4c                   	dec    esp
     bc5:	03 00                	add    eax,DWORD PTR [eax]
     bc7:	00 01                	add    BYTE PTR [ecx],al
     bc9:	19 9c 01 00 00 02 91 	sbb    DWORD PTR [ecx+eax*1-0x6efe0000],ebx
     bd0:	04 0e                	add    al,0xe
     bd2:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     bd5:	00 01                	add    BYTE PTR [ecx],al
     bd7:	1b 56 00             	sbb    edx,DWORD PTR [esi+0x0]
     bda:	00 00                	add    BYTE PTR [eax],al
     bdc:	02 91 6c 0f ee 06    	add    dl,BYTE PTR [ecx+0x6ee0f6c]
     be2:	00 9f eb 00 00 00    	add    BYTE PTR [edi+0xeb],bl
     be8:	81 02 00 00 0c 63    	add    DWORD PTR [edx],0x630c0000
     bee:	6e                   	outs   dx,BYTE PTR ds:[esi]
     bef:	74 00                	je     bf1 <sysEnter_Vector-0x12f40f>
     bf1:	01 1d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebx
     bf7:	02 91 68 00 0b d9    	add    dl,BYTE PTR [ecx-0x26f4ff98]
     bfd:	07                   	pop    es
     bfe:	00 9f b8 00 00 00    	add    BYTE PTR [edi+0xb8],bl
     c04:	0c 63                	or     al,0x63
     c06:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c07:	74 00                	je     c09 <sysEnter_Vector-0x12f3f7>
     c09:	01 29                	add    DWORD PTR [ecx],ebp
     c0b:	3a 00                	cmp    al,BYTE PTR [eax]
     c0d:	00 00                	add    BYTE PTR [eax],al
     c0f:	02 91 64 00 00 09    	add    dl,BYTE PTR [ecx+0x9000064]
     c15:	c9                   	leave  
     c16:	03 00                	add    eax,DWORD PTR [eax]
     c18:	00 01                	add    BYTE PTR [ecx],al
     c1a:	36                   	ss
     c1b:	9c                   	pushf  
     c1c:	01 00                	add    DWORD PTR [eax],eax
     c1e:	00 96 08 00 9f 2c    	add    BYTE PTR [esi+0x2c9f0008],dl
     c24:	00 00                	add    BYTE PTR [eax],al
     c26:	00 01                	add    BYTE PTR [ecx],al
     c28:	9c                   	pushf  
     c29:	d0 02                	rol    BYTE PTR [edx],1
     c2b:	00 00                	add    BYTE PTR [eax],al
     c2d:	10 62 75             	adc    BYTE PTR [edx+0x75],ah
     c30:	66                   	data16
     c31:	00 01                	add    BYTE PTR [ecx],al
     c33:	36                   	ss
     c34:	9c                   	pushf  
     c35:	01 00                	add    DWORD PTR [eax],eax
     c37:	00 02                	add    BYTE PTR [edx],al
     c39:	91                   	xchg   ecx,eax
     c3a:	00 0a                	add    BYTE PTR [edx],cl
     c3c:	ba 06 00 00 01       	mov    edx,0x1000006
     c41:	36                   	ss
     c42:	7a 00                	jp     c44 <sysEnter_Vector-0x12f3bc>
     c44:	00 00                	add    BYTE PTR [eax],al
     c46:	02 91 04 00 09 f0    	add    dl,BYTE PTR [ecx-0xff6fffc]
     c4c:	04 00                	add    al,0x0
     c4e:	00 01                	add    BYTE PTR [ecx],al
     c50:	3c 9c                	cmp    al,0x9c
     c52:	01 00                	add    DWORD PTR [eax],eax
     c54:	00 c2                	add    dl,al
     c56:	08 00                	or     BYTE PTR [eax],al
     c58:	9f                   	lahf   
     c59:	23 00                	and    eax,DWORD PTR [eax]
     c5b:	00 00                	add    BYTE PTR [eax],al
     c5d:	01 9c 06 03 00 00 10 	add    DWORD PTR [esi+eax*1+0x10000003],ebx
     c64:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     c67:	00 01                	add    BYTE PTR [ecx],al
     c69:	3c 9c                	cmp    al,0x9c
     c6b:	01 00                	add    DWORD PTR [eax],eax
     c6d:	00 02                	add    BYTE PTR [edx],al
     c6f:	91                   	xchg   ecx,eax
     c70:	00 0a                	add    BYTE PTR [edx],cl
     c72:	ba 06 00 00 01       	mov    edx,0x1000006
     c77:	3c 7a                	cmp    al,0x7a
     c79:	00 00                	add    BYTE PTR [eax],al
     c7b:	00 02                	add    BYTE PTR [edx],al
     c7d:	91                   	xchg   ecx,eax
     c7e:	04 00                	add    al,0x0
     c80:	11 a3 00 00 00 04    	adc    DWORD PTR [ebx+0x4000000],esp
     c86:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
     c89:	00 00                	add    BYTE PTR [eax],al
     c8b:	05 03 8c 72 00       	add    eax,0x728c03
     c90:	9f                   	lahf   
     c91:	11 34 01             	adc    DWORD PTR [ecx+eax*1],esi
     c94:	00 00                	add    BYTE PTR [eax],al
     c96:	04 3a                	add    al,0x3a
     c98:	56                   	push   esi
     c99:	00 00                	add    BYTE PTR [eax],al
     c9b:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
     ca1:	9f                   	lahf   
     ca2:	11 7b 00             	adc    DWORD PTR [ebx+0x0],edi
     ca5:	00 00                	add    BYTE PTR [eax],al
     ca7:	04 3b                	add    al,0x3b
     ca9:	56                   	push   esi
     caa:	00 00                	add    BYTE PTR [eax],al
     cac:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
     cb2:	9f                   	lahf   
     cb3:	11 7c 01 00          	adc    DWORD PTR [ecx+eax*1+0x0],edi
     cb7:	00 04 3c             	add    BYTE PTR [esp+edi*1],al
     cba:	85 00                	test   DWORD PTR [eax],eax
     cbc:	00 00                	add    BYTE PTR [eax],al
     cbe:	05 03 98 72 00       	add    eax,0x729803
     cc3:	9f                   	lahf   
     cc4:	11 6e 00             	adc    DWORD PTR [esi+0x0],ebp
     cc7:	00 00                	add    BYTE PTR [eax],al
     cc9:	05 34 5b 03 00       	add    eax,0x35b34
     cce:	00 05 03 84 72 00    	add    BYTE PTR ds:0x728403,al
     cd4:	9f                   	lahf   
     cd5:	08 04 6f             	or     BYTE PTR [edi+ebp*2],al
     cd8:	00 00                	add    BYTE PTR [eax],al
     cda:	00 11                	add    BYTE PTR [ecx],dl
     cdc:	91                   	xchg   ecx,eax
     cdd:	00 00                	add    BYTE PTR [eax],al
     cdf:	00 05 35 56 00 00    	add    BYTE PTR ds:0x5635,al
     ce5:	00 05 03 80 72 00    	add    BYTE PTR ds:0x728003,al
     ceb:	9f                   	lahf   
     cec:	11 41 00             	adc    DWORD PTR [ecx+0x0],eax
     cef:	00 00                	add    BYTE PTR [eax],al
     cf1:	06                   	push   es
     cf2:	58                   	pop    eax
     cf3:	83 03 00             	add    DWORD PTR [ebx],0x0
     cf6:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
     cfc:	9f                   	lahf   
     cfd:	08 04 9c             	or     BYTE PTR [esp+ebx*4],al
     d00:	01 00                	add    DWORD PTR [eax],eax
     d02:	00 00                	add    BYTE PTR [eax],al
     d04:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     d05:	08 00                	or     BYTE PTR [eax],al
     d07:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     d0a:	37                   	aaa    
     d0b:	04 00                	add    al,0x0
     d0d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     d10:	ac                   	lods   al,BYTE PTR ds:[esi]
     d11:	00 00                	add    BYTE PTR [eax],al
     d13:	00 0c a4             	add    BYTE PTR [esp+eiz*4],cl
     d16:	06                   	push   es
     d17:	00 00                	add    BYTE PTR [eax],al
     d19:	1e                   	push   ds
     d1a:	00 00                	add    BYTE PTR [eax],al
     d1c:	00 e8                	add    al,ch
     d1e:	08 00                	or     BYTE PTR [eax],al
     d20:	9f                   	lahf   
     d21:	f2 07                	repnz pop es
     d23:	00 00                	add    BYTE PTR [eax],al
     d25:	43                   	inc    ebx
     d26:	06                   	push   es
     d27:	00 00                	add    BYTE PTR [eax],al
     d29:	02 01                	add    al,BYTE PTR [ecx]
     d2b:	06                   	push   es
     d2c:	8c 00                	mov    WORD PTR [eax],es
     d2e:	00 00                	add    BYTE PTR [eax],al
     d30:	02 01                	add    al,BYTE PTR [ecx]
     d32:	06                   	push   es
     d33:	85 00                	test   DWORD PTR [eax],eax
     d35:	00 00                	add    BYTE PTR [eax],al
     d37:	02 02                	add    al,BYTE PTR [edx]
     d39:	05 72 01 00 00       	add    eax,0x172
     d3e:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     d45:	02 08                	add    cl,BYTE PTR [eax]
     d47:	05 00 00 00 00       	add    eax,0x0
     d4c:	04 af                	add    al,0xaf
     d4e:	06                   	push   es
     d4f:	00 00                	add    BYTE PTR [eax],al
     d51:	02 2e                	add    ch,BYTE PTR [esi]
     d53:	53                   	push   ebx
     d54:	00 00                	add    BYTE PTR [eax],al
     d56:	00 02                	add    BYTE PTR [edx],al
     d58:	01 08                	add    DWORD PTR [eax],ecx
     d5a:	83 00 00             	add    DWORD PTR [eax],0x0
     d5d:	00 04 9f             	add    BYTE PTR [edi+ebx*4],al
     d60:	05 00 00 02 31       	add    eax,0x31020000
     d65:	65 00 00             	add    BYTE PTR gs:[eax],al
     d68:	00 02                	add    BYTE PTR [edx],al
     d6a:	02 07                	add    al,BYTE PTR [edi]
     d6c:	19 01                	sbb    DWORD PTR [ecx],eax
     d6e:	00 00                	add    BYTE PTR [eax],al
     d70:	04 0e                	add    al,0xe
     d72:	00 00                	add    BYTE PTR [eax],al
     d74:	00 02                	add    BYTE PTR [edx],al
     d76:	34 77                	xor    al,0x77
     d78:	00 00                	add    BYTE PTR [eax],al
     d7a:	00 02                	add    BYTE PTR [edx],al
     d7c:	04 07                	add    al,0x7
     d7e:	61                   	popa   
     d7f:	00 00                	add    BYTE PTR [eax],al
     d81:	00 02                	add    BYTE PTR [edx],al
     d83:	08 07                	or     BYTE PTR [edi],al
     d85:	57                   	push   edi
     d86:	00 00                	add    BYTE PTR [eax],al
     d88:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     d8f:	56                   	push   esi
     d90:	77 00                	ja     d92 <sysEnter_Vector-0x12f26e>
     d92:	00 00                	add    BYTE PTR [eax],al
     d94:	04 bd                	add    al,0xbd
     d96:	02 00                	add    al,BYTE PTR [eax]
     d98:	00 03                	add    BYTE PTR [ebx],al
     d9a:	d8 77 00             	fdiv   DWORD PTR [edi+0x0]
     d9d:	00 00                	add    BYTE PTR [eax],al
     d9f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     da6:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     da9:	66 01 00             	add    WORD PTR [eax],ax
     dac:	00 05 04 af 00 00    	add    BYTE PTR ds:0xaf04,al
     db2:	00 06                	add    BYTE PTR [esi],al
     db4:	25 00 00 00 02       	and    eax,0x2000000
     db9:	01 02                	add    DWORD PTR [edx],eax
     dbb:	13 01                	adc    eax,DWORD PTR [ecx]
     dbd:	00 00                	add    BYTE PTR [eax],al
     dbf:	07                   	pop    es
     dc0:	6b 06 00             	imul   eax,DWORD PTR [esi],0x0
     dc3:	00 17                	add    BYTE PTR [edi],dl
     dc5:	01 04 1e             	add    DWORD PTR [esi+ebx*1],eax
     dc8:	3d 01 00 00 08       	cmp    eax,0x8000001
     dcd:	3a 06                	cmp    al,BYTE PTR [esi]
     dcf:	00 00                	add    BYTE PTR [eax],al
     dd1:	04 20                	add    al,0x20
     dd3:	3d 01 00 00 00       	cmp    eax,0x1
     dd8:	09 64 06 00          	or     DWORD PTR [esi+eax*1+0x0],esp
     ddc:	00 04 21             	add    BYTE PTR [ecx+eiz*1],al
     ddf:	48                   	dec    eax
     de0:	00 00                	add    BYTE PTR [eax],al
     de2:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     de5:	09 11                	or     DWORD PTR [ecx],edx
     de7:	06                   	push   es
     de8:	00 00                	add    BYTE PTR [eax],al
     dea:	04 22                	add    al,0x22
     dec:	6c                   	ins    BYTE PTR es:[edi],dx
     ded:	00 00                	add    BYTE PTR [eax],al
     def:	00 05 01 09 ba 06    	add    BYTE PTR ds:0x6ba0901,al
     df5:	00 00                	add    BYTE PTR [eax],al
     df7:	04 23                	add    al,0x23
     df9:	6c                   	ins    BYTE PTR es:[edi],dx
     dfa:	00 00                	add    BYTE PTR [eax],al
     dfc:	00 09                	add    BYTE PTR [ecx],cl
     dfe:	01 09                	add    DWORD PTR [ecx],ecx
     e00:	19 06                	sbb    DWORD PTR [esi],eax
     e02:	00 00                	add    BYTE PTR [eax],al
     e04:	04 24                	add    al,0x24
     e06:	5a                   	pop    edx
     e07:	00 00                	add    BYTE PTR [eax],al
     e09:	00 0d 01 09 47 05    	add    BYTE PTR ds:0x5470901,cl
     e0f:	00 00                	add    BYTE PTR [eax],al
     e11:	04 25                	add    al,0x25
     e13:	5a                   	pop    edx
     e14:	00 00                	add    BYTE PTR [eax],al
     e16:	00 0f                	add    BYTE PTR [edi],cl
     e18:	01 09                	add    DWORD PTR [ecx],ecx
     e1a:	a8 05                	test   al,0x5
     e1c:	00 00                	add    BYTE PTR [eax],al
     e1e:	04 26                	add    al,0x26
     e20:	5a                   	pop    edx
     e21:	00 00                	add    BYTE PTR [eax],al
     e23:	00 11                	add    BYTE PTR [ecx],dl
     e25:	01 09                	add    DWORD PTR [ecx],ecx
     e27:	8a 05 00 00 04 27    	mov    al,BYTE PTR ds:0x27040000
     e2d:	5a                   	pop    edx
     e2e:	00 00                	add    BYTE PTR [eax],al
     e30:	00 13                	add    BYTE PTR [ebx],dl
     e32:	01 09                	add    DWORD PTR [ecx],ecx
     e34:	3b 05 00 00 04 28    	cmp    eax,DWORD PTR ds:0x28040000
     e3a:	5a                   	pop    edx
     e3b:	00 00                	add    BYTE PTR [eax],al
     e3d:	00 15 01 00 0a 25    	add    BYTE PTR ds:0x250a0001,dl
     e43:	00 00                	add    BYTE PTR [eax],al
     e45:	00 4e 01             	add    BYTE PTR [esi+0x1],cl
     e48:	00 00                	add    BYTE PTR [eax],al
     e4a:	0b 4e 01             	or     ecx,DWORD PTR [esi+0x1]
     e4d:	00 00                	add    BYTE PTR [eax],al
     e4f:	03 01                	add    eax,DWORD PTR [ecx]
     e51:	00 02                	add    BYTE PTR [edx],al
     e53:	04 07                	add    al,0x7
     e55:	83 01 00             	add    DWORD PTR [ecx],0x0
     e58:	00 0c 25 06 00 00 08 	add    BYTE PTR [eiz*1+0x8000006],cl
     e5f:	04 2b                	add    al,0x2b
     e61:	7a 01                	jp     e64 <sysEnter_Vector-0x12f19c>
     e63:	00 00                	add    BYTE PTR [eax],al
     e65:	08 b7 06 00 00 04    	or     BYTE PTR [edi+0x4000006],dh
     e6b:	2d 6c 00 00 00       	sub    eax,0x6c
     e70:	00 08                	add    BYTE PTR [eax],cl
     e72:	bf 05 00 00 04       	mov    edi,0x4000005
     e77:	2e                   	cs
     e78:	6c                   	ins    BYTE PTR es:[edi],dx
     e79:	00 00                	add    BYTE PTR [eax],al
     e7b:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     e7e:	04 53                	add    al,0x53
     e80:	06                   	push   es
     e81:	00 00                	add    BYTE PTR [eax],al
     e83:	04 31                	add    al,0x31
     e85:	bb 00 00 00 04       	mov    ebx,0x4000000
     e8a:	0d 05 00 00 04       	or     eax,0x4000005
     e8f:	32 55 01             	xor    dl,BYTE PTR [ebp+0x1]
     e92:	00 00                	add    BYTE PTR [eax],al
     e94:	0d d1 03 00 00       	or     eax,0x3d1
     e99:	04 77                	add    al,0x77
     e9b:	00 00                	add    BYTE PTR [eax],al
     e9d:	00 07                	add    BYTE PTR [edi],al
     e9f:	15 84 02 00 00       	adc    eax,0x284
     ea4:	0e                   	push   cs
     ea5:	71 03                	jno    eaa <sysEnter_Vector-0x12f156>
     ea7:	00 00                	add    BYTE PTR [eax],al
     ea9:	00 0e                	add    BYTE PTR [esi],cl
     eab:	dd 04 00             	fld    QWORD PTR [eax+eax*1]
     eae:	00 01                	add    BYTE PTR [ecx],al
     eb0:	0e                   	push   cs
     eb1:	d6                   	(bad)  
     eb2:	02 00                	add    al,BYTE PTR [eax]
     eb4:	00 02                	add    BYTE PTR [edx],al
     eb6:	0e                   	push   cs
     eb7:	cf                   	iret   
     eb8:	04 00                	add    al,0x0
     eba:	00 03                	add    BYTE PTR [ebx],al
     ebc:	0e                   	push   cs
     ebd:	08 03                	or     BYTE PTR [ebx],al
     ebf:	00 00                	add    BYTE PTR [eax],al
     ec1:	04 0e                	add    al,0xe
     ec3:	f3 02 00             	repz add al,BYTE PTR [eax]
     ec6:	00 05 0e 64 03 00    	add    BYTE PTR ds:0x3640e,al
     ecc:	00 0a                	add    BYTE PTR [edx],cl
     ece:	0e                   	push   cs
     ecf:	45                   	inc    ebp
     ed0:	04 00                	add    al,0x0
     ed2:	00 0b                	add    BYTE PTR [ebx],cl
     ed4:	0e                   	push   cs
     ed5:	81 03 00 00 0c 0e    	add    DWORD PTR [ebx],0xe0c0000
     edb:	b4 04                	mov    ah,0x4
     edd:	00 00                	add    BYTE PTR [eax],al
     edf:	0d 0e 52 04 00       	or     eax,0x4520e
     ee4:	00 0e                	add    BYTE PTR [esi],cl
     ee6:	0e                   	push   cs
     ee7:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     ee8:	04 00                	add    al,0x0
     eea:	00 0f                	add    BYTE PTR [edi],cl
     eec:	0e                   	push   cs
     eed:	3f                   	aas    
     eee:	03 00                	add    eax,DWORD PTR [eax]
     ef0:	00 10                	add    BYTE PTR [eax],dl
     ef2:	0e                   	push   cs
     ef3:	5f                   	pop    edi
     ef4:	04 00                	add    al,0x0
     ef6:	00 4f 0e             	add    BYTE PTR [edi+0xe],cl
     ef9:	f1                   	icebp  
     efa:	03 00                	add    eax,DWORD PTR [eax]
     efc:	00 50 0e             	add    BYTE PTR [eax+0xe],dl
     eff:	8a 04 00             	mov    al,BYTE PTR [eax+eax*1]
     f02:	00 59 0e             	add    BYTE PTR [ecx+0xe],bl
     f05:	8b 02                	mov    eax,DWORD PTR [edx]
     f07:	00 00                	add    BYTE PTR [eax],al
     f09:	61                   	popa   
     f0a:	0e                   	push   cs
     f0b:	0e                   	push   cs
     f0c:	04 00                	add    al,0x0
     f0e:	00 97 0f a6 03 00    	add    BYTE PTR [edi+0x3a60f],dl
     f14:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     f17:	0f 7d                	(bad)  
     f19:	04 00                	add    al,0x0
     f1b:	00 64 01 0f          	add    BYTE PTR [ecx+eax*1+0xf],ah
     f1f:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
     f22:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     f25:	0f af 02             	imul   eax,DWORD PTR [edx]
     f28:	00 00                	add    BYTE PTR [eax],al
     f2a:	66 01 0f             	add    WORD PTR [edi],cx
     f2d:	2a 03                	sub    al,BYTE PTR [ebx]
     f2f:	00 00                	add    BYTE PTR [eax],al
     f31:	67 01 0f             	add    DWORD PTR [bx],ecx
     f34:	1d 03 00 00 68       	sbb    eax,0x68000003
     f39:	01 0f                	add    DWORD PTR [edi],ecx
     f3b:	f7 04 00 00 69 01 0f 	test   DWORD PTR [eax+eax*1],0xf016900
     f42:	9e                   	sahf   
     f43:	02 00                	add    al,BYTE PTR [eax]
     f45:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     f48:	0f e3 02             	pavgw  mm0,QWORD PTR [edx]
     f4b:	00 00                	add    BYTE PTR [eax],al
     f4d:	71 01                	jno    f50 <sysEnter_Vector-0x12f0b0>
     f4f:	0f c1 04 00          	xadd   DWORD PTR [eax+eax*1],eax
     f53:	00 00                	add    BYTE PTR [eax],al
     f55:	03 0f                	add    ecx,DWORD PTR [edi]
     f57:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f58:	04 00                	add    al,0x0
     f5a:	00 01                	add    BYTE PTR [ecx],al
     f5c:	03 0f                	add    ecx,DWORD PTR [edi]
     f5e:	bd 03 00 00 02       	mov    ebp,0x2000003
     f63:	03 0f                	add    ecx,DWORD PTR [edi]
     f65:	96                   	xchg   esi,eax
     f66:	03 00                	add    eax,DWORD PTR [eax]
     f68:	00 03                	add    BYTE PTR [ebx],al
     f6a:	03 0f                	add    ecx,DWORD PTR [edi]
     f6c:	34 04                	xor    al,0x4
     f6e:	00 00                	add    BYTE PTR [eax],al
     f70:	04 03                	add    al,0x3
     f72:	0f 97 04 00          	seta   BYTE PTR [eax+eax*1]
     f76:	00 05 03 0f e2 03    	add    BYTE PTR ds:0x3e20f03,al
     f7c:	00 00                	add    BYTE PTR [eax],al
     f7e:	06                   	push   es
     f7f:	03 0f                	add    ecx,DWORD PTR [edi]
     f81:	52                   	push   edx
     f82:	03 00                	add    eax,DWORD PTR [eax]
     f84:	00 00                	add    BYTE PTR [eax],al
     f86:	09 00                	or     DWORD PTR [eax],eax
     f88:	10 04 02             	adc    BYTE PTR [edx+eax*1],al
     f8b:	04 07                	add    al,0x7
     f8d:	5c                   	pop    esp
     f8e:	00 00                	add    BYTE PTR [eax],al
     f90:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     f96:	00 11                	add    BYTE PTR [ecx],dl
     f98:	10 07                	adc    BYTE PTR [edi],al
     f9a:	00 00                	add    BYTE PTR [eax],al
     f9c:	01 0e                	add    DWORD PTR [esi],ecx
     f9e:	3a 00                	cmp    al,BYTE PTR [eax]
     fa0:	00 00                	add    BYTE PTR [eax],al
     fa2:	e8 08 00 9f 31       	call   319f0faf <sysEnter_Vector+0x318c0faf>
     fa7:	00 00                	add    BYTE PTR [eax],al
     fa9:	00 01                	add    BYTE PTR [ecx],al
     fab:	9c                   	pushf  
     fac:	d7                   	xlat   BYTE PTR ds:[ebx]
     fad:	02 00                	add    al,BYTE PTR [eax]
     faf:	00 12                	add    BYTE PTR [edx],dl
     fb1:	36                   	ss
     fb2:	05 00 00 01 0e       	add    eax,0xe010000
     fb7:	8d 02                	lea    eax,[edx]
     fb9:	00 00                	add    BYTE PTR [eax],al
     fbb:	02 91 00 12 32 06    	add    dl,BYTE PTR [ecx+0x6321200]
     fc1:	00 00                	add    BYTE PTR [eax],al
     fc3:	01 0e                	add    DWORD PTR [esi],ecx
     fc5:	d7                   	xlat   BYTE PTR ds:[ebx]
     fc6:	02 00                	add    al,BYTE PTR [eax]
     fc8:	00 02                	add    BYTE PTR [edx],al
     fca:	91                   	xchg   ecx,eax
     fcb:	04 12                	add    al,0x12
     fcd:	17                   	pop    ss
     fce:	07                   	pop    es
     fcf:	00 00                	add    BYTE PTR [eax],al
     fd1:	01 0e                	add    DWORD PTR [esi],ecx
     fd3:	3a 00                	cmp    al,BYTE PTR [eax]
     fd5:	00 00                	add    BYTE PTR [eax],al
     fd7:	02 91 08 00 05 04    	add    dl,BYTE PTR [ecx+0x4050008]
     fdd:	7a 01                	jp     fe0 <sysEnter_Vector-0x12f020>
     fdf:	00 00                	add    BYTE PTR [eax],al
     fe1:	11 ff                	adc    edi,edi
     fe3:	05 00 00 01 13       	add    eax,0x13010000
     fe8:	84 02                	test   BYTE PTR [edx],al
     fea:	00 00                	add    BYTE PTR [eax],al
     fec:	19 09                	sbb    DWORD PTR [ecx],ecx
     fee:	00 9f 2c 00 00 00    	add    BYTE PTR [edi+0x2c],bl
     ff4:	01 9c 13 03 00 00 12 	add    DWORD PTR [ebx+edx*1+0x12000003],ebx
     ffb:	36                   	ss
     ffc:	05 00 00 01 13       	add    eax,0x13010000
    1001:	8d 02                	lea    eax,[edx]
    1003:	00 00                	add    BYTE PTR [eax],al
    1005:	02 91 00 12 86 06    	add    dl,BYTE PTR [ecx+0x6861200]
    100b:	00 00                	add    BYTE PTR [eax],al
    100d:	01 13                	add    DWORD PTR [ebx],edx
    100f:	a9 00 00 00 02       	test   eax,0x2000000
    1014:	91                   	xchg   ecx,eax
    1015:	04 00                	add    al,0x0
    1017:	13 f5                	adc    esi,ebp
    1019:	06                   	push   es
    101a:	00 00                	add    BYTE PTR [eax],al
    101c:	01 19                	add    DWORD PTR [ecx],ebx
    101e:	45                   	inc    ebp
    101f:	09 00                	or     DWORD PTR [eax],eax
    1021:	9f                   	lahf   
    1022:	59                   	pop    ecx
    1023:	00 00                	add    BYTE PTR [eax],al
    1025:	00 01                	add    BYTE PTR [ecx],al
    1027:	9c                   	pushf  
    1028:	11 fc                	adc    esp,edi
    102a:	05 00 00 01 20       	add    eax,0x20010000
    102f:	84 02                	test   BYTE PTR [edx],al
    1031:	00 00                	add    BYTE PTR [eax],al
    1033:	9e                   	sahf   
    1034:	09 00                	or     DWORD PTR [eax],eax
    1036:	9f                   	lahf   
    1037:	93                   	xchg   ebx,eax
    1038:	00 00                	add    BYTE PTR [eax],al
    103a:	00 01                	add    BYTE PTR [ecx],al
    103c:	9c                   	pushf  
    103d:	76 03                	jbe    1042 <sysEnter_Vector-0x12efbe>
    103f:	00 00                	add    BYTE PTR [eax],al
    1041:	12 36                	adc    dh,BYTE PTR [esi]
    1043:	05 00 00 01 20       	add    eax,0x20010000
    1048:	8d 02                	lea    eax,[edx]
    104a:	00 00                	add    BYTE PTR [eax],al
    104c:	02 91 00 12 86 06    	add    dl,BYTE PTR [ecx+0x6861200]
    1052:	00 00                	add    BYTE PTR [eax],al
    1054:	01 20                	add    DWORD PTR [eax],esp
    1056:	a9 00 00 00 02       	test   eax,0x2000000
    105b:	91                   	xchg   ecx,eax
    105c:	04 12                	add    al,0x12
    105e:	2f                   	das    
    105f:	05 00 00 01 20       	add    eax,0x20010000
    1064:	84 02                	test   BYTE PTR [edx],al
    1066:	00 00                	add    BYTE PTR [eax],al
    1068:	02 91 08 14 06 05    	add    dl,BYTE PTR [ecx+0x5061408]
    106e:	00 00                	add    BYTE PTR [eax],al
    1070:	01 22                	add    DWORD PTR [edx],esp
    1072:	84 02                	test   BYTE PTR [edx],al
    1074:	00 00                	add    BYTE PTR [eax],al
    1076:	02 91 6c 00 15 15    	add    dl,BYTE PTR [ecx+0x1515006c]
    107c:	05 00 00 01 2e       	add    eax,0x2e010000
    1081:	31 0a                	xor    DWORD PTR [edx],ecx
    1083:	00 9f 2a 00 00 00    	add    BYTE PTR [edi+0x2a],bl
    1089:	01 9c 9a 03 00 00 12 	add    DWORD PTR [edx+ebx*4+0x12000003],ebx
    1090:	cf                   	iret   
    1091:	06                   	push   es
    1092:	00 00                	add    BYTE PTR [eax],al
    1094:	01 2e                	add    DWORD PTR [esi],ebp
    1096:	84 02                	test   BYTE PTR [edx],al
    1098:	00 00                	add    BYTE PTR [eax],al
    109a:	02 91 00 00 11 74    	add    dl,BYTE PTR [ecx+0x74110000]
    10a0:	06                   	push   es
    10a1:	00 00                	add    BYTE PTR [eax],al
    10a3:	01 33                	add    DWORD PTR [ebx],esi
    10a5:	3a 00                	cmp    al,BYTE PTR [eax]
    10a7:	00 00                	add    BYTE PTR [eax],al
    10a9:	5b                   	pop    ebx
    10aa:	0a 00                	or     al,BYTE PTR [eax]
    10ac:	9f                   	lahf   
    10ad:	35 00 00 00 01       	xor    eax,0x1000000
    10b2:	9c                   	pushf  
    10b3:	ec                   	in     al,dx
    10b4:	03 00                	add    eax,DWORD PTR [eax]
    10b6:	00 12                	add    BYTE PTR [edx],dl
    10b8:	cf                   	iret   
    10b9:	06                   	push   es
    10ba:	00 00                	add    BYTE PTR [eax],al
    10bc:	01 33                	add    DWORD PTR [ebx],esi
    10be:	84 02                	test   BYTE PTR [edx],al
    10c0:	00 00                	add    BYTE PTR [eax],al
    10c2:	02 91 00 12 8b 06    	add    dl,BYTE PTR [ecx+0x68b1200]
    10c8:	00 00                	add    BYTE PTR [eax],al
    10ca:	01 33                	add    DWORD PTR [ebx],esi
    10cc:	84 02                	test   BYTE PTR [edx],al
    10ce:	00 00                	add    BYTE PTR [eax],al
    10d0:	02 91 04 12 ba 06    	add    dl,BYTE PTR [ecx+0x6ba1204]
    10d6:	00 00                	add    BYTE PTR [eax],al
    10d8:	01 33                	add    DWORD PTR [ebx],esi
    10da:	3a 00                	cmp    al,BYTE PTR [eax]
    10dc:	00 00                	add    BYTE PTR [eax],al
    10de:	02 91 08 12 7a 06    	add    dl,BYTE PTR [ecx+0x67a1208]
    10e4:	00 00                	add    BYTE PTR [eax],al
    10e6:	01 33                	add    DWORD PTR [ebx],esi
    10e8:	3a 00                	cmp    al,BYTE PTR [eax]
    10ea:	00 00                	add    BYTE PTR [eax],al
    10ec:	02 91 0c 00 11 81    	add    dl,BYTE PTR [ecx-0x7eeefff4]
    10f2:	06                   	push   es
    10f3:	00 00                	add    BYTE PTR [eax],al
    10f5:	01 38                	add    DWORD PTR [eax],edi
    10f7:	3a 00                	cmp    al,BYTE PTR [eax]
    10f9:	00 00                	add    BYTE PTR [eax],al
    10fb:	90                   	nop
    10fc:	0a 00                	or     al,BYTE PTR [eax]
    10fe:	9f                   	lahf   
    10ff:	26 00 00             	add    BYTE PTR es:[eax],al
    1102:	00 01                	add    BYTE PTR [ecx],al
    1104:	9c                   	pushf  
    1105:	3e                   	ds
    1106:	04 00                	add    al,0x0
    1108:	00 12                	add    BYTE PTR [edx],dl
    110a:	cf                   	iret   
    110b:	06                   	push   es
    110c:	00 00                	add    BYTE PTR [eax],al
    110e:	01 38                	add    DWORD PTR [eax],edi
    1110:	84 02                	test   BYTE PTR [edx],al
    1112:	00 00                	add    BYTE PTR [eax],al
    1114:	02 91 00 12 8b 06    	add    dl,BYTE PTR [ecx+0x68b1200]
    111a:	00 00                	add    BYTE PTR [eax],al
    111c:	01 38                	add    DWORD PTR [eax],edi
    111e:	84 02                	test   BYTE PTR [edx],al
    1120:	00 00                	add    BYTE PTR [eax],al
    1122:	02 91 04 12 ba 06    	add    dl,BYTE PTR [ecx+0x6ba1204]
    1128:	00 00                	add    BYTE PTR [eax],al
    112a:	01 38                	add    DWORD PTR [eax],edi
    112c:	3a 00                	cmp    al,BYTE PTR [eax]
    112e:	00 00                	add    BYTE PTR [eax],al
    1130:	02 91 08 12 7a 06    	add    dl,BYTE PTR [ecx+0x67a1208]
    1136:	00 00                	add    BYTE PTR [eax],al
    1138:	01 38                	add    DWORD PTR [eax],edi
    113a:	3a 00                	cmp    al,BYTE PTR [eax]
    113c:	00 00                	add    BYTE PTR [eax],al
    113e:	02 91 0c 00 11 d3    	add    dl,BYTE PTR [ecx-0x2ceefff4]
    1144:	05 00 00 01 3d       	add    eax,0x3d010000
    1149:	3a 00                	cmp    al,BYTE PTR [eax]
    114b:	00 00                	add    BYTE PTR [eax],al
    114d:	b6 0a                	mov    dh,0xa
    114f:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
    1155:	01 9c 90 04 00 00 12 	add    DWORD PTR [eax+edx*4+0x12000004],ebx
    115c:	cf                   	iret   
    115d:	06                   	push   es
    115e:	00 00                	add    BYTE PTR [eax],al
    1160:	01 3d 84 02 00 00    	add    DWORD PTR ds:0x284,edi
    1166:	02 91 00 12 8b 06    	add    dl,BYTE PTR [ecx+0x68b1200]
    116c:	00 00                	add    BYTE PTR [eax],al
    116e:	01 3d 84 02 00 00    	add    DWORD PTR ds:0x284,edi
    1174:	02 91 04 12 ba 06    	add    dl,BYTE PTR [ecx+0x6ba1204]
    117a:	00 00                	add    BYTE PTR [eax],al
    117c:	01 3d 3a 00 00 00    	add    DWORD PTR ds:0x3a,edi
    1182:	02 91 08 12 7a 06    	add    dl,BYTE PTR [ecx+0x67a1208]
    1188:	00 00                	add    BYTE PTR [eax],al
    118a:	01 3d 3a 00 00 00    	add    DWORD PTR ds:0x3a,edi
    1190:	02 91 0c 00 11 2c    	add    dl,BYTE PTR [ecx+0x2c11000c]
    1196:	06                   	push   es
    1197:	00 00                	add    BYTE PTR [eax],al
    1199:	01 42 3a             	add    DWORD PTR [edx+0x3a],eax
    119c:	00 00                	add    BYTE PTR [eax],al
    119e:	00 eb                	add    bl,ch
    11a0:	0a 00                	or     al,BYTE PTR [eax]
    11a2:	9f                   	lahf   
    11a3:	26 00 00             	add    BYTE PTR es:[eax],al
    11a6:	00 01                	add    BYTE PTR [ecx],al
    11a8:	9c                   	pushf  
    11a9:	e2 04                	loop   11af <sysEnter_Vector-0x12ee51>
    11ab:	00 00                	add    BYTE PTR [eax],al
    11ad:	12 cf                	adc    cl,bh
    11af:	06                   	push   es
    11b0:	00 00                	add    BYTE PTR [eax],al
    11b2:	01 42 84             	add    DWORD PTR [edx-0x7c],eax
    11b5:	02 00                	add    al,BYTE PTR [eax]
    11b7:	00 02                	add    BYTE PTR [edx],al
    11b9:	91                   	xchg   ecx,eax
    11ba:	00 12                	add    BYTE PTR [edx],dl
    11bc:	8b 06                	mov    eax,DWORD PTR [esi]
    11be:	00 00                	add    BYTE PTR [eax],al
    11c0:	01 42 84             	add    DWORD PTR [edx-0x7c],eax
    11c3:	02 00                	add    al,BYTE PTR [eax]
    11c5:	00 02                	add    BYTE PTR [edx],al
    11c7:	91                   	xchg   ecx,eax
    11c8:	04 12                	add    al,0x12
    11ca:	ba 06 00 00 01       	mov    edx,0x1000006
    11cf:	42                   	inc    edx
    11d0:	3a 00                	cmp    al,BYTE PTR [eax]
    11d2:	00 00                	add    BYTE PTR [eax],al
    11d4:	02 91 08 12 7a 06    	add    dl,BYTE PTR [ecx+0x67a1208]
    11da:	00 00                	add    BYTE PTR [eax],al
    11dc:	01 42 3a             	add    DWORD PTR [edx+0x3a],eax
    11df:	00 00                	add    BYTE PTR [eax],al
    11e1:	00 02                	add    BYTE PTR [edx],al
    11e3:	91                   	xchg   ecx,eax
    11e4:	0c 00                	or     al,0x0
    11e6:	11 9e 06 00 00 01    	adc    DWORD PTR [esi+0x1000006],ebx
    11ec:	47                   	inc    edi
    11ed:	3a 00                	cmp    al,BYTE PTR [eax]
    11ef:	00 00                	add    BYTE PTR [eax],al
    11f1:	11 0b                	adc    DWORD PTR [ebx],ecx
    11f3:	00 9f 2e 00 00 00    	add    BYTE PTR [edi+0x2e],bl
    11f9:	01 9c 26 05 00 00 12 	add    DWORD PTR [esi+eiz*1+0x12000005],ebx
    1200:	cf                   	iret   
    1201:	06                   	push   es
    1202:	00 00                	add    BYTE PTR [eax],al
    1204:	01 47 84             	add    DWORD PTR [edi-0x7c],eax
    1207:	02 00                	add    al,BYTE PTR [eax]
    1209:	00 02                	add    BYTE PTR [edx],al
    120b:	91                   	xchg   ecx,eax
    120c:	00 12                	add    BYTE PTR [edx],dl
    120e:	ca 05 00             	retf   0x5
    1211:	00 01                	add    BYTE PTR [ecx],al
    1213:	47                   	inc    edi
    1214:	9b                   	fwait
    1215:	00 00                	add    BYTE PTR [eax],al
    1217:	00 02                	add    BYTE PTR [edx],al
    1219:	91                   	xchg   ecx,eax
    121a:	04 12                	add    al,0x12
    121c:	df 05 00 00 01 47    	fild   WORD PTR ds:0x47010000
    1222:	3a 00                	cmp    al,BYTE PTR [eax]
    1224:	00 00                	add    BYTE PTR [eax],al
    1226:	02 91 08 00 11 da    	add    dl,BYTE PTR [ecx-0x25eefff8]
    122c:	05 00 00 01 4c       	add    eax,0x4c010000
    1231:	3a 00                	cmp    al,BYTE PTR [eax]
    1233:	00 00                	add    BYTE PTR [eax],al
    1235:	3f                   	aas    
    1236:	0b 00                	or     eax,DWORD PTR [eax]
    1238:	9f                   	lahf   
    1239:	26 00 00             	add    BYTE PTR es:[eax],al
    123c:	00 01                	add    BYTE PTR [ecx],al
    123e:	9c                   	pushf  
    123f:	6a 05                	push   0x5
    1241:	00 00                	add    BYTE PTR [eax],al
    1243:	12 cf                	adc    cl,bh
    1245:	06                   	push   es
    1246:	00 00                	add    BYTE PTR [eax],al
    1248:	01 4c 84 02          	add    DWORD PTR [esp+eax*4+0x2],ecx
    124c:	00 00                	add    BYTE PTR [eax],al
    124e:	02 91 00 12 ca 05    	add    dl,BYTE PTR [ecx+0x5ca1200]
    1254:	00 00                	add    BYTE PTR [eax],al
    1256:	01 4c 9b 00          	add    DWORD PTR [ebx+ebx*4+0x0],ecx
    125a:	00 00                	add    BYTE PTR [eax],al
    125c:	02 91 04 12 df 05    	add    dl,BYTE PTR [ecx+0x5df1204]
    1262:	00 00                	add    BYTE PTR [eax],al
    1264:	01 4c 3a 00          	add    DWORD PTR [edx+edi*1+0x0],ecx
    1268:	00 00                	add    BYTE PTR [eax],al
    126a:	02 91 08 00 11 65    	add    dl,BYTE PTR [ecx+0x65110008]
    1270:	05 00 00 01 50       	add    eax,0x50010000
    1275:	3a 00                	cmp    al,BYTE PTR [eax]
    1277:	00 00                	add    BYTE PTR [eax],al
    1279:	65 0b 00             	or     eax,DWORD PTR gs:[eax]
    127c:	9f                   	lahf   
    127d:	2d 00 00 00 01       	sub    eax,0x1000000
    1282:	9c                   	pushf  
    1283:	a0 05 00 00 12       	mov    al,ds:0x12000005
    1288:	36                   	ss
    1289:	05 00 00 01 50       	add    eax,0x50010000
    128e:	8d 02                	lea    eax,[edx]
    1290:	00 00                	add    BYTE PTR [eax],al
    1292:	02 91 00 12 27 06    	add    dl,BYTE PTR [ecx+0x6271200]
    1298:	00 00                	add    BYTE PTR [eax],al
    129a:	01 50 a0             	add    DWORD PTR [eax-0x60],edx
    129d:	05 00 00 02 91       	add    eax,0x91020000
    12a2:	04 00                	add    al,0x0
    12a4:	05 04 85 01 00       	add    eax,0x18504
    12a9:	00 11                	add    BYTE PTR [ecx],dl
    12ab:	27                   	daa    
    12ac:	06                   	push   es
    12ad:	00 00                	add    BYTE PTR [eax],al
    12af:	01 55 3a             	add    DWORD PTR [ebp+0x3a],edx
    12b2:	00 00                	add    BYTE PTR [eax],al
    12b4:	00 92 0b 00 9f 23    	add    BYTE PTR [edx+0x239f000b],dl
    12ba:	00 00                	add    BYTE PTR [eax],al
    12bc:	00 01                	add    BYTE PTR [ecx],al
    12be:	9c                   	pushf  
    12bf:	dc 05 00 00 12 36    	fadd   QWORD PTR ds:0x36120000
    12c5:	05 00 00 01 55       	add    eax,0x55010000
    12ca:	8d 02                	lea    eax,[edx]
    12cc:	00 00                	add    BYTE PTR [eax],al
    12ce:	02 91 00 12 27 06    	add    dl,BYTE PTR [ecx+0x6271200]
    12d4:	00 00                	add    BYTE PTR [eax],al
    12d6:	01 55 a0             	add    DWORD PTR [ebp-0x60],edx
    12d9:	05 00 00 02 91       	add    eax,0x91020000
    12de:	04 00                	add    al,0x0
    12e0:	11 b3 05 00 00 01    	adc    DWORD PTR [ebx+0x1000005],esi
    12e6:	5a                   	pop    edx
    12e7:	3a 00                	cmp    al,BYTE PTR [eax]
    12e9:	00 00                	add    BYTE PTR [eax],al
    12eb:	b5 0b                	mov    ch,0xb
    12ed:	00 9f f5 02 00 00    	add    BYTE PTR [edi+0x2f5],bl
    12f3:	01 9c 7e 06 00 00 12 	add    DWORD PTR [esi+edi*2+0x12000006],ebx
    12fa:	e2 06                	loop   1302 <sysEnter_Vector-0x12ecfe>
    12fc:	00 00                	add    BYTE PTR [eax],al
    12fe:	01 5a a9             	add    DWORD PTR [edx-0x57],ebx
    1301:	00 00                	add    BYTE PTR [eax],al
    1303:	00 02                	add    BYTE PTR [edx],al
    1305:	91                   	xchg   ecx,eax
    1306:	00 12                	add    BYTE PTR [edx],dl
    1308:	43                   	inc    ebx
    1309:	06                   	push   es
    130a:	00 00                	add    BYTE PTR [eax],al
    130c:	01 5a 8d             	add    DWORD PTR [edx-0x73],ebx
    130f:	02 00                	add    al,BYTE PTR [eax]
    1311:	00 02                	add    BYTE PTR [edx],al
    1313:	91                   	xchg   ecx,eax
    1314:	04 14                	add    al,0x14
    1316:	fc                   	cld    
    1317:	01 00                	add    DWORD PTR [eax],eax
    1319:	00 01                	add    BYTE PTR [ecx],al
    131b:	5c                   	pop    esp
    131c:	7e 06                	jle    1324 <sysEnter_Vector-0x12ecdc>
    131e:	00 00                	add    BYTE PTR [eax],al
    1320:	02 91 5e 14 5e 06    	add    dl,BYTE PTR [ecx+0x65e145e]
    1326:	00 00                	add    BYTE PTR [eax],al
    1328:	01 5d 8d             	add    DWORD PTR [ebp-0x73],ebx
    132b:	02 00                	add    al,BYTE PTR [eax]
    132d:	00 02                	add    BYTE PTR [edx],al
    132f:	91                   	xchg   ecx,eax
    1330:	6c                   	ins    BYTE PTR es:[edi],dx
    1331:	14 06                	adc    al,0x6
    1333:	05 00 00 01 5e       	add    eax,0x5e010000
    1338:	3a 00                	cmp    al,BYTE PTR [eax]
    133a:	00 00                	add    BYTE PTR [eax],al
    133c:	02 91 68 14 26 06    	add    dl,BYTE PTR [ecx+0x6261468]
    1342:	00 00                	add    BYTE PTR [eax],al
    1344:	01 5f 85             	add    DWORD PTR [edi-0x7b],ebx
    1347:	01 00                	add    DWORD PTR [eax],eax
    1349:	00 02                	add    BYTE PTR [edx],al
    134b:	91                   	xchg   ecx,eax
    134c:	54                   	push   esp
    134d:	16                   	push   ss
    134e:	43                   	inc    ebx
    134f:	0d 00 9f bd 00       	or     eax,0xbd9f00
    1354:	00 00                	add    BYTE PTR [eax],al
    1356:	65                   	gs
    1357:	06                   	push   es
    1358:	00 00                	add    BYTE PTR [eax],al
    135a:	17                   	pop    ss
    135b:	72 65                	jb     13c2 <sysEnter_Vector-0x12ec3e>
    135d:	73 00                	jae    135f <sysEnter_Vector-0x12eca1>
    135f:	01 85 3a 00 00 00    	add    DWORD PTR [ebp+0x3a],eax
    1365:	02 91 64 00 18 14    	add    dl,BYTE PTR [ecx+0x14180064]
    136b:	0e                   	push   cs
    136c:	00 9f 8e 00 00 00    	add    BYTE PTR [edi+0x8e],bl
    1372:	17                   	pop    ss
    1373:	72 65                	jb     13da <sysEnter_Vector-0x12ec26>
    1375:	73 00                	jae    1377 <sysEnter_Vector-0x12ec89>
    1377:	01 94 3a 00 00 00 02 	add    DWORD PTR [edx+edi*1+0x2000000],edx
    137e:	91                   	xchg   ecx,eax
    137f:	60                   	pusha  
    1380:	00 00                	add    BYTE PTR [eax],al
    1382:	0a 25 00 00 00 8e    	or     ah,BYTE PTR ds:0x8e000000
    1388:	06                   	push   es
    1389:	00 00                	add    BYTE PTR [eax],al
    138b:	19 4e 01             	sbb    DWORD PTR [esi+0x1],ecx
    138e:	00 00                	add    BYTE PTR [eax],al
    1390:	01 00                	add    DWORD PTR [eax],eax
    1392:	11 52 05             	adc    DWORD PTR [edx+0x5],edx
    1395:	00 00                	add    BYTE PTR [eax],al
    1397:	01 a0 9b 00 00 00    	add    DWORD PTR [eax+0x9b],esp
    139d:	aa                   	stos   BYTE PTR es:[edi],al
    139e:	0e                   	push   cs
    139f:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
    13a5:	01 9c b6 06 00 00 12 	add    DWORD PTR [esi+esi*4+0x12000006],ebx
    13ac:	2f                   	das    
    13ad:	05 00 00 01 a0       	add    eax,0xa0010000
    13b2:	84 02                	test   BYTE PTR [edx],al
    13b4:	00 00                	add    BYTE PTR [eax],al
    13b6:	02 91 00 00 11 85    	add    dl,BYTE PTR [ecx-0x7aef0000]
    13bc:	05 00 00 01 a5       	add    eax,0xa5010000
    13c1:	9b                   	fwait
    13c2:	00 00                	add    BYTE PTR [eax],al
    13c4:	00 d3                	add    bl,dl
    13c6:	0e                   	push   cs
    13c7:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    13cd:	01 9c de 06 00 00 12 	add    DWORD PTR [esi+ebx*8+0x12000006],ebx
    13d4:	2f                   	das    
    13d5:	05 00 00 01 a5       	add    eax,0xa5010000
    13da:	84 02                	test   BYTE PTR [edx],al
    13dc:	00 00                	add    BYTE PTR [eax],al
    13de:	02 91 00 00 11 96    	add    dl,BYTE PTR [ecx-0x69ef0000]
    13e4:	05 00 00 01 aa       	add    eax,0xaa010000
    13e9:	90                   	nop
    13ea:	00 00                	add    BYTE PTR [eax],al
    13ec:	00 f3                	add    bl,dh
    13ee:	0e                   	push   cs
    13ef:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
    13f5:	01 9c 9b 07 00 00 12 	add    DWORD PTR [ebx+ebx*4+0x12000007],ebx
    13fc:	4b                   	dec    ebx
    13fd:	06                   	push   es
    13fe:	00 00                	add    BYTE PTR [eax],al
    1400:	01 aa 9b 07 00 00    	add    DWORD PTR [edx+0x79b],ebp
    1406:	02 91 00 1a 6e 00    	add    dl,BYTE PTR [ecx+0x6e1a00]
    140c:	01 aa a1 07 00 00    	add    DWORD PTR [edx+0x7a1],ebp
    1412:	02 91 04 12 2f 05    	add    dl,BYTE PTR [ecx+0x52f1204]
    1418:	00 00                	add    BYTE PTR [eax],al
    141a:	01 aa 84 02 00 00    	add    DWORD PTR [edx+0x284],ebp
    1420:	02 91 08 14 8b 06    	add    dl,BYTE PTR [ecx+0x68b1408]
    1426:	00 00                	add    BYTE PTR [eax],al
    1428:	01 ac 8d 02 00 00 02 	add    DWORD PTR [ebp+ecx*4+0x2000002],ebp
    142f:	91                   	xchg   ecx,eax
    1430:	54                   	push   esp
    1431:	14 02                	adc    al,0x2
    1433:	07                   	pop    es
    1434:	00 00                	add    BYTE PTR [eax],al
    1436:	01 ad 3a 00 00 00    	add    DWORD PTR [ebp+0x3a],ebp
    143c:	02 91 60 14 92 06    	add    dl,BYTE PTR [ecx+0x6921460]
    1442:	00 00                	add    BYTE PTR [eax],al
    1444:	01 ae 90 00 00 00    	add    DWORD PTR [esi+0x90],ebp
    144a:	02 91 6c 14 6b 05    	add    dl,BYTE PTR [ecx+0x56b146c]
    1450:	00 00                	add    BYTE PTR [eax],al
    1452:	01 af 8d 02 00 00    	add    DWORD PTR [edi+0x28d],ebp
    1458:	02 91 5c 14 04 06    	add    dl,BYTE PTR [ecx+0x604145c]
    145e:	00 00                	add    BYTE PTR [eax],al
    1460:	01 b0 8d 02 00 00    	add    DWORD PTR [eax+0x28d],esi
    1466:	02 91 50 14 e9 06    	add    dl,BYTE PTR [ecx+0x6e91450]
    146c:	00 00                	add    BYTE PTR [eax],al
    146e:	01 b1 90 00 00 00    	add    DWORD PTR [ecx+0x90],esi
    1474:	02 91 68 14 58 05    	add    dl,BYTE PTR [ecx+0x5581468]
    147a:	00 00                	add    BYTE PTR [eax],al
    147c:	01 b2 3a 00 00 00    	add    DWORD PTR [edx+0x3a],esi
    1482:	02 91 58 14 06 05    	add    dl,BYTE PTR [ecx+0x5061458]
    1488:	00 00                	add    BYTE PTR [eax],al
    148a:	01 b3 3a 00 00 00    	add    DWORD PTR [ebx+0x3a],esi
    1490:	02 91 64 1b ee 05    	add    dl,BYTE PTR [ecx+0x5ee1b64]
    1496:	00 00                	add    BYTE PTR [eax],al
    1498:	01 d0                	add    eax,edx
    149a:	9e                   	sahf   
    149b:	10 00                	adc    BYTE PTR [eax],al
    149d:	9f                   	lahf   
    149e:	00 05 04 8d 02 00    	add    BYTE PTR ds:0x28d04,al
    14a4:	00 05 04 90 00 00    	add    BYTE PTR ds:0x9004,al
    14aa:	00 11                	add    BYTE PTR [ecx],dl
    14ac:	e6 05                	out    0x5,al
    14ae:	00 00                	add    BYTE PTR [eax],al
    14b0:	01 d5                	add    ebp,edx
    14b2:	90                   	nop
    14b3:	00 00                	add    BYTE PTR [eax],al
    14b5:	00 b4 10 00 9f 26 00 	add    BYTE PTR [eax+edx*1+0x269f00],dh
    14bc:	00 00                	add    BYTE PTR [eax],al
    14be:	01 9c e9 07 00 00 12 	add    DWORD PTR [ecx+ebp*8+0x12000007],ebx
    14c5:	4b                   	dec    ebx
    14c6:	06                   	push   es
    14c7:	00 00                	add    BYTE PTR [eax],al
    14c9:	01 d5                	add    ebp,edx
    14cb:	9b                   	fwait
    14cc:	07                   	pop    es
    14cd:	00 00                	add    BYTE PTR [eax],al
    14cf:	02 91 00 1a 6e 00    	add    dl,BYTE PTR [ecx+0x6e1a00]
    14d5:	01 d5                	add    ebp,edx
    14d7:	a1 07 00 00 02       	mov    eax,ds:0x2000007
    14dc:	91                   	xchg   ecx,eax
    14dd:	04 12                	add    al,0x12
    14df:	2f                   	das    
    14e0:	05 00 00 01 d5       	add    eax,0xd5010000
    14e5:	84 02                	test   BYTE PTR [edx],al
    14e7:	00 00                	add    BYTE PTR [eax],al
    14e9:	02 91 08 00 1c a3    	add    dl,BYTE PTR [ecx-0x5ce3fff8]
    14ef:	00 00                	add    BYTE PTR [eax],al
    14f1:	00 05 39 6c 00 00    	add    BYTE PTR ds:0x6c39,al
    14f7:	00 05 03 8c 72 00    	add    BYTE PTR ds:0x728c03,al
    14fd:	9f                   	lahf   
    14fe:	1c 34                	sbb    al,0x34
    1500:	01 00                	add    DWORD PTR [eax],eax
    1502:	00 05 3a 6c 00 00    	add    BYTE PTR ds:0x6c3a,al
    1508:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
    150e:	9f                   	lahf   
    150f:	1c 7b                	sbb    al,0x7b
    1511:	00 00                	add    BYTE PTR [eax],al
    1513:	00 05 3b 6c 00 00    	add    BYTE PTR ds:0x6c3b,al
    1519:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
    151f:	9f                   	lahf   
    1520:	1c 7c                	sbb    al,0x7c
    1522:	01 00                	add    DWORD PTR [eax],eax
    1524:	00 05 3c 9b 00 00    	add    BYTE PTR ds:0x9b3c,al
    152a:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
    1530:	9f                   	lahf   
    1531:	1c 6e                	sbb    al,0x6e
    1533:	00 00                	add    BYTE PTR [eax],al
    1535:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1538:	3e 08 00             	or     BYTE PTR ds:[eax],al
    153b:	00 05 03 84 72 00    	add    BYTE PTR ds:0x728403,al
    1541:	9f                   	lahf   
    1542:	05 04 85 00 00       	add    eax,0x8504
    1547:	00 1c 91             	add    BYTE PTR [ecx+edx*4],bl
    154a:	00 00                	add    BYTE PTR [eax],al
    154c:	00 04 35 6c 00 00 00 	add    BYTE PTR [esi*1+0x6c],al
    1553:	05 03 80 72 00       	add    eax,0x728003
    1558:	9f                   	lahf   
    1559:	1c 41                	sbb    al,0x41
    155b:	00 00                	add    BYTE PTR [eax],al
    155d:	00 06                	add    BYTE PTR [esi],al
    155f:	58                   	pop    eax
    1560:	9b                   	fwait
    1561:	07                   	pop    es
    1562:	00 00                	add    BYTE PTR [eax],al
    1564:	05 03 94 72 00       	add    eax,0x729403
    1569:	9f                   	lahf   
    156a:	1c 1b                	sbb    al,0x1b
    156c:	05 00 00 01 09       	add    eax,0x9010000
    1571:	8d 02                	lea    eax,[edx]
    1573:	00 00                	add    BYTE PTR [eax],al
    1575:	05 03 a4 72 00       	add    eax,0x72a403
    157a:	9f                   	lahf   
    157b:	1c d6                	sbb    al,0xd6
    157d:	06                   	push   es
    157e:	00 00                	add    BYTE PTR [eax],al
    1580:	01 0a                	add    DWORD PTR [edx],ecx
    1582:	8d 02                	lea    eax,[edx]
    1584:	00 00                	add    BYTE PTR [eax],al
    1586:	05 03 b0 72 00       	add    eax,0x72b003
    158b:	9f                   	lahf   
    158c:	1c 71                	sbb    al,0x71
    158e:	05 00 00 01 0b       	add    eax,0xb010000
    1593:	8d 02                	lea    eax,[edx]
    1595:	00 00                	add    BYTE PTR [eax],al
    1597:	05 03 a8 72 00       	add    eax,0x72a803
    159c:	9f                   	lahf   
    159d:	1c bf                	sbb    al,0xbf
    159f:	06                   	push   es
    15a0:	00 00                	add    BYTE PTR [eax],al
    15a2:	01 0c 8d 02 00 00 05 	add    DWORD PTR [ecx*4+0x5000002],ecx
    15a9:	03 ac 72 00 9f 00 1a 	add    ebp,DWORD PTR [edx+esi*2+0x1a009f00]
    15b0:	03 00                	add    eax,DWORD PTR [eax]
    15b2:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    15b5:	b9 05 00 00 04       	mov    ecx,0x4000005
    15ba:	01 ac 00 00 00 0c 23 	add    DWORD PTR [eax+eax*1+0x230c0000],ebp
    15c1:	07                   	pop    es
    15c2:	00 00                	add    BYTE PTR [eax],al
    15c4:	1e                   	push   ds
    15c5:	00 00                	add    BYTE PTR [eax],al
    15c7:	00 dc                	add    ah,bl
    15c9:	10 00                	adc    BYTE PTR [eax],al
    15cb:	9f                   	lahf   
    15cc:	69 01 00 00 0b 08    	imul   eax,DWORD PTR [ecx],0x80b0000
    15d2:	00 00                	add    BYTE PTR [eax],al
    15d4:	02 01                	add    al,BYTE PTR [ecx]
    15d6:	06                   	push   es
    15d7:	8c 00                	mov    WORD PTR [eax],es
    15d9:	00 00                	add    BYTE PTR [eax],al
    15db:	02 01                	add    al,BYTE PTR [ecx]
    15dd:	06                   	push   es
    15de:	85 00                	test   DWORD PTR [eax],eax
    15e0:	00 00                	add    BYTE PTR [eax],al
    15e2:	02 02                	add    al,BYTE PTR [edx]
    15e4:	05 72 01 00 00       	add    eax,0x172
    15e9:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    15f0:	02 08                	add    cl,BYTE PTR [eax]
    15f2:	05 00 00 00 00       	add    eax,0x0
    15f7:	02 01                	add    al,BYTE PTR [ecx]
    15f9:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    15ff:	02 07                	add    al,BYTE PTR [edi]
    1601:	19 01                	sbb    DWORD PTR [ecx],eax
    1603:	00 00                	add    BYTE PTR [eax],al
    1605:	04 0e                	add    al,0xe
    1607:	00 00                	add    BYTE PTR [eax],al
    1609:	00 02                	add    BYTE PTR [edx],al
    160b:	34 61                	xor    al,0x61
    160d:	00 00                	add    BYTE PTR [eax],al
    160f:	00 02                	add    BYTE PTR [edx],al
    1611:	04 07                	add    al,0x7
    1613:	61                   	popa   
    1614:	00 00                	add    BYTE PTR [eax],al
    1616:	00 02                	add    BYTE PTR [edx],al
    1618:	08 07                	or     BYTE PTR [edi],al
    161a:	57                   	push   edi
    161b:	00 00                	add    BYTE PTR [eax],al
    161d:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    1624:	56                   	push   esi
    1625:	61                   	popa   
    1626:	00 00                	add    BYTE PTR [eax],al
    1628:	00 02                	add    BYTE PTR [edx],al
    162a:	04 05                	add    al,0x5
    162c:	05 00 00 00 02       	add    eax,0x2000000
    1631:	0c 04                	or     al,0x4
    1633:	66 01 00             	add    WORD PTR [eax],ax
    1636:	00 02                	add    BYTE PTR [edx],al
    1638:	01 02                	add    DWORD PTR [edx],eax
    163a:	13 01                	adc    eax,DWORD PTR [ecx]
    163c:	00 00                	add    BYTE PTR [eax],al
    163e:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1641:	83 01 00             	add    DWORD PTR [ecx],0x0
    1644:	00 05 d1 03 00 00    	add    BYTE PTR ds:0x3d1,al
    164a:	04 61                	add    al,0x61
    164c:	00 00                	add    BYTE PTR [eax],al
    164e:	00 06                	add    BYTE PTR [esi],al
    1650:	15 8a 01 00 00       	adc    eax,0x18a
    1655:	06                   	push   es
    1656:	71 03                	jno    165b <sysEnter_Vector-0x12e9a5>
    1658:	00 00                	add    BYTE PTR [eax],al
    165a:	00 06                	add    BYTE PTR [esi],al
    165c:	dd 04 00             	fld    QWORD PTR [eax+eax*1]
    165f:	00 01                	add    BYTE PTR [ecx],al
    1661:	06                   	push   es
    1662:	d6                   	(bad)  
    1663:	02 00                	add    al,BYTE PTR [eax]
    1665:	00 02                	add    BYTE PTR [edx],al
    1667:	06                   	push   es
    1668:	cf                   	iret   
    1669:	04 00                	add    al,0x0
    166b:	00 03                	add    BYTE PTR [ebx],al
    166d:	06                   	push   es
    166e:	08 03                	or     BYTE PTR [ebx],al
    1670:	00 00                	add    BYTE PTR [eax],al
    1672:	04 06                	add    al,0x6
    1674:	f3 02 00             	repz add al,BYTE PTR [eax]
    1677:	00 05 06 64 03 00    	add    BYTE PTR ds:0x36406,al
    167d:	00 0a                	add    BYTE PTR [edx],cl
    167f:	06                   	push   es
    1680:	45                   	inc    ebp
    1681:	04 00                	add    al,0x0
    1683:	00 0b                	add    BYTE PTR [ebx],cl
    1685:	06                   	push   es
    1686:	81 03 00 00 0c 06    	add    DWORD PTR [ebx],0x60c0000
    168c:	b4 04                	mov    ah,0x4
    168e:	00 00                	add    BYTE PTR [eax],al
    1690:	0d 06 52 04 00       	or     eax,0x45206
    1695:	00 0e                	add    BYTE PTR [esi],cl
    1697:	06                   	push   es
    1698:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    1699:	04 00                	add    al,0x0
    169b:	00 0f                	add    BYTE PTR [edi],cl
    169d:	06                   	push   es
    169e:	3f                   	aas    
    169f:	03 00                	add    eax,DWORD PTR [eax]
    16a1:	00 10                	add    BYTE PTR [eax],dl
    16a3:	06                   	push   es
    16a4:	5f                   	pop    edi
    16a5:	04 00                	add    al,0x0
    16a7:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    16aa:	f1                   	icebp  
    16ab:	03 00                	add    eax,DWORD PTR [eax]
    16ad:	00 50 06             	add    BYTE PTR [eax+0x6],dl
    16b0:	8a 04 00             	mov    al,BYTE PTR [eax+eax*1]
    16b3:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
    16b6:	8b 02                	mov    eax,DWORD PTR [edx]
    16b8:	00 00                	add    BYTE PTR [eax],al
    16ba:	61                   	popa   
    16bb:	06                   	push   es
    16bc:	0e                   	push   cs
    16bd:	04 00                	add    al,0x0
    16bf:	00 97 07 a6 03 00    	add    BYTE PTR [edi+0x3a607],dl
    16c5:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    16c8:	07                   	pop    es
    16c9:	7d 04                	jge    16cf <sysEnter_Vector-0x12e931>
    16cb:	00 00                	add    BYTE PTR [eax],al
    16cd:	64 01 07             	add    DWORD PTR fs:[edi],eax
    16d0:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    16d3:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    16d6:	07                   	pop    es
    16d7:	af                   	scas   eax,DWORD PTR es:[edi]
    16d8:	02 00                	add    al,BYTE PTR [eax]
    16da:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    16dd:	07                   	pop    es
    16de:	2a 03                	sub    al,BYTE PTR [ebx]
    16e0:	00 00                	add    BYTE PTR [eax],al
    16e2:	67 01 07             	add    DWORD PTR [bx],eax
    16e5:	1d 03 00 00 68       	sbb    eax,0x68000003
    16ea:	01 07                	add    DWORD PTR [edi],eax
    16ec:	f7 04 00 00 69 01 07 	test   DWORD PTR [eax+eax*1],0x7016900
    16f3:	9e                   	sahf   
    16f4:	02 00                	add    al,BYTE PTR [eax]
    16f6:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    16f9:	07                   	pop    es
    16fa:	e3 02                	jecxz  16fe <sysEnter_Vector-0x12e902>
    16fc:	00 00                	add    BYTE PTR [eax],al
    16fe:	71 01                	jno    1701 <sysEnter_Vector-0x12e8ff>
    1700:	07                   	pop    es
    1701:	c1 04 00 00          	rol    DWORD PTR [eax+eax*1],0x0
    1705:	00 03                	add    BYTE PTR [ebx],al
    1707:	07                   	pop    es
    1708:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1709:	04 00                	add    al,0x0
    170b:	00 01                	add    BYTE PTR [ecx],al
    170d:	03 07                	add    eax,DWORD PTR [edi]
    170f:	bd 03 00 00 02       	mov    ebp,0x2000003
    1714:	03 07                	add    eax,DWORD PTR [edi]
    1716:	96                   	xchg   esi,eax
    1717:	03 00                	add    eax,DWORD PTR [eax]
    1719:	00 03                	add    BYTE PTR [ebx],al
    171b:	03 07                	add    eax,DWORD PTR [edi]
    171d:	34 04                	xor    al,0x4
    171f:	00 00                	add    BYTE PTR [eax],al
    1721:	04 03                	add    al,0x3
    1723:	07                   	pop    es
    1724:	97                   	xchg   edi,eax
    1725:	04 00                	add    al,0x0
    1727:	00 05 03 07 e2 03    	add    BYTE PTR ds:0x3e20703,al
    172d:	00 00                	add    BYTE PTR [eax],al
    172f:	06                   	push   es
    1730:	03 07                	add    eax,DWORD PTR [edi]
    1732:	52                   	push   edx
    1733:	03 00                	add    eax,DWORD PTR [eax]
    1735:	00 00                	add    BYTE PTR [eax],al
    1737:	09 00                	or     DWORD PTR [eax],eax
    1739:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    173c:	5c                   	pop    esp
    173d:	00 00                	add    BYTE PTR [eax],al
    173f:	00 08                	add    BYTE PTR [eax],cl
    1741:	04 25                	add    al,0x25
    1743:	00 00                	add    BYTE PTR [eax],al
    1745:	00 09                	add    BYTE PTR [ecx],cl
    1747:	5c                   	pop    esp
    1748:	07                   	pop    es
    1749:	00 00                	add    BYTE PTR [eax],al
    174b:	01 0f                	add    DWORD PTR [edi],ecx
    174d:	dc 10                	fcom   QWORD PTR [eax]
    174f:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
    1755:	01 9c bb 01 00 00 0a 	add    DWORD PTR [ebx+edi*4+0xa000001],ebx
    175c:	8b 06                	mov    eax,DWORD PTR [esi]
    175e:	00 00                	add    BYTE PTR [eax],al
    1760:	01 0f                	add    DWORD PTR [edi],ecx
    1762:	91                   	xchg   ecx,eax
    1763:	01 00                	add    DWORD PTR [eax],eax
    1765:	00 02                	add    BYTE PTR [edx],al
    1767:	91                   	xchg   ecx,eax
    1768:	00 00                	add    BYTE PTR [eax],al
    176a:	09 52 07             	or     DWORD PTR [edx+0x7],edx
    176d:	00 00                	add    BYTE PTR [eax],al
    176f:	01 14 02             	add    DWORD PTR [edx+eax*1],edx
    1772:	11 00                	adc    DWORD PTR [eax],eax
    1774:	9f                   	lahf   
    1775:	43                   	inc    ebx
    1776:	00 00                	add    BYTE PTR [eax],al
    1778:	00 01                	add    BYTE PTR [ecx],al
    177a:	9c                   	pushf  
    177b:	eb 01                	jmp    177e <sysEnter_Vector-0x12e882>
    177d:	00 00                	add    BYTE PTR [eax],al
    177f:	0b 63 00             	or     esp,DWORD PTR [ebx+0x0]
    1782:	01 14 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],edx
    1789:	91                   	xchg   ecx,eax
    178a:	60                   	pusha  
    178b:	0c 8b                	or     al,0x8b
    178d:	06                   	push   es
    178e:	00 00                	add    BYTE PTR [eax],al
    1790:	01 16                	add    DWORD PTR [esi],edx
    1792:	eb 01                	jmp    1795 <sysEnter_Vector-0x12e86b>
    1794:	00 00                	add    BYTE PTR [eax],al
    1796:	02 91 72 00 0d 25    	add    dl,BYTE PTR [ecx+0x250d0072]
    179c:	00 00                	add    BYTE PTR [eax],al
    179e:	00 fb                	add    bl,bh
    17a0:	01 00                	add    DWORD PTR [eax],eax
    17a2:	00 0e                	add    BYTE PTR [esi],cl
    17a4:	8f 00                	pop    DWORD PTR [eax]
    17a6:	00 00                	add    BYTE PTR [eax],al
    17a8:	01 00                	add    DWORD PTR [eax],eax
    17aa:	0f 61 07             	punpcklwd mm0,DWORD PTR [edi]
    17ad:	00 00                	add    BYTE PTR [eax],al
    17af:	01 1f                	add    DWORD PTR [edi],ebx
    17b1:	25 00 00 00 45       	and    eax,0x45000000
    17b6:	11 00                	adc    DWORD PTR [eax],eax
    17b8:	9f                   	lahf   
    17b9:	43                   	inc    ebx
    17ba:	00 00                	add    BYTE PTR [eax],al
    17bc:	00 01                	add    BYTE PTR [ecx],al
    17be:	9c                   	pushf  
    17bf:	21 02                	and    DWORD PTR [edx],eax
    17c1:	00 00                	add    BYTE PTR [eax],al
    17c3:	10 63 00             	adc    BYTE PTR [ebx+0x0],ah
    17c6:	01 21                	add    DWORD PTR [ecx],esp
    17c8:	25 00 00 00 02       	and    eax,0x2000000
    17cd:	91                   	xchg   ecx,eax
    17ce:	73 00                	jae    17d0 <sysEnter_Vector-0x12e830>
    17d0:	11 3c 07             	adc    DWORD PTR [edi+eax*1],edi
    17d3:	00 00                	add    BYTE PTR [eax],al
    17d5:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
    17db:	88 11                	mov    BYTE PTR [ecx],dl
    17dd:	00 9f bd 00 00 00    	add    BYTE PTR [edi+0xbd],bl
    17e3:	01 9c 9a 02 00 00 0a 	add    DWORD PTR [edx+ebx*4+0xa000002],ebx
    17ea:	8b 06                	mov    eax,DWORD PTR [esi]
    17ec:	00 00                	add    BYTE PTR [eax],al
    17ee:	01 2d 91 01 00 00    	add    DWORD PTR ds:0x191,ebp
    17f4:	02 91 00 0a 41 07    	add    dl,BYTE PTR [ecx+0x7410a00]
    17fa:	00 00                	add    BYTE PTR [eax],al
    17fc:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
    1802:	02 91 04 0a 2f 05    	add    dl,BYTE PTR [ecx+0x52f0a04]
    1808:	00 00                	add    BYTE PTR [eax],al
    180a:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
    1810:	02 91 08 0c 35 07    	add    dl,BYTE PTR [ecx+0x7350c08]
    1816:	00 00                	add    BYTE PTR [eax],al
    1818:	01 2f                	add    DWORD PTR [edi],ebp
    181a:	25 00 00 00 02       	and    eax,0x2000000
    181f:	91                   	xchg   ecx,eax
    1820:	6b 10 6c             	imul   edx,DWORD PTR [eax],0x6c
    1823:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1825:	00 01                	add    BYTE PTR [ecx],al
    1827:	30 3a                	xor    BYTE PTR [edx],bh
    1829:	00 00                	add    BYTE PTR [eax],al
    182b:	00 02                	add    BYTE PTR [edx],al
    182d:	91                   	xchg   ecx,eax
    182e:	6c                   	ins    BYTE PTR es:[edi],dx
    182f:	0c 57                	or     al,0x57
    1831:	07                   	pop    es
    1832:	00 00                	add    BYTE PTR [eax],al
    1834:	01 31                	add    DWORD PTR [ecx],esi
    1836:	eb 01                	jmp    1839 <sysEnter_Vector-0x12e7c7>
    1838:	00 00                	add    BYTE PTR [eax],al
    183a:	02 91 69 12 48 07    	add    dl,BYTE PTR [ecx+0x7481269]
    1840:	00 00                	add    BYTE PTR [eax],al
    1842:	01 37                	add    DWORD PTR [edi],esi
    1844:	c8 11 00 9f          	enter  0x11,0x9f
    1848:	00 13                	add    BYTE PTR [ebx],dl
    184a:	a3 00 00 00 03       	mov    ds:0x3000000,eax
    184f:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
    1852:	00 00                	add    BYTE PTR [eax],al
    1854:	05 03 8c 72 00       	add    eax,0x728c03
    1859:	9f                   	lahf   
    185a:	13 34 01             	adc    esi,DWORD PTR [ecx+eax*1]
    185d:	00 00                	add    BYTE PTR [eax],al
    185f:	03 3a                	add    edi,DWORD PTR [edx]
    1861:	56                   	push   esi
    1862:	00 00                	add    BYTE PTR [eax],al
    1864:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
    186a:	9f                   	lahf   
    186b:	13 7b 00             	adc    edi,DWORD PTR [ebx+0x0]
    186e:	00 00                	add    BYTE PTR [eax],al
    1870:	03 3b                	add    edi,DWORD PTR [ebx]
    1872:	56                   	push   esi
    1873:	00 00                	add    BYTE PTR [eax],al
    1875:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
    187b:	9f                   	lahf   
    187c:	13 7c 01 00          	adc    edi,DWORD PTR [ecx+eax*1+0x0]
    1880:	00 03                	add    BYTE PTR [ebx],al
    1882:	3c 7a                	cmp    al,0x7a
    1884:	00 00                	add    BYTE PTR [eax],al
    1886:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
    188c:	9f                   	lahf   
    188d:	13 6e 00             	adc    ebp,DWORD PTR [esi+0x0]
    1890:	00 00                	add    BYTE PTR [eax],al
    1892:	04 34                	add    al,0x34
    1894:	ef                   	out    dx,eax
    1895:	02 00                	add    al,BYTE PTR [eax]
    1897:	00 05 03 84 72 00    	add    BYTE PTR ds:0x728403,al
    189d:	9f                   	lahf   
    189e:	08 04 6f             	or     BYTE PTR [edi+ebp*2],al
    18a1:	00 00                	add    BYTE PTR [eax],al
    18a3:	00 13                	add    BYTE PTR [ebx],dl
    18a5:	91                   	xchg   ecx,eax
    18a6:	00 00                	add    BYTE PTR [eax],al
    18a8:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    18af:	05 03 80 72 00       	add    eax,0x728003
    18b4:	9f                   	lahf   
    18b5:	13 41 00             	adc    eax,DWORD PTR [ecx+0x0]
    18b8:	00 00                	add    BYTE PTR [eax],al
    18ba:	05 58 17 03 00       	add    eax,0x31758
    18bf:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
    18c5:	9f                   	lahf   
    18c6:	08 04 91             	or     BYTE PTR [ecx+edx*4],al
    18c9:	01 00                	add    DWORD PTR [eax],eax
    18cb:	00 00                	add    BYTE PTR [eax],al
    18cd:	56                   	push   esi
    18ce:	0b 00                	or     eax,DWORD PTR [eax]
    18d0:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    18d3:	d8 06                	fadd   DWORD PTR [esi]
    18d5:	00 00                	add    BYTE PTR [eax],al
    18d7:	04 01                	add    al,0x1
    18d9:	ac                   	lods   al,BYTE PTR ds:[esi]
    18da:	00 00                	add    BYTE PTR [eax],al
    18dc:	00 0c 26             	add    BYTE PTR [esi+eiz*1],cl
    18df:	09 00                	or     DWORD PTR [eax],eax
    18e1:	00 1e                	add    BYTE PTR [esi],bl
    18e3:	00 00                	add    BYTE PTR [eax],al
    18e5:	00 48 12             	add    BYTE PTR [eax+0x12],cl
    18e8:	00 9f c4 0c 00 00    	add    BYTE PTR [edi+0xcc4],bl
    18ee:	42                   	inc    edx
    18ef:	09 00                	or     DWORD PTR [eax],eax
    18f1:	00 02                	add    BYTE PTR [edx],al
    18f3:	92                   	xchg   edx,eax
    18f4:	08 00                	or     BYTE PTR [eax],al
    18f6:	00 02                	add    BYTE PTR [edx],al
    18f8:	28 30                	sub    BYTE PTR [eax],dh
    18fa:	00 00                	add    BYTE PTR [eax],al
    18fc:	00 03                	add    BYTE PTR [ebx],al
    18fe:	04 c6                	add    al,0xc6
    1900:	07                   	pop    es
    1901:	00 00                	add    BYTE PTR [eax],al
    1903:	3a 00                	cmp    al,BYTE PTR [eax]
    1905:	00 00                	add    BYTE PTR [eax],al
    1907:	04 01                	add    al,0x1
    1909:	06                   	push   es
    190a:	8c 00                	mov    WORD PTR [eax],es
    190c:	00 00                	add    BYTE PTR [eax],al
    190e:	02 99 08 00 00 02    	add    bl,BYTE PTR [ecx+0x2000008]
    1914:	62 25 00 00 00 04    	bound  esp,QWORD PTR ds:0x4000000
    191a:	01 06                	add    DWORD PTR [esi],eax
    191c:	85 00                	test   DWORD PTR [eax],eax
    191e:	00 00                	add    BYTE PTR [eax],al
    1920:	04 02                	add    al,0x2
    1922:	05 72 01 00 00       	add    eax,0x172
    1927:	05 04 05 69 6e       	add    eax,0x6e690504
    192c:	74 00                	je     192e <sysEnter_Vector-0x12e6d2>
    192e:	04 08                	add    al,0x8
    1930:	05 00 00 00 00       	add    eax,0x0
    1935:	04 01                	add    al,0x1
    1937:	08 83 00 00 00 04    	or     BYTE PTR [ebx+0x4000000],al
    193d:	02 07                	add    al,BYTE PTR [edi]
    193f:	19 01                	sbb    DWORD PTR [ecx],eax
    1941:	00 00                	add    BYTE PTR [eax],al
    1943:	02 0e                	add    cl,BYTE PTR [esi]
    1945:	00 00                	add    BYTE PTR [eax],al
    1947:	00 03                	add    BYTE PTR [ebx],al
    1949:	34 81                	xor    al,0x81
    194b:	00 00                	add    BYTE PTR [eax],al
    194d:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    1950:	07                   	pop    es
    1951:	61                   	popa   
    1952:	00 00                	add    BYTE PTR [eax],al
    1954:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
    1957:	07                   	pop    es
    1958:	57                   	push   edi
    1959:	00 00                	add    BYTE PTR [eax],al
    195b:	00 02                	add    BYTE PTR [edx],al
    195d:	4d                   	dec    ebp
    195e:	00 00                	add    BYTE PTR [eax],al
    1960:	00 03                	add    BYTE PTR [ebx],al
    1962:	56                   	push   esi
    1963:	81 00 00 00 02 bd    	add    DWORD PTR [eax],0xbd020000
    1969:	02 00                	add    al,BYTE PTR [eax]
    196b:	00 04 d8             	add    BYTE PTR [eax+ebx*8],al
    196e:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
    1974:	05 05 00 00 00       	add    eax,0x5
    1979:	04 0c                	add    al,0xc
    197b:	04 66                	add    al,0x66
    197d:	01 00                	add    DWORD PTR [eax],eax
    197f:	00 06                	add    BYTE PTR [esi],al
    1981:	04 b9                	add    al,0xb9
    1983:	00 00                	add    BYTE PTR [eax],al
    1985:	00 07                	add    BYTE PTR [edi],al
    1987:	3a 00                	cmp    al,BYTE PTR [eax]
    1989:	00 00                	add    BYTE PTR [eax],al
    198b:	04 01                	add    al,0x1
    198d:	02 13                	add    dl,BYTE PTR [ebx]
    198f:	01 00                	add    DWORD PTR [eax],eax
    1991:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    1994:	07                   	pop    es
    1995:	83 01 00             	add    DWORD PTR [ecx],0x0
    1998:	00 08                	add    BYTE PTR [eax],cl
    199a:	d1 03                	rol    DWORD PTR [ebx],1
    199c:	00 00                	add    BYTE PTR [eax],al
    199e:	04 81                	add    al,0x81
    19a0:	00 00                	add    BYTE PTR [eax],al
    19a2:	00 05 15 c0 01 00    	add    BYTE PTR ds:0x1c015,al
    19a8:	00 09                	add    BYTE PTR [ecx],cl
    19aa:	71 03                	jno    19af <sysEnter_Vector-0x12e651>
    19ac:	00 00                	add    BYTE PTR [eax],al
    19ae:	00 09                	add    BYTE PTR [ecx],cl
    19b0:	dd 04 00             	fld    QWORD PTR [eax+eax*1]
    19b3:	00 01                	add    BYTE PTR [ecx],al
    19b5:	09 d6                	or     esi,edx
    19b7:	02 00                	add    al,BYTE PTR [eax]
    19b9:	00 02                	add    BYTE PTR [edx],al
    19bb:	09 cf                	or     edi,ecx
    19bd:	04 00                	add    al,0x0
    19bf:	00 03                	add    BYTE PTR [ebx],al
    19c1:	09 08                	or     DWORD PTR [eax],ecx
    19c3:	03 00                	add    eax,DWORD PTR [eax]
    19c5:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    19c8:	f3 02 00             	repz add al,BYTE PTR [eax]
    19cb:	00 05 09 64 03 00    	add    BYTE PTR ds:0x36409,al
    19d1:	00 0a                	add    BYTE PTR [edx],cl
    19d3:	09 45 04             	or     DWORD PTR [ebp+0x4],eax
    19d6:	00 00                	add    BYTE PTR [eax],al
    19d8:	0b 09                	or     ecx,DWORD PTR [ecx]
    19da:	81 03 00 00 0c 09    	add    DWORD PTR [ebx],0x90c0000
    19e0:	b4 04                	mov    ah,0x4
    19e2:	00 00                	add    BYTE PTR [eax],al
    19e4:	0d 09 52 04 00       	or     eax,0x45209
    19e9:	00 0e                	add    BYTE PTR [esi],cl
    19eb:	09 a7 04 00 00 0f    	or     DWORD PTR [edi+0xf000004],esp
    19f1:	09 3f                	or     DWORD PTR [edi],edi
    19f3:	03 00                	add    eax,DWORD PTR [eax]
    19f5:	00 10                	add    BYTE PTR [eax],dl
    19f7:	09 5f 04             	or     DWORD PTR [edi+0x4],ebx
    19fa:	00 00                	add    BYTE PTR [eax],al
    19fc:	4f                   	dec    edi
    19fd:	09 f1                	or     ecx,esi
    19ff:	03 00                	add    eax,DWORD PTR [eax]
    1a01:	00 50 09             	add    BYTE PTR [eax+0x9],dl
    1a04:	8a 04 00             	mov    al,BYTE PTR [eax+eax*1]
    1a07:	00 59 09             	add    BYTE PTR [ecx+0x9],bl
    1a0a:	8b 02                	mov    eax,DWORD PTR [edx]
    1a0c:	00 00                	add    BYTE PTR [eax],al
    1a0e:	61                   	popa   
    1a0f:	09 0e                	or     DWORD PTR [esi],ecx
    1a11:	04 00                	add    al,0x0
    1a13:	00 97 0a a6 03 00    	add    BYTE PTR [edi+0x3a60a],dl
    1a19:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    1a1c:	0a 7d 04             	or     bh,BYTE PTR [ebp+0x4]
    1a1f:	00 00                	add    BYTE PTR [eax],al
    1a21:	64 01 0a             	add    DWORD PTR fs:[edx],ecx
    1a24:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    1a27:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    1a2a:	0a af 02 00 00 66    	or     ch,BYTE PTR [edi+0x66000002]
    1a30:	01 0a                	add    DWORD PTR [edx],ecx
    1a32:	2a 03                	sub    al,BYTE PTR [ebx]
    1a34:	00 00                	add    BYTE PTR [eax],al
    1a36:	67 01 0a             	add    DWORD PTR [bp+si],ecx
    1a39:	1d 03 00 00 68       	sbb    eax,0x68000003
    1a3e:	01 0a                	add    DWORD PTR [edx],ecx
    1a40:	f7 04 00 00 69 01 0a 	test   DWORD PTR [eax+eax*1],0xa016900
    1a47:	9e                   	sahf   
    1a48:	02 00                	add    al,BYTE PTR [eax]
    1a4a:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    1a4d:	0a e3                	or     ah,bl
    1a4f:	02 00                	add    al,BYTE PTR [eax]
    1a51:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    1a54:	0a c1                	or     al,cl
    1a56:	04 00                	add    al,0x0
    1a58:	00 00                	add    BYTE PTR [eax],al
    1a5a:	03 0a                	add    ecx,DWORD PTR [edx]
    1a5c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1a5d:	04 00                	add    al,0x0
    1a5f:	00 01                	add    BYTE PTR [ecx],al
    1a61:	03 0a                	add    ecx,DWORD PTR [edx]
    1a63:	bd 03 00 00 02       	mov    ebp,0x2000003
    1a68:	03 0a                	add    ecx,DWORD PTR [edx]
    1a6a:	96                   	xchg   esi,eax
    1a6b:	03 00                	add    eax,DWORD PTR [eax]
    1a6d:	00 03                	add    BYTE PTR [ebx],al
    1a6f:	03 0a                	add    ecx,DWORD PTR [edx]
    1a71:	34 04                	xor    al,0x4
    1a73:	00 00                	add    BYTE PTR [eax],al
    1a75:	04 03                	add    al,0x3
    1a77:	0a 97 04 00 00 05    	or     dl,BYTE PTR [edi+0x5000004]
    1a7d:	03 0a                	add    ecx,DWORD PTR [edx]
    1a7f:	e2 03                	loop   1a84 <sysEnter_Vector-0x12e57c>
    1a81:	00 00                	add    BYTE PTR [eax],al
    1a83:	06                   	push   es
    1a84:	03 0a                	add    ecx,DWORD PTR [edx]
    1a86:	52                   	push   edx
    1a87:	03 00                	add    eax,DWORD PTR [eax]
    1a89:	00 00                	add    BYTE PTR [eax],al
    1a8b:	09 00                	or     DWORD PTR [eax],eax
    1a8d:	0b 04 04             	or     eax,DWORD PTR [esp+eax*1]
    1a90:	04 07                	add    al,0x7
    1a92:	5c                   	pop    esp
    1a93:	00 00                	add    BYTE PTR [eax],al
    1a95:	00 06                	add    BYTE PTR [esi],al
    1a97:	04 3a                	add    al,0x3a
    1a99:	00 00                	add    BYTE PTR [eax],al
    1a9b:	00 0c 5c             	add    BYTE PTR [esp+ebx*2],cl
    1a9e:	08 00                	or     BYTE PTR [eax],al
    1aa0:	00 01                	add    BYTE PTR [ecx],al
    1aa2:	11 5a 00             	adc    DWORD PTR [edx+0x0],ebx
    1aa5:	00 00                	add    BYTE PTR [eax],al
    1aa7:	48                   	dec    eax
    1aa8:	12 00                	adc    al,BYTE PTR [eax]
    1aaa:	9f                   	lahf   
    1aab:	3a 00                	cmp    al,BYTE PTR [eax]
    1aad:	00 00                	add    BYTE PTR [eax],al
    1aaf:	01 9c 3d 02 00 00 0d 	add    DWORD PTR [ebp+edi*1+0xd000002],ebx
    1ab6:	12 08                	adc    cl,BYTE PTR [eax]
    1ab8:	00 00                	add    BYTE PTR [eax],al
    1aba:	01 11                	add    DWORD PTR [ecx],edx
    1abc:	5a                   	pop    edx
    1abd:	00 00                	add    BYTE PTR [eax],al
    1abf:	00 02                	add    BYTE PTR [edx],al
    1ac1:	91                   	xchg   ecx,eax
    1ac2:	00 0d b8 08 00 00    	add    BYTE PTR ds:0x8b8,cl
    1ac8:	01 11                	add    DWORD PTR [ecx],edx
    1aca:	76 00                	jbe    1acc <sysEnter_Vector-0x12e534>
    1acc:	00 00                	add    BYTE PTR [eax],al
    1ace:	02 91 04 0d bf 08    	add    dl,BYTE PTR [ecx+0x8bf0d04]
    1ad4:	00 00                	add    BYTE PTR [eax],al
    1ad6:	01 11                	add    DWORD PTR [ecx],edx
    1ad8:	76 00                	jbe    1ada <sysEnter_Vector-0x12e526>
    1ada:	00 00                	add    BYTE PTR [eax],al
    1adc:	02 91 08 0d c6 08    	add    dl,BYTE PTR [ecx+0x8c60d08]
    1ae2:	00 00                	add    BYTE PTR [eax],al
    1ae4:	01 11                	add    DWORD PTR [ecx],edx
    1ae6:	76 00                	jbe    1ae8 <sysEnter_Vector-0x12e518>
    1ae8:	00 00                	add    BYTE PTR [eax],al
    1aea:	02 91 0c 0d cd 08    	add    dl,BYTE PTR [ecx+0x8cd0d0c]
    1af0:	00 00                	add    BYTE PTR [eax],al
    1af2:	01 11                	add    DWORD PTR [ecx],edx
    1af4:	76 00                	jbe    1af6 <sysEnter_Vector-0x12e50a>
    1af6:	00 00                	add    BYTE PTR [eax],al
    1af8:	02 91 10 0e 06 05    	add    dl,BYTE PTR [ecx+0x5060e10]
    1afe:	00 00                	add    BYTE PTR [eax],al
    1b00:	01 13                	add    DWORD PTR [ebx],edx
    1b02:	5a                   	pop    edx
    1b03:	00 00                	add    BYTE PTR [eax],al
    1b05:	00 02                	add    BYTE PTR [edx],al
    1b07:	91                   	xchg   ecx,eax
    1b08:	6c                   	ins    BYTE PTR es:[edi],dx
    1b09:	00 0c 50             	add    BYTE PTR [eax+edx*2],cl
    1b0c:	08 00                	or     BYTE PTR [eax],al
    1b0e:	00 01                	add    BYTE PTR [ecx],al
    1b10:	18 5a 00             	sbb    BYTE PTR [edx+0x0],bl
    1b13:	00 00                	add    BYTE PTR [eax],al
    1b15:	82                   	(bad)  
    1b16:	12 00                	adc    al,BYTE PTR [eax]
    1b18:	9f                   	lahf   
    1b19:	3c 00                	cmp    al,0x0
    1b1b:	00 00                	add    BYTE PTR [eax],al
    1b1d:	01 9c 9d 02 00 00 0d 	add    DWORD PTR [ebp+ebx*4+0xd000002],ebx
    1b24:	12 08                	adc    cl,BYTE PTR [eax]
    1b26:	00 00                	add    BYTE PTR [eax],al
    1b28:	01 18                	add    DWORD PTR [eax],ebx
    1b2a:	5a                   	pop    edx
    1b2b:	00 00                	add    BYTE PTR [eax],al
    1b2d:	00 02                	add    BYTE PTR [edx],al
    1b2f:	91                   	xchg   ecx,eax
    1b30:	00 0d b8 08 00 00    	add    BYTE PTR ds:0x8b8,cl
    1b36:	01 18                	add    DWORD PTR [eax],ebx
    1b38:	76 00                	jbe    1b3a <sysEnter_Vector-0x12e4c6>
    1b3a:	00 00                	add    BYTE PTR [eax],al
    1b3c:	02 91 04 0d bf 08    	add    dl,BYTE PTR [ecx+0x8bf0d04]
    1b42:	00 00                	add    BYTE PTR [eax],al
    1b44:	01 18                	add    DWORD PTR [eax],ebx
    1b46:	76 00                	jbe    1b48 <sysEnter_Vector-0x12e4b8>
    1b48:	00 00                	add    BYTE PTR [eax],al
    1b4a:	02 91 08 0d c6 08    	add    dl,BYTE PTR [ecx+0x8c60d08]
    1b50:	00 00                	add    BYTE PTR [eax],al
    1b52:	01 18                	add    DWORD PTR [eax],ebx
    1b54:	76 00                	jbe    1b56 <sysEnter_Vector-0x12e4aa>
    1b56:	00 00                	add    BYTE PTR [eax],al
    1b58:	02 91 0c 0e 06 05    	add    dl,BYTE PTR [ecx+0x5060e0c]
    1b5e:	00 00                	add    BYTE PTR [eax],al
    1b60:	01 1a                	add    DWORD PTR [edx],ebx
    1b62:	5a                   	pop    edx
    1b63:	00 00                	add    BYTE PTR [eax],al
    1b65:	00 02                	add    BYTE PTR [edx],al
    1b67:	91                   	xchg   ecx,eax
    1b68:	6c                   	ins    BYTE PTR es:[edi],dx
    1b69:	00 0c 44             	add    BYTE PTR [esp+eax*2],cl
    1b6c:	08 00                	or     BYTE PTR [eax],al
    1b6e:	00 01                	add    BYTE PTR [ecx],al
    1b70:	1f                   	pop    ds
    1b71:	5a                   	pop    edx
    1b72:	00 00                	add    BYTE PTR [eax],al
    1b74:	00 be 12 00 9f 3e    	add    BYTE PTR [esi+0x3e9f0012],bh
    1b7a:	00 00                	add    BYTE PTR [eax],al
    1b7c:	00 01                	add    BYTE PTR [ecx],al
    1b7e:	9c                   	pushf  
    1b7f:	ef                   	out    dx,eax
    1b80:	02 00                	add    al,BYTE PTR [eax]
    1b82:	00 0d 12 08 00 00    	add    BYTE PTR ds:0x812,cl
    1b88:	01 1f                	add    DWORD PTR [edi],ebx
    1b8a:	5a                   	pop    edx
    1b8b:	00 00                	add    BYTE PTR [eax],al
    1b8d:	00 02                	add    BYTE PTR [edx],al
    1b8f:	91                   	xchg   ecx,eax
    1b90:	00 0d b8 08 00 00    	add    BYTE PTR ds:0x8b8,cl
    1b96:	01 1f                	add    DWORD PTR [edi],ebx
    1b98:	76 00                	jbe    1b9a <sysEnter_Vector-0x12e466>
    1b9a:	00 00                	add    BYTE PTR [eax],al
    1b9c:	02 91 04 0d bf 08    	add    dl,BYTE PTR [ecx+0x8bf0d04]
    1ba2:	00 00                	add    BYTE PTR [eax],al
    1ba4:	01 1f                	add    DWORD PTR [edi],ebx
    1ba6:	76 00                	jbe    1ba8 <sysEnter_Vector-0x12e458>
    1ba8:	00 00                	add    BYTE PTR [eax],al
    1baa:	02 91 08 0e 06 05    	add    dl,BYTE PTR [ecx+0x5060e08]
    1bb0:	00 00                	add    BYTE PTR [eax],al
    1bb2:	01 21                	add    DWORD PTR [ecx],esp
    1bb4:	5a                   	pop    edx
    1bb5:	00 00                	add    BYTE PTR [eax],al
    1bb7:	00 02                	add    BYTE PTR [edx],al
    1bb9:	91                   	xchg   ecx,eax
    1bba:	6c                   	ins    BYTE PTR es:[edi],dx
    1bbb:	00 0c 38             	add    BYTE PTR [eax+edi*1],cl
    1bbe:	08 00                	or     BYTE PTR [eax],al
    1bc0:	00 01                	add    BYTE PTR [ecx],al
    1bc2:	26                   	es
    1bc3:	5a                   	pop    edx
    1bc4:	00 00                	add    BYTE PTR [eax],al
    1bc6:	00 fc                	add    ah,bh
    1bc8:	12 00                	adc    al,BYTE PTR [eax]
    1bca:	9f                   	lahf   
    1bcb:	40                   	inc    eax
    1bcc:	00 00                	add    BYTE PTR [eax],al
    1bce:	00 01                	add    BYTE PTR [ecx],al
    1bd0:	9c                   	pushf  
    1bd1:	33 03                	xor    eax,DWORD PTR [ebx]
    1bd3:	00 00                	add    BYTE PTR [eax],al
    1bd5:	0d 12 08 00 00       	or     eax,0x812
    1bda:	01 26                	add    DWORD PTR [esi],esp
    1bdc:	5a                   	pop    edx
    1bdd:	00 00                	add    BYTE PTR [eax],al
    1bdf:	00 02                	add    BYTE PTR [edx],al
    1be1:	91                   	xchg   ecx,eax
    1be2:	00 0d b8 08 00 00    	add    BYTE PTR ds:0x8b8,cl
    1be8:	01 26                	add    DWORD PTR [esi],esp
    1bea:	76 00                	jbe    1bec <sysEnter_Vector-0x12e414>
    1bec:	00 00                	add    BYTE PTR [eax],al
    1bee:	02 91 04 0e 06 05    	add    dl,BYTE PTR [ecx+0x5060e04]
    1bf4:	00 00                	add    BYTE PTR [eax],al
    1bf6:	01 28                	add    DWORD PTR [eax],ebp
    1bf8:	5a                   	pop    edx
    1bf9:	00 00                	add    BYTE PTR [eax],al
    1bfb:	00 02                	add    BYTE PTR [edx],al
    1bfd:	91                   	xchg   ecx,eax
    1bfe:	6c                   	ins    BYTE PTR es:[edi],dx
    1bff:	00 0c 44             	add    BYTE PTR [esp+eax*2],cl
    1c02:	09 00                	or     DWORD PTR [eax],eax
    1c04:	00 01                	add    BYTE PTR [ecx],al
    1c06:	2d 5a 00 00 00       	sub    eax,0x5a
    1c0b:	3c 13                	cmp    al,0x13
    1c0d:	00 9f 42 00 00 00    	add    BYTE PTR [edi+0x42],bl
    1c13:	01 9c 69 03 00 00 0d 	add    DWORD PTR [ecx+ebp*2+0xd000003],ebx
    1c1a:	12 08                	adc    cl,BYTE PTR [eax]
    1c1c:	00 00                	add    BYTE PTR [eax],al
    1c1e:	01 2d 5a 00 00 00    	add    DWORD PTR ds:0x5a,ebp
    1c24:	02 91 00 0e 06 05    	add    dl,BYTE PTR [ecx+0x5060e00]
    1c2a:	00 00                	add    BYTE PTR [eax],al
    1c2c:	01 2f                	add    DWORD PTR [edi],ebp
    1c2e:	5a                   	pop    edx
    1c2f:	00 00                	add    BYTE PTR [eax],al
    1c31:	00 02                	add    BYTE PTR [edx],al
    1c33:	91                   	xchg   ecx,eax
    1c34:	6c                   	ins    BYTE PTR es:[edi],dx
    1c35:	00 0f                	add    BYTE PTR [edi],cl
    1c37:	b6 07                	mov    dh,0x7
    1c39:	00 00                	add    BYTE PTR [eax],al
    1c3b:	01 34 7e             	add    DWORD PTR [esi+edi*2],esi
    1c3e:	13 00                	adc    eax,DWORD PTR [eax]
    1c40:	9f                   	lahf   
    1c41:	cb                   	retf   
    1c42:	00 00                	add    BYTE PTR [eax],al
    1c44:	00 01                	add    BYTE PTR [ecx],al
    1c46:	9c                   	pushf  
    1c47:	10 5f 09             	adc    BYTE PTR [edi+0x9],bl
    1c4a:	00 00                	add    BYTE PTR [eax],al
    1c4c:	01 48 49             	add    DWORD PTR [eax+0x49],ecx
    1c4f:	14 00                	adc    al,0x0
    1c51:	9f                   	lahf   
    1c52:	23 00                	and    eax,DWORD PTR [eax]
    1c54:	00 00                	add    BYTE PTR [eax],al
    1c56:	01 9c 11 69 07 00 00 	add    DWORD PTR [ecx+edx*1+0x769],ebx
    1c5d:	01 4e 5a             	add    DWORD PTR [esi+0x5a],ecx
    1c60:	00 00                	add    BYTE PTR [eax],al
    1c62:	00 6c 14 00          	add    BYTE PTR [esp+edx*1+0x0],ch
    1c66:	9f                   	lahf   
    1c67:	59                   	pop    ecx
    1c68:	00 00                	add    BYTE PTR [eax],al
    1c6a:	00 01                	add    BYTE PTR [ecx],al
    1c6c:	9c                   	pushf  
    1c6d:	d0 03                	rol    BYTE PTR [ebx],1
    1c6f:	00 00                	add    BYTE PTR [eax],al
    1c71:	0d e7 08 00 00       	or     eax,0x8e7
    1c76:	01 4e b3             	add    DWORD PTR [esi-0x4d],ecx
    1c79:	00 00                	add    BYTE PTR [eax],al
    1c7b:	00 02                	add    BYTE PTR [edx],al
    1c7d:	91                   	xchg   ecx,eax
    1c7e:	00 12                	add    BYTE PTR [edx],dl
    1c80:	0e                   	push   cs
    1c81:	ac                   	lods   al,BYTE PTR ds:[esi]
    1c82:	09 00                	or     DWORD PTR [eax],eax
    1c84:	00 01                	add    BYTE PTR [ecx],al
    1c86:	50                   	push   eax
    1c87:	41                   	inc    ecx
    1c88:	00 00                	add    BYTE PTR [eax],al
    1c8a:	00 02                	add    BYTE PTR [edx],al
    1c8c:	91                   	xchg   ecx,eax
    1c8d:	68 0e ba 06 00       	push   0x6ba0e
    1c92:	00 01                	add    BYTE PTR [ecx],al
    1c94:	53                   	push   ebx
    1c95:	5a                   	pop    edx
    1c96:	00 00                	add    BYTE PTR [eax],al
    1c98:	00 02                	add    BYTE PTR [edx],al
    1c9a:	91                   	xchg   ecx,eax
    1c9b:	6c                   	ins    BYTE PTR es:[edi],dx
    1c9c:	00 11                	add    BYTE PTR [ecx],dl
    1c9e:	35 0c 00 00 01       	xor    eax,0x100000c
    1ca3:	58                   	pop    eax
    1ca4:	5a                   	pop    edx
    1ca5:	00 00                	add    BYTE PTR [eax],al
    1ca7:	00 c5                	add    ch,al
    1ca9:	14 00                	adc    al,0x0
    1cab:	9f                   	lahf   
    1cac:	54                   	push   esp
    1cad:	00 00                	add    BYTE PTR [eax],al
    1caf:	00 01                	add    BYTE PTR [ecx],al
    1cb1:	9c                   	pushf  
    1cb2:	15 04 00 00 0d       	adc    eax,0xd000004
    1cb7:	e7 08                	out    0x8,eax
    1cb9:	00 00                	add    BYTE PTR [eax],al
    1cbb:	01 58 b3             	add    DWORD PTR [eax-0x4d],ebx
    1cbe:	00 00                	add    BYTE PTR [eax],al
    1cc0:	00 02                	add    BYTE PTR [edx],al
    1cc2:	91                   	xchg   ecx,eax
    1cc3:	00 12                	add    BYTE PTR [edx],dl
    1cc5:	0e                   	push   cs
    1cc6:	ac                   	lods   al,BYTE PTR ds:[esi]
    1cc7:	09 00                	or     DWORD PTR [eax],eax
    1cc9:	00 01                	add    BYTE PTR [ecx],al
    1ccb:	5a                   	pop    edx
    1ccc:	41                   	inc    ecx
    1ccd:	00 00                	add    BYTE PTR [eax],al
    1ccf:	00 02                	add    BYTE PTR [edx],al
    1cd1:	91                   	xchg   ecx,eax
    1cd2:	68 0e ba 06 00       	push   0x6ba0e
    1cd7:	00 01                	add    BYTE PTR [ecx],al
    1cd9:	5d                   	pop    ebp
    1cda:	5a                   	pop    edx
    1cdb:	00 00                	add    BYTE PTR [eax],al
    1cdd:	00 02                	add    BYTE PTR [edx],al
    1cdf:	91                   	xchg   ecx,eax
    1ce0:	6c                   	ins    BYTE PTR es:[edi],dx
    1ce1:	00 11                	add    BYTE PTR [ecx],dl
    1ce3:	57                   	push   edi
    1ce4:	09 00                	or     DWORD PTR [eax],eax
    1ce6:	00 01                	add    BYTE PTR [ecx],al
    1ce8:	61                   	popa   
    1ce9:	5a                   	pop    edx
    1cea:	00 00                	add    BYTE PTR [eax],al
    1cec:	00 19                	add    BYTE PTR [ecx],bl
    1cee:	15 00 9f 54 00       	adc    eax,0x549f00
    1cf3:	00 00                	add    BYTE PTR [eax],al
    1cf5:	01 9c 5a 04 00 00 0d 	add    DWORD PTR [edx+ebx*2+0xd000004],ebx
    1cfc:	e7 08                	out    0x8,eax
    1cfe:	00 00                	add    BYTE PTR [eax],al
    1d00:	01 61 b3             	add    DWORD PTR [ecx-0x4d],esp
    1d03:	00 00                	add    BYTE PTR [eax],al
    1d05:	00 02                	add    BYTE PTR [edx],al
    1d07:	91                   	xchg   ecx,eax
    1d08:	00 12                	add    BYTE PTR [edx],dl
    1d0a:	0e                   	push   cs
    1d0b:	ac                   	lods   al,BYTE PTR ds:[esi]
    1d0c:	09 00                	or     DWORD PTR [eax],eax
    1d0e:	00 01                	add    BYTE PTR [ecx],al
    1d10:	63 41 00             	arpl   WORD PTR [ecx+0x0],ax
    1d13:	00 00                	add    BYTE PTR [eax],al
    1d15:	02 91 68 0e ba 06    	add    dl,BYTE PTR [ecx+0x6ba0e68]
    1d1b:	00 00                	add    BYTE PTR [eax],al
    1d1d:	01 66 5a             	add    DWORD PTR [esi+0x5a],esp
    1d20:	00 00                	add    BYTE PTR [eax],al
    1d22:	00 02                	add    BYTE PTR [edx],al
    1d24:	91                   	xchg   ecx,eax
    1d25:	6c                   	ins    BYTE PTR es:[edi],dx
    1d26:	00 11                	add    BYTE PTR [ecx],dl
    1d28:	b1 09                	mov    cl,0x9
    1d2a:	00 00                	add    BYTE PTR [eax],al
    1d2c:	01 6a 5a             	add    DWORD PTR [edx+0x5a],ebp
    1d2f:	00 00                	add    BYTE PTR [eax],al
    1d31:	00 6d 15             	add    BYTE PTR [ebp+0x15],ch
    1d34:	00 9f 34 00 00 00    	add    BYTE PTR [edi+0x34],bl
    1d3a:	01 9c 91 04 00 00 0d 	add    DWORD PTR [ecx+edx*4+0xd000004],ebx
    1d41:	e7 08                	out    0x8,eax
    1d43:	00 00                	add    BYTE PTR [eax],al
    1d45:	01 6a b3             	add    DWORD PTR [edx-0x4d],ebp
    1d48:	00 00                	add    BYTE PTR [eax],al
    1d4a:	00 02                	add    BYTE PTR [edx],al
    1d4c:	91                   	xchg   ecx,eax
    1d4d:	00 12                	add    BYTE PTR [edx],dl
    1d4f:	0e                   	push   cs
    1d50:	ac                   	lods   al,BYTE PTR ds:[esi]
    1d51:	09 00                	or     DWORD PTR [eax],eax
    1d53:	00 01                	add    BYTE PTR [ecx],al
    1d55:	6c                   	ins    BYTE PTR es:[edi],dx
    1d56:	41                   	inc    ecx
    1d57:	00 00                	add    BYTE PTR [eax],al
    1d59:	00 02                	add    BYTE PTR [edx],al
    1d5b:	91                   	xchg   ecx,eax
    1d5c:	74 00                	je     1d5e <sysEnter_Vector-0x12e2a2>
    1d5e:	11 bd 09 00 00 01    	adc    DWORD PTR [ebp+0x1000009],edi
    1d64:	72 5a                	jb     1dc0 <sysEnter_Vector-0x12e240>
    1d66:	00 00                	add    BYTE PTR [eax],al
    1d68:	00 a1 15 00 9f 37    	add    BYTE PTR [ecx+0x379f0015],ah
    1d6e:	00 00                	add    BYTE PTR [eax],al
    1d70:	00 01                	add    BYTE PTR [ecx],al
    1d72:	9c                   	pushf  
    1d73:	d6                   	(bad)  
    1d74:	04 00                	add    al,0x0
    1d76:	00 0d 07 08 00 00    	add    BYTE PTR ds:0x807,cl
    1d7c:	01 72 76             	add    DWORD PTR [edx+0x76],esi
    1d7f:	00 00                	add    BYTE PTR [eax],al
    1d81:	00 02                	add    BYTE PTR [edx],al
    1d83:	91                   	xchg   ecx,eax
    1d84:	00 0d e7 08 00 00    	add    BYTE PTR ds:0x8e7,cl
    1d8a:	01 72 b3             	add    DWORD PTR [edx-0x4d],esi
    1d8d:	00 00                	add    BYTE PTR [eax],al
    1d8f:	00 02                	add    BYTE PTR [edx],al
    1d91:	91                   	xchg   ecx,eax
    1d92:	04 12                	add    al,0x12
    1d94:	0e                   	push   cs
    1d95:	ac                   	lods   al,BYTE PTR ds:[esi]
    1d96:	09 00                	or     DWORD PTR [eax],eax
    1d98:	00 01                	add    BYTE PTR [ecx],al
    1d9a:	74 41                	je     1ddd <sysEnter_Vector-0x12e223>
    1d9c:	00 00                	add    BYTE PTR [eax],al
    1d9e:	00 02                	add    BYTE PTR [edx],al
    1da0:	91                   	xchg   ecx,eax
    1da1:	74 00                	je     1da3 <sysEnter_Vector-0x12e25d>
    1da3:	11 a1 08 00 00 01    	adc    DWORD PTR [ecx+0x1000008],esp
    1da9:	7c 5a                	jl     1e05 <sysEnter_Vector-0x12e1fb>
    1dab:	00 00                	add    BYTE PTR [eax],al
    1dad:	00 d8                	add    al,bl
    1daf:	15 00 9f 37 00       	adc    eax,0x379f00
    1db4:	00 00                	add    BYTE PTR [eax],al
    1db6:	01 9c 1b 05 00 00 0d 	add    DWORD PTR [ebx+ebx*1+0xd000005],ebx
    1dbd:	07                   	pop    es
    1dbe:	08 00                	or     BYTE PTR [eax],al
    1dc0:	00 01                	add    BYTE PTR [ecx],al
    1dc2:	7c 76                	jl     1e3a <sysEnter_Vector-0x12e1c6>
    1dc4:	00 00                	add    BYTE PTR [eax],al
    1dc6:	00 02                	add    BYTE PTR [edx],al
    1dc8:	91                   	xchg   ecx,eax
    1dc9:	00 0d e7 08 00 00    	add    BYTE PTR ds:0x8e7,cl
    1dcf:	01 7c b3 00          	add    DWORD PTR [ebx+esi*4+0x0],edi
    1dd3:	00 00                	add    BYTE PTR [eax],al
    1dd5:	02 91 04 12 0e ac    	add    dl,BYTE PTR [ecx-0x53f1edfc]
    1ddb:	09 00                	or     DWORD PTR [eax],eax
    1ddd:	00 01                	add    BYTE PTR [ecx],al
    1ddf:	7e 41                	jle    1e22 <sysEnter_Vector-0x12e1de>
    1de1:	00 00                	add    BYTE PTR [eax],al
    1de3:	00 02                	add    BYTE PTR [edx],al
    1de5:	91                   	xchg   ecx,eax
    1de6:	74 00                	je     1de8 <sysEnter_Vector-0x12e218>
    1de8:	0c 23                	or     al,0x23
    1dea:	08 00                	or     BYTE PTR [eax],al
    1dec:	00 01                	add    BYTE PTR [ecx],al
    1dee:	86 81 00 00 00 0f    	xchg   BYTE PTR [ecx+0xf000000],al
    1df4:	16                   	push   ss
    1df5:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
    1dfb:	01 9c 67 05 00 00 0d 	add    DWORD PTR [edi+eiz*2+0xd000005],ebx
    1e02:	06                   	push   es
    1e03:	09 00                	or     DWORD PTR [eax],eax
    1e05:	00 01                	add    BYTE PTR [ecx],al
    1e07:	86 81 00 00 00 02    	xchg   BYTE PTR [ecx+0x2000000],al
    1e0d:	91                   	xchg   ecx,eax
    1e0e:	00 13                	add    BYTE PTR [ebx],dl
    1e10:	21 16                	and    DWORD PTR [esi],edx
    1e12:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    1e18:	14 73                	adc    al,0x73
    1e1a:	32 00                	xor    al,BYTE PTR [eax]
    1e1c:	01 88 76 00 00 00    	add    DWORD PTR [eax+0x76],ecx
    1e22:	02 91 6c 14 63 74    	add    dl,BYTE PTR [ecx+0x7463146c]
    1e28:	00 01                	add    BYTE PTR [ecx],al
    1e2a:	88 76 00             	mov    BYTE PTR [esi+0x0],dh
    1e2d:	00 00                	add    BYTE PTR [eax],al
    1e2f:	02 91 68 00 00 0c    	add    dl,BYTE PTR [ecx+0xc000068]
    1e35:	84 07                	test   BYTE PTR [edi],al
    1e37:	00 00                	add    BYTE PTR [eax],al
    1e39:	01 8b 81 00 00 00    	add    DWORD PTR [ebx+0x81],ecx
    1e3f:	7f 16                	jg     1e57 <sysEnter_Vector-0x12e1a9>
    1e41:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
    1e47:	01 9c b3 05 00 00 0d 	add    DWORD PTR [ebx+esi*4+0xd000005],ebx
    1e4e:	a9 08 00 00 01       	test   eax,0x1000008
    1e53:	8b 81 00 00 00 02    	mov    eax,DWORD PTR [ecx+0x2000000]
    1e59:	91                   	xchg   ecx,eax
    1e5a:	00 13                	add    BYTE PTR [ebx],dl
    1e5c:	91                   	xchg   ecx,eax
    1e5d:	16                   	push   ss
    1e5e:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    1e64:	14 73                	adc    al,0x73
    1e66:	32 00                	xor    al,BYTE PTR [eax]
    1e68:	01 8d 76 00 00 00    	add    DWORD PTR [ebp+0x76],ecx
    1e6e:	02 91 6c 14 63 74    	add    dl,BYTE PTR [ecx+0x7463146c]
    1e74:	00 01                	add    BYTE PTR [ecx],al
    1e76:	8d 76 00             	lea    esi,[esi+0x0]
    1e79:	00 00                	add    BYTE PTR [eax],al
    1e7b:	02 91 68 00 00 0f    	add    dl,BYTE PTR [ecx+0xf000068]
    1e81:	b8 09 00 00 01       	mov    eax,0x1000009
    1e86:	91                   	xchg   ecx,eax
    1e87:	ef                   	out    dx,eax
    1e88:	16                   	push   ss
    1e89:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    1e8f:	01 9c 15 9f 09 00 00 	add    DWORD PTR [ebp+edx*1+0x99f],ebx
    1e96:	01 96 0c 17 00 9f    	add    DWORD PTR [esi-0x60ffe8f4],edx
    1e9c:	29 00                	sub    DWORD PTR [eax],eax
    1e9e:	00 00                	add    BYTE PTR [eax],al
    1ea0:	01 9c 04 06 00 00 0d 	add    DWORD PTR [esp+eax*1+0xd000006],ebx
    1ea7:	fa                   	cli    
    1ea8:	08 00                	or     BYTE PTR [eax],al
    1eaa:	00 01                	add    BYTE PTR [ecx],al
    1eac:	96                   	xchg   esi,eax
    1ead:	5a                   	pop    edx
    1eae:	00 00                	add    BYTE PTR [eax],al
    1eb0:	00 02                	add    BYTE PTR [edx],al
    1eb2:	91                   	xchg   ecx,eax
    1eb3:	00 0d 84 09 00 00    	add    BYTE PTR ds:0x984,cl
    1eb9:	01 96 c0 01 00 00    	add    DWORD PTR [esi+0x1c0],edx
    1ebf:	02 91 04 0d 7c 07    	add    dl,BYTE PTR [ecx+0x77c0d04]
    1ec5:	00 00                	add    BYTE PTR [eax],al
    1ec7:	01 96 5a 00 00 00    	add    DWORD PTR [esi+0x5a],edx
    1ecd:	02 91 08 00 16 de    	add    dl,BYTE PTR [ecx-0x21e9fff8]
    1ed3:	07                   	pop    es
    1ed4:	00 00                	add    BYTE PTR [eax],al
    1ed6:	01 9b 5a 00 00 00    	add    DWORD PTR [ebx+0x5a],ebx
    1edc:	35 17 00 9f 29       	xor    eax,0x299f0017
    1ee1:	00 00                	add    BYTE PTR [eax],al
    1ee3:	00 01                	add    BYTE PTR [ecx],al
    1ee5:	9c                   	pushf  
    1ee6:	2c 06                	sub    al,0x6
    1ee8:	00 00                	add    BYTE PTR [eax],al
    1eea:	0e                   	push   cs
    1eeb:	06                   	push   es
    1eec:	05 00 00 01 9d       	add    eax,0x9d010000
    1ef1:	76 00                	jbe    1ef3 <sysEnter_Vector-0x12e10d>
    1ef3:	00 00                	add    BYTE PTR [eax],al
    1ef5:	02 91 74 00 11 01    	add    dl,BYTE PTR [ecx+0x1110074]
    1efb:	09 00                	or     DWORD PTR [eax],eax
    1efd:	00 01                	add    BYTE PTR [ecx],al
    1eff:	a3 5a 00 00 00       	mov    ds:0x5a,eax
    1f04:	5e                   	pop    esi
    1f05:	17                   	pop    ss
    1f06:	00 9f 4c 00 00 00    	add    BYTE PTR [edi+0x4c],bl
    1f0c:	01 9c 7e 06 00 00 0d 	add    DWORD PTR [esi+edi*2+0xd000006],ebx
    1f13:	36                   	ss
    1f14:	05 00 00 01 a3       	add    eax,0xa3010000
    1f19:	c9                   	leave  
    1f1a:	01 00                	add    DWORD PTR [eax],eax
    1f1c:	00 02                	add    BYTE PTR [edx],al
    1f1e:	91                   	xchg   ecx,eax
    1f1f:	00 0d 37 09 00 00    	add    BYTE PTR ds:0x937,cl
    1f25:	01 a3 5a 00 00 00    	add    DWORD PTR [ebx+0x5a],esp
    1f2b:	02 91 04 0d 6c 09    	add    dl,BYTE PTR [ecx+0x96c0d04]
    1f31:	00 00                	add    BYTE PTR [eax],al
    1f33:	01 a3 7e 06 00 00    	add    DWORD PTR [ebx+0x67e],esp
    1f39:	02 91 08 14 70 69    	add    dl,BYTE PTR [ecx+0x69701408]
    1f3f:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1f42:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1f43:	5a                   	pop    edx
    1f44:	00 00                	add    BYTE PTR [eax],al
    1f46:	00 02                	add    BYTE PTR [edx],al
    1f48:	91                   	xchg   ecx,eax
    1f49:	74 00                	je     1f4b <sysEnter_Vector-0x12e0b5>
    1f4b:	06                   	push   es
    1f4c:	04 c9                	add    al,0xc9
    1f4e:	01 00                	add    DWORD PTR [eax],eax
    1f50:	00 11                	add    BYTE PTR [ecx],dl
    1f52:	e1 08                	loope  1f5c <sysEnter_Vector-0x12e0a4>
    1f54:	00 00                	add    BYTE PTR [eax],al
    1f56:	01 ab 5a 00 00 00    	add    DWORD PTR [ebx+0x5a],ebp
    1f5c:	aa                   	stos   BYTE PTR es:[edi],al
    1f5d:	17                   	pop    ss
    1f5e:	00 9f f4 01 00 00    	add    BYTE PTR [edi+0x1f4],bl
    1f64:	01 9c 26 07 00 00 0d 	add    DWORD PTR [esi+eiz*1+0xd000007],ebx
    1f6b:	36                   	ss
    1f6c:	05 00 00 01 ab       	add    eax,0xab010000
    1f71:	c9                   	leave  
    1f72:	01 00                	add    DWORD PTR [eax],eax
    1f74:	00 02                	add    BYTE PTR [edx],al
    1f76:	91                   	xchg   ecx,eax
    1f77:	00 14 70             	add    BYTE PTR [eax+esi*2],dl
    1f7a:	69 64 00 01 ad 5a 00 	imul   esp,DWORD PTR [eax+eax*1+0x1],0x5aad
    1f81:	00 
    1f82:	00 02                	add    BYTE PTR [edx],al
    1f84:	91                   	xchg   ecx,eax
    1f85:	58                   	pop    eax
    1f86:	0e                   	push   cs
    1f87:	37                   	aaa    
    1f88:	09 00                	or     DWORD PTR [eax],eax
    1f8a:	00 01                	add    BYTE PTR [ecx],al
    1f8c:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1f8d:	5a                   	pop    edx
    1f8e:	00 00                	add    BYTE PTR [eax],al
    1f90:	00 02                	add    BYTE PTR [edx],al
    1f92:	91                   	xchg   ecx,eax
    1f93:	6c                   	ins    BYTE PTR es:[edi],dx
    1f94:	0e                   	push   cs
    1f95:	6c                   	ins    BYTE PTR es:[edi],dx
    1f96:	09 00                	or     DWORD PTR [eax],eax
    1f98:	00 01                	add    BYTE PTR [ecx],al
    1f9a:	ae                   	scas   al,BYTE PTR es:[edi]
    1f9b:	7e 06                	jle    1fa3 <sysEnter_Vector-0x12e05d>
    1f9d:	00 00                	add    BYTE PTR [eax],al
    1f9f:	02 91 50 0e e3 07    	add    dl,BYTE PTR [ecx+0x7e30e50]
    1fa5:	00 00                	add    BYTE PTR [eax],al
    1fa7:	01 af c9 01 00 00    	add    DWORD PTR [edi+0x1c9],ebp
    1fad:	02 91 68 0e 6f 07    	add    dl,BYTE PTR [ecx+0x76f0e68]
    1fb3:	00 00                	add    BYTE PTR [eax],al
    1fb5:	01 af c9 01 00 00    	add    DWORD PTR [edi+0x1c9],ebp
    1fbb:	02 91 64 0e ae 07    	add    dl,BYTE PTR [ecx+0x7ae0e64]
    1fc1:	00 00                	add    BYTE PTR [eax],al
    1fc3:	01 b0 c9 01 00 00    	add    DWORD PTR [eax+0x1c9],esi
    1fc9:	02 91 54 0e 98 07    	add    dl,BYTE PTR [ecx+0x7980e54]
    1fcf:	00 00                	add    BYTE PTR [eax],al
    1fd1:	01 c1                	add    ecx,eax
    1fd3:	5a                   	pop    edx
    1fd4:	00 00                	add    BYTE PTR [eax],al
    1fd6:	00 02                	add    BYTE PTR [edx],al
    1fd8:	91                   	xchg   ecx,eax
    1fd9:	60                   	pusha  
    1fda:	13 80 18 00 9f e0    	adc    eax,DWORD PTR [eax-0x1f60ffe8]
    1fe0:	00 00                	add    BYTE PTR [eax],al
    1fe2:	00 14 63             	add    BYTE PTR [ebx+eiz*2],dl
    1fe5:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1fe6:	74 00                	je     1fe8 <sysEnter_Vector-0x12e018>
    1fe8:	01 c3                	add    ebx,eax
    1fea:	5a                   	pop    edx
    1feb:	00 00                	add    BYTE PTR [eax],al
    1fed:	00 02                	add    BYTE PTR [edx],al
    1fef:	91                   	xchg   ecx,eax
    1ff0:	5c                   	pop    esp
    1ff1:	00 00                	add    BYTE PTR [eax],al
    1ff3:	11 db                	adc    ebx,ebx
    1ff5:	08 00                	or     BYTE PTR [eax],al
    1ff7:	00 01                	add    BYTE PTR [ecx],al
    1ff9:	d9 5a 00             	fstp   DWORD PTR [edx+0x0]
    1ffc:	00 00                	add    BYTE PTR [eax],al
    1ffe:	9e                   	sahf   
    1fff:	19 00                	sbb    DWORD PTR [eax],eax
    2001:	9f                   	lahf   
    2002:	4f                   	dec    edi
    2003:	00 00                	add    BYTE PTR [eax],al
    2005:	00 01                	add    BYTE PTR [ecx],al
    2007:	9c                   	pushf  
    2008:	78 07                	js     2011 <sysEnter_Vector-0x12dfef>
    200a:	00 00                	add    BYTE PTR [eax],al
    200c:	0d 36 05 00 00       	or     eax,0x536
    2011:	01 d9                	add    ecx,ebx
    2013:	c9                   	leave  
    2014:	01 00                	add    DWORD PTR [eax],eax
    2016:	00 02                	add    BYTE PTR [edx],al
    2018:	91                   	xchg   ecx,eax
    2019:	00 0d 37 09 00 00    	add    BYTE PTR ds:0x937,cl
    201f:	01 d9                	add    ecx,ebx
    2021:	5a                   	pop    edx
    2022:	00 00                	add    BYTE PTR [eax],al
    2024:	00 02                	add    BYTE PTR [edx],al
    2026:	91                   	xchg   ecx,eax
    2027:	04 0d                	add    al,0xd
    2029:	6c                   	ins    BYTE PTR es:[edi],dx
    202a:	09 00                	or     DWORD PTR [eax],eax
    202c:	00 01                	add    BYTE PTR [ecx],al
    202e:	d9 7e 06             	fnstcw WORD PTR [esi+0x6]
    2031:	00 00                	add    BYTE PTR [eax],al
    2033:	02 91 08 14 70 69    	add    dl,BYTE PTR [ecx+0x69701408]
    2039:	64 00 01             	add    BYTE PTR fs:[ecx],al
    203c:	db 5a 00             	fistp  DWORD PTR [edx+0x0]
    203f:	00 00                	add    BYTE PTR [eax],al
    2041:	02 91 74 00 11 ff    	add    dl,BYTE PTR [ecx-0xeeff8c]
    2047:	07                   	pop    es
    2048:	00 00                	add    BYTE PTR [eax],al
    204a:	01 e1                	add    ecx,esp
    204c:	5a                   	pop    edx
    204d:	00 00                	add    BYTE PTR [eax],al
    204f:	00 ed                	add    ch,ch
    2051:	19 00                	sbb    DWORD PTR [eax],eax
    2053:	9f                   	lahf   
    2054:	1c 00                	sbb    al,0x0
    2056:	00 00                	add    BYTE PTR [eax],al
    2058:	01 9c a0 07 00 00 17 	add    DWORD PTR [eax+eiz*4+0x17000007],ebx
    205f:	70 69                	jo     20ca <sysEnter_Vector-0x12df36>
    2061:	64 00 01             	add    BYTE PTR fs:[ecx],al
    2064:	e1 76                	loope  20dc <sysEnter_Vector-0x12df24>
    2066:	00 00                	add    BYTE PTR [eax],al
    2068:	00 02                	add    BYTE PTR [edx],al
    206a:	91                   	xchg   ecx,eax
    206b:	00 00                	add    BYTE PTR [eax],al
    206d:	15 71 09 00 00       	adc    eax,0x971
    2072:	01 e7                	add    edi,esp
    2074:	09 1a                	or     DWORD PTR [edx],ebx
    2076:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    207c:	01 9c c4 07 00 00 0d 	add    DWORD PTR [esp+eax*8+0xd000007],ebx
    2083:	76 09                	jbe    208e <sysEnter_Vector-0x12df72>
    2085:	00 00                	add    BYTE PTR [eax],al
    2087:	01 e7                	add    edi,esp
    2089:	5a                   	pop    edx
    208a:	00 00                	add    BYTE PTR [eax],al
    208c:	00 02                	add    BYTE PTR [edx],al
    208e:	91                   	xchg   ecx,eax
    208f:	00 00                	add    BYTE PTR [eax],al
    2091:	11 d4                	adc    esp,edx
    2093:	08 00                	or     BYTE PTR [eax],al
    2095:	00 01                	add    BYTE PTR [ecx],al
    2097:	ec                   	in     al,dx
    2098:	c9                   	leave  
    2099:	01 00                	add    DWORD PTR [eax],eax
    209b:	00 29                	add    BYTE PTR [ecx],ch
    209d:	1a 00                	sbb    al,BYTE PTR [eax]
    209f:	9f                   	lahf   
    20a0:	20 00                	and    BYTE PTR [eax],al
    20a2:	00 00                	add    BYTE PTR [eax],al
    20a4:	01 9c fa 07 00 00 17 	add    DWORD PTR [edx+edi*8+0x17000007],ebx
    20ab:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    20ae:	00 01                	add    BYTE PTR [ecx],al
    20b0:	ec                   	in     al,dx
    20b1:	c9                   	leave  
    20b2:	01 00                	add    DWORD PTR [eax],eax
    20b4:	00 02                	add    BYTE PTR [edx],al
    20b6:	91                   	xchg   ecx,eax
    20b7:	00 0d ba 06 00 00    	add    BYTE PTR ds:0x6ba,cl
    20bd:	01 ec                	add    esp,ebp
    20bf:	9a 00 00 00 02 91 04 	call   0x491:0x2000000
    20c6:	00 0c 50             	add    BYTE PTR [eax+edx*2],cl
    20c9:	09 00                	or     DWORD PTR [eax],eax
    20cb:	00 01                	add    BYTE PTR [ecx],al
    20cd:	f1                   	icebp  
    20ce:	9a 00 00 00 49 1a 00 	call   0x1a:0x49000000
    20d5:	9f                   	lahf   
    20d6:	44                   	inc    esp
    20d7:	01 00                	add    DWORD PTR [eax],eax
    20d9:	00 01                	add    BYTE PTR [ecx],al
    20db:	9c                   	pushf  
    20dc:	d8 08                	fmul   DWORD PTR [eax]
    20de:	00 00                	add    BYTE PTR [eax],al
    20e0:	0d 8b 06 00 00       	or     eax,0x68b
    20e5:	01 f1                	add    ecx,esi
    20e7:	c9                   	leave  
    20e8:	01 00                	add    DWORD PTR [eax],eax
    20ea:	00 02                	add    BYTE PTR [edx],al
    20ec:	91                   	xchg   ecx,eax
    20ed:	00 0d 6c 09 00 00    	add    BYTE PTR ds:0x96c,cl
    20f3:	01 f1                	add    ecx,esi
    20f5:	7e 06                	jle    20fd <sysEnter_Vector-0x12df03>
    20f7:	00 00                	add    BYTE PTR [eax],al
    20f9:	02 91 04 0d 70 08    	add    dl,BYTE PTR [ecx+0x8700d04]
    20ff:	00 00                	add    BYTE PTR [eax],al
    2101:	01 f1                	add    ecx,esi
    2103:	9a 00 00 00 02 91 08 	call   0x891:0x2000000
    210a:	14 70                	adc    al,0x70
    210c:	00 01                	add    BYTE PTR [ecx],al
    210e:	f3 c9                	repz leave 
    2110:	01 00                	add    DWORD PTR [eax],eax
    2112:	00 02                	add    BYTE PTR [edx],al
    2114:	91                   	xchg   ecx,eax
    2115:	74 0e                	je     2125 <sysEnter_Vector-0x12dedb>
    2117:	a0 07 00 00 01       	mov    al,ds:0x1000007
    211c:	f3 c9                	repz leave 
    211e:	01 00                	add    DWORD PTR [eax],eax
    2120:	00 02                	add    BYTE PTR [edx],al
    2122:	91                   	xchg   ecx,eax
    2123:	70 14                	jo     2139 <sysEnter_Vector-0x12dec7>
    2125:	63 00                	arpl   WORD PTR [eax],ax
    2127:	01 f4                	add    esp,esi
    2129:	5a                   	pop    edx
    212a:	00 00                	add    BYTE PTR [eax],al
    212c:	00 02                	add    BYTE PTR [edx],al
    212e:	91                   	xchg   ecx,eax
    212f:	64 08 15 09 00 00 04 	or     BYTE PTR fs:0x4000009,dl
    2136:	81 00 00 00 01 f5    	add    DWORD PTR [eax],0xf5010000
    213c:	86 08                	xchg   BYTE PTR [eax],cl
    213e:	00 00                	add    BYTE PTR [eax],al
    2140:	09 10                	or     DWORD PTR [eax],edx
    2142:	09 00                	or     DWORD PTR [eax],eax
    2144:	00 00                	add    BYTE PTR [eax],al
    2146:	09 68 08             	or     DWORD PTR [eax+0x8],ebp
    2149:	00 00                	add    BYTE PTR [eax],al
    214b:	01 09                	add    DWORD PTR [ecx],ecx
    214d:	1c 09                	sbb    al,0x9
    214f:	00 00                	add    BYTE PTR [eax],al
    2151:	02 00                	add    al,BYTE PTR [eax]
    2153:	0e                   	push   cs
    2154:	c0 07 00             	rol    BYTE PTR [edi],0x0
    2157:	00 01                	add    BYTE PTR [ecx],al
    2159:	f5                   	cmc    
    215a:	63 08                	arpl   WORD PTR [eax],cx
    215c:	00 00                	add    BYTE PTR [eax],al
    215e:	02 91 6c 0e 37 09    	add    dl,BYTE PTR [ecx+0x9370e6c]
    2164:	00 00                	add    BYTE PTR [eax],al
    2166:	01 f6                	add    esi,esi
    2168:	9a 00 00 00 02 91 68 	call   0x6891:0x2000000
    216f:	18 95 1a 00 9f 0e    	sbb    BYTE PTR [ebp+0xe9f001a],dl
    2175:	00 00                	add    BYTE PTR [eax],al
    2177:	00 be 08 00 00 0e    	add    BYTE PTR [esi+0xe000008],bh
    217d:	8a 08                	mov    cl,BYTE PTR [eax]
    217f:	00 00                	add    BYTE PTR [eax],al
    2181:	01 fc                	add    esp,edi
    2183:	be 00 00 00 02       	mov    esi,0x2000000
    2188:	91                   	xchg   ecx,eax
    2189:	63 00                	arpl   WORD PTR [eax],ax
    218b:	13 04 1b             	adc    eax,DWORD PTR [ebx+ebx*1]
    218e:	00 9f 0e 00 00 00    	add    BYTE PTR [edi+0xe],bl
    2194:	19 8a 08 00 00 01    	sbb    DWORD PTR [edx+0x1000008],ecx
    219a:	12 01                	adc    al,BYTE PTR [ecx]
    219c:	be 00 00 00 02       	mov    esi,0x2000000
    21a1:	91                   	xchg   ecx,eax
    21a2:	62 00                	bound  eax,QWORD PTR [eax]
    21a4:	00 1a                	add    BYTE PTR [edx],bl
    21a6:	d8 07                	fadd   DWORD PTR [edi]
    21a8:	00 00                	add    BYTE PTR [eax],al
    21aa:	01 21                	add    DWORD PTR [ecx],esp
    21ac:	01 9a 00 00 00 8d    	add    DWORD PTR [edx-0x73000000],ebx
    21b2:	1b 00                	sbb    eax,DWORD PTR [eax]
    21b4:	9f                   	lahf   
    21b5:	20 00                	and    BYTE PTR [eax],al
    21b7:	00 00                	add    BYTE PTR [eax],al
    21b9:	01 9c 20 09 00 00 1b 	add    DWORD PTR [eax+eiz*1+0x1b000009],ebx
    21c0:	8b 06                	mov    eax,DWORD PTR [esi]
    21c2:	00 00                	add    BYTE PTR [eax],al
    21c4:	01 21                	add    DWORD PTR [ecx],esp
    21c6:	01 c9                	add    ecx,ecx
    21c8:	01 00                	add    DWORD PTR [eax],eax
    21ca:	00 02                	add    BYTE PTR [edx],al
    21cc:	91                   	xchg   ecx,eax
    21cd:	00 1b                	add    BYTE PTR [ebx],bl
    21cf:	6c                   	ins    BYTE PTR es:[edi],dx
    21d0:	09 00                	or     DWORD PTR [eax],eax
    21d2:	00 01                	add    BYTE PTR [ecx],al
    21d4:	21 01                	and    DWORD PTR [ecx],eax
    21d6:	7e 06                	jle    21de <sysEnter_Vector-0x12de22>
    21d8:	00 00                	add    BYTE PTR [eax],al
    21da:	02 91 04 1b 70 08    	add    dl,BYTE PTR [ecx+0x8701b04]
    21e0:	00 00                	add    BYTE PTR [eax],al
    21e2:	01 21                	add    DWORD PTR [ecx],esp
    21e4:	01 9a 00 00 00 02    	add    DWORD PTR [edx+0x2000000],ebx
    21ea:	91                   	xchg   ecx,eax
    21eb:	08 00                	or     BYTE PTR [eax],al
    21ed:	1a 29                	sbb    ch,BYTE PTR [ecx]
    21ef:	08 00                	or     BYTE PTR [eax],al
    21f1:	00 01                	add    BYTE PTR [ecx],al
    21f3:	26 01 7e 06          	add    DWORD PTR es:[esi+0x6],edi
    21f7:	00 00                	add    BYTE PTR [eax],al
    21f9:	ad                   	lods   eax,DWORD PTR ds:[esi]
    21fa:	1b 00                	sbb    eax,DWORD PTR [eax]
    21fc:	9f                   	lahf   
    21fd:	fd                   	std    
    21fe:	02 00                	add    al,BYTE PTR [eax]
    2200:	00 01                	add    BYTE PTR [ecx],al
    2202:	9c                   	pushf  
    2203:	0f 0a                	(bad)  
    2205:	00 00                	add    BYTE PTR [eax],al
    2207:	1b 3c 09             	sbb    edi,DWORD PTR [ecx+ecx*1]
    220a:	00 00                	add    BYTE PTR [eax],al
    220c:	01 26                	add    DWORD PTR [esi],esp
    220e:	01 b3 00 00 00 02    	add    DWORD PTR [ebx+0x2000000],esi
    2214:	91                   	xchg   ecx,eax
    2215:	00 1b                	add    BYTE PTR [ebx],bl
    2217:	37                   	aaa    
    2218:	09 00                	or     DWORD PTR [eax],eax
    221a:	00 01                	add    BYTE PTR [ecx],al
    221c:	26 01 0f             	add    DWORD PTR es:[edi],ecx
    221f:	0a 00                	or     al,BYTE PTR [eax]
    2221:	00 02                	add    BYTE PTR [edx],al
    2223:	91                   	xchg   ecx,eax
    2224:	04 19                	add    al,0x19
    2226:	6c                   	ins    BYTE PTR es:[edi],dx
    2227:	09 00                	or     DWORD PTR [eax],eax
    2229:	00 01                	add    BYTE PTR [ecx],al
    222b:	28 01                	sub    BYTE PTR [ecx],al
    222d:	7e 06                	jle    2235 <sysEnter_Vector-0x12ddcb>
    222f:	00 00                	add    BYTE PTR [eax],al
    2231:	02 91 54 1c 63 6d    	add    dl,BYTE PTR [ecx+0x6d631c54]
    2237:	64 00 01             	add    BYTE PTR fs:[ecx],al
    223a:	29 01                	sub    DWORD PTR [ecx],eax
    223c:	15 0a 00 00 03       	adc    eax,0x300000a
    2241:	91                   	xchg   ecx,eax
    2242:	d0                   	(bad)  
    2243:	77 19                	ja     225e <sysEnter_Vector-0x12dda2>
    2245:	e3 07                	jecxz  224e <sysEnter_Vector-0x12ddb2>
    2247:	00 00                	add    BYTE PTR [eax],al
    2249:	01 2a                	add    DWORD PTR [edx],ebp
    224b:	01 c9                	add    ecx,ecx
    224d:	01 00                	add    DWORD PTR [eax],eax
    224f:	00 02                	add    BYTE PTR [edx],al
    2251:	91                   	xchg   ecx,eax
    2252:	6c                   	ins    BYTE PTR es:[edi],dx
    2253:	19 6f 07             	sbb    DWORD PTR [edi+0x7],ebp
    2256:	00 00                	add    BYTE PTR [eax],al
    2258:	01 2a                	add    DWORD PTR [edx],ebp
    225a:	01 c9                	add    ecx,ecx
    225c:	01 00                	add    DWORD PTR [eax],eax
    225e:	00 02                	add    BYTE PTR [edx],al
    2260:	91                   	xchg   ecx,eax
    2261:	68 19 8f 07 00       	push   0x78f19
    2266:	00 01                	add    BYTE PTR [ecx],al
    2268:	2a 01                	sub    al,BYTE PTR [ecx]
    226a:	c9                   	leave  
    226b:	01 00                	add    DWORD PTR [eax],eax
    226d:	00 02                	add    BYTE PTR [edx],al
    226f:	91                   	xchg   ecx,eax
    2270:	5c                   	pop    esp
    2271:	19 1a                	sbb    DWORD PTR [edx],ebx
    2273:	08 00                	or     BYTE PTR [eax],al
    2275:	00 01                	add    BYTE PTR [ecx],al
    2277:	2b 01                	sub    eax,DWORD PTR [ecx]
    2279:	26 0a 00             	or     al,BYTE PTR es:[eax]
    227c:	00 03                	add    BYTE PTR [ebx],al
    227e:	91                   	xchg   ecx,eax
    227f:	ce                   	into   
    2280:	77 19                	ja     229b <sysEnter_Vector-0x12dd65>
    2282:	98                   	cwde   
    2283:	07                   	pop    es
    2284:	00 00                	add    BYTE PTR [eax],al
    2286:	01 44 01 5a          	add    DWORD PTR [ecx+eax*1+0x5a],eax
    228a:	00 00                	add    BYTE PTR [eax],al
    228c:	00 02                	add    BYTE PTR [edx],al
    228e:	91                   	xchg   ecx,eax
    228f:	64 18 64 1c 00       	sbb    BYTE PTR fs:[esp+ebx*1+0x0],ah
    2294:	9f                   	lahf   
    2295:	40                   	inc    eax
    2296:	00 00                	add    BYTE PTR [eax],al
    2298:	00 e0                	add    al,ah
    229a:	09 00                	or     DWORD PTR [eax],eax
    229c:	00 19                	add    BYTE PTR [ecx],bl
    229e:	ec                   	in     al,dx
    229f:	07                   	pop    es
    22a0:	00 00                	add    BYTE PTR [eax],al
    22a2:	01 36                	add    DWORD PTR [esi],esi
    22a4:	01 c9                	add    ecx,ecx
    22a6:	01 00                	add    DWORD PTR [eax],eax
    22a8:	00 02                	add    BYTE PTR [edx],al
    22aa:	91                   	xchg   ecx,eax
    22ab:	58                   	pop    eax
    22ac:	00 13                	add    BYTE PTR [ebx],dl
    22ae:	14 1d                	adc    al,0x1d
    22b0:	00 9f 8c 01 00 00    	add    BYTE PTR [edi+0x18c],bl
    22b6:	1c 63                	sbb    al,0x63
    22b8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    22b9:	74 00                	je     22bb <sysEnter_Vector-0x12dd45>
    22bb:	01 46 01             	add    DWORD PTR [esi+0x1],eax
    22be:	5a                   	pop    edx
    22bf:	00 00                	add    BYTE PTR [eax],al
    22c1:	00 02                	add    BYTE PTR [edx],al
    22c3:	91                   	xchg   ecx,eax
    22c4:	60                   	pusha  
    22c5:	1d 00 00 00 00       	sbb    eax,0x0
    22ca:	19 ec                	sbb    esp,ebp
    22cc:	07                   	pop    es
    22cd:	00 00                	add    BYTE PTR [eax],al
    22cf:	01 4c 01 c9          	add    DWORD PTR [ecx+eax*1-0x37],ecx
    22d3:	01 00                	add    DWORD PTR [eax],eax
    22d5:	00 02                	add    BYTE PTR [edx],al
    22d7:	91                   	xchg   ecx,eax
    22d8:	50                   	push   eax
    22d9:	00 00                	add    BYTE PTR [eax],al
    22db:	00 06                	add    BYTE PTR [esi],al
    22dd:	04 5a                	add    al,0x5a
    22df:	00 00                	add    BYTE PTR [eax],al
    22e1:	00 1e                	add    BYTE PTR [esi],bl
    22e3:	3a 00                	cmp    al,BYTE PTR [eax]
    22e5:	00 00                	add    BYTE PTR [eax],al
    22e7:	26 0a 00             	or     al,BYTE PTR es:[eax]
    22ea:	00 1f                	add    BYTE PTR [edi],bl
    22ec:	c5 00                	lds    eax,FWORD PTR [eax]
    22ee:	00 00                	add    BYTE PTR [eax],al
    22f0:	ff 03                	inc    DWORD PTR [ebx]
    22f2:	00 1e                	add    BYTE PTR [esi],bl
    22f4:	3a 00                	cmp    al,BYTE PTR [eax]
    22f6:	00 00                	add    BYTE PTR [eax],al
    22f8:	36 0a 00             	or     al,BYTE PTR ss:[eax]
    22fb:	00 20                	add    BYTE PTR [eax],ah
    22fd:	c5 00                	lds    eax,FWORD PTR [eax]
    22ff:	00 00                	add    BYTE PTR [eax],al
    2301:	01 00                	add    DWORD PTR [eax],eax
    2303:	1a f1                	sbb    dh,cl
    2305:	07                   	pop    es
    2306:	00 00                	add    BYTE PTR [eax],al
    2308:	01 64 01 7e          	add    DWORD PTR [ecx+eax*1+0x7e],esp
    230c:	06                   	push   es
    230d:	00 00                	add    BYTE PTR [eax],al
    230f:	aa                   	stos   BYTE PTR es:[edi],al
    2310:	1e                   	push   ds
    2311:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
    2317:	01 9c 6f 0a 00 00 1b 	add    DWORD PTR [edi+ebp*2+0x1b00000a],ebx
    231e:	3c 09                	cmp    al,0x9
    2320:	00 00                	add    BYTE PTR [eax],al
    2322:	01 64 01 c9          	add    DWORD PTR [ecx+eax*1-0x37],esp
    2326:	01 00                	add    DWORD PTR [eax],eax
    2328:	00 02                	add    BYTE PTR [edx],al
    232a:	91                   	xchg   ecx,eax
    232b:	00 1b                	add    BYTE PTR [ebx],bl
    232d:	37                   	aaa    
    232e:	09 00                	or     DWORD PTR [eax],eax
    2330:	00 01                	add    BYTE PTR [ecx],al
    2332:	64 01 0f             	add    DWORD PTR fs:[edi],ecx
    2335:	0a 00                	or     al,BYTE PTR [eax]
    2337:	00 02                	add    BYTE PTR [edx],al
    2339:	91                   	xchg   ecx,eax
    233a:	04 00                	add    al,0x0
    233c:	1a 7d 09             	sbb    bh,BYTE PTR [ebp+0x9]
    233f:	00 00                	add    BYTE PTR [eax],al
    2341:	01 69 01             	add    DWORD PTR [ecx+0x1],ebp
    2344:	5a                   	pop    edx
    2345:	00 00                	add    BYTE PTR [eax],al
    2347:	00 cd                	add    ch,cl
    2349:	1e                   	push   ds
    234a:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
    2350:	01 9c a8 0a 00 00 21 	add    DWORD PTR [eax+ebp*4+0x2100000a],ebx
    2357:	73 74                	jae    23cd <sysEnter_Vector-0x12dc33>
    2359:	64 00 01             	add    BYTE PTR fs:[ecx],al
    235c:	69 01 5a 00 00 00    	imul   eax,DWORD PTR [ecx],0x5a
    2362:	02 91 00 1b 99 09    	add    dl,BYTE PTR [ecx+0x9991b00]
    2368:	00 00                	add    BYTE PTR [eax],al
    236a:	01 69 01             	add    DWORD PTR [ecx+0x1],ebp
    236d:	76 00                	jbe    236f <sysEnter_Vector-0x12dc91>
    236f:	00 00                	add    BYTE PTR [eax],al
    2371:	02 91 04 00 22 8f    	add    dl,BYTE PTR [ecx-0x70ddfffc]
    2377:	09 00                	or     DWORD PTR [eax],eax
    2379:	00 01                	add    BYTE PTR [ecx],al
    237b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    237c:	01 f0                	add    eax,esi
    237e:	1e                   	push   ds
    237f:	00 9f 1c 00 00 00    	add    BYTE PTR [edi+0x1c],bl
    2385:	01 9c 23 a3 00 00 00 	add    DWORD PTR [ebx+eiz*1+0xa3],ebx
    238c:	06                   	push   es
    238d:	39 76 00             	cmp    DWORD PTR [esi+0x0],esi
    2390:	00 00                	add    BYTE PTR [eax],al
    2392:	05 03 8c 72 00       	add    eax,0x728c03
    2397:	9f                   	lahf   
    2398:	23 34 01             	and    esi,DWORD PTR [ecx+eax*1]
    239b:	00 00                	add    BYTE PTR [eax],al
    239d:	06                   	push   es
    239e:	3a 76 00             	cmp    dh,BYTE PTR [esi+0x0]
    23a1:	00 00                	add    BYTE PTR [eax],al
    23a3:	05 03 90 72 00       	add    eax,0x729003
    23a8:	9f                   	lahf   
    23a9:	23 7b 00             	and    edi,DWORD PTR [ebx+0x0]
    23ac:	00 00                	add    BYTE PTR [eax],al
    23ae:	06                   	push   es
    23af:	3b 76 00             	cmp    esi,DWORD PTR [esi+0x0]
    23b2:	00 00                	add    BYTE PTR [eax],al
    23b4:	05 03 88 72 00       	add    eax,0x728803
    23b9:	9f                   	lahf   
    23ba:	23 7c 01 00          	and    edi,DWORD PTR [ecx+eax*1+0x0]
    23be:	00 06                	add    BYTE PTR [esi],al
    23c0:	3c a5                	cmp    al,0xa5
    23c2:	00 00                	add    BYTE PTR [eax],al
    23c4:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
    23ca:	9f                   	lahf   
    23cb:	23 6e 00             	and    ebp,DWORD PTR [esi+0x0]
    23ce:	00 00                	add    BYTE PTR [eax],al
    23d0:	07                   	pop    es
    23d1:	34 0f                	xor    al,0xf
    23d3:	0b 00                	or     eax,DWORD PTR [eax]
    23d5:	00 05 03 84 72 00    	add    BYTE PTR ds:0x728403,al
    23db:	9f                   	lahf   
    23dc:	06                   	push   es
    23dd:	04 8f                	add    al,0x8f
    23df:	00 00                	add    BYTE PTR [eax],al
    23e1:	00 23                	add    BYTE PTR [ebx],ah
    23e3:	91                   	xchg   ecx,eax
    23e4:	00 00                	add    BYTE PTR [eax],al
    23e6:	00 07                	add    BYTE PTR [edi],al
    23e8:	35 76 00 00 00       	xor    eax,0x76
    23ed:	05 03 80 72 00       	add    eax,0x728003
    23f2:	9f                   	lahf   
    23f3:	23 41 00             	and    eax,DWORD PTR [ecx+0x0]
    23f6:	00 00                	add    BYTE PTR [eax],al
    23f8:	08 58 7e             	or     BYTE PTR [eax+0x7e],bl
    23fb:	06                   	push   es
    23fc:	00 00                	add    BYTE PTR [eax],al
    23fe:	05 03 94 72 00       	add    eax,0x729403
    2403:	9f                   	lahf   
    2404:	23 7a 08             	and    edi,DWORD PTR [edx+0x8]
    2407:	00 00                	add    BYTE PTR [eax],al
    2409:	01 0d be 00 00 00    	add    DWORD PTR ds:0xbe,ecx
    240f:	05 03 b4 72 00       	add    eax,0x72b403
    2414:	9f                   	lahf   
    2415:	23 ee                	and    ebp,esi
    2417:	08 00                	or     BYTE PTR [eax],al
    2419:	00 01                	add    BYTE PTR [ecx],al
    241b:	0e                   	push   cs
    241c:	c9                   	leave  
    241d:	01 00                	add    DWORD PTR [eax],eax
    241f:	00 05 03 b8 72 00    	add    BYTE PTR ds:0x72b803,al
    2425:	9f                   	lahf   
    2426:	00 0c 03             	add    BYTE PTR [ebx+eax*1],cl
    2429:	00 00                	add    BYTE PTR [eax],al
    242b:	04 00                	add    al,0x0
    242d:	e4 08                	in     al,0x8
    242f:	00 00                	add    BYTE PTR [eax],al
    2431:	04 01                	add    al,0x1
    2433:	ac                   	lods   al,BYTE PTR ds:[esi]
    2434:	00 00                	add    BYTE PTR [eax],al
    2436:	00 0c ed 09 00 00 1e 	add    BYTE PTR [ebp*8+0x1e000009],cl
    243d:	00 00                	add    BYTE PTR [eax],al
    243f:	00 0c 1f             	add    BYTE PTR [edi+ebx*1],cl
    2442:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    2448:	f8                   	clc    
    2449:	0b 00                	or     eax,DWORD PTR [eax]
    244b:	00 02                	add    BYTE PTR [edx],al
    244d:	01 06                	add    DWORD PTR [esi],eax
    244f:	8c 00                	mov    WORD PTR [eax],es
    2451:	00 00                	add    BYTE PTR [eax],al
    2453:	02 01                	add    al,BYTE PTR [ecx]
    2455:	06                   	push   es
    2456:	85 00                	test   DWORD PTR [eax],eax
    2458:	00 00                	add    BYTE PTR [eax],al
    245a:	02 02                	add    al,BYTE PTR [edx]
    245c:	05 72 01 00 00       	add    eax,0x172
    2461:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2468:	02 08                	add    cl,BYTE PTR [eax]
    246a:	05 00 00 00 00       	add    eax,0x0
    246f:	02 01                	add    al,BYTE PTR [ecx]
    2471:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    2477:	02 07                	add    al,BYTE PTR [edi]
    2479:	19 01                	sbb    DWORD PTR [ecx],eax
    247b:	00 00                	add    BYTE PTR [eax],al
    247d:	04 0e                	add    al,0xe
    247f:	00 00                	add    BYTE PTR [eax],al
    2481:	00 02                	add    BYTE PTR [edx],al
    2483:	34 61                	xor    al,0x61
    2485:	00 00                	add    BYTE PTR [eax],al
    2487:	00 02                	add    BYTE PTR [edx],al
    2489:	04 07                	add    al,0x7
    248b:	61                   	popa   
    248c:	00 00                	add    BYTE PTR [eax],al
    248e:	00 02                	add    BYTE PTR [edx],al
    2490:	08 07                	or     BYTE PTR [edi],al
    2492:	57                   	push   edi
    2493:	00 00                	add    BYTE PTR [eax],al
    2495:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    249c:	56                   	push   esi
    249d:	61                   	popa   
    249e:	00 00                	add    BYTE PTR [eax],al
    24a0:	00 04 bd 02 00 00 03 	add    BYTE PTR [edi*4+0x3000002],al
    24a7:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    24aa:	00 00                	add    BYTE PTR [eax],al
    24ac:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    24b3:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    24b6:	66 01 00             	add    WORD PTR [eax],ax
    24b9:	00 02                	add    BYTE PTR [edx],al
    24bb:	01 02                	add    DWORD PTR [edx],eax
    24bd:	13 01                	adc    eax,DWORD PTR [ecx]
    24bf:	00 00                	add    BYTE PTR [eax],al
    24c1:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    24c4:	83 01 00             	add    DWORD PTR [ecx],0x0
    24c7:	00 04 ce             	add    BYTE PTR [esi+ecx*8],al
    24ca:	09 00                	or     DWORD PTR [eax],eax
    24cc:	00 04 15 85 00 00 00 	add    BYTE PTR [edx*1+0x85],al
    24d3:	05 d1 03 00 00       	add    eax,0x3d1
    24d8:	04 61                	add    al,0x61
    24da:	00 00                	add    BYTE PTR [eax],al
    24dc:	00 05 15 a0 01 00    	add    BYTE PTR ds:0x1a015,al
    24e2:	00 06                	add    BYTE PTR [esi],al
    24e4:	71 03                	jno    24e9 <sysEnter_Vector-0x12db17>
    24e6:	00 00                	add    BYTE PTR [eax],al
    24e8:	00 06                	add    BYTE PTR [esi],al
    24ea:	dd 04 00             	fld    QWORD PTR [eax+eax*1]
    24ed:	00 01                	add    BYTE PTR [ecx],al
    24ef:	06                   	push   es
    24f0:	d6                   	(bad)  
    24f1:	02 00                	add    al,BYTE PTR [eax]
    24f3:	00 02                	add    BYTE PTR [edx],al
    24f5:	06                   	push   es
    24f6:	cf                   	iret   
    24f7:	04 00                	add    al,0x0
    24f9:	00 03                	add    BYTE PTR [ebx],al
    24fb:	06                   	push   es
    24fc:	08 03                	or     BYTE PTR [ebx],al
    24fe:	00 00                	add    BYTE PTR [eax],al
    2500:	04 06                	add    al,0x6
    2502:	f3 02 00             	repz add al,BYTE PTR [eax]
    2505:	00 05 06 64 03 00    	add    BYTE PTR ds:0x36406,al
    250b:	00 0a                	add    BYTE PTR [edx],cl
    250d:	06                   	push   es
    250e:	45                   	inc    ebp
    250f:	04 00                	add    al,0x0
    2511:	00 0b                	add    BYTE PTR [ebx],cl
    2513:	06                   	push   es
    2514:	81 03 00 00 0c 06    	add    DWORD PTR [ebx],0x60c0000
    251a:	b4 04                	mov    ah,0x4
    251c:	00 00                	add    BYTE PTR [eax],al
    251e:	0d 06 52 04 00       	or     eax,0x45206
    2523:	00 0e                	add    BYTE PTR [esi],cl
    2525:	06                   	push   es
    2526:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    2527:	04 00                	add    al,0x0
    2529:	00 0f                	add    BYTE PTR [edi],cl
    252b:	06                   	push   es
    252c:	3f                   	aas    
    252d:	03 00                	add    eax,DWORD PTR [eax]
    252f:	00 10                	add    BYTE PTR [eax],dl
    2531:	06                   	push   es
    2532:	5f                   	pop    edi
    2533:	04 00                	add    al,0x0
    2535:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    2538:	f1                   	icebp  
    2539:	03 00                	add    eax,DWORD PTR [eax]
    253b:	00 50 06             	add    BYTE PTR [eax+0x6],dl
    253e:	8a 04 00             	mov    al,BYTE PTR [eax+eax*1]
    2541:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
    2544:	8b 02                	mov    eax,DWORD PTR [edx]
    2546:	00 00                	add    BYTE PTR [eax],al
    2548:	61                   	popa   
    2549:	06                   	push   es
    254a:	0e                   	push   cs
    254b:	04 00                	add    al,0x0
    254d:	00 97 07 a6 03 00    	add    BYTE PTR [edi+0x3a607],dl
    2553:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    2556:	07                   	pop    es
    2557:	7d 04                	jge    255d <sysEnter_Vector-0x12daa3>
    2559:	00 00                	add    BYTE PTR [eax],al
    255b:	64 01 07             	add    DWORD PTR fs:[edi],eax
    255e:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    2561:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    2564:	07                   	pop    es
    2565:	af                   	scas   eax,DWORD PTR es:[edi]
    2566:	02 00                	add    al,BYTE PTR [eax]
    2568:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    256b:	07                   	pop    es
    256c:	2a 03                	sub    al,BYTE PTR [ebx]
    256e:	00 00                	add    BYTE PTR [eax],al
    2570:	67 01 07             	add    DWORD PTR [bx],eax
    2573:	1d 03 00 00 68       	sbb    eax,0x68000003
    2578:	01 07                	add    DWORD PTR [edi],eax
    257a:	f7 04 00 00 69 01 07 	test   DWORD PTR [eax+eax*1],0x7016900
    2581:	9e                   	sahf   
    2582:	02 00                	add    al,BYTE PTR [eax]
    2584:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    2587:	07                   	pop    es
    2588:	e3 02                	jecxz  258c <sysEnter_Vector-0x12da74>
    258a:	00 00                	add    BYTE PTR [eax],al
    258c:	71 01                	jno    258f <sysEnter_Vector-0x12da71>
    258e:	07                   	pop    es
    258f:	c1 04 00 00          	rol    DWORD PTR [eax+eax*1],0x0
    2593:	00 03                	add    BYTE PTR [ebx],al
    2595:	07                   	pop    es
    2596:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2597:	04 00                	add    al,0x0
    2599:	00 01                	add    BYTE PTR [ecx],al
    259b:	03 07                	add    eax,DWORD PTR [edi]
    259d:	bd 03 00 00 02       	mov    ebp,0x2000003
    25a2:	03 07                	add    eax,DWORD PTR [edi]
    25a4:	96                   	xchg   esi,eax
    25a5:	03 00                	add    eax,DWORD PTR [eax]
    25a7:	00 03                	add    BYTE PTR [ebx],al
    25a9:	03 07                	add    eax,DWORD PTR [edi]
    25ab:	34 04                	xor    al,0x4
    25ad:	00 00                	add    BYTE PTR [eax],al
    25af:	04 03                	add    al,0x3
    25b1:	07                   	pop    es
    25b2:	97                   	xchg   edi,eax
    25b3:	04 00                	add    al,0x0
    25b5:	00 05 03 07 e2 03    	add    BYTE PTR ds:0x3e20703,al
    25bb:	00 00                	add    BYTE PTR [eax],al
    25bd:	06                   	push   es
    25be:	03 07                	add    eax,DWORD PTR [edi]
    25c0:	52                   	push   edx
    25c1:	03 00                	add    eax,DWORD PTR [eax]
    25c3:	00 00                	add    BYTE PTR [eax],al
    25c5:	09 00                	or     DWORD PTR [eax],eax
    25c7:	08 d9                	or     cl,bl
    25c9:	09 00                	or     DWORD PTR [eax],eax
    25cb:	00 18                	add    BYTE PTR [eax],bl
    25cd:	05 3c f4 01 00       	add    eax,0x1f43c
    25d2:	00 09                	add    BYTE PTR [ecx],cl
    25d4:	c4 09                	les    ecx,FWORD PTR [ecx]
    25d6:	00 00                	add    BYTE PTR [eax],al
    25d8:	05 3e f4 01 00       	add    eax,0x1f43e
    25dd:	00 00                	add    BYTE PTR [eax],al
    25df:	0a 6c 65 6e          	or     ch,BYTE PTR [ebp+eiz*2+0x6e]
    25e3:	00 05 3f 3a 00 00    	add    BYTE PTR ds:0x3a3f,al
    25e9:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    25ec:	d4 09                	aam    0x9
    25ee:	00 00                	add    BYTE PTR [eax],al
    25f0:	05 40 3a 00 00       	add    eax,0x3a40
    25f5:	00 08                	add    BYTE PTR [eax],cl
    25f7:	09 fc                	or     esp,edi
    25f9:	09 00                	or     DWORD PTR [eax],eax
    25fb:	00 05 41 3a 00 00    	add    BYTE PTR ds:0x3a41,al
    2601:	00 0c 0a             	add    BYTE PTR [edx+ecx*1],cl
    2604:	66                   	data16
    2605:	64 00 05 42 3a 00 00 	add    BYTE PTR fs:0x3a42,al
    260c:	00 10                	add    BYTE PTR [eax],dl
    260e:	09 73 0e             	or     DWORD PTR [ebx+0xe],esi
    2611:	00 00                	add    BYTE PTR [eax],al
    2613:	05 43 3a 00 00       	add    eax,0x3a43
    2618:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
    261b:	0b 04 04             	or     eax,DWORD PTR [esp+eax*1]
    261e:	02 0a                	add    cl,BYTE PTR [edx]
    2620:	00 00                	add    BYTE PTR [eax],al
    2622:	05 44 a0 01 00       	add    eax,0x1a044
    2627:	00 02                	add    BYTE PTR [edx],al
    2629:	04 07                	add    al,0x7
    262b:	5c                   	pop    esp
    262c:	00 00                	add    BYTE PTR [eax],al
    262e:	00 0c 04             	add    BYTE PTR [esp+eax*1],cl
    2631:	25 00 00 00 0d       	and    eax,0xd000000
    2636:	c9                   	leave  
    2637:	09 00                	or     DWORD PTR [eax],eax
    2639:	00 01                	add    BYTE PTR [ecx],al
    263b:	0d f4 01 00 00       	or     eax,0x1f4
    2640:	0c 1f                	or     al,0x1f
    2642:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    2648:	01 9c 7b 02 00 00 0e 	add    DWORD PTR [ebx+edi*2+0xe000002],ebx
    264f:	c4 09                	les    ecx,FWORD PTR [ecx]
    2651:	00 00                	add    BYTE PTR [eax],al
    2653:	01 0d f4 01 00 00    	add    DWORD PTR ds:0x1f4,ecx
    2659:	02 91 00 0f 6c 65    	add    dl,BYTE PTR [ecx+0x656c0f00]
    265f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2660:	00 01                	add    BYTE PTR [ecx],al
    2662:	0d 7a 00 00 00       	or     eax,0x7a
    2667:	02 91 04 0e d4 09    	add    dl,BYTE PTR [ecx+0x9d40e04]
    266d:	00 00                	add    BYTE PTR [eax],al
    266f:	01 0d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ecx
    2675:	02 91 08 0e fc 09    	add    dl,BYTE PTR [ecx+0x9fc0e08]
    267b:	00 00                	add    BYTE PTR [eax],al
    267d:	01 0d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ecx
    2683:	02 91 0c 0f 66 64    	add    dl,BYTE PTR [ecx+0x64660f0c]
    2689:	00 01                	add    BYTE PTR [ecx],al
    268b:	0d 3a 00 00 00       	or     eax,0x3a
    2690:	02 91 10 0e 73 0e    	add    dl,BYTE PTR [ecx+0xe730e10]
    2696:	00 00                	add    BYTE PTR [eax],al
    2698:	01 0d a1 00 00 00    	add    DWORD PTR ds:0xa1,ecx
    269e:	02 91 14 00 10 a3    	add    dl,BYTE PTR [ecx-0x5cefffec]
    26a4:	00 00                	add    BYTE PTR [eax],al
    26a6:	00 06                	add    BYTE PTR [esi],al
    26a8:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
    26ab:	00 00                	add    BYTE PTR [eax],al
    26ad:	05 03 8c 72 00       	add    eax,0x728c03
    26b2:	9f                   	lahf   
    26b3:	10 34 01             	adc    BYTE PTR [ecx+eax*1],dh
    26b6:	00 00                	add    BYTE PTR [eax],al
    26b8:	06                   	push   es
    26b9:	3a 56 00             	cmp    dl,BYTE PTR [esi+0x0]
    26bc:	00 00                	add    BYTE PTR [eax],al
    26be:	05 03 90 72 00       	add    eax,0x729003
    26c3:	9f                   	lahf   
    26c4:	10 7b 00             	adc    BYTE PTR [ebx+0x0],bh
    26c7:	00 00                	add    BYTE PTR [eax],al
    26c9:	06                   	push   es
    26ca:	3b 56 00             	cmp    edx,DWORD PTR [esi+0x0]
    26cd:	00 00                	add    BYTE PTR [eax],al
    26cf:	05 03 88 72 00       	add    eax,0x728803
    26d4:	9f                   	lahf   
    26d5:	10 7c 01 00          	adc    BYTE PTR [ecx+eax*1+0x0],bh
    26d9:	00 06                	add    BYTE PTR [esi],al
    26db:	3c 85                	cmp    al,0x85
    26dd:	00 00                	add    BYTE PTR [eax],al
    26df:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
    26e5:	9f                   	lahf   
    26e6:	10 6e 00             	adc    BYTE PTR [esi+0x0],ch
    26e9:	00 00                	add    BYTE PTR [eax],al
    26eb:	07                   	pop    es
    26ec:	34 d0                	xor    al,0xd0
    26ee:	02 00                	add    al,BYTE PTR [eax]
    26f0:	00 05 03 84 72 00    	add    BYTE PTR ds:0x728403,al
    26f6:	9f                   	lahf   
    26f7:	0c 04                	or     al,0x4
    26f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
    26fa:	00 00                	add    BYTE PTR [eax],al
    26fc:	00 10                	add    BYTE PTR [eax],dl
    26fe:	91                   	xchg   ecx,eax
    26ff:	00 00                	add    BYTE PTR [eax],al
    2701:	00 07                	add    BYTE PTR [edi],al
    2703:	35 56 00 00 00       	xor    eax,0x56
    2708:	05 03 80 72 00       	add    eax,0x728003
    270d:	9f                   	lahf   
    270e:	10 41 00             	adc    BYTE PTR [ecx+0x0],al
    2711:	00 00                	add    BYTE PTR [eax],al
    2713:	08 58 f8             	or     BYTE PTR [eax-0x8],bl
    2716:	02 00                	add    al,BYTE PTR [eax]
    2718:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
    271e:	9f                   	lahf   
    271f:	0c 04                	or     al,0x4
    2721:	08 02                	or     BYTE PTR [edx],al
    2723:	00 00                	add    BYTE PTR [eax],al
    2725:	10 e6                	adc    dh,ah
    2727:	09 00                	or     DWORD PTR [eax],eax
    2729:	00 01                	add    BYTE PTR [ecx],al
    272b:	0b f6                	or     esi,esi
    272d:	01 00                	add    DWORD PTR [eax],eax
    272f:	00 05 03 bc 72 00    	add    BYTE PTR ds:0x72bc03,al
    2735:	9f                   	lahf   
    2736:	00 19                	add    BYTE PTR [ecx],bl
    2738:	05 00 00 04 00       	add    eax,0x40000
    273d:	c6                   	(bad)  
    273e:	09 00                	or     DWORD PTR [eax],eax
    2740:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2743:	ac                   	lods   al,BYTE PTR ds:[esi]
    2744:	00 00                	add    BYTE PTR [eax],al
    2746:	00 0c f6             	add    BYTE PTR [esi+esi*8],cl
    2749:	0a 00                	or     al,BYTE PTR [eax]
    274b:	00 1e                	add    BYTE PTR [esi],bl
    274d:	00 00                	add    BYTE PTR [eax],al
    274f:	00 80 1f 00 9f 51    	add    BYTE PTR [eax+0x519f001f],al
    2755:	06                   	push   es
    2756:	00 00                	add    BYTE PTR [eax],al
    2758:	0d 0d 00 00 02       	or     eax,0x200000d
    275d:	01 06                	add    DWORD PTR [esi],eax
    275f:	85 00                	test   DWORD PTR [eax],eax
    2761:	00 00                	add    BYTE PTR [eax],al
    2763:	02 02                	add    al,BYTE PTR [edx]
    2765:	05 72 01 00 00       	add    eax,0x172
    276a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2771:	02 08                	add    cl,BYTE PTR [eax]
    2773:	05 00 00 00 00       	add    eax,0x0
    2778:	04 af                	add    al,0xaf
    277a:	06                   	push   es
    277b:	00 00                	add    BYTE PTR [eax],al
    277d:	02 2e                	add    ch,BYTE PTR [esi]
    277f:	4c                   	dec    esp
    2780:	00 00                	add    BYTE PTR [eax],al
    2782:	00 02                	add    BYTE PTR [edx],al
    2784:	01 08                	add    DWORD PTR [eax],ecx
    2786:	83 00 00             	add    DWORD PTR [eax],0x0
    2789:	00 04 9f             	add    BYTE PTR [edi+ebx*4],al
    278c:	05 00 00 02 31       	add    eax,0x31020000
    2791:	5e                   	pop    esi
    2792:	00 00                	add    BYTE PTR [eax],al
    2794:	00 02                	add    BYTE PTR [edx],al
    2796:	02 07                	add    al,BYTE PTR [edi]
    2798:	19 01                	sbb    DWORD PTR [ecx],eax
    279a:	00 00                	add    BYTE PTR [eax],al
    279c:	04 0e                	add    al,0xe
    279e:	00 00                	add    BYTE PTR [eax],al
    27a0:	00 02                	add    BYTE PTR [edx],al
    27a2:	34 70                	xor    al,0x70
    27a4:	00 00                	add    BYTE PTR [eax],al
    27a6:	00 02                	add    BYTE PTR [edx],al
    27a8:	04 07                	add    al,0x7
    27aa:	61                   	popa   
    27ab:	00 00                	add    BYTE PTR [eax],al
    27ad:	00 02                	add    BYTE PTR [edx],al
    27af:	08 07                	or     BYTE PTR [edi],al
    27b1:	57                   	push   edi
    27b2:	00 00                	add    BYTE PTR [eax],al
    27b4:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    27bb:	56                   	push   esi
    27bc:	70 00                	jo     27be <sysEnter_Vector-0x12d842>
    27be:	00 00                	add    BYTE PTR [eax],al
    27c0:	04 bd                	add    al,0xbd
    27c2:	02 00                	add    al,BYTE PTR [eax]
    27c4:	00 03                	add    BYTE PTR [ebx],al
    27c6:	d8 70 00             	fdiv   DWORD PTR [eax+0x0]
    27c9:	00 00                	add    BYTE PTR [eax],al
    27cb:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    27d2:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    27d5:	66 01 00             	add    WORD PTR [eax],ax
    27d8:	00 02                	add    BYTE PTR [edx],al
    27da:	01 06                	add    DWORD PTR [esi],eax
    27dc:	8c 00                	mov    WORD PTR [eax],es
    27de:	00 00                	add    BYTE PTR [eax],al
    27e0:	05 75 0a 00 00       	add    eax,0xa75
    27e5:	18 04 2f             	sbb    BYTE PTR [edi+ebp*1],al
    27e8:	0a 01                	or     al,BYTE PTR [ecx]
    27ea:	00 00                	add    BYTE PTR [eax],al
    27ec:	06                   	push   es
    27ed:	41                   	inc    ecx
    27ee:	0a 00                	or     al,BYTE PTR [eax]
    27f0:	00 04 31             	add    BYTE PTR [ecx+esi*1],al
    27f3:	65 00 00             	add    BYTE PTR gs:[eax],al
    27f6:	00 00                	add    BYTE PTR [eax],al
    27f8:	07                   	pop    es
    27f9:	6c                   	ins    BYTE PTR es:[edi],dx
    27fa:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    27fc:	00 04 32             	add    BYTE PTR [edx+esi*1],al
    27ff:	65 00 00             	add    BYTE PTR gs:[eax],al
    2802:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    2805:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2806:	0a 00                	or     al,BYTE PTR [eax]
    2808:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    280b:	0a 01                	or     al,BYTE PTR [ecx]
    280d:	00 00                	add    BYTE PTR [eax],al
    280f:	08 06                	or     BYTE PTR [esi],al
    2811:	e1 0a                	loope  281d <sysEnter_Vector-0x12d7e3>
    2813:	00 00                	add    BYTE PTR [eax],al
    2815:	04 34                	add    al,0x34
    2817:	53                   	push   ebx
    2818:	00 00                	add    BYTE PTR [eax],al
    281a:	00 0a                	add    BYTE PTR [edx],cl
    281c:	06                   	push   es
    281d:	68 0a 00 00 04       	push   0x400000a
    2822:	35 41 00 00 00       	xor    eax,0x41
    2827:	0c 06                	or     al,0x6
    2829:	19 0a                	sbb    DWORD PTR [edx],ecx
    282b:	00 00                	add    BYTE PTR [eax],al
    282d:	04 36                	add    al,0x36
    282f:	11 01                	adc    DWORD PTR [ecx],eax
    2831:	00 00                	add    BYTE PTR [eax],al
    2833:	10 06                	adc    BYTE PTR [esi],al
    2835:	2c 0a                	sub    al,0xa
    2837:	00 00                	add    BYTE PTR [eax],al
    2839:	04 36                	add    al,0x36
    283b:	11 01                	adc    DWORD PTR [ecx],eax
    283d:	00 00                	add    BYTE PTR [eax],al
    283f:	14 00                	adc    al,0x0
    2841:	02 01                	add    al,BYTE PTR [ecx]
    2843:	02 13                	add    dl,BYTE PTR [ebx]
    2845:	01 00                	add    DWORD PTR [eax],eax
    2847:	00 08                	add    BYTE PTR [eax],cl
    2849:	04 a9                	add    al,0xa9
    284b:	00 00                	add    BYTE PTR [eax],al
    284d:	00 04 31             	add    BYTE PTR [ecx+esi*1],al
    2850:	0a 00                	or     al,BYTE PTR [eax]
    2852:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    2855:	a9 00 00 00 02       	test   eax,0x2000000
    285a:	04 07                	add    al,0x7
    285c:	83 01 00             	add    DWORD PTR [ecx],0x0
    285f:	00 09                	add    BYTE PTR [ecx],cl
    2861:	d1 03                	rol    DWORD PTR [ebx],1
    2863:	00 00                	add    BYTE PTR [eax],al
    2865:	04 70                	add    al,0x70
    2867:	00 00                	add    BYTE PTR [eax],al
    2869:	00 07                	add    BYTE PTR [edi],al
    286b:	15 1d 02 00 00       	adc    eax,0x21d
    2870:	0a 71 03             	or     dh,BYTE PTR [ecx+0x3]
    2873:	00 00                	add    BYTE PTR [eax],al
    2875:	00 0a                	add    BYTE PTR [edx],cl
    2877:	dd 04 00             	fld    QWORD PTR [eax+eax*1]
    287a:	00 01                	add    BYTE PTR [ecx],al
    287c:	0a d6                	or     dl,dh
    287e:	02 00                	add    al,BYTE PTR [eax]
    2880:	00 02                	add    BYTE PTR [edx],al
    2882:	0a cf                	or     cl,bh
    2884:	04 00                	add    al,0x0
    2886:	00 03                	add    BYTE PTR [ebx],al
    2888:	0a 08                	or     cl,BYTE PTR [eax]
    288a:	03 00                	add    eax,DWORD PTR [eax]
    288c:	00 04 0a             	add    BYTE PTR [edx+ecx*1],al
    288f:	f3 02 00             	repz add al,BYTE PTR [eax]
    2892:	00 05 0a 64 03 00    	add    BYTE PTR ds:0x3640a,al
    2898:	00 0a                	add    BYTE PTR [edx],cl
    289a:	0a 45 04             	or     al,BYTE PTR [ebp+0x4]
    289d:	00 00                	add    BYTE PTR [eax],al
    289f:	0b 0a                	or     ecx,DWORD PTR [edx]
    28a1:	81 03 00 00 0c 0a    	add    DWORD PTR [ebx],0xa0c0000
    28a7:	b4 04                	mov    ah,0x4
    28a9:	00 00                	add    BYTE PTR [eax],al
    28ab:	0d 0a 52 04 00       	or     eax,0x4520a
    28b0:	00 0e                	add    BYTE PTR [esi],cl
    28b2:	0a a7 04 00 00 0f    	or     ah,BYTE PTR [edi+0xf000004]
    28b8:	0a 3f                	or     bh,BYTE PTR [edi]
    28ba:	03 00                	add    eax,DWORD PTR [eax]
    28bc:	00 10                	add    BYTE PTR [eax],dl
    28be:	0a 5f 04             	or     bl,BYTE PTR [edi+0x4]
    28c1:	00 00                	add    BYTE PTR [eax],al
    28c3:	4f                   	dec    edi
    28c4:	0a f1                	or     dh,cl
    28c6:	03 00                	add    eax,DWORD PTR [eax]
    28c8:	00 50 0a             	add    BYTE PTR [eax+0xa],dl
    28cb:	8a 04 00             	mov    al,BYTE PTR [eax+eax*1]
    28ce:	00 59 0a             	add    BYTE PTR [ecx+0xa],bl
    28d1:	8b 02                	mov    eax,DWORD PTR [edx]
    28d3:	00 00                	add    BYTE PTR [eax],al
    28d5:	61                   	popa   
    28d6:	0a 0e                	or     cl,BYTE PTR [esi]
    28d8:	04 00                	add    al,0x0
    28da:	00 97 0b a6 03 00    	add    BYTE PTR [edi+0x3a60b],dl
    28e0:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    28e3:	0b 7d 04             	or     edi,DWORD PTR [ebp+0x4]
    28e6:	00 00                	add    BYTE PTR [eax],al
    28e8:	64 01 0b             	add    DWORD PTR fs:[ebx],ecx
    28eb:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    28ee:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    28f1:	0b af 02 00 00 66    	or     ebp,DWORD PTR [edi+0x66000002]
    28f7:	01 0b                	add    DWORD PTR [ebx],ecx
    28f9:	2a 03                	sub    al,BYTE PTR [ebx]
    28fb:	00 00                	add    BYTE PTR [eax],al
    28fd:	67 01 0b             	add    DWORD PTR [bp+di],ecx
    2900:	1d 03 00 00 68       	sbb    eax,0x68000003
    2905:	01 0b                	add    DWORD PTR [ebx],ecx
    2907:	f7 04 00 00 69 01 0b 	test   DWORD PTR [eax+eax*1],0xb016900
    290e:	9e                   	sahf   
    290f:	02 00                	add    al,BYTE PTR [eax]
    2911:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    2914:	0b e3                	or     esp,ebx
    2916:	02 00                	add    al,BYTE PTR [eax]
    2918:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    291b:	0b c1                	or     eax,ecx
    291d:	04 00                	add    al,0x0
    291f:	00 00                	add    BYTE PTR [eax],al
    2921:	03 0b                	add    ecx,DWORD PTR [ebx]
    2923:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2924:	04 00                	add    al,0x0
    2926:	00 01                	add    BYTE PTR [ecx],al
    2928:	03 0b                	add    ecx,DWORD PTR [ebx]
    292a:	bd 03 00 00 02       	mov    ebp,0x2000003
    292f:	03 0b                	add    ecx,DWORD PTR [ebx]
    2931:	96                   	xchg   esi,eax
    2932:	03 00                	add    eax,DWORD PTR [eax]
    2934:	00 03                	add    BYTE PTR [ebx],al
    2936:	03 0b                	add    ecx,DWORD PTR [ebx]
    2938:	34 04                	xor    al,0x4
    293a:	00 00                	add    BYTE PTR [eax],al
    293c:	04 03                	add    al,0x3
    293e:	0b 97 04 00 00 05    	or     edx,DWORD PTR [edi+0x5000004]
    2944:	03 0b                	add    ecx,DWORD PTR [ebx]
    2946:	e2 03                	loop   294b <sysEnter_Vector-0x12d6b5>
    2948:	00 00                	add    BYTE PTR [eax],al
    294a:	06                   	push   es
    294b:	03 0b                	add    ecx,DWORD PTR [ebx]
    294d:	52                   	push   edx
    294e:	03 00                	add    eax,DWORD PTR [eax]
    2950:	00 00                	add    BYTE PTR [eax],al
    2952:	09 00                	or     DWORD PTR [eax],eax
    2954:	0c 04                	or     al,0x4
    2956:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2959:	5c                   	pop    esp
    295a:	00 00                	add    BYTE PTR [eax],al
    295c:	00 08                	add    BYTE PTR [eax],cl
    295e:	04 a2                	add    al,0xa2
    2960:	00 00                	add    BYTE PTR [eax],al
    2962:	00 0d 7b 0a 00 00    	add    BYTE PTR ds:0xa7b,cl
    2968:	01 0f                	add    DWORD PTR [edi],ecx
    296a:	80 1f 00             	sbb    BYTE PTR [edi],0x0
    296d:	9f                   	lahf   
    296e:	6c                   	ins    BYTE PTR es:[edi],dx
    296f:	00 00                	add    BYTE PTR [eax],al
    2971:	00 01                	add    BYTE PTR [ecx],al
    2973:	9c                   	pushf  
    2974:	0e                   	push   cs
    2975:	48                   	dec    eax
    2976:	0a 00                	or     al,BYTE PTR [eax]
    2978:	00 01                	add    BYTE PTR [ecx],al
    297a:	19 65 00             	sbb    DWORD PTR [ebp+0x0],esp
    297d:	00 00                	add    BYTE PTR [eax],al
    297f:	ec                   	in     al,dx
    2980:	1f                   	pop    ds
    2981:	00 9f 87 00 00 00    	add    BYTE PTR [edi+0x87],bl
    2987:	01 9c 73 02 00 00 0f 	add    DWORD PTR [ebx+esi*2+0xf000002],ebx
    298e:	ba 06 00 00 01       	mov    edx,0x1000006
    2993:	19 89 00 00 00 02    	sbb    DWORD PTR [ecx+0x2000000],ecx
    2999:	91                   	xchg   ecx,eax
    299a:	00 10                	add    BYTE PTR [eax],dl
    299c:	c0 0a 00             	ror    BYTE PTR [edx],0x0
    299f:	00 01                	add    BYTE PTR [ecx],al
    29a1:	1d 65 00 00 00       	sbb    eax,0x65
    29a6:	02 91 74 00 11 3b    	add    dl,BYTE PTR [ecx+0x3b110074]
    29ac:	0a 00                	or     al,BYTE PTR [eax]
    29ae:	00 01                	add    BYTE PTR [ecx],al
    29b0:	31 73 20             	xor    DWORD PTR [ebx+0x20],esi
    29b3:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    29b9:	01 9c a4 02 00 00 0f 	add    DWORD PTR [esp+eiz*4+0xf000002],ebx
    29c0:	18 0b                	sbb    BYTE PTR [ebx],cl
    29c2:	00 00                	add    BYTE PTR [eax],al
    29c4:	01 31                	add    DWORD PTR [ecx],esi
    29c6:	1d 02 00 00 02       	sbb    eax,0x2000002
    29cb:	91                   	xchg   ecx,eax
    29cc:	00 12                	add    BYTE PTR [edx],dl
    29ce:	6d                   	ins    DWORD PTR es:[edi],dx
    29cf:	70 00                	jo     29d1 <sysEnter_Vector-0x12d62f>
    29d1:	01 33                	add    DWORD PTR [ebx],esi
    29d3:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    29d4:	02 00                	add    al,BYTE PTR [eax]
    29d6:	00 02                	add    BYTE PTR [edx],al
    29d8:	91                   	xchg   ecx,eax
    29d9:	6c                   	ins    BYTE PTR es:[edi],dx
    29da:	00 08                	add    BYTE PTR [eax],cl
    29dc:	04 17                	add    al,0x17
    29de:	01 00                	add    DWORD PTR [eax],eax
    29e0:	00 0e                	add    BYTE PTR [esi],cl
    29e2:	2d 0b 00 00 01       	sub    eax,0x100000b
    29e7:	46                   	inc    esi
    29e8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    29e9:	02 00                	add    al,BYTE PTR [eax]
    29eb:	00 e6                	add    dh,ah
    29ed:	20 00                	and    BYTE PTR [eax],al
    29ef:	9f                   	lahf   
    29f0:	84 00                	test   BYTE PTR [eax],al
    29f2:	00 00                	add    BYTE PTR [eax],al
    29f4:	01 9c e0 02 00 00 0f 	add    DWORD PTR [eax+eiz*8+0xf000002],ebx
    29fb:	ba 06 00 00 01       	mov    edx,0x1000006
    2a00:	46                   	inc    esi
    2a01:	89 00                	mov    DWORD PTR [eax],eax
    2a03:	00 00                	add    BYTE PTR [eax],al
    2a05:	02 91 00 10 03 0b    	add    dl,BYTE PTR [ecx+0xb031000]
    2a0b:	00 00                	add    BYTE PTR [eax],al
    2a0d:	01 48 a4             	add    DWORD PTR [eax-0x5c],ecx
    2a10:	02 00                	add    al,BYTE PTR [eax]
    2a12:	00 02                	add    BYTE PTR [edx],al
    2a14:	91                   	xchg   ecx,eax
    2a15:	74 00                	je     2a17 <sysEnter_Vector-0x12d5e9>
    2a17:	11 4f 0b             	adc    DWORD PTR [edi+0xb],ecx
    2a1a:	00 00                	add    BYTE PTR [eax],al
    2a1c:	01 56 6a             	add    DWORD PTR [esi+0x6a],edx
    2a1f:	21 00                	and    DWORD PTR [eax],eax
    2a21:	9f                   	lahf   
    2a22:	8b 00                	mov    eax,DWORD PTR [eax]
    2a24:	00 00                	add    BYTE PTR [eax],al
    2a26:	01 9c 28 03 00 00 0f 	add    DWORD PTR [eax+ebp*1+0xf000003],ebx
    2a2d:	e6 0a                	out    0xa,al
    2a2f:	00 00                	add    BYTE PTR [eax],al
    2a31:	01 56 a4             	add    DWORD PTR [esi-0x5c],edx
    2a34:	02 00                	add    al,BYTE PTR [eax]
    2a36:	00 02                	add    BYTE PTR [edx],al
    2a38:	91                   	xchg   ecx,eax
    2a39:	00 10                	add    BYTE PTR [eax],dl
    2a3b:	03 0b                	add    ecx,DWORD PTR [ebx]
    2a3d:	00 00                	add    BYTE PTR [eax],al
    2a3f:	01 59 a4             	add    DWORD PTR [ecx-0x5c],ebx
    2a42:	02 00                	add    al,BYTE PTR [eax]
    2a44:	00 02                	add    BYTE PTR [edx],al
    2a46:	91                   	xchg   ecx,eax
    2a47:	6c                   	ins    BYTE PTR es:[edi],dx
    2a48:	13 21                	adc    esp,DWORD PTR [ecx]
    2a4a:	0b 00                	or     eax,DWORD PTR [eax]
    2a4c:	00 01                	add    BYTE PTR [ecx],al
    2a4e:	5f                   	pop    edi
    2a4f:	a9 21 00 9f 13       	test   eax,0x139f0021
    2a54:	b5 0a                	mov    ch,0xa
    2a56:	00 00                	add    BYTE PTR [eax],al
    2a58:	01 65 cc             	add    DWORD PTR [ebp-0x34],esp
    2a5b:	21 00                	and    DWORD PTR [eax],eax
    2a5d:	9f                   	lahf   
    2a5e:	00 14 11             	add    BYTE PTR [ecx+edx*1],dl
    2a61:	0a 00                	or     al,BYTE PTR [eax]
    2a63:	00 01                	add    BYTE PTR [ecx],al
    2a65:	6d                   	ins    DWORD PTR es:[edi],dx
    2a66:	1d 02 00 00 f5       	sbb    eax,0xf5000002
    2a6b:	21 00                	and    DWORD PTR [eax],eax
    2a6d:	9f                   	lahf   
    2a6e:	43                   	inc    ebx
    2a6f:	02 00                	add    al,BYTE PTR [eax]
    2a71:	00 01                	add    BYTE PTR [ecx],al
    2a73:	9c                   	pushf  
    2a74:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    2a75:	03 00                	add    eax,DWORD PTR [eax]
    2a77:	00 0f                	add    BYTE PTR [edi],cl
    2a79:	ba 06 00 00 01       	mov    edx,0x1000006
    2a7e:	6d                   	ins    DWORD PTR es:[edi],dx
    2a7f:	89 00                	mov    DWORD PTR [eax],eax
    2a81:	00 00                	add    BYTE PTR [eax],al
    2a83:	02 91 00 10 06 05    	add    dl,BYTE PTR [ecx+0x5061000]
    2a89:	00 00                	add    BYTE PTR [eax],al
    2a8b:	01 6f 1d             	add    DWORD PTR [edi+0x1d],ebp
    2a8e:	02 00                	add    al,BYTE PTR [eax]
    2a90:	00 02                	add    BYTE PTR [edx],al
    2a92:	91                   	xchg   ecx,eax
    2a93:	5c                   	pop    esp
    2a94:	10 d1                	adc    cl,dl
    2a96:	0a 00                	or     al,BYTE PTR [eax]
    2a98:	00 01                	add    BYTE PTR [ecx],al
    2a9a:	71 65                	jno    2b01 <sysEnter_Vector-0x12d4ff>
    2a9c:	00 00                	add    BYTE PTR [eax],al
    2a9e:	00 02                	add    BYTE PTR [edx],al
    2aa0:	91                   	xchg   ecx,eax
    2aa1:	64 10 a1 0a 00 00 01 	adc    BYTE PTR fs:[ecx+0x100000a],ah
    2aa8:	72 65                	jb     2b0f <sysEnter_Vector-0x12d4f1>
    2aaa:	00 00                	add    BYTE PTR [eax],al
    2aac:	00 02                	add    BYTE PTR [edx],al
    2aae:	91                   	xchg   ecx,eax
    2aaf:	60                   	pusha  
    2ab0:	10 03                	adc    BYTE PTR [ebx],al
    2ab2:	0b 00                	or     eax,DWORD PTR [eax]
    2ab4:	00 01                	add    BYTE PTR [ecx],al
    2ab6:	73 a4                	jae    2a5c <sysEnter_Vector-0x12d5a4>
    2ab8:	02 00                	add    al,BYTE PTR [eax]
    2aba:	00 02                	add    BYTE PTR [edx],al
    2abc:	91                   	xchg   ecx,eax
    2abd:	68 10 86 0a 00       	push   0xa8610
    2ac2:	00 01                	add    BYTE PTR [ecx],al
    2ac4:	74 89                	je     2a4f <sysEnter_Vector-0x12d5b1>
    2ac6:	00 00                	add    BYTE PTR [eax],al
    2ac8:	00 02                	add    BYTE PTR [edx],al
    2aca:	91                   	xchg   ecx,eax
    2acb:	6c                   	ins    BYTE PTR es:[edi],dx
    2acc:	10 1e                	adc    BYTE PTR [esi],bl
    2ace:	0a 00                	or     al,BYTE PTR [eax]
    2ad0:	00 01                	add    BYTE PTR [ecx],al
    2ad2:	75 a4                	jne    2a78 <sysEnter_Vector-0x12d588>
    2ad4:	02 00                	add    al,BYTE PTR [eax]
    2ad6:	00 05 03 d4 72 00    	add    BYTE PTR ds:0x72d403,al
    2adc:	9f                   	lahf   
    2add:	00 14 7f             	add    BYTE PTR [edi+edi*2],dl
    2ae0:	0a 00                	or     al,BYTE PTR [eax]
    2ae2:	00 01                	add    BYTE PTR [ecx],al
    2ae4:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2ae5:	1d 02 00 00 38       	sbb    eax,0x38000002
    2aea:	24 00                	and    al,0x0
    2aec:	9f                   	lahf   
    2aed:	20 00                	and    BYTE PTR [eax],al
    2aef:	00 00                	add    BYTE PTR [eax],al
    2af1:	01 9c cf 03 00 00 0f 	add    DWORD PTR [edi+ecx*8+0xf000003],ebx
    2af8:	ba 06 00 00 01       	mov    edx,0x1000006
    2afd:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2afe:	89 00                	mov    DWORD PTR [eax],eax
    2b00:	00 00                	add    BYTE PTR [eax],al
    2b02:	02 91 00 00 14 d8    	add    dl,BYTE PTR [ecx-0x27ec0000]
    2b08:	0a 00                	or     al,BYTE PTR [eax]
    2b0a:	00 01                	add    BYTE PTR [ecx],al
    2b0c:	b2 1d                	mov    dl,0x1d
    2b0e:	02 00                	add    al,BYTE PTR [eax]
    2b10:	00 58 24             	add    BYTE PTR [eax+0x24],bl
    2b13:	00 9f 03 01 00 00    	add    BYTE PTR [edi+0x103],bl
    2b19:	01 9c 2e 04 00 00 0f 	add    DWORD PTR [esi+ebp*1+0xf000004],ebx
    2b20:	0b 0b                	or     ecx,DWORD PTR [ebx]
    2b22:	00 00                	add    BYTE PTR [eax],al
    2b24:	01 b2 1d 02 00 00    	add    DWORD PTR [edx+0x21d],esi
    2b2a:	02 91 00 0f ae 0a    	add    dl,BYTE PTR [ecx+0xaae0f00]
    2b30:	00 00                	add    BYTE PTR [eax],al
    2b32:	01 b2 65 00 00 00    	add    DWORD PTR [edx+0x65],esi
    2b38:	02 91 04 10 c8 0a    	add    dl,BYTE PTR [ecx+0xac81004]
    2b3e:	00 00                	add    BYTE PTR [eax],al
    2b40:	01 b8 65 00 00 00    	add    DWORD PTR [eax+0x65],edi
    2b46:	02 91 6c 12 6d 70    	add    dl,BYTE PTR [ecx+0x706d126c]
    2b4c:	00 01                	add    BYTE PTR [ecx],al
    2b4e:	b9 a4 02 00 00       	mov    ecx,0x2a4
    2b53:	02 91 68 10 ee 0a    	add    dl,BYTE PTR [ecx+0xaee1068]
    2b59:	00 00                	add    BYTE PTR [eax],al
    2b5b:	01 c5                	add    ebp,eax
    2b5d:	2e                   	cs
    2b5e:	04 00                	add    al,0x0
    2b60:	00 02                	add    BYTE PTR [edx],al
    2b62:	91                   	xchg   ecx,eax
    2b63:	64 00 08             	add    BYTE PTR fs:[eax],cl
    2b66:	04 7e                	add    al,0x7e
    2b68:	00 00                	add    BYTE PTR [eax],al
    2b6a:	00 14 47             	add    BYTE PTR [edi+eax*2],dl
    2b6d:	0b 00                	or     eax,DWORD PTR [eax]
    2b6f:	00 01                	add    BYTE PTR [ecx],al
    2b71:	d3 1d 02 00 00 5b    	rcr    DWORD PTR ds:0x5b000002,cl
    2b77:	25 00 9f 23 00       	and    eax,0x239f00
    2b7c:	00 00                	add    BYTE PTR [eax],al
    2b7e:	01 9c 6a 04 00 00 0f 	add    DWORD PTR [edx+ebp*2+0xf000004],ebx
    2b85:	0b 0b                	or     ecx,DWORD PTR [ebx]
    2b87:	00 00                	add    BYTE PTR [eax],al
    2b89:	01 d3                	add    ebx,edx
    2b8b:	1d 02 00 00 02       	sbb    eax,0x2000002
    2b90:	91                   	xchg   ecx,eax
    2b91:	00 0f                	add    BYTE PTR [edi],cl
    2b93:	ae                   	scas   al,BYTE PTR es:[edi]
    2b94:	0a 00                	or     al,BYTE PTR [eax]
    2b96:	00 01                	add    BYTE PTR [ecx],al
    2b98:	d3 65 00             	shl    DWORD PTR [ebp+0x0],cl
    2b9b:	00 00                	add    BYTE PTR [eax],al
    2b9d:	02 91 04 00 11 13    	add    dl,BYTE PTR [ecx+0x13110004]
    2ba3:	0b 00                	or     eax,DWORD PTR [eax]
    2ba5:	00 01                	add    BYTE PTR [ecx],al
    2ba7:	d8 7e 25             	fdivr  DWORD PTR [esi+0x25]
    2baa:	00 9f 21 00 00 00    	add    BYTE PTR [edi+0x21],bl
    2bb0:	01 9c 8e 04 00 00 0f 	add    DWORD PTR [esi+ecx*4+0xf000004],ebx
    2bb7:	18 0b                	sbb    BYTE PTR [ebx],cl
    2bb9:	00 00                	add    BYTE PTR [eax],al
    2bbb:	01 d8                	add    eax,ebx
    2bbd:	1d 02 00 00 02       	sbb    eax,0x2000002
    2bc2:	91                   	xchg   ecx,eax
    2bc3:	00 00                	add    BYTE PTR [eax],al
    2bc5:	0d 92 0a 00 00       	or     eax,0xa92
    2bca:	01 dd                	add    ebp,ebx
    2bcc:	9f                   	lahf   
    2bcd:	25 00 9f 32 00       	and    eax,0x329f00
    2bd2:	00 00                	add    BYTE PTR [eax],al
    2bd4:	01 9c 15 a3 00 00 00 	add    DWORD PTR [ebp+edx*1+0xa3],ebx
    2bdb:	04 39                	add    al,0x39
    2bdd:	65 00 00             	add    BYTE PTR gs:[eax],al
    2be0:	00 05 03 8c 72 00    	add    BYTE PTR ds:0x728c03,al
    2be6:	9f                   	lahf   
    2be7:	15 34 01 00 00       	adc    eax,0x134
    2bec:	04 3a                	add    al,0x3a
    2bee:	65 00 00             	add    BYTE PTR gs:[eax],al
    2bf1:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
    2bf7:	9f                   	lahf   
    2bf8:	15 7b 00 00 00       	adc    eax,0x7b
    2bfd:	04 3b                	add    al,0x3b
    2bff:	65 00 00             	add    BYTE PTR gs:[eax],al
    2c02:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
    2c08:	9f                   	lahf   
    2c09:	15 7c 01 00 00       	adc    eax,0x17c
    2c0e:	04 3c                	add    al,0x3c
    2c10:	94                   	xchg   esp,eax
    2c11:	00 00                	add    BYTE PTR [eax],al
    2c13:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
    2c19:	9f                   	lahf   
    2c1a:	15 6e 00 00 00       	adc    eax,0x6e
    2c1f:	05 34 2e 04 00       	add    eax,0x42e34
    2c24:	00 05 03 84 72 00    	add    BYTE PTR ds:0x728403,al
    2c2a:	9f                   	lahf   
    2c2b:	15 91 00 00 00       	adc    eax,0x91
    2c30:	05 35 65 00 00       	add    eax,0x6535
    2c35:	00 05 03 80 72 00    	add    BYTE PTR ds:0x728003,al
    2c3b:	9f                   	lahf   
    2c3c:	15 41 00 00 00       	adc    eax,0x41
    2c41:	06                   	push   es
    2c42:	58                   	pop    eax
    2c43:	16                   	push   ss
    2c44:	05 00 00 05 03       	add    eax,0x3050000
    2c49:	94                   	xchg   esp,eax
    2c4a:	72 00                	jb     2c4c <sysEnter_Vector-0x12d3b4>
    2c4c:	9f                   	lahf   
    2c4d:	08 04 26             	or     BYTE PTR [esi+eiz*1],al
    2c50:	02 00                	add    al,BYTE PTR [eax]
    2c52:	00 00                	add    BYTE PTR [eax],al
    2c54:	5f                   	pop    edi
    2c55:	02 00                	add    al,BYTE PTR [eax]
    2c57:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2c5a:	10 0b                	adc    BYTE PTR [ebx],cl
    2c5c:	00 00                	add    BYTE PTR [eax],al
    2c5e:	04 01                	add    al,0x1
    2c60:	ac                   	lods   al,BYTE PTR ds:[esi]
    2c61:	00 00                	add    BYTE PTR [eax],al
    2c63:	00 0c 61             	add    BYTE PTR [ecx+eiz*2],cl
    2c66:	0b 00                	or     eax,DWORD PTR [eax]
    2c68:	00 1e                	add    BYTE PTR [esi],bl
    2c6a:	00 00                	add    BYTE PTR [eax],al
    2c6c:	00 d4                	add    ah,dl
    2c6e:	25 00 9f bb 01       	and    eax,0x1bb9f00
    2c73:	00 00                	add    BYTE PTR [eax],al
    2c75:	e9 0e 00 00 02       	jmp    2002c88 <sysEnter_Vector+0x1ed2c88>
    2c7a:	01 08                	add    DWORD PTR [eax],ecx
    2c7c:	83 00 00             	add    DWORD PTR [eax],0x0
    2c7f:	00 02                	add    BYTE PTR [edx],al
    2c81:	02 07                	add    al,BYTE PTR [edi]
    2c83:	19 01                	sbb    DWORD PTR [ecx],eax
    2c85:	00 00                	add    BYTE PTR [eax],al
    2c87:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2c8a:	61                   	popa   
    2c8b:	00 00                	add    BYTE PTR [eax],al
    2c8d:	00 02                	add    BYTE PTR [edx],al
    2c8f:	04 07                	add    al,0x7
    2c91:	5c                   	pop    esp
    2c92:	00 00                	add    BYTE PTR [eax],al
    2c94:	00 02                	add    BYTE PTR [edx],al
    2c96:	01 06                	add    DWORD PTR [esi],eax
    2c98:	85 00                	test   DWORD PTR [eax],eax
    2c9a:	00 00                	add    BYTE PTR [eax],al
    2c9c:	02 02                	add    al,BYTE PTR [edx]
    2c9e:	05 72 01 00 00       	add    eax,0x172
    2ca3:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2caa:	02 08                	add    cl,BYTE PTR [eax]
    2cac:	05 00 00 00 00       	add    eax,0x0
    2cb1:	02 08                	add    cl,BYTE PTR [eax]
    2cb3:	07                   	pop    es
    2cb4:	57                   	push   edi
    2cb5:	00 00                	add    BYTE PTR [eax],al
    2cb7:	00 02                	add    BYTE PTR [edx],al
    2cb9:	04 05                	add    al,0x5
    2cbb:	05 00 00 00 02       	add    eax,0x2000000
    2cc0:	04 07                	add    al,0x7
    2cc2:	83 01 00             	add    DWORD PTR [ecx],0x0
    2cc5:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2cc8:	05 04 7a 00 00       	add    eax,0x7a04
    2ccd:	00 02                	add    BYTE PTR [edx],al
    2ccf:	01 06                	add    DWORD PTR [esi],eax
    2cd1:	8c 00                	mov    WORD PTR [eax],es
    2cd3:	00 00                	add    BYTE PTR [eax],al
    2cd5:	06                   	push   es
    2cd6:	0e                   	push   cs
    2cd7:	00 00                	add    BYTE PTR [eax],al
    2cd9:	00 02                	add    BYTE PTR [edx],al
    2cdb:	34 33                	xor    al,0x33
    2cdd:	00 00                	add    BYTE PTR [eax],al
    2cdf:	00 06                	add    BYTE PTR [esi],al
    2ce1:	4d                   	dec    ebp
    2ce2:	00 00                	add    BYTE PTR [eax],al
    2ce4:	00 02                	add    BYTE PTR [edx],al
    2ce6:	56                   	push   esi
    2ce7:	33 00                	xor    eax,DWORD PTR [eax]
    2ce9:	00 00                	add    BYTE PTR [eax],al
    2ceb:	05 04 9d 00 00       	add    eax,0x9d04
    2cf0:	00 07                	add    BYTE PTR [edi],al
    2cf2:	7a 00                	jp     2cf4 <sysEnter_Vector-0x12d30c>
    2cf4:	00 00                	add    BYTE PTR [eax],al
    2cf6:	06                   	push   es
    2cf7:	bd 02 00 00 03       	mov    ebp,0x3000002
    2cfc:	d8 33                	fdiv   DWORD PTR [ebx]
    2cfe:	00 00                	add    BYTE PTR [eax],al
    2d00:	00 02                	add    BYTE PTR [edx],al
    2d02:	0c 04                	or     al,0x4
    2d04:	66 01 00             	add    WORD PTR [eax],ax
    2d07:	00 02                	add    BYTE PTR [edx],al
    2d09:	01 02                	add    DWORD PTR [edx],eax
    2d0b:	13 01                	adc    eax,DWORD PTR [ecx]
    2d0d:	00 00                	add    BYTE PTR [eax],al
    2d0f:	08 73 0b             	or     BYTE PTR [ebx+0xb],dh
    2d12:	00 00                	add    BYTE PTR [eax],al
    2d14:	01 0b                	add    DWORD PTR [ebx],ecx
    2d16:	72 00                	jb     2d18 <sysEnter_Vector-0x12d2e8>
    2d18:	00 00                	add    BYTE PTR [eax],al
    2d1a:	d4 25                	aam    0x25
    2d1c:	00 9f 9b 01 00 00    	add    BYTE PTR [edi+0x19b],bl
    2d22:	01 9c 85 01 00 00 09 	add    DWORD PTR [ebp+eax*4+0x9000001],ebx
    2d29:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2d2a:	0b 00                	or     eax,DWORD PTR [eax]
    2d2c:	00 01                	add    BYTE PTR [ecx],al
    2d2e:	0b 72 00             	or     esi,DWORD PTR [edx+0x0]
    2d31:	00 00                	add    BYTE PTR [eax],al
    2d33:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    2d39:	63 00                	arpl   WORD PTR [eax],ax
    2d3b:	01 0b                	add    DWORD PTR [ebx],ecx
    2d3d:	85 01                	test   DWORD PTR [ecx],eax
    2d3f:	00 00                	add    BYTE PTR [eax],al
    2d41:	02 91 04 0a 6e 00    	add    dl,BYTE PTR [ecx+0x6e0a04]
    2d47:	01 0b                	add    DWORD PTR [ebx],ecx
    2d49:	a2 00 00 00 02       	mov    ds:0x2000000,al
    2d4e:	91                   	xchg   ecx,eax
    2d4f:	08 0b                	or     BYTE PTR [ebx],cl
    2d51:	64                   	fs
    2d52:	77 00                	ja     2d54 <sysEnter_Vector-0x12d2ac>
    2d54:	01 0d b4 00 00 00    	add    DWORD PTR ds:0xb4,ecx
    2d5a:	02 91 5e 0b 64 64    	add    dl,BYTE PTR [ecx+0x64640b5e]
    2d60:	00 01                	add    BYTE PTR [ecx],al
    2d62:	0d b4 00 00 00       	or     eax,0xb4
    2d67:	02 91 5f 0c 06 26    	add    dl,BYTE PTR [ecx+0x26060c5f]
    2d6d:	00 9f 7d 00 00 00    	add    BYTE PTR [edi+0x7d],bl
    2d73:	3c 01                	cmp    al,0x1
    2d75:	00 00                	add    BYTE PTR [eax],al
    2d77:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    2d7a:	01 14 8c             	add    DWORD PTR [esp+ecx*4],edx
    2d7d:	01 00                	add    DWORD PTR [eax],eax
    2d7f:	00 02                	add    BYTE PTR [edx],al
    2d81:	91                   	xchg   ecx,eax
    2d82:	74 0b                	je     2d8f <sysEnter_Vector-0x12d271>
    2d84:	74 00                	je     2d86 <sysEnter_Vector-0x12d27a>
    2d86:	01 15 97 01 00 00    	add    DWORD PTR ds:0x197,edx
    2d8c:	02 91 70 00 0c 89    	add    dl,BYTE PTR [ecx-0x76f3ff90]
    2d92:	26 00 9f 79 00 00 00 	add    BYTE PTR es:[edi+0x79],bl
    2d99:	62 01                	bound  eax,QWORD PTR [ecx]
    2d9b:	00 00                	add    BYTE PTR [eax],al
    2d9d:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    2da0:	01 24 8c             	add    DWORD PTR [esp+ecx*4],esp
    2da3:	01 00                	add    DWORD PTR [eax],eax
    2da5:	00 02                	add    BYTE PTR [edx],al
    2da7:	91                   	xchg   ecx,eax
    2da8:	6c                   	ins    BYTE PTR es:[edi],dx
    2da9:	0b 74 00 01          	or     esi,DWORD PTR [eax+eax*1+0x1]
    2dad:	25 97 01 00 00       	and    eax,0x197
    2db2:	02 91 68 00 0d 02    	add    dl,BYTE PTR [ecx+0x20d0068]
    2db8:	27                   	daa    
    2db9:	00 9f 6b 00 00 00    	add    BYTE PTR [edi+0x6b],bl
    2dbf:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    2dc2:	01 33                	add    DWORD PTR [ebx],esi
    2dc4:	97                   	xchg   edi,eax
    2dc5:	00 00                	add    BYTE PTR [eax],al
    2dc7:	00 02                	add    BYTE PTR [edx],al
    2dc9:	91                   	xchg   ecx,eax
    2dca:	64 0b 74 00 01       	or     esi,DWORD PTR fs:[eax+eax*1+0x1]
    2dcf:	34 74                	xor    al,0x74
    2dd1:	00 00                	add    BYTE PTR [eax],al
    2dd3:	00 02                	add    BYTE PTR [edx],al
    2dd5:	91                   	xchg   ecx,eax
    2dd6:	60                   	pusha  
    2dd7:	00 00                	add    BYTE PTR [eax],al
    2dd9:	05 04 8b 01 00       	add    eax,0x18b04
    2dde:	00 0e                	add    BYTE PTR [esi],cl
    2de0:	05 04 92 01 00       	add    eax,0x19204
    2de5:	00 07                	add    BYTE PTR [edi],al
    2de7:	81 00 00 00 05 04    	add    DWORD PTR [eax],0x4050000
    2ded:	81 00 00 00 0f 7b    	add    DWORD PTR [eax],0x7b0f0000
    2df3:	0b 00                	or     eax,DWORD PTR [eax]
    2df5:	00 01                	add    BYTE PTR [ecx],al
    2df7:	42                   	inc    edx
    2df8:	72 00                	jb     2dfa <sysEnter_Vector-0x12d206>
    2dfa:	00 00                	add    BYTE PTR [eax],al
    2dfc:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2dfd:	27                   	daa    
    2dfe:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    2e04:	01 9c df 01 00 00 09 	add    DWORD PTR [edi+ebx*8+0x9000001],ebx
    2e0b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2e0c:	0b 00                	or     eax,DWORD PTR [eax]
    2e0e:	00 01                	add    BYTE PTR [ecx],al
    2e10:	42                   	inc    edx
    2e11:	72 00                	jb     2e13 <sysEnter_Vector-0x12d1ed>
    2e13:	00 00                	add    BYTE PTR [eax],al
    2e15:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    2e1b:	63 00                	arpl   WORD PTR [eax],ax
    2e1d:	01 42 85             	add    DWORD PTR [edx-0x7b],eax
    2e20:	01 00                	add    DWORD PTR [eax],eax
    2e22:	00 02                	add    BYTE PTR [edx],al
    2e24:	91                   	xchg   ecx,eax
    2e25:	04 0a                	add    al,0xa
    2e27:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2e28:	00 01                	add    BYTE PTR [ecx],al
    2e2a:	42                   	inc    edx
    2e2b:	a2 00 00 00 02       	mov    ds:0x2000000,al
    2e30:	91                   	xchg   ecx,eax
    2e31:	08 00                	or     BYTE PTR [eax],al
    2e33:	10 a3 00 00 00 04    	adc    BYTE PTR [ebx+0x4000000],ah
    2e39:	39 81 00 00 00 05    	cmp    DWORD PTR [ecx+0x5000000],eax
    2e3f:	03 8c 72 00 9f 10 34 	add    ecx,DWORD PTR [edx+esi*2+0x34109f00]
    2e46:	01 00                	add    DWORD PTR [eax],eax
    2e48:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    2e4b:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    2e51:	90                   	nop
    2e52:	72 00                	jb     2e54 <sysEnter_Vector-0x12d1ac>
    2e54:	9f                   	lahf   
    2e55:	10 7b 00             	adc    BYTE PTR [ebx+0x0],bh
    2e58:	00 00                	add    BYTE PTR [eax],al
    2e5a:	04 3b                	add    al,0x3b
    2e5c:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    2e62:	88 72 00             	mov    BYTE PTR [edx+0x0],dh
    2e65:	9f                   	lahf   
    2e66:	10 7c 01 00          	adc    BYTE PTR [ecx+eax*1+0x0],bh
    2e6a:	00 04 3c             	add    BYTE PTR [esp+edi*1],al
    2e6d:	64 00 00             	add    BYTE PTR fs:[eax],al
    2e70:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
    2e76:	9f                   	lahf   
    2e77:	10 6e 00             	adc    BYTE PTR [esi+0x0],ch
    2e7a:	00 00                	add    BYTE PTR [eax],al
    2e7c:	05 34 34 02 00       	add    eax,0x23434
    2e81:	00 05 03 84 72 00    	add    BYTE PTR ds:0x728403,al
    2e87:	9f                   	lahf   
    2e88:	05 04 8c 00 00       	add    eax,0x8c04
    2e8d:	00 10                	add    BYTE PTR [eax],dl
    2e8f:	91                   	xchg   ecx,eax
    2e90:	00 00                	add    BYTE PTR [eax],al
    2e92:	00 05 35 81 00 00    	add    BYTE PTR ds:0x8135,al
    2e98:	00 05 03 80 72 00    	add    BYTE PTR ds:0x728003,al
    2e9e:	9f                   	lahf   
    2e9f:	10 41 00             	adc    BYTE PTR [ecx+0x0],al
    2ea2:	00 00                	add    BYTE PTR [eax],al
    2ea4:	06                   	push   es
    2ea5:	58                   	pop    eax
    2ea6:	5c                   	pop    esp
    2ea7:	02 00                	add    al,BYTE PTR [eax]
    2ea9:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
    2eaf:	9f                   	lahf   
    2eb0:	05 04 74 00 00       	add    eax,0x7404
    2eb5:	00 00                	add    BYTE PTR [eax],al
    2eb7:	1e                   	push   ds
    2eb8:	02 00                	add    al,BYTE PTR [eax]
    2eba:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2ebd:	ed                   	in     eax,dx
    2ebe:	0b 00                	or     eax,DWORD PTR [eax]
    2ec0:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2ec3:	ac                   	lods   al,BYTE PTR ds:[esi]
    2ec4:	00 00                	add    BYTE PTR [eax],al
    2ec6:	00 0c 82             	add    BYTE PTR [edx+eax*4],cl
    2ec9:	0b 00                	or     eax,DWORD PTR [eax]
    2ecb:	00 1e                	add    BYTE PTR [esi],bl
    2ecd:	00 00                	add    BYTE PTR [eax],al
    2ecf:	00 90 27 00 9f e7    	add    BYTE PTR [eax-0x1860ffd9],dl
    2ed5:	00 00                	add    BYTE PTR [eax],al
    2ed7:	00 de                	add    dh,bl
    2ed9:	0f 00 00             	sldt   WORD PTR [eax]
    2edc:	02 01                	add    al,BYTE PTR [ecx]
    2ede:	06                   	push   es
    2edf:	8c 00                	mov    WORD PTR [eax],es
    2ee1:	00 00                	add    BYTE PTR [eax],al
    2ee3:	02 01                	add    al,BYTE PTR [ecx]
    2ee5:	06                   	push   es
    2ee6:	85 00                	test   DWORD PTR [eax],eax
    2ee8:	00 00                	add    BYTE PTR [eax],al
    2eea:	02 02                	add    al,BYTE PTR [edx]
    2eec:	05 72 01 00 00       	add    eax,0x172
    2ef1:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2ef8:	02 08                	add    cl,BYTE PTR [eax]
    2efa:	05 00 00 00 00       	add    eax,0x0
    2eff:	04 af                	add    al,0xaf
    2f01:	06                   	push   es
    2f02:	00 00                	add    BYTE PTR [eax],al
    2f04:	02 2e                	add    ch,BYTE PTR [esi]
    2f06:	53                   	push   ebx
    2f07:	00 00                	add    BYTE PTR [eax],al
    2f09:	00 02                	add    BYTE PTR [edx],al
    2f0b:	01 08                	add    DWORD PTR [eax],ecx
    2f0d:	83 00 00             	add    DWORD PTR [eax],0x0
    2f10:	00 04 9f             	add    BYTE PTR [edi+ebx*4],al
    2f13:	05 00 00 02 31       	add    eax,0x31020000
    2f18:	65 00 00             	add    BYTE PTR gs:[eax],al
    2f1b:	00 02                	add    BYTE PTR [edx],al
    2f1d:	02 07                	add    al,BYTE PTR [edi]
    2f1f:	19 01                	sbb    DWORD PTR [ecx],eax
    2f21:	00 00                	add    BYTE PTR [eax],al
    2f23:	04 0e                	add    al,0xe
    2f25:	00 00                	add    BYTE PTR [eax],al
    2f27:	00 02                	add    BYTE PTR [edx],al
    2f29:	34 77                	xor    al,0x77
    2f2b:	00 00                	add    BYTE PTR [eax],al
    2f2d:	00 02                	add    BYTE PTR [edx],al
    2f2f:	04 07                	add    al,0x7
    2f31:	61                   	popa   
    2f32:	00 00                	add    BYTE PTR [eax],al
    2f34:	00 02                	add    BYTE PTR [edx],al
    2f36:	08 07                	or     BYTE PTR [edi],al
    2f38:	57                   	push   edi
    2f39:	00 00                	add    BYTE PTR [eax],al
    2f3b:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    2f42:	56                   	push   esi
    2f43:	77 00                	ja     2f45 <sysEnter_Vector-0x12d0bb>
    2f45:	00 00                	add    BYTE PTR [eax],al
    2f47:	04 bd                	add    al,0xbd
    2f49:	02 00                	add    al,BYTE PTR [eax]
    2f4b:	00 03                	add    BYTE PTR [ebx],al
    2f4d:	d8 77 00             	fdiv   DWORD PTR [edi+0x0]
    2f50:	00 00                	add    BYTE PTR [eax],al
    2f52:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2f59:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2f5c:	66 01 00             	add    WORD PTR [eax],ax
    2f5f:	00 02                	add    BYTE PTR [edx],al
    2f61:	01 02                	add    DWORD PTR [edx],eax
    2f63:	13 01                	adc    eax,DWORD PTR [ecx]
    2f65:	00 00                	add    BYTE PTR [eax],al
    2f67:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2f6a:	83 01 00             	add    DWORD PTR [ecx],0x0
    2f6d:	00 05 04 02 04 07    	add    BYTE PTR ds:0x7040204,al
    2f73:	5c                   	pop    esp
    2f74:	00 00                	add    BYTE PTR [eax],al
    2f76:	00 06                	add    BYTE PTR [esi],al
    2f78:	04 25                	add    al,0x25
    2f7a:	00 00                	add    BYTE PTR [eax],al
    2f7c:	00 07                	add    BYTE PTR [edi],al
    2f7e:	96                   	xchg   esi,eax
    2f7f:	0b 00                	or     eax,DWORD PTR [eax]
    2f81:	00 01                	add    BYTE PTR [ecx],al
    2f83:	08 b7 00 00 00 90    	or     BYTE PTR [edi-0x70000000],dh
    2f89:	27                   	daa    
    2f8a:	00 9f c7 00 00 00    	add    BYTE PTR [edi+0xc7],bl
    2f90:	01 9c 49 01 00 00 08 	add    DWORD PTR [ecx+ecx*2+0x8000001],ebx
    2f97:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    2f9a:	01 08                	add    DWORD PTR [eax],ecx
    2f9c:	b7 00                	mov    bh,0x0
    2f9e:	00 00                	add    BYTE PTR [eax],al
    2fa0:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    2fa6:	6c                   	ins    BYTE PTR es:[edi],dx
    2fa7:	00 01                	add    BYTE PTR [ecx],al
    2fa9:	08 3a                	or     BYTE PTR [edx],bh
    2fab:	00 00                	add    BYTE PTR [eax],al
    2fad:	00 02                	add    BYTE PTR [edx],al
    2faf:	91                   	xchg   ecx,eax
    2fb0:	04 08                	add    al,0x8
    2fb2:	6c                   	ins    BYTE PTR es:[edi],dx
    2fb3:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    2fb5:	00 01                	add    BYTE PTR [ecx],al
    2fb7:	08 90 00 00 00 02    	or     BYTE PTR [eax+0x2000000],dl
    2fbd:	91                   	xchg   ecx,eax
    2fbe:	08 09                	or     BYTE PTR [ecx],cl
    2fc0:	64 00 01             	add    BYTE PTR fs:[ecx],al
    2fc3:	0a 49 01             	or     cl,BYTE PTR [ecx+0x1]
    2fc6:	00 00                	add    BYTE PTR [eax],al
    2fc8:	02 91 74 09 65 00    	add    dl,BYTE PTR [ecx+0x650974]
    2fce:	01 0b                	add    DWORD PTR [ebx],ecx
    2fd0:	4f                   	dec    edi
    2fd1:	01 00                	add    DWORD PTR [eax],eax
    2fd3:	00 02                	add    BYTE PTR [edx],al
    2fd5:	91                   	xchg   ecx,eax
    2fd6:	70 0a                	jo     2fe2 <sysEnter_Vector-0x12d01e>
    2fd8:	9e                   	sahf   
    2fd9:	0b 00                	or     eax,DWORD PTR [eax]
    2fdb:	00 01                	add    BYTE PTR [ecx],al
    2fdd:	0c 5a                	or     al,0x5a
    2fdf:	00 00                	add    BYTE PTR [eax],al
    2fe1:	00 02                	add    BYTE PTR [edx],al
    2fe3:	91                   	xchg   ecx,eax
    2fe4:	6a 09                	push   0x9
    2fe6:	66                   	data16
    2fe7:	00 01                	add    BYTE PTR [ecx],al
    2fe9:	0d 55 01 00 00       	or     eax,0x155
    2fee:	02 91 6c 0a a3 0b    	add    dl,BYTE PTR [ecx+0xba30a6c]
    2ff4:	00 00                	add    BYTE PTR [eax],al
    2ff6:	01 0e                	add    DWORD PTR [esi],ecx
    2ff8:	6c                   	ins    BYTE PTR es:[edi],dx
    2ff9:	00 00                	add    BYTE PTR [eax],al
    2ffb:	00 02                	add    BYTE PTR [edx],al
    2ffd:	91                   	xchg   ecx,eax
    2ffe:	64 00 06             	add    BYTE PTR fs:[esi],al
    3001:	04 48                	add    al,0x48
    3003:	00 00                	add    BYTE PTR [eax],al
    3005:	00 06                	add    BYTE PTR [esi],al
    3007:	04 5a                	add    al,0x5a
    3009:	00 00                	add    BYTE PTR [eax],al
    300b:	00 06                	add    BYTE PTR [esi],al
    300d:	04 6c                	add    al,0x6c
    300f:	00 00                	add    BYTE PTR [eax],al
    3011:	00 0b                	add    BYTE PTR [ebx],cl
    3013:	8f                   	(bad)  
    3014:	0b 00                	or     eax,DWORD PTR [eax]
    3016:	00 01                	add    BYTE PTR [ecx],al
    3018:	1f                   	pop    ds
    3019:	b7 00                	mov    bh,0x0
    301b:	00 00                	add    BYTE PTR [eax],al
    301d:	57                   	push   edi
    301e:	28 00                	sub    BYTE PTR [eax],al
    3020:	9f                   	lahf   
    3021:	20 00                	and    BYTE PTR [eax],al
    3023:	00 00                	add    BYTE PTR [eax],al
    3025:	01 9c 9e 01 00 00 08 	add    DWORD PTR [esi+ebx*4+0x8000001],ebx
    302c:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    302f:	01 1f                	add    DWORD PTR [edi],ebx
    3031:	b7 00                	mov    bh,0x0
    3033:	00 00                	add    BYTE PTR [eax],al
    3035:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    303b:	6c                   	ins    BYTE PTR es:[edi],dx
    303c:	00 01                	add    BYTE PTR [ecx],al
    303e:	1f                   	pop    ds
    303f:	3a 00                	cmp    al,BYTE PTR [eax]
    3041:	00 00                	add    BYTE PTR [eax],al
    3043:	02 91 04 08 6c 65    	add    dl,BYTE PTR [ecx+0x656c0804]
    3049:	6e                   	outs   dx,BYTE PTR ds:[esi]
    304a:	00 01                	add    BYTE PTR [ecx],al
    304c:	1f                   	pop    ds
    304d:	90                   	nop
    304e:	00 00                	add    BYTE PTR [eax],al
    3050:	00 02                	add    BYTE PTR [edx],al
    3052:	91                   	xchg   ecx,eax
    3053:	08 00                	or     BYTE PTR [eax],al
    3055:	0c a3                	or     al,0xa3
    3057:	00 00                	add    BYTE PTR [eax],al
    3059:	00 04 39             	add    BYTE PTR [ecx+edi*1],al
    305c:	6c                   	ins    BYTE PTR es:[edi],dx
    305d:	00 00                	add    BYTE PTR [eax],al
    305f:	00 05 03 8c 72 00    	add    BYTE PTR ds:0x728c03,al
    3065:	9f                   	lahf   
    3066:	0c 34                	or     al,0x34
    3068:	01 00                	add    DWORD PTR [eax],eax
    306a:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    306d:	6c                   	ins    BYTE PTR es:[edi],dx
    306e:	00 00                	add    BYTE PTR [eax],al
    3070:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
    3076:	9f                   	lahf   
    3077:	0c 7b                	or     al,0x7b
    3079:	00 00                	add    BYTE PTR [eax],al
    307b:	00 04 3b             	add    BYTE PTR [ebx+edi*1],al
    307e:	6c                   	ins    BYTE PTR es:[edi],dx
    307f:	00 00                	add    BYTE PTR [eax],al
    3081:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
    3087:	9f                   	lahf   
    3088:	0c 7c                	or     al,0x7c
    308a:	01 00                	add    DWORD PTR [eax],eax
    308c:	00 04 3c             	add    BYTE PTR [esp+edi*1],al
    308f:	9b                   	fwait
    3090:	00 00                	add    BYTE PTR [eax],al
    3092:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
    3098:	9f                   	lahf   
    3099:	0c 6e                	or     al,0x6e
    309b:	00 00                	add    BYTE PTR [eax],al
    309d:	00 05 34 f3 01 00    	add    BYTE PTR ds:0x1f334,al
    30a3:	00 05 03 84 72 00    	add    BYTE PTR ds:0x728403,al
    30a9:	9f                   	lahf   
    30aa:	06                   	push   es
    30ab:	04 85                	add    al,0x85
    30ad:	00 00                	add    BYTE PTR [eax],al
    30af:	00 0c 91             	add    BYTE PTR [ecx+edx*4],cl
    30b2:	00 00                	add    BYTE PTR [eax],al
    30b4:	00 05 35 6c 00 00    	add    BYTE PTR ds:0x6c35,al
    30ba:	00 05 03 80 72 00    	add    BYTE PTR ds:0x728003,al
    30c0:	9f                   	lahf   
    30c1:	0c 41                	or     al,0x41
    30c3:	00 00                	add    BYTE PTR [eax],al
    30c5:	00 06                	add    BYTE PTR [esi],al
    30c7:	58                   	pop    eax
    30c8:	1b 02                	sbb    eax,DWORD PTR [edx]
    30ca:	00 00                	add    BYTE PTR [eax],al
    30cc:	05 03 94 72 00       	add    eax,0x729403
    30d1:	9f                   	lahf   
    30d2:	06                   	push   es
    30d3:	04 c0                	add    al,0xc0
    30d5:	00 00                	add    BYTE PTR [eax],al
    30d7:	00 00                	add    BYTE PTR [eax],al
    30d9:	89 02                	mov    DWORD PTR [edx],eax
    30db:	00 00                	add    BYTE PTR [eax],al
    30dd:	04 00                	add    al,0x0
    30df:	aa                   	stos   BYTE PTR es:[edi],al
    30e0:	0c 00                	or     al,0x0
    30e2:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    30e5:	ac                   	lods   al,BYTE PTR ds:[esi]
    30e6:	00 00                	add    BYTE PTR [eax],al
    30e8:	00 0c a8             	add    BYTE PTR [eax+ebp*4],cl
    30eb:	0b 00                	or     eax,DWORD PTR [eax]
    30ed:	00 1e                	add    BYTE PTR [esi],bl
    30ef:	00 00                	add    BYTE PTR [eax],al
    30f1:	00 78 28             	add    BYTE PTR [eax+0x28],bh
    30f4:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    30fa:	b6 10                	mov    dh,0x10
    30fc:	00 00                	add    BYTE PTR [eax],al
    30fe:	02 01                	add    al,BYTE PTR [ecx]
    3100:	06                   	push   es
    3101:	8c 00                	mov    WORD PTR [eax],es
    3103:	00 00                	add    BYTE PTR [eax],al
    3105:	02 01                	add    al,BYTE PTR [ecx]
    3107:	06                   	push   es
    3108:	85 00                	test   DWORD PTR [eax],eax
    310a:	00 00                	add    BYTE PTR [eax],al
    310c:	02 02                	add    al,BYTE PTR [edx]
    310e:	05 72 01 00 00       	add    eax,0x172
    3113:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    311a:	02 08                	add    cl,BYTE PTR [eax]
    311c:	05 00 00 00 00       	add    eax,0x0
    3121:	02 01                	add    al,BYTE PTR [ecx]
    3123:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    3129:	02 07                	add    al,BYTE PTR [edi]
    312b:	19 01                	sbb    DWORD PTR [ecx],eax
    312d:	00 00                	add    BYTE PTR [eax],al
    312f:	04 0e                	add    al,0xe
    3131:	00 00                	add    BYTE PTR [eax],al
    3133:	00 02                	add    BYTE PTR [edx],al
    3135:	34 61                	xor    al,0x61
    3137:	00 00                	add    BYTE PTR [eax],al
    3139:	00 02                	add    BYTE PTR [edx],al
    313b:	04 07                	add    al,0x7
    313d:	61                   	popa   
    313e:	00 00                	add    BYTE PTR [eax],al
    3140:	00 02                	add    BYTE PTR [edx],al
    3142:	08 07                	or     BYTE PTR [edi],al
    3144:	57                   	push   edi
    3145:	00 00                	add    BYTE PTR [eax],al
    3147:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    314e:	56                   	push   esi
    314f:	61                   	popa   
    3150:	00 00                	add    BYTE PTR [eax],al
    3152:	00 02                	add    BYTE PTR [edx],al
    3154:	04 05                	add    al,0x5
    3156:	05 00 00 00 02       	add    eax,0x2000000
    315b:	0c 04                	or     al,0x4
    315d:	66 01 00             	add    WORD PTR [eax],ax
    3160:	00 02                	add    BYTE PTR [edx],al
    3162:	01 02                	add    DWORD PTR [edx],eax
    3164:	13 01                	adc    eax,DWORD PTR [ecx]
    3166:	00 00                	add    BYTE PTR [eax],al
    3168:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    316b:	83 01 00             	add    DWORD PTR [ecx],0x0
    316e:	00 05 d1 03 00 00    	add    BYTE PTR ds:0x3d1,al
    3174:	04 61                	add    al,0x61
    3176:	00 00                	add    BYTE PTR [eax],al
    3178:	00 06                	add    BYTE PTR [esi],al
    317a:	15 8a 01 00 00       	adc    eax,0x18a
    317f:	06                   	push   es
    3180:	71 03                	jno    3185 <sysEnter_Vector-0x12ce7b>
    3182:	00 00                	add    BYTE PTR [eax],al
    3184:	00 06                	add    BYTE PTR [esi],al
    3186:	dd 04 00             	fld    QWORD PTR [eax+eax*1]
    3189:	00 01                	add    BYTE PTR [ecx],al
    318b:	06                   	push   es
    318c:	d6                   	(bad)  
    318d:	02 00                	add    al,BYTE PTR [eax]
    318f:	00 02                	add    BYTE PTR [edx],al
    3191:	06                   	push   es
    3192:	cf                   	iret   
    3193:	04 00                	add    al,0x0
    3195:	00 03                	add    BYTE PTR [ebx],al
    3197:	06                   	push   es
    3198:	08 03                	or     BYTE PTR [ebx],al
    319a:	00 00                	add    BYTE PTR [eax],al
    319c:	04 06                	add    al,0x6
    319e:	f3 02 00             	repz add al,BYTE PTR [eax]
    31a1:	00 05 06 64 03 00    	add    BYTE PTR ds:0x36406,al
    31a7:	00 0a                	add    BYTE PTR [edx],cl
    31a9:	06                   	push   es
    31aa:	45                   	inc    ebp
    31ab:	04 00                	add    al,0x0
    31ad:	00 0b                	add    BYTE PTR [ebx],cl
    31af:	06                   	push   es
    31b0:	81 03 00 00 0c 06    	add    DWORD PTR [ebx],0x60c0000
    31b6:	b4 04                	mov    ah,0x4
    31b8:	00 00                	add    BYTE PTR [eax],al
    31ba:	0d 06 52 04 00       	or     eax,0x45206
    31bf:	00 0e                	add    BYTE PTR [esi],cl
    31c1:	06                   	push   es
    31c2:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    31c3:	04 00                	add    al,0x0
    31c5:	00 0f                	add    BYTE PTR [edi],cl
    31c7:	06                   	push   es
    31c8:	3f                   	aas    
    31c9:	03 00                	add    eax,DWORD PTR [eax]
    31cb:	00 10                	add    BYTE PTR [eax],dl
    31cd:	06                   	push   es
    31ce:	5f                   	pop    edi
    31cf:	04 00                	add    al,0x0
    31d1:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    31d4:	f1                   	icebp  
    31d5:	03 00                	add    eax,DWORD PTR [eax]
    31d7:	00 50 06             	add    BYTE PTR [eax+0x6],dl
    31da:	8a 04 00             	mov    al,BYTE PTR [eax+eax*1]
    31dd:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
    31e0:	8b 02                	mov    eax,DWORD PTR [edx]
    31e2:	00 00                	add    BYTE PTR [eax],al
    31e4:	61                   	popa   
    31e5:	06                   	push   es
    31e6:	0e                   	push   cs
    31e7:	04 00                	add    al,0x0
    31e9:	00 97 07 a6 03 00    	add    BYTE PTR [edi+0x3a607],dl
    31ef:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    31f2:	07                   	pop    es
    31f3:	7d 04                	jge    31f9 <sysEnter_Vector-0x12ce07>
    31f5:	00 00                	add    BYTE PTR [eax],al
    31f7:	64 01 07             	add    DWORD PTR fs:[edi],eax
    31fa:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    31fd:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    3200:	07                   	pop    es
    3201:	af                   	scas   eax,DWORD PTR es:[edi]
    3202:	02 00                	add    al,BYTE PTR [eax]
    3204:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    3207:	07                   	pop    es
    3208:	2a 03                	sub    al,BYTE PTR [ebx]
    320a:	00 00                	add    BYTE PTR [eax],al
    320c:	67 01 07             	add    DWORD PTR [bx],eax
    320f:	1d 03 00 00 68       	sbb    eax,0x68000003
    3214:	01 07                	add    DWORD PTR [edi],eax
    3216:	f7 04 00 00 69 01 07 	test   DWORD PTR [eax+eax*1],0x7016900
    321d:	9e                   	sahf   
    321e:	02 00                	add    al,BYTE PTR [eax]
    3220:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    3223:	07                   	pop    es
    3224:	e3 02                	jecxz  3228 <sysEnter_Vector-0x12cdd8>
    3226:	00 00                	add    BYTE PTR [eax],al
    3228:	71 01                	jno    322b <sysEnter_Vector-0x12cdd5>
    322a:	07                   	pop    es
    322b:	c1 04 00 00          	rol    DWORD PTR [eax+eax*1],0x0
    322f:	00 03                	add    BYTE PTR [ebx],al
    3231:	07                   	pop    es
    3232:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3233:	04 00                	add    al,0x0
    3235:	00 01                	add    BYTE PTR [ecx],al
    3237:	03 07                	add    eax,DWORD PTR [edi]
    3239:	bd 03 00 00 02       	mov    ebp,0x2000003
    323e:	03 07                	add    eax,DWORD PTR [edi]
    3240:	96                   	xchg   esi,eax
    3241:	03 00                	add    eax,DWORD PTR [eax]
    3243:	00 03                	add    BYTE PTR [ebx],al
    3245:	03 07                	add    eax,DWORD PTR [edi]
    3247:	34 04                	xor    al,0x4
    3249:	00 00                	add    BYTE PTR [eax],al
    324b:	04 03                	add    al,0x3
    324d:	07                   	pop    es
    324e:	97                   	xchg   edi,eax
    324f:	04 00                	add    al,0x0
    3251:	00 05 03 07 e2 03    	add    BYTE PTR ds:0x3e20703,al
    3257:	00 00                	add    BYTE PTR [eax],al
    3259:	06                   	push   es
    325a:	03 07                	add    eax,DWORD PTR [edi]
    325c:	52                   	push   edx
    325d:	03 00                	add    eax,DWORD PTR [eax]
    325f:	00 00                	add    BYTE PTR [eax],al
    3261:	09 00                	or     DWORD PTR [eax],eax
    3263:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3266:	5c                   	pop    esp
    3267:	00 00                	add    BYTE PTR [eax],al
    3269:	00 08                	add    BYTE PTR [eax],cl
    326b:	04 25                	add    al,0x25
    326d:	00 00                	add    BYTE PTR [eax],al
    326f:	00 09                	add    BYTE PTR [ecx],cl
    3271:	b7 0b                	mov    bh,0xb
    3273:	00 00                	add    BYTE PTR [eax],al
    3275:	01 0a                	add    DWORD PTR [edx],ecx
    3277:	3a 00                	cmp    al,BYTE PTR [eax]
    3279:	00 00                	add    BYTE PTR [eax],al
    327b:	78 28                	js     32a5 <sysEnter_Vector-0x12cd5b>
    327d:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
    3283:	01 9c bf 01 00 00 0a 	add    DWORD PTR [edi+edi*4+0xa000001],ebx
    328a:	c1 0b 00             	ror    DWORD PTR [ebx],0x0
    328d:	00 01                	add    BYTE PTR [ecx],al
    328f:	0a bf 01 00 00 02    	or     bh,BYTE PTR [edi+0x2000001]
    3295:	91                   	xchg   ecx,eax
    3296:	00 00                	add    BYTE PTR [eax],al
    3298:	08 04 3a             	or     BYTE PTR [edx+edi*1],al
    329b:	00 00                	add    BYTE PTR [eax],al
    329d:	00 09                	add    BYTE PTR [ecx],cl
    329f:	bc 0b 00 00 01       	mov    esp,0x100000b
    32a4:	0f 3a 00             	(bad)  
    32a7:	00 00                	add    BYTE PTR [eax],al
    32a9:	a1 28 00 9f 2e       	mov    eax,ds:0x2e9f0028
    32ae:	00 00                	add    BYTE PTR [eax],al
    32b0:	00 01                	add    BYTE PTR [ecx],al
    32b2:	9c                   	pushf  
    32b3:	09 02                	or     DWORD PTR [edx],eax
    32b5:	00 00                	add    BYTE PTR [eax],al
    32b7:	0a ce                	or     cl,dh
    32b9:	0b 00                	or     eax,DWORD PTR [eax]
    32bb:	00 01                	add    BYTE PTR [ecx],al
    32bd:	0f 3a 00             	(bad)  
    32c0:	00 00                	add    BYTE PTR [eax],al
    32c2:	02 91 00 0a c8 0b    	add    dl,BYTE PTR [ecx+0xbc80a00]
    32c8:	00 00                	add    BYTE PTR [eax],al
    32ca:	01 0f                	add    DWORD PTR [edi],ecx
    32cc:	3a 00                	cmp    al,BYTE PTR [eax]
    32ce:	00 00                	add    BYTE PTR [eax],al
    32d0:	02 91 04 0a fc 09    	add    dl,BYTE PTR [ecx+0x9fc0a04]
    32d6:	00 00                	add    BYTE PTR [eax],al
    32d8:	01 0f                	add    DWORD PTR [edi],ecx
    32da:	3a 00                	cmp    al,BYTE PTR [eax]
    32dc:	00 00                	add    BYTE PTR [eax],al
    32de:	02 91 08 00 0b a3    	add    dl,BYTE PTR [ecx-0x5cf4fff8]
    32e4:	00 00                	add    BYTE PTR [eax],al
    32e6:	00 03                	add    BYTE PTR [ebx],al
    32e8:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
    32eb:	00 00                	add    BYTE PTR [eax],al
    32ed:	05 03 8c 72 00       	add    eax,0x728c03
    32f2:	9f                   	lahf   
    32f3:	0b 34 01             	or     esi,DWORD PTR [ecx+eax*1]
    32f6:	00 00                	add    BYTE PTR [eax],al
    32f8:	03 3a                	add    edi,DWORD PTR [edx]
    32fa:	56                   	push   esi
    32fb:	00 00                	add    BYTE PTR [eax],al
    32fd:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
    3303:	9f                   	lahf   
    3304:	0b 7b 00             	or     edi,DWORD PTR [ebx+0x0]
    3307:	00 00                	add    BYTE PTR [eax],al
    3309:	03 3b                	add    edi,DWORD PTR [ebx]
    330b:	56                   	push   esi
    330c:	00 00                	add    BYTE PTR [eax],al
    330e:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
    3314:	9f                   	lahf   
    3315:	0b 7c 01 00          	or     edi,DWORD PTR [ecx+eax*1+0x0]
    3319:	00 03                	add    BYTE PTR [ebx],al
    331b:	3c 7a                	cmp    al,0x7a
    331d:	00 00                	add    BYTE PTR [eax],al
    331f:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
    3325:	9f                   	lahf   
    3326:	0b 6e 00             	or     ebp,DWORD PTR [esi+0x0]
    3329:	00 00                	add    BYTE PTR [eax],al
    332b:	04 34                	add    al,0x34
    332d:	5e                   	pop    esi
    332e:	02 00                	add    al,BYTE PTR [eax]
    3330:	00 05 03 84 72 00    	add    BYTE PTR ds:0x728403,al
    3336:	9f                   	lahf   
    3337:	08 04 6f             	or     BYTE PTR [edi+ebp*2],al
    333a:	00 00                	add    BYTE PTR [eax],al
    333c:	00 0b                	add    BYTE PTR [ebx],cl
    333e:	91                   	xchg   ecx,eax
    333f:	00 00                	add    BYTE PTR [eax],al
    3341:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    3348:	05 03 80 72 00       	add    eax,0x728003
    334d:	9f                   	lahf   
    334e:	0b 41 00             	or     eax,DWORD PTR [ecx+0x0]
    3351:	00 00                	add    BYTE PTR [eax],al
    3353:	05 58 86 02 00       	add    eax,0x28658
    3358:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
    335e:	9f                   	lahf   
    335f:	08 04 91             	or     BYTE PTR [ecx+edx*4],al
    3362:	01 00                	add    DWORD PTR [eax],eax
    3364:	00 00                	add    BYTE PTR [eax],al
    3366:	f0 03 00             	lock add eax,DWORD PTR [eax]
    3369:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    336c:	49                   	dec    ecx
    336d:	0d 00 00 04 01       	or     eax,0x1040000
    3372:	ac                   	lods   al,BYTE PTR ds:[esi]
    3373:	00 00                	add    BYTE PTR [eax],al
    3375:	00 0c e5 0b 00 00 1e 	add    BYTE PTR [eiz*8+0x1e00000b],cl
    337c:	00 00                	add    BYTE PTR [eax],al
    337e:	00 d0                	add    al,dl
    3380:	28 00                	sub    BYTE PTR [eax],al
    3382:	9f                   	lahf   
    3383:	18 07                	sbb    BYTE PTR [edi],al
    3385:	00 00                	add    BYTE PTR [eax],al
    3387:	b3 11                	mov    bl,0x11
    3389:	00 00                	add    BYTE PTR [eax],al
    338b:	02 92 08 00 00 02    	add    dl,BYTE PTR [edx+0x2000008]
    3391:	28 30                	sub    BYTE PTR [eax],dh
    3393:	00 00                	add    BYTE PTR [eax],al
    3395:	00 03                	add    BYTE PTR [ebx],al
    3397:	04 c6                	add    al,0xc6
    3399:	07                   	pop    es
    339a:	00 00                	add    BYTE PTR [eax],al
    339c:	3a 00                	cmp    al,BYTE PTR [eax]
    339e:	00 00                	add    BYTE PTR [eax],al
    33a0:	04 01                	add    al,0x1
    33a2:	06                   	push   es
    33a3:	8c 00                	mov    WORD PTR [eax],es
    33a5:	00 00                	add    BYTE PTR [eax],al
    33a7:	02 99 08 00 00 02    	add    bl,BYTE PTR [ecx+0x2000008]
    33ad:	62 25 00 00 00 04    	bound  esp,QWORD PTR ds:0x4000000
    33b3:	01 06                	add    DWORD PTR [esi],eax
    33b5:	85 00                	test   DWORD PTR [eax],eax
    33b7:	00 00                	add    BYTE PTR [eax],al
    33b9:	04 02                	add    al,0x2
    33bb:	05 72 01 00 00       	add    eax,0x172
    33c0:	05 04 05 69 6e       	add    eax,0x6e690504
    33c5:	74 00                	je     33c7 <sysEnter_Vector-0x12cc39>
    33c7:	04 08                	add    al,0x8
    33c9:	05 00 00 00 00       	add    eax,0x0
    33ce:	04 01                	add    al,0x1
    33d0:	08 83 00 00 00 04    	or     BYTE PTR [ebx+0x4000000],al
    33d6:	02 07                	add    al,BYTE PTR [edi]
    33d8:	19 01                	sbb    DWORD PTR [ecx],eax
    33da:	00 00                	add    BYTE PTR [eax],al
    33dc:	02 0e                	add    cl,BYTE PTR [esi]
    33de:	00 00                	add    BYTE PTR [eax],al
    33e0:	00 03                	add    BYTE PTR [ebx],al
    33e2:	34 81                	xor    al,0x81
    33e4:	00 00                	add    BYTE PTR [eax],al
    33e6:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    33e9:	07                   	pop    es
    33ea:	61                   	popa   
    33eb:	00 00                	add    BYTE PTR [eax],al
    33ed:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
    33f0:	07                   	pop    es
    33f1:	57                   	push   edi
    33f2:	00 00                	add    BYTE PTR [eax],al
    33f4:	00 02                	add    BYTE PTR [edx],al
    33f6:	4d                   	dec    ebp
    33f7:	00 00                	add    BYTE PTR [eax],al
    33f9:	00 03                	add    BYTE PTR [ebx],al
    33fb:	56                   	push   esi
    33fc:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
    3402:	05 05 00 00 00       	add    eax,0x5
    3407:	04 0c                	add    al,0xc
    3409:	04 66                	add    al,0x66
    340b:	01 00                	add    DWORD PTR [eax],eax
    340d:	00 06                	add    BYTE PTR [esi],al
    340f:	04 ae                	add    al,0xae
    3411:	00 00                	add    BYTE PTR [eax],al
    3413:	00 07                	add    BYTE PTR [edi],al
    3415:	3a 00                	cmp    al,BYTE PTR [eax]
    3417:	00 00                	add    BYTE PTR [eax],al
    3419:	04 01                	add    al,0x1
    341b:	02 13                	add    dl,BYTE PTR [ebx]
    341d:	01 00                	add    DWORD PTR [eax],eax
    341f:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3422:	07                   	pop    es
    3423:	83 01 00             	add    DWORD PTR [ecx],0x0
    3426:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3429:	07                   	pop    es
    342a:	5c                   	pop    esp
    342b:	00 00                	add    BYTE PTR [eax],al
    342d:	00 06                	add    BYTE PTR [esi],al
    342f:	04 3a                	add    al,0x3a
    3431:	00 00                	add    BYTE PTR [eax],al
    3433:	00 08                	add    BYTE PTR [eax],cl
    3435:	d4 0b                	aam    0xb
    3437:	00 00                	add    BYTE PTR [eax],al
    3439:	01 0a                	add    DWORD PTR [edx],ecx
    343b:	5a                   	pop    edx
    343c:	00 00                	add    BYTE PTR [eax],al
    343e:	00 d0                	add    al,dl
    3440:	28 00                	sub    BYTE PTR [eax],al
    3442:	9f                   	lahf   
    3443:	5f                   	pop    edi
    3444:	00 00                	add    BYTE PTR [eax],al
    3446:	00 01                	add    BYTE PTR [ecx],al
    3448:	9c                   	pushf  
    3449:	00 01                	add    BYTE PTR [ecx],al
    344b:	00 00                	add    BYTE PTR [eax],al
    344d:	09 73 00             	or     DWORD PTR [ebx+0x0],esi
    3450:	01 0a                	add    DWORD PTR [edx],ecx
    3452:	00 01                	add    BYTE PTR [ecx],al
    3454:	00 00                	add    BYTE PTR [eax],al
    3456:	02 91 00 0a 69 00    	add    dl,BYTE PTR [ecx+0x690a00]
    345c:	01 0c 5a             	add    DWORD PTR [edx+ebx*2],ecx
    345f:	00 00                	add    BYTE PTR [eax],al
    3461:	00 02                	add    BYTE PTR [edx],al
    3463:	91                   	xchg   ecx,eax
    3464:	70 00                	jo     3466 <sysEnter_Vector-0x12cb9a>
    3466:	06                   	push   es
    3467:	04 a8                	add    al,0xa8
    3469:	00 00                	add    BYTE PTR [eax],al
    346b:	00 08                	add    BYTE PTR [eax],cl
    346d:	09 0c 00             	or     DWORD PTR [eax+eax*1],ecx
    3470:	00 01                	add    BYTE PTR [ecx],al
    3472:	21 c8                	and    eax,ecx
    3474:	00 00                	add    BYTE PTR [eax],al
    3476:	00 2f                	add    BYTE PTR [edi],ch
    3478:	29 00                	sub    DWORD PTR [eax],eax
    347a:	9f                   	lahf   
    347b:	3e 02 00             	add    al,BYTE PTR ds:[eax]
    347e:	00 01                	add    BYTE PTR [ecx],al
    3480:	9c                   	pushf  
    3481:	e0 01                	loopne 3484 <sysEnter_Vector-0x12cb7c>
    3483:	00 00                	add    BYTE PTR [eax],al
    3485:	09 73 74             	or     DWORD PTR [ebx+0x74],esi
    3488:	72 00                	jb     348a <sysEnter_Vector-0x12cb76>
    348a:	01 21                	add    DWORD PTR [ecx],esp
    348c:	c8 00 00 00          	enter  0x0,0x0
    3490:	02 91 00 09 6e 75    	add    dl,BYTE PTR [ecx+0x756e0900]
    3496:	6d                   	ins    DWORD PTR es:[edi],dx
    3497:	00 01                	add    BYTE PTR [ecx],al
    3499:	21 9a 00 00 00 02    	and    DWORD PTR [edx+0x2000000],ebx
    349f:	91                   	xchg   ecx,eax
    34a0:	04 0b                	add    al,0xb
    34a2:	f3 0b 00             	repz or eax,DWORD PTR [eax]
    34a5:	00 01                	add    BYTE PTR [ecx],al
    34a7:	21 5a 00             	and    DWORD PTR [edx+0x0],ebx
    34aa:	00 00                	add    BYTE PTR [eax],al
    34ac:	02 91 08 0b ba 06    	add    dl,BYTE PTR [ecx+0x6ba0b08]
    34b2:	00 00                	add    BYTE PTR [eax],al
    34b4:	01 21                	add    DWORD PTR [ecx],esp
    34b6:	5a                   	pop    edx
    34b7:	00 00                	add    BYTE PTR [eax],al
    34b9:	00 02                	add    BYTE PTR [edx],al
    34bb:	91                   	xchg   ecx,eax
    34bc:	0c 0b                	or     al,0xb
    34be:	10 0c 00             	adc    BYTE PTR [eax+eax*1],cl
    34c1:	00 01                	add    BYTE PTR [ecx],al
    34c3:	21 5a 00             	and    DWORD PTR [edx+0x0],ebx
    34c6:	00 00                	add    BYTE PTR [eax],al
    34c8:	02 91 10 0b 87 01    	add    dl,BYTE PTR [ecx+0x1870b10]
    34ce:	00 00                	add    BYTE PTR [eax],al
    34d0:	01 22                	add    DWORD PTR [edx],esp
    34d2:	5a                   	pop    edx
    34d3:	00 00                	add    BYTE PTR [eax],al
    34d5:	00 02                	add    BYTE PTR [edx],al
    34d7:	91                   	xchg   ecx,eax
    34d8:	14 0c                	adc    al,0xc
    34da:	1a 0c 00             	sbb    cl,BYTE PTR [eax+eax*1]
    34dd:	00 01                	add    BYTE PTR [ecx],al
    34df:	25 f0 01 00 00       	and    eax,0x1f0
    34e4:	05 03 30 6f 00       	add    eax,0x6f3003
    34e9:	9f                   	lahf   
    34ea:	0a 74 6d 70          	or     dh,BYTE PTR [ebp+ebp*2+0x70]
    34ee:	00 01                	add    BYTE PTR [ecx],al
    34f0:	27                   	daa    
    34f1:	f5                   	cmc    
    34f2:	01 00                	add    DWORD PTR [eax],eax
    34f4:	00 03                	add    BYTE PTR [ebx],al
    34f6:	91                   	xchg   ecx,eax
    34f7:	9e                   	sahf   
    34f8:	7f 0a                	jg     3504 <sysEnter_Vector-0x12cafc>
    34fa:	63 00                	arpl   WORD PTR [eax],ax
    34fc:	01 28                	add    DWORD PTR [eax],ebp
    34fe:	3a 00                	cmp    al,BYTE PTR [eax]
    3500:	00 00                	add    BYTE PTR [eax],al
    3502:	02 91 66 0c 31 02    	add    dl,BYTE PTR [ecx+0x2310c66]
    3508:	00 00                	add    BYTE PTR [eax],al
    350a:	01 28                	add    DWORD PTR [eax],ebp
    350c:	3a 00                	cmp    al,BYTE PTR [eax]
    350e:	00 00                	add    BYTE PTR [eax],al
    3510:	02 91 6f 0c de 0b    	add    dl,BYTE PTR [ecx+0xbde0c6f]
    3516:	00 00                	add    BYTE PTR [eax],al
    3518:	01 28                	add    DWORD PTR [eax],ebp
    351a:	3a 00                	cmp    al,BYTE PTR [eax]
    351c:	00 00                	add    BYTE PTR [eax],al
    351e:	02 91 67 0a 69 00    	add    dl,BYTE PTR [ecx+0x690a67]
    3524:	01 29                	add    DWORD PTR [ecx],ebp
    3526:	5a                   	pop    edx
    3527:	00 00                	add    BYTE PTR [eax],al
    3529:	00 02                	add    BYTE PTR [edx],al
    352b:	91                   	xchg   ecx,eax
    352c:	68 0d 15 2a 00       	push   0x2a150d
    3531:	9f                   	lahf   
    3532:	25 00 00 00 0c       	and    eax,0xc000000
    3537:	2d 0c 00 00 01       	sub    eax,0x100000c
    353c:	4c                   	dec    esp
    353d:	5a                   	pop    edx
    353e:	00 00                	add    BYTE PTR [eax],al
    3540:	00 02                	add    BYTE PTR [edx],al
    3542:	91                   	xchg   ecx,eax
    3543:	60                   	pusha  
    3544:	00 00                	add    BYTE PTR [eax],al
    3546:	0e                   	push   cs
    3547:	3a 00                	cmp    al,BYTE PTR [eax]
    3549:	00 00                	add    BYTE PTR [eax],al
    354b:	f0 01 00             	lock add DWORD PTR [eax],eax
    354e:	00 0f                	add    BYTE PTR [edi],cl
    3550:	ba 00 00 00 0f       	mov    edx,0xf000000
    3555:	00 07                	add    BYTE PTR [edi],al
    3557:	e0 01                	loopne 355a <sysEnter_Vector-0x12caa6>
    3559:	00 00                	add    BYTE PTR [eax],al
    355b:	0e                   	push   cs
    355c:	3a 00                	cmp    al,BYTE PTR [eax]
    355e:	00 00                	add    BYTE PTR [eax],al
    3560:	05 02 00 00 0f       	add    eax,0xf000002
    3565:	ba 00 00 00 41       	mov    edx,0x41000000
    356a:	00 10                	add    BYTE PTR [eax],dl
    356c:	33 0c 00             	xor    ecx,DWORD PTR [eax+eax*1]
    356f:	00 01                	add    BYTE PTR [ecx],al
    3571:	68 5a 00 00 00       	push   0x5a
    3576:	6d                   	ins    DWORD PTR es:[edi],dx
    3577:	2b 00                	sub    eax,DWORD PTR [eax]
    3579:	9f                   	lahf   
    357a:	48                   	dec    eax
    357b:	04 00                	add    al,0x0
    357d:	00 01                	add    BYTE PTR [ecx],al
    357f:	9c                   	pushf  
    3580:	0e                   	push   cs
    3581:	03 00                	add    eax,DWORD PTR [eax]
    3583:	00 09                	add    BYTE PTR [ecx],cl
    3585:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    3588:	00 01                	add    BYTE PTR [ecx],al
    358a:	68 c8 00 00 00       	push   0xc8
    358f:	02 91 00 09 66 6d    	add    dl,BYTE PTR [ecx+0x6d660900]
    3595:	74 00                	je     3597 <sysEnter_Vector-0x12ca69>
    3597:	01 68 a8             	add    DWORD PTR [eax-0x58],ebp
    359a:	00 00                	add    BYTE PTR [eax],al
    359c:	00 02                	add    BYTE PTR [edx],al
    359e:	91                   	xchg   ecx,eax
    359f:	04 0b                	add    al,0xb
    35a1:	ac                   	lods   al,BYTE PTR ds:[esi]
    35a2:	09 00                	or     DWORD PTR [eax],eax
    35a4:	00 01                	add    BYTE PTR [ecx],al
    35a6:	68 41 00 00 00       	push   0x41
    35ab:	02 91 08 0a 6c 65    	add    dl,BYTE PTR [ecx+0x656c0a08]
    35b1:	6e                   	outs   dx,BYTE PTR ds:[esi]
    35b2:	00 01                	add    BYTE PTR [ecx],al
    35b4:	6a 5a                	push   0x5a
    35b6:	00 00                	add    BYTE PTR [eax],al
    35b8:	00 02                	add    BYTE PTR [edx],al
    35ba:	91                   	xchg   ecx,eax
    35bb:	6c                   	ins    BYTE PTR es:[edi],dx
    35bc:	0a 6e 75             	or     ch,BYTE PTR [esi+0x75]
    35bf:	6d                   	ins    DWORD PTR es:[edi],dx
    35c0:	00 01                	add    BYTE PTR [ecx],al
    35c2:	6b c1 00             	imul   eax,ecx,0x0
    35c5:	00 00                	add    BYTE PTR [eax],al
    35c7:	02 91 68 0a 69 00    	add    dl,BYTE PTR [ecx+0x690a68]
    35cd:	01 6c 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],ebp
    35d1:	00 00                	add    BYTE PTR [eax],al
    35d3:	02 91 64 0c f3 0b    	add    dl,BYTE PTR [ecx+0xbf30c64]
    35d9:	00 00                	add    BYTE PTR [eax],al
    35db:	01 6c 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],ebp
    35df:	00 00                	add    BYTE PTR [eax],al
    35e1:	02 91 60 0a 73 74    	add    dl,BYTE PTR [ecx+0x74730a60]
    35e7:	72 00                	jb     35e9 <sysEnter_Vector-0x12ca17>
    35e9:	01 6d c8             	add    DWORD PTR [ebp-0x38],ebp
    35ec:	00 00                	add    BYTE PTR [eax],al
    35ee:	00 02                	add    BYTE PTR [edx],al
    35f0:	91                   	xchg   ecx,eax
    35f1:	5c                   	pop    esp
    35f2:	0a 73 00             	or     dh,BYTE PTR [ebx+0x0]
    35f5:	01 6e a8             	add    DWORD PTR [esi-0x58],ebp
    35f8:	00 00                	add    BYTE PTR [eax],al
    35fa:	00 02                	add    BYTE PTR [edx],al
    35fc:	91                   	xchg   ecx,eax
    35fd:	58                   	pop    eax
    35fe:	0c fc                	or     al,0xfc
    3600:	09 00                	or     DWORD PTR [eax],eax
    3602:	00 01                	add    BYTE PTR [ecx],al
    3604:	70 5a                	jo     3660 <sysEnter_Vector-0x12c9a0>
    3606:	00 00                	add    BYTE PTR [eax],al
    3608:	00 02                	add    BYTE PTR [edx],al
    360a:	91                   	xchg   ecx,eax
    360b:	54                   	push   esp
    360c:	0c 21                	or     al,0x21
    360e:	0c 00                	or     al,0x0
    3610:	00 01                	add    BYTE PTR [ecx],al
    3612:	72 5a                	jb     366e <sysEnter_Vector-0x12c992>
    3614:	00 00                	add    BYTE PTR [eax],al
    3616:	00 02                	add    BYTE PTR [edx],al
    3618:	91                   	xchg   ecx,eax
    3619:	50                   	push   eax
    361a:	0c 10                	or     al,0x10
    361c:	0c 00                	or     al,0x0
    361e:	00 01                	add    BYTE PTR [ecx],al
    3620:	73 5a                	jae    367c <sysEnter_Vector-0x12c984>
    3622:	00 00                	add    BYTE PTR [eax],al
    3624:	00 02                	add    BYTE PTR [edx],al
    3626:	91                   	xchg   ecx,eax
    3627:	4c                   	dec    esp
    3628:	0c f8                	or     al,0xf8
    362a:	0b 00                	or     eax,DWORD PTR [eax]
    362c:	00 01                	add    BYTE PTR [ecx],al
    362e:	75 5a                	jne    368a <sysEnter_Vector-0x12c976>
    3630:	00 00                	add    BYTE PTR [eax],al
    3632:	00 02                	add    BYTE PTR [edx],al
    3634:	91                   	xchg   ecx,eax
    3635:	48                   	dec    eax
    3636:	11 02                	adc    DWORD PTR [edx],eax
    3638:	0c 00                	or     al,0x0
    363a:	00 01                	add    BYTE PTR [ecx],al
    363c:	7f b1                	jg     35ef <sysEnter_Vector-0x12ca11>
    363e:	2b 00                	sub    eax,DWORD PTR [eax]
    3640:	9f                   	lahf   
    3641:	12 56 2e             	adc    dl,BYTE PTR [esi+0x2e]
    3644:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
    364a:	f6 02 00             	test   BYTE PTR [edx],0x0
    364d:	00 0a                	add    BYTE PTR [edx],cl
    364f:	69 70 00 01 e0 0e 03 	imul   esi,DWORD PTR [eax+0x0],0x30ee001
    3656:	00 00                	add    BYTE PTR [eax],al
    3658:	02 91 44 00 0d 76    	add    dl,BYTE PTR [ecx+0x760d0044]
    365e:	2e 00 9f 1b 00 00 00 	add    BYTE PTR cs:[edi+0x1b],bl
    3665:	0a 69 70             	or     ch,BYTE PTR [ecx+0x70]
    3668:	00 01                	add    BYTE PTR [ecx],al
    366a:	e3 14                	jecxz  3680 <sysEnter_Vector-0x12c980>
    366c:	03 00                	add    eax,DWORD PTR [eax]
    366e:	00 02                	add    BYTE PTR [edx],al
    3670:	91                   	xchg   ecx,eax
    3671:	40                   	inc    eax
    3672:	00 00                	add    BYTE PTR [eax],al
    3674:	06                   	push   es
    3675:	04 9a                	add    al,0x9a
    3677:	00 00                	add    BYTE PTR [eax],al
    3679:	00 06                	add    BYTE PTR [esi],al
    367b:	04 5a                	add    al,0x5a
    367d:	00 00                	add    BYTE PTR [eax],al
    367f:	00 13                	add    BYTE PTR [ebx],dl
    3681:	34 0c                	xor    al,0xc
    3683:	00 00                	add    BYTE PTR [eax],al
    3685:	01 15 01 5a 00 00    	add    DWORD PTR ds:0x5a01,edx
    368b:	00 b5 2f 00 9f 33    	add    BYTE PTR [ebp+0x339f002f],dh
    3691:	00 00                	add    BYTE PTR [eax],al
    3693:	00 01                	add    BYTE PTR [ecx],al
    3695:	9c                   	pushf  
    3696:	70 03                	jo     369b <sysEnter_Vector-0x12c965>
    3698:	00 00                	add    BYTE PTR [eax],al
    369a:	14 62                	adc    al,0x62
    369c:	75 66                	jne    3704 <sysEnter_Vector-0x12c8fc>
    369e:	00 01                	add    BYTE PTR [ecx],al
    36a0:	15 01 c8 00 00       	adc    eax,0xc801
    36a5:	00 02                	add    BYTE PTR [edx],al
    36a7:	91                   	xchg   ecx,eax
    36a8:	00 14 66             	add    BYTE PTR [esi+eiz*2],dl
    36ab:	6d                   	ins    DWORD PTR es:[edi],dx
    36ac:	74 00                	je     36ae <sysEnter_Vector-0x12c952>
    36ae:	01 15 01 a8 00 00    	add    DWORD PTR ds:0xa801,edx
    36b4:	00 02                	add    BYTE PTR [edx],al
    36b6:	91                   	xchg   ecx,eax
    36b7:	04 15                	add    al,0x15
    36b9:	16                   	push   ss
    36ba:	ac                   	lods   al,BYTE PTR ds:[esi]
    36bb:	09 00                	or     DWORD PTR [eax],eax
    36bd:	00 01                	add    BYTE PTR [ecx],al
    36bf:	17                   	pop    ss
    36c0:	01 41 00             	add    DWORD PTR [ecx+0x0],eax
    36c3:	00 00                	add    BYTE PTR [eax],al
    36c5:	02 91 68 17 69 00    	add    dl,BYTE PTR [ecx+0x691768]
    36cb:	01 18                	add    DWORD PTR [eax],ebx
    36cd:	01 5a 00             	add    DWORD PTR [edx+0x0],ebx
    36d0:	00 00                	add    BYTE PTR [eax],al
    36d2:	02 91 6c 00 18 a3    	add    dl,BYTE PTR [ecx-0x5ce7ff94]
    36d8:	00 00                	add    BYTE PTR [eax],al
    36da:	00 04 39             	add    BYTE PTR [ecx+edi*1],al
    36dd:	76 00                	jbe    36df <sysEnter_Vector-0x12c921>
    36df:	00 00                	add    BYTE PTR [eax],al
    36e1:	05 03 8c 72 00       	add    eax,0x728c03
    36e6:	9f                   	lahf   
    36e7:	18 34 01             	sbb    BYTE PTR [ecx+eax*1],dh
    36ea:	00 00                	add    BYTE PTR [eax],al
    36ec:	04 3a                	add    al,0x3a
    36ee:	76 00                	jbe    36f0 <sysEnter_Vector-0x12c910>
    36f0:	00 00                	add    BYTE PTR [eax],al
    36f2:	05 03 90 72 00       	add    eax,0x729003
    36f7:	9f                   	lahf   
    36f8:	18 7b 00             	sbb    BYTE PTR [ebx+0x0],bh
    36fb:	00 00                	add    BYTE PTR [eax],al
    36fd:	04 3b                	add    al,0x3b
    36ff:	76 00                	jbe    3701 <sysEnter_Vector-0x12c8ff>
    3701:	00 00                	add    BYTE PTR [eax],al
    3703:	05 03 88 72 00       	add    eax,0x728803
    3708:	9f                   	lahf   
    3709:	18 7c 01 00          	sbb    BYTE PTR [ecx+eax*1+0x0],bh
    370d:	00 04 3c             	add    BYTE PTR [esp+edi*1],al
    3710:	9a 00 00 00 05 03 98 	call   0x9803:0x5000000
    3717:	72 00                	jb     3719 <sysEnter_Vector-0x12c8e7>
    3719:	9f                   	lahf   
    371a:	18 6e 00             	sbb    BYTE PTR [esi+0x0],ch
    371d:	00 00                	add    BYTE PTR [eax],al
    371f:	05 34 c5 03 00       	add    eax,0x3c534
    3724:	00 05 03 84 72 00    	add    BYTE PTR ds:0x728403,al
    372a:	9f                   	lahf   
    372b:	06                   	push   es
    372c:	04 8f                	add    al,0x8f
    372e:	00 00                	add    BYTE PTR [eax],al
    3730:	00 18                	add    BYTE PTR [eax],bl
    3732:	91                   	xchg   ecx,eax
    3733:	00 00                	add    BYTE PTR [eax],al
    3735:	00 05 35 76 00 00    	add    BYTE PTR ds:0x7635,al
    373b:	00 05 03 80 72 00    	add    BYTE PTR ds:0x728003,al
    3741:	9f                   	lahf   
    3742:	18 41 00             	sbb    BYTE PTR [ecx+0x0],al
    3745:	00 00                	add    BYTE PTR [eax],al
    3747:	06                   	push   es
    3748:	58                   	pop    eax
    3749:	ed                   	in     eax,dx
    374a:	03 00                	add    eax,DWORD PTR [eax]
    374c:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
    3752:	9f                   	lahf   
    3753:	06                   	push   es
    3754:	04 c8                	add    al,0xc8
    3756:	00 00                	add    BYTE PTR [eax],al
    3758:	00 00                	add    BYTE PTR [eax],al
    375a:	65 01 00             	add    DWORD PTR gs:[eax],eax
    375d:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3760:	9f                   	lahf   
    3761:	0e                   	push   cs
    3762:	00 00                	add    BYTE PTR [eax],al
    3764:	04 01                	add    al,0x1
    3766:	ac                   	lods   al,BYTE PTR ds:[esi]
    3767:	00 00                	add    BYTE PTR [eax],al
    3769:	00 0c 3c             	add    BYTE PTR [esp+edi*1],cl
    376c:	0c 00                	or     al,0x0
    376e:	00 1e                	add    BYTE PTR [esi],bl
    3770:	00 00                	add    BYTE PTR [eax],al
    3772:	00 e8                	add    al,ch
    3774:	2f                   	das    
    3775:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
    377b:	9f                   	lahf   
    377c:	13 00                	adc    eax,DWORD PTR [eax]
    377e:	00 02                	add    BYTE PTR [edx],al
    3780:	01 06                	add    DWORD PTR [esi],eax
    3782:	8c 00                	mov    WORD PTR [eax],es
    3784:	00 00                	add    BYTE PTR [eax],al
    3786:	02 01                	add    al,BYTE PTR [ecx]
    3788:	06                   	push   es
    3789:	85 00                	test   DWORD PTR [eax],eax
    378b:	00 00                	add    BYTE PTR [eax],al
    378d:	02 02                	add    al,BYTE PTR [edx]
    378f:	05 72 01 00 00       	add    eax,0x172
    3794:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    379b:	02 08                	add    cl,BYTE PTR [eax]
    379d:	05 00 00 00 00       	add    eax,0x0
    37a2:	02 01                	add    al,BYTE PTR [ecx]
    37a4:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    37aa:	02 07                	add    al,BYTE PTR [edi]
    37ac:	19 01                	sbb    DWORD PTR [ecx],eax
    37ae:	00 00                	add    BYTE PTR [eax],al
    37b0:	04 0e                	add    al,0xe
    37b2:	00 00                	add    BYTE PTR [eax],al
    37b4:	00 02                	add    BYTE PTR [edx],al
    37b6:	34 61                	xor    al,0x61
    37b8:	00 00                	add    BYTE PTR [eax],al
    37ba:	00 02                	add    BYTE PTR [edx],al
    37bc:	04 07                	add    al,0x7
    37be:	61                   	popa   
    37bf:	00 00                	add    BYTE PTR [eax],al
    37c1:	00 02                	add    BYTE PTR [edx],al
    37c3:	08 07                	or     BYTE PTR [edi],al
    37c5:	57                   	push   edi
    37c6:	00 00                	add    BYTE PTR [eax],al
    37c8:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    37cf:	56                   	push   esi
    37d0:	61                   	popa   
    37d1:	00 00                	add    BYTE PTR [eax],al
    37d3:	00 02                	add    BYTE PTR [edx],al
    37d5:	04 05                	add    al,0x5
    37d7:	05 00 00 00 02       	add    eax,0x2000000
    37dc:	0c 04                	or     al,0x4
    37de:	66 01 00             	add    WORD PTR [eax],ax
    37e1:	00 02                	add    BYTE PTR [edx],al
    37e3:	01 02                	add    DWORD PTR [edx],eax
    37e5:	13 01                	adc    eax,DWORD PTR [ecx]
    37e7:	00 00                	add    BYTE PTR [eax],al
    37e9:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    37ec:	83 01 00             	add    DWORD PTR [ecx],0x0
    37ef:	00 02                	add    BYTE PTR [edx],al
    37f1:	04 07                	add    al,0x7
    37f3:	5c                   	pop    esp
    37f4:	00 00                	add    BYTE PTR [eax],al
    37f6:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    37fc:	00 06                	add    BYTE PTR [esi],al
    37fe:	4d                   	dec    ebp
    37ff:	0c 00                	or     al,0x0
    3801:	00 01                	add    BYTE PTR [ecx],al
    3803:	10 e8                	adc    al,ch
    3805:	2f                   	das    
    3806:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
    380c:	01 9c d5 00 00 00 07 	add    DWORD PTR [ebp+edx*8+0x7000000],ebx
    3813:	48                   	dec    eax
    3814:	0c 00                	or     al,0x0
    3816:	00 01                	add    BYTE PTR [ecx],al
    3818:	12 d5                	adc    dl,ch
    381a:	00 00                	add    BYTE PTR [eax],al
    381c:	00 02                	add    BYTE PTR [edx],al
    381e:	91                   	xchg   ecx,eax
    381f:	67 07                	addr16 pop es
    3821:	56                   	push   esi
    3822:	0c 00                	or     al,0x0
    3824:	00 01                	add    BYTE PTR [ecx],al
    3826:	13 3a                	adc    edi,DWORD PTR [edx]
    3828:	00 00                	add    BYTE PTR [eax],al
    382a:	00 02                	add    BYTE PTR [edx],al
    382c:	91                   	xchg   ecx,eax
    382d:	6c                   	ins    BYTE PTR es:[edi],dx
    382e:	00 08                	add    BYTE PTR [eax],cl
    3830:	25 00 00 00 e5       	and    eax,0xe5000000
    3835:	00 00                	add    BYTE PTR [eax],al
    3837:	00 09                	add    BYTE PTR [ecx],cl
    3839:	8f 00                	pop    DWORD PTR [eax]
    383b:	00 00                	add    BYTE PTR [eax],al
    383d:	04 00                	add    al,0x0
    383f:	0a a3 00 00 00 03    	or     ah,BYTE PTR [ebx+0x3000000]
    3845:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
    3848:	00 00                	add    BYTE PTR [eax],al
    384a:	05 03 8c 72 00       	add    eax,0x728c03
    384f:	9f                   	lahf   
    3850:	0a 34 01             	or     dh,BYTE PTR [ecx+eax*1]
    3853:	00 00                	add    BYTE PTR [eax],al
    3855:	03 3a                	add    edi,DWORD PTR [edx]
    3857:	56                   	push   esi
    3858:	00 00                	add    BYTE PTR [eax],al
    385a:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
    3860:	9f                   	lahf   
    3861:	0a 7b 00             	or     bh,BYTE PTR [ebx+0x0]
    3864:	00 00                	add    BYTE PTR [eax],al
    3866:	03 3b                	add    edi,DWORD PTR [ebx]
    3868:	56                   	push   esi
    3869:	00 00                	add    BYTE PTR [eax],al
    386b:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
    3871:	9f                   	lahf   
    3872:	0a 7c 01 00          	or     bh,BYTE PTR [ecx+eax*1+0x0]
    3876:	00 03                	add    BYTE PTR [ebx],al
    3878:	3c 7a                	cmp    al,0x7a
    387a:	00 00                	add    BYTE PTR [eax],al
    387c:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
    3882:	9f                   	lahf   
    3883:	0a 6e 00             	or     ch,BYTE PTR [esi+0x0]
    3886:	00 00                	add    BYTE PTR [eax],al
    3888:	04 34                	add    al,0x34
    388a:	3a 01                	cmp    al,BYTE PTR [ecx]
    388c:	00 00                	add    BYTE PTR [eax],al
    388e:	05 03 84 72 00       	add    eax,0x728403
    3893:	9f                   	lahf   
    3894:	05 04 6f 00 00       	add    eax,0x6f04
    3899:	00 0a                	add    BYTE PTR [edx],cl
    389b:	91                   	xchg   ecx,eax
    389c:	00 00                	add    BYTE PTR [eax],al
    389e:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    38a5:	05 03 80 72 00       	add    eax,0x728003
    38aa:	9f                   	lahf   
    38ab:	0a 41 00             	or     al,BYTE PTR [ecx+0x0]
    38ae:	00 00                	add    BYTE PTR [eax],al
    38b0:	05 58 62 01 00       	add    eax,0x16258
    38b5:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
    38bb:	9f                   	lahf   
    38bc:	05 04 9d 00 00       	add    eax,0x9d04
    38c1:	00 00                	add    BYTE PTR [eax],al
    38c3:	45                   	inc    ebp
    38c4:	02 00                	add    al,BYTE PTR [eax]
    38c6:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    38c9:	29 0f                	sub    DWORD PTR [edi],ecx
    38cb:	00 00                	add    BYTE PTR [eax],al
    38cd:	04 01                	add    al,0x1
    38cf:	ac                   	lods   al,BYTE PTR ds:[esi]
    38d0:	00 00                	add    BYTE PTR [eax],al
    38d2:	00 0c 97             	add    BYTE PTR [edi+edx*4],cl
    38d5:	0c 00                	or     al,0x0
    38d7:	00 1e                	add    BYTE PTR [esi],bl
    38d9:	00 00                	add    BYTE PTR [eax],al
    38db:	00 6c 30 00          	add    BYTE PTR [eax+esi*1+0x0],ch
    38df:	9f                   	lahf   
    38e0:	11 01                	adc    DWORD PTR [ecx],eax
    38e2:	00 00                	add    BYTE PTR [eax],al
    38e4:	61                   	popa   
    38e5:	14 00                	adc    al,0x0
    38e7:	00 02                	add    BYTE PTR [edx],al
    38e9:	01 06                	add    DWORD PTR [esi],eax
    38eb:	8c 00                	mov    WORD PTR [eax],es
    38ed:	00 00                	add    BYTE PTR [eax],al
    38ef:	02 01                	add    al,BYTE PTR [ecx]
    38f1:	06                   	push   es
    38f2:	85 00                	test   DWORD PTR [eax],eax
    38f4:	00 00                	add    BYTE PTR [eax],al
    38f6:	02 02                	add    al,BYTE PTR [edx]
    38f8:	05 72 01 00 00       	add    eax,0x172
    38fd:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3904:	02 08                	add    cl,BYTE PTR [eax]
    3906:	05 00 00 00 00       	add    eax,0x0
    390b:	02 01                	add    al,BYTE PTR [ecx]
    390d:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    3913:	02 07                	add    al,BYTE PTR [edi]
    3915:	19 01                	sbb    DWORD PTR [ecx],eax
    3917:	00 00                	add    BYTE PTR [eax],al
    3919:	04 0e                	add    al,0xe
    391b:	00 00                	add    BYTE PTR [eax],al
    391d:	00 02                	add    BYTE PTR [edx],al
    391f:	34 61                	xor    al,0x61
    3921:	00 00                	add    BYTE PTR [eax],al
    3923:	00 02                	add    BYTE PTR [edx],al
    3925:	04 07                	add    al,0x7
    3927:	61                   	popa   
    3928:	00 00                	add    BYTE PTR [eax],al
    392a:	00 02                	add    BYTE PTR [edx],al
    392c:	08 07                	or     BYTE PTR [edi],al
    392e:	57                   	push   edi
    392f:	00 00                	add    BYTE PTR [eax],al
    3931:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    3938:	56                   	push   esi
    3939:	61                   	popa   
    393a:	00 00                	add    BYTE PTR [eax],al
    393c:	00 04 bd 02 00 00 03 	add    BYTE PTR [edi*4+0x3000002],al
    3943:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    3946:	00 00                	add    BYTE PTR [eax],al
    3948:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    394f:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    3952:	66 01 00             	add    WORD PTR [eax],ax
    3955:	00 05 04 99 00 00    	add    BYTE PTR ds:0x9904,al
    395b:	00 06                	add    BYTE PTR [esi],al
    395d:	25 00 00 00 02       	and    eax,0x2000000
    3962:	01 02                	add    DWORD PTR [edx],eax
    3964:	13 01                	adc    eax,DWORD PTR [ecx]
    3966:	00 00                	add    BYTE PTR [eax],al
    3968:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    396b:	83 01 00             	add    DWORD PTR [ecx],0x0
    396e:	00 02                	add    BYTE PTR [edx],al
    3970:	04 07                	add    al,0x7
    3972:	5c                   	pop    esp
    3973:	00 00                	add    BYTE PTR [eax],al
    3975:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    397b:	00 07                	add    BYTE PTR [edi],al
    397d:	66                   	data16
    397e:	0c 00                	or     al,0x0
    3980:	00 01                	add    BYTE PTR [ecx],al
    3982:	1d b3 00 00 00       	sbb    eax,0xb3
    3987:	6c                   	ins    BYTE PTR es:[edi],dx
    3988:	30 00                	xor    BYTE PTR [eax],al
    398a:	9f                   	lahf   
    398b:	3e 00 00             	add    BYTE PTR ds:[eax],al
    398e:	00 01                	add    BYTE PTR [ecx],al
    3990:	9c                   	pushf  
    3991:	ef                   	out    dx,eax
    3992:	00 00                	add    BYTE PTR [eax],al
    3994:	00 08                	add    BYTE PTR [eax],cl
    3996:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3997:	0b 00                	or     eax,DWORD PTR [eax]
    3999:	00 01                	add    BYTE PTR [ecx],al
    399b:	1d b3 00 00 00       	sbb    eax,0xb3
    39a0:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    39a6:	63 00                	arpl   WORD PTR [eax],ax
    39a8:	01 1d 93 00 00 00    	add    DWORD PTR ds:0x93,ebx
    39ae:	02 91 04 00 07 5e    	add    dl,BYTE PTR [ecx+0x5e070004]
    39b4:	0c 00                	or     al,0x0
    39b6:	00 01                	add    BYTE PTR [ecx],al
    39b8:	23 b3 00 00 00 aa    	and    esi,DWORD PTR [ebx-0x56000000]
    39be:	30 00                	xor    BYTE PTR [eax],al
    39c0:	9f                   	lahf   
    39c1:	3e 00 00             	add    BYTE PTR ds:[eax],al
    39c4:	00 01                	add    BYTE PTR [ecx],al
    39c6:	9c                   	pushf  
    39c7:	25 01 00 00 08       	and    eax,0x8000001
    39cc:	6e                   	outs   dx,BYTE PTR ds:[esi]
    39cd:	0b 00                	or     eax,DWORD PTR [eax]
    39cf:	00 01                	add    BYTE PTR [ecx],al
    39d1:	23 b3 00 00 00 02    	and    esi,DWORD PTR [ebx+0x2000000]
    39d7:	91                   	xchg   ecx,eax
    39d8:	00 09                	add    BYTE PTR [ecx],cl
    39da:	73 72                	jae    3a4e <sysEnter_Vector-0x12c5b2>
    39dc:	63 00                	arpl   WORD PTR [eax],ax
    39de:	01 23                	add    DWORD PTR [ebx],esp
    39e0:	93                   	xchg   ebx,eax
    39e1:	00 00                	add    BYTE PTR [eax],al
    39e3:	00 02                	add    BYTE PTR [edx],al
    39e5:	91                   	xchg   ecx,eax
    39e6:	04 00                	add    al,0x0
    39e8:	07                   	pop    es
    39e9:	81 0c 00 00 01 29 b3 	or     DWORD PTR [eax+eax*1],0xb3290100
    39f0:	00 00                	add    BYTE PTR [eax],al
    39f2:	00 e8                	add    al,ch
    39f4:	30 00                	xor    BYTE PTR [eax],al
    39f6:	9f                   	lahf   
    39f7:	6f                   	outs   dx,DWORD PTR ds:[esi]
    39f8:	00 00                	add    BYTE PTR [eax],al
    39fa:	00 01                	add    BYTE PTR [ecx],al
    39fc:	9c                   	pushf  
    39fd:	83 01 00             	add    DWORD PTR [ecx],0x0
    3a00:	00 08                	add    BYTE PTR [eax],cl
    3a02:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3a03:	0b 00                	or     eax,DWORD PTR [eax]
    3a05:	00 01                	add    BYTE PTR [ecx],al
    3a07:	29 b3 00 00 00 02    	sub    DWORD PTR [ebx+0x2000000],esi
    3a0d:	91                   	xchg   ecx,eax
    3a0e:	00 09                	add    BYTE PTR [ecx],cl
    3a10:	73 72                	jae    3a84 <sysEnter_Vector-0x12c57c>
    3a12:	63 00                	arpl   WORD PTR [eax],ax
    3a14:	01 29                	add    DWORD PTR [ecx],ebp
    3a16:	93                   	xchg   ebx,eax
    3a17:	00 00                	add    BYTE PTR [eax],al
    3a19:	00 02                	add    BYTE PTR [edx],al
    3a1b:	91                   	xchg   ecx,eax
    3a1c:	04 09                	add    al,0x9
    3a1e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3a1f:	00 01                	add    BYTE PTR [ecx],al
    3a21:	29 7a 00             	sub    DWORD PTR [edx+0x0],edi
    3a24:	00 00                	add    BYTE PTR [eax],al
    3a26:	02 91 08 0a 75 0c    	add    dl,BYTE PTR [ecx+0xc750a08]
    3a2c:	00 00                	add    BYTE PTR [eax],al
    3a2e:	01 2b                	add    DWORD PTR [ebx],ebp
    3a30:	7a 00                	jp     3a32 <sysEnter_Vector-0x12c5ce>
    3a32:	00 00                	add    BYTE PTR [eax],al
    3a34:	02 91 6c 0a 8a 0c    	add    dl,BYTE PTR [ecx+0xc8a0a6c]
    3a3a:	00 00                	add    BYTE PTR [eax],al
    3a3c:	01 2c 7a             	add    DWORD PTR [edx+edi*2],ebp
    3a3f:	00 00                	add    BYTE PTR [eax],al
    3a41:	00 02                	add    BYTE PTR [edx],al
    3a43:	91                   	xchg   ecx,eax
    3a44:	68 00 07 6d 0c       	push   0xc6d0700
    3a49:	00 00                	add    BYTE PTR [eax],al
    3a4b:	01 37                	add    DWORD PTR [edi],esi
    3a4d:	b3 00                	mov    bl,0x0
    3a4f:	00 00                	add    BYTE PTR [eax],al
    3a51:	57                   	push   edi
    3a52:	31 00                	xor    DWORD PTR [eax],eax
    3a54:	9f                   	lahf   
    3a55:	26 00 00             	add    BYTE PTR es:[eax],al
    3a58:	00 01                	add    BYTE PTR [ecx],al
    3a5a:	9c                   	pushf  
    3a5b:	c5 01                	lds    eax,FWORD PTR [ecx]
    3a5d:	00 00                	add    BYTE PTR [eax],al
    3a5f:	08 6e 0b             	or     BYTE PTR [esi+0xb],ch
    3a62:	00 00                	add    BYTE PTR [eax],al
    3a64:	01 37                	add    DWORD PTR [edi],esi
    3a66:	b3 00                	mov    bl,0x0
    3a68:	00 00                	add    BYTE PTR [eax],al
    3a6a:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    3a70:	63 00                	arpl   WORD PTR [eax],ax
    3a72:	01 37                	add    DWORD PTR [edi],esi
    3a74:	93                   	xchg   ebx,eax
    3a75:	00 00                	add    BYTE PTR [eax],al
    3a77:	00 02                	add    BYTE PTR [edx],al
    3a79:	91                   	xchg   ecx,eax
    3a7a:	04 09                	add    al,0x9
    3a7c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3a7d:	00 01                	add    BYTE PTR [ecx],al
    3a7f:	37                   	aaa    
    3a80:	7a 00                	jp     3a82 <sysEnter_Vector-0x12c57e>
    3a82:	00 00                	add    BYTE PTR [eax],al
    3a84:	02 91 08 00 0b a3    	add    dl,BYTE PTR [ecx-0x5cf4fff8]
    3a8a:	00 00                	add    BYTE PTR [eax],al
    3a8c:	00 04 39             	add    BYTE PTR [ecx+edi*1],al
    3a8f:	56                   	push   esi
    3a90:	00 00                	add    BYTE PTR [eax],al
    3a92:	00 05 03 8c 72 00    	add    BYTE PTR ds:0x728c03,al
    3a98:	9f                   	lahf   
    3a99:	0b 34 01             	or     esi,DWORD PTR [ecx+eax*1]
    3a9c:	00 00                	add    BYTE PTR [eax],al
    3a9e:	04 3a                	add    al,0x3a
    3aa0:	56                   	push   esi
    3aa1:	00 00                	add    BYTE PTR [eax],al
    3aa3:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
    3aa9:	9f                   	lahf   
    3aaa:	0b 7b 00             	or     edi,DWORD PTR [ebx+0x0]
    3aad:	00 00                	add    BYTE PTR [eax],al
    3aaf:	04 3b                	add    al,0x3b
    3ab1:	56                   	push   esi
    3ab2:	00 00                	add    BYTE PTR [eax],al
    3ab4:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
    3aba:	9f                   	lahf   
    3abb:	0b 7c 01 00          	or     edi,DWORD PTR [ecx+eax*1+0x0]
    3abf:	00 04 3c             	add    BYTE PTR [esp+edi*1],al
    3ac2:	85 00                	test   DWORD PTR [eax],eax
    3ac4:	00 00                	add    BYTE PTR [eax],al
    3ac6:	05 03 98 72 00       	add    eax,0x729803
    3acb:	9f                   	lahf   
    3acc:	0b 6e 00             	or     ebp,DWORD PTR [esi+0x0]
    3acf:	00 00                	add    BYTE PTR [eax],al
    3ad1:	05 34 1a 02 00       	add    eax,0x21a34
    3ad6:	00 05 03 84 72 00    	add    BYTE PTR ds:0x728403,al
    3adc:	9f                   	lahf   
    3add:	05 04 6f 00 00       	add    eax,0x6f04
    3ae2:	00 0b                	add    BYTE PTR [ebx],cl
    3ae4:	91                   	xchg   ecx,eax
    3ae5:	00 00                	add    BYTE PTR [eax],al
    3ae7:	00 05 35 56 00 00    	add    BYTE PTR ds:0x5635,al
    3aed:	00 05 03 80 72 00    	add    BYTE PTR ds:0x728003,al
    3af3:	9f                   	lahf   
    3af4:	0b 41 00             	or     eax,DWORD PTR [ecx+0x0]
    3af7:	00 00                	add    BYTE PTR [eax],al
    3af9:	06                   	push   es
    3afa:	58                   	pop    eax
    3afb:	42                   	inc    edx
    3afc:	02 00                	add    al,BYTE PTR [eax]
    3afe:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
    3b04:	9f                   	lahf   
    3b05:	05 04 b3 00 00       	add    eax,0xb304
    3b0a:	00 00                	add    BYTE PTR [eax],al
    3b0c:	d3 01                	rol    DWORD PTR [ecx],cl
    3b0e:	00 00                	add    BYTE PTR [eax],al
    3b10:	04 00                	add    al,0x0
    3b12:	ca 0f 00             	retf   0xf
    3b15:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3b18:	ac                   	lods   al,BYTE PTR ds:[esi]
    3b19:	00 00                	add    BYTE PTR [eax],al
    3b1b:	00 0c bb             	add    BYTE PTR [ebx+edi*4],cl
    3b1e:	0c 00                	or     al,0x0
    3b20:	00 1e                	add    BYTE PTR [esi],bl
    3b22:	00 00                	add    BYTE PTR [eax],al
    3b24:	00 80 31 00 9f 7b    	add    BYTE PTR [eax+0x7b9f0031],al
    3b2a:	00 00                	add    BYTE PTR [eax],al
    3b2c:	00 4a 15             	add    BYTE PTR [edx+0x15],cl
    3b2f:	00 00                	add    BYTE PTR [eax],al
    3b31:	02 01                	add    al,BYTE PTR [ecx]
    3b33:	06                   	push   es
    3b34:	8c 00                	mov    WORD PTR [eax],es
    3b36:	00 00                	add    BYTE PTR [eax],al
    3b38:	02 01                	add    al,BYTE PTR [ecx]
    3b3a:	06                   	push   es
    3b3b:	85 00                	test   DWORD PTR [eax],eax
    3b3d:	00 00                	add    BYTE PTR [eax],al
    3b3f:	02 02                	add    al,BYTE PTR [edx]
    3b41:	05 72 01 00 00       	add    eax,0x172
    3b46:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3b4d:	02 08                	add    cl,BYTE PTR [eax]
    3b4f:	05 00 00 00 00       	add    eax,0x0
    3b54:	02 01                	add    al,BYTE PTR [ecx]
    3b56:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    3b5c:	02 07                	add    al,BYTE PTR [edi]
    3b5e:	19 01                	sbb    DWORD PTR [ecx],eax
    3b60:	00 00                	add    BYTE PTR [eax],al
    3b62:	04 0e                	add    al,0xe
    3b64:	00 00                	add    BYTE PTR [eax],al
    3b66:	00 02                	add    BYTE PTR [edx],al
    3b68:	34 61                	xor    al,0x61
    3b6a:	00 00                	add    BYTE PTR [eax],al
    3b6c:	00 02                	add    BYTE PTR [edx],al
    3b6e:	04 07                	add    al,0x7
    3b70:	61                   	popa   
    3b71:	00 00                	add    BYTE PTR [eax],al
    3b73:	00 02                	add    BYTE PTR [edx],al
    3b75:	08 07                	or     BYTE PTR [edi],al
    3b77:	57                   	push   edi
    3b78:	00 00                	add    BYTE PTR [eax],al
    3b7a:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    3b81:	56                   	push   esi
    3b82:	61                   	popa   
    3b83:	00 00                	add    BYTE PTR [eax],al
    3b85:	00 02                	add    BYTE PTR [edx],al
    3b87:	04 05                	add    al,0x5
    3b89:	05 00 00 00 02       	add    eax,0x2000000
    3b8e:	0c 04                	or     al,0x4
    3b90:	66 01 00             	add    WORD PTR [eax],ax
    3b93:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    3b99:	00 06                	add    BYTE PTR [esi],al
    3b9b:	25 00 00 00 02       	and    eax,0x2000000
    3ba0:	01 02                	add    DWORD PTR [edx],eax
    3ba2:	13 01                	adc    eax,DWORD PTR [ecx]
    3ba4:	00 00                	add    BYTE PTR [eax],al
    3ba6:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3ba9:	83 01 00             	add    DWORD PTR [ecx],0x0
    3bac:	00 02                	add    BYTE PTR [edx],al
    3bae:	04 07                	add    al,0x7
    3bb0:	5c                   	pop    esp
    3bb1:	00 00                	add    BYTE PTR [eax],al
    3bb3:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3bb9:	00 07                	add    BYTE PTR [edi],al
    3bbb:	ac                   	lods   al,BYTE PTR ds:[esi]
    3bbc:	0c 00                	or     al,0x0
    3bbe:	00 01                	add    BYTE PTR [ecx],al
    3bc0:	1a 3a                	sbb    bh,BYTE PTR [edx]
    3bc2:	00 00                	add    BYTE PTR [eax],al
    3bc4:	00 80 31 00 9f 5e    	add    BYTE PTR [eax+0x5e9f0031],al
    3bca:	00 00                	add    BYTE PTR [eax],al
    3bcc:	00 01                	add    BYTE PTR [ecx],al
    3bce:	9c                   	pushf  
    3bcf:	14 01                	adc    al,0x1
    3bd1:	00 00                	add    BYTE PTR [eax],al
    3bd3:	08 70 31             	or     BYTE PTR [eax+0x31],dh
    3bd6:	00 01                	add    BYTE PTR [ecx],al
    3bd8:	1a 88 00 00 00 02    	sbb    cl,BYTE PTR [eax+0x2000000]
    3bde:	91                   	xchg   ecx,eax
    3bdf:	00 08                	add    BYTE PTR [eax],cl
    3be1:	70 32                	jo     3c15 <sysEnter_Vector-0x12c3eb>
    3be3:	00 01                	add    BYTE PTR [ecx],al
    3be5:	1a 88 00 00 00 02    	sbb    cl,BYTE PTR [eax+0x2000000]
    3beb:	91                   	xchg   ecx,eax
    3bec:	04 09                	add    al,0x9
    3bee:	73 31                	jae    3c21 <sysEnter_Vector-0x12c3df>
    3bf0:	00 01                	add    BYTE PTR [ecx],al
    3bf2:	1c 14                	sbb    al,0x14
    3bf4:	01 00                	add    DWORD PTR [eax],eax
    3bf6:	00 01                	add    BYTE PTR [ecx],al
    3bf8:	53                   	push   ebx
    3bf9:	09 73 32             	or     DWORD PTR [ebx+0x32],esi
    3bfc:	00 01                	add    BYTE PTR [ecx],al
    3bfe:	1d 14 01 00 00       	sbb    eax,0x114
    3c03:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    3c06:	63 31                	arpl   WORD PTR [ecx],si
    3c08:	00 01                	add    BYTE PTR [ecx],al
    3c0a:	1e                   	push   ds
    3c0b:	48                   	dec    eax
    3c0c:	00 00                	add    BYTE PTR [eax],al
    3c0e:	00 02                	add    BYTE PTR [edx],al
    3c10:	91                   	xchg   ecx,eax
    3c11:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3c12:	09 63 32             	or     DWORD PTR [ebx+0x32],esp
    3c15:	00 01                	add    BYTE PTR [ecx],al
    3c17:	1e                   	push   ds
    3c18:	48                   	dec    eax
    3c19:	00 00                	add    BYTE PTR [eax],al
    3c1b:	00 02                	add    BYTE PTR [edx],al
    3c1d:	91                   	xchg   ecx,eax
    3c1e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3c1f:	00 05 04 1a 01 00    	add    BYTE PTR ds:0x11a04,al
    3c25:	00 06                	add    BYTE PTR [esi],al
    3c27:	48                   	dec    eax
    3c28:	00 00                	add    BYTE PTR [eax],al
    3c2a:	00 0a                	add    BYTE PTR [edx],cl
    3c2c:	b4 0c                	mov    ah,0xc
    3c2e:	00 00                	add    BYTE PTR [eax],al
    3c30:	01 2c 3a             	add    DWORD PTR [edx+edi*1],ebp
    3c33:	00 00                	add    BYTE PTR [eax],al
    3c35:	00 de                	add    dh,bl
    3c37:	31 00                	xor    DWORD PTR [eax],eax
    3c39:	9f                   	lahf   
    3c3a:	1d 00 00 00 01       	sbb    eax,0x1000000
    3c3f:	9c                   	pushf  
    3c40:	53                   	push   ebx
    3c41:	01 00                	add    DWORD PTR [eax],eax
    3c43:	00 08                	add    BYTE PTR [eax],cl
    3c45:	70 31                	jo     3c78 <sysEnter_Vector-0x12c388>
    3c47:	00 01                	add    BYTE PTR [ecx],al
    3c49:	2c 88                	sub    al,0x88
    3c4b:	00 00                	add    BYTE PTR [eax],al
    3c4d:	00 02                	add    BYTE PTR [edx],al
    3c4f:	91                   	xchg   ecx,eax
    3c50:	00 08                	add    BYTE PTR [eax],cl
    3c52:	70 32                	jo     3c86 <sysEnter_Vector-0x12c37a>
    3c54:	00 01                	add    BYTE PTR [ecx],al
    3c56:	2c 88                	sub    al,0x88
    3c58:	00 00                	add    BYTE PTR [eax],al
    3c5a:	00 02                	add    BYTE PTR [edx],al
    3c5c:	91                   	xchg   ecx,eax
    3c5d:	04 00                	add    al,0x0
    3c5f:	0b a3 00 00 00 03    	or     esp,DWORD PTR [ebx+0x3000000]
    3c65:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
    3c68:	00 00                	add    BYTE PTR [eax],al
    3c6a:	05 03 8c 72 00       	add    eax,0x728c03
    3c6f:	9f                   	lahf   
    3c70:	0b 34 01             	or     esi,DWORD PTR [ecx+eax*1]
    3c73:	00 00                	add    BYTE PTR [eax],al
    3c75:	03 3a                	add    edi,DWORD PTR [edx]
    3c77:	56                   	push   esi
    3c78:	00 00                	add    BYTE PTR [eax],al
    3c7a:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
    3c80:	9f                   	lahf   
    3c81:	0b 7b 00             	or     edi,DWORD PTR [ebx+0x0]
    3c84:	00 00                	add    BYTE PTR [eax],al
    3c86:	03 3b                	add    edi,DWORD PTR [ebx]
    3c88:	56                   	push   esi
    3c89:	00 00                	add    BYTE PTR [eax],al
    3c8b:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
    3c91:	9f                   	lahf   
    3c92:	0b 7c 01 00          	or     edi,DWORD PTR [ecx+eax*1+0x0]
    3c96:	00 03                	add    BYTE PTR [ebx],al
    3c98:	3c 7a                	cmp    al,0x7a
    3c9a:	00 00                	add    BYTE PTR [eax],al
    3c9c:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
    3ca2:	9f                   	lahf   
    3ca3:	0b 6e 00             	or     ebp,DWORD PTR [esi+0x0]
    3ca6:	00 00                	add    BYTE PTR [eax],al
    3ca8:	04 34                	add    al,0x34
    3caa:	a8 01                	test   al,0x1
    3cac:	00 00                	add    BYTE PTR [eax],al
    3cae:	05 03 84 72 00       	add    eax,0x728403
    3cb3:	9f                   	lahf   
    3cb4:	05 04 6f 00 00       	add    eax,0x6f04
    3cb9:	00 0b                	add    BYTE PTR [ebx],cl
    3cbb:	91                   	xchg   ecx,eax
    3cbc:	00 00                	add    BYTE PTR [eax],al
    3cbe:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    3cc5:	05 03 80 72 00       	add    eax,0x728003
    3cca:	9f                   	lahf   
    3ccb:	0b 41 00             	or     eax,DWORD PTR [ecx+0x0]
    3cce:	00 00                	add    BYTE PTR [eax],al
    3cd0:	05 58 d0 01 00       	add    eax,0x1d058
    3cd5:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
    3cdb:	9f                   	lahf   
    3cdc:	05 04 a8 00 00       	add    eax,0xa804
    3ce1:	00 00                	add    BYTE PTR [eax],al
    3ce3:	fc                   	cld    
    3ce4:	01 00                	add    DWORD PTR [eax],eax
    3ce6:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3ce9:	78 10                	js     3cfb <sysEnter_Vector-0x12c305>
    3ceb:	00 00                	add    BYTE PTR [eax],al
    3ced:	04 01                	add    al,0x1
    3cef:	ac                   	lods   al,BYTE PTR ds:[esi]
    3cf0:	00 00                	add    BYTE PTR [eax],al
    3cf2:	00 0c e5 0c 00 00 1e 	add    BYTE PTR [eiz*8+0x1e00000c],cl
    3cf9:	00 00                	add    BYTE PTR [eax],al
    3cfb:	00 fc                	add    ah,bh
    3cfd:	31 00                	xor    DWORD PTR [eax],eax
    3cff:	9f                   	lahf   
    3d00:	c7 00 00 00 16 16    	mov    DWORD PTR [eax],0x16160000
    3d06:	00 00                	add    BYTE PTR [eax],al
    3d08:	02 01                	add    al,BYTE PTR [ecx]
    3d0a:	06                   	push   es
    3d0b:	8c 00                	mov    WORD PTR [eax],es
    3d0d:	00 00                	add    BYTE PTR [eax],al
    3d0f:	02 01                	add    al,BYTE PTR [ecx]
    3d11:	06                   	push   es
    3d12:	85 00                	test   DWORD PTR [eax],eax
    3d14:	00 00                	add    BYTE PTR [eax],al
    3d16:	02 02                	add    al,BYTE PTR [edx]
    3d18:	05 72 01 00 00       	add    eax,0x172
    3d1d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3d24:	02 08                	add    cl,BYTE PTR [eax]
    3d26:	05 00 00 00 00       	add    eax,0x0
    3d2b:	02 01                	add    al,BYTE PTR [ecx]
    3d2d:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    3d33:	02 07                	add    al,BYTE PTR [edi]
    3d35:	19 01                	sbb    DWORD PTR [ecx],eax
    3d37:	00 00                	add    BYTE PTR [eax],al
    3d39:	04 0e                	add    al,0xe
    3d3b:	00 00                	add    BYTE PTR [eax],al
    3d3d:	00 02                	add    BYTE PTR [edx],al
    3d3f:	34 61                	xor    al,0x61
    3d41:	00 00                	add    BYTE PTR [eax],al
    3d43:	00 02                	add    BYTE PTR [edx],al
    3d45:	04 07                	add    al,0x7
    3d47:	61                   	popa   
    3d48:	00 00                	add    BYTE PTR [eax],al
    3d4a:	00 02                	add    BYTE PTR [edx],al
    3d4c:	08 07                	or     BYTE PTR [edi],al
    3d4e:	57                   	push   edi
    3d4f:	00 00                	add    BYTE PTR [eax],al
    3d51:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    3d58:	56                   	push   esi
    3d59:	61                   	popa   
    3d5a:	00 00                	add    BYTE PTR [eax],al
    3d5c:	00 02                	add    BYTE PTR [edx],al
    3d5e:	04 05                	add    al,0x5
    3d60:	05 00 00 00 02       	add    eax,0x2000000
    3d65:	0c 04                	or     al,0x4
    3d67:	66 01 00             	add    WORD PTR [eax],ax
    3d6a:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    3d70:	00 06                	add    BYTE PTR [esi],al
    3d72:	25 00 00 00 02       	and    eax,0x2000000
    3d77:	01 02                	add    DWORD PTR [edx],eax
    3d79:	13 01                	adc    eax,DWORD PTR [ecx]
    3d7b:	00 00                	add    BYTE PTR [eax],al
    3d7d:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3d80:	83 01 00             	add    DWORD PTR [ecx],0x0
    3d83:	00 02                	add    BYTE PTR [edx],al
    3d85:	04 07                	add    al,0x7
    3d87:	5c                   	pop    esp
    3d88:	00 00                	add    BYTE PTR [eax],al
    3d8a:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3d90:	00 07                	add    BYTE PTR [edi],al
    3d92:	de 0c 00             	fimul  WORD PTR [eax+eax*1]
    3d95:	00 01                	add    BYTE PTR [ecx],al
    3d97:	04 a8                	add    al,0xa8
    3d99:	00 00                	add    BYTE PTR [eax],al
    3d9b:	00 fc                	add    ah,bh
    3d9d:	31 00                	xor    DWORD PTR [eax],eax
    3d9f:	9f                   	lahf   
    3da0:	40                   	inc    eax
    3da1:	00 00                	add    BYTE PTR [eax],al
    3da3:	00 01                	add    BYTE PTR [ecx],al
    3da5:	9c                   	pushf  
    3da6:	ee                   	out    dx,al
    3da7:	00 00                	add    BYTE PTR [eax],al
    3da9:	00 08                	add    BYTE PTR [eax],cl
    3dab:	73 31                	jae    3dde <sysEnter_Vector-0x12c222>
    3dad:	00 01                	add    BYTE PTR [ecx],al
    3daf:	04 a8                	add    al,0xa8
    3db1:	00 00                	add    BYTE PTR [eax],al
    3db3:	00 02                	add    BYTE PTR [edx],al
    3db5:	91                   	xchg   ecx,eax
    3db6:	00 08                	add    BYTE PTR [eax],cl
    3db8:	73 32                	jae    3dec <sysEnter_Vector-0x12c214>
    3dba:	00 01                	add    BYTE PTR [ecx],al
    3dbc:	04 88                	add    al,0x88
    3dbe:	00 00                	add    BYTE PTR [eax],al
    3dc0:	00 02                	add    BYTE PTR [edx],al
    3dc2:	91                   	xchg   ecx,eax
    3dc3:	04 09                	add    al,0x9
    3dc5:	73 00                	jae    3dc7 <sysEnter_Vector-0x12c239>
    3dc7:	01 06                	add    DWORD PTR [esi],eax
    3dc9:	a8 00                	test   al,0x0
    3dcb:	00 00                	add    BYTE PTR [eax],al
    3dcd:	02 91 74 00 07 fa    	add    dl,BYTE PTR [ecx-0x5f8ff8c]
    3dd3:	0c 00                	or     al,0x0
    3dd5:	00 01                	add    BYTE PTR [ecx],al
    3dd7:	0e                   	push   cs
    3dd8:	a8 00                	test   al,0x0
    3dda:	00 00                	add    BYTE PTR [eax],al
    3ddc:	3c 32                	cmp    al,0x32
    3dde:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    3de4:	01 9c 2e 01 00 00 08 	add    DWORD PTR [esi+ebp*1+0x8000001],ebx
    3deb:	73 31                	jae    3e1e <sysEnter_Vector-0x12c1e2>
    3ded:	00 01                	add    BYTE PTR [ecx],al
    3def:	0e                   	push   cs
    3df0:	a8 00                	test   al,0x0
    3df2:	00 00                	add    BYTE PTR [eax],al
    3df4:	02 91 00 08 73 32    	add    dl,BYTE PTR [ecx+0x32730800]
    3dfa:	00 01                	add    BYTE PTR [ecx],al
    3dfc:	0e                   	push   cs
    3dfd:	88 00                	mov    BYTE PTR [eax],al
    3dff:	00 00                	add    BYTE PTR [eax],al
    3e01:	02 91 04 09 73 00    	add    dl,BYTE PTR [ecx+0x730904]
    3e07:	01 10                	add    DWORD PTR [eax],edx
    3e09:	a8 00                	test   al,0x0
    3e0b:	00 00                	add    BYTE PTR [eax],al
    3e0d:	02 91 74 00 07 d6    	add    dl,BYTE PTR [ecx-0x29f8ff8c]
    3e13:	0c 00                	or     al,0x0
    3e15:	00 01                	add    BYTE PTR [ecx],al
    3e17:	18 a8 00 00 00 7c    	sbb    BYTE PTR [eax+0x7c000000],ch
    3e1d:	32 00                	xor    al,BYTE PTR [eax]
    3e1f:	9f                   	lahf   
    3e20:	47                   	inc    edi
    3e21:	00 00                	add    BYTE PTR [eax],al
    3e23:	00 01                	add    BYTE PTR [ecx],al
    3e25:	9c                   	pushf  
    3e26:	7c 01                	jl     3e29 <sysEnter_Vector-0x12c1d7>
    3e28:	00 00                	add    BYTE PTR [eax],al
    3e2a:	08 73 31             	or     BYTE PTR [ebx+0x31],dh
    3e2d:	00 01                	add    BYTE PTR [ecx],al
    3e2f:	18 a8 00 00 00 02    	sbb    BYTE PTR [eax+0x2000000],ch
    3e35:	91                   	xchg   ecx,eax
    3e36:	00 08                	add    BYTE PTR [eax],cl
    3e38:	73 32                	jae    3e6c <sysEnter_Vector-0x12c194>
    3e3a:	00 01                	add    BYTE PTR [ecx],al
    3e3c:	18 88 00 00 00 02    	sbb    BYTE PTR [eax+0x2000000],cl
    3e42:	91                   	xchg   ecx,eax
    3e43:	04 0a                	add    al,0xa
    3e45:	d0 0c 00             	ror    BYTE PTR [eax+eax*1],1
    3e48:	00 01                	add    BYTE PTR [ecx],al
    3e4a:	18 61 00             	sbb    BYTE PTR [ecx+0x0],ah
    3e4d:	00 00                	add    BYTE PTR [eax],al
    3e4f:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    3e55:	01 1a                	add    DWORD PTR [edx],ebx
    3e57:	a8 00                	test   al,0x0
    3e59:	00 00                	add    BYTE PTR [eax],al
    3e5b:	02 91 74 00 0b a3    	add    dl,BYTE PTR [ecx-0x5cf4ff8c]
    3e61:	00 00                	add    BYTE PTR [eax],al
    3e63:	00 03                	add    BYTE PTR [ebx],al
    3e65:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
    3e68:	00 00                	add    BYTE PTR [eax],al
    3e6a:	05 03 8c 72 00       	add    eax,0x728c03
    3e6f:	9f                   	lahf   
    3e70:	0b 34 01             	or     esi,DWORD PTR [ecx+eax*1]
    3e73:	00 00                	add    BYTE PTR [eax],al
    3e75:	03 3a                	add    edi,DWORD PTR [edx]
    3e77:	56                   	push   esi
    3e78:	00 00                	add    BYTE PTR [eax],al
    3e7a:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
    3e80:	9f                   	lahf   
    3e81:	0b 7b 00             	or     edi,DWORD PTR [ebx+0x0]
    3e84:	00 00                	add    BYTE PTR [eax],al
    3e86:	03 3b                	add    edi,DWORD PTR [ebx]
    3e88:	56                   	push   esi
    3e89:	00 00                	add    BYTE PTR [eax],al
    3e8b:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
    3e91:	9f                   	lahf   
    3e92:	0b 7c 01 00          	or     edi,DWORD PTR [ecx+eax*1+0x0]
    3e96:	00 03                	add    BYTE PTR [ebx],al
    3e98:	3c 7a                	cmp    al,0x7a
    3e9a:	00 00                	add    BYTE PTR [eax],al
    3e9c:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
    3ea2:	9f                   	lahf   
    3ea3:	0b 6e 00             	or     ebp,DWORD PTR [esi+0x0]
    3ea6:	00 00                	add    BYTE PTR [eax],al
    3ea8:	04 34                	add    al,0x34
    3eaa:	d1 01                	rol    DWORD PTR [ecx],1
    3eac:	00 00                	add    BYTE PTR [eax],al
    3eae:	05 03 84 72 00       	add    eax,0x728403
    3eb3:	9f                   	lahf   
    3eb4:	05 04 6f 00 00       	add    eax,0x6f04
    3eb9:	00 0b                	add    BYTE PTR [ebx],cl
    3ebb:	91                   	xchg   ecx,eax
    3ebc:	00 00                	add    BYTE PTR [eax],al
    3ebe:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    3ec5:	05 03 80 72 00       	add    eax,0x728003
    3eca:	9f                   	lahf   
    3ecb:	0b 41 00             	or     eax,DWORD PTR [ecx+0x0]
    3ece:	00 00                	add    BYTE PTR [eax],al
    3ed0:	05 58 f9 01 00       	add    eax,0x1f958
    3ed5:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
    3edb:	9f                   	lahf   
    3edc:	05 04 a8 00 00       	add    eax,0xa804
    3ee1:	00 00                	add    BYTE PTR [eax],al
    3ee3:	7f 01                	jg     3ee6 <sysEnter_Vector-0x12c11a>
    3ee5:	00 00                	add    BYTE PTR [eax],al
    3ee7:	04 00                	add    al,0x0
    3ee9:	19 11                	sbb    DWORD PTR [ecx],edx
    3eeb:	00 00                	add    BYTE PTR [eax],al
    3eed:	04 01                	add    al,0x1
    3eef:	ac                   	lods   al,BYTE PTR ds:[esi]
    3ef0:	00 00                	add    BYTE PTR [eax],al
    3ef2:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
    3ef5:	0d 00 00 1e 00       	or     eax,0x1e0000
    3efa:	00 00                	add    BYTE PTR [eax],al
    3efc:	c4 32                	les    esi,FWORD PTR [edx]
    3efe:	00 9f 89 00 00 00    	add    BYTE PTR [edi+0x89],bl
    3f04:	00 17                	add    BYTE PTR [edi],dl
    3f06:	00 00                	add    BYTE PTR [eax],al
    3f08:	02 01                	add    al,BYTE PTR [ecx]
    3f0a:	06                   	push   es
    3f0b:	8c 00                	mov    WORD PTR [eax],es
    3f0d:	00 00                	add    BYTE PTR [eax],al
    3f0f:	02 01                	add    al,BYTE PTR [ecx]
    3f11:	06                   	push   es
    3f12:	85 00                	test   DWORD PTR [eax],eax
    3f14:	00 00                	add    BYTE PTR [eax],al
    3f16:	02 02                	add    al,BYTE PTR [edx]
    3f18:	05 72 01 00 00       	add    eax,0x172
    3f1d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3f24:	02 08                	add    cl,BYTE PTR [eax]
    3f26:	05 00 00 00 00       	add    eax,0x0
    3f2b:	02 01                	add    al,BYTE PTR [ecx]
    3f2d:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    3f33:	02 07                	add    al,BYTE PTR [edi]
    3f35:	19 01                	sbb    DWORD PTR [ecx],eax
    3f37:	00 00                	add    BYTE PTR [eax],al
    3f39:	04 0e                	add    al,0xe
    3f3b:	00 00                	add    BYTE PTR [eax],al
    3f3d:	00 02                	add    BYTE PTR [edx],al
    3f3f:	34 61                	xor    al,0x61
    3f41:	00 00                	add    BYTE PTR [eax],al
    3f43:	00 02                	add    BYTE PTR [edx],al
    3f45:	04 07                	add    al,0x7
    3f47:	61                   	popa   
    3f48:	00 00                	add    BYTE PTR [eax],al
    3f4a:	00 02                	add    BYTE PTR [edx],al
    3f4c:	08 07                	or     BYTE PTR [edi],al
    3f4e:	57                   	push   edi
    3f4f:	00 00                	add    BYTE PTR [eax],al
    3f51:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    3f58:	56                   	push   esi
    3f59:	61                   	popa   
    3f5a:	00 00                	add    BYTE PTR [eax],al
    3f5c:	00 02                	add    BYTE PTR [edx],al
    3f5e:	04 05                	add    al,0x5
    3f60:	05 00 00 00 02       	add    eax,0x2000000
    3f65:	0c 04                	or     al,0x4
    3f67:	66 01 00             	add    WORD PTR [eax],ax
    3f6a:	00 02                	add    BYTE PTR [edx],al
    3f6c:	01 02                	add    DWORD PTR [edx],eax
    3f6e:	13 01                	adc    eax,DWORD PTR [ecx]
    3f70:	00 00                	add    BYTE PTR [eax],al
    3f72:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3f75:	83 01 00             	add    DWORD PTR [ecx],0x0
    3f78:	00 02                	add    BYTE PTR [edx],al
    3f7a:	04 07                	add    al,0x7
    3f7c:	5c                   	pop    esp
    3f7d:	00 00                	add    BYTE PTR [eax],al
    3f7f:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3f85:	00 06                	add    BYTE PTR [esi],al
    3f87:	22 0d 00 00 01 09    	and    cl,BYTE PTR ds:0x9010000
    3f8d:	88 00                	mov    BYTE PTR [eax],al
    3f8f:	00 00                	add    BYTE PTR [eax],al
    3f91:	c4 32                	les    esi,FWORD PTR [edx]
    3f93:	00 9f 30 00 00 00    	add    BYTE PTR [edi+0x30],bl
    3f99:	01 9c c9 00 00 00 07 	add    DWORD PTR [ecx+ecx*8+0x7000000],ebx
    3fa0:	63 00                	arpl   WORD PTR [eax],ax
    3fa2:	01 09                	add    DWORD PTR [ecx],ecx
    3fa4:	25 00 00 00 02       	and    eax,0x2000000
    3fa9:	91                   	xchg   ecx,eax
    3faa:	74 00                	je     3fac <sysEnter_Vector-0x12c054>
    3fac:	08 02                	or     BYTE PTR [edx],al
    3fae:	0d 00 00 01 0e       	or     eax,0xe010000
    3fb3:	88 00                	mov    BYTE PTR [eax],al
    3fb5:	00 00                	add    BYTE PTR [eax],al
    3fb7:	f4                   	hlt    
    3fb8:	32 00                	xor    al,BYTE PTR [eax]
    3fba:	9f                   	lahf   
    3fbb:	59                   	pop    ecx
    3fbc:	00 00                	add    BYTE PTR [eax],al
    3fbe:	00 01                	add    BYTE PTR [ecx],al
    3fc0:	9c                   	pushf  
    3fc1:	ff 00                	inc    DWORD PTR [eax]
    3fc3:	00 00                	add    BYTE PTR [eax],al
    3fc5:	07                   	pop    es
    3fc6:	73 74                	jae    403c <sysEnter_Vector-0x12bfc4>
    3fc8:	72 00                	jb     3fca <sysEnter_Vector-0x12c036>
    3fca:	01 0e                	add    DWORD PTR [esi],ecx
    3fcc:	9d                   	popf   
    3fcd:	00 00                	add    BYTE PTR [eax],al
    3fcf:	00 02                	add    BYTE PTR [edx],al
    3fd1:	91                   	xchg   ecx,eax
    3fd2:	00 09                	add    BYTE PTR [ecx],cl
    3fd4:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
    3fd7:	00 01                	add    BYTE PTR [ecx],al
    3fd9:	10 3a                	adc    BYTE PTR [edx],bh
    3fdb:	00 00                	add    BYTE PTR [eax],al
    3fdd:	00 02                	add    BYTE PTR [edx],al
    3fdf:	91                   	xchg   ecx,eax
    3fe0:	74 00                	je     3fe2 <sysEnter_Vector-0x12c01e>
    3fe2:	0a a3 00 00 00 03    	or     ah,BYTE PTR [ebx+0x3000000]
    3fe8:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
    3feb:	00 00                	add    BYTE PTR [eax],al
    3fed:	05 03 8c 72 00       	add    eax,0x728c03
    3ff2:	9f                   	lahf   
    3ff3:	0a 34 01             	or     dh,BYTE PTR [ecx+eax*1]
    3ff6:	00 00                	add    BYTE PTR [eax],al
    3ff8:	03 3a                	add    edi,DWORD PTR [edx]
    3ffa:	56                   	push   esi
    3ffb:	00 00                	add    BYTE PTR [eax],al
    3ffd:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
    4003:	9f                   	lahf   
    4004:	0a 7b 00             	or     bh,BYTE PTR [ebx+0x0]
    4007:	00 00                	add    BYTE PTR [eax],al
    4009:	03 3b                	add    edi,DWORD PTR [ebx]
    400b:	56                   	push   esi
    400c:	00 00                	add    BYTE PTR [eax],al
    400e:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
    4014:	9f                   	lahf   
    4015:	0a 7c 01 00          	or     bh,BYTE PTR [ecx+eax*1+0x0]
    4019:	00 03                	add    BYTE PTR [ebx],al
    401b:	3c 7a                	cmp    al,0x7a
    401d:	00 00                	add    BYTE PTR [eax],al
    401f:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
    4025:	9f                   	lahf   
    4026:	0a 6e 00             	or     ch,BYTE PTR [esi+0x0]
    4029:	00 00                	add    BYTE PTR [eax],al
    402b:	04 34                	add    al,0x34
    402d:	54                   	push   esp
    402e:	01 00                	add    DWORD PTR [eax],eax
    4030:	00 05 03 84 72 00    	add    BYTE PTR ds:0x728403,al
    4036:	9f                   	lahf   
    4037:	05 04 6f 00 00       	add    eax,0x6f04
    403c:	00 0a                	add    BYTE PTR [edx],cl
    403e:	91                   	xchg   ecx,eax
    403f:	00 00                	add    BYTE PTR [eax],al
    4041:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    4048:	05 03 80 72 00       	add    eax,0x728003
    404d:	9f                   	lahf   
    404e:	0a 41 00             	or     al,BYTE PTR [ecx+0x0]
    4051:	00 00                	add    BYTE PTR [eax],al
    4053:	05 58 7c 01 00       	add    eax,0x17c58
    4058:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
    405e:	9f                   	lahf   
    405f:	05 04 9d 00 00       	add    eax,0x9d04
    4064:	00 00                	add    BYTE PTR [eax],al
    4066:	11 02                	adc    DWORD PTR [edx],eax
    4068:	00 00                	add    BYTE PTR [eax],al
    406a:	04 00                	add    al,0x0
    406c:	c0 11 00             	rcl    BYTE PTR [ecx],0x0
    406f:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4072:	ac                   	lods   al,BYTE PTR ds:[esi]
    4073:	00 00                	add    BYTE PTR [eax],al
    4075:	00 0c 4e             	add    BYTE PTR [esi+ecx*2],cl
    4078:	0d 00 00 1e 00       	or     eax,0x1e0000
    407d:	00 00                	add    BYTE PTR [eax],al
    407f:	50                   	push   eax
    4080:	33 00                	xor    eax,DWORD PTR [eax]
    4082:	9f                   	lahf   
    4083:	a2 00 00 00 d9       	mov    ds:0xd9000000,al
    4088:	17                   	pop    ss
    4089:	00 00                	add    BYTE PTR [eax],al
    408b:	02 01                	add    al,BYTE PTR [ecx]
    408d:	06                   	push   es
    408e:	8c 00                	mov    WORD PTR [eax],es
    4090:	00 00                	add    BYTE PTR [eax],al
    4092:	02 01                	add    al,BYTE PTR [ecx]
    4094:	06                   	push   es
    4095:	85 00                	test   DWORD PTR [eax],eax
    4097:	00 00                	add    BYTE PTR [eax],al
    4099:	02 02                	add    al,BYTE PTR [edx]
    409b:	05 72 01 00 00       	add    eax,0x172
    40a0:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    40a7:	02 08                	add    cl,BYTE PTR [eax]
    40a9:	05 00 00 00 00       	add    eax,0x0
    40ae:	02 01                	add    al,BYTE PTR [ecx]
    40b0:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    40b6:	02 07                	add    al,BYTE PTR [edi]
    40b8:	19 01                	sbb    DWORD PTR [ecx],eax
    40ba:	00 00                	add    BYTE PTR [eax],al
    40bc:	04 0e                	add    al,0xe
    40be:	00 00                	add    BYTE PTR [eax],al
    40c0:	00 02                	add    BYTE PTR [edx],al
    40c2:	34 61                	xor    al,0x61
    40c4:	00 00                	add    BYTE PTR [eax],al
    40c6:	00 02                	add    BYTE PTR [edx],al
    40c8:	04 07                	add    al,0x7
    40ca:	61                   	popa   
    40cb:	00 00                	add    BYTE PTR [eax],al
    40cd:	00 02                	add    BYTE PTR [edx],al
    40cf:	08 07                	or     BYTE PTR [edi],al
    40d1:	57                   	push   edi
    40d2:	00 00                	add    BYTE PTR [eax],al
    40d4:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    40db:	56                   	push   esi
    40dc:	61                   	popa   
    40dd:	00 00                	add    BYTE PTR [eax],al
    40df:	00 04 bd 02 00 00 03 	add    BYTE PTR [edi*4+0x3000002],al
    40e6:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    40e9:	00 00                	add    BYTE PTR [eax],al
    40eb:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    40f2:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    40f5:	66 01 00             	add    WORD PTR [eax],ax
    40f8:	00 05 04 99 00 00    	add    BYTE PTR ds:0x9904,al
    40fe:	00 06                	add    BYTE PTR [esi],al
    4100:	25 00 00 00 02       	and    eax,0x2000000
    4105:	01 02                	add    DWORD PTR [edx],eax
    4107:	13 01                	adc    eax,DWORD PTR [ecx]
    4109:	00 00                	add    BYTE PTR [eax],al
    410b:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    410e:	83 01 00             	add    DWORD PTR [ecx],0x0
    4111:	00 02                	add    BYTE PTR [edx],al
    4113:	04 07                	add    al,0x7
    4115:	5c                   	pop    esp
    4116:	00 00                	add    BYTE PTR [eax],al
    4118:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    411e:	00 07                	add    BYTE PTR [edi],al
    4120:	2e                   	cs
    4121:	0d 00 00 01 04       	or     eax,0x4010000
    4126:	7a 00                	jp     4128 <sysEnter_Vector-0x12bed8>
    4128:	00 00                	add    BYTE PTR [eax],al
    412a:	50                   	push   eax
    412b:	33 00                	xor    eax,DWORD PTR [eax]
    412d:	9f                   	lahf   
    412e:	31 00                	xor    DWORD PTR [eax],eax
    4130:	00 00                	add    BYTE PTR [eax],al
    4132:	01 9c ef 00 00 00 08 	add    DWORD PTR [edi+ebp*8+0x8000000],ebx
    4139:	73 74                	jae    41af <sysEnter_Vector-0x12be51>
    413b:	72 00                	jb     413d <sysEnter_Vector-0x12bec3>
    413d:	01 04 93             	add    DWORD PTR [ebx+edx*4],eax
    4140:	00 00                	add    BYTE PTR [eax],al
    4142:	00 02                	add    BYTE PTR [edx],al
    4144:	91                   	xchg   ecx,eax
    4145:	00 09                	add    BYTE PTR [ecx],cl
    4147:	72 65                	jb     41ae <sysEnter_Vector-0x12be52>
    4149:	74 00                	je     414b <sysEnter_Vector-0x12beb5>
    414b:	01 05 7a 00 00 00    	add    DWORD PTR ds:0x7a,eax
    4151:	02 91 74 00 0a 36    	add    dl,BYTE PTR [ecx+0x360a0074]
    4157:	0d 00 00 01 0b       	or     eax,0xb010000
    415c:	7a 00                	jp     415e <sysEnter_Vector-0x12bea2>
    415e:	00 00                	add    BYTE PTR [eax],al
    4160:	81 33 00 9f 1a 00    	xor    DWORD PTR [ebx],0x1a9f00
    4166:	00 00                	add    BYTE PTR [eax],al
    4168:	01 9c 17 01 00 00 08 	add    DWORD PTR [edi+edx*1+0x8000001],ebx
    416f:	73 74                	jae    41e5 <sysEnter_Vector-0x12be1b>
    4171:	72 00                	jb     4173 <sysEnter_Vector-0x12be8d>
    4173:	01 0b                	add    DWORD PTR [ebx],ecx
    4175:	93                   	xchg   ebx,eax
    4176:	00 00                	add    BYTE PTR [eax],al
    4178:	00 02                	add    BYTE PTR [edx],al
    417a:	91                   	xchg   ecx,eax
    417b:	00 00                	add    BYTE PTR [eax],al
    417d:	07                   	pop    es
    417e:	3d 0d 00 00 01       	cmp    eax,0x100000d
    4183:	10 7a 00             	adc    BYTE PTR [edx+0x0],bh
    4186:	00 00                	add    BYTE PTR [eax],al
    4188:	9b                   	fwait
    4189:	33 00                	xor    eax,DWORD PTR [eax]
    418b:	9f                   	lahf   
    418c:	39 00                	cmp    DWORD PTR [eax],eax
    418e:	00 00                	add    BYTE PTR [eax],al
    4190:	01 9c 5b 01 00 00 08 	add    DWORD PTR [ebx+ebx*2+0x8000001],ebx
    4197:	73 74                	jae    420d <sysEnter_Vector-0x12bdf3>
    4199:	72 00                	jb     419b <sysEnter_Vector-0x12be65>
    419b:	01 10                	add    DWORD PTR [eax],edx
    419d:	93                   	xchg   ebx,eax
    419e:	00 00                	add    BYTE PTR [eax],al
    41a0:	00 02                	add    BYTE PTR [edx],al
    41a2:	91                   	xchg   ecx,eax
    41a3:	00 0b                	add    BYTE PTR [ebx],cl
    41a5:	41                   	inc    ecx
    41a6:	07                   	pop    es
    41a7:	00 00                	add    BYTE PTR [eax],al
    41a9:	01 10                	add    DWORD PTR [eax],edx
    41ab:	7a 00                	jp     41ad <sysEnter_Vector-0x12be53>
    41ad:	00 00                	add    BYTE PTR [eax],al
    41af:	02 91 04 09 72 65    	add    dl,BYTE PTR [ecx+0x65720904]
    41b5:	74 00                	je     41b7 <sysEnter_Vector-0x12be49>
    41b7:	01 12                	add    DWORD PTR [edx],edx
    41b9:	7a 00                	jp     41bb <sysEnter_Vector-0x12be45>
    41bb:	00 00                	add    BYTE PTR [eax],al
    41bd:	02 91 74 00 0a 46    	add    dl,BYTE PTR [ecx+0x460a0074]
    41c3:	0d 00 00 01 18       	or     eax,0x18010000
    41c8:	7a 00                	jp     41ca <sysEnter_Vector-0x12be36>
    41ca:	00 00                	add    BYTE PTR [eax],al
    41cc:	d4 33                	aam    0x33
    41ce:	00 9f 1e 00 00 00    	add    BYTE PTR [edi+0x1e],bl
    41d4:	01 9c 91 01 00 00 08 	add    DWORD PTR [ecx+edx*4+0x8000001],ebx
    41db:	73 74                	jae    4251 <sysEnter_Vector-0x12bdaf>
    41dd:	72 00                	jb     41df <sysEnter_Vector-0x12be21>
    41df:	01 18                	add    DWORD PTR [eax],ebx
    41e1:	93                   	xchg   ebx,eax
    41e2:	00 00                	add    BYTE PTR [eax],al
    41e4:	00 02                	add    BYTE PTR [edx],al
    41e6:	91                   	xchg   ecx,eax
    41e7:	00 0b                	add    BYTE PTR [ebx],cl
    41e9:	41                   	inc    ecx
    41ea:	07                   	pop    es
    41eb:	00 00                	add    BYTE PTR [eax],al
    41ed:	01 18                	add    DWORD PTR [eax],ebx
    41ef:	3a 00                	cmp    al,BYTE PTR [eax]
    41f1:	00 00                	add    BYTE PTR [eax],al
    41f3:	02 91 04 00 0c a3    	add    dl,BYTE PTR [ecx-0x5cf3fffc]
    41f9:	00 00                	add    BYTE PTR [eax],al
    41fb:	00 04 39             	add    BYTE PTR [ecx+edi*1],al
    41fe:	56                   	push   esi
    41ff:	00 00                	add    BYTE PTR [eax],al
    4201:	00 05 03 8c 72 00    	add    BYTE PTR ds:0x728c03,al
    4207:	9f                   	lahf   
    4208:	0c 34                	or     al,0x34
    420a:	01 00                	add    DWORD PTR [eax],eax
    420c:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    420f:	56                   	push   esi
    4210:	00 00                	add    BYTE PTR [eax],al
    4212:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
    4218:	9f                   	lahf   
    4219:	0c 7b                	or     al,0x7b
    421b:	00 00                	add    BYTE PTR [eax],al
    421d:	00 04 3b             	add    BYTE PTR [ebx+edi*1],al
    4220:	56                   	push   esi
    4221:	00 00                	add    BYTE PTR [eax],al
    4223:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
    4229:	9f                   	lahf   
    422a:	0c 7c                	or     al,0x7c
    422c:	01 00                	add    DWORD PTR [eax],eax
    422e:	00 04 3c             	add    BYTE PTR [esp+edi*1],al
    4231:	85 00                	test   DWORD PTR [eax],eax
    4233:	00 00                	add    BYTE PTR [eax],al
    4235:	05 03 98 72 00       	add    eax,0x729803
    423a:	9f                   	lahf   
    423b:	0c 6e                	or     al,0x6e
    423d:	00 00                	add    BYTE PTR [eax],al
    423f:	00 05 34 e6 01 00    	add    BYTE PTR ds:0x1e634,al
    4245:	00 05 03 84 72 00    	add    BYTE PTR ds:0x728403,al
    424b:	9f                   	lahf   
    424c:	05 04 6f 00 00       	add    eax,0x6f04
    4251:	00 0c 91             	add    BYTE PTR [ecx+edx*4],cl
    4254:	00 00                	add    BYTE PTR [eax],al
    4256:	00 05 35 56 00 00    	add    BYTE PTR ds:0x5635,al
    425c:	00 05 03 80 72 00    	add    BYTE PTR ds:0x728003,al
    4262:	9f                   	lahf   
    4263:	0c 41                	or     al,0x41
    4265:	00 00                	add    BYTE PTR [eax],al
    4267:	00 06                	add    BYTE PTR [esi],al
    4269:	58                   	pop    eax
    426a:	0e                   	push   cs
    426b:	02 00                	add    al,BYTE PTR [eax]
    426d:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
    4273:	9f                   	lahf   
    4274:	05 04 b3 00 00       	add    eax,0xb304
    4279:	00 00                	add    BYTE PTR [eax],al
    427b:	de 00                	fiadd  WORD PTR [eax]
    427d:	00 00                	add    BYTE PTR [eax],al
    427f:	04 00                	add    al,0x0
    4281:	7d 12                	jge    4295 <sysEnter_Vector-0x12bd6b>
    4283:	00 00                	add    BYTE PTR [eax],al
    4285:	04 01                	add    al,0x1
    4287:	ac                   	lods   al,BYTE PTR ds:[esi]
    4288:	00 00                	add    BYTE PTR [eax],al
    428a:	00 0c 74             	add    BYTE PTR [esp+esi*2],cl
    428d:	0d 00 00 1e 00       	or     eax,0x1e0000
    4292:	00 00                	add    BYTE PTR [eax],al
    4294:	f4                   	hlt    
    4295:	33 00                	xor    eax,DWORD PTR [eax]
    4297:	9f                   	lahf   
    4298:	ce                   	into   
    4299:	00 00                	add    BYTE PTR [eax],al
    429b:	00 bc 18 00 00 02 04 	add    BYTE PTR [eax+ebx*1+0x4020000],bh
    42a2:	05 69 6e 74 00       	add    eax,0x746e69
    42a7:	03 bd 02 00 00 02    	add    edi,DWORD PTR [ebp+0x2000002]
    42ad:	d8 37                	fdiv   DWORD PTR [edi]
    42af:	00 00                	add    BYTE PTR [eax],al
    42b1:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    42b4:	07                   	pop    es
    42b5:	61                   	popa   
    42b6:	00 00                	add    BYTE PTR [eax],al
    42b8:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    42bb:	05 05 00 00 00       	add    eax,0x5
    42c0:	04 08                	add    al,0x8
    42c2:	05 00 00 00 00       	add    eax,0x0
    42c7:	04 0c                	add    al,0xc
    42c9:	04 66                	add    al,0x66
    42cb:	01 00                	add    DWORD PTR [eax],eax
    42cd:	00 05 6c 0d 00 00    	add    BYTE PTR ds:0xd6c,al
    42d3:	01 0c 25 00 00 00 f4 	add    DWORD PTR [eiz*1-0xc000000],ecx
    42da:	33 00                	xor    eax,DWORD PTR [eax]
    42dc:	9f                   	lahf   
    42dd:	67 00 00             	add    BYTE PTR [bx+si],al
    42e0:	00 01                	add    BYTE PTR [ecx],al
    42e2:	9c                   	pushf  
    42e3:	93                   	xchg   ebx,eax
    42e4:	00 00                	add    BYTE PTR [eax],al
    42e6:	00 06                	add    BYTE PTR [esi],al
    42e8:	73 31                	jae    431b <sysEnter_Vector-0x12bce5>
    42ea:	00 01                	add    BYTE PTR [ecx],al
    42ec:	0c 93                	or     al,0x93
    42ee:	00 00                	add    BYTE PTR [eax],al
    42f0:	00 02                	add    BYTE PTR [edx],al
    42f2:	91                   	xchg   ecx,eax
    42f3:	00 06                	add    BYTE PTR [esi],al
    42f5:	73 32                	jae    4329 <sysEnter_Vector-0x12bcd7>
    42f7:	00 01                	add    BYTE PTR [ecx],al
    42f9:	0c 93                	or     al,0x93
    42fb:	00 00                	add    BYTE PTR [eax],al
    42fd:	00 02                	add    BYTE PTR [edx],al
    42ff:	91                   	xchg   ecx,eax
    4300:	04 06                	add    al,0x6
    4302:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4303:	00 01                	add    BYTE PTR [ecx],al
    4305:	0c 2c                	or     al,0x2c
    4307:	00 00                	add    BYTE PTR [eax],al
    4309:	00 02                	add    BYTE PTR [edx],al
    430b:	91                   	xchg   ecx,eax
    430c:	08 00                	or     BYTE PTR [eax],al
    430e:	07                   	pop    es
    430f:	04 a0                	add    al,0xa0
    4311:	00 00                	add    BYTE PTR [eax],al
    4313:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4316:	06                   	push   es
    4317:	8c 00                	mov    WORD PTR [eax],es
    4319:	00 00                	add    BYTE PTR [eax],al
    431b:	08 99 00 00 00 09    	or     BYTE PTR [ecx+0x9000000],bl
    4321:	63 0d 00 00 01 16    	arpl   WORD PTR ds:0x16010000,cx
    4327:	25 00 00 00 5b       	and    eax,0x5b000000
    432c:	34 00                	xor    al,0x0
    432e:	9f                   	lahf   
    432f:	67 00 00             	add    BYTE PTR [bx+si],al
    4332:	00 01                	add    BYTE PTR [ecx],al
    4334:	9c                   	pushf  
    4335:	06                   	push   es
    4336:	73 31                	jae    4369 <sysEnter_Vector-0x12bc97>
    4338:	00 01                	add    BYTE PTR [ecx],al
    433a:	16                   	push   ss
    433b:	93                   	xchg   ebx,eax
    433c:	00 00                	add    BYTE PTR [eax],al
    433e:	00 02                	add    BYTE PTR [edx],al
    4340:	91                   	xchg   ecx,eax
    4341:	00 06                	add    BYTE PTR [esi],al
    4343:	73 32                	jae    4377 <sysEnter_Vector-0x12bc89>
    4345:	00 01                	add    BYTE PTR [ecx],al
    4347:	16                   	push   ss
    4348:	93                   	xchg   ebx,eax
    4349:	00 00                	add    BYTE PTR [eax],al
    434b:	00 02                	add    BYTE PTR [edx],al
    434d:	91                   	xchg   ecx,eax
    434e:	04 06                	add    al,0x6
    4350:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4351:	00 01                	add    BYTE PTR [ecx],al
    4353:	16                   	push   ss
    4354:	2c 00                	sub    al,0x0
    4356:	00 00                	add    BYTE PTR [eax],al
    4358:	02 91 08 00 00 f0    	add    dl,BYTE PTR [ecx-0xffffff8]
    435e:	00 00                	add    BYTE PTR [eax],al
    4360:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4363:	09 13                	or     DWORD PTR [ebx],edx
    4365:	00 00                	add    BYTE PTR [eax],al
    4367:	04 01                	add    al,0x1
    4369:	ac                   	lods   al,BYTE PTR ds:[esi]
    436a:	00 00                	add    BYTE PTR [eax],al
    436c:	00 0c 8a             	add    BYTE PTR [edx+ecx*4],cl
    436f:	0d 00 00 1e 00       	or     eax,0x1e0000
    4374:	00 00                	add    BYTE PTR [eax],al
    4376:	c4 34 00             	les    esi,FWORD PTR [eax+eax*1]
    4379:	9f                   	lahf   
    437a:	8c 00                	mov    WORD PTR [eax],es
    437c:	00 00                	add    BYTE PTR [eax],al
    437e:	81 19 00 00 02 04    	sbb    DWORD PTR [ecx],0x4020000
    4384:	05 69 6e 74 00       	add    eax,0x746e69
    4389:	03 bd 02 00 00 02    	add    edi,DWORD PTR [ebp+0x2000002]
    438f:	d8 37                	fdiv   DWORD PTR [edi]
    4391:	00 00                	add    BYTE PTR [eax],al
    4393:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    4396:	07                   	pop    es
    4397:	61                   	popa   
    4398:	00 00                	add    BYTE PTR [eax],al
    439a:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    439d:	05 05 00 00 00       	add    eax,0x5
    43a2:	04 08                	add    al,0x8
    43a4:	05 00 00 00 00       	add    eax,0x0
    43a9:	04 0c                	add    al,0xc
    43ab:	04 66                	add    al,0x66
    43ad:	01 00                	add    DWORD PTR [eax],eax
    43af:	00 05 a0 0d 00 00    	add    BYTE PTR ds:0xda0,al
    43b5:	01 0d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ecx
    43bb:	c4 34 00             	les    esi,FWORD PTR [eax+eax*1]
    43be:	9f                   	lahf   
    43bf:	6c                   	ins    BYTE PTR es:[edi],dx
    43c0:	00 00                	add    BYTE PTR [eax],al
    43c2:	00 01                	add    BYTE PTR [ecx],al
    43c4:	9c                   	pushf  
    43c5:	9f                   	lahf   
    43c6:	00 00                	add    BYTE PTR [eax],al
    43c8:	00 06                	add    BYTE PTR [esi],al
    43ca:	73 31                	jae    43fd <sysEnter_Vector-0x12bc03>
    43cc:	00 01                	add    BYTE PTR [ecx],al
    43ce:	0d 9f 00 00 00       	or     eax,0x9f
    43d3:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    43d9:	00 01                	add    BYTE PTR [ecx],al
    43db:	0d ac 00 00 00       	or     eax,0xac
    43e0:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    43e6:	01 0d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ecx
    43ec:	02 91 08 07 73 00    	add    dl,BYTE PTR [ecx+0x730708]
    43f2:	01 0f                	add    DWORD PTR [edi],ecx
    43f4:	9f                   	lahf   
    43f5:	00 00                	add    BYTE PTR [eax],al
    43f7:	00 02                	add    BYTE PTR [edx],al
    43f9:	91                   	xchg   ecx,eax
    43fa:	74 00                	je     43fc <sysEnter_Vector-0x12bc04>
    43fc:	08 04 a5 00 00 00 04 	or     BYTE PTR [eiz*4+0x4000000],al
    4403:	01 06                	add    DWORD PTR [esi],eax
    4405:	8c 00                	mov    WORD PTR [eax],es
    4407:	00 00                	add    BYTE PTR [eax],al
    4409:	08 04 b2             	or     BYTE PTR [edx+esi*4],al
    440c:	00 00                	add    BYTE PTR [eax],al
    440e:	00 09                	add    BYTE PTR [ecx],cl
    4410:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    4411:	00 00                	add    BYTE PTR [eax],al
    4413:	00 0a                	add    BYTE PTR [edx],cl
    4415:	a9 0d 00 00 01       	test   eax,0x100000d
    441a:	1d 9f 00 00 00       	sbb    eax,0x9f
    441f:	30 35 00 9f 20 00    	xor    BYTE PTR ds:0x209f00,dh
    4425:	00 00                	add    BYTE PTR [eax],al
    4427:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    442e:	1d 9f 00 00 00       	sbb    eax,0x9f
    4433:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    4439:	00 01                	add    BYTE PTR [ecx],al
    443b:	1d ac 00 00 00       	sbb    eax,0xac
    4440:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    4446:	01 1d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ebx
    444c:	02 91 08 00 00 c5    	add    dl,BYTE PTR [ecx-0x3afffff8]
    4452:	01 00                	add    DWORD PTR [eax],eax
    4454:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4457:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    4458:	13 00                	adc    eax,DWORD PTR [eax]
    445a:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    445d:	ac                   	lods   al,BYTE PTR ds:[esi]
    445e:	00 00                	add    BYTE PTR [eax],al
    4460:	00 0c c7             	add    BYTE PTR [edi+eax*8],cl
    4463:	0d 00 00 1e 00       	or     eax,0x1e0000
    4468:	00 00                	add    BYTE PTR [eax],al
    446a:	50                   	push   eax
    446b:	35 00 9f 7d 01       	xor    eax,0x17d9f00
    4470:	00 00                	add    BYTE PTR [eax],al
    4472:	28 1a                	sub    BYTE PTR [edx],bl
    4474:	00 00                	add    BYTE PTR [eax],al
    4476:	02 01                	add    al,BYTE PTR [ecx]
    4478:	06                   	push   es
    4479:	8c 00                	mov    WORD PTR [eax],es
    447b:	00 00                	add    BYTE PTR [eax],al
    447d:	02 01                	add    al,BYTE PTR [ecx]
    447f:	06                   	push   es
    4480:	85 00                	test   DWORD PTR [eax],eax
    4482:	00 00                	add    BYTE PTR [eax],al
    4484:	02 02                	add    al,BYTE PTR [edx]
    4486:	05 72 01 00 00       	add    eax,0x172
    448b:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    4492:	02 08                	add    cl,BYTE PTR [eax]
    4494:	05 00 00 00 00       	add    eax,0x0
    4499:	02 01                	add    al,BYTE PTR [ecx]
    449b:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    44a1:	02 07                	add    al,BYTE PTR [edi]
    44a3:	19 01                	sbb    DWORD PTR [ecx],eax
    44a5:	00 00                	add    BYTE PTR [eax],al
    44a7:	04 0e                	add    al,0xe
    44a9:	00 00                	add    BYTE PTR [eax],al
    44ab:	00 02                	add    BYTE PTR [edx],al
    44ad:	34 61                	xor    al,0x61
    44af:	00 00                	add    BYTE PTR [eax],al
    44b1:	00 02                	add    BYTE PTR [edx],al
    44b3:	04 07                	add    al,0x7
    44b5:	61                   	popa   
    44b6:	00 00                	add    BYTE PTR [eax],al
    44b8:	00 02                	add    BYTE PTR [edx],al
    44ba:	08 07                	or     BYTE PTR [edi],al
    44bc:	57                   	push   edi
    44bd:	00 00                	add    BYTE PTR [eax],al
    44bf:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    44c6:	56                   	push   esi
    44c7:	61                   	popa   
    44c8:	00 00                	add    BYTE PTR [eax],al
    44ca:	00 02                	add    BYTE PTR [edx],al
    44cc:	04 05                	add    al,0x5
    44ce:	05 00 00 00 02       	add    eax,0x2000000
    44d3:	0c 04                	or     al,0x4
    44d5:	66 01 00             	add    WORD PTR [eax],ax
    44d8:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    44de:	00 06                	add    BYTE PTR [esi],al
    44e0:	25 00 00 00 02       	and    eax,0x2000000
    44e5:	01 02                	add    DWORD PTR [edx],eax
    44e7:	13 01                	adc    eax,DWORD PTR [ecx]
    44e9:	00 00                	add    BYTE PTR [eax],al
    44eb:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    44ee:	83 01 00             	add    DWORD PTR [ecx],0x0
    44f1:	00 02                	add    BYTE PTR [edx],al
    44f3:	04 07                	add    al,0x7
    44f5:	5c                   	pop    esp
    44f6:	00 00                	add    BYTE PTR [eax],al
    44f8:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    44fe:	00 07                	add    BYTE PTR [edi],al
    4500:	bf 0d 00 00 01       	mov    edi,0x100000d
    4505:	3b a1 00 00 00 50    	cmp    esp,DWORD PTR [ecx+0x50000000]
    450b:	35 00 9f 7d 01       	xor    eax,0x17d9f00
    4510:	00 00                	add    BYTE PTR [eax],al
    4512:	01 9c 45 01 00 00 08 	add    DWORD PTR [ebp+eax*2+0x8000001],ebx
    4519:	e3 0d                	jecxz  4528 <sysEnter_Vector-0x12bad8>
    451b:	00 00                	add    BYTE PTR [eax],al
    451d:	01 3b                	add    DWORD PTR [ebx],edi
    451f:	88 00                	mov    BYTE PTR [eax],al
    4521:	00 00                	add    BYTE PTR [eax],al
    4523:	02 91 00 08 b1 0d    	add    dl,BYTE PTR [ecx+0xdb10800]
    4529:	00 00                	add    BYTE PTR [eax],al
    452b:	01 3b                	add    DWORD PTR [ebx],edi
    452d:	45                   	inc    ebp
    452e:	01 00                	add    DWORD PTR [eax],eax
    4530:	00 02                	add    BYTE PTR [edx],al
    4532:	91                   	xchg   ecx,eax
    4533:	04 08                	add    al,0x8
    4535:	f3 0b 00             	repz or eax,DWORD PTR [eax]
    4538:	00 01                	add    BYTE PTR [ecx],al
    453a:	3b 3a                	cmp    edi,DWORD PTR [edx]
    453c:	00 00                	add    BYTE PTR [eax],al
    453e:	00 02                	add    BYTE PTR [edx],al
    4540:	91                   	xchg   ecx,eax
    4541:	08 09                	or     BYTE PTR [ecx],cl
    4543:	73 00                	jae    4545 <sysEnter_Vector-0x12babb>
    4545:	01 3d 88 00 00 00    	add    DWORD PTR ds:0x88,edi
    454b:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    454e:	61                   	popa   
    454f:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    4552:	01 3e                	add    DWORD PTR [esi],edi
    4554:	a1 00 00 00 01       	mov    eax,ds:0x1000000
    4559:	57                   	push   edi
    455a:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    455d:	01 3f                	add    DWORD PTR [edi],edi
    455f:	3a 00                	cmp    al,BYTE PTR [eax]
    4561:	00 00                	add    BYTE PTR [eax],al
    4563:	01 53 0a             	add    DWORD PTR [ebx+0xa],edx
    4566:	dc 0d 00 00 01 40    	fmul   QWORD PTR ds:0x40010000
    456c:	a1 00 00 00 0b       	mov    eax,ds:0xb000000
    4571:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4572:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    4576:	41                   	inc    ecx
    4577:	3a 00                	cmp    al,BYTE PTR [eax]
    4579:	00 00                	add    BYTE PTR [eax],al
    457b:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    457e:	79 00                	jns    4580 <sysEnter_Vector-0x12ba80>
    4580:	01 41 3a             	add    DWORD PTR [ecx+0x3a],eax
    4583:	00 00                	add    BYTE PTR [eax],al
    4585:	00 01                	add    BYTE PTR [ecx],al
    4587:	51                   	push   ecx
    4588:	0c b8                	or     al,0xb8
    458a:	0d 00 00 01 41       	or     eax,0x41010000
    458f:	3a 00                	cmp    al,BYTE PTR [eax]
    4591:	00 00                	add    BYTE PTR [eax],al
    4593:	01 52 00             	add    DWORD PTR [edx+0x0],edx
    4596:	05 04 a8 00 00       	add    eax,0xa804
    459b:	00 0d a3 00 00 00    	add    BYTE PTR ds:0xa3,cl
    45a1:	03 39                	add    edi,DWORD PTR [ecx]
    45a3:	56                   	push   esi
    45a4:	00 00                	add    BYTE PTR [eax],al
    45a6:	00 05 03 8c 72 00    	add    BYTE PTR ds:0x728c03,al
    45ac:	9f                   	lahf   
    45ad:	0d 34 01 00 00       	or     eax,0x134
    45b2:	03 3a                	add    edi,DWORD PTR [edx]
    45b4:	56                   	push   esi
    45b5:	00 00                	add    BYTE PTR [eax],al
    45b7:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
    45bd:	9f                   	lahf   
    45be:	0d 7b 00 00 00       	or     eax,0x7b
    45c3:	03 3b                	add    edi,DWORD PTR [ebx]
    45c5:	56                   	push   esi
    45c6:	00 00                	add    BYTE PTR [eax],al
    45c8:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
    45ce:	9f                   	lahf   
    45cf:	0d 7c 01 00 00       	or     eax,0x17c
    45d4:	03 3c 7a             	add    edi,DWORD PTR [edx+edi*2]
    45d7:	00 00                	add    BYTE PTR [eax],al
    45d9:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
    45df:	9f                   	lahf   
    45e0:	0d 6e 00 00 00       	or     eax,0x6e
    45e5:	04 34                	add    al,0x34
    45e7:	a0 01 00 00 05       	mov    al,ds:0x5000001
    45ec:	03 84 72 00 9f 05 04 	add    eax,DWORD PTR [edx+esi*2+0x4059f00]
    45f3:	6f                   	outs   dx,DWORD PTR ds:[esi]
    45f4:	00 00                	add    BYTE PTR [eax],al
    45f6:	00 0d 91 00 00 00    	add    BYTE PTR ds:0x91,cl
    45fc:	04 35                	add    al,0x35
    45fe:	56                   	push   esi
    45ff:	00 00                	add    BYTE PTR [eax],al
    4601:	00 05 03 80 72 00    	add    BYTE PTR ds:0x728003,al
    4607:	9f                   	lahf   
    4608:	0d 41 00 00 00       	or     eax,0x41
    460d:	05 58 45 01 00       	add    eax,0x14558
    4612:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
    4618:	9f                   	lahf   
    4619:	00 6c 00 00          	add    BYTE PTR [eax+eax*1+0x0],ch
    461d:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4620:	5f                   	pop    edi
    4621:	14 00                	adc    al,0x0
    4623:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4626:	ac                   	lods   al,BYTE PTR ds:[esi]
    4627:	00 00                	add    BYTE PTR [eax],al
    4629:	00 0c e8             	add    BYTE PTR [eax+ebp*8],cl
    462c:	0d 00 00 1e 00       	or     eax,0x1e0000
    4631:	00 00                	add    BYTE PTR [eax],al
    4633:	d0                   	(bad)  
    4634:	36 00 9f 1d 00 00 00 	add    BYTE PTR ss:[edi+0x1d],bl
    463b:	7f 1b                	jg     4658 <sysEnter_Vector-0x12b9a8>
    463d:	00 00                	add    BYTE PTR [eax],al
    463f:	02 ff                	add    bh,bh
    4641:	0d 00 00 01 01       	or     eax,0x1010000
    4646:	5b                   	pop    ebx
    4647:	00 00                	add    BYTE PTR [eax],al
    4649:	00 d0                	add    al,dl
    464b:	36 00 9f 1d 00 00 00 	add    BYTE PTR ss:[edi+0x1d],bl
    4652:	01 9c 5b 00 00 00 03 	add    DWORD PTR [ebx+ebx*2+0x3000000],ebx
    4659:	76 61                	jbe    46bc <sysEnter_Vector-0x12b944>
    465b:	6c                   	ins    BYTE PTR es:[edi],dx
    465c:	00 01                	add    BYTE PTR [ecx],al
    465e:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    4661:	00 00                	add    BYTE PTR [eax],al
    4663:	02 91 00 03 63 6e    	add    dl,BYTE PTR [ecx+0x6e630300]
    4669:	74 00                	je     466b <sysEnter_Vector-0x12b995>
    466b:	01 01                	add    DWORD PTR [ecx],eax
    466d:	68 00 00 00 02       	push   0x2000000
    4672:	91                   	xchg   ecx,eax
    4673:	04 00                	add    al,0x0
    4675:	04 04                	add    al,0x4
    4677:	61                   	popa   
    4678:	00 00                	add    BYTE PTR [eax],al
    467a:	00 05 01 06 8c 00    	add    BYTE PTR ds:0x8c0601,al
    4680:	00 00                	add    BYTE PTR [eax],al
    4682:	06                   	push   es
    4683:	04 05                	add    al,0x5
    4685:	69 6e 74 00 00 c3 01 	imul   ebp,DWORD PTR [esi+0x74],0x1c30000
    468c:	00 00                	add    BYTE PTR [eax],al
    468e:	04 00                	add    al,0x0
    4690:	bd 14 00 00 04       	mov    ebp,0x4000014
    4695:	01 ac 00 00 00 0c 07 	add    DWORD PTR [eax+eax*1+0x70c0000],ebp
    469c:	0e                   	push   cs
    469d:	00 00                	add    BYTE PTR [eax],al
    469f:	1e                   	push   ds
    46a0:	00 00                	add    BYTE PTR [eax],al
    46a2:	00 f0                	add    al,dh
    46a4:	36 00 9f 9c 01 00 00 	add    BYTE PTR ss:[edi+0x19c],bl
    46ab:	c6                   	(bad)  
    46ac:	1b 00                	sbb    eax,DWORD PTR [eax]
    46ae:	00 02                	add    BYTE PTR [edx],al
    46b0:	01 06                	add    DWORD PTR [esi],eax
    46b2:	8c 00                	mov    WORD PTR [eax],es
    46b4:	00 00                	add    BYTE PTR [eax],al
    46b6:	02 01                	add    al,BYTE PTR [ecx]
    46b8:	06                   	push   es
    46b9:	85 00                	test   DWORD PTR [eax],eax
    46bb:	00 00                	add    BYTE PTR [eax],al
    46bd:	02 02                	add    al,BYTE PTR [edx]
    46bf:	05 72 01 00 00       	add    eax,0x172
    46c4:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    46cb:	02 08                	add    cl,BYTE PTR [eax]
    46cd:	05 00 00 00 00       	add    eax,0x0
    46d2:	02 01                	add    al,BYTE PTR [ecx]
    46d4:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    46da:	02 07                	add    al,BYTE PTR [edi]
    46dc:	19 01                	sbb    DWORD PTR [ecx],eax
    46de:	00 00                	add    BYTE PTR [eax],al
    46e0:	04 0e                	add    al,0xe
    46e2:	00 00                	add    BYTE PTR [eax],al
    46e4:	00 02                	add    BYTE PTR [edx],al
    46e6:	34 61                	xor    al,0x61
    46e8:	00 00                	add    BYTE PTR [eax],al
    46ea:	00 02                	add    BYTE PTR [edx],al
    46ec:	04 07                	add    al,0x7
    46ee:	61                   	popa   
    46ef:	00 00                	add    BYTE PTR [eax],al
    46f1:	00 02                	add    BYTE PTR [edx],al
    46f3:	08 07                	or     BYTE PTR [edi],al
    46f5:	57                   	push   edi
    46f6:	00 00                	add    BYTE PTR [eax],al
    46f8:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    46ff:	56                   	push   esi
    4700:	61                   	popa   
    4701:	00 00                	add    BYTE PTR [eax],al
    4703:	00 02                	add    BYTE PTR [edx],al
    4705:	04 05                	add    al,0x5
    4707:	05 00 00 00 02       	add    eax,0x2000000
    470c:	0c 04                	or     al,0x4
    470e:	66 01 00             	add    WORD PTR [eax],ax
    4711:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    4717:	00 06                	add    BYTE PTR [esi],al
    4719:	25 00 00 00 02       	and    eax,0x2000000
    471e:	01 02                	add    DWORD PTR [edx],eax
    4720:	13 01                	adc    eax,DWORD PTR [ecx]
    4722:	00 00                	add    BYTE PTR [eax],al
    4724:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    4727:	83 01 00             	add    DWORD PTR [ecx],0x0
    472a:	00 02                	add    BYTE PTR [edx],al
    472c:	04 07                	add    al,0x7
    472e:	5c                   	pop    esp
    472f:	00 00                	add    BYTE PTR [eax],al
    4731:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    4737:	00 07                	add    BYTE PTR [edi],al
    4739:	1c 0e                	sbb    al,0xe
    473b:	00 00                	add    BYTE PTR [eax],al
    473d:	01 57 7a             	add    DWORD PTR [edi+0x7a],edx
    4740:	00 00                	add    BYTE PTR [eax],al
    4742:	00 f0                	add    al,dh
    4744:	36 00 9f 9c 01 00 00 	add    BYTE PTR ss:[edi+0x19c],bl
    474b:	01 9c 43 01 00 00 08 	add    DWORD PTR [ebx+eax*2+0x8000001],ebx
    4752:	e3 0d                	jecxz  4761 <sysEnter_Vector-0x12b89f>
    4754:	00 00                	add    BYTE PTR [eax],al
    4756:	01 57 88             	add    DWORD PTR [edi-0x78],edx
    4759:	00 00                	add    BYTE PTR [eax],al
    475b:	00 02                	add    BYTE PTR [edx],al
    475d:	91                   	xchg   ecx,eax
    475e:	00 08                	add    BYTE PTR [eax],cl
    4760:	b1 0d                	mov    cl,0xd
    4762:	00 00                	add    BYTE PTR [eax],al
    4764:	01 57 43             	add    DWORD PTR [edi+0x43],edx
    4767:	01 00                	add    DWORD PTR [eax],eax
    4769:	00 02                	add    BYTE PTR [edx],al
    476b:	91                   	xchg   ecx,eax
    476c:	04 08                	add    al,0x8
    476e:	f3 0b 00             	repz or eax,DWORD PTR [eax]
    4771:	00 01                	add    BYTE PTR [ecx],al
    4773:	57                   	push   edi
    4774:	3a 00                	cmp    al,BYTE PTR [eax]
    4776:	00 00                	add    BYTE PTR [eax],al
    4778:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    477e:	01 59 88             	add    DWORD PTR [ecx-0x78],ebx
    4781:	00 00                	add    BYTE PTR [eax],al
    4783:	00 01                	add    BYTE PTR [ecx],al
    4785:	56                   	push   esi
    4786:	09 61 63             	or     DWORD PTR [ecx+0x63],esp
    4789:	63 00                	arpl   WORD PTR [eax],ax
    478b:	01 5a a1             	add    DWORD PTR [edx-0x5f],ebx
    478e:	00 00                	add    BYTE PTR [eax],al
    4790:	00 01                	add    BYTE PTR [ecx],al
    4792:	57                   	push   edi
    4793:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    4796:	01 5b 3a             	add    DWORD PTR [ebx+0x3a],ebx
    4799:	00 00                	add    BYTE PTR [eax],al
    479b:	00 01                	add    BYTE PTR [ecx],al
    479d:	53                   	push   ebx
    479e:	0a dc                	or     bl,ah
    47a0:	0d 00 00 01 5c       	or     eax,0x5c010000
    47a5:	a1 00 00 00 0b       	mov    eax,ds:0xb000000
    47aa:	6e                   	outs   dx,BYTE PTR ds:[esi]
    47ab:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    47af:	5d                   	pop    ebp
    47b0:	3a 00                	cmp    al,BYTE PTR [eax]
    47b2:	00 00                	add    BYTE PTR [eax],al
    47b4:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    47b7:	79 00                	jns    47b9 <sysEnter_Vector-0x12b847>
    47b9:	01 5d 3a             	add    DWORD PTR [ebp+0x3a],ebx
    47bc:	00 00                	add    BYTE PTR [eax],al
    47be:	00 01                	add    BYTE PTR [ecx],al
    47c0:	51                   	push   ecx
    47c1:	0a b8 0d 00 00 01    	or     bh,BYTE PTR [eax+0x100000d]
    47c7:	5d                   	pop    ebp
    47c8:	3a 00                	cmp    al,BYTE PTR [eax]
    47ca:	00 00                	add    BYTE PTR [eax],al
    47cc:	00 05 04 a8 00 00    	add    BYTE PTR ds:0xa804,al
    47d2:	00 0c a3             	add    BYTE PTR [ebx+eiz*4],cl
    47d5:	00 00                	add    BYTE PTR [eax],al
    47d7:	00 03                	add    BYTE PTR [ebx],al
    47d9:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
    47dc:	00 00                	add    BYTE PTR [eax],al
    47de:	05 03 8c 72 00       	add    eax,0x728c03
    47e3:	9f                   	lahf   
    47e4:	0c 34                	or     al,0x34
    47e6:	01 00                	add    DWORD PTR [eax],eax
    47e8:	00 03                	add    BYTE PTR [ebx],al
    47ea:	3a 56 00             	cmp    dl,BYTE PTR [esi+0x0]
    47ed:	00 00                	add    BYTE PTR [eax],al
    47ef:	05 03 90 72 00       	add    eax,0x729003
    47f4:	9f                   	lahf   
    47f5:	0c 7b                	or     al,0x7b
    47f7:	00 00                	add    BYTE PTR [eax],al
    47f9:	00 03                	add    BYTE PTR [ebx],al
    47fb:	3b 56 00             	cmp    edx,DWORD PTR [esi+0x0]
    47fe:	00 00                	add    BYTE PTR [eax],al
    4800:	05 03 88 72 00       	add    eax,0x728803
    4805:	9f                   	lahf   
    4806:	0c 7c                	or     al,0x7c
    4808:	01 00                	add    DWORD PTR [eax],eax
    480a:	00 03                	add    BYTE PTR [ebx],al
    480c:	3c 7a                	cmp    al,0x7a
    480e:	00 00                	add    BYTE PTR [eax],al
    4810:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
    4816:	9f                   	lahf   
    4817:	0c 6e                	or     al,0x6e
    4819:	00 00                	add    BYTE PTR [eax],al
    481b:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    481e:	9e                   	sahf   
    481f:	01 00                	add    DWORD PTR [eax],eax
    4821:	00 05 03 84 72 00    	add    BYTE PTR ds:0x728403,al
    4827:	9f                   	lahf   
    4828:	05 04 6f 00 00       	add    eax,0x6f04
    482d:	00 0c 91             	add    BYTE PTR [ecx+edx*4],cl
    4830:	00 00                	add    BYTE PTR [eax],al
    4832:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    4839:	05 03 80 72 00       	add    eax,0x728003
    483e:	9f                   	lahf   
    483f:	0c 41                	or     al,0x41
    4841:	00 00                	add    BYTE PTR [eax],al
    4843:	00 05 58 43 01 00    	add    BYTE PTR ds:0x14358,al
    4849:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
    484f:	9f                   	lahf   
    4850:	00 95 01 00 00 04    	add    BYTE PTR [ebp+0x4000001],dl
    4856:	00 69 15             	add    BYTE PTR [ecx+0x15],ch
    4859:	00 00                	add    BYTE PTR [eax],al
    485b:	04 01                	add    al,0x1
    485d:	ac                   	lods   al,BYTE PTR ds:[esi]
    485e:	00 00                	add    BYTE PTR [eax],al
    4860:	00 0c 32             	add    BYTE PTR [edx+esi*1],cl
    4863:	0e                   	push   cs
    4864:	00 00                	add    BYTE PTR [eax],al
    4866:	1e                   	push   ds
    4867:	00 00                	add    BYTE PTR [eax],al
    4869:	00 8c 38 00 9f b6 00 	add    BYTE PTR [eax+edi*1+0xb69f00],cl
    4870:	00 00                	add    BYTE PTR [eax],al
    4872:	49                   	dec    ecx
    4873:	1d 00 00 02 01       	sbb    eax,0x1020000
    4878:	06                   	push   es
    4879:	8c 00                	mov    WORD PTR [eax],es
    487b:	00 00                	add    BYTE PTR [eax],al
    487d:	02 01                	add    al,BYTE PTR [ecx]
    487f:	06                   	push   es
    4880:	85 00                	test   DWORD PTR [eax],eax
    4882:	00 00                	add    BYTE PTR [eax],al
    4884:	02 02                	add    al,BYTE PTR [edx]
    4886:	05 72 01 00 00       	add    eax,0x172
    488b:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    4892:	02 08                	add    cl,BYTE PTR [eax]
    4894:	05 00 00 00 00       	add    eax,0x0
    4899:	02 01                	add    al,BYTE PTR [ecx]
    489b:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    48a1:	02 07                	add    al,BYTE PTR [edi]
    48a3:	19 01                	sbb    DWORD PTR [ecx],eax
    48a5:	00 00                	add    BYTE PTR [eax],al
    48a7:	04 0e                	add    al,0xe
    48a9:	00 00                	add    BYTE PTR [eax],al
    48ab:	00 02                	add    BYTE PTR [edx],al
    48ad:	34 61                	xor    al,0x61
    48af:	00 00                	add    BYTE PTR [eax],al
    48b1:	00 02                	add    BYTE PTR [edx],al
    48b3:	04 07                	add    al,0x7
    48b5:	61                   	popa   
    48b6:	00 00                	add    BYTE PTR [eax],al
    48b8:	00 02                	add    BYTE PTR [edx],al
    48ba:	08 07                	or     BYTE PTR [edi],al
    48bc:	57                   	push   edi
    48bd:	00 00                	add    BYTE PTR [eax],al
    48bf:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    48c6:	56                   	push   esi
    48c7:	61                   	popa   
    48c8:	00 00                	add    BYTE PTR [eax],al
    48ca:	00 02                	add    BYTE PTR [edx],al
    48cc:	04 05                	add    al,0x5
    48ce:	05 00 00 00 02       	add    eax,0x2000000
    48d3:	0c 04                	or     al,0x4
    48d5:	66 01 00             	add    WORD PTR [eax],ax
    48d8:	00 02                	add    BYTE PTR [edx],al
    48da:	01 02                	add    DWORD PTR [edx],eax
    48dc:	13 01                	adc    eax,DWORD PTR [ecx]
    48de:	00 00                	add    BYTE PTR [eax],al
    48e0:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    48e3:	83 01 00             	add    DWORD PTR [ecx],0x0
    48e6:	00 02                	add    BYTE PTR [edx],al
    48e8:	04 07                	add    al,0x7
    48ea:	5c                   	pop    esp
    48eb:	00 00                	add    BYTE PTR [eax],al
    48ed:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    48f3:	00 06                	add    BYTE PTR [esi],al
    48f5:	23 0e                	and    ecx,DWORD PTR [esi]
    48f7:	00 00                	add    BYTE PTR [eax],al
    48f9:	01 03                	add    DWORD PTR [ebx],eax
    48fb:	8c 38                	mov    WORD PTR [eax],?
    48fd:	00 9f 96 00 00 00    	add    BYTE PTR [edi+0x96],bl
    4903:	01 9c f1 00 00 00 07 	add    DWORD PTR [ecx+esi*8+0x7000000],ebx
    490a:	2c 0e                	sub    al,0xe
    490c:	00 00                	add    BYTE PTR [eax],al
    490e:	01 03                	add    DWORD PTR [ebx],eax
    4910:	9d                   	popf   
    4911:	00 00                	add    BYTE PTR [eax],al
    4913:	00 02                	add    BYTE PTR [edx],al
    4915:	91                   	xchg   ecx,eax
    4916:	00 08                	add    BYTE PTR [eax],cl
    4918:	64                   	fs
    4919:	73 74                	jae    498f <sysEnter_Vector-0x12b671>
    491b:	00 01                	add    BYTE PTR [ecx],al
    491d:	05 9d 00 00 00       	add    eax,0x9d
    4922:	02 91 6c 08 73 72    	add    dl,BYTE PTR [ecx+0x7273086c]
    4928:	63 00                	arpl   WORD PTR [eax],ax
    492a:	01 05 9d 00 00 00    	add    DWORD PTR ds:0x9d,eax
    4930:	02 91 68 08 65 6e    	add    dl,BYTE PTR [ecx+0x6e650868]
    4936:	64 00 01             	add    BYTE PTR fs:[ecx],al
    4939:	06                   	push   es
    493a:	9d                   	popf   
    493b:	00 00                	add    BYTE PTR [eax],al
    493d:	00 02                	add    BYTE PTR [edx],al
    493f:	91                   	xchg   ecx,eax
    4940:	64 00 06             	add    BYTE PTR fs:[esi],al
    4943:	48                   	dec    eax
    4944:	0e                   	push   cs
    4945:	00 00                	add    BYTE PTR [eax],al
    4947:	01 1f                	add    DWORD PTR [edi],ebx
    4949:	22 39                	and    bh,BYTE PTR [ecx]
    494b:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    4951:	01 9c 15 01 00 00 07 	add    DWORD PTR [ebp+edx*1+0x7000001],ebx
    4958:	2c 0e                	sub    al,0xe
    495a:	00 00                	add    BYTE PTR [eax],al
    495c:	01 1f                	add    DWORD PTR [edi],ebx
    495e:	9d                   	popf   
    495f:	00 00                	add    BYTE PTR [eax],al
    4961:	00 02                	add    BYTE PTR [edx],al
    4963:	91                   	xchg   ecx,eax
    4964:	00 00                	add    BYTE PTR [eax],al
    4966:	09 a3 00 00 00 03    	or     DWORD PTR [ebx+0x3000000],esp
    496c:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
    496f:	00 00                	add    BYTE PTR [eax],al
    4971:	05 03 8c 72 00       	add    eax,0x728c03
    4976:	9f                   	lahf   
    4977:	09 34 01             	or     DWORD PTR [ecx+eax*1],esi
    497a:	00 00                	add    BYTE PTR [eax],al
    497c:	03 3a                	add    edi,DWORD PTR [edx]
    497e:	56                   	push   esi
    497f:	00 00                	add    BYTE PTR [eax],al
    4981:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
    4987:	9f                   	lahf   
    4988:	09 7b 00             	or     DWORD PTR [ebx+0x0],edi
    498b:	00 00                	add    BYTE PTR [eax],al
    498d:	03 3b                	add    edi,DWORD PTR [ebx]
    498f:	56                   	push   esi
    4990:	00 00                	add    BYTE PTR [eax],al
    4992:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
    4998:	9f                   	lahf   
    4999:	09 7c 01 00          	or     DWORD PTR [ecx+eax*1+0x0],edi
    499d:	00 03                	add    BYTE PTR [ebx],al
    499f:	3c 7a                	cmp    al,0x7a
    49a1:	00 00                	add    BYTE PTR [eax],al
    49a3:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
    49a9:	9f                   	lahf   
    49aa:	09 6e 00             	or     DWORD PTR [esi+0x0],ebp
    49ad:	00 00                	add    BYTE PTR [eax],al
    49af:	04 34                	add    al,0x34
    49b1:	6a 01                	push   0x1
    49b3:	00 00                	add    BYTE PTR [eax],al
    49b5:	05 03 84 72 00       	add    eax,0x728403
    49ba:	9f                   	lahf   
    49bb:	05 04 6f 00 00       	add    eax,0x6f04
    49c0:	00 09                	add    BYTE PTR [ecx],cl
    49c2:	91                   	xchg   ecx,eax
    49c3:	00 00                	add    BYTE PTR [eax],al
    49c5:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    49cc:	05 03 80 72 00       	add    eax,0x728003
    49d1:	9f                   	lahf   
    49d2:	09 41 00             	or     DWORD PTR [ecx+0x0],eax
    49d5:	00 00                	add    BYTE PTR [eax],al
    49d7:	05 58 92 01 00       	add    eax,0x19258
    49dc:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
    49e2:	9f                   	lahf   
    49e3:	05 04 9d 00 00       	add    eax,0x9d04
    49e8:	00 00                	add    BYTE PTR [eax],al
    49ea:	03 02                	add    eax,DWORD PTR [edx]
    49ec:	00 00                	add    BYTE PTR [eax],al
    49ee:	04 00                	add    al,0x0
    49f0:	f2 15 00 00 04 01    	repnz adc eax,0x1040000
    49f6:	ac                   	lods   al,BYTE PTR ds:[esi]
    49f7:	00 00                	add    BYTE PTR [eax],al
    49f9:	00 0c 58             	add    BYTE PTR [eax+ebx*2],cl
    49fc:	0e                   	push   cs
    49fd:	00 00                	add    BYTE PTR [eax],al
    49ff:	1e                   	push   ds
    4a00:	00 00                	add    BYTE PTR [eax],al
    4a02:	00 44 39 00          	add    BYTE PTR [ecx+edi*1+0x0],al
    4a06:	9f                   	lahf   
    4a07:	44                   	inc    esp
    4a08:	01 00                	add    DWORD PTR [eax],eax
    4a0a:	00 26                	add    BYTE PTR [esi],ah
    4a0c:	1e                   	push   ds
    4a0d:	00 00                	add    BYTE PTR [eax],al
    4a0f:	02 01                	add    al,BYTE PTR [ecx]
    4a11:	06                   	push   es
    4a12:	8c 00                	mov    WORD PTR [eax],es
    4a14:	00 00                	add    BYTE PTR [eax],al
    4a16:	02 01                	add    al,BYTE PTR [ecx]
    4a18:	06                   	push   es
    4a19:	85 00                	test   DWORD PTR [eax],eax
    4a1b:	00 00                	add    BYTE PTR [eax],al
    4a1d:	02 02                	add    al,BYTE PTR [edx]
    4a1f:	05 72 01 00 00       	add    eax,0x172
    4a24:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    4a2b:	02 08                	add    cl,BYTE PTR [eax]
    4a2d:	05 00 00 00 00       	add    eax,0x0
    4a32:	02 01                	add    al,BYTE PTR [ecx]
    4a34:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    4a3a:	02 07                	add    al,BYTE PTR [edi]
    4a3c:	19 01                	sbb    DWORD PTR [ecx],eax
    4a3e:	00 00                	add    BYTE PTR [eax],al
    4a40:	04 0e                	add    al,0xe
    4a42:	00 00                	add    BYTE PTR [eax],al
    4a44:	00 02                	add    BYTE PTR [edx],al
    4a46:	34 61                	xor    al,0x61
    4a48:	00 00                	add    BYTE PTR [eax],al
    4a4a:	00 02                	add    BYTE PTR [edx],al
    4a4c:	04 07                	add    al,0x7
    4a4e:	61                   	popa   
    4a4f:	00 00                	add    BYTE PTR [eax],al
    4a51:	00 02                	add    BYTE PTR [edx],al
    4a53:	08 07                	or     BYTE PTR [edi],al
    4a55:	57                   	push   edi
    4a56:	00 00                	add    BYTE PTR [eax],al
    4a58:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    4a5f:	56                   	push   esi
    4a60:	61                   	popa   
    4a61:	00 00                	add    BYTE PTR [eax],al
    4a63:	00 04 bd 02 00 00 03 	add    BYTE PTR [edi*4+0x3000002],al
    4a6a:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    4a6d:	00 00                	add    BYTE PTR [eax],al
    4a6f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    4a76:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    4a79:	66 01 00             	add    WORD PTR [eax],ax
    4a7c:	00 05 04 99 00 00    	add    BYTE PTR ds:0x9904,al
    4a82:	00 06                	add    BYTE PTR [esi],al
    4a84:	25 00 00 00 02       	and    eax,0x2000000
    4a89:	01 02                	add    DWORD PTR [edx],eax
    4a8b:	13 01                	adc    eax,DWORD PTR [ecx]
    4a8d:	00 00                	add    BYTE PTR [eax],al
    4a8f:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    4a92:	83 01 00             	add    DWORD PTR [ecx],0x0
    4a95:	00 02                	add    BYTE PTR [edx],al
    4a97:	04 07                	add    al,0x7
    4a99:	5c                   	pop    esp
    4a9a:	00 00                	add    BYTE PTR [eax],al
    4a9c:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    4aa2:	00 07                	add    BYTE PTR [edi],al
    4aa4:	8d 0e                	lea    ecx,[esi]
    4aa6:	00 00                	add    BYTE PTR [eax],al
    4aa8:	01 0d b3 00 00 00    	add    DWORD PTR ds:0xb3,ecx
    4aae:	44                   	inc    esp
    4aaf:	39 00                	cmp    DWORD PTR [eax],eax
    4ab1:	9f                   	lahf   
    4ab2:	1e                   	push   ds
    4ab3:	01 00                	add    DWORD PTR [eax],eax
    4ab5:	00 01                	add    BYTE PTR [ecx],al
    4ab7:	9c                   	pushf  
    4ab8:	33 01                	xor    eax,DWORD PTR [ecx]
    4aba:	00 00                	add    BYTE PTR [eax],al
    4abc:	08 69 6e             	or     BYTE PTR [ecx+0x6e],ch
    4abf:	00 01                	add    BYTE PTR [ecx],al
    4ac1:	0d 93 00 00 00       	or     eax,0x93
    4ac6:	02 91 00 09 85 0e    	add    dl,BYTE PTR [ecx+0xe850900]
    4acc:	00 00                	add    BYTE PTR [eax],al
    4ace:	01 0d 93 00 00 00    	add    DWORD PTR ds:0x93,ecx
    4ad4:	02 91 04 08 62 79    	add    dl,BYTE PTR [ecx+0x79620804]
    4ada:	00 01                	add    BYTE PTR [ecx],al
    4adc:	0d 93 00 00 00       	or     eax,0x93
    4ae1:	02 91 08 09 99 0e    	add    dl,BYTE PTR [ecx+0xe990908]
    4ae7:	00 00                	add    BYTE PTR [eax],al
    4ae9:	01 0d b3 00 00 00    	add    DWORD PTR ds:0xb3,ecx
    4aef:	02 91 0c 0a 50 0e    	add    dl,BYTE PTR [ecx+0xe500a0c]
    4af5:	00 00                	add    BYTE PTR [eax],al
    4af7:	01 0f                	add    DWORD PTR [edi],ecx
    4af9:	7a 00                	jp     4afb <sysEnter_Vector-0x12b505>
    4afb:	00 00                	add    BYTE PTR [eax],al
    4afd:	02 91 6c 0a 70 0e    	add    dl,BYTE PTR [ecx+0xe700a6c]
    4b03:	00 00                	add    BYTE PTR [eax],al
    4b05:	01 12                	add    DWORD PTR [edx],edx
    4b07:	7a 00                	jp     4b09 <sysEnter_Vector-0x12b4f7>
    4b09:	00 00                	add    BYTE PTR [eax],al
    4b0b:	02 91 68 0a 69 0e    	add    dl,BYTE PTR [ecx+0xe690a68]
    4b11:	00 00                	add    BYTE PTR [eax],al
    4b13:	01 13                	add    DWORD PTR [ebx],edx
    4b15:	b3 00                	mov    bl,0x0
    4b17:	00 00                	add    BYTE PTR [eax],al
    4b19:	02 91 64 00 07 7a    	add    dl,BYTE PTR [ecx+0x7a070064]
    4b1f:	0e                   	push   cs
    4b20:	00 00                	add    BYTE PTR [eax],al
    4b22:	01 2a                	add    DWORD PTR [edx],ebp
    4b24:	b3 00                	mov    bl,0x0
    4b26:	00 00                	add    BYTE PTR [eax],al
    4b28:	62 3a                	bound  edi,QWORD PTR [edx]
    4b2a:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
    4b30:	01 9c 83 01 00 00 08 	add    DWORD PTR [ebx+eax*4+0x8000001],ebx
    4b37:	69 6e 00 01 2a 93 00 	imul   ebp,DWORD PTR [esi+0x0],0x932a01
    4b3e:	00 00                	add    BYTE PTR [eax],al
    4b40:	02 91 00 09 85 0e    	add    dl,BYTE PTR [ecx+0xe850900]
    4b46:	00 00                	add    BYTE PTR [eax],al
    4b48:	01 2a                	add    DWORD PTR [edx],ebp
    4b4a:	93                   	xchg   ebx,eax
    4b4b:	00 00                	add    BYTE PTR [eax],al
    4b4d:	00 02                	add    BYTE PTR [edx],al
    4b4f:	91                   	xchg   ecx,eax
    4b50:	04 08                	add    al,0x8
    4b52:	62 79 00             	bound  edi,QWORD PTR [ecx+0x0]
    4b55:	01 2a                	add    DWORD PTR [edx],ebp
    4b57:	93                   	xchg   ebx,eax
    4b58:	00 00                	add    BYTE PTR [eax],al
    4b5a:	00 02                	add    BYTE PTR [edx],al
    4b5c:	91                   	xchg   ecx,eax
    4b5d:	08 09                	or     BYTE PTR [ecx],cl
    4b5f:	99                   	cdq    
    4b60:	0e                   	push   cs
    4b61:	00 00                	add    BYTE PTR [eax],al
    4b63:	01 2a                	add    DWORD PTR [edx],ebp
    4b65:	b3 00                	mov    bl,0x0
    4b67:	00 00                	add    BYTE PTR [eax],al
    4b69:	02 91 0c 00 0b a3    	add    dl,BYTE PTR [ecx-0x5cf4fff4]
    4b6f:	00 00                	add    BYTE PTR [eax],al
    4b71:	00 04 39             	add    BYTE PTR [ecx+edi*1],al
    4b74:	56                   	push   esi
    4b75:	00 00                	add    BYTE PTR [eax],al
    4b77:	00 05 03 8c 72 00    	add    BYTE PTR ds:0x728c03,al
    4b7d:	9f                   	lahf   
    4b7e:	0b 34 01             	or     esi,DWORD PTR [ecx+eax*1]
    4b81:	00 00                	add    BYTE PTR [eax],al
    4b83:	04 3a                	add    al,0x3a
    4b85:	56                   	push   esi
    4b86:	00 00                	add    BYTE PTR [eax],al
    4b88:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
    4b8e:	9f                   	lahf   
    4b8f:	0b 7b 00             	or     edi,DWORD PTR [ebx+0x0]
    4b92:	00 00                	add    BYTE PTR [eax],al
    4b94:	04 3b                	add    al,0x3b
    4b96:	56                   	push   esi
    4b97:	00 00                	add    BYTE PTR [eax],al
    4b99:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
    4b9f:	9f                   	lahf   
    4ba0:	0b 7c 01 00          	or     edi,DWORD PTR [ecx+eax*1+0x0]
    4ba4:	00 04 3c             	add    BYTE PTR [esp+edi*1],al
    4ba7:	85 00                	test   DWORD PTR [eax],eax
    4ba9:	00 00                	add    BYTE PTR [eax],al
    4bab:	05 03 98 72 00       	add    eax,0x729803
    4bb0:	9f                   	lahf   
    4bb1:	0b 6e 00             	or     ebp,DWORD PTR [esi+0x0]
    4bb4:	00 00                	add    BYTE PTR [eax],al
    4bb6:	05 34 d8 01 00       	add    eax,0x1d834
    4bbb:	00 05 03 84 72 00    	add    BYTE PTR ds:0x728403,al
    4bc1:	9f                   	lahf   
    4bc2:	05 04 6f 00 00       	add    eax,0x6f04
    4bc7:	00 0b                	add    BYTE PTR [ebx],cl
    4bc9:	91                   	xchg   ecx,eax
    4bca:	00 00                	add    BYTE PTR [eax],al
    4bcc:	00 05 35 56 00 00    	add    BYTE PTR ds:0x5635,al
    4bd2:	00 05 03 80 72 00    	add    BYTE PTR ds:0x728003,al
    4bd8:	9f                   	lahf   
    4bd9:	0b 41 00             	or     eax,DWORD PTR [ecx+0x0]
    4bdc:	00 00                	add    BYTE PTR [eax],al
    4bde:	06                   	push   es
    4bdf:	58                   	pop    eax
    4be0:	00 02                	add    BYTE PTR [edx],al
    4be2:	00 00                	add    BYTE PTR [eax],al
    4be4:	05 03 94 72 00       	add    eax,0x729403
    4be9:	9f                   	lahf   
    4bea:	05 04 b3 00 00       	add    eax,0xb304
    4bef:	00 00                	add    BYTE PTR [eax],al
    4bf1:	39 02                	cmp    DWORD PTR [edx],eax
    4bf3:	00 00                	add    BYTE PTR [eax],al
    4bf5:	04 00                	add    al,0x0
    4bf7:	93                   	xchg   ebx,eax
    4bf8:	16                   	push   ss
    4bf9:	00 00                	add    BYTE PTR [eax],al
    4bfb:	04 01                	add    al,0x1
    4bfd:	ac                   	lods   al,BYTE PTR ds:[esi]
    4bfe:	00 00                	add    BYTE PTR [eax],al
    4c00:	00 0c b4             	add    BYTE PTR [esp+esi*4],cl
    4c03:	0e                   	push   cs
    4c04:	00 00                	add    BYTE PTR [eax],al
    4c06:	1e                   	push   ds
    4c07:	00 00                	add    BYTE PTR [eax],al
    4c09:	00 88 3a 00 9f 29    	add    BYTE PTR [eax+0x299f003a],cl
    4c0f:	01 00                	add    DWORD PTR [eax],eax
    4c11:	00 0e                	add    BYTE PTR [esi],cl
    4c13:	1f                   	pop    ds
    4c14:	00 00                	add    BYTE PTR [eax],al
    4c16:	02 01                	add    al,BYTE PTR [ecx]
    4c18:	06                   	push   es
    4c19:	8c 00                	mov    WORD PTR [eax],es
    4c1b:	00 00                	add    BYTE PTR [eax],al
    4c1d:	02 01                	add    al,BYTE PTR [ecx]
    4c1f:	06                   	push   es
    4c20:	85 00                	test   DWORD PTR [eax],eax
    4c22:	00 00                	add    BYTE PTR [eax],al
    4c24:	02 02                	add    al,BYTE PTR [edx]
    4c26:	05 72 01 00 00       	add    eax,0x172
    4c2b:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    4c32:	02 08                	add    cl,BYTE PTR [eax]
    4c34:	05 00 00 00 00       	add    eax,0x0
    4c39:	02 01                	add    al,BYTE PTR [ecx]
    4c3b:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    4c41:	02 07                	add    al,BYTE PTR [edi]
    4c43:	19 01                	sbb    DWORD PTR [ecx],eax
    4c45:	00 00                	add    BYTE PTR [eax],al
    4c47:	04 0e                	add    al,0xe
    4c49:	00 00                	add    BYTE PTR [eax],al
    4c4b:	00 02                	add    BYTE PTR [edx],al
    4c4d:	34 61                	xor    al,0x61
    4c4f:	00 00                	add    BYTE PTR [eax],al
    4c51:	00 02                	add    BYTE PTR [edx],al
    4c53:	04 07                	add    al,0x7
    4c55:	61                   	popa   
    4c56:	00 00                	add    BYTE PTR [eax],al
    4c58:	00 02                	add    BYTE PTR [edx],al
    4c5a:	08 07                	or     BYTE PTR [edi],al
    4c5c:	57                   	push   edi
    4c5d:	00 00                	add    BYTE PTR [eax],al
    4c5f:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    4c66:	56                   	push   esi
    4c67:	61                   	popa   
    4c68:	00 00                	add    BYTE PTR [eax],al
    4c6a:	00 02                	add    BYTE PTR [edx],al
    4c6c:	04 05                	add    al,0x5
    4c6e:	05 00 00 00 02       	add    eax,0x2000000
    4c73:	0c 04                	or     al,0x4
    4c75:	66 01 00             	add    WORD PTR [eax],ax
    4c78:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    4c7e:	00 06                	add    BYTE PTR [esi],al
    4c80:	25 00 00 00 02       	and    eax,0x2000000
    4c85:	01 02                	add    DWORD PTR [edx],eax
    4c87:	13 01                	adc    eax,DWORD PTR [ecx]
    4c89:	00 00                	add    BYTE PTR [eax],al
    4c8b:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    4c8e:	83 01 00             	add    DWORD PTR [ecx],0x0
    4c91:	00 02                	add    BYTE PTR [edx],al
    4c93:	04 07                	add    al,0x7
    4c95:	5c                   	pop    esp
    4c96:	00 00                	add    BYTE PTR [eax],al
    4c98:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    4c9e:	00 07                	add    BYTE PTR [edi],al
    4ca0:	ab                   	stos   DWORD PTR es:[edi],eax
    4ca1:	0e                   	push   cs
    4ca2:	00 00                	add    BYTE PTR [eax],al
    4ca4:	01 33                	add    DWORD PTR [ebx],esi
    4ca6:	a8 00                	test   al,0x0
    4ca8:	00 00                	add    BYTE PTR [eax],al
    4caa:	88 3a                	mov    BYTE PTR [edx],bh
    4cac:	00 9f 9e 00 00 00    	add    BYTE PTR [edi+0x9e],bl
    4cb2:	01 9c 16 01 00 00 08 	add    DWORD PTR [esi+edx*1+0x8000001],ebx
    4cb9:	ca 0e 00             	retf   0xe
    4cbc:	00 01                	add    BYTE PTR [ecx],al
    4cbe:	33 a8 00 00 00 02    	xor    ebp,DWORD PTR [eax+0x2000000]
    4cc4:	91                   	xchg   ecx,eax
    4cc5:	00 08                	add    BYTE PTR [eax],cl
    4cc7:	c7                   	(bad)  
    4cc8:	0e                   	push   cs
    4cc9:	00 00                	add    BYTE PTR [eax],al
    4ccb:	01 33                	add    DWORD PTR [ebx],esi
    4ccd:	a8 00                	test   al,0x0
    4ccf:	00 00                	add    BYTE PTR [eax],al
    4cd1:	02 91 04 08 7a 06    	add    dl,BYTE PTR [ecx+0x67a0804]
    4cd7:	00 00                	add    BYTE PTR [eax],al
    4cd9:	01 33                	add    DWORD PTR [ebx],esi
    4cdb:	3a 00                	cmp    al,BYTE PTR [eax]
    4cdd:	00 00                	add    BYTE PTR [eax],al
    4cdf:	02 91 08 09 61 00    	add    dl,BYTE PTR [ecx+0x610908]
    4ce5:	01 35 a8 00 00 00    	add    DWORD PTR ds:0xa8,esi
    4ceb:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    4cee:	62 00                	bound  eax,QWORD PTR [eax]
    4cf0:	01 35 a8 00 00 00    	add    DWORD PTR ds:0xa8,esi
    4cf6:	01 53 09             	add    DWORD PTR [ebx+0x9],edx
    4cf9:	6c                   	ins    BYTE PTR es:[edi],dx
    4cfa:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    4cfc:	00 01                	add    BYTE PTR [ecx],al
    4cfe:	3b 3a                	cmp    edi,DWORD PTR [edx]
    4d00:	00 00                	add    BYTE PTR [eax],al
    4d02:	00 02                	add    BYTE PTR [edx],al
    4d04:	91                   	xchg   ecx,eax
    4d05:	6c                   	ins    BYTE PTR es:[edi],dx
    4d06:	00 07                	add    BYTE PTR [edi],al
    4d08:	a3 0e 00 00 01       	mov    ds:0x100000e,eax
    4d0d:	57                   	push   edi
    4d0e:	a8 00                	test   al,0x0
    4d10:	00 00                	add    BYTE PTR [eax],al
    4d12:	26 3b 00             	cmp    eax,DWORD PTR es:[eax]
    4d15:	9f                   	lahf   
    4d16:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4d17:	00 00                	add    BYTE PTR [eax],al
    4d19:	00 01                	add    BYTE PTR [ecx],al
    4d1b:	9c                   	pushf  
    4d1c:	62 01                	bound  eax,QWORD PTR [ecx]
    4d1e:	00 00                	add    BYTE PTR [eax],al
    4d20:	08 ca                	or     dl,cl
    4d22:	0e                   	push   cs
    4d23:	00 00                	add    BYTE PTR [eax],al
    4d25:	01 57 88             	add    DWORD PTR [edi-0x78],edx
    4d28:	00 00                	add    BYTE PTR [eax],al
    4d2a:	00 02                	add    BYTE PTR [edx],al
    4d2c:	91                   	xchg   ecx,eax
    4d2d:	00 08                	add    BYTE PTR [eax],cl
    4d2f:	c7                   	(bad)  
    4d30:	0e                   	push   cs
    4d31:	00 00                	add    BYTE PTR [eax],al
    4d33:	01 57 88             	add    DWORD PTR [edi-0x78],edx
    4d36:	00 00                	add    BYTE PTR [eax],al
    4d38:	00 02                	add    BYTE PTR [edx],al
    4d3a:	91                   	xchg   ecx,eax
    4d3b:	04 09                	add    al,0x9
    4d3d:	61                   	popa   
    4d3e:	00 01                	add    BYTE PTR [ecx],al
    4d40:	59                   	pop    ecx
    4d41:	a8 00                	test   al,0x0
    4d43:	00 00                	add    BYTE PTR [eax],al
    4d45:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    4d48:	62 00                	bound  eax,QWORD PTR [eax]
    4d4a:	01 59 a8             	add    DWORD PTR [ecx-0x58],ebx
    4d4d:	00 00                	add    BYTE PTR [eax],al
    4d4f:	00 01                	add    BYTE PTR [ecx],al
    4d51:	53                   	push   ebx
    4d52:	00 0a                	add    BYTE PTR [edx],cl
    4d54:	d1 0e                	ror    DWORD PTR [esi],1
    4d56:	00 00                	add    BYTE PTR [eax],al
    4d58:	01 76 a8             	add    DWORD PTR [esi-0x58],esi
    4d5b:	00 00                	add    BYTE PTR [eax],al
    4d5d:	00 94 3b 00 9f 1d 00 	add    BYTE PTR [ebx+edi*1+0x1d9f00],dl
    4d64:	00 00                	add    BYTE PTR [eax],al
    4d66:	01 9c 98 01 00 00 08 	add    DWORD PTR [eax+ebx*4+0x8000001],ebx
    4d6d:	ca 0e 00             	retf   0xe
    4d70:	00 01                	add    BYTE PTR [ecx],al
    4d72:	76 88                	jbe    4cfc <sysEnter_Vector-0x12b304>
    4d74:	00 00                	add    BYTE PTR [eax],al
    4d76:	00 02                	add    BYTE PTR [edx],al
    4d78:	91                   	xchg   ecx,eax
    4d79:	00 08                	add    BYTE PTR [eax],cl
    4d7b:	c7                   	(bad)  
    4d7c:	0e                   	push   cs
    4d7d:	00 00                	add    BYTE PTR [eax],al
    4d7f:	01 76 88             	add    DWORD PTR [esi-0x78],esi
    4d82:	00 00                	add    BYTE PTR [eax],al
    4d84:	00 02                	add    BYTE PTR [edx],al
    4d86:	91                   	xchg   ecx,eax
    4d87:	04 00                	add    al,0x0
    4d89:	0b 25 00 00 00 a8    	or     esp,DWORD PTR ds:0xa8000000
    4d8f:	01 00                	add    DWORD PTR [eax],eax
    4d91:	00 0c 9a             	add    BYTE PTR [edx+ebx*4],cl
    4d94:	00 00                	add    BYTE PTR [eax],al
    4d96:	00 65 00             	add    BYTE PTR [ebp+0x0],ah
    4d99:	0d c1 0e 00 00       	or     eax,0xec1
    4d9e:	01 19                	add    DWORD PTR [ecx],ebx
    4da0:	98                   	cwde   
    4da1:	01 00                	add    DWORD PTR [eax],eax
    4da3:	00 05 03 00 71 00    	add    BYTE PTR ds:0x710003,al
    4da9:	9f                   	lahf   
    4daa:	0e                   	push   cs
    4dab:	a3 00 00 00 03       	mov    ds:0x3000000,eax
    4db0:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
    4db3:	00 00                	add    BYTE PTR [eax],al
    4db5:	05 03 8c 72 00       	add    eax,0x728c03
    4dba:	9f                   	lahf   
    4dbb:	0e                   	push   cs
    4dbc:	34 01                	xor    al,0x1
    4dbe:	00 00                	add    BYTE PTR [eax],al
    4dc0:	03 3a                	add    edi,DWORD PTR [edx]
    4dc2:	56                   	push   esi
    4dc3:	00 00                	add    BYTE PTR [eax],al
    4dc5:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
    4dcb:	9f                   	lahf   
    4dcc:	0e                   	push   cs
    4dcd:	7b 00                	jnp    4dcf <sysEnter_Vector-0x12b231>
    4dcf:	00 00                	add    BYTE PTR [eax],al
    4dd1:	03 3b                	add    edi,DWORD PTR [ebx]
    4dd3:	56                   	push   esi
    4dd4:	00 00                	add    BYTE PTR [eax],al
    4dd6:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
    4ddc:	9f                   	lahf   
    4ddd:	0e                   	push   cs
    4dde:	7c 01                	jl     4de1 <sysEnter_Vector-0x12b21f>
    4de0:	00 00                	add    BYTE PTR [eax],al
    4de2:	03 3c 7a             	add    edi,DWORD PTR [edx+edi*2]
    4de5:	00 00                	add    BYTE PTR [eax],al
    4de7:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
    4ded:	9f                   	lahf   
    4dee:	0e                   	push   cs
    4def:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4df0:	00 00                	add    BYTE PTR [eax],al
    4df2:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    4df5:	0e                   	push   cs
    4df6:	02 00                	add    al,BYTE PTR [eax]
    4df8:	00 05 03 84 72 00    	add    BYTE PTR ds:0x728403,al
    4dfe:	9f                   	lahf   
    4dff:	05 04 6f 00 00       	add    eax,0x6f04
    4e04:	00 0e                	add    BYTE PTR [esi],cl
    4e06:	91                   	xchg   ecx,eax
    4e07:	00 00                	add    BYTE PTR [eax],al
    4e09:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    4e10:	05 03 80 72 00       	add    eax,0x728003
    4e15:	9f                   	lahf   
    4e16:	0e                   	push   cs
    4e17:	41                   	inc    ecx
    4e18:	00 00                	add    BYTE PTR [eax],al
    4e1a:	00 05 58 36 02 00    	add    BYTE PTR ds:0x23658,al
    4e20:	00 05 03 94 72 00    	add    BYTE PTR ds:0x729403,al
    4e26:	9f                   	lahf   
    4e27:	05 04 a8 00 00       	add    eax,0xa804
    4e2c:	00 00                	add    BYTE PTR [eax],al
    4e2e:	ef                   	out    dx,eax
    4e2f:	05 00 00 04 00       	add    eax,0x40000
    4e34:	62 17                	bound  edx,QWORD PTR [edi]
    4e36:	00 00                	add    BYTE PTR [eax],al
    4e38:	04 01                	add    al,0x1
    4e3a:	ac                   	lods   al,BYTE PTR ds:[esi]
    4e3b:	00 00                	add    BYTE PTR [eax],al
    4e3d:	00 0c d8             	add    BYTE PTR [eax+ebx*8],cl
    4e40:	0e                   	push   cs
    4e41:	00 00                	add    BYTE PTR [eax],al
    4e43:	1e                   	push   ds
    4e44:	00 00                	add    BYTE PTR [eax],al
    4e46:	00 b4 3b 00 9f 0e 0d 	add    BYTE PTR [ebx+edi*1+0xd0e9f00],dh
    4e4d:	00 00                	add    BYTE PTR [eax],al
    4e4f:	05 20 00 00 02       	add    eax,0x2000020
    4e54:	d1 03                	rol    DWORD PTR [ebx],1
    4e56:	00 00                	add    BYTE PTR [eax],al
    4e58:	04 19                	add    al,0x19
    4e5a:	01 00                	add    DWORD PTR [eax],eax
    4e5c:	00 07                	add    BYTE PTR [edi],al
    4e5e:	15 19 01 00 00       	adc    eax,0x119
    4e63:	03 71 03             	add    esi,DWORD PTR [ecx+0x3]
    4e66:	00 00                	add    BYTE PTR [eax],al
    4e68:	00 03                	add    BYTE PTR [ebx],al
    4e6a:	dd 04 00             	fld    QWORD PTR [eax+eax*1]
    4e6d:	00 01                	add    BYTE PTR [ecx],al
    4e6f:	03 d6                	add    edx,esi
    4e71:	02 00                	add    al,BYTE PTR [eax]
    4e73:	00 02                	add    BYTE PTR [edx],al
    4e75:	03 cf                	add    ecx,edi
    4e77:	04 00                	add    al,0x0
    4e79:	00 03                	add    BYTE PTR [ebx],al
    4e7b:	03 08                	add    ecx,DWORD PTR [eax]
    4e7d:	03 00                	add    eax,DWORD PTR [eax]
    4e7f:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    4e82:	f3 02 00             	repz add al,BYTE PTR [eax]
    4e85:	00 05 03 64 03 00    	add    BYTE PTR ds:0x36403,al
    4e8b:	00 0a                	add    BYTE PTR [edx],cl
    4e8d:	03 45 04             	add    eax,DWORD PTR [ebp+0x4]
    4e90:	00 00                	add    BYTE PTR [eax],al
    4e92:	0b 03                	or     eax,DWORD PTR [ebx]
    4e94:	81 03 00 00 0c 03    	add    DWORD PTR [ebx],0x30c0000
    4e9a:	b4 04                	mov    ah,0x4
    4e9c:	00 00                	add    BYTE PTR [eax],al
    4e9e:	0d 03 52 04 00       	or     eax,0x45203
    4ea3:	00 0e                	add    BYTE PTR [esi],cl
    4ea5:	03 a7 04 00 00 0f    	add    esp,DWORD PTR [edi+0xf000004]
    4eab:	03 3f                	add    edi,DWORD PTR [edi]
    4ead:	03 00                	add    eax,DWORD PTR [eax]
    4eaf:	00 10                	add    BYTE PTR [eax],dl
    4eb1:	03 5f 04             	add    ebx,DWORD PTR [edi+0x4]
    4eb4:	00 00                	add    BYTE PTR [eax],al
    4eb6:	4f                   	dec    edi
    4eb7:	03 f1                	add    esi,ecx
    4eb9:	03 00                	add    eax,DWORD PTR [eax]
    4ebb:	00 50 03             	add    BYTE PTR [eax+0x3],dl
    4ebe:	8a 04 00             	mov    al,BYTE PTR [eax+eax*1]
    4ec1:	00 59 03             	add    BYTE PTR [ecx+0x3],bl
    4ec4:	8b 02                	mov    eax,DWORD PTR [edx]
    4ec6:	00 00                	add    BYTE PTR [eax],al
    4ec8:	61                   	popa   
    4ec9:	03 0e                	add    ecx,DWORD PTR [esi]
    4ecb:	04 00                	add    al,0x0
    4ecd:	00 97 04 a6 03 00    	add    BYTE PTR [edi+0x3a604],dl
    4ed3:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    4ed6:	04 7d                	add    al,0x7d
    4ed8:	04 00                	add    al,0x0
    4eda:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    4ede:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    4ee1:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    4ee4:	04 af                	add    al,0xaf
    4ee6:	02 00                	add    al,BYTE PTR [eax]
    4ee8:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    4eeb:	04 2a                	add    al,0x2a
    4eed:	03 00                	add    eax,DWORD PTR [eax]
    4eef:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    4ef2:	04 1d                	add    al,0x1d
    4ef4:	03 00                	add    eax,DWORD PTR [eax]
    4ef6:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    4ef9:	04 f7                	add    al,0xf7
    4efb:	04 00                	add    al,0x0
    4efd:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    4f00:	04 9e                	add    al,0x9e
    4f02:	02 00                	add    al,BYTE PTR [eax]
    4f04:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    4f07:	04 e3                	add    al,0xe3
    4f09:	02 00                	add    al,BYTE PTR [eax]
    4f0b:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    4f0e:	04 c1                	add    al,0xc1
    4f10:	04 00                	add    al,0x0
    4f12:	00 00                	add    BYTE PTR [eax],al
    4f14:	03 04 6e             	add    eax,DWORD PTR [esi+ebp*2]
    4f17:	04 00                	add    al,0x0
    4f19:	00 01                	add    BYTE PTR [ecx],al
    4f1b:	03 04 bd 03 00 00 02 	add    eax,DWORD PTR [edi*4+0x2000003]
    4f22:	03 04 96             	add    eax,DWORD PTR [esi+edx*4]
    4f25:	03 00                	add    eax,DWORD PTR [eax]
    4f27:	00 03                	add    BYTE PTR [ebx],al
    4f29:	03 04 34             	add    eax,DWORD PTR [esp+esi*1]
    4f2c:	04 00                	add    al,0x0
    4f2e:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    4f31:	04 97                	add    al,0x97
    4f33:	04 00                	add    al,0x0
    4f35:	00 05 03 04 e2 03    	add    BYTE PTR ds:0x3e20403,al
    4f3b:	00 00                	add    BYTE PTR [eax],al
    4f3d:	06                   	push   es
    4f3e:	03 04 52             	add    eax,DWORD PTR [edx+edx*2]
    4f41:	03 00                	add    eax,DWORD PTR [eax]
    4f43:	00 00                	add    BYTE PTR [eax],al
    4f45:	09 00                	or     DWORD PTR [eax],eax
    4f47:	05 04 07 61 00       	add    eax,0x610704
    4f4c:	00 00                	add    BYTE PTR [eax],al
    4f4e:	06                   	push   es
    4f4f:	04 05                	add    al,0x5
    4f51:	69 6e 74 00 05 01 06 	imul   ebp,DWORD PTR [esi+0x74],0x6010500
    4f58:	8c 00                	mov    WORD PTR [eax],es
    4f5a:	00 00                	add    BYTE PTR [eax],al
    4f5c:	05 01 06 85 00       	add    eax,0x850601
    4f61:	00 00                	add    BYTE PTR [eax],al
    4f63:	05 02 05 72 01       	add    eax,0x1720502
    4f68:	00 00                	add    BYTE PTR [eax],al
    4f6a:	05 08 05 00 00       	add    eax,0x508
    4f6f:	00 00                	add    BYTE PTR [eax],al
    4f71:	05 01 08 83 00       	add    eax,0x830801
    4f76:	00 00                	add    BYTE PTR [eax],al
    4f78:	05 02 07 19 01       	add    eax,0x1190702
    4f7d:	00 00                	add    BYTE PTR [eax],al
    4f7f:	07                   	pop    es
    4f80:	0e                   	push   cs
    4f81:	00 00                	add    BYTE PTR [eax],al
    4f83:	00 02                	add    BYTE PTR [edx],al
    4f85:	34 19                	xor    al,0x19
    4f87:	01 00                	add    DWORD PTR [eax],eax
    4f89:	00 05 08 07 57 00    	add    BYTE PTR ds:0x570708,al
    4f8f:	00 00                	add    BYTE PTR [eax],al
    4f91:	07                   	pop    es
    4f92:	4d                   	dec    ebp
    4f93:	00 00                	add    BYTE PTR [eax],al
    4f95:	00 02                	add    BYTE PTR [edx],al
    4f97:	56                   	push   esi
    4f98:	19 01                	sbb    DWORD PTR [ecx],eax
    4f9a:	00 00                	add    BYTE PTR [eax],al
    4f9c:	05 04 05 05 00       	add    eax,0x50504
    4fa1:	00 00                	add    BYTE PTR [eax],al
    4fa3:	05 0c 04 66 01       	add    eax,0x166040c
    4fa8:	00 00                	add    BYTE PTR [eax],al
    4faa:	07                   	pop    es
    4fab:	7a 0f                	jp     4fbc <sysEnter_Vector-0x12b044>
    4fad:	00 00                	add    BYTE PTR [eax],al
    4faf:	03 2a                	add    ebp,DWORD PTR [edx]
    4fb1:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4fb2:	01 00                	add    DWORD PTR [eax],eax
    4fb4:	00 08                	add    BYTE PTR [eax],cl
    4fb6:	74 6d                	je     5025 <sysEnter_Vector-0x12afdb>
    4fb8:	00 2c 03             	add    BYTE PTR [ebx+eax*1],ch
    4fbb:	2c 17                	sub    al,0x17
    4fbd:	02 00                	add    al,BYTE PTR [eax]
    4fbf:	00 09                	add    BYTE PTR [ecx],cl
    4fc1:	bd 0f 00 00 03       	mov    ebp,0x300000f
    4fc6:	2e 20 01             	and    BYTE PTR cs:[ecx],al
    4fc9:	00 00                	add    BYTE PTR [eax],al
    4fcb:	00 09                	add    BYTE PTR [ecx],cl
    4fcd:	5b                   	pop    ebx
    4fce:	0f 00 00             	sldt   WORD PTR [eax]
    4fd1:	03 2f                	add    ebp,DWORD PTR [edi]
    4fd3:	20 01                	and    BYTE PTR [ecx],al
    4fd5:	00 00                	add    BYTE PTR [eax],al
    4fd7:	04 09                	add    al,0x9
    4fd9:	ed                   	in     eax,dx
    4fda:	0e                   	push   cs
    4fdb:	00 00                	add    BYTE PTR [eax],al
    4fdd:	03 30                	add    esi,DWORD PTR [eax]
    4fdf:	20 01                	and    BYTE PTR [ecx],al
    4fe1:	00 00                	add    BYTE PTR [eax],al
    4fe3:	08 09                	or     BYTE PTR [ecx],cl
    4fe5:	b5 0f                	mov    ch,0xf
    4fe7:	00 00                	add    BYTE PTR [eax],al
    4fe9:	03 31                	add    esi,DWORD PTR [ecx]
    4feb:	20 01                	and    BYTE PTR [ecx],al
    4fed:	00 00                	add    BYTE PTR [eax],al
    4fef:	0c 09                	or     al,0x9
    4ff1:	25 0f 00 00 03       	and    eax,0x300000f
    4ff6:	32 20                	xor    ah,BYTE PTR [eax]
    4ff8:	01 00                	add    DWORD PTR [eax],eax
    4ffa:	00 10                	add    BYTE PTR [eax],dl
    4ffc:	09 2c 0f             	or     DWORD PTR [edi+ecx*1],ebp
    4fff:	00 00                	add    BYTE PTR [eax],al
    5001:	03 33                	add    esi,DWORD PTR [ebx]
    5003:	20 01                	and    BYTE PTR [ecx],al
    5005:	00 00                	add    BYTE PTR [eax],al
    5007:	14 09                	adc    al,0x9
    5009:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    500a:	0f 00 00             	sldt   WORD PTR [eax]
    500d:	03 34 20             	add    esi,DWORD PTR [eax+eiz*1]
    5010:	01 00                	add    DWORD PTR [eax],eax
    5012:	00 18                	add    BYTE PTR [eax],bl
    5014:	09 62 0f             	or     DWORD PTR [edx+0xf],esp
    5017:	00 00                	add    BYTE PTR [eax],al
    5019:	03 35 20 01 00 00    	add    esi,DWORD PTR ds:0x120
    501f:	1c 09                	sbb    al,0x9
    5021:	42                   	inc    edx
    5022:	0f 00 00             	sldt   WORD PTR [eax]
    5025:	03 36                	add    esi,DWORD PTR [esi]
    5027:	20 01                	and    BYTE PTR [ecx],al
    5029:	00 00                	add    BYTE PTR [eax],al
    502b:	20 09                	and    BYTE PTR [ecx],cl
    502d:	9d                   	popf   
    502e:	0f 00 00             	sldt   WORD PTR [eax]
    5031:	03 37                	add    esi,DWORD PTR [edi]
    5033:	6e                   	outs   dx,BYTE PTR ds:[esi]
    5034:	01 00                	add    DWORD PTR [eax],eax
    5036:	00 24 09             	add    BYTE PTR [ecx+ecx*1],ah
    5039:	c4 0f                	les    ecx,FWORD PTR [edi]
    503b:	00 00                	add    BYTE PTR [eax],al
    503d:	03 38                	add    edi,DWORD PTR [eax]
    503f:	17                   	pop    ss
    5040:	02 00                	add    al,BYTE PTR [eax]
    5042:	00 28                	add    BYTE PTR [eax],ch
    5044:	00 0a                	add    BYTE PTR [edx],cl
    5046:	04 1d                	add    al,0x1d
    5048:	02 00                	add    al,BYTE PTR [eax]
    504a:	00 0b                	add    BYTE PTR [ebx],cl
    504c:	27                   	daa    
    504d:	01 00                	add    DWORD PTR [eax],eax
    504f:	00 05 01 02 13 01    	add    BYTE PTR ds:0x1130201,al
    5055:	00 00                	add    BYTE PTR [eax],al
    5057:	05 04 07 83 01       	add    eax,0x1830704
    505c:	00 00                	add    BYTE PTR [eax],al
    505e:	05 04 07 5c 00       	add    eax,0x5c0704
    5063:	00 00                	add    BYTE PTR [eax],al
    5065:	0a 04 27             	or     al,BYTE PTR [edi+eiz*1]
    5068:	01 00                	add    DWORD PTR [eax],eax
    506a:	00 0c f5 0e 00 00 01 	add    BYTE PTR [esi*8+0x100000e],cl
    5071:	17                   	pop    ss
    5072:	7c 01                	jl     5075 <sysEnter_Vector-0x12af8b>
    5074:	00 00                	add    BYTE PTR [eax],al
    5076:	b4 3b                	mov    ah,0x3b
    5078:	00 9f 44 00 00 00    	add    BYTE PTR [edi+0x44],bl
    507e:	01 9c 65 02 00 00 0d 	add    DWORD PTR [ebp+eiz*2+0xd000002],ebx
    5085:	06                   	push   es
    5086:	05 00 00 01 19       	add    eax,0x19010000
    508b:	51                   	push   ecx
    508c:	01 00                	add    DWORD PTR [eax],eax
    508e:	00 02                	add    BYTE PTR [edx],al
    5090:	91                   	xchg   ecx,eax
    5091:	6c                   	ins    BYTE PTR es:[edi],dx
    5092:	00 0e                	add    BYTE PTR [esi],cl
    5094:	51                   	push   ecx
    5095:	0f 00 00             	sldt   WORD PTR [eax]
    5098:	01 1f                	add    DWORD PTR [edi],ebx
    509a:	d3 02                	rol    DWORD PTR [edx],cl
    509c:	00 00                	add    BYTE PTR [eax],al
    509e:	f8                   	clc    
    509f:	3b 00                	cmp    eax,DWORD PTR [eax]
    50a1:	9f                   	lahf   
    50a2:	19 03                	sbb    DWORD PTR [ebx],eax
    50a4:	00 00                	add    BYTE PTR [eax],al
    50a6:	01 9c d3 02 00 00 0f 	add    DWORD PTR [ebx+edx*8+0xf000002],ebx
    50ad:	cc                   	int3   
    50ae:	0f 00 00             	sldt   WORD PTR [eax]
    50b1:	01 1f                	add    DWORD PTR [edi],ebx
    50b3:	d9 02                	fld    DWORD PTR [edx]
    50b5:	00 00                	add    BYTE PTR [eax],al
    50b7:	02 91 00 0f 74 0f    	add    dl,BYTE PTR [ecx+0xf740f00]
    50bd:	00 00                	add    BYTE PTR [eax],al
    50bf:	01 1f                	add    DWORD PTR [edi],ebx
    50c1:	d3 02                	rol    DWORD PTR [edx],cl
    50c3:	00 00                	add    BYTE PTR [eax],al
    50c5:	02 91 04 0d 42 05    	add    dl,BYTE PTR [ecx+0x5420d04]
    50cb:	00 00                	add    BYTE PTR [eax],al
    50cd:	01 21                	add    DWORD PTR [ecx],esp
    50cf:	7c 01                	jl     50d2 <sysEnter_Vector-0x12af2e>
    50d1:	00 00                	add    BYTE PTR [eax],al
    50d3:	02 91 68 0d 8d 0f    	add    dl,BYTE PTR [ecx+0xf8d0d68]
    50d9:	00 00                	add    BYTE PTR [eax],al
    50db:	01 22                	add    DWORD PTR [edx],esp
    50dd:	30 02                	xor    BYTE PTR [edx],al
    50df:	00 00                	add    BYTE PTR [eax],al
    50e1:	02 91 64 0d 4b 0f    	add    dl,BYTE PTR [ecx+0xf4b0d64]
    50e7:	00 00                	add    BYTE PTR [eax],al
    50e9:	01 22                	add    DWORD PTR [edx],esp
    50eb:	30 02                	xor    BYTE PTR [edx],al
    50ed:	00 00                	add    BYTE PTR [eax],al
    50ef:	02 91 70 0d 2f 0f    	add    dl,BYTE PTR [ecx+0xf2f0d70]
    50f5:	00 00                	add    BYTE PTR [eax],al
    50f7:	01 23                	add    DWORD PTR [ebx],esp
    50f9:	20 01                	and    BYTE PTR [ecx],al
    50fb:	00 00                	add    BYTE PTR [eax],al
    50fd:	02 91 6c 00 0a 04    	add    dl,BYTE PTR [ecx+0x40a006c]
    5103:	87 01                	xchg   DWORD PTR [ecx],eax
    5105:	00 00                	add    BYTE PTR [eax],al
    5107:	0a 04 df             	or     al,BYTE PTR [edi+ebx*8]
    510a:	02 00                	add    al,BYTE PTR [eax]
    510c:	00 0b                	add    BYTE PTR [ebx],cl
    510e:	7c 01                	jl     5111 <sysEnter_Vector-0x12aeef>
    5110:	00 00                	add    BYTE PTR [eax],al
    5112:	10 10                	adc    BYTE PTR [eax],dl
    5114:	0f 00 00             	sldt   WORD PTR [eax]
    5117:	01 3c d3             	add    DWORD PTR [ebx+edx*8],edi
    511a:	02 00                	add    al,BYTE PTR [eax]
    511c:	00 11                	add    BYTE PTR [ecx],dl
    511e:	3f                   	aas    
    511f:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    5125:	01 9c 1a 03 00 00 0f 	add    DWORD PTR [edx+ebx*1+0xf000003],ebx
    512c:	cc                   	int3   
    512d:	0f 00 00             	sldt   WORD PTR [eax]
    5130:	01 3c d9             	add    DWORD PTR [ecx+ebx*8],edi
    5133:	02 00                	add    al,BYTE PTR [eax]
    5135:	00 02                	add    BYTE PTR [edx],al
    5137:	91                   	xchg   ecx,eax
    5138:	00 0f                	add    BYTE PTR [edi],cl
    513a:	74 0f                	je     514b <sysEnter_Vector-0x12aeb5>
    513c:	00 00                	add    BYTE PTR [eax],al
    513e:	01 3c d3             	add    DWORD PTR [ebx+edx*8],edi
    5141:	02 00                	add    al,BYTE PTR [eax]
    5143:	00 02                	add    BYTE PTR [edx],al
    5145:	91                   	xchg   ecx,eax
    5146:	04 00                	add    al,0x0
    5148:	10 e3                	adc    bl,ah
    514a:	0e                   	push   cs
    514b:	00 00                	add    BYTE PTR [eax],al
    514d:	01 41 d3             	add    DWORD PTR [ecx-0x2d],eax
    5150:	02 00                	add    al,BYTE PTR [eax]
    5152:	00 2e                	add    BYTE PTR [esi],ch
    5154:	3f                   	aas    
    5155:	00 9f 3d 00 00 00    	add    BYTE PTR [edi+0x3d],bl
    515b:	01 9c 4e 03 00 00 0f 	add    DWORD PTR [esi+ecx*2+0xf000003],ebx
    5162:	cc                   	int3   
    5163:	0f 00 00             	sldt   WORD PTR [eax]
    5166:	01 41 d9             	add    DWORD PTR [ecx-0x27],eax
    5169:	02 00                	add    al,BYTE PTR [eax]
    516b:	00 02                	add    BYTE PTR [edx],al
    516d:	91                   	xchg   ecx,eax
    516e:	00 11                	add    BYTE PTR [ecx],dl
    5170:	74 00                	je     5172 <sysEnter_Vector-0x12ae8e>
    5172:	01 42 7c             	add    DWORD PTR [edx+0x7c],eax
    5175:	01 00                	add    DWORD PTR [eax],eax
    5177:	00 02                	add    BYTE PTR [edx],al
    5179:	91                   	xchg   ecx,eax
    517a:	74 00                	je     517c <sysEnter_Vector-0x12ae84>
    517c:	10 d2                	adc    dl,dl
    517e:	0f 00 00             	sldt   WORD PTR [eax]
    5181:	01 48 d3             	add    DWORD PTR [eax-0x2d],ecx
    5184:	02 00                	add    al,BYTE PTR [eax]
    5186:	00 6b 3f             	add    BYTE PTR [ebx+0x3f],ch
    5189:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
    518f:	01 9c 90 03 00 00 0f 	add    DWORD PTR [eax+edx*4+0xf000003],ebx
    5196:	cc                   	int3   
    5197:	0f 00 00             	sldt   WORD PTR [eax]
    519a:	01 48 d9             	add    DWORD PTR [eax-0x27],ecx
    519d:	02 00                	add    al,BYTE PTR [eax]
    519f:	00 02                	add    BYTE PTR [edx],al
    51a1:	91                   	xchg   ecx,eax
    51a2:	00 0f                	add    BYTE PTR [edi],cl
    51a4:	74 0f                	je     51b5 <sysEnter_Vector-0x12ae4b>
    51a6:	00 00                	add    BYTE PTR [eax],al
    51a8:	01 48 d3             	add    DWORD PTR [eax-0x2d],ecx
    51ab:	02 00                	add    al,BYTE PTR [eax]
    51ad:	00 02                	add    BYTE PTR [edx],al
    51af:	91                   	xchg   ecx,eax
    51b0:	04 11                	add    al,0x11
    51b2:	74 00                	je     51b4 <sysEnter_Vector-0x12ae4c>
    51b4:	01 4a 7c             	add    DWORD PTR [edx+0x7c],ecx
    51b7:	01 00                	add    DWORD PTR [eax],eax
    51b9:	00 02                	add    BYTE PTR [edx],al
    51bb:	91                   	xchg   ecx,eax
    51bc:	74 00                	je     51be <sysEnter_Vector-0x12ae42>
    51be:	10 81 0f 00 00 01    	adc    BYTE PTR [ecx+0x100000f],al
    51c4:	50                   	push   eax
    51c5:	d3 02                	rol    DWORD PTR [edx],cl
    51c7:	00 00                	add    BYTE PTR [eax],al
    51c9:	a0 3f 00 9f 1d       	mov    al,ds:0x1d9f003f
    51ce:	00 00                	add    BYTE PTR [eax],al
    51d0:	00 01                	add    BYTE PTR [ecx],al
    51d2:	9c                   	pushf  
    51d3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
    51d6:	00 0f                	add    BYTE PTR [edi],cl
    51d8:	cc                   	int3   
    51d9:	0f 00 00             	sldt   WORD PTR [eax]
    51dc:	01 50 d9             	add    DWORD PTR [eax-0x27],edx
    51df:	02 00                	add    al,BYTE PTR [eax]
    51e1:	00 02                	add    BYTE PTR [edx],al
    51e3:	91                   	xchg   ecx,eax
    51e4:	00 0f                	add    BYTE PTR [edi],cl
    51e6:	74 0f                	je     51f7 <sysEnter_Vector-0x12ae09>
    51e8:	00 00                	add    BYTE PTR [eax],al
    51ea:	01 50 d3             	add    DWORD PTR [eax-0x2d],edx
    51ed:	02 00                	add    al,BYTE PTR [eax]
    51ef:	00 02                	add    BYTE PTR [edx],al
    51f1:	91                   	xchg   ecx,eax
    51f2:	04 00                	add    al,0x0
    51f4:	0e                   	push   cs
    51f5:	96                   	xchg   esi,eax
    51f6:	0f 00 00             	sldt   WORD PTR [eax]
    51f9:	01 54 7c 01          	add    DWORD PTR [esp+edi*2+0x1],edx
    51fd:	00 00                	add    BYTE PTR [eax],al
    51ff:	bd 3f 00 9f 57       	mov    ebp,0x579f003f
    5204:	08 00                	or     BYTE PTR [eax],al
    5206:	00 01                	add    BYTE PTR [ecx],al
    5208:	9c                   	pushf  
    5209:	5e                   	pop    esi
    520a:	04 00                	add    al,0x0
    520c:	00 0f                	add    BYTE PTR [edi],cl
    520e:	74 0f                	je     521f <sysEnter_Vector-0x12ade1>
    5210:	00 00                	add    BYTE PTR [eax],al
    5212:	01 54 d3 02          	add    DWORD PTR [ebx+edx*8+0x2],edx
    5216:	00 00                	add    BYTE PTR [eax],al
    5218:	02 91 00 11 64 61    	add    dl,BYTE PTR [ecx+0x61641100]
    521e:	79 00                	jns    5220 <sysEnter_Vector-0x12ade0>
    5220:	01 55 6e             	add    DWORD PTR [ebp+0x6e],edx
    5223:	01 00                	add    DWORD PTR [eax],eax
    5225:	00 02                	add    BYTE PTR [edx],al
    5227:	91                   	xchg   ecx,eax
    5228:	68 0d 2f 0f 00       	push   0xf2f0d
    522d:	00 01                	add    BYTE PTR [ecx],al
    522f:	55                   	push   ebp
    5230:	6e                   	outs   dx,BYTE PTR ds:[esi]
    5231:	01 00                	add    DWORD PTR [eax],eax
    5233:	00 02                	add    BYTE PTR [edx],al
    5235:	91                   	xchg   ecx,eax
    5236:	54                   	push   esp
    5237:	0d 2c 0f 00 00       	or     eax,0xf2c
    523c:	01 56 20             	add    DWORD PTR [esi+0x20],edx
    523f:	01 00                	add    DWORD PTR [eax],eax
    5241:	00 02                	add    BYTE PTR [edx],al
    5243:	91                   	xchg   ecx,eax
    5244:	4c                   	dec    esp
    5245:	0d 65 0f 00 00       	or     eax,0xf65
    524a:	01 57 20             	add    DWORD PTR [edi+0x20],edx
    524d:	01 00                	add    DWORD PTR [eax],eax
    524f:	00 02                	add    BYTE PTR [edx],al
    5251:	91                   	xchg   ecx,eax
    5252:	64                   	fs
    5253:	0d 34 0f 00 00       	or     eax,0xf34
    5258:	01 57 20             	add    DWORD PTR [edi+0x20],edx
    525b:	01 00                	add    DWORD PTR [eax],eax
    525d:	00 02                	add    BYTE PTR [edx],al
    525f:	91                   	xchg   ecx,eax
    5260:	60                   	pusha  
    5261:	0d 08 09 00 00       	or     eax,0x908
    5266:	01 58 6e             	add    DWORD PTR [eax+0x6e],ebx
    5269:	01 00                	add    DWORD PTR [eax],eax
    526b:	00 02                	add    BYTE PTR [edx],al
    526d:	91                   	xchg   ecx,eax
    526e:	50                   	push   eax
    526f:	0d ef 0f 00 00       	or     eax,0xfef
    5274:	01 59 20             	add    DWORD PTR [ecx+0x20],ebx
    5277:	01 00                	add    DWORD PTR [eax],eax
    5279:	00 02                	add    BYTE PTR [edx],al
    527b:	91                   	xchg   ecx,eax
    527c:	5c                   	pop    esp
    527d:	11 64 73 74          	adc    DWORD PTR [ebx+esi*2+0x74],esp
    5281:	00 01                	add    BYTE PTR [ecx],al
    5283:	5a                   	pop    edx
    5284:	6e                   	outs   dx,BYTE PTR ds:[esi]
    5285:	01 00                	add    DWORD PTR [eax],eax
    5287:	00 02                	add    BYTE PTR [edx],al
    5289:	91                   	xchg   ecx,eax
    528a:	58                   	pop    eax
    528b:	00 10                	add    BYTE PTR [eax],dl
    528d:	3a 0f                	cmp    cl,BYTE PTR [edi]
    528f:	00 00                	add    BYTE PTR [eax],al
    5291:	01 bf d3 02 00 00    	add    DWORD PTR [edi+0x2d3],edi
    5297:	14 48                	adc    al,0x48
    5299:	00 9f 6d 00 00 00    	add    BYTE PTR [edi+0x6d],bl
    529f:	01 9c a2 04 00 00 0f 	add    DWORD PTR [edx+eiz*4+0xf000004],ebx
    52a6:	42                   	inc    edx
    52a7:	05 00 00 01 bf       	add    eax,0xbf010000
    52ac:	d3 02                	rol    DWORD PTR [edx],cl
    52ae:	00 00                	add    BYTE PTR [eax],al
    52b0:	02 91 00 0f 6a 0f    	add    dl,BYTE PTR [ecx+0xf6a0f00]
    52b6:	00 00                	add    BYTE PTR [eax],al
    52b8:	01 bf 22 02 00 00    	add    DWORD PTR [edi+0x222],edi
    52be:	02 91 5c 0d f8 0e    	add    dl,BYTE PTR [ecx+0xef80d5c]
    52c4:	00 00                	add    BYTE PTR [eax],al
    52c6:	01 c1                	add    ecx,eax
    52c8:	7c 01                	jl     52cb <sysEnter_Vector-0x12ad35>
    52ca:	00 00                	add    BYTE PTR [eax],al
    52cc:	02 91 6c 00 10 42    	add    dl,BYTE PTR [ecx+0x4210006c]
    52d2:	05 00 00 01 ca       	add    eax,0xca010000
    52d7:	7c 01                	jl     52da <sysEnter_Vector-0x12ad26>
    52d9:	00 00                	add    BYTE PTR [eax],al
    52db:	81 48 00 9f 41 00 00 	or     DWORD PTR [eax+0x0],0x419f
    52e2:	00 01                	add    BYTE PTR [ecx],al
    52e4:	9c                   	pushf  
    52e5:	d8 04 00             	fadd   DWORD PTR [eax+eax*1]
    52e8:	00 0f                	add    BYTE PTR [edi],cl
    52ea:	e8 0f 00 00 01       	call   10052fe <sysEnter_Vector+0xed52fe>
    52ef:	ca d8 04             	retf   0x4d8
    52f2:	00 00                	add    BYTE PTR [eax],al
    52f4:	02 91 00 0d f8 0e    	add    dl,BYTE PTR [ecx+0xef80d00]
    52fa:	00 00                	add    BYTE PTR [eax],al
    52fc:	01 cc                	add    esp,ecx
    52fe:	51                   	push   ecx
    52ff:	01 00                	add    DWORD PTR [eax],eax
    5301:	00 02                	add    BYTE PTR [edx],al
    5303:	91                   	xchg   ecx,eax
    5304:	6c                   	ins    BYTE PTR es:[edi],dx
    5305:	00 0a                	add    BYTE PTR [edx],cl
    5307:	04 7c                	add    al,0x7c
    5309:	01 00                	add    DWORD PTR [eax],eax
    530b:	00 12                	add    BYTE PTR [edx],dl
    530d:	a3 00 00 00 04       	mov    ds:0x4000000,eax
    5312:	39 51 01             	cmp    DWORD PTR [ecx+0x1],edx
    5315:	00 00                	add    BYTE PTR [eax],al
    5317:	05 03 8c 72 00       	add    eax,0x728c03
    531c:	9f                   	lahf   
    531d:	12 34 01             	adc    dh,BYTE PTR [ecx+eax*1]
    5320:	00 00                	add    BYTE PTR [eax],al
    5322:	04 3a                	add    al,0x3a
    5324:	51                   	push   ecx
    5325:	01 00                	add    DWORD PTR [eax],eax
    5327:	00 05 03 90 72 00    	add    BYTE PTR ds:0x729003,al
    532d:	9f                   	lahf   
    532e:	12 7b 00             	adc    bh,BYTE PTR [ebx+0x0]
    5331:	00 00                	add    BYTE PTR [eax],al
    5333:	04 3b                	add    al,0x3b
    5335:	51                   	push   ecx
    5336:	01 00                	add    DWORD PTR [eax],eax
    5338:	00 05 03 88 72 00    	add    BYTE PTR ds:0x728803,al
    533e:	9f                   	lahf   
    533f:	12 7c 01 00          	adc    bh,BYTE PTR [ecx+eax*1+0x0]
    5343:	00 04 3c             	add    BYTE PTR [esp+edi*1],al
    5346:	6e                   	outs   dx,BYTE PTR ds:[esi]
    5347:	01 00                	add    DWORD PTR [eax],eax
    5349:	00 05 03 98 72 00    	add    BYTE PTR ds:0x729803,al
    534f:	9f                   	lahf   
    5350:	12 6e 00             	adc    ch,BYTE PTR [esi+0x0]
    5353:	00 00                	add    BYTE PTR [eax],al
    5355:	05 34 33 05 00       	add    eax,0x53334
    535a:	00 05 03 84 72 00    	add    BYTE PTR ds:0x728403,al
    5360:	9f                   	lahf   
    5361:	0a 04 63             	or     al,BYTE PTR [ebx+eiz*2]
    5364:	01 00                	add    DWORD PTR [eax],eax
    5366:	00 12                	add    BYTE PTR [edx],dl
    5368:	91                   	xchg   ecx,eax
    5369:	00 00                	add    BYTE PTR [eax],al
    536b:	00 05 35 51 01 00    	add    BYTE PTR ds:0x15135,al
    5371:	00 05 03 80 72 00    	add    BYTE PTR ds:0x728003,al
    5377:	9f                   	lahf   
    5378:	12 41 00             	adc    al,BYTE PTR [ecx+0x0]
    537b:	00 00                	add    BYTE PTR [eax],al
    537d:	06                   	push   es
    537e:	58                   	pop    eax
    537f:	5b                   	pop    ebx
    5380:	05 00 00 05 03       	add    eax,0x3050000
    5385:	94                   	xchg   esp,eax
    5386:	72 00                	jb     5388 <sysEnter_Vector-0x12ac78>
    5388:	9f                   	lahf   
    5389:	0a 04 37             	or     al,BYTE PTR [edi+esi*1]
    538c:	02 00                	add    al,BYTE PTR [eax]
    538e:	00 12                	add    BYTE PTR [edx],dl
    5390:	fe 0e                	dec    BYTE PTR [esi]
    5392:	00 00                	add    BYTE PTR [eax],al
    5394:	01 0c 20             	add    DWORD PTR [eax+eiz*1],ecx
    5397:	01 00                	add    DWORD PTR [eax],eax
    5399:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
    539f:	9f                   	lahf   
    53a0:	12 df                	adc    bl,bh
    53a2:	0f 00 00             	sldt   WORD PTR [eax]
    53a5:	01 0d 6e 01 00 00    	add    DWORD PTR ds:0x16e,ecx
    53ab:	05 03 d8 72 00       	add    eax,0x72d803
    53b0:	9f                   	lahf   
    53b1:	13 37                	adc    esi,DWORD PTR [edi]
    53b3:	02 00                	add    al,BYTE PTR [eax]
    53b5:	00 93 05 00 00 14    	add    BYTE PTR [ebx+0x14000005],dl
    53bb:	29 02                	sub    DWORD PTR [edx],eax
    53bd:	00 00                	add    BYTE PTR [eax],al
    53bf:	01 00                	add    DWORD PTR [eax],eax
    53c1:	12 08                	adc    cl,BYTE PTR [eax]
    53c3:	0f 00 00             	sldt   WORD PTR [eax]
    53c6:	01 0e                	add    DWORD PTR [esi],ecx
    53c8:	83 05 00 00 05 03 78 	add    DWORD PTR ds:0x3050000,0x78
    53cf:	72 00                	jb     53d1 <sysEnter_Vector-0x12ac2f>
    53d1:	9f                   	lahf   
    53d2:	12 19                	adc    bl,BYTE PTR [ecx]
    53d4:	0f 00 00             	sldt   WORD PTR [eax]
    53d7:	01 0f                	add    DWORD PTR [edi],ecx
    53d9:	20 01                	and    BYTE PTR [ecx],al
    53db:	00 00                	add    BYTE PTR [eax],al
    53dd:	05 03 e0 72 00       	add    eax,0x72e003
    53e2:	9f                   	lahf   
    53e3:	12 74 0f 00          	adc    dh,BYTE PTR [edi+ecx*1+0x0]
    53e7:	00 01                	add    BYTE PTR [ecx],al
    53e9:	10 87 01 00 00 05    	adc    BYTE PTR [edi+0x5000001],al
    53ef:	03 00                	add    eax,DWORD PTR [eax]
    53f1:	73 00                	jae    53f3 <sysEnter_Vector-0x12ac0d>
    53f3:	9f                   	lahf   
    53f4:	13 20                	adc    esp,DWORD PTR [eax]
    53f6:	01 00                	add    DWORD PTR [eax],eax
    53f8:	00 dc                	add    ah,bl
    53fa:	05 00 00 14 29       	add    eax,0x29140000
    53ff:	02 00                	add    al,BYTE PTR [eax]
    5401:	00 01                	add    BYTE PTR [ecx],al
    5403:	14 29                	adc    al,0x29
    5405:	02 00                	add    al,BYTE PTR [eax]
    5407:	00 0b                	add    BYTE PTR [ebx],cl
    5409:	00 12                	add    BYTE PTR [edx],dl
    540b:	af                   	scas   eax,DWORD PTR es:[edi]
    540c:	0f 00 00             	sldt   WORD PTR [eax]
    540f:	01 12                	add    DWORD PTR [edx],edx
    5411:	ed                   	in     eax,dx
    5412:	05 00 00 05 03       	add    eax,0x3050000
    5417:	60                   	pusha  
    5418:	6f                   	outs   dx,DWORD PTR ds:[esi]
    5419:	00 9f 0b c6 05 00    	add    BYTE PTR [edi+0x5c60b],bl
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	01 11                	add    DWORD PTR [ecx],edx
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
       b:	11 01                	adc    DWORD PTR [ecx],eax
       d:	12 06                	adc    al,BYTE PTR [esi]
       f:	10 17                	adc    BYTE PTR [edi],dl
      11:	00 00                	add    BYTE PTR [eax],al
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      1b:	0e                   	push   cs
      1c:	00 00                	add    BYTE PTR [eax],al
      1e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      26:	08 00                	or     BYTE PTR [eax],al
      28:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      2b:	00 03                	add    BYTE PTR [ebx],al
      2d:	0e                   	push   cs
      2e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      30:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      32:	49                   	dec    ecx
      33:	13 00                	adc    eax,DWORD PTR [eax]
      35:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      3b:	49                   	dec    ecx
      3c:	13 00                	adc    eax,DWORD PTR [eax]
      3e:	00 06                	add    BYTE PTR [esi],al
      40:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
      44:	00 00                	add    BYTE PTR [eax],al
      46:	07                   	pop    es
      47:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      4a:	19 03                	sbb    DWORD PTR [ebx],eax
      4c:	0e                   	push   cs
      4d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      4f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      51:	27                   	daa    
      52:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      55:	11 01                	adc    DWORD PTR [ecx],eax
      57:	12 06                	adc    al,BYTE PTR [esi]
      59:	40                   	inc    eax
      5a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      60:	00 00                	add    BYTE PTR [eax],al
      62:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
      68:	0b 3b                	or     edi,DWORD PTR [ebx]
      6a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      6d:	02 18                	add    bl,BYTE PTR [eax]
      6f:	00 00                	add    BYTE PTR [eax],al
      71:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
      74:	03 0e                	add    ecx,DWORD PTR [esi]
      76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      7a:	49                   	dec    ecx
      7b:	13 3f                	adc    edi,DWORD PTR [edi]
      7d:	19 02                	sbb    DWORD PTR [edx],eax
      7f:	18 00                	sbb    BYTE PTR [eax],al
      81:	00 00                	add    BYTE PTR [eax],al
      83:	01 11                	add    DWORD PTR [ecx],edx
      85:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      8b:	0e                   	push   cs
      8c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      8e:	11 01                	adc    DWORD PTR [ecx],eax
      90:	12 06                	adc    al,BYTE PTR [esi]
      92:	10 17                	adc    BYTE PTR [edi],dl
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      99:	0b 0b                	or     ecx,DWORD PTR [ebx]
      9b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      9e:	0e                   	push   cs
      9f:	00 00                	add    BYTE PTR [eax],al
      a1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      a4:	0b 0b                	or     ecx,DWORD PTR [ebx]
      a6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      a9:	08 00                	or     BYTE PTR [eax],al
      ab:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      ae:	00 03                	add    BYTE PTR [ebx],al
      b0:	0e                   	push   cs
      b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      b5:	49                   	dec    ecx
      b6:	13 00                	adc    eax,DWORD PTR [eax]
      b8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      be:	49                   	dec    ecx
      bf:	13 00                	adc    eax,DWORD PTR [eax]
      c1:	00 06                	add    BYTE PTR [esi],al
      c3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      c6:	19 03                	sbb    DWORD PTR [ebx],eax
      c8:	0e                   	push   cs
      c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      cd:	27                   	daa    
      ce:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      d1:	11 01                	adc    DWORD PTR [ecx],eax
      d3:	12 06                	adc    al,BYTE PTR [esi]
      d5:	40                   	inc    eax
      d6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      dc:	00 00                	add    BYTE PTR [eax],al
      de:	07                   	pop    es
      df:	05 00 03 0e 3a       	add    eax,0x3a0e0300
      e4:	0b 3b                	or     edi,DWORD PTR [ebx]
      e6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      e9:	02 18                	add    bl,BYTE PTR [eax]
      eb:	00 00                	add    BYTE PTR [eax],al
      ed:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
      f0:	03 08                	add    ecx,DWORD PTR [eax]
      f2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      f4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      f6:	49                   	dec    ecx
      f7:	13 02                	adc    eax,DWORD PTR [edx]
      f9:	18 00                	sbb    BYTE PTR [eax],al
      fb:	00 09                	add    BYTE PTR [ecx],cl
      fd:	34 00                	xor    al,0x0
      ff:	03 0e                	add    ecx,DWORD PTR [esi]
     101:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     103:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     105:	49                   	dec    ecx
     106:	13 3f                	adc    edi,DWORD PTR [edi]
     108:	19 02                	sbb    DWORD PTR [edx],eax
     10a:	18 00                	sbb    BYTE PTR [eax],al
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	01 11                	add    DWORD PTR [ecx],edx
     110:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     116:	0e                   	push   cs
     117:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     119:	11 01                	adc    DWORD PTR [ecx],eax
     11b:	12 06                	adc    al,BYTE PTR [esi]
     11d:	10 17                	adc    BYTE PTR [edi],dl
     11f:	00 00                	add    BYTE PTR [eax],al
     121:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     124:	0b 0b                	or     ecx,DWORD PTR [ebx]
     126:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     129:	0e                   	push   cs
     12a:	00 00                	add    BYTE PTR [eax],al
     12c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     12f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     131:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     134:	08 00                	or     BYTE PTR [eax],al
     136:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     139:	00 03                	add    BYTE PTR [ebx],al
     13b:	0e                   	push   cs
     13c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     13e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     140:	49                   	dec    ecx
     141:	13 00                	adc    eax,DWORD PTR [eax]
     143:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     149:	49                   	dec    ecx
     14a:	13 00                	adc    eax,DWORD PTR [eax]
     14c:	00 06                	add    BYTE PTR [esi],al
     14e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     151:	19 03                	sbb    DWORD PTR [ebx],eax
     153:	0e                   	push   cs
     154:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     156:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     158:	27                   	daa    
     159:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     15c:	11 01                	adc    DWORD PTR [ecx],eax
     15e:	12 06                	adc    al,BYTE PTR [esi]
     160:	40                   	inc    eax
     161:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     167:	00 00                	add    BYTE PTR [eax],al
     169:	07                   	pop    es
     16a:	05 00 03 08 3a       	add    eax,0x3a080300
     16f:	0b 3b                	or     edi,DWORD PTR [ebx]
     171:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     174:	02 18                	add    bl,BYTE PTR [eax]
     176:	00 00                	add    BYTE PTR [eax],al
     178:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     17e:	0b 3b                	or     edi,DWORD PTR [ebx]
     180:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     183:	02 18                	add    bl,BYTE PTR [eax]
     185:	00 00                	add    BYTE PTR [eax],al
     187:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     18a:	03 0e                	add    ecx,DWORD PTR [esi]
     18c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     18e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     190:	49                   	dec    ecx
     191:	13 02                	adc    eax,DWORD PTR [edx]
     193:	18 00                	sbb    BYTE PTR [eax],al
     195:	00 0a                	add    BYTE PTR [edx],cl
     197:	34 00                	xor    al,0x0
     199:	03 08                	add    ecx,DWORD PTR [eax]
     19b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     19d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     19f:	49                   	dec    ecx
     1a0:	13 02                	adc    eax,DWORD PTR [edx]
     1a2:	18 00                	sbb    BYTE PTR [eax],al
     1a4:	00 0b                	add    BYTE PTR [ebx],cl
     1a6:	34 00                	xor    al,0x0
     1a8:	03 0e                	add    ecx,DWORD PTR [esi]
     1aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1ae:	49                   	dec    ecx
     1af:	13 3f                	adc    edi,DWORD PTR [edi]
     1b1:	19 02                	sbb    DWORD PTR [edx],eax
     1b3:	18 00                	sbb    BYTE PTR [eax],al
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	01 11                	add    DWORD PTR [ecx],edx
     1b9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     1bf:	0e                   	push   cs
     1c0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     1c2:	11 01                	adc    DWORD PTR [ecx],eax
     1c4:	12 06                	adc    al,BYTE PTR [esi]
     1c6:	10 17                	adc    BYTE PTR [edi],dl
     1c8:	00 00                	add    BYTE PTR [eax],al
     1ca:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     1cd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1cf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1d2:	0e                   	push   cs
     1d3:	00 00                	add    BYTE PTR [eax],al
     1d5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     1d8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1da:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1dd:	08 00                	or     BYTE PTR [eax],al
     1df:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     1e2:	00 03                	add    BYTE PTR [ebx],al
     1e4:	0e                   	push   cs
     1e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1e9:	49                   	dec    ecx
     1ea:	13 00                	adc    eax,DWORD PTR [eax]
     1ec:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     1f2:	49                   	dec    ecx
     1f3:	13 00                	adc    eax,DWORD PTR [eax]
     1f5:	00 06                	add    BYTE PTR [esi],al
     1f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     1fa:	19 03                	sbb    DWORD PTR [ebx],eax
     1fc:	0e                   	push   cs
     1fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     201:	27                   	daa    
     202:	19 11                	sbb    DWORD PTR [ecx],edx
     204:	01 12                	add    DWORD PTR [edx],edx
     206:	06                   	push   es
     207:	40                   	inc    eax
     208:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     20e:	00 00                	add    BYTE PTR [eax],al
     210:	07                   	pop    es
     211:	05 00 03 08 3a       	add    eax,0x3a080300
     216:	0b 3b                	or     edi,DWORD PTR [ebx]
     218:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     21b:	02 18                	add    bl,BYTE PTR [eax]
     21d:	00 00                	add    BYTE PTR [eax],al
     21f:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     222:	03 08                	add    ecx,DWORD PTR [eax]
     224:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     226:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     228:	49                   	dec    ecx
     229:	13 02                	adc    eax,DWORD PTR [edx]
     22b:	18 00                	sbb    BYTE PTR [eax],al
     22d:	00 09                	add    BYTE PTR [ecx],cl
     22f:	34 00                	xor    al,0x0
     231:	03 0e                	add    ecx,DWORD PTR [esi]
     233:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     235:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     237:	49                   	dec    ecx
     238:	13 02                	adc    eax,DWORD PTR [edx]
     23a:	18 00                	sbb    BYTE PTR [eax],al
     23c:	00 0a                	add    BYTE PTR [edx],cl
     23e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     241:	19 03                	sbb    DWORD PTR [ebx],eax
     243:	0e                   	push   cs
     244:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     246:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     248:	27                   	daa    
     249:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     24c:	11 01                	adc    DWORD PTR [ecx],eax
     24e:	12 06                	adc    al,BYTE PTR [esi]
     250:	40                   	inc    eax
     251:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     257:	00 00                	add    BYTE PTR [eax],al
     259:	0b 0b                	or     ecx,DWORD PTR [ebx]
     25b:	01 11                	add    DWORD PTR [ecx],edx
     25d:	01 12                	add    DWORD PTR [edx],edx
     25f:	06                   	push   es
     260:	00 00                	add    BYTE PTR [eax],al
     262:	0c 34                	or     al,0x34
     264:	00 03                	add    BYTE PTR [ebx],al
     266:	0e                   	push   cs
     267:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     269:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     26b:	49                   	dec    ecx
     26c:	13 3f                	adc    edi,DWORD PTR [edi]
     26e:	19 02                	sbb    DWORD PTR [edx],eax
     270:	18 00                	sbb    BYTE PTR [eax],al
     272:	00 00                	add    BYTE PTR [eax],al
     274:	01 11                	add    DWORD PTR [ecx],edx
     276:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     27c:	0e                   	push   cs
     27d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     27f:	11 01                	adc    DWORD PTR [ecx],eax
     281:	12 06                	adc    al,BYTE PTR [esi]
     283:	10 17                	adc    BYTE PTR [edi],dl
     285:	00 00                	add    BYTE PTR [eax],al
     287:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     28a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     28c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     28f:	0e                   	push   cs
     290:	00 00                	add    BYTE PTR [eax],al
     292:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     295:	0b 0b                	or     ecx,DWORD PTR [ebx]
     297:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     29a:	08 00                	or     BYTE PTR [eax],al
     29c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     29f:	00 03                	add    BYTE PTR [ebx],al
     2a1:	0e                   	push   cs
     2a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2a6:	49                   	dec    ecx
     2a7:	13 00                	adc    eax,DWORD PTR [eax]
     2a9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     2af:	49                   	dec    ecx
     2b0:	13 00                	adc    eax,DWORD PTR [eax]
     2b2:	00 06                	add    BYTE PTR [esi],al
     2b4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2b7:	19 03                	sbb    DWORD PTR [ebx],eax
     2b9:	0e                   	push   cs
     2ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2be:	27                   	daa    
     2bf:	19 11                	sbb    DWORD PTR [ecx],edx
     2c1:	01 12                	add    DWORD PTR [edx],edx
     2c3:	06                   	push   es
     2c4:	40                   	inc    eax
     2c5:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     2cb:	00 00                	add    BYTE PTR [eax],al
     2cd:	07                   	pop    es
     2ce:	05 00 03 08 3a       	add    eax,0x3a080300
     2d3:	0b 3b                	or     edi,DWORD PTR [ebx]
     2d5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     2d8:	02 18                	add    bl,BYTE PTR [eax]
     2da:	00 00                	add    BYTE PTR [eax],al
     2dc:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     2df:	03 08                	add    ecx,DWORD PTR [eax]
     2e1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2e3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2e5:	49                   	dec    ecx
     2e6:	13 02                	adc    eax,DWORD PTR [edx]
     2e8:	18 00                	sbb    BYTE PTR [eax],al
     2ea:	00 09                	add    BYTE PTR [ecx],cl
     2ec:	34 00                	xor    al,0x0
     2ee:	03 0e                	add    ecx,DWORD PTR [esi]
     2f0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2f2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2f4:	49                   	dec    ecx
     2f5:	13 02                	adc    eax,DWORD PTR [edx]
     2f7:	18 00                	sbb    BYTE PTR [eax],al
     2f9:	00 0a                	add    BYTE PTR [edx],cl
     2fb:	01 01                	add    DWORD PTR [ecx],eax
     2fd:	49                   	dec    ecx
     2fe:	13 01                	adc    eax,DWORD PTR [ecx]
     300:	13 00                	adc    eax,DWORD PTR [eax]
     302:	00 0b                	add    BYTE PTR [ebx],cl
     304:	21 00                	and    DWORD PTR [eax],eax
     306:	49                   	dec    ecx
     307:	13 2f                	adc    ebp,DWORD PTR [edi]
     309:	0b 00                	or     eax,DWORD PTR [eax]
     30b:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     30e:	01 3f                	add    DWORD PTR [edi],edi
     310:	19 03                	sbb    DWORD PTR [ebx],eax
     312:	0e                   	push   cs
     313:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     315:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     317:	11 01                	adc    DWORD PTR [ecx],eax
     319:	12 06                	adc    al,BYTE PTR [esi]
     31b:	40                   	inc    eax
     31c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     322:	00 00                	add    BYTE PTR [eax],al
     324:	0d 34 00 03 0e       	or     eax,0xe030034
     329:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     32b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     32d:	49                   	dec    ecx
     32e:	13 3f                	adc    edi,DWORD PTR [edi]
     330:	19 02                	sbb    DWORD PTR [edx],eax
     332:	18 00                	sbb    BYTE PTR [eax],al
     334:	00 0e                	add    BYTE PTR [esi],cl
     336:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     33a:	00 00                	add    BYTE PTR [eax],al
     33c:	00 01                	add    BYTE PTR [ecx],al
     33e:	11 01                	adc    DWORD PTR [ecx],eax
     340:	25 0e 13 0b 03       	and    eax,0x30b130e
     345:	0e                   	push   cs
     346:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     348:	11 01                	adc    DWORD PTR [ecx],eax
     34a:	12 06                	adc    al,BYTE PTR [esi]
     34c:	10 17                	adc    BYTE PTR [edi],dl
     34e:	00 00                	add    BYTE PTR [eax],al
     350:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     353:	0b 0b                	or     ecx,DWORD PTR [ebx]
     355:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     358:	0e                   	push   cs
     359:	00 00                	add    BYTE PTR [eax],al
     35b:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     35e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     360:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     363:	08 00                	or     BYTE PTR [eax],al
     365:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     368:	00 03                	add    BYTE PTR [ebx],al
     36a:	0e                   	push   cs
     36b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     36d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     36f:	49                   	dec    ecx
     370:	13 00                	adc    eax,DWORD PTR [eax]
     372:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     378:	0b 0b                	or     ecx,DWORD PTR [ebx]
     37a:	49                   	dec    ecx
     37b:	13 3a                	adc    edi,DWORD PTR [edx]
     37d:	0b 3b                	or     edi,DWORD PTR [ebx]
     37f:	0b 01                	or     eax,DWORD PTR [ecx]
     381:	13 00                	adc    eax,DWORD PTR [eax]
     383:	00 06                	add    BYTE PTR [esi],al
     385:	28 00                	sub    BYTE PTR [eax],al
     387:	03 0e                	add    ecx,DWORD PTR [esi]
     389:	1c 0b                	sbb    al,0xb
     38b:	00 00                	add    BYTE PTR [eax],al
     38d:	07                   	pop    es
     38e:	28 00                	sub    BYTE PTR [eax],al
     390:	03 0e                	add    ecx,DWORD PTR [esi]
     392:	1c 05                	sbb    al,0x5
     394:	00 00                	add    BYTE PTR [eax],al
     396:	08 0f                	or     BYTE PTR [edi],cl
     398:	00 0b                	add    BYTE PTR [ebx],cl
     39a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     39d:	00 00                	add    BYTE PTR [eax],al
     39f:	09 2e                	or     DWORD PTR [esi],ebp
     3a1:	01 3f                	add    DWORD PTR [edi],edi
     3a3:	19 03                	sbb    DWORD PTR [ebx],eax
     3a5:	0e                   	push   cs
     3a6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3a8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3aa:	27                   	daa    
     3ab:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     3ae:	11 01                	adc    DWORD PTR [ecx],eax
     3b0:	12 06                	adc    al,BYTE PTR [esi]
     3b2:	40                   	inc    eax
     3b3:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3b9:	00 00                	add    BYTE PTR [eax],al
     3bb:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     3c1:	0b 3b                	or     edi,DWORD PTR [ebx]
     3c3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     3c6:	02 18                	add    bl,BYTE PTR [eax]
     3c8:	00 00                	add    BYTE PTR [eax],al
     3ca:	0b 0b                	or     ecx,DWORD PTR [ebx]
     3cc:	01 11                	add    DWORD PTR [ecx],edx
     3ce:	01 12                	add    DWORD PTR [edx],edx
     3d0:	06                   	push   es
     3d1:	00 00                	add    BYTE PTR [eax],al
     3d3:	0c 34                	or     al,0x34
     3d5:	00 03                	add    BYTE PTR [ebx],al
     3d7:	08 3a                	or     BYTE PTR [edx],bh
     3d9:	0b 3b                	or     edi,DWORD PTR [ebx]
     3db:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     3de:	02 18                	add    bl,BYTE PTR [eax]
     3e0:	00 00                	add    BYTE PTR [eax],al
     3e2:	0d 2e 01 3f 19       	or     eax,0x193f012e
     3e7:	03 0e                	add    ecx,DWORD PTR [esi]
     3e9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3eb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3ed:	27                   	daa    
     3ee:	19 11                	sbb    DWORD PTR [ecx],edx
     3f0:	01 12                	add    DWORD PTR [edx],edx
     3f2:	06                   	push   es
     3f3:	40                   	inc    eax
     3f4:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3fa:	00 00                	add    BYTE PTR [eax],al
     3fc:	0e                   	push   cs
     3fd:	34 00                	xor    al,0x0
     3ff:	03 0e                	add    ecx,DWORD PTR [esi]
     401:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     403:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     405:	49                   	dec    ecx
     406:	13 02                	adc    eax,DWORD PTR [edx]
     408:	18 00                	sbb    BYTE PTR [eax],al
     40a:	00 0f                	add    BYTE PTR [edi],cl
     40c:	0b 01                	or     eax,DWORD PTR [ecx]
     40e:	11 01                	adc    DWORD PTR [ecx],eax
     410:	12 06                	adc    al,BYTE PTR [esi]
     412:	01 13                	add    DWORD PTR [ebx],edx
     414:	00 00                	add    BYTE PTR [eax],al
     416:	10 05 00 03 08 3a    	adc    BYTE PTR ds:0x3a080300,al
     41c:	0b 3b                	or     edi,DWORD PTR [ebx]
     41e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     421:	02 18                	add    bl,BYTE PTR [eax]
     423:	00 00                	add    BYTE PTR [eax],al
     425:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
     428:	03 0e                	add    ecx,DWORD PTR [esi]
     42a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     42c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     42e:	49                   	dec    ecx
     42f:	13 3f                	adc    edi,DWORD PTR [edi]
     431:	19 02                	sbb    DWORD PTR [edx],eax
     433:	18 00                	sbb    BYTE PTR [eax],al
     435:	00 00                	add    BYTE PTR [eax],al
     437:	01 11                	add    DWORD PTR [ecx],edx
     439:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     43f:	0e                   	push   cs
     440:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     442:	11 01                	adc    DWORD PTR [ecx],eax
     444:	12 06                	adc    al,BYTE PTR [esi]
     446:	10 17                	adc    BYTE PTR [edi],dl
     448:	00 00                	add    BYTE PTR [eax],al
     44a:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     44d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     44f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     452:	0e                   	push   cs
     453:	00 00                	add    BYTE PTR [eax],al
     455:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     458:	0b 0b                	or     ecx,DWORD PTR [ebx]
     45a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     45d:	08 00                	or     BYTE PTR [eax],al
     45f:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     462:	00 03                	add    BYTE PTR [ebx],al
     464:	0e                   	push   cs
     465:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     467:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     469:	49                   	dec    ecx
     46a:	13 00                	adc    eax,DWORD PTR [eax]
     46c:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     472:	49                   	dec    ecx
     473:	13 00                	adc    eax,DWORD PTR [eax]
     475:	00 06                	add    BYTE PTR [esi],al
     477:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     47b:	00 00                	add    BYTE PTR [eax],al
     47d:	07                   	pop    es
     47e:	13 01                	adc    eax,DWORD PTR [ecx]
     480:	03 0e                	add    ecx,DWORD PTR [esi]
     482:	0b 05 3a 0b 3b 0b    	or     eax,DWORD PTR ds:0xb3b0b3a
     488:	01 13                	add    DWORD PTR [ebx],edx
     48a:	00 00                	add    BYTE PTR [eax],al
     48c:	08 0d 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,cl
     492:	0b 3b                	or     edi,DWORD PTR [ebx]
     494:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     497:	38 0b                	cmp    BYTE PTR [ebx],cl
     499:	00 00                	add    BYTE PTR [eax],al
     49b:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
     4a1:	0b 3b                	or     edi,DWORD PTR [ebx]
     4a3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     4a6:	38 05 00 00 0a 01    	cmp    BYTE PTR ds:0x10a0000,al
     4ac:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
     4af:	01 13                	add    DWORD PTR [ebx],edx
     4b1:	00 00                	add    BYTE PTR [eax],al
     4b3:	0b 21                	or     esp,DWORD PTR [ecx]
     4b5:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     4b8:	2f                   	das    
     4b9:	05 00 00 0c 13       	add    eax,0x130c0000
     4be:	01 03                	add    DWORD PTR [ebx],eax
     4c0:	0e                   	push   cs
     4c1:	0b 0b                	or     ecx,DWORD PTR [ebx]
     4c3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4c5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4c7:	01 13                	add    DWORD PTR [ebx],edx
     4c9:	00 00                	add    BYTE PTR [eax],al
     4cb:	0d 04 01 03 0e       	or     eax,0xe030104
     4d0:	0b 0b                	or     ecx,DWORD PTR [ebx]
     4d2:	49                   	dec    ecx
     4d3:	13 3a                	adc    edi,DWORD PTR [edx]
     4d5:	0b 3b                	or     edi,DWORD PTR [ebx]
     4d7:	0b 01                	or     eax,DWORD PTR [ecx]
     4d9:	13 00                	adc    eax,DWORD PTR [eax]
     4db:	00 0e                	add    BYTE PTR [esi],cl
     4dd:	28 00                	sub    BYTE PTR [eax],al
     4df:	03 0e                	add    ecx,DWORD PTR [esi]
     4e1:	1c 0b                	sbb    al,0xb
     4e3:	00 00                	add    BYTE PTR [eax],al
     4e5:	0f 28 00             	movaps xmm0,XMMWORD PTR [eax]
     4e8:	03 0e                	add    ecx,DWORD PTR [esi]
     4ea:	1c 05                	sbb    al,0x5
     4ec:	00 00                	add    BYTE PTR [eax],al
     4ee:	10 0f                	adc    BYTE PTR [edi],cl
     4f0:	00 0b                	add    BYTE PTR [ebx],cl
     4f2:	0b 00                	or     eax,DWORD PTR [eax]
     4f4:	00 11                	add    BYTE PTR [ecx],dl
     4f6:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4f9:	19 03                	sbb    DWORD PTR [ebx],eax
     4fb:	0e                   	push   cs
     4fc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4fe:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     500:	27                   	daa    
     501:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     504:	11 01                	adc    DWORD PTR [ecx],eax
     506:	12 06                	adc    al,BYTE PTR [esi]
     508:	40                   	inc    eax
     509:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     50f:	00 00                	add    BYTE PTR [eax],al
     511:	12 05 00 03 0e 3a    	adc    al,BYTE PTR ds:0x3a0e0300
     517:	0b 3b                	or     edi,DWORD PTR [ebx]
     519:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     51c:	02 18                	add    bl,BYTE PTR [eax]
     51e:	00 00                	add    BYTE PTR [eax],al
     520:	13 2e                	adc    ebp,DWORD PTR [esi]
     522:	00 3f                	add    BYTE PTR [edi],bh
     524:	19 03                	sbb    DWORD PTR [ebx],eax
     526:	0e                   	push   cs
     527:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     529:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     52b:	11 01                	adc    DWORD PTR [ecx],eax
     52d:	12 06                	adc    al,BYTE PTR [esi]
     52f:	40                   	inc    eax
     530:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     536:	14 34                	adc    al,0x34
     538:	00 03                	add    BYTE PTR [ebx],al
     53a:	0e                   	push   cs
     53b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     53d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     53f:	49                   	dec    ecx
     540:	13 02                	adc    eax,DWORD PTR [edx]
     542:	18 00                	sbb    BYTE PTR [eax],al
     544:	00 15 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,dl
     54a:	03 0e                	add    ecx,DWORD PTR [esi]
     54c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     54e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     550:	27                   	daa    
     551:	19 11                	sbb    DWORD PTR [ecx],edx
     553:	01 12                	add    DWORD PTR [edx],edx
     555:	06                   	push   es
     556:	40                   	inc    eax
     557:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     55d:	00 00                	add    BYTE PTR [eax],al
     55f:	16                   	push   ss
     560:	0b 01                	or     eax,DWORD PTR [ecx]
     562:	11 01                	adc    DWORD PTR [ecx],eax
     564:	12 06                	adc    al,BYTE PTR [esi]
     566:	01 13                	add    DWORD PTR [ebx],edx
     568:	00 00                	add    BYTE PTR [eax],al
     56a:	17                   	pop    ss
     56b:	34 00                	xor    al,0x0
     56d:	03 08                	add    ecx,DWORD PTR [eax]
     56f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     571:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     573:	49                   	dec    ecx
     574:	13 02                	adc    eax,DWORD PTR [edx]
     576:	18 00                	sbb    BYTE PTR [eax],al
     578:	00 18                	add    BYTE PTR [eax],bl
     57a:	0b 01                	or     eax,DWORD PTR [ecx]
     57c:	11 01                	adc    DWORD PTR [ecx],eax
     57e:	12 06                	adc    al,BYTE PTR [esi]
     580:	00 00                	add    BYTE PTR [eax],al
     582:	19 21                	sbb    DWORD PTR [ecx],esp
     584:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     587:	2f                   	das    
     588:	0b 00                	or     eax,DWORD PTR [eax]
     58a:	00 1a                	add    BYTE PTR [edx],bl
     58c:	05 00 03 08 3a       	add    eax,0x3a080300
     591:	0b 3b                	or     edi,DWORD PTR [ebx]
     593:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     596:	02 18                	add    bl,BYTE PTR [eax]
     598:	00 00                	add    BYTE PTR [eax],al
     59a:	1b 0a                	sbb    ecx,DWORD PTR [edx]
     59c:	00 03                	add    BYTE PTR [ebx],al
     59e:	0e                   	push   cs
     59f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5a1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5a3:	11 01                	adc    DWORD PTR [ecx],eax
     5a5:	00 00                	add    BYTE PTR [eax],al
     5a7:	1c 34                	sbb    al,0x34
     5a9:	00 03                	add    BYTE PTR [ebx],al
     5ab:	0e                   	push   cs
     5ac:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5ae:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5b0:	49                   	dec    ecx
     5b1:	13 3f                	adc    edi,DWORD PTR [edi]
     5b3:	19 02                	sbb    DWORD PTR [edx],eax
     5b5:	18 00                	sbb    BYTE PTR [eax],al
     5b7:	00 00                	add    BYTE PTR [eax],al
     5b9:	01 11                	add    DWORD PTR [ecx],edx
     5bb:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     5c1:	0e                   	push   cs
     5c2:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     5c4:	11 01                	adc    DWORD PTR [ecx],eax
     5c6:	12 06                	adc    al,BYTE PTR [esi]
     5c8:	10 17                	adc    BYTE PTR [edi],dl
     5ca:	00 00                	add    BYTE PTR [eax],al
     5cc:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     5cf:	0b 0b                	or     ecx,DWORD PTR [ebx]
     5d1:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     5d4:	0e                   	push   cs
     5d5:	00 00                	add    BYTE PTR [eax],al
     5d7:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     5da:	0b 0b                	or     ecx,DWORD PTR [ebx]
     5dc:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     5df:	08 00                	or     BYTE PTR [eax],al
     5e1:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     5e4:	00 03                	add    BYTE PTR [ebx],al
     5e6:	0e                   	push   cs
     5e7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5e9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5eb:	49                   	dec    ecx
     5ec:	13 00                	adc    eax,DWORD PTR [eax]
     5ee:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     5f4:	0b 0b                	or     ecx,DWORD PTR [ebx]
     5f6:	49                   	dec    ecx
     5f7:	13 3a                	adc    edi,DWORD PTR [edx]
     5f9:	0b 3b                	or     edi,DWORD PTR [ebx]
     5fb:	0b 01                	or     eax,DWORD PTR [ecx]
     5fd:	13 00                	adc    eax,DWORD PTR [eax]
     5ff:	00 06                	add    BYTE PTR [esi],al
     601:	28 00                	sub    BYTE PTR [eax],al
     603:	03 0e                	add    ecx,DWORD PTR [esi]
     605:	1c 0b                	sbb    al,0xb
     607:	00 00                	add    BYTE PTR [eax],al
     609:	07                   	pop    es
     60a:	28 00                	sub    BYTE PTR [eax],al
     60c:	03 0e                	add    ecx,DWORD PTR [esi]
     60e:	1c 05                	sbb    al,0x5
     610:	00 00                	add    BYTE PTR [eax],al
     612:	08 0f                	or     BYTE PTR [edi],cl
     614:	00 0b                	add    BYTE PTR [ebx],cl
     616:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     619:	00 00                	add    BYTE PTR [eax],al
     61b:	09 2e                	or     DWORD PTR [esi],ebp
     61d:	01 3f                	add    DWORD PTR [edi],edi
     61f:	19 03                	sbb    DWORD PTR [ebx],eax
     621:	0e                   	push   cs
     622:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     624:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     626:	27                   	daa    
     627:	19 11                	sbb    DWORD PTR [ecx],edx
     629:	01 12                	add    DWORD PTR [edx],edx
     62b:	06                   	push   es
     62c:	40                   	inc    eax
     62d:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     633:	00 00                	add    BYTE PTR [eax],al
     635:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     63b:	0b 3b                	or     edi,DWORD PTR [ebx]
     63d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     640:	02 18                	add    bl,BYTE PTR [eax]
     642:	00 00                	add    BYTE PTR [eax],al
     644:	0b 05 00 03 08 3a    	or     eax,DWORD PTR ds:0x3a080300
     64a:	0b 3b                	or     edi,DWORD PTR [ebx]
     64c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     64f:	02 18                	add    bl,BYTE PTR [eax]
     651:	00 00                	add    BYTE PTR [eax],al
     653:	0c 34                	or     al,0x34
     655:	00 03                	add    BYTE PTR [ebx],al
     657:	0e                   	push   cs
     658:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     65a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     65c:	49                   	dec    ecx
     65d:	13 02                	adc    eax,DWORD PTR [edx]
     65f:	18 00                	sbb    BYTE PTR [eax],al
     661:	00 0d 01 01 49 13    	add    BYTE PTR ds:0x13490101,cl
     667:	01 13                	add    DWORD PTR [ebx],edx
     669:	00 00                	add    BYTE PTR [eax],al
     66b:	0e                   	push   cs
     66c:	21 00                	and    DWORD PTR [eax],eax
     66e:	49                   	dec    ecx
     66f:	13 2f                	adc    ebp,DWORD PTR [edi]
     671:	0b 00                	or     eax,DWORD PTR [eax]
     673:	00 0f                	add    BYTE PTR [edi],cl
     675:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     678:	19 03                	sbb    DWORD PTR [ebx],eax
     67a:	0e                   	push   cs
     67b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     67d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     67f:	49                   	dec    ecx
     680:	13 11                	adc    edx,DWORD PTR [ecx]
     682:	01 12                	add    DWORD PTR [edx],edx
     684:	06                   	push   es
     685:	40                   	inc    eax
     686:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     68c:	00 00                	add    BYTE PTR [eax],al
     68e:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     691:	03 08                	add    ecx,DWORD PTR [eax]
     693:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     695:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     697:	49                   	dec    ecx
     698:	13 02                	adc    eax,DWORD PTR [edx]
     69a:	18 00                	sbb    BYTE PTR [eax],al
     69c:	00 11                	add    BYTE PTR [ecx],dl
     69e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     6a1:	19 03                	sbb    DWORD PTR [ebx],eax
     6a3:	0e                   	push   cs
     6a4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6a6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6a8:	27                   	daa    
     6a9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     6ac:	11 01                	adc    DWORD PTR [ecx],eax
     6ae:	12 06                	adc    al,BYTE PTR [esi]
     6b0:	40                   	inc    eax
     6b1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     6b7:	00 00                	add    BYTE PTR [eax],al
     6b9:	12 0a                	adc    cl,BYTE PTR [edx]
     6bb:	00 03                	add    BYTE PTR [ebx],al
     6bd:	0e                   	push   cs
     6be:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6c0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6c2:	11 01                	adc    DWORD PTR [ecx],eax
     6c4:	00 00                	add    BYTE PTR [eax],al
     6c6:	13 34 00             	adc    esi,DWORD PTR [eax+eax*1]
     6c9:	03 0e                	add    ecx,DWORD PTR [esi]
     6cb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6cd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6cf:	49                   	dec    ecx
     6d0:	13 3f                	adc    edi,DWORD PTR [edi]
     6d2:	19 02                	sbb    DWORD PTR [edx],eax
     6d4:	18 00                	sbb    BYTE PTR [eax],al
     6d6:	00 00                	add    BYTE PTR [eax],al
     6d8:	01 11                	add    DWORD PTR [ecx],edx
     6da:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     6e0:	0e                   	push   cs
     6e1:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     6e3:	11 01                	adc    DWORD PTR [ecx],eax
     6e5:	12 06                	adc    al,BYTE PTR [esi]
     6e7:	10 17                	adc    BYTE PTR [edi],dl
     6e9:	00 00                	add    BYTE PTR [eax],al
     6eb:	02 16                	add    dl,BYTE PTR [esi]
     6ed:	00 03                	add    BYTE PTR [ebx],al
     6ef:	0e                   	push   cs
     6f0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6f2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6f4:	49                   	dec    ecx
     6f5:	13 00                	adc    eax,DWORD PTR [eax]
     6f7:	00 03                	add    BYTE PTR [ebx],al
     6f9:	0f 00 0b             	str    WORD PTR [ebx]
     6fc:	0b 03                	or     eax,DWORD PTR [ebx]
     6fe:	0e                   	push   cs
     6ff:	49                   	dec    ecx
     700:	13 00                	adc    eax,DWORD PTR [eax]
     702:	00 04 24             	add    BYTE PTR [esp],al
     705:	00 0b                	add    BYTE PTR [ebx],cl
     707:	0b 3e                	or     edi,DWORD PTR [esi]
     709:	0b 03                	or     eax,DWORD PTR [ebx]
     70b:	0e                   	push   cs
     70c:	00 00                	add    BYTE PTR [eax],al
     70e:	05 24 00 0b 0b       	add    eax,0xb0b0024
     713:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     716:	08 00                	or     BYTE PTR [eax],al
     718:	00 06                	add    BYTE PTR [esi],al
     71a:	0f 00 0b             	str    WORD PTR [ebx]
     71d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     720:	00 00                	add    BYTE PTR [eax],al
     722:	07                   	pop    es
     723:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     727:	00 00                	add    BYTE PTR [eax],al
     729:	08 04 01             	or     BYTE PTR [ecx+eax*1],al
     72c:	03 0e                	add    ecx,DWORD PTR [esi]
     72e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     730:	49                   	dec    ecx
     731:	13 3a                	adc    edi,DWORD PTR [edx]
     733:	0b 3b                	or     edi,DWORD PTR [ebx]
     735:	0b 01                	or     eax,DWORD PTR [ecx]
     737:	13 00                	adc    eax,DWORD PTR [eax]
     739:	00 09                	add    BYTE PTR [ecx],cl
     73b:	28 00                	sub    BYTE PTR [eax],al
     73d:	03 0e                	add    ecx,DWORD PTR [esi]
     73f:	1c 0b                	sbb    al,0xb
     741:	00 00                	add    BYTE PTR [eax],al
     743:	0a 28                	or     ch,BYTE PTR [eax]
     745:	00 03                	add    BYTE PTR [ebx],al
     747:	0e                   	push   cs
     748:	1c 05                	sbb    al,0x5
     74a:	00 00                	add    BYTE PTR [eax],al
     74c:	0b 0f                	or     ecx,DWORD PTR [edi]
     74e:	00 0b                	add    BYTE PTR [ebx],cl
     750:	0b 00                	or     eax,DWORD PTR [eax]
     752:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     755:	01 3f                	add    DWORD PTR [edi],edi
     757:	19 03                	sbb    DWORD PTR [ebx],eax
     759:	0e                   	push   cs
     75a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     75c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     75e:	27                   	daa    
     75f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     762:	11 01                	adc    DWORD PTR [ecx],eax
     764:	12 06                	adc    al,BYTE PTR [esi]
     766:	40                   	inc    eax
     767:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     76d:	00 00                	add    BYTE PTR [eax],al
     76f:	0d 05 00 03 0e       	or     eax,0xe030005
     774:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     776:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     778:	49                   	dec    ecx
     779:	13 02                	adc    eax,DWORD PTR [edx]
     77b:	18 00                	sbb    BYTE PTR [eax],al
     77d:	00 0e                	add    BYTE PTR [esi],cl
     77f:	34 00                	xor    al,0x0
     781:	03 0e                	add    ecx,DWORD PTR [esi]
     783:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     785:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     787:	49                   	dec    ecx
     788:	13 02                	adc    eax,DWORD PTR [edx]
     78a:	18 00                	sbb    BYTE PTR [eax],al
     78c:	00 0f                	add    BYTE PTR [edi],cl
     78e:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     791:	19 03                	sbb    DWORD PTR [ebx],eax
     793:	0e                   	push   cs
     794:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     796:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     798:	11 01                	adc    DWORD PTR [ecx],eax
     79a:	12 06                	adc    al,BYTE PTR [esi]
     79c:	40                   	inc    eax
     79d:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     7a3:	10 2e                	adc    BYTE PTR [esi],ch
     7a5:	00 3f                	add    BYTE PTR [edi],bh
     7a7:	19 03                	sbb    DWORD PTR [ebx],eax
     7a9:	0e                   	push   cs
     7aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7ae:	27                   	daa    
     7af:	19 11                	sbb    DWORD PTR [ecx],edx
     7b1:	01 12                	add    DWORD PTR [edx],edx
     7b3:	06                   	push   es
     7b4:	40                   	inc    eax
     7b5:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     7bb:	11 2e                	adc    DWORD PTR [esi],ebp
     7bd:	01 3f                	add    DWORD PTR [edi],edi
     7bf:	19 03                	sbb    DWORD PTR [ebx],eax
     7c1:	0e                   	push   cs
     7c2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7c4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7c6:	27                   	daa    
     7c7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     7ca:	11 01                	adc    DWORD PTR [ecx],eax
     7cc:	12 06                	adc    al,BYTE PTR [esi]
     7ce:	40                   	inc    eax
     7cf:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     7d5:	00 00                	add    BYTE PTR [eax],al
     7d7:	12 18                	adc    bl,BYTE PTR [eax]
     7d9:	00 00                	add    BYTE PTR [eax],al
     7db:	00 13                	add    BYTE PTR [ebx],dl
     7dd:	0b 01                	or     eax,DWORD PTR [ecx]
     7df:	11 01                	adc    DWORD PTR [ecx],eax
     7e1:	12 06                	adc    al,BYTE PTR [esi]
     7e3:	00 00                	add    BYTE PTR [eax],al
     7e5:	14 34                	adc    al,0x34
     7e7:	00 03                	add    BYTE PTR [ebx],al
     7e9:	08 3a                	or     BYTE PTR [edx],bh
     7eb:	0b 3b                	or     edi,DWORD PTR [ebx]
     7ed:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     7f0:	02 18                	add    bl,BYTE PTR [eax]
     7f2:	00 00                	add    BYTE PTR [eax],al
     7f4:	15 2e 01 3f 19       	adc    eax,0x193f012e
     7f9:	03 0e                	add    ecx,DWORD PTR [esi]
     7fb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7fd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7ff:	27                   	daa    
     800:	19 11                	sbb    DWORD PTR [ecx],edx
     802:	01 12                	add    DWORD PTR [edx],edx
     804:	06                   	push   es
     805:	40                   	inc    eax
     806:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     80c:	00 00                	add    BYTE PTR [eax],al
     80e:	16                   	push   ss
     80f:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     812:	19 03                	sbb    DWORD PTR [ebx],eax
     814:	0e                   	push   cs
     815:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     817:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     819:	49                   	dec    ecx
     81a:	13 11                	adc    edx,DWORD PTR [ecx]
     81c:	01 12                	add    DWORD PTR [edx],edx
     81e:	06                   	push   es
     81f:	40                   	inc    eax
     820:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     826:	00 00                	add    BYTE PTR [eax],al
     828:	17                   	pop    ss
     829:	05 00 03 08 3a       	add    eax,0x3a080300
     82e:	0b 3b                	or     edi,DWORD PTR [ebx]
     830:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     833:	02 18                	add    bl,BYTE PTR [eax]
     835:	00 00                	add    BYTE PTR [eax],al
     837:	18 0b                	sbb    BYTE PTR [ebx],cl
     839:	01 11                	add    DWORD PTR [ecx],edx
     83b:	01 12                	add    DWORD PTR [edx],edx
     83d:	06                   	push   es
     83e:	01 13                	add    DWORD PTR [ebx],edx
     840:	00 00                	add    BYTE PTR [eax],al
     842:	19 34 00             	sbb    DWORD PTR [eax+eax*1],esi
     845:	03 0e                	add    ecx,DWORD PTR [esi]
     847:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     849:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     84f:	00 00                	add    BYTE PTR [eax],al
     851:	1a 2e                	sbb    ch,BYTE PTR [esi]
     853:	01 3f                	add    DWORD PTR [edi],edi
     855:	19 03                	sbb    DWORD PTR [ebx],eax
     857:	0e                   	push   cs
     858:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     85a:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     860:	11 01                	adc    DWORD PTR [ecx],eax
     862:	12 06                	adc    al,BYTE PTR [esi]
     864:	40                   	inc    eax
     865:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     86b:	00 00                	add    BYTE PTR [eax],al
     86d:	1b 05 00 03 0e 3a    	sbb    eax,DWORD PTR ds:0x3a0e0300
     873:	0b 3b                	or     edi,DWORD PTR [ebx]
     875:	05 49 13 02 18       	add    eax,0x18021349
     87a:	00 00                	add    BYTE PTR [eax],al
     87c:	1c 34                	sbb    al,0x34
     87e:	00 03                	add    BYTE PTR [ebx],al
     880:	08 3a                	or     BYTE PTR [edx],bh
     882:	0b 3b                	or     edi,DWORD PTR [ebx]
     884:	05 49 13 02 18       	add    eax,0x18021349
     889:	00 00                	add    BYTE PTR [eax],al
     88b:	1d 0b 01 55 17       	sbb    eax,0x1755010b
     890:	00 00                	add    BYTE PTR [eax],al
     892:	1e                   	push   ds
     893:	01 01                	add    DWORD PTR [ecx],eax
     895:	49                   	dec    ecx
     896:	13 01                	adc    eax,DWORD PTR [ecx]
     898:	13 00                	adc    eax,DWORD PTR [eax]
     89a:	00 1f                	add    BYTE PTR [edi],bl
     89c:	21 00                	and    DWORD PTR [eax],eax
     89e:	49                   	dec    ecx
     89f:	13 2f                	adc    ebp,DWORD PTR [edi]
     8a1:	05 00 00 20 21       	add    eax,0x21200000
     8a6:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     8a9:	2f                   	das    
     8aa:	0b 00                	or     eax,DWORD PTR [eax]
     8ac:	00 21                	add    BYTE PTR [ecx],ah
     8ae:	05 00 03 08 3a       	add    eax,0x3a080300
     8b3:	0b 3b                	or     edi,DWORD PTR [ebx]
     8b5:	05 49 13 02 18       	add    eax,0x18021349
     8ba:	00 00                	add    BYTE PTR [eax],al
     8bc:	22 2e                	and    ch,BYTE PTR [esi]
     8be:	00 3f                	add    BYTE PTR [edi],bh
     8c0:	19 03                	sbb    DWORD PTR [ebx],eax
     8c2:	0e                   	push   cs
     8c3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8c5:	3b 05 11 01 12 06    	cmp    eax,DWORD PTR ds:0x6120111
     8cb:	40                   	inc    eax
     8cc:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     8d2:	23 34 00             	and    esi,DWORD PTR [eax+eax*1]
     8d5:	03 0e                	add    ecx,DWORD PTR [esi]
     8d7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8d9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8db:	49                   	dec    ecx
     8dc:	13 3f                	adc    edi,DWORD PTR [edi]
     8de:	19 02                	sbb    DWORD PTR [edx],eax
     8e0:	18 00                	sbb    BYTE PTR [eax],al
     8e2:	00 00                	add    BYTE PTR [eax],al
     8e4:	01 11                	add    DWORD PTR [ecx],edx
     8e6:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     8ec:	0e                   	push   cs
     8ed:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     8ef:	11 01                	adc    DWORD PTR [ecx],eax
     8f1:	12 06                	adc    al,BYTE PTR [esi]
     8f3:	10 17                	adc    BYTE PTR [edi],dl
     8f5:	00 00                	add    BYTE PTR [eax],al
     8f7:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     8fa:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8fc:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8ff:	0e                   	push   cs
     900:	00 00                	add    BYTE PTR [eax],al
     902:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     905:	0b 0b                	or     ecx,DWORD PTR [ebx]
     907:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     90a:	08 00                	or     BYTE PTR [eax],al
     90c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     90f:	00 03                	add    BYTE PTR [ebx],al
     911:	0e                   	push   cs
     912:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     914:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     916:	49                   	dec    ecx
     917:	13 00                	adc    eax,DWORD PTR [eax]
     919:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     91f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     921:	49                   	dec    ecx
     922:	13 3a                	adc    edi,DWORD PTR [edx]
     924:	0b 3b                	or     edi,DWORD PTR [ebx]
     926:	0b 01                	or     eax,DWORD PTR [ecx]
     928:	13 00                	adc    eax,DWORD PTR [eax]
     92a:	00 06                	add    BYTE PTR [esi],al
     92c:	28 00                	sub    BYTE PTR [eax],al
     92e:	03 0e                	add    ecx,DWORD PTR [esi]
     930:	1c 0b                	sbb    al,0xb
     932:	00 00                	add    BYTE PTR [eax],al
     934:	07                   	pop    es
     935:	28 00                	sub    BYTE PTR [eax],al
     937:	03 0e                	add    ecx,DWORD PTR [esi]
     939:	1c 05                	sbb    al,0x5
     93b:	00 00                	add    BYTE PTR [eax],al
     93d:	08 13                	or     BYTE PTR [ebx],dl
     93f:	01 03                	add    DWORD PTR [ebx],eax
     941:	0e                   	push   cs
     942:	0b 0b                	or     ecx,DWORD PTR [ebx]
     944:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     946:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     948:	01 13                	add    DWORD PTR [ebx],edx
     94a:	00 00                	add    BYTE PTR [eax],al
     94c:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
     952:	0b 3b                	or     edi,DWORD PTR [ebx]
     954:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     957:	38 0b                	cmp    BYTE PTR [ebx],cl
     959:	00 00                	add    BYTE PTR [eax],al
     95b:	0a 0d 00 03 08 3a    	or     cl,BYTE PTR ds:0x3a080300
     961:	0b 3b                	or     edi,DWORD PTR [ebx]
     963:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     966:	38 0b                	cmp    BYTE PTR [ebx],cl
     968:	00 00                	add    BYTE PTR [eax],al
     96a:	0b 0f                	or     ecx,DWORD PTR [edi]
     96c:	00 0b                	add    BYTE PTR [ebx],cl
     96e:	0b 00                	or     eax,DWORD PTR [eax]
     970:	00 0c 0f             	add    BYTE PTR [edi+ecx*1],cl
     973:	00 0b                	add    BYTE PTR [ebx],cl
     975:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     978:	00 00                	add    BYTE PTR [eax],al
     97a:	0d 2e 01 3f 19       	or     eax,0x193f012e
     97f:	03 0e                	add    ecx,DWORD PTR [esi]
     981:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     983:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     985:	27                   	daa    
     986:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     989:	11 01                	adc    DWORD PTR [ecx],eax
     98b:	12 06                	adc    al,BYTE PTR [esi]
     98d:	40                   	inc    eax
     98e:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     994:	00 00                	add    BYTE PTR [eax],al
     996:	0e                   	push   cs
     997:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     99c:	0b 3b                	or     edi,DWORD PTR [ebx]
     99e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9a1:	02 18                	add    bl,BYTE PTR [eax]
     9a3:	00 00                	add    BYTE PTR [eax],al
     9a5:	0f 05                	syscall 
     9a7:	00 03                	add    BYTE PTR [ebx],al
     9a9:	08 3a                	or     BYTE PTR [edx],bh
     9ab:	0b 3b                	or     edi,DWORD PTR [ebx]
     9ad:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9b0:	02 18                	add    bl,BYTE PTR [eax]
     9b2:	00 00                	add    BYTE PTR [eax],al
     9b4:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     9b7:	03 0e                	add    ecx,DWORD PTR [esi]
     9b9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9bb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9bd:	49                   	dec    ecx
     9be:	13 3f                	adc    edi,DWORD PTR [edi]
     9c0:	19 02                	sbb    DWORD PTR [edx],eax
     9c2:	18 00                	sbb    BYTE PTR [eax],al
     9c4:	00 00                	add    BYTE PTR [eax],al
     9c6:	01 11                	add    DWORD PTR [ecx],edx
     9c8:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     9ce:	0e                   	push   cs
     9cf:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     9d1:	11 01                	adc    DWORD PTR [ecx],eax
     9d3:	12 06                	adc    al,BYTE PTR [esi]
     9d5:	10 17                	adc    BYTE PTR [edi],dl
     9d7:	00 00                	add    BYTE PTR [eax],al
     9d9:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     9dc:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9de:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     9e1:	0e                   	push   cs
     9e2:	00 00                	add    BYTE PTR [eax],al
     9e4:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     9e7:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9e9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     9ec:	08 00                	or     BYTE PTR [eax],al
     9ee:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     9f1:	00 03                	add    BYTE PTR [ebx],al
     9f3:	0e                   	push   cs
     9f4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9f6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9f8:	49                   	dec    ecx
     9f9:	13 00                	adc    eax,DWORD PTR [eax]
     9fb:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     a01:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a03:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a05:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a07:	01 13                	add    DWORD PTR [ebx],edx
     a09:	00 00                	add    BYTE PTR [eax],al
     a0b:	06                   	push   es
     a0c:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     a11:	0b 3b                	or     edi,DWORD PTR [ebx]
     a13:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a16:	38 0b                	cmp    BYTE PTR [ebx],cl
     a18:	00 00                	add    BYTE PTR [eax],al
     a1a:	07                   	pop    es
     a1b:	0d 00 03 08 3a       	or     eax,0x3a080300
     a20:	0b 3b                	or     edi,DWORD PTR [ebx]
     a22:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a25:	38 0b                	cmp    BYTE PTR [ebx],cl
     a27:	00 00                	add    BYTE PTR [eax],al
     a29:	08 0f                	or     BYTE PTR [edi],cl
     a2b:	00 0b                	add    BYTE PTR [ebx],cl
     a2d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a30:	00 00                	add    BYTE PTR [eax],al
     a32:	09 04 01             	or     DWORD PTR [ecx+eax*1],eax
     a35:	03 0e                	add    ecx,DWORD PTR [esi]
     a37:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a39:	49                   	dec    ecx
     a3a:	13 3a                	adc    edi,DWORD PTR [edx]
     a3c:	0b 3b                	or     edi,DWORD PTR [ebx]
     a3e:	0b 01                	or     eax,DWORD PTR [ecx]
     a40:	13 00                	adc    eax,DWORD PTR [eax]
     a42:	00 0a                	add    BYTE PTR [edx],cl
     a44:	28 00                	sub    BYTE PTR [eax],al
     a46:	03 0e                	add    ecx,DWORD PTR [esi]
     a48:	1c 0b                	sbb    al,0xb
     a4a:	00 00                	add    BYTE PTR [eax],al
     a4c:	0b 28                	or     ebp,DWORD PTR [eax]
     a4e:	00 03                	add    BYTE PTR [ebx],al
     a50:	0e                   	push   cs
     a51:	1c 05                	sbb    al,0x5
     a53:	00 00                	add    BYTE PTR [eax],al
     a55:	0c 0f                	or     al,0xf
     a57:	00 0b                	add    BYTE PTR [ebx],cl
     a59:	0b 00                	or     eax,DWORD PTR [eax]
     a5b:	00 0d 2e 00 3f 19    	add    BYTE PTR ds:0x193f002e,cl
     a61:	03 0e                	add    ecx,DWORD PTR [esi]
     a63:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a65:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a67:	11 01                	adc    DWORD PTR [ecx],eax
     a69:	12 06                	adc    al,BYTE PTR [esi]
     a6b:	40                   	inc    eax
     a6c:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     a72:	0e                   	push   cs
     a73:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     a76:	19 03                	sbb    DWORD PTR [ebx],eax
     a78:	0e                   	push   cs
     a79:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a7b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a7d:	27                   	daa    
     a7e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     a81:	11 01                	adc    DWORD PTR [ecx],eax
     a83:	12 06                	adc    al,BYTE PTR [esi]
     a85:	40                   	inc    eax
     a86:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     a8c:	00 00                	add    BYTE PTR [eax],al
     a8e:	0f 05                	syscall 
     a90:	00 03                	add    BYTE PTR [ebx],al
     a92:	0e                   	push   cs
     a93:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a95:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a97:	49                   	dec    ecx
     a98:	13 02                	adc    eax,DWORD PTR [edx]
     a9a:	18 00                	sbb    BYTE PTR [eax],al
     a9c:	00 10                	add    BYTE PTR [eax],dl
     a9e:	34 00                	xor    al,0x0
     aa0:	03 0e                	add    ecx,DWORD PTR [esi]
     aa2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     aa4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     aa6:	49                   	dec    ecx
     aa7:	13 02                	adc    eax,DWORD PTR [edx]
     aa9:	18 00                	sbb    BYTE PTR [eax],al
     aab:	00 11                	add    BYTE PTR [ecx],dl
     aad:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     ab0:	19 03                	sbb    DWORD PTR [ebx],eax
     ab2:	0e                   	push   cs
     ab3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ab5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ab7:	27                   	daa    
     ab8:	19 11                	sbb    DWORD PTR [ecx],edx
     aba:	01 12                	add    DWORD PTR [edx],edx
     abc:	06                   	push   es
     abd:	40                   	inc    eax
     abe:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     ac4:	00 00                	add    BYTE PTR [eax],al
     ac6:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     ac9:	03 08                	add    ecx,DWORD PTR [eax]
     acb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     acd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     acf:	49                   	dec    ecx
     ad0:	13 02                	adc    eax,DWORD PTR [edx]
     ad2:	18 00                	sbb    BYTE PTR [eax],al
     ad4:	00 13                	add    BYTE PTR [ebx],dl
     ad6:	0a 00                	or     al,BYTE PTR [eax]
     ad8:	03 0e                	add    ecx,DWORD PTR [esi]
     ada:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     adc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ade:	11 01                	adc    DWORD PTR [ecx],eax
     ae0:	00 00                	add    BYTE PTR [eax],al
     ae2:	14 2e                	adc    al,0x2e
     ae4:	01 3f                	add    DWORD PTR [edi],edi
     ae6:	19 03                	sbb    DWORD PTR [ebx],eax
     ae8:	0e                   	push   cs
     ae9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     aeb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     aed:	27                   	daa    
     aee:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     af1:	11 01                	adc    DWORD PTR [ecx],eax
     af3:	12 06                	adc    al,BYTE PTR [esi]
     af5:	40                   	inc    eax
     af6:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     afc:	00 00                	add    BYTE PTR [eax],al
     afe:	15 34 00 03 0e       	adc    eax,0xe030034
     b03:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b05:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b07:	49                   	dec    ecx
     b08:	13 3f                	adc    edi,DWORD PTR [edi]
     b0a:	19 02                	sbb    DWORD PTR [edx],eax
     b0c:	18 00                	sbb    BYTE PTR [eax],al
     b0e:	00 00                	add    BYTE PTR [eax],al
     b10:	01 11                	add    DWORD PTR [ecx],edx
     b12:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     b18:	0e                   	push   cs
     b19:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     b1b:	11 01                	adc    DWORD PTR [ecx],eax
     b1d:	12 06                	adc    al,BYTE PTR [esi]
     b1f:	10 17                	adc    BYTE PTR [edi],dl
     b21:	00 00                	add    BYTE PTR [eax],al
     b23:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     b26:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b28:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b2b:	0e                   	push   cs
     b2c:	00 00                	add    BYTE PTR [eax],al
     b2e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     b31:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b33:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b36:	08 00                	or     BYTE PTR [eax],al
     b38:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     b3b:	00 0b                	add    BYTE PTR [ebx],cl
     b3d:	0b 00                	or     eax,DWORD PTR [eax]
     b3f:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     b45:	49                   	dec    ecx
     b46:	13 00                	adc    eax,DWORD PTR [eax]
     b48:	00 06                	add    BYTE PTR [esi],al
     b4a:	16                   	push   ss
     b4b:	00 03                	add    BYTE PTR [ebx],al
     b4d:	0e                   	push   cs
     b4e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b50:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b52:	49                   	dec    ecx
     b53:	13 00                	adc    eax,DWORD PTR [eax]
     b55:	00 07                	add    BYTE PTR [edi],al
     b57:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     b5b:	00 00                	add    BYTE PTR [eax],al
     b5d:	08 2e                	or     BYTE PTR [esi],ch
     b5f:	01 3f                	add    DWORD PTR [edi],edi
     b61:	19 03                	sbb    DWORD PTR [ebx],eax
     b63:	0e                   	push   cs
     b64:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b66:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b68:	27                   	daa    
     b69:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     b6c:	11 01                	adc    DWORD PTR [ecx],eax
     b6e:	12 06                	adc    al,BYTE PTR [esi]
     b70:	40                   	inc    eax
     b71:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     b77:	00 00                	add    BYTE PTR [eax],al
     b79:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     b7f:	0b 3b                	or     edi,DWORD PTR [ebx]
     b81:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b84:	02 18                	add    bl,BYTE PTR [eax]
     b86:	00 00                	add    BYTE PTR [eax],al
     b88:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     b8e:	0b 3b                	or     edi,DWORD PTR [ebx]
     b90:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b93:	02 18                	add    bl,BYTE PTR [eax]
     b95:	00 00                	add    BYTE PTR [eax],al
     b97:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     b9a:	03 08                	add    ecx,DWORD PTR [eax]
     b9c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b9e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ba0:	49                   	dec    ecx
     ba1:	13 02                	adc    eax,DWORD PTR [edx]
     ba3:	18 00                	sbb    BYTE PTR [eax],al
     ba5:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     ba8:	01 11                	add    DWORD PTR [ecx],edx
     baa:	01 12                	add    DWORD PTR [edx],edx
     bac:	06                   	push   es
     bad:	01 13                	add    DWORD PTR [ebx],edx
     baf:	00 00                	add    BYTE PTR [eax],al
     bb1:	0d 0b 01 11 01       	or     eax,0x111010b
     bb6:	12 06                	adc    al,BYTE PTR [esi]
     bb8:	00 00                	add    BYTE PTR [eax],al
     bba:	0e                   	push   cs
     bbb:	26 00 00             	add    BYTE PTR es:[eax],al
     bbe:	00 0f                	add    BYTE PTR [edi],cl
     bc0:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     bc3:	19 03                	sbb    DWORD PTR [ebx],eax
     bc5:	0e                   	push   cs
     bc6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bc8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bca:	27                   	daa    
     bcb:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     bce:	11 01                	adc    DWORD PTR [ecx],eax
     bd0:	12 06                	adc    al,BYTE PTR [esi]
     bd2:	40                   	inc    eax
     bd3:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     bd9:	00 00                	add    BYTE PTR [eax],al
     bdb:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     bde:	03 0e                	add    ecx,DWORD PTR [esi]
     be0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     be2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     be4:	49                   	dec    ecx
     be5:	13 3f                	adc    edi,DWORD PTR [edi]
     be7:	19 02                	sbb    DWORD PTR [edx],eax
     be9:	18 00                	sbb    BYTE PTR [eax],al
     beb:	00 00                	add    BYTE PTR [eax],al
     bed:	01 11                	add    DWORD PTR [ecx],edx
     bef:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     bf5:	0e                   	push   cs
     bf6:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     bf8:	11 01                	adc    DWORD PTR [ecx],eax
     bfa:	12 06                	adc    al,BYTE PTR [esi]
     bfc:	10 17                	adc    BYTE PTR [edi],dl
     bfe:	00 00                	add    BYTE PTR [eax],al
     c00:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     c03:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c05:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c08:	0e                   	push   cs
     c09:	00 00                	add    BYTE PTR [eax],al
     c0b:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     c0e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c10:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c13:	08 00                	or     BYTE PTR [eax],al
     c15:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     c18:	00 03                	add    BYTE PTR [ebx],al
     c1a:	0e                   	push   cs
     c1b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c1d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c1f:	49                   	dec    ecx
     c20:	13 00                	adc    eax,DWORD PTR [eax]
     c22:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     c28:	00 00                	add    BYTE PTR [eax],al
     c2a:	06                   	push   es
     c2b:	0f 00 0b             	str    WORD PTR [ebx]
     c2e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c31:	00 00                	add    BYTE PTR [eax],al
     c33:	07                   	pop    es
     c34:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     c37:	19 03                	sbb    DWORD PTR [ebx],eax
     c39:	0e                   	push   cs
     c3a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c3c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c3e:	27                   	daa    
     c3f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c42:	11 01                	adc    DWORD PTR [ecx],eax
     c44:	12 06                	adc    al,BYTE PTR [esi]
     c46:	40                   	inc    eax
     c47:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     c4d:	00 00                	add    BYTE PTR [eax],al
     c4f:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     c55:	0b 3b                	or     edi,DWORD PTR [ebx]
     c57:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c5a:	02 18                	add    bl,BYTE PTR [eax]
     c5c:	00 00                	add    BYTE PTR [eax],al
     c5e:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     c61:	03 08                	add    ecx,DWORD PTR [eax]
     c63:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c65:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c67:	49                   	dec    ecx
     c68:	13 02                	adc    eax,DWORD PTR [edx]
     c6a:	18 00                	sbb    BYTE PTR [eax],al
     c6c:	00 0a                	add    BYTE PTR [edx],cl
     c6e:	34 00                	xor    al,0x0
     c70:	03 0e                	add    ecx,DWORD PTR [esi]
     c72:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c74:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c76:	49                   	dec    ecx
     c77:	13 02                	adc    eax,DWORD PTR [edx]
     c79:	18 00                	sbb    BYTE PTR [eax],al
     c7b:	00 0b                	add    BYTE PTR [ebx],cl
     c7d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     c80:	19 03                	sbb    DWORD PTR [ebx],eax
     c82:	0e                   	push   cs
     c83:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c85:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c87:	27                   	daa    
     c88:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c8b:	11 01                	adc    DWORD PTR [ecx],eax
     c8d:	12 06                	adc    al,BYTE PTR [esi]
     c8f:	40                   	inc    eax
     c90:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     c96:	00 00                	add    BYTE PTR [eax],al
     c98:	0c 34                	or     al,0x34
     c9a:	00 03                	add    BYTE PTR [ebx],al
     c9c:	0e                   	push   cs
     c9d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c9f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ca1:	49                   	dec    ecx
     ca2:	13 3f                	adc    edi,DWORD PTR [edi]
     ca4:	19 02                	sbb    DWORD PTR [edx],eax
     ca6:	18 00                	sbb    BYTE PTR [eax],al
     ca8:	00 00                	add    BYTE PTR [eax],al
     caa:	01 11                	add    DWORD PTR [ecx],edx
     cac:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     cb2:	0e                   	push   cs
     cb3:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     cb5:	11 01                	adc    DWORD PTR [ecx],eax
     cb7:	12 06                	adc    al,BYTE PTR [esi]
     cb9:	10 17                	adc    BYTE PTR [edi],dl
     cbb:	00 00                	add    BYTE PTR [eax],al
     cbd:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     cc0:	0b 0b                	or     ecx,DWORD PTR [ebx]
     cc2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     cc5:	0e                   	push   cs
     cc6:	00 00                	add    BYTE PTR [eax],al
     cc8:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     ccb:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ccd:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     cd0:	08 00                	or     BYTE PTR [eax],al
     cd2:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     cd5:	00 03                	add    BYTE PTR [ebx],al
     cd7:	0e                   	push   cs
     cd8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cda:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cdc:	49                   	dec    ecx
     cdd:	13 00                	adc    eax,DWORD PTR [eax]
     cdf:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     ce5:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ce7:	49                   	dec    ecx
     ce8:	13 3a                	adc    edi,DWORD PTR [edx]
     cea:	0b 3b                	or     edi,DWORD PTR [ebx]
     cec:	0b 01                	or     eax,DWORD PTR [ecx]
     cee:	13 00                	adc    eax,DWORD PTR [eax]
     cf0:	00 06                	add    BYTE PTR [esi],al
     cf2:	28 00                	sub    BYTE PTR [eax],al
     cf4:	03 0e                	add    ecx,DWORD PTR [esi]
     cf6:	1c 0b                	sbb    al,0xb
     cf8:	00 00                	add    BYTE PTR [eax],al
     cfa:	07                   	pop    es
     cfb:	28 00                	sub    BYTE PTR [eax],al
     cfd:	03 0e                	add    ecx,DWORD PTR [esi]
     cff:	1c 05                	sbb    al,0x5
     d01:	00 00                	add    BYTE PTR [eax],al
     d03:	08 0f                	or     BYTE PTR [edi],cl
     d05:	00 0b                	add    BYTE PTR [ebx],cl
     d07:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d0a:	00 00                	add    BYTE PTR [eax],al
     d0c:	09 2e                	or     DWORD PTR [esi],ebp
     d0e:	01 3f                	add    DWORD PTR [edi],edi
     d10:	19 03                	sbb    DWORD PTR [ebx],eax
     d12:	0e                   	push   cs
     d13:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d15:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d17:	27                   	daa    
     d18:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d1b:	11 01                	adc    DWORD PTR [ecx],eax
     d1d:	12 06                	adc    al,BYTE PTR [esi]
     d1f:	40                   	inc    eax
     d20:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     d26:	00 00                	add    BYTE PTR [eax],al
     d28:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     d2e:	0b 3b                	or     edi,DWORD PTR [ebx]
     d30:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d33:	02 18                	add    bl,BYTE PTR [eax]
     d35:	00 00                	add    BYTE PTR [eax],al
     d37:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     d3a:	03 0e                	add    ecx,DWORD PTR [esi]
     d3c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d3e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d40:	49                   	dec    ecx
     d41:	13 3f                	adc    edi,DWORD PTR [edi]
     d43:	19 02                	sbb    DWORD PTR [edx],eax
     d45:	18 00                	sbb    BYTE PTR [eax],al
     d47:	00 00                	add    BYTE PTR [eax],al
     d49:	01 11                	add    DWORD PTR [ecx],edx
     d4b:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     d51:	0e                   	push   cs
     d52:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     d54:	11 01                	adc    DWORD PTR [ecx],eax
     d56:	12 06                	adc    al,BYTE PTR [esi]
     d58:	10 17                	adc    BYTE PTR [edi],dl
     d5a:	00 00                	add    BYTE PTR [eax],al
     d5c:	02 16                	add    dl,BYTE PTR [esi]
     d5e:	00 03                	add    BYTE PTR [ebx],al
     d60:	0e                   	push   cs
     d61:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d63:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d65:	49                   	dec    ecx
     d66:	13 00                	adc    eax,DWORD PTR [eax]
     d68:	00 03                	add    BYTE PTR [ebx],al
     d6a:	0f 00 0b             	str    WORD PTR [ebx]
     d6d:	0b 03                	or     eax,DWORD PTR [ebx]
     d6f:	0e                   	push   cs
     d70:	49                   	dec    ecx
     d71:	13 00                	adc    eax,DWORD PTR [eax]
     d73:	00 04 24             	add    BYTE PTR [esp],al
     d76:	00 0b                	add    BYTE PTR [ebx],cl
     d78:	0b 3e                	or     edi,DWORD PTR [esi]
     d7a:	0b 03                	or     eax,DWORD PTR [ebx]
     d7c:	0e                   	push   cs
     d7d:	00 00                	add    BYTE PTR [eax],al
     d7f:	05 24 00 0b 0b       	add    eax,0xb0b0024
     d84:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d87:	08 00                	or     BYTE PTR [eax],al
     d89:	00 06                	add    BYTE PTR [esi],al
     d8b:	0f 00 0b             	str    WORD PTR [ebx]
     d8e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d91:	00 00                	add    BYTE PTR [eax],al
     d93:	07                   	pop    es
     d94:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     d98:	00 00                	add    BYTE PTR [eax],al
     d9a:	08 2e                	or     BYTE PTR [esi],ch
     d9c:	01 03                	add    DWORD PTR [ebx],eax
     d9e:	0e                   	push   cs
     d9f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     da1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     da3:	27                   	daa    
     da4:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     da7:	11 01                	adc    DWORD PTR [ecx],eax
     da9:	12 06                	adc    al,BYTE PTR [esi]
     dab:	40                   	inc    eax
     dac:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     db2:	00 00                	add    BYTE PTR [eax],al
     db4:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     dba:	0b 3b                	or     edi,DWORD PTR [ebx]
     dbc:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     dbf:	02 18                	add    bl,BYTE PTR [eax]
     dc1:	00 00                	add    BYTE PTR [eax],al
     dc3:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
     dc6:	03 08                	add    ecx,DWORD PTR [eax]
     dc8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dca:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     dcc:	49                   	dec    ecx
     dcd:	13 02                	adc    eax,DWORD PTR [edx]
     dcf:	18 00                	sbb    BYTE PTR [eax],al
     dd1:	00 0b                	add    BYTE PTR [ebx],cl
     dd3:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     dd8:	0b 3b                	or     edi,DWORD PTR [ebx]
     dda:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ddd:	02 18                	add    bl,BYTE PTR [eax]
     ddf:	00 00                	add    BYTE PTR [eax],al
     de1:	0c 34                	or     al,0x34
     de3:	00 03                	add    BYTE PTR [ebx],al
     de5:	0e                   	push   cs
     de6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     de8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     dea:	49                   	dec    ecx
     deb:	13 02                	adc    eax,DWORD PTR [edx]
     ded:	18 00                	sbb    BYTE PTR [eax],al
     def:	00 0d 0b 01 11 01    	add    BYTE PTR ds:0x111010b,cl
     df5:	12 06                	adc    al,BYTE PTR [esi]
     df7:	00 00                	add    BYTE PTR [eax],al
     df9:	0e                   	push   cs
     dfa:	01 01                	add    DWORD PTR [ecx],eax
     dfc:	49                   	dec    ecx
     dfd:	13 01                	adc    eax,DWORD PTR [ecx]
     dff:	13 00                	adc    eax,DWORD PTR [eax]
     e01:	00 0f                	add    BYTE PTR [edi],cl
     e03:	21 00                	and    DWORD PTR [eax],eax
     e05:	49                   	dec    ecx
     e06:	13 2f                	adc    ebp,DWORD PTR [edi]
     e08:	0b 00                	or     eax,DWORD PTR [eax]
     e0a:	00 10                	add    BYTE PTR [eax],dl
     e0c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     e0f:	19 03                	sbb    DWORD PTR [ebx],eax
     e11:	0e                   	push   cs
     e12:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e14:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e16:	27                   	daa    
     e17:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e1a:	11 01                	adc    DWORD PTR [ecx],eax
     e1c:	12 06                	adc    al,BYTE PTR [esi]
     e1e:	40                   	inc    eax
     e1f:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     e25:	00 00                	add    BYTE PTR [eax],al
     e27:	11 0a                	adc    DWORD PTR [edx],ecx
     e29:	00 03                	add    BYTE PTR [ebx],al
     e2b:	0e                   	push   cs
     e2c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e2e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e30:	11 01                	adc    DWORD PTR [ecx],eax
     e32:	00 00                	add    BYTE PTR [eax],al
     e34:	12 0b                	adc    cl,BYTE PTR [ebx]
     e36:	01 11                	add    DWORD PTR [ecx],edx
     e38:	01 12                	add    DWORD PTR [edx],edx
     e3a:	06                   	push   es
     e3b:	01 13                	add    DWORD PTR [ebx],edx
     e3d:	00 00                	add    BYTE PTR [eax],al
     e3f:	13 2e                	adc    ebp,DWORD PTR [esi]
     e41:	01 3f                	add    DWORD PTR [edi],edi
     e43:	19 03                	sbb    DWORD PTR [ebx],eax
     e45:	0e                   	push   cs
     e46:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e48:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     e4e:	11 01                	adc    DWORD PTR [ecx],eax
     e50:	12 06                	adc    al,BYTE PTR [esi]
     e52:	40                   	inc    eax
     e53:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     e59:	00 00                	add    BYTE PTR [eax],al
     e5b:	14 05                	adc    al,0x5
     e5d:	00 03                	add    BYTE PTR [ebx],al
     e5f:	08 3a                	or     BYTE PTR [edx],bh
     e61:	0b 3b                	or     edi,DWORD PTR [ebx]
     e63:	05 49 13 02 18       	add    eax,0x18021349
     e68:	00 00                	add    BYTE PTR [eax],al
     e6a:	15 18 00 00 00       	adc    eax,0x18
     e6f:	16                   	push   ss
     e70:	34 00                	xor    al,0x0
     e72:	03 0e                	add    ecx,DWORD PTR [esi]
     e74:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e76:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     e7c:	00 00                	add    BYTE PTR [eax],al
     e7e:	17                   	pop    ss
     e7f:	34 00                	xor    al,0x0
     e81:	03 08                	add    ecx,DWORD PTR [eax]
     e83:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e85:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     e8b:	00 00                	add    BYTE PTR [eax],al
     e8d:	18 34 00             	sbb    BYTE PTR [eax+eax*1],dh
     e90:	03 0e                	add    ecx,DWORD PTR [esi]
     e92:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e94:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e96:	49                   	dec    ecx
     e97:	13 3f                	adc    edi,DWORD PTR [edi]
     e99:	19 02                	sbb    DWORD PTR [edx],eax
     e9b:	18 00                	sbb    BYTE PTR [eax],al
     e9d:	00 00                	add    BYTE PTR [eax],al
     e9f:	01 11                	add    DWORD PTR [ecx],edx
     ea1:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     ea7:	0e                   	push   cs
     ea8:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     eaa:	11 01                	adc    DWORD PTR [ecx],eax
     eac:	12 06                	adc    al,BYTE PTR [esi]
     eae:	10 17                	adc    BYTE PTR [edi],dl
     eb0:	00 00                	add    BYTE PTR [eax],al
     eb2:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     eb5:	0b 0b                	or     ecx,DWORD PTR [ebx]
     eb7:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     eba:	0e                   	push   cs
     ebb:	00 00                	add    BYTE PTR [eax],al
     ebd:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     ec0:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ec2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ec5:	08 00                	or     BYTE PTR [eax],al
     ec7:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     eca:	00 03                	add    BYTE PTR [ebx],al
     ecc:	0e                   	push   cs
     ecd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ecf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ed1:	49                   	dec    ecx
     ed2:	13 00                	adc    eax,DWORD PTR [eax]
     ed4:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     eda:	49                   	dec    ecx
     edb:	13 00                	adc    eax,DWORD PTR [eax]
     edd:	00 06                	add    BYTE PTR [esi],al
     edf:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     ee2:	19 03                	sbb    DWORD PTR [ebx],eax
     ee4:	0e                   	push   cs
     ee5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ee7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ee9:	11 01                	adc    DWORD PTR [ecx],eax
     eeb:	12 06                	adc    al,BYTE PTR [esi]
     eed:	40                   	inc    eax
     eee:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     ef4:	00 00                	add    BYTE PTR [eax],al
     ef6:	07                   	pop    es
     ef7:	34 00                	xor    al,0x0
     ef9:	03 0e                	add    ecx,DWORD PTR [esi]
     efb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     efd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     eff:	49                   	dec    ecx
     f00:	13 02                	adc    eax,DWORD PTR [edx]
     f02:	18 00                	sbb    BYTE PTR [eax],al
     f04:	00 08                	add    BYTE PTR [eax],cl
     f06:	01 01                	add    DWORD PTR [ecx],eax
     f08:	49                   	dec    ecx
     f09:	13 01                	adc    eax,DWORD PTR [ecx]
     f0b:	13 00                	adc    eax,DWORD PTR [eax]
     f0d:	00 09                	add    BYTE PTR [ecx],cl
     f0f:	21 00                	and    DWORD PTR [eax],eax
     f11:	49                   	dec    ecx
     f12:	13 2f                	adc    ebp,DWORD PTR [edi]
     f14:	0b 00                	or     eax,DWORD PTR [eax]
     f16:	00 0a                	add    BYTE PTR [edx],cl
     f18:	34 00                	xor    al,0x0
     f1a:	03 0e                	add    ecx,DWORD PTR [esi]
     f1c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f1e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f20:	49                   	dec    ecx
     f21:	13 3f                	adc    edi,DWORD PTR [edi]
     f23:	19 02                	sbb    DWORD PTR [edx],eax
     f25:	18 00                	sbb    BYTE PTR [eax],al
     f27:	00 00                	add    BYTE PTR [eax],al
     f29:	01 11                	add    DWORD PTR [ecx],edx
     f2b:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     f31:	0e                   	push   cs
     f32:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     f34:	11 01                	adc    DWORD PTR [ecx],eax
     f36:	12 06                	adc    al,BYTE PTR [esi]
     f38:	10 17                	adc    BYTE PTR [edi],dl
     f3a:	00 00                	add    BYTE PTR [eax],al
     f3c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     f3f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f41:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f44:	0e                   	push   cs
     f45:	00 00                	add    BYTE PTR [eax],al
     f47:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     f4a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f4c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f4f:	08 00                	or     BYTE PTR [eax],al
     f51:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     f54:	00 03                	add    BYTE PTR [ebx],al
     f56:	0e                   	push   cs
     f57:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f59:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f5b:	49                   	dec    ecx
     f5c:	13 00                	adc    eax,DWORD PTR [eax]
     f5e:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     f64:	49                   	dec    ecx
     f65:	13 00                	adc    eax,DWORD PTR [eax]
     f67:	00 06                	add    BYTE PTR [esi],al
     f69:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     f6d:	00 00                	add    BYTE PTR [eax],al
     f6f:	07                   	pop    es
     f70:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     f73:	19 03                	sbb    DWORD PTR [ebx],eax
     f75:	0e                   	push   cs
     f76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f7a:	27                   	daa    
     f7b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f7e:	11 01                	adc    DWORD PTR [ecx],eax
     f80:	12 06                	adc    al,BYTE PTR [esi]
     f82:	40                   	inc    eax
     f83:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     f89:	00 00                	add    BYTE PTR [eax],al
     f8b:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     f91:	0b 3b                	or     edi,DWORD PTR [ebx]
     f93:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f96:	02 18                	add    bl,BYTE PTR [eax]
     f98:	00 00                	add    BYTE PTR [eax],al
     f9a:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     fa0:	0b 3b                	or     edi,DWORD PTR [ebx]
     fa2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fa5:	02 18                	add    bl,BYTE PTR [eax]
     fa7:	00 00                	add    BYTE PTR [eax],al
     fa9:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
     fac:	03 0e                	add    ecx,DWORD PTR [esi]
     fae:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fb0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fb2:	49                   	dec    ecx
     fb3:	13 02                	adc    eax,DWORD PTR [edx]
     fb5:	18 00                	sbb    BYTE PTR [eax],al
     fb7:	00 0b                	add    BYTE PTR [ebx],cl
     fb9:	34 00                	xor    al,0x0
     fbb:	03 0e                	add    ecx,DWORD PTR [esi]
     fbd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fbf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fc1:	49                   	dec    ecx
     fc2:	13 3f                	adc    edi,DWORD PTR [edi]
     fc4:	19 02                	sbb    DWORD PTR [edx],eax
     fc6:	18 00                	sbb    BYTE PTR [eax],al
     fc8:	00 00                	add    BYTE PTR [eax],al
     fca:	01 11                	add    DWORD PTR [ecx],edx
     fcc:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     fd2:	0e                   	push   cs
     fd3:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     fd5:	11 01                	adc    DWORD PTR [ecx],eax
     fd7:	12 06                	adc    al,BYTE PTR [esi]
     fd9:	10 17                	adc    BYTE PTR [edi],dl
     fdb:	00 00                	add    BYTE PTR [eax],al
     fdd:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     fe0:	0b 0b                	or     ecx,DWORD PTR [ebx]
     fe2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     fe5:	0e                   	push   cs
     fe6:	00 00                	add    BYTE PTR [eax],al
     fe8:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     feb:	0b 0b                	or     ecx,DWORD PTR [ebx]
     fed:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ff0:	08 00                	or     BYTE PTR [eax],al
     ff2:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     ff5:	00 03                	add    BYTE PTR [ebx],al
     ff7:	0e                   	push   cs
     ff8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ffa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ffc:	49                   	dec    ecx
     ffd:	13 00                	adc    eax,DWORD PTR [eax]
     fff:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1005:	49                   	dec    ecx
    1006:	13 00                	adc    eax,DWORD PTR [eax]
    1008:	00 06                	add    BYTE PTR [esi],al
    100a:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    100e:	00 00                	add    BYTE PTR [eax],al
    1010:	07                   	pop    es
    1011:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1014:	19 03                	sbb    DWORD PTR [ebx],eax
    1016:	0e                   	push   cs
    1017:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1019:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    101b:	27                   	daa    
    101c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    101f:	11 01                	adc    DWORD PTR [ecx],eax
    1021:	12 06                	adc    al,BYTE PTR [esi]
    1023:	40                   	inc    eax
    1024:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    102a:	00 00                	add    BYTE PTR [eax],al
    102c:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    1032:	0b 3b                	or     edi,DWORD PTR [ebx]
    1034:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1037:	02 18                	add    bl,BYTE PTR [eax]
    1039:	00 00                	add    BYTE PTR [eax],al
    103b:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    103e:	03 08                	add    ecx,DWORD PTR [eax]
    1040:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1042:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1044:	49                   	dec    ecx
    1045:	13 02                	adc    eax,DWORD PTR [edx]
    1047:	18 00                	sbb    BYTE PTR [eax],al
    1049:	00 0a                	add    BYTE PTR [edx],cl
    104b:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    104e:	19 03                	sbb    DWORD PTR [ebx],eax
    1050:	0e                   	push   cs
    1051:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1053:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1055:	27                   	daa    
    1056:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1059:	11 01                	adc    DWORD PTR [ecx],eax
    105b:	12 06                	adc    al,BYTE PTR [esi]
    105d:	40                   	inc    eax
    105e:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1064:	00 00                	add    BYTE PTR [eax],al
    1066:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
    1069:	03 0e                	add    ecx,DWORD PTR [esi]
    106b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    106d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    106f:	49                   	dec    ecx
    1070:	13 3f                	adc    edi,DWORD PTR [edi]
    1072:	19 02                	sbb    DWORD PTR [edx],eax
    1074:	18 00                	sbb    BYTE PTR [eax],al
    1076:	00 00                	add    BYTE PTR [eax],al
    1078:	01 11                	add    DWORD PTR [ecx],edx
    107a:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1080:	0e                   	push   cs
    1081:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1083:	11 01                	adc    DWORD PTR [ecx],eax
    1085:	12 06                	adc    al,BYTE PTR [esi]
    1087:	10 17                	adc    BYTE PTR [edi],dl
    1089:	00 00                	add    BYTE PTR [eax],al
    108b:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    108e:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1090:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1093:	0e                   	push   cs
    1094:	00 00                	add    BYTE PTR [eax],al
    1096:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1099:	0b 0b                	or     ecx,DWORD PTR [ebx]
    109b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    109e:	08 00                	or     BYTE PTR [eax],al
    10a0:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    10a3:	00 03                	add    BYTE PTR [ebx],al
    10a5:	0e                   	push   cs
    10a6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10a8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10aa:	49                   	dec    ecx
    10ab:	13 00                	adc    eax,DWORD PTR [eax]
    10ad:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    10b3:	49                   	dec    ecx
    10b4:	13 00                	adc    eax,DWORD PTR [eax]
    10b6:	00 06                	add    BYTE PTR [esi],al
    10b8:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    10bc:	00 00                	add    BYTE PTR [eax],al
    10be:	07                   	pop    es
    10bf:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    10c2:	19 03                	sbb    DWORD PTR [ebx],eax
    10c4:	0e                   	push   cs
    10c5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10c7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10c9:	27                   	daa    
    10ca:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    10cd:	11 01                	adc    DWORD PTR [ecx],eax
    10cf:	12 06                	adc    al,BYTE PTR [esi]
    10d1:	40                   	inc    eax
    10d2:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    10d8:	00 00                	add    BYTE PTR [eax],al
    10da:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    10e0:	0b 3b                	or     edi,DWORD PTR [ebx]
    10e2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    10e5:	02 18                	add    bl,BYTE PTR [eax]
    10e7:	00 00                	add    BYTE PTR [eax],al
    10e9:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    10ec:	03 08                	add    ecx,DWORD PTR [eax]
    10ee:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10f0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10f2:	49                   	dec    ecx
    10f3:	13 02                	adc    eax,DWORD PTR [edx]
    10f5:	18 00                	sbb    BYTE PTR [eax],al
    10f7:	00 0a                	add    BYTE PTR [edx],cl
    10f9:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    10fe:	0b 3b                	or     edi,DWORD PTR [ebx]
    1100:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1103:	02 18                	add    bl,BYTE PTR [eax]
    1105:	00 00                	add    BYTE PTR [eax],al
    1107:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
    110a:	03 0e                	add    ecx,DWORD PTR [esi]
    110c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    110e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1110:	49                   	dec    ecx
    1111:	13 3f                	adc    edi,DWORD PTR [edi]
    1113:	19 02                	sbb    DWORD PTR [edx],eax
    1115:	18 00                	sbb    BYTE PTR [eax],al
    1117:	00 00                	add    BYTE PTR [eax],al
    1119:	01 11                	add    DWORD PTR [ecx],edx
    111b:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1121:	0e                   	push   cs
    1122:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1124:	11 01                	adc    DWORD PTR [ecx],eax
    1126:	12 06                	adc    al,BYTE PTR [esi]
    1128:	10 17                	adc    BYTE PTR [edi],dl
    112a:	00 00                	add    BYTE PTR [eax],al
    112c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    112f:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1131:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1134:	0e                   	push   cs
    1135:	00 00                	add    BYTE PTR [eax],al
    1137:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    113a:	0b 0b                	or     ecx,DWORD PTR [ebx]
    113c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    113f:	08 00                	or     BYTE PTR [eax],al
    1141:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1144:	00 03                	add    BYTE PTR [ebx],al
    1146:	0e                   	push   cs
    1147:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1149:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    114b:	49                   	dec    ecx
    114c:	13 00                	adc    eax,DWORD PTR [eax]
    114e:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1154:	49                   	dec    ecx
    1155:	13 00                	adc    eax,DWORD PTR [eax]
    1157:	00 06                	add    BYTE PTR [esi],al
    1159:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    115c:	19 03                	sbb    DWORD PTR [ebx],eax
    115e:	0e                   	push   cs
    115f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1161:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1163:	27                   	daa    
    1164:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1167:	11 01                	adc    DWORD PTR [ecx],eax
    1169:	12 06                	adc    al,BYTE PTR [esi]
    116b:	40                   	inc    eax
    116c:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1172:	00 00                	add    BYTE PTR [eax],al
    1174:	07                   	pop    es
    1175:	05 00 03 08 3a       	add    eax,0x3a080300
    117a:	0b 3b                	or     edi,DWORD PTR [ebx]
    117c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    117f:	02 18                	add    bl,BYTE PTR [eax]
    1181:	00 00                	add    BYTE PTR [eax],al
    1183:	08 2e                	or     BYTE PTR [esi],ch
    1185:	01 3f                	add    DWORD PTR [edi],edi
    1187:	19 03                	sbb    DWORD PTR [ebx],eax
    1189:	0e                   	push   cs
    118a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    118c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    118e:	27                   	daa    
    118f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1192:	11 01                	adc    DWORD PTR [ecx],eax
    1194:	12 06                	adc    al,BYTE PTR [esi]
    1196:	40                   	inc    eax
    1197:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    119d:	00 00                	add    BYTE PTR [eax],al
    119f:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    11a2:	03 08                	add    ecx,DWORD PTR [eax]
    11a4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11a6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11a8:	49                   	dec    ecx
    11a9:	13 02                	adc    eax,DWORD PTR [edx]
    11ab:	18 00                	sbb    BYTE PTR [eax],al
    11ad:	00 0a                	add    BYTE PTR [edx],cl
    11af:	34 00                	xor    al,0x0
    11b1:	03 0e                	add    ecx,DWORD PTR [esi]
    11b3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11b5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11b7:	49                   	dec    ecx
    11b8:	13 3f                	adc    edi,DWORD PTR [edi]
    11ba:	19 02                	sbb    DWORD PTR [edx],eax
    11bc:	18 00                	sbb    BYTE PTR [eax],al
    11be:	00 00                	add    BYTE PTR [eax],al
    11c0:	01 11                	add    DWORD PTR [ecx],edx
    11c2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    11c8:	0e                   	push   cs
    11c9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    11cb:	11 01                	adc    DWORD PTR [ecx],eax
    11cd:	12 06                	adc    al,BYTE PTR [esi]
    11cf:	10 17                	adc    BYTE PTR [edi],dl
    11d1:	00 00                	add    BYTE PTR [eax],al
    11d3:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    11d6:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11d8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11db:	0e                   	push   cs
    11dc:	00 00                	add    BYTE PTR [eax],al
    11de:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    11e1:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11e3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11e6:	08 00                	or     BYTE PTR [eax],al
    11e8:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    11eb:	00 03                	add    BYTE PTR [ebx],al
    11ed:	0e                   	push   cs
    11ee:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11f0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11f2:	49                   	dec    ecx
    11f3:	13 00                	adc    eax,DWORD PTR [eax]
    11f5:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    11fb:	49                   	dec    ecx
    11fc:	13 00                	adc    eax,DWORD PTR [eax]
    11fe:	00 06                	add    BYTE PTR [esi],al
    1200:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1204:	00 00                	add    BYTE PTR [eax],al
    1206:	07                   	pop    es
    1207:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    120a:	19 03                	sbb    DWORD PTR [ebx],eax
    120c:	0e                   	push   cs
    120d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    120f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1211:	27                   	daa    
    1212:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1215:	11 01                	adc    DWORD PTR [ecx],eax
    1217:	12 06                	adc    al,BYTE PTR [esi]
    1219:	40                   	inc    eax
    121a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1220:	00 00                	add    BYTE PTR [eax],al
    1222:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    1228:	0b 3b                	or     edi,DWORD PTR [ebx]
    122a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    122d:	02 18                	add    bl,BYTE PTR [eax]
    122f:	00 00                	add    BYTE PTR [eax],al
    1231:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1234:	03 08                	add    ecx,DWORD PTR [eax]
    1236:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1238:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    123a:	49                   	dec    ecx
    123b:	13 02                	adc    eax,DWORD PTR [edx]
    123d:	18 00                	sbb    BYTE PTR [eax],al
    123f:	00 0a                	add    BYTE PTR [edx],cl
    1241:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1244:	19 03                	sbb    DWORD PTR [ebx],eax
    1246:	0e                   	push   cs
    1247:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1249:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    124b:	27                   	daa    
    124c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    124f:	11 01                	adc    DWORD PTR [ecx],eax
    1251:	12 06                	adc    al,BYTE PTR [esi]
    1253:	40                   	inc    eax
    1254:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    125a:	00 00                	add    BYTE PTR [eax],al
    125c:	0b 05 00 03 0e 3a    	or     eax,DWORD PTR ds:0x3a0e0300
    1262:	0b 3b                	or     edi,DWORD PTR [ebx]
    1264:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1267:	02 18                	add    bl,BYTE PTR [eax]
    1269:	00 00                	add    BYTE PTR [eax],al
    126b:	0c 34                	or     al,0x34
    126d:	00 03                	add    BYTE PTR [ebx],al
    126f:	0e                   	push   cs
    1270:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1272:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1274:	49                   	dec    ecx
    1275:	13 3f                	adc    edi,DWORD PTR [edi]
    1277:	19 02                	sbb    DWORD PTR [edx],eax
    1279:	18 00                	sbb    BYTE PTR [eax],al
    127b:	00 00                	add    BYTE PTR [eax],al
    127d:	01 11                	add    DWORD PTR [ecx],edx
    127f:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1285:	0e                   	push   cs
    1286:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1288:	11 01                	adc    DWORD PTR [ecx],eax
    128a:	12 06                	adc    al,BYTE PTR [esi]
    128c:	10 17                	adc    BYTE PTR [edi],dl
    128e:	00 00                	add    BYTE PTR [eax],al
    1290:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1293:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1295:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1298:	08 00                	or     BYTE PTR [eax],al
    129a:	00 03                	add    BYTE PTR [ebx],al
    129c:	16                   	push   ss
    129d:	00 03                	add    BYTE PTR [ebx],al
    129f:	0e                   	push   cs
    12a0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12a2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12a4:	49                   	dec    ecx
    12a5:	13 00                	adc    eax,DWORD PTR [eax]
    12a7:	00 04 24             	add    BYTE PTR [esp],al
    12aa:	00 0b                	add    BYTE PTR [ebx],cl
    12ac:	0b 3e                	or     edi,DWORD PTR [esi]
    12ae:	0b 03                	or     eax,DWORD PTR [ebx]
    12b0:	0e                   	push   cs
    12b1:	00 00                	add    BYTE PTR [eax],al
    12b3:	05 2e 01 3f 19       	add    eax,0x193f012e
    12b8:	03 0e                	add    ecx,DWORD PTR [esi]
    12ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12be:	27                   	daa    
    12bf:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    12c2:	11 01                	adc    DWORD PTR [ecx],eax
    12c4:	12 06                	adc    al,BYTE PTR [esi]
    12c6:	40                   	inc    eax
    12c7:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    12cd:	00 00                	add    BYTE PTR [eax],al
    12cf:	06                   	push   es
    12d0:	05 00 03 08 3a       	add    eax,0x3a080300
    12d5:	0b 3b                	or     edi,DWORD PTR [ebx]
    12d7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    12da:	02 18                	add    bl,BYTE PTR [eax]
    12dc:	00 00                	add    BYTE PTR [eax],al
    12de:	07                   	pop    es
    12df:	0f 00 0b             	str    WORD PTR [ebx]
    12e2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    12e5:	00 00                	add    BYTE PTR [eax],al
    12e7:	08 26                	or     BYTE PTR [esi],ah
    12e9:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    12ec:	00 00                	add    BYTE PTR [eax],al
    12ee:	09 2e                	or     DWORD PTR [esi],ebp
    12f0:	01 3f                	add    DWORD PTR [edi],edi
    12f2:	19 03                	sbb    DWORD PTR [ebx],eax
    12f4:	0e                   	push   cs
    12f5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12f7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12f9:	27                   	daa    
    12fa:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    12fd:	11 01                	adc    DWORD PTR [ecx],eax
    12ff:	12 06                	adc    al,BYTE PTR [esi]
    1301:	40                   	inc    eax
    1302:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    1308:	00 01                	add    BYTE PTR [ecx],al
    130a:	11 01                	adc    DWORD PTR [ecx],eax
    130c:	25 0e 13 0b 03       	and    eax,0x30b130e
    1311:	0e                   	push   cs
    1312:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1314:	11 01                	adc    DWORD PTR [ecx],eax
    1316:	12 06                	adc    al,BYTE PTR [esi]
    1318:	10 17                	adc    BYTE PTR [edi],dl
    131a:	00 00                	add    BYTE PTR [eax],al
    131c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    131f:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1321:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1324:	08 00                	or     BYTE PTR [eax],al
    1326:	00 03                	add    BYTE PTR [ebx],al
    1328:	16                   	push   ss
    1329:	00 03                	add    BYTE PTR [ebx],al
    132b:	0e                   	push   cs
    132c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    132e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1330:	49                   	dec    ecx
    1331:	13 00                	adc    eax,DWORD PTR [eax]
    1333:	00 04 24             	add    BYTE PTR [esp],al
    1336:	00 0b                	add    BYTE PTR [ebx],cl
    1338:	0b 3e                	or     edi,DWORD PTR [esi]
    133a:	0b 03                	or     eax,DWORD PTR [ebx]
    133c:	0e                   	push   cs
    133d:	00 00                	add    BYTE PTR [eax],al
    133f:	05 2e 01 3f 19       	add    eax,0x193f012e
    1344:	03 0e                	add    ecx,DWORD PTR [esi]
    1346:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1348:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    134a:	27                   	daa    
    134b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    134e:	11 01                	adc    DWORD PTR [ecx],eax
    1350:	12 06                	adc    al,BYTE PTR [esi]
    1352:	40                   	inc    eax
    1353:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1359:	00 00                	add    BYTE PTR [eax],al
    135b:	06                   	push   es
    135c:	05 00 03 08 3a       	add    eax,0x3a080300
    1361:	0b 3b                	or     edi,DWORD PTR [ebx]
    1363:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1366:	02 18                	add    bl,BYTE PTR [eax]
    1368:	00 00                	add    BYTE PTR [eax],al
    136a:	07                   	pop    es
    136b:	34 00                	xor    al,0x0
    136d:	03 08                	add    ecx,DWORD PTR [eax]
    136f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1371:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1373:	49                   	dec    ecx
    1374:	13 02                	adc    eax,DWORD PTR [edx]
    1376:	18 00                	sbb    BYTE PTR [eax],al
    1378:	00 08                	add    BYTE PTR [eax],cl
    137a:	0f 00 0b             	str    WORD PTR [ebx]
    137d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1380:	00 00                	add    BYTE PTR [eax],al
    1382:	09 26                	or     DWORD PTR [esi],esp
    1384:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1387:	00 00                	add    BYTE PTR [eax],al
    1389:	0a 2e                	or     ch,BYTE PTR [esi]
    138b:	01 3f                	add    DWORD PTR [edi],edi
    138d:	19 03                	sbb    DWORD PTR [ebx],eax
    138f:	0e                   	push   cs
    1390:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1392:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1394:	27                   	daa    
    1395:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1398:	11 01                	adc    DWORD PTR [ecx],eax
    139a:	12 06                	adc    al,BYTE PTR [esi]
    139c:	40                   	inc    eax
    139d:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
    13a3:	00 01                	add    BYTE PTR [ecx],al
    13a5:	11 01                	adc    DWORD PTR [ecx],eax
    13a7:	25 0e 13 0b 03       	and    eax,0x30b130e
    13ac:	0e                   	push   cs
    13ad:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    13af:	11 01                	adc    DWORD PTR [ecx],eax
    13b1:	12 06                	adc    al,BYTE PTR [esi]
    13b3:	10 17                	adc    BYTE PTR [edi],dl
    13b5:	00 00                	add    BYTE PTR [eax],al
    13b7:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    13ba:	0b 0b                	or     ecx,DWORD PTR [ebx]
    13bc:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    13bf:	0e                   	push   cs
    13c0:	00 00                	add    BYTE PTR [eax],al
    13c2:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    13c5:	0b 0b                	or     ecx,DWORD PTR [ebx]
    13c7:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    13ca:	08 00                	or     BYTE PTR [eax],al
    13cc:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    13cf:	00 03                	add    BYTE PTR [ebx],al
    13d1:	0e                   	push   cs
    13d2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13d4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13d6:	49                   	dec    ecx
    13d7:	13 00                	adc    eax,DWORD PTR [eax]
    13d9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    13df:	49                   	dec    ecx
    13e0:	13 00                	adc    eax,DWORD PTR [eax]
    13e2:	00 06                	add    BYTE PTR [esi],al
    13e4:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    13e8:	00 00                	add    BYTE PTR [eax],al
    13ea:	07                   	pop    es
    13eb:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    13ee:	19 03                	sbb    DWORD PTR [ebx],eax
    13f0:	0e                   	push   cs
    13f1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13f3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13f5:	27                   	daa    
    13f6:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13f9:	11 01                	adc    DWORD PTR [ecx],eax
    13fb:	12 06                	adc    al,BYTE PTR [esi]
    13fd:	40                   	inc    eax
    13fe:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1404:	00 00                	add    BYTE PTR [eax],al
    1406:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    140c:	0b 3b                	or     edi,DWORD PTR [ebx]
    140e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1411:	02 18                	add    bl,BYTE PTR [eax]
    1413:	00 00                	add    BYTE PTR [eax],al
    1415:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1418:	03 08                	add    ecx,DWORD PTR [eax]
    141a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    141c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    141e:	49                   	dec    ecx
    141f:	13 02                	adc    eax,DWORD PTR [edx]
    1421:	18 00                	sbb    BYTE PTR [eax],al
    1423:	00 0a                	add    BYTE PTR [edx],cl
    1425:	34 00                	xor    al,0x0
    1427:	03 0e                	add    ecx,DWORD PTR [esi]
    1429:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    142b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    142d:	49                   	dec    ecx
    142e:	13 00                	adc    eax,DWORD PTR [eax]
    1430:	00 0b                	add    BYTE PTR [ebx],cl
    1432:	34 00                	xor    al,0x0
    1434:	03 08                	add    ecx,DWORD PTR [eax]
    1436:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1438:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    143a:	49                   	dec    ecx
    143b:	13 00                	adc    eax,DWORD PTR [eax]
    143d:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    1440:	00 03                	add    BYTE PTR [ebx],al
    1442:	0e                   	push   cs
    1443:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1445:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1447:	49                   	dec    ecx
    1448:	13 02                	adc    eax,DWORD PTR [edx]
    144a:	18 00                	sbb    BYTE PTR [eax],al
    144c:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    1452:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1454:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1456:	49                   	dec    ecx
    1457:	13 3f                	adc    edi,DWORD PTR [edi]
    1459:	19 02                	sbb    DWORD PTR [edx],eax
    145b:	18 00                	sbb    BYTE PTR [eax],al
    145d:	00 00                	add    BYTE PTR [eax],al
    145f:	01 11                	add    DWORD PTR [ecx],edx
    1461:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1467:	0e                   	push   cs
    1468:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    146a:	11 01                	adc    DWORD PTR [ecx],eax
    146c:	12 06                	adc    al,BYTE PTR [esi]
    146e:	10 17                	adc    BYTE PTR [edi],dl
    1470:	00 00                	add    BYTE PTR [eax],al
    1472:	02 2e                	add    ch,BYTE PTR [esi]
    1474:	01 3f                	add    DWORD PTR [edi],edi
    1476:	19 03                	sbb    DWORD PTR [ebx],eax
    1478:	0e                   	push   cs
    1479:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    147b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    147d:	27                   	daa    
    147e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1481:	11 01                	adc    DWORD PTR [ecx],eax
    1483:	12 06                	adc    al,BYTE PTR [esi]
    1485:	40                   	inc    eax
    1486:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    148c:	00 00                	add    BYTE PTR [eax],al
    148e:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
    1494:	0b 3b                	or     edi,DWORD PTR [ebx]
    1496:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1499:	02 18                	add    bl,BYTE PTR [eax]
    149b:	00 00                	add    BYTE PTR [eax],al
    149d:	04 0f                	add    al,0xf
    149f:	00 0b                	add    BYTE PTR [ebx],cl
    14a1:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    14a4:	00 00                	add    BYTE PTR [eax],al
    14a6:	05 24 00 0b 0b       	add    eax,0xb0b0024
    14ab:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14ae:	0e                   	push   cs
    14af:	00 00                	add    BYTE PTR [eax],al
    14b1:	06                   	push   es
    14b2:	24 00                	and    al,0x0
    14b4:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14b6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14b9:	08 00                	or     BYTE PTR [eax],al
    14bb:	00 00                	add    BYTE PTR [eax],al
    14bd:	01 11                	add    DWORD PTR [ecx],edx
    14bf:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    14c5:	0e                   	push   cs
    14c6:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    14c8:	11 01                	adc    DWORD PTR [ecx],eax
    14ca:	12 06                	adc    al,BYTE PTR [esi]
    14cc:	10 17                	adc    BYTE PTR [edi],dl
    14ce:	00 00                	add    BYTE PTR [eax],al
    14d0:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    14d3:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14d5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14d8:	0e                   	push   cs
    14d9:	00 00                	add    BYTE PTR [eax],al
    14db:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    14de:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14e0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14e3:	08 00                	or     BYTE PTR [eax],al
    14e5:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    14e8:	00 03                	add    BYTE PTR [ebx],al
    14ea:	0e                   	push   cs
    14eb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14ed:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14ef:	49                   	dec    ecx
    14f0:	13 00                	adc    eax,DWORD PTR [eax]
    14f2:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    14f8:	49                   	dec    ecx
    14f9:	13 00                	adc    eax,DWORD PTR [eax]
    14fb:	00 06                	add    BYTE PTR [esi],al
    14fd:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1501:	00 00                	add    BYTE PTR [eax],al
    1503:	07                   	pop    es
    1504:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1507:	19 03                	sbb    DWORD PTR [ebx],eax
    1509:	0e                   	push   cs
    150a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    150c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    150e:	27                   	daa    
    150f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1512:	11 01                	adc    DWORD PTR [ecx],eax
    1514:	12 06                	adc    al,BYTE PTR [esi]
    1516:	40                   	inc    eax
    1517:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    151d:	00 00                	add    BYTE PTR [eax],al
    151f:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    1525:	0b 3b                	or     edi,DWORD PTR [ebx]
    1527:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    152a:	02 18                	add    bl,BYTE PTR [eax]
    152c:	00 00                	add    BYTE PTR [eax],al
    152e:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1531:	03 08                	add    ecx,DWORD PTR [eax]
    1533:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1535:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1537:	49                   	dec    ecx
    1538:	13 02                	adc    eax,DWORD PTR [edx]
    153a:	18 00                	sbb    BYTE PTR [eax],al
    153c:	00 0a                	add    BYTE PTR [edx],cl
    153e:	34 00                	xor    al,0x0
    1540:	03 0e                	add    ecx,DWORD PTR [esi]
    1542:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1544:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1546:	49                   	dec    ecx
    1547:	13 00                	adc    eax,DWORD PTR [eax]
    1549:	00 0b                	add    BYTE PTR [ebx],cl
    154b:	34 00                	xor    al,0x0
    154d:	03 08                	add    ecx,DWORD PTR [eax]
    154f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1551:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1553:	49                   	dec    ecx
    1554:	13 00                	adc    eax,DWORD PTR [eax]
    1556:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    1559:	00 03                	add    BYTE PTR [ebx],al
    155b:	0e                   	push   cs
    155c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    155e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1560:	49                   	dec    ecx
    1561:	13 3f                	adc    edi,DWORD PTR [edi]
    1563:	19 02                	sbb    DWORD PTR [edx],eax
    1565:	18 00                	sbb    BYTE PTR [eax],al
    1567:	00 00                	add    BYTE PTR [eax],al
    1569:	01 11                	add    DWORD PTR [ecx],edx
    156b:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1571:	0e                   	push   cs
    1572:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1574:	11 01                	adc    DWORD PTR [ecx],eax
    1576:	12 06                	adc    al,BYTE PTR [esi]
    1578:	10 17                	adc    BYTE PTR [edi],dl
    157a:	00 00                	add    BYTE PTR [eax],al
    157c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    157f:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1581:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1584:	0e                   	push   cs
    1585:	00 00                	add    BYTE PTR [eax],al
    1587:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    158a:	0b 0b                	or     ecx,DWORD PTR [ebx]
    158c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    158f:	08 00                	or     BYTE PTR [eax],al
    1591:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1594:	00 03                	add    BYTE PTR [ebx],al
    1596:	0e                   	push   cs
    1597:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1599:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    159b:	49                   	dec    ecx
    159c:	13 00                	adc    eax,DWORD PTR [eax]
    159e:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    15a4:	49                   	dec    ecx
    15a5:	13 00                	adc    eax,DWORD PTR [eax]
    15a7:	00 06                	add    BYTE PTR [esi],al
    15a9:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    15ac:	19 03                	sbb    DWORD PTR [ebx],eax
    15ae:	0e                   	push   cs
    15af:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15b1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15b3:	27                   	daa    
    15b4:	19 11                	sbb    DWORD PTR [ecx],edx
    15b6:	01 12                	add    DWORD PTR [edx],edx
    15b8:	06                   	push   es
    15b9:	40                   	inc    eax
    15ba:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    15c0:	00 00                	add    BYTE PTR [eax],al
    15c2:	07                   	pop    es
    15c3:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    15c8:	0b 3b                	or     edi,DWORD PTR [ebx]
    15ca:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    15cd:	02 18                	add    bl,BYTE PTR [eax]
    15cf:	00 00                	add    BYTE PTR [eax],al
    15d1:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    15d4:	03 08                	add    ecx,DWORD PTR [eax]
    15d6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15d8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15da:	49                   	dec    ecx
    15db:	13 02                	adc    eax,DWORD PTR [edx]
    15dd:	18 00                	sbb    BYTE PTR [eax],al
    15df:	00 09                	add    BYTE PTR [ecx],cl
    15e1:	34 00                	xor    al,0x0
    15e3:	03 0e                	add    ecx,DWORD PTR [esi]
    15e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15e9:	49                   	dec    ecx
    15ea:	13 3f                	adc    edi,DWORD PTR [edi]
    15ec:	19 02                	sbb    DWORD PTR [edx],eax
    15ee:	18 00                	sbb    BYTE PTR [eax],al
    15f0:	00 00                	add    BYTE PTR [eax],al
    15f2:	01 11                	add    DWORD PTR [ecx],edx
    15f4:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    15fa:	0e                   	push   cs
    15fb:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    15fd:	11 01                	adc    DWORD PTR [ecx],eax
    15ff:	12 06                	adc    al,BYTE PTR [esi]
    1601:	10 17                	adc    BYTE PTR [edi],dl
    1603:	00 00                	add    BYTE PTR [eax],al
    1605:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1608:	0b 0b                	or     ecx,DWORD PTR [ebx]
    160a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    160d:	0e                   	push   cs
    160e:	00 00                	add    BYTE PTR [eax],al
    1610:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1613:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1615:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1618:	08 00                	or     BYTE PTR [eax],al
    161a:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    161d:	00 03                	add    BYTE PTR [ebx],al
    161f:	0e                   	push   cs
    1620:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1622:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1624:	49                   	dec    ecx
    1625:	13 00                	adc    eax,DWORD PTR [eax]
    1627:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    162d:	49                   	dec    ecx
    162e:	13 00                	adc    eax,DWORD PTR [eax]
    1630:	00 06                	add    BYTE PTR [esi],al
    1632:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1636:	00 00                	add    BYTE PTR [eax],al
    1638:	07                   	pop    es
    1639:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    163c:	19 03                	sbb    DWORD PTR [ebx],eax
    163e:	0e                   	push   cs
    163f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1641:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1643:	27                   	daa    
    1644:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1647:	11 01                	adc    DWORD PTR [ecx],eax
    1649:	12 06                	adc    al,BYTE PTR [esi]
    164b:	40                   	inc    eax
    164c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1652:	00 00                	add    BYTE PTR [eax],al
    1654:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    165a:	0b 3b                	or     edi,DWORD PTR [ebx]
    165c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    165f:	02 18                	add    bl,BYTE PTR [eax]
    1661:	00 00                	add    BYTE PTR [eax],al
    1663:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
    1669:	0b 3b                	or     edi,DWORD PTR [ebx]
    166b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    166e:	02 18                	add    bl,BYTE PTR [eax]
    1670:	00 00                	add    BYTE PTR [eax],al
    1672:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
    1675:	03 0e                	add    ecx,DWORD PTR [esi]
    1677:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1679:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    167b:	49                   	dec    ecx
    167c:	13 02                	adc    eax,DWORD PTR [edx]
    167e:	18 00                	sbb    BYTE PTR [eax],al
    1680:	00 0b                	add    BYTE PTR [ebx],cl
    1682:	34 00                	xor    al,0x0
    1684:	03 0e                	add    ecx,DWORD PTR [esi]
    1686:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1688:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    168a:	49                   	dec    ecx
    168b:	13 3f                	adc    edi,DWORD PTR [edi]
    168d:	19 02                	sbb    DWORD PTR [edx],eax
    168f:	18 00                	sbb    BYTE PTR [eax],al
    1691:	00 00                	add    BYTE PTR [eax],al
    1693:	01 11                	add    DWORD PTR [ecx],edx
    1695:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    169b:	0e                   	push   cs
    169c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    169e:	11 01                	adc    DWORD PTR [ecx],eax
    16a0:	12 06                	adc    al,BYTE PTR [esi]
    16a2:	10 17                	adc    BYTE PTR [edi],dl
    16a4:	00 00                	add    BYTE PTR [eax],al
    16a6:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    16a9:	0b 0b                	or     ecx,DWORD PTR [ebx]
    16ab:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    16ae:	0e                   	push   cs
    16af:	00 00                	add    BYTE PTR [eax],al
    16b1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    16b4:	0b 0b                	or     ecx,DWORD PTR [ebx]
    16b6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    16b9:	08 00                	or     BYTE PTR [eax],al
    16bb:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    16be:	00 03                	add    BYTE PTR [ebx],al
    16c0:	0e                   	push   cs
    16c1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    16c3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16c5:	49                   	dec    ecx
    16c6:	13 00                	adc    eax,DWORD PTR [eax]
    16c8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    16ce:	49                   	dec    ecx
    16cf:	13 00                	adc    eax,DWORD PTR [eax]
    16d1:	00 06                	add    BYTE PTR [esi],al
    16d3:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    16d7:	00 00                	add    BYTE PTR [eax],al
    16d9:	07                   	pop    es
    16da:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    16dd:	19 03                	sbb    DWORD PTR [ebx],eax
    16df:	0e                   	push   cs
    16e0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    16e2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16e4:	27                   	daa    
    16e5:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    16e8:	11 01                	adc    DWORD PTR [ecx],eax
    16ea:	12 06                	adc    al,BYTE PTR [esi]
    16ec:	40                   	inc    eax
    16ed:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    16f3:	00 00                	add    BYTE PTR [eax],al
    16f5:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    16fb:	0b 3b                	or     edi,DWORD PTR [ebx]
    16fd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1700:	02 18                	add    bl,BYTE PTR [eax]
    1702:	00 00                	add    BYTE PTR [eax],al
    1704:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1707:	03 08                	add    ecx,DWORD PTR [eax]
    1709:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    170b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    170d:	49                   	dec    ecx
    170e:	13 02                	adc    eax,DWORD PTR [edx]
    1710:	18 00                	sbb    BYTE PTR [eax],al
    1712:	00 0a                	add    BYTE PTR [edx],cl
    1714:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1717:	19 03                	sbb    DWORD PTR [ebx],eax
    1719:	0e                   	push   cs
    171a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    171c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    171e:	27                   	daa    
    171f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1722:	11 01                	adc    DWORD PTR [ecx],eax
    1724:	12 06                	adc    al,BYTE PTR [esi]
    1726:	40                   	inc    eax
    1727:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    172d:	00 00                	add    BYTE PTR [eax],al
    172f:	0b 01                	or     eax,DWORD PTR [ecx]
    1731:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
    1734:	01 13                	add    DWORD PTR [ebx],edx
    1736:	00 00                	add    BYTE PTR [eax],al
    1738:	0c 21                	or     al,0x21
    173a:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    173d:	2f                   	das    
    173e:	0b 00                	or     eax,DWORD PTR [eax]
    1740:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    1746:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1748:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    174a:	49                   	dec    ecx
    174b:	13 02                	adc    eax,DWORD PTR [edx]
    174d:	18 00                	sbb    BYTE PTR [eax],al
    174f:	00 0e                	add    BYTE PTR [esi],cl
    1751:	34 00                	xor    al,0x0
    1753:	03 0e                	add    ecx,DWORD PTR [esi]
    1755:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1757:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1759:	49                   	dec    ecx
    175a:	13 3f                	adc    edi,DWORD PTR [edi]
    175c:	19 02                	sbb    DWORD PTR [edx],eax
    175e:	18 00                	sbb    BYTE PTR [eax],al
    1760:	00 00                	add    BYTE PTR [eax],al
    1762:	01 11                	add    DWORD PTR [ecx],edx
    1764:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    176a:	0e                   	push   cs
    176b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    176d:	11 01                	adc    DWORD PTR [ecx],eax
    176f:	12 06                	adc    al,BYTE PTR [esi]
    1771:	10 17                	adc    BYTE PTR [edi],dl
    1773:	00 00                	add    BYTE PTR [eax],al
    1775:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1778:	03 0e                	add    ecx,DWORD PTR [esi]
    177a:	0b 0b                	or     ecx,DWORD PTR [ebx]
    177c:	49                   	dec    ecx
    177d:	13 3a                	adc    edi,DWORD PTR [edx]
    177f:	0b 3b                	or     edi,DWORD PTR [ebx]
    1781:	0b 01                	or     eax,DWORD PTR [ecx]
    1783:	13 00                	adc    eax,DWORD PTR [eax]
    1785:	00 03                	add    BYTE PTR [ebx],al
    1787:	28 00                	sub    BYTE PTR [eax],al
    1789:	03 0e                	add    ecx,DWORD PTR [esi]
    178b:	1c 0b                	sbb    al,0xb
    178d:	00 00                	add    BYTE PTR [eax],al
    178f:	04 28                	add    al,0x28
    1791:	00 03                	add    BYTE PTR [ebx],al
    1793:	0e                   	push   cs
    1794:	1c 05                	sbb    al,0x5
    1796:	00 00                	add    BYTE PTR [eax],al
    1798:	05 24 00 0b 0b       	add    eax,0xb0b0024
    179d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    17a0:	0e                   	push   cs
    17a1:	00 00                	add    BYTE PTR [eax],al
    17a3:	06                   	push   es
    17a4:	24 00                	and    al,0x0
    17a6:	0b 0b                	or     ecx,DWORD PTR [ebx]
    17a8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    17ab:	08 00                	or     BYTE PTR [eax],al
    17ad:	00 07                	add    BYTE PTR [edi],al
    17af:	16                   	push   ss
    17b0:	00 03                	add    BYTE PTR [ebx],al
    17b2:	0e                   	push   cs
    17b3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17b5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17b7:	49                   	dec    ecx
    17b8:	13 00                	adc    eax,DWORD PTR [eax]
    17ba:	00 08                	add    BYTE PTR [eax],cl
    17bc:	13 01                	adc    eax,DWORD PTR [ecx]
    17be:	03 08                	add    ecx,DWORD PTR [eax]
    17c0:	0b 0b                	or     ecx,DWORD PTR [ebx]
    17c2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17c4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17c6:	01 13                	add    DWORD PTR [ebx],edx
    17c8:	00 00                	add    BYTE PTR [eax],al
    17ca:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
    17d0:	0b 3b                	or     edi,DWORD PTR [ebx]
    17d2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    17d5:	38 0b                	cmp    BYTE PTR [ebx],cl
    17d7:	00 00                	add    BYTE PTR [eax],al
    17d9:	0a 0f                	or     cl,BYTE PTR [edi]
    17db:	00 0b                	add    BYTE PTR [ebx],cl
    17dd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    17e0:	00 00                	add    BYTE PTR [eax],al
    17e2:	0b 26                	or     esp,DWORD PTR [esi]
    17e4:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    17e7:	00 00                	add    BYTE PTR [eax],al
    17e9:	0c 2e                	or     al,0x2e
    17eb:	01 3f                	add    DWORD PTR [edi],edi
    17ed:	19 03                	sbb    DWORD PTR [ebx],eax
    17ef:	0e                   	push   cs
    17f0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17f2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17f4:	49                   	dec    ecx
    17f5:	13 11                	adc    edx,DWORD PTR [ecx]
    17f7:	01 12                	add    DWORD PTR [edx],edx
    17f9:	06                   	push   es
    17fa:	40                   	inc    eax
    17fb:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1801:	00 00                	add    BYTE PTR [eax],al
    1803:	0d 34 00 03 0e       	or     eax,0xe030034
    1808:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    180a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    180c:	49                   	dec    ecx
    180d:	13 02                	adc    eax,DWORD PTR [edx]
    180f:	18 00                	sbb    BYTE PTR [eax],al
    1811:	00 0e                	add    BYTE PTR [esi],cl
    1813:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1816:	19 03                	sbb    DWORD PTR [ebx],eax
    1818:	0e                   	push   cs
    1819:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    181b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    181d:	27                   	daa    
    181e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1821:	11 01                	adc    DWORD PTR [ecx],eax
    1823:	12 06                	adc    al,BYTE PTR [esi]
    1825:	40                   	inc    eax
    1826:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    182c:	00 00                	add    BYTE PTR [eax],al
    182e:	0f 05                	syscall 
    1830:	00 03                	add    BYTE PTR [ebx],al
    1832:	0e                   	push   cs
    1833:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1835:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1837:	49                   	dec    ecx
    1838:	13 02                	adc    eax,DWORD PTR [edx]
    183a:	18 00                	sbb    BYTE PTR [eax],al
    183c:	00 10                	add    BYTE PTR [eax],dl
    183e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1841:	19 03                	sbb    DWORD PTR [ebx],eax
    1843:	0e                   	push   cs
    1844:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1846:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1848:	27                   	daa    
    1849:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    184c:	11 01                	adc    DWORD PTR [ecx],eax
    184e:	12 06                	adc    al,BYTE PTR [esi]
    1850:	40                   	inc    eax
    1851:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1857:	00 00                	add    BYTE PTR [eax],al
    1859:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    185c:	03 08                	add    ecx,DWORD PTR [eax]
    185e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1860:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1862:	49                   	dec    ecx
    1863:	13 02                	adc    eax,DWORD PTR [edx]
    1865:	18 00                	sbb    BYTE PTR [eax],al
    1867:	00 12                	add    BYTE PTR [edx],dl
    1869:	34 00                	xor    al,0x0
    186b:	03 0e                	add    ecx,DWORD PTR [esi]
    186d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    186f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1871:	49                   	dec    ecx
    1872:	13 3f                	adc    edi,DWORD PTR [edi]
    1874:	19 02                	sbb    DWORD PTR [edx],eax
    1876:	18 00                	sbb    BYTE PTR [eax],al
    1878:	00 13                	add    BYTE PTR [ebx],dl
    187a:	01 01                	add    DWORD PTR [ecx],eax
    187c:	49                   	dec    ecx
    187d:	13 01                	adc    eax,DWORD PTR [ecx]
    187f:	13 00                	adc    eax,DWORD PTR [eax]
    1881:	00 14 21             	add    BYTE PTR [ecx+eiz*1],dl
    1884:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1887:	2f                   	das    
    1888:	0b 00                	or     eax,DWORD PTR [eax]
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
   c:	00 00                	add    BYTE PTR [eax],al
   e:	00 00                	add    BYTE PTR [eax],al
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
	...
  20:	1c 00                	sbb    al,0x0
  22:	00 00                	add    BYTE PTR [eax],al
  24:	02 00                	add    al,BYTE PTR [eax]
  26:	96                   	xchg   esi,eax
  27:	01 00                	add    DWORD PTR [eax],eax
  29:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  2c:	00 00                	add    BYTE PTR [eax],al
  2e:	00 00                	add    BYTE PTR [eax],al
  30:	70 00                	jo     32 <sysEnter_Vector-0x12ffce>
  32:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
	...
  40:	1c 00                	sbb    al,0x0
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	6b 03 00             	imul   eax,DWORD PTR [ebx],0x0
  49:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  4c:	00 00                	add    BYTE PTR [eax],al
  4e:	00 00                	add    BYTE PTR [eax],al
  50:	1c 01                	sbb    al,0x1
  52:	00 9f 2e 01 00 00    	add    BYTE PTR [edi+0x12e],bl
	...
  60:	1c 00                	sbb    al,0x0
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	34 05                	xor    al,0x5
  68:	00 00                	add    BYTE PTR [eax],al
  6a:	04 00                	add    al,0x0
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	4c                   	dec    esp
  71:	02 00                	add    al,BYTE PTR [eax]
  73:	9f                   	lahf   
  74:	49                   	dec    ecx
  75:	02 00                	add    al,BYTE PTR [eax]
	...
  7f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	7d 07                	jge    8f <sysEnter_Vector-0x12ff71>
  88:	00 00                	add    BYTE PTR [eax],al
  8a:	04 00                	add    al,0x0
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	98                   	cwde   
  91:	04 00                	add    al,0x0
  93:	9f                   	lahf   
  94:	6e                   	outs   dx,BYTE PTR ds:[esi]
  95:	01 00                	add    DWORD PTR [eax],eax
	...
  9f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	7a 09                	jp     b1 <sysEnter_Vector-0x12ff4f>
  a8:	00 00                	add    BYTE PTR [eax],al
  aa:	04 00                	add    al,0x0
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	08 06                	or     BYTE PTR [esi],al
  b2:	00 9f dd 02 00 00    	add    BYTE PTR [edi+0x2dd],bl
	...
  c0:	1c 00                	sbb    al,0x0
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	04 0d                	add    al,0xd
  c8:	00 00                	add    BYTE PTR [eax],al
  ca:	04 00                	add    al,0x0
  cc:	00 00                	add    BYTE PTR [eax],al
  ce:	00 00                	add    BYTE PTR [eax],al
  d0:	e8 08 00 9f f2       	call   f29f00dd <tmbuf+0x539e8ddd>
  d5:	07                   	pop    es
	...
  de:	00 00                	add    BYTE PTR [eax],al
  e0:	1c 00                	sbb    al,0x0
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	af                   	scas   eax,DWORD PTR es:[edi]
  e7:	15 00 00 04 00       	adc    eax,0x40000
  ec:	00 00                	add    BYTE PTR [eax],al
  ee:	00 00                	add    BYTE PTR [eax],al
  f0:	dc 10                	fcom   QWORD PTR [eax]
  f2:	00 9f 69 01 00 00    	add    BYTE PTR [edi+0x169],bl
	...
 100:	1c 00                	sbb    al,0x0
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	cd 18                	int    0x18
 108:	00 00                	add    BYTE PTR [eax],al
 10a:	04 00                	add    al,0x0
 10c:	00 00                	add    BYTE PTR [eax],al
 10e:	00 00                	add    BYTE PTR [eax],al
 110:	48                   	dec    eax
 111:	12 00                	adc    al,BYTE PTR [eax]
 113:	9f                   	lahf   
 114:	c4 0c 00             	les    ecx,FWORD PTR [eax+eax*1]
	...
 11f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	27                   	daa    
 127:	24 00                	and    al,0x0
 129:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 12c:	00 00                	add    BYTE PTR [eax],al
 12e:	00 00                	add    BYTE PTR [eax],al
 130:	0c 1f                	or     al,0x1f
 132:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
	...
 140:	1c 00                	sbb    al,0x0
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	37                   	aaa    
 147:	27                   	daa    
 148:	00 00                	add    BYTE PTR [eax],al
 14a:	04 00                	add    al,0x0
 14c:	00 00                	add    BYTE PTR [eax],al
 14e:	00 00                	add    BYTE PTR [eax],al
 150:	80 1f 00             	sbb    BYTE PTR [edi],0x0
 153:	9f                   	lahf   
 154:	51                   	push   ecx
 155:	06                   	push   es
	...
 15e:	00 00                	add    BYTE PTR [eax],al
 160:	1c 00                	sbb    al,0x0
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	54                   	push   esp
 167:	2c 00                	sub    al,0x0
 169:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 16c:	00 00                	add    BYTE PTR [eax],al
 16e:	00 00                	add    BYTE PTR [eax],al
 170:	d4 25                	aam    0x25
 172:	00 9f bb 01 00 00    	add    BYTE PTR [edi+0x1bb],bl
	...
 180:	1c 00                	sbb    al,0x0
 182:	00 00                	add    BYTE PTR [eax],al
 184:	02 00                	add    al,BYTE PTR [eax]
 186:	b7 2e                	mov    bh,0x2e
 188:	00 00                	add    BYTE PTR [eax],al
 18a:	04 00                	add    al,0x0
 18c:	00 00                	add    BYTE PTR [eax],al
 18e:	00 00                	add    BYTE PTR [eax],al
 190:	90                   	nop
 191:	27                   	daa    
 192:	00 9f e7 00 00 00    	add    BYTE PTR [edi+0xe7],bl
	...
 1a0:	1c 00                	sbb    al,0x0
 1a2:	00 00                	add    BYTE PTR [eax],al
 1a4:	02 00                	add    al,BYTE PTR [eax]
 1a6:	d9 30                	fnstenv [eax]
 1a8:	00 00                	add    BYTE PTR [eax],al
 1aa:	04 00                	add    al,0x0
 1ac:	00 00                	add    BYTE PTR [eax],al
 1ae:	00 00                	add    BYTE PTR [eax],al
 1b0:	78 28                	js     1da <sysEnter_Vector-0x12fe26>
 1b2:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
	...
 1c0:	1c 00                	sbb    al,0x0
 1c2:	00 00                	add    BYTE PTR [eax],al
 1c4:	02 00                	add    al,BYTE PTR [eax]
 1c6:	66 33 00             	xor    ax,WORD PTR [eax]
 1c9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 1cc:	00 00                	add    BYTE PTR [eax],al
 1ce:	00 00                	add    BYTE PTR [eax],al
 1d0:	d0 28                	shr    BYTE PTR [eax],1
 1d2:	00 9f 18 07 00 00    	add    BYTE PTR [edi+0x718],bl
	...
 1e0:	1c 00                	sbb    al,0x0
 1e2:	00 00                	add    BYTE PTR [eax],al
 1e4:	02 00                	add    al,BYTE PTR [eax]
 1e6:	5a                   	pop    edx
 1e7:	37                   	aaa    
 1e8:	00 00                	add    BYTE PTR [eax],al
 1ea:	04 00                	add    al,0x0
 1ec:	00 00                	add    BYTE PTR [eax],al
 1ee:	00 00                	add    BYTE PTR [eax],al
 1f0:	e8 2f 00 9f 84       	call   849f0224 <sysEnter_Vector+0x848c0224>
	...
 1fd:	00 00                	add    BYTE PTR [eax],al
 1ff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 202:	00 00                	add    BYTE PTR [eax],al
 204:	02 00                	add    al,BYTE PTR [eax]
 206:	c3                   	ret    
 207:	38 00                	cmp    BYTE PTR [eax],al
 209:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 20c:	00 00                	add    BYTE PTR [eax],al
 20e:	00 00                	add    BYTE PTR [eax],al
 210:	6c                   	ins    BYTE PTR es:[edi],dx
 211:	30 00                	xor    BYTE PTR [eax],al
 213:	9f                   	lahf   
 214:	11 01                	adc    DWORD PTR [ecx],eax
	...
 21e:	00 00                	add    BYTE PTR [eax],al
 220:	1c 00                	sbb    al,0x0
 222:	00 00                	add    BYTE PTR [eax],al
 224:	02 00                	add    al,BYTE PTR [eax]
 226:	0c 3b                	or     al,0x3b
 228:	00 00                	add    BYTE PTR [eax],al
 22a:	04 00                	add    al,0x0
 22c:	00 00                	add    BYTE PTR [eax],al
 22e:	00 00                	add    BYTE PTR [eax],al
 230:	80 31 00             	xor    BYTE PTR [ecx],0x0
 233:	9f                   	lahf   
 234:	7b 00                	jnp    236 <sysEnter_Vector-0x12fdca>
	...
 23e:	00 00                	add    BYTE PTR [eax],al
 240:	1c 00                	sbb    al,0x0
 242:	00 00                	add    BYTE PTR [eax],al
 244:	02 00                	add    al,BYTE PTR [eax]
 246:	e3 3c                	jecxz  284 <sysEnter_Vector-0x12fd7c>
 248:	00 00                	add    BYTE PTR [eax],al
 24a:	04 00                	add    al,0x0
 24c:	00 00                	add    BYTE PTR [eax],al
 24e:	00 00                	add    BYTE PTR [eax],al
 250:	fc                   	cld    
 251:	31 00                	xor    DWORD PTR [eax],eax
 253:	9f                   	lahf   
 254:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
 25a:	00 00                	add    BYTE PTR [eax],al
 25c:	00 00                	add    BYTE PTR [eax],al
 25e:	00 00                	add    BYTE PTR [eax],al
 260:	1c 00                	sbb    al,0x0
 262:	00 00                	add    BYTE PTR [eax],al
 264:	02 00                	add    al,BYTE PTR [eax]
 266:	e3 3e                	jecxz  2a6 <sysEnter_Vector-0x12fd5a>
 268:	00 00                	add    BYTE PTR [eax],al
 26a:	04 00                	add    al,0x0
 26c:	00 00                	add    BYTE PTR [eax],al
 26e:	00 00                	add    BYTE PTR [eax],al
 270:	c4 32                	les    esi,FWORD PTR [edx]
 272:	00 9f 89 00 00 00    	add    BYTE PTR [edi+0x89],bl
	...
 280:	1c 00                	sbb    al,0x0
 282:	00 00                	add    BYTE PTR [eax],al
 284:	02 00                	add    al,BYTE PTR [eax]
 286:	66 40                	inc    ax
 288:	00 00                	add    BYTE PTR [eax],al
 28a:	04 00                	add    al,0x0
 28c:	00 00                	add    BYTE PTR [eax],al
 28e:	00 00                	add    BYTE PTR [eax],al
 290:	50                   	push   eax
 291:	33 00                	xor    eax,DWORD PTR [eax]
 293:	9f                   	lahf   
 294:	a2 00 00 00 00       	mov    ds:0x0,al
 299:	00 00                	add    BYTE PTR [eax],al
 29b:	00 00                	add    BYTE PTR [eax],al
 29d:	00 00                	add    BYTE PTR [eax],al
 29f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2a2:	00 00                	add    BYTE PTR [eax],al
 2a4:	02 00                	add    al,BYTE PTR [eax]
 2a6:	7b 42                	jnp    2ea <sysEnter_Vector-0x12fd16>
 2a8:	00 00                	add    BYTE PTR [eax],al
 2aa:	04 00                	add    al,0x0
 2ac:	00 00                	add    BYTE PTR [eax],al
 2ae:	00 00                	add    BYTE PTR [eax],al
 2b0:	f4                   	hlt    
 2b1:	33 00                	xor    eax,DWORD PTR [eax]
 2b3:	9f                   	lahf   
 2b4:	ce                   	into   
	...
 2bd:	00 00                	add    BYTE PTR [eax],al
 2bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2c2:	00 00                	add    BYTE PTR [eax],al
 2c4:	02 00                	add    al,BYTE PTR [eax]
 2c6:	5d                   	pop    ebp
 2c7:	43                   	inc    ebx
 2c8:	00 00                	add    BYTE PTR [eax],al
 2ca:	04 00                	add    al,0x0
 2cc:	00 00                	add    BYTE PTR [eax],al
 2ce:	00 00                	add    BYTE PTR [eax],al
 2d0:	c4 34 00             	les    esi,FWORD PTR [eax+eax*1]
 2d3:	9f                   	lahf   
 2d4:	8c 00                	mov    WORD PTR [eax],es
	...
 2de:	00 00                	add    BYTE PTR [eax],al
 2e0:	1c 00                	sbb    al,0x0
 2e2:	00 00                	add    BYTE PTR [eax],al
 2e4:	02 00                	add    al,BYTE PTR [eax]
 2e6:	51                   	push   ecx
 2e7:	44                   	inc    esp
 2e8:	00 00                	add    BYTE PTR [eax],al
 2ea:	04 00                	add    al,0x0
 2ec:	00 00                	add    BYTE PTR [eax],al
 2ee:	00 00                	add    BYTE PTR [eax],al
 2f0:	50                   	push   eax
 2f1:	35 00 9f 7d 01       	xor    eax,0x17d9f00
	...
 2fe:	00 00                	add    BYTE PTR [eax],al
 300:	1c 00                	sbb    al,0x0
 302:	00 00                	add    BYTE PTR [eax],al
 304:	02 00                	add    al,BYTE PTR [eax]
 306:	1a 46 00             	sbb    al,BYTE PTR [esi+0x0]
 309:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 30c:	00 00                	add    BYTE PTR [eax],al
 30e:	00 00                	add    BYTE PTR [eax],al
 310:	d0                   	(bad)  
 311:	36 00 9f 1d 00 00 00 	add    BYTE PTR ss:[edi+0x1d],bl
	...
 320:	1c 00                	sbb    al,0x0
 322:	00 00                	add    BYTE PTR [eax],al
 324:	02 00                	add    al,BYTE PTR [eax]
 326:	8a 46 00             	mov    al,BYTE PTR [esi+0x0]
 329:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 32c:	00 00                	add    BYTE PTR [eax],al
 32e:	00 00                	add    BYTE PTR [eax],al
 330:	f0 36 00 9f 9c 01 00 	lock add BYTE PTR ss:[edi+0x19c],bl
 337:	00 
	...
 340:	1c 00                	sbb    al,0x0
 342:	00 00                	add    BYTE PTR [eax],al
 344:	02 00                	add    al,BYTE PTR [eax]
 346:	51                   	push   ecx
 347:	48                   	dec    eax
 348:	00 00                	add    BYTE PTR [eax],al
 34a:	04 00                	add    al,0x0
 34c:	00 00                	add    BYTE PTR [eax],al
 34e:	00 00                	add    BYTE PTR [eax],al
 350:	8c 38                	mov    WORD PTR [eax],?
 352:	00 9f b6 00 00 00    	add    BYTE PTR [edi+0xb6],bl
	...
 360:	1c 00                	sbb    al,0x0
 362:	00 00                	add    BYTE PTR [eax],al
 364:	02 00                	add    al,BYTE PTR [eax]
 366:	ea 49 00 00 04 00 00 	jmp    0x0:0x4000049
 36d:	00 00                	add    BYTE PTR [eax],al
 36f:	00 44 39 00          	add    BYTE PTR [ecx+edi*1+0x0],al
 373:	9f                   	lahf   
 374:	44                   	inc    esp
 375:	01 00                	add    DWORD PTR [eax],eax
	...
 37f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 382:	00 00                	add    BYTE PTR [eax],al
 384:	02 00                	add    al,BYTE PTR [eax]
 386:	f1                   	icebp  
 387:	4b                   	dec    ebx
 388:	00 00                	add    BYTE PTR [eax],al
 38a:	04 00                	add    al,0x0
 38c:	00 00                	add    BYTE PTR [eax],al
 38e:	00 00                	add    BYTE PTR [eax],al
 390:	88 3a                	mov    BYTE PTR [edx],bh
 392:	00 9f 29 01 00 00    	add    BYTE PTR [edi+0x129],bl
	...
 3a0:	1c 00                	sbb    al,0x0
 3a2:	00 00                	add    BYTE PTR [eax],al
 3a4:	02 00                	add    al,BYTE PTR [eax]
 3a6:	2e                   	cs
 3a7:	4e                   	dec    esi
 3a8:	00 00                	add    BYTE PTR [eax],al
 3aa:	04 00                	add    al,0x0
 3ac:	00 00                	add    BYTE PTR [eax],al
 3ae:	00 00                	add    BYTE PTR [eax],al
 3b0:	b4 3b                	mov    ah,0x3b
 3b2:	00 9f 0e 0d 00 00    	add    BYTE PTR [edi+0xd0e],bl
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	da 00                	fiadd  DWORD PTR [eax]
       2:	00 00                	add    BYTE PTR [eax],al
       4:	02 00                	add    al,BYTE PTR [eax]
       6:	ba 00 00 00 01       	mov    edx,0x1000000
       b:	01 fb                	add    ebx,edi
       d:	0e                   	push   cs
       e:	0d 00 01 01 01       	or     eax,0x1010100
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
      1b:	2e                   	cs
      1c:	2e                   	cs
      1d:	2f                   	das    
      1e:	2e                   	cs
      1f:	2e                   	cs
      20:	2f                   	das    
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      25:	6a 2f                	push   0x2f
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      31:	63 2f                	arpl   WORD PTR [edi],bp
      33:	73 74                	jae    a9 <sysEnter_Vector-0x12ff57>
      35:	72 69                	jb     a0 <sysEnter_Vector-0x12ff60>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <sysEnter_Vector-0x12ffc5>
      3b:	2f                   	das    
      3c:	68 6f 6d 65 2f       	push   0x2f656d6f
      41:	79 6f                	jns    b2 <sysEnter_Vector-0x12ff4e>
      43:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
      4a:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
      4d:	73 73                	jae    c2 <sysEnter_Vector-0x12ff3e>
      4f:	2f                   	das    
      50:	6c                   	ins    BYTE PTR es:[edi],dx
      51:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
      58:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
      5e:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
      64:	78 2d                	js     93 <sysEnter_Vector-0x12ff6d>
      66:	67 6e                	outs   dx,BYTE PTR ds:[si]
      68:	75 2f                	jne    99 <sysEnter_Vector-0x12ff67>
      6a:	35 2e 33 2e 30       	xor    eax,0x302e332e
      6f:	2f                   	das    
      70:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      77:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
      7a:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
      7e:	65 00 00             	add    BYTE PTR gs:[eax],al
      81:	73 74                	jae    f7 <sysEnter_Vector-0x12ff09>
      83:	72 63                	jb     e8 <sysEnter_Vector-0x12ff18>
      85:	68 72 2e 63 00       	push   0x632e72
      8a:	01 00                	add    DWORD PTR [eax],eax
      8c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
      8f:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
      96:	63 
      97:	2e                   	cs
      98:	68 00 02 00 00       	push   0x200
      9d:	6d                   	ins    DWORD PTR es:[edi],dx
      9e:	61                   	popa   
      9f:	6c                   	ins    BYTE PTR es:[edi],dx
      a0:	6c                   	ins    BYTE PTR es:[edi],dx
      a1:	6f                   	outs   dx,DWORD PTR ds:[esi]
      a2:	63 2e                	arpl   WORD PTR [esi],bp
      a4:	68 00 03 00 00       	push   0x300
      a9:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
      b0:	03 00                	add    eax,DWORD PTR [eax]
      b2:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
      b6:	43                   	inc    ebx
      b7:	68 72 69 73 4f       	push   0x4f736972
      bc:	53                   	push   ebx
      bd:	2e                   	cs
      be:	68 00 03 00 00       	push   0x300
      c3:	00 00                	add    BYTE PTR [eax],al
      c5:	05 02 00 00 00       	add    eax,0x2
      ca:	9f                   	lahf   
      cb:	1a c9                	sbb    cl,cl
      cd:	2f                   	das    
      ce:	f3 72 cb             	repz jb 9c <sysEnter_Vector-0x12ff64>
      d1:	3d 31 c9 2f f3       	cmp    eax,0xf32fc931
      d6:	72 cb                	jb     a3 <sysEnter_Vector-0x12ff5d>
      d8:	3d 02 02 00 01       	cmp    eax,0x1000202
      dd:	01 0d 01 00 00 02    	add    DWORD PTR ds:0x2000001,ecx
      e3:	00 bb 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],bh
      e9:	01 fb                	add    ebx,edi
      eb:	0e                   	push   cs
      ec:	0d 00 01 01 01       	or     eax,0x1010100
      f1:	01 00                	add    DWORD PTR [eax],eax
      f3:	00 00                	add    BYTE PTR [eax],al
      f5:	01 00                	add    DWORD PTR [eax],eax
      f7:	00 01                	add    BYTE PTR [ecx],al
      f9:	2e                   	cs
      fa:	2e                   	cs
      fb:	2f                   	das    
      fc:	2e                   	cs
      fd:	2e                   	cs
      fe:	2f                   	das    
      ff:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     103:	6a 2f                	push   0x2f
     105:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     108:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     10f:	63 2f                	arpl   WORD PTR [edi],bp
     111:	73 74                	jae    187 <sysEnter_Vector-0x12fe79>
     113:	72 69                	jb     17e <sysEnter_Vector-0x12fe82>
     115:	6e                   	outs   dx,BYTE PTR ds:[esi]
     116:	67 73 00             	addr16 jae 119 <sysEnter_Vector-0x12fee7>
     119:	2f                   	das    
     11a:	68 6f 6d 65 2f       	push   0x2f656d6f
     11f:	79 6f                	jns    190 <sysEnter_Vector-0x12fe70>
     121:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     128:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     12b:	73 73                	jae    1a0 <sysEnter_Vector-0x12fe60>
     12d:	2f                   	das    
     12e:	6c                   	ins    BYTE PTR es:[edi],dx
     12f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     136:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     13c:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     142:	78 2d                	js     171 <sysEnter_Vector-0x12fe8f>
     144:	67 6e                	outs   dx,BYTE PTR ds:[si]
     146:	75 2f                	jne    177 <sysEnter_Vector-0x12fe89>
     148:	35 2e 33 2e 30       	xor    eax,0x302e332e
     14d:	2f                   	das    
     14e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     155:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     158:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     15c:	65 00 00             	add    BYTE PTR gs:[eax],al
     15f:	73 74                	jae    1d5 <sysEnter_Vector-0x12fe2b>
     161:	72 63                	jb     1c6 <sysEnter_Vector-0x12fe3a>
     163:	73 70                	jae    1d5 <sysEnter_Vector-0x12fe2b>
     165:	6e                   	outs   dx,BYTE PTR ds:[esi]
     166:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     169:	01 00                	add    DWORD PTR [eax],eax
     16b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     16e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     175:	63 
     176:	2e                   	cs
     177:	68 00 02 00 00       	push   0x200
     17c:	6d                   	ins    DWORD PTR es:[edi],dx
     17d:	61                   	popa   
     17e:	6c                   	ins    BYTE PTR es:[edi],dx
     17f:	6c                   	ins    BYTE PTR es:[edi],dx
     180:	6f                   	outs   dx,DWORD PTR ds:[esi]
     181:	63 2e                	arpl   WORD PTR [esi],bp
     183:	68 00 03 00 00       	push   0x300
     188:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     18f:	03 00                	add    eax,DWORD PTR [eax]
     191:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     195:	43                   	inc    ebx
     196:	68 72 69 73 4f       	push   0x4f736972
     19b:	53                   	push   ebx
     19c:	2e                   	cs
     19d:	68 00 03 00 00       	push   0x300
     1a2:	00 00                	add    BYTE PTR [eax],al
     1a4:	05 02 70 00 00       	add    eax,0x7002
     1a9:	9f                   	lahf   
     1aa:	03 25 01 e7 9f 59    	add    esp,DWORD PTR ds:0x599fe701
     1b0:	75 00                	jne    1b2 <sysEnter_Vector-0x12fe4e>
     1b2:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1b5:	aa                   	stos   BYTE PTR es:[edi],al
     1b6:	00 02                	add    BYTE PTR [edx],al
     1b8:	04 01                	add    al,0x1
     1ba:	06                   	push   es
     1bb:	3c 00                	cmp    al,0x0
     1bd:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1c0:	06                   	push   es
     1c1:	73 00                	jae    1c3 <sysEnter_Vector-0x12fe3d>
     1c3:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1c6:	06                   	push   es
     1c7:	82                   	(bad)  
     1c8:	06                   	push   es
     1c9:	6d                   	ins    DWORD PTR es:[edi],dx
     1ca:	91                   	xchg   ecx,eax
     1cb:	4d                   	dec    ebp
     1cc:	e7 9f                	out    0x9f,eax
     1ce:	59                   	pop    ecx
     1cf:	75 00                	jne    1d1 <sysEnter_Vector-0x12fe2f>
     1d1:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1d4:	aa                   	stos   BYTE PTR es:[edi],al
     1d5:	00 02                	add    BYTE PTR [edx],al
     1d7:	04 01                	add    al,0x1
     1d9:	06                   	push   es
     1da:	3c 00                	cmp    al,0x0
     1dc:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1df:	06                   	push   es
     1e0:	73 00                	jae    1e2 <sysEnter_Vector-0x12fe1e>
     1e2:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1e5:	06                   	push   es
     1e6:	82                   	(bad)  
     1e7:	06                   	push   es
     1e8:	6d                   	ins    DWORD PTR es:[edi],dx
     1e9:	91                   	xchg   ecx,eax
     1ea:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     1ed:	01 01                	add    DWORD PTR [ecx],eax
     1ef:	ee                   	out    dx,al
     1f0:	00 00                	add    BYTE PTR [eax],al
     1f2:	00 02                	add    BYTE PTR [edx],al
     1f4:	00 ba 00 00 00 01    	add    BYTE PTR [edx+0x1000000],bh
     1fa:	01 fb                	add    ebx,edi
     1fc:	0e                   	push   cs
     1fd:	0d 00 01 01 01       	or     eax,0x1010100
     202:	01 00                	add    DWORD PTR [eax],eax
     204:	00 00                	add    BYTE PTR [eax],al
     206:	01 00                	add    DWORD PTR [eax],eax
     208:	00 01                	add    BYTE PTR [ecx],al
     20a:	2e                   	cs
     20b:	2e                   	cs
     20c:	2f                   	das    
     20d:	2e                   	cs
     20e:	2e                   	cs
     20f:	2f                   	das    
     210:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     214:	6a 2f                	push   0x2f
     216:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     219:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     220:	63 2f                	arpl   WORD PTR [edi],bp
     222:	73 74                	jae    298 <sysEnter_Vector-0x12fd68>
     224:	72 69                	jb     28f <sysEnter_Vector-0x12fd71>
     226:	6e                   	outs   dx,BYTE PTR ds:[esi]
     227:	67 73 00             	addr16 jae 22a <sysEnter_Vector-0x12fdd6>
     22a:	2f                   	das    
     22b:	68 6f 6d 65 2f       	push   0x2f656d6f
     230:	79 6f                	jns    2a1 <sysEnter_Vector-0x12fd5f>
     232:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     239:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     23c:	73 73                	jae    2b1 <sysEnter_Vector-0x12fd4f>
     23e:	2f                   	das    
     23f:	6c                   	ins    BYTE PTR es:[edi],dx
     240:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     247:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     24d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     253:	78 2d                	js     282 <sysEnter_Vector-0x12fd7e>
     255:	67 6e                	outs   dx,BYTE PTR ds:[si]
     257:	75 2f                	jne    288 <sysEnter_Vector-0x12fd78>
     259:	35 2e 33 2e 30       	xor    eax,0x302e332e
     25e:	2f                   	das    
     25f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     266:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     269:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     26d:	65 00 00             	add    BYTE PTR gs:[eax],al
     270:	73 74                	jae    2e6 <sysEnter_Vector-0x12fd1a>
     272:	72 74                	jb     2e8 <sysEnter_Vector-0x12fd18>
     274:	6f                   	outs   dx,DWORD PTR ds:[esi]
     275:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     278:	00 01                	add    BYTE PTR [ecx],al
     27a:	00 00                	add    BYTE PTR [eax],al
     27c:	73 74                	jae    2f2 <sysEnter_Vector-0x12fd0e>
     27e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     285:	63 
     286:	2e                   	cs
     287:	68 00 02 00 00       	push   0x200
     28c:	6d                   	ins    DWORD PTR es:[edi],dx
     28d:	61                   	popa   
     28e:	6c                   	ins    BYTE PTR es:[edi],dx
     28f:	6c                   	ins    BYTE PTR es:[edi],dx
     290:	6f                   	outs   dx,DWORD PTR ds:[esi]
     291:	63 2e                	arpl   WORD PTR [esi],bp
     293:	68 00 03 00 00       	push   0x300
     298:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     29f:	03 00                	add    eax,DWORD PTR [eax]
     2a1:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     2a5:	43                   	inc    ebx
     2a6:	68 72 69 73 4f       	push   0x4f736972
     2ab:	53                   	push   ebx
     2ac:	2e                   	cs
     2ad:	68 00 03 00 00       	push   0x300
     2b2:	00 00                	add    BYTE PTR [eax],al
     2b4:	05 02 1c 01 00       	add    eax,0x11c02
     2b9:	9f                   	lahf   
     2ba:	03 28                	add    ebp,DWORD PTR [eax]
     2bc:	01 f6                	add    esi,esi
     2be:	67 92                	addr16 xchg edx,eax
     2c0:	08 2f                	or     BYTE PTR [edi],ch
     2c2:	75 08                	jne    2cc <sysEnter_Vector-0x12fd34>
     2c4:	2f                   	das    
     2c5:	4b                   	dec    ebx
     2c6:	08 c9                	or     cl,cl
     2c8:	c9                   	leave  
     2c9:	08 21                	or     BYTE PTR [ecx],ah
     2cb:	3d 77 f6 67 92       	cmp    eax,0x9267f677
     2d0:	08 2f                	or     BYTE PTR [edi],ch
     2d2:	75 08                	jne    2dc <sysEnter_Vector-0x12fd24>
     2d4:	2f                   	das    
     2d5:	4b                   	dec    ebx
     2d6:	08 c9                	or     cl,cl
     2d8:	c9                   	leave  
     2d9:	08 21                	or     BYTE PTR [ecx],ah
     2db:	3d 02 07 00 01       	cmp    eax,0x1000702
     2e0:	01 1a                	add    DWORD PTR [edx],ebx
     2e2:	01 00                	add    DWORD PTR [eax],eax
     2e4:	00 02                	add    BYTE PTR [edx],al
     2e6:	00 9d 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],bl
     2ec:	01 fb                	add    ebx,edi
     2ee:	0e                   	push   cs
     2ef:	0d 00 01 01 01       	or     eax,0x1010100
     2f4:	01 00                	add    DWORD PTR [eax],eax
     2f6:	00 00                	add    BYTE PTR [eax],al
     2f8:	01 00                	add    DWORD PTR [eax],eax
     2fa:	00 01                	add    BYTE PTR [ecx],al
     2fc:	73 72                	jae    370 <sysEnter_Vector-0x12fc90>
     2fe:	63 00                	arpl   WORD PTR [eax],ax
     300:	2f                   	das    
     301:	68 6f 6d 65 2f       	push   0x2f656d6f
     306:	79 6f                	jns    377 <sysEnter_Vector-0x12fc89>
     308:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     30f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     312:	73 73                	jae    387 <sysEnter_Vector-0x12fc79>
     314:	2f                   	das    
     315:	6c                   	ins    BYTE PTR es:[edi],dx
     316:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     31d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     323:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     329:	78 2d                	js     358 <sysEnter_Vector-0x12fca8>
     32b:	67 6e                	outs   dx,BYTE PTR ds:[si]
     32d:	75 2f                	jne    35e <sysEnter_Vector-0x12fca2>
     32f:	35 2e 33 2e 30       	xor    eax,0x302e332e
     334:	2f                   	das    
     335:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     33c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     33f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     343:	65 00 00             	add    BYTE PTR gs:[eax],al
     346:	61                   	popa   
     347:	73 63                	jae    3ac <sysEnter_Vector-0x12fc54>
     349:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     350:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     353:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     35a:	63 
     35b:	2e                   	cs
     35c:	68 00 02 00 00       	push   0x200
     361:	6d                   	ins    DWORD PTR es:[edi],dx
     362:	61                   	popa   
     363:	6c                   	ins    BYTE PTR es:[edi],dx
     364:	6c                   	ins    BYTE PTR es:[edi],dx
     365:	6f                   	outs   dx,DWORD PTR ds:[esi]
     366:	63 2e                	arpl   WORD PTR [esi],bp
     368:	68 00 03 00 00       	push   0x300
     36d:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     374:	03 00                	add    eax,DWORD PTR [eax]
     376:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     37a:	43                   	inc    ebx
     37b:	68 72 69 73 4f       	push   0x4f736972
     380:	53                   	push   ebx
     381:	2e                   	cs
     382:	68 00 03 00 00       	push   0x300
     387:	00 00                	add    BYTE PTR [eax],al
     389:	05 02 4c 02 00       	add    eax,0x24c02
     38e:	9f                   	lahf   
     38f:	03 09                	add    ecx,DWORD PTR [ecx]
     391:	01 08                	add    DWORD PTR [eax],ecx
     393:	16                   	push   ss
     394:	00 02                	add    BYTE PTR [edx],al
     396:	04 03                	add    al,0x3
     398:	08 d7                	or     bh,dl
     39a:	00 02                	add    BYTE PTR [edx],al
     39c:	04 03                	add    al,0x3
     39e:	d7                   	xlat   BYTE PTR ds:[ebx]
     39f:	00 02                	add    BYTE PTR [edx],al
     3a1:	04 03                	add    al,0x3
     3a3:	08 4b 00             	or     BYTE PTR [ebx+0x0],cl
     3a6:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     3a9:	d3 00                	rol    DWORD PTR [eax],cl
     3ab:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3ae:	06                   	push   es
     3af:	82                   	(bad)  
     3b0:	06                   	push   es
     3b1:	87 69 08             	xchg   DWORD PTR [ecx+0x8],ebp
     3b4:	15 bb 3d 00 02       	adc    eax,0x2003dbb
     3b9:	04 01                	add    al,0x1
     3bb:	76 00                	jbe    3bd <sysEnter_Vector-0x12fc43>
     3bd:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3c0:	02 3b                	add    bh,BYTE PTR [ebx]
     3c2:	13 08                	adc    ecx,DWORD PTR [eax]
     3c4:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3c8:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3c9:	d7                   	xlat   BYTE PTR ds:[ebx]
     3ca:	69 08 15 bb 3d 00    	imul   ecx,DWORD PTR [eax],0x3dbb15
     3d0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3d3:	76 00                	jbe    3d5 <sysEnter_Vector-0x12fc2b>
     3d5:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3d8:	02 3b                	add    bh,BYTE PTR [ebx]
     3da:	13 08                	adc    ecx,DWORD PTR [eax]
     3dc:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3e0:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3e1:	d7                   	xlat   BYTE PTR ds:[ebx]
     3e2:	6a f3                	push   0xfffffff3
     3e4:	78 00                	js     3e6 <sysEnter_Vector-0x12fc1a>
     3e6:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     3e9:	91                   	xchg   ecx,eax
     3ea:	00 02                	add    BYTE PTR [edx],al
     3ec:	04 03                	add    al,0x3
     3ee:	02 24 11             	add    ah,BYTE PTR [ecx+edx*1]
     3f1:	00 02                	add    BYTE PTR [edx],al
     3f3:	04 01                	add    al,0x1
     3f5:	06                   	push   es
     3f6:	4a                   	dec    edx
     3f7:	06                   	push   es
     3f8:	e8 3d 02 02 00       	call   2063a <sysEnter_Vector-0x10f9c6>
     3fd:	01 01                	add    DWORD PTR [ecx],eax
     3ff:	d8 00                	fadd   DWORD PTR [eax]
     401:	00 00                	add    BYTE PTR [eax],al
     403:	02 00                	add    al,BYTE PTR [eax]
     405:	9f                   	lahf   
     406:	00 00                	add    BYTE PTR [eax],al
     408:	00 01                	add    BYTE PTR [ecx],al
     40a:	01 fb                	add    ebx,edi
     40c:	0e                   	push   cs
     40d:	0d 00 01 01 01       	or     eax,0x1010100
     412:	01 00                	add    DWORD PTR [eax],eax
     414:	00 00                	add    BYTE PTR [eax],al
     416:	01 00                	add    DWORD PTR [eax],eax
     418:	00 01                	add    BYTE PTR [ecx],al
     41a:	73 72                	jae    48e <sysEnter_Vector-0x12fb72>
     41c:	63 00                	arpl   WORD PTR [eax],ax
     41e:	2f                   	das    
     41f:	68 6f 6d 65 2f       	push   0x2f656d6f
     424:	79 6f                	jns    495 <sysEnter_Vector-0x12fb6b>
     426:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     42d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     430:	73 73                	jae    4a5 <sysEnter_Vector-0x12fb5b>
     432:	2f                   	das    
     433:	6c                   	ins    BYTE PTR es:[edi],dx
     434:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     43b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     441:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     447:	78 2d                	js     476 <sysEnter_Vector-0x12fb8a>
     449:	67 6e                	outs   dx,BYTE PTR ds:[si]
     44b:	75 2f                	jne    47c <sysEnter_Vector-0x12fb84>
     44d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     452:	2f                   	das    
     453:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     45a:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     45d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     461:	65 00 00             	add    BYTE PTR gs:[eax],al
     464:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     467:	73 6f                	jae    4d8 <sysEnter_Vector-0x12fb28>
     469:	6c                   	ins    BYTE PTR es:[edi],dx
     46a:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
     46e:	01 00                	add    DWORD PTR [eax],eax
     470:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     473:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     47a:	63 
     47b:	2e                   	cs
     47c:	68 00 02 00 00       	push   0x200
     481:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     488:	03 00                	add    eax,DWORD PTR [eax]
     48a:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     48d:	6c                   	ins    BYTE PTR es:[edi],dx
     48e:	6c                   	ins    BYTE PTR es:[edi],dx
     48f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     490:	63 2e                	arpl   WORD PTR [esi],bp
     492:	68 00 03 00 00       	push   0x300
     497:	6c                   	ins    BYTE PTR es:[edi],dx
     498:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     49f:	4f                   	dec    edi
     4a0:	53                   	push   ebx
     4a1:	2e                   	cs
     4a2:	68 00 03 00 00       	push   0x300
     4a7:	00 00                	add    BYTE PTR [eax],al
     4a9:	05 02 98 04 00       	add    eax,0x49802
     4ae:	9f                   	lahf   
     4af:	03 0d 01 08 24 08    	add    ecx,DWORD PTR ds:0x8240801
     4b5:	59                   	pop    ecx
     4b6:	08 21                	or     BYTE PTR [ecx],ah
     4b8:	08 2f                	or     BYTE PTR [edi],ch
     4ba:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     4bd:	21 08                	and    DWORD PTR [eax],ecx
     4bf:	2f                   	das    
     4c0:	08 5a 08             	or     BYTE PTR [edx+0x8],bl
     4c3:	59                   	pop    ecx
     4c4:	69 08 23 08 59 08    	imul   ecx,DWORD PTR [eax],0x8590823
     4ca:	5a                   	pop    edx
     4cb:	08 59 69             	or     BYTE PTR [ecx+0x69],bl
     4ce:	08 23                	or     BYTE PTR [ebx],ah
     4d0:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     4d3:	5a                   	pop    edx
     4d4:	08 59 02             	or     BYTE PTR [ecx+0x2],bl
     4d7:	06                   	push   es
     4d8:	00 01                	add    BYTE PTR [ecx],al
     4da:	01 64 01 00          	add    DWORD PTR [ecx+eax*1+0x0],esp
     4de:	00 02                	add    BYTE PTR [edx],al
     4e0:	00 ea                	add    dl,ch
     4e2:	00 00                	add    BYTE PTR [eax],al
     4e4:	00 01                	add    BYTE PTR [ecx],al
     4e6:	01 fb                	add    ebx,edi
     4e8:	0e                   	push   cs
     4e9:	0d 00 01 01 01       	or     eax,0x1010100
     4ee:	01 00                	add    DWORD PTR [eax],eax
     4f0:	00 00                	add    BYTE PTR [eax],al
     4f2:	01 00                	add    DWORD PTR [eax],eax
     4f4:	00 01                	add    BYTE PTR [ecx],al
     4f6:	73 72                	jae    56a <sysEnter_Vector-0x12fa96>
     4f8:	63 00                	arpl   WORD PTR [eax],ax
     4fa:	2f                   	das    
     4fb:	68 6f 6d 65 2f       	push   0x2f656d6f
     500:	79 6f                	jns    571 <sysEnter_Vector-0x12fa8f>
     502:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     509:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     50c:	73 73                	jae    581 <sysEnter_Vector-0x12fa7f>
     50e:	2f                   	das    
     50f:	6c                   	ins    BYTE PTR es:[edi],dx
     510:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     517:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     51d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     523:	78 2d                	js     552 <sysEnter_Vector-0x12faae>
     525:	67 6e                	outs   dx,BYTE PTR ds:[si]
     527:	75 2f                	jne    558 <sysEnter_Vector-0x12faa8>
     529:	35 2e 33 2e 30       	xor    eax,0x302e332e
     52e:	2f                   	das    
     52f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     536:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     539:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     53d:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     541:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     545:	65                   	gs
     546:	2f                   	das    
     547:	2e                   	cs
     548:	2e                   	cs
     549:	2f                   	das    
     54a:	2e                   	cs
     54b:	2e                   	cs
     54c:	2f                   	das    
     54d:	2e                   	cs
     54e:	2e                   	cs
     54f:	2f                   	das    
     550:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     554:	6a 2f                	push   0x2f
     556:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     559:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     560:	6e                   	outs   dx,BYTE PTR ds:[esi]
     561:	65                   	gs
     562:	6c                   	ins    BYTE PTR es:[edi],dx
     563:	2f                   	das    
     564:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     56b:	00 00                	add    BYTE PTR [eax],al
     56d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     56f:	76 69                	jbe    5da <sysEnter_Vector-0x12fa26>
     571:	72 6f                	jb     5e2 <sysEnter_Vector-0x12fa1e>
     573:	6e                   	outs   dx,BYTE PTR ds:[esi]
     574:	6d                   	ins    DWORD PTR es:[edi],dx
     575:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     577:	74 2e                	je     5a7 <sysEnter_Vector-0x12fa59>
     579:	63 00                	arpl   WORD PTR [eax],ax
     57b:	01 00                	add    DWORD PTR [eax],eax
     57d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     580:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     587:	63 
     588:	2e                   	cs
     589:	68 00 02 00 00       	push   0x200
     58e:	73 74                	jae    604 <sysEnter_Vector-0x12f9fc>
     590:	64                   	fs
     591:	64                   	fs
     592:	65                   	gs
     593:	66                   	data16
     594:	2e                   	cs
     595:	68 00 02 00 00       	push   0x200
     59a:	6d                   	ins    DWORD PTR es:[edi],dx
     59b:	61                   	popa   
     59c:	6c                   	ins    BYTE PTR es:[edi],dx
     59d:	6c                   	ins    BYTE PTR es:[edi],dx
     59e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     59f:	63 2e                	arpl   WORD PTR [esi],bp
     5a1:	68 00 03 00 00       	push   0x300
     5a6:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     5ad:	03 00                	add    eax,DWORD PTR [eax]
     5af:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     5b3:	43                   	inc    ebx
     5b4:	68 72 69 73 4f       	push   0x4f736972
     5b9:	53                   	push   ebx
     5ba:	2e                   	cs
     5bb:	68 00 03 00 00       	push   0x300
     5c0:	73 79                	jae    63b <sysEnter_Vector-0x12f9c5>
     5c2:	73 63                	jae    627 <sysEnter_Vector-0x12f9d9>
     5c4:	61                   	popa   
     5c5:	6c                   	ins    BYTE PTR es:[edi],dx
     5c6:	6c                   	ins    BYTE PTR es:[edi],dx
     5c7:	73 2e                	jae    5f7 <sysEnter_Vector-0x12fa09>
     5c9:	68 00 04 00 00       	push   0x400
     5ce:	00 00                	add    BYTE PTR [eax],al
     5d0:	05 02 08 06 00       	add    eax,0x60802
     5d5:	9f                   	lahf   
     5d6:	03 09                	add    ecx,DWORD PTR [ecx]
     5d8:	01 08                	add    DWORD PTR [eax],ecx
     5da:	21 91 02 36 14 02    	and    DWORD PTR [ecx+0x2143602],edx
     5e0:	39 13                	cmp    DWORD PTR [ebx],edx
     5e2:	00 02                	add    BYTE PTR [edx],al
     5e4:	04 02                	add    al,0x2
     5e6:	7e 00                	jle    5e8 <sysEnter_Vector-0x12fa18>
     5e8:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     5eb:	06                   	push   es
     5ec:	4a                   	dec    edx
     5ed:	06                   	push   es
     5ee:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     5ef:	59                   	pop    ecx
     5f0:	5b                   	pop    ebx
     5f1:	f3 08 13             	repz or BYTE PTR [ebx],dl
     5f4:	31 08                	xor    DWORD PTR [eax],ecx
     5f6:	21 76 bb             	and    DWORD PTR [esi-0x45],esi
     5f9:	08 92 08 4b 02 36    	or     BYTE PTR [edx+0x36024b08],dl
     5ff:	14 08                	adc    al,0x8
     601:	f3 02 25 13 08 f3 00 	repz add ah,BYTE PTR ds:0xf30813
     608:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     60b:	03 77 58             	add    esi,DWORD PTR [edi+0x58]
     60e:	00 02                	add    BYTE PTR [edx],al
     610:	04 01                	add    al,0x1
     612:	06                   	push   es
     613:	4a                   	dec    edx
     614:	06                   	push   es
     615:	03 0c 9e             	add    ecx,DWORD PTR [esi+ebx*4]
     618:	bb 08 92 08 9f       	mov    ebx,0x9f089208
     61d:	08 f3                	or     bl,dh
     61f:	02 25 13 08 f3 00    	add    ah,BYTE PTR ds:0xf30813
     625:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     628:	03 79 2e             	add    edi,DWORD PTR [ecx+0x2e]
     62b:	00 02                	add    BYTE PTR [edx],al
     62d:	04 01                	add    al,0x1
     62f:	06                   	push   es
     630:	4a                   	dec    edx
     631:	06                   	push   es
     632:	03 0b                	add    ecx,DWORD PTR [ebx]
     634:	9e                   	sahf   
     635:	5b                   	pop    ebx
     636:	08 13                	or     BYTE PTR [ebx],dl
     638:	08 5a 5b             	or     BYTE PTR [edx+0x5b],bl
     63b:	f3 08 13             	repz or BYTE PTR [ebx],dl
     63e:	02 02                	add    al,BYTE PTR [edx]
     640:	00 01                	add    BYTE PTR [ecx],al
     642:	01 c4                	add    esp,eax
     644:	01 00                	add    DWORD PTR [eax],eax
     646:	00 02                	add    BYTE PTR [edx],al
     648:	00 e3                	add    bl,ah
     64a:	00 00                	add    BYTE PTR [eax],al
     64c:	00 01                	add    BYTE PTR [ecx],al
     64e:	01 fb                	add    ebx,edi
     650:	0e                   	push   cs
     651:	0d 00 01 01 01       	or     eax,0x1010100
     656:	01 00                	add    DWORD PTR [eax],eax
     658:	00 00                	add    BYTE PTR [eax],al
     65a:	01 00                	add    DWORD PTR [eax],eax
     65c:	00 01                	add    BYTE PTR [ecx],al
     65e:	73 72                	jae    6d2 <sysEnter_Vector-0x12f92e>
     660:	63 00                	arpl   WORD PTR [eax],ax
     662:	2f                   	das    
     663:	68 6f 6d 65 2f       	push   0x2f656d6f
     668:	79 6f                	jns    6d9 <sysEnter_Vector-0x12f927>
     66a:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     671:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     674:	73 73                	jae    6e9 <sysEnter_Vector-0x12f917>
     676:	2f                   	das    
     677:	6c                   	ins    BYTE PTR es:[edi],dx
     678:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     67f:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     685:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     68b:	78 2d                	js     6ba <sysEnter_Vector-0x12f946>
     68d:	67 6e                	outs   dx,BYTE PTR ds:[si]
     68f:	75 2f                	jne    6c0 <sysEnter_Vector-0x12f940>
     691:	35 2e 33 2e 30       	xor    eax,0x302e332e
     696:	2f                   	das    
     697:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     69e:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     6a1:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     6a5:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     6a9:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     6ad:	65                   	gs
     6ae:	2f                   	das    
     6af:	2e                   	cs
     6b0:	2e                   	cs
     6b1:	2f                   	das    
     6b2:	2e                   	cs
     6b3:	2e                   	cs
     6b4:	2f                   	das    
     6b5:	2e                   	cs
     6b6:	2e                   	cs
     6b7:	2f                   	das    
     6b8:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     6bc:	6a 2f                	push   0x2f
     6be:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     6c1:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     6c8:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6c9:	65                   	gs
     6ca:	6c                   	ins    BYTE PTR es:[edi],dx
     6cb:	2f                   	das    
     6cc:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     6d3:	00 00                	add    BYTE PTR [eax],al
     6d5:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     6dc:	01 00                	add    DWORD PTR [eax],eax
     6de:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     6e1:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     6e8:	63 
     6e9:	2e                   	cs
     6ea:	68 00 02 00 00       	push   0x200
     6ef:	73 74                	jae    765 <sysEnter_Vector-0x12f89b>
     6f1:	64                   	fs
     6f2:	64                   	fs
     6f3:	65                   	gs
     6f4:	66                   	data16
     6f5:	2e                   	cs
     6f6:	68 00 02 00 00       	push   0x200
     6fb:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     702:	03 00                	add    eax,DWORD PTR [eax]
     704:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     707:	6c                   	ins    BYTE PTR es:[edi],dx
     708:	6c                   	ins    BYTE PTR es:[edi],dx
     709:	6f                   	outs   dx,DWORD PTR ds:[esi]
     70a:	63 2e                	arpl   WORD PTR [esi],bp
     70c:	68 00 03 00 00       	push   0x300
     711:	6c                   	ins    BYTE PTR es:[edi],dx
     712:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     719:	4f                   	dec    edi
     71a:	53                   	push   ebx
     71b:	2e                   	cs
     71c:	68 00 03 00 00       	push   0x300
     721:	73 79                	jae    79c <sysEnter_Vector-0x12f864>
     723:	73 63                	jae    788 <sysEnter_Vector-0x12f878>
     725:	61                   	popa   
     726:	6c                   	ins    BYTE PTR es:[edi],dx
     727:	6c                   	ins    BYTE PTR es:[edi],dx
     728:	73 2e                	jae    758 <sysEnter_Vector-0x12f8a8>
     72a:	68 00 04 00 00       	push   0x400
     72f:	00 00                	add    BYTE PTR [eax],al
     731:	05 02 e8 08 00       	add    eax,0x8e802
     736:	9f                   	lahf   
     737:	03 0e                	add    ecx,DWORD PTR [esi]
     739:	01 08                	add    DWORD PTR [eax],ecx
     73b:	13 08                	adc    ecx,DWORD PTR [eax]
     73d:	9f                   	lahf   
     73e:	5b                   	pop    ebx
     73f:	08 14 08             	or     BYTE PTR [eax+ecx*1],dl
     742:	59                   	pop    ecx
     743:	5b                   	pop    ebx
     744:	08 21                	or     BYTE PTR [ecx],ah
     746:	2f                   	das    
     747:	08 d5                	or     ch,dl
     749:	bc 08 3d 69 08       	mov    esp,0x8693d08
     74e:	2f                   	das    
     74f:	75 08                	jne    759 <sysEnter_Vector-0x12f8a7>
     751:	83 67 75 bc          	and    DWORD PTR [edi+0x75],0xffffffbc
     755:	08 68 02             	or     BYTE PTR [eax+0x2],ch
     758:	26 13 3d 77 08 13 08 	adc    edi,DWORD PTR es:0x8130877
     75f:	2f                   	das    
     760:	69 e5 08 d7 77 f3    	imul   esp,ebp,0xf377d708
     766:	08 3d 31 e5 08 d7    	or     BYTE PTR ds:0xd708e531,bh
     76c:	77 f3                	ja     761 <sysEnter_Vector-0x12f89f>
     76e:	08 3d 31 08 13 08    	or     BYTE PTR ds:0x8130831,bh
     774:	75 5b                	jne    7d1 <sysEnter_Vector-0x12f82f>
     776:	f3 08 3d 30 08 13 08 	repz or BYTE PTR ds:0x8130830,bh
     77d:	67 5b                	addr16 pop ebx
     77f:	f3 08 13             	repz or BYTE PTR [ebx],dl
     782:	31 08                	xor    DWORD PTR [eax],ecx
     784:	21 68 77             	and    DWORD PTR [eax+0x77],ebp
     787:	bb 08 91 bb 08       	mov    ebx,0x8bb9108
     78c:	91                   	xchg   ecx,eax
     78d:	bb 08 91 bb 08       	mov    ebx,0x8bb9108
     792:	95                   	xchg   ebp,eax
     793:	08 a0 08 84 08 84    	or     BYTE PTR [eax-0x7bf77bf8],ah
     799:	a0 08 67 08 4c       	mov    al,ds:0x4c086708
     79e:	08 13                	or     BYTE PTR [ebx],dl
     7a0:	be 08 67 08 9f       	mov    esi,0x9f086708
     7a5:	5a                   	pop    edx
     7a6:	08 67 08             	or     BYTE PTR [edi+0x8],ah
     7a9:	d7                   	xlat   BYTE PTR ds:[ebx]
     7aa:	08 9f 08 67 08 9f    	or     BYTE PTR [edi-0x60f798f8],bl
     7b0:	68 08 67 75 30       	push   0x30756708
     7b5:	03 73 08             	add    esi,DWORD PTR [ebx+0x8]
     7b8:	3c 03                	cmp    al,0x3
     7ba:	10 9e a0 08 bb 08    	adc    BYTE PTR [esi+0x8bb08a0],bl
     7c0:	9f                   	lahf   
     7c1:	08 67 08             	or     BYTE PTR [edi+0x8],ah
     7c4:	9f                   	lahf   
     7c5:	68 08 67 79 3d       	push   0x3d796708
     7ca:	5b                   	pop    ebx
     7cb:	08 13                	or     BYTE PTR [ebx],dl
     7cd:	08 2f                	or     BYTE PTR [edi],ch
     7cf:	5b                   	pop    ebx
     7d0:	f3 d7                	repz xlat BYTE PTR ds:[ebx]
     7d2:	31 08                	xor    DWORD PTR [eax],ecx
     7d4:	22 75 75             	and    dh,BYTE PTR [ebp+0x75]
     7d7:	75 83                	jne    75c <sysEnter_Vector-0x12f8a4>
     7d9:	83 08 13             	or     DWORD PTR [eax],0x13
     7dc:	76 08                	jbe    7e6 <sysEnter_Vector-0x12f81a>
     7de:	30 5a 08             	xor    BYTE PTR [edx+0x8],bl
     7e1:	ca 08 91             	retf   0x9108
     7e4:	08 d7                	or     bh,dl
     7e6:	08 91 08 f3 08 d7    	or     BYTE PTR [ecx-0x28f70cf8],dl
     7ec:	c9                   	leave  
     7ed:	08 83 83 67 67 32    	or     BYTE PTR [ebx+0x32676783],al
     7f3:	67 67 08 21          	addr32 or BYTE PTR [bx+di],ah
     7f7:	03 6b 08             	add    ebp,DWORD PTR [ebx+0x8]
     7fa:	66 03 1a             	add    bx,WORD PTR [edx]
     7fd:	02 22                	add    ah,BYTE PTR [edx]
     7ff:	01 d7                	add    edi,edx
     801:	3d 5b f3 08 3d       	cmp    eax,0x3d08f35b
     806:	02 02                	add    al,BYTE PTR [edx]
     808:	00 01                	add    BYTE PTR [ecx],al
     80a:	01 33                	add    DWORD PTR [ebx],esi
     80c:	01 00                	add    DWORD PTR [eax],eax
     80e:	00 02                	add    BYTE PTR [edx],al
     810:	00 de                	add    dh,bl
     812:	00 00                	add    BYTE PTR [eax],al
     814:	00 01                	add    BYTE PTR [ecx],al
     816:	01 fb                	add    ebx,edi
     818:	0e                   	push   cs
     819:	0d 00 01 01 01       	or     eax,0x1010100
     81e:	01 00                	add    DWORD PTR [eax],eax
     820:	00 00                	add    BYTE PTR [eax],al
     822:	01 00                	add    DWORD PTR [eax],eax
     824:	00 01                	add    BYTE PTR [ecx],al
     826:	73 72                	jae    89a <sysEnter_Vector-0x12f766>
     828:	63 2f                	arpl   WORD PTR [edi],bp
     82a:	69 6e 70 75 74 00 2f 	imul   ebp,DWORD PTR [esi+0x70],0x2f007475
     831:	68 6f 6d 65 2f       	push   0x2f656d6f
     836:	79 6f                	jns    8a7 <sysEnter_Vector-0x12f759>
     838:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     83f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     842:	73 73                	jae    8b7 <sysEnter_Vector-0x12f749>
     844:	2f                   	das    
     845:	6c                   	ins    BYTE PTR es:[edi],dx
     846:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     84d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     853:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     859:	78 2d                	js     888 <sysEnter_Vector-0x12f778>
     85b:	67 6e                	outs   dx,BYTE PTR ds:[si]
     85d:	75 2f                	jne    88e <sysEnter_Vector-0x12f772>
     85f:	35 2e 33 2e 30       	xor    eax,0x302e332e
     864:	2f                   	das    
     865:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     86c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     86f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     873:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     877:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     87b:	65                   	gs
     87c:	2f                   	das    
     87d:	2e                   	cs
     87e:	2e                   	cs
     87f:	2f                   	das    
     880:	2e                   	cs
     881:	2e                   	cs
     882:	2f                   	das    
     883:	2e                   	cs
     884:	2e                   	cs
     885:	2f                   	das    
     886:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     88a:	6a 2f                	push   0x2f
     88c:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     88f:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     896:	6e                   	outs   dx,BYTE PTR ds:[esi]
     897:	65                   	gs
     898:	6c                   	ins    BYTE PTR es:[edi],dx
     899:	2f                   	das    
     89a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     8a1:	00 00                	add    BYTE PTR [eax],al
     8a3:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     8aa:	00 01                	add    BYTE PTR [ecx],al
     8ac:	00 00                	add    BYTE PTR [eax],al
     8ae:	73 74                	jae    924 <sysEnter_Vector-0x12f6dc>
     8b0:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     8b7:	63 
     8b8:	2e                   	cs
     8b9:	68 00 02 00 00       	push   0x200
     8be:	6d                   	ins    DWORD PTR es:[edi],dx
     8bf:	61                   	popa   
     8c0:	6c                   	ins    BYTE PTR es:[edi],dx
     8c1:	6c                   	ins    BYTE PTR es:[edi],dx
     8c2:	6f                   	outs   dx,DWORD PTR ds:[esi]
     8c3:	63 2e                	arpl   WORD PTR [esi],bp
     8c5:	68 00 03 00 00       	push   0x300
     8ca:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     8d1:	03 00                	add    eax,DWORD PTR [eax]
     8d3:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     8d7:	43                   	inc    ebx
     8d8:	68 72 69 73 4f       	push   0x4f736972
     8dd:	53                   	push   ebx
     8de:	2e                   	cs
     8df:	68 00 03 00 00       	push   0x300
     8e4:	73 79                	jae    95f <sysEnter_Vector-0x12f6a1>
     8e6:	73 63                	jae    94b <sysEnter_Vector-0x12f6b5>
     8e8:	61                   	popa   
     8e9:	6c                   	ins    BYTE PTR es:[edi],dx
     8ea:	6c                   	ins    BYTE PTR es:[edi],dx
     8eb:	73 2e                	jae    91b <sysEnter_Vector-0x12f6e5>
     8ed:	68 00 04 00 00       	push   0x400
     8f2:	00 00                	add    BYTE PTR [eax],al
     8f4:	05 02 dc 10 00       	add    eax,0x10dc02
     8f9:	9f                   	lahf   
     8fa:	03 0f                	add    ecx,DWORD PTR [edi]
     8fc:	01 d7                	add    edi,edx
     8fe:	08 3d 4d 08 67 68    	or     BYTE PTR ds:0x6867084d,bh
     904:	75 4b                	jne    951 <sysEnter_Vector-0x12f6af>
     906:	08 3d 79 08 16 08    	or     BYTE PTR ds:0x8160879,bh
     90c:	3d 67 67 9f 30       	cmp    eax,0x309f6767
     911:	6a 08                	push   0x8
     913:	14 77                	adc    al,0x77
     915:	ad                   	lods   eax,DWORD PTR ds:[esi]
     916:	68 00 02 04 01       	push   0x1040200
     91b:	08 67 33             	or     BYTE PTR [edi+0x33],ah
     91e:	08 3d 00 02 04 01    	or     BYTE PTR ds:0x1040200,bh
     924:	06                   	push   es
     925:	66 06                	pushw  es
     927:	68 ad 68 68 76       	push   0x766868ad
     92c:	08 5a 00             	or     BYTE PTR [edx+0x0],bl
     92f:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     932:	06                   	push   es
     933:	ac                   	lods   al,BYTE PTR ds:[esi]
     934:	06                   	push   es
     935:	68 5b 00 02 04       	push   0x402005b
     93a:	02 a3 2f 02 05 00    	add    ah,BYTE PTR [ebx+0x5022f]
     940:	01 01                	add    DWORD PTR [ecx],eax
     942:	b2 02                	mov    dl,0x2
     944:	00 00                	add    BYTE PTR [eax],al
     946:	02 00                	add    al,BYTE PTR [eax]
     948:	f5                   	cmc    
     949:	00 00                	add    BYTE PTR [eax],al
     94b:	00 01                	add    BYTE PTR [ecx],al
     94d:	01 fb                	add    ebx,edi
     94f:	0e                   	push   cs
     950:	0d 00 01 01 01       	or     eax,0x1010100
     955:	01 00                	add    DWORD PTR [eax],eax
     957:	00 00                	add    BYTE PTR [eax],al
     959:	01 00                	add    DWORD PTR [eax],eax
     95b:	00 01                	add    BYTE PTR [ecx],al
     95d:	73 72                	jae    9d1 <sysEnter_Vector-0x12f62f>
     95f:	63 00                	arpl   WORD PTR [eax],ax
     961:	2f                   	das    
     962:	68 6f 6d 65 2f       	push   0x2f656d6f
     967:	79 6f                	jns    9d8 <sysEnter_Vector-0x12f628>
     969:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     970:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     973:	73 73                	jae    9e8 <sysEnter_Vector-0x12f618>
     975:	2f                   	das    
     976:	6c                   	ins    BYTE PTR es:[edi],dx
     977:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     97e:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     984:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     98a:	78 2d                	js     9b9 <sysEnter_Vector-0x12f647>
     98c:	67 6e                	outs   dx,BYTE PTR ds:[si]
     98e:	75 2f                	jne    9bf <sysEnter_Vector-0x12f641>
     990:	35 2e 33 2e 30       	xor    eax,0x302e332e
     995:	2f                   	das    
     996:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     99d:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     9a0:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     9a4:	65                   	gs
     9a5:	2f                   	das    
     9a6:	2e                   	cs
     9a7:	2e                   	cs
     9a8:	2f                   	das    
     9a9:	2e                   	cs
     9aa:	2e                   	cs
     9ab:	2f                   	das    
     9ac:	2e                   	cs
     9ad:	2e                   	cs
     9ae:	2f                   	das    
     9af:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     9b3:	6a 2f                	push   0x2f
     9b5:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     9b8:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     9bf:	6e                   	outs   dx,BYTE PTR ds:[esi]
     9c0:	65                   	gs
     9c1:	6c                   	ins    BYTE PTR es:[edi],dx
     9c2:	2f                   	das    
     9c3:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     9ca:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     9cd:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     9d1:	65 00 00             	add    BYTE PTR gs:[eax],al
     9d4:	6c                   	ins    BYTE PTR es:[edi],dx
     9d5:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     9dc:	4f                   	dec    edi
     9dd:	53                   	push   ebx
     9de:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     9e1:	01 00                	add    DWORD PTR [eax],eax
     9e3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     9e6:	64                   	fs
     9e7:	61                   	popa   
     9e8:	72 67                	jb     a51 <sysEnter_Vector-0x12f5af>
     9ea:	2e                   	cs
     9eb:	68 00 02 00 00       	push   0x200
     9f0:	73 74                	jae    a66 <sysEnter_Vector-0x12f59a>
     9f2:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     9f9:	63 
     9fa:	2e                   	cs
     9fb:	68 00 02 00 00       	push   0x200
     a00:	73 74                	jae    a76 <sysEnter_Vector-0x12f58a>
     a02:	64                   	fs
     a03:	64                   	fs
     a04:	65                   	gs
     a05:	66                   	data16
     a06:	2e                   	cs
     a07:	68 00 02 00 00       	push   0x200
     a0c:	73 79                	jae    a87 <sysEnter_Vector-0x12f579>
     a0e:	73 63                	jae    a73 <sysEnter_Vector-0x12f58d>
     a10:	61                   	popa   
     a11:	6c                   	ins    BYTE PTR es:[edi],dx
     a12:	6c                   	ins    BYTE PTR es:[edi],dx
     a13:	73 2e                	jae    a43 <sysEnter_Vector-0x12f5bd>
     a15:	68 00 03 00 00       	push   0x300
     a1a:	6d                   	ins    DWORD PTR es:[edi],dx
     a1b:	61                   	popa   
     a1c:	6c                   	ins    BYTE PTR es:[edi],dx
     a1d:	6c                   	ins    BYTE PTR es:[edi],dx
     a1e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a1f:	63 2e                	arpl   WORD PTR [esi],bp
     a21:	68 00 04 00 00       	push   0x400
     a26:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     a2d:	04 00                	add    al,0x0
     a2f:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     a33:	43                   	inc    ebx
     a34:	68 72 69 73 4f       	push   0x4f736972
     a39:	53                   	push   ebx
     a3a:	2e                   	cs
     a3b:	68 00 04 00 00       	push   0x400
     a40:	00 00                	add    BYTE PTR [eax],al
     a42:	05 02 48 12 00       	add    eax,0x124802
     a47:	9f                   	lahf   
     a48:	03 11                	add    edx,DWORD PTR [ecx]
     a4a:	01 08                	add    DWORD PTR [eax],ecx
     a4c:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
     a4f:	67 3d 77 08 21 75    	addr16 cmp eax,0x75210877
     a55:	08 83 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],al
     a5b:	75 08                	jne    a65 <sysEnter_Vector-0x12f59b>
     a5d:	9f                   	lahf   
     a5e:	3d 77 08 21 75       	cmp    eax,0x75210877
     a63:	08 bb 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],bh
     a69:	75 08                	jne    a73 <sysEnter_Vector-0x12f58d>
     a6b:	d7                   	xlat   BYTE PTR ds:[ebx]
     a6c:	3d 77 08 21 08       	cmp    eax,0x8210877
     a71:	67 d8 59 bd          	fcomp  DWORD PTR [bx+di-0x43]
     a75:	c9                   	leave  
     a76:	c9                   	leave  
     a77:	08 67 75             	or     BYTE PTR [edi+0x75],ah
     a7a:	08 91 08 6a 2d 08    	or     BYTE PTR [ecx+0x82d6a08],dl
     a80:	21 69 08             	and    DWORD PTR [ecx+0x8],ebp
     a83:	21 59 59             	and    DWORD PTR [ecx+0x59],ebx
     a86:	77 08                	ja     a90 <sysEnter_Vector-0x12f570>
     a88:	22 68 08             	and    ch,BYTE PTR [eax+0x8]
     a8b:	c9                   	leave  
     a8c:	08 83 59 5b 08 22    	or     BYTE PTR [ebx+0x22085b59],al
     a92:	68 08 c9 08 83       	push   0x8308c908
     a97:	5b                   	pop    ebx
     a98:	08 22                	or     BYTE PTR [edx],ah
     a9a:	68 08 c9 08 83       	push   0x8308c908
     a9f:	5b                   	pop    ebx
     aa0:	f4                   	hlt    
     aa1:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     aa5:	31 f4                	xor    esp,esi
     aa7:	68 08 91 5a 31       	push   0x315a9108
     aac:	f4                   	hlt    
     aad:	68 08 91 5a 31       	push   0x315a9108
     ab2:	08 21                	or     BYTE PTR [ecx],ah
     ab4:	02 57 13             	add    dl,BYTE PTR [edi+0x13]
     ab7:	77 08                	ja     ac1 <sysEnter_Vector-0x12f53f>
     ab9:	21 02                	and    DWORD PTR [edx],eax
     abb:	57                   	push   edi
     abc:	14 77                	adc    al,0x77
     abe:	c9                   	leave  
     abf:	c9                   	leave  
     ac0:	3f                   	aas    
     ac1:	c9                   	leave  
     ac2:	08 83 3f f3 76 c9    	or     BYTE PTR [ebx-0x36890cc1],al
     ac8:	3d 31 f3 75 08       	cmp    eax,0x875f331
     acd:	67 08 83 3d 31       	or     BYTE PTR [bp+di+0x313d],al
     ad2:	08 21                	or     BYTE PTR [ecx],ah
     ad4:	d8 bc 08 31 08 75 68 	fdivr  DWORD PTR [eax+ecx*1+0x68750831]
     adb:	67 02 22             	add    ah,BYTE PTR [bp+si]
     ade:	14 08                	adc    al,0x8
     ae0:	ae                   	scas   al,BYTE PTR es:[edi]
     ae1:	4c                   	dec    esp
     ae2:	ca 08 4b             	retf   0x4b08
     ae5:	91                   	xchg   ecx,eax
     ae6:	67 bc 08 83 08 75    	addr16 mov esp,0x75088308
     aec:	67 02 2f             	add    ch,BYTE PTR [bx]
     aef:	14 00                	adc    al,0x0
     af1:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     af4:	02 31                	add    dh,BYTE PTR [ecx]
     af6:	13 00                	adc    eax,DWORD PTR [eax]
     af8:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     afb:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     b01:	bb 00 02 04 02       	mov    ebx,0x2040200
     b06:	03 76 4a             	add    esi,DWORD PTR [esi+0x4a]
     b09:	00 02                	add    BYTE PTR [edx],al
     b0b:	04 01                	add    al,0x1
     b0d:	06                   	push   es
     b0e:	4a                   	dec    edx
     b0f:	06                   	push   es
     b10:	03 0c ba             	add    ecx,DWORD PTR [edx+edi*4]
     b13:	08 91 08 b0 3f 5b    	or     BYTE PTR [ecx+0x5b3fb008],dl
     b19:	f3 75 08             	repz jne b24 <sysEnter_Vector-0x12f4dc>
     b1c:	67 08 ad 3d 31       	or     BYTE PTR [di+0x313d],ch
     b21:	c9                   	leave  
     b22:	c9                   	leave  
     b23:	32 c9                	xor    cl,cl
     b25:	f3 3f                	repz aas 
     b27:	c9                   	leave  
     b28:	08 13                	or     BYTE PTR [ebx],dl
     b2a:	31 f5                	xor    ebp,esi
     b2c:	75 76                	jne    ba4 <sysEnter_Vector-0x12f45c>
     b2e:	ad                   	lods   eax,DWORD PTR ds:[esi]
     b2f:	bb 08 68 08 5c       	mov    ebx,0x5c086808
     b34:	67 75 91             	addr16 jne ac8 <sysEnter_Vector-0x12f538>
     b37:	5a                   	pop    edx
     b38:	75 67                	jne    ba1 <sysEnter_Vector-0x12f45f>
     b3a:	31 67 67             	xor    DWORD PTR [edi+0x67],esp
     b3d:	08 91 76 31 08 21    	or     BYTE PTR [ecx+0x21083176],dl
     b43:	67 08 91 76 03       	or     BYTE PTR [bx+di+0x376],dl
     b48:	66 2e 03 12          	add    dx,WORD PTR cs:[edx]
     b4c:	3c 44                	cmp    al,0x44
     b4e:	00 02                	add    BYTE PTR [edx],al
     b50:	04 02                	add    al,0x2
     b52:	03 61 20             	add    esp,DWORD PTR [ecx+0x20]
     b55:	00 02                	add    BYTE PTR [edx],al
     b57:	04 01                	add    al,0x1
     b59:	06                   	push   es
     b5a:	4a                   	dec    edx
     b5b:	00 02                	add    BYTE PTR [edx],al
     b5d:	04 03                	add    al,0x3
     b5f:	82                   	(bad)  
     b60:	06                   	push   es
     b61:	03 23                	add    esp,DWORD PTR [ebx]
     b63:	d6                   	(bad)  
     b64:	00 02                	add    BYTE PTR [edx],al
     b66:	04 01                	add    al,0x1
     b68:	06                   	push   es
     b69:	66 06                	pushw  es
     b6b:	83 08 92             	or     DWORD PTR [eax],0xffffff92
     b6e:	3d 31 c9 08 13       	cmp    eax,0x1308c931
     b73:	31 08                	xor    DWORD PTR [eax],ecx
     b75:	5b                   	pop    ebx
     b76:	08 9f d7 92 08 91    	or     BYTE PTR [edi-0x6ef76d29],bl
     b7c:	08 23                	or     BYTE PTR [ebx],ah
     b7e:	08 bb 08 75 00 02    	or     BYTE PTR [ebx+0x2007508],bh
     b84:	04 01                	add    al,0x1
     b86:	06                   	push   es
     b87:	66 06                	pushw  es
     b89:	84 67 08             	test   BYTE PTR [edi+0x8],ah
     b8c:	f3 c9                	repz leave 
     b8e:	84 4c c9 00          	test   BYTE PTR [ecx+ecx*8+0x0],cl
     b92:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     b95:	06                   	push   es
     b96:	66 06                	pushw  es
     b98:	9f                   	lahf   
     b99:	4c                   	dec    esp
     b9a:	00 02                	add    BYTE PTR [edx],al
     b9c:	04 01                	add    al,0x1
     b9e:	06                   	push   es
     b9f:	66 06                	pushw  es
     ba1:	d8 02                	fadd   DWORD PTR [edx]
     ba3:	27                   	daa    
     ba4:	13 ad 91 bc 08 83    	adc    ebp,DWORD PTR [ebp-0x7cf7436f]
     baa:	08 bb 00 02 04 01    	or     BYTE PTR [ebx+0x1040200],bh
     bb0:	06                   	push   es
     bb1:	9e                   	sahf   
     bb2:	06                   	push   es
     bb3:	84 67 08             	test   BYTE PTR [edi+0x8],ah
     bb6:	f3 c9                	repz leave 
     bb8:	62 5f 03             	bound  ebx,QWORD PTR [edi+0x3]
     bbb:	79 02                	jns    bbf <sysEnter_Vector-0x12f441>
     bbd:	34 01                	xor    al,0x1
     bbf:	03 0c 58             	add    ecx,DWORD PTR [eax+ebx*2]
     bc2:	08 75 67             	or     BYTE PTR [ebp+0x67],dh
     bc5:	02 2f                	add    ch,BYTE PTR [edi]
     bc7:	14 02                	adc    al,0x2
     bc9:	31 13                	xor    DWORD PTR [ebx],edx
     bcb:	00 02                	add    BYTE PTR [edx],al
     bcd:	04 02                	add    al,0x2
     bcf:	08 bc 00 02 04 02 bb 	or     BYTE PTR [eax+eax*1-0x44fdfbfe],bh
     bd6:	00 02                	add    BYTE PTR [edx],al
     bd8:	04 02                	add    al,0x2
     bda:	03 67 74             	add    esp,DWORD PTR [edi+0x74]
     bdd:	00 02                	add    BYTE PTR [edx],al
     bdf:	04 01                	add    al,0x1
     be1:	06                   	push   es
     be2:	4a                   	dec    edx
     be3:	06                   	push   es
     be4:	03 1b                	add    ebx,DWORD PTR [ebx]
     be6:	d6                   	(bad)  
     be7:	3d 77 f3 08 13       	cmp    eax,0x1308f377
     bec:	31 c9                	xor    ecx,ecx
     bee:	08 3d 31 c9 c9 02    	or     BYTE PTR ds:0x2c9c931,bh
     bf4:	02 00                	add    al,BYTE PTR [eax]
     bf6:	01 01                	add    DWORD PTR [ecx],eax
     bf8:	11 01                	adc    DWORD PTR [ecx],eax
     bfa:	00 00                	add    BYTE PTR [eax],al
     bfc:	02 00                	add    al,BYTE PTR [eax]
     bfe:	f2 00 00             	repnz add BYTE PTR [eax],al
     c01:	00 01                	add    BYTE PTR [ecx],al
     c03:	01 fb                	add    ebx,edi
     c05:	0e                   	push   cs
     c06:	0d 00 01 01 01       	or     eax,0x1010100
     c0b:	01 00                	add    DWORD PTR [eax],eax
     c0d:	00 00                	add    BYTE PTR [eax],al
     c0f:	01 00                	add    DWORD PTR [eax],eax
     c11:	00 01                	add    BYTE PTR [ecx],al
     c13:	73 72                	jae    c87 <sysEnter_Vector-0x12f379>
     c15:	63 00                	arpl   WORD PTR [eax],ax
     c17:	2f                   	das    
     c18:	68 6f 6d 65 2f       	push   0x2f656d6f
     c1d:	79 6f                	jns    c8e <sysEnter_Vector-0x12f372>
     c1f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     c26:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     c29:	73 73                	jae    c9e <sysEnter_Vector-0x12f362>
     c2b:	2f                   	das    
     c2c:	6c                   	ins    BYTE PTR es:[edi],dx
     c2d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     c34:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     c3a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     c40:	78 2d                	js     c6f <sysEnter_Vector-0x12f391>
     c42:	67 6e                	outs   dx,BYTE PTR ds:[si]
     c44:	75 2f                	jne    c75 <sysEnter_Vector-0x12f38b>
     c46:	35 2e 33 2e 30       	xor    eax,0x302e332e
     c4b:	2f                   	das    
     c4c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     c53:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     c56:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     c5a:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     c5e:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     c62:	65                   	gs
     c63:	2f                   	das    
     c64:	2e                   	cs
     c65:	2e                   	cs
     c66:	2f                   	das    
     c67:	2e                   	cs
     c68:	2e                   	cs
     c69:	2f                   	das    
     c6a:	2e                   	cs
     c6b:	2e                   	cs
     c6c:	2f                   	das    
     c6d:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     c71:	6a 2f                	push   0x2f
     c73:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     c76:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     c7d:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c7e:	65                   	gs
     c7f:	6c                   	ins    BYTE PTR es:[edi],dx
     c80:	2f                   	das    
     c81:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     c88:	00 00                	add    BYTE PTR [eax],al
     c8a:	6c                   	ins    BYTE PTR es:[edi],dx
     c8b:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
     c92:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     c95:	01 00                	add    DWORD PTR [eax],eax
     c97:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     c9a:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     ca1:	63 
     ca2:	2e                   	cs
     ca3:	68 00 02 00 00       	push   0x200
     ca8:	73 74                	jae    d1e <sysEnter_Vector-0x12f2e2>
     caa:	64                   	fs
     cab:	64                   	fs
     cac:	65                   	gs
     cad:	66                   	data16
     cae:	2e                   	cs
     caf:	68 00 02 00 00       	push   0x200
     cb4:	74 79                	je     d2f <sysEnter_Vector-0x12f2d1>
     cb6:	70 65                	jo     d1d <sysEnter_Vector-0x12f2e3>
     cb8:	73 2e                	jae    ce8 <sysEnter_Vector-0x12f318>
     cba:	68 00 03 00 00       	push   0x300
     cbf:	73 79                	jae    d3a <sysEnter_Vector-0x12f2c6>
     cc1:	73 63                	jae    d26 <sysEnter_Vector-0x12f2da>
     cc3:	61                   	popa   
     cc4:	6c                   	ins    BYTE PTR es:[edi],dx
     cc5:	6c                   	ins    BYTE PTR es:[edi],dx
     cc6:	73 2e                	jae    cf6 <sysEnter_Vector-0x12f30a>
     cc8:	68 00 04 00 00       	push   0x400
     ccd:	6d                   	ins    DWORD PTR es:[edi],dx
     cce:	61                   	popa   
     ccf:	6c                   	ins    BYTE PTR es:[edi],dx
     cd0:	6c                   	ins    BYTE PTR es:[edi],dx
     cd1:	6f                   	outs   dx,DWORD PTR ds:[esi]
     cd2:	63 2e                	arpl   WORD PTR [esi],bp
     cd4:	68 00 03 00 00       	push   0x300
     cd9:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     ce0:	03 00                	add    eax,DWORD PTR [eax]
     ce2:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     ce6:	43                   	inc    ebx
     ce7:	68 72 69 73 4f       	push   0x4f736972
     cec:	53                   	push   ebx
     ced:	2e                   	cs
     cee:	68 00 03 00 00       	push   0x300
     cf3:	00 00                	add    BYTE PTR [eax],al
     cf5:	05 02 0c 1f 00       	add    eax,0x1f0c02
     cfa:	9f                   	lahf   
     cfb:	03 0d 01 08 14 ad    	add    ecx,DWORD PTR ds:0xad140801
     d01:	bb bb bb bb bc       	mov    ebx,0xbcbbbbbb
     d06:	08 59 02             	or     BYTE PTR [ecx+0x2],bl
     d09:	05 00 01 01 d8       	add    eax,0xd8010100
     d0e:	01 00                	add    DWORD PTR [eax],eax
     d10:	00 02                	add    BYTE PTR [edx],al
     d12:	00 e5                	add    ch,ah
     d14:	00 00                	add    BYTE PTR [eax],al
     d16:	00 01                	add    BYTE PTR [ecx],al
     d18:	01 fb                	add    ebx,edi
     d1a:	0e                   	push   cs
     d1b:	0d 00 01 01 01       	or     eax,0x1010100
     d20:	01 00                	add    DWORD PTR [eax],eax
     d22:	00 00                	add    BYTE PTR [eax],al
     d24:	01 00                	add    DWORD PTR [eax],eax
     d26:	00 01                	add    BYTE PTR [ecx],al
     d28:	73 72                	jae    d9c <sysEnter_Vector-0x12f264>
     d2a:	63 00                	arpl   WORD PTR [eax],ax
     d2c:	2f                   	das    
     d2d:	68 6f 6d 65 2f       	push   0x2f656d6f
     d32:	79 6f                	jns    da3 <sysEnter_Vector-0x12f25d>
     d34:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     d3b:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     d3e:	73 73                	jae    db3 <sysEnter_Vector-0x12f24d>
     d40:	2f                   	das    
     d41:	6c                   	ins    BYTE PTR es:[edi],dx
     d42:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     d49:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     d4f:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     d55:	78 2d                	js     d84 <sysEnter_Vector-0x12f27c>
     d57:	67 6e                	outs   dx,BYTE PTR ds:[si]
     d59:	75 2f                	jne    d8a <sysEnter_Vector-0x12f276>
     d5b:	35 2e 33 2e 30       	xor    eax,0x302e332e
     d60:	2f                   	das    
     d61:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d68:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     d6b:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     d6f:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     d73:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     d77:	65                   	gs
     d78:	2f                   	das    
     d79:	2e                   	cs
     d7a:	2e                   	cs
     d7b:	2f                   	das    
     d7c:	2e                   	cs
     d7d:	2e                   	cs
     d7e:	2f                   	das    
     d7f:	2e                   	cs
     d80:	2e                   	cs
     d81:	2f                   	das    
     d82:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     d86:	6a 2f                	push   0x2f
     d88:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     d8b:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     d92:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d93:	65                   	gs
     d94:	6c                   	ins    BYTE PTR es:[edi],dx
     d95:	2f                   	das    
     d96:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d9d:	00 00                	add    BYTE PTR [eax],al
     d9f:	6d                   	ins    DWORD PTR es:[edi],dx
     da0:	61                   	popa   
     da1:	6c                   	ins    BYTE PTR es:[edi],dx
     da2:	6c                   	ins    BYTE PTR es:[edi],dx
     da3:	6f                   	outs   dx,DWORD PTR ds:[esi]
     da4:	63 2e                	arpl   WORD PTR [esi],bp
     da6:	63 00                	arpl   WORD PTR [eax],ax
     da8:	01 00                	add    DWORD PTR [eax],eax
     daa:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     dad:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     db4:	63 
     db5:	2e                   	cs
     db6:	68 00 02 00 00       	push   0x200
     dbb:	73 74                	jae    e31 <sysEnter_Vector-0x12f1cf>
     dbd:	64                   	fs
     dbe:	64                   	fs
     dbf:	65                   	gs
     dc0:	66                   	data16
     dc1:	2e                   	cs
     dc2:	68 00 02 00 00       	push   0x200
     dc7:	6d                   	ins    DWORD PTR es:[edi],dx
     dc8:	61                   	popa   
     dc9:	6c                   	ins    BYTE PTR es:[edi],dx
     dca:	6c                   	ins    BYTE PTR es:[edi],dx
     dcb:	6f                   	outs   dx,DWORD PTR ds:[esi]
     dcc:	63 2e                	arpl   WORD PTR [esi],bp
     dce:	68 00 03 00 00       	push   0x300
     dd3:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     dda:	03 00                	add    eax,DWORD PTR [eax]
     ddc:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     de0:	43                   	inc    ebx
     de1:	68 72 69 73 4f       	push   0x4f736972
     de6:	53                   	push   ebx
     de7:	2e                   	cs
     de8:	68 00 03 00 00       	push   0x300
     ded:	73 79                	jae    e68 <sysEnter_Vector-0x12f198>
     def:	73 63                	jae    e54 <sysEnter_Vector-0x12f1ac>
     df1:	61                   	popa   
     df2:	6c                   	ins    BYTE PTR es:[edi],dx
     df3:	6c                   	ins    BYTE PTR es:[edi],dx
     df4:	73 2e                	jae    e24 <sysEnter_Vector-0x12f1dc>
     df6:	68 00 04 00 00       	push   0x400
     dfb:	00 00                	add    BYTE PTR [eax],al
     dfd:	05 02 80 1f 00       	add    eax,0x1f8002
     e02:	9f                   	lahf   
     e03:	03 0f                	add    ecx,DWORD PTR [edi]
     e05:	01 08                	add    DWORD PTR [eax],ecx
     e07:	21 02                	and    DWORD PTR [edx],eax
     e09:	24 13                	and    al,0x13
     e0b:	bb bb bb bc 69       	mov    ebx,0x69bcbbbb
     e10:	f5                   	cmc    
     e11:	92                   	xchg   edx,eax
     e12:	08 85 08 67 00 02    	or     BYTE PTR [ebp+0x2006708],al
     e18:	04 01                	add    al,0x1
     e1a:	06                   	push   es
     e1b:	66 06                	pushw  es
     e1d:	bc f5 91 76 5b       	mov    esp,0x5b7691f5
     e22:	59                   	pop    ecx
     e23:	31 08                	xor    DWORD PTR [eax],ecx
     e25:	15 00 02 04 01       	adc    eax,0x1040200
     e2a:	06                   	push   es
     e2b:	e4 06                	in     al,0x6
     e2d:	e7 68                	out    0x68,eax
     e2f:	93                   	xchg   ebx,eax
     e30:	ca 08 3d             	retf   0x3d08
     e33:	30 03                	xor    BYTE PTR [ebx],al
     e35:	74 90                	je     dc7 <sysEnter_Vector-0x12f239>
     e37:	3f                   	aas    
     e38:	03 0b                	add    ecx,DWORD PTR [ebx]
     e3a:	20 5b f3             	and    BYTE PTR [ebx-0xd],bl
     e3d:	af                   	scas   eax,DWORD PTR es:[edi]
     e3e:	00 02                	add    BYTE PTR [edx],al
     e40:	04 01                	add    al,0x1
     e42:	06                   	push   es
     e43:	d6                   	(bad)  
     e44:	00 02                	add    BYTE PTR [edx],al
     e46:	04 02                	add    al,0x2
     e48:	ac                   	lods   al,BYTE PTR ds:[esi]
     e49:	06                   	push   es
     e4a:	c9                   	leave  
     e4b:	59                   	pop    ecx
     e4c:	9f                   	lahf   
     e4d:	93                   	xchg   ebx,eax
     e4e:	00 02                	add    BYTE PTR [edx],al
     e50:	04 01                	add    al,0x1
     e52:	06                   	push   es
     e53:	c8 00 02 04          	enter  0x200,0x4
     e57:	02 9e 06 ca 59 31    	add    bl,BYTE PTR [esi+0x3159ca06]
     e5d:	08 14 67             	or     BYTE PTR [edi+eiz*2],dl
     e60:	30 08                	xor    BYTE PTR [eax],cl
     e62:	22 00                	and    al,BYTE PTR [eax]
     e64:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     e67:	08 3e                	or     BYTE PTR [esi],bh
     e69:	30 ca                	xor    dl,cl
     e6b:	00 02                	add    BYTE PTR [edx],al
     e6d:	04 02                	add    al,0x2
     e6f:	08 3e                	or     BYTE PTR [esi],bh
     e71:	30 03                	xor    BYTE PTR [ebx],al
     e73:	72 90                	jb     e05 <sysEnter_Vector-0x12f1fb>
     e75:	00 02                	add    BYTE PTR [edx],al
     e77:	04 01                	add    al,0x1
     e79:	06                   	push   es
     e7a:	c8 06 03 11          	enter  0x306,0x11
     e7e:	ac                   	lods   al,BYTE PTR ds:[esi]
     e7f:	69 08 25 75 69 67    	imul   ecx,DWORD PTR [eax],0x67697525
     e85:	75 03                	jne    e8a <sysEnter_Vector-0x12f176>
     e87:	0d 08 90 08 13       	or     eax,0x13089008
     e8c:	08 91 a0 bb 08 67    	or     BYTE PTR [ecx+0x6708bba0],dl
     e92:	08 5a 08             	or     BYTE PTR [edx+0x8],bl
     e95:	3d 08 e5 f3 02       	cmp    eax,0x2f3e508
     e9a:	26 13 bc ad ad 08 e7 	adc    edi,DWORD PTR es:[ebp+ebp*4+0x8e708ad]
     ea1:	08 
     ea2:	e5 ad                	in     eax,0xad
     ea4:	91                   	xchg   ecx,eax
     ea5:	91                   	xchg   ecx,eax
     ea6:	75 08                	jne    eb0 <sysEnter_Vector-0x12f150>
     ea8:	13 a0 bb bd 08 e5    	adc    esp,DWORD PTR [eax-0x1af74245]
     eae:	91                   	xchg   ecx,eax
     eaf:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
     eb2:	91                   	xchg   ecx,eax
     eb3:	91                   	xchg   ecx,eax
     eb4:	3d 5b f3 d7 31       	cmp    eax,0x31d7f35b
     eb9:	08 22                	or     BYTE PTR [edx],ah
     ebb:	08 93 68 92 67 08    	or     BYTE PTR [ebx+0x8679268],dl
     ec1:	67 00 02             	add    BYTE PTR [bp+si],al
     ec4:	04 01                	add    al,0x1
     ec6:	06                   	push   es
     ec7:	66 06                	pushw  es
     ec9:	ad                   	lods   eax,DWORD PTR ds:[esi]
     eca:	84 67 77             	test   BYTE PTR [edi+0x77],ah
     ecd:	08 13                	or     BYTE PTR [ebx],dl
     ecf:	02 24 17             	add    ah,BYTE PTR [edi+edx*1]
     ed2:	08 e5                	or     ch,ah
     ed4:	08 93 d7 3d 5b f3    	or     BYTE PTR [ebx-0xca4c229],dl
     eda:	08 13                	or     BYTE PTR [ebx],dl
     edc:	31 f3                	xor    ebx,esi
     ede:	d7                   	xlat   BYTE PTR ds:[ebx]
     edf:	3f                   	aas    
     ee0:	08 13                	or     BYTE PTR [ebx],dl
     ee2:	08 9f 02 06 00 01    	or     BYTE PTR [edi+0x1000602],bl
     ee8:	01 f1                	add    ecx,esi
     eea:	00 00                	add    BYTE PTR [eax],al
     eec:	00 02                	add    BYTE PTR [edx],al
     eee:	00 aa 00 00 00 01    	add    BYTE PTR [edx+0x1000000],ch
     ef4:	01 fb                	add    ebx,edi
     ef6:	0e                   	push   cs
     ef7:	0d 00 01 01 01       	or     eax,0x1010100
     efc:	01 00                	add    DWORD PTR [eax],eax
     efe:	00 00                	add    BYTE PTR [eax],al
     f00:	01 00                	add    DWORD PTR [eax],eax
     f02:	00 01                	add    BYTE PTR [ecx],al
     f04:	73 72                	jae    f78 <sysEnter_Vector-0x12f088>
     f06:	63 00                	arpl   WORD PTR [eax],ax
     f08:	2f                   	das    
     f09:	68 6f 6d 65 2f       	push   0x2f656d6f
     f0e:	79 6f                	jns    f7f <sysEnter_Vector-0x12f081>
     f10:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     f17:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     f1a:	73 73                	jae    f8f <sysEnter_Vector-0x12f071>
     f1c:	2f                   	das    
     f1d:	6c                   	ins    BYTE PTR es:[edi],dx
     f1e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     f25:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     f2b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     f31:	78 2d                	js     f60 <sysEnter_Vector-0x12f0a0>
     f33:	67 6e                	outs   dx,BYTE PTR ds:[si]
     f35:	75 2f                	jne    f66 <sysEnter_Vector-0x12f09a>
     f37:	35 2e 33 2e 30       	xor    eax,0x302e332e
     f3c:	2f                   	das    
     f3d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f44:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     f47:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     f4b:	65 00 00             	add    BYTE PTR gs:[eax],al
     f4e:	6d                   	ins    DWORD PTR es:[edi],dx
     f4f:	65                   	gs
     f50:	6d                   	ins    DWORD PTR es:[edi],dx
     f51:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     f54:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     f57:	01 00                	add    DWORD PTR [eax],eax
     f59:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f5c:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     f63:	63 
     f64:	2e                   	cs
     f65:	68 00 02 00 00       	push   0x200
     f6a:	73 74                	jae    fe0 <sysEnter_Vector-0x12f020>
     f6c:	64                   	fs
     f6d:	64                   	fs
     f6e:	65                   	gs
     f6f:	66                   	data16
     f70:	2e                   	cs
     f71:	68 00 02 00 00       	push   0x200
     f76:	6d                   	ins    DWORD PTR es:[edi],dx
     f77:	61                   	popa   
     f78:	6c                   	ins    BYTE PTR es:[edi],dx
     f79:	6c                   	ins    BYTE PTR es:[edi],dx
     f7a:	6f                   	outs   dx,DWORD PTR ds:[esi]
     f7b:	63 2e                	arpl   WORD PTR [esi],bp
     f7d:	68 00 03 00 00       	push   0x300
     f82:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     f89:	03 00                	add    eax,DWORD PTR [eax]
     f8b:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     f8f:	43                   	inc    ebx
     f90:	68 72 69 73 4f       	push   0x4f736972
     f95:	53                   	push   ebx
     f96:	2e                   	cs
     f97:	68 00 03 00 00       	push   0x300
     f9c:	00 00                	add    BYTE PTR [eax],al
     f9e:	05 02 d4 25 00       	add    eax,0x25d402
     fa3:	9f                   	lahf   
     fa4:	03 0b                	add    ecx,DWORD PTR [ebx]
     fa6:	01 f5                	add    ebp,esi
     fa8:	d7                   	xlat   BYTE PTR ds:[ebx]
     fa9:	d7                   	xlat   BYTE PTR ds:[ebx]
     faa:	68 91 67 68 83       	push   0x83686791
     faf:	91                   	xchg   ecx,eax
     fb0:	91                   	xchg   ecx,eax
     fb1:	2f                   	das    
     fb2:	08 1f                	or     BYTE PTR [edi],bl
     fb4:	e8 08 57 ca 84       	call   84ca66c1 <sysEnter_Vector+0x84b766c1>
     fb9:	68 83 67 68 83       	push   0x83686783
     fbe:	91                   	xchg   ecx,eax
     fbf:	91                   	xchg   ecx,eax
     fc0:	2f                   	das    
     fc1:	08 1f                	or     BYTE PTR [edi],bl
     fc3:	e8 08 57 ca 5c       	call   5cca66d0 <sysEnter_Vector+0x5cb766d0>
     fc8:	67 68 83 67 67 2f    	addr16 push 0x2f676783
     fce:	08 2d e8 08 65 ca    	or     BYTE PTR ds:0xca6508e8,ch
     fd4:	3e                   	ds
     fd5:	31 c9                	xor    ecx,ecx
     fd7:	08 13                	or     BYTE PTR [ebx],dl
     fd9:	02 02                	add    al,BYTE PTR [edx]
     fdb:	00 01                	add    BYTE PTR [ecx],al
     fdd:	01 d4                	add    esp,edx
     fdf:	00 00                	add    BYTE PTR [eax],al
     fe1:	00 02                	add    BYTE PTR [edx],al
     fe3:	00 aa 00 00 00 01    	add    BYTE PTR [edx+0x1000000],ch
     fe9:	01 fb                	add    ebx,edi
     feb:	0e                   	push   cs
     fec:	0d 00 01 01 01       	or     eax,0x1010100
     ff1:	01 00                	add    DWORD PTR [eax],eax
     ff3:	00 00                	add    BYTE PTR [eax],al
     ff5:	01 00                	add    DWORD PTR [eax],eax
     ff7:	00 01                	add    BYTE PTR [ecx],al
     ff9:	73 72                	jae    106d <sysEnter_Vector-0x12ef93>
     ffb:	63 00                	arpl   WORD PTR [eax],ax
     ffd:	2f                   	das    
     ffe:	68 6f 6d 65 2f       	push   0x2f656d6f
    1003:	79 6f                	jns    1074 <sysEnter_Vector-0x12ef8c>
    1005:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    100c:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    100f:	73 73                	jae    1084 <sysEnter_Vector-0x12ef7c>
    1011:	2f                   	das    
    1012:	6c                   	ins    BYTE PTR es:[edi],dx
    1013:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    101a:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1020:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1026:	78 2d                	js     1055 <sysEnter_Vector-0x12efab>
    1028:	67 6e                	outs   dx,BYTE PTR ds:[si]
    102a:	75 2f                	jne    105b <sysEnter_Vector-0x12efa5>
    102c:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1031:	2f                   	das    
    1032:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1039:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    103c:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1040:	65 00 00             	add    BYTE PTR gs:[eax],al
    1043:	6d                   	ins    DWORD PTR es:[edi],dx
    1044:	65                   	gs
    1045:	6d                   	ins    DWORD PTR es:[edi],dx
    1046:	73 65                	jae    10ad <sysEnter_Vector-0x12ef53>
    1048:	74 2e                	je     1078 <sysEnter_Vector-0x12ef88>
    104a:	63 00                	arpl   WORD PTR [eax],ax
    104c:	01 00                	add    DWORD PTR [eax],eax
    104e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1051:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1058:	63 
    1059:	2e                   	cs
    105a:	68 00 02 00 00       	push   0x200
    105f:	73 74                	jae    10d5 <sysEnter_Vector-0x12ef2b>
    1061:	64                   	fs
    1062:	64                   	fs
    1063:	65                   	gs
    1064:	66                   	data16
    1065:	2e                   	cs
    1066:	68 00 02 00 00       	push   0x200
    106b:	6d                   	ins    DWORD PTR es:[edi],dx
    106c:	61                   	popa   
    106d:	6c                   	ins    BYTE PTR es:[edi],dx
    106e:	6c                   	ins    BYTE PTR es:[edi],dx
    106f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1070:	63 2e                	arpl   WORD PTR [esi],bp
    1072:	68 00 03 00 00       	push   0x300
    1077:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    107e:	03 00                	add    eax,DWORD PTR [eax]
    1080:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1084:	43                   	inc    ebx
    1085:	68 72 69 73 4f       	push   0x4f736972
    108a:	53                   	push   ebx
    108b:	2e                   	cs
    108c:	68 00 03 00 00       	push   0x300
    1091:	00 00                	add    BYTE PTR [eax],al
    1093:	05 02 90 27 00       	add    eax,0x279002
    1098:	9f                   	lahf   
    1099:	1a f3                	sbb    dh,bl
    109b:	67 67 08 83 67 08    	addr32 or BYTE PTR [bp+di+0x867],al
    10a1:	ca 9f 2f             	retf   0x2f9f
    10a4:	d5 bd                	aad    0xbd
    10a6:	9f                   	lahf   
    10a7:	2f                   	das    
    10a8:	f1                   	icebp  
    10a9:	bf d5 cb 3d 31       	mov    edi,0x313dcbd5
    10ae:	c9                   	leave  
    10af:	08 13                	or     BYTE PTR [ebx],dl
    10b1:	02 02                	add    al,BYTE PTR [edx]
    10b3:	00 01                	add    BYTE PTR [ecx],al
    10b5:	01 f9                	add    ecx,edi
    10b7:	00 00                	add    BYTE PTR [eax],al
    10b9:	00 02                	add    BYTE PTR [edx],al
    10bb:	00 db                	add    bl,bl
    10bd:	00 00                	add    BYTE PTR [eax],al
    10bf:	00 01                	add    BYTE PTR [ecx],al
    10c1:	01 fb                	add    ebx,edi
    10c3:	0e                   	push   cs
    10c4:	0d 00 01 01 01       	or     eax,0x1010100
    10c9:	01 00                	add    DWORD PTR [eax],eax
    10cb:	00 00                	add    BYTE PTR [eax],al
    10cd:	01 00                	add    DWORD PTR [eax],eax
    10cf:	00 01                	add    BYTE PTR [ecx],al
    10d1:	73 72                	jae    1145 <sysEnter_Vector-0x12eebb>
    10d3:	63 00                	arpl   WORD PTR [eax],ax
    10d5:	2f                   	das    
    10d6:	68 6f 6d 65 2f       	push   0x2f656d6f
    10db:	79 6f                	jns    114c <sysEnter_Vector-0x12eeb4>
    10dd:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    10e4:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    10e7:	73 73                	jae    115c <sysEnter_Vector-0x12eea4>
    10e9:	2f                   	das    
    10ea:	6c                   	ins    BYTE PTR es:[edi],dx
    10eb:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    10f2:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    10f8:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    10fe:	78 2d                	js     112d <sysEnter_Vector-0x12eed3>
    1100:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1102:	75 2f                	jne    1133 <sysEnter_Vector-0x12eecd>
    1104:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1109:	2f                   	das    
    110a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1111:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1114:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1118:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
    111c:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1120:	65                   	gs
    1121:	2f                   	das    
    1122:	2e                   	cs
    1123:	2e                   	cs
    1124:	2f                   	das    
    1125:	2e                   	cs
    1126:	2e                   	cs
    1127:	2f                   	das    
    1128:	2e                   	cs
    1129:	2e                   	cs
    112a:	2f                   	das    
    112b:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    112f:	6a 2f                	push   0x2f
    1131:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    1134:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    113b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    113c:	65                   	gs
    113d:	6c                   	ins    BYTE PTR es:[edi],dx
    113e:	2f                   	das    
    113f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1146:	00 00                	add    BYTE PTR [eax],al
    1148:	70 69                	jo     11b3 <sysEnter_Vector-0x12ee4d>
    114a:	70 65                	jo     11b1 <sysEnter_Vector-0x12ee4f>
    114c:	5f                   	pop    edi
    114d:	6c                   	ins    BYTE PTR es:[edi],dx
    114e:	69 62 2e 63 00 01 00 	imul   esp,DWORD PTR [edx+0x2e],0x10063
    1155:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1158:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    115f:	63 
    1160:	2e                   	cs
    1161:	68 00 02 00 00       	push   0x200
    1166:	6d                   	ins    DWORD PTR es:[edi],dx
    1167:	61                   	popa   
    1168:	6c                   	ins    BYTE PTR es:[edi],dx
    1169:	6c                   	ins    BYTE PTR es:[edi],dx
    116a:	6f                   	outs   dx,DWORD PTR ds:[esi]
    116b:	63 2e                	arpl   WORD PTR [esi],bp
    116d:	68 00 03 00 00       	push   0x300
    1172:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1179:	03 00                	add    eax,DWORD PTR [eax]
    117b:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    117f:	43                   	inc    ebx
    1180:	68 72 69 73 4f       	push   0x4f736972
    1185:	53                   	push   ebx
    1186:	2e                   	cs
    1187:	68 00 03 00 00       	push   0x300
    118c:	73 79                	jae    1207 <sysEnter_Vector-0x12edf9>
    118e:	73 63                	jae    11f3 <sysEnter_Vector-0x12ee0d>
    1190:	61                   	popa   
    1191:	6c                   	ins    BYTE PTR es:[edi],dx
    1192:	6c                   	ins    BYTE PTR es:[edi],dx
    1193:	73 2e                	jae    11c3 <sysEnter_Vector-0x12ee3d>
    1195:	68 00 04 00 00       	push   0x400
    119a:	00 00                	add    BYTE PTR [eax],al
    119c:	05 02 78 28 00       	add    eax,0x287802
    11a1:	9f                   	lahf   
    11a2:	03 0a                	add    ecx,DWORD PTR [edx]
    11a4:	01 08                	add    DWORD PTR [eax],ecx
    11a6:	13 08                	adc    ecx,DWORD PTR [eax]
    11a8:	2f                   	das    
    11a9:	5b                   	pop    ebx
    11aa:	08 13                	or     BYTE PTR [ebx],dl
    11ac:	08 75 02             	or     BYTE PTR [ebp+0x2],dh
    11af:	05 00 01 01 e8       	add    eax,0xe8010100
    11b4:	01 00                	add    DWORD PTR [eax],eax
    11b6:	00 02                	add    BYTE PTR [edx],al
    11b8:	00 ab 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],ch
    11be:	01 fb                	add    ebx,edi
    11c0:	0e                   	push   cs
    11c1:	0d 00 01 01 01       	or     eax,0x1010100
    11c6:	01 00                	add    DWORD PTR [eax],eax
    11c8:	00 00                	add    BYTE PTR [eax],al
    11ca:	01 00                	add    DWORD PTR [eax],eax
    11cc:	00 01                	add    BYTE PTR [ecx],al
    11ce:	73 72                	jae    1242 <sysEnter_Vector-0x12edbe>
    11d0:	63 00                	arpl   WORD PTR [eax],ax
    11d2:	2f                   	das    
    11d3:	68 6f 6d 65 2f       	push   0x2f656d6f
    11d8:	79 6f                	jns    1249 <sysEnter_Vector-0x12edb7>
    11da:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    11e1:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    11e4:	73 73                	jae    1259 <sysEnter_Vector-0x12eda7>
    11e6:	2f                   	das    
    11e7:	6c                   	ins    BYTE PTR es:[edi],dx
    11e8:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    11ef:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    11f5:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    11fb:	78 2d                	js     122a <sysEnter_Vector-0x12edd6>
    11fd:	67 6e                	outs   dx,BYTE PTR ds:[si]
    11ff:	75 2f                	jne    1230 <sysEnter_Vector-0x12edd0>
    1201:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1206:	2f                   	das    
    1207:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    120e:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1211:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1215:	65 00 00             	add    BYTE PTR gs:[eax],al
    1218:	73 70                	jae    128a <sysEnter_Vector-0x12ed76>
    121a:	72 69                	jb     1285 <sysEnter_Vector-0x12ed7b>
    121c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    121d:	74 66                	je     1285 <sysEnter_Vector-0x12ed7b>
    121f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1222:	01 00                	add    DWORD PTR [eax],eax
    1224:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1227:	64                   	fs
    1228:	61                   	popa   
    1229:	72 67                	jb     1292 <sysEnter_Vector-0x12ed6e>
    122b:	2e                   	cs
    122c:	68 00 02 00 00       	push   0x200
    1231:	73 74                	jae    12a7 <sysEnter_Vector-0x12ed59>
    1233:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    123a:	63 
    123b:	2e                   	cs
    123c:	68 00 02 00 00       	push   0x200
    1241:	6d                   	ins    DWORD PTR es:[edi],dx
    1242:	61                   	popa   
    1243:	6c                   	ins    BYTE PTR es:[edi],dx
    1244:	6c                   	ins    BYTE PTR es:[edi],dx
    1245:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1246:	63 2e                	arpl   WORD PTR [esi],bp
    1248:	68 00 03 00 00       	push   0x300
    124d:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1254:	03 00                	add    eax,DWORD PTR [eax]
    1256:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    125a:	43                   	inc    ebx
    125b:	68 72 69 73 4f       	push   0x4f736972
    1260:	53                   	push   ebx
    1261:	2e                   	cs
    1262:	68 00 03 00 00       	push   0x300
    1267:	00 00                	add    BYTE PTR [eax],al
    1269:	05 02 d0 28 00       	add    eax,0x28d002
    126e:	9f                   	lahf   
    126f:	03 0a                	add    ecx,DWORD PTR [edx]
    1271:	01 08                	add    DWORD PTR [eax],ecx
    1273:	13 76 2f             	adc    esi,DWORD PTR [esi+0x2f]
    1276:	02 29                	add    ch,BYTE PTR [ecx]
    1278:	11 08                	adc    DWORD PTR [eax],ecx
    127a:	30 3d 03 12 66 03    	xor    BYTE PTR ds:0x3661203,bh
    1280:	0a 08                	or     cl,BYTE PTR [eax]
    1282:	2e                   	cs
    1283:	91                   	xchg   ecx,eax
    1284:	9f                   	lahf   
    1285:	4b                   	dec    ebx
    1286:	00 02                	add    BYTE PTR [edx],al
    1288:	04 01                	add    al,0x1
    128a:	06                   	push   es
    128b:	66 06                	pushw  es
    128d:	67 9f                	addr16 lahf 
    128f:	00 02                	add    BYTE PTR [edx],al
    1291:	04 01                	add    al,0x1
    1293:	06                   	push   es
    1294:	9e                   	sahf   
    1295:	00 02                	add    BYTE PTR [edx],al
    1297:	04 02                	add    al,0x2
    1299:	74 00                	je     129b <sysEnter_Vector-0x12ed65>
    129b:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    129e:	58                   	pop    eax
    129f:	00 02                	add    BYTE PTR [edx],al
    12a1:	04 04                	add    al,0x4
    12a3:	06                   	push   es
    12a4:	3d 00 02 04 04       	cmp    eax,0x4040200
    12a9:	4b                   	dec    ebx
    12aa:	9f                   	lahf   
    12ab:	67 4b                	addr16 dec ebx
    12ad:	3d 67 9f 4b 67       	cmp    eax,0x674b9f67
    12b2:	9f                   	lahf   
    12b3:	4b                   	dec    ebx
    12b4:	4d                   	dec    ebp
    12b5:	9f                   	lahf   
    12b6:	67 67 67 4c          	addr32 addr32 addr16 dec esp
    12ba:	75 67                	jne    1323 <sysEnter_Vector-0x12ecdd>
    12bc:	f5                   	cmc    
    12bd:	02 3d 11 68 83 67    	add    bh,BYTE PTR ds:0x67836811
    12c3:	67 9f                	addr16 lahf 
    12c5:	2f                   	das    
    12c6:	b9 ca 67 e5 9f       	mov    ecx,0x9fe567ca
    12cb:	67 d7                	xlat   BYTE PTR ds:[bx]
    12cd:	67 bb 08 23 9f 2f    	addr16 mov ebx,0x2f9f2308
    12d3:	e3 ca                	jecxz  129f <sysEnter_Vector-0x12ed61>
    12d5:	2f                   	das    
    12d6:	b9 d8 2f 08 57       	mov    ecx,0x57082fd8
    12db:	ca 2f b9             	retf   0xb92f
    12de:	ca 00 02             	retf   0x200
    12e1:	04 01                	add    al,0x1
    12e3:	3d 76 03 0e 08       	cmp    eax,0x80e0376
    12e8:	20 ad 9f 08 13 5c    	and    BYTE PTR [ebp+0x5c13089f],ch
    12ee:	76 91                	jbe    1281 <sysEnter_Vector-0x12ed7f>
    12f0:	08 d8                	or     al,bl
    12f2:	4b                   	dec    ebx
    12f3:	30 4b 30             	xor    BYTE PTR [ebx+0x30],cl
    12f6:	4b                   	dec    ebx
    12f7:	30 4b 30             	xor    BYTE PTR [ebx+0x30],cl
    12fa:	4b                   	dec    ebx
    12fb:	32 75 08             	xor    dh,BYTE PTR [ebp+0x8]
    12fe:	13 08                	adc    ecx,DWORD PTR [eax]
    1300:	13 9f 92 d7 67 3d    	adc    ebx,DWORD PTR [edi+0x3d67d792]
    1306:	4f                   	dec    edi
    1307:	75 9f                	jne    12a8 <sysEnter_Vector-0x12ed58>
    1309:	91                   	xchg   ecx,eax
    130a:	08 13                	or     BYTE PTR [ebx],dl
    130c:	08 13                	or     BYTE PTR [ebx],dl
    130e:	9f                   	lahf   
    130f:	92                   	xchg   edx,eax
    1310:	d8 67 78             	fsub   DWORD PTR [edi+0x78]
    1313:	75 00                	jne    1315 <sysEnter_Vector-0x12eceb>
    1315:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1318:	06                   	push   es
    1319:	9e                   	sahf   
    131a:	00 02                	add    BYTE PTR [edx],al
    131c:	04 02                	add    al,0x2
    131e:	9e                   	sahf   
    131f:	06                   	push   es
    1320:	9f                   	lahf   
    1321:	bb 94 76 02 23       	mov    ebx,0x23027694
    1326:	14 9f                	adc    al,0x9f
    1328:	2f                   	das    
    1329:	b9 a0 08 59 2f       	mov    ecx,0x2f5908a0
    132e:	b9 a0 5b d7 67       	mov    ecx,0x67d75ba0
    1333:	08 30                	or     BYTE PTR [eax],dh
    1335:	76 9f                	jbe    12d6 <sysEnter_Vector-0x12ed2a>
    1337:	2f                   	das    
    1338:	b9 d8 00 02 04       	mov    ecx,0x40200d8
    133d:	03 91 00 02 04 03    	add    edx,DWORD PTR [ecx+0x3040200]
    1343:	08 65 00             	or     BYTE PTR [ebp+0x0],ah
    1346:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1349:	06                   	push   es
    134a:	4a                   	dec    edx
    134b:	06                   	push   es
    134c:	84 2f                	test   BYTE PTR [edi],ch
    134e:	b9 d8 5b 67 75       	mov    ecx,0x75675bd8
    1353:	4d                   	dec    ebp
    1354:	ab                   	stos   DWORD PTR es:[edi],eax
    1355:	08 bd 5b 67 d7 cd    	or     BYTE PTR [ebp-0x322898a5],bh
    135b:	55                   	push   ebp
    135c:	d7                   	xlat   BYTE PTR ds:[ebx]
    135d:	ca 5b bb             	retf   0xbb5b
    1360:	5c                   	pop    esp
    1361:	75 31                	jne    1394 <sysEnter_Vector-0x12ec6c>
    1363:	4c                   	dec    esp
    1364:	75 32                	jne    1398 <sysEnter_Vector-0x12ec68>
    1366:	4c                   	dec    esp
    1367:	31 bb 9f 08 15 57    	xor    DWORD PTR [ebx+0x5715089f],edi
    136d:	91                   	xchg   ecx,eax
    136e:	03 78 58             	add    edi,DWORD PTR [eax+0x58]
    1371:	03 0a                	add    ecx,DWORD PTR [edx]
    1373:	20 67 f3             	and    BYTE PTR [edi-0xd],ah
    1376:	67 08 2f             	or     BYTE PTR [bx],ch
    1379:	9f                   	lahf   
    137a:	91                   	xchg   ecx,eax
    137b:	9f                   	lahf   
    137c:	f4                   	hlt    
    137d:	d7                   	xlat   BYTE PTR ds:[ebx]
    137e:	00 02                	add    BYTE PTR [edx],al
    1380:	04 02                	add    al,0x2
    1382:	03 e8                	add    ebp,eax
    1384:	7e 08                	jle    138e <sysEnter_Vector-0x12ec72>
    1386:	f2 00 02             	repnz add BYTE PTR [edx],al
    1389:	04 01                	add    al,0x1
    138b:	06                   	push   es
    138c:	90                   	nop
    138d:	06                   	push   es
    138e:	03 9a 01 d6 67 9f    	add    ebx,DWORD PTR [edx-0x609829ff]
    1394:	5b                   	pop    ebx
    1395:	f6 67 08             	mul    BYTE PTR [edi+0x8]
    1398:	76 3d                	jbe    13d7 <sysEnter_Vector-0x12ec29>
    139a:	02 02                	add    al,BYTE PTR [edx]
    139c:	00 01                	add    BYTE PTR [ecx],al
    139e:	01 be 00 00 00 02    	add    DWORD PTR [esi+0x2000000],edi
    13a4:	00 9d 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],bl
    13aa:	01 fb                	add    ebx,edi
    13ac:	0e                   	push   cs
    13ad:	0d 00 01 01 01       	or     eax,0x1010100
    13b2:	01 00                	add    DWORD PTR [eax],eax
    13b4:	00 00                	add    BYTE PTR [eax],al
    13b6:	01 00                	add    DWORD PTR [eax],eax
    13b8:	00 01                	add    BYTE PTR [ecx],al
    13ba:	73 72                	jae    142e <sysEnter_Vector-0x12ebd2>
    13bc:	63 00                	arpl   WORD PTR [eax],ax
    13be:	2f                   	das    
    13bf:	68 6f 6d 65 2f       	push   0x2f656d6f
    13c4:	79 6f                	jns    1435 <sysEnter_Vector-0x12ebcb>
    13c6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    13cd:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    13d0:	73 73                	jae    1445 <sysEnter_Vector-0x12ebbb>
    13d2:	2f                   	das    
    13d3:	6c                   	ins    BYTE PTR es:[edi],dx
    13d4:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    13db:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    13e1:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    13e7:	78 2d                	js     1416 <sysEnter_Vector-0x12ebea>
    13e9:	67 6e                	outs   dx,BYTE PTR ds:[si]
    13eb:	75 2f                	jne    141c <sysEnter_Vector-0x12ebe4>
    13ed:	35 2e 33 2e 30       	xor    eax,0x302e332e
    13f2:	2f                   	das    
    13f3:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    13fa:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    13fd:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1401:	65 00 00             	add    BYTE PTR gs:[eax],al
    1404:	73 74                	jae    147a <sysEnter_Vector-0x12eb86>
    1406:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
    140d:	00 
    140e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1411:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1418:	63 
    1419:	2e                   	cs
    141a:	68 00 02 00 00       	push   0x200
    141f:	6d                   	ins    DWORD PTR es:[edi],dx
    1420:	61                   	popa   
    1421:	6c                   	ins    BYTE PTR es:[edi],dx
    1422:	6c                   	ins    BYTE PTR es:[edi],dx
    1423:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1424:	63 2e                	arpl   WORD PTR [esi],bp
    1426:	68 00 03 00 00       	push   0x300
    142b:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1432:	03 00                	add    eax,DWORD PTR [eax]
    1434:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1438:	43                   	inc    ebx
    1439:	68 72 69 73 4f       	push   0x4f736972
    143e:	53                   	push   ebx
    143f:	2e                   	cs
    1440:	68 00 03 00 00       	push   0x300
    1445:	00 00                	add    BYTE PTR [eax],al
    1447:	05 02 e8 2f 00       	add    eax,0x2fe802
    144c:	9f                   	lahf   
    144d:	03 10                	add    edx,DWORD PTR [eax]
    144f:	01 08                	add    DWORD PTR [eax],ecx
    1451:	22 76 08             	and    dh,BYTE PTR [esi+0x8]
    1454:	31 d7                	xor    edi,edx
    1456:	d7                   	xlat   BYTE PTR ds:[ebx]
    1457:	d7                   	xlat   BYTE PTR ds:[ebx]
    1458:	d7                   	xlat   BYTE PTR ds:[ebx]
    1459:	ad                   	lods   eax,DWORD PTR ds:[esi]
    145a:	e6 21                	out    0x21,al
    145c:	02 05 00 01 01 e5    	add    al,BYTE PTR ds:0xe5010100
    1462:	00 00                	add    BYTE PTR [eax],al
    1464:	00 02                	add    BYTE PTR [edx],al
    1466:	00 b2 00 00 00 01    	add    BYTE PTR [edx+0x1000000],dh
    146c:	01 fb                	add    ebx,edi
    146e:	0e                   	push   cs
    146f:	0d 00 01 01 01       	or     eax,0x1010100
    1474:	01 00                	add    DWORD PTR [eax],eax
    1476:	00 00                	add    BYTE PTR [eax],al
    1478:	01 00                	add    DWORD PTR [eax],eax
    147a:	00 01                	add    BYTE PTR [ecx],al
    147c:	73 72                	jae    14f0 <sysEnter_Vector-0x12eb10>
    147e:	63 2f                	arpl   WORD PTR [edi],bp
    1480:	73 74                	jae    14f6 <sysEnter_Vector-0x12eb0a>
    1482:	72 69                	jb     14ed <sysEnter_Vector-0x12eb13>
    1484:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1485:	67 73 00             	addr16 jae 1488 <sysEnter_Vector-0x12eb78>
    1488:	2f                   	das    
    1489:	68 6f 6d 65 2f       	push   0x2f656d6f
    148e:	79 6f                	jns    14ff <sysEnter_Vector-0x12eb01>
    1490:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1497:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    149a:	73 73                	jae    150f <sysEnter_Vector-0x12eaf1>
    149c:	2f                   	das    
    149d:	6c                   	ins    BYTE PTR es:[edi],dx
    149e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    14a5:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    14ab:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    14b1:	78 2d                	js     14e0 <sysEnter_Vector-0x12eb20>
    14b3:	67 6e                	outs   dx,BYTE PTR ds:[si]
    14b5:	75 2f                	jne    14e6 <sysEnter_Vector-0x12eb1a>
    14b7:	35 2e 33 2e 30       	xor    eax,0x302e332e
    14bc:	2f                   	das    
    14bd:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    14c4:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    14c7:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    14cb:	65 00 00             	add    BYTE PTR gs:[eax],al
    14ce:	73 74                	jae    1544 <sysEnter_Vector-0x12eabc>
    14d0:	72 63                	jb     1535 <sysEnter_Vector-0x12eacb>
    14d2:	61                   	popa   
    14d3:	74 2e                	je     1503 <sysEnter_Vector-0x12eafd>
    14d5:	63 00                	arpl   WORD PTR [eax],ax
    14d7:	01 00                	add    DWORD PTR [eax],eax
    14d9:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    14dc:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    14e3:	63 
    14e4:	2e                   	cs
    14e5:	68 00 02 00 00       	push   0x200
    14ea:	73 74                	jae    1560 <sysEnter_Vector-0x12eaa0>
    14ec:	64                   	fs
    14ed:	64                   	fs
    14ee:	65                   	gs
    14ef:	66                   	data16
    14f0:	2e                   	cs
    14f1:	68 00 02 00 00       	push   0x200
    14f6:	6d                   	ins    DWORD PTR es:[edi],dx
    14f7:	61                   	popa   
    14f8:	6c                   	ins    BYTE PTR es:[edi],dx
    14f9:	6c                   	ins    BYTE PTR es:[edi],dx
    14fa:	6f                   	outs   dx,DWORD PTR ds:[esi]
    14fb:	63 2e                	arpl   WORD PTR [esi],bp
    14fd:	68 00 03 00 00       	push   0x300
    1502:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1509:	03 00                	add    eax,DWORD PTR [eax]
    150b:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    150f:	43                   	inc    ebx
    1510:	68 72 69 73 4f       	push   0x4f736972
    1515:	53                   	push   ebx
    1516:	2e                   	cs
    1517:	68 00 03 00 00       	push   0x300
    151c:	00 00                	add    BYTE PTR [eax],al
    151e:	05 02 6c 30 00       	add    eax,0x306c02
    1523:	9f                   	lahf   
    1524:	03 1d 01 08 21 02    	add    ebx,DWORD PTR ds:0x2210801
    152a:	24 13                	and    al,0x13
    152c:	3d 5b 08 21 02       	cmp    eax,0x221085b
    1531:	24 13                	and    al,0x13
    1533:	3d 5b 08 21 75       	cmp    eax,0x7521085b
    1538:	08 14 83             	or     BYTE PTR [ebx+eax*4],dl
    153b:	84 68 02             	test   BYTE PTR [eax+0x2],ch
    153e:	27                   	daa    
    153f:	13 3d 5b f3 08 3d    	adc    edi,DWORD PTR ds:0x3d08f35b
    1545:	02 02                	add    al,BYTE PTR [edx]
    1547:	00 01                	add    BYTE PTR [ecx],al
    1549:	01 c8                	add    eax,ecx
    154b:	00 00                	add    BYTE PTR [eax],al
    154d:	00 02                	add    BYTE PTR [edx],al
    154f:	00 a6 00 00 00 01    	add    BYTE PTR [esi+0x1000000],ah
    1555:	01 fb                	add    ebx,edi
    1557:	0e                   	push   cs
    1558:	0d 00 01 01 01       	or     eax,0x1010100
    155d:	01 00                	add    DWORD PTR [eax],eax
    155f:	00 00                	add    BYTE PTR [eax],al
    1561:	01 00                	add    DWORD PTR [eax],eax
    1563:	00 01                	add    BYTE PTR [ecx],al
    1565:	73 72                	jae    15d9 <sysEnter_Vector-0x12ea27>
    1567:	63 2f                	arpl   WORD PTR [edi],bp
    1569:	73 74                	jae    15df <sysEnter_Vector-0x12ea21>
    156b:	72 69                	jb     15d6 <sysEnter_Vector-0x12ea2a>
    156d:	6e                   	outs   dx,BYTE PTR ds:[esi]
    156e:	67 73 00             	addr16 jae 1571 <sysEnter_Vector-0x12ea8f>
    1571:	2f                   	das    
    1572:	68 6f 6d 65 2f       	push   0x2f656d6f
    1577:	79 6f                	jns    15e8 <sysEnter_Vector-0x12ea18>
    1579:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1580:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1583:	73 73                	jae    15f8 <sysEnter_Vector-0x12ea08>
    1585:	2f                   	das    
    1586:	6c                   	ins    BYTE PTR es:[edi],dx
    1587:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    158e:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1594:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    159a:	78 2d                	js     15c9 <sysEnter_Vector-0x12ea37>
    159c:	67 6e                	outs   dx,BYTE PTR ds:[si]
    159e:	75 2f                	jne    15cf <sysEnter_Vector-0x12ea31>
    15a0:	35 2e 33 2e 30       	xor    eax,0x302e332e
    15a5:	2f                   	das    
    15a6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    15ad:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    15b0:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    15b4:	65 00 00             	add    BYTE PTR gs:[eax],al
    15b7:	73 74                	jae    162d <sysEnter_Vector-0x12e9d3>
    15b9:	72 63                	jb     161e <sysEnter_Vector-0x12e9e2>
    15bb:	6d                   	ins    DWORD PTR es:[edi],dx
    15bc:	70 2e                	jo     15ec <sysEnter_Vector-0x12ea14>
    15be:	63 00                	arpl   WORD PTR [eax],ax
    15c0:	01 00                	add    DWORD PTR [eax],eax
    15c2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    15c5:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    15cc:	63 
    15cd:	2e                   	cs
    15ce:	68 00 02 00 00       	push   0x200
    15d3:	6d                   	ins    DWORD PTR es:[edi],dx
    15d4:	61                   	popa   
    15d5:	6c                   	ins    BYTE PTR es:[edi],dx
    15d6:	6c                   	ins    BYTE PTR es:[edi],dx
    15d7:	6f                   	outs   dx,DWORD PTR ds:[esi]
    15d8:	63 2e                	arpl   WORD PTR [esi],bp
    15da:	68 00 03 00 00       	push   0x300
    15df:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    15e6:	03 00                	add    eax,DWORD PTR [eax]
    15e8:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    15ec:	43                   	inc    ebx
    15ed:	68 72 69 73 4f       	push   0x4f736972
    15f2:	53                   	push   ebx
    15f3:	2e                   	cs
    15f4:	68 00 03 00 00       	push   0x300
    15f9:	00 00                	add    BYTE PTR [eax],al
    15fb:	05 02 80 31 00       	add    eax,0x318002
    1600:	9f                   	lahf   
    1601:	03 1a                	add    ebx,DWORD PTR [edx]
    1603:	01 08                	add    DWORD PTR [eax],ecx
    1605:	21 3d 41 ad ad 67    	and    DWORD PTR ds:0x67adad41,edi
    160b:	d8 92 bb 77 c9 d7    	fcom   DWORD PTR [edx-0x28368845]
    1611:	02 02                	add    al,BYTE PTR [edx]
    1613:	00 01                	add    BYTE PTR [ecx],al
    1615:	01 e6                	add    esi,esp
    1617:	00 00                	add    BYTE PTR [eax],al
    1619:	00 02                	add    BYTE PTR [edx],al
    161b:	00 a6 00 00 00 01    	add    BYTE PTR [esi+0x1000000],ah
    1621:	01 fb                	add    ebx,edi
    1623:	0e                   	push   cs
    1624:	0d 00 01 01 01       	or     eax,0x1010100
    1629:	01 00                	add    DWORD PTR [eax],eax
    162b:	00 00                	add    BYTE PTR [eax],al
    162d:	01 00                	add    DWORD PTR [eax],eax
    162f:	00 01                	add    BYTE PTR [ecx],al
    1631:	73 72                	jae    16a5 <sysEnter_Vector-0x12e95b>
    1633:	63 2f                	arpl   WORD PTR [edi],bp
    1635:	73 74                	jae    16ab <sysEnter_Vector-0x12e955>
    1637:	72 69                	jb     16a2 <sysEnter_Vector-0x12e95e>
    1639:	6e                   	outs   dx,BYTE PTR ds:[esi]
    163a:	67 73 00             	addr16 jae 163d <sysEnter_Vector-0x12e9c3>
    163d:	2f                   	das    
    163e:	68 6f 6d 65 2f       	push   0x2f656d6f
    1643:	79 6f                	jns    16b4 <sysEnter_Vector-0x12e94c>
    1645:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    164c:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    164f:	73 73                	jae    16c4 <sysEnter_Vector-0x12e93c>
    1651:	2f                   	das    
    1652:	6c                   	ins    BYTE PTR es:[edi],dx
    1653:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    165a:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1660:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1666:	78 2d                	js     1695 <sysEnter_Vector-0x12e96b>
    1668:	67 6e                	outs   dx,BYTE PTR ds:[si]
    166a:	75 2f                	jne    169b <sysEnter_Vector-0x12e965>
    166c:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1671:	2f                   	das    
    1672:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1679:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    167c:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1680:	65 00 00             	add    BYTE PTR gs:[eax],al
    1683:	73 74                	jae    16f9 <sysEnter_Vector-0x12e907>
    1685:	72 63                	jb     16ea <sysEnter_Vector-0x12e916>
    1687:	70 79                	jo     1702 <sysEnter_Vector-0x12e8fe>
    1689:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    168c:	01 00                	add    DWORD PTR [eax],eax
    168e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1691:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1698:	63 
    1699:	2e                   	cs
    169a:	68 00 02 00 00       	push   0x200
    169f:	6d                   	ins    DWORD PTR es:[edi],dx
    16a0:	61                   	popa   
    16a1:	6c                   	ins    BYTE PTR es:[edi],dx
    16a2:	6c                   	ins    BYTE PTR es:[edi],dx
    16a3:	6f                   	outs   dx,DWORD PTR ds:[esi]
    16a4:	63 2e                	arpl   WORD PTR [esi],bp
    16a6:	68 00 03 00 00       	push   0x300
    16ab:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    16b2:	03 00                	add    eax,DWORD PTR [eax]
    16b4:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    16b8:	43                   	inc    ebx
    16b9:	68 72 69 73 4f       	push   0x4f736972
    16be:	53                   	push   ebx
    16bf:	2e                   	cs
    16c0:	68 00 03 00 00       	push   0x300
    16c5:	00 00                	add    BYTE PTR [eax],al
    16c7:	05 02 fc 31 00       	add    eax,0x31fc02
    16cc:	9f                   	lahf   
    16cd:	16                   	push   ss
    16ce:	f3 67 00 02          	repz add BYTE PTR [bp+si],al
    16d2:	04 01                	add    al,0x1
    16d4:	06                   	push   es
    16d5:	20 06                	and    BYTE PTR [esi],al
    16d7:	08 ca                	or     dl,cl
    16d9:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    16df:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16e2:	06                   	push   es
    16e3:	20 06                	and    BYTE PTR [esi],al
    16e5:	08 ca                	or     dl,cl
    16e7:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    16ed:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    16f0:	06                   	push   es
    16f1:	20 00                	and    BYTE PTR [eax],al
    16f3:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16f6:	08 c8                	or     al,cl
    16f8:	06                   	push   es
    16f9:	ca 3d 02             	retf   0x23d
    16fc:	02 00                	add    al,BYTE PTR [eax]
    16fe:	01 01                	add    DWORD PTR [ecx],eax
    1700:	d5 00                	aad    0x0
    1702:	00 00                	add    BYTE PTR [eax],al
    1704:	02 00                	add    al,BYTE PTR [eax]
    1706:	a8 00                	test   al,0x0
    1708:	00 00                	add    BYTE PTR [eax],al
    170a:	01 01                	add    DWORD PTR [ecx],eax
    170c:	fb                   	sti    
    170d:	0e                   	push   cs
    170e:	0d 00 01 01 01       	or     eax,0x1010100
    1713:	01 00                	add    DWORD PTR [eax],eax
    1715:	00 00                	add    BYTE PTR [eax],al
    1717:	01 00                	add    DWORD PTR [eax],eax
    1719:	00 01                	add    BYTE PTR [ecx],al
    171b:	73 72                	jae    178f <sysEnter_Vector-0x12e871>
    171d:	63 2f                	arpl   WORD PTR [edi],bp
    171f:	73 74                	jae    1795 <sysEnter_Vector-0x12e86b>
    1721:	72 69                	jb     178c <sysEnter_Vector-0x12e874>
    1723:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1724:	67 73 00             	addr16 jae 1727 <sysEnter_Vector-0x12e8d9>
    1727:	2f                   	das    
    1728:	68 6f 6d 65 2f       	push   0x2f656d6f
    172d:	79 6f                	jns    179e <sysEnter_Vector-0x12e862>
    172f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1736:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1739:	73 73                	jae    17ae <sysEnter_Vector-0x12e852>
    173b:	2f                   	das    
    173c:	6c                   	ins    BYTE PTR es:[edi],dx
    173d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1744:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    174a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1750:	78 2d                	js     177f <sysEnter_Vector-0x12e881>
    1752:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1754:	75 2f                	jne    1785 <sysEnter_Vector-0x12e87b>
    1756:	35 2e 33 2e 30       	xor    eax,0x302e332e
    175b:	2f                   	das    
    175c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1763:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1766:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    176a:	65 00 00             	add    BYTE PTR gs:[eax],al
    176d:	73 74                	jae    17e3 <sysEnter_Vector-0x12e81d>
    176f:	72 69                	jb     17da <sysEnter_Vector-0x12e826>
    1771:	73 6e                	jae    17e1 <sysEnter_Vector-0x12e81f>
    1773:	75 6d                	jne    17e2 <sysEnter_Vector-0x12e81e>
    1775:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1778:	01 00                	add    DWORD PTR [eax],eax
    177a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    177d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1784:	63 
    1785:	2e                   	cs
    1786:	68 00 02 00 00       	push   0x200
    178b:	6d                   	ins    DWORD PTR es:[edi],dx
    178c:	61                   	popa   
    178d:	6c                   	ins    BYTE PTR es:[edi],dx
    178e:	6c                   	ins    BYTE PTR es:[edi],dx
    178f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1790:	63 2e                	arpl   WORD PTR [esi],bp
    1792:	68 00 03 00 00       	push   0x300
    1797:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    179e:	03 00                	add    eax,DWORD PTR [eax]
    17a0:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    17a4:	43                   	inc    ebx
    17a5:	68 72 69 73 4f       	push   0x4f736972
    17aa:	53                   	push   ebx
    17ab:	2e                   	cs
    17ac:	68 00 03 00 00       	push   0x300
    17b1:	00 00                	add    BYTE PTR [eax],al
    17b3:	05 02 c4 32 00       	add    eax,0x32c402
    17b8:	9f                   	lahf   
    17b9:	1a 08                	sbb    cl,BYTE PTR [eax]
    17bb:	59                   	pop    ecx
    17bc:	00 02                	add    BYTE PTR [edx],al
    17be:	04 01                	add    al,0x1
    17c0:	06                   	push   es
    17c1:	66                   	data16
    17c2:	00 02                	add    BYTE PTR [edx],al
    17c4:	04 02                	add    al,0x2
    17c6:	66 06                	pushw  es
    17c8:	75 59                	jne    1823 <sysEnter_Vector-0x12e7dd>
    17ca:	31 f3                	xor    ebx,esi
    17cc:	76 2f                	jbe    17fd <sysEnter_Vector-0x12e803>
    17ce:	08 e5                	or     ch,ah
    17d0:	72 08                	jb     17da <sysEnter_Vector-0x12e826>
    17d2:	23 5a 02             	and    ebx,DWORD PTR [edx+0x2]
    17d5:	02 00                	add    al,BYTE PTR [eax]
    17d7:	01 01                	add    DWORD PTR [ecx],eax
    17d9:	df 00                	fild   WORD PTR [eax]
    17db:	00 00                	add    BYTE PTR [eax],al
    17dd:	02 00                	add    al,BYTE PTR [eax]
    17df:	b2 00                	mov    dl,0x0
    17e1:	00 00                	add    BYTE PTR [eax],al
    17e3:	01 01                	add    DWORD PTR [ecx],eax
    17e5:	fb                   	sti    
    17e6:	0e                   	push   cs
    17e7:	0d 00 01 01 01       	or     eax,0x1010100
    17ec:	01 00                	add    DWORD PTR [eax],eax
    17ee:	00 00                	add    BYTE PTR [eax],al
    17f0:	01 00                	add    DWORD PTR [eax],eax
    17f2:	00 01                	add    BYTE PTR [ecx],al
    17f4:	73 72                	jae    1868 <sysEnter_Vector-0x12e798>
    17f6:	63 2f                	arpl   WORD PTR [edi],bp
    17f8:	73 74                	jae    186e <sysEnter_Vector-0x12e792>
    17fa:	72 69                	jb     1865 <sysEnter_Vector-0x12e79b>
    17fc:	6e                   	outs   dx,BYTE PTR ds:[esi]
    17fd:	67 73 00             	addr16 jae 1800 <sysEnter_Vector-0x12e800>
    1800:	2f                   	das    
    1801:	68 6f 6d 65 2f       	push   0x2f656d6f
    1806:	79 6f                	jns    1877 <sysEnter_Vector-0x12e789>
    1808:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    180f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1812:	73 73                	jae    1887 <sysEnter_Vector-0x12e779>
    1814:	2f                   	das    
    1815:	6c                   	ins    BYTE PTR es:[edi],dx
    1816:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    181d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1823:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1829:	78 2d                	js     1858 <sysEnter_Vector-0x12e7a8>
    182b:	67 6e                	outs   dx,BYTE PTR ds:[si]
    182d:	75 2f                	jne    185e <sysEnter_Vector-0x12e7a2>
    182f:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1834:	2f                   	das    
    1835:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    183c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    183f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1843:	65 00 00             	add    BYTE PTR gs:[eax],al
    1846:	73 74                	jae    18bc <sysEnter_Vector-0x12e744>
    1848:	72 6c                	jb     18b6 <sysEnter_Vector-0x12e74a>
    184a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    184c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    184f:	01 00                	add    DWORD PTR [eax],eax
    1851:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1854:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    185b:	63 
    185c:	2e                   	cs
    185d:	68 00 02 00 00       	push   0x200
    1862:	73 74                	jae    18d8 <sysEnter_Vector-0x12e728>
    1864:	64                   	fs
    1865:	64                   	fs
    1866:	65                   	gs
    1867:	66                   	data16
    1868:	2e                   	cs
    1869:	68 00 02 00 00       	push   0x200
    186e:	6d                   	ins    DWORD PTR es:[edi],dx
    186f:	61                   	popa   
    1870:	6c                   	ins    BYTE PTR es:[edi],dx
    1871:	6c                   	ins    BYTE PTR es:[edi],dx
    1872:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1873:	63 2e                	arpl   WORD PTR [esi],bp
    1875:	68 00 03 00 00       	push   0x300
    187a:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1881:	03 00                	add    eax,DWORD PTR [eax]
    1883:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1887:	43                   	inc    ebx
    1888:	68 72 69 73 4f       	push   0x4f736972
    188d:	53                   	push   ebx
    188e:	2e                   	cs
    188f:	68 00 03 00 00       	push   0x300
    1894:	00 00                	add    BYTE PTR [eax],al
    1896:	05 02 50 33 00       	add    eax,0x335002
    189b:	9f                   	lahf   
    189c:	15 f3 75 2f 49       	adc    eax,0x492f75f3
    18a1:	e6 3d                	out    0x3d,al
    18a3:	31 c9                	xor    ecx,ecx
    18a5:	ad                   	lods   eax,DWORD PTR ds:[esi]
    18a6:	31 f3                	xor    ebx,esi
    18a8:	75 2f                	jne    18d9 <sysEnter_Vector-0x12e727>
    18aa:	49                   	dec    ecx
    18ab:	00 02                	add    BYTE PTR [edx],al
    18ad:	04 01                	add    al,0x1
    18af:	06                   	push   es
    18b0:	e4 06                	in     al,0x6
    18b2:	84 3d 31 c9 e5 02    	test   BYTE PTR ds:0x2e5c931,bh
    18b8:	02 00                	add    al,BYTE PTR [eax]
    18ba:	01 01                	add    DWORD PTR [ecx],eax
    18bc:	c1 00 00             	rol    DWORD PTR [eax],0x0
    18bf:	00 02                	add    BYTE PTR [edx],al
    18c1:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    18c4:	00 00                	add    BYTE PTR [eax],al
    18c6:	01 01                	add    DWORD PTR [ecx],eax
    18c8:	fb                   	sti    
    18c9:	0e                   	push   cs
    18ca:	0d 00 01 01 01       	or     eax,0x1010100
    18cf:	01 00                	add    DWORD PTR [eax],eax
    18d1:	00 00                	add    BYTE PTR [eax],al
    18d3:	01 00                	add    DWORD PTR [eax],eax
    18d5:	00 01                	add    BYTE PTR [ecx],al
    18d7:	73 72                	jae    194b <sysEnter_Vector-0x12e6b5>
    18d9:	63 2f                	arpl   WORD PTR [edi],bp
    18db:	73 74                	jae    1951 <sysEnter_Vector-0x12e6af>
    18dd:	72 69                	jb     1948 <sysEnter_Vector-0x12e6b8>
    18df:	6e                   	outs   dx,BYTE PTR ds:[esi]
    18e0:	67 73 00             	addr16 jae 18e3 <sysEnter_Vector-0x12e71d>
    18e3:	2f                   	das    
    18e4:	68 6f 6d 65 2f       	push   0x2f656d6f
    18e9:	79 6f                	jns    195a <sysEnter_Vector-0x12e6a6>
    18eb:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    18f2:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    18f5:	73 73                	jae    196a <sysEnter_Vector-0x12e696>
    18f7:	2f                   	das    
    18f8:	6c                   	ins    BYTE PTR es:[edi],dx
    18f9:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1900:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1906:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    190c:	78 2d                	js     193b <sysEnter_Vector-0x12e6c5>
    190e:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1910:	75 2f                	jne    1941 <sysEnter_Vector-0x12e6bf>
    1912:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1917:	2f                   	das    
    1918:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    191f:	00 00                	add    BYTE PTR [eax],al
    1921:	73 74                	jae    1997 <sysEnter_Vector-0x12e669>
    1923:	72 6e                	jb     1993 <sysEnter_Vector-0x12e66d>
    1925:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    1928:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    192b:	01 00                	add    DWORD PTR [eax],eax
    192d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1930:	64                   	fs
    1931:	64                   	fs
    1932:	65                   	gs
    1933:	66                   	data16
    1934:	2e                   	cs
    1935:	68 00 02 00 00       	push   0x200
    193a:	00 00                	add    BYTE PTR [eax],al
    193c:	05 02 f4 33 00       	add    eax,0x33f402
    1941:	9f                   	lahf   
    1942:	03 0c 01             	add    ecx,DWORD PTR [ecx+eax*1]
    1945:	c9                   	leave  
    1946:	2f                   	das    
    1947:	f3 00 02             	repz add BYTE PTR [edx],al
    194a:	04 01                	add    al,0x1
    194c:	06                   	push   es
    194d:	f2 00 02             	repnz add BYTE PTR [edx],al
    1950:	04 02                	add    al,0x2
    1952:	74 06                	je     195a <sysEnter_Vector-0x12e6a6>
    1954:	75 9f                	jne    18f5 <sysEnter_Vector-0x12e70b>
    1956:	70 00                	jo     1958 <sysEnter_Vector-0x12e6a8>
    1958:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    195b:	06                   	push   es
    195c:	ba 06 6b 59 31       	mov    edx,0x31596b06
    1961:	c9                   	leave  
    1962:	2f                   	das    
    1963:	f3 00 02             	repz add BYTE PTR [edx],al
    1966:	04 01                	add    al,0x1
    1968:	06                   	push   es
    1969:	f2 00 02             	repnz add BYTE PTR [edx],al
    196c:	04 02                	add    al,0x2
    196e:	74 06                	je     1976 <sysEnter_Vector-0x12e68a>
    1970:	75 9f                	jne    1911 <sysEnter_Vector-0x12e6ef>
    1972:	70 00                	jo     1974 <sysEnter_Vector-0x12e68c>
    1974:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1977:	06                   	push   es
    1978:	ba 06 6b 59 02       	mov    edx,0x2596b06
    197d:	02 00                	add    al,BYTE PTR [eax]
    197f:	01 01                	add    DWORD PTR [ecx],eax
    1981:	a3 00 00 00 02       	mov    ds:0x2000000,eax
    1986:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    1989:	00 00                	add    BYTE PTR [eax],al
    198b:	01 01                	add    DWORD PTR [ecx],eax
    198d:	fb                   	sti    
    198e:	0e                   	push   cs
    198f:	0d 00 01 01 01       	or     eax,0x1010100
    1994:	01 00                	add    DWORD PTR [eax],eax
    1996:	00 00                	add    BYTE PTR [eax],al
    1998:	01 00                	add    DWORD PTR [eax],eax
    199a:	00 01                	add    BYTE PTR [ecx],al
    199c:	73 72                	jae    1a10 <sysEnter_Vector-0x12e5f0>
    199e:	63 2f                	arpl   WORD PTR [edi],bp
    19a0:	73 74                	jae    1a16 <sysEnter_Vector-0x12e5ea>
    19a2:	72 69                	jb     1a0d <sysEnter_Vector-0x12e5f3>
    19a4:	6e                   	outs   dx,BYTE PTR ds:[esi]
    19a5:	67 73 00             	addr16 jae 19a8 <sysEnter_Vector-0x12e658>
    19a8:	2f                   	das    
    19a9:	68 6f 6d 65 2f       	push   0x2f656d6f
    19ae:	79 6f                	jns    1a1f <sysEnter_Vector-0x12e5e1>
    19b0:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    19b7:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    19ba:	73 73                	jae    1a2f <sysEnter_Vector-0x12e5d1>
    19bc:	2f                   	das    
    19bd:	6c                   	ins    BYTE PTR es:[edi],dx
    19be:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    19c5:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    19cb:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    19d1:	78 2d                	js     1a00 <sysEnter_Vector-0x12e600>
    19d3:	67 6e                	outs   dx,BYTE PTR ds:[si]
    19d5:	75 2f                	jne    1a06 <sysEnter_Vector-0x12e5fa>
    19d7:	35 2e 33 2e 30       	xor    eax,0x302e332e
    19dc:	2f                   	das    
    19dd:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    19e4:	00 00                	add    BYTE PTR [eax],al
    19e6:	73 74                	jae    1a5c <sysEnter_Vector-0x12e5a4>
    19e8:	72 6e                	jb     1a58 <sysEnter_Vector-0x12e5a8>
    19ea:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    19ed:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    19f0:	01 00                	add    DWORD PTR [eax],eax
    19f2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    19f5:	64                   	fs
    19f6:	64                   	fs
    19f7:	65                   	gs
    19f8:	66                   	data16
    19f9:	2e                   	cs
    19fa:	68 00 02 00 00       	push   0x200
    19ff:	00 00                	add    BYTE PTR [eax],al
    1a01:	05 02 c4 34 00       	add    eax,0x34c402
    1a06:	9f                   	lahf   
    1a07:	03 0d 01 f3 67 2f    	add    ecx,DWORD PTR ds:0x2f67f301
    1a0d:	08 67 48             	or     BYTE PTR [edi+0x48],ah
    1a10:	00 02                	add    BYTE PTR [edx],al
    1a12:	04 01                	add    al,0x1
    1a14:	06                   	push   es
    1a15:	66 06                	pushw  es
    1a17:	a2 2f bb 48 6a       	mov    ds:0x6a48bb2f,al
    1a1c:	67 67 3d 31 c9 08 13 	addr32 addr16 cmp eax,0x1308c931
    1a23:	02 02                	add    al,BYTE PTR [edx]
    1a25:	00 01                	add    BYTE PTR [ecx],al
    1a27:	01 53 01             	add    DWORD PTR [ebx+0x1],edx
    1a2a:	00 00                	add    BYTE PTR [eax],al
    1a2c:	02 00                	add    al,BYTE PTR [eax]
    1a2e:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    1a2f:	00 00                	add    BYTE PTR [eax],al
    1a31:	00 01                	add    BYTE PTR [ecx],al
    1a33:	01 fb                	add    ebx,edi
    1a35:	0e                   	push   cs
    1a36:	0d 00 01 01 01       	or     eax,0x1010100
    1a3b:	01 00                	add    DWORD PTR [eax],eax
    1a3d:	00 00                	add    BYTE PTR [eax],al
    1a3f:	01 00                	add    DWORD PTR [eax],eax
    1a41:	00 01                	add    BYTE PTR [ecx],al
    1a43:	73 72                	jae    1ab7 <sysEnter_Vector-0x12e549>
    1a45:	63 2f                	arpl   WORD PTR [edi],bp
    1a47:	73 74                	jae    1abd <sysEnter_Vector-0x12e543>
    1a49:	72 69                	jb     1ab4 <sysEnter_Vector-0x12e54c>
    1a4b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1a4c:	67 73 00             	addr16 jae 1a4f <sysEnter_Vector-0x12e5b1>
    1a4f:	2f                   	das    
    1a50:	68 6f 6d 65 2f       	push   0x2f656d6f
    1a55:	79 6f                	jns    1ac6 <sysEnter_Vector-0x12e53a>
    1a57:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1a5e:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1a61:	73 73                	jae    1ad6 <sysEnter_Vector-0x12e52a>
    1a63:	2f                   	das    
    1a64:	6c                   	ins    BYTE PTR es:[edi],dx
    1a65:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1a6c:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1a72:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1a78:	78 2d                	js     1aa7 <sysEnter_Vector-0x12e559>
    1a7a:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1a7c:	75 2f                	jne    1aad <sysEnter_Vector-0x12e553>
    1a7e:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1a83:	2f                   	das    
    1a84:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1a8b:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1a8e:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1a92:	65 00 00             	add    BYTE PTR gs:[eax],al
    1a95:	73 74                	jae    1b0b <sysEnter_Vector-0x12e4f5>
    1a97:	72 6f                	jb     1b08 <sysEnter_Vector-0x12e4f8>
    1a99:	75 6c                	jne    1b07 <sysEnter_Vector-0x12e4f9>
    1a9b:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1a9e:	01 00                	add    DWORD PTR [eax],eax
    1aa0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1aa3:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1aaa:	63 
    1aab:	2e                   	cs
    1aac:	68 00 02 00 00       	push   0x200
    1ab1:	6d                   	ins    DWORD PTR es:[edi],dx
    1ab2:	61                   	popa   
    1ab3:	6c                   	ins    BYTE PTR es:[edi],dx
    1ab4:	6c                   	ins    BYTE PTR es:[edi],dx
    1ab5:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1ab6:	63 2e                	arpl   WORD PTR [esi],bp
    1ab8:	68 00 03 00 00       	push   0x300
    1abd:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1ac4:	03 00                	add    eax,DWORD PTR [eax]
    1ac6:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1aca:	43                   	inc    ebx
    1acb:	68 72 69 73 4f       	push   0x4f736972
    1ad0:	53                   	push   ebx
    1ad1:	2e                   	cs
    1ad2:	68 00 03 00 00       	push   0x300
    1ad7:	00 00                	add    BYTE PTR [eax],al
    1ad9:	05 02 50 35 00       	add    eax,0x355002
    1ade:	9f                   	lahf   
    1adf:	03 3b                	add    edi,DWORD PTR [ebx]
    1ae1:	01 08                	add    DWORD PTR [eax],ecx
    1ae3:	2f                   	das    
    1ae4:	40                   	inc    eax
    1ae5:	00 02                	add    BYTE PTR [edx],al
    1ae7:	04 01                	add    al,0x1
    1ae9:	7a 00                	jp     1aeb <sysEnter_Vector-0x12e515>
    1aeb:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1aee:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1aef:	59                   	pop    ecx
    1af0:	59                   	pop    ecx
    1af1:	75 c9                	jne    1abc <sysEnter_Vector-0x12e544>
    1af3:	59                   	pop    ecx
    1af4:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1af5:	00 02                	add    BYTE PTR [edx],al
    1af7:	04 02                	add    al,0x2
    1af9:	06                   	push   es
    1afa:	66                   	data16
    1afb:	00 02                	add    BYTE PTR [edx],al
    1afd:	04 03                	add    al,0x3
    1aff:	66 06                	pushw  es
    1b01:	59                   	pop    ecx
    1b02:	00 02                	add    BYTE PTR [edx],al
    1b04:	04 01                	add    al,0x1
    1b06:	06                   	push   es
    1b07:	74 06                	je     1b0f <sysEnter_Vector-0x12e4f1>
    1b09:	75 91                	jne    1a9c <sysEnter_Vector-0x12e564>
    1b0b:	3d 76 67 00 02       	cmp    eax,0x2006776
    1b10:	04 01                	add    al,0x1
    1b12:	06                   	push   es
    1b13:	58                   	pop    eax
    1b14:	00 02                	add    BYTE PTR [edx],al
    1b16:	04 02                	add    al,0x2
    1b18:	74 00                	je     1b1a <sysEnter_Vector-0x12e4e6>
    1b1a:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1b1d:	58                   	pop    eax
    1b1e:	06                   	push   es
    1b1f:	3d 08 21 08 2f       	cmp    eax,0x2f082108
    1b24:	9f                   	lahf   
    1b25:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1b29:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b2c:	06                   	push   es
    1b2d:	58                   	pop    eax
    1b2e:	00 02                	add    BYTE PTR [edx],al
    1b30:	04 03                	add    al,0x3
    1b32:	58                   	pop    eax
    1b33:	00 02                	add    BYTE PTR [edx],al
    1b35:	04 04                	add    al,0x4
    1b37:	74 00                	je     1b39 <sysEnter_Vector-0x12e4c7>
    1b39:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1b3c:	58                   	pop    eax
    1b3d:	06                   	push   es
    1b3e:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1b41:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b44:	06                   	push   es
    1b45:	66                   	data16
    1b46:	00 02                	add    BYTE PTR [edx],al
    1b48:	04 02                	add    al,0x2
    1b4a:	58                   	pop    eax
    1b4b:	00 02                	add    BYTE PTR [edx],al
    1b4d:	04 03                	add    al,0x3
    1b4f:	58                   	pop    eax
    1b50:	06                   	push   es
    1b51:	67 76 59             	addr16 jbe 1bad <sysEnter_Vector-0x12e453>
    1b54:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    1b58:	03 10                	add    edx,DWORD PTR [eax]
    1b5a:	ac                   	lods   al,BYTE PTR ds:[esi]
    1b5b:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    1b5e:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1b61:	20 67 75             	and    BYTE PTR [edi+0x75],ah
    1b64:	67 2f                	addr16 das 
    1b66:	67 00 02             	add    BYTE PTR [bp+si],al
    1b69:	04 01                	add    al,0x1
    1b6b:	06                   	push   es
    1b6c:	66                   	data16
    1b6d:	00 02                	add    BYTE PTR [edx],al
    1b6f:	04 02                	add    al,0x2
    1b71:	58                   	pop    eax
    1b72:	00 02                	add    BYTE PTR [edx],al
    1b74:	04 04                	add    al,0x4
    1b76:	3c 06                	cmp    al,0x6
    1b78:	59                   	pop    ecx
    1b79:	2f                   	das    
    1b7a:	02 08                	add    cl,BYTE PTR [eax]
    1b7c:	00 01                	add    BYTE PTR [ecx],al
    1b7e:	01 43 00             	add    DWORD PTR [ebx+0x0],eax
    1b81:	00 00                	add    BYTE PTR [eax],al
    1b83:	02 00                	add    al,BYTE PTR [eax]
    1b85:	2d 00 00 00 01       	sub    eax,0x1000000
    1b8a:	01 fb                	add    ebx,edi
    1b8c:	0e                   	push   cs
    1b8d:	0d 00 01 01 01       	or     eax,0x1010100
    1b92:	01 00                	add    DWORD PTR [eax],eax
    1b94:	00 00                	add    BYTE PTR [eax],al
    1b96:	01 00                	add    DWORD PTR [eax],eax
    1b98:	00 01                	add    BYTE PTR [ecx],al
    1b9a:	73 72                	jae    1c0e <sysEnter_Vector-0x12e3f2>
    1b9c:	63 2f                	arpl   WORD PTR [edi],bp
    1b9e:	73 74                	jae    1c14 <sysEnter_Vector-0x12e3ec>
    1ba0:	72 69                	jb     1c0b <sysEnter_Vector-0x12e3f5>
    1ba2:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1ba3:	67 73 00             	addr16 jae 1ba6 <sysEnter_Vector-0x12e45a>
    1ba6:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1ba9:	72 70                	jb     1c1b <sysEnter_Vector-0x12e3e5>
    1bab:	61                   	popa   
    1bac:	72 74                	jb     1c22 <sysEnter_Vector-0x12e3de>
    1bae:	73 2e                	jae    1bde <sysEnter_Vector-0x12e422>
    1bb0:	63 00                	arpl   WORD PTR [eax],ax
    1bb2:	01 00                	add    DWORD PTR [eax],eax
    1bb4:	00 00                	add    BYTE PTR [eax],al
    1bb6:	00 05 02 d0 36 00    	add    BYTE PTR ds:0x36d002,al
    1bbc:	9f                   	lahf   
    1bbd:	13 c9                	adc    ecx,ecx
    1bbf:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1bc0:	3d 02 02 00 01       	cmp    eax,0x1000202
    1bc5:	01 7f 01             	add    DWORD PTR [edi+0x1],edi
    1bc8:	00 00                	add    BYTE PTR [eax],al
    1bca:	02 00                	add    al,BYTE PTR [eax]
    1bcc:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    1bcd:	00 00                	add    BYTE PTR [eax],al
    1bcf:	00 01                	add    BYTE PTR [ecx],al
    1bd1:	01 fb                	add    ebx,edi
    1bd3:	0e                   	push   cs
    1bd4:	0d 00 01 01 01       	or     eax,0x1010100
    1bd9:	01 00                	add    DWORD PTR [eax],eax
    1bdb:	00 00                	add    BYTE PTR [eax],al
    1bdd:	01 00                	add    DWORD PTR [eax],eax
    1bdf:	00 01                	add    BYTE PTR [ecx],al
    1be1:	73 72                	jae    1c55 <sysEnter_Vector-0x12e3ab>
    1be3:	63 2f                	arpl   WORD PTR [edi],bp
    1be5:	73 74                	jae    1c5b <sysEnter_Vector-0x12e3a5>
    1be7:	72 69                	jb     1c52 <sysEnter_Vector-0x12e3ae>
    1be9:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1bea:	67 73 00             	addr16 jae 1bed <sysEnter_Vector-0x12e413>
    1bed:	2f                   	das    
    1bee:	68 6f 6d 65 2f       	push   0x2f656d6f
    1bf3:	79 6f                	jns    1c64 <sysEnter_Vector-0x12e39c>
    1bf5:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1bfc:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1bff:	73 73                	jae    1c74 <sysEnter_Vector-0x12e38c>
    1c01:	2f                   	das    
    1c02:	6c                   	ins    BYTE PTR es:[edi],dx
    1c03:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1c0a:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1c10:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1c16:	78 2d                	js     1c45 <sysEnter_Vector-0x12e3bb>
    1c18:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1c1a:	75 2f                	jne    1c4b <sysEnter_Vector-0x12e3b5>
    1c1c:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1c21:	2f                   	das    
    1c22:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1c29:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1c2c:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1c30:	65 00 00             	add    BYTE PTR gs:[eax],al
    1c33:	73 74                	jae    1ca9 <sysEnter_Vector-0x12e357>
    1c35:	72 74                	jb     1cab <sysEnter_Vector-0x12e355>
    1c37:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1c38:	6c                   	ins    BYTE PTR es:[edi],dx
    1c39:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1c3c:	01 00                	add    DWORD PTR [eax],eax
    1c3e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1c41:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1c48:	63 
    1c49:	2e                   	cs
    1c4a:	68 00 02 00 00       	push   0x200
    1c4f:	6d                   	ins    DWORD PTR es:[edi],dx
    1c50:	61                   	popa   
    1c51:	6c                   	ins    BYTE PTR es:[edi],dx
    1c52:	6c                   	ins    BYTE PTR es:[edi],dx
    1c53:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1c54:	63 2e                	arpl   WORD PTR [esi],bp
    1c56:	68 00 03 00 00       	push   0x300
    1c5b:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1c62:	03 00                	add    eax,DWORD PTR [eax]
    1c64:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1c68:	43                   	inc    ebx
    1c69:	68 72 69 73 4f       	push   0x4f736972
    1c6e:	53                   	push   ebx
    1c6f:	2e                   	cs
    1c70:	68 00 03 00 00       	push   0x300
    1c75:	00 00                	add    BYTE PTR [eax],al
    1c77:	05 02 f0 36 00       	add    eax,0x36f002
    1c7c:	9f                   	lahf   
    1c7d:	03 d7                	add    edx,edi
    1c7f:	00 01                	add    BYTE PTR [ecx],al
    1c81:	08 2f                	or     BYTE PTR [edi],ch
    1c83:	40                   	inc    eax
    1c84:	00 02                	add    BYTE PTR [edx],al
    1c86:	04 01                	add    al,0x1
    1c88:	7c 00                	jl     1c8a <sysEnter_Vector-0x12e376>
    1c8a:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1c8d:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1c8e:	59                   	pop    ecx
    1c8f:	59                   	pop    ecx
    1c90:	75 c9                	jne    1c5b <sysEnter_Vector-0x12e3a5>
    1c92:	59                   	pop    ecx
    1c93:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1c94:	00 02                	add    BYTE PTR [edx],al
    1c96:	04 02                	add    al,0x2
    1c98:	06                   	push   es
    1c99:	66                   	data16
    1c9a:	00 02                	add    BYTE PTR [edx],al
    1c9c:	04 03                	add    al,0x3
    1c9e:	66 06                	pushw  es
    1ca0:	59                   	pop    ecx
    1ca1:	00 02                	add    BYTE PTR [edx],al
    1ca3:	04 01                	add    al,0x1
    1ca5:	06                   	push   es
    1ca6:	74 06                	je     1cae <sysEnter_Vector-0x12e352>
    1ca8:	75 91                	jne    1c3b <sysEnter_Vector-0x12e3c5>
    1caa:	3d 76 67 00 02       	cmp    eax,0x2006776
    1caf:	04 01                	add    al,0x1
    1cb1:	06                   	push   es
    1cb2:	58                   	pop    eax
    1cb3:	00 02                	add    BYTE PTR [edx],al
    1cb5:	04 02                	add    al,0x2
    1cb7:	74 00                	je     1cb9 <sysEnter_Vector-0x12e347>
    1cb9:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1cbc:	58                   	pop    eax
    1cbd:	06                   	push   es
    1cbe:	03 13                	add    edx,DWORD PTR [ebx]
    1cc0:	3c 00                	cmp    al,0x0
    1cc2:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1cc5:	06                   	push   es
    1cc6:	66                   	data16
    1cc7:	00 02                	add    BYTE PTR [edx],al
    1cc9:	04 02                	add    al,0x2
    1ccb:	74 00                	je     1ccd <sysEnter_Vector-0x12e333>
    1ccd:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1cd0:	06                   	push   es
    1cd1:	59                   	pop    ecx
    1cd2:	00 02                	add    BYTE PTR [edx],al
    1cd4:	04 04                	add    al,0x4
    1cd6:	08 3d 00 02 04 04    	or     BYTE PTR ds:0x4040200,bh
    1cdc:	f3 9f                	repz lahf 
    1cde:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1ce2:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1ce5:	06                   	push   es
    1ce6:	58                   	pop    eax
    1ce7:	00 02                	add    BYTE PTR [edx],al
    1ce9:	04 03                	add    al,0x3
    1ceb:	58                   	pop    eax
    1cec:	00 02                	add    BYTE PTR [edx],al
    1cee:	04 04                	add    al,0x4
    1cf0:	74 00                	je     1cf2 <sysEnter_Vector-0x12e30e>
    1cf2:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1cf5:	58                   	pop    eax
    1cf6:	06                   	push   es
    1cf7:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1cfa:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1cfd:	06                   	push   es
    1cfe:	66                   	data16
    1cff:	00 02                	add    BYTE PTR [edx],al
    1d01:	04 02                	add    al,0x2
    1d03:	58                   	pop    eax
    1d04:	00 02                	add    BYTE PTR [edx],al
    1d06:	04 03                	add    al,0x3
    1d08:	58                   	pop    eax
    1d09:	06                   	push   es
    1d0a:	59                   	pop    ecx
    1d0b:	76 59                	jbe    1d66 <sysEnter_Vector-0x12e29a>
    1d0d:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    1d11:	03 10                	add    edx,DWORD PTR [eax]
    1d13:	ac                   	lods   al,BYTE PTR ds:[esi]
    1d14:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    1d17:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1d1a:	20 67 00             	and    BYTE PTR [edi+0x0],ah
    1d1d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1d20:	06                   	push   es
    1d21:	66                   	data16
    1d22:	00 02                	add    BYTE PTR [edx],al
    1d24:	04 02                	add    al,0x2
    1d26:	74 00                	je     1d28 <sysEnter_Vector-0x12e2d8>
    1d28:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1d2b:	58                   	pop    eax
    1d2c:	06                   	push   es
    1d2d:	4b                   	dec    ebx
    1d2e:	67 2f                	addr16 das 
    1d30:	67 00 02             	add    BYTE PTR [bp+si],al
    1d33:	04 01                	add    al,0x1
    1d35:	06                   	push   es
    1d36:	66                   	data16
    1d37:	00 02                	add    BYTE PTR [edx],al
    1d39:	04 02                	add    al,0x2
    1d3b:	58                   	pop    eax
    1d3c:	00 02                	add    BYTE PTR [edx],al
    1d3e:	04 04                	add    al,0x4
    1d40:	3c 06                	cmp    al,0x6
    1d42:	59                   	pop    ecx
    1d43:	2f                   	das    
    1d44:	02 08                	add    cl,BYTE PTR [eax]
    1d46:	00 01                	add    BYTE PTR [ecx],al
    1d48:	01 d9                	add    ecx,ebx
    1d4a:	00 00                	add    BYTE PTR [eax],al
    1d4c:	00 02                	add    BYTE PTR [edx],al
    1d4e:	00 a7 00 00 00 01    	add    BYTE PTR [edi+0x1000000],ah
    1d54:	01 fb                	add    ebx,edi
    1d56:	0e                   	push   cs
    1d57:	0d 00 01 01 01       	or     eax,0x1010100
    1d5c:	01 00                	add    DWORD PTR [eax],eax
    1d5e:	00 00                	add    BYTE PTR [eax],al
    1d60:	01 00                	add    DWORD PTR [eax],eax
    1d62:	00 01                	add    BYTE PTR [ecx],al
    1d64:	73 72                	jae    1dd8 <sysEnter_Vector-0x12e228>
    1d66:	63 2f                	arpl   WORD PTR [edi],bp
    1d68:	73 74                	jae    1dde <sysEnter_Vector-0x12e222>
    1d6a:	72 69                	jb     1dd5 <sysEnter_Vector-0x12e22b>
    1d6c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1d6d:	67 73 00             	addr16 jae 1d70 <sysEnter_Vector-0x12e290>
    1d70:	2f                   	das    
    1d71:	68 6f 6d 65 2f       	push   0x2f656d6f
    1d76:	79 6f                	jns    1de7 <sysEnter_Vector-0x12e219>
    1d78:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1d7f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1d82:	73 73                	jae    1df7 <sysEnter_Vector-0x12e209>
    1d84:	2f                   	das    
    1d85:	6c                   	ins    BYTE PTR es:[edi],dx
    1d86:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1d8d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1d93:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1d99:	78 2d                	js     1dc8 <sysEnter_Vector-0x12e238>
    1d9b:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1d9d:	75 2f                	jne    1dce <sysEnter_Vector-0x12e232>
    1d9f:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1da4:	2f                   	das    
    1da5:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1dac:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1daf:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1db3:	65 00 00             	add    BYTE PTR gs:[eax],al
    1db6:	73 74                	jae    1e2c <sysEnter_Vector-0x12e1d4>
    1db8:	72 74                	jb     1e2e <sysEnter_Vector-0x12e1d2>
    1dba:	72 69                	jb     1e25 <sysEnter_Vector-0x12e1db>
    1dbc:	6d                   	ins    DWORD PTR es:[edi],dx
    1dbd:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1dc0:	01 00                	add    DWORD PTR [eax],eax
    1dc2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1dc5:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1dcc:	63 
    1dcd:	2e                   	cs
    1dce:	68 00 02 00 00       	push   0x200
    1dd3:	6d                   	ins    DWORD PTR es:[edi],dx
    1dd4:	61                   	popa   
    1dd5:	6c                   	ins    BYTE PTR es:[edi],dx
    1dd6:	6c                   	ins    BYTE PTR es:[edi],dx
    1dd7:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1dd8:	63 2e                	arpl   WORD PTR [esi],bp
    1dda:	68 00 03 00 00       	push   0x300
    1ddf:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1de6:	03 00                	add    eax,DWORD PTR [eax]
    1de8:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1dec:	43                   	inc    ebx
    1ded:	68 72 69 73 4f       	push   0x4f736972
    1df2:	53                   	push   ebx
    1df3:	2e                   	cs
    1df4:	68 00 03 00 00       	push   0x300
    1df9:	00 00                	add    BYTE PTR [eax],al
    1dfb:	05 02 8c 38 00       	add    eax,0x388c02
    1e00:	9f                   	lahf   
    1e01:	15 08 13 bf 30       	adc    eax,0x30bf1308
    1e06:	48                   	dec    eax
    1e07:	b3 08                	mov    bl,0x8
    1e09:	9f                   	lahf   
    1e0a:	30 b8 00 02 04 01    	xor    BYTE PTR [eax+0x1040200],bh
    1e10:	06                   	push   es
    1e11:	82                   	(bad)  
    1e12:	06                   	push   es
    1e13:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1e14:	84 00                	test   BYTE PTR [eax],al
    1e16:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1e19:	06                   	push   es
    1e1a:	20 06                	and    BYTE PTR [esi],al
    1e1c:	08 ca                	or     dl,cl
    1e1e:	69 f3 d7 02 02 00    	imul   esi,ebx,0x202d7
    1e24:	01 01                	add    DWORD PTR [ecx],eax
    1e26:	e4 00                	in     al,0x0
    1e28:	00 00                	add    BYTE PTR [eax],al
    1e2a:	02 00                	add    al,BYTE PTR [eax]
    1e2c:	ae                   	scas   al,BYTE PTR es:[edi]
    1e2d:	00 00                	add    BYTE PTR [eax],al
    1e2f:	00 01                	add    BYTE PTR [ecx],al
    1e31:	01 fb                	add    ebx,edi
    1e33:	0e                   	push   cs
    1e34:	0d 00 01 01 01       	or     eax,0x1010100
    1e39:	01 00                	add    DWORD PTR [eax],eax
    1e3b:	00 00                	add    BYTE PTR [eax],al
    1e3d:	01 00                	add    DWORD PTR [eax],eax
    1e3f:	00 01                	add    BYTE PTR [ecx],al
    1e41:	73 72                	jae    1eb5 <sysEnter_Vector-0x12e14b>
    1e43:	63 00                	arpl   WORD PTR [eax],ax
    1e45:	2f                   	das    
    1e46:	68 6f 6d 65 2f       	push   0x2f656d6f
    1e4b:	79 6f                	jns    1ebc <sysEnter_Vector-0x12e144>
    1e4d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1e54:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1e57:	73 73                	jae    1ecc <sysEnter_Vector-0x12e134>
    1e59:	2f                   	das    
    1e5a:	6c                   	ins    BYTE PTR es:[edi],dx
    1e5b:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1e62:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1e68:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1e6e:	78 2d                	js     1e9d <sysEnter_Vector-0x12e163>
    1e70:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1e72:	75 2f                	jne    1ea3 <sysEnter_Vector-0x12e15d>
    1e74:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1e79:	2f                   	das    
    1e7a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1e81:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1e84:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1e88:	65 00 00             	add    BYTE PTR gs:[eax],al
    1e8b:	73 74                	jae    1f01 <sysEnter_Vector-0x12e0ff>
    1e8d:	72 72                	jb     1f01 <sysEnter_Vector-0x12e0ff>
    1e8f:	65                   	gs
    1e90:	70 6c                	jo     1efe <sysEnter_Vector-0x12e102>
    1e92:	61                   	popa   
    1e93:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
    1e96:	63 00                	arpl   WORD PTR [eax],ax
    1e98:	01 00                	add    DWORD PTR [eax],eax
    1e9a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1e9d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1ea4:	63 
    1ea5:	2e                   	cs
    1ea6:	68 00 02 00 00       	push   0x200
    1eab:	73 74                	jae    1f21 <sysEnter_Vector-0x12e0df>
    1ead:	64                   	fs
    1eae:	64                   	fs
    1eaf:	65                   	gs
    1eb0:	66                   	data16
    1eb1:	2e                   	cs
    1eb2:	68 00 02 00 00       	push   0x200
    1eb7:	6d                   	ins    DWORD PTR es:[edi],dx
    1eb8:	61                   	popa   
    1eb9:	6c                   	ins    BYTE PTR es:[edi],dx
    1eba:	6c                   	ins    BYTE PTR es:[edi],dx
    1ebb:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1ebc:	63 2e                	arpl   WORD PTR [esi],bp
    1ebe:	68 00 03 00 00       	push   0x300
    1ec3:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1eca:	03 00                	add    eax,DWORD PTR [eax]
    1ecc:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1ed0:	43                   	inc    ebx
    1ed1:	68 72 69 73 4f       	push   0x4f736972
    1ed6:	53                   	push   ebx
    1ed7:	2e                   	cs
    1ed8:	68 00 03 00 00       	push   0x300
    1edd:	00 00                	add    BYTE PTR [eax],al
    1edf:	05 02 44 39 00       	add    eax,0x394402
    1ee4:	9f                   	lahf   
    1ee5:	03 0d 01 08 2f 08    	add    ecx,DWORD PTR ds:0x82f0801
    1eeb:	3f                   	aas    
    1eec:	76 5a                	jbe    1f48 <sysEnter_Vector-0x12e0b8>
    1eee:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
    1ef1:	cb                   	retf   
    1ef2:	08 77 02             	or     BYTE PTR [edi+0x2],dh
    1ef5:	2a 15 02 28 13 03    	sub    dl,BYTE PTR ds:0x3132802
    1efb:	73 08                	jae    1f05 <sysEnter_Vector-0x12e0fb>
    1efd:	12 03                	adc    al,BYTE PTR [ebx]
    1eff:	11 08                	adc    DWORD PTR [eax],ecx
    1f01:	c8 08 68 3d          	enter  0x6808,0x3d
    1f05:	77 f3                	ja     1efa <sysEnter_Vector-0x12e106>
    1f07:	08 3d 02 02 00 01    	or     BYTE PTR ds:0x1000202,bh
    1f0d:	01 f3                	add    ebx,esi
    1f0f:	00 00                	add    BYTE PTR [eax],al
    1f11:	00 02                	add    BYTE PTR [edx],al
    1f13:	00 9e 00 00 00 01    	add    BYTE PTR [esi+0x1000000],bl
    1f19:	01 fb                	add    ebx,edi
    1f1b:	0e                   	push   cs
    1f1c:	0d 00 01 01 01       	or     eax,0x1010100
    1f21:	01 00                	add    DWORD PTR [eax],eax
    1f23:	00 00                	add    BYTE PTR [eax],al
    1f25:	01 00                	add    DWORD PTR [eax],eax
    1f27:	00 01                	add    BYTE PTR [ecx],al
    1f29:	73 72                	jae    1f9d <sysEnter_Vector-0x12e063>
    1f2b:	63 00                	arpl   WORD PTR [eax],ax
    1f2d:	2f                   	das    
    1f2e:	68 6f 6d 65 2f       	push   0x2f656d6f
    1f33:	79 6f                	jns    1fa4 <sysEnter_Vector-0x12e05c>
    1f35:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1f3c:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1f3f:	73 73                	jae    1fb4 <sysEnter_Vector-0x12e04c>
    1f41:	2f                   	das    
    1f42:	6c                   	ins    BYTE PTR es:[edi],dx
    1f43:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1f4a:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1f50:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1f56:	78 2d                	js     1f85 <sysEnter_Vector-0x12e07b>
    1f58:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1f5a:	75 2f                	jne    1f8b <sysEnter_Vector-0x12e075>
    1f5c:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1f61:	2f                   	das    
    1f62:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1f69:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1f6c:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1f70:	65 00 00             	add    BYTE PTR gs:[eax],al
    1f73:	73 74                	jae    1fe9 <sysEnter_Vector-0x12e017>
    1f75:	72 73                	jb     1fea <sysEnter_Vector-0x12e016>
    1f77:	74 72                	je     1feb <sysEnter_Vector-0x12e015>
    1f79:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1f7c:	01 00                	add    DWORD PTR [eax],eax
    1f7e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1f81:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1f88:	63 
    1f89:	2e                   	cs
    1f8a:	68 00 02 00 00       	push   0x200
    1f8f:	6d                   	ins    DWORD PTR es:[edi],dx
    1f90:	61                   	popa   
    1f91:	6c                   	ins    BYTE PTR es:[edi],dx
    1f92:	6c                   	ins    BYTE PTR es:[edi],dx
    1f93:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1f94:	63 2e                	arpl   WORD PTR [esi],bp
    1f96:	68 00 03 00 00       	push   0x300
    1f9b:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1fa2:	03 00                	add    eax,DWORD PTR [eax]
    1fa4:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1fa8:	43                   	inc    ebx
    1fa9:	68 72 69 73 4f       	push   0x4f736972
    1fae:	53                   	push   ebx
    1faf:	2e                   	cs
    1fb0:	68 00 03 00 00       	push   0x300
    1fb5:	00 00                	add    BYTE PTR [eax],al
    1fb7:	05 02 88 3a 00       	add    eax,0x3a8802
    1fbc:	9f                   	lahf   
    1fbd:	03 33                	add    esi,DWORD PTR [ebx]
    1fbf:	01 08                	add    DWORD PTR [eax],ecx
    1fc1:	27                   	daa    
    1fc2:	68 3d 75 5b c9       	push   0xc95b753d
    1fc7:	c9                   	leave  
    1fc8:	5b                   	pop    ebx
    1fc9:	3e                   	ds
    1fca:	75 5a                	jne    2026 <sysEnter_Vector-0x12dfda>
    1fcc:	c9                   	leave  
    1fcd:	59                   	pop    ecx
    1fce:	08 3f                	or     BYTE PTR [edi],bh
    1fd0:	2c 23                	sub    al,0x23
    1fd2:	03 73 58             	add    esi,DWORD PTR [ebx+0x58]
    1fd5:	1c 00                	sbb    al,0x0
    1fd7:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1fda:	06                   	push   es
    1fdb:	4a                   	dec    edx
    1fdc:	06                   	push   es
    1fdd:	03 13                	add    edx,DWORD PTR [ebx]
    1fdf:	9e                   	sahf   
    1fe0:	59                   	pop    ecx
    1fe1:	77 ec                	ja     1fcf <sysEnter_Vector-0x12e031>
    1fe3:	3d 75 5b cb 3e       	cmp    eax,0x3ecb5b75
    1fe8:	75 5a                	jne    2044 <sysEnter_Vector-0x12dfbc>
    1fea:	08 3f                	or     BYTE PTR [edi],bh
    1fec:	2c 23                	sub    al,0x23
    1fee:	03 75 58             	add    esi,DWORD PTR [ebp+0x58]
    1ff1:	1e                   	push   ds
    1ff2:	00 02                	add    BYTE PTR [edx],al
    1ff4:	04 01                	add    al,0x1
    1ff6:	06                   	push   es
    1ff7:	4a                   	dec    edx
    1ff8:	06                   	push   es
    1ff9:	03 0f                	add    ecx,DWORD PTR [edi]
    1ffb:	9e                   	sahf   
    1ffc:	59                   	pop    ecx
    1ffd:	4d                   	dec    ebp
    1ffe:	c9                   	leave  
    1fff:	d7                   	xlat   BYTE PTR ds:[ebx]
    2000:	02 02                	add    al,BYTE PTR [edx]
    2002:	00 01                	add    BYTE PTR [ecx],al
    2004:	01 4c 03 00          	add    DWORD PTR [ebx+eax*1+0x0],ecx
    2008:	00 02                	add    BYTE PTR [edx],al
    200a:	00 d6                	add    dh,dl
    200c:	00 00                	add    BYTE PTR [eax],al
    200e:	00 01                	add    BYTE PTR [ecx],al
    2010:	01 fb                	add    ebx,edi
    2012:	0e                   	push   cs
    2013:	0d 00 01 01 01       	or     eax,0x1010100
    2018:	01 00                	add    DWORD PTR [eax],eax
    201a:	00 00                	add    BYTE PTR [eax],al
    201c:	01 00                	add    DWORD PTR [eax],eax
    201e:	00 01                	add    BYTE PTR [ecx],al
    2020:	73 72                	jae    2094 <sysEnter_Vector-0x12df6c>
    2022:	63 00                	arpl   WORD PTR [eax],ax
    2024:	2f                   	das    
    2025:	68 6f 6d 65 2f       	push   0x2f656d6f
    202a:	79 6f                	jns    209b <sysEnter_Vector-0x12df65>
    202c:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    2033:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    2036:	73 73                	jae    20ab <sysEnter_Vector-0x12df55>
    2038:	2f                   	das    
    2039:	6c                   	ins    BYTE PTR es:[edi],dx
    203a:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    2041:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    2047:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    204d:	78 2d                	js     207c <sysEnter_Vector-0x12df84>
    204f:	67 6e                	outs   dx,BYTE PTR ds:[si]
    2051:	75 2f                	jne    2082 <sysEnter_Vector-0x12df7e>
    2053:	35 2e 33 2e 30       	xor    eax,0x302e332e
    2058:	2f                   	das    
    2059:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    2060:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    2063:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    2067:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    206a:	2e                   	cs
    206b:	2f                   	das    
    206c:	2e                   	cs
    206d:	2e                   	cs
    206e:	2f                   	das    
    206f:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    2073:	6a 2f                	push   0x2f
    2075:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    2078:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    207f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2080:	65                   	gs
    2081:	6c                   	ins    BYTE PTR es:[edi],dx
    2082:	2f                   	das    
    2083:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    208a:	00 00                	add    BYTE PTR [eax],al
    208c:	74 69                	je     20f7 <sysEnter_Vector-0x12df09>
    208e:	6d                   	ins    DWORD PTR es:[edi],dx
    208f:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    2093:	01 00                	add    DWORD PTR [eax],eax
    2095:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    2098:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    209f:	63 
    20a0:	2e                   	cs
    20a1:	68 00 02 00 00       	push   0x200
    20a6:	74 69                	je     2111 <sysEnter_Vector-0x12deef>
    20a8:	6d                   	ins    DWORD PTR es:[edi],dx
    20a9:	65                   	gs
    20aa:	2e                   	cs
    20ab:	68 00 03 00 00       	push   0x300
    20b0:	6d                   	ins    DWORD PTR es:[edi],dx
    20b1:	61                   	popa   
    20b2:	6c                   	ins    BYTE PTR es:[edi],dx
    20b3:	6c                   	ins    BYTE PTR es:[edi],dx
    20b4:	6f                   	outs   dx,DWORD PTR ds:[esi]
    20b5:	63 2e                	arpl   WORD PTR [esi],bp
    20b7:	68 00 03 00 00       	push   0x300
    20bc:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    20c3:	03 00                	add    eax,DWORD PTR [eax]
    20c5:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    20c9:	43                   	inc    ebx
    20ca:	68 72 69 73 4f       	push   0x4f736972
    20cf:	53                   	push   ebx
    20d0:	2e                   	cs
    20d1:	68 00 03 00 00       	push   0x300
    20d6:	73 79                	jae    2151 <sysEnter_Vector-0x12deaf>
    20d8:	73 63                	jae    213d <sysEnter_Vector-0x12dec3>
    20da:	61                   	popa   
    20db:	6c                   	ins    BYTE PTR es:[edi],dx
    20dc:	6c                   	ins    BYTE PTR es:[edi],dx
    20dd:	73 2e                	jae    210d <sysEnter_Vector-0x12def3>
    20df:	68 00 04 00 00       	push   0x400
    20e4:	00 00                	add    BYTE PTR [eax],al
    20e6:	05 02 b4 3b 00       	add    eax,0x3bb402
    20eb:	9f                   	lahf   
    20ec:	03 17                	add    edx,DWORD PTR [edi]
    20ee:	01 08                	add    DWORD PTR [eax],ecx
    20f0:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
    20f3:	f3 3d 78 08 21 84    	repz cmp eax,0x84210878
    20f9:	76 02                	jbe    20fd <sysEnter_Vector-0x12df03>
    20fb:	24 13                	and    al,0x13
    20fd:	08 22                	or     BYTE PTR [edx],ah
    20ff:	02 2e                	add    ch,BYTE PTR [esi]
    2101:	13 02                	adc    eax,DWORD PTR [edx]
    2103:	2f                   	das    
    2104:	13 08                	adc    ecx,DWORD PTR [eax]
    2106:	67 02 2d             	add    ch,BYTE PTR [di]
    2109:	13 2f                	adc    ebp,DWORD PTR [edi]
    210b:	00 02                	add    BYTE PTR [edx],al
    210d:	04 01                	add    al,0x1
    210f:	06                   	push   es
    2110:	9e                   	sahf   
    2111:	00 02                	add    BYTE PTR [edx],al
    2113:	04 04                	add    al,0x4
    2115:	02 23                	add    ah,BYTE PTR [ebx]
    2117:	12 00                	adc    al,BYTE PTR [eax]
    2119:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    2120:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2123:	74 00                	je     2125 <sysEnter_Vector-0x12dedb>
    2125:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2128:	58                   	pop    eax
    2129:	00 02                	add    BYTE PTR [edx],al
    212b:	04 08                	add    al,0x8
    212d:	06                   	push   es
    212e:	3d 48 00 02 04       	cmp    eax,0x4020048
    2133:	01 06                	add    DWORD PTR [esi],eax
    2135:	9e                   	sahf   
    2136:	00 02                	add    BYTE PTR [edx],al
    2138:	04 04                	add    al,0x4
    213a:	02 23                	add    ah,BYTE PTR [ebx]
    213c:	12 00                	adc    al,BYTE PTR [eax]
    213e:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    2145:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2148:	74 00                	je     214a <sysEnter_Vector-0x12deb6>
    214a:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    214d:	58                   	pop    eax
    214e:	06                   	push   es
    214f:	94                   	xchg   esp,eax
    2150:	e5 91                	in     eax,0x91
    2152:	9f                   	lahf   
    2153:	59                   	pop    ecx
    2154:	00 02                	add    BYTE PTR [edx],al
    2156:	04 01                	add    al,0x1
    2158:	06                   	push   es
    2159:	9e                   	sahf   
    215a:	00 02                	add    BYTE PTR [edx],al
    215c:	04 04                	add    al,0x4
    215e:	02 23                	add    ah,BYTE PTR [ebx]
    2160:	12 00                	adc    al,BYTE PTR [eax]
    2162:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    2169:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    216c:	74 00                	je     216e <sysEnter_Vector-0x12de92>
    216e:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2171:	58                   	pop    eax
    2172:	00 02                	add    BYTE PTR [edx],al
    2174:	04 08                	add    al,0x8
    2176:	06                   	push   es
    2177:	08 9f e2 00 02 04    	or     BYTE PTR [edi+0x40200e2],bl
    217d:	01 06                	add    DWORD PTR [esi],eax
    217f:	9e                   	sahf   
    2180:	00 02                	add    BYTE PTR [edx],al
    2182:	04 04                	add    al,0x4
    2184:	02 23                	add    ah,BYTE PTR [ebx]
    2186:	12 00                	adc    al,BYTE PTR [eax]
    2188:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    218f:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2192:	74 00                	je     2194 <sysEnter_Vector-0x12de6c>
    2194:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2197:	58                   	pop    eax
    2198:	06                   	push   es
    2199:	08 f6                	or     dh,dh
    219b:	d7                   	xlat   BYTE PTR ds:[ebx]
    219c:	9f                   	lahf   
    219d:	3d 69 c9 d7 30       	cmp    eax,0x30d7c969
    21a2:	f5                   	cmc    
    21a3:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
    21a6:	2f                   	das    
    21a7:	31 f5                	xor    ebp,esi
    21a9:	08 3d e5 30 c9 d7    	or     BYTE PTR ds:0xd7c930e5,bh
    21af:	30 08                	xor    BYTE PTR [eax],cl
    21b1:	44                   	inc    esp
    21b2:	02 2e                	add    ch,BYTE PTR [esi]
    21b4:	13 02                	adc    eax,DWORD PTR [edx]
    21b6:	3a 13                	cmp    dl,BYTE PTR [ebx]
    21b8:	91                   	xchg   ecx,eax
    21b9:	c9                   	leave  
    21ba:	e6 02                	out    0x2,al
    21bc:	2f                   	das    
    21bd:	13 02                	adc    eax,DWORD PTR [edx]
    21bf:	3c 13                	cmp    al,0x13
    21c1:	9f                   	lahf   
    21c2:	e5 e6                	in     eax,0xe6
    21c4:	08 c9                	or     cl,cl
    21c6:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    21c9:	9f                   	lahf   
    21ca:	e5 4c                	in     eax,0x4c
    21cc:	02 29                	add    ch,BYTE PTR [ecx]
    21ce:	13 02                	adc    eax,DWORD PTR [edx]
    21d0:	2b 13                	sub    edx,DWORD PTR [ebx]
    21d2:	9f                   	lahf   
    21d3:	e5 e6                	in     eax,0xe6
    21d5:	bb 59 08 83 e5       	mov    ebx,0xe5830859
    21da:	a0 00 02 04 01       	mov    al,ds:0x1040200
    21df:	06                   	push   es
    21e0:	c8 00 02 04          	enter  0x200,0x4
    21e4:	04 02                	add    al,0x2
    21e6:	2c 12                	sub    al,0x12
    21e8:	00 02                	add    BYTE PTR [edx],al
    21ea:	04 05                	add    al,0x5
    21ec:	02 2f                	add    ch,BYTE PTR [edi]
    21ee:	12 00                	adc    al,BYTE PTR [eax]
    21f0:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    21f3:	74 00                	je     21f5 <sysEnter_Vector-0x12de0b>
    21f5:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    21f8:	58                   	pop    eax
    21f9:	06                   	push   es
    21fa:	08 99 a5 59 00 02    	or     BYTE PTR [ecx+0x20059a5],bl
    2200:	04 01                	add    al,0x1
    2202:	06                   	push   es
    2203:	c8 00 02 04          	enter  0x200,0x4
    2207:	04 02                	add    al,0x2
    2209:	2c 12                	sub    al,0x12
    220b:	00 02                	add    BYTE PTR [edx],al
    220d:	04 05                	add    al,0x5
    220f:	02 2f                	add    ch,BYTE PTR [edi]
    2211:	12 00                	adc    al,BYTE PTR [eax]
    2213:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2216:	74 00                	je     2218 <sysEnter_Vector-0x12dde8>
    2218:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    221b:	58                   	pop    eax
    221c:	00 02                	add    BYTE PTR [edx],al
    221e:	04 08                	add    al,0x8
    2220:	06                   	push   es
    2221:	08 9f 08 91 9f e0    	or     BYTE PTR [edi-0x1f606ef8],bl
    2227:	00 02                	add    BYTE PTR [edx],al
    2229:	04 01                	add    al,0x1
    222b:	06                   	push   es
    222c:	c8 00 02 04          	enter  0x200,0x4
    2230:	04 02                	add    al,0x2
    2232:	2c 12                	sub    al,0x12
    2234:	00 02                	add    BYTE PTR [edx],al
    2236:	04 05                	add    al,0x5
    2238:	02 2f                	add    ch,BYTE PTR [edi]
    223a:	12 00                	adc    al,BYTE PTR [eax]
    223c:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    223f:	74 00                	je     2241 <sysEnter_Vector-0x12ddbf>
    2241:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2244:	58                   	pop    eax
    2245:	06                   	push   es
    2246:	08 f9                	or     cl,bh
    2248:	bb 75 00 02 04       	mov    ebx,0x4020075
    224d:	01 06                	add    DWORD PTR [esi],eax
    224f:	08 2e                	or     BYTE PTR [esi],ch
    2251:	06                   	push   es
    2252:	9f                   	lahf   
    2253:	75 75                	jne    22ca <sysEnter_Vector-0x12dd36>
    2255:	7b d8                	jnp    222f <sysEnter_Vector-0x12ddd1>
    2257:	00 02                	add    BYTE PTR [edx],al
    2259:	04 01                	add    al,0x1
    225b:	06                   	push   es
    225c:	c8 06 75 e5          	enter  0x7506,0xe5
    2260:	00 02                	add    BYTE PTR [edx],al
    2262:	04 01                	add    al,0x1
    2264:	06                   	push   es
    2265:	02 22                	add    ah,BYTE PTR [edx]
    2267:	12 06                	adc    al,BYTE PTR [esi]
    2269:	4b                   	dec    ebx
    226a:	00 02                	add    BYTE PTR [edx],al
    226c:	04 01                	add    al,0x1
    226e:	06                   	push   es
    226f:	08 ba 00 02 04 03    	or     BYTE PTR [edx+0x3040200],bh
    2275:	02 22                	add    ah,BYTE PTR [edx]
    2277:	12 00                	adc    al,BYTE PTR [eax]
    2279:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    227c:	74 00                	je     227e <sysEnter_Vector-0x12dd82>
    227e:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2281:	58                   	pop    eax
    2282:	00 02                	add    BYTE PTR [edx],al
    2284:	04 06                	add    al,0x6
    2286:	06                   	push   es
    2287:	59                   	pop    ecx
    2288:	00 02                	add    BYTE PTR [edx],al
    228a:	04 01                	add    al,0x1
    228c:	06                   	push   es
    228d:	02 40 12             	add    al,BYTE PTR [eax+0x12]
    2290:	00 02                	add    BYTE PTR [edx],al
    2292:	04 03                	add    al,0x3
    2294:	02 42 12             	add    al,BYTE PTR [edx+0x12]
    2297:	00 02                	add    BYTE PTR [edx],al
    2299:	04 04                	add    al,0x4
    229b:	74 00                	je     229d <sysEnter_Vector-0x12dd63>
    229d:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    22a0:	58                   	pop    eax
    22a1:	00 02                	add    BYTE PTR [edx],al
    22a3:	04 06                	add    al,0x6
    22a5:	06                   	push   es
    22a6:	59                   	pop    ecx
    22a7:	00 02                	add    BYTE PTR [edx],al
    22a9:	04 01                	add    al,0x1
    22ab:	06                   	push   es
    22ac:	02 43 12             	add    al,BYTE PTR [ebx+0x12]
    22af:	00 02                	add    BYTE PTR [edx],al
    22b1:	04 03                	add    al,0x3
    22b3:	02 48 12             	add    cl,BYTE PTR [eax+0x12]
    22b6:	00 02                	add    BYTE PTR [edx],al
    22b8:	04 04                	add    al,0x4
    22ba:	74 00                	je     22bc <sysEnter_Vector-0x12dd44>
    22bc:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    22bf:	58                   	pop    eax
    22c0:	00 02                	add    BYTE PTR [edx],al
    22c2:	04 06                	add    al,0x6
    22c4:	06                   	push   es
    22c5:	5a                   	pop    edx
    22c6:	00 02                	add    BYTE PTR [edx],al
    22c8:	04 06                	add    al,0x6
    22ca:	c9                   	leave  
    22cb:	2f                   	das    
    22cc:	00 02                	add    BYTE PTR [edx],al
    22ce:	04 01                	add    al,0x1
    22d0:	06                   	push   es
    22d1:	9e                   	sahf   
    22d2:	00 02                	add    BYTE PTR [edx],al
    22d4:	04 04                	add    al,0x4
    22d6:	02 23                	add    ah,BYTE PTR [ebx]
    22d8:	12 00                	adc    al,BYTE PTR [eax]
    22da:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    22e1:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    22e4:	74 00                	je     22e6 <sysEnter_Vector-0x12dd1a>
    22e6:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    22e9:	58                   	pop    eax
    22ea:	00 02                	add    BYTE PTR [edx],al
    22ec:	04 08                	add    al,0x8
    22ee:	06                   	push   es
    22ef:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    22f2:	e8 bb 00 02 04       	call   40223b2 <sysEnter_Vector+0x3ef23b2>
    22f7:	01 06                	add    DWORD PTR [esi],eax
    22f9:	ba 06 4b 68 91       	mov    edx,0x91684b06
    22fe:	02 31                	add    dh,BYTE PTR [ecx]
    2300:	14 02                	adc    al,0x2
    2302:	2c 14                	sub    al,0x14
    2304:	00 02                	add    BYTE PTR [edx],al
    2306:	04 01                	add    al,0x1
    2308:	06                   	push   es
    2309:	02 29                	add    ch,BYTE PTR [ecx]
    230b:	12 06                	adc    al,BYTE PTR [esi]
    230d:	4b                   	dec    ebx
    230e:	bd 00 02 04 01       	mov    ebp,0x1040200
    2313:	06                   	push   es
    2314:	ba 00 02 04 03       	mov    edx,0x3040200
    2319:	06                   	push   es
    231a:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    231d:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
    2320:	81 4b e5 4c ae 9f ae 	or     DWORD PTR [ebx-0x1b],0xae9fae4c
    2327:	77 00                	ja     2329 <sysEnter_Vector-0x12dcd7>
    2329:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    232c:	06                   	push   es
    232d:	82                   	(bad)  
    232e:	06                   	push   es
    232f:	4b                   	dec    ebx
    2330:	68 00 02 04 01       	push   0x1040200
    2335:	06                   	push   es
    2336:	66 06                	pushw  es
    2338:	85 3d 85 08 75 76    	test   DWORD PTR ds:0x76750885,edi
    233e:	08 f3                	or     bl,dh
    2340:	67 08 14             	or     BYTE PTR [si],dl
    2343:	00 02                	add    BYTE PTR [edx],al
    2345:	04 01                	add    al,0x1
    2347:	e5 77                	in     eax,0x77
    2349:	08 21                	or     BYTE PTR [ecx],ah
    234b:	08 2f                	or     BYTE PTR [edi],ch
    234d:	08 3d 3d 02 05 00    	or     BYTE PTR ds:0x5023d,bh
    2353:	01 01                	add    DWORD PTR [ecx],eax

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c                   	ins    BYTE PTR es:[edi],dx
   1:	6f                   	outs   dx,DWORD PTR ds:[esi]
   2:	6e                   	outs   dx,BYTE PTR ds:[esi]
   3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
   7:	6e                   	outs   dx,BYTE PTR ds:[esi]
   8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
   c:	74 00                	je     e <sysEnter_Vector-0x12fff2>
   e:	75 69                	jne    79 <sysEnter_Vector-0x12ff87>
  10:	6e                   	outs   dx,BYTE PTR ds:[esi]
  11:	74 33                	je     46 <sysEnter_Vector-0x12ffba>
  13:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
  16:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
  19:	72 63                	jb     7e <sysEnter_Vector-0x12ff82>
  1b:	68 72 00 2f 68       	push   0x682f0072
  20:	6f                   	outs   dx,DWORD PTR ds:[esi]
  21:	6d                   	ins    DWORD PTR es:[edi],dx
  22:	65                   	gs
  23:	2f                   	das    
  24:	79 6f                	jns    95 <sysEnter_Vector-0x12ff6b>
  26:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
  2d:	6f                   	outs   dx,DWORD PTR ds:[esi]
  2e:	73 2f                	jae    5f <sysEnter_Vector-0x12ffa1>
  30:	61                   	popa   
  31:	70 72                	jo     a5 <sysEnter_Vector-0x12ff5b>
  33:	6f                   	outs   dx,DWORD PTR ds:[esi]
  34:	6a 2f                	push   0x2f
  36:	6c                   	ins    BYTE PTR es:[edi],dx
  37:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
  3e:	4f                   	dec    edi
  3f:	53                   	push   ebx
  40:	00 70 72             	add    BYTE PTR [eax+0x72],dh
  43:	6f                   	outs   dx,DWORD PTR ds:[esi]
  44:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
  47:	73 45                	jae    8e <sysEnter_Vector-0x12ff72>
  49:	6e                   	outs   dx,BYTE PTR ds:[esi]
  4a:	76 70                	jbe    bc <sysEnter_Vector-0x12ff44>
  4c:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
  4f:	6e                   	outs   dx,BYTE PTR ds:[esi]
  50:	74 70                	je     c2 <sysEnter_Vector-0x12ff3e>
  52:	74 72                	je     c6 <sysEnter_Vector-0x12ff3a>
  54:	5f                   	pop    edi
  55:	74 00                	je     57 <sysEnter_Vector-0x12ffa9>
  57:	6c                   	ins    BYTE PTR es:[edi],dx
  58:	6f                   	outs   dx,DWORD PTR ds:[esi]
  59:	6e                   	outs   dx,BYTE PTR ds:[esi]
  5a:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
  5e:	6e                   	outs   dx,BYTE PTR ds:[esi]
  5f:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
  63:	73 69                	jae    ce <sysEnter_Vector-0x12ff32>
  65:	67 6e                	outs   dx,BYTE PTR ds:[si]
  67:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  6c:	74 00                	je     6e <sysEnter_Vector-0x12ff92>
  6e:	66 69 6c 65 73 54 6f 	imul   bp,WORD PTR [ebp+eiz*2+0x73],0x6f54
  75:	43                   	inc    ebx
  76:	6c                   	ins    BYTE PTR es:[edi],dx
  77:	6f                   	outs   dx,DWORD PTR ds:[esi]
  78:	73 65                	jae    df <sysEnter_Vector-0x12ff21>
  7a:	00 68 65             	add    BYTE PTR [eax+0x65],ch
  7d:	61                   	popa   
  7e:	70 45                	jo     c5 <sysEnter_Vector-0x12ff3b>
  80:	6e                   	outs   dx,BYTE PTR ds:[esi]
  81:	64 00 75 6e          	add    BYTE PTR fs:[ebp+0x6e],dh
  85:	73 69                	jae    f0 <sysEnter_Vector-0x12ff10>
  87:	67 6e                	outs   dx,BYTE PTR ds:[si]
  89:	65 64 20 63 68       	gs and BYTE PTR fs:gs:[ebx+0x68],ah
  8e:	61                   	popa   
  8f:	72 00                	jb     91 <sysEnter_Vector-0x12ff6f>
  91:	66 69 6c 65 73 54 6f 	imul   bp,WORD PTR [ebp+eiz*2+0x73],0x6f54
  98:	43                   	inc    ebx
  99:	6c                   	ins    BYTE PTR es:[edi],dx
  9a:	6f                   	outs   dx,DWORD PTR ds:[esi]
  9b:	73 65                	jae    102 <sysEnter_Vector-0x12fefe>
  9d:	43                   	inc    ebx
  9e:	6f                   	outs   dx,DWORD PTR ds:[esi]
  9f:	75 6e                	jne    10f <sysEnter_Vector-0x12fef1>
  a1:	74 00                	je     a3 <sysEnter_Vector-0x12ff5d>
  a3:	68 65 61 70 42       	push   0x42706165
  a8:	61                   	popa   
  a9:	73 65                	jae    110 <sysEnter_Vector-0x12fef0>
  ab:	00 47 4e             	add    BYTE PTR [edi+0x4e],al
  ae:	55                   	push   ebp
  af:	20 43 31             	and    BYTE PTR [ebx+0x31],al
  b2:	31 20                	xor    DWORD PTR [eax],esp
  b4:	35 2e 33 2e 30       	xor    eax,0x302e332e
  b9:	20 2d 6d 61 73 6d    	and    BYTE PTR ds:0x6d73616d,ch
  bf:	3d 69 6e 74 65       	cmp    eax,0x65746e69
  c4:	6c                   	ins    BYTE PTR es:[edi],dx
  c5:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
  cb:	65                   	gs
  cc:	3d 67 65 6e 65       	cmp    eax,0x656e6567
  d1:	72 69                	jb     13c <sysEnter_Vector-0x12fec4>
  d3:	63 20                	arpl   WORD PTR [eax],sp
  d5:	2d 6d 61 72 63       	sub    eax,0x6372616d
  da:	68 3d 70 65 6e       	push   0x6e65703d
  df:	74 69                	je     14a <sysEnter_Vector-0x12feb6>
  e1:	75 6d                	jne    150 <sysEnter_Vector-0x12feb0>
  e3:	70 72                	jo     157 <sysEnter_Vector-0x12fea9>
  e5:	6f                   	outs   dx,DWORD PTR ds:[esi]
  e6:	20 2d 67 20 2d 66    	and    BYTE PTR ds:0x662d2067,ch
  ec:	66                   	data16
  ed:	72 65                	jb     154 <sysEnter_Vector-0x12feac>
  ef:	65                   	gs
  f0:	73 74                	jae    166 <sysEnter_Vector-0x12fe9a>
  f2:	61                   	popa   
  f3:	6e                   	outs   dx,BYTE PTR ds:[esi]
  f4:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
  fb:	76 
  fc:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
 103:	74 79                	je     17e <sysEnter_Vector-0x12fe82>
 105:	3d 68 69 64 64       	cmp    eax,0x64646968
 10a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 10c:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
 112:	00 5f 42             	add    BYTE PTR [edi+0x42],bl
 115:	6f                   	outs   dx,DWORD PTR ds:[esi]
 116:	6f                   	outs   dx,DWORD PTR ds:[esi]
 117:	6c                   	ins    BYTE PTR es:[edi],dx
 118:	00 73 68             	add    BYTE PTR [ebx+0x68],dh
 11b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 11c:	72 74                	jb     192 <sysEnter_Vector-0x12fe6e>
 11e:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
 121:	73 69                	jae    18c <sysEnter_Vector-0x12fe74>
 123:	67 6e                	outs   dx,BYTE PTR ds:[si]
 125:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
 12a:	74 00                	je     12c <sysEnter_Vector-0x12fed4>
 12c:	73 74                	jae    1a2 <sysEnter_Vector-0x12fe5e>
 12e:	72 63                	jb     193 <sysEnter_Vector-0x12fe6d>
 130:	68 72 49 00 68       	push   0x68004972
 135:	65                   	gs
 136:	61                   	popa   
 137:	70 43                	jo     17c <sysEnter_Vector-0x12fe84>
 139:	75 72                	jne    1ad <sysEnter_Vector-0x12fe53>
 13b:	72 00                	jb     13d <sysEnter_Vector-0x12fec3>
 13d:	2e                   	cs
 13e:	2e                   	cs
 13f:	2f                   	das    
 140:	2e                   	cs
 141:	2e                   	cs
 142:	2f                   	das    
 143:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 147:	6a 2f                	push   0x2f
 149:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 14c:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 153:	63 2f                	arpl   WORD PTR [edi],bp
 155:	73 74                	jae    1cb <sysEnter_Vector-0x12fe35>
 157:	72 69                	jb     1c2 <sysEnter_Vector-0x12fe3e>
 159:	6e                   	outs   dx,BYTE PTR ds:[esi]
 15a:	67 73 2f             	addr16 jae 18c <sysEnter_Vector-0x12fe74>
 15d:	73 74                	jae    1d3 <sysEnter_Vector-0x12fe2d>
 15f:	72 63                	jb     1c4 <sysEnter_Vector-0x12fe3c>
 161:	68 72 2e 63 00       	push   0x632e72
 166:	6c                   	ins    BYTE PTR es:[edi],dx
 167:	6f                   	outs   dx,DWORD PTR ds:[esi]
 168:	6e                   	outs   dx,BYTE PTR ds:[esi]
 169:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
 16d:	75 62                	jne    1d1 <sysEnter_Vector-0x12fe2f>
 16f:	6c                   	ins    BYTE PTR es:[edi],dx
 170:	65 00 73 68          	add    BYTE PTR gs:[ebx+0x68],dh
 174:	6f                   	outs   dx,DWORD PTR ds:[esi]
 175:	72 74                	jb     1eb <sysEnter_Vector-0x12fe15>
 177:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
 17a:	74 00                	je     17c <sysEnter_Vector-0x12fe84>
 17c:	6c                   	ins    BYTE PTR es:[edi],dx
 17d:	69 62 63 54 5a 00 73 	imul   esp,DWORD PTR [edx+0x63],0x73005a54
 184:	69 7a 65 74 79 70 65 	imul   edi,DWORD PTR [edx+0x65],0x65707974
 18b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 18e:	72 63                	jb     1f3 <sysEnter_Vector-0x12fe0d>
 190:	73 70                	jae    202 <sysEnter_Vector-0x12fdfe>
 192:	6e                   	outs   dx,BYTE PTR ds:[esi]
 193:	49                   	dec    ecx
 194:	00 2e                	add    BYTE PTR [esi],ch
 196:	2e                   	cs
 197:	2f                   	das    
 198:	2e                   	cs
 199:	2e                   	cs
 19a:	2f                   	das    
 19b:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 19f:	6a 2f                	push   0x2f
 1a1:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 1a4:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 1ab:	63 2f                	arpl   WORD PTR [edi],bp
 1ad:	73 74                	jae    223 <sysEnter_Vector-0x12fddd>
 1af:	72 69                	jb     21a <sysEnter_Vector-0x12fde6>
 1b1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1b2:	67 73 2f             	addr16 jae 1e4 <sysEnter_Vector-0x12fe1c>
 1b5:	73 74                	jae    22b <sysEnter_Vector-0x12fdd5>
 1b7:	72 63                	jb     21c <sysEnter_Vector-0x12fde4>
 1b9:	73 70                	jae    22b <sysEnter_Vector-0x12fdd5>
 1bb:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1bc:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 1bf:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
 1c2:	72 73                	jb     237 <sysEnter_Vector-0x12fdc9>
 1c4:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 1c7:	72 63                	jb     22c <sysEnter_Vector-0x12fdd4>
 1c9:	73 70                	jae    23b <sysEnter_Vector-0x12fdc5>
 1cb:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1cc:	00 2e                	add    BYTE PTR [esi],ch
 1ce:	2e                   	cs
 1cf:	2f                   	das    
 1d0:	2e                   	cs
 1d1:	2e                   	cs
 1d2:	2f                   	das    
 1d3:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 1d7:	6a 2f                	push   0x2f
 1d9:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 1dc:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 1e3:	63 2f                	arpl   WORD PTR [edi],bp
 1e5:	73 74                	jae    25b <sysEnter_Vector-0x12fda5>
 1e7:	72 69                	jb     252 <sysEnter_Vector-0x12fdae>
 1e9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1ea:	67 73 2f             	addr16 jae 21c <sysEnter_Vector-0x12fde4>
 1ed:	73 74                	jae    263 <sysEnter_Vector-0x12fd9d>
 1ef:	72 74                	jb     265 <sysEnter_Vector-0x12fd9b>
 1f1:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1f2:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
 1f5:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 1f9:	74 73                	je     26e <sysEnter_Vector-0x12fd92>
 1fb:	00 64 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],ah
 1ff:	69 6d 00 73 74 72 74 	imul   ebp,DWORD PTR [ebp+0x0],0x74727473
 206:	6f                   	outs   dx,DWORD PTR ds:[esi]
 207:	6b 00 73             	imul   eax,DWORD PTR [eax],0x73
 20a:	74 72                	je     27e <sysEnter_Vector-0x12fd82>
 20c:	74 6f                	je     27d <sysEnter_Vector-0x12fd83>
 20e:	6b 49 00 73          	imul   ecx,DWORD PTR [ecx+0x0],0x73
 212:	72 63                	jb     277 <sysEnter_Vector-0x12fd89>
 214:	2f                   	das    
 215:	61                   	popa   
 216:	73 63                	jae    27b <sysEnter_Vector-0x12fd85>
 218:	69 69 2e 63 00 69 74 	imul   ebp,DWORD PTR [ecx+0x2e],0x74690063
 21f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 220:	61                   	popa   
 221:	49                   	dec    ecx
 222:	00 69 74             	add    BYTE PTR [ecx+0x74],ch
 225:	6f                   	outs   dx,DWORD PTR ds:[esi]
 226:	61                   	popa   
 227:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 22a:	76 65                	jbe    291 <sysEnter_Vector-0x12fd6f>
 22c:	72 73                	jb     2a1 <sysEnter_Vector-0x12fd5f>
 22e:	65                   	gs
 22f:	49                   	dec    ecx
 230:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 233:	67 6e                	outs   dx,BYTE PTR ds:[si]
 235:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 238:	63 2f                	arpl   WORD PTR [edi],bp
 23a:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 23d:	73 6f                	jae    2ae <sysEnter_Vector-0x12fd52>
 23f:	6c                   	ins    BYTE PTR es:[edi],dx
 240:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
 244:	6d                   	ins    DWORD PTR es:[edi],dx
 245:	6f                   	outs   dx,DWORD PTR ds:[esi]
 246:	76 65                	jbe    2ad <sysEnter_Vector-0x12fd53>
 248:	54                   	push   esp
 249:	6f                   	outs   dx,DWORD PTR ds:[esi]
 24a:	58                   	pop    eax
 24b:	59                   	pop    ecx
 24c:	00 73 61             	add    BYTE PTR [ebx+0x61],dh
 24f:	76 65                	jbe    2b6 <sysEnter_Vector-0x12fd4a>
 251:	43                   	inc    ebx
 252:	75 72                	jne    2c6 <sysEnter_Vector-0x12fd3a>
 254:	73 6f                	jae    2c5 <sysEnter_Vector-0x12fd3b>
 256:	72 50                	jb     2a8 <sysEnter_Vector-0x12fd58>
 258:	6f                   	outs   dx,DWORD PTR ds:[esi]
 259:	73 69                	jae    2c4 <sysEnter_Vector-0x12fd3c>
 25b:	74 69                	je     2c6 <sysEnter_Vector-0x12fd3a>
 25d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 25e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 25f:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 262:	73 74                	jae    2d8 <sysEnter_Vector-0x12fd28>
 264:	6f                   	outs   dx,DWORD PTR ds:[esi]
 265:	72 65                	jb     2cc <sysEnter_Vector-0x12fd34>
 267:	43                   	inc    ebx
 268:	75 72                	jne    2dc <sysEnter_Vector-0x12fd24>
 26a:	73 6f                	jae    2db <sysEnter_Vector-0x12fd25>
 26c:	72 50                	jb     2be <sysEnter_Vector-0x12fd42>
 26e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 26f:	73 69                	jae    2da <sysEnter_Vector-0x12fd26>
 271:	74 69                	je     2dc <sysEnter_Vector-0x12fd24>
 273:	6f                   	outs   dx,DWORD PTR ds:[esi]
 274:	6e                   	outs   dx,BYTE PTR ds:[esi]
 275:	00 78 73             	add    BYTE PTR [eax+0x73],bh
 278:	74 72                	je     2ec <sysEnter_Vector-0x12fd14>
 27a:	00 61 6e             	add    BYTE PTR [ecx+0x6e],ah
 27d:	73 69                	jae    2e8 <sysEnter_Vector-0x12fd18>
 27f:	45                   	inc    ebp
 280:	73 63                	jae    2e5 <sysEnter_Vector-0x12fd1b>
 282:	53                   	push   ebx
 283:	65                   	gs
 284:	71 00                	jno    286 <sysEnter_Vector-0x12fd7a>
 286:	79 73                	jns    2fb <sysEnter_Vector-0x12fd05>
 288:	74 72                	je     2fc <sysEnter_Vector-0x12fd04>
 28a:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 28d:	53                   	push   ebx
 28e:	43                   	inc    ebx
 28f:	41                   	inc    ecx
 290:	4c                   	dec    esp
 291:	4c                   	dec    esp
 292:	5f                   	pop    edi
 293:	57                   	push   edi
 294:	41                   	inc    ecx
 295:	49                   	dec    ecx
 296:	54                   	push   esp
 297:	46                   	inc    esi
 298:	4f                   	dec    edi
 299:	52                   	push   edx
 29a:	50                   	push   eax
 29b:	49                   	dec    ecx
 29c:	44                   	inc    esp
 29d:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2a0:	53                   	push   ebx
 2a1:	43                   	inc    ebx
 2a2:	41                   	inc    ecx
 2a3:	4c                   	dec    esp
 2a4:	4c                   	dec    esp
 2a5:	5f                   	pop    edi
 2a6:	47                   	inc    edi
 2a7:	45                   	inc    ebp
 2a8:	54                   	push   esp
 2a9:	54                   	push   esp
 2aa:	49                   	dec    ecx
 2ab:	43                   	inc    ebx
 2ac:	4b                   	dec    ebx
 2ad:	53                   	push   ebx
 2ae:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2b1:	53                   	push   ebx
 2b2:	43                   	inc    ebx
 2b3:	41                   	inc    ecx
 2b4:	4c                   	dec    esp
 2b5:	4c                   	dec    esp
 2b6:	5f                   	pop    edi
 2b7:	53                   	push   ebx
 2b8:	4c                   	dec    esp
 2b9:	45                   	inc    ebp
 2ba:	45                   	inc    ebp
 2bb:	50                   	push   eax
 2bc:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 2bf:	7a 65                	jp     326 <sysEnter_Vector-0x12fcda>
 2c1:	5f                   	pop    edi
 2c2:	74 00                	je     2c4 <sysEnter_Vector-0x12fd3c>
 2c4:	73 72                	jae    338 <sysEnter_Vector-0x12fcc8>
 2c6:	63 2f                	arpl   WORD PTR [edi],bp
 2c8:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 2ca:	76 69                	jbe    335 <sysEnter_Vector-0x12fccb>
 2cc:	72 6f                	jb     33d <sysEnter_Vector-0x12fcc3>
 2ce:	6e                   	outs   dx,BYTE PTR ds:[esi]
 2cf:	6d                   	ins    DWORD PTR es:[edi],dx
 2d0:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 2d2:	74 2e                	je     302 <sysEnter_Vector-0x12fcfe>
 2d4:	63 00                	arpl   WORD PTR [eax],ax
 2d6:	53                   	push   ebx
 2d7:	59                   	pop    ecx
 2d8:	53                   	push   ebx
 2d9:	43                   	inc    ebx
 2da:	41                   	inc    ecx
 2db:	4c                   	dec    esp
 2dc:	4c                   	dec    esp
 2dd:	5f                   	pop    edi
 2de:	4f                   	dec    edi
 2df:	50                   	push   eax
 2e0:	45                   	inc    ebp
 2e1:	4e                   	dec    esi
 2e2:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2e5:	53                   	push   ebx
 2e6:	43                   	inc    ebx
 2e7:	41                   	inc    ecx
 2e8:	4c                   	dec    esp
 2e9:	4c                   	dec    esp
 2ea:	5f                   	pop    edi
 2eb:	47                   	inc    edi
 2ec:	45                   	inc    ebp
 2ed:	54                   	push   esp
 2ee:	54                   	push   esp
 2ef:	49                   	dec    ecx
 2f0:	4d                   	dec    ebp
 2f1:	45                   	inc    ebp
 2f2:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2f5:	53                   	push   ebx
 2f6:	43                   	inc    ebx
 2f7:	41                   	inc    ecx
 2f8:	4c                   	dec    esp
 2f9:	4c                   	dec    esp
 2fa:	5f                   	pop    edi
 2fb:	57                   	push   edi
 2fc:	52                   	push   edx
 2fd:	49                   	dec    ecx
 2fe:	54                   	push   esp
 2ff:	45                   	inc    ebp
 300:	00 73 65             	add    BYTE PTR [ebx+0x65],dh
 303:	74 65                	je     36a <sysEnter_Vector-0x12fc96>
 305:	6e                   	outs   dx,BYTE PTR ds:[esi]
 306:	76 00                	jbe    308 <sysEnter_Vector-0x12fcf8>
 308:	53                   	push   ebx
 309:	59                   	pop    ecx
 30a:	53                   	push   ebx
 30b:	43                   	inc    ebx
 30c:	41                   	inc    ecx
 30d:	4c                   	dec    esp
 30e:	4c                   	dec    esp
 30f:	5f                   	pop    edi
 310:	52                   	push   edx
 311:	45                   	inc    ebp
 312:	41                   	inc    ecx
 313:	44                   	inc    esp
 314:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 317:	74 65                	je     37e <sysEnter_Vector-0x12fc82>
 319:	6e                   	outs   dx,BYTE PTR ds:[esi]
 31a:	76 49                	jbe    365 <sysEnter_Vector-0x12fc9b>
 31c:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 31f:	53                   	push   ebx
 320:	43                   	inc    ebx
 321:	41                   	inc    ecx
 322:	4c                   	dec    esp
 323:	4c                   	dec    esp
 324:	5f                   	pop    edi
 325:	53                   	push   ebx
 326:	54                   	push   esp
 327:	4f                   	dec    edi
 328:	50                   	push   eax
 329:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 32c:	53                   	push   ebx
 32d:	43                   	inc    ebx
 32e:	41                   	inc    ecx
 32f:	4c                   	dec    esp
 330:	4c                   	dec    esp
 331:	5f                   	pop    edi
 332:	53                   	push   ebx
 333:	45                   	inc    ebp
 334:	54                   	push   esp
 335:	53                   	push   ebx
 336:	49                   	dec    ecx
 337:	47                   	inc    edi
 338:	41                   	inc    ecx
 339:	43                   	inc    ebx
 33a:	54                   	push   esp
 33b:	49                   	dec    ecx
 33c:	4f                   	dec    edi
 33d:	4e                   	dec    esi
 33e:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 341:	53                   	push   ebx
 342:	43                   	inc    ebx
 343:	41                   	inc    ecx
 344:	4c                   	dec    esp
 345:	4c                   	dec    esp
 346:	5f                   	pop    edi
 347:	4d                   	dec    ebp
 348:	4d                   	dec    ebp
 349:	41                   	inc    ecx
 34a:	50                   	push   eax
 34b:	00 76 61             	add    BYTE PTR [esi+0x61],dh
 34e:	6c                   	ins    BYTE PTR es:[edi],dx
 34f:	75 65                	jne    3b6 <sysEnter_Vector-0x12fc4a>
 351:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 354:	53                   	push   ebx
 355:	43                   	inc    ebx
 356:	41                   	inc    ecx
 357:	4c                   	dec    esp
 358:	4c                   	dec    esp
 359:	5f                   	pop    edi
 35a:	54                   	push   esp
 35b:	41                   	inc    ecx
 35c:	4b                   	dec    ebx
 35d:	45                   	inc    ebp
 35e:	41                   	inc    ecx
 35f:	44                   	inc    esp
 360:	55                   	push   ebp
 361:	4d                   	dec    ebp
 362:	50                   	push   eax
 363:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 366:	53                   	push   ebx
 367:	43                   	inc    ebx
 368:	41                   	inc    ecx
 369:	4c                   	dec    esp
 36a:	4c                   	dec    esp
 36b:	5f                   	pop    edi
 36c:	53                   	push   ebx
 36d:	54                   	push   esp
 36e:	41                   	inc    ecx
 36f:	54                   	push   esp
 370:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 373:	53                   	push   ebx
 374:	43                   	inc    ebx
 375:	41                   	inc    ecx
 376:	4c                   	dec    esp
 377:	4c                   	dec    esp
 378:	5f                   	pop    edi
 379:	49                   	dec    ecx
 37a:	4e                   	dec    esi
 37b:	56                   	push   esi
 37c:	41                   	inc    ecx
 37d:	4c                   	dec    esp
 37e:	49                   	dec    ecx
 37f:	44                   	inc    esp
 380:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 383:	53                   	push   ebx
 384:	43                   	inc    ebx
 385:	41                   	inc    ecx
 386:	4c                   	dec    esp
 387:	4c                   	dec    esp
 388:	5f                   	pop    edi
 389:	54                   	push   esp
 38a:	45                   	inc    ebp
 38b:	4c                   	dec    esp
 38c:	4c                   	dec    esp
 38d:	00 76 61             	add    BYTE PTR [esi+0x61],dh
 390:	72 6e                	jb     400 <sysEnter_Vector-0x12fc00>
 392:	61                   	popa   
 393:	6d                   	ins    DWORD PTR es:[edi],dx
 394:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
 398:	53                   	push   ebx
 399:	43                   	inc    ebx
 39a:	41                   	inc    ecx
 39b:	4c                   	dec    esp
 39c:	4c                   	dec    esp
 39d:	5f                   	pop    edi
 39e:	4d                   	dec    ebp
 39f:	41                   	inc    ecx
 3a0:	53                   	push   ebx
 3a1:	4b                   	dec    ebx
 3a2:	53                   	push   ebx
 3a3:	49                   	dec    ecx
 3a4:	47                   	inc    edi
 3a5:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3a8:	53                   	push   ebx
 3a9:	43                   	inc    ebx
 3aa:	41                   	inc    ecx
 3ab:	4c                   	dec    esp
 3ac:	4c                   	dec    esp
 3ad:	5f                   	pop    edi
 3ae:	52                   	push   edx
 3af:	45                   	inc    ebp
 3b0:	47                   	inc    edi
 3b1:	45                   	inc    ebp
 3b2:	58                   	pop    eax
 3b3:	49                   	dec    ecx
 3b4:	54                   	push   esp
 3b5:	48                   	dec    eax
 3b6:	41                   	inc    ecx
 3b7:	4e                   	dec    esi
 3b8:	44                   	inc    esp
 3b9:	4c                   	dec    esp
 3ba:	45                   	inc    ebp
 3bb:	52                   	push   edx
 3bc:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3bf:	53                   	push   ebx
 3c0:	43                   	inc    ebx
 3c1:	41                   	inc    ecx
 3c2:	4c                   	dec    esp
 3c3:	4c                   	dec    esp
 3c4:	5f                   	pop    edi
 3c5:	48                   	dec    eax
 3c6:	4c                   	dec    esp
 3c7:	54                   	push   esp
 3c8:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 3cb:	74 63                	je     430 <sysEnter_Vector-0x12fbd0>
 3cd:	77 64                	ja     433 <sysEnter_Vector-0x12fbcd>
 3cf:	49                   	dec    ecx
 3d0:	00 65 73             	add    BYTE PTR [ebp+0x73],ah
 3d3:	79 73                	jns    448 <sysEnter_Vector-0x12fbb8>
 3d5:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 3d8:	6c                   	ins    BYTE PTR es:[edi],dx
 3d9:	73 00                	jae    3db <sysEnter_Vector-0x12fc25>
 3db:	67                   	addr16
 3dc:	65                   	gs
 3dd:	74 65                	je     444 <sysEnter_Vector-0x12fbbc>
 3df:	6e                   	outs   dx,BYTE PTR ds:[esi]
 3e0:	76 00                	jbe    3e2 <sysEnter_Vector-0x12fc1e>
 3e2:	53                   	push   ebx
 3e3:	59                   	pop    ecx
 3e4:	53                   	push   ebx
 3e5:	43                   	inc    ebx
 3e6:	41                   	inc    ecx
 3e7:	4c                   	dec    esp
 3e8:	4c                   	dec    esp
 3e9:	5f                   	pop    edi
 3ea:	53                   	push   ebx
 3eb:	45                   	inc    ebp
 3ec:	54                   	push   esp
 3ed:	53                   	push   ebx
 3ee:	54                   	push   esp
 3ef:	44                   	inc    esp
 3f0:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3f3:	53                   	push   ebx
 3f4:	43                   	inc    ebx
 3f5:	41                   	inc    ecx
 3f6:	4c                   	dec    esp
 3f7:	4c                   	dec    esp
 3f8:	5f                   	pop    edi
 3f9:	53                   	push   ebx
 3fa:	45                   	inc    ebp
 3fb:	54                   	push   esp
 3fc:	43                   	inc    ebx
 3fd:	57                   	push   edi
 3fe:	44                   	inc    esp
 3ff:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 403:	74 50                	je     455 <sysEnter_Vector-0x12fbab>
 405:	6f                   	outs   dx,DWORD PTR ds:[esi]
 406:	70 75                	jo     47d <sysEnter_Vector-0x12fb83>
 408:	6c                   	ins    BYTE PTR es:[edi],dx
 409:	61                   	popa   
 40a:	74 65                	je     471 <sysEnter_Vector-0x12fb8f>
 40c:	64 00 53 59          	add    BYTE PTR fs:[ebx+0x59],dl
 410:	53                   	push   ebx
 411:	43                   	inc    ebx
 412:	41                   	inc    ecx
 413:	4c                   	dec    esp
 414:	4c                   	dec    esp
 415:	5f                   	pop    edi
 416:	53                   	push   ebx
 417:	45                   	inc    ebp
 418:	54                   	push   esp
 419:	50                   	push   eax
 41a:	52                   	push   edx
 41b:	49                   	dec    ecx
 41c:	4f                   	dec    edi
 41d:	52                   	push   edx
 41e:	49                   	dec    ecx
 41f:	54                   	push   esp
 420:	59                   	pop    ecx
 421:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 424:	53                   	push   ebx
 425:	43                   	inc    ebx
 426:	41                   	inc    ecx
 427:	4c                   	dec    esp
 428:	4c                   	dec    esp
 429:	5f                   	pop    edi
 42a:	41                   	inc    ecx
 42b:	4c                   	dec    esp
 42c:	4c                   	dec    esp
 42d:	4f                   	dec    edi
 42e:	43                   	inc    ebx
 42f:	48                   	dec    eax
 430:	45                   	inc    ebp
 431:	41                   	inc    ecx
 432:	50                   	push   eax
 433:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 436:	53                   	push   ebx
 437:	43                   	inc    ebx
 438:	41                   	inc    ecx
 439:	4c                   	dec    esp
 43a:	4c                   	dec    esp
 43b:	5f                   	pop    edi
 43c:	47                   	inc    edi
 43d:	45                   	inc    ebp
 43e:	54                   	push   esp
 43f:	44                   	inc    esp
 440:	45                   	inc    ebp
 441:	4e                   	dec    esi
 442:	54                   	push   esp
 443:	53                   	push   ebx
 444:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 447:	53                   	push   ebx
 448:	43                   	inc    ebx
 449:	41                   	inc    ecx
 44a:	4c                   	dec    esp
 44b:	4c                   	dec    esp
 44c:	5f                   	pop    edi
 44d:	53                   	push   ebx
 44e:	45                   	inc    ebp
 44f:	45                   	inc    ebp
 450:	4b                   	dec    ebx
 451:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 454:	53                   	push   ebx
 455:	43                   	inc    ebx
 456:	41                   	inc    ecx
 457:	4c                   	dec    esp
 458:	4c                   	dec    esp
 459:	5f                   	pop    edi
 45a:	50                   	push   eax
 45b:	49                   	dec    ecx
 45c:	50                   	push   eax
 45d:	45                   	inc    ebp
 45e:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 461:	53                   	push   ebx
 462:	43                   	inc    ebx
 463:	41                   	inc    ecx
 464:	4c                   	dec    esp
 465:	4c                   	dec    esp
 466:	5f                   	pop    edi
 467:	47                   	inc    edi
 468:	45                   	inc    ebp
 469:	54                   	push   esp
 46a:	43                   	inc    ebx
 46b:	57                   	push   edi
 46c:	44                   	inc    esp
 46d:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 470:	53                   	push   ebx
 471:	43                   	inc    ebx
 472:	41                   	inc    ecx
 473:	4c                   	dec    esp
 474:	4c                   	dec    esp
 475:	5f                   	pop    edi
 476:	50                   	push   eax
 477:	52                   	push   edx
 478:	49                   	dec    ecx
 479:	4e                   	dec    esi
 47a:	54                   	push   esp
 47b:	44                   	inc    esp
 47c:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 47f:	53                   	push   ebx
 480:	43                   	inc    ebx
 481:	41                   	inc    ecx
 482:	4c                   	dec    esp
 483:	4c                   	dec    esp
 484:	5f                   	pop    edi
 485:	46                   	inc    esi
 486:	52                   	push   edx
 487:	45                   	inc    ebp
 488:	45                   	inc    ebp
 489:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 48c:	53                   	push   ebx
 48d:	43                   	inc    ebx
 48e:	41                   	inc    ecx
 48f:	4c                   	dec    esp
 490:	4c                   	dec    esp
 491:	5f                   	pop    edi
 492:	45                   	inc    ebp
 493:	58                   	pop    eax
 494:	45                   	inc    ebp
 495:	43                   	inc    ebx
 496:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 499:	53                   	push   ebx
 49a:	43                   	inc    ebx
 49b:	41                   	inc    ecx
 49c:	4c                   	dec    esp
 49d:	4c                   	dec    esp
 49e:	5f                   	pop    edi
 49f:	45                   	inc    ebp
 4a0:	58                   	pop    eax
 4a1:	45                   	inc    ebp
 4a2:	43                   	inc    ebx
 4a3:	4e                   	dec    esi
 4a4:	45                   	inc    ebp
 4a5:	57                   	push   edi
 4a6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 4a9:	53                   	push   ebx
 4aa:	43                   	inc    ebx
 4ab:	41                   	inc    ecx
 4ac:	4c                   	dec    esp
 4ad:	4c                   	dec    esp
 4ae:	5f                   	pop    edi
 4af:	44                   	inc    esp
 4b0:	55                   	push   ebp
 4b1:	50                   	push   eax
 4b2:	33 00                	xor    eax,DWORD PTR [eax]
 4b4:	53                   	push   ebx
 4b5:	59                   	pop    ecx
 4b6:	53                   	push   ebx
 4b7:	43                   	inc    ebx
 4b8:	41                   	inc    ecx
 4b9:	4c                   	dec    esp
 4ba:	4c                   	dec    esp
 4bb:	5f                   	pop    edi
 4bc:	46                   	inc    esi
 4bd:	4f                   	dec    edi
 4be:	52                   	push   edx
 4bf:	4b                   	dec    ebx
 4c0:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 4c3:	53                   	push   ebx
 4c4:	43                   	inc    ebx
 4c5:	41                   	inc    ecx
 4c6:	4c                   	dec    esp
 4c7:	4c                   	dec    esp
 4c8:	5f                   	pop    edi
 4c9:	50                   	push   eax
 4ca:	52                   	push   edx
 4cb:	49                   	dec    ecx
 4cc:	4e                   	dec    esi
 4cd:	54                   	push   esp
 4ce:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 4d1:	53                   	push   ebx
 4d2:	43                   	inc    ebx
 4d3:	41                   	inc    ecx
 4d4:	4c                   	dec    esp
 4d5:	4c                   	dec    esp
 4d6:	5f                   	pop    edi
 4d7:	43                   	inc    ebx
 4d8:	4c                   	dec    esp
 4d9:	4f                   	dec    edi
 4da:	53                   	push   ebx
 4db:	45                   	inc    ebp
 4dc:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 4df:	53                   	push   ebx
 4e0:	43                   	inc    ebx
 4e1:	41                   	inc    ecx
 4e2:	4c                   	dec    esp
 4e3:	4c                   	dec    esp
 4e4:	5f                   	pop    edi
 4e5:	45                   	inc    ebp
 4e6:	4e                   	dec    esi
 4e7:	44                   	inc    esp
 4e8:	50                   	push   eax
 4e9:	52                   	push   edx
 4ea:	4f                   	dec    edi
 4eb:	43                   	inc    ebx
 4ec:	45                   	inc    ebp
 4ed:	53                   	push   ebx
 4ee:	53                   	push   ebx
 4ef:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 4f2:	74 63                	je     557 <sysEnter_Vector-0x12faa9>
 4f4:	77 64                	ja     55a <sysEnter_Vector-0x12faa6>
 4f6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 4f9:	53                   	push   ebx
 4fa:	43                   	inc    ebx
 4fb:	41                   	inc    ecx
 4fc:	4c                   	dec    esp
 4fd:	4c                   	dec    esp
 4fe:	5f                   	pop    edi
 4ff:	52                   	push   edx
 500:	45                   	inc    ebp
 501:	42                   	inc    edx
 502:	4f                   	dec    edi
 503:	4f                   	dec    edi
 504:	54                   	push   esp
 505:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 508:	74 56                	je     560 <sysEnter_Vector-0x12faa0>
 50a:	61                   	popa   
 50b:	6c                   	ins    BYTE PTR es:[edi],dx
 50c:	00 66 73             	add    BYTE PTR [esi+0x73],ah
 50f:	74 61                	je     572 <sysEnter_Vector-0x12fa8e>
 511:	74 5f                	je     572 <sysEnter_Vector-0x12fa8e>
 513:	74 00                	je     515 <sysEnter_Vector-0x12faeb>
 515:	63 6c 6f 73          	arpl   WORD PTR [edi+ebp*2+0x73],bp
 519:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
 51d:	73 6f                	jae    58e <sysEnter_Vector-0x12fa72>
 51f:	6c                   	ins    BYTE PTR es:[edi],dx
 520:	76 65                	jbe    587 <sysEnter_Vector-0x12fa79>
 522:	50                   	push   eax
 523:	61                   	popa   
 524:	74 68                	je     58e <sysEnter_Vector-0x12fa72>
 526:	5f                   	pop    edi
 527:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 529:	76 50                	jbe    57b <sysEnter_Vector-0x12fa85>
 52b:	61                   	popa   
 52c:	74 68                	je     596 <sysEnter_Vector-0x12fa6a>
 52e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 531:	72 65                	jb     598 <sysEnter_Vector-0x12fa68>
 533:	61                   	popa   
 534:	6d                   	ins    DWORD PTR es:[edi],dx
 535:	00 70 61             	add    BYTE PTR [eax+0x61],dh
 538:	74 68                	je     5a2 <sysEnter_Vector-0x12fa5e>
 53a:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
 53d:	65                   	gs
 53e:	61                   	popa   
 53f:	74 65                	je     5a6 <sysEnter_Vector-0x12fa5a>
 541:	5f                   	pop    edi
 542:	74 69                	je     5ad <sysEnter_Vector-0x12fa53>
 544:	6d                   	ins    DWORD PTR es:[edi],dx
 545:	65 00 77 72          	add    BYTE PTR gs:[edi+0x72],dh
 549:	69 74 65 5f 74 69 6d 	imul   esi,DWORD PTR [ebp+eiz*2+0x5f],0x656d6974
 550:	65 
 551:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
 555:	6c                   	ins    BYTE PTR es:[edi],dx
 556:	49                   	dec    ecx
 557:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 55a:	61                   	popa   
 55b:	72 74                	jb     5d1 <sysEnter_Vector-0x12fa2f>
 55d:	46                   	inc    esi
 55e:	69 6c 65 50 6f 73 00 	imul   ebp,DWORD PTR [ebp+eiz*2+0x50],0x7300736f
 565:	73 
 566:	74 61                	je     5c9 <sysEnter_Vector-0x12fa37>
 568:	74 49                	je     5b3 <sysEnter_Vector-0x12fa4d>
 56a:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
 56d:	50                   	push   eax
 56e:	74 72                	je     5e2 <sysEnter_Vector-0x12fa1e>
 570:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 573:	73 6f                	jae    5e4 <sysEnter_Vector-0x12fa1c>
 575:	6c                   	ins    BYTE PTR es:[edi],dx
 576:	76 65                	jbe    5dd <sysEnter_Vector-0x12fa23>
 578:	50                   	push   eax
 579:	61                   	popa   
 57a:	74 68                	je     5e4 <sysEnter_Vector-0x12fa1c>
 57c:	5f                   	pop    edi
 57d:	72 65                	jb     5e4 <sysEnter_Vector-0x12fa1c>
 57f:	73 50                	jae    5d1 <sysEnter_Vector-0x12fa2f>
 581:	61                   	popa   
 582:	74 68                	je     5ec <sysEnter_Vector-0x12fa14>
 584:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
 588:	6c                   	ins    BYTE PTR es:[edi],dx
 589:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
 58c:	65                   	gs
 58d:	61                   	popa   
 58e:	74 65                	je     5f5 <sysEnter_Vector-0x12fa0b>
 590:	5f                   	pop    edi
 591:	64                   	fs
 592:	61                   	popa   
 593:	74 65                	je     5fa <sysEnter_Vector-0x12fa06>
 595:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 598:	74 6c                	je     606 <sysEnter_Vector-0x12f9fa>
 59a:	69 6e 65 49 00 75 69 	imul   ebp,DWORD PTR [esi+0x65],0x69750049
 5a1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5a2:	74 31                	je     5d5 <sysEnter_Vector-0x12fa2b>
 5a4:	36                   	ss
 5a5:	5f                   	pop    edi
 5a6:	74 00                	je     5a8 <sysEnter_Vector-0x12fa58>
 5a8:	77 72                	ja     61c <sysEnter_Vector-0x12f9e4>
 5aa:	69 74 65 5f 64 61 74 	imul   esi,DWORD PTR [ebp+eiz*2+0x5f],0x65746164
 5b1:	65 
 5b2:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 5b5:	73 6f                	jae    626 <sysEnter_Vector-0x12f9da>
 5b7:	6c                   	ins    BYTE PTR es:[edi],dx
 5b8:	76 65                	jbe    61f <sysEnter_Vector-0x12f9e1>
 5ba:	50                   	push   eax
 5bb:	61                   	popa   
 5bc:	74 68                	je     626 <sysEnter_Vector-0x12f9da>
 5be:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 5c1:	5f                   	pop    edi
 5c2:	6c                   	ins    BYTE PTR es:[edi],dx
 5c3:	61                   	popa   
 5c4:	73 74                	jae    63a <sysEnter_Vector-0x12f9c6>
 5c6:	6d                   	ins    DWORD PTR es:[edi],dx
 5c7:	6f                   	outs   dx,DWORD PTR ds:[esi]
 5c8:	64 00 70 6f          	add    BYTE PTR fs:[eax+0x6f],dh
 5cc:	73 69                	jae    637 <sysEnter_Vector-0x12f9c9>
 5ce:	74 69                	je     639 <sysEnter_Vector-0x12f9c7>
 5d0:	6f                   	outs   dx,DWORD PTR ds:[esi]
 5d1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5d2:	00 77 72             	add    BYTE PTR [edi+0x72],dh
 5d5:	69 74 65 49 00 73 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x49],0x65657300
 5dc:	65 
 5dd:	6b 00 77             	imul   eax,DWORD PTR [eax],0x77
 5e0:	68 65 6e 63 65       	push   0x65636e65
 5e5:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 5e8:	74 6c                	je     656 <sysEnter_Vector-0x12f9aa>
 5ea:	69 6e 65 00 67 65 74 	imul   ebp,DWORD PTR [esi+0x65],0x74656700
 5f1:	6c                   	ins    BYTE PTR es:[edi],dx
 5f2:	69 6e 65 52 65 74 75 	imul   ebp,DWORD PTR [esi+0x65],0x75746552
 5f9:	72 6e                	jb     669 <sysEnter_Vector-0x12f997>
 5fb:	00 66 72             	add    BYTE PTR [esi+0x72],ah
 5fe:	65 6f                	outs   dx,DWORD PTR gs:[esi]
 600:	70 65                	jo     667 <sysEnter_Vector-0x12f999>
 602:	6e                   	outs   dx,BYTE PTR ds:[esi]
 603:	00 6c 69 6e          	add    BYTE PTR [ecx+ebp*2+0x6e],ch
 607:	65                   	gs
 608:	54                   	push   esp
 609:	6f                   	outs   dx,DWORD PTR ds:[esi]
 60a:	4f                   	dec    edi
 60b:	75 74                	jne    681 <sysEnter_Vector-0x12f97f>
 60d:	70 75                	jo     684 <sysEnter_Vector-0x12f97c>
 60f:	74 00                	je     611 <sysEnter_Vector-0x12f9ef>
 611:	63 6c 75 73          	arpl   WORD PTR [ebp+esi*2+0x73],bp
 615:	74 65                	je     67c <sysEnter_Vector-0x12f984>
 617:	72 00                	jb     619 <sysEnter_Vector-0x12f9e7>
 619:	61                   	popa   
 61a:	63 63 65             	arpl   WORD PTR [ebx+0x65],sp
 61d:	73 73                	jae    692 <sysEnter_Vector-0x12f96e>
 61f:	5f                   	pop    edi
 620:	64                   	fs
 621:	61                   	popa   
 622:	74 65                	je     689 <sysEnter_Vector-0x12f977>
 624:	00 73 66             	add    BYTE PTR [ebx+0x66],dh
 627:	73 74                	jae    69d <sysEnter_Vector-0x12f963>
 629:	61                   	popa   
 62a:	74 00                	je     62c <sysEnter_Vector-0x12f9d4>
 62c:	77 72                	ja     6a0 <sysEnter_Vector-0x12f960>
 62e:	69 74 65 00 65 6e 74 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x72746e65
 635:	72 
 636:	69 65 73 00 66 69 6c 	imul   esp,DWORD PTR [ebp+0x73],0x6c696600
 63d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 63f:	61                   	popa   
 640:	6d                   	ins    DWORD PTR es:[edi],dx
 641:	65 00 6f 75          	add    BYTE PTR gs:[edi+0x75],ch
 645:	74 50                	je     697 <sysEnter_Vector-0x12f969>
 647:	61                   	popa   
 648:	74 68                	je     6b2 <sysEnter_Vector-0x12f94e>
 64a:	00 6c 69 6e          	add    BYTE PTR [ecx+ebp*2+0x6e],ch
 64e:	65                   	gs
 64f:	70 74                	jo     6c5 <sysEnter_Vector-0x12f93b>
 651:	72 00                	jb     653 <sysEnter_Vector-0x12f9ad>
 653:	64 69 72 65 6e 74 72 	imul   esi,DWORD PTR fs:[edx+0x65],0x7972746e
 65a:	79 
 65b:	5f                   	pop    edi
 65c:	74 00                	je     65e <sysEnter_Vector-0x12f9a2>
 65e:	74 6f                	je     6cf <sysEnter_Vector-0x12f931>
 660:	6b 65 6e 00          	imul   esp,DWORD PTR [ebp+0x6e],0x0
 664:	69 73 5f 64 69 72 00 	imul   esi,DWORD PTR [ebx+0x5f],0x726964
 66b:	64 69 72 65 6e 74 72 	imul   esi,DWORD PTR fs:[edx+0x65],0x7972746e
 672:	79 
 673:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 676:	61                   	popa   
 677:	64                   	fs
 678:	49                   	dec    ecx
 679:	00 6c 65 6e          	add    BYTE PTR [ebp+eiz*2+0x6e],ch
 67d:	67 74 68             	addr16 je 6e8 <sysEnter_Vector-0x12f918>
 680:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 683:	61                   	popa   
 684:	64 00 6d 6f          	add    BYTE PTR fs:[ebp+0x6f],ch
 688:	64 65 00 62 75       	fs add BYTE PTR fs:gs:[edx+0x75],ah
 68d:	66                   	data16
 68e:	66                   	data16
 68f:	65                   	gs
 690:	72 00                	jb     692 <sysEnter_Vector-0x12f96e>
 692:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
 695:	65                   	gs
 696:	73 50                	jae    6e8 <sysEnter_Vector-0x12f918>
 698:	61                   	popa   
 699:	72 73                	jb     70e <sysEnter_Vector-0x12f8f2>
 69b:	65 64 00 73 65       	gs add BYTE PTR fs:gs:[ebx+0x65],dh
 6a0:	65 6b 49 00 73       	imul   ecx,DWORD PTR gs:[ecx+0x0],0x73
 6a5:	72 63                	jb     70a <sysEnter_Vector-0x12f8f6>
 6a7:	2f                   	das    
 6a8:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
 6af:	75 69                	jne    71a <sysEnter_Vector-0x12f8e6>
 6b1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 6b2:	74 38                	je     6ec <sysEnter_Vector-0x12f914>
 6b4:	5f                   	pop    edi
 6b5:	74 00                	je     6b7 <sysEnter_Vector-0x12f949>
 6b7:	73 74                	jae    72d <sysEnter_Vector-0x12f8d3>
 6b9:	5f                   	pop    edi
 6ba:	73 69                	jae    725 <sysEnter_Vector-0x12f8db>
 6bc:	7a 65                	jp     723 <sysEnter_Vector-0x12f8dd>
 6be:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 6c1:	73 6f                	jae    732 <sysEnter_Vector-0x12f8ce>
 6c3:	6c                   	ins    BYTE PTR es:[edi],dx
 6c4:	76 65                	jbe    72b <sysEnter_Vector-0x12f8d5>
 6c6:	50                   	push   eax
 6c7:	61                   	popa   
 6c8:	74 68                	je     732 <sysEnter_Vector-0x12f8ce>
 6ca:	5f                   	pop    edi
 6cb:	63 77 64             	arpl   WORD PTR [edi+0x64],si
 6ce:	00 68 61             	add    BYTE PTR [eax+0x61],ch
 6d1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 6d2:	64                   	fs
 6d3:	6c                   	ins    BYTE PTR es:[edi],dx
 6d4:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
 6d8:	73 6f                	jae    749 <sysEnter_Vector-0x12f8b7>
 6da:	6c                   	ins    BYTE PTR es:[edi],dx
 6db:	76 65                	jbe    742 <sysEnter_Vector-0x12f8be>
 6dd:	50                   	push   eax
 6de:	61                   	popa   
 6df:	74 68                	je     749 <sysEnter_Vector-0x12f8b7>
 6e1:	5f                   	pop    edi
 6e2:	69 6e 50 61 74 68 00 	imul   ebp,DWORD PTR [esi+0x50],0x687461
 6e9:	6c                   	ins    BYTE PTR es:[edi],dx
 6ea:	4c                   	dec    esp
 6eb:	69 6e 65 50 74 72 4c 	imul   ebp,DWORD PTR [esi+0x65],0x4c727450
 6f2:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 6f4:	00 66 69             	add    BYTE PTR [esi+0x69],ah
 6f7:	6c                   	ins    BYTE PTR es:[edi],dx
 6f8:	65                   	gs
 6f9:	5f                   	pop    edi
 6fa:	63 6c 65 61          	arpl   WORD PTR [ebp+eiz*2+0x61],bp
 6fe:	6e                   	outs   dx,BYTE PTR ds:[esi]
 6ff:	75 70                	jne    771 <sysEnter_Vector-0x12f88f>
 701:	00 62 79             	add    BYTE PTR [edx+0x79],ah
 704:	74 65                	je     76b <sysEnter_Vector-0x12f895>
 706:	73 52                	jae    75a <sysEnter_Vector-0x12f8a6>
 708:	65                   	gs
 709:	74 75                	je     780 <sysEnter_Vector-0x12f880>
 70b:	72 6e                	jb     77b <sysEnter_Vector-0x12f885>
 70d:	65 64 00 67 65       	gs add BYTE PTR fs:gs:[edi+0x65],ah
 712:	74 64                	je     778 <sysEnter_Vector-0x12f888>
 714:	69 72 00 62 75 66 66 	imul   esi,DWORD PTR [edx+0x0],0x66667562
 71b:	65                   	gs
 71c:	72 43                	jb     761 <sysEnter_Vector-0x12f89f>
 71e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 71f:	75 6e                	jne    78f <sysEnter_Vector-0x12f871>
 721:	74 00                	je     723 <sysEnter_Vector-0x12f8dd>
 723:	73 72                	jae    797 <sysEnter_Vector-0x12f869>
 725:	63 2f                	arpl   WORD PTR [edi],bp
 727:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
 72e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 72f:	70 75                	jo     7a6 <sysEnter_Vector-0x12f85a>
 731:	74 2e                	je     761 <sysEnter_Vector-0x12f89f>
 733:	63 00                	arpl   WORD PTR [eax],ax
 735:	69 6e 63 68 61 72 00 	imul   ebp,DWORD PTR [esi+0x63],0x726168
 73c:	67                   	addr16
 73d:	65                   	gs
 73e:	74 73                	je     7b3 <sysEnter_Vector-0x12f84d>
 740:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 743:	78 6c                	js     7b1 <sysEnter_Vector-0x12f84f>
 745:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 747:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 74a:	74 73                	je     7bf <sysEnter_Vector-0x12f841>
 74c:	45                   	inc    ebp
 74d:	72 72                	jb     7c1 <sysEnter_Vector-0x12f83f>
 74f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 750:	72 00                	jb     752 <sysEnter_Vector-0x12f8ae>
 752:	70 75                	jo     7c9 <sysEnter_Vector-0x12f837>
 754:	74 63                	je     7b9 <sysEnter_Vector-0x12f847>
 756:	00 6c 62 75          	add    BYTE PTR [edx+eiz*2+0x75],ch
 75a:	66                   	data16
 75b:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 75e:	74 73                	je     7d3 <sysEnter_Vector-0x12f82d>
 760:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 763:	74 63                	je     7c8 <sysEnter_Vector-0x12f838>
 765:	68 61 72 00 70       	push   0x70007261
 76a:	72 69                	jb     7d5 <sysEnter_Vector-0x12f82b>
 76c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 76d:	74 00                	je     76f <sysEnter_Vector-0x12f891>
 76f:	6c                   	ins    BYTE PTR es:[edi],dx
 770:	61                   	popa   
 771:	73 74                	jae    7e7 <sysEnter_Vector-0x12f819>
 773:	53                   	push   ebx
 774:	70 61                	jo     7d7 <sysEnter_Vector-0x12f829>
 776:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 779:	74 72                	je     7ed <sysEnter_Vector-0x12f813>
 77b:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 77e:	67 44                	addr16 inc esp
 780:	61                   	popa   
 781:	74 61                	je     7e4 <sysEnter_Vector-0x12f81c>
 783:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
 786:	65                   	gs
 787:	65                   	gs
 788:	70 54                	jo     7de <sysEnter_Vector-0x12f822>
 78a:	69 63 6b 73 00 71 75 	imul   esp,DWORD PTR [ebx+0x6b],0x75710073
 791:	6f                   	outs   dx,DWORD PTR ds:[esi]
 792:	74 65                	je     7f9 <sysEnter_Vector-0x12f807>
 794:	50                   	push   eax
 795:	74 72                	je     809 <sysEnter_Vector-0x12f7f7>
 797:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 79a:	67 76 50             	addr16 jbe 7ed <sysEnter_Vector-0x12f813>
 79d:	74 72                	je     811 <sysEnter_Vector-0x12f7ef>
 79f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 7a2:	61                   	popa   
 7a3:	72 74                	jb     819 <sysEnter_Vector-0x12f7e7>
 7a5:	5f                   	pop    edi
 7a6:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7a7:	66 5f                	pop    di
 7a9:	77 6f                	ja     81a <sysEnter_Vector-0x12f7e6>
 7ab:	72 64                	jb     811 <sysEnter_Vector-0x12f7ef>
 7ad:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 7b0:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7b1:	67 72 61             	addr16 jb 815 <sysEnter_Vector-0x12f7eb>
 7b4:	6d                   	ins    DWORD PTR es:[edi],dx
 7b5:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 7b9:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
 7bc:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7bd:	69 74 00 73 74 61 74 	imul   esi,DWORD PTR [eax+eax*1+0x73],0x65746174
 7c4:	65 
 7c5:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 7c8:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
 7cb:	6c                   	ins    BYTE PTR es:[edi],dx
 7cc:	74 69                	je     837 <sysEnter_Vector-0x12f7c9>
 7ce:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7cf:	5f                   	pop    edi
 7d0:	76 61                	jbe    833 <sysEnter_Vector-0x12f7cd>
 7d2:	5f                   	pop    edi
 7d3:	6c                   	ins    BYTE PTR es:[edi],dx
 7d4:	69 73 74 00 73 70 6c 	imul   esi,DWORD PTR [ebx+0x74],0x6c707300
 7db:	69 74 00 66 6f 72 6b 	imul   esi,DWORD PTR [eax+eax*1+0x66],0x6b726f
 7e2:	00 
 7e3:	73 70                	jae    855 <sysEnter_Vector-0x12f7ab>
 7e5:	61                   	popa   
 7e6:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 7e9:	74 72                	je     85d <sysEnter_Vector-0x12f7a3>
 7eb:	00 74 65 6d          	add    BYTE PTR [ebp+eiz*2+0x6d],dh
 7ef:	70 00                	jo     7f1 <sysEnter_Vector-0x12f80f>
 7f1:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 7f4:	6c                   	ins    BYTE PTR es:[edi],dx
 7f5:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
 7fc:	67 76 00             	addr16 jbe 7ff <sysEnter_Vector-0x12f801>
 7ff:	77 61                	ja     862 <sysEnter_Vector-0x12f79e>
 801:	69 74 70 69 64 00 44 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65440064
 808:	65 
 809:	62 75 67             	bound  esi,QWORD PTR [ebp+0x67]
 80c:	4c                   	dec    esp
 80d:	65                   	gs
 80e:	76 65                	jbe    875 <sysEnter_Vector-0x12f78b>
 810:	6c                   	ins    BYTE PTR es:[edi],dx
 811:	00 63 61             	add    BYTE PTR [ebx+0x61],ah
 814:	6c                   	ins    BYTE PTR es:[edi],dx
 815:	6c                   	ins    BYTE PTR es:[edi],dx
 816:	6e                   	outs   dx,BYTE PTR ds:[esi]
 817:	75 6d                	jne    886 <sysEnter_Vector-0x12f77a>
 819:	00 64 62 6c          	add    BYTE PTR [edx+eiz*2+0x6c],ah
 81d:	71 75                	jno    894 <sysEnter_Vector-0x12f76c>
 81f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 820:	74 65                	je     887 <sysEnter_Vector-0x12f779>
 822:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
 825:	65                   	gs
 826:	65                   	gs
 827:	70 00                	jo     829 <sysEnter_Vector-0x12f7d7>
 829:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 82c:	6c                   	ins    BYTE PTR es:[edi],dx
 82d:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
 834:	67 76 49             	addr16 jbe 880 <sysEnter_Vector-0x12f780>
 837:	00 64 6f 5f          	add    BYTE PTR [edi+ebp*2+0x5f],ah
 83b:	73 79                	jae    8b6 <sysEnter_Vector-0x12f74a>
 83d:	73 63                	jae    8a2 <sysEnter_Vector-0x12f75e>
 83f:	61                   	popa   
 840:	6c                   	ins    BYTE PTR es:[edi],dx
 841:	6c                   	ins    BYTE PTR es:[edi],dx
 842:	31 00                	xor    DWORD PTR [eax],eax
 844:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 846:	5f                   	pop    edi
 847:	73 79                	jae    8c2 <sysEnter_Vector-0x12f73e>
 849:	73 63                	jae    8ae <sysEnter_Vector-0x12f752>
 84b:	61                   	popa   
 84c:	6c                   	ins    BYTE PTR es:[edi],dx
 84d:	6c                   	ins    BYTE PTR es:[edi],dx
 84e:	32 00                	xor    al,BYTE PTR [eax]
 850:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 852:	5f                   	pop    edi
 853:	73 79                	jae    8ce <sysEnter_Vector-0x12f732>
 855:	73 63                	jae    8ba <sysEnter_Vector-0x12f746>
 857:	61                   	popa   
 858:	6c                   	ins    BYTE PTR es:[edi],dx
 859:	6c                   	ins    BYTE PTR es:[edi],dx
 85a:	33 00                	xor    eax,DWORD PTR [eax]
 85c:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 85e:	5f                   	pop    edi
 85f:	73 79                	jae    8da <sysEnter_Vector-0x12f726>
 861:	73 63                	jae    8c6 <sysEnter_Vector-0x12f73a>
 863:	61                   	popa   
 864:	6c                   	ins    BYTE PTR es:[edi],dx
 865:	6c                   	ins    BYTE PTR es:[edi],dx
 866:	34 00                	xor    al,0x0
 868:	49                   	dec    ecx
 869:	4e                   	dec    esi
 86a:	5f                   	pop    edi
 86b:	57                   	push   edi
 86c:	4f                   	dec    edi
 86d:	52                   	push   edx
 86e:	44                   	inc    esp
 86f:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 872:	67 76 5f             	addr16 jbe 8d4 <sysEnter_Vector-0x12f72c>
 875:	73 69                	jae    8e0 <sysEnter_Vector-0x12f720>
 877:	7a 65                	jp     8de <sysEnter_Vector-0x12f722>
 879:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 87d:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
 880:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
 887:	65 
 888:	64 00 69 73          	add    BYTE PTR fs:[ecx+0x73],ch
 88c:	73 70                	jae    8fe <sysEnter_Vector-0x12f702>
 88e:	61                   	popa   
 88f:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
 892:	5f                   	pop    edi
 893:	5f                   	pop    edi
 894:	67 6e                	outs   dx,BYTE PTR ds:[si]
 896:	75 63                	jne    8fb <sysEnter_Vector-0x12f705>
 898:	5f                   	pop    edi
 899:	76 61                	jbe    8fc <sysEnter_Vector-0x12f704>
 89b:	5f                   	pop    edi
 89c:	6c                   	ins    BYTE PTR es:[edi],dx
 89d:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
 8a4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8a5:	74 64                	je     90b <sysEnter_Vector-0x12f6f5>
 8a7:	49                   	dec    ecx
 8a8:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 8ab:	6d                   	ins    DWORD PTR es:[edi],dx
 8ac:	69 6c 6c 69 73 65 63 	imul   ebp,DWORD PTR [esp+ebp*2+0x69],0x6f636573
 8b3:	6f 
 8b4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8b5:	64                   	fs
 8b6:	73 00                	jae    8b8 <sysEnter_Vector-0x12f748>
 8b8:	70 61                	jo     91b <sysEnter_Vector-0x12f6e5>
 8ba:	72 61                	jb     91d <sysEnter_Vector-0x12f6e3>
 8bc:	6d                   	ins    DWORD PTR es:[edi],dx
 8bd:	31 00                	xor    DWORD PTR [eax],eax
 8bf:	70 61                	jo     922 <sysEnter_Vector-0x12f6de>
 8c1:	72 61                	jb     924 <sysEnter_Vector-0x12f6dc>
 8c3:	6d                   	ins    DWORD PTR es:[edi],dx
 8c4:	32 00                	xor    al,BYTE PTR [eax]
 8c6:	70 61                	jo     929 <sysEnter_Vector-0x12f6d7>
 8c8:	72 61                	jb     92b <sysEnter_Vector-0x12f6d5>
 8ca:	6d                   	ins    DWORD PTR es:[edi],dx
 8cb:	33 00                	xor    eax,DWORD PTR [eax]
 8cd:	70 61                	jo     930 <sysEnter_Vector-0x12f6d0>
 8cf:	72 61                	jb     932 <sysEnter_Vector-0x12f6ce>
 8d1:	6d                   	ins    DWORD PTR es:[edi],dx
 8d2:	34 00                	xor    al,0x0
 8d4:	73 65                	jae    93b <sysEnter_Vector-0x12f6c5>
 8d6:	74 63                	je     93b <sysEnter_Vector-0x12f6c5>
 8d8:	77 64                	ja     93e <sysEnter_Vector-0x12f6c2>
 8da:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 8dd:	65 63 61 00          	arpl   WORD PTR gs:[ecx+0x0],sp
 8e1:	65                   	gs
 8e2:	78 65                	js     949 <sysEnter_Vector-0x12f6b7>
 8e4:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
 8e7:	66 6f                	outs   dx,WORD PTR ds:[esi]
 8e9:	72 6d                	jb     958 <sysEnter_Vector-0x12f6a8>
 8eb:	61                   	popa   
 8ec:	74 00                	je     8ee <sysEnter_Vector-0x12f712>
 8ee:	70 72                	jo     962 <sysEnter_Vector-0x12f69e>
 8f0:	69 6e 74 42 75 66 66 	imul   ebp,DWORD PTR [esi+0x74],0x66667542
 8f7:	65                   	gs
 8f8:	72 00                	jb     8fa <sysEnter_Vector-0x12f706>
 8fa:	73 69                	jae    965 <sysEnter_Vector-0x12f69b>
 8fc:	67 6e                	outs   dx,BYTE PTR ds:[si]
 8fe:	61                   	popa   
 8ff:	6c                   	ins    BYTE PTR es:[edi],dx
 900:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 903:	65 63 00             	arpl   WORD PTR gs:[eax],ax
 906:	5f                   	pop    edi
 907:	5f                   	pop    edi
 908:	73 65                	jae    96f <sysEnter_Vector-0x12f691>
 90a:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 90d:	64                   	fs
 90e:	73 00                	jae    910 <sysEnter_Vector-0x12f6f0>
 910:	44                   	inc    esp
 911:	55                   	push   ebp
 912:	4c                   	dec    esp
 913:	4c                   	dec    esp
 914:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 917:	61                   	popa   
 918:	74 65                	je     97f <sysEnter_Vector-0x12f681>
 91a:	73 00                	jae    91c <sysEnter_Vector-0x12f6e4>
 91c:	49                   	dec    ecx
 91d:	4e                   	dec    esi
 91e:	5f                   	pop    edi
 91f:	53                   	push   ebx
 920:	54                   	push   esp
 921:	52                   	push   edx
 922:	49                   	dec    ecx
 923:	4e                   	dec    esi
 924:	47                   	inc    edi
 925:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 928:	63 2f                	arpl   WORD PTR [edi],bp
 92a:	6c                   	ins    BYTE PTR es:[edi],dx
 92b:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
 932:	4f                   	dec    edi
 933:	53                   	push   ebx
 934:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 937:	61                   	popa   
 938:	72 67                	jb     9a1 <sysEnter_Vector-0x12f65f>
 93a:	63 00                	arpl   WORD PTR [eax],ax
 93c:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 93f:	6c                   	ins    BYTE PTR es:[edi],dx
 940:	69 6e 65 00 64 6f 5f 	imul   ebp,DWORD PTR [esi+0x65],0x5f6f6400
 947:	73 79                	jae    9c2 <sysEnter_Vector-0x12f63e>
 949:	73 63                	jae    9ae <sysEnter_Vector-0x12f652>
 94b:	61                   	popa   
 94c:	6c                   	ins    BYTE PTR es:[edi],dx
 94d:	6c                   	ins    BYTE PTR es:[edi],dx
 94e:	30 00                	xor    BYTE PTR [eax],al
 950:	73 70                	jae    9c2 <sysEnter_Vector-0x12f63e>
 952:	6c                   	ins    BYTE PTR es:[edi],dx
 953:	69 74 49 00 70 72 69 	imul   esi,DWORD PTR [ecx+ecx*2+0x0],0x6e697270
 95a:	6e 
 95b:	74 66                	je     9c3 <sysEnter_Vector-0x12f63d>
 95d:	49                   	dec    ecx
 95e:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 962:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 965:	6c                   	ins    BYTE PTR es:[edi],dx
 966:	65                   	gs
 967:	61                   	popa   
 968:	6e                   	outs   dx,BYTE PTR ds:[esi]
 969:	75 70                	jne    9db <sysEnter_Vector-0x12f625>
 96b:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 96e:	67 76 00             	addr16 jbe 971 <sysEnter_Vector-0x12f68f>
 971:	65                   	gs
 972:	78 69                	js     9dd <sysEnter_Vector-0x12f623>
 974:	74 00                	je     976 <sysEnter_Vector-0x12f68a>
 976:	73 74                	jae    9ec <sysEnter_Vector-0x12f614>
 978:	61                   	popa   
 979:	74 75                	je     9f0 <sysEnter_Vector-0x12f610>
 97b:	73 00                	jae    97d <sysEnter_Vector-0x12f683>
 97d:	73 65                	jae    9e4 <sysEnter_Vector-0x12f61c>
 97f:	74 53                	je     9d4 <sysEnter_Vector-0x12f62c>
 981:	54                   	push   esp
 982:	44                   	inc    esp
 983:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 986:	67 48                	addr16 dec eax
 988:	61                   	popa   
 989:	6e                   	outs   dx,BYTE PTR ds:[esi]
 98a:	64                   	fs
 98b:	6c                   	ins    BYTE PTR es:[edi],dx
 98c:	65                   	gs
 98d:	72 00                	jb     98f <sysEnter_Vector-0x12f671>
 98f:	74 61                	je     9f2 <sysEnter_Vector-0x12f60e>
 991:	6b 65 41 44          	imul   esp,DWORD PTR [ebp+0x41],0x44
 995:	75 6d                	jne    a04 <sysEnter_Vector-0x12f5fc>
 997:	70 00                	jo     999 <sysEnter_Vector-0x12f667>
 999:	66 69 6c 65 64 00 6d 	imul   bp,WORD PTR [ebp+eiz*2+0x64],0x6d00
 9a0:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9a1:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
 9a8:	6e 
 9a9:	61                   	popa   
 9aa:	6c                   	ins    BYTE PTR es:[edi],dx
 9ab:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 9ae:	67 73 00             	addr16 jae 9b1 <sysEnter_Vector-0x12f64f>
 9b1:	70 72                	jo     a25 <sysEnter_Vector-0x12f5db>
 9b3:	69 6e 74 49 00 73 74 	imul   ebp,DWORD PTR [esi+0x74],0x74730049
 9ba:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9bb:	70 00                	jo     9bd <sysEnter_Vector-0x12f643>
 9bd:	70 72                	jo     a31 <sysEnter_Vector-0x12f5cf>
 9bf:	69 6e 74 64 00 61 64 	imul   ebp,DWORD PTR [esi+0x74],0x64610064
 9c6:	64                   	fs
 9c7:	72 00                	jb     9c9 <sysEnter_Vector-0x12f637>
 9c9:	6d                   	ins    DWORD PTR es:[edi],dx
 9ca:	6d                   	ins    DWORD PTR es:[edi],dx
 9cb:	61                   	popa   
 9cc:	70 00                	jo     9ce <sysEnter_Vector-0x12f632>
 9ce:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9cf:	66 66 5f             	data32 pop di
 9d2:	74 00                	je     9d4 <sysEnter_Vector-0x12f62c>
 9d4:	70 72                	jo     a48 <sysEnter_Vector-0x12f5b8>
 9d6:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9d7:	74 00                	je     9d9 <sysEnter_Vector-0x12f627>
 9d9:	73 4d                	jae    a28 <sysEnter_Vector-0x12f5d8>
 9db:	4d                   	dec    ebp
 9dc:	61                   	popa   
 9dd:	70 53                	jo     a32 <sysEnter_Vector-0x12f5ce>
 9df:	79 73                	jns    a54 <sysEnter_Vector-0x12f5ac>
 9e1:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 9e4:	6c                   	ins    BYTE PTR es:[edi],dx
 9e5:	00 70 61             	add    BYTE PTR [eax+0x61],dh
 9e8:	72 61                	jb     a4b <sysEnter_Vector-0x12f5b5>
 9ea:	6d                   	ins    DWORD PTR es:[edi],dx
 9eb:	73 00                	jae    9ed <sysEnter_Vector-0x12f613>
 9ed:	73 72                	jae    a61 <sysEnter_Vector-0x12f59f>
 9ef:	63 2f                	arpl   WORD PTR [edi],bp
 9f1:	6c                   	ins    BYTE PTR es:[edi],dx
 9f2:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
 9f9:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9fc:	66                   	data16
 9fd:	6c                   	ins    BYTE PTR es:[edi],dx
 9fe:	61                   	popa   
 9ff:	67 73 00             	addr16 jae a02 <sysEnter_Vector-0x12f5fe>
 a02:	73 79                	jae    a7d <sysEnter_Vector-0x12f583>
 a04:	73 63                	jae    a69 <sysEnter_Vector-0x12f597>
 a06:	61                   	popa   
 a07:	6c                   	ins    BYTE PTR es:[edi],dx
 a08:	6c                   	ins    BYTE PTR es:[edi],dx
 a09:	5f                   	pop    edi
 a0a:	6d                   	ins    DWORD PTR es:[edi],dx
 a0b:	6d                   	ins    DWORD PTR es:[edi],dx
 a0c:	61                   	popa   
 a0d:	70 5f                	jo     a6e <sysEnter_Vector-0x12f592>
 a0f:	74 00                	je     a11 <sysEnter_Vector-0x12f5ef>
 a11:	6d                   	ins    DWORD PTR es:[edi],dx
 a12:	61                   	popa   
 a13:	6c                   	ins    BYTE PTR es:[edi],dx
 a14:	6c                   	ins    BYTE PTR es:[edi],dx
 a15:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a16:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 a19:	70 72                	jo     a8d <sysEnter_Vector-0x12f573>
 a1b:	65                   	gs
 a1c:	76 00                	jbe    a1e <sysEnter_Vector-0x12f5e2>
 a1e:	6c                   	ins    BYTE PTR es:[edi],dx
 a1f:	61                   	popa   
 a20:	73 74                	jae    a96 <sysEnter_Vector-0x12f56a>
 a22:	48                   	dec    eax
 a23:	52                   	push   edx
 a24:	43                   	inc    ebx
 a25:	72 65                	jb     a8c <sysEnter_Vector-0x12f574>
 a27:	61                   	popa   
 a28:	74 65                	je     a8f <sysEnter_Vector-0x12f571>
 a2a:	64 00 6e 65          	add    BYTE PTR fs:[esi+0x65],ch
 a2e:	78 74                	js     aa4 <sysEnter_Vector-0x12f55c>
 a30:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 a33:	61                   	popa   
 a34:	70 72                	jo     aa8 <sysEnter_Vector-0x12f558>
 a36:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
 a3a:	00 66 72             	add    BYTE PTR [esi+0x72],ah
 a3d:	65                   	gs
 a3e:	65                   	gs
 a3f:	49                   	dec    ecx
 a40:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 a43:	72 6b                	jb     ab0 <sysEnter_Vector-0x12f550>
 a45:	65                   	gs
 a46:	72 00                	jb     a48 <sysEnter_Vector-0x12f5b8>
 a48:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a49:	65                   	gs
 a4a:	77 48                	ja     a94 <sysEnter_Vector-0x12f56c>
 a4c:	65                   	gs
 a4d:	61                   	popa   
 a4e:	70 52                	jo     aa2 <sysEnter_Vector-0x12f55e>
 a50:	65                   	gs
 a51:	71 75                	jno    ac8 <sysEnter_Vector-0x12f538>
 a53:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
 a5a:	75 6c                	jne    ac8 <sysEnter_Vector-0x12f538>
 a5c:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
 a63:	75 65                	jne    aca <sysEnter_Vector-0x12f536>
 a65:	73 74                	jae    adb <sysEnter_Vector-0x12f525>
 a67:	00 66 69             	add    BYTE PTR [esi+0x69],ah
 a6a:	6c                   	ins    BYTE PTR es:[edi],dx
 a6b:	6c                   	ins    BYTE PTR es:[edi],dx
 a6c:	65                   	gs
 a6d:	72 00                	jb     a6f <sysEnter_Vector-0x12f591>
 a6f:	69 6e 55 73 65 00 73 	imul   ebp,DWORD PTR [esi+0x55],0x73006573
 a76:	68 65 61 70 00       	push   0x706165
 a7b:	69 6e 69 74 6d 61 6c 	imul   ebp,DWORD PTR [esi+0x69],0x6c616d74
 a82:	6c                   	ins    BYTE PTR es:[edi],dx
 a83:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a84:	63 00                	arpl   WORD PTR [eax],ax
 a86:	72 65                	jb     aed <sysEnter_Vector-0x12f513>
 a88:	71 75                	jno    aff <sysEnter_Vector-0x12f501>
 a8a:	65                   	gs
 a8b:	73 74                	jae    b01 <sysEnter_Vector-0x12f4ff>
 a8d:	53                   	push   ebx
 a8e:	69 7a 65 00 6d 61 6c 	imul   edi,DWORD PTR [edx+0x65],0x6c616d00
 a95:	6c                   	ins    BYTE PTR es:[edi],dx
 a96:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a97:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 a9a:	6c                   	ins    BYTE PTR es:[edi],dx
 a9b:	65                   	gs
 a9c:	61                   	popa   
 a9d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a9e:	75 70                	jne    b10 <sysEnter_Vector-0x12f4f0>
 aa0:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
 aa3:	6c                   	ins    BYTE PTR es:[edi],dx
 aa4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 aa5:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 aa8:	65                   	gs
 aa9:	64                   	fs
 aaa:	50                   	push   eax
 aab:	74 72                	je     b1f <sysEnter_Vector-0x12f4e1>
 aad:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 ab0:	77 6c                	ja     b1e <sysEnter_Vector-0x12f4e2>
 ab2:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 ab4:	00 53 61             	add    BYTE PTR [ebx+0x61],dl
 ab7:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ab8:	69 74 79 4c 6f 6f 70 	imul   esi,DWORD PTR [ecx+edi*2+0x4c],0x706f6f
 abf:	00 
 ac0:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ac1:	65                   	gs
 ac2:	77 53                	ja     b17 <sysEnter_Vector-0x12f4e9>
 ac4:	69 7a 65 00 72 65 61 	imul   edi,DWORD PTR [edx+0x65],0x61657200
 acb:	6c                   	ins    BYTE PTR es:[edi],dx
 acc:	53                   	push   ebx
 acd:	69 7a 65 00 6e 65 65 	imul   edi,DWORD PTR [edx+0x65],0x65656e00
 ad4:	64 65 64 00 72 65    	fs gs add BYTE PTR fs:gs:[edx+0x65],dh
 ada:	61                   	popa   
 adb:	6c                   	ins    BYTE PTR es:[edi],dx
 adc:	6c                   	ins    BYTE PTR es:[edi],dx
 add:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ade:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 ae1:	75 73                	jne    b56 <sysEnter_Vector-0x12f4aa>
 ae3:	65                   	gs
 ae4:	73 00                	jae    ae6 <sysEnter_Vector-0x12f51a>
 ae6:	68 65 61 70 72       	push   0x72706165
 aeb:	65 63 00             	arpl   WORD PTR gs:[eax],ax
 aee:	66                   	data16
 aef:	6e                   	outs   dx,BYTE PTR ds:[esi]
 af0:	65                   	gs
 af1:	77 70                	ja     b63 <sysEnter_Vector-0x12f49d>
 af3:	74 72                	je     b67 <sysEnter_Vector-0x12f499>
 af5:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 af8:	63 2f                	arpl   WORD PTR [edi],bp
 afa:	6d                   	ins    DWORD PTR es:[edi],dx
 afb:	61                   	popa   
 afc:	6c                   	ins    BYTE PTR es:[edi],dx
 afd:	6c                   	ins    BYTE PTR es:[edi],dx
 afe:	6f                   	outs   dx,DWORD PTR ds:[esi]
 aff:	63 2e                	arpl   WORD PTR [esi],bp
 b01:	63 00                	arpl   WORD PTR [eax],ax
 b03:	68 65 61 70 50       	push   0x50706165
 b08:	74 72                	je     b7c <sysEnter_Vector-0x12f484>
 b0a:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
 b0d:	6c                   	ins    BYTE PTR es:[edi],dx
 b0e:	64                   	fs
 b0f:	70 74                	jo     b85 <sysEnter_Vector-0x12f47b>
 b11:	72 00                	jb     b13 <sysEnter_Vector-0x12f4ed>
 b13:	66                   	data16
 b14:	72 65                	jb     b7b <sysEnter_Vector-0x12f485>
 b16:	65 00 66 70          	add    BYTE PTR gs:[esi+0x70],ah
 b1a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b1b:	69 6e 74 65 72 00 53 	imul   ebp,DWORD PTR [esi+0x74],0x53007265
 b22:	61                   	popa   
 b23:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b24:	69 74 79 4c 6f 6f 70 	imul   esi,DWORD PTR [ecx+edi*2+0x4c],0x32706f6f
 b2b:	32 
 b2c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 b2f:	6c                   	ins    BYTE PTR es:[edi],dx
 b30:	6c                   	ins    BYTE PTR es:[edi],dx
 b31:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b32:	63 46 69             	arpl   WORD PTR [esi+0x69],ax
 b35:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b36:	64                   	fs
 b37:	41                   	inc    ecx
 b38:	76 61                	jbe    b9b <sysEnter_Vector-0x12f465>
 b3a:	69 6c 61 62 6c 65 4d 	imul   ebp,DWORD PTR [ecx+eiz*2+0x62],0x654d656c
 b41:	65 
 b42:	6d                   	ins    DWORD PTR es:[edi],dx
 b43:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b44:	72 79                	jb     bbf <sysEnter_Vector-0x12f441>
 b46:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 b49:	61                   	popa   
 b4a:	6c                   	ins    BYTE PTR es:[edi],dx
 b4b:	6c                   	ins    BYTE PTR es:[edi],dx
 b4c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b4d:	63 00                	arpl   WORD PTR [eax],ax
 b4f:	6d                   	ins    DWORD PTR es:[edi],dx
 b50:	61                   	popa   
 b51:	6c                   	ins    BYTE PTR es:[edi],dx
 b52:	6c                   	ins    BYTE PTR es:[edi],dx
 b53:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b54:	63 53 61             	arpl   WORD PTR [ebx+0x61],dx
 b57:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b58:	69 74 79 43 68 65 63 	imul   esi,DWORD PTR [ecx+edi*2+0x43],0x6b636568
 b5f:	6b 
 b60:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 b63:	63 2f                	arpl   WORD PTR [edi],bp
 b65:	6d                   	ins    DWORD PTR es:[edi],dx
 b66:	65                   	gs
 b67:	6d                   	ins    DWORD PTR es:[edi],dx
 b68:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 b6b:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 b6e:	64                   	fs
 b6f:	65                   	gs
 b70:	73 74                	jae    be6 <sysEnter_Vector-0x12f41a>
 b72:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 b75:	6d                   	ins    DWORD PTR es:[edi],dx
 b76:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 b79:	49                   	dec    ecx
 b7a:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 b7d:	6d                   	ins    DWORD PTR es:[edi],dx
 b7e:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 b81:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 b84:	63 2f                	arpl   WORD PTR [edi],bp
 b86:	6d                   	ins    DWORD PTR es:[edi],dx
 b87:	65                   	gs
 b88:	6d                   	ins    DWORD PTR es:[edi],dx
 b89:	73 65                	jae    bf0 <sysEnter_Vector-0x12f410>
 b8b:	74 2e                	je     bbb <sysEnter_Vector-0x12f445>
 b8d:	63 00                	arpl   WORD PTR [eax],ax
 b8f:	6d                   	ins    DWORD PTR es:[edi],dx
 b90:	65                   	gs
 b91:	6d                   	ins    DWORD PTR es:[edi],dx
 b92:	73 65                	jae    bf9 <sysEnter_Vector-0x12f407>
 b94:	74 00                	je     b96 <sysEnter_Vector-0x12f46a>
 b96:	6d                   	ins    DWORD PTR es:[edi],dx
 b97:	65                   	gs
 b98:	6d                   	ins    DWORD PTR es:[edi],dx
 b99:	73 65                	jae    c00 <sysEnter_Vector-0x12f400>
 b9b:	74 49                	je     be6 <sysEnter_Vector-0x12f41a>
 b9d:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
 ba0:	61                   	popa   
 ba1:	6c                   	ins    BYTE PTR es:[edi],dx
 ba2:	00 66 56             	add    BYTE PTR [esi+0x56],ah
 ba5:	61                   	popa   
 ba6:	6c                   	ins    BYTE PTR es:[edi],dx
 ba7:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 baa:	63 2f                	arpl   WORD PTR [edi],bp
 bac:	70 69                	jo     c17 <sysEnter_Vector-0x12f3e9>
 bae:	70 65                	jo     c15 <sysEnter_Vector-0x12f3eb>
 bb0:	5f                   	pop    edi
 bb1:	6c                   	ins    BYTE PTR es:[edi],dx
 bb2:	69 62 2e 63 00 70 69 	imul   esp,DWORD PTR [edx+0x2e],0x69700063
 bb9:	70 65                	jo     c20 <sysEnter_Vector-0x12f3e0>
 bbb:	00 64 75 70          	add    BYTE PTR [ebp+esi*2+0x70],ah
 bbf:	33 00                	xor    eax,DWORD PTR [eax]
 bc1:	70 69                	jo     c2c <sysEnter_Vector-0x12f3d4>
 bc3:	70 65                	jo     c2a <sysEnter_Vector-0x12f3d6>
 bc5:	66                   	data16
 bc6:	64 00 6e 65          	add    BYTE PTR fs:[esi+0x65],ch
 bca:	77 66                	ja     c32 <sysEnter_Vector-0x12f3ce>
 bcc:	64 00 6f 6c          	add    BYTE PTR fs:[edi+0x6c],ch
 bd0:	64                   	fs
 bd1:	66                   	data16
 bd2:	64 00 73 6b          	add    BYTE PTR fs:[ebx+0x6b],dh
 bd6:	69 70 5f 61 74 6f 69 	imul   esi,DWORD PTR [eax+0x5f],0x696f7461
 bdd:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
 be1:	61                   	popa   
 be2:	73 65                	jae    c49 <sysEnter_Vector-0x12f3b7>
 be4:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 be7:	63 2f                	arpl   WORD PTR [edi],bp
 be9:	73 70                	jae    c5b <sysEnter_Vector-0x12f3a5>
 beb:	72 69                	jb     c56 <sysEnter_Vector-0x12f3aa>
 bed:	6e                   	outs   dx,BYTE PTR ds:[esi]
 bee:	74 66                	je     c56 <sysEnter_Vector-0x12f3aa>
 bf0:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 bf3:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
 bf6:	65 00 71 75          	add    BYTE PTR gs:[ecx+0x75],dh
 bfa:	61                   	popa   
 bfb:	6c                   	ins    BYTE PTR es:[edi],dx
 bfc:	69 66 69 65 72 00 72 	imul   esp,DWORD PTR [esi+0x69],0x72007265
 c03:	65                   	gs
 c04:	70 65                	jo     c6b <sysEnter_Vector-0x12f395>
 c06:	61                   	popa   
 c07:	74 00                	je     c09 <sysEnter_Vector-0x12f3f7>
 c09:	6e                   	outs   dx,BYTE PTR ds:[esi]
 c0a:	75 6d                	jne    c79 <sysEnter_Vector-0x12f387>
 c0c:	62 65 72             	bound  esp,QWORD PTR [ebp+0x72]
 c0f:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 c12:	65 63 69 73          	arpl   WORD PTR gs:[ecx+0x73],bp
 c16:	69 6f 6e 00 64 69 67 	imul   ebp,DWORD PTR [edi+0x6e],0x67696400
 c1d:	69 74 73 00 66 69 65 	imul   esi,DWORD PTR [ebx+esi*2+0x0],0x6c656966
 c24:	6c 
 c25:	64                   	fs
 c26:	5f                   	pop    edi
 c27:	77 69                	ja     c92 <sysEnter_Vector-0x12f36e>
 c29:	64                   	fs
 c2a:	74 68                	je     c94 <sysEnter_Vector-0x12f36c>
 c2c:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 c2f:	72 65                	jb     c96 <sysEnter_Vector-0x12f36a>
 c31:	73 00                	jae    c33 <sysEnter_Vector-0x12f3cd>
 c33:	76 73                	jbe    ca8 <sysEnter_Vector-0x12f358>
 c35:	70 72                	jo     ca9 <sysEnter_Vector-0x12f357>
 c37:	69 6e 74 66 00 73 72 	imul   ebp,DWORD PTR [esi+0x74],0x72730066
 c3e:	63 2f                	arpl   WORD PTR [edi],bp
 c40:	73 74                	jae    cb6 <sysEnter_Vector-0x12f34a>
 c42:	64 69 6f 2e 63 00 62 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x75620063
 c49:	75 
 c4a:	66                   	data16
 c4b:	66                   	data16
 c4c:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 c4f:	73 65                	jae    cb6 <sysEnter_Vector-0x12f34a>
 c51:	74 52                	je     ca5 <sysEnter_Vector-0x12f35b>
 c53:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c54:	77 00                	ja     c56 <sysEnter_Vector-0x12f3aa>
 c56:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 c59:	66 50                	push   ax
 c5b:	74 72                	je     ccf <sysEnter_Vector-0x12f331>
 c5d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 c60:	72 63                	jb     cc5 <sysEnter_Vector-0x12f33b>
 c62:	61                   	popa   
 c63:	74 49                	je     cae <sysEnter_Vector-0x12f352>
 c65:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 c68:	72 63                	jb     ccd <sysEnter_Vector-0x12f333>
 c6a:	61                   	popa   
 c6b:	74 00                	je     c6d <sysEnter_Vector-0x12f393>
 c6d:	73 74                	jae    ce3 <sysEnter_Vector-0x12f31d>
 c6f:	72 6e                	jb     cdf <sysEnter_Vector-0x12f321>
 c71:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 c74:	00 62 79             	add    BYTE PTR [edx+0x79],ah
 c77:	74 65                	je     cde <sysEnter_Vector-0x12f322>
 c79:	73 54                	jae    ccf <sysEnter_Vector-0x12f331>
 c7b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c7c:	43                   	inc    ebx
 c7d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c7e:	70 79                	jo     cf9 <sysEnter_Vector-0x12f307>
 c80:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 c83:	72 6e                	jb     cf3 <sysEnter_Vector-0x12f30d>
 c85:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 c88:	49                   	dec    ecx
 c89:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 c8c:	63 53 74             	arpl   WORD PTR [ebx+0x74],dx
 c8f:	72 69                	jb     cfa <sysEnter_Vector-0x12f306>
 c91:	6e                   	outs   dx,BYTE PTR ds:[esi]
 c92:	67 4c                	addr16 dec esp
 c94:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 c96:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 c99:	63 2f                	arpl   WORD PTR [edi],bp
 c9b:	73 74                	jae    d11 <sysEnter_Vector-0x12f2ef>
 c9d:	72 69                	jb     d08 <sysEnter_Vector-0x12f2f8>
 c9f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ca0:	67 73 2f             	addr16 jae cd2 <sysEnter_Vector-0x12f32e>
 ca3:	73 74                	jae    d19 <sysEnter_Vector-0x12f2e7>
 ca5:	72 63                	jb     d0a <sysEnter_Vector-0x12f2f6>
 ca7:	61                   	popa   
 ca8:	74 2e                	je     cd8 <sysEnter_Vector-0x12f328>
 caa:	63 00                	arpl   WORD PTR [eax],ax
 cac:	73 74                	jae    d22 <sysEnter_Vector-0x12f2de>
 cae:	72 63                	jb     d13 <sysEnter_Vector-0x12f2ed>
 cb0:	6d                   	ins    DWORD PTR es:[edi],dx
 cb1:	70 49                	jo     cfc <sysEnter_Vector-0x12f304>
 cb3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 cb6:	72 63                	jb     d1b <sysEnter_Vector-0x12f2e5>
 cb8:	6d                   	ins    DWORD PTR es:[edi],dx
 cb9:	70 00                	jo     cbb <sysEnter_Vector-0x12f345>
 cbb:	73 72                	jae    d2f <sysEnter_Vector-0x12f2d1>
 cbd:	63 2f                	arpl   WORD PTR [edi],bp
 cbf:	73 74                	jae    d35 <sysEnter_Vector-0x12f2cb>
 cc1:	72 69                	jb     d2c <sysEnter_Vector-0x12f2d4>
 cc3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 cc4:	67 73 2f             	addr16 jae cf6 <sysEnter_Vector-0x12f30a>
 cc7:	73 74                	jae    d3d <sysEnter_Vector-0x12f2c3>
 cc9:	72 63                	jb     d2e <sysEnter_Vector-0x12f2d2>
 ccb:	6d                   	ins    DWORD PTR es:[edi],dx
 ccc:	70 2e                	jo     cfc <sysEnter_Vector-0x12f304>
 cce:	63 00                	arpl   WORD PTR [eax],ax
 cd0:	63 6f 75             	arpl   WORD PTR [edi+0x75],bp
 cd3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 cd4:	74 00                	je     cd6 <sysEnter_Vector-0x12f32a>
 cd6:	73 74                	jae    d4c <sysEnter_Vector-0x12f2b4>
 cd8:	72 63                	jb     d3d <sysEnter_Vector-0x12f2c3>
 cda:	70 79                	jo     d55 <sysEnter_Vector-0x12f2ab>
 cdc:	63 00                	arpl   WORD PTR [eax],ax
 cde:	73 74                	jae    d54 <sysEnter_Vector-0x12f2ac>
 ce0:	72 63                	jb     d45 <sysEnter_Vector-0x12f2bb>
 ce2:	70 79                	jo     d5d <sysEnter_Vector-0x12f2a3>
 ce4:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 ce7:	63 2f                	arpl   WORD PTR [edi],bp
 ce9:	73 74                	jae    d5f <sysEnter_Vector-0x12f2a1>
 ceb:	72 69                	jb     d56 <sysEnter_Vector-0x12f2aa>
 ced:	6e                   	outs   dx,BYTE PTR ds:[esi]
 cee:	67 73 2f             	addr16 jae d20 <sysEnter_Vector-0x12f2e0>
 cf1:	73 74                	jae    d67 <sysEnter_Vector-0x12f299>
 cf3:	72 63                	jb     d58 <sysEnter_Vector-0x12f2a8>
 cf5:	70 79                	jo     d70 <sysEnter_Vector-0x12f290>
 cf7:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 cfa:	73 74                	jae    d70 <sysEnter_Vector-0x12f290>
 cfc:	72 63                	jb     d61 <sysEnter_Vector-0x12f29f>
 cfe:	70 79                	jo     d79 <sysEnter_Vector-0x12f287>
 d00:	49                   	dec    ecx
 d01:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 d04:	72 69                	jb     d6f <sysEnter_Vector-0x12f291>
 d06:	73 6e                	jae    d76 <sysEnter_Vector-0x12f28a>
 d08:	75 6d                	jne    d77 <sysEnter_Vector-0x12f289>
 d0a:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 d0d:	63 2f                	arpl   WORD PTR [edi],bp
 d0f:	73 74                	jae    d85 <sysEnter_Vector-0x12f27b>
 d11:	72 69                	jb     d7c <sysEnter_Vector-0x12f284>
 d13:	6e                   	outs   dx,BYTE PTR ds:[esi]
 d14:	67 73 2f             	addr16 jae d46 <sysEnter_Vector-0x12f2ba>
 d17:	73 74                	jae    d8d <sysEnter_Vector-0x12f273>
 d19:	72 69                	jb     d84 <sysEnter_Vector-0x12f27c>
 d1b:	73 6e                	jae    d8b <sysEnter_Vector-0x12f275>
 d1d:	75 6d                	jne    d8c <sysEnter_Vector-0x12f274>
 d1f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 d22:	63 68 65             	arpl   WORD PTR [eax+0x65],bp
 d25:	63 6b 5f             	arpl   WORD PTR [ebx+0x5f],bp
 d28:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
 d2f:	74 
 d30:	72 6c                	jb     d9e <sysEnter_Vector-0x12f262>
 d32:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 d34:	49                   	dec    ecx
 d35:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 d38:	72 6c                	jb     da6 <sysEnter_Vector-0x12f25a>
 d3a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 d3c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 d3f:	72 6e                	jb     daf <sysEnter_Vector-0x12f251>
 d41:	6c                   	ins    BYTE PTR es:[edi],dx
 d42:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 d44:	49                   	dec    ecx
 d45:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 d48:	72 6e                	jb     db8 <sysEnter_Vector-0x12f248>
 d4a:	6c                   	ins    BYTE PTR es:[edi],dx
 d4b:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 d4d:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 d50:	63 2f                	arpl   WORD PTR [edi],bp
 d52:	73 74                	jae    dc8 <sysEnter_Vector-0x12f238>
 d54:	72 69                	jb     dbf <sysEnter_Vector-0x12f241>
 d56:	6e                   	outs   dx,BYTE PTR ds:[esi]
 d57:	67 73 2f             	addr16 jae d89 <sysEnter_Vector-0x12f277>
 d5a:	73 74                	jae    dd0 <sysEnter_Vector-0x12f230>
 d5c:	72 6c                	jb     dca <sysEnter_Vector-0x12f236>
 d5e:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 d60:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 d63:	73 74                	jae    dd9 <sysEnter_Vector-0x12f227>
 d65:	72 6e                	jb     dd5 <sysEnter_Vector-0x12f22b>
 d67:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 d6a:	49                   	dec    ecx
 d6b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 d6e:	72 6e                	jb     dde <sysEnter_Vector-0x12f222>
 d70:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 d73:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 d76:	63 2f                	arpl   WORD PTR [edi],bp
 d78:	73 74                	jae    dee <sysEnter_Vector-0x12f212>
 d7a:	72 69                	jb     de5 <sysEnter_Vector-0x12f21b>
 d7c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 d7d:	67 73 2f             	addr16 jae daf <sysEnter_Vector-0x12f251>
 d80:	73 74                	jae    df6 <sysEnter_Vector-0x12f20a>
 d82:	72 6e                	jb     df2 <sysEnter_Vector-0x12f20e>
 d84:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 d87:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 d8a:	73 72                	jae    dfe <sysEnter_Vector-0x12f202>
 d8c:	63 2f                	arpl   WORD PTR [edi],bp
 d8e:	73 74                	jae    e04 <sysEnter_Vector-0x12f1fc>
 d90:	72 69                	jb     dfb <sysEnter_Vector-0x12f205>
 d92:	6e                   	outs   dx,BYTE PTR ds:[esi]
 d93:	67 73 2f             	addr16 jae dc5 <sysEnter_Vector-0x12f23b>
 d96:	73 74                	jae    e0c <sysEnter_Vector-0x12f1f4>
 d98:	72 6e                	jb     e08 <sysEnter_Vector-0x12f1f8>
 d9a:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 d9d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 da0:	73 74                	jae    e16 <sysEnter_Vector-0x12f1ea>
 da2:	72 6e                	jb     e12 <sysEnter_Vector-0x12f1ee>
 da4:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 da7:	49                   	dec    ecx
 da8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 dab:	72 6e                	jb     e1b <sysEnter_Vector-0x12f1e5>
 dad:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 db0:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
 db3:	64                   	fs
 db4:	70 74                	jo     e2a <sysEnter_Vector-0x12f1d6>
 db6:	72 00                	jb     db8 <sysEnter_Vector-0x12f248>
 db8:	63 75 74             	arpl   WORD PTR [ebp+0x74],si
 dbb:	6c                   	ins    BYTE PTR es:[edi],dx
 dbc:	69 6d 00 73 74 72 74 	imul   ebp,DWORD PTR [ebp+0x0],0x74727473
 dc3:	6f                   	outs   dx,DWORD PTR ds:[esi]
 dc4:	75 6c                	jne    e32 <sysEnter_Vector-0x12f1ce>
 dc6:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 dc9:	63 2f                	arpl   WORD PTR [edi],bp
 dcb:	73 74                	jae    e41 <sysEnter_Vector-0x12f1bf>
 dcd:	72 69                	jb     e38 <sysEnter_Vector-0x12f1c8>
 dcf:	6e                   	outs   dx,BYTE PTR ds:[esi]
 dd0:	67 73 2f             	addr16 jae e02 <sysEnter_Vector-0x12f1fe>
 dd3:	73 74                	jae    e49 <sysEnter_Vector-0x12f1b7>
 dd5:	72 6f                	jb     e46 <sysEnter_Vector-0x12f1ba>
 dd7:	75 6c                	jne    e45 <sysEnter_Vector-0x12f1bb>
 dd9:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 ddc:	63 75 74             	arpl   WORD PTR [ebp+0x74],si
 ddf:	6f                   	outs   dx,DWORD PTR ds:[esi]
 de0:	66                   	data16
 de1:	66                   	data16
 de2:	00 6e 70             	add    BYTE PTR [esi+0x70],ch
 de5:	74 72                	je     e59 <sysEnter_Vector-0x12f1a7>
 de7:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 dea:	63 2f                	arpl   WORD PTR [edi],bp
 dec:	73 74                	jae    e62 <sysEnter_Vector-0x12f19e>
 dee:	72 69                	jb     e59 <sysEnter_Vector-0x12f1a7>
 df0:	6e                   	outs   dx,BYTE PTR ds:[esi]
 df1:	67 73 2f             	addr16 jae e23 <sysEnter_Vector-0x12f1dd>
 df4:	73 74                	jae    e6a <sysEnter_Vector-0x12f196>
 df6:	72 70                	jb     e68 <sysEnter_Vector-0x12f198>
 df8:	61                   	popa   
 df9:	72 74                	jb     e6f <sysEnter_Vector-0x12f191>
 dfb:	73 2e                	jae    e2b <sysEnter_Vector-0x12f1d5>
 dfd:	63 00                	arpl   WORD PTR [eax],ax
 dff:	73 74                	jae    e75 <sysEnter_Vector-0x12f18b>
 e01:	72 6c                	jb     e6f <sysEnter_Vector-0x12f191>
 e03:	65                   	gs
 e04:	66                   	data16
 e05:	74 00                	je     e07 <sysEnter_Vector-0x12f1f9>
 e07:	73 72                	jae    e7b <sysEnter_Vector-0x12f185>
 e09:	63 2f                	arpl   WORD PTR [edi],bp
 e0b:	73 74                	jae    e81 <sysEnter_Vector-0x12f17f>
 e0d:	72 69                	jb     e78 <sysEnter_Vector-0x12f188>
 e0f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 e10:	67 73 2f             	addr16 jae e42 <sysEnter_Vector-0x12f1be>
 e13:	73 74                	jae    e89 <sysEnter_Vector-0x12f177>
 e15:	72 74                	jb     e8b <sysEnter_Vector-0x12f175>
 e17:	6f                   	outs   dx,DWORD PTR ds:[esi]
 e18:	6c                   	ins    BYTE PTR es:[edi],dx
 e19:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 e1c:	73 74                	jae    e92 <sysEnter_Vector-0x12f16e>
 e1e:	72 74                	jb     e94 <sysEnter_Vector-0x12f16c>
 e20:	6f                   	outs   dx,DWORD PTR ds:[esi]
 e21:	6c                   	ins    BYTE PTR es:[edi],dx
 e22:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 e25:	72 74                	jb     e9b <sysEnter_Vector-0x12f165>
 e27:	72 69                	jb     e92 <sysEnter_Vector-0x12f16e>
 e29:	6d                   	ins    DWORD PTR es:[edi],dx
 e2a:	49                   	dec    ecx
 e2b:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 e2e:	70 75                	jo     ea5 <sysEnter_Vector-0x12f15b>
 e30:	74 00                	je     e32 <sysEnter_Vector-0x12f1ce>
 e32:	73 72                	jae    ea6 <sysEnter_Vector-0x12f15a>
 e34:	63 2f                	arpl   WORD PTR [edi],bp
 e36:	73 74                	jae    eac <sysEnter_Vector-0x12f154>
 e38:	72 69                	jb     ea3 <sysEnter_Vector-0x12f15d>
 e3a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 e3b:	67 73 2f             	addr16 jae e6d <sysEnter_Vector-0x12f193>
 e3e:	73 74                	jae    eb4 <sysEnter_Vector-0x12f14c>
 e40:	72 74                	jb     eb6 <sysEnter_Vector-0x12f14a>
 e42:	72 69                	jb     ead <sysEnter_Vector-0x12f153>
 e44:	6d                   	ins    DWORD PTR es:[edi],dx
 e45:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 e48:	73 74                	jae    ebe <sysEnter_Vector-0x12f142>
 e4a:	72 74                	jb     ec0 <sysEnter_Vector-0x12f140>
 e4c:	72 69                	jb     eb7 <sysEnter_Vector-0x12f149>
 e4e:	6d                   	ins    DWORD PTR es:[edi],dx
 e4f:	00 6f 75             	add    BYTE PTR [edi+0x75],ch
 e52:	74 73                	je     ec7 <sysEnter_Vector-0x12f139>
 e54:	69 7a 65 00 73 72 63 	imul   edi,DWORD PTR [edx+0x65],0x63727300
 e5b:	2f                   	das    
 e5c:	73 74                	jae    ed2 <sysEnter_Vector-0x12f12e>
 e5e:	72 72                	jb     ed2 <sysEnter_Vector-0x12f12e>
 e60:	65                   	gs
 e61:	70 6c                	jo     ecf <sysEnter_Vector-0x12f131>
 e63:	61                   	popa   
 e64:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
 e67:	63 00                	arpl   WORD PTR [eax],ax
 e69:	6e                   	outs   dx,BYTE PTR ds:[esi]
 e6a:	65                   	gs
 e6b:	65                   	gs
 e6c:	64                   	fs
 e6d:	6c                   	ins    BYTE PTR es:[edi],dx
 e6e:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
 e72:	73 6f                	jae    ee3 <sysEnter_Vector-0x12f11d>
 e74:	66                   	data16
 e75:	66                   	data16
 e76:	73 65                	jae    edd <sysEnter_Vector-0x12f123>
 e78:	74 00                	je     e7a <sysEnter_Vector-0x12f186>
 e7a:	73 74                	jae    ef0 <sysEnter_Vector-0x12f110>
 e7c:	72 72                	jb     ef0 <sysEnter_Vector-0x12f110>
 e7e:	65                   	gs
 e7f:	70 6c                	jo     eed <sysEnter_Vector-0x12f113>
 e81:	61                   	popa   
 e82:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
 e85:	70 61                	jo     ee8 <sysEnter_Vector-0x12f118>
 e87:	74 74                	je     efd <sysEnter_Vector-0x12f103>
 e89:	65                   	gs
 e8a:	72 6e                	jb     efa <sysEnter_Vector-0x12f106>
 e8c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 e8f:	72 72                	jb     f03 <sysEnter_Vector-0x12f0fd>
 e91:	65                   	gs
 e92:	70 6c                	jo     f00 <sysEnter_Vector-0x12f100>
 e94:	61                   	popa   
 e95:	63 65 49             	arpl   WORD PTR [ebp+0x49],sp
 e98:	00 6f 75             	add    BYTE PTR [edi+0x75],ch
 e9b:	74 53                	je     ef0 <sysEnter_Vector-0x12f110>
 e9d:	74 72                	je     f11 <sysEnter_Vector-0x12f0ef>
 e9f:	69 6e 67 00 73 74 72 	imul   ebp,DWORD PTR [esi+0x67],0x72747300
 ea6:	73 74                	jae    f1c <sysEnter_Vector-0x12f0e4>
 ea8:	72 49                	jb     ef3 <sysEnter_Vector-0x12f10d>
 eaa:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 ead:	72 6e                	jb     f1d <sysEnter_Vector-0x12f0e3>
 eaf:	73 74                	jae    f25 <sysEnter_Vector-0x12f0db>
 eb1:	72 49                	jb     efc <sysEnter_Vector-0x12f104>
 eb3:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 eb6:	63 2f                	arpl   WORD PTR [edi],bp
 eb8:	73 74                	jae    f2e <sysEnter_Vector-0x12f0d2>
 eba:	72 73                	jb     f2f <sysEnter_Vector-0x12f0d1>
 ebc:	74 72                	je     f30 <sysEnter_Vector-0x12f0d0>
 ebe:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 ec1:	72 63                	jb     f26 <sysEnter_Vector-0x12f0da>
 ec3:	73 69                	jae    f2e <sysEnter_Vector-0x12f0d2>
 ec5:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
 ec9:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
 ecc:	72 69                	jb     f37 <sysEnter_Vector-0x12f0c9>
 ece:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ecf:	67 00 73 74          	add    BYTE PTR [bp+di+0x74],dh
 ed3:	72 73                	jb     f48 <sysEnter_Vector-0x12f0b8>
 ed5:	74 72                	je     f49 <sysEnter_Vector-0x12f0b7>
 ed7:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 eda:	63 2f                	arpl   WORD PTR [edi],bp
 edc:	74 69                	je     f47 <sysEnter_Vector-0x12f0b9>
 ede:	6d                   	ins    DWORD PTR es:[edi],dx
 edf:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
 ee3:	6c                   	ins    BYTE PTR es:[edi],dx
 ee4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ee5:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 ee8:	74 69                	je     f53 <sysEnter_Vector-0x12f0ad>
 eea:	6d                   	ins    DWORD PTR es:[edi],dx
 eeb:	65 00 74 6d 5f       	add    BYTE PTR gs:[ebp+ebp*2+0x5f],dh
 ef0:	68 6f 75 72 00       	push   0x72756f
 ef5:	67                   	addr16
 ef6:	65                   	gs
 ef7:	74 74                	je     f6d <sysEnter_Vector-0x12f093>
 ef9:	69 63 6b 73 00 5f 64 	imul   esp,DWORD PTR [ebx+0x6b],0x645f0073
 f00:	61                   	popa   
 f01:	79 6c                	jns    f6f <sysEnter_Vector-0x12f091>
 f03:	69 67 68 74 00 5f 74 	imul   esp,DWORD PTR [edi+0x68],0x745f0074
 f0a:	7a 6e                	jp     f7a <sysEnter_Vector-0x12f086>
 f0c:	61                   	popa   
 f0d:	6d                   	ins    DWORD PTR es:[edi],dx
 f0e:	65 00 67 6d          	add    BYTE PTR gs:[edi+0x6d],ah
 f12:	74 69                	je     f7d <sysEnter_Vector-0x12f083>
 f14:	6d                   	ins    DWORD PTR es:[edi],dx
 f15:	65                   	gs
 f16:	5f                   	pop    edi
 f17:	72 00                	jb     f19 <sysEnter_Vector-0x12f0e7>
 f19:	74 69                	je     f84 <sysEnter_Vector-0x12f07c>
 f1b:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
 f1e:	54                   	push   esp
 f1f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 f20:	57                   	push   edi
 f21:	61                   	popa   
 f22:	69 74 00 74 6d 5f 6d 	imul   esi,DWORD PTR [eax+eax*1+0x74],0x6f6d5f6d
 f29:	6f 
 f2a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 f2b:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 f2f:	79 65                	jns    f96 <sysEnter_Vector-0x12f06a>
 f31:	61                   	popa   
 f32:	72 00                	jb     f34 <sysEnter_Vector-0x12f0cc>
 f34:	6d                   	ins    DWORD PTR es:[edi],dx
 f35:	6f                   	outs   dx,DWORD PTR ds:[esi]
 f36:	6e                   	outs   dx,BYTE PTR ds:[esi]
 f37:	74 68                	je     fa1 <sysEnter_Vector-0x12f05f>
 f39:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 f3c:	74 74                	je     fb2 <sysEnter_Vector-0x12f04e>
 f3e:	69 6d 65 00 74 6d 5f 	imul   ebp,DWORD PTR [ebp+0x65],0x5f6d7400
 f45:	69 73 64 73 74 00 64 	imul   esi,DWORD PTR [ebx+0x64],0x64007473
 f4c:	61                   	popa   
 f4d:	79 6e                	jns    fbd <sysEnter_Vector-0x12f043>
 f4f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 f50:	00 67 6d             	add    BYTE PTR [edi+0x6d],ah
 f53:	74 69                	je     fbe <sysEnter_Vector-0x12f042>
 f55:	6d                   	ins    DWORD PTR es:[edi],dx
 f56:	65                   	gs
 f57:	5f                   	pop    edi
 f58:	72 49                	jb     fa3 <sysEnter_Vector-0x12f05d>
 f5a:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 f5e:	6d                   	ins    DWORD PTR es:[edi],dx
 f5f:	69 6e 00 74 6d 5f 79 	imul   ebp,DWORD PTR [esi+0x0],0x795f6d74
 f66:	64                   	fs
 f67:	61                   	popa   
 f68:	79 00                	jns    f6a <sysEnter_Vector-0x12f096>
 f6a:	6c                   	ins    BYTE PTR es:[edi],dx
 f6b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 f6c:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 f6f:	54                   	push   esp
 f70:	69 6d 65 00 74 6d 62 	imul   ebp,DWORD PTR [ebp+0x65],0x626d7400
 f77:	75 66                	jne    fdf <sysEnter_Vector-0x12f021>
 f79:	00 74 69 6d          	add    BYTE PTR [ecx+ebp*2+0x6d],dh
 f7d:	65                   	gs
 f7e:	5f                   	pop    edi
 f7f:	74 00                	je     f81 <sysEnter_Vector-0x12f07f>
 f81:	6c                   	ins    BYTE PTR es:[edi],dx
 f82:	6f                   	outs   dx,DWORD PTR ds:[esi]
 f83:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 f86:	74 69                	je     ff1 <sysEnter_Vector-0x12f00f>
 f88:	6d                   	ins    DWORD PTR es:[edi],dx
 f89:	65                   	gs
 f8a:	5f                   	pop    edi
 f8b:	72 00                	jb     f8d <sysEnter_Vector-0x12f073>
 f8d:	64                   	fs
 f8e:	61                   	popa   
 f8f:	79 63                	jns    ff4 <sysEnter_Vector-0x12f00c>
 f91:	6c                   	ins    BYTE PTR es:[edi],dx
 f92:	6f                   	outs   dx,DWORD PTR ds:[esi]
 f93:	63 6b 00             	arpl   WORD PTR [ebx+0x0],bp
 f96:	6d                   	ins    DWORD PTR es:[edi],dx
 f97:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
 f9c:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 fa0:	67 6d                	ins    DWORD PTR es:[di],dx
 fa2:	74 6f                	je     1013 <sysEnter_Vector-0x12efed>
 fa4:	66                   	data16
 fa5:	66                   	data16
 fa6:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 faa:	77 64                	ja     1010 <sysEnter_Vector-0x12eff0>
 fac:	61                   	popa   
 fad:	79 00                	jns    faf <sysEnter_Vector-0x12f051>
 faf:	5f                   	pop    edi
 fb0:	79 74                	jns    1026 <sysEnter_Vector-0x12efda>
 fb2:	61                   	popa   
 fb3:	62 00                	bound  eax,QWORD PTR [eax]
 fb5:	74 6d                	je     1024 <sysEnter_Vector-0x12efdc>
 fb7:	5f                   	pop    edi
 fb8:	6d                   	ins    DWORD PTR es:[edi],dx
 fb9:	64                   	fs
 fba:	61                   	popa   
 fbb:	79 00                	jns    fbd <sysEnter_Vector-0x12f043>
 fbd:	74 6d                	je     102c <sysEnter_Vector-0x12efd4>
 fbf:	5f                   	pop    edi
 fc0:	73 65                	jae    1027 <sysEnter_Vector-0x12efd9>
 fc2:	63 00                	arpl   WORD PTR [eax],ax
 fc4:	74 6d                	je     1033 <sysEnter_Vector-0x12efcd>
 fc6:	5f                   	pop    edi
 fc7:	7a 6f                	jp     1038 <sysEnter_Vector-0x12efc8>
 fc9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 fca:	65 00 74 69 6d       	add    BYTE PTR gs:[ecx+ebp*2+0x6d],dh
 fcf:	65                   	gs
 fd0:	72 00                	jb     fd2 <sysEnter_Vector-0x12f02e>
 fd2:	6c                   	ins    BYTE PTR es:[edi],dx
 fd3:	6f                   	outs   dx,DWORD PTR ds:[esi]
 fd4:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 fd7:	74 69                	je     1042 <sysEnter_Vector-0x12efbe>
 fd9:	6d                   	ins    DWORD PTR es:[edi],dx
 fda:	65                   	gs
 fdb:	5f                   	pop    edi
 fdc:	72 49                	jb     1027 <sysEnter_Vector-0x12efd9>
 fde:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
 fe1:	73 74                	jae    1057 <sysEnter_Vector-0x12efa9>
 fe3:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
 fe6:	73 00                	jae    fe8 <sysEnter_Vector-0x12f018>
 fe8:	72 65                	jb     104f <sysEnter_Vector-0x12efb1>
 fea:	73 75                	jae    1061 <sysEnter_Vector-0x12ef9f>
 fec:	6c                   	ins    BYTE PTR es:[edi],dx
 fed:	74 00                	je     fef <sysEnter_Vector-0x12f011>
 fef:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ff0:	76 65                	jbe    1057 <sysEnter_Vector-0x12efa9>
 ff2:	72 66                	jb     105a <sysEnter_Vector-0x12efa6>
 ff4:	6c                   	ins    BYTE PTR es:[edi],dx
 ff5:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ff6:	77 00                	ja     ff8 <sysEnter_Vector-0x12f008>

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    edi
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
   5:	28 47 4e             	sub    BYTE PTR [edi+0x4e],al
   8:	55                   	push   ebp
   9:	29 20                	sub    DWORD PTR [eax],esp
   b:	35 2e 33 2e 30       	xor    eax,0x302e332e
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20 0b                	and    BYTE PTR [ebx],cl
   2:	00 00                	add    BYTE PTR [eax],al
   4:	5a                   	pop    edx
   5:	0b 00                	or     eax,DWORD PTR [eax]
   7:	00 5f 0b             	add    BYTE PTR [edi+0xb],bl
   a:	00 00                	add    BYTE PTR [eax],al
   c:	93                   	xchg   ebx,eax
   d:	0b 00                	or     eax,DWORD PTR [eax]
	...
