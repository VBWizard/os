
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

30000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:9
 * and open the template in the editor.
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
30000000:	55                   	push   ebp
30000001:	89 e5                	mov    ebp,esp
30000003:	e8 a9 2c 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000008:	05 58 46 00 00       	add    eax,0x4658
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
    while (*s != (char)c)
3000000d:	eb 17                	jmp    30000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
        if (!*s++)
3000000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000012:	8d 50 01             	lea    edx,[eax+0x1]
30000015:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000018:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000001b:	84 c0                	test   al,al
3000001d:	75 07                	jne    30000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
            return 0;
3000001f:	b8 00 00 00 00       	mov    eax,0x0
30000024:	eb 10                	jmp    30000036 <strchr+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
    while (*s != (char)c)
30000026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000002c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000002f:	38 d0                	cmp    al,dl
30000031:	75 dc                	jne    3000000f <strchr+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
        if (!*s++)
            return 0;
    return (char *)s;
30000033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
}
30000036:	5d                   	pop    ebp
30000037:	c3                   	ret    

30000038 <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:17

char *strchrI(const char *s, int c)
{
30000038:	55                   	push   ebp
30000039:	89 e5                	mov    ebp,esp
3000003b:	e8 71 2c 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000040:	05 20 46 00 00       	add    eax,0x4620
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    while (*s != (char)c)
30000045:	eb 17                	jmp    3000005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
        if (!*s++)
30000047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000004a:	8d 50 01             	lea    edx,[eax+0x1]
3000004d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000050:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000053:	84 c0                	test   al,al
30000055:	75 07                	jne    3000005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
            return 0;
30000057:	b8 00 00 00 00       	mov    eax,0x0
3000005c:	eb 10                	jmp    3000006e <strchrI+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    return (char *)s;
}

char *strchrI(const char *s, int c)
{
    while (*s != (char)c)
3000005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000061:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000064:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000067:	38 d0                	cmp    al,dl
30000069:	75 dc                	jne    30000047 <strchrI+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
        if (!*s++)
            return 0;
    return (char *)s;
3000006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
}
3000006e:	5d                   	pop    ebp
3000006f:	c3                   	ret    

30000070 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:38
 */

#include "strings.h"

VISIBLE int strcspn(char* string, char* chars)
{
30000070:	55                   	push   ebp
30000071:	89 e5                	mov    ebp,esp
30000073:	56                   	push   esi
30000074:	53                   	push   ebx
30000075:	e8 37 2c 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
3000007a:	05 e6 45 00 00       	add    eax,0x45e6
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
3000007f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
30000082:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30000085:	89 c1                	mov    ecx,eax
30000087:	eb 29                	jmp    300000b2 <strcspn+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
	for (p = chars; *p != 0; p++) {
30000089:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
3000008c:	eb 15                	jmp    300000a3 <strcspn+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	    if (c == *p) {
3000008e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30000091:	38 c8                	cmp    al,cl
30000093:	75 0b                	jne    300000a0 <strcspn+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
		return s-string;
30000095:	89 da                	mov    edx,ebx
30000097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000009a:	29 c2                	sub    edx,eax
3000009c:	89 d0                	mov    eax,edx
3000009e:	eb 21                	jmp    300000c1 <strcspn+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)
VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
300000a0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
300000a3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000a6:	84 c0                	test   al,al
300000a8:	75 e4                	jne    3000008e <strcspn+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 2)

VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000aa:	83 c3 01             	add    ebx,0x1
300000ad:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
300000b0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 1)
300000b2:	89 c8                	mov    eax,ecx
300000b4:	84 c0                	test   al,al
300000b6:	75 d1                	jne    30000089 <strcspn+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:48
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
300000b8:	89 da                	mov    edx,ebx
300000ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300000bd:	29 c2                	sub    edx,eax
300000bf:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
}
300000c1:	5b                   	pop    ebx
300000c2:	5e                   	pop    esi
300000c3:	5d                   	pop    ebp
300000c4:	c3                   	ret    

300000c5 <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:52

int strcspnI(char* string, char* chars)
{
300000c5:	55                   	push   ebp
300000c6:	89 e5                	mov    ebp,esp
300000c8:	56                   	push   esi
300000c9:	53                   	push   ebx
300000ca:	e8 e2 2b 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
300000cf:	05 91 45 00 00       	add    eax,0x4591
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
300000d7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
300000da:	89 c1                	mov    ecx,eax
300000dc:	eb 29                	jmp    30000107 <strcspnI+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
	for (p = chars; *p != 0; p++) {
300000de:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
300000e1:	eb 15                	jmp    300000f8 <strcspnI+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	    if (c == *p) {
300000e3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000e6:	38 c8                	cmp    al,cl
300000e8:	75 0b                	jne    300000f5 <strcspnI+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
		return s-string;
300000ea:	89 da                	mov    edx,ebx
300000ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300000ef:	29 c2                	sub    edx,eax
300000f1:	89 d0                	mov    eax,edx
300000f3:	eb 21                	jmp    30000116 <strcspnI+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)
int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
300000f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
300000f8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000fb:	84 c0                	test   al,al
300000fd:	75 e4                	jne    300000e3 <strcspnI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 2)

int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000ff:	83 c3 01             	add    ebx,0x1
30000102:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30000105:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 1)
30000107:	89 c8                	mov    eax,ecx
30000109:	84 c0                	test   al,al
3000010b:	75 d1                	jne    300000de <strcspnI+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:62
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
3000010d:	89 da                	mov    edx,ebx
3000010f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000112:	29 c2                	sub    edx,eax
30000114:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
}
30000116:	5b                   	pop    ebx
30000117:	5e                   	pop    esi
30000118:	5d                   	pop    ebp
30000119:	c3                   	ret    
3000011a:	66 90                	xchg   ax,ax

3000011c <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:41
#include "strings.h"
int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
3000011c:	55                   	push   ebp
3000011d:	89 e5                	mov    ebp,esp
3000011f:	56                   	push   esi
30000120:	53                   	push   ebx
30000121:	e8 ca 2b 00 00       	call   30002cf0 <__x86.get_pc_thunk.bx>
30000126:	81 c3 3a 45 00 00    	add    ebx,0x453a
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:45
    static char *lasts;
    register int ch;

    if (s == 0)
3000012c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000130:	75 09                	jne    3000013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:46
	s = lasts;
30000132:	8b 83 38 00 00 00    	mov    eax,DWORD PTR [ebx+0x38]
30000138:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
    do {
	if ((ch = *s++) == '\0')
3000013b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000013e:	8d 50 01             	lea    edx,[eax+0x1]
30000141:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000147:	0f be f0             	movsx  esi,al
3000014a:	85 f6                	test   esi,esi
3000014c:	75 07                	jne    30000155 <strtok+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:49
	    return 0;
3000014e:	b8 00 00 00 00       	mov    eax,0x0
30000153:	eb 57                	jmp    300001ac <strtok+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    } while (strchrI(delim, ch));
30000155:	83 ec 08             	sub    esp,0x8
30000158:	56                   	push   esi
30000159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000015c:	e8 d7 fe ff ff       	call   30000038 <strchrI>
30000161:	83 c4 10             	add    esp,0x10
30000164:	85 c0                	test   eax,eax
30000166:	75 d3                	jne    3000013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
    --s;
30000168:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    lasts = s + strcspnI(s, delim);
3000016c:	83 ec 08             	sub    esp,0x8
3000016f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000175:	e8 4b ff ff ff       	call   300000c5 <strcspnI>
3000017a:	83 c4 10             	add    esp,0x10
3000017d:	89 c2                	mov    edx,eax
3000017f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000182:	01 d0                	add    eax,edx
30000184:	89 83 38 00 00 00    	mov    DWORD PTR [ebx+0x38],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    if (*lasts != 0)
3000018a:	8b 83 38 00 00 00    	mov    eax,DWORD PTR [ebx+0x38]
30000190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000193:	84 c0                	test   al,al
30000195:	74 12                	je     300001a9 <strtok+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
	*lasts++ = 0;
30000197:	8b 83 38 00 00 00    	mov    eax,DWORD PTR [ebx+0x38]
3000019d:	8d 50 01             	lea    edx,[eax+0x1]
300001a0:	89 93 38 00 00 00    	mov    DWORD PTR [ebx+0x38],edx
300001a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    return s;
300001a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
}
300001ac:	8d 65 f8             	lea    esp,[ebp-0x8]
300001af:	5b                   	pop    ebx
300001b0:	5e                   	pop    esi
300001b1:	5d                   	pop    ebp
300001b2:	c3                   	ret    
300001b3:	90                   	nop

300001b4 <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:10
 */

#include "libChrisOS.h"

void reverseI(char s[])
 {
300001b4:	55                   	push   ebp
300001b5:	89 e5                	mov    ebp,esp
300001b7:	53                   	push   ebx
300001b8:	83 ec 14             	sub    esp,0x14
300001bb:	e8 f1 2a 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
300001c0:	05 a0 44 00 00       	add    eax,0x44a0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
300001c5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
300001cc:	83 ec 0c             	sub    esp,0xc
300001cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300001d2:	89 c3                	mov    ebx,eax
300001d4:	e8 a4 18 00 00       	call   30001a7d <strlenI>
300001d9:	83 c4 10             	add    esp,0x10
300001dc:	83 e8 01             	sub    eax,0x1
300001df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
300001e2:	eb 39                	jmp    3000021d <reverseI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
         c = s[i];
300001e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300001e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300001ea:	01 d0                	add    eax,edx
300001ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300001ef:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         s[i] = s[j];
300001f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300001f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300001f8:	01 c2                	add    edx,eax
300001fa:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
300001fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000200:	01 c8                	add    eax,ecx
30000202:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000205:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[j] = c;
30000207:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
3000020a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000020d:	01 c2                	add    edx,eax
3000020f:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
30000213:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 3)
void reverseI(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
30000215:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
30000219:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 1)
3000021d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000220:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30000223:	7c bf                	jl     300001e4 <reverseI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:19
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
30000225:	90                   	nop
30000226:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000229:	c9                   	leave  
3000022a:	c3                   	ret    

3000022b <itoa>:
itoa():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:22

VISIBLE void itoa(int n, char s[])
 {
3000022b:	55                   	push   ebp
3000022c:	89 e5                	mov    ebp,esp
3000022e:	53                   	push   ebx
3000022f:	83 ec 14             	sub    esp,0x14
30000232:	e8 7a 2a 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000237:	05 29 44 00 00       	add    eax,0x4429
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:25
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
3000023c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000023f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
30000242:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000246:	79 03                	jns    3000024b <itoa+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
         n = -n;          /* make n positive */
30000248:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
     i = 0;
3000024b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:29 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
30000252:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000255:	8d 50 01             	lea    edx,[eax+0x1]
30000258:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000025b:	89 c2                	mov    edx,eax
3000025d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000260:	8d 1c 02             	lea    ebx,[edx+eax*1]
30000263:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000266:	ba 67 66 66 66       	mov    edx,0x66666667
3000026b:	89 c8                	mov    eax,ecx
3000026d:	f7 ea                	imul   edx
3000026f:	c1 fa 02             	sar    edx,0x2
30000272:	89 c8                	mov    eax,ecx
30000274:	c1 f8 1f             	sar    eax,0x1f
30000277:	29 c2                	sub    edx,eax
30000279:	89 d0                	mov    eax,edx
3000027b:	c1 e0 02             	shl    eax,0x2
3000027e:	01 d0                	add    eax,edx
30000280:	01 c0                	add    eax,eax
30000282:	29 c1                	sub    ecx,eax
30000284:	89 ca                	mov    edx,ecx
30000286:	89 d0                	mov    eax,edx
30000288:	83 c0 30             	add    eax,0x30
3000028b:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
3000028d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000290:	ba 67 66 66 66       	mov    edx,0x66666667
30000295:	89 c8                	mov    eax,ecx
30000297:	f7 ea                	imul   edx
30000299:	c1 fa 02             	sar    edx,0x2
3000029c:	89 c8                	mov    eax,ecx
3000029e:	c1 f8 1f             	sar    eax,0x1f
300002a1:	29 c2                	sub    edx,eax
300002a3:	89 d0                	mov    eax,edx
300002a5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
300002a8:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
300002ac:	7f a4                	jg     30000252 <itoa+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31
     if (sign < 0)
300002ae:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
300002b2:	79 13                	jns    300002c7 <itoa+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
         s[i++] = '-';
300002b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300002b7:	8d 50 01             	lea    edx,[eax+0x1]
300002ba:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300002bd:	89 c2                	mov    edx,eax
300002bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300002c2:	01 d0                	add    eax,edx
300002c4:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
     s[i] = '\0';
300002c7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300002ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300002cd:	01 d0                	add    eax,edx
300002cf:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     reverseI(s);
300002d2:	83 ec 0c             	sub    esp,0xc
300002d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300002d8:	e8 d7 fe ff ff       	call   300001b4 <reverseI>
300002dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
 }
300002e0:	90                   	nop
300002e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300002e4:	c9                   	leave  
300002e5:	c3                   	ret    

300002e6 <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:38

 void itoaI(int n, char s[])
 {
300002e6:	55                   	push   ebp
300002e7:	89 e5                	mov    ebp,esp
300002e9:	53                   	push   ebx
300002ea:	83 ec 14             	sub    esp,0x14
300002ed:	e8 bf 29 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
300002f2:	05 6e 43 00 00       	add    eax,0x436e
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:41
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
300002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300002fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
300002fd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000301:	79 03                	jns    30000306 <itoaI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:42
         n = -n;          /* make n positive */
30000303:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:43
     i = 0;
30000306:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:45 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
3000030d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000310:	8d 50 01             	lea    edx,[eax+0x1]
30000313:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000316:	89 c2                	mov    edx,eax
30000318:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000031b:	8d 1c 02             	lea    ebx,[edx+eax*1]
3000031e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000321:	ba 67 66 66 66       	mov    edx,0x66666667
30000326:	89 c8                	mov    eax,ecx
30000328:	f7 ea                	imul   edx
3000032a:	c1 fa 02             	sar    edx,0x2
3000032d:	89 c8                	mov    eax,ecx
3000032f:	c1 f8 1f             	sar    eax,0x1f
30000332:	29 c2                	sub    edx,eax
30000334:	89 d0                	mov    eax,edx
30000336:	c1 e0 02             	shl    eax,0x2
30000339:	01 d0                	add    eax,edx
3000033b:	01 c0                	add    eax,eax
3000033d:	29 c1                	sub    ecx,eax
3000033f:	89 ca                	mov    edx,ecx
30000341:	89 d0                	mov    eax,edx
30000343:	83 c0 30             	add    eax,0x30
30000346:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
30000348:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
3000034b:	ba 67 66 66 66       	mov    edx,0x66666667
30000350:	89 c8                	mov    eax,ecx
30000352:	f7 ea                	imul   edx
30000354:	c1 fa 02             	sar    edx,0x2
30000357:	89 c8                	mov    eax,ecx
30000359:	c1 f8 1f             	sar    eax,0x1f
3000035c:	29 c2                	sub    edx,eax
3000035e:	89 d0                	mov    eax,edx
30000360:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
30000363:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000367:	7f a4                	jg     3000030d <itoaI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:47
     if (sign < 0)
30000369:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
3000036d:	79 13                	jns    30000382 <itoaI+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:48
         s[i++] = '-';
3000036f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000372:	8d 50 01             	lea    edx,[eax+0x1]
30000375:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000378:	89 c2                	mov    edx,eax
3000037a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000037d:	01 d0                	add    eax,edx
3000037f:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
     s[i] = '\0';
30000382:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000385:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000388:	01 d0                	add    eax,edx
3000038a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
     reverseI(s);
3000038d:	83 ec 0c             	sub    esp,0xc
30000390:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000393:	e8 1c fe ff ff       	call   300001b4 <reverseI>
30000398:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:51
 }
3000039b:	90                   	nop
3000039c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000039f:	c9                   	leave  
300003a0:	c3                   	ret    

300003a1 <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:55

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
VISIBLE int atoi(char *str)
{
300003a1:	55                   	push   ebp
300003a2:	89 e5                	mov    ebp,esp
300003a4:	83 ec 10             	sub    esp,0x10
300003a7:	e8 05 29 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
300003ac:	05 b4 42 00 00       	add    eax,0x42b4
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:56
    int res = 0; // Initialize result
300003b1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
300003b8:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
300003bf:	eb 28                	jmp    300003e9 <atoi+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:61 (discriminator 3)
        res = res*10 + str[i] - '0';
300003c1:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
300003c4:	89 d0                	mov    eax,edx
300003c6:	c1 e0 02             	shl    eax,0x2
300003c9:	01 d0                	add    eax,edx
300003cb:	01 c0                	add    eax,eax
300003cd:	89 c1                	mov    ecx,eax
300003cf:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
300003d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300003d5:	01 d0                	add    eax,edx
300003d7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300003da:	0f be c0             	movsx  eax,al
300003dd:	01 c8                	add    eax,ecx
300003df:	83 e8 30             	sub    eax,0x30
300003e2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
300003e5:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 1)
300003e9:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
300003ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300003ef:	01 d0                	add    eax,edx
300003f1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300003f4:	84 c0                	test   al,al
300003f6:	75 c9                	jne    300003c1 <atoi+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:64
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
300003f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:65
300003fb:	c9                   	leave  
300003fc:	c3                   	ret    
300003fd:	66 90                	xchg   ax,ax
300003ff:	90                   	nop

30000400 <getenv>:
getenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:10
 */
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
30000400:	55                   	push   ebp
30000401:	89 e5                	mov    ebp,esp
30000403:	53                   	push   ebx
30000404:	83 ec 14             	sub    esp,0x14
30000407:	e8 e4 28 00 00       	call   30002cf0 <__x86.get_pc_thunk.bx>
3000040c:	81 c3 54 42 00 00    	add    ebx,0x4254
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11
    for (int cnt=0;cnt<100;cnt++)
30000412:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
30000419:	eb 7b                	jmp    30000496 <getenv+0x96>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:12
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
3000041b:	83 ec 0c             	sub    esp,0xc
3000041e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000421:	e8 57 16 00 00       	call   30001a7d <strlenI>
30000426:	83 c4 10             	add    esp,0x10
30000429:	89 c1                	mov    ecx,eax
3000042b:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000431:	8b 00                	mov    eax,DWORD PTR [eax]
30000433:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000436:	c1 e2 02             	shl    edx,0x2
30000439:	01 d0                	add    eax,edx
3000043b:	8b 00                	mov    eax,DWORD PTR [eax]
3000043d:	83 ec 04             	sub    esp,0x4
30000440:	51                   	push   ecx
30000441:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000444:	50                   	push   eax
30000445:	e8 cd 16 00 00       	call   30001b17 <strncmpI>
3000044a:	83 c4 10             	add    esp,0x10
3000044d:	85 c0                	test   eax,eax
3000044f:	75 41                	jne    30000492 <getenv+0x92>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:14
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
30000451:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000457:	8b 00                	mov    eax,DWORD PTR [eax]
30000459:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
3000045c:	c1 e2 02             	shl    edx,0x2
3000045f:	01 d0                	add    eax,edx
30000461:	8b 00                	mov    eax,DWORD PTR [eax]
30000463:	83 ec 08             	sub    esp,0x8
30000466:	8d 93 20 fb ff ff    	lea    edx,[ebx-0x4e0]
3000046c:	52                   	push   edx
3000046d:	50                   	push   eax
3000046e:	e8 81 1b 00 00       	call   30001ff4 <strstrI>
30000473:	83 c4 10             	add    esp,0x10
30000476:	83 c0 01             	add    eax,0x1
30000479:	83 ec 04             	sub    esp,0x4
3000047c:	6a 32                	push   0x32
3000047e:	50                   	push   eax
3000047f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000482:	e8 f9 16 00 00       	call   30001b80 <strncpyI>
30000487:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:15
            return cnt+1;
3000048a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000048d:	83 c0 01             	add    eax,0x1
30000490:	eb 13                	jmp    300004a5 <getenv+0xa5>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 2)
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
    for (int cnt=0;cnt<100;cnt++)
30000492:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 1)
30000496:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
3000049a:	0f 8e 7b ff ff ff    	jle    3000041b <getenv+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:17
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
            return cnt+1;
        }
    return 0;
300004a0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:18
}
300004a5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300004a8:	c9                   	leave  
300004a9:	c3                   	ret    

300004aa <setenv>:
setenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:21

VISIBLE void  setenv(char *varname, char *value)
{
300004aa:	55                   	push   ebp
300004ab:	89 e5                	mov    ebp,esp
300004ad:	53                   	push   ebx
300004ae:	83 ec 14             	sub    esp,0x14
300004b1:	e8 3a 28 00 00       	call   30002cf0 <__x86.get_pc_thunk.bx>
300004b6:	81 c3 aa 41 00 00    	add    ebx,0x41aa
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:22
    uint32_t lastPopulated = 0;
300004bc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24
    
    for (int cnt=0;cnt<100;cnt++)
300004c3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
300004ca:	e9 d5 00 00 00       	jmp    300005a4 <setenv+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:25
        if (processEnvp[cnt]!=0)
300004cf:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300004d5:	8b 00                	mov    eax,DWORD PTR [eax]
300004d7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300004da:	c1 e2 02             	shl    edx,0x2
300004dd:	01 d0                	add    eax,edx
300004df:	8b 00                	mov    eax,DWORD PTR [eax]
300004e1:	85 c0                	test   eax,eax
300004e3:	0f 84 b7 00 00 00    	je     300005a0 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:27
        {
            lastPopulated = processEnvp[cnt];
300004e9:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300004ef:	8b 00                	mov    eax,DWORD PTR [eax]
300004f1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300004f4:	c1 e2 02             	shl    edx,0x2
300004f7:	01 d0                	add    eax,edx
300004f9:	8b 00                	mov    eax,DWORD PTR [eax]
300004fb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:28
            if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
300004fe:	83 ec 0c             	sub    esp,0xc
30000501:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000504:	e8 74 15 00 00       	call   30001a7d <strlenI>
30000509:	83 c4 10             	add    esp,0x10
3000050c:	89 c1                	mov    ecx,eax
3000050e:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000514:	8b 00                	mov    eax,DWORD PTR [eax]
30000516:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000519:	c1 e2 02             	shl    edx,0x2
3000051c:	01 d0                	add    eax,edx
3000051e:	8b 00                	mov    eax,DWORD PTR [eax]
30000520:	83 ec 04             	sub    esp,0x4
30000523:	51                   	push   ecx
30000524:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000527:	50                   	push   eax
30000528:	e8 ea 15 00 00       	call   30001b17 <strncmpI>
3000052d:	83 c4 10             	add    esp,0x10
30000530:	85 c0                	test   eax,eax
30000532:	75 6c                	jne    300005a0 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:30
            {
                strcpyI(processEnvp[cnt],varname);
30000534:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000053a:	8b 00                	mov    eax,DWORD PTR [eax]
3000053c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
3000053f:	c1 e2 02             	shl    edx,0x2
30000542:	01 d0                	add    eax,edx
30000544:	8b 00                	mov    eax,DWORD PTR [eax]
30000546:	83 ec 08             	sub    esp,0x8
30000549:	ff 75 08             	push   DWORD PTR [ebp+0x8]
3000054c:	50                   	push   eax
3000054d:	e8 e6 13 00 00       	call   30001938 <strcpyI>
30000552:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:31
                strcatI(processEnvp[cnt],"=");
30000555:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000055b:	8b 00                	mov    eax,DWORD PTR [eax]
3000055d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000560:	c1 e2 02             	shl    edx,0x2
30000563:	01 d0                	add    eax,edx
30000565:	8b 00                	mov    eax,DWORD PTR [eax]
30000567:	83 ec 08             	sub    esp,0x8
3000056a:	8d 93 20 fb ff ff    	lea    edx,[ebx-0x4e0]
30000570:	52                   	push   edx
30000571:	50                   	push   eax
30000572:	e8 73 12 00 00       	call   300017ea <strcatI>
30000577:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:32
                strcatI(processEnvp[cnt],value);
3000057a:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000580:	8b 00                	mov    eax,DWORD PTR [eax]
30000582:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000585:	c1 e2 02             	shl    edx,0x2
30000588:	01 d0                	add    eax,edx
3000058a:	8b 00                	mov    eax,DWORD PTR [eax]
3000058c:	83 ec 08             	sub    esp,0x8
3000058f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000592:	50                   	push   eax
30000593:	e8 52 12 00 00       	call   300017ea <strcatI>
30000598:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:33
                return;
3000059b:	e9 c6 00 00 00       	jmp    30000666 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 2)

VISIBLE void  setenv(char *varname, char *value)
{
    uint32_t lastPopulated = 0;
    
    for (int cnt=0;cnt<100;cnt++)
300005a0:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 1)
300005a4:	83 7d f0 63          	cmp    DWORD PTR [ebp-0x10],0x63
300005a8:	0f 8e 21 ff ff ff    	jle    300004cf <setenv+0x25>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
300005ae:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
300005b5:	e9 a2 00 00 00       	jmp    3000065c <setenv+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:37
        if (processEnvp[cnt]==0)
300005ba:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005c0:	8b 00                	mov    eax,DWORD PTR [eax]
300005c2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005c5:	c1 e2 02             	shl    edx,0x2
300005c8:	01 d0                	add    eax,edx
300005ca:	8b 00                	mov    eax,DWORD PTR [eax]
300005cc:	85 c0                	test   eax,eax
300005ce:	0f 85 84 00 00 00    	jne    30000658 <setenv+0x1ae>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:39
        {
            processEnvp[cnt]=(char*)lastPopulated+512;
300005d4:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005da:	8b 00                	mov    eax,DWORD PTR [eax]
300005dc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005df:	c1 e2 02             	shl    edx,0x2
300005e2:	01 d0                	add    eax,edx
300005e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300005e7:	81 c2 00 02 00 00    	add    edx,0x200
300005ed:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:40
            strcpyI(processEnvp[cnt],varname);
300005ef:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005f5:	8b 00                	mov    eax,DWORD PTR [eax]
300005f7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005fa:	c1 e2 02             	shl    edx,0x2
300005fd:	01 d0                	add    eax,edx
300005ff:	8b 00                	mov    eax,DWORD PTR [eax]
30000601:	83 ec 08             	sub    esp,0x8
30000604:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000607:	50                   	push   eax
30000608:	e8 2b 13 00 00       	call   30001938 <strcpyI>
3000060d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41
            strcatI(processEnvp[cnt],"=");
30000610:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000616:	8b 00                	mov    eax,DWORD PTR [eax]
30000618:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
3000061b:	c1 e2 02             	shl    edx,0x2
3000061e:	01 d0                	add    eax,edx
30000620:	8b 00                	mov    eax,DWORD PTR [eax]
30000622:	83 ec 08             	sub    esp,0x8
30000625:	8d 93 20 fb ff ff    	lea    edx,[ebx-0x4e0]
3000062b:	52                   	push   edx
3000062c:	50                   	push   eax
3000062d:	e8 b8 11 00 00       	call   300017ea <strcatI>
30000632:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:42
            strcatI(processEnvp[cnt],value);
30000635:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000063b:	8b 00                	mov    eax,DWORD PTR [eax]
3000063d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30000640:	c1 e2 02             	shl    edx,0x2
30000643:	01 d0                	add    eax,edx
30000645:	8b 00                	mov    eax,DWORD PTR [eax]
30000647:	83 ec 08             	sub    esp,0x8
3000064a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000064d:	50                   	push   eax
3000064e:	e8 97 11 00 00       	call   300017ea <strcatI>
30000653:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:43
            return;
30000656:	eb 0e                	jmp    30000666 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 2)
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
30000658:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 1)
3000065c:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
30000660:	0f 8e 54 ff ff ff    	jle    300005ba <setenv+0x110>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:47
            strcatI(processEnvp[cnt],value);
            return;
        }            
    //NOTE: if we get here, the value is thrown away!        
    
}
30000666:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000669:	c9                   	leave  
3000066a:	c3                   	ret    
3000066b:	90                   	nop

3000066c <open>:
open():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:10
 */

#include "libChrisOS.h"

VISIBLE void* open(char* path, const char* mode)
{
3000066c:	55                   	push   ebp
3000066d:	89 e5                	mov    ebp,esp
3000066f:	53                   	push   ebx
30000670:	83 ec 04             	sub    esp,0x4
30000673:	e8 39 26 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000678:	05 e8 3f 00 00       	add    eax,0x3fe8
/home/yogi/src/os/aproj/libChrisOS/src/file.c:11
    return (void*)do_syscall2(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode);
3000067d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
30000680:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000683:	83 ec 04             	sub    esp,0x4
30000686:	51                   	push   ecx
30000687:	52                   	push   edx
30000688:	6a 02                	push   0x2
3000068a:	89 c3                	mov    ebx,eax
3000068c:	e8 65 02 00 00       	call   300008f6 <do_syscall2>
30000691:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:12
}
30000694:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000697:	c9                   	leave  
30000698:	c3                   	ret    

30000699 <close>:
close():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:15

VISIBLE void close(void* handle)
{
30000699:	55                   	push   ebp
3000069a:	89 e5                	mov    ebp,esp
3000069c:	53                   	push   ebx
3000069d:	83 ec 04             	sub    esp,0x4
300006a0:	e8 0c 26 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
300006a5:	05 bb 3f 00 00       	add    eax,0x3fbb
/home/yogi/src/os/aproj/libChrisOS/src/file.c:16
    do_syscall1(SYSCALL_CLOSE, (uint32_t)handle);
300006aa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300006ad:	83 ec 08             	sub    esp,0x8
300006b0:	52                   	push   edx
300006b1:	6a 03                	push   0x3
300006b3:	89 c3                	mov    ebx,eax
300006b5:	e8 7a 02 00 00       	call   30000934 <do_syscall1>
300006ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:17
}
300006bd:	90                   	nop
300006be:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300006c1:	c9                   	leave  
300006c2:	c3                   	ret    

300006c3 <read>:
read():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:20

VISIBLE int read(void* handle, void *buffer, int size, int length)
{
300006c3:	55                   	push   ebp
300006c4:	89 e5                	mov    ebp,esp
300006c6:	56                   	push   esi
300006c7:	53                   	push   ebx
300006c8:	e8 e4 25 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
300006cd:	05 93 3f 00 00       	add    eax,0x3f93
/home/yogi/src/os/aproj/libChrisOS/src/file.c:21
    return do_syscall4(SYSCALL_READ, (uint32_t)handle, (uint32_t)buffer, size, length);
300006d2:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
300006d5:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
300006d8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
300006db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300006de:	83 ec 0c             	sub    esp,0xc
300006e1:	56                   	push   esi
300006e2:	53                   	push   ebx
300006e3:	51                   	push   ecx
300006e4:	52                   	push   edx
300006e5:	6a 04                	push   0x4
300006e7:	89 c3                	mov    ebx,eax
300006e9:	e8 92 01 00 00       	call   30000880 <do_syscall4>
300006ee:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:22
}
300006f1:	8d 65 f8             	lea    esp,[ebp-0x8]
300006f4:	5b                   	pop    ebx
300006f5:	5e                   	pop    esi
300006f6:	5d                   	pop    ebp
300006f7:	c3                   	ret    

300006f8 <getdir>:
getdir():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:25

VISIBLE int getdir(char* path, char *buffer, int bufferCount)
{
300006f8:	55                   	push   ebp
300006f9:	89 e5                	mov    ebp,esp
300006fb:	53                   	push   ebx
300006fc:	83 ec 04             	sub    esp,0x4
300006ff:	e8 ad 25 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000704:	05 5c 3f 00 00       	add    eax,0x3f5c
/home/yogi/src/os/aproj/libChrisOS/src/file.c:26
    return do_syscall3(SYSCALL_GETDENTS, (uint32_t)path, (uint32_t)buffer, bufferCount);
30000709:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
3000070c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
3000070f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000712:	53                   	push   ebx
30000713:	51                   	push   ecx
30000714:	52                   	push   edx
30000715:	68 04 03 00 00       	push   0x304
3000071a:	89 c3                	mov    ebx,eax
3000071c:	e8 99 01 00 00       	call   300008ba <do_syscall3>
30000721:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:27
}
30000724:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000727:	c9                   	leave  
30000728:	c3                   	ret    
30000729:	66 90                	xchg   ax,ax
3000072b:	90                   	nop

3000072c <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
3000072c:	55                   	push   ebp
3000072d:	89 e5                	mov    ebp,esp
3000072f:	53                   	push   ebx
30000730:	e8 7c 25 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000735:	05 2b 3f 00 00       	add    eax,0x3f2b
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
3000073a:	b8 05 00 00 00       	mov    eax,0x5
3000073f:	bb 01 00 00 00       	mov    ebx,0x1
30000744:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000747:	89 d1                	mov    ecx,edx
30000749:	e8 fc ff ff ff       	call   3000074a <puts+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
3000074e:	90                   	nop
3000074f:	5b                   	pop    ebx
30000750:	5d                   	pop    ebp
30000751:	c3                   	ret    

30000752 <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
30000752:	55                   	push   ebp
30000753:	89 e5                	mov    ebp,esp
30000755:	53                   	push   ebx
30000756:	83 ec 14             	sub    esp,0x14
30000759:	e8 53 25 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
3000075e:	05 02 3f 00 00       	add    eax,0x3f02
30000763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000766:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
30000769:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
3000076f:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
30000773:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
30000776:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
3000077a:	b8 05 00 00 00       	mov    eax,0x5
3000077f:	bb 01 00 00 00       	mov    ebx,0x1
30000784:	8d 55 fa             	lea    edx,[ebp-0x6]
30000787:	89 d1                	mov    ecx,edx
30000789:	e8 fc ff ff ff       	call   3000078a <putc+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
3000078e:	90                   	nop
3000078f:	83 c4 14             	add    esp,0x14
30000792:	5b                   	pop    ebx
30000793:	5d                   	pop    ebp
30000794:	c3                   	ret    

30000795 <getc>:
getc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:30

VISIBLE char getc()
{
30000795:	55                   	push   ebp
30000796:	89 e5                	mov    ebp,esp
30000798:	53                   	push   ebx
30000799:	83 ec 10             	sub    esp,0x10
3000079c:	e8 10 25 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
300007a1:	05 bf 3e 00 00       	add    eax,0x3ebf
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32
    char c;
    READCHAR(c)
300007a6:	b8 04 00 00 00       	mov    eax,0x4
300007ab:	ba 00 00 00 00       	mov    edx,0x0
300007b0:	89 d3                	mov    ebx,edx
300007b2:	e8 fc ff ff ff       	call   300007b3 <getc+0x1e>
300007b7:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:33
    return c;
300007ba:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:34
}
300007be:	83 c4 10             	add    esp,0x10
300007c1:	5b                   	pop    ebx
300007c2:	5d                   	pop    ebp
300007c3:	c3                   	ret    

300007c4 <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
300007c4:	55                   	push   ebp
300007c5:	89 e5                	mov    ebp,esp
300007c7:	53                   	push   ebx
300007c8:	83 ec 14             	sub    esp,0x14
300007cb:	e8 e1 24 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
300007d0:	05 90 3e 00 00       	add    eax,0x3e90
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:40
    char inchar;
    int len=0;
300007d5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:41
    char lbuf[2]={0,0};
300007dc:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
300007e0:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:43
    
    if (stream!=1)
300007e4:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
300007e8:	74 19                	je     30000803 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:45
    {
        printI("Stream %u not implemented\n",stream);
300007ea:	83 ec 08             	sub    esp,0x8
300007ed:	ff 75 10             	push   DWORD PTR [ebp+0x10]
300007f0:	8d 90 22 fb ff ff    	lea    edx,[eax-0x4de]
300007f6:	52                   	push   edx
300007f7:	89 c3                	mov    ebx,eax
300007f9:	e8 bc 02 00 00       	call   30000aba <printI>
300007fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46 (discriminator 1)
        getsError: goto getsError;
30000801:	eb fe                	jmp    30000801 <gets+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    }
    
    while (1==1)
    {
        READCHAR(inchar)
30000803:	b8 04 00 00 00       	mov    eax,0x4
30000808:	ba 00 00 00 00       	mov    edx,0x0
3000080d:	89 d3                	mov    ebx,edx
3000080f:	e8 fc ff ff ff       	call   30000810 <gets+0x4c>
30000814:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52
        if (inchar=='\b' && len>0)
30000817:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
3000081b:	75 17                	jne    30000834 <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52 (discriminator 1)
3000081d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
30000821:	7e 11                	jle    30000834 <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54
        {
            buffer[len]=0;
30000823:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000829:	01 d0                	add    eax,edx
3000082b:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:55
            len--;
3000082e:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
30000832:	eb 43                	jmp    30000877 <gets+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:57
        }
        else if (inchar!=0)
30000834:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
30000838:	74 33                	je     3000086d <gets+0xa9>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:59
        {
            lbuf[0]=inchar;
3000083a:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
3000083e:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
30000841:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000844:	8d 50 01             	lea    edx,[eax+0x1]
30000847:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000084a:	89 c2                	mov    edx,eax
3000084c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000084f:	01 c2                	add    edx,eax
30000851:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
30000855:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
30000857:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000085a:	83 c0 01             	add    eax,0x1
3000085d:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
30000860:	7d 06                	jge    30000868 <gets+0xa4>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63 (discriminator 1)
30000862:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
30000866:	75 9b                	jne    30000803 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:65
            
                return len;
30000868:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000086b:	eb 0c                	jmp    30000879 <gets+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:68
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
3000086d:	b8 02 03 00 00       	mov    eax,0x302
30000872:	e8 fc ff ff ff       	call   30000873 <gets+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:70 (discriminator 2)

    }
30000877:	eb 8a                	jmp    30000803 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:71
}
30000879:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000087c:	c9                   	leave  
3000087d:	c3                   	ret    
3000087e:	66 90                	xchg   ax,ax

30000880 <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:17
extern void sysEnter_Vector();
bool libcInitialized = false;


int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)
{
30000880:	55                   	push   ebp
30000881:	89 e5                	mov    ebp,esp
30000883:	56                   	push   esi
30000884:	53                   	push   ebx
30000885:	83 ec 10             	sub    esp,0x10
30000888:	e8 24 24 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
3000088d:	05 d3 3d 00 00       	add    eax,0x3dd3
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
    int retVal=0;
30000892:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    SYSCALL4(callnum, param1, param2, param3, param4, retVal);
30000899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000089c:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
3000089f:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
300008a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
300008a5:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
300008a8:	e8 fc ff ff ff       	call   300008a9 <do_syscall4+0x29>
300008ad:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
    return retVal;
300008b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:21
}
300008b3:	83 c4 10             	add    esp,0x10
300008b6:	5b                   	pop    ebx
300008b7:	5e                   	pop    esi
300008b8:	5d                   	pop    ebp
300008b9:	c3                   	ret    

300008ba <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:24

int do_syscall3(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
300008ba:	55                   	push   ebp
300008bb:	89 e5                	mov    ebp,esp
300008bd:	56                   	push   esi
300008be:	53                   	push   ebx
300008bf:	83 ec 10             	sub    esp,0x10
300008c2:	e8 ea 23 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
300008c7:	05 99 3d 00 00       	add    eax,0x3d99
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25
    int retVal=0;
300008cc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    SYSCALL3(callnum, param1, param2, param3, retVal);
300008d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300008d6:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
300008d9:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
300008dc:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
300008df:	be 00 00 00 00       	mov    esi,0x0
300008e4:	e8 fc ff ff ff       	call   300008e5 <do_syscall3+0x2b>
300008e9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
    return retVal;
300008ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:28
}
300008ef:	83 c4 10             	add    esp,0x10
300008f2:	5b                   	pop    ebx
300008f3:	5e                   	pop    esi
300008f4:	5d                   	pop    ebp
300008f5:	c3                   	ret    

300008f6 <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:31

int do_syscall2(int callnum, uint32_t param1, uint32_t param2)
{
300008f6:	55                   	push   ebp
300008f7:	89 e5                	mov    ebp,esp
300008f9:	56                   	push   esi
300008fa:	53                   	push   ebx
300008fb:	83 ec 10             	sub    esp,0x10
300008fe:	e8 ae 23 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000903:	05 5d 3d 00 00       	add    eax,0x3d5d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32
    int retVal=0;
30000908:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    SYSCALL2(callnum, param1, param2, retVal);
3000090f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000912:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
30000915:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000918:	ba 00 00 00 00       	mov    edx,0x0
3000091d:	be 00 00 00 00       	mov    esi,0x0
30000922:	e8 fc ff ff ff       	call   30000923 <do_syscall2+0x2d>
30000927:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
    return retVal;
3000092a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:35
}
3000092d:	83 c4 10             	add    esp,0x10
30000930:	5b                   	pop    ebx
30000931:	5e                   	pop    esi
30000932:	5d                   	pop    ebp
30000933:	c3                   	ret    

30000934 <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:38

int do_syscall1(int callnum, uint32_t param1)
{
30000934:	55                   	push   ebp
30000935:	89 e5                	mov    ebp,esp
30000937:	56                   	push   esi
30000938:	53                   	push   ebx
30000939:	83 ec 10             	sub    esp,0x10
3000093c:	e8 70 23 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000941:	05 1f 3d 00 00       	add    eax,0x3d1f
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39
    int retVal=0;
30000946:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    SYSCALL1(callnum, param1, retVal);
3000094d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000950:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
30000953:	b9 00 00 00 00       	mov    ecx,0x0
30000958:	ba 00 00 00 00       	mov    edx,0x0
3000095d:	be 00 00 00 00       	mov    esi,0x0
30000962:	e8 fc ff ff ff       	call   30000963 <do_syscall1+0x2f>
30000967:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
    return retVal;
3000096a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:42
}
3000096d:	83 c4 10             	add    esp,0x10
30000970:	5b                   	pop    ebx
30000971:	5e                   	pop    esi
30000972:	5d                   	pop    ebp
30000973:	c3                   	ret    

30000974 <do_syscall0>:
do_syscall0():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:45

int do_syscall0(int callnum)
{
30000974:	55                   	push   ebp
30000975:	89 e5                	mov    ebp,esp
30000977:	56                   	push   esi
30000978:	53                   	push   ebx
30000979:	83 ec 10             	sub    esp,0x10
3000097c:	e8 30 23 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000981:	05 df 3c 00 00       	add    eax,0x3cdf
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46
    int retVal=0;
30000986:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:47
    SYSCALL0(callnum, retVal);
3000098d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000990:	bb 00 00 00 00       	mov    ebx,0x0
30000995:	b9 00 00 00 00       	mov    ecx,0x0
3000099a:	ba 00 00 00 00       	mov    edx,0x0
3000099f:	be 00 00 00 00       	mov    esi,0x0
300009a4:	e8 fc ff ff ff       	call   300009a5 <do_syscall0+0x31>
300009a9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
    return retVal;
300009ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:49
}
300009af:	83 c4 10             	add    esp,0x10
300009b2:	5b                   	pop    ebx
300009b3:	5e                   	pop    esi
300009b4:	5d                   	pop    ebp
300009b5:	c3                   	ret    

300009b6 <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:52

VISIBLE void __attribute__((constructor)) libc_init()
{
300009b6:	55                   	push   ebp
300009b7:	89 e5                	mov    ebp,esp
300009b9:	53                   	push   ebx
300009ba:	83 ec 04             	sub    esp,0x4
300009bd:	e8 2e 23 00 00       	call   30002cf0 <__x86.get_pc_thunk.bx>
300009c2:	81 c3 9e 3c 00 00    	add    ebx,0x3c9e
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53
    printdI(DEBUG_LIBC,"***libc_init called\n***");
300009c8:	83 ec 08             	sub    esp,0x8
300009cb:	8d 83 40 fb ff ff    	lea    eax,[ebx-0x4c0]
300009d1:	50                   	push   eax
300009d2:	68 00 00 00 02       	push   0x2000000
300009d7:	e8 12 01 00 00       	call   30000aee <printdI>
300009dc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:54
    if (!libcInitialized)
300009df:	0f b6 83 3c 00 00 00 	movzx  eax,BYTE PTR [ebx+0x3c]
300009e6:	83 f0 01             	xor    eax,0x1
300009e9:	84 c0                	test   al,al
300009eb:	74 62                	je     30000a4f <libc_init+0x99>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:56
    {
        initmalloc();
300009ed:	e8 ba 04 00 00       	call   30000eac <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:58
        //processEnvp = envp;
        __asm__("mov %0,[ebp+52]\n":"=a" (processEnvp));
300009f2:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
300009f5:	89 c2                	mov    edx,eax
300009f7:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300009fd:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:59
        libcTZ=-4;
300009ff:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
30000a05:	c7 00 fc ff ff ff    	mov    DWORD PTR [eax],0xfffffffc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:60
        do_syscall0(SYSCALL_INVALID);
30000a0b:	83 ec 0c             	sub    esp,0xc
30000a0e:	6a 00                	push   0x0
30000a10:	e8 5f ff ff ff       	call   30000974 <do_syscall0>
30000a15:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
30000a18:	8d 83 07 c4 ff ff    	lea    eax,[ebx-0x3bf9]
30000a1e:	83 ec 08             	sub    esp,0x8
30000a21:	50                   	push   eax
30000a22:	68 63 01 00 00       	push   0x163
30000a27:	e8 08 ff ff ff       	call   30000934 <do_syscall1>
30000a2c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:62
        libcInitialized = true;
30000a2f:	c6 83 3c 00 00 00 01 	mov    BYTE PTR [ebx+0x3c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:63
        printdI(DEBUG_LIBC,"***libc_init completed\n");
30000a36:	83 ec 08             	sub    esp,0x8
30000a39:	8d 83 58 fb ff ff    	lea    eax,[ebx-0x4a8]
30000a3f:	50                   	push   eax
30000a40:	68 00 00 00 02       	push   0x2000000
30000a45:	e8 a4 00 00 00       	call   30000aee <printdI>
30000a4a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:67
    }
    else
        printI("libc_init called previously, exiting\n");
}
30000a4d:	eb 12                	jmp    30000a61 <libc_init+0xab>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:66
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
        libcInitialized = true;
        printdI(DEBUG_LIBC,"***libc_init completed\n");
    }
    else
        printI("libc_init called previously, exiting\n");
30000a4f:	83 ec 0c             	sub    esp,0xc
30000a52:	8d 83 70 fb ff ff    	lea    eax,[ebx-0x490]
30000a58:	50                   	push   eax
30000a59:	e8 5c 00 00 00       	call   30000aba <printI>
30000a5e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:67
}
30000a61:	90                   	nop
30000a62:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000a65:	c9                   	leave  
30000a66:	c3                   	ret    

30000a67 <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70

void __attribute__((destructor)) libc_cleanup(void)
{
30000a67:	55                   	push   ebp
30000a68:	89 e5                	mov    ebp,esp
30000a6a:	53                   	push   ebx
30000a6b:	83 ec 04             	sub    esp,0x4
30000a6e:	e8 3e 22 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000a73:	05 ed 3b 00 00       	add    eax,0x3bed
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:71
    malloc_cleanup();
30000a78:	89 c3                	mov    ebx,eax
30000a7a:	e8 5c 07 00 00       	call   300011db <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:72
}
30000a7f:	90                   	nop
30000a80:	83 c4 04             	add    esp,0x4
30000a83:	5b                   	pop    ebx
30000a84:	5d                   	pop    ebp
30000a85:	c3                   	ret    

30000a86 <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:75

VISIBLE int print(const char *format, ...)
{
30000a86:	55                   	push   ebp
30000a87:	89 e5                	mov    ebp,esp
30000a89:	83 ec 10             	sub    esp,0x10
30000a8c:	e8 20 22 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000a91:	05 cf 3b 00 00       	add    eax,0x3bcf
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:77
    va_list args;
    va_start( args, format );
30000a96:	8d 45 0c             	lea    eax,[ebp+0xc]
30000a99:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:78
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
30000a9c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000a9f:	89 c2                	mov    edx,eax
30000aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000aa4:	52                   	push   edx
30000aa5:	50                   	push   eax
30000aa6:	68 00 03 00 00       	push   0x300
30000aab:	e8 46 fe ff ff       	call   300008f6 <do_syscall2>
30000ab0:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:79
    return 0;
30000ab3:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:80
}
30000ab8:	c9                   	leave  
30000ab9:	c3                   	ret    

30000aba <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:83

int printI(const char *format, ...)
{
30000aba:	55                   	push   ebp
30000abb:	89 e5                	mov    ebp,esp
30000abd:	83 ec 10             	sub    esp,0x10
30000ac0:	e8 ec 21 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000ac5:	05 9b 3b 00 00       	add    eax,0x3b9b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:85
    va_list args;
    va_start( args, format );
30000aca:	8d 45 0c             	lea    eax,[ebp+0xc]
30000acd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:86
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
30000ad0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000ad3:	89 c2                	mov    edx,eax
30000ad5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000ad8:	52                   	push   edx
30000ad9:	50                   	push   eax
30000ada:	68 00 03 00 00       	push   0x300
30000adf:	e8 12 fe ff ff       	call   300008f6 <do_syscall2>
30000ae4:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:87
    return 0;
30000ae7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:88
}
30000aec:	c9                   	leave  
30000aed:	c3                   	ret    

30000aee <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:91

int printdI(uint32_t DebugLevel, const char *format, ...)
{
30000aee:	55                   	push   ebp
30000aef:	89 e5                	mov    ebp,esp
30000af1:	83 ec 10             	sub    esp,0x10
30000af4:	e8 b8 21 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000af9:	05 67 3b 00 00       	add    eax,0x3b67
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:93
    va_list args;
    va_start( args, format );
30000afe:	8d 45 10             	lea    eax,[ebp+0x10]
30000b01:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:95
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
30000b04:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000b07:	89 c2                	mov    edx,eax
30000b09:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000b0c:	52                   	push   edx
30000b0d:	50                   	push   eax
30000b0e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000b11:	68 01 03 00 00       	push   0x301
30000b16:	e8 9f fd ff ff       	call   300008ba <do_syscall3>
30000b1b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:96
    return 0;
30000b1e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:97
}
30000b23:	c9                   	leave  
30000b24:	c3                   	ret    

30000b25 <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:100

VISIBLE unsigned int sleep (unsigned int __seconds)
{
30000b25:	55                   	push   ebp
30000b26:	89 e5                	mov    ebp,esp
30000b28:	56                   	push   esi
30000b29:	53                   	push   ebx
30000b2a:	83 ec 10             	sub    esp,0x10
30000b2d:	e8 7f 21 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000b32:	05 2e 3b 00 00       	add    eax,0x3b2e
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:101
    SLEEP_SECONDS(__seconds)
30000b37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000b3a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
30000b3d:	b8 70 01 00 00       	mov    eax,0x170
30000b42:	bb 00 00 00 00       	mov    ebx,0x0
30000b47:	b9 00 00 00 00       	mov    ecx,0x0
30000b4c:	ba 00 00 00 00       	mov    edx,0x0
30000b51:	be 00 00 00 00       	mov    esi,0x0
30000b56:	e8 fc ff ff ff       	call   30000b57 <sleep+0x32>
30000b5b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
30000b5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000b61:	6b d0 64             	imul   edx,eax,0x64
30000b64:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000b67:	01 d0                	add    eax,edx
30000b69:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
30000b6c:	b8 66 01 00 00       	mov    eax,0x166
30000b71:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
30000b74:	b9 00 00 00 00       	mov    ecx,0x0
30000b79:	ba 00 00 00 00       	mov    edx,0x0
30000b7e:	be 00 00 00 00       	mov    esi,0x0
30000b83:	e8 fc ff ff ff       	call   30000b84 <sleep+0x5f>
30000b88:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:102
    return 0;
30000b8b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:103
}
30000b90:	83 c4 10             	add    esp,0x10
30000b93:	5b                   	pop    ebx
30000b94:	5e                   	pop    esi
30000b95:	5d                   	pop    ebp
30000b96:	c3                   	ret    

30000b97 <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:106

void stop()
{
30000b97:	55                   	push   ebp
30000b98:	89 e5                	mov    ebp,esp
30000b9a:	e8 12 21 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000b9f:	05 c1 3a 00 00       	add    eax,0x3ac1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:107
    do_syscall0(SYSCALL_STOP);
30000ba4:	68 68 01 00 00       	push   0x168
30000ba9:	e8 c6 fd ff ff       	call   30000974 <do_syscall0>
30000bae:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:108
}
30000bb1:	90                   	nop
30000bb2:	c9                   	leave  
30000bb3:	c3                   	ret    

30000bb4 <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:111

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
30000bb4:	55                   	push   ebp
30000bb5:	89 e5                	mov    ebp,esp
30000bb7:	e8 f5 20 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000bbc:	05 a4 3a 00 00       	add    eax,0x3aa4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:112
    do_syscall3(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
30000bc1:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000bc4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000bc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000bca:	51                   	push   ecx
30000bcb:	52                   	push   edx
30000bcc:	50                   	push   eax
30000bcd:	68 67 01 00 00       	push   0x167
30000bd2:	e8 e3 fc ff ff       	call   300008ba <do_syscall3>
30000bd7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:113
}
30000bda:	90                   	nop
30000bdb:	c9                   	leave  
30000bdc:	c3                   	ret    

30000bdd <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:116

VISIBLE int exec(char* path)
{
30000bdd:	55                   	push   ebp
30000bde:	89 e5                	mov    ebp,esp
30000be0:	53                   	push   ebx
30000be1:	83 ec 24             	sub    esp,0x24
30000be4:	e8 07 21 00 00       	call   30002cf0 <__x86.get_pc_thunk.bx>
30000be9:	81 c3 77 3a 00 00    	add    ebx,0x3a77
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:117
    int pid=0, argc=0;
30000bef:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
30000bf6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:119
    char** argv;
    char* spacePtr=path, *lastSpacePtr=path;
30000bfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000c00:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
30000c03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000c06:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:121
    char* program;
    program=mallocI(512);
30000c09:	83 ec 0c             	sub    esp,0xc
30000c0c:	68 00 02 00 00       	push   0x200
30000c11:	e8 b6 03 00 00       	call   30000fcc <mallocI>
30000c16:	83 c4 10             	add    esp,0x10
30000c19:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:124
    do
    {
        spacePtr=strstrI(spacePtr," ");
30000c1c:	83 ec 08             	sub    esp,0x8
30000c1f:	8d 83 96 fb ff ff    	lea    eax,[ebx-0x46a]
30000c25:	50                   	push   eax
30000c26:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30000c29:	e8 c6 13 00 00       	call   30001ff4 <strstrI>
30000c2e:	83 c4 10             	add    esp,0x10
30000c31:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:125
        if (argc==0)
30000c34:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
30000c38:	75 44                	jne    30000c7e <exec+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:127
        {
            if (spacePtr==0)
30000c3a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000c3e:	75 22                	jne    30000c62 <exec+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:128
                strncpyI(program, path, strlenI(path));
30000c40:	83 ec 0c             	sub    esp,0xc
30000c43:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000c46:	e8 32 0e 00 00       	call   30001a7d <strlenI>
30000c4b:	83 c4 10             	add    esp,0x10
30000c4e:	83 ec 04             	sub    esp,0x4
30000c51:	50                   	push   eax
30000c52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000c55:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
30000c58:	e8 23 0f 00 00       	call   30001b80 <strncpyI>
30000c5d:	83 c4 10             	add    esp,0x10
30000c60:	eb 1c                	jmp    30000c7e <exec+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:130
            else
                strncpyI(program, path, spacePtr-path);
30000c62:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000c65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000c68:	29 c2                	sub    edx,eax
30000c6a:	89 d0                	mov    eax,edx
30000c6c:	83 ec 04             	sub    esp,0x4
30000c6f:	50                   	push   eax
30000c70:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000c73:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
30000c76:	e8 05 0f 00 00       	call   30001b80 <strncpyI>
30000c7b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:132
        }
        argc++;
30000c7e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:134
            
    } while (spacePtr++);
30000c82:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000c85:	8d 50 01             	lea    edx,[eax+0x1]
30000c88:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
30000c8b:	85 c0                	test   eax,eax
30000c8d:	75 8d                	jne    30000c1c <exec+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:136
    
    argv=mallocI((argc*50)+(argc*4));
30000c8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000c92:	6b c0 36             	imul   eax,eax,0x36
30000c95:	83 ec 0c             	sub    esp,0xc
30000c98:	50                   	push   eax
30000c99:	e8 2e 03 00 00       	call   30000fcc <mallocI>
30000c9e:	83 c4 10             	add    esp,0x10
30000ca1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:137
    int argvPtr=4*argc;
30000ca4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000ca7:	c1 e0 02             	shl    eax,0x2
30000caa:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:138
    spacePtr=path;
30000cad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000cb0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:139
    for (int cnt=0;cnt<argc; cnt++)
30000cb3:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
30000cba:	e9 c8 00 00 00       	jmp    30000d87 <exec+0x1aa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:141
    {
        argv[cnt]=(char*)argv+argvPtr;
30000cbf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000cc2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30000cc9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000ccc:	01 d0                	add    eax,edx
30000cce:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
30000cd1:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
30000cd4:	01 ca                	add    edx,ecx
30000cd6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:142
        spacePtr=strstrI(spacePtr," ");
30000cd8:	83 ec 08             	sub    esp,0x8
30000cdb:	8d 83 96 fb ff ff    	lea    eax,[ebx-0x46a]
30000ce1:	50                   	push   eax
30000ce2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30000ce5:	e8 0a 13 00 00       	call   30001ff4 <strstrI>
30000cea:	83 c4 10             	add    esp,0x10
30000ced:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:143
        if (spacePtr)
30000cf0:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000cf4:	74 2f                	je     30000d25 <exec+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:144
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
30000cf6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000cf9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30000cfc:	29 c2                	sub    edx,eax
30000cfe:	89 d0                	mov    eax,edx
30000d00:	89 c1                	mov    ecx,eax
30000d02:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000d05:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30000d0c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000d0f:	01 d0                	add    eax,edx
30000d11:	8b 00                	mov    eax,DWORD PTR [eax]
30000d13:	83 ec 04             	sub    esp,0x4
30000d16:	51                   	push   ecx
30000d17:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
30000d1a:	50                   	push   eax
30000d1b:	e8 60 0e 00 00       	call   30001b80 <strncpyI>
30000d20:	83 c4 10             	add    esp,0x10
30000d23:	eb 31                	jmp    30000d56 <exec+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:146
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
30000d25:	83 ec 0c             	sub    esp,0xc
30000d28:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
30000d2b:	e8 4d 0d 00 00       	call   30001a7d <strlenI>
30000d30:	83 c4 10             	add    esp,0x10
30000d33:	89 c2                	mov    edx,eax
30000d35:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000d38:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
30000d3f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000d42:	01 c8                	add    eax,ecx
30000d44:	8b 00                	mov    eax,DWORD PTR [eax]
30000d46:	83 ec 04             	sub    esp,0x4
30000d49:	52                   	push   edx
30000d4a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
30000d4d:	50                   	push   eax
30000d4e:	e8 2d 0e 00 00       	call   30001b80 <strncpyI>
30000d53:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:147 (discriminator 2)
        strtrimI(argv[cnt]);
30000d56:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000d59:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30000d60:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000d63:	01 d0                	add    eax,edx
30000d65:	8b 00                	mov    eax,DWORD PTR [eax]
30000d67:	83 ec 0c             	sub    esp,0xc
30000d6a:	50                   	push   eax
30000d6b:	e8 cc 11 00 00       	call   30001f3c <strtrimI>
30000d70:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:148 (discriminator 2)
        lastSpacePtr=spacePtr++;
30000d73:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000d76:	8d 50 01             	lea    edx,[eax+0x1]
30000d79:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
30000d7c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:149 (discriminator 2)
        argvPtr+=50;
30000d7f:	83 45 e8 32          	add    DWORD PTR [ebp-0x18],0x32
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:139 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((argc*50)+(argc*4));
    int argvPtr=4*argc;
    spacePtr=path;
    for (int cnt=0;cnt<argc; cnt++)
30000d83:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:139 (discriminator 1)
30000d87:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000d8a:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
30000d8d:	0f 8c 2c ff ff ff    	jl     30000cbf <exec+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:153
        lastSpacePtr=spacePtr++;
        argvPtr+=50;
    }
    //Using the syscall is breaking the stack
//    SYSCALL3(SYSCALL_EXEC,path,argc,argv);
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
30000d93:	83 ec 04             	sub    esp,0x4
30000d96:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000d99:	8d 83 98 fb ff ff    	lea    eax,[ebx-0x468]
30000d9f:	50                   	push   eax
30000da0:	68 00 00 00 02       	push   0x2000000
30000da5:	e8 44 fd ff ff       	call   30000aee <printdI>
30000daa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:154
    __asm__("push ds\nint 0x80\npop ds\n"
30000dad:	b8 59 00 00 00       	mov    eax,0x59
30000db2:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
30000db5:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30000db8:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
30000dbb:	1e                   	push   ds
30000dbc:	cd 80                	int    0x80
30000dbe:	1f                   	pop    ds
30000dbf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:157
            :"=a" (pid)
            :"a" (0x59),"b" (program),"c" (argc),"d" (argv));
    return pid;
30000dc2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:160
    freeI(argv);
    freeI(program);
}
30000dc5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000dc8:	c9                   	leave  
30000dc9:	c3                   	ret    

30000dca <execa>:
execa():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:163

VISIBLE int execa(char* path, int argc, char** argv)
{
30000dca:	55                   	push   ebp
30000dcb:	89 e5                	mov    ebp,esp
30000dcd:	53                   	push   ebx
30000dce:	83 ec 10             	sub    esp,0x10
30000dd1:	e8 db 1e 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000dd6:	05 8a 38 00 00       	add    eax,0x388a
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:164
    int pid=0;
30000ddb:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:167
    //Using the syscall is breaking the stack
//    SYSCALL3(SYSCALL_EXEC,path,argc,argv);
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
30000de2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000de5:	8d 80 98 fb ff ff    	lea    eax,[eax-0x468]
30000deb:	50                   	push   eax
30000dec:	68 00 00 00 02       	push   0x2000000
30000df1:	e8 f8 fc ff ff       	call   30000aee <printdI>
30000df6:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:168
    __asm__("push ds\nint 0x80\npop ds\n"
30000df9:	b8 59 00 00 00       	mov    eax,0x59
30000dfe:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
30000e01:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
30000e04:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
30000e07:	1e                   	push   ds
30000e08:	cd 80                	int    0x80
30000e0a:	1f                   	pop    ds
30000e0b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:171
            :"=a" (pid)
            :"a" (0x59),"b" (path),"c" (argc),"d" (argv));
    return pid;
30000e0e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:172
}
30000e11:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000e14:	c9                   	leave  
30000e15:	c3                   	ret    

30000e16 <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:175

VISIBLE int waitpid(uint32_t pid)
{
30000e16:	55                   	push   ebp
30000e17:	89 e5                	mov    ebp,esp
30000e19:	e8 93 1e 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000e1e:	05 42 38 00 00       	add    eax,0x3842
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:176
    return do_syscall1(SYSCALL_WAITFORPID,pid);
30000e23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000e26:	6a 61                	push   0x61
30000e28:	e8 07 fb ff ff       	call   30000934 <do_syscall1>
30000e2d:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:177
}
30000e30:	c9                   	leave  
30000e31:	c3                   	ret    

30000e32 <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:180

VISIBLE struct tm* gettime()
{
30000e32:	55                   	push   ebp
30000e33:	89 e5                	mov    ebp,esp
30000e35:	57                   	push   edi
30000e36:	56                   	push   esi
30000e37:	53                   	push   ebx
30000e38:	83 ec 3c             	sub    esp,0x3c
30000e3b:	e8 b4 1e 00 00       	call   30002cf4 <__x86.get_pc_thunk.di>
30000e40:	81 c7 20 38 00 00    	add    edi,0x3820
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:181
    uint32_t ticks=0;
30000e46:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:184
    struct tm theTime;
    
    GET_TICKS(ticks);
30000e4d:	b8 70 01 00 00       	mov    eax,0x170
30000e52:	bb 00 00 00 00       	mov    ebx,0x0
30000e57:	b9 00 00 00 00       	mov    ecx,0x0
30000e5c:	ba 00 00 00 00       	mov    edx,0x0
30000e61:	be 00 00 00 00       	mov    esi,0x0
30000e66:	e8 fc ff ff ff       	call   30000e67 <gettime+0x35>
30000e6b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:185
    return gmtime_r((time_t*)&ticks,&theTime);
30000e6e:	83 ec 08             	sub    esp,0x8
30000e71:	8d 45 b8             	lea    eax,[ebp-0x48]
30000e74:	50                   	push   eax
30000e75:	8d 45 e4             	lea    eax,[ebp-0x1c]
30000e78:	50                   	push   eax
30000e79:	89 fb                	mov    ebx,edi
30000e7b:	e8 60 1e 00 00       	call   30002ce0 <__x86.get_pc_thunk.ax+0x2f>
30000e80:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:186
}
30000e83:	8d 65 f4             	lea    esp,[ebp-0xc]
30000e86:	5b                   	pop    ebx
30000e87:	5e                   	pop    esi
30000e88:	5f                   	pop    edi
30000e89:	5d                   	pop    ebp
30000e8a:	c3                   	ret    

30000e8b <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:189

VISIBLE char* getcwd(char* buf, size_t size)
{
30000e8b:	55                   	push   ebp
30000e8c:	89 e5                	mov    ebp,esp
30000e8e:	e8 1e 1e 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000e93:	05 cd 37 00 00       	add    eax,0x37cd
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:190
    return (char*)do_syscall2(SYSCALL_GETCWD,(uint32_t)buf,size);
30000e98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000e9b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000e9e:	50                   	push   eax
30000e9f:	6a 4f                	push   0x4f
30000ea1:	e8 50 fa ff ff       	call   300008f6 <do_syscall2>
30000ea6:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:191
}
30000ea9:	c9                   	leave  
30000eaa:	c3                   	ret    
30000eab:	90                   	nop

30000eac <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:13
#include "libChrisOS.h"

#define HEAP_GET_NEXT(s,t) {t=(uint8_t*)s+s->len+sizeof(heaprec_t);}
#define HEAP_CURR(s,t) {t=((heaprec_t*)s)-1;}
void initmalloc()
{
30000eac:	55                   	push   ebp
30000ead:	89 e5                	mov    ebp,esp
30000eaf:	53                   	push   ebx
30000eb0:	83 ec 04             	sub    esp,0x4
30000eb3:	e8 38 1e 00 00       	call   30002cf0 <__x86.get_pc_thunk.bx>
30000eb8:	81 c3 a8 37 00 00    	add    ebx,0x37a8
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:14
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
30000ebe:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30000ec4:	8b 00                	mov    eax,DWORD PTR [eax]
30000ec6:	50                   	push   eax
30000ec7:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30000ecd:	50                   	push   eax
30000ece:	8d 83 ac fb ff ff    	lea    eax,[ebx-0x454]
30000ed4:	50                   	push   eax
30000ed5:	68 00 00 00 01       	push   0x1000000
30000eda:	e8 0f fc ff ff       	call   30000aee <printdI>
30000edf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:15
    heapBase=0;
30000ee2:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30000ee8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:16
    heapCurr=0;
30000eee:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30000ef4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:17
    heapEnd=0;
30000efa:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30000f00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:18
}
30000f06:	90                   	nop
30000f07:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000f0a:	c9                   	leave  
30000f0b:	c3                   	ret    

30000f0c <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:21

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
30000f0c:	55                   	push   ebp
30000f0d:	89 e5                	mov    ebp,esp
30000f0f:	83 ec 10             	sub    esp,0x10
30000f12:	e8 9a 1d 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000f17:	05 49 37 00 00       	add    eax,0x3749
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:24
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
30000f1c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000f1f:	83 c2 20             	add    edx,0x20
30000f22:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:26
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
30000f25:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
30000f2b:	8b 0a                	mov    ecx,DWORD PTR [edx]
30000f2d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30000f30:	01 d1                	add    ecx,edx
30000f32:	8b 90 ec ff ff ff    	mov    edx,DWORD PTR [eax-0x14]
30000f38:	8b 12                	mov    edx,DWORD PTR [edx]
30000f3a:	39 d1                	cmp    ecx,edx
30000f3c:	76 4e                	jbe    30000f8c <newHeapRequiredToFulfillRequest+0x80>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:29
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
30000f3e:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
30000f44:	8b 12                	mov    edx,DWORD PTR [edx]
30000f46:	8b 80 ec ff ff ff    	mov    eax,DWORD PTR [eax-0x14]
30000f4c:	8b 00                	mov    eax,DWORD PTR [eax]
30000f4e:	29 c2                	sub    edx,eax
30000f50:	89 d0                	mov    eax,edx
30000f52:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:30
        if (newSize== 0 || newSize%PAGE_SIZE)
30000f55:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
30000f59:	74 0c                	je     30000f67 <newHeapRequiredToFulfillRequest+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:30 (discriminator 1)
30000f5b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000f5e:	25 ff 0f 00 00       	and    eax,0xfff
30000f63:	85 c0                	test   eax,eax
30000f65:	74 10                	je     30000f77 <newHeapRequiredToFulfillRequest+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:32
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
30000f67:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000f6a:	25 00 f0 ff ff       	and    eax,0xfffff000
30000f6f:	05 00 10 00 00       	add    eax,0x1000
30000f74:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:35
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < ALLOC_REQUEST_SIZE)
30000f77:	81 7d fc ff 1f 03 00 	cmp    DWORD PTR [ebp-0x4],0x31fff
30000f7e:	77 07                	ja     30000f87 <newHeapRequiredToFulfillRequest+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:36
            return ALLOC_REQUEST_SIZE;
30000f80:	b8 00 20 03 00       	mov    eax,0x32000
30000f85:	eb 0a                	jmp    30000f91 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:38
        else
            return newSize;
30000f87:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000f8a:	eb 05                	jmp    30000f91 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:41
    }
    else
        return 0;
30000f8c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:42
}
30000f91:	c9                   	leave  
30000f92:	c3                   	ret    

30000f93 <freeI>:
freeI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:45

void freeI(void* fpointer)
{
30000f93:	55                   	push   ebp
30000f94:	89 e5                	mov    ebp,esp
30000f96:	83 ec 10             	sub    esp,0x10
30000f99:	e8 13 1d 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30000f9e:	05 c2 36 00 00       	add    eax,0x36c2
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:48
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
30000fa3:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000fa7:	74 20                	je     30000fc9 <freeI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:50
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
30000fa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000fac:	83 e8 10             	sub    eax,0x10
30000faf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:53
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
30000fb2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000fb5:	8b 00                	mov    eax,DWORD PTR [eax]
30000fb7:	3d d0 00 0f b0       	cmp    eax,0xb00f00d0
30000fbc:	74 02                	je     30000fc0 <freeI+0x2d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:57 (discriminator 2)
    {
        //print("malloc: marker not found error!!!\n");
gotoHere:
        goto gotoHere;
30000fbe:	eb fe                	jmp    30000fbe <freeI+0x2b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:59
    }
    mp->inUse=false;
30000fc0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000fc3:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
30000fc7:	eb 01                	jmp    30000fca <freeI+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:49
void freeI(void* fpointer)
{
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
30000fc9:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:60
        //print("malloc: marker not found error!!!\n");
gotoHere:
        goto gotoHere;
    }
    mp->inUse=false;
}
30000fca:	c9                   	leave  
30000fcb:	c3                   	ret    

30000fcc <mallocI>:
mallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:63

void*  mallocI(size_t size)
{
30000fcc:	55                   	push   ebp
30000fcd:	89 e5                	mov    ebp,esp
30000fcf:	53                   	push   ebx
30000fd0:	83 ec 24             	sub    esp,0x24
30000fd3:	e8 18 1d 00 00       	call   30002cf0 <__x86.get_pc_thunk.bx>
30000fd8:	81 c3 88 36 00 00    	add    ebx,0x3688
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:70

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr;
    uint8_t* heapPtrNext;
    printdI(DEBUG_MALLOC,"malloc(0x%08X)\n",size);
30000fde:	83 ec 04             	sub    esp,0x4
30000fe1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000fe4:	8d 83 cf fb ff ff    	lea    eax,[ebx-0x431]
30000fea:	50                   	push   eax
30000feb:	68 00 00 00 01       	push   0x1000000
30000ff0:	e8 f9 fa ff ff       	call   30000aee <printdI>
30000ff5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:71
    needed = newHeapRequiredToFulfillRequest(size);
30000ff8:	83 ec 0c             	sub    esp,0xc
30000ffb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000ffe:	e8 09 ff ff ff       	call   30000f0c <newHeapRequiredToFulfillRequest>
30001003:	83 c4 10             	add    esp,0x10
30001006:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:72
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
30001009:	83 ec 04             	sub    esp,0x4
3000100c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
3000100f:	8d 83 df fb ff ff    	lea    eax,[ebx-0x421]
30001015:	50                   	push   eax
30001016:	68 00 00 00 01       	push   0x1000000
3000101b:	e8 ce fa ff ff       	call   30000aee <printdI>
30001020:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:73
    if (needed!=0)      //New heap required
30001023:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
30001027:	0f 84 ae 00 00 00    	je     300010db <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:75
    {
        allocatedPtr = do_syscall1(SYSCALL_ALLOC, needed);
3000102d:	83 ec 08             	sub    esp,0x8
30001030:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
30001033:	68 65 01 00 00       	push   0x165
30001038:	e8 f7 f8 ff ff       	call   30000934 <do_syscall1>
3000103d:	83 c4 10             	add    esp,0x10
30001040:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:77
        //This is needed to keep in sync with what the kernel thinks
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
30001043:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30001049:	8b 00                	mov    eax,DWORD PTR [eax]
3000104b:	83 ec 04             	sub    esp,0x4
3000104e:	50                   	push   eax
3000104f:	8d 83 fb fb ff ff    	lea    eax,[ebx-0x405]
30001055:	50                   	push   eax
30001056:	68 00 00 00 01       	push   0x1000000
3000105b:	e8 8e fa ff ff       	call   30000aee <printdI>
30001060:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:78
        heapEnd=allocatedPtr+needed;
30001063:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30001066:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001069:	01 c2                	add    edx,eax
3000106b:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30001071:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:79
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
30001073:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30001079:	8b 00                	mov    eax,DWORD PTR [eax]
3000107b:	83 ec 0c             	sub    esp,0xc
3000107e:	50                   	push   eax
3000107f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30001082:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
30001085:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
3000108b:	50                   	push   eax
3000108c:	68 00 00 00 01       	push   0x1000000
30001091:	e8 58 fa ff ff       	call   30000aee <printdI>
30001096:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:80
        if (heapBase==0)    //Hasn't been initialized yet!
30001099:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
3000109f:	8b 00                	mov    eax,DWORD PTR [eax]
300010a1:	85 c0                	test   eax,eax
300010a3:	75 36                	jne    300010db <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:82
        {
            heapCurr=allocatedPtr;
300010a5:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
300010ab:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300010ae:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:83
            heapBase=allocatedPtr;
300010b0:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
300010b6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300010b9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:84
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
300010bb:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
300010c1:	8b 00                	mov    eax,DWORD PTR [eax]
300010c3:	83 ec 04             	sub    esp,0x4
300010c6:	50                   	push   eax
300010c7:	8d 83 58 fc ff ff    	lea    eax,[ebx-0x3a8]
300010cd:	50                   	push   eax
300010ce:	68 00 00 00 01       	push   0x1000000
300010d3:	e8 16 fa ff ff       	call   30000aee <printdI>
300010d8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:87
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
300010db:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
300010e1:	8b 00                	mov    eax,DWORD PTR [eax]
300010e3:	83 ec 04             	sub    esp,0x4
300010e6:	50                   	push   eax
300010e7:	8d 83 94 fc ff ff    	lea    eax,[ebx-0x36c]
300010ed:	50                   	push   eax
300010ee:	68 00 00 00 01       	push   0x1000000
300010f3:	e8 f6 f9 ff ff       	call   30000aee <printdI>
300010f8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:88
    heapPtr = (heaprec_t*)heapCurr;
300010fb:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30001101:	8b 00                	mov    eax,DWORD PTR [eax]
30001103:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
    heapPtr->marker=ALLOC_MARKER_VALUE;
30001106:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001109:	c7 00 d0 00 0f b0    	mov    DWORD PTR [eax],0xb00f00d0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:90
    heapPtr->len=size;
3000110f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001112:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001115:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:91
    heapPtr->inUse=true;
30001118:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
3000111b:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:92
    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08X, sizeof(heaprec_t)=0x%08X\n",heapCurr,sizeof(heaprec_t));
3000111f:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30001125:	8b 00                	mov    eax,DWORD PTR [eax]
30001127:	6a 10                	push   0x10
30001129:	50                   	push   eax
3000112a:	8d 83 bc fc ff ff    	lea    eax,[ebx-0x344]
30001130:	50                   	push   eax
30001131:	68 00 00 00 01       	push   0x1000000
30001136:	e8 b3 f9 ff ff       	call   30000aee <printdI>
3000113b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:93
    retVal=(void*)(heapCurr+sizeof(heaprec_t));
3000113e:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30001144:	8b 00                	mov    eax,DWORD PTR [eax]
30001146:	83 c0 10             	add    eax,0x10
30001149:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:94
    HEAP_GET_NEXT(heapPtr,heapPtrNext);
3000114c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
3000114f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30001152:	8d 50 10             	lea    edx,[eax+0x10]
30001155:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001158:	01 d0                	add    eax,edx
3000115a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:95
    ((heaprec_t*)heapPtrNext)->prev=heapPtr;
3000115d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30001160:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30001163:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:96
    heapCurr+=size+(sizeof(heaprec_t));
30001166:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
3000116c:	8b 10                	mov    edx,DWORD PTR [eax]
3000116e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001171:	01 d0                	add    eax,edx
30001173:	8d 50 10             	lea    edx,[eax+0x10]
30001176:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
3000117c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:97
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
3000117e:	83 ec 04             	sub    esp,0x4
30001181:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
30001184:	8d 83 f4 fc ff ff    	lea    eax,[ebx-0x30c]
3000118a:	50                   	push   eax
3000118b:	68 00 00 00 01       	push   0x1000000
30001190:	e8 59 f9 ff ff       	call   30000aee <printdI>
30001195:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98
    return retVal;
30001198:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:99
}
3000119b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000119e:	c9                   	leave  
3000119f:	c3                   	ret    

300011a0 <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:102

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
300011a0:	55                   	push   ebp
300011a1:	89 e5                	mov    ebp,esp
300011a3:	83 ec 08             	sub    esp,0x8
300011a6:	e8 06 1b 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
300011ab:	05 b5 34 00 00       	add    eax,0x34b5
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:103
    return mallocI(size);
300011b0:	83 ec 0c             	sub    esp,0xc
300011b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300011b6:	e8 11 fe ff ff       	call   30000fcc <mallocI>
300011bb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:104
}
300011be:	c9                   	leave  
300011bf:	c3                   	ret    

300011c0 <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:107

__attribute__((visibility("default"))) void free(void* fpointer)
{
300011c0:	55                   	push   ebp
300011c1:	89 e5                	mov    ebp,esp
300011c3:	e8 e9 1a 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
300011c8:	05 98 34 00 00       	add    eax,0x3498
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:108
    freeI(fpointer);
300011cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300011d0:	e8 be fd ff ff       	call   30000f93 <freeI>
300011d5:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:109
}
300011d8:	90                   	nop
300011d9:	c9                   	leave  
300011da:	c3                   	ret    

300011db <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:112

void malloc_cleanup()
{
300011db:	55                   	push   ebp
300011dc:	89 e5                	mov    ebp,esp
300011de:	53                   	push   ebx
300011df:	83 ec 04             	sub    esp,0x4
300011e2:	e8 ca 1a 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
300011e7:	05 79 34 00 00       	add    eax,0x3479
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:113
    do_syscall1(SYSCALL_FREE, heapBase);
300011ec:	8b 90 f0 ff ff ff    	mov    edx,DWORD PTR [eax-0x10]
300011f2:	8b 12                	mov    edx,DWORD PTR [edx]
300011f4:	83 ec 08             	sub    esp,0x8
300011f7:	52                   	push   edx
300011f8:	68 64 01 00 00       	push   0x164
300011fd:	89 c3                	mov    ebx,eax
300011ff:	e8 30 f7 ff ff       	call   30000934 <do_syscall1>
30001204:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:114
30001207:	90                   	nop
30001208:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000120b:	c9                   	leave  
3000120c:	c3                   	ret    
3000120d:	66 90                	xchg   ax,ax
3000120f:	90                   	nop

30001210 <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:11
 */
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time
VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
30001210:	55                   	push   ebp
30001211:	89 e5                	mov    ebp,esp
30001213:	83 ec 20             	sub    esp,0x20
30001216:	e8 96 1a 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
3000121b:	05 45 34 00 00       	add    eax,0x3445
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:14
    bool dw,dd;
    
    dd=n%4==0;
30001220:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001223:	83 e0 03             	and    eax,0x3
30001226:	85 c0                	test   eax,eax
30001228:	0f 94 c0             	sete   al
3000122b:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    dw=n%2==0;
3000122e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001231:	83 e0 01             	and    eax,0x1
30001234:	85 c0                	test   eax,eax
30001236:	0f 94 c0             	sete   al
30001239:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    if (dd)
3000123c:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
30001240:	74 7d                	je     300012bf <memcpy+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:18
    {
        n /=4;
30001242:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001245:	c1 e8 02             	shr    eax,0x2
30001248:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
        const uint32_t *f = src;
3000124b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000124e:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        uint32_t *t = dest;
30001251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001254:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:22

        if (f < t) {
30001257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000125a:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
3000125d:	73 4b                	jae    300012aa <memcpy+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23
                f += n;
3000125f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001262:	c1 e0 02             	shl    eax,0x2
30001265:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                t += n;
30001268:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000126b:	c1 e0 02             	shl    eax,0x2
3000126e:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                while ( (n)-- > 0)
30001271:	eb 12                	jmp    30001285 <memcpy+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                        *--t = *--f;
30001273:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
30001277:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
3000127b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000127e:	8b 10                	mov    edx,DWORD PTR [eax]
30001280:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001283:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
30001285:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001288:	8d 50 ff             	lea    edx,[eax-0x1]
3000128b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
3000128e:	85 c0                	test   eax,eax
30001290:	75 e1                	jne    30001273 <memcpy+0x63>
30001292:	eb 23                	jmp    300012b7 <memcpy+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
30001294:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001297:	8d 50 04             	lea    edx,[eax+0x4]
3000129a:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
3000129d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
300012a0:	8d 4a 04             	lea    ecx,[edx+0x4]
300012a3:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
300012a6:	8b 12                	mov    edx,DWORD PTR [edx]
300012a8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:28
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
300012aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012ad:	8d 50 ff             	lea    edx,[eax-0x1]
300012b0:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
300012b3:	85 c0                	test   eax,eax
300012b5:	75 dd                	jne    30001294 <memcpy+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
                        *t++ = *f++;
        return dest;
300012b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300012ba:	e9 ea 00 00 00       	jmp    300013a9 <memcpy+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:32
    }
    else if (dw)
300012bf:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
300012c3:	74 79                	je     3000133e <memcpy+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:34
    {
        n /=2;
300012c5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012c8:	d1 e8                	shr    eax,1
300012ca:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
        const uint32_t *f = src;
300012cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300012d0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        uint32_t *t = dest;
300012d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300012d6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:38

        if (f < t) {
300012d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300012dc:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
300012df:	73 4b                	jae    3000132c <memcpy+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39
                f += n;
300012e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012e4:	c1 e0 02             	shl    eax,0x2
300012e7:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                t += n;
300012ea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012ed:	c1 e0 02             	shl    eax,0x2
300012f0:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                while ( (n)-- > 0)
300012f3:	eb 12                	jmp    30001307 <memcpy+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                        *--t = *--f;
300012f5:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
300012f9:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
300012fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001300:	8b 10                	mov    edx,DWORD PTR [eax]
30001302:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001305:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
30001307:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000130a:	8d 50 ff             	lea    edx,[eax-0x1]
3000130d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001310:	85 c0                	test   eax,eax
30001312:	75 e1                	jne    300012f5 <memcpy+0xe5>
30001314:	eb 23                	jmp    30001339 <memcpy+0x129>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
30001316:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001319:	8d 50 04             	lea    edx,[eax+0x4]
3000131c:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
3000131f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30001322:	8d 4a 04             	lea    ecx,[edx+0x4]
30001325:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
30001328:	8b 12                	mov    edx,DWORD PTR [edx]
3000132a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:44
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
3000132c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000132f:	8d 50 ff             	lea    edx,[eax-0x1]
30001332:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001335:	85 c0                	test   eax,eax
30001337:	75 dd                	jne    30001316 <memcpy+0x106>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
                        *t++ = *f++;
        return dest;
30001339:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000133c:	eb 6b                	jmp    300013a9 <memcpy+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:50
    }
    else
    {
        const char *f = src;
3000133e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001341:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
        char *t = dest;
30001344:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001347:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:53

        if (f < t) {
3000134a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
3000134d:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
30001350:	73 47                	jae    30001399 <memcpy+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54
                f += n;
30001352:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001355:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                t += n;
30001358:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000135b:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                while (n-- > 0)
3000135e:	eb 13                	jmp    30001373 <memcpy+0x163>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                        *--t = *--f;
30001360:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
30001364:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
30001368:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
3000136b:	0f b6 10             	movzx  edx,BYTE PTR [eax]
3000136e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
30001371:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
30001373:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001376:	8d 50 ff             	lea    edx,[eax-0x1]
30001379:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
3000137c:	85 c0                	test   eax,eax
3000137e:	75 e0                	jne    30001360 <memcpy+0x150>
30001380:	eb 24                	jmp    300013a6 <memcpy+0x196>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
30001382:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
30001385:	8d 50 01             	lea    edx,[eax+0x1]
30001388:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
3000138b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
3000138e:	8d 4a 01             	lea    ecx,[edx+0x1]
30001391:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
30001394:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001397:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:59
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
30001399:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000139c:	8d 50 ff             	lea    edx,[eax-0x1]
3000139f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
300013a2:	85 c0                	test   eax,eax
300013a4:	75 dc                	jne    30001382 <memcpy+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
                        *t++ = *f++;
        return dest;
300013a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:63
    }
}
300013a9:	c9                   	leave  
300013aa:	c3                   	ret    
300013ab:	90                   	nop

300013ac <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"

VISIBLE void *memset(void *d1, int val, size_t len)
{
300013ac:	55                   	push   ebp
300013ad:	89 e5                	mov    ebp,esp
300013af:	83 ec 20             	sub    esp,0x20
300013b2:	e8 fa 18 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
300013b7:	05 a9 32 00 00       	add    eax,0x32a9
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
300013bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300013bf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
300013c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300013c5:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
300013c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013cb:	c1 e0 10             	shl    eax,0x10
300013ce:	89 c2                	mov    edx,eax
300013d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013d3:	c1 e0 08             	shl    eax,0x8
300013d6:	09 c2                	or     edx,eax
300013d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013db:	09 d0                	or     eax,edx
300013dd:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
300013e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300013e4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
300013e7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013ea:	c1 e0 18             	shl    eax,0x18
300013ed:	89 c2                	mov    edx,eax
300013ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013f2:	c1 e0 10             	shl    eax,0x10
300013f5:	09 c2                	or     edx,eax
300013f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013fa:	c1 e0 08             	shl    eax,0x8
300013fd:	09 d0                	or     eax,edx
300013ff:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
30001402:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
30001405:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001408:	83 e0 03             	and    eax,0x3
3000140b:	85 c0                	test   eax,eax
3000140d:	75 1c                	jne    3000142b <memset+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
3000140f:	eb 0e                	jmp    3000141f <memset+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
30001411:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001414:	8d 50 04             	lea    edx,[eax+0x4]
30001417:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000141a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
3000141d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
3000141f:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
30001423:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001427:	75 e8                	jne    30001411 <memset+0x65>
30001429:	eb 43                	jmp    3000146e <memset+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
3000142b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000142e:	83 e0 01             	and    eax,0x1
30001431:	85 c0                	test   eax,eax
30001433:	75 2c                	jne    30001461 <memset+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
30001435:	eb 10                	jmp    30001447 <memset+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
30001437:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
3000143a:	8d 50 02             	lea    edx,[eax+0x2]
3000143d:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
30001440:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
30001444:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
30001447:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
3000144b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
3000144f:	75 e6                	jne    30001437 <memset+0x8b>
30001451:	eb 1b                	jmp    3000146e <memset+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
30001453:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001456:	8d 50 01             	lea    edx,[eax+0x1]
30001459:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
3000145c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000145f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
30001461:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001464:	8d 50 ff             	lea    edx,[eax-0x1]
30001467:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
3000146a:	85 c0                	test   eax,eax
3000146c:	75 e5                	jne    30001453 <memset+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
        *d++ = val;
    }
    return d1;
3000146e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
30001471:	c9                   	leave  
30001472:	c3                   	ret    

30001473 <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

void *memsetI(void *d1, int val, size_t len)
{
30001473:	55                   	push   ebp
30001474:	89 e5                	mov    ebp,esp
30001476:	83 ec 20             	sub    esp,0x20
30001479:	e8 33 18 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
3000147e:	05 e2 31 00 00       	add    eax,0x31e2
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    uint8_t *d = d1;
30001483:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001486:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
    uint16_t*e = d1;
30001489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000148c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:35
    uint16_t eVal=(val << 16) | (val << 8) | val;
3000148f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001492:	c1 e0 10             	shl    eax,0x10
30001495:	89 c2                	mov    edx,eax
30001497:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000149a:	c1 e0 08             	shl    eax,0x8
3000149d:	09 c2                	or     edx,eax
3000149f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300014a2:	09 d0                	or     eax,edx
300014a4:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:36
    uint32_t*f = d1;
300014a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300014ab:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:37
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
300014ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300014b1:	c1 e0 18             	shl    eax,0x18
300014b4:	89 c2                	mov    edx,eax
300014b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300014b9:	c1 e0 10             	shl    eax,0x10
300014bc:	09 c2                	or     edx,eax
300014be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300014c1:	c1 e0 08             	shl    eax,0x8
300014c4:	09 d0                	or     eax,edx
300014c6:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
300014c9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:39
    
    if ((len%4)==0)
300014cc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300014cf:	83 e0 03             	and    eax,0x3
300014d2:	85 c0                	test   eax,eax
300014d4:	75 1c                	jne    300014f2 <memsetI+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:40
    while (len-=4) {
300014d6:	eb 0e                	jmp    300014e6 <memsetI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:41
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
300014d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300014db:	8d 50 04             	lea    edx,[eax+0x4]
300014de:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300014e1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300014e4:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:40
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
300014e6:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
300014ea:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
300014ee:	75 e8                	jne    300014d8 <memsetI+0x65>
300014f0:	eb 43                	jmp    30001535 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:43
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
300014f2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300014f5:	83 e0 01             	and    eax,0x1
300014f8:	85 c0                	test   eax,eax
300014fa:	75 2c                	jne    30001528 <memsetI+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:44
    while (len-=2) {
300014fc:	eb 10                	jmp    3000150e <memsetI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:45
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
300014fe:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001501:	8d 50 02             	lea    edx,[eax+0x2]
30001504:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
30001507:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
3000150b:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:44
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
3000150e:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
30001512:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001516:	75 e6                	jne    300014fe <memsetI+0x8b>
30001518:	eb 1b                	jmp    30001535 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:49
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
3000151a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000151d:	8d 50 01             	lea    edx,[eax+0x1]
30001520:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001523:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001526:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:48
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
30001528:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000152b:	8d 50 ff             	lea    edx,[eax-0x1]
3000152e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001531:	85 c0                	test   eax,eax
30001533:	75 e5                	jne    3000151a <memsetI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:51
        *d++ = val;
    }
    return d1;
30001535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:52
}
30001538:	c9                   	leave  
30001539:	c3                   	ret    
3000153a:	66 90                	xchg   ax,ax

3000153c <mmap>:
mmap():
/home/yogi/src/os/aproj/libChrisOS/src/mmap.c:10
 */
#include "libChrisOS.h"
#include "types.h"

VISIBLE void* mmap (void *addr,size_t len,int prot,int flags,int fd,off_t offset) //memory map pages either to a file or anonymously
{
3000153c:	55                   	push   ebp
3000153d:	89 e5                	mov    ebp,esp
3000153f:	e8 6d 17 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30001544:	05 1c 31 00 00       	add    eax,0x311c
/home/yogi/src/os/aproj/libChrisOS/src/mmap.c:12
    
}
30001549:	90                   	nop
3000154a:	5d                   	pop    ebp
3000154b:	c3                   	ret    

3000154c <readConsole>:
readConsole():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:19
file_operations_t fops;
inode_t console_node={.i_dev=1,.i_mode=0};
file_t console_file;

size_t readConsole (struct file * fptr, char *buffer, size_t size, uint64_t* whatever) 
{
3000154c:	55                   	push   ebp
3000154d:	89 e5                	mov    ebp,esp
3000154f:	53                   	push   ebx
30001550:	83 ec 04             	sub    esp,0x4
30001553:	e8 59 17 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30001558:	05 08 31 00 00       	add    eax,0x3108
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:20
    return gets(buffer,size,1);
3000155d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
30001560:	83 ec 04             	sub    esp,0x4
30001563:	6a 01                	push   0x1
30001565:	52                   	push   edx
30001566:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001569:	89 c3                	mov    ebx,eax
3000156b:	e8 60 17 00 00       	call   30002cd0 <__x86.get_pc_thunk.ax+0x1f>
30001570:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:21
}
30001573:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001576:	c9                   	leave  
30001577:	c3                   	ret    

30001578 <writeConsole>:
writeConsole():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:24

size_t writeConsole(struct file * fptr, const char *buffer, size_t size, uint64_t *whatever)
{
30001578:	55                   	push   ebp
30001579:	89 e5                	mov    ebp,esp
3000157b:	53                   	push   ebx
3000157c:	83 ec 04             	sub    esp,0x4
3000157f:	e8 2d 17 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30001584:	05 dc 30 00 00       	add    eax,0x30dc
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:25
    return printI(buffer);
30001589:	83 ec 0c             	sub    esp,0xc
3000158c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000158f:	89 c3                	mov    ebx,eax
30001591:	e8 24 f5 ff ff       	call   30000aba <printI>
30001596:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:26
}
30001599:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000159c:	c9                   	leave  
3000159d:	c3                   	ret    

3000159e <moveTo>:
moveTo():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:29

VISIBLE void moveTo(int row, int col)
{
3000159e:	55                   	push   ebp
3000159f:	89 e5                	mov    ebp,esp
300015a1:	53                   	push   ebx
300015a2:	83 ec 24             	sub    esp,0x24
300015a5:	e8 46 17 00 00       	call   30002cf0 <__x86.get_pc_thunk.bx>
300015aa:	81 c3 b6 30 00 00    	add    ebx,0x30b6
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:32
    char buff[10];
    char rowString[3], colString[3];
    int buffPtr=0;
300015b0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:35
    

    memsetI(buff,0,10);
300015b7:	83 ec 04             	sub    esp,0x4
300015ba:	6a 0a                	push   0xa
300015bc:	6a 00                	push   0x0
300015be:	8d 45 de             	lea    eax,[ebp-0x22]
300015c1:	50                   	push   eax
300015c2:	e8 ac fe ff ff       	call   30001473 <memsetI>
300015c7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:37
    //Convert row and column values to strings
    itoaI(row, rowString);
300015ca:	83 ec 08             	sub    esp,0x8
300015cd:	8d 45 db             	lea    eax,[ebp-0x25]
300015d0:	50                   	push   eax
300015d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300015d4:	e8 0d ed ff ff       	call   300002e6 <itoaI>
300015d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:38
    itoaI(col, colString);
300015dc:	83 ec 08             	sub    esp,0x8
300015df:	8d 45 d8             	lea    eax,[ebp-0x28]
300015e2:	50                   	push   eax
300015e3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300015e6:	e8 fb ec ff ff       	call   300002e6 <itoaI>
300015eb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:41
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
300015ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300015f1:	8d 50 01             	lea    edx,[eax+0x1]
300015f4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300015f7:	c6 44 05 de 1b       	mov    BYTE PTR [ebp+eax*1-0x22],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:42
    buff[buffPtr++] = '[';
300015fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300015ff:	8d 50 01             	lea    edx,[eax+0x1]
30001602:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001605:	c6 44 05 de 5b       	mov    BYTE PTR [ebp+eax*1-0x22],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:45

    
    for (int cnt=0;cnt<3;cnt++)
3000160a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
30001611:	eb 2b                	jmp    3000163e <moveTo+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:46
        if (rowString[cnt]!=0)
30001613:	8d 55 db             	lea    edx,[ebp-0x25]
30001616:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001619:	01 d0                	add    eax,edx
3000161b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000161e:	84 c0                	test   al,al
30001620:	74 24                	je     30001646 <moveTo+0xa8>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:47
            buff[buffPtr++]=rowString[cnt];
30001622:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001625:	8d 50 01             	lea    edx,[eax+0x1]
30001628:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000162b:	8d 4d db             	lea    ecx,[ebp-0x25]
3000162e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30001631:	01 ca                	add    edx,ecx
30001633:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001636:	88 54 05 de          	mov    BYTE PTR [ebp+eax*1-0x22],dl
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:45
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
    buff[buffPtr++] = '[';

    
    for (int cnt=0;cnt<3;cnt++)
3000163a:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:45 (discriminator 1)
3000163e:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
30001642:	7e cf                	jle    30001613 <moveTo+0x75>
30001644:	eb 01                	jmp    30001647 <moveTo+0xa9>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:49
        if (rowString[cnt]!=0)
            buff[buffPtr++]=rowString[cnt];
        else
            break;
30001646:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:50
    buff[buffPtr++] = ';';
30001647:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000164a:	8d 50 01             	lea    edx,[eax+0x1]
3000164d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001650:	c6 44 05 de 3b       	mov    BYTE PTR [ebp+eax*1-0x22],0x3b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:51
    for (int cnt=0;cnt<3;cnt++)
30001655:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
3000165c:	eb 2b                	jmp    30001689 <moveTo+0xeb>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:52
        if (colString[cnt]!=0)
3000165e:	8d 55 d8             	lea    edx,[ebp-0x28]
30001661:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001664:	01 d0                	add    eax,edx
30001666:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001669:	84 c0                	test   al,al
3000166b:	74 24                	je     30001691 <moveTo+0xf3>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:53
            buff[buffPtr++]=colString[cnt];
3000166d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001670:	8d 50 01             	lea    edx,[eax+0x1]
30001673:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001676:	8d 4d d8             	lea    ecx,[ebp-0x28]
30001679:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
3000167c:	01 ca                	add    edx,ecx
3000167e:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001681:	88 54 05 de          	mov    BYTE PTR [ebp+eax*1-0x22],dl
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:51
        if (rowString[cnt]!=0)
            buff[buffPtr++]=rowString[cnt];
        else
            break;
    buff[buffPtr++] = ';';
    for (int cnt=0;cnt<3;cnt++)
30001685:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:51 (discriminator 1)
30001689:	83 7d ec 02          	cmp    DWORD PTR [ebp-0x14],0x2
3000168d:	7e cf                	jle    3000165e <moveTo+0xc0>
3000168f:	eb 01                	jmp    30001692 <moveTo+0xf4>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:55
        if (colString[cnt]!=0)
            buff[buffPtr++]=colString[cnt];
        else
            break;
30001691:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:56
    buff[buffPtr++] = 'H';
30001692:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001695:	8d 50 01             	lea    edx,[eax+0x1]
30001698:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000169b:	c6 44 05 de 48       	mov    BYTE PTR [ebp+eax*1-0x22],0x48
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:57
    for (int cnt=buffPtr;cnt<10;cnt++)
300016a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300016a3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
300016a6:	eb 12                	jmp    300016ba <moveTo+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:58 (discriminator 3)
        buff[buffPtr++]=0;
300016a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300016ab:	8d 50 01             	lea    edx,[eax+0x1]
300016ae:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300016b1:	c6 44 05 de 00       	mov    BYTE PTR [ebp+eax*1-0x22],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:57 (discriminator 3)
        if (colString[cnt]!=0)
            buff[buffPtr++]=colString[cnt];
        else
            break;
    buff[buffPtr++] = 'H';
    for (int cnt=buffPtr;cnt<10;cnt++)
300016b6:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:57 (discriminator 1)
300016ba:	83 7d e8 09          	cmp    DWORD PTR [ebp-0x18],0x9
300016be:	7e e8                	jle    300016a8 <moveTo+0x10a>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:60
        buff[buffPtr++]=0;
    
    printI(buff);
300016c0:	83 ec 0c             	sub    esp,0xc
300016c3:	8d 45 de             	lea    eax,[ebp-0x22]
300016c6:	50                   	push   eax
300016c7:	e8 ee f3 ff ff       	call   30000aba <printI>
300016cc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:62
    
    return;
300016cf:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:63
}
300016d0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300016d3:	c9                   	leave  
300016d4:	c3                   	ret    

300016d5 <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:67

//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
300016d5:	55                   	push   ebp
300016d6:	89 e5                	mov    ebp,esp
300016d8:	53                   	push   ebx
300016d9:	83 ec 14             	sub    esp,0x14
300016dc:	e8 0f 16 00 00       	call   30002cf0 <__x86.get_pc_thunk.bx>
300016e1:	81 c3 7f 2f 00 00    	add    ebx,0x2f7f
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:69
    char buff[5];
    int buffPtr=0;
300016e7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:71

    memsetI(buff,0,10);
300016ee:	83 ec 04             	sub    esp,0x4
300016f1:	6a 0a                	push   0xa
300016f3:	6a 00                	push   0x0
300016f5:	8d 45 ef             	lea    eax,[ebp-0x11]
300016f8:	50                   	push   eax
300016f9:	e8 75 fd ff ff       	call   30001473 <memsetI>
300016fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:74
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
30001701:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001704:	8d 50 01             	lea    edx,[eax+0x1]
30001707:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000170a:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:75
    buff[buffPtr++] = '[';
3000170f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001712:	8d 50 01             	lea    edx,[eax+0x1]
30001715:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001718:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:76
    buff[buffPtr++] = '0';
3000171d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001720:	8d 50 01             	lea    edx,[eax+0x1]
30001723:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001726:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:77
    buff[buffPtr++] = 'K';
3000172b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000172e:	8d 50 01             	lea    edx,[eax+0x1]
30001731:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001734:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:78
    buff[buffPtr] = '\0';
30001739:	8d 55 ef             	lea    edx,[ebp-0x11]
3000173c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000173f:	01 d0                	add    eax,edx
30001741:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:79
    printI(buff);
30001744:	83 ec 0c             	sub    esp,0xc
30001747:	8d 45 ef             	lea    eax,[ebp-0x11]
3000174a:	50                   	push   eax
3000174b:	e8 6a f3 ff ff       	call   30000aba <printI>
30001750:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:81
    
    return;
30001753:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:82
}
30001754:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001757:	c9                   	leave  
30001758:	c3                   	ret    

30001759 <ioInit>:
ioInit():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:85

void ioInit()
{
30001759:	55                   	push   ebp
3000175a:	89 e5                	mov    ebp,esp
3000175c:	e8 50 15 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30001761:	05 ff 2e 00 00       	add    eax,0x2eff
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:86
    console_file.f_inode=&console_node;
30001766:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
3000176c:	8d 88 80 fe ff ff    	lea    ecx,[eax-0x180]
30001772:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:87
    fops.read=readConsole;
30001775:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
3000177b:	8d 88 ec ce ff ff    	lea    ecx,[eax-0x3114]
30001781:	89 0a                	mov    DWORD PTR [edx],ecx
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:88
    fops.write=writeConsole;
30001783:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
30001789:	8d 88 18 cf ff ff    	lea    ecx,[eax-0x30e8]
3000178f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:89
    console_file.fops=fops;
30001792:	8b 88 e8 ff ff ff    	mov    ecx,DWORD PTR [eax-0x18]
30001798:	8b 80 e4 ff ff ff    	mov    eax,DWORD PTR [eax-0x1c]
3000179e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
300017a1:	8b 00                	mov    eax,DWORD PTR [eax]
300017a3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
300017a6:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:90
300017a9:	90                   	nop
300017aa:	5d                   	pop    ebp
300017ab:	c3                   	ret    

300017ac <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
300017ac:	55                   	push   ebp
300017ad:	89 e5                	mov    ebp,esp
300017af:	53                   	push   ebx
300017b0:	83 ec 04             	sub    esp,0x4
300017b3:	e8 38 15 00 00       	call   30002cf0 <__x86.get_pc_thunk.bx>
300017b8:	81 c3 a8 2e 00 00    	add    ebx,0x2ea8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
     strcpyI (dest + strlenI (dest), src);
300017be:	83 ec 0c             	sub    esp,0xc
300017c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300017c4:	e8 b4 02 00 00       	call   30001a7d <strlenI>
300017c9:	83 c4 10             	add    esp,0x10
300017cc:	89 c2                	mov    edx,eax
300017ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300017d1:	01 d0                	add    eax,edx
300017d3:	83 ec 08             	sub    esp,0x8
300017d6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300017d9:	50                   	push   eax
300017da:	e8 59 01 00 00       	call   30001938 <strcpyI>
300017df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     return dest;
300017e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
   }
300017e5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300017e8:	c9                   	leave  
300017e9:	c3                   	ret    

300017ea <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:36

   char* strcatI (char *dest, const char *src)
   {
300017ea:	55                   	push   ebp
300017eb:	89 e5                	mov    ebp,esp
300017ed:	53                   	push   ebx
300017ee:	83 ec 04             	sub    esp,0x4
300017f1:	e8 fa 14 00 00       	call   30002cf0 <__x86.get_pc_thunk.bx>
300017f6:	81 c3 6a 2e 00 00    	add    ebx,0x2e6a
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37
     strcpyI (dest + strlenI (dest), src);
300017fc:	83 ec 0c             	sub    esp,0xc
300017ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001802:	e8 76 02 00 00       	call   30001a7d <strlenI>
30001807:	83 c4 10             	add    esp,0x10
3000180a:	89 c2                	mov    edx,eax
3000180c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000180f:	01 d0                	add    eax,edx
30001811:	83 ec 08             	sub    esp,0x8
30001814:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001817:	50                   	push   eax
30001818:	e8 1b 01 00 00       	call   30001938 <strcpyI>
3000181d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     return dest;
30001820:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
   }
30001823:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001826:	c9                   	leave  
30001827:	c3                   	ret    

30001828 <concatenate>:
concatenate():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:41
   
   void concatenate(char p[], char q[]) {
30001828:	55                   	push   ebp
30001829:	89 e5                	mov    ebp,esp
3000182b:	83 ec 10             	sub    esp,0x10
3000182e:	e8 7e 14 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30001833:	05 2d 2e 00 00       	add    eax,0x2e2d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
   int c, d;
 
   c = 0;
30001838:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
 
   while (p[c] != '\0') {
3000183f:	eb 04                	jmp    30001845 <concatenate+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
      c++;  	
30001841:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
30001845:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30001848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000184b:	01 d0                	add    eax,edx
3000184d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001850:	84 c0                	test   al,al
30001852:	75 ed                	jne    30001841 <concatenate+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:50
      c++;  	
   }
 
   d = 0;
30001854:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
 
   while (q[d] != '\0') {
3000185b:	eb 1d                	jmp    3000187a <concatenate+0x52>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
      p[c] = q[d];
3000185d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30001860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001863:	01 c2                	add    edx,eax
30001865:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
30001868:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000186b:	01 c8                	add    eax,ecx
3000186d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001870:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:54
      d++;
30001872:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:55
      c++;	
30001876:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
3000187a:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
3000187d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001880:	01 d0                	add    eax,edx
30001882:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001885:	84 c0                	test   al,al
30001887:	75 d4                	jne    3000185d <concatenate+0x35>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
30001889:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
3000188c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000188f:	01 d0                	add    eax,edx
30001891:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:59
30001894:	90                   	nop
30001895:	c9                   	leave  
30001896:	c3                   	ret    
30001897:	90                   	nop

30001898 <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:25

/* Compare S1 and S2, returning less than, equal to or
   greater than zero if S1 is lexicographically less than,
   equal to or greater than S2.  */
VISIBLE int strcmp (const char *p1, const char *p2)
{
30001898:	55                   	push   ebp
30001899:	89 e5                	mov    ebp,esp
3000189b:	56                   	push   esi
3000189c:	53                   	push   ebx
3000189d:	83 ec 10             	sub    esp,0x10
300018a0:	e8 0c 14 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
300018a5:	05 bb 2d 00 00       	add    eax,0x2dbb
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:26
  register const unsigned char *s1 = (const unsigned char *) p1;
300018aa:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
  register const unsigned char *s2 = (const unsigned char *) p2;
300018ad:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:32
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
300018b0:	89 d8                	mov    eax,ebx
300018b2:	8d 58 01             	lea    ebx,[eax+0x1]
300018b5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300018b8:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:33
      c2 = (unsigned char) *s2++;
300018bb:	89 f0                	mov    eax,esi
300018bd:	8d 70 01             	lea    esi,[eax+0x1]
300018c0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300018c3:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
      if (c1 == '\0')
300018c6:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
300018ca:	75 0e                	jne    300018da <strcmp+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
	return c1 - c2;
300018cc:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
300018d0:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
300018d4:	29 c2                	sub    edx,eax
300018d6:	89 d0                	mov    eax,edx
300018d8:	eb 15                	jmp    300018ef <strcmp+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
    }
  while (c1 == c2);
300018da:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
300018de:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
300018e1:	74 cd                	je     300018b0 <strcmp+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39

  return c1 - c2;
300018e3:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
300018e7:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
300018eb:	29 c2                	sub    edx,eax
300018ed:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:40
}
300018ef:	83 c4 10             	add    esp,0x10
300018f2:	5b                   	pop    ebx
300018f3:	5e                   	pop    esi
300018f4:	5d                   	pop    ebp
300018f5:	c3                   	ret    
300018f6:	66 90                	xchg   ax,ax

300018f8 <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
300018f8:	55                   	push   ebp
300018f9:	89 e5                	mov    ebp,esp
300018fb:	83 ec 10             	sub    esp,0x10
300018fe:	e8 ae 13 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30001903:	05 5d 2d 00 00       	add    eax,0x2d5d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
30001908:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000190b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
3000190e:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
3000190f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001912:	8d 50 01             	lea    edx,[eax+0x1]
30001915:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001918:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000191b:	8d 4a 01             	lea    ecx,[edx+0x1]
3000191e:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
30001921:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001924:	88 10                	mov    BYTE PTR [eax],dl
30001926:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001929:	84 c0                	test   al,al
3000192b:	75 e2                	jne    3000190f <strcpy+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
3000192d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001930:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
30001933:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
30001936:	c9                   	leave  
30001937:	c3                   	ret    

30001938 <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
30001938:	55                   	push   ebp
30001939:	89 e5                	mov    ebp,esp
3000193b:	83 ec 10             	sub    esp,0x10
3000193e:	e8 6e 13 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30001943:	05 1d 2d 00 00       	add    eax,0x2d1d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
30001948:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000194b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
3000194e:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
3000194f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001952:	8d 50 01             	lea    edx,[eax+0x1]
30001955:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000195b:	8d 4a 01             	lea    ecx,[edx+0x1]
3000195e:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
30001961:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001964:	88 10                	mov    BYTE PTR [eax],dl
30001966:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001969:	84 c0                	test   al,al
3000196b:	75 e2                	jne    3000194f <strcpyI+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
3000196d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001970:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
30001973:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
30001976:	c9                   	leave  
30001977:	c3                   	ret    

30001978 <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
30001978:	55                   	push   ebp
30001979:	89 e5                	mov    ebp,esp
3000197b:	83 ec 10             	sub    esp,0x10
3000197e:	e8 2e 13 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30001983:	05 dd 2c 00 00       	add    eax,0x2cdd
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
30001988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000198b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
3000198e:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
3000198f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001992:	8d 50 01             	lea    edx,[eax+0x1]
30001995:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001998:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000199b:	8d 4a 01             	lea    ecx,[edx+0x1]
3000199e:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
300019a1:	0f b6 12             	movzx  edx,BYTE PTR [edx]
300019a4:	88 10                	mov    BYTE PTR [eax],dl
300019a6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300019a9:	84 c0                	test   al,al
300019ab:	74 0d                	je     300019ba <strcpyc+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
300019ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300019b0:	8d 50 ff             	lea    edx,[eax-0x1]
300019b3:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
300019b6:	85 c0                	test   eax,eax
300019b8:	75 d5                	jne    3000198f <strcpyc+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
300019ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
300019bd:	c9                   	leave  
300019be:	c3                   	ret    
300019bf:	90                   	nop

300019c0 <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
300019c0:	55                   	push   ebp
300019c1:	89 e5                	mov    ebp,esp
300019c3:	83 ec 04             	sub    esp,0x4
300019c6:	e8 e6 12 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
300019cb:	05 95 2c 00 00       	add    eax,0x2c95
300019d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300019d3:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
300019d6:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
300019da:	7e 0d                	jle    300019e9 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
300019dc:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
300019e0:	7f 07                	jg     300019e9 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
300019e2:	b8 01 00 00 00       	mov    eax,0x1
300019e7:	eb 05                	jmp    300019ee <check_digit+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
300019e9:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
300019ee:	c9                   	leave  
300019ef:	c3                   	ret    

300019f0 <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
300019f0:	55                   	push   ebp
300019f1:	89 e5                	mov    ebp,esp
300019f3:	83 ec 10             	sub    esp,0x10
300019f6:	e8 b6 12 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
300019fb:	05 65 2c 00 00       	add    eax,0x2c65
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
30001a00:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
30001a07:	eb 27                	jmp    30001a30 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
30001a09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001a0c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001a0f:	89 c2                	mov    edx,eax
30001a11:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001a14:	01 d0                	add    eax,edx
30001a16:	0f be c0             	movsx  eax,al
30001a19:	50                   	push   eax
30001a1a:	e8 a1 ff ff ff       	call   300019c0 <check_digit>
30001a1f:	83 c4 04             	add    esp,0x4
30001a22:	83 f0 01             	xor    eax,0x1
30001a25:	84 c0                	test   al,al
30001a27:	74 07                	je     30001a30 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
30001a29:	b8 00 00 00 00       	mov    eax,0x0
30001a2e:	eb 17                	jmp    30001a47 <strisnum+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18

VISIBLE bool strisnum(char* str)
{
    int cnt=0;
    
    while (*str+cnt)
30001a30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001a33:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001a36:	0f be d0             	movsx  edx,al
30001a39:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001a3c:	01 d0                	add    eax,edx
30001a3e:	85 c0                	test   eax,eax
30001a40:	75 c7                	jne    30001a09 <strisnum+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
        if (!check_digit(*str+cnt))
            return false;
    return true;
30001a42:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
30001a47:	c9                   	leave  
30001a48:	c3                   	ret    
30001a49:	66 90                	xchg   ax,ax
30001a4b:	90                   	nop

30001a4c <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:3
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
30001a4c:	55                   	push   ebp
30001a4d:	89 e5                	mov    ebp,esp
30001a4f:	83 ec 10             	sub    esp,0x10
30001a52:	e8 5a 12 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30001a57:	05 09 2c 00 00       	add    eax,0x2c09
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
          size_t ret = 0;
30001a5c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
        while ( str[ret] != 0 )
30001a63:	eb 04                	jmp    30001a69 <strlen+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
                ret++;
30001a65:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
30001a69:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001a6c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001a6f:	01 d0                	add    eax,edx
30001a71:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001a74:	84 c0                	test   al,al
30001a76:	75 ed                	jne    30001a65 <strlen+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
        return ret;
30001a78:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
}
30001a7b:	c9                   	leave  
30001a7c:	c3                   	ret    

30001a7d <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:10

size_t strlenI(const char* str) {
30001a7d:	55                   	push   ebp
30001a7e:	89 e5                	mov    ebp,esp
30001a80:	83 ec 10             	sub    esp,0x10
30001a83:	e8 29 12 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30001a88:	05 d8 2b 00 00       	add    eax,0x2bd8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:11
          size_t ret = 0;
30001a8d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        while ( str[ret] != 0 )
30001a94:	eb 04                	jmp    30001a9a <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
                ret++;
30001a96:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        return ret;
}

size_t strlenI(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
30001a9a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001a9d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001aa0:	01 d0                	add    eax,edx
30001aa2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001aa5:	84 c0                	test   al,al
30001aa7:	75 ed                	jne    30001a96 <strlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
                ret++;
        return ret;
30001aa9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:15
}
30001aac:	c9                   	leave  
30001aad:	c3                   	ret    
30001aae:	66 90                	xchg   ax,ax

30001ab0 <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
30001ab0:	55                   	push   ebp
30001ab1:	89 e5                	mov    ebp,esp
30001ab3:	e8 f9 11 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30001ab8:	05 a8 2b 00 00       	add    eax,0x2ba8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
30001abd:	eb 4b                	jmp    30001b0a <strncmp+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
30001abf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001ac2:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001ac5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001ac8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001acb:	38 c2                	cmp    dl,al
30001acd:	74 1e                	je     30001aed <strncmp+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
30001acf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001ad2:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001ad5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001ad8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001adb:	38 c2                	cmp    dl,al
30001add:	73 07                	jae    30001ae6 <strncmp+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
30001adf:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001ae4:	eb 2f                	jmp    30001b15 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
30001ae6:	b8 01 00 00 00       	mov    eax,0x1
30001aeb:	eb 28                	jmp    30001b15 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
30001aed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001af0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001af3:	84 c0                	test   al,al
30001af5:	75 07                	jne    30001afe <strncmp+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
30001af7:	b8 00 00 00 00       	mov    eax,0x0
30001afc:	eb 17                	jmp    30001b15 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
30001afe:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
30001b02:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
30001b06:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
30001b0a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001b0e:	75 af                	jne    30001abf <strncmp+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
30001b10:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
30001b15:	5d                   	pop    ebp
30001b16:	c3                   	ret    

30001b17 <strncmpI>:
strncmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:23

int strncmpI(const char *s1, const char *s2, size_t n)
{
30001b17:	55                   	push   ebp
30001b18:	89 e5                	mov    ebp,esp
30001b1a:	e8 92 11 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30001b1f:	05 41 2b 00 00       	add    eax,0x2b41
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
30001b24:	eb 4b                	jmp    30001b71 <strncmpI+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:25
	if (*s1 != *s2)
30001b26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001b29:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001b2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001b2f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001b32:	38 c2                	cmp    dl,al
30001b34:	74 1e                	je     30001b54 <strncmpI+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
30001b36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001b39:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001b3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001b3f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001b42:	38 c2                	cmp    dl,al
30001b44:	73 07                	jae    30001b4d <strncmpI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 1)
30001b46:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001b4b:	eb 2f                	jmp    30001b7c <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 2)
30001b4d:	b8 01 00 00 00       	mov    eax,0x1
30001b52:	eb 28                	jmp    30001b7c <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:27
	else if (*s1 == '\0')
30001b54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001b57:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001b5a:	84 c0                	test   al,al
30001b5c:	75 07                	jne    30001b65 <strncmpI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:28
	    return 0;
30001b5e:	b8 00 00 00 00       	mov    eax,0x0
30001b63:	eb 17                	jmp    30001b7c <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    return 0;
}

int strncmpI(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
30001b65:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
30001b69:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
30001b6d:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24 (discriminator 1)
30001b71:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001b75:	75 af                	jne    30001b26 <strncmpI+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:29
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
30001b77:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:30
}
30001b7c:	5d                   	pop    ebp
30001b7d:	c3                   	ret    
30001b7e:	66 90                	xchg   ax,ax

30001b80 <strncpyI>:
strncpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
30001b80:	55                   	push   ebp
30001b81:	89 e5                	mov    ebp,esp
30001b83:	83 ec 10             	sub    esp,0x10
30001b86:	e8 26 11 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30001b8b:	05 d5 2a 00 00       	add    eax,0x2ad5
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
30001b90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001b93:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
30001b96:	eb 1b                	jmp    30001bb3 <strncpyI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
30001b98:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001b9b:	8d 50 01             	lea    edx,[eax+0x1]
30001b9e:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001ba1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001ba4:	8d 4a 01             	lea    ecx,[edx+0x1]
30001ba7:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
30001baa:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001bad:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
30001baf:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
30001bb3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001bb7:	74 1c                	je     30001bd5 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
30001bb9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001bbc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001bbf:	84 c0                	test   al,al
30001bc1:	75 d5                	jne    30001b98 <strncpyI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
30001bc3:	eb 10                	jmp    30001bd5 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
30001bc5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001bc8:	8d 50 01             	lea    edx,[eax+0x1]
30001bcb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001bce:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
30001bd1:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
30001bd5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001bd9:	75 ea                	jne    30001bc5 <strncpyI+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    return s1;
30001bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
}
30001bde:	c9                   	leave  
30001bdf:	c3                   	ret    

30001be0 <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:28

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
30001be0:	55                   	push   ebp
30001be1:	89 e5                	mov    ebp,esp
30001be3:	e8 c9 10 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30001be8:	05 78 2a 00 00       	add    eax,0x2a78
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:29
    return strncpyI(s1, s2, n);
30001bed:	ff 75 10             	push   DWORD PTR [ebp+0x10]
30001bf0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001bf3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001bf6:	e8 85 ff ff ff       	call   30001b80 <strncpyI>
30001bfb:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:30
}
30001bfe:	c9                   	leave  
30001bff:	c3                   	ret    

30001c00 <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
30001c00:	55                   	push   ebp
30001c01:	89 e5                	mov    ebp,esp
30001c03:	57                   	push   edi
30001c04:	56                   	push   esi
30001c05:	53                   	push   ebx
30001c06:	83 ec 08             	sub    esp,0x8
30001c09:	e8 a3 10 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30001c0e:	05 52 2a 00 00       	add    eax,0x2a52
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
30001c13:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
30001c16:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
30001c1d:	89 f0                	mov    eax,esi
30001c1f:	8d 70 01             	lea    esi,[eax+0x1]
30001c22:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001c25:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
30001c28:	83 fb 20             	cmp    ebx,0x20
30001c2b:	74 f0                	je     30001c1d <strtoul+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
30001c2d:	83 fb 2d             	cmp    ebx,0x2d
30001c30:	75 14                	jne    30001c46 <strtoul+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
30001c32:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
30001c39:	89 f0                	mov    eax,esi
30001c3b:	8d 70 01             	lea    esi,[eax+0x1]
30001c3e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001c41:	0f be d8             	movsx  ebx,al
30001c44:	eb 10                	jmp    30001c56 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
30001c46:	83 fb 2b             	cmp    ebx,0x2b
30001c49:	75 0b                	jne    30001c56 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
30001c4b:	89 f0                	mov    eax,esi
30001c4d:	8d 70 01             	lea    esi,[eax+0x1]
30001c50:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001c53:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
30001c56:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001c5a:	74 06                	je     30001c62 <strtoul+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
30001c5c:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
30001c60:	75 26                	jne    30001c88 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
30001c62:	83 fb 30             	cmp    ebx,0x30
30001c65:	75 21                	jne    30001c88 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
30001c67:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001c6a:	3c 78                	cmp    al,0x78
30001c6c:	74 07                	je     30001c75 <strtoul+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
30001c6e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001c71:	3c 58                	cmp    al,0x58
30001c73:	75 13                	jne    30001c88 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
30001c75:	8d 46 01             	lea    eax,[esi+0x1]
30001c78:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001c7b:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
30001c7e:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
30001c81:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
30001c88:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001c8c:	75 14                	jne    30001ca2 <strtoul+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
30001c8e:	83 fb 30             	cmp    ebx,0x30
30001c91:	75 07                	jne    30001c9a <strtoul+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
30001c93:	b8 08 00 00 00       	mov    eax,0x8
30001c98:	eb 05                	jmp    30001c9f <strtoul+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
30001c9a:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
30001c9f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
30001ca2:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30001ca5:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001caa:	ba 00 00 00 00       	mov    edx,0x0
30001caf:	f7 f1                	div    ecx
30001cb1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
30001cb4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30001cb7:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001cbc:	ba 00 00 00 00       	mov    edx,0x0
30001cc1:	f7 f1                	div    ecx
30001cc3:	89 d0                	mov    eax,edx
30001cc5:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
30001cc7:	bf 00 00 00 00       	mov    edi,0x0
30001ccc:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
30001cd1:	8d 43 d0             	lea    eax,[ebx-0x30]
30001cd4:	83 f8 09             	cmp    eax,0x9
30001cd7:	77 05                	ja     30001cde <strtoul+0xde>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
30001cd9:	83 eb 30             	sub    ebx,0x30
30001cdc:	eb 25                	jmp    30001d03 <strtoul+0x103>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
30001cde:	89 d8                	mov    eax,ebx
30001ce0:	83 c8 20             	or     eax,0x20
30001ce3:	83 e8 61             	sub    eax,0x61
30001ce6:	83 f8 19             	cmp    eax,0x19
30001ce9:	77 56                	ja     30001d41 <strtoul+0x141>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
30001ceb:	83 fb 40             	cmp    ebx,0x40
30001cee:	7e 0c                	jle    30001cfc <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
30001cf0:	83 fb 5a             	cmp    ebx,0x5a
30001cf3:	7f 07                	jg     30001cfc <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
30001cf5:	b8 37 00 00 00       	mov    eax,0x37
30001cfa:	eb 05                	jmp    30001d01 <strtoul+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
30001cfc:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
30001d01:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
30001d03:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
30001d06:	7d 3c                	jge    30001d44 <strtoul+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
30001d08:	89 c8                	mov    eax,ecx
30001d0a:	85 c0                	test   eax,eax
30001d0c:	78 10                	js     30001d1e <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
30001d0e:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001d11:	77 0b                	ja     30001d1e <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
30001d13:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001d16:	75 0d                	jne    30001d25 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
30001d18:	89 d0                	mov    eax,edx
30001d1a:	39 c3                	cmp    ebx,eax
30001d1c:	7e 07                	jle    30001d25 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
30001d1e:	b9 ff ff ff ff       	mov    ecx,0xffffffff
30001d23:	eb 0f                	jmp    30001d34 <strtoul+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
30001d25:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
30001d2a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001d2d:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
30001d30:	89 d8                	mov    eax,ebx
30001d32:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
30001d34:	89 f0                	mov    eax,esi
30001d36:	8d 70 01             	lea    esi,[eax+0x1]
30001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001d3c:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
30001d3f:	eb 90                	jmp    30001cd1 <strtoul+0xd1>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
30001d41:	90                   	nop
30001d42:	eb 01                	jmp    30001d45 <strtoul+0x145>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
30001d44:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
30001d45:	89 c8                	mov    eax,ecx
30001d47:	85 c0                	test   eax,eax
30001d49:	79 07                	jns    30001d52 <strtoul+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
30001d4b:	bf ff ff ff ff       	mov    edi,0xffffffff
30001d50:	eb 08                	jmp    30001d5a <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
30001d52:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001d56:	74 02                	je     30001d5a <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
30001d58:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
30001d5a:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
30001d5e:	74 13                	je     30001d73 <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
30001d60:	89 c8                	mov    eax,ecx
30001d62:	85 c0                	test   eax,eax
30001d64:	74 05                	je     30001d6b <strtoul+0x16b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
30001d66:	8d 46 ff             	lea    eax,[esi-0x1]
30001d69:	eb 03                	jmp    30001d6e <strtoul+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
30001d6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
30001d6e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001d71:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
30001d73:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
30001d75:	83 c4 08             	add    esp,0x8
30001d78:	5b                   	pop    ebx
30001d79:	5e                   	pop    esi
30001d7a:	5f                   	pop    edi
30001d7b:	5d                   	pop    ebp
30001d7c:	c3                   	ret    
30001d7d:	66 90                	xchg   ax,ax
30001d7f:	90                   	nop

30001d80 <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
30001d80:	55                   	push   ebp
30001d81:	89 e5                	mov    ebp,esp
30001d83:	e8 29 0f 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30001d88:	05 d8 28 00 00       	add    eax,0x28d8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
30001d8d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001d90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001d93:	01 d0                	add    eax,edx
30001d95:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
30001d98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
30001d9b:	5d                   	pop    ebp
30001d9c:	c3                   	ret    
30001d9d:	66 90                	xchg   ax,ax
30001d9f:	90                   	nop

30001da0 <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
30001da0:	55                   	push   ebp
30001da1:	89 e5                	mov    ebp,esp
30001da3:	57                   	push   edi
30001da4:	56                   	push   esi
30001da5:	53                   	push   ebx
30001da6:	83 ec 0c             	sub    esp,0xc
30001da9:	e8 03 0f 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30001dae:	05 b2 28 00 00       	add    eax,0x28b2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
30001db3:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
30001db6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
30001dbd:	89 f0                	mov    eax,esi
30001dbf:	8d 70 01             	lea    esi,[eax+0x1]
30001dc2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001dc5:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
30001dc8:	83 fb 20             	cmp    ebx,0x20
30001dcb:	74 f0                	je     30001dbd <strtol+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
30001dcd:	83 fb 2d             	cmp    ebx,0x2d
30001dd0:	75 14                	jne    30001de6 <strtol+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
30001dd2:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
30001dd9:	89 f0                	mov    eax,esi
30001ddb:	8d 70 01             	lea    esi,[eax+0x1]
30001dde:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001de1:	0f be d8             	movsx  ebx,al
30001de4:	eb 10                	jmp    30001df6 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
30001de6:	83 fb 2b             	cmp    ebx,0x2b
30001de9:	75 0b                	jne    30001df6 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
30001deb:	89 f0                	mov    eax,esi
30001ded:	8d 70 01             	lea    esi,[eax+0x1]
30001df0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001df3:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
30001df6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001dfa:	74 06                	je     30001e02 <strtol+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
30001dfc:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
30001e00:	75 26                	jne    30001e28 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
30001e02:	83 fb 30             	cmp    ebx,0x30
30001e05:	75 21                	jne    30001e28 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
30001e07:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001e0a:	3c 78                	cmp    al,0x78
30001e0c:	74 07                	je     30001e15 <strtol+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
30001e0e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001e11:	3c 58                	cmp    al,0x58
30001e13:	75 13                	jne    30001e28 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
30001e15:	8d 46 01             	lea    eax,[esi+0x1]
30001e18:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001e1b:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
30001e1e:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
30001e21:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
30001e28:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001e2c:	75 14                	jne    30001e42 <strtol+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
30001e2e:	83 fb 30             	cmp    ebx,0x30
30001e31:	75 07                	jne    30001e3a <strtol+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
30001e33:	b8 08 00 00 00       	mov    eax,0x8
30001e38:	eb 05                	jmp    30001e3f <strtol+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
30001e3a:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
30001e3f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
30001e42:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001e46:	74 07                	je     30001e4f <strtol+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
30001e48:	b8 00 00 00 80       	mov    eax,0x80000000
30001e4d:	eb 05                	jmp    30001e54 <strtol+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
30001e4f:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
30001e54:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30001e57:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
30001e5a:	ba 00 00 00 00       	mov    edx,0x0
30001e5f:	f7 f1                	div    ecx
30001e61:	89 d1                	mov    ecx,edx
30001e63:	89 c8                	mov    eax,ecx
30001e65:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
30001e68:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
30001e6b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001e6e:	ba 00 00 00 00       	mov    edx,0x0
30001e73:	f7 f7                	div    edi
30001e75:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
30001e78:	bf 00 00 00 00       	mov    edi,0x0
30001e7d:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
30001e82:	8d 43 d0             	lea    eax,[ebx-0x30]
30001e85:	83 f8 09             	cmp    eax,0x9
30001e88:	77 05                	ja     30001e8f <strtol+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
30001e8a:	83 eb 30             	sub    ebx,0x30
30001e8d:	eb 25                	jmp    30001eb4 <strtol+0x114>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
30001e8f:	89 d8                	mov    eax,ebx
30001e91:	83 c8 20             	or     eax,0x20
30001e94:	83 e8 61             	sub    eax,0x61
30001e97:	83 f8 19             	cmp    eax,0x19
30001e9a:	77 55                	ja     30001ef1 <strtol+0x151>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
30001e9c:	83 fb 40             	cmp    ebx,0x40
30001e9f:	7e 0c                	jle    30001ead <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
30001ea1:	83 fb 5a             	cmp    ebx,0x5a
30001ea4:	7f 07                	jg     30001ead <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
30001ea6:	b8 37 00 00 00       	mov    eax,0x37
30001eab:	eb 05                	jmp    30001eb2 <strtol+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
30001ead:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
30001eb2:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
30001eb4:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
30001eb7:	7d 3b                	jge    30001ef4 <strtol+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
30001eb9:	89 c8                	mov    eax,ecx
30001ebb:	85 c0                	test   eax,eax
30001ebd:	78 0f                	js     30001ece <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
30001ebf:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001ec2:	77 0a                	ja     30001ece <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
30001ec4:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001ec7:	75 0c                	jne    30001ed5 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
30001ec9:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
30001ecc:	7e 07                	jle    30001ed5 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
30001ece:	b9 ff ff ff ff       	mov    ecx,0xffffffff
30001ed3:	eb 0f                	jmp    30001ee4 <strtol+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
30001ed5:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
30001eda:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001edd:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
30001ee0:	89 d8                	mov    eax,ebx
30001ee2:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
30001ee4:	89 f0                	mov    eax,esi
30001ee6:	8d 70 01             	lea    esi,[eax+0x1]
30001ee9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001eec:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
30001eef:	eb 91                	jmp    30001e82 <strtol+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
30001ef1:	90                   	nop
30001ef2:	eb 01                	jmp    30001ef5 <strtol+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
30001ef4:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
30001ef5:	89 c8                	mov    eax,ecx
30001ef7:	85 c0                	test   eax,eax
30001ef9:	79 16                	jns    30001f11 <strtol+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
30001efb:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001eff:	74 07                	je     30001f08 <strtol+0x168>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
30001f01:	b8 00 00 00 80       	mov    eax,0x80000000
30001f06:	eb 05                	jmp    30001f0d <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
30001f08:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
30001f0d:	89 c7                	mov    edi,eax
30001f0f:	eb 08                	jmp    30001f19 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
30001f11:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001f15:	74 02                	je     30001f19 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
30001f17:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
30001f19:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
30001f1d:	74 13                	je     30001f32 <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
30001f1f:	89 c8                	mov    eax,ecx
30001f21:	85 c0                	test   eax,eax
30001f23:	74 05                	je     30001f2a <strtol+0x18a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
30001f25:	8d 46 ff             	lea    eax,[esi-0x1]
30001f28:	eb 03                	jmp    30001f2d <strtol+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
30001f2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
30001f2d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001f30:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
30001f32:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
30001f34:	83 c4 0c             	add    esp,0xc
30001f37:	5b                   	pop    ebx
30001f38:	5e                   	pop    esi
30001f39:	5f                   	pop    edi
30001f3a:	5d                   	pop    ebp
30001f3b:	c3                   	ret    

30001f3c <strtrimI>:
strtrimI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

void strtrimI(char *input)
{
30001f3c:	55                   	push   ebp
30001f3d:	89 e5                	mov    ebp,esp
30001f3f:	53                   	push   ebx
30001f40:	83 ec 14             	sub    esp,0x14
30001f43:	e8 69 0d 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30001f48:	05 18 27 00 00       	add    eax,0x2718
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
30001f4d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001f50:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001f53:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001f56:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
30001f59:	eb 04                	jmp    30001f5f <strtrimI+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
30001f5b:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *dst = input, *src = input;
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
30001f5f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30001f62:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001f65:	80 fa 20             	cmp    dl,0x20
30001f68:	74 f1                	je     30001f5b <strtrimI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
      ++src;
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
30001f6a:	83 ec 0c             	sub    esp,0xc
30001f6d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30001f70:	89 c3                	mov    ebx,eax
30001f72:	e8 06 fb ff ff       	call   30001a7d <strlenI>
30001f77:	83 c4 10             	add    esp,0x10
30001f7a:	8d 50 ff             	lea    edx,[eax-0x1]
30001f7d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001f80:	01 d0                	add    eax,edx
30001f82:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
30001f85:	eb 0c                	jmp    30001f93 <strtrimI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
30001f87:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001f8a:	8d 50 ff             	lea    edx,[eax-0x1]
30001f8d:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
30001f90:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
   while (end > src && *end==' ')
30001f93:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001f96:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30001f99:	76 0a                	jbe    30001fa5 <strtrimI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
30001f9b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001f9e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001fa1:	3c 20                	cmp    al,0x20
30001fa3:	74 e2                	je     30001f87 <strtrimI+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
      *end-- = 0;
   }

   // Move if needed.
   //
   if (src != dst)
30001fa5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001fa8:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
30001fab:	74 1f                	je     30001fcc <strtrimI+0x90>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
30001fad:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
30001fae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001fb1:	8d 50 01             	lea    edx,[eax+0x1]
30001fb4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001fb7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30001fba:	8d 4a 01             	lea    ecx,[edx+0x1]
30001fbd:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
30001fc0:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001fc3:	88 10                	mov    BYTE PTR [eax],dl
30001fc5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001fc8:	84 c0                	test   al,al
30001fca:	75 e2                	jne    30001fae <strtrimI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
30001fcc:	90                   	nop
30001fcd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001fd0:	c9                   	leave  
30001fd1:	c3                   	ret    

30001fd2 <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:32

__attribute__((visibility("default"))) void strtrim(char *input)
{
30001fd2:	55                   	push   ebp
30001fd3:	89 e5                	mov    ebp,esp
30001fd5:	83 ec 08             	sub    esp,0x8
30001fd8:	e8 d4 0c 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30001fdd:	05 83 26 00 00       	add    eax,0x2683
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:33
    return strtrimI(input);
30001fe2:	83 ec 0c             	sub    esp,0xc
30001fe5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001fe8:	e8 4f ff ff ff       	call   30001f3c <strtrimI>
30001fed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:34
}
30001ff0:	c9                   	leave  
30001ff1:	c3                   	ret    
30001ff2:	66 90                	xchg   ax,ax

30001ff4 <strstrI>:
strstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:52
 */

#include "strings.h"

char* strstrI(char* string, char* substring)
{
30001ff4:	55                   	push   ebp
30001ff5:	89 e5                	mov    ebp,esp
30001ff7:	56                   	push   esi
30001ff8:	53                   	push   ebx
30001ff9:	e8 b3 0c 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30001ffe:	05 62 26 00 00       	add    eax,0x2662
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:60
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
30002003:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:61
    if (*b == 0) {
30002006:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30002009:	84 c0                	test   al,al
3000200b:	75 42                	jne    3000204f <strstrI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
	return string;
3000200d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002010:	eb 4c                	jmp    3000205e <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
30002012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002015:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30002018:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
3000201b:	38 c2                	cmp    dl,al
3000201d:	75 2b                	jne    3000204a <strstrI+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
	    continue;
	}
	a = string;
3000201f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:70
	while (1) {
	    if (*b == 0) {
30002022:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30002025:	84 c0                	test   al,al
30002027:	75 05                	jne    3000202e <strstrI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:71
		return string;
30002029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000202c:	eb 30                	jmp    3000205e <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:73
	    }
	    if (*a++ != *b++) {
3000202e:	89 f0                	mov    eax,esi
30002030:	8d 70 01             	lea    esi,[eax+0x1]
30002033:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30002036:	89 d8                	mov    eax,ebx
30002038:	8d 58 01             	lea    ebx,[eax+0x1]
3000203b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000203e:	38 c2                	cmp    dl,al
30002040:	75 02                	jne    30002044 <strstrI+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:76
		break;
	    }
	}
30002042:	eb de                	jmp    30002022 <strstrI+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
	while (1) {
	    if (*b == 0) {
		return string;
	    }
	    if (*a++ != *b++) {
		break;
30002044:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
	    }
	}
	b = substring;
30002045:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
30002048:	eb 01                	jmp    3000204b <strstrI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
	    continue;
3000204a:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64

    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
3000204b:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64 (discriminator 1)
3000204f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002052:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30002055:	84 c0                	test   al,al
30002057:	75 b9                	jne    30002012 <strstrI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
30002059:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:80
}
3000205e:	5b                   	pop    ebx
3000205f:	5e                   	pop    esi
30002060:	5d                   	pop    ebp
30002061:	c3                   	ret    

30002062 <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:83

VISIBLE char* strstr(char* string, char* substring)
{
30002062:	55                   	push   ebp
30002063:	89 e5                	mov    ebp,esp
30002065:	e8 47 0c 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
3000206a:	05 f6 25 00 00       	add    eax,0x25f6
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:84
    return strstrI(string, substring);
3000206f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30002072:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30002075:	e8 7a ff ff ff       	call   30001ff4 <strstrI>
3000207a:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:85
3000207d:	c9                   	leave  
3000207e:	c3                   	ret    
3000207f:	90                   	nop

30002080 <time>:
time():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:23
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t time(/*time_t* arg*/)
{
30002080:	55                   	push   ebp
30002081:	89 e5                	mov    ebp,esp
30002083:	56                   	push   esi
30002084:	53                   	push   ebx
30002085:	83 ec 10             	sub    esp,0x10
30002088:	e8 24 0c 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
3000208d:	05 d3 25 00 00       	add    eax,0x25d3
/home/yogi/src/os/aproj/libChrisOS/src/time.c:24
    uint32_t retVal=0;
30002092:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:25
    GET_TICKS(retVal);
30002099:	b8 70 01 00 00       	mov    eax,0x170
3000209e:	bb 00 00 00 00       	mov    ebx,0x0
300020a3:	b9 00 00 00 00       	mov    ecx,0x0
300020a8:	ba 00 00 00 00       	mov    edx,0x0
300020ad:	be 00 00 00 00       	mov    esi,0x0
300020b2:	e8 fc ff ff ff       	call   300020b3 <time+0x33>
300020b7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:26
    return (time_t)retVal;
300020ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
}
300020bd:	83 c4 10             	add    esp,0x10
300020c0:	5b                   	pop    ebx
300020c1:	5e                   	pop    esi
300020c2:	5d                   	pop    ebp
300020c3:	c3                   	ret    

300020c4 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:30


VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) {
300020c4:	55                   	push   ebp
300020c5:	89 e5                	mov    ebp,esp
300020c7:	53                   	push   ebx
300020c8:	83 ec 10             	sub    esp,0x10
300020cb:	e8 20 0c 00 00       	call   30002cf0 <__x86.get_pc_thunk.bx>
300020d0:	81 c3 90 25 00 00    	add    ebx,0x2590
/home/yogi/src/os/aproj/libChrisOS/src/time.c:31
  time_t time = *timer;
300020d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300020d9:	8b 00                	mov    eax,DWORD PTR [eax]
300020db:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:33
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
300020de:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:35

  dayclock = (unsigned long) time % SECS_DAY;
300020e5:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
300020e8:	ba 07 45 2e c2       	mov    edx,0xc22e4507
300020ed:	89 c8                	mov    eax,ecx
300020ef:	f7 e2                	mul    edx
300020f1:	89 d0                	mov    eax,edx
300020f3:	c1 e8 10             	shr    eax,0x10
300020f6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
300020f9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300020fc:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
30002102:	29 c1                	sub    ecx,eax
30002104:	89 c8                	mov    eax,ecx
30002106:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:36
  dayno = (unsigned long) time / SECS_DAY;
30002109:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
3000210c:	ba 07 45 2e c2       	mov    edx,0xc22e4507
30002111:	f7 e2                	mul    edx
30002113:	89 d0                	mov    eax,edx
30002115:	c1 e8 10             	shr    eax,0x10
30002118:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:38

  tmbuf->tm_sec = dayclock % 60;
3000211b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
3000211e:	ba 89 88 88 88       	mov    edx,0x88888889
30002123:	89 c8                	mov    eax,ecx
30002125:	f7 e2                	mul    edx
30002127:	89 d0                	mov    eax,edx
30002129:	c1 e8 05             	shr    eax,0x5
3000212c:	89 c2                	mov    edx,eax
3000212e:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
30002135:	89 c2                	mov    edx,eax
30002137:	89 d0                	mov    eax,edx
30002139:	c1 e0 04             	shl    eax,0x4
3000213c:	29 d0                	sub    eax,edx
3000213e:	29 c1                	sub    ecx,eax
30002140:	89 c8                	mov    eax,ecx
30002142:	89 c2                	mov    edx,eax
30002144:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002147:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:39
  tmbuf->tm_min = (dayclock % 3600) / 60;
30002149:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
3000214c:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
30002151:	89 c8                	mov    eax,ecx
30002153:	f7 e2                	mul    edx
30002155:	89 d0                	mov    eax,edx
30002157:	c1 e8 0b             	shr    eax,0xb
3000215a:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
30002160:	29 c1                	sub    ecx,eax
30002162:	89 c8                	mov    eax,ecx
30002164:	ba 89 88 88 88       	mov    edx,0x88888889
30002169:	f7 e2                	mul    edx
3000216b:	89 d0                	mov    eax,edx
3000216d:	c1 e8 05             	shr    eax,0x5
30002170:	89 c2                	mov    edx,eax
30002172:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002175:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40
  tmbuf->tm_hour = dayclock / 3600;
30002178:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
3000217b:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
30002180:	f7 e2                	mul    edx
30002182:	89 d0                	mov    eax,edx
30002184:	c1 e8 0b             	shr    eax,0xb
30002187:	89 c2                	mov    edx,eax
30002189:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000218c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
3000218f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30002192:	8d 48 04             	lea    ecx,[eax+0x4]
30002195:	ba 25 49 92 24       	mov    edx,0x24924925
3000219a:	89 c8                	mov    eax,ecx
3000219c:	f7 e2                	mul    edx
3000219e:	89 c8                	mov    eax,ecx
300021a0:	29 d0                	sub    eax,edx
300021a2:	d1 e8                	shr    eax,1
300021a4:	01 d0                	add    eax,edx
300021a6:	c1 e8 02             	shr    eax,0x2
300021a9:	89 c2                	mov    edx,eax
300021ab:	c1 e2 03             	shl    edx,0x3
300021ae:	29 c2                	sub    edx,eax
300021b0:	89 c8                	mov    eax,ecx
300021b2:	29 d0                	sub    eax,edx
300021b4:	89 c2                	mov    edx,eax
300021b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300021b9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42
  while (dayno >= (unsigned long) YEARSIZE(year)) {
300021bc:	eb 66                	jmp    30002224 <gmtime_r+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43
    dayno -= YEARSIZE(year);
300021be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300021c1:	83 e0 03             	and    eax,0x3
300021c4:	85 c0                	test   eax,eax
300021c6:	75 50                	jne    30002218 <gmtime_r+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 1)
300021c8:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
300021cb:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300021d0:	89 c8                	mov    eax,ecx
300021d2:	f7 ea                	imul   edx
300021d4:	c1 fa 05             	sar    edx,0x5
300021d7:	89 c8                	mov    eax,ecx
300021d9:	c1 f8 1f             	sar    eax,0x1f
300021dc:	29 c2                	sub    edx,eax
300021de:	89 d0                	mov    eax,edx
300021e0:	6b c0 64             	imul   eax,eax,0x64
300021e3:	29 c1                	sub    ecx,eax
300021e5:	89 c8                	mov    eax,ecx
300021e7:	85 c0                	test   eax,eax
300021e9:	75 26                	jne    30002211 <gmtime_r+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 4)
300021eb:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
300021ee:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300021f3:	89 c8                	mov    eax,ecx
300021f5:	f7 ea                	imul   edx
300021f7:	c1 fa 07             	sar    edx,0x7
300021fa:	89 c8                	mov    eax,ecx
300021fc:	c1 f8 1f             	sar    eax,0x1f
300021ff:	29 c2                	sub    edx,eax
30002201:	89 d0                	mov    eax,edx
30002203:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002209:	29 c1                	sub    ecx,eax
3000220b:	89 c8                	mov    eax,ecx
3000220d:	85 c0                	test   eax,eax
3000220f:	75 07                	jne    30002218 <gmtime_r+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 5)
30002211:	b8 6e 01 00 00       	mov    eax,0x16e
30002216:	eb 05                	jmp    3000221d <gmtime_r+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 6)
30002218:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 8)
3000221d:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 8)
    year++;
30002220:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
30002224:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30002227:	83 e0 03             	and    eax,0x3
3000222a:	85 c0                	test   eax,eax
3000222c:	75 50                	jne    3000227e <gmtime_r+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42 (discriminator 1)
3000222e:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30002231:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002236:	89 c8                	mov    eax,ecx
30002238:	f7 ea                	imul   edx
3000223a:	c1 fa 05             	sar    edx,0x5
3000223d:	89 c8                	mov    eax,ecx
3000223f:	c1 f8 1f             	sar    eax,0x1f
30002242:	29 c2                	sub    edx,eax
30002244:	89 d0                	mov    eax,edx
30002246:	6b c0 64             	imul   eax,eax,0x64
30002249:	29 c1                	sub    ecx,eax
3000224b:	89 c8                	mov    eax,ecx
3000224d:	85 c0                	test   eax,eax
3000224f:	75 26                	jne    30002277 <gmtime_r+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42 (discriminator 4)
30002251:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30002254:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002259:	89 c8                	mov    eax,ecx
3000225b:	f7 ea                	imul   edx
3000225d:	c1 fa 07             	sar    edx,0x7
30002260:	89 c8                	mov    eax,ecx
30002262:	c1 f8 1f             	sar    eax,0x1f
30002265:	29 c2                	sub    edx,eax
30002267:	89 d0                	mov    eax,edx
30002269:	69 c0 90 01 00 00    	imul   eax,eax,0x190
3000226f:	29 c1                	sub    ecx,eax
30002271:	89 c8                	mov    eax,ecx
30002273:	85 c0                	test   eax,eax
30002275:	75 07                	jne    3000227e <gmtime_r+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42 (discriminator 5)
30002277:	b8 6e 01 00 00       	mov    eax,0x16e
3000227c:	eb 05                	jmp    30002283 <gmtime_r+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42 (discriminator 6)
3000227e:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42 (discriminator 8)
30002283:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
30002286:	0f 86 32 ff ff ff    	jbe    300021be <gmtime_r+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:46
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
3000228c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000228f:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
30002295:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002298:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47
  tmbuf->tm_yday = dayno;
3000229b:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
3000229e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300022a1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
  tmbuf->tm_mon = 0;
300022a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300022a7:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
300022ae:	e9 89 00 00 00       	jmp    3000233c <gmtime_r+0x278>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
300022b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300022b6:	83 e0 03             	and    eax,0x3
300022b9:	85 c0                	test   eax,eax
300022bb:	75 50                	jne    3000230d <gmtime_r+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 1)
300022bd:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
300022c0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300022c5:	89 c8                	mov    eax,ecx
300022c7:	f7 ea                	imul   edx
300022c9:	c1 fa 05             	sar    edx,0x5
300022cc:	89 c8                	mov    eax,ecx
300022ce:	c1 f8 1f             	sar    eax,0x1f
300022d1:	29 c2                	sub    edx,eax
300022d3:	89 d0                	mov    eax,edx
300022d5:	6b c0 64             	imul   eax,eax,0x64
300022d8:	29 c1                	sub    ecx,eax
300022da:	89 c8                	mov    eax,ecx
300022dc:	85 c0                	test   eax,eax
300022de:	75 26                	jne    30002306 <gmtime_r+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 4)
300022e0:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
300022e3:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300022e8:	89 c8                	mov    eax,ecx
300022ea:	f7 ea                	imul   edx
300022ec:	c1 fa 07             	sar    edx,0x7
300022ef:	89 c8                	mov    eax,ecx
300022f1:	c1 f8 1f             	sar    eax,0x1f
300022f4:	29 c2                	sub    edx,eax
300022f6:	89 d0                	mov    eax,edx
300022f8:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300022fe:	29 c1                	sub    ecx,eax
30002300:	89 c8                	mov    eax,ecx
30002302:	85 c0                	test   eax,eax
30002304:	75 07                	jne    3000230d <gmtime_r+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 5)
30002306:	ba 01 00 00 00       	mov    edx,0x1
3000230b:	eb 05                	jmp    30002312 <gmtime_r+0x24e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 6)
3000230d:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 8)
30002312:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002315:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
30002318:	89 d0                	mov    eax,edx
3000231a:	01 c0                	add    eax,eax
3000231c:	01 d0                	add    eax,edx
3000231e:	c1 e0 02             	shl    eax,0x2
30002321:	01 c8                	add    eax,ecx
30002323:	8b 84 83 40 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2c0]
3000232a:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 8)
    tmbuf->tm_mon++;
3000232d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002330:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002333:	8d 50 01             	lea    edx,[eax+0x1]
30002336:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002339:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
3000233c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000233f:	83 e0 03             	and    eax,0x3
30002342:	85 c0                	test   eax,eax
30002344:	75 50                	jne    30002396 <gmtime_r+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49 (discriminator 1)
30002346:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30002349:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000234e:	89 c8                	mov    eax,ecx
30002350:	f7 ea                	imul   edx
30002352:	c1 fa 05             	sar    edx,0x5
30002355:	89 c8                	mov    eax,ecx
30002357:	c1 f8 1f             	sar    eax,0x1f
3000235a:	29 c2                	sub    edx,eax
3000235c:	89 d0                	mov    eax,edx
3000235e:	6b c0 64             	imul   eax,eax,0x64
30002361:	29 c1                	sub    ecx,eax
30002363:	89 c8                	mov    eax,ecx
30002365:	85 c0                	test   eax,eax
30002367:	75 26                	jne    3000238f <gmtime_r+0x2cb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49 (discriminator 4)
30002369:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
3000236c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002371:	89 c8                	mov    eax,ecx
30002373:	f7 ea                	imul   edx
30002375:	c1 fa 07             	sar    edx,0x7
30002378:	89 c8                	mov    eax,ecx
3000237a:	c1 f8 1f             	sar    eax,0x1f
3000237d:	29 c2                	sub    edx,eax
3000237f:	89 d0                	mov    eax,edx
30002381:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002387:	29 c1                	sub    ecx,eax
30002389:	89 c8                	mov    eax,ecx
3000238b:	85 c0                	test   eax,eax
3000238d:	75 07                	jne    30002396 <gmtime_r+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49 (discriminator 5)
3000238f:	ba 01 00 00 00       	mov    edx,0x1
30002394:	eb 05                	jmp    3000239b <gmtime_r+0x2d7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49 (discriminator 6)
30002396:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49 (discriminator 8)
3000239b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000239e:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
300023a1:	89 d0                	mov    eax,edx
300023a3:	01 c0                	add    eax,eax
300023a5:	01 d0                	add    eax,edx
300023a7:	c1 e0 02             	shl    eax,0x2
300023aa:	01 c8                	add    eax,ecx
300023ac:	8b 84 83 40 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2c0]
300023b3:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
300023b6:	0f 86 f7 fe ff ff    	jbe    300022b3 <gmtime_r+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:53
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
300023bc:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
300023bf:	83 c0 01             	add    eax,0x1
300023c2:	89 c2                	mov    edx,eax
300023c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300023c7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54
  tmbuf->tm_isdst = 0;
300023ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300023cd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
  return tmbuf;
300023d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56
}
300023d7:	83 c4 10             	add    esp,0x10
300023da:	5b                   	pop    ebx
300023db:	5d                   	pop    ebp
300023dc:	c3                   	ret    

300023dd <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:58

VISIBLE struct tm *localtime(const time_t *timer) {
300023dd:	55                   	push   ebp
300023de:	89 e5                	mov    ebp,esp
300023e0:	53                   	push   ebx
300023e1:	83 ec 34             	sub    esp,0x34
300023e4:	e8 c8 08 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
300023e9:	05 77 22 00 00       	add    eax,0x2277
/home/yogi/src/os/aproj/libChrisOS/src/time.c:62
  time_t t;
  struct tm tmbuf;
  
  t = *timer - libcTZ;
300023ee:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300023f1:	8b 0a                	mov    ecx,DWORD PTR [edx]
300023f3:	8b 90 fc ff ff ff    	mov    edx,DWORD PTR [eax-0x4]
300023f9:	8b 12                	mov    edx,DWORD PTR [edx]
300023fb:	29 d1                	sub    ecx,edx
300023fd:	89 ca                	mov    edx,ecx
300023ff:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:63
  return gmtime_r(&t, &tmbuf);
30002402:	83 ec 08             	sub    esp,0x8
30002405:	8d 55 c8             	lea    edx,[ebp-0x38]
30002408:	52                   	push   edx
30002409:	8d 55 f4             	lea    edx,[ebp-0xc]
3000240c:	52                   	push   edx
3000240d:	89 c3                	mov    ebx,eax
3000240f:	e8 cc 08 00 00       	call   30002ce0 <__x86.get_pc_thunk.ax+0x2f>
30002414:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:64
}
30002417:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000241a:	c9                   	leave  
3000241b:	c3                   	ret    

3000241c <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:66

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
3000241c:	55                   	push   ebp
3000241d:	89 e5                	mov    ebp,esp
3000241f:	53                   	push   ebx
30002420:	83 ec 14             	sub    esp,0x14
30002423:	e8 89 08 00 00       	call   30002cb1 <__x86.get_pc_thunk.ax>
30002428:	05 38 22 00 00       	add    eax,0x2238
/home/yogi/src/os/aproj/libChrisOS/src/time.c:69
  time_t t;

  t = *timer - libcTZ;
3000242d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30002430:	8b 0a                	mov    ecx,DWORD PTR [edx]
30002432:	8b 90 fc ff ff ff    	mov    edx,DWORD PTR [eax-0x4]
30002438:	8b 12                	mov    edx,DWORD PTR [edx]
3000243a:	29 d1                	sub    ecx,edx
3000243c:	89 ca                	mov    edx,ecx
3000243e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:70
  return gmtime_r(&t, tmbuf);
30002441:	83 ec 08             	sub    esp,0x8
30002444:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30002447:	8d 55 f4             	lea    edx,[ebp-0xc]
3000244a:	52                   	push   edx
3000244b:	89 c3                	mov    ebx,eax
3000244d:	e8 8e 08 00 00       	call   30002ce0 <__x86.get_pc_thunk.ax+0x2f>
30002452:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:71
}
30002455:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30002458:	c9                   	leave  
30002459:	c3                   	ret    

3000245a <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73

VISIBLE time_t mktime(struct tm *tmbuf) {
3000245a:	55                   	push   ebp
3000245b:	89 e5                	mov    ebp,esp
3000245d:	57                   	push   edi
3000245e:	56                   	push   esi
3000245f:	53                   	push   ebx
30002460:	83 ec 20             	sub    esp,0x20
30002463:	e8 90 08 00 00       	call   30002cf8 <__x86.get_pc_thunk.cx>
30002468:	81 c1 f8 21 00 00    	add    ecx,0x21f8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
3000246e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002471:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
30002474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002477:	8b 18                	mov    ebx,DWORD PTR [eax]
30002479:	ba 89 88 88 88       	mov    edx,0x88888889
3000247e:	89 d8                	mov    eax,ebx
30002480:	f7 ea                	imul   edx
30002482:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002485:	c1 f8 05             	sar    eax,0x5
30002488:	89 c2                	mov    edx,eax
3000248a:	89 d8                	mov    eax,ebx
3000248c:	c1 f8 1f             	sar    eax,0x1f
3000248f:	29 c2                	sub    edx,eax
30002491:	89 d0                	mov    eax,edx
30002493:	8d 14 06             	lea    edx,[esi+eax*1]
30002496:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002499:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:82
  tmbuf->tm_sec %= 60;
3000249c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000249f:	8b 18                	mov    ebx,DWORD PTR [eax]
300024a1:	ba 89 88 88 88       	mov    edx,0x88888889
300024a6:	89 d8                	mov    eax,ebx
300024a8:	f7 ea                	imul   edx
300024aa:	8d 04 1a             	lea    eax,[edx+ebx*1]
300024ad:	c1 f8 05             	sar    eax,0x5
300024b0:	89 c2                	mov    edx,eax
300024b2:	89 d8                	mov    eax,ebx
300024b4:	c1 f8 1f             	sar    eax,0x1f
300024b7:	29 c2                	sub    edx,eax
300024b9:	89 d0                	mov    eax,edx
300024bb:	89 c2                	mov    edx,eax
300024bd:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
300024c4:	89 c2                	mov    edx,eax
300024c6:	89 d0                	mov    eax,edx
300024c8:	c1 e0 04             	shl    eax,0x4
300024cb:	29 d0                	sub    eax,edx
300024cd:	29 c3                	sub    ebx,eax
300024cf:	89 d8                	mov    eax,ebx
300024d1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300024d4:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:83
  if (tmbuf->tm_sec < 0) {
300024d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024d9:	8b 00                	mov    eax,DWORD PTR [eax]
300024db:	85 c0                	test   eax,eax
300024dd:	79 1c                	jns    300024fb <mktime+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84
    tmbuf->tm_sec += 60;
300024df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024e2:	8b 00                	mov    eax,DWORD PTR [eax]
300024e4:	8d 50 3c             	lea    edx,[eax+0x3c]
300024e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024ea:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:85
    tmbuf->tm_min--;
300024ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
300024f2:	8d 50 ff             	lea    edx,[eax-0x1]
300024f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024f8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:87
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
300024fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024fe:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
30002501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002504:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
30002507:	ba 89 88 88 88       	mov    edx,0x88888889
3000250c:	89 d8                	mov    eax,ebx
3000250e:	f7 ea                	imul   edx
30002510:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002513:	c1 f8 05             	sar    eax,0x5
30002516:	89 c2                	mov    edx,eax
30002518:	89 d8                	mov    eax,ebx
3000251a:	c1 f8 1f             	sar    eax,0x1f
3000251d:	29 c2                	sub    edx,eax
3000251f:	89 d0                	mov    eax,edx
30002521:	8d 14 06             	lea    edx,[esi+eax*1]
30002524:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002527:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:88
  tmbuf->tm_min = tmbuf->tm_min % 60;
3000252a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000252d:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
30002530:	ba 89 88 88 88       	mov    edx,0x88888889
30002535:	89 d8                	mov    eax,ebx
30002537:	f7 ea                	imul   edx
30002539:	8d 04 1a             	lea    eax,[edx+ebx*1]
3000253c:	c1 f8 05             	sar    eax,0x5
3000253f:	89 c2                	mov    edx,eax
30002541:	89 d8                	mov    eax,ebx
30002543:	c1 f8 1f             	sar    eax,0x1f
30002546:	29 c2                	sub    edx,eax
30002548:	89 d0                	mov    eax,edx
3000254a:	89 c2                	mov    edx,eax
3000254c:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
30002553:	89 c2                	mov    edx,eax
30002555:	89 d0                	mov    eax,edx
30002557:	c1 e0 04             	shl    eax,0x4
3000255a:	29 d0                	sub    eax,edx
3000255c:	29 c3                	sub    ebx,eax
3000255e:	89 d8                	mov    eax,ebx
30002560:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30002563:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:89
  if (tmbuf->tm_min < 0) {
30002566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002569:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
3000256c:	85 c0                	test   eax,eax
3000256e:	79 1e                	jns    3000258e <mktime+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:90
    tmbuf->tm_min += 60;
30002570:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002573:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30002576:	8d 50 3c             	lea    edx,[eax+0x3c]
30002579:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000257c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:91
    tmbuf->tm_hour--;
3000257f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002582:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
30002585:	8d 50 ff             	lea    edx,[eax-0x1]
30002588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000258b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:93
  }
  day = tmbuf->tm_hour / 24;
3000258e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002591:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
30002594:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
30002599:	89 d8                	mov    eax,ebx
3000259b:	f7 ea                	imul   edx
3000259d:	c1 fa 02             	sar    edx,0x2
300025a0:	89 d8                	mov    eax,ebx
300025a2:	c1 f8 1f             	sar    eax,0x1f
300025a5:	29 c2                	sub    edx,eax
300025a7:	89 d0                	mov    eax,edx
300025a9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:94
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
300025ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025af:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
300025b2:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
300025b7:	89 d8                	mov    eax,ebx
300025b9:	f7 ea                	imul   edx
300025bb:	c1 fa 02             	sar    edx,0x2
300025be:	89 d8                	mov    eax,ebx
300025c0:	c1 f8 1f             	sar    eax,0x1f
300025c3:	29 c2                	sub    edx,eax
300025c5:	89 d0                	mov    eax,edx
300025c7:	01 c0                	add    eax,eax
300025c9:	01 d0                	add    eax,edx
300025cb:	c1 e0 03             	shl    eax,0x3
300025ce:	29 c3                	sub    ebx,eax
300025d0:	89 da                	mov    edx,ebx
300025d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025d5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
  if (tmbuf->tm_hour < 0) {
300025d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025db:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
300025de:	85 c0                	test   eax,eax
300025e0:	79 13                	jns    300025f5 <mktime+0x19b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
    tmbuf->tm_hour += 24;
300025e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025e5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
300025e8:	8d 50 18             	lea    edx,[eax+0x18]
300025eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:97
    day--;
300025f1:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
300025f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025f8:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
300025fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025fe:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
30002601:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
30002606:	89 d8                	mov    eax,ebx
30002608:	f7 ea                	imul   edx
3000260a:	d1 fa                	sar    edx,1
3000260c:	89 d8                	mov    eax,ebx
3000260e:	c1 f8 1f             	sar    eax,0x1f
30002611:	29 c2                	sub    edx,eax
30002613:	89 d0                	mov    eax,edx
30002615:	8d 14 06             	lea    edx,[esi+eax*1]
30002618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000261b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:100
  tmbuf->tm_mon %= 12;
3000261e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002621:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
30002624:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
30002629:	89 d8                	mov    eax,ebx
3000262b:	f7 ea                	imul   edx
3000262d:	d1 fa                	sar    edx,1
3000262f:	89 d8                	mov    eax,ebx
30002631:	c1 f8 1f             	sar    eax,0x1f
30002634:	29 c2                	sub    edx,eax
30002636:	89 d0                	mov    eax,edx
30002638:	01 c0                	add    eax,eax
3000263a:	01 d0                	add    eax,edx
3000263c:	c1 e0 02             	shl    eax,0x2
3000263f:	29 c3                	sub    ebx,eax
30002641:	89 da                	mov    edx,ebx
30002643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002646:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
  if (tmbuf->tm_mon < 0) {
30002649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000264c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
3000264f:	85 c0                	test   eax,eax
30002651:	79 1e                	jns    30002671 <mktime+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
    tmbuf->tm_mon += 12;
30002653:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002656:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002659:	8d 50 0c             	lea    edx,[eax+0xc]
3000265c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000265f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:103
    tmbuf->tm_year--;
30002662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002665:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002668:	8d 50 ff             	lea    edx,[eax-0x1]
3000266b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000266e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
  }
  day += (tmbuf->tm_mday - 1);
30002671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002674:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
30002677:	83 e8 01             	sub    eax,0x1
3000267a:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:106
  while (day < 0) {
3000267d:	e9 c1 00 00 00       	jmp    30002743 <mktime+0x2e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
    if(--tmbuf->tm_mon < 0) {
30002682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002685:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002688:	8d 50 ff             	lea    edx,[eax-0x1]
3000268b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000268e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
30002691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002694:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002697:	85 c0                	test   eax,eax
30002699:	79 19                	jns    300026b4 <mktime+0x25a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
      tmbuf->tm_year--;
3000269b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000269e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300026a1:	8d 50 ff             	lea    edx,[eax-0x1]
300026a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300026a7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:109
      tmbuf->tm_mon = 11;
300026aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300026ad:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
300026b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300026b7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300026ba:	83 e0 03             	and    eax,0x3
300026bd:	85 c0                	test   eax,eax
300026bf:	75 62                	jne    30002723 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111 (discriminator 1)
300026c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300026c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300026c7:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
300026cd:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300026d2:	89 d8                	mov    eax,ebx
300026d4:	f7 ea                	imul   edx
300026d6:	c1 fa 05             	sar    edx,0x5
300026d9:	89 d8                	mov    eax,ebx
300026db:	c1 f8 1f             	sar    eax,0x1f
300026de:	29 c2                	sub    edx,eax
300026e0:	89 d0                	mov    eax,edx
300026e2:	6b c0 64             	imul   eax,eax,0x64
300026e5:	29 c3                	sub    ebx,eax
300026e7:	89 d8                	mov    eax,ebx
300026e9:	85 c0                	test   eax,eax
300026eb:	75 2f                	jne    3000271c <mktime+0x2c2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111 (discriminator 4)
300026ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300026f0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300026f3:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
300026f9:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300026fe:	89 d8                	mov    eax,ebx
30002700:	f7 ea                	imul   edx
30002702:	c1 fa 07             	sar    edx,0x7
30002705:	89 d8                	mov    eax,ebx
30002707:	c1 f8 1f             	sar    eax,0x1f
3000270a:	29 c2                	sub    edx,eax
3000270c:	89 d0                	mov    eax,edx
3000270e:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002714:	29 c3                	sub    ebx,eax
30002716:	89 d8                	mov    eax,ebx
30002718:	85 c0                	test   eax,eax
3000271a:	75 07                	jne    30002723 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111 (discriminator 5)
3000271c:	ba 01 00 00 00       	mov    edx,0x1
30002721:	eb 05                	jmp    30002728 <mktime+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111 (discriminator 6)
30002723:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111 (discriminator 8)
30002728:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000272b:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
3000272e:	89 d0                	mov    eax,edx
30002730:	01 c0                	add    eax,eax
30002732:	01 d0                	add    eax,edx
30002734:	c1 e0 02             	shl    eax,0x2
30002737:	01 d8                	add    eax,ebx
30002739:	8b 84 81 40 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2c0]
30002740:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:106
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
30002743:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30002747:	0f 88 35 ff ff ff    	js     30002682 <mktime+0x228>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
3000274d:	e9 c2 00 00 00       	jmp    30002814 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
30002752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002755:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002758:	83 e0 03             	and    eax,0x3
3000275b:	85 c0                	test   eax,eax
3000275d:	75 62                	jne    300027c1 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114 (discriminator 1)
3000275f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002762:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002765:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
3000276b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002770:	89 d8                	mov    eax,ebx
30002772:	f7 ea                	imul   edx
30002774:	c1 fa 05             	sar    edx,0x5
30002777:	89 d8                	mov    eax,ebx
30002779:	c1 f8 1f             	sar    eax,0x1f
3000277c:	29 c2                	sub    edx,eax
3000277e:	89 d0                	mov    eax,edx
30002780:	6b c0 64             	imul   eax,eax,0x64
30002783:	29 c3                	sub    ebx,eax
30002785:	89 d8                	mov    eax,ebx
30002787:	85 c0                	test   eax,eax
30002789:	75 2f                	jne    300027ba <mktime+0x360>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114 (discriminator 4)
3000278b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000278e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002791:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30002797:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000279c:	89 d8                	mov    eax,ebx
3000279e:	f7 ea                	imul   edx
300027a0:	c1 fa 07             	sar    edx,0x7
300027a3:	89 d8                	mov    eax,ebx
300027a5:	c1 f8 1f             	sar    eax,0x1f
300027a8:	29 c2                	sub    edx,eax
300027aa:	89 d0                	mov    eax,edx
300027ac:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300027b2:	29 c3                	sub    ebx,eax
300027b4:	89 d8                	mov    eax,ebx
300027b6:	85 c0                	test   eax,eax
300027b8:	75 07                	jne    300027c1 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114 (discriminator 5)
300027ba:	ba 01 00 00 00       	mov    edx,0x1
300027bf:	eb 05                	jmp    300027c6 <mktime+0x36c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114 (discriminator 6)
300027c1:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114 (discriminator 8)
300027c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300027c9:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
300027cc:	89 d0                	mov    eax,edx
300027ce:	01 c0                	add    eax,eax
300027d0:	01 d0                	add    eax,edx
300027d2:	c1 e0 02             	shl    eax,0x2
300027d5:	01 d8                	add    eax,ebx
300027d7:	8b 84 81 40 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2c0]
300027de:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:115 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
300027e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300027e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
300027e7:	8d 50 01             	lea    edx,[eax+0x1]
300027ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300027ed:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
300027f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300027f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
300027f6:	83 f8 0c             	cmp    eax,0xc
300027f9:	75 19                	jne    30002814 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
      tmbuf->tm_mon = 0;
300027fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300027fe:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
      tmbuf->tm_year++;
30002805:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002808:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000280b:	8d 50 01             	lea    edx,[eax+0x1]
3000280e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002811:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
30002814:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002817:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000281a:	83 e0 03             	and    eax,0x3
3000281d:	85 c0                	test   eax,eax
3000281f:	75 62                	jne    30002883 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113 (discriminator 1)
30002821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002824:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002827:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
3000282d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002832:	89 d8                	mov    eax,ebx
30002834:	f7 ea                	imul   edx
30002836:	c1 fa 05             	sar    edx,0x5
30002839:	89 d8                	mov    eax,ebx
3000283b:	c1 f8 1f             	sar    eax,0x1f
3000283e:	29 c2                	sub    edx,eax
30002840:	89 d0                	mov    eax,edx
30002842:	6b c0 64             	imul   eax,eax,0x64
30002845:	29 c3                	sub    ebx,eax
30002847:	89 d8                	mov    eax,ebx
30002849:	85 c0                	test   eax,eax
3000284b:	75 2f                	jne    3000287c <mktime+0x422>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113 (discriminator 4)
3000284d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002850:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002853:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30002859:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000285e:	89 d8                	mov    eax,ebx
30002860:	f7 ea                	imul   edx
30002862:	c1 fa 07             	sar    edx,0x7
30002865:	89 d8                	mov    eax,ebx
30002867:	c1 f8 1f             	sar    eax,0x1f
3000286a:	29 c2                	sub    edx,eax
3000286c:	89 d0                	mov    eax,edx
3000286e:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002874:	29 c3                	sub    ebx,eax
30002876:	89 d8                	mov    eax,ebx
30002878:	85 c0                	test   eax,eax
3000287a:	75 07                	jne    30002883 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113 (discriminator 5)
3000287c:	ba 01 00 00 00       	mov    edx,0x1
30002881:	eb 05                	jmp    30002888 <mktime+0x42e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113 (discriminator 6)
30002883:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113 (discriminator 8)
30002888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000288b:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
3000288e:	89 d0                	mov    eax,edx
30002890:	01 c0                	add    eax,eax
30002892:	01 d0                	add    eax,edx
30002894:	c1 e0 02             	shl    eax,0x2
30002897:	01 d8                	add    eax,ebx
30002899:	8b 84 81 40 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2c0]
300028a0:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
300028a3:	0f 8e a9 fe ff ff    	jle    30002752 <mktime+0x2f8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
300028a9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
300028ac:	8d 50 01             	lea    edx,[eax+0x1]
300028af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300028b2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:121
  year = EPOCH_YR;
300028b5:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
300028bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300028bf:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300028c2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
300028c5:	81 ea 6c 07 00 00    	sub    edx,0x76c
300028cb:	39 d0                	cmp    eax,edx
300028cd:	7d 0a                	jge    300028d9 <mktime+0x47f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 1)
300028cf:	b8 19 fc ff ff       	mov    eax,0xfffffc19
300028d4:	e9 d0 03 00 00       	jmp    30002ca9 <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:123
  seconds = 0;
300028d9:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
  day = 0;                      // Means days since day 0 now
300028e0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
  overflow = 0;
300028e7:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:132
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
300028ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300028f1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300028f4:	05 6c 07 00 00       	add    eax,0x76c
300028f9:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
300028fc:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
300028ff:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002902:	3d 7c c6 59 00       	cmp    eax,0x59c67c
30002907:	7e 07                	jle    30002910 <mktime+0x4b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134 (discriminator 1)
30002909:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  day = (tm_year - year) * 365;
30002910:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002913:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002916:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
3000291c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
3000291f:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
30002924:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
30002927:	89 c2                	mov    edx,eax
30002929:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
3000292c:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
3000292f:	8d 58 03             	lea    ebx,[eax+0x3]
30002932:	85 c0                	test   eax,eax
30002934:	0f 48 c3             	cmovs  eax,ebx
30002937:	c1 f8 02             	sar    eax,0x2
3000293a:	83 c0 01             	add    eax,0x1
3000293d:	39 c2                	cmp    edx,eax
3000293f:	7d 04                	jge    30002945 <mktime+0x4eb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136 (discriminator 1)
30002941:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:137
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
30002945:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002948:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
3000294b:	8d 50 03             	lea    edx,[eax+0x3]
3000294e:	85 c0                	test   eax,eax
30002950:	0f 48 c2             	cmovs  eax,edx
30002953:	c1 f8 02             	sar    eax,0x2
30002956:	89 c3                	mov    ebx,eax
30002958:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
3000295b:	83 e0 03             	and    eax,0x3
3000295e:	85 c0                	test   eax,eax
30002960:	74 29                	je     3000298b <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:137 (discriminator 1)
30002962:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002965:	99                   	cdq    
30002966:	c1 ea 1e             	shr    edx,0x1e
30002969:	01 d0                	add    eax,edx
3000296b:	83 e0 03             	and    eax,0x3
3000296e:	29 d0                	sub    eax,edx
30002970:	89 c6                	mov    esi,eax
30002972:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
30002975:	99                   	cdq    
30002976:	c1 ea 1e             	shr    edx,0x1e
30002979:	01 d0                	add    eax,edx
3000297b:	83 e0 03             	and    eax,0x3
3000297e:	29 d0                	sub    eax,edx
30002980:	39 c6                	cmp    esi,eax
30002982:	7d 07                	jge    3000298b <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:137 (discriminator 3)
30002984:	b8 01 00 00 00       	mov    eax,0x1
30002989:	eb 05                	jmp    30002990 <mktime+0x536>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:137 (discriminator 4)
3000298b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:137 (discriminator 6)
30002990:	01 d8                	add    eax,ebx
30002992:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:138 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
30002995:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002998:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
3000299b:	89 c3                	mov    ebx,eax
3000299d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300029a2:	89 d8                	mov    eax,ebx
300029a4:	f7 ea                	imul   edx
300029a6:	c1 fa 05             	sar    edx,0x5
300029a9:	89 d8                	mov    eax,ebx
300029ab:	c1 f8 1f             	sar    eax,0x1f
300029ae:	89 d7                	mov    edi,edx
300029b0:	29 c7                	sub    edi,eax
300029b2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
300029b5:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300029ba:	89 d8                	mov    eax,ebx
300029bc:	f7 ea                	imul   edx
300029be:	c1 fa 05             	sar    edx,0x5
300029c1:	89 d8                	mov    eax,ebx
300029c3:	c1 f8 1f             	sar    eax,0x1f
300029c6:	29 c2                	sub    edx,eax
300029c8:	89 d0                	mov    eax,edx
300029ca:	6b c0 64             	imul   eax,eax,0x64
300029cd:	29 c3                	sub    ebx,eax
300029cf:	89 d8                	mov    eax,ebx
300029d1:	85 c0                	test   eax,eax
300029d3:	74 49                	je     30002a1e <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:138 (discriminator 1)
300029d5:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
300029d8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300029dd:	89 d8                	mov    eax,ebx
300029df:	f7 ea                	imul   edx
300029e1:	c1 fa 05             	sar    edx,0x5
300029e4:	89 d8                	mov    eax,ebx
300029e6:	c1 f8 1f             	sar    eax,0x1f
300029e9:	89 d6                	mov    esi,edx
300029eb:	29 c6                	sub    esi,eax
300029ed:	6b c6 64             	imul   eax,esi,0x64
300029f0:	89 de                	mov    esi,ebx
300029f2:	29 c6                	sub    esi,eax
300029f4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
300029f7:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300029fc:	89 d8                	mov    eax,ebx
300029fe:	f7 ea                	imul   edx
30002a00:	c1 fa 05             	sar    edx,0x5
30002a03:	89 d8                	mov    eax,ebx
30002a05:	c1 f8 1f             	sar    eax,0x1f
30002a08:	29 c2                	sub    edx,eax
30002a0a:	89 d0                	mov    eax,edx
30002a0c:	6b c0 64             	imul   eax,eax,0x64
30002a0f:	29 c3                	sub    ebx,eax
30002a11:	89 d8                	mov    eax,ebx
30002a13:	39 c6                	cmp    esi,eax
30002a15:	7d 07                	jge    30002a1e <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:138 (discriminator 3)
30002a17:	b8 01 00 00 00       	mov    eax,0x1
30002a1c:	eb 05                	jmp    30002a23 <mktime+0x5c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:138 (discriminator 4)
30002a1e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:138 (discriminator 6)
30002a23:	01 f8                	add    eax,edi
30002a25:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:139 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
30002a28:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002a2b:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002a2e:	89 c3                	mov    ebx,eax
30002a30:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002a35:	89 d8                	mov    eax,ebx
30002a37:	f7 ea                	imul   edx
30002a39:	c1 fa 07             	sar    edx,0x7
30002a3c:	89 d8                	mov    eax,ebx
30002a3e:	c1 f8 1f             	sar    eax,0x1f
30002a41:	89 d7                	mov    edi,edx
30002a43:	29 c7                	sub    edi,eax
30002a45:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002a48:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002a4d:	89 d8                	mov    eax,ebx
30002a4f:	f7 ea                	imul   edx
30002a51:	c1 fa 07             	sar    edx,0x7
30002a54:	89 d8                	mov    eax,ebx
30002a56:	c1 f8 1f             	sar    eax,0x1f
30002a59:	29 c2                	sub    edx,eax
30002a5b:	89 d0                	mov    eax,edx
30002a5d:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002a63:	29 c3                	sub    ebx,eax
30002a65:	89 d8                	mov    eax,ebx
30002a67:	85 c0                	test   eax,eax
30002a69:	74 4f                	je     30002aba <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:139 (discriminator 1)
30002a6b:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002a6e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002a73:	89 d8                	mov    eax,ebx
30002a75:	f7 ea                	imul   edx
30002a77:	c1 fa 07             	sar    edx,0x7
30002a7a:	89 d8                	mov    eax,ebx
30002a7c:	c1 f8 1f             	sar    eax,0x1f
30002a7f:	89 d6                	mov    esi,edx
30002a81:	29 c6                	sub    esi,eax
30002a83:	69 c6 90 01 00 00    	imul   eax,esi,0x190
30002a89:	89 de                	mov    esi,ebx
30002a8b:	29 c6                	sub    esi,eax
30002a8d:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
30002a90:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002a95:	89 d8                	mov    eax,ebx
30002a97:	f7 ea                	imul   edx
30002a99:	c1 fa 07             	sar    edx,0x7
30002a9c:	89 d8                	mov    eax,ebx
30002a9e:	c1 f8 1f             	sar    eax,0x1f
30002aa1:	29 c2                	sub    edx,eax
30002aa3:	89 d0                	mov    eax,edx
30002aa5:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002aab:	29 c3                	sub    ebx,eax
30002aad:	89 d8                	mov    eax,ebx
30002aaf:	39 c6                	cmp    esi,eax
30002ab1:	7d 07                	jge    30002aba <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:139 (discriminator 3)
30002ab3:	b8 01 00 00 00       	mov    eax,0x1
30002ab8:	eb 05                	jmp    30002abf <mktime+0x665>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:139 (discriminator 4)
30002aba:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:139 (discriminator 6)
30002abf:	01 f8                	add    eax,edi
30002ac1:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:141 (discriminator 6)

  yday = month = 0;
30002ac4:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
30002acb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
30002ace:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:142 (discriminator 6)
  while (month < tmbuf->tm_mon) {
30002ad1:	eb 7b                	jmp    30002b4e <mktime+0x6f4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143
    yday += _ytab[LEAPYEAR(tm_year)][month];
30002ad3:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002ad6:	83 e0 03             	and    eax,0x3
30002ad9:	85 c0                	test   eax,eax
30002adb:	75 50                	jne    30002b2d <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143 (discriminator 1)
30002add:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002ae0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002ae5:	89 d8                	mov    eax,ebx
30002ae7:	f7 ea                	imul   edx
30002ae9:	c1 fa 05             	sar    edx,0x5
30002aec:	89 d8                	mov    eax,ebx
30002aee:	c1 f8 1f             	sar    eax,0x1f
30002af1:	29 c2                	sub    edx,eax
30002af3:	89 d0                	mov    eax,edx
30002af5:	6b c0 64             	imul   eax,eax,0x64
30002af8:	29 c3                	sub    ebx,eax
30002afa:	89 d8                	mov    eax,ebx
30002afc:	85 c0                	test   eax,eax
30002afe:	75 26                	jne    30002b26 <mktime+0x6cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143 (discriminator 4)
30002b00:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002b03:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002b08:	89 d8                	mov    eax,ebx
30002b0a:	f7 ea                	imul   edx
30002b0c:	c1 fa 07             	sar    edx,0x7
30002b0f:	89 d8                	mov    eax,ebx
30002b11:	c1 f8 1f             	sar    eax,0x1f
30002b14:	29 c2                	sub    edx,eax
30002b16:	89 d0                	mov    eax,edx
30002b18:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002b1e:	29 c3                	sub    ebx,eax
30002b20:	89 d8                	mov    eax,ebx
30002b22:	85 c0                	test   eax,eax
30002b24:	75 07                	jne    30002b2d <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143 (discriminator 5)
30002b26:	ba 01 00 00 00       	mov    edx,0x1
30002b2b:	eb 05                	jmp    30002b32 <mktime+0x6d8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143 (discriminator 6)
30002b2d:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143 (discriminator 8)
30002b32:	89 d0                	mov    eax,edx
30002b34:	01 c0                	add    eax,eax
30002b36:	01 d0                	add    eax,edx
30002b38:	c1 e0 02             	shl    eax,0x2
30002b3b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
30002b3e:	01 d0                	add    eax,edx
30002b40:	8b 84 81 40 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2c0]
30002b47:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:144 (discriminator 8)
    month++;
30002b4a:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:142
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
30002b4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002b51:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002b54:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
30002b57:	0f 8f 76 ff ff ff    	jg     30002ad3 <mktime+0x679>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
30002b5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002b60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
30002b63:	83 e8 01             	sub    eax,0x1
30002b66:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147
  if (day + yday < 0) overflow|=4;
30002b69:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30002b6c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30002b6f:	01 d0                	add    eax,edx
30002b71:	85 c0                	test   eax,eax
30002b73:	79 04                	jns    30002b79 <mktime+0x71f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147 (discriminator 1)
30002b75:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148
  day += yday;
30002b79:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30002b7c:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150

  tmbuf->tm_yday = yday;
30002b7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002b82:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30002b85:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
30002b88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30002b8b:	8d 58 04             	lea    ebx,[eax+0x4]
30002b8e:	ba 93 24 49 92       	mov    edx,0x92492493
30002b93:	89 d8                	mov    eax,ebx
30002b95:	f7 ea                	imul   edx
30002b97:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002b9a:	c1 f8 02             	sar    eax,0x2
30002b9d:	89 c2                	mov    edx,eax
30002b9f:	89 d8                	mov    eax,ebx
30002ba1:	c1 f8 1f             	sar    eax,0x1f
30002ba4:	29 c2                	sub    edx,eax
30002ba6:	89 d0                	mov    eax,edx
30002ba8:	89 c2                	mov    edx,eax
30002baa:	c1 e2 03             	shl    edx,0x3
30002bad:	29 c2                	sub    edx,eax
30002baf:	89 d8                	mov    eax,ebx
30002bb1:	29 d0                	sub    eax,edx
30002bb3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30002bb6:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
30002bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002bbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
30002bbf:	c1 e0 02             	shl    eax,0x2
30002bc2:	89 c2                	mov    edx,eax
30002bc4:	c1 e2 04             	shl    edx,0x4
30002bc7:	29 c2                	sub    edx,eax
30002bc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002bcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30002bcf:	01 d0                	add    eax,edx
30002bd1:	c1 e0 02             	shl    eax,0x2
30002bd4:	89 c2                	mov    edx,eax
30002bd6:	c1 e2 04             	shl    edx,0x4
30002bd9:	29 c2                	sub    edx,eax
30002bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002bde:	8b 00                	mov    eax,DWORD PTR [eax]
30002be0:	01 d0                	add    eax,edx
30002be2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
30002be5:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
30002bea:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
30002bed:	89 c3                	mov    ebx,eax
30002bef:	ba 07 45 2e c2       	mov    edx,0xc22e4507
30002bf4:	89 d8                	mov    eax,ebx
30002bf6:	f7 ea                	imul   edx
30002bf8:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002bfb:	c1 f8 10             	sar    eax,0x10
30002bfe:	89 c2                	mov    edx,eax
30002c00:	89 d8                	mov    eax,ebx
30002c02:	c1 f8 1f             	sar    eax,0x1f
30002c05:	29 c2                	sub    edx,eax
30002c07:	89 d0                	mov    eax,edx
30002c09:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30002c0c:	7d 04                	jge    30002c12 <mktime+0x7b8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 1)
30002c0e:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:156
  seconds += day * SECS_DAY;
30002c12:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30002c15:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
30002c1b:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
30002c1e:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002c24:	8b 00                	mov    eax,DWORD PTR [eax]
30002c26:	85 c0                	test   eax,eax
30002c28:	7e 16                	jle    30002c40 <mktime+0x7e6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159 (discriminator 1)
30002c2a:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002c30:	8b 00                	mov    eax,DWORD PTR [eax]
30002c32:	ba ff ff ff 7f       	mov    edx,0x7fffffff
30002c37:	29 c2                	sub    edx,eax
30002c39:	89 d0                	mov    eax,edx
30002c3b:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
30002c3e:	7c 1b                	jl     30002c5b <mktime+0x801>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:160 (discriminator 3)
      ((libcTZ < 0) && (seconds < -libcTZ))) {
30002c40:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002c46:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
30002c48:	85 c0                	test   eax,eax
30002c4a:	79 13                	jns    30002c5f <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:160
      ((libcTZ < 0) && (seconds < -libcTZ))) {
30002c4c:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002c52:	8b 00                	mov    eax,DWORD PTR [eax]
30002c54:	f7 d8                	neg    eax
30002c56:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
30002c59:	7e 04                	jle    30002c5f <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161
          overflow|=16;
30002c5b:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:163
  }
  seconds += libcTZ;
30002c5f:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002c65:	8b 00                	mov    eax,DWORD PTR [eax]
30002c67:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:165

  if (tmbuf->tm_isdst) {
30002c6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002c6d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
30002c70:	85 c0                	test   eax,eax
30002c72:	74 0b                	je     30002c7f <mktime+0x825>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166
    dst = _dstbias;
30002c74:	8b 81 58 00 00 00    	mov    eax,DWORD PTR [ecx+0x58]
30002c7a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
30002c7d:	eb 07                	jmp    30002c86 <mktime+0x82c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:168
  } else {
    dst = 0;
30002c7f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
30002c86:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
30002c89:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
30002c8c:	7e 04                	jle    30002c92 <mktime+0x838>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171 (discriminator 1)
30002c8e:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:172
  seconds -= dst;
30002c92:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
30002c95:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174

  if (overflow) return (time_t) overflow-2;
30002c98:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
30002c9c:	74 08                	je     30002ca6 <mktime+0x84c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174 (discriminator 1)
30002c9e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30002ca1:	83 e8 02             	sub    eax,0x2
30002ca4:	eb 03                	jmp    30002ca9 <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
30002ca6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:178
}
30002ca9:	83 c4 20             	add    esp,0x20
30002cac:	5b                   	pop    ebx
30002cad:	5e                   	pop    esi
30002cae:	5f                   	pop    edi
30002caf:	5d                   	pop    ebp
30002cb0:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

30002cb1 <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
30002cb1:	8b 04 24             	mov    eax,DWORD PTR [esp]
30002cb4:	c3                   	ret    

Disassembly of section .plt:

30002cc0 <.plt>:
30002cc0:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
30002cc6:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
30002ccc:	00 00                	add    BYTE PTR [eax],al
30002cce:	00 00                	add    BYTE PTR [eax],al
30002cd0:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
30002cd6:	68 00 00 00 00       	push   0x0
30002cdb:	e9 e0 ff ff ff       	jmp    30002cc0 <__x86.get_pc_thunk.ax+0xf>
30002ce0:	ff a3 10 00 00 00    	jmp    DWORD PTR [ebx+0x10]
30002ce6:	68 08 00 00 00       	push   0x8
30002ceb:	e9 d0 ff ff ff       	jmp    30002cc0 <__x86.get_pc_thunk.ax+0xf>

Disassembly of section .text.__x86.get_pc_thunk.bx:

30002cf0 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
30002cf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
30002cf3:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.di:

30002cf4 <__x86.get_pc_thunk.di>:
__x86.get_pc_thunk.di():
30002cf4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
30002cf7:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

30002cf8 <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
30002cf8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
30002cfb:	c3                   	ret    

Disassembly of section .eh_frame:

30002cfc <.eh_frame>:
30002cfc:	14 00                	adc    al,0x0
30002cfe:	00 00                	add    BYTE PTR [eax],al
30002d00:	00 00                	add    BYTE PTR [eax],al
30002d02:	00 00                	add    BYTE PTR [eax],al
30002d04:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
30002d07:	00 01                	add    BYTE PTR [ecx],al
30002d09:	7c 08                	jl     30002d13 <__x86.get_pc_thunk.cx+0x1b>
30002d0b:	01 1b                	add    DWORD PTR [ebx],ebx
30002d0d:	0c 04                	or     al,0x4
30002d0f:	04 88                	add    al,0x88
30002d11:	01 00                	add    DWORD PTR [eax],eax
30002d13:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002d16:	00 00                	add    BYTE PTR [eax],al
30002d18:	1c 00                	sbb    al,0x0
30002d1a:	00 00                	add    BYTE PTR [eax],al
30002d1c:	e4 d2                	in     al,0xd2
30002d1e:	ff                   	(bad)  
30002d1f:	ff                   	(bad)  
30002d20:	38 00                	cmp    BYTE PTR [eax],al
30002d22:	00 00                	add    BYTE PTR [eax],al
30002d24:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002d27:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d2d:	74 c5                	je     30002cf4 <__x86.get_pc_thunk.di>
30002d2f:	0c 04                	or     al,0x4
30002d31:	04 00                	add    al,0x0
30002d33:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002d36:	00 00                	add    BYTE PTR [eax],al
30002d38:	3c 00                	cmp    al,0x0
30002d3a:	00 00                	add    BYTE PTR [eax],al
30002d3c:	fc                   	cld    
30002d3d:	d2 ff                	sar    bh,cl
30002d3f:	ff                   	(bad)  
30002d40:	38 00                	cmp    BYTE PTR [eax],al
30002d42:	00 00                	add    BYTE PTR [eax],al
30002d44:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002d47:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d4d:	74 c5                	je     30002d14 <__x86.get_pc_thunk.cx+0x1c>
30002d4f:	0c 04                	or     al,0x4
30002d51:	04 00                	add    al,0x0
30002d53:	00 10                	add    BYTE PTR [eax],dl
30002d55:	00 00                	add    BYTE PTR [eax],al
30002d57:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
30002d5b:	00 55 ff             	add    BYTE PTR [ebp-0x1],dl
30002d5e:	ff                   	(bad)  
30002d5f:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30002d62:	00 00                	add    BYTE PTR [eax],al
30002d64:	00 00                	add    BYTE PTR [eax],al
30002d66:	00 00                	add    BYTE PTR [eax],al
30002d68:	24 00                	and    al,0x0
30002d6a:	00 00                	add    BYTE PTR [eax],al
30002d6c:	70 00                	jo     30002d6e <__x86.get_pc_thunk.cx+0x76>
30002d6e:	00 00                	add    BYTE PTR [eax],al
30002d70:	00 d3                	add    bl,dl
30002d72:	ff                   	(bad)  
30002d73:	ff 55 00             	call   DWORD PTR [ebp+0x0]
30002d76:	00 00                	add    BYTE PTR [eax],al
30002d78:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002d7b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d81:	42                   	inc    edx
30002d82:	86 03                	xchg   BYTE PTR [ebx],al
30002d84:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
30002d88:	c3                   	ret    
30002d89:	41                   	inc    ecx
30002d8a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002d8e:	04 04                	add    al,0x4
30002d90:	24 00                	and    al,0x0
30002d92:	00 00                	add    BYTE PTR [eax],al
30002d94:	98                   	cwde   
30002d95:	00 00                	add    BYTE PTR [eax],al
30002d97:	00 2d d3 ff ff 55    	add    BYTE PTR ds:0x55ffffd3,ch
30002d9d:	00 00                	add    BYTE PTR [eax],al
30002d9f:	00 00                	add    BYTE PTR [eax],al
30002da1:	41                   	inc    ecx
30002da2:	0e                   	push   cs
30002da3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002da9:	42                   	inc    edx
30002daa:	86 03                	xchg   BYTE PTR [ebx],al
30002dac:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
30002db0:	c3                   	ret    
30002db1:	41                   	inc    ecx
30002db2:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002db6:	04 04                	add    al,0x4
30002db8:	24 00                	and    al,0x0
30002dba:	00 00                	add    BYTE PTR [eax],al
30002dbc:	c0 00 00             	rol    BYTE PTR [eax],0x0
30002dbf:	00 5c d3 ff          	add    BYTE PTR [ebx+edx*8-0x1],bl
30002dc3:	ff 97 00 00 00 00    	call   DWORD PTR [edi+0x0]
30002dc9:	41                   	inc    ecx
30002dca:	0e                   	push   cs
30002dcb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002dd1:	42                   	inc    edx
30002dd2:	86 03                	xchg   BYTE PTR [ebx],al
30002dd4:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
30002dd8:	c3                   	ret    
30002dd9:	41                   	inc    ecx
30002dda:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002dde:	04 04                	add    al,0x4
30002de0:	10 00                	adc    BYTE PTR [eax],al
30002de2:	00 00                	add    BYTE PTR [eax],al
30002de4:	e8 00 00 00 08       	call   38002de9 <ticksToWait+0x7ffe72d>
30002de9:	ff                   	(bad)  
30002dea:	ff                   	(bad)  
30002deb:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30002dee:	00 00                	add    BYTE PTR [eax],al
30002df0:	00 00                	add    BYTE PTR [eax],al
30002df2:	00 00                	add    BYTE PTR [eax],al
30002df4:	20 00                	and    BYTE PTR [eax],al
30002df6:	00 00                	add    BYTE PTR [eax],al
30002df8:	fc                   	cld    
30002df9:	00 00                	add    BYTE PTR [eax],al
30002dfb:	00 b8 d3 ff ff 77    	add    BYTE PTR [eax+0x77ffffd3],bh
30002e01:	00 00                	add    BYTE PTR [eax],al
30002e03:	00 00                	add    BYTE PTR [eax],al
30002e05:	41                   	inc    ecx
30002e06:	0e                   	push   cs
30002e07:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e0d:	44                   	inc    esp
30002e0e:	83 03 02             	add    DWORD PTR [ebx],0x2
30002e11:	6f                   	outs   dx,DWORD PTR ds:[esi]
30002e12:	c5 c3 0c             	(bad)  
30002e15:	04 04                	add    al,0x4
30002e17:	00 20                	add    BYTE PTR [eax],ah
30002e19:	00 00                	add    BYTE PTR [eax],al
30002e1b:	00 20                	add    BYTE PTR [eax],ah
30002e1d:	01 00                	add    DWORD PTR [eax],eax
30002e1f:	00 0b                	add    BYTE PTR [ebx],cl
30002e21:	d4 ff                	aam    0xff
30002e23:	ff                   	(bad)  
30002e24:	bb 00 00 00 00       	mov    ebx,0x0
30002e29:	41                   	inc    ecx
30002e2a:	0e                   	push   cs
30002e2b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e31:	44                   	inc    esp
30002e32:	83 03 02             	add    DWORD PTR [ebx],0x2
30002e35:	b3 c5                	mov    bl,0xc5
30002e37:	c3                   	ret    
30002e38:	0c 04                	or     al,0x4
30002e3a:	04 00                	add    al,0x0
30002e3c:	20 00                	and    BYTE PTR [eax],al
30002e3e:	00 00                	add    BYTE PTR [eax],al
30002e40:	44                   	inc    esp
30002e41:	01 00                	add    DWORD PTR [eax],eax
30002e43:	00 a2 d4 ff ff bb    	add    BYTE PTR [edx-0x4400002c],ah
30002e49:	00 00                	add    BYTE PTR [eax],al
30002e4b:	00 00                	add    BYTE PTR [eax],al
30002e4d:	41                   	inc    ecx
30002e4e:	0e                   	push   cs
30002e4f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e55:	44                   	inc    esp
30002e56:	83 03 02             	add    DWORD PTR [ebx],0x2
30002e59:	b3 c5                	mov    bl,0xc5
30002e5b:	c3                   	ret    
30002e5c:	0c 04                	or     al,0x4
30002e5e:	04 00                	add    al,0x0
30002e60:	1c 00                	sbb    al,0x0
30002e62:	00 00                	add    BYTE PTR [eax],al
30002e64:	68 01 00 00 39       	push   0x39000001
30002e69:	d5 ff                	aad    0xff
30002e6b:	ff 5c 00 00          	call   FWORD PTR [eax+eax*1+0x0]
30002e6f:	00 00                	add    BYTE PTR [eax],al
30002e71:	41                   	inc    ecx
30002e72:	0e                   	push   cs
30002e73:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e79:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
30002e7c:	0c 04                	or     al,0x4
30002e7e:	04 00                	add    al,0x0
30002e80:	20 00                	and    BYTE PTR [eax],al
30002e82:	00 00                	add    BYTE PTR [eax],al
30002e84:	88 01                	mov    BYTE PTR [ecx],al
30002e86:	00 00                	add    BYTE PTR [eax],al
30002e88:	78 d5                	js     30002e5f <__x86.get_pc_thunk.cx+0x167>
30002e8a:	ff                   	(bad)  
30002e8b:	ff aa 00 00 00 00    	jmp    FWORD PTR [edx+0x0]
30002e91:	41                   	inc    ecx
30002e92:	0e                   	push   cs
30002e93:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e99:	44                   	inc    esp
30002e9a:	83 03 02             	add    DWORD PTR [ebx],0x2
30002e9d:	a2 c5 c3 0c 04       	mov    ds:0x40cc3c5,al
30002ea2:	04 00                	add    al,0x0
30002ea4:	20 00                	and    BYTE PTR [eax],al
30002ea6:	00 00                	add    BYTE PTR [eax],al
30002ea8:	ac                   	lods   al,BYTE PTR ds:[esi]
30002ea9:	01 00                	add    DWORD PTR [eax],eax
30002eab:	00 fe                	add    dh,bh
30002ead:	d5 ff                	aad    0xff
30002eaf:	ff c1                	inc    ecx
30002eb1:	01 00                	add    DWORD PTR [eax],eax
30002eb3:	00 00                	add    BYTE PTR [eax],al
30002eb5:	41                   	inc    ecx
30002eb6:	0e                   	push   cs
30002eb7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ebd:	44                   	inc    esp
30002ebe:	83 03 03             	add    DWORD PTR [ebx],0x3
30002ec1:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
30002ec6:	04 04                	add    al,0x4
30002ec8:	20 00                	and    BYTE PTR [eax],al
30002eca:	00 00                	add    BYTE PTR [eax],al
30002ecc:	d0 01                	rol    BYTE PTR [ecx],1
30002ece:	00 00                	add    BYTE PTR [eax],al
30002ed0:	9c                   	pushf  
30002ed1:	d7                   	xlat   BYTE PTR ds:[ebx]
30002ed2:	ff                   	(bad)  
30002ed3:	ff 2d 00 00 00 00    	jmp    FWORD PTR ds:0x0
30002ed9:	41                   	inc    ecx
30002eda:	0e                   	push   cs
30002edb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ee1:	44                   	inc    esp
30002ee2:	83 03 65             	add    DWORD PTR [ebx],0x65
30002ee5:	c5 c3 0c             	(bad)  
30002ee8:	04 04                	add    al,0x4
30002eea:	00 00                	add    BYTE PTR [eax],al
30002eec:	20 00                	and    BYTE PTR [eax],al
30002eee:	00 00                	add    BYTE PTR [eax],al
30002ef0:	f4                   	hlt    
30002ef1:	01 00                	add    DWORD PTR [eax],eax
30002ef3:	00 a5 d7 ff ff 2a    	add    BYTE PTR [ebp+0x2affffd7],ah
30002ef9:	00 00                	add    BYTE PTR [eax],al
30002efb:	00 00                	add    BYTE PTR [eax],al
30002efd:	41                   	inc    ecx
30002efe:	0e                   	push   cs
30002eff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f05:	44                   	inc    esp
30002f06:	83 03 62             	add    DWORD PTR [ebx],0x62
30002f09:	c5 c3 0c             	(bad)  
30002f0c:	04 04                	add    al,0x4
30002f0e:	00 00                	add    BYTE PTR [eax],al
30002f10:	24 00                	and    al,0x0
30002f12:	00 00                	add    BYTE PTR [eax],al
30002f14:	18 02                	sbb    BYTE PTR [edx],al
30002f16:	00 00                	add    BYTE PTR [eax],al
30002f18:	ab                   	stos   DWORD PTR es:[edi],eax
30002f19:	d7                   	xlat   BYTE PTR ds:[ebx]
30002f1a:	ff                   	(bad)  
30002f1b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
30002f21:	41                   	inc    ecx
30002f22:	0e                   	push   cs
30002f23:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f29:	42                   	inc    edx
30002f2a:	86 03                	xchg   BYTE PTR [ebx],al
30002f2c:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
30002f33:	c5 
30002f34:	0c 04                	or     al,0x4
30002f36:	04 00                	add    al,0x0
30002f38:	20 00                	and    BYTE PTR [eax],al
30002f3a:	00 00                	add    BYTE PTR [eax],al
30002f3c:	40                   	inc    eax
30002f3d:	02 00                	add    al,BYTE PTR [eax]
30002f3f:	00 b8 d7 ff ff 31    	add    BYTE PTR [eax+0x31ffffd7],bh
30002f45:	00 00                	add    BYTE PTR [eax],al
30002f47:	00 00                	add    BYTE PTR [eax],al
30002f49:	41                   	inc    ecx
30002f4a:	0e                   	push   cs
30002f4b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f51:	44                   	inc    esp
30002f52:	83 03 69             	add    DWORD PTR [ebx],0x69
30002f55:	c5 c3 0c             	(bad)  
30002f58:	04 04                	add    al,0x4
30002f5a:	00 00                	add    BYTE PTR [eax],al
30002f5c:	20 00                	and    BYTE PTR [eax],al
30002f5e:	00 00                	add    BYTE PTR [eax],al
30002f60:	64 02 00             	add    al,BYTE PTR fs:[eax]
30002f63:	00 c8                	add    al,cl
30002f65:	d7                   	xlat   BYTE PTR ds:[ebx]
30002f66:	ff                   	(bad)  
30002f67:	ff 26                	jmp    DWORD PTR [esi]
30002f69:	00 00                	add    BYTE PTR [eax],al
30002f6b:	00 00                	add    BYTE PTR [eax],al
30002f6d:	41                   	inc    ecx
30002f6e:	0e                   	push   cs
30002f6f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f75:	41                   	inc    ecx
30002f76:	83 03 60             	add    DWORD PTR [ebx],0x60
30002f79:	c3                   	ret    
30002f7a:	41                   	inc    ecx
30002f7b:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002f7e:	04 00                	add    al,0x0
30002f80:	20 00                	and    BYTE PTR [eax],al
30002f82:	00 00                	add    BYTE PTR [eax],al
30002f84:	88 02                	mov    BYTE PTR [edx],al
30002f86:	00 00                	add    BYTE PTR [eax],al
30002f88:	ca d7 ff             	retf   0xffd7
30002f8b:	ff 43 00             	inc    DWORD PTR [ebx+0x0]
30002f8e:	00 00                	add    BYTE PTR [eax],al
30002f90:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002f93:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f99:	44                   	inc    esp
30002f9a:	83 03 7a             	add    DWORD PTR [ebx],0x7a
30002f9d:	c3                   	ret    
30002f9e:	41                   	inc    ecx
30002f9f:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002fa2:	04 00                	add    al,0x0
30002fa4:	20 00                	and    BYTE PTR [eax],al
30002fa6:	00 00                	add    BYTE PTR [eax],al
30002fa8:	ac                   	lods   al,BYTE PTR ds:[esi]
30002fa9:	02 00                	add    al,BYTE PTR [eax]
30002fab:	00 e9                	add    cl,ch
30002fad:	d7                   	xlat   BYTE PTR ds:[ebx]
30002fae:	ff                   	(bad)  
30002faf:	ff 2f                	jmp    FWORD PTR [edi]
30002fb1:	00 00                	add    BYTE PTR [eax],al
30002fb3:	00 00                	add    BYTE PTR [eax],al
30002fb5:	41                   	inc    ecx
30002fb6:	0e                   	push   cs
30002fb7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002fbd:	44                   	inc    esp
30002fbe:	83 03 66             	add    DWORD PTR [ebx],0x66
30002fc1:	c3                   	ret    
30002fc2:	41                   	inc    ecx
30002fc3:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002fc6:	04 00                	add    al,0x0
30002fc8:	20 00                	and    BYTE PTR [eax],al
30002fca:	00 00                	add    BYTE PTR [eax],al
30002fcc:	d0 02                	rol    BYTE PTR [edx],1
30002fce:	00 00                	add    BYTE PTR [eax],al
30002fd0:	f4                   	hlt    
30002fd1:	d7                   	xlat   BYTE PTR ds:[ebx]
30002fd2:	ff                   	(bad)  
30002fd3:	ff                   	(bad)  
30002fd4:	ba 00 00 00 00       	mov    edx,0x0
30002fd9:	41                   	inc    ecx
30002fda:	0e                   	push   cs
30002fdb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002fe1:	44                   	inc    esp
30002fe2:	83 03 02             	add    DWORD PTR [ebx],0x2
30002fe5:	b2 c5                	mov    dl,0xc5
30002fe7:	c3                   	ret    
30002fe8:	0c 04                	or     al,0x4
30002fea:	04 00                	add    al,0x0
30002fec:	24 00                	and    al,0x0
30002fee:	00 00                	add    BYTE PTR [eax],al
30002ff0:	f4                   	hlt    
30002ff1:	02 00                	add    al,BYTE PTR [eax]
30002ff3:	00 8c d8 ff ff 3a 00 	add    BYTE PTR [eax+ebx*8+0x3affff],cl
30002ffa:	00 00                	add    BYTE PTR [eax],al
30002ffc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002fff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003005:	45                   	inc    ebp
30003006:	86 03                	xchg   BYTE PTR [ebx],al
30003008:	83 04 6f c3          	add    DWORD PTR [edi+ebp*2],0xffffffc3
3000300c:	41                   	inc    ecx
3000300d:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30003011:	04 04                	add    al,0x4
30003013:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003016:	00 00                	add    BYTE PTR [eax],al
30003018:	1c 03                	sbb    al,0x3
3000301a:	00 00                	add    BYTE PTR [eax],al
3000301c:	9e                   	sahf   
3000301d:	d8 ff                	fdivr  st,st(7)
3000301f:	ff                   	(bad)  
30003020:	3c 00                	cmp    al,0x0
30003022:	00 00                	add    BYTE PTR [eax],al
30003024:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003027:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000302d:	45                   	inc    ebp
3000302e:	86 03                	xchg   BYTE PTR [ebx],al
30003030:	83 04 71 c3          	add    DWORD PTR [ecx+esi*2],0xffffffc3
30003034:	41                   	inc    ecx
30003035:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30003039:	04 04                	add    al,0x4
3000303b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
3000303e:	00 00                	add    BYTE PTR [eax],al
30003040:	44                   	inc    esp
30003041:	03 00                	add    eax,DWORD PTR [eax]
30003043:	00 b2 d8 ff ff 3e    	add    BYTE PTR [edx+0x3effffd8],dh
30003049:	00 00                	add    BYTE PTR [eax],al
3000304b:	00 00                	add    BYTE PTR [eax],al
3000304d:	41                   	inc    ecx
3000304e:	0e                   	push   cs
3000304f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003055:	45                   	inc    ebp
30003056:	86 03                	xchg   BYTE PTR [ebx],al
30003058:	83 04 73 c3          	add    DWORD PTR [ebx+esi*2],0xffffffc3
3000305c:	41                   	inc    ecx
3000305d:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30003061:	04 04                	add    al,0x4
30003063:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003066:	00 00                	add    BYTE PTR [eax],al
30003068:	6c                   	ins    BYTE PTR es:[edi],dx
30003069:	03 00                	add    eax,DWORD PTR [eax]
3000306b:	00 c8                	add    al,cl
3000306d:	d8 ff                	fdivr  st,st(7)
3000306f:	ff 40 00             	inc    DWORD PTR [eax+0x0]
30003072:	00 00                	add    BYTE PTR [eax],al
30003074:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003077:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000307d:	45                   	inc    ebp
3000307e:	86 03                	xchg   BYTE PTR [ebx],al
30003080:	83 04 75 c3 41 c6 41 	add    DWORD PTR [esi*2+0x41c641c3],0xffffffc5
30003087:	c5 
30003088:	0c 04                	or     al,0x4
3000308a:	04 00                	add    al,0x0
3000308c:	24 00                	and    al,0x0
3000308e:	00 00                	add    BYTE PTR [eax],al
30003090:	94                   	xchg   esp,eax
30003091:	03 00                	add    eax,DWORD PTR [eax]
30003093:	00 e0                	add    al,ah
30003095:	d8 ff                	fdivr  st,st(7)
30003097:	ff 42 00             	inc    DWORD PTR [edx+0x0]
3000309a:	00 00                	add    BYTE PTR [eax],al
3000309c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000309f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030a5:	45                   	inc    ebp
300030a6:	86 03                	xchg   BYTE PTR [ebx],al
300030a8:	83 04 77 c3          	add    DWORD PTR [edi+esi*2],0xffffffc3
300030ac:	41                   	inc    ecx
300030ad:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
300030b1:	04 04                	add    al,0x4
300030b3:	00 20                	add    BYTE PTR [eax],ah
300030b5:	00 00                	add    BYTE PTR [eax],al
300030b7:	00 bc 03 00 00 fa d8 	add    BYTE PTR [ebx+eax*1-0x27060000],bh
300030be:	ff                   	(bad)  
300030bf:	ff b1 00 00 00 00    	push   DWORD PTR [ecx+0x0]
300030c5:	41                   	inc    ecx
300030c6:	0e                   	push   cs
300030c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030cd:	44                   	inc    esp
300030ce:	83 03 02             	add    DWORD PTR [ebx],0x2
300030d1:	a9 c5 c3 0c 04       	test   eax,0x40cc3c5
300030d6:	04 00                	add    al,0x0
300030d8:	20 00                	and    BYTE PTR [eax],al
300030da:	00 00                	add    BYTE PTR [eax],al
300030dc:	e0 03                	loopne 300030e1 <__x86.get_pc_thunk.cx+0x3e9>
300030de:	00 00                	add    BYTE PTR [eax],al
300030e0:	87 d9                	xchg   ecx,ebx
300030e2:	ff                   	(bad)  
300030e3:	ff 1f                	call   FWORD PTR [edi]
300030e5:	00 00                	add    BYTE PTR [eax],al
300030e7:	00 00                	add    BYTE PTR [eax],al
300030e9:	41                   	inc    ecx
300030ea:	0e                   	push   cs
300030eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030f1:	44                   	inc    esp
300030f2:	83 03 56             	add    DWORD PTR [ebx],0x56
300030f5:	c3                   	ret    
300030f6:	41                   	inc    ecx
300030f7:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300030fa:	04 00                	add    al,0x0
300030fc:	1c 00                	sbb    al,0x0
300030fe:	00 00                	add    BYTE PTR [eax],al
30003100:	04 04                	add    al,0x4
30003102:	00 00                	add    BYTE PTR [eax],al
30003104:	82                   	(bad)  
30003105:	d9 ff                	fcos   
30003107:	ff 34 00             	push   DWORD PTR [eax+eax*1]
3000310a:	00 00                	add    BYTE PTR [eax],al
3000310c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000310f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003115:	70 c5                	jo     300030dc <__x86.get_pc_thunk.cx+0x3e4>
30003117:	0c 04                	or     al,0x4
30003119:	04 00                	add    al,0x0
3000311b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000311e:	00 00                	add    BYTE PTR [eax],al
30003120:	24 04                	and    al,0x4
30003122:	00 00                	add    BYTE PTR [eax],al
30003124:	96                   	xchg   esi,eax
30003125:	d9 ff                	fcos   
30003127:	ff 34 00             	push   DWORD PTR [eax+eax*1]
3000312a:	00 00                	add    BYTE PTR [eax],al
3000312c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000312f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003135:	70 c5                	jo     300030fc <__x86.get_pc_thunk.cx+0x404>
30003137:	0c 04                	or     al,0x4
30003139:	04 00                	add    al,0x0
3000313b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000313e:	00 00                	add    BYTE PTR [eax],al
30003140:	44                   	inc    esp
30003141:	04 00                	add    al,0x0
30003143:	00 aa d9 ff ff 37    	add    BYTE PTR [edx+0x37ffffd9],ch
30003149:	00 00                	add    BYTE PTR [eax],al
3000314b:	00 00                	add    BYTE PTR [eax],al
3000314d:	41                   	inc    ecx
3000314e:	0e                   	push   cs
3000314f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003155:	73 c5                	jae    3000311c <__x86.get_pc_thunk.cx+0x424>
30003157:	0c 04                	or     al,0x4
30003159:	04 00                	add    al,0x0
3000315b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
3000315e:	00 00                	add    BYTE PTR [eax],al
30003160:	64                   	fs
30003161:	04 00                	add    al,0x0
30003163:	00 c1                	add    cl,al
30003165:	d9 ff                	fcos   
30003167:	ff 72 00             	push   DWORD PTR [edx+0x0]
3000316a:	00 00                	add    BYTE PTR [eax],al
3000316c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000316f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003175:	45                   	inc    ebp
30003176:	86 03                	xchg   BYTE PTR [ebx],al
30003178:	83 04 02 67          	add    DWORD PTR [edx+eax*1],0x67
3000317c:	c3                   	ret    
3000317d:	41                   	inc    ecx
3000317e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30003182:	04 04                	add    al,0x4
30003184:	1c 00                	sbb    al,0x0
30003186:	00 00                	add    BYTE PTR [eax],al
30003188:	8c 04 00             	mov    WORD PTR [eax+eax*1],es
3000318b:	00 0b                	add    BYTE PTR [ebx],cl
3000318d:	da ff                	(bad)  
3000318f:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
30003195:	41                   	inc    ecx
30003196:	0e                   	push   cs
30003197:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000319d:	59                   	pop    ecx
3000319e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300031a1:	04 00                	add    al,0x0
300031a3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300031a6:	00 00                	add    BYTE PTR [eax],al
300031a8:	ac                   	lods   al,BYTE PTR ds:[esi]
300031a9:	04 00                	add    al,0x0
300031ab:	00 08                	add    BYTE PTR [eax],cl
300031ad:	da ff                	(bad)  
300031af:	ff 29                	jmp    FWORD PTR [ecx]
300031b1:	00 00                	add    BYTE PTR [eax],al
300031b3:	00 00                	add    BYTE PTR [eax],al
300031b5:	41                   	inc    ecx
300031b6:	0e                   	push   cs
300031b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300031bd:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
300031c1:	04 00                	add    al,0x0
300031c3:	00 20                	add    BYTE PTR [eax],ah
300031c5:	00 00                	add    BYTE PTR [eax],al
300031c7:	00 cc                	add    ah,cl
300031c9:	04 00                	add    al,0x0
300031cb:	00 11                	add    BYTE PTR [ecx],dl
300031cd:	da ff                	(bad)  
300031cf:	ff ed                	jmp    <internal disassembler error>
300031d1:	01 00                	add    DWORD PTR [eax],eax
300031d3:	00 00                	add    BYTE PTR [eax],al
300031d5:	41                   	inc    ecx
300031d6:	0e                   	push   cs
300031d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300031dd:	44                   	inc    esp
300031de:	83 03 03             	add    DWORD PTR [ebx],0x3
300031e1:	e5 01                	in     eax,0x1
300031e3:	c5 c3 0c             	(bad)  
300031e6:	04 04                	add    al,0x4
300031e8:	20 00                	and    BYTE PTR [eax],al
300031ea:	00 00                	add    BYTE PTR [eax],al
300031ec:	f0 04 00             	lock add al,0x0
300031ef:	00 da                	add    dl,bl
300031f1:	db ff                	(bad)  
300031f3:	ff 4c 00 00          	dec    DWORD PTR [eax+eax*1+0x0]
300031f7:	00 00                	add    BYTE PTR [eax],al
300031f9:	41                   	inc    ecx
300031fa:	0e                   	push   cs
300031fb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003201:	44                   	inc    esp
30003202:	83 03 02             	add    DWORD PTR [ebx],0x2
30003205:	44                   	inc    esp
30003206:	c5 c3 0c             	(bad)  
30003209:	04 04                	add    al,0x4
3000320b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000320e:	00 00                	add    BYTE PTR [eax],al
30003210:	14 05                	adc    al,0x5
30003212:	00 00                	add    BYTE PTR [eax],al
30003214:	02 dc                	add    bl,ah
30003216:	ff                   	(bad)  
30003217:	ff 1c 00             	call   FWORD PTR [eax+eax*1]
3000321a:	00 00                	add    BYTE PTR [eax],al
3000321c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000321f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003225:	58                   	pop    eax
30003226:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003229:	04 00                	add    al,0x0
3000322b:	00 28                	add    BYTE PTR [eax],ch
3000322d:	00 00                	add    BYTE PTR [eax],al
3000322f:	00 34 05 00 00 fe db 	add    BYTE PTR [eax*1-0x24020000],dh
30003236:	ff                   	(bad)  
30003237:	ff 59 00             	call   FWORD PTR [ecx+0x0]
3000323a:	00 00                	add    BYTE PTR [eax],al
3000323c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000323f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003245:	46                   	inc    esi
30003246:	87 03                	xchg   DWORD PTR [ebx],eax
30003248:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
3000324b:	05 02 4c c3 41       	add    eax,0x41c34c02
30003250:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
30003254:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003257:	04 1c                	add    al,0x1c
30003259:	00 00                	add    BYTE PTR [eax],al
3000325b:	00 60 05             	add    BYTE PTR [eax+0x5],ah
3000325e:	00 00                	add    BYTE PTR [eax],al
30003260:	2b dc                	sub    ebx,esp
30003262:	ff                   	(bad)  
30003263:	ff 20                	jmp    DWORD PTR [eax]
30003265:	00 00                	add    BYTE PTR [eax],al
30003267:	00 00                	add    BYTE PTR [eax],al
30003269:	41                   	inc    ecx
3000326a:	0e                   	push   cs
3000326b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003271:	5c                   	pop    esp
30003272:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003275:	04 00                	add    al,0x0
30003277:	00 10                	add    BYTE PTR [eax],dl
30003279:	00 00                	add    BYTE PTR [eax],al
3000327b:	00 80 05 00 00 74    	add    BYTE PTR [eax+0x74000005],al
30003281:	fa                   	cli    
30003282:	ff                   	(bad)  
30003283:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30003286:	00 00                	add    BYTE PTR [eax],al
30003288:	00 00                	add    BYTE PTR [eax],al
3000328a:	00 00                	add    BYTE PTR [eax],al
3000328c:	20 00                	and    BYTE PTR [eax],al
3000328e:	00 00                	add    BYTE PTR [eax],al
30003290:	94                   	xchg   esp,eax
30003291:	05 00 00 18 dc       	add    eax,0xdc180000
30003296:	ff                   	(bad)  
30003297:	ff 60 00             	jmp    DWORD PTR [eax+0x0]
3000329a:	00 00                	add    BYTE PTR [eax],al
3000329c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000329f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300032a5:	44                   	inc    esp
300032a6:	83 03 02             	add    DWORD PTR [ebx],0x2
300032a9:	58                   	pop    eax
300032aa:	c5 c3 0c             	(bad)  
300032ad:	04 04                	add    al,0x4
300032af:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300032b2:	00 00                	add    BYTE PTR [eax],al
300032b4:	b8 05 00 00 54       	mov    eax,0x54000005
300032b9:	dc ff                	fdiv   st(7),st
300032bb:	ff 87 00 00 00 00    	inc    DWORD PTR [edi+0x0]
300032c1:	41                   	inc    ecx
300032c2:	0e                   	push   cs
300032c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300032c9:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
300032cf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300032d2:	00 00                	add    BYTE PTR [eax],al
300032d4:	d8 05 00 00 bb dc    	fadd   DWORD PTR ds:0xdcbb0000
300032da:	ff                   	(bad)  
300032db:	ff                   	(bad)  
300032dc:	39 00                	cmp    DWORD PTR [eax],eax
300032de:	00 00                	add    BYTE PTR [eax],al
300032e0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300032e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300032e9:	75 c5                	jne    300032b0 <__x86.get_pc_thunk.cx+0x5b8>
300032eb:	0c 04                	or     al,0x4
300032ed:	04 00                	add    al,0x0
300032ef:	00 20                	add    BYTE PTR [eax],ah
300032f1:	00 00                	add    BYTE PTR [eax],al
300032f3:	00 f8                	add    al,bh
300032f5:	05 00 00 d4 dc       	add    eax,0xdcd40000
300032fa:	ff                   	(bad)  
300032fb:	ff d4                	call   esp
300032fd:	01 00                	add    DWORD PTR [eax],eax
300032ff:	00 00                	add    BYTE PTR [eax],al
30003301:	41                   	inc    ecx
30003302:	0e                   	push   cs
30003303:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003309:	44                   	inc    esp
3000330a:	83 03 03             	add    DWORD PTR [ebx],0x3
3000330d:	cc                   	int3   
3000330e:	01 c5                	add    ebp,eax
30003310:	c3                   	ret    
30003311:	0c 04                	or     al,0x4
30003313:	04 1c                	add    al,0x1c
30003315:	00 00                	add    BYTE PTR [eax],al
30003317:	00 1c 06             	add    BYTE PTR [esi+eax*1],bl
3000331a:	00 00                	add    BYTE PTR [eax],al
3000331c:	84 de                	test   dh,bl
3000331e:	ff                   	(bad)  
3000331f:	ff 20                	jmp    DWORD PTR [eax]
30003321:	00 00                	add    BYTE PTR [eax],al
30003323:	00 00                	add    BYTE PTR [eax],al
30003325:	41                   	inc    ecx
30003326:	0e                   	push   cs
30003327:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000332d:	5c                   	pop    esp
3000332e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003331:	04 00                	add    al,0x0
30003333:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003336:	00 00                	add    BYTE PTR [eax],al
30003338:	3c 06                	cmp    al,0x6
3000333a:	00 00                	add    BYTE PTR [eax],al
3000333c:	84 de                	test   dh,bl
3000333e:	ff                   	(bad)  
3000333f:	ff 1b                	call   FWORD PTR [ebx]
30003341:	00 00                	add    BYTE PTR [eax],al
30003343:	00 00                	add    BYTE PTR [eax],al
30003345:	41                   	inc    ecx
30003346:	0e                   	push   cs
30003347:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000334d:	57                   	push   edi
3000334e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003351:	04 00                	add    al,0x0
30003353:	00 20                	add    BYTE PTR [eax],ah
30003355:	00 00                	add    BYTE PTR [eax],al
30003357:	00 5c 06 00          	add    BYTE PTR [esi+eax*1+0x0],bl
3000335b:	00 7f de             	add    BYTE PTR [edi-0x22],bh
3000335e:	ff                   	(bad)  
3000335f:	ff 32                	push   DWORD PTR [edx]
30003361:	00 00                	add    BYTE PTR [eax],al
30003363:	00 00                	add    BYTE PTR [eax],al
30003365:	41                   	inc    ecx
30003366:	0e                   	push   cs
30003367:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000336d:	44                   	inc    esp
3000336e:	83 03 6a             	add    DWORD PTR [ebx],0x6a
30003371:	c5 c3 0c             	(bad)  
30003374:	04 04                	add    al,0x4
30003376:	00 00                	add    BYTE PTR [eax],al
30003378:	1c 00                	sbb    al,0x0
3000337a:	00 00                	add    BYTE PTR [eax],al
3000337c:	80 06 00             	add    BYTE PTR [esi],0x0
3000337f:	00 90 de ff ff 9b    	add    BYTE PTR [eax-0x64000022],dl
30003385:	01 00                	add    DWORD PTR [eax],eax
30003387:	00 00                	add    BYTE PTR [eax],al
30003389:	41                   	inc    ecx
3000338a:	0e                   	push   cs
3000338b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003391:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
30003397:	04 1c                	add    al,0x1c
30003399:	00 00                	add    BYTE PTR [eax],al
3000339b:	00 a0 06 00 00 0c    	add    BYTE PTR [eax+0xc000006],ah
300033a1:	e0 ff                	loopne 300033a2 <__x86.get_pc_thunk.cx+0x6aa>
300033a3:	ff c7                	inc    edi
300033a5:	00 00                	add    BYTE PTR [eax],al
300033a7:	00 00                	add    BYTE PTR [eax],al
300033a9:	41                   	inc    ecx
300033aa:	0e                   	push   cs
300033ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300033b1:	02 c3                	add    al,bl
300033b3:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300033b6:	04 00                	add    al,0x0
300033b8:	1c 00                	sbb    al,0x0
300033ba:	00 00                	add    BYTE PTR [eax],al
300033bc:	c0 06 00             	rol    BYTE PTR [esi],0x0
300033bf:	00 b3 e0 ff ff c7    	add    BYTE PTR [ebx-0x38000020],dh
300033c5:	00 00                	add    BYTE PTR [eax],al
300033c7:	00 00                	add    BYTE PTR [eax],al
300033c9:	41                   	inc    ecx
300033ca:	0e                   	push   cs
300033cb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300033d1:	02 c3                	add    al,bl
300033d3:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300033d6:	04 00                	add    al,0x0
300033d8:	1c 00                	sbb    al,0x0
300033da:	00 00                	add    BYTE PTR [eax],al
300033dc:	e0 06                	loopne 300033e4 <__x86.get_pc_thunk.cx+0x6ec>
300033de:	00 00                	add    BYTE PTR [eax],al
300033e0:	5c                   	pop    esp
300033e1:	e1 ff                	loope  300033e2 <__x86.get_pc_thunk.cx+0x6ea>
300033e3:	ff 10                	call   DWORD PTR [eax]
300033e5:	00 00                	add    BYTE PTR [eax],al
300033e7:	00 00                	add    BYTE PTR [eax],al
300033e9:	41                   	inc    ecx
300033ea:	0e                   	push   cs
300033eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300033f1:	4c                   	dec    esp
300033f2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300033f5:	04 00                	add    al,0x0
300033f7:	00 20                	add    BYTE PTR [eax],ah
300033f9:	00 00                	add    BYTE PTR [eax],al
300033fb:	00 00                	add    BYTE PTR [eax],al
300033fd:	07                   	pop    es
300033fe:	00 00                	add    BYTE PTR [eax],al
30003400:	4c                   	dec    esp
30003401:	e1 ff                	loope  30003402 <__x86.get_pc_thunk.cx+0x70a>
30003403:	ff 2c 00             	jmp    FWORD PTR [eax+eax*1]
30003406:	00 00                	add    BYTE PTR [eax],al
30003408:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000340b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003411:	44                   	inc    esp
30003412:	83 03 64             	add    DWORD PTR [ebx],0x64
30003415:	c5 c3 0c             	(bad)  
30003418:	04 04                	add    al,0x4
3000341a:	00 00                	add    BYTE PTR [eax],al
3000341c:	20 00                	and    BYTE PTR [eax],al
3000341e:	00 00                	add    BYTE PTR [eax],al
30003420:	24 07                	and    al,0x7
30003422:	00 00                	add    BYTE PTR [eax],al
30003424:	54                   	push   esp
30003425:	e1 ff                	loope  30003426 <__x86.get_pc_thunk.cx+0x72e>
30003427:	ff 26                	jmp    DWORD PTR [esi]
30003429:	00 00                	add    BYTE PTR [eax],al
3000342b:	00 00                	add    BYTE PTR [eax],al
3000342d:	41                   	inc    ecx
3000342e:	0e                   	push   cs
3000342f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003435:	44                   	inc    esp
30003436:	83 03 5e             	add    DWORD PTR [ebx],0x5e
30003439:	c5 c3 0c             	(bad)  
3000343c:	04 04                	add    al,0x4
3000343e:	00 00                	add    BYTE PTR [eax],al
30003440:	20 00                	and    BYTE PTR [eax],al
30003442:	00 00                	add    BYTE PTR [eax],al
30003444:	48                   	dec    eax
30003445:	07                   	pop    es
30003446:	00 00                	add    BYTE PTR [eax],al
30003448:	56                   	push   esi
30003449:	e1 ff                	loope  3000344a <__x86.get_pc_thunk.cx+0x752>
3000344b:	ff 37                	push   DWORD PTR [edi]
3000344d:	01 00                	add    DWORD PTR [eax],eax
3000344f:	00 00                	add    BYTE PTR [eax],al
30003451:	41                   	inc    ecx
30003452:	0e                   	push   cs
30003453:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003459:	44                   	inc    esp
3000345a:	83 03 03             	add    DWORD PTR [ebx],0x3
3000345d:	2f                   	das    
3000345e:	01 c5                	add    ebp,eax
30003460:	c3                   	ret    
30003461:	0c 04                	or     al,0x4
30003463:	04 20                	add    al,0x20
30003465:	00 00                	add    BYTE PTR [eax],al
30003467:	00 6c 07 00          	add    BYTE PTR [edi+eax*1+0x0],ch
3000346b:	00 69 e2             	add    BYTE PTR [ecx-0x1e],ch
3000346e:	ff                   	(bad)  
3000346f:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
30003476:	0e                   	push   cs
30003477:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000347d:	44                   	inc    esp
3000347e:	83 03 02             	add    DWORD PTR [ebx],0x2
30003481:	7c c5                	jl     30003448 <__x86.get_pc_thunk.cx+0x750>
30003483:	c3                   	ret    
30003484:	0c 04                	or     al,0x4
30003486:	04 00                	add    al,0x0
30003488:	1c 00                	sbb    al,0x0
3000348a:	00 00                	add    BYTE PTR [eax],al
3000348c:	90                   	nop
3000348d:	07                   	pop    es
3000348e:	00 00                	add    BYTE PTR [eax],al
30003490:	c9                   	leave  
30003491:	e2 ff                	loop   30003492 <__x86.get_pc_thunk.cx+0x79a>
30003493:	ff 53 00             	call   DWORD PTR [ebx+0x0]
30003496:	00 00                	add    BYTE PTR [eax],al
30003498:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000349b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300034a1:	02 4f c5             	add    cl,BYTE PTR [edi-0x3b]
300034a4:	0c 04                	or     al,0x4
300034a6:	04 00                	add    al,0x0
300034a8:	20 00                	and    BYTE PTR [eax],al
300034aa:	00 00                	add    BYTE PTR [eax],al
300034ac:	b0 07                	mov    al,0x7
300034ae:	00 00                	add    BYTE PTR [eax],al
300034b0:	fc                   	cld    
300034b1:	e2 ff                	loop   300034b2 <__x86.get_pc_thunk.cx+0x7ba>
300034b3:	ff                   	(bad)  
300034b4:	3e 00 00             	add    BYTE PTR ds:[eax],al
300034b7:	00 00                	add    BYTE PTR [eax],al
300034b9:	41                   	inc    ecx
300034ba:	0e                   	push   cs
300034bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300034c1:	44                   	inc    esp
300034c2:	83 03 76             	add    DWORD PTR [ebx],0x76
300034c5:	c5 c3 0c             	(bad)  
300034c8:	04 04                	add    al,0x4
300034ca:	00 00                	add    BYTE PTR [eax],al
300034cc:	20 00                	and    BYTE PTR [eax],al
300034ce:	00 00                	add    BYTE PTR [eax],al
300034d0:	d4 07                	aam    0x7
300034d2:	00 00                	add    BYTE PTR [eax],al
300034d4:	16                   	push   ss
300034d5:	e3 ff                	jecxz  300034d6 <__x86.get_pc_thunk.cx+0x7de>
300034d7:	ff                   	(bad)  
300034d8:	3e 00 00             	add    BYTE PTR ds:[eax],al
300034db:	00 00                	add    BYTE PTR [eax],al
300034dd:	41                   	inc    ecx
300034de:	0e                   	push   cs
300034df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300034e5:	44                   	inc    esp
300034e6:	83 03 76             	add    DWORD PTR [ebx],0x76
300034e9:	c5 c3 0c             	(bad)  
300034ec:	04 04                	add    al,0x4
300034ee:	00 00                	add    BYTE PTR [eax],al
300034f0:	1c 00                	sbb    al,0x0
300034f2:	00 00                	add    BYTE PTR [eax],al
300034f4:	f8                   	clc    
300034f5:	07                   	pop    es
300034f6:	00 00                	add    BYTE PTR [eax],al
300034f8:	30 e3                	xor    bl,ah
300034fa:	ff                   	(bad)  
300034fb:	ff 6f 00             	jmp    FWORD PTR [edi+0x0]
300034fe:	00 00                	add    BYTE PTR [eax],al
30003500:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003503:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003509:	02 6b c5             	add    ch,BYTE PTR [ebx-0x3b]
3000350c:	0c 04                	or     al,0x4
3000350e:	04 00                	add    al,0x0
30003510:	24 00                	and    al,0x0
30003512:	00 00                	add    BYTE PTR [eax],al
30003514:	18 08                	sbb    BYTE PTR [eax],cl
30003516:	00 00                	add    BYTE PTR [eax],al
30003518:	80 e3 ff             	and    bl,0xff
3000351b:	ff 5e 00             	call   FWORD PTR [esi+0x0]
3000351e:	00 00                	add    BYTE PTR [eax],al
30003520:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003523:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003529:	45                   	inc    ebp
3000352a:	86 03                	xchg   BYTE PTR [ebx],al
3000352c:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
30003530:	c3                   	ret    
30003531:	41                   	inc    ecx
30003532:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30003536:	04 04                	add    al,0x4
30003538:	1c 00                	sbb    al,0x0
3000353a:	00 00                	add    BYTE PTR [eax],al
3000353c:	40                   	inc    eax
3000353d:	08 00                	or     BYTE PTR [eax],al
3000353f:	00 b8 e3 ff ff 40    	add    BYTE PTR [eax+0x40ffffe3],bh
30003545:	00 00                	add    BYTE PTR [eax],al
30003547:	00 00                	add    BYTE PTR [eax],al
30003549:	41                   	inc    ecx
3000354a:	0e                   	push   cs
3000354b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003551:	7c c5                	jl     30003518 <__x86.get_pc_thunk.cx+0x820>
30003553:	0c 04                	or     al,0x4
30003555:	04 00                	add    al,0x0
30003557:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000355a:	00 00                	add    BYTE PTR [eax],al
3000355c:	60                   	pusha  
3000355d:	08 00                	or     BYTE PTR [eax],al
3000355f:	00 d8                	add    al,bl
30003561:	e3 ff                	jecxz  30003562 <__x86.get_pc_thunk.cx+0x86a>
30003563:	ff 40 00             	inc    DWORD PTR [eax+0x0]
30003566:	00 00                	add    BYTE PTR [eax],al
30003568:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000356b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003571:	7c c5                	jl     30003538 <__x86.get_pc_thunk.cx+0x840>
30003573:	0c 04                	or     al,0x4
30003575:	04 00                	add    al,0x0
30003577:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000357a:	00 00                	add    BYTE PTR [eax],al
3000357c:	80 08 00             	or     BYTE PTR [eax],0x0
3000357f:	00 f8                	add    al,bh
30003581:	e3 ff                	jecxz  30003582 <__x86.get_pc_thunk.cx+0x88a>
30003583:	ff 47 00             	inc    DWORD PTR [edi+0x0]
30003586:	00 00                	add    BYTE PTR [eax],al
30003588:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000358b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003591:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
30003594:	0c 04                	or     al,0x4
30003596:	04 00                	add    al,0x0
30003598:	1c 00                	sbb    al,0x0
3000359a:	00 00                	add    BYTE PTR [eax],al
3000359c:	a0 08 00 00 20       	mov    al,ds:0x20000008
300035a1:	e4 ff                	in     al,0xff
300035a3:	ff 30                	push   DWORD PTR [eax]
300035a5:	00 00                	add    BYTE PTR [eax],al
300035a7:	00 00                	add    BYTE PTR [eax],al
300035a9:	41                   	inc    ecx
300035aa:	0e                   	push   cs
300035ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300035b1:	6c                   	ins    BYTE PTR es:[edi],dx
300035b2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300035b5:	04 00                	add    al,0x0
300035b7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300035ba:	00 00                	add    BYTE PTR [eax],al
300035bc:	c0 08 00             	ror    BYTE PTR [eax],0x0
300035bf:	00 30                	add    BYTE PTR [eax],dh
300035c1:	e4 ff                	in     al,0xff
300035c3:	ff 59 00             	call   FWORD PTR [ecx+0x0]
300035c6:	00 00                	add    BYTE PTR [eax],al
300035c8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300035cb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300035d1:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
300035d4:	0c 04                	or     al,0x4
300035d6:	04 00                	add    al,0x0
300035d8:	1c 00                	sbb    al,0x0
300035da:	00 00                	add    BYTE PTR [eax],al
300035dc:	e0 08                	loopne 300035e6 <__x86.get_pc_thunk.cx+0x8ee>
300035de:	00 00                	add    BYTE PTR [eax],al
300035e0:	6c                   	ins    BYTE PTR es:[edi],dx
300035e1:	e4 ff                	in     al,0xff
300035e3:	ff 31                	push   DWORD PTR [ecx]
300035e5:	00 00                	add    BYTE PTR [eax],al
300035e7:	00 00                	add    BYTE PTR [eax],al
300035e9:	41                   	inc    ecx
300035ea:	0e                   	push   cs
300035eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300035f1:	6d                   	ins    DWORD PTR es:[edi],dx
300035f2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300035f5:	04 00                	add    al,0x0
300035f7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300035fa:	00 00                	add    BYTE PTR [eax],al
300035fc:	00 09                	add    BYTE PTR [ecx],cl
300035fe:	00 00                	add    BYTE PTR [eax],al
30003600:	7d e4                	jge    300035e6 <__x86.get_pc_thunk.cx+0x8ee>
30003602:	ff                   	(bad)  
30003603:	ff 31                	push   DWORD PTR [ecx]
30003605:	00 00                	add    BYTE PTR [eax],al
30003607:	00 00                	add    BYTE PTR [eax],al
30003609:	41                   	inc    ecx
3000360a:	0e                   	push   cs
3000360b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003611:	6d                   	ins    DWORD PTR es:[edi],dx
30003612:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003615:	04 00                	add    al,0x0
30003617:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000361a:	00 00                	add    BYTE PTR [eax],al
3000361c:	20 09                	and    BYTE PTR [ecx],cl
3000361e:	00 00                	add    BYTE PTR [eax],al
30003620:	90                   	nop
30003621:	e4 ff                	in     al,0xff
30003623:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
30003626:	00 00                	add    BYTE PTR [eax],al
30003628:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000362b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003631:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
30003634:	0c 04                	or     al,0x4
30003636:	04 00                	add    al,0x0
30003638:	1c 00                	sbb    al,0x0
3000363a:	00 00                	add    BYTE PTR [eax],al
3000363c:	40                   	inc    eax
3000363d:	09 00                	or     DWORD PTR [eax],eax
3000363f:	00 d7                	add    bh,dl
30003641:	e4 ff                	in     al,0xff
30003643:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
30003646:	00 00                	add    BYTE PTR [eax],al
30003648:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000364b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003651:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
30003654:	0c 04                	or     al,0x4
30003656:	04 00                	add    al,0x0
30003658:	1c 00                	sbb    al,0x0
3000365a:	00 00                	add    BYTE PTR [eax],al
3000365c:	60                   	pusha  
3000365d:	09 00                	or     DWORD PTR [eax],eax
3000365f:	00 20                	add    BYTE PTR [eax],ah
30003661:	e5 ff                	in     eax,0xff
30003663:	ff 60 00             	jmp    DWORD PTR [eax+0x0]
30003666:	00 00                	add    BYTE PTR [eax],al
30003668:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000366b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003671:	02 5c c5 0c          	add    bl,BYTE PTR [ebp+eax*8+0xc]
30003675:	04 04                	add    al,0x4
30003677:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000367a:	00 00                	add    BYTE PTR [eax],al
3000367c:	80 09 00             	or     BYTE PTR [ecx],0x0
3000367f:	00 60 e5             	add    BYTE PTR [eax-0x1b],ah
30003682:	ff                   	(bad)  
30003683:	ff 20                	jmp    DWORD PTR [eax]
30003685:	00 00                	add    BYTE PTR [eax],al
30003687:	00 00                	add    BYTE PTR [eax],al
30003689:	41                   	inc    ecx
3000368a:	0e                   	push   cs
3000368b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003691:	5c                   	pop    esp
30003692:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003695:	04 00                	add    al,0x0
30003697:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
3000369a:	00 00                	add    BYTE PTR [eax],al
3000369c:	a0 09 00 00 60       	mov    al,ds:0x60000009
300036a1:	e5 ff                	in     eax,0xff
300036a3:	ff                   	(bad)  
300036a4:	7d 01                	jge    300036a7 <__x86.get_pc_thunk.cx+0x9af>
300036a6:	00 00                	add    BYTE PTR [eax],al
300036a8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300036ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300036b1:	46                   	inc    esi
300036b2:	87 03                	xchg   DWORD PTR [ebx],eax
300036b4:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
300036b7:	05 03 70 01 c3       	add    eax,0xc3017003
300036bc:	41                   	inc    ecx
300036bd:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
300036c1:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300036c4:	04 00                	add    al,0x0
300036c6:	00 00                	add    BYTE PTR [eax],al
300036c8:	1c 00                	sbb    al,0x0
300036ca:	00 00                	add    BYTE PTR [eax],al
300036cc:	d0 09                	ror    BYTE PTR [ecx],1
300036ce:	00 00                	add    BYTE PTR [eax],al
300036d0:	b0 e6                	mov    al,0xe6
300036d2:	ff                   	(bad)  
300036d3:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
300036d9:	41                   	inc    ecx
300036da:	0e                   	push   cs
300036db:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300036e1:	59                   	pop    ecx
300036e2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300036e5:	04 00                	add    al,0x0
300036e7:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
300036ea:	00 00                	add    BYTE PTR [eax],al
300036ec:	f0 09 00             	lock or DWORD PTR [eax],eax
300036ef:	00 b0 e6 ff ff 9c    	add    BYTE PTR [eax-0x6300001a],dh
300036f5:	01 00                	add    DWORD PTR [eax],eax
300036f7:	00 00                	add    BYTE PTR [eax],al
300036f9:	41                   	inc    ecx
300036fa:	0e                   	push   cs
300036fb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003701:	46                   	inc    esi
30003702:	87 03                	xchg   DWORD PTR [ebx],eax
30003704:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
30003707:	05 03 8f 01 c3       	add    eax,0xc3018f03
3000370c:	41                   	inc    ecx
3000370d:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
30003711:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003714:	04 00                	add    al,0x0
30003716:	00 00                	add    BYTE PTR [eax],al
30003718:	20 00                	and    BYTE PTR [eax],al
3000371a:	00 00                	add    BYTE PTR [eax],al
3000371c:	20 0a                	and    BYTE PTR [edx],cl
3000371e:	00 00                	add    BYTE PTR [eax],al
30003720:	1c e8                	sbb    al,0xe8
30003722:	ff                   	(bad)  
30003723:	ff 96 00 00 00 00    	call   DWORD PTR [esi+0x0]
30003729:	41                   	inc    ecx
3000372a:	0e                   	push   cs
3000372b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003731:	44                   	inc    esp
30003732:	83 03 02             	add    DWORD PTR [ebx],0x2
30003735:	8e c5                	mov    es,ebp
30003737:	c3                   	ret    
30003738:	0c 04                	or     al,0x4
3000373a:	04 00                	add    al,0x0
3000373c:	1c 00                	sbb    al,0x0
3000373e:	00 00                	add    BYTE PTR [eax],al
30003740:	44                   	inc    esp
30003741:	0a 00                	or     al,BYTE PTR [eax]
30003743:	00 8e e8 ff ff 20    	add    BYTE PTR [esi+0x20ffffe8],cl
30003749:	00 00                	add    BYTE PTR [eax],al
3000374b:	00 00                	add    BYTE PTR [eax],al
3000374d:	41                   	inc    ecx
3000374e:	0e                   	push   cs
3000374f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003755:	5c                   	pop    esp
30003756:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003759:	04 00                	add    al,0x0
3000375b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
3000375e:	00 00                	add    BYTE PTR [eax],al
30003760:	64 0a 00             	or     al,BYTE PTR fs:[eax]
30003763:	00 90 e8 ff ff 6e    	add    BYTE PTR [eax+0x6effffe8],dl
30003769:	00 00                	add    BYTE PTR [eax],al
3000376b:	00 00                	add    BYTE PTR [eax],al
3000376d:	41                   	inc    ecx
3000376e:	0e                   	push   cs
3000376f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003775:	42                   	inc    edx
30003776:	86 03                	xchg   BYTE PTR [ebx],al
30003778:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
3000377c:	c3                   	ret    
3000377d:	41                   	inc    ecx
3000377e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30003782:	04 04                	add    al,0x4
30003784:	1c 00                	sbb    al,0x0
30003786:	00 00                	add    BYTE PTR [eax],al
30003788:	8c 0a                	mov    WORD PTR [edx],cs
3000378a:	00 00                	add    BYTE PTR [eax],al
3000378c:	d6                   	(bad)  
3000378d:	e8 ff ff 1d 00       	call   301e3791 <ticksToWait+0x1df0d5>
30003792:	00 00                	add    BYTE PTR [eax],al
30003794:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003797:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000379d:	59                   	pop    ecx
3000379e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300037a1:	04 00                	add    al,0x0
300037a3:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
300037a6:	00 00                	add    BYTE PTR [eax],al
300037a8:	ac                   	lods   al,BYTE PTR ds:[esi]
300037a9:	0a 00                	or     al,BYTE PTR [eax]
300037ab:	00 d4                	add    ah,dl
300037ad:	e8 ff ff 44 00       	call   304537b1 <ticksToWait+0x44f0f5>
300037b2:	00 00                	add    BYTE PTR [eax],al
300037b4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300037b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300037bd:	45                   	inc    ebp
300037be:	86 03                	xchg   BYTE PTR [ebx],al
300037c0:	83 04 79 c3          	add    DWORD PTR [ecx+edi*2],0xffffffc3
300037c4:	41                   	inc    ecx
300037c5:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
300037c9:	04 04                	add    al,0x4
300037cb:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
300037ce:	00 00                	add    BYTE PTR [eax],al
300037d0:	d4 0a                	aam    0xa
300037d2:	00 00                	add    BYTE PTR [eax],al
300037d4:	f0 e8 ff ff 19 03    	lock call 331a37d9 <ticksToWait+0x319f11d>
300037da:	00 00                	add    BYTE PTR [eax],al
300037dc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300037df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300037e5:	44                   	inc    esp
300037e6:	83 03 03             	add    DWORD PTR [ebx],0x3
300037e9:	10 03                	adc    BYTE PTR [ebx],al
300037eb:	c3                   	ret    
300037ec:	41                   	inc    ecx
300037ed:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300037f0:	04 00                	add    al,0x0
300037f2:	00 00                	add    BYTE PTR [eax],al
300037f4:	20 00                	and    BYTE PTR [eax],al
300037f6:	00 00                	add    BYTE PTR [eax],al
300037f8:	fc                   	cld    
300037f9:	0a 00                	or     al,BYTE PTR [eax]
300037fb:	00 e1                	add    cl,ah
300037fd:	eb ff                	jmp    300037fe <__x86.get_pc_thunk.cx+0xb06>
300037ff:	ff                   	(bad)  
30003800:	3f                   	aas    
30003801:	00 00                	add    BYTE PTR [eax],al
30003803:	00 00                	add    BYTE PTR [eax],al
30003805:	41                   	inc    ecx
30003806:	0e                   	push   cs
30003807:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000380d:	44                   	inc    esp
3000380e:	83 03 77             	add    DWORD PTR [ebx],0x77
30003811:	c5 c3 0c             	(bad)  
30003814:	04 04                	add    al,0x4
30003816:	00 00                	add    BYTE PTR [eax],al
30003818:	20 00                	and    BYTE PTR [eax],al
3000381a:	00 00                	add    BYTE PTR [eax],al
3000381c:	20 0b                	and    BYTE PTR [ebx],cl
3000381e:	00 00                	add    BYTE PTR [eax],al
30003820:	fc                   	cld    
30003821:	eb ff                	jmp    30003822 <__x86.get_pc_thunk.cx+0xb2a>
30003823:	ff                   	(bad)  
30003824:	3e 00 00             	add    BYTE PTR ds:[eax],al
30003827:	00 00                	add    BYTE PTR [eax],al
30003829:	41                   	inc    ecx
3000382a:	0e                   	push   cs
3000382b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003831:	44                   	inc    esp
30003832:	83 03 76             	add    DWORD PTR [ebx],0x76
30003835:	c5 c3 0c             	(bad)  
30003838:	04 04                	add    al,0x4
3000383a:	00 00                	add    BYTE PTR [eax],al
3000383c:	2c 00                	sub    al,0x0
3000383e:	00 00                	add    BYTE PTR [eax],al
30003840:	44                   	inc    esp
30003841:	0b 00                	or     eax,DWORD PTR [eax]
30003843:	00 16                	add    BYTE PTR [esi],dl
30003845:	ec                   	in     al,dx
30003846:	ff                   	(bad)  
30003847:	ff 57 08             	call   DWORD PTR [edi+0x8]
3000384a:	00 00                	add    BYTE PTR [eax],al
3000384c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000384f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003855:	46                   	inc    esi
30003856:	87 03                	xchg   DWORD PTR [ebx],eax
30003858:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
3000385b:	05 03 4a 08 c3       	add    eax,0xc3084a03
30003860:	41                   	inc    ecx
30003861:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
30003865:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003868:	04 00                	add    al,0x0
3000386a:	00 00                	add    BYTE PTR [eax],al
3000386c:	10 00                	adc    BYTE PTR [eax],al
3000386e:	00 00                	add    BYTE PTR [eax],al
30003870:	74 0b                	je     3000387d <__x86.get_pc_thunk.cx+0xb85>
30003872:	00 00                	add    BYTE PTR [eax],al
30003874:	84 f4                	test   ah,dh
30003876:	ff                   	(bad)  
30003877:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
3000387a:	00 00                	add    BYTE PTR [eax],al
3000387c:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .dynsym:

30003880 <.dynsym>:
	...
30003890:	f5                   	cmc    
30003891:	00 00                	add    BYTE PTR [eax],al
30003893:	00 f8                	add    al,bh
30003895:	18 00                	sbb    BYTE PTR [eax],al
30003897:	30 40 00             	xor    BYTE PTR [eax+0x0],al
3000389a:	00 00                	add    BYTE PTR [eax],al
3000389c:	12 00                	adc    al,BYTE PTR [eax]
3000389e:	01 00                	add    DWORD PTR [eax],eax
300038a0:	98                   	cwde   
300038a1:	00 00                	add    BYTE PTR [eax],al
300038a3:	00 16                	add    BYTE PTR [esi],dl
300038a5:	0e                   	push   cs
300038a6:	00 30                	add    BYTE PTR [eax],dh
300038a8:	1c 00                	sbb    al,0x0
300038aa:	00 00                	add    BYTE PTR [eax],al
300038ac:	12 00                	adc    al,BYTE PTR [eax]
300038ae:	01 00                	add    DWORD PTR [eax],eax
300038b0:	74 00                	je     300038b2 <__x86.get_pc_thunk.cx+0xbba>
300038b2:	00 00                	add    BYTE PTR [eax],al
300038b4:	86 0a                	xchg   BYTE PTR [edx],cl
300038b6:	00 30                	add    BYTE PTR [eax],dh
300038b8:	34 00                	xor    al,0x0
300038ba:	00 00                	add    BYTE PTR [eax],al
300038bc:	12 00                	adc    al,BYTE PTR [eax]
300038be:	01 00                	add    DWORD PTR [eax],eax
300038c0:	04 01                	add    al,0x1
300038c2:	00 00                	add    BYTE PTR [eax],al
300038c4:	f0 19 00             	lock sbb DWORD PTR [eax],eax
300038c7:	30 59 00             	xor    BYTE PTR [ecx+0x0],bl
300038ca:	00 00                	add    BYTE PTR [eax],al
300038cc:	12 00                	adc    al,BYTE PTR [eax]
300038ce:	01 00                	add    DWORD PTR [eax],eax
300038d0:	de 00                	fiadd  WORD PTR [eax]
300038d2:	00 00                	add    BYTE PTR [eax],al
300038d4:	d5 16                	aad    0x16
300038d6:	00 30                	add    BYTE PTR [eax],dh
300038d8:	84 00                	test   BYTE PTR [eax],al
300038da:	00 00                	add    BYTE PTR [eax],al
300038dc:	12 00                	adc    al,BYTE PTR [eax]
300038de:	01 00                	add    DWORD PTR [eax],eax
300038e0:	21 00                	and    DWORD PTR [eax],eax
300038e2:	00 00                	add    BYTE PTR [eax],al
300038e4:	00 04 00             	add    BYTE PTR [eax+eax*1],al
300038e7:	30 aa 00 00 00 12    	xor    BYTE PTR [edx+0x12000000],ch
300038ed:	00 01                	add    BYTE PTR [ecx],al
300038ef:	00 65 00             	add    BYTE PTR [ebp+0x0],ah
300038f2:	00 00                	add    BYTE PTR [eax],al
300038f4:	c4 07                	les    eax,FWORD PTR [edi]
300038f6:	00 30                	add    BYTE PTR [eax],dh
300038f8:	ba 00 00 00 12       	mov    edx,0x12000000
300038fd:	00 01                	add    BYTE PTR [ecx],al
300038ff:	00 60 00             	add    BYTE PTR [eax+0x0],ah
30003902:	00 00                	add    BYTE PTR [eax],al
30003904:	95                   	xchg   ebp,eax
30003905:	07                   	pop    es
30003906:	00 30                	add    BYTE PTR [eax],dh
30003908:	2f                   	das    
30003909:	00 00                	add    BYTE PTR [eax],al
3000390b:	00 12                	add    BYTE PTR [edx],dl
3000390d:	00 01                	add    BYTE PTR [ecx],al
3000390f:	00 c4                	add    ah,al
30003911:	00 00                	add    BYTE PTR [eax],al
30003913:	00 10                	add    BYTE PTR [eax],dl
30003915:	12 00                	adc    al,BYTE PTR [eax]
30003917:	30 9b 01 00 00 12    	xor    BYTE PTR [ebx+0x12000001],bl
3000391d:	00 01                	add    BYTE PTR [ecx],al
3000391f:	00 46 00             	add    BYTE PTR [esi+0x0],al
30003922:	00 00                	add    BYTE PTR [eax],al
30003924:	2c 07                	sub    al,0x7
30003926:	00 30                	add    BYTE PTR [eax],dh
30003928:	26 00 00             	add    BYTE PTR es:[eax],al
3000392b:	00 12                	add    BYTE PTR [edx],dl
3000392d:	00 01                	add    BYTE PTR [ecx],al
3000392f:	00 b8 00 00 00 a0    	add    BYTE PTR [eax-0x60000000],bh
30003935:	11 00                	adc    DWORD PTR [eax],eax
30003937:	30 20                	xor    BYTE PTR [eax],ah
30003939:	00 00                	add    BYTE PTR [eax],al
3000393b:	00 12                	add    BYTE PTR [edx],dl
3000393d:	00 01                	add    BYTE PTR [ecx],al
3000393f:	00 7a 00             	add    BYTE PTR [edx+0x0],bh
30003942:	00 00                	add    BYTE PTR [eax],al
30003944:	25 0b 00 30 72       	and    eax,0x7230000b
30003949:	00 00                	add    BYTE PTR [eax],al
3000394b:	00 12                	add    BYTE PTR [edx],dl
3000394d:	00 01                	add    BYTE PTR [ecx],al
3000394f:	00 24 01             	add    BYTE PTR [ecx+eax*1],ah
30003952:	00 00                	add    BYTE PTR [eax],al
30003954:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003957:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
3000395a:	00 00                	add    BYTE PTR [eax],al
3000395c:	12 00                	adc    al,BYTE PTR [eax]
3000395e:	01 00                	add    DWORD PTR [eax],eax
30003960:	17                   	pop    ss
30003961:	00 00                	add    BYTE PTR [eax],al
30003963:	00 2b                	add    BYTE PTR [ebx],ch
30003965:	02 00                	add    al,BYTE PTR [eax]
30003967:	30 bb 00 00 00 12    	xor    BYTE PTR [ebx+0x12000000],bh
3000396d:	00 01                	add    BYTE PTR [ecx],al
3000396f:	00 d2                	add    dl,dl
30003971:	00 00                	add    BYTE PTR [eax],al
30003973:	00 3c 15 00 30 10 00 	add    BYTE PTR [edx*1+0x103000],bh
3000397a:	00 00                	add    BYTE PTR [eax],al
3000397c:	12 00                	adc    al,BYTE PTR [eax]
3000397e:	01 00                	add    DWORD PTR [eax],eax
30003980:	a8 00                	test   al,0x0
30003982:	00 00                	add    BYTE PTR [eax],al
30003984:	c4 20                	les    esp,FWORD PTR [eax]
30003986:	00 30                	add    BYTE PTR [eax],dh
30003988:	19 03                	sbb    DWORD PTR [ebx],eax
3000398a:	00 00                	add    BYTE PTR [eax],al
3000398c:	12 00                	adc    al,BYTE PTR [eax]
3000398e:	01 00                	add    DWORD PTR [eax],eax
30003990:	34 01                	xor    al,0x1
30003992:	00 00                	add    BYTE PTR [eax],al
30003994:	a0 1d 00 30 9c       	mov    al,ds:0x9c30001d
30003999:	01 00                	add    DWORD PTR [eax],eax
3000399b:	00 12                	add    BYTE PTR [edx],dl
3000399d:	00 01                	add    BYTE PTR [ecx],al
3000399f:	00 6a 00             	add    BYTE PTR [edx+0x0],ch
300039a2:	00 00                	add    BYTE PTR [eax],al
300039a4:	b6 09                	mov    dh,0x9
300039a6:	00 30                	add    BYTE PTR [eax],dh
300039a8:	b1 00                	mov    cl,0x0
300039aa:	00 00                	add    BYTE PTR [eax],al
300039ac:	12 00                	adc    al,BYTE PTR [eax]
300039ae:	01 00                	add    DWORD PTR [eax],eax
300039b0:	e7 00                	out    0x0,eax
300039b2:	00 00                	add    BYTE PTR [eax],al
300039b4:	ac                   	lods   al,BYTE PTR ds:[esi]
300039b5:	17                   	pop    ss
300039b6:	00 30                	add    BYTE PTR [eax],dh
300039b8:	3e 00 00             	add    BYTE PTR ds:[eax],al
300039bb:	00 12                	add    BYTE PTR [edx],dl
300039bd:	00 01                	add    BYTE PTR [ecx],al
300039bf:	00 8d 00 00 00 dd    	add    BYTE PTR [ebp-0x23000000],cl
300039c5:	0b 00                	or     eax,DWORD PTR [eax]
300039c7:	30 ed                	xor    ch,ch
300039c9:	01 00                	add    DWORD PTR [eax],eax
300039cb:	00 12                	add    BYTE PTR [edx],dl
300039cd:	00 01                	add    BYTE PTR [ecx],al
300039cf:	00 3f                	add    BYTE PTR [edi],bh
300039d1:	00 00                	add    BYTE PTR [eax],al
300039d3:	00 f8                	add    al,bh
300039d5:	06                   	push   es
300039d6:	00 30                	add    BYTE PTR [eax],dh
300039d8:	31 00                	xor    DWORD PTR [eax],eax
300039da:	00 00                	add    BYTE PTR [eax],al
300039dc:	12 00                	adc    al,BYTE PTR [eax]
300039de:	01 00                	add    DWORD PTR [eax],eax
300039e0:	60                   	pusha  
300039e1:	01 00                	add    DWORD PTR [eax],eax
300039e3:	00 5a 24             	add    BYTE PTR [edx+0x24],bl
300039e6:	00 30                	add    BYTE PTR [eax],dh
300039e8:	57                   	push   edi
300039e9:	08 00                	or     BYTE PTR [eax],al
300039eb:	00 12                	add    BYTE PTR [edx],dl
300039ed:	00 01                	add    BYTE PTR [ecx],al
300039ef:	00 43 01             	add    BYTE PTR [ebx+0x1],al
300039f2:	00 00                	add    BYTE PTR [eax],al
300039f4:	62 20                	bound  esp,QWORD PTR [eax]
300039f6:	00 30                	add    BYTE PTR [eax],dh
300039f8:	1d 00 00 00 12       	sbb    eax,0x12000000
300039fd:	00 01                	add    BYTE PTR [ecx],al
300039ff:	00 3a                	add    BYTE PTR [edx],bh
30003a01:	00 00                	add    BYTE PTR [eax],al
30003a03:	00 c3                	add    bl,al
30003a05:	06                   	push   es
30003a06:	00 30                	add    BYTE PTR [eax],dh
30003a08:	35 00 00 00 12       	xor    eax,0x12000000
30003a0d:	00 01                	add    BYTE PTR [ecx],al
30003a0f:	00 14 01             	add    BYTE PTR [ecx+eax*1],dl
30003a12:	00 00                	add    BYTE PTR [eax],al
30003a14:	b0 1a                	mov    al,0x1a
30003a16:	00 30                	add    BYTE PTR [eax],dh
30003a18:	67 00 00             	add    BYTE PTR [bx+si],al
30003a1b:	00 12                	add    BYTE PTR [edx],dl
30003a1d:	00 01                	add    BYTE PTR [ecx],al
30003a1f:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
30003a22:	00 00                	add    BYTE PTR [eax],al
30003a24:	e0 1b                	loopne 30003a41 <__x86.get_pc_thunk.cx+0xd49>
30003a26:	00 30                	add    BYTE PTR [eax],dh
30003a28:	20 00                	and    BYTE PTR [eax],al
30003a2a:	00 00                	add    BYTE PTR [eax],al
30003a2c:	12 00                	adc    al,BYTE PTR [eax]
30003a2e:	01 00                	add    DWORD PTR [eax],eax
30003a30:	28 00                	sub    BYTE PTR [eax],al
30003a32:	00 00                	add    BYTE PTR [eax],al
30003a34:	aa                   	stos   BYTE PTR es:[edi],al
30003a35:	04 00                	add    al,0x0
30003a37:	30 c1                	xor    cl,al
30003a39:	01 00                	add    DWORD PTR [eax],eax
30003a3b:	00 12                	add    BYTE PTR [edx],dl
30003a3d:	00 01                	add    BYTE PTR [ecx],al
30003a3f:	00 10                	add    BYTE PTR [eax],dl
30003a41:	00 00                	add    BYTE PTR [eax],al
30003a43:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
30003a46:	00 30                	add    BYTE PTR [eax],dh
30003a48:	97                   	xchg   edi,eax
30003a49:	00 00                	add    BYTE PTR [eax],al
30003a4b:	00 12                	add    BYTE PTR [edx],dl
30003a4d:	00 01                	add    BYTE PTR [ecx],al
30003a4f:	00 4b 00             	add    BYTE PTR [ebx+0x0],cl
30003a52:	00 00                	add    BYTE PTR [eax],al
30003a54:	00 00                	add    BYTE PTR [eax],al
30003a56:	13 00                	adc    eax,DWORD PTR [eax]
30003a58:	00 00                	add    BYTE PTR [eax],al
30003a5a:	00 00                	add    BYTE PTR [eax],al
30003a5c:	10 00                	adc    BYTE PTR [eax],al
30003a5e:	01 00                	add    DWORD PTR [eax],eax
30003a60:	4a                   	dec    edx
30003a61:	01 00                	add    DWORD PTR [eax],eax
30003a63:	00 dd                	add    ch,bl
30003a65:	23 00                	and    eax,DWORD PTR [eax]
30003a67:	30 3f                	xor    BYTE PTR [edi],bh
30003a69:	00 00                	add    BYTE PTR [eax],al
30003a6b:	00 12                	add    BYTE PTR [edx],dl
30003a6d:	00 01                	add    BYTE PTR [ecx],al
30003a6f:	00 cb                	add    bl,cl
30003a71:	00 00                	add    BYTE PTR [eax],al
30003a73:	00 ac 13 00 30 c7 00 	add    BYTE PTR [ebx+edx*1+0xc73000],ch
30003a7a:	00 00                	add    BYTE PTR [eax],al
30003a7c:	12 00                	adc    al,BYTE PTR [eax]
30003a7e:	01 00                	add    DWORD PTR [eax],eax
30003a80:	3b 01                	cmp    eax,DWORD PTR [ecx]
30003a82:	00 00                	add    BYTE PTR [eax],al
30003a84:	d2 1f                	rcr    BYTE PTR [edi],cl
30003a86:	00 30                	add    BYTE PTR [eax],dh
30003a88:	20 00                	and    BYTE PTR [eax],al
30003a8a:	00 00                	add    BYTE PTR [eax],al
30003a8c:	12 00                	adc    al,BYTE PTR [eax]
30003a8e:	01 00                	add    DWORD PTR [eax],eax
30003a90:	62 01                	bound  eax,QWORD PTR [ecx]
30003a92:	00 00                	add    BYTE PTR [eax],al
30003a94:	80 20 00             	and    BYTE PTR [eax],0x0
30003a97:	30 44 00 00          	xor    BYTE PTR [eax+eax*1+0x0],al
30003a9b:	00 12                	add    BYTE PTR [edx],dl
30003a9d:	00 01                	add    BYTE PTR [ecx],al
30003a9f:	00 5b 00             	add    BYTE PTR [ebx+0x0],bl
30003aa2:	00 00                	add    BYTE PTR [eax],al
30003aa4:	52                   	push   edx
30003aa5:	07                   	pop    es
30003aa6:	00 30                	add    BYTE PTR [eax],dh
30003aa8:	43                   	inc    ebx
30003aa9:	00 00                	add    BYTE PTR [eax],al
30003aab:	00 12                	add    BYTE PTR [edx],dl
30003aad:	00 01                	add    BYTE PTR [ecx],al
30003aaf:	00 ee                	add    dh,ch
30003ab1:	00 00                	add    BYTE PTR [eax],al
30003ab3:	00 98 18 00 30 5e    	add    BYTE PTR [eax+0x5e300018],bl
30003ab9:	00 00                	add    BYTE PTR [eax],al
30003abb:	00 12                	add    BYTE PTR [edx],dl
30003abd:	00 01                	add    BYTE PTR [ecx],al
30003abf:	00 b1 00 00 00 8b    	add    BYTE PTR [ecx-0x75000000],dh
30003ac5:	0e                   	push   cs
30003ac6:	00 30                	add    BYTE PTR [eax],dh
30003ac8:	20 00                	and    BYTE PTR [eax],al
30003aca:	00 00                	add    BYTE PTR [eax],al
30003acc:	12 00                	adc    al,BYTE PTR [eax]
30003ace:	01 00                	add    DWORD PTR [eax],eax
30003ad0:	08 00                	or     BYTE PTR [eax],al
30003ad2:	00 00                	add    BYTE PTR [eax],al
30003ad4:	70 00                	jo     30003ad6 <__x86.get_pc_thunk.cx+0xdde>
30003ad6:	00 30                	add    BYTE PTR [eax],dh
30003ad8:	55                   	push   ebp
30003ad9:	00 00                	add    BYTE PTR [eax],al
30003adb:	00 12                	add    BYTE PTR [edx],dl
30003add:	00 01                	add    BYTE PTR [ecx],al
30003adf:	00 fc                	add    ah,bh
30003ae1:	00 00                	add    BYTE PTR [eax],al
30003ae3:	00 78 19             	add    BYTE PTR [eax+0x19],bh
30003ae6:	00 30                	add    BYTE PTR [eax],dh
30003ae8:	47                   	inc    edi
30003ae9:	00 00                	add    BYTE PTR [eax],al
30003aeb:	00 12                	add    BYTE PTR [edx],dl
30003aed:	00 01                	add    BYTE PTR [ecx],al
30003aef:	00 80 00 00 00 b4    	add    BYTE PTR [eax-0x4c000000],al
30003af5:	0b 00                	or     eax,DWORD PTR [eax]
30003af7:	30 29                	xor    BYTE PTR [ecx],ch
30003af9:	00 00                	add    BYTE PTR [eax],al
30003afb:	00 12                	add    BYTE PTR [edx],dl
30003afd:	00 01                	add    BYTE PTR [ecx],al
30003aff:	00 54 01 00          	add    BYTE PTR [ecx+eax*1+0x0],dl
30003b03:	00 1c 24             	add    BYTE PTR [esp],bl
30003b06:	00 30                	add    BYTE PTR [eax],dh
30003b08:	3e 00 00             	add    BYTE PTR ds:[eax],al
30003b0b:	00 12                	add    BYTE PTR [edx],dl
30003b0d:	00 01                	add    BYTE PTR [ecx],al
30003b0f:	00 a0 00 00 00 32    	add    BYTE PTR [eax+0x32000000],ah
30003b15:	0e                   	push   cs
30003b16:	00 30                	add    BYTE PTR [eax],dh
30003b18:	59                   	pop    ecx
30003b19:	00 00                	add    BYTE PTR [eax],al
30003b1b:	00 12                	add    BYTE PTR [edx],dl
30003b1d:	00 01                	add    BYTE PTR [ecx],al
30003b1f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003b22:	00 00                	add    BYTE PTR [eax],al
30003b24:	a1 03 00 30 5c       	mov    eax,ds:0x5c300003
30003b29:	00 00                	add    BYTE PTR [eax],al
30003b2b:	00 12                	add    BYTE PTR [edx],dl
30003b2d:	00 01                	add    BYTE PTR [ecx],al
30003b2f:	00 d7                	add    bh,dl
30003b31:	00 00                	add    BYTE PTR [eax],al
30003b33:	00 9e 15 00 30 37    	add    BYTE PTR [esi+0x37300015],bl
30003b39:	01 00                	add    DWORD PTR [eax],eax
30003b3b:	00 12                	add    BYTE PTR [edx],dl
30003b3d:	00 01                	add    BYTE PTR [ecx],al
30003b3f:	00 0d 01 00 00 4c    	add    BYTE PTR ds:0x4c000001,cl
30003b45:	1a 00                	sbb    al,BYTE PTR [eax]
30003b47:	30 31                	xor    BYTE PTR [ecx],dh
30003b49:	00 00                	add    BYTE PTR [eax],al
30003b4b:	00 12                	add    BYTE PTR [edx],dl
30003b4d:	00 01                	add    BYTE PTR [ecx],al
30003b4f:	00 2f                	add    BYTE PTR [edi],ch
30003b51:	00 00                	add    BYTE PTR [eax],al
30003b53:	00 6c 06 00          	add    BYTE PTR [esi+eax*1+0x0],ch
30003b57:	30 2d 00 00 00 12    	xor    BYTE PTR ds:0x12000000,ch
30003b5d:	00 01                	add    BYTE PTR [ecx],al
30003b5f:	00 92 00 00 00 ca    	add    BYTE PTR [edx-0x36000000],dl
30003b65:	0d 00 30 4c 00       	or     eax,0x4c3000
30003b6a:	00 00                	add    BYTE PTR [eax],al
30003b6c:	12 00                	adc    al,BYTE PTR [eax]
30003b6e:	01 00                	add    DWORD PTR [eax],eax
30003b70:	01 00                	add    DWORD PTR [eax],eax
30003b72:	00 00                	add    BYTE PTR [eax],al
30003b74:	00 00                	add    BYTE PTR [eax],al
30003b76:	00 30                	add    BYTE PTR [eax],dh
30003b78:	38 00                	cmp    BYTE PTR [eax],al
30003b7a:	00 00                	add    BYTE PTR [eax],al
30003b7c:	12 00                	adc    al,BYTE PTR [eax]
30003b7e:	01 00                	add    DWORD PTR [eax],eax
30003b80:	2c 01                	sub    al,0x1
30003b82:	00 00                	add    BYTE PTR [eax],al
30003b84:	80 1d 00 30 1d 00 00 	sbb    BYTE PTR ds:0x1d3000,0x0
30003b8b:	00 12                	add    BYTE PTR [edx],dl
30003b8d:	00 01                	add    BYTE PTR [ecx],al
30003b8f:	00 34 00             	add    BYTE PTR [eax+eax*1],dh
30003b92:	00 00                	add    BYTE PTR [eax],al
30003b94:	99                   	cdq    
30003b95:	06                   	push   es
30003b96:	00 30                	add    BYTE PTR [eax],dh
30003b98:	2a 00                	sub    al,BYTE PTR [eax]
30003b9a:	00 00                	add    BYTE PTR [eax],al
30003b9c:	12 00                	adc    al,BYTE PTR [eax]
30003b9e:	01 00                	add    DWORD PTR [eax],eax
30003ba0:	bf 00 00 00 c0       	mov    edi,0xc0000000
30003ba5:	11 00                	adc    DWORD PTR [eax],eax
30003ba7:	30 1b                	xor    BYTE PTR [ebx],bl
30003ba9:	00 00                	add    BYTE PTR [eax],al
30003bab:	00 12                	add    BYTE PTR [edx],dl
30003bad:	00 01                	add    BYTE PTR [ecx],al
	...

Disassembly of section .dynstr:

30003bb0 <.dynstr>:
30003bb0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003bb3:	72 63                	jb     30003c18 <__x86.get_pc_thunk.cx+0xf20>
30003bb5:	68 72 00 73 74       	push   0x74730072
30003bba:	72 63                	jb     30003c1f <__x86.get_pc_thunk.cx+0xf27>
30003bbc:	73 70                	jae    30003c2e <__x86.get_pc_thunk.cx+0xf36>
30003bbe:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003bbf:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003bc2:	72 74                	jb     30003c38 <__x86.get_pc_thunk.cx+0xf40>
30003bc4:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003bc5:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
30003bc8:	74 6f                	je     30003c39 <__x86.get_pc_thunk.cx+0xf41>
30003bca:	61                   	popa   
30003bcb:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
30003bce:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003bcf:	69 00 67 65 74 65    	imul   eax,DWORD PTR [eax],0x65746567
30003bd5:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003bd6:	76 00                	jbe    30003bd8 <__x86.get_pc_thunk.cx+0xee0>
30003bd8:	73 65                	jae    30003c3f <__x86.get_pc_thunk.cx+0xf47>
30003bda:	74 65                	je     30003c41 <__x86.get_pc_thunk.cx+0xf49>
30003bdc:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003bdd:	76 00                	jbe    30003bdf <__x86.get_pc_thunk.cx+0xee7>
30003bdf:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003be0:	70 65                	jo     30003c47 <__x86.get_pc_thunk.cx+0xf4f>
30003be2:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003be3:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
30003be6:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003be7:	73 65                	jae    30003c4e <__x86.get_pc_thunk.cx+0xf56>
30003be9:	00 72 65             	add    BYTE PTR [edx+0x65],dh
30003bec:	61                   	popa   
30003bed:	64 00 67 65          	add    BYTE PTR fs:[edi+0x65],ah
30003bf1:	74 64                	je     30003c57 <__x86.get_pc_thunk.cx+0xf5f>
30003bf3:	69 72 00 70 75 74 73 	imul   esi,DWORD PTR [edx+0x0],0x73747570
30003bfa:	00 73 79             	add    BYTE PTR [ebx+0x79],dh
30003bfd:	73 45                	jae    30003c44 <__x86.get_pc_thunk.cx+0xf4c>
30003bff:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003c00:	74 65                	je     30003c67 <__x86.get_pc_thunk.cx+0xf6f>
30003c02:	72 5f                	jb     30003c63 <__x86.get_pc_thunk.cx+0xf6b>
30003c04:	56                   	push   esi
30003c05:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
30003c0a:	00 70 75             	add    BYTE PTR [eax+0x75],dh
30003c0d:	74 63                	je     30003c72 <__x86.get_pc_thunk.cx+0xf7a>
30003c0f:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30003c12:	74 63                	je     30003c77 <__x86.get_pc_thunk.cx+0xf7f>
30003c14:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30003c17:	74 73                	je     30003c8c <__x86.get_pc_thunk.cx+0xf94>
30003c19:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
30003c1d:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
30003c20:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003c21:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
30003c28:	74 
30003c29:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
30003c2c:	65                   	gs
30003c2d:	65                   	gs
30003c2e:	70 00                	jo     30003c30 <__x86.get_pc_thunk.cx+0xf38>
30003c30:	6d                   	ins    DWORD PTR es:[edi],dx
30003c31:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003c32:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
30003c39:	6e 
30003c3a:	61                   	popa   
30003c3b:	6c                   	ins    BYTE PTR es:[edi],dx
30003c3c:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
30003c3f:	65 63 00             	arpl   WORD PTR gs:[eax],ax
30003c42:	65                   	gs
30003c43:	78 65                	js     30003caa <__x86.get_pc_thunk.cx+0xfb2>
30003c45:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
30003c48:	77 61                	ja     30003cab <__x86.get_pc_thunk.cx+0xfb3>
30003c4a:	69 74 70 69 64 00 67 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65670064
30003c51:	65 
30003c52:	74 74                	je     30003cc8 <__x86.get_pc_thunk.cx+0xfd0>
30003c54:	69 6d 65 00 67 6d 74 	imul   ebp,DWORD PTR [ebp+0x65],0x746d6700
30003c5b:	69 6d 65 5f 72 00 67 	imul   ebp,DWORD PTR [ebp+0x65],0x6700725f
30003c62:	65                   	gs
30003c63:	74 63                	je     30003cc8 <__x86.get_pc_thunk.cx+0xfd0>
30003c65:	77 64                	ja     30003ccb <__x86.get_pc_thunk.cx+0xfd3>
30003c67:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
30003c6a:	6c                   	ins    BYTE PTR es:[edi],dx
30003c6b:	6c                   	ins    BYTE PTR es:[edi],dx
30003c6c:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003c6d:	63 00                	arpl   WORD PTR [eax],ax
30003c6f:	66                   	data16
30003c70:	72 65                	jb     30003cd7 <__x86.get_pc_thunk.cx+0xfdf>
30003c72:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
30003c76:	6d                   	ins    DWORD PTR es:[edi],dx
30003c77:	63 70 79             	arpl   WORD PTR [eax+0x79],si
30003c7a:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
30003c7d:	6d                   	ins    DWORD PTR es:[edi],dx
30003c7e:	73 65                	jae    30003ce5 <__x86.get_pc_thunk.cx+0xfed>
30003c80:	74 00                	je     30003c82 <__x86.get_pc_thunk.cx+0xf8a>
30003c82:	6d                   	ins    DWORD PTR es:[edi],dx
30003c83:	6d                   	ins    DWORD PTR es:[edi],dx
30003c84:	61                   	popa   
30003c85:	70 00                	jo     30003c87 <__x86.get_pc_thunk.cx+0xf8f>
30003c87:	6d                   	ins    DWORD PTR es:[edi],dx
30003c88:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003c89:	76 65                	jbe    30003cf0 <__x86.get_pc_thunk.cx+0xff8>
30003c8b:	54                   	push   esp
30003c8c:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003c8d:	00 72 65             	add    BYTE PTR [edx+0x65],dh
30003c90:	73 65                	jae    30003cf7 <__x86.get_pc_thunk.cx+0xfff>
30003c92:	74 52                	je     30003ce6 <__x86.get_pc_thunk.cx+0xfee>
30003c94:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003c95:	77 00                	ja     30003c97 <__x86.get_pc_thunk.cx+0xf9f>
30003c97:	73 74                	jae    30003d0d <__x86.get_pc_thunk.cx+0x1015>
30003c99:	72 63                	jb     30003cfe <__x86.get_pc_thunk.cx+0x1006>
30003c9b:	61                   	popa   
30003c9c:	74 00                	je     30003c9e <__x86.get_pc_thunk.cx+0xfa6>
30003c9e:	73 74                	jae    30003d14 <__x86.get_pc_thunk.cx+0x101c>
30003ca0:	72 63                	jb     30003d05 <__x86.get_pc_thunk.cx+0x100d>
30003ca2:	6d                   	ins    DWORD PTR es:[edi],dx
30003ca3:	70 00                	jo     30003ca5 <__x86.get_pc_thunk.cx+0xfad>
30003ca5:	73 74                	jae    30003d1b <__x86.get_pc_thunk.cx+0x1023>
30003ca7:	72 63                	jb     30003d0c <__x86.get_pc_thunk.cx+0x1014>
30003ca9:	70 79                	jo     30003d24 <__x86.get_pc_thunk.cx+0x102c>
30003cab:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003cae:	72 63                	jb     30003d13 <__x86.get_pc_thunk.cx+0x101b>
30003cb0:	70 79                	jo     30003d2b <__x86.get_pc_thunk.cx+0x1033>
30003cb2:	63 00                	arpl   WORD PTR [eax],ax
30003cb4:	73 74                	jae    30003d2a <__x86.get_pc_thunk.cx+0x1032>
30003cb6:	72 69                	jb     30003d21 <__x86.get_pc_thunk.cx+0x1029>
30003cb8:	73 6e                	jae    30003d28 <__x86.get_pc_thunk.cx+0x1030>
30003cba:	75 6d                	jne    30003d29 <__x86.get_pc_thunk.cx+0x1031>
30003cbc:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003cbf:	72 6c                	jb     30003d2d <__x86.get_pc_thunk.cx+0x1035>
30003cc1:	65 6e                	outs   dx,BYTE PTR gs:[esi]
30003cc3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003cc6:	72 6e                	jb     30003d36 <__x86.get_pc_thunk.cx+0x103e>
30003cc8:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
30003ccb:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003cce:	72 6e                	jb     30003d3e <__x86.get_pc_thunk.cx+0x1046>
30003cd0:	63 70 79             	arpl   WORD PTR [eax+0x79],si
30003cd3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003cd6:	72 74                	jb     30003d4c <__x86.get_pc_thunk.cx+0x1054>
30003cd8:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003cd9:	75 6c                	jne    30003d47 <__x86.get_pc_thunk.cx+0x104f>
30003cdb:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003cde:	72 6c                	jb     30003d4c <__x86.get_pc_thunk.cx+0x1054>
30003ce0:	65                   	gs
30003ce1:	66                   	data16
30003ce2:	74 00                	je     30003ce4 <__x86.get_pc_thunk.cx+0xfec>
30003ce4:	73 74                	jae    30003d5a <__x86.get_pc_thunk.cx+0x1062>
30003ce6:	72 74                	jb     30003d5c <__x86.get_pc_thunk.cx+0x1064>
30003ce8:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003ce9:	6c                   	ins    BYTE PTR es:[edi],dx
30003cea:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003ced:	72 74                	jb     30003d63 <__x86.get_pc_thunk.cx+0x106b>
30003cef:	72 69                	jb     30003d5a <__x86.get_pc_thunk.cx+0x1062>
30003cf1:	6d                   	ins    DWORD PTR es:[edi],dx
30003cf2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003cf5:	72 73                	jb     30003d6a <__x86.get_pc_thunk.cx+0x1072>
30003cf7:	74 72                	je     30003d6b <__x86.get_pc_thunk.cx+0x1073>
30003cf9:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
30003cfd:	61                   	popa   
30003cfe:	6c                   	ins    BYTE PTR es:[edi],dx
30003cff:	74 69                	je     30003d6a <__x86.get_pc_thunk.cx+0x1072>
30003d01:	6d                   	ins    DWORD PTR es:[edi],dx
30003d02:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
30003d07:	61                   	popa   
30003d08:	6c                   	ins    BYTE PTR es:[edi],dx
30003d09:	74 69                	je     30003d74 <__x86.get_pc_thunk.cx+0x107c>
30003d0b:	6d                   	ins    DWORD PTR es:[edi],dx
30003d0c:	65                   	gs
30003d0d:	5f                   	pop    edi
30003d0e:	72 00                	jb     30003d10 <__x86.get_pc_thunk.cx+0x1018>
30003d10:	6d                   	ins    DWORD PTR es:[edi],dx
30003d11:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
	...

Disassembly of section .hash:

30003d18 <.hash>:
30003d18:	25 00 00 00 33       	and    eax,0x33000000
30003d1d:	00 00                	add    BYTE PTR [eax],al
30003d1f:	00 19                	add    BYTE PTR [ecx],bl
30003d21:	00 00                	add    BYTE PTR [eax],al
30003d23:	00 23                	add    BYTE PTR [ebx],ah
30003d25:	00 00                	add    BYTE PTR [eax],al
30003d27:	00 22                	add    BYTE PTR [edx],ah
30003d29:	00 00                	add    BYTE PTR [eax],al
30003d2b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003d2e:	00 00                	add    BYTE PTR [eax],al
30003d30:	1e                   	push   ds
30003d31:	00 00                	add    BYTE PTR [eax],al
30003d33:	00 2e                	add    BYTE PTR [esi],ch
	...
30003d3d:	00 00                	add    BYTE PTR [eax],al
30003d3f:	00 1b                	add    BYTE PTR [ebx],bl
30003d41:	00 00                	add    BYTE PTR [eax],al
30003d43:	00 00                	add    BYTE PTR [eax],al
30003d45:	00 00                	add    BYTE PTR [eax],al
30003d47:	00 2b                	add    BYTE PTR [ebx],ch
30003d49:	00 00                	add    BYTE PTR [eax],al
30003d4b:	00 00                	add    BYTE PTR [eax],al
30003d4d:	00 00                	add    BYTE PTR [eax],al
30003d4f:	00 15 00 00 00 00    	add    BYTE PTR ds:0x0,dl
30003d55:	00 00                	add    BYTE PTR [eax],al
30003d57:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003d5a:	00 00                	add    BYTE PTR [eax],al
30003d5c:	11 00                	adc    DWORD PTR [eax],eax
30003d5e:	00 00                	add    BYTE PTR [eax],al
30003d60:	31 00                	xor    DWORD PTR [eax],eax
30003d62:	00 00                	add    BYTE PTR [eax],al
30003d64:	26 00 00             	add    BYTE PTR es:[eax],al
30003d67:	00 25 00 00 00 06    	add    BYTE PTR ds:0x6000000,ah
30003d6d:	00 00                	add    BYTE PTR [eax],al
30003d6f:	00 03                	add    BYTE PTR [ebx],al
30003d71:	00 00                	add    BYTE PTR [eax],al
30003d73:	00 2d 00 00 00 2a    	add    BYTE PTR ds:0x2a000000,ch
30003d79:	00 00                	add    BYTE PTR [eax],al
30003d7b:	00 0b                	add    BYTE PTR [ebx],cl
30003d7d:	00 00                	add    BYTE PTR [eax],al
30003d7f:	00 30                	add    BYTE PTR [eax],dh
	...
30003d89:	00 00                	add    BYTE PTR [eax],al
30003d8b:	00 0f                	add    BYTE PTR [edi],cl
30003d8d:	00 00                	add    BYTE PTR [eax],al
30003d8f:	00 12                	add    BYTE PTR [edx],dl
30003d91:	00 00                	add    BYTE PTR [eax],al
30003d93:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
30003d96:	00 00                	add    BYTE PTR [eax],al
30003d98:	17                   	pop    ss
30003d99:	00 00                	add    BYTE PTR [eax],al
30003d9b:	00 32                	add    BYTE PTR [edx],dh
30003d9d:	00 00                	add    BYTE PTR [eax],al
30003d9f:	00 21                	add    BYTE PTR [ecx],ah
30003da1:	00 00                	add    BYTE PTR [eax],al
30003da3:	00 00                	add    BYTE PTR [eax],al
30003da5:	00 00                	add    BYTE PTR [eax],al
30003da7:	00 2f                	add    BYTE PTR [edi],ch
30003da9:	00 00                	add    BYTE PTR [eax],al
30003dab:	00 1a                	add    BYTE PTR [edx],bl
	...
30003dc5:	00 00                	add    BYTE PTR [eax],al
30003dc7:	00 02                	add    BYTE PTR [edx],al
30003dc9:	00 00                	add    BYTE PTR [eax],al
30003dcb:	00 00                	add    BYTE PTR [eax],al
30003dcd:	00 00                	add    BYTE PTR [eax],al
30003dcf:	00 05 00 00 00 00    	add    BYTE PTR ds:0x0,al
	...
30003de5:	00 00                	add    BYTE PTR [eax],al
30003de7:	00 07                	add    BYTE PTR [edi],al
	...
30003df1:	00 00                	add    BYTE PTR [eax],al
30003df3:	00 0d 00 00 00 00    	add    BYTE PTR ds:0x0,cl
	...
30003e11:	00 00                	add    BYTE PTR [eax],al
30003e13:	00 01                	add    BYTE PTR [ecx],al
30003e15:	00 00                	add    BYTE PTR [eax],al
30003e17:	00 0e                	add    BYTE PTR [esi],cl
30003e19:	00 00                	add    BYTE PTR [eax],al
30003e1b:	00 13                	add    BYTE PTR [ebx],dl
30003e1d:	00 00                	add    BYTE PTR [eax],al
30003e1f:	00 00                	add    BYTE PTR [eax],al
30003e21:	00 00                	add    BYTE PTR [eax],al
30003e23:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
30003e26:	00 00                	add    BYTE PTR [eax],al
30003e28:	16                   	push   ss
30003e29:	00 00                	add    BYTE PTR [eax],al
30003e2b:	00 1d 00 00 00 00    	add    BYTE PTR ds:0x0,bl
30003e31:	00 00                	add    BYTE PTR [eax],al
30003e33:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
30003e36:	00 00                	add    BYTE PTR [eax],al
30003e38:	1f                   	pop    ds
30003e39:	00 00                	add    BYTE PTR [eax],al
30003e3b:	00 09                	add    BYTE PTR [ecx],cl
30003e3d:	00 00                	add    BYTE PTR [eax],al
30003e3f:	00 08                	add    BYTE PTR [eax],cl
30003e41:	00 00                	add    BYTE PTR [eax],al
30003e43:	00 00                	add    BYTE PTR [eax],al
30003e45:	00 00                	add    BYTE PTR [eax],al
30003e47:	00 0a                	add    BYTE PTR [edx],cl
30003e49:	00 00                	add    BYTE PTR [eax],al
30003e4b:	00 10                	add    BYTE PTR [eax],dl
30003e4d:	00 00                	add    BYTE PTR [eax],al
30003e4f:	00 00                	add    BYTE PTR [eax],al
30003e51:	00 00                	add    BYTE PTR [eax],al
30003e53:	00 18                	add    BYTE PTR [eax],bl
30003e55:	00 00                	add    BYTE PTR [eax],al
30003e57:	00 00                	add    BYTE PTR [eax],al
30003e59:	00 00                	add    BYTE PTR [eax],al
30003e5b:	00 20                	add    BYTE PTR [eax],ah
	...
30003e65:	00 00                	add    BYTE PTR [eax],al
30003e67:	00 28                	add    BYTE PTR [eax],ch
30003e69:	00 00                	add    BYTE PTR [eax],al
30003e6b:	00 00                	add    BYTE PTR [eax],al
30003e6d:	00 00                	add    BYTE PTR [eax],al
30003e6f:	00 29                	add    BYTE PTR [ecx],ch
30003e71:	00 00                	add    BYTE PTR [eax],al
30003e73:	00 04 00             	add    BYTE PTR [eax+eax*1],al
30003e76:	00 00                	add    BYTE PTR [eax],al
30003e78:	00 00                	add    BYTE PTR [eax],al
30003e7a:	00 00                	add    BYTE PTR [eax],al
30003e7c:	27                   	daa    
30003e7d:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame:

30003e80 <.eh_frame>:
30003e80:	14 00                	adc    al,0x0
30003e82:	00 00                	add    BYTE PTR [eax],al
30003e84:	00 00                	add    BYTE PTR [eax],al
30003e86:	00 00                	add    BYTE PTR [eax],al
30003e88:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
30003e8b:	00 01                	add    BYTE PTR [ecx],al
30003e8d:	7c 08                	jl     30003e97 <__x86.get_pc_thunk.cx+0x119f>
30003e8f:	01 1b                	add    DWORD PTR [ebx],ebx
30003e91:	0c 04                	or     al,0x4
30003e93:	04 88                	add    al,0x88
30003e95:	01 00                	add    DWORD PTR [eax],eax
30003e97:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003e9a:	00 00                	add    BYTE PTR [eax],al
30003e9c:	1c 00                	sbb    al,0x0
30003e9e:	00 00                	add    BYTE PTR [eax],al
30003ea0:	20 ee                	and    dh,ch
30003ea2:	ff                   	(bad)  
30003ea3:	ff 30                	push   DWORD PTR [eax]
30003ea5:	00 00                	add    BYTE PTR [eax],al
30003ea7:	00 00                	add    BYTE PTR [eax],al
30003ea9:	0e                   	push   cs
30003eaa:	08 46 0e             	or     BYTE PTR [esi+0xe],al
30003ead:	0c 4a                	or     al,0x4a
30003eaf:	0f 0b                	ud2    
30003eb1:	74 04                	je     30003eb7 <__x86.get_pc_thunk.cx+0x11bf>
30003eb3:	78 00                	js     30003eb5 <__x86.get_pc_thunk.cx+0x11bd>
30003eb5:	3f                   	aas    
30003eb6:	1a 3b                	sbb    bh,BYTE PTR [ebx]
30003eb8:	2a 32                	sub    dh,BYTE PTR [edx]
30003eba:	24 22                	and    al,0x22
30003ebc:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame_hdr:

30003ec0 <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
30003ec0:	01 1b                	add    DWORD PTR [ebx],ebx
30003ec2:	03 3b                	add    edi,DWORD PTR [ebx]
30003ec4:	38 ee                	cmp    dh,ch
30003ec6:	ff                   	(bad)  
30003ec7:	ff 54 00 00          	call   DWORD PTR [eax+eax*1+0x0]
30003ecb:	00 40 c1             	add    BYTE PTR [eax-0x3f],al
30003ece:	ff                   	(bad)  
30003ecf:	ff 54 ee ff          	call   DWORD PTR [esi+ebp*8-0x1]
30003ed3:	ff                   	(bad)  
30003ed4:	78 c1                	js     30003e97 <__x86.get_pc_thunk.cx+0x119f>
30003ed6:	ff                   	(bad)  
30003ed7:	ff 74 ee ff          	push   DWORD PTR [esi+ebp*8-0x1]
30003edb:	ff b0 c1 ff ff a8    	push   DWORD PTR [eax-0x5700003f]
30003ee1:	ee                   	out    dx,al
30003ee2:	ff                   	(bad)  
30003ee3:	ff 05 c2 ff ff d0    	inc    DWORD PTR ds:0xd0ffffc2
30003ee9:	ee                   	out    dx,al
30003eea:	ff                   	(bad)  
30003eeb:	ff 5c c2 ff          	call   FWORD PTR [edx+eax*8-0x1]
30003eef:	ff                   	(bad)  
30003ef0:	f8                   	clc    
30003ef1:	ee                   	out    dx,al
30003ef2:	ff                   	(bad)  
30003ef3:	ff f4                	push   esp
30003ef5:	c2 ff ff             	ret    0xffff
30003ef8:	34 ef                	xor    al,0xef
30003efa:	ff                   	(bad)  
30003efb:	ff 6b c3             	jmp    FWORD PTR [ebx-0x3d]
30003efe:	ff                   	(bad)  
30003eff:	ff 58 ef             	call   FWORD PTR [eax-0x11]
30003f02:	ff                   	(bad)  
30003f03:	ff 26                	jmp    DWORD PTR [esi]
30003f05:	c4                   	(bad)  
30003f06:	ff                   	(bad)  
30003f07:	ff                   	(bad)  
30003f08:	7c ef                	jl     30003ef9 <__GNU_EH_FRAME_HDR+0x39>
30003f0a:	ff                   	(bad)  
30003f0b:	ff e1                	jmp    ecx
30003f0d:	c4                   	(bad)  
30003f0e:	ff                   	(bad)  
30003f0f:	ff a0 ef ff ff 40    	jmp    DWORD PTR [eax+0x40ffffef]
30003f15:	c5 ff ff             	(bad)  
30003f18:	c0 ef ff             	shr    bh,0xff
30003f1b:	ff ea                	jmp    <internal disassembler error>
30003f1d:	c5 ff ff             	(bad)  
30003f20:	e4 ef                	in     al,0xef
30003f22:	ff                   	(bad)  
30003f23:	ff ac c7 ff ff 08 f0 	jmp    FWORD PTR [edi+eax*8-0xff70001]
30003f2a:	ff                   	(bad)  
30003f2b:	ff d9                	call   <internal disassembler error>
30003f2d:	c7                   	(bad)  
30003f2e:	ff                   	(bad)  
30003f2f:	ff 2c f0             	jmp    FWORD PTR [eax+esi*8]
30003f32:	ff                   	(bad)  
30003f33:	ff 03                	inc    DWORD PTR [ebx]
30003f35:	c8 ff ff 50          	enter  0xffff,0x50
30003f39:	f0 ff                	lock (bad) 
30003f3b:	ff                   	(bad)  
30003f3c:	38 c8                	cmp    al,cl
30003f3e:	ff                   	(bad)  
30003f3f:	ff                   	(bad)  
30003f40:	78 f0                	js     30003f32 <__GNU_EH_FRAME_HDR+0x72>
30003f42:	ff                   	(bad)  
30003f43:	ff 6c c8 ff          	jmp    FWORD PTR [eax+ecx*8-0x1]
30003f47:	ff 9c f0 ff ff 92 c8 	call   FWORD PTR [eax+esi*8-0x376d0001]
30003f4e:	ff                   	(bad)  
30003f4f:	ff c0                	inc    eax
30003f51:	f0 ff                	lock (bad) 
30003f53:	ff d5                	call   ebp
30003f55:	c8 ff ff e4          	enter  0xffff,0xe4
30003f59:	f0 ff                	lock (bad) 
30003f5b:	ff 04 c9             	inc    DWORD PTR [ecx+ecx*8]
30003f5e:	ff                   	(bad)  
30003f5f:	ff 08                	dec    DWORD PTR [eax]
30003f61:	f1                   	icebp  
30003f62:	ff                   	(bad)  
30003f63:	ff c0                	inc    eax
30003f65:	c9                   	leave  
30003f66:	ff                   	(bad)  
30003f67:	ff 2c f1             	jmp    FWORD PTR [ecx+esi*8]
30003f6a:	ff                   	(bad)  
30003f6b:	ff                   	(bad)  
30003f6c:	fa                   	cli    
30003f6d:	c9                   	leave  
30003f6e:	ff                   	(bad)  
30003f6f:	ff 54 f1 ff          	call   DWORD PTR [ecx+esi*8-0x1]
30003f73:	ff 36                	push   DWORD PTR [esi]
30003f75:	ca ff ff             	retf   0xffff
30003f78:	7c f1                	jl     30003f6b <__GNU_EH_FRAME_HDR+0xab>
30003f7a:	ff                   	(bad)  
30003f7b:	ff 74 ca ff          	push   DWORD PTR [edx+ecx*8-0x1]
30003f7f:	ff a4 f1 ff ff b4 ca 	jmp    DWORD PTR [ecx+esi*8-0x354b0001]
30003f86:	ff                   	(bad)  
30003f87:	ff cc                	dec    esp
30003f89:	f1                   	icebp  
30003f8a:	ff                   	(bad)  
30003f8b:	ff f6                	push   esi
30003f8d:	ca ff ff             	retf   0xffff
30003f90:	f4                   	hlt    
30003f91:	f1                   	icebp  
30003f92:	ff                   	(bad)  
30003f93:	ff a7 cb ff ff 18    	jmp    DWORD PTR [edi+0x18ffffcb]
30003f99:	f2 ff                	repnz (bad) 
30003f9b:	ff c6                	inc    esi
30003f9d:	cb                   	retf   
30003f9e:	ff                   	(bad)  
30003f9f:	ff                   	(bad)  
30003fa0:	3c f2                	cmp    al,0xf2
30003fa2:	ff                   	(bad)  
30003fa3:	ff                   	(bad)  
30003fa4:	fa                   	cli    
30003fa5:	cb                   	retf   
30003fa6:	ff                   	(bad)  
30003fa7:	ff 5c f2 ff          	call   FWORD PTR [edx+esi*8-0x1]
30003fab:	ff 2e                	jmp    FWORD PTR [esi]
30003fad:	cc                   	int3   
30003fae:	ff                   	(bad)  
30003faf:	ff                   	(bad)  
30003fb0:	7c f2                	jl     30003fa4 <__GNU_EH_FRAME_HDR+0xe4>
30003fb2:	ff                   	(bad)  
30003fb3:	ff 65 cc             	jmp    DWORD PTR [ebp-0x34]
30003fb6:	ff                   	(bad)  
30003fb7:	ff 9c f2 ff ff d7 cc 	call   FWORD PTR [edx+esi*8-0x33280001]
30003fbe:	ff                   	(bad)  
30003fbf:	ff c4                	inc    esp
30003fc1:	f2 ff                	repnz (bad) 
30003fc3:	ff f4                	push   esp
30003fc5:	cc                   	int3   
30003fc6:	ff                   	(bad)  
30003fc7:	ff e4                	jmp    esp
30003fc9:	f2 ff                	repnz (bad) 
30003fcb:	ff 1d cd ff ff 04    	call   FWORD PTR ds:0x4ffffcd
30003fd1:	f3 ff                	repz (bad) 
30003fd3:	ff 0a                	dec    DWORD PTR [edx]
30003fd5:	cf                   	iret   
30003fd6:	ff                   	(bad)  
30003fd7:	ff 28                	jmp    FWORD PTR [eax]
30003fd9:	f3 ff                	repz (bad) 
30003fdb:	ff 56 cf             	call   DWORD PTR [esi-0x31]
30003fde:	ff                   	(bad)  
30003fdf:	ff 4c f3 ff          	dec    DWORD PTR [ebx+esi*8-0x1]
30003fe3:	ff 72 cf             	push   DWORD PTR [edx-0x31]
30003fe6:	ff                   	(bad)  
30003fe7:	ff 6c f3 ff          	jmp    FWORD PTR [ebx+esi*8-0x1]
30003feb:	ff cb                	dec    ebx
30003fed:	cf                   	iret   
30003fee:	ff                   	(bad)  
30003fef:	ff 98 f3 ff ff ec    	call   FWORD PTR [eax-0x1300000d]
30003ff5:	cf                   	iret   
30003ff6:	ff                   	(bad)  
30003ff7:	ff cc                	dec    esp
30003ff9:	f3 ff                	repz (bad) 
30003ffb:	ff 4c d0 ff          	dec    DWORD PTR [eax+edx*8-0x1]
30003fff:	ff f0                	push   eax
30004001:	f3 ff                	repz (bad) 
30004003:	ff d3                	call   ebx
30004005:	d0 ff                	sar    bh,1
30004007:	ff 10                	call   DWORD PTR [eax]
30004009:	f4                   	hlt    
3000400a:	ff                   	(bad)  
3000400b:	ff 0c d1             	dec    DWORD PTR [ecx+edx*8]
3000400e:	ff                   	(bad)  
3000400f:	ff 30                	push   DWORD PTR [eax]
30004011:	f4                   	hlt    
30004012:	ff                   	(bad)  
30004013:	ff e0                	jmp    eax
30004015:	d2 ff                	sar    bh,cl
30004017:	ff 54 f4 ff          	call   DWORD PTR [esp+esi*8-0x1]
3000401b:	ff 00                	inc    DWORD PTR [eax]
3000401d:	d3 ff                	sar    edi,cl
3000401f:	ff 74 f4 ff          	push   DWORD PTR [esp+esi*8-0x1]
30004023:	ff 1b                	call   FWORD PTR [ebx]
30004025:	d3 ff                	sar    edi,cl
30004027:	ff 94 f4 ff ff 50 d3 	call   DWORD PTR [esp+esi*8-0x2caf0001]
3000402e:	ff                   	(bad)  
3000402f:	ff                   	(bad)  
30004030:	b8 f4 ff ff ec       	mov    eax,0xecfffff4
30004035:	d4 ff                	aam    0xff
30004037:	ff d8                	call   <internal disassembler error>
30004039:	f4                   	hlt    
3000403a:	ff                   	(bad)  
3000403b:	ff b3 d5 ff ff f8    	push   DWORD PTR [ebx-0x700002b]
30004041:	f4                   	hlt    
30004042:	ff                   	(bad)  
30004043:	ff                   	(bad)  
30004044:	7c d6                	jl     3000401c <__GNU_EH_FRAME_HDR+0x15c>
30004046:	ff                   	(bad)  
30004047:	ff 18                	call   FWORD PTR [eax]
30004049:	f5                   	cmc    
3000404a:	ff                   	(bad)  
3000404b:	ff 8c d6 ff ff 38 f5 	dec    DWORD PTR [esi+edx*8-0xac70001]
30004052:	ff                   	(bad)  
30004053:	ff                   	(bad)  
30004054:	b8 d6 ff ff 5c       	mov    eax,0x5cffffd6
30004059:	f5                   	cmc    
3000405a:	ff                   	(bad)  
3000405b:	ff de                	call   <internal disassembler error>
3000405d:	d6                   	(bad)  
3000405e:	ff                   	(bad)  
3000405f:	ff 80 f5 ff ff 15    	inc    DWORD PTR [eax+0x15fffff5]
30004065:	d8 ff                	fdivr  st,st(7)
30004067:	ff a4 f5 ff ff 99 d8 	jmp    DWORD PTR [ebp+esi*8-0x27660001]
3000406e:	ff                   	(bad)  
3000406f:	ff c8                	dec    eax
30004071:	f5                   	cmc    
30004072:	ff                   	(bad)  
30004073:	ff ec                	jmp    <internal disassembler error>
30004075:	d8 ff                	fdivr  st,st(7)
30004077:	ff e8                	jmp    <internal disassembler error>
30004079:	f5                   	cmc    
3000407a:	ff                   	(bad)  
3000407b:	ff 2a                	jmp    FWORD PTR [edx]
3000407d:	d9 ff                	fcos   
3000407f:	ff 0c f6             	dec    DWORD PTR [esi+esi*8]
30004082:	ff                   	(bad)  
30004083:	ff 68 d9             	jmp    FWORD PTR [eax-0x27]
30004086:	ff                   	(bad)  
30004087:	ff 30                	push   DWORD PTR [eax]
30004089:	f6 ff                	idiv   bh
3000408b:	ff d8                	call   <internal disassembler error>
3000408d:	d9 ff                	fcos   
3000408f:	ff 50 f6             	call   DWORD PTR [eax-0xa]
30004092:	ff                   	(bad)  
30004093:	ff                   	(bad)  
30004094:	38 da                	cmp    dl,bl
30004096:	ff                   	(bad)  
30004097:	ff                   	(bad)  
30004098:	78 f6                	js     30004090 <__GNU_EH_FRAME_HDR+0x1d0>
3000409a:	ff                   	(bad)  
3000409b:	ff                   	(bad)  
3000409c:	78 da                	js     30004078 <__GNU_EH_FRAME_HDR+0x1b8>
3000409e:	ff                   	(bad)  
3000409f:	ff 98 f6 ff ff b8    	call   FWORD PTR [eax-0x4700000a]
300040a5:	da ff                	(bad)  
300040a7:	ff                   	(bad)  
300040a8:	b8 f6 ff ff 00       	mov    eax,0xfffff6
300040ad:	db ff                	(bad)  
300040af:	ff d8                	call   <internal disassembler error>
300040b1:	f6 ff                	idiv   bh
300040b3:	ff 30                	push   DWORD PTR [eax]
300040b5:	db ff                	(bad)  
300040b7:	ff                   	(bad)  
300040b8:	f8                   	clc    
300040b9:	f6 ff                	idiv   bh
300040bb:	ff 8c db ff ff 18 f7 	dec    DWORD PTR [ebx+ebx*8-0x8e70001]
300040c2:	ff                   	(bad)  
300040c3:	ff                   	(bad)  
300040c4:	bd db ff ff 38       	mov    ebp,0x38ffffdb
300040c9:	f7 ff                	idiv   edi
300040cb:	ff f0                	push   eax
300040cd:	db ff                	(bad)  
300040cf:	ff 58 f7             	call   FWORD PTR [eax-0x9]
300040d2:	ff                   	(bad)  
300040d3:	ff 57 dc             	call   DWORD PTR [edi-0x24]
300040d6:	ff                   	(bad)  
300040d7:	ff                   	(bad)  
300040d8:	78 f7                	js     300040d1 <__GNU_EH_FRAME_HDR+0x211>
300040da:	ff                   	(bad)  
300040db:	ff c0                	inc    eax
300040dd:	dc ff                	fdiv   st(7),st
300040df:	ff 98 f7 ff ff 20    	call   FWORD PTR [eax+0x20fffff7]
300040e5:	dd ff                	(bad)  
300040e7:	ff                   	(bad)  
300040e8:	b8 f7 ff ff 40       	mov    eax,0x40fffff7
300040ed:	dd ff                	(bad)  
300040ef:	ff d8                	call   <internal disassembler error>
300040f1:	f7 ff                	idiv   edi
300040f3:	ff c0                	inc    eax
300040f5:	de ff                	fdivp  st(7),st
300040f7:	ff 08                	dec    DWORD PTR [eax]
300040f9:	f8                   	clc    
300040fa:	ff                   	(bad)  
300040fb:	ff e0                	jmp    eax
300040fd:	de ff                	fdivp  st(7),st
300040ff:	ff 28                	jmp    FWORD PTR [eax]
30004101:	f8                   	clc    
30004102:	ff                   	(bad)  
30004103:	ff                   	(bad)  
30004104:	7c e0                	jl     300040e6 <__GNU_EH_FRAME_HDR+0x226>
30004106:	ff                   	(bad)  
30004107:	ff 58 f8             	call   FWORD PTR [eax-0x8]
3000410a:	ff                   	(bad)  
3000410b:	ff 12                	call   DWORD PTR [edx]
3000410d:	e1 ff                	loope  3000410e <__GNU_EH_FRAME_HDR+0x24e>
3000410f:	ff                   	(bad)  
30004110:	7c f8                	jl     3000410a <__GNU_EH_FRAME_HDR+0x24a>
30004112:	ff                   	(bad)  
30004113:	ff 34 e1             	push   DWORD PTR [ecx+eiz*8]
30004116:	ff                   	(bad)  
30004117:	ff 9c f8 ff ff a2 e1 	call   FWORD PTR [eax+edi*8-0x1e5d0001]
3000411e:	ff                   	(bad)  
3000411f:	ff c4                	inc    esp
30004121:	f8                   	clc    
30004122:	ff                   	(bad)  
30004123:	ff c0                	inc    eax
30004125:	e1 ff                	loope  30004126 <__GNU_EH_FRAME_HDR+0x266>
30004127:	ff e4                	jmp    esp
30004129:	f8                   	clc    
3000412a:	ff                   	(bad)  
3000412b:	ff 04 e2             	inc    DWORD PTR [edx+eiz*8]
3000412e:	ff                   	(bad)  
3000412f:	ff 0c f9             	dec    DWORD PTR [ecx+edi*8]
30004132:	ff                   	(bad)  
30004133:	ff 1d e5 ff ff 34    	call   FWORD PTR ds:0x34ffffe5
30004139:	f9                   	stc    
3000413a:	ff                   	(bad)  
3000413b:	ff 5c e5 ff          	call   FWORD PTR [ebp+eiz*8-0x1]
3000413f:	ff 58 f9             	call   FWORD PTR [eax-0x7]
30004142:	ff                   	(bad)  
30004143:	ff 9a e5 ff ff 7c    	call   FWORD PTR [edx+0x7cffffe5]
30004149:	f9                   	stc    
3000414a:	ff                   	(bad)  
3000414b:	ff f1                	push   ecx
3000414d:	ed                   	in     eax,dx
3000414e:	ff                   	(bad)  
3000414f:	ff 94 ee ff ff 30 ee 	call   DWORD PTR [esi+ebp*8-0x11cf0001]
30004156:	ff                   	(bad)  
30004157:	ff 20                	jmp    DWORD PTR [eax]
30004159:	ef                   	out    dx,eax
3000415a:	ff                   	(bad)  
3000415b:	ff 34 ee             	push   DWORD PTR [esi+ebp*8]
3000415e:	ff                   	(bad)  
3000415f:	ff                   	(bad)  
30004160:	b8 f3 ff ff 38       	mov    eax,0x38fffff3
30004165:	ee                   	out    dx,al
30004166:	ff                   	(bad)  
30004167:	ff                   	.byte 0xff
30004168:	ac                   	lods   al,BYTE PTR ds:[esi]
30004169:	f9                   	stc    
3000416a:	ff                   	(bad)  
3000416b:	ff                   	.byte 0xff

Disassembly of section .rodata:

30004180 <_ytab-0x220>:
30004180:	3d 00 53 74 72       	cmp    eax,0x72745300
30004185:	65                   	gs
30004186:	61                   	popa   
30004187:	6d                   	ins    DWORD PTR es:[edi],dx
30004188:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
3000418e:	74 20                	je     300041b0 <__GNU_EH_FRAME_HDR+0x2f0>
30004190:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
30004197:	6e                   	outs   dx,BYTE PTR ds:[esi]
30004198:	74 65                	je     300041ff <__GNU_EH_FRAME_HDR+0x33f>
3000419a:	64 0a 00             	or     al,BYTE PTR fs:[eax]
3000419d:	00 00                	add    BYTE PTR [eax],al
3000419f:	00 2a                	add    BYTE PTR [edx],ch
300041a1:	2a 2a                	sub    ch,BYTE PTR [edx]
300041a3:	6c                   	ins    BYTE PTR es:[edi],dx
300041a4:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
300041ab:	74 20                	je     300041cd <__GNU_EH_FRAME_HDR+0x30d>
300041ad:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
300041b0:	6c                   	ins    BYTE PTR es:[edi],dx
300041b1:	65 64 0a 2a          	gs or  ch,BYTE PTR fs:gs:[edx]
300041b5:	2a 2a                	sub    ch,BYTE PTR [edx]
300041b7:	00 2a                	add    BYTE PTR [edx],ch
300041b9:	2a 2a                	sub    ch,BYTE PTR [edx]
300041bb:	6c                   	ins    BYTE PTR es:[edi],dx
300041bc:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
300041c3:	74 20                	je     300041e5 <__GNU_EH_FRAME_HDR+0x325>
300041c5:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
300041c8:	70 6c                	jo     30004236 <__GNU_EH_FRAME_HDR+0x376>
300041ca:	65                   	gs
300041cb:	74 65                	je     30004232 <__GNU_EH_FRAME_HDR+0x372>
300041cd:	64 0a 00             	or     al,BYTE PTR fs:[eax]
300041d0:	6c                   	ins    BYTE PTR es:[edi],dx
300041d1:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
300041d8:	74 20                	je     300041fa <__GNU_EH_FRAME_HDR+0x33a>
300041da:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
300041dd:	6c                   	ins    BYTE PTR es:[edi],dx
300041de:	65 64 20 70 72       	gs and BYTE PTR fs:gs:[eax+0x72],dh
300041e3:	65                   	gs
300041e4:	76 69                	jbe    3000424f <__GNU_EH_FRAME_HDR+0x38f>
300041e6:	6f                   	outs   dx,DWORD PTR ds:[esi]
300041e7:	75 73                	jne    3000425c <__GNU_EH_FRAME_HDR+0x39c>
300041e9:	6c                   	ins    BYTE PTR es:[edi],dx
300041ea:	79 2c                	jns    30004218 <__GNU_EH_FRAME_HDR+0x358>
300041ec:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
300041ef:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x20000a67
300041f6:	20 
300041f7:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
300041fb:	63 3a                	arpl   WORD PTR [edx],di
300041fd:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
30004200:	65 63 20             	arpl   WORD PTR gs:[eax],sp
30004203:	66 6f                	outs   dx,WORD PTR ds:[esi]
30004205:	72 20                	jb     30004227 <__GNU_EH_FRAME_HDR+0x367>
30004207:	25 73 0a 00 00       	and    eax,0xa73
3000420c:	68 65 61 70 42       	push   0x42706165
30004211:	61                   	popa   
30004212:	73 65                	jae    30004279 <__GNU_EH_FRAME_HDR+0x3b9>
30004214:	20 40 20             	and    BYTE PTR [eax+0x20],al
30004217:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
3000421a:	30 38                	xor    BYTE PTR [eax],bh
3000421c:	58                   	pop    eax
3000421d:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
30004223:	30 38                	xor    BYTE PTR [eax],bh
30004225:	58                   	pop    eax
30004226:	20 62 65             	and    BYTE PTR [edx+0x65],ah
30004229:	66 6f                	outs   dx,WORD PTR ds:[esi]
3000422b:	72 65                	jb     30004292 <__GNU_EH_FRAME_HDR+0x3d2>
3000422d:	0a 00                	or     al,BYTE PTR [eax]
3000422f:	6d                   	ins    DWORD PTR es:[edi],dx
30004230:	61                   	popa   
30004231:	6c                   	ins    BYTE PTR es:[edi],dx
30004232:	6c                   	ins    BYTE PTR es:[edi],dx
30004233:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004234:	63 28                	arpl   WORD PTR [eax],bp
30004236:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30004239:	30 38                	xor    BYTE PTR [eax],bh
3000423b:	58                   	pop    eax
3000423c:	29 0a                	sub    DWORD PTR [edx],ecx
3000423e:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
30004242:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
30004245:	61                   	popa   
30004246:	6c                   	ins    BYTE PTR es:[edi],dx
30004247:	6c                   	ins    BYTE PTR es:[edi],dx
30004248:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004249:	63 3a                	arpl   WORD PTR [edx],di
3000424b:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
3000424e:	65                   	gs
3000424f:	64                   	fs
30004250:	65                   	gs
30004251:	64                   	fs
30004252:	3d 30 78 25 30       	cmp    eax,0x30257830
30004257:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
3000425a:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
3000425e:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
30004261:	61                   	popa   
30004262:	6c                   	ins    BYTE PTR es:[edi],dx
30004263:	6c                   	ins    BYTE PTR es:[edi],dx
30004264:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004265:	63 3a                	arpl   WORD PTR [edx],di
30004267:	20 68 65             	and    BYTE PTR [eax+0x65],ch
3000426a:	61                   	popa   
3000426b:	45                   	inc    ebp
3000426c:	6e                   	outs   dx,BYTE PTR ds:[esi]
3000426d:	64                   	fs
3000426e:	3d 30 78 25 30       	cmp    eax,0x30257830
30004273:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
30004276:	00 00                	add    BYTE PTR [eax],al
30004278:	6c                   	ins    BYTE PTR es:[edi],dx
30004279:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
30004280:	6c                   	ins    BYTE PTR es:[edi],dx
30004281:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004282:	63 3a                	arpl   WORD PTR [edx],di
30004284:	20 52 65             	and    BYTE PTR [edx+0x65],dl
30004287:	71 20                	jno    300042a9 <__GNU_EH_FRAME_HDR+0x3e9>
30004289:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
3000428c:	30 38                	xor    BYTE PTR [eax],bh
3000428e:	58                   	pop    eax
3000428f:	20 62 79             	and    BYTE PTR [edx+0x79],ah
30004292:	74 65                	je     300042f9 <__GNU_EH_FRAME_HDR+0x439>
30004294:	73 2c                	jae    300042c2 <__GNU_EH_FRAME_HDR+0x402>
30004296:	20 72 65             	and    BYTE PTR [edx+0x65],dh
30004299:	74 20                	je     300042bb <__GNU_EH_FRAME_HDR+0x3fb>
3000429b:	77 61                	ja     300042fe <__GNU_EH_FRAME_HDR+0x43e>
3000429d:	73 20                	jae    300042bf <__GNU_EH_FRAME_HDR+0x3ff>
3000429f:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
300042a2:	30 38                	xor    BYTE PTR [eax],bh
300042a4:	58                   	pop    eax
300042a5:	2c 20                	sub    al,0x20
300042a7:	68 65 61 70 45       	push   0x45706165
300042ac:	6e                   	outs   dx,BYTE PTR ds:[esi]
300042ad:	64                   	fs
300042ae:	3d 30 78 25 30       	cmp    eax,0x30257830
300042b3:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
300042b6:	00 00                	add    BYTE PTR [eax],al
300042b8:	6c                   	ins    BYTE PTR es:[edi],dx
300042b9:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
300042c0:	6c                   	ins    BYTE PTR es:[edi],dx
300042c1:	6f                   	outs   dx,DWORD PTR ds:[esi]
300042c2:	63 3a                	arpl   WORD PTR [edx],di
300042c4:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
300042c7:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
300042ce:	65 
300042cf:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
300042d3:	61                   	popa   
300042d4:	70 43                	jo     30004319 <__GNU_EH_FRAME_HDR+0x459>
300042d6:	75 72                	jne    3000434a <__GNU_EH_FRAME_HDR+0x48a>
300042d8:	72 20                	jb     300042fa <__GNU_EH_FRAME_HDR+0x43a>
300042da:	61                   	popa   
300042db:	6e                   	outs   dx,BYTE PTR ds:[esi]
300042dc:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
300042e0:	61                   	popa   
300042e1:	70 42                	jo     30004325 <__GNU_EH_FRAME_HDR+0x465>
300042e3:	61                   	popa   
300042e4:	73 65                	jae    3000434b <__GNU_EH_FRAME_HDR+0x48b>
300042e6:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
300042ea:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
300042ed:	30 38                	xor    BYTE PTR [eax],bh
300042ef:	58                   	pop    eax
300042f0:	0a 00                	or     al,BYTE PTR [eax]
300042f2:	00 00                	add    BYTE PTR [eax],al
300042f4:	6c                   	ins    BYTE PTR es:[edi],dx
300042f5:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
300042fc:	6c                   	ins    BYTE PTR es:[edi],dx
300042fd:	6f                   	outs   dx,DWORD PTR ds:[esi]
300042fe:	63 3a                	arpl   WORD PTR [edx],di
30004300:	63 72 65             	arpl   WORD PTR [edx+0x65],si
30004303:	61                   	popa   
30004304:	74 69                	je     3000436f <__GNU_EH_FRAME_HDR+0x4af>
30004306:	6e                   	outs   dx,BYTE PTR ds:[esi]
30004307:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
3000430b:	61                   	popa   
3000430c:	70 20                	jo     3000432e <__GNU_EH_FRAME_HDR+0x46e>
3000430e:	72 65                	jb     30004375 <__GNU_EH_FRAME_HDR+0x4b5>
30004310:	63 20                	arpl   WORD PTR [eax],sp
30004312:	40                   	inc    eax
30004313:	20 30                	and    BYTE PTR [eax],dh
30004315:	78 25                	js     3000433c <__GNU_EH_FRAME_HDR+0x47c>
30004317:	30 38                	xor    BYTE PTR [eax],bh
30004319:	58                   	pop    eax
3000431a:	0a 00                	or     al,BYTE PTR [eax]
3000431c:	6c                   	ins    BYTE PTR es:[edi],dx
3000431d:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
30004324:	6c                   	ins    BYTE PTR es:[edi],dx
30004325:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004326:	63 3a                	arpl   WORD PTR [edx],di
30004328:	20 68 65             	and    BYTE PTR [eax+0x65],ch
3000432b:	61                   	popa   
3000432c:	70 43                	jo     30004371 <__GNU_EH_FRAME_HDR+0x4b1>
3000432e:	75 72                	jne    300043a2 <_ytab+0x2>
30004330:	72 3d                	jb     3000436f <__GNU_EH_FRAME_HDR+0x4af>
30004332:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30004335:	30 38                	xor    BYTE PTR [eax],bh
30004337:	58                   	pop    eax
30004338:	2c 20                	sub    al,0x20
3000433a:	73 69                	jae    300043a5 <_ytab+0x5>
3000433c:	7a 65                	jp     300043a3 <_ytab+0x3>
3000433e:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000433f:	66                   	data16
30004340:	28 68 65             	sub    BYTE PTR [eax+0x65],ch
30004343:	61                   	popa   
30004344:	70 72                	jo     300043b8 <_ytab+0x18>
30004346:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
3000434a:	29 3d 30 78 25 30    	sub    DWORD PTR ds:0x30257830,edi
30004350:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
30004353:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
30004356:	6c                   	ins    BYTE PTR es:[edi],dx
30004357:	6c                   	ins    BYTE PTR es:[edi],dx
30004358:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004359:	63 3a                	arpl   WORD PTR [edx],di
3000435b:	20 72 65             	and    BYTE PTR [edx+0x65],dh
3000435e:	74 75                	je     300043d5 <_ytab+0x35>
30004360:	72 6e                	jb     300043d0 <_ytab+0x30>
30004362:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
30004369:	30 38                	xor    BYTE PTR [eax],bh
3000436b:	58                   	pop    eax
3000436c:	0a 00                	or     al,BYTE PTR [eax]
	...
3000437e:	00 00                	add    BYTE PTR [eax],al
30004380:	47                   	inc    edi
30004381:	4d                   	dec    ebp
30004382:	54                   	push   esp
	...

300043a0 <_ytab>:
300043a0:	1f                   	pop    ds
300043a1:	00 00                	add    BYTE PTR [eax],al
300043a3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300043a6:	00 00                	add    BYTE PTR [eax],al
300043a8:	1f                   	pop    ds
300043a9:	00 00                	add    BYTE PTR [eax],al
300043ab:	00 1e                	add    BYTE PTR [esi],bl
300043ad:	00 00                	add    BYTE PTR [eax],al
300043af:	00 1f                	add    BYTE PTR [edi],bl
300043b1:	00 00                	add    BYTE PTR [eax],al
300043b3:	00 1e                	add    BYTE PTR [esi],bl
300043b5:	00 00                	add    BYTE PTR [eax],al
300043b7:	00 1f                	add    BYTE PTR [edi],bl
300043b9:	00 00                	add    BYTE PTR [eax],al
300043bb:	00 1f                	add    BYTE PTR [edi],bl
300043bd:	00 00                	add    BYTE PTR [eax],al
300043bf:	00 1e                	add    BYTE PTR [esi],bl
300043c1:	00 00                	add    BYTE PTR [eax],al
300043c3:	00 1f                	add    BYTE PTR [edi],bl
300043c5:	00 00                	add    BYTE PTR [eax],al
300043c7:	00 1e                	add    BYTE PTR [esi],bl
300043c9:	00 00                	add    BYTE PTR [eax],al
300043cb:	00 1f                	add    BYTE PTR [edi],bl
300043cd:	00 00                	add    BYTE PTR [eax],al
300043cf:	00 1f                	add    BYTE PTR [edi],bl
300043d1:	00 00                	add    BYTE PTR [eax],al
300043d3:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
300043d9:	00 00                	add    BYTE PTR [eax],al
300043db:	00 1e                	add    BYTE PTR [esi],bl
300043dd:	00 00                	add    BYTE PTR [eax],al
300043df:	00 1f                	add    BYTE PTR [edi],bl
300043e1:	00 00                	add    BYTE PTR [eax],al
300043e3:	00 1e                	add    BYTE PTR [esi],bl
300043e5:	00 00                	add    BYTE PTR [eax],al
300043e7:	00 1f                	add    BYTE PTR [edi],bl
300043e9:	00 00                	add    BYTE PTR [eax],al
300043eb:	00 1f                	add    BYTE PTR [edi],bl
300043ed:	00 00                	add    BYTE PTR [eax],al
300043ef:	00 1e                	add    BYTE PTR [esi],bl
300043f1:	00 00                	add    BYTE PTR [eax],al
300043f3:	00 1f                	add    BYTE PTR [edi],bl
300043f5:	00 00                	add    BYTE PTR [eax],al
300043f7:	00 1e                	add    BYTE PTR [esi],bl
300043f9:	00 00                	add    BYTE PTR [eax],al
300043fb:	00 1f                	add    BYTE PTR [edi],bl
300043fd:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

30004400 <.rel.dyn>:
30004400:	44                   	inc    esp
30004401:	46                   	inc    esi
30004402:	00 30                	add    BYTE PTR [eax],dh
30004404:	08 00                	or     BYTE PTR [eax],al
30004406:	00 00                	add    BYTE PTR [eax],al
30004408:	48                   	dec    eax
30004409:	46                   	inc    esi
3000440a:	00 30                	add    BYTE PTR [eax],dh
3000440c:	08 00                	or     BYTE PTR [eax],al
3000440e:	00 00                	add    BYTE PTR [eax],al
30004410:	4c                   	dec    esp
30004411:	46                   	inc    esi
30004412:	00 30                	add    BYTE PTR [eax],dh
30004414:	08 00                	or     BYTE PTR [eax],al
30004416:	00 00                	add    BYTE PTR [eax],al
30004418:	50                   	push   eax
30004419:	46                   	inc    esi
3000441a:	00 30                	add    BYTE PTR [eax],dh
3000441c:	08 00                	or     BYTE PTR [eax],al
3000441e:	00 00                	add    BYTE PTR [eax],al
30004420:	54                   	push   esp
30004421:	46                   	inc    esi
30004422:	00 30                	add    BYTE PTR [eax],dh
30004424:	08 00                	or     BYTE PTR [eax],al
30004426:	00 00                	add    BYTE PTR [eax],al
30004428:	58                   	pop    eax
30004429:	46                   	inc    esi
3000442a:	00 30                	add    BYTE PTR [eax],dh
3000442c:	08 00                	or     BYTE PTR [eax],al
3000442e:	00 00                	add    BYTE PTR [eax],al
30004430:	5c                   	pop    esp
30004431:	46                   	inc    esi
30004432:	00 30                	add    BYTE PTR [eax],dh
30004434:	08 00                	or     BYTE PTR [eax],al
30004436:	00 00                	add    BYTE PTR [eax],al
30004438:	78 46                	js     30004480 <_ytab+0xe0>
3000443a:	00 30                	add    BYTE PTR [eax],dh
3000443c:	08 00                	or     BYTE PTR [eax],al
3000443e:	00 00                	add    BYTE PTR [eax],al
30004440:	7c 46                	jl     30004488 <_ytab+0xe8>
30004442:	00 30                	add    BYTE PTR [eax],dh
30004444:	08 00                	or     BYTE PTR [eax],al
30004446:	00 00                	add    BYTE PTR [eax],al
30004448:	80 46 00 30          	add    BYTE PTR [esi+0x0],0x30
3000444c:	08 00                	or     BYTE PTR [eax],al
3000444e:	00 00                	add    BYTE PTR [eax],al
30004450:	4a                   	dec    edx
30004451:	07                   	pop    es
30004452:	00 30                	add    BYTE PTR [eax],dh
30004454:	02 1d 00 00 8a 07    	add    bl,BYTE PTR ds:0x78a0000
3000445a:	00 30                	add    BYTE PTR [eax],dh
3000445c:	02 1d 00 00 b3 07    	add    bl,BYTE PTR ds:0x7b30000
30004462:	00 30                	add    BYTE PTR [eax],dh
30004464:	02 1d 00 00 10 08    	add    bl,BYTE PTR ds:0x8100000
3000446a:	00 30                	add    BYTE PTR [eax],dh
3000446c:	02 1d 00 00 73 08    	add    bl,BYTE PTR ds:0x8730000
30004472:	00 30                	add    BYTE PTR [eax],dh
30004474:	02 1d 00 00 a9 08    	add    bl,BYTE PTR ds:0x8a90000
3000447a:	00 30                	add    BYTE PTR [eax],dh
3000447c:	02 1d 00 00 e5 08    	add    bl,BYTE PTR ds:0x8e50000
30004482:	00 30                	add    BYTE PTR [eax],dh
30004484:	02 1d 00 00 23 09    	add    bl,BYTE PTR ds:0x9230000
3000448a:	00 30                	add    BYTE PTR [eax],dh
3000448c:	02 1d 00 00 63 09    	add    bl,BYTE PTR ds:0x9630000
30004492:	00 30                	add    BYTE PTR [eax],dh
30004494:	02 1d 00 00 a5 09    	add    bl,BYTE PTR ds:0x9a50000
3000449a:	00 30                	add    BYTE PTR [eax],dh
3000449c:	02 1d 00 00 57 0b    	add    bl,BYTE PTR ds:0xb570000
300044a2:	00 30                	add    BYTE PTR [eax],dh
300044a4:	02 1d 00 00 84 0b    	add    bl,BYTE PTR ds:0xb840000
300044aa:	00 30                	add    BYTE PTR [eax],dh
300044ac:	02 1d 00 00 67 0e    	add    bl,BYTE PTR ds:0xe670000
300044b2:	00 30                	add    BYTE PTR [eax],dh
300044b4:	02 1d 00 00 b3 20    	add    bl,BYTE PTR ds:0x20b30000
300044ba:	00 30                	add    BYTE PTR [eax],dh
300044bc:	02 1d 00 00 74 46    	add    bl,BYTE PTR ds:0x46740000
300044c2:	00 30                	add    BYTE PTR [eax],dh
300044c4:	01 12                	add    DWORD PTR [edx],edx
300044c6:	00 00                	add    BYTE PTR [eax],al
300044c8:	6c                   	ins    BYTE PTR es:[edi],dx
300044c9:	46                   	inc    esi
300044ca:	00 30                	add    BYTE PTR [eax],dh
300044cc:	07                   	pop    es
300044cd:	07                   	pop    es
300044ce:	00 00                	add    BYTE PTR [eax],al
300044d0:	70 46                	jo     30004518 <console_node+0x38>
300044d2:	00 30                	add    BYTE PTR [eax],dh
300044d4:	07                   	pop    es
300044d5:	10 00                	adc    BYTE PTR [eax],al
	...

Disassembly of section .data:

300044e0 <console_node>:
300044e0:	01 00                	add    DWORD PTR [eax],eax
	...

30004520 <rcsid>:
30004520:	24 48                	and    al,0x48
30004522:	65                   	gs
30004523:	61                   	popa   
30004524:	64                   	fs
30004525:	65                   	gs
30004526:	72 3a                	jb     30004562 <rcsid+0x42>
30004528:	20 2f                	and    BYTE PTR [edi],ch
3000452a:	75 73                	jne    3000459f <_DYNAMIC+0x13>
3000452c:	65                   	gs
3000452d:	72 36                	jb     30004565 <rcsid+0x45>
3000452f:	2f                   	das    
30004530:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004531:	75 73                	jne    300045a6 <_DYNAMIC+0x1a>
30004533:	74 65                	je     3000459a <_DYNAMIC+0xe>
30004535:	72 2f                	jb     30004566 <rcsid+0x46>
30004537:	74 63                	je     3000459c <_DYNAMIC+0x10>
30004539:	6c                   	ins    BYTE PTR es:[edi],dx
3000453a:	2f                   	das    
3000453b:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
3000453e:	70 61                	jo     300045a1 <_DYNAMIC+0x15>
30004540:	74 2f                	je     30004571 <rcsid+0x51>
30004542:	52                   	push   edx
30004543:	43                   	inc    ebx
30004544:	53                   	push   ebx
30004545:	2f                   	das    
30004546:	73 74                	jae    300045bc <_DYNAMIC+0x30>
30004548:	72 73                	jb     300045bd <_DYNAMIC+0x31>
3000454a:	74 72                	je     300045be <_DYNAMIC+0x32>
3000454c:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
30004550:	20 31                	and    BYTE PTR [ecx],dh
30004552:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
30004555:	39 33                	cmp    DWORD PTR [ebx],esi
30004557:	2f                   	das    
30004558:	30 33                	xor    BYTE PTR [ebx],dh
3000455a:	2f                   	das    
3000455b:	31 39                	xor    DWORD PTR [ecx],edi
3000455d:	20 31                	and    BYTE PTR [ecx],dh
3000455f:	35 3a 32 35 3a       	xor    eax,0x3a35323a
30004564:	34 30                	xor    al,0x30
30004566:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
30004569:	73 74                	jae    300045df <_DYNAMIC+0x53>
3000456b:	65                   	gs
3000456c:	72 20                	jb     3000458e <_DYNAMIC+0x2>
3000456e:	45                   	inc    ebp
3000456f:	78 70                	js     300045e1 <_DYNAMIC+0x55>
30004571:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
30004574:	53                   	push   ebx
30004575:	50                   	push   eax
30004576:	52                   	push   edx
30004577:	49                   	dec    ecx
30004578:	54                   	push   esp
30004579:	45                   	inc    ebp
3000457a:	20 28                	and    BYTE PTR [eax],ch
3000457c:	42                   	inc    edx
3000457d:	65                   	gs
3000457e:	72 6b                	jb     300045eb <_DYNAMIC+0x5f>
30004580:	65                   	gs
30004581:	6c                   	ins    BYTE PTR es:[edi],dx
30004582:	65                   	gs
30004583:	79 29                	jns    300045ae <_DYNAMIC+0x22>
30004585:	00 00                	add    BYTE PTR [eax],al
	...

30004588 <_daylight>:
30004588:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

3000458c <_DYNAMIC>:
3000458c:	19 00                	sbb    DWORD PTR [eax],eax
3000458e:	00 00                	add    BYTE PTR [eax],al
30004590:	74 46                	je     300045d8 <_DYNAMIC+0x4c>
30004592:	00 30                	add    BYTE PTR [eax],dh
30004594:	1b 00                	sbb    eax,DWORD PTR [eax]
30004596:	00 00                	add    BYTE PTR [eax],al
30004598:	04 00                	add    al,0x0
3000459a:	00 00                	add    BYTE PTR [eax],al
3000459c:	1a 00                	sbb    al,BYTE PTR [eax]
3000459e:	00 00                	add    BYTE PTR [eax],al
300045a0:	78 46                	js     300045e8 <_DYNAMIC+0x5c>
300045a2:	00 30                	add    BYTE PTR [eax],dh
300045a4:	1c 00                	sbb    al,0x0
300045a6:	00 00                	add    BYTE PTR [eax],al
300045a8:	04 00                	add    al,0x0
300045aa:	00 00                	add    BYTE PTR [eax],al
300045ac:	04 00                	add    al,0x0
300045ae:	00 00                	add    BYTE PTR [eax],al
300045b0:	18 3d 00 30 05 00    	sbb    BYTE PTR ds:0x53000,bh
300045b6:	00 00                	add    BYTE PTR [eax],al
300045b8:	b0 3b                	mov    al,0x3b
300045ba:	00 30                	add    BYTE PTR [eax],dh
300045bc:	06                   	push   es
300045bd:	00 00                	add    BYTE PTR [eax],al
300045bf:	00 80 38 00 30 0a    	add    BYTE PTR [eax+0xa300038],al
300045c5:	00 00                	add    BYTE PTR [eax],al
300045c7:	00 67 01             	add    BYTE PTR [edi+0x1],ah
300045ca:	00 00                	add    BYTE PTR [eax],al
300045cc:	0b 00                	or     eax,DWORD PTR [eax]
300045ce:	00 00                	add    BYTE PTR [eax],al
300045d0:	10 00                	adc    BYTE PTR [eax],al
300045d2:	00 00                	add    BYTE PTR [eax],al
300045d4:	03 00                	add    eax,DWORD PTR [eax]
300045d6:	00 00                	add    BYTE PTR [eax],al
300045d8:	60                   	pusha  
300045d9:	46                   	inc    esi
300045da:	00 30                	add    BYTE PTR [eax],dh
300045dc:	02 00                	add    al,BYTE PTR [eax]
300045de:	00 00                	add    BYTE PTR [eax],al
300045e0:	10 00                	adc    BYTE PTR [eax],al
300045e2:	00 00                	add    BYTE PTR [eax],al
300045e4:	14 00                	adc    al,0x0
300045e6:	00 00                	add    BYTE PTR [eax],al
300045e8:	11 00                	adc    DWORD PTR [eax],eax
300045ea:	00 00                	add    BYTE PTR [eax],al
300045ec:	17                   	pop    ss
300045ed:	00 00                	add    BYTE PTR [eax],al
300045ef:	00 c8                	add    al,cl
300045f1:	44                   	inc    esp
300045f2:	00 30                	add    BYTE PTR [eax],dh
300045f4:	11 00                	adc    DWORD PTR [eax],eax
300045f6:	00 00                	add    BYTE PTR [eax],al
300045f8:	00 44 00 30          	add    BYTE PTR [eax+eax*1+0x30],al
300045fc:	12 00                	adc    al,BYTE PTR [eax]
300045fe:	00 00                	add    BYTE PTR [eax],al
30004600:	c8 00 00 00          	enter  0x0,0x0
30004604:	13 00                	adc    eax,DWORD PTR [eax]
30004606:	00 00                	add    BYTE PTR [eax],al
30004608:	08 00                	or     BYTE PTR [eax],al
3000460a:	00 00                	add    BYTE PTR [eax],al
3000460c:	16                   	push   ss
3000460d:	00 00                	add    BYTE PTR [eax],al
3000460f:	00 00                	add    BYTE PTR [eax],al
30004611:	00 00                	add    BYTE PTR [eax],al
30004613:	00 fa                	add    dl,bh
30004615:	ff                   	(bad)  
30004616:	ff 6f 0a             	jmp    FWORD PTR [edi+0xa]
	...

Disassembly of section .got:

30004644 <.got>:
30004644:	a0 46 00 30 a8       	mov    al,ds:0xa8300046
30004649:	46                   	inc    esi
3000464a:	00 30                	add    BYTE PTR [eax],dh
3000464c:	84 46 00             	test   BYTE PTR [esi+0x0],al
3000464f:	30 88 46 00 30 8c    	xor    BYTE PTR [eax-0x73cfffba],cl
30004655:	46                   	inc    esi
30004656:	00 30                	add    BYTE PTR [eax],dh
30004658:	90                   	nop
30004659:	46                   	inc    esi
3000465a:	00 30                	add    BYTE PTR [eax],dh
3000465c:	94                   	xchg   esp,eax
3000465d:	46                   	inc    esi
3000465e:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .got.plt:

30004660 <_GLOBAL_OFFSET_TABLE_>:
30004660:	8c 45 00             	mov    WORD PTR [ebp+0x0],es
30004663:	30 00                	xor    BYTE PTR [eax],al
30004665:	00 00                	add    BYTE PTR [eax],al
30004667:	00 00                	add    BYTE PTR [eax],al
30004669:	00 00                	add    BYTE PTR [eax],al
3000466b:	00 d6                	add    dh,dl
3000466d:	2c 00                	sub    al,0x0
3000466f:	30 e6                	xor    dh,ah
30004671:	2c 00                	sub    al,0x0
30004673:	30                   	.byte 0x30

Disassembly of section .init_array:

30004674 <.init_array>:
30004674:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

30004678 <.fini_array>:
30004678:	67 0a 00             	or     al,BYTE PTR [bx+si]
3000467b:	30                   	.byte 0x30

Disassembly of section .data.rel.local:

3000467c <_tzname>:
3000467c:	80 43 00 30          	add    BYTE PTR [ebx+0x0],0x30
30004680:	80 43 00 30          	add    BYTE PTR [ebx+0x0],0x30

Disassembly of section .bss:

30004684 <heapEnd>:
30004684:	00 00                	add    BYTE PTR [eax],al
	...

30004688 <heapBase>:
30004688:	00 00                	add    BYTE PTR [eax],al
	...

3000468c <heapCurr>:
3000468c:	00 00                	add    BYTE PTR [eax],al
	...

30004690 <processEnvp>:
30004690:	00 00                	add    BYTE PTR [eax],al
	...

30004694 <libcTZ>:
30004694:	00 00                	add    BYTE PTR [eax],al
	...

30004698 <lasts.1340>:
30004698:	00 00                	add    BYTE PTR [eax],al
	...

3000469c <libcInitialized>:
3000469c:	00 00                	add    BYTE PTR [eax],al
	...

300046a0 <fops>:
	...

300046a8 <console_file>:
	...

300046b8 <_dstbias>:
300046b8:	00 00                	add    BYTE PTR [eax],al
	...

300046bc <ticksToWait>:
300046bc:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	6a 01                	push   0x1
       2:	00 00                	add    BYTE PTR [eax],al
       4:	04 00                	add    al,0x0
       6:	00 00                	add    BYTE PTR [eax],al
       8:	00 00                	add    BYTE PTR [eax],al
       a:	04 01                	add    al,0x1
       c:	fb                   	sti    
       d:	00 00                	add    BYTE PTR [eax],al
       f:	00 0c bf             	add    BYTE PTR [edi+edi*4],cl
      12:	00 00                	add    BYTE PTR [eax],al
      14:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
      17:	00 00                	add    BYTE PTR [eax],al
      19:	00 00                	add    BYTE PTR [eax],al
      1b:	00 30                	add    BYTE PTR [eax],dh
      1d:	70 00                	jo     1f <sysEnter_Vector-0x12ffe1>
      1f:	00 00                	add    BYTE PTR [eax],al
      21:	00 00                	add    BYTE PTR [eax],al
      23:	00 00                	add    BYTE PTR [eax],al
      25:	02 01                	add    al,BYTE PTR [ecx]
      27:	06                   	push   es
      28:	64 00 00             	add    BYTE PTR fs:[eax],al
      2b:	00 02                	add    BYTE PTR [edx],al
      2d:	01 06                	add    DWORD PTR [esi],eax
      2f:	5d                   	pop    ebp
      30:	00 00                	add    BYTE PTR [eax],al
      32:	00 02                	add    BYTE PTR [edx],al
      34:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
      3a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
      41:	02 08                	add    cl,BYTE PTR [eax]
      43:	05 00 00 00 00       	add    eax,0x0
      48:	02 01                	add    al,BYTE PTR [ecx]
      4a:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
      4d:	00 00                	add    BYTE PTR [eax],al
      4f:	02 02                	add    al,BYTE PTR [edx]
      51:	07                   	pop    es
      52:	0e                   	push   cs
      53:	00 00                	add    BYTE PTR [eax],al
      55:	00 04 70             	add    BYTE PTR [eax+esi*2],al
      58:	00 00                	add    BYTE PTR [eax],al
      5a:	00 02                	add    BYTE PTR [edx],al
      5c:	34 61                	xor    al,0x61
      5e:	00 00                	add    BYTE PTR [eax],al
      60:	00 02                	add    BYTE PTR [edx],al
      62:	04 07                	add    al,0x7
      64:	3e 00 00             	add    BYTE PTR ds:[eax],al
      67:	00 02                	add    BYTE PTR [edx],al
      69:	08 07                	or     BYTE PTR [edi],al
      6b:	34 00                	xor    al,0x0
      6d:	00 00                	add    BYTE PTR [eax],al
      6f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
      76:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
      79:	a2 00 00 00 02       	mov    ds:0x2000000,al
      7e:	01 02                	add    DWORD PTR [edx],eax
      80:	9c                   	pushf  
      81:	00 00                	add    BYTE PTR [eax],al
      83:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
      86:	00 00                	add    BYTE PTR [eax],al
      88:	00 03                	add    BYTE PTR [ebx],al
      8a:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
      8d:	00 00                	add    BYTE PTR [eax],al
      8f:	05 04 95 00 00       	add    eax,0x9504
      94:	00 06                	add    BYTE PTR [esi],al
      96:	25 00 00 00 02       	and    eax,0x2000000
      9b:	04 07                	add    al,0x7
      9d:	39 00                	cmp    DWORD PTR [eax],eax
      9f:	00 00                	add    BYTE PTR [eax],al
      a1:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
      a4:	e8 00 00 00 05       	call   50000a9 <sysEnter_Vector+0x4ed00a9>
      a9:	04 25                	add    al,0x25
      ab:	00 00                	add    BYTE PTR [eax],al
      ad:	00 07                	add    BYTE PTR [edi],al
      af:	21 00                	and    DWORD PTR [eax],eax
      b1:	00 00                	add    BYTE PTR [eax],al
      b3:	01 08                	add    DWORD PTR [eax],ecx
      b5:	a8 00                	test   al,0x0
      b7:	00 00                	add    BYTE PTR [eax],al
      b9:	00 00                	add    BYTE PTR [eax],al
      bb:	00 30                	add    BYTE PTR [eax],dh
      bd:	38 00                	cmp    BYTE PTR [eax],al
      bf:	00 00                	add    BYTE PTR [eax],al
      c1:	01 9c e0 00 00 00 08 	add    DWORD PTR [eax+eiz*8+0x8000000],ebx
      c8:	73 00                	jae    ca <sysEnter_Vector-0x12ff36>
      ca:	01 08                	add    DWORD PTR [eax],ecx
      cc:	8f 00                	pop    DWORD PTR [eax]
      ce:	00 00                	add    BYTE PTR [eax],al
      d0:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      d6:	01 08                	add    DWORD PTR [eax],ecx
      d8:	3a 00                	cmp    al,BYTE PTR [eax]
      da:	00 00                	add    BYTE PTR [eax],al
      dc:	02 91 04 00 07 ae    	add    dl,BYTE PTR [ecx-0x51f8fffc]
      e2:	00 00                	add    BYTE PTR [eax],al
      e4:	00 01                	add    BYTE PTR [ecx],al
      e6:	10 a8 00 00 00 38    	adc    BYTE PTR [eax+0x38000000],ch
      ec:	00 00                	add    BYTE PTR [eax],al
      ee:	30 38                	xor    BYTE PTR [eax],bh
      f0:	00 00                	add    BYTE PTR [eax],al
      f2:	00 01                	add    BYTE PTR [ecx],al
      f4:	9c                   	pushf  
      f5:	12 01                	adc    al,BYTE PTR [ecx]
      f7:	00 00                	add    BYTE PTR [eax],al
      f9:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
      fc:	01 10                	add    DWORD PTR [eax],edx
      fe:	8f 00                	pop    DWORD PTR [eax]
     100:	00 00                	add    BYTE PTR [eax],al
     102:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
     108:	01 10                	add    DWORD PTR [eax],edx
     10a:	3a 00                	cmp    al,BYTE PTR [eax]
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	02 91 04 00 09 4b    	add    dl,BYTE PTR [ecx+0x4b090004]
     114:	00 00                	add    BYTE PTR [eax],al
     116:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     119:	56                   	push   esi
     11a:	00 00                	add    BYTE PTR [eax],al
     11c:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
     122:	30 09                	xor    BYTE PTR [ecx],cl
     124:	b6 00                	mov    dh,0x0
     126:	00 00                	add    BYTE PTR [eax],al
     128:	04 35                	add    al,0x35
     12a:	56                   	push   esi
     12b:	00 00                	add    BYTE PTR [eax],al
     12d:	00 05 03 8c 46 00    	add    BYTE PTR ds:0x468c03,al
     133:	30 09                	xor    BYTE PTR [ecx],cl
     135:	62 01                	bound  eax,QWORD PTR [ecx]
     137:	00 00                	add    BYTE PTR [eax],al
     139:	04 36                	add    al,0x36
     13b:	56                   	push   esi
     13c:	00 00                	add    BYTE PTR [eax],al
     13e:	00 05 03 84 46 00    	add    BYTE PTR ds:0x468403,al
     144:	30 09                	xor    BYTE PTR [ecx],cl
     146:	54                   	push   esp
     147:	00 00                	add    BYTE PTR [eax],al
     149:	00 05 44 84 00 00    	add    BYTE PTR ds:0x8444,al
     14f:	00 05 03 94 46 00    	add    BYTE PTR ds:0x469403,al
     155:	30 09                	xor    BYTE PTR [ecx],cl
     157:	28 00                	sub    BYTE PTR [eax],al
     159:	00 00                	add    BYTE PTR [eax],al
     15b:	05 45 67 01 00       	add    eax,0x16745
     160:	00 05 03 90 46 00    	add    BYTE PTR ds:0x469003,al
     166:	30 05 04 a8 00 00    	xor    BYTE PTR ds:0xa804,al
     16c:	00 00                	add    BYTE PTR [eax],al
     16e:	a9 01 00 00 04       	test   eax,0x4000001
     173:	00 83 00 00 00 04    	add    BYTE PTR [ebx+0x4000000],al
     179:	01 fb                	add    ebx,edi
     17b:	00 00                	add    BYTE PTR [eax],al
     17d:	00 0c 7b             	add    BYTE PTR [ebx+edi*2],cl
     180:	01 00                	add    DWORD PTR [eax],eax
     182:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
     185:	00 00                	add    BYTE PTR [eax],al
     187:	70 00                	jo     189 <sysEnter_Vector-0x12fe77>
     189:	00 30                	add    BYTE PTR [eax],dh
     18b:	aa                   	stos   BYTE PTR es:[edi],al
     18c:	00 00                	add    BYTE PTR [eax],al
     18e:	00 de                	add    dh,bl
     190:	00 00                	add    BYTE PTR [eax],al
     192:	00 02                	add    BYTE PTR [edx],al
     194:	01 06                	add    DWORD PTR [esi],eax
     196:	64 00 00             	add    BYTE PTR fs:[eax],al
     199:	00 02                	add    BYTE PTR [edx],al
     19b:	01 06                	add    DWORD PTR [esi],eax
     19d:	5d                   	pop    ebp
     19e:	00 00                	add    BYTE PTR [eax],al
     1a0:	00 02                	add    BYTE PTR [edx],al
     1a2:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
     1a8:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     1af:	02 08                	add    cl,BYTE PTR [eax]
     1b1:	05 00 00 00 00       	add    eax,0x0
     1b6:	02 01                	add    al,BYTE PTR [ecx]
     1b8:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     1bb:	00 00                	add    BYTE PTR [eax],al
     1bd:	02 02                	add    al,BYTE PTR [edx]
     1bf:	07                   	pop    es
     1c0:	0e                   	push   cs
     1c1:	00 00                	add    BYTE PTR [eax],al
     1c3:	00 04 70             	add    BYTE PTR [eax+esi*2],al
     1c6:	00 00                	add    BYTE PTR [eax],al
     1c8:	00 02                	add    BYTE PTR [edx],al
     1ca:	34 61                	xor    al,0x61
     1cc:	00 00                	add    BYTE PTR [eax],al
     1ce:	00 02                	add    BYTE PTR [edx],al
     1d0:	04 07                	add    al,0x7
     1d2:	3e 00 00             	add    BYTE PTR ds:[eax],al
     1d5:	00 02                	add    BYTE PTR [edx],al
     1d7:	08 07                	or     BYTE PTR [edi],al
     1d9:	34 00                	xor    al,0x0
     1db:	00 00                	add    BYTE PTR [eax],al
     1dd:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     1e4:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     1e7:	a2 00 00 00 02       	mov    ds:0x2000000,al
     1ec:	01 02                	add    DWORD PTR [edx],eax
     1ee:	9c                   	pushf  
     1ef:	00 00                	add    BYTE PTR [eax],al
     1f1:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     1f4:	00 00                	add    BYTE PTR [eax],al
     1f6:	00 03                	add    BYTE PTR [ebx],al
     1f8:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
     1fb:	00 00                	add    BYTE PTR [eax],al
     1fd:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     200:	39 00                	cmp    DWORD PTR [eax],eax
     202:	00 00                	add    BYTE PTR [eax],al
     204:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     207:	e8 00 00 00 05       	call   500020c <sysEnter_Vector+0x4ed020c>
     20c:	04 25                	add    al,0x25
     20e:	00 00                	add    BYTE PTR [eax],al
     210:	00 06                	add    BYTE PTR [esi],al
     212:	73 01                	jae    215 <sysEnter_Vector-0x12fdeb>
     214:	00 00                	add    BYTE PTR [eax],al
     216:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     21c:	70 00                	jo     21e <sysEnter_Vector-0x12fde2>
     21e:	00 30                	add    BYTE PTR [eax],dh
     220:	55                   	push   ebp
     221:	00 00                	add    BYTE PTR [eax],al
     223:	00 01                	add    BYTE PTR [ecx],al
     225:	9c                   	pushf  
     226:	fa                   	cli    
     227:	00 00                	add    BYTE PTR [eax],al
     229:	00 07                	add    BYTE PTR [edi],al
     22b:	09 0b                	or     DWORD PTR [ebx],ecx
     22d:	00 00                	add    BYTE PTR [eax],al
     22f:	01 25 9d 00 00 00    	add    DWORD PTR ds:0x9d,esp
     235:	02 91 00 07 a5 01    	add    dl,BYTE PTR [ecx+0x1a50700]
     23b:	00 00                	add    BYTE PTR [eax],al
     23d:	01 25 9d 00 00 00    	add    DWORD PTR ds:0x9d,esp
     243:	02 91 04 08 63 00    	add    dl,BYTE PTR [ecx+0x630804]
     249:	01 27                	add    DWORD PTR [edi],esp
     24b:	25 00 00 00 01       	and    eax,0x1000000
     250:	51                   	push   ecx
     251:	08 70 00             	or     BYTE PTR [eax+0x0],dh
     254:	01 27                	add    DWORD PTR [edi],esp
     256:	9d                   	popf   
     257:	00 00                	add    BYTE PTR [eax],al
     259:	00 01                	add    BYTE PTR [ecx],al
     25b:	56                   	push   esi
     25c:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
     25f:	01 27                	add    DWORD PTR [edi],esp
     261:	9d                   	popf   
     262:	00 00                	add    BYTE PTR [eax],al
     264:	00 01                	add    BYTE PTR [ecx],al
     266:	53                   	push   ebx
     267:	00 06                	add    BYTE PTR [esi],al
     269:	6a 01                	push   0x1
     26b:	00 00                	add    BYTE PTR [eax],al
     26d:	01 33                	add    DWORD PTR [ebx],esi
     26f:	3a 00                	cmp    al,BYTE PTR [eax]
     271:	00 00                	add    BYTE PTR [eax],al
     273:	c5 00                	lds    eax,FWORD PTR [eax]
     275:	00 30                	add    BYTE PTR [eax],dh
     277:	55                   	push   ebp
     278:	00 00                	add    BYTE PTR [eax],al
     27a:	00 01                	add    BYTE PTR [ecx],al
     27c:	9c                   	pushf  
     27d:	51                   	push   ecx
     27e:	01 00                	add    DWORD PTR [eax],eax
     280:	00 07                	add    BYTE PTR [edi],al
     282:	09 0b                	or     DWORD PTR [ebx],ecx
     284:	00 00                	add    BYTE PTR [eax],al
     286:	01 33                	add    DWORD PTR [ebx],esi
     288:	9d                   	popf   
     289:	00 00                	add    BYTE PTR [eax],al
     28b:	00 02                	add    BYTE PTR [edx],al
     28d:	91                   	xchg   ecx,eax
     28e:	00 07                	add    BYTE PTR [edi],al
     290:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
     291:	01 00                	add    DWORD PTR [eax],eax
     293:	00 01                	add    BYTE PTR [ecx],al
     295:	33 9d 00 00 00 02    	xor    ebx,DWORD PTR [ebp+0x2000000]
     29b:	91                   	xchg   ecx,eax
     29c:	04 08                	add    al,0x8
     29e:	63 00                	arpl   WORD PTR [eax],ax
     2a0:	01 35 25 00 00 00    	add    DWORD PTR ds:0x25,esi
     2a6:	01 51 08             	add    DWORD PTR [ecx+0x8],edx
     2a9:	70 00                	jo     2ab <sysEnter_Vector-0x12fd55>
     2ab:	01 35 9d 00 00 00    	add    DWORD PTR ds:0x9d,esi
     2b1:	01 56 08             	add    DWORD PTR [esi+0x8],edx
     2b4:	73 00                	jae    2b6 <sysEnter_Vector-0x12fd4a>
     2b6:	01 35 9d 00 00 00    	add    DWORD PTR ds:0x9d,esi
     2bc:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
     2bf:	09 4b 00             	or     DWORD PTR [ebx+0x0],ecx
     2c2:	00 00                	add    BYTE PTR [eax],al
     2c4:	04 34                	add    al,0x34
     2c6:	56                   	push   esi
     2c7:	00 00                	add    BYTE PTR [eax],al
     2c9:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
     2cf:	30 09                	xor    BYTE PTR [ecx],cl
     2d1:	b6 00                	mov    dh,0x0
     2d3:	00 00                	add    BYTE PTR [eax],al
     2d5:	04 35                	add    al,0x35
     2d7:	56                   	push   esi
     2d8:	00 00                	add    BYTE PTR [eax],al
     2da:	00 05 03 8c 46 00    	add    BYTE PTR ds:0x468c03,al
     2e0:	30 09                	xor    BYTE PTR [ecx],cl
     2e2:	62 01                	bound  eax,QWORD PTR [ecx]
     2e4:	00 00                	add    BYTE PTR [eax],al
     2e6:	04 36                	add    al,0x36
     2e8:	56                   	push   esi
     2e9:	00 00                	add    BYTE PTR [eax],al
     2eb:	00 05 03 84 46 00    	add    BYTE PTR ds:0x468403,al
     2f1:	30 09                	xor    BYTE PTR [ecx],cl
     2f3:	54                   	push   esp
     2f4:	00 00                	add    BYTE PTR [eax],al
     2f6:	00 05 44 84 00 00    	add    BYTE PTR ds:0x8444,al
     2fc:	00 05 03 94 46 00    	add    BYTE PTR ds:0x469403,al
     302:	30 09                	xor    BYTE PTR [ecx],cl
     304:	28 00                	sub    BYTE PTR [eax],al
     306:	00 00                	add    BYTE PTR [eax],al
     308:	05 45 a6 01 00       	add    eax,0x1a645
     30d:	00 05 03 90 46 00    	add    BYTE PTR ds:0x469003,al
     313:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
     319:	00 00                	add    BYTE PTR [eax],al
     31b:	4c                   	dec    esp
     31c:	01 00                	add    DWORD PTR [eax],eax
     31e:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     321:	0e                   	push   cs
     322:	01 00                	add    DWORD PTR [eax],eax
     324:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     327:	fb                   	sti    
     328:	00 00                	add    BYTE PTR [eax],al
     32a:	00 0c ab             	add    BYTE PTR [ebx+ebp*4],cl
     32d:	01 00                	add    DWORD PTR [eax],eax
     32f:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
     332:	00 00                	add    BYTE PTR [eax],al
     334:	1c 01                	sbb    al,0x1
     336:	00 30                	add    BYTE PTR [eax],dh
     338:	97                   	xchg   edi,eax
     339:	00 00                	add    BYTE PTR [eax],al
     33b:	00 ef                	add    bh,ch
     33d:	01 00                	add    DWORD PTR [eax],eax
     33f:	00 02                	add    BYTE PTR [edx],al
     341:	01 06                	add    DWORD PTR [esi],eax
     343:	64 00 00             	add    BYTE PTR fs:[eax],al
     346:	00 02                	add    BYTE PTR [edx],al
     348:	01 06                	add    DWORD PTR [esi],eax
     34a:	5d                   	pop    ebp
     34b:	00 00                	add    BYTE PTR [eax],al
     34d:	00 02                	add    BYTE PTR [edx],al
     34f:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
     355:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     35c:	02 08                	add    cl,BYTE PTR [eax]
     35e:	05 00 00 00 00       	add    eax,0x0
     363:	02 01                	add    al,BYTE PTR [ecx]
     365:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     368:	00 00                	add    BYTE PTR [eax],al
     36a:	02 02                	add    al,BYTE PTR [edx]
     36c:	07                   	pop    es
     36d:	0e                   	push   cs
     36e:	00 00                	add    BYTE PTR [eax],al
     370:	00 04 70             	add    BYTE PTR [eax+esi*2],al
     373:	00 00                	add    BYTE PTR [eax],al
     375:	00 02                	add    BYTE PTR [edx],al
     377:	34 61                	xor    al,0x61
     379:	00 00                	add    BYTE PTR [eax],al
     37b:	00 02                	add    BYTE PTR [edx],al
     37d:	04 07                	add    al,0x7
     37f:	3e 00 00             	add    BYTE PTR ds:[eax],al
     382:	00 02                	add    BYTE PTR [edx],al
     384:	08 07                	or     BYTE PTR [edi],al
     386:	34 00                	xor    al,0x0
     388:	00 00                	add    BYTE PTR [eax],al
     38a:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     391:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     394:	a2 00 00 00 02       	mov    ds:0x2000000,al
     399:	01 02                	add    DWORD PTR [edx],eax
     39b:	9c                   	pushf  
     39c:	00 00                	add    BYTE PTR [eax],al
     39e:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     3a1:	00 00                	add    BYTE PTR [eax],al
     3a3:	00 03                	add    BYTE PTR [ebx],al
     3a5:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
     3a8:	00 00                	add    BYTE PTR [eax],al
     3aa:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     3ad:	39 00                	cmp    DWORD PTR [eax],eax
     3af:	00 00                	add    BYTE PTR [eax],al
     3b1:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     3b4:	e8 00 00 00 05       	call   50003b9 <sysEnter_Vector+0x4ed03b9>
     3b9:	04 25                	add    al,0x25
     3bb:	00 00                	add    BYTE PTR [eax],al
     3bd:	00 06                	add    BYTE PTR [esi],al
     3bf:	e0 01                	loopne 3c2 <sysEnter_Vector-0x12fc3e>
     3c1:	00 00                	add    BYTE PTR [eax],al
     3c3:	01 28                	add    DWORD PTR [eax],ebp
     3c5:	9d                   	popf   
     3c6:	00 00                	add    BYTE PTR [eax],al
     3c8:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     3cb:	00 30                	add    BYTE PTR [eax],dh
     3cd:	97                   	xchg   edi,eax
     3ce:	00 00                	add    BYTE PTR [eax],al
     3d0:	00 01                	add    BYTE PTR [ecx],al
     3d2:	9c                   	pushf  
     3d3:	f4                   	hlt    
     3d4:	00 00                	add    BYTE PTR [eax],al
     3d6:	00 07                	add    BYTE PTR [edi],al
     3d8:	73 00                	jae    3da <sysEnter_Vector-0x12fc26>
     3da:	01 28                	add    DWORD PTR [eax],ebp
     3dc:	9d                   	popf   
     3dd:	00 00                	add    BYTE PTR [eax],al
     3df:	00 02                	add    BYTE PTR [edx],al
     3e1:	91                   	xchg   ecx,eax
     3e2:	00 08                	add    BYTE PTR [eax],cl
     3e4:	d4 01                	aam    0x1
     3e6:	00 00                	add    BYTE PTR [eax],al
     3e8:	01 28                	add    DWORD PTR [eax],ebp
     3ea:	9d                   	popf   
     3eb:	00 00                	add    BYTE PTR [eax],al
     3ed:	00 02                	add    BYTE PTR [edx],al
     3ef:	91                   	xchg   ecx,eax
     3f0:	04 09                	add    al,0x9
     3f2:	da 01                	fiadd  DWORD PTR [ecx]
     3f4:	00 00                	add    BYTE PTR [eax],al
     3f6:	01 2a                	add    DWORD PTR [edx],ebp
     3f8:	9d                   	popf   
     3f9:	00 00                	add    BYTE PTR [eax],al
     3fb:	00 05 03 98 46 00    	add    BYTE PTR ds:0x469803,al
     401:	30 0a                	xor    BYTE PTR [edx],cl
     403:	63 68 00             	arpl   WORD PTR [eax+0x0],bp
     406:	01 2b                	add    DWORD PTR [ebx],ebp
     408:	3a 00                	cmp    al,BYTE PTR [eax]
     40a:	00 00                	add    BYTE PTR [eax],al
     40c:	01 56 00             	add    DWORD PTR [esi+0x0],edx
     40f:	0b 4b 00             	or     ecx,DWORD PTR [ebx+0x0]
     412:	00 00                	add    BYTE PTR [eax],al
     414:	04 34                	add    al,0x34
     416:	56                   	push   esi
     417:	00 00                	add    BYTE PTR [eax],al
     419:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
     41f:	30 0b                	xor    BYTE PTR [ebx],cl
     421:	b6 00                	mov    dh,0x0
     423:	00 00                	add    BYTE PTR [eax],al
     425:	04 35                	add    al,0x35
     427:	56                   	push   esi
     428:	00 00                	add    BYTE PTR [eax],al
     42a:	00 05 03 8c 46 00    	add    BYTE PTR ds:0x468c03,al
     430:	30 0b                	xor    BYTE PTR [ebx],cl
     432:	62 01                	bound  eax,QWORD PTR [ecx]
     434:	00 00                	add    BYTE PTR [eax],al
     436:	04 36                	add    al,0x36
     438:	56                   	push   esi
     439:	00 00                	add    BYTE PTR [eax],al
     43b:	00 05 03 84 46 00    	add    BYTE PTR ds:0x468403,al
     441:	30 0b                	xor    BYTE PTR [ebx],cl
     443:	54                   	push   esp
     444:	00 00                	add    BYTE PTR [eax],al
     446:	00 05 44 84 00 00    	add    BYTE PTR ds:0x8444,al
     44c:	00 05 03 94 46 00    	add    BYTE PTR ds:0x469403,al
     452:	30 0b                	xor    BYTE PTR [ebx],cl
     454:	28 00                	sub    BYTE PTR [eax],al
     456:	00 00                	add    BYTE PTR [eax],al
     458:	05 45 49 01 00       	add    eax,0x14945
     45d:	00 05 03 90 46 00    	add    BYTE PTR ds:0x469003,al
     463:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
     469:	00 00                	add    BYTE PTR [eax],al
     46b:	1d 02 00 00 04       	sbb    eax,0x4000002
     470:	00 b7 01 00 00 04    	add    BYTE PTR [edi+0x4000001],dh
     476:	01 fb                	add    ebx,edi
     478:	00 00                	add    BYTE PTR [eax],al
     47a:	00 0c ed 01 00 00 79 	add    BYTE PTR [ebp*8+0x79000001],cl
     481:	00 00                	add    BYTE PTR [eax],al
     483:	00 b4 01 00 30 49 02 	add    BYTE PTR [ecx+eax*1+0x2493000],dh
     48a:	00 00                	add    BYTE PTR [eax],al
     48c:	d1 02                	rol    DWORD PTR [edx],1
     48e:	00 00                	add    BYTE PTR [eax],al
     490:	02 01                	add    al,BYTE PTR [ecx]
     492:	06                   	push   es
     493:	64 00 00             	add    BYTE PTR fs:[eax],al
     496:	00 02                	add    BYTE PTR [edx],al
     498:	01 06                	add    DWORD PTR [esi],eax
     49a:	5d                   	pop    ebp
     49b:	00 00                	add    BYTE PTR [eax],al
     49d:	00 02                	add    BYTE PTR [edx],al
     49f:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
     4a5:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     4ac:	02 08                	add    cl,BYTE PTR [eax]
     4ae:	05 00 00 00 00       	add    eax,0x0
     4b3:	02 01                	add    al,BYTE PTR [ecx]
     4b5:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     4b8:	00 00                	add    BYTE PTR [eax],al
     4ba:	02 02                	add    al,BYTE PTR [edx]
     4bc:	07                   	pop    es
     4bd:	0e                   	push   cs
     4be:	00 00                	add    BYTE PTR [eax],al
     4c0:	00 04 70             	add    BYTE PTR [eax+esi*2],al
     4c3:	00 00                	add    BYTE PTR [eax],al
     4c5:	00 02                	add    BYTE PTR [edx],al
     4c7:	34 61                	xor    al,0x61
     4c9:	00 00                	add    BYTE PTR [eax],al
     4cb:	00 02                	add    BYTE PTR [edx],al
     4cd:	04 07                	add    al,0x7
     4cf:	3e 00 00             	add    BYTE PTR ds:[eax],al
     4d2:	00 02                	add    BYTE PTR [edx],al
     4d4:	08 07                	or     BYTE PTR [edi],al
     4d6:	34 00                	xor    al,0x0
     4d8:	00 00                	add    BYTE PTR [eax],al
     4da:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     4e1:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     4e4:	a2 00 00 00 02       	mov    ds:0x2000000,al
     4e9:	01 02                	add    DWORD PTR [edx],eax
     4eb:	9c                   	pushf  
     4ec:	00 00                	add    BYTE PTR [eax],al
     4ee:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     4f1:	00 00                	add    BYTE PTR [eax],al
     4f3:	00 03                	add    BYTE PTR [ebx],al
     4f5:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
     4f8:	00 00                	add    BYTE PTR [eax],al
     4fa:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     4fd:	39 00                	cmp    DWORD PTR [eax],eax
     4ff:	00 00                	add    BYTE PTR [eax],al
     501:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     504:	e8 00 00 00 05       	call   5000509 <sysEnter_Vector+0x4ed0509>
     509:	04 25                	add    al,0x25
     50b:	00 00                	add    BYTE PTR [eax],al
     50d:	00 06                	add    BYTE PTR [esi],al
     50f:	03 02                	add    eax,DWORD PTR [edx]
     511:	00 00                	add    BYTE PTR [eax],al
     513:	01 09                	add    DWORD PTR [ecx],ecx
     515:	b4 01                	mov    ah,0x1
     517:	00 30                	add    BYTE PTR [eax],dh
     519:	77 00                	ja     51b <sysEnter_Vector-0x12fae5>
     51b:	00 00                	add    BYTE PTR [eax],al
     51d:	01 9c e9 00 00 00 07 	add    DWORD PTR [ecx+ebp*8+0x7000000],ebx
     524:	73 00                	jae    526 <sysEnter_Vector-0x12fada>
     526:	01 09                	add    DWORD PTR [ecx],ecx
     528:	9d                   	popf   
     529:	00 00                	add    BYTE PTR [eax],al
     52b:	00 02                	add    BYTE PTR [edx],al
     52d:	91                   	xchg   ecx,eax
     52e:	00 08                	add    BYTE PTR [eax],cl
     530:	69 00 01 0b 3a 00    	imul   eax,DWORD PTR [eax],0x3a0b01
     536:	00 00                	add    BYTE PTR [eax],al
     538:	02 91 6c 08 6a 00    	add    dl,BYTE PTR [ecx+0x6a086c]
     53e:	01 0b                	add    DWORD PTR [ebx],ecx
     540:	3a 00                	cmp    al,BYTE PTR [eax]
     542:	00 00                	add    BYTE PTR [eax],al
     544:	02 91 68 08 63 00    	add    dl,BYTE PTR [ecx+0x630868]
     54a:	01 0c 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],ecx
     551:	91                   	xchg   ecx,eax
     552:	67 00 06 f9 01       	add    BYTE PTR ds:0x1f9,al
     557:	00 00                	add    BYTE PTR [eax],al
     559:	01 15 2b 02 00 30    	add    DWORD PTR ds:0x3000022b,edx
     55f:	bb 00 00 00 01       	mov    ebx,0x1000000
     564:	9c                   	pushf  
     565:	31 01                	xor    DWORD PTR [ecx],eax
     567:	00 00                	add    BYTE PTR [eax],al
     569:	07                   	pop    es
     56a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     56b:	00 01                	add    BYTE PTR [ecx],al
     56d:	15 3a 00 00 00       	adc    eax,0x3a
     572:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     578:	01 15 9d 00 00 00    	add    DWORD PTR ds:0x9d,edx
     57e:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     584:	01 17                	add    DWORD PTR [edi],edx
     586:	3a 00                	cmp    al,BYTE PTR [eax]
     588:	00 00                	add    BYTE PTR [eax],al
     58a:	02 91 6c 09 0c 02    	add    dl,BYTE PTR [ecx+0x20c096c]
     590:	00 00                	add    BYTE PTR [eax],al
     592:	01 17                	add    DWORD PTR [edi],edx
     594:	3a 00                	cmp    al,BYTE PTR [eax]
     596:	00 00                	add    BYTE PTR [eax],al
     598:	02 91 68 00 06 e7    	add    dl,BYTE PTR [ecx-0x18f9ff98]
     59e:	01 00                	add    DWORD PTR [eax],eax
     5a0:	00 01                	add    BYTE PTR [ecx],al
     5a2:	25 e6 02 00 30       	and    eax,0x300002e6
     5a7:	bb 00 00 00 01       	mov    ebx,0x1000000
     5ac:	9c                   	pushf  
     5ad:	79 01                	jns    5b0 <sysEnter_Vector-0x12fa50>
     5af:	00 00                	add    BYTE PTR [eax],al
     5b1:	07                   	pop    es
     5b2:	6e                   	outs   dx,BYTE PTR ds:[esi]
     5b3:	00 01                	add    BYTE PTR [ecx],al
     5b5:	25 3a 00 00 00       	and    eax,0x3a
     5ba:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     5c0:	01 25 9d 00 00 00    	add    DWORD PTR ds:0x9d,esp
     5c6:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     5cc:	01 27                	add    DWORD PTR [edi],esp
     5ce:	3a 00                	cmp    al,BYTE PTR [eax]
     5d0:	00 00                	add    BYTE PTR [eax],al
     5d2:	02 91 6c 09 0c 02    	add    dl,BYTE PTR [ecx+0x20c096c]
     5d8:	00 00                	add    BYTE PTR [eax],al
     5da:	01 27                	add    DWORD PTR [edi],esp
     5dc:	3a 00                	cmp    al,BYTE PTR [eax]
     5de:	00 00                	add    BYTE PTR [eax],al
     5e0:	02 91 68 00 0a fe    	add    dl,BYTE PTR [ecx-0x1f5ff98]
     5e6:	01 00                	add    DWORD PTR [eax],eax
     5e8:	00 01                	add    BYTE PTR [ecx],al
     5ea:	36 3a 00             	cmp    al,BYTE PTR ss:[eax]
     5ed:	00 00                	add    BYTE PTR [eax],al
     5ef:	a1 03 00 30 5c       	mov    eax,ds:0x5c300003
     5f4:	00 00                	add    BYTE PTR [eax],al
     5f6:	00 01                	add    BYTE PTR [ecx],al
     5f8:	9c                   	pushf  
     5f9:	c5 01                	lds    eax,FWORD PTR [ecx]
     5fb:	00 00                	add    BYTE PTR [eax],al
     5fd:	07                   	pop    es
     5fe:	73 74                	jae    674 <sysEnter_Vector-0x12f98c>
     600:	72 00                	jb     602 <sysEnter_Vector-0x12f9fe>
     602:	01 36                	add    DWORD PTR [esi],esi
     604:	9d                   	popf   
     605:	00 00                	add    BYTE PTR [eax],al
     607:	00 02                	add    BYTE PTR [edx],al
     609:	91                   	xchg   ecx,eax
     60a:	00 08                	add    BYTE PTR [eax],cl
     60c:	72 65                	jb     673 <sysEnter_Vector-0x12f98d>
     60e:	73 00                	jae    610 <sysEnter_Vector-0x12f9f0>
     610:	01 38                	add    DWORD PTR [eax],edi
     612:	3a 00                	cmp    al,BYTE PTR [eax]
     614:	00 00                	add    BYTE PTR [eax],al
     616:	02 91 74 0b b8 03    	add    dl,BYTE PTR [ecx+0x3b80b74]
     61c:	00 30                	add    BYTE PTR [eax],dh
     61e:	40                   	inc    eax
     61f:	00 00                	add    BYTE PTR [eax],al
     621:	00 08                	add    BYTE PTR [eax],cl
     623:	69 00 01 3c 3a 00    	imul   eax,DWORD PTR [eax],0x3a3c01
     629:	00 00                	add    BYTE PTR [eax],al
     62b:	02 91 70 00 00 0c    	add    dl,BYTE PTR [ecx+0xc000070]
     631:	4b                   	dec    ebx
     632:	00 00                	add    BYTE PTR [eax],al
     634:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     637:	56                   	push   esi
     638:	00 00                	add    BYTE PTR [eax],al
     63a:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
     640:	30 0c b6             	xor    BYTE PTR [esi+esi*4],cl
     643:	00 00                	add    BYTE PTR [eax],al
     645:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
     64c:	05 03 8c 46 00       	add    eax,0x468c03
     651:	30 0c 62             	xor    BYTE PTR [edx+eiz*2],cl
     654:	01 00                	add    DWORD PTR [eax],eax
     656:	00 04 36             	add    BYTE PTR [esi+esi*1],al
     659:	56                   	push   esi
     65a:	00 00                	add    BYTE PTR [eax],al
     65c:	00 05 03 84 46 00    	add    BYTE PTR ds:0x468403,al
     662:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
     665:	00 00                	add    BYTE PTR [eax],al
     667:	00 05 44 84 00 00    	add    BYTE PTR ds:0x8444,al
     66d:	00 05 03 94 46 00    	add    BYTE PTR ds:0x469403,al
     673:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
     676:	00 00                	add    BYTE PTR [eax],al
     678:	00 05 45 1a 02 00    	add    BYTE PTR ds:0x21a45,al
     67e:	00 05 03 90 46 00    	add    BYTE PTR ds:0x469003,al
     684:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
     68a:	00 00                	add    BYTE PTR [eax],al
     68c:	bd 01 00 00 04       	mov    ebp,0x4000001
     691:	00 74 02 00          	add    BYTE PTR [edx+eax*1+0x0],dh
     695:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     698:	fb                   	sti    
     699:	00 00                	add    BYTE PTR [eax],al
     69b:	00 0c 33             	add    BYTE PTR [ebx+esi*1],cl
     69e:	02 00                	add    al,BYTE PTR [eax]
     6a0:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
     6a3:	00 00                	add    BYTE PTR [eax],al
     6a5:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     6a8:	30 6b 02             	xor    BYTE PTR [ebx+0x2],ch
     6ab:	00 00                	add    BYTE PTR [eax],al
     6ad:	ef                   	out    dx,eax
     6ae:	03 00                	add    eax,DWORD PTR [eax]
     6b0:	00 02                	add    BYTE PTR [edx],al
     6b2:	01 06                	add    DWORD PTR [esi],eax
     6b4:	64 00 00             	add    BYTE PTR fs:[eax],al
     6b7:	00 02                	add    BYTE PTR [edx],al
     6b9:	01 06                	add    DWORD PTR [esi],eax
     6bb:	5d                   	pop    ebp
     6bc:	00 00                	add    BYTE PTR [eax],al
     6be:	00 02                	add    BYTE PTR [edx],al
     6c0:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
     6c6:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     6cd:	02 08                	add    cl,BYTE PTR [eax]
     6cf:	05 00 00 00 00       	add    eax,0x0
     6d4:	02 01                	add    al,BYTE PTR [ecx]
     6d6:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     6d9:	00 00                	add    BYTE PTR [eax],al
     6db:	02 02                	add    al,BYTE PTR [edx]
     6dd:	07                   	pop    es
     6de:	0e                   	push   cs
     6df:	00 00                	add    BYTE PTR [eax],al
     6e1:	00 04 70             	add    BYTE PTR [eax+esi*2],al
     6e4:	00 00                	add    BYTE PTR [eax],al
     6e6:	00 02                	add    BYTE PTR [edx],al
     6e8:	34 61                	xor    al,0x61
     6ea:	00 00                	add    BYTE PTR [eax],al
     6ec:	00 02                	add    BYTE PTR [edx],al
     6ee:	04 07                	add    al,0x7
     6f0:	3e 00 00             	add    BYTE PTR ds:[eax],al
     6f3:	00 02                	add    BYTE PTR [edx],al
     6f5:	08 07                	or     BYTE PTR [edi],al
     6f7:	34 00                	xor    al,0x0
     6f9:	00 00                	add    BYTE PTR [eax],al
     6fb:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     702:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     705:	a2 00 00 00 02       	mov    ds:0x2000000,al
     70a:	01 02                	add    DWORD PTR [edx],eax
     70c:	9c                   	pushf  
     70d:	00 00                	add    BYTE PTR [eax],al
     70f:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     712:	00 00                	add    BYTE PTR [eax],al
     714:	00 03                	add    BYTE PTR [ebx],al
     716:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
     719:	00 00                	add    BYTE PTR [eax],al
     71b:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     71e:	39 00                	cmp    DWORD PTR [eax],eax
     720:	00 00                	add    BYTE PTR [eax],al
     722:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     725:	e8 00 00 00 05       	call   500072a <sysEnter_Vector+0x4ed072a>
     72a:	04 25                	add    al,0x25
     72c:	00 00                	add    BYTE PTR [eax],al
     72e:	00 06                	add    BYTE PTR [esi],al
     730:	2c 02                	sub    al,0x2
     732:	00 00                	add    BYTE PTR [eax],al
     734:	01 09                	add    DWORD PTR [ecx],ecx
     736:	3a 00                	cmp    al,BYTE PTR [eax]
     738:	00 00                	add    BYTE PTR [eax],al
     73a:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     73d:	30 aa 00 00 00 01    	xor    BYTE PTR [edx+0x1000000],ch
     743:	9c                   	pushf  
     744:	f1                   	icebp  
     745:	00 00                	add    BYTE PTR [eax],al
     747:	00 07                	add    BYTE PTR [edi],al
     749:	45                   	inc    ebp
     74a:	02 00                	add    al,BYTE PTR [eax]
     74c:	00 01                	add    BYTE PTR [ecx],al
     74e:	09 9d 00 00 00 02    	or     DWORD PTR [ebp+0x2000000],ebx
     754:	91                   	xchg   ecx,eax
     755:	00 07                	add    BYTE PTR [edi],al
     757:	11 02                	adc    DWORD PTR [edx],eax
     759:	00 00                	add    BYTE PTR [eax],al
     75b:	01 09                	add    DWORD PTR [ecx],ecx
     75d:	9d                   	popf   
     75e:	00 00                	add    BYTE PTR [eax],al
     760:	00 02                	add    BYTE PTR [edx],al
     762:	91                   	xchg   ecx,eax
     763:	04 08                	add    al,0x8
     765:	12 04 00             	adc    al,BYTE PTR [eax+eax*1]
     768:	30 8e 00 00 00 09    	xor    BYTE PTR [esi+0x9000000],cl
     76e:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
     771:	00 01                	add    BYTE PTR [ecx],al
     773:	0b 3a                	or     edi,DWORD PTR [edx]
     775:	00 00                	add    BYTE PTR [eax],al
     777:	00 02                	add    BYTE PTR [edx],al
     779:	91                   	xchg   ecx,eax
     77a:	6c                   	ins    BYTE PTR es:[edi],dx
     77b:	00 00                	add    BYTE PTR [eax],al
     77d:	0a 25 02 00 00 01    	or     ah,BYTE PTR ds:0x1000002
     783:	14 aa                	adc    al,0xaa
     785:	04 00                	add    al,0x0
     787:	30 c1                	xor    cl,al
     789:	01 00                	add    DWORD PTR [eax],eax
     78b:	00 01                	add    BYTE PTR [ecx],al
     78d:	9c                   	pushf  
     78e:	65 01 00             	add    DWORD PTR gs:[eax],eax
     791:	00 07                	add    BYTE PTR [edi],al
     793:	45                   	inc    ebp
     794:	02 00                	add    al,BYTE PTR [eax]
     796:	00 01                	add    BYTE PTR [ecx],al
     798:	14 9d                	adc    al,0x9d
     79a:	00 00                	add    BYTE PTR [eax],al
     79c:	00 02                	add    BYTE PTR [edx],al
     79e:	91                   	xchg   ecx,eax
     79f:	00 07                	add    BYTE PTR [edi],al
     7a1:	11 02                	adc    DWORD PTR [edx],eax
     7a3:	00 00                	add    BYTE PTR [eax],al
     7a5:	01 14 9d 00 00 00 02 	add    DWORD PTR [ebx*4+0x2000000],edx
     7ac:	91                   	xchg   ecx,eax
     7ad:	04 0b                	add    al,0xb
     7af:	17                   	pop    ss
     7b0:	02 00                	add    al,BYTE PTR [eax]
     7b2:	00 01                	add    BYTE PTR [ecx],al
     7b4:	16                   	push   ss
     7b5:	56                   	push   esi
     7b6:	00 00                	add    BYTE PTR [eax],al
     7b8:	00 02                	add    BYTE PTR [edx],al
     7ba:	91                   	xchg   ecx,eax
     7bb:	6c                   	ins    BYTE PTR es:[edi],dx
     7bc:	0c c3                	or     al,0xc3
     7be:	04 00                	add    al,0x0
     7c0:	30 eb                	xor    bl,ch
     7c2:	00 00                	add    BYTE PTR [eax],al
     7c4:	00 4c 01 00          	add    BYTE PTR [ecx+eax*1+0x0],cl
     7c8:	00 09                	add    BYTE PTR [ecx],cl
     7ca:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
     7cd:	00 01                	add    BYTE PTR [ecx],al
     7cf:	18 3a                	sbb    BYTE PTR [edx],bh
     7d1:	00 00                	add    BYTE PTR [eax],al
     7d3:	00 02                	add    BYTE PTR [edx],al
     7d5:	91                   	xchg   ecx,eax
     7d6:	68 00 08 ae 05       	push   0x5ae0800
     7db:	00 30                	add    BYTE PTR [eax],dh
     7dd:	b8 00 00 00 09       	mov    eax,0x9000000
     7e2:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
     7e5:	00 01                	add    BYTE PTR [ecx],al
     7e7:	24 3a                	and    al,0x3a
     7e9:	00 00                	add    BYTE PTR [eax],al
     7eb:	00 02                	add    BYTE PTR [edx],al
     7ed:	91                   	xchg   ecx,eax
     7ee:	64 00 00             	add    BYTE PTR fs:[eax],al
     7f1:	0d 4b 00 00 00       	or     eax,0x4b
     7f6:	04 34                	add    al,0x34
     7f8:	56                   	push   esi
     7f9:	00 00                	add    BYTE PTR [eax],al
     7fb:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
     801:	30 0d b6 00 00 00    	xor    BYTE PTR ds:0xb6,cl
     807:	04 35                	add    al,0x35
     809:	56                   	push   esi
     80a:	00 00                	add    BYTE PTR [eax],al
     80c:	00 05 03 8c 46 00    	add    BYTE PTR ds:0x468c03,al
     812:	30 0d 62 01 00 00    	xor    BYTE PTR ds:0x162,cl
     818:	04 36                	add    al,0x36
     81a:	56                   	push   esi
     81b:	00 00                	add    BYTE PTR [eax],al
     81d:	00 05 03 84 46 00    	add    BYTE PTR ds:0x468403,al
     823:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
     829:	05 44 84 00 00       	add    eax,0x8444
     82e:	00 05 03 94 46 00    	add    BYTE PTR ds:0x469403,al
     834:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
     83a:	05 45 ba 01 00       	add    eax,0x1ba45
     83f:	00 05 03 90 46 00    	add    BYTE PTR ds:0x469003,al
     845:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
     84b:	00 00                	add    BYTE PTR [eax],al
     84d:	a0 02 00 00 04       	mov    al,ds:0x4000002
     852:	00 3c 03             	add    BYTE PTR [ebx+eax*1],bh
     855:	00 00                	add    BYTE PTR [eax],al
     857:	04 01                	add    al,0x1
     859:	fb                   	sti    
     85a:	00 00                	add    BYTE PTR [eax],al
     85c:	00 0c 95 02 00 00 79 	add    BYTE PTR [edx*4+0x79000002],cl
     863:	00 00                	add    BYTE PTR [eax],al
     865:	00 6c 06 00          	add    BYTE PTR [esi+eax*1+0x0],ch
     869:	30 bd 00 00 00 03    	xor    BYTE PTR [ebp+0x3000000],bh
     86f:	05 00 00 02 01       	add    eax,0x1020000
     874:	06                   	push   es
     875:	64 00 00             	add    BYTE PTR fs:[eax],al
     878:	00 02                	add    BYTE PTR [edx],al
     87a:	01 06                	add    DWORD PTR [esi],eax
     87c:	5d                   	pop    ebp
     87d:	00 00                	add    BYTE PTR [eax],al
     87f:	00 02                	add    BYTE PTR [edx],al
     881:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
     887:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     88e:	02 08                	add    cl,BYTE PTR [eax]
     890:	05 00 00 00 00       	add    eax,0x0
     895:	02 01                	add    al,BYTE PTR [ecx]
     897:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     89a:	00 00                	add    BYTE PTR [eax],al
     89c:	02 02                	add    al,BYTE PTR [edx]
     89e:	07                   	pop    es
     89f:	0e                   	push   cs
     8a0:	00 00                	add    BYTE PTR [eax],al
     8a2:	00 04 70             	add    BYTE PTR [eax+esi*2],al
     8a5:	00 00                	add    BYTE PTR [eax],al
     8a7:	00 02                	add    BYTE PTR [edx],al
     8a9:	34 61                	xor    al,0x61
     8ab:	00 00                	add    BYTE PTR [eax],al
     8ad:	00 02                	add    BYTE PTR [edx],al
     8af:	04 07                	add    al,0x7
     8b1:	3e 00 00             	add    BYTE PTR ds:[eax],al
     8b4:	00 02                	add    BYTE PTR [edx],al
     8b6:	08 07                	or     BYTE PTR [edi],al
     8b8:	34 00                	xor    al,0x0
     8ba:	00 00                	add    BYTE PTR [eax],al
     8bc:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     8c3:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     8c6:	a2 00 00 00 02       	mov    ds:0x2000000,al
     8cb:	01 02                	add    DWORD PTR [edx],eax
     8cd:	9c                   	pushf  
     8ce:	00 00                	add    BYTE PTR [eax],al
     8d0:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     8d3:	00 00                	add    BYTE PTR [eax],al
     8d5:	00 03                	add    BYTE PTR [ebx],al
     8d7:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
     8da:	00 00                	add    BYTE PTR [eax],al
     8dc:	05 04 95 00 00       	add    eax,0x9504
     8e1:	00 06                	add    BYTE PTR [esi],al
     8e3:	25 00 00 00 07       	and    eax,0x7000000
     8e8:	eb 02                	jmp    8ec <sysEnter_Vector-0x12f714>
     8ea:	00 00                	add    BYTE PTR [eax],al
     8ec:	04 61                	add    al,0x61
     8ee:	00 00                	add    BYTE PTR [eax],al
     8f0:	00 06                	add    BYTE PTR [esi],al
     8f2:	15 42 01 00 00       	adc    eax,0x142
     8f7:	08 43 03             	or     BYTE PTR [ebx+0x3],al
     8fa:	00 00                	add    BYTE PTR [eax],al
     8fc:	00 08                	add    BYTE PTR [eax],cl
     8fe:	7b 03                	jnp    903 <sysEnter_Vector-0x12f6fd>
     900:	00 00                	add    BYTE PTR [eax],al
     902:	01 08                	add    DWORD PTR [eax],ecx
     904:	67 02 00             	add    al,BYTE PTR [bx+si]
     907:	00 02                	add    BYTE PTR [edx],al
     909:	08 dd                	or     ch,bl
     90b:	02 00                	add    al,BYTE PTR [eax]
     90d:	00 03                	add    BYTE PTR [ebx],al
     90f:	08 5a 02             	or     BYTE PTR [edx+0x2],bl
     912:	00 00                	add    BYTE PTR [eax],al
     914:	04 08                	add    al,0x8
     916:	95                   	xchg   ebp,eax
     917:	03 00                	add    eax,DWORD PTR [eax]
     919:	00 05 08 cb 03 00    	add    BYTE PTR ds:0x3cb08,al
     91f:	00 4f 08             	add    BYTE PTR [edi+0x8],cl
     922:	36 03 00             	add    eax,DWORD PTR ss:[eax]
     925:	00 59 08             	add    BYTE PTR [ecx+0x8],bl
     928:	da 03                	fiadd  DWORD PTR [ebx]
     92a:	00 00                	add    BYTE PTR [eax],al
     92c:	61                   	popa   
     92d:	08 c9                	or     cl,cl
     92f:	02 00                	add    al,BYTE PTR [eax]
     931:	00 97 09 53 03 00    	add    BYTE PTR [edi+0x35309],dl
     937:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     93a:	09 29                	or     DWORD PTR [ecx],ebp
     93c:	03 00                	add    eax,DWORD PTR [eax]
     93e:	00 64 01 09          	add    BYTE PTR [ecx+eax*1+0x9],ah
     942:	bd 03 00 00 65       	mov    ebp,0x65000003
     947:	01 09                	add    DWORD PTR [ecx],ecx
     949:	bb 02 00 00 66       	mov    ebx,0x66000002
     94e:	01 09                	add    DWORD PTR [ecx],ecx
     950:	f2 03 00             	repnz add eax,DWORD PTR [eax]
     953:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     956:	09 01                	or     DWORD PTR [ecx],eax
     958:	03 00                	add    eax,DWORD PTR [eax]
     95a:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     95d:	09 a0 02 00 00 69    	or     DWORD PTR [eax+0x69000002],esp
     963:	01 09                	add    DWORD PTR [ecx],ecx
     965:	6a 03                	push   0x3
     967:	00 00                	add    BYTE PTR [eax],al
     969:	70 01                	jo     96c <sysEnter_Vector-0x12f694>
     96b:	09 a3 03 00 00 00    	or     DWORD PTR [ebx+0x3],esp
     971:	03 09                	add    ecx,DWORD PTR [ecx]
     973:	0e                   	push   cs
     974:	03 00                	add    eax,DWORD PTR [eax]
     976:	00 01                	add    BYTE PTR [ecx],al
     978:	03 09                	add    ecx,DWORD PTR [ecx]
     97a:	af                   	scas   eax,DWORD PTR es:[edi]
     97b:	02 00                	add    al,BYTE PTR [eax]
     97d:	00 02                	add    BYTE PTR [edx],al
     97f:	03 09                	add    ecx,DWORD PTR [ecx]
     981:	74 02                	je     985 <sysEnter_Vector-0x12f67b>
     983:	00 00                	add    BYTE PTR [eax],al
     985:	03 03                	add    eax,DWORD PTR [ebx]
     987:	09 84 02 00 00 04 03 	or     DWORD PTR [edx+eax*1+0x3040000],eax
     98e:	00 02                	add    BYTE PTR [edx],al
     990:	04 07                	add    al,0x7
     992:	39 00                	cmp    DWORD PTR [eax],eax
     994:	00 00                	add    BYTE PTR [eax],al
     996:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     999:	e8 00 00 00 0a       	call   a00099e <sysEnter_Vector+0x9ed099e>
     99e:	04 05                	add    al,0x5
     9a0:	04 25                	add    al,0x25
     9a2:	00 00                	add    BYTE PTR [eax],al
     9a4:	00 0b                	add    BYTE PTR [ebx],cl
     9a6:	ed                   	in     eax,dx
     9a7:	03 00                	add    eax,DWORD PTR [eax]
     9a9:	00 01                	add    BYTE PTR [ecx],al
     9ab:	09 50 01             	or     DWORD PTR [eax+0x1],edx
     9ae:	00 00                	add    BYTE PTR [eax],al
     9b0:	6c                   	ins    BYTE PTR es:[edi],dx
     9b1:	06                   	push   es
     9b2:	00 30                	add    BYTE PTR [eax],dh
     9b4:	2d 00 00 00 01       	sub    eax,0x1000000
     9b9:	9c                   	pushf  
     9ba:	8e 01                	mov    es,WORD PTR [ecx]
     9bc:	00 00                	add    BYTE PTR [eax],al
     9be:	0c 1e                	or     al,0x1e
     9c0:	09 00                	or     DWORD PTR [eax],eax
     9c2:	00 01                	add    BYTE PTR [ecx],al
     9c4:	09 52 01             	or     DWORD PTR [edx+0x1],edx
     9c7:	00 00                	add    BYTE PTR [eax],al
     9c9:	02 91 00 0c cc 08    	add    dl,BYTE PTR [ecx+0x8cc0c00]
     9cf:	00 00                	add    BYTE PTR [eax],al
     9d1:	01 09                	add    DWORD PTR [ecx],ecx
     9d3:	8f 00                	pop    DWORD PTR [eax]
     9d5:	00 00                	add    BYTE PTR [eax],al
     9d7:	02 91 04 00 0d 54    	add    dl,BYTE PTR [ecx+0x540d0004]
     9dd:	02 00                	add    al,BYTE PTR [eax]
     9df:	00 01                	add    BYTE PTR [ecx],al
     9e1:	0e                   	push   cs
     9e2:	99                   	cdq    
     9e3:	06                   	push   es
     9e4:	00 30                	add    BYTE PTR [eax],dh
     9e6:	2a 00                	sub    al,BYTE PTR [eax]
     9e8:	00 00                	add    BYTE PTR [eax],al
     9ea:	01 9c b2 01 00 00 0c 	add    DWORD PTR [edx+esi*4+0xc000001],ebx
     9f1:	b1 03                	mov    cl,0x3
     9f3:	00 00                	add    BYTE PTR [eax],al
     9f5:	01 0e                	add    DWORD PTR [esi],ecx
     9f7:	50                   	push   eax
     9f8:	01 00                	add    DWORD PTR [eax],eax
     9fa:	00 02                	add    BYTE PTR [edx],al
     9fc:	91                   	xchg   ecx,eax
     9fd:	00 00                	add    BYTE PTR [eax],al
     9ff:	0b fc                	or     edi,esp
     a01:	02 00                	add    al,BYTE PTR [eax]
     a03:	00 01                	add    BYTE PTR [ecx],al
     a05:	13 3a                	adc    edi,DWORD PTR [edx]
     a07:	00 00                	add    BYTE PTR [eax],al
     a09:	00 c3                	add    bl,al
     a0b:	06                   	push   es
     a0c:	00 30                	add    BYTE PTR [eax],dh
     a0e:	35 00 00 00 01       	xor    eax,0x1000000
     a13:	9c                   	pushf  
     a14:	04 02                	add    al,0x2
     a16:	00 00                	add    BYTE PTR [eax],al
     a18:	0c b1                	or     al,0xb1
     a1a:	03 00                	add    eax,DWORD PTR [eax]
     a1c:	00 01                	add    BYTE PTR [ecx],al
     a1e:	13 50 01             	adc    edx,DWORD PTR [eax+0x1]
     a21:	00 00                	add    BYTE PTR [eax],al
     a23:	02 91 00 0c 8e 03    	add    dl,BYTE PTR [ecx+0x38e0c00]
     a29:	00 00                	add    BYTE PTR [eax],al
     a2b:	01 13                	add    DWORD PTR [ebx],edx
     a2d:	50                   	push   eax
     a2e:	01 00                	add    DWORD PTR [eax],eax
     a30:	00 02                	add    BYTE PTR [edx],al
     a32:	91                   	xchg   ecx,eax
     a33:	04 0c                	add    al,0xc
     a35:	b8 03 00 00 01       	mov    eax,0x1000003
     a3a:	13 3a                	adc    edi,DWORD PTR [edx]
     a3c:	00 00                	add    BYTE PTR [eax],al
     a3e:	00 02                	add    BYTE PTR [edx],al
     a40:	91                   	xchg   ecx,eax
     a41:	08 0c f5 02 00 00 01 	or     BYTE PTR [esi*8+0x1000002],cl
     a48:	13 3a                	adc    edi,DWORD PTR [edx]
     a4a:	00 00                	add    BYTE PTR [eax],al
     a4c:	00 02                	add    BYTE PTR [edx],al
     a4e:	91                   	xchg   ecx,eax
     a4f:	0c 00                	or     al,0x0
     a51:	0b 4d 02             	or     ecx,DWORD PTR [ebp+0x2]
     a54:	00 00                	add    BYTE PTR [eax],al
     a56:	01 18                	add    DWORD PTR [eax],ebx
     a58:	3a 00                	cmp    al,BYTE PTR [eax]
     a5a:	00 00                	add    BYTE PTR [eax],al
     a5c:	f8                   	clc    
     a5d:	06                   	push   es
     a5e:	00 30                	add    BYTE PTR [eax],dh
     a60:	31 00                	xor    DWORD PTR [eax],eax
     a62:	00 00                	add    BYTE PTR [eax],al
     a64:	01 9c 48 02 00 00 0c 	add    DWORD PTR [eax+ecx*2+0xc000002],ebx
     a6b:	1e                   	push   ds
     a6c:	09 00                	or     DWORD PTR [eax],eax
     a6e:	00 01                	add    BYTE PTR [ecx],al
     a70:	18 52 01             	sbb    BYTE PTR [edx+0x1],dl
     a73:	00 00                	add    BYTE PTR [eax],al
     a75:	02 91 00 0c 8e 03    	add    dl,BYTE PTR [ecx+0x38e0c00]
     a7b:	00 00                	add    BYTE PTR [eax],al
     a7d:	01 18                	add    DWORD PTR [eax],ebx
     a7f:	52                   	push   edx
     a80:	01 00                	add    DWORD PTR [eax],eax
     a82:	00 02                	add    BYTE PTR [edx],al
     a84:	91                   	xchg   ecx,eax
     a85:	04 0c                	add    al,0xc
     a87:	1d 03 00 00 01       	sbb    eax,0x1000003
     a8c:	18 3a                	sbb    BYTE PTR [edx],bh
     a8e:	00 00                	add    BYTE PTR [eax],al
     a90:	00 02                	add    BYTE PTR [edx],al
     a92:	91                   	xchg   ecx,eax
     a93:	08 00                	or     BYTE PTR [eax],al
     a95:	0e                   	push   cs
     a96:	4b                   	dec    ebx
     a97:	00 00                	add    BYTE PTR [eax],al
     a99:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     a9c:	56                   	push   esi
     a9d:	00 00                	add    BYTE PTR [eax],al
     a9f:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
     aa5:	30 0e                	xor    BYTE PTR [esi],cl
     aa7:	b6 00                	mov    dh,0x0
     aa9:	00 00                	add    BYTE PTR [eax],al
     aab:	04 35                	add    al,0x35
     aad:	56                   	push   esi
     aae:	00 00                	add    BYTE PTR [eax],al
     ab0:	00 05 03 8c 46 00    	add    BYTE PTR ds:0x468c03,al
     ab6:	30 0e                	xor    BYTE PTR [esi],cl
     ab8:	62 01                	bound  eax,QWORD PTR [ecx]
     aba:	00 00                	add    BYTE PTR [eax],al
     abc:	04 36                	add    al,0x36
     abe:	56                   	push   esi
     abf:	00 00                	add    BYTE PTR [eax],al
     ac1:	00 05 03 84 46 00    	add    BYTE PTR ds:0x468403,al
     ac7:	30 0e                	xor    BYTE PTR [esi],cl
     ac9:	54                   	push   esp
     aca:	00 00                	add    BYTE PTR [eax],al
     acc:	00 05 44 84 00 00    	add    BYTE PTR ds:0x8444,al
     ad2:	00 05 03 94 46 00    	add    BYTE PTR ds:0x469403,al
     ad8:	30 0e                	xor    BYTE PTR [esi],cl
     ada:	28 00                	sub    BYTE PTR [eax],al
     adc:	00 00                	add    BYTE PTR [eax],al
     ade:	05 45 9d 02 00       	add    eax,0x29d45
     ae3:	00 05 03 90 46 00    	add    BYTE PTR ds:0x469003,al
     ae9:	30 05 04 52 01 00    	xor    BYTE PTR ds:0x15204,al
     aef:	00 00                	add    BYTE PTR [eax],al
     af1:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
     af2:	02 00                	add    al,BYTE PTR [eax]
     af4:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     af7:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
     afa:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     afd:	fb                   	sti    
     afe:	00 00                	add    BYTE PTR [eax],al
     b00:	00 0c 1d 04 00 00 79 	add    BYTE PTR [ebx*1+0x79000004],cl
     b07:	00 00                	add    BYTE PTR [eax],al
     b09:	00 2c 07             	add    BYTE PTR [edi+eax*1],ch
     b0c:	00 30                	add    BYTE PTR [eax],dh
     b0e:	52                   	push   edx
     b0f:	01 00                	add    DWORD PTR [eax],eax
     b11:	00 05 06 00 00 02    	add    BYTE PTR ds:0x2000006,al
     b17:	01 06                	add    DWORD PTR [esi],eax
     b19:	64 00 00             	add    BYTE PTR fs:[eax],al
     b1c:	00 02                	add    BYTE PTR [edx],al
     b1e:	01 06                	add    DWORD PTR [esi],eax
     b20:	5d                   	pop    ebp
     b21:	00 00                	add    BYTE PTR [eax],al
     b23:	00 02                	add    BYTE PTR [edx],al
     b25:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
     b2b:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     b32:	02 08                	add    cl,BYTE PTR [eax]
     b34:	05 00 00 00 00       	add    eax,0x0
     b39:	02 01                	add    al,BYTE PTR [ecx]
     b3b:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     b3e:	00 00                	add    BYTE PTR [eax],al
     b40:	02 02                	add    al,BYTE PTR [edx]
     b42:	07                   	pop    es
     b43:	0e                   	push   cs
     b44:	00 00                	add    BYTE PTR [eax],al
     b46:	00 04 70             	add    BYTE PTR [eax+esi*2],al
     b49:	00 00                	add    BYTE PTR [eax],al
     b4b:	00 02                	add    BYTE PTR [edx],al
     b4d:	34 61                	xor    al,0x61
     b4f:	00 00                	add    BYTE PTR [eax],al
     b51:	00 02                	add    BYTE PTR [edx],al
     b53:	04 07                	add    al,0x7
     b55:	3e 00 00             	add    BYTE PTR ds:[eax],al
     b58:	00 02                	add    BYTE PTR [edx],al
     b5a:	08 07                	or     BYTE PTR [edi],al
     b5c:	34 00                	xor    al,0x0
     b5e:	00 00                	add    BYTE PTR [eax],al
     b60:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     b67:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     b6a:	a2 00 00 00 02       	mov    ds:0x2000000,al
     b6f:	01 02                	add    DWORD PTR [edx],eax
     b71:	9c                   	pushf  
     b72:	00 00                	add    BYTE PTR [eax],al
     b74:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     b77:	00 00                	add    BYTE PTR [eax],al
     b79:	00 03                	add    BYTE PTR [ebx],al
     b7b:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
     b7e:	00 00                	add    BYTE PTR [eax],al
     b80:	05 eb 02 00 00       	add    eax,0x2eb
     b85:	04 61                	add    al,0x61
     b87:	00 00                	add    BYTE PTR [eax],al
     b89:	00 06                	add    BYTE PTR [esi],al
     b8b:	15 37 01 00 00       	adc    eax,0x137
     b90:	06                   	push   es
     b91:	43                   	inc    ebx
     b92:	03 00                	add    eax,DWORD PTR [eax]
     b94:	00 00                	add    BYTE PTR [eax],al
     b96:	06                   	push   es
     b97:	7b 03                	jnp    b9c <sysEnter_Vector-0x12f464>
     b99:	00 00                	add    BYTE PTR [eax],al
     b9b:	01 06                	add    DWORD PTR [esi],eax
     b9d:	67 02 00             	add    al,BYTE PTR [bx+si]
     ba0:	00 02                	add    BYTE PTR [edx],al
     ba2:	06                   	push   es
     ba3:	dd 02                	fld    QWORD PTR [edx]
     ba5:	00 00                	add    BYTE PTR [eax],al
     ba7:	03 06                	add    eax,DWORD PTR [esi]
     ba9:	5a                   	pop    edx
     baa:	02 00                	add    al,BYTE PTR [eax]
     bac:	00 04 06             	add    BYTE PTR [esi+eax*1],al
     baf:	95                   	xchg   ebp,eax
     bb0:	03 00                	add    eax,DWORD PTR [eax]
     bb2:	00 05 06 cb 03 00    	add    BYTE PTR ds:0x3cb06,al
     bb8:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
     bbb:	36 03 00             	add    eax,DWORD PTR ss:[eax]
     bbe:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
     bc1:	da 03                	fiadd  DWORD PTR [ebx]
     bc3:	00 00                	add    BYTE PTR [eax],al
     bc5:	61                   	popa   
     bc6:	06                   	push   es
     bc7:	c9                   	leave  
     bc8:	02 00                	add    al,BYTE PTR [eax]
     bca:	00 97 07 53 03 00    	add    BYTE PTR [edi+0x35307],dl
     bd0:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     bd3:	07                   	pop    es
     bd4:	29 03                	sub    DWORD PTR [ebx],eax
     bd6:	00 00                	add    BYTE PTR [eax],al
     bd8:	64 01 07             	add    DWORD PTR fs:[edi],eax
     bdb:	bd 03 00 00 65       	mov    ebp,0x65000003
     be0:	01 07                	add    DWORD PTR [edi],eax
     be2:	bb 02 00 00 66       	mov    ebx,0x66000002
     be7:	01 07                	add    DWORD PTR [edi],eax
     be9:	f2 03 00             	repnz add eax,DWORD PTR [eax]
     bec:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     bef:	07                   	pop    es
     bf0:	01 03                	add    DWORD PTR [ebx],eax
     bf2:	00 00                	add    BYTE PTR [eax],al
     bf4:	68 01 07 a0 02       	push   0x2a00701
     bf9:	00 00                	add    BYTE PTR [eax],al
     bfb:	69 01 07 6a 03 00    	imul   eax,DWORD PTR [ecx],0x36a07
     c01:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     c04:	07                   	pop    es
     c05:	a3 03 00 00 00       	mov    ds:0x3,eax
     c0a:	03 07                	add    eax,DWORD PTR [edi]
     c0c:	0e                   	push   cs
     c0d:	03 00                	add    eax,DWORD PTR [eax]
     c0f:	00 01                	add    BYTE PTR [ecx],al
     c11:	03 07                	add    eax,DWORD PTR [edi]
     c13:	af                   	scas   eax,DWORD PTR es:[edi]
     c14:	02 00                	add    al,BYTE PTR [eax]
     c16:	00 02                	add    BYTE PTR [edx],al
     c18:	03 07                	add    eax,DWORD PTR [edi]
     c1a:	74 02                	je     c1e <sysEnter_Vector-0x12f3e2>
     c1c:	00 00                	add    BYTE PTR [eax],al
     c1e:	03 03                	add    eax,DWORD PTR [ebx]
     c20:	07                   	pop    es
     c21:	84 02                	test   BYTE PTR [edx],al
     c23:	00 00                	add    BYTE PTR [eax],al
     c25:	04 03                	add    al,0x3
     c27:	00 02                	add    BYTE PTR [edx],al
     c29:	04 07                	add    al,0x7
     c2b:	39 00                	cmp    DWORD PTR [eax],eax
     c2d:	00 00                	add    BYTE PTR [eax],al
     c2f:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     c32:	e8 00 00 00 08       	call   8000c37 <sysEnter_Vector+0x7ed0c37>
     c37:	04 25                	add    al,0x25
     c39:	00 00                	add    BYTE PTR [eax],al
     c3b:	00 09                	add    BYTE PTR [ecx],cl
     c3d:	4c                   	dec    esp
     c3e:	04 00                	add    al,0x0
     c40:	00 01                	add    BYTE PTR [ecx],al
     c42:	0f 2c 07             	cvttps2pi mm0,QWORD PTR [edi]
     c45:	00 30                	add    BYTE PTR [eax],dh
     c47:	26 00 00             	add    BYTE PTR es:[eax],al
     c4a:	00 01                	add    BYTE PTR [ecx],al
     c4c:	9c                   	pushf  
     c4d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c4e:	01 00                	add    DWORD PTR [eax],eax
     c50:	00 0a                	add    BYTE PTR [edx],cl
     c52:	8e 03                	mov    es,WORD PTR [ebx]
     c54:	00 00                	add    BYTE PTR [eax],al
     c56:	01 0f                	add    DWORD PTR [edi],ecx
     c58:	45                   	inc    ebp
     c59:	01 00                	add    DWORD PTR [eax],eax
     c5b:	00 02                	add    BYTE PTR [edx],al
     c5d:	91                   	xchg   ecx,eax
     c5e:	00 00                	add    BYTE PTR [eax],al
     c60:	09 47 04             	or     DWORD PTR [edi+0x4],eax
     c63:	00 00                	add    BYTE PTR [eax],al
     c65:	01 14 52             	add    DWORD PTR [edx+edx*2],edx
     c68:	07                   	pop    es
     c69:	00 30                	add    BYTE PTR [eax],dh
     c6b:	43                   	inc    ebx
     c6c:	00 00                	add    BYTE PTR [eax],al
     c6e:	00 01                	add    BYTE PTR [ecx],al
     c70:	9c                   	pushf  
     c71:	9f                   	lahf   
     c72:	01 00                	add    DWORD PTR [eax],eax
     c74:	00 0b                	add    BYTE PTR [ebx],cl
     c76:	63 00                	arpl   WORD PTR [eax],ax
     c78:	01 14 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],edx
     c7f:	91                   	xchg   ecx,eax
     c80:	60                   	pusha  
     c81:	0c 8e                	or     al,0x8e
     c83:	03 00                	add    eax,DWORD PTR [eax]
     c85:	00 01                	add    BYTE PTR [ecx],al
     c87:	16                   	push   ss
     c88:	9f                   	lahf   
     c89:	01 00                	add    DWORD PTR [eax],eax
     c8b:	00 02                	add    BYTE PTR [edx],al
     c8d:	91                   	xchg   ecx,eax
     c8e:	72 00                	jb     c90 <sysEnter_Vector-0x12f370>
     c90:	0d 25 00 00 00       	or     eax,0x25
     c95:	af                   	scas   eax,DWORD PTR es:[edi]
     c96:	01 00                	add    DWORD PTR [eax],eax
     c98:	00 0e                	add    BYTE PTR [esi],cl
     c9a:	3e 01 00             	add    DWORD PTR ds:[eax],eax
     c9d:	00 01                	add    BYTE PTR [ecx],al
     c9f:	00 0f                	add    BYTE PTR [edi],cl
     ca1:	36                   	ss
     ca2:	04 00                	add    al,0x0
     ca4:	00 01                	add    BYTE PTR [ecx],al
     ca6:	1d 25 00 00 00       	sbb    eax,0x25
     cab:	95                   	xchg   ebp,eax
     cac:	07                   	pop    es
     cad:	00 30                	add    BYTE PTR [eax],dh
     caf:	2f                   	das    
     cb0:	00 00                	add    BYTE PTR [eax],al
     cb2:	00 01                	add    BYTE PTR [ecx],al
     cb4:	9c                   	pushf  
     cb5:	d5 01                	aad    0x1
     cb7:	00 00                	add    BYTE PTR [eax],al
     cb9:	10 63 00             	adc    BYTE PTR [ebx+0x0],ah
     cbc:	01 1f                	add    DWORD PTR [edi],ebx
     cbe:	25 00 00 00 02       	and    eax,0x2000000
     cc3:	91                   	xchg   ecx,eax
     cc4:	73 00                	jae    cc6 <sysEnter_Vector-0x12f33a>
     cc6:	11 42 04             	adc    DWORD PTR [edx+0x4],eax
     cc9:	00 00                	add    BYTE PTR [eax],al
     ccb:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     cd1:	c4 07                	les    eax,FWORD PTR [edi]
     cd3:	00 30                	add    BYTE PTR [eax],dh
     cd5:	ba 00 00 00 01       	mov    edx,0x1000000
     cda:	9c                   	pushf  
     cdb:	4e                   	dec    esi
     cdc:	02 00                	add    al,BYTE PTR [eax]
     cde:	00 0a                	add    BYTE PTR [edx],cl
     ce0:	8e 03                	mov    es,WORD PTR [ebx]
     ce2:	00 00                	add    BYTE PTR [eax],al
     ce4:	01 25 45 01 00 00    	add    DWORD PTR ds:0x145,esp
     cea:	02 91 00 0a 3b 04    	add    dl,BYTE PTR [ecx+0x43b0a00]
     cf0:	00 00                	add    BYTE PTR [eax],al
     cf2:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     cf8:	02 91 04 0a 07 04    	add    dl,BYTE PTR [ecx+0x4070a04]
     cfe:	00 00                	add    BYTE PTR [eax],al
     d00:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     d06:	02 91 08 0c 2f 04    	add    dl,BYTE PTR [ecx+0x42f0c08]
     d0c:	00 00                	add    BYTE PTR [eax],al
     d0e:	01 27                	add    DWORD PTR [edi],esp
     d10:	25 00 00 00 02       	and    eax,0x2000000
     d15:	91                   	xchg   ecx,eax
     d16:	6b 10 6c             	imul   edx,DWORD PTR [eax],0x6c
     d19:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     d1b:	00 01                	add    BYTE PTR [ecx],al
     d1d:	28 3a                	sub    BYTE PTR [edx],bh
     d1f:	00 00                	add    BYTE PTR [eax],al
     d21:	00 02                	add    BYTE PTR [edx],al
     d23:	91                   	xchg   ecx,eax
     d24:	6c                   	ins    BYTE PTR es:[edi],dx
     d25:	0c 18                	or     al,0x18
     d27:	04 00                	add    al,0x0
     d29:	00 01                	add    BYTE PTR [ecx],al
     d2b:	29 9f 01 00 00 02    	sub    DWORD PTR [edi+0x2000001],ebx
     d31:	91                   	xchg   ecx,eax
     d32:	69 12 0e 04 00 00    	imul   edx,DWORD PTR [edx],0x40e
     d38:	01 2e                	add    DWORD PTR [esi],ebp
     d3a:	01 08                	add    DWORD PTR [eax],ecx
     d3c:	00 30                	add    BYTE PTR [eax],dh
     d3e:	00 13                	add    BYTE PTR [ebx],dl
     d40:	4b                   	dec    ebx
     d41:	00 00                	add    BYTE PTR [eax],al
     d43:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     d46:	56                   	push   esi
     d47:	00 00                	add    BYTE PTR [eax],al
     d49:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
     d4f:	30 13                	xor    BYTE PTR [ebx],dl
     d51:	b6 00                	mov    dh,0x0
     d53:	00 00                	add    BYTE PTR [eax],al
     d55:	04 35                	add    al,0x35
     d57:	56                   	push   esi
     d58:	00 00                	add    BYTE PTR [eax],al
     d5a:	00 05 03 8c 46 00    	add    BYTE PTR ds:0x468c03,al
     d60:	30 13                	xor    BYTE PTR [ebx],dl
     d62:	62 01                	bound  eax,QWORD PTR [ecx]
     d64:	00 00                	add    BYTE PTR [eax],al
     d66:	04 36                	add    al,0x36
     d68:	56                   	push   esi
     d69:	00 00                	add    BYTE PTR [eax],al
     d6b:	00 05 03 84 46 00    	add    BYTE PTR ds:0x468403,al
     d71:	30 13                	xor    BYTE PTR [ebx],dl
     d73:	54                   	push   esp
     d74:	00 00                	add    BYTE PTR [eax],al
     d76:	00 05 44 84 00 00    	add    BYTE PTR ds:0x8444,al
     d7c:	00 05 03 94 46 00    	add    BYTE PTR ds:0x469403,al
     d82:	30 13                	xor    BYTE PTR [ebx],dl
     d84:	28 00                	sub    BYTE PTR [eax],al
     d86:	00 00                	add    BYTE PTR [eax],al
     d88:	05 45 a3 02 00       	add    eax,0x2a345
     d8d:	00 05 03 90 46 00    	add    BYTE PTR ds:0x469003,al
     d93:	30 08                	xor    BYTE PTR [eax],cl
     d95:	04 45                	add    al,0x45
     d97:	01 00                	add    DWORD PTR [eax],eax
     d99:	00 00                	add    BYTE PTR [eax],al
     d9b:	3f                   	aas    
     d9c:	07                   	pop    es
     d9d:	00 00                	add    BYTE PTR [eax],al
     d9f:	04 00                	add    al,0x0
     da1:	22 05 00 00 04 01    	and    al,BYTE PTR ds:0x1040000
     da7:	fb                   	sti    
     da8:	00 00                	add    BYTE PTR [eax],al
     daa:	00 0c d8             	add    BYTE PTR [eax+ebx*8],cl
     dad:	05 00 00 79 00       	add    eax,0x790000
     db2:	00 00                	add    BYTE PTR [eax],al
     db4:	80 08 00             	or     BYTE PTR [eax],0x0
     db7:	30 2b                	xor    BYTE PTR [ebx],ch
     db9:	06                   	push   es
     dba:	00 00                	add    BYTE PTR [eax],al
     dbc:	39 07                	cmp    DWORD PTR [edi],eax
     dbe:	00 00                	add    BYTE PTR [eax],al
     dc0:	02 75 05             	add    dh,BYTE PTR [ebp+0x5]
     dc3:	00 00                	add    BYTE PTR [eax],al
     dc5:	02 28                	add    ch,BYTE PTR [eax]
     dc7:	30 00                	xor    BYTE PTR [eax],al
     dc9:	00 00                	add    BYTE PTR [eax],al
     dcb:	03 04 b8             	add    eax,DWORD PTR [eax+edi*4]
     dce:	04 00                	add    al,0x0
     dd0:	00 3a                	add    BYTE PTR [edx],bh
     dd2:	00 00                	add    BYTE PTR [eax],al
     dd4:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     dd7:	06                   	push   es
     dd8:	64 00 00             	add    BYTE PTR fs:[eax],al
     ddb:	00 02                	add    BYTE PTR [edx],al
     ddd:	7c 05                	jl     de4 <sysEnter_Vector-0x12f21c>
     ddf:	00 00                	add    BYTE PTR [eax],al
     de1:	02 62 25             	add    ah,BYTE PTR [edx+0x25]
     de4:	00 00                	add    BYTE PTR [eax],al
     de6:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     de9:	06                   	push   es
     dea:	5d                   	pop    ebp
     deb:	00 00                	add    BYTE PTR [eax],al
     ded:	00 04 02             	add    BYTE PTR [edx+eax*1],al
     df0:	05 f1 00 00 00       	add    eax,0xf1
     df5:	05 04 05 69 6e       	add    eax,0x6e690504
     dfa:	74 00                	je     dfc <sysEnter_Vector-0x12f204>
     dfc:	04 08                	add    al,0x8
     dfe:	05 00 00 00 00       	add    eax,0x0
     e03:	04 01                	add    al,0x1
     e05:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     e08:	00 00                	add    BYTE PTR [eax],al
     e0a:	04 02                	add    al,0x2
     e0c:	07                   	pop    es
     e0d:	0e                   	push   cs
     e0e:	00 00                	add    BYTE PTR [eax],al
     e10:	00 02                	add    BYTE PTR [edx],al
     e12:	70 00                	jo     e14 <sysEnter_Vector-0x12f1ec>
     e14:	00 00                	add    BYTE PTR [eax],al
     e16:	03 34 81             	add    esi,DWORD PTR [ecx+eax*4]
     e19:	00 00                	add    BYTE PTR [eax],al
     e1b:	00 04 04             	add    BYTE PTR [esp+eax*1],al
     e1e:	07                   	pop    es
     e1f:	3e 00 00             	add    BYTE PTR ds:[eax],al
     e22:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
     e25:	07                   	pop    es
     e26:	34 00                	xor    al,0x0
     e28:	00 00                	add    BYTE PTR [eax],al
     e2a:	02 6d 04             	add    ch,BYTE PTR [ebp+0x4]
     e2d:	00 00                	add    BYTE PTR [eax],al
     e2f:	04 d8                	add    al,0xd8
     e31:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
     e37:	05 05 00 00 00       	add    eax,0x5
     e3c:	04 0c                	add    al,0xc
     e3e:	04 a2                	add    al,0xa2
     e40:	00 00                	add    BYTE PTR [eax],al
     e42:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     e45:	02 9c 00 00 00 02 69 	add    bl,BYTE PTR [eax+eax*1+0x69020000]
     e4c:	00 00                	add    BYTE PTR [eax],al
     e4e:	00 05 2a 9a 00 00    	add    BYTE PTR ds:0x9a2a,al
     e54:	00 06                	add    BYTE PTR [esi],al
     e56:	74 6d                	je     ec5 <sysEnter_Vector-0x12f13b>
     e58:	00 2c 05 2c 4a 01 00 	add    BYTE PTR [eax*1+0x14a2c],ch
     e5f:	00 07                	add    BYTE PTR [edi],al
     e61:	0b 06                	or     eax,DWORD PTR [esi]
     e63:	00 00                	add    BYTE PTR [eax],al
     e65:	05 2e 5a 00 00       	add    eax,0x5a2e
     e6a:	00 00                	add    BYTE PTR [eax],al
     e6c:	07                   	pop    es
     e6d:	60                   	pusha  
     e6e:	05 00 00 05 2f       	add    eax,0x2f050000
     e73:	5a                   	pop    edx
     e74:	00 00                	add    BYTE PTR [eax],al
     e76:	00 04 07             	add    BYTE PTR [edi+eax*1],al
     e79:	58                   	pop    eax
     e7a:	04 00                	add    al,0x0
     e7c:	00 05 30 5a 00 00    	add    BYTE PTR ds:0x5a30,al
     e82:	00 08                	add    BYTE PTR [eax],cl
     e84:	07                   	pop    es
     e85:	f6 05 00 00 05 31 5a 	test   BYTE PTR ds:0x31050000,0x5a
     e8c:	00 00                	add    BYTE PTR [eax],al
     e8e:	00 0c 07             	add    BYTE PTR [edi+eax*1],cl
     e91:	ca 04 00             	retf   0x4
     e94:	00 05 32 5a 00 00    	add    BYTE PTR ds:0x5a32,al
     e9a:	00 10                	add    BYTE PTR [eax],dl
     e9c:	07                   	pop    es
     e9d:	da 04 00             	fiadd  DWORD PTR [eax+eax*1]
     ea0:	00 05 33 5a 00 00    	add    BYTE PTR ds:0x5a33,al
     ea6:	00 14 07             	add    BYTE PTR [edi+eax*1],dl
     ea9:	ee                   	out    dx,al
     eaa:	05 00 00 05 34       	add    eax,0x34050000
     eaf:	5a                   	pop    edx
     eb0:	00 00                	add    BYTE PTR [eax],al
     eb2:	00 18                	add    BYTE PTR [eax],bl
     eb4:	07                   	pop    es
     eb5:	6d                   	ins    DWORD PTR es:[edi],dx
     eb6:	05 00 00 05 35       	add    eax,0x35050000
     ebb:	5a                   	pop    edx
     ebc:	00 00                	add    BYTE PTR [eax],al
     ebe:	00 1c 07             	add    BYTE PTR [edi+eax*1],bl
     ec1:	0b 05 00 00 05 36    	or     eax,DWORD PTR ds:0x36050000
     ec7:	5a                   	pop    edx
     ec8:	00 00                	add    BYTE PTR [eax],al
     eca:	00 20                	add    BYTE PTR [eax],ah
     ecc:	07                   	pop    es
     ecd:	b8 05 00 00 05       	mov    eax,0x5000005
     ed2:	37                   	aaa    
     ed3:	9a 00 00 00 24 07 8a 	call   0x8a07:0x24000000
     eda:	04 00                	add    al,0x0
     edc:	00 05 38 4a 01 00    	add    BYTE PTR ds:0x14a38,al
     ee2:	00 28                	add    BYTE PTR [eax],ch
     ee4:	00 08                	add    BYTE PTR [eax],cl
     ee6:	04 50                	add    al,0x50
     ee8:	01 00                	add    DWORD PTR [eax],eax
     eea:	00 09                	add    BYTE PTR [ecx],cl
     eec:	3a 00                	cmp    al,BYTE PTR [eax]
     eee:	00 00                	add    BYTE PTR [eax],al
     ef0:	0a eb                	or     ch,bl
     ef2:	02 00                	add    al,BYTE PTR [eax]
     ef4:	00 04 81             	add    BYTE PTR [ecx+eax*4],al
     ef7:	00 00                	add    BYTE PTR [eax],al
     ef9:	00 08                	add    BYTE PTR [eax],cl
     efb:	15 fd 01 00 00       	adc    eax,0x1fd
     f00:	0b 43 03             	or     eax,DWORD PTR [ebx+0x3]
     f03:	00 00                	add    BYTE PTR [eax],al
     f05:	00 0b                	add    BYTE PTR [ebx],cl
     f07:	7b 03                	jnp    f0c <sysEnter_Vector-0x12f0f4>
     f09:	00 00                	add    BYTE PTR [eax],al
     f0b:	01 0b                	add    DWORD PTR [ebx],ecx
     f0d:	67 02 00             	add    al,BYTE PTR [bx+si]
     f10:	00 02                	add    BYTE PTR [edx],al
     f12:	0b dd                	or     ebx,ebp
     f14:	02 00                	add    al,BYTE PTR [eax]
     f16:	00 03                	add    BYTE PTR [ebx],al
     f18:	0b 5a 02             	or     ebx,DWORD PTR [edx+0x2]
     f1b:	00 00                	add    BYTE PTR [eax],al
     f1d:	04 0b                	add    al,0xb
     f1f:	95                   	xchg   ebp,eax
     f20:	03 00                	add    eax,DWORD PTR [eax]
     f22:	00 05 0b cb 03 00    	add    BYTE PTR ds:0x3cb0b,al
     f28:	00 4f 0b             	add    BYTE PTR [edi+0xb],cl
     f2b:	36 03 00             	add    eax,DWORD PTR ss:[eax]
     f2e:	00 59 0b             	add    BYTE PTR [ecx+0xb],bl
     f31:	da 03                	fiadd  DWORD PTR [ebx]
     f33:	00 00                	add    BYTE PTR [eax],al
     f35:	61                   	popa   
     f36:	0b c9                	or     ecx,ecx
     f38:	02 00                	add    al,BYTE PTR [eax]
     f3a:	00 97 0c 53 03 00    	add    BYTE PTR [edi+0x3530c],dl
     f40:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     f43:	0c 29                	or     al,0x29
     f45:	03 00                	add    eax,DWORD PTR [eax]
     f47:	00 64 01 0c          	add    BYTE PTR [ecx+eax*1+0xc],ah
     f4b:	bd 03 00 00 65       	mov    ebp,0x65000003
     f50:	01 0c bb             	add    DWORD PTR [ebx+edi*4],ecx
     f53:	02 00                	add    al,BYTE PTR [eax]
     f55:	00 66 01             	add    BYTE PTR [esi+0x1],ah
     f58:	0c f2                	or     al,0xf2
     f5a:	03 00                	add    eax,DWORD PTR [eax]
     f5c:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     f5f:	0c 01                	or     al,0x1
     f61:	03 00                	add    eax,DWORD PTR [eax]
     f63:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     f66:	0c a0                	or     al,0xa0
     f68:	02 00                	add    al,BYTE PTR [eax]
     f6a:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
     f6d:	0c 6a                	or     al,0x6a
     f6f:	03 00                	add    eax,DWORD PTR [eax]
     f71:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     f74:	0c a3                	or     al,0xa3
     f76:	03 00                	add    eax,DWORD PTR [eax]
     f78:	00 00                	add    BYTE PTR [eax],al
     f7a:	03 0c 0e             	add    ecx,DWORD PTR [esi+ecx*1]
     f7d:	03 00                	add    eax,DWORD PTR [eax]
     f7f:	00 01                	add    BYTE PTR [ecx],al
     f81:	03 0c af             	add    ecx,DWORD PTR [edi+ebp*4]
     f84:	02 00                	add    al,BYTE PTR [eax]
     f86:	00 02                	add    BYTE PTR [edx],al
     f88:	03 0c 74             	add    ecx,DWORD PTR [esp+esi*2]
     f8b:	02 00                	add    al,BYTE PTR [eax]
     f8d:	00 03                	add    BYTE PTR [ebx],al
     f8f:	03 0c 84             	add    ecx,DWORD PTR [esp+eax*4]
     f92:	02 00                	add    al,BYTE PTR [eax]
     f94:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     f97:	00 04 04             	add    BYTE PTR [esp+eax*1],al
     f9a:	07                   	pop    es
     f9b:	39 00                	cmp    DWORD PTR [eax],eax
     f9d:	00 00                	add    BYTE PTR [eax],al
     f9f:	04 04                	add    al,0x4
     fa1:	07                   	pop    es
     fa2:	e8 00 00 00 0d       	call   d000fa7 <sysEnter_Vector+0xced0fa7>
     fa7:	04 08                	add    al,0x8
     fa9:	04 3a                	add    al,0x3a
     fab:	00 00                	add    BYTE PTR [eax],al
     fad:	00 0e                	add    BYTE PTR [esi],cl
     faf:	44                   	inc    esp
     fb0:	05 00 00 01 10       	add    eax,0x10010000
     fb5:	5a                   	pop    edx
     fb6:	00 00                	add    BYTE PTR [eax],al
     fb8:	00 80 08 00 30 3a    	add    BYTE PTR [eax+0x3a300008],al
     fbe:	00 00                	add    BYTE PTR [eax],al
     fc0:	00 01                	add    BYTE PTR [ecx],al
     fc2:	9c                   	pushf  
     fc3:	81 02 00 00 0f 03    	add    DWORD PTR [edx],0x30f0000
     fc9:	05 00 00 01 10       	add    eax,0x10010000
     fce:	5a                   	pop    edx
     fcf:	00 00                	add    BYTE PTR [eax],al
     fd1:	00 02                	add    BYTE PTR [edx],al
     fd3:	91                   	xchg   ecx,eax
     fd4:	00 0f                	add    BYTE PTR [edi],cl
     fd6:	8c 05 00 00 01 10    	mov    WORD PTR ds:0x10010000,es
     fdc:	76 00                	jbe    fde <sysEnter_Vector-0x12f022>
     fde:	00 00                	add    BYTE PTR [eax],al
     fe0:	02 91 04 0f 93 05    	add    dl,BYTE PTR [ecx+0x5930f04]
     fe6:	00 00                	add    BYTE PTR [eax],al
     fe8:	01 10                	add    DWORD PTR [eax],edx
     fea:	76 00                	jbe    fec <sysEnter_Vector-0x12f014>
     fec:	00 00                	add    BYTE PTR [eax],al
     fee:	02 91 08 0f 9a 05    	add    dl,BYTE PTR [ecx+0x59a0f08]
     ff4:	00 00                	add    BYTE PTR [eax],al
     ff6:	01 10                	add    DWORD PTR [eax],edx
     ff8:	76 00                	jbe    ffa <sysEnter_Vector-0x12f006>
     ffa:	00 00                	add    BYTE PTR [eax],al
     ffc:	02 91 0c 0f a1 05    	add    dl,BYTE PTR [ecx+0x5a10f0c]
    1002:	00 00                	add    BYTE PTR [eax],al
    1004:	01 10                	add    DWORD PTR [eax],edx
    1006:	76 00                	jbe    1008 <sysEnter_Vector-0x12eff8>
    1008:	00 00                	add    BYTE PTR [eax],al
    100a:	02 91 10 10 51 04    	add    dl,BYTE PTR [ecx+0x4511010]
    1010:	00 00                	add    BYTE PTR [eax],al
    1012:	01 12                	add    DWORD PTR [edx],edx
    1014:	5a                   	pop    edx
    1015:	00 00                	add    BYTE PTR [eax],al
    1017:	00 02                	add    BYTE PTR [edx],al
    1019:	91                   	xchg   ecx,eax
    101a:	6c                   	ins    BYTE PTR es:[edi],dx
    101b:	00 0e                	add    BYTE PTR [esi],cl
    101d:	38 05 00 00 01 17    	cmp    BYTE PTR ds:0x17010000,al
    1023:	5a                   	pop    edx
    1024:	00 00                	add    BYTE PTR [eax],al
    1026:	00 ba 08 00 30 3c    	add    BYTE PTR [edx+0x3c300008],bh
    102c:	00 00                	add    BYTE PTR [eax],al
    102e:	00 01                	add    BYTE PTR [ecx],al
    1030:	9c                   	pushf  
    1031:	e1 02                	loope  1035 <sysEnter_Vector-0x12efcb>
    1033:	00 00                	add    BYTE PTR [eax],al
    1035:	0f 03 05 00 00 01 17 	lsl    eax,WORD PTR ds:0x17010000
    103c:	5a                   	pop    edx
    103d:	00 00                	add    BYTE PTR [eax],al
    103f:	00 02                	add    BYTE PTR [edx],al
    1041:	91                   	xchg   ecx,eax
    1042:	00 0f                	add    BYTE PTR [edi],cl
    1044:	8c 05 00 00 01 17    	mov    WORD PTR ds:0x17010000,es
    104a:	76 00                	jbe    104c <sysEnter_Vector-0x12efb4>
    104c:	00 00                	add    BYTE PTR [eax],al
    104e:	02 91 04 0f 93 05    	add    dl,BYTE PTR [ecx+0x5930f04]
    1054:	00 00                	add    BYTE PTR [eax],al
    1056:	01 17                	add    DWORD PTR [edi],edx
    1058:	76 00                	jbe    105a <sysEnter_Vector-0x12efa6>
    105a:	00 00                	add    BYTE PTR [eax],al
    105c:	02 91 08 0f 9a 05    	add    dl,BYTE PTR [ecx+0x59a0f08]
    1062:	00 00                	add    BYTE PTR [eax],al
    1064:	01 17                	add    DWORD PTR [edi],edx
    1066:	76 00                	jbe    1068 <sysEnter_Vector-0x12ef98>
    1068:	00 00                	add    BYTE PTR [eax],al
    106a:	02 91 0c 10 51 04    	add    dl,BYTE PTR [ecx+0x451100c]
    1070:	00 00                	add    BYTE PTR [eax],al
    1072:	01 19                	add    DWORD PTR [ecx],ebx
    1074:	5a                   	pop    edx
    1075:	00 00                	add    BYTE PTR [eax],al
    1077:	00 02                	add    BYTE PTR [edx],al
    1079:	91                   	xchg   ecx,eax
    107a:	6c                   	ins    BYTE PTR es:[edi],dx
    107b:	00 0e                	add    BYTE PTR [esi],cl
    107d:	2c 05                	sub    al,0x5
    107f:	00 00                	add    BYTE PTR [eax],al
    1081:	01 1e                	add    DWORD PTR [esi],ebx
    1083:	5a                   	pop    edx
    1084:	00 00                	add    BYTE PTR [eax],al
    1086:	00 f6                	add    dh,dh
    1088:	08 00                	or     BYTE PTR [eax],al
    108a:	30 3e                	xor    BYTE PTR [esi],bh
    108c:	00 00                	add    BYTE PTR [eax],al
    108e:	00 01                	add    BYTE PTR [ecx],al
    1090:	9c                   	pushf  
    1091:	33 03                	xor    eax,DWORD PTR [ebx]
    1093:	00 00                	add    BYTE PTR [eax],al
    1095:	0f 03 05 00 00 01 1e 	lsl    eax,WORD PTR ds:0x1e010000
    109c:	5a                   	pop    edx
    109d:	00 00                	add    BYTE PTR [eax],al
    109f:	00 02                	add    BYTE PTR [edx],al
    10a1:	91                   	xchg   ecx,eax
    10a2:	00 0f                	add    BYTE PTR [edi],cl
    10a4:	8c 05 00 00 01 1e    	mov    WORD PTR ds:0x1e010000,es
    10aa:	76 00                	jbe    10ac <sysEnter_Vector-0x12ef54>
    10ac:	00 00                	add    BYTE PTR [eax],al
    10ae:	02 91 04 0f 93 05    	add    dl,BYTE PTR [ecx+0x5930f04]
    10b4:	00 00                	add    BYTE PTR [eax],al
    10b6:	01 1e                	add    DWORD PTR [esi],ebx
    10b8:	76 00                	jbe    10ba <sysEnter_Vector-0x12ef46>
    10ba:	00 00                	add    BYTE PTR [eax],al
    10bc:	02 91 08 10 51 04    	add    dl,BYTE PTR [ecx+0x4511008]
    10c2:	00 00                	add    BYTE PTR [eax],al
    10c4:	01 20                	add    DWORD PTR [eax],esp
    10c6:	5a                   	pop    edx
    10c7:	00 00                	add    BYTE PTR [eax],al
    10c9:	00 02                	add    BYTE PTR [edx],al
    10cb:	91                   	xchg   ecx,eax
    10cc:	6c                   	ins    BYTE PTR es:[edi],dx
    10cd:	00 0e                	add    BYTE PTR [esi],cl
    10cf:	20 05 00 00 01 25    	and    BYTE PTR ds:0x25010000,al
    10d5:	5a                   	pop    edx
    10d6:	00 00                	add    BYTE PTR [eax],al
    10d8:	00 34 09             	add    BYTE PTR [ecx+ecx*1],dh
    10db:	00 30                	add    BYTE PTR [eax],dh
    10dd:	40                   	inc    eax
    10de:	00 00                	add    BYTE PTR [eax],al
    10e0:	00 01                	add    BYTE PTR [ecx],al
    10e2:	9c                   	pushf  
    10e3:	77 03                	ja     10e8 <sysEnter_Vector-0x12ef18>
    10e5:	00 00                	add    BYTE PTR [eax],al
    10e7:	0f 03 05 00 00 01 25 	lsl    eax,WORD PTR ds:0x25010000
    10ee:	5a                   	pop    edx
    10ef:	00 00                	add    BYTE PTR [eax],al
    10f1:	00 02                	add    BYTE PTR [edx],al
    10f3:	91                   	xchg   ecx,eax
    10f4:	00 0f                	add    BYTE PTR [edi],cl
    10f6:	8c 05 00 00 01 25    	mov    WORD PTR ds:0x25010000,es
    10fc:	76 00                	jbe    10fe <sysEnter_Vector-0x12ef02>
    10fe:	00 00                	add    BYTE PTR [eax],al
    1100:	02 91 04 10 51 04    	add    dl,BYTE PTR [ecx+0x4511004]
    1106:	00 00                	add    BYTE PTR [eax],al
    1108:	01 27                	add    DWORD PTR [edi],esp
    110a:	5a                   	pop    edx
    110b:	00 00                	add    BYTE PTR [eax],al
    110d:	00 02                	add    BYTE PTR [edx],al
    110f:	91                   	xchg   ecx,eax
    1110:	6c                   	ins    BYTE PTR es:[edi],dx
    1111:	00 0e                	add    BYTE PTR [esi],cl
    1113:	14 05                	adc    al,0x5
    1115:	00 00                	add    BYTE PTR [eax],al
    1117:	01 2c 5a             	add    DWORD PTR [edx+ebx*2],ebp
    111a:	00 00                	add    BYTE PTR [eax],al
    111c:	00 74 09 00          	add    BYTE PTR [ecx+ecx*1+0x0],dh
    1120:	30 42 00             	xor    BYTE PTR [edx+0x0],al
    1123:	00 00                	add    BYTE PTR [eax],al
    1125:	01 9c ad 03 00 00 0f 	add    DWORD PTR [ebp+ebp*4+0xf000003],ebx
    112c:	03 05 00 00 01 2c    	add    eax,DWORD PTR ds:0x2c010000
    1132:	5a                   	pop    edx
    1133:	00 00                	add    BYTE PTR [eax],al
    1135:	00 02                	add    BYTE PTR [edx],al
    1137:	91                   	xchg   ecx,eax
    1138:	00 10                	add    BYTE PTR [eax],dl
    113a:	51                   	push   ecx
    113b:	04 00                	add    al,0x0
    113d:	00 01                	add    BYTE PTR [ecx],al
    113f:	2e                   	cs
    1140:	5a                   	pop    edx
    1141:	00 00                	add    BYTE PTR [eax],al
    1143:	00 02                	add    BYTE PTR [edx],al
    1145:	91                   	xchg   ecx,eax
    1146:	6c                   	ins    BYTE PTR es:[edi],dx
    1147:	00 11                	add    BYTE PTR [ecx],dl
    1149:	a8 04                	test   al,0x4
    114b:	00 00                	add    BYTE PTR [eax],al
    114d:	01 33                	add    DWORD PTR [ebx],esi
    114f:	b6 09                	mov    dh,0x9
    1151:	00 30                	add    BYTE PTR [eax],dh
    1153:	b1 00                	mov    cl,0x0
    1155:	00 00                	add    BYTE PTR [eax],al
    1157:	01 9c 12 fe 05 00 00 	add    DWORD PTR [edx+edx*1+0x5fe],ebx
    115e:	01 45 67             	add    DWORD PTR [ebp+0x67],eax
    1161:	0a 00                	or     al,BYTE PTR [eax]
    1163:	30 1f                	xor    BYTE PTR [edi],bl
    1165:	00 00                	add    BYTE PTR [eax],al
    1167:	00 01                	add    BYTE PTR [ecx],al
    1169:	9c                   	pushf  
    116a:	13 b2 04 00 00 01    	adc    esi,DWORD PTR [edx+0x1000004]
    1170:	4a                   	dec    edx
    1171:	5a                   	pop    edx
    1172:	00 00                	add    BYTE PTR [eax],al
    1174:	00 86 0a 00 30 34    	add    BYTE PTR [esi+0x3430000a],al
    117a:	00 00                	add    BYTE PTR [eax],al
    117c:	00 01                	add    BYTE PTR [ecx],al
    117e:	9c                   	pushf  
    117f:	06                   	push   es
    1180:	04 00                	add    al,0x0
    1182:	00 0f                	add    BYTE PTR [edi],cl
    1184:	b1 05                	mov    cl,0x5
    1186:	00 00                	add    BYTE PTR [eax],al
    1188:	01 4a 4a             	add    DWORD PTR [edx+0x4a],ecx
    118b:	01 00                	add    DWORD PTR [eax],eax
    118d:	00 02                	add    BYTE PTR [edx],al
    118f:	91                   	xchg   ecx,eax
    1190:	00 14 10             	add    BYTE PTR [eax+edx*1],dl
    1193:	2f                   	das    
    1194:	06                   	push   es
    1195:	00 00                	add    BYTE PTR [eax],al
    1197:	01 4c 41 00          	add    DWORD PTR [ecx+eax*2+0x0],ecx
    119b:	00 00                	add    BYTE PTR [eax],al
    119d:	02 91 74 00 13 34    	add    dl,BYTE PTR [ecx+0x34130074]
    11a3:	06                   	push   es
    11a4:	00 00                	add    BYTE PTR [eax],al
    11a6:	01 52 5a             	add    DWORD PTR [edx+0x5a],edx
    11a9:	00 00                	add    BYTE PTR [eax],al
    11ab:	00 ba 0a 00 30 34    	add    BYTE PTR [edx+0x3430000a],bh
    11b1:	00 00                	add    BYTE PTR [eax],al
    11b3:	00 01                	add    BYTE PTR [ecx],al
    11b5:	9c                   	pushf  
    11b6:	3d 04 00 00 0f       	cmp    eax,0xf000004
    11bb:	b1 05                	mov    cl,0x5
    11bd:	00 00                	add    BYTE PTR [eax],al
    11bf:	01 52 4a             	add    DWORD PTR [edx+0x4a],edx
    11c2:	01 00                	add    DWORD PTR [eax],eax
    11c4:	00 02                	add    BYTE PTR [edx],al
    11c6:	91                   	xchg   ecx,eax
    11c7:	00 14 10             	add    BYTE PTR [eax+edx*1],dl
    11ca:	2f                   	das    
    11cb:	06                   	push   es
    11cc:	00 00                	add    BYTE PTR [eax],al
    11ce:	01 54 41 00          	add    DWORD PTR [ecx+eax*2+0x0],edx
    11d2:	00 00                	add    BYTE PTR [eax],al
    11d4:	02 91 74 00 13 84    	add    dl,BYTE PTR [ecx-0x7becff8c]
    11da:	05 00 00 01 5a       	add    eax,0x5a010000
    11df:	5a                   	pop    edx
    11e0:	00 00                	add    BYTE PTR [eax],al
    11e2:	00 ee                	add    dh,ch
    11e4:	0a 00                	or     al,BYTE PTR [eax]
    11e6:	30 37                	xor    BYTE PTR [edi],dh
    11e8:	00 00                	add    BYTE PTR [eax],al
    11ea:	00 01                	add    BYTE PTR [ecx],al
    11ec:	9c                   	pushf  
    11ed:	82                   	(bad)  
    11ee:	04 00                	add    al,0x0
    11f0:	00 0f                	add    BYTE PTR [edi],cl
    11f2:	f2 04 00             	repnz add al,0x0
    11f5:	00 01                	add    BYTE PTR [ecx],al
    11f7:	5a                   	pop    edx
    11f8:	76 00                	jbe    11fa <sysEnter_Vector-0x12ee06>
    11fa:	00 00                	add    BYTE PTR [eax],al
    11fc:	02 91 00 0f b1 05    	add    dl,BYTE PTR [ecx+0x5b10f00]
    1202:	00 00                	add    BYTE PTR [eax],al
    1204:	01 5a 4a             	add    DWORD PTR [edx+0x4a],ebx
    1207:	01 00                	add    DWORD PTR [eax],eax
    1209:	00 02                	add    BYTE PTR [edx],al
    120b:	91                   	xchg   ecx,eax
    120c:	04 14                	add    al,0x14
    120e:	10 2f                	adc    BYTE PTR [edi],ch
    1210:	06                   	push   es
    1211:	00 00                	add    BYTE PTR [eax],al
    1213:	01 5c 41 00          	add    DWORD PTR [ecx+eax*2+0x0],ebx
    1217:	00 00                	add    BYTE PTR [eax],al
    1219:	02 91 74 00 0e 74    	add    dl,BYTE PTR [ecx+0x740e0074]
    121f:	04 00                	add    al,0x0
    1221:	00 01                	add    BYTE PTR [ecx],al
    1223:	63 81 00 00 00 25    	arpl   WORD PTR [ecx+0x25000000],ax
    1229:	0b 00                	or     eax,DWORD PTR [eax]
    122b:	30 72 00             	xor    BYTE PTR [edx+0x0],dh
    122e:	00 00                	add    BYTE PTR [eax],al
    1230:	01 9c ce 04 00 00 0f 	add    DWORD PTR [esi+ecx*8+0xf000004],ebx
    1237:	ce                   	into   
    1238:	05 00 00 01 63       	add    eax,0x63010000
    123d:	81 00 00 00 02 91    	add    DWORD PTR [eax],0x91020000
    1243:	00 15 37 0b 00 30    	add    BYTE PTR ds:0x30000b37,dl
    1249:	54                   	push   esp
    124a:	00 00                	add    BYTE PTR [eax],al
    124c:	00 16                	add    BYTE PTR [esi],dl
    124e:	73 32                	jae    1282 <sysEnter_Vector-0x12ed7e>
    1250:	00 01                	add    BYTE PTR [ecx],al
    1252:	65                   	gs
    1253:	76 00                	jbe    1255 <sysEnter_Vector-0x12edab>
    1255:	00 00                	add    BYTE PTR [eax],al
    1257:	02 91 6c 16 63 74    	add    dl,BYTE PTR [ecx+0x7463166c]
    125d:	00 01                	add    BYTE PTR [ecx],al
    125f:	65                   	gs
    1260:	76 00                	jbe    1262 <sysEnter_Vector-0x12ed9e>
    1262:	00 00                	add    BYTE PTR [eax],al
    1264:	02 91 68 00 00 11    	add    dl,BYTE PTR [ecx+0x11000068]
    126a:	3b 06                	cmp    eax,DWORD PTR [esi]
    126c:	00 00                	add    BYTE PTR [eax],al
    126e:	01 69 97             	add    DWORD PTR [ecx-0x69],ebp
    1271:	0b 00                	or     eax,DWORD PTR [eax]
    1273:	30 1d 00 00 00 01    	xor    BYTE PTR ds:0x1000000,bl
    1279:	9c                   	pushf  
    127a:	17                   	pop    ss
    127b:	22 06                	and    al,BYTE PTR [esi]
    127d:	00 00                	add    BYTE PTR [eax],al
    127f:	01 6e b4             	add    DWORD PTR [esi-0x4c],ebp
    1282:	0b 00                	or     eax,DWORD PTR [eax]
    1284:	30 29                	xor    BYTE PTR [ecx],ch
    1286:	00 00                	add    BYTE PTR [eax],al
    1288:	00 01                	add    BYTE PTR [ecx],al
    128a:	9c                   	pushf  
    128b:	1f                   	pop    ds
    128c:	05 00 00 0f c2       	add    eax,0xc20f0000
    1291:	05 00 00 01 6e       	add    eax,0x6e010000
    1296:	5a                   	pop    edx
    1297:	00 00                	add    BYTE PTR [eax],al
    1299:	00 02                	add    BYTE PTR [edx],al
    129b:	91                   	xchg   ecx,eax
    129c:	00 0f                	add    BYTE PTR [edi],cl
    129e:	17                   	pop    ss
    129f:	06                   	push   es
    12a0:	00 00                	add    BYTE PTR [eax],al
    12a2:	01 6e 0b             	add    DWORD PTR [esi+0xb],ebp
    12a5:	02 00                	add    al,BYTE PTR [eax]
    12a7:	00 02                	add    BYTE PTR [edx],al
    12a9:	91                   	xchg   ecx,eax
    12aa:	04 0f                	add    al,0xf
    12ac:	7a 04                	jp     12b2 <sysEnter_Vector-0x12ed4e>
    12ae:	00 00                	add    BYTE PTR [eax],al
    12b0:	01 6e 5a             	add    DWORD PTR [esi+0x5a],ebp
    12b3:	00 00                	add    BYTE PTR [eax],al
    12b5:	00 02                	add    BYTE PTR [edx],al
    12b7:	91                   	xchg   ecx,eax
    12b8:	08 00                	or     BYTE PTR [eax],al
    12ba:	13 c9                	adc    ecx,ecx
    12bc:	05 00 00 01 73       	add    eax,0x73010000
    12c1:	5a                   	pop    edx
    12c2:	00 00                	add    BYTE PTR [eax],al
    12c4:	00 dd                	add    ch,bl
    12c6:	0b 00                	or     eax,DWORD PTR [eax]
    12c8:	30 ed                	xor    ch,ch
    12ca:	01 00                	add    DWORD PTR [eax],eax
    12cc:	00 01                	add    BYTE PTR [ecx],al
    12ce:	9c                   	pushf  
    12cf:	e9 05 00 00 0f       	jmp    f0012d9 <sysEnter_Vector+0xeed12d9>
    12d4:	1e                   	push   ds
    12d5:	09 00                	or     DWORD PTR [eax],eax
    12d7:	00 01                	add    BYTE PTR [ecx],al
    12d9:	73 0d                	jae    12e8 <sysEnter_Vector-0x12ed18>
    12db:	02 00                	add    al,BYTE PTR [eax]
    12dd:	00 02                	add    BYTE PTR [edx],al
    12df:	91                   	xchg   ecx,eax
    12e0:	00 16                	add    BYTE PTR [esi],dl
    12e2:	70 69                	jo     134d <sysEnter_Vector-0x12ecb3>
    12e4:	64 00 01             	add    BYTE PTR fs:[ecx],al
    12e7:	75 5a                	jne    1343 <sysEnter_Vector-0x12ecbd>
    12e9:	00 00                	add    BYTE PTR [eax],al
    12eb:	00 02                	add    BYTE PTR [edx],al
    12ed:	91                   	xchg   ecx,eax
    12ee:	58                   	pop    eax
    12ef:	10 e9                	adc    cl,ch
    12f1:	05 00 00 01 75       	add    eax,0x75010000
    12f6:	5a                   	pop    edx
    12f7:	00 00                	add    BYTE PTR [eax],al
    12f9:	00 02                	add    BYTE PTR [edx],al
    12fb:	91                   	xchg   ecx,eax
    12fc:	6c                   	ins    BYTE PTR es:[edi],dx
    12fd:	10 12                	adc    BYTE PTR [edx],dl
    12ff:	06                   	push   es
    1300:	00 00                	add    BYTE PTR [eax],al
    1302:	01 76 e9             	add    DWORD PTR [esi-0x17],esi
    1305:	05 00 00 02 91       	add    eax,0x91020000
    130a:	50                   	push   eax
    130b:	10 d1                	adc    cl,dl
    130d:	04 00                	add    al,0x0
    130f:	00 01                	add    BYTE PTR [ecx],al
    1311:	77 0d                	ja     1320 <sysEnter_Vector-0x12ece0>
    1313:	02 00                	add    al,BYTE PTR [eax]
    1315:	00 02                	add    BYTE PTR [edx],al
    1317:	91                   	xchg   ecx,eax
    1318:	68 10 60 04 00       	push   0x46010
    131d:	00 01                	add    BYTE PTR [ecx],al
    131f:	77 0d                	ja     132e <sysEnter_Vector-0x12ecd2>
    1321:	02 00                	add    al,BYTE PTR [eax]
    1323:	00 02                	add    BYTE PTR [edx],al
    1325:	91                   	xchg   ecx,eax
    1326:	64 10 9a 04 00 00 01 	adc    BYTE PTR fs:[edx+0x1000004],bl
    132d:	78 0d                	js     133c <sysEnter_Vector-0x12ecc4>
    132f:	02 00                	add    al,BYTE PTR [eax]
    1331:	00 02                	add    BYTE PTR [edx],al
    1333:	91                   	xchg   ecx,eax
    1334:	54                   	push   esp
    1335:	10 92 04 00 00 01    	adc    BYTE PTR [edx+0x1000004],dl
    133b:	89 5a 00             	mov    DWORD PTR [edx+0x0],ebx
    133e:	00 00                	add    BYTE PTR [eax],al
    1340:	02 91 60 18 a2 04    	add    dl,BYTE PTR [ecx+0x4a21860]
    1346:	00 00                	add    BYTE PTR [eax],al
    1348:	01 9e 5a 00 00 00    	add    DWORD PTR [esi+0x5a],ebx
    134e:	b9 05 00 00 14       	mov    ecx,0x14000005
    1353:	00 15 b3 0c 00 30    	add    BYTE PTR ds:0x30000cb3,dl
    1359:	e0 00                	loopne 135b <sysEnter_Vector-0x12eca5>
    135b:	00 00                	add    BYTE PTR [eax],al
    135d:	16                   	push   ss
    135e:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
    1361:	00 01                	add    BYTE PTR [ecx],al
    1363:	8b 5a 00             	mov    ebx,DWORD PTR [edx+0x0]
    1366:	00 00                	add    BYTE PTR [eax],al
    1368:	02 91 5c 15 bf 0c    	add    dl,BYTE PTR [ecx+0xcbf155c]
    136e:	00 30                	add    BYTE PTR [eax],dh
    1370:	c4 00                	les    eax,FWORD PTR [eax]
    1372:	00 00                	add    BYTE PTR [eax],al
    1374:	19 a8 05 00 00 01    	sbb    DWORD PTR [eax+0x1000005],ebp
    137a:	93                   	xchg   ebx,eax
    137b:	5a                   	pop    edx
    137c:	00 00                	add    BYTE PTR [eax],al
    137e:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
    1381:	00 00                	add    BYTE PTR [eax],al
    1383:	00 08                	add    BYTE PTR [eax],cl
    1385:	04 0d                	add    al,0xd
    1387:	02 00                	add    al,BYTE PTR [eax]
    1389:	00 13                	add    BYTE PTR [ebx],dl
    138b:	fd                   	std    
    138c:	04 00                	add    al,0x0
    138e:	00 01                	add    BYTE PTR [ecx],al
    1390:	a2 5a 00 00 00       	mov    ds:0x5a,al
    1395:	ca 0d 00             	retf   0xd
    1398:	30 4c 00 00          	xor    BYTE PTR [eax+eax*1+0x0],cl
    139c:	00 01                	add    BYTE PTR [ecx],al
    139e:	9c                   	pushf  
    139f:	41                   	inc    ecx
    13a0:	06                   	push   es
    13a1:	00 00                	add    BYTE PTR [eax],al
    13a3:	0f 1e 09             	nop    DWORD PTR [ecx]
    13a6:	00 00                	add    BYTE PTR [eax],al
    13a8:	01 a2 0d 02 00 00    	add    DWORD PTR [edx+0x20d],esp
    13ae:	02 91 00 0f e9 05    	add    dl,BYTE PTR [ecx+0x5e90f00]
    13b4:	00 00                	add    BYTE PTR [eax],al
    13b6:	01 a2 5a 00 00 00    	add    DWORD PTR [edx+0x5a],esp
    13bc:	02 91 04 0f 12 06    	add    dl,BYTE PTR [ecx+0x6120f04]
    13c2:	00 00                	add    BYTE PTR [eax],al
    13c4:	01 a2 e9 05 00 00    	add    DWORD PTR [edx+0x5e9],esp
    13ca:	02 91 08 16 70 69    	add    dl,BYTE PTR [ecx+0x69701608]
    13d0:	64 00 01             	add    BYTE PTR fs:[ecx],al
    13d3:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    13d4:	5a                   	pop    edx
    13d5:	00 00                	add    BYTE PTR [eax],al
    13d7:	00 02                	add    BYTE PTR [edx],al
    13d9:	91                   	xchg   ecx,eax
    13da:	70 00                	jo     13dc <sysEnter_Vector-0x12ec24>
    13dc:	13 ea                	adc    ebp,edx
    13de:	04 00                	add    al,0x0
    13e0:	00 01                	add    BYTE PTR [ecx],al
    13e2:	ae                   	scas   al,BYTE PTR es:[edi]
    13e3:	5a                   	pop    edx
    13e4:	00 00                	add    BYTE PTR [eax],al
    13e6:	00 16                	add    BYTE PTR [esi],dl
    13e8:	0e                   	push   cs
    13e9:	00 30                	add    BYTE PTR [eax],dh
    13eb:	1c 00                	sbb    al,0x0
    13ed:	00 00                	add    BYTE PTR [eax],al
    13ef:	01 9c 69 06 00 00 1a 	add    DWORD PTR [ecx+ebp*2+0x1a000006],ebx
    13f6:	70 69                	jo     1461 <sysEnter_Vector-0x12eb9f>
    13f8:	64 00 01             	add    BYTE PTR fs:[ecx],al
    13fb:	ae                   	scas   al,BYTE PTR es:[edi]
    13fc:	76 00                	jbe    13fe <sysEnter_Vector-0x12ec02>
    13fe:	00 00                	add    BYTE PTR [eax],al
    1400:	02 91 00 00 1b e2    	add    dl,BYTE PTR [ecx-0x1de50000]
    1406:	04 00                	add    al,0x0
    1408:	00 01                	add    BYTE PTR [ecx],al
    140a:	b3 a0                	mov    bl,0xa0
    140c:	06                   	push   es
    140d:	00 00                	add    BYTE PTR [eax],al
    140f:	32 0e                	xor    cl,BYTE PTR [esi]
    1411:	00 30                	add    BYTE PTR [eax],dh
    1413:	59                   	pop    ecx
    1414:	00 00                	add    BYTE PTR [eax],al
    1416:	00 01                	add    BYTE PTR [ecx],al
    1418:	9c                   	pushf  
    1419:	a0 06 00 00 10       	mov    al,ds:0x10000006
    141e:	67 05 00 00 01 b5    	addr16 add eax,0xb5010000
    1424:	76 00                	jbe    1426 <sysEnter_Vector-0x12ebda>
    1426:	00 00                	add    BYTE PTR [eax],al
    1428:	02 91 5c 10 82 04    	add    dl,BYTE PTR [ecx+0x482105c]
    142e:	00 00                	add    BYTE PTR [eax],al
    1430:	01 b6 ba 00 00 00    	add    DWORD PTR [esi+0xba],esi
    1436:	03 91 b0 7f 00 08    	add    edx,DWORD PTR [ecx+0x8007fb0]
    143c:	04 ba                	add    al,0xba
    143e:	00 00                	add    BYTE PTR [eax],al
    1440:	00 13                	add    BYTE PTR [ebx],dl
    1442:	40                   	inc    eax
    1443:	06                   	push   es
    1444:	00 00                	add    BYTE PTR [eax],al
    1446:	01 bc 0d 02 00 00 8b 	add    DWORD PTR [ebp+ecx*1-0x74fffffe],edi
    144d:	0e                   	push   cs
    144e:	00 30                	add    BYTE PTR [eax],dh
    1450:	20 00                	and    BYTE PTR [eax],al
    1452:	00 00                	add    BYTE PTR [eax],al
    1454:	01 9c dc 06 00 00 1a 	add    DWORD PTR [esp+ebx*8+0x1a000006],ebx
    145b:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    145e:	00 01                	add    BYTE PTR [ecx],al
    1460:	bc 0d 02 00 00       	mov    esp,0x20d
    1465:	02 91 00 0f b8 03    	add    dl,BYTE PTR [ecx+0x3b80f00]
    146b:	00 00                	add    BYTE PTR [eax],al
    146d:	01 bc 8f 00 00 00 02 	add    DWORD PTR [edi+ecx*4+0x2000000],edi
    1474:	91                   	xchg   ecx,eax
    1475:	04 00                	add    al,0x0
    1477:	1c 4b                	sbb    al,0x4b
    1479:	00 00                	add    BYTE PTR [eax],al
    147b:	00 06                	add    BYTE PTR [esi],al
    147d:	34 76                	xor    al,0x76
    147f:	00 00                	add    BYTE PTR [eax],al
    1481:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
    1487:	30 1c b6             	xor    BYTE PTR [esi+esi*4],bl
    148a:	00 00                	add    BYTE PTR [eax],al
    148c:	00 06                	add    BYTE PTR [esi],al
    148e:	35 76 00 00 00       	xor    eax,0x76
    1493:	05 03 8c 46 00       	add    eax,0x468c03
    1498:	30 1c 62             	xor    BYTE PTR [edx+eiz*2],bl
    149b:	01 00                	add    DWORD PTR [eax],eax
    149d:	00 06                	add    BYTE PTR [esi],al
    149f:	36                   	ss
    14a0:	76 00                	jbe    14a2 <sysEnter_Vector-0x12eb5e>
    14a2:	00 00                	add    BYTE PTR [eax],al
    14a4:	05 03 84 46 00       	add    eax,0x468403
    14a9:	30 1c 54             	xor    BYTE PTR [esp+edx*2],bl
    14ac:	00 00                	add    BYTE PTR [eax],al
    14ae:	00 07                	add    BYTE PTR [edi],al
    14b0:	44                   	inc    esp
    14b1:	af                   	scas   eax,DWORD PTR es:[edi]
    14b2:	00 00                	add    BYTE PTR [eax],al
    14b4:	00 05 03 94 46 00    	add    BYTE PTR ds:0x469403,al
    14ba:	30 1c 28             	xor    BYTE PTR [eax+ebp*1],bl
    14bd:	00 00                	add    BYTE PTR [eax],al
    14bf:	00 07                	add    BYTE PTR [edi],al
    14c1:	45                   	inc    ebp
    14c2:	e9 05 00 00 05       	jmp    50014cc <sysEnter_Vector+0x4ed14cc>
    14c7:	03 90 46 00 30 1c    	add    edx,DWORD PTR [eax+0x1c300046]
    14cd:	50                   	push   eax
    14ce:	05 00 00 01 0d       	add    eax,0xd010000
    14d3:	a8 00                	test   al,0x0
    14d5:	00 00                	add    BYTE PTR [eax],al
    14d7:	05 03 9c 46 00       	add    eax,0x469c03
    14dc:	30 00                	xor    BYTE PTR [eax],al
    14de:	63 03                	arpl   WORD PTR [ebx],ax
    14e0:	00 00                	add    BYTE PTR [eax],al
    14e2:	04 00                	add    al,0x0
    14e4:	d5 06                	aad    0x6
    14e6:	00 00                	add    BYTE PTR [eax],al
    14e8:	04 01                	add    al,0x1
    14ea:	fb                   	sti    
    14eb:	00 00                	add    BYTE PTR [eax],al
    14ed:	00 0c eb             	add    BYTE PTR [ebx+ebp*8],cl
    14f0:	06                   	push   es
    14f1:	00 00                	add    BYTE PTR [eax],al
    14f3:	79 00                	jns    14f5 <sysEnter_Vector-0x12eb0b>
    14f5:	00 00                	add    BYTE PTR [eax],al
    14f7:	ac                   	lods   al,BYTE PTR ds:[esi]
    14f8:	0e                   	push   cs
    14f9:	00 30                	add    BYTE PTR [eax],dh
    14fb:	61                   	popa   
    14fc:	03 00                	add    eax,DWORD PTR [eax]
    14fe:	00 fe                	add    dh,bh
    1500:	08 00                	or     BYTE PTR [eax],al
    1502:	00 02                	add    BYTE PTR [edx],al
    1504:	01 06                	add    DWORD PTR [esi],eax
    1506:	5d                   	pop    ebp
    1507:	00 00                	add    BYTE PTR [eax],al
    1509:	00 02                	add    BYTE PTR [edx],al
    150b:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    1511:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1518:	02 08                	add    cl,BYTE PTR [eax]
    151a:	05 00 00 00 00       	add    eax,0x0
    151f:	04 83                	add    al,0x83
    1521:	06                   	push   es
    1522:	00 00                	add    BYTE PTR [eax],al
    1524:	02 2e                	add    ch,BYTE PTR [esi]
    1526:	4c                   	dec    esp
    1527:	00 00                	add    BYTE PTR [eax],al
    1529:	00 02                	add    BYTE PTR [edx],al
    152b:	01 08                	add    DWORD PTR [eax],ecx
    152d:	5b                   	pop    ebx
    152e:	00 00                	add    BYTE PTR [eax],al
    1530:	00 02                	add    BYTE PTR [edx],al
    1532:	02 07                	add    al,BYTE PTR [edi]
    1534:	0e                   	push   cs
    1535:	00 00                	add    BYTE PTR [eax],al
    1537:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    153a:	00 00                	add    BYTE PTR [eax],al
    153c:	00 02                	add    BYTE PTR [edx],al
    153e:	34 65                	xor    al,0x65
    1540:	00 00                	add    BYTE PTR [eax],al
    1542:	00 02                	add    BYTE PTR [edx],al
    1544:	04 07                	add    al,0x7
    1546:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1549:	00 02                	add    BYTE PTR [edx],al
    154b:	08 07                	or     BYTE PTR [edi],al
    154d:	34 00                	xor    al,0x0
    154f:	00 00                	add    BYTE PTR [eax],al
    1551:	04 6d                	add    al,0x6d
    1553:	04 00                	add    al,0x0
    1555:	00 03                	add    BYTE PTR [ebx],al
    1557:	d8 65 00             	fsub   DWORD PTR [ebp+0x0]
    155a:	00 00                	add    BYTE PTR [eax],al
    155c:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1563:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1566:	a2 00 00 00 05       	mov    ds:0x5000000,al
    156b:	9f                   	lahf   
    156c:	06                   	push   es
    156d:	00 00                	add    BYTE PTR [eax],al
    156f:	10 04 2c             	adc    BYTE PTR [esp+ebp*1],al
    1572:	c9                   	leave  
    1573:	00 00                	add    BYTE PTR [eax],al
    1575:	00 06                	add    BYTE PTR [esi],al
    1577:	74 06                	je     157f <sysEnter_Vector-0x12ea81>
    1579:	00 00                	add    BYTE PTR [eax],al
    157b:	04 2e                	add    al,0x2e
    157d:	5a                   	pop    edx
    157e:	00 00                	add    BYTE PTR [eax],al
    1580:	00 00                	add    BYTE PTR [eax],al
    1582:	07                   	pop    es
    1583:	6c                   	ins    BYTE PTR es:[edi],dx
    1584:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1586:	00 04 2f             	add    BYTE PTR [edi+ebp*1],al
    1589:	5a                   	pop    edx
    158a:	00 00                	add    BYTE PTR [eax],al
    158c:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    158f:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1590:	06                   	push   es
    1591:	00 00                	add    BYTE PTR [eax],al
    1593:	04 30                	add    al,0x30
    1595:	c9                   	leave  
    1596:	00 00                	add    BYTE PTR [eax],al
    1598:	00 08                	add    BYTE PTR [eax],cl
    159a:	06                   	push   es
    159b:	f8                   	clc    
    159c:	06                   	push   es
    159d:	00 00                	add    BYTE PTR [eax],al
    159f:	04 31                	add    al,0x31
    15a1:	d0 00                	rol    BYTE PTR [eax],1
    15a3:	00 00                	add    BYTE PTR [eax],al
    15a5:	0c 00                	or     al,0x0
    15a7:	02 01                	add    al,BYTE PTR [ecx]
    15a9:	02 9c 00 00 00 08 04 	add    bl,BYTE PTR [eax+eax*1+0x4080000]
    15b0:	8c 00                	mov    WORD PTR [eax],es
    15b2:	00 00                	add    BYTE PTR [eax],al
    15b4:	04 fd                	add    al,0xfd
    15b6:	06                   	push   es
    15b7:	00 00                	add    BYTE PTR [eax],al
    15b9:	04 32                	add    al,0x32
    15bb:	8c 00                	mov    WORD PTR [eax],es
    15bd:	00 00                	add    BYTE PTR [eax],al
    15bf:	02 01                	add    al,BYTE PTR [ecx]
    15c1:	06                   	push   es
    15c2:	64 00 00             	add    BYTE PTR fs:[eax],al
    15c5:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    15c8:	00 00                	add    BYTE PTR [eax],al
    15ca:	00 05 2a 7e 00 00    	add    BYTE PTR ds:0x7e2a,al
    15d0:	00 09                	add    BYTE PTR [ecx],cl
    15d2:	eb 02                	jmp    15d6 <sysEnter_Vector-0x12ea2a>
    15d4:	00 00                	add    BYTE PTR [eax],al
    15d6:	04 65                	add    al,0x65
    15d8:	00 00                	add    BYTE PTR [eax],al
    15da:	00 07                	add    BYTE PTR [edi],al
    15dc:	15 9b 01 00 00       	adc    eax,0x19b
    15e1:	0a 43 03             	or     al,BYTE PTR [ebx+0x3]
    15e4:	00 00                	add    BYTE PTR [eax],al
    15e6:	00 0a                	add    BYTE PTR [edx],cl
    15e8:	7b 03                	jnp    15ed <sysEnter_Vector-0x12ea13>
    15ea:	00 00                	add    BYTE PTR [eax],al
    15ec:	01 0a                	add    DWORD PTR [edx],ecx
    15ee:	67 02 00             	add    al,BYTE PTR [bx+si]
    15f1:	00 02                	add    BYTE PTR [edx],al
    15f3:	0a dd                	or     bl,ch
    15f5:	02 00                	add    al,BYTE PTR [eax]
    15f7:	00 03                	add    BYTE PTR [ebx],al
    15f9:	0a 5a 02             	or     bl,BYTE PTR [edx+0x2]
    15fc:	00 00                	add    BYTE PTR [eax],al
    15fe:	04 0a                	add    al,0xa
    1600:	95                   	xchg   ebp,eax
    1601:	03 00                	add    eax,DWORD PTR [eax]
    1603:	00 05 0a cb 03 00    	add    BYTE PTR ds:0x3cb0a,al
    1609:	00 4f 0a             	add    BYTE PTR [edi+0xa],cl
    160c:	36 03 00             	add    eax,DWORD PTR ss:[eax]
    160f:	00 59 0a             	add    BYTE PTR [ecx+0xa],bl
    1612:	da 03                	fiadd  DWORD PTR [ebx]
    1614:	00 00                	add    BYTE PTR [eax],al
    1616:	61                   	popa   
    1617:	0a c9                	or     cl,cl
    1619:	02 00                	add    al,BYTE PTR [eax]
    161b:	00 97 0b 53 03 00    	add    BYTE PTR [edi+0x3530b],dl
    1621:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    1624:	0b 29                	or     ebp,DWORD PTR [ecx]
    1626:	03 00                	add    eax,DWORD PTR [eax]
    1628:	00 64 01 0b          	add    BYTE PTR [ecx+eax*1+0xb],ah
    162c:	bd 03 00 00 65       	mov    ebp,0x65000003
    1631:	01 0b                	add    DWORD PTR [ebx],ecx
    1633:	bb 02 00 00 66       	mov    ebx,0x66000002
    1638:	01 0b                	add    DWORD PTR [ebx],ecx
    163a:	f2 03 00             	repnz add eax,DWORD PTR [eax]
    163d:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    1640:	0b 01                	or     eax,DWORD PTR [ecx]
    1642:	03 00                	add    eax,DWORD PTR [eax]
    1644:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    1647:	0b a0 02 00 00 69    	or     esp,DWORD PTR [eax+0x69000002]
    164d:	01 0b                	add    DWORD PTR [ebx],ecx
    164f:	6a 03                	push   0x3
    1651:	00 00                	add    BYTE PTR [eax],al
    1653:	70 01                	jo     1656 <sysEnter_Vector-0x12e9aa>
    1655:	0b a3 03 00 00 00    	or     esp,DWORD PTR [ebx+0x3]
    165b:	03 0b                	add    ecx,DWORD PTR [ebx]
    165d:	0e                   	push   cs
    165e:	03 00                	add    eax,DWORD PTR [eax]
    1660:	00 01                	add    BYTE PTR [ecx],al
    1662:	03 0b                	add    ecx,DWORD PTR [ebx]
    1664:	af                   	scas   eax,DWORD PTR es:[edi]
    1665:	02 00                	add    al,BYTE PTR [eax]
    1667:	00 02                	add    BYTE PTR [edx],al
    1669:	03 0b                	add    ecx,DWORD PTR [ebx]
    166b:	74 02                	je     166f <sysEnter_Vector-0x12e991>
    166d:	00 00                	add    BYTE PTR [eax],al
    166f:	03 03                	add    eax,DWORD PTR [ebx]
    1671:	0b 84 02 00 00 04 03 	or     eax,DWORD PTR [edx+eax*1+0x3040000]
    1678:	00 02                	add    BYTE PTR [edx],al
    167a:	04 07                	add    al,0x7
    167c:	39 00                	cmp    DWORD PTR [eax],eax
    167e:	00 00                	add    BYTE PTR [eax],al
    1680:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1683:	e8 00 00 00 0c       	call   c001688 <sysEnter_Vector+0xbed1688>
    1688:	04 08                	add    al,0x8
    168a:	04 e1                	add    al,0xe1
    168c:	00 00                	add    BYTE PTR [eax],al
    168e:	00 0d ab 06 00 00    	add    BYTE PTR ds:0x6ab,cl
    1694:	01 0c ac             	add    DWORD PTR [esp+ebp*4],ecx
    1697:	0e                   	push   cs
    1698:	00 30                	add    BYTE PTR [eax],dh
    169a:	60                   	pusha  
    169b:	00 00                	add    BYTE PTR [eax],al
    169d:	00 01                	add    BYTE PTR [ecx],al
    169f:	9c                   	pushf  
    16a0:	0e                   	push   cs
    16a1:	cb                   	retf   
    16a2:	06                   	push   es
    16a3:	00 00                	add    BYTE PTR [eax],al
    16a5:	01 14 5a             	add    DWORD PTR [edx+ebx*2],edx
    16a8:	00 00                	add    BYTE PTR [eax],al
    16aa:	00 0c 0f             	add    BYTE PTR [edi+ecx*1],cl
    16ad:	00 30                	add    BYTE PTR [eax],dh
    16af:	87 00                	xchg   DWORD PTR [eax],eax
    16b1:	00 00                	add    BYTE PTR [eax],al
    16b3:	01 9c f8 01 00 00 0f 	add    DWORD PTR [eax+edi*8+0xf000001],ebx
    16ba:	b8 03 00 00 01       	mov    eax,0x1000003
    16bf:	14 73                	adc    al,0x73
    16c1:	00 00                	add    BYTE PTR [eax],al
    16c3:	00 02                	add    BYTE PTR [edx],al
    16c5:	91                   	xchg   ecx,eax
    16c6:	00 10                	add    BYTE PTR [eax],dl
    16c8:	5d                   	pop    ebp
    16c9:	06                   	push   es
    16ca:	00 00                	add    BYTE PTR [eax],al
    16cc:	01 18                	add    DWORD PTR [eax],ebx
    16ce:	5a                   	pop    edx
    16cf:	00 00                	add    BYTE PTR [eax],al
    16d1:	00 02                	add    BYTE PTR [edx],al
    16d3:	91                   	xchg   ecx,eax
    16d4:	74 00                	je     16d6 <sysEnter_Vector-0x12e92a>
    16d6:	11 a2 04 00 00 01    	adc    DWORD PTR [edx+0x1000004],esp
    16dc:	2c 93                	sub    al,0x93
    16de:	0f 00                	(bad)  
    16e0:	30 39                	xor    BYTE PTR [ecx],bh
    16e2:	00 00                	add    BYTE PTR [eax],al
    16e4:	00 01                	add    BYTE PTR [ecx],al
    16e6:	9c                   	pushf  
    16e7:	34 02                	xor    al,0x2
    16e9:	00 00                	add    BYTE PTR [eax],al
    16eb:	0f 54 06             	andps  xmm0,XMMWORD PTR [esi]
    16ee:	00 00                	add    BYTE PTR [eax],al
    16f0:	01 2c a9             	add    DWORD PTR [ecx+ebp*4],ebp
    16f3:	01 00                	add    DWORD PTR [eax],eax
    16f5:	00 02                	add    BYTE PTR [edx],al
    16f7:	91                   	xchg   ecx,eax
    16f8:	00 12                	add    BYTE PTR [edx],dl
    16fa:	6d                   	ins    DWORD PTR es:[edi],dx
    16fb:	70 00                	jo     16fd <sysEnter_Vector-0x12e903>
    16fd:	01 2e                	add    DWORD PTR [esi],ebp
    16ff:	34 02                	xor    al,0x2
    1701:	00 00                	add    BYTE PTR [eax],al
    1703:	02 91 74 13 b6 06    	add    dl,BYTE PTR [ecx+0x6b61374]
    1709:	00 00                	add    BYTE PTR [eax],al
    170b:	01 38                	add    DWORD PTR [eax],edi
    170d:	be 0f 00 30 00       	mov    esi,0x30000f
    1712:	08 04 d6             	or     BYTE PTR [esi+edx*8],al
    1715:	00 00                	add    BYTE PTR [eax],al
    1717:	00 14 7b             	add    BYTE PTR [ebx+edi*2],dl
    171a:	06                   	push   es
    171b:	00 00                	add    BYTE PTR [eax],al
    171d:	01 3e                	add    DWORD PTR [esi],edi
    171f:	a9 01 00 00 cc       	test   eax,0xcc000001
    1724:	0f 00                	(bad)  
    1726:	30 d4                	xor    ah,dl
    1728:	01 00                	add    DWORD PTR [eax],eax
    172a:	00 01                	add    BYTE PTR [ecx],al
    172c:	9c                   	pushf  
    172d:	a8 02                	test   al,0x2
    172f:	00 00                	add    BYTE PTR [eax],al
    1731:	0f b8                	(bad)  
    1733:	03 00                	add    eax,DWORD PTR [eax]
    1735:	00 01                	add    BYTE PTR [ecx],al
    1737:	3e                   	ds
    1738:	73 00                	jae    173a <sysEnter_Vector-0x12e8c6>
    173a:	00 00                	add    BYTE PTR [eax],al
    173c:	02 91 00 10 51 04    	add    dl,BYTE PTR [ecx+0x4511000]
    1742:	00 00                	add    BYTE PTR [eax],al
    1744:	01 40 a9             	add    DWORD PTR [eax-0x57],eax
    1747:	01 00                	add    DWORD PTR [eax],eax
    1749:	00 02                	add    BYTE PTR [edx],al
    174b:	91                   	xchg   ecx,eax
    174c:	60                   	pusha  
    174d:	10 98 06 00 00 01    	adc    BYTE PTR [eax+0x1000006],bl
    1753:	42                   	inc    edx
    1754:	5a                   	pop    edx
    1755:	00 00                	add    BYTE PTR [eax],al
    1757:	00 02                	add    BYTE PTR [edx],al
    1759:	91                   	xchg   ecx,eax
    175a:	6c                   	ins    BYTE PTR es:[edi],dx
    175b:	10 47 06             	adc    BYTE PTR [edi+0x6],al
    175e:	00 00                	add    BYTE PTR [eax],al
    1760:	01 43 5a             	add    DWORD PTR [ebx+0x5a],eax
    1763:	00 00                	add    BYTE PTR [eax],al
    1765:	00 02                	add    BYTE PTR [edx],al
    1767:	91                   	xchg   ecx,eax
    1768:	68 10 90 06 00       	push   0x69010
    176d:	00 01                	add    BYTE PTR [ecx],al
    176f:	44                   	inc    esp
    1770:	34 02                	xor    al,0x2
    1772:	00 00                	add    BYTE PTR [eax],al
    1774:	02 91 64 10 bf 06    	add    dl,BYTE PTR [ecx+0x6bf1064]
    177a:	00 00                	add    BYTE PTR [eax],al
    177c:	01 45 a8             	add    DWORD PTR [ebp-0x58],eax
    177f:	02 00                	add    al,BYTE PTR [eax]
    1781:	00 02                	add    BYTE PTR [edx],al
    1783:	91                   	xchg   ecx,eax
    1784:	5c                   	pop    esp
    1785:	00 08                	add    BYTE PTR [eax],cl
    1787:	04 41                	add    al,0x41
    1789:	00 00                	add    BYTE PTR [eax],al
    178b:	00 14 af             	add    BYTE PTR [edi+ebp*4],dl
    178e:	06                   	push   es
    178f:	00 00                	add    BYTE PTR [eax],al
    1791:	01 65 a9             	add    DWORD PTR [ebp-0x57],esp
    1794:	01 00                	add    DWORD PTR [eax],eax
    1796:	00 a0 11 00 30 20    	add    BYTE PTR [eax+0x20300011],ah
    179c:	00 00                	add    BYTE PTR [eax],al
    179e:	00 01                	add    BYTE PTR [ecx],al
    17a0:	9c                   	pushf  
    17a1:	d6                   	(bad)  
    17a2:	02 00                	add    al,BYTE PTR [eax]
    17a4:	00 0f                	add    BYTE PTR [edi],cl
    17a6:	b8 03 00 00 01       	mov    eax,0x1000003
    17ab:	65                   	gs
    17ac:	73 00                	jae    17ae <sysEnter_Vector-0x12e852>
    17ae:	00 00                	add    BYTE PTR [eax],al
    17b0:	02 91 00 00 15 8b    	add    dl,BYTE PTR [ecx-0x74eb0000]
    17b6:	06                   	push   es
    17b7:	00 00                	add    BYTE PTR [eax],al
    17b9:	01 6a c0             	add    DWORD PTR [edx-0x40],ebp
    17bc:	11 00                	adc    DWORD PTR [eax],eax
    17be:	30 1b                	xor    BYTE PTR [ebx],bl
    17c0:	00 00                	add    BYTE PTR [eax],al
    17c2:	00 01                	add    BYTE PTR [ecx],al
    17c4:	9c                   	pushf  
    17c5:	fa                   	cli    
    17c6:	02 00                	add    al,BYTE PTR [eax]
    17c8:	00 0f                	add    BYTE PTR [edi],cl
    17ca:	54                   	push   esp
    17cb:	06                   	push   es
    17cc:	00 00                	add    BYTE PTR [eax],al
    17ce:	01 6a a9             	add    DWORD PTR [edx-0x57],ebp
    17d1:	01 00                	add    DWORD PTR [eax],eax
    17d3:	00 02                	add    BYTE PTR [edx],al
    17d5:	91                   	xchg   ecx,eax
    17d6:	00 00                	add    BYTE PTR [eax],al
    17d8:	0d 65 06 00 00       	or     eax,0x665
    17dd:	01 6f db             	add    DWORD PTR [edi-0x25],ebp
    17e0:	11 00                	adc    DWORD PTR [eax],eax
    17e2:	30 32                	xor    BYTE PTR [edx],dh
    17e4:	00 00                	add    BYTE PTR [eax],al
    17e6:	00 01                	add    BYTE PTR [ecx],al
    17e8:	9c                   	pushf  
    17e9:	16                   	push   ss
    17ea:	4b                   	dec    ebx
    17eb:	00 00                	add    BYTE PTR [eax],al
    17ed:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    17f0:	5a                   	pop    edx
    17f1:	00 00                	add    BYTE PTR [eax],al
    17f3:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
    17f9:	30 16                	xor    BYTE PTR [esi],dl
    17fb:	b6 00                	mov    dh,0x0
    17fd:	00 00                	add    BYTE PTR [eax],al
    17ff:	04 35                	add    al,0x35
    1801:	5a                   	pop    edx
    1802:	00 00                	add    BYTE PTR [eax],al
    1804:	00 05 03 8c 46 00    	add    BYTE PTR ds:0x468c03,al
    180a:	30 16                	xor    BYTE PTR [esi],dl
    180c:	62 01                	bound  eax,QWORD PTR [ecx]
    180e:	00 00                	add    BYTE PTR [eax],al
    1810:	04 36                	add    al,0x36
    1812:	5a                   	pop    edx
    1813:	00 00                	add    BYTE PTR [eax],al
    1815:	00 05 03 84 46 00    	add    BYTE PTR ds:0x468403,al
    181b:	30 16                	xor    BYTE PTR [esi],dl
    181d:	54                   	push   esp
    181e:	00 00                	add    BYTE PTR [eax],al
    1820:	00 06                	add    BYTE PTR [esi],al
    1822:	44                   	inc    esp
    1823:	e8 00 00 00 05       	call   5001828 <sysEnter_Vector+0x4ed1828>
    1828:	03 94 46 00 30 16 28 	add    edx,DWORD PTR [esi+eax*2+0x28163000]
    182f:	00 00                	add    BYTE PTR [eax],al
    1831:	00 06                	add    BYTE PTR [esi],al
    1833:	45                   	inc    ebp
    1834:	60                   	pusha  
    1835:	03 00                	add    eax,DWORD PTR [eax]
    1837:	00 05 03 90 46 00    	add    BYTE PTR ds:0x469003,al
    183d:	30 08                	xor    BYTE PTR [eax],cl
    183f:	04 ab                	add    al,0xab
    1841:	01 00                	add    DWORD PTR [eax],eax
    1843:	00 00                	add    BYTE PTR [eax],al
    1845:	f5                   	cmc    
    1846:	01 00                	add    DWORD PTR [eax],eax
    1848:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    184b:	39 08                	cmp    DWORD PTR [eax],ecx
    184d:	00 00                	add    BYTE PTR [eax],al
    184f:	04 01                	add    al,0x1
    1851:	fb                   	sti    
    1852:	00 00                	add    BYTE PTR [eax],al
    1854:	00 0c 07             	add    BYTE PTR [edi+eax*1],cl
    1857:	07                   	pop    es
    1858:	00 00                	add    BYTE PTR [eax],al
    185a:	79 00                	jns    185c <sysEnter_Vector-0x12e7a4>
    185c:	00 00                	add    BYTE PTR [eax],al
    185e:	10 12                	adc    BYTE PTR [edx],dl
    1860:	00 30                	add    BYTE PTR [eax],dh
    1862:	9b                   	fwait
    1863:	01 00                	add    DWORD PTR [eax],eax
    1865:	00 5b 0a             	add    BYTE PTR [ebx+0xa],bl
    1868:	00 00                	add    BYTE PTR [eax],al
    186a:	02 01                	add    al,BYTE PTR [ecx]
    186c:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    186f:	00 00                	add    BYTE PTR [eax],al
    1871:	02 02                	add    al,BYTE PTR [edx]
    1873:	07                   	pop    es
    1874:	0e                   	push   cs
    1875:	00 00                	add    BYTE PTR [eax],al
    1877:	00 02                	add    BYTE PTR [edx],al
    1879:	04 07                	add    al,0x7
    187b:	3e 00 00             	add    BYTE PTR ds:[eax],al
    187e:	00 02                	add    BYTE PTR [edx],al
    1880:	04 07                	add    al,0x7
    1882:	39 00                	cmp    DWORD PTR [eax],eax
    1884:	00 00                	add    BYTE PTR [eax],al
    1886:	02 01                	add    al,BYTE PTR [ecx]
    1888:	06                   	push   es
    1889:	5d                   	pop    ebp
    188a:	00 00                	add    BYTE PTR [eax],al
    188c:	00 02                	add    BYTE PTR [edx],al
    188e:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    1894:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    189b:	02 08                	add    cl,BYTE PTR [eax]
    189d:	05 00 00 00 00       	add    eax,0x0
    18a2:	02 08                	add    cl,BYTE PTR [eax]
    18a4:	07                   	pop    es
    18a5:	34 00                	xor    al,0x0
    18a7:	00 00                	add    BYTE PTR [eax],al
    18a9:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    18b0:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    18b3:	e8 00 00 00 04       	call   40018b8 <sysEnter_Vector+0x3ed18b8>
    18b8:	04 05                	add    al,0x5
    18ba:	04 7a                	add    al,0x7a
    18bc:	00 00                	add    BYTE PTR [eax],al
    18be:	00 02                	add    BYTE PTR [edx],al
    18c0:	01 06                	add    DWORD PTR [esi],eax
    18c2:	64 00 00             	add    BYTE PTR fs:[eax],al
    18c5:	00 06                	add    BYTE PTR [esi],al
    18c7:	70 00                	jo     18c9 <sysEnter_Vector-0x12e737>
    18c9:	00 00                	add    BYTE PTR [eax],al
    18cb:	02 34 33             	add    dh,BYTE PTR [ebx+esi*1]
    18ce:	00 00                	add    BYTE PTR [eax],al
    18d0:	00 06                	add    BYTE PTR [esi],al
    18d2:	69 00 00 00 03 2a    	imul   eax,DWORD PTR [eax],0x2a030000
    18d8:	64 00 00             	add    BYTE PTR fs:[eax],al
    18db:	00 05 04 9d 00 00    	add    BYTE PTR ds:0x9d04,al
    18e1:	00 07                	add    BYTE PTR [edi],al
    18e3:	7a 00                	jp     18e5 <sysEnter_Vector-0x12e71b>
    18e5:	00 00                	add    BYTE PTR [eax],al
    18e7:	06                   	push   es
    18e8:	6d                   	ins    DWORD PTR es:[edi],dx
    18e9:	04 00                	add    al,0x0
    18eb:	00 04 d8             	add    BYTE PTR [eax+ebx*8],al
    18ee:	33 00                	xor    eax,DWORD PTR [eax]
    18f0:	00 00                	add    BYTE PTR [eax],al
    18f2:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    18f5:	a2 00 00 00 02       	mov    ds:0x2000000,al
    18fa:	01 02                	add    DWORD PTR [edx],eax
    18fc:	9c                   	pushf  
    18fd:	00 00                	add    BYTE PTR [eax],al
    18ff:	00 08                	add    BYTE PTR [eax],cl
    1901:	19 07                	sbb    DWORD PTR [edi],eax
    1903:	00 00                	add    BYTE PTR [eax],al
    1905:	01 0a                	add    DWORD PTR [edx],ecx
    1907:	72 00                	jb     1909 <sysEnter_Vector-0x12e6f7>
    1909:	00 00                	add    BYTE PTR [eax],al
    190b:	10 12                	adc    BYTE PTR [edx],dl
    190d:	00 30                	add    BYTE PTR [eax],dh
    190f:	9b                   	fwait
    1910:	01 00                	add    DWORD PTR [eax],eax
    1912:	00 01                	add    BYTE PTR [ecx],al
    1914:	9c                   	pushf  
    1915:	85 01                	test   DWORD PTR [ecx],eax
    1917:	00 00                	add    BYTE PTR [eax],al
    1919:	09 14 07             	or     DWORD PTR [edi+eax*1],edx
    191c:	00 00                	add    BYTE PTR [eax],al
    191e:	01 0a                	add    DWORD PTR [edx],ecx
    1920:	72 00                	jb     1922 <sysEnter_Vector-0x12e6de>
    1922:	00 00                	add    BYTE PTR [eax],al
    1924:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    192a:	63 00                	arpl   WORD PTR [eax],ax
    192c:	01 0a                	add    DWORD PTR [edx],ecx
    192e:	85 01                	test   DWORD PTR [ecx],eax
    1930:	00 00                	add    BYTE PTR [eax],al
    1932:	02 91 04 0a 6e 00    	add    dl,BYTE PTR [ecx+0x6e0a04]
    1938:	01 0a                	add    DWORD PTR [edx],ecx
    193a:	a2 00 00 00 02       	mov    ds:0x2000000,al
    193f:	91                   	xchg   ecx,eax
    1940:	08 0b                	or     BYTE PTR [ebx],cl
    1942:	64                   	fs
    1943:	77 00                	ja     1945 <sysEnter_Vector-0x12e6bb>
    1945:	01 0c b4             	add    DWORD PTR [esp+esi*4],ecx
    1948:	00 00                	add    BYTE PTR [eax],al
    194a:	00 02                	add    BYTE PTR [edx],al
    194c:	91                   	xchg   ecx,eax
    194d:	5e                   	pop    esi
    194e:	0b 64 64 00          	or     esp,DWORD PTR [esp+eiz*2+0x0]
    1952:	01 0c b4             	add    DWORD PTR [esp+esi*4],ecx
    1955:	00 00                	add    BYTE PTR [eax],al
    1957:	00 02                	add    BYTE PTR [edx],al
    1959:	91                   	xchg   ecx,eax
    195a:	5f                   	pop    edi
    195b:	0c 42                	or     al,0x42
    195d:	12 00                	adc    al,BYTE PTR [eax]
    195f:	30 7d 00             	xor    BYTE PTR [ebp+0x0],bh
    1962:	00 00                	add    BYTE PTR [eax],al
    1964:	3c 01                	cmp    al,0x1
    1966:	00 00                	add    BYTE PTR [eax],al
    1968:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    196b:	01 13                	add    DWORD PTR [ebx],edx
    196d:	8c 01                	mov    WORD PTR [ecx],es
    196f:	00 00                	add    BYTE PTR [eax],al
    1971:	02 91 74 0b 74 00    	add    dl,BYTE PTR [ecx+0x740b74]
    1977:	01 14 97             	add    DWORD PTR [edi+edx*4],edx
    197a:	01 00                	add    DWORD PTR [eax],eax
    197c:	00 02                	add    BYTE PTR [edx],al
    197e:	91                   	xchg   ecx,eax
    197f:	70 00                	jo     1981 <sysEnter_Vector-0x12e67f>
    1981:	0c c5                	or     al,0xc5
    1983:	12 00                	adc    al,BYTE PTR [eax]
    1985:	30 79 00             	xor    BYTE PTR [ecx+0x0],bh
    1988:	00 00                	add    BYTE PTR [eax],al
    198a:	62 01                	bound  eax,QWORD PTR [ecx]
    198c:	00 00                	add    BYTE PTR [eax],al
    198e:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    1991:	01 23                	add    DWORD PTR [ebx],esp
    1993:	8c 01                	mov    WORD PTR [ecx],es
    1995:	00 00                	add    BYTE PTR [eax],al
    1997:	02 91 6c 0b 74 00    	add    dl,BYTE PTR [ecx+0x740b6c]
    199d:	01 24 97             	add    DWORD PTR [edi+edx*4],esp
    19a0:	01 00                	add    DWORD PTR [eax],eax
    19a2:	00 02                	add    BYTE PTR [edx],al
    19a4:	91                   	xchg   ecx,eax
    19a5:	68 00 0d 3e 13       	push   0x133e0d00
    19aa:	00 30                	add    BYTE PTR [eax],dh
    19ac:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    19af:	00 0b                	add    BYTE PTR [ebx],cl
    19b1:	66                   	data16
    19b2:	00 01                	add    BYTE PTR [ecx],al
    19b4:	32 97 00 00 00 02    	xor    dl,BYTE PTR [edi+0x2000000]
    19ba:	91                   	xchg   ecx,eax
    19bb:	64 0b 74 00 01       	or     esi,DWORD PTR fs:[eax+eax*1+0x1]
    19c0:	33 74 00 00          	xor    esi,DWORD PTR [eax+eax*1+0x0]
    19c4:	00 02                	add    BYTE PTR [edx],al
    19c6:	91                   	xchg   ecx,eax
    19c7:	60                   	pusha  
    19c8:	00 00                	add    BYTE PTR [eax],al
    19ca:	05 04 8b 01 00       	add    eax,0x18b04
    19cf:	00 0e                	add    BYTE PTR [esi],cl
    19d1:	05 04 92 01 00       	add    eax,0x19204
    19d6:	00 07                	add    BYTE PTR [edi],al
    19d8:	81 00 00 00 05 04    	add    DWORD PTR [eax],0x4050000
    19de:	81 00 00 00 0f 4b    	add    DWORD PTR [eax],0x4b0f0000
    19e4:	00 00                	add    BYTE PTR [eax],al
    19e6:	00 05 34 81 00 00    	add    BYTE PTR ds:0x8134,al
    19ec:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
    19f2:	30 0f                	xor    BYTE PTR [edi],cl
    19f4:	b6 00                	mov    dh,0x0
    19f6:	00 00                	add    BYTE PTR [eax],al
    19f8:	05 35 81 00 00       	add    eax,0x8135
    19fd:	00 05 03 8c 46 00    	add    BYTE PTR ds:0x468c03,al
    1a03:	30 0f                	xor    BYTE PTR [edi],cl
    1a05:	62 01                	bound  eax,QWORD PTR [ecx]
    1a07:	00 00                	add    BYTE PTR [eax],al
    1a09:	05 36 81 00 00       	add    eax,0x8136
    1a0e:	00 05 03 84 46 00    	add    BYTE PTR ds:0x468403,al
    1a14:	30 0f                	xor    BYTE PTR [edi],cl
    1a16:	54                   	push   esp
    1a17:	00 00                	add    BYTE PTR [eax],al
    1a19:	00 06                	add    BYTE PTR [esi],al
    1a1b:	44                   	inc    esp
    1a1c:	8c 00                	mov    WORD PTR [eax],es
    1a1e:	00 00                	add    BYTE PTR [eax],al
    1a20:	05 03 94 46 00       	add    eax,0x469403
    1a25:	30 0f                	xor    BYTE PTR [edi],cl
    1a27:	28 00                	sub    BYTE PTR [eax],al
    1a29:	00 00                	add    BYTE PTR [eax],al
    1a2b:	06                   	push   es
    1a2c:	45                   	inc    ebp
    1a2d:	f2 01 00             	repnz add DWORD PTR [eax],eax
    1a30:	00 05 03 90 46 00    	add    BYTE PTR ds:0x469003,al
    1a36:	30 05 04 74 00 00    	xor    BYTE PTR ds:0x7404,al
    1a3c:	00 00                	add    BYTE PTR [eax],al
    1a3e:	36 02 00             	add    al,BYTE PTR ss:[eax]
    1a41:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1a44:	fa                   	cli    
    1a45:	08 00                	or     BYTE PTR [eax],al
    1a47:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1a4a:	fb                   	sti    
    1a4b:	00 00                	add    BYTE PTR [eax],al
    1a4d:	00 0c 2c             	add    BYTE PTR [esp+ebp*1],cl
    1a50:	07                   	pop    es
    1a51:	00 00                	add    BYTE PTR [eax],al
    1a53:	79 00                	jns    1a55 <sysEnter_Vector-0x12e5ab>
    1a55:	00 00                	add    BYTE PTR [eax],al
    1a57:	ac                   	lods   al,BYTE PTR ds:[esi]
    1a58:	13 00                	adc    eax,DWORD PTR [eax]
    1a5a:	30 8e 01 00 00 4c    	xor    BYTE PTR [esi+0x4c000001],cl
    1a60:	0b 00                	or     eax,DWORD PTR [eax]
    1a62:	00 02                	add    BYTE PTR [edx],al
    1a64:	01 06                	add    DWORD PTR [esi],eax
    1a66:	64 00 00             	add    BYTE PTR fs:[eax],al
    1a69:	00 02                	add    BYTE PTR [edx],al
    1a6b:	01 06                	add    DWORD PTR [esi],eax
    1a6d:	5d                   	pop    ebp
    1a6e:	00 00                	add    BYTE PTR [eax],al
    1a70:	00 02                	add    BYTE PTR [edx],al
    1a72:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    1a78:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1a7f:	02 08                	add    cl,BYTE PTR [eax]
    1a81:	05 00 00 00 00       	add    eax,0x0
    1a86:	04 83                	add    al,0x83
    1a88:	06                   	push   es
    1a89:	00 00                	add    BYTE PTR [eax],al
    1a8b:	02 2e                	add    ch,BYTE PTR [esi]
    1a8d:	53                   	push   ebx
    1a8e:	00 00                	add    BYTE PTR [eax],al
    1a90:	00 02                	add    BYTE PTR [edx],al
    1a92:	01 08                	add    DWORD PTR [eax],ecx
    1a94:	5b                   	pop    ebx
    1a95:	00 00                	add    BYTE PTR [eax],al
    1a97:	00 04 46             	add    BYTE PTR [esi+eax*2],al
    1a9a:	07                   	pop    es
    1a9b:	00 00                	add    BYTE PTR [eax],al
    1a9d:	02 31                	add    dh,BYTE PTR [ecx]
    1a9f:	65 00 00             	add    BYTE PTR gs:[eax],al
    1aa2:	00 02                	add    BYTE PTR [edx],al
    1aa4:	02 07                	add    al,BYTE PTR [edi]
    1aa6:	0e                   	push   cs
    1aa7:	00 00                	add    BYTE PTR [eax],al
    1aa9:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    1aac:	00 00                	add    BYTE PTR [eax],al
    1aae:	00 02                	add    BYTE PTR [edx],al
    1ab0:	34 77                	xor    al,0x77
    1ab2:	00 00                	add    BYTE PTR [eax],al
    1ab4:	00 02                	add    BYTE PTR [edx],al
    1ab6:	04 07                	add    al,0x7
    1ab8:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1abb:	00 02                	add    BYTE PTR [edx],al
    1abd:	08 07                	or     BYTE PTR [edi],al
    1abf:	34 00                	xor    al,0x0
    1ac1:	00 00                	add    BYTE PTR [eax],al
    1ac3:	04 6d                	add    al,0x6d
    1ac5:	04 00                	add    al,0x0
    1ac7:	00 03                	add    BYTE PTR [ebx],al
    1ac9:	d8 77 00             	fdiv   DWORD PTR [edi+0x0]
    1acc:	00 00                	add    BYTE PTR [eax],al
    1ace:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1ad5:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1ad8:	a2 00 00 00 02       	mov    ds:0x2000000,al
    1add:	01 02                	add    DWORD PTR [edx],eax
    1adf:	9c                   	pushf  
    1ae0:	00 00                	add    BYTE PTR [eax],al
    1ae2:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1ae5:	00 00                	add    BYTE PTR [eax],al
    1ae7:	00 04 2a             	add    BYTE PTR [edx+ebp*1],al
    1aea:	90                   	nop
    1aeb:	00 00                	add    BYTE PTR [eax],al
    1aed:	00 02                	add    BYTE PTR [edx],al
    1aef:	04 07                	add    al,0x7
    1af1:	39 00                	cmp    DWORD PTR [eax],eax
    1af3:	00 00                	add    BYTE PTR [eax],al
    1af5:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1af8:	e8 00 00 00 05       	call   5001afd <sysEnter_Vector+0x4ed1afd>
    1afd:	04 06                	add    al,0x6
    1aff:	04 25                	add    al,0x25
    1b01:	00 00                	add    BYTE PTR [eax],al
    1b03:	00 07                	add    BYTE PTR [edi],al
    1b05:	25 07 00 00 01       	and    eax,0x1000007
    1b0a:	08 be 00 00 00 ac    	or     BYTE PTR [esi-0x54000000],bh
    1b10:	13 00                	adc    eax,DWORD PTR [eax]
    1b12:	30 c7                	xor    bh,al
    1b14:	00 00                	add    BYTE PTR [eax],al
    1b16:	00 01                	add    BYTE PTR [ecx],al
    1b18:	9c                   	pushf  
    1b19:	49                   	dec    ecx
    1b1a:	01 00                	add    DWORD PTR [eax],eax
    1b1c:	00 08                	add    BYTE PTR [eax],cl
    1b1e:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    1b21:	01 08                	add    DWORD PTR [eax],ecx
    1b23:	be 00 00 00 02       	mov    esi,0x2000000
    1b28:	91                   	xchg   ecx,eax
    1b29:	00 08                	add    BYTE PTR [eax],cl
    1b2b:	76 61                	jbe    1b8e <sysEnter_Vector-0x12e472>
    1b2d:	6c                   	ins    BYTE PTR es:[edi],dx
    1b2e:	00 01                	add    BYTE PTR [ecx],al
    1b30:	08 3a                	or     BYTE PTR [edx],bh
    1b32:	00 00                	add    BYTE PTR [eax],al
    1b34:	00 02                	add    BYTE PTR [edx],al
    1b36:	91                   	xchg   ecx,eax
    1b37:	04 08                	add    al,0x8
    1b39:	6c                   	ins    BYTE PTR es:[edi],dx
    1b3a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1b3c:	00 01                	add    BYTE PTR [ecx],al
    1b3e:	08 85 00 00 00 02    	or     BYTE PTR [ebp+0x2000000],al
    1b44:	91                   	xchg   ecx,eax
    1b45:	08 09                	or     BYTE PTR [ecx],cl
    1b47:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1b4a:	0a 49 01             	or     cl,BYTE PTR [ecx+0x1]
    1b4d:	00 00                	add    BYTE PTR [eax],al
    1b4f:	02 91 74 09 65 00    	add    dl,BYTE PTR [ecx+0x650974]
    1b55:	01 0b                	add    DWORD PTR [ebx],ecx
    1b57:	4f                   	dec    edi
    1b58:	01 00                	add    DWORD PTR [eax],eax
    1b5a:	00 02                	add    BYTE PTR [edx],al
    1b5c:	91                   	xchg   ecx,eax
    1b5d:	70 0a                	jo     1b69 <sysEnter_Vector-0x12e497>
    1b5f:	20 07                	and    BYTE PTR [edi],al
    1b61:	00 00                	add    BYTE PTR [eax],al
    1b63:	01 0c 5a             	add    DWORD PTR [edx+ebx*2],ecx
    1b66:	00 00                	add    BYTE PTR [eax],al
    1b68:	00 02                	add    BYTE PTR [edx],al
    1b6a:	91                   	xchg   ecx,eax
    1b6b:	6a 09                	push   0x9
    1b6d:	66                   	data16
    1b6e:	00 01                	add    BYTE PTR [ecx],al
    1b70:	0d 55 01 00 00       	or     eax,0x155
    1b75:	02 91 6c 0a 39 07    	add    dl,BYTE PTR [ecx+0x7390a6c]
    1b7b:	00 00                	add    BYTE PTR [eax],al
    1b7d:	01 0e                	add    DWORD PTR [esi],ecx
    1b7f:	6c                   	ins    BYTE PTR es:[edi],dx
    1b80:	00 00                	add    BYTE PTR [eax],al
    1b82:	00 02                	add    BYTE PTR [edx],al
    1b84:	91                   	xchg   ecx,eax
    1b85:	64 00 06             	add    BYTE PTR fs:[esi],al
    1b88:	04 48                	add    al,0x48
    1b8a:	00 00                	add    BYTE PTR [eax],al
    1b8c:	00 06                	add    BYTE PTR [esi],al
    1b8e:	04 5a                	add    al,0x5a
    1b90:	00 00                	add    BYTE PTR [eax],al
    1b92:	00 06                	add    BYTE PTR [esi],al
    1b94:	04 6c                	add    al,0x6c
    1b96:	00 00                	add    BYTE PTR [eax],al
    1b98:	00 07                	add    BYTE PTR [edi],al
    1b9a:	3e                   	ds
    1b9b:	07                   	pop    es
    1b9c:	00 00                	add    BYTE PTR [eax],al
    1b9e:	01 1f                	add    DWORD PTR [edi],ebx
    1ba0:	be 00 00 00 73       	mov    esi,0x73000000
    1ba5:	14 00                	adc    al,0x0
    1ba7:	30 c7                	xor    bh,al
    1ba9:	00 00                	add    BYTE PTR [eax],al
    1bab:	00 01                	add    BYTE PTR [ecx],al
    1bad:	9c                   	pushf  
    1bae:	de 01                	fiadd  WORD PTR [ecx]
    1bb0:	00 00                	add    BYTE PTR [eax],al
    1bb2:	08 64 31 00          	or     BYTE PTR [ecx+esi*1+0x0],ah
    1bb6:	01 1f                	add    DWORD PTR [edi],ebx
    1bb8:	be 00 00 00 02       	mov    esi,0x2000000
    1bbd:	91                   	xchg   ecx,eax
    1bbe:	00 08                	add    BYTE PTR [eax],cl
    1bc0:	76 61                	jbe    1c23 <sysEnter_Vector-0x12e3dd>
    1bc2:	6c                   	ins    BYTE PTR es:[edi],dx
    1bc3:	00 01                	add    BYTE PTR [ecx],al
    1bc5:	1f                   	pop    ds
    1bc6:	3a 00                	cmp    al,BYTE PTR [eax]
    1bc8:	00 00                	add    BYTE PTR [eax],al
    1bca:	02 91 04 08 6c 65    	add    dl,BYTE PTR [ecx+0x656c0804]
    1bd0:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1bd1:	00 01                	add    BYTE PTR [ecx],al
    1bd3:	1f                   	pop    ds
    1bd4:	85 00                	test   DWORD PTR [eax],eax
    1bd6:	00 00                	add    BYTE PTR [eax],al
    1bd8:	02 91 08 09 64 00    	add    dl,BYTE PTR [ecx+0x640908]
    1bde:	01 21                	add    DWORD PTR [ecx],esp
    1be0:	49                   	dec    ecx
    1be1:	01 00                	add    DWORD PTR [eax],eax
    1be3:	00 02                	add    BYTE PTR [edx],al
    1be5:	91                   	xchg   ecx,eax
    1be6:	74 09                	je     1bf1 <sysEnter_Vector-0x12e40f>
    1be8:	65 00 01             	add    BYTE PTR gs:[ecx],al
    1beb:	22 4f 01             	and    cl,BYTE PTR [edi+0x1]
    1bee:	00 00                	add    BYTE PTR [eax],al
    1bf0:	02 91 70 0a 20 07    	add    dl,BYTE PTR [ecx+0x7200a70]
    1bf6:	00 00                	add    BYTE PTR [eax],al
    1bf8:	01 23                	add    DWORD PTR [ebx],esp
    1bfa:	5a                   	pop    edx
    1bfb:	00 00                	add    BYTE PTR [eax],al
    1bfd:	00 02                	add    BYTE PTR [edx],al
    1bff:	91                   	xchg   ecx,eax
    1c00:	6a 09                	push   0x9
    1c02:	66                   	data16
    1c03:	00 01                	add    BYTE PTR [ecx],al
    1c05:	24 55                	and    al,0x55
    1c07:	01 00                	add    DWORD PTR [eax],eax
    1c09:	00 02                	add    BYTE PTR [edx],al
    1c0b:	91                   	xchg   ecx,eax
    1c0c:	6c                   	ins    BYTE PTR es:[edi],dx
    1c0d:	0a 39                	or     bh,BYTE PTR [ecx]
    1c0f:	07                   	pop    es
    1c10:	00 00                	add    BYTE PTR [eax],al
    1c12:	01 25 6c 00 00 00    	add    DWORD PTR ds:0x6c,esp
    1c18:	02 91 64 00 0b 4b    	add    dl,BYTE PTR [ecx+0x4b0b0064]
    1c1e:	00 00                	add    BYTE PTR [eax],al
    1c20:	00 05 34 6c 00 00    	add    BYTE PTR ds:0x6c34,al
    1c26:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
    1c2c:	30 0b                	xor    BYTE PTR [ebx],cl
    1c2e:	b6 00                	mov    dh,0x0
    1c30:	00 00                	add    BYTE PTR [eax],al
    1c32:	05 35 6c 00 00       	add    eax,0x6c35
    1c37:	00 05 03 8c 46 00    	add    BYTE PTR ds:0x468c03,al
    1c3d:	30 0b                	xor    BYTE PTR [ebx],cl
    1c3f:	62 01                	bound  eax,QWORD PTR [ecx]
    1c41:	00 00                	add    BYTE PTR [eax],al
    1c43:	05 36 6c 00 00       	add    eax,0x6c36
    1c48:	00 05 03 84 46 00    	add    BYTE PTR ds:0x468403,al
    1c4e:	30 0b                	xor    BYTE PTR [ebx],cl
    1c50:	54                   	push   esp
    1c51:	00 00                	add    BYTE PTR [eax],al
    1c53:	00 06                	add    BYTE PTR [esi],al
    1c55:	44                   	inc    esp
    1c56:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1c57:	00 00                	add    BYTE PTR [eax],al
    1c59:	00 05 03 94 46 00    	add    BYTE PTR ds:0x469403,al
    1c5f:	30 0b                	xor    BYTE PTR [ebx],cl
    1c61:	28 00                	sub    BYTE PTR [eax],al
    1c63:	00 00                	add    BYTE PTR [eax],al
    1c65:	06                   	push   es
    1c66:	45                   	inc    ebp
    1c67:	33 02                	xor    eax,DWORD PTR [edx]
    1c69:	00 00                	add    BYTE PTR [eax],al
    1c6b:	05 03 90 46 00       	add    eax,0x469003
    1c70:	30 06                	xor    BYTE PTR [esi],al
    1c72:	04 c0                	add    al,0xc0
    1c74:	00 00                	add    BYTE PTR [eax],al
    1c76:	00 00                	add    BYTE PTR [eax],al
    1c78:	80 01 00             	add    BYTE PTR [ecx],0x0
    1c7b:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1c7e:	9b                   	fwait
    1c7f:	09 00                	or     DWORD PTR [eax],eax
    1c81:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1c84:	fb                   	sti    
    1c85:	00 00                	add    BYTE PTR [eax],al
    1c87:	00 0c 6b             	add    BYTE PTR [ebx+ebp*2],cl
    1c8a:	07                   	pop    es
    1c8b:	00 00                	add    BYTE PTR [eax],al
    1c8d:	79 00                	jns    1c8f <sysEnter_Vector-0x12e371>
    1c8f:	00 00                	add    BYTE PTR [eax],al
    1c91:	3c 15                	cmp    al,0x15
    1c93:	00 30                	add    BYTE PTR [eax],dh
    1c95:	10 00                	adc    BYTE PTR [eax],al
    1c97:	00 00                	add    BYTE PTR [eax],al
    1c99:	34 0c                	xor    al,0xc
    1c9b:	00 00                	add    BYTE PTR [eax],al
    1c9d:	02 01                	add    al,BYTE PTR [ecx]
    1c9f:	06                   	push   es
    1ca0:	64 00 00             	add    BYTE PTR fs:[eax],al
    1ca3:	00 02                	add    BYTE PTR [edx],al
    1ca5:	01 06                	add    DWORD PTR [esi],eax
    1ca7:	5d                   	pop    ebp
    1ca8:	00 00                	add    BYTE PTR [eax],al
    1caa:	00 02                	add    BYTE PTR [edx],al
    1cac:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    1cb2:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1cb9:	02 08                	add    cl,BYTE PTR [eax]
    1cbb:	05 00 00 00 00       	add    eax,0x0
    1cc0:	02 01                	add    al,BYTE PTR [ecx]
    1cc2:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    1cc5:	00 00                	add    BYTE PTR [eax],al
    1cc7:	02 02                	add    al,BYTE PTR [edx]
    1cc9:	07                   	pop    es
    1cca:	0e                   	push   cs
    1ccb:	00 00                	add    BYTE PTR [eax],al
    1ccd:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    1cd0:	00 00                	add    BYTE PTR [eax],al
    1cd2:	00 02                	add    BYTE PTR [edx],al
    1cd4:	34 61                	xor    al,0x61
    1cd6:	00 00                	add    BYTE PTR [eax],al
    1cd8:	00 02                	add    BYTE PTR [edx],al
    1cda:	04 07                	add    al,0x7
    1cdc:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1cdf:	00 02                	add    BYTE PTR [edx],al
    1ce1:	08 07                	or     BYTE PTR [edi],al
    1ce3:	34 00                	xor    al,0x0
    1ce5:	00 00                	add    BYTE PTR [eax],al
    1ce7:	04 6d                	add    al,0x6d
    1ce9:	04 00                	add    al,0x0
    1ceb:	00 03                	add    BYTE PTR [ebx],al
    1ced:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    1cf0:	00 00                	add    BYTE PTR [eax],al
    1cf2:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1cf9:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1cfc:	a2 00 00 00 02       	mov    ds:0x2000000,al
    1d01:	01 02                	add    DWORD PTR [edx],eax
    1d03:	9c                   	pushf  
    1d04:	00 00                	add    BYTE PTR [eax],al
    1d06:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1d09:	00 00                	add    BYTE PTR [eax],al
    1d0b:	00 04 2a             	add    BYTE PTR [edx+ebp*1],al
    1d0e:	7a 00                	jp     1d10 <sysEnter_Vector-0x12e2f0>
    1d10:	00 00                	add    BYTE PTR [eax],al
    1d12:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1d15:	39 00                	cmp    DWORD PTR [eax],eax
    1d17:	00 00                	add    BYTE PTR [eax],al
    1d19:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1d1c:	e8 00 00 00 05       	call   5001d21 <sysEnter_Vector+0x4ed1d21>
    1d21:	04 06                	add    al,0x6
    1d23:	04 25                	add    al,0x25
    1d25:	00 00                	add    BYTE PTR [eax],al
    1d27:	00 04 54             	add    BYTE PTR [esp+edx*2],al
    1d2a:	07                   	pop    es
    1d2b:	00 00                	add    BYTE PTR [eax],al
    1d2d:	05 15 7a 00 00       	add    eax,0x7a15
    1d32:	00 07                	add    BYTE PTR [edi],al
    1d34:	66 07                	popw   es
    1d36:	00 00                	add    BYTE PTR [eax],al
    1d38:	01 09                	add    DWORD PTR [ecx],ecx
    1d3a:	a8 00                	test   al,0x0
    1d3c:	00 00                	add    BYTE PTR [eax],al
    1d3e:	3c 15                	cmp    al,0x15
    1d40:	00 30                	add    BYTE PTR [eax],dh
    1d42:	10 00                	adc    BYTE PTR [eax],al
    1d44:	00 00                	add    BYTE PTR [eax],al
    1d46:	01 9c 28 01 00 00 08 	add    DWORD PTR [eax+ebp*1+0x8000001],ebx
    1d4d:	4f                   	dec    edi
    1d4e:	07                   	pop    es
    1d4f:	00 00                	add    BYTE PTR [eax],al
    1d51:	01 09                	add    DWORD PTR [ecx],ecx
    1d53:	a8 00                	test   al,0x0
    1d55:	00 00                	add    BYTE PTR [eax],al
    1d57:	02 91 00 09 6c 65    	add    dl,BYTE PTR [ecx+0x656c0900]
    1d5d:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1d5e:	00 01                	add    BYTE PTR [ecx],al
    1d60:	09 6f 00             	or     DWORD PTR [edi+0x0],ebp
    1d63:	00 00                	add    BYTE PTR [eax],al
    1d65:	02 91 04 08 5a 07    	add    dl,BYTE PTR [ecx+0x75a0804]
    1d6b:	00 00                	add    BYTE PTR [eax],al
    1d6d:	01 09                	add    DWORD PTR [ecx],ecx
    1d6f:	3a 00                	cmp    al,BYTE PTR [eax]
    1d71:	00 00                	add    BYTE PTR [eax],al
    1d73:	02 91 08 08 b5 08    	add    dl,BYTE PTR [ecx+0x8b50808]
    1d79:	00 00                	add    BYTE PTR [eax],al
    1d7b:	01 09                	add    DWORD PTR [ecx],ecx
    1d7d:	3a 00                	cmp    al,BYTE PTR [eax]
    1d7f:	00 00                	add    BYTE PTR [eax],al
    1d81:	02 91 0c 09 66 64    	add    dl,BYTE PTR [ecx+0x6466090c]
    1d87:	00 01                	add    BYTE PTR [ecx],al
    1d89:	09 3a                	or     DWORD PTR [edx],edi
    1d8b:	00 00                	add    BYTE PTR [eax],al
    1d8d:	00 02                	add    BYTE PTR [edx],al
    1d8f:	91                   	xchg   ecx,eax
    1d90:	10 08                	adc    BYTE PTR [eax],cl
    1d92:	5f                   	pop    edi
    1d93:	07                   	pop    es
    1d94:	00 00                	add    BYTE PTR [eax],al
    1d96:	01 09                	add    DWORD PTR [ecx],ecx
    1d98:	b0 00                	mov    al,0x0
    1d9a:	00 00                	add    BYTE PTR [eax],al
    1d9c:	02 91 14 00 0a 4b    	add    dl,BYTE PTR [ecx+0x4b0a0014]
    1da2:	00 00                	add    BYTE PTR [eax],al
    1da4:	00 06                	add    BYTE PTR [esi],al
    1da6:	34 56                	xor    al,0x56
    1da8:	00 00                	add    BYTE PTR [eax],al
    1daa:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
    1db0:	30 0a                	xor    BYTE PTR [edx],cl
    1db2:	b6 00                	mov    dh,0x0
    1db4:	00 00                	add    BYTE PTR [eax],al
    1db6:	06                   	push   es
    1db7:	35 56 00 00 00       	xor    eax,0x56
    1dbc:	05 03 8c 46 00       	add    eax,0x468c03
    1dc1:	30 0a                	xor    BYTE PTR [edx],cl
    1dc3:	62 01                	bound  eax,QWORD PTR [ecx]
    1dc5:	00 00                	add    BYTE PTR [eax],al
    1dc7:	06                   	push   es
    1dc8:	36                   	ss
    1dc9:	56                   	push   esi
    1dca:	00 00                	add    BYTE PTR [eax],al
    1dcc:	00 05 03 84 46 00    	add    BYTE PTR ds:0x468403,al
    1dd2:	30 0a                	xor    BYTE PTR [edx],cl
    1dd4:	54                   	push   esp
    1dd5:	00 00                	add    BYTE PTR [eax],al
    1dd7:	00 07                	add    BYTE PTR [edi],al
    1dd9:	44                   	inc    esp
    1dda:	8f 00                	pop    DWORD PTR [eax]
    1ddc:	00 00                	add    BYTE PTR [eax],al
    1dde:	05 03 94 46 00       	add    eax,0x469403
    1de3:	30 0a                	xor    BYTE PTR [edx],cl
    1de5:	28 00                	sub    BYTE PTR [eax],al
    1de7:	00 00                	add    BYTE PTR [eax],al
    1de9:	07                   	pop    es
    1dea:	45                   	inc    ebp
    1deb:	7d 01                	jge    1dee <sysEnter_Vector-0x12e212>
    1ded:	00 00                	add    BYTE PTR [eax],al
    1def:	05 03 90 46 00       	add    eax,0x469003
    1df4:	30 06                	xor    BYTE PTR [esi],al
    1df6:	04 aa                	add    al,0xaa
    1df8:	00 00                	add    BYTE PTR [eax],al
    1dfa:	00 00                	add    BYTE PTR [eax],al
    1dfc:	10 06                	adc    BYTE PTR [esi],al
    1dfe:	00 00                	add    BYTE PTR [eax],al
    1e00:	04 00                	add    al,0x0
    1e02:	2d 0a 00 00 04       	sub    eax,0x400000a
    1e07:	01 fb                	add    ebx,edi
    1e09:	00 00                	add    BYTE PTR [eax],al
    1e0b:	00 0c e2             	add    BYTE PTR [edx+eiz*8],cl
    1e0e:	07                   	pop    es
    1e0f:	00 00                	add    BYTE PTR [eax],al
    1e11:	79 00                	jns    1e13 <sysEnter_Vector-0x12e1ed>
    1e13:	00 00                	add    BYTE PTR [eax],al
    1e15:	4c                   	dec    esp
    1e16:	15 00 30 60 02       	adc    eax,0x2603000
    1e1b:	00 00                	add    BYTE PTR [eax],al
    1e1d:	01 0d 00 00 02 01    	add    DWORD PTR ds:0x1020000,ecx
    1e23:	06                   	push   es
    1e24:	64 00 00             	add    BYTE PTR fs:[eax],al
    1e27:	00 02                	add    BYTE PTR [edx],al
    1e29:	01 06                	add    DWORD PTR [esi],eax
    1e2b:	5d                   	pop    ebp
    1e2c:	00 00                	add    BYTE PTR [eax],al
    1e2e:	00 02                	add    BYTE PTR [edx],al
    1e30:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    1e36:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1e3d:	02 08                	add    cl,BYTE PTR [eax]
    1e3f:	05 00 00 00 00       	add    eax,0x0
    1e44:	02 01                	add    al,BYTE PTR [ecx]
    1e46:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    1e49:	00 00                	add    BYTE PTR [eax],al
    1e4b:	02 02                	add    al,BYTE PTR [edx]
    1e4d:	07                   	pop    es
    1e4e:	0e                   	push   cs
    1e4f:	00 00                	add    BYTE PTR [eax],al
    1e51:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    1e54:	00 00                	add    BYTE PTR [eax],al
    1e56:	00 02                	add    BYTE PTR [edx],al
    1e58:	34 61                	xor    al,0x61
    1e5a:	00 00                	add    BYTE PTR [eax],al
    1e5c:	00 02                	add    BYTE PTR [edx],al
    1e5e:	04 07                	add    al,0x7
    1e60:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1e63:	00 04 7c             	add    BYTE PTR [esp+edi*2],al
    1e66:	07                   	pop    es
    1e67:	00 00                	add    BYTE PTR [eax],al
    1e69:	02 37                	add    dh,BYTE PTR [edi]
    1e6b:	73 00                	jae    1e6d <sysEnter_Vector-0x12e193>
    1e6d:	00 00                	add    BYTE PTR [eax],al
    1e6f:	02 08                	add    cl,BYTE PTR [eax]
    1e71:	07                   	pop    es
    1e72:	34 00                	xor    al,0x0
    1e74:	00 00                	add    BYTE PTR [eax],al
    1e76:	04 6d                	add    al,0x6d
    1e78:	04 00                	add    al,0x0
    1e7a:	00 03                	add    BYTE PTR [ebx],al
    1e7c:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    1e7f:	00 00                	add    BYTE PTR [eax],al
    1e81:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1e88:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1e8b:	a2 00 00 00 02       	mov    ds:0x2000000,al
    1e90:	01 02                	add    DWORD PTR [edx],eax
    1e92:	9c                   	pushf  
    1e93:	00 00                	add    BYTE PTR [eax],al
    1e95:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1e98:	00 00                	add    BYTE PTR [eax],al
    1e9a:	00 04 2a             	add    BYTE PTR [edx+ebp*1],al
    1e9d:	85 00                	test   DWORD PTR [eax],eax
    1e9f:	00 00                	add    BYTE PTR [eax],al
    1ea1:	05 04 ab 00 00       	add    eax,0xab04
    1ea6:	00 06                	add    BYTE PTR [esi],al
    1ea8:	25 00 00 00 02       	and    eax,0x2000000
    1ead:	04 07                	add    al,0x7
    1eaf:	39 00                	cmp    DWORD PTR [eax],eax
    1eb1:	00 00                	add    BYTE PTR [eax],al
    1eb3:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1eb6:	e8 00 00 00 07       	call   7001ebb <sysEnter_Vector+0x6ed1ebb>
    1ebb:	04 05                	add    al,0x5
    1ebd:	04 25                	add    al,0x25
    1ebf:	00 00                	add    BYTE PTR [eax],al
    1ec1:	00 08                	add    BYTE PTR [eax],cl
    1ec3:	88 08                	mov    BYTE PTR [eax],cl
    1ec5:	00 00                	add    BYTE PTR [eax],al
    1ec7:	0c 05                	or     al,0x5
    1ec9:	17                   	pop    ss
    1eca:	f7 00 00 00 09 9f    	test   DWORD PTR [eax],0x9f090000
    1ed0:	07                   	pop    es
    1ed1:	00 00                	add    BYTE PTR [eax],al
    1ed3:	05 19 f7 00 00       	add    eax,0xf719
    1ed8:	00 00                	add    BYTE PTR [eax],al
    1eda:	09 f8                	or     eax,edi
    1edc:	06                   	push   es
    1edd:	00 00                	add    BYTE PTR [eax],al
    1edf:	05 19 f7 00 00       	add    eax,0xf719
    1ee4:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    1ee7:	80 08 00             	or     BYTE PTR [eax],0x0
    1eea:	00 05 1a be 00 00    	add    BYTE PTR ds:0xbe1a,al
    1ef0:	00 08                	add    BYTE PTR [eax],cl
    1ef2:	00 05 04 c6 00 00    	add    BYTE PTR ds:0xc604,al
    1ef8:	00 04 11             	add    BYTE PTR [ecx+edx*1],al
    1efb:	08 00                	or     BYTE PTR [eax],al
    1efd:	00 05 1b c6 00 00    	add    BYTE PTR ds:0xc61b,al
    1f03:	00 08                	add    BYTE PTR [eax],cl
    1f05:	bd 07 00 00 14       	mov    ebp,0x14000007
    1f0a:	06                   	push   es
    1f0b:	1b 39                	sbb    edi,DWORD PTR [ecx]
    1f0d:	01 00                	add    DWORD PTR [eax],eax
    1f0f:	00 09                	add    BYTE PTR [ecx],cl
    1f11:	b6 07                	mov    dh,0x7
    1f13:	00 00                	add    BYTE PTR [eax],al
    1f15:	06                   	push   es
    1f16:	1d fd 00 00 00       	sbb    eax,0xfd
    1f1b:	00 09                	add    BYTE PTR [ecx],cl
    1f1d:	76 07                	jbe    1f26 <sysEnter_Vector-0x12e0da>
    1f1f:	00 00                	add    BYTE PTR [eax],al
    1f21:	06                   	push   es
    1f22:	1e                   	push   ds
    1f23:	61                   	popa   
    1f24:	00 00                	add    BYTE PTR [eax],al
    1f26:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    1f29:	f3 08 00             	repz or BYTE PTR [eax],al
    1f2c:	00 06                	add    BYTE PTR [esi],al
    1f2e:	1f                   	pop    ds
    1f2f:	6a 01                	push   0x1
    1f31:	00 00                	add    BYTE PTR [eax],al
    1f33:	10 00                	adc    BYTE PTR [eax],al
    1f35:	08 ee                	or     dh,ch
    1f37:	07                   	pop    es
    1f38:	00 00                	add    BYTE PTR [eax],al
    1f3a:	0c 06                	or     al,0x6
    1f3c:	37                   	aaa    
    1f3d:	6a 01                	push   0x1
    1f3f:	00 00                	add    BYTE PTR [eax],al
    1f41:	09 db                	or     ebx,ebx
    1f43:	07                   	pop    es
    1f44:	00 00                	add    BYTE PTR [eax],al
    1f46:	06                   	push   es
    1f47:	39 c0                	cmp    eax,eax
    1f49:	00 00                	add    BYTE PTR [eax],al
    1f4b:	00 00                	add    BYTE PTR [eax],al
    1f4d:	09 fa                	or     edx,edi
    1f4f:	08 00                	or     BYTE PTR [eax],al
    1f51:	00 06                	add    BYTE PTR [esi],al
    1f53:	3a 73 02             	cmp    dh,BYTE PTR [ebx+0x2]
    1f56:	00 00                	add    BYTE PTR [eax],al
    1f58:	04 09                	add    al,0x9
    1f5a:	0b 09                	or     ecx,DWORD PTR [ecx]
    1f5c:	00 00                	add    BYTE PTR [eax],al
    1f5e:	06                   	push   es
    1f5f:	3b 6a 01             	cmp    ebp,DWORD PTR [edx+0x1]
    1f62:	00 00                	add    BYTE PTR [eax],al
    1f64:	08 00                	or     BYTE PTR [eax],al
    1f66:	05 04 39 01 00       	add    eax,0x13904
    1f6b:	00 08                	add    BYTE PTR [eax],cl
    1f6d:	cb                   	retf   
    1f6e:	07                   	pop    es
    1f6f:	00 00                	add    BYTE PTR [eax],al
    1f71:	0c 06                	or     al,0x6
    1f73:	22 a1 01 00 00 09    	and    ah,BYTE PTR [ecx+0x9000001]
    1f79:	97                   	xchg   edi,eax
    1f7a:	08 00                	or     BYTE PTR [eax],al
    1f7c:	00 06                	add    BYTE PTR [esi],al
    1f7e:	24 6a                	and    al,0x6a
    1f80:	01 00                	add    DWORD PTR [eax],eax
    1f82:	00 00                	add    BYTE PTR [eax],al
    1f84:	09 af 07 00 00 06    	or     DWORD PTR [edi+0x6000007],ebp
    1f8a:	25 a1 01 00 00       	and    eax,0x1a1
    1f8f:	04 09                	add    al,0x9
    1f91:	85 07                	test   DWORD PTR [edi],eax
    1f93:	00 00                	add    BYTE PTR [eax],al
    1f95:	06                   	push   es
    1f96:	26 3a 00             	cmp    al,BYTE PTR es:[eax]
    1f99:	00 00                	add    BYTE PTR [eax],al
    1f9b:	08 00                	or     BYTE PTR [eax],al
    1f9d:	05 04 08 01 00       	add    eax,0x10804
    1fa2:	00 08                	add    BYTE PTR [eax],cl
    1fa4:	fc                   	cld    
    1fa5:	08 00                	or     BYTE PTR [eax],al
    1fa7:	00 24 06             	add    BYTE PTR [esi+eax*1],ah
    1faa:	29 14 02             	sub    DWORD PTR [edx+eax*1],edx
    1fad:	00 00                	add    BYTE PTR [eax],al
    1faf:	09 5b 08             	or     DWORD PTR [ebx+0x8],ebx
    1fb2:	00 00                	add    BYTE PTR [eax],al
    1fb4:	06                   	push   es
    1fb5:	2b 61 00             	sub    esp,DWORD PTR [ecx+0x0]
    1fb8:	00 00                	add    BYTE PTR [eax],al
    1fba:	00 09                	add    BYTE PTR [ecx],cl
    1fbc:	ca 08 00             	retf   0x8
    1fbf:	00 06                	add    BYTE PTR [esi],al
    1fc1:	2c 4f                	sub    al,0x4f
    1fc3:	00 00                	add    BYTE PTR [eax],al
    1fc5:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    1fc8:	37                   	aaa    
    1fc9:	08 00                	or     BYTE PTR [eax],al
    1fcb:	00 06                	add    BYTE PTR [esi],al
    1fcd:	2d 4f 00 00 00       	sub    eax,0x4f
    1fd2:	06                   	push   es
    1fd3:	09 c4                	or     esp,eax
    1fd5:	08 00                	or     BYTE PTR [eax],al
    1fd7:	00 06                	add    BYTE PTR [esi],al
    1fd9:	2e                   	cs
    1fda:	61                   	popa   
    1fdb:	00 00                	add    BYTE PTR [eax],al
    1fdd:	00 08                	add    BYTE PTR [eax],cl
    1fdf:	09 0b                	or     DWORD PTR [ebx],ecx
    1fe1:	08 00                	or     BYTE PTR [eax],al
    1fe3:	00 06                	add    BYTE PTR [esi],al
    1fe5:	2f                   	das    
    1fe6:	61                   	popa   
    1fe7:	00 00                	add    BYTE PTR [eax],al
    1fe9:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    1fec:	b3 08                	mov    bl,0x8
    1fee:	00 00                	add    BYTE PTR [eax],al
    1ff0:	06                   	push   es
    1ff1:	30 61 00             	xor    BYTE PTR [ecx+0x0],ah
    1ff4:	00 00                	add    BYTE PTR [eax],al
    1ff6:	10 09                	adc    BYTE PTR [ecx],cl
    1ff8:	92                   	xchg   edx,eax
    1ff9:	08 00                	or     BYTE PTR [eax],al
    1ffb:	00 06                	add    BYTE PTR [esi],al
    1ffd:	31 5d 02             	xor    DWORD PTR [ebp+0x2],ebx
    2000:	00 00                	add    BYTE PTR [eax],al
    2002:	14 09                	adc    al,0x9
    2004:	c9                   	leave  
    2005:	07                   	pop    es
    2006:	00 00                	add    BYTE PTR [eax],al
    2008:	06                   	push   es
    2009:	32 70 01             	xor    dh,BYTE PTR [eax+0x1]
    200c:	00 00                	add    BYTE PTR [eax],al
    200e:	18 00                	sbb    BYTE PTR [eax],al
    2010:	08 26                	or     BYTE PTR [esi],ah
    2012:	08 00                	or     BYTE PTR [eax],al
    2014:	00 14 06             	add    BYTE PTR [esi+eax*1],dl
    2017:	3e                   	ds
    2018:	5d                   	pop    ebp
    2019:	02 00                	add    al,BYTE PTR [eax]
    201b:	00 09                	add    BYTE PTR [ecx],cl
    201d:	2d 09 00 00 06       	sub    eax,0x6000009
    2022:	40                   	inc    eax
    2023:	8d 02                	lea    eax,[edx]
    2025:	00 00                	add    BYTE PTR [eax],al
    2027:	00 09                	add    BYTE PTR [ecx],cl
    2029:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    202a:	07                   	pop    es
    202b:	00 00                	add    BYTE PTR [eax],al
    202d:	06                   	push   es
    202e:	41                   	inc    ecx
    202f:	8d 02                	lea    eax,[edx]
    2031:	00 00                	add    BYTE PTR [eax],al
    2033:	04 09                	add    al,0x9
    2035:	05 08 00 00 06       	add    eax,0x6000008
    203a:	42                   	inc    edx
    203b:	8d 02                	lea    eax,[edx]
    203d:	00 00                	add    BYTE PTR [eax],al
    203f:	08 09                	or     BYTE PTR [ecx],cl
    2041:	99                   	cdq    
    2042:	07                   	pop    es
    2043:	00 00                	add    BYTE PTR [eax],al
    2045:	06                   	push   es
    2046:	43                   	inc    ebx
    2047:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    2048:	02 00                	add    al,BYTE PTR [eax]
    204a:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    204d:	d4 07                	aam    0x7
    204f:	00 00                	add    BYTE PTR [eax],al
    2051:	06                   	push   es
    2052:	44                   	inc    esp
    2053:	d0 02                	rol    BYTE PTR [edx],1
    2055:	00 00                	add    BYTE PTR [eax],al
    2057:	10 00                	adc    BYTE PTR [eax],al
    2059:	05 04 63 02 00       	add    eax,0x26304
    205e:	00 06                	add    BYTE PTR [esi],al
    2060:	14 02                	adc    al,0x2
    2062:	00 00                	add    BYTE PTR [eax],al
    2064:	04 de                	add    al,0xde
    2066:	08 00                	or     BYTE PTR [eax],al
    2068:	00 06                	add    BYTE PTR [esi],al
    206a:	35 a7 01 00 00       	xor    eax,0x1a7
    206f:	05 04 a7 01 00       	add    eax,0x1a704
    2074:	00 0a                	add    BYTE PTR [edx],cl
    2076:	3a 00                	cmp    al,BYTE PTR [eax]
    2078:	00 00                	add    BYTE PTR [eax],al
    207a:	8d 02                	lea    eax,[edx]
    207c:	00 00                	add    BYTE PTR [eax],al
    207e:	0b 73 02             	or     esi,DWORD PTR [ebx+0x2]
    2081:	00 00                	add    BYTE PTR [eax],al
    2083:	0b 6a 01             	or     ebp,DWORD PTR [edx+0x1]
    2086:	00 00                	add    BYTE PTR [eax],al
    2088:	00 05 04 79 02 00    	add    BYTE PTR ds:0x27904,al
    208e:	00 0a                	add    BYTE PTR [edx],cl
    2090:	3a 00                	cmp    al,BYTE PTR [eax]
    2092:	00 00                	add    BYTE PTR [eax],al
    2094:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    2095:	02 00                	add    al,BYTE PTR [eax]
    2097:	00 0b                	add    BYTE PTR [ebx],cl
    2099:	73 02                	jae    209d <sysEnter_Vector-0x12df63>
    209b:	00 00                	add    BYTE PTR [eax],al
    209d:	0b 39                	or     edi,DWORD PTR [ecx]
    209f:	01 00                	add    DWORD PTR [eax],eax
    20a1:	00 00                	add    BYTE PTR [eax],al
    20a3:	05 04 93 02 00       	add    eax,0x29304
    20a8:	00 0a                	add    BYTE PTR [edx],cl
    20aa:	3a 00                	cmp    al,BYTE PTR [eax]
    20ac:	00 00                	add    BYTE PTR [eax],al
    20ae:	d0 02                	rol    BYTE PTR [edx],1
    20b0:	00 00                	add    BYTE PTR [eax],al
    20b2:	0b 73 02             	or     esi,DWORD PTR [ebx+0x2]
    20b5:	00 00                	add    BYTE PTR [eax],al
    20b7:	0b 6a 01             	or     ebp,DWORD PTR [edx+0x1]
    20ba:	00 00                	add    BYTE PTR [eax],al
    20bc:	0b 73 02             	or     esi,DWORD PTR [ebx+0x2]
    20bf:	00 00                	add    BYTE PTR [eax],al
    20c1:	0b 6a 01             	or     ebp,DWORD PTR [edx+0x1]
    20c4:	00 00                	add    BYTE PTR [eax],al
    20c6:	0b 61 00             	or     esp,DWORD PTR [ecx+0x0]
    20c9:	00 00                	add    BYTE PTR [eax],al
    20cb:	00 05 04 ad 02 00    	add    BYTE PTR ds:0x2ad04,al
    20d1:	00 04 ac             	add    BYTE PTR [esp+ebp*4],al
    20d4:	08 00                	or     BYTE PTR [eax],al
    20d6:	00 06                	add    BYTE PTR [esi],al
    20d8:	47                   	inc    edi
    20d9:	e1 02                	loope  20dd <sysEnter_Vector-0x12df23>
    20db:	00 00                	add    BYTE PTR [eax],al
    20dd:	08 ee                	or     dh,ch
    20df:	08 00                	or     BYTE PTR [eax],al
    20e1:	00 10                	add    BYTE PTR [eax],dl
    20e3:	06                   	push   es
    20e4:	4f                   	dec    edi
    20e5:	12 03                	adc    al,BYTE PTR [ebx]
    20e7:	00 00                	add    BYTE PTR [eax],al
    20e9:	09 1c 09             	or     DWORD PTR [ecx+ecx*1],ebx
    20ec:	00 00                	add    BYTE PTR [eax],al
    20ee:	06                   	push   es
    20ef:	51                   	push   ecx
    20f0:	c0 00 00             	rol    BYTE PTR [eax],0x0
    20f3:	00 00                	add    BYTE PTR [eax],al
    20f5:	09 14 09             	or     DWORD PTR [ecx+ecx*1],edx
    20f8:	00 00                	add    BYTE PTR [eax],al
    20fa:	06                   	push   es
    20fb:	52                   	push   edx
    20fc:	73 02                	jae    2100 <sysEnter_Vector-0x12df00>
    20fe:	00 00                	add    BYTE PTR [eax],al
    2100:	04 09                	add    al,0x9
    2102:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    2103:	08 00                	or     BYTE PTR [eax],al
    2105:	00 06                	add    BYTE PTR [esi],al
    2107:	53                   	push   ebx
    2108:	12 03                	adc    al,BYTE PTR [ebx]
    210a:	00 00                	add    BYTE PTR [eax],al
    210c:	08 00                	or     BYTE PTR [eax],al
    210e:	08 f5                	or     ch,dh
    2110:	07                   	pop    es
    2111:	00 00                	add    BYTE PTR [eax],al
    2113:	08 06                	or     BYTE PTR [esi],al
    2115:	49                   	dec    ecx
    2116:	37                   	aaa    
    2117:	03 00                	add    eax,DWORD PTR [eax]
    2119:	00 09                	add    BYTE PTR [ecx],cl
    211b:	fc                   	cld    
    211c:	02 00                	add    al,BYTE PTR [eax]
    211e:	00 06                	add    BYTE PTR [esi],al
    2120:	4b                   	dec    ebx
    2121:	61                   	popa   
    2122:	03 00                	add    eax,DWORD PTR [eax]
    2124:	00 00                	add    BYTE PTR [eax],al
    2126:	09 68 08             	or     DWORD PTR [eax+0x8],ebp
    2129:	00 00                	add    BYTE PTR [eax],al
    212b:	06                   	push   es
    212c:	4c                   	dec    esp
    212d:	85 03                	test   DWORD PTR [ebx],eax
    212f:	00 00                	add    BYTE PTR [eax],al
    2131:	04 00                	add    al,0x0
    2133:	0a 7a 00             	or     bh,BYTE PTR [edx+0x0]
    2136:	00 00                	add    BYTE PTR [eax],al
    2138:	55                   	push   ebp
    2139:	03 00                	add    eax,DWORD PTR [eax]
    213b:	00 0b                	add    BYTE PTR [ebx],cl
    213d:	55                   	push   ebp
    213e:	03 00                	add    eax,DWORD PTR [eax]
    2140:	00 0b                	add    BYTE PTR [ebx],cl
    2142:	c0 00 00             	rol    BYTE PTR [eax],0x0
    2145:	00 0b                	add    BYTE PTR [ebx],cl
    2147:	7a 00                	jp     2149 <sysEnter_Vector-0x12deb7>
    2149:	00 00                	add    BYTE PTR [eax],al
    214b:	0b 5b 03             	or     ebx,DWORD PTR [ebx+0x3]
    214e:	00 00                	add    BYTE PTR [eax],al
    2150:	00 05 04 e1 02 00    	add    BYTE PTR ds:0x2e104,al
    2156:	00 05 04 68 00 00    	add    BYTE PTR ds:0x6804,al
    215c:	00 05 04 37 03 00    	add    BYTE PTR ds:0x33704,al
    2162:	00 0a                	add    BYTE PTR [edx],cl
    2164:	7a 00                	jp     2166 <sysEnter_Vector-0x12de9a>
    2166:	00 00                	add    BYTE PTR [eax],al
    2168:	85 03                	test   DWORD PTR [ebx],eax
    216a:	00 00                	add    BYTE PTR [eax],al
    216c:	0b 55 03             	or     edx,DWORD PTR [ebp+0x3]
    216f:	00 00                	add    BYTE PTR [eax],al
    2171:	0b a5 00 00 00 0b    	or     esp,DWORD PTR [ebp+0xb000000]
    2177:	7a 00                	jp     2179 <sysEnter_Vector-0x12de87>
    2179:	00 00                	add    BYTE PTR [eax],al
    217b:	0b 5b 03             	or     ebx,DWORD PTR [ebx+0x3]
    217e:	00 00                	add    BYTE PTR [eax],al
    2180:	00 05 04 67 03 00    	add    BYTE PTR ds:0x36704,al
    2186:	00 04 41             	add    BYTE PTR [ecx+eax*2],al
    2189:	08 00                	or     BYTE PTR [eax],al
    218b:	00 06                	add    BYTE PTR [esi],al
    218d:	4d                   	dec    ebp
    218e:	12 03                	adc    al,BYTE PTR [ebx]
    2190:	00 00                	add    BYTE PTR [eax],al
    2192:	0c 1a                	or     al,0x1a
    2194:	08 00                	or     BYTE PTR [eax],al
    2196:	00 01                	add    BYTE PTR [ecx],al
    2198:	12 7a 00             	adc    bh,BYTE PTR [edx+0x0]
    219b:	00 00                	add    BYTE PTR [eax],al
    219d:	4c                   	dec    esp
    219e:	15 00 30 2c 00       	adc    eax,0x2c3000
    21a3:	00 00                	add    BYTE PTR [eax],al
    21a5:	01 9c e8 03 00 00 0d 	add    DWORD PTR [eax+ebp*8+0xd000003],ebx
    21ac:	6e                   	outs   dx,BYTE PTR ds:[esi]
    21ad:	08 00                	or     BYTE PTR [eax],al
    21af:	00 01                	add    BYTE PTR [ecx],al
    21b1:	12 55 03             	adc    dl,BYTE PTR [ebp+0x3]
    21b4:	00 00                	add    BYTE PTR [eax],al
    21b6:	02 91 00 0d 8e 03    	add    dl,BYTE PTR [ecx+0x38e0d00]
    21bc:	00 00                	add    BYTE PTR [eax],al
    21be:	01 12                	add    DWORD PTR [edx],edx
    21c0:	c0 00 00             	rol    BYTE PTR [eax],0x0
    21c3:	00 02                	add    BYTE PTR [edx],al
    21c5:	91                   	xchg   ecx,eax
    21c6:	04 0d                	add    al,0xd
    21c8:	b8 03 00 00 01       	mov    eax,0x1000003
    21cd:	12 7a 00             	adc    bh,BYTE PTR [edx+0x0]
    21d0:	00 00                	add    BYTE PTR [eax],al
    21d2:	02 91 08 0d bb 08    	add    dl,BYTE PTR [ecx+0x8bb0d08]
    21d8:	00 00                	add    BYTE PTR [eax],al
    21da:	01 12                	add    DWORD PTR [edx],edx
    21dc:	5b                   	pop    ebx
    21dd:	03 00                	add    eax,DWORD PTR [eax]
    21df:	00 02                	add    BYTE PTR [edx],al
    21e1:	91                   	xchg   ecx,eax
    21e2:	0c 00                	or     al,0x0
    21e4:	0c 73                	or     al,0x73
    21e6:	08 00                	or     BYTE PTR [eax],al
    21e8:	00 01                	add    BYTE PTR [ecx],al
    21ea:	17                   	pop    ss
    21eb:	7a 00                	jp     21ed <sysEnter_Vector-0x12de13>
    21ed:	00 00                	add    BYTE PTR [eax],al
    21ef:	78 15                	js     2206 <sysEnter_Vector-0x12ddfa>
    21f1:	00 30                	add    BYTE PTR [eax],dh
    21f3:	26 00 00             	add    BYTE PTR es:[eax],al
    21f6:	00 01                	add    BYTE PTR [ecx],al
    21f8:	9c                   	pushf  
    21f9:	3a 04 00             	cmp    al,BYTE PTR [eax+eax*1]
    21fc:	00 0d 6e 08 00 00    	add    BYTE PTR ds:0x86e,cl
    2202:	01 17                	add    DWORD PTR [edi],edx
    2204:	55                   	push   ebp
    2205:	03 00                	add    eax,DWORD PTR [eax]
    2207:	00 02                	add    BYTE PTR [edx],al
    2209:	91                   	xchg   ecx,eax
    220a:	00 0d 8e 03 00 00    	add    BYTE PTR ds:0x38e,cl
    2210:	01 17                	add    DWORD PTR [edi],edx
    2212:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    2213:	00 00                	add    BYTE PTR [eax],al
    2215:	00 02                	add    BYTE PTR [edx],al
    2217:	91                   	xchg   ecx,eax
    2218:	04 0d                	add    al,0xd
    221a:	b8 03 00 00 01       	mov    eax,0x1000003
    221f:	17                   	pop    ss
    2220:	7a 00                	jp     2222 <sysEnter_Vector-0x12ddde>
    2222:	00 00                	add    BYTE PTR [eax],al
    2224:	02 91 08 0d bb 08    	add    dl,BYTE PTR [ecx+0x8bb0d08]
    222a:	00 00                	add    BYTE PTR [eax],al
    222c:	01 17                	add    DWORD PTR [edi],edx
    222e:	5b                   	pop    ebx
    222f:	03 00                	add    eax,DWORD PTR [eax]
    2231:	00 02                	add    BYTE PTR [edx],al
    2233:	91                   	xchg   ecx,eax
    2234:	0c 00                	or     al,0x0
    2236:	0e                   	push   cs
    2237:	61                   	popa   
    2238:	08 00                	or     BYTE PTR [eax],al
    223a:	00 01                	add    BYTE PTR [ecx],al
    223c:	1c 9e                	sbb    al,0x9e
    223e:	15 00 30 37 01       	adc    eax,0x1373000
    2243:	00 00                	add    BYTE PTR [eax],al
    2245:	01 9c 05 05 00 00 0f 	add    DWORD PTR [ebp+eax*1+0xf000005],ebx
    224c:	72 6f                	jb     22bd <sysEnter_Vector-0x12dd43>
    224e:	77 00                	ja     2250 <sysEnter_Vector-0x12ddb0>
    2250:	01 1c 3a             	add    DWORD PTR [edx+edi*1],ebx
    2253:	00 00                	add    BYTE PTR [eax],al
    2255:	00 02                	add    BYTE PTR [edx],al
    2257:	91                   	xchg   ecx,eax
    2258:	00 0f                	add    BYTE PTR [edi],cl
    225a:	63 6f 6c             	arpl   WORD PTR [edi+0x6c],bp
    225d:	00 01                	add    BYTE PTR [ecx],al
    225f:	1c 3a                	sbb    al,0x3a
    2261:	00 00                	add    BYTE PTR [eax],al
    2263:	00 02                	add    BYTE PTR [edx],al
    2265:	91                   	xchg   ecx,eax
    2266:	04 10                	add    al,0x10
    2268:	aa                   	stos   BYTE PTR es:[edi],al
    2269:	07                   	pop    es
    226a:	00 00                	add    BYTE PTR [eax],al
    226c:	01 1e                	add    DWORD PTR [esi],ebx
    226e:	05 05 00 00 02       	add    eax,0x2000005
    2273:	91                   	xchg   ecx,eax
    2274:	56                   	push   esi
    2275:	10 23                	adc    BYTE PTR [ebx],ah
    2277:	09 00                	or     DWORD PTR [eax],eax
    2279:	00 01                	add    BYTE PTR [ecx],al
    227b:	1f                   	pop    ds
    227c:	15 05 00 00 02       	adc    eax,0x2000005
    2281:	91                   	xchg   ecx,eax
    2282:	53                   	push   ebx
    2283:	10 8f 07 00 00 01    	adc    BYTE PTR [edi+0x1000007],cl
    2289:	1f                   	pop    ds
    228a:	15 05 00 00 02       	adc    eax,0x2000005
    228f:	91                   	xchg   ecx,eax
    2290:	50                   	push   eax
    2291:	10 53 08             	adc    BYTE PTR [ebx+0x8],dl
    2294:	00 00                	add    BYTE PTR [eax],al
    2296:	01 20                	add    DWORD PTR [eax],esp
    2298:	3a 00                	cmp    al,BYTE PTR [eax]
    229a:	00 00                	add    BYTE PTR [eax],al
    229c:	02 91 6c 11 3e 07    	add    dl,BYTE PTR [ecx+0x73e116c]
    22a2:	00 00                	add    BYTE PTR [eax],al
    22a4:	01 23                	add    DWORD PTR [ebx],esp
    22a6:	3a 00                	cmp    al,BYTE PTR [eax]
    22a8:	00 00                	add    BYTE PTR [eax],al
    22aa:	b4 04                	mov    ah,0x4
    22ac:	00 00                	add    BYTE PTR [eax],al
    22ae:	12 00                	adc    al,BYTE PTR [eax]
    22b0:	13 0a                	adc    ecx,DWORD PTR [edx]
    22b2:	16                   	push   ss
    22b3:	00 30                	add    BYTE PTR [eax],dh
    22b5:	3d 00 00 00 d0       	cmp    eax,0xd0000000
    22ba:	04 00                	add    al,0x0
    22bc:	00 14 63             	add    BYTE PTR [ebx+eiz*2],dl
    22bf:	6e                   	outs   dx,BYTE PTR ds:[esi]
    22c0:	74 00                	je     22c2 <sysEnter_Vector-0x12dd3e>
    22c2:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
    22c8:	02 91 68 00 13 55    	add    dl,BYTE PTR [ecx+0x55130068]
    22ce:	16                   	push   ss
    22cf:	00 30                	add    BYTE PTR [eax],dh
    22d1:	3d 00 00 00 ec       	cmp    eax,0xec000000
    22d6:	04 00                	add    al,0x0
    22d8:	00 14 63             	add    BYTE PTR [ebx+eiz*2],dl
    22db:	6e                   	outs   dx,BYTE PTR ds:[esi]
    22dc:	74 00                	je     22de <sysEnter_Vector-0x12dd22>
    22de:	01 33                	add    DWORD PTR [ebx],esi
    22e0:	3a 00                	cmp    al,BYTE PTR [eax]
    22e2:	00 00                	add    BYTE PTR [eax],al
    22e4:	02 91 64 00 15 a0    	add    dl,BYTE PTR [ecx-0x5feaff9c]
    22ea:	16                   	push   ss
    22eb:	00 30                	add    BYTE PTR [eax],dh
    22ed:	20 00                	and    BYTE PTR [eax],al
    22ef:	00 00                	add    BYTE PTR [eax],al
    22f1:	14 63                	adc    al,0x63
    22f3:	6e                   	outs   dx,BYTE PTR ds:[esi]
    22f4:	74 00                	je     22f6 <sysEnter_Vector-0x12dd0a>
    22f6:	01 39                	add    DWORD PTR [ecx],edi
    22f8:	3a 00                	cmp    al,BYTE PTR [eax]
    22fa:	00 00                	add    BYTE PTR [eax],al
    22fc:	02 91 60 00 00 16    	add    dl,BYTE PTR [ecx+0x16000060]
    2302:	25 00 00 00 15       	and    eax,0x15000000
    2307:	05 00 00 17 b7       	add    eax,0xb7170000
    230c:	00 00                	add    BYTE PTR [eax],al
    230e:	00 09                	add    BYTE PTR [ecx],cl
    2310:	00 16                	add    BYTE PTR [esi],dl
    2312:	25 00 00 00 25       	and    eax,0x25000000
    2317:	05 00 00 17 b7       	add    eax,0xb7170000
    231c:	00 00                	add    BYTE PTR [eax],al
    231e:	00 02                	add    BYTE PTR [edx],al
    2320:	00 18                	add    BYTE PTR [eax],bl
    2322:	02 09                	add    cl,BYTE PTR [ecx]
    2324:	00 00                	add    BYTE PTR [eax],al
    2326:	01 42 d5             	add    DWORD PTR [edx-0x2b],eax
    2329:	16                   	push   ss
    232a:	00 30                	add    BYTE PTR [eax],dh
    232c:	84 00                	test   BYTE PTR [eax],al
    232e:	00 00                	add    BYTE PTR [eax],al
    2330:	01 9c 64 05 00 00 10 	add    DWORD PTR [esp+eiz*2+0x10000005],ebx
    2337:	aa                   	stos   BYTE PTR es:[edi],al
    2338:	07                   	pop    es
    2339:	00 00                	add    BYTE PTR [eax],al
    233b:	01 44 64 05          	add    DWORD PTR [esp+eiz*2+0x5],eax
    233f:	00 00                	add    BYTE PTR [eax],al
    2341:	02 91 67 10 53 08    	add    dl,BYTE PTR [ecx+0x8531067]
    2347:	00 00                	add    BYTE PTR [eax],al
    2349:	01 45 3a             	add    DWORD PTR [ebp+0x3a],eax
    234c:	00 00                	add    BYTE PTR [eax],al
    234e:	00 02                	add    BYTE PTR [edx],al
    2350:	91                   	xchg   ecx,eax
    2351:	6c                   	ins    BYTE PTR es:[edi],dx
    2352:	19 3e                	sbb    DWORD PTR [esi],edi
    2354:	07                   	pop    es
    2355:	00 00                	add    BYTE PTR [eax],al
    2357:	01 23                	add    DWORD PTR [ebx],esp
    2359:	3a 00                	cmp    al,BYTE PTR [eax]
    235b:	00 00                	add    BYTE PTR [eax],al
    235d:	12 00                	adc    al,BYTE PTR [eax]
    235f:	00 16                	add    BYTE PTR [esi],dl
    2361:	25 00 00 00 74       	and    eax,0x74000000
    2366:	05 00 00 17 b7       	add    eax,0xb7170000
    236b:	00 00                	add    BYTE PTR [eax],al
    236d:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2370:	1a a0 08 00 00 01    	sbb    ah,BYTE PTR [eax+0x1000008]
    2376:	54                   	push   esp
    2377:	59                   	pop    ecx
    2378:	17                   	pop    ss
    2379:	00 30                	add    BYTE PTR [eax],dh
    237b:	53                   	push   ebx
    237c:	00 00                	add    BYTE PTR [eax],al
    237e:	00 01                	add    BYTE PTR [ecx],al
    2380:	9c                   	pushf  
    2381:	1b 4b 00             	sbb    ecx,DWORD PTR [ebx+0x0]
    2384:	00 00                	add    BYTE PTR [eax],al
    2386:	07                   	pop    es
    2387:	34 56                	xor    al,0x56
    2389:	00 00                	add    BYTE PTR [eax],al
    238b:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
    2391:	30 1b                	xor    BYTE PTR [ebx],bl
    2393:	b6 00                	mov    dh,0x0
    2395:	00 00                	add    BYTE PTR [eax],al
    2397:	07                   	pop    es
    2398:	35 56 00 00 00       	xor    eax,0x56
    239d:	05 03 8c 46 00       	add    eax,0x468c03
    23a2:	30 1b                	xor    BYTE PTR [ebx],bl
    23a4:	62 01                	bound  eax,QWORD PTR [ecx]
    23a6:	00 00                	add    BYTE PTR [eax],al
    23a8:	07                   	pop    es
    23a9:	36                   	ss
    23aa:	56                   	push   esi
    23ab:	00 00                	add    BYTE PTR [eax],al
    23ad:	00 05 03 84 46 00    	add    BYTE PTR ds:0x468403,al
    23b3:	30 1b                	xor    BYTE PTR [ebx],bl
    23b5:	54                   	push   esp
    23b6:	00 00                	add    BYTE PTR [eax],al
    23b8:	00 08                	add    BYTE PTR [eax],cl
    23ba:	44                   	inc    esp
    23bb:	9a 00 00 00 05 03 94 	call   0x9403:0x5000000
    23c2:	46                   	inc    esi
    23c3:	00 30                	add    BYTE PTR [eax],dh
    23c5:	1b 28                	sbb    ebp,DWORD PTR [eax]
    23c7:	00 00                	add    BYTE PTR [eax],al
    23c9:	00 08                	add    BYTE PTR [eax],cl
    23cb:	45                   	inc    ebp
    23cc:	da 05 00 00 05 03    	fiadd  DWORD PTR ds:0x3050000
    23d2:	90                   	nop
    23d3:	46                   	inc    esi
    23d4:	00 30                	add    BYTE PTR [eax],dh
    23d6:	05 04 c0 00 00       	add    eax,0xc004
    23db:	00 1b                	add    BYTE PTR [ebx],bl
    23dd:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    23de:	08 00                	or     BYTE PTR [eax],al
    23e0:	00 01                	add    BYTE PTR [ecx],al
    23e2:	0e                   	push   cs
    23e3:	8b 03                	mov    eax,DWORD PTR [ebx]
    23e5:	00 00                	add    BYTE PTR [eax],al
    23e7:	05 03 a0 46 00       	add    eax,0x46a003
    23ec:	30 1b                	xor    BYTE PTR [ebx],bl
    23ee:	d1 08                	ror    DWORD PTR [eax],1
    23f0:	00 00                	add    BYTE PTR [eax],al
    23f2:	01 0f                	add    DWORD PTR [edi],ecx
    23f4:	68 02 00 00 05       	push   0x5000002
    23f9:	03 e0                	add    esp,eax
    23fb:	44                   	inc    esp
    23fc:	00 30                	add    BYTE PTR [eax],dh
    23fe:	1b e6                	sbb    esp,esi
    2400:	08 00                	or     BYTE PTR [eax],al
    2402:	00 01                	add    BYTE PTR [ecx],al
    2404:	10 d6                	adc    dh,dl
    2406:	02 00                	add    al,BYTE PTR [eax]
    2408:	00 05 03 a8 46 00    	add    BYTE PTR ds:0x46a803,al
    240e:	30 00                	xor    BYTE PTR [eax],al
    2410:	b8 01 00 00 04       	mov    eax,0x4000001
    2415:	00 ab 0b 00 00 04    	add    BYTE PTR [ebx+0x400000b],ch
    241b:	01 fb                	add    ebx,edi
    241d:	00 00                	add    BYTE PTR [eax],al
    241f:	00 0c 4f             	add    BYTE PTR [edi+ecx*2],cl
    2422:	09 00                	or     DWORD PTR [eax],eax
    2424:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    2427:	00 00                	add    BYTE PTR [eax],al
    2429:	ac                   	lods   al,BYTE PTR ds:[esi]
    242a:	17                   	pop    ss
    242b:	00 30                	add    BYTE PTR [eax],dh
    242d:	eb 00                	jmp    242f <sysEnter_Vector-0x12dbd1>
    242f:	00 00                	add    BYTE PTR [eax],al
    2431:	54                   	push   esp
    2432:	0e                   	push   cs
    2433:	00 00                	add    BYTE PTR [eax],al
    2435:	02 01                	add    al,BYTE PTR [ecx]
    2437:	06                   	push   es
    2438:	64 00 00             	add    BYTE PTR fs:[eax],al
    243b:	00 02                	add    BYTE PTR [edx],al
    243d:	01 06                	add    DWORD PTR [esi],eax
    243f:	5d                   	pop    ebp
    2440:	00 00                	add    BYTE PTR [eax],al
    2442:	00 02                	add    BYTE PTR [edx],al
    2444:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    244a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2451:	02 08                	add    cl,BYTE PTR [eax]
    2453:	05 00 00 00 00       	add    eax,0x0
    2458:	02 01                	add    al,BYTE PTR [ecx]
    245a:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    245d:	00 00                	add    BYTE PTR [eax],al
    245f:	02 02                	add    al,BYTE PTR [edx]
    2461:	07                   	pop    es
    2462:	0e                   	push   cs
    2463:	00 00                	add    BYTE PTR [eax],al
    2465:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    2468:	00 00                	add    BYTE PTR [eax],al
    246a:	00 02                	add    BYTE PTR [edx],al
    246c:	34 61                	xor    al,0x61
    246e:	00 00                	add    BYTE PTR [eax],al
    2470:	00 02                	add    BYTE PTR [edx],al
    2472:	04 07                	add    al,0x7
    2474:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2477:	00 02                	add    BYTE PTR [edx],al
    2479:	08 07                	or     BYTE PTR [edi],al
    247b:	34 00                	xor    al,0x0
    247d:	00 00                	add    BYTE PTR [eax],al
    247f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2486:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2489:	a2 00 00 00 02       	mov    ds:0x2000000,al
    248e:	01 02                	add    DWORD PTR [edx],eax
    2490:	9c                   	pushf  
    2491:	00 00                	add    BYTE PTR [eax],al
    2493:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2496:	00 00                	add    BYTE PTR [eax],al
    2498:	00 03                	add    BYTE PTR [ebx],al
    249a:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    249d:	00 00                	add    BYTE PTR [eax],al
    249f:	05 04 95 00 00       	add    eax,0x9504
    24a4:	00 06                	add    BYTE PTR [esi],al
    24a6:	25 00 00 00 02       	and    eax,0x2000000
    24ab:	04 07                	add    al,0x7
    24ad:	39 00                	cmp    DWORD PTR [eax],eax
    24af:	00 00                	add    BYTE PTR [eax],al
    24b1:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    24b4:	e8 00 00 00 05       	call   50024b9 <sysEnter_Vector+0x4ed24b9>
    24b9:	04 25                	add    al,0x25
    24bb:	00 00                	add    BYTE PTR [eax],al
    24bd:	00 07                	add    BYTE PTR [edi],al
    24bf:	48                   	dec    eax
    24c0:	09 00                	or     DWORD PTR [eax],eax
    24c2:	00 01                	add    BYTE PTR [ecx],al
    24c4:	1d a8 00 00 00       	sbb    eax,0xa8
    24c9:	ac                   	lods   al,BYTE PTR ds:[esi]
    24ca:	17                   	pop    ss
    24cb:	00 30                	add    BYTE PTR [eax],dh
    24cd:	3e 00 00             	add    BYTE PTR ds:[eax],al
    24d0:	00 01                	add    BYTE PTR [ecx],al
    24d2:	9c                   	pushf  
    24d3:	e4 00                	in     al,0x0
    24d5:	00 00                	add    BYTE PTR [eax],al
    24d7:	08 14 07             	or     BYTE PTR [edi+eax*1],dl
    24da:	00 00                	add    BYTE PTR [eax],al
    24dc:	01 1d a8 00 00 00    	add    DWORD PTR ds:0xa8,ebx
    24e2:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    24e8:	63 00                	arpl   WORD PTR [eax],ax
    24ea:	01 1d 8f 00 00 00    	add    DWORD PTR ds:0x8f,ebx
    24f0:	02 91 04 00 07 40    	add    dl,BYTE PTR [ecx+0x40070004]
    24f6:	09 00                	or     DWORD PTR [eax],eax
    24f8:	00 01                	add    BYTE PTR [ecx],al
    24fa:	23 a8 00 00 00 ea    	and    ebp,DWORD PTR [eax-0x16000000]
    2500:	17                   	pop    ss
    2501:	00 30                	add    BYTE PTR [eax],dh
    2503:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2506:	00 01                	add    BYTE PTR [ecx],al
    2508:	9c                   	pushf  
    2509:	1a 01                	sbb    al,BYTE PTR [ecx]
    250b:	00 00                	add    BYTE PTR [eax],al
    250d:	08 14 07             	or     BYTE PTR [edi+eax*1],dl
    2510:	00 00                	add    BYTE PTR [eax],al
    2512:	01 23                	add    DWORD PTR [ebx],esp
    2514:	a8 00                	test   al,0x0
    2516:	00 00                	add    BYTE PTR [eax],al
    2518:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    251e:	63 00                	arpl   WORD PTR [eax],ax
    2520:	01 23                	add    DWORD PTR [ebx],esp
    2522:	8f 00                	pop    DWORD PTR [eax]
    2524:	00 00                	add    BYTE PTR [eax],al
    2526:	02 91 04 00 0a 34    	add    dl,BYTE PTR [ecx+0x340a0004]
    252c:	09 00                	or     DWORD PTR [eax],eax
    252e:	00 01                	add    BYTE PTR [ecx],al
    2530:	29 28                	sub    DWORD PTR [eax],ebp
    2532:	18 00                	sbb    BYTE PTR [eax],al
    2534:	30 6f 00             	xor    BYTE PTR [edi+0x0],ch
    2537:	00 00                	add    BYTE PTR [eax],al
    2539:	01 9c 60 01 00 00 09 	add    DWORD PTR [eax+eiz*2+0x9000001],ebx
    2540:	70 00                	jo     2542 <sysEnter_Vector-0x12dabe>
    2542:	01 29                	add    DWORD PTR [ecx],ebp
    2544:	a8 00                	test   al,0x0
    2546:	00 00                	add    BYTE PTR [eax],al
    2548:	02 91 00 09 71 00    	add    dl,BYTE PTR [ecx+0x710900]
    254e:	01 29                	add    DWORD PTR [ecx],ebp
    2550:	a8 00                	test   al,0x0
    2552:	00 00                	add    BYTE PTR [eax],al
    2554:	02 91 04 0b 63 00    	add    dl,BYTE PTR [ecx+0x630b04]
    255a:	01 2a                	add    DWORD PTR [edx],ebp
    255c:	3a 00                	cmp    al,BYTE PTR [eax]
    255e:	00 00                	add    BYTE PTR [eax],al
    2560:	02 91 74 0b 64 00    	add    dl,BYTE PTR [ecx+0x640b74]
    2566:	01 2a                	add    DWORD PTR [edx],ebp
    2568:	3a 00                	cmp    al,BYTE PTR [eax]
    256a:	00 00                	add    BYTE PTR [eax],al
    256c:	02 91 70 00 0c 4b    	add    dl,BYTE PTR [ecx+0x4b0c0070]
    2572:	00 00                	add    BYTE PTR [eax],al
    2574:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2577:	56                   	push   esi
    2578:	00 00                	add    BYTE PTR [eax],al
    257a:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
    2580:	30 0c b6             	xor    BYTE PTR [esi+esi*4],cl
    2583:	00 00                	add    BYTE PTR [eax],al
    2585:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    258c:	05 03 8c 46 00       	add    eax,0x468c03
    2591:	30 0c 62             	xor    BYTE PTR [edx+eiz*2],cl
    2594:	01 00                	add    DWORD PTR [eax],eax
    2596:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    2599:	56                   	push   esi
    259a:	00 00                	add    BYTE PTR [eax],al
    259c:	00 05 03 84 46 00    	add    BYTE PTR ds:0x468403,al
    25a2:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
    25a5:	00 00                	add    BYTE PTR [eax],al
    25a7:	00 05 44 84 00 00    	add    BYTE PTR ds:0x8444,al
    25ad:	00 05 03 94 46 00    	add    BYTE PTR ds:0x469403,al
    25b3:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
    25b6:	00 00                	add    BYTE PTR [eax],al
    25b8:	00 05 45 b5 01 00    	add    BYTE PTR ds:0x1b545,al
    25be:	00 05 03 90 46 00    	add    BYTE PTR ds:0x469003,al
    25c4:	30 05 04 a8 00 00    	xor    BYTE PTR ds:0xa804,al
    25ca:	00 00                	add    BYTE PTR [eax],al
    25cc:	77 01                	ja     25cf <sysEnter_Vector-0x12da31>
    25ce:	00 00                	add    BYTE PTR [eax],al
    25d0:	04 00                	add    al,0x0
    25d2:	66                   	data16
    25d3:	0c 00                	or     al,0x0
    25d5:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    25d8:	fb                   	sti    
    25d9:	00 00                	add    BYTE PTR [eax],al
    25db:	00 0c 6b             	add    BYTE PTR [ebx+ebp*2],cl
    25de:	09 00                	or     DWORD PTR [eax],eax
    25e0:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    25e3:	00 00                	add    BYTE PTR [eax],al
    25e5:	98                   	cwde   
    25e6:	18 00                	sbb    BYTE PTR [eax],al
    25e8:	30 5e 00             	xor    BYTE PTR [esi+0x0],bl
    25eb:	00 00                	add    BYTE PTR [eax],al
    25ed:	2e 0f 00 00          	sldt   WORD PTR cs:[eax]
    25f1:	02 01                	add    al,BYTE PTR [ecx]
    25f3:	06                   	push   es
    25f4:	64 00 00             	add    BYTE PTR fs:[eax],al
    25f7:	00 02                	add    BYTE PTR [edx],al
    25f9:	01 06                	add    DWORD PTR [esi],eax
    25fb:	5d                   	pop    ebp
    25fc:	00 00                	add    BYTE PTR [eax],al
    25fe:	00 02                	add    BYTE PTR [edx],al
    2600:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    2606:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    260d:	02 08                	add    cl,BYTE PTR [eax]
    260f:	05 00 00 00 00       	add    eax,0x0
    2614:	02 01                	add    al,BYTE PTR [ecx]
    2616:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2619:	00 00                	add    BYTE PTR [eax],al
    261b:	02 02                	add    al,BYTE PTR [edx]
    261d:	07                   	pop    es
    261e:	0e                   	push   cs
    261f:	00 00                	add    BYTE PTR [eax],al
    2621:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    2624:	00 00                	add    BYTE PTR [eax],al
    2626:	00 02                	add    BYTE PTR [edx],al
    2628:	34 61                	xor    al,0x61
    262a:	00 00                	add    BYTE PTR [eax],al
    262c:	00 02                	add    BYTE PTR [edx],al
    262e:	04 07                	add    al,0x7
    2630:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2633:	00 02                	add    BYTE PTR [edx],al
    2635:	08 07                	or     BYTE PTR [edi],al
    2637:	34 00                	xor    al,0x0
    2639:	00 00                	add    BYTE PTR [eax],al
    263b:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2642:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2645:	a2 00 00 00 02       	mov    ds:0x2000000,al
    264a:	01 02                	add    DWORD PTR [edx],eax
    264c:	9c                   	pushf  
    264d:	00 00                	add    BYTE PTR [eax],al
    264f:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2652:	00 00                	add    BYTE PTR [eax],al
    2654:	00 03                	add    BYTE PTR [ebx],al
    2656:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    2659:	00 00                	add    BYTE PTR [eax],al
    265b:	05 04 95 00 00       	add    eax,0x9504
    2660:	00 06                	add    BYTE PTR [esi],al
    2662:	25 00 00 00 02       	and    eax,0x2000000
    2667:	04 07                	add    al,0x7
    2669:	39 00                	cmp    DWORD PTR [eax],eax
    266b:	00 00                	add    BYTE PTR [eax],al
    266d:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2670:	e8 00 00 00 05       	call   5002675 <sysEnter_Vector+0x4ed2675>
    2675:	04 25                	add    al,0x25
    2677:	00 00                	add    BYTE PTR [eax],al
    2679:	00 07                	add    BYTE PTR [edi],al
    267b:	64 09 00             	or     DWORD PTR fs:[eax],eax
    267e:	00 01                	add    BYTE PTR [ecx],al
    2680:	18 3a                	sbb    BYTE PTR [edx],bh
    2682:	00 00                	add    BYTE PTR [eax],al
    2684:	00 98 18 00 30 5e    	add    BYTE PTR [eax+0x5e300018],bl
    268a:	00 00                	add    BYTE PTR [eax],al
    268c:	00 01                	add    BYTE PTR [ecx],al
    268e:	9c                   	pushf  
    268f:	14 01                	adc    al,0x1
    2691:	00 00                	add    BYTE PTR [eax],al
    2693:	08 70 31             	or     BYTE PTR [eax+0x31],dh
    2696:	00 01                	add    BYTE PTR [ecx],al
    2698:	18 8f 00 00 00 02    	sbb    BYTE PTR [edi+0x2000000],cl
    269e:	91                   	xchg   ecx,eax
    269f:	00 08                	add    BYTE PTR [eax],cl
    26a1:	70 32                	jo     26d5 <sysEnter_Vector-0x12d92b>
    26a3:	00 01                	add    BYTE PTR [ecx],al
    26a5:	18 8f 00 00 00 02    	sbb    BYTE PTR [edi+0x2000000],cl
    26ab:	91                   	xchg   ecx,eax
    26ac:	04 09                	add    al,0x9
    26ae:	73 31                	jae    26e1 <sysEnter_Vector-0x12d91f>
    26b0:	00 01                	add    BYTE PTR [ecx],al
    26b2:	1a 14 01             	sbb    dl,BYTE PTR [ecx+eax*1]
    26b5:	00 00                	add    BYTE PTR [eax],al
    26b7:	01 53 09             	add    DWORD PTR [ebx+0x9],edx
    26ba:	73 32                	jae    26ee <sysEnter_Vector-0x12d912>
    26bc:	00 01                	add    BYTE PTR [ecx],al
    26be:	1b 14 01             	sbb    edx,DWORD PTR [ecx+eax*1]
    26c1:	00 00                	add    BYTE PTR [eax],al
    26c3:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    26c6:	63 31                	arpl   WORD PTR [ecx],si
    26c8:	00 01                	add    BYTE PTR [ecx],al
    26ca:	1c 48                	sbb    al,0x48
    26cc:	00 00                	add    BYTE PTR [eax],al
    26ce:	00 02                	add    BYTE PTR [edx],al
    26d0:	91                   	xchg   ecx,eax
    26d1:	6f                   	outs   dx,DWORD PTR ds:[esi]
    26d2:	09 63 32             	or     DWORD PTR [ebx+0x32],esp
    26d5:	00 01                	add    BYTE PTR [ecx],al
    26d7:	1c 48                	sbb    al,0x48
    26d9:	00 00                	add    BYTE PTR [eax],al
    26db:	00 02                	add    BYTE PTR [edx],al
    26dd:	91                   	xchg   ecx,eax
    26de:	6e                   	outs   dx,BYTE PTR ds:[esi]
    26df:	00 05 04 1a 01 00    	add    BYTE PTR ds:0x11a04,al
    26e5:	00 06                	add    BYTE PTR [esi],al
    26e7:	48                   	dec    eax
    26e8:	00 00                	add    BYTE PTR [eax],al
    26ea:	00 0a                	add    BYTE PTR [edx],cl
    26ec:	4b                   	dec    ebx
    26ed:	00 00                	add    BYTE PTR [eax],al
    26ef:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    26f2:	56                   	push   esi
    26f3:	00 00                	add    BYTE PTR [eax],al
    26f5:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
    26fb:	30 0a                	xor    BYTE PTR [edx],cl
    26fd:	b6 00                	mov    dh,0x0
    26ff:	00 00                	add    BYTE PTR [eax],al
    2701:	04 35                	add    al,0x35
    2703:	56                   	push   esi
    2704:	00 00                	add    BYTE PTR [eax],al
    2706:	00 05 03 8c 46 00    	add    BYTE PTR ds:0x468c03,al
    270c:	30 0a                	xor    BYTE PTR [edx],cl
    270e:	62 01                	bound  eax,QWORD PTR [ecx]
    2710:	00 00                	add    BYTE PTR [eax],al
    2712:	04 36                	add    al,0x36
    2714:	56                   	push   esi
    2715:	00 00                	add    BYTE PTR [eax],al
    2717:	00 05 03 84 46 00    	add    BYTE PTR ds:0x468403,al
    271d:	30 0a                	xor    BYTE PTR [edx],cl
    271f:	54                   	push   esp
    2720:	00 00                	add    BYTE PTR [eax],al
    2722:	00 05 44 84 00 00    	add    BYTE PTR ds:0x8444,al
    2728:	00 05 03 94 46 00    	add    BYTE PTR ds:0x469403,al
    272e:	30 0a                	xor    BYTE PTR [edx],cl
    2730:	28 00                	sub    BYTE PTR [eax],al
    2732:	00 00                	add    BYTE PTR [eax],al
    2734:	05 45 74 01 00       	add    eax,0x17445
    2739:	00 05 03 90 46 00    	add    BYTE PTR ds:0x469003,al
    273f:	30 05 04 a8 00 00    	xor    BYTE PTR ds:0xa804,al
    2745:	00 00                	add    BYTE PTR [eax],al
    2747:	d4 01                	aam    0x1
    2749:	00 00                	add    BYTE PTR [eax],al
    274b:	04 00                	add    al,0x0
    274d:	f8                   	clc    
    274e:	0c 00                	or     al,0x0
    2750:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2753:	fb                   	sti    
    2754:	00 00                	add    BYTE PTR [eax],al
    2756:	00 0c 95 09 00 00 79 	add    BYTE PTR [edx*4+0x79000009],cl
    275d:	00 00                	add    BYTE PTR [eax],al
    275f:	00 f8                	add    al,bh
    2761:	18 00                	sbb    BYTE PTR [eax],al
    2763:	30 c7                	xor    bh,al
    2765:	00 00                	add    BYTE PTR [eax],al
    2767:	00 f7                	add    bh,dh
    2769:	0f 00 00             	sldt   WORD PTR [eax]
    276c:	02 01                	add    al,BYTE PTR [ecx]
    276e:	06                   	push   es
    276f:	64 00 00             	add    BYTE PTR fs:[eax],al
    2772:	00 02                	add    BYTE PTR [edx],al
    2774:	01 06                	add    DWORD PTR [esi],eax
    2776:	5d                   	pop    ebp
    2777:	00 00                	add    BYTE PTR [eax],al
    2779:	00 02                	add    BYTE PTR [edx],al
    277b:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    2781:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2788:	02 08                	add    cl,BYTE PTR [eax]
    278a:	05 00 00 00 00       	add    eax,0x0
    278f:	02 01                	add    al,BYTE PTR [ecx]
    2791:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2794:	00 00                	add    BYTE PTR [eax],al
    2796:	02 02                	add    al,BYTE PTR [edx]
    2798:	07                   	pop    es
    2799:	0e                   	push   cs
    279a:	00 00                	add    BYTE PTR [eax],al
    279c:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    279f:	00 00                	add    BYTE PTR [eax],al
    27a1:	00 02                	add    BYTE PTR [edx],al
    27a3:	34 61                	xor    al,0x61
    27a5:	00 00                	add    BYTE PTR [eax],al
    27a7:	00 02                	add    BYTE PTR [edx],al
    27a9:	04 07                	add    al,0x7
    27ab:	3e 00 00             	add    BYTE PTR ds:[eax],al
    27ae:	00 02                	add    BYTE PTR [edx],al
    27b0:	08 07                	or     BYTE PTR [edi],al
    27b2:	34 00                	xor    al,0x0
    27b4:	00 00                	add    BYTE PTR [eax],al
    27b6:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    27bd:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    27c0:	a2 00 00 00 02       	mov    ds:0x2000000,al
    27c5:	01 02                	add    DWORD PTR [edx],eax
    27c7:	9c                   	pushf  
    27c8:	00 00                	add    BYTE PTR [eax],al
    27ca:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    27cd:	00 00                	add    BYTE PTR [eax],al
    27cf:	00 03                	add    BYTE PTR [ebx],al
    27d1:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    27d4:	00 00                	add    BYTE PTR [eax],al
    27d6:	05 04 95 00 00       	add    eax,0x9504
    27db:	00 06                	add    BYTE PTR [esi],al
    27dd:	25 00 00 00 02       	and    eax,0x2000000
    27e2:	04 07                	add    al,0x7
    27e4:	39 00                	cmp    DWORD PTR [eax],eax
    27e6:	00 00                	add    BYTE PTR [eax],al
    27e8:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    27eb:	e8 00 00 00 05       	call   50027f0 <sysEnter_Vector+0x4ed27f0>
    27f0:	04 25                	add    al,0x25
    27f2:	00 00                	add    BYTE PTR [eax],al
    27f4:	00 07                	add    BYTE PTR [edi],al
    27f6:	8e 09                	mov    cs,WORD PTR [ecx]
    27f8:	00 00                	add    BYTE PTR [eax],al
    27fa:	01 04 a8             	add    DWORD PTR [eax+ebp*4],eax
    27fd:	00 00                	add    BYTE PTR [eax],al
    27ff:	00 f8                	add    al,bh
    2801:	18 00                	sbb    BYTE PTR [eax],al
    2803:	30 40 00             	xor    BYTE PTR [eax+0x0],al
    2806:	00 00                	add    BYTE PTR [eax],al
    2808:	01 9c ee 00 00 00 08 	add    DWORD PTR [esi+ebp*8+0x8000000],ebx
    280f:	73 31                	jae    2842 <sysEnter_Vector-0x12d7be>
    2811:	00 01                	add    BYTE PTR [ecx],al
    2813:	04 a8                	add    al,0xa8
    2815:	00 00                	add    BYTE PTR [eax],al
    2817:	00 02                	add    BYTE PTR [edx],al
    2819:	91                   	xchg   ecx,eax
    281a:	00 08                	add    BYTE PTR [eax],cl
    281c:	73 32                	jae    2850 <sysEnter_Vector-0x12d7b0>
    281e:	00 01                	add    BYTE PTR [ecx],al
    2820:	04 8f                	add    al,0x8f
    2822:	00 00                	add    BYTE PTR [eax],al
    2824:	00 02                	add    BYTE PTR [edx],al
    2826:	91                   	xchg   ecx,eax
    2827:	04 09                	add    al,0x9
    2829:	73 00                	jae    282b <sysEnter_Vector-0x12d7d5>
    282b:	01 06                	add    DWORD PTR [esi],eax
    282d:	a8 00                	test   al,0x0
    282f:	00 00                	add    BYTE PTR [eax],al
    2831:	02 91 74 00 07 aa    	add    dl,BYTE PTR [ecx-0x55f8ff8c]
    2837:	09 00                	or     DWORD PTR [eax],eax
    2839:	00 01                	add    BYTE PTR [ecx],al
    283b:	0e                   	push   cs
    283c:	a8 00                	test   al,0x0
    283e:	00 00                	add    BYTE PTR [eax],al
    2840:	38 19                	cmp    BYTE PTR [ecx],bl
    2842:	00 30                	add    BYTE PTR [eax],dh
    2844:	40                   	inc    eax
    2845:	00 00                	add    BYTE PTR [eax],al
    2847:	00 01                	add    BYTE PTR [ecx],al
    2849:	9c                   	pushf  
    284a:	2e 01 00             	add    DWORD PTR cs:[eax],eax
    284d:	00 08                	add    BYTE PTR [eax],cl
    284f:	73 31                	jae    2882 <sysEnter_Vector-0x12d77e>
    2851:	00 01                	add    BYTE PTR [ecx],al
    2853:	0e                   	push   cs
    2854:	a8 00                	test   al,0x0
    2856:	00 00                	add    BYTE PTR [eax],al
    2858:	02 91 00 08 73 32    	add    dl,BYTE PTR [ecx+0x32730800]
    285e:	00 01                	add    BYTE PTR [ecx],al
    2860:	0e                   	push   cs
    2861:	8f 00                	pop    DWORD PTR [eax]
    2863:	00 00                	add    BYTE PTR [eax],al
    2865:	02 91 04 09 73 00    	add    dl,BYTE PTR [ecx+0x730904]
    286b:	01 10                	add    DWORD PTR [eax],edx
    286d:	a8 00                	test   al,0x0
    286f:	00 00                	add    BYTE PTR [eax],al
    2871:	02 91 74 00 07 86    	add    dl,BYTE PTR [ecx-0x79f8ff8c]
    2877:	09 00                	or     DWORD PTR [eax],eax
    2879:	00 01                	add    BYTE PTR [ecx],al
    287b:	18 a8 00 00 00 78    	sbb    BYTE PTR [eax+0x78000000],ch
    2881:	19 00                	sbb    DWORD PTR [eax],eax
    2883:	30 47 00             	xor    BYTE PTR [edi+0x0],al
    2886:	00 00                	add    BYTE PTR [eax],al
    2888:	01 9c 7c 01 00 00 08 	add    DWORD PTR [esp+edi*2+0x8000001],ebx
    288f:	73 31                	jae    28c2 <sysEnter_Vector-0x12d73e>
    2891:	00 01                	add    BYTE PTR [ecx],al
    2893:	18 a8 00 00 00 02    	sbb    BYTE PTR [eax+0x2000000],ch
    2899:	91                   	xchg   ecx,eax
    289a:	00 08                	add    BYTE PTR [eax],cl
    289c:	73 32                	jae    28d0 <sysEnter_Vector-0x12d730>
    289e:	00 01                	add    BYTE PTR [ecx],al
    28a0:	18 8f 00 00 00 02    	sbb    BYTE PTR [edi+0x2000000],cl
    28a6:	91                   	xchg   ecx,eax
    28a7:	04 0a                	add    al,0xa
    28a9:	80 09 00             	or     BYTE PTR [ecx],0x0
    28ac:	00 01                	add    BYTE PTR [ecx],al
    28ae:	18 61 00             	sbb    BYTE PTR [ecx+0x0],ah
    28b1:	00 00                	add    BYTE PTR [eax],al
    28b3:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    28b9:	01 1a                	add    DWORD PTR [edx],ebx
    28bb:	a8 00                	test   al,0x0
    28bd:	00 00                	add    BYTE PTR [eax],al
    28bf:	02 91 74 00 0b 4b    	add    dl,BYTE PTR [ecx+0x4b0b0074]
    28c5:	00 00                	add    BYTE PTR [eax],al
    28c7:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    28ca:	56                   	push   esi
    28cb:	00 00                	add    BYTE PTR [eax],al
    28cd:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
    28d3:	30 0b                	xor    BYTE PTR [ebx],cl
    28d5:	b6 00                	mov    dh,0x0
    28d7:	00 00                	add    BYTE PTR [eax],al
    28d9:	04 35                	add    al,0x35
    28db:	56                   	push   esi
    28dc:	00 00                	add    BYTE PTR [eax],al
    28de:	00 05 03 8c 46 00    	add    BYTE PTR ds:0x468c03,al
    28e4:	30 0b                	xor    BYTE PTR [ebx],cl
    28e6:	62 01                	bound  eax,QWORD PTR [ecx]
    28e8:	00 00                	add    BYTE PTR [eax],al
    28ea:	04 36                	add    al,0x36
    28ec:	56                   	push   esi
    28ed:	00 00                	add    BYTE PTR [eax],al
    28ef:	00 05 03 84 46 00    	add    BYTE PTR ds:0x468403,al
    28f5:	30 0b                	xor    BYTE PTR [ebx],cl
    28f7:	54                   	push   esp
    28f8:	00 00                	add    BYTE PTR [eax],al
    28fa:	00 05 44 84 00 00    	add    BYTE PTR ds:0x8444,al
    2900:	00 05 03 94 46 00    	add    BYTE PTR ds:0x469403,al
    2906:	30 0b                	xor    BYTE PTR [ebx],cl
    2908:	28 00                	sub    BYTE PTR [eax],al
    290a:	00 00                	add    BYTE PTR [eax],al
    290c:	05 45 d1 01 00       	add    eax,0x1d145
    2911:	00 05 03 90 46 00    	add    BYTE PTR ds:0x469003,al
    2917:	30 05 04 a8 00 00    	xor    BYTE PTR ds:0xa804,al
    291d:	00 00                	add    BYTE PTR [eax],al
    291f:	57                   	push   edi
    2920:	01 00                	add    DWORD PTR [eax],eax
    2922:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2925:	99                   	cdq    
    2926:	0d 00 00 04 01       	or     eax,0x1040000
    292b:	fb                   	sti    
    292c:	00 00                	add    BYTE PTR [eax],al
    292e:	00 0c c7             	add    BYTE PTR [edi+eax*8],cl
    2931:	09 00                	or     DWORD PTR [eax],eax
    2933:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    2936:	00 00                	add    BYTE PTR [eax],al
    2938:	c0 19 00             	rcr    BYTE PTR [ecx],0x0
    293b:	30 89 00 00 00 e1    	xor    BYTE PTR [ecx-0x1f000000],cl
    2941:	10 00                	adc    BYTE PTR [eax],al
    2943:	00 02                	add    BYTE PTR [edx],al
    2945:	01 06                	add    DWORD PTR [esi],eax
    2947:	64 00 00             	add    BYTE PTR fs:[eax],al
    294a:	00 02                	add    BYTE PTR [edx],al
    294c:	01 06                	add    DWORD PTR [esi],eax
    294e:	5d                   	pop    ebp
    294f:	00 00                	add    BYTE PTR [eax],al
    2951:	00 02                	add    BYTE PTR [edx],al
    2953:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    2959:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2960:	02 08                	add    cl,BYTE PTR [eax]
    2962:	05 00 00 00 00       	add    eax,0x0
    2967:	02 01                	add    al,BYTE PTR [ecx]
    2969:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    296c:	00 00                	add    BYTE PTR [eax],al
    296e:	02 02                	add    al,BYTE PTR [edx]
    2970:	07                   	pop    es
    2971:	0e                   	push   cs
    2972:	00 00                	add    BYTE PTR [eax],al
    2974:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    2977:	00 00                	add    BYTE PTR [eax],al
    2979:	00 02                	add    BYTE PTR [edx],al
    297b:	34 61                	xor    al,0x61
    297d:	00 00                	add    BYTE PTR [eax],al
    297f:	00 02                	add    BYTE PTR [edx],al
    2981:	04 07                	add    al,0x7
    2983:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2986:	00 02                	add    BYTE PTR [edx],al
    2988:	08 07                	or     BYTE PTR [edi],al
    298a:	34 00                	xor    al,0x0
    298c:	00 00                	add    BYTE PTR [eax],al
    298e:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2995:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2998:	a2 00 00 00 02       	mov    ds:0x2000000,al
    299d:	01 02                	add    DWORD PTR [edx],eax
    299f:	9c                   	pushf  
    29a0:	00 00                	add    BYTE PTR [eax],al
    29a2:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    29a5:	00 00                	add    BYTE PTR [eax],al
    29a7:	00 03                	add    BYTE PTR [ebx],al
    29a9:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    29ac:	00 00                	add    BYTE PTR [eax],al
    29ae:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    29b1:	39 00                	cmp    DWORD PTR [eax],eax
    29b3:	00 00                	add    BYTE PTR [eax],al
    29b5:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    29b8:	e8 00 00 00 05       	call   50029bd <sysEnter_Vector+0x4ed29bd>
    29bd:	04 25                	add    al,0x25
    29bf:	00 00                	add    BYTE PTR [eax],al
    29c1:	00 06                	add    BYTE PTR [esi],al
    29c3:	b2 09                	mov    dl,0x9
    29c5:	00 00                	add    BYTE PTR [eax],al
    29c7:	01 09                	add    DWORD PTR [ecx],ecx
    29c9:	7d 00                	jge    29cb <sysEnter_Vector-0x12d635>
    29cb:	00 00                	add    BYTE PTR [eax],al
    29cd:	c0 19 00             	rcr    BYTE PTR [ecx],0x0
    29d0:	30 30                	xor    BYTE PTR [eax],dh
    29d2:	00 00                	add    BYTE PTR [eax],al
    29d4:	00 01                	add    BYTE PTR [ecx],al
    29d6:	9c                   	pushf  
    29d7:	c9                   	leave  
    29d8:	00 00                	add    BYTE PTR [eax],al
    29da:	00 07                	add    BYTE PTR [edi],al
    29dc:	63 00                	arpl   WORD PTR [eax],ax
    29de:	01 09                	add    DWORD PTR [ecx],ecx
    29e0:	25 00 00 00 02       	and    eax,0x2000000
    29e5:	91                   	xchg   ecx,eax
    29e6:	74 00                	je     29e8 <sysEnter_Vector-0x12d618>
    29e8:	08 be 09 00 00 01    	or     BYTE PTR [esi+0x1000009],bh
    29ee:	0e                   	push   cs
    29ef:	7d 00                	jge    29f1 <sysEnter_Vector-0x12d60f>
    29f1:	00 00                	add    BYTE PTR [eax],al
    29f3:	f0 19 00             	lock sbb DWORD PTR [eax],eax
    29f6:	30 59 00             	xor    BYTE PTR [ecx+0x0],bl
    29f9:	00 00                	add    BYTE PTR [eax],al
    29fb:	01 9c ff 00 00 00 07 	add    DWORD PTR [edi+edi*8+0x7000000],ebx
    2a02:	73 74                	jae    2a78 <sysEnter_Vector-0x12d588>
    2a04:	72 00                	jb     2a06 <sysEnter_Vector-0x12d5fa>
    2a06:	01 0e                	add    DWORD PTR [esi],ecx
    2a08:	9d                   	popf   
    2a09:	00 00                	add    BYTE PTR [eax],al
    2a0b:	00 02                	add    BYTE PTR [edx],al
    2a0d:	91                   	xchg   ecx,eax
    2a0e:	00 09                	add    BYTE PTR [ecx],cl
    2a10:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
    2a13:	00 01                	add    BYTE PTR [ecx],al
    2a15:	10 3a                	adc    BYTE PTR [edx],bh
    2a17:	00 00                	add    BYTE PTR [eax],al
    2a19:	00 02                	add    BYTE PTR [edx],al
    2a1b:	91                   	xchg   ecx,eax
    2a1c:	74 00                	je     2a1e <sysEnter_Vector-0x12d5e2>
    2a1e:	0a 4b 00             	or     cl,BYTE PTR [ebx+0x0]
    2a21:	00 00                	add    BYTE PTR [eax],al
    2a23:	04 34                	add    al,0x34
    2a25:	56                   	push   esi
    2a26:	00 00                	add    BYTE PTR [eax],al
    2a28:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
    2a2e:	30 0a                	xor    BYTE PTR [edx],cl
    2a30:	b6 00                	mov    dh,0x0
    2a32:	00 00                	add    BYTE PTR [eax],al
    2a34:	04 35                	add    al,0x35
    2a36:	56                   	push   esi
    2a37:	00 00                	add    BYTE PTR [eax],al
    2a39:	00 05 03 8c 46 00    	add    BYTE PTR ds:0x468c03,al
    2a3f:	30 0a                	xor    BYTE PTR [edx],cl
    2a41:	62 01                	bound  eax,QWORD PTR [ecx]
    2a43:	00 00                	add    BYTE PTR [eax],al
    2a45:	04 36                	add    al,0x36
    2a47:	56                   	push   esi
    2a48:	00 00                	add    BYTE PTR [eax],al
    2a4a:	00 05 03 84 46 00    	add    BYTE PTR ds:0x468403,al
    2a50:	30 0a                	xor    BYTE PTR [edx],cl
    2a52:	54                   	push   esp
    2a53:	00 00                	add    BYTE PTR [eax],al
    2a55:	00 05 44 84 00 00    	add    BYTE PTR ds:0x8444,al
    2a5b:	00 05 03 94 46 00    	add    BYTE PTR ds:0x469403,al
    2a61:	30 0a                	xor    BYTE PTR [edx],cl
    2a63:	28 00                	sub    BYTE PTR [eax],al
    2a65:	00 00                	add    BYTE PTR [eax],al
    2a67:	05 45 54 01 00       	add    eax,0x15445
    2a6c:	00 05 03 90 46 00    	add    BYTE PTR ds:0x469003,al
    2a72:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    2a78:	00 00                	add    BYTE PTR [eax],al
    2a7a:	ca 00 00             	retf   0x0
    2a7d:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2a80:	40                   	inc    eax
    2a81:	0e                   	push   cs
    2a82:	00 00                	add    BYTE PTR [eax],al
    2a84:	04 01                	add    al,0x1
    2a86:	fb                   	sti    
    2a87:	00 00                	add    BYTE PTR [eax],al
    2a89:	00 0c e5 09 00 00 79 	add    BYTE PTR [eiz*8+0x79000009],cl
    2a90:	00 00                	add    BYTE PTR [eax],al
    2a92:	00 4c 1a 00          	add    BYTE PTR [edx+ebx*1+0x0],cl
    2a96:	30 62 00             	xor    BYTE PTR [edx+0x0],ah
    2a99:	00 00                	add    BYTE PTR [eax],al
    2a9b:	ba 11 00 00 02       	mov    edx,0x2000011
    2aa0:	04 05                	add    al,0x5
    2aa2:	69 6e 74 00 03 6d 04 	imul   ebp,DWORD PTR [esi+0x74],0x46d0300
    2aa9:	00 00                	add    BYTE PTR [eax],al
    2aab:	02 d8                	add    bl,al
    2aad:	37                   	aaa    
    2aae:	00 00                	add    BYTE PTR [eax],al
    2ab0:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2ab3:	07                   	pop    es
    2ab4:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2ab7:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2aba:	05 05 00 00 00       	add    eax,0x5
    2abf:	04 08                	add    al,0x8
    2ac1:	05 00 00 00 00       	add    eax,0x0
    2ac6:	04 0c                	add    al,0xc
    2ac8:	04 a2                	add    al,0xa2
    2aca:	00 00                	add    BYTE PTR [eax],al
    2acc:	00 05 de 09 00 00    	add    BYTE PTR ds:0x9de,al
    2ad2:	01 03                	add    DWORD PTR [ebx],eax
    2ad4:	2c 00                	sub    al,0x0
    2ad6:	00 00                	add    BYTE PTR [eax],al
    2ad8:	4c                   	dec    esp
    2ad9:	1a 00                	sbb    al,BYTE PTR [eax]
    2adb:	30 31                	xor    BYTE PTR [ecx],dh
    2add:	00 00                	add    BYTE PTR [eax],al
    2adf:	00 01                	add    BYTE PTR [ecx],al
    2ae1:	9c                   	pushf  
    2ae2:	89 00                	mov    DWORD PTR [eax],eax
    2ae4:	00 00                	add    BYTE PTR [eax],al
    2ae6:	06                   	push   es
    2ae7:	73 74                	jae    2b5d <sysEnter_Vector-0x12d4a3>
    2ae9:	72 00                	jb     2aeb <sysEnter_Vector-0x12d515>
    2aeb:	01 03                	add    DWORD PTR [ebx],eax
    2aed:	89 00                	mov    DWORD PTR [eax],eax
    2aef:	00 00                	add    BYTE PTR [eax],al
    2af1:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    2af7:	74 00                	je     2af9 <sysEnter_Vector-0x12d507>
    2af9:	01 04 2c             	add    DWORD PTR [esp+ebp*1],eax
    2afc:	00 00                	add    BYTE PTR [eax],al
    2afe:	00 02                	add    BYTE PTR [edx],al
    2b00:	91                   	xchg   ecx,eax
    2b01:	74 00                	je     2b03 <sysEnter_Vector-0x12d4fd>
    2b03:	08 04 96             	or     BYTE PTR [esi+edx*4],al
    2b06:	00 00                	add    BYTE PTR [eax],al
    2b08:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2b0b:	06                   	push   es
    2b0c:	64 00 00             	add    BYTE PTR fs:[eax],al
    2b0f:	00 09                	add    BYTE PTR [ecx],cl
    2b11:	8f 00                	pop    DWORD PTR [eax]
    2b13:	00 00                	add    BYTE PTR [eax],al
    2b15:	0a fa                	or     bh,dl
    2b17:	09 00                	or     DWORD PTR [eax],eax
    2b19:	00 01                	add    BYTE PTR [ecx],al
    2b1b:	0a 2c 00             	or     ch,BYTE PTR [eax+eax*1]
    2b1e:	00 00                	add    BYTE PTR [eax],al
    2b20:	7d 1a                	jge    2b3c <sysEnter_Vector-0x12d4c4>
    2b22:	00 30                	add    BYTE PTR [eax],dh
    2b24:	31 00                	xor    DWORD PTR [eax],eax
    2b26:	00 00                	add    BYTE PTR [eax],al
    2b28:	01 9c 06 73 74 72 00 	add    DWORD PTR [esi+eax*1+0x727473],ebx
    2b2f:	01 0a                	add    DWORD PTR [edx],ecx
    2b31:	89 00                	mov    DWORD PTR [eax],eax
    2b33:	00 00                	add    BYTE PTR [eax],al
    2b35:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    2b3b:	74 00                	je     2b3d <sysEnter_Vector-0x12d4c3>
    2b3d:	01 0b                	add    DWORD PTR [ebx],ecx
    2b3f:	2c 00                	sub    al,0x0
    2b41:	00 00                	add    BYTE PTR [eax],al
    2b43:	02 91 74 00 00 de    	add    dl,BYTE PTR [ecx-0x21ffff8c]
    2b49:	00 00                	add    BYTE PTR [eax],al
    2b4b:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2b4e:	db 0e                	fisttp DWORD PTR [esi]
    2b50:	00 00                	add    BYTE PTR [eax],al
    2b52:	04 01                	add    al,0x1
    2b54:	fb                   	sti    
    2b55:	00 00                	add    BYTE PTR [eax],al
    2b57:	00 0c 13             	add    BYTE PTR [ebx+edx*1],cl
    2b5a:	0a 00                	or     al,BYTE PTR [eax]
    2b5c:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    2b5f:	00 00                	add    BYTE PTR [eax],al
    2b61:	b0 1a                	mov    al,0x1a
    2b63:	00 30                	add    BYTE PTR [eax],dh
    2b65:	ce                   	into   
    2b66:	00 00                	add    BYTE PTR [eax],al
    2b68:	00 52 12             	add    BYTE PTR [edx+0x12],dl
    2b6b:	00 00                	add    BYTE PTR [eax],al
    2b6d:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    2b74:	03 6d 04             	add    ebp,DWORD PTR [ebp+0x4]
    2b77:	00 00                	add    BYTE PTR [eax],al
    2b79:	02 d8                	add    bl,al
    2b7b:	37                   	aaa    
    2b7c:	00 00                	add    BYTE PTR [eax],al
    2b7e:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2b81:	07                   	pop    es
    2b82:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2b85:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2b88:	05 05 00 00 00       	add    eax,0x5
    2b8d:	04 08                	add    al,0x8
    2b8f:	05 00 00 00 00       	add    eax,0x0
    2b94:	04 0c                	add    al,0xc
    2b96:	04 a2                	add    al,0xa2
    2b98:	00 00                	add    BYTE PTR [eax],al
    2b9a:	00 05 0b 0a 00 00    	add    BYTE PTR ds:0xa0b,al
    2ba0:	01 0c 25 00 00 00 b0 	add    DWORD PTR [eiz*1-0x50000000],ecx
    2ba7:	1a 00                	sbb    al,BYTE PTR [eax]
    2ba9:	30 67 00             	xor    BYTE PTR [edi+0x0],ah
    2bac:	00 00                	add    BYTE PTR [eax],al
    2bae:	01 9c 93 00 00 00 06 	add    DWORD PTR [ebx+edx*4+0x6000000],ebx
    2bb5:	73 31                	jae    2be8 <sysEnter_Vector-0x12d418>
    2bb7:	00 01                	add    BYTE PTR [ecx],al
    2bb9:	0c 93                	or     al,0x93
    2bbb:	00 00                	add    BYTE PTR [eax],al
    2bbd:	00 02                	add    BYTE PTR [edx],al
    2bbf:	91                   	xchg   ecx,eax
    2bc0:	00 06                	add    BYTE PTR [esi],al
    2bc2:	73 32                	jae    2bf6 <sysEnter_Vector-0x12d40a>
    2bc4:	00 01                	add    BYTE PTR [ecx],al
    2bc6:	0c 93                	or     al,0x93
    2bc8:	00 00                	add    BYTE PTR [eax],al
    2bca:	00 02                	add    BYTE PTR [edx],al
    2bcc:	91                   	xchg   ecx,eax
    2bcd:	04 06                	add    al,0x6
    2bcf:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2bd0:	00 01                	add    BYTE PTR [ecx],al
    2bd2:	0c 2c                	or     al,0x2c
    2bd4:	00 00                	add    BYTE PTR [eax],al
    2bd6:	00 02                	add    BYTE PTR [edx],al
    2bd8:	91                   	xchg   ecx,eax
    2bd9:	08 00                	or     BYTE PTR [eax],al
    2bdb:	07                   	pop    es
    2bdc:	04 a0                	add    al,0xa0
    2bde:	00 00                	add    BYTE PTR [eax],al
    2be0:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2be3:	06                   	push   es
    2be4:	64 00 00             	add    BYTE PTR fs:[eax],al
    2be7:	00 08                	add    BYTE PTR [eax],cl
    2be9:	99                   	cdq    
    2bea:	00 00                	add    BYTE PTR [eax],al
    2bec:	00 09                	add    BYTE PTR [ecx],cl
    2bee:	02 0a                	add    cl,BYTE PTR [edx]
    2bf0:	00 00                	add    BYTE PTR [eax],al
    2bf2:	01 16                	add    DWORD PTR [esi],edx
    2bf4:	25 00 00 00 17       	and    eax,0x17000000
    2bf9:	1b 00                	sbb    eax,DWORD PTR [eax]
    2bfb:	30 67 00             	xor    BYTE PTR [edi+0x0],ah
    2bfe:	00 00                	add    BYTE PTR [eax],al
    2c00:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    2c07:	16                   	push   ss
    2c08:	93                   	xchg   ebx,eax
    2c09:	00 00                	add    BYTE PTR [eax],al
    2c0b:	00 02                	add    BYTE PTR [edx],al
    2c0d:	91                   	xchg   ecx,eax
    2c0e:	00 06                	add    BYTE PTR [esi],al
    2c10:	73 32                	jae    2c44 <sysEnter_Vector-0x12d3bc>
    2c12:	00 01                	add    BYTE PTR [ecx],al
    2c14:	16                   	push   ss
    2c15:	93                   	xchg   ebx,eax
    2c16:	00 00                	add    BYTE PTR [eax],al
    2c18:	00 02                	add    BYTE PTR [edx],al
    2c1a:	91                   	xchg   ecx,eax
    2c1b:	04 06                	add    al,0x6
    2c1d:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2c1e:	00 01                	add    BYTE PTR [ecx],al
    2c20:	16                   	push   ss
    2c21:	2c 00                	sub    al,0x0
    2c23:	00 00                	add    BYTE PTR [eax],al
    2c25:	02 91 08 00 00 f0    	add    dl,BYTE PTR [ecx-0xffffff8]
    2c2b:	00 00                	add    BYTE PTR [eax],al
    2c2d:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2c30:	67 0f 00 00          	sldt   WORD PTR [bx+si]
    2c34:	04 01                	add    al,0x1
    2c36:	fb                   	sti    
    2c37:	00 00                	add    BYTE PTR [eax],al
    2c39:	00 0c 29             	add    BYTE PTR [ecx+ebp*1],cl
    2c3c:	0a 00                	or     al,BYTE PTR [eax]
    2c3e:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    2c41:	00 00                	add    BYTE PTR [eax],al
    2c43:	80 1b 00             	sbb    BYTE PTR [ebx],0x0
    2c46:	30 80 00 00 00 17    	xor    BYTE PTR [eax+0x17000000],al
    2c4c:	13 00                	adc    eax,DWORD PTR [eax]
    2c4e:	00 02                	add    BYTE PTR [edx],al
    2c50:	04 05                	add    al,0x5
    2c52:	69 6e 74 00 03 6d 04 	imul   ebp,DWORD PTR [esi+0x74],0x46d0300
    2c59:	00 00                	add    BYTE PTR [eax],al
    2c5b:	02 d8                	add    bl,al
    2c5d:	37                   	aaa    
    2c5e:	00 00                	add    BYTE PTR [eax],al
    2c60:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2c63:	07                   	pop    es
    2c64:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2c67:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2c6a:	05 05 00 00 00       	add    eax,0x5
    2c6f:	04 08                	add    al,0x8
    2c71:	05 00 00 00 00       	add    eax,0x0
    2c76:	04 0c                	add    al,0xc
    2c78:	04 a2                	add    al,0xa2
    2c7a:	00 00                	add    BYTE PTR [eax],al
    2c7c:	00 05 3f 0a 00 00    	add    BYTE PTR ds:0xa3f,al
    2c82:	01 0d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ecx
    2c88:	80 1b 00             	sbb    BYTE PTR [ebx],0x0
    2c8b:	30 60 00             	xor    BYTE PTR [eax+0x0],ah
    2c8e:	00 00                	add    BYTE PTR [eax],al
    2c90:	01 9c 9f 00 00 00 06 	add    DWORD PTR [edi+ebx*4+0x6000000],ebx
    2c97:	73 31                	jae    2cca <sysEnter_Vector-0x12d336>
    2c99:	00 01                	add    BYTE PTR [ecx],al
    2c9b:	0d 9f 00 00 00       	or     eax,0x9f
    2ca0:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    2ca6:	00 01                	add    BYTE PTR [ecx],al
    2ca8:	0d ac 00 00 00       	or     eax,0xac
    2cad:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    2cb3:	01 0d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ecx
    2cb9:	02 91 08 07 73 00    	add    dl,BYTE PTR [ecx+0x730708]
    2cbf:	01 0f                	add    DWORD PTR [edi],ecx
    2cc1:	9f                   	lahf   
    2cc2:	00 00                	add    BYTE PTR [eax],al
    2cc4:	00 02                	add    BYTE PTR [edx],al
    2cc6:	91                   	xchg   ecx,eax
    2cc7:	74 00                	je     2cc9 <sysEnter_Vector-0x12d337>
    2cc9:	08 04 a5 00 00 00 04 	or     BYTE PTR [eiz*4+0x4000000],al
    2cd0:	01 06                	add    DWORD PTR [esi],eax
    2cd2:	64 00 00             	add    BYTE PTR fs:[eax],al
    2cd5:	00 08                	add    BYTE PTR [eax],cl
    2cd7:	04 b2                	add    al,0xb2
    2cd9:	00 00                	add    BYTE PTR [eax],al
    2cdb:	00 09                	add    BYTE PTR [ecx],cl
    2cdd:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    2cde:	00 00                	add    BYTE PTR [eax],al
    2ce0:	00 0a                	add    BYTE PTR [edx],cl
    2ce2:	48                   	dec    eax
    2ce3:	0a 00                	or     al,BYTE PTR [eax]
    2ce5:	00 01                	add    BYTE PTR [ecx],al
    2ce7:	1b 9f 00 00 00 e0    	sbb    ebx,DWORD PTR [edi-0x20000000]
    2ced:	1b 00                	sbb    eax,DWORD PTR [eax]
    2cef:	30 20                	xor    BYTE PTR [eax],ah
    2cf1:	00 00                	add    BYTE PTR [eax],al
    2cf3:	00 01                	add    BYTE PTR [ecx],al
    2cf5:	9c                   	pushf  
    2cf6:	06                   	push   es
    2cf7:	73 31                	jae    2d2a <sysEnter_Vector-0x12d2d6>
    2cf9:	00 01                	add    BYTE PTR [ecx],al
    2cfb:	1b 9f 00 00 00 02    	sbb    ebx,DWORD PTR [edi+0x2000000]
    2d01:	91                   	xchg   ecx,eax
    2d02:	00 06                	add    BYTE PTR [esi],al
    2d04:	73 32                	jae    2d38 <sysEnter_Vector-0x12d2c8>
    2d06:	00 01                	add    BYTE PTR [ecx],al
    2d08:	1b ac 00 00 00 02 91 	sbb    ebp,DWORD PTR [eax+eax*1-0x6efe0000]
    2d0f:	04 06                	add    al,0x6
    2d11:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2d12:	00 01                	add    BYTE PTR [ecx],al
    2d14:	1b 2c 00             	sbb    ebp,DWORD PTR [eax+eax*1]
    2d17:	00 00                	add    BYTE PTR [eax],al
    2d19:	02 91 08 00 00 9d    	add    dl,BYTE PTR [ecx-0x62fffff8]
    2d1f:	01 00                	add    DWORD PTR [eax],eax
    2d21:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2d24:	02 10                	add    dl,BYTE PTR [eax]
    2d26:	00 00                	add    BYTE PTR [eax],al
    2d28:	04 01                	add    al,0x1
    2d2a:	fb                   	sti    
    2d2b:	00 00                	add    BYTE PTR [eax],al
    2d2d:	00 0c 50             	add    BYTE PTR [eax+edx*2],cl
    2d30:	0a 00                	or     al,BYTE PTR [eax]
    2d32:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    2d35:	00 00                	add    BYTE PTR [eax],al
    2d37:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
    2d3a:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
    2d3d:	00 00                	add    BYTE PTR [eax],al
    2d3f:	bc 13 00 00 02       	mov    esp,0x2000013
    2d44:	01 06                	add    DWORD PTR [esi],eax
    2d46:	64 00 00             	add    BYTE PTR fs:[eax],al
    2d49:	00 02                	add    BYTE PTR [edx],al
    2d4b:	01 06                	add    DWORD PTR [esi],eax
    2d4d:	5d                   	pop    ebp
    2d4e:	00 00                	add    BYTE PTR [eax],al
    2d50:	00 02                	add    BYTE PTR [edx],al
    2d52:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    2d58:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2d5f:	02 08                	add    cl,BYTE PTR [eax]
    2d61:	05 00 00 00 00       	add    eax,0x0
    2d66:	02 01                	add    al,BYTE PTR [ecx]
    2d68:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2d6b:	00 00                	add    BYTE PTR [eax],al
    2d6d:	02 02                	add    al,BYTE PTR [edx]
    2d6f:	07                   	pop    es
    2d70:	0e                   	push   cs
    2d71:	00 00                	add    BYTE PTR [eax],al
    2d73:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    2d76:	00 00                	add    BYTE PTR [eax],al
    2d78:	00 02                	add    BYTE PTR [edx],al
    2d7a:	34 61                	xor    al,0x61
    2d7c:	00 00                	add    BYTE PTR [eax],al
    2d7e:	00 02                	add    BYTE PTR [edx],al
    2d80:	04 07                	add    al,0x7
    2d82:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2d85:	00 02                	add    BYTE PTR [edx],al
    2d87:	08 07                	or     BYTE PTR [edi],al
    2d89:	34 00                	xor    al,0x0
    2d8b:	00 00                	add    BYTE PTR [eax],al
    2d8d:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2d94:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2d97:	a2 00 00 00 02       	mov    ds:0x2000000,al
    2d9c:	01 02                	add    DWORD PTR [edx],eax
    2d9e:	9c                   	pushf  
    2d9f:	00 00                	add    BYTE PTR [eax],al
    2da1:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2da4:	00 00                	add    BYTE PTR [eax],al
    2da6:	00 03                	add    BYTE PTR [ebx],al
    2da8:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    2dab:	00 00                	add    BYTE PTR [eax],al
    2dad:	05 04 95 00 00       	add    eax,0x9504
    2db2:	00 06                	add    BYTE PTR [esi],al
    2db4:	25 00 00 00 02       	and    eax,0x2000000
    2db9:	04 07                	add    al,0x7
    2dbb:	39 00                	cmp    DWORD PTR [eax],eax
    2dbd:	00 00                	add    BYTE PTR [eax],al
    2dbf:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2dc2:	e8 00 00 00 05       	call   5002dc7 <sysEnter_Vector+0x4ed2dc7>
    2dc7:	04 25                	add    al,0x25
    2dc9:	00 00                	add    BYTE PTR [eax],al
    2dcb:	00 07                	add    BYTE PTR [edi],al
    2dcd:	73 0a                	jae    2dd9 <sysEnter_Vector-0x12d227>
    2dcf:	00 00                	add    BYTE PTR [eax],al
    2dd1:	01 3b                	add    DWORD PTR [ebx],edi
    2dd3:	9a 00 00 00 00 1c 00 	call   0x1c:0x0
    2dda:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
    2ddd:	00 00                	add    BYTE PTR [eax],al
    2ddf:	01 9c 45 01 00 00 08 	add    DWORD PTR [ebp+eax*2+0x8000001],ebx
    2de6:	82                   	(bad)  
    2de7:	0a 00                	or     al,BYTE PTR [eax]
    2de9:	00 01                	add    BYTE PTR [ecx],al
    2deb:	3b 8f 00 00 00 02    	cmp    ecx,DWORD PTR [edi+0x2000000]
    2df1:	91                   	xchg   ecx,eax
    2df2:	00 08                	add    BYTE PTR [eax],cl
    2df4:	7b 0a                	jnp    2e00 <sysEnter_Vector-0x12d200>
    2df6:	00 00                	add    BYTE PTR [eax],al
    2df8:	01 3b                	add    DWORD PTR [ebx],edi
    2dfa:	45                   	inc    ebp
    2dfb:	01 00                	add    DWORD PTR [eax],eax
    2dfd:	00 02                	add    BYTE PTR [edx],al
    2dff:	91                   	xchg   ecx,eax
    2e00:	04 08                	add    al,0x8
    2e02:	87 0a                	xchg   DWORD PTR [edx],ecx
    2e04:	00 00                	add    BYTE PTR [eax],al
    2e06:	01 3b                	add    DWORD PTR [ebx],edi
    2e08:	3a 00                	cmp    al,BYTE PTR [eax]
    2e0a:	00 00                	add    BYTE PTR [eax],al
    2e0c:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    2e12:	01 3d 8f 00 00 00    	add    DWORD PTR ds:0x8f,edi
    2e18:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    2e1b:	61                   	popa   
    2e1c:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    2e1f:	01 3e                	add    DWORD PTR [esi],edi
    2e21:	9a 00 00 00 01 57 09 	call   0x957:0x1000000
    2e28:	63 00                	arpl   WORD PTR [eax],ax
    2e2a:	01 3f                	add    DWORD PTR [edi],edi
    2e2c:	3a 00                	cmp    al,BYTE PTR [eax]
    2e2e:	00 00                	add    BYTE PTR [eax],al
    2e30:	01 53 0a             	add    DWORD PTR [ebx+0xa],edx
    2e33:	65 0a 00             	or     al,BYTE PTR gs:[eax]
    2e36:	00 01                	add    BYTE PTR [ecx],al
    2e38:	40                   	inc    eax
    2e39:	9a 00 00 00 0b 6e 65 	call   0x656e:0xb000000
    2e40:	67 00 01             	add    BYTE PTR [bx+di],al
    2e43:	41                   	inc    ecx
    2e44:	3a 00                	cmp    al,BYTE PTR [eax]
    2e46:	00 00                	add    BYTE PTR [eax],al
    2e48:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    2e4b:	79 00                	jns    2e4d <sysEnter_Vector-0x12d1b3>
    2e4d:	01 41 3a             	add    DWORD PTR [ecx+0x3a],eax
    2e50:	00 00                	add    BYTE PTR [eax],al
    2e52:	00 01                	add    BYTE PTR [ecx],al
    2e54:	51                   	push   ecx
    2e55:	0c 6c                	or     al,0x6c
    2e57:	0a 00                	or     al,BYTE PTR [eax]
    2e59:	00 01                	add    BYTE PTR [ecx],al
    2e5b:	41                   	inc    ecx
    2e5c:	3a 00                	cmp    al,BYTE PTR [eax]
    2e5e:	00 00                	add    BYTE PTR [eax],al
    2e60:	01 52 00             	add    DWORD PTR [edx+0x0],edx
    2e63:	05 04 a8 00 00       	add    eax,0xa804
    2e68:	00 0d 4b 00 00 00    	add    BYTE PTR ds:0x4b,cl
    2e6e:	04 34                	add    al,0x34
    2e70:	56                   	push   esi
    2e71:	00 00                	add    BYTE PTR [eax],al
    2e73:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
    2e79:	30 0d b6 00 00 00    	xor    BYTE PTR ds:0xb6,cl
    2e7f:	04 35                	add    al,0x35
    2e81:	56                   	push   esi
    2e82:	00 00                	add    BYTE PTR [eax],al
    2e84:	00 05 03 8c 46 00    	add    BYTE PTR ds:0x468c03,al
    2e8a:	30 0d 62 01 00 00    	xor    BYTE PTR ds:0x162,cl
    2e90:	04 36                	add    al,0x36
    2e92:	56                   	push   esi
    2e93:	00 00                	add    BYTE PTR [eax],al
    2e95:	00 05 03 84 46 00    	add    BYTE PTR ds:0x468403,al
    2e9b:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
    2ea1:	05 44 84 00 00       	add    eax,0x8444
    2ea6:	00 05 03 94 46 00    	add    BYTE PTR ds:0x469403,al
    2eac:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
    2eb2:	05 45 45 01 00       	add    eax,0x14545
    2eb7:	00 05 03 90 46 00    	add    BYTE PTR ds:0x469003,al
    2ebd:	30 00                	xor    BYTE PTR [eax],al
    2ebf:	6c                   	ins    BYTE PTR es:[edi],dx
    2ec0:	00 00                	add    BYTE PTR [eax],al
    2ec2:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2ec5:	bd 10 00 00 04       	mov    ebp,0x4000010
    2eca:	01 fb                	add    ebx,edi
    2ecc:	00 00                	add    BYTE PTR [eax],al
    2ece:	00 0c 8c             	add    BYTE PTR [esp+ecx*4],cl
    2ed1:	0a 00                	or     al,BYTE PTR [eax]
    2ed3:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    2ed6:	00 00                	add    BYTE PTR [eax],al
    2ed8:	80 1d 00 30 1d 00 00 	sbb    BYTE PTR ds:0x1d3000,0x0
    2edf:	00 13                	add    BYTE PTR [ebx],dl
    2ee1:	15 00 00 02 a3       	adc    eax,0xa3020000
    2ee6:	0a 00                	or     al,BYTE PTR [eax]
    2ee8:	00 01                	add    BYTE PTR [ecx],al
    2eea:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    2eed:	00 00                	add    BYTE PTR [eax],al
    2eef:	80 1d 00 30 1d 00 00 	sbb    BYTE PTR ds:0x1d3000,0x0
    2ef6:	00 01                	add    BYTE PTR [ecx],al
    2ef8:	9c                   	pushf  
    2ef9:	5b                   	pop    ebx
    2efa:	00 00                	add    BYTE PTR [eax],al
    2efc:	00 03                	add    BYTE PTR [ebx],al
    2efe:	76 61                	jbe    2f61 <sysEnter_Vector-0x12d09f>
    2f00:	6c                   	ins    BYTE PTR es:[edi],dx
    2f01:	00 01                	add    BYTE PTR [ecx],al
    2f03:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    2f06:	00 00                	add    BYTE PTR [eax],al
    2f08:	02 91 00 03 63 6e    	add    dl,BYTE PTR [ecx+0x6e630300]
    2f0e:	74 00                	je     2f10 <sysEnter_Vector-0x12d0f0>
    2f10:	01 01                	add    DWORD PTR [ecx],eax
    2f12:	68 00 00 00 02       	push   0x2000000
    2f17:	91                   	xchg   ecx,eax
    2f18:	04 00                	add    al,0x0
    2f1a:	04 04                	add    al,0x4
    2f1c:	61                   	popa   
    2f1d:	00 00                	add    BYTE PTR [eax],al
    2f1f:	00 05 01 06 64 00    	add    BYTE PTR ds:0x640601,al
    2f25:	00 00                	add    BYTE PTR [eax],al
    2f27:	06                   	push   es
    2f28:	04 05                	add    al,0x5
    2f2a:	69 6e 74 00 00 9b 01 	imul   ebp,DWORD PTR [esi+0x74],0x19b0000
    2f31:	00 00                	add    BYTE PTR [eax],al
    2f33:	04 00                	add    al,0x0
    2f35:	1b 11                	sbb    edx,DWORD PTR [ecx]
    2f37:	00 00                	add    BYTE PTR [eax],al
    2f39:	04 01                	add    al,0x1
    2f3b:	fb                   	sti    
    2f3c:	00 00                	add    BYTE PTR [eax],al
    2f3e:	00 0c ab             	add    BYTE PTR [ebx+ebp*4],cl
    2f41:	0a 00                	or     al,BYTE PTR [eax]
    2f43:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    2f46:	00 00                	add    BYTE PTR [eax],al
    2f48:	a0 1d 00 30 9c       	mov    al,ds:0x9c30001d
    2f4d:	01 00                	add    DWORD PTR [eax],eax
    2f4f:	00 5a 15             	add    BYTE PTR [edx+0x15],bl
    2f52:	00 00                	add    BYTE PTR [eax],al
    2f54:	02 01                	add    al,BYTE PTR [ecx]
    2f56:	06                   	push   es
    2f57:	64 00 00             	add    BYTE PTR fs:[eax],al
    2f5a:	00 02                	add    BYTE PTR [edx],al
    2f5c:	01 06                	add    DWORD PTR [esi],eax
    2f5e:	5d                   	pop    ebp
    2f5f:	00 00                	add    BYTE PTR [eax],al
    2f61:	00 02                	add    BYTE PTR [edx],al
    2f63:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    2f69:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2f70:	02 08                	add    cl,BYTE PTR [eax]
    2f72:	05 00 00 00 00       	add    eax,0x0
    2f77:	02 01                	add    al,BYTE PTR [ecx]
    2f79:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2f7c:	00 00                	add    BYTE PTR [eax],al
    2f7e:	02 02                	add    al,BYTE PTR [edx]
    2f80:	07                   	pop    es
    2f81:	0e                   	push   cs
    2f82:	00 00                	add    BYTE PTR [eax],al
    2f84:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    2f87:	00 00                	add    BYTE PTR [eax],al
    2f89:	00 02                	add    BYTE PTR [edx],al
    2f8b:	34 61                	xor    al,0x61
    2f8d:	00 00                	add    BYTE PTR [eax],al
    2f8f:	00 02                	add    BYTE PTR [edx],al
    2f91:	04 07                	add    al,0x7
    2f93:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2f96:	00 02                	add    BYTE PTR [edx],al
    2f98:	08 07                	or     BYTE PTR [edi],al
    2f9a:	34 00                	xor    al,0x0
    2f9c:	00 00                	add    BYTE PTR [eax],al
    2f9e:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2fa5:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2fa8:	a2 00 00 00 02       	mov    ds:0x2000000,al
    2fad:	01 02                	add    DWORD PTR [edx],eax
    2faf:	9c                   	pushf  
    2fb0:	00 00                	add    BYTE PTR [eax],al
    2fb2:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2fb5:	00 00                	add    BYTE PTR [eax],al
    2fb7:	00 03                	add    BYTE PTR [ebx],al
    2fb9:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    2fbc:	00 00                	add    BYTE PTR [eax],al
    2fbe:	05 04 95 00 00       	add    eax,0x9504
    2fc3:	00 06                	add    BYTE PTR [esi],al
    2fc5:	25 00 00 00 02       	and    eax,0x2000000
    2fca:	04 07                	add    al,0x7
    2fcc:	39 00                	cmp    DWORD PTR [eax],eax
    2fce:	00 00                	add    BYTE PTR [eax],al
    2fd0:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2fd3:	e8 00 00 00 05       	call   5002fd8 <sysEnter_Vector+0x4ed2fd8>
    2fd8:	04 25                	add    al,0x25
    2fda:	00 00                	add    BYTE PTR [eax],al
    2fdc:	00 07                	add    BYTE PTR [edi],al
    2fde:	c0 0a 00             	ror    BYTE PTR [edx],0x0
    2fe1:	00 01                	add    BYTE PTR [ecx],al
    2fe3:	57                   	push   edi
    2fe4:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2fe5:	00 00                	add    BYTE PTR [eax],al
    2fe7:	00 a0 1d 00 30 9c    	add    BYTE PTR [eax-0x63cfffe3],ah
    2fed:	01 00                	add    DWORD PTR [eax],eax
    2fef:	00 01                	add    BYTE PTR [ecx],al
    2ff1:	9c                   	pushf  
    2ff2:	43                   	inc    ebx
    2ff3:	01 00                	add    DWORD PTR [eax],eax
    2ff5:	00 08                	add    BYTE PTR [eax],cl
    2ff7:	82                   	(bad)  
    2ff8:	0a 00                	or     al,BYTE PTR [eax]
    2ffa:	00 01                	add    BYTE PTR [ecx],al
    2ffc:	57                   	push   edi
    2ffd:	8f 00                	pop    DWORD PTR [eax]
    2fff:	00 00                	add    BYTE PTR [eax],al
    3001:	02 91 00 08 7b 0a    	add    dl,BYTE PTR [ecx+0xa7b0800]
    3007:	00 00                	add    BYTE PTR [eax],al
    3009:	01 57 43             	add    DWORD PTR [edi+0x43],edx
    300c:	01 00                	add    DWORD PTR [eax],eax
    300e:	00 02                	add    BYTE PTR [edx],al
    3010:	91                   	xchg   ecx,eax
    3011:	04 08                	add    al,0x8
    3013:	87 0a                	xchg   DWORD PTR [edx],ecx
    3015:	00 00                	add    BYTE PTR [eax],al
    3017:	01 57 3a             	add    DWORD PTR [edi+0x3a],edx
    301a:	00 00                	add    BYTE PTR [eax],al
    301c:	00 02                	add    BYTE PTR [edx],al
    301e:	91                   	xchg   ecx,eax
    301f:	08 09                	or     BYTE PTR [ecx],cl
    3021:	73 00                	jae    3023 <sysEnter_Vector-0x12cfdd>
    3023:	01 59 8f             	add    DWORD PTR [ecx-0x71],ebx
    3026:	00 00                	add    BYTE PTR [eax],al
    3028:	00 01                	add    BYTE PTR [ecx],al
    302a:	56                   	push   esi
    302b:	09 61 63             	or     DWORD PTR [ecx+0x63],esp
    302e:	63 00                	arpl   WORD PTR [eax],ax
    3030:	01 5a 9a             	add    DWORD PTR [edx-0x66],ebx
    3033:	00 00                	add    BYTE PTR [eax],al
    3035:	00 01                	add    BYTE PTR [ecx],al
    3037:	57                   	push   edi
    3038:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    303b:	01 5b 3a             	add    DWORD PTR [ebx+0x3a],ebx
    303e:	00 00                	add    BYTE PTR [eax],al
    3040:	00 01                	add    BYTE PTR [ecx],al
    3042:	53                   	push   ebx
    3043:	0a 65 0a             	or     ah,BYTE PTR [ebp+0xa]
    3046:	00 00                	add    BYTE PTR [eax],al
    3048:	01 5c 9a 00          	add    DWORD PTR [edx+ebx*4+0x0],ebx
    304c:	00 00                	add    BYTE PTR [eax],al
    304e:	0b 6e 65             	or     ebp,DWORD PTR [esi+0x65]
    3051:	67 00 01             	add    BYTE PTR [bx+di],al
    3054:	5d                   	pop    ebp
    3055:	3a 00                	cmp    al,BYTE PTR [eax]
    3057:	00 00                	add    BYTE PTR [eax],al
    3059:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    305c:	79 00                	jns    305e <sysEnter_Vector-0x12cfa2>
    305e:	01 5d 3a             	add    DWORD PTR [ebp+0x3a],ebx
    3061:	00 00                	add    BYTE PTR [eax],al
    3063:	00 01                	add    BYTE PTR [ecx],al
    3065:	51                   	push   ecx
    3066:	0a 6c 0a 00          	or     ch,BYTE PTR [edx+ecx*1+0x0]
    306a:	00 01                	add    BYTE PTR [ecx],al
    306c:	5d                   	pop    ebp
    306d:	3a 00                	cmp    al,BYTE PTR [eax]
    306f:	00 00                	add    BYTE PTR [eax],al
    3071:	00 05 04 a8 00 00    	add    BYTE PTR ds:0xa804,al
    3077:	00 0c 4b             	add    BYTE PTR [ebx+ecx*2],cl
    307a:	00 00                	add    BYTE PTR [eax],al
    307c:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    307f:	56                   	push   esi
    3080:	00 00                	add    BYTE PTR [eax],al
    3082:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
    3088:	30 0c b6             	xor    BYTE PTR [esi+esi*4],cl
    308b:	00 00                	add    BYTE PTR [eax],al
    308d:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    3094:	05 03 8c 46 00       	add    eax,0x468c03
    3099:	30 0c 62             	xor    BYTE PTR [edx+eiz*2],cl
    309c:	01 00                	add    DWORD PTR [eax],eax
    309e:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    30a1:	56                   	push   esi
    30a2:	00 00                	add    BYTE PTR [eax],al
    30a4:	00 05 03 84 46 00    	add    BYTE PTR ds:0x468403,al
    30aa:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
    30ad:	00 00                	add    BYTE PTR [eax],al
    30af:	00 05 44 84 00 00    	add    BYTE PTR ds:0x8444,al
    30b5:	00 05 03 94 46 00    	add    BYTE PTR ds:0x469403,al
    30bb:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
    30be:	00 00                	add    BYTE PTR [eax],al
    30c0:	00 05 45 43 01 00    	add    BYTE PTR ds:0x14345,al
    30c6:	00 05 03 90 46 00    	add    BYTE PTR ds:0x469003,al
    30cc:	30 00                	xor    BYTE PTR [eax],al
    30ce:	6d                   	ins    DWORD PTR es:[edi],dx
    30cf:	01 00                	add    DWORD PTR [eax],eax
    30d1:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    30d4:	c7                   	(bad)  
    30d5:	11 00                	adc    DWORD PTR [eax],eax
    30d7:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    30da:	fb                   	sti    
    30db:	00 00                	add    BYTE PTR [eax],al
    30dd:	00 0c cd 0a 00 00 79 	add    BYTE PTR [ecx*8+0x7900000a],cl
    30e4:	00 00                	add    BYTE PTR [eax],al
    30e6:	00 3c 1f             	add    BYTE PTR [edi+ebx*1],bh
    30e9:	00 30                	add    BYTE PTR [eax],dh
    30eb:	b6 00                	mov    dh,0x0
    30ed:	00 00                	add    BYTE PTR [eax],al
    30ef:	dd 16                	fst    QWORD PTR [esi]
    30f1:	00 00                	add    BYTE PTR [eax],al
    30f3:	02 01                	add    al,BYTE PTR [ecx]
    30f5:	06                   	push   es
    30f6:	64 00 00             	add    BYTE PTR fs:[eax],al
    30f9:	00 02                	add    BYTE PTR [edx],al
    30fb:	01 06                	add    DWORD PTR [esi],eax
    30fd:	5d                   	pop    ebp
    30fe:	00 00                	add    BYTE PTR [eax],al
    3100:	00 02                	add    BYTE PTR [edx],al
    3102:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    3108:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    310f:	02 08                	add    cl,BYTE PTR [eax]
    3111:	05 00 00 00 00       	add    eax,0x0
    3116:	02 01                	add    al,BYTE PTR [ecx]
    3118:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    311b:	00 00                	add    BYTE PTR [eax],al
    311d:	02 02                	add    al,BYTE PTR [edx]
    311f:	07                   	pop    es
    3120:	0e                   	push   cs
    3121:	00 00                	add    BYTE PTR [eax],al
    3123:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    3126:	00 00                	add    BYTE PTR [eax],al
    3128:	00 02                	add    BYTE PTR [edx],al
    312a:	34 61                	xor    al,0x61
    312c:	00 00                	add    BYTE PTR [eax],al
    312e:	00 02                	add    BYTE PTR [edx],al
    3130:	04 07                	add    al,0x7
    3132:	3e 00 00             	add    BYTE PTR ds:[eax],al
    3135:	00 02                	add    BYTE PTR [edx],al
    3137:	08 07                	or     BYTE PTR [edi],al
    3139:	34 00                	xor    al,0x0
    313b:	00 00                	add    BYTE PTR [eax],al
    313d:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    3144:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    3147:	a2 00 00 00 02       	mov    ds:0x2000000,al
    314c:	01 02                	add    DWORD PTR [edx],eax
    314e:	9c                   	pushf  
    314f:	00 00                	add    BYTE PTR [eax],al
    3151:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    3154:	00 00                	add    BYTE PTR [eax],al
    3156:	00 03                	add    BYTE PTR [ebx],al
    3158:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    315b:	00 00                	add    BYTE PTR [eax],al
    315d:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3160:	39 00                	cmp    DWORD PTR [eax],eax
    3162:	00 00                	add    BYTE PTR [eax],al
    3164:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3167:	e8 00 00 00 05       	call   500316c <sysEnter_Vector+0x4ed316c>
    316c:	04 25                	add    al,0x25
    316e:	00 00                	add    BYTE PTR [eax],al
    3170:	00 06                	add    BYTE PTR [esi],al
    3172:	a8 05                	test   al,0x5
    3174:	00 00                	add    BYTE PTR [eax],al
    3176:	01 03                	add    DWORD PTR [ebx],eax
    3178:	3c 1f                	cmp    al,0x1f
    317a:	00 30                	add    BYTE PTR [eax],dh
    317c:	96                   	xchg   esi,eax
    317d:	00 00                	add    BYTE PTR [eax],al
    317f:	00 01                	add    BYTE PTR [ecx],al
    3181:	9c                   	pushf  
    3182:	f1                   	icebp  
    3183:	00 00                	add    BYTE PTR [eax],al
    3185:	00 07                	add    BYTE PTR [edi],al
    3187:	c7                   	(bad)  
    3188:	0a 00                	or     al,BYTE PTR [eax]
    318a:	00 01                	add    BYTE PTR [ecx],al
    318c:	03 9d 00 00 00 02    	add    ebx,DWORD PTR [ebp+0x2000000]
    3192:	91                   	xchg   ecx,eax
    3193:	00 08                	add    BYTE PTR [eax],cl
    3195:	64                   	fs
    3196:	73 74                	jae    320c <sysEnter_Vector-0x12cdf4>
    3198:	00 01                	add    BYTE PTR [ecx],al
    319a:	05 9d 00 00 00       	add    eax,0x9d
    319f:	02 91 6c 08 73 72    	add    dl,BYTE PTR [ecx+0x7273086c]
    31a5:	63 00                	arpl   WORD PTR [eax],ax
    31a7:	01 05 9d 00 00 00    	add    DWORD PTR ds:0x9d,eax
    31ad:	02 91 68 08 65 6e    	add    dl,BYTE PTR [ecx+0x6e650868]
    31b3:	64 00 01             	add    BYTE PTR fs:[ecx],al
    31b6:	06                   	push   es
    31b7:	9d                   	popf   
    31b8:	00 00                	add    BYTE PTR [eax],al
    31ba:	00 02                	add    BYTE PTR [edx],al
    31bc:	91                   	xchg   ecx,eax
    31bd:	64 00 06             	add    BYTE PTR fs:[esi],al
    31c0:	e3 0a                	jecxz  31cc <sysEnter_Vector-0x12ce34>
    31c2:	00 00                	add    BYTE PTR [eax],al
    31c4:	01 1f                	add    DWORD PTR [edi],ebx
    31c6:	d2 1f                	rcr    BYTE PTR [edi],cl
    31c8:	00 30                	add    BYTE PTR [eax],dh
    31ca:	20 00                	and    BYTE PTR [eax],al
    31cc:	00 00                	add    BYTE PTR [eax],al
    31ce:	01 9c 15 01 00 00 07 	add    DWORD PTR [ebp+edx*1+0x7000001],ebx
    31d5:	c7                   	(bad)  
    31d6:	0a 00                	or     al,BYTE PTR [eax]
    31d8:	00 01                	add    BYTE PTR [ecx],al
    31da:	1f                   	pop    ds
    31db:	9d                   	popf   
    31dc:	00 00                	add    BYTE PTR [eax],al
    31de:	00 02                	add    BYTE PTR [edx],al
    31e0:	91                   	xchg   ecx,eax
    31e1:	00 00                	add    BYTE PTR [eax],al
    31e3:	09 4b 00             	or     DWORD PTR [ebx+0x0],ecx
    31e6:	00 00                	add    BYTE PTR [eax],al
    31e8:	04 34                	add    al,0x34
    31ea:	56                   	push   esi
    31eb:	00 00                	add    BYTE PTR [eax],al
    31ed:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
    31f3:	30 09                	xor    BYTE PTR [ecx],cl
    31f5:	b6 00                	mov    dh,0x0
    31f7:	00 00                	add    BYTE PTR [eax],al
    31f9:	04 35                	add    al,0x35
    31fb:	56                   	push   esi
    31fc:	00 00                	add    BYTE PTR [eax],al
    31fe:	00 05 03 8c 46 00    	add    BYTE PTR ds:0x468c03,al
    3204:	30 09                	xor    BYTE PTR [ecx],cl
    3206:	62 01                	bound  eax,QWORD PTR [ecx]
    3208:	00 00                	add    BYTE PTR [eax],al
    320a:	04 36                	add    al,0x36
    320c:	56                   	push   esi
    320d:	00 00                	add    BYTE PTR [eax],al
    320f:	00 05 03 84 46 00    	add    BYTE PTR ds:0x468403,al
    3215:	30 09                	xor    BYTE PTR [ecx],cl
    3217:	54                   	push   esp
    3218:	00 00                	add    BYTE PTR [eax],al
    321a:	00 05 44 84 00 00    	add    BYTE PTR ds:0x8444,al
    3220:	00 05 03 94 46 00    	add    BYTE PTR ds:0x469403,al
    3226:	30 09                	xor    BYTE PTR [ecx],cl
    3228:	28 00                	sub    BYTE PTR [eax],al
    322a:	00 00                	add    BYTE PTR [eax],al
    322c:	05 45 6a 01 00       	add    eax,0x16a45
    3231:	00 05 03 90 46 00    	add    BYTE PTR ds:0x469003,al
    3237:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    323d:	00 00                	add    BYTE PTR [eax],al
    323f:	9e                   	sahf   
    3240:	01 00                	add    DWORD PTR [eax],eax
    3242:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3245:	50                   	push   eax
    3246:	12 00                	adc    al,BYTE PTR [eax]
    3248:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    324b:	fb                   	sti    
    324c:	00 00                	add    BYTE PTR [eax],al
    324e:	00 0c f3             	add    BYTE PTR [ebx+esi*8],cl
    3251:	0a 00                	or     al,BYTE PTR [eax]
    3253:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    3256:	00 00                	add    BYTE PTR [eax],al
    3258:	f4                   	hlt    
    3259:	1f                   	pop    ds
    325a:	00 30                	add    BYTE PTR [eax],dh
    325c:	8b 00                	mov    eax,DWORD PTR [eax]
    325e:	00 00                	add    BYTE PTR [eax],al
    3260:	ba 17 00 00 02       	mov    edx,0x2000017
    3265:	01 06                	add    DWORD PTR [esi],eax
    3267:	64 00 00             	add    BYTE PTR fs:[eax],al
    326a:	00 02                	add    BYTE PTR [edx],al
    326c:	01 06                	add    DWORD PTR [esi],eax
    326e:	5d                   	pop    ebp
    326f:	00 00                	add    BYTE PTR [eax],al
    3271:	00 02                	add    BYTE PTR [edx],al
    3273:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    3279:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3280:	02 08                	add    cl,BYTE PTR [eax]
    3282:	05 00 00 00 00       	add    eax,0x0
    3287:	02 01                	add    al,BYTE PTR [ecx]
    3289:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    328c:	00 00                	add    BYTE PTR [eax],al
    328e:	02 02                	add    al,BYTE PTR [edx]
    3290:	07                   	pop    es
    3291:	0e                   	push   cs
    3292:	00 00                	add    BYTE PTR [eax],al
    3294:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    3297:	00 00                	add    BYTE PTR [eax],al
    3299:	00 02                	add    BYTE PTR [edx],al
    329b:	34 61                	xor    al,0x61
    329d:	00 00                	add    BYTE PTR [eax],al
    329f:	00 02                	add    BYTE PTR [edx],al
    32a1:	04 07                	add    al,0x7
    32a3:	3e 00 00             	add    BYTE PTR ds:[eax],al
    32a6:	00 02                	add    BYTE PTR [edx],al
    32a8:	08 07                	or     BYTE PTR [edi],al
    32aa:	34 00                	xor    al,0x0
    32ac:	00 00                	add    BYTE PTR [eax],al
    32ae:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    32b5:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    32b8:	a2 00 00 00 02       	mov    ds:0x2000000,al
    32bd:	01 02                	add    DWORD PTR [edx],eax
    32bf:	9c                   	pushf  
    32c0:	00 00                	add    BYTE PTR [eax],al
    32c2:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    32c5:	00 00                	add    BYTE PTR [eax],al
    32c7:	00 03                	add    BYTE PTR [ebx],al
    32c9:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    32cc:	00 00                	add    BYTE PTR [eax],al
    32ce:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    32d1:	39 00                	cmp    DWORD PTR [eax],eax
    32d3:	00 00                	add    BYTE PTR [eax],al
    32d5:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    32d8:	e8 00 00 00 05       	call   50032dd <sysEnter_Vector+0x4ed32dd>
    32dd:	04 25                	add    al,0x25
    32df:	00 00                	add    BYTE PTR [eax],al
    32e1:	00 06                	add    BYTE PTR [esi],al
    32e3:	eb 0a                	jmp    32ef <sysEnter_Vector-0x12cd11>
    32e5:	00 00                	add    BYTE PTR [eax],al
    32e7:	01 33                	add    DWORD PTR [ebx],esi
    32e9:	9d                   	popf   
    32ea:	00 00                	add    BYTE PTR [eax],al
    32ec:	00 f4                	add    ah,dh
    32ee:	1f                   	pop    ds
    32ef:	00 30                	add    BYTE PTR [eax],dh
    32f1:	6e                   	outs   dx,BYTE PTR ds:[esi]
    32f2:	00 00                	add    BYTE PTR [eax],al
    32f4:	00 01                	add    BYTE PTR [ecx],al
    32f6:	9c                   	pushf  
    32f7:	ef                   	out    dx,eax
    32f8:	00 00                	add    BYTE PTR [eax],al
    32fa:	00 07                	add    BYTE PTR [edi],al
    32fc:	09 0b                	or     DWORD PTR [ebx],ecx
    32fe:	00 00                	add    BYTE PTR [eax],al
    3300:	01 33                	add    DWORD PTR [ebx],esi
    3302:	9d                   	popf   
    3303:	00 00                	add    BYTE PTR [eax],al
    3305:	00 02                	add    BYTE PTR [edx],al
    3307:	91                   	xchg   ecx,eax
    3308:	00 07                	add    BYTE PTR [edi],al
    330a:	06                   	push   es
    330b:	0b 00                	or     eax,DWORD PTR [eax]
    330d:	00 01                	add    BYTE PTR [ecx],al
    330f:	33 9d 00 00 00 02    	xor    ebx,DWORD PTR [ebp+0x2000000]
    3315:	91                   	xchg   ecx,eax
    3316:	04 08                	add    al,0x8
    3318:	61                   	popa   
    3319:	00 01                	add    BYTE PTR [ecx],al
    331b:	35 9d 00 00 00       	xor    eax,0x9d
    3320:	01 56 08             	add    DWORD PTR [esi+0x8],edx
    3323:	62 00                	bound  eax,QWORD PTR [eax]
    3325:	01 35 9d 00 00 00    	add    DWORD PTR ds:0x9d,esi
    332b:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
    332e:	09 10                	or     DWORD PTR [eax],edx
    3330:	0b 00                	or     eax,DWORD PTR [eax]
    3332:	00 01                	add    BYTE PTR [ecx],al
    3334:	52                   	push   edx
    3335:	9d                   	popf   
    3336:	00 00                	add    BYTE PTR [eax],al
    3338:	00 62 20             	add    BYTE PTR [edx+0x20],ah
    333b:	00 30                	add    BYTE PTR [eax],dh
    333d:	1d 00 00 00 01       	sbb    eax,0x1000000
    3342:	9c                   	pushf  
    3343:	25 01 00 00 07       	and    eax,0x7000001
    3348:	09 0b                	or     DWORD PTR [ebx],ecx
    334a:	00 00                	add    BYTE PTR [eax],al
    334c:	01 52 9d             	add    DWORD PTR [edx-0x63],edx
    334f:	00 00                	add    BYTE PTR [eax],al
    3351:	00 02                	add    BYTE PTR [edx],al
    3353:	91                   	xchg   ecx,eax
    3354:	00 07                	add    BYTE PTR [edi],al
    3356:	06                   	push   es
    3357:	0b 00                	or     eax,DWORD PTR [eax]
    3359:	00 01                	add    BYTE PTR [ecx],al
    335b:	52                   	push   edx
    335c:	9d                   	popf   
    335d:	00 00                	add    BYTE PTR [eax],al
    335f:	00 02                	add    BYTE PTR [edx],al
    3361:	91                   	xchg   ecx,eax
    3362:	04 00                	add    al,0x0
    3364:	0a 25 00 00 00 35    	or     ah,BYTE PTR ds:0x35000000
    336a:	01 00                	add    DWORD PTR [eax],eax
    336c:	00 0b                	add    BYTE PTR [ebx],cl
    336e:	96                   	xchg   esi,eax
    336f:	00 00                	add    BYTE PTR [eax],al
    3371:	00 65 00             	add    BYTE PTR [ebp+0x0],ah
    3374:	0c 00                	or     al,0x0
    3376:	0b 00                	or     eax,DWORD PTR [eax]
    3378:	00 01                	add    BYTE PTR [ecx],al
    337a:	19 25 01 00 00 05    	sbb    DWORD PTR ds:0x5000001,esp
    3380:	03 20                	add    esp,DWORD PTR [eax]
    3382:	45                   	inc    ebp
    3383:	00 30                	add    BYTE PTR [eax],dh
    3385:	0d 4b 00 00 00       	or     eax,0x4b
    338a:	04 34                	add    al,0x34
    338c:	56                   	push   esi
    338d:	00 00                	add    BYTE PTR [eax],al
    338f:	00 05 03 88 46 00    	add    BYTE PTR ds:0x468803,al
    3395:	30 0d b6 00 00 00    	xor    BYTE PTR ds:0xb6,cl
    339b:	04 35                	add    al,0x35
    339d:	56                   	push   esi
    339e:	00 00                	add    BYTE PTR [eax],al
    33a0:	00 05 03 8c 46 00    	add    BYTE PTR ds:0x468c03,al
    33a6:	30 0d 62 01 00 00    	xor    BYTE PTR ds:0x162,cl
    33ac:	04 36                	add    al,0x36
    33ae:	56                   	push   esi
    33af:	00 00                	add    BYTE PTR [eax],al
    33b1:	00 05 03 84 46 00    	add    BYTE PTR ds:0x468403,al
    33b7:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
    33bd:	05 44 84 00 00       	add    eax,0x8444
    33c2:	00 05 03 94 46 00    	add    BYTE PTR ds:0x469403,al
    33c8:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
    33ce:	05 45 9b 01 00       	add    eax,0x19b45
    33d3:	00 05 03 90 46 00    	add    BYTE PTR ds:0x469003,al
    33d9:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    33df:	00 00                	add    BYTE PTR [eax],al
    33e1:	81 04 00 00 04 00 18 	add    DWORD PTR [eax+eax*1],0x18000400
    33e8:	13 00                	adc    eax,DWORD PTR [eax]
    33ea:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    33ed:	fb                   	sti    
    33ee:	00 00                	add    BYTE PTR [eax],al
    33f0:	00 0c 94             	add    BYTE PTR [esp+edx*4],cl
    33f3:	0b 00                	or     eax,DWORD PTR [eax]
    33f5:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    33f8:	00 00                	add    BYTE PTR [eax],al
    33fa:	80 20 00             	and    BYTE PTR [eax],0x0
    33fd:	30 31                	xor    BYTE PTR [ecx],dh
    33ff:	0c 00                	or     al,0x0
    3401:	00 8f 18 00 00 02    	add    BYTE PTR [edi+0x2000018],cl
    3407:	eb 02                	jmp    340b <sysEnter_Vector-0x12cbf5>
    3409:	00 00                	add    BYTE PTR [eax],al
    340b:	04 cd                	add    al,0xcd
    340d:	00 00                	add    BYTE PTR [eax],al
    340f:	00 06                	add    BYTE PTR [esi],al
    3411:	15 cd 00 00 00       	adc    eax,0xcd
    3416:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
    3419:	00 00                	add    BYTE PTR [eax],al
    341b:	00 03                	add    BYTE PTR [ebx],al
    341d:	7b 03                	jnp    3422 <sysEnter_Vector-0x12cbde>
    341f:	00 00                	add    BYTE PTR [eax],al
    3421:	01 03                	add    DWORD PTR [ebx],eax
    3423:	67 02 00             	add    al,BYTE PTR [bx+si]
    3426:	00 02                	add    BYTE PTR [edx],al
    3428:	03 dd                	add    ebx,ebp
    342a:	02 00                	add    al,BYTE PTR [eax]
    342c:	00 03                	add    BYTE PTR [ebx],al
    342e:	03 5a 02             	add    ebx,DWORD PTR [edx+0x2]
    3431:	00 00                	add    BYTE PTR [eax],al
    3433:	04 03                	add    al,0x3
    3435:	95                   	xchg   ebp,eax
    3436:	03 00                	add    eax,DWORD PTR [eax]
    3438:	00 05 03 cb 03 00    	add    BYTE PTR ds:0x3cb03,al
    343e:	00 4f 03             	add    BYTE PTR [edi+0x3],cl
    3441:	36 03 00             	add    eax,DWORD PTR ss:[eax]
    3444:	00 59 03             	add    BYTE PTR [ecx+0x3],bl
    3447:	da 03                	fiadd  DWORD PTR [ebx]
    3449:	00 00                	add    BYTE PTR [eax],al
    344b:	61                   	popa   
    344c:	03 c9                	add    ecx,ecx
    344e:	02 00                	add    al,BYTE PTR [eax]
    3450:	00 97 04 53 03 00    	add    BYTE PTR [edi+0x35304],dl
    3456:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    3459:	04 29                	add    al,0x29
    345b:	03 00                	add    eax,DWORD PTR [eax]
    345d:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    3461:	bd 03 00 00 65       	mov    ebp,0x65000003
    3466:	01 04 bb             	add    DWORD PTR [ebx+edi*4],eax
    3469:	02 00                	add    al,BYTE PTR [eax]
    346b:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    346e:	04 f2                	add    al,0xf2
    3470:	03 00                	add    eax,DWORD PTR [eax]
    3472:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    3475:	04 01                	add    al,0x1
    3477:	03 00                	add    eax,DWORD PTR [eax]
    3479:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    347c:	04 a0                	add    al,0xa0
    347e:	02 00                	add    al,BYTE PTR [eax]
    3480:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    3483:	04 6a                	add    al,0x6a
    3485:	03 00                	add    eax,DWORD PTR [eax]
    3487:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    348a:	04 a3                	add    al,0xa3
    348c:	03 00                	add    eax,DWORD PTR [eax]
    348e:	00 00                	add    BYTE PTR [eax],al
    3490:	03 04 0e             	add    eax,DWORD PTR [esi+ecx*1]
    3493:	03 00                	add    eax,DWORD PTR [eax]
    3495:	00 01                	add    BYTE PTR [ecx],al
    3497:	03 04 af             	add    eax,DWORD PTR [edi+ebp*4]
    349a:	02 00                	add    al,BYTE PTR [eax]
    349c:	00 02                	add    BYTE PTR [edx],al
    349e:	03 04 74             	add    eax,DWORD PTR [esp+esi*2]
    34a1:	02 00                	add    al,BYTE PTR [eax]
    34a3:	00 03                	add    BYTE PTR [ebx],al
    34a5:	03 04 84             	add    eax,DWORD PTR [esp+eax*4]
    34a8:	02 00                	add    al,BYTE PTR [eax]
    34aa:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    34ad:	00 05 04 07 3e 00    	add    BYTE PTR ds:0x3e0704,al
    34b3:	00 00                	add    BYTE PTR [eax],al
    34b5:	05 01 06 64 00       	add    eax,0x640601
    34ba:	00 00                	add    BYTE PTR [eax],al
    34bc:	05 01 06 5d 00       	add    eax,0x5d0601
    34c1:	00 00                	add    BYTE PTR [eax],al
    34c3:	05 02 05 f1 00       	add    eax,0xf10502
    34c8:	00 00                	add    BYTE PTR [eax],al
    34ca:	06                   	push   es
    34cb:	04 05                	add    al,0x5
    34cd:	69 6e 74 00 05 08 05 	imul   ebp,DWORD PTR [esi+0x74],0x5080500
    34d4:	00 00                	add    BYTE PTR [eax],al
    34d6:	00 00                	add    BYTE PTR [eax],al
    34d8:	05 01 08 5b 00       	add    eax,0x5b0801
    34dd:	00 00                	add    BYTE PTR [eax],al
    34df:	05 02 07 0e 00       	add    eax,0xe0702
    34e4:	00 00                	add    BYTE PTR [eax],al
    34e6:	07                   	pop    es
    34e7:	70 00                	jo     34e9 <sysEnter_Vector-0x12cb17>
    34e9:	00 00                	add    BYTE PTR [eax],al
    34eb:	02 34 cd 00 00 00 05 	add    dh,BYTE PTR [ecx*8+0x5000000]
    34f2:	08 07                	or     BYTE PTR [edi],al
    34f4:	34 00                	xor    al,0x0
    34f6:	00 00                	add    BYTE PTR [eax],al
    34f8:	05 04 05 05 00       	add    eax,0x50504
    34fd:	00 00                	add    BYTE PTR [eax],al
    34ff:	05 0c 04 a2 00       	add    eax,0xa2040c
    3504:	00 00                	add    BYTE PTR [eax],al
    3506:	05 01 02 9c 00       	add    eax,0x9c0201
    350b:	00 00                	add    BYTE PTR [eax],al
    350d:	07                   	pop    es
    350e:	69 00 00 00 03 2a    	imul   eax,DWORD PTR [eax],0x2a030000
    3514:	17                   	pop    ss
    3515:	01 00                	add    DWORD PTR [eax],eax
    3517:	00 08                	add    BYTE PTR [eax],cl
    3519:	74 6d                	je     3588 <sysEnter_Vector-0x12ca78>
    351b:	00 2c 03             	add    BYTE PTR [ebx+eax*1],ch
    351e:	2c c7                	sub    al,0xc7
    3520:	01 00                	add    DWORD PTR [eax],eax
    3522:	00 09                	add    BYTE PTR [ecx],cl
    3524:	0b 06                	or     eax,DWORD PTR [esi]
    3526:	00 00                	add    BYTE PTR [eax],al
    3528:	03 2e                	add    ebp,DWORD PTR [esi]
    352a:	e9 00 00 00 00       	jmp    352f <sysEnter_Vector-0x12cad1>
    352f:	09 60 05             	or     DWORD PTR [eax+0x5],esp
    3532:	00 00                	add    BYTE PTR [eax],al
    3534:	03 2f                	add    ebp,DWORD PTR [edi]
    3536:	e9 00 00 00 04       	jmp    400353b <sysEnter_Vector+0x3ed353b>
    353b:	09 58 04             	or     DWORD PTR [eax+0x4],ebx
    353e:	00 00                	add    BYTE PTR [eax],al
    3540:	03 30                	add    esi,DWORD PTR [eax]
    3542:	e9 00 00 00 08       	jmp    8003547 <sysEnter_Vector+0x7ed3547>
    3547:	09 f6                	or     esi,esi
    3549:	05 00 00 03 31       	add    eax,0x31030000
    354e:	e9 00 00 00 0c       	jmp    c003553 <sysEnter_Vector+0xbed3553>
    3553:	09 ca                	or     edx,ecx
    3555:	04 00                	add    al,0x0
    3557:	00 03                	add    BYTE PTR [ebx],al
    3559:	32 e9                	xor    ch,cl
    355b:	00 00                	add    BYTE PTR [eax],al
    355d:	00 10                	add    BYTE PTR [eax],dl
    355f:	09 da                	or     edx,ebx
    3561:	04 00                	add    al,0x0
    3563:	00 03                	add    BYTE PTR [ebx],al
    3565:	33 e9                	xor    ebp,ecx
    3567:	00 00                	add    BYTE PTR [eax],al
    3569:	00 14 09             	add    BYTE PTR [ecx+ecx*1],dl
    356c:	ee                   	out    dx,al
    356d:	05 00 00 03 34       	add    eax,0x34030000
    3572:	e9 00 00 00 18       	jmp    18003577 <sysEnter_Vector+0x17ed3577>
    3577:	09 6d 05             	or     DWORD PTR [ebp+0x5],ebp
    357a:	00 00                	add    BYTE PTR [eax],al
    357c:	03 35 e9 00 00 00    	add    esi,DWORD PTR ds:0xe9
    3582:	1c 09                	sbb    al,0x9
    3584:	0b 05 00 00 03 36    	or     eax,DWORD PTR ds:0x36030000
    358a:	e9 00 00 00 20       	jmp    2000358f <sysEnter_Vector+0x1fed358f>
    358f:	09 b8 05 00 00 03    	or     DWORD PTR [eax+0x3000005],edi
    3595:	37                   	aaa    
    3596:	17                   	pop    ss
    3597:	01 00                	add    DWORD PTR [eax],eax
    3599:	00 24 09             	add    BYTE PTR [ecx+ecx*1],ah
    359c:	8a 04 00             	mov    al,BYTE PTR [eax+eax*1]
    359f:	00 03                	add    BYTE PTR [ebx],al
    35a1:	38 c7                	cmp    bh,al
    35a3:	01 00                	add    DWORD PTR [eax],eax
    35a5:	00 28                	add    BYTE PTR [eax],ch
    35a7:	00 0a                	add    BYTE PTR [edx],cl
    35a9:	04 cd                	add    al,0xcd
    35ab:	01 00                	add    DWORD PTR [eax],eax
    35ad:	00 0b                	add    BYTE PTR [ebx],cl
    35af:	d4 00                	aam    0x0
    35b1:	00 00                	add    BYTE PTR [eax],al
    35b3:	05 04 07 39 00       	add    eax,0x390704
    35b8:	00 00                	add    BYTE PTR [eax],al
    35ba:	05 04 07 e8 00       	add    eax,0xe80704
    35bf:	00 00                	add    BYTE PTR [eax],al
    35c1:	0a 04 d4             	or     al,BYTE PTR [esp+edx*8]
    35c4:	00 00                	add    BYTE PTR [eax],al
    35c6:	00 0c 67             	add    BYTE PTR [edi+eiz*2],cl
    35c9:	0b 00                	or     eax,DWORD PTR [eax]
    35cb:	00 01                	add    BYTE PTR [ecx],al
    35cd:	16                   	push   ss
    35ce:	2c 01                	sub    al,0x1
    35d0:	00 00                	add    BYTE PTR [eax],al
    35d2:	80 20 00             	and    BYTE PTR [eax],0x0
    35d5:	30 44 00 00          	xor    BYTE PTR [eax+eax*1+0x0],al
    35d9:	00 01                	add    BYTE PTR [ecx],al
    35db:	9c                   	pushf  
    35dc:	0e                   	push   cs
    35dd:	02 00                	add    al,BYTE PTR [eax]
    35df:	00 0d 51 04 00 00    	add    BYTE PTR ds:0x451,cl
    35e5:	01 18                	add    DWORD PTR [eax],ebx
    35e7:	05 01 00 00 02       	add    eax,0x2000001
    35ec:	91                   	xchg   ecx,eax
    35ed:	6c                   	ins    BYTE PTR es:[edi],dx
    35ee:	00 0e                	add    BYTE PTR [esi],cl
    35f0:	30 0b                	xor    BYTE PTR [ebx],cl
    35f2:	00 00                	add    BYTE PTR [eax],al
    35f4:	01 1e                	add    DWORD PTR [esi],ebx
    35f6:	7c 02                	jl     35fa <sysEnter_Vector-0x12ca06>
    35f8:	00 00                	add    BYTE PTR [eax],al
    35fa:	c4 20                	les    esp,FWORD PTR [eax]
    35fc:	00 30                	add    BYTE PTR [eax],dh
    35fe:	19 03                	sbb    DWORD PTR [ebx],eax
    3600:	00 00                	add    BYTE PTR [eax],al
    3602:	01 9c 7c 02 00 00 0f 	add    DWORD PTR [esp+edi*2+0xf000002],ebx
    3609:	39 0b                	cmp    DWORD PTR [ebx],ecx
    360b:	00 00                	add    BYTE PTR [eax],al
    360d:	01 1e                	add    DWORD PTR [esi],ebx
    360f:	82                   	(bad)  
    3610:	02 00                	add    al,BYTE PTR [eax]
    3612:	00 02                	add    BYTE PTR [edx],al
    3614:	91                   	xchg   ecx,eax
    3615:	00 0f                	add    BYTE PTR [edi],cl
    3617:	8e 0b                	mov    cs,WORD PTR [ebx]
    3619:	00 00                	add    BYTE PTR [eax],al
    361b:	01 1e                	add    DWORD PTR [esi],ebx
    361d:	7c 02                	jl     3621 <sysEnter_Vector-0x12c9df>
    361f:	00 00                	add    BYTE PTR [eax],al
    3621:	02 91 04 0d 67 0b    	add    dl,BYTE PTR [ecx+0xb670d04]
    3627:	00 00                	add    BYTE PTR [eax],al
    3629:	01 1f                	add    DWORD PTR [edi],ebx
    362b:	2c 01                	sub    al,0x1
    362d:	00 00                	add    BYTE PTR [eax],al
    362f:	02 91 68 0d 6c 0b    	add    dl,BYTE PTR [ecx+0xb6c0d68]
    3635:	00 00                	add    BYTE PTR [eax],al
    3637:	01 20                	add    DWORD PTR [eax],esp
    3639:	d2 01                	rol    BYTE PTR [ecx],cl
    363b:	00 00                	add    BYTE PTR [eax],al
    363d:	02 91 64 0d 21 0b    	add    dl,BYTE PTR [ecx+0xb210d64]
    3643:	00 00                	add    BYTE PTR [eax],al
    3645:	01 20                	add    DWORD PTR [eax],esp
    3647:	d2 01                	rol    BYTE PTR [ecx],cl
    3649:	00 00                	add    BYTE PTR [eax],al
    364b:	02 91 70 0d dd 04    	add    dl,BYTE PTR [ecx+0x4dd0d70]
    3651:	00 00                	add    BYTE PTR [eax],al
    3653:	01 21                	add    DWORD PTR [ecx],esp
    3655:	e9 00 00 00 02       	jmp    200365a <sysEnter_Vector+0x1ed365a>
    365a:	91                   	xchg   ecx,eax
    365b:	6c                   	ins    BYTE PTR es:[edi],dx
    365c:	00 0a                	add    BYTE PTR [edx],cl
    365e:	04 37                	add    al,0x37
    3660:	01 00                	add    DWORD PTR [eax],eax
    3662:	00 0a                	add    BYTE PTR [edx],cl
    3664:	04 88                	add    al,0x88
    3666:	02 00                	add    al,BYTE PTR [eax]
    3668:	00 0b                	add    BYTE PTR [ebx],cl
    366a:	2c 01                	sub    al,0x1
    366c:	00 00                	add    BYTE PTR [eax],al
    366e:	10 17                	adc    BYTE PTR [edi],dl
    3670:	0b 00                	or     eax,DWORD PTR [eax]
    3672:	00 01                	add    BYTE PTR [ecx],al
    3674:	3a 7c 02 00          	cmp    bh,BYTE PTR [edx+eax*1+0x0]
    3678:	00 dd                	add    ch,bl
    367a:	23 00                	and    eax,DWORD PTR [eax]
    367c:	30 3f                	xor    BYTE PTR [edi],bh
    367e:	00 00                	add    BYTE PTR [eax],al
    3680:	00 01                	add    BYTE PTR [ecx],al
    3682:	9c                   	pushf  
    3683:	cf                   	iret   
    3684:	02 00                	add    al,BYTE PTR [eax]
    3686:	00 0f                	add    BYTE PTR [edi],cl
    3688:	39 0b                	cmp    DWORD PTR [ebx],ecx
    368a:	00 00                	add    BYTE PTR [eax],al
    368c:	01 3a                	add    DWORD PTR [edx],edi
    368e:	82                   	(bad)  
    368f:	02 00                	add    al,BYTE PTR [eax]
    3691:	00 02                	add    BYTE PTR [edx],al
    3693:	91                   	xchg   ecx,eax
    3694:	00 11                	add    BYTE PTR [ecx],dl
    3696:	74 00                	je     3698 <sysEnter_Vector-0x12c968>
    3698:	01 3b                	add    DWORD PTR [ebx],edi
    369a:	2c 01                	sub    al,0x1
    369c:	00 00                	add    BYTE PTR [eax],al
    369e:	02 91 6c 0d 8e 0b    	add    dl,BYTE PTR [ecx+0xb8e0d6c]
    36a4:	00 00                	add    BYTE PTR [eax],al
    36a6:	01 3c 37             	add    DWORD PTR [edi+esi*1],edi
    36a9:	01 00                	add    DWORD PTR [eax],eax
    36ab:	00 02                	add    BYTE PTR [edx],al
    36ad:	91                   	xchg   ecx,eax
    36ae:	40                   	inc    eax
    36af:	00 10                	add    BYTE PTR [eax],dl
    36b1:	3f                   	aas    
    36b2:	0b 00                	or     eax,DWORD PTR [eax]
    36b4:	00 01                	add    BYTE PTR [ecx],al
    36b6:	42                   	inc    edx
    36b7:	7c 02                	jl     36bb <sysEnter_Vector-0x12c945>
    36b9:	00 00                	add    BYTE PTR [eax],al
    36bb:	1c 24                	sbb    al,0x24
    36bd:	00 30                	add    BYTE PTR [eax],dh
    36bf:	3e 00 00             	add    BYTE PTR ds:[eax],al
    36c2:	00 01                	add    BYTE PTR [ecx],al
    36c4:	9c                   	pushf  
    36c5:	11 03                	adc    DWORD PTR [ebx],eax
    36c7:	00 00                	add    BYTE PTR [eax],al
    36c9:	0f 39                	(bad)  
    36cb:	0b 00                	or     eax,DWORD PTR [eax]
    36cd:	00 01                	add    BYTE PTR [ecx],al
    36cf:	42                   	inc    edx
    36d0:	82                   	(bad)  
    36d1:	02 00                	add    al,BYTE PTR [eax]
    36d3:	00 02                	add    BYTE PTR [edx],al
    36d5:	91                   	xchg   ecx,eax
    36d6:	00 0f                	add    BYTE PTR [edi],cl
    36d8:	8e 0b                	mov    cs,WORD PTR [ebx]
    36da:	00 00                	add    BYTE PTR [eax],al
    36dc:	01 42 7c             	add    DWORD PTR [edx+0x7c],eax
    36df:	02 00                	add    al,BYTE PTR [eax]
    36e1:	00 02                	add    BYTE PTR [edx],al
    36e3:	91                   	xchg   ecx,eax
    36e4:	04 11                	add    al,0x11
    36e6:	74 00                	je     36e8 <sysEnter_Vector-0x12c918>
    36e8:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
    36eb:	01 00                	add    DWORD PTR [eax],eax
    36ed:	00 02                	add    BYTE PTR [edx],al
    36ef:	91                   	xchg   ecx,eax
    36f0:	6c                   	ins    BYTE PTR es:[edi],dx
    36f1:	00 0e                	add    BYTE PTR [esi],cl
    36f3:	65 0b 00             	or     eax,DWORD PTR gs:[eax]
    36f6:	00 01                	add    BYTE PTR [ecx],al
    36f8:	49                   	dec    ecx
    36f9:	2c 01                	sub    al,0x1
    36fb:	00 00                	add    BYTE PTR [eax],al
    36fd:	5a                   	pop    edx
    36fe:	24 00                	and    al,0x0
    3700:	30 57 08             	xor    BYTE PTR [edi+0x8],dl
    3703:	00 00                	add    BYTE PTR [eax],al
    3705:	01 9c a9 03 00 00 0f 	add    DWORD PTR [ecx+ebp*4+0xf000003],ebx
    370c:	8e 0b                	mov    cs,WORD PTR [ebx]
    370e:	00 00                	add    BYTE PTR [eax],al
    3710:	01 49 7c             	add    DWORD PTR [ecx+0x7c],ecx
    3713:	02 00                	add    al,BYTE PTR [eax]
    3715:	00 02                	add    BYTE PTR [edx],al
    3717:	91                   	xchg   ecx,eax
    3718:	00 11                	add    BYTE PTR [ecx],dl
    371a:	64                   	fs
    371b:	61                   	popa   
    371c:	79 00                	jns    371e <sysEnter_Vector-0x12c8e2>
    371e:	01 4a 17             	add    DWORD PTR [edx+0x17],ecx
    3721:	01 00                	add    DWORD PTR [eax],eax
    3723:	00 02                	add    BYTE PTR [edx],al
    3725:	91                   	xchg   ecx,eax
    3726:	68 0d dd 04 00       	push   0x4dd0d
    372b:	00 01                	add    BYTE PTR [ecx],al
    372d:	4a                   	dec    edx
    372e:	17                   	pop    ss
    372f:	01 00                	add    DWORD PTR [eax],eax
    3731:	00 02                	add    BYTE PTR [edx],al
    3733:	91                   	xchg   ecx,eax
    3734:	54                   	push   esp
    3735:	0d da 04 00 00       	or     eax,0x4da
    373a:	01 4b e9             	add    DWORD PTR [ebx-0x17],ecx
    373d:	00 00                	add    BYTE PTR [eax],al
    373f:	00 02                	add    BYTE PTR [edx],al
    3741:	91                   	xchg   ecx,eax
    3742:	4c                   	dec    esp
    3743:	0d 70 05 00 00       	or     eax,0x570
    3748:	01 4c e9 00          	add    DWORD PTR [ecx+ebp*8+0x0],ecx
    374c:	00 00                	add    BYTE PTR [eax],al
    374e:	02 91 64 0d 88 0b    	add    dl,BYTE PTR [ecx+0xb880d64]
    3754:	00 00                	add    BYTE PTR [eax],al
    3756:	01 4c e9 00          	add    DWORD PTR [ecx+ebp*8+0x0],ecx
    375a:	00 00                	add    BYTE PTR [eax],al
    375c:	02 91 60 0d d0 05    	add    dl,BYTE PTR [ecx+0x5d00d60]
    3762:	00 00                	add    BYTE PTR [eax],al
    3764:	01 4d 17             	add    DWORD PTR [ebp+0x17],ecx
    3767:	01 00                	add    DWORD PTR [eax],eax
    3769:	00 02                	add    BYTE PTR [edx],al
    376b:	91                   	xchg   ecx,eax
    376c:	50                   	push   eax
    376d:	0d 7f 0b 00 00       	or     eax,0xb7f
    3772:	01 4e e9             	add    DWORD PTR [esi-0x17],ecx
    3775:	00 00                	add    BYTE PTR [eax],al
    3777:	00 02                	add    BYTE PTR [edx],al
    3779:	91                   	xchg   ecx,eax
    377a:	5c                   	pop    esp
    377b:	11 64 73 74          	adc    DWORD PTR [ebx+esi*2+0x74],esp
    377f:	00 01                	add    BYTE PTR [ecx],al
    3781:	4f                   	dec    edi
    3782:	17                   	pop    ss
    3783:	01 00                	add    DWORD PTR [eax],eax
    3785:	00 02                	add    BYTE PTR [edx],al
    3787:	91                   	xchg   ecx,eax
    3788:	58                   	pop    eax
    3789:	00 12                	add    BYTE PTR [edx],dl
    378b:	4b                   	dec    ebx
    378c:	00 00                	add    BYTE PTR [eax],al
    378e:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3791:	05 01 00 00 05       	add    eax,0x5000001
    3796:	03 88 46 00 30 12    	add    ecx,DWORD PTR [eax+0x12300046]
    379c:	b6 00                	mov    dh,0x0
    379e:	00 00                	add    BYTE PTR [eax],al
    37a0:	04 35                	add    al,0x35
    37a2:	05 01 00 00 05       	add    eax,0x5000001
    37a7:	03 8c 46 00 30 12 62 	add    ecx,DWORD PTR [esi+eax*2+0x62123000]
    37ae:	01 00                	add    DWORD PTR [eax],eax
    37b0:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    37b3:	05 01 00 00 05       	add    eax,0x5000001
    37b8:	03 84 46 00 30 12 54 	add    eax,DWORD PTR [esi+eax*2+0x54123000]
    37bf:	00 00                	add    BYTE PTR [eax],al
    37c1:	00 05 44 2c 01 00    	add    BYTE PTR ds:0x12c44,al
    37c7:	00 05 03 94 46 00    	add    BYTE PTR ds:0x469403,al
    37cd:	30 12                	xor    BYTE PTR [edx],dl
    37cf:	28 00                	sub    BYTE PTR [eax],al
    37d1:	00 00                	add    BYTE PTR [eax],al
    37d3:	05 45 fe 03 00       	add    eax,0x3fe45
    37d8:	00 05 03 90 46 00    	add    BYTE PTR ds:0x469003,al
    37de:	30 0a                	xor    BYTE PTR [edx],cl
    37e0:	04 e0                	add    al,0xe0
    37e2:	01 00                	add    DWORD PTR [eax],eax
    37e4:	00 12                	add    BYTE PTR [edx],dl
    37e6:	75 0b                	jne    37f3 <sysEnter_Vector-0x12c80d>
    37e8:	00 00                	add    BYTE PTR [eax],al
    37ea:	01 0c e9             	add    DWORD PTR [ecx+ebp*8],ecx
    37ed:	00 00                	add    BYTE PTR [eax],al
    37ef:	00 05 03 88 45 00    	add    BYTE PTR ds:0x458803,al
    37f5:	30 12                	xor    BYTE PTR [edx],dl
    37f7:	27                   	daa    
    37f8:	0b 00                	or     eax,DWORD PTR [eax]
    37fa:	00 01                	add    BYTE PTR [ecx],al
    37fc:	0d 17 01 00 00       	or     eax,0x117
    3801:	05 03 b8 46 00       	add    eax,0x46b803
    3806:	30 13                	xor    BYTE PTR [ebx],dl
    3808:	e0 01                	loopne 380b <sysEnter_Vector-0x12c7f5>
    380a:	00 00                	add    BYTE PTR [eax],al
    380c:	36                   	ss
    380d:	04 00                	add    al,0x0
    380f:	00 14 d9             	add    BYTE PTR [ecx+ebx*8],dl
    3812:	01 00                	add    DWORD PTR [eax],eax
    3814:	00 01                	add    BYTE PTR [ecx],al
    3816:	00 12                	add    BYTE PTR [edx],dl
    3818:	4b                   	dec    ebx
    3819:	0b 00                	or     eax,DWORD PTR [eax]
    381b:	00 01                	add    BYTE PTR [ecx],al
    381d:	0e                   	push   cs
    381e:	26                   	es
    381f:	04 00                	add    al,0x0
    3821:	00 05 03 7c 46 00    	add    BYTE PTR ds:0x467c03,al
    3827:	30 12                	xor    BYTE PTR [edx],dl
    3829:	59                   	pop    ecx
    382a:	0b 00                	or     eax,DWORD PTR [eax]
    382c:	00 01                	add    BYTE PTR [ecx],al
    382e:	0f e9 00             	psubsw mm0,QWORD PTR [eax]
    3831:	00 00                	add    BYTE PTR [eax],al
    3833:	05 03 bc 46 00       	add    eax,0x46bc03
    3838:	30 13                	xor    BYTE PTR [ebx],dl
    383a:	e9 00 00 00 6e       	jmp    6e00383f <ticksToWait+0x3dfff183>
    383f:	04 00                	add    al,0x0
    3841:	00 14 d9             	add    BYTE PTR [ecx+ebx*8],dl
    3844:	01 00                	add    DWORD PTR [eax],eax
    3846:	00 01                	add    BYTE PTR [ecx],al
    3848:	14 d9                	adc    al,0xd9
    384a:	01 00                	add    DWORD PTR [eax],eax
    384c:	00 0b                	add    BYTE PTR [ebx],cl
    384e:	00 12                	add    BYTE PTR [edx],dl
    3850:	53                   	push   ebx
    3851:	0b 00                	or     eax,DWORD PTR [eax]
    3853:	00 01                	add    BYTE PTR [ecx],al
    3855:	11 7f 04             	adc    DWORD PTR [edi+0x4],edi
    3858:	00 00                	add    BYTE PTR [eax],al
    385a:	05 03 a0 43 00       	add    eax,0x43a003
    385f:	30 0b                	xor    BYTE PTR [ebx],cl
    3861:	58                   	pop    eax
    3862:	04 00                	add    al,0x0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	01 11                	add    DWORD PTR [ecx],edx
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
       b:	11 01                	adc    DWORD PTR [ecx],eax
       d:	12 06                	adc    al,BYTE PTR [esi]
       f:	10 17                	adc    BYTE PTR [edi],dl
      11:	00 00                	add    BYTE PTR [eax],al
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      1b:	0e                   	push   cs
      1c:	00 00                	add    BYTE PTR [eax],al
      1e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      26:	08 00                	or     BYTE PTR [eax],al
      28:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      2b:	00 03                	add    BYTE PTR [ebx],al
      2d:	0e                   	push   cs
      2e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      30:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      32:	49                   	dec    ecx
      33:	13 00                	adc    eax,DWORD PTR [eax]
      35:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      3b:	49                   	dec    ecx
      3c:	13 00                	adc    eax,DWORD PTR [eax]
      3e:	00 06                	add    BYTE PTR [esi],al
      40:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
      44:	00 00                	add    BYTE PTR [eax],al
      46:	07                   	pop    es
      47:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      4a:	19 03                	sbb    DWORD PTR [ebx],eax
      4c:	0e                   	push   cs
      4d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      4f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      51:	27                   	daa    
      52:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      55:	11 01                	adc    DWORD PTR [ecx],eax
      57:	12 06                	adc    al,BYTE PTR [esi]
      59:	40                   	inc    eax
      5a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      60:	00 00                	add    BYTE PTR [eax],al
      62:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
      68:	0b 3b                	or     edi,DWORD PTR [ebx]
      6a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      6d:	02 18                	add    bl,BYTE PTR [eax]
      6f:	00 00                	add    BYTE PTR [eax],al
      71:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
      74:	03 0e                	add    ecx,DWORD PTR [esi]
      76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      7a:	49                   	dec    ecx
      7b:	13 3f                	adc    edi,DWORD PTR [edi]
      7d:	19 02                	sbb    DWORD PTR [edx],eax
      7f:	18 00                	sbb    BYTE PTR [eax],al
      81:	00 00                	add    BYTE PTR [eax],al
      83:	01 11                	add    DWORD PTR [ecx],edx
      85:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      8b:	0e                   	push   cs
      8c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      8e:	11 01                	adc    DWORD PTR [ecx],eax
      90:	12 06                	adc    al,BYTE PTR [esi]
      92:	10 17                	adc    BYTE PTR [edi],dl
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      99:	0b 0b                	or     ecx,DWORD PTR [ebx]
      9b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      9e:	0e                   	push   cs
      9f:	00 00                	add    BYTE PTR [eax],al
      a1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      a4:	0b 0b                	or     ecx,DWORD PTR [ebx]
      a6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      a9:	08 00                	or     BYTE PTR [eax],al
      ab:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      ae:	00 03                	add    BYTE PTR [ebx],al
      b0:	0e                   	push   cs
      b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      b5:	49                   	dec    ecx
      b6:	13 00                	adc    eax,DWORD PTR [eax]
      b8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      be:	49                   	dec    ecx
      bf:	13 00                	adc    eax,DWORD PTR [eax]
      c1:	00 06                	add    BYTE PTR [esi],al
      c3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      c6:	19 03                	sbb    DWORD PTR [ebx],eax
      c8:	0e                   	push   cs
      c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      cd:	27                   	daa    
      ce:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      d1:	11 01                	adc    DWORD PTR [ecx],eax
      d3:	12 06                	adc    al,BYTE PTR [esi]
      d5:	40                   	inc    eax
      d6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      dc:	00 00                	add    BYTE PTR [eax],al
      de:	07                   	pop    es
      df:	05 00 03 0e 3a       	add    eax,0x3a0e0300
      e4:	0b 3b                	or     edi,DWORD PTR [ebx]
      e6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      e9:	02 18                	add    bl,BYTE PTR [eax]
      eb:	00 00                	add    BYTE PTR [eax],al
      ed:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
      f0:	03 08                	add    ecx,DWORD PTR [eax]
      f2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      f4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      f6:	49                   	dec    ecx
      f7:	13 02                	adc    eax,DWORD PTR [edx]
      f9:	18 00                	sbb    BYTE PTR [eax],al
      fb:	00 09                	add    BYTE PTR [ecx],cl
      fd:	34 00                	xor    al,0x0
      ff:	03 0e                	add    ecx,DWORD PTR [esi]
     101:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     103:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     105:	49                   	dec    ecx
     106:	13 3f                	adc    edi,DWORD PTR [edi]
     108:	19 02                	sbb    DWORD PTR [edx],eax
     10a:	18 00                	sbb    BYTE PTR [eax],al
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	01 11                	add    DWORD PTR [ecx],edx
     110:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     116:	0e                   	push   cs
     117:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     119:	11 01                	adc    DWORD PTR [ecx],eax
     11b:	12 06                	adc    al,BYTE PTR [esi]
     11d:	10 17                	adc    BYTE PTR [edi],dl
     11f:	00 00                	add    BYTE PTR [eax],al
     121:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     124:	0b 0b                	or     ecx,DWORD PTR [ebx]
     126:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     129:	0e                   	push   cs
     12a:	00 00                	add    BYTE PTR [eax],al
     12c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     12f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     131:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     134:	08 00                	or     BYTE PTR [eax],al
     136:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     139:	00 03                	add    BYTE PTR [ebx],al
     13b:	0e                   	push   cs
     13c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     13e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     140:	49                   	dec    ecx
     141:	13 00                	adc    eax,DWORD PTR [eax]
     143:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     149:	49                   	dec    ecx
     14a:	13 00                	adc    eax,DWORD PTR [eax]
     14c:	00 06                	add    BYTE PTR [esi],al
     14e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     151:	19 03                	sbb    DWORD PTR [ebx],eax
     153:	0e                   	push   cs
     154:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     156:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     158:	27                   	daa    
     159:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     15c:	11 01                	adc    DWORD PTR [ecx],eax
     15e:	12 06                	adc    al,BYTE PTR [esi]
     160:	40                   	inc    eax
     161:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     167:	00 00                	add    BYTE PTR [eax],al
     169:	07                   	pop    es
     16a:	05 00 03 08 3a       	add    eax,0x3a080300
     16f:	0b 3b                	or     edi,DWORD PTR [ebx]
     171:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     174:	02 18                	add    bl,BYTE PTR [eax]
     176:	00 00                	add    BYTE PTR [eax],al
     178:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     17e:	0b 3b                	or     edi,DWORD PTR [ebx]
     180:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     183:	02 18                	add    bl,BYTE PTR [eax]
     185:	00 00                	add    BYTE PTR [eax],al
     187:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     18a:	03 0e                	add    ecx,DWORD PTR [esi]
     18c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     18e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     190:	49                   	dec    ecx
     191:	13 02                	adc    eax,DWORD PTR [edx]
     193:	18 00                	sbb    BYTE PTR [eax],al
     195:	00 0a                	add    BYTE PTR [edx],cl
     197:	34 00                	xor    al,0x0
     199:	03 08                	add    ecx,DWORD PTR [eax]
     19b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     19d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     19f:	49                   	dec    ecx
     1a0:	13 02                	adc    eax,DWORD PTR [edx]
     1a2:	18 00                	sbb    BYTE PTR [eax],al
     1a4:	00 0b                	add    BYTE PTR [ebx],cl
     1a6:	34 00                	xor    al,0x0
     1a8:	03 0e                	add    ecx,DWORD PTR [esi]
     1aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1ae:	49                   	dec    ecx
     1af:	13 3f                	adc    edi,DWORD PTR [edi]
     1b1:	19 02                	sbb    DWORD PTR [edx],eax
     1b3:	18 00                	sbb    BYTE PTR [eax],al
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	01 11                	add    DWORD PTR [ecx],edx
     1b9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     1bf:	0e                   	push   cs
     1c0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     1c2:	11 01                	adc    DWORD PTR [ecx],eax
     1c4:	12 06                	adc    al,BYTE PTR [esi]
     1c6:	10 17                	adc    BYTE PTR [edi],dl
     1c8:	00 00                	add    BYTE PTR [eax],al
     1ca:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     1cd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1cf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1d2:	0e                   	push   cs
     1d3:	00 00                	add    BYTE PTR [eax],al
     1d5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     1d8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1da:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1dd:	08 00                	or     BYTE PTR [eax],al
     1df:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     1e2:	00 03                	add    BYTE PTR [ebx],al
     1e4:	0e                   	push   cs
     1e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1e9:	49                   	dec    ecx
     1ea:	13 00                	adc    eax,DWORD PTR [eax]
     1ec:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     1f2:	49                   	dec    ecx
     1f3:	13 00                	adc    eax,DWORD PTR [eax]
     1f5:	00 06                	add    BYTE PTR [esi],al
     1f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     1fa:	19 03                	sbb    DWORD PTR [ebx],eax
     1fc:	0e                   	push   cs
     1fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     201:	27                   	daa    
     202:	19 11                	sbb    DWORD PTR [ecx],edx
     204:	01 12                	add    DWORD PTR [edx],edx
     206:	06                   	push   es
     207:	40                   	inc    eax
     208:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     20e:	00 00                	add    BYTE PTR [eax],al
     210:	07                   	pop    es
     211:	05 00 03 08 3a       	add    eax,0x3a080300
     216:	0b 3b                	or     edi,DWORD PTR [ebx]
     218:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     21b:	02 18                	add    bl,BYTE PTR [eax]
     21d:	00 00                	add    BYTE PTR [eax],al
     21f:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     222:	03 08                	add    ecx,DWORD PTR [eax]
     224:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     226:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     228:	49                   	dec    ecx
     229:	13 02                	adc    eax,DWORD PTR [edx]
     22b:	18 00                	sbb    BYTE PTR [eax],al
     22d:	00 09                	add    BYTE PTR [ecx],cl
     22f:	34 00                	xor    al,0x0
     231:	03 0e                	add    ecx,DWORD PTR [esi]
     233:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     235:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     237:	49                   	dec    ecx
     238:	13 02                	adc    eax,DWORD PTR [edx]
     23a:	18 00                	sbb    BYTE PTR [eax],al
     23c:	00 0a                	add    BYTE PTR [edx],cl
     23e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     241:	19 03                	sbb    DWORD PTR [ebx],eax
     243:	0e                   	push   cs
     244:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     246:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     248:	27                   	daa    
     249:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     24c:	11 01                	adc    DWORD PTR [ecx],eax
     24e:	12 06                	adc    al,BYTE PTR [esi]
     250:	40                   	inc    eax
     251:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     257:	00 00                	add    BYTE PTR [eax],al
     259:	0b 0b                	or     ecx,DWORD PTR [ebx]
     25b:	01 11                	add    DWORD PTR [ecx],edx
     25d:	01 12                	add    DWORD PTR [edx],edx
     25f:	06                   	push   es
     260:	00 00                	add    BYTE PTR [eax],al
     262:	0c 34                	or     al,0x34
     264:	00 03                	add    BYTE PTR [ebx],al
     266:	0e                   	push   cs
     267:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     269:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     26b:	49                   	dec    ecx
     26c:	13 3f                	adc    edi,DWORD PTR [edi]
     26e:	19 02                	sbb    DWORD PTR [edx],eax
     270:	18 00                	sbb    BYTE PTR [eax],al
     272:	00 00                	add    BYTE PTR [eax],al
     274:	01 11                	add    DWORD PTR [ecx],edx
     276:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     27c:	0e                   	push   cs
     27d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     27f:	11 01                	adc    DWORD PTR [ecx],eax
     281:	12 06                	adc    al,BYTE PTR [esi]
     283:	10 17                	adc    BYTE PTR [edi],dl
     285:	00 00                	add    BYTE PTR [eax],al
     287:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     28a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     28c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     28f:	0e                   	push   cs
     290:	00 00                	add    BYTE PTR [eax],al
     292:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     295:	0b 0b                	or     ecx,DWORD PTR [ebx]
     297:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     29a:	08 00                	or     BYTE PTR [eax],al
     29c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     29f:	00 03                	add    BYTE PTR [ebx],al
     2a1:	0e                   	push   cs
     2a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2a6:	49                   	dec    ecx
     2a7:	13 00                	adc    eax,DWORD PTR [eax]
     2a9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     2af:	49                   	dec    ecx
     2b0:	13 00                	adc    eax,DWORD PTR [eax]
     2b2:	00 06                	add    BYTE PTR [esi],al
     2b4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2b7:	19 03                	sbb    DWORD PTR [ebx],eax
     2b9:	0e                   	push   cs
     2ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2be:	27                   	daa    
     2bf:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     2c2:	11 01                	adc    DWORD PTR [ecx],eax
     2c4:	12 06                	adc    al,BYTE PTR [esi]
     2c6:	40                   	inc    eax
     2c7:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     2cd:	00 00                	add    BYTE PTR [eax],al
     2cf:	07                   	pop    es
     2d0:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     2d5:	0b 3b                	or     edi,DWORD PTR [ebx]
     2d7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     2da:	02 18                	add    bl,BYTE PTR [eax]
     2dc:	00 00                	add    BYTE PTR [eax],al
     2de:	08 0b                	or     BYTE PTR [ebx],cl
     2e0:	01 11                	add    DWORD PTR [ecx],edx
     2e2:	01 12                	add    DWORD PTR [edx],edx
     2e4:	06                   	push   es
     2e5:	00 00                	add    BYTE PTR [eax],al
     2e7:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     2ea:	03 08                	add    ecx,DWORD PTR [eax]
     2ec:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2ee:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2f0:	49                   	dec    ecx
     2f1:	13 02                	adc    eax,DWORD PTR [edx]
     2f3:	18 00                	sbb    BYTE PTR [eax],al
     2f5:	00 0a                	add    BYTE PTR [edx],cl
     2f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2fa:	19 03                	sbb    DWORD PTR [ebx],eax
     2fc:	0e                   	push   cs
     2fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     301:	27                   	daa    
     302:	19 11                	sbb    DWORD PTR [ecx],edx
     304:	01 12                	add    DWORD PTR [edx],edx
     306:	06                   	push   es
     307:	40                   	inc    eax
     308:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     30e:	00 00                	add    BYTE PTR [eax],al
     310:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     313:	03 0e                	add    ecx,DWORD PTR [esi]
     315:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     317:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     319:	49                   	dec    ecx
     31a:	13 02                	adc    eax,DWORD PTR [edx]
     31c:	18 00                	sbb    BYTE PTR [eax],al
     31e:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     321:	01 11                	add    DWORD PTR [ecx],edx
     323:	01 12                	add    DWORD PTR [edx],edx
     325:	06                   	push   es
     326:	01 13                	add    DWORD PTR [ebx],edx
     328:	00 00                	add    BYTE PTR [eax],al
     32a:	0d 34 00 03 0e       	or     eax,0xe030034
     32f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     331:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     333:	49                   	dec    ecx
     334:	13 3f                	adc    edi,DWORD PTR [edi]
     336:	19 02                	sbb    DWORD PTR [edx],eax
     338:	18 00                	sbb    BYTE PTR [eax],al
     33a:	00 00                	add    BYTE PTR [eax],al
     33c:	01 11                	add    DWORD PTR [ecx],edx
     33e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     344:	0e                   	push   cs
     345:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     347:	11 01                	adc    DWORD PTR [ecx],eax
     349:	12 06                	adc    al,BYTE PTR [esi]
     34b:	10 17                	adc    BYTE PTR [edi],dl
     34d:	00 00                	add    BYTE PTR [eax],al
     34f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     352:	0b 0b                	or     ecx,DWORD PTR [ebx]
     354:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     357:	0e                   	push   cs
     358:	00 00                	add    BYTE PTR [eax],al
     35a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     35d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     35f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     362:	08 00                	or     BYTE PTR [eax],al
     364:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     367:	00 03                	add    BYTE PTR [ebx],al
     369:	0e                   	push   cs
     36a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     36c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     36e:	49                   	dec    ecx
     36f:	13 00                	adc    eax,DWORD PTR [eax]
     371:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     377:	49                   	dec    ecx
     378:	13 00                	adc    eax,DWORD PTR [eax]
     37a:	00 06                	add    BYTE PTR [esi],al
     37c:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     380:	00 00                	add    BYTE PTR [eax],al
     382:	07                   	pop    es
     383:	04 01                	add    al,0x1
     385:	03 0e                	add    ecx,DWORD PTR [esi]
     387:	0b 0b                	or     ecx,DWORD PTR [ebx]
     389:	49                   	dec    ecx
     38a:	13 3a                	adc    edi,DWORD PTR [edx]
     38c:	0b 3b                	or     edi,DWORD PTR [ebx]
     38e:	0b 01                	or     eax,DWORD PTR [ecx]
     390:	13 00                	adc    eax,DWORD PTR [eax]
     392:	00 08                	add    BYTE PTR [eax],cl
     394:	28 00                	sub    BYTE PTR [eax],al
     396:	03 0e                	add    ecx,DWORD PTR [esi]
     398:	1c 0b                	sbb    al,0xb
     39a:	00 00                	add    BYTE PTR [eax],al
     39c:	09 28                	or     DWORD PTR [eax],ebp
     39e:	00 03                	add    BYTE PTR [ebx],al
     3a0:	0e                   	push   cs
     3a1:	1c 05                	sbb    al,0x5
     3a3:	00 00                	add    BYTE PTR [eax],al
     3a5:	0a 0f                	or     cl,BYTE PTR [edi]
     3a7:	00 0b                	add    BYTE PTR [ebx],cl
     3a9:	0b 00                	or     eax,DWORD PTR [eax]
     3ab:	00 0b                	add    BYTE PTR [ebx],cl
     3ad:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     3b0:	19 03                	sbb    DWORD PTR [ebx],eax
     3b2:	0e                   	push   cs
     3b3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3b5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3b7:	27                   	daa    
     3b8:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     3bb:	11 01                	adc    DWORD PTR [ecx],eax
     3bd:	12 06                	adc    al,BYTE PTR [esi]
     3bf:	40                   	inc    eax
     3c0:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3c6:	00 00                	add    BYTE PTR [eax],al
     3c8:	0c 05                	or     al,0x5
     3ca:	00 03                	add    BYTE PTR [ebx],al
     3cc:	0e                   	push   cs
     3cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3d1:	49                   	dec    ecx
     3d2:	13 02                	adc    eax,DWORD PTR [edx]
     3d4:	18 00                	sbb    BYTE PTR [eax],al
     3d6:	00 0d 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,cl
     3dc:	03 0e                	add    ecx,DWORD PTR [esi]
     3de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3e2:	27                   	daa    
     3e3:	19 11                	sbb    DWORD PTR [ecx],edx
     3e5:	01 12                	add    DWORD PTR [edx],edx
     3e7:	06                   	push   es
     3e8:	40                   	inc    eax
     3e9:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3ef:	00 00                	add    BYTE PTR [eax],al
     3f1:	0e                   	push   cs
     3f2:	34 00                	xor    al,0x0
     3f4:	03 0e                	add    ecx,DWORD PTR [esi]
     3f6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3f8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3fa:	49                   	dec    ecx
     3fb:	13 3f                	adc    edi,DWORD PTR [edi]
     3fd:	19 02                	sbb    DWORD PTR [edx],eax
     3ff:	18 00                	sbb    BYTE PTR [eax],al
     401:	00 00                	add    BYTE PTR [eax],al
     403:	01 11                	add    DWORD PTR [ecx],edx
     405:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     40b:	0e                   	push   cs
     40c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     40e:	11 01                	adc    DWORD PTR [ecx],eax
     410:	12 06                	adc    al,BYTE PTR [esi]
     412:	10 17                	adc    BYTE PTR [edi],dl
     414:	00 00                	add    BYTE PTR [eax],al
     416:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     419:	0b 0b                	or     ecx,DWORD PTR [ebx]
     41b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     41e:	0e                   	push   cs
     41f:	00 00                	add    BYTE PTR [eax],al
     421:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     424:	0b 0b                	or     ecx,DWORD PTR [ebx]
     426:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     429:	08 00                	or     BYTE PTR [eax],al
     42b:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     42e:	00 03                	add    BYTE PTR [ebx],al
     430:	0e                   	push   cs
     431:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     433:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     435:	49                   	dec    ecx
     436:	13 00                	adc    eax,DWORD PTR [eax]
     438:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     43e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     440:	49                   	dec    ecx
     441:	13 3a                	adc    edi,DWORD PTR [edx]
     443:	0b 3b                	or     edi,DWORD PTR [ebx]
     445:	0b 01                	or     eax,DWORD PTR [ecx]
     447:	13 00                	adc    eax,DWORD PTR [eax]
     449:	00 06                	add    BYTE PTR [esi],al
     44b:	28 00                	sub    BYTE PTR [eax],al
     44d:	03 0e                	add    ecx,DWORD PTR [esi]
     44f:	1c 0b                	sbb    al,0xb
     451:	00 00                	add    BYTE PTR [eax],al
     453:	07                   	pop    es
     454:	28 00                	sub    BYTE PTR [eax],al
     456:	03 0e                	add    ecx,DWORD PTR [esi]
     458:	1c 05                	sbb    al,0x5
     45a:	00 00                	add    BYTE PTR [eax],al
     45c:	08 0f                	or     BYTE PTR [edi],cl
     45e:	00 0b                	add    BYTE PTR [ebx],cl
     460:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     463:	00 00                	add    BYTE PTR [eax],al
     465:	09 2e                	or     DWORD PTR [esi],ebp
     467:	01 3f                	add    DWORD PTR [edi],edi
     469:	19 03                	sbb    DWORD PTR [ebx],eax
     46b:	0e                   	push   cs
     46c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     46e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     470:	27                   	daa    
     471:	19 11                	sbb    DWORD PTR [ecx],edx
     473:	01 12                	add    DWORD PTR [edx],edx
     475:	06                   	push   es
     476:	40                   	inc    eax
     477:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     47d:	00 00                	add    BYTE PTR [eax],al
     47f:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     485:	0b 3b                	or     edi,DWORD PTR [ebx]
     487:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     48a:	02 18                	add    bl,BYTE PTR [eax]
     48c:	00 00                	add    BYTE PTR [eax],al
     48e:	0b 05 00 03 08 3a    	or     eax,DWORD PTR ds:0x3a080300
     494:	0b 3b                	or     edi,DWORD PTR [ebx]
     496:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     499:	02 18                	add    bl,BYTE PTR [eax]
     49b:	00 00                	add    BYTE PTR [eax],al
     49d:	0c 34                	or     al,0x34
     49f:	00 03                	add    BYTE PTR [ebx],al
     4a1:	0e                   	push   cs
     4a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4a6:	49                   	dec    ecx
     4a7:	13 02                	adc    eax,DWORD PTR [edx]
     4a9:	18 00                	sbb    BYTE PTR [eax],al
     4ab:	00 0d 01 01 49 13    	add    BYTE PTR ds:0x13490101,cl
     4b1:	01 13                	add    DWORD PTR [ebx],edx
     4b3:	00 00                	add    BYTE PTR [eax],al
     4b5:	0e                   	push   cs
     4b6:	21 00                	and    DWORD PTR [eax],eax
     4b8:	49                   	dec    ecx
     4b9:	13 2f                	adc    ebp,DWORD PTR [edi]
     4bb:	0b 00                	or     eax,DWORD PTR [eax]
     4bd:	00 0f                	add    BYTE PTR [edi],cl
     4bf:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4c2:	19 03                	sbb    DWORD PTR [ebx],eax
     4c4:	0e                   	push   cs
     4c5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4c7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4c9:	49                   	dec    ecx
     4ca:	13 11                	adc    edx,DWORD PTR [ecx]
     4cc:	01 12                	add    DWORD PTR [edx],edx
     4ce:	06                   	push   es
     4cf:	40                   	inc    eax
     4d0:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     4d6:	00 00                	add    BYTE PTR [eax],al
     4d8:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     4db:	03 08                	add    ecx,DWORD PTR [eax]
     4dd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4df:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4e1:	49                   	dec    ecx
     4e2:	13 02                	adc    eax,DWORD PTR [edx]
     4e4:	18 00                	sbb    BYTE PTR [eax],al
     4e6:	00 11                	add    BYTE PTR [ecx],dl
     4e8:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4eb:	19 03                	sbb    DWORD PTR [ebx],eax
     4ed:	0e                   	push   cs
     4ee:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4f0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4f2:	27                   	daa    
     4f3:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     4f6:	11 01                	adc    DWORD PTR [ecx],eax
     4f8:	12 06                	adc    al,BYTE PTR [esi]
     4fa:	40                   	inc    eax
     4fb:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     501:	00 00                	add    BYTE PTR [eax],al
     503:	12 0a                	adc    cl,BYTE PTR [edx]
     505:	00 03                	add    BYTE PTR [ebx],al
     507:	0e                   	push   cs
     508:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     50a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     50c:	11 01                	adc    DWORD PTR [ecx],eax
     50e:	00 00                	add    BYTE PTR [eax],al
     510:	13 34 00             	adc    esi,DWORD PTR [eax+eax*1]
     513:	03 0e                	add    ecx,DWORD PTR [esi]
     515:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     517:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     519:	49                   	dec    ecx
     51a:	13 3f                	adc    edi,DWORD PTR [edi]
     51c:	19 02                	sbb    DWORD PTR [edx],eax
     51e:	18 00                	sbb    BYTE PTR [eax],al
     520:	00 00                	add    BYTE PTR [eax],al
     522:	01 11                	add    DWORD PTR [ecx],edx
     524:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     52a:	0e                   	push   cs
     52b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     52d:	11 01                	adc    DWORD PTR [ecx],eax
     52f:	12 06                	adc    al,BYTE PTR [esi]
     531:	10 17                	adc    BYTE PTR [edi],dl
     533:	00 00                	add    BYTE PTR [eax],al
     535:	02 16                	add    dl,BYTE PTR [esi]
     537:	00 03                	add    BYTE PTR [ebx],al
     539:	0e                   	push   cs
     53a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     53c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     53e:	49                   	dec    ecx
     53f:	13 00                	adc    eax,DWORD PTR [eax]
     541:	00 03                	add    BYTE PTR [ebx],al
     543:	0f 00 0b             	str    WORD PTR [ebx]
     546:	0b 03                	or     eax,DWORD PTR [ebx]
     548:	0e                   	push   cs
     549:	49                   	dec    ecx
     54a:	13 00                	adc    eax,DWORD PTR [eax]
     54c:	00 04 24             	add    BYTE PTR [esp],al
     54f:	00 0b                	add    BYTE PTR [ebx],cl
     551:	0b 3e                	or     edi,DWORD PTR [esi]
     553:	0b 03                	or     eax,DWORD PTR [ebx]
     555:	0e                   	push   cs
     556:	00 00                	add    BYTE PTR [eax],al
     558:	05 24 00 0b 0b       	add    eax,0xb0b0024
     55d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     560:	08 00                	or     BYTE PTR [eax],al
     562:	00 06                	add    BYTE PTR [esi],al
     564:	13 01                	adc    eax,DWORD PTR [ecx]
     566:	03 08                	add    ecx,DWORD PTR [eax]
     568:	0b 0b                	or     ecx,DWORD PTR [ebx]
     56a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     56c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     56e:	01 13                	add    DWORD PTR [ebx],edx
     570:	00 00                	add    BYTE PTR [eax],al
     572:	07                   	pop    es
     573:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     578:	0b 3b                	or     edi,DWORD PTR [ebx]
     57a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     57d:	38 0b                	cmp    BYTE PTR [ebx],cl
     57f:	00 00                	add    BYTE PTR [eax],al
     581:	08 0f                	or     BYTE PTR [edi],cl
     583:	00 0b                	add    BYTE PTR [ebx],cl
     585:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     588:	00 00                	add    BYTE PTR [eax],al
     58a:	09 26                	or     DWORD PTR [esi],esp
     58c:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     58f:	00 00                	add    BYTE PTR [eax],al
     591:	0a 04 01             	or     al,BYTE PTR [ecx+eax*1]
     594:	03 0e                	add    ecx,DWORD PTR [esi]
     596:	0b 0b                	or     ecx,DWORD PTR [ebx]
     598:	49                   	dec    ecx
     599:	13 3a                	adc    edi,DWORD PTR [edx]
     59b:	0b 3b                	or     edi,DWORD PTR [ebx]
     59d:	0b 01                	or     eax,DWORD PTR [ecx]
     59f:	13 00                	adc    eax,DWORD PTR [eax]
     5a1:	00 0b                	add    BYTE PTR [ebx],cl
     5a3:	28 00                	sub    BYTE PTR [eax],al
     5a5:	03 0e                	add    ecx,DWORD PTR [esi]
     5a7:	1c 0b                	sbb    al,0xb
     5a9:	00 00                	add    BYTE PTR [eax],al
     5ab:	0c 28                	or     al,0x28
     5ad:	00 03                	add    BYTE PTR [ebx],al
     5af:	0e                   	push   cs
     5b0:	1c 05                	sbb    al,0x5
     5b2:	00 00                	add    BYTE PTR [eax],al
     5b4:	0d 0f 00 0b 0b       	or     eax,0xb0b000f
     5b9:	00 00                	add    BYTE PTR [eax],al
     5bb:	0e                   	push   cs
     5bc:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     5bf:	19 03                	sbb    DWORD PTR [ebx],eax
     5c1:	0e                   	push   cs
     5c2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5c4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5c6:	27                   	daa    
     5c7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     5ca:	11 01                	adc    DWORD PTR [ecx],eax
     5cc:	12 06                	adc    al,BYTE PTR [esi]
     5ce:	40                   	inc    eax
     5cf:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     5d5:	00 00                	add    BYTE PTR [eax],al
     5d7:	0f 05                	syscall 
     5d9:	00 03                	add    BYTE PTR [ebx],al
     5db:	0e                   	push   cs
     5dc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5de:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5e0:	49                   	dec    ecx
     5e1:	13 02                	adc    eax,DWORD PTR [edx]
     5e3:	18 00                	sbb    BYTE PTR [eax],al
     5e5:	00 10                	add    BYTE PTR [eax],dl
     5e7:	34 00                	xor    al,0x0
     5e9:	03 0e                	add    ecx,DWORD PTR [esi]
     5eb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5ed:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5ef:	49                   	dec    ecx
     5f0:	13 02                	adc    eax,DWORD PTR [edx]
     5f2:	18 00                	sbb    BYTE PTR [eax],al
     5f4:	00 11                	add    BYTE PTR [ecx],dl
     5f6:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     5f9:	19 03                	sbb    DWORD PTR [ebx],eax
     5fb:	0e                   	push   cs
     5fc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5fe:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     600:	11 01                	adc    DWORD PTR [ecx],eax
     602:	12 06                	adc    al,BYTE PTR [esi]
     604:	40                   	inc    eax
     605:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     60b:	12 2e                	adc    ch,BYTE PTR [esi]
     60d:	00 3f                	add    BYTE PTR [edi],bh
     60f:	19 03                	sbb    DWORD PTR [ebx],eax
     611:	0e                   	push   cs
     612:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     614:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     616:	27                   	daa    
     617:	19 11                	sbb    DWORD PTR [ecx],edx
     619:	01 12                	add    DWORD PTR [edx],edx
     61b:	06                   	push   es
     61c:	40                   	inc    eax
     61d:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     623:	13 2e                	adc    ebp,DWORD PTR [esi]
     625:	01 3f                	add    DWORD PTR [edi],edi
     627:	19 03                	sbb    DWORD PTR [ebx],eax
     629:	0e                   	push   cs
     62a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     62c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     62e:	27                   	daa    
     62f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     632:	11 01                	adc    DWORD PTR [ecx],eax
     634:	12 06                	adc    al,BYTE PTR [esi]
     636:	40                   	inc    eax
     637:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     63d:	00 00                	add    BYTE PTR [eax],al
     63f:	14 18                	adc    al,0x18
     641:	00 00                	add    BYTE PTR [eax],al
     643:	00 15 0b 01 11 01    	add    BYTE PTR ds:0x111010b,dl
     649:	12 06                	adc    al,BYTE PTR [esi]
     64b:	00 00                	add    BYTE PTR [eax],al
     64d:	16                   	push   ss
     64e:	34 00                	xor    al,0x0
     650:	03 08                	add    ecx,DWORD PTR [eax]
     652:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     654:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     656:	49                   	dec    ecx
     657:	13 02                	adc    eax,DWORD PTR [edx]
     659:	18 00                	sbb    BYTE PTR [eax],al
     65b:	00 17                	add    BYTE PTR [edi],dl
     65d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     660:	19 03                	sbb    DWORD PTR [ebx],eax
     662:	0e                   	push   cs
     663:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     665:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     667:	27                   	daa    
     668:	19 11                	sbb    DWORD PTR [ecx],edx
     66a:	01 12                	add    DWORD PTR [edx],edx
     66c:	06                   	push   es
     66d:	40                   	inc    eax
     66e:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     674:	00 00                	add    BYTE PTR [eax],al
     676:	18 2e                	sbb    BYTE PTR [esi],ch
     678:	01 3f                	add    DWORD PTR [edi],edi
     67a:	19 03                	sbb    DWORD PTR [ebx],eax
     67c:	0e                   	push   cs
     67d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     67f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     681:	49                   	dec    ecx
     682:	13 3c 19             	adc    edi,DWORD PTR [ecx+ebx*1]
     685:	01 13                	add    DWORD PTR [ebx],edx
     687:	00 00                	add    BYTE PTR [eax],al
     689:	19 2e                	sbb    DWORD PTR [esi],ebp
     68b:	01 3f                	add    DWORD PTR [edi],edi
     68d:	19 03                	sbb    DWORD PTR [ebx],eax
     68f:	0e                   	push   cs
     690:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     692:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     694:	49                   	dec    ecx
     695:	13 3c 19             	adc    edi,DWORD PTR [ecx+ebx*1]
     698:	00 00                	add    BYTE PTR [eax],al
     69a:	1a 05 00 03 08 3a    	sbb    al,BYTE PTR ds:0x3a080300
     6a0:	0b 3b                	or     edi,DWORD PTR [ebx]
     6a2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     6a5:	02 18                	add    bl,BYTE PTR [eax]
     6a7:	00 00                	add    BYTE PTR [eax],al
     6a9:	1b 2e                	sbb    ebp,DWORD PTR [esi]
     6ab:	01 3f                	add    DWORD PTR [edi],edi
     6ad:	19 03                	sbb    DWORD PTR [ebx],eax
     6af:	0e                   	push   cs
     6b0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6b2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6b4:	49                   	dec    ecx
     6b5:	13 11                	adc    edx,DWORD PTR [ecx]
     6b7:	01 12                	add    DWORD PTR [edx],edx
     6b9:	06                   	push   es
     6ba:	40                   	inc    eax
     6bb:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     6c1:	00 00                	add    BYTE PTR [eax],al
     6c3:	1c 34                	sbb    al,0x34
     6c5:	00 03                	add    BYTE PTR [ebx],al
     6c7:	0e                   	push   cs
     6c8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6ca:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6cc:	49                   	dec    ecx
     6cd:	13 3f                	adc    edi,DWORD PTR [edi]
     6cf:	19 02                	sbb    DWORD PTR [edx],eax
     6d1:	18 00                	sbb    BYTE PTR [eax],al
     6d3:	00 00                	add    BYTE PTR [eax],al
     6d5:	01 11                	add    DWORD PTR [ecx],edx
     6d7:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     6dd:	0e                   	push   cs
     6de:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     6e0:	11 01                	adc    DWORD PTR [ecx],eax
     6e2:	12 06                	adc    al,BYTE PTR [esi]
     6e4:	10 17                	adc    BYTE PTR [edi],dl
     6e6:	00 00                	add    BYTE PTR [eax],al
     6e8:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     6eb:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6ed:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     6f0:	0e                   	push   cs
     6f1:	00 00                	add    BYTE PTR [eax],al
     6f3:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     6f6:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6f8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     6fb:	08 00                	or     BYTE PTR [eax],al
     6fd:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     700:	00 03                	add    BYTE PTR [ebx],al
     702:	0e                   	push   cs
     703:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     705:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     707:	49                   	dec    ecx
     708:	13 00                	adc    eax,DWORD PTR [eax]
     70a:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     710:	0b 0b                	or     ecx,DWORD PTR [ebx]
     712:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     714:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     716:	01 13                	add    DWORD PTR [ebx],edx
     718:	00 00                	add    BYTE PTR [eax],al
     71a:	06                   	push   es
     71b:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     720:	0b 3b                	or     edi,DWORD PTR [ebx]
     722:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     725:	38 0b                	cmp    BYTE PTR [ebx],cl
     727:	00 00                	add    BYTE PTR [eax],al
     729:	07                   	pop    es
     72a:	0d 00 03 08 3a       	or     eax,0x3a080300
     72f:	0b 3b                	or     edi,DWORD PTR [ebx]
     731:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     734:	38 0b                	cmp    BYTE PTR [ebx],cl
     736:	00 00                	add    BYTE PTR [eax],al
     738:	08 0f                	or     BYTE PTR [edi],cl
     73a:	00 0b                	add    BYTE PTR [ebx],cl
     73c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     73f:	00 00                	add    BYTE PTR [eax],al
     741:	09 04 01             	or     DWORD PTR [ecx+eax*1],eax
     744:	03 0e                	add    ecx,DWORD PTR [esi]
     746:	0b 0b                	or     ecx,DWORD PTR [ebx]
     748:	49                   	dec    ecx
     749:	13 3a                	adc    edi,DWORD PTR [edx]
     74b:	0b 3b                	or     edi,DWORD PTR [ebx]
     74d:	0b 01                	or     eax,DWORD PTR [ecx]
     74f:	13 00                	adc    eax,DWORD PTR [eax]
     751:	00 0a                	add    BYTE PTR [edx],cl
     753:	28 00                	sub    BYTE PTR [eax],al
     755:	03 0e                	add    ecx,DWORD PTR [esi]
     757:	1c 0b                	sbb    al,0xb
     759:	00 00                	add    BYTE PTR [eax],al
     75b:	0b 28                	or     ebp,DWORD PTR [eax]
     75d:	00 03                	add    BYTE PTR [ebx],al
     75f:	0e                   	push   cs
     760:	1c 05                	sbb    al,0x5
     762:	00 00                	add    BYTE PTR [eax],al
     764:	0c 0f                	or     al,0xf
     766:	00 0b                	add    BYTE PTR [ebx],cl
     768:	0b 00                	or     eax,DWORD PTR [eax]
     76a:	00 0d 2e 00 3f 19    	add    BYTE PTR ds:0x193f002e,cl
     770:	03 0e                	add    ecx,DWORD PTR [esi]
     772:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     774:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     776:	11 01                	adc    DWORD PTR [ecx],eax
     778:	12 06                	adc    al,BYTE PTR [esi]
     77a:	40                   	inc    eax
     77b:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     781:	0e                   	push   cs
     782:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     785:	19 03                	sbb    DWORD PTR [ebx],eax
     787:	0e                   	push   cs
     788:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     78a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     78c:	27                   	daa    
     78d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     790:	11 01                	adc    DWORD PTR [ecx],eax
     792:	12 06                	adc    al,BYTE PTR [esi]
     794:	40                   	inc    eax
     795:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     79b:	00 00                	add    BYTE PTR [eax],al
     79d:	0f 05                	syscall 
     79f:	00 03                	add    BYTE PTR [ebx],al
     7a1:	0e                   	push   cs
     7a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7a6:	49                   	dec    ecx
     7a7:	13 02                	adc    eax,DWORD PTR [edx]
     7a9:	18 00                	sbb    BYTE PTR [eax],al
     7ab:	00 10                	add    BYTE PTR [eax],dl
     7ad:	34 00                	xor    al,0x0
     7af:	03 0e                	add    ecx,DWORD PTR [esi]
     7b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7b5:	49                   	dec    ecx
     7b6:	13 02                	adc    eax,DWORD PTR [edx]
     7b8:	18 00                	sbb    BYTE PTR [eax],al
     7ba:	00 11                	add    BYTE PTR [ecx],dl
     7bc:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     7bf:	19 03                	sbb    DWORD PTR [ebx],eax
     7c1:	0e                   	push   cs
     7c2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7c4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7c6:	27                   	daa    
     7c7:	19 11                	sbb    DWORD PTR [ecx],edx
     7c9:	01 12                	add    DWORD PTR [edx],edx
     7cb:	06                   	push   es
     7cc:	40                   	inc    eax
     7cd:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     7d3:	00 00                	add    BYTE PTR [eax],al
     7d5:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     7d8:	03 08                	add    ecx,DWORD PTR [eax]
     7da:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7dc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7de:	49                   	dec    ecx
     7df:	13 02                	adc    eax,DWORD PTR [edx]
     7e1:	18 00                	sbb    BYTE PTR [eax],al
     7e3:	00 13                	add    BYTE PTR [ebx],dl
     7e5:	0a 00                	or     al,BYTE PTR [eax]
     7e7:	03 0e                	add    ecx,DWORD PTR [esi]
     7e9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7eb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7ed:	11 01                	adc    DWORD PTR [ecx],eax
     7ef:	00 00                	add    BYTE PTR [eax],al
     7f1:	14 2e                	adc    al,0x2e
     7f3:	01 3f                	add    DWORD PTR [edi],edi
     7f5:	19 03                	sbb    DWORD PTR [ebx],eax
     7f7:	0e                   	push   cs
     7f8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7fa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7fc:	27                   	daa    
     7fd:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     800:	11 01                	adc    DWORD PTR [ecx],eax
     802:	12 06                	adc    al,BYTE PTR [esi]
     804:	40                   	inc    eax
     805:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     80b:	00 00                	add    BYTE PTR [eax],al
     80d:	15 2e 01 3f 19       	adc    eax,0x193f012e
     812:	03 0e                	add    ecx,DWORD PTR [esi]
     814:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     816:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     818:	27                   	daa    
     819:	19 11                	sbb    DWORD PTR [ecx],edx
     81b:	01 12                	add    DWORD PTR [edx],edx
     81d:	06                   	push   es
     81e:	40                   	inc    eax
     81f:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     825:	00 00                	add    BYTE PTR [eax],al
     827:	16                   	push   ss
     828:	34 00                	xor    al,0x0
     82a:	03 0e                	add    ecx,DWORD PTR [esi]
     82c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     82e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     830:	49                   	dec    ecx
     831:	13 3f                	adc    edi,DWORD PTR [edi]
     833:	19 02                	sbb    DWORD PTR [edx],eax
     835:	18 00                	sbb    BYTE PTR [eax],al
     837:	00 00                	add    BYTE PTR [eax],al
     839:	01 11                	add    DWORD PTR [ecx],edx
     83b:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     841:	0e                   	push   cs
     842:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     844:	11 01                	adc    DWORD PTR [ecx],eax
     846:	12 06                	adc    al,BYTE PTR [esi]
     848:	10 17                	adc    BYTE PTR [edi],dl
     84a:	00 00                	add    BYTE PTR [eax],al
     84c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     84f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     851:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     854:	0e                   	push   cs
     855:	00 00                	add    BYTE PTR [eax],al
     857:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     85a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     85c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     85f:	08 00                	or     BYTE PTR [eax],al
     861:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     864:	00 0b                	add    BYTE PTR [ebx],cl
     866:	0b 00                	or     eax,DWORD PTR [eax]
     868:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     86e:	49                   	dec    ecx
     86f:	13 00                	adc    eax,DWORD PTR [eax]
     871:	00 06                	add    BYTE PTR [esi],al
     873:	16                   	push   ss
     874:	00 03                	add    BYTE PTR [ebx],al
     876:	0e                   	push   cs
     877:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     879:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     87b:	49                   	dec    ecx
     87c:	13 00                	adc    eax,DWORD PTR [eax]
     87e:	00 07                	add    BYTE PTR [edi],al
     880:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     884:	00 00                	add    BYTE PTR [eax],al
     886:	08 2e                	or     BYTE PTR [esi],ch
     888:	01 3f                	add    DWORD PTR [edi],edi
     88a:	19 03                	sbb    DWORD PTR [ebx],eax
     88c:	0e                   	push   cs
     88d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     88f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     891:	27                   	daa    
     892:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     895:	11 01                	adc    DWORD PTR [ecx],eax
     897:	12 06                	adc    al,BYTE PTR [esi]
     899:	40                   	inc    eax
     89a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     8a0:	00 00                	add    BYTE PTR [eax],al
     8a2:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     8a8:	0b 3b                	or     edi,DWORD PTR [ebx]
     8aa:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     8ad:	02 18                	add    bl,BYTE PTR [eax]
     8af:	00 00                	add    BYTE PTR [eax],al
     8b1:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     8b7:	0b 3b                	or     edi,DWORD PTR [ebx]
     8b9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     8bc:	02 18                	add    bl,BYTE PTR [eax]
     8be:	00 00                	add    BYTE PTR [eax],al
     8c0:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     8c3:	03 08                	add    ecx,DWORD PTR [eax]
     8c5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8c7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8c9:	49                   	dec    ecx
     8ca:	13 02                	adc    eax,DWORD PTR [edx]
     8cc:	18 00                	sbb    BYTE PTR [eax],al
     8ce:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     8d1:	01 11                	add    DWORD PTR [ecx],edx
     8d3:	01 12                	add    DWORD PTR [edx],edx
     8d5:	06                   	push   es
     8d6:	01 13                	add    DWORD PTR [ebx],edx
     8d8:	00 00                	add    BYTE PTR [eax],al
     8da:	0d 0b 01 11 01       	or     eax,0x111010b
     8df:	12 06                	adc    al,BYTE PTR [esi]
     8e1:	00 00                	add    BYTE PTR [eax],al
     8e3:	0e                   	push   cs
     8e4:	26 00 00             	add    BYTE PTR es:[eax],al
     8e7:	00 0f                	add    BYTE PTR [edi],cl
     8e9:	34 00                	xor    al,0x0
     8eb:	03 0e                	add    ecx,DWORD PTR [esi]
     8ed:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8ef:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8f1:	49                   	dec    ecx
     8f2:	13 3f                	adc    edi,DWORD PTR [edi]
     8f4:	19 02                	sbb    DWORD PTR [edx],eax
     8f6:	18 00                	sbb    BYTE PTR [eax],al
     8f8:	00 00                	add    BYTE PTR [eax],al
     8fa:	01 11                	add    DWORD PTR [ecx],edx
     8fc:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     902:	0e                   	push   cs
     903:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     905:	11 01                	adc    DWORD PTR [ecx],eax
     907:	12 06                	adc    al,BYTE PTR [esi]
     909:	10 17                	adc    BYTE PTR [edi],dl
     90b:	00 00                	add    BYTE PTR [eax],al
     90d:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     910:	0b 0b                	or     ecx,DWORD PTR [ebx]
     912:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     915:	0e                   	push   cs
     916:	00 00                	add    BYTE PTR [eax],al
     918:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     91b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     91d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     920:	08 00                	or     BYTE PTR [eax],al
     922:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     925:	00 03                	add    BYTE PTR [ebx],al
     927:	0e                   	push   cs
     928:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     92a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     92c:	49                   	dec    ecx
     92d:	13 00                	adc    eax,DWORD PTR [eax]
     92f:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     935:	00 00                	add    BYTE PTR [eax],al
     937:	06                   	push   es
     938:	0f 00 0b             	str    WORD PTR [ebx]
     93b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     93e:	00 00                	add    BYTE PTR [eax],al
     940:	07                   	pop    es
     941:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     944:	19 03                	sbb    DWORD PTR [ebx],eax
     946:	0e                   	push   cs
     947:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     949:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     94b:	27                   	daa    
     94c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     94f:	11 01                	adc    DWORD PTR [ecx],eax
     951:	12 06                	adc    al,BYTE PTR [esi]
     953:	40                   	inc    eax
     954:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     95a:	00 00                	add    BYTE PTR [eax],al
     95c:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     962:	0b 3b                	or     edi,DWORD PTR [ebx]
     964:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     967:	02 18                	add    bl,BYTE PTR [eax]
     969:	00 00                	add    BYTE PTR [eax],al
     96b:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     96e:	03 08                	add    ecx,DWORD PTR [eax]
     970:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     972:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     974:	49                   	dec    ecx
     975:	13 02                	adc    eax,DWORD PTR [edx]
     977:	18 00                	sbb    BYTE PTR [eax],al
     979:	00 0a                	add    BYTE PTR [edx],cl
     97b:	34 00                	xor    al,0x0
     97d:	03 0e                	add    ecx,DWORD PTR [esi]
     97f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     981:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     983:	49                   	dec    ecx
     984:	13 02                	adc    eax,DWORD PTR [edx]
     986:	18 00                	sbb    BYTE PTR [eax],al
     988:	00 0b                	add    BYTE PTR [ebx],cl
     98a:	34 00                	xor    al,0x0
     98c:	03 0e                	add    ecx,DWORD PTR [esi]
     98e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     990:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     992:	49                   	dec    ecx
     993:	13 3f                	adc    edi,DWORD PTR [edi]
     995:	19 02                	sbb    DWORD PTR [edx],eax
     997:	18 00                	sbb    BYTE PTR [eax],al
     999:	00 00                	add    BYTE PTR [eax],al
     99b:	01 11                	add    DWORD PTR [ecx],edx
     99d:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     9a3:	0e                   	push   cs
     9a4:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     9a6:	11 01                	adc    DWORD PTR [ecx],eax
     9a8:	12 06                	adc    al,BYTE PTR [esi]
     9aa:	10 17                	adc    BYTE PTR [edi],dl
     9ac:	00 00                	add    BYTE PTR [eax],al
     9ae:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     9b1:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9b3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     9b6:	0e                   	push   cs
     9b7:	00 00                	add    BYTE PTR [eax],al
     9b9:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     9bc:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9be:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     9c1:	08 00                	or     BYTE PTR [eax],al
     9c3:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     9c6:	00 03                	add    BYTE PTR [ebx],al
     9c8:	0e                   	push   cs
     9c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9cd:	49                   	dec    ecx
     9ce:	13 00                	adc    eax,DWORD PTR [eax]
     9d0:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     9d6:	00 00                	add    BYTE PTR [eax],al
     9d8:	06                   	push   es
     9d9:	0f 00 0b             	str    WORD PTR [ebx]
     9dc:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9df:	00 00                	add    BYTE PTR [eax],al
     9e1:	07                   	pop    es
     9e2:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     9e5:	19 03                	sbb    DWORD PTR [ebx],eax
     9e7:	0e                   	push   cs
     9e8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9ea:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9ec:	27                   	daa    
     9ed:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     9f0:	11 01                	adc    DWORD PTR [ecx],eax
     9f2:	12 06                	adc    al,BYTE PTR [esi]
     9f4:	40                   	inc    eax
     9f5:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     9fb:	00 00                	add    BYTE PTR [eax],al
     9fd:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     a03:	0b 3b                	or     edi,DWORD PTR [ebx]
     a05:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a08:	02 18                	add    bl,BYTE PTR [eax]
     a0a:	00 00                	add    BYTE PTR [eax],al
     a0c:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     a12:	0b 3b                	or     edi,DWORD PTR [ebx]
     a14:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a17:	02 18                	add    bl,BYTE PTR [eax]
     a19:	00 00                	add    BYTE PTR [eax],al
     a1b:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
     a1e:	03 0e                	add    ecx,DWORD PTR [esi]
     a20:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a22:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a24:	49                   	dec    ecx
     a25:	13 3f                	adc    edi,DWORD PTR [edi]
     a27:	19 02                	sbb    DWORD PTR [edx],eax
     a29:	18 00                	sbb    BYTE PTR [eax],al
     a2b:	00 00                	add    BYTE PTR [eax],al
     a2d:	01 11                	add    DWORD PTR [ecx],edx
     a2f:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     a35:	0e                   	push   cs
     a36:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     a38:	11 01                	adc    DWORD PTR [ecx],eax
     a3a:	12 06                	adc    al,BYTE PTR [esi]
     a3c:	10 17                	adc    BYTE PTR [edi],dl
     a3e:	00 00                	add    BYTE PTR [eax],al
     a40:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     a43:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a45:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a48:	0e                   	push   cs
     a49:	00 00                	add    BYTE PTR [eax],al
     a4b:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     a4e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a50:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a53:	08 00                	or     BYTE PTR [eax],al
     a55:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     a58:	00 03                	add    BYTE PTR [ebx],al
     a5a:	0e                   	push   cs
     a5b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a5d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a5f:	49                   	dec    ecx
     a60:	13 00                	adc    eax,DWORD PTR [eax]
     a62:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     a68:	49                   	dec    ecx
     a69:	13 00                	adc    eax,DWORD PTR [eax]
     a6b:	00 06                	add    BYTE PTR [esi],al
     a6d:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     a71:	00 00                	add    BYTE PTR [eax],al
     a73:	07                   	pop    es
     a74:	0f 00 0b             	str    WORD PTR [ebx]
     a77:	0b 00                	or     eax,DWORD PTR [eax]
     a79:	00 08                	add    BYTE PTR [eax],cl
     a7b:	13 01                	adc    eax,DWORD PTR [ecx]
     a7d:	03 0e                	add    ecx,DWORD PTR [esi]
     a7f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a81:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a83:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a85:	01 13                	add    DWORD PTR [ebx],edx
     a87:	00 00                	add    BYTE PTR [eax],al
     a89:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
     a8f:	0b 3b                	or     edi,DWORD PTR [ebx]
     a91:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a94:	38 0b                	cmp    BYTE PTR [ebx],cl
     a96:	00 00                	add    BYTE PTR [eax],al
     a98:	0a 15 01 27 19 49    	or     dl,BYTE PTR ds:0x49192701
     a9e:	13 01                	adc    eax,DWORD PTR [ecx]
     aa0:	13 00                	adc    eax,DWORD PTR [eax]
     aa2:	00 0b                	add    BYTE PTR [ebx],cl
     aa4:	05 00 49 13 00       	add    eax,0x134900
     aa9:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     aac:	01 3f                	add    DWORD PTR [edi],edi
     aae:	19 03                	sbb    DWORD PTR [ebx],eax
     ab0:	0e                   	push   cs
     ab1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ab3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ab5:	27                   	daa    
     ab6:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     ab9:	11 01                	adc    DWORD PTR [ecx],eax
     abb:	12 06                	adc    al,BYTE PTR [esi]
     abd:	40                   	inc    eax
     abe:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     ac4:	00 00                	add    BYTE PTR [eax],al
     ac6:	0d 05 00 03 0e       	or     eax,0xe030005
     acb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     acd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     acf:	49                   	dec    ecx
     ad0:	13 02                	adc    eax,DWORD PTR [edx]
     ad2:	18 00                	sbb    BYTE PTR [eax],al
     ad4:	00 0e                	add    BYTE PTR [esi],cl
     ad6:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     ad9:	19 03                	sbb    DWORD PTR [ebx],eax
     adb:	0e                   	push   cs
     adc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ade:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ae0:	27                   	daa    
     ae1:	19 11                	sbb    DWORD PTR [ecx],edx
     ae3:	01 12                	add    DWORD PTR [edx],edx
     ae5:	06                   	push   es
     ae6:	40                   	inc    eax
     ae7:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     aed:	00 00                	add    BYTE PTR [eax],al
     aef:	0f 05                	syscall 
     af1:	00 03                	add    BYTE PTR [ebx],al
     af3:	08 3a                	or     BYTE PTR [edx],bh
     af5:	0b 3b                	or     edi,DWORD PTR [ebx]
     af7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     afa:	02 18                	add    bl,BYTE PTR [eax]
     afc:	00 00                	add    BYTE PTR [eax],al
     afe:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     b01:	03 0e                	add    ecx,DWORD PTR [esi]
     b03:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b05:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b07:	49                   	dec    ecx
     b08:	13 02                	adc    eax,DWORD PTR [edx]
     b0a:	18 00                	sbb    BYTE PTR [eax],al
     b0c:	00 11                	add    BYTE PTR [ecx],dl
     b0e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     b11:	19 03                	sbb    DWORD PTR [ebx],eax
     b13:	0e                   	push   cs
     b14:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b16:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b18:	49                   	dec    ecx
     b19:	13 3c 19             	adc    edi,DWORD PTR [ecx+ebx*1]
     b1c:	01 13                	add    DWORD PTR [ebx],edx
     b1e:	00 00                	add    BYTE PTR [eax],al
     b20:	12 18                	adc    bl,BYTE PTR [eax]
     b22:	00 00                	add    BYTE PTR [eax],al
     b24:	00 13                	add    BYTE PTR [ebx],dl
     b26:	0b 01                	or     eax,DWORD PTR [ecx]
     b28:	11 01                	adc    DWORD PTR [ecx],eax
     b2a:	12 06                	adc    al,BYTE PTR [esi]
     b2c:	01 13                	add    DWORD PTR [ebx],edx
     b2e:	00 00                	add    BYTE PTR [eax],al
     b30:	14 34                	adc    al,0x34
     b32:	00 03                	add    BYTE PTR [ebx],al
     b34:	08 3a                	or     BYTE PTR [edx],bh
     b36:	0b 3b                	or     edi,DWORD PTR [ebx]
     b38:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b3b:	02 18                	add    bl,BYTE PTR [eax]
     b3d:	00 00                	add    BYTE PTR [eax],al
     b3f:	15 0b 01 11 01       	adc    eax,0x111010b
     b44:	12 06                	adc    al,BYTE PTR [esi]
     b46:	00 00                	add    BYTE PTR [eax],al
     b48:	16                   	push   ss
     b49:	01 01                	add    DWORD PTR [ecx],eax
     b4b:	49                   	dec    ecx
     b4c:	13 01                	adc    eax,DWORD PTR [ecx]
     b4e:	13 00                	adc    eax,DWORD PTR [eax]
     b50:	00 17                	add    BYTE PTR [edi],dl
     b52:	21 00                	and    DWORD PTR [eax],eax
     b54:	49                   	dec    ecx
     b55:	13 2f                	adc    ebp,DWORD PTR [edi]
     b57:	0b 00                	or     eax,DWORD PTR [eax]
     b59:	00 18                	add    BYTE PTR [eax],bl
     b5b:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     b5e:	19 03                	sbb    DWORD PTR [ebx],eax
     b60:	0e                   	push   cs
     b61:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b63:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b65:	11 01                	adc    DWORD PTR [ecx],eax
     b67:	12 06                	adc    al,BYTE PTR [esi]
     b69:	40                   	inc    eax
     b6a:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     b70:	00 00                	add    BYTE PTR [eax],al
     b72:	19 2e                	sbb    DWORD PTR [esi],ebp
     b74:	01 3f                	add    DWORD PTR [edi],edi
     b76:	19 03                	sbb    DWORD PTR [ebx],eax
     b78:	0e                   	push   cs
     b79:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b7b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b7d:	49                   	dec    ecx
     b7e:	13 3c 19             	adc    edi,DWORD PTR [ecx+ebx*1]
     b81:	00 00                	add    BYTE PTR [eax],al
     b83:	1a 2e                	sbb    ch,BYTE PTR [esi]
     b85:	00 3f                	add    BYTE PTR [edi],bh
     b87:	19 03                	sbb    DWORD PTR [ebx],eax
     b89:	0e                   	push   cs
     b8a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b8c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b8e:	11 01                	adc    DWORD PTR [ecx],eax
     b90:	12 06                	adc    al,BYTE PTR [esi]
     b92:	40                   	inc    eax
     b93:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     b99:	1b 34 00             	sbb    esi,DWORD PTR [eax+eax*1]
     b9c:	03 0e                	add    ecx,DWORD PTR [esi]
     b9e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ba0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ba2:	49                   	dec    ecx
     ba3:	13 3f                	adc    edi,DWORD PTR [edi]
     ba5:	19 02                	sbb    DWORD PTR [edx],eax
     ba7:	18 00                	sbb    BYTE PTR [eax],al
     ba9:	00 00                	add    BYTE PTR [eax],al
     bab:	01 11                	add    DWORD PTR [ecx],edx
     bad:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     bb3:	0e                   	push   cs
     bb4:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     bb6:	11 01                	adc    DWORD PTR [ecx],eax
     bb8:	12 06                	adc    al,BYTE PTR [esi]
     bba:	10 17                	adc    BYTE PTR [edi],dl
     bbc:	00 00                	add    BYTE PTR [eax],al
     bbe:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     bc1:	0b 0b                	or     ecx,DWORD PTR [ebx]
     bc3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     bc6:	0e                   	push   cs
     bc7:	00 00                	add    BYTE PTR [eax],al
     bc9:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     bcc:	0b 0b                	or     ecx,DWORD PTR [ebx]
     bce:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     bd1:	08 00                	or     BYTE PTR [eax],al
     bd3:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     bd6:	00 03                	add    BYTE PTR [ebx],al
     bd8:	0e                   	push   cs
     bd9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bdb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bdd:	49                   	dec    ecx
     bde:	13 00                	adc    eax,DWORD PTR [eax]
     be0:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     be6:	49                   	dec    ecx
     be7:	13 00                	adc    eax,DWORD PTR [eax]
     be9:	00 06                	add    BYTE PTR [esi],al
     beb:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     bef:	00 00                	add    BYTE PTR [eax],al
     bf1:	07                   	pop    es
     bf2:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     bf5:	19 03                	sbb    DWORD PTR [ebx],eax
     bf7:	0e                   	push   cs
     bf8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bfa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bfc:	27                   	daa    
     bfd:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c00:	11 01                	adc    DWORD PTR [ecx],eax
     c02:	12 06                	adc    al,BYTE PTR [esi]
     c04:	40                   	inc    eax
     c05:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     c0b:	00 00                	add    BYTE PTR [eax],al
     c0d:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     c13:	0b 3b                	or     edi,DWORD PTR [ebx]
     c15:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c18:	02 18                	add    bl,BYTE PTR [eax]
     c1a:	00 00                	add    BYTE PTR [eax],al
     c1c:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     c22:	0b 3b                	or     edi,DWORD PTR [ebx]
     c24:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c27:	02 18                	add    bl,BYTE PTR [eax]
     c29:	00 00                	add    BYTE PTR [eax],al
     c2b:	0a 2e                	or     ch,BYTE PTR [esi]
     c2d:	01 3f                	add    DWORD PTR [edi],edi
     c2f:	19 03                	sbb    DWORD PTR [ebx],eax
     c31:	0e                   	push   cs
     c32:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c34:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c36:	27                   	daa    
     c37:	19 11                	sbb    DWORD PTR [ecx],edx
     c39:	01 12                	add    DWORD PTR [edx],edx
     c3b:	06                   	push   es
     c3c:	40                   	inc    eax
     c3d:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     c43:	00 00                	add    BYTE PTR [eax],al
     c45:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     c48:	03 08                	add    ecx,DWORD PTR [eax]
     c4a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c4c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c4e:	49                   	dec    ecx
     c4f:	13 02                	adc    eax,DWORD PTR [edx]
     c51:	18 00                	sbb    BYTE PTR [eax],al
     c53:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
     c56:	00 03                	add    BYTE PTR [ebx],al
     c58:	0e                   	push   cs
     c59:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c5b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c5d:	49                   	dec    ecx
     c5e:	13 3f                	adc    edi,DWORD PTR [edi]
     c60:	19 02                	sbb    DWORD PTR [edx],eax
     c62:	18 00                	sbb    BYTE PTR [eax],al
     c64:	00 00                	add    BYTE PTR [eax],al
     c66:	01 11                	add    DWORD PTR [ecx],edx
     c68:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     c6e:	0e                   	push   cs
     c6f:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     c71:	11 01                	adc    DWORD PTR [ecx],eax
     c73:	12 06                	adc    al,BYTE PTR [esi]
     c75:	10 17                	adc    BYTE PTR [edi],dl
     c77:	00 00                	add    BYTE PTR [eax],al
     c79:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     c7c:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c7e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c81:	0e                   	push   cs
     c82:	00 00                	add    BYTE PTR [eax],al
     c84:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     c87:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c89:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c8c:	08 00                	or     BYTE PTR [eax],al
     c8e:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     c91:	00 03                	add    BYTE PTR [ebx],al
     c93:	0e                   	push   cs
     c94:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c96:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c98:	49                   	dec    ecx
     c99:	13 00                	adc    eax,DWORD PTR [eax]
     c9b:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     ca1:	49                   	dec    ecx
     ca2:	13 00                	adc    eax,DWORD PTR [eax]
     ca4:	00 06                	add    BYTE PTR [esi],al
     ca6:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     caa:	00 00                	add    BYTE PTR [eax],al
     cac:	07                   	pop    es
     cad:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     cb0:	19 03                	sbb    DWORD PTR [ebx],eax
     cb2:	0e                   	push   cs
     cb3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cb5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cb7:	27                   	daa    
     cb8:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     cbb:	11 01                	adc    DWORD PTR [ecx],eax
     cbd:	12 06                	adc    al,BYTE PTR [esi]
     cbf:	40                   	inc    eax
     cc0:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     cc6:	00 00                	add    BYTE PTR [eax],al
     cc8:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     cce:	0b 3b                	or     edi,DWORD PTR [ebx]
     cd0:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     cd3:	02 18                	add    bl,BYTE PTR [eax]
     cd5:	00 00                	add    BYTE PTR [eax],al
     cd7:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     cda:	03 08                	add    ecx,DWORD PTR [eax]
     cdc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cde:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ce0:	49                   	dec    ecx
     ce1:	13 02                	adc    eax,DWORD PTR [edx]
     ce3:	18 00                	sbb    BYTE PTR [eax],al
     ce5:	00 0a                	add    BYTE PTR [edx],cl
     ce7:	34 00                	xor    al,0x0
     ce9:	03 0e                	add    ecx,DWORD PTR [esi]
     ceb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ced:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cef:	49                   	dec    ecx
     cf0:	13 3f                	adc    edi,DWORD PTR [edi]
     cf2:	19 02                	sbb    DWORD PTR [edx],eax
     cf4:	18 00                	sbb    BYTE PTR [eax],al
     cf6:	00 00                	add    BYTE PTR [eax],al
     cf8:	01 11                	add    DWORD PTR [ecx],edx
     cfa:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     d00:	0e                   	push   cs
     d01:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     d03:	11 01                	adc    DWORD PTR [ecx],eax
     d05:	12 06                	adc    al,BYTE PTR [esi]
     d07:	10 17                	adc    BYTE PTR [edi],dl
     d09:	00 00                	add    BYTE PTR [eax],al
     d0b:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     d0e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d10:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d13:	0e                   	push   cs
     d14:	00 00                	add    BYTE PTR [eax],al
     d16:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     d19:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d1b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d1e:	08 00                	or     BYTE PTR [eax],al
     d20:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     d23:	00 03                	add    BYTE PTR [ebx],al
     d25:	0e                   	push   cs
     d26:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d28:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d2a:	49                   	dec    ecx
     d2b:	13 00                	adc    eax,DWORD PTR [eax]
     d2d:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     d33:	49                   	dec    ecx
     d34:	13 00                	adc    eax,DWORD PTR [eax]
     d36:	00 06                	add    BYTE PTR [esi],al
     d38:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     d3c:	00 00                	add    BYTE PTR [eax],al
     d3e:	07                   	pop    es
     d3f:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     d42:	19 03                	sbb    DWORD PTR [ebx],eax
     d44:	0e                   	push   cs
     d45:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d47:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d49:	27                   	daa    
     d4a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d4d:	11 01                	adc    DWORD PTR [ecx],eax
     d4f:	12 06                	adc    al,BYTE PTR [esi]
     d51:	40                   	inc    eax
     d52:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     d58:	00 00                	add    BYTE PTR [eax],al
     d5a:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     d60:	0b 3b                	or     edi,DWORD PTR [ebx]
     d62:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d65:	02 18                	add    bl,BYTE PTR [eax]
     d67:	00 00                	add    BYTE PTR [eax],al
     d69:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     d6c:	03 08                	add    ecx,DWORD PTR [eax]
     d6e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d70:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d72:	49                   	dec    ecx
     d73:	13 02                	adc    eax,DWORD PTR [edx]
     d75:	18 00                	sbb    BYTE PTR [eax],al
     d77:	00 0a                	add    BYTE PTR [edx],cl
     d79:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     d7e:	0b 3b                	or     edi,DWORD PTR [ebx]
     d80:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d83:	02 18                	add    bl,BYTE PTR [eax]
     d85:	00 00                	add    BYTE PTR [eax],al
     d87:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     d8a:	03 0e                	add    ecx,DWORD PTR [esi]
     d8c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d8e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d90:	49                   	dec    ecx
     d91:	13 3f                	adc    edi,DWORD PTR [edi]
     d93:	19 02                	sbb    DWORD PTR [edx],eax
     d95:	18 00                	sbb    BYTE PTR [eax],al
     d97:	00 00                	add    BYTE PTR [eax],al
     d99:	01 11                	add    DWORD PTR [ecx],edx
     d9b:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     da1:	0e                   	push   cs
     da2:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     da4:	11 01                	adc    DWORD PTR [ecx],eax
     da6:	12 06                	adc    al,BYTE PTR [esi]
     da8:	10 17                	adc    BYTE PTR [edi],dl
     daa:	00 00                	add    BYTE PTR [eax],al
     dac:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     daf:	0b 0b                	or     ecx,DWORD PTR [ebx]
     db1:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     db4:	0e                   	push   cs
     db5:	00 00                	add    BYTE PTR [eax],al
     db7:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     dba:	0b 0b                	or     ecx,DWORD PTR [ebx]
     dbc:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     dbf:	08 00                	or     BYTE PTR [eax],al
     dc1:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     dc4:	00 03                	add    BYTE PTR [ebx],al
     dc6:	0e                   	push   cs
     dc7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dc9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     dcb:	49                   	dec    ecx
     dcc:	13 00                	adc    eax,DWORD PTR [eax]
     dce:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     dd4:	49                   	dec    ecx
     dd5:	13 00                	adc    eax,DWORD PTR [eax]
     dd7:	00 06                	add    BYTE PTR [esi],al
     dd9:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     ddc:	19 03                	sbb    DWORD PTR [ebx],eax
     dde:	0e                   	push   cs
     ddf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     de1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     de3:	27                   	daa    
     de4:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     de7:	11 01                	adc    DWORD PTR [ecx],eax
     de9:	12 06                	adc    al,BYTE PTR [esi]
     deb:	40                   	inc    eax
     dec:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     df2:	00 00                	add    BYTE PTR [eax],al
     df4:	07                   	pop    es
     df5:	05 00 03 08 3a       	add    eax,0x3a080300
     dfa:	0b 3b                	or     edi,DWORD PTR [ebx]
     dfc:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     dff:	02 18                	add    bl,BYTE PTR [eax]
     e01:	00 00                	add    BYTE PTR [eax],al
     e03:	08 2e                	or     BYTE PTR [esi],ch
     e05:	01 3f                	add    DWORD PTR [edi],edi
     e07:	19 03                	sbb    DWORD PTR [ebx],eax
     e09:	0e                   	push   cs
     e0a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e0c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e0e:	27                   	daa    
     e0f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e12:	11 01                	adc    DWORD PTR [ecx],eax
     e14:	12 06                	adc    al,BYTE PTR [esi]
     e16:	40                   	inc    eax
     e17:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     e1d:	00 00                	add    BYTE PTR [eax],al
     e1f:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     e22:	03 08                	add    ecx,DWORD PTR [eax]
     e24:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e26:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e28:	49                   	dec    ecx
     e29:	13 02                	adc    eax,DWORD PTR [edx]
     e2b:	18 00                	sbb    BYTE PTR [eax],al
     e2d:	00 0a                	add    BYTE PTR [edx],cl
     e2f:	34 00                	xor    al,0x0
     e31:	03 0e                	add    ecx,DWORD PTR [esi]
     e33:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e35:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e37:	49                   	dec    ecx
     e38:	13 3f                	adc    edi,DWORD PTR [edi]
     e3a:	19 02                	sbb    DWORD PTR [edx],eax
     e3c:	18 00                	sbb    BYTE PTR [eax],al
     e3e:	00 00                	add    BYTE PTR [eax],al
     e40:	01 11                	add    DWORD PTR [ecx],edx
     e42:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     e48:	0e                   	push   cs
     e49:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     e4b:	11 01                	adc    DWORD PTR [ecx],eax
     e4d:	12 06                	adc    al,BYTE PTR [esi]
     e4f:	10 17                	adc    BYTE PTR [edi],dl
     e51:	00 00                	add    BYTE PTR [eax],al
     e53:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     e56:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e58:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e5b:	08 00                	or     BYTE PTR [eax],al
     e5d:	00 03                	add    BYTE PTR [ebx],al
     e5f:	16                   	push   ss
     e60:	00 03                	add    BYTE PTR [ebx],al
     e62:	0e                   	push   cs
     e63:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e65:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e67:	49                   	dec    ecx
     e68:	13 00                	adc    eax,DWORD PTR [eax]
     e6a:	00 04 24             	add    BYTE PTR [esp],al
     e6d:	00 0b                	add    BYTE PTR [ebx],cl
     e6f:	0b 3e                	or     edi,DWORD PTR [esi]
     e71:	0b 03                	or     eax,DWORD PTR [ebx]
     e73:	0e                   	push   cs
     e74:	00 00                	add    BYTE PTR [eax],al
     e76:	05 2e 01 3f 19       	add    eax,0x193f012e
     e7b:	03 0e                	add    ecx,DWORD PTR [esi]
     e7d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e7f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e81:	27                   	daa    
     e82:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e85:	11 01                	adc    DWORD PTR [ecx],eax
     e87:	12 06                	adc    al,BYTE PTR [esi]
     e89:	40                   	inc    eax
     e8a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     e90:	00 00                	add    BYTE PTR [eax],al
     e92:	06                   	push   es
     e93:	05 00 03 08 3a       	add    eax,0x3a080300
     e98:	0b 3b                	or     edi,DWORD PTR [ebx]
     e9a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e9d:	02 18                	add    bl,BYTE PTR [eax]
     e9f:	00 00                	add    BYTE PTR [eax],al
     ea1:	07                   	pop    es
     ea2:	34 00                	xor    al,0x0
     ea4:	03 08                	add    ecx,DWORD PTR [eax]
     ea6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ea8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     eaa:	49                   	dec    ecx
     eab:	13 02                	adc    eax,DWORD PTR [edx]
     ead:	18 00                	sbb    BYTE PTR [eax],al
     eaf:	00 08                	add    BYTE PTR [eax],cl
     eb1:	0f 00 0b             	str    WORD PTR [ebx]
     eb4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     eb7:	00 00                	add    BYTE PTR [eax],al
     eb9:	09 26                	or     DWORD PTR [esi],esp
     ebb:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     ebe:	00 00                	add    BYTE PTR [eax],al
     ec0:	0a 2e                	or     ch,BYTE PTR [esi]
     ec2:	01 3f                	add    DWORD PTR [edi],edi
     ec4:	19 03                	sbb    DWORD PTR [ebx],eax
     ec6:	0e                   	push   cs
     ec7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ec9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ecb:	27                   	daa    
     ecc:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     ecf:	11 01                	adc    DWORD PTR [ecx],eax
     ed1:	12 06                	adc    al,BYTE PTR [esi]
     ed3:	40                   	inc    eax
     ed4:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     eda:	00 01                	add    BYTE PTR [ecx],al
     edc:	11 01                	adc    DWORD PTR [ecx],eax
     ede:	25 0e 13 0b 03       	and    eax,0x30b130e
     ee3:	0e                   	push   cs
     ee4:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     ee6:	11 01                	adc    DWORD PTR [ecx],eax
     ee8:	12 06                	adc    al,BYTE PTR [esi]
     eea:	10 17                	adc    BYTE PTR [edi],dl
     eec:	00 00                	add    BYTE PTR [eax],al
     eee:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     ef1:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ef3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ef6:	08 00                	or     BYTE PTR [eax],al
     ef8:	00 03                	add    BYTE PTR [ebx],al
     efa:	16                   	push   ss
     efb:	00 03                	add    BYTE PTR [ebx],al
     efd:	0e                   	push   cs
     efe:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f00:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f02:	49                   	dec    ecx
     f03:	13 00                	adc    eax,DWORD PTR [eax]
     f05:	00 04 24             	add    BYTE PTR [esp],al
     f08:	00 0b                	add    BYTE PTR [ebx],cl
     f0a:	0b 3e                	or     edi,DWORD PTR [esi]
     f0c:	0b 03                	or     eax,DWORD PTR [ebx]
     f0e:	0e                   	push   cs
     f0f:	00 00                	add    BYTE PTR [eax],al
     f11:	05 2e 01 3f 19       	add    eax,0x193f012e
     f16:	03 0e                	add    ecx,DWORD PTR [esi]
     f18:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f1a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f1c:	27                   	daa    
     f1d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f20:	11 01                	adc    DWORD PTR [ecx],eax
     f22:	12 06                	adc    al,BYTE PTR [esi]
     f24:	40                   	inc    eax
     f25:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     f2b:	00 00                	add    BYTE PTR [eax],al
     f2d:	06                   	push   es
     f2e:	05 00 03 08 3a       	add    eax,0x3a080300
     f33:	0b 3b                	or     edi,DWORD PTR [ebx]
     f35:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f38:	02 18                	add    bl,BYTE PTR [eax]
     f3a:	00 00                	add    BYTE PTR [eax],al
     f3c:	07                   	pop    es
     f3d:	0f 00 0b             	str    WORD PTR [ebx]
     f40:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f43:	00 00                	add    BYTE PTR [eax],al
     f45:	08 26                	or     BYTE PTR [esi],ah
     f47:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     f4a:	00 00                	add    BYTE PTR [eax],al
     f4c:	09 2e                	or     DWORD PTR [esi],ebp
     f4e:	01 3f                	add    DWORD PTR [edi],edi
     f50:	19 03                	sbb    DWORD PTR [ebx],eax
     f52:	0e                   	push   cs
     f53:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f55:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f57:	27                   	daa    
     f58:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f5b:	11 01                	adc    DWORD PTR [ecx],eax
     f5d:	12 06                	adc    al,BYTE PTR [esi]
     f5f:	40                   	inc    eax
     f60:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     f66:	00 01                	add    BYTE PTR [ecx],al
     f68:	11 01                	adc    DWORD PTR [ecx],eax
     f6a:	25 0e 13 0b 03       	and    eax,0x30b130e
     f6f:	0e                   	push   cs
     f70:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     f72:	11 01                	adc    DWORD PTR [ecx],eax
     f74:	12 06                	adc    al,BYTE PTR [esi]
     f76:	10 17                	adc    BYTE PTR [edi],dl
     f78:	00 00                	add    BYTE PTR [eax],al
     f7a:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     f7d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f7f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f82:	08 00                	or     BYTE PTR [eax],al
     f84:	00 03                	add    BYTE PTR [ebx],al
     f86:	16                   	push   ss
     f87:	00 03                	add    BYTE PTR [ebx],al
     f89:	0e                   	push   cs
     f8a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f8c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f8e:	49                   	dec    ecx
     f8f:	13 00                	adc    eax,DWORD PTR [eax]
     f91:	00 04 24             	add    BYTE PTR [esp],al
     f94:	00 0b                	add    BYTE PTR [ebx],cl
     f96:	0b 3e                	or     edi,DWORD PTR [esi]
     f98:	0b 03                	or     eax,DWORD PTR [ebx]
     f9a:	0e                   	push   cs
     f9b:	00 00                	add    BYTE PTR [eax],al
     f9d:	05 2e 01 3f 19       	add    eax,0x193f012e
     fa2:	03 0e                	add    ecx,DWORD PTR [esi]
     fa4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fa6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fa8:	27                   	daa    
     fa9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     fac:	11 01                	adc    DWORD PTR [ecx],eax
     fae:	12 06                	adc    al,BYTE PTR [esi]
     fb0:	40                   	inc    eax
     fb1:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     fb7:	00 00                	add    BYTE PTR [eax],al
     fb9:	06                   	push   es
     fba:	05 00 03 08 3a       	add    eax,0x3a080300
     fbf:	0b 3b                	or     edi,DWORD PTR [ebx]
     fc1:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fc4:	02 18                	add    bl,BYTE PTR [eax]
     fc6:	00 00                	add    BYTE PTR [eax],al
     fc8:	07                   	pop    es
     fc9:	34 00                	xor    al,0x0
     fcb:	03 08                	add    ecx,DWORD PTR [eax]
     fcd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fcf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fd1:	49                   	dec    ecx
     fd2:	13 02                	adc    eax,DWORD PTR [edx]
     fd4:	18 00                	sbb    BYTE PTR [eax],al
     fd6:	00 08                	add    BYTE PTR [eax],cl
     fd8:	0f 00 0b             	str    WORD PTR [ebx]
     fdb:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fde:	00 00                	add    BYTE PTR [eax],al
     fe0:	09 26                	or     DWORD PTR [esi],esp
     fe2:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     fe5:	00 00                	add    BYTE PTR [eax],al
     fe7:	0a 2e                	or     ch,BYTE PTR [esi]
     fe9:	01 3f                	add    DWORD PTR [edi],edi
     feb:	19 03                	sbb    DWORD PTR [ebx],eax
     fed:	0e                   	push   cs
     fee:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ff0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ff2:	27                   	daa    
     ff3:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     ff6:	11 01                	adc    DWORD PTR [ecx],eax
     ff8:	12 06                	adc    al,BYTE PTR [esi]
     ffa:	40                   	inc    eax
     ffb:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
    1001:	00 01                	add    BYTE PTR [ecx],al
    1003:	11 01                	adc    DWORD PTR [ecx],eax
    1005:	25 0e 13 0b 03       	and    eax,0x30b130e
    100a:	0e                   	push   cs
    100b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    100d:	11 01                	adc    DWORD PTR [ecx],eax
    100f:	12 06                	adc    al,BYTE PTR [esi]
    1011:	10 17                	adc    BYTE PTR [edi],dl
    1013:	00 00                	add    BYTE PTR [eax],al
    1015:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1018:	0b 0b                	or     ecx,DWORD PTR [ebx]
    101a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    101d:	0e                   	push   cs
    101e:	00 00                	add    BYTE PTR [eax],al
    1020:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1023:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1025:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1028:	08 00                	or     BYTE PTR [eax],al
    102a:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    102d:	00 03                	add    BYTE PTR [ebx],al
    102f:	0e                   	push   cs
    1030:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1032:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1034:	49                   	dec    ecx
    1035:	13 00                	adc    eax,DWORD PTR [eax]
    1037:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    103d:	49                   	dec    ecx
    103e:	13 00                	adc    eax,DWORD PTR [eax]
    1040:	00 06                	add    BYTE PTR [esi],al
    1042:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1046:	00 00                	add    BYTE PTR [eax],al
    1048:	07                   	pop    es
    1049:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    104c:	19 03                	sbb    DWORD PTR [ebx],eax
    104e:	0e                   	push   cs
    104f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1051:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1053:	27                   	daa    
    1054:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1057:	11 01                	adc    DWORD PTR [ecx],eax
    1059:	12 06                	adc    al,BYTE PTR [esi]
    105b:	40                   	inc    eax
    105c:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1062:	00 00                	add    BYTE PTR [eax],al
    1064:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    106a:	0b 3b                	or     edi,DWORD PTR [ebx]
    106c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    106f:	02 18                	add    bl,BYTE PTR [eax]
    1071:	00 00                	add    BYTE PTR [eax],al
    1073:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1076:	03 08                	add    ecx,DWORD PTR [eax]
    1078:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    107a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    107c:	49                   	dec    ecx
    107d:	13 02                	adc    eax,DWORD PTR [edx]
    107f:	18 00                	sbb    BYTE PTR [eax],al
    1081:	00 0a                	add    BYTE PTR [edx],cl
    1083:	34 00                	xor    al,0x0
    1085:	03 0e                	add    ecx,DWORD PTR [esi]
    1087:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1089:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    108b:	49                   	dec    ecx
    108c:	13 00                	adc    eax,DWORD PTR [eax]
    108e:	00 0b                	add    BYTE PTR [ebx],cl
    1090:	34 00                	xor    al,0x0
    1092:	03 08                	add    ecx,DWORD PTR [eax]
    1094:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1096:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1098:	49                   	dec    ecx
    1099:	13 00                	adc    eax,DWORD PTR [eax]
    109b:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    109e:	00 03                	add    BYTE PTR [ebx],al
    10a0:	0e                   	push   cs
    10a1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10a3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10a5:	49                   	dec    ecx
    10a6:	13 02                	adc    eax,DWORD PTR [edx]
    10a8:	18 00                	sbb    BYTE PTR [eax],al
    10aa:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    10b0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10b2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10b4:	49                   	dec    ecx
    10b5:	13 3f                	adc    edi,DWORD PTR [edi]
    10b7:	19 02                	sbb    DWORD PTR [edx],eax
    10b9:	18 00                	sbb    BYTE PTR [eax],al
    10bb:	00 00                	add    BYTE PTR [eax],al
    10bd:	01 11                	add    DWORD PTR [ecx],edx
    10bf:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    10c5:	0e                   	push   cs
    10c6:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    10c8:	11 01                	adc    DWORD PTR [ecx],eax
    10ca:	12 06                	adc    al,BYTE PTR [esi]
    10cc:	10 17                	adc    BYTE PTR [edi],dl
    10ce:	00 00                	add    BYTE PTR [eax],al
    10d0:	02 2e                	add    ch,BYTE PTR [esi]
    10d2:	01 3f                	add    DWORD PTR [edi],edi
    10d4:	19 03                	sbb    DWORD PTR [ebx],eax
    10d6:	0e                   	push   cs
    10d7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10d9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10db:	27                   	daa    
    10dc:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    10df:	11 01                	adc    DWORD PTR [ecx],eax
    10e1:	12 06                	adc    al,BYTE PTR [esi]
    10e3:	40                   	inc    eax
    10e4:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    10ea:	00 00                	add    BYTE PTR [eax],al
    10ec:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
    10f2:	0b 3b                	or     edi,DWORD PTR [ebx]
    10f4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    10f7:	02 18                	add    bl,BYTE PTR [eax]
    10f9:	00 00                	add    BYTE PTR [eax],al
    10fb:	04 0f                	add    al,0xf
    10fd:	00 0b                	add    BYTE PTR [ebx],cl
    10ff:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1102:	00 00                	add    BYTE PTR [eax],al
    1104:	05 24 00 0b 0b       	add    eax,0xb0b0024
    1109:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    110c:	0e                   	push   cs
    110d:	00 00                	add    BYTE PTR [eax],al
    110f:	06                   	push   es
    1110:	24 00                	and    al,0x0
    1112:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1114:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1117:	08 00                	or     BYTE PTR [eax],al
    1119:	00 00                	add    BYTE PTR [eax],al
    111b:	01 11                	add    DWORD PTR [ecx],edx
    111d:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1123:	0e                   	push   cs
    1124:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1126:	11 01                	adc    DWORD PTR [ecx],eax
    1128:	12 06                	adc    al,BYTE PTR [esi]
    112a:	10 17                	adc    BYTE PTR [edi],dl
    112c:	00 00                	add    BYTE PTR [eax],al
    112e:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1131:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1133:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1136:	0e                   	push   cs
    1137:	00 00                	add    BYTE PTR [eax],al
    1139:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    113c:	0b 0b                	or     ecx,DWORD PTR [ebx]
    113e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1141:	08 00                	or     BYTE PTR [eax],al
    1143:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1146:	00 03                	add    BYTE PTR [ebx],al
    1148:	0e                   	push   cs
    1149:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    114b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    114d:	49                   	dec    ecx
    114e:	13 00                	adc    eax,DWORD PTR [eax]
    1150:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1156:	49                   	dec    ecx
    1157:	13 00                	adc    eax,DWORD PTR [eax]
    1159:	00 06                	add    BYTE PTR [esi],al
    115b:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    115f:	00 00                	add    BYTE PTR [eax],al
    1161:	07                   	pop    es
    1162:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1165:	19 03                	sbb    DWORD PTR [ebx],eax
    1167:	0e                   	push   cs
    1168:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    116a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    116c:	27                   	daa    
    116d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1170:	11 01                	adc    DWORD PTR [ecx],eax
    1172:	12 06                	adc    al,BYTE PTR [esi]
    1174:	40                   	inc    eax
    1175:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    117b:	00 00                	add    BYTE PTR [eax],al
    117d:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    1183:	0b 3b                	or     edi,DWORD PTR [ebx]
    1185:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1188:	02 18                	add    bl,BYTE PTR [eax]
    118a:	00 00                	add    BYTE PTR [eax],al
    118c:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    118f:	03 08                	add    ecx,DWORD PTR [eax]
    1191:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1193:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1195:	49                   	dec    ecx
    1196:	13 02                	adc    eax,DWORD PTR [edx]
    1198:	18 00                	sbb    BYTE PTR [eax],al
    119a:	00 0a                	add    BYTE PTR [edx],cl
    119c:	34 00                	xor    al,0x0
    119e:	03 0e                	add    ecx,DWORD PTR [esi]
    11a0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11a2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11a4:	49                   	dec    ecx
    11a5:	13 00                	adc    eax,DWORD PTR [eax]
    11a7:	00 0b                	add    BYTE PTR [ebx],cl
    11a9:	34 00                	xor    al,0x0
    11ab:	03 08                	add    ecx,DWORD PTR [eax]
    11ad:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11af:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11b1:	49                   	dec    ecx
    11b2:	13 00                	adc    eax,DWORD PTR [eax]
    11b4:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    11b7:	00 03                	add    BYTE PTR [ebx],al
    11b9:	0e                   	push   cs
    11ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11be:	49                   	dec    ecx
    11bf:	13 3f                	adc    edi,DWORD PTR [edi]
    11c1:	19 02                	sbb    DWORD PTR [edx],eax
    11c3:	18 00                	sbb    BYTE PTR [eax],al
    11c5:	00 00                	add    BYTE PTR [eax],al
    11c7:	01 11                	add    DWORD PTR [ecx],edx
    11c9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    11cf:	0e                   	push   cs
    11d0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    11d2:	11 01                	adc    DWORD PTR [ecx],eax
    11d4:	12 06                	adc    al,BYTE PTR [esi]
    11d6:	10 17                	adc    BYTE PTR [edi],dl
    11d8:	00 00                	add    BYTE PTR [eax],al
    11da:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    11dd:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11df:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11e2:	0e                   	push   cs
    11e3:	00 00                	add    BYTE PTR [eax],al
    11e5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    11e8:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11ea:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11ed:	08 00                	or     BYTE PTR [eax],al
    11ef:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    11f2:	00 03                	add    BYTE PTR [ebx],al
    11f4:	0e                   	push   cs
    11f5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11f7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11f9:	49                   	dec    ecx
    11fa:	13 00                	adc    eax,DWORD PTR [eax]
    11fc:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1202:	49                   	dec    ecx
    1203:	13 00                	adc    eax,DWORD PTR [eax]
    1205:	00 06                	add    BYTE PTR [esi],al
    1207:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    120a:	19 03                	sbb    DWORD PTR [ebx],eax
    120c:	0e                   	push   cs
    120d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    120f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1211:	27                   	daa    
    1212:	19 11                	sbb    DWORD PTR [ecx],edx
    1214:	01 12                	add    DWORD PTR [edx],edx
    1216:	06                   	push   es
    1217:	40                   	inc    eax
    1218:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    121e:	00 00                	add    BYTE PTR [eax],al
    1220:	07                   	pop    es
    1221:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    1226:	0b 3b                	or     edi,DWORD PTR [ebx]
    1228:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    122b:	02 18                	add    bl,BYTE PTR [eax]
    122d:	00 00                	add    BYTE PTR [eax],al
    122f:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    1232:	03 08                	add    ecx,DWORD PTR [eax]
    1234:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1236:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1238:	49                   	dec    ecx
    1239:	13 02                	adc    eax,DWORD PTR [edx]
    123b:	18 00                	sbb    BYTE PTR [eax],al
    123d:	00 09                	add    BYTE PTR [ecx],cl
    123f:	34 00                	xor    al,0x0
    1241:	03 0e                	add    ecx,DWORD PTR [esi]
    1243:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1245:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1247:	49                   	dec    ecx
    1248:	13 3f                	adc    edi,DWORD PTR [edi]
    124a:	19 02                	sbb    DWORD PTR [edx],eax
    124c:	18 00                	sbb    BYTE PTR [eax],al
    124e:	00 00                	add    BYTE PTR [eax],al
    1250:	01 11                	add    DWORD PTR [ecx],edx
    1252:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1258:	0e                   	push   cs
    1259:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    125b:	11 01                	adc    DWORD PTR [ecx],eax
    125d:	12 06                	adc    al,BYTE PTR [esi]
    125f:	10 17                	adc    BYTE PTR [edi],dl
    1261:	00 00                	add    BYTE PTR [eax],al
    1263:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1266:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1268:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    126b:	0e                   	push   cs
    126c:	00 00                	add    BYTE PTR [eax],al
    126e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1271:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1273:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1276:	08 00                	or     BYTE PTR [eax],al
    1278:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    127b:	00 03                	add    BYTE PTR [ebx],al
    127d:	0e                   	push   cs
    127e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1280:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1282:	49                   	dec    ecx
    1283:	13 00                	adc    eax,DWORD PTR [eax]
    1285:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    128b:	49                   	dec    ecx
    128c:	13 00                	adc    eax,DWORD PTR [eax]
    128e:	00 06                	add    BYTE PTR [esi],al
    1290:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1293:	19 03                	sbb    DWORD PTR [ebx],eax
    1295:	0e                   	push   cs
    1296:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1298:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    129a:	27                   	daa    
    129b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    129e:	11 01                	adc    DWORD PTR [ecx],eax
    12a0:	12 06                	adc    al,BYTE PTR [esi]
    12a2:	40                   	inc    eax
    12a3:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    12a9:	00 00                	add    BYTE PTR [eax],al
    12ab:	07                   	pop    es
    12ac:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    12b1:	0b 3b                	or     edi,DWORD PTR [ebx]
    12b3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    12b6:	02 18                	add    bl,BYTE PTR [eax]
    12b8:	00 00                	add    BYTE PTR [eax],al
    12ba:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    12bd:	03 08                	add    ecx,DWORD PTR [eax]
    12bf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12c1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12c3:	49                   	dec    ecx
    12c4:	13 02                	adc    eax,DWORD PTR [edx]
    12c6:	18 00                	sbb    BYTE PTR [eax],al
    12c8:	00 09                	add    BYTE PTR [ecx],cl
    12ca:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    12cd:	19 03                	sbb    DWORD PTR [ebx],eax
    12cf:	0e                   	push   cs
    12d0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12d2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12d4:	27                   	daa    
    12d5:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    12d8:	11 01                	adc    DWORD PTR [ecx],eax
    12da:	12 06                	adc    al,BYTE PTR [esi]
    12dc:	40                   	inc    eax
    12dd:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    12e3:	00 00                	add    BYTE PTR [eax],al
    12e5:	0a 01                	or     al,BYTE PTR [ecx]
    12e7:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
    12ea:	01 13                	add    DWORD PTR [ebx],edx
    12ec:	00 00                	add    BYTE PTR [eax],al
    12ee:	0b 21                	or     esp,DWORD PTR [ecx]
    12f0:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    12f3:	2f                   	das    
    12f4:	0b 00                	or     eax,DWORD PTR [eax]
    12f6:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    12f9:	00 03                	add    BYTE PTR [ebx],al
    12fb:	0e                   	push   cs
    12fc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12fe:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1300:	49                   	dec    ecx
    1301:	13 02                	adc    eax,DWORD PTR [edx]
    1303:	18 00                	sbb    BYTE PTR [eax],al
    1305:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    130b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    130d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    130f:	49                   	dec    ecx
    1310:	13 3f                	adc    edi,DWORD PTR [edi]
    1312:	19 02                	sbb    DWORD PTR [edx],eax
    1314:	18 00                	sbb    BYTE PTR [eax],al
    1316:	00 00                	add    BYTE PTR [eax],al
    1318:	01 11                	add    DWORD PTR [ecx],edx
    131a:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1320:	0e                   	push   cs
    1321:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1323:	11 01                	adc    DWORD PTR [ecx],eax
    1325:	12 06                	adc    al,BYTE PTR [esi]
    1327:	10 17                	adc    BYTE PTR [edi],dl
    1329:	00 00                	add    BYTE PTR [eax],al
    132b:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    132e:	03 0e                	add    ecx,DWORD PTR [esi]
    1330:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1332:	49                   	dec    ecx
    1333:	13 3a                	adc    edi,DWORD PTR [edx]
    1335:	0b 3b                	or     edi,DWORD PTR [ebx]
    1337:	0b 01                	or     eax,DWORD PTR [ecx]
    1339:	13 00                	adc    eax,DWORD PTR [eax]
    133b:	00 03                	add    BYTE PTR [ebx],al
    133d:	28 00                	sub    BYTE PTR [eax],al
    133f:	03 0e                	add    ecx,DWORD PTR [esi]
    1341:	1c 0b                	sbb    al,0xb
    1343:	00 00                	add    BYTE PTR [eax],al
    1345:	04 28                	add    al,0x28
    1347:	00 03                	add    BYTE PTR [ebx],al
    1349:	0e                   	push   cs
    134a:	1c 05                	sbb    al,0x5
    134c:	00 00                	add    BYTE PTR [eax],al
    134e:	05 24 00 0b 0b       	add    eax,0xb0b0024
    1353:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1356:	0e                   	push   cs
    1357:	00 00                	add    BYTE PTR [eax],al
    1359:	06                   	push   es
    135a:	24 00                	and    al,0x0
    135c:	0b 0b                	or     ecx,DWORD PTR [ebx]
    135e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1361:	08 00                	or     BYTE PTR [eax],al
    1363:	00 07                	add    BYTE PTR [edi],al
    1365:	16                   	push   ss
    1366:	00 03                	add    BYTE PTR [ebx],al
    1368:	0e                   	push   cs
    1369:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    136b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    136d:	49                   	dec    ecx
    136e:	13 00                	adc    eax,DWORD PTR [eax]
    1370:	00 08                	add    BYTE PTR [eax],cl
    1372:	13 01                	adc    eax,DWORD PTR [ecx]
    1374:	03 08                	add    ecx,DWORD PTR [eax]
    1376:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1378:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    137a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    137c:	01 13                	add    DWORD PTR [ebx],edx
    137e:	00 00                	add    BYTE PTR [eax],al
    1380:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
    1386:	0b 3b                	or     edi,DWORD PTR [ebx]
    1388:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    138b:	38 0b                	cmp    BYTE PTR [ebx],cl
    138d:	00 00                	add    BYTE PTR [eax],al
    138f:	0a 0f                	or     cl,BYTE PTR [edi]
    1391:	00 0b                	add    BYTE PTR [ebx],cl
    1393:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1396:	00 00                	add    BYTE PTR [eax],al
    1398:	0b 26                	or     esp,DWORD PTR [esi]
    139a:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    139d:	00 00                	add    BYTE PTR [eax],al
    139f:	0c 2e                	or     al,0x2e
    13a1:	01 3f                	add    DWORD PTR [edi],edi
    13a3:	19 03                	sbb    DWORD PTR [ebx],eax
    13a5:	0e                   	push   cs
    13a6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13a8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13aa:	49                   	dec    ecx
    13ab:	13 11                	adc    edx,DWORD PTR [ecx]
    13ad:	01 12                	add    DWORD PTR [edx],edx
    13af:	06                   	push   es
    13b0:	40                   	inc    eax
    13b1:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    13b7:	00 00                	add    BYTE PTR [eax],al
    13b9:	0d 34 00 03 0e       	or     eax,0xe030034
    13be:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13c0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13c2:	49                   	dec    ecx
    13c3:	13 02                	adc    eax,DWORD PTR [edx]
    13c5:	18 00                	sbb    BYTE PTR [eax],al
    13c7:	00 0e                	add    BYTE PTR [esi],cl
    13c9:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    13cc:	19 03                	sbb    DWORD PTR [ebx],eax
    13ce:	0e                   	push   cs
    13cf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13d1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13d3:	27                   	daa    
    13d4:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13d7:	11 01                	adc    DWORD PTR [ecx],eax
    13d9:	12 06                	adc    al,BYTE PTR [esi]
    13db:	40                   	inc    eax
    13dc:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    13e2:	00 00                	add    BYTE PTR [eax],al
    13e4:	0f 05                	syscall 
    13e6:	00 03                	add    BYTE PTR [ebx],al
    13e8:	0e                   	push   cs
    13e9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13eb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13ed:	49                   	dec    ecx
    13ee:	13 02                	adc    eax,DWORD PTR [edx]
    13f0:	18 00                	sbb    BYTE PTR [eax],al
    13f2:	00 10                	add    BYTE PTR [eax],dl
    13f4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    13f7:	19 03                	sbb    DWORD PTR [ebx],eax
    13f9:	0e                   	push   cs
    13fa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13fc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13fe:	27                   	daa    
    13ff:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1402:	11 01                	adc    DWORD PTR [ecx],eax
    1404:	12 06                	adc    al,BYTE PTR [esi]
    1406:	40                   	inc    eax
    1407:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    140d:	00 00                	add    BYTE PTR [eax],al
    140f:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    1412:	03 08                	add    ecx,DWORD PTR [eax]
    1414:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1416:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1418:	49                   	dec    ecx
    1419:	13 02                	adc    eax,DWORD PTR [edx]
    141b:	18 00                	sbb    BYTE PTR [eax],al
    141d:	00 12                	add    BYTE PTR [edx],dl
    141f:	34 00                	xor    al,0x0
    1421:	03 0e                	add    ecx,DWORD PTR [esi]
    1423:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1425:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1427:	49                   	dec    ecx
    1428:	13 3f                	adc    edi,DWORD PTR [edi]
    142a:	19 02                	sbb    DWORD PTR [edx],eax
    142c:	18 00                	sbb    BYTE PTR [eax],al
    142e:	00 13                	add    BYTE PTR [ebx],dl
    1430:	01 01                	add    DWORD PTR [ecx],eax
    1432:	49                   	dec    ecx
    1433:	13 01                	adc    eax,DWORD PTR [ecx]
    1435:	13 00                	adc    eax,DWORD PTR [eax]
    1437:	00 14 21             	add    BYTE PTR [ecx+eiz*1],dl
    143a:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    143d:	2f                   	das    
    143e:	0b 00                	or     eax,DWORD PTR [eax]
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
   c:	00 00                	add    BYTE PTR [eax],al
   e:	00 00                	add    BYTE PTR [eax],al
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 30                	add    BYTE PTR [eax],dh
  14:	70 00                	jo     16 <sysEnter_Vector-0x12ffea>
	...
  1e:	00 00                	add    BYTE PTR [eax],al
  20:	1c 00                	sbb    al,0x0
  22:	00 00                	add    BYTE PTR [eax],al
  24:	02 00                	add    al,BYTE PTR [eax]
  26:	6e                   	outs   dx,BYTE PTR ds:[esi]
  27:	01 00                	add    DWORD PTR [eax],eax
  29:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  2c:	00 00                	add    BYTE PTR [eax],al
  2e:	00 00                	add    BYTE PTR [eax],al
  30:	70 00                	jo     32 <sysEnter_Vector-0x12ffce>
  32:	00 30                	add    BYTE PTR [eax],dh
  34:	aa                   	stos   BYTE PTR es:[edi],al
	...
  3d:	00 00                	add    BYTE PTR [eax],al
  3f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	1b 03                	sbb    eax,DWORD PTR [ebx]
  48:	00 00                	add    BYTE PTR [eax],al
  4a:	04 00                	add    al,0x0
  4c:	00 00                	add    BYTE PTR [eax],al
  4e:	00 00                	add    BYTE PTR [eax],al
  50:	1c 01                	sbb    al,0x1
  52:	00 30                	add    BYTE PTR [eax],dh
  54:	97                   	xchg   edi,eax
	...
  5d:	00 00                	add    BYTE PTR [eax],al
  5f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
  6a:	04 00                	add    al,0x0
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	b4 01                	mov    ah,0x1
  72:	00 30                	add    BYTE PTR [eax],dh
  74:	49                   	dec    ecx
  75:	02 00                	add    al,BYTE PTR [eax]
	...
  7f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	8c 06                	mov    WORD PTR [esi],es
  88:	00 00                	add    BYTE PTR [eax],al
  8a:	04 00                	add    al,0x0
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  93:	30 6b 02             	xor    BYTE PTR [ebx+0x2],ch
	...
  9e:	00 00                	add    BYTE PTR [eax],al
  a0:	1c 00                	sbb    al,0x0
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	4d                   	dec    ebp
  a7:	08 00                	or     BYTE PTR [eax],al
  a9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	6c                   	ins    BYTE PTR es:[edi],dx
  b1:	06                   	push   es
  b2:	00 30                	add    BYTE PTR [eax],dh
  b4:	bd 00 00 00 00       	mov    ebp,0x0
  b9:	00 00                	add    BYTE PTR [eax],al
  bb:	00 00                	add    BYTE PTR [eax],al
  bd:	00 00                	add    BYTE PTR [eax],al
  bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	f1                   	icebp  
  c7:	0a 00                	or     al,BYTE PTR [eax]
  c9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  cc:	00 00                	add    BYTE PTR [eax],al
  ce:	00 00                	add    BYTE PTR [eax],al
  d0:	2c 07                	sub    al,0x7
  d2:	00 30                	add    BYTE PTR [eax],dh
  d4:	52                   	push   edx
  d5:	01 00                	add    DWORD PTR [eax],eax
	...
  df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	9b                   	fwait
  e7:	0d 00 00 04 00       	or     eax,0x40000
  ec:	00 00                	add    BYTE PTR [eax],al
  ee:	00 00                	add    BYTE PTR [eax],al
  f0:	80 08 00             	or     BYTE PTR [eax],0x0
  f3:	30 2b                	xor    BYTE PTR [ebx],ch
  f5:	06                   	push   es
	...
  fe:	00 00                	add    BYTE PTR [eax],al
 100:	1c 00                	sbb    al,0x0
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	de 14 00             	ficom  WORD PTR [eax+eax*1]
 109:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 10c:	00 00                	add    BYTE PTR [eax],al
 10e:	00 00                	add    BYTE PTR [eax],al
 110:	ac                   	lods   al,BYTE PTR ds:[esi]
 111:	0e                   	push   cs
 112:	00 30                	add    BYTE PTR [eax],dh
 114:	61                   	popa   
 115:	03 00                	add    eax,DWORD PTR [eax]
	...
 11f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	45                   	inc    ebp
 127:	18 00                	sbb    BYTE PTR [eax],al
 129:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 12c:	00 00                	add    BYTE PTR [eax],al
 12e:	00 00                	add    BYTE PTR [eax],al
 130:	10 12                	adc    BYTE PTR [edx],dl
 132:	00 30                	add    BYTE PTR [eax],dh
 134:	9b                   	fwait
 135:	01 00                	add    DWORD PTR [eax],eax
	...
 13f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	3e 1a 00             	sbb    al,BYTE PTR ds:[eax]
 149:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 14c:	00 00                	add    BYTE PTR [eax],al
 14e:	00 00                	add    BYTE PTR [eax],al
 150:	ac                   	lods   al,BYTE PTR ds:[esi]
 151:	13 00                	adc    eax,DWORD PTR [eax]
 153:	30 8e 01 00 00 00    	xor    BYTE PTR [esi+0x1],cl
 159:	00 00                	add    BYTE PTR [eax],al
 15b:	00 00                	add    BYTE PTR [eax],al
 15d:	00 00                	add    BYTE PTR [eax],al
 15f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	78 1c                	js     184 <sysEnter_Vector-0x12fe7c>
 168:	00 00                	add    BYTE PTR [eax],al
 16a:	04 00                	add    al,0x0
 16c:	00 00                	add    BYTE PTR [eax],al
 16e:	00 00                	add    BYTE PTR [eax],al
 170:	3c 15                	cmp    al,0x15
 172:	00 30                	add    BYTE PTR [eax],dh
 174:	10 00                	adc    BYTE PTR [eax],al
	...
 17e:	00 00                	add    BYTE PTR [eax],al
 180:	1c 00                	sbb    al,0x0
 182:	00 00                	add    BYTE PTR [eax],al
 184:	02 00                	add    al,BYTE PTR [eax]
 186:	fc                   	cld    
 187:	1d 00 00 04 00       	sbb    eax,0x40000
 18c:	00 00                	add    BYTE PTR [eax],al
 18e:	00 00                	add    BYTE PTR [eax],al
 190:	4c                   	dec    esp
 191:	15 00 30 60 02       	adc    eax,0x2603000
	...
 19e:	00 00                	add    BYTE PTR [eax],al
 1a0:	1c 00                	sbb    al,0x0
 1a2:	00 00                	add    BYTE PTR [eax],al
 1a4:	02 00                	add    al,BYTE PTR [eax]
 1a6:	10 24 00             	adc    BYTE PTR [eax+eax*1],ah
 1a9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 1ac:	00 00                	add    BYTE PTR [eax],al
 1ae:	00 00                	add    BYTE PTR [eax],al
 1b0:	ac                   	lods   al,BYTE PTR ds:[esi]
 1b1:	17                   	pop    ss
 1b2:	00 30                	add    BYTE PTR [eax],dh
 1b4:	eb 00                	jmp    1b6 <sysEnter_Vector-0x12fe4a>
	...
 1be:	00 00                	add    BYTE PTR [eax],al
 1c0:	1c 00                	sbb    al,0x0
 1c2:	00 00                	add    BYTE PTR [eax],al
 1c4:	02 00                	add    al,BYTE PTR [eax]
 1c6:	cc                   	int3   
 1c7:	25 00 00 04 00       	and    eax,0x40000
 1cc:	00 00                	add    BYTE PTR [eax],al
 1ce:	00 00                	add    BYTE PTR [eax],al
 1d0:	98                   	cwde   
 1d1:	18 00                	sbb    BYTE PTR [eax],al
 1d3:	30 5e 00             	xor    BYTE PTR [esi+0x0],bl
	...
 1de:	00 00                	add    BYTE PTR [eax],al
 1e0:	1c 00                	sbb    al,0x0
 1e2:	00 00                	add    BYTE PTR [eax],al
 1e4:	02 00                	add    al,BYTE PTR [eax]
 1e6:	47                   	inc    edi
 1e7:	27                   	daa    
 1e8:	00 00                	add    BYTE PTR [eax],al
 1ea:	04 00                	add    al,0x0
 1ec:	00 00                	add    BYTE PTR [eax],al
 1ee:	00 00                	add    BYTE PTR [eax],al
 1f0:	f8                   	clc    
 1f1:	18 00                	sbb    BYTE PTR [eax],al
 1f3:	30 c7                	xor    bh,al
	...
 1fd:	00 00                	add    BYTE PTR [eax],al
 1ff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 202:	00 00                	add    BYTE PTR [eax],al
 204:	02 00                	add    al,BYTE PTR [eax]
 206:	1f                   	pop    ds
 207:	29 00                	sub    DWORD PTR [eax],eax
 209:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 20c:	00 00                	add    BYTE PTR [eax],al
 20e:	00 00                	add    BYTE PTR [eax],al
 210:	c0 19 00             	rcr    BYTE PTR [ecx],0x0
 213:	30 89 00 00 00 00    	xor    BYTE PTR [ecx+0x0],cl
 219:	00 00                	add    BYTE PTR [eax],al
 21b:	00 00                	add    BYTE PTR [eax],al
 21d:	00 00                	add    BYTE PTR [eax],al
 21f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 222:	00 00                	add    BYTE PTR [eax],al
 224:	02 00                	add    al,BYTE PTR [eax]
 226:	7a 2a                	jp     252 <sysEnter_Vector-0x12fdae>
 228:	00 00                	add    BYTE PTR [eax],al
 22a:	04 00                	add    al,0x0
 22c:	00 00                	add    BYTE PTR [eax],al
 22e:	00 00                	add    BYTE PTR [eax],al
 230:	4c                   	dec    esp
 231:	1a 00                	sbb    al,BYTE PTR [eax]
 233:	30 62 00             	xor    BYTE PTR [edx+0x0],ah
	...
 23e:	00 00                	add    BYTE PTR [eax],al
 240:	1c 00                	sbb    al,0x0
 242:	00 00                	add    BYTE PTR [eax],al
 244:	02 00                	add    al,BYTE PTR [eax]
 246:	48                   	dec    eax
 247:	2b 00                	sub    eax,DWORD PTR [eax]
 249:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 24c:	00 00                	add    BYTE PTR [eax],al
 24e:	00 00                	add    BYTE PTR [eax],al
 250:	b0 1a                	mov    al,0x1a
 252:	00 30                	add    BYTE PTR [eax],dh
 254:	ce                   	into   
	...
 25d:	00 00                	add    BYTE PTR [eax],al
 25f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 262:	00 00                	add    BYTE PTR [eax],al
 264:	02 00                	add    al,BYTE PTR [eax]
 266:	2a 2c 00             	sub    ch,BYTE PTR [eax+eax*1]
 269:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 26c:	00 00                	add    BYTE PTR [eax],al
 26e:	00 00                	add    BYTE PTR [eax],al
 270:	80 1b 00             	sbb    BYTE PTR [ebx],0x0
 273:	30 80 00 00 00 00    	xor    BYTE PTR [eax+0x0],al
 279:	00 00                	add    BYTE PTR [eax],al
 27b:	00 00                	add    BYTE PTR [eax],al
 27d:	00 00                	add    BYTE PTR [eax],al
 27f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 282:	00 00                	add    BYTE PTR [eax],al
 284:	02 00                	add    al,BYTE PTR [eax]
 286:	1e                   	push   ds
 287:	2d 00 00 04 00       	sub    eax,0x40000
 28c:	00 00                	add    BYTE PTR [eax],al
 28e:	00 00                	add    BYTE PTR [eax],al
 290:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 293:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
	...
 29e:	00 00                	add    BYTE PTR [eax],al
 2a0:	1c 00                	sbb    al,0x0
 2a2:	00 00                	add    BYTE PTR [eax],al
 2a4:	02 00                	add    al,BYTE PTR [eax]
 2a6:	bf 2e 00 00 04       	mov    edi,0x400002e
 2ab:	00 00                	add    BYTE PTR [eax],al
 2ad:	00 00                	add    BYTE PTR [eax],al
 2af:	00 80 1d 00 30 1d    	add    BYTE PTR [eax+0x1d30001d],al
	...
 2bd:	00 00                	add    BYTE PTR [eax],al
 2bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2c2:	00 00                	add    BYTE PTR [eax],al
 2c4:	02 00                	add    al,BYTE PTR [eax]
 2c6:	2f                   	das    
 2c7:	2f                   	das    
 2c8:	00 00                	add    BYTE PTR [eax],al
 2ca:	04 00                	add    al,0x0
 2cc:	00 00                	add    BYTE PTR [eax],al
 2ce:	00 00                	add    BYTE PTR [eax],al
 2d0:	a0 1d 00 30 9c       	mov    al,ds:0x9c30001d
 2d5:	01 00                	add    DWORD PTR [eax],eax
	...
 2df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2e2:	00 00                	add    BYTE PTR [eax],al
 2e4:	02 00                	add    al,BYTE PTR [eax]
 2e6:	ce                   	into   
 2e7:	30 00                	xor    BYTE PTR [eax],al
 2e9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 2ec:	00 00                	add    BYTE PTR [eax],al
 2ee:	00 00                	add    BYTE PTR [eax],al
 2f0:	3c 1f                	cmp    al,0x1f
 2f2:	00 30                	add    BYTE PTR [eax],dh
 2f4:	b6 00                	mov    dh,0x0
	...
 2fe:	00 00                	add    BYTE PTR [eax],al
 300:	1c 00                	sbb    al,0x0
 302:	00 00                	add    BYTE PTR [eax],al
 304:	02 00                	add    al,BYTE PTR [eax]
 306:	3f                   	aas    
 307:	32 00                	xor    al,BYTE PTR [eax]
 309:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 30c:	00 00                	add    BYTE PTR [eax],al
 30e:	00 00                	add    BYTE PTR [eax],al
 310:	f4                   	hlt    
 311:	1f                   	pop    ds
 312:	00 30                	add    BYTE PTR [eax],dh
 314:	8b 00                	mov    eax,DWORD PTR [eax]
	...
 31e:	00 00                	add    BYTE PTR [eax],al
 320:	1c 00                	sbb    al,0x0
 322:	00 00                	add    BYTE PTR [eax],al
 324:	02 00                	add    al,BYTE PTR [eax]
 326:	e1 33                	loope  35b <sysEnter_Vector-0x12fca5>
 328:	00 00                	add    BYTE PTR [eax],al
 32a:	04 00                	add    al,0x0
 32c:	00 00                	add    BYTE PTR [eax],al
 32e:	00 00                	add    BYTE PTR [eax],al
 330:	80 20 00             	and    BYTE PTR [eax],0x0
 333:	30 31                	xor    BYTE PTR [ecx],dh
 335:	0c 00                	or     al,0x0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	da 00                	fiadd  DWORD PTR [eax]
       2:	00 00                	add    BYTE PTR [eax],al
       4:	02 00                	add    al,BYTE PTR [eax]
       6:	ba 00 00 00 01       	mov    edx,0x1000000
       b:	01 fb                	add    ebx,edi
       d:	0e                   	push   cs
       e:	0d 00 01 01 01       	or     eax,0x1010100
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
      1b:	2e                   	cs
      1c:	2e                   	cs
      1d:	2f                   	das    
      1e:	2e                   	cs
      1f:	2e                   	cs
      20:	2f                   	das    
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      25:	6a 2f                	push   0x2f
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      31:	63 2f                	arpl   WORD PTR [edi],bp
      33:	73 74                	jae    a9 <sysEnter_Vector-0x12ff57>
      35:	72 69                	jb     a0 <sysEnter_Vector-0x12ff60>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <sysEnter_Vector-0x12ffc5>
      3b:	2f                   	das    
      3c:	68 6f 6d 65 2f       	push   0x2f656d6f
      41:	79 6f                	jns    b2 <sysEnter_Vector-0x12ff4e>
      43:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
      4a:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
      4d:	73 73                	jae    c2 <sysEnter_Vector-0x12ff3e>
      4f:	2f                   	das    
      50:	6c                   	ins    BYTE PTR es:[edi],dx
      51:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
      58:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
      5e:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
      64:	78 2d                	js     93 <sysEnter_Vector-0x12ff6d>
      66:	67 6e                	outs   dx,BYTE PTR ds:[si]
      68:	75 2f                	jne    99 <sysEnter_Vector-0x12ff67>
      6a:	35 2e 33 2e 30       	xor    eax,0x302e332e
      6f:	2f                   	das    
      70:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      77:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
      7a:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
      7e:	65 00 00             	add    BYTE PTR gs:[eax],al
      81:	73 74                	jae    f7 <sysEnter_Vector-0x12ff09>
      83:	72 63                	jb     e8 <sysEnter_Vector-0x12ff18>
      85:	68 72 2e 63 00       	push   0x632e72
      8a:	01 00                	add    DWORD PTR [eax],eax
      8c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
      8f:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
      96:	63 
      97:	2e                   	cs
      98:	68 00 02 00 00       	push   0x200
      9d:	74 69                	je     108 <sysEnter_Vector-0x12fef8>
      9f:	6d                   	ins    DWORD PTR es:[edi],dx
      a0:	65                   	gs
      a1:	2e                   	cs
      a2:	68 00 03 00 00       	push   0x300
      a7:	6d                   	ins    DWORD PTR es:[edi],dx
      a8:	61                   	popa   
      a9:	6c                   	ins    BYTE PTR es:[edi],dx
      aa:	6c                   	ins    BYTE PTR es:[edi],dx
      ab:	6f                   	outs   dx,DWORD PTR ds:[esi]
      ac:	63 2e                	arpl   WORD PTR [esi],bp
      ae:	68 00 03 00 00       	push   0x300
      b3:	6c                   	ins    BYTE PTR es:[edi],dx
      b4:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
      bb:	4f                   	dec    edi
      bc:	53                   	push   ebx
      bd:	2e                   	cs
      be:	68 00 03 00 00       	push   0x300
      c3:	00 00                	add    BYTE PTR [eax],al
      c5:	05 02 00 00 00       	add    eax,0x2
      ca:	30 1a                	xor    BYTE PTR [edx],bl
      cc:	c9                   	leave  
      cd:	2f                   	das    
      ce:	f3 72 cb             	repz jb 9c <sysEnter_Vector-0x12ff64>
      d1:	3d 31 c9 2f f3       	cmp    eax,0xf32fc931
      d6:	72 cb                	jb     a3 <sysEnter_Vector-0x12ff5d>
      d8:	3d 02 02 00 01       	cmp    eax,0x1000202
      dd:	01 0d 01 00 00 02    	add    DWORD PTR ds:0x2000001,ecx
      e3:	00 bb 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],bh
      e9:	01 fb                	add    ebx,edi
      eb:	0e                   	push   cs
      ec:	0d 00 01 01 01       	or     eax,0x1010100
      f1:	01 00                	add    DWORD PTR [eax],eax
      f3:	00 00                	add    BYTE PTR [eax],al
      f5:	01 00                	add    DWORD PTR [eax],eax
      f7:	00 01                	add    BYTE PTR [ecx],al
      f9:	2e                   	cs
      fa:	2e                   	cs
      fb:	2f                   	das    
      fc:	2e                   	cs
      fd:	2e                   	cs
      fe:	2f                   	das    
      ff:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     103:	6a 2f                	push   0x2f
     105:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     108:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     10f:	63 2f                	arpl   WORD PTR [edi],bp
     111:	73 74                	jae    187 <sysEnter_Vector-0x12fe79>
     113:	72 69                	jb     17e <sysEnter_Vector-0x12fe82>
     115:	6e                   	outs   dx,BYTE PTR ds:[esi]
     116:	67 73 00             	addr16 jae 119 <sysEnter_Vector-0x12fee7>
     119:	2f                   	das    
     11a:	68 6f 6d 65 2f       	push   0x2f656d6f
     11f:	79 6f                	jns    190 <sysEnter_Vector-0x12fe70>
     121:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     128:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     12b:	73 73                	jae    1a0 <sysEnter_Vector-0x12fe60>
     12d:	2f                   	das    
     12e:	6c                   	ins    BYTE PTR es:[edi],dx
     12f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     136:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     13c:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     142:	78 2d                	js     171 <sysEnter_Vector-0x12fe8f>
     144:	67 6e                	outs   dx,BYTE PTR ds:[si]
     146:	75 2f                	jne    177 <sysEnter_Vector-0x12fe89>
     148:	35 2e 33 2e 30       	xor    eax,0x302e332e
     14d:	2f                   	das    
     14e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     155:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     158:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     15c:	65 00 00             	add    BYTE PTR gs:[eax],al
     15f:	73 74                	jae    1d5 <sysEnter_Vector-0x12fe2b>
     161:	72 63                	jb     1c6 <sysEnter_Vector-0x12fe3a>
     163:	73 70                	jae    1d5 <sysEnter_Vector-0x12fe2b>
     165:	6e                   	outs   dx,BYTE PTR ds:[esi]
     166:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     169:	01 00                	add    DWORD PTR [eax],eax
     16b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     16e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     175:	63 
     176:	2e                   	cs
     177:	68 00 02 00 00       	push   0x200
     17c:	74 69                	je     1e7 <sysEnter_Vector-0x12fe19>
     17e:	6d                   	ins    DWORD PTR es:[edi],dx
     17f:	65                   	gs
     180:	2e                   	cs
     181:	68 00 03 00 00       	push   0x300
     186:	6d                   	ins    DWORD PTR es:[edi],dx
     187:	61                   	popa   
     188:	6c                   	ins    BYTE PTR es:[edi],dx
     189:	6c                   	ins    BYTE PTR es:[edi],dx
     18a:	6f                   	outs   dx,DWORD PTR ds:[esi]
     18b:	63 2e                	arpl   WORD PTR [esi],bp
     18d:	68 00 03 00 00       	push   0x300
     192:	6c                   	ins    BYTE PTR es:[edi],dx
     193:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     19a:	4f                   	dec    edi
     19b:	53                   	push   ebx
     19c:	2e                   	cs
     19d:	68 00 03 00 00       	push   0x300
     1a2:	00 00                	add    BYTE PTR [eax],al
     1a4:	05 02 70 00 00       	add    eax,0x7002
     1a9:	30 03                	xor    BYTE PTR [ebx],al
     1ab:	25 01 e7 9f 59       	and    eax,0x599fe701
     1b0:	75 00                	jne    1b2 <sysEnter_Vector-0x12fe4e>
     1b2:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1b5:	aa                   	stos   BYTE PTR es:[edi],al
     1b6:	00 02                	add    BYTE PTR [edx],al
     1b8:	04 01                	add    al,0x1
     1ba:	06                   	push   es
     1bb:	3c 00                	cmp    al,0x0
     1bd:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1c0:	06                   	push   es
     1c1:	73 00                	jae    1c3 <sysEnter_Vector-0x12fe3d>
     1c3:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1c6:	06                   	push   es
     1c7:	82                   	(bad)  
     1c8:	06                   	push   es
     1c9:	6d                   	ins    DWORD PTR es:[edi],dx
     1ca:	91                   	xchg   ecx,eax
     1cb:	4d                   	dec    ebp
     1cc:	e7 9f                	out    0x9f,eax
     1ce:	59                   	pop    ecx
     1cf:	75 00                	jne    1d1 <sysEnter_Vector-0x12fe2f>
     1d1:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1d4:	aa                   	stos   BYTE PTR es:[edi],al
     1d5:	00 02                	add    BYTE PTR [edx],al
     1d7:	04 01                	add    al,0x1
     1d9:	06                   	push   es
     1da:	3c 00                	cmp    al,0x0
     1dc:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1df:	06                   	push   es
     1e0:	73 00                	jae    1e2 <sysEnter_Vector-0x12fe1e>
     1e2:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1e5:	06                   	push   es
     1e6:	82                   	(bad)  
     1e7:	06                   	push   es
     1e8:	6d                   	ins    DWORD PTR es:[edi],dx
     1e9:	91                   	xchg   ecx,eax
     1ea:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     1ed:	01 01                	add    DWORD PTR [ecx],eax
     1ef:	de 00                	fiadd  WORD PTR [eax]
     1f1:	00 00                	add    BYTE PTR [eax],al
     1f3:	02 00                	add    al,BYTE PTR [eax]
     1f5:	ba 00 00 00 01       	mov    edx,0x1000000
     1fa:	01 fb                	add    ebx,edi
     1fc:	0e                   	push   cs
     1fd:	0d 00 01 01 01       	or     eax,0x1010100
     202:	01 00                	add    DWORD PTR [eax],eax
     204:	00 00                	add    BYTE PTR [eax],al
     206:	01 00                	add    DWORD PTR [eax],eax
     208:	00 01                	add    BYTE PTR [ecx],al
     20a:	2e                   	cs
     20b:	2e                   	cs
     20c:	2f                   	das    
     20d:	2e                   	cs
     20e:	2e                   	cs
     20f:	2f                   	das    
     210:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     214:	6a 2f                	push   0x2f
     216:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     219:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     220:	63 2f                	arpl   WORD PTR [edi],bp
     222:	73 74                	jae    298 <sysEnter_Vector-0x12fd68>
     224:	72 69                	jb     28f <sysEnter_Vector-0x12fd71>
     226:	6e                   	outs   dx,BYTE PTR ds:[esi]
     227:	67 73 00             	addr16 jae 22a <sysEnter_Vector-0x12fdd6>
     22a:	2f                   	das    
     22b:	68 6f 6d 65 2f       	push   0x2f656d6f
     230:	79 6f                	jns    2a1 <sysEnter_Vector-0x12fd5f>
     232:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     239:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     23c:	73 73                	jae    2b1 <sysEnter_Vector-0x12fd4f>
     23e:	2f                   	das    
     23f:	6c                   	ins    BYTE PTR es:[edi],dx
     240:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     247:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     24d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     253:	78 2d                	js     282 <sysEnter_Vector-0x12fd7e>
     255:	67 6e                	outs   dx,BYTE PTR ds:[si]
     257:	75 2f                	jne    288 <sysEnter_Vector-0x12fd78>
     259:	35 2e 33 2e 30       	xor    eax,0x302e332e
     25e:	2f                   	das    
     25f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     266:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     269:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     26d:	65 00 00             	add    BYTE PTR gs:[eax],al
     270:	73 74                	jae    2e6 <sysEnter_Vector-0x12fd1a>
     272:	72 74                	jb     2e8 <sysEnter_Vector-0x12fd18>
     274:	6f                   	outs   dx,DWORD PTR ds:[esi]
     275:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     278:	00 01                	add    BYTE PTR [ecx],al
     27a:	00 00                	add    BYTE PTR [eax],al
     27c:	73 74                	jae    2f2 <sysEnter_Vector-0x12fd0e>
     27e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     285:	63 
     286:	2e                   	cs
     287:	68 00 02 00 00       	push   0x200
     28c:	74 69                	je     2f7 <sysEnter_Vector-0x12fd09>
     28e:	6d                   	ins    DWORD PTR es:[edi],dx
     28f:	65                   	gs
     290:	2e                   	cs
     291:	68 00 03 00 00       	push   0x300
     296:	6d                   	ins    DWORD PTR es:[edi],dx
     297:	61                   	popa   
     298:	6c                   	ins    BYTE PTR es:[edi],dx
     299:	6c                   	ins    BYTE PTR es:[edi],dx
     29a:	6f                   	outs   dx,DWORD PTR ds:[esi]
     29b:	63 2e                	arpl   WORD PTR [esi],bp
     29d:	68 00 03 00 00       	push   0x300
     2a2:	6c                   	ins    BYTE PTR es:[edi],dx
     2a3:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     2aa:	4f                   	dec    edi
     2ab:	53                   	push   ebx
     2ac:	2e                   	cs
     2ad:	68 00 03 00 00       	push   0x300
     2b2:	00 00                	add    BYTE PTR [eax],al
     2b4:	05 02 1c 01 00       	add    eax,0x11c02
     2b9:	30 03                	xor    BYTE PTR [ebx],al
     2bb:	28 01                	sub    BYTE PTR [ecx],al
     2bd:	f6 67 92             	mul    BYTE PTR [edi-0x6e]
     2c0:	08 2f                	or     BYTE PTR [edi],ch
     2c2:	75 08                	jne    2cc <sysEnter_Vector-0x12fd34>
     2c4:	2f                   	das    
     2c5:	4b                   	dec    ebx
     2c6:	08 c9                	or     cl,cl
     2c8:	c9                   	leave  
     2c9:	08 21                	or     BYTE PTR [ecx],ah
     2cb:	3d 02 07 00 01       	cmp    eax,0x1000702
     2d0:	01 1a                	add    DWORD PTR [edx],ebx
     2d2:	01 00                	add    DWORD PTR [eax],eax
     2d4:	00 02                	add    BYTE PTR [edx],al
     2d6:	00 9d 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],bl
     2dc:	01 fb                	add    ebx,edi
     2de:	0e                   	push   cs
     2df:	0d 00 01 01 01       	or     eax,0x1010100
     2e4:	01 00                	add    DWORD PTR [eax],eax
     2e6:	00 00                	add    BYTE PTR [eax],al
     2e8:	01 00                	add    DWORD PTR [eax],eax
     2ea:	00 01                	add    BYTE PTR [ecx],al
     2ec:	73 72                	jae    360 <sysEnter_Vector-0x12fca0>
     2ee:	63 00                	arpl   WORD PTR [eax],ax
     2f0:	2f                   	das    
     2f1:	68 6f 6d 65 2f       	push   0x2f656d6f
     2f6:	79 6f                	jns    367 <sysEnter_Vector-0x12fc99>
     2f8:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     2ff:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     302:	73 73                	jae    377 <sysEnter_Vector-0x12fc89>
     304:	2f                   	das    
     305:	6c                   	ins    BYTE PTR es:[edi],dx
     306:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     30d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     313:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     319:	78 2d                	js     348 <sysEnter_Vector-0x12fcb8>
     31b:	67 6e                	outs   dx,BYTE PTR ds:[si]
     31d:	75 2f                	jne    34e <sysEnter_Vector-0x12fcb2>
     31f:	35 2e 33 2e 30       	xor    eax,0x302e332e
     324:	2f                   	das    
     325:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     32c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     32f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     333:	65 00 00             	add    BYTE PTR gs:[eax],al
     336:	61                   	popa   
     337:	73 63                	jae    39c <sysEnter_Vector-0x12fc64>
     339:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     340:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     343:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     34a:	63 
     34b:	2e                   	cs
     34c:	68 00 02 00 00       	push   0x200
     351:	74 69                	je     3bc <sysEnter_Vector-0x12fc44>
     353:	6d                   	ins    DWORD PTR es:[edi],dx
     354:	65                   	gs
     355:	2e                   	cs
     356:	68 00 03 00 00       	push   0x300
     35b:	6d                   	ins    DWORD PTR es:[edi],dx
     35c:	61                   	popa   
     35d:	6c                   	ins    BYTE PTR es:[edi],dx
     35e:	6c                   	ins    BYTE PTR es:[edi],dx
     35f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     360:	63 2e                	arpl   WORD PTR [esi],bp
     362:	68 00 03 00 00       	push   0x300
     367:	6c                   	ins    BYTE PTR es:[edi],dx
     368:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     36f:	4f                   	dec    edi
     370:	53                   	push   ebx
     371:	2e                   	cs
     372:	68 00 03 00 00       	push   0x300
     377:	00 00                	add    BYTE PTR [eax],al
     379:	05 02 b4 01 00       	add    eax,0x1b402
     37e:	30 03                	xor    BYTE PTR [ebx],al
     380:	09 01                	or     DWORD PTR [ecx],eax
     382:	08 16                	or     BYTE PTR [esi],dl
     384:	00 02                	add    BYTE PTR [edx],al
     386:	04 03                	add    al,0x3
     388:	08 d7                	or     bh,dl
     38a:	00 02                	add    BYTE PTR [edx],al
     38c:	04 03                	add    al,0x3
     38e:	d7                   	xlat   BYTE PTR ds:[ebx]
     38f:	00 02                	add    BYTE PTR [edx],al
     391:	04 03                	add    al,0x3
     393:	08 4b 00             	or     BYTE PTR [ebx+0x0],cl
     396:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     399:	d3 00                	rol    DWORD PTR [eax],cl
     39b:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     39e:	06                   	push   es
     39f:	82                   	(bad)  
     3a0:	06                   	push   es
     3a1:	87 69 08             	xchg   DWORD PTR [ecx+0x8],ebp
     3a4:	15 bb 3d 00 02       	adc    eax,0x2003dbb
     3a9:	04 01                	add    al,0x1
     3ab:	76 00                	jbe    3ad <sysEnter_Vector-0x12fc53>
     3ad:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3b0:	02 3b                	add    bh,BYTE PTR [ebx]
     3b2:	13 08                	adc    ecx,DWORD PTR [eax]
     3b4:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3b8:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3b9:	d7                   	xlat   BYTE PTR ds:[ebx]
     3ba:	69 08 15 bb 3d 00    	imul   ecx,DWORD PTR [eax],0x3dbb15
     3c0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3c3:	76 00                	jbe    3c5 <sysEnter_Vector-0x12fc3b>
     3c5:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3c8:	02 3b                	add    bh,BYTE PTR [ebx]
     3ca:	13 08                	adc    ecx,DWORD PTR [eax]
     3cc:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3d0:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3d1:	d7                   	xlat   BYTE PTR ds:[ebx]
     3d2:	6a f3                	push   0xfffffff3
     3d4:	78 00                	js     3d6 <sysEnter_Vector-0x12fc2a>
     3d6:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     3d9:	91                   	xchg   ecx,eax
     3da:	00 02                	add    BYTE PTR [edx],al
     3dc:	04 03                	add    al,0x3
     3de:	02 24 11             	add    ah,BYTE PTR [ecx+edx*1]
     3e1:	00 02                	add    BYTE PTR [edx],al
     3e3:	04 01                	add    al,0x1
     3e5:	06                   	push   es
     3e6:	4a                   	dec    edx
     3e7:	06                   	push   es
     3e8:	e8 3d 02 02 00       	call   2062a <sysEnter_Vector-0x10f9d6>
     3ed:	01 01                	add    DWORD PTR [ecx],eax
     3ef:	10 01                	adc    BYTE PTR [ecx],al
     3f1:	00 00                	add    BYTE PTR [eax],al
     3f3:	02 00                	add    al,BYTE PTR [eax]
     3f5:	a3 00 00 00 01       	mov    ds:0x1000000,eax
     3fa:	01 fb                	add    ebx,edi
     3fc:	0e                   	push   cs
     3fd:	0d 00 01 01 01       	or     eax,0x1010100
     402:	01 00                	add    DWORD PTR [eax],eax
     404:	00 00                	add    BYTE PTR [eax],al
     406:	01 00                	add    DWORD PTR [eax],eax
     408:	00 01                	add    BYTE PTR [ecx],al
     40a:	73 72                	jae    47e <sysEnter_Vector-0x12fb82>
     40c:	63 00                	arpl   WORD PTR [eax],ax
     40e:	2f                   	das    
     40f:	68 6f 6d 65 2f       	push   0x2f656d6f
     414:	79 6f                	jns    485 <sysEnter_Vector-0x12fb7b>
     416:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     41d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     420:	73 73                	jae    495 <sysEnter_Vector-0x12fb6b>
     422:	2f                   	das    
     423:	6c                   	ins    BYTE PTR es:[edi],dx
     424:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     42b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     431:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     437:	78 2d                	js     466 <sysEnter_Vector-0x12fb9a>
     439:	67 6e                	outs   dx,BYTE PTR ds:[si]
     43b:	75 2f                	jne    46c <sysEnter_Vector-0x12fb94>
     43d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     442:	2f                   	das    
     443:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     44a:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     44d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     451:	65 00 00             	add    BYTE PTR gs:[eax],al
     454:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     456:	76 69                	jbe    4c1 <sysEnter_Vector-0x12fb3f>
     458:	72 6f                	jb     4c9 <sysEnter_Vector-0x12fb37>
     45a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     45b:	6d                   	ins    DWORD PTR es:[edi],dx
     45c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     45e:	74 2e                	je     48e <sysEnter_Vector-0x12fb72>
     460:	63 00                	arpl   WORD PTR [eax],ax
     462:	01 00                	add    DWORD PTR [eax],eax
     464:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     467:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     46e:	63 
     46f:	2e                   	cs
     470:	68 00 02 00 00       	push   0x200
     475:	74 69                	je     4e0 <sysEnter_Vector-0x12fb20>
     477:	6d                   	ins    DWORD PTR es:[edi],dx
     478:	65                   	gs
     479:	2e                   	cs
     47a:	68 00 03 00 00       	push   0x300
     47f:	6d                   	ins    DWORD PTR es:[edi],dx
     480:	61                   	popa   
     481:	6c                   	ins    BYTE PTR es:[edi],dx
     482:	6c                   	ins    BYTE PTR es:[edi],dx
     483:	6f                   	outs   dx,DWORD PTR ds:[esi]
     484:	63 2e                	arpl   WORD PTR [esi],bp
     486:	68 00 03 00 00       	push   0x300
     48b:	6c                   	ins    BYTE PTR es:[edi],dx
     48c:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     493:	4f                   	dec    edi
     494:	53                   	push   ebx
     495:	2e                   	cs
     496:	68 00 03 00 00       	push   0x300
     49b:	00 00                	add    BYTE PTR [eax],al
     49d:	05 02 00 04 00       	add    eax,0x40002
     4a2:	30 03                	xor    BYTE PTR [ebx],al
     4a4:	09 01                	or     DWORD PTR [ecx],eax
     4a6:	08 21                	or     BYTE PTR [ecx],ah
     4a8:	91                   	xchg   ecx,eax
     4a9:	02 36                	add    dh,BYTE PTR [esi]
     4ab:	14 02                	adc    al,0x2
     4ad:	39 13                	cmp    DWORD PTR [ebx],edx
     4af:	00 02                	add    BYTE PTR [edx],al
     4b1:	04 02                	add    al,0x2
     4b3:	7e 00                	jle    4b5 <sysEnter_Vector-0x12fb4b>
     4b5:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     4b8:	06                   	push   es
     4b9:	4a                   	dec    edx
     4ba:	06                   	push   es
     4bb:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     4bc:	59                   	pop    ecx
     4bd:	5b                   	pop    ebx
     4be:	08 21                	or     BYTE PTR [ecx],ah
     4c0:	76 bb                	jbe    47d <sysEnter_Vector-0x12fb83>
     4c2:	08 92 08 4b 02 36    	or     BYTE PTR [edx+0x36024b08],dl
     4c8:	14 08                	adc    al,0x8
     4ca:	f3 02 25 13 08 f3 00 	repz add ah,BYTE PTR ds:0xf30813
     4d1:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     4d4:	03 77 58             	add    esi,DWORD PTR [edi+0x58]
     4d7:	00 02                	add    BYTE PTR [edx],al
     4d9:	04 01                	add    al,0x1
     4db:	06                   	push   es
     4dc:	4a                   	dec    edx
     4dd:	06                   	push   es
     4de:	03 0c 9e             	add    ecx,DWORD PTR [esi+ebx*4]
     4e1:	bb 08 92 08 9f       	mov    ebx,0x9f089208
     4e6:	08 f3                	or     bl,dh
     4e8:	02 25 13 08 f3 00    	add    ah,BYTE PTR ds:0xf30813
     4ee:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     4f1:	03 79 2e             	add    edi,DWORD PTR [ecx+0x2e]
     4f4:	00 02                	add    BYTE PTR [edx],al
     4f6:	04 01                	add    al,0x1
     4f8:	06                   	push   es
     4f9:	4a                   	dec    edx
     4fa:	06                   	push   es
     4fb:	03 0b                	add    ecx,DWORD PTR [ebx]
     4fd:	9e                   	sahf   
     4fe:	02 05 00 01 01 fe    	add    al,BYTE PTR ds:0xfe010100
     504:	00 00                	add    BYTE PTR [eax],al
     506:	00 02                	add    BYTE PTR [edx],al
     508:	00 d7                	add    bh,dl
     50a:	00 00                	add    BYTE PTR [eax],al
     50c:	00 01                	add    BYTE PTR [ecx],al
     50e:	01 fb                	add    ebx,edi
     510:	0e                   	push   cs
     511:	0d 00 01 01 01       	or     eax,0x1010100
     516:	01 00                	add    DWORD PTR [eax],eax
     518:	00 00                	add    BYTE PTR [eax],al
     51a:	01 00                	add    DWORD PTR [eax],eax
     51c:	00 01                	add    BYTE PTR [ecx],al
     51e:	73 72                	jae    592 <sysEnter_Vector-0x12fa6e>
     520:	63 00                	arpl   WORD PTR [eax],ax
     522:	2f                   	das    
     523:	68 6f 6d 65 2f       	push   0x2f656d6f
     528:	79 6f                	jns    599 <sysEnter_Vector-0x12fa67>
     52a:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     531:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     534:	73 73                	jae    5a9 <sysEnter_Vector-0x12fa57>
     536:	2f                   	das    
     537:	6c                   	ins    BYTE PTR es:[edi],dx
     538:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     53f:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     545:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     54b:	78 2d                	js     57a <sysEnter_Vector-0x12fa86>
     54d:	67 6e                	outs   dx,BYTE PTR ds:[si]
     54f:	75 2f                	jne    580 <sysEnter_Vector-0x12fa80>
     551:	35 2e 33 2e 30       	xor    eax,0x302e332e
     556:	2f                   	das    
     557:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     55e:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     561:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     565:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     569:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     56d:	65                   	gs
     56e:	2f                   	das    
     56f:	2e                   	cs
     570:	2e                   	cs
     571:	2f                   	das    
     572:	2e                   	cs
     573:	2e                   	cs
     574:	2f                   	das    
     575:	2e                   	cs
     576:	2e                   	cs
     577:	2f                   	das    
     578:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     57c:	6a 2f                	push   0x2f
     57e:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     581:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     588:	6e                   	outs   dx,BYTE PTR ds:[esi]
     589:	65                   	gs
     58a:	6c                   	ins    BYTE PTR es:[edi],dx
     58b:	2f                   	das    
     58c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     593:	00 00                	add    BYTE PTR [eax],al
     595:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     59c:	01 00                	add    DWORD PTR [eax],eax
     59e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     5a1:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     5a8:	63 
     5a9:	2e                   	cs
     5aa:	68 00 02 00 00       	push   0x200
     5af:	74 69                	je     61a <sysEnter_Vector-0x12f9e6>
     5b1:	6d                   	ins    DWORD PTR es:[edi],dx
     5b2:	65                   	gs
     5b3:	2e                   	cs
     5b4:	68 00 03 00 00       	push   0x300
     5b9:	6d                   	ins    DWORD PTR es:[edi],dx
     5ba:	61                   	popa   
     5bb:	6c                   	ins    BYTE PTR es:[edi],dx
     5bc:	6c                   	ins    BYTE PTR es:[edi],dx
     5bd:	6f                   	outs   dx,DWORD PTR ds:[esi]
     5be:	63 2e                	arpl   WORD PTR [esi],bp
     5c0:	68 00 03 00 00       	push   0x300
     5c5:	6c                   	ins    BYTE PTR es:[edi],dx
     5c6:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     5cd:	4f                   	dec    edi
     5ce:	53                   	push   ebx
     5cf:	2e                   	cs
     5d0:	68 00 03 00 00       	push   0x300
     5d5:	73 79                	jae    650 <sysEnter_Vector-0x12f9b0>
     5d7:	73 63                	jae    63c <sysEnter_Vector-0x12f9c4>
     5d9:	61                   	popa   
     5da:	6c                   	ins    BYTE PTR es:[edi],dx
     5db:	6c                   	ins    BYTE PTR es:[edi],dx
     5dc:	73 2e                	jae    60c <sysEnter_Vector-0x12f9f4>
     5de:	68 00 04 00 00       	push   0x400
     5e3:	00 00                	add    BYTE PTR [eax],al
     5e5:	05 02 6c 06 00       	add    eax,0x66c02
     5ea:	30 03                	xor    BYTE PTR [ebx],al
     5ec:	09 01                	or     DWORD PTR [ecx],eax
     5ee:	08 13                	or     BYTE PTR [ebx],dl
     5f0:	08 67 5b             	or     BYTE PTR [edi+0x5b],ah
     5f3:	08 13                	or     BYTE PTR [ebx],dl
     5f5:	08 2f                	or     BYTE PTR [edi],ch
     5f7:	69 e5 08 d7 77 08    	imul   esp,ebp,0x877d708
     5fd:	13 08                	adc    ecx,DWORD PTR [eax]
     5ff:	9f                   	lahf   
     600:	02 05 00 01 01 30    	add    al,BYTE PTR ds:0x30010100
     606:	01 00                	add    DWORD PTR [eax],eax
     608:	00 02                	add    BYTE PTR [edx],al
     60a:	00 de                	add    dh,bl
     60c:	00 00                	add    BYTE PTR [eax],al
     60e:	00 01                	add    BYTE PTR [ecx],al
     610:	01 fb                	add    ebx,edi
     612:	0e                   	push   cs
     613:	0d 00 01 01 01       	or     eax,0x1010100
     618:	01 00                	add    DWORD PTR [eax],eax
     61a:	00 00                	add    BYTE PTR [eax],al
     61c:	01 00                	add    DWORD PTR [eax],eax
     61e:	00 01                	add    BYTE PTR [ecx],al
     620:	73 72                	jae    694 <sysEnter_Vector-0x12f96c>
     622:	63 2f                	arpl   WORD PTR [edi],bp
     624:	69 6e 70 75 74 00 2f 	imul   ebp,DWORD PTR [esi+0x70],0x2f007475
     62b:	68 6f 6d 65 2f       	push   0x2f656d6f
     630:	79 6f                	jns    6a1 <sysEnter_Vector-0x12f95f>
     632:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     639:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     63c:	73 73                	jae    6b1 <sysEnter_Vector-0x12f94f>
     63e:	2f                   	das    
     63f:	6c                   	ins    BYTE PTR es:[edi],dx
     640:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     647:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     64d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     653:	78 2d                	js     682 <sysEnter_Vector-0x12f97e>
     655:	67 6e                	outs   dx,BYTE PTR ds:[si]
     657:	75 2f                	jne    688 <sysEnter_Vector-0x12f978>
     659:	35 2e 33 2e 30       	xor    eax,0x302e332e
     65e:	2f                   	das    
     65f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     666:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     669:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     66d:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     671:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     675:	65                   	gs
     676:	2f                   	das    
     677:	2e                   	cs
     678:	2e                   	cs
     679:	2f                   	das    
     67a:	2e                   	cs
     67b:	2e                   	cs
     67c:	2f                   	das    
     67d:	2e                   	cs
     67e:	2e                   	cs
     67f:	2f                   	das    
     680:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     684:	6a 2f                	push   0x2f
     686:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     689:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     690:	6e                   	outs   dx,BYTE PTR ds:[esi]
     691:	65                   	gs
     692:	6c                   	ins    BYTE PTR es:[edi],dx
     693:	2f                   	das    
     694:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     69b:	00 00                	add    BYTE PTR [eax],al
     69d:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     6a4:	00 01                	add    BYTE PTR [ecx],al
     6a6:	00 00                	add    BYTE PTR [eax],al
     6a8:	73 74                	jae    71e <sysEnter_Vector-0x12f8e2>
     6aa:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     6b1:	63 
     6b2:	2e                   	cs
     6b3:	68 00 02 00 00       	push   0x200
     6b8:	74 69                	je     723 <sysEnter_Vector-0x12f8dd>
     6ba:	6d                   	ins    DWORD PTR es:[edi],dx
     6bb:	65                   	gs
     6bc:	2e                   	cs
     6bd:	68 00 03 00 00       	push   0x300
     6c2:	6d                   	ins    DWORD PTR es:[edi],dx
     6c3:	61                   	popa   
     6c4:	6c                   	ins    BYTE PTR es:[edi],dx
     6c5:	6c                   	ins    BYTE PTR es:[edi],dx
     6c6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     6c7:	63 2e                	arpl   WORD PTR [esi],bp
     6c9:	68 00 03 00 00       	push   0x300
     6ce:	6c                   	ins    BYTE PTR es:[edi],dx
     6cf:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     6d6:	4f                   	dec    edi
     6d7:	53                   	push   ebx
     6d8:	2e                   	cs
     6d9:	68 00 03 00 00       	push   0x300
     6de:	73 79                	jae    759 <sysEnter_Vector-0x12f8a7>
     6e0:	73 63                	jae    745 <sysEnter_Vector-0x12f8bb>
     6e2:	61                   	popa   
     6e3:	6c                   	ins    BYTE PTR es:[edi],dx
     6e4:	6c                   	ins    BYTE PTR es:[edi],dx
     6e5:	73 2e                	jae    715 <sysEnter_Vector-0x12f8eb>
     6e7:	68 00 04 00 00       	push   0x400
     6ec:	00 00                	add    BYTE PTR [eax],al
     6ee:	05 02 2c 07 00       	add    eax,0x72c02
     6f3:	30 03                	xor    BYTE PTR [ebx],al
     6f5:	0f 01                	(bad)  
     6f7:	d7                   	xlat   BYTE PTR ds:[ebx]
     6f8:	08 3d 4d 08 67 68    	or     BYTE PTR ds:0x6867084d,bh
     6fe:	75 4b                	jne    74b <sysEnter_Vector-0x12f8b5>
     700:	08 3d 77 08 14 08    	or     BYTE PTR ds:0x8140877,bh
     706:	3d 4b 6a 08 14       	cmp    eax,0x14086a4b
     70b:	75 84                	jne    691 <sysEnter_Vector-0x12f96f>
     70d:	68 00 02 04 01       	push   0x1040200
     712:	08 67 33             	or     BYTE PTR [edi+0x33],ah
     715:	08 3d 00 02 04 01    	or     BYTE PTR ds:0x1040200,bh
     71b:	06                   	push   es
     71c:	66 06                	pushw  es
     71e:	68 ad 68 68 76       	push   0x766868ad
     723:	08 5a 00             	or     BYTE PTR [edx+0x0],bl
     726:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     729:	06                   	push   es
     72a:	ac                   	lods   al,BYTE PTR ds:[esi]
     72b:	06                   	push   es
     72c:	68 5b 00 02 04       	push   0x402005b
     731:	02 a0 2f 02 05 00    	add    ah,BYTE PTR [eax+0x5022f]
     737:	01 01                	add    DWORD PTR [ecx],eax
     739:	c1 01 00             	rol    DWORD PTR [ecx],0x0
     73c:	00 02                	add    BYTE PTR [edx],al
     73e:	00 f5                	add    ch,dh
     740:	00 00                	add    BYTE PTR [eax],al
     742:	00 01                	add    BYTE PTR [ecx],al
     744:	01 fb                	add    ebx,edi
     746:	0e                   	push   cs
     747:	0d 00 01 01 01       	or     eax,0x1010100
     74c:	01 00                	add    DWORD PTR [eax],eax
     74e:	00 00                	add    BYTE PTR [eax],al
     750:	01 00                	add    DWORD PTR [eax],eax
     752:	00 01                	add    BYTE PTR [ecx],al
     754:	73 72                	jae    7c8 <sysEnter_Vector-0x12f838>
     756:	63 00                	arpl   WORD PTR [eax],ax
     758:	2f                   	das    
     759:	68 6f 6d 65 2f       	push   0x2f656d6f
     75e:	79 6f                	jns    7cf <sysEnter_Vector-0x12f831>
     760:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     767:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     76a:	73 73                	jae    7df <sysEnter_Vector-0x12f821>
     76c:	2f                   	das    
     76d:	6c                   	ins    BYTE PTR es:[edi],dx
     76e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     775:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     77b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     781:	78 2d                	js     7b0 <sysEnter_Vector-0x12f850>
     783:	67 6e                	outs   dx,BYTE PTR ds:[si]
     785:	75 2f                	jne    7b6 <sysEnter_Vector-0x12f84a>
     787:	35 2e 33 2e 30       	xor    eax,0x302e332e
     78c:	2f                   	das    
     78d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     794:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     797:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     79b:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     79f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     7a3:	65                   	gs
     7a4:	2f                   	das    
     7a5:	2e                   	cs
     7a6:	2e                   	cs
     7a7:	2f                   	das    
     7a8:	2e                   	cs
     7a9:	2e                   	cs
     7aa:	2f                   	das    
     7ab:	2e                   	cs
     7ac:	2e                   	cs
     7ad:	2f                   	das    
     7ae:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     7b2:	6a 2f                	push   0x2f
     7b4:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     7b7:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     7be:	6e                   	outs   dx,BYTE PTR ds:[esi]
     7bf:	65                   	gs
     7c0:	6c                   	ins    BYTE PTR es:[edi],dx
     7c1:	2f                   	das    
     7c2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     7c9:	00 00                	add    BYTE PTR [eax],al
     7cb:	6c                   	ins    BYTE PTR es:[edi],dx
     7cc:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     7d3:	4f                   	dec    edi
     7d4:	53                   	push   ebx
     7d5:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     7d8:	01 00                	add    DWORD PTR [eax],eax
     7da:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     7dd:	64                   	fs
     7de:	61                   	popa   
     7df:	72 67                	jb     848 <sysEnter_Vector-0x12f7b8>
     7e1:	2e                   	cs
     7e2:	68 00 02 00 00       	push   0x200
     7e7:	73 74                	jae    85d <sysEnter_Vector-0x12f7a3>
     7e9:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     7f0:	63 
     7f1:	2e                   	cs
     7f2:	68 00 02 00 00       	push   0x200
     7f7:	73 74                	jae    86d <sysEnter_Vector-0x12f793>
     7f9:	64                   	fs
     7fa:	64                   	fs
     7fb:	65                   	gs
     7fc:	66                   	data16
     7fd:	2e                   	cs
     7fe:	68 00 02 00 00       	push   0x200
     803:	74 69                	je     86e <sysEnter_Vector-0x12f792>
     805:	6d                   	ins    DWORD PTR es:[edi],dx
     806:	65                   	gs
     807:	2e                   	cs
     808:	68 00 03 00 00       	push   0x300
     80d:	6d                   	ins    DWORD PTR es:[edi],dx
     80e:	61                   	popa   
     80f:	6c                   	ins    BYTE PTR es:[edi],dx
     810:	6c                   	ins    BYTE PTR es:[edi],dx
     811:	6f                   	outs   dx,DWORD PTR ds:[esi]
     812:	63 2e                	arpl   WORD PTR [esi],bp
     814:	68 00 03 00 00       	push   0x300
     819:	6c                   	ins    BYTE PTR es:[edi],dx
     81a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     821:	4f                   	dec    edi
     822:	53                   	push   ebx
     823:	2e                   	cs
     824:	68 00 03 00 00       	push   0x300
     829:	73 79                	jae    8a4 <sysEnter_Vector-0x12f75c>
     82b:	73 63                	jae    890 <sysEnter_Vector-0x12f770>
     82d:	61                   	popa   
     82e:	6c                   	ins    BYTE PTR es:[edi],dx
     82f:	6c                   	ins    BYTE PTR es:[edi],dx
     830:	73 2e                	jae    860 <sysEnter_Vector-0x12f7a0>
     832:	68 00 04 00 00       	push   0x400
     837:	00 00                	add    BYTE PTR [eax],al
     839:	05 02 80 08 00       	add    eax,0x88002
     83e:	30 03                	xor    BYTE PTR [ebx],al
     840:	10 01                	adc    BYTE PTR [ecx],al
     842:	08 21                	or     BYTE PTR [ecx],ah
     844:	75 08                	jne    84e <sysEnter_Vector-0x12f7b2>
     846:	67 3d 77 08 21 75    	addr16 cmp eax,0x75210877
     84c:	08 83 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],al
     852:	75 08                	jne    85c <sysEnter_Vector-0x12f7a4>
     854:	9f                   	lahf   
     855:	3d 77 08 21 75       	cmp    eax,0x75210877
     85a:	08 bb 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],bh
     860:	75 08                	jne    86a <sysEnter_Vector-0x12f796>
     862:	d7                   	xlat   BYTE PTR ds:[ebx]
     863:	3d 77 08 21 08       	cmp    eax,0x8210877
     868:	67 d8 5a c9          	fcomp  DWORD PTR [bp+si-0x37]
     86c:	bb c9 08 67 75       	mov    ebx,0x756708c9
     871:	08 6a 2d             	or     BYTE PTR [edx+0x2d],ch
     874:	08 21                	or     BYTE PTR [ecx],ah
     876:	69 08 13 75 77 f4    	imul   ecx,DWORD PTR [eax],0xf4777513
     87c:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     880:	31 f4                	xor    esp,esi
     882:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     886:	31 f4                	xor    esp,esi
     888:	68 08 91 59 31       	push   0x31599108
     88d:	08 21                	or     BYTE PTR [ecx],ah
     88f:	02 54 13 59          	add    dl,BYTE PTR [ebx+edx*1+0x59]
     893:	77 c9                	ja     85e <sysEnter_Vector-0x12f7a2>
     895:	c9                   	leave  
     896:	3f                   	aas    
     897:	c9                   	leave  
     898:	08 83 3f 08 21 d8    	or     BYTE PTR [ebx-0x27def7c1],al
     89e:	bc 08 31 08 75       	mov    esp,0x75083108
     8a3:	68 67 02 22 14       	push   0x14220267
     8a8:	08 ae 4c ca 08 4b    	or     BYTE PTR [esi+0x4b08ca4c],ch
     8ae:	91                   	xchg   ecx,eax
     8af:	67 bc 08 83 08 75    	addr16 mov esp,0x75088308
     8b5:	67 02 2f             	add    ch,BYTE PTR [bx]
     8b8:	14 00                	adc    al,0x0
     8ba:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     8bd:	02 31                	add    dh,BYTE PTR [ecx]
     8bf:	13 00                	adc    eax,DWORD PTR [eax]
     8c1:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     8c4:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     8ca:	bb 00 02 04 02       	mov    ebx,0x2040200
     8cf:	03 76 4a             	add    esi,DWORD PTR [esi+0x4a]
     8d2:	00 02                	add    BYTE PTR [edx],al
     8d4:	04 01                	add    al,0x1
     8d6:	06                   	push   es
     8d7:	4a                   	dec    edx
     8d8:	06                   	push   es
     8d9:	03 0e                	add    ecx,DWORD PTR [esi]
     8db:	ba 08 91 08 4d       	mov    edx,0x4d089108
     8e0:	3f                   	aas    
     8e1:	5b                   	pop    ebx
     8e2:	08 13                	or     BYTE PTR [ebx],dl
     8e4:	77 08                	ja     8ee <sysEnter_Vector-0x12f712>
     8e6:	67 08 4d 3d          	or     BYTE PTR [di+0x3d],cl
     8ea:	5b                   	pop    ebx
     8eb:	c9                   	leave  
     8ec:	c9                   	leave  
     8ed:	31 08                	xor    DWORD PTR [eax],ecx
     8ef:	3d 77 08 f3 08       	cmp    eax,0x8f30877
     8f4:	4b                   	dec    ebx
     8f5:	85 c9                	test   ecx,ecx
     8f7:	08 13                	or     BYTE PTR [ebx],dl
     8f9:	02 02                	add    al,BYTE PTR [edx]
     8fb:	00 01                	add    BYTE PTR [ecx],al
     8fd:	01 59 01             	add    DWORD PTR [ecx+0x1],ebx
     900:	00 00                	add    BYTE PTR [eax],al
     902:	02 00                	add    al,BYTE PTR [eax]
     904:	e5 00                	in     eax,0x0
     906:	00 00                	add    BYTE PTR [eax],al
     908:	01 01                	add    DWORD PTR [ecx],eax
     90a:	fb                   	sti    
     90b:	0e                   	push   cs
     90c:	0d 00 01 01 01       	or     eax,0x1010100
     911:	01 00                	add    DWORD PTR [eax],eax
     913:	00 00                	add    BYTE PTR [eax],al
     915:	01 00                	add    DWORD PTR [eax],eax
     917:	00 01                	add    BYTE PTR [ecx],al
     919:	73 72                	jae    98d <sysEnter_Vector-0x12f673>
     91b:	63 00                	arpl   WORD PTR [eax],ax
     91d:	2f                   	das    
     91e:	68 6f 6d 65 2f       	push   0x2f656d6f
     923:	79 6f                	jns    994 <sysEnter_Vector-0x12f66c>
     925:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     92c:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     92f:	73 73                	jae    9a4 <sysEnter_Vector-0x12f65c>
     931:	2f                   	das    
     932:	6c                   	ins    BYTE PTR es:[edi],dx
     933:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     93a:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     940:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     946:	78 2d                	js     975 <sysEnter_Vector-0x12f68b>
     948:	67 6e                	outs   dx,BYTE PTR ds:[si]
     94a:	75 2f                	jne    97b <sysEnter_Vector-0x12f685>
     94c:	35 2e 33 2e 30       	xor    eax,0x302e332e
     951:	2f                   	das    
     952:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     959:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     95c:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     960:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     964:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     968:	65                   	gs
     969:	2f                   	das    
     96a:	2e                   	cs
     96b:	2e                   	cs
     96c:	2f                   	das    
     96d:	2e                   	cs
     96e:	2e                   	cs
     96f:	2f                   	das    
     970:	2e                   	cs
     971:	2e                   	cs
     972:	2f                   	das    
     973:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     977:	6a 2f                	push   0x2f
     979:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     97c:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     983:	6e                   	outs   dx,BYTE PTR ds:[esi]
     984:	65                   	gs
     985:	6c                   	ins    BYTE PTR es:[edi],dx
     986:	2f                   	das    
     987:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     98e:	00 00                	add    BYTE PTR [eax],al
     990:	6d                   	ins    DWORD PTR es:[edi],dx
     991:	61                   	popa   
     992:	6c                   	ins    BYTE PTR es:[edi],dx
     993:	6c                   	ins    BYTE PTR es:[edi],dx
     994:	6f                   	outs   dx,DWORD PTR ds:[esi]
     995:	63 2e                	arpl   WORD PTR [esi],bp
     997:	63 00                	arpl   WORD PTR [eax],ax
     999:	01 00                	add    DWORD PTR [eax],eax
     99b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     99e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     9a5:	63 
     9a6:	2e                   	cs
     9a7:	68 00 02 00 00       	push   0x200
     9ac:	73 74                	jae    a22 <sysEnter_Vector-0x12f5de>
     9ae:	64                   	fs
     9af:	64                   	fs
     9b0:	65                   	gs
     9b1:	66                   	data16
     9b2:	2e                   	cs
     9b3:	68 00 02 00 00       	push   0x200
     9b8:	6d                   	ins    DWORD PTR es:[edi],dx
     9b9:	61                   	popa   
     9ba:	6c                   	ins    BYTE PTR es:[edi],dx
     9bb:	6c                   	ins    BYTE PTR es:[edi],dx
     9bc:	6f                   	outs   dx,DWORD PTR ds:[esi]
     9bd:	63 2e                	arpl   WORD PTR [esi],bp
     9bf:	68 00 03 00 00       	push   0x300
     9c4:	74 69                	je     a2f <sysEnter_Vector-0x12f5d1>
     9c6:	6d                   	ins    DWORD PTR es:[edi],dx
     9c7:	65                   	gs
     9c8:	2e                   	cs
     9c9:	68 00 03 00 00       	push   0x300
     9ce:	6c                   	ins    BYTE PTR es:[edi],dx
     9cf:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     9d6:	4f                   	dec    edi
     9d7:	53                   	push   ebx
     9d8:	2e                   	cs
     9d9:	68 00 03 00 00       	push   0x300
     9de:	73 79                	jae    a59 <sysEnter_Vector-0x12f5a7>
     9e0:	73 63                	jae    a45 <sysEnter_Vector-0x12f5bb>
     9e2:	61                   	popa   
     9e3:	6c                   	ins    BYTE PTR es:[edi],dx
     9e4:	6c                   	ins    BYTE PTR es:[edi],dx
     9e5:	73 2e                	jae    a15 <sysEnter_Vector-0x12f5eb>
     9e7:	68 00 04 00 00       	push   0x400
     9ec:	00 00                	add    BYTE PTR [eax],al
     9ee:	05 02 ac 0e 00       	add    eax,0xeac02
     9f3:	30 03                	xor    BYTE PTR [ebx],al
     9f5:	0c 01                	or     al,0x1
     9f7:	08 21                	or     BYTE PTR [ecx],ah
     9f9:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
     9fc:	bb bb bb 69 f5       	mov    ebx,0xf569bbbb
     a01:	92                   	xchg   edx,eax
     a02:	08 85 08 67 00 02    	or     BYTE PTR [ebp+0x2006708],al
     a08:	04 01                	add    al,0x1
     a0a:	06                   	push   es
     a0b:	66 06                	pushw  es
     a0d:	bc f5 91 76 5b       	mov    esp,0x5b7691f5
     a12:	59                   	pop    ecx
     a13:	31 f5                	xor    ebp,esi
     a15:	68 93 00 02 04       	push   0x4020093
     a1a:	02 be 30 03 76 90    	add    bh,BYTE PTR [esi-0x6f89fcd0]
     a20:	03 0b                	add    ecx,DWORD PTR [ebx]
     a22:	20 31                	and    BYTE PTR [ecx],dh
     a24:	08 27                	or     BYTE PTR [edi],ah
     a26:	08 91 08 13 08 91    	or     BYTE PTR [ecx-0x6ef7ecf8],dl
     a2c:	a0 08 5a 08 e5       	mov    al,ds:0xe5085a08
     a31:	f3 02 26             	repz add ah,BYTE PTR [esi]
     a34:	13 bc ad ad 08 e7 08 	adc    edi,DWORD PTR [ebp+ebp*4+0x8e708ad]
     a3b:	e5 ad                	in     eax,0xad
     a3d:	91                   	xchg   ecx,eax
     a3e:	91                   	xchg   ecx,eax
     a3f:	75 08                	jne    a49 <sysEnter_Vector-0x12f5b7>
     a41:	d7                   	xlat   BYTE PTR ds:[ebx]
     a42:	d7                   	xlat   BYTE PTR ds:[ebx]
     a43:	08 13                	or     BYTE PTR [ebx],dl
     a45:	91                   	xchg   ecx,eax
     a46:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
     a49:	91                   	xchg   ecx,eax
     a4a:	3d 5b f3 d7 31       	cmp    eax,0x31d7f35b
     a4f:	c9                   	leave  
     a50:	ad                   	lods   eax,DWORD PTR ds:[esi]
     a51:	3f                   	aas    
     a52:	08 13                	or     BYTE PTR [ebx],dl
     a54:	08 9f 02 06 00 01    	or     BYTE PTR [edi+0x1000602],bl
     a5a:	01 ed                	add    ebp,ebp
     a5c:	00 00                	add    BYTE PTR [eax],al
     a5e:	00 02                	add    BYTE PTR [edx],al
     a60:	00 aa 00 00 00 01    	add    BYTE PTR [edx+0x1000000],ch
     a66:	01 fb                	add    ebx,edi
     a68:	0e                   	push   cs
     a69:	0d 00 01 01 01       	or     eax,0x1010100
     a6e:	01 00                	add    DWORD PTR [eax],eax
     a70:	00 00                	add    BYTE PTR [eax],al
     a72:	01 00                	add    DWORD PTR [eax],eax
     a74:	00 01                	add    BYTE PTR [ecx],al
     a76:	73 72                	jae    aea <sysEnter_Vector-0x12f516>
     a78:	63 00                	arpl   WORD PTR [eax],ax
     a7a:	2f                   	das    
     a7b:	68 6f 6d 65 2f       	push   0x2f656d6f
     a80:	79 6f                	jns    af1 <sysEnter_Vector-0x12f50f>
     a82:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     a89:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     a8c:	73 73                	jae    b01 <sysEnter_Vector-0x12f4ff>
     a8e:	2f                   	das    
     a8f:	6c                   	ins    BYTE PTR es:[edi],dx
     a90:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     a97:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     a9d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     aa3:	78 2d                	js     ad2 <sysEnter_Vector-0x12f52e>
     aa5:	67 6e                	outs   dx,BYTE PTR ds:[si]
     aa7:	75 2f                	jne    ad8 <sysEnter_Vector-0x12f528>
     aa9:	35 2e 33 2e 30       	xor    eax,0x302e332e
     aae:	2f                   	das    
     aaf:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     ab6:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     ab9:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     abd:	65 00 00             	add    BYTE PTR gs:[eax],al
     ac0:	6d                   	ins    DWORD PTR es:[edi],dx
     ac1:	65                   	gs
     ac2:	6d                   	ins    DWORD PTR es:[edi],dx
     ac3:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     ac6:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     ac9:	01 00                	add    DWORD PTR [eax],eax
     acb:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     ace:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     ad5:	63 
     ad6:	2e                   	cs
     ad7:	68 00 02 00 00       	push   0x200
     adc:	74 69                	je     b47 <sysEnter_Vector-0x12f4b9>
     ade:	6d                   	ins    DWORD PTR es:[edi],dx
     adf:	65                   	gs
     ae0:	2e                   	cs
     ae1:	68 00 03 00 00       	push   0x300
     ae6:	73 74                	jae    b5c <sysEnter_Vector-0x12f4a4>
     ae8:	64                   	fs
     ae9:	64                   	fs
     aea:	65                   	gs
     aeb:	66                   	data16
     aec:	2e                   	cs
     aed:	68 00 02 00 00       	push   0x200
     af2:	6d                   	ins    DWORD PTR es:[edi],dx
     af3:	61                   	popa   
     af4:	6c                   	ins    BYTE PTR es:[edi],dx
     af5:	6c                   	ins    BYTE PTR es:[edi],dx
     af6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     af7:	63 2e                	arpl   WORD PTR [esi],bp
     af9:	68 00 03 00 00       	push   0x300
     afe:	6c                   	ins    BYTE PTR es:[edi],dx
     aff:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     b06:	4f                   	dec    edi
     b07:	53                   	push   ebx
     b08:	2e                   	cs
     b09:	68 00 03 00 00       	push   0x300
     b0e:	00 00                	add    BYTE PTR [eax],al
     b10:	05 02 10 12 00       	add    eax,0x121002
     b15:	30 03                	xor    BYTE PTR [ebx],al
     b17:	0a 01                	or     al,BYTE PTR [ecx]
     b19:	f5                   	cmc    
     b1a:	d7                   	xlat   BYTE PTR ds:[ebx]
     b1b:	d7                   	xlat   BYTE PTR ds:[ebx]
     b1c:	68 91 67 68 83       	push   0x83686791
     b21:	91                   	xchg   ecx,eax
     b22:	91                   	xchg   ecx,eax
     b23:	2f                   	das    
     b24:	08 1f                	or     BYTE PTR [edi],bl
     b26:	e8 08 57 ca 84       	call   84ca6233 <ticksToWait+0x54ca1b77>
     b2b:	68 83 67 68 83       	push   0x83686783
     b30:	91                   	xchg   ecx,eax
     b31:	91                   	xchg   ecx,eax
     b32:	2f                   	das    
     b33:	08 1f                	or     BYTE PTR [edi],bl
     b35:	e8 08 57 ca 5c       	call   5cca6242 <ticksToWait+0x2cca1b86>
     b3a:	67 68 83 67 67 2f    	addr16 push 0x2f676783
     b40:	08 2d e8 08 65 ca    	or     BYTE PTR ds:0xca6508e8,ch
     b46:	3e 02 02             	add    al,BYTE PTR ds:[edx]
     b49:	00 01                	add    BYTE PTR [ecx],al
     b4b:	01 e4                	add    esp,esp
     b4d:	00 00                	add    BYTE PTR [eax],al
     b4f:	00 02                	add    BYTE PTR [edx],al
     b51:	00 aa 00 00 00 01    	add    BYTE PTR [edx+0x1000000],ch
     b57:	01 fb                	add    ebx,edi
     b59:	0e                   	push   cs
     b5a:	0d 00 01 01 01       	or     eax,0x1010100
     b5f:	01 00                	add    DWORD PTR [eax],eax
     b61:	00 00                	add    BYTE PTR [eax],al
     b63:	01 00                	add    DWORD PTR [eax],eax
     b65:	00 01                	add    BYTE PTR [ecx],al
     b67:	73 72                	jae    bdb <sysEnter_Vector-0x12f425>
     b69:	63 00                	arpl   WORD PTR [eax],ax
     b6b:	2f                   	das    
     b6c:	68 6f 6d 65 2f       	push   0x2f656d6f
     b71:	79 6f                	jns    be2 <sysEnter_Vector-0x12f41e>
     b73:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     b7a:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     b7d:	73 73                	jae    bf2 <sysEnter_Vector-0x12f40e>
     b7f:	2f                   	das    
     b80:	6c                   	ins    BYTE PTR es:[edi],dx
     b81:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     b88:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     b8e:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     b94:	78 2d                	js     bc3 <sysEnter_Vector-0x12f43d>
     b96:	67 6e                	outs   dx,BYTE PTR ds:[si]
     b98:	75 2f                	jne    bc9 <sysEnter_Vector-0x12f437>
     b9a:	35 2e 33 2e 30       	xor    eax,0x302e332e
     b9f:	2f                   	das    
     ba0:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     ba7:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     baa:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     bae:	65 00 00             	add    BYTE PTR gs:[eax],al
     bb1:	6d                   	ins    DWORD PTR es:[edi],dx
     bb2:	65                   	gs
     bb3:	6d                   	ins    DWORD PTR es:[edi],dx
     bb4:	73 65                	jae    c1b <sysEnter_Vector-0x12f3e5>
     bb6:	74 2e                	je     be6 <sysEnter_Vector-0x12f41a>
     bb8:	63 00                	arpl   WORD PTR [eax],ax
     bba:	01 00                	add    DWORD PTR [eax],eax
     bbc:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     bbf:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     bc6:	63 
     bc7:	2e                   	cs
     bc8:	68 00 02 00 00       	push   0x200
     bcd:	73 74                	jae    c43 <sysEnter_Vector-0x12f3bd>
     bcf:	64                   	fs
     bd0:	64                   	fs
     bd1:	65                   	gs
     bd2:	66                   	data16
     bd3:	2e                   	cs
     bd4:	68 00 02 00 00       	push   0x200
     bd9:	74 69                	je     c44 <sysEnter_Vector-0x12f3bc>
     bdb:	6d                   	ins    DWORD PTR es:[edi],dx
     bdc:	65                   	gs
     bdd:	2e                   	cs
     bde:	68 00 03 00 00       	push   0x300
     be3:	6d                   	ins    DWORD PTR es:[edi],dx
     be4:	61                   	popa   
     be5:	6c                   	ins    BYTE PTR es:[edi],dx
     be6:	6c                   	ins    BYTE PTR es:[edi],dx
     be7:	6f                   	outs   dx,DWORD PTR ds:[esi]
     be8:	63 2e                	arpl   WORD PTR [esi],bp
     bea:	68 00 03 00 00       	push   0x300
     bef:	6c                   	ins    BYTE PTR es:[edi],dx
     bf0:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     bf7:	4f                   	dec    edi
     bf8:	53                   	push   ebx
     bf9:	2e                   	cs
     bfa:	68 00 03 00 00       	push   0x300
     bff:	00 00                	add    BYTE PTR [eax],al
     c01:	05 02 ac 13 00       	add    eax,0x13ac02
     c06:	30 1a                	xor    BYTE PTR [edx],bl
     c08:	f3 67 67 08 83 67 08 	repz addr32 or BYTE PTR [bp+di+0x867],al
     c0f:	ca 9f 2f             	retf   0x2f9f
     c12:	d5 bd                	aad    0xbd
     c14:	9f                   	lahf   
     c15:	2f                   	das    
     c16:	f1                   	icebp  
     c17:	bf d5 cb 3d 31       	mov    edi,0x313dcbd5
     c1c:	f3 67 67 08 83 67 08 	repz addr32 or BYTE PTR [bp+di+0x867],al
     c23:	ca 9f 2f             	retf   0x2f9f
     c26:	d5 bd                	aad    0xbd
     c28:	9f                   	lahf   
     c29:	2f                   	das    
     c2a:	f1                   	icebp  
     c2b:	bf d5 cb 3d 02       	mov    edi,0x23dcbd5
     c30:	02 00                	add    al,BYTE PTR [eax]
     c32:	01 01                	add    DWORD PTR [ecx],eax
     c34:	c9                   	leave  
     c35:	00 00                	add    BYTE PTR [eax],al
     c37:	00 02                	add    BYTE PTR [edx],al
     c39:	00 b3 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],dh
     c3f:	01 fb                	add    ebx,edi
     c41:	0e                   	push   cs
     c42:	0d 00 01 01 01       	or     eax,0x1010100
     c47:	01 00                	add    DWORD PTR [eax],eax
     c49:	00 00                	add    BYTE PTR [eax],al
     c4b:	01 00                	add    DWORD PTR [eax],eax
     c4d:	00 01                	add    BYTE PTR [ecx],al
     c4f:	73 72                	jae    cc3 <sysEnter_Vector-0x12f33d>
     c51:	63 00                	arpl   WORD PTR [eax],ax
     c53:	2f                   	das    
     c54:	68 6f 6d 65 2f       	push   0x2f656d6f
     c59:	79 6f                	jns    cca <sysEnter_Vector-0x12f336>
     c5b:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     c62:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     c65:	73 73                	jae    cda <sysEnter_Vector-0x12f326>
     c67:	2f                   	das    
     c68:	6c                   	ins    BYTE PTR es:[edi],dx
     c69:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     c70:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     c76:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     c7c:	78 2d                	js     cab <sysEnter_Vector-0x12f355>
     c7e:	67 6e                	outs   dx,BYTE PTR ds:[si]
     c80:	75 2f                	jne    cb1 <sysEnter_Vector-0x12f34f>
     c82:	35 2e 33 2e 30       	xor    eax,0x302e332e
     c87:	2f                   	das    
     c88:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     c8f:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     c92:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     c96:	65 00 00             	add    BYTE PTR gs:[eax],al
     c99:	6d                   	ins    DWORD PTR es:[edi],dx
     c9a:	6d                   	ins    DWORD PTR es:[edi],dx
     c9b:	61                   	popa   
     c9c:	70 2e                	jo     ccc <sysEnter_Vector-0x12f334>
     c9e:	63 00                	arpl   WORD PTR [eax],ax
     ca0:	01 00                	add    DWORD PTR [eax],eax
     ca2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     ca5:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     cac:	63 
     cad:	2e                   	cs
     cae:	68 00 02 00 00       	push   0x200
     cb3:	73 74                	jae    d29 <sysEnter_Vector-0x12f2d7>
     cb5:	64                   	fs
     cb6:	64                   	fs
     cb7:	65                   	gs
     cb8:	66                   	data16
     cb9:	2e                   	cs
     cba:	68 00 02 00 00       	push   0x200
     cbf:	74 69                	je     d2a <sysEnter_Vector-0x12f2d6>
     cc1:	6d                   	ins    DWORD PTR es:[edi],dx
     cc2:	65                   	gs
     cc3:	2e                   	cs
     cc4:	68 00 03 00 00       	push   0x300
     cc9:	74 79                	je     d44 <sysEnter_Vector-0x12f2bc>
     ccb:	70 65                	jo     d32 <sysEnter_Vector-0x12f2ce>
     ccd:	73 2e                	jae    cfd <sysEnter_Vector-0x12f303>
     ccf:	68 00 03 00 00       	push   0x300
     cd4:	6d                   	ins    DWORD PTR es:[edi],dx
     cd5:	61                   	popa   
     cd6:	6c                   	ins    BYTE PTR es:[edi],dx
     cd7:	6c                   	ins    BYTE PTR es:[edi],dx
     cd8:	6f                   	outs   dx,DWORD PTR ds:[esi]
     cd9:	63 2e                	arpl   WORD PTR [esi],bp
     cdb:	68 00 03 00 00       	push   0x300
     ce0:	6c                   	ins    BYTE PTR es:[edi],dx
     ce1:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     ce8:	4f                   	dec    edi
     ce9:	53                   	push   ebx
     cea:	2e                   	cs
     ceb:	68 00 03 00 00       	push   0x300
     cf0:	00 00                	add    BYTE PTR [eax],al
     cf2:	05 02 3c 15 00       	add    eax,0x153c02
     cf7:	30 03                	xor    BYTE PTR [ebx],al
     cf9:	09 01                	or     DWORD PTR [ecx],eax
     cfb:	ca 02 03             	retf   0x302
     cfe:	00 01                	add    BYTE PTR [ecx],al
     d00:	01 4f 01             	add    DWORD PTR [edi+0x1],ecx
     d03:	00 00                	add    BYTE PTR [eax],al
     d05:	02 00                	add    al,BYTE PTR [eax]
     d07:	e2 00                	loop   d09 <sysEnter_Vector-0x12f2f7>
     d09:	00 00                	add    BYTE PTR [eax],al
     d0b:	01 01                	add    DWORD PTR [ecx],eax
     d0d:	fb                   	sti    
     d0e:	0e                   	push   cs
     d0f:	0d 00 01 01 01       	or     eax,0x1010100
     d14:	01 00                	add    DWORD PTR [eax],eax
     d16:	00 00                	add    BYTE PTR [eax],al
     d18:	01 00                	add    DWORD PTR [eax],eax
     d1a:	00 01                	add    BYTE PTR [ecx],al
     d1c:	73 72                	jae    d90 <sysEnter_Vector-0x12f270>
     d1e:	63 00                	arpl   WORD PTR [eax],ax
     d20:	2f                   	das    
     d21:	68 6f 6d 65 2f       	push   0x2f656d6f
     d26:	79 6f                	jns    d97 <sysEnter_Vector-0x12f269>
     d28:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     d2f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     d32:	73 73                	jae    da7 <sysEnter_Vector-0x12f259>
     d34:	2f                   	das    
     d35:	6c                   	ins    BYTE PTR es:[edi],dx
     d36:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     d3d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     d43:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     d49:	78 2d                	js     d78 <sysEnter_Vector-0x12f288>
     d4b:	67 6e                	outs   dx,BYTE PTR ds:[si]
     d4d:	75 2f                	jne    d7e <sysEnter_Vector-0x12f282>
     d4f:	35 2e 33 2e 30       	xor    eax,0x302e332e
     d54:	2f                   	das    
     d55:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d5c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     d5f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     d63:	65 00 2e             	add    BYTE PTR gs:[esi],ch
     d66:	2e                   	cs
     d67:	2f                   	das    
     d68:	2e                   	cs
     d69:	2e                   	cs
     d6a:	2f                   	das    
     d6b:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     d6f:	6a 2f                	push   0x2f
     d71:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     d74:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     d7b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d7c:	65                   	gs
     d7d:	6c                   	ins    BYTE PTR es:[edi],dx
     d7e:	2f                   	das    
     d7f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d86:	00 00                	add    BYTE PTR [eax],al
     d88:	73 74                	jae    dfe <sysEnter_Vector-0x12f202>
     d8a:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
     d91:	00 
     d92:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     d95:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     d9c:	63 
     d9d:	2e                   	cs
     d9e:	68 00 02 00 00       	push   0x200
     da3:	73 74                	jae    e19 <sysEnter_Vector-0x12f1e7>
     da5:	64                   	fs
     da6:	64                   	fs
     da7:	65                   	gs
     da8:	66                   	data16
     da9:	2e                   	cs
     daa:	68 00 02 00 00       	push   0x200
     daf:	74 69                	je     e1a <sysEnter_Vector-0x12f1e6>
     db1:	6d                   	ins    DWORD PTR es:[edi],dx
     db2:	65                   	gs
     db3:	2e                   	cs
     db4:	68 00 03 00 00       	push   0x300
     db9:	64                   	fs
     dba:	6c                   	ins    BYTE PTR es:[edi],dx
     dbb:	6c                   	ins    BYTE PTR es:[edi],dx
     dbc:	69 73 74 2e 68 00 04 	imul   esi,DWORD PTR [ebx+0x74],0x400682e
     dc3:	00 00                	add    BYTE PTR [eax],al
     dc5:	73 74                	jae    e3b <sysEnter_Vector-0x12f1c5>
     dc7:	64 69 6f 2e 68 00 03 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x30068
     dce:	00 
     dcf:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     dd2:	6c                   	ins    BYTE PTR es:[edi],dx
     dd3:	6c                   	ins    BYTE PTR es:[edi],dx
     dd4:	6f                   	outs   dx,DWORD PTR ds:[esi]
     dd5:	63 2e                	arpl   WORD PTR [esi],bp
     dd7:	68 00 03 00 00       	push   0x300
     ddc:	6c                   	ins    BYTE PTR es:[edi],dx
     ddd:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     de4:	4f                   	dec    edi
     de5:	53                   	push   ebx
     de6:	2e                   	cs
     de7:	68 00 03 00 00       	push   0x300
     dec:	00 00                	add    BYTE PTR [eax],al
     dee:	05 02 4c 15 00       	add    eax,0x154c02
     df3:	30 03                	xor    BYTE PTR [ebx],al
     df5:	12 01                	adc    al,BYTE PTR [ecx]
     df7:	08 13                	or     BYTE PTR [ebx],dl
     df9:	08 59 5b             	or     BYTE PTR [ecx+0x5b],bl
     dfc:	08 13                	or     BYTE PTR [ebx],dl
     dfe:	f3 5b                	repz pop ebx
     e00:	08 23                	or     BYTE PTR [ebx],ah
     e02:	77 08                	ja     e0c <sysEnter_Vector-0x12f1f4>
     e04:	30 08                	xor    BYTE PTR [eax],cl
     e06:	21 08                	and    DWORD PTR [eax],ecx
     e08:	23 d7                	and    edx,edi
     e0a:	d9 91 e5 08 72 00    	fst    DWORD PTR [ecx+0x7208e5]
     e10:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     e13:	06                   	push   es
     e14:	4a                   	dec    edx
     e15:	06                   	push   es
     e16:	86 21                	xchg   BYTE PTR [ecx],ah
     e18:	d7                   	xlat   BYTE PTR ds:[ebx]
     e19:	91                   	xchg   ecx,eax
     e1a:	e5 08                	in     eax,0x8
     e1c:	72 00                	jb     e1e <sysEnter_Vector-0x12f1e2>
     e1e:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     e21:	06                   	push   es
     e22:	4a                   	dec    edx
     e23:	06                   	push   es
     e24:	86 21                	xchg   BYTE PTR [ecx],ah
     e26:	d7                   	xlat   BYTE PTR ds:[ebx]
     e27:	00 02                	add    BYTE PTR [edx],al
     e29:	04 03                	add    al,0x3
     e2b:	83 00 02             	add    DWORD PTR [eax],0x2
     e2e:	04 03                	add    al,0x3
     e30:	d5 00                	aad    0x0
     e32:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     e35:	06                   	push   es
     e36:	4a                   	dec    edx
     e37:	06                   	push   es
     e38:	69 e6 21 5c 08 22    	imul   esp,esi,0x22085c21
     e3e:	76 08                	jbe    e48 <sysEnter_Vector-0x12f1b8>
     e40:	31 d7                	xor    edi,edx
     e42:	d7                   	xlat   BYTE PTR ds:[ebx]
     e43:	d7                   	xlat   BYTE PTR ds:[ebx]
     e44:	d7                   	xlat   BYTE PTR ds:[ebx]
     e45:	ad                   	lods   eax,DWORD PTR ds:[esi]
     e46:	e6 21                	out    0x21,al
     e48:	5b                   	pop    ebx
     e49:	c9                   	leave  
     e4a:	e5 d7                	in     eax,0xd7
     e4c:	e5 08                	in     eax,0x8
     e4e:	67 02 03             	add    al,BYTE PTR [bp+di]
     e51:	00 01                	add    BYTE PTR [ecx],al
     e53:	01 d6                	add    esi,edx
     e55:	00 00                	add    BYTE PTR [eax],al
     e57:	00 02                	add    BYTE PTR [edx],al
     e59:	00 a6 00 00 00 01    	add    BYTE PTR [esi+0x1000000],ah
     e5f:	01 fb                	add    ebx,edi
     e61:	0e                   	push   cs
     e62:	0d 00 01 01 01       	or     eax,0x1010100
     e67:	01 00                	add    DWORD PTR [eax],eax
     e69:	00 00                	add    BYTE PTR [eax],al
     e6b:	01 00                	add    DWORD PTR [eax],eax
     e6d:	00 01                	add    BYTE PTR [ecx],al
     e6f:	73 72                	jae    ee3 <sysEnter_Vector-0x12f11d>
     e71:	63 2f                	arpl   WORD PTR [edi],bp
     e73:	73 74                	jae    ee9 <sysEnter_Vector-0x12f117>
     e75:	72 69                	jb     ee0 <sysEnter_Vector-0x12f120>
     e77:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e78:	67 73 00             	addr16 jae e7b <sysEnter_Vector-0x12f185>
     e7b:	2f                   	das    
     e7c:	68 6f 6d 65 2f       	push   0x2f656d6f
     e81:	79 6f                	jns    ef2 <sysEnter_Vector-0x12f10e>
     e83:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     e8a:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     e8d:	73 73                	jae    f02 <sysEnter_Vector-0x12f0fe>
     e8f:	2f                   	das    
     e90:	6c                   	ins    BYTE PTR es:[edi],dx
     e91:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     e98:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     e9e:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     ea4:	78 2d                	js     ed3 <sysEnter_Vector-0x12f12d>
     ea6:	67 6e                	outs   dx,BYTE PTR ds:[si]
     ea8:	75 2f                	jne    ed9 <sysEnter_Vector-0x12f127>
     eaa:	35 2e 33 2e 30       	xor    eax,0x302e332e
     eaf:	2f                   	das    
     eb0:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     eb7:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     eba:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     ebe:	65 00 00             	add    BYTE PTR gs:[eax],al
     ec1:	73 74                	jae    f37 <sysEnter_Vector-0x12f0c9>
     ec3:	72 63                	jb     f28 <sysEnter_Vector-0x12f0d8>
     ec5:	61                   	popa   
     ec6:	74 2e                	je     ef6 <sysEnter_Vector-0x12f10a>
     ec8:	63 00                	arpl   WORD PTR [eax],ax
     eca:	01 00                	add    DWORD PTR [eax],eax
     ecc:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     ecf:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     ed6:	63 
     ed7:	2e                   	cs
     ed8:	68 00 02 00 00       	push   0x200
     edd:	74 69                	je     f48 <sysEnter_Vector-0x12f0b8>
     edf:	6d                   	ins    DWORD PTR es:[edi],dx
     ee0:	65                   	gs
     ee1:	2e                   	cs
     ee2:	68 00 03 00 00       	push   0x300
     ee7:	6d                   	ins    DWORD PTR es:[edi],dx
     ee8:	61                   	popa   
     ee9:	6c                   	ins    BYTE PTR es:[edi],dx
     eea:	6c                   	ins    BYTE PTR es:[edi],dx
     eeb:	6f                   	outs   dx,DWORD PTR ds:[esi]
     eec:	63 2e                	arpl   WORD PTR [esi],bp
     eee:	68 00 03 00 00       	push   0x300
     ef3:	6c                   	ins    BYTE PTR es:[edi],dx
     ef4:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     efb:	4f                   	dec    edi
     efc:	53                   	push   ebx
     efd:	2e                   	cs
     efe:	68 00 03 00 00       	push   0x300
     f03:	00 00                	add    BYTE PTR [eax],al
     f05:	05 02 ac 17 00       	add    eax,0x17ac02
     f0a:	30 03                	xor    BYTE PTR [ebx],al
     f0c:	1d 01 08 21 02       	sbb    eax,0x2210801
     f11:	24 13                	and    al,0x13
     f13:	3d 5b 08 21 02       	cmp    eax,0x221085b
     f18:	24 13                	and    al,0x13
     f1a:	3d 5a f5 76 2f       	cmp    eax,0x2f76f55a
     f1f:	49                   	dec    ecx
     f20:	e8 76 2f 08 4b       	call   4b083e9b <ticksToWait+0x1b07f7df>
     f25:	4b                   	dec    ebx
     f26:	47                   	inc    edi
     f27:	ea ad 02 03 00 01 01 	jmp    0x101:0x302ad
     f2e:	c5 00                	lds    eax,FWORD PTR [eax]
     f30:	00 00                	add    BYTE PTR [eax],al
     f32:	02 00                	add    al,BYTE PTR [eax]
     f34:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
     f35:	00 00                	add    BYTE PTR [eax],al
     f37:	00 01                	add    BYTE PTR [ecx],al
     f39:	01 fb                	add    ebx,edi
     f3b:	0e                   	push   cs
     f3c:	0d 00 01 01 01       	or     eax,0x1010100
     f41:	01 00                	add    DWORD PTR [eax],eax
     f43:	00 00                	add    BYTE PTR [eax],al
     f45:	01 00                	add    DWORD PTR [eax],eax
     f47:	00 01                	add    BYTE PTR [ecx],al
     f49:	73 72                	jae    fbd <sysEnter_Vector-0x12f043>
     f4b:	63 2f                	arpl   WORD PTR [edi],bp
     f4d:	73 74                	jae    fc3 <sysEnter_Vector-0x12f03d>
     f4f:	72 69                	jb     fba <sysEnter_Vector-0x12f046>
     f51:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f52:	67 73 00             	addr16 jae f55 <sysEnter_Vector-0x12f0ab>
     f55:	2f                   	das    
     f56:	68 6f 6d 65 2f       	push   0x2f656d6f
     f5b:	79 6f                	jns    fcc <sysEnter_Vector-0x12f034>
     f5d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     f64:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     f67:	73 73                	jae    fdc <sysEnter_Vector-0x12f024>
     f69:	2f                   	das    
     f6a:	6c                   	ins    BYTE PTR es:[edi],dx
     f6b:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     f72:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     f78:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     f7e:	78 2d                	js     fad <sysEnter_Vector-0x12f053>
     f80:	67 6e                	outs   dx,BYTE PTR ds:[si]
     f82:	75 2f                	jne    fb3 <sysEnter_Vector-0x12f04d>
     f84:	35 2e 33 2e 30       	xor    eax,0x302e332e
     f89:	2f                   	das    
     f8a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f91:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     f94:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     f98:	65 00 00             	add    BYTE PTR gs:[eax],al
     f9b:	73 74                	jae    1011 <sysEnter_Vector-0x12efef>
     f9d:	72 63                	jb     1002 <sysEnter_Vector-0x12effe>
     f9f:	6d                   	ins    DWORD PTR es:[edi],dx
     fa0:	70 2e                	jo     fd0 <sysEnter_Vector-0x12f030>
     fa2:	63 00                	arpl   WORD PTR [eax],ax
     fa4:	01 00                	add    DWORD PTR [eax],eax
     fa6:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     fa9:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     fb0:	63 
     fb1:	2e                   	cs
     fb2:	68 00 02 00 00       	push   0x200
     fb7:	74 69                	je     1022 <sysEnter_Vector-0x12efde>
     fb9:	6d                   	ins    DWORD PTR es:[edi],dx
     fba:	65                   	gs
     fbb:	2e                   	cs
     fbc:	68 00 03 00 00       	push   0x300
     fc1:	6d                   	ins    DWORD PTR es:[edi],dx
     fc2:	61                   	popa   
     fc3:	6c                   	ins    BYTE PTR es:[edi],dx
     fc4:	6c                   	ins    BYTE PTR es:[edi],dx
     fc5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     fc6:	63 2e                	arpl   WORD PTR [esi],bp
     fc8:	68 00 03 00 00       	push   0x300
     fcd:	6c                   	ins    BYTE PTR es:[edi],dx
     fce:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     fd5:	4f                   	dec    edi
     fd6:	53                   	push   ebx
     fd7:	2e                   	cs
     fd8:	68 00 03 00 00       	push   0x300
     fdd:	00 00                	add    BYTE PTR [eax],al
     fdf:	05 02 98 18 00       	add    eax,0x189802
     fe4:	30 03                	xor    BYTE PTR [ebx],al
     fe6:	18 01                	sbb    BYTE PTR [ecx],al
     fe8:	08 21                	or     BYTE PTR [ecx],ah
     fea:	3d 41 ad ad 67       	cmp    eax,0x67adad41
     fef:	d8 92 bb 02 07 00    	fcom   DWORD PTR [edx+0x702bb]
     ff5:	01 01                	add    DWORD PTR [ecx],eax
     ff7:	e6 00                	out    0x0,al
     ff9:	00 00                	add    BYTE PTR [eax],al
     ffb:	02 00                	add    al,BYTE PTR [eax]
     ffd:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
     ffe:	00 00                	add    BYTE PTR [eax],al
    1000:	00 01                	add    BYTE PTR [ecx],al
    1002:	01 fb                	add    ebx,edi
    1004:	0e                   	push   cs
    1005:	0d 00 01 01 01       	or     eax,0x1010100
    100a:	01 00                	add    DWORD PTR [eax],eax
    100c:	00 00                	add    BYTE PTR [eax],al
    100e:	01 00                	add    DWORD PTR [eax],eax
    1010:	00 01                	add    BYTE PTR [ecx],al
    1012:	73 72                	jae    1086 <sysEnter_Vector-0x12ef7a>
    1014:	63 2f                	arpl   WORD PTR [edi],bp
    1016:	73 74                	jae    108c <sysEnter_Vector-0x12ef74>
    1018:	72 69                	jb     1083 <sysEnter_Vector-0x12ef7d>
    101a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    101b:	67 73 00             	addr16 jae 101e <sysEnter_Vector-0x12efe2>
    101e:	2f                   	das    
    101f:	68 6f 6d 65 2f       	push   0x2f656d6f
    1024:	79 6f                	jns    1095 <sysEnter_Vector-0x12ef6b>
    1026:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    102d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1030:	73 73                	jae    10a5 <sysEnter_Vector-0x12ef5b>
    1032:	2f                   	das    
    1033:	6c                   	ins    BYTE PTR es:[edi],dx
    1034:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    103b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1041:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1047:	78 2d                	js     1076 <sysEnter_Vector-0x12ef8a>
    1049:	67 6e                	outs   dx,BYTE PTR ds:[si]
    104b:	75 2f                	jne    107c <sysEnter_Vector-0x12ef84>
    104d:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1052:	2f                   	das    
    1053:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    105a:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    105d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1061:	65 00 00             	add    BYTE PTR gs:[eax],al
    1064:	73 74                	jae    10da <sysEnter_Vector-0x12ef26>
    1066:	72 63                	jb     10cb <sysEnter_Vector-0x12ef35>
    1068:	70 79                	jo     10e3 <sysEnter_Vector-0x12ef1d>
    106a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    106d:	01 00                	add    DWORD PTR [eax],eax
    106f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1072:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1079:	63 
    107a:	2e                   	cs
    107b:	68 00 02 00 00       	push   0x200
    1080:	74 69                	je     10eb <sysEnter_Vector-0x12ef15>
    1082:	6d                   	ins    DWORD PTR es:[edi],dx
    1083:	65                   	gs
    1084:	2e                   	cs
    1085:	68 00 03 00 00       	push   0x300
    108a:	6d                   	ins    DWORD PTR es:[edi],dx
    108b:	61                   	popa   
    108c:	6c                   	ins    BYTE PTR es:[edi],dx
    108d:	6c                   	ins    BYTE PTR es:[edi],dx
    108e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    108f:	63 2e                	arpl   WORD PTR [esi],bp
    1091:	68 00 03 00 00       	push   0x300
    1096:	6c                   	ins    BYTE PTR es:[edi],dx
    1097:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    109e:	4f                   	dec    edi
    109f:	53                   	push   ebx
    10a0:	2e                   	cs
    10a1:	68 00 03 00 00       	push   0x300
    10a6:	00 00                	add    BYTE PTR [eax],al
    10a8:	05 02 f8 18 00       	add    eax,0x18f802
    10ad:	30 16                	xor    BYTE PTR [esi],dl
    10af:	f3 67 00 02          	repz add BYTE PTR [bp+si],al
    10b3:	04 01                	add    al,0x1
    10b5:	06                   	push   es
    10b6:	20 06                	and    BYTE PTR [esi],al
    10b8:	08 ca                	or     dl,cl
    10ba:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    10c0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    10c3:	06                   	push   es
    10c4:	20 06                	and    BYTE PTR [esi],al
    10c6:	08 ca                	or     dl,cl
    10c8:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    10ce:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    10d1:	06                   	push   es
    10d2:	20 00                	and    BYTE PTR [eax],al
    10d4:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    10d7:	08 c8                	or     al,cl
    10d9:	06                   	push   es
    10da:	ca 3d 02             	retf   0x23d
    10dd:	02 00                	add    al,BYTE PTR [eax]
    10df:	01 01                	add    DWORD PTR [ecx],eax
    10e1:	d5 00                	aad    0x0
    10e3:	00 00                	add    BYTE PTR [eax],al
    10e5:	02 00                	add    al,BYTE PTR [eax]
    10e7:	a8 00                	test   al,0x0
    10e9:	00 00                	add    BYTE PTR [eax],al
    10eb:	01 01                	add    DWORD PTR [ecx],eax
    10ed:	fb                   	sti    
    10ee:	0e                   	push   cs
    10ef:	0d 00 01 01 01       	or     eax,0x1010100
    10f4:	01 00                	add    DWORD PTR [eax],eax
    10f6:	00 00                	add    BYTE PTR [eax],al
    10f8:	01 00                	add    DWORD PTR [eax],eax
    10fa:	00 01                	add    BYTE PTR [ecx],al
    10fc:	73 72                	jae    1170 <sysEnter_Vector-0x12ee90>
    10fe:	63 2f                	arpl   WORD PTR [edi],bp
    1100:	73 74                	jae    1176 <sysEnter_Vector-0x12ee8a>
    1102:	72 69                	jb     116d <sysEnter_Vector-0x12ee93>
    1104:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1105:	67 73 00             	addr16 jae 1108 <sysEnter_Vector-0x12eef8>
    1108:	2f                   	das    
    1109:	68 6f 6d 65 2f       	push   0x2f656d6f
    110e:	79 6f                	jns    117f <sysEnter_Vector-0x12ee81>
    1110:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1117:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    111a:	73 73                	jae    118f <sysEnter_Vector-0x12ee71>
    111c:	2f                   	das    
    111d:	6c                   	ins    BYTE PTR es:[edi],dx
    111e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1125:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    112b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1131:	78 2d                	js     1160 <sysEnter_Vector-0x12eea0>
    1133:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1135:	75 2f                	jne    1166 <sysEnter_Vector-0x12ee9a>
    1137:	35 2e 33 2e 30       	xor    eax,0x302e332e
    113c:	2f                   	das    
    113d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1144:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1147:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    114b:	65 00 00             	add    BYTE PTR gs:[eax],al
    114e:	73 74                	jae    11c4 <sysEnter_Vector-0x12ee3c>
    1150:	72 69                	jb     11bb <sysEnter_Vector-0x12ee45>
    1152:	73 6e                	jae    11c2 <sysEnter_Vector-0x12ee3e>
    1154:	75 6d                	jne    11c3 <sysEnter_Vector-0x12ee3d>
    1156:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1159:	01 00                	add    DWORD PTR [eax],eax
    115b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    115e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1165:	63 
    1166:	2e                   	cs
    1167:	68 00 02 00 00       	push   0x200
    116c:	74 69                	je     11d7 <sysEnter_Vector-0x12ee29>
    116e:	6d                   	ins    DWORD PTR es:[edi],dx
    116f:	65                   	gs
    1170:	2e                   	cs
    1171:	68 00 03 00 00       	push   0x300
    1176:	6d                   	ins    DWORD PTR es:[edi],dx
    1177:	61                   	popa   
    1178:	6c                   	ins    BYTE PTR es:[edi],dx
    1179:	6c                   	ins    BYTE PTR es:[edi],dx
    117a:	6f                   	outs   dx,DWORD PTR ds:[esi]
    117b:	63 2e                	arpl   WORD PTR [esi],bp
    117d:	68 00 03 00 00       	push   0x300
    1182:	6c                   	ins    BYTE PTR es:[edi],dx
    1183:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    118a:	4f                   	dec    edi
    118b:	53                   	push   ebx
    118c:	2e                   	cs
    118d:	68 00 03 00 00       	push   0x300
    1192:	00 00                	add    BYTE PTR [eax],al
    1194:	05 02 c0 19 00       	add    eax,0x19c002
    1199:	30 1a                	xor    BYTE PTR [edx],bl
    119b:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    119e:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    11a1:	06                   	push   es
    11a2:	66                   	data16
    11a3:	00 02                	add    BYTE PTR [edx],al
    11a5:	04 02                	add    al,0x2
    11a7:	66 06                	pushw  es
    11a9:	75 59                	jne    1204 <sysEnter_Vector-0x12edfc>
    11ab:	31 f3                	xor    ebx,esi
    11ad:	76 2f                	jbe    11de <sysEnter_Vector-0x12ee22>
    11af:	08 e5                	or     ch,ah
    11b1:	72 08                	jb     11bb <sysEnter_Vector-0x12ee45>
    11b3:	23 5a 02             	and    ebx,DWORD PTR [edx+0x2]
    11b6:	02 00                	add    al,BYTE PTR [eax]
    11b8:	01 01                	add    DWORD PTR [ecx],eax
    11ba:	94                   	xchg   esp,eax
    11bb:	00 00                	add    BYTE PTR [eax],al
    11bd:	00 02                	add    BYTE PTR [edx],al
    11bf:	00 74 00 00          	add    BYTE PTR [eax+eax*1+0x0],dh
    11c3:	00 01                	add    BYTE PTR [ecx],al
    11c5:	01 fb                	add    ebx,edi
    11c7:	0e                   	push   cs
    11c8:	0d 00 01 01 01       	or     eax,0x1010100
    11cd:	01 00                	add    DWORD PTR [eax],eax
    11cf:	00 00                	add    BYTE PTR [eax],al
    11d1:	01 00                	add    DWORD PTR [eax],eax
    11d3:	00 01                	add    BYTE PTR [ecx],al
    11d5:	73 72                	jae    1249 <sysEnter_Vector-0x12edb7>
    11d7:	63 2f                	arpl   WORD PTR [edi],bp
    11d9:	73 74                	jae    124f <sysEnter_Vector-0x12edb1>
    11db:	72 69                	jb     1246 <sysEnter_Vector-0x12edba>
    11dd:	6e                   	outs   dx,BYTE PTR ds:[esi]
    11de:	67 73 00             	addr16 jae 11e1 <sysEnter_Vector-0x12ee1f>
    11e1:	2f                   	das    
    11e2:	68 6f 6d 65 2f       	push   0x2f656d6f
    11e7:	79 6f                	jns    1258 <sysEnter_Vector-0x12eda8>
    11e9:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    11f0:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    11f3:	73 73                	jae    1268 <sysEnter_Vector-0x12ed98>
    11f5:	2f                   	das    
    11f6:	6c                   	ins    BYTE PTR es:[edi],dx
    11f7:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    11fe:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1204:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    120a:	78 2d                	js     1239 <sysEnter_Vector-0x12edc7>
    120c:	67 6e                	outs   dx,BYTE PTR ds:[si]
    120e:	75 2f                	jne    123f <sysEnter_Vector-0x12edc1>
    1210:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1215:	2f                   	das    
    1216:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    121d:	00 00                	add    BYTE PTR [eax],al
    121f:	73 74                	jae    1295 <sysEnter_Vector-0x12ed6b>
    1221:	72 6c                	jb     128f <sysEnter_Vector-0x12ed71>
    1223:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1225:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1228:	01 00                	add    DWORD PTR [eax],eax
    122a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    122d:	64                   	fs
    122e:	64                   	fs
    122f:	65                   	gs
    1230:	66                   	data16
    1231:	2e                   	cs
    1232:	68 00 02 00 00       	push   0x200
    1237:	00 00                	add    BYTE PTR [eax],al
    1239:	05 02 4c 1a 00       	add    eax,0x1a4c02
    123e:	30 14 f3             	xor    BYTE PTR [ebx+esi*8],dl
    1241:	75 2f                	jne    1272 <sysEnter_Vector-0x12ed8e>
    1243:	49                   	dec    ecx
    1244:	e6 3d                	out    0x3d,al
    1246:	30 f3                	xor    bl,dh
    1248:	75 2f                	jne    1279 <sysEnter_Vector-0x12ed87>
    124a:	49                   	dec    ecx
    124b:	e6 3d                	out    0x3d,al
    124d:	02 02                	add    al,BYTE PTR [edx]
    124f:	00 01                	add    BYTE PTR [ecx],al
    1251:	01 c1                	add    ecx,eax
    1253:	00 00                	add    BYTE PTR [eax],al
    1255:	00 02                	add    BYTE PTR [edx],al
    1257:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    125a:	00 00                	add    BYTE PTR [eax],al
    125c:	01 01                	add    DWORD PTR [ecx],eax
    125e:	fb                   	sti    
    125f:	0e                   	push   cs
    1260:	0d 00 01 01 01       	or     eax,0x1010100
    1265:	01 00                	add    DWORD PTR [eax],eax
    1267:	00 00                	add    BYTE PTR [eax],al
    1269:	01 00                	add    DWORD PTR [eax],eax
    126b:	00 01                	add    BYTE PTR [ecx],al
    126d:	73 72                	jae    12e1 <sysEnter_Vector-0x12ed1f>
    126f:	63 2f                	arpl   WORD PTR [edi],bp
    1271:	73 74                	jae    12e7 <sysEnter_Vector-0x12ed19>
    1273:	72 69                	jb     12de <sysEnter_Vector-0x12ed22>
    1275:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1276:	67 73 00             	addr16 jae 1279 <sysEnter_Vector-0x12ed87>
    1279:	2f                   	das    
    127a:	68 6f 6d 65 2f       	push   0x2f656d6f
    127f:	79 6f                	jns    12f0 <sysEnter_Vector-0x12ed10>
    1281:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1288:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    128b:	73 73                	jae    1300 <sysEnter_Vector-0x12ed00>
    128d:	2f                   	das    
    128e:	6c                   	ins    BYTE PTR es:[edi],dx
    128f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1296:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    129c:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    12a2:	78 2d                	js     12d1 <sysEnter_Vector-0x12ed2f>
    12a4:	67 6e                	outs   dx,BYTE PTR ds:[si]
    12a6:	75 2f                	jne    12d7 <sysEnter_Vector-0x12ed29>
    12a8:	35 2e 33 2e 30       	xor    eax,0x302e332e
    12ad:	2f                   	das    
    12ae:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    12b5:	00 00                	add    BYTE PTR [eax],al
    12b7:	73 74                	jae    132d <sysEnter_Vector-0x12ecd3>
    12b9:	72 6e                	jb     1329 <sysEnter_Vector-0x12ecd7>
    12bb:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    12be:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    12c1:	01 00                	add    DWORD PTR [eax],eax
    12c3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    12c6:	64                   	fs
    12c7:	64                   	fs
    12c8:	65                   	gs
    12c9:	66                   	data16
    12ca:	2e                   	cs
    12cb:	68 00 02 00 00       	push   0x200
    12d0:	00 00                	add    BYTE PTR [eax],al
    12d2:	05 02 b0 1a 00       	add    eax,0x1ab002
    12d7:	30 03                	xor    BYTE PTR [ebx],al
    12d9:	0c 01                	or     al,0x1
    12db:	c9                   	leave  
    12dc:	2f                   	das    
    12dd:	f3 00 02             	repz add BYTE PTR [edx],al
    12e0:	04 01                	add    al,0x1
    12e2:	06                   	push   es
    12e3:	f2 00 02             	repnz add BYTE PTR [edx],al
    12e6:	04 02                	add    al,0x2
    12e8:	74 06                	je     12f0 <sysEnter_Vector-0x12ed10>
    12ea:	75 9f                	jne    128b <sysEnter_Vector-0x12ed75>
    12ec:	70 00                	jo     12ee <sysEnter_Vector-0x12ed12>
    12ee:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    12f1:	06                   	push   es
    12f2:	ba 06 6b 59 31       	mov    edx,0x31596b06
    12f7:	c9                   	leave  
    12f8:	2f                   	das    
    12f9:	f3 00 02             	repz add BYTE PTR [edx],al
    12fc:	04 01                	add    al,0x1
    12fe:	06                   	push   es
    12ff:	f2 00 02             	repnz add BYTE PTR [edx],al
    1302:	04 02                	add    al,0x2
    1304:	74 06                	je     130c <sysEnter_Vector-0x12ecf4>
    1306:	75 9f                	jne    12a7 <sysEnter_Vector-0x12ed59>
    1308:	70 00                	jo     130a <sysEnter_Vector-0x12ecf6>
    130a:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    130d:	06                   	push   es
    130e:	ba 06 6b 59 02       	mov    edx,0x2596b06
    1313:	02 00                	add    al,BYTE PTR [eax]
    1315:	01 01                	add    DWORD PTR [ecx],eax
    1317:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    131c:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    131f:	00 00                	add    BYTE PTR [eax],al
    1321:	01 01                	add    DWORD PTR [ecx],eax
    1323:	fb                   	sti    
    1324:	0e                   	push   cs
    1325:	0d 00 01 01 01       	or     eax,0x1010100
    132a:	01 00                	add    DWORD PTR [eax],eax
    132c:	00 00                	add    BYTE PTR [eax],al
    132e:	01 00                	add    DWORD PTR [eax],eax
    1330:	00 01                	add    BYTE PTR [ecx],al
    1332:	73 72                	jae    13a6 <sysEnter_Vector-0x12ec5a>
    1334:	63 2f                	arpl   WORD PTR [edi],bp
    1336:	73 74                	jae    13ac <sysEnter_Vector-0x12ec54>
    1338:	72 69                	jb     13a3 <sysEnter_Vector-0x12ec5d>
    133a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    133b:	67 73 00             	addr16 jae 133e <sysEnter_Vector-0x12ecc2>
    133e:	2f                   	das    
    133f:	68 6f 6d 65 2f       	push   0x2f656d6f
    1344:	79 6f                	jns    13b5 <sysEnter_Vector-0x12ec4b>
    1346:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    134d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1350:	73 73                	jae    13c5 <sysEnter_Vector-0x12ec3b>
    1352:	2f                   	das    
    1353:	6c                   	ins    BYTE PTR es:[edi],dx
    1354:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    135b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1361:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1367:	78 2d                	js     1396 <sysEnter_Vector-0x12ec6a>
    1369:	67 6e                	outs   dx,BYTE PTR ds:[si]
    136b:	75 2f                	jne    139c <sysEnter_Vector-0x12ec64>
    136d:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1372:	2f                   	das    
    1373:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    137a:	00 00                	add    BYTE PTR [eax],al
    137c:	73 74                	jae    13f2 <sysEnter_Vector-0x12ec0e>
    137e:	72 6e                	jb     13ee <sysEnter_Vector-0x12ec12>
    1380:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    1383:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1386:	01 00                	add    DWORD PTR [eax],eax
    1388:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    138b:	64                   	fs
    138c:	64                   	fs
    138d:	65                   	gs
    138e:	66                   	data16
    138f:	2e                   	cs
    1390:	68 00 02 00 00       	push   0x200
    1395:	00 00                	add    BYTE PTR [eax],al
    1397:	05 02 80 1b 00       	add    eax,0x1b8002
    139c:	30 03                	xor    BYTE PTR [ebx],al
    139e:	0d 01 f3 67 2f       	or     eax,0x2f67f301
    13a3:	08 67 48             	or     BYTE PTR [edi+0x48],ah
    13a6:	00 02                	add    BYTE PTR [edx],al
    13a8:	04 01                	add    al,0x1
    13aa:	06                   	push   es
    13ab:	66 06                	pushw  es
    13ad:	a2 2f bb 48 6a       	mov    ds:0x6a48bb2f,al
    13b2:	3d 31 c9 08 13       	cmp    eax,0x1308c931
    13b7:	02 02                	add    al,BYTE PTR [edx]
    13b9:	00 01                	add    BYTE PTR [ecx],al
    13bb:	01 53 01             	add    DWORD PTR [ebx+0x1],edx
    13be:	00 00                	add    BYTE PTR [eax],al
    13c0:	02 00                	add    al,BYTE PTR [eax]
    13c2:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    13c3:	00 00                	add    BYTE PTR [eax],al
    13c5:	00 01                	add    BYTE PTR [ecx],al
    13c7:	01 fb                	add    ebx,edi
    13c9:	0e                   	push   cs
    13ca:	0d 00 01 01 01       	or     eax,0x1010100
    13cf:	01 00                	add    DWORD PTR [eax],eax
    13d1:	00 00                	add    BYTE PTR [eax],al
    13d3:	01 00                	add    DWORD PTR [eax],eax
    13d5:	00 01                	add    BYTE PTR [ecx],al
    13d7:	73 72                	jae    144b <sysEnter_Vector-0x12ebb5>
    13d9:	63 2f                	arpl   WORD PTR [edi],bp
    13db:	73 74                	jae    1451 <sysEnter_Vector-0x12ebaf>
    13dd:	72 69                	jb     1448 <sysEnter_Vector-0x12ebb8>
    13df:	6e                   	outs   dx,BYTE PTR ds:[esi]
    13e0:	67 73 00             	addr16 jae 13e3 <sysEnter_Vector-0x12ec1d>
    13e3:	2f                   	das    
    13e4:	68 6f 6d 65 2f       	push   0x2f656d6f
    13e9:	79 6f                	jns    145a <sysEnter_Vector-0x12eba6>
    13eb:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    13f2:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    13f5:	73 73                	jae    146a <sysEnter_Vector-0x12eb96>
    13f7:	2f                   	das    
    13f8:	6c                   	ins    BYTE PTR es:[edi],dx
    13f9:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1400:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1406:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    140c:	78 2d                	js     143b <sysEnter_Vector-0x12ebc5>
    140e:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1410:	75 2f                	jne    1441 <sysEnter_Vector-0x12ebbf>
    1412:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1417:	2f                   	das    
    1418:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    141f:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1422:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1426:	65 00 00             	add    BYTE PTR gs:[eax],al
    1429:	73 74                	jae    149f <sysEnter_Vector-0x12eb61>
    142b:	72 6f                	jb     149c <sysEnter_Vector-0x12eb64>
    142d:	75 6c                	jne    149b <sysEnter_Vector-0x12eb65>
    142f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1432:	01 00                	add    DWORD PTR [eax],eax
    1434:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1437:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    143e:	63 
    143f:	2e                   	cs
    1440:	68 00 02 00 00       	push   0x200
    1445:	74 69                	je     14b0 <sysEnter_Vector-0x12eb50>
    1447:	6d                   	ins    DWORD PTR es:[edi],dx
    1448:	65                   	gs
    1449:	2e                   	cs
    144a:	68 00 03 00 00       	push   0x300
    144f:	6d                   	ins    DWORD PTR es:[edi],dx
    1450:	61                   	popa   
    1451:	6c                   	ins    BYTE PTR es:[edi],dx
    1452:	6c                   	ins    BYTE PTR es:[edi],dx
    1453:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1454:	63 2e                	arpl   WORD PTR [esi],bp
    1456:	68 00 03 00 00       	push   0x300
    145b:	6c                   	ins    BYTE PTR es:[edi],dx
    145c:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1463:	4f                   	dec    edi
    1464:	53                   	push   ebx
    1465:	2e                   	cs
    1466:	68 00 03 00 00       	push   0x300
    146b:	00 00                	add    BYTE PTR [eax],al
    146d:	05 02 00 1c 00       	add    eax,0x1c0002
    1472:	30 03                	xor    BYTE PTR [ebx],al
    1474:	3b 01                	cmp    eax,DWORD PTR [ecx]
    1476:	08 2f                	or     BYTE PTR [edi],ch
    1478:	40                   	inc    eax
    1479:	00 02                	add    BYTE PTR [edx],al
    147b:	04 01                	add    al,0x1
    147d:	7a 00                	jp     147f <sysEnter_Vector-0x12eb81>
    147f:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1482:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1483:	59                   	pop    ecx
    1484:	59                   	pop    ecx
    1485:	75 c9                	jne    1450 <sysEnter_Vector-0x12ebb0>
    1487:	59                   	pop    ecx
    1488:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1489:	00 02                	add    BYTE PTR [edx],al
    148b:	04 02                	add    al,0x2
    148d:	06                   	push   es
    148e:	66                   	data16
    148f:	00 02                	add    BYTE PTR [edx],al
    1491:	04 03                	add    al,0x3
    1493:	66 06                	pushw  es
    1495:	59                   	pop    ecx
    1496:	00 02                	add    BYTE PTR [edx],al
    1498:	04 01                	add    al,0x1
    149a:	06                   	push   es
    149b:	74 06                	je     14a3 <sysEnter_Vector-0x12eb5d>
    149d:	75 91                	jne    1430 <sysEnter_Vector-0x12ebd0>
    149f:	3d 76 67 00 02       	cmp    eax,0x2006776
    14a4:	04 01                	add    al,0x1
    14a6:	06                   	push   es
    14a7:	58                   	pop    eax
    14a8:	00 02                	add    BYTE PTR [edx],al
    14aa:	04 02                	add    al,0x2
    14ac:	74 00                	je     14ae <sysEnter_Vector-0x12eb52>
    14ae:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    14b1:	58                   	pop    eax
    14b2:	06                   	push   es
    14b3:	3d 08 21 08 2f       	cmp    eax,0x2f082108
    14b8:	9f                   	lahf   
    14b9:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    14bd:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    14c0:	06                   	push   es
    14c1:	58                   	pop    eax
    14c2:	00 02                	add    BYTE PTR [edx],al
    14c4:	04 03                	add    al,0x3
    14c6:	58                   	pop    eax
    14c7:	00 02                	add    BYTE PTR [edx],al
    14c9:	04 04                	add    al,0x4
    14cb:	74 00                	je     14cd <sysEnter_Vector-0x12eb33>
    14cd:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    14d0:	58                   	pop    eax
    14d1:	06                   	push   es
    14d2:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    14d5:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    14d8:	06                   	push   es
    14d9:	66                   	data16
    14da:	00 02                	add    BYTE PTR [edx],al
    14dc:	04 02                	add    al,0x2
    14de:	58                   	pop    eax
    14df:	00 02                	add    BYTE PTR [edx],al
    14e1:	04 03                	add    al,0x3
    14e3:	58                   	pop    eax
    14e4:	06                   	push   es
    14e5:	67 76 59             	addr16 jbe 1541 <sysEnter_Vector-0x12eabf>
    14e8:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    14ec:	03 10                	add    edx,DWORD PTR [eax]
    14ee:	ac                   	lods   al,BYTE PTR ds:[esi]
    14ef:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    14f2:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    14f5:	20 67 75             	and    BYTE PTR [edi+0x75],ah
    14f8:	67 2f                	addr16 das 
    14fa:	67 00 02             	add    BYTE PTR [bp+si],al
    14fd:	04 01                	add    al,0x1
    14ff:	06                   	push   es
    1500:	66                   	data16
    1501:	00 02                	add    BYTE PTR [edx],al
    1503:	04 02                	add    al,0x2
    1505:	58                   	pop    eax
    1506:	00 02                	add    BYTE PTR [edx],al
    1508:	04 04                	add    al,0x4
    150a:	3c 06                	cmp    al,0x6
    150c:	59                   	pop    ecx
    150d:	2f                   	das    
    150e:	02 08                	add    cl,BYTE PTR [eax]
    1510:	00 01                	add    BYTE PTR [ecx],al
    1512:	01 43 00             	add    DWORD PTR [ebx+0x0],eax
    1515:	00 00                	add    BYTE PTR [eax],al
    1517:	02 00                	add    al,BYTE PTR [eax]
    1519:	2d 00 00 00 01       	sub    eax,0x1000000
    151e:	01 fb                	add    ebx,edi
    1520:	0e                   	push   cs
    1521:	0d 00 01 01 01       	or     eax,0x1010100
    1526:	01 00                	add    DWORD PTR [eax],eax
    1528:	00 00                	add    BYTE PTR [eax],al
    152a:	01 00                	add    DWORD PTR [eax],eax
    152c:	00 01                	add    BYTE PTR [ecx],al
    152e:	73 72                	jae    15a2 <sysEnter_Vector-0x12ea5e>
    1530:	63 2f                	arpl   WORD PTR [edi],bp
    1532:	73 74                	jae    15a8 <sysEnter_Vector-0x12ea58>
    1534:	72 69                	jb     159f <sysEnter_Vector-0x12ea61>
    1536:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1537:	67 73 00             	addr16 jae 153a <sysEnter_Vector-0x12eac6>
    153a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    153d:	72 70                	jb     15af <sysEnter_Vector-0x12ea51>
    153f:	61                   	popa   
    1540:	72 74                	jb     15b6 <sysEnter_Vector-0x12ea4a>
    1542:	73 2e                	jae    1572 <sysEnter_Vector-0x12ea8e>
    1544:	63 00                	arpl   WORD PTR [eax],ax
    1546:	01 00                	add    DWORD PTR [eax],eax
    1548:	00 00                	add    BYTE PTR [eax],al
    154a:	00 05 02 80 1d 00    	add    BYTE PTR ds:0x1d8002,al
    1550:	30 13                	xor    BYTE PTR [ebx],dl
    1552:	c9                   	leave  
    1553:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1554:	3d 02 02 00 01       	cmp    eax,0x1000202
    1559:	01 7f 01             	add    DWORD PTR [edi+0x1],edi
    155c:	00 00                	add    BYTE PTR [eax],al
    155e:	02 00                	add    al,BYTE PTR [eax]
    1560:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    1561:	00 00                	add    BYTE PTR [eax],al
    1563:	00 01                	add    BYTE PTR [ecx],al
    1565:	01 fb                	add    ebx,edi
    1567:	0e                   	push   cs
    1568:	0d 00 01 01 01       	or     eax,0x1010100
    156d:	01 00                	add    DWORD PTR [eax],eax
    156f:	00 00                	add    BYTE PTR [eax],al
    1571:	01 00                	add    DWORD PTR [eax],eax
    1573:	00 01                	add    BYTE PTR [ecx],al
    1575:	73 72                	jae    15e9 <sysEnter_Vector-0x12ea17>
    1577:	63 2f                	arpl   WORD PTR [edi],bp
    1579:	73 74                	jae    15ef <sysEnter_Vector-0x12ea11>
    157b:	72 69                	jb     15e6 <sysEnter_Vector-0x12ea1a>
    157d:	6e                   	outs   dx,BYTE PTR ds:[esi]
    157e:	67 73 00             	addr16 jae 1581 <sysEnter_Vector-0x12ea7f>
    1581:	2f                   	das    
    1582:	68 6f 6d 65 2f       	push   0x2f656d6f
    1587:	79 6f                	jns    15f8 <sysEnter_Vector-0x12ea08>
    1589:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1590:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1593:	73 73                	jae    1608 <sysEnter_Vector-0x12e9f8>
    1595:	2f                   	das    
    1596:	6c                   	ins    BYTE PTR es:[edi],dx
    1597:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    159e:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    15a4:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    15aa:	78 2d                	js     15d9 <sysEnter_Vector-0x12ea27>
    15ac:	67 6e                	outs   dx,BYTE PTR ds:[si]
    15ae:	75 2f                	jne    15df <sysEnter_Vector-0x12ea21>
    15b0:	35 2e 33 2e 30       	xor    eax,0x302e332e
    15b5:	2f                   	das    
    15b6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    15bd:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    15c0:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    15c4:	65 00 00             	add    BYTE PTR gs:[eax],al
    15c7:	73 74                	jae    163d <sysEnter_Vector-0x12e9c3>
    15c9:	72 74                	jb     163f <sysEnter_Vector-0x12e9c1>
    15cb:	6f                   	outs   dx,DWORD PTR ds:[esi]
    15cc:	6c                   	ins    BYTE PTR es:[edi],dx
    15cd:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    15d0:	01 00                	add    DWORD PTR [eax],eax
    15d2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    15d5:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    15dc:	63 
    15dd:	2e                   	cs
    15de:	68 00 02 00 00       	push   0x200
    15e3:	74 69                	je     164e <sysEnter_Vector-0x12e9b2>
    15e5:	6d                   	ins    DWORD PTR es:[edi],dx
    15e6:	65                   	gs
    15e7:	2e                   	cs
    15e8:	68 00 03 00 00       	push   0x300
    15ed:	6d                   	ins    DWORD PTR es:[edi],dx
    15ee:	61                   	popa   
    15ef:	6c                   	ins    BYTE PTR es:[edi],dx
    15f0:	6c                   	ins    BYTE PTR es:[edi],dx
    15f1:	6f                   	outs   dx,DWORD PTR ds:[esi]
    15f2:	63 2e                	arpl   WORD PTR [esi],bp
    15f4:	68 00 03 00 00       	push   0x300
    15f9:	6c                   	ins    BYTE PTR es:[edi],dx
    15fa:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1601:	4f                   	dec    edi
    1602:	53                   	push   ebx
    1603:	2e                   	cs
    1604:	68 00 03 00 00       	push   0x300
    1609:	00 00                	add    BYTE PTR [eax],al
    160b:	05 02 a0 1d 00       	add    eax,0x1da002
    1610:	30 03                	xor    BYTE PTR [ebx],al
    1612:	d7                   	xlat   BYTE PTR ds:[ebx]
    1613:	00 01                	add    BYTE PTR [ecx],al
    1615:	08 2f                	or     BYTE PTR [edi],ch
    1617:	40                   	inc    eax
    1618:	00 02                	add    BYTE PTR [edx],al
    161a:	04 01                	add    al,0x1
    161c:	7c 00                	jl     161e <sysEnter_Vector-0x12e9e2>
    161e:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1621:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1622:	59                   	pop    ecx
    1623:	59                   	pop    ecx
    1624:	75 c9                	jne    15ef <sysEnter_Vector-0x12ea11>
    1626:	59                   	pop    ecx
    1627:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1628:	00 02                	add    BYTE PTR [edx],al
    162a:	04 02                	add    al,0x2
    162c:	06                   	push   es
    162d:	66                   	data16
    162e:	00 02                	add    BYTE PTR [edx],al
    1630:	04 03                	add    al,0x3
    1632:	66 06                	pushw  es
    1634:	59                   	pop    ecx
    1635:	00 02                	add    BYTE PTR [edx],al
    1637:	04 01                	add    al,0x1
    1639:	06                   	push   es
    163a:	74 06                	je     1642 <sysEnter_Vector-0x12e9be>
    163c:	75 91                	jne    15cf <sysEnter_Vector-0x12ea31>
    163e:	3d 76 67 00 02       	cmp    eax,0x2006776
    1643:	04 01                	add    al,0x1
    1645:	06                   	push   es
    1646:	58                   	pop    eax
    1647:	00 02                	add    BYTE PTR [edx],al
    1649:	04 02                	add    al,0x2
    164b:	74 00                	je     164d <sysEnter_Vector-0x12e9b3>
    164d:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1650:	58                   	pop    eax
    1651:	06                   	push   es
    1652:	03 13                	add    edx,DWORD PTR [ebx]
    1654:	3c 00                	cmp    al,0x0
    1656:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1659:	06                   	push   es
    165a:	66                   	data16
    165b:	00 02                	add    BYTE PTR [edx],al
    165d:	04 02                	add    al,0x2
    165f:	74 00                	je     1661 <sysEnter_Vector-0x12e99f>
    1661:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1664:	06                   	push   es
    1665:	59                   	pop    ecx
    1666:	00 02                	add    BYTE PTR [edx],al
    1668:	04 04                	add    al,0x4
    166a:	08 3d 00 02 04 04    	or     BYTE PTR ds:0x4040200,bh
    1670:	f3 9f                	repz lahf 
    1672:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1676:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1679:	06                   	push   es
    167a:	58                   	pop    eax
    167b:	00 02                	add    BYTE PTR [edx],al
    167d:	04 03                	add    al,0x3
    167f:	58                   	pop    eax
    1680:	00 02                	add    BYTE PTR [edx],al
    1682:	04 04                	add    al,0x4
    1684:	74 00                	je     1686 <sysEnter_Vector-0x12e97a>
    1686:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1689:	58                   	pop    eax
    168a:	06                   	push   es
    168b:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    168e:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1691:	06                   	push   es
    1692:	66                   	data16
    1693:	00 02                	add    BYTE PTR [edx],al
    1695:	04 02                	add    al,0x2
    1697:	58                   	pop    eax
    1698:	00 02                	add    BYTE PTR [edx],al
    169a:	04 03                	add    al,0x3
    169c:	58                   	pop    eax
    169d:	06                   	push   es
    169e:	59                   	pop    ecx
    169f:	76 59                	jbe    16fa <sysEnter_Vector-0x12e906>
    16a1:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    16a5:	03 10                	add    edx,DWORD PTR [eax]
    16a7:	ac                   	lods   al,BYTE PTR ds:[esi]
    16a8:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    16ab:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    16ae:	20 67 00             	and    BYTE PTR [edi+0x0],ah
    16b1:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16b4:	06                   	push   es
    16b5:	66                   	data16
    16b6:	00 02                	add    BYTE PTR [edx],al
    16b8:	04 02                	add    al,0x2
    16ba:	74 00                	je     16bc <sysEnter_Vector-0x12e944>
    16bc:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    16bf:	58                   	pop    eax
    16c0:	06                   	push   es
    16c1:	4b                   	dec    ebx
    16c2:	67 2f                	addr16 das 
    16c4:	67 00 02             	add    BYTE PTR [bp+si],al
    16c7:	04 01                	add    al,0x1
    16c9:	06                   	push   es
    16ca:	66                   	data16
    16cb:	00 02                	add    BYTE PTR [edx],al
    16cd:	04 02                	add    al,0x2
    16cf:	58                   	pop    eax
    16d0:	00 02                	add    BYTE PTR [edx],al
    16d2:	04 04                	add    al,0x4
    16d4:	3c 06                	cmp    al,0x6
    16d6:	59                   	pop    ecx
    16d7:	2f                   	das    
    16d8:	02 08                	add    cl,BYTE PTR [eax]
    16da:	00 01                	add    BYTE PTR [ecx],al
    16dc:	01 d9                	add    ecx,ebx
    16de:	00 00                	add    BYTE PTR [eax],al
    16e0:	00 02                	add    BYTE PTR [edx],al
    16e2:	00 a7 00 00 00 01    	add    BYTE PTR [edi+0x1000000],ah
    16e8:	01 fb                	add    ebx,edi
    16ea:	0e                   	push   cs
    16eb:	0d 00 01 01 01       	or     eax,0x1010100
    16f0:	01 00                	add    DWORD PTR [eax],eax
    16f2:	00 00                	add    BYTE PTR [eax],al
    16f4:	01 00                	add    DWORD PTR [eax],eax
    16f6:	00 01                	add    BYTE PTR [ecx],al
    16f8:	73 72                	jae    176c <sysEnter_Vector-0x12e894>
    16fa:	63 2f                	arpl   WORD PTR [edi],bp
    16fc:	73 74                	jae    1772 <sysEnter_Vector-0x12e88e>
    16fe:	72 69                	jb     1769 <sysEnter_Vector-0x12e897>
    1700:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1701:	67 73 00             	addr16 jae 1704 <sysEnter_Vector-0x12e8fc>
    1704:	2f                   	das    
    1705:	68 6f 6d 65 2f       	push   0x2f656d6f
    170a:	79 6f                	jns    177b <sysEnter_Vector-0x12e885>
    170c:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1713:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1716:	73 73                	jae    178b <sysEnter_Vector-0x12e875>
    1718:	2f                   	das    
    1719:	6c                   	ins    BYTE PTR es:[edi],dx
    171a:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1721:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1727:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    172d:	78 2d                	js     175c <sysEnter_Vector-0x12e8a4>
    172f:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1731:	75 2f                	jne    1762 <sysEnter_Vector-0x12e89e>
    1733:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1738:	2f                   	das    
    1739:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1740:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1743:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1747:	65 00 00             	add    BYTE PTR gs:[eax],al
    174a:	73 74                	jae    17c0 <sysEnter_Vector-0x12e840>
    174c:	72 74                	jb     17c2 <sysEnter_Vector-0x12e83e>
    174e:	72 69                	jb     17b9 <sysEnter_Vector-0x12e847>
    1750:	6d                   	ins    DWORD PTR es:[edi],dx
    1751:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1754:	01 00                	add    DWORD PTR [eax],eax
    1756:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1759:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1760:	63 
    1761:	2e                   	cs
    1762:	68 00 02 00 00       	push   0x200
    1767:	74 69                	je     17d2 <sysEnter_Vector-0x12e82e>
    1769:	6d                   	ins    DWORD PTR es:[edi],dx
    176a:	65                   	gs
    176b:	2e                   	cs
    176c:	68 00 03 00 00       	push   0x300
    1771:	6d                   	ins    DWORD PTR es:[edi],dx
    1772:	61                   	popa   
    1773:	6c                   	ins    BYTE PTR es:[edi],dx
    1774:	6c                   	ins    BYTE PTR es:[edi],dx
    1775:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1776:	63 2e                	arpl   WORD PTR [esi],bp
    1778:	68 00 03 00 00       	push   0x300
    177d:	6c                   	ins    BYTE PTR es:[edi],dx
    177e:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1785:	4f                   	dec    edi
    1786:	53                   	push   ebx
    1787:	2e                   	cs
    1788:	68 00 03 00 00       	push   0x300
    178d:	00 00                	add    BYTE PTR [eax],al
    178f:	05 02 3c 1f 00       	add    eax,0x1f3c02
    1794:	30 15 08 13 bf 30    	xor    BYTE PTR ds:0x30bf1308,dl
    179a:	48                   	dec    eax
    179b:	b3 08                	mov    bl,0x8
    179d:	9f                   	lahf   
    179e:	30 b8 00 02 04 01    	xor    BYTE PTR [eax+0x1040200],bh
    17a4:	06                   	push   es
    17a5:	82                   	(bad)  
    17a6:	06                   	push   es
    17a7:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    17a8:	84 00                	test   BYTE PTR [eax],al
    17aa:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    17ad:	06                   	push   es
    17ae:	20 06                	and    BYTE PTR [esi],al
    17b0:	08 ca                	or     dl,cl
    17b2:	69 f3 d7 02 02 00    	imul   esi,ebx,0x202d7
    17b8:	01 01                	add    DWORD PTR [ecx],eax
    17ba:	d1 00                	rol    DWORD PTR [eax],1
    17bc:	00 00                	add    BYTE PTR [eax],al
    17be:	02 00                	add    al,BYTE PTR [eax]
    17c0:	9e                   	sahf   
    17c1:	00 00                	add    BYTE PTR [eax],al
    17c3:	00 01                	add    BYTE PTR [ecx],al
    17c5:	01 fb                	add    ebx,edi
    17c7:	0e                   	push   cs
    17c8:	0d 00 01 01 01       	or     eax,0x1010100
    17cd:	01 00                	add    DWORD PTR [eax],eax
    17cf:	00 00                	add    BYTE PTR [eax],al
    17d1:	01 00                	add    DWORD PTR [eax],eax
    17d3:	00 01                	add    BYTE PTR [ecx],al
    17d5:	73 72                	jae    1849 <sysEnter_Vector-0x12e7b7>
    17d7:	63 00                	arpl   WORD PTR [eax],ax
    17d9:	2f                   	das    
    17da:	68 6f 6d 65 2f       	push   0x2f656d6f
    17df:	79 6f                	jns    1850 <sysEnter_Vector-0x12e7b0>
    17e1:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    17e8:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    17eb:	73 73                	jae    1860 <sysEnter_Vector-0x12e7a0>
    17ed:	2f                   	das    
    17ee:	6c                   	ins    BYTE PTR es:[edi],dx
    17ef:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    17f6:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    17fc:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1802:	78 2d                	js     1831 <sysEnter_Vector-0x12e7cf>
    1804:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1806:	75 2f                	jne    1837 <sysEnter_Vector-0x12e7c9>
    1808:	35 2e 33 2e 30       	xor    eax,0x302e332e
    180d:	2f                   	das    
    180e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1815:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1818:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    181c:	65 00 00             	add    BYTE PTR gs:[eax],al
    181f:	73 74                	jae    1895 <sysEnter_Vector-0x12e76b>
    1821:	72 73                	jb     1896 <sysEnter_Vector-0x12e76a>
    1823:	74 72                	je     1897 <sysEnter_Vector-0x12e769>
    1825:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1828:	01 00                	add    DWORD PTR [eax],eax
    182a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    182d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1834:	63 
    1835:	2e                   	cs
    1836:	68 00 02 00 00       	push   0x200
    183b:	74 69                	je     18a6 <sysEnter_Vector-0x12e75a>
    183d:	6d                   	ins    DWORD PTR es:[edi],dx
    183e:	65                   	gs
    183f:	2e                   	cs
    1840:	68 00 03 00 00       	push   0x300
    1845:	6d                   	ins    DWORD PTR es:[edi],dx
    1846:	61                   	popa   
    1847:	6c                   	ins    BYTE PTR es:[edi],dx
    1848:	6c                   	ins    BYTE PTR es:[edi],dx
    1849:	6f                   	outs   dx,DWORD PTR ds:[esi]
    184a:	63 2e                	arpl   WORD PTR [esi],bp
    184c:	68 00 03 00 00       	push   0x300
    1851:	6c                   	ins    BYTE PTR es:[edi],dx
    1852:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1859:	4f                   	dec    edi
    185a:	53                   	push   ebx
    185b:	2e                   	cs
    185c:	68 00 03 00 00       	push   0x300
    1861:	00 00                	add    BYTE PTR [eax],al
    1863:	05 02 f4 1f 00       	add    eax,0x1ff402
    1868:	30 03                	xor    BYTE PTR [ebx],al
    186a:	33 01                	xor    eax,DWORD PTR [ecx]
    186c:	ec                   	in     al,dx
    186d:	3d 75 5b cb 3e       	cmp    eax,0x3ecb5b75
    1872:	75 5a                	jne    18ce <sysEnter_Vector-0x12e732>
    1874:	08 3f                	or     BYTE PTR [edi],bh
    1876:	2c 23                	sub    al,0x23
    1878:	03 75 58             	add    esi,DWORD PTR [ebp+0x58]
    187b:	1e                   	push   ds
    187c:	00 02                	add    BYTE PTR [edx],al
    187e:	04 01                	add    al,0x1
    1880:	06                   	push   es
    1881:	4a                   	dec    edx
    1882:	06                   	push   es
    1883:	03 0f                	add    ecx,DWORD PTR [edi]
    1885:	9e                   	sahf   
    1886:	59                   	pop    ecx
    1887:	4d                   	dec    ebp
    1888:	c9                   	leave  
    1889:	d7                   	xlat   BYTE PTR ds:[ebx]
    188a:	02 02                	add    al,BYTE PTR [edx]
    188c:	00 01                	add    BYTE PTR [ecx],al
    188e:	01 29                	add    DWORD PTR [ecx],ebp
    1890:	03 00                	add    eax,DWORD PTR [eax]
    1892:	00 02                	add    BYTE PTR [edx],al
    1894:	00 cc                	add    ah,cl
    1896:	00 00                	add    BYTE PTR [eax],al
    1898:	00 01                	add    BYTE PTR [ecx],al
    189a:	01 fb                	add    ebx,edi
    189c:	0e                   	push   cs
    189d:	0d 00 01 01 01       	or     eax,0x1010100
    18a2:	01 00                	add    DWORD PTR [eax],eax
    18a4:	00 00                	add    BYTE PTR [eax],al
    18a6:	01 00                	add    DWORD PTR [eax],eax
    18a8:	00 01                	add    BYTE PTR [ecx],al
    18aa:	73 72                	jae    191e <sysEnter_Vector-0x12e6e2>
    18ac:	63 00                	arpl   WORD PTR [eax],ax
    18ae:	2f                   	das    
    18af:	68 6f 6d 65 2f       	push   0x2f656d6f
    18b4:	79 6f                	jns    1925 <sysEnter_Vector-0x12e6db>
    18b6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    18bd:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    18c0:	73 73                	jae    1935 <sysEnter_Vector-0x12e6cb>
    18c2:	2f                   	das    
    18c3:	6c                   	ins    BYTE PTR es:[edi],dx
    18c4:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    18cb:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    18d1:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    18d7:	78 2d                	js     1906 <sysEnter_Vector-0x12e6fa>
    18d9:	67 6e                	outs   dx,BYTE PTR ds:[si]
    18db:	75 2f                	jne    190c <sysEnter_Vector-0x12e6f4>
    18dd:	35 2e 33 2e 30       	xor    eax,0x302e332e
    18e2:	2f                   	das    
    18e3:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    18ea:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    18ed:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    18f1:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    18f4:	2e                   	cs
    18f5:	2f                   	das    
    18f6:	2e                   	cs
    18f7:	2e                   	cs
    18f8:	2f                   	das    
    18f9:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    18fd:	6a 2f                	push   0x2f
    18ff:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    1902:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    1909:	6e                   	outs   dx,BYTE PTR ds:[esi]
    190a:	65                   	gs
    190b:	6c                   	ins    BYTE PTR es:[edi],dx
    190c:	2f                   	das    
    190d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1914:	00 00                	add    BYTE PTR [eax],al
    1916:	74 69                	je     1981 <sysEnter_Vector-0x12e67f>
    1918:	6d                   	ins    DWORD PTR es:[edi],dx
    1919:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    191d:	01 00                	add    DWORD PTR [eax],eax
    191f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1922:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1929:	63 
    192a:	2e                   	cs
    192b:	68 00 02 00 00       	push   0x200
    1930:	74 69                	je     199b <sysEnter_Vector-0x12e665>
    1932:	6d                   	ins    DWORD PTR es:[edi],dx
    1933:	65                   	gs
    1934:	2e                   	cs
    1935:	68 00 03 00 00       	push   0x300
    193a:	6d                   	ins    DWORD PTR es:[edi],dx
    193b:	61                   	popa   
    193c:	6c                   	ins    BYTE PTR es:[edi],dx
    193d:	6c                   	ins    BYTE PTR es:[edi],dx
    193e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    193f:	63 2e                	arpl   WORD PTR [esi],bp
    1941:	68 00 03 00 00       	push   0x300
    1946:	6c                   	ins    BYTE PTR es:[edi],dx
    1947:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    194e:	4f                   	dec    edi
    194f:	53                   	push   ebx
    1950:	2e                   	cs
    1951:	68 00 03 00 00       	push   0x300
    1956:	73 79                	jae    19d1 <sysEnter_Vector-0x12e62f>
    1958:	73 63                	jae    19bd <sysEnter_Vector-0x12e643>
    195a:	61                   	popa   
    195b:	6c                   	ins    BYTE PTR es:[edi],dx
    195c:	6c                   	ins    BYTE PTR es:[edi],dx
    195d:	73 2e                	jae    198d <sysEnter_Vector-0x12e673>
    195f:	68 00 04 00 00       	push   0x400
    1964:	00 00                	add    BYTE PTR [eax],al
    1966:	05 02 80 20 00       	add    eax,0x208002
    196b:	30 03                	xor    BYTE PTR [ebx],al
    196d:	16                   	push   ss
    196e:	01 08                	add    DWORD PTR [eax],ecx
    1970:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
    1973:	f3 3d 77 08 21 84    	repz cmp eax,0x84210877
    1979:	76 02                	jbe    197d <sysEnter_Vector-0x12e683>
    197b:	24 13                	and    al,0x13
    197d:	08 22                	or     BYTE PTR [edx],ah
    197f:	02 2e                	add    ch,BYTE PTR [esi]
    1981:	13 02                	adc    eax,DWORD PTR [edx]
    1983:	2f                   	das    
    1984:	13 08                	adc    ecx,DWORD PTR [eax]
    1986:	67 02 2d             	add    ch,BYTE PTR [di]
    1989:	13 2f                	adc    ebp,DWORD PTR [edi]
    198b:	00 02                	add    BYTE PTR [edx],al
    198d:	04 01                	add    al,0x1
    198f:	06                   	push   es
    1990:	9e                   	sahf   
    1991:	00 02                	add    BYTE PTR [edx],al
    1993:	04 04                	add    al,0x4
    1995:	02 23                	add    ah,BYTE PTR [ebx]
    1997:	12 00                	adc    al,BYTE PTR [eax]
    1999:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    19a0:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    19a3:	74 00                	je     19a5 <sysEnter_Vector-0x12e65b>
    19a5:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    19a8:	58                   	pop    eax
    19a9:	00 02                	add    BYTE PTR [edx],al
    19ab:	04 08                	add    al,0x8
    19ad:	06                   	push   es
    19ae:	3d 48 00 02 04       	cmp    eax,0x4020048
    19b3:	01 06                	add    DWORD PTR [esi],eax
    19b5:	9e                   	sahf   
    19b6:	00 02                	add    BYTE PTR [edx],al
    19b8:	04 04                	add    al,0x4
    19ba:	02 23                	add    ah,BYTE PTR [ebx]
    19bc:	12 00                	adc    al,BYTE PTR [eax]
    19be:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    19c5:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    19c8:	74 00                	je     19ca <sysEnter_Vector-0x12e636>
    19ca:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    19cd:	58                   	pop    eax
    19ce:	06                   	push   es
    19cf:	94                   	xchg   esp,eax
    19d0:	e5 91                	in     eax,0x91
    19d2:	9f                   	lahf   
    19d3:	59                   	pop    ecx
    19d4:	00 02                	add    BYTE PTR [edx],al
    19d6:	04 01                	add    al,0x1
    19d8:	06                   	push   es
    19d9:	9e                   	sahf   
    19da:	00 02                	add    BYTE PTR [edx],al
    19dc:	04 04                	add    al,0x4
    19de:	02 23                	add    ah,BYTE PTR [ebx]
    19e0:	12 00                	adc    al,BYTE PTR [eax]
    19e2:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    19e9:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    19ec:	74 00                	je     19ee <sysEnter_Vector-0x12e612>
    19ee:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    19f1:	58                   	pop    eax
    19f2:	00 02                	add    BYTE PTR [edx],al
    19f4:	04 08                	add    al,0x8
    19f6:	06                   	push   es
    19f7:	08 9f e2 00 02 04    	or     BYTE PTR [edi+0x40200e2],bl
    19fd:	01 06                	add    DWORD PTR [esi],eax
    19ff:	9e                   	sahf   
    1a00:	00 02                	add    BYTE PTR [edx],al
    1a02:	04 04                	add    al,0x4
    1a04:	02 23                	add    ah,BYTE PTR [ebx]
    1a06:	12 00                	adc    al,BYTE PTR [eax]
    1a08:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1a0f:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a12:	74 00                	je     1a14 <sysEnter_Vector-0x12e5ec>
    1a14:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1a17:	58                   	pop    eax
    1a18:	06                   	push   es
    1a19:	08 f6                	or     dh,dh
    1a1b:	d7                   	xlat   BYTE PTR ds:[ebx]
    1a1c:	9f                   	lahf   
    1a1d:	3d 68 08 16 08       	cmp    eax,0x8160868
    1a22:	3d 08 4b 5a 08       	cmp    eax,0x85a4b08
    1a27:	15 08 3d 08 3d       	adc    eax,0x3d083d08
    1a2c:	5a                   	pop    edx
    1a2d:	08 44 02 2e          	or     BYTE PTR [edx+eax*1+0x2e],al
    1a31:	13 02                	adc    eax,DWORD PTR [edx]
    1a33:	3a 13                	cmp    dl,BYTE PTR [ebx]
    1a35:	91                   	xchg   ecx,eax
    1a36:	c9                   	leave  
    1a37:	e6 02                	out    0x2,al
    1a39:	2f                   	das    
    1a3a:	13 02                	adc    eax,DWORD PTR [edx]
    1a3c:	3c 13                	cmp    al,0x13
    1a3e:	9f                   	lahf   
    1a3f:	e5 e6                	in     eax,0xe6
    1a41:	08 c9                	or     cl,cl
    1a43:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    1a46:	9f                   	lahf   
    1a47:	e5 4c                	in     eax,0x4c
    1a49:	02 29                	add    ch,BYTE PTR [ecx]
    1a4b:	13 02                	adc    eax,DWORD PTR [edx]
    1a4d:	2b 13                	sub    edx,DWORD PTR [ebx]
    1a4f:	9f                   	lahf   
    1a50:	e5 e6                	in     eax,0xe6
    1a52:	bb 59 08 83 e5       	mov    ebx,0xe5830859
    1a57:	a0 00 02 04 01       	mov    al,ds:0x1040200
    1a5c:	06                   	push   es
    1a5d:	c8 00 02 04          	enter  0x200,0x4
    1a61:	04 02                	add    al,0x2
    1a63:	2c 12                	sub    al,0x12
    1a65:	00 02                	add    BYTE PTR [edx],al
    1a67:	04 05                	add    al,0x5
    1a69:	02 2f                	add    ch,BYTE PTR [edi]
    1a6b:	12 00                	adc    al,BYTE PTR [eax]
    1a6d:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a70:	74 00                	je     1a72 <sysEnter_Vector-0x12e58e>
    1a72:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1a75:	58                   	pop    eax
    1a76:	06                   	push   es
    1a77:	08 99 a5 59 00 02    	or     BYTE PTR [ecx+0x20059a5],bl
    1a7d:	04 01                	add    al,0x1
    1a7f:	06                   	push   es
    1a80:	c8 00 02 04          	enter  0x200,0x4
    1a84:	04 02                	add    al,0x2
    1a86:	2c 12                	sub    al,0x12
    1a88:	00 02                	add    BYTE PTR [edx],al
    1a8a:	04 05                	add    al,0x5
    1a8c:	02 2f                	add    ch,BYTE PTR [edi]
    1a8e:	12 00                	adc    al,BYTE PTR [eax]
    1a90:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a93:	74 00                	je     1a95 <sysEnter_Vector-0x12e56b>
    1a95:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1a98:	58                   	pop    eax
    1a99:	00 02                	add    BYTE PTR [edx],al
    1a9b:	04 08                	add    al,0x8
    1a9d:	06                   	push   es
    1a9e:	08 9f 08 91 9f e0    	or     BYTE PTR [edi-0x1f606ef8],bl
    1aa4:	00 02                	add    BYTE PTR [edx],al
    1aa6:	04 01                	add    al,0x1
    1aa8:	06                   	push   es
    1aa9:	c8 00 02 04          	enter  0x200,0x4
    1aad:	04 02                	add    al,0x2
    1aaf:	2c 12                	sub    al,0x12
    1ab1:	00 02                	add    BYTE PTR [edx],al
    1ab3:	04 05                	add    al,0x5
    1ab5:	02 2f                	add    ch,BYTE PTR [edi]
    1ab7:	12 00                	adc    al,BYTE PTR [eax]
    1ab9:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1abc:	74 00                	je     1abe <sysEnter_Vector-0x12e542>
    1abe:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1ac1:	58                   	pop    eax
    1ac2:	06                   	push   es
    1ac3:	08 f9                	or     cl,bh
    1ac5:	bb 75 00 02 04       	mov    ebx,0x4020075
    1aca:	01 06                	add    DWORD PTR [esi],eax
    1acc:	08 2e                	or     BYTE PTR [esi],ch
    1ace:	06                   	push   es
    1acf:	9f                   	lahf   
    1ad0:	75 75                	jne    1b47 <sysEnter_Vector-0x12e4b9>
    1ad2:	7b d8                	jnp    1aac <sysEnter_Vector-0x12e554>
    1ad4:	00 02                	add    BYTE PTR [edx],al
    1ad6:	04 01                	add    al,0x1
    1ad8:	06                   	push   es
    1ad9:	c8 06 75 e5          	enter  0x7506,0xe5
    1add:	00 02                	add    BYTE PTR [edx],al
    1adf:	04 01                	add    al,0x1
    1ae1:	06                   	push   es
    1ae2:	02 22                	add    ah,BYTE PTR [edx]
    1ae4:	12 06                	adc    al,BYTE PTR [esi]
    1ae6:	4b                   	dec    ebx
    1ae7:	00 02                	add    BYTE PTR [edx],al
    1ae9:	04 01                	add    al,0x1
    1aeb:	06                   	push   es
    1aec:	08 ba 00 02 04 03    	or     BYTE PTR [edx+0x3040200],bh
    1af2:	02 22                	add    ah,BYTE PTR [edx]
    1af4:	12 00                	adc    al,BYTE PTR [eax]
    1af6:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1af9:	74 00                	je     1afb <sysEnter_Vector-0x12e505>
    1afb:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1afe:	58                   	pop    eax
    1aff:	00 02                	add    BYTE PTR [edx],al
    1b01:	04 06                	add    al,0x6
    1b03:	06                   	push   es
    1b04:	59                   	pop    ecx
    1b05:	00 02                	add    BYTE PTR [edx],al
    1b07:	04 01                	add    al,0x1
    1b09:	06                   	push   es
    1b0a:	02 40 12             	add    al,BYTE PTR [eax+0x12]
    1b0d:	00 02                	add    BYTE PTR [edx],al
    1b0f:	04 03                	add    al,0x3
    1b11:	02 42 12             	add    al,BYTE PTR [edx+0x12]
    1b14:	00 02                	add    BYTE PTR [edx],al
    1b16:	04 04                	add    al,0x4
    1b18:	74 00                	je     1b1a <sysEnter_Vector-0x12e4e6>
    1b1a:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1b1d:	58                   	pop    eax
    1b1e:	00 02                	add    BYTE PTR [edx],al
    1b20:	04 06                	add    al,0x6
    1b22:	06                   	push   es
    1b23:	59                   	pop    ecx
    1b24:	00 02                	add    BYTE PTR [edx],al
    1b26:	04 01                	add    al,0x1
    1b28:	06                   	push   es
    1b29:	02 43 12             	add    al,BYTE PTR [ebx+0x12]
    1b2c:	00 02                	add    BYTE PTR [edx],al
    1b2e:	04 03                	add    al,0x3
    1b30:	02 48 12             	add    cl,BYTE PTR [eax+0x12]
    1b33:	00 02                	add    BYTE PTR [edx],al
    1b35:	04 04                	add    al,0x4
    1b37:	74 00                	je     1b39 <sysEnter_Vector-0x12e4c7>
    1b39:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1b3c:	58                   	pop    eax
    1b3d:	00 02                	add    BYTE PTR [edx],al
    1b3f:	04 06                	add    al,0x6
    1b41:	06                   	push   es
    1b42:	5a                   	pop    edx
    1b43:	00 02                	add    BYTE PTR [edx],al
    1b45:	04 06                	add    al,0x6
    1b47:	c9                   	leave  
    1b48:	2f                   	das    
    1b49:	00 02                	add    BYTE PTR [edx],al
    1b4b:	04 01                	add    al,0x1
    1b4d:	06                   	push   es
    1b4e:	9e                   	sahf   
    1b4f:	00 02                	add    BYTE PTR [edx],al
    1b51:	04 04                	add    al,0x4
    1b53:	02 23                	add    ah,BYTE PTR [ebx]
    1b55:	12 00                	adc    al,BYTE PTR [eax]
    1b57:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1b5e:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1b61:	74 00                	je     1b63 <sysEnter_Vector-0x12e49d>
    1b63:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1b66:	58                   	pop    eax
    1b67:	00 02                	add    BYTE PTR [edx],al
    1b69:	04 08                	add    al,0x8
    1b6b:	06                   	push   es
    1b6c:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    1b6f:	e8 bb 00 02 04       	call   4021c2f <sysEnter_Vector+0x3ef1c2f>
    1b74:	01 06                	add    DWORD PTR [esi],eax
    1b76:	ba 06 4b 68 91       	mov    edx,0x91684b06
    1b7b:	02 31                	add    dh,BYTE PTR [ecx]
    1b7d:	14 02                	adc    al,0x2
    1b7f:	2c 14                	sub    al,0x14
    1b81:	00 02                	add    BYTE PTR [edx],al
    1b83:	04 01                	add    al,0x1
    1b85:	06                   	push   es
    1b86:	02 29                	add    ch,BYTE PTR [ecx]
    1b88:	12 06                	adc    al,BYTE PTR [esi]
    1b8a:	4b                   	dec    ebx
    1b8b:	bd 00 02 04 01       	mov    ebp,0x1040200
    1b90:	06                   	push   es
    1b91:	ba 00 02 04 03       	mov    edx,0x3040200
    1b96:	06                   	push   es
    1b97:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    1b9a:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
    1b9d:	81 4b e5 4c ae 9f ae 	or     DWORD PTR [ebx-0x1b],0xae9fae4c
    1ba4:	77 00                	ja     1ba6 <sysEnter_Vector-0x12e45a>
    1ba6:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1ba9:	06                   	push   es
    1baa:	82                   	(bad)  
    1bab:	06                   	push   es
    1bac:	4b                   	dec    ebx
    1bad:	68 00 02 04 01       	push   0x1040200
    1bb2:	06                   	push   es
    1bb3:	66 06                	pushw  es
    1bb5:	85 3d 02 08 00 01    	test   DWORD PTR ds:0x1000802,edi
    1bbb:	01                   	.byte 0x1

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c                   	ins    BYTE PTR es:[edi],dx
   1:	6f                   	outs   dx,DWORD PTR ds:[esi]
   2:	6e                   	outs   dx,BYTE PTR ds:[esi]
   3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
   7:	6e                   	outs   dx,BYTE PTR ds:[esi]
   8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
   c:	74 00                	je     e <sysEnter_Vector-0x12fff2>
   e:	73 68                	jae    78 <sysEnter_Vector-0x12ff88>
  10:	6f                   	outs   dx,DWORD PTR ds:[esi]
  11:	72 74                	jb     87 <sysEnter_Vector-0x12ff79>
  13:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
  16:	73 69                	jae    81 <sysEnter_Vector-0x12ff7f>
  18:	67 6e                	outs   dx,BYTE PTR ds:[si]
  1a:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  1f:	74 00                	je     21 <sysEnter_Vector-0x12ffdf>
  21:	73 74                	jae    97 <sysEnter_Vector-0x12ff69>
  23:	72 63                	jb     88 <sysEnter_Vector-0x12ff78>
  25:	68 72 00 70 72       	push   0x72700072
  2a:	6f                   	outs   dx,DWORD PTR ds:[esi]
  2b:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
  2e:	73 45                	jae    75 <sysEnter_Vector-0x12ff8b>
  30:	6e                   	outs   dx,BYTE PTR ds:[esi]
  31:	76 70                	jbe    a3 <sysEnter_Vector-0x12ff5d>
  33:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  37:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
  3b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  3c:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
  40:	73 69                	jae    ab <sysEnter_Vector-0x12ff55>
  42:	67 6e                	outs   dx,BYTE PTR ds:[si]
  44:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  49:	74 00                	je     4b <sysEnter_Vector-0x12ffb5>
  4b:	68 65 61 70 42       	push   0x42706165
  50:	61                   	popa   
  51:	73 65                	jae    b8 <sysEnter_Vector-0x12ff48>
  53:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
  57:	63 54 5a 00          	arpl   WORD PTR [edx+ebx*2+0x0],dx
  5b:	75 6e                	jne    cb <sysEnter_Vector-0x12ff35>
  5d:	73 69                	jae    c8 <sysEnter_Vector-0x12ff38>
  5f:	67 6e                	outs   dx,BYTE PTR ds:[si]
  61:	65 64 20 63 68       	gs and BYTE PTR fs:gs:[ebx+0x68],ah
  66:	61                   	popa   
  67:	72 00                	jb     69 <sysEnter_Vector-0x12ff97>
  69:	74 69                	je     d4 <sysEnter_Vector-0x12ff2c>
  6b:	6d                   	ins    DWORD PTR es:[edi],dx
  6c:	65                   	gs
  6d:	5f                   	pop    edi
  6e:	74 00                	je     70 <sysEnter_Vector-0x12ff90>
  70:	75 69                	jne    db <sysEnter_Vector-0x12ff25>
  72:	6e                   	outs   dx,BYTE PTR ds:[esi]
  73:	74 33                	je     a8 <sysEnter_Vector-0x12ff58>
  75:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
  78:	00 2f                	add    BYTE PTR [edi],ch
  7a:	68 6f 6d 65 2f       	push   0x2f656d6f
  7f:	79 6f                	jns    f0 <sysEnter_Vector-0x12ff10>
  81:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
  88:	6f                   	outs   dx,DWORD PTR ds:[esi]
  89:	73 2f                	jae    ba <sysEnter_Vector-0x12ff46>
  8b:	61                   	popa   
  8c:	70 72                	jo     100 <sysEnter_Vector-0x12ff00>
  8e:	6f                   	outs   dx,DWORD PTR ds:[esi]
  8f:	6a 2f                	push   0x2f
  91:	6c                   	ins    BYTE PTR es:[edi],dx
  92:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
  99:	4f                   	dec    edi
  9a:	53                   	push   ebx
  9b:	00 5f 42             	add    BYTE PTR [edi+0x42],bl
  9e:	6f                   	outs   dx,DWORD PTR ds:[esi]
  9f:	6f                   	outs   dx,DWORD PTR ds:[esi]
  a0:	6c                   	ins    BYTE PTR es:[edi],dx
  a1:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  a5:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
  a9:	75 62                	jne    10d <sysEnter_Vector-0x12fef3>
  ab:	6c                   	ins    BYTE PTR es:[edi],dx
  ac:	65 00 73 74          	add    BYTE PTR gs:[ebx+0x74],dh
  b0:	72 63                	jb     115 <sysEnter_Vector-0x12feeb>
  b2:	68 72 49 00 68       	push   0x68004972
  b7:	65                   	gs
  b8:	61                   	popa   
  b9:	70 43                	jo     fe <sysEnter_Vector-0x12ff02>
  bb:	75 72                	jne    12f <sysEnter_Vector-0x12fed1>
  bd:	72 00                	jb     bf <sysEnter_Vector-0x12ff41>
  bf:	2e                   	cs
  c0:	2e                   	cs
  c1:	2f                   	das    
  c2:	2e                   	cs
  c3:	2e                   	cs
  c4:	2f                   	das    
  c5:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
  c9:	6a 2f                	push   0x2f
  cb:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
  ce:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
  d5:	63 2f                	arpl   WORD PTR [edi],bp
  d7:	73 74                	jae    14d <sysEnter_Vector-0x12feb3>
  d9:	72 69                	jb     144 <sysEnter_Vector-0x12febc>
  db:	6e                   	outs   dx,BYTE PTR ds:[esi]
  dc:	67 73 2f             	addr16 jae 10e <sysEnter_Vector-0x12fef2>
  df:	73 74                	jae    155 <sysEnter_Vector-0x12feab>
  e1:	72 63                	jb     146 <sysEnter_Vector-0x12feba>
  e3:	68 72 2e 63 00       	push   0x632e72
  e8:	73 69                	jae    153 <sysEnter_Vector-0x12fead>
  ea:	7a 65                	jp     151 <sysEnter_Vector-0x12feaf>
  ec:	74 79                	je     167 <sysEnter_Vector-0x12fe99>
  ee:	70 65                	jo     155 <sysEnter_Vector-0x12feab>
  f0:	00 73 68             	add    BYTE PTR [ebx+0x68],dh
  f3:	6f                   	outs   dx,DWORD PTR ds:[esi]
  f4:	72 74                	jb     16a <sysEnter_Vector-0x12fe96>
  f6:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
  f9:	74 00                	je     fb <sysEnter_Vector-0x12ff05>
  fb:	47                   	inc    edi
  fc:	4e                   	dec    esi
  fd:	55                   	push   ebp
  fe:	20 43 31             	and    BYTE PTR [ebx+0x31],al
 101:	31 20                	xor    DWORD PTR [eax],esp
 103:	35 2e 33 2e 30       	xor    eax,0x302e332e
 108:	20 2d 6d 61 73 6d    	and    BYTE PTR ds:0x6d73616d,ch
 10e:	3d 69 6e 74 65       	cmp    eax,0x65746e69
 113:	6c                   	ins    BYTE PTR es:[edi],dx
 114:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
 11a:	65                   	gs
 11b:	3d 67 65 6e 65       	cmp    eax,0x656e6567
 120:	72 69                	jb     18b <sysEnter_Vector-0x12fe75>
 122:	63 20                	arpl   WORD PTR [eax],sp
 124:	2d 6d 61 72 63       	sub    eax,0x6372616d
 129:	68 3d 70 65 6e       	push   0x6e65703d
 12e:	74 69                	je     199 <sysEnter_Vector-0x12fe67>
 130:	75 6d                	jne    19f <sysEnter_Vector-0x12fe61>
 132:	70 72                	jo     1a6 <sysEnter_Vector-0x12fe5a>
 134:	6f                   	outs   dx,DWORD PTR ds:[esi]
 135:	20 2d 67 20 2d 66    	and    BYTE PTR ds:0x662d2067,ch
 13b:	66                   	data16
 13c:	72 65                	jb     1a3 <sysEnter_Vector-0x12fe5d>
 13e:	65                   	gs
 13f:	73 74                	jae    1b5 <sysEnter_Vector-0x12fe4b>
 141:	61                   	popa   
 142:	6e                   	outs   dx,BYTE PTR ds:[esi]
 143:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
 14a:	76 
 14b:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
 152:	74 79                	je     1cd <sysEnter_Vector-0x12fe33>
 154:	3d 68 69 64 64       	cmp    eax,0x64646968
 159:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 15b:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
 161:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 164:	61                   	popa   
 165:	70 45                	jo     1ac <sysEnter_Vector-0x12fe54>
 167:	6e                   	outs   dx,BYTE PTR ds:[esi]
 168:	64 00 73 74          	add    BYTE PTR fs:[ebx+0x74],dh
 16c:	72 63                	jb     1d1 <sysEnter_Vector-0x12fe2f>
 16e:	73 70                	jae    1e0 <sysEnter_Vector-0x12fe20>
 170:	6e                   	outs   dx,BYTE PTR ds:[esi]
 171:	49                   	dec    ecx
 172:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 175:	72 63                	jb     1da <sysEnter_Vector-0x12fe26>
 177:	73 70                	jae    1e9 <sysEnter_Vector-0x12fe17>
 179:	6e                   	outs   dx,BYTE PTR ds:[esi]
 17a:	00 2e                	add    BYTE PTR [esi],ch
 17c:	2e                   	cs
 17d:	2f                   	das    
 17e:	2e                   	cs
 17f:	2e                   	cs
 180:	2f                   	das    
 181:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 185:	6a 2f                	push   0x2f
 187:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 18a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 191:	63 2f                	arpl   WORD PTR [edi],bp
 193:	73 74                	jae    209 <sysEnter_Vector-0x12fdf7>
 195:	72 69                	jb     200 <sysEnter_Vector-0x12fe00>
 197:	6e                   	outs   dx,BYTE PTR ds:[esi]
 198:	67 73 2f             	addr16 jae 1ca <sysEnter_Vector-0x12fe36>
 19b:	73 74                	jae    211 <sysEnter_Vector-0x12fdef>
 19d:	72 63                	jb     202 <sysEnter_Vector-0x12fdfe>
 19f:	73 70                	jae    211 <sysEnter_Vector-0x12fdef>
 1a1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1a2:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 1a5:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
 1a8:	72 73                	jb     21d <sysEnter_Vector-0x12fde3>
 1aa:	00 2e                	add    BYTE PTR [esi],ch
 1ac:	2e                   	cs
 1ad:	2f                   	das    
 1ae:	2e                   	cs
 1af:	2e                   	cs
 1b0:	2f                   	das    
 1b1:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 1b5:	6a 2f                	push   0x2f
 1b7:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 1ba:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 1c1:	63 2f                	arpl   WORD PTR [edi],bp
 1c3:	73 74                	jae    239 <sysEnter_Vector-0x12fdc7>
 1c5:	72 69                	jb     230 <sysEnter_Vector-0x12fdd0>
 1c7:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1c8:	67 73 2f             	addr16 jae 1fa <sysEnter_Vector-0x12fe06>
 1cb:	73 74                	jae    241 <sysEnter_Vector-0x12fdbf>
 1cd:	72 74                	jb     243 <sysEnter_Vector-0x12fdbd>
 1cf:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1d0:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
 1d3:	00 64 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],ah
 1d7:	69 6d 00 6c 61 73 74 	imul   ebp,DWORD PTR [ebp+0x0],0x7473616c
 1de:	73 00                	jae    1e0 <sysEnter_Vector-0x12fe20>
 1e0:	73 74                	jae    256 <sysEnter_Vector-0x12fdaa>
 1e2:	72 74                	jb     258 <sysEnter_Vector-0x12fda8>
 1e4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1e5:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 1e8:	74 6f                	je     259 <sysEnter_Vector-0x12fda7>
 1ea:	61                   	popa   
 1eb:	49                   	dec    ecx
 1ec:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 1ef:	63 2f                	arpl   WORD PTR [edi],bp
 1f1:	61                   	popa   
 1f2:	73 63                	jae    257 <sysEnter_Vector-0x12fda9>
 1f4:	69 69 2e 63 00 69 74 	imul   ebp,DWORD PTR [ecx+0x2e],0x74690063
 1fb:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1fc:	61                   	popa   
 1fd:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
 200:	6f                   	outs   dx,DWORD PTR ds:[esi]
 201:	69 00 72 65 76 65    	imul   eax,DWORD PTR [eax],0x65766572
 207:	72 73                	jb     27c <sysEnter_Vector-0x12fd84>
 209:	65                   	gs
 20a:	49                   	dec    ecx
 20b:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 20e:	67 6e                	outs   dx,BYTE PTR ds:[si]
 210:	00 76 61             	add    BYTE PTR [esi+0x61],dh
 213:	6c                   	ins    BYTE PTR es:[edi],dx
 214:	75 65                	jne    27b <sysEnter_Vector-0x12fd85>
 216:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 21a:	74 50                	je     26c <sysEnter_Vector-0x12fd94>
 21c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 21d:	70 75                	jo     294 <sysEnter_Vector-0x12fd6c>
 21f:	6c                   	ins    BYTE PTR es:[edi],dx
 220:	61                   	popa   
 221:	74 65                	je     288 <sysEnter_Vector-0x12fd78>
 223:	64 00 73 65          	add    BYTE PTR fs:[ebx+0x65],dh
 227:	74 65                	je     28e <sysEnter_Vector-0x12fd72>
 229:	6e                   	outs   dx,BYTE PTR ds:[esi]
 22a:	76 00                	jbe    22c <sysEnter_Vector-0x12fdd4>
 22c:	67                   	addr16
 22d:	65                   	gs
 22e:	74 65                	je     295 <sysEnter_Vector-0x12fd6b>
 230:	6e                   	outs   dx,BYTE PTR ds:[esi]
 231:	76 00                	jbe    233 <sysEnter_Vector-0x12fdcd>
 233:	73 72                	jae    2a7 <sysEnter_Vector-0x12fd59>
 235:	63 2f                	arpl   WORD PTR [edi],bp
 237:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 239:	76 69                	jbe    2a4 <sysEnter_Vector-0x12fd5c>
 23b:	72 6f                	jb     2ac <sysEnter_Vector-0x12fd54>
 23d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 23e:	6d                   	ins    DWORD PTR es:[edi],dx
 23f:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 241:	74 2e                	je     271 <sysEnter_Vector-0x12fd8f>
 243:	63 00                	arpl   WORD PTR [eax],ax
 245:	76 61                	jbe    2a8 <sysEnter_Vector-0x12fd58>
 247:	72 6e                	jb     2b7 <sysEnter_Vector-0x12fd49>
 249:	61                   	popa   
 24a:	6d                   	ins    DWORD PTR es:[edi],dx
 24b:	65 00 67 65          	add    BYTE PTR gs:[edi+0x65],ah
 24f:	74 64                	je     2b5 <sysEnter_Vector-0x12fd4b>
 251:	69 72 00 63 6c 6f 73 	imul   esi,DWORD PTR [edx+0x0],0x736f6c63
 258:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
 25c:	53                   	push   ebx
 25d:	43                   	inc    ebx
 25e:	41                   	inc    ecx
 25f:	4c                   	dec    esp
 260:	4c                   	dec    esp
 261:	5f                   	pop    edi
 262:	52                   	push   edx
 263:	45                   	inc    ebp
 264:	41                   	inc    ecx
 265:	44                   	inc    esp
 266:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 269:	53                   	push   ebx
 26a:	43                   	inc    ebx
 26b:	41                   	inc    ecx
 26c:	4c                   	dec    esp
 26d:	4c                   	dec    esp
 26e:	5f                   	pop    edi
 26f:	4f                   	dec    edi
 270:	50                   	push   eax
 271:	45                   	inc    ebp
 272:	4e                   	dec    esi
 273:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 276:	53                   	push   ebx
 277:	43                   	inc    ebx
 278:	41                   	inc    ecx
 279:	4c                   	dec    esp
 27a:	4c                   	dec    esp
 27b:	5f                   	pop    edi
 27c:	4d                   	dec    ebp
 27d:	41                   	inc    ecx
 27e:	53                   	push   ebx
 27f:	4b                   	dec    ebx
 280:	53                   	push   ebx
 281:	49                   	dec    ecx
 282:	47                   	inc    edi
 283:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 286:	53                   	push   ebx
 287:	43                   	inc    ebx
 288:	41                   	inc    ecx
 289:	4c                   	dec    esp
 28a:	4c                   	dec    esp
 28b:	5f                   	pop    edi
 28c:	47                   	inc    edi
 28d:	45                   	inc    ebp
 28e:	54                   	push   esp
 28f:	44                   	inc    esp
 290:	45                   	inc    ebp
 291:	4e                   	dec    esi
 292:	54                   	push   esp
 293:	53                   	push   ebx
 294:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 297:	63 2f                	arpl   WORD PTR [edi],bp
 299:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
 2a0:	53                   	push   ebx
 2a1:	59                   	pop    ecx
 2a2:	53                   	push   ebx
 2a3:	43                   	inc    ebx
 2a4:	41                   	inc    ecx
 2a5:	4c                   	dec    esp
 2a6:	4c                   	dec    esp
 2a7:	5f                   	pop    edi
 2a8:	52                   	push   edx
 2a9:	45                   	inc    ebp
 2aa:	42                   	inc    edx
 2ab:	4f                   	dec    edi
 2ac:	4f                   	dec    edi
 2ad:	54                   	push   esp
 2ae:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2b1:	53                   	push   ebx
 2b2:	43                   	inc    ebx
 2b3:	41                   	inc    ecx
 2b4:	4c                   	dec    esp
 2b5:	4c                   	dec    esp
 2b6:	5f                   	pop    edi
 2b7:	48                   	dec    eax
 2b8:	4c                   	dec    esp
 2b9:	54                   	push   esp
 2ba:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2bd:	53                   	push   ebx
 2be:	43                   	inc    ebx
 2bf:	41                   	inc    ecx
 2c0:	4c                   	dec    esp
 2c1:	4c                   	dec    esp
 2c2:	5f                   	pop    edi
 2c3:	53                   	push   ebx
 2c4:	4c                   	dec    esp
 2c5:	45                   	inc    ebp
 2c6:	45                   	inc    ebp
 2c7:	50                   	push   eax
 2c8:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2cb:	53                   	push   ebx
 2cc:	43                   	inc    ebx
 2cd:	41                   	inc    ecx
 2ce:	4c                   	dec    esp
 2cf:	4c                   	dec    esp
 2d0:	5f                   	pop    edi
 2d1:	53                   	push   ebx
 2d2:	45                   	inc    ebp
 2d3:	54                   	push   esp
 2d4:	50                   	push   eax
 2d5:	52                   	push   edx
 2d6:	49                   	dec    ecx
 2d7:	4f                   	dec    edi
 2d8:	52                   	push   edx
 2d9:	49                   	dec    ecx
 2da:	54                   	push   esp
 2db:	59                   	pop    ecx
 2dc:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2df:	53                   	push   ebx
 2e0:	43                   	inc    ebx
 2e1:	41                   	inc    ecx
 2e2:	4c                   	dec    esp
 2e3:	4c                   	dec    esp
 2e4:	5f                   	pop    edi
 2e5:	43                   	inc    ebx
 2e6:	4c                   	dec    esp
 2e7:	4f                   	dec    edi
 2e8:	53                   	push   ebx
 2e9:	45                   	inc    ebp
 2ea:	00 65 73             	add    BYTE PTR [ebp+0x73],ah
 2ed:	79 73                	jns    362 <sysEnter_Vector-0x12fc9e>
 2ef:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 2f2:	6c                   	ins    BYTE PTR es:[edi],dx
 2f3:	73 00                	jae    2f5 <sysEnter_Vector-0x12fd0b>
 2f5:	6c                   	ins    BYTE PTR es:[edi],dx
 2f6:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 2f8:	67 74 68             	addr16 je 363 <sysEnter_Vector-0x12fc9d>
 2fb:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 2fe:	61                   	popa   
 2ff:	64 00 53 59          	add    BYTE PTR fs:[ebx+0x59],dl
 303:	53                   	push   ebx
 304:	43                   	inc    ebx
 305:	41                   	inc    ecx
 306:	4c                   	dec    esp
 307:	4c                   	dec    esp
 308:	5f                   	pop    edi
 309:	53                   	push   ebx
 30a:	54                   	push   esp
 30b:	4f                   	dec    edi
 30c:	50                   	push   eax
 30d:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 310:	53                   	push   ebx
 311:	43                   	inc    ebx
 312:	41                   	inc    ecx
 313:	4c                   	dec    esp
 314:	4c                   	dec    esp
 315:	5f                   	pop    edi
 316:	50                   	push   eax
 317:	52                   	push   edx
 318:	49                   	dec    ecx
 319:	4e                   	dec    esi
 31a:	54                   	push   esp
 31b:	44                   	inc    esp
 31c:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 31f:	66                   	data16
 320:	66                   	data16
 321:	65                   	gs
 322:	72 43                	jb     367 <sysEnter_Vector-0x12fc99>
 324:	6f                   	outs   dx,DWORD PTR ds:[esi]
 325:	75 6e                	jne    395 <sysEnter_Vector-0x12fc6b>
 327:	74 00                	je     329 <sysEnter_Vector-0x12fcd7>
 329:	53                   	push   ebx
 32a:	59                   	pop    ecx
 32b:	53                   	push   ebx
 32c:	43                   	inc    ebx
 32d:	41                   	inc    ecx
 32e:	4c                   	dec    esp
 32f:	4c                   	dec    esp
 330:	5f                   	pop    edi
 331:	46                   	inc    esi
 332:	52                   	push   edx
 333:	45                   	inc    ebp
 334:	45                   	inc    ebp
 335:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 338:	53                   	push   ebx
 339:	43                   	inc    ebx
 33a:	41                   	inc    ecx
 33b:	4c                   	dec    esp
 33c:	4c                   	dec    esp
 33d:	5f                   	pop    edi
 33e:	45                   	inc    ebp
 33f:	58                   	pop    eax
 340:	45                   	inc    ebp
 341:	43                   	inc    ebx
 342:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 345:	53                   	push   ebx
 346:	43                   	inc    ebx
 347:	41                   	inc    ecx
 348:	4c                   	dec    esp
 349:	4c                   	dec    esp
 34a:	5f                   	pop    edi
 34b:	49                   	dec    ecx
 34c:	4e                   	dec    esi
 34d:	56                   	push   esi
 34e:	41                   	inc    ecx
 34f:	4c                   	dec    esp
 350:	49                   	dec    ecx
 351:	44                   	inc    esp
 352:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 355:	53                   	push   ebx
 356:	43                   	inc    ebx
 357:	41                   	inc    ecx
 358:	4c                   	dec    esp
 359:	4c                   	dec    esp
 35a:	5f                   	pop    edi
 35b:	52                   	push   edx
 35c:	45                   	inc    ebp
 35d:	47                   	inc    edi
 35e:	45                   	inc    ebp
 35f:	58                   	pop    eax
 360:	49                   	dec    ecx
 361:	54                   	push   esp
 362:	48                   	dec    eax
 363:	41                   	inc    ecx
 364:	4e                   	dec    esi
 365:	44                   	inc    esp
 366:	4c                   	dec    esp
 367:	45                   	inc    ebp
 368:	52                   	push   edx
 369:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 36c:	53                   	push   ebx
 36d:	43                   	inc    ebx
 36e:	41                   	inc    ecx
 36f:	4c                   	dec    esp
 370:	4c                   	dec    esp
 371:	5f                   	pop    edi
 372:	47                   	inc    edi
 373:	45                   	inc    ebp
 374:	54                   	push   esp
 375:	54                   	push   esp
 376:	49                   	dec    ecx
 377:	43                   	inc    ebx
 378:	4b                   	dec    ebx
 379:	53                   	push   ebx
 37a:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 37d:	53                   	push   ebx
 37e:	43                   	inc    ebx
 37f:	41                   	inc    ecx
 380:	4c                   	dec    esp
 381:	4c                   	dec    esp
 382:	5f                   	pop    edi
 383:	45                   	inc    ebp
 384:	4e                   	dec    esi
 385:	44                   	inc    esp
 386:	50                   	push   eax
 387:	52                   	push   edx
 388:	4f                   	dec    edi
 389:	43                   	inc    ebx
 38a:	45                   	inc    ebp
 38b:	53                   	push   ebx
 38c:	53                   	push   ebx
 38d:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 390:	66                   	data16
 391:	66                   	data16
 392:	65                   	gs
 393:	72 00                	jb     395 <sysEnter_Vector-0x12fc6b>
 395:	53                   	push   ebx
 396:	59                   	pop    ecx
 397:	53                   	push   ebx
 398:	43                   	inc    ebx
 399:	41                   	inc    ecx
 39a:	4c                   	dec    esp
 39b:	4c                   	dec    esp
 39c:	5f                   	pop    edi
 39d:	57                   	push   edi
 39e:	52                   	push   edx
 39f:	49                   	dec    ecx
 3a0:	54                   	push   esp
 3a1:	45                   	inc    ebp
 3a2:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3a5:	53                   	push   ebx
 3a6:	43                   	inc    ebx
 3a7:	41                   	inc    ecx
 3a8:	4c                   	dec    esp
 3a9:	4c                   	dec    esp
 3aa:	5f                   	pop    edi
 3ab:	50                   	push   eax
 3ac:	52                   	push   edx
 3ad:	49                   	dec    ecx
 3ae:	4e                   	dec    esi
 3af:	54                   	push   esp
 3b0:	00 68 61             	add    BYTE PTR [eax+0x61],ch
 3b3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 3b4:	64                   	fs
 3b5:	6c                   	ins    BYTE PTR es:[edi],dx
 3b6:	65 00 73 69          	add    BYTE PTR gs:[ebx+0x69],dh
 3ba:	7a 65                	jp     421 <sysEnter_Vector-0x12fbdf>
 3bc:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3bf:	53                   	push   ebx
 3c0:	43                   	inc    ebx
 3c1:	41                   	inc    ecx
 3c2:	4c                   	dec    esp
 3c3:	4c                   	dec    esp
 3c4:	5f                   	pop    edi
 3c5:	41                   	inc    ecx
 3c6:	4c                   	dec    esp
 3c7:	4c                   	dec    esp
 3c8:	4f                   	dec    edi
 3c9:	43                   	inc    ebx
 3ca:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3cd:	53                   	push   ebx
 3ce:	43                   	inc    ebx
 3cf:	41                   	inc    ecx
 3d0:	4c                   	dec    esp
 3d1:	4c                   	dec    esp
 3d2:	5f                   	pop    edi
 3d3:	47                   	inc    edi
 3d4:	45                   	inc    ebp
 3d5:	54                   	push   esp
 3d6:	43                   	inc    ebx
 3d7:	57                   	push   edi
 3d8:	44                   	inc    esp
 3d9:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3dc:	53                   	push   ebx
 3dd:	43                   	inc    ebx
 3de:	41                   	inc    ecx
 3df:	4c                   	dec    esp
 3e0:	4c                   	dec    esp
 3e1:	5f                   	pop    edi
 3e2:	57                   	push   edi
 3e3:	41                   	inc    ecx
 3e4:	49                   	dec    ecx
 3e5:	54                   	push   esp
 3e6:	46                   	inc    esi
 3e7:	4f                   	dec    edi
 3e8:	52                   	push   edx
 3e9:	50                   	push   eax
 3ea:	49                   	dec    ecx
 3eb:	44                   	inc    esp
 3ec:	00 6f 70             	add    BYTE PTR [edi+0x70],ch
 3ef:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 3f1:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3f4:	53                   	push   ebx
 3f5:	43                   	inc    ebx
 3f6:	41                   	inc    ecx
 3f7:	4c                   	dec    esp
 3f8:	4c                   	dec    esp
 3f9:	5f                   	pop    edi
 3fa:	53                   	push   ebx
 3fb:	45                   	inc    ebp
 3fc:	54                   	push   esp
 3fd:	53                   	push   ebx
 3fe:	49                   	dec    ecx
 3ff:	47                   	inc    edi
 400:	41                   	inc    ecx
 401:	43                   	inc    ebx
 402:	54                   	push   esp
 403:	49                   	dec    ecx
 404:	4f                   	dec    edi
 405:	4e                   	dec    esi
 406:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 409:	72 65                	jb     470 <sysEnter_Vector-0x12fb90>
 40b:	61                   	popa   
 40c:	6d                   	ins    DWORD PTR es:[edi],dx
 40d:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 410:	74 73                	je     485 <sysEnter_Vector-0x12fb7b>
 412:	45                   	inc    ebp
 413:	72 72                	jb     487 <sysEnter_Vector-0x12fb79>
 415:	6f                   	outs   dx,DWORD PTR ds:[esi]
 416:	72 00                	jb     418 <sysEnter_Vector-0x12fbe8>
 418:	6c                   	ins    BYTE PTR es:[edi],dx
 419:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 41c:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 41f:	63 2f                	arpl   WORD PTR [edi],bp
 421:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
 428:	6e                   	outs   dx,BYTE PTR ds:[esi]
 429:	70 75                	jo     4a0 <sysEnter_Vector-0x12fb60>
 42b:	74 2e                	je     45b <sysEnter_Vector-0x12fba5>
 42d:	63 00                	arpl   WORD PTR [eax],ax
 42f:	69 6e 63 68 61 72 00 	imul   ebp,DWORD PTR [esi+0x63],0x726168
 436:	67                   	addr16
 437:	65                   	gs
 438:	74 63                	je     49d <sysEnter_Vector-0x12fb63>
 43a:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 43d:	78 6c                	js     4ab <sysEnter_Vector-0x12fb55>
 43f:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 441:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 444:	74 73                	je     4b9 <sysEnter_Vector-0x12fb47>
 446:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 449:	74 63                	je     4ae <sysEnter_Vector-0x12fb52>
 44b:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 44e:	74 73                	je     4c3 <sysEnter_Vector-0x12fb3d>
 450:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 453:	74 56                	je     4ab <sysEnter_Vector-0x12fb55>
 455:	61                   	popa   
 456:	6c                   	ins    BYTE PTR es:[edi],dx
 457:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 45b:	68 6f 75 72 00       	push   0x72756f
 460:	6c                   	ins    BYTE PTR es:[edi],dx
 461:	61                   	popa   
 462:	73 74                	jae    4d8 <sysEnter_Vector-0x12fb28>
 464:	53                   	push   ebx
 465:	70 61                	jo     4c8 <sysEnter_Vector-0x12fb38>
 467:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 46a:	74 72                	je     4de <sysEnter_Vector-0x12fb22>
 46c:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 46f:	7a 65                	jp     4d6 <sysEnter_Vector-0x12fb2a>
 471:	5f                   	pop    edi
 472:	74 00                	je     474 <sysEnter_Vector-0x12fb8c>
 474:	73 6c                	jae    4e2 <sysEnter_Vector-0x12fb1e>
 476:	65                   	gs
 477:	65                   	gs
 478:	70 00                	jo     47a <sysEnter_Vector-0x12fb86>
 47a:	73 69                	jae    4e5 <sysEnter_Vector-0x12fb1b>
 47c:	67 44                	addr16 inc esp
 47e:	61                   	popa   
 47f:	74 61                	je     4e2 <sysEnter_Vector-0x12fb1e>
 481:	00 74 68 65          	add    BYTE PTR [eax+ebp*2+0x65],dh
 485:	54                   	push   esp
 486:	69 6d 65 00 74 6d 5f 	imul   ebp,DWORD PTR [ebp+0x65],0x5f6d7400
 48d:	7a 6f                	jp     4fe <sysEnter_Vector-0x12fb02>
 48f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 490:	65 00 61 72          	add    BYTE PTR gs:[ecx+0x72],ah
 494:	67 76 50             	addr16 jbe 4e7 <sysEnter_Vector-0x12fb19>
 497:	74 72                	je     50b <sysEnter_Vector-0x12faf5>
 499:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 49c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 49d:	67 72 61             	addr16 jb 501 <sysEnter_Vector-0x12faff>
 4a0:	6d                   	ins    DWORD PTR es:[edi],dx
 4a1:	00 66 72             	add    BYTE PTR [esi+0x72],ah
 4a4:	65                   	gs
 4a5:	65                   	gs
 4a6:	49                   	dec    ecx
 4a7:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 4ab:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
 4ae:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4af:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
 4b6:	74 
 4b7:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 4ba:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
 4bd:	6c                   	ins    BYTE PTR es:[edi],dx
 4be:	74 69                	je     529 <sysEnter_Vector-0x12fad7>
 4c0:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4c1:	5f                   	pop    edi
 4c2:	76 61                	jbe    525 <sysEnter_Vector-0x12fadb>
 4c4:	5f                   	pop    edi
 4c5:	6c                   	ins    BYTE PTR es:[edi],dx
 4c6:	69 73 74 00 74 6d 5f 	imul   esi,DWORD PTR [ebx+0x74],0x5f6d7400
 4cd:	6d                   	ins    DWORD PTR es:[edi],dx
 4ce:	6f                   	outs   dx,DWORD PTR ds:[esi]
 4cf:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4d0:	00 73 70             	add    BYTE PTR [ebx+0x70],dh
 4d3:	61                   	popa   
 4d4:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 4d7:	74 72                	je     54b <sysEnter_Vector-0x12fab5>
 4d9:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 4dd:	79 65                	jns    544 <sysEnter_Vector-0x12fabc>
 4df:	61                   	popa   
 4e0:	72 00                	jb     4e2 <sysEnter_Vector-0x12fb1e>
 4e2:	67                   	addr16
 4e3:	65                   	gs
 4e4:	74 74                	je     55a <sysEnter_Vector-0x12faa6>
 4e6:	69 6d 65 00 77 61 69 	imul   ebp,DWORD PTR [ebp+0x65],0x69617700
 4ed:	74 70                	je     55f <sysEnter_Vector-0x12faa1>
 4ef:	69 64 00 44 65 62 75 	imul   esp,DWORD PTR [eax+eax*1+0x44],0x67756265
 4f6:	67 
 4f7:	4c                   	dec    esp
 4f8:	65                   	gs
 4f9:	76 65                	jbe    560 <sysEnter_Vector-0x12faa0>
 4fb:	6c                   	ins    BYTE PTR es:[edi],dx
 4fc:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 4ff:	65 63 61 00          	arpl   WORD PTR gs:[ecx+0x0],sp
 503:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 506:	6c                   	ins    BYTE PTR es:[edi],dx
 507:	6e                   	outs   dx,BYTE PTR ds:[esi]
 508:	75 6d                	jne    577 <sysEnter_Vector-0x12fa89>
 50a:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 50e:	69 73 64 73 74 00 64 	imul   esi,DWORD PTR [ebx+0x64],0x64007473
 515:	6f                   	outs   dx,DWORD PTR ds:[esi]
 516:	5f                   	pop    edi
 517:	73 79                	jae    592 <sysEnter_Vector-0x12fa6e>
 519:	73 63                	jae    57e <sysEnter_Vector-0x12fa82>
 51b:	61                   	popa   
 51c:	6c                   	ins    BYTE PTR es:[edi],dx
 51d:	6c                   	ins    BYTE PTR es:[edi],dx
 51e:	30 00                	xor    BYTE PTR [eax],al
 520:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 522:	5f                   	pop    edi
 523:	73 79                	jae    59e <sysEnter_Vector-0x12fa62>
 525:	73 63                	jae    58a <sysEnter_Vector-0x12fa76>
 527:	61                   	popa   
 528:	6c                   	ins    BYTE PTR es:[edi],dx
 529:	6c                   	ins    BYTE PTR es:[edi],dx
 52a:	31 00                	xor    DWORD PTR [eax],eax
 52c:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 52e:	5f                   	pop    edi
 52f:	73 79                	jae    5aa <sysEnter_Vector-0x12fa56>
 531:	73 63                	jae    596 <sysEnter_Vector-0x12fa6a>
 533:	61                   	popa   
 534:	6c                   	ins    BYTE PTR es:[edi],dx
 535:	6c                   	ins    BYTE PTR es:[edi],dx
 536:	32 00                	xor    al,BYTE PTR [eax]
 538:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 53a:	5f                   	pop    edi
 53b:	73 79                	jae    5b6 <sysEnter_Vector-0x12fa4a>
 53d:	73 63                	jae    5a2 <sysEnter_Vector-0x12fa5e>
 53f:	61                   	popa   
 540:	6c                   	ins    BYTE PTR es:[edi],dx
 541:	6c                   	ins    BYTE PTR es:[edi],dx
 542:	33 00                	xor    eax,DWORD PTR [eax]
 544:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 546:	5f                   	pop    edi
 547:	73 79                	jae    5c2 <sysEnter_Vector-0x12fa3e>
 549:	73 63                	jae    5ae <sysEnter_Vector-0x12fa52>
 54b:	61                   	popa   
 54c:	6c                   	ins    BYTE PTR es:[edi],dx
 54d:	6c                   	ins    BYTE PTR es:[edi],dx
 54e:	34 00                	xor    al,0x0
 550:	6c                   	ins    BYTE PTR es:[edi],dx
 551:	69 62 63 49 6e 69 74 	imul   esp,DWORD PTR [edx+0x63],0x74696e49
 558:	69 61 6c 69 7a 65 64 	imul   esp,DWORD PTR [ecx+0x6c],0x64657a69
 55f:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 563:	6d                   	ins    DWORD PTR es:[edi],dx
 564:	69 6e 00 74 69 63 6b 	imul   ebp,DWORD PTR [esi+0x0],0x6b636974
 56b:	73 00                	jae    56d <sysEnter_Vector-0x12fa93>
 56d:	74 6d                	je     5dc <sysEnter_Vector-0x12fa24>
 56f:	5f                   	pop    edi
 570:	79 64                	jns    5d6 <sysEnter_Vector-0x12fa2a>
 572:	61                   	popa   
 573:	79 00                	jns    575 <sysEnter_Vector-0x12fa8b>
 575:	5f                   	pop    edi
 576:	5f                   	pop    edi
 577:	67 6e                	outs   dx,BYTE PTR ds:[si]
 579:	75 63                	jne    5de <sysEnter_Vector-0x12fa22>
 57b:	5f                   	pop    edi
 57c:	76 61                	jbe    5df <sysEnter_Vector-0x12fa21>
 57e:	5f                   	pop    edi
 57f:	6c                   	ins    BYTE PTR es:[edi],dx
 580:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
 587:	6e                   	outs   dx,BYTE PTR ds:[esi]
 588:	74 64                	je     5ee <sysEnter_Vector-0x12fa12>
 58a:	49                   	dec    ecx
 58b:	00 70 61             	add    BYTE PTR [eax+0x61],dh
 58e:	72 61                	jb     5f1 <sysEnter_Vector-0x12fa0f>
 590:	6d                   	ins    DWORD PTR es:[edi],dx
 591:	31 00                	xor    DWORD PTR [eax],eax
 593:	70 61                	jo     5f6 <sysEnter_Vector-0x12fa0a>
 595:	72 61                	jb     5f8 <sysEnter_Vector-0x12fa08>
 597:	6d                   	ins    DWORD PTR es:[edi],dx
 598:	32 00                	xor    al,BYTE PTR [eax]
 59a:	70 61                	jo     5fd <sysEnter_Vector-0x12fa03>
 59c:	72 61                	jb     5ff <sysEnter_Vector-0x12fa01>
 59e:	6d                   	ins    DWORD PTR es:[edi],dx
 59f:	33 00                	xor    eax,DWORD PTR [eax]
 5a1:	70 61                	jo     604 <sysEnter_Vector-0x12f9fc>
 5a3:	72 61                	jb     606 <sysEnter_Vector-0x12f9fa>
 5a5:	6d                   	ins    DWORD PTR es:[edi],dx
 5a6:	34 00                	xor    al,0x0
 5a8:	73 74                	jae    61e <sysEnter_Vector-0x12f9e2>
 5aa:	72 74                	jb     620 <sysEnter_Vector-0x12f9e0>
 5ac:	72 69                	jb     617 <sysEnter_Vector-0x12f9e9>
 5ae:	6d                   	ins    DWORD PTR es:[edi],dx
 5af:	49                   	dec    ecx
 5b0:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
 5b3:	72 6d                	jb     622 <sysEnter_Vector-0x12f9de>
 5b5:	61                   	popa   
 5b6:	74 00                	je     5b8 <sysEnter_Vector-0x12fa48>
 5b8:	74 6d                	je     627 <sysEnter_Vector-0x12f9d9>
 5ba:	5f                   	pop    edi
 5bb:	67 6d                	ins    DWORD PTR es:[di],dx
 5bd:	74 6f                	je     62e <sysEnter_Vector-0x12f9d2>
 5bf:	66                   	data16
 5c0:	66                   	data16
 5c1:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 5c4:	67 6e                	outs   dx,BYTE PTR ds:[si]
 5c6:	61                   	popa   
 5c7:	6c                   	ins    BYTE PTR es:[edi],dx
 5c8:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 5cb:	65 63 00             	arpl   WORD PTR gs:[eax],ax
 5ce:	5f                   	pop    edi
 5cf:	5f                   	pop    edi
 5d0:	73 65                	jae    637 <sysEnter_Vector-0x12f9c9>
 5d2:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 5d5:	64                   	fs
 5d6:	73 00                	jae    5d8 <sysEnter_Vector-0x12fa28>
 5d8:	73 72                	jae    64c <sysEnter_Vector-0x12f9b4>
 5da:	63 2f                	arpl   WORD PTR [edi],bp
 5dc:	6c                   	ins    BYTE PTR es:[edi],dx
 5dd:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
 5e4:	4f                   	dec    edi
 5e5:	53                   	push   ebx
 5e6:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 5e9:	61                   	popa   
 5ea:	72 67                	jb     653 <sysEnter_Vector-0x12f9ad>
 5ec:	63 00                	arpl   WORD PTR [eax],ax
 5ee:	74 6d                	je     65d <sysEnter_Vector-0x12f9a3>
 5f0:	5f                   	pop    edi
 5f1:	77 64                	ja     657 <sysEnter_Vector-0x12f9a9>
 5f3:	61                   	popa   
 5f4:	79 00                	jns    5f6 <sysEnter_Vector-0x12fa0a>
 5f6:	74 6d                	je     665 <sysEnter_Vector-0x12f99b>
 5f8:	5f                   	pop    edi
 5f9:	6d                   	ins    DWORD PTR es:[edi],dx
 5fa:	64                   	fs
 5fb:	61                   	popa   
 5fc:	79 00                	jns    5fe <sysEnter_Vector-0x12fa02>
 5fe:	6c                   	ins    BYTE PTR es:[edi],dx
 5ff:	69 62 63 5f 63 6c 65 	imul   esp,DWORD PTR [edx+0x63],0x656c635f
 606:	61                   	popa   
 607:	6e                   	outs   dx,BYTE PTR ds:[esi]
 608:	75 70                	jne    67a <sysEnter_Vector-0x12f986>
 60a:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 60e:	73 65                	jae    675 <sysEnter_Vector-0x12f98b>
 610:	63 00                	arpl   WORD PTR [eax],ax
 612:	61                   	popa   
 613:	72 67                	jb     67c <sysEnter_Vector-0x12f984>
 615:	76 00                	jbe    617 <sysEnter_Vector-0x12f9e9>
 617:	73 69                	jae    682 <sysEnter_Vector-0x12f97e>
 619:	67 48                	addr16 dec eax
 61b:	61                   	popa   
 61c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 61d:	64                   	fs
 61e:	6c                   	ins    BYTE PTR es:[edi],dx
 61f:	65                   	gs
 620:	72 00                	jb     622 <sysEnter_Vector-0x12f9de>
 622:	6d                   	ins    DWORD PTR es:[edi],dx
 623:	6f                   	outs   dx,DWORD PTR ds:[esi]
 624:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
 62b:	6e 
 62c:	61                   	popa   
 62d:	6c                   	ins    BYTE PTR es:[edi],dx
 62e:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 631:	67 73 00             	addr16 jae 634 <sysEnter_Vector-0x12f9cc>
 634:	70 72                	jo     6a8 <sysEnter_Vector-0x12f958>
 636:	69 6e 74 49 00 73 74 	imul   ebp,DWORD PTR [esi+0x74],0x74730049
 63d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 63e:	70 00                	jo     640 <sysEnter_Vector-0x12f9c0>
 640:	67                   	addr16
 641:	65                   	gs
 642:	74 63                	je     6a7 <sysEnter_Vector-0x12f959>
 644:	77 64                	ja     6aa <sysEnter_Vector-0x12f956>
 646:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
 649:	6c                   	ins    BYTE PTR es:[edi],dx
 64a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 64b:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 64e:	65                   	gs
 64f:	64                   	fs
 650:	50                   	push   eax
 651:	74 72                	je     6c5 <sysEnter_Vector-0x12f93b>
 653:	00 66 70             	add    BYTE PTR [esi+0x70],ah
 656:	6f                   	outs   dx,DWORD PTR ds:[esi]
 657:	69 6e 74 65 72 00 6e 	imul   ebp,DWORD PTR [esi+0x74],0x6e007265
 65e:	65                   	gs
 65f:	77 53                	ja     6b4 <sysEnter_Vector-0x12f94c>
 661:	69 7a 65 00 6d 61 6c 	imul   edi,DWORD PTR [edx+0x65],0x6c616d00
 668:	6c                   	ins    BYTE PTR es:[edi],dx
 669:	6f                   	outs   dx,DWORD PTR ds:[esi]
 66a:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 66d:	6c                   	ins    BYTE PTR es:[edi],dx
 66e:	65                   	gs
 66f:	61                   	popa   
 670:	6e                   	outs   dx,BYTE PTR ds:[esi]
 671:	75 70                	jne    6e3 <sysEnter_Vector-0x12f91d>
 673:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 676:	72 6b                	jb     6e3 <sysEnter_Vector-0x12f91d>
 678:	65                   	gs
 679:	72 00                	jb     67b <sysEnter_Vector-0x12f985>
 67b:	6d                   	ins    DWORD PTR es:[edi],dx
 67c:	61                   	popa   
 67d:	6c                   	ins    BYTE PTR es:[edi],dx
 67e:	6c                   	ins    BYTE PTR es:[edi],dx
 67f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 680:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 683:	75 69                	jne    6ee <sysEnter_Vector-0x12f912>
 685:	6e                   	outs   dx,BYTE PTR ds:[esi]
 686:	74 38                	je     6c0 <sysEnter_Vector-0x12f940>
 688:	5f                   	pop    edi
 689:	74 00                	je     68b <sysEnter_Vector-0x12f975>
 68b:	66                   	data16
 68c:	72 65                	jb     6f3 <sysEnter_Vector-0x12f90d>
 68e:	65 00 68 65          	add    BYTE PTR gs:[eax+0x65],ch
 692:	61                   	popa   
 693:	70 50                	jo     6e5 <sysEnter_Vector-0x12f91b>
 695:	74 72                	je     709 <sysEnter_Vector-0x12f8f7>
 697:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 69a:	65 64 65 64 00 73 68 	gs fs gs add BYTE PTR fs:gs:[ebx+0x68],dh
 6a1:	65                   	gs
 6a2:	61                   	popa   
 6a3:	70 00                	jo     6a5 <sysEnter_Vector-0x12f95b>
 6a5:	69 6e 55 73 65 00 69 	imul   ebp,DWORD PTR [esi+0x55],0x69006573
 6ac:	6e                   	outs   dx,BYTE PTR ds:[esi]
 6ad:	69 74 6d 61 6c 6c 6f 	imul   esi,DWORD PTR [ebp+ebp*2+0x61],0x636f6c6c
 6b4:	63 
 6b5:	00 67 6f             	add    BYTE PTR [edi+0x6f],ah
 6b8:	74 6f                	je     729 <sysEnter_Vector-0x12f8d7>
 6ba:	48                   	dec    eax
 6bb:	65                   	gs
 6bc:	72 65                	jb     723 <sysEnter_Vector-0x12f8dd>
 6be:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 6c1:	61                   	popa   
 6c2:	70 50                	jo     714 <sysEnter_Vector-0x12f8ec>
 6c4:	74 72                	je     738 <sysEnter_Vector-0x12f8c8>
 6c6:	4e                   	dec    esi
 6c7:	65                   	gs
 6c8:	78 74                	js     73e <sysEnter_Vector-0x12f8c2>
 6ca:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 6cd:	77 48                	ja     717 <sysEnter_Vector-0x12f8e9>
 6cf:	65                   	gs
 6d0:	61                   	popa   
 6d1:	70 52                	jo     725 <sysEnter_Vector-0x12f8db>
 6d3:	65                   	gs
 6d4:	71 75                	jno    74b <sysEnter_Vector-0x12f8b5>
 6d6:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
 6dd:	75 6c                	jne    74b <sysEnter_Vector-0x12f8b5>
 6df:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
 6e6:	75 65                	jne    74d <sysEnter_Vector-0x12f8b3>
 6e8:	73 74                	jae    75e <sysEnter_Vector-0x12f8a2>
 6ea:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 6ed:	63 2f                	arpl   WORD PTR [edi],bp
 6ef:	6d                   	ins    DWORD PTR es:[edi],dx
 6f0:	61                   	popa   
 6f1:	6c                   	ins    BYTE PTR es:[edi],dx
 6f2:	6c                   	ins    BYTE PTR es:[edi],dx
 6f3:	6f                   	outs   dx,DWORD PTR ds:[esi]
 6f4:	63 2e                	arpl   WORD PTR [esi],bp
 6f6:	63 00                	arpl   WORD PTR [eax],ax
 6f8:	70 72                	jo     76c <sysEnter_Vector-0x12f894>
 6fa:	65                   	gs
 6fb:	76 00                	jbe    6fd <sysEnter_Vector-0x12f903>
 6fd:	68 65 61 70 72       	push   0x72706165
 702:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
 706:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 709:	63 2f                	arpl   WORD PTR [edi],bp
 70b:	6d                   	ins    DWORD PTR es:[edi],dx
 70c:	65                   	gs
 70d:	6d                   	ins    DWORD PTR es:[edi],dx
 70e:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 711:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 714:	64                   	fs
 715:	65                   	gs
 716:	73 74                	jae    78c <sysEnter_Vector-0x12f874>
 718:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 71b:	6d                   	ins    DWORD PTR es:[edi],dx
 71c:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 71f:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
 722:	61                   	popa   
 723:	6c                   	ins    BYTE PTR es:[edi],dx
 724:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 727:	6d                   	ins    DWORD PTR es:[edi],dx
 728:	73 65                	jae    78f <sysEnter_Vector-0x12f871>
 72a:	74 00                	je     72c <sysEnter_Vector-0x12f8d4>
 72c:	73 72                	jae    7a0 <sysEnter_Vector-0x12f860>
 72e:	63 2f                	arpl   WORD PTR [edi],bp
 730:	6d                   	ins    DWORD PTR es:[edi],dx
 731:	65                   	gs
 732:	6d                   	ins    DWORD PTR es:[edi],dx
 733:	73 65                	jae    79a <sysEnter_Vector-0x12f866>
 735:	74 2e                	je     765 <sysEnter_Vector-0x12f89b>
 737:	63 00                	arpl   WORD PTR [eax],ax
 739:	66 56                	push   si
 73b:	61                   	popa   
 73c:	6c                   	ins    BYTE PTR es:[edi],dx
 73d:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 740:	6d                   	ins    DWORD PTR es:[edi],dx
 741:	73 65                	jae    7a8 <sysEnter_Vector-0x12f858>
 743:	74 49                	je     78e <sysEnter_Vector-0x12f872>
 745:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 748:	6e                   	outs   dx,BYTE PTR ds:[esi]
 749:	74 31                	je     77c <sysEnter_Vector-0x12f884>
 74b:	36                   	ss
 74c:	5f                   	pop    edi
 74d:	74 00                	je     74f <sysEnter_Vector-0x12f8b1>
 74f:	61                   	popa   
 750:	64                   	fs
 751:	64                   	fs
 752:	72 00                	jb     754 <sysEnter_Vector-0x12f8ac>
 754:	6f                   	outs   dx,DWORD PTR ds:[esi]
 755:	66 66 5f             	data32 pop di
 758:	74 00                	je     75a <sysEnter_Vector-0x12f8a6>
 75a:	70 72                	jo     7ce <sysEnter_Vector-0x12f832>
 75c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 75d:	74 00                	je     75f <sysEnter_Vector-0x12f8a1>
 75f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 760:	66                   	data16
 761:	66                   	data16
 762:	73 65                	jae    7c9 <sysEnter_Vector-0x12f837>
 764:	74 00                	je     766 <sysEnter_Vector-0x12f89a>
 766:	6d                   	ins    DWORD PTR es:[edi],dx
 767:	6d                   	ins    DWORD PTR es:[edi],dx
 768:	61                   	popa   
 769:	70 00                	jo     76b <sysEnter_Vector-0x12f895>
 76b:	73 72                	jae    7df <sysEnter_Vector-0x12f821>
 76d:	63 2f                	arpl   WORD PTR [edi],bp
 76f:	6d                   	ins    DWORD PTR es:[edi],dx
 770:	6d                   	ins    DWORD PTR es:[edi],dx
 771:	61                   	popa   
 772:	70 2e                	jo     7a2 <sysEnter_Vector-0x12f85e>
 774:	63 00                	arpl   WORD PTR [eax],ax
 776:	73 5f                	jae    7d7 <sysEnter_Vector-0x12f829>
 778:	64                   	fs
 779:	65                   	gs
 77a:	76 00                	jbe    77c <sysEnter_Vector-0x12f884>
 77c:	75 69                	jne    7e7 <sysEnter_Vector-0x12f819>
 77e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 77f:	74 36                	je     7b7 <sysEnter_Vector-0x12f849>
 781:	34 5f                	xor    al,0x5f
 783:	74 00                	je     785 <sysEnter_Vector-0x12f87b>
 785:	6d                   	ins    DWORD PTR es:[edi],dx
 786:	6e                   	outs   dx,BYTE PTR ds:[esi]
 787:	74 5f                	je     7e8 <sysEnter_Vector-0x12f818>
 789:	66                   	data16
 78a:	6c                   	ins    BYTE PTR es:[edi],dx
 78b:	61                   	popa   
 78c:	67 73 00             	addr16 jae 78f <sysEnter_Vector-0x12f871>
 78f:	63 6f 6c             	arpl   WORD PTR [edi+0x6c],bp
 792:	53                   	push   ebx
 793:	74 72                	je     807 <sysEnter_Vector-0x12f7f9>
 795:	69 6e 67 00 6d 6b 6e 	imul   ebp,DWORD PTR [esi+0x67],0x6e6b6d00
 79c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 79d:	64 00 6e 65          	add    BYTE PTR fs:[esi+0x65],ch
 7a1:	78 74                	js     817 <sysEnter_Vector-0x12f7e9>
 7a3:	00 6d 6b             	add    BYTE PTR [ebp+0x6b],ch
 7a6:	64 69 72 00 62 75 66 	imul   esi,DWORD PTR fs:[edx+0x0],0x66667562
 7ad:	66 
 7ae:	00 6d 6e             	add    BYTE PTR [ebp+0x6e],ch
 7b1:	74 5f                	je     812 <sysEnter_Vector-0x12f7ee>
 7b3:	73 62                	jae    817 <sysEnter_Vector-0x12f7e9>
 7b5:	00 73 5f             	add    BYTE PTR [ebx+0x5f],dh
 7b8:	6c                   	ins    BYTE PTR es:[edi],dx
 7b9:	69 73 74 00 73 75 70 	imul   esi,DWORD PTR [ebx+0x74],0x70757300
 7c0:	65                   	gs
 7c1:	72 5f                	jb     822 <sysEnter_Vector-0x12f7de>
 7c3:	62 6c 6f 63          	bound  ebp,QWORD PTR [edi+ebp*2+0x63]
 7c7:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 7ca:	5f                   	pop    edi
 7cb:	76 66                	jbe    833 <sysEnter_Vector-0x12f7cd>
 7cd:	73 6d                	jae    83c <sysEnter_Vector-0x12f7c4>
 7cf:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7d0:	75 6e                	jne    840 <sysEnter_Vector-0x12f7c0>
 7d2:	74 00                	je     7d4 <sysEnter_Vector-0x12f82c>
 7d4:	72 65                	jb     83b <sysEnter_Vector-0x12f7c5>
 7d6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7d7:	61                   	popa   
 7d8:	6d                   	ins    DWORD PTR es:[edi],dx
 7d9:	65 00 64 5f 6e       	add    BYTE PTR gs:[edi+ebx*2+0x6e],ah
 7de:	61                   	popa   
 7df:	6d                   	ins    DWORD PTR es:[edi],dx
 7e0:	65 00 73 72          	add    BYTE PTR gs:[ebx+0x72],dh
 7e4:	63 2f                	arpl   WORD PTR [edi],bp
 7e6:	73 74                	jae    85c <sysEnter_Vector-0x12f7a4>
 7e8:	64 69 6f 2e 63 00 64 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x65640063
 7ef:	65 
 7f0:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7f1:	74 72                	je     865 <sysEnter_Vector-0x12f79b>
 7f3:	79 00                	jns    7f5 <sysEnter_Vector-0x12f80b>
 7f5:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 7fc:	65                   	gs
 7fd:	72 61                	jb     860 <sysEnter_Vector-0x12f7a0>
 7ff:	74 69                	je     86a <sysEnter_Vector-0x12f796>
 801:	6f                   	outs   dx,DWORD PTR ds:[esi]
 802:	6e                   	outs   dx,BYTE PTR ds:[esi]
 803:	73 00                	jae    805 <sysEnter_Vector-0x12f7fb>
 805:	72 6d                	jb     874 <sysEnter_Vector-0x12f78c>
 807:	64 69 72 00 69 5f 67 	imul   esi,DWORD PTR fs:[edx+0x0],0x69675f69
 80e:	69 
 80f:	64 00 64 6c 6c       	add    BYTE PTR fs:[esp+ebp*2+0x6c],ah
 814:	69 73 74 5f 74 00 72 	imul   esi,DWORD PTR [ebx+0x74],0x7200745f
 81b:	65                   	gs
 81c:	61                   	popa   
 81d:	64                   	fs
 81e:	43                   	inc    ebx
 81f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 820:	6e                   	outs   dx,BYTE PTR ds:[esi]
 821:	73 6f                	jae    892 <sysEnter_Vector-0x12f76e>
 823:	6c                   	ins    BYTE PTR es:[edi],dx
 824:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
 828:	6f                   	outs   dx,DWORD PTR ds:[esi]
 829:	64                   	fs
 82a:	65                   	gs
 82b:	5f                   	pop    edi
 82c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 82d:	70 65                	jo     894 <sysEnter_Vector-0x12f76c>
 82f:	72 61                	jb     892 <sysEnter_Vector-0x12f76e>
 831:	74 69                	je     89c <sysEnter_Vector-0x12f764>
 833:	6f                   	outs   dx,DWORD PTR ds:[esi]
 834:	6e                   	outs   dx,BYTE PTR ds:[esi]
 835:	73 00                	jae    837 <sysEnter_Vector-0x12f7c9>
 837:	69 5f 6f 70 66 6c 61 	imul   ebx,DWORD PTR [edi+0x6f],0x616c6670
 83e:	67 73 00             	addr16 jae 841 <sysEnter_Vector-0x12f7bf>
 841:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 848:	65                   	gs
 849:	72 61                	jb     8ac <sysEnter_Vector-0x12f754>
 84b:	74 69                	je     8b6 <sysEnter_Vector-0x12f74a>
 84d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 84e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 84f:	73 5f                	jae    8b0 <sysEnter_Vector-0x12f750>
 851:	74 00                	je     853 <sysEnter_Vector-0x12f7ad>
 853:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 856:	66 50                	push   ax
 858:	74 72                	je     8cc <sysEnter_Vector-0x12f734>
 85a:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 85d:	64                   	fs
 85e:	65                   	gs
 85f:	76 00                	jbe    861 <sysEnter_Vector-0x12f79f>
 861:	6d                   	ins    DWORD PTR es:[edi],dx
 862:	6f                   	outs   dx,DWORD PTR ds:[esi]
 863:	76 65                	jbe    8ca <sysEnter_Vector-0x12f736>
 865:	54                   	push   esp
 866:	6f                   	outs   dx,DWORD PTR ds:[esi]
 867:	00 77 72             	add    BYTE PTR [edi+0x72],dh
 86a:	69 74 65 00 66 70 74 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x72747066
 871:	72 
 872:	00 77 72             	add    BYTE PTR [edi+0x72],dh
 875:	69 74 65 43 6f 6e 73 	imul   esi,DWORD PTR [ebp+eiz*2+0x43],0x6f736e6f
 87c:	6f 
 87d:	6c                   	ins    BYTE PTR es:[edi],dx
 87e:	65 00 70 61          	add    BYTE PTR gs:[eax+0x61],dh
 882:	79 6c                	jns    8f0 <sysEnter_Vector-0x12f710>
 884:	6f                   	outs   dx,DWORD PTR ds:[esi]
 885:	61                   	popa   
 886:	64 00 73 6c          	add    BYTE PTR fs:[ebx+0x6c],dh
 88a:	69 73 74 68 65 61 64 	imul   esi,DWORD PTR [ebx+0x74],0x64616568
 891:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 894:	6f                   	outs   dx,DWORD PTR ds:[esi]
 895:	70 00                	jo     897 <sysEnter_Vector-0x12f769>
 897:	6d                   	ins    DWORD PTR es:[edi],dx
 898:	6e                   	outs   dx,BYTE PTR ds:[esi]
 899:	74 5f                	je     8fa <sysEnter_Vector-0x12f706>
 89b:	72 6f                	jb     90c <sysEnter_Vector-0x12f6f4>
 89d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 89e:	74 00                	je     8a0 <sysEnter_Vector-0x12f760>
 8a0:	69 6f 49 6e 69 74 00 	imul   ebp,DWORD PTR [edi+0x49],0x74696e
 8a7:	66 6f                	outs   dx,WORD PTR ds:[esi]
 8a9:	70 73                	jo     91e <sysEnter_Vector-0x12f6e2>
 8ab:	00 66 69             	add    BYTE PTR [esi+0x69],ah
 8ae:	6c                   	ins    BYTE PTR es:[edi],dx
 8af:	65                   	gs
 8b0:	5f                   	pop    edi
 8b1:	74 00                	je     8b3 <sysEnter_Vector-0x12f74d>
 8b3:	69 5f 66 6c 61 67 73 	imul   ebx,DWORD PTR [edi+0x66],0x7367616c
 8ba:	00 77 68             	add    BYTE PTR [edi+0x68],dh
 8bd:	61                   	popa   
 8be:	74 65                	je     925 <sysEnter_Vector-0x12f6db>
 8c0:	76 65                	jbe    927 <sysEnter_Vector-0x12f6d9>
 8c2:	72 00                	jb     8c4 <sysEnter_Vector-0x12f73c>
 8c4:	69 5f 75 69 64 00 69 	imul   ebx,DWORD PTR [edi+0x75],0x69006469
 8cb:	5f                   	pop    edi
 8cc:	6d                   	ins    DWORD PTR es:[edi],dx
 8cd:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8ce:	64 65 00 63 6f       	fs add BYTE PTR fs:gs:[ebx+0x6f],ah
 8d3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8d4:	73 6f                	jae    945 <sysEnter_Vector-0x12f6bb>
 8d6:	6c                   	ins    BYTE PTR es:[edi],dx
 8d7:	65                   	gs
 8d8:	5f                   	pop    edi
 8d9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8da:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8db:	64 65 00 69 6e       	fs add BYTE PTR fs:gs:[ecx+0x6e],ch
 8e0:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8e1:	64                   	fs
 8e2:	65                   	gs
 8e3:	5f                   	pop    edi
 8e4:	74 00                	je     8e6 <sysEnter_Vector-0x12f71a>
 8e6:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 8e9:	73 6f                	jae    95a <sysEnter_Vector-0x12f6a6>
 8eb:	6c                   	ins    BYTE PTR es:[edi],dx
 8ec:	65                   	gs
 8ed:	5f                   	pop    edi
 8ee:	66 69 6c 65 00 73 5f 	imul   bp,WORD PTR [ebp+eiz*2+0x0],0x5f73
 8f5:	72 6f                	jb     966 <sysEnter_Vector-0x12f69a>
 8f7:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8f8:	74 00                	je     8fa <sysEnter_Vector-0x12f706>
 8fa:	64                   	fs
 8fb:	5f                   	pop    edi
 8fc:	69 6e 6f 64 65 00 72 	imul   ebp,DWORD PTR [esi+0x6f],0x72006564
 903:	65                   	gs
 904:	73 65                	jae    96b <sysEnter_Vector-0x12f695>
 906:	74 52                	je     95a <sysEnter_Vector-0x12f6a6>
 908:	6f                   	outs   dx,DWORD PTR ds:[esi]
 909:	77 00                	ja     90b <sysEnter_Vector-0x12f6f5>
 90b:	64                   	fs
 90c:	5f                   	pop    edi
 90d:	70 61                	jo     970 <sysEnter_Vector-0x12f690>
 90f:	72 65                	jb     976 <sysEnter_Vector-0x12f68a>
 911:	6e                   	outs   dx,BYTE PTR ds:[esi]
 912:	74 00                	je     914 <sysEnter_Vector-0x12f6ec>
 914:	66 5f                	pop    di
 916:	69 6e 6f 64 65 00 66 	imul   ebp,DWORD PTR [esi+0x6f],0x66006564
 91d:	5f                   	pop    edi
 91e:	70 61                	jo     981 <sysEnter_Vector-0x12f67f>
 920:	74 68                	je     98a <sysEnter_Vector-0x12f676>
 922:	00 72 6f             	add    BYTE PTR [edx+0x6f],dh
 925:	77 53                	ja     97a <sysEnter_Vector-0x12f686>
 927:	74 72                	je     99b <sysEnter_Vector-0x12f665>
 929:	69 6e 67 00 63 72 65 	imul   ebp,DWORD PTR [esi+0x67],0x65726300
 930:	61                   	popa   
 931:	74 65                	je     998 <sysEnter_Vector-0x12f668>
 933:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
 936:	6e                   	outs   dx,BYTE PTR ds:[esi]
 937:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 93a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 93c:	61                   	popa   
 93d:	74 65                	je     9a4 <sysEnter_Vector-0x12f65c>
 93f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 942:	72 63                	jb     9a7 <sysEnter_Vector-0x12f659>
 944:	61                   	popa   
 945:	74 49                	je     990 <sysEnter_Vector-0x12f670>
 947:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 94a:	72 63                	jb     9af <sysEnter_Vector-0x12f651>
 94c:	61                   	popa   
 94d:	74 00                	je     94f <sysEnter_Vector-0x12f6b1>
 94f:	73 72                	jae    9c3 <sysEnter_Vector-0x12f63d>
 951:	63 2f                	arpl   WORD PTR [edi],bp
 953:	73 74                	jae    9c9 <sysEnter_Vector-0x12f637>
 955:	72 69                	jb     9c0 <sysEnter_Vector-0x12f640>
 957:	6e                   	outs   dx,BYTE PTR ds:[esi]
 958:	67 73 2f             	addr16 jae 98a <sysEnter_Vector-0x12f676>
 95b:	73 74                	jae    9d1 <sysEnter_Vector-0x12f62f>
 95d:	72 63                	jb     9c2 <sysEnter_Vector-0x12f63e>
 95f:	61                   	popa   
 960:	74 2e                	je     990 <sysEnter_Vector-0x12f670>
 962:	63 00                	arpl   WORD PTR [eax],ax
 964:	73 74                	jae    9da <sysEnter_Vector-0x12f626>
 966:	72 63                	jb     9cb <sysEnter_Vector-0x12f635>
 968:	6d                   	ins    DWORD PTR es:[edi],dx
 969:	70 00                	jo     96b <sysEnter_Vector-0x12f695>
 96b:	73 72                	jae    9df <sysEnter_Vector-0x12f621>
 96d:	63 2f                	arpl   WORD PTR [edi],bp
 96f:	73 74                	jae    9e5 <sysEnter_Vector-0x12f61b>
 971:	72 69                	jb     9dc <sysEnter_Vector-0x12f624>
 973:	6e                   	outs   dx,BYTE PTR ds:[esi]
 974:	67 73 2f             	addr16 jae 9a6 <sysEnter_Vector-0x12f65a>
 977:	73 74                	jae    9ed <sysEnter_Vector-0x12f613>
 979:	72 63                	jb     9de <sysEnter_Vector-0x12f622>
 97b:	6d                   	ins    DWORD PTR es:[edi],dx
 97c:	70 2e                	jo     9ac <sysEnter_Vector-0x12f654>
 97e:	63 00                	arpl   WORD PTR [eax],ax
 980:	63 6f 75             	arpl   WORD PTR [edi+0x75],bp
 983:	6e                   	outs   dx,BYTE PTR ds:[esi]
 984:	74 00                	je     986 <sysEnter_Vector-0x12f67a>
 986:	73 74                	jae    9fc <sysEnter_Vector-0x12f604>
 988:	72 63                	jb     9ed <sysEnter_Vector-0x12f613>
 98a:	70 79                	jo     a05 <sysEnter_Vector-0x12f5fb>
 98c:	63 00                	arpl   WORD PTR [eax],ax
 98e:	73 74                	jae    a04 <sysEnter_Vector-0x12f5fc>
 990:	72 63                	jb     9f5 <sysEnter_Vector-0x12f60b>
 992:	70 79                	jo     a0d <sysEnter_Vector-0x12f5f3>
 994:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 997:	63 2f                	arpl   WORD PTR [edi],bp
 999:	73 74                	jae    a0f <sysEnter_Vector-0x12f5f1>
 99b:	72 69                	jb     a06 <sysEnter_Vector-0x12f5fa>
 99d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 99e:	67 73 2f             	addr16 jae 9d0 <sysEnter_Vector-0x12f630>
 9a1:	73 74                	jae    a17 <sysEnter_Vector-0x12f5e9>
 9a3:	72 63                	jb     a08 <sysEnter_Vector-0x12f5f8>
 9a5:	70 79                	jo     a20 <sysEnter_Vector-0x12f5e0>
 9a7:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9aa:	73 74                	jae    a20 <sysEnter_Vector-0x12f5e0>
 9ac:	72 63                	jb     a11 <sysEnter_Vector-0x12f5ef>
 9ae:	70 79                	jo     a29 <sysEnter_Vector-0x12f5d7>
 9b0:	49                   	dec    ecx
 9b1:	00 63 68             	add    BYTE PTR [ebx+0x68],ah
 9b4:	65 63 6b 5f          	arpl   WORD PTR gs:[ebx+0x5f],bp
 9b8:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
 9bf:	74 
 9c0:	72 69                	jb     a2b <sysEnter_Vector-0x12f5d5>
 9c2:	73 6e                	jae    a32 <sysEnter_Vector-0x12f5ce>
 9c4:	75 6d                	jne    a33 <sysEnter_Vector-0x12f5cd>
 9c6:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 9c9:	63 2f                	arpl   WORD PTR [edi],bp
 9cb:	73 74                	jae    a41 <sysEnter_Vector-0x12f5bf>
 9cd:	72 69                	jb     a38 <sysEnter_Vector-0x12f5c8>
 9cf:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9d0:	67 73 2f             	addr16 jae a02 <sysEnter_Vector-0x12f5fe>
 9d3:	73 74                	jae    a49 <sysEnter_Vector-0x12f5b7>
 9d5:	72 69                	jb     a40 <sysEnter_Vector-0x12f5c0>
 9d7:	73 6e                	jae    a47 <sysEnter_Vector-0x12f5b9>
 9d9:	75 6d                	jne    a48 <sysEnter_Vector-0x12f5b8>
 9db:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9de:	73 74                	jae    a54 <sysEnter_Vector-0x12f5ac>
 9e0:	72 6c                	jb     a4e <sysEnter_Vector-0x12f5b2>
 9e2:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 9e4:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 9e7:	63 2f                	arpl   WORD PTR [edi],bp
 9e9:	73 74                	jae    a5f <sysEnter_Vector-0x12f5a1>
 9eb:	72 69                	jb     a56 <sysEnter_Vector-0x12f5aa>
 9ed:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9ee:	67 73 2f             	addr16 jae a20 <sysEnter_Vector-0x12f5e0>
 9f1:	73 74                	jae    a67 <sysEnter_Vector-0x12f599>
 9f3:	72 6c                	jb     a61 <sysEnter_Vector-0x12f59f>
 9f5:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 9f7:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9fa:	73 74                	jae    a70 <sysEnter_Vector-0x12f590>
 9fc:	72 6c                	jb     a6a <sysEnter_Vector-0x12f596>
 9fe:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 a00:	49                   	dec    ecx
 a01:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a04:	72 6e                	jb     a74 <sysEnter_Vector-0x12f58c>
 a06:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 a09:	49                   	dec    ecx
 a0a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a0d:	72 6e                	jb     a7d <sysEnter_Vector-0x12f583>
 a0f:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 a12:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a15:	63 2f                	arpl   WORD PTR [edi],bp
 a17:	73 74                	jae    a8d <sysEnter_Vector-0x12f573>
 a19:	72 69                	jb     a84 <sysEnter_Vector-0x12f57c>
 a1b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a1c:	67 73 2f             	addr16 jae a4e <sysEnter_Vector-0x12f5b2>
 a1f:	73 74                	jae    a95 <sysEnter_Vector-0x12f56b>
 a21:	72 6e                	jb     a91 <sysEnter_Vector-0x12f56f>
 a23:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 a26:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a29:	73 72                	jae    a9d <sysEnter_Vector-0x12f563>
 a2b:	63 2f                	arpl   WORD PTR [edi],bp
 a2d:	73 74                	jae    aa3 <sysEnter_Vector-0x12f55d>
 a2f:	72 69                	jb     a9a <sysEnter_Vector-0x12f566>
 a31:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a32:	67 73 2f             	addr16 jae a64 <sysEnter_Vector-0x12f59c>
 a35:	73 74                	jae    aab <sysEnter_Vector-0x12f555>
 a37:	72 6e                	jb     aa7 <sysEnter_Vector-0x12f559>
 a39:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 a3c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a3f:	73 74                	jae    ab5 <sysEnter_Vector-0x12f54b>
 a41:	72 6e                	jb     ab1 <sysEnter_Vector-0x12f54f>
 a43:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 a46:	49                   	dec    ecx
 a47:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a4a:	72 6e                	jb     aba <sysEnter_Vector-0x12f546>
 a4c:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 a4f:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a52:	63 2f                	arpl   WORD PTR [edi],bp
 a54:	73 74                	jae    aca <sysEnter_Vector-0x12f536>
 a56:	72 69                	jb     ac1 <sysEnter_Vector-0x12f53f>
 a58:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a59:	67 73 2f             	addr16 jae a8b <sysEnter_Vector-0x12f575>
 a5c:	73 74                	jae    ad2 <sysEnter_Vector-0x12f52e>
 a5e:	72 6f                	jb     acf <sysEnter_Vector-0x12f531>
 a60:	75 6c                	jne    ace <sysEnter_Vector-0x12f532>
 a62:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a65:	63 75 74             	arpl   WORD PTR [ebp+0x74],si
 a68:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a69:	66                   	data16
 a6a:	66                   	data16
 a6b:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
 a6e:	74 6c                	je     adc <sysEnter_Vector-0x12f524>
 a70:	69 6d 00 73 74 72 74 	imul   ebp,DWORD PTR [ebp+0x0],0x74727473
 a77:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a78:	75 6c                	jne    ae6 <sysEnter_Vector-0x12f51a>
 a7a:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
 a7d:	64                   	fs
 a7e:	70 74                	jo     af4 <sysEnter_Vector-0x12f50c>
 a80:	72 00                	jb     a82 <sysEnter_Vector-0x12f57e>
 a82:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a83:	70 74                	jo     af9 <sysEnter_Vector-0x12f507>
 a85:	72 00                	jb     a87 <sysEnter_Vector-0x12f579>
 a87:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
 a8a:	65 00 73 72          	add    BYTE PTR gs:[ebx+0x72],dh
 a8e:	63 2f                	arpl   WORD PTR [edi],bp
 a90:	73 74                	jae    b06 <sysEnter_Vector-0x12f4fa>
 a92:	72 69                	jb     afd <sysEnter_Vector-0x12f503>
 a94:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a95:	67 73 2f             	addr16 jae ac7 <sysEnter_Vector-0x12f539>
 a98:	73 74                	jae    b0e <sysEnter_Vector-0x12f4f2>
 a9a:	72 70                	jb     b0c <sysEnter_Vector-0x12f4f4>
 a9c:	61                   	popa   
 a9d:	72 74                	jb     b13 <sysEnter_Vector-0x12f4ed>
 a9f:	73 2e                	jae    acf <sysEnter_Vector-0x12f531>
 aa1:	63 00                	arpl   WORD PTR [eax],ax
 aa3:	73 74                	jae    b19 <sysEnter_Vector-0x12f4e7>
 aa5:	72 6c                	jb     b13 <sysEnter_Vector-0x12f4ed>
 aa7:	65                   	gs
 aa8:	66                   	data16
 aa9:	74 00                	je     aab <sysEnter_Vector-0x12f555>
 aab:	73 72                	jae    b1f <sysEnter_Vector-0x12f4e1>
 aad:	63 2f                	arpl   WORD PTR [edi],bp
 aaf:	73 74                	jae    b25 <sysEnter_Vector-0x12f4db>
 ab1:	72 69                	jb     b1c <sysEnter_Vector-0x12f4e4>
 ab3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ab4:	67 73 2f             	addr16 jae ae6 <sysEnter_Vector-0x12f51a>
 ab7:	73 74                	jae    b2d <sysEnter_Vector-0x12f4d3>
 ab9:	72 74                	jb     b2f <sysEnter_Vector-0x12f4d1>
 abb:	6f                   	outs   dx,DWORD PTR ds:[esi]
 abc:	6c                   	ins    BYTE PTR es:[edi],dx
 abd:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 ac0:	73 74                	jae    b36 <sysEnter_Vector-0x12f4ca>
 ac2:	72 74                	jb     b38 <sysEnter_Vector-0x12f4c8>
 ac4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ac5:	6c                   	ins    BYTE PTR es:[edi],dx
 ac6:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 ac9:	70 75                	jo     b40 <sysEnter_Vector-0x12f4c0>
 acb:	74 00                	je     acd <sysEnter_Vector-0x12f533>
 acd:	73 72                	jae    b41 <sysEnter_Vector-0x12f4bf>
 acf:	63 2f                	arpl   WORD PTR [edi],bp
 ad1:	73 74                	jae    b47 <sysEnter_Vector-0x12f4b9>
 ad3:	72 69                	jb     b3e <sysEnter_Vector-0x12f4c2>
 ad5:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ad6:	67 73 2f             	addr16 jae b08 <sysEnter_Vector-0x12f4f8>
 ad9:	73 74                	jae    b4f <sysEnter_Vector-0x12f4b1>
 adb:	72 74                	jb     b51 <sysEnter_Vector-0x12f4af>
 add:	72 69                	jb     b48 <sysEnter_Vector-0x12f4b8>
 adf:	6d                   	ins    DWORD PTR es:[edi],dx
 ae0:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 ae3:	73 74                	jae    b59 <sysEnter_Vector-0x12f4a7>
 ae5:	72 74                	jb     b5b <sysEnter_Vector-0x12f4a5>
 ae7:	72 69                	jb     b52 <sysEnter_Vector-0x12f4ae>
 ae9:	6d                   	ins    DWORD PTR es:[edi],dx
 aea:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 aed:	72 73                	jb     b62 <sysEnter_Vector-0x12f49e>
 aef:	74 72                	je     b63 <sysEnter_Vector-0x12f49d>
 af1:	49                   	dec    ecx
 af2:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 af5:	63 2f                	arpl   WORD PTR [edi],bp
 af7:	73 74                	jae    b6d <sysEnter_Vector-0x12f493>
 af9:	72 73                	jb     b6e <sysEnter_Vector-0x12f492>
 afb:	74 72                	je     b6f <sysEnter_Vector-0x12f491>
 afd:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 b00:	72 63                	jb     b65 <sysEnter_Vector-0x12f49b>
 b02:	73 69                	jae    b6d <sysEnter_Vector-0x12f493>
 b04:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
 b08:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
 b0b:	72 69                	jb     b76 <sysEnter_Vector-0x12f48a>
 b0d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b0e:	67 00 73 74          	add    BYTE PTR [bp+di+0x74],dh
 b12:	72 73                	jb     b87 <sysEnter_Vector-0x12f479>
 b14:	74 72                	je     b88 <sysEnter_Vector-0x12f478>
 b16:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
 b1a:	61                   	popa   
 b1b:	6c                   	ins    BYTE PTR es:[edi],dx
 b1c:	74 69                	je     b87 <sysEnter_Vector-0x12f479>
 b1e:	6d                   	ins    DWORD PTR es:[edi],dx
 b1f:	65 00 64 61 79       	add    BYTE PTR gs:[ecx+eiz*2+0x79],ah
 b24:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b25:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b26:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
 b29:	73 74                	jae    b9f <sysEnter_Vector-0x12f461>
 b2b:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
 b2e:	73 00                	jae    b30 <sysEnter_Vector-0x12f4d0>
 b30:	67 6d                	ins    DWORD PTR es:[di],dx
 b32:	74 69                	je     b9d <sysEnter_Vector-0x12f463>
 b34:	6d                   	ins    DWORD PTR es:[edi],dx
 b35:	65                   	gs
 b36:	5f                   	pop    edi
 b37:	72 00                	jb     b39 <sysEnter_Vector-0x12f4c7>
 b39:	74 69                	je     ba4 <sysEnter_Vector-0x12f45c>
 b3b:	6d                   	ins    DWORD PTR es:[edi],dx
 b3c:	65                   	gs
 b3d:	72 00                	jb     b3f <sysEnter_Vector-0x12f4c1>
 b3f:	6c                   	ins    BYTE PTR es:[edi],dx
 b40:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b41:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 b44:	74 69                	je     baf <sysEnter_Vector-0x12f451>
 b46:	6d                   	ins    DWORD PTR es:[edi],dx
 b47:	65                   	gs
 b48:	5f                   	pop    edi
 b49:	72 00                	jb     b4b <sysEnter_Vector-0x12f4b5>
 b4b:	5f                   	pop    edi
 b4c:	74 7a                	je     bc8 <sysEnter_Vector-0x12f438>
 b4e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b4f:	61                   	popa   
 b50:	6d                   	ins    DWORD PTR es:[edi],dx
 b51:	65 00 5f 79          	add    BYTE PTR gs:[edi+0x79],bl
 b55:	74 61                	je     bb8 <sysEnter_Vector-0x12f448>
 b57:	62 00                	bound  eax,QWORD PTR [eax]
 b59:	74 69                	je     bc4 <sysEnter_Vector-0x12f43c>
 b5b:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
 b5e:	54                   	push   esp
 b5f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b60:	57                   	push   edi
 b61:	61                   	popa   
 b62:	69 74 00 6d 6b 74 69 	imul   esi,DWORD PTR [eax+eax*1+0x6d],0x6d69746b
 b69:	6d 
 b6a:	65 00 64 61 79       	add    BYTE PTR gs:[ecx+eiz*2+0x79],ah
 b6f:	63 6c 6f 63          	arpl   WORD PTR [edi+ebp*2+0x63],bp
 b73:	6b 00 5f             	imul   eax,DWORD PTR [eax],0x5f
 b76:	64                   	fs
 b77:	61                   	popa   
 b78:	79 6c                	jns    be6 <sysEnter_Vector-0x12f41a>
 b7a:	69 67 68 74 00 6f 76 	imul   esp,DWORD PTR [edi+0x68],0x766f0074
 b81:	65                   	gs
 b82:	72 66                	jb     bea <sysEnter_Vector-0x12f416>
 b84:	6c                   	ins    BYTE PTR es:[edi],dx
 b85:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b86:	77 00                	ja     b88 <sysEnter_Vector-0x12f478>
 b88:	6d                   	ins    DWORD PTR es:[edi],dx
 b89:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b8a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b8b:	74 68                	je     bf5 <sysEnter_Vector-0x12f40b>
 b8d:	00 74 6d 62          	add    BYTE PTR [ebp+ebp*2+0x62],dh
 b91:	75 66                	jne    bf9 <sysEnter_Vector-0x12f407>
 b93:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 b96:	63 2f                	arpl   WORD PTR [edi],bp
 b98:	74 69                	je     c03 <sysEnter_Vector-0x12f3fd>
 b9a:	6d                   	ins    DWORD PTR es:[edi],dx
 b9b:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    edi
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
   5:	28 47 4e             	sub    BYTE PTR [edi+0x4e],al
   8:	55                   	push   ebp
   9:	29 20                	sub    DWORD PTR [eax],esp
   b:	35 2e 33 2e 30       	xor    eax,0x302e332e
	...
