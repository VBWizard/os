
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

30000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:9
 * and open the template in the editor.
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
30000000:	55                   	push   ebp
30000001:	89 e5                	mov    ebp,esp
30000003:	e8 e7 2a 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000008:	05 d0 44 00 00       	add    eax,0x44d0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
    while (*s != (char)c)
3000000d:	eb 17                	jmp    30000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
        if (!*s++)
3000000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000012:	8d 50 01             	lea    edx,[eax+0x1]
30000015:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000018:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000001b:	84 c0                	test   al,al
3000001d:	75 07                	jne    30000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
            return 0;
3000001f:	b8 00 00 00 00       	mov    eax,0x0
30000024:	eb 10                	jmp    30000036 <strchr+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
    while (*s != (char)c)
30000026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000002c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000002f:	38 d0                	cmp    al,dl
30000031:	75 dc                	jne    3000000f <strchr+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
        if (!*s++)
            return 0;
    return (char *)s;
30000033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
}
30000036:	5d                   	pop    ebp
30000037:	c3                   	ret    

30000038 <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:17

char *strchrI(const char *s, int c)
{
30000038:	55                   	push   ebp
30000039:	89 e5                	mov    ebp,esp
3000003b:	e8 af 2a 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000040:	05 98 44 00 00       	add    eax,0x4498
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    while (*s != (char)c)
30000045:	eb 17                	jmp    3000005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
        if (!*s++)
30000047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000004a:	8d 50 01             	lea    edx,[eax+0x1]
3000004d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000050:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000053:	84 c0                	test   al,al
30000055:	75 07                	jne    3000005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
            return 0;
30000057:	b8 00 00 00 00       	mov    eax,0x0
3000005c:	eb 10                	jmp    3000006e <strchrI+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    return (char *)s;
}

char *strchrI(const char *s, int c)
{
    while (*s != (char)c)
3000005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000061:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000064:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000067:	38 d0                	cmp    al,dl
30000069:	75 dc                	jne    30000047 <strchrI+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
        if (!*s++)
            return 0;
    return (char *)s;
3000006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
}
3000006e:	5d                   	pop    ebp
3000006f:	c3                   	ret    

30000070 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:38
 */

#include "strings.h"

VISIBLE int strcspn(char* string, char* chars)
{
30000070:	55                   	push   ebp
30000071:	89 e5                	mov    ebp,esp
30000073:	56                   	push   esi
30000074:	53                   	push   ebx
30000075:	e8 75 2a 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
3000007a:	05 5e 44 00 00       	add    eax,0x445e
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
3000007f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
30000082:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30000085:	89 c1                	mov    ecx,eax
30000087:	eb 29                	jmp    300000b2 <strcspn+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
	for (p = chars; *p != 0; p++) {
30000089:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
3000008c:	eb 15                	jmp    300000a3 <strcspn+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	    if (c == *p) {
3000008e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30000091:	38 c8                	cmp    al,cl
30000093:	75 0b                	jne    300000a0 <strcspn+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
		return s-string;
30000095:	89 da                	mov    edx,ebx
30000097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000009a:	29 c2                	sub    edx,eax
3000009c:	89 d0                	mov    eax,edx
3000009e:	eb 21                	jmp    300000c1 <strcspn+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)
VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
300000a0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
300000a3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000a6:	84 c0                	test   al,al
300000a8:	75 e4                	jne    3000008e <strcspn+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 2)

VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000aa:	83 c3 01             	add    ebx,0x1
300000ad:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
300000b0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 1)
300000b2:	89 c8                	mov    eax,ecx
300000b4:	84 c0                	test   al,al
300000b6:	75 d1                	jne    30000089 <strcspn+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:48
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
300000b8:	89 da                	mov    edx,ebx
300000ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300000bd:	29 c2                	sub    edx,eax
300000bf:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
}
300000c1:	5b                   	pop    ebx
300000c2:	5e                   	pop    esi
300000c3:	5d                   	pop    ebp
300000c4:	c3                   	ret    

300000c5 <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:52

int strcspnI(char* string, char* chars)
{
300000c5:	55                   	push   ebp
300000c6:	89 e5                	mov    ebp,esp
300000c8:	56                   	push   esi
300000c9:	53                   	push   ebx
300000ca:	e8 20 2a 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300000cf:	05 09 44 00 00       	add    eax,0x4409
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
300000d7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
300000da:	89 c1                	mov    ecx,eax
300000dc:	eb 29                	jmp    30000107 <strcspnI+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
	for (p = chars; *p != 0; p++) {
300000de:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
300000e1:	eb 15                	jmp    300000f8 <strcspnI+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	    if (c == *p) {
300000e3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000e6:	38 c8                	cmp    al,cl
300000e8:	75 0b                	jne    300000f5 <strcspnI+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
		return s-string;
300000ea:	89 da                	mov    edx,ebx
300000ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300000ef:	29 c2                	sub    edx,eax
300000f1:	89 d0                	mov    eax,edx
300000f3:	eb 21                	jmp    30000116 <strcspnI+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)
int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
300000f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
300000f8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000fb:	84 c0                	test   al,al
300000fd:	75 e4                	jne    300000e3 <strcspnI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 2)

int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000ff:	83 c3 01             	add    ebx,0x1
30000102:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30000105:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 1)
30000107:	89 c8                	mov    eax,ecx
30000109:	84 c0                	test   al,al
3000010b:	75 d1                	jne    300000de <strcspnI+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:62
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
3000010d:	89 da                	mov    edx,ebx
3000010f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000112:	29 c2                	sub    edx,eax
30000114:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
}
30000116:	5b                   	pop    ebx
30000117:	5e                   	pop    esi
30000118:	5d                   	pop    ebp
30000119:	c3                   	ret    
3000011a:	66 90                	xchg   ax,ax

3000011c <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:41
#include "strings.h"
int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
3000011c:	55                   	push   ebp
3000011d:	89 e5                	mov    ebp,esp
3000011f:	56                   	push   esi
30000120:	53                   	push   ebx
30000121:	e8 fa 29 00 00       	call   30002b20 <__x86.get_pc_thunk.bx>
30000126:	81 c3 b2 43 00 00    	add    ebx,0x43b2
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:45
    static char *lasts;
    register int ch;

    if (s == 0)
3000012c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000130:	75 09                	jne    3000013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:46
	s = lasts;
30000132:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
30000138:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
    do {
	if ((ch = *s++) == '\0')
3000013b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000013e:	8d 50 01             	lea    edx,[eax+0x1]
30000141:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000147:	0f be f0             	movsx  esi,al
3000014a:	85 f6                	test   esi,esi
3000014c:	75 07                	jne    30000155 <strtok+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:49
	    return 0;
3000014e:	b8 00 00 00 00       	mov    eax,0x0
30000153:	eb 57                	jmp    300001ac <strtok+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    } while (strchrI(delim, ch));
30000155:	83 ec 08             	sub    esp,0x8
30000158:	56                   	push   esi
30000159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000015c:	e8 d7 fe ff ff       	call   30000038 <strchrI>
30000161:	83 c4 10             	add    esp,0x10
30000164:	85 c0                	test   eax,eax
30000166:	75 d3                	jne    3000013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
    --s;
30000168:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    lasts = s + strcspnI(s, delim);
3000016c:	83 ec 08             	sub    esp,0x8
3000016f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000175:	e8 4b ff ff ff       	call   300000c5 <strcspnI>
3000017a:	83 c4 10             	add    esp,0x10
3000017d:	89 c2                	mov    edx,eax
3000017f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000182:	01 d0                	add    eax,edx
30000184:	89 83 34 00 00 00    	mov    DWORD PTR [ebx+0x34],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    if (*lasts != 0)
3000018a:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
30000190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000193:	84 c0                	test   al,al
30000195:	74 12                	je     300001a9 <strtok+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
	*lasts++ = 0;
30000197:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
3000019d:	8d 50 01             	lea    edx,[eax+0x1]
300001a0:	89 93 34 00 00 00    	mov    DWORD PTR [ebx+0x34],edx
300001a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    return s;
300001a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
}
300001ac:	8d 65 f8             	lea    esp,[ebp-0x8]
300001af:	5b                   	pop    ebx
300001b0:	5e                   	pop    esi
300001b1:	5d                   	pop    ebp
300001b2:	c3                   	ret    
300001b3:	90                   	nop

300001b4 <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:10
 */

#include "libChrisOS.h"

void reverseI(char s[])
 {
300001b4:	55                   	push   ebp
300001b5:	89 e5                	mov    ebp,esp
300001b7:	53                   	push   ebx
300001b8:	83 ec 14             	sub    esp,0x14
300001bb:	e8 2f 29 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300001c0:	05 18 43 00 00       	add    eax,0x4318
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
300001c5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
300001cc:	83 ec 0c             	sub    esp,0xc
300001cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300001d2:	89 c3                	mov    ebx,eax
300001d4:	e8 58 16 00 00       	call   30001831 <strlenI>
300001d9:	83 c4 10             	add    esp,0x10
300001dc:	83 e8 01             	sub    eax,0x1
300001df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
300001e2:	eb 39                	jmp    3000021d <reverseI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
         c = s[i];
300001e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300001e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300001ea:	01 d0                	add    eax,edx
300001ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300001ef:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         s[i] = s[j];
300001f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300001f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300001f8:	01 c2                	add    edx,eax
300001fa:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
300001fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000200:	01 c8                	add    eax,ecx
30000202:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000205:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[j] = c;
30000207:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
3000020a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000020d:	01 c2                	add    edx,eax
3000020f:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
30000213:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 3)
void reverseI(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
30000215:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
30000219:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 1)
3000021d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000220:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30000223:	7c bf                	jl     300001e4 <reverseI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:19
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
30000225:	90                   	nop
30000226:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000229:	c9                   	leave  
3000022a:	c3                   	ret    

3000022b <itoa>:
itoa():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:22

VISIBLE void itoa(int n, char s[])
 {
3000022b:	55                   	push   ebp
3000022c:	89 e5                	mov    ebp,esp
3000022e:	53                   	push   ebx
3000022f:	83 ec 14             	sub    esp,0x14
30000232:	e8 b8 28 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000237:	05 a1 42 00 00       	add    eax,0x42a1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:25
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
3000023c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000023f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
30000242:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000246:	79 03                	jns    3000024b <itoa+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
         n = -n;          /* make n positive */
30000248:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
     i = 0;
3000024b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:29 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
30000252:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000255:	8d 50 01             	lea    edx,[eax+0x1]
30000258:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000025b:	89 c2                	mov    edx,eax
3000025d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000260:	8d 1c 02             	lea    ebx,[edx+eax*1]
30000263:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000266:	ba 67 66 66 66       	mov    edx,0x66666667
3000026b:	89 c8                	mov    eax,ecx
3000026d:	f7 ea                	imul   edx
3000026f:	c1 fa 02             	sar    edx,0x2
30000272:	89 c8                	mov    eax,ecx
30000274:	c1 f8 1f             	sar    eax,0x1f
30000277:	29 c2                	sub    edx,eax
30000279:	89 d0                	mov    eax,edx
3000027b:	c1 e0 02             	shl    eax,0x2
3000027e:	01 d0                	add    eax,edx
30000280:	01 c0                	add    eax,eax
30000282:	29 c1                	sub    ecx,eax
30000284:	89 ca                	mov    edx,ecx
30000286:	89 d0                	mov    eax,edx
30000288:	83 c0 30             	add    eax,0x30
3000028b:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
3000028d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000290:	ba 67 66 66 66       	mov    edx,0x66666667
30000295:	89 c8                	mov    eax,ecx
30000297:	f7 ea                	imul   edx
30000299:	c1 fa 02             	sar    edx,0x2
3000029c:	89 c8                	mov    eax,ecx
3000029e:	c1 f8 1f             	sar    eax,0x1f
300002a1:	29 c2                	sub    edx,eax
300002a3:	89 d0                	mov    eax,edx
300002a5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
300002a8:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
300002ac:	7f a4                	jg     30000252 <itoa+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31
     if (sign < 0)
300002ae:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
300002b2:	79 13                	jns    300002c7 <itoa+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
         s[i++] = '-';
300002b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300002b7:	8d 50 01             	lea    edx,[eax+0x1]
300002ba:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300002bd:	89 c2                	mov    edx,eax
300002bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300002c2:	01 d0                	add    eax,edx
300002c4:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
     s[i] = '\0';
300002c7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300002ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300002cd:	01 d0                	add    eax,edx
300002cf:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     reverseI(s);
300002d2:	83 ec 0c             	sub    esp,0xc
300002d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300002d8:	e8 d7 fe ff ff       	call   300001b4 <reverseI>
300002dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
 }
300002e0:	90                   	nop
300002e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300002e4:	c9                   	leave  
300002e5:	c3                   	ret    

300002e6 <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:38

 void itoaI(int n, char s[])
 {
300002e6:	55                   	push   ebp
300002e7:	89 e5                	mov    ebp,esp
300002e9:	53                   	push   ebx
300002ea:	83 ec 14             	sub    esp,0x14
300002ed:	e8 fd 27 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300002f2:	05 e6 41 00 00       	add    eax,0x41e6
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:41
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
300002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300002fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
300002fd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000301:	79 03                	jns    30000306 <itoaI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:42
         n = -n;          /* make n positive */
30000303:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:43
     i = 0;
30000306:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:45 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
3000030d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000310:	8d 50 01             	lea    edx,[eax+0x1]
30000313:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000316:	89 c2                	mov    edx,eax
30000318:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000031b:	8d 1c 02             	lea    ebx,[edx+eax*1]
3000031e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000321:	ba 67 66 66 66       	mov    edx,0x66666667
30000326:	89 c8                	mov    eax,ecx
30000328:	f7 ea                	imul   edx
3000032a:	c1 fa 02             	sar    edx,0x2
3000032d:	89 c8                	mov    eax,ecx
3000032f:	c1 f8 1f             	sar    eax,0x1f
30000332:	29 c2                	sub    edx,eax
30000334:	89 d0                	mov    eax,edx
30000336:	c1 e0 02             	shl    eax,0x2
30000339:	01 d0                	add    eax,edx
3000033b:	01 c0                	add    eax,eax
3000033d:	29 c1                	sub    ecx,eax
3000033f:	89 ca                	mov    edx,ecx
30000341:	89 d0                	mov    eax,edx
30000343:	83 c0 30             	add    eax,0x30
30000346:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
30000348:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
3000034b:	ba 67 66 66 66       	mov    edx,0x66666667
30000350:	89 c8                	mov    eax,ecx
30000352:	f7 ea                	imul   edx
30000354:	c1 fa 02             	sar    edx,0x2
30000357:	89 c8                	mov    eax,ecx
30000359:	c1 f8 1f             	sar    eax,0x1f
3000035c:	29 c2                	sub    edx,eax
3000035e:	89 d0                	mov    eax,edx
30000360:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
30000363:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000367:	7f a4                	jg     3000030d <itoaI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:47
     if (sign < 0)
30000369:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
3000036d:	79 13                	jns    30000382 <itoaI+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:48
         s[i++] = '-';
3000036f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000372:	8d 50 01             	lea    edx,[eax+0x1]
30000375:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000378:	89 c2                	mov    edx,eax
3000037a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000037d:	01 d0                	add    eax,edx
3000037f:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
     s[i] = '\0';
30000382:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000385:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000388:	01 d0                	add    eax,edx
3000038a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
     reverseI(s);
3000038d:	83 ec 0c             	sub    esp,0xc
30000390:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000393:	e8 1c fe ff ff       	call   300001b4 <reverseI>
30000398:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:51
 }
3000039b:	90                   	nop
3000039c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000039f:	c9                   	leave  
300003a0:	c3                   	ret    

300003a1 <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:55

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
VISIBLE int atoi(char *str)
{
300003a1:	55                   	push   ebp
300003a2:	89 e5                	mov    ebp,esp
300003a4:	83 ec 10             	sub    esp,0x10
300003a7:	e8 43 27 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300003ac:	05 2c 41 00 00       	add    eax,0x412c
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:56
    int res = 0; // Initialize result
300003b1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
300003b8:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
300003bf:	eb 28                	jmp    300003e9 <atoi+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:61 (discriminator 3)
        res = res*10 + str[i] - '0';
300003c1:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
300003c4:	89 d0                	mov    eax,edx
300003c6:	c1 e0 02             	shl    eax,0x2
300003c9:	01 d0                	add    eax,edx
300003cb:	01 c0                	add    eax,eax
300003cd:	89 c1                	mov    ecx,eax
300003cf:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
300003d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300003d5:	01 d0                	add    eax,edx
300003d7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300003da:	0f be c0             	movsx  eax,al
300003dd:	01 c8                	add    eax,ecx
300003df:	83 e8 30             	sub    eax,0x30
300003e2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
300003e5:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 1)
300003e9:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
300003ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300003ef:	01 d0                	add    eax,edx
300003f1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300003f4:	84 c0                	test   al,al
300003f6:	75 c9                	jne    300003c1 <atoi+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:64
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
300003f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:65
300003fb:	c9                   	leave  
300003fc:	c3                   	ret    
300003fd:	66 90                	xchg   ax,ax
300003ff:	90                   	nop

30000400 <getenv>:
getenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:10
 */
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
30000400:	55                   	push   ebp
30000401:	89 e5                	mov    ebp,esp
30000403:	53                   	push   ebx
30000404:	83 ec 14             	sub    esp,0x14
30000407:	e8 14 27 00 00       	call   30002b20 <__x86.get_pc_thunk.bx>
3000040c:	81 c3 cc 40 00 00    	add    ebx,0x40cc
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11
    for (int cnt=0;cnt<100;cnt++)
30000412:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
30000419:	eb 7b                	jmp    30000496 <getenv+0x96>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:12
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
3000041b:	83 ec 0c             	sub    esp,0xc
3000041e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000421:	e8 0b 14 00 00       	call   30001831 <strlenI>
30000426:	83 c4 10             	add    esp,0x10
30000429:	89 c1                	mov    ecx,eax
3000042b:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000431:	8b 00                	mov    eax,DWORD PTR [eax]
30000433:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000436:	c1 e2 02             	shl    edx,0x2
30000439:	01 d0                	add    eax,edx
3000043b:	8b 00                	mov    eax,DWORD PTR [eax]
3000043d:	83 ec 04             	sub    esp,0x4
30000440:	51                   	push   ecx
30000441:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000444:	50                   	push   eax
30000445:	e8 81 14 00 00       	call   300018cb <strncmpI>
3000044a:	83 c4 10             	add    esp,0x10
3000044d:	85 c0                	test   eax,eax
3000044f:	75 41                	jne    30000492 <getenv+0x92>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:14
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
30000451:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000457:	8b 00                	mov    eax,DWORD PTR [eax]
30000459:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
3000045c:	c1 e2 02             	shl    edx,0x2
3000045f:	01 d0                	add    eax,edx
30000461:	8b 00                	mov    eax,DWORD PTR [eax]
30000463:	83 ec 08             	sub    esp,0x8
30000466:	8d 93 08 fb ff ff    	lea    edx,[ebx-0x4f8]
3000046c:	52                   	push   edx
3000046d:	50                   	push   eax
3000046e:	e8 35 19 00 00       	call   30001da8 <strstrI>
30000473:	83 c4 10             	add    esp,0x10
30000476:	83 c0 01             	add    eax,0x1
30000479:	83 ec 04             	sub    esp,0x4
3000047c:	6a 32                	push   0x32
3000047e:	50                   	push   eax
3000047f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000482:	e8 ad 14 00 00       	call   30001934 <strncpyI>
30000487:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:15
            return cnt+1;
3000048a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000048d:	83 c0 01             	add    eax,0x1
30000490:	eb 13                	jmp    300004a5 <getenv+0xa5>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 2)
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
    for (int cnt=0;cnt<100;cnt++)
30000492:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 1)
30000496:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
3000049a:	0f 8e 7b ff ff ff    	jle    3000041b <getenv+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:17
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
            return cnt+1;
        }
    return 0;
300004a0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:18
}
300004a5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300004a8:	c9                   	leave  
300004a9:	c3                   	ret    

300004aa <setenv>:
setenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:21

VISIBLE void  setenv(char *varname, char *value)
{
300004aa:	55                   	push   ebp
300004ab:	89 e5                	mov    ebp,esp
300004ad:	53                   	push   ebx
300004ae:	83 ec 14             	sub    esp,0x14
300004b1:	e8 6a 26 00 00       	call   30002b20 <__x86.get_pc_thunk.bx>
300004b6:	81 c3 22 40 00 00    	add    ebx,0x4022
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:22
    uint32_t lastPopulated = 0;
300004bc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24
    
    for (int cnt=0;cnt<100;cnt++)
300004c3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
300004ca:	e9 d5 00 00 00       	jmp    300005a4 <setenv+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:25
        if (processEnvp[cnt]!=0)
300004cf:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300004d5:	8b 00                	mov    eax,DWORD PTR [eax]
300004d7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300004da:	c1 e2 02             	shl    edx,0x2
300004dd:	01 d0                	add    eax,edx
300004df:	8b 00                	mov    eax,DWORD PTR [eax]
300004e1:	85 c0                	test   eax,eax
300004e3:	0f 84 b7 00 00 00    	je     300005a0 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:27
        {
            lastPopulated = (uint32_t)processEnvp[cnt];
300004e9:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300004ef:	8b 00                	mov    eax,DWORD PTR [eax]
300004f1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300004f4:	c1 e2 02             	shl    edx,0x2
300004f7:	01 d0                	add    eax,edx
300004f9:	8b 00                	mov    eax,DWORD PTR [eax]
300004fb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:28
            if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
300004fe:	83 ec 0c             	sub    esp,0xc
30000501:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000504:	e8 28 13 00 00       	call   30001831 <strlenI>
30000509:	83 c4 10             	add    esp,0x10
3000050c:	89 c1                	mov    ecx,eax
3000050e:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000514:	8b 00                	mov    eax,DWORD PTR [eax]
30000516:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000519:	c1 e2 02             	shl    edx,0x2
3000051c:	01 d0                	add    eax,edx
3000051e:	8b 00                	mov    eax,DWORD PTR [eax]
30000520:	83 ec 04             	sub    esp,0x4
30000523:	51                   	push   ecx
30000524:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000527:	50                   	push   eax
30000528:	e8 9e 13 00 00       	call   300018cb <strncmpI>
3000052d:	83 c4 10             	add    esp,0x10
30000530:	85 c0                	test   eax,eax
30000532:	75 6c                	jne    300005a0 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:30
            {
                strcpyI(processEnvp[cnt],varname);
30000534:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000053a:	8b 00                	mov    eax,DWORD PTR [eax]
3000053c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
3000053f:	c1 e2 02             	shl    edx,0x2
30000542:	01 d0                	add    eax,edx
30000544:	8b 00                	mov    eax,DWORD PTR [eax]
30000546:	83 ec 08             	sub    esp,0x8
30000549:	ff 75 08             	push   DWORD PTR [ebp+0x8]
3000054c:	50                   	push   eax
3000054d:	e8 9a 11 00 00       	call   300016ec <strcpyI>
30000552:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:31
                strcatI(processEnvp[cnt],"=");
30000555:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000055b:	8b 00                	mov    eax,DWORD PTR [eax]
3000055d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000560:	c1 e2 02             	shl    edx,0x2
30000563:	01 d0                	add    eax,edx
30000565:	8b 00                	mov    eax,DWORD PTR [eax]
30000567:	83 ec 08             	sub    esp,0x8
3000056a:	8d 93 08 fb ff ff    	lea    edx,[ebx-0x4f8]
30000570:	52                   	push   edx
30000571:	50                   	push   eax
30000572:	e8 27 10 00 00       	call   3000159e <strcatI>
30000577:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:32
                strcatI(processEnvp[cnt],value);
3000057a:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000580:	8b 00                	mov    eax,DWORD PTR [eax]
30000582:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000585:	c1 e2 02             	shl    edx,0x2
30000588:	01 d0                	add    eax,edx
3000058a:	8b 00                	mov    eax,DWORD PTR [eax]
3000058c:	83 ec 08             	sub    esp,0x8
3000058f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000592:	50                   	push   eax
30000593:	e8 06 10 00 00       	call   3000159e <strcatI>
30000598:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:33
                return;
3000059b:	e9 c6 00 00 00       	jmp    30000666 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 2)

VISIBLE void  setenv(char *varname, char *value)
{
    uint32_t lastPopulated = 0;
    
    for (int cnt=0;cnt<100;cnt++)
300005a0:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 1)
300005a4:	83 7d f0 63          	cmp    DWORD PTR [ebp-0x10],0x63
300005a8:	0f 8e 21 ff ff ff    	jle    300004cf <setenv+0x25>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
300005ae:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
300005b5:	e9 a2 00 00 00       	jmp    3000065c <setenv+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:37
        if (processEnvp[cnt]==0)
300005ba:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005c0:	8b 00                	mov    eax,DWORD PTR [eax]
300005c2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005c5:	c1 e2 02             	shl    edx,0x2
300005c8:	01 d0                	add    eax,edx
300005ca:	8b 00                	mov    eax,DWORD PTR [eax]
300005cc:	85 c0                	test   eax,eax
300005ce:	0f 85 84 00 00 00    	jne    30000658 <setenv+0x1ae>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:39
        {
            processEnvp[cnt]=(char*)lastPopulated+512;
300005d4:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005da:	8b 00                	mov    eax,DWORD PTR [eax]
300005dc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005df:	c1 e2 02             	shl    edx,0x2
300005e2:	01 d0                	add    eax,edx
300005e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300005e7:	81 c2 00 02 00 00    	add    edx,0x200
300005ed:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:40
            strcpyI(processEnvp[cnt],varname);
300005ef:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005f5:	8b 00                	mov    eax,DWORD PTR [eax]
300005f7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005fa:	c1 e2 02             	shl    edx,0x2
300005fd:	01 d0                	add    eax,edx
300005ff:	8b 00                	mov    eax,DWORD PTR [eax]
30000601:	83 ec 08             	sub    esp,0x8
30000604:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000607:	50                   	push   eax
30000608:	e8 df 10 00 00       	call   300016ec <strcpyI>
3000060d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41
            strcatI(processEnvp[cnt],"=");
30000610:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000616:	8b 00                	mov    eax,DWORD PTR [eax]
30000618:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
3000061b:	c1 e2 02             	shl    edx,0x2
3000061e:	01 d0                	add    eax,edx
30000620:	8b 00                	mov    eax,DWORD PTR [eax]
30000622:	83 ec 08             	sub    esp,0x8
30000625:	8d 93 08 fb ff ff    	lea    edx,[ebx-0x4f8]
3000062b:	52                   	push   edx
3000062c:	50                   	push   eax
3000062d:	e8 6c 0f 00 00       	call   3000159e <strcatI>
30000632:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:42
            strcatI(processEnvp[cnt],value);
30000635:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000063b:	8b 00                	mov    eax,DWORD PTR [eax]
3000063d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30000640:	c1 e2 02             	shl    edx,0x2
30000643:	01 d0                	add    eax,edx
30000645:	8b 00                	mov    eax,DWORD PTR [eax]
30000647:	83 ec 08             	sub    esp,0x8
3000064a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000064d:	50                   	push   eax
3000064e:	e8 4b 0f 00 00       	call   3000159e <strcatI>
30000653:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:43
            return;
30000656:	eb 0e                	jmp    30000666 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 2)
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
30000658:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 1)
3000065c:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
30000660:	0f 8e 54 ff ff ff    	jle    300005ba <setenv+0x110>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:47
            strcatI(processEnvp[cnt],value);
            return;
        }            
    //NOTE: if we get here, the value is thrown away!        
    
}
30000666:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000669:	c9                   	leave  
3000066a:	c3                   	ret    
3000066b:	90                   	nop

3000066c <open>:
open():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:10
 */

#include "libChrisOS.h"

VISIBLE void* open(char* path, const char* mode)
{
3000066c:	55                   	push   ebp
3000066d:	89 e5                	mov    ebp,esp
3000066f:	53                   	push   ebx
30000670:	83 ec 04             	sub    esp,0x4
30000673:	e8 77 24 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000678:	05 60 3e 00 00       	add    eax,0x3e60
/home/yogi/src/os/aproj/libChrisOS/src/file.c:11
    return (void*)do_syscall2(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode);
3000067d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
30000680:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000683:	83 ec 04             	sub    esp,0x4
30000686:	51                   	push   ecx
30000687:	52                   	push   edx
30000688:	6a 02                	push   0x2
3000068a:	89 c3                	mov    ebx,eax
3000068c:	e8 99 02 00 00       	call   3000092a <do_syscall2>
30000691:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:12
}
30000694:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000697:	c9                   	leave  
30000698:	c3                   	ret    

30000699 <close>:
close():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:15

VISIBLE void close(void* handle)
{
30000699:	55                   	push   ebp
3000069a:	89 e5                	mov    ebp,esp
3000069c:	53                   	push   ebx
3000069d:	83 ec 04             	sub    esp,0x4
300006a0:	e8 4a 24 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300006a5:	05 33 3e 00 00       	add    eax,0x3e33
/home/yogi/src/os/aproj/libChrisOS/src/file.c:16
    do_syscall1(SYSCALL_CLOSE, (uint32_t)handle);
300006aa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300006ad:	83 ec 08             	sub    esp,0x8
300006b0:	52                   	push   edx
300006b1:	6a 03                	push   0x3
300006b3:	89 c3                	mov    ebx,eax
300006b5:	e8 ae 02 00 00       	call   30000968 <do_syscall1>
300006ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:17
}
300006bd:	90                   	nop
300006be:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300006c1:	c9                   	leave  
300006c2:	c3                   	ret    

300006c3 <read>:
read():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:20

VISIBLE int read(void* handle, void *buffer, int size, int length)
{
300006c3:	55                   	push   ebp
300006c4:	89 e5                	mov    ebp,esp
300006c6:	56                   	push   esi
300006c7:	53                   	push   ebx
300006c8:	e8 22 24 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300006cd:	05 0b 3e 00 00       	add    eax,0x3e0b
/home/yogi/src/os/aproj/libChrisOS/src/file.c:21
    return do_syscall4(SYSCALL_READ, (uint32_t)handle, (uint32_t)buffer, size, length);
300006d2:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
300006d5:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
300006d8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
300006db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300006de:	83 ec 0c             	sub    esp,0xc
300006e1:	56                   	push   esi
300006e2:	53                   	push   ebx
300006e3:	51                   	push   ecx
300006e4:	52                   	push   edx
300006e5:	6a 04                	push   0x4
300006e7:	89 c3                	mov    ebx,eax
300006e9:	e8 c6 01 00 00       	call   300008b4 <do_syscall4>
300006ee:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:22
}
300006f1:	8d 65 f8             	lea    esp,[ebp-0x8]
300006f4:	5b                   	pop    ebx
300006f5:	5e                   	pop    esi
300006f6:	5d                   	pop    ebp
300006f7:	c3                   	ret    

300006f8 <write>:
write():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:25

VISIBLE int write(void* handle, void *buffer, int size, int length)
{
300006f8:	55                   	push   ebp
300006f9:	89 e5                	mov    ebp,esp
300006fb:	56                   	push   esi
300006fc:	53                   	push   ebx
300006fd:	e8 ed 23 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000702:	05 d6 3d 00 00       	add    eax,0x3dd6
/home/yogi/src/os/aproj/libChrisOS/src/file.c:26
    return do_syscall4(SYSCALL_WRITE, (uint32_t)handle, (uint32_t)buffer, size, length);
30000707:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
3000070a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
3000070d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
30000710:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000713:	83 ec 0c             	sub    esp,0xc
30000716:	56                   	push   esi
30000717:	53                   	push   ebx
30000718:	51                   	push   ecx
30000719:	52                   	push   edx
3000071a:	6a 05                	push   0x5
3000071c:	89 c3                	mov    ebx,eax
3000071e:	e8 91 01 00 00       	call   300008b4 <do_syscall4>
30000723:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:27
}
30000726:	8d 65 f8             	lea    esp,[ebp-0x8]
30000729:	5b                   	pop    ebx
3000072a:	5e                   	pop    esi
3000072b:	5d                   	pop    ebp
3000072c:	c3                   	ret    

3000072d <getdir>:
getdir():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:31


VISIBLE int getdir(char* path, char *buffer, int bufferCount)
{
3000072d:	55                   	push   ebp
3000072e:	89 e5                	mov    ebp,esp
30000730:	53                   	push   ebx
30000731:	83 ec 04             	sub    esp,0x4
30000734:	e8 b6 23 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000739:	05 9f 3d 00 00       	add    eax,0x3d9f
/home/yogi/src/os/aproj/libChrisOS/src/file.c:32
    return do_syscall3(SYSCALL_GETDENTS, (uint32_t)path, (uint32_t)buffer, bufferCount);
3000073e:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
30000741:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
30000744:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000747:	53                   	push   ebx
30000748:	51                   	push   ecx
30000749:	52                   	push   edx
3000074a:	68 04 03 00 00       	push   0x304
3000074f:	89 c3                	mov    ebx,eax
30000751:	e8 98 01 00 00       	call   300008ee <do_syscall3>
30000756:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:33
}
30000759:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000075c:	c9                   	leave  
3000075d:	c3                   	ret    
3000075e:	66 90                	xchg   ax,ax

30000760 <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
30000760:	55                   	push   ebp
30000761:	89 e5                	mov    ebp,esp
30000763:	53                   	push   ebx
30000764:	e8 86 23 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000769:	05 6f 3d 00 00       	add    eax,0x3d6f
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
3000076e:	b8 05 00 00 00       	mov    eax,0x5
30000773:	bb 01 00 00 00       	mov    ebx,0x1
30000778:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000077b:	89 d1                	mov    ecx,edx
3000077d:	e8 fc ff ff ff       	call   3000077e <puts+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
30000782:	90                   	nop
30000783:	5b                   	pop    ebx
30000784:	5d                   	pop    ebp
30000785:	c3                   	ret    

30000786 <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
30000786:	55                   	push   ebp
30000787:	89 e5                	mov    ebp,esp
30000789:	53                   	push   ebx
3000078a:	83 ec 14             	sub    esp,0x14
3000078d:	e8 5d 23 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000792:	05 46 3d 00 00       	add    eax,0x3d46
30000797:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000079a:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
3000079d:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
300007a3:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
300007a7:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
300007aa:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
300007ae:	b8 05 00 00 00       	mov    eax,0x5
300007b3:	bb 01 00 00 00       	mov    ebx,0x1
300007b8:	8d 55 fa             	lea    edx,[ebp-0x6]
300007bb:	89 d1                	mov    ecx,edx
300007bd:	e8 fc ff ff ff       	call   300007be <putc+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
300007c2:	90                   	nop
300007c3:	83 c4 14             	add    esp,0x14
300007c6:	5b                   	pop    ebx
300007c7:	5d                   	pop    ebp
300007c8:	c3                   	ret    

300007c9 <getc>:
getc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:30

VISIBLE char getc()
{
300007c9:	55                   	push   ebp
300007ca:	89 e5                	mov    ebp,esp
300007cc:	53                   	push   ebx
300007cd:	83 ec 10             	sub    esp,0x10
300007d0:	e8 1a 23 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300007d5:	05 03 3d 00 00       	add    eax,0x3d03
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32
    char c;
    READCHAR(c)
300007da:	b8 04 00 00 00       	mov    eax,0x4
300007df:	ba 00 00 00 00       	mov    edx,0x0
300007e4:	89 d3                	mov    ebx,edx
300007e6:	e8 fc ff ff ff       	call   300007e7 <getc+0x1e>
300007eb:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:33
    return c;
300007ee:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:34
}
300007f2:	83 c4 10             	add    esp,0x10
300007f5:	5b                   	pop    ebx
300007f6:	5d                   	pop    ebp
300007f7:	c3                   	ret    

300007f8 <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
300007f8:	55                   	push   ebp
300007f9:	89 e5                	mov    ebp,esp
300007fb:	53                   	push   ebx
300007fc:	83 ec 14             	sub    esp,0x14
300007ff:	e8 eb 22 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000804:	05 d4 3c 00 00       	add    eax,0x3cd4
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:40
    char inchar;
    int len=0;
30000809:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:41
    char lbuf[2]={0,0};
30000810:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
30000814:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:43
    
    if (stream!=1)
30000818:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
3000081c:	74 19                	je     30000837 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:45
    {
        printI("Stream %u not implemented\n",stream);
3000081e:	83 ec 08             	sub    esp,0x8
30000821:	ff 75 10             	push   DWORD PTR [ebp+0x10]
30000824:	8d 90 0a fb ff ff    	lea    edx,[eax-0x4f6]
3000082a:	52                   	push   edx
3000082b:	89 c3                	mov    ebx,eax
3000082d:	e8 b0 02 00 00       	call   30000ae2 <printI>
30000832:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46 (discriminator 1)
        getsError: goto getsError;
30000835:	eb fe                	jmp    30000835 <gets+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    }
    
    while (1==1)
    {
        READCHAR(inchar)
30000837:	b8 04 00 00 00       	mov    eax,0x4
3000083c:	ba 00 00 00 00       	mov    edx,0x0
30000841:	89 d3                	mov    ebx,edx
30000843:	e8 fc ff ff ff       	call   30000844 <gets+0x4c>
30000848:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52
        if (inchar=='\b' && len>0)
3000084b:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
3000084f:	75 17                	jne    30000868 <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52 (discriminator 1)
30000851:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
30000855:	7e 11                	jle    30000868 <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54
        {
            buffer[len]=0;
30000857:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
3000085a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000085d:	01 d0                	add    eax,edx
3000085f:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:55
            len--;
30000862:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
30000866:	eb 43                	jmp    300008ab <gets+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:57
        }
        else if (inchar!=0)
30000868:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
3000086c:	74 33                	je     300008a1 <gets+0xa9>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:59
        {
            lbuf[0]=inchar;
3000086e:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
30000872:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
30000875:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000878:	8d 50 01             	lea    edx,[eax+0x1]
3000087b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000087e:	89 c2                	mov    edx,eax
30000880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000883:	01 c2                	add    edx,eax
30000885:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
30000889:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
3000088b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000088e:	83 c0 01             	add    eax,0x1
30000891:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
30000894:	7d 06                	jge    3000089c <gets+0xa4>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63 (discriminator 1)
30000896:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
3000089a:	75 9b                	jne    30000837 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:65
            
                return len;
3000089c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000089f:	eb 0c                	jmp    300008ad <gets+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:68
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
300008a1:	b8 02 03 00 00       	mov    eax,0x302
300008a6:	e8 fc ff ff ff       	call   300008a7 <gets+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:70 (discriminator 2)

    }
300008ab:	eb 8a                	jmp    30000837 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:71
}
300008ad:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300008b0:	c9                   	leave  
300008b1:	c3                   	ret    
300008b2:	66 90                	xchg   ax,ax

300008b4 <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:17
extern void sysEnter_Vector();
bool libcInitialized = false;


int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)
{
300008b4:	55                   	push   ebp
300008b5:	89 e5                	mov    ebp,esp
300008b7:	56                   	push   esi
300008b8:	53                   	push   ebx
300008b9:	83 ec 10             	sub    esp,0x10
300008bc:	e8 2e 22 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300008c1:	05 17 3c 00 00       	add    eax,0x3c17
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
    int retVal=0;
300008c6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    SYSCALL4(callnum, param1, param2, param3, param4, retVal);
300008cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300008d0:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
300008d3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
300008d6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
300008d9:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
300008dc:	e8 fc ff ff ff       	call   300008dd <do_syscall4+0x29>
300008e1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
    return retVal;
300008e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:21
}
300008e7:	83 c4 10             	add    esp,0x10
300008ea:	5b                   	pop    ebx
300008eb:	5e                   	pop    esi
300008ec:	5d                   	pop    ebp
300008ed:	c3                   	ret    

300008ee <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:24

int do_syscall3(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
300008ee:	55                   	push   ebp
300008ef:	89 e5                	mov    ebp,esp
300008f1:	56                   	push   esi
300008f2:	53                   	push   ebx
300008f3:	83 ec 10             	sub    esp,0x10
300008f6:	e8 f4 21 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300008fb:	05 dd 3b 00 00       	add    eax,0x3bdd
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25
    int retVal=0;
30000900:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    SYSCALL3(callnum, param1, param2, param3, retVal);
30000907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000090a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
3000090d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000910:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
30000913:	be 00 00 00 00       	mov    esi,0x0
30000918:	e8 fc ff ff ff       	call   30000919 <do_syscall3+0x2b>
3000091d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
    return retVal;
30000920:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:28
}
30000923:	83 c4 10             	add    esp,0x10
30000926:	5b                   	pop    ebx
30000927:	5e                   	pop    esi
30000928:	5d                   	pop    ebp
30000929:	c3                   	ret    

3000092a <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:31

int do_syscall2(int callnum, uint32_t param1, uint32_t param2)
{
3000092a:	55                   	push   ebp
3000092b:	89 e5                	mov    ebp,esp
3000092d:	56                   	push   esi
3000092e:	53                   	push   ebx
3000092f:	83 ec 10             	sub    esp,0x10
30000932:	e8 b8 21 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000937:	05 a1 3b 00 00       	add    eax,0x3ba1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32
    int retVal=0;
3000093c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    SYSCALL2(callnum, param1, param2, retVal);
30000943:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000946:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
30000949:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
3000094c:	ba 00 00 00 00       	mov    edx,0x0
30000951:	be 00 00 00 00       	mov    esi,0x0
30000956:	e8 fc ff ff ff       	call   30000957 <do_syscall2+0x2d>
3000095b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
    return retVal;
3000095e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:35
}
30000961:	83 c4 10             	add    esp,0x10
30000964:	5b                   	pop    ebx
30000965:	5e                   	pop    esi
30000966:	5d                   	pop    ebp
30000967:	c3                   	ret    

30000968 <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:38

int do_syscall1(int callnum, uint32_t param1)
{
30000968:	55                   	push   ebp
30000969:	89 e5                	mov    ebp,esp
3000096b:	56                   	push   esi
3000096c:	53                   	push   ebx
3000096d:	83 ec 10             	sub    esp,0x10
30000970:	e8 7a 21 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000975:	05 63 3b 00 00       	add    eax,0x3b63
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39
    int retVal=0;
3000097a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    SYSCALL1(callnum, param1, retVal);
30000981:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000984:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
30000987:	b9 00 00 00 00       	mov    ecx,0x0
3000098c:	ba 00 00 00 00       	mov    edx,0x0
30000991:	be 00 00 00 00       	mov    esi,0x0
30000996:	e8 fc ff ff ff       	call   30000997 <do_syscall1+0x2f>
3000099b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
    return retVal;
3000099e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:42
}
300009a1:	83 c4 10             	add    esp,0x10
300009a4:	5b                   	pop    ebx
300009a5:	5e                   	pop    esi
300009a6:	5d                   	pop    ebp
300009a7:	c3                   	ret    

300009a8 <do_syscall0>:
do_syscall0():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:45

int do_syscall0(int callnum)
{
300009a8:	55                   	push   ebp
300009a9:	89 e5                	mov    ebp,esp
300009ab:	56                   	push   esi
300009ac:	53                   	push   ebx
300009ad:	83 ec 10             	sub    esp,0x10
300009b0:	e8 3a 21 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300009b5:	05 23 3b 00 00       	add    eax,0x3b23
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46
    int retVal=0;
300009ba:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:47
    SYSCALL0(callnum, retVal);
300009c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300009c4:	bb 00 00 00 00       	mov    ebx,0x0
300009c9:	b9 00 00 00 00       	mov    ecx,0x0
300009ce:	ba 00 00 00 00       	mov    edx,0x0
300009d3:	be 00 00 00 00       	mov    esi,0x0
300009d8:	e8 fc ff ff ff       	call   300009d9 <do_syscall0+0x31>
300009dd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
    return retVal;
300009e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:49
}
300009e3:	83 c4 10             	add    esp,0x10
300009e6:	5b                   	pop    ebx
300009e7:	5e                   	pop    esi
300009e8:	5d                   	pop    ebp
300009e9:	c3                   	ret    

300009ea <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:52

VISIBLE void __attribute__((constructor)) libc_init()
{
300009ea:	55                   	push   ebp
300009eb:	89 e5                	mov    ebp,esp
300009ed:	53                   	push   ebx
300009ee:	83 ec 04             	sub    esp,0x4
300009f1:	e8 2a 21 00 00       	call   30002b20 <__x86.get_pc_thunk.bx>
300009f6:	81 c3 e2 3a 00 00    	add    ebx,0x3ae2
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53
    printdI(DEBUG_LIBC,"***libc_init called\n***");
300009fc:	83 ec 08             	sub    esp,0x8
300009ff:	8d 83 28 fb ff ff    	lea    eax,[ebx-0x4d8]
30000a05:	50                   	push   eax
30000a06:	68 00 00 00 02       	push   0x2000000
30000a0b:	e8 06 01 00 00       	call   30000b16 <printdI>
30000a10:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:54
    if (!libcInitialized)
30000a13:	0f b6 83 38 00 00 00 	movzx  eax,BYTE PTR [ebx+0x38]
30000a1a:	83 f0 01             	xor    eax,0x1
30000a1d:	84 c0                	test   al,al
30000a1f:	74 56                	je     30000a77 <libc_init+0x8d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:56
    {
        initmalloc();
30000a21:	e8 82 04 00 00       	call   30000ea8 <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:58
        //processEnvp = envp;
        __asm__("mov %0,[ebp+52]\n":"=a" (processEnvp));
30000a26:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
30000a29:	89 c2                	mov    edx,eax
30000a2b:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000a31:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:59
        do_syscall0(SYSCALL_INVALID);
30000a33:	83 ec 0c             	sub    esp,0xc
30000a36:	6a 00                	push   0x0
30000a38:	e8 6b ff ff ff       	call   300009a8 <do_syscall0>
30000a3d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:60
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
30000a40:	8d 83 b7 c5 ff ff    	lea    eax,[ebx-0x3a49]
30000a46:	83 ec 08             	sub    esp,0x8
30000a49:	50                   	push   eax
30000a4a:	68 63 01 00 00       	push   0x163
30000a4f:	e8 14 ff ff ff       	call   30000968 <do_syscall1>
30000a54:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
        libcInitialized = true;
30000a57:	c6 83 38 00 00 00 01 	mov    BYTE PTR [ebx+0x38],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:62
        printdI(DEBUG_LIBC,"***libc_init completed\n");
30000a5e:	83 ec 08             	sub    esp,0x8
30000a61:	8d 83 40 fb ff ff    	lea    eax,[ebx-0x4c0]
30000a67:	50                   	push   eax
30000a68:	68 00 00 00 02       	push   0x2000000
30000a6d:	e8 a4 00 00 00       	call   30000b16 <printdI>
30000a72:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:66
    }
    else
        printI("libc_init called previously, exiting\n");
}
30000a75:	eb 12                	jmp    30000a89 <libc_init+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:65
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
        libcInitialized = true;
        printdI(DEBUG_LIBC,"***libc_init completed\n");
    }
    else
        printI("libc_init called previously, exiting\n");
30000a77:	83 ec 0c             	sub    esp,0xc
30000a7a:	8d 83 58 fb ff ff    	lea    eax,[ebx-0x4a8]
30000a80:	50                   	push   eax
30000a81:	e8 5c 00 00 00       	call   30000ae2 <printI>
30000a86:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:66
}
30000a89:	90                   	nop
30000a8a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000a8d:	c9                   	leave  
30000a8e:	c3                   	ret    

30000a8f <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:69

void __attribute__((destructor)) libc_cleanup(void)
{
30000a8f:	55                   	push   ebp
30000a90:	89 e5                	mov    ebp,esp
30000a92:	53                   	push   ebx
30000a93:	83 ec 04             	sub    esp,0x4
30000a96:	e8 54 20 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000a9b:	05 3d 3a 00 00       	add    eax,0x3a3d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
    malloc_cleanup();
30000aa0:	89 c3                	mov    ebx,eax
30000aa2:	e8 3c 07 00 00       	call   300011e3 <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:71
}
30000aa7:	90                   	nop
30000aa8:	83 c4 04             	add    esp,0x4
30000aab:	5b                   	pop    ebx
30000aac:	5d                   	pop    ebp
30000aad:	c3                   	ret    

30000aae <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:74

VISIBLE int print(const char *format, ...)
{
30000aae:	55                   	push   ebp
30000aaf:	89 e5                	mov    ebp,esp
30000ab1:	83 ec 10             	sub    esp,0x10
30000ab4:	e8 36 20 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000ab9:	05 1f 3a 00 00       	add    eax,0x3a1f
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:76
    va_list args;
    va_start( args, format );
30000abe:	8d 45 0c             	lea    eax,[ebp+0xc]
30000ac1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:77
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
30000ac4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000ac7:	89 c2                	mov    edx,eax
30000ac9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000acc:	52                   	push   edx
30000acd:	50                   	push   eax
30000ace:	68 00 03 00 00       	push   0x300
30000ad3:	e8 52 fe ff ff       	call   3000092a <do_syscall2>
30000ad8:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:78
    return 0;
30000adb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:79
}
30000ae0:	c9                   	leave  
30000ae1:	c3                   	ret    

30000ae2 <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:82

int printI(const char *format, ...)
{
30000ae2:	55                   	push   ebp
30000ae3:	89 e5                	mov    ebp,esp
30000ae5:	83 ec 10             	sub    esp,0x10
30000ae8:	e8 02 20 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000aed:	05 eb 39 00 00       	add    eax,0x39eb
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:84
    va_list args;
    va_start( args, format );
30000af2:	8d 45 0c             	lea    eax,[ebp+0xc]
30000af5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:85
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
30000af8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000afb:	89 c2                	mov    edx,eax
30000afd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000b00:	52                   	push   edx
30000b01:	50                   	push   eax
30000b02:	68 00 03 00 00       	push   0x300
30000b07:	e8 1e fe ff ff       	call   3000092a <do_syscall2>
30000b0c:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:86
    return 0;
30000b0f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:87
}
30000b14:	c9                   	leave  
30000b15:	c3                   	ret    

30000b16 <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:90

int printdI(uint32_t DebugLevel, const char *format, ...)
{
30000b16:	55                   	push   ebp
30000b17:	89 e5                	mov    ebp,esp
30000b19:	83 ec 10             	sub    esp,0x10
30000b1c:	e8 ce 1f 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000b21:	05 b7 39 00 00       	add    eax,0x39b7
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:92
    va_list args;
    va_start( args, format );
30000b26:	8d 45 10             	lea    eax,[ebp+0x10]
30000b29:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:94
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
30000b2c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000b2f:	89 c2                	mov    edx,eax
30000b31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000b34:	52                   	push   edx
30000b35:	50                   	push   eax
30000b36:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000b39:	68 01 03 00 00       	push   0x301
30000b3e:	e8 ab fd ff ff       	call   300008ee <do_syscall3>
30000b43:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:95
    return 0;
30000b46:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:97
    va_end(args);
}
30000b4b:	c9                   	leave  
30000b4c:	c3                   	ret    

30000b4d <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:100

VISIBLE unsigned int sleep (unsigned int __seconds)
{
30000b4d:	55                   	push   ebp
30000b4e:	89 e5                	mov    ebp,esp
30000b50:	56                   	push   esi
30000b51:	53                   	push   ebx
30000b52:	83 ec 10             	sub    esp,0x10
30000b55:	e8 95 1f 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000b5a:	05 7e 39 00 00       	add    eax,0x397e
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:101
    SLEEP_SECONDS(__seconds)
30000b5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000b62:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
30000b65:	b8 70 01 00 00       	mov    eax,0x170
30000b6a:	bb 00 00 00 00       	mov    ebx,0x0
30000b6f:	b9 00 00 00 00       	mov    ecx,0x0
30000b74:	ba 00 00 00 00       	mov    edx,0x0
30000b79:	be 00 00 00 00       	mov    esi,0x0
30000b7e:	e8 fc ff ff ff       	call   30000b7f <sleep+0x32>
30000b83:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
30000b86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000b89:	6b d0 64             	imul   edx,eax,0x64
30000b8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000b8f:	01 d0                	add    eax,edx
30000b91:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
30000b94:	b8 66 01 00 00       	mov    eax,0x166
30000b99:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
30000b9c:	b9 00 00 00 00       	mov    ecx,0x0
30000ba1:	ba 00 00 00 00       	mov    edx,0x0
30000ba6:	be 00 00 00 00       	mov    esi,0x0
30000bab:	e8 fc ff ff ff       	call   30000bac <sleep+0x5f>
30000bb0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:102
    return 0;
30000bb3:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:103
}
30000bb8:	83 c4 10             	add    esp,0x10
30000bbb:	5b                   	pop    ebx
30000bbc:	5e                   	pop    esi
30000bbd:	5d                   	pop    ebp
30000bbe:	c3                   	ret    

30000bbf <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:106

void stop()
{
30000bbf:	55                   	push   ebp
30000bc0:	89 e5                	mov    ebp,esp
30000bc2:	e8 28 1f 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000bc7:	05 11 39 00 00       	add    eax,0x3911
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:107
    do_syscall0(SYSCALL_STOP);
30000bcc:	68 68 01 00 00       	push   0x168
30000bd1:	e8 d2 fd ff ff       	call   300009a8 <do_syscall0>
30000bd6:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:108
}
30000bd9:	90                   	nop
30000bda:	c9                   	leave  
30000bdb:	c3                   	ret    

30000bdc <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:111

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
30000bdc:	55                   	push   ebp
30000bdd:	89 e5                	mov    ebp,esp
30000bdf:	e8 0b 1f 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000be4:	05 f4 38 00 00       	add    eax,0x38f4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:112
    do_syscall3(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
30000be9:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000bec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000bef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000bf2:	51                   	push   ecx
30000bf3:	52                   	push   edx
30000bf4:	50                   	push   eax
30000bf5:	68 67 01 00 00       	push   0x167
30000bfa:	e8 ef fc ff ff       	call   300008ee <do_syscall3>
30000bff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:113
}
30000c02:	90                   	nop
30000c03:	c9                   	leave  
30000c04:	c3                   	ret    

30000c05 <fork>:
fork():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:116

VISIBLE int fork()
{
30000c05:	55                   	push   ebp
30000c06:	89 e5                	mov    ebp,esp
30000c08:	83 ec 10             	sub    esp,0x10
30000c0b:	e8 df 1e 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000c10:	05 c8 38 00 00       	add    eax,0x38c8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:117
    uint32_t retVal = 0;
30000c15:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:119
    //return do_syscall0(SYSCALL_FORK);
    asm("call sysEnter_Vector\n":"=a" (retVal): "a" (SYSCALL_FORK));
30000c1c:	b8 06 00 00 00       	mov    eax,0x6
30000c21:	e8 fc ff ff ff       	call   30000c22 <fork+0x1d>
30000c26:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:120
    return retVal;
30000c29:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:121
}
30000c2c:	c9                   	leave  
30000c2d:	c3                   	ret    

30000c2e <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:124

VISIBLE int exec(char* path)
{
30000c2e:	55                   	push   ebp
30000c2f:	89 e5                	mov    ebp,esp
30000c31:	53                   	push   ebx
30000c32:	83 ec 24             	sub    esp,0x24
30000c35:	e8 e6 1e 00 00       	call   30002b20 <__x86.get_pc_thunk.bx>
30000c3a:	81 c3 9e 38 00 00    	add    ebx,0x389e
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:125
    int pid=0, argc=0;
30000c40:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
30000c47:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:127
    char** argv;
    char* spacePtr=path, *lastSpacePtr=path;
30000c4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000c51:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
30000c54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000c57:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:129
    char* program;
    program=mallocI(512);
30000c5a:	83 ec 0c             	sub    esp,0xc
30000c5d:	68 00 02 00 00       	push   0x200
30000c62:	e8 6d 03 00 00       	call   30000fd4 <mallocI>
30000c67:	83 c4 10             	add    esp,0x10
30000c6a:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:132
    do
    {
        spacePtr=strstrI(spacePtr," ");
30000c6d:	83 ec 08             	sub    esp,0x8
30000c70:	8d 83 7e fb ff ff    	lea    eax,[ebx-0x482]
30000c76:	50                   	push   eax
30000c77:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30000c7a:	e8 29 11 00 00       	call   30001da8 <strstrI>
30000c7f:	83 c4 10             	add    esp,0x10
30000c82:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:133
        if (argc==0)
30000c85:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
30000c89:	75 44                	jne    30000ccf <exec+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:135
        {
            if (spacePtr==0)
30000c8b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000c8f:	75 22                	jne    30000cb3 <exec+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:136
                strncpyI(program, path, strlenI(path));
30000c91:	83 ec 0c             	sub    esp,0xc
30000c94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000c97:	e8 95 0b 00 00       	call   30001831 <strlenI>
30000c9c:	83 c4 10             	add    esp,0x10
30000c9f:	83 ec 04             	sub    esp,0x4
30000ca2:	50                   	push   eax
30000ca3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000ca6:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
30000ca9:	e8 86 0c 00 00       	call   30001934 <strncpyI>
30000cae:	83 c4 10             	add    esp,0x10
30000cb1:	eb 1c                	jmp    30000ccf <exec+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:138
            else
                strncpyI(program, path, spacePtr-path);
30000cb3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000cb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000cb9:	29 c2                	sub    edx,eax
30000cbb:	89 d0                	mov    eax,edx
30000cbd:	83 ec 04             	sub    esp,0x4
30000cc0:	50                   	push   eax
30000cc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000cc4:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
30000cc7:	e8 68 0c 00 00       	call   30001934 <strncpyI>
30000ccc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:140
        }
        argc++;
30000ccf:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:142
            
    } while (spacePtr++);
30000cd3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000cd6:	8d 50 01             	lea    edx,[eax+0x1]
30000cd9:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
30000cdc:	85 c0                	test   eax,eax
30000cde:	75 8d                	jne    30000c6d <exec+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:144
    
    argv=mallocI((argc*50)+(argc*4));
30000ce0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000ce3:	6b c0 36             	imul   eax,eax,0x36
30000ce6:	83 ec 0c             	sub    esp,0xc
30000ce9:	50                   	push   eax
30000cea:	e8 e5 02 00 00       	call   30000fd4 <mallocI>
30000cef:	83 c4 10             	add    esp,0x10
30000cf2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:145
    int argvPtr=4*argc;
30000cf5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000cf8:	c1 e0 02             	shl    eax,0x2
30000cfb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:146
    spacePtr=path;
30000cfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000d01:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:147
    for (int cnt=0;cnt<argc; cnt++)
30000d04:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
30000d0b:	e9 c8 00 00 00       	jmp    30000dd8 <exec+0x1aa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:149
    {
        argv[cnt]=(char*)argv+argvPtr;
30000d10:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000d13:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30000d1a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000d1d:	01 d0                	add    eax,edx
30000d1f:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
30000d22:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
30000d25:	01 ca                	add    edx,ecx
30000d27:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:150
        spacePtr=strstrI(spacePtr," ");
30000d29:	83 ec 08             	sub    esp,0x8
30000d2c:	8d 83 7e fb ff ff    	lea    eax,[ebx-0x482]
30000d32:	50                   	push   eax
30000d33:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30000d36:	e8 6d 10 00 00       	call   30001da8 <strstrI>
30000d3b:	83 c4 10             	add    esp,0x10
30000d3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:151
        if (spacePtr)
30000d41:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000d45:	74 2f                	je     30000d76 <exec+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:152
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
30000d47:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000d4a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30000d4d:	29 c2                	sub    edx,eax
30000d4f:	89 d0                	mov    eax,edx
30000d51:	89 c1                	mov    ecx,eax
30000d53:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000d56:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30000d5d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000d60:	01 d0                	add    eax,edx
30000d62:	8b 00                	mov    eax,DWORD PTR [eax]
30000d64:	83 ec 04             	sub    esp,0x4
30000d67:	51                   	push   ecx
30000d68:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
30000d6b:	50                   	push   eax
30000d6c:	e8 c3 0b 00 00       	call   30001934 <strncpyI>
30000d71:	83 c4 10             	add    esp,0x10
30000d74:	eb 31                	jmp    30000da7 <exec+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:154
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
30000d76:	83 ec 0c             	sub    esp,0xc
30000d79:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
30000d7c:	e8 b0 0a 00 00       	call   30001831 <strlenI>
30000d81:	83 c4 10             	add    esp,0x10
30000d84:	89 c2                	mov    edx,eax
30000d86:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000d89:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
30000d90:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000d93:	01 c8                	add    eax,ecx
30000d95:	8b 00                	mov    eax,DWORD PTR [eax]
30000d97:	83 ec 04             	sub    esp,0x4
30000d9a:	52                   	push   edx
30000d9b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
30000d9e:	50                   	push   eax
30000d9f:	e8 90 0b 00 00       	call   30001934 <strncpyI>
30000da4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:155 (discriminator 2)
        strtrimI(argv[cnt]);
30000da7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000daa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30000db1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000db4:	01 d0                	add    eax,edx
30000db6:	8b 00                	mov    eax,DWORD PTR [eax]
30000db8:	83 ec 0c             	sub    esp,0xc
30000dbb:	50                   	push   eax
30000dbc:	e8 2f 0f 00 00       	call   30001cf0 <strtrimI>
30000dc1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:156 (discriminator 2)
        lastSpacePtr=spacePtr++;
30000dc4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000dc7:	8d 50 01             	lea    edx,[eax+0x1]
30000dca:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
30000dcd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:157 (discriminator 2)
        argvPtr+=50;
30000dd0:	83 45 e8 32          	add    DWORD PTR [ebp-0x18],0x32
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:147 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((argc*50)+(argc*4));
    int argvPtr=4*argc;
    spacePtr=path;
    for (int cnt=0;cnt<argc; cnt++)
30000dd4:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:147 (discriminator 1)
30000dd8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000ddb:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
30000dde:	0f 8c 2c ff ff ff    	jl     30000d10 <exec+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:159
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
        strtrimI(argv[cnt]);
        lastSpacePtr=spacePtr++;
        argvPtr+=50;
    }
    printdI(DEBUG_LIBC,"libc: executing for %s\n",path);;
30000de4:	83 ec 04             	sub    esp,0x4
30000de7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000dea:	8d 83 80 fb ff ff    	lea    eax,[ebx-0x480]
30000df0:	50                   	push   eax
30000df1:	68 00 00 00 02       	push   0x2000000
30000df6:	e8 1b fd ff ff       	call   30000b16 <printdI>
30000dfb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:160
    pid = do_syscall3(SYSCALL_EXEC, (uintptr_t)program, argc, (uintptr_t)argv);
30000dfe:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
30000e01:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000e04:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
30000e07:	51                   	push   ecx
30000e08:	52                   	push   edx
30000e09:	50                   	push   eax
30000e0a:	6a 59                	push   0x59
30000e0c:	e8 dd fa ff ff       	call   300008ee <do_syscall3>
30000e11:	83 c4 10             	add    esp,0x10
30000e14:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:164
/*    __asm__("push ds\nint 0x80\npop ds\n"
            :"=a" (pid)
            :"a" (0x59),"b" (program),"c" (argc),"d" (argv));*/
    return pid;
30000e17:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:167
    freeI(argv);
    freeI(program);
}
30000e1a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000e1d:	c9                   	leave  
30000e1e:	c3                   	ret    

30000e1f <execa>:
execa():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:170

VISIBLE int execa(char* path, int argc, char** argv)
{
30000e1f:	55                   	push   ebp
30000e20:	89 e5                	mov    ebp,esp
30000e22:	83 ec 10             	sub    esp,0x10
30000e25:	e8 c5 1c 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000e2a:	05 ae 36 00 00       	add    eax,0x36ae
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:171
    int pid=0;
30000e2f:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:174
    //Using the syscall is breaking the stack
//    SYSCALL3(SYSCALL_EXEC,path,argc,argv);
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
30000e36:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000e39:	8d 80 98 fb ff ff    	lea    eax,[eax-0x468]
30000e3f:	50                   	push   eax
30000e40:	68 00 00 00 02       	push   0x2000000
30000e45:	e8 cc fc ff ff       	call   30000b16 <printdI>
30000e4a:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:175
    pid = do_syscall3(SYSCALL_EXEC, (uintptr_t)path, argc, (uintptr_t)argv);
30000e4d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000e50:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000e53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000e56:	51                   	push   ecx
30000e57:	52                   	push   edx
30000e58:	50                   	push   eax
30000e59:	6a 59                	push   0x59
30000e5b:	e8 8e fa ff ff       	call   300008ee <do_syscall3>
30000e60:	83 c4 10             	add    esp,0x10
30000e63:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:179
/*    __asm__("push ds\nint 0x80\npop ds\n"
            :"=a" (pid)
            :"a" (0x59),"b" (path),"c" (argc),"d" (argv));*/
    return pid;
30000e66:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:180
}
30000e69:	c9                   	leave  
30000e6a:	c3                   	ret    

30000e6b <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:183

VISIBLE int waitpid(uint32_t pid)
{
30000e6b:	55                   	push   ebp
30000e6c:	89 e5                	mov    ebp,esp
30000e6e:	e8 7c 1c 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000e73:	05 65 36 00 00       	add    eax,0x3665
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:184
    return do_syscall1(SYSCALL_WAITFORPID,pid);
30000e78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000e7b:	6a 61                	push   0x61
30000e7d:	e8 e6 fa ff ff       	call   30000968 <do_syscall1>
30000e82:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:185
}
30000e85:	c9                   	leave  
30000e86:	c3                   	ret    

30000e87 <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:188

VISIBLE char* getcwd(char* buf, size_t size)
{
30000e87:	55                   	push   ebp
30000e88:	89 e5                	mov    ebp,esp
30000e8a:	e8 60 1c 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000e8f:	05 49 36 00 00       	add    eax,0x3649
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:189
    return (char*)do_syscall2(SYSCALL_GETCWD,(uint32_t)buf,size);
30000e94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000e97:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000e9a:	50                   	push   eax
30000e9b:	6a 4f                	push   0x4f
30000e9d:	e8 88 fa ff ff       	call   3000092a <do_syscall2>
30000ea2:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:190
}
30000ea5:	c9                   	leave  
30000ea6:	c3                   	ret    
30000ea7:	90                   	nop

30000ea8 <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:13
#include "libChrisOS.h"

#define HEAP_GET_NEXT(s,t) {t=(uint8_t*)s+s->len+sizeof(heaprec_t);}
#define HEAP_CURR(s,t) {t=((heaprec_t*)s)-1;}
void initmalloc()
{
30000ea8:	55                   	push   ebp
30000ea9:	89 e5                	mov    ebp,esp
30000eab:	53                   	push   ebx
30000eac:	83 ec 04             	sub    esp,0x4
30000eaf:	e8 6c 1c 00 00       	call   30002b20 <__x86.get_pc_thunk.bx>
30000eb4:	81 c3 24 36 00 00    	add    ebx,0x3624
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:14
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
30000eba:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30000ec0:	8b 00                	mov    eax,DWORD PTR [eax]
30000ec2:	50                   	push   eax
30000ec3:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30000ec9:	50                   	push   eax
30000eca:	8d 83 ac fb ff ff    	lea    eax,[ebx-0x454]
30000ed0:	50                   	push   eax
30000ed1:	68 00 00 00 01       	push   0x1000000
30000ed6:	e8 3b fc ff ff       	call   30000b16 <printdI>
30000edb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:15
    heapBase=0;
30000ede:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30000ee4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:16
    heapCurr=0;
30000eea:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30000ef0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:17
    heapEnd=0;
30000ef6:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30000efc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:18
    libcTZ=-5;
30000f02:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
30000f08:	c7 00 fb ff ff ff    	mov    DWORD PTR [eax],0xfffffffb
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:20

}
30000f0e:	90                   	nop
30000f0f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000f12:	c9                   	leave  
30000f13:	c3                   	ret    

30000f14 <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:23

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
30000f14:	55                   	push   ebp
30000f15:	89 e5                	mov    ebp,esp
30000f17:	83 ec 10             	sub    esp,0x10
30000f1a:	e8 d0 1b 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000f1f:	05 b9 35 00 00       	add    eax,0x35b9
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:26
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
30000f24:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000f27:	83 c2 20             	add    edx,0x20
30000f2a:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:28
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
30000f2d:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
30000f33:	8b 0a                	mov    ecx,DWORD PTR [edx]
30000f35:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30000f38:	01 d1                	add    ecx,edx
30000f3a:	8b 90 ec ff ff ff    	mov    edx,DWORD PTR [eax-0x14]
30000f40:	8b 12                	mov    edx,DWORD PTR [edx]
30000f42:	39 d1                	cmp    ecx,edx
30000f44:	76 4e                	jbe    30000f94 <newHeapRequiredToFulfillRequest+0x80>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:31
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
30000f46:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
30000f4c:	8b 12                	mov    edx,DWORD PTR [edx]
30000f4e:	8b 80 ec ff ff ff    	mov    eax,DWORD PTR [eax-0x14]
30000f54:	8b 00                	mov    eax,DWORD PTR [eax]
30000f56:	29 c2                	sub    edx,eax
30000f58:	89 d0                	mov    eax,edx
30000f5a:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:32
        if (newSize== 0 || newSize%PAGE_SIZE)
30000f5d:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
30000f61:	74 0c                	je     30000f6f <newHeapRequiredToFulfillRequest+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:32 (discriminator 1)
30000f63:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000f66:	25 ff 0f 00 00       	and    eax,0xfff
30000f6b:	85 c0                	test   eax,eax
30000f6d:	74 10                	je     30000f7f <newHeapRequiredToFulfillRequest+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:34
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
30000f6f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000f72:	25 00 f0 ff ff       	and    eax,0xfffff000
30000f77:	05 00 10 00 00       	add    eax,0x1000
30000f7c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:37
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < ALLOC_REQUEST_SIZE)
30000f7f:	81 7d fc ff 1f 03 00 	cmp    DWORD PTR [ebp-0x4],0x31fff
30000f86:	77 07                	ja     30000f8f <newHeapRequiredToFulfillRequest+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:38
            return ALLOC_REQUEST_SIZE;
30000f88:	b8 00 20 03 00       	mov    eax,0x32000
30000f8d:	eb 0a                	jmp    30000f99 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:40
        else
            return newSize;
30000f8f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000f92:	eb 05                	jmp    30000f99 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:43
    }
    else
        return 0;
30000f94:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:44
}
30000f99:	c9                   	leave  
30000f9a:	c3                   	ret    

30000f9b <freeI>:
freeI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:47

void freeI(void* fpointer)
{
30000f9b:	55                   	push   ebp
30000f9c:	89 e5                	mov    ebp,esp
30000f9e:	83 ec 10             	sub    esp,0x10
30000fa1:	e8 49 1b 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30000fa6:	05 32 35 00 00       	add    eax,0x3532
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:50
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
30000fab:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000faf:	74 20                	je     30000fd1 <freeI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
30000fb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000fb4:	83 e8 10             	sub    eax,0x10
30000fb7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:55
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
30000fba:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000fbd:	8b 00                	mov    eax,DWORD PTR [eax]
30000fbf:	3d d0 00 0f b0       	cmp    eax,0xb00f00d0
30000fc4:	74 02                	je     30000fc8 <freeI+0x2d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:59 (discriminator 2)
    {
        //print("malloc: marker not found error!!!\n");
gotoHere:
        goto gotoHere;
30000fc6:	eb fe                	jmp    30000fc6 <freeI+0x2b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:61
    }
    mp->inUse=false;
30000fc8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000fcb:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
30000fcf:	eb 01                	jmp    30000fd2 <freeI+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:51
void freeI(void* fpointer)
{
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
30000fd1:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:62
        //print("malloc: marker not found error!!!\n");
gotoHere:
        goto gotoHere;
    }
    mp->inUse=false;
}
30000fd2:	c9                   	leave  
30000fd3:	c3                   	ret    

30000fd4 <mallocI>:
mallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:65

void*  mallocI(size_t size)
{
30000fd4:	55                   	push   ebp
30000fd5:	89 e5                	mov    ebp,esp
30000fd7:	53                   	push   ebx
30000fd8:	83 ec 24             	sub    esp,0x24
30000fdb:	e8 40 1b 00 00       	call   30002b20 <__x86.get_pc_thunk.bx>
30000fe0:	81 c3 f8 34 00 00    	add    ebx,0x34f8
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:72

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr;
    uint8_t* heapPtrNext;
    printdI(DEBUG_MALLOC,"malloc(0x%08X)\n",size);
30000fe6:	83 ec 04             	sub    esp,0x4
30000fe9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000fec:	8d 83 cf fb ff ff    	lea    eax,[ebx-0x431]
30000ff2:	50                   	push   eax
30000ff3:	68 00 00 00 01       	push   0x1000000
30000ff8:	e8 19 fb ff ff       	call   30000b16 <printdI>
30000ffd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:73
    needed = newHeapRequiredToFulfillRequest(size);
30001000:	83 ec 0c             	sub    esp,0xc
30001003:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001006:	e8 09 ff ff ff       	call   30000f14 <newHeapRequiredToFulfillRequest>
3000100b:	83 c4 10             	add    esp,0x10
3000100e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:74
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
30001011:	83 ec 04             	sub    esp,0x4
30001014:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
30001017:	8d 83 df fb ff ff    	lea    eax,[ebx-0x421]
3000101d:	50                   	push   eax
3000101e:	68 00 00 00 01       	push   0x1000000
30001023:	e8 ee fa ff ff       	call   30000b16 <printdI>
30001028:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:75
    if (needed!=0)      //New heap required
3000102b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
3000102f:	0f 84 ae 00 00 00    	je     300010e3 <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:77
    {
        allocatedPtr = do_syscall1(SYSCALL_ALLOC, needed);
30001035:	83 ec 08             	sub    esp,0x8
30001038:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
3000103b:	68 65 01 00 00       	push   0x165
30001040:	e8 23 f9 ff ff       	call   30000968 <do_syscall1>
30001045:	83 c4 10             	add    esp,0x10
30001048:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:79
        //This is needed to keep in sync with what the kernel thinks
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
3000104b:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30001051:	8b 00                	mov    eax,DWORD PTR [eax]
30001053:	83 ec 04             	sub    esp,0x4
30001056:	50                   	push   eax
30001057:	8d 83 fb fb ff ff    	lea    eax,[ebx-0x405]
3000105d:	50                   	push   eax
3000105e:	68 00 00 00 01       	push   0x1000000
30001063:	e8 ae fa ff ff       	call   30000b16 <printdI>
30001068:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:80
        heapEnd=allocatedPtr+needed;
3000106b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
3000106e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001071:	01 c2                	add    edx,eax
30001073:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30001079:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:81
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
3000107b:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30001081:	8b 00                	mov    eax,DWORD PTR [eax]
30001083:	83 ec 0c             	sub    esp,0xc
30001086:	50                   	push   eax
30001087:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
3000108a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
3000108d:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
30001093:	50                   	push   eax
30001094:	68 00 00 00 01       	push   0x1000000
30001099:	e8 78 fa ff ff       	call   30000b16 <printdI>
3000109e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:82
        if (heapBase==0)    //Hasn't been initialized yet!
300010a1:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
300010a7:	8b 00                	mov    eax,DWORD PTR [eax]
300010a9:	85 c0                	test   eax,eax
300010ab:	75 36                	jne    300010e3 <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:84
        {
            heapCurr=allocatedPtr;
300010ad:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
300010b3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300010b6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:85
            heapBase=allocatedPtr;
300010b8:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
300010be:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300010c1:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:86
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
300010c3:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
300010c9:	8b 00                	mov    eax,DWORD PTR [eax]
300010cb:	83 ec 04             	sub    esp,0x4
300010ce:	50                   	push   eax
300010cf:	8d 83 58 fc ff ff    	lea    eax,[ebx-0x3a8]
300010d5:	50                   	push   eax
300010d6:	68 00 00 00 01       	push   0x1000000
300010db:	e8 36 fa ff ff       	call   30000b16 <printdI>
300010e0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
300010e3:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
300010e9:	8b 00                	mov    eax,DWORD PTR [eax]
300010eb:	83 ec 04             	sub    esp,0x4
300010ee:	50                   	push   eax
300010ef:	8d 83 94 fc ff ff    	lea    eax,[ebx-0x36c]
300010f5:	50                   	push   eax
300010f6:	68 00 00 00 01       	push   0x1000000
300010fb:	e8 16 fa ff ff       	call   30000b16 <printdI>
30001100:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:90
    heapPtr = (heaprec_t*)heapCurr;
30001103:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30001109:	8b 00                	mov    eax,DWORD PTR [eax]
3000110b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:91
    heapPtr->marker=ALLOC_MARKER_VALUE;
3000110e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001111:	c7 00 d0 00 0f b0    	mov    DWORD PTR [eax],0xb00f00d0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:92
    heapPtr->len=size;
30001117:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
3000111a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000111d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:93
    heapPtr->inUse=true;
30001120:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001123:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:94
    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08X, sizeof(heaprec_t)=0x%08X\n",heapCurr,sizeof(heaprec_t));
30001127:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
3000112d:	8b 00                	mov    eax,DWORD PTR [eax]
3000112f:	6a 10                	push   0x10
30001131:	50                   	push   eax
30001132:	8d 83 bc fc ff ff    	lea    eax,[ebx-0x344]
30001138:	50                   	push   eax
30001139:	68 00 00 00 01       	push   0x1000000
3000113e:	e8 d3 f9 ff ff       	call   30000b16 <printdI>
30001143:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:95
    retVal=(void*)(heapCurr+sizeof(heaprec_t));
30001146:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
3000114c:	8b 00                	mov    eax,DWORD PTR [eax]
3000114e:	83 c0 10             	add    eax,0x10
30001151:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:96
    HEAP_GET_NEXT(heapPtr,heapPtrNext);
30001154:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001157:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
3000115a:	8d 50 10             	lea    edx,[eax+0x10]
3000115d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001160:	01 d0                	add    eax,edx
30001162:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:97
    ((heaprec_t*)heapPtrNext)->prev=heapPtr;
30001165:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30001168:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
3000116b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98
    heapCurr+=size+(sizeof(heaprec_t));
3000116e:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30001174:	8b 10                	mov    edx,DWORD PTR [eax]
30001176:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001179:	01 d0                	add    eax,edx
3000117b:	8d 50 10             	lea    edx,[eax+0x10]
3000117e:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30001184:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:99
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
30001186:	83 ec 04             	sub    esp,0x4
30001189:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
3000118c:	8d 83 f4 fc ff ff    	lea    eax,[ebx-0x30c]
30001192:	50                   	push   eax
30001193:	68 00 00 00 01       	push   0x1000000
30001198:	e8 79 f9 ff ff       	call   30000b16 <printdI>
3000119d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:100
    return retVal;
300011a0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:101
}
300011a3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300011a6:	c9                   	leave  
300011a7:	c3                   	ret    

300011a8 <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:104

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
300011a8:	55                   	push   ebp
300011a9:	89 e5                	mov    ebp,esp
300011ab:	83 ec 08             	sub    esp,0x8
300011ae:	e8 3c 19 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300011b3:	05 25 33 00 00       	add    eax,0x3325
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:105
    return mallocI(size);
300011b8:	83 ec 0c             	sub    esp,0xc
300011bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300011be:	e8 11 fe ff ff       	call   30000fd4 <mallocI>
300011c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:106
}
300011c6:	c9                   	leave  
300011c7:	c3                   	ret    

300011c8 <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:109

__attribute__((visibility("default"))) void free(void* fpointer)
{
300011c8:	55                   	push   ebp
300011c9:	89 e5                	mov    ebp,esp
300011cb:	e8 1f 19 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300011d0:	05 08 33 00 00       	add    eax,0x3308
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:110
    freeI(fpointer);
300011d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300011d8:	e8 be fd ff ff       	call   30000f9b <freeI>
300011dd:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:111
}
300011e0:	90                   	nop
300011e1:	c9                   	leave  
300011e2:	c3                   	ret    

300011e3 <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:114

void malloc_cleanup()
{
300011e3:	55                   	push   ebp
300011e4:	89 e5                	mov    ebp,esp
300011e6:	53                   	push   ebx
300011e7:	83 ec 04             	sub    esp,0x4
300011ea:	e8 00 19 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300011ef:	05 e9 32 00 00       	add    eax,0x32e9
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:115
    do_syscall1(SYSCALL_FREE, heapBase);
300011f4:	8b 90 f0 ff ff ff    	mov    edx,DWORD PTR [eax-0x10]
300011fa:	8b 12                	mov    edx,DWORD PTR [edx]
300011fc:	83 ec 08             	sub    esp,0x8
300011ff:	52                   	push   edx
30001200:	68 64 01 00 00       	push   0x164
30001205:	89 c3                	mov    ebx,eax
30001207:	e8 5c f7 ff ff       	call   30000968 <do_syscall1>
3000120c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:116
3000120f:	90                   	nop
30001210:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001213:	c9                   	leave  
30001214:	c3                   	ret    
30001215:	66 90                	xchg   ax,ax
30001217:	90                   	nop

30001218 <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:11
 */
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time
VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
30001218:	55                   	push   ebp
30001219:	89 e5                	mov    ebp,esp
3000121b:	83 ec 20             	sub    esp,0x20
3000121e:	e8 cc 18 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30001223:	05 b5 32 00 00       	add    eax,0x32b5
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:14
    bool dw,dd;
    
    dd=n%4==0;
30001228:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000122b:	83 e0 03             	and    eax,0x3
3000122e:	85 c0                	test   eax,eax
30001230:	0f 94 c0             	sete   al
30001233:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    dw=n%2==0;
30001236:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001239:	83 e0 01             	and    eax,0x1
3000123c:	85 c0                	test   eax,eax
3000123e:	0f 94 c0             	sete   al
30001241:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    if (dd)
30001244:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
30001248:	74 7d                	je     300012c7 <memcpy+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:18
    {
        n /=4;
3000124a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000124d:	c1 e8 02             	shr    eax,0x2
30001250:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
        const uint32_t *f = src;
30001253:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001256:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        uint32_t *t = dest;
30001259:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000125c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:22

        if (f < t) {
3000125f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001262:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
30001265:	73 4b                	jae    300012b2 <memcpy+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23
                f += n;
30001267:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000126a:	c1 e0 02             	shl    eax,0x2
3000126d:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                t += n;
30001270:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001273:	c1 e0 02             	shl    eax,0x2
30001276:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                while ( (n)-- > 0)
30001279:	eb 12                	jmp    3000128d <memcpy+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                        *--t = *--f;
3000127b:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
3000127f:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
30001283:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001286:	8b 10                	mov    edx,DWORD PTR [eax]
30001288:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
3000128b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
3000128d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001290:	8d 50 ff             	lea    edx,[eax-0x1]
30001293:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001296:	85 c0                	test   eax,eax
30001298:	75 e1                	jne    3000127b <memcpy+0x63>
3000129a:	eb 23                	jmp    300012bf <memcpy+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
3000129c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
3000129f:	8d 50 04             	lea    edx,[eax+0x4]
300012a2:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
300012a5:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
300012a8:	8d 4a 04             	lea    ecx,[edx+0x4]
300012ab:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
300012ae:	8b 12                	mov    edx,DWORD PTR [edx]
300012b0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:28
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
300012b2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012b5:	8d 50 ff             	lea    edx,[eax-0x1]
300012b8:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
300012bb:	85 c0                	test   eax,eax
300012bd:	75 dd                	jne    3000129c <memcpy+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
                        *t++ = *f++;
        return dest;
300012bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300012c2:	e9 ea 00 00 00       	jmp    300013b1 <memcpy+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:32
    }
    else if (dw)
300012c7:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
300012cb:	74 79                	je     30001346 <memcpy+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:34
    {
        n /=2;
300012cd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012d0:	d1 e8                	shr    eax,1
300012d2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
        const uint32_t *f = src;
300012d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300012d8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        uint32_t *t = dest;
300012db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300012de:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:38

        if (f < t) {
300012e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300012e4:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
300012e7:	73 4b                	jae    30001334 <memcpy+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39
                f += n;
300012e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012ec:	c1 e0 02             	shl    eax,0x2
300012ef:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                t += n;
300012f2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012f5:	c1 e0 02             	shl    eax,0x2
300012f8:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                while ( (n)-- > 0)
300012fb:	eb 12                	jmp    3000130f <memcpy+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                        *--t = *--f;
300012fd:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
30001301:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
30001305:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001308:	8b 10                	mov    edx,DWORD PTR [eax]
3000130a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
3000130d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
3000130f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001312:	8d 50 ff             	lea    edx,[eax-0x1]
30001315:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001318:	85 c0                	test   eax,eax
3000131a:	75 e1                	jne    300012fd <memcpy+0xe5>
3000131c:	eb 23                	jmp    30001341 <memcpy+0x129>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
3000131e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001321:	8d 50 04             	lea    edx,[eax+0x4]
30001324:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
30001327:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
3000132a:	8d 4a 04             	lea    ecx,[edx+0x4]
3000132d:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
30001330:	8b 12                	mov    edx,DWORD PTR [edx]
30001332:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:44
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
30001334:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001337:	8d 50 ff             	lea    edx,[eax-0x1]
3000133a:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
3000133d:	85 c0                	test   eax,eax
3000133f:	75 dd                	jne    3000131e <memcpy+0x106>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
                        *t++ = *f++;
        return dest;
30001341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001344:	eb 6b                	jmp    300013b1 <memcpy+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:50
    }
    else
    {
        const char *f = src;
30001346:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001349:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
        char *t = dest;
3000134c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000134f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:53

        if (f < t) {
30001352:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001355:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
30001358:	73 47                	jae    300013a1 <memcpy+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54
                f += n;
3000135a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000135d:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                t += n;
30001360:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001363:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                while (n-- > 0)
30001366:	eb 13                	jmp    3000137b <memcpy+0x163>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                        *--t = *--f;
30001368:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
3000136c:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
30001370:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001373:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001376:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
30001379:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
3000137b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000137e:	8d 50 ff             	lea    edx,[eax-0x1]
30001381:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001384:	85 c0                	test   eax,eax
30001386:	75 e0                	jne    30001368 <memcpy+0x150>
30001388:	eb 24                	jmp    300013ae <memcpy+0x196>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
3000138a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
3000138d:	8d 50 01             	lea    edx,[eax+0x1]
30001390:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
30001393:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30001396:	8d 4a 01             	lea    ecx,[edx+0x1]
30001399:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
3000139c:	0f b6 12             	movzx  edx,BYTE PTR [edx]
3000139f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:59
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
300013a1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300013a4:	8d 50 ff             	lea    edx,[eax-0x1]
300013a7:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
300013aa:	85 c0                	test   eax,eax
300013ac:	75 dc                	jne    3000138a <memcpy+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
                        *t++ = *f++;
        return dest;
300013ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:63
    }
}
300013b1:	c9                   	leave  
300013b2:	c3                   	ret    
300013b3:	90                   	nop

300013b4 <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"

void *memsetI(void *d1, int val, size_t len)
{
300013b4:	55                   	push   ebp
300013b5:	89 e5                	mov    ebp,esp
300013b7:	83 ec 20             	sub    esp,0x20
300013ba:	e8 30 17 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300013bf:	05 19 31 00 00       	add    eax,0x3119
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
300013c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300013c7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
300013ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300013cd:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
300013d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013d3:	c1 e0 10             	shl    eax,0x10
300013d6:	89 c2                	mov    edx,eax
300013d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013db:	c1 e0 08             	shl    eax,0x8
300013de:	09 c2                	or     edx,eax
300013e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013e3:	09 d0                	or     eax,edx
300013e5:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
300013e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300013ec:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
300013ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013f2:	c1 e0 18             	shl    eax,0x18
300013f5:	89 c2                	mov    edx,eax
300013f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013fa:	c1 e0 10             	shl    eax,0x10
300013fd:	09 c2                	or     edx,eax
300013ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001402:	c1 e0 08             	shl    eax,0x8
30001405:	09 d0                	or     eax,edx
30001407:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
3000140a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
3000140d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001410:	83 e0 03             	and    eax,0x3
30001413:	85 c0                	test   eax,eax
30001415:	75 1c                	jne    30001433 <memsetI+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
30001417:	eb 0e                	jmp    30001427 <memsetI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
30001419:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000141c:	8d 50 04             	lea    edx,[eax+0x4]
3000141f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001422:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30001425:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
30001427:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
3000142b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
3000142f:	75 e8                	jne    30001419 <memsetI+0x65>
30001431:	eb 43                	jmp    30001476 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
30001433:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001436:	83 e0 01             	and    eax,0x1
30001439:	85 c0                	test   eax,eax
3000143b:	75 2c                	jne    30001469 <memsetI+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
3000143d:	eb 10                	jmp    3000144f <memsetI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
3000143f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001442:	8d 50 02             	lea    edx,[eax+0x2]
30001445:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
30001448:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
3000144c:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
3000144f:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
30001453:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001457:	75 e6                	jne    3000143f <memsetI+0x8b>
30001459:	eb 1b                	jmp    30001476 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
3000145b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000145e:	8d 50 01             	lea    edx,[eax+0x1]
30001461:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001464:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001467:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
30001469:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000146c:	8d 50 ff             	lea    edx,[eax-0x1]
3000146f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001472:	85 c0                	test   eax,eax
30001474:	75 e5                	jne    3000145b <memsetI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
        *d++ = val;
    }
    return d1;
30001476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
30001479:	c9                   	leave  
3000147a:	c3                   	ret    

3000147b <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

VISIBLE void *memset(void *d1, int val, size_t len)
{
3000147b:	55                   	push   ebp
3000147c:	89 e5                	mov    ebp,esp
3000147e:	e8 6c 16 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30001483:	05 55 30 00 00       	add    eax,0x3055
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    return memsetI(d1, val, len);
30001488:	ff 75 10             	push   DWORD PTR [ebp+0x10]
3000148b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000148e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001491:	e8 1e ff ff ff       	call   300013b4 <memsetI>
30001496:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
}
30001499:	c9                   	leave  
3000149a:	c3                   	ret    
3000149b:	90                   	nop

3000149c <mmap>:
mmap():
/home/yogi/src/os/aproj/libChrisOS/src/mmap.c:10
 */
#include "libChrisOS.h"
#include "types.h"

VISIBLE void* mmap (void *addr,size_t len,int prot,int flags,int fd,off_t offset) //memory map pages either to a file or anonymously
{
3000149c:	55                   	push   ebp
3000149d:	89 e5                	mov    ebp,esp
3000149f:	e8 4b 16 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300014a4:	05 34 30 00 00       	add    eax,0x3034
/home/yogi/src/os/aproj/libChrisOS/src/mmap.c:11
    return NULL;
300014a9:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/mmap.c:12
}
300014ae:	5d                   	pop    ebp
300014af:	c3                   	ret    

300014b0 <pipe>:
pipe():
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:11

#include "libChrisOS.h"
#include "pipe.h"

VISIBLE int pipe(int pipefd[2])
{
300014b0:	55                   	push   ebp
300014b1:	89 e5                	mov    ebp,esp
300014b3:	53                   	push   ebx
300014b4:	83 ec 04             	sub    esp,0x4
300014b7:	e8 33 16 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300014bc:	05 1c 30 00 00       	add    eax,0x301c
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:12
    return do_syscall1(SYSCALL_PIPE, (uintptr_t)pipefd);
300014c1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300014c4:	83 ec 08             	sub    esp,0x8
300014c7:	52                   	push   edx
300014c8:	6a 07                	push   0x7
300014ca:	89 c3                	mov    ebx,eax
300014cc:	e8 97 f4 ff ff       	call   30000968 <do_syscall1>
300014d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:13
300014d4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300014d7:	c9                   	leave  
300014d8:	c3                   	ret    
300014d9:	66 90                	xchg   ax,ax
300014db:	90                   	nop

300014dc <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:68
    return;
}
*/
//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
300014dc:	55                   	push   ebp
300014dd:	89 e5                	mov    ebp,esp
300014df:	53                   	push   ebx
300014e0:	83 ec 14             	sub    esp,0x14
300014e3:	e8 38 16 00 00       	call   30002b20 <__x86.get_pc_thunk.bx>
300014e8:	81 c3 f0 2f 00 00    	add    ebx,0x2ff0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:70
    char buff[5];
    int buffPtr=0;
300014ee:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:72

    memsetI(buff,0,10);
300014f5:	83 ec 04             	sub    esp,0x4
300014f8:	6a 0a                	push   0xa
300014fa:	6a 00                	push   0x0
300014fc:	8d 45 ef             	lea    eax,[ebp-0x11]
300014ff:	50                   	push   eax
30001500:	e8 af fe ff ff       	call   300013b4 <memsetI>
30001505:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:75
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
30001508:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000150b:	8d 50 01             	lea    edx,[eax+0x1]
3000150e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001511:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:76
    buff[buffPtr++] = '[';
30001516:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001519:	8d 50 01             	lea    edx,[eax+0x1]
3000151c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000151f:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:77
    buff[buffPtr++] = '0';
30001524:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001527:	8d 50 01             	lea    edx,[eax+0x1]
3000152a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000152d:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:78
    buff[buffPtr++] = 'K';
30001532:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001535:	8d 50 01             	lea    edx,[eax+0x1]
30001538:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000153b:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:79
    buff[buffPtr] = '\0';
30001540:	8d 55 ef             	lea    edx,[ebp-0x11]
30001543:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001546:	01 d0                	add    eax,edx
30001548:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:80
    printI(buff);
3000154b:	83 ec 0c             	sub    esp,0xc
3000154e:	8d 45 ef             	lea    eax,[ebp-0x11]
30001551:	50                   	push   eax
30001552:	e8 8b f5 ff ff       	call   30000ae2 <printI>
30001557:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:82
    
    return;
3000155a:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:83
}
3000155b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000155e:	c9                   	leave  
3000155f:	c3                   	ret    

30001560 <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
30001560:	55                   	push   ebp
30001561:	89 e5                	mov    ebp,esp
30001563:	53                   	push   ebx
30001564:	83 ec 04             	sub    esp,0x4
30001567:	e8 b4 15 00 00       	call   30002b20 <__x86.get_pc_thunk.bx>
3000156c:	81 c3 6c 2f 00 00    	add    ebx,0x2f6c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
     strcpyI (dest + strlenI (dest), src);
30001572:	83 ec 0c             	sub    esp,0xc
30001575:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001578:	e8 b4 02 00 00       	call   30001831 <strlenI>
3000157d:	83 c4 10             	add    esp,0x10
30001580:	89 c2                	mov    edx,eax
30001582:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001585:	01 d0                	add    eax,edx
30001587:	83 ec 08             	sub    esp,0x8
3000158a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000158d:	50                   	push   eax
3000158e:	e8 59 01 00 00       	call   300016ec <strcpyI>
30001593:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     return dest;
30001596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
   }
30001599:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000159c:	c9                   	leave  
3000159d:	c3                   	ret    

3000159e <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:36

   char* strcatI (char *dest, const char *src)
   {
3000159e:	55                   	push   ebp
3000159f:	89 e5                	mov    ebp,esp
300015a1:	53                   	push   ebx
300015a2:	83 ec 04             	sub    esp,0x4
300015a5:	e8 76 15 00 00       	call   30002b20 <__x86.get_pc_thunk.bx>
300015aa:	81 c3 2e 2f 00 00    	add    ebx,0x2f2e
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37
     strcpyI (dest + strlenI (dest), src);
300015b0:	83 ec 0c             	sub    esp,0xc
300015b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300015b6:	e8 76 02 00 00       	call   30001831 <strlenI>
300015bb:	83 c4 10             	add    esp,0x10
300015be:	89 c2                	mov    edx,eax
300015c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300015c3:	01 d0                	add    eax,edx
300015c5:	83 ec 08             	sub    esp,0x8
300015c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300015cb:	50                   	push   eax
300015cc:	e8 1b 01 00 00       	call   300016ec <strcpyI>
300015d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     return dest;
300015d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
   }
300015d7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300015da:	c9                   	leave  
300015db:	c3                   	ret    

300015dc <concatenate>:
concatenate():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:41
   
   void concatenate(char p[], char q[]) {
300015dc:	55                   	push   ebp
300015dd:	89 e5                	mov    ebp,esp
300015df:	83 ec 10             	sub    esp,0x10
300015e2:	e8 08 15 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300015e7:	05 f1 2e 00 00       	add    eax,0x2ef1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
   int c, d;
 
   c = 0;
300015ec:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
 
   while (p[c] != '\0') {
300015f3:	eb 04                	jmp    300015f9 <concatenate+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
      c++;  	
300015f5:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
300015f9:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
300015fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300015ff:	01 d0                	add    eax,edx
30001601:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001604:	84 c0                	test   al,al
30001606:	75 ed                	jne    300015f5 <concatenate+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:50
      c++;  	
   }
 
   d = 0;
30001608:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
 
   while (q[d] != '\0') {
3000160f:	eb 1d                	jmp    3000162e <concatenate+0x52>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
      p[c] = q[d];
30001611:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30001614:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001617:	01 c2                	add    edx,eax
30001619:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
3000161c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000161f:	01 c8                	add    eax,ecx
30001621:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001624:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:54
      d++;
30001626:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:55
      c++;	
3000162a:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
3000162e:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
30001631:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001634:	01 d0                	add    eax,edx
30001636:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001639:	84 c0                	test   al,al
3000163b:	75 d4                	jne    30001611 <concatenate+0x35>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
3000163d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30001640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001643:	01 d0                	add    eax,edx
30001645:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:59
30001648:	90                   	nop
30001649:	c9                   	leave  
3000164a:	c3                   	ret    
3000164b:	90                   	nop

3000164c <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:25

/* Compare S1 and S2, returning less than, equal to or
   greater than zero if S1 is lexicographically less than,
   equal to or greater than S2.  */
VISIBLE int strcmp (const char *p1, const char *p2)
{
3000164c:	55                   	push   ebp
3000164d:	89 e5                	mov    ebp,esp
3000164f:	56                   	push   esi
30001650:	53                   	push   ebx
30001651:	83 ec 10             	sub    esp,0x10
30001654:	e8 96 14 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30001659:	05 7f 2e 00 00       	add    eax,0x2e7f
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:26
  register const unsigned char *s1 = (const unsigned char *) p1;
3000165e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
  register const unsigned char *s2 = (const unsigned char *) p2;
30001661:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:32
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
30001664:	89 d8                	mov    eax,ebx
30001666:	8d 58 01             	lea    ebx,[eax+0x1]
30001669:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000166c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:33
      c2 = (unsigned char) *s2++;
3000166f:	89 f0                	mov    eax,esi
30001671:	8d 70 01             	lea    esi,[eax+0x1]
30001674:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001677:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
      if (c1 == '\0')
3000167a:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
3000167e:	75 0e                	jne    3000168e <strcmp+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
	return c1 - c2;
30001680:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
30001684:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
30001688:	29 c2                	sub    edx,eax
3000168a:	89 d0                	mov    eax,edx
3000168c:	eb 15                	jmp    300016a3 <strcmp+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
    }
  while (c1 == c2);
3000168e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
30001692:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
30001695:	74 cd                	je     30001664 <strcmp+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39

  return c1 - c2;
30001697:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
3000169b:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
3000169f:	29 c2                	sub    edx,eax
300016a1:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:40
}
300016a3:	83 c4 10             	add    esp,0x10
300016a6:	5b                   	pop    ebx
300016a7:	5e                   	pop    esi
300016a8:	5d                   	pop    ebp
300016a9:	c3                   	ret    
300016aa:	66 90                	xchg   ax,ax

300016ac <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
300016ac:	55                   	push   ebp
300016ad:	89 e5                	mov    ebp,esp
300016af:	83 ec 10             	sub    esp,0x10
300016b2:	e8 38 14 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300016b7:	05 21 2e 00 00       	add    eax,0x2e21
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
300016bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300016bf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
300016c2:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
300016c3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300016c6:	8d 50 01             	lea    edx,[eax+0x1]
300016c9:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
300016cc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
300016cf:	8d 4a 01             	lea    ecx,[edx+0x1]
300016d2:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
300016d5:	0f b6 12             	movzx  edx,BYTE PTR [edx]
300016d8:	88 10                	mov    BYTE PTR [eax],dl
300016da:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300016dd:	84 c0                	test   al,al
300016df:	75 e2                	jne    300016c3 <strcpy+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
300016e1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300016e4:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
300016e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
300016ea:	c9                   	leave  
300016eb:	c3                   	ret    

300016ec <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
300016ec:	55                   	push   ebp
300016ed:	89 e5                	mov    ebp,esp
300016ef:	83 ec 10             	sub    esp,0x10
300016f2:	e8 f8 13 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300016f7:	05 e1 2d 00 00       	add    eax,0x2de1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
300016fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300016ff:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
30001702:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
30001703:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001706:	8d 50 01             	lea    edx,[eax+0x1]
30001709:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
3000170c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000170f:	8d 4a 01             	lea    ecx,[edx+0x1]
30001712:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
30001715:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001718:	88 10                	mov    BYTE PTR [eax],dl
3000171a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000171d:	84 c0                	test   al,al
3000171f:	75 e2                	jne    30001703 <strcpyI+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
30001721:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001724:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
30001727:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
3000172a:	c9                   	leave  
3000172b:	c3                   	ret    

3000172c <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
3000172c:	55                   	push   ebp
3000172d:	89 e5                	mov    ebp,esp
3000172f:	83 ec 10             	sub    esp,0x10
30001732:	e8 b8 13 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30001737:	05 a1 2d 00 00       	add    eax,0x2da1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
3000173c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000173f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
30001742:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
30001743:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001746:	8d 50 01             	lea    edx,[eax+0x1]
30001749:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
3000174c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000174f:	8d 4a 01             	lea    ecx,[edx+0x1]
30001752:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
30001755:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001758:	88 10                	mov    BYTE PTR [eax],dl
3000175a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000175d:	84 c0                	test   al,al
3000175f:	74 0d                	je     3000176e <strcpyc+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
30001761:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001764:	8d 50 ff             	lea    edx,[eax-0x1]
30001767:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
3000176a:	85 c0                	test   eax,eax
3000176c:	75 d5                	jne    30001743 <strcpyc+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
3000176e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
30001771:	c9                   	leave  
30001772:	c3                   	ret    
30001773:	90                   	nop

30001774 <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
30001774:	55                   	push   ebp
30001775:	89 e5                	mov    ebp,esp
30001777:	83 ec 04             	sub    esp,0x4
3000177a:	e8 70 13 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
3000177f:	05 59 2d 00 00       	add    eax,0x2d59
30001784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001787:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
3000178a:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
3000178e:	7e 0d                	jle    3000179d <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
30001790:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
30001794:	7f 07                	jg     3000179d <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
30001796:	b8 01 00 00 00       	mov    eax,0x1
3000179b:	eb 05                	jmp    300017a2 <check_digit+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
3000179d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
300017a2:	c9                   	leave  
300017a3:	c3                   	ret    

300017a4 <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
300017a4:	55                   	push   ebp
300017a5:	89 e5                	mov    ebp,esp
300017a7:	83 ec 10             	sub    esp,0x10
300017aa:	e8 40 13 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300017af:	05 29 2d 00 00       	add    eax,0x2d29
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
300017b4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
300017bb:	eb 27                	jmp    300017e4 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
300017bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300017c0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300017c3:	89 c2                	mov    edx,eax
300017c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300017c8:	01 d0                	add    eax,edx
300017ca:	0f be c0             	movsx  eax,al
300017cd:	50                   	push   eax
300017ce:	e8 a1 ff ff ff       	call   30001774 <check_digit>
300017d3:	83 c4 04             	add    esp,0x4
300017d6:	83 f0 01             	xor    eax,0x1
300017d9:	84 c0                	test   al,al
300017db:	74 07                	je     300017e4 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
300017dd:	b8 00 00 00 00       	mov    eax,0x0
300017e2:	eb 17                	jmp    300017fb <strisnum+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18

VISIBLE bool strisnum(char* str)
{
    int cnt=0;
    
    while (*str+cnt)
300017e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300017e7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300017ea:	0f be d0             	movsx  edx,al
300017ed:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300017f0:	01 d0                	add    eax,edx
300017f2:	85 c0                	test   eax,eax
300017f4:	75 c7                	jne    300017bd <strisnum+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
        if (!check_digit(*str+cnt))
            return false;
    return true;
300017f6:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
300017fb:	c9                   	leave  
300017fc:	c3                   	ret    
300017fd:	66 90                	xchg   ax,ax
300017ff:	90                   	nop

30001800 <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:3
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
30001800:	55                   	push   ebp
30001801:	89 e5                	mov    ebp,esp
30001803:	83 ec 10             	sub    esp,0x10
30001806:	e8 e4 12 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
3000180b:	05 cd 2c 00 00       	add    eax,0x2ccd
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
          size_t ret = 0;
30001810:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
        while ( str[ret] != 0 )
30001817:	eb 04                	jmp    3000181d <strlen+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
                ret++;
30001819:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
3000181d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001820:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001823:	01 d0                	add    eax,edx
30001825:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001828:	84 c0                	test   al,al
3000182a:	75 ed                	jne    30001819 <strlen+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
        return ret;
3000182c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
}
3000182f:	c9                   	leave  
30001830:	c3                   	ret    

30001831 <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:10

size_t strlenI(const char* str) {
30001831:	55                   	push   ebp
30001832:	89 e5                	mov    ebp,esp
30001834:	83 ec 10             	sub    esp,0x10
30001837:	e8 b3 12 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
3000183c:	05 9c 2c 00 00       	add    eax,0x2c9c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:11
          size_t ret = 0;
30001841:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        while ( str[ret] != 0 )
30001848:	eb 04                	jmp    3000184e <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
                ret++;
3000184a:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        return ret;
}

size_t strlenI(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
3000184e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001851:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001854:	01 d0                	add    eax,edx
30001856:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001859:	84 c0                	test   al,al
3000185b:	75 ed                	jne    3000184a <strlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
                ret++;
        return ret;
3000185d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:15
}
30001860:	c9                   	leave  
30001861:	c3                   	ret    
30001862:	66 90                	xchg   ax,ax

30001864 <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
30001864:	55                   	push   ebp
30001865:	89 e5                	mov    ebp,esp
30001867:	e8 83 12 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
3000186c:	05 6c 2c 00 00       	add    eax,0x2c6c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
30001871:	eb 4b                	jmp    300018be <strncmp+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
30001873:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001876:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001879:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000187c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000187f:	38 c2                	cmp    dl,al
30001881:	74 1e                	je     300018a1 <strncmp+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
30001883:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001886:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001889:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000188c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000188f:	38 c2                	cmp    dl,al
30001891:	73 07                	jae    3000189a <strncmp+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
30001893:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001898:	eb 2f                	jmp    300018c9 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
3000189a:	b8 01 00 00 00       	mov    eax,0x1
3000189f:	eb 28                	jmp    300018c9 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
300018a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300018a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300018a7:	84 c0                	test   al,al
300018a9:	75 07                	jne    300018b2 <strncmp+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
300018ab:	b8 00 00 00 00       	mov    eax,0x0
300018b0:	eb 17                	jmp    300018c9 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
300018b2:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
300018b6:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
300018ba:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
300018be:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
300018c2:	75 af                	jne    30001873 <strncmp+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
300018c4:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
300018c9:	5d                   	pop    ebp
300018ca:	c3                   	ret    

300018cb <strncmpI>:
strncmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:23

int strncmpI(const char *s1, const char *s2, size_t n)
{
300018cb:	55                   	push   ebp
300018cc:	89 e5                	mov    ebp,esp
300018ce:	e8 1c 12 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300018d3:	05 05 2c 00 00       	add    eax,0x2c05
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
300018d8:	eb 4b                	jmp    30001925 <strncmpI+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:25
	if (*s1 != *s2)
300018da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300018dd:	0f b6 10             	movzx  edx,BYTE PTR [eax]
300018e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300018e3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300018e6:	38 c2                	cmp    dl,al
300018e8:	74 1e                	je     30001908 <strncmpI+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
300018ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300018ed:	0f b6 10             	movzx  edx,BYTE PTR [eax]
300018f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300018f3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300018f6:	38 c2                	cmp    dl,al
300018f8:	73 07                	jae    30001901 <strncmpI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 1)
300018fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
300018ff:	eb 2f                	jmp    30001930 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 2)
30001901:	b8 01 00 00 00       	mov    eax,0x1
30001906:	eb 28                	jmp    30001930 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:27
	else if (*s1 == '\0')
30001908:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000190b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000190e:	84 c0                	test   al,al
30001910:	75 07                	jne    30001919 <strncmpI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:28
	    return 0;
30001912:	b8 00 00 00 00       	mov    eax,0x0
30001917:	eb 17                	jmp    30001930 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    return 0;
}

int strncmpI(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
30001919:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
3000191d:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
30001921:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24 (discriminator 1)
30001925:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001929:	75 af                	jne    300018da <strncmpI+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:29
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
3000192b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:30
}
30001930:	5d                   	pop    ebp
30001931:	c3                   	ret    
30001932:	66 90                	xchg   ax,ax

30001934 <strncpyI>:
strncpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
30001934:	55                   	push   ebp
30001935:	89 e5                	mov    ebp,esp
30001937:	83 ec 10             	sub    esp,0x10
3000193a:	e8 b0 11 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
3000193f:	05 99 2b 00 00       	add    eax,0x2b99
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
30001944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001947:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
3000194a:	eb 1b                	jmp    30001967 <strncpyI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
3000194c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000194f:	8d 50 01             	lea    edx,[eax+0x1]
30001952:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001955:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001958:	8d 4a 01             	lea    ecx,[edx+0x1]
3000195b:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
3000195e:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001961:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
30001963:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
30001967:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
3000196b:	74 1c                	je     30001989 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
3000196d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001970:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001973:	84 c0                	test   al,al
30001975:	75 d5                	jne    3000194c <strncpyI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
30001977:	eb 10                	jmp    30001989 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
30001979:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000197c:	8d 50 01             	lea    edx,[eax+0x1]
3000197f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001982:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
30001985:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
30001989:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
3000198d:	75 ea                	jne    30001979 <strncpyI+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    return s1;
3000198f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
}
30001992:	c9                   	leave  
30001993:	c3                   	ret    

30001994 <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:28

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
30001994:	55                   	push   ebp
30001995:	89 e5                	mov    ebp,esp
30001997:	e8 53 11 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
3000199c:	05 3c 2b 00 00       	add    eax,0x2b3c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:29
    return strncpyI(s1, s2, n);
300019a1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
300019a4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300019a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300019aa:	e8 85 ff ff ff       	call   30001934 <strncpyI>
300019af:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:30
}
300019b2:	c9                   	leave  
300019b3:	c3                   	ret    

300019b4 <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
300019b4:	55                   	push   ebp
300019b5:	89 e5                	mov    ebp,esp
300019b7:	57                   	push   edi
300019b8:	56                   	push   esi
300019b9:	53                   	push   ebx
300019ba:	83 ec 08             	sub    esp,0x8
300019bd:	e8 2d 11 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300019c2:	05 16 2b 00 00       	add    eax,0x2b16
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
300019c7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
300019ca:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
300019d1:	89 f0                	mov    eax,esi
300019d3:	8d 70 01             	lea    esi,[eax+0x1]
300019d6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300019d9:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
300019dc:	83 fb 20             	cmp    ebx,0x20
300019df:	74 f0                	je     300019d1 <strtoul+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
300019e1:	83 fb 2d             	cmp    ebx,0x2d
300019e4:	75 14                	jne    300019fa <strtoul+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
300019e6:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
300019ed:	89 f0                	mov    eax,esi
300019ef:	8d 70 01             	lea    esi,[eax+0x1]
300019f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300019f5:	0f be d8             	movsx  ebx,al
300019f8:	eb 10                	jmp    30001a0a <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
300019fa:	83 fb 2b             	cmp    ebx,0x2b
300019fd:	75 0b                	jne    30001a0a <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
300019ff:	89 f0                	mov    eax,esi
30001a01:	8d 70 01             	lea    esi,[eax+0x1]
30001a04:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001a07:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
30001a0a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001a0e:	74 06                	je     30001a16 <strtoul+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
30001a10:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
30001a14:	75 26                	jne    30001a3c <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
30001a16:	83 fb 30             	cmp    ebx,0x30
30001a19:	75 21                	jne    30001a3c <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
30001a1b:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001a1e:	3c 78                	cmp    al,0x78
30001a20:	74 07                	je     30001a29 <strtoul+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
30001a22:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001a25:	3c 58                	cmp    al,0x58
30001a27:	75 13                	jne    30001a3c <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
30001a29:	8d 46 01             	lea    eax,[esi+0x1]
30001a2c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001a2f:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
30001a32:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
30001a35:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
30001a3c:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001a40:	75 14                	jne    30001a56 <strtoul+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
30001a42:	83 fb 30             	cmp    ebx,0x30
30001a45:	75 07                	jne    30001a4e <strtoul+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
30001a47:	b8 08 00 00 00       	mov    eax,0x8
30001a4c:	eb 05                	jmp    30001a53 <strtoul+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
30001a4e:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
30001a53:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
30001a56:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30001a59:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001a5e:	ba 00 00 00 00       	mov    edx,0x0
30001a63:	f7 f1                	div    ecx
30001a65:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
30001a68:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30001a6b:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001a70:	ba 00 00 00 00       	mov    edx,0x0
30001a75:	f7 f1                	div    ecx
30001a77:	89 d0                	mov    eax,edx
30001a79:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
30001a7b:	bf 00 00 00 00       	mov    edi,0x0
30001a80:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
30001a85:	8d 43 d0             	lea    eax,[ebx-0x30]
30001a88:	83 f8 09             	cmp    eax,0x9
30001a8b:	77 05                	ja     30001a92 <strtoul+0xde>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
30001a8d:	83 eb 30             	sub    ebx,0x30
30001a90:	eb 25                	jmp    30001ab7 <strtoul+0x103>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
30001a92:	89 d8                	mov    eax,ebx
30001a94:	83 c8 20             	or     eax,0x20
30001a97:	83 e8 61             	sub    eax,0x61
30001a9a:	83 f8 19             	cmp    eax,0x19
30001a9d:	77 56                	ja     30001af5 <strtoul+0x141>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
30001a9f:	83 fb 40             	cmp    ebx,0x40
30001aa2:	7e 0c                	jle    30001ab0 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
30001aa4:	83 fb 5a             	cmp    ebx,0x5a
30001aa7:	7f 07                	jg     30001ab0 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
30001aa9:	b8 37 00 00 00       	mov    eax,0x37
30001aae:	eb 05                	jmp    30001ab5 <strtoul+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
30001ab0:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
30001ab5:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
30001ab7:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
30001aba:	7d 3c                	jge    30001af8 <strtoul+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
30001abc:	89 c8                	mov    eax,ecx
30001abe:	85 c0                	test   eax,eax
30001ac0:	78 10                	js     30001ad2 <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
30001ac2:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001ac5:	77 0b                	ja     30001ad2 <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
30001ac7:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001aca:	75 0d                	jne    30001ad9 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
30001acc:	89 d0                	mov    eax,edx
30001ace:	39 c3                	cmp    ebx,eax
30001ad0:	7e 07                	jle    30001ad9 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
30001ad2:	b9 ff ff ff ff       	mov    ecx,0xffffffff
30001ad7:	eb 0f                	jmp    30001ae8 <strtoul+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
30001ad9:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
30001ade:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001ae1:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
30001ae4:	89 d8                	mov    eax,ebx
30001ae6:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
30001ae8:	89 f0                	mov    eax,esi
30001aea:	8d 70 01             	lea    esi,[eax+0x1]
30001aed:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001af0:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
30001af3:	eb 90                	jmp    30001a85 <strtoul+0xd1>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
30001af5:	90                   	nop
30001af6:	eb 01                	jmp    30001af9 <strtoul+0x145>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
30001af8:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
30001af9:	89 c8                	mov    eax,ecx
30001afb:	85 c0                	test   eax,eax
30001afd:	79 07                	jns    30001b06 <strtoul+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
30001aff:	bf ff ff ff ff       	mov    edi,0xffffffff
30001b04:	eb 08                	jmp    30001b0e <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
30001b06:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001b0a:	74 02                	je     30001b0e <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
30001b0c:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
30001b0e:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
30001b12:	74 13                	je     30001b27 <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
30001b14:	89 c8                	mov    eax,ecx
30001b16:	85 c0                	test   eax,eax
30001b18:	74 05                	je     30001b1f <strtoul+0x16b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
30001b1a:	8d 46 ff             	lea    eax,[esi-0x1]
30001b1d:	eb 03                	jmp    30001b22 <strtoul+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
30001b1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
30001b22:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001b25:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
30001b27:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
30001b29:	83 c4 08             	add    esp,0x8
30001b2c:	5b                   	pop    ebx
30001b2d:	5e                   	pop    esi
30001b2e:	5f                   	pop    edi
30001b2f:	5d                   	pop    ebp
30001b30:	c3                   	ret    
30001b31:	66 90                	xchg   ax,ax
30001b33:	90                   	nop

30001b34 <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
30001b34:	55                   	push   ebp
30001b35:	89 e5                	mov    ebp,esp
30001b37:	e8 b3 0f 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30001b3c:	05 9c 29 00 00       	add    eax,0x299c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
30001b41:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001b44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001b47:	01 d0                	add    eax,edx
30001b49:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
30001b4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
30001b4f:	5d                   	pop    ebp
30001b50:	c3                   	ret    
30001b51:	66 90                	xchg   ax,ax
30001b53:	90                   	nop

30001b54 <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
30001b54:	55                   	push   ebp
30001b55:	89 e5                	mov    ebp,esp
30001b57:	57                   	push   edi
30001b58:	56                   	push   esi
30001b59:	53                   	push   ebx
30001b5a:	83 ec 0c             	sub    esp,0xc
30001b5d:	e8 8d 0f 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30001b62:	05 76 29 00 00       	add    eax,0x2976
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
30001b67:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
30001b6a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
30001b71:	89 f0                	mov    eax,esi
30001b73:	8d 70 01             	lea    esi,[eax+0x1]
30001b76:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001b79:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
30001b7c:	83 fb 20             	cmp    ebx,0x20
30001b7f:	74 f0                	je     30001b71 <strtol+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
30001b81:	83 fb 2d             	cmp    ebx,0x2d
30001b84:	75 14                	jne    30001b9a <strtol+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
30001b86:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
30001b8d:	89 f0                	mov    eax,esi
30001b8f:	8d 70 01             	lea    esi,[eax+0x1]
30001b92:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001b95:	0f be d8             	movsx  ebx,al
30001b98:	eb 10                	jmp    30001baa <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
30001b9a:	83 fb 2b             	cmp    ebx,0x2b
30001b9d:	75 0b                	jne    30001baa <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
30001b9f:	89 f0                	mov    eax,esi
30001ba1:	8d 70 01             	lea    esi,[eax+0x1]
30001ba4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001ba7:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
30001baa:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001bae:	74 06                	je     30001bb6 <strtol+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
30001bb0:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
30001bb4:	75 26                	jne    30001bdc <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
30001bb6:	83 fb 30             	cmp    ebx,0x30
30001bb9:	75 21                	jne    30001bdc <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
30001bbb:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001bbe:	3c 78                	cmp    al,0x78
30001bc0:	74 07                	je     30001bc9 <strtol+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
30001bc2:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001bc5:	3c 58                	cmp    al,0x58
30001bc7:	75 13                	jne    30001bdc <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
30001bc9:	8d 46 01             	lea    eax,[esi+0x1]
30001bcc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001bcf:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
30001bd2:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
30001bd5:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
30001bdc:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001be0:	75 14                	jne    30001bf6 <strtol+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
30001be2:	83 fb 30             	cmp    ebx,0x30
30001be5:	75 07                	jne    30001bee <strtol+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
30001be7:	b8 08 00 00 00       	mov    eax,0x8
30001bec:	eb 05                	jmp    30001bf3 <strtol+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
30001bee:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
30001bf3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
30001bf6:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001bfa:	74 07                	je     30001c03 <strtol+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
30001bfc:	b8 00 00 00 80       	mov    eax,0x80000000
30001c01:	eb 05                	jmp    30001c08 <strtol+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
30001c03:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
30001c08:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30001c0b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
30001c0e:	ba 00 00 00 00       	mov    edx,0x0
30001c13:	f7 f1                	div    ecx
30001c15:	89 d1                	mov    ecx,edx
30001c17:	89 c8                	mov    eax,ecx
30001c19:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
30001c1c:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
30001c1f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001c22:	ba 00 00 00 00       	mov    edx,0x0
30001c27:	f7 f7                	div    edi
30001c29:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
30001c2c:	bf 00 00 00 00       	mov    edi,0x0
30001c31:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
30001c36:	8d 43 d0             	lea    eax,[ebx-0x30]
30001c39:	83 f8 09             	cmp    eax,0x9
30001c3c:	77 05                	ja     30001c43 <strtol+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
30001c3e:	83 eb 30             	sub    ebx,0x30
30001c41:	eb 25                	jmp    30001c68 <strtol+0x114>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
30001c43:	89 d8                	mov    eax,ebx
30001c45:	83 c8 20             	or     eax,0x20
30001c48:	83 e8 61             	sub    eax,0x61
30001c4b:	83 f8 19             	cmp    eax,0x19
30001c4e:	77 55                	ja     30001ca5 <strtol+0x151>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
30001c50:	83 fb 40             	cmp    ebx,0x40
30001c53:	7e 0c                	jle    30001c61 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
30001c55:	83 fb 5a             	cmp    ebx,0x5a
30001c58:	7f 07                	jg     30001c61 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
30001c5a:	b8 37 00 00 00       	mov    eax,0x37
30001c5f:	eb 05                	jmp    30001c66 <strtol+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
30001c61:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
30001c66:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
30001c68:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
30001c6b:	7d 3b                	jge    30001ca8 <strtol+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
30001c6d:	89 c8                	mov    eax,ecx
30001c6f:	85 c0                	test   eax,eax
30001c71:	78 0f                	js     30001c82 <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
30001c73:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001c76:	77 0a                	ja     30001c82 <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
30001c78:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001c7b:	75 0c                	jne    30001c89 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
30001c7d:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
30001c80:	7e 07                	jle    30001c89 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
30001c82:	b9 ff ff ff ff       	mov    ecx,0xffffffff
30001c87:	eb 0f                	jmp    30001c98 <strtol+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
30001c89:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
30001c8e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001c91:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
30001c94:	89 d8                	mov    eax,ebx
30001c96:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
30001c98:	89 f0                	mov    eax,esi
30001c9a:	8d 70 01             	lea    esi,[eax+0x1]
30001c9d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001ca0:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
30001ca3:	eb 91                	jmp    30001c36 <strtol+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
30001ca5:	90                   	nop
30001ca6:	eb 01                	jmp    30001ca9 <strtol+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
30001ca8:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
30001ca9:	89 c8                	mov    eax,ecx
30001cab:	85 c0                	test   eax,eax
30001cad:	79 16                	jns    30001cc5 <strtol+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
30001caf:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001cb3:	74 07                	je     30001cbc <strtol+0x168>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
30001cb5:	b8 00 00 00 80       	mov    eax,0x80000000
30001cba:	eb 05                	jmp    30001cc1 <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
30001cbc:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
30001cc1:	89 c7                	mov    edi,eax
30001cc3:	eb 08                	jmp    30001ccd <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
30001cc5:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001cc9:	74 02                	je     30001ccd <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
30001ccb:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
30001ccd:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
30001cd1:	74 13                	je     30001ce6 <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
30001cd3:	89 c8                	mov    eax,ecx
30001cd5:	85 c0                	test   eax,eax
30001cd7:	74 05                	je     30001cde <strtol+0x18a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
30001cd9:	8d 46 ff             	lea    eax,[esi-0x1]
30001cdc:	eb 03                	jmp    30001ce1 <strtol+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
30001cde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
30001ce1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001ce4:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
30001ce6:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
30001ce8:	83 c4 0c             	add    esp,0xc
30001ceb:	5b                   	pop    ebx
30001cec:	5e                   	pop    esi
30001ced:	5f                   	pop    edi
30001cee:	5d                   	pop    ebp
30001cef:	c3                   	ret    

30001cf0 <strtrimI>:
strtrimI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

void strtrimI(char *input)
{
30001cf0:	55                   	push   ebp
30001cf1:	89 e5                	mov    ebp,esp
30001cf3:	53                   	push   ebx
30001cf4:	83 ec 14             	sub    esp,0x14
30001cf7:	e8 f3 0d 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30001cfc:	05 dc 27 00 00       	add    eax,0x27dc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
30001d01:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001d04:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001d07:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001d0a:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
30001d0d:	eb 04                	jmp    30001d13 <strtrimI+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
30001d0f:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *dst = input, *src = input;
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
30001d13:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30001d16:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001d19:	80 fa 20             	cmp    dl,0x20
30001d1c:	74 f1                	je     30001d0f <strtrimI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
      ++src;
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
30001d1e:	83 ec 0c             	sub    esp,0xc
30001d21:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30001d24:	89 c3                	mov    ebx,eax
30001d26:	e8 06 fb ff ff       	call   30001831 <strlenI>
30001d2b:	83 c4 10             	add    esp,0x10
30001d2e:	8d 50 ff             	lea    edx,[eax-0x1]
30001d31:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001d34:	01 d0                	add    eax,edx
30001d36:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
30001d39:	eb 0c                	jmp    30001d47 <strtrimI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
30001d3b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001d3e:	8d 50 ff             	lea    edx,[eax-0x1]
30001d41:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
30001d44:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
   while (end > src && *end==' ')
30001d47:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001d4a:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30001d4d:	76 0a                	jbe    30001d59 <strtrimI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
30001d4f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001d52:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001d55:	3c 20                	cmp    al,0x20
30001d57:	74 e2                	je     30001d3b <strtrimI+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
      *end-- = 0;
   }

   // Move if needed.
   //
   if (src != dst)
30001d59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001d5c:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
30001d5f:	74 1f                	je     30001d80 <strtrimI+0x90>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
30001d61:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
30001d62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001d65:	8d 50 01             	lea    edx,[eax+0x1]
30001d68:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001d6b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30001d6e:	8d 4a 01             	lea    ecx,[edx+0x1]
30001d71:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
30001d74:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001d77:	88 10                	mov    BYTE PTR [eax],dl
30001d79:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001d7c:	84 c0                	test   al,al
30001d7e:	75 e2                	jne    30001d62 <strtrimI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
30001d80:	90                   	nop
30001d81:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001d84:	c9                   	leave  
30001d85:	c3                   	ret    

30001d86 <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:32

__attribute__((visibility("default"))) void strtrim(char *input)
{
30001d86:	55                   	push   ebp
30001d87:	89 e5                	mov    ebp,esp
30001d89:	83 ec 08             	sub    esp,0x8
30001d8c:	e8 5e 0d 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30001d91:	05 47 27 00 00       	add    eax,0x2747
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:33
    return strtrimI(input);
30001d96:	83 ec 0c             	sub    esp,0xc
30001d99:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001d9c:	e8 4f ff ff ff       	call   30001cf0 <strtrimI>
30001da1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:34
}
30001da4:	c9                   	leave  
30001da5:	c3                   	ret    
30001da6:	66 90                	xchg   ax,ax

30001da8 <strstrI>:
strstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:52
 */

#include "strings.h"

char* strstrI(char* string, char* substring)
{
30001da8:	55                   	push   ebp
30001da9:	89 e5                	mov    ebp,esp
30001dab:	56                   	push   esi
30001dac:	53                   	push   ebx
30001dad:	e8 3d 0d 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30001db2:	05 26 27 00 00       	add    eax,0x2726
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:60
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
30001db7:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:61
    if (*b == 0) {
30001dba:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30001dbd:	84 c0                	test   al,al
30001dbf:	75 42                	jne    30001e03 <strstrI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
	return string;
30001dc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001dc4:	eb 4c                	jmp    30001e12 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
30001dc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001dc9:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001dcc:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30001dcf:	38 c2                	cmp    dl,al
30001dd1:	75 2b                	jne    30001dfe <strstrI+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
	    continue;
	}
	a = string;
30001dd3:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:70
	while (1) {
	    if (*b == 0) {
30001dd6:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30001dd9:	84 c0                	test   al,al
30001ddb:	75 05                	jne    30001de2 <strstrI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:71
		return string;
30001ddd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001de0:	eb 30                	jmp    30001e12 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:73
	    }
	    if (*a++ != *b++) {
30001de2:	89 f0                	mov    eax,esi
30001de4:	8d 70 01             	lea    esi,[eax+0x1]
30001de7:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001dea:	89 d8                	mov    eax,ebx
30001dec:	8d 58 01             	lea    ebx,[eax+0x1]
30001def:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001df2:	38 c2                	cmp    dl,al
30001df4:	75 02                	jne    30001df8 <strstrI+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:76
		break;
	    }
	}
30001df6:	eb de                	jmp    30001dd6 <strstrI+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
	while (1) {
	    if (*b == 0) {
		return string;
	    }
	    if (*a++ != *b++) {
		break;
30001df8:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
	    }
	}
	b = substring;
30001df9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
30001dfc:	eb 01                	jmp    30001dff <strstrI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
	    continue;
30001dfe:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64

    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
30001dff:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64 (discriminator 1)
30001e03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001e06:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001e09:	84 c0                	test   al,al
30001e0b:	75 b9                	jne    30001dc6 <strstrI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
30001e0d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:80
}
30001e12:	5b                   	pop    ebx
30001e13:	5e                   	pop    esi
30001e14:	5d                   	pop    ebp
30001e15:	c3                   	ret    

30001e16 <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:83

VISIBLE char* strstr(char* string, char* substring)
{
30001e16:	55                   	push   ebp
30001e17:	89 e5                	mov    ebp,esp
30001e19:	e8 d1 0c 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30001e1e:	05 ba 26 00 00       	add    eax,0x26ba
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:84
    return strstrI(string, substring);
30001e23:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001e26:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001e29:	e8 7a ff ff ff       	call   30001da8 <strstrI>
30001e2e:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:85
30001e31:	c9                   	leave  
30001e32:	c3                   	ret    
30001e33:	90                   	nop

30001e34 <getticks>:
getticks():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:23
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t getticks(/*time_t* arg*/)
{
30001e34:	55                   	push   ebp
30001e35:	89 e5                	mov    ebp,esp
30001e37:	56                   	push   esi
30001e38:	53                   	push   ebx
30001e39:	83 ec 10             	sub    esp,0x10
30001e3c:	e8 ae 0c 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30001e41:	05 97 26 00 00       	add    eax,0x2697
/home/yogi/src/os/aproj/libChrisOS/src/time.c:24
    uint32_t retVal=0;
30001e46:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:25
    GET_TICKS(retVal);
30001e4d:	b8 70 01 00 00       	mov    eax,0x170
30001e52:	bb 00 00 00 00       	mov    ebx,0x0
30001e57:	b9 00 00 00 00       	mov    ecx,0x0
30001e5c:	ba 00 00 00 00       	mov    edx,0x0
30001e61:	be 00 00 00 00       	mov    esi,0x0
30001e66:	e8 fc ff ff ff       	call   30001e67 <getticks+0x33>
30001e6b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:26
    return (time_t)retVal;
30001e6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
}
30001e71:	83 c4 10             	add    esp,0x10
30001e74:	5b                   	pop    ebx
30001e75:	5e                   	pop    esi
30001e76:	5d                   	pop    ebp
30001e77:	c3                   	ret    

30001e78 <gmtime_rI>:
gmtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:31


struct tm *gmtime_rI(const time_t *timer, struct tm *tmbuf) 
{
30001e78:	55                   	push   ebp
30001e79:	89 e5                	mov    ebp,esp
30001e7b:	53                   	push   ebx
30001e7c:	83 ec 10             	sub    esp,0x10
30001e7f:	e8 9c 0c 00 00       	call   30002b20 <__x86.get_pc_thunk.bx>
30001e84:	81 c3 54 26 00 00    	add    ebx,0x2654
/home/yogi/src/os/aproj/libChrisOS/src/time.c:32
  time_t time = *timer;
30001e8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001e8d:	8b 00                	mov    eax,DWORD PTR [eax]
30001e8f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:34
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
30001e92:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:36

  dayclock = (unsigned long) time % SECS_DAY;
30001e99:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
30001e9c:	ba 07 45 2e c2       	mov    edx,0xc22e4507
30001ea1:	89 c8                	mov    eax,ecx
30001ea3:	f7 e2                	mul    edx
30001ea5:	89 d0                	mov    eax,edx
30001ea7:	c1 e8 10             	shr    eax,0x10
30001eaa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
30001ead:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001eb0:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
30001eb6:	29 c1                	sub    ecx,eax
30001eb8:	89 c8                	mov    eax,ecx
30001eba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:37
  dayno = (unsigned long) time / SECS_DAY;
30001ebd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001ec0:	ba 07 45 2e c2       	mov    edx,0xc22e4507
30001ec5:	f7 e2                	mul    edx
30001ec7:	89 d0                	mov    eax,edx
30001ec9:	c1 e8 10             	shr    eax,0x10
30001ecc:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:39

  tmbuf->tm_sec = dayclock % 60;
30001ecf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
30001ed2:	ba 89 88 88 88       	mov    edx,0x88888889
30001ed7:	89 c8                	mov    eax,ecx
30001ed9:	f7 e2                	mul    edx
30001edb:	89 d0                	mov    eax,edx
30001edd:	c1 e8 05             	shr    eax,0x5
30001ee0:	89 c2                	mov    edx,eax
30001ee2:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
30001ee9:	89 c2                	mov    edx,eax
30001eeb:	89 d0                	mov    eax,edx
30001eed:	c1 e0 04             	shl    eax,0x4
30001ef0:	29 d0                	sub    eax,edx
30001ef2:	29 c1                	sub    ecx,eax
30001ef4:	89 c8                	mov    eax,ecx
30001ef6:	89 c2                	mov    edx,eax
30001ef8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001efb:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40
  tmbuf->tm_min = (dayclock % 3600) / 60;
30001efd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
30001f00:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
30001f05:	89 c8                	mov    eax,ecx
30001f07:	f7 e2                	mul    edx
30001f09:	89 d0                	mov    eax,edx
30001f0b:	c1 e8 0b             	shr    eax,0xb
30001f0e:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
30001f14:	29 c1                	sub    ecx,eax
30001f16:	89 c8                	mov    eax,ecx
30001f18:	ba 89 88 88 88       	mov    edx,0x88888889
30001f1d:	f7 e2                	mul    edx
30001f1f:	89 d0                	mov    eax,edx
30001f21:	c1 e8 05             	shr    eax,0x5
30001f24:	89 c2                	mov    edx,eax
30001f26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001f29:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  tmbuf->tm_hour = dayclock / 3600;
30001f2c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001f2f:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
30001f34:	f7 e2                	mul    edx
30001f36:	89 d0                	mov    eax,edx
30001f38:	c1 e8 0b             	shr    eax,0xb
30001f3b:	89 c2                	mov    edx,eax
30001f3d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001f40:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
30001f43:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001f46:	8d 48 04             	lea    ecx,[eax+0x4]
30001f49:	ba 25 49 92 24       	mov    edx,0x24924925
30001f4e:	89 c8                	mov    eax,ecx
30001f50:	f7 e2                	mul    edx
30001f52:	89 c8                	mov    eax,ecx
30001f54:	29 d0                	sub    eax,edx
30001f56:	d1 e8                	shr    eax,1
30001f58:	01 d0                	add    eax,edx
30001f5a:	c1 e8 02             	shr    eax,0x2
30001f5d:	89 c2                	mov    edx,eax
30001f5f:	c1 e2 03             	shl    edx,0x3
30001f62:	29 c2                	sub    edx,eax
30001f64:	89 c8                	mov    eax,ecx
30001f66:	29 d0                	sub    eax,edx
30001f68:	89 c2                	mov    edx,eax
30001f6a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001f6d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43
  while (dayno >= (unsigned long) YEARSIZE(year)) {
30001f70:	eb 66                	jmp    30001fd8 <gmtime_rI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44
    dayno -= YEARSIZE(year);
30001f72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001f75:	83 e0 03             	and    eax,0x3
30001f78:	85 c0                	test   eax,eax
30001f7a:	75 50                	jne    30001fcc <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 1)
30001f7c:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001f7f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001f84:	89 c8                	mov    eax,ecx
30001f86:	f7 ea                	imul   edx
30001f88:	c1 fa 05             	sar    edx,0x5
30001f8b:	89 c8                	mov    eax,ecx
30001f8d:	c1 f8 1f             	sar    eax,0x1f
30001f90:	29 c2                	sub    edx,eax
30001f92:	89 d0                	mov    eax,edx
30001f94:	6b c0 64             	imul   eax,eax,0x64
30001f97:	29 c1                	sub    ecx,eax
30001f99:	89 c8                	mov    eax,ecx
30001f9b:	85 c0                	test   eax,eax
30001f9d:	75 26                	jne    30001fc5 <gmtime_rI+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 4)
30001f9f:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001fa2:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001fa7:	89 c8                	mov    eax,ecx
30001fa9:	f7 ea                	imul   edx
30001fab:	c1 fa 07             	sar    edx,0x7
30001fae:	89 c8                	mov    eax,ecx
30001fb0:	c1 f8 1f             	sar    eax,0x1f
30001fb3:	29 c2                	sub    edx,eax
30001fb5:	89 d0                	mov    eax,edx
30001fb7:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30001fbd:	29 c1                	sub    ecx,eax
30001fbf:	89 c8                	mov    eax,ecx
30001fc1:	85 c0                	test   eax,eax
30001fc3:	75 07                	jne    30001fcc <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 5)
30001fc5:	b8 6e 01 00 00       	mov    eax,0x16e
30001fca:	eb 05                	jmp    30001fd1 <gmtime_rI+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 6)
30001fcc:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 8)
30001fd1:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 8)
    year++;
30001fd4:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
30001fd8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001fdb:	83 e0 03             	and    eax,0x3
30001fde:	85 c0                	test   eax,eax
30001fe0:	75 50                	jne    30002032 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 1)
30001fe2:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001fe5:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001fea:	89 c8                	mov    eax,ecx
30001fec:	f7 ea                	imul   edx
30001fee:	c1 fa 05             	sar    edx,0x5
30001ff1:	89 c8                	mov    eax,ecx
30001ff3:	c1 f8 1f             	sar    eax,0x1f
30001ff6:	29 c2                	sub    edx,eax
30001ff8:	89 d0                	mov    eax,edx
30001ffa:	6b c0 64             	imul   eax,eax,0x64
30001ffd:	29 c1                	sub    ecx,eax
30001fff:	89 c8                	mov    eax,ecx
30002001:	85 c0                	test   eax,eax
30002003:	75 26                	jne    3000202b <gmtime_rI+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 4)
30002005:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30002008:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000200d:	89 c8                	mov    eax,ecx
3000200f:	f7 ea                	imul   edx
30002011:	c1 fa 07             	sar    edx,0x7
30002014:	89 c8                	mov    eax,ecx
30002016:	c1 f8 1f             	sar    eax,0x1f
30002019:	29 c2                	sub    edx,eax
3000201b:	89 d0                	mov    eax,edx
3000201d:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002023:	29 c1                	sub    ecx,eax
30002025:	89 c8                	mov    eax,ecx
30002027:	85 c0                	test   eax,eax
30002029:	75 07                	jne    30002032 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 5)
3000202b:	b8 6e 01 00 00       	mov    eax,0x16e
30002030:	eb 05                	jmp    30002037 <gmtime_rI+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 6)
30002032:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 8)
30002037:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
3000203a:	0f 86 32 ff ff ff    	jbe    30001f72 <gmtime_rI+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
30002040:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30002043:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
30002049:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000204c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
  tmbuf->tm_yday = dayno;
3000204f:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
30002052:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002055:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49
  tmbuf->tm_mon = 0;
30002058:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000205b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
30002062:	e9 89 00 00 00       	jmp    300020f0 <gmtime_rI+0x278>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
30002067:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000206a:	83 e0 03             	and    eax,0x3
3000206d:	85 c0                	test   eax,eax
3000206f:	75 50                	jne    300020c1 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 1)
30002071:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30002074:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002079:	89 c8                	mov    eax,ecx
3000207b:	f7 ea                	imul   edx
3000207d:	c1 fa 05             	sar    edx,0x5
30002080:	89 c8                	mov    eax,ecx
30002082:	c1 f8 1f             	sar    eax,0x1f
30002085:	29 c2                	sub    edx,eax
30002087:	89 d0                	mov    eax,edx
30002089:	6b c0 64             	imul   eax,eax,0x64
3000208c:	29 c1                	sub    ecx,eax
3000208e:	89 c8                	mov    eax,ecx
30002090:	85 c0                	test   eax,eax
30002092:	75 26                	jne    300020ba <gmtime_rI+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 4)
30002094:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30002097:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000209c:	89 c8                	mov    eax,ecx
3000209e:	f7 ea                	imul   edx
300020a0:	c1 fa 07             	sar    edx,0x7
300020a3:	89 c8                	mov    eax,ecx
300020a5:	c1 f8 1f             	sar    eax,0x1f
300020a8:	29 c2                	sub    edx,eax
300020aa:	89 d0                	mov    eax,edx
300020ac:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300020b2:	29 c1                	sub    ecx,eax
300020b4:	89 c8                	mov    eax,ecx
300020b6:	85 c0                	test   eax,eax
300020b8:	75 07                	jne    300020c1 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 5)
300020ba:	ba 01 00 00 00       	mov    edx,0x1
300020bf:	eb 05                	jmp    300020c6 <gmtime_rI+0x24e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 6)
300020c1:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 8)
300020c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300020c9:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
300020cc:	89 d0                	mov    eax,edx
300020ce:	01 c0                	add    eax,eax
300020d0:	01 d0                	add    eax,edx
300020d2:	c1 e0 02             	shl    eax,0x2
300020d5:	01 c8                	add    eax,ecx
300020d7:	8b 84 83 48 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2b8]
300020de:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 8)
    tmbuf->tm_mon++;
300020e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300020e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
300020e7:	8d 50 01             	lea    edx,[eax+0x1]
300020ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300020ed:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
300020f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300020f3:	83 e0 03             	and    eax,0x3
300020f6:	85 c0                	test   eax,eax
300020f8:	75 50                	jne    3000214a <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 1)
300020fa:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
300020fd:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002102:	89 c8                	mov    eax,ecx
30002104:	f7 ea                	imul   edx
30002106:	c1 fa 05             	sar    edx,0x5
30002109:	89 c8                	mov    eax,ecx
3000210b:	c1 f8 1f             	sar    eax,0x1f
3000210e:	29 c2                	sub    edx,eax
30002110:	89 d0                	mov    eax,edx
30002112:	6b c0 64             	imul   eax,eax,0x64
30002115:	29 c1                	sub    ecx,eax
30002117:	89 c8                	mov    eax,ecx
30002119:	85 c0                	test   eax,eax
3000211b:	75 26                	jne    30002143 <gmtime_rI+0x2cb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 4)
3000211d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30002120:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002125:	89 c8                	mov    eax,ecx
30002127:	f7 ea                	imul   edx
30002129:	c1 fa 07             	sar    edx,0x7
3000212c:	89 c8                	mov    eax,ecx
3000212e:	c1 f8 1f             	sar    eax,0x1f
30002131:	29 c2                	sub    edx,eax
30002133:	89 d0                	mov    eax,edx
30002135:	69 c0 90 01 00 00    	imul   eax,eax,0x190
3000213b:	29 c1                	sub    ecx,eax
3000213d:	89 c8                	mov    eax,ecx
3000213f:	85 c0                	test   eax,eax
30002141:	75 07                	jne    3000214a <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 5)
30002143:	ba 01 00 00 00       	mov    edx,0x1
30002148:	eb 05                	jmp    3000214f <gmtime_rI+0x2d7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 6)
3000214a:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 8)
3000214f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002152:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
30002155:	89 d0                	mov    eax,edx
30002157:	01 c0                	add    eax,eax
30002159:	01 d0                	add    eax,edx
3000215b:	c1 e0 02             	shl    eax,0x2
3000215e:	01 c8                	add    eax,ecx
30002160:	8b 84 83 48 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2b8]
30002167:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
3000216a:	0f 86 f7 fe ff ff    	jbe    30002067 <gmtime_rI+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
30002170:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30002173:	83 c0 01             	add    eax,0x1
30002176:	89 c2                	mov    edx,eax
30002178:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000217b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
  tmbuf->tm_isdst = 0;
3000217e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002181:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56
  return tmbuf;
30002188:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:57
}
3000218b:	83 c4 10             	add    esp,0x10
3000218e:	5b                   	pop    ebx
3000218f:	5d                   	pop    ebp
30002190:	c3                   	ret    

30002191 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:60

VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) 
{
30002191:	55                   	push   ebp
30002192:	89 e5                	mov    ebp,esp
30002194:	e8 56 09 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30002199:	05 3f 23 00 00       	add    eax,0x233f
/home/yogi/src/os/aproj/libChrisOS/src/time.c:61
    return gmtime_rI(timer, tmbuf);
3000219e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300021a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300021a4:	e8 cf fc ff ff       	call   30001e78 <gmtime_rI>
300021a9:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:62
}
300021ac:	c9                   	leave  
300021ad:	c3                   	ret    

300021ae <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:64

VISIBLE struct tm *localtime(const time_t *timer) {
300021ae:	55                   	push   ebp
300021af:	89 e5                	mov    ebp,esp
300021b1:	53                   	push   ebx
300021b2:	83 ec 34             	sub    esp,0x34
300021b5:	e8 35 09 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300021ba:	05 1e 23 00 00       	add    eax,0x231e
/home/yogi/src/os/aproj/libChrisOS/src/time.c:68
  time_t t;
  struct tm tmbuf;
  
  t = *timer - libcTZ;
300021bf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300021c2:	8b 12                	mov    edx,DWORD PTR [edx]
300021c4:	89 d1                	mov    ecx,edx
300021c6:	8b 90 fc ff ff ff    	mov    edx,DWORD PTR [eax-0x4]
300021cc:	8b 12                	mov    edx,DWORD PTR [edx]
300021ce:	29 d1                	sub    ecx,edx
300021d0:	89 ca                	mov    edx,ecx
300021d2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:69
  return gmtime_r(&t, &tmbuf);
300021d5:	83 ec 08             	sub    esp,0x8
300021d8:	8d 55 c8             	lea    edx,[ebp-0x38]
300021db:	52                   	push   edx
300021dc:	8d 55 f4             	lea    edx,[ebp-0xc]
300021df:	52                   	push   edx
300021e0:	89 c3                	mov    ebx,eax
300021e2:	e8 29 09 00 00       	call   30002b10 <__x86.get_pc_thunk.ax+0x21>
300021e7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:70
}
300021ea:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300021ed:	c9                   	leave  
300021ee:	c3                   	ret    

300021ef <localtime_rI>:
localtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73

struct tm *localtime_rI(const time_t *timer, struct tm *tmbuf) 
{
300021ef:	55                   	push   ebp
300021f0:	89 e5                	mov    ebp,esp
300021f2:	83 ec 10             	sub    esp,0x10
300021f5:	e8 f5 08 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
300021fa:	05 de 22 00 00       	add    eax,0x22de
/home/yogi/src/os/aproj/libChrisOS/src/time.c:76
  time_t t;

  t = *timer - libcTZ;
300021ff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30002202:	8b 12                	mov    edx,DWORD PTR [edx]
30002204:	8b 80 fc ff ff ff    	mov    eax,DWORD PTR [eax-0x4]
3000220a:	8b 00                	mov    eax,DWORD PTR [eax]
3000220c:	29 c2                	sub    edx,eax
3000220e:	89 d0                	mov    eax,edx
30002210:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:77
  return gmtime_rI(&t, tmbuf);
30002213:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30002216:	8d 45 fc             	lea    eax,[ebp-0x4]
30002219:	50                   	push   eax
3000221a:	e8 59 fc ff ff       	call   30001e78 <gmtime_rI>
3000221f:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:78
}
30002222:	c9                   	leave  
30002223:	c3                   	ret    

30002224 <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:80

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
30002224:	55                   	push   ebp
30002225:	89 e5                	mov    ebp,esp
30002227:	e8 c3 08 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
3000222c:	05 ac 22 00 00       	add    eax,0x22ac
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
    return localtime_rI(timer, tmbuf);
30002231:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30002234:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30002237:	e8 b3 ff ff ff       	call   300021ef <localtime_rI>
3000223c:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:82
}
3000223f:	c9                   	leave  
30002240:	c3                   	ret    

30002241 <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84

VISIBLE time_t mktime(struct tm *tmbuf) {
30002241:	55                   	push   ebp
30002242:	89 e5                	mov    ebp,esp
30002244:	57                   	push   edi
30002245:	56                   	push   esi
30002246:	53                   	push   ebx
30002247:	83 ec 20             	sub    esp,0x20
3000224a:	e8 d5 08 00 00       	call   30002b24 <__x86.get_pc_thunk.cx>
3000224f:	81 c1 89 22 00 00    	add    ecx,0x2289
/home/yogi/src/os/aproj/libChrisOS/src/time.c:92
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
30002255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002258:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
3000225b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000225e:	8b 18                	mov    ebx,DWORD PTR [eax]
30002260:	ba 89 88 88 88       	mov    edx,0x88888889
30002265:	89 d8                	mov    eax,ebx
30002267:	f7 ea                	imul   edx
30002269:	8d 04 1a             	lea    eax,[edx+ebx*1]
3000226c:	c1 f8 05             	sar    eax,0x5
3000226f:	89 c2                	mov    edx,eax
30002271:	89 d8                	mov    eax,ebx
30002273:	c1 f8 1f             	sar    eax,0x1f
30002276:	29 c2                	sub    edx,eax
30002278:	89 d0                	mov    eax,edx
3000227a:	8d 14 06             	lea    edx,[esi+eax*1]
3000227d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002280:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:93
  tmbuf->tm_sec %= 60;
30002283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002286:	8b 18                	mov    ebx,DWORD PTR [eax]
30002288:	ba 89 88 88 88       	mov    edx,0x88888889
3000228d:	89 d8                	mov    eax,ebx
3000228f:	f7 ea                	imul   edx
30002291:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002294:	c1 f8 05             	sar    eax,0x5
30002297:	89 c2                	mov    edx,eax
30002299:	89 d8                	mov    eax,ebx
3000229b:	c1 f8 1f             	sar    eax,0x1f
3000229e:	29 c2                	sub    edx,eax
300022a0:	89 d0                	mov    eax,edx
300022a2:	89 c2                	mov    edx,eax
300022a4:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
300022ab:	89 c2                	mov    edx,eax
300022ad:	89 d0                	mov    eax,edx
300022af:	c1 e0 04             	shl    eax,0x4
300022b2:	29 d0                	sub    eax,edx
300022b4:	29 c3                	sub    ebx,eax
300022b6:	89 d8                	mov    eax,ebx
300022b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300022bb:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:94
  if (tmbuf->tm_sec < 0) {
300022bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022c0:	8b 00                	mov    eax,DWORD PTR [eax]
300022c2:	85 c0                	test   eax,eax
300022c4:	79 1c                	jns    300022e2 <mktime+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
    tmbuf->tm_sec += 60;
300022c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022c9:	8b 00                	mov    eax,DWORD PTR [eax]
300022cb:	8d 50 3c             	lea    edx,[eax+0x3c]
300022ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022d1:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
    tmbuf->tm_min--;
300022d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
300022d9:	8d 50 ff             	lea    edx,[eax-0x1]
300022dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:98
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
300022e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022e5:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
300022e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022eb:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
300022ee:	ba 89 88 88 88       	mov    edx,0x88888889
300022f3:	89 d8                	mov    eax,ebx
300022f5:	f7 ea                	imul   edx
300022f7:	8d 04 1a             	lea    eax,[edx+ebx*1]
300022fa:	c1 f8 05             	sar    eax,0x5
300022fd:	89 c2                	mov    edx,eax
300022ff:	89 d8                	mov    eax,ebx
30002301:	c1 f8 1f             	sar    eax,0x1f
30002304:	29 c2                	sub    edx,eax
30002306:	89 d0                	mov    eax,edx
30002308:	8d 14 06             	lea    edx,[esi+eax*1]
3000230b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000230e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
  tmbuf->tm_min = tmbuf->tm_min % 60;
30002311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002314:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
30002317:	ba 89 88 88 88       	mov    edx,0x88888889
3000231c:	89 d8                	mov    eax,ebx
3000231e:	f7 ea                	imul   edx
30002320:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002323:	c1 f8 05             	sar    eax,0x5
30002326:	89 c2                	mov    edx,eax
30002328:	89 d8                	mov    eax,ebx
3000232a:	c1 f8 1f             	sar    eax,0x1f
3000232d:	29 c2                	sub    edx,eax
3000232f:	89 d0                	mov    eax,edx
30002331:	89 c2                	mov    edx,eax
30002333:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
3000233a:	89 c2                	mov    edx,eax
3000233c:	89 d0                	mov    eax,edx
3000233e:	c1 e0 04             	shl    eax,0x4
30002341:	29 d0                	sub    eax,edx
30002343:	29 c3                	sub    ebx,eax
30002345:	89 d8                	mov    eax,ebx
30002347:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000234a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:100
  if (tmbuf->tm_min < 0) {
3000234d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002350:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30002353:	85 c0                	test   eax,eax
30002355:	79 1e                	jns    30002375 <mktime+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
    tmbuf->tm_min += 60;
30002357:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000235a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
3000235d:	8d 50 3c             	lea    edx,[eax+0x3c]
30002360:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002363:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
    tmbuf->tm_hour--;
30002366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002369:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
3000236c:	8d 50 ff             	lea    edx,[eax-0x1]
3000236f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002372:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:104
  }
  day = tmbuf->tm_hour / 24;
30002375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002378:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
3000237b:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
30002380:	89 d8                	mov    eax,ebx
30002382:	f7 ea                	imul   edx
30002384:	c1 fa 02             	sar    edx,0x2
30002387:	89 d8                	mov    eax,ebx
30002389:	c1 f8 1f             	sar    eax,0x1f
3000238c:	29 c2                	sub    edx,eax
3000238e:	89 d0                	mov    eax,edx
30002390:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
30002393:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002396:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
30002399:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
3000239e:	89 d8                	mov    eax,ebx
300023a0:	f7 ea                	imul   edx
300023a2:	c1 fa 02             	sar    edx,0x2
300023a5:	89 d8                	mov    eax,ebx
300023a7:	c1 f8 1f             	sar    eax,0x1f
300023aa:	29 c2                	sub    edx,eax
300023ac:	89 d0                	mov    eax,edx
300023ae:	01 c0                	add    eax,eax
300023b0:	01 d0                	add    eax,edx
300023b2:	c1 e0 03             	shl    eax,0x3
300023b5:	29 c3                	sub    ebx,eax
300023b7:	89 da                	mov    edx,ebx
300023b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023bc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:106
  if (tmbuf->tm_hour < 0) {
300023bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
300023c5:	85 c0                	test   eax,eax
300023c7:	79 13                	jns    300023dc <mktime+0x19b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
    tmbuf->tm_hour += 24;
300023c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
300023cf:	8d 50 18             	lea    edx,[eax+0x18]
300023d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023d5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
    day--;
300023d8:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:110
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
300023dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023df:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
300023e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023e5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
300023e8:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
300023ed:	89 d8                	mov    eax,ebx
300023ef:	f7 ea                	imul   edx
300023f1:	d1 fa                	sar    edx,1
300023f3:	89 d8                	mov    eax,ebx
300023f5:	c1 f8 1f             	sar    eax,0x1f
300023f8:	29 c2                	sub    edx,eax
300023fa:	89 d0                	mov    eax,edx
300023fc:	8d 14 06             	lea    edx,[esi+eax*1]
300023ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002402:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
  tmbuf->tm_mon %= 12;
30002405:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002408:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
3000240b:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
30002410:	89 d8                	mov    eax,ebx
30002412:	f7 ea                	imul   edx
30002414:	d1 fa                	sar    edx,1
30002416:	89 d8                	mov    eax,ebx
30002418:	c1 f8 1f             	sar    eax,0x1f
3000241b:	29 c2                	sub    edx,eax
3000241d:	89 d0                	mov    eax,edx
3000241f:	01 c0                	add    eax,eax
30002421:	01 d0                	add    eax,edx
30002423:	c1 e0 02             	shl    eax,0x2
30002426:	29 c3                	sub    ebx,eax
30002428:	89 da                	mov    edx,ebx
3000242a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000242d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:112
  if (tmbuf->tm_mon < 0) {
30002430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002433:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002436:	85 c0                	test   eax,eax
30002438:	79 1e                	jns    30002458 <mktime+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
    tmbuf->tm_mon += 12;
3000243a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000243d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002440:	8d 50 0c             	lea    edx,[eax+0xc]
30002443:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002446:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
    tmbuf->tm_year--;
30002449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000244c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000244f:	8d 50 ff             	lea    edx,[eax-0x1]
30002452:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002455:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
  }
  day += (tmbuf->tm_mday - 1);
30002458:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000245b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
3000245e:	83 e8 01             	sub    eax,0x1
30002461:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  while (day < 0) {
30002464:	e9 c1 00 00 00       	jmp    3000252a <mktime+0x2e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:118
    if(--tmbuf->tm_mon < 0) {
30002469:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000246c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
3000246f:	8d 50 ff             	lea    edx,[eax-0x1]
30002472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002475:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
30002478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000247b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
3000247e:	85 c0                	test   eax,eax
30002480:	79 19                	jns    3000249b <mktime+0x25a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:119
      tmbuf->tm_year--;
30002482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002485:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002488:	8d 50 ff             	lea    edx,[eax-0x1]
3000248b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000248e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
      tmbuf->tm_mon = 11;
30002491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002494:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
3000249b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000249e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300024a1:	83 e0 03             	and    eax,0x3
300024a4:	85 c0                	test   eax,eax
300024a6:	75 62                	jne    3000250a <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 1)
300024a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024ab:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300024ae:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
300024b4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300024b9:	89 d8                	mov    eax,ebx
300024bb:	f7 ea                	imul   edx
300024bd:	c1 fa 05             	sar    edx,0x5
300024c0:	89 d8                	mov    eax,ebx
300024c2:	c1 f8 1f             	sar    eax,0x1f
300024c5:	29 c2                	sub    edx,eax
300024c7:	89 d0                	mov    eax,edx
300024c9:	6b c0 64             	imul   eax,eax,0x64
300024cc:	29 c3                	sub    ebx,eax
300024ce:	89 d8                	mov    eax,ebx
300024d0:	85 c0                	test   eax,eax
300024d2:	75 2f                	jne    30002503 <mktime+0x2c2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 4)
300024d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024d7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300024da:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
300024e0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300024e5:	89 d8                	mov    eax,ebx
300024e7:	f7 ea                	imul   edx
300024e9:	c1 fa 07             	sar    edx,0x7
300024ec:	89 d8                	mov    eax,ebx
300024ee:	c1 f8 1f             	sar    eax,0x1f
300024f1:	29 c2                	sub    edx,eax
300024f3:	89 d0                	mov    eax,edx
300024f5:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300024fb:	29 c3                	sub    ebx,eax
300024fd:	89 d8                	mov    eax,ebx
300024ff:	85 c0                	test   eax,eax
30002501:	75 07                	jne    3000250a <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 5)
30002503:	ba 01 00 00 00       	mov    edx,0x1
30002508:	eb 05                	jmp    3000250f <mktime+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 6)
3000250a:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 8)
3000250f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002512:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
30002515:	89 d0                	mov    eax,edx
30002517:	01 c0                	add    eax,eax
30002519:	01 d0                	add    eax,edx
3000251b:	c1 e0 02             	shl    eax,0x2
3000251e:	01 d8                	add    eax,ebx
30002520:	8b 84 81 48 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2b8]
30002527:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
3000252a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
3000252e:	0f 88 35 ff ff ff    	js     30002469 <mktime+0x228>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
30002534:	e9 c2 00 00 00       	jmp    300025fb <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
30002539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000253c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000253f:	83 e0 03             	and    eax,0x3
30002542:	85 c0                	test   eax,eax
30002544:	75 62                	jne    300025a8 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 1)
30002546:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002549:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000254c:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30002552:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002557:	89 d8                	mov    eax,ebx
30002559:	f7 ea                	imul   edx
3000255b:	c1 fa 05             	sar    edx,0x5
3000255e:	89 d8                	mov    eax,ebx
30002560:	c1 f8 1f             	sar    eax,0x1f
30002563:	29 c2                	sub    edx,eax
30002565:	89 d0                	mov    eax,edx
30002567:	6b c0 64             	imul   eax,eax,0x64
3000256a:	29 c3                	sub    ebx,eax
3000256c:	89 d8                	mov    eax,ebx
3000256e:	85 c0                	test   eax,eax
30002570:	75 2f                	jne    300025a1 <mktime+0x360>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 4)
30002572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002575:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002578:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
3000257e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002583:	89 d8                	mov    eax,ebx
30002585:	f7 ea                	imul   edx
30002587:	c1 fa 07             	sar    edx,0x7
3000258a:	89 d8                	mov    eax,ebx
3000258c:	c1 f8 1f             	sar    eax,0x1f
3000258f:	29 c2                	sub    edx,eax
30002591:	89 d0                	mov    eax,edx
30002593:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002599:	29 c3                	sub    ebx,eax
3000259b:	89 d8                	mov    eax,ebx
3000259d:	85 c0                	test   eax,eax
3000259f:	75 07                	jne    300025a8 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 5)
300025a1:	ba 01 00 00 00       	mov    edx,0x1
300025a6:	eb 05                	jmp    300025ad <mktime+0x36c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 6)
300025a8:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 8)
300025ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025b0:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
300025b3:	89 d0                	mov    eax,edx
300025b5:	01 c0                	add    eax,eax
300025b7:	01 d0                	add    eax,edx
300025b9:	c1 e0 02             	shl    eax,0x2
300025bc:	01 d8                	add    eax,ebx
300025be:	8b 84 81 48 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2b8]
300025c5:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:126 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
300025c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
300025ce:	8d 50 01             	lea    edx,[eax+0x1]
300025d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025d4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
300025d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025da:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
300025dd:	83 f8 0c             	cmp    eax,0xc
300025e0:	75 19                	jne    300025fb <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_mon = 0;
300025e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025e5:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128
      tmbuf->tm_year++;
300025ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025ef:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300025f2:	8d 50 01             	lea    edx,[eax+0x1]
300025f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025f8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
300025fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025fe:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002601:	83 e0 03             	and    eax,0x3
30002604:	85 c0                	test   eax,eax
30002606:	75 62                	jne    3000266a <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 1)
30002608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000260b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000260e:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30002614:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002619:	89 d8                	mov    eax,ebx
3000261b:	f7 ea                	imul   edx
3000261d:	c1 fa 05             	sar    edx,0x5
30002620:	89 d8                	mov    eax,ebx
30002622:	c1 f8 1f             	sar    eax,0x1f
30002625:	29 c2                	sub    edx,eax
30002627:	89 d0                	mov    eax,edx
30002629:	6b c0 64             	imul   eax,eax,0x64
3000262c:	29 c3                	sub    ebx,eax
3000262e:	89 d8                	mov    eax,ebx
30002630:	85 c0                	test   eax,eax
30002632:	75 2f                	jne    30002663 <mktime+0x422>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 4)
30002634:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002637:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000263a:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30002640:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002645:	89 d8                	mov    eax,ebx
30002647:	f7 ea                	imul   edx
30002649:	c1 fa 07             	sar    edx,0x7
3000264c:	89 d8                	mov    eax,ebx
3000264e:	c1 f8 1f             	sar    eax,0x1f
30002651:	29 c2                	sub    edx,eax
30002653:	89 d0                	mov    eax,edx
30002655:	69 c0 90 01 00 00    	imul   eax,eax,0x190
3000265b:	29 c3                	sub    ebx,eax
3000265d:	89 d8                	mov    eax,ebx
3000265f:	85 c0                	test   eax,eax
30002661:	75 07                	jne    3000266a <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 5)
30002663:	ba 01 00 00 00       	mov    edx,0x1
30002668:	eb 05                	jmp    3000266f <mktime+0x42e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 6)
3000266a:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 8)
3000266f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002672:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
30002675:	89 d0                	mov    eax,edx
30002677:	01 c0                	add    eax,eax
30002679:	01 d0                	add    eax,edx
3000267b:	c1 e0 02             	shl    eax,0x2
3000267e:	01 d8                	add    eax,ebx
30002680:	8b 84 81 48 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2b8]
30002687:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
3000268a:	0f 8e a9 fe ff ff    	jle    30002539 <mktime+0x2f8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:131
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
30002690:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30002693:	8d 50 01             	lea    edx,[eax+0x1]
30002696:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002699:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:132
  year = EPOCH_YR;
3000269c:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
300026a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300026a6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300026a9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
300026ac:	81 ea 6c 07 00 00    	sub    edx,0x76c
300026b2:	39 d0                	cmp    eax,edx
300026b4:	7d 0a                	jge    300026c0 <mktime+0x47f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133 (discriminator 1)
300026b6:	b8 19 fc ff ff       	mov    eax,0xfffffc19
300026bb:	e9 ba 03 00 00       	jmp    30002a7a <mktime+0x839>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134
  seconds = 0;
300026c0:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  day = 0;                      // Means days since day 0 now
300026c7:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  overflow = 0;
300026ce:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
300026d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300026d8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300026db:	05 6c 07 00 00       	add    eax,0x76c
300026e0:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
300026e3:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
300026e6:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
300026e9:	3d 7c c6 59 00       	cmp    eax,0x59c67c
300026ee:	7e 07                	jle    300026f7 <mktime+0x4b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145 (discriminator 1)
300026f0:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
  day = (tm_year - year) * 365;
300026f7:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
300026fa:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
300026fd:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
30002703:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
30002706:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
3000270b:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
3000270e:	89 c2                	mov    edx,eax
30002710:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002713:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002716:	8d 58 03             	lea    ebx,[eax+0x3]
30002719:	85 c0                	test   eax,eax
3000271b:	0f 48 c3             	cmovs  eax,ebx
3000271e:	c1 f8 02             	sar    eax,0x2
30002721:	83 c0 01             	add    eax,0x1
30002724:	39 c2                	cmp    edx,eax
30002726:	7d 04                	jge    3000272c <mktime+0x4eb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147 (discriminator 1)
30002728:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
3000272c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
3000272f:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002732:	8d 50 03             	lea    edx,[eax+0x3]
30002735:	85 c0                	test   eax,eax
30002737:	0f 48 c2             	cmovs  eax,edx
3000273a:	c1 f8 02             	sar    eax,0x2
3000273d:	89 c3                	mov    ebx,eax
3000273f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002742:	83 e0 03             	and    eax,0x3
30002745:	85 c0                	test   eax,eax
30002747:	74 29                	je     30002772 <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 1)
30002749:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
3000274c:	99                   	cdq    
3000274d:	c1 ea 1e             	shr    edx,0x1e
30002750:	01 d0                	add    eax,edx
30002752:	83 e0 03             	and    eax,0x3
30002755:	29 d0                	sub    eax,edx
30002757:	89 c6                	mov    esi,eax
30002759:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
3000275c:	99                   	cdq    
3000275d:	c1 ea 1e             	shr    edx,0x1e
30002760:	01 d0                	add    eax,edx
30002762:	83 e0 03             	and    eax,0x3
30002765:	29 d0                	sub    eax,edx
30002767:	39 c6                	cmp    esi,eax
30002769:	7d 07                	jge    30002772 <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 3)
3000276b:	b8 01 00 00 00       	mov    eax,0x1
30002770:	eb 05                	jmp    30002777 <mktime+0x536>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 4)
30002772:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 6)
30002777:	01 d8                	add    eax,ebx
30002779:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
3000277c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
3000277f:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002782:	89 c3                	mov    ebx,eax
30002784:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002789:	89 d8                	mov    eax,ebx
3000278b:	f7 ea                	imul   edx
3000278d:	c1 fa 05             	sar    edx,0x5
30002790:	89 d8                	mov    eax,ebx
30002792:	c1 f8 1f             	sar    eax,0x1f
30002795:	89 d7                	mov    edi,edx
30002797:	29 c7                	sub    edi,eax
30002799:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
3000279c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300027a1:	89 d8                	mov    eax,ebx
300027a3:	f7 ea                	imul   edx
300027a5:	c1 fa 05             	sar    edx,0x5
300027a8:	89 d8                	mov    eax,ebx
300027aa:	c1 f8 1f             	sar    eax,0x1f
300027ad:	29 c2                	sub    edx,eax
300027af:	89 d0                	mov    eax,edx
300027b1:	6b c0 64             	imul   eax,eax,0x64
300027b4:	29 c3                	sub    ebx,eax
300027b6:	89 d8                	mov    eax,ebx
300027b8:	85 c0                	test   eax,eax
300027ba:	74 49                	je     30002805 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 1)
300027bc:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
300027bf:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300027c4:	89 d8                	mov    eax,ebx
300027c6:	f7 ea                	imul   edx
300027c8:	c1 fa 05             	sar    edx,0x5
300027cb:	89 d8                	mov    eax,ebx
300027cd:	c1 f8 1f             	sar    eax,0x1f
300027d0:	89 d6                	mov    esi,edx
300027d2:	29 c6                	sub    esi,eax
300027d4:	6b c6 64             	imul   eax,esi,0x64
300027d7:	89 de                	mov    esi,ebx
300027d9:	29 c6                	sub    esi,eax
300027db:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
300027de:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300027e3:	89 d8                	mov    eax,ebx
300027e5:	f7 ea                	imul   edx
300027e7:	c1 fa 05             	sar    edx,0x5
300027ea:	89 d8                	mov    eax,ebx
300027ec:	c1 f8 1f             	sar    eax,0x1f
300027ef:	29 c2                	sub    edx,eax
300027f1:	89 d0                	mov    eax,edx
300027f3:	6b c0 64             	imul   eax,eax,0x64
300027f6:	29 c3                	sub    ebx,eax
300027f8:	89 d8                	mov    eax,ebx
300027fa:	39 c6                	cmp    esi,eax
300027fc:	7d 07                	jge    30002805 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 3)
300027fe:	b8 01 00 00 00       	mov    eax,0x1
30002803:	eb 05                	jmp    3000280a <mktime+0x5c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 4)
30002805:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
3000280a:	01 f8                	add    eax,edi
3000280c:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
3000280f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002812:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002815:	89 c3                	mov    ebx,eax
30002817:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000281c:	89 d8                	mov    eax,ebx
3000281e:	f7 ea                	imul   edx
30002820:	c1 fa 07             	sar    edx,0x7
30002823:	89 d8                	mov    eax,ebx
30002825:	c1 f8 1f             	sar    eax,0x1f
30002828:	89 d7                	mov    edi,edx
3000282a:	29 c7                	sub    edi,eax
3000282c:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
3000282f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002834:	89 d8                	mov    eax,ebx
30002836:	f7 ea                	imul   edx
30002838:	c1 fa 07             	sar    edx,0x7
3000283b:	89 d8                	mov    eax,ebx
3000283d:	c1 f8 1f             	sar    eax,0x1f
30002840:	29 c2                	sub    edx,eax
30002842:	89 d0                	mov    eax,edx
30002844:	69 c0 90 01 00 00    	imul   eax,eax,0x190
3000284a:	29 c3                	sub    ebx,eax
3000284c:	89 d8                	mov    eax,ebx
3000284e:	85 c0                	test   eax,eax
30002850:	74 4f                	je     300028a1 <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 1)
30002852:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002855:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000285a:	89 d8                	mov    eax,ebx
3000285c:	f7 ea                	imul   edx
3000285e:	c1 fa 07             	sar    edx,0x7
30002861:	89 d8                	mov    eax,ebx
30002863:	c1 f8 1f             	sar    eax,0x1f
30002866:	89 d6                	mov    esi,edx
30002868:	29 c6                	sub    esi,eax
3000286a:	69 c6 90 01 00 00    	imul   eax,esi,0x190
30002870:	89 de                	mov    esi,ebx
30002872:	29 c6                	sub    esi,eax
30002874:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
30002877:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000287c:	89 d8                	mov    eax,ebx
3000287e:	f7 ea                	imul   edx
30002880:	c1 fa 07             	sar    edx,0x7
30002883:	89 d8                	mov    eax,ebx
30002885:	c1 f8 1f             	sar    eax,0x1f
30002888:	29 c2                	sub    edx,eax
3000288a:	89 d0                	mov    eax,edx
3000288c:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002892:	29 c3                	sub    ebx,eax
30002894:	89 d8                	mov    eax,ebx
30002896:	39 c6                	cmp    esi,eax
30002898:	7d 07                	jge    300028a1 <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 3)
3000289a:	b8 01 00 00 00       	mov    eax,0x1
3000289f:	eb 05                	jmp    300028a6 <mktime+0x665>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 4)
300028a1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
300028a6:	01 f8                	add    eax,edi
300028a8:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)

  yday = month = 0;
300028ab:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
300028b2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
300028b5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
  while (month < tmbuf->tm_mon) {
300028b8:	eb 7b                	jmp    30002935 <mktime+0x6f4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154
    yday += _ytab[LEAPYEAR(tm_year)][month];
300028ba:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
300028bd:	83 e0 03             	and    eax,0x3
300028c0:	85 c0                	test   eax,eax
300028c2:	75 50                	jne    30002914 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 1)
300028c4:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
300028c7:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300028cc:	89 d8                	mov    eax,ebx
300028ce:	f7 ea                	imul   edx
300028d0:	c1 fa 05             	sar    edx,0x5
300028d3:	89 d8                	mov    eax,ebx
300028d5:	c1 f8 1f             	sar    eax,0x1f
300028d8:	29 c2                	sub    edx,eax
300028da:	89 d0                	mov    eax,edx
300028dc:	6b c0 64             	imul   eax,eax,0x64
300028df:	29 c3                	sub    ebx,eax
300028e1:	89 d8                	mov    eax,ebx
300028e3:	85 c0                	test   eax,eax
300028e5:	75 26                	jne    3000290d <mktime+0x6cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 4)
300028e7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
300028ea:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300028ef:	89 d8                	mov    eax,ebx
300028f1:	f7 ea                	imul   edx
300028f3:	c1 fa 07             	sar    edx,0x7
300028f6:	89 d8                	mov    eax,ebx
300028f8:	c1 f8 1f             	sar    eax,0x1f
300028fb:	29 c2                	sub    edx,eax
300028fd:	89 d0                	mov    eax,edx
300028ff:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002905:	29 c3                	sub    ebx,eax
30002907:	89 d8                	mov    eax,ebx
30002909:	85 c0                	test   eax,eax
3000290b:	75 07                	jne    30002914 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 5)
3000290d:	ba 01 00 00 00       	mov    edx,0x1
30002912:	eb 05                	jmp    30002919 <mktime+0x6d8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 6)
30002914:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 8)
30002919:	89 d0                	mov    eax,edx
3000291b:	01 c0                	add    eax,eax
3000291d:	01 d0                	add    eax,edx
3000291f:	c1 e0 02             	shl    eax,0x2
30002922:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
30002925:	01 d0                	add    eax,edx
30002927:	8b 84 81 48 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2b8]
3000292e:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 8)
    month++;
30002931:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
30002935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002938:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
3000293b:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
3000293e:	0f 8f 76 ff ff ff    	jg     300028ba <mktime+0x679>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
30002944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002947:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
3000294a:	83 e8 01             	sub    eax,0x1
3000294d:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158
  if (day + yday < 0) overflow|=4;
30002950:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30002953:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30002956:	01 d0                	add    eax,edx
30002958:	85 c0                	test   eax,eax
3000295a:	79 04                	jns    30002960 <mktime+0x71f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158 (discriminator 1)
3000295c:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159
  day += yday;
30002960:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30002963:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161

  tmbuf->tm_yday = yday;
30002966:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002969:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
3000296c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:162
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
3000296f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30002972:	8d 58 04             	lea    ebx,[eax+0x4]
30002975:	ba 93 24 49 92       	mov    edx,0x92492493
3000297a:	89 d8                	mov    eax,ebx
3000297c:	f7 ea                	imul   edx
3000297e:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002981:	c1 f8 02             	sar    eax,0x2
30002984:	89 c2                	mov    edx,eax
30002986:	89 d8                	mov    eax,ebx
30002988:	c1 f8 1f             	sar    eax,0x1f
3000298b:	29 c2                	sub    edx,eax
3000298d:	89 d0                	mov    eax,edx
3000298f:	89 c2                	mov    edx,eax
30002991:	c1 e2 03             	shl    edx,0x3
30002994:	29 c2                	sub    edx,eax
30002996:	89 d8                	mov    eax,ebx
30002998:	29 d0                	sub    eax,edx
3000299a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000299d:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:164

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
300029a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300029a3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
300029a6:	c1 e0 02             	shl    eax,0x2
300029a9:	89 c2                	mov    edx,eax
300029ab:	c1 e2 04             	shl    edx,0x4
300029ae:	29 c2                	sub    edx,eax
300029b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300029b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
300029b6:	01 d0                	add    eax,edx
300029b8:	c1 e0 02             	shl    eax,0x2
300029bb:	89 c2                	mov    edx,eax
300029bd:	c1 e2 04             	shl    edx,0x4
300029c0:	29 c2                	sub    edx,eax
300029c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300029c5:	8b 00                	mov    eax,DWORD PTR [eax]
300029c7:	01 d0                	add    eax,edx
300029c9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
300029cc:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
300029d1:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
300029d4:	89 c3                	mov    ebx,eax
300029d6:	ba 07 45 2e c2       	mov    edx,0xc22e4507
300029db:	89 d8                	mov    eax,ebx
300029dd:	f7 ea                	imul   edx
300029df:	8d 04 1a             	lea    eax,[edx+ebx*1]
300029e2:	c1 f8 10             	sar    eax,0x10
300029e5:	89 c2                	mov    edx,eax
300029e7:	89 d8                	mov    eax,ebx
300029e9:	c1 f8 1f             	sar    eax,0x1f
300029ec:	29 c2                	sub    edx,eax
300029ee:	89 d0                	mov    eax,edx
300029f0:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
300029f3:	7d 04                	jge    300029f9 <mktime+0x7b8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166 (discriminator 1)
300029f5:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:167
  seconds += day * SECS_DAY;
300029f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
300029fc:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
30002a02:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
30002a05:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002a0b:	8b 00                	mov    eax,DWORD PTR [eax]
30002a0d:	85 c0                	test   eax,eax
30002a0f:	74 1a                	je     30002a2b <mktime+0x7ea>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 1)
30002a11:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002a17:	8b 00                	mov    eax,DWORD PTR [eax]
30002a19:	ba ff ff ff 7f       	mov    edx,0x7fffffff
30002a1e:	29 c2                	sub    edx,eax
30002a20:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30002a23:	39 c2                	cmp    edx,eax
30002a25:	73 04                	jae    30002a2b <mktime+0x7ea>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:172
      ((libcTZ < 0) && (seconds < -libcTZ))) {
          overflow|=16;
30002a27:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174
  }
  seconds += libcTZ;
30002a2b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
30002a2e:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002a34:	8b 00                	mov    eax,DWORD PTR [eax]
30002a36:	01 d0                	add    eax,edx
30002a38:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:176

  if (tmbuf->tm_isdst) {
30002a3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002a3e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
30002a41:	85 c0                	test   eax,eax
30002a43:	74 0b                	je     30002a50 <mktime+0x80f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177
    dst = _dstbias;
30002a45:	8b 81 54 00 00 00    	mov    eax,DWORD PTR [ecx+0x54]
30002a4b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
30002a4e:	eb 07                	jmp    30002a57 <mktime+0x816>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:179
  } else {
    dst = 0;
30002a50:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
30002a57:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
30002a5a:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
30002a5d:	7e 04                	jle    30002a63 <mktime+0x822>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182 (discriminator 1)
30002a5f:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:183
  seconds -= dst;
30002a63:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
30002a66:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185

  if (overflow) return (time_t) overflow-2;
30002a69:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
30002a6d:	74 08                	je     30002a77 <mktime+0x836>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185 (discriminator 1)
30002a6f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30002a72:	83 e8 02             	sub    eax,0x2
30002a75:	eb 03                	jmp    30002a7a <mktime+0x839>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
30002a77:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:189
}
30002a7a:	83 c4 20             	add    esp,0x20
30002a7d:	5b                   	pop    ebx
30002a7e:	5e                   	pop    esi
30002a7f:	5f                   	pop    edi
30002a80:	5d                   	pop    ebp
30002a81:	c3                   	ret    

30002a82 <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:192

VISIBLE struct tm* gettime(struct tm *time, bool localTime)
{
30002a82:	55                   	push   ebp
30002a83:	89 e5                	mov    ebp,esp
30002a85:	56                   	push   esi
30002a86:	53                   	push   ebx
30002a87:	83 ec 14             	sub    esp,0x14
30002a8a:	e8 60 00 00 00       	call   30002aef <__x86.get_pc_thunk.ax>
30002a8f:	05 49 1a 00 00       	add    eax,0x1a49
30002a94:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002a97:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/aproj/libChrisOS/src/time.c:193
    time_t ticks=0;
30002a9a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:195
    
    SYSCALL0(SYSCALL_GETTIME, ticks);
30002aa1:	b8 71 01 00 00       	mov    eax,0x171
30002aa6:	bb 00 00 00 00       	mov    ebx,0x0
30002aab:	b9 00 00 00 00       	mov    ecx,0x0
30002ab0:	ba 00 00 00 00       	mov    edx,0x0
30002ab5:	be 00 00 00 00       	mov    esi,0x0
30002aba:	e8 fc ff ff ff       	call   30002abb <gettime+0x39>
30002abf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:196
    if (localTime)
30002ac2:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
30002ac6:	74 11                	je     30002ad9 <gettime+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:197
        return localtime_rI(&ticks,time);
30002ac8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30002acb:	8d 45 f4             	lea    eax,[ebp-0xc]
30002ace:	50                   	push   eax
30002acf:	e8 1b f7 ff ff       	call   300021ef <localtime_rI>
30002ad4:	83 c4 08             	add    esp,0x8
30002ad7:	eb 0f                	jmp    30002ae8 <gettime+0x66>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:199
    else
        return gmtime_rI((time_t*)&ticks,time);
30002ad9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30002adc:	8d 45 f4             	lea    eax,[ebp-0xc]
30002adf:	50                   	push   eax
30002ae0:	e8 93 f3 ff ff       	call   30001e78 <gmtime_rI>
30002ae5:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:200 (discriminator 1)
}
30002ae8:	8d 65 f8             	lea    esp,[ebp-0x8]
30002aeb:	5b                   	pop    ebx
30002aec:	5e                   	pop    esi
30002aed:	5d                   	pop    ebp
30002aee:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

30002aef <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
30002aef:	8b 04 24             	mov    eax,DWORD PTR [esp]
30002af2:	c3                   	ret    

Disassembly of section .plt:

30002b00 <.plt>:
30002b00:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
30002b06:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
30002b0c:	00 00                	add    BYTE PTR [eax],al
30002b0e:	00 00                	add    BYTE PTR [eax],al
30002b10:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
30002b16:	68 00 00 00 00       	push   0x0
30002b1b:	e9 e0 ff ff ff       	jmp    30002b00 <__x86.get_pc_thunk.ax+0x11>

Disassembly of section .text.__x86.get_pc_thunk.bx:

30002b20 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
30002b20:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
30002b23:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

30002b24 <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
30002b24:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
30002b27:	c3                   	ret    

Disassembly of section .eh_frame:

30002b28 <.eh_frame>:
30002b28:	14 00                	adc    al,0x0
30002b2a:	00 00                	add    BYTE PTR [eax],al
30002b2c:	00 00                	add    BYTE PTR [eax],al
30002b2e:	00 00                	add    BYTE PTR [eax],al
30002b30:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
30002b33:	00 01                	add    BYTE PTR [ecx],al
30002b35:	7c 08                	jl     30002b3f <__x86.get_pc_thunk.cx+0x1b>
30002b37:	01 1b                	add    DWORD PTR [ebx],ebx
30002b39:	0c 04                	or     al,0x4
30002b3b:	04 88                	add    al,0x88
30002b3d:	01 00                	add    DWORD PTR [eax],eax
30002b3f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002b42:	00 00                	add    BYTE PTR [eax],al
30002b44:	1c 00                	sbb    al,0x0
30002b46:	00 00                	add    BYTE PTR [eax],al
30002b48:	b8 d4 ff ff 38       	mov    eax,0x38ffffd4
30002b4d:	00 00                	add    BYTE PTR [eax],al
30002b4f:	00 00                	add    BYTE PTR [eax],al
30002b51:	41                   	inc    ecx
30002b52:	0e                   	push   cs
30002b53:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002b59:	74 c5                	je     30002b20 <__x86.get_pc_thunk.bx>
30002b5b:	0c 04                	or     al,0x4
30002b5d:	04 00                	add    al,0x0
30002b5f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002b62:	00 00                	add    BYTE PTR [eax],al
30002b64:	3c 00                	cmp    al,0x0
30002b66:	00 00                	add    BYTE PTR [eax],al
30002b68:	d0 d4                	rcl    ah,1
30002b6a:	ff                   	(bad)  
30002b6b:	ff                   	(bad)  
30002b6c:	38 00                	cmp    BYTE PTR [eax],al
30002b6e:	00 00                	add    BYTE PTR [eax],al
30002b70:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002b73:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002b79:	74 c5                	je     30002b40 <__x86.get_pc_thunk.cx+0x1c>
30002b7b:	0c 04                	or     al,0x4
30002b7d:	04 00                	add    al,0x0
30002b7f:	00 10                	add    BYTE PTR [eax],dl
30002b81:	00 00                	add    BYTE PTR [eax],al
30002b83:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
30002b87:	00 67 ff             	add    BYTE PTR [edi-0x1],ah
30002b8a:	ff                   	(bad)  
30002b8b:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30002b8e:	00 00                	add    BYTE PTR [eax],al
30002b90:	00 00                	add    BYTE PTR [eax],al
30002b92:	00 00                	add    BYTE PTR [eax],al
30002b94:	24 00                	and    al,0x0
30002b96:	00 00                	add    BYTE PTR [eax],al
30002b98:	70 00                	jo     30002b9a <__x86.get_pc_thunk.cx+0x76>
30002b9a:	00 00                	add    BYTE PTR [eax],al
30002b9c:	d4 d4                	aam    0xd4
30002b9e:	ff                   	(bad)  
30002b9f:	ff 55 00             	call   DWORD PTR [ebp+0x0]
30002ba2:	00 00                	add    BYTE PTR [eax],al
30002ba4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002ba7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002bad:	42                   	inc    edx
30002bae:	86 03                	xchg   BYTE PTR [ebx],al
30002bb0:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
30002bb4:	c3                   	ret    
30002bb5:	41                   	inc    ecx
30002bb6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002bba:	04 04                	add    al,0x4
30002bbc:	24 00                	and    al,0x0
30002bbe:	00 00                	add    BYTE PTR [eax],al
30002bc0:	98                   	cwde   
30002bc1:	00 00                	add    BYTE PTR [eax],al
30002bc3:	00 01                	add    BYTE PTR [ecx],al
30002bc5:	d5 ff                	aad    0xff
30002bc7:	ff 55 00             	call   DWORD PTR [ebp+0x0]
30002bca:	00 00                	add    BYTE PTR [eax],al
30002bcc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002bcf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002bd5:	42                   	inc    edx
30002bd6:	86 03                	xchg   BYTE PTR [ebx],al
30002bd8:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
30002bdc:	c3                   	ret    
30002bdd:	41                   	inc    ecx
30002bde:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002be2:	04 04                	add    al,0x4
30002be4:	24 00                	and    al,0x0
30002be6:	00 00                	add    BYTE PTR [eax],al
30002be8:	c0 00 00             	rol    BYTE PTR [eax],0x0
30002beb:	00 30                	add    BYTE PTR [eax],dh
30002bed:	d5 ff                	aad    0xff
30002bef:	ff 97 00 00 00 00    	call   DWORD PTR [edi+0x0]
30002bf5:	41                   	inc    ecx
30002bf6:	0e                   	push   cs
30002bf7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002bfd:	42                   	inc    edx
30002bfe:	86 03                	xchg   BYTE PTR [ebx],al
30002c00:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
30002c04:	c3                   	ret    
30002c05:	41                   	inc    ecx
30002c06:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002c0a:	04 04                	add    al,0x4
30002c0c:	10 00                	adc    BYTE PTR [eax],al
30002c0e:	00 00                	add    BYTE PTR [eax],al
30002c10:	e8 00 00 00 0c       	call   3c002c15 <ticksToWait+0xbffe6e5>
30002c15:	ff                   	(bad)  
30002c16:	ff                   	(bad)  
30002c17:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30002c1a:	00 00                	add    BYTE PTR [eax],al
30002c1c:	00 00                	add    BYTE PTR [eax],al
30002c1e:	00 00                	add    BYTE PTR [eax],al
30002c20:	20 00                	and    BYTE PTR [eax],al
30002c22:	00 00                	add    BYTE PTR [eax],al
30002c24:	fc                   	cld    
30002c25:	00 00                	add    BYTE PTR [eax],al
30002c27:	00 8c d5 ff ff 77 00 	add    BYTE PTR [ebp+edx*8+0x77ffff],cl
30002c2e:	00 00                	add    BYTE PTR [eax],al
30002c30:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002c33:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c39:	44                   	inc    esp
30002c3a:	83 03 02             	add    DWORD PTR [ebx],0x2
30002c3d:	6f                   	outs   dx,DWORD PTR ds:[esi]
30002c3e:	c5 c3 0c             	(bad)  
30002c41:	04 04                	add    al,0x4
30002c43:	00 20                	add    BYTE PTR [eax],ah
30002c45:	00 00                	add    BYTE PTR [eax],al
30002c47:	00 20                	add    BYTE PTR [eax],ah
30002c49:	01 00                	add    DWORD PTR [eax],eax
30002c4b:	00 df                	add    bh,bl
30002c4d:	d5 ff                	aad    0xff
30002c4f:	ff                   	(bad)  
30002c50:	bb 00 00 00 00       	mov    ebx,0x0
30002c55:	41                   	inc    ecx
30002c56:	0e                   	push   cs
30002c57:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c5d:	44                   	inc    esp
30002c5e:	83 03 02             	add    DWORD PTR [ebx],0x2
30002c61:	b3 c5                	mov    bl,0xc5
30002c63:	c3                   	ret    
30002c64:	0c 04                	or     al,0x4
30002c66:	04 00                	add    al,0x0
30002c68:	20 00                	and    BYTE PTR [eax],al
30002c6a:	00 00                	add    BYTE PTR [eax],al
30002c6c:	44                   	inc    esp
30002c6d:	01 00                	add    DWORD PTR [eax],eax
30002c6f:	00 76 d6             	add    BYTE PTR [esi-0x2a],dh
30002c72:	ff                   	(bad)  
30002c73:	ff                   	(bad)  
30002c74:	bb 00 00 00 00       	mov    ebx,0x0
30002c79:	41                   	inc    ecx
30002c7a:	0e                   	push   cs
30002c7b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c81:	44                   	inc    esp
30002c82:	83 03 02             	add    DWORD PTR [ebx],0x2
30002c85:	b3 c5                	mov    bl,0xc5
30002c87:	c3                   	ret    
30002c88:	0c 04                	or     al,0x4
30002c8a:	04 00                	add    al,0x0
30002c8c:	1c 00                	sbb    al,0x0
30002c8e:	00 00                	add    BYTE PTR [eax],al
30002c90:	68 01 00 00 0d       	push   0xd000001
30002c95:	d7                   	xlat   BYTE PTR ds:[ebx]
30002c96:	ff                   	(bad)  
30002c97:	ff 5c 00 00          	call   FWORD PTR [eax+eax*1+0x0]
30002c9b:	00 00                	add    BYTE PTR [eax],al
30002c9d:	41                   	inc    ecx
30002c9e:	0e                   	push   cs
30002c9f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ca5:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
30002ca8:	0c 04                	or     al,0x4
30002caa:	04 00                	add    al,0x0
30002cac:	20 00                	and    BYTE PTR [eax],al
30002cae:	00 00                	add    BYTE PTR [eax],al
30002cb0:	88 01                	mov    BYTE PTR [ecx],al
30002cb2:	00 00                	add    BYTE PTR [eax],al
30002cb4:	4c                   	dec    esp
30002cb5:	d7                   	xlat   BYTE PTR ds:[ebx]
30002cb6:	ff                   	(bad)  
30002cb7:	ff aa 00 00 00 00    	jmp    FWORD PTR [edx+0x0]
30002cbd:	41                   	inc    ecx
30002cbe:	0e                   	push   cs
30002cbf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002cc5:	44                   	inc    esp
30002cc6:	83 03 02             	add    DWORD PTR [ebx],0x2
30002cc9:	a2 c5 c3 0c 04       	mov    ds:0x40cc3c5,al
30002cce:	04 00                	add    al,0x0
30002cd0:	20 00                	and    BYTE PTR [eax],al
30002cd2:	00 00                	add    BYTE PTR [eax],al
30002cd4:	ac                   	lods   al,BYTE PTR ds:[esi]
30002cd5:	01 00                	add    DWORD PTR [eax],eax
30002cd7:	00 d2                	add    dl,dl
30002cd9:	d7                   	xlat   BYTE PTR ds:[ebx]
30002cda:	ff                   	(bad)  
30002cdb:	ff c1                	inc    ecx
30002cdd:	01 00                	add    DWORD PTR [eax],eax
30002cdf:	00 00                	add    BYTE PTR [eax],al
30002ce1:	41                   	inc    ecx
30002ce2:	0e                   	push   cs
30002ce3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ce9:	44                   	inc    esp
30002cea:	83 03 03             	add    DWORD PTR [ebx],0x3
30002ced:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
30002cf2:	04 04                	add    al,0x4
30002cf4:	20 00                	and    BYTE PTR [eax],al
30002cf6:	00 00                	add    BYTE PTR [eax],al
30002cf8:	d0 01                	rol    BYTE PTR [ecx],1
30002cfa:	00 00                	add    BYTE PTR [eax],al
30002cfc:	70 d9                	jo     30002cd7 <__x86.get_pc_thunk.cx+0x1b3>
30002cfe:	ff                   	(bad)  
30002cff:	ff 2d 00 00 00 00    	jmp    FWORD PTR ds:0x0
30002d05:	41                   	inc    ecx
30002d06:	0e                   	push   cs
30002d07:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d0d:	44                   	inc    esp
30002d0e:	83 03 65             	add    DWORD PTR [ebx],0x65
30002d11:	c5 c3 0c             	(bad)  
30002d14:	04 04                	add    al,0x4
30002d16:	00 00                	add    BYTE PTR [eax],al
30002d18:	20 00                	and    BYTE PTR [eax],al
30002d1a:	00 00                	add    BYTE PTR [eax],al
30002d1c:	f4                   	hlt    
30002d1d:	01 00                	add    DWORD PTR [eax],eax
30002d1f:	00 79 d9             	add    BYTE PTR [ecx-0x27],bh
30002d22:	ff                   	(bad)  
30002d23:	ff 2a                	jmp    FWORD PTR [edx]
30002d25:	00 00                	add    BYTE PTR [eax],al
30002d27:	00 00                	add    BYTE PTR [eax],al
30002d29:	41                   	inc    ecx
30002d2a:	0e                   	push   cs
30002d2b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d31:	44                   	inc    esp
30002d32:	83 03 62             	add    DWORD PTR [ebx],0x62
30002d35:	c5 c3 0c             	(bad)  
30002d38:	04 04                	add    al,0x4
30002d3a:	00 00                	add    BYTE PTR [eax],al
30002d3c:	24 00                	and    al,0x0
30002d3e:	00 00                	add    BYTE PTR [eax],al
30002d40:	18 02                	sbb    BYTE PTR [edx],al
30002d42:	00 00                	add    BYTE PTR [eax],al
30002d44:	7f d9                	jg     30002d1f <__x86.get_pc_thunk.cx+0x1fb>
30002d46:	ff                   	(bad)  
30002d47:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
30002d4d:	41                   	inc    ecx
30002d4e:	0e                   	push   cs
30002d4f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d55:	42                   	inc    edx
30002d56:	86 03                	xchg   BYTE PTR [ebx],al
30002d58:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
30002d5f:	c5 
30002d60:	0c 04                	or     al,0x4
30002d62:	04 00                	add    al,0x0
30002d64:	24 00                	and    al,0x0
30002d66:	00 00                	add    BYTE PTR [eax],al
30002d68:	40                   	inc    eax
30002d69:	02 00                	add    al,BYTE PTR [eax]
30002d6b:	00 8c d9 ff ff 35 00 	add    BYTE PTR [ecx+ebx*8+0x35ffff],cl
30002d72:	00 00                	add    BYTE PTR [eax],al
30002d74:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002d77:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d7d:	42                   	inc    edx
30002d7e:	86 03                	xchg   BYTE PTR [ebx],al
30002d80:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
30002d87:	c5 
30002d88:	0c 04                	or     al,0x4
30002d8a:	04 00                	add    al,0x0
30002d8c:	20 00                	and    BYTE PTR [eax],al
30002d8e:	00 00                	add    BYTE PTR [eax],al
30002d90:	68 02 00 00 99       	push   0x99000002
30002d95:	d9 ff                	fcos   
30002d97:	ff 31                	push   DWORD PTR [ecx]
30002d99:	00 00                	add    BYTE PTR [eax],al
30002d9b:	00 00                	add    BYTE PTR [eax],al
30002d9d:	41                   	inc    ecx
30002d9e:	0e                   	push   cs
30002d9f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002da5:	44                   	inc    esp
30002da6:	83 03 69             	add    DWORD PTR [ebx],0x69
30002da9:	c5 c3 0c             	(bad)  
30002dac:	04 04                	add    al,0x4
30002dae:	00 00                	add    BYTE PTR [eax],al
30002db0:	20 00                	and    BYTE PTR [eax],al
30002db2:	00 00                	add    BYTE PTR [eax],al
30002db4:	8c 02                	mov    WORD PTR [edx],es
30002db6:	00 00                	add    BYTE PTR [eax],al
30002db8:	a8 d9                	test   al,0xd9
30002dba:	ff                   	(bad)  
30002dbb:	ff 26                	jmp    DWORD PTR [esi]
30002dbd:	00 00                	add    BYTE PTR [eax],al
30002dbf:	00 00                	add    BYTE PTR [eax],al
30002dc1:	41                   	inc    ecx
30002dc2:	0e                   	push   cs
30002dc3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002dc9:	41                   	inc    ecx
30002dca:	83 03 60             	add    DWORD PTR [ebx],0x60
30002dcd:	c3                   	ret    
30002dce:	41                   	inc    ecx
30002dcf:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002dd2:	04 00                	add    al,0x0
30002dd4:	20 00                	and    BYTE PTR [eax],al
30002dd6:	00 00                	add    BYTE PTR [eax],al
30002dd8:	b0 02                	mov    al,0x2
30002dda:	00 00                	add    BYTE PTR [eax],al
30002ddc:	aa                   	stos   BYTE PTR es:[edi],al
30002ddd:	d9 ff                	fcos   
30002ddf:	ff 43 00             	inc    DWORD PTR [ebx+0x0]
30002de2:	00 00                	add    BYTE PTR [eax],al
30002de4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002de7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ded:	44                   	inc    esp
30002dee:	83 03 7a             	add    DWORD PTR [ebx],0x7a
30002df1:	c3                   	ret    
30002df2:	41                   	inc    ecx
30002df3:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002df6:	04 00                	add    al,0x0
30002df8:	20 00                	and    BYTE PTR [eax],al
30002dfa:	00 00                	add    BYTE PTR [eax],al
30002dfc:	d4 02                	aam    0x2
30002dfe:	00 00                	add    BYTE PTR [eax],al
30002e00:	c9                   	leave  
30002e01:	d9 ff                	fcos   
30002e03:	ff 2f                	jmp    FWORD PTR [edi]
30002e05:	00 00                	add    BYTE PTR [eax],al
30002e07:	00 00                	add    BYTE PTR [eax],al
30002e09:	41                   	inc    ecx
30002e0a:	0e                   	push   cs
30002e0b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e11:	44                   	inc    esp
30002e12:	83 03 66             	add    DWORD PTR [ebx],0x66
30002e15:	c3                   	ret    
30002e16:	41                   	inc    ecx
30002e17:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002e1a:	04 00                	add    al,0x0
30002e1c:	20 00                	and    BYTE PTR [eax],al
30002e1e:	00 00                	add    BYTE PTR [eax],al
30002e20:	f8                   	clc    
30002e21:	02 00                	add    al,BYTE PTR [eax]
30002e23:	00 d4                	add    ah,dl
30002e25:	d9 ff                	fcos   
30002e27:	ff                   	(bad)  
30002e28:	ba 00 00 00 00       	mov    edx,0x0
30002e2d:	41                   	inc    ecx
30002e2e:	0e                   	push   cs
30002e2f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e35:	44                   	inc    esp
30002e36:	83 03 02             	add    DWORD PTR [ebx],0x2
30002e39:	b2 c5                	mov    dl,0xc5
30002e3b:	c3                   	ret    
30002e3c:	0c 04                	or     al,0x4
30002e3e:	04 00                	add    al,0x0
30002e40:	24 00                	and    al,0x0
30002e42:	00 00                	add    BYTE PTR [eax],al
30002e44:	1c 03                	sbb    al,0x3
30002e46:	00 00                	add    BYTE PTR [eax],al
30002e48:	6c                   	ins    BYTE PTR es:[edi],dx
30002e49:	da ff                	(bad)  
30002e4b:	ff                   	(bad)  
30002e4c:	3a 00                	cmp    al,BYTE PTR [eax]
30002e4e:	00 00                	add    BYTE PTR [eax],al
30002e50:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002e53:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e59:	45                   	inc    ebp
30002e5a:	86 03                	xchg   BYTE PTR [ebx],al
30002e5c:	83 04 6f c3          	add    DWORD PTR [edi+ebp*2],0xffffffc3
30002e60:	41                   	inc    ecx
30002e61:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002e65:	04 04                	add    al,0x4
30002e67:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30002e6a:	00 00                	add    BYTE PTR [eax],al
30002e6c:	44                   	inc    esp
30002e6d:	03 00                	add    eax,DWORD PTR [eax]
30002e6f:	00 7e da             	add    BYTE PTR [esi-0x26],bh
30002e72:	ff                   	(bad)  
30002e73:	ff                   	(bad)  
30002e74:	3c 00                	cmp    al,0x0
30002e76:	00 00                	add    BYTE PTR [eax],al
30002e78:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002e7b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e81:	45                   	inc    ebp
30002e82:	86 03                	xchg   BYTE PTR [ebx],al
30002e84:	83 04 71 c3          	add    DWORD PTR [ecx+esi*2],0xffffffc3
30002e88:	41                   	inc    ecx
30002e89:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002e8d:	04 04                	add    al,0x4
30002e8f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30002e92:	00 00                	add    BYTE PTR [eax],al
30002e94:	6c                   	ins    BYTE PTR es:[edi],dx
30002e95:	03 00                	add    eax,DWORD PTR [eax]
30002e97:	00 92 da ff ff 3e    	add    BYTE PTR [edx+0x3effffda],dl
30002e9d:	00 00                	add    BYTE PTR [eax],al
30002e9f:	00 00                	add    BYTE PTR [eax],al
30002ea1:	41                   	inc    ecx
30002ea2:	0e                   	push   cs
30002ea3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ea9:	45                   	inc    ebp
30002eaa:	86 03                	xchg   BYTE PTR [ebx],al
30002eac:	83 04 73 c3          	add    DWORD PTR [ebx+esi*2],0xffffffc3
30002eb0:	41                   	inc    ecx
30002eb1:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002eb5:	04 04                	add    al,0x4
30002eb7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30002eba:	00 00                	add    BYTE PTR [eax],al
30002ebc:	94                   	xchg   esp,eax
30002ebd:	03 00                	add    eax,DWORD PTR [eax]
30002ebf:	00 a8 da ff ff 40    	add    BYTE PTR [eax+0x40ffffda],ch
30002ec5:	00 00                	add    BYTE PTR [eax],al
30002ec7:	00 00                	add    BYTE PTR [eax],al
30002ec9:	41                   	inc    ecx
30002eca:	0e                   	push   cs
30002ecb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ed1:	45                   	inc    ebp
30002ed2:	86 03                	xchg   BYTE PTR [ebx],al
30002ed4:	83 04 75 c3 41 c6 41 	add    DWORD PTR [esi*2+0x41c641c3],0xffffffc5
30002edb:	c5 
30002edc:	0c 04                	or     al,0x4
30002ede:	04 00                	add    al,0x0
30002ee0:	24 00                	and    al,0x0
30002ee2:	00 00                	add    BYTE PTR [eax],al
30002ee4:	bc 03 00 00 c0       	mov    esp,0xc0000003
30002ee9:	da ff                	(bad)  
30002eeb:	ff 42 00             	inc    DWORD PTR [edx+0x0]
30002eee:	00 00                	add    BYTE PTR [eax],al
30002ef0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002ef3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ef9:	45                   	inc    ebp
30002efa:	86 03                	xchg   BYTE PTR [ebx],al
30002efc:	83 04 77 c3          	add    DWORD PTR [edi+esi*2],0xffffffc3
30002f00:	41                   	inc    ecx
30002f01:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002f05:	04 04                	add    al,0x4
30002f07:	00 20                	add    BYTE PTR [eax],ah
30002f09:	00 00                	add    BYTE PTR [eax],al
30002f0b:	00 e4                	add    ah,ah
30002f0d:	03 00                	add    eax,DWORD PTR [eax]
30002f0f:	00 da                	add    dl,bl
30002f11:	da ff                	(bad)  
30002f13:	ff a5 00 00 00 00    	jmp    DWORD PTR [ebp+0x0]
30002f19:	41                   	inc    ecx
30002f1a:	0e                   	push   cs
30002f1b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f21:	44                   	inc    esp
30002f22:	83 03 02             	add    DWORD PTR [ebx],0x2
30002f25:	9d                   	popf   
30002f26:	c5 c3 0c             	(bad)  
30002f29:	04 04                	add    al,0x4
30002f2b:	00 20                	add    BYTE PTR [eax],ah
30002f2d:	00 00                	add    BYTE PTR [eax],al
30002f2f:	00 08                	add    BYTE PTR [eax],cl
30002f31:	04 00                	add    al,0x0
30002f33:	00 5b db             	add    BYTE PTR [ebx-0x25],bl
30002f36:	ff                   	(bad)  
30002f37:	ff 1f                	call   FWORD PTR [edi]
30002f39:	00 00                	add    BYTE PTR [eax],al
30002f3b:	00 00                	add    BYTE PTR [eax],al
30002f3d:	41                   	inc    ecx
30002f3e:	0e                   	push   cs
30002f3f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f45:	44                   	inc    esp
30002f46:	83 03 56             	add    DWORD PTR [ebx],0x56
30002f49:	c3                   	ret    
30002f4a:	41                   	inc    ecx
30002f4b:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002f4e:	04 00                	add    al,0x0
30002f50:	1c 00                	sbb    al,0x0
30002f52:	00 00                	add    BYTE PTR [eax],al
30002f54:	2c 04                	sub    al,0x4
30002f56:	00 00                	add    BYTE PTR [eax],al
30002f58:	56                   	push   esi
30002f59:	db ff                	(bad)  
30002f5b:	ff 34 00             	push   DWORD PTR [eax+eax*1]
30002f5e:	00 00                	add    BYTE PTR [eax],al
30002f60:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002f63:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f69:	70 c5                	jo     30002f30 <__x86.get_pc_thunk.cx+0x40c>
30002f6b:	0c 04                	or     al,0x4
30002f6d:	04 00                	add    al,0x0
30002f6f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002f72:	00 00                	add    BYTE PTR [eax],al
30002f74:	4c                   	dec    esp
30002f75:	04 00                	add    al,0x0
30002f77:	00 6a db             	add    BYTE PTR [edx-0x25],ch
30002f7a:	ff                   	(bad)  
30002f7b:	ff 34 00             	push   DWORD PTR [eax+eax*1]
30002f7e:	00 00                	add    BYTE PTR [eax],al
30002f80:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002f83:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f89:	70 c5                	jo     30002f50 <__x86.get_pc_thunk.cx+0x42c>
30002f8b:	0c 04                	or     al,0x4
30002f8d:	04 00                	add    al,0x0
30002f8f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002f92:	00 00                	add    BYTE PTR [eax],al
30002f94:	6c                   	ins    BYTE PTR es:[edi],dx
30002f95:	04 00                	add    al,0x0
30002f97:	00 7e db             	add    BYTE PTR [esi-0x25],bh
30002f9a:	ff                   	(bad)  
30002f9b:	ff 37                	push   DWORD PTR [edi]
30002f9d:	00 00                	add    BYTE PTR [eax],al
30002f9f:	00 00                	add    BYTE PTR [eax],al
30002fa1:	41                   	inc    ecx
30002fa2:	0e                   	push   cs
30002fa3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002fa9:	73 c5                	jae    30002f70 <__x86.get_pc_thunk.cx+0x44c>
30002fab:	0c 04                	or     al,0x4
30002fad:	04 00                	add    al,0x0
30002faf:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30002fb2:	00 00                	add    BYTE PTR [eax],al
30002fb4:	8c 04 00             	mov    WORD PTR [eax+eax*1],es
30002fb7:	00 95 db ff ff 72    	add    BYTE PTR [ebp+0x72ffffdb],dl
30002fbd:	00 00                	add    BYTE PTR [eax],al
30002fbf:	00 00                	add    BYTE PTR [eax],al
30002fc1:	41                   	inc    ecx
30002fc2:	0e                   	push   cs
30002fc3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002fc9:	45                   	inc    ebp
30002fca:	86 03                	xchg   BYTE PTR [ebx],al
30002fcc:	83 04 02 67          	add    DWORD PTR [edx+eax*1],0x67
30002fd0:	c3                   	ret    
30002fd1:	41                   	inc    ecx
30002fd2:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002fd6:	04 04                	add    al,0x4
30002fd8:	1c 00                	sbb    al,0x0
30002fda:	00 00                	add    BYTE PTR [eax],al
30002fdc:	b4 04                	mov    ah,0x4
30002fde:	00 00                	add    BYTE PTR [eax],al
30002fe0:	df db                	(bad)  
30002fe2:	ff                   	(bad)  
30002fe3:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
30002fe9:	41                   	inc    ecx
30002fea:	0e                   	push   cs
30002feb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ff1:	59                   	pop    ecx
30002ff2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002ff5:	04 00                	add    al,0x0
30002ff7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002ffa:	00 00                	add    BYTE PTR [eax],al
30002ffc:	d4 04                	aam    0x4
30002ffe:	00 00                	add    BYTE PTR [eax],al
30003000:	dc db                	(bad)  
30003002:	ff                   	(bad)  
30003003:	ff 29                	jmp    FWORD PTR [ecx]
30003005:	00 00                	add    BYTE PTR [eax],al
30003007:	00 00                	add    BYTE PTR [eax],al
30003009:	41                   	inc    ecx
3000300a:	0e                   	push   cs
3000300b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003011:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
30003015:	04 00                	add    al,0x0
30003017:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000301a:	00 00                	add    BYTE PTR [eax],al
3000301c:	f4                   	hlt    
3000301d:	04 00                	add    al,0x0
3000301f:	00 e5                	add    ch,ah
30003021:	db ff                	(bad)  
30003023:	ff 29                	jmp    FWORD PTR [ecx]
30003025:	00 00                	add    BYTE PTR [eax],al
30003027:	00 00                	add    BYTE PTR [eax],al
30003029:	41                   	inc    ecx
3000302a:	0e                   	push   cs
3000302b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003031:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
30003035:	04 00                	add    al,0x0
30003037:	00 20                	add    BYTE PTR [eax],ah
30003039:	00 00                	add    BYTE PTR [eax],al
3000303b:	00 14 05 00 00 ee db 	add    BYTE PTR [eax*1-0x24120000],dl
30003042:	ff                   	(bad)  
30003043:	ff f1                	push   ecx
30003045:	01 00                	add    DWORD PTR [eax],eax
30003047:	00 00                	add    BYTE PTR [eax],al
30003049:	41                   	inc    ecx
3000304a:	0e                   	push   cs
3000304b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003051:	44                   	inc    esp
30003052:	83 03 03             	add    DWORD PTR [ebx],0x3
30003055:	e9 01 c5 c3 0c       	jmp    3cc3f55b <ticksToWait+0xcc3b02b>
3000305a:	04 04                	add    al,0x4
3000305c:	1c 00                	sbb    al,0x0
3000305e:	00 00                	add    BYTE PTR [eax],al
30003060:	38 05 00 00 bb dd    	cmp    BYTE PTR ds:0xddbb0000,al
30003066:	ff                   	(bad)  
30003067:	ff 4c 00 00          	dec    DWORD PTR [eax+eax*1+0x0]
3000306b:	00 00                	add    BYTE PTR [eax],al
3000306d:	41                   	inc    ecx
3000306e:	0e                   	push   cs
3000306f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003075:	02 48 c5             	add    cl,BYTE PTR [eax-0x3b]
30003078:	0c 04                	or     al,0x4
3000307a:	04 00                	add    al,0x0
3000307c:	1c 00                	sbb    al,0x0
3000307e:	00 00                	add    BYTE PTR [eax],al
30003080:	58                   	pop    eax
30003081:	05 00 00 e7 dd       	add    eax,0xdde70000
30003086:	ff                   	(bad)  
30003087:	ff 1c 00             	call   FWORD PTR [eax+eax*1]
3000308a:	00 00                	add    BYTE PTR [eax],al
3000308c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000308f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003095:	58                   	pop    eax
30003096:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003099:	04 00                	add    al,0x0
3000309b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000309e:	00 00                	add    BYTE PTR [eax],al
300030a0:	78 05                	js     300030a7 <__x86.get_pc_thunk.cx+0x583>
300030a2:	00 00                	add    BYTE PTR [eax],al
300030a4:	e3 dd                	jecxz  30003083 <__x86.get_pc_thunk.cx+0x55f>
300030a6:	ff                   	(bad)  
300030a7:	ff 20                	jmp    DWORD PTR [eax]
300030a9:	00 00                	add    BYTE PTR [eax],al
300030ab:	00 00                	add    BYTE PTR [eax],al
300030ad:	41                   	inc    ecx
300030ae:	0e                   	push   cs
300030af:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030b5:	5c                   	pop    esp
300030b6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300030b9:	04 00                	add    al,0x0
300030bb:	00 20                	add    BYTE PTR [eax],ah
300030bd:	00 00                	add    BYTE PTR [eax],al
300030bf:	00 98 05 00 00 e4    	add    BYTE PTR [eax-0x1bfffffb],bl
300030c5:	dd ff                	(bad)  
300030c7:	ff 6c 00 00          	jmp    FWORD PTR [eax+eax*1+0x0]
300030cb:	00 00                	add    BYTE PTR [eax],al
300030cd:	41                   	inc    ecx
300030ce:	0e                   	push   cs
300030cf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030d5:	44                   	inc    esp
300030d6:	83 03 02             	add    DWORD PTR [ebx],0x2
300030d9:	64                   	fs
300030da:	c5 c3 0c             	(bad)  
300030dd:	04 04                	add    al,0x4
300030df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300030e2:	00 00                	add    BYTE PTR [eax],al
300030e4:	bc 05 00 00 2c       	mov    esp,0x2c000005
300030e9:	de ff                	fdivp  st(7),st
300030eb:	ff 87 00 00 00 00    	inc    DWORD PTR [edi+0x0]
300030f1:	41                   	inc    ecx
300030f2:	0e                   	push   cs
300030f3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030f9:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
300030ff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003102:	00 00                	add    BYTE PTR [eax],al
30003104:	dc 05 00 00 93 de    	fadd   QWORD PTR ds:0xde930000
3000310a:	ff                   	(bad)  
3000310b:	ff                   	(bad)  
3000310c:	39 00                	cmp    DWORD PTR [eax],eax
3000310e:	00 00                	add    BYTE PTR [eax],al
30003110:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003113:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003119:	75 c5                	jne    300030e0 <__x86.get_pc_thunk.cx+0x5bc>
3000311b:	0c 04                	or     al,0x4
3000311d:	04 00                	add    al,0x0
3000311f:	00 20                	add    BYTE PTR [eax],ah
30003121:	00 00                	add    BYTE PTR [eax],al
30003123:	00 fc                	add    ah,bh
30003125:	05 00 00 ac de       	add    eax,0xdeac0000
3000312a:	ff                   	(bad)  
3000312b:	ff d4                	call   esp
3000312d:	01 00                	add    DWORD PTR [eax],eax
3000312f:	00 00                	add    BYTE PTR [eax],al
30003131:	41                   	inc    ecx
30003132:	0e                   	push   cs
30003133:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003139:	44                   	inc    esp
3000313a:	83 03 03             	add    DWORD PTR [ebx],0x3
3000313d:	cc                   	int3   
3000313e:	01 c5                	add    ebp,eax
30003140:	c3                   	ret    
30003141:	0c 04                	or     al,0x4
30003143:	04 1c                	add    al,0x1c
30003145:	00 00                	add    BYTE PTR [eax],al
30003147:	00 20                	add    BYTE PTR [eax],ah
30003149:	06                   	push   es
3000314a:	00 00                	add    BYTE PTR [eax],al
3000314c:	5c                   	pop    esp
3000314d:	e0 ff                	loopne 3000314e <__x86.get_pc_thunk.cx+0x62a>
3000314f:	ff 20                	jmp    DWORD PTR [eax]
30003151:	00 00                	add    BYTE PTR [eax],al
30003153:	00 00                	add    BYTE PTR [eax],al
30003155:	41                   	inc    ecx
30003156:	0e                   	push   cs
30003157:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000315d:	5c                   	pop    esp
3000315e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003161:	04 00                	add    al,0x0
30003163:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003166:	00 00                	add    BYTE PTR [eax],al
30003168:	40                   	inc    eax
30003169:	06                   	push   es
3000316a:	00 00                	add    BYTE PTR [eax],al
3000316c:	5c                   	pop    esp
3000316d:	e0 ff                	loopne 3000316e <__x86.get_pc_thunk.cx+0x64a>
3000316f:	ff 1b                	call   FWORD PTR [ebx]
30003171:	00 00                	add    BYTE PTR [eax],al
30003173:	00 00                	add    BYTE PTR [eax],al
30003175:	41                   	inc    ecx
30003176:	0e                   	push   cs
30003177:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000317d:	57                   	push   edi
3000317e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003181:	04 00                	add    al,0x0
30003183:	00 20                	add    BYTE PTR [eax],ah
30003185:	00 00                	add    BYTE PTR [eax],al
30003187:	00 60 06             	add    BYTE PTR [eax+0x6],ah
3000318a:	00 00                	add    BYTE PTR [eax],al
3000318c:	57                   	push   edi
3000318d:	e0 ff                	loopne 3000318e <__x86.get_pc_thunk.cx+0x66a>
3000318f:	ff 32                	push   DWORD PTR [edx]
30003191:	00 00                	add    BYTE PTR [eax],al
30003193:	00 00                	add    BYTE PTR [eax],al
30003195:	41                   	inc    ecx
30003196:	0e                   	push   cs
30003197:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000319d:	44                   	inc    esp
3000319e:	83 03 6a             	add    DWORD PTR [ebx],0x6a
300031a1:	c5 c3 0c             	(bad)  
300031a4:	04 04                	add    al,0x4
300031a6:	00 00                	add    BYTE PTR [eax],al
300031a8:	1c 00                	sbb    al,0x0
300031aa:	00 00                	add    BYTE PTR [eax],al
300031ac:	84 06                	test   BYTE PTR [esi],al
300031ae:	00 00                	add    BYTE PTR [eax],al
300031b0:	68 e0 ff ff 9b       	push   0x9bffffe0
300031b5:	01 00                	add    DWORD PTR [eax],eax
300031b7:	00 00                	add    BYTE PTR [eax],al
300031b9:	41                   	inc    ecx
300031ba:	0e                   	push   cs
300031bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300031c1:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
300031c7:	04 1c                	add    al,0x1c
300031c9:	00 00                	add    BYTE PTR [eax],al
300031cb:	00 a4 06 00 00 e4 e1 	add    BYTE PTR [esi+eax*1-0x1e1c0000],ah
300031d2:	ff                   	(bad)  
300031d3:	ff c7                	inc    edi
300031d5:	00 00                	add    BYTE PTR [eax],al
300031d7:	00 00                	add    BYTE PTR [eax],al
300031d9:	41                   	inc    ecx
300031da:	0e                   	push   cs
300031db:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300031e1:	02 c3                	add    al,bl
300031e3:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300031e6:	04 00                	add    al,0x0
300031e8:	1c 00                	sbb    al,0x0
300031ea:	00 00                	add    BYTE PTR [eax],al
300031ec:	c4 06                	les    eax,FWORD PTR [esi]
300031ee:	00 00                	add    BYTE PTR [eax],al
300031f0:	8b e2                	mov    esp,edx
300031f2:	ff                   	(bad)  
300031f3:	ff 20                	jmp    DWORD PTR [eax]
300031f5:	00 00                	add    BYTE PTR [eax],al
300031f7:	00 00                	add    BYTE PTR [eax],al
300031f9:	41                   	inc    ecx
300031fa:	0e                   	push   cs
300031fb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003201:	5c                   	pop    esp
30003202:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003205:	04 00                	add    al,0x0
30003207:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000320a:	00 00                	add    BYTE PTR [eax],al
3000320c:	e4 06                	in     al,0x6
3000320e:	00 00                	add    BYTE PTR [eax],al
30003210:	8c e2                	mov    edx,fs
30003212:	ff                   	(bad)  
30003213:	ff 14 00             	call   DWORD PTR [eax+eax*1]
30003216:	00 00                	add    BYTE PTR [eax],al
30003218:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000321b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003221:	50                   	push   eax
30003222:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003225:	04 00                	add    al,0x0
30003227:	00 20                	add    BYTE PTR [eax],ah
30003229:	00 00                	add    BYTE PTR [eax],al
3000322b:	00 04 07             	add    BYTE PTR [edi+eax*1],al
3000322e:	00 00                	add    BYTE PTR [eax],al
30003230:	80 e2 ff             	and    dl,0xff
30003233:	ff 29                	jmp    FWORD PTR [ecx]
30003235:	00 00                	add    BYTE PTR [eax],al
30003237:	00 00                	add    BYTE PTR [eax],al
30003239:	41                   	inc    ecx
3000323a:	0e                   	push   cs
3000323b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003241:	44                   	inc    esp
30003242:	83 03 61             	add    DWORD PTR [ebx],0x61
30003245:	c5 c3 0c             	(bad)  
30003248:	04 04                	add    al,0x4
3000324a:	00 00                	add    BYTE PTR [eax],al
3000324c:	20 00                	and    BYTE PTR [eax],al
3000324e:	00 00                	add    BYTE PTR [eax],al
30003250:	28 07                	sub    BYTE PTR [edi],al
30003252:	00 00                	add    BYTE PTR [eax],al
30003254:	88 e2                	mov    dl,ah
30003256:	ff                   	(bad)  
30003257:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
3000325e:	0e                   	push   cs
3000325f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003265:	44                   	inc    esp
30003266:	83 03 02             	add    DWORD PTR [ebx],0x2
30003269:	7c c5                	jl     30003230 <__x86.get_pc_thunk.cx+0x70c>
3000326b:	c3                   	ret    
3000326c:	0c 04                	or     al,0x4
3000326e:	04 00                	add    al,0x0
30003270:	20 00                	and    BYTE PTR [eax],al
30003272:	00 00                	add    BYTE PTR [eax],al
30003274:	4c                   	dec    esp
30003275:	07                   	pop    es
30003276:	00 00                	add    BYTE PTR [eax],al
30003278:	e8 e2 ff ff 3e       	call   6f00325f <ticksToWait+0x3effed2f>
3000327d:	00 00                	add    BYTE PTR [eax],al
3000327f:	00 00                	add    BYTE PTR [eax],al
30003281:	41                   	inc    ecx
30003282:	0e                   	push   cs
30003283:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003289:	44                   	inc    esp
3000328a:	83 03 76             	add    DWORD PTR [ebx],0x76
3000328d:	c5 c3 0c             	(bad)  
30003290:	04 04                	add    al,0x4
30003292:	00 00                	add    BYTE PTR [eax],al
30003294:	20 00                	and    BYTE PTR [eax],al
30003296:	00 00                	add    BYTE PTR [eax],al
30003298:	70 07                	jo     300032a1 <__x86.get_pc_thunk.cx+0x77d>
3000329a:	00 00                	add    BYTE PTR [eax],al
3000329c:	02 e3                	add    ah,bl
3000329e:	ff                   	(bad)  
3000329f:	ff                   	(bad)  
300032a0:	3e 00 00             	add    BYTE PTR ds:[eax],al
300032a3:	00 00                	add    BYTE PTR [eax],al
300032a5:	41                   	inc    ecx
300032a6:	0e                   	push   cs
300032a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300032ad:	44                   	inc    esp
300032ae:	83 03 76             	add    DWORD PTR [ebx],0x76
300032b1:	c5 c3 0c             	(bad)  
300032b4:	04 04                	add    al,0x4
300032b6:	00 00                	add    BYTE PTR [eax],al
300032b8:	1c 00                	sbb    al,0x0
300032ba:	00 00                	add    BYTE PTR [eax],al
300032bc:	94                   	xchg   esp,eax
300032bd:	07                   	pop    es
300032be:	00 00                	add    BYTE PTR [eax],al
300032c0:	1c e3                	sbb    al,0xe3
300032c2:	ff                   	(bad)  
300032c3:	ff 6f 00             	jmp    FWORD PTR [edi+0x0]
300032c6:	00 00                	add    BYTE PTR [eax],al
300032c8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300032cb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300032d1:	02 6b c5             	add    ch,BYTE PTR [ebx-0x3b]
300032d4:	0c 04                	or     al,0x4
300032d6:	04 00                	add    al,0x0
300032d8:	24 00                	and    al,0x0
300032da:	00 00                	add    BYTE PTR [eax],al
300032dc:	b4 07                	mov    ah,0x7
300032de:	00 00                	add    BYTE PTR [eax],al
300032e0:	6c                   	ins    BYTE PTR es:[edi],dx
300032e1:	e3 ff                	jecxz  300032e2 <__x86.get_pc_thunk.cx+0x7be>
300032e3:	ff 5e 00             	call   FWORD PTR [esi+0x0]
300032e6:	00 00                	add    BYTE PTR [eax],al
300032e8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300032eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300032f1:	45                   	inc    ebp
300032f2:	86 03                	xchg   BYTE PTR [ebx],al
300032f4:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
300032f8:	c3                   	ret    
300032f9:	41                   	inc    ecx
300032fa:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
300032fe:	04 04                	add    al,0x4
30003300:	1c 00                	sbb    al,0x0
30003302:	00 00                	add    BYTE PTR [eax],al
30003304:	dc 07                	fadd   QWORD PTR [edi]
30003306:	00 00                	add    BYTE PTR [eax],al
30003308:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
30003309:	e3 ff                	jecxz  3000330a <__x86.get_pc_thunk.cx+0x7e6>
3000330b:	ff 40 00             	inc    DWORD PTR [eax+0x0]
3000330e:	00 00                	add    BYTE PTR [eax],al
30003310:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003313:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003319:	7c c5                	jl     300032e0 <__x86.get_pc_thunk.cx+0x7bc>
3000331b:	0c 04                	or     al,0x4
3000331d:	04 00                	add    al,0x0
3000331f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003322:	00 00                	add    BYTE PTR [eax],al
30003324:	fc                   	cld    
30003325:	07                   	pop    es
30003326:	00 00                	add    BYTE PTR [eax],al
30003328:	c4 e3 ff ff          	(bad)  
3000332c:	40                   	inc    eax
3000332d:	00 00                	add    BYTE PTR [eax],al
3000332f:	00 00                	add    BYTE PTR [eax],al
30003331:	41                   	inc    ecx
30003332:	0e                   	push   cs
30003333:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003339:	7c c5                	jl     30003300 <__x86.get_pc_thunk.cx+0x7dc>
3000333b:	0c 04                	or     al,0x4
3000333d:	04 00                	add    al,0x0
3000333f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003342:	00 00                	add    BYTE PTR [eax],al
30003344:	1c 08                	sbb    al,0x8
30003346:	00 00                	add    BYTE PTR [eax],al
30003348:	e4 e3                	in     al,0xe3
3000334a:	ff                   	(bad)  
3000334b:	ff 47 00             	inc    DWORD PTR [edi+0x0]
3000334e:	00 00                	add    BYTE PTR [eax],al
30003350:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003353:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003359:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
3000335c:	0c 04                	or     al,0x4
3000335e:	04 00                	add    al,0x0
30003360:	1c 00                	sbb    al,0x0
30003362:	00 00                	add    BYTE PTR [eax],al
30003364:	3c 08                	cmp    al,0x8
30003366:	00 00                	add    BYTE PTR [eax],al
30003368:	0c e4                	or     al,0xe4
3000336a:	ff                   	(bad)  
3000336b:	ff 30                	push   DWORD PTR [eax]
3000336d:	00 00                	add    BYTE PTR [eax],al
3000336f:	00 00                	add    BYTE PTR [eax],al
30003371:	41                   	inc    ecx
30003372:	0e                   	push   cs
30003373:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003379:	6c                   	ins    BYTE PTR es:[edi],dx
3000337a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000337d:	04 00                	add    al,0x0
3000337f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003382:	00 00                	add    BYTE PTR [eax],al
30003384:	5c                   	pop    esp
30003385:	08 00                	or     BYTE PTR [eax],al
30003387:	00 1c e4             	add    BYTE PTR [esp+eiz*8],bl
3000338a:	ff                   	(bad)  
3000338b:	ff 59 00             	call   FWORD PTR [ecx+0x0]
3000338e:	00 00                	add    BYTE PTR [eax],al
30003390:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003393:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003399:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
3000339c:	0c 04                	or     al,0x4
3000339e:	04 00                	add    al,0x0
300033a0:	1c 00                	sbb    al,0x0
300033a2:	00 00                	add    BYTE PTR [eax],al
300033a4:	7c 08                	jl     300033ae <__x86.get_pc_thunk.cx+0x88a>
300033a6:	00 00                	add    BYTE PTR [eax],al
300033a8:	58                   	pop    eax
300033a9:	e4 ff                	in     al,0xff
300033ab:	ff 31                	push   DWORD PTR [ecx]
300033ad:	00 00                	add    BYTE PTR [eax],al
300033af:	00 00                	add    BYTE PTR [eax],al
300033b1:	41                   	inc    ecx
300033b2:	0e                   	push   cs
300033b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300033b9:	6d                   	ins    DWORD PTR es:[edi],dx
300033ba:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300033bd:	04 00                	add    al,0x0
300033bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300033c2:	00 00                	add    BYTE PTR [eax],al
300033c4:	9c                   	pushf  
300033c5:	08 00                	or     BYTE PTR [eax],al
300033c7:	00 69 e4             	add    BYTE PTR [ecx-0x1c],ch
300033ca:	ff                   	(bad)  
300033cb:	ff 31                	push   DWORD PTR [ecx]
300033cd:	00 00                	add    BYTE PTR [eax],al
300033cf:	00 00                	add    BYTE PTR [eax],al
300033d1:	41                   	inc    ecx
300033d2:	0e                   	push   cs
300033d3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300033d9:	6d                   	ins    DWORD PTR es:[edi],dx
300033da:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300033dd:	04 00                	add    al,0x0
300033df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300033e2:	00 00                	add    BYTE PTR [eax],al
300033e4:	bc 08 00 00 7c       	mov    esp,0x7c000008
300033e9:	e4 ff                	in     al,0xff
300033eb:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
300033ee:	00 00                	add    BYTE PTR [eax],al
300033f0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300033f3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300033f9:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
300033fc:	0c 04                	or     al,0x4
300033fe:	04 00                	add    al,0x0
30003400:	1c 00                	sbb    al,0x0
30003402:	00 00                	add    BYTE PTR [eax],al
30003404:	dc 08                	fmul   QWORD PTR [eax]
30003406:	00 00                	add    BYTE PTR [eax],al
30003408:	c3                   	ret    
30003409:	e4 ff                	in     al,0xff
3000340b:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
3000340e:	00 00                	add    BYTE PTR [eax],al
30003410:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003413:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003419:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
3000341c:	0c 04                	or     al,0x4
3000341e:	04 00                	add    al,0x0
30003420:	1c 00                	sbb    al,0x0
30003422:	00 00                	add    BYTE PTR [eax],al
30003424:	fc                   	cld    
30003425:	08 00                	or     BYTE PTR [eax],al
30003427:	00 0c e5 ff ff 60 00 	add    BYTE PTR [eiz*8+0x60ffff],cl
3000342e:	00 00                	add    BYTE PTR [eax],al
30003430:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003433:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003439:	02 5c c5 0c          	add    bl,BYTE PTR [ebp+eax*8+0xc]
3000343d:	04 04                	add    al,0x4
3000343f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003442:	00 00                	add    BYTE PTR [eax],al
30003444:	1c 09                	sbb    al,0x9
30003446:	00 00                	add    BYTE PTR [eax],al
30003448:	4c                   	dec    esp
30003449:	e5 ff                	in     eax,0xff
3000344b:	ff 20                	jmp    DWORD PTR [eax]
3000344d:	00 00                	add    BYTE PTR [eax],al
3000344f:	00 00                	add    BYTE PTR [eax],al
30003451:	41                   	inc    ecx
30003452:	0e                   	push   cs
30003453:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003459:	5c                   	pop    esp
3000345a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000345d:	04 00                	add    al,0x0
3000345f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
30003462:	00 00                	add    BYTE PTR [eax],al
30003464:	3c 09                	cmp    al,0x9
30003466:	00 00                	add    BYTE PTR [eax],al
30003468:	4c                   	dec    esp
30003469:	e5 ff                	in     eax,0xff
3000346b:	ff                   	(bad)  
3000346c:	7d 01                	jge    3000346f <__x86.get_pc_thunk.cx+0x94b>
3000346e:	00 00                	add    BYTE PTR [eax],al
30003470:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003473:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003479:	46                   	inc    esi
3000347a:	87 03                	xchg   DWORD PTR [ebx],eax
3000347c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
3000347f:	05 03 70 01 c3       	add    eax,0xc3017003
30003484:	41                   	inc    ecx
30003485:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
30003489:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000348c:	04 00                	add    al,0x0
3000348e:	00 00                	add    BYTE PTR [eax],al
30003490:	1c 00                	sbb    al,0x0
30003492:	00 00                	add    BYTE PTR [eax],al
30003494:	6c                   	ins    BYTE PTR es:[edi],dx
30003495:	09 00                	or     DWORD PTR [eax],eax
30003497:	00 9c e6 ff ff 1d 00 	add    BYTE PTR [esi+eiz*8+0x1dffff],bl
3000349e:	00 00                	add    BYTE PTR [eax],al
300034a0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300034a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300034a9:	59                   	pop    ecx
300034aa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300034ad:	04 00                	add    al,0x0
300034af:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
300034b2:	00 00                	add    BYTE PTR [eax],al
300034b4:	8c 09                	mov    WORD PTR [ecx],cs
300034b6:	00 00                	add    BYTE PTR [eax],al
300034b8:	9c                   	pushf  
300034b9:	e6 ff                	out    0xff,al
300034bb:	ff 9c 01 00 00 00 41 	call   FWORD PTR [ecx+eax*1+0x41000000]
300034c2:	0e                   	push   cs
300034c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300034c9:	46                   	inc    esi
300034ca:	87 03                	xchg   DWORD PTR [ebx],eax
300034cc:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
300034cf:	05 03 8f 01 c3       	add    eax,0xc3018f03
300034d4:	41                   	inc    ecx
300034d5:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
300034d9:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300034dc:	04 00                	add    al,0x0
300034de:	00 00                	add    BYTE PTR [eax],al
300034e0:	20 00                	and    BYTE PTR [eax],al
300034e2:	00 00                	add    BYTE PTR [eax],al
300034e4:	bc 09 00 00 08       	mov    esp,0x8000009
300034e9:	e8 ff ff 96 00       	call   309734ed <ticksToWait+0x96efbd>
300034ee:	00 00                	add    BYTE PTR [eax],al
300034f0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300034f3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300034f9:	44                   	inc    esp
300034fa:	83 03 02             	add    DWORD PTR [ebx],0x2
300034fd:	8e c5                	mov    es,ebp
300034ff:	c3                   	ret    
30003500:	0c 04                	or     al,0x4
30003502:	04 00                	add    al,0x0
30003504:	1c 00                	sbb    al,0x0
30003506:	00 00                	add    BYTE PTR [eax],al
30003508:	e0 09                	loopne 30003513 <__x86.get_pc_thunk.cx+0x9ef>
3000350a:	00 00                	add    BYTE PTR [eax],al
3000350c:	7a e8                	jp     300034f6 <__x86.get_pc_thunk.cx+0x9d2>
3000350e:	ff                   	(bad)  
3000350f:	ff 20                	jmp    DWORD PTR [eax]
30003511:	00 00                	add    BYTE PTR [eax],al
30003513:	00 00                	add    BYTE PTR [eax],al
30003515:	41                   	inc    ecx
30003516:	0e                   	push   cs
30003517:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000351d:	5c                   	pop    esp
3000351e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003521:	04 00                	add    al,0x0
30003523:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003526:	00 00                	add    BYTE PTR [eax],al
30003528:	00 0a                	add    BYTE PTR [edx],cl
3000352a:	00 00                	add    BYTE PTR [eax],al
3000352c:	7c e8                	jl     30003516 <__x86.get_pc_thunk.cx+0x9f2>
3000352e:	ff                   	(bad)  
3000352f:	ff 6e 00             	jmp    FWORD PTR [esi+0x0]
30003532:	00 00                	add    BYTE PTR [eax],al
30003534:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003537:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000353d:	42                   	inc    edx
3000353e:	86 03                	xchg   BYTE PTR [ebx],al
30003540:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
30003544:	c3                   	ret    
30003545:	41                   	inc    ecx
30003546:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
3000354a:	04 04                	add    al,0x4
3000354c:	1c 00                	sbb    al,0x0
3000354e:	00 00                	add    BYTE PTR [eax],al
30003550:	28 0a                	sub    BYTE PTR [edx],cl
30003552:	00 00                	add    BYTE PTR [eax],al
30003554:	c2 e8 ff             	ret    0xffe8
30003557:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
3000355d:	41                   	inc    ecx
3000355e:	0e                   	push   cs
3000355f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003565:	59                   	pop    ecx
30003566:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003569:	04 00                	add    al,0x0
3000356b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
3000356e:	00 00                	add    BYTE PTR [eax],al
30003570:	48                   	dec    eax
30003571:	0a 00                	or     al,BYTE PTR [eax]
30003573:	00 c0                	add    al,al
30003575:	e8 ff ff 44 00       	call   30453579 <ticksToWait+0x44f049>
3000357a:	00 00                	add    BYTE PTR [eax],al
3000357c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000357f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003585:	45                   	inc    ebp
30003586:	86 03                	xchg   BYTE PTR [ebx],al
30003588:	83 04 79 c3          	add    DWORD PTR [ecx+edi*2],0xffffffc3
3000358c:	41                   	inc    ecx
3000358d:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30003591:	04 04                	add    al,0x4
30003593:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003596:	00 00                	add    BYTE PTR [eax],al
30003598:	70 0a                	jo     300035a4 <__x86.get_pc_thunk.cx+0xa80>
3000359a:	00 00                	add    BYTE PTR [eax],al
3000359c:	dc e8                	fsub   st(0),st
3000359e:	ff                   	(bad)  
3000359f:	ff 19                	call   FWORD PTR [ecx]
300035a1:	03 00                	add    eax,DWORD PTR [eax]
300035a3:	00 00                	add    BYTE PTR [eax],al
300035a5:	41                   	inc    ecx
300035a6:	0e                   	push   cs
300035a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300035ad:	44                   	inc    esp
300035ae:	83 03 03             	add    DWORD PTR [ebx],0x3
300035b1:	10 03                	adc    BYTE PTR [ebx],al
300035b3:	c3                   	ret    
300035b4:	41                   	inc    ecx
300035b5:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300035b8:	04 00                	add    al,0x0
300035ba:	00 00                	add    BYTE PTR [eax],al
300035bc:	1c 00                	sbb    al,0x0
300035be:	00 00                	add    BYTE PTR [eax],al
300035c0:	98                   	cwde   
300035c1:	0a 00                	or     al,BYTE PTR [eax]
300035c3:	00 cd                	add    ch,cl
300035c5:	eb ff                	jmp    300035c6 <__x86.get_pc_thunk.cx+0xaa2>
300035c7:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
300035cd:	41                   	inc    ecx
300035ce:	0e                   	push   cs
300035cf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300035d5:	59                   	pop    ecx
300035d6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300035d9:	04 00                	add    al,0x0
300035db:	00 20                	add    BYTE PTR [eax],ah
300035dd:	00 00                	add    BYTE PTR [eax],al
300035df:	00 b8 0a 00 00 ca    	add    BYTE PTR [eax-0x35fffff6],bh
300035e5:	eb ff                	jmp    300035e6 <__x86.get_pc_thunk.cx+0xac2>
300035e7:	ff 41 00             	inc    DWORD PTR [ecx+0x0]
300035ea:	00 00                	add    BYTE PTR [eax],al
300035ec:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300035ef:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300035f5:	44                   	inc    esp
300035f6:	83 03 79             	add    DWORD PTR [ebx],0x79
300035f9:	c5 c3 0c             	(bad)  
300035fc:	04 04                	add    al,0x4
300035fe:	00 00                	add    BYTE PTR [eax],al
30003600:	1c 00                	sbb    al,0x0
30003602:	00 00                	add    BYTE PTR [eax],al
30003604:	dc 0a                	fmul   QWORD PTR [edx]
30003606:	00 00                	add    BYTE PTR [eax],al
30003608:	e7 eb                	out    0xeb,eax
3000360a:	ff                   	(bad)  
3000360b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
30003611:	41                   	inc    ecx
30003612:	0e                   	push   cs
30003613:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003619:	71 c5                	jno    300035e0 <__x86.get_pc_thunk.cx+0xabc>
3000361b:	0c 04                	or     al,0x4
3000361d:	04 00                	add    al,0x0
3000361f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003622:	00 00                	add    BYTE PTR [eax],al
30003624:	fc                   	cld    
30003625:	0a 00                	or     al,BYTE PTR [eax]
30003627:	00 fc                	add    ah,bh
30003629:	eb ff                	jmp    3000362a <__x86.get_pc_thunk.cx+0xb06>
3000362b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
30003631:	41                   	inc    ecx
30003632:	0e                   	push   cs
30003633:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003639:	59                   	pop    ecx
3000363a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000363d:	04 00                	add    al,0x0
3000363f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
30003642:	00 00                	add    BYTE PTR [eax],al
30003644:	1c 0b                	sbb    al,0xb
30003646:	00 00                	add    BYTE PTR [eax],al
30003648:	f9                   	stc    
30003649:	eb ff                	jmp    3000364a <__x86.get_pc_thunk.cx+0xb26>
3000364b:	ff 41 08             	inc    DWORD PTR [ecx+0x8]
3000364e:	00 00                	add    BYTE PTR [eax],al
30003650:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003653:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003659:	46                   	inc    esi
3000365a:	87 03                	xchg   DWORD PTR [ebx],eax
3000365c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
3000365f:	05 03 34 08 c3       	add    eax,0xc3083403
30003664:	41                   	inc    ecx
30003665:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
30003669:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000366c:	04 00                	add    al,0x0
3000366e:	00 00                	add    BYTE PTR [eax],al
30003670:	24 00                	and    al,0x0
30003672:	00 00                	add    BYTE PTR [eax],al
30003674:	4c                   	dec    esp
30003675:	0b 00                	or     eax,DWORD PTR [eax]
30003677:	00 0a                	add    BYTE PTR [edx],cl
30003679:	f4                   	hlt    
3000367a:	ff                   	(bad)  
3000367b:	ff 6d 00             	jmp    FWORD PTR [ebp+0x0]
3000367e:	00 00                	add    BYTE PTR [eax],al
30003680:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003683:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003689:	45                   	inc    ebp
3000368a:	86 03                	xchg   BYTE PTR [ebx],al
3000368c:	83 04 02 62          	add    DWORD PTR [edx+eax*1],0x62
30003690:	c3                   	ret    
30003691:	41                   	inc    ecx
30003692:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30003696:	04 04                	add    al,0x4
30003698:	10 00                	adc    BYTE PTR [eax],al
3000369a:	00 00                	add    BYTE PTR [eax],al
3000369c:	74 0b                	je     300036a9 <__x86.get_pc_thunk.cx+0xb85>
3000369e:	00 00                	add    BYTE PTR [eax],al
300036a0:	84 f4                	test   ah,dh
300036a2:	ff                   	(bad)  
300036a3:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
300036a6:	00 00                	add    BYTE PTR [eax],al
300036a8:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .dynsym:

300036ac <.dynsym>:
	...
300036bc:	ed                   	in     eax,dx
300036bd:	00 00                	add    BYTE PTR [eax],al
300036bf:	00 ac 16 00 30 40 00 	add    BYTE PTR [esi+edx*1+0x403000],ch
300036c6:	00 00                	add    BYTE PTR [eax],al
300036c8:	12 00                	adc    al,BYTE PTR [eax]
300036ca:	01 00                	add    DWORD PTR [eax],eax
300036cc:	a3 00 00 00 6b       	mov    ds:0x6b000000,eax
300036d1:	0e                   	push   cs
300036d2:	00 30                	add    BYTE PTR [eax],dh
300036d4:	1c 00                	sbb    al,0x0
300036d6:	00 00                	add    BYTE PTR [eax],al
300036d8:	12 00                	adc    al,BYTE PTR [eax]
300036da:	01 00                	add    DWORD PTR [eax],eax
300036dc:	7a 00                	jp     300036de <__x86.get_pc_thunk.cx+0xbba>
300036de:	00 00                	add    BYTE PTR [eax],al
300036e0:	ae                   	scas   al,BYTE PTR es:[edi]
300036e1:	0a 00                	or     al,BYTE PTR [eax]
300036e3:	30 34 00             	xor    BYTE PTR [eax+eax*1],dh
300036e6:	00 00                	add    BYTE PTR [eax],al
300036e8:	12 00                	adc    al,BYTE PTR [eax]
300036ea:	01 00                	add    DWORD PTR [eax],eax
300036ec:	fc                   	cld    
300036ed:	00 00                	add    BYTE PTR [eax],al
300036ef:	00 a4 17 00 30 59 00 	add    BYTE PTR [edi+edx*1+0x593000],ah
300036f6:	00 00                	add    BYTE PTR [eax],al
300036f8:	12 00                	adc    al,BYTE PTR [eax]
300036fa:	01 00                	add    DWORD PTR [eax],eax
300036fc:	d6                   	(bad)  
300036fd:	00 00                	add    BYTE PTR [eax],al
300036ff:	00 dc                	add    ah,bl
30003701:	14 00                	adc    al,0x0
30003703:	30 84 00 00 00 12 00 	xor    BYTE PTR [eax+eax*1+0x120000],al
3000370a:	01 00                	add    DWORD PTR [eax],eax
3000370c:	21 00                	and    DWORD PTR [eax],eax
3000370e:	00 00                	add    BYTE PTR [eax],al
30003710:	00 04 00             	add    BYTE PTR [eax+eax*1],al
30003713:	30 aa 00 00 00 12    	xor    BYTE PTR [edx+0x12000000],ch
30003719:	00 01                	add    BYTE PTR [ecx],al
3000371b:	00 6b 00             	add    BYTE PTR [ebx+0x0],ch
3000371e:	00 00                	add    BYTE PTR [eax],al
30003720:	f8                   	clc    
30003721:	07                   	pop    es
30003722:	00 30                	add    BYTE PTR [eax],dh
30003724:	ba 00 00 00 12       	mov    edx,0x12000000
30003729:	00 01                	add    BYTE PTR [ecx],al
3000372b:	00 66 00             	add    BYTE PTR [esi+0x0],ah
3000372e:	00 00                	add    BYTE PTR [eax],al
30003730:	c9                   	leave  
30003731:	07                   	pop    es
30003732:	00 30                	add    BYTE PTR [eax],dh
30003734:	2f                   	das    
30003735:	00 00                	add    BYTE PTR [eax],al
30003737:	00 12                	add    BYTE PTR [edx],dl
30003739:	00 01                	add    BYTE PTR [ecx],al
3000373b:	00 be 00 00 00 18    	add    BYTE PTR [esi+0x18000000],bh
30003741:	12 00                	adc    al,BYTE PTR [eax]
30003743:	30 9b 01 00 00 12    	xor    BYTE PTR [ebx+0x12000001],bl
30003749:	00 01                	add    BYTE PTR [ecx],al
3000374b:	00 4c 00 00          	add    BYTE PTR [eax+eax*1+0x0],cl
3000374f:	00 60 07             	add    BYTE PTR [eax+0x7],ah
30003752:	00 30                	add    BYTE PTR [eax],dh
30003754:	26 00 00             	add    BYTE PTR es:[eax],al
30003757:	00 12                	add    BYTE PTR [edx],dl
30003759:	00 01                	add    BYTE PTR [ecx],al
3000375b:	00 b2 00 00 00 a8    	add    BYTE PTR [edx-0x58000000],dh
30003761:	11 00                	adc    DWORD PTR [eax],eax
30003763:	30 20                	xor    BYTE PTR [eax],ah
30003765:	00 00                	add    BYTE PTR [eax],al
30003767:	00 12                	add    BYTE PTR [edx],dl
30003769:	00 01                	add    BYTE PTR [ecx],al
3000376b:	00 80 00 00 00 4d    	add    BYTE PTR [eax+0x4d000000],al
30003771:	0b 00                	or     eax,DWORD PTR [eax]
30003773:	30 72 00             	xor    BYTE PTR [edx+0x0],dh
30003776:	00 00                	add    BYTE PTR [eax],al
30003778:	12 00                	adc    al,BYTE PTR [eax]
3000377a:	01 00                	add    DWORD PTR [eax],eax
3000377c:	1c 01                	sbb    al,0x1
3000377e:	00 00                	add    BYTE PTR [eax],al
30003780:	b4 19                	mov    ah,0x19
30003782:	00 30                	add    BYTE PTR [eax],dh
30003784:	7d 01                	jge    30003787 <__x86.get_pc_thunk.cx+0xc63>
30003786:	00 00                	add    BYTE PTR [eax],al
30003788:	12 00                	adc    al,BYTE PTR [eax]
3000378a:	01 00                	add    DWORD PTR [eax],eax
3000378c:	17                   	pop    ss
3000378d:	00 00                	add    BYTE PTR [eax],al
3000378f:	00 2b                	add    BYTE PTR [ebx],ch
30003791:	02 00                	add    al,BYTE PTR [eax]
30003793:	30 bb 00 00 00 12    	xor    BYTE PTR [ebx+0x12000000],bh
30003799:	00 01                	add    BYTE PTR [ecx],al
3000379b:	00 cc                	add    ah,cl
3000379d:	00 00                	add    BYTE PTR [eax],al
3000379f:	00 9c 14 00 30 14 00 	add    BYTE PTR [esp+edx*1+0x143000],bl
300037a6:	00 00                	add    BYTE PTR [eax],al
300037a8:	12 00                	adc    al,BYTE PTR [eax]
300037aa:	01 00                	add    DWORD PTR [eax],eax
300037ac:	4b                   	dec    ebx
300037ad:	01 00                	add    DWORD PTR [eax],eax
300037af:	00 91 21 00 30 1d    	add    BYTE PTR [ecx+0x1d300021],dl
300037b5:	00 00                	add    BYTE PTR [eax],al
300037b7:	00 12                	add    BYTE PTR [edx],dl
300037b9:	00 01                	add    BYTE PTR [ecx],al
300037bb:	00 2c 01             	add    BYTE PTR [ecx+eax*1],ch
300037be:	00 00                	add    BYTE PTR [eax],al
300037c0:	54                   	push   esp
300037c1:	1b 00                	sbb    eax,DWORD PTR [eax]
300037c3:	30 9c 01 00 00 12 00 	xor    BYTE PTR [ecx+eax*1+0x120000],bl
300037ca:	01 00                	add    DWORD PTR [eax],eax
300037cc:	70 00                	jo     300037ce <__x86.get_pc_thunk.cx+0xcaa>
300037ce:	00 00                	add    BYTE PTR [eax],al
300037d0:	ea 09 00 30 a5 00 00 	jmp    0x0:0xa5300009
300037d7:	00 12                	add    BYTE PTR [edx],dl
300037d9:	00 01                	add    BYTE PTR [ecx],al
300037db:	00 d1                	add    cl,dl
300037dd:	00 00                	add    BYTE PTR [eax],al
300037df:	00 b0 14 00 30 29    	add    BYTE PTR [eax+0x29300014],dh
300037e5:	00 00                	add    BYTE PTR [eax],al
300037e7:	00 12                	add    BYTE PTR [edx],dl
300037e9:	00 01                	add    BYTE PTR [ecx],al
300037eb:	00 3f                	add    BYTE PTR [edi],bh
300037ed:	00 00                	add    BYTE PTR [eax],al
300037ef:	00 f8                	add    al,bh
300037f1:	06                   	push   es
300037f2:	00 30                	add    BYTE PTR [eax],dh
300037f4:	35 00 00 00 12       	xor    eax,0x12000000
300037f9:	00 01                	add    BYTE PTR [ecx],al
300037fb:	00 df                	add    bh,bl
300037fd:	00 00                	add    BYTE PTR [eax],al
300037ff:	00 60 15             	add    BYTE PTR [eax+0x15],ah
30003802:	00 30                	add    BYTE PTR [eax],dh
30003804:	3e 00 00             	add    BYTE PTR ds:[eax],al
30003807:	00 12                	add    BYTE PTR [edx],dl
30003809:	00 01                	add    BYTE PTR [ecx],al
3000380b:	00 42 01             	add    BYTE PTR [edx+0x1],al
3000380e:	00 00                	add    BYTE PTR [eax],al
30003810:	34 1e                	xor    al,0x1e
30003812:	00 30                	add    BYTE PTR [eax],dh
30003814:	44                   	inc    esp
30003815:	00 00                	add    BYTE PTR [eax],al
30003817:	00 12                	add    BYTE PTR [edx],dl
30003819:	00 01                	add    BYTE PTR [ecx],al
3000381b:	00 98 00 00 00 2e    	add    BYTE PTR [eax+0x2e000000],bl
30003821:	0c 00                	or     al,0x0
30003823:	30 f1                	xor    cl,dh
30003825:	01 00                	add    DWORD PTR [eax],eax
30003827:	00 12                	add    BYTE PTR [edx],dl
30003829:	00 01                	add    BYTE PTR [ecx],al
3000382b:	00 45 00             	add    BYTE PTR [ebp+0x0],al
3000382e:	00 00                	add    BYTE PTR [eax],al
30003830:	2d 07 00 30 31       	sub    eax,0x31300007
30003835:	00 00                	add    BYTE PTR [eax],al
30003837:	00 12                	add    BYTE PTR [edx],dl
30003839:	00 01                	add    BYTE PTR [ecx],al
3000383b:	00 6a 01             	add    BYTE PTR [edx+0x1],ch
3000383e:	00 00                	add    BYTE PTR [eax],al
30003840:	41                   	inc    ecx
30003841:	22 00                	and    al,BYTE PTR [eax]
30003843:	30 41 08             	xor    BYTE PTR [ecx+0x8],al
30003846:	00 00                	add    BYTE PTR [eax],al
30003848:	12 00                	adc    al,BYTE PTR [eax]
3000384a:	01 00                	add    DWORD PTR [eax],eax
3000384c:	3b 01                	cmp    eax,DWORD PTR [ecx]
3000384e:	00 00                	add    BYTE PTR [eax],al
30003850:	16                   	push   ss
30003851:	1e                   	push   ds
30003852:	00 30                	add    BYTE PTR [eax],dh
30003854:	1d 00 00 00 12       	sbb    eax,0x12000000
30003859:	00 01                	add    BYTE PTR [ecx],al
3000385b:	00 3a                	add    BYTE PTR [edx],bh
3000385d:	00 00                	add    BYTE PTR [eax],al
3000385f:	00 c3                	add    bl,al
30003861:	06                   	push   es
30003862:	00 30                	add    BYTE PTR [eax],dh
30003864:	35 00 00 00 12       	xor    eax,0x12000000
30003869:	00 01                	add    BYTE PTR [ecx],al
3000386b:	00 0c 01             	add    BYTE PTR [ecx+eax*1],cl
3000386e:	00 00                	add    BYTE PTR [eax],al
30003870:	64 18 00             	sbb    BYTE PTR fs:[eax],al
30003873:	30 67 00             	xor    BYTE PTR [edi+0x0],ah
30003876:	00 00                	add    BYTE PTR [eax],al
30003878:	12 00                	adc    al,BYTE PTR [eax]
3000387a:	01 00                	add    DWORD PTR [eax],eax
3000387c:	14 01                	adc    al,0x1
3000387e:	00 00                	add    BYTE PTR [eax],al
30003880:	94                   	xchg   esp,eax
30003881:	19 00                	sbb    DWORD PTR [eax],eax
30003883:	30 20                	xor    BYTE PTR [eax],ah
30003885:	00 00                	add    BYTE PTR [eax],al
30003887:	00 12                	add    BYTE PTR [edx],dl
30003889:	00 01                	add    BYTE PTR [ecx],al
3000388b:	00 28                	add    BYTE PTR [eax],ch
3000388d:	00 00                	add    BYTE PTR [eax],al
3000388f:	00 aa 04 00 30 c1    	add    BYTE PTR [edx-0x3ecffffc],ch
30003895:	01 00                	add    DWORD PTR [eax],eax
30003897:	00 12                	add    BYTE PTR [edx],dl
30003899:	00 01                	add    BYTE PTR [ecx],al
3000389b:	00 10                	add    BYTE PTR [eax],dl
3000389d:	00 00                	add    BYTE PTR [eax],al
3000389f:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
300038a2:	00 30                	add    BYTE PTR [eax],dh
300038a4:	97                   	xchg   edi,eax
300038a5:	00 00                	add    BYTE PTR [eax],al
300038a7:	00 12                	add    BYTE PTR [edx],dl
300038a9:	00 01                	add    BYTE PTR [ecx],al
300038ab:	00 93 00 00 00 05    	add    BYTE PTR [ebx+0x5000000],dl
300038b1:	0c 00                	or     al,0x0
300038b3:	30 29                	xor    BYTE PTR [ecx],ch
300038b5:	00 00                	add    BYTE PTR [eax],al
300038b7:	00 12                	add    BYTE PTR [edx],dl
300038b9:	00 01                	add    BYTE PTR [ecx],al
300038bb:	00 51 00             	add    BYTE PTR [ecx+0x0],dl
300038be:	00 00                	add    BYTE PTR [eax],al
300038c0:	00 00                	add    BYTE PTR [eax],al
300038c2:	13 00                	adc    eax,DWORD PTR [eax]
300038c4:	00 00                	add    BYTE PTR [eax],al
300038c6:	00 00                	add    BYTE PTR [eax],al
300038c8:	10 00                	adc    BYTE PTR [eax],al
300038ca:	01 00                	add    DWORD PTR [eax],eax
300038cc:	54                   	push   esp
300038cd:	01 00                	add    DWORD PTR [eax],eax
300038cf:	00 ae 21 00 30 41    	add    BYTE PTR [esi+0x41300021],ch
300038d5:	00 00                	add    BYTE PTR [eax],al
300038d7:	00 12                	add    BYTE PTR [edx],dl
300038d9:	00 01                	add    BYTE PTR [ecx],al
300038db:	00 c5                	add    ch,al
300038dd:	00 00                	add    BYTE PTR [eax],al
300038df:	00 7b 14             	add    BYTE PTR [ebx+0x14],bh
300038e2:	00 30                	add    BYTE PTR [eax],dh
300038e4:	20 00                	and    BYTE PTR [eax],al
300038e6:	00 00                	add    BYTE PTR [eax],al
300038e8:	12 00                	adc    al,BYTE PTR [eax]
300038ea:	01 00                	add    DWORD PTR [eax],eax
300038ec:	33 01                	xor    eax,DWORD PTR [ecx]
300038ee:	00 00                	add    BYTE PTR [eax],al
300038f0:	86 1d 00 30 20 00    	xchg   BYTE PTR ds:0x203000,bl
300038f6:	00 00                	add    BYTE PTR [eax],al
300038f8:	12 00                	adc    al,BYTE PTR [eax]
300038fa:	01 00                	add    DWORD PTR [eax],eax
300038fc:	61                   	popa   
300038fd:	00 00                	add    BYTE PTR [eax],al
300038ff:	00 86 07 00 30 43    	add    BYTE PTR [esi+0x43300007],al
30003905:	00 00                	add    BYTE PTR [eax],al
30003907:	00 12                	add    BYTE PTR [edx],dl
30003909:	00 01                	add    BYTE PTR [ecx],al
3000390b:	00 e6                	add    dh,ah
3000390d:	00 00                	add    BYTE PTR [eax],al
3000390f:	00 4c 16 00          	add    BYTE PTR [esi+edx*1+0x0],cl
30003913:	30 5e 00             	xor    BYTE PTR [esi+0x0],bl
30003916:	00 00                	add    BYTE PTR [eax],al
30003918:	12 00                	adc    al,BYTE PTR [eax]
3000391a:	01 00                	add    DWORD PTR [eax],eax
3000391c:	ab                   	stos   DWORD PTR es:[edi],eax
3000391d:	00 00                	add    BYTE PTR [eax],al
3000391f:	00 87 0e 00 30 20    	add    BYTE PTR [edi+0x2030000e],al
30003925:	00 00                	add    BYTE PTR [eax],al
30003927:	00 12                	add    BYTE PTR [edx],dl
30003929:	00 01                	add    BYTE PTR [ecx],al
3000392b:	00 08                	add    BYTE PTR [eax],cl
3000392d:	00 00                	add    BYTE PTR [eax],al
3000392f:	00 70 00             	add    BYTE PTR [eax+0x0],dh
30003932:	00 30                	add    BYTE PTR [eax],dh
30003934:	55                   	push   ebp
30003935:	00 00                	add    BYTE PTR [eax],al
30003937:	00 12                	add    BYTE PTR [edx],dl
30003939:	00 01                	add    BYTE PTR [ecx],al
3000393b:	00 f4                	add    ah,dh
3000393d:	00 00                	add    BYTE PTR [eax],al
3000393f:	00 2c 17             	add    BYTE PTR [edi+edx*1],ch
30003942:	00 30                	add    BYTE PTR [eax],dh
30003944:	47                   	inc    edi
30003945:	00 00                	add    BYTE PTR [eax],al
30003947:	00 12                	add    BYTE PTR [edx],dl
30003949:	00 01                	add    BYTE PTR [ecx],al
3000394b:	00 86 00 00 00 dc    	add    BYTE PTR [esi-0x24000000],al
30003951:	0b 00                	or     eax,DWORD PTR [eax]
30003953:	30 29                	xor    BYTE PTR [ecx],ch
30003955:	00 00                	add    BYTE PTR [eax],al
30003957:	00 12                	add    BYTE PTR [edx],dl
30003959:	00 01                	add    BYTE PTR [ecx],al
3000395b:	00 5e 01             	add    BYTE PTR [esi+0x1],bl
3000395e:	00 00                	add    BYTE PTR [eax],al
30003960:	24 22                	and    al,0x22
30003962:	00 30                	add    BYTE PTR [eax],dh
30003964:	1d 00 00 00 12       	sbb    eax,0x12000000
30003969:	00 01                	add    BYTE PTR [ecx],al
3000396b:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
3000396e:	00 00                	add    BYTE PTR [eax],al
30003970:	82                   	(bad)  
30003971:	2a 00                	sub    al,BYTE PTR [eax]
30003973:	30 6d 00             	xor    BYTE PTR [ebp+0x0],ch
30003976:	00 00                	add    BYTE PTR [eax],al
30003978:	12 00                	adc    al,BYTE PTR [eax]
3000397a:	01 00                	add    DWORD PTR [eax],eax
3000397c:	1c 00                	sbb    al,0x0
3000397e:	00 00                	add    BYTE PTR [eax],al
30003980:	a1 03 00 30 5c       	mov    eax,ds:0x5c300003
30003985:	00 00                	add    BYTE PTR [eax],al
30003987:	00 12                	add    BYTE PTR [edx],dl
30003989:	00 01                	add    BYTE PTR [ecx],al
3000398b:	00 05 01 00 00 00    	add    BYTE PTR ds:0x1,al
30003991:	18 00                	sbb    BYTE PTR [eax],al
30003993:	30 31                	xor    BYTE PTR [ecx],dh
30003995:	00 00                	add    BYTE PTR [eax],al
30003997:	00 12                	add    BYTE PTR [edx],dl
30003999:	00 01                	add    BYTE PTR [ecx],al
3000399b:	00 2f                	add    BYTE PTR [edi],ch
3000399d:	00 00                	add    BYTE PTR [eax],al
3000399f:	00 6c 06 00          	add    BYTE PTR [esi+eax*1+0x0],ch
300039a3:	30 2d 00 00 00 12    	xor    BYTE PTR ds:0x12000000,ch
300039a9:	00 01                	add    BYTE PTR [ecx],al
300039ab:	00 9d 00 00 00 1f    	add    BYTE PTR [ebp+0x1f000000],bl
300039b1:	0e                   	push   cs
300039b2:	00 30                	add    BYTE PTR [eax],dh
300039b4:	4c                   	dec    esp
300039b5:	00 00                	add    BYTE PTR [eax],al
300039b7:	00 12                	add    BYTE PTR [edx],dl
300039b9:	00 01                	add    BYTE PTR [ecx],al
300039bb:	00 01                	add    BYTE PTR [ecx],al
300039bd:	00 00                	add    BYTE PTR [eax],al
300039bf:	00 00                	add    BYTE PTR [eax],al
300039c1:	00 00                	add    BYTE PTR [eax],al
300039c3:	30 38                	xor    BYTE PTR [eax],bh
300039c5:	00 00                	add    BYTE PTR [eax],al
300039c7:	00 12                	add    BYTE PTR [edx],dl
300039c9:	00 01                	add    BYTE PTR [ecx],al
300039cb:	00 24 01             	add    BYTE PTR [ecx+eax*1],ah
300039ce:	00 00                	add    BYTE PTR [eax],al
300039d0:	34 1b                	xor    al,0x1b
300039d2:	00 30                	add    BYTE PTR [eax],dh
300039d4:	1d 00 00 00 12       	sbb    eax,0x12000000
300039d9:	00 01                	add    BYTE PTR [ecx],al
300039db:	00 34 00             	add    BYTE PTR [eax+eax*1],dh
300039de:	00 00                	add    BYTE PTR [eax],al
300039e0:	99                   	cdq    
300039e1:	06                   	push   es
300039e2:	00 30                	add    BYTE PTR [eax],dh
300039e4:	2a 00                	sub    al,BYTE PTR [eax]
300039e6:	00 00                	add    BYTE PTR [eax],al
300039e8:	12 00                	adc    al,BYTE PTR [eax]
300039ea:	01 00                	add    DWORD PTR [eax],eax
300039ec:	b9 00 00 00 c8       	mov    ecx,0xc8000000
300039f1:	11 00                	adc    DWORD PTR [eax],eax
300039f3:	30 1b                	xor    BYTE PTR [ebx],bl
300039f5:	00 00                	add    BYTE PTR [eax],al
300039f7:	00 12                	add    BYTE PTR [edx],dl
300039f9:	00 01                	add    BYTE PTR [ecx],al
	...

Disassembly of section .dynstr:

300039fc <.dynstr>:
300039fc:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
300039ff:	72 63                	jb     30003a64 <__x86.get_pc_thunk.cx+0xf40>
30003a01:	68 72 00 73 74       	push   0x74730072
30003a06:	72 63                	jb     30003a6b <__x86.get_pc_thunk.cx+0xf47>
30003a08:	73 70                	jae    30003a7a <__x86.get_pc_thunk.cx+0xf56>
30003a0a:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003a0b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003a0e:	72 74                	jb     30003a84 <__x86.get_pc_thunk.cx+0xf60>
30003a10:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003a11:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
30003a14:	74 6f                	je     30003a85 <__x86.get_pc_thunk.cx+0xf61>
30003a16:	61                   	popa   
30003a17:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
30003a1a:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003a1b:	69 00 67 65 74 65    	imul   eax,DWORD PTR [eax],0x65746567
30003a21:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003a22:	76 00                	jbe    30003a24 <__x86.get_pc_thunk.cx+0xf00>
30003a24:	73 65                	jae    30003a8b <__x86.get_pc_thunk.cx+0xf67>
30003a26:	74 65                	je     30003a8d <__x86.get_pc_thunk.cx+0xf69>
30003a28:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003a29:	76 00                	jbe    30003a2b <__x86.get_pc_thunk.cx+0xf07>
30003a2b:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003a2c:	70 65                	jo     30003a93 <__x86.get_pc_thunk.cx+0xf6f>
30003a2e:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003a2f:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
30003a32:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003a33:	73 65                	jae    30003a9a <__x86.get_pc_thunk.cx+0xf76>
30003a35:	00 72 65             	add    BYTE PTR [edx+0x65],dh
30003a38:	61                   	popa   
30003a39:	64 00 77 72          	add    BYTE PTR fs:[edi+0x72],dh
30003a3d:	69 74 65 00 67 65 74 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x64746567
30003a44:	64 
30003a45:	69 72 00 70 75 74 73 	imul   esi,DWORD PTR [edx+0x0],0x73747570
30003a4c:	00 73 79             	add    BYTE PTR [ebx+0x79],dh
30003a4f:	73 45                	jae    30003a96 <__x86.get_pc_thunk.cx+0xf72>
30003a51:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003a52:	74 65                	je     30003ab9 <__x86.get_pc_thunk.cx+0xf95>
30003a54:	72 5f                	jb     30003ab5 <__x86.get_pc_thunk.cx+0xf91>
30003a56:	56                   	push   esi
30003a57:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
30003a5c:	00 70 75             	add    BYTE PTR [eax+0x75],dh
30003a5f:	74 63                	je     30003ac4 <__x86.get_pc_thunk.cx+0xfa0>
30003a61:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30003a64:	74 63                	je     30003ac9 <__x86.get_pc_thunk.cx+0xfa5>
30003a66:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30003a69:	74 73                	je     30003ade <__x86.get_pc_thunk.cx+0xfba>
30003a6b:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
30003a6f:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
30003a72:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003a73:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
30003a7a:	74 
30003a7b:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
30003a7e:	65                   	gs
30003a7f:	65                   	gs
30003a80:	70 00                	jo     30003a82 <__x86.get_pc_thunk.cx+0xf5e>
30003a82:	6d                   	ins    DWORD PTR es:[edi],dx
30003a83:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003a84:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
30003a8b:	6e 
30003a8c:	61                   	popa   
30003a8d:	6c                   	ins    BYTE PTR es:[edi],dx
30003a8e:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
30003a91:	72 6b                	jb     30003afe <__x86.get_pc_thunk.cx+0xfda>
30003a93:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
30003a96:	65 63 00             	arpl   WORD PTR gs:[eax],ax
30003a99:	65                   	gs
30003a9a:	78 65                	js     30003b01 <__x86.get_pc_thunk.cx+0xfdd>
30003a9c:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
30003a9f:	77 61                	ja     30003b02 <__x86.get_pc_thunk.cx+0xfde>
30003aa1:	69 74 70 69 64 00 67 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65670064
30003aa8:	65 
30003aa9:	74 63                	je     30003b0e <__x86.get_pc_thunk.cx+0xfea>
30003aab:	77 64                	ja     30003b11 <__x86.get_pc_thunk.cx+0xfed>
30003aad:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
30003ab0:	6c                   	ins    BYTE PTR es:[edi],dx
30003ab1:	6c                   	ins    BYTE PTR es:[edi],dx
30003ab2:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003ab3:	63 00                	arpl   WORD PTR [eax],ax
30003ab5:	66                   	data16
30003ab6:	72 65                	jb     30003b1d <__x86.get_pc_thunk.cx+0xff9>
30003ab8:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
30003abc:	6d                   	ins    DWORD PTR es:[edi],dx
30003abd:	63 70 79             	arpl   WORD PTR [eax+0x79],si
30003ac0:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
30003ac3:	6d                   	ins    DWORD PTR es:[edi],dx
30003ac4:	73 65                	jae    30003b2b <__x86.get_pc_thunk.cx+0x1007>
30003ac6:	74 00                	je     30003ac8 <__x86.get_pc_thunk.cx+0xfa4>
30003ac8:	6d                   	ins    DWORD PTR es:[edi],dx
30003ac9:	6d                   	ins    DWORD PTR es:[edi],dx
30003aca:	61                   	popa   
30003acb:	70 00                	jo     30003acd <__x86.get_pc_thunk.cx+0xfa9>
30003acd:	70 69                	jo     30003b38 <__x86.get_pc_thunk.cx+0x1014>
30003acf:	70 65                	jo     30003b36 <__x86.get_pc_thunk.cx+0x1012>
30003ad1:	00 72 65             	add    BYTE PTR [edx+0x65],dh
30003ad4:	73 65                	jae    30003b3b <__x86.get_pc_thunk.cx+0x1017>
30003ad6:	74 52                	je     30003b2a <__x86.get_pc_thunk.cx+0x1006>
30003ad8:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003ad9:	77 00                	ja     30003adb <__x86.get_pc_thunk.cx+0xfb7>
30003adb:	73 74                	jae    30003b51 <__x86.get_pc_thunk.cx+0x102d>
30003add:	72 63                	jb     30003b42 <__x86.get_pc_thunk.cx+0x101e>
30003adf:	61                   	popa   
30003ae0:	74 00                	je     30003ae2 <__x86.get_pc_thunk.cx+0xfbe>
30003ae2:	73 74                	jae    30003b58 <__x86.get_pc_thunk.cx+0x1034>
30003ae4:	72 63                	jb     30003b49 <__x86.get_pc_thunk.cx+0x1025>
30003ae6:	6d                   	ins    DWORD PTR es:[edi],dx
30003ae7:	70 00                	jo     30003ae9 <__x86.get_pc_thunk.cx+0xfc5>
30003ae9:	73 74                	jae    30003b5f <__x86.get_pc_thunk.cx+0x103b>
30003aeb:	72 63                	jb     30003b50 <__x86.get_pc_thunk.cx+0x102c>
30003aed:	70 79                	jo     30003b68 <__x86.get_pc_thunk.cx+0x1044>
30003aef:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003af2:	72 63                	jb     30003b57 <__x86.get_pc_thunk.cx+0x1033>
30003af4:	70 79                	jo     30003b6f <__x86.get_pc_thunk.cx+0x104b>
30003af6:	63 00                	arpl   WORD PTR [eax],ax
30003af8:	73 74                	jae    30003b6e <__x86.get_pc_thunk.cx+0x104a>
30003afa:	72 69                	jb     30003b65 <__x86.get_pc_thunk.cx+0x1041>
30003afc:	73 6e                	jae    30003b6c <__x86.get_pc_thunk.cx+0x1048>
30003afe:	75 6d                	jne    30003b6d <__x86.get_pc_thunk.cx+0x1049>
30003b00:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003b03:	72 6c                	jb     30003b71 <__x86.get_pc_thunk.cx+0x104d>
30003b05:	65 6e                	outs   dx,BYTE PTR gs:[esi]
30003b07:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003b0a:	72 6e                	jb     30003b7a <__x86.get_pc_thunk.cx+0x1056>
30003b0c:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
30003b0f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003b12:	72 6e                	jb     30003b82 <__x86.get_pc_thunk.cx+0x105e>
30003b14:	63 70 79             	arpl   WORD PTR [eax+0x79],si
30003b17:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003b1a:	72 74                	jb     30003b90 <__x86.get_pc_thunk.cx+0x106c>
30003b1c:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003b1d:	75 6c                	jne    30003b8b <__x86.get_pc_thunk.cx+0x1067>
30003b1f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003b22:	72 6c                	jb     30003b90 <__x86.get_pc_thunk.cx+0x106c>
30003b24:	65                   	gs
30003b25:	66                   	data16
30003b26:	74 00                	je     30003b28 <__x86.get_pc_thunk.cx+0x1004>
30003b28:	73 74                	jae    30003b9e <__x86.get_pc_thunk.cx+0x107a>
30003b2a:	72 74                	jb     30003ba0 <__x86.get_pc_thunk.cx+0x107c>
30003b2c:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003b2d:	6c                   	ins    BYTE PTR es:[edi],dx
30003b2e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003b31:	72 74                	jb     30003ba7 <__x86.get_pc_thunk.cx+0x1083>
30003b33:	72 69                	jb     30003b9e <__x86.get_pc_thunk.cx+0x107a>
30003b35:	6d                   	ins    DWORD PTR es:[edi],dx
30003b36:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003b39:	72 73                	jb     30003bae <__x86.get_pc_thunk.cx+0x108a>
30003b3b:	74 72                	je     30003baf <__x86.get_pc_thunk.cx+0x108b>
30003b3d:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30003b40:	74 74                	je     30003bb6 <__x86.get_pc_thunk.cx+0x1092>
30003b42:	69 63 6b 73 00 67 6d 	imul   esp,DWORD PTR [ebx+0x6b],0x6d670073
30003b49:	74 69                	je     30003bb4 <__x86.get_pc_thunk.cx+0x1090>
30003b4b:	6d                   	ins    DWORD PTR es:[edi],dx
30003b4c:	65                   	gs
30003b4d:	5f                   	pop    edi
30003b4e:	72 00                	jb     30003b50 <__x86.get_pc_thunk.cx+0x102c>
30003b50:	6c                   	ins    BYTE PTR es:[edi],dx
30003b51:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003b52:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
30003b55:	74 69                	je     30003bc0 <__x86.get_pc_thunk.cx+0x109c>
30003b57:	6d                   	ins    DWORD PTR es:[edi],dx
30003b58:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
30003b5d:	61                   	popa   
30003b5e:	6c                   	ins    BYTE PTR es:[edi],dx
30003b5f:	74 69                	je     30003bca <__x86.get_pc_thunk.cx+0x10a6>
30003b61:	6d                   	ins    DWORD PTR es:[edi],dx
30003b62:	65                   	gs
30003b63:	5f                   	pop    edi
30003b64:	72 00                	jb     30003b66 <__x86.get_pc_thunk.cx+0x1042>
30003b66:	6d                   	ins    DWORD PTR es:[edi],dx
30003b67:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
30003b6c:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30003b6f:	74 74                	je     30003be5 <__x86.get_pc_thunk.cx+0x10c1>
30003b71:	69                   	.byte 0x69
30003b72:	6d                   	ins    DWORD PTR es:[edi],dx
30003b73:	65                   	gs
	...

Disassembly of section .hash:

30003b78 <.hash>:
30003b78:	25 00 00 00 35       	and    eax,0x35000000
30003b7d:	00 00                	add    BYTE PTR [eax],al
30003b7f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003b82:	00 00                	add    BYTE PTR [eax],al
30003b84:	26 00 00             	add    BYTE PTR es:[eax],al
30003b87:	00 25 00 00 00 27    	add    BYTE PTR ds:0x27000000,ah
30003b8d:	00 00                	add    BYTE PTR [eax],al
30003b8f:	00 22                	add    BYTE PTR [edx],ah
30003b91:	00 00                	add    BYTE PTR [eax],al
30003b93:	00 30                	add    BYTE PTR [eax],dh
	...
30003b9d:	00 00                	add    BYTE PTR [eax],al
30003b9f:	00 1e                	add    BYTE PTR [esi],bl
	...
30003ba9:	00 00                	add    BYTE PTR [eax],al
30003bab:	00 16                	add    BYTE PTR [esi],dl
30003bad:	00 00                	add    BYTE PTR [eax],al
30003baf:	00 18                	add    BYTE PTR [eax],bl
30003bb1:	00 00                	add    BYTE PTR [eax],al
30003bb3:	00 13                	add    BYTE PTR [ebx],dl
30003bb5:	00 00                	add    BYTE PTR [eax],al
30003bb7:	00 1f                	add    BYTE PTR [edi],bl
30003bb9:	00 00                	add    BYTE PTR [eax],al
30003bbb:	00 11                	add    BYTE PTR [ecx],dl
30003bbd:	00 00                	add    BYTE PTR [eax],al
30003bbf:	00 33                	add    BYTE PTR [ebx],dh
30003bc1:	00 00                	add    BYTE PTR [eax],al
30003bc3:	00 29                	add    BYTE PTR [ecx],ch
30003bc5:	00 00                	add    BYTE PTR [eax],al
30003bc7:	00 28                	add    BYTE PTR [eax],ch
30003bc9:	00 00                	add    BYTE PTR [eax],al
30003bcb:	00 06                	add    BYTE PTR [esi],al
30003bcd:	00 00                	add    BYTE PTR [eax],al
30003bcf:	00 03                	add    BYTE PTR [ebx],al
30003bd1:	00 00                	add    BYTE PTR [eax],al
30003bd3:	00 2f                	add    BYTE PTR [edi],ch
30003bd5:	00 00                	add    BYTE PTR [eax],al
30003bd7:	00 2d 00 00 00 0b    	add    BYTE PTR ds:0xb000000,ch
30003bdd:	00 00                	add    BYTE PTR [eax],al
30003bdf:	00 32                	add    BYTE PTR [edx],dh
	...
30003be9:	00 00                	add    BYTE PTR [eax],al
30003beb:	00 0f                	add    BYTE PTR [edi],cl
30003bed:	00 00                	add    BYTE PTR [eax],al
30003bef:	00 12                	add    BYTE PTR [edx],dl
30003bf1:	00 00                	add    BYTE PTR [eax],al
30003bf3:	00 2e                	add    BYTE PTR [esi],ch
30003bf5:	00 00                	add    BYTE PTR [eax],al
30003bf7:	00 1a                	add    BYTE PTR [edx],bl
30003bf9:	00 00                	add    BYTE PTR [eax],al
30003bfb:	00 34 00             	add    BYTE PTR [eax+eax*1],dh
30003bfe:	00 00                	add    BYTE PTR [eax],al
30003c00:	23 00                	and    eax,DWORD PTR [eax]
30003c02:	00 00                	add    BYTE PTR [eax],al
30003c04:	00 00                	add    BYTE PTR [eax],al
30003c06:	00 00                	add    BYTE PTR [eax],al
30003c08:	31 00                	xor    DWORD PTR [eax],eax
30003c0a:	00 00                	add    BYTE PTR [eax],al
30003c0c:	1d 00 00 00 00       	sbb    eax,0x0
	...
30003c25:	00 00                	add    BYTE PTR [eax],al
30003c27:	00 02                	add    BYTE PTR [edx],al
30003c29:	00 00                	add    BYTE PTR [eax],al
30003c2b:	00 00                	add    BYTE PTR [eax],al
30003c2d:	00 00                	add    BYTE PTR [eax],al
30003c2f:	00 05 00 00 00 00    	add    BYTE PTR ds:0x0,al
	...
30003c45:	00 00                	add    BYTE PTR [eax],al
30003c47:	00 07                	add    BYTE PTR [edi],al
	...
30003c51:	00 00                	add    BYTE PTR [eax],al
30003c53:	00 0d 00 00 00 00    	add    BYTE PTR ds:0x0,cl
	...
30003c7d:	00 00                	add    BYTE PTR [eax],al
30003c7f:	00 01                	add    BYTE PTR [ecx],al
30003c81:	00 00                	add    BYTE PTR [eax],al
30003c83:	00 0e                	add    BYTE PTR [esi],cl
30003c85:	00 00                	add    BYTE PTR [eax],al
30003c87:	00 15 00 00 00 00    	add    BYTE PTR ds:0x0,dl
30003c8d:	00 00                	add    BYTE PTR [eax],al
30003c8f:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
30003c92:	00 00                	add    BYTE PTR [eax],al
30003c94:	00 00                	add    BYTE PTR [eax],al
30003c96:	00 00                	add    BYTE PTR [eax],al
30003c98:	19 00                	sbb    DWORD PTR [eax],eax
30003c9a:	00 00                	add    BYTE PTR [eax],al
30003c9c:	21 00                	and    DWORD PTR [eax],eax
30003c9e:	00 00                	add    BYTE PTR [eax],al
30003ca0:	20 00                	and    BYTE PTR [eax],al
30003ca2:	00 00                	add    BYTE PTR [eax],al
30003ca4:	17                   	pop    ss
30003ca5:	00 00                	add    BYTE PTR [eax],al
30003ca7:	00 09                	add    BYTE PTR [ecx],cl
30003ca9:	00 00                	add    BYTE PTR [eax],al
30003cab:	00 08                	add    BYTE PTR [eax],cl
30003cad:	00 00                	add    BYTE PTR [eax],al
30003caf:	00 00                	add    BYTE PTR [eax],al
30003cb1:	00 00                	add    BYTE PTR [eax],al
30003cb3:	00 0a                	add    BYTE PTR [edx],cl
30003cb5:	00 00                	add    BYTE PTR [eax],al
30003cb7:	00 10                	add    BYTE PTR [eax],dl
30003cb9:	00 00                	add    BYTE PTR [eax],al
30003cbb:	00 00                	add    BYTE PTR [eax],al
30003cbd:	00 00                	add    BYTE PTR [eax],al
30003cbf:	00 1b                	add    BYTE PTR [ebx],bl
30003cc1:	00 00                	add    BYTE PTR [eax],al
30003cc3:	00 00                	add    BYTE PTR [eax],al
30003cc5:	00 00                	add    BYTE PTR [eax],al
30003cc7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003cca:	00 00                	add    BYTE PTR [eax],al
30003ccc:	00 00                	add    BYTE PTR [eax],al
30003cce:	00 00                	add    BYTE PTR [eax],al
30003cd0:	2b 00                	sub    eax,DWORD PTR [eax]
30003cd2:	00 00                	add    BYTE PTR [eax],al
30003cd4:	00 00                	add    BYTE PTR [eax],al
30003cd6:	00 00                	add    BYTE PTR [eax],al
30003cd8:	2c 00                	sub    al,0x0
30003cda:	00 00                	add    BYTE PTR [eax],al
30003cdc:	04 00                	add    al,0x0
30003cde:	00 00                	add    BYTE PTR [eax],al
30003ce0:	14 00                	adc    al,0x0
30003ce2:	00 00                	add    BYTE PTR [eax],al
30003ce4:	2a 00                	sub    al,BYTE PTR [eax]
	...

Disassembly of section .eh_frame:

30003ce8 <.eh_frame>:
30003ce8:	14 00                	adc    al,0x0
30003cea:	00 00                	add    BYTE PTR [eax],al
30003cec:	00 00                	add    BYTE PTR [eax],al
30003cee:	00 00                	add    BYTE PTR [eax],al
30003cf0:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
30003cf3:	00 01                	add    BYTE PTR [ecx],al
30003cf5:	7c 08                	jl     30003cff <__x86.get_pc_thunk.cx+0x11db>
30003cf7:	01 1b                	add    DWORD PTR [ebx],ebx
30003cf9:	0c 04                	or     al,0x4
30003cfb:	04 88                	add    al,0x88
30003cfd:	01 00                	add    DWORD PTR [eax],eax
30003cff:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003d02:	00 00                	add    BYTE PTR [eax],al
30003d04:	1c 00                	sbb    al,0x0
30003d06:	00 00                	add    BYTE PTR [eax],al
30003d08:	f8                   	clc    
30003d09:	ed                   	in     eax,dx
30003d0a:	ff                   	(bad)  
30003d0b:	ff 20                	jmp    DWORD PTR [eax]
30003d0d:	00 00                	add    BYTE PTR [eax],al
30003d0f:	00 00                	add    BYTE PTR [eax],al
30003d11:	0e                   	push   cs
30003d12:	08 46 0e             	or     BYTE PTR [esi+0xe],al
30003d15:	0c 4a                	or     al,0x4a
30003d17:	0f 0b                	ud2    
30003d19:	74 04                	je     30003d1f <__x86.get_pc_thunk.cx+0x11fb>
30003d1b:	78 00                	js     30003d1d <__x86.get_pc_thunk.cx+0x11f9>
30003d1d:	3f                   	aas    
30003d1e:	1a 3b                	sbb    bh,BYTE PTR [ebx]
30003d20:	2a 32                	sub    dh,BYTE PTR [edx]
30003d22:	24 22                	and    al,0x22
30003d24:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame_hdr:

30003d28 <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
30003d28:	01 1b                	add    DWORD PTR [ebx],ebx
30003d2a:	03 3b                	add    edi,DWORD PTR [ebx]
30003d2c:	fc                   	cld    
30003d2d:	ed                   	in     eax,dx
30003d2e:	ff                   	(bad)  
30003d2f:	ff 54 00 00          	call   DWORD PTR [eax+eax*1+0x0]
30003d33:	00 d8                	add    al,bl
30003d35:	c2 ff ff             	ret    0xffff
30003d38:	18 ee                	sbb    dh,ch
30003d3a:	ff                   	(bad)  
30003d3b:	ff 10                	call   DWORD PTR [eax]
30003d3d:	c3                   	ret    
30003d3e:	ff                   	(bad)  
30003d3f:	ff                   	(bad)  
30003d40:	38 ee                	cmp    dh,ch
30003d42:	ff                   	(bad)  
30003d43:	ff 48 c3             	dec    DWORD PTR [eax-0x3d]
30003d46:	ff                   	(bad)  
30003d47:	ff 6c ee ff          	jmp    FWORD PTR [esi+ebp*8-0x1]
30003d4b:	ff 9d c3 ff ff 94    	call   FWORD PTR [ebp-0x6b00003d]
30003d51:	ee                   	out    dx,al
30003d52:	ff                   	(bad)  
30003d53:	ff f4                	push   esp
30003d55:	c3                   	ret    
30003d56:	ff                   	(bad)  
30003d57:	ff                   	(bad)  
30003d58:	bc ee ff ff 8c       	mov    esp,0x8cffffee
30003d5d:	c4                   	(bad)  
30003d5e:	ff                   	(bad)  
30003d5f:	ff                   	(bad)  
30003d60:	f8                   	clc    
30003d61:	ee                   	out    dx,al
30003d62:	ff                   	(bad)  
30003d63:	ff 03                	inc    DWORD PTR [ebx]
30003d65:	c5 ff ff             	(bad)  
30003d68:	1c ef                	sbb    al,0xef
30003d6a:	ff                   	(bad)  
30003d6b:	ff                   	(bad)  
30003d6c:	be c5 ff ff 40       	mov    esi,0x40ffffc5
30003d71:	ef                   	out    dx,eax
30003d72:	ff                   	(bad)  
30003d73:	ff                   	(bad)  
30003d74:	79 c6                	jns    30003d3c <__GNU_EH_FRAME_HDR+0x14>
30003d76:	ff                   	(bad)  
30003d77:	ff 64 ef ff          	jmp    DWORD PTR [edi+ebp*8-0x1]
30003d7b:	ff d8                	call   <internal disassembler error>
30003d7d:	c6                   	(bad)  
30003d7e:	ff                   	(bad)  
30003d7f:	ff 84 ef ff ff 82 c7 	inc    DWORD PTR [edi+ebp*8-0x387d0001]
30003d86:	ff                   	(bad)  
30003d87:	ff a8 ef ff ff 44    	jmp    FWORD PTR [eax+0x44ffffef]
30003d8d:	c9                   	leave  
30003d8e:	ff                   	(bad)  
30003d8f:	ff cc                	dec    esp
30003d91:	ef                   	out    dx,eax
30003d92:	ff                   	(bad)  
30003d93:	ff 71 c9             	push   DWORD PTR [ecx-0x37]
30003d96:	ff                   	(bad)  
30003d97:	ff f0                	push   eax
30003d99:	ef                   	out    dx,eax
30003d9a:	ff                   	(bad)  
30003d9b:	ff 9b c9 ff ff 14    	call   FWORD PTR [ebx+0x14ffffc9]
30003da1:	f0 ff                	lock (bad) 
30003da3:	ff d0                	call   eax
30003da5:	c9                   	leave  
30003da6:	ff                   	(bad)  
30003da7:	ff                   	(bad)  
30003da8:	3c f0                	cmp    al,0xf0
30003daa:	ff                   	(bad)  
30003dab:	ff 05 ca ff ff 64    	inc    DWORD PTR ds:0x64ffffca
30003db1:	f0 ff                	lock (bad) 
30003db3:	ff                   	(bad)  
30003db4:	38 ca                	cmp    dl,cl
30003db6:	ff                   	(bad)  
30003db7:	ff 88 f0 ff ff 5e    	dec    DWORD PTR [eax+0x5efffff0]
30003dbd:	ca ff ff             	retf   0xffff
30003dc0:	ac                   	lods   al,BYTE PTR ds:[esi]
30003dc1:	f0 ff                	lock (bad) 
30003dc3:	ff a1 ca ff ff d0    	jmp    DWORD PTR [ecx-0x2f000036]
30003dc9:	f0 ff                	lock (bad) 
30003dcb:	ff d0                	call   eax
30003dcd:	ca ff ff             	retf   0xffff
30003dd0:	f4                   	hlt    
30003dd1:	f0 ff                	lock (bad) 
30003dd3:	ff 8c cb ff ff 18 f1 	dec    DWORD PTR [ebx+ecx*8-0xee70001]
30003dda:	ff                   	(bad)  
30003ddb:	ff c6                	inc    esi
30003ddd:	cb                   	retf   
30003dde:	ff                   	(bad)  
30003ddf:	ff 40 f1             	inc    DWORD PTR [eax-0xf]
30003de2:	ff                   	(bad)  
30003de3:	ff 02                	inc    DWORD PTR [edx]
30003de5:	cc                   	int3   
30003de6:	ff                   	(bad)  
30003de7:	ff 68 f1             	jmp    FWORD PTR [eax-0xf]
30003dea:	ff                   	(bad)  
30003deb:	ff 40 cc             	inc    DWORD PTR [eax-0x34]
30003dee:	ff                   	(bad)  
30003def:	ff 90 f1 ff ff 80    	call   DWORD PTR [eax-0x7f00000f]
30003df5:	cc                   	int3   
30003df6:	ff                   	(bad)  
30003df7:	ff                   	(bad)  
30003df8:	b8 f1 ff ff c2       	mov    eax,0xc2fffff1
30003dfd:	cc                   	int3   
30003dfe:	ff                   	(bad)  
30003dff:	ff e0                	jmp    eax
30003e01:	f1                   	icebp  
30003e02:	ff                   	(bad)  
30003e03:	ff 67 cd             	jmp    DWORD PTR [edi-0x33]
30003e06:	ff                   	(bad)  
30003e07:	ff 04 f2             	inc    DWORD PTR [edx+esi*8]
30003e0a:	ff                   	(bad)  
30003e0b:	ff 86 cd ff ff 28    	inc    DWORD PTR [esi+0x28ffffcd]
30003e11:	f2 ff                	repnz (bad) 
30003e13:	ff                   	(bad)  
30003e14:	ba cd ff ff 48       	mov    edx,0x48ffffcd
30003e19:	f2 ff                	repnz (bad) 
30003e1b:	ff ee                	jmp    <internal disassembler error>
30003e1d:	cd ff                	int    0xff
30003e1f:	ff 68 f2             	jmp    FWORD PTR [eax-0xe]
30003e22:	ff                   	(bad)  
30003e23:	ff 25 ce ff ff 88    	jmp    DWORD PTR ds:0x88ffffce
30003e29:	f2 ff                	repnz (bad) 
30003e2b:	ff 97 ce ff ff b0    	call   DWORD PTR [edi-0x4f000032]
30003e31:	f2 ff                	repnz (bad) 
30003e33:	ff b4 ce ff ff d0 f2 	push   DWORD PTR [esi+ecx*8-0xd2f0001]
30003e3a:	ff                   	(bad)  
30003e3b:	ff dd                	call   <internal disassembler error>
30003e3d:	ce                   	into   
30003e3e:	ff                   	(bad)  
30003e3f:	ff f0                	push   eax
30003e41:	f2 ff                	repnz (bad) 
30003e43:	ff 06                	inc    DWORD PTR [esi]
30003e45:	cf                   	iret   
30003e46:	ff                   	(bad)  
30003e47:	ff 10                	call   DWORD PTR [eax]
30003e49:	f3 ff                	repz (bad) 
30003e4b:	ff f7                	push   edi
30003e4d:	d0 ff                	sar    bh,1
30003e4f:	ff 34 f3             	push   DWORD PTR [ebx+esi*8]
30003e52:	ff                   	(bad)  
30003e53:	ff 43 d1             	inc    DWORD PTR [ebx-0x2f]
30003e56:	ff                   	(bad)  
30003e57:	ff 54 f3 ff          	call   DWORD PTR [ebx+esi*8-0x1]
30003e5b:	ff 5f d1             	call   FWORD PTR [edi-0x2f]
30003e5e:	ff                   	(bad)  
30003e5f:	ff 74 f3 ff          	push   DWORD PTR [ebx+esi*8-0x1]
30003e63:	ff 80 d1 ff ff 94    	inc    DWORD PTR [eax-0x6b00002f]
30003e69:	f3 ff                	repz (bad) 
30003e6b:	ff ec                	jmp    <internal disassembler error>
30003e6d:	d1 ff                	sar    edi,1
30003e6f:	ff                   	(bad)  
30003e70:	b8 f3 ff ff 73       	mov    eax,0x73fffff3
30003e75:	d2 ff                	sar    bh,cl
30003e77:	ff d8                	call   <internal disassembler error>
30003e79:	f3 ff                	repz (bad) 
30003e7b:	ff ac d2 ff ff f8 f3 	jmp    FWORD PTR [edx+edx*8-0xc070001]
30003e82:	ff                   	(bad)  
30003e83:	ff 80 d4 ff ff 1c    	inc    DWORD PTR [eax+0x1cffffd4]
30003e89:	f4                   	hlt    
30003e8a:	ff                   	(bad)  
30003e8b:	ff a0 d4 ff ff 3c    	jmp    DWORD PTR [eax+0x3cffffd4]
30003e91:	f4                   	hlt    
30003e92:	ff                   	(bad)  
30003e93:	ff                   	(bad)  
30003e94:	bb d4 ff ff 5c       	mov    ebx,0x5cffffd4
30003e99:	f4                   	hlt    
30003e9a:	ff                   	(bad)  
30003e9b:	ff f0                	push   eax
30003e9d:	d4 ff                	aam    0xff
30003e9f:	ff 80 f4 ff ff 8c    	inc    DWORD PTR [eax-0x7300000c]
30003ea5:	d6                   	(bad)  
30003ea6:	ff                   	(bad)  
30003ea7:	ff a0 f4 ff ff 53    	jmp    DWORD PTR [eax+0x53fffff4]
30003ead:	d7                   	xlat   BYTE PTR ds:[ebx]
30003eae:	ff                   	(bad)  
30003eaf:	ff c0                	inc    eax
30003eb1:	f4                   	hlt    
30003eb2:	ff                   	(bad)  
30003eb3:	ff 74 d7 ff          	push   DWORD PTR [edi+edx*8-0x1]
30003eb7:	ff e0                	jmp    eax
30003eb9:	f4                   	hlt    
30003eba:	ff                   	(bad)  
30003ebb:	ff 88 d7 ff ff 00    	dec    DWORD PTR [eax+0xffffd7]
30003ec1:	f5                   	cmc    
30003ec2:	ff                   	(bad)  
30003ec3:	ff b4 d7 ff ff 24 f5 	push   DWORD PTR [edi+edx*8-0xadb0001]
30003eca:	ff                   	(bad)  
30003ecb:	ff                   	(bad)  
30003ecc:	38 d8                	cmp    al,bl
30003ece:	ff                   	(bad)  
30003ecf:	ff 48 f5             	dec    DWORD PTR [eax-0xb]
30003ed2:	ff                   	(bad)  
30003ed3:	ff 76 d8             	push   DWORD PTR [esi-0x28]
30003ed6:	ff                   	(bad)  
30003ed7:	ff 6c f5 ff          	jmp    FWORD PTR [ebp+esi*8-0x1]
30003edb:	ff b4 d8 ff ff 90 f5 	push   DWORD PTR [eax+ebx*8-0xa6f0001]
30003ee2:	ff                   	(bad)  
30003ee3:	ff 24 d9             	jmp    DWORD PTR [ecx+ebx*8]
30003ee6:	ff                   	(bad)  
30003ee7:	ff b0 f5 ff ff 84    	push   DWORD PTR [eax-0x7b00000b]
30003eed:	d9 ff                	fcos   
30003eef:	ff d8                	call   <internal disassembler error>
30003ef1:	f5                   	cmc    
30003ef2:	ff                   	(bad)  
30003ef3:	ff c4                	inc    esp
30003ef5:	d9 ff                	fcos   
30003ef7:	ff                   	(bad)  
30003ef8:	f8                   	clc    
30003ef9:	f5                   	cmc    
30003efa:	ff                   	(bad)  
30003efb:	ff 04 da             	inc    DWORD PTR [edx+ebx*8]
30003efe:	ff                   	(bad)  
30003eff:	ff 18                	call   FWORD PTR [eax]
30003f01:	f6 ff                	idiv   bh
30003f03:	ff 4c da ff          	dec    DWORD PTR [edx+ebx*8-0x1]
30003f07:	ff                   	(bad)  
30003f08:	38 f6                	cmp    dh,dh
30003f0a:	ff                   	(bad)  
30003f0b:	ff                   	(bad)  
30003f0c:	7c da                	jl     30003ee8 <__GNU_EH_FRAME_HDR+0x1c0>
30003f0e:	ff                   	(bad)  
30003f0f:	ff 58 f6             	call   FWORD PTR [eax-0xa]
30003f12:	ff                   	(bad)  
30003f13:	ff d8                	call   <internal disassembler error>
30003f15:	da ff                	(bad)  
30003f17:	ff                   	(bad)  
30003f18:	78 f6                	js     30003f10 <__GNU_EH_FRAME_HDR+0x1e8>
30003f1a:	ff                   	(bad)  
30003f1b:	ff 09                	dec    DWORD PTR [ecx]
30003f1d:	db ff                	(bad)  
30003f1f:	ff 98 f6 ff ff 3c    	call   FWORD PTR [eax+0x3cfffff6]
30003f25:	db ff                	(bad)  
30003f27:	ff                   	(bad)  
30003f28:	b8 f6 ff ff a3       	mov    eax,0xa3fffff6
30003f2d:	db ff                	(bad)  
30003f2f:	ff d8                	call   <internal disassembler error>
30003f31:	f6 ff                	idiv   bh
30003f33:	ff 0c dc             	dec    DWORD PTR [esp+ebx*8]
30003f36:	ff                   	(bad)  
30003f37:	ff                   	(bad)  
30003f38:	f8                   	clc    
30003f39:	f6 ff                	idiv   bh
30003f3b:	ff 6c dc ff          	jmp    FWORD PTR [esp+ebx*8-0x1]
30003f3f:	ff 18                	call   FWORD PTR [eax]
30003f41:	f7 ff                	idiv   edi
30003f43:	ff 8c dc ff ff 38 f7 	dec    DWORD PTR [esp+ebx*8-0x8c70001]
30003f4a:	ff                   	(bad)  
30003f4b:	ff 0c de             	dec    DWORD PTR [esi+ebx*8]
30003f4e:	ff                   	(bad)  
30003f4f:	ff 68 f7             	jmp    FWORD PTR [eax-0x9]
30003f52:	ff                   	(bad)  
30003f53:	ff 2c de             	jmp    FWORD PTR [esi+ebx*8]
30003f56:	ff                   	(bad)  
30003f57:	ff 88 f7 ff ff c8    	dec    DWORD PTR [eax-0x37000009]
30003f5d:	df ff                	(bad)  
30003f5f:	ff                   	(bad)  
30003f60:	b8 f7 ff ff 5e       	mov    eax,0x5efffff7
30003f65:	e0 ff                	loopne 30003f66 <__GNU_EH_FRAME_HDR+0x23e>
30003f67:	ff dc                	call   <internal disassembler error>
30003f69:	f7 ff                	idiv   edi
30003f6b:	ff 80 e0 ff ff fc    	inc    DWORD PTR [eax-0x3000020]
30003f71:	f7 ff                	idiv   edi
30003f73:	ff ee                	jmp    <internal disassembler error>
30003f75:	e0 ff                	loopne 30003f76 <__GNU_EH_FRAME_HDR+0x24e>
30003f77:	ff 24 f8             	jmp    DWORD PTR [eax+edi*8]
30003f7a:	ff                   	(bad)  
30003f7b:	ff 0c e1             	dec    DWORD PTR [ecx+eiz*8]
30003f7e:	ff                   	(bad)  
30003f7f:	ff 44 f8 ff          	inc    DWORD PTR [eax+edi*8-0x1]
30003f83:	ff 50 e1             	call   DWORD PTR [eax-0x1f]
30003f86:	ff                   	(bad)  
30003f87:	ff 6c f8 ff          	jmp    FWORD PTR [eax+edi*8-0x1]
30003f8b:	ff 69 e4             	jmp    FWORD PTR [ecx-0x1c]
30003f8e:	ff                   	(bad)  
30003f8f:	ff 94 f8 ff ff 86 e4 	call   DWORD PTR [eax+edi*8-0x1b790001]
30003f96:	ff                   	(bad)  
30003f97:	ff b4 f8 ff ff c7 e4 	push   DWORD PTR [eax+edi*8-0x1b380001]
30003f9e:	ff                   	(bad)  
30003f9f:	ff d8                	call   <internal disassembler error>
30003fa1:	f8                   	clc    
30003fa2:	ff                   	(bad)  
30003fa3:	ff                   	(bad)  
30003fa4:	fc                   	cld    
30003fa5:	e4 ff                	in     al,0xff
30003fa7:	ff                   	(bad)  
30003fa8:	f8                   	clc    
30003fa9:	f8                   	clc    
30003faa:	ff                   	(bad)  
30003fab:	ff 19                	call   FWORD PTR [ecx]
30003fad:	e5 ff                	in     eax,0xff
30003faf:	ff 18                	call   FWORD PTR [eax]
30003fb1:	f9                   	stc    
30003fb2:	ff                   	(bad)  
30003fb3:	ff 5a ed             	call   FWORD PTR [edx-0x13]
30003fb6:	ff                   	(bad)  
30003fb7:	ff 48 f9             	dec    DWORD PTR [eax-0x7]
30003fba:	ff                   	(bad)  
30003fbb:	ff c7                	inc    edi
30003fbd:	ed                   	in     eax,dx
30003fbe:	ff                   	(bad)  
30003fbf:	ff 58 ee             	call   FWORD PTR [eax-0x12]
30003fc2:	ff                   	(bad)  
30003fc3:	ff                   	(bad)  
30003fc4:	f8                   	clc    
30003fc5:	ed                   	in     eax,dx
30003fc6:	ff                   	(bad)  
30003fc7:	ff e4                	jmp    esp
30003fc9:	ee                   	out    dx,al
30003fca:	ff                   	(bad)  
30003fcb:	ff                   	(bad)  
30003fcc:	fc                   	cld    
30003fcd:	ed                   	in     eax,dx
30003fce:	ff                   	(bad)  
30003fcf:	ff 70 f9             	push   DWORD PTR [eax-0x7]
30003fd2:	ff                   	(bad)  
30003fd3:	ff                   	.byte 0xff

Disassembly of section .rodata:

30003fe0 <_ytab-0x240>:
30003fe0:	3d 00 53 74 72       	cmp    eax,0x72745300
30003fe5:	65                   	gs
30003fe6:	61                   	popa   
30003fe7:	6d                   	ins    DWORD PTR es:[edi],dx
30003fe8:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
30003fee:	74 20                	je     30004010 <__GNU_EH_FRAME_HDR+0x2e8>
30003ff0:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
30003ff7:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003ff8:	74 65                	je     3000405f <__GNU_EH_FRAME_HDR+0x337>
30003ffa:	64 0a 00             	or     al,BYTE PTR fs:[eax]
30003ffd:	00 00                	add    BYTE PTR [eax],al
30003fff:	00 2a                	add    BYTE PTR [edx],ch
30004001:	2a 2a                	sub    ch,BYTE PTR [edx]
30004003:	6c                   	ins    BYTE PTR es:[edi],dx
30004004:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
3000400b:	74 20                	je     3000402d <__GNU_EH_FRAME_HDR+0x305>
3000400d:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
30004010:	6c                   	ins    BYTE PTR es:[edi],dx
30004011:	65 64 0a 2a          	gs or  ch,BYTE PTR fs:gs:[edx]
30004015:	2a 2a                	sub    ch,BYTE PTR [edx]
30004017:	00 2a                	add    BYTE PTR [edx],ch
30004019:	2a 2a                	sub    ch,BYTE PTR [edx]
3000401b:	6c                   	ins    BYTE PTR es:[edi],dx
3000401c:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
30004023:	74 20                	je     30004045 <__GNU_EH_FRAME_HDR+0x31d>
30004025:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
30004028:	70 6c                	jo     30004096 <__GNU_EH_FRAME_HDR+0x36e>
3000402a:	65                   	gs
3000402b:	74 65                	je     30004092 <__GNU_EH_FRAME_HDR+0x36a>
3000402d:	64 0a 00             	or     al,BYTE PTR fs:[eax]
30004030:	6c                   	ins    BYTE PTR es:[edi],dx
30004031:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
30004038:	74 20                	je     3000405a <__GNU_EH_FRAME_HDR+0x332>
3000403a:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
3000403d:	6c                   	ins    BYTE PTR es:[edi],dx
3000403e:	65 64 20 70 72       	gs and BYTE PTR fs:gs:[eax+0x72],dh
30004043:	65                   	gs
30004044:	76 69                	jbe    300040af <__GNU_EH_FRAME_HDR+0x387>
30004046:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004047:	75 73                	jne    300040bc <__GNU_EH_FRAME_HDR+0x394>
30004049:	6c                   	ins    BYTE PTR es:[edi],dx
3000404a:	79 2c                	jns    30004078 <__GNU_EH_FRAME_HDR+0x350>
3000404c:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
3000404f:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x20000a67
30004056:	20 
30004057:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
3000405b:	63 3a                	arpl   WORD PTR [edx],di
3000405d:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
30004060:	65 63 75 74          	arpl   WORD PTR gs:[ebp+0x74],si
30004064:	69 6e 67 20 66 6f 72 	imul   ebp,DWORD PTR [esi+0x67],0x726f6620
3000406b:	20 25 73 0a 00 6c    	and    BYTE PTR ds:0x6c000a73,ah
30004071:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
30004078:	65 63 20             	arpl   WORD PTR gs:[eax],sp
3000407b:	66 6f                	outs   dx,WORD PTR ds:[esi]
3000407d:	72 20                	jb     3000409f <__GNU_EH_FRAME_HDR+0x377>
3000407f:	25 73 0a 00 00       	and    eax,0xa73
30004084:	68 65 61 70 42       	push   0x42706165
30004089:	61                   	popa   
3000408a:	73 65                	jae    300040f1 <__GNU_EH_FRAME_HDR+0x3c9>
3000408c:	20 40 20             	and    BYTE PTR [eax+0x20],al
3000408f:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
30004092:	30 38                	xor    BYTE PTR [eax],bh
30004094:	58                   	pop    eax
30004095:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
3000409b:	30 38                	xor    BYTE PTR [eax],bh
3000409d:	58                   	pop    eax
3000409e:	20 62 65             	and    BYTE PTR [edx+0x65],ah
300040a1:	66 6f                	outs   dx,WORD PTR ds:[esi]
300040a3:	72 65                	jb     3000410a <__GNU_EH_FRAME_HDR+0x3e2>
300040a5:	0a 00                	or     al,BYTE PTR [eax]
300040a7:	6d                   	ins    DWORD PTR es:[edi],dx
300040a8:	61                   	popa   
300040a9:	6c                   	ins    BYTE PTR es:[edi],dx
300040aa:	6c                   	ins    BYTE PTR es:[edi],dx
300040ab:	6f                   	outs   dx,DWORD PTR ds:[esi]
300040ac:	63 28                	arpl   WORD PTR [eax],bp
300040ae:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
300040b1:	30 38                	xor    BYTE PTR [eax],bh
300040b3:	58                   	pop    eax
300040b4:	29 0a                	sub    DWORD PTR [edx],ecx
300040b6:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
300040ba:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
300040bd:	61                   	popa   
300040be:	6c                   	ins    BYTE PTR es:[edi],dx
300040bf:	6c                   	ins    BYTE PTR es:[edi],dx
300040c0:	6f                   	outs   dx,DWORD PTR ds:[esi]
300040c1:	63 3a                	arpl   WORD PTR [edx],di
300040c3:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
300040c6:	65                   	gs
300040c7:	64                   	fs
300040c8:	65                   	gs
300040c9:	64                   	fs
300040ca:	3d 30 78 25 30       	cmp    eax,0x30257830
300040cf:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
300040d2:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
300040d6:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
300040d9:	61                   	popa   
300040da:	6c                   	ins    BYTE PTR es:[edi],dx
300040db:	6c                   	ins    BYTE PTR es:[edi],dx
300040dc:	6f                   	outs   dx,DWORD PTR ds:[esi]
300040dd:	63 3a                	arpl   WORD PTR [edx],di
300040df:	20 68 65             	and    BYTE PTR [eax+0x65],ch
300040e2:	61                   	popa   
300040e3:	45                   	inc    ebp
300040e4:	6e                   	outs   dx,BYTE PTR ds:[esi]
300040e5:	64                   	fs
300040e6:	3d 30 78 25 30       	cmp    eax,0x30257830
300040eb:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
300040ee:	00 00                	add    BYTE PTR [eax],al
300040f0:	6c                   	ins    BYTE PTR es:[edi],dx
300040f1:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
300040f8:	6c                   	ins    BYTE PTR es:[edi],dx
300040f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
300040fa:	63 3a                	arpl   WORD PTR [edx],di
300040fc:	20 52 65             	and    BYTE PTR [edx+0x65],dl
300040ff:	71 20                	jno    30004121 <__GNU_EH_FRAME_HDR+0x3f9>
30004101:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30004104:	30 38                	xor    BYTE PTR [eax],bh
30004106:	58                   	pop    eax
30004107:	20 62 79             	and    BYTE PTR [edx+0x79],ah
3000410a:	74 65                	je     30004171 <__GNU_EH_FRAME_HDR+0x449>
3000410c:	73 2c                	jae    3000413a <__GNU_EH_FRAME_HDR+0x412>
3000410e:	20 72 65             	and    BYTE PTR [edx+0x65],dh
30004111:	74 20                	je     30004133 <__GNU_EH_FRAME_HDR+0x40b>
30004113:	77 61                	ja     30004176 <__GNU_EH_FRAME_HDR+0x44e>
30004115:	73 20                	jae    30004137 <__GNU_EH_FRAME_HDR+0x40f>
30004117:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
3000411a:	30 38                	xor    BYTE PTR [eax],bh
3000411c:	58                   	pop    eax
3000411d:	2c 20                	sub    al,0x20
3000411f:	68 65 61 70 45       	push   0x45706165
30004124:	6e                   	outs   dx,BYTE PTR ds:[esi]
30004125:	64                   	fs
30004126:	3d 30 78 25 30       	cmp    eax,0x30257830
3000412b:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
3000412e:	00 00                	add    BYTE PTR [eax],al
30004130:	6c                   	ins    BYTE PTR es:[edi],dx
30004131:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
30004138:	6c                   	ins    BYTE PTR es:[edi],dx
30004139:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000413a:	63 3a                	arpl   WORD PTR [edx],di
3000413c:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
3000413f:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
30004146:	65 
30004147:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
3000414b:	61                   	popa   
3000414c:	70 43                	jo     30004191 <__GNU_EH_FRAME_HDR+0x469>
3000414e:	75 72                	jne    300041c2 <__GNU_EH_FRAME_HDR+0x49a>
30004150:	72 20                	jb     30004172 <__GNU_EH_FRAME_HDR+0x44a>
30004152:	61                   	popa   
30004153:	6e                   	outs   dx,BYTE PTR ds:[esi]
30004154:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
30004158:	61                   	popa   
30004159:	70 42                	jo     3000419d <__GNU_EH_FRAME_HDR+0x475>
3000415b:	61                   	popa   
3000415c:	73 65                	jae    300041c3 <__GNU_EH_FRAME_HDR+0x49b>
3000415e:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
30004162:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30004165:	30 38                	xor    BYTE PTR [eax],bh
30004167:	58                   	pop    eax
30004168:	0a 00                	or     al,BYTE PTR [eax]
3000416a:	00 00                	add    BYTE PTR [eax],al
3000416c:	6c                   	ins    BYTE PTR es:[edi],dx
3000416d:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
30004174:	6c                   	ins    BYTE PTR es:[edi],dx
30004175:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004176:	63 3a                	arpl   WORD PTR [edx],di
30004178:	63 72 65             	arpl   WORD PTR [edx+0x65],si
3000417b:	61                   	popa   
3000417c:	74 69                	je     300041e7 <__GNU_EH_FRAME_HDR+0x4bf>
3000417e:	6e                   	outs   dx,BYTE PTR ds:[esi]
3000417f:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
30004183:	61                   	popa   
30004184:	70 20                	jo     300041a6 <__GNU_EH_FRAME_HDR+0x47e>
30004186:	72 65                	jb     300041ed <__GNU_EH_FRAME_HDR+0x4c5>
30004188:	63 20                	arpl   WORD PTR [eax],sp
3000418a:	40                   	inc    eax
3000418b:	20 30                	and    BYTE PTR [eax],dh
3000418d:	78 25                	js     300041b4 <__GNU_EH_FRAME_HDR+0x48c>
3000418f:	30 38                	xor    BYTE PTR [eax],bh
30004191:	58                   	pop    eax
30004192:	0a 00                	or     al,BYTE PTR [eax]
30004194:	6c                   	ins    BYTE PTR es:[edi],dx
30004195:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
3000419c:	6c                   	ins    BYTE PTR es:[edi],dx
3000419d:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000419e:	63 3a                	arpl   WORD PTR [edx],di
300041a0:	20 68 65             	and    BYTE PTR [eax+0x65],ch
300041a3:	61                   	popa   
300041a4:	70 43                	jo     300041e9 <__GNU_EH_FRAME_HDR+0x4c1>
300041a6:	75 72                	jne    3000421a <__GNU_EH_FRAME_HDR+0x4f2>
300041a8:	72 3d                	jb     300041e7 <__GNU_EH_FRAME_HDR+0x4bf>
300041aa:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
300041ad:	30 38                	xor    BYTE PTR [eax],bh
300041af:	58                   	pop    eax
300041b0:	2c 20                	sub    al,0x20
300041b2:	73 69                	jae    3000421d <__GNU_EH_FRAME_HDR+0x4f5>
300041b4:	7a 65                	jp     3000421b <__GNU_EH_FRAME_HDR+0x4f3>
300041b6:	6f                   	outs   dx,DWORD PTR ds:[esi]
300041b7:	66                   	data16
300041b8:	28 68 65             	sub    BYTE PTR [eax+0x65],ch
300041bb:	61                   	popa   
300041bc:	70 72                	jo     30004230 <_ytab+0x10>
300041be:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
300041c2:	29 3d 30 78 25 30    	sub    DWORD PTR ds:0x30257830,edi
300041c8:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
300041cb:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
300041ce:	6c                   	ins    BYTE PTR es:[edi],dx
300041cf:	6c                   	ins    BYTE PTR es:[edi],dx
300041d0:	6f                   	outs   dx,DWORD PTR ds:[esi]
300041d1:	63 3a                	arpl   WORD PTR [edx],di
300041d3:	20 72 65             	and    BYTE PTR [edx+0x65],dh
300041d6:	74 75                	je     3000424d <_ytab+0x2d>
300041d8:	72 6e                	jb     30004248 <_ytab+0x28>
300041da:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
300041e1:	30 38                	xor    BYTE PTR [eax],bh
300041e3:	58                   	pop    eax
300041e4:	0a 00                	or     al,BYTE PTR [eax]
	...
300041fe:	00 00                	add    BYTE PTR [eax],al
30004200:	47                   	inc    edi
30004201:	4d                   	dec    ebp
30004202:	54                   	push   esp
	...

30004220 <_ytab>:
30004220:	1f                   	pop    ds
30004221:	00 00                	add    BYTE PTR [eax],al
30004223:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30004226:	00 00                	add    BYTE PTR [eax],al
30004228:	1f                   	pop    ds
30004229:	00 00                	add    BYTE PTR [eax],al
3000422b:	00 1e                	add    BYTE PTR [esi],bl
3000422d:	00 00                	add    BYTE PTR [eax],al
3000422f:	00 1f                	add    BYTE PTR [edi],bl
30004231:	00 00                	add    BYTE PTR [eax],al
30004233:	00 1e                	add    BYTE PTR [esi],bl
30004235:	00 00                	add    BYTE PTR [eax],al
30004237:	00 1f                	add    BYTE PTR [edi],bl
30004239:	00 00                	add    BYTE PTR [eax],al
3000423b:	00 1f                	add    BYTE PTR [edi],bl
3000423d:	00 00                	add    BYTE PTR [eax],al
3000423f:	00 1e                	add    BYTE PTR [esi],bl
30004241:	00 00                	add    BYTE PTR [eax],al
30004243:	00 1f                	add    BYTE PTR [edi],bl
30004245:	00 00                	add    BYTE PTR [eax],al
30004247:	00 1e                	add    BYTE PTR [esi],bl
30004249:	00 00                	add    BYTE PTR [eax],al
3000424b:	00 1f                	add    BYTE PTR [edi],bl
3000424d:	00 00                	add    BYTE PTR [eax],al
3000424f:	00 1f                	add    BYTE PTR [edi],bl
30004251:	00 00                	add    BYTE PTR [eax],al
30004253:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
30004259:	00 00                	add    BYTE PTR [eax],al
3000425b:	00 1e                	add    BYTE PTR [esi],bl
3000425d:	00 00                	add    BYTE PTR [eax],al
3000425f:	00 1f                	add    BYTE PTR [edi],bl
30004261:	00 00                	add    BYTE PTR [eax],al
30004263:	00 1e                	add    BYTE PTR [esi],bl
30004265:	00 00                	add    BYTE PTR [eax],al
30004267:	00 1f                	add    BYTE PTR [edi],bl
30004269:	00 00                	add    BYTE PTR [eax],al
3000426b:	00 1f                	add    BYTE PTR [edi],bl
3000426d:	00 00                	add    BYTE PTR [eax],al
3000426f:	00 1e                	add    BYTE PTR [esi],bl
30004271:	00 00                	add    BYTE PTR [eax],al
30004273:	00 1f                	add    BYTE PTR [edi],bl
30004275:	00 00                	add    BYTE PTR [eax],al
30004277:	00 1e                	add    BYTE PTR [esi],bl
30004279:	00 00                	add    BYTE PTR [eax],al
3000427b:	00 1f                	add    BYTE PTR [edi],bl
3000427d:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

30004280 <.rel.dyn>:
30004280:	c4 44 00 30          	les    eax,FWORD PTR [eax+eax*1+0x30]
30004284:	08 00                	or     BYTE PTR [eax],al
30004286:	00 00                	add    BYTE PTR [eax],al
30004288:	c8 44 00 30          	enter  0x44,0x30
3000428c:	08 00                	or     BYTE PTR [eax],al
3000428e:	00 00                	add    BYTE PTR [eax],al
30004290:	cc                   	int3   
30004291:	44                   	inc    esp
30004292:	00 30                	add    BYTE PTR [eax],dh
30004294:	08 00                	or     BYTE PTR [eax],al
30004296:	00 00                	add    BYTE PTR [eax],al
30004298:	d0 44 00 30          	rol    BYTE PTR [eax+eax*1+0x30],1
3000429c:	08 00                	or     BYTE PTR [eax],al
3000429e:	00 00                	add    BYTE PTR [eax],al
300042a0:	d4 44                	aam    0x44
300042a2:	00 30                	add    BYTE PTR [eax],dh
300042a4:	08 00                	or     BYTE PTR [eax],al
300042a6:	00 00                	add    BYTE PTR [eax],al
300042a8:	ec                   	in     al,dx
300042a9:	44                   	inc    esp
300042aa:	00 30                	add    BYTE PTR [eax],dh
300042ac:	08 00                	or     BYTE PTR [eax],al
300042ae:	00 00                	add    BYTE PTR [eax],al
300042b0:	f0 44                	lock inc esp
300042b2:	00 30                	add    BYTE PTR [eax],dh
300042b4:	08 00                	or     BYTE PTR [eax],al
300042b6:	00 00                	add    BYTE PTR [eax],al
300042b8:	f4                   	hlt    
300042b9:	44                   	inc    esp
300042ba:	00 30                	add    BYTE PTR [eax],dh
300042bc:	08 00                	or     BYTE PTR [eax],al
300042be:	00 00                	add    BYTE PTR [eax],al
300042c0:	7e 07                	jle    300042c9 <_ytab+0xa9>
300042c2:	00 30                	add    BYTE PTR [eax],dh
300042c4:	02 21                	add    ah,BYTE PTR [ecx]
300042c6:	00 00                	add    BYTE PTR [eax],al
300042c8:	be 07 00 30 02       	mov    esi,0x2300007
300042cd:	21 00                	and    DWORD PTR [eax],eax
300042cf:	00 e7                	add    bh,ah
300042d1:	07                   	pop    es
300042d2:	00 30                	add    BYTE PTR [eax],dh
300042d4:	02 21                	add    ah,BYTE PTR [ecx]
300042d6:	00 00                	add    BYTE PTR [eax],al
300042d8:	44                   	inc    esp
300042d9:	08 00                	or     BYTE PTR [eax],al
300042db:	30 02                	xor    BYTE PTR [edx],al
300042dd:	21 00                	and    DWORD PTR [eax],eax
300042df:	00 a7 08 00 30 02    	add    BYTE PTR [edi+0x2300008],ah
300042e5:	21 00                	and    DWORD PTR [eax],eax
300042e7:	00 dd                	add    ch,bl
300042e9:	08 00                	or     BYTE PTR [eax],al
300042eb:	30 02                	xor    BYTE PTR [edx],al
300042ed:	21 00                	and    DWORD PTR [eax],eax
300042ef:	00 19                	add    BYTE PTR [ecx],bl
300042f1:	09 00                	or     DWORD PTR [eax],eax
300042f3:	30 02                	xor    BYTE PTR [edx],al
300042f5:	21 00                	and    DWORD PTR [eax],eax
300042f7:	00 57 09             	add    BYTE PTR [edi+0x9],dl
300042fa:	00 30                	add    BYTE PTR [eax],dh
300042fc:	02 21                	add    ah,BYTE PTR [ecx]
300042fe:	00 00                	add    BYTE PTR [eax],al
30004300:	97                   	xchg   edi,eax
30004301:	09 00                	or     DWORD PTR [eax],eax
30004303:	30 02                	xor    BYTE PTR [edx],al
30004305:	21 00                	and    DWORD PTR [eax],eax
30004307:	00 d9                	add    cl,bl
30004309:	09 00                	or     DWORD PTR [eax],eax
3000430b:	30 02                	xor    BYTE PTR [edx],al
3000430d:	21 00                	and    DWORD PTR [eax],eax
3000430f:	00 7f 0b             	add    BYTE PTR [edi+0xb],bh
30004312:	00 30                	add    BYTE PTR [eax],dh
30004314:	02 21                	add    ah,BYTE PTR [ecx]
30004316:	00 00                	add    BYTE PTR [eax],al
30004318:	ac                   	lods   al,BYTE PTR ds:[esi]
30004319:	0b 00                	or     eax,DWORD PTR [eax]
3000431b:	30 02                	xor    BYTE PTR [edx],al
3000431d:	21 00                	and    DWORD PTR [eax],eax
3000431f:	00 22                	add    BYTE PTR [edx],ah
30004321:	0c 00                	or     al,0x0
30004323:	30 02                	xor    BYTE PTR [edx],al
30004325:	21 00                	and    DWORD PTR [eax],eax
30004327:	00 67 1e             	add    BYTE PTR [edi+0x1e],ah
3000432a:	00 30                	add    BYTE PTR [eax],dh
3000432c:	02 21                	add    ah,BYTE PTR [ecx]
3000432e:	00 00                	add    BYTE PTR [eax],al
30004330:	bb 2a 00 30 02       	mov    ebx,0x230002a
30004335:	21 00                	and    DWORD PTR [eax],eax
30004337:	00 e8                	add    al,ch
30004339:	44                   	inc    esp
3000433a:	00 30                	add    BYTE PTR [eax],dh
3000433c:	01 12                	add    DWORD PTR [edx],edx
3000433e:	00 00                	add    BYTE PTR [eax],al
30004340:	e4 44                	in     al,0x44
30004342:	00 30                	add    BYTE PTR [eax],dh
30004344:	07                   	pop    es
30004345:	10 00                	adc    BYTE PTR [eax],al
	...

Disassembly of section .data:

30004360 <console_node>:
30004360:	01 00                	add    DWORD PTR [eax],eax
	...

300043a0 <rcsid>:
300043a0:	24 48                	and    al,0x48
300043a2:	65                   	gs
300043a3:	61                   	popa   
300043a4:	64                   	fs
300043a5:	65                   	gs
300043a6:	72 3a                	jb     300043e2 <rcsid+0x42>
300043a8:	20 2f                	and    BYTE PTR [edi],ch
300043aa:	75 73                	jne    3000441f <_DYNAMIC+0x13>
300043ac:	65                   	gs
300043ad:	72 36                	jb     300043e5 <rcsid+0x45>
300043af:	2f                   	das    
300043b0:	6f                   	outs   dx,DWORD PTR ds:[esi]
300043b1:	75 73                	jne    30004426 <_DYNAMIC+0x1a>
300043b3:	74 65                	je     3000441a <_DYNAMIC+0xe>
300043b5:	72 2f                	jb     300043e6 <rcsid+0x46>
300043b7:	74 63                	je     3000441c <_DYNAMIC+0x10>
300043b9:	6c                   	ins    BYTE PTR es:[edi],dx
300043ba:	2f                   	das    
300043bb:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
300043be:	70 61                	jo     30004421 <_DYNAMIC+0x15>
300043c0:	74 2f                	je     300043f1 <rcsid+0x51>
300043c2:	52                   	push   edx
300043c3:	43                   	inc    ebx
300043c4:	53                   	push   ebx
300043c5:	2f                   	das    
300043c6:	73 74                	jae    3000443c <_DYNAMIC+0x30>
300043c8:	72 73                	jb     3000443d <_DYNAMIC+0x31>
300043ca:	74 72                	je     3000443e <_DYNAMIC+0x32>
300043cc:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
300043d0:	20 31                	and    BYTE PTR [ecx],dh
300043d2:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
300043d5:	39 33                	cmp    DWORD PTR [ebx],esi
300043d7:	2f                   	das    
300043d8:	30 33                	xor    BYTE PTR [ebx],dh
300043da:	2f                   	das    
300043db:	31 39                	xor    DWORD PTR [ecx],edi
300043dd:	20 31                	and    BYTE PTR [ecx],dh
300043df:	35 3a 32 35 3a       	xor    eax,0x3a35323a
300043e4:	34 30                	xor    al,0x30
300043e6:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
300043e9:	73 74                	jae    3000445f <_DYNAMIC+0x53>
300043eb:	65                   	gs
300043ec:	72 20                	jb     3000440e <_DYNAMIC+0x2>
300043ee:	45                   	inc    ebp
300043ef:	78 70                	js     30004461 <_DYNAMIC+0x55>
300043f1:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
300043f4:	53                   	push   ebx
300043f5:	50                   	push   eax
300043f6:	52                   	push   edx
300043f7:	49                   	dec    ecx
300043f8:	54                   	push   esp
300043f9:	45                   	inc    ebp
300043fa:	20 28                	and    BYTE PTR [eax],ch
300043fc:	42                   	inc    edx
300043fd:	65                   	gs
300043fe:	72 6b                	jb     3000446b <_DYNAMIC+0x5f>
30004400:	65                   	gs
30004401:	6c                   	ins    BYTE PTR es:[edi],dx
30004402:	65                   	gs
30004403:	79 29                	jns    3000442e <_DYNAMIC+0x22>
30004405:	00 00                	add    BYTE PTR [eax],al
	...

30004408 <_daylight>:
30004408:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

3000440c <_DYNAMIC>:
3000440c:	19 00                	sbb    DWORD PTR [eax],eax
3000440e:	00 00                	add    BYTE PTR [eax],al
30004410:	e8 44 00 30 1b       	call   4b304459 <ticksToWait+0x1b2fff29>
30004415:	00 00                	add    BYTE PTR [eax],al
30004417:	00 04 00             	add    BYTE PTR [eax+eax*1],al
3000441a:	00 00                	add    BYTE PTR [eax],al
3000441c:	1a 00                	sbb    al,BYTE PTR [eax]
3000441e:	00 00                	add    BYTE PTR [eax],al
30004420:	ec                   	in     al,dx
30004421:	44                   	inc    esp
30004422:	00 30                	add    BYTE PTR [eax],dh
30004424:	1c 00                	sbb    al,0x0
30004426:	00 00                	add    BYTE PTR [eax],al
30004428:	04 00                	add    al,0x0
3000442a:	00 00                	add    BYTE PTR [eax],al
3000442c:	04 00                	add    al,0x0
3000442e:	00 00                	add    BYTE PTR [eax],al
30004430:	78 3b                	js     3000446d <_DYNAMIC+0x61>
30004432:	00 30                	add    BYTE PTR [eax],dh
30004434:	05 00 00 00 fc       	add    eax,0xfc000000
30004439:	39 00                	cmp    DWORD PTR [eax],eax
3000443b:	30 06                	xor    BYTE PTR [esi],al
3000443d:	00 00                	add    BYTE PTR [eax],al
3000443f:	00 ac 36 00 30 0a 00 	add    BYTE PTR [esi+esi*1+0xa3000],ch
30004446:	00 00                	add    BYTE PTR [eax],al
30004448:	79 01                	jns    3000444b <_DYNAMIC+0x3f>
3000444a:	00 00                	add    BYTE PTR [eax],al
3000444c:	0b 00                	or     eax,DWORD PTR [eax]
3000444e:	00 00                	add    BYTE PTR [eax],al
30004450:	10 00                	adc    BYTE PTR [eax],al
30004452:	00 00                	add    BYTE PTR [eax],al
30004454:	03 00                	add    eax,DWORD PTR [eax]
30004456:	00 00                	add    BYTE PTR [eax],al
30004458:	d8 44 00 30          	fadd   DWORD PTR [eax+eax*1+0x30]
3000445c:	02 00                	add    al,BYTE PTR [eax]
3000445e:	00 00                	add    BYTE PTR [eax],al
30004460:	08 00                	or     BYTE PTR [eax],al
30004462:	00 00                	add    BYTE PTR [eax],al
30004464:	14 00                	adc    al,0x0
30004466:	00 00                	add    BYTE PTR [eax],al
30004468:	11 00                	adc    DWORD PTR [eax],eax
3000446a:	00 00                	add    BYTE PTR [eax],al
3000446c:	17                   	pop    ss
3000446d:	00 00                	add    BYTE PTR [eax],al
3000446f:	00 40 43             	add    BYTE PTR [eax+0x43],al
30004472:	00 30                	add    BYTE PTR [eax],dh
30004474:	11 00                	adc    DWORD PTR [eax],eax
30004476:	00 00                	add    BYTE PTR [eax],al
30004478:	80 42 00 30          	add    BYTE PTR [edx+0x0],0x30
3000447c:	12 00                	adc    al,BYTE PTR [eax]
3000447e:	00 00                	add    BYTE PTR [eax],al
30004480:	c0 00 00             	rol    BYTE PTR [eax],0x0
30004483:	00 13                	add    BYTE PTR [ebx],dl
30004485:	00 00                	add    BYTE PTR [eax],al
30004487:	00 08                	add    BYTE PTR [eax],cl
30004489:	00 00                	add    BYTE PTR [eax],al
3000448b:	00 16                	add    BYTE PTR [esi],dl
3000448d:	00 00                	add    BYTE PTR [eax],al
3000448f:	00 00                	add    BYTE PTR [eax],al
30004491:	00 00                	add    BYTE PTR [eax],al
30004493:	00 fa                	add    dl,bh
30004495:	ff                   	(bad)  
30004496:	ff 6f 08             	jmp    FWORD PTR [edi+0x8]
	...

Disassembly of section .got:

300044c4 <.got>:
300044c4:	f8                   	clc    
300044c5:	44                   	inc    esp
300044c6:	00 30                	add    BYTE PTR [eax],dh
300044c8:	fc                   	cld    
300044c9:	44                   	inc    esp
300044ca:	00 30                	add    BYTE PTR [eax],dh
300044cc:	00 45 00             	add    BYTE PTR [ebp+0x0],al
300044cf:	30 04 45 00 30 08 45 	xor    BYTE PTR [eax*2+0x45083000],al
300044d6:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .got.plt:

300044d8 <_GLOBAL_OFFSET_TABLE_>:
300044d8:	0c 44                	or     al,0x44
300044da:	00 30                	add    BYTE PTR [eax],dh
	...
300044e4:	16                   	push   ss
300044e5:	2b 00                	sub    eax,DWORD PTR [eax]
300044e7:	30                   	.byte 0x30

Disassembly of section .init_array:

300044e8 <.init_array>:
300044e8:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

300044ec <.fini_array>:
300044ec:	8f 0a                	(bad)  
300044ee:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .data.rel.local:

300044f0 <_tzname>:
300044f0:	00 42 00             	add    BYTE PTR [edx+0x0],al
300044f3:	30 00                	xor    BYTE PTR [eax],al
300044f5:	42                   	inc    edx
300044f6:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .bss:

300044f8 <heapEnd>:
300044f8:	00 00                	add    BYTE PTR [eax],al
	...

300044fc <heapBase>:
300044fc:	00 00                	add    BYTE PTR [eax],al
	...

30004500 <heapCurr>:
30004500:	00 00                	add    BYTE PTR [eax],al
	...

30004504 <processEnvp>:
30004504:	00 00                	add    BYTE PTR [eax],al
	...

30004508 <libcTZ>:
30004508:	00 00                	add    BYTE PTR [eax],al
	...

3000450c <lasts.1360>:
3000450c:	00 00                	add    BYTE PTR [eax],al
	...

30004510 <libcInitialized>:
30004510:	00 00                	add    BYTE PTR [eax],al
	...

30004514 <fops>:
	...

3000451c <console_file>:
	...

3000452c <_dstbias>:
3000452c:	00 00                	add    BYTE PTR [eax],al
	...

30004530 <ticksToWait>:
30004530:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	5f                   	pop    edi
       1:	01 00                	add    DWORD PTR [eax],eax
       3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
       6:	00 00                	add    BYTE PTR [eax],al
       8:	00 00                	add    BYTE PTR [eax],al
       a:	04 01                	add    al,0x1
       c:	f4                   	hlt    
       d:	00 00                	add    BYTE PTR [eax],al
       f:	00 0c b8             	add    BYTE PTR [eax+edi*4],cl
      12:	00 00                	add    BYTE PTR [eax],al
      14:	00 72 00             	add    BYTE PTR [edx+0x0],dh
      17:	00 00                	add    BYTE PTR [eax],al
      19:	00 00                	add    BYTE PTR [eax],al
      1b:	00 30                	add    BYTE PTR [eax],dh
      1d:	70 00                	jo     1f <sysEnter_Vector-0x12ffe1>
      1f:	00 00                	add    BYTE PTR [eax],al
      21:	00 00                	add    BYTE PTR [eax],al
      23:	00 00                	add    BYTE PTR [eax],al
      25:	02 01                	add    al,BYTE PTR [ecx]
      27:	06                   	push   es
      28:	64 00 00             	add    BYTE PTR fs:[eax],al
      2b:	00 02                	add    BYTE PTR [edx],al
      2d:	01 06                	add    DWORD PTR [esi],eax
      2f:	5d                   	pop    ebp
      30:	00 00                	add    BYTE PTR [eax],al
      32:	00 02                	add    BYTE PTR [edx],al
      34:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
      3a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
      41:	02 08                	add    cl,BYTE PTR [eax]
      43:	05 00 00 00 00       	add    eax,0x0
      48:	02 01                	add    al,BYTE PTR [ecx]
      4a:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
      4d:	00 00                	add    BYTE PTR [eax],al
      4f:	02 02                	add    al,BYTE PTR [edx]
      51:	07                   	pop    es
      52:	0e                   	push   cs
      53:	00 00                	add    BYTE PTR [eax],al
      55:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
      58:	00 00                	add    BYTE PTR [eax],al
      5a:	00 04 34             	add    BYTE PTR [esp+esi*1],al
      5d:	61                   	popa   
      5e:	00 00                	add    BYTE PTR [eax],al
      60:	00 02                	add    BYTE PTR [edx],al
      62:	04 07                	add    al,0x7
      64:	3e 00 00             	add    BYTE PTR ds:[eax],al
      67:	00 02                	add    BYTE PTR [edx],al
      69:	08 07                	or     BYTE PTR [edi],al
      6b:	34 00                	xor    al,0x0
      6d:	00 00                	add    BYTE PTR [eax],al
      6f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
      76:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
      79:	9b                   	fwait
      7a:	00 00                	add    BYTE PTR [eax],al
      7c:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
      82:	00 06                	add    BYTE PTR [esi],al
      84:	25 00 00 00 02       	and    eax,0x2000000
      89:	01 02                	add    DWORD PTR [edx],eax
      8b:	95                   	xchg   ebp,eax
      8c:	00 00                	add    BYTE PTR [eax],al
      8e:	00 02                	add    BYTE PTR [edx],al
      90:	04 07                	add    al,0x7
      92:	39 00                	cmp    DWORD PTR [eax],eax
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
      99:	e1 00                	loope  9b <sysEnter_Vector-0x12ff65>
      9b:	00 00                	add    BYTE PTR [eax],al
      9d:	05 04 25 00 00       	add    eax,0x2504
      a2:	00 07                	add    BYTE PTR [edi],al
      a4:	21 00                	and    DWORD PTR [eax],eax
      a6:	00 00                	add    BYTE PTR [eax],al
      a8:	01 08                	add    DWORD PTR [eax],ecx
      aa:	9d                   	popf   
      ab:	00 00                	add    BYTE PTR [eax],al
      ad:	00 00                	add    BYTE PTR [eax],al
      af:	00 00                	add    BYTE PTR [eax],al
      b1:	30 38                	xor    BYTE PTR [eax],bh
      b3:	00 00                	add    BYTE PTR [eax],al
      b5:	00 01                	add    BYTE PTR [ecx],al
      b7:	9c                   	pushf  
      b8:	d5 00                	aad    0x0
      ba:	00 00                	add    BYTE PTR [eax],al
      bc:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
      bf:	01 08                	add    DWORD PTR [eax],ecx
      c1:	7d 00                	jge    c3 <sysEnter_Vector-0x12ff3d>
      c3:	00 00                	add    BYTE PTR [eax],al
      c5:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      cb:	01 08                	add    DWORD PTR [eax],ecx
      cd:	3a 00                	cmp    al,BYTE PTR [eax]
      cf:	00 00                	add    BYTE PTR [eax],al
      d1:	02 91 04 00 07 a7    	add    dl,BYTE PTR [ecx-0x58f8fffc]
      d7:	00 00                	add    BYTE PTR [eax],al
      d9:	00 01                	add    BYTE PTR [ecx],al
      db:	10 9d 00 00 00 38    	adc    BYTE PTR [ebp+0x38000000],bl
      e1:	00 00                	add    BYTE PTR [eax],al
      e3:	30 38                	xor    BYTE PTR [eax],bh
      e5:	00 00                	add    BYTE PTR [eax],al
      e7:	00 01                	add    BYTE PTR [ecx],al
      e9:	9c                   	pushf  
      ea:	07                   	pop    es
      eb:	01 00                	add    DWORD PTR [eax],eax
      ed:	00 08                	add    BYTE PTR [eax],cl
      ef:	73 00                	jae    f1 <sysEnter_Vector-0x12ff0f>
      f1:	01 10                	add    DWORD PTR [eax],edx
      f3:	7d 00                	jge    f5 <sysEnter_Vector-0x12ff0b>
      f5:	00 00                	add    BYTE PTR [eax],al
      f7:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      fd:	01 10                	add    DWORD PTR [eax],edx
      ff:	3a 00                	cmp    al,BYTE PTR [eax]
     101:	00 00                	add    BYTE PTR [eax],al
     103:	02 91 04 00 09 4b    	add    dl,BYTE PTR [ecx+0x4b090004]
     109:	00 00                	add    BYTE PTR [eax],al
     10b:	00 02                	add    BYTE PTR [edx],al
     10d:	34 56                	xor    al,0x56
     10f:	00 00                	add    BYTE PTR [eax],al
     111:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
     117:	30 09                	xor    BYTE PTR [ecx],cl
     119:	af                   	scas   eax,DWORD PTR es:[edi]
     11a:	00 00                	add    BYTE PTR [eax],al
     11c:	00 02                	add    BYTE PTR [edx],al
     11e:	35 56 00 00 00       	xor    eax,0x56
     123:	05 03 00 45 00       	add    eax,0x450003
     128:	30 09                	xor    BYTE PTR [ecx],cl
     12a:	5b                   	pop    ebx
     12b:	01 00                	add    DWORD PTR [eax],eax
     12d:	00 02                	add    BYTE PTR [edx],al
     12f:	36                   	ss
     130:	56                   	push   esi
     131:	00 00                	add    BYTE PTR [eax],al
     133:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
     139:	30 09                	xor    BYTE PTR [ecx],cl
     13b:	54                   	push   esp
     13c:	00 00                	add    BYTE PTR [eax],al
     13e:	00 02                	add    BYTE PTR [edx],al
     140:	37                   	aaa    
     141:	56                   	push   esi
     142:	00 00                	add    BYTE PTR [eax],al
     144:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
     14a:	30 09                	xor    BYTE PTR [ecx],cl
     14c:	28 00                	sub    BYTE PTR [eax],al
     14e:	00 00                	add    BYTE PTR [eax],al
     150:	03 46 5c             	add    eax,DWORD PTR [esi+0x5c]
     153:	01 00                	add    DWORD PTR [eax],eax
     155:	00 05 03 04 45 00    	add    BYTE PTR ds:0x450403,al
     15b:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
     161:	00 00                	add    BYTE PTR [eax],al
     163:	9e                   	sahf   
     164:	01 00                	add    DWORD PTR [eax],eax
     166:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     169:	83 00 00             	add    DWORD PTR [eax],0x0
     16c:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     16f:	f4                   	hlt    
     170:	00 00                	add    BYTE PTR [eax],al
     172:	00 0c 69             	add    BYTE PTR [ecx+ebp*2],cl
     175:	01 00                	add    DWORD PTR [eax],eax
     177:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     17a:	00 00                	add    BYTE PTR [eax],al
     17c:	70 00                	jo     17e <sysEnter_Vector-0x12fe82>
     17e:	00 30                	add    BYTE PTR [eax],dh
     180:	aa                   	stos   BYTE PTR es:[edi],al
     181:	00 00                	add    BYTE PTR [eax],al
     183:	00 d4                	add    ah,dl
     185:	00 00                	add    BYTE PTR [eax],al
     187:	00 02                	add    BYTE PTR [edx],al
     189:	01 06                	add    DWORD PTR [esi],eax
     18b:	64 00 00             	add    BYTE PTR fs:[eax],al
     18e:	00 02                	add    BYTE PTR [edx],al
     190:	01 06                	add    DWORD PTR [esi],eax
     192:	5d                   	pop    ebp
     193:	00 00                	add    BYTE PTR [eax],al
     195:	00 02                	add    BYTE PTR [edx],al
     197:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     19d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     1a4:	02 08                	add    cl,BYTE PTR [eax]
     1a6:	05 00 00 00 00       	add    eax,0x0
     1ab:	02 01                	add    al,BYTE PTR [ecx]
     1ad:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     1b0:	00 00                	add    BYTE PTR [eax],al
     1b2:	02 02                	add    al,BYTE PTR [edx]
     1b4:	07                   	pop    es
     1b5:	0e                   	push   cs
     1b6:	00 00                	add    BYTE PTR [eax],al
     1b8:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     1bb:	00 00                	add    BYTE PTR [eax],al
     1bd:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     1c0:	61                   	popa   
     1c1:	00 00                	add    BYTE PTR [eax],al
     1c3:	00 02                	add    BYTE PTR [edx],al
     1c5:	04 07                	add    al,0x7
     1c7:	3e 00 00             	add    BYTE PTR ds:[eax],al
     1ca:	00 02                	add    BYTE PTR [edx],al
     1cc:	08 07                	or     BYTE PTR [edi],al
     1ce:	34 00                	xor    al,0x0
     1d0:	00 00                	add    BYTE PTR [eax],al
     1d2:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     1d9:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     1dc:	9b                   	fwait
     1dd:	00 00                	add    BYTE PTR [eax],al
     1df:	00 02                	add    BYTE PTR [edx],al
     1e1:	01 02                	add    DWORD PTR [edx],eax
     1e3:	95                   	xchg   ebp,eax
     1e4:	00 00                	add    BYTE PTR [eax],al
     1e6:	00 02                	add    BYTE PTR [edx],al
     1e8:	04 07                	add    al,0x7
     1ea:	39 00                	cmp    DWORD PTR [eax],eax
     1ec:	00 00                	add    BYTE PTR [eax],al
     1ee:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     1f1:	e1 00                	loope  1f3 <sysEnter_Vector-0x12fe0d>
     1f3:	00 00                	add    BYTE PTR [eax],al
     1f5:	05 04 25 00 00       	add    eax,0x2504
     1fa:	00 06                	add    BYTE PTR [esi],al
     1fc:	93                   	xchg   ebx,eax
     1fd:	01 00                	add    DWORD PTR [eax],eax
     1ff:	00 01                	add    BYTE PTR [ecx],al
     201:	25 3a 00 00 00       	and    eax,0x3a
     206:	70 00                	jo     208 <sysEnter_Vector-0x12fdf8>
     208:	00 30                	add    BYTE PTR [eax],dh
     20a:	55                   	push   ebp
     20b:	00 00                	add    BYTE PTR [eax],al
     20d:	00 01                	add    BYTE PTR [ecx],al
     20f:	9c                   	pushf  
     210:	ef                   	out    dx,eax
     211:	00 00                	add    BYTE PTR [eax],al
     213:	00 07                	add    BYTE PTR [edi],al
     215:	a2 0a 00 00 01       	mov    ds:0x100000a,al
     21a:	25 92 00 00 00       	and    eax,0x92
     21f:	02 91 00 07 63 01    	add    dl,BYTE PTR [ecx+0x1630700]
     225:	00 00                	add    BYTE PTR [eax],al
     227:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     22d:	02 91 04 08 63 00    	add    dl,BYTE PTR [ecx+0x630804]
     233:	01 27                	add    DWORD PTR [edi],esp
     235:	25 00 00 00 01       	and    eax,0x1000000
     23a:	51                   	push   ecx
     23b:	08 70 00             	or     BYTE PTR [eax+0x0],dh
     23e:	01 27                	add    DWORD PTR [edi],esp
     240:	92                   	xchg   edx,eax
     241:	00 00                	add    BYTE PTR [eax],al
     243:	00 01                	add    BYTE PTR [ecx],al
     245:	56                   	push   esi
     246:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
     249:	01 27                	add    DWORD PTR [edi],esp
     24b:	92                   	xchg   edx,eax
     24c:	00 00                	add    BYTE PTR [eax],al
     24e:	00 01                	add    BYTE PTR [ecx],al
     250:	53                   	push   ebx
     251:	00 06                	add    BYTE PTR [esi],al
     253:	9b                   	fwait
     254:	01 00                	add    DWORD PTR [eax],eax
     256:	00 01                	add    BYTE PTR [ecx],al
     258:	33 3a                	xor    edi,DWORD PTR [edx]
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	00 c5                	add    ch,al
     25e:	00 00                	add    BYTE PTR [eax],al
     260:	30 55 00             	xor    BYTE PTR [ebp+0x0],dl
     263:	00 00                	add    BYTE PTR [eax],al
     265:	01 9c 46 01 00 00 07 	add    DWORD PTR [esi+eax*2+0x7000001],ebx
     26c:	a2 0a 00 00 01       	mov    ds:0x100000a,al
     271:	33 92 00 00 00 02    	xor    edx,DWORD PTR [edx+0x2000000]
     277:	91                   	xchg   ecx,eax
     278:	00 07                	add    BYTE PTR [edi],al
     27a:	63 01                	arpl   WORD PTR [ecx],ax
     27c:	00 00                	add    BYTE PTR [eax],al
     27e:	01 33                	add    DWORD PTR [ebx],esi
     280:	92                   	xchg   edx,eax
     281:	00 00                	add    BYTE PTR [eax],al
     283:	00 02                	add    BYTE PTR [edx],al
     285:	91                   	xchg   ecx,eax
     286:	04 08                	add    al,0x8
     288:	63 00                	arpl   WORD PTR [eax],ax
     28a:	01 35 25 00 00 00    	add    DWORD PTR ds:0x25,esi
     290:	01 51 08             	add    DWORD PTR [ecx+0x8],edx
     293:	70 00                	jo     295 <sysEnter_Vector-0x12fd6b>
     295:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
     29b:	01 56 08             	add    DWORD PTR [esi+0x8],edx
     29e:	73 00                	jae    2a0 <sysEnter_Vector-0x12fd60>
     2a0:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
     2a6:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
     2a9:	09 4b 00             	or     DWORD PTR [ebx+0x0],ecx
     2ac:	00 00                	add    BYTE PTR [eax],al
     2ae:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     2b1:	00 00                	add    BYTE PTR [eax],al
     2b3:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
     2b9:	30 09                	xor    BYTE PTR [ecx],cl
     2bb:	af                   	scas   eax,DWORD PTR es:[edi]
     2bc:	00 00                	add    BYTE PTR [eax],al
     2be:	00 02                	add    BYTE PTR [edx],al
     2c0:	35 56 00 00 00       	xor    eax,0x56
     2c5:	05 03 00 45 00       	add    eax,0x450003
     2ca:	30 09                	xor    BYTE PTR [ecx],cl
     2cc:	5b                   	pop    ebx
     2cd:	01 00                	add    DWORD PTR [eax],eax
     2cf:	00 02                	add    BYTE PTR [edx],al
     2d1:	36                   	ss
     2d2:	56                   	push   esi
     2d3:	00 00                	add    BYTE PTR [eax],al
     2d5:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
     2db:	30 09                	xor    BYTE PTR [ecx],cl
     2dd:	54                   	push   esp
     2de:	00 00                	add    BYTE PTR [eax],al
     2e0:	00 02                	add    BYTE PTR [edx],al
     2e2:	37                   	aaa    
     2e3:	56                   	push   esi
     2e4:	00 00                	add    BYTE PTR [eax],al
     2e6:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
     2ec:	30 09                	xor    BYTE PTR [ecx],cl
     2ee:	28 00                	sub    BYTE PTR [eax],al
     2f0:	00 00                	add    BYTE PTR [eax],al
     2f2:	03 46 9b             	add    eax,DWORD PTR [esi-0x65]
     2f5:	01 00                	add    DWORD PTR [eax],eax
     2f7:	00 05 03 04 45 00    	add    BYTE PTR ds:0x450403,al
     2fd:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
     303:	00 00                	add    BYTE PTR [eax],al
     305:	41                   	inc    ecx
     306:	01 00                	add    DWORD PTR [eax],eax
     308:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     30b:	0e                   	push   cs
     30c:	01 00                	add    DWORD PTR [eax],eax
     30e:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     311:	f4                   	hlt    
     312:	00 00                	add    BYTE PTR [eax],al
     314:	00 0c aa             	add    BYTE PTR [edx+ebp*4],cl
     317:	01 00                	add    DWORD PTR [eax],eax
     319:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     31c:	00 00                	add    BYTE PTR [eax],al
     31e:	1c 01                	sbb    al,0x1
     320:	00 30                	add    BYTE PTR [eax],dh
     322:	97                   	xchg   edi,eax
     323:	00 00                	add    BYTE PTR [eax],al
     325:	00 db                	add    bl,bl
     327:	01 00                	add    DWORD PTR [eax],eax
     329:	00 02                	add    BYTE PTR [edx],al
     32b:	01 06                	add    DWORD PTR [esi],eax
     32d:	64 00 00             	add    BYTE PTR fs:[eax],al
     330:	00 02                	add    BYTE PTR [edx],al
     332:	01 06                	add    DWORD PTR [esi],eax
     334:	5d                   	pop    ebp
     335:	00 00                	add    BYTE PTR [eax],al
     337:	00 02                	add    BYTE PTR [edx],al
     339:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     33f:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     346:	02 08                	add    cl,BYTE PTR [eax]
     348:	05 00 00 00 00       	add    eax,0x0
     34d:	02 01                	add    al,BYTE PTR [ecx]
     34f:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     352:	00 00                	add    BYTE PTR [eax],al
     354:	02 02                	add    al,BYTE PTR [edx]
     356:	07                   	pop    es
     357:	0e                   	push   cs
     358:	00 00                	add    BYTE PTR [eax],al
     35a:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     35d:	00 00                	add    BYTE PTR [eax],al
     35f:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     362:	61                   	popa   
     363:	00 00                	add    BYTE PTR [eax],al
     365:	00 02                	add    BYTE PTR [edx],al
     367:	04 07                	add    al,0x7
     369:	3e 00 00             	add    BYTE PTR ds:[eax],al
     36c:	00 02                	add    BYTE PTR [edx],al
     36e:	08 07                	or     BYTE PTR [edi],al
     370:	34 00                	xor    al,0x0
     372:	00 00                	add    BYTE PTR [eax],al
     374:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     37b:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     37e:	9b                   	fwait
     37f:	00 00                	add    BYTE PTR [eax],al
     381:	00 02                	add    BYTE PTR [edx],al
     383:	01 02                	add    DWORD PTR [edx],eax
     385:	95                   	xchg   ebp,eax
     386:	00 00                	add    BYTE PTR [eax],al
     388:	00 02                	add    BYTE PTR [edx],al
     38a:	04 07                	add    al,0x7
     38c:	39 00                	cmp    DWORD PTR [eax],eax
     38e:	00 00                	add    BYTE PTR [eax],al
     390:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     393:	e1 00                	loope  395 <sysEnter_Vector-0x12fc6b>
     395:	00 00                	add    BYTE PTR [eax],al
     397:	05 04 25 00 00       	add    eax,0x2504
     39c:	00 06                	add    BYTE PTR [esi],al
     39e:	d9 01                	fld    DWORD PTR [ecx]
     3a0:	00 00                	add    BYTE PTR [eax],al
     3a2:	01 28                	add    DWORD PTR [eax],ebp
     3a4:	92                   	xchg   edx,eax
     3a5:	00 00                	add    BYTE PTR [eax],al
     3a7:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     3aa:	00 30                	add    BYTE PTR [eax],dh
     3ac:	97                   	xchg   edi,eax
     3ad:	00 00                	add    BYTE PTR [eax],al
     3af:	00 01                	add    BYTE PTR [ecx],al
     3b1:	9c                   	pushf  
     3b2:	e9 00 00 00 07       	jmp    70003b7 <sysEnter_Vector+0x6ed03b7>
     3b7:	73 00                	jae    3b9 <sysEnter_Vector-0x12fc47>
     3b9:	01 28                	add    DWORD PTR [eax],ebp
     3bb:	92                   	xchg   edx,eax
     3bc:	00 00                	add    BYTE PTR [eax],al
     3be:	00 02                	add    BYTE PTR [edx],al
     3c0:	91                   	xchg   ecx,eax
     3c1:	00 08                	add    BYTE PTR [eax],cl
     3c3:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     3c4:	01 00                	add    DWORD PTR [eax],eax
     3c6:	00 01                	add    BYTE PTR [ecx],al
     3c8:	28 92 00 00 00 02    	sub    BYTE PTR [edx+0x2000000],dl
     3ce:	91                   	xchg   ecx,eax
     3cf:	04 09                	add    al,0x9
     3d1:	d3 01                	rol    DWORD PTR [ecx],cl
     3d3:	00 00                	add    BYTE PTR [eax],al
     3d5:	01 2a                	add    DWORD PTR [edx],ebp
     3d7:	92                   	xchg   edx,eax
     3d8:	00 00                	add    BYTE PTR [eax],al
     3da:	00 05 03 0c 45 00    	add    BYTE PTR ds:0x450c03,al
     3e0:	30 0a                	xor    BYTE PTR [edx],cl
     3e2:	63 68 00             	arpl   WORD PTR [eax+0x0],bp
     3e5:	01 2b                	add    DWORD PTR [ebx],ebp
     3e7:	3a 00                	cmp    al,BYTE PTR [eax]
     3e9:	00 00                	add    BYTE PTR [eax],al
     3eb:	01 56 00             	add    DWORD PTR [esi+0x0],edx
     3ee:	0b 4b 00             	or     ecx,DWORD PTR [ebx+0x0]
     3f1:	00 00                	add    BYTE PTR [eax],al
     3f3:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     3f6:	00 00                	add    BYTE PTR [eax],al
     3f8:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
     3fe:	30 0b                	xor    BYTE PTR [ebx],cl
     400:	af                   	scas   eax,DWORD PTR es:[edi]
     401:	00 00                	add    BYTE PTR [eax],al
     403:	00 02                	add    BYTE PTR [edx],al
     405:	35 56 00 00 00       	xor    eax,0x56
     40a:	05 03 00 45 00       	add    eax,0x450003
     40f:	30 0b                	xor    BYTE PTR [ebx],cl
     411:	5b                   	pop    ebx
     412:	01 00                	add    DWORD PTR [eax],eax
     414:	00 02                	add    BYTE PTR [edx],al
     416:	36                   	ss
     417:	56                   	push   esi
     418:	00 00                	add    BYTE PTR [eax],al
     41a:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
     420:	30 0b                	xor    BYTE PTR [ebx],cl
     422:	54                   	push   esp
     423:	00 00                	add    BYTE PTR [eax],al
     425:	00 02                	add    BYTE PTR [edx],al
     427:	37                   	aaa    
     428:	56                   	push   esi
     429:	00 00                	add    BYTE PTR [eax],al
     42b:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
     431:	30 0b                	xor    BYTE PTR [ebx],cl
     433:	28 00                	sub    BYTE PTR [eax],al
     435:	00 00                	add    BYTE PTR [eax],al
     437:	03 46 3e             	add    eax,DWORD PTR [esi+0x3e]
     43a:	01 00                	add    DWORD PTR [eax],eax
     43c:	00 05 03 04 45 00    	add    BYTE PTR ds:0x450403,al
     442:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
     448:	00 00                	add    BYTE PTR [eax],al
     44a:	12 02                	adc    al,BYTE PTR [edx]
     44c:	00 00                	add    BYTE PTR [eax],al
     44e:	04 00                	add    al,0x0
     450:	b7 01                	mov    bh,0x1
     452:	00 00                	add    BYTE PTR [eax],al
     454:	04 01                	add    al,0x1
     456:	f4                   	hlt    
     457:	00 00                	add    BYTE PTR [eax],al
     459:	00 0c e6             	add    BYTE PTR [esi+eiz*8],cl
     45c:	01 00                	add    DWORD PTR [eax],eax
     45e:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     461:	00 00                	add    BYTE PTR [eax],al
     463:	b4 01                	mov    ah,0x1
     465:	00 30                	add    BYTE PTR [eax],dh
     467:	49                   	dec    ecx
     468:	02 00                	add    al,BYTE PTR [eax]
     46a:	00 b3 02 00 00 02    	add    BYTE PTR [ebx+0x2000002],dh
     470:	01 06                	add    DWORD PTR [esi],eax
     472:	64 00 00             	add    BYTE PTR fs:[eax],al
     475:	00 02                	add    BYTE PTR [edx],al
     477:	01 06                	add    DWORD PTR [esi],eax
     479:	5d                   	pop    ebp
     47a:	00 00                	add    BYTE PTR [eax],al
     47c:	00 02                	add    BYTE PTR [edx],al
     47e:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     484:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     48b:	02 08                	add    cl,BYTE PTR [eax]
     48d:	05 00 00 00 00       	add    eax,0x0
     492:	02 01                	add    al,BYTE PTR [ecx]
     494:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     497:	00 00                	add    BYTE PTR [eax],al
     499:	02 02                	add    al,BYTE PTR [edx]
     49b:	07                   	pop    es
     49c:	0e                   	push   cs
     49d:	00 00                	add    BYTE PTR [eax],al
     49f:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     4a2:	00 00                	add    BYTE PTR [eax],al
     4a4:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     4a7:	61                   	popa   
     4a8:	00 00                	add    BYTE PTR [eax],al
     4aa:	00 02                	add    BYTE PTR [edx],al
     4ac:	04 07                	add    al,0x7
     4ae:	3e 00 00             	add    BYTE PTR ds:[eax],al
     4b1:	00 02                	add    BYTE PTR [edx],al
     4b3:	08 07                	or     BYTE PTR [edi],al
     4b5:	34 00                	xor    al,0x0
     4b7:	00 00                	add    BYTE PTR [eax],al
     4b9:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     4c0:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     4c3:	9b                   	fwait
     4c4:	00 00                	add    BYTE PTR [eax],al
     4c6:	00 02                	add    BYTE PTR [edx],al
     4c8:	01 02                	add    DWORD PTR [edx],eax
     4ca:	95                   	xchg   ebp,eax
     4cb:	00 00                	add    BYTE PTR [eax],al
     4cd:	00 02                	add    BYTE PTR [edx],al
     4cf:	04 07                	add    al,0x7
     4d1:	39 00                	cmp    DWORD PTR [eax],eax
     4d3:	00 00                	add    BYTE PTR [eax],al
     4d5:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     4d8:	e1 00                	loope  4da <sysEnter_Vector-0x12fb26>
     4da:	00 00                	add    BYTE PTR [eax],al
     4dc:	05 04 25 00 00       	add    eax,0x2504
     4e1:	00 06                	add    BYTE PTR [esi],al
     4e3:	fc                   	cld    
     4e4:	01 00                	add    DWORD PTR [eax],eax
     4e6:	00 01                	add    BYTE PTR [ecx],al
     4e8:	09 b4 01 00 30 77 00 	or     DWORD PTR [ecx+eax*1+0x773000],esi
     4ef:	00 00                	add    BYTE PTR [eax],al
     4f1:	01 9c de 00 00 00 07 	add    DWORD PTR [esi+ebx*8+0x7000000],ebx
     4f8:	73 00                	jae    4fa <sysEnter_Vector-0x12fb06>
     4fa:	01 09                	add    DWORD PTR [ecx],ecx
     4fc:	92                   	xchg   edx,eax
     4fd:	00 00                	add    BYTE PTR [eax],al
     4ff:	00 02                	add    BYTE PTR [edx],al
     501:	91                   	xchg   ecx,eax
     502:	00 08                	add    BYTE PTR [eax],cl
     504:	69 00 01 0b 3a 00    	imul   eax,DWORD PTR [eax],0x3a0b01
     50a:	00 00                	add    BYTE PTR [eax],al
     50c:	02 91 6c 08 6a 00    	add    dl,BYTE PTR [ecx+0x6a086c]
     512:	01 0b                	add    DWORD PTR [ebx],ecx
     514:	3a 00                	cmp    al,BYTE PTR [eax]
     516:	00 00                	add    BYTE PTR [eax],al
     518:	02 91 68 08 63 00    	add    dl,BYTE PTR [ecx+0x630868]
     51e:	01 0c 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],ecx
     525:	91                   	xchg   ecx,eax
     526:	67 00 06 f2 01       	add    BYTE PTR ds:0x1f2,al
     52b:	00 00                	add    BYTE PTR [eax],al
     52d:	01 15 2b 02 00 30    	add    DWORD PTR ds:0x3000022b,edx
     533:	bb 00 00 00 01       	mov    ebx,0x1000000
     538:	9c                   	pushf  
     539:	26 01 00             	add    DWORD PTR es:[eax],eax
     53c:	00 07                	add    BYTE PTR [edi],al
     53e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     53f:	00 01                	add    BYTE PTR [ecx],al
     541:	15 3a 00 00 00       	adc    eax,0x3a
     546:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     54c:	01 15 92 00 00 00    	add    DWORD PTR ds:0x92,edx
     552:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     558:	01 17                	add    DWORD PTR [edi],edx
     55a:	3a 00                	cmp    al,BYTE PTR [eax]
     55c:	00 00                	add    BYTE PTR [eax],al
     55e:	02 91 6c 09 05 02    	add    dl,BYTE PTR [ecx+0x205096c]
     564:	00 00                	add    BYTE PTR [eax],al
     566:	01 17                	add    DWORD PTR [edi],edx
     568:	3a 00                	cmp    al,BYTE PTR [eax]
     56a:	00 00                	add    BYTE PTR [eax],al
     56c:	02 91 68 00 06 e0    	add    dl,BYTE PTR [ecx-0x1ff9ff98]
     572:	01 00                	add    DWORD PTR [eax],eax
     574:	00 01                	add    BYTE PTR [ecx],al
     576:	25 e6 02 00 30       	and    eax,0x300002e6
     57b:	bb 00 00 00 01       	mov    ebx,0x1000000
     580:	9c                   	pushf  
     581:	6e                   	outs   dx,BYTE PTR ds:[esi]
     582:	01 00                	add    DWORD PTR [eax],eax
     584:	00 07                	add    BYTE PTR [edi],al
     586:	6e                   	outs   dx,BYTE PTR ds:[esi]
     587:	00 01                	add    BYTE PTR [ecx],al
     589:	25 3a 00 00 00       	and    eax,0x3a
     58e:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     594:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     59a:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     5a0:	01 27                	add    DWORD PTR [edi],esp
     5a2:	3a 00                	cmp    al,BYTE PTR [eax]
     5a4:	00 00                	add    BYTE PTR [eax],al
     5a6:	02 91 6c 09 05 02    	add    dl,BYTE PTR [ecx+0x205096c]
     5ac:	00 00                	add    BYTE PTR [eax],al
     5ae:	01 27                	add    DWORD PTR [edi],esp
     5b0:	3a 00                	cmp    al,BYTE PTR [eax]
     5b2:	00 00                	add    BYTE PTR [eax],al
     5b4:	02 91 68 00 0a f7    	add    dl,BYTE PTR [ecx-0x8f5ff98]
     5ba:	01 00                	add    DWORD PTR [eax],eax
     5bc:	00 01                	add    BYTE PTR [ecx],al
     5be:	36 3a 00             	cmp    al,BYTE PTR ss:[eax]
     5c1:	00 00                	add    BYTE PTR [eax],al
     5c3:	a1 03 00 30 5c       	mov    eax,ds:0x5c300003
     5c8:	00 00                	add    BYTE PTR [eax],al
     5ca:	00 01                	add    BYTE PTR [ecx],al
     5cc:	9c                   	pushf  
     5cd:	ba 01 00 00 07       	mov    edx,0x7000001
     5d2:	73 74                	jae    648 <sysEnter_Vector-0x12f9b8>
     5d4:	72 00                	jb     5d6 <sysEnter_Vector-0x12fa2a>
     5d6:	01 36                	add    DWORD PTR [esi],esi
     5d8:	92                   	xchg   edx,eax
     5d9:	00 00                	add    BYTE PTR [eax],al
     5db:	00 02                	add    BYTE PTR [edx],al
     5dd:	91                   	xchg   ecx,eax
     5de:	00 08                	add    BYTE PTR [eax],cl
     5e0:	72 65                	jb     647 <sysEnter_Vector-0x12f9b9>
     5e2:	73 00                	jae    5e4 <sysEnter_Vector-0x12fa1c>
     5e4:	01 38                	add    DWORD PTR [eax],edi
     5e6:	3a 00                	cmp    al,BYTE PTR [eax]
     5e8:	00 00                	add    BYTE PTR [eax],al
     5ea:	02 91 74 0b b8 03    	add    dl,BYTE PTR [ecx+0x3b80b74]
     5f0:	00 30                	add    BYTE PTR [eax],dh
     5f2:	40                   	inc    eax
     5f3:	00 00                	add    BYTE PTR [eax],al
     5f5:	00 08                	add    BYTE PTR [eax],cl
     5f7:	69 00 01 3c 3a 00    	imul   eax,DWORD PTR [eax],0x3a3c01
     5fd:	00 00                	add    BYTE PTR [eax],al
     5ff:	02 91 70 00 00 0c    	add    dl,BYTE PTR [ecx+0xc000070]
     605:	4b                   	dec    ebx
     606:	00 00                	add    BYTE PTR [eax],al
     608:	00 02                	add    BYTE PTR [edx],al
     60a:	34 56                	xor    al,0x56
     60c:	00 00                	add    BYTE PTR [eax],al
     60e:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
     614:	30 0c af             	xor    BYTE PTR [edi+ebp*4],cl
     617:	00 00                	add    BYTE PTR [eax],al
     619:	00 02                	add    BYTE PTR [edx],al
     61b:	35 56 00 00 00       	xor    eax,0x56
     620:	05 03 00 45 00       	add    eax,0x450003
     625:	30 0c 5b             	xor    BYTE PTR [ebx+ebx*2],cl
     628:	01 00                	add    DWORD PTR [eax],eax
     62a:	00 02                	add    BYTE PTR [edx],al
     62c:	36                   	ss
     62d:	56                   	push   esi
     62e:	00 00                	add    BYTE PTR [eax],al
     630:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
     636:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
     639:	00 00                	add    BYTE PTR [eax],al
     63b:	00 02                	add    BYTE PTR [edx],al
     63d:	37                   	aaa    
     63e:	56                   	push   esi
     63f:	00 00                	add    BYTE PTR [eax],al
     641:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
     647:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
     64a:	00 00                	add    BYTE PTR [eax],al
     64c:	00 03                	add    BYTE PTR [ebx],al
     64e:	46                   	inc    esi
     64f:	0f 02 00             	lar    eax,WORD PTR [eax]
     652:	00 05 03 04 45 00    	add    BYTE PTR ds:0x450403,al
     658:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
     65e:	00 00                	add    BYTE PTR [eax],al
     660:	b2 01                	mov    dl,0x1
     662:	00 00                	add    BYTE PTR [eax],al
     664:	04 00                	add    al,0x0
     666:	74 02                	je     66a <sysEnter_Vector-0x12f996>
     668:	00 00                	add    BYTE PTR [eax],al
     66a:	04 01                	add    al,0x1
     66c:	f4                   	hlt    
     66d:	00 00                	add    BYTE PTR [eax],al
     66f:	00 0c 2c             	add    BYTE PTR [esp+ebp*1],cl
     672:	02 00                	add    al,BYTE PTR [eax]
     674:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     677:	00 00                	add    BYTE PTR [eax],al
     679:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     67c:	30 6b 02             	xor    BYTE PTR [ebx+0x2],ch
     67f:	00 00                	add    BYTE PTR [eax],al
     681:	c7 03 00 00 02 01    	mov    DWORD PTR [ebx],0x1020000
     687:	06                   	push   es
     688:	64 00 00             	add    BYTE PTR fs:[eax],al
     68b:	00 02                	add    BYTE PTR [edx],al
     68d:	01 06                	add    DWORD PTR [esi],eax
     68f:	5d                   	pop    ebp
     690:	00 00                	add    BYTE PTR [eax],al
     692:	00 02                	add    BYTE PTR [edx],al
     694:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     69a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     6a1:	02 08                	add    cl,BYTE PTR [eax]
     6a3:	05 00 00 00 00       	add    eax,0x0
     6a8:	02 01                	add    al,BYTE PTR [ecx]
     6aa:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     6ad:	00 00                	add    BYTE PTR [eax],al
     6af:	02 02                	add    al,BYTE PTR [edx]
     6b1:	07                   	pop    es
     6b2:	0e                   	push   cs
     6b3:	00 00                	add    BYTE PTR [eax],al
     6b5:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     6b8:	00 00                	add    BYTE PTR [eax],al
     6ba:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     6bd:	61                   	popa   
     6be:	00 00                	add    BYTE PTR [eax],al
     6c0:	00 02                	add    BYTE PTR [edx],al
     6c2:	04 07                	add    al,0x7
     6c4:	3e 00 00             	add    BYTE PTR ds:[eax],al
     6c7:	00 02                	add    BYTE PTR [edx],al
     6c9:	08 07                	or     BYTE PTR [edi],al
     6cb:	34 00                	xor    al,0x0
     6cd:	00 00                	add    BYTE PTR [eax],al
     6cf:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     6d6:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     6d9:	9b                   	fwait
     6da:	00 00                	add    BYTE PTR [eax],al
     6dc:	00 02                	add    BYTE PTR [edx],al
     6de:	01 02                	add    DWORD PTR [edx],eax
     6e0:	95                   	xchg   ebp,eax
     6e1:	00 00                	add    BYTE PTR [eax],al
     6e3:	00 02                	add    BYTE PTR [edx],al
     6e5:	04 07                	add    al,0x7
     6e7:	39 00                	cmp    DWORD PTR [eax],eax
     6e9:	00 00                	add    BYTE PTR [eax],al
     6eb:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     6ee:	e1 00                	loope  6f0 <sysEnter_Vector-0x12f910>
     6f0:	00 00                	add    BYTE PTR [eax],al
     6f2:	05 04 25 00 00       	add    eax,0x2504
     6f7:	00 06                	add    BYTE PTR [esi],al
     6f9:	25 02 00 00 01       	and    eax,0x1000002
     6fe:	09 3a                	or     DWORD PTR [edx],edi
     700:	00 00                	add    BYTE PTR [eax],al
     702:	00 00                	add    BYTE PTR [eax],al
     704:	04 00                	add    al,0x0
     706:	30 aa 00 00 00 01    	xor    BYTE PTR [edx+0x1000000],ch
     70c:	9c                   	pushf  
     70d:	e6 00                	out    0x0,al
     70f:	00 00                	add    BYTE PTR [eax],al
     711:	07                   	pop    es
     712:	3e 02 00             	add    al,BYTE PTR ds:[eax]
     715:	00 01                	add    BYTE PTR [ecx],al
     717:	09 92 00 00 00 02    	or     DWORD PTR [edx+0x2000000],edx
     71d:	91                   	xchg   ecx,eax
     71e:	00 07                	add    BYTE PTR [edi],al
     720:	0a 02                	or     al,BYTE PTR [edx]
     722:	00 00                	add    BYTE PTR [eax],al
     724:	01 09                	add    DWORD PTR [ecx],ecx
     726:	92                   	xchg   edx,eax
     727:	00 00                	add    BYTE PTR [eax],al
     729:	00 02                	add    BYTE PTR [edx],al
     72b:	91                   	xchg   ecx,eax
     72c:	04 08                	add    al,0x8
     72e:	12 04 00             	adc    al,BYTE PTR [eax+eax*1]
     731:	30 8e 00 00 00 09    	xor    BYTE PTR [esi+0x9000000],cl
     737:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
     73a:	00 01                	add    BYTE PTR [ecx],al
     73c:	0b 3a                	or     edi,DWORD PTR [edx]
     73e:	00 00                	add    BYTE PTR [eax],al
     740:	00 02                	add    BYTE PTR [edx],al
     742:	91                   	xchg   ecx,eax
     743:	6c                   	ins    BYTE PTR es:[edi],dx
     744:	00 00                	add    BYTE PTR [eax],al
     746:	0a 1e                	or     bl,BYTE PTR [esi]
     748:	02 00                	add    al,BYTE PTR [eax]
     74a:	00 01                	add    BYTE PTR [ecx],al
     74c:	14 aa                	adc    al,0xaa
     74e:	04 00                	add    al,0x0
     750:	30 c1                	xor    cl,al
     752:	01 00                	add    DWORD PTR [eax],eax
     754:	00 01                	add    BYTE PTR [ecx],al
     756:	9c                   	pushf  
     757:	5a                   	pop    edx
     758:	01 00                	add    DWORD PTR [eax],eax
     75a:	00 07                	add    BYTE PTR [edi],al
     75c:	3e 02 00             	add    al,BYTE PTR ds:[eax]
     75f:	00 01                	add    BYTE PTR [ecx],al
     761:	14 92                	adc    al,0x92
     763:	00 00                	add    BYTE PTR [eax],al
     765:	00 02                	add    BYTE PTR [edx],al
     767:	91                   	xchg   ecx,eax
     768:	00 07                	add    BYTE PTR [edi],al
     76a:	0a 02                	or     al,BYTE PTR [edx]
     76c:	00 00                	add    BYTE PTR [eax],al
     76e:	01 14 92             	add    DWORD PTR [edx+edx*4],edx
     771:	00 00                	add    BYTE PTR [eax],al
     773:	00 02                	add    BYTE PTR [edx],al
     775:	91                   	xchg   ecx,eax
     776:	04 0b                	add    al,0xb
     778:	10 02                	adc    BYTE PTR [edx],al
     77a:	00 00                	add    BYTE PTR [eax],al
     77c:	01 16                	add    DWORD PTR [esi],edx
     77e:	56                   	push   esi
     77f:	00 00                	add    BYTE PTR [eax],al
     781:	00 02                	add    BYTE PTR [edx],al
     783:	91                   	xchg   ecx,eax
     784:	6c                   	ins    BYTE PTR es:[edi],dx
     785:	0c c3                	or     al,0xc3
     787:	04 00                	add    al,0x0
     789:	30 eb                	xor    bl,ch
     78b:	00 00                	add    BYTE PTR [eax],al
     78d:	00 41 01             	add    BYTE PTR [ecx+0x1],al
     790:	00 00                	add    BYTE PTR [eax],al
     792:	09 63 6e             	or     DWORD PTR [ebx+0x6e],esp
     795:	74 00                	je     797 <sysEnter_Vector-0x12f869>
     797:	01 18                	add    DWORD PTR [eax],ebx
     799:	3a 00                	cmp    al,BYTE PTR [eax]
     79b:	00 00                	add    BYTE PTR [eax],al
     79d:	02 91 68 00 08 ae    	add    dl,BYTE PTR [ecx-0x51f7ff98]
     7a3:	05 00 30 b8 00       	add    eax,0xb83000
     7a8:	00 00                	add    BYTE PTR [eax],al
     7aa:	09 63 6e             	or     DWORD PTR [ebx+0x6e],esp
     7ad:	74 00                	je     7af <sysEnter_Vector-0x12f851>
     7af:	01 24 3a             	add    DWORD PTR [edx+edi*1],esp
     7b2:	00 00                	add    BYTE PTR [eax],al
     7b4:	00 02                	add    BYTE PTR [edx],al
     7b6:	91                   	xchg   ecx,eax
     7b7:	64 00 00             	add    BYTE PTR fs:[eax],al
     7ba:	0d 4b 00 00 00       	or     eax,0x4b
     7bf:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     7c2:	00 00                	add    BYTE PTR [eax],al
     7c4:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
     7ca:	30 0d af 00 00 00    	xor    BYTE PTR ds:0xaf,cl
     7d0:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
     7d6:	05 03 00 45 00       	add    eax,0x450003
     7db:	30 0d 5b 01 00 00    	xor    BYTE PTR ds:0x15b,cl
     7e1:	02 36                	add    dh,BYTE PTR [esi]
     7e3:	56                   	push   esi
     7e4:	00 00                	add    BYTE PTR [eax],al
     7e6:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
     7ec:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
     7f2:	02 37                	add    dh,BYTE PTR [edi]
     7f4:	56                   	push   esi
     7f5:	00 00                	add    BYTE PTR [eax],al
     7f7:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
     7fd:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
     803:	03 46 af             	add    eax,DWORD PTR [esi-0x51]
     806:	01 00                	add    DWORD PTR [eax],eax
     808:	00 05 03 04 45 00    	add    BYTE PTR ds:0x450403,al
     80e:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
     814:	00 00                	add    BYTE PTR [eax],al
     816:	fa                   	cli    
     817:	02 00                	add    al,BYTE PTR [eax]
     819:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     81c:	3c 03                	cmp    al,0x3
     81e:	00 00                	add    BYTE PTR [eax],al
     820:	04 01                	add    al,0x1
     822:	f4                   	hlt    
     823:	00 00                	add    BYTE PTR [eax],al
     825:	00 0c a1             	add    BYTE PTR [ecx+eiz*4],cl
     828:	02 00                	add    al,BYTE PTR [eax]
     82a:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     82d:	00 00                	add    BYTE PTR [eax],al
     82f:	6c                   	ins    BYTE PTR es:[edi],dx
     830:	06                   	push   es
     831:	00 30                	add    BYTE PTR [eax],dh
     833:	f2 00 00             	repnz add BYTE PTR [eax],al
     836:	00 d1                	add    cl,dl
     838:	04 00                	add    al,0x0
     83a:	00 02                	add    BYTE PTR [edx],al
     83c:	01 06                	add    DWORD PTR [esi],eax
     83e:	64 00 00             	add    BYTE PTR fs:[eax],al
     841:	00 02                	add    BYTE PTR [edx],al
     843:	01 06                	add    DWORD PTR [esi],eax
     845:	5d                   	pop    ebp
     846:	00 00                	add    BYTE PTR [eax],al
     848:	00 02                	add    BYTE PTR [edx],al
     84a:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     850:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     857:	02 08                	add    cl,BYTE PTR [eax]
     859:	05 00 00 00 00       	add    eax,0x0
     85e:	02 01                	add    al,BYTE PTR [ecx]
     860:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     863:	00 00                	add    BYTE PTR [eax],al
     865:	02 02                	add    al,BYTE PTR [edx]
     867:	07                   	pop    es
     868:	0e                   	push   cs
     869:	00 00                	add    BYTE PTR [eax],al
     86b:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     86e:	00 00                	add    BYTE PTR [eax],al
     870:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     873:	61                   	popa   
     874:	00 00                	add    BYTE PTR [eax],al
     876:	00 02                	add    BYTE PTR [edx],al
     878:	04 07                	add    al,0x7
     87a:	3e 00 00             	add    BYTE PTR ds:[eax],al
     87d:	00 02                	add    BYTE PTR [edx],al
     87f:	08 07                	or     BYTE PTR [edi],al
     881:	34 00                	xor    al,0x0
     883:	00 00                	add    BYTE PTR [eax],al
     885:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     88c:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     88f:	9b                   	fwait
     890:	00 00                	add    BYTE PTR [eax],al
     892:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
     898:	00 06                	add    BYTE PTR [esi],al
     89a:	25 00 00 00 02       	and    eax,0x2000000
     89f:	01 02                	add    DWORD PTR [edx],eax
     8a1:	95                   	xchg   ebp,eax
     8a2:	00 00                	add    BYTE PTR [eax],al
     8a4:	00 07                	add    BYTE PTR [edi],al
     8a6:	07                   	pop    es
     8a7:	03 00                	add    eax,DWORD PTR [eax]
     8a9:	00 04 61             	add    BYTE PTR [ecx+eiz*2],al
     8ac:	00 00                	add    BYTE PTR [eax],al
     8ae:	00 05 15 4a 01 00    	add    BYTE PTR ds:0x14a15,al
     8b4:	00 08                	add    BYTE PTR [eax],cl
     8b6:	6c                   	ins    BYTE PTR es:[edi],dx
     8b7:	03 00                	add    eax,DWORD PTR [eax]
     8b9:	00 00                	add    BYTE PTR [eax],al
     8bb:	08 a4 03 00 00 01 08 	or     BYTE PTR [ebx+eax*1+0x8010000],ah
     8c2:	73 02                	jae    8c6 <sysEnter_Vector-0x12f73a>
     8c4:	00 00                	add    BYTE PTR [eax],al
     8c6:	02 08                	add    cl,BYTE PTR [eax]
     8c8:	f9                   	stc    
     8c9:	02 00                	add    al,BYTE PTR [eax]
     8cb:	00 03                	add    BYTE PTR [ebx],al
     8cd:	08 53 02             	or     BYTE PTR [ebx+0x2],dl
     8d0:	00 00                	add    BYTE PTR [eax],al
     8d2:	04 08                	add    al,0x8
     8d4:	be 03 00 00 05       	mov    esi,0x5000003
     8d9:	08 1d 03 00 00 06    	or     BYTE PTR ds:0x6000003,bl
     8df:	08 66 02             	or     BYTE PTR [esi+0x2],ah
     8e2:	00 00                	add    BYTE PTR [eax],al
     8e4:	07                   	pop    es
     8e5:	08 f4                	or     ah,dh
     8e7:	03 00                	add    eax,DWORD PTR [eax]
     8e9:	00 4f 08             	add    BYTE PTR [edi+0x8],cl
     8ec:	5f                   	pop    edi
     8ed:	03 00                	add    eax,DWORD PTR [eax]
     8ef:	00 59 08             	add    BYTE PTR [ecx+0x8],bl
     8f2:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
     8f5:	00 61 08             	add    BYTE PTR [ecx+0x8],ah
     8f8:	e5 02                	in     eax,0x2
     8fa:	00 00                	add    BYTE PTR [eax],al
     8fc:	97                   	xchg   edi,eax
     8fd:	09 7c 03 00          	or     DWORD PTR [ebx+eax*1+0x0],edi
     901:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     904:	09 52 03             	or     DWORD PTR [edx+0x3],edx
     907:	00 00                	add    BYTE PTR [eax],al
     909:	64 01 09             	add    DWORD PTR fs:[ecx],ecx
     90c:	e6 03                	out    0x3,al
     90e:	00 00                	add    BYTE PTR [eax],al
     910:	65 01 09             	add    DWORD PTR gs:[ecx],ecx
     913:	c7 02 00 00 66 01    	mov    DWORD PTR [edx],0x1660000
     919:	09 1b                	or     DWORD PTR [ebx],ebx
     91b:	04 00                	add    al,0x0
     91d:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     920:	09 2a                	or     DWORD PTR [edx],ebp
     922:	03 00                	add    eax,DWORD PTR [eax]
     924:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     927:	09 ac 02 00 00 69 01 	or     DWORD PTR [edx+eax*1+0x1690000],ebp
     92e:	09 93 03 00 00 70    	or     DWORD PTR [ebx+0x70000003],edx
     934:	01 09                	add    DWORD PTR [ecx],ecx
     936:	d5 02                	aad    0x2
     938:	00 00                	add    BYTE PTR [eax],al
     93a:	71 01                	jno    93d <sysEnter_Vector-0x12f6c3>
     93c:	09 cc                	or     esp,ecx
     93e:	03 00                	add    eax,DWORD PTR [eax]
     940:	00 00                	add    BYTE PTR [eax],al
     942:	03 09                	add    ecx,DWORD PTR [ecx]
     944:	37                   	aaa    
     945:	03 00                	add    eax,DWORD PTR [eax]
     947:	00 01                	add    BYTE PTR [ecx],al
     949:	03 09                	add    ecx,DWORD PTR [ecx]
     94b:	bb 02 00 00 02       	mov    ebx,0x2000002
     950:	03 09                	add    ecx,DWORD PTR [ecx]
     952:	80 02 00             	add    BYTE PTR [edx],0x0
     955:	00 03                	add    BYTE PTR [ebx],al
     957:	03 09                	add    ecx,DWORD PTR [ecx]
     959:	90                   	nop
     95a:	02 00                	add    al,BYTE PTR [eax]
     95c:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     95f:	00 02                	add    BYTE PTR [edx],al
     961:	04 07                	add    al,0x7
     963:	39 00                	cmp    DWORD PTR [eax],eax
     965:	00 00                	add    BYTE PTR [eax],al
     967:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     96a:	e1 00                	loope  96c <sysEnter_Vector-0x12f694>
     96c:	00 00                	add    BYTE PTR [eax],al
     96e:	0a 04 05 04 25 00 00 	or     al,BYTE PTR [eax*1+0x2504]
     975:	00 0b                	add    BYTE PTR [ebx],cl
     977:	16                   	push   ss
     978:	04 00                	add    al,0x0
     97a:	00 01                	add    BYTE PTR [ecx],al
     97c:	09 58 01             	or     DWORD PTR [eax+0x1],ebx
     97f:	00 00                	add    BYTE PTR [eax],al
     981:	6c                   	ins    BYTE PTR es:[edi],dx
     982:	06                   	push   es
     983:	00 30                	add    BYTE PTR [eax],dh
     985:	2d 00 00 00 01       	sub    eax,0x1000000
     98a:	9c                   	pushf  
     98b:	96                   	xchg   esi,eax
     98c:	01 00                	add    DWORD PTR [eax],eax
     98e:	00 0c b1             	add    BYTE PTR [ecx+esi*4],cl
     991:	08 00                	or     BYTE PTR [eax],al
     993:	00 01                	add    BYTE PTR [ecx],al
     995:	09 5a 01             	or     DWORD PTR [edx+0x1],ebx
     998:	00 00                	add    BYTE PTR [eax],al
     99a:	02 91 00 0c 5f 08    	add    dl,BYTE PTR [ecx+0x85f0c00]
     9a0:	00 00                	add    BYTE PTR [eax],al
     9a2:	01 09                	add    DWORD PTR [ecx],ecx
     9a4:	7d 00                	jge    9a6 <sysEnter_Vector-0x12f65a>
     9a6:	00 00                	add    BYTE PTR [eax],al
     9a8:	02 91 04 00 0d 4d    	add    dl,BYTE PTR [ecx+0x4d0d0004]
     9ae:	02 00                	add    al,BYTE PTR [eax]
     9b0:	00 01                	add    BYTE PTR [ecx],al
     9b2:	0e                   	push   cs
     9b3:	99                   	cdq    
     9b4:	06                   	push   es
     9b5:	00 30                	add    BYTE PTR [eax],dh
     9b7:	2a 00                	sub    al,BYTE PTR [eax]
     9b9:	00 00                	add    BYTE PTR [eax],al
     9bb:	01 9c ba 01 00 00 0c 	add    DWORD PTR [edx+edi*4+0xc000001],ebx
     9c2:	da 03                	fiadd  DWORD PTR [ebx]
     9c4:	00 00                	add    BYTE PTR [eax],al
     9c6:	01 0e                	add    DWORD PTR [esi],ecx
     9c8:	58                   	pop    eax
     9c9:	01 00                	add    DWORD PTR [eax],eax
     9cb:	00 02                	add    BYTE PTR [edx],al
     9cd:	91                   	xchg   ecx,eax
     9ce:	00 00                	add    BYTE PTR [eax],al
     9d0:	0b 18                	or     ebx,DWORD PTR [eax]
     9d2:	03 00                	add    eax,DWORD PTR [eax]
     9d4:	00 01                	add    BYTE PTR [ecx],al
     9d6:	13 3a                	adc    edi,DWORD PTR [edx]
     9d8:	00 00                	add    BYTE PTR [eax],al
     9da:	00 c3                	add    bl,al
     9dc:	06                   	push   es
     9dd:	00 30                	add    BYTE PTR [eax],dh
     9df:	35 00 00 00 01       	xor    eax,0x1000000
     9e4:	9c                   	pushf  
     9e5:	0c 02                	or     al,0x2
     9e7:	00 00                	add    BYTE PTR [eax],al
     9e9:	0c da                	or     al,0xda
     9eb:	03 00                	add    eax,DWORD PTR [eax]
     9ed:	00 01                	add    BYTE PTR [ecx],al
     9ef:	13 58 01             	adc    ebx,DWORD PTR [eax+0x1]
     9f2:	00 00                	add    BYTE PTR [eax],al
     9f4:	02 91 00 0c b7 03    	add    dl,BYTE PTR [ecx+0x3b70c00]
     9fa:	00 00                	add    BYTE PTR [eax],al
     9fc:	01 13                	add    DWORD PTR [ebx],edx
     9fe:	58                   	pop    eax
     9ff:	01 00                	add    DWORD PTR [eax],eax
     a01:	00 02                	add    BYTE PTR [edx],al
     a03:	91                   	xchg   ecx,eax
     a04:	04 0c                	add    al,0xc
     a06:	e1 03                	loope  a0b <sysEnter_Vector-0x12f5f5>
     a08:	00 00                	add    BYTE PTR [eax],al
     a0a:	01 13                	add    DWORD PTR [ebx],edx
     a0c:	3a 00                	cmp    al,BYTE PTR [eax]
     a0e:	00 00                	add    BYTE PTR [eax],al
     a10:	02 91 08 0c 11 03    	add    dl,BYTE PTR [ecx+0x3110c08]
     a16:	00 00                	add    BYTE PTR [eax],al
     a18:	01 13                	add    DWORD PTR [ebx],edx
     a1a:	3a 00                	cmp    al,BYTE PTR [eax]
     a1c:	00 00                	add    BYTE PTR [eax],al
     a1e:	02 91 0c 00 0b 60    	add    dl,BYTE PTR [ecx+0x600b000c]
     a24:	02 00                	add    al,BYTE PTR [eax]
     a26:	00 01                	add    BYTE PTR [ecx],al
     a28:	18 3a                	sbb    BYTE PTR [edx],bh
     a2a:	00 00                	add    BYTE PTR [eax],al
     a2c:	00 f8                	add    al,bh
     a2e:	06                   	push   es
     a2f:	00 30                	add    BYTE PTR [eax],dh
     a31:	35 00 00 00 01       	xor    eax,0x1000000
     a36:	9c                   	pushf  
     a37:	5e                   	pop    esi
     a38:	02 00                	add    al,BYTE PTR [eax]
     a3a:	00 0c da             	add    BYTE PTR [edx+ebx*8],cl
     a3d:	03 00                	add    eax,DWORD PTR [eax]
     a3f:	00 01                	add    BYTE PTR [ecx],al
     a41:	18 58 01             	sbb    BYTE PTR [eax+0x1],bl
     a44:	00 00                	add    BYTE PTR [eax],al
     a46:	02 91 00 0c b7 03    	add    dl,BYTE PTR [ecx+0x3b70c00]
     a4c:	00 00                	add    BYTE PTR [eax],al
     a4e:	01 18                	add    DWORD PTR [eax],ebx
     a50:	58                   	pop    eax
     a51:	01 00                	add    DWORD PTR [eax],eax
     a53:	00 02                	add    BYTE PTR [edx],al
     a55:	91                   	xchg   ecx,eax
     a56:	04 0c                	add    al,0xc
     a58:	e1 03                	loope  a5d <sysEnter_Vector-0x12f5a3>
     a5a:	00 00                	add    BYTE PTR [eax],al
     a5c:	01 18                	add    DWORD PTR [eax],ebx
     a5e:	3a 00                	cmp    al,BYTE PTR [eax]
     a60:	00 00                	add    BYTE PTR [eax],al
     a62:	02 91 08 0c 11 03    	add    dl,BYTE PTR [ecx+0x3110c08]
     a68:	00 00                	add    BYTE PTR [eax],al
     a6a:	01 18                	add    DWORD PTR [eax],ebx
     a6c:	3a 00                	cmp    al,BYTE PTR [eax]
     a6e:	00 00                	add    BYTE PTR [eax],al
     a70:	02 91 0c 00 0b 46    	add    dl,BYTE PTR [ecx+0x460b000c]
     a76:	02 00                	add    al,BYTE PTR [eax]
     a78:	00 01                	add    BYTE PTR [ecx],al
     a7a:	1e                   	push   ds
     a7b:	3a 00                	cmp    al,BYTE PTR [eax]
     a7d:	00 00                	add    BYTE PTR [eax],al
     a7f:	2d 07 00 30 31       	sub    eax,0x31300007
     a84:	00 00                	add    BYTE PTR [eax],al
     a86:	00 01                	add    BYTE PTR [ecx],al
     a88:	9c                   	pushf  
     a89:	a2 02 00 00 0c       	mov    ds:0xc000002,al
     a8e:	b1 08                	mov    cl,0x8
     a90:	00 00                	add    BYTE PTR [eax],al
     a92:	01 1e                	add    DWORD PTR [esi],ebx
     a94:	5a                   	pop    edx
     a95:	01 00                	add    DWORD PTR [eax],eax
     a97:	00 02                	add    BYTE PTR [edx],al
     a99:	91                   	xchg   ecx,eax
     a9a:	00 0c b7             	add    BYTE PTR [edi+esi*4],cl
     a9d:	03 00                	add    eax,DWORD PTR [eax]
     a9f:	00 01                	add    BYTE PTR [ecx],al
     aa1:	1e                   	push   ds
     aa2:	5a                   	pop    edx
     aa3:	01 00                	add    DWORD PTR [eax],eax
     aa5:	00 02                	add    BYTE PTR [edx],al
     aa7:	91                   	xchg   ecx,eax
     aa8:	04 0c                	add    al,0xc
     aaa:	46                   	inc    esi
     aab:	03 00                	add    eax,DWORD PTR [eax]
     aad:	00 01                	add    BYTE PTR [ecx],al
     aaf:	1e                   	push   ds
     ab0:	3a 00                	cmp    al,BYTE PTR [eax]
     ab2:	00 00                	add    BYTE PTR [eax],al
     ab4:	02 91 08 00 0e 4b    	add    dl,BYTE PTR [ecx+0x4b0e0008]
     aba:	00 00                	add    BYTE PTR [eax],al
     abc:	00 02                	add    BYTE PTR [edx],al
     abe:	34 56                	xor    al,0x56
     ac0:	00 00                	add    BYTE PTR [eax],al
     ac2:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
     ac8:	30 0e                	xor    BYTE PTR [esi],cl
     aca:	af                   	scas   eax,DWORD PTR es:[edi]
     acb:	00 00                	add    BYTE PTR [eax],al
     acd:	00 02                	add    BYTE PTR [edx],al
     acf:	35 56 00 00 00       	xor    eax,0x56
     ad4:	05 03 00 45 00       	add    eax,0x450003
     ad9:	30 0e                	xor    BYTE PTR [esi],cl
     adb:	5b                   	pop    ebx
     adc:	01 00                	add    DWORD PTR [eax],eax
     ade:	00 02                	add    BYTE PTR [edx],al
     ae0:	36                   	ss
     ae1:	56                   	push   esi
     ae2:	00 00                	add    BYTE PTR [eax],al
     ae4:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
     aea:	30 0e                	xor    BYTE PTR [esi],cl
     aec:	54                   	push   esp
     aed:	00 00                	add    BYTE PTR [eax],al
     aef:	00 02                	add    BYTE PTR [edx],al
     af1:	37                   	aaa    
     af2:	56                   	push   esi
     af3:	00 00                	add    BYTE PTR [eax],al
     af5:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
     afb:	30 0e                	xor    BYTE PTR [esi],cl
     afd:	28 00                	sub    BYTE PTR [eax],al
     aff:	00 00                	add    BYTE PTR [eax],al
     b01:	03 46 f7             	add    eax,DWORD PTR [esi-0x9]
     b04:	02 00                	add    al,BYTE PTR [eax]
     b06:	00 05 03 04 45 00    	add    BYTE PTR ds:0x450403,al
     b0c:	30 05 04 5a 01 00    	xor    BYTE PTR ds:0x15a04,al
     b12:	00 00                	add    BYTE PTR [eax],al
     b14:	ae                   	scas   al,BYTE PTR es:[edi]
     b15:	02 00                	add    al,BYTE PTR [eax]
     b17:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     b1a:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
     b1d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     b20:	f4                   	hlt    
     b21:	00 00                	add    BYTE PTR [eax],al
     b23:	00 0c 46             	add    BYTE PTR [esi+eax*2],cl
     b26:	04 00                	add    al,0x0
     b28:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     b2b:	00 00                	add    BYTE PTR [eax],al
     b2d:	60                   	pusha  
     b2e:	07                   	pop    es
     b2f:	00 30                	add    BYTE PTR [eax],dh
     b31:	52                   	push   edx
     b32:	01 00                	add    DWORD PTR [eax],eax
     b34:	00 cd                	add    ch,cl
     b36:	05 00 00 02 01       	add    eax,0x1020000
     b3b:	06                   	push   es
     b3c:	64 00 00             	add    BYTE PTR fs:[eax],al
     b3f:	00 02                	add    BYTE PTR [edx],al
     b41:	01 06                	add    DWORD PTR [esi],eax
     b43:	5d                   	pop    ebp
     b44:	00 00                	add    BYTE PTR [eax],al
     b46:	00 02                	add    BYTE PTR [edx],al
     b48:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     b4e:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     b55:	02 08                	add    cl,BYTE PTR [eax]
     b57:	05 00 00 00 00       	add    eax,0x0
     b5c:	02 01                	add    al,BYTE PTR [ecx]
     b5e:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     b61:	00 00                	add    BYTE PTR [eax],al
     b63:	02 02                	add    al,BYTE PTR [edx]
     b65:	07                   	pop    es
     b66:	0e                   	push   cs
     b67:	00 00                	add    BYTE PTR [eax],al
     b69:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     b6c:	00 00                	add    BYTE PTR [eax],al
     b6e:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     b71:	61                   	popa   
     b72:	00 00                	add    BYTE PTR [eax],al
     b74:	00 02                	add    BYTE PTR [edx],al
     b76:	04 07                	add    al,0x7
     b78:	3e 00 00             	add    BYTE PTR ds:[eax],al
     b7b:	00 02                	add    BYTE PTR [edx],al
     b7d:	08 07                	or     BYTE PTR [edi],al
     b7f:	34 00                	xor    al,0x0
     b81:	00 00                	add    BYTE PTR [eax],al
     b83:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     b8a:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     b8d:	9b                   	fwait
     b8e:	00 00                	add    BYTE PTR [eax],al
     b90:	00 02                	add    BYTE PTR [edx],al
     b92:	01 02                	add    DWORD PTR [edx],eax
     b94:	95                   	xchg   ebp,eax
     b95:	00 00                	add    BYTE PTR [eax],al
     b97:	00 05 07 03 00 00    	add    BYTE PTR ds:0x307,al
     b9d:	04 61                	add    al,0x61
     b9f:	00 00                	add    BYTE PTR [eax],al
     ba1:	00 05 15 3f 01 00    	add    BYTE PTR ds:0x13f15,al
     ba7:	00 06                	add    BYTE PTR [esi],al
     ba9:	6c                   	ins    BYTE PTR es:[edi],dx
     baa:	03 00                	add    eax,DWORD PTR [eax]
     bac:	00 00                	add    BYTE PTR [eax],al
     bae:	06                   	push   es
     baf:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     bb0:	03 00                	add    eax,DWORD PTR [eax]
     bb2:	00 01                	add    BYTE PTR [ecx],al
     bb4:	06                   	push   es
     bb5:	73 02                	jae    bb9 <sysEnter_Vector-0x12f447>
     bb7:	00 00                	add    BYTE PTR [eax],al
     bb9:	02 06                	add    al,BYTE PTR [esi]
     bbb:	f9                   	stc    
     bbc:	02 00                	add    al,BYTE PTR [eax]
     bbe:	00 03                	add    BYTE PTR [ebx],al
     bc0:	06                   	push   es
     bc1:	53                   	push   ebx
     bc2:	02 00                	add    al,BYTE PTR [eax]
     bc4:	00 04 06             	add    BYTE PTR [esi+eax*1],al
     bc7:	be 03 00 00 05       	mov    esi,0x5000003
     bcc:	06                   	push   es
     bcd:	1d 03 00 00 06       	sbb    eax,0x6000003
     bd2:	06                   	push   es
     bd3:	66                   	data16
     bd4:	02 00                	add    al,BYTE PTR [eax]
     bd6:	00 07                	add    BYTE PTR [edi],al
     bd8:	06                   	push   es
     bd9:	f4                   	hlt    
     bda:	03 00                	add    eax,DWORD PTR [eax]
     bdc:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
     bdf:	5f                   	pop    edi
     be0:	03 00                	add    eax,DWORD PTR [eax]
     be2:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
     be5:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
     be8:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
     beb:	e5 02                	in     eax,0x2
     bed:	00 00                	add    BYTE PTR [eax],al
     bef:	97                   	xchg   edi,eax
     bf0:	07                   	pop    es
     bf1:	7c 03                	jl     bf6 <sysEnter_Vector-0x12f40a>
     bf3:	00 00                	add    BYTE PTR [eax],al
     bf5:	63 01                	arpl   WORD PTR [ecx],ax
     bf7:	07                   	pop    es
     bf8:	52                   	push   edx
     bf9:	03 00                	add    eax,DWORD PTR [eax]
     bfb:	00 64 01 07          	add    BYTE PTR [ecx+eax*1+0x7],ah
     bff:	e6 03                	out    0x3,al
     c01:	00 00                	add    BYTE PTR [eax],al
     c03:	65 01 07             	add    DWORD PTR gs:[edi],eax
     c06:	c7 02 00 00 66 01    	mov    DWORD PTR [edx],0x1660000
     c0c:	07                   	pop    es
     c0d:	1b 04 00             	sbb    eax,DWORD PTR [eax+eax*1]
     c10:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     c13:	07                   	pop    es
     c14:	2a 03                	sub    al,BYTE PTR [ebx]
     c16:	00 00                	add    BYTE PTR [eax],al
     c18:	68 01 07 ac 02       	push   0x2ac0701
     c1d:	00 00                	add    BYTE PTR [eax],al
     c1f:	69 01 07 93 03 00    	imul   eax,DWORD PTR [ecx],0x39307
     c25:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     c28:	07                   	pop    es
     c29:	d5 02                	aad    0x2
     c2b:	00 00                	add    BYTE PTR [eax],al
     c2d:	71 01                	jno    c30 <sysEnter_Vector-0x12f3d0>
     c2f:	07                   	pop    es
     c30:	cc                   	int3   
     c31:	03 00                	add    eax,DWORD PTR [eax]
     c33:	00 00                	add    BYTE PTR [eax],al
     c35:	03 07                	add    eax,DWORD PTR [edi]
     c37:	37                   	aaa    
     c38:	03 00                	add    eax,DWORD PTR [eax]
     c3a:	00 01                	add    BYTE PTR [ecx],al
     c3c:	03 07                	add    eax,DWORD PTR [edi]
     c3e:	bb 02 00 00 02       	mov    ebx,0x2000002
     c43:	03 07                	add    eax,DWORD PTR [edi]
     c45:	80 02 00             	add    BYTE PTR [edx],0x0
     c48:	00 03                	add    BYTE PTR [ebx],al
     c4a:	03 07                	add    eax,DWORD PTR [edi]
     c4c:	90                   	nop
     c4d:	02 00                	add    al,BYTE PTR [eax]
     c4f:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     c52:	00 02                	add    BYTE PTR [edx],al
     c54:	04 07                	add    al,0x7
     c56:	39 00                	cmp    DWORD PTR [eax],eax
     c58:	00 00                	add    BYTE PTR [eax],al
     c5a:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     c5d:	e1 00                	loope  c5f <sysEnter_Vector-0x12f3a1>
     c5f:	00 00                	add    BYTE PTR [eax],al
     c61:	08 04 25 00 00 00 09 	or     BYTE PTR [eiz*1+0x9000000],al
     c68:	75 04                	jne    c6e <sysEnter_Vector-0x12f392>
     c6a:	00 00                	add    BYTE PTR [eax],al
     c6c:	01 0f                	add    DWORD PTR [edi],ecx
     c6e:	60                   	pusha  
     c6f:	07                   	pop    es
     c70:	00 30                	add    BYTE PTR [eax],dh
     c72:	26 00 00             	add    BYTE PTR es:[eax],al
     c75:	00 01                	add    BYTE PTR [ecx],al
     c77:	9c                   	pushf  
     c78:	77 01                	ja     c7b <sysEnter_Vector-0x12f385>
     c7a:	00 00                	add    BYTE PTR [eax],al
     c7c:	0a b7 03 00 00 01    	or     dh,BYTE PTR [edi+0x1000003]
     c82:	0f 4d 01             	cmovge eax,DWORD PTR [ecx]
     c85:	00 00                	add    BYTE PTR [eax],al
     c87:	02 91 00 00 09 70    	add    dl,BYTE PTR [ecx+0x70090000]
     c8d:	04 00                	add    al,0x0
     c8f:	00 01                	add    BYTE PTR [ecx],al
     c91:	14 86                	adc    al,0x86
     c93:	07                   	pop    es
     c94:	00 30                	add    BYTE PTR [eax],dh
     c96:	43                   	inc    ebx
     c97:	00 00                	add    BYTE PTR [eax],al
     c99:	00 01                	add    BYTE PTR [ecx],al
     c9b:	9c                   	pushf  
     c9c:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     c9d:	01 00                	add    DWORD PTR [eax],eax
     c9f:	00 0b                	add    BYTE PTR [ebx],cl
     ca1:	63 00                	arpl   WORD PTR [eax],ax
     ca3:	01 14 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],edx
     caa:	91                   	xchg   ecx,eax
     cab:	60                   	pusha  
     cac:	0c b7                	or     al,0xb7
     cae:	03 00                	add    eax,DWORD PTR [eax]
     cb0:	00 01                	add    BYTE PTR [ecx],al
     cb2:	16                   	push   ss
     cb3:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     cb4:	01 00                	add    DWORD PTR [eax],eax
     cb6:	00 02                	add    BYTE PTR [edx],al
     cb8:	91                   	xchg   ecx,eax
     cb9:	72 00                	jb     cbb <sysEnter_Vector-0x12f345>
     cbb:	0d 25 00 00 00       	or     eax,0x25
     cc0:	b7 01                	mov    bh,0x1
     cc2:	00 00                	add    BYTE PTR [eax],al
     cc4:	0e                   	push   cs
     cc5:	46                   	inc    esi
     cc6:	01 00                	add    DWORD PTR [eax],eax
     cc8:	00 01                	add    BYTE PTR [ecx],al
     cca:	00 0f                	add    BYTE PTR [edi],cl
     ccc:	5f                   	pop    edi
     ccd:	04 00                	add    al,0x0
     ccf:	00 01                	add    BYTE PTR [ecx],al
     cd1:	1d 25 00 00 00       	sbb    eax,0x25
     cd6:	c9                   	leave  
     cd7:	07                   	pop    es
     cd8:	00 30                	add    BYTE PTR [eax],dh
     cda:	2f                   	das    
     cdb:	00 00                	add    BYTE PTR [eax],al
     cdd:	00 01                	add    BYTE PTR [ecx],al
     cdf:	9c                   	pushf  
     ce0:	dd 01                	fld    QWORD PTR [ecx]
     ce2:	00 00                	add    BYTE PTR [eax],al
     ce4:	10 63 00             	adc    BYTE PTR [ebx+0x0],ah
     ce7:	01 1f                	add    DWORD PTR [edi],ebx
     ce9:	25 00 00 00 02       	and    eax,0x2000000
     cee:	91                   	xchg   ecx,eax
     cef:	73 00                	jae    cf1 <sysEnter_Vector-0x12f30f>
     cf1:	11 6b 04             	adc    DWORD PTR [ebx+0x4],ebp
     cf4:	00 00                	add    BYTE PTR [eax],al
     cf6:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     cfc:	f8                   	clc    
     cfd:	07                   	pop    es
     cfe:	00 30                	add    BYTE PTR [eax],dh
     d00:	ba 00 00 00 01       	mov    edx,0x1000000
     d05:	9c                   	pushf  
     d06:	56                   	push   esi
     d07:	02 00                	add    al,BYTE PTR [eax]
     d09:	00 0a                	add    BYTE PTR [edx],cl
     d0b:	b7 03                	mov    bh,0x3
     d0d:	00 00                	add    BYTE PTR [eax],al
     d0f:	01 25 4d 01 00 00    	add    DWORD PTR ds:0x14d,esp
     d15:	02 91 00 0a 64 04    	add    dl,BYTE PTR [ecx+0x4640a00]
     d1b:	00 00                	add    BYTE PTR [eax],al
     d1d:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     d23:	02 91 04 0a 30 04    	add    dl,BYTE PTR [ecx+0x4300a04]
     d29:	00 00                	add    BYTE PTR [eax],al
     d2b:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     d31:	02 91 08 0c 58 04    	add    dl,BYTE PTR [ecx+0x4580c08]
     d37:	00 00                	add    BYTE PTR [eax],al
     d39:	01 27                	add    DWORD PTR [edi],esp
     d3b:	25 00 00 00 02       	and    eax,0x2000000
     d40:	91                   	xchg   ecx,eax
     d41:	6b 10 6c             	imul   edx,DWORD PTR [eax],0x6c
     d44:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     d46:	00 01                	add    BYTE PTR [ecx],al
     d48:	28 3a                	sub    BYTE PTR [edx],bh
     d4a:	00 00                	add    BYTE PTR [eax],al
     d4c:	00 02                	add    BYTE PTR [edx],al
     d4e:	91                   	xchg   ecx,eax
     d4f:	6c                   	ins    BYTE PTR es:[edi],dx
     d50:	0c 41                	or     al,0x41
     d52:	04 00                	add    al,0x0
     d54:	00 01                	add    BYTE PTR [ecx],al
     d56:	29 a7 01 00 00 02    	sub    DWORD PTR [edi+0x2000001],esp
     d5c:	91                   	xchg   ecx,eax
     d5d:	69 12 37 04 00 00    	imul   edx,DWORD PTR [edx],0x437
     d63:	01 2e                	add    DWORD PTR [esi],ebp
     d65:	35 08 00 30 00       	xor    eax,0x300008
     d6a:	13 4b 00             	adc    ecx,DWORD PTR [ebx+0x0]
     d6d:	00 00                	add    BYTE PTR [eax],al
     d6f:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     d72:	00 00                	add    BYTE PTR [eax],al
     d74:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
     d7a:	30 13                	xor    BYTE PTR [ebx],dl
     d7c:	af                   	scas   eax,DWORD PTR es:[edi]
     d7d:	00 00                	add    BYTE PTR [eax],al
     d7f:	00 02                	add    BYTE PTR [edx],al
     d81:	35 56 00 00 00       	xor    eax,0x56
     d86:	05 03 00 45 00       	add    eax,0x450003
     d8b:	30 13                	xor    BYTE PTR [ebx],dl
     d8d:	5b                   	pop    ebx
     d8e:	01 00                	add    DWORD PTR [eax],eax
     d90:	00 02                	add    BYTE PTR [edx],al
     d92:	36                   	ss
     d93:	56                   	push   esi
     d94:	00 00                	add    BYTE PTR [eax],al
     d96:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
     d9c:	30 13                	xor    BYTE PTR [ebx],dl
     d9e:	54                   	push   esp
     d9f:	00 00                	add    BYTE PTR [eax],al
     da1:	00 02                	add    BYTE PTR [edx],al
     da3:	37                   	aaa    
     da4:	56                   	push   esi
     da5:	00 00                	add    BYTE PTR [eax],al
     da7:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
     dad:	30 13                	xor    BYTE PTR [ebx],dl
     daf:	28 00                	sub    BYTE PTR [eax],al
     db1:	00 00                	add    BYTE PTR [eax],al
     db3:	03 46 ab             	add    eax,DWORD PTR [esi-0x55]
     db6:	02 00                	add    al,BYTE PTR [eax]
     db8:	00 05 03 04 45 00    	add    BYTE PTR ds:0x450403,al
     dbe:	30 08                	xor    BYTE PTR [eax],cl
     dc0:	04 4d                	add    al,0x4d
     dc2:	01 00                	add    DWORD PTR [eax],eax
     dc4:	00 00                	add    BYTE PTR [eax],al
     dc6:	85 06                	test   DWORD PTR [esi],eax
     dc8:	00 00                	add    BYTE PTR [eax],al
     dca:	04 00                	add    al,0x0
     dcc:	22 05 00 00 04 01    	and    al,BYTE PTR ds:0x1040000
     dd2:	f4                   	hlt    
     dd3:	00 00                	add    BYTE PTR [eax],al
     dd5:	00 0c aa             	add    BYTE PTR [edx+ebp*4],cl
     dd8:	05 00 00 72 00       	add    eax,0x720000
     ddd:	00 00                	add    BYTE PTR [eax],al
     ddf:	b4 08                	mov    ah,0x8
     de1:	00 30                	add    BYTE PTR [eax],dh
     de3:	f3 05 00 00 f7 06    	repz add eax,0x6f70000
     de9:	00 00                	add    BYTE PTR [eax],al
     deb:	02 54 05 00          	add    dl,BYTE PTR [ebp+eax*1+0x0]
     def:	00 02                	add    BYTE PTR [edx],al
     df1:	28 30                	sub    BYTE PTR [eax],dh
     df3:	00 00                	add    BYTE PTR [eax],al
     df5:	00 03                	add    BYTE PTR [ebx],al
     df7:	04 c7                	add    al,0xc7
     df9:	04 00                	add    al,0x0
     dfb:	00 3a                	add    BYTE PTR [edx],bh
     dfd:	00 00                	add    BYTE PTR [eax],al
     dff:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     e02:	06                   	push   es
     e03:	64 00 00             	add    BYTE PTR fs:[eax],al
     e06:	00 02                	add    BYTE PTR [edx],al
     e08:	5b                   	pop    ebx
     e09:	05 00 00 02 62       	add    eax,0x62020000
     e0e:	25 00 00 00 04       	and    eax,0x4000000
     e13:	01 06                	add    DWORD PTR [esi],eax
     e15:	5d                   	pop    ebp
     e16:	00 00                	add    BYTE PTR [eax],al
     e18:	00 04 02             	add    BYTE PTR [edx+eax*1],al
     e1b:	05 ea 00 00 00       	add    eax,0xea
     e20:	05 04 05 69 6e       	add    eax,0x6e690504
     e25:	74 00                	je     e27 <sysEnter_Vector-0x12f1d9>
     e27:	04 08                	add    al,0x8
     e29:	05 00 00 00 00       	add    eax,0x0
     e2e:	04 01                	add    al,0x1
     e30:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     e33:	00 00                	add    BYTE PTR [eax],al
     e35:	04 02                	add    al,0x2
     e37:	07                   	pop    es
     e38:	0e                   	push   cs
     e39:	00 00                	add    BYTE PTR [eax],al
     e3b:	00 02                	add    BYTE PTR [edx],al
     e3d:	69 00 00 00 03 34    	imul   eax,DWORD PTR [eax],0x34030000
     e43:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
     e49:	07                   	pop    es
     e4a:	3e 00 00             	add    BYTE PTR ds:[eax],al
     e4d:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
     e50:	07                   	pop    es
     e51:	34 00                	xor    al,0x0
     e53:	00 00                	add    BYTE PTR [eax],al
     e55:	02 9b 04 00 00 03    	add    bl,BYTE PTR [ebx+0x3000004]
     e5b:	56                   	push   esi
     e5c:	81 00 00 00 02 94    	add    DWORD PTR [eax],0x94020000
     e62:	04 00                	add    al,0x0
     e64:	00 04 d8             	add    BYTE PTR [eax+ebx*8],al
     e67:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
     e6d:	05 05 00 00 00       	add    eax,0x5
     e72:	04 0c                	add    al,0xc
     e74:	04 9b                	add    al,0x9b
     e76:	00 00                	add    BYTE PTR [eax],al
     e78:	00 06                	add    BYTE PTR [esi],al
     e7a:	04 b9                	add    al,0xb9
     e7c:	00 00                	add    BYTE PTR [eax],al
     e7e:	00 07                	add    BYTE PTR [edi],al
     e80:	3a 00                	cmp    al,BYTE PTR [eax]
     e82:	00 00                	add    BYTE PTR [eax],al
     e84:	04 01                	add    al,0x1
     e86:	02 95 00 00 00 08    	add    dl,BYTE PTR [ebp+0x8000000]
     e8c:	07                   	pop    es
     e8d:	03 00                	add    eax,DWORD PTR [eax]
     e8f:	00 04 81             	add    BYTE PTR [ecx+eax*4],al
     e92:	00 00                	add    BYTE PTR [eax],al
     e94:	00 07                	add    BYTE PTR [edi],al
     e96:	15 80 01 00 00       	adc    eax,0x180
     e9b:	09 6c 03 00          	or     DWORD PTR [ebx+eax*1+0x0],ebp
     e9f:	00 00                	add    BYTE PTR [eax],al
     ea1:	09 a4 03 00 00 01 09 	or     DWORD PTR [ebx+eax*1+0x9010000],esp
     ea8:	73 02                	jae    eac <sysEnter_Vector-0x12f154>
     eaa:	00 00                	add    BYTE PTR [eax],al
     eac:	02 09                	add    cl,BYTE PTR [ecx]
     eae:	f9                   	stc    
     eaf:	02 00                	add    al,BYTE PTR [eax]
     eb1:	00 03                	add    BYTE PTR [ebx],al
     eb3:	09 53 02             	or     DWORD PTR [ebx+0x2],edx
     eb6:	00 00                	add    BYTE PTR [eax],al
     eb8:	04 09                	add    al,0x9
     eba:	be 03 00 00 05       	mov    esi,0x5000003
     ebf:	09 1d 03 00 00 06    	or     DWORD PTR ds:0x6000003,ebx
     ec5:	09 66 02             	or     DWORD PTR [esi+0x2],esp
     ec8:	00 00                	add    BYTE PTR [eax],al
     eca:	07                   	pop    es
     ecb:	09 f4                	or     esp,esi
     ecd:	03 00                	add    eax,DWORD PTR [eax]
     ecf:	00 4f 09             	add    BYTE PTR [edi+0x9],cl
     ed2:	5f                   	pop    edi
     ed3:	03 00                	add    eax,DWORD PTR [eax]
     ed5:	00 59 09             	add    BYTE PTR [ecx+0x9],bl
     ed8:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
     edb:	00 61 09             	add    BYTE PTR [ecx+0x9],ah
     ede:	e5 02                	in     eax,0x2
     ee0:	00 00                	add    BYTE PTR [eax],al
     ee2:	97                   	xchg   edi,eax
     ee3:	0a 7c 03 00          	or     bh,BYTE PTR [ebx+eax*1+0x0]
     ee7:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     eea:	0a 52 03             	or     dl,BYTE PTR [edx+0x3]
     eed:	00 00                	add    BYTE PTR [eax],al
     eef:	64 01 0a             	add    DWORD PTR fs:[edx],ecx
     ef2:	e6 03                	out    0x3,al
     ef4:	00 00                	add    BYTE PTR [eax],al
     ef6:	65 01 0a             	add    DWORD PTR gs:[edx],ecx
     ef9:	c7 02 00 00 66 01    	mov    DWORD PTR [edx],0x1660000
     eff:	0a 1b                	or     bl,BYTE PTR [ebx]
     f01:	04 00                	add    al,0x0
     f03:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     f06:	0a 2a                	or     ch,BYTE PTR [edx]
     f08:	03 00                	add    eax,DWORD PTR [eax]
     f0a:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     f0d:	0a ac 02 00 00 69 01 	or     ch,BYTE PTR [edx+eax*1+0x1690000]
     f14:	0a 93 03 00 00 70    	or     dl,BYTE PTR [ebx+0x70000003]
     f1a:	01 0a                	add    DWORD PTR [edx],ecx
     f1c:	d5 02                	aad    0x2
     f1e:	00 00                	add    BYTE PTR [eax],al
     f20:	71 01                	jno    f23 <sysEnter_Vector-0x12f0dd>
     f22:	0a cc                	or     cl,ah
     f24:	03 00                	add    eax,DWORD PTR [eax]
     f26:	00 00                	add    BYTE PTR [eax],al
     f28:	03 0a                	add    ecx,DWORD PTR [edx]
     f2a:	37                   	aaa    
     f2b:	03 00                	add    eax,DWORD PTR [eax]
     f2d:	00 01                	add    BYTE PTR [ecx],al
     f2f:	03 0a                	add    ecx,DWORD PTR [edx]
     f31:	bb 02 00 00 02       	mov    ebx,0x2000002
     f36:	03 0a                	add    ecx,DWORD PTR [edx]
     f38:	80 02 00             	add    BYTE PTR [edx],0x0
     f3b:	00 03                	add    BYTE PTR [ebx],al
     f3d:	03 0a                	add    ecx,DWORD PTR [edx]
     f3f:	90                   	nop
     f40:	02 00                	add    al,BYTE PTR [eax]
     f42:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     f45:	00 04 04             	add    BYTE PTR [esp+eax*1],al
     f48:	07                   	pop    es
     f49:	39 00                	cmp    DWORD PTR [eax],eax
     f4b:	00 00                	add    BYTE PTR [eax],al
     f4d:	04 04                	add    al,0x4
     f4f:	07                   	pop    es
     f50:	e1 00                	loope  f52 <sysEnter_Vector-0x12f0ae>
     f52:	00 00                	add    BYTE PTR [eax],al
     f54:	0b 04 06             	or     eax,DWORD PTR [esi+eax*1]
     f57:	04 3a                	add    al,0x3a
     f59:	00 00                	add    BYTE PTR [eax],al
     f5b:	00 0c 38             	add    BYTE PTR [eax+edi*1],cl
     f5e:	05 00 00 01 10       	add    eax,0x10010000
     f63:	5a                   	pop    edx
     f64:	00 00                	add    BYTE PTR [eax],al
     f66:	00 b4 08 00 30 3a 00 	add    BYTE PTR [eax+ecx*1+0x3a3000],dh
     f6d:	00 00                	add    BYTE PTR [eax],al
     f6f:	01 9c 04 02 00 00 0d 	add    DWORD PTR [esp+eax*1+0xd000002],ebx
     f76:	fa                   	cli    
     f77:	04 00                	add    al,0x0
     f79:	00 01                	add    BYTE PTR [ecx],al
     f7b:	10 5a 00             	adc    BYTE PTR [edx+0x0],bl
     f7e:	00 00                	add    BYTE PTR [eax],al
     f80:	02 91 00 0d 6b 05    	add    dl,BYTE PTR [ecx+0x56b0d00]
     f86:	00 00                	add    BYTE PTR [eax],al
     f88:	01 10                	add    DWORD PTR [eax],edx
     f8a:	76 00                	jbe    f8c <sysEnter_Vector-0x12f074>
     f8c:	00 00                	add    BYTE PTR [eax],al
     f8e:	02 91 04 0d 72 05    	add    dl,BYTE PTR [ecx+0x5720d04]
     f94:	00 00                	add    BYTE PTR [eax],al
     f96:	01 10                	add    DWORD PTR [eax],edx
     f98:	76 00                	jbe    f9a <sysEnter_Vector-0x12f066>
     f9a:	00 00                	add    BYTE PTR [eax],al
     f9c:	02 91 08 0d 79 05    	add    dl,BYTE PTR [ecx+0x5790d08]
     fa2:	00 00                	add    BYTE PTR [eax],al
     fa4:	01 10                	add    DWORD PTR [eax],edx
     fa6:	76 00                	jbe    fa8 <sysEnter_Vector-0x12f058>
     fa8:	00 00                	add    BYTE PTR [eax],al
     faa:	02 91 0c 0d 80 05    	add    dl,BYTE PTR [ecx+0x5800d0c]
     fb0:	00 00                	add    BYTE PTR [eax],al
     fb2:	01 10                	add    DWORD PTR [eax],edx
     fb4:	76 00                	jbe    fb6 <sysEnter_Vector-0x12f04a>
     fb6:	00 00                	add    BYTE PTR [eax],al
     fb8:	02 91 10 0e 7a 04    	add    dl,BYTE PTR [ecx+0x47a0e10]
     fbe:	00 00                	add    BYTE PTR [eax],al
     fc0:	01 12                	add    DWORD PTR [edx],edx
     fc2:	5a                   	pop    edx
     fc3:	00 00                	add    BYTE PTR [eax],al
     fc5:	00 02                	add    BYTE PTR [edx],al
     fc7:	91                   	xchg   ecx,eax
     fc8:	6c                   	ins    BYTE PTR es:[edi],dx
     fc9:	00 0c 2c             	add    BYTE PTR [esp+ebp*1],cl
     fcc:	05 00 00 01 17       	add    eax,0x17010000
     fd1:	5a                   	pop    edx
     fd2:	00 00                	add    BYTE PTR [eax],al
     fd4:	00 ee                	add    dh,ch
     fd6:	08 00                	or     BYTE PTR [eax],al
     fd8:	30 3c 00             	xor    BYTE PTR [eax+eax*1],bh
     fdb:	00 00                	add    BYTE PTR [eax],al
     fdd:	01 9c 64 02 00 00 0d 	add    DWORD PTR [esp+eiz*2+0xd000002],ebx
     fe4:	fa                   	cli    
     fe5:	04 00                	add    al,0x0
     fe7:	00 01                	add    BYTE PTR [ecx],al
     fe9:	17                   	pop    ss
     fea:	5a                   	pop    edx
     feb:	00 00                	add    BYTE PTR [eax],al
     fed:	00 02                	add    BYTE PTR [edx],al
     fef:	91                   	xchg   ecx,eax
     ff0:	00 0d 6b 05 00 00    	add    BYTE PTR ds:0x56b,cl
     ff6:	01 17                	add    DWORD PTR [edi],edx
     ff8:	76 00                	jbe    ffa <sysEnter_Vector-0x12f006>
     ffa:	00 00                	add    BYTE PTR [eax],al
     ffc:	02 91 04 0d 72 05    	add    dl,BYTE PTR [ecx+0x5720d04]
    1002:	00 00                	add    BYTE PTR [eax],al
    1004:	01 17                	add    DWORD PTR [edi],edx
    1006:	76 00                	jbe    1008 <sysEnter_Vector-0x12eff8>
    1008:	00 00                	add    BYTE PTR [eax],al
    100a:	02 91 08 0d 79 05    	add    dl,BYTE PTR [ecx+0x5790d08]
    1010:	00 00                	add    BYTE PTR [eax],al
    1012:	01 17                	add    DWORD PTR [edi],edx
    1014:	76 00                	jbe    1016 <sysEnter_Vector-0x12efea>
    1016:	00 00                	add    BYTE PTR [eax],al
    1018:	02 91 0c 0e 7a 04    	add    dl,BYTE PTR [ecx+0x47a0e0c]
    101e:	00 00                	add    BYTE PTR [eax],al
    1020:	01 19                	add    DWORD PTR [ecx],ebx
    1022:	5a                   	pop    edx
    1023:	00 00                	add    BYTE PTR [eax],al
    1025:	00 02                	add    BYTE PTR [edx],al
    1027:	91                   	xchg   ecx,eax
    1028:	6c                   	ins    BYTE PTR es:[edi],dx
    1029:	00 0c 20             	add    BYTE PTR [eax+eiz*1],cl
    102c:	05 00 00 01 1e       	add    eax,0x1e010000
    1031:	5a                   	pop    edx
    1032:	00 00                	add    BYTE PTR [eax],al
    1034:	00 2a                	add    BYTE PTR [edx],ch
    1036:	09 00                	or     DWORD PTR [eax],eax
    1038:	30 3e                	xor    BYTE PTR [esi],bh
    103a:	00 00                	add    BYTE PTR [eax],al
    103c:	00 01                	add    BYTE PTR [ecx],al
    103e:	9c                   	pushf  
    103f:	b6 02                	mov    dh,0x2
    1041:	00 00                	add    BYTE PTR [eax],al
    1043:	0d fa 04 00 00       	or     eax,0x4fa
    1048:	01 1e                	add    DWORD PTR [esi],ebx
    104a:	5a                   	pop    edx
    104b:	00 00                	add    BYTE PTR [eax],al
    104d:	00 02                	add    BYTE PTR [edx],al
    104f:	91                   	xchg   ecx,eax
    1050:	00 0d 6b 05 00 00    	add    BYTE PTR ds:0x56b,cl
    1056:	01 1e                	add    DWORD PTR [esi],ebx
    1058:	76 00                	jbe    105a <sysEnter_Vector-0x12efa6>
    105a:	00 00                	add    BYTE PTR [eax],al
    105c:	02 91 04 0d 72 05    	add    dl,BYTE PTR [ecx+0x5720d04]
    1062:	00 00                	add    BYTE PTR [eax],al
    1064:	01 1e                	add    DWORD PTR [esi],ebx
    1066:	76 00                	jbe    1068 <sysEnter_Vector-0x12ef98>
    1068:	00 00                	add    BYTE PTR [eax],al
    106a:	02 91 08 0e 7a 04    	add    dl,BYTE PTR [ecx+0x47a0e08]
    1070:	00 00                	add    BYTE PTR [eax],al
    1072:	01 20                	add    DWORD PTR [eax],esp
    1074:	5a                   	pop    edx
    1075:	00 00                	add    BYTE PTR [eax],al
    1077:	00 02                	add    BYTE PTR [edx],al
    1079:	91                   	xchg   ecx,eax
    107a:	6c                   	ins    BYTE PTR es:[edi],dx
    107b:	00 0c 14             	add    BYTE PTR [esp+edx*1],cl
    107e:	05 00 00 01 25       	add    eax,0x25010000
    1083:	5a                   	pop    edx
    1084:	00 00                	add    BYTE PTR [eax],al
    1086:	00 68 09             	add    BYTE PTR [eax+0x9],ch
    1089:	00 30                	add    BYTE PTR [eax],dh
    108b:	40                   	inc    eax
    108c:	00 00                	add    BYTE PTR [eax],al
    108e:	00 01                	add    BYTE PTR [ecx],al
    1090:	9c                   	pushf  
    1091:	fa                   	cli    
    1092:	02 00                	add    al,BYTE PTR [eax]
    1094:	00 0d fa 04 00 00    	add    BYTE PTR ds:0x4fa,cl
    109a:	01 25 5a 00 00 00    	add    DWORD PTR ds:0x5a,esp
    10a0:	02 91 00 0d 6b 05    	add    dl,BYTE PTR [ecx+0x56b0d00]
    10a6:	00 00                	add    BYTE PTR [eax],al
    10a8:	01 25 76 00 00 00    	add    DWORD PTR ds:0x76,esp
    10ae:	02 91 04 0e 7a 04    	add    dl,BYTE PTR [ecx+0x47a0e04]
    10b4:	00 00                	add    BYTE PTR [eax],al
    10b6:	01 27                	add    DWORD PTR [edi],esp
    10b8:	5a                   	pop    edx
    10b9:	00 00                	add    BYTE PTR [eax],al
    10bb:	00 02                	add    BYTE PTR [edx],al
    10bd:	91                   	xchg   ecx,eax
    10be:	6c                   	ins    BYTE PTR es:[edi],dx
    10bf:	00 0c 08             	add    BYTE PTR [eax+ecx*1],cl
    10c2:	05 00 00 01 2c       	add    eax,0x2c010000
    10c7:	5a                   	pop    edx
    10c8:	00 00                	add    BYTE PTR [eax],al
    10ca:	00 a8 09 00 30 42    	add    BYTE PTR [eax+0x42300009],ch
    10d0:	00 00                	add    BYTE PTR [eax],al
    10d2:	00 01                	add    BYTE PTR [ecx],al
    10d4:	9c                   	pushf  
    10d5:	30 03                	xor    BYTE PTR [ebx],al
    10d7:	00 00                	add    BYTE PTR [eax],al
    10d9:	0d fa 04 00 00       	or     eax,0x4fa
    10de:	01 2c 5a             	add    DWORD PTR [edx+ebx*2],ebp
    10e1:	00 00                	add    BYTE PTR [eax],al
    10e3:	00 02                	add    BYTE PTR [edx],al
    10e5:	91                   	xchg   ecx,eax
    10e6:	00 0e                	add    BYTE PTR [esi],cl
    10e8:	7a 04                	jp     10ee <sysEnter_Vector-0x12ef12>
    10ea:	00 00                	add    BYTE PTR [eax],al
    10ec:	01 2e                	add    DWORD PTR [esi],ebp
    10ee:	5a                   	pop    edx
    10ef:	00 00                	add    BYTE PTR [eax],al
    10f1:	00 02                	add    BYTE PTR [edx],al
    10f3:	91                   	xchg   ecx,eax
    10f4:	6c                   	ins    BYTE PTR es:[edi],dx
    10f5:	00 0f                	add    BYTE PTR [edi],cl
    10f7:	bd 04 00 00 01       	mov    ebp,0x1000004
    10fc:	33 ea                	xor    ebp,edx
    10fe:	09 00                	or     DWORD PTR [eax],eax
    1100:	30 a5 00 00 00 01    	xor    BYTE PTR [ebp+0x1000000],ah
    1106:	9c                   	pushf  
    1107:	10 c0                	adc    al,al
    1109:	05 00 00 01 44       	add    eax,0x44010000
    110e:	8f 0a                	(bad)  
    1110:	00 30                	add    BYTE PTR [eax],dh
    1112:	1f                   	pop    ds
    1113:	00 00                	add    BYTE PTR [eax],al
    1115:	00 01                	add    BYTE PTR [ecx],al
    1117:	9c                   	pushf  
    1118:	11 81 04 00 00 01    	adc    DWORD PTR [ecx+0x1000004],eax
    111e:	49                   	dec    ecx
    111f:	5a                   	pop    edx
    1120:	00 00                	add    BYTE PTR [eax],al
    1122:	00 ae 0a 00 30 34    	add    BYTE PTR [esi+0x3430000a],ch
    1128:	00 00                	add    BYTE PTR [eax],al
    112a:	00 01                	add    BYTE PTR [ecx],al
    112c:	9c                   	pushf  
    112d:	89 03                	mov    DWORD PTR [ebx],eax
    112f:	00 00                	add    BYTE PTR [eax],al
    1131:	0d 8d 05 00 00       	or     eax,0x58d
    1136:	01 49 b3             	add    DWORD PTR [ecx-0x4d],ecx
    1139:	00 00                	add    BYTE PTR [eax],al
    113b:	00 02                	add    BYTE PTR [edx],al
    113d:	91                   	xchg   ecx,eax
    113e:	00 12                	add    BYTE PTR [edx],dl
    1140:	0e                   	push   cs
    1141:	ea 05 00 00 01 4b 41 	jmp    0x414b:0x1000005
    1148:	00 00                	add    BYTE PTR [eax],al
    114a:	00 02                	add    BYTE PTR [edx],al
    114c:	91                   	xchg   ecx,eax
    114d:	74 00                	je     114f <sysEnter_Vector-0x12eeb1>
    114f:	11 ef                	adc    edi,ebp
    1151:	05 00 00 01 51       	add    eax,0x51010000
    1156:	5a                   	pop    edx
    1157:	00 00                	add    BYTE PTR [eax],al
    1159:	00 e2                	add    dl,ah
    115b:	0a 00                	or     al,BYTE PTR [eax]
    115d:	30 34 00             	xor    BYTE PTR [eax+eax*1],dh
    1160:	00 00                	add    BYTE PTR [eax],al
    1162:	01 9c c0 03 00 00 0d 	add    DWORD PTR [eax+eax*8+0xd000003],ebx
    1169:	8d 05 00 00 01 51    	lea    eax,ds:0x51010000
    116f:	b3 00                	mov    bl,0x0
    1171:	00 00                	add    BYTE PTR [eax],al
    1173:	02 91 00 12 0e ea    	add    dl,BYTE PTR [ecx-0x15f1ee00]
    1179:	05 00 00 01 53       	add    eax,0x53010000
    117e:	41                   	inc    ecx
    117f:	00 00                	add    BYTE PTR [eax],al
    1181:	00 02                	add    BYTE PTR [edx],al
    1183:	91                   	xchg   ecx,eax
    1184:	74 00                	je     1186 <sysEnter_Vector-0x12ee7a>
    1186:	11 63 05             	adc    DWORD PTR [ebx+0x5],esp
    1189:	00 00                	add    BYTE PTR [eax],al
    118b:	01 59 5a             	add    DWORD PTR [ecx+0x5a],ebx
    118e:	00 00                	add    BYTE PTR [eax],al
    1190:	00 16                	add    BYTE PTR [esi],dl
    1192:	0b 00                	or     eax,DWORD PTR [eax]
    1194:	30 37                	xor    BYTE PTR [edi],dh
    1196:	00 00                	add    BYTE PTR [eax],al
    1198:	00 01                	add    BYTE PTR [ecx],al
    119a:	9c                   	pushf  
    119b:	05 04 00 00 0d       	add    eax,0xd000004
    11a0:	ef                   	out    dx,eax
    11a1:	04 00                	add    al,0x0
    11a3:	00 01                	add    BYTE PTR [ecx],al
    11a5:	59                   	pop    ecx
    11a6:	76 00                	jbe    11a8 <sysEnter_Vector-0x12ee58>
    11a8:	00 00                	add    BYTE PTR [eax],al
    11aa:	02 91 00 0d 8d 05    	add    dl,BYTE PTR [ecx+0x58d0d00]
    11b0:	00 00                	add    BYTE PTR [eax],al
    11b2:	01 59 b3             	add    DWORD PTR [ecx-0x4d],ebx
    11b5:	00 00                	add    BYTE PTR [eax],al
    11b7:	00 02                	add    BYTE PTR [edx],al
    11b9:	91                   	xchg   ecx,eax
    11ba:	04 12                	add    al,0x12
    11bc:	0e                   	push   cs
    11bd:	ea 05 00 00 01 5b 41 	jmp    0x415b:0x1000005
    11c4:	00 00                	add    BYTE PTR [eax],al
    11c6:	00 02                	add    BYTE PTR [edx],al
    11c8:	91                   	xchg   ecx,eax
    11c9:	74 00                	je     11cb <sysEnter_Vector-0x12ee35>
    11cb:	0c 02                	or     al,0x2
    11cd:	05 00 00 01 63       	add    eax,0x63010000
    11d2:	81 00 00 00 4d 0b    	add    DWORD PTR [eax],0xb4d0000
    11d8:	00 30                	add    BYTE PTR [eax],dh
    11da:	72 00                	jb     11dc <sysEnter_Vector-0x12ee24>
    11dc:	00 00                	add    BYTE PTR [eax],al
    11de:	01 9c 51 04 00 00 0d 	add    DWORD PTR [ecx+edx*2+0xd000004],ebx
    11e5:	a0 05 00 00 01       	mov    al,ds:0x1000005
    11ea:	63 81 00 00 00 02    	arpl   WORD PTR [ecx+0x2000000],ax
    11f0:	91                   	xchg   ecx,eax
    11f1:	00 13                	add    BYTE PTR [ebx],dl
    11f3:	5f                   	pop    edi
    11f4:	0b 00                	or     eax,DWORD PTR [eax]
    11f6:	30 54 00 00          	xor    BYTE PTR [eax+eax*1+0x0],dl
    11fa:	00 14 73             	add    BYTE PTR [ebx+esi*2],dl
    11fd:	32 00                	xor    al,BYTE PTR [eax]
    11ff:	01 65 76             	add    DWORD PTR [ebp+0x76],esp
    1202:	00 00                	add    BYTE PTR [eax],al
    1204:	00 02                	add    BYTE PTR [edx],al
    1206:	91                   	xchg   ecx,eax
    1207:	6c                   	ins    BYTE PTR es:[edi],dx
    1208:	14 63                	adc    al,0x63
    120a:	74 00                	je     120c <sysEnter_Vector-0x12edf4>
    120c:	01 65 76             	add    DWORD PTR [ebp+0x76],esp
    120f:	00 00                	add    BYTE PTR [eax],al
    1211:	00 02                	add    BYTE PTR [edx],al
    1213:	91                   	xchg   ecx,eax
    1214:	68 00 00 0f f6       	push   0xf60f0000
    1219:	05 00 00 01 69       	add    eax,0x69010000
    121e:	bf 0b 00 30 1d       	mov    edi,0x1d30000b
    1223:	00 00                	add    BYTE PTR [eax],al
    1225:	00 01                	add    BYTE PTR [ecx],al
    1227:	9c                   	pushf  
    1228:	15 dd 05 00 00       	adc    eax,0x5dd
    122d:	01 6e dc             	add    DWORD PTR [esi-0x24],ebp
    1230:	0b 00                	or     eax,DWORD PTR [eax]
    1232:	30 29                	xor    BYTE PTR [ecx],ch
    1234:	00 00                	add    BYTE PTR [eax],al
    1236:	00 01                	add    BYTE PTR [ecx],al
    1238:	9c                   	pushf  
    1239:	a2 04 00 00 0d       	mov    ds:0xd000004,al
    123e:	94                   	xchg   esp,eax
    123f:	05 00 00 01 6e       	add    eax,0x6e010000
    1244:	5a                   	pop    edx
    1245:	00 00                	add    BYTE PTR [eax],al
    1247:	00 02                	add    BYTE PTR [edx],al
    1249:	91                   	xchg   ecx,eax
    124a:	00 0d d2 05 00 00    	add    BYTE PTR ds:0x5d2,cl
    1250:	01 6e 8e             	add    DWORD PTR [esi-0x72],ebp
    1253:	01 00                	add    DWORD PTR [eax],eax
    1255:	00 02                	add    BYTE PTR [edx],al
    1257:	91                   	xchg   ecx,eax
    1258:	04 0d                	add    al,0xd
    125a:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    125b:	04 00                	add    al,0x0
    125d:	00 01                	add    BYTE PTR [ecx],al
    125f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1260:	5a                   	pop    edx
    1261:	00 00                	add    BYTE PTR [eax],al
    1263:	00 02                	add    BYTE PTR [edx],al
    1265:	91                   	xchg   ecx,eax
    1266:	08 00                	or     BYTE PTR [eax],al
    1268:	16                   	push   ss
    1269:	d9 04 00             	fld    DWORD PTR [eax+eax*1]
    126c:	00 01                	add    BYTE PTR [ecx],al
    126e:	73 5a                	jae    12ca <sysEnter_Vector-0x12ed36>
    1270:	00 00                	add    BYTE PTR [eax],al
    1272:	00 05 0c 00 30 29    	add    BYTE PTR ds:0x2930000c,al
    1278:	00 00                	add    BYTE PTR [eax],al
    127a:	00 01                	add    BYTE PTR [ecx],al
    127c:	9c                   	pushf  
    127d:	ca 04 00             	retf   0x4
    1280:	00 0e                	add    BYTE PTR [esi],cl
    1282:	7a 04                	jp     1288 <sysEnter_Vector-0x12ed78>
    1284:	00 00                	add    BYTE PTR [eax],al
    1286:	01 75 76             	add    DWORD PTR [ebp+0x76],esi
    1289:	00 00                	add    BYTE PTR [eax],al
    128b:	00 02                	add    BYTE PTR [edx],al
    128d:	91                   	xchg   ecx,eax
    128e:	74 00                	je     1290 <sysEnter_Vector-0x12ed70>
    1290:	11 9b 05 00 00 01    	adc    DWORD PTR [ebx+0x1000005],ebx
    1296:	7b 5a                	jnp    12f2 <sysEnter_Vector-0x12ed0e>
    1298:	00 00                	add    BYTE PTR [eax],al
    129a:	00 2e                	add    BYTE PTR [esi],ch
    129c:	0c 00                	or     al,0x0
    129e:	30 f1                	xor    cl,dh
    12a0:	01 00                	add    DWORD PTR [eax],eax
    12a2:	00 01                	add    BYTE PTR [ecx],al
    12a4:	9c                   	pushf  
    12a5:	6c                   	ins    BYTE PTR es:[edi],dx
    12a6:	05 00 00 0d b1       	add    eax,0xb10d0000
    12ab:	08 00                	or     BYTE PTR [eax],al
    12ad:	00 01                	add    BYTE PTR [ecx],al
    12af:	7b 90                	jnp    1241 <sysEnter_Vector-0x12edbf>
    12b1:	01 00                	add    DWORD PTR [eax],eax
    12b3:	00 02                	add    BYTE PTR [edx],al
    12b5:	91                   	xchg   ecx,eax
    12b6:	00 14 70             	add    BYTE PTR [eax+esi*2],dl
    12b9:	69 64 00 01 7d 5a 00 	imul   esp,DWORD PTR [eax+eax*1+0x1],0x5a7d
    12c0:	00 
    12c1:	00 02                	add    BYTE PTR [edx],al
    12c3:	91                   	xchg   ecx,eax
    12c4:	58                   	pop    eax
    12c5:	0e                   	push   cs
    12c6:	bb 05 00 00 01       	mov    ebx,0x1000005
    12cb:	7d 5a                	jge    1327 <sysEnter_Vector-0x12ecd9>
    12cd:	00 00                	add    BYTE PTR [eax],al
    12cf:	00 02                	add    BYTE PTR [edx],al
    12d1:	91                   	xchg   ecx,eax
    12d2:	6c                   	ins    BYTE PTR es:[edi],dx
    12d3:	0e                   	push   cs
    12d4:	cd 05                	int    0x5
    12d6:	00 00                	add    BYTE PTR [eax],al
    12d8:	01 7e 6c             	add    DWORD PTR [esi+0x6c],edi
    12db:	05 00 00 02 91       	add    eax,0x91020000
    12e0:	50                   	push   eax
    12e1:	0e                   	push   cs
    12e2:	de 04 00             	fiadd  WORD PTR [eax+eax*1]
    12e5:	00 01                	add    BYTE PTR [ecx],al
    12e7:	7f 90                	jg     1279 <sysEnter_Vector-0x12ed87>
    12e9:	01 00                	add    DWORD PTR [eax],eax
    12eb:	00 02                	add    BYTE PTR [edx],al
    12ed:	91                   	xchg   ecx,eax
    12ee:	68 0e 87 04 00       	push   0x4870e
    12f3:	00 01                	add    BYTE PTR [ecx],al
    12f5:	7f 90                	jg     1287 <sysEnter_Vector-0x12ed79>
    12f7:	01 00                	add    DWORD PTR [eax],eax
    12f9:	00 02                	add    BYTE PTR [edx],al
    12fb:	91                   	xchg   ecx,eax
    12fc:	64                   	fs
    12fd:	0e                   	push   cs
    12fe:	b5 04                	mov    ch,0x4
    1300:	00 00                	add    BYTE PTR [eax],al
    1302:	01 80 90 01 00 00    	add    DWORD PTR [eax+0x190],eax
    1308:	02 91 54 0e ad 04    	add    dl,BYTE PTR [ecx+0x4ad0e54]
    130e:	00 00                	add    BYTE PTR [eax],al
    1310:	01 91 5a 00 00 00    	add    DWORD PTR [ecx+0x5a],edx
    1316:	02 91 60 13 04 0d    	add    dl,BYTE PTR [ecx+0xd041360]
    131c:	00 30                	add    BYTE PTR [eax],dh
    131e:	e0 00                	loopne 1320 <sysEnter_Vector-0x12ece0>
    1320:	00 00                	add    BYTE PTR [eax],al
    1322:	14 63                	adc    al,0x63
    1324:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1325:	74 00                	je     1327 <sysEnter_Vector-0x12ecd9>
    1327:	01 93 5a 00 00 00    	add    DWORD PTR [ebx+0x5a],edx
    132d:	02 91 5c 00 00 06    	add    dl,BYTE PTR [ecx+0x600005c]
    1333:	04 90                	add    al,0x90
    1335:	01 00                	add    DWORD PTR [eax],eax
    1337:	00 11                	add    BYTE PTR [ecx],dl
    1339:	87 05 00 00 01 a9    	xchg   DWORD PTR ds:0xa9010000,eax
    133f:	5a                   	pop    edx
    1340:	00 00                	add    BYTE PTR [eax],al
    1342:	00 1f                	add    BYTE PTR [edi],bl
    1344:	0e                   	push   cs
    1345:	00 30                	add    BYTE PTR [eax],dh
    1347:	4c                   	dec    esp
    1348:	00 00                	add    BYTE PTR [eax],al
    134a:	00 01                	add    BYTE PTR [ecx],al
    134c:	9c                   	pushf  
    134d:	c4 05 00 00 0d b1    	les    eax,FWORD PTR ds:0xb10d0000
    1353:	08 00                	or     BYTE PTR [eax],al
    1355:	00 01                	add    BYTE PTR [ecx],al
    1357:	a9 90 01 00 00       	test   eax,0x190
    135c:	02 91 00 0d bb 05    	add    dl,BYTE PTR [ecx+0x5bb0d00]
    1362:	00 00                	add    BYTE PTR [eax],al
    1364:	01 a9 5a 00 00 00    	add    DWORD PTR [ecx+0x5a],ebp
    136a:	02 91 04 0d cd 05    	add    dl,BYTE PTR [ecx+0x5cd0d04]
    1370:	00 00                	add    BYTE PTR [eax],al
    1372:	01 a9 6c 05 00 00    	add    DWORD PTR [ecx+0x56c],ebp
    1378:	02 91 08 14 70 69    	add    dl,BYTE PTR [ecx+0x69701408]
    137e:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1381:	ab                   	stos   DWORD PTR es:[edi],eax
    1382:	5a                   	pop    edx
    1383:	00 00                	add    BYTE PTR [eax],al
    1385:	00 02                	add    BYTE PTR [edx],al
    1387:	91                   	xchg   ecx,eax
    1388:	74 00                	je     138a <sysEnter_Vector-0x12ec76>
    138a:	11 e7                	adc    edi,esp
    138c:	04 00                	add    al,0x0
    138e:	00 01                	add    BYTE PTR [ecx],al
    1390:	b6 5a                	mov    dh,0x5a
    1392:	00 00                	add    BYTE PTR [eax],al
    1394:	00 6b 0e             	add    BYTE PTR [ebx+0xe],ch
    1397:	00 30                	add    BYTE PTR [eax],dh
    1399:	1c 00                	sbb    al,0x0
    139b:	00 00                	add    BYTE PTR [eax],al
    139d:	01 9c ec 05 00 00 17 	add    DWORD PTR [esp+ebp*8+0x17000005],ebx
    13a4:	70 69                	jo     140f <sysEnter_Vector-0x12ebf1>
    13a6:	64 00 01             	add    BYTE PTR fs:[ecx],al
    13a9:	b6 76                	mov    dh,0x76
    13ab:	00 00                	add    BYTE PTR [eax],al
    13ad:	00 02                	add    BYTE PTR [edx],al
    13af:	91                   	xchg   ecx,eax
    13b0:	00 00                	add    BYTE PTR [eax],al
    13b2:	11 fb                	adc    ebx,edi
    13b4:	05 00 00 01 bb       	add    eax,0xbb010000
    13b9:	90                   	nop
    13ba:	01 00                	add    DWORD PTR [eax],eax
    13bc:	00 87 0e 00 30 20    	add    BYTE PTR [edi+0x2030000e],al
    13c2:	00 00                	add    BYTE PTR [eax],al
    13c4:	00 01                	add    BYTE PTR [ecx],al
    13c6:	9c                   	pushf  
    13c7:	22 06                	and    al,BYTE PTR [esi]
    13c9:	00 00                	add    BYTE PTR [eax],al
    13cb:	17                   	pop    ss
    13cc:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    13cf:	00 01                	add    BYTE PTR [ecx],al
    13d1:	bb 90 01 00 00       	mov    ebx,0x190
    13d6:	02 91 00 0d e1 03    	add    dl,BYTE PTR [ecx+0x3e10d00]
    13dc:	00 00                	add    BYTE PTR [eax],al
    13de:	01 bb 9a 00 00 00    	add    DWORD PTR [ebx+0x9a],edi
    13e4:	02 91 04 00 18 4b    	add    dl,BYTE PTR [ecx+0x4b180004]
    13ea:	00 00                	add    BYTE PTR [eax],al
    13ec:	00 05 34 76 00 00    	add    BYTE PTR ds:0x7634,al
    13f2:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
    13f8:	30 18                	xor    BYTE PTR [eax],bl
    13fa:	af                   	scas   eax,DWORD PTR es:[edi]
    13fb:	00 00                	add    BYTE PTR [eax],al
    13fd:	00 05 35 76 00 00    	add    BYTE PTR ds:0x7635,al
    1403:	00 05 03 00 45 00    	add    BYTE PTR ds:0x450003,al
    1409:	30 18                	xor    BYTE PTR [eax],bl
    140b:	5b                   	pop    ebx
    140c:	01 00                	add    DWORD PTR [eax],eax
    140e:	00 05 36 76 00 00    	add    BYTE PTR ds:0x7636,al
    1414:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
    141a:	30 18                	xor    BYTE PTR [eax],bl
    141c:	54                   	push   esp
    141d:	00 00                	add    BYTE PTR [eax],al
    141f:	00 05 37 76 00 00    	add    BYTE PTR ds:0x7637,al
    1425:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
    142b:	30 18                	xor    BYTE PTR [eax],bl
    142d:	28 00                	sub    BYTE PTR [eax],al
    142f:	00 00                	add    BYTE PTR [eax],al
    1431:	06                   	push   es
    1432:	46                   	inc    esi
    1433:	6c                   	ins    BYTE PTR es:[edi],dx
    1434:	05 00 00 05 03       	add    eax,0x3050000
    1439:	04 45                	add    al,0x45
    143b:	00 30                	add    BYTE PTR [eax],dh
    143d:	18 44 05 00          	sbb    BYTE PTR [ebp+eax*1+0x0],al
    1441:	00 01                	add    BYTE PTR [ecx],al
    1443:	0d be 00 00 00       	or     eax,0xbe
    1448:	05 03 10 45 00       	add    eax,0x451003
    144d:	30 00                	xor    BYTE PTR [eax],al
    144f:	6b 03 00             	imul   eax,DWORD PTR [ebx],0x0
    1452:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1455:	93                   	xchg   ebx,eax
    1456:	06                   	push   es
    1457:	00 00                	add    BYTE PTR [eax],al
    1459:	04 01                	add    al,0x1
    145b:	f4                   	hlt    
    145c:	00 00                	add    BYTE PTR [eax],al
    145e:	00 0c a6             	add    BYTE PTR [esi+eiz*4],cl
    1461:	06                   	push   es
    1462:	00 00                	add    BYTE PTR [eax],al
    1464:	72 00                	jb     1466 <sysEnter_Vector-0x12eb9a>
    1466:	00 00                	add    BYTE PTR [eax],al
    1468:	a8 0e                	test   al,0xe
    146a:	00 30                	add    BYTE PTR [eax],dh
    146c:	6d                   	ins    DWORD PTR es:[edi],dx
    146d:	03 00                	add    eax,DWORD PTR [eax]
    146f:	00 ad 08 00 00 02    	add    BYTE PTR [ebp+0x2000008],ch
    1475:	01 06                	add    DWORD PTR [esi],eax
    1477:	5d                   	pop    ebp
    1478:	00 00                	add    BYTE PTR [eax],al
    147a:	00 02                	add    BYTE PTR [edx],al
    147c:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1482:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1489:	02 08                	add    cl,BYTE PTR [eax]
    148b:	05 00 00 00 00       	add    eax,0x0
    1490:	04 46                	add    al,0x46
    1492:	06                   	push   es
    1493:	00 00                	add    BYTE PTR [eax],al
    1495:	02 2e                	add    ch,BYTE PTR [esi]
    1497:	4c                   	dec    esp
    1498:	00 00                	add    BYTE PTR [eax],al
    149a:	00 02                	add    BYTE PTR [edx],al
    149c:	01 08                	add    DWORD PTR [eax],ecx
    149e:	5b                   	pop    ebx
    149f:	00 00                	add    BYTE PTR [eax],al
    14a1:	00 02                	add    BYTE PTR [edx],al
    14a3:	02 07                	add    al,BYTE PTR [edi]
    14a5:	0e                   	push   cs
    14a6:	00 00                	add    BYTE PTR [eax],al
    14a8:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    14ab:	00 00                	add    BYTE PTR [eax],al
    14ad:	00 02                	add    BYTE PTR [edx],al
    14af:	34 65                	xor    al,0x65
    14b1:	00 00                	add    BYTE PTR [eax],al
    14b3:	00 02                	add    BYTE PTR [edx],al
    14b5:	04 07                	add    al,0x7
    14b7:	3e 00 00             	add    BYTE PTR ds:[eax],al
    14ba:	00 02                	add    BYTE PTR [edx],al
    14bc:	08 07                	or     BYTE PTR [edi],al
    14be:	34 00                	xor    al,0x0
    14c0:	00 00                	add    BYTE PTR [eax],al
    14c2:	04 94                	add    al,0x94
    14c4:	04 00                	add    al,0x0
    14c6:	00 03                	add    BYTE PTR [ebx],al
    14c8:	d8 65 00             	fsub   DWORD PTR [ebp+0x0]
    14cb:	00 00                	add    BYTE PTR [eax],al
    14cd:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    14d4:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    14d7:	9b                   	fwait
    14d8:	00 00                	add    BYTE PTR [eax],al
    14da:	00 02                	add    BYTE PTR [edx],al
    14dc:	01 06                	add    DWORD PTR [esi],eax
    14de:	64 00 00             	add    BYTE PTR fs:[eax],al
    14e1:	00 05 5a 06 00 00    	add    BYTE PTR ds:0x65a,al
    14e7:	10 04 2c             	adc    BYTE PTR [esp+ebp*1],al
    14ea:	d0 00                	rol    BYTE PTR [eax],1
    14ec:	00 00                	add    BYTE PTR [eax],al
    14ee:	06                   	push   es
    14ef:	2f                   	das    
    14f0:	06                   	push   es
    14f1:	00 00                	add    BYTE PTR [eax],al
    14f3:	04 2e                	add    al,0x2e
    14f5:	5a                   	pop    edx
    14f6:	00 00                	add    BYTE PTR [eax],al
    14f8:	00 00                	add    BYTE PTR [eax],al
    14fa:	07                   	pop    es
    14fb:	6c                   	ins    BYTE PTR es:[edi],dx
    14fc:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    14fe:	00 04 2f             	add    BYTE PTR [edi+ebp*1],al
    1501:	5a                   	pop    edx
    1502:	00 00                	add    BYTE PTR [eax],al
    1504:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    1507:	60                   	pusha  
    1508:	06                   	push   es
    1509:	00 00                	add    BYTE PTR [eax],al
    150b:	04 30                	add    al,0x30
    150d:	d0 00                	rol    BYTE PTR [eax],1
    150f:	00 00                	add    BYTE PTR [eax],al
    1511:	08 06                	or     BYTE PTR [esi],al
    1513:	b9 06 00 00 04       	mov    ecx,0x4000006
    1518:	31 d7                	xor    edi,edx
    151a:	00 00                	add    BYTE PTR [eax],al
    151c:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
    151f:	02 01                	add    al,BYTE PTR [ecx]
    1521:	02 95 00 00 00 08    	add    dl,BYTE PTR [ebp+0x8000000]
    1527:	04 93                	add    al,0x93
    1529:	00 00                	add    BYTE PTR [eax],al
    152b:	00 04 be             	add    BYTE PTR [esi+edi*4],al
    152e:	06                   	push   es
    152f:	00 00                	add    BYTE PTR [eax],al
    1531:	04 32                	add    al,0x32
    1533:	93                   	xchg   ebx,eax
    1534:	00 00                	add    BYTE PTR [eax],al
    1536:	00 09                	add    BYTE PTR [ecx],cl
    1538:	07                   	pop    es
    1539:	03 00                	add    eax,DWORD PTR [eax]
    153b:	00 04 65 00 00 00 06 	add    BYTE PTR [eiz*2+0x6000000],al
    1542:	15 a3 01 00 00       	adc    eax,0x1a3
    1547:	0a 6c 03 00          	or     ch,BYTE PTR [ebx+eax*1+0x0]
    154b:	00 00                	add    BYTE PTR [eax],al
    154d:	0a a4 03 00 00 01 0a 	or     ah,BYTE PTR [ebx+eax*1+0xa010000]
    1554:	73 02                	jae    1558 <sysEnter_Vector-0x12eaa8>
    1556:	00 00                	add    BYTE PTR [eax],al
    1558:	02 0a                	add    cl,BYTE PTR [edx]
    155a:	f9                   	stc    
    155b:	02 00                	add    al,BYTE PTR [eax]
    155d:	00 03                	add    BYTE PTR [ebx],al
    155f:	0a 53 02             	or     dl,BYTE PTR [ebx+0x2]
    1562:	00 00                	add    BYTE PTR [eax],al
    1564:	04 0a                	add    al,0xa
    1566:	be 03 00 00 05       	mov    esi,0x5000003
    156b:	0a 1d 03 00 00 06    	or     bl,BYTE PTR ds:0x6000003
    1571:	0a 66 02             	or     ah,BYTE PTR [esi+0x2]
    1574:	00 00                	add    BYTE PTR [eax],al
    1576:	07                   	pop    es
    1577:	0a f4                	or     dh,ah
    1579:	03 00                	add    eax,DWORD PTR [eax]
    157b:	00 4f 0a             	add    BYTE PTR [edi+0xa],cl
    157e:	5f                   	pop    edi
    157f:	03 00                	add    eax,DWORD PTR [eax]
    1581:	00 59 0a             	add    BYTE PTR [ecx+0xa],bl
    1584:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
    1587:	00 61 0a             	add    BYTE PTR [ecx+0xa],ah
    158a:	e5 02                	in     eax,0x2
    158c:	00 00                	add    BYTE PTR [eax],al
    158e:	97                   	xchg   edi,eax
    158f:	0b 7c 03 00          	or     edi,DWORD PTR [ebx+eax*1+0x0]
    1593:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    1596:	0b 52 03             	or     edx,DWORD PTR [edx+0x3]
    1599:	00 00                	add    BYTE PTR [eax],al
    159b:	64 01 0b             	add    DWORD PTR fs:[ebx],ecx
    159e:	e6 03                	out    0x3,al
    15a0:	00 00                	add    BYTE PTR [eax],al
    15a2:	65 01 0b             	add    DWORD PTR gs:[ebx],ecx
    15a5:	c7 02 00 00 66 01    	mov    DWORD PTR [edx],0x1660000
    15ab:	0b 1b                	or     ebx,DWORD PTR [ebx]
    15ad:	04 00                	add    al,0x0
    15af:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    15b2:	0b 2a                	or     ebp,DWORD PTR [edx]
    15b4:	03 00                	add    eax,DWORD PTR [eax]
    15b6:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    15b9:	0b ac 02 00 00 69 01 	or     ebp,DWORD PTR [edx+eax*1+0x1690000]
    15c0:	0b 93 03 00 00 70    	or     edx,DWORD PTR [ebx+0x70000003]
    15c6:	01 0b                	add    DWORD PTR [ebx],ecx
    15c8:	d5 02                	aad    0x2
    15ca:	00 00                	add    BYTE PTR [eax],al
    15cc:	71 01                	jno    15cf <sysEnter_Vector-0x12ea31>
    15ce:	0b cc                	or     ecx,esp
    15d0:	03 00                	add    eax,DWORD PTR [eax]
    15d2:	00 00                	add    BYTE PTR [eax],al
    15d4:	03 0b                	add    ecx,DWORD PTR [ebx]
    15d6:	37                   	aaa    
    15d7:	03 00                	add    eax,DWORD PTR [eax]
    15d9:	00 01                	add    BYTE PTR [ecx],al
    15db:	03 0b                	add    ecx,DWORD PTR [ebx]
    15dd:	bb 02 00 00 02       	mov    ebx,0x2000002
    15e2:	03 0b                	add    ecx,DWORD PTR [ebx]
    15e4:	80 02 00             	add    BYTE PTR [edx],0x0
    15e7:	00 03                	add    BYTE PTR [ebx],al
    15e9:	03 0b                	add    ecx,DWORD PTR [ebx]
    15eb:	90                   	nop
    15ec:	02 00                	add    al,BYTE PTR [eax]
    15ee:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    15f1:	00 02                	add    BYTE PTR [edx],al
    15f3:	04 07                	add    al,0x7
    15f5:	39 00                	cmp    DWORD PTR [eax],eax
    15f7:	00 00                	add    BYTE PTR [eax],al
    15f9:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    15fc:	e1 00                	loope  15fe <sysEnter_Vector-0x12ea02>
    15fe:	00 00                	add    BYTE PTR [eax],al
    1600:	0c 04                	or     al,0x4
    1602:	08 04 8c             	or     BYTE PTR [esp+ecx*4],al
    1605:	00 00                	add    BYTE PTR [eax],al
    1607:	00 0d 66 06 00 00    	add    BYTE PTR ds:0x666,cl
    160d:	01 0c a8             	add    DWORD PTR [eax+ebp*4],ecx
    1610:	0e                   	push   cs
    1611:	00 30                	add    BYTE PTR [eax],dh
    1613:	6c                   	ins    BYTE PTR es:[edi],dx
    1614:	00 00                	add    BYTE PTR [eax],al
    1616:	00 01                	add    BYTE PTR [ecx],al
    1618:	9c                   	pushf  
    1619:	0e                   	push   cs
    161a:	86 06                	xchg   BYTE PTR [esi],al
    161c:	00 00                	add    BYTE PTR [eax],al
    161e:	01 16                	add    DWORD PTR [esi],edx
    1620:	5a                   	pop    edx
    1621:	00 00                	add    BYTE PTR [eax],al
    1623:	00 14 0f             	add    BYTE PTR [edi+ecx*1],dl
    1626:	00 30                	add    BYTE PTR [eax],dh
    1628:	87 00                	xchg   DWORD PTR [eax],eax
    162a:	00 00                	add    BYTE PTR [eax],al
    162c:	01 9c 00 02 00 00 0f 	add    DWORD PTR [eax+eax*1+0xf000002],ebx
    1633:	e1 03                	loope  1638 <sysEnter_Vector-0x12e9c8>
    1635:	00 00                	add    BYTE PTR [eax],al
    1637:	01 16                	add    DWORD PTR [esi],edx
    1639:	73 00                	jae    163b <sysEnter_Vector-0x12e9c5>
    163b:	00 00                	add    BYTE PTR [eax],al
    163d:	02 91 00 10 18 06    	add    dl,BYTE PTR [ecx+0x6181000]
    1643:	00 00                	add    BYTE PTR [eax],al
    1645:	01 1a                	add    DWORD PTR [edx],ebx
    1647:	5a                   	pop    edx
    1648:	00 00                	add    BYTE PTR [eax],al
    164a:	00 02                	add    BYTE PTR [edx],al
    164c:	91                   	xchg   ecx,eax
    164d:	74 00                	je     164f <sysEnter_Vector-0x12e9b1>
    164f:	11 b3 06 00 00 01    	adc    DWORD PTR [ebx+0x1000006],esi
    1655:	2e                   	fwait
    1656:	9b                   	fwait
    1657:	0f 00                	(bad)  
    1659:	30 39                	xor    BYTE PTR [ecx],bh
    165b:	00 00                	add    BYTE PTR [eax],al
    165d:	00 01                	add    BYTE PTR [ecx],al
    165f:	9c                   	pushf  
    1660:	3c 02                	cmp    al,0x2
    1662:	00 00                	add    BYTE PTR [eax],al
    1664:	0f                   	(bad)  
    1665:	0f 06                	clts   
    1667:	00 00                	add    BYTE PTR [eax],al
    1669:	01 2e                	add    DWORD PTR [esi],ebp
    166b:	b1 01                	mov    cl,0x1
    166d:	00 00                	add    BYTE PTR [eax],al
    166f:	02 91 00 12 6d 70    	add    dl,BYTE PTR [ecx+0x706d1200]
    1675:	00 01                	add    BYTE PTR [ecx],al
    1677:	30 3c 02             	xor    BYTE PTR [edx+eax*1],bh
    167a:	00 00                	add    BYTE PTR [eax],al
    167c:	02 91 74 13 71 06    	add    dl,BYTE PTR [ecx+0x6711374]
    1682:	00 00                	add    BYTE PTR [eax],al
    1684:	01 3a                	add    DWORD PTR [edx],edi
    1686:	c6                   	(bad)  
    1687:	0f 00                	(bad)  
    1689:	30 00                	xor    BYTE PTR [eax],al
    168b:	08 04 dd 00 00 00 14 	or     BYTE PTR [ebx*8+0x14000000],al
    1692:	36                   	ss
    1693:	06                   	push   es
    1694:	00 00                	add    BYTE PTR [eax],al
    1696:	01 40 b1             	add    DWORD PTR [eax-0x4f],eax
    1699:	01 00                	add    DWORD PTR [eax],eax
    169b:	00 d4                	add    ah,dl
    169d:	0f 00                	(bad)  
    169f:	30 d4                	xor    ah,dl
    16a1:	01 00                	add    DWORD PTR [eax],eax
    16a3:	00 01                	add    BYTE PTR [ecx],al
    16a5:	9c                   	pushf  
    16a6:	b0 02                	mov    al,0x2
    16a8:	00 00                	add    BYTE PTR [eax],al
    16aa:	0f e1 03             	psraw  mm0,QWORD PTR [ebx]
    16ad:	00 00                	add    BYTE PTR [eax],al
    16af:	01 40 73             	add    DWORD PTR [eax+0x73],eax
    16b2:	00 00                	add    BYTE PTR [eax],al
    16b4:	00 02                	add    BYTE PTR [edx],al
    16b6:	91                   	xchg   ecx,eax
    16b7:	00 10                	add    BYTE PTR [eax],dl
    16b9:	7a 04                	jp     16bf <sysEnter_Vector-0x12e941>
    16bb:	00 00                	add    BYTE PTR [eax],al
    16bd:	01 42 b1             	add    DWORD PTR [edx-0x4f],eax
    16c0:	01 00                	add    DWORD PTR [eax],eax
    16c2:	00 02                	add    BYTE PTR [edx],al
    16c4:	91                   	xchg   ecx,eax
    16c5:	60                   	pusha  
    16c6:	10 53 06             	adc    BYTE PTR [ebx+0x6],dl
    16c9:	00 00                	add    BYTE PTR [eax],al
    16cb:	01 44 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],eax
    16cf:	00 00                	add    BYTE PTR [eax],al
    16d1:	02 91 6c 10 02 06    	add    dl,BYTE PTR [ecx+0x602106c]
    16d7:	00 00                	add    BYTE PTR [eax],al
    16d9:	01 45 5a             	add    DWORD PTR [ebp+0x5a],eax
    16dc:	00 00                	add    BYTE PTR [eax],al
    16de:	00 02                	add    BYTE PTR [edx],al
    16e0:	91                   	xchg   ecx,eax
    16e1:	68 10 3e 06 00       	push   0x63e10
    16e6:	00 01                	add    BYTE PTR [ecx],al
    16e8:	46                   	inc    esi
    16e9:	3c 02                	cmp    al,0x2
    16eb:	00 00                	add    BYTE PTR [eax],al
    16ed:	02 91 64 10 7a 06    	add    dl,BYTE PTR [ecx+0x67a1064]
    16f3:	00 00                	add    BYTE PTR [eax],al
    16f5:	01 47 b0             	add    DWORD PTR [edi-0x50],eax
    16f8:	02 00                	add    al,BYTE PTR [eax]
    16fa:	00 02                	add    BYTE PTR [edx],al
    16fc:	91                   	xchg   ecx,eax
    16fd:	5c                   	pop    esp
    16fe:	00 08                	add    BYTE PTR [eax],cl
    1700:	04 41                	add    al,0x41
    1702:	00 00                	add    BYTE PTR [eax],al
    1704:	00 14 6a             	add    BYTE PTR [edx+ebp*2],dl
    1707:	06                   	push   es
    1708:	00 00                	add    BYTE PTR [eax],al
    170a:	01 67 b1             	add    DWORD PTR [edi-0x4f],esp
    170d:	01 00                	add    DWORD PTR [eax],eax
    170f:	00 a8 11 00 30 20    	add    BYTE PTR [eax+0x20300011],ch
    1715:	00 00                	add    BYTE PTR [eax],al
    1717:	00 01                	add    BYTE PTR [ecx],al
    1719:	9c                   	pushf  
    171a:	de 02                	fiadd  WORD PTR [edx]
    171c:	00 00                	add    BYTE PTR [eax],al
    171e:	0f e1 03             	psraw  mm0,QWORD PTR [ebx]
    1721:	00 00                	add    BYTE PTR [eax],al
    1723:	01 67 73             	add    DWORD PTR [edi+0x73],esp
    1726:	00 00                	add    BYTE PTR [eax],al
    1728:	00 02                	add    BYTE PTR [edx],al
    172a:	91                   	xchg   ecx,eax
    172b:	00 00                	add    BYTE PTR [eax],al
    172d:	15 4e 06 00 00       	adc    eax,0x64e
    1732:	01 6c c8 11          	add    DWORD PTR [eax+ecx*8+0x11],ebp
    1736:	00 30                	add    BYTE PTR [eax],dh
    1738:	1b 00                	sbb    eax,DWORD PTR [eax]
    173a:	00 00                	add    BYTE PTR [eax],al
    173c:	01 9c 02 03 00 00 0f 	add    DWORD PTR [edx+eax*1+0xf000003],ebx
    1743:	0f 06                	clts   
    1745:	00 00                	add    BYTE PTR [eax],al
    1747:	01 6c b1 01          	add    DWORD PTR [ecx+esi*4+0x1],ebp
    174b:	00 00                	add    BYTE PTR [eax],al
    174d:	02 91 00 00 0d 20    	add    dl,BYTE PTR [ecx+0x200d0000]
    1753:	06                   	push   es
    1754:	00 00                	add    BYTE PTR [eax],al
    1756:	01 71 e3             	add    DWORD PTR [ecx-0x1d],esi
    1759:	11 00                	adc    DWORD PTR [eax],eax
    175b:	30 32                	xor    BYTE PTR [edx],dh
    175d:	00 00                	add    BYTE PTR [eax],al
    175f:	00 01                	add    BYTE PTR [ecx],al
    1761:	9c                   	pushf  
    1762:	16                   	push   ss
    1763:	4b                   	dec    ebx
    1764:	00 00                	add    BYTE PTR [eax],al
    1766:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1769:	5a                   	pop    edx
    176a:	00 00                	add    BYTE PTR [eax],al
    176c:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
    1772:	30 16                	xor    BYTE PTR [esi],dl
    1774:	af                   	scas   eax,DWORD PTR es:[edi]
    1775:	00 00                	add    BYTE PTR [eax],al
    1777:	00 04 35 5a 00 00 00 	add    BYTE PTR [esi*1+0x5a],al
    177e:	05 03 00 45 00       	add    eax,0x450003
    1783:	30 16                	xor    BYTE PTR [esi],dl
    1785:	5b                   	pop    ebx
    1786:	01 00                	add    DWORD PTR [eax],eax
    1788:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    178b:	5a                   	pop    edx
    178c:	00 00                	add    BYTE PTR [eax],al
    178e:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
    1794:	30 16                	xor    BYTE PTR [esi],dl
    1796:	54                   	push   esp
    1797:	00 00                	add    BYTE PTR [eax],al
    1799:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    179c:	5a                   	pop    edx
    179d:	00 00                	add    BYTE PTR [eax],al
    179f:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
    17a5:	30 16                	xor    BYTE PTR [esi],dl
    17a7:	28 00                	sub    BYTE PTR [eax],al
    17a9:	00 00                	add    BYTE PTR [eax],al
    17ab:	05 46 68 03 00       	add    eax,0x36846
    17b0:	00 05 03 04 45 00    	add    BYTE PTR ds:0x450403,al
    17b6:	30 08                	xor    BYTE PTR [eax],cl
    17b8:	04 b3                	add    al,0xb3
    17ba:	01 00                	add    DWORD PTR [eax],eax
    17bc:	00 00                	add    BYTE PTR [eax],al
    17be:	ea 01 00 00 04 00 f7 	jmp    0xf700:0x4000001
    17c5:	07                   	pop    es
    17c6:	00 00                	add    BYTE PTR [eax],al
    17c8:	04 01                	add    al,0x1
    17ca:	f4                   	hlt    
    17cb:	00 00                	add    BYTE PTR [eax],al
    17cd:	00 0c c8             	add    BYTE PTR [eax+ecx*8],cl
    17d0:	06                   	push   es
    17d1:	00 00                	add    BYTE PTR [eax],al
    17d3:	72 00                	jb     17d5 <sysEnter_Vector-0x12e82b>
    17d5:	00 00                	add    BYTE PTR [eax],al
    17d7:	18 12                	sbb    BYTE PTR [edx],dl
    17d9:	00 30                	add    BYTE PTR [eax],dh
    17db:	9b                   	fwait
    17dc:	01 00                	add    DWORD PTR [eax],eax
    17de:	00 01                	add    BYTE PTR [ecx],al
    17e0:	0a 00                	or     al,BYTE PTR [eax]
    17e2:	00 02                	add    BYTE PTR [edx],al
    17e4:	01 08                	add    DWORD PTR [eax],ecx
    17e6:	5b                   	pop    ebx
    17e7:	00 00                	add    BYTE PTR [eax],al
    17e9:	00 02                	add    BYTE PTR [edx],al
    17eb:	02 07                	add    al,BYTE PTR [edi]
    17ed:	0e                   	push   cs
    17ee:	00 00                	add    BYTE PTR [eax],al
    17f0:	00 02                	add    BYTE PTR [edx],al
    17f2:	04 07                	add    al,0x7
    17f4:	3e 00 00             	add    BYTE PTR ds:[eax],al
    17f7:	00 02                	add    BYTE PTR [edx],al
    17f9:	04 07                	add    al,0x7
    17fb:	39 00                	cmp    DWORD PTR [eax],eax
    17fd:	00 00                	add    BYTE PTR [eax],al
    17ff:	02 01                	add    al,BYTE PTR [ecx]
    1801:	06                   	push   es
    1802:	5d                   	pop    ebp
    1803:	00 00                	add    BYTE PTR [eax],al
    1805:	00 02                	add    BYTE PTR [edx],al
    1807:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    180d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1814:	02 08                	add    cl,BYTE PTR [eax]
    1816:	05 00 00 00 00       	add    eax,0x0
    181b:	02 08                	add    cl,BYTE PTR [eax]
    181d:	07                   	pop    es
    181e:	34 00                	xor    al,0x0
    1820:	00 00                	add    BYTE PTR [eax],al
    1822:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1829:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    182c:	e1 00                	loope  182e <sysEnter_Vector-0x12e7d2>
    182e:	00 00                	add    BYTE PTR [eax],al
    1830:	04 04                	add    al,0x4
    1832:	05 04 7a 00 00       	add    eax,0x7a04
    1837:	00 02                	add    BYTE PTR [edx],al
    1839:	01 06                	add    DWORD PTR [esi],eax
    183b:	64 00 00             	add    BYTE PTR fs:[eax],al
    183e:	00 06                	add    BYTE PTR [esi],al
    1840:	69 00 00 00 02 34    	imul   eax,DWORD PTR [eax],0x34020000
    1846:	33 00                	xor    eax,DWORD PTR [eax]
    1848:	00 00                	add    BYTE PTR [eax],al
    184a:	05 04 92 00 00       	add    eax,0x9204
    184f:	00 07                	add    BYTE PTR [edi],al
    1851:	7a 00                	jp     1853 <sysEnter_Vector-0x12e7ad>
    1853:	00 00                	add    BYTE PTR [eax],al
    1855:	06                   	push   es
    1856:	94                   	xchg   esp,eax
    1857:	04 00                	add    al,0x0
    1859:	00 03                	add    BYTE PTR [ebx],al
    185b:	d8 33                	fdiv   DWORD PTR [ebx]
    185d:	00 00                	add    BYTE PTR [eax],al
    185f:	00 02                	add    BYTE PTR [edx],al
    1861:	0c 04                	or     al,0x4
    1863:	9b                   	fwait
    1864:	00 00                	add    BYTE PTR [eax],al
    1866:	00 02                	add    BYTE PTR [edx],al
    1868:	01 02                	add    DWORD PTR [edx],eax
    186a:	95                   	xchg   ebp,eax
    186b:	00 00                	add    BYTE PTR [eax],al
    186d:	00 08                	add    BYTE PTR [eax],cl
    186f:	da 06                	fiadd  DWORD PTR [esi]
    1871:	00 00                	add    BYTE PTR [eax],al
    1873:	01 0a                	add    DWORD PTR [edx],ecx
    1875:	72 00                	jb     1877 <sysEnter_Vector-0x12e789>
    1877:	00 00                	add    BYTE PTR [eax],al
    1879:	18 12                	sbb    BYTE PTR [edx],dl
    187b:	00 30                	add    BYTE PTR [eax],dh
    187d:	9b                   	fwait
    187e:	01 00                	add    DWORD PTR [eax],eax
    1880:	00 01                	add    BYTE PTR [ecx],al
    1882:	9c                   	pushf  
    1883:	7a 01                	jp     1886 <sysEnter_Vector-0x12e77a>
    1885:	00 00                	add    BYTE PTR [eax],al
    1887:	09 d5                	or     ebp,edx
    1889:	06                   	push   es
    188a:	00 00                	add    BYTE PTR [eax],al
    188c:	01 0a                	add    DWORD PTR [edx],ecx
    188e:	72 00                	jb     1890 <sysEnter_Vector-0x12e770>
    1890:	00 00                	add    BYTE PTR [eax],al
    1892:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    1898:	63 00                	arpl   WORD PTR [eax],ax
    189a:	01 0a                	add    DWORD PTR [edx],ecx
    189c:	7a 01                	jp     189f <sysEnter_Vector-0x12e761>
    189e:	00 00                	add    BYTE PTR [eax],al
    18a0:	02 91 04 0a 6e 00    	add    dl,BYTE PTR [ecx+0x6e0a04]
    18a6:	01 0a                	add    DWORD PTR [edx],ecx
    18a8:	97                   	xchg   edi,eax
    18a9:	00 00                	add    BYTE PTR [eax],al
    18ab:	00 02                	add    BYTE PTR [edx],al
    18ad:	91                   	xchg   ecx,eax
    18ae:	08 0b                	or     BYTE PTR [ebx],cl
    18b0:	64                   	fs
    18b1:	77 00                	ja     18b3 <sysEnter_Vector-0x12e74d>
    18b3:	01 0c a9             	add    DWORD PTR [ecx+ebp*4],ecx
    18b6:	00 00                	add    BYTE PTR [eax],al
    18b8:	00 02                	add    BYTE PTR [edx],al
    18ba:	91                   	xchg   ecx,eax
    18bb:	5e                   	pop    esi
    18bc:	0b 64 64 00          	or     esp,DWORD PTR [esp+eiz*2+0x0]
    18c0:	01 0c a9             	add    DWORD PTR [ecx+ebp*4],ecx
    18c3:	00 00                	add    BYTE PTR [eax],al
    18c5:	00 02                	add    BYTE PTR [edx],al
    18c7:	91                   	xchg   ecx,eax
    18c8:	5f                   	pop    edi
    18c9:	0c 4a                	or     al,0x4a
    18cb:	12 00                	adc    al,BYTE PTR [eax]
    18cd:	30 7d 00             	xor    BYTE PTR [ebp+0x0],bh
    18d0:	00 00                	add    BYTE PTR [eax],al
    18d2:	31 01                	xor    DWORD PTR [ecx],eax
    18d4:	00 00                	add    BYTE PTR [eax],al
    18d6:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    18d9:	01 13                	add    DWORD PTR [ebx],edx
    18db:	81 01 00 00 02 91    	add    DWORD PTR [ecx],0x91020000
    18e1:	74 0b                	je     18ee <sysEnter_Vector-0x12e712>
    18e3:	74 00                	je     18e5 <sysEnter_Vector-0x12e71b>
    18e5:	01 14 8c             	add    DWORD PTR [esp+ecx*4],edx
    18e8:	01 00                	add    DWORD PTR [eax],eax
    18ea:	00 02                	add    BYTE PTR [edx],al
    18ec:	91                   	xchg   ecx,eax
    18ed:	70 00                	jo     18ef <sysEnter_Vector-0x12e711>
    18ef:	0c cd                	or     al,0xcd
    18f1:	12 00                	adc    al,BYTE PTR [eax]
    18f3:	30 79 00             	xor    BYTE PTR [ecx+0x0],bh
    18f6:	00 00                	add    BYTE PTR [eax],al
    18f8:	57                   	push   edi
    18f9:	01 00                	add    DWORD PTR [eax],eax
    18fb:	00 0b                	add    BYTE PTR [ebx],cl
    18fd:	66                   	data16
    18fe:	00 01                	add    BYTE PTR [ecx],al
    1900:	23 81 01 00 00 02    	and    eax,DWORD PTR [ecx+0x2000001]
    1906:	91                   	xchg   ecx,eax
    1907:	6c                   	ins    BYTE PTR es:[edi],dx
    1908:	0b 74 00 01          	or     esi,DWORD PTR [eax+eax*1+0x1]
    190c:	24 8c                	and    al,0x8c
    190e:	01 00                	add    DWORD PTR [eax],eax
    1910:	00 02                	add    BYTE PTR [edx],al
    1912:	91                   	xchg   ecx,eax
    1913:	68 00 0d 46 13       	push   0x13460d00
    1918:	00 30                	add    BYTE PTR [eax],dh
    191a:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    191d:	00 0b                	add    BYTE PTR [ebx],cl
    191f:	66                   	data16
    1920:	00 01                	add    BYTE PTR [ecx],al
    1922:	32 8c 00 00 00 02 91 	xor    cl,BYTE PTR [eax+eax*1-0x6efe0000]
    1929:	64 0b 74 00 01       	or     esi,DWORD PTR fs:[eax+eax*1+0x1]
    192e:	33 74 00 00          	xor    esi,DWORD PTR [eax+eax*1+0x0]
    1932:	00 02                	add    BYTE PTR [edx],al
    1934:	91                   	xchg   ecx,eax
    1935:	60                   	pusha  
    1936:	00 00                	add    BYTE PTR [eax],al
    1938:	05 04 80 01 00       	add    eax,0x18004
    193d:	00 0e                	add    BYTE PTR [esi],cl
    193f:	05 04 87 01 00       	add    eax,0x18704
    1944:	00 07                	add    BYTE PTR [edi],al
    1946:	81 00 00 00 05 04    	add    DWORD PTR [eax],0x4050000
    194c:	81 00 00 00 0f 4b    	add    DWORD PTR [eax],0x4b0f0000
    1952:	00 00                	add    BYTE PTR [eax],al
    1954:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1957:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    195d:	fc                   	cld    
    195e:	44                   	inc    esp
    195f:	00 30                	add    BYTE PTR [eax],dh
    1961:	0f af 00             	imul   eax,DWORD PTR [eax]
    1964:	00 00                	add    BYTE PTR [eax],al
    1966:	04 35                	add    al,0x35
    1968:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    196e:	00 45 00             	add    BYTE PTR [ebp+0x0],al
    1971:	30 0f                	xor    BYTE PTR [edi],cl
    1973:	5b                   	pop    ebx
    1974:	01 00                	add    DWORD PTR [eax],eax
    1976:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    1979:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    197f:	f8                   	clc    
    1980:	44                   	inc    esp
    1981:	00 30                	add    BYTE PTR [eax],dh
    1983:	0f 54 00             	andps  xmm0,XMMWORD PTR [eax]
    1986:	00 00                	add    BYTE PTR [eax],al
    1988:	04 37                	add    al,0x37
    198a:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    1990:	08 45 00             	or     BYTE PTR [ebp+0x0],al
    1993:	30 0f                	xor    BYTE PTR [edi],cl
    1995:	28 00                	sub    BYTE PTR [eax],al
    1997:	00 00                	add    BYTE PTR [eax],al
    1999:	05 46 e7 01 00       	add    eax,0x1e746
    199e:	00 05 03 04 45 00    	add    BYTE PTR ds:0x450403,al
    19a4:	30 05 04 74 00 00    	xor    BYTE PTR ds:0x7404,al
    19aa:	00 00                	add    BYTE PTR [eax],al
    19ac:	eb 01                	jmp    19af <sysEnter_Vector-0x12e651>
    19ae:	00 00                	add    BYTE PTR [eax],al
    19b0:	04 00                	add    al,0x0
    19b2:	b8 08 00 00 04       	mov    eax,0x4000008
    19b7:	01 f4                	add    esp,esi
    19b9:	00 00                	add    BYTE PTR [eax],al
    19bb:	00 0c ed 06 00 00 72 	add    BYTE PTR [ebp*8+0x72000006],cl
    19c2:	00 00                	add    BYTE PTR [eax],al
    19c4:	00 b4 13 00 30 e7 00 	add    BYTE PTR [ebx+edx*1+0xe73000],dh
    19cb:	00 00                	add    BYTE PTR [eax],al
    19cd:	e8 0a 00 00 02       	call   20019dc <sysEnter_Vector+0x1ed19dc>
    19d2:	01 06                	add    DWORD PTR [esi],eax
    19d4:	64 00 00             	add    BYTE PTR fs:[eax],al
    19d7:	00 02                	add    BYTE PTR [edx],al
    19d9:	01 06                	add    DWORD PTR [esi],eax
    19db:	5d                   	pop    ebp
    19dc:	00 00                	add    BYTE PTR [eax],al
    19de:	00 02                	add    BYTE PTR [edx],al
    19e0:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    19e6:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    19ed:	02 08                	add    cl,BYTE PTR [eax]
    19ef:	05 00 00 00 00       	add    eax,0x0
    19f4:	04 46                	add    al,0x46
    19f6:	06                   	push   es
    19f7:	00 00                	add    BYTE PTR [eax],al
    19f9:	02 2e                	add    ch,BYTE PTR [esi]
    19fb:	53                   	push   ebx
    19fc:	00 00                	add    BYTE PTR [eax],al
    19fe:	00 02                	add    BYTE PTR [edx],al
    1a00:	01 08                	add    DWORD PTR [eax],ecx
    1a02:	5b                   	pop    ebx
    1a03:	00 00                	add    BYTE PTR [eax],al
    1a05:	00 04 07             	add    BYTE PTR [edi+eax*1],al
    1a08:	07                   	pop    es
    1a09:	00 00                	add    BYTE PTR [eax],al
    1a0b:	02 31                	add    dh,BYTE PTR [ecx]
    1a0d:	65 00 00             	add    BYTE PTR gs:[eax],al
    1a10:	00 02                	add    BYTE PTR [edx],al
    1a12:	02 07                	add    al,BYTE PTR [edi]
    1a14:	0e                   	push   cs
    1a15:	00 00                	add    BYTE PTR [eax],al
    1a17:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1a1a:	00 00                	add    BYTE PTR [eax],al
    1a1c:	00 02                	add    BYTE PTR [edx],al
    1a1e:	34 77                	xor    al,0x77
    1a20:	00 00                	add    BYTE PTR [eax],al
    1a22:	00 02                	add    BYTE PTR [edx],al
    1a24:	04 07                	add    al,0x7
    1a26:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1a29:	00 02                	add    BYTE PTR [edx],al
    1a2b:	08 07                	or     BYTE PTR [edi],al
    1a2d:	34 00                	xor    al,0x0
    1a2f:	00 00                	add    BYTE PTR [eax],al
    1a31:	04 94                	add    al,0x94
    1a33:	04 00                	add    al,0x0
    1a35:	00 03                	add    BYTE PTR [ebx],al
    1a37:	d8 77 00             	fdiv   DWORD PTR [edi+0x0]
    1a3a:	00 00                	add    BYTE PTR [eax],al
    1a3c:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1a43:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1a46:	9b                   	fwait
    1a47:	00 00                	add    BYTE PTR [eax],al
    1a49:	00 02                	add    BYTE PTR [edx],al
    1a4b:	01 02                	add    DWORD PTR [edx],eax
    1a4d:	95                   	xchg   ebp,eax
    1a4e:	00 00                	add    BYTE PTR [eax],al
    1a50:	00 02                	add    BYTE PTR [edx],al
    1a52:	04 07                	add    al,0x7
    1a54:	39 00                	cmp    DWORD PTR [eax],eax
    1a56:	00 00                	add    BYTE PTR [eax],al
    1a58:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1a5b:	e1 00                	loope  1a5d <sysEnter_Vector-0x12e5a3>
    1a5d:	00 00                	add    BYTE PTR [eax],al
    1a5f:	05 04 06 04 25       	add    eax,0x25040604
    1a64:	00 00                	add    BYTE PTR [eax],al
    1a66:	00 07                	add    BYTE PTR [edi],al
    1a68:	ff 06                	inc    DWORD PTR [esi]
    1a6a:	00 00                	add    BYTE PTR [eax],al
    1a6c:	01 08                	add    DWORD PTR [eax],ecx
    1a6e:	b3 00                	mov    bl,0x0
    1a70:	00 00                	add    BYTE PTR [eax],al
    1a72:	b4 13                	mov    ah,0x13
    1a74:	00 30                	add    BYTE PTR [eax],dh
    1a76:	c7 00 00 00 01 9c    	mov    DWORD PTR [eax],0x9c010000
    1a7c:	3e 01 00             	add    DWORD PTR ds:[eax],eax
    1a7f:	00 08                	add    BYTE PTR [eax],cl
    1a81:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    1a84:	01 08                	add    DWORD PTR [eax],ecx
    1a86:	b3 00                	mov    bl,0x0
    1a88:	00 00                	add    BYTE PTR [eax],al
    1a8a:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    1a90:	6c                   	ins    BYTE PTR es:[edi],dx
    1a91:	00 01                	add    BYTE PTR [ecx],al
    1a93:	08 3a                	or     BYTE PTR [edx],bh
    1a95:	00 00                	add    BYTE PTR [eax],al
    1a97:	00 02                	add    BYTE PTR [edx],al
    1a99:	91                   	xchg   ecx,eax
    1a9a:	04 08                	add    al,0x8
    1a9c:	6c                   	ins    BYTE PTR es:[edi],dx
    1a9d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1a9f:	00 01                	add    BYTE PTR [ecx],al
    1aa1:	08 85 00 00 00 02    	or     BYTE PTR [ebp+0x2000000],al
    1aa7:	91                   	xchg   ecx,eax
    1aa8:	08 09                	or     BYTE PTR [ecx],cl
    1aaa:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1aad:	0a 3e                	or     bh,BYTE PTR [esi]
    1aaf:	01 00                	add    DWORD PTR [eax],eax
    1ab1:	00 02                	add    BYTE PTR [edx],al
    1ab3:	91                   	xchg   ecx,eax
    1ab4:	74 09                	je     1abf <sysEnter_Vector-0x12e541>
    1ab6:	65 00 01             	add    BYTE PTR gs:[ecx],al
    1ab9:	0b 44 01 00          	or     eax,DWORD PTR [ecx+eax*1+0x0]
    1abd:	00 02                	add    BYTE PTR [edx],al
    1abf:	91                   	xchg   ecx,eax
    1ac0:	70 0a                	jo     1acc <sysEnter_Vector-0x12e534>
    1ac2:	e1 06                	loope  1aca <sysEnter_Vector-0x12e536>
    1ac4:	00 00                	add    BYTE PTR [eax],al
    1ac6:	01 0c 5a             	add    DWORD PTR [edx+ebx*2],ecx
    1ac9:	00 00                	add    BYTE PTR [eax],al
    1acb:	00 02                	add    BYTE PTR [edx],al
    1acd:	91                   	xchg   ecx,eax
    1ace:	6a 09                	push   0x9
    1ad0:	66                   	data16
    1ad1:	00 01                	add    BYTE PTR [ecx],al
    1ad3:	0d 4a 01 00 00       	or     eax,0x14a
    1ad8:	02 91 6c 0a fa 06    	add    dl,BYTE PTR [ecx+0x6fa0a6c]
    1ade:	00 00                	add    BYTE PTR [eax],al
    1ae0:	01 0e                	add    DWORD PTR [esi],ecx
    1ae2:	6c                   	ins    BYTE PTR es:[edi],dx
    1ae3:	00 00                	add    BYTE PTR [eax],al
    1ae5:	00 02                	add    BYTE PTR [edx],al
    1ae7:	91                   	xchg   ecx,eax
    1ae8:	64 00 06             	add    BYTE PTR fs:[esi],al
    1aeb:	04 48                	add    al,0x48
    1aed:	00 00                	add    BYTE PTR [eax],al
    1aef:	00 06                	add    BYTE PTR [esi],al
    1af1:	04 5a                	add    al,0x5a
    1af3:	00 00                	add    BYTE PTR [eax],al
    1af5:	00 06                	add    BYTE PTR [esi],al
    1af7:	04 6c                	add    al,0x6c
    1af9:	00 00                	add    BYTE PTR [eax],al
    1afb:	00 0b                	add    BYTE PTR [ebx],cl
    1afd:	e6 06                	out    0x6,al
    1aff:	00 00                	add    BYTE PTR [eax],al
    1b01:	01 1f                	add    DWORD PTR [edi],ebx
    1b03:	b3 00                	mov    bl,0x0
    1b05:	00 00                	add    BYTE PTR [eax],al
    1b07:	7b 14                	jnp    1b1d <sysEnter_Vector-0x12e4e3>
    1b09:	00 30                	add    BYTE PTR [eax],dh
    1b0b:	20 00                	and    BYTE PTR [eax],al
    1b0d:	00 00                	add    BYTE PTR [eax],al
    1b0f:	01 9c 93 01 00 00 08 	add    DWORD PTR [ebx+edx*4+0x8000001],ebx
    1b16:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    1b19:	01 1f                	add    DWORD PTR [edi],ebx
    1b1b:	b3 00                	mov    bl,0x0
    1b1d:	00 00                	add    BYTE PTR [eax],al
    1b1f:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    1b25:	6c                   	ins    BYTE PTR es:[edi],dx
    1b26:	00 01                	add    BYTE PTR [ecx],al
    1b28:	1f                   	pop    ds
    1b29:	3a 00                	cmp    al,BYTE PTR [eax]
    1b2b:	00 00                	add    BYTE PTR [eax],al
    1b2d:	02 91 04 08 6c 65    	add    dl,BYTE PTR [ecx+0x656c0804]
    1b33:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1b34:	00 01                	add    BYTE PTR [ecx],al
    1b36:	1f                   	pop    ds
    1b37:	85 00                	test   DWORD PTR [eax],eax
    1b39:	00 00                	add    BYTE PTR [eax],al
    1b3b:	02 91 08 00 0c 4b    	add    dl,BYTE PTR [ecx+0x4b0c0008]
    1b41:	00 00                	add    BYTE PTR [eax],al
    1b43:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1b46:	6c                   	ins    BYTE PTR es:[edi],dx
    1b47:	00 00                	add    BYTE PTR [eax],al
    1b49:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
    1b4f:	30 0c af             	xor    BYTE PTR [edi+ebp*4],cl
    1b52:	00 00                	add    BYTE PTR [eax],al
    1b54:	00 04 35 6c 00 00 00 	add    BYTE PTR [esi*1+0x6c],al
    1b5b:	05 03 00 45 00       	add    eax,0x450003
    1b60:	30 0c 5b             	xor    BYTE PTR [ebx+ebx*2],cl
    1b63:	01 00                	add    DWORD PTR [eax],eax
    1b65:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    1b68:	6c                   	ins    BYTE PTR es:[edi],dx
    1b69:	00 00                	add    BYTE PTR [eax],al
    1b6b:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
    1b71:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
    1b74:	00 00                	add    BYTE PTR [eax],al
    1b76:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    1b79:	6c                   	ins    BYTE PTR es:[edi],dx
    1b7a:	00 00                	add    BYTE PTR [eax],al
    1b7c:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
    1b82:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
    1b85:	00 00                	add    BYTE PTR [eax],al
    1b87:	00 05 46 e8 01 00    	add    BYTE PTR ds:0x1e846,al
    1b8d:	00 05 03 04 45 00    	add    BYTE PTR ds:0x450403,al
    1b93:	30 06                	xor    BYTE PTR [esi],al
    1b95:	04 b5                	add    al,0xb5
    1b97:	00 00                	add    BYTE PTR [eax],al
    1b99:	00 00                	add    BYTE PTR [eax],al
    1b9b:	75 01                	jne    1b9e <sysEnter_Vector-0x12e462>
    1b9d:	00 00                	add    BYTE PTR [eax],al
    1b9f:	04 00                	add    al,0x0
    1ba1:	75 09                	jne    1bac <sysEnter_Vector-0x12e454>
    1ba3:	00 00                	add    BYTE PTR [eax],al
    1ba5:	04 01                	add    al,0x1
    1ba7:	f4                   	hlt    
    1ba8:	00 00                	add    BYTE PTR [eax],al
    1baa:	00 0c 2c             	add    BYTE PTR [esp+ebp*1],cl
    1bad:	07                   	pop    es
    1bae:	00 00                	add    BYTE PTR [eax],al
    1bb0:	72 00                	jb     1bb2 <sysEnter_Vector-0x12e44e>
    1bb2:	00 00                	add    BYTE PTR [eax],al
    1bb4:	9c                   	pushf  
    1bb5:	14 00                	adc    al,0x0
    1bb7:	30 14 00             	xor    BYTE PTR [eax+eax*1],dl
    1bba:	00 00                	add    BYTE PTR [eax],al
    1bbc:	b6 0b                	mov    dh,0xb
    1bbe:	00 00                	add    BYTE PTR [eax],al
    1bc0:	02 01                	add    al,BYTE PTR [ecx]
    1bc2:	06                   	push   es
    1bc3:	64 00 00             	add    BYTE PTR fs:[eax],al
    1bc6:	00 02                	add    BYTE PTR [edx],al
    1bc8:	01 06                	add    DWORD PTR [esi],eax
    1bca:	5d                   	pop    ebp
    1bcb:	00 00                	add    BYTE PTR [eax],al
    1bcd:	00 02                	add    BYTE PTR [edx],al
    1bcf:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1bd5:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1bdc:	02 08                	add    cl,BYTE PTR [eax]
    1bde:	05 00 00 00 00       	add    eax,0x0
    1be3:	02 01                	add    al,BYTE PTR [ecx]
    1be5:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    1be8:	00 00                	add    BYTE PTR [eax],al
    1bea:	02 02                	add    al,BYTE PTR [edx]
    1bec:	07                   	pop    es
    1bed:	0e                   	push   cs
    1bee:	00 00                	add    BYTE PTR [eax],al
    1bf0:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1bf3:	00 00                	add    BYTE PTR [eax],al
    1bf5:	00 02                	add    BYTE PTR [edx],al
    1bf7:	34 61                	xor    al,0x61
    1bf9:	00 00                	add    BYTE PTR [eax],al
    1bfb:	00 02                	add    BYTE PTR [edx],al
    1bfd:	04 07                	add    al,0x7
    1bff:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1c02:	00 02                	add    BYTE PTR [edx],al
    1c04:	08 07                	or     BYTE PTR [edi],al
    1c06:	34 00                	xor    al,0x0
    1c08:	00 00                	add    BYTE PTR [eax],al
    1c0a:	04 94                	add    al,0x94
    1c0c:	04 00                	add    al,0x0
    1c0e:	00 03                	add    BYTE PTR [ebx],al
    1c10:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    1c13:	00 00                	add    BYTE PTR [eax],al
    1c15:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1c1c:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1c1f:	9b                   	fwait
    1c20:	00 00                	add    BYTE PTR [eax],al
    1c22:	00 02                	add    BYTE PTR [edx],al
    1c24:	01 02                	add    DWORD PTR [edx],eax
    1c26:	95                   	xchg   ebp,eax
    1c27:	00 00                	add    BYTE PTR [eax],al
    1c29:	00 02                	add    BYTE PTR [edx],al
    1c2b:	04 07                	add    al,0x7
    1c2d:	39 00                	cmp    DWORD PTR [eax],eax
    1c2f:	00 00                	add    BYTE PTR [eax],al
    1c31:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1c34:	e1 00                	loope  1c36 <sysEnter_Vector-0x12e3ca>
    1c36:	00 00                	add    BYTE PTR [eax],al
    1c38:	05 04 06 04 25       	add    eax,0x25040604
    1c3d:	00 00                	add    BYTE PTR [eax],al
    1c3f:	00 04 15 07 00 00 04 	add    BYTE PTR [edx*1+0x4000007],al
    1c46:	15 7a 00 00 00       	adc    eax,0x7a
    1c4b:	07                   	pop    es
    1c4c:	27                   	daa    
    1c4d:	07                   	pop    es
    1c4e:	00 00                	add    BYTE PTR [eax],al
    1c50:	01 09                	add    DWORD PTR [ecx],ecx
    1c52:	9d                   	popf   
    1c53:	00 00                	add    BYTE PTR [eax],al
    1c55:	00 9c 14 00 30 14 00 	add    BYTE PTR [esp+edx*1+0x143000],bl
    1c5c:	00 00                	add    BYTE PTR [eax],al
    1c5e:	01 9c 1d 01 00 00 08 	add    DWORD PTR [ebp+ebx*1+0x8000001],ebx
    1c65:	10 07                	adc    BYTE PTR [edi],al
    1c67:	00 00                	add    BYTE PTR [eax],al
    1c69:	01 09                	add    DWORD PTR [ecx],ecx
    1c6b:	9d                   	popf   
    1c6c:	00 00                	add    BYTE PTR [eax],al
    1c6e:	00 02                	add    BYTE PTR [edx],al
    1c70:	91                   	xchg   ecx,eax
    1c71:	00 09                	add    BYTE PTR [ecx],cl
    1c73:	6c                   	ins    BYTE PTR es:[edi],dx
    1c74:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1c76:	00 01                	add    BYTE PTR [ecx],al
    1c78:	09 6f 00             	or     DWORD PTR [edi+0x0],ebp
    1c7b:	00 00                	add    BYTE PTR [eax],al
    1c7d:	02 91 04 08 1b 07    	add    dl,BYTE PTR [ecx+0x71b0804]
    1c83:	00 00                	add    BYTE PTR [eax],al
    1c85:	01 09                	add    DWORD PTR [ecx],ecx
    1c87:	3a 00                	cmp    al,BYTE PTR [eax]
    1c89:	00 00                	add    BYTE PTR [eax],al
    1c8b:	02 91 08 08 51 08    	add    dl,BYTE PTR [ecx+0x8510808]
    1c91:	00 00                	add    BYTE PTR [eax],al
    1c93:	01 09                	add    DWORD PTR [ecx],ecx
    1c95:	3a 00                	cmp    al,BYTE PTR [eax]
    1c97:	00 00                	add    BYTE PTR [eax],al
    1c99:	02 91 0c 09 66 64    	add    dl,BYTE PTR [ecx+0x6466090c]
    1c9f:	00 01                	add    BYTE PTR [ecx],al
    1ca1:	09 3a                	or     DWORD PTR [edx],edi
    1ca3:	00 00                	add    BYTE PTR [eax],al
    1ca5:	00 02                	add    BYTE PTR [edx],al
    1ca7:	91                   	xchg   ecx,eax
    1ca8:	10 08                	adc    BYTE PTR [eax],cl
    1caa:	20 07                	and    BYTE PTR [edi],al
    1cac:	00 00                	add    BYTE PTR [eax],al
    1cae:	01 09                	add    DWORD PTR [ecx],ecx
    1cb0:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1cb1:	00 00                	add    BYTE PTR [eax],al
    1cb3:	00 02                	add    BYTE PTR [edx],al
    1cb5:	91                   	xchg   ecx,eax
    1cb6:	14 00                	adc    al,0x0
    1cb8:	0a 4b 00             	or     cl,BYTE PTR [ebx+0x0]
    1cbb:	00 00                	add    BYTE PTR [eax],al
    1cbd:	05 34 56 00 00       	add    eax,0x5634
    1cc2:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
    1cc8:	30 0a                	xor    BYTE PTR [edx],cl
    1cca:	af                   	scas   eax,DWORD PTR es:[edi]
    1ccb:	00 00                	add    BYTE PTR [eax],al
    1ccd:	00 05 35 56 00 00    	add    BYTE PTR ds:0x5635,al
    1cd3:	00 05 03 00 45 00    	add    BYTE PTR ds:0x450003,al
    1cd9:	30 0a                	xor    BYTE PTR [edx],cl
    1cdb:	5b                   	pop    ebx
    1cdc:	01 00                	add    DWORD PTR [eax],eax
    1cde:	00 05 36 56 00 00    	add    BYTE PTR ds:0x5636,al
    1ce4:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
    1cea:	30 0a                	xor    BYTE PTR [edx],cl
    1cec:	54                   	push   esp
    1ced:	00 00                	add    BYTE PTR [eax],al
    1cef:	00 05 37 56 00 00    	add    BYTE PTR ds:0x5637,al
    1cf5:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
    1cfb:	30 0a                	xor    BYTE PTR [edx],cl
    1cfd:	28 00                	sub    BYTE PTR [eax],al
    1cff:	00 00                	add    BYTE PTR [eax],al
    1d01:	06                   	push   es
    1d02:	46                   	inc    esi
    1d03:	72 01                	jb     1d06 <sysEnter_Vector-0x12e2fa>
    1d05:	00 00                	add    BYTE PTR [eax],al
    1d07:	05 03 04 45 00       	add    eax,0x450403
    1d0c:	30 06                	xor    BYTE PTR [esi],al
    1d0e:	04 9f                	add    al,0x9f
    1d10:	00 00                	add    BYTE PTR [eax],al
    1d12:	00 00                	add    BYTE PTR [eax],al
    1d14:	e4 01                	in     al,0x1
    1d16:	00 00                	add    BYTE PTR [eax],al
    1d18:	04 00                	add    al,0x0
    1d1a:	07                   	pop    es
    1d1b:	0a 00                	or     al,BYTE PTR [eax]
    1d1d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1d20:	f4                   	hlt    
    1d21:	00 00                	add    BYTE PTR [eax],al
    1d23:	00 0c 37             	add    BYTE PTR [edi+esi*1],cl
    1d26:	07                   	pop    es
    1d27:	00 00                	add    BYTE PTR [eax],al
    1d29:	72 00                	jb     1d2b <sysEnter_Vector-0x12e2d5>
    1d2b:	00 00                	add    BYTE PTR [eax],al
    1d2d:	b0 14                	mov    al,0x14
    1d2f:	00 30                	add    BYTE PTR [eax],dh
    1d31:	29 00                	sub    DWORD PTR [eax],eax
    1d33:	00 00                	add    BYTE PTR [eax],al
    1d35:	7a 0c                	jp     1d43 <sysEnter_Vector-0x12e2bd>
    1d37:	00 00                	add    BYTE PTR [eax],al
    1d39:	02 01                	add    al,BYTE PTR [ecx]
    1d3b:	06                   	push   es
    1d3c:	64 00 00             	add    BYTE PTR fs:[eax],al
    1d3f:	00 02                	add    BYTE PTR [edx],al
    1d41:	01 06                	add    DWORD PTR [esi],eax
    1d43:	5d                   	pop    ebp
    1d44:	00 00                	add    BYTE PTR [eax],al
    1d46:	00 02                	add    BYTE PTR [edx],al
    1d48:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1d4e:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1d55:	02 08                	add    cl,BYTE PTR [eax]
    1d57:	05 00 00 00 00       	add    eax,0x0
    1d5c:	02 01                	add    al,BYTE PTR [ecx]
    1d5e:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    1d61:	00 00                	add    BYTE PTR [eax],al
    1d63:	02 02                	add    al,BYTE PTR [edx]
    1d65:	07                   	pop    es
    1d66:	0e                   	push   cs
    1d67:	00 00                	add    BYTE PTR [eax],al
    1d69:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1d6c:	00 00                	add    BYTE PTR [eax],al
    1d6e:	00 02                	add    BYTE PTR [edx],al
    1d70:	34 61                	xor    al,0x61
    1d72:	00 00                	add    BYTE PTR [eax],al
    1d74:	00 02                	add    BYTE PTR [edx],al
    1d76:	04 07                	add    al,0x7
    1d78:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1d7b:	00 02                	add    BYTE PTR [edx],al
    1d7d:	08 07                	or     BYTE PTR [edi],al
    1d7f:	34 00                	xor    al,0x0
    1d81:	00 00                	add    BYTE PTR [eax],al
    1d83:	04 9b                	add    al,0x9b
    1d85:	04 00                	add    al,0x0
    1d87:	00 02                	add    BYTE PTR [edx],al
    1d89:	56                   	push   esi
    1d8a:	61                   	popa   
    1d8b:	00 00                	add    BYTE PTR [eax],al
    1d8d:	00 02                	add    BYTE PTR [edx],al
    1d8f:	04 05                	add    al,0x5
    1d91:	05 00 00 00 02       	add    eax,0x2000000
    1d96:	0c 04                	or     al,0x4
    1d98:	9b                   	fwait
    1d99:	00 00                	add    BYTE PTR [eax],al
    1d9b:	00 02                	add    BYTE PTR [edx],al
    1d9d:	01 02                	add    DWORD PTR [edx],eax
    1d9f:	95                   	xchg   ebp,eax
    1da0:	00 00                	add    BYTE PTR [eax],al
    1da2:	00 05 07 03 00 00    	add    BYTE PTR ds:0x307,al
    1da8:	04 61                	add    al,0x61
    1daa:	00 00                	add    BYTE PTR [eax],al
    1dac:	00 05 15 4a 01 00    	add    BYTE PTR ds:0x14a15,al
    1db2:	00 06                	add    BYTE PTR [esi],al
    1db4:	6c                   	ins    BYTE PTR es:[edi],dx
    1db5:	03 00                	add    eax,DWORD PTR [eax]
    1db7:	00 00                	add    BYTE PTR [eax],al
    1db9:	06                   	push   es
    1dba:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    1dbb:	03 00                	add    eax,DWORD PTR [eax]
    1dbd:	00 01                	add    BYTE PTR [ecx],al
    1dbf:	06                   	push   es
    1dc0:	73 02                	jae    1dc4 <sysEnter_Vector-0x12e23c>
    1dc2:	00 00                	add    BYTE PTR [eax],al
    1dc4:	02 06                	add    al,BYTE PTR [esi]
    1dc6:	f9                   	stc    
    1dc7:	02 00                	add    al,BYTE PTR [eax]
    1dc9:	00 03                	add    BYTE PTR [ebx],al
    1dcb:	06                   	push   es
    1dcc:	53                   	push   ebx
    1dcd:	02 00                	add    al,BYTE PTR [eax]
    1dcf:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    1dd2:	be 03 00 00 05       	mov    esi,0x5000003
    1dd7:	06                   	push   es
    1dd8:	1d 03 00 00 06       	sbb    eax,0x6000003
    1ddd:	06                   	push   es
    1dde:	66                   	data16
    1ddf:	02 00                	add    al,BYTE PTR [eax]
    1de1:	00 07                	add    BYTE PTR [edi],al
    1de3:	06                   	push   es
    1de4:	f4                   	hlt    
    1de5:	03 00                	add    eax,DWORD PTR [eax]
    1de7:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    1dea:	5f                   	pop    edi
    1deb:	03 00                	add    eax,DWORD PTR [eax]
    1ded:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
    1df0:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
    1df3:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
    1df6:	e5 02                	in     eax,0x2
    1df8:	00 00                	add    BYTE PTR [eax],al
    1dfa:	97                   	xchg   edi,eax
    1dfb:	07                   	pop    es
    1dfc:	7c 03                	jl     1e01 <sysEnter_Vector-0x12e1ff>
    1dfe:	00 00                	add    BYTE PTR [eax],al
    1e00:	63 01                	arpl   WORD PTR [ecx],ax
    1e02:	07                   	pop    es
    1e03:	52                   	push   edx
    1e04:	03 00                	add    eax,DWORD PTR [eax]
    1e06:	00 64 01 07          	add    BYTE PTR [ecx+eax*1+0x7],ah
    1e0a:	e6 03                	out    0x3,al
    1e0c:	00 00                	add    BYTE PTR [eax],al
    1e0e:	65 01 07             	add    DWORD PTR gs:[edi],eax
    1e11:	c7 02 00 00 66 01    	mov    DWORD PTR [edx],0x1660000
    1e17:	07                   	pop    es
    1e18:	1b 04 00             	sbb    eax,DWORD PTR [eax+eax*1]
    1e1b:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    1e1e:	07                   	pop    es
    1e1f:	2a 03                	sub    al,BYTE PTR [ebx]
    1e21:	00 00                	add    BYTE PTR [eax],al
    1e23:	68 01 07 ac 02       	push   0x2ac0701
    1e28:	00 00                	add    BYTE PTR [eax],al
    1e2a:	69 01 07 93 03 00    	imul   eax,DWORD PTR [ecx],0x39307
    1e30:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    1e33:	07                   	pop    es
    1e34:	d5 02                	aad    0x2
    1e36:	00 00                	add    BYTE PTR [eax],al
    1e38:	71 01                	jno    1e3b <sysEnter_Vector-0x12e1c5>
    1e3a:	07                   	pop    es
    1e3b:	cc                   	int3   
    1e3c:	03 00                	add    eax,DWORD PTR [eax]
    1e3e:	00 00                	add    BYTE PTR [eax],al
    1e40:	03 07                	add    eax,DWORD PTR [edi]
    1e42:	37                   	aaa    
    1e43:	03 00                	add    eax,DWORD PTR [eax]
    1e45:	00 01                	add    BYTE PTR [ecx],al
    1e47:	03 07                	add    eax,DWORD PTR [edi]
    1e49:	bb 02 00 00 02       	mov    ebx,0x2000002
    1e4e:	03 07                	add    eax,DWORD PTR [edi]
    1e50:	80 02 00             	add    BYTE PTR [edx],0x0
    1e53:	00 03                	add    BYTE PTR [ebx],al
    1e55:	03 07                	add    eax,DWORD PTR [edi]
    1e57:	90                   	nop
    1e58:	02 00                	add    al,BYTE PTR [eax]
    1e5a:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    1e5d:	00 02                	add    BYTE PTR [edx],al
    1e5f:	04 07                	add    al,0x7
    1e61:	39 00                	cmp    DWORD PTR [eax],eax
    1e63:	00 00                	add    BYTE PTR [eax],al
    1e65:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1e68:	e1 00                	loope  1e6a <sysEnter_Vector-0x12e196>
    1e6a:	00 00                	add    BYTE PTR [eax],al
    1e6c:	08 04 25 00 00 00 09 	or     BYTE PTR [eiz*1+0x9000000],al
    1e73:	42                   	inc    edx
    1e74:	07                   	pop    es
    1e75:	00 00                	add    BYTE PTR [eax],al
    1e77:	01 0a                	add    DWORD PTR [edx],ecx
    1e79:	3a 00                	cmp    al,BYTE PTR [eax]
    1e7b:	00 00                	add    BYTE PTR [eax],al
    1e7d:	b0 14                	mov    al,0x14
    1e7f:	00 30                	add    BYTE PTR [eax],dh
    1e81:	29 00                	sub    DWORD PTR [eax],eax
    1e83:	00 00                	add    BYTE PTR [eax],al
    1e85:	01 9c 86 01 00 00 0a 	add    DWORD PTR [esi+eax*4+0xa000001],ebx
    1e8c:	47                   	inc    edi
    1e8d:	07                   	pop    es
    1e8e:	00 00                	add    BYTE PTR [eax],al
    1e90:	01 0a                	add    DWORD PTR [edx],ecx
    1e92:	86 01                	xchg   BYTE PTR [ecx],al
    1e94:	00 00                	add    BYTE PTR [eax],al
    1e96:	02 91 00 00 08 04    	add    dl,BYTE PTR [ecx+0x4080000]
    1e9c:	3a 00                	cmp    al,BYTE PTR [eax]
    1e9e:	00 00                	add    BYTE PTR [eax],al
    1ea0:	0b 4b 00             	or     ecx,DWORD PTR [ebx+0x0]
    1ea3:	00 00                	add    BYTE PTR [eax],al
    1ea5:	03 34 56             	add    esi,DWORD PTR [esi+edx*2]
    1ea8:	00 00                	add    BYTE PTR [eax],al
    1eaa:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
    1eb0:	30 0b                	xor    BYTE PTR [ebx],cl
    1eb2:	af                   	scas   eax,DWORD PTR es:[edi]
    1eb3:	00 00                	add    BYTE PTR [eax],al
    1eb5:	00 03                	add    BYTE PTR [ebx],al
    1eb7:	35 56 00 00 00       	xor    eax,0x56
    1ebc:	05 03 00 45 00       	add    eax,0x450003
    1ec1:	30 0b                	xor    BYTE PTR [ebx],cl
    1ec3:	5b                   	pop    ebx
    1ec4:	01 00                	add    DWORD PTR [eax],eax
    1ec6:	00 03                	add    BYTE PTR [ebx],al
    1ec8:	36                   	ss
    1ec9:	56                   	push   esi
    1eca:	00 00                	add    BYTE PTR [eax],al
    1ecc:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
    1ed2:	30 0b                	xor    BYTE PTR [ebx],cl
    1ed4:	54                   	push   esp
    1ed5:	00 00                	add    BYTE PTR [eax],al
    1ed7:	00 03                	add    BYTE PTR [ebx],al
    1ed9:	37                   	aaa    
    1eda:	56                   	push   esi
    1edb:	00 00                	add    BYTE PTR [eax],al
    1edd:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
    1ee3:	30 0b                	xor    BYTE PTR [ebx],cl
    1ee5:	28 00                	sub    BYTE PTR [eax],al
    1ee7:	00 00                	add    BYTE PTR [eax],al
    1ee9:	04 46                	add    al,0x46
    1eeb:	e1 01                	loope  1eee <sysEnter_Vector-0x12e112>
    1eed:	00 00                	add    BYTE PTR [eax],al
    1eef:	05 03 04 45 00       	add    eax,0x450403
    1ef4:	30 08                	xor    BYTE PTR [eax],cl
    1ef6:	04 58                	add    al,0x58
    1ef8:	01 00                	add    DWORD PTR [eax],eax
    1efa:	00 00                	add    BYTE PTR [eax],al
    1efc:	58                   	pop    eax
    1efd:	04 00                	add    al,0x0
    1eff:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1f02:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    1f03:	0a 00                	or     al,BYTE PTR [eax]
    1f05:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1f08:	f4                   	hlt    
    1f09:	00 00                	add    BYTE PTR [eax],al
    1f0b:	00 0c b0             	add    BYTE PTR [eax+esi*4],cl
    1f0e:	07                   	pop    es
    1f0f:	00 00                	add    BYTE PTR [eax],al
    1f11:	72 00                	jb     1f13 <sysEnter_Vector-0x12e0ed>
    1f13:	00 00                	add    BYTE PTR [eax],al
    1f15:	dc 14 00             	fcom   QWORD PTR [eax+eax*1]
    1f18:	30 84 00 00 00 64 0d 	xor    BYTE PTR [eax+eax*1+0xd640000],al
    1f1f:	00 00                	add    BYTE PTR [eax],al
    1f21:	02 01                	add    al,BYTE PTR [ecx]
    1f23:	06                   	push   es
    1f24:	64 00 00             	add    BYTE PTR fs:[eax],al
    1f27:	00 02                	add    BYTE PTR [edx],al
    1f29:	01 06                	add    DWORD PTR [esi],eax
    1f2b:	5d                   	pop    ebp
    1f2c:	00 00                	add    BYTE PTR [eax],al
    1f2e:	00 02                	add    BYTE PTR [edx],al
    1f30:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1f36:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1f3d:	02 08                	add    cl,BYTE PTR [eax]
    1f3f:	05 00 00 00 00       	add    eax,0x0
    1f44:	02 01                	add    al,BYTE PTR [ecx]
    1f46:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    1f49:	00 00                	add    BYTE PTR [eax],al
    1f4b:	02 02                	add    al,BYTE PTR [edx]
    1f4d:	07                   	pop    es
    1f4e:	0e                   	push   cs
    1f4f:	00 00                	add    BYTE PTR [eax],al
    1f51:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1f54:	00 00                	add    BYTE PTR [eax],al
    1f56:	00 02                	add    BYTE PTR [edx],al
    1f58:	34 61                	xor    al,0x61
    1f5a:	00 00                	add    BYTE PTR [eax],al
    1f5c:	00 02                	add    BYTE PTR [edx],al
    1f5e:	04 07                	add    al,0x7
    1f60:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1f63:	00 04 54             	add    BYTE PTR [esp+edx*2],al
    1f66:	07                   	pop    es
    1f67:	00 00                	add    BYTE PTR [eax],al
    1f69:	02 37                	add    dh,BYTE PTR [edi]
    1f6b:	73 00                	jae    1f6d <sysEnter_Vector-0x12e093>
    1f6d:	00 00                	add    BYTE PTR [eax],al
    1f6f:	02 08                	add    cl,BYTE PTR [eax]
    1f71:	07                   	pop    es
    1f72:	34 00                	xor    al,0x0
    1f74:	00 00                	add    BYTE PTR [eax],al
    1f76:	04 94                	add    al,0x94
    1f78:	04 00                	add    al,0x0
    1f7a:	00 03                	add    BYTE PTR [ebx],al
    1f7c:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    1f7f:	00 00                	add    BYTE PTR [eax],al
    1f81:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1f88:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1f8b:	9b                   	fwait
    1f8c:	00 00                	add    BYTE PTR [eax],al
    1f8e:	00 05 04 99 00 00    	add    BYTE PTR ds:0x9904,al
    1f94:	00 06                	add    BYTE PTR [esi],al
    1f96:	25 00 00 00 02       	and    eax,0x2000000
    1f9b:	01 02                	add    DWORD PTR [edx],eax
    1f9d:	95                   	xchg   ebp,eax
    1f9e:	00 00                	add    BYTE PTR [eax],al
    1fa0:	00 02                	add    BYTE PTR [edx],al
    1fa2:	04 07                	add    al,0x7
    1fa4:	39 00                	cmp    DWORD PTR [eax],eax
    1fa6:	00 00                	add    BYTE PTR [eax],al
    1fa8:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1fab:	e1 00                	loope  1fad <sysEnter_Vector-0x12e053>
    1fad:	00 00                	add    BYTE PTR [eax],al
    1faf:	07                   	pop    es
    1fb0:	04 05                	add    al,0x5
    1fb2:	04 25                	add    al,0x25
    1fb4:	00 00                	add    BYTE PTR [eax],al
    1fb6:	00 08                	add    BYTE PTR [eax],cl
    1fb8:	2b 08                	sub    ecx,DWORD PTR [eax]
    1fba:	00 00                	add    BYTE PTR [eax],al
    1fbc:	0c 04                	or     al,0x4
    1fbe:	17                   	pop    ss
    1fbf:	ec                   	in     al,dx
    1fc0:	00 00                	add    BYTE PTR [eax],al
    1fc2:	00 09                	add    BYTE PTR [ecx],cl
    1fc4:	6d                   	ins    DWORD PTR es:[edi],dx
    1fc5:	07                   	pop    es
    1fc6:	00 00                	add    BYTE PTR [eax],al
    1fc8:	04 19                	add    al,0x19
    1fca:	ec                   	in     al,dx
    1fcb:	00 00                	add    BYTE PTR [eax],al
    1fcd:	00 00                	add    BYTE PTR [eax],al
    1fcf:	09 b9 06 00 00 04    	or     DWORD PTR [ecx+0x4000006],edi
    1fd5:	19 ec                	sbb    esp,ebp
    1fd7:	00 00                	add    BYTE PTR [eax],al
    1fd9:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    1fdc:	23 08                	and    ecx,DWORD PTR [eax]
    1fde:	00 00                	add    BYTE PTR [eax],al
    1fe0:	04 1a                	add    al,0x1a
    1fe2:	b3 00                	mov    bl,0x0
    1fe4:	00 00                	add    BYTE PTR [eax],al
    1fe6:	08 00                	or     BYTE PTR [eax],al
    1fe8:	05 04 bb 00 00       	add    eax,0xbb04
    1fed:	00 04 df             	add    BYTE PTR [edi+ebx*8],al
    1ff0:	07                   	pop    es
    1ff1:	00 00                	add    BYTE PTR [eax],al
    1ff3:	04 1b                	add    al,0x1b
    1ff5:	bb 00 00 00 08       	mov    ebx,0x8000000
    1ffa:	8b 07                	mov    eax,DWORD PTR [edi]
    1ffc:	00 00                	add    BYTE PTR [eax],al
    1ffe:	14 05                	adc    al,0x5
    2000:	1b 2e                	sbb    ebp,DWORD PTR [esi]
    2002:	01 00                	add    DWORD PTR [eax],eax
    2004:	00 09                	add    BYTE PTR [ecx],cl
    2006:	84 07                	test   BYTE PTR [edi],al
    2008:	00 00                	add    BYTE PTR [eax],al
    200a:	05 1d f2 00 00       	add    eax,0xf21d
    200f:	00 00                	add    BYTE PTR [eax],al
    2011:	09 4e 07             	or     DWORD PTR [esi+0x7],ecx
    2014:	00 00                	add    BYTE PTR [eax],al
    2016:	05 1e 61 00 00       	add    eax,0x611e
    201b:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    201e:	86 08                	xchg   BYTE PTR [eax],cl
    2020:	00 00                	add    BYTE PTR [eax],al
    2022:	05 1f 5f 01 00       	add    eax,0x15f1f
    2027:	00 10                	add    BYTE PTR [eax],dl
    2029:	00 08                	add    BYTE PTR [eax],cl
    202b:	bc 07 00 00 0c       	mov    esp,0xc000007
    2030:	05 37 5f 01 00       	add    eax,0x15f37
    2035:	00 09                	add    BYTE PTR [ecx],cl
    2037:	a9 07 00 00 05       	test   eax,0x5000007
    203c:	39 b5 00 00 00 00    	cmp    DWORD PTR [ebp+0x0],esi
    2042:	09 8d 08 00 00 05    	or     DWORD PTR [ebp+0x5000008],ecx
    2048:	3a 68 02             	cmp    ch,BYTE PTR [eax+0x2]
    204b:	00 00                	add    BYTE PTR [eax],al
    204d:	04 09                	add    al,0x9
    204f:	9e                   	sahf   
    2050:	08 00                	or     BYTE PTR [eax],al
    2052:	00 05 3b 5f 01 00    	add    BYTE PTR ds:0x15f3b,al
    2058:	00 08                	add    BYTE PTR [eax],cl
    205a:	00 05 04 2e 01 00    	add    BYTE PTR ds:0x12e04,al
    2060:	00 08                	add    BYTE PTR [eax],cl
    2062:	99                   	cdq    
    2063:	07                   	pop    es
    2064:	00 00                	add    BYTE PTR [eax],al
    2066:	0c 05                	or     al,0x5
    2068:	22 96 01 00 00 09    	and    dl,BYTE PTR [esi+0x9000001]
    206e:	3a 08                	cmp    cl,BYTE PTR [eax]
    2070:	00 00                	add    BYTE PTR [eax],al
    2072:	05 24 5f 01 00       	add    eax,0x15f24
    2077:	00 00                	add    BYTE PTR [eax],al
    2079:	09 7d 07             	or     DWORD PTR [ebp+0x7],edi
    207c:	00 00                	add    BYTE PTR [eax],al
    207e:	05 25 96 01 00       	add    eax,0x19625
    2083:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    2086:	5d                   	pop    ebp
    2087:	07                   	pop    es
    2088:	00 00                	add    BYTE PTR [eax],al
    208a:	05 26 3a 00 00       	add    eax,0x3a26
    208f:	00 08                	add    BYTE PTR [eax],cl
    2091:	00 05 04 fd 00 00    	add    BYTE PTR ds:0xfd04,al
    2097:	00 08                	add    BYTE PTR [eax],cl
    2099:	8f 08                	(bad)  
    209b:	00 00                	add    BYTE PTR [eax],al
    209d:	24 05                	and    al,0x5
    209f:	29 09                	sub    DWORD PTR [ecx],ecx
    20a1:	02 00                	add    al,BYTE PTR [eax]
    20a3:	00 09                	add    BYTE PTR [ecx],cl
    20a5:	1d 08 00 00 05       	sbb    eax,0x5000008
    20aa:	2b 61 00             	sub    esp,DWORD PTR [ecx+0x0]
    20ad:	00 00                	add    BYTE PTR [eax],al
    20af:	00 09                	add    BYTE PTR [ecx],cl
    20b1:	5d                   	pop    ebp
    20b2:	08 00                	or     BYTE PTR [eax],al
    20b4:	00 05 2c 4f 00 00    	add    BYTE PTR ds:0x4f2c,al
    20ba:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    20bd:	f9                   	stc    
    20be:	07                   	pop    es
    20bf:	00 00                	add    BYTE PTR [eax],al
    20c1:	05 2d 4f 00 00       	add    eax,0x4f2d
    20c6:	00 06                	add    BYTE PTR [esi],al
    20c8:	09 57 08             	or     DWORD PTR [edi+0x8],edx
    20cb:	00 00                	add    BYTE PTR [eax],al
    20cd:	05 2e 61 00 00       	add    eax,0x612e
    20d2:	00 08                	add    BYTE PTR [eax],cl
    20d4:	09 d9                	or     ecx,ebx
    20d6:	07                   	pop    es
    20d7:	00 00                	add    BYTE PTR [eax],al
    20d9:	05 2f 61 00 00       	add    eax,0x612f
    20de:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    20e1:	4f                   	dec    edi
    20e2:	08 00                	or     BYTE PTR [eax],al
    20e4:	00 05 30 61 00 00    	add    BYTE PTR ds:0x6130,al
    20ea:	00 10                	add    BYTE PTR [eax],dl
    20ec:	09 35 08 00 00 05    	or     DWORD PTR ds:0x5000008,esi
    20f2:	31 52 02             	xor    DWORD PTR [edx+0x2],edx
    20f5:	00 00                	add    BYTE PTR [eax],al
    20f7:	14 09                	adc    al,0x9
    20f9:	97                   	xchg   edi,eax
    20fa:	07                   	pop    es
    20fb:	00 00                	add    BYTE PTR [eax],al
    20fd:	05 32 65 01 00       	add    eax,0x16532
    2102:	00 18                	add    BYTE PTR [eax],bl
    2104:	00 08                	add    BYTE PTR [eax],cl
    2106:	e8 07 00 00 14       	call   14002112 <sysEnter_Vector+0x13ed2112>
    210b:	05 3e 52 02 00       	add    eax,0x2523e
    2110:	00 09                	add    BYTE PTR [ecx],cl
    2112:	b6 08                	mov    dh,0x8
    2114:	00 00                	add    BYTE PTR [eax],al
    2116:	05 40 82 02 00       	add    eax,0x28240
    211b:	00 00                	add    BYTE PTR [eax],al
    211d:	09 72 07             	or     DWORD PTR [edx+0x7],esi
    2120:	00 00                	add    BYTE PTR [eax],al
    2122:	05 41 82 02 00       	add    eax,0x28241
    2127:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    212a:	d3 07                	rol    DWORD PTR [edi],cl
    212c:	00 00                	add    BYTE PTR [eax],al
    212e:	05 42 82 02 00       	add    eax,0x28242
    2133:	00 08                	add    BYTE PTR [eax],cl
    2135:	09 67 07             	or     DWORD PTR [edi+0x7],esp
    2138:	00 00                	add    BYTE PTR [eax],al
    213a:	05 43 9c 02 00       	add    eax,0x29c43
    213f:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    2142:	a2 07 00 00 05       	mov    ds:0x5000007,al
    2147:	44                   	inc    esp
    2148:	c5 02                	lds    eax,FWORD PTR [edx]
    214a:	00 00                	add    BYTE PTR [eax],al
    214c:	10 00                	adc    BYTE PTR [eax],al
    214e:	05 04 58 02 00       	add    eax,0x25804
    2153:	00 06                	add    BYTE PTR [esi],al
    2155:	09 02                	or     DWORD PTR [edx],eax
    2157:	00 00                	add    BYTE PTR [eax],al
    2159:	04 71                	add    al,0x71
    215b:	08 00                	or     BYTE PTR [eax],al
    215d:	00 05 35 9c 01 00    	add    BYTE PTR ds:0x19c35,al
    2163:	00 05 04 9c 01 00    	add    BYTE PTR ds:0x19c04,al
    2169:	00 0a                	add    BYTE PTR [edx],cl
    216b:	3a 00                	cmp    al,BYTE PTR [eax]
    216d:	00 00                	add    BYTE PTR [eax],al
    216f:	82                   	(bad)  
    2170:	02 00                	add    al,BYTE PTR [eax]
    2172:	00 0b                	add    BYTE PTR [ebx],cl
    2174:	68 02 00 00 0b       	push   0xb000002
    2179:	5f                   	pop    edi
    217a:	01 00                	add    DWORD PTR [eax],eax
    217c:	00 00                	add    BYTE PTR [eax],al
    217e:	05 04 6e 02 00       	add    eax,0x26e04
    2183:	00 0a                	add    BYTE PTR [edx],cl
    2185:	3a 00                	cmp    al,BYTE PTR [eax]
    2187:	00 00                	add    BYTE PTR [eax],al
    2189:	9c                   	pushf  
    218a:	02 00                	add    al,BYTE PTR [eax]
    218c:	00 0b                	add    BYTE PTR [ebx],cl
    218e:	68 02 00 00 0b       	push   0xb000002
    2193:	2e 01 00             	add    DWORD PTR cs:[eax],eax
    2196:	00 00                	add    BYTE PTR [eax],al
    2198:	05 04 88 02 00       	add    eax,0x28804
    219d:	00 0a                	add    BYTE PTR [edx],cl
    219f:	3a 00                	cmp    al,BYTE PTR [eax]
    21a1:	00 00                	add    BYTE PTR [eax],al
    21a3:	c5 02                	lds    eax,FWORD PTR [edx]
    21a5:	00 00                	add    BYTE PTR [eax],al
    21a7:	0b 68 02             	or     ebp,DWORD PTR [eax+0x2]
    21aa:	00 00                	add    BYTE PTR [eax],al
    21ac:	0b 5f 01             	or     ebx,DWORD PTR [edi+0x1]
    21af:	00 00                	add    BYTE PTR [eax],al
    21b1:	0b 68 02             	or     ebp,DWORD PTR [eax+0x2]
    21b4:	00 00                	add    BYTE PTR [eax],al
    21b6:	0b 5f 01             	or     ebx,DWORD PTR [edi+0x1]
    21b9:	00 00                	add    BYTE PTR [eax],al
    21bb:	0b 61 00             	or     esp,DWORD PTR [ecx+0x0]
    21be:	00 00                	add    BYTE PTR [eax],al
    21c0:	00 05 04 a2 02 00    	add    BYTE PTR ds:0x2a204,al
    21c6:	00 04 48             	add    BYTE PTR [eax+ecx*2],al
    21c9:	08 00                	or     BYTE PTR [eax],al
    21cb:	00 05 47 d6 02 00    	add    BYTE PTR ds:0x2d647,al
    21d1:	00 08                	add    BYTE PTR [eax],cl
    21d3:	81 08 00 00 10 05    	or     DWORD PTR [eax],0x5100000
    21d9:	4f                   	dec    edi
    21da:	07                   	pop    es
    21db:	03 00                	add    eax,DWORD PTR [eax]
    21dd:	00 09                	add    BYTE PTR [ecx],cl
    21df:	af                   	scas   eax,DWORD PTR es:[edi]
    21e0:	08 00                	or     BYTE PTR [eax],al
    21e2:	00 05 51 b5 00 00    	add    BYTE PTR ds:0xb551,al
    21e8:	00 00                	add    BYTE PTR [eax],al
    21ea:	09 a7 08 00 00 05    	or     DWORD PTR [edi+0x5000008],esp
    21f0:	52                   	push   edx
    21f1:	68 02 00 00 04       	push   0x4000002
    21f6:	09 43 08             	or     DWORD PTR [ebx+0x8],eax
    21f9:	00 00                	add    BYTE PTR [eax],al
    21fb:	05 53 07 03 00       	add    eax,0x30753
    2200:	00 08                	add    BYTE PTR [eax],cl
    2202:	00 08                	add    BYTE PTR [eax],cl
    2204:	c3                   	ret    
    2205:	07                   	pop    es
    2206:	00 00                	add    BYTE PTR [eax],al
    2208:	08 05 49 2c 03 00    	or     BYTE PTR ds:0x32c49,al
    220e:	00 09                	add    BYTE PTR [ecx],cl
    2210:	18 03                	sbb    BYTE PTR [ebx],al
    2212:	00 00                	add    BYTE PTR [eax],al
    2214:	05 4b 56 03 00       	add    eax,0x3564b
    2219:	00 00                	add    BYTE PTR [eax],al
    221b:	09 60 02             	or     DWORD PTR [eax+0x2],esp
    221e:	00 00                	add    BYTE PTR [eax],al
    2220:	05 4c 7a 03 00       	add    eax,0x37a4c
    2225:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2228:	0a 7a 00             	or     bh,BYTE PTR [edx+0x0]
    222b:	00 00                	add    BYTE PTR [eax],al
    222d:	4a                   	dec    edx
    222e:	03 00                	add    eax,DWORD PTR [eax]
    2230:	00 0b                	add    BYTE PTR [ebx],cl
    2232:	4a                   	dec    edx
    2233:	03 00                	add    eax,DWORD PTR [eax]
    2235:	00 0b                	add    BYTE PTR [ebx],cl
    2237:	b5 00                	mov    ch,0x0
    2239:	00 00                	add    BYTE PTR [eax],al
    223b:	0b 7a 00             	or     edi,DWORD PTR [edx+0x0]
    223e:	00 00                	add    BYTE PTR [eax],al
    2240:	0b 50 03             	or     edx,DWORD PTR [eax+0x3]
    2243:	00 00                	add    BYTE PTR [eax],al
    2245:	00 05 04 d6 02 00    	add    BYTE PTR ds:0x2d604,al
    224b:	00 05 04 68 00 00    	add    BYTE PTR ds:0x6804,al
    2251:	00 05 04 2c 03 00    	add    BYTE PTR ds:0x32c04,al
    2257:	00 0a                	add    BYTE PTR [edx],cl
    2259:	7a 00                	jp     225b <sysEnter_Vector-0x12dda5>
    225b:	00 00                	add    BYTE PTR [eax],al
    225d:	7a 03                	jp     2262 <sysEnter_Vector-0x12dd9e>
    225f:	00 00                	add    BYTE PTR [eax],al
    2261:	0b 4a 03             	or     ecx,DWORD PTR [edx+0x3]
    2264:	00 00                	add    BYTE PTR [eax],al
    2266:	0b 93 00 00 00 0b    	or     edx,DWORD PTR [ebx+0xb000000]
    226c:	7a 00                	jp     226e <sysEnter_Vector-0x12dd92>
    226e:	00 00                	add    BYTE PTR [eax],al
    2270:	0b 50 03             	or     edx,DWORD PTR [eax+0x3]
    2273:	00 00                	add    BYTE PTR [eax],al
    2275:	00 05 04 5c 03 00    	add    BYTE PTR ds:0x35c04,al
    227b:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    227e:	08 00                	or     BYTE PTR [eax],al
    2280:	00 05 4d 07 03 00    	add    BYTE PTR ds:0x3074d,al
    2286:	00 0c 95 08 00 00 01 	add    BYTE PTR [edx*4+0x1000008],cl
    228d:	43                   	inc    ebx
    228e:	dc 14 00             	fcom   QWORD PTR [eax+eax*1]
    2291:	30 84 00 00 00 01 9c 	xor    BYTE PTR [eax+eax*1-0x63ff0000],al
    2298:	bd 03 00 00 0d       	mov    ebp,0xd000003
    229d:	78 07                	js     22a6 <sysEnter_Vector-0x12dd5a>
    229f:	00 00                	add    BYTE PTR [eax],al
    22a1:	01 45 bd             	add    DWORD PTR [ebp-0x43],eax
    22a4:	03 00                	add    eax,DWORD PTR [eax]
    22a6:	00 02                	add    BYTE PTR [edx],al
    22a8:	91                   	xchg   ecx,eax
    22a9:	67 0d 15 08 00 00    	addr16 or eax,0x815
    22af:	01 46 3a             	add    DWORD PTR [esi+0x3a],eax
    22b2:	00 00                	add    BYTE PTR [eax],al
    22b4:	00 02                	add    BYTE PTR [edx],al
    22b6:	91                   	xchg   ecx,eax
    22b7:	6c                   	ins    BYTE PTR es:[edi],dx
    22b8:	00 0e                	add    BYTE PTR [esi],cl
    22ba:	25 00 00 00 cd       	and    eax,0xcd000000
    22bf:	03 00                	add    eax,DWORD PTR [eax]
    22c1:	00 0f                	add    BYTE PTR [edi],cl
    22c3:	ac                   	lods   al,BYTE PTR ds:[esi]
    22c4:	00 00                	add    BYTE PTR [eax],al
    22c6:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    22c9:	10 4b 00             	adc    BYTE PTR [ebx+0x0],cl
    22cc:	00 00                	add    BYTE PTR [eax],al
    22ce:	06                   	push   es
    22cf:	34 56                	xor    al,0x56
    22d1:	00 00                	add    BYTE PTR [eax],al
    22d3:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
    22d9:	30 10                	xor    BYTE PTR [eax],dl
    22db:	af                   	scas   eax,DWORD PTR es:[edi]
    22dc:	00 00                	add    BYTE PTR [eax],al
    22de:	00 06                	add    BYTE PTR [esi],al
    22e0:	35 56 00 00 00       	xor    eax,0x56
    22e5:	05 03 00 45 00       	add    eax,0x450003
    22ea:	30 10                	xor    BYTE PTR [eax],dl
    22ec:	5b                   	pop    ebx
    22ed:	01 00                	add    DWORD PTR [eax],eax
    22ef:	00 06                	add    BYTE PTR [esi],al
    22f1:	36                   	ss
    22f2:	56                   	push   esi
    22f3:	00 00                	add    BYTE PTR [eax],al
    22f5:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
    22fb:	30 10                	xor    BYTE PTR [eax],dl
    22fd:	54                   	push   esp
    22fe:	00 00                	add    BYTE PTR [eax],al
    2300:	00 06                	add    BYTE PTR [esi],al
    2302:	37                   	aaa    
    2303:	56                   	push   esi
    2304:	00 00                	add    BYTE PTR [eax],al
    2306:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
    230c:	30 10                	xor    BYTE PTR [eax],dl
    230e:	28 00                	sub    BYTE PTR [eax],al
    2310:	00 00                	add    BYTE PTR [eax],al
    2312:	07                   	pop    es
    2313:	46                   	inc    esi
    2314:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    2317:	00 05 03 04 45 00    	add    BYTE PTR ds:0x450403,al
    231d:	30 05 04 b5 00 00    	xor    BYTE PTR ds:0xb504,al
    2323:	00 10                	add    BYTE PTR [eax],dl
    2325:	43                   	inc    ebx
    2326:	08 00                	or     BYTE PTR [eax],al
    2328:	00 01                	add    BYTE PTR [ecx],al
    232a:	0e                   	push   cs
    232b:	80 03 00             	add    BYTE PTR [ebx],0x0
    232e:	00 05 03 14 45 00    	add    BYTE PTR ds:0x451403,al
    2334:	30 10                	xor    BYTE PTR [eax],dl
    2336:	64 08 00             	or     BYTE PTR fs:[eax],al
    2339:	00 01                	add    BYTE PTR [ecx],al
    233b:	0f 5d 02             	minps  xmm0,XMMWORD PTR [edx]
    233e:	00 00                	add    BYTE PTR [eax],al
    2340:	05 03 60 43 00       	add    eax,0x436003
    2345:	30 10                	xor    BYTE PTR [eax],dl
    2347:	79 08                	jns    2351 <sysEnter_Vector-0x12dcaf>
    2349:	00 00                	add    BYTE PTR [eax],al
    234b:	01 10                	add    DWORD PTR [eax],edx
    234d:	cb                   	retf   
    234e:	02 00                	add    al,BYTE PTR [eax]
    2350:	00 05 03 1c 45 00    	add    BYTE PTR ds:0x451c03,al
    2356:	30 00                	xor    BYTE PTR [eax],al
    2358:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2359:	01 00                	add    DWORD PTR [eax],eax
    235b:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    235e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    235f:	0b 00                	or     eax,DWORD PTR [eax]
    2361:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2364:	f4                   	hlt    
    2365:	00 00                	add    BYTE PTR [eax],al
    2367:	00 0c d8             	add    BYTE PTR [eax+ebx*8],cl
    236a:	08 00                	or     BYTE PTR [eax],al
    236c:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    236f:	00 00                	add    BYTE PTR [eax],al
    2371:	60                   	pusha  
    2372:	15 00 30 eb 00       	adc    eax,0xeb3000
    2377:	00 00                	add    BYTE PTR [eax],al
    2379:	62 0e                	bound  ecx,QWORD PTR [esi]
    237b:	00 00                	add    BYTE PTR [eax],al
    237d:	02 01                	add    al,BYTE PTR [ecx]
    237f:	06                   	push   es
    2380:	64 00 00             	add    BYTE PTR fs:[eax],al
    2383:	00 02                	add    BYTE PTR [edx],al
    2385:	01 06                	add    DWORD PTR [esi],eax
    2387:	5d                   	pop    ebp
    2388:	00 00                	add    BYTE PTR [eax],al
    238a:	00 02                	add    BYTE PTR [edx],al
    238c:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2392:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2399:	02 08                	add    cl,BYTE PTR [eax]
    239b:	05 00 00 00 00       	add    eax,0x0
    23a0:	02 01                	add    al,BYTE PTR [ecx]
    23a2:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    23a5:	00 00                	add    BYTE PTR [eax],al
    23a7:	02 02                	add    al,BYTE PTR [edx]
    23a9:	07                   	pop    es
    23aa:	0e                   	push   cs
    23ab:	00 00                	add    BYTE PTR [eax],al
    23ad:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    23b0:	00 00                	add    BYTE PTR [eax],al
    23b2:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    23b5:	61                   	popa   
    23b6:	00 00                	add    BYTE PTR [eax],al
    23b8:	00 02                	add    BYTE PTR [edx],al
    23ba:	04 07                	add    al,0x7
    23bc:	3e 00 00             	add    BYTE PTR ds:[eax],al
    23bf:	00 02                	add    BYTE PTR [edx],al
    23c1:	08 07                	or     BYTE PTR [edi],al
    23c3:	34 00                	xor    al,0x0
    23c5:	00 00                	add    BYTE PTR [eax],al
    23c7:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    23ce:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    23d1:	9b                   	fwait
    23d2:	00 00                	add    BYTE PTR [eax],al
    23d4:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    23da:	00 06                	add    BYTE PTR [esi],al
    23dc:	25 00 00 00 02       	and    eax,0x2000000
    23e1:	01 02                	add    DWORD PTR [edx],eax
    23e3:	95                   	xchg   ebp,eax
    23e4:	00 00                	add    BYTE PTR [eax],al
    23e6:	00 02                	add    BYTE PTR [edx],al
    23e8:	04 07                	add    al,0x7
    23ea:	39 00                	cmp    DWORD PTR [eax],eax
    23ec:	00 00                	add    BYTE PTR [eax],al
    23ee:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    23f1:	e1 00                	loope  23f3 <sysEnter_Vector-0x12dc0d>
    23f3:	00 00                	add    BYTE PTR [eax],al
    23f5:	05 04 25 00 00       	add    eax,0x2504
    23fa:	00 07                	add    BYTE PTR [edi],al
    23fc:	d1 08                	ror    DWORD PTR [eax],1
    23fe:	00 00                	add    BYTE PTR [eax],al
    2400:	01 1d 9d 00 00 00    	add    DWORD PTR ds:0x9d,ebx
    2406:	60                   	pusha  
    2407:	15 00 30 3e 00       	adc    eax,0x3e3000
    240c:	00 00                	add    BYTE PTR [eax],al
    240e:	01 9c d9 00 00 00 08 	add    DWORD PTR [ecx+ebx*8+0x8000000],ebx
    2415:	d5 06                	aad    0x6
    2417:	00 00                	add    BYTE PTR [eax],al
    2419:	01 1d 9d 00 00 00    	add    DWORD PTR ds:0x9d,ebx
    241f:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    2425:	63 00                	arpl   WORD PTR [eax],ax
    2427:	01 1d 7d 00 00 00    	add    DWORD PTR ds:0x7d,ebx
    242d:	02 91 04 00 07 c9    	add    dl,BYTE PTR [ecx-0x36f8fffc]
    2433:	08 00                	or     BYTE PTR [eax],al
    2435:	00 01                	add    BYTE PTR [ecx],al
    2437:	23 9d 00 00 00 9e    	and    ebx,DWORD PTR [ebp-0x62000000]
    243d:	15 00 30 3e 00       	adc    eax,0x3e3000
    2442:	00 00                	add    BYTE PTR [eax],al
    2444:	01 9c 0f 01 00 00 08 	add    DWORD PTR [edi+ecx*1+0x8000001],ebx
    244b:	d5 06                	aad    0x6
    244d:	00 00                	add    BYTE PTR [eax],al
    244f:	01 23                	add    DWORD PTR [ebx],esp
    2451:	9d                   	popf   
    2452:	00 00                	add    BYTE PTR [eax],al
    2454:	00 02                	add    BYTE PTR [edx],al
    2456:	91                   	xchg   ecx,eax
    2457:	00 09                	add    BYTE PTR [ecx],cl
    2459:	73 72                	jae    24cd <sysEnter_Vector-0x12db33>
    245b:	63 00                	arpl   WORD PTR [eax],ax
    245d:	01 23                	add    DWORD PTR [ebx],esp
    245f:	7d 00                	jge    2461 <sysEnter_Vector-0x12db9f>
    2461:	00 00                	add    BYTE PTR [eax],al
    2463:	02 91 04 00 0a bd    	add    dl,BYTE PTR [ecx-0x42f5fffc]
    2469:	08 00                	or     BYTE PTR [eax],al
    246b:	00 01                	add    BYTE PTR [ecx],al
    246d:	29 dc                	sub    esp,ebx
    246f:	15 00 30 6f 00       	adc    eax,0x6f3000
    2474:	00 00                	add    BYTE PTR [eax],al
    2476:	01 9c 55 01 00 00 09 	add    DWORD PTR [ebp+edx*2+0x9000001],ebx
    247d:	70 00                	jo     247f <sysEnter_Vector-0x12db81>
    247f:	01 29                	add    DWORD PTR [ecx],ebp
    2481:	9d                   	popf   
    2482:	00 00                	add    BYTE PTR [eax],al
    2484:	00 02                	add    BYTE PTR [edx],al
    2486:	91                   	xchg   ecx,eax
    2487:	00 09                	add    BYTE PTR [ecx],cl
    2489:	71 00                	jno    248b <sysEnter_Vector-0x12db75>
    248b:	01 29                	add    DWORD PTR [ecx],ebp
    248d:	9d                   	popf   
    248e:	00 00                	add    BYTE PTR [eax],al
    2490:	00 02                	add    BYTE PTR [edx],al
    2492:	91                   	xchg   ecx,eax
    2493:	04 0b                	add    al,0xb
    2495:	63 00                	arpl   WORD PTR [eax],ax
    2497:	01 2a                	add    DWORD PTR [edx],ebp
    2499:	3a 00                	cmp    al,BYTE PTR [eax]
    249b:	00 00                	add    BYTE PTR [eax],al
    249d:	02 91 74 0b 64 00    	add    dl,BYTE PTR [ecx+0x640b74]
    24a3:	01 2a                	add    DWORD PTR [edx],ebp
    24a5:	3a 00                	cmp    al,BYTE PTR [eax]
    24a7:	00 00                	add    BYTE PTR [eax],al
    24a9:	02 91 70 00 0c 4b    	add    dl,BYTE PTR [ecx+0x4b0c0070]
    24af:	00 00                	add    BYTE PTR [eax],al
    24b1:	00 02                	add    BYTE PTR [edx],al
    24b3:	34 56                	xor    al,0x56
    24b5:	00 00                	add    BYTE PTR [eax],al
    24b7:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
    24bd:	30 0c af             	xor    BYTE PTR [edi+ebp*4],cl
    24c0:	00 00                	add    BYTE PTR [eax],al
    24c2:	00 02                	add    BYTE PTR [edx],al
    24c4:	35 56 00 00 00       	xor    eax,0x56
    24c9:	05 03 00 45 00       	add    eax,0x450003
    24ce:	30 0c 5b             	xor    BYTE PTR [ebx+ebx*2],cl
    24d1:	01 00                	add    DWORD PTR [eax],eax
    24d3:	00 02                	add    BYTE PTR [edx],al
    24d5:	36                   	ss
    24d6:	56                   	push   esi
    24d7:	00 00                	add    BYTE PTR [eax],al
    24d9:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
    24df:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
    24e2:	00 00                	add    BYTE PTR [eax],al
    24e4:	00 02                	add    BYTE PTR [edx],al
    24e6:	37                   	aaa    
    24e7:	56                   	push   esi
    24e8:	00 00                	add    BYTE PTR [eax],al
    24ea:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
    24f0:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
    24f3:	00 00                	add    BYTE PTR [eax],al
    24f5:	00 03                	add    BYTE PTR [ebx],al
    24f7:	46                   	inc    esi
    24f8:	aa                   	stos   BYTE PTR es:[edi],al
    24f9:	01 00                	add    DWORD PTR [eax],eax
    24fb:	00 05 03 04 45 00    	add    BYTE PTR ds:0x450403,al
    2501:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    2507:	00 00                	add    BYTE PTR [eax],al
    2509:	6c                   	ins    BYTE PTR es:[edi],dx
    250a:	01 00                	add    DWORD PTR [eax],eax
    250c:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    250f:	29 0c 00             	sub    DWORD PTR [eax+eax*1],ecx
    2512:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2515:	f4                   	hlt    
    2516:	00 00                	add    BYTE PTR [eax],al
    2518:	00 0c f4             	add    BYTE PTR [esp+esi*8],cl
    251b:	08 00                	or     BYTE PTR [eax],al
    251d:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2520:	00 00                	add    BYTE PTR [eax],al
    2522:	4c                   	dec    esp
    2523:	16                   	push   ss
    2524:	00 30                	add    BYTE PTR [eax],dh
    2526:	5e                   	pop    esi
    2527:	00 00                	add    BYTE PTR [eax],al
    2529:	00 32                	add    BYTE PTR [edx],dh
    252b:	0f 00 00             	sldt   WORD PTR [eax]
    252e:	02 01                	add    al,BYTE PTR [ecx]
    2530:	06                   	push   es
    2531:	64 00 00             	add    BYTE PTR fs:[eax],al
    2534:	00 02                	add    BYTE PTR [edx],al
    2536:	01 06                	add    DWORD PTR [esi],eax
    2538:	5d                   	pop    ebp
    2539:	00 00                	add    BYTE PTR [eax],al
    253b:	00 02                	add    BYTE PTR [edx],al
    253d:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2543:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    254a:	02 08                	add    cl,BYTE PTR [eax]
    254c:	05 00 00 00 00       	add    eax,0x0
    2551:	02 01                	add    al,BYTE PTR [ecx]
    2553:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2556:	00 00                	add    BYTE PTR [eax],al
    2558:	02 02                	add    al,BYTE PTR [edx]
    255a:	07                   	pop    es
    255b:	0e                   	push   cs
    255c:	00 00                	add    BYTE PTR [eax],al
    255e:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2561:	00 00                	add    BYTE PTR [eax],al
    2563:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2566:	61                   	popa   
    2567:	00 00                	add    BYTE PTR [eax],al
    2569:	00 02                	add    BYTE PTR [edx],al
    256b:	04 07                	add    al,0x7
    256d:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2570:	00 02                	add    BYTE PTR [edx],al
    2572:	08 07                	or     BYTE PTR [edi],al
    2574:	34 00                	xor    al,0x0
    2576:	00 00                	add    BYTE PTR [eax],al
    2578:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    257f:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2582:	9b                   	fwait
    2583:	00 00                	add    BYTE PTR [eax],al
    2585:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    258b:	00 06                	add    BYTE PTR [esi],al
    258d:	25 00 00 00 02       	and    eax,0x2000000
    2592:	01 02                	add    DWORD PTR [edx],eax
    2594:	95                   	xchg   ebp,eax
    2595:	00 00                	add    BYTE PTR [eax],al
    2597:	00 02                	add    BYTE PTR [edx],al
    2599:	04 07                	add    al,0x7
    259b:	39 00                	cmp    DWORD PTR [eax],eax
    259d:	00 00                	add    BYTE PTR [eax],al
    259f:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    25a2:	e1 00                	loope  25a4 <sysEnter_Vector-0x12da5c>
    25a4:	00 00                	add    BYTE PTR [eax],al
    25a6:	05 04 25 00 00       	add    eax,0x2504
    25ab:	00 07                	add    BYTE PTR [edi],al
    25ad:	ed                   	in     eax,dx
    25ae:	08 00                	or     BYTE PTR [eax],al
    25b0:	00 01                	add    BYTE PTR [ecx],al
    25b2:	18 3a                	sbb    BYTE PTR [edx],bh
    25b4:	00 00                	add    BYTE PTR [eax],al
    25b6:	00 4c 16 00          	add    BYTE PTR [esi+edx*1+0x0],cl
    25ba:	30 5e 00             	xor    BYTE PTR [esi+0x0],bl
    25bd:	00 00                	add    BYTE PTR [eax],al
    25bf:	01 9c 09 01 00 00 08 	add    DWORD PTR [ecx+ecx*1+0x8000001],ebx
    25c6:	70 31                	jo     25f9 <sysEnter_Vector-0x12da07>
    25c8:	00 01                	add    BYTE PTR [ecx],al
    25ca:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    25cd:	00 00                	add    BYTE PTR [eax],al
    25cf:	02 91 00 08 70 32    	add    dl,BYTE PTR [ecx+0x32700800]
    25d5:	00 01                	add    BYTE PTR [ecx],al
    25d7:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    25da:	00 00                	add    BYTE PTR [eax],al
    25dc:	02 91 04 09 73 31    	add    dl,BYTE PTR [ecx+0x31730904]
    25e2:	00 01                	add    BYTE PTR [ecx],al
    25e4:	1a 09                	sbb    cl,BYTE PTR [ecx]
    25e6:	01 00                	add    DWORD PTR [eax],eax
    25e8:	00 01                	add    BYTE PTR [ecx],al
    25ea:	53                   	push   ebx
    25eb:	09 73 32             	or     DWORD PTR [ebx+0x32],esi
    25ee:	00 01                	add    BYTE PTR [ecx],al
    25f0:	1b 09                	sbb    ecx,DWORD PTR [ecx]
    25f2:	01 00                	add    DWORD PTR [eax],eax
    25f4:	00 01                	add    BYTE PTR [ecx],al
    25f6:	56                   	push   esi
    25f7:	09 63 31             	or     DWORD PTR [ebx+0x31],esp
    25fa:	00 01                	add    BYTE PTR [ecx],al
    25fc:	1c 48                	sbb    al,0x48
    25fe:	00 00                	add    BYTE PTR [eax],al
    2600:	00 02                	add    BYTE PTR [edx],al
    2602:	91                   	xchg   ecx,eax
    2603:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2604:	09 63 32             	or     DWORD PTR [ebx+0x32],esp
    2607:	00 01                	add    BYTE PTR [ecx],al
    2609:	1c 48                	sbb    al,0x48
    260b:	00 00                	add    BYTE PTR [eax],al
    260d:	00 02                	add    BYTE PTR [edx],al
    260f:	91                   	xchg   ecx,eax
    2610:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2611:	00 05 04 0f 01 00    	add    BYTE PTR ds:0x10f04,al
    2617:	00 06                	add    BYTE PTR [esi],al
    2619:	48                   	dec    eax
    261a:	00 00                	add    BYTE PTR [eax],al
    261c:	00 0a                	add    BYTE PTR [edx],cl
    261e:	4b                   	dec    ebx
    261f:	00 00                	add    BYTE PTR [eax],al
    2621:	00 02                	add    BYTE PTR [edx],al
    2623:	34 56                	xor    al,0x56
    2625:	00 00                	add    BYTE PTR [eax],al
    2627:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
    262d:	30 0a                	xor    BYTE PTR [edx],cl
    262f:	af                   	scas   eax,DWORD PTR es:[edi]
    2630:	00 00                	add    BYTE PTR [eax],al
    2632:	00 02                	add    BYTE PTR [edx],al
    2634:	35 56 00 00 00       	xor    eax,0x56
    2639:	05 03 00 45 00       	add    eax,0x450003
    263e:	30 0a                	xor    BYTE PTR [edx],cl
    2640:	5b                   	pop    ebx
    2641:	01 00                	add    DWORD PTR [eax],eax
    2643:	00 02                	add    BYTE PTR [edx],al
    2645:	36                   	ss
    2646:	56                   	push   esi
    2647:	00 00                	add    BYTE PTR [eax],al
    2649:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
    264f:	30 0a                	xor    BYTE PTR [edx],cl
    2651:	54                   	push   esp
    2652:	00 00                	add    BYTE PTR [eax],al
    2654:	00 02                	add    BYTE PTR [edx],al
    2656:	37                   	aaa    
    2657:	56                   	push   esi
    2658:	00 00                	add    BYTE PTR [eax],al
    265a:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
    2660:	30 0a                	xor    BYTE PTR [edx],cl
    2662:	28 00                	sub    BYTE PTR [eax],al
    2664:	00 00                	add    BYTE PTR [eax],al
    2666:	03 46 69             	add    eax,DWORD PTR [esi+0x69]
    2669:	01 00                	add    DWORD PTR [eax],eax
    266b:	00 05 03 04 45 00    	add    BYTE PTR ds:0x450403,al
    2671:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    2677:	00 00                	add    BYTE PTR [eax],al
    2679:	c9                   	leave  
    267a:	01 00                	add    DWORD PTR [eax],eax
    267c:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    267f:	bb 0c 00 00 04       	mov    ebx,0x400000c
    2684:	01 f4                	add    esp,esi
    2686:	00 00                	add    BYTE PTR [eax],al
    2688:	00 0c 26             	add    BYTE PTR [esi+eiz*1],cl
    268b:	09 00                	or     DWORD PTR [eax],eax
    268d:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2690:	00 00                	add    BYTE PTR [eax],al
    2692:	ac                   	lods   al,BYTE PTR ds:[esi]
    2693:	16                   	push   ss
    2694:	00 30                	add    BYTE PTR [eax],dh
    2696:	c7 00 00 00 f1 0f    	mov    DWORD PTR [eax],0xff10000
    269c:	00 00                	add    BYTE PTR [eax],al
    269e:	02 01                	add    al,BYTE PTR [ecx]
    26a0:	06                   	push   es
    26a1:	64 00 00             	add    BYTE PTR fs:[eax],al
    26a4:	00 02                	add    BYTE PTR [edx],al
    26a6:	01 06                	add    DWORD PTR [esi],eax
    26a8:	5d                   	pop    ebp
    26a9:	00 00                	add    BYTE PTR [eax],al
    26ab:	00 02                	add    BYTE PTR [edx],al
    26ad:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    26b3:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    26ba:	02 08                	add    cl,BYTE PTR [eax]
    26bc:	05 00 00 00 00       	add    eax,0x0
    26c1:	02 01                	add    al,BYTE PTR [ecx]
    26c3:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    26c6:	00 00                	add    BYTE PTR [eax],al
    26c8:	02 02                	add    al,BYTE PTR [edx]
    26ca:	07                   	pop    es
    26cb:	0e                   	push   cs
    26cc:	00 00                	add    BYTE PTR [eax],al
    26ce:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    26d1:	00 00                	add    BYTE PTR [eax],al
    26d3:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    26d6:	61                   	popa   
    26d7:	00 00                	add    BYTE PTR [eax],al
    26d9:	00 02                	add    BYTE PTR [edx],al
    26db:	04 07                	add    al,0x7
    26dd:	3e 00 00             	add    BYTE PTR ds:[eax],al
    26e0:	00 02                	add    BYTE PTR [edx],al
    26e2:	08 07                	or     BYTE PTR [edi],al
    26e4:	34 00                	xor    al,0x0
    26e6:	00 00                	add    BYTE PTR [eax],al
    26e8:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    26ef:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    26f2:	9b                   	fwait
    26f3:	00 00                	add    BYTE PTR [eax],al
    26f5:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    26fb:	00 06                	add    BYTE PTR [esi],al
    26fd:	25 00 00 00 02       	and    eax,0x2000000
    2702:	01 02                	add    DWORD PTR [edx],eax
    2704:	95                   	xchg   ebp,eax
    2705:	00 00                	add    BYTE PTR [eax],al
    2707:	00 02                	add    BYTE PTR [edx],al
    2709:	04 07                	add    al,0x7
    270b:	39 00                	cmp    DWORD PTR [eax],eax
    270d:	00 00                	add    BYTE PTR [eax],al
    270f:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2712:	e1 00                	loope  2714 <sysEnter_Vector-0x12d8ec>
    2714:	00 00                	add    BYTE PTR [eax],al
    2716:	05 04 25 00 00       	add    eax,0x2504
    271b:	00 07                	add    BYTE PTR [edi],al
    271d:	09 09                	or     DWORD PTR [ecx],ecx
    271f:	00 00                	add    BYTE PTR [eax],al
    2721:	01 04 9d 00 00 00 ac 	add    DWORD PTR [ebx*4-0x54000000],eax
    2728:	16                   	push   ss
    2729:	00 30                	add    BYTE PTR [eax],dh
    272b:	40                   	inc    eax
    272c:	00 00                	add    BYTE PTR [eax],al
    272e:	00 01                	add    BYTE PTR [ecx],al
    2730:	9c                   	pushf  
    2731:	e3 00                	jecxz  2733 <sysEnter_Vector-0x12d8cd>
    2733:	00 00                	add    BYTE PTR [eax],al
    2735:	08 73 31             	or     BYTE PTR [ebx+0x31],dh
    2738:	00 01                	add    BYTE PTR [ecx],al
    273a:	04 9d                	add    al,0x9d
    273c:	00 00                	add    BYTE PTR [eax],al
    273e:	00 02                	add    BYTE PTR [edx],al
    2740:	91                   	xchg   ecx,eax
    2741:	00 08                	add    BYTE PTR [eax],cl
    2743:	73 32                	jae    2777 <sysEnter_Vector-0x12d889>
    2745:	00 01                	add    BYTE PTR [ecx],al
    2747:	04 7d                	add    al,0x7d
    2749:	00 00                	add    BYTE PTR [eax],al
    274b:	00 02                	add    BYTE PTR [edx],al
    274d:	91                   	xchg   ecx,eax
    274e:	04 09                	add    al,0x9
    2750:	73 00                	jae    2752 <sysEnter_Vector-0x12d8ae>
    2752:	01 06                	add    DWORD PTR [esi],eax
    2754:	9d                   	popf   
    2755:	00 00                	add    BYTE PTR [eax],al
    2757:	00 02                	add    BYTE PTR [edx],al
    2759:	91                   	xchg   ecx,eax
    275a:	74 00                	je     275c <sysEnter_Vector-0x12d8a4>
    275c:	07                   	pop    es
    275d:	1e                   	push   ds
    275e:	09 00                	or     DWORD PTR [eax],eax
    2760:	00 01                	add    BYTE PTR [ecx],al
    2762:	0e                   	push   cs
    2763:	9d                   	popf   
    2764:	00 00                	add    BYTE PTR [eax],al
    2766:	00 ec                	add    ah,ch
    2768:	16                   	push   ss
    2769:	00 30                	add    BYTE PTR [eax],dh
    276b:	40                   	inc    eax
    276c:	00 00                	add    BYTE PTR [eax],al
    276e:	00 01                	add    BYTE PTR [ecx],al
    2770:	9c                   	pushf  
    2771:	23 01                	and    eax,DWORD PTR [ecx]
    2773:	00 00                	add    BYTE PTR [eax],al
    2775:	08 73 31             	or     BYTE PTR [ebx+0x31],dh
    2778:	00 01                	add    BYTE PTR [ecx],al
    277a:	0e                   	push   cs
    277b:	9d                   	popf   
    277c:	00 00                	add    BYTE PTR [eax],al
    277e:	00 02                	add    BYTE PTR [edx],al
    2780:	91                   	xchg   ecx,eax
    2781:	00 08                	add    BYTE PTR [eax],cl
    2783:	73 32                	jae    27b7 <sysEnter_Vector-0x12d849>
    2785:	00 01                	add    BYTE PTR [ecx],al
    2787:	0e                   	push   cs
    2788:	7d 00                	jge    278a <sysEnter_Vector-0x12d876>
    278a:	00 00                	add    BYTE PTR [eax],al
    278c:	02 91 04 09 73 00    	add    dl,BYTE PTR [ecx+0x730904]
    2792:	01 10                	add    DWORD PTR [eax],edx
    2794:	9d                   	popf   
    2795:	00 00                	add    BYTE PTR [eax],al
    2797:	00 02                	add    BYTE PTR [edx],al
    2799:	91                   	xchg   ecx,eax
    279a:	74 00                	je     279c <sysEnter_Vector-0x12d864>
    279c:	07                   	pop    es
    279d:	16                   	push   ss
    279e:	09 00                	or     DWORD PTR [eax],eax
    27a0:	00 01                	add    BYTE PTR [ecx],al
    27a2:	18 9d 00 00 00 2c    	sbb    BYTE PTR [ebp+0x2c000000],bl
    27a8:	17                   	pop    ss
    27a9:	00 30                	add    BYTE PTR [eax],dh
    27ab:	47                   	inc    edi
    27ac:	00 00                	add    BYTE PTR [eax],al
    27ae:	00 01                	add    BYTE PTR [ecx],al
    27b0:	9c                   	pushf  
    27b1:	71 01                	jno    27b4 <sysEnter_Vector-0x12d84c>
    27b3:	00 00                	add    BYTE PTR [eax],al
    27b5:	08 73 31             	or     BYTE PTR [ebx+0x31],dh
    27b8:	00 01                	add    BYTE PTR [ecx],al
    27ba:	18 9d 00 00 00 02    	sbb    BYTE PTR [ebp+0x2000000],bl
    27c0:	91                   	xchg   ecx,eax
    27c1:	00 08                	add    BYTE PTR [eax],cl
    27c3:	73 32                	jae    27f7 <sysEnter_Vector-0x12d809>
    27c5:	00 01                	add    BYTE PTR [ecx],al
    27c7:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    27ca:	00 00                	add    BYTE PTR [eax],al
    27cc:	02 91 04 0a 10 09    	add    dl,BYTE PTR [ecx+0x9100a04]
    27d2:	00 00                	add    BYTE PTR [eax],al
    27d4:	01 18                	add    DWORD PTR [eax],ebx
    27d6:	61                   	popa   
    27d7:	00 00                	add    BYTE PTR [eax],al
    27d9:	00 02                	add    BYTE PTR [edx],al
    27db:	91                   	xchg   ecx,eax
    27dc:	08 09                	or     BYTE PTR [ecx],cl
    27de:	73 00                	jae    27e0 <sysEnter_Vector-0x12d820>
    27e0:	01 1a                	add    DWORD PTR [edx],ebx
    27e2:	9d                   	popf   
    27e3:	00 00                	add    BYTE PTR [eax],al
    27e5:	00 02                	add    BYTE PTR [edx],al
    27e7:	91                   	xchg   ecx,eax
    27e8:	74 00                	je     27ea <sysEnter_Vector-0x12d816>
    27ea:	0b 4b 00             	or     ecx,DWORD PTR [ebx+0x0]
    27ed:	00 00                	add    BYTE PTR [eax],al
    27ef:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    27f2:	00 00                	add    BYTE PTR [eax],al
    27f4:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
    27fa:	30 0b                	xor    BYTE PTR [ebx],cl
    27fc:	af                   	scas   eax,DWORD PTR es:[edi]
    27fd:	00 00                	add    BYTE PTR [eax],al
    27ff:	00 02                	add    BYTE PTR [edx],al
    2801:	35 56 00 00 00       	xor    eax,0x56
    2806:	05 03 00 45 00       	add    eax,0x450003
    280b:	30 0b                	xor    BYTE PTR [ebx],cl
    280d:	5b                   	pop    ebx
    280e:	01 00                	add    DWORD PTR [eax],eax
    2810:	00 02                	add    BYTE PTR [edx],al
    2812:	36                   	ss
    2813:	56                   	push   esi
    2814:	00 00                	add    BYTE PTR [eax],al
    2816:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
    281c:	30 0b                	xor    BYTE PTR [ebx],cl
    281e:	54                   	push   esp
    281f:	00 00                	add    BYTE PTR [eax],al
    2821:	00 02                	add    BYTE PTR [edx],al
    2823:	37                   	aaa    
    2824:	56                   	push   esi
    2825:	00 00                	add    BYTE PTR [eax],al
    2827:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
    282d:	30 0b                	xor    BYTE PTR [ebx],cl
    282f:	28 00                	sub    BYTE PTR [eax],al
    2831:	00 00                	add    BYTE PTR [eax],al
    2833:	03 46 c6             	add    eax,DWORD PTR [esi-0x3a]
    2836:	01 00                	add    DWORD PTR [eax],eax
    2838:	00 05 03 04 45 00    	add    BYTE PTR ds:0x450403,al
    283e:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    2844:	00 00                	add    BYTE PTR [eax],al
    2846:	4c                   	dec    esp
    2847:	01 00                	add    DWORD PTR [eax],eax
    2849:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    284c:	5c                   	pop    esp
    284d:	0d 00 00 04 01       	or     eax,0x1040000
    2852:	f4                   	hlt    
    2853:	00 00                	add    BYTE PTR [eax],al
    2855:	00 0c 50             	add    BYTE PTR [eax+edx*2],cl
    2858:	09 00                	or     DWORD PTR [eax],eax
    285a:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    285d:	00 00                	add    BYTE PTR [eax],al
    285f:	74 17                	je     2878 <sysEnter_Vector-0x12d788>
    2861:	00 30                	add    BYTE PTR [eax],dh
    2863:	89 00                	mov    DWORD PTR [eax],eax
    2865:	00 00                	add    BYTE PTR [eax],al
    2867:	d1 10                	rcl    DWORD PTR [eax],1
    2869:	00 00                	add    BYTE PTR [eax],al
    286b:	02 01                	add    al,BYTE PTR [ecx]
    286d:	06                   	push   es
    286e:	64 00 00             	add    BYTE PTR fs:[eax],al
    2871:	00 02                	add    BYTE PTR [edx],al
    2873:	01 06                	add    DWORD PTR [esi],eax
    2875:	5d                   	pop    ebp
    2876:	00 00                	add    BYTE PTR [eax],al
    2878:	00 02                	add    BYTE PTR [edx],al
    287a:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2880:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2887:	02 08                	add    cl,BYTE PTR [eax]
    2889:	05 00 00 00 00       	add    eax,0x0
    288e:	02 01                	add    al,BYTE PTR [ecx]
    2890:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2893:	00 00                	add    BYTE PTR [eax],al
    2895:	02 02                	add    al,BYTE PTR [edx]
    2897:	07                   	pop    es
    2898:	0e                   	push   cs
    2899:	00 00                	add    BYTE PTR [eax],al
    289b:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    289e:	00 00                	add    BYTE PTR [eax],al
    28a0:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    28a3:	61                   	popa   
    28a4:	00 00                	add    BYTE PTR [eax],al
    28a6:	00 02                	add    BYTE PTR [edx],al
    28a8:	04 07                	add    al,0x7
    28aa:	3e 00 00             	add    BYTE PTR ds:[eax],al
    28ad:	00 02                	add    BYTE PTR [edx],al
    28af:	08 07                	or     BYTE PTR [edi],al
    28b1:	34 00                	xor    al,0x0
    28b3:	00 00                	add    BYTE PTR [eax],al
    28b5:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    28bc:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    28bf:	9b                   	fwait
    28c0:	00 00                	add    BYTE PTR [eax],al
    28c2:	00 02                	add    BYTE PTR [edx],al
    28c4:	01 02                	add    DWORD PTR [edx],eax
    28c6:	95                   	xchg   ebp,eax
    28c7:	00 00                	add    BYTE PTR [eax],al
    28c9:	00 02                	add    BYTE PTR [edx],al
    28cb:	04 07                	add    al,0x7
    28cd:	39 00                	cmp    DWORD PTR [eax],eax
    28cf:	00 00                	add    BYTE PTR [eax],al
    28d1:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    28d4:	e1 00                	loope  28d6 <sysEnter_Vector-0x12d72a>
    28d6:	00 00                	add    BYTE PTR [eax],al
    28d8:	05 04 25 00 00       	add    eax,0x2504
    28dd:	00 06                	add    BYTE PTR [esi],al
    28df:	3b 09                	cmp    ecx,DWORD PTR [ecx]
    28e1:	00 00                	add    BYTE PTR [eax],al
    28e3:	01 09                	add    DWORD PTR [ecx],ecx
    28e5:	7d 00                	jge    28e7 <sysEnter_Vector-0x12d719>
    28e7:	00 00                	add    BYTE PTR [eax],al
    28e9:	74 17                	je     2902 <sysEnter_Vector-0x12d6fe>
    28eb:	00 30                	add    BYTE PTR [eax],dh
    28ed:	30 00                	xor    BYTE PTR [eax],al
    28ef:	00 00                	add    BYTE PTR [eax],al
    28f1:	01 9c be 00 00 00 07 	add    DWORD PTR [esi+edi*4+0x7000000],ebx
    28f8:	63 00                	arpl   WORD PTR [eax],ax
    28fa:	01 09                	add    DWORD PTR [ecx],ecx
    28fc:	25 00 00 00 02       	and    eax,0x2000000
    2901:	91                   	xchg   ecx,eax
    2902:	74 00                	je     2904 <sysEnter_Vector-0x12d6fc>
    2904:	08 47 09             	or     BYTE PTR [edi+0x9],al
    2907:	00 00                	add    BYTE PTR [eax],al
    2909:	01 0e                	add    DWORD PTR [esi],ecx
    290b:	7d 00                	jge    290d <sysEnter_Vector-0x12d6f3>
    290d:	00 00                	add    BYTE PTR [eax],al
    290f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    2910:	17                   	pop    ss
    2911:	00 30                	add    BYTE PTR [eax],dh
    2913:	59                   	pop    ecx
    2914:	00 00                	add    BYTE PTR [eax],al
    2916:	00 01                	add    BYTE PTR [ecx],al
    2918:	9c                   	pushf  
    2919:	f4                   	hlt    
    291a:	00 00                	add    BYTE PTR [eax],al
    291c:	00 07                	add    BYTE PTR [edi],al
    291e:	73 74                	jae    2994 <sysEnter_Vector-0x12d66c>
    2920:	72 00                	jb     2922 <sysEnter_Vector-0x12d6de>
    2922:	01 0e                	add    DWORD PTR [esi],ecx
    2924:	92                   	xchg   edx,eax
    2925:	00 00                	add    BYTE PTR [eax],al
    2927:	00 02                	add    BYTE PTR [edx],al
    2929:	91                   	xchg   ecx,eax
    292a:	00 09                	add    BYTE PTR [ecx],cl
    292c:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
    292f:	00 01                	add    BYTE PTR [ecx],al
    2931:	10 3a                	adc    BYTE PTR [edx],bh
    2933:	00 00                	add    BYTE PTR [eax],al
    2935:	00 02                	add    BYTE PTR [edx],al
    2937:	91                   	xchg   ecx,eax
    2938:	74 00                	je     293a <sysEnter_Vector-0x12d6c6>
    293a:	0a 4b 00             	or     cl,BYTE PTR [ebx+0x0]
    293d:	00 00                	add    BYTE PTR [eax],al
    293f:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    2942:	00 00                	add    BYTE PTR [eax],al
    2944:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
    294a:	30 0a                	xor    BYTE PTR [edx],cl
    294c:	af                   	scas   eax,DWORD PTR es:[edi]
    294d:	00 00                	add    BYTE PTR [eax],al
    294f:	00 02                	add    BYTE PTR [edx],al
    2951:	35 56 00 00 00       	xor    eax,0x56
    2956:	05 03 00 45 00       	add    eax,0x450003
    295b:	30 0a                	xor    BYTE PTR [edx],cl
    295d:	5b                   	pop    ebx
    295e:	01 00                	add    DWORD PTR [eax],eax
    2960:	00 02                	add    BYTE PTR [edx],al
    2962:	36                   	ss
    2963:	56                   	push   esi
    2964:	00 00                	add    BYTE PTR [eax],al
    2966:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
    296c:	30 0a                	xor    BYTE PTR [edx],cl
    296e:	54                   	push   esp
    296f:	00 00                	add    BYTE PTR [eax],al
    2971:	00 02                	add    BYTE PTR [edx],al
    2973:	37                   	aaa    
    2974:	56                   	push   esi
    2975:	00 00                	add    BYTE PTR [eax],al
    2977:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
    297d:	30 0a                	xor    BYTE PTR [edx],cl
    297f:	28 00                	sub    BYTE PTR [eax],al
    2981:	00 00                	add    BYTE PTR [eax],al
    2983:	03 46 49             	add    eax,DWORD PTR [esi+0x49]
    2986:	01 00                	add    DWORD PTR [eax],eax
    2988:	00 05 03 04 45 00    	add    BYTE PTR ds:0x450403,al
    298e:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
    2994:	00 00                	add    BYTE PTR [eax],al
    2996:	ca 00 00             	retf   0x0
    2999:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    299c:	03 0e                	add    ecx,DWORD PTR [esi]
    299e:	00 00                	add    BYTE PTR [eax],al
    29a0:	04 01                	add    al,0x1
    29a2:	f4                   	hlt    
    29a3:	00 00                	add    BYTE PTR [eax],al
    29a5:	00 0c 6e             	add    BYTE PTR [esi+ebp*2],cl
    29a8:	09 00                	or     DWORD PTR [eax],eax
    29aa:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    29ad:	00 00                	add    BYTE PTR [eax],al
    29af:	00 18                	add    BYTE PTR [eax],bl
    29b1:	00 30                	add    BYTE PTR [eax],dh
    29b3:	62 00                	bound  eax,QWORD PTR [eax]
    29b5:	00 00                	add    BYTE PTR [eax],al
    29b7:	a0 11 00 00 02       	mov    al,ds:0x2000011
    29bc:	04 05                	add    al,0x5
    29be:	69 6e 74 00 03 94 04 	imul   ebp,DWORD PTR [esi+0x74],0x4940300
    29c5:	00 00                	add    BYTE PTR [eax],al
    29c7:	02 d8                	add    bl,al
    29c9:	37                   	aaa    
    29ca:	00 00                	add    BYTE PTR [eax],al
    29cc:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    29cf:	07                   	pop    es
    29d0:	3e 00 00             	add    BYTE PTR ds:[eax],al
    29d3:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    29d6:	05 05 00 00 00       	add    eax,0x5
    29db:	04 08                	add    al,0x8
    29dd:	05 00 00 00 00       	add    eax,0x0
    29e2:	04 0c                	add    al,0xc
    29e4:	04 9b                	add    al,0x9b
    29e6:	00 00                	add    BYTE PTR [eax],al
    29e8:	00 05 67 09 00 00    	add    BYTE PTR ds:0x967,al
    29ee:	01 03                	add    DWORD PTR [ebx],eax
    29f0:	2c 00                	sub    al,0x0
    29f2:	00 00                	add    BYTE PTR [eax],al
    29f4:	00 18                	add    BYTE PTR [eax],bl
    29f6:	00 30                	add    BYTE PTR [eax],dh
    29f8:	31 00                	xor    DWORD PTR [eax],eax
    29fa:	00 00                	add    BYTE PTR [eax],al
    29fc:	01 9c 89 00 00 00 06 	add    DWORD PTR [ecx+ecx*4+0x6000000],ebx
    2a03:	73 74                	jae    2a79 <sysEnter_Vector-0x12d587>
    2a05:	72 00                	jb     2a07 <sysEnter_Vector-0x12d5f9>
    2a07:	01 03                	add    DWORD PTR [ebx],eax
    2a09:	89 00                	mov    DWORD PTR [eax],eax
    2a0b:	00 00                	add    BYTE PTR [eax],al
    2a0d:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    2a13:	74 00                	je     2a15 <sysEnter_Vector-0x12d5eb>
    2a15:	01 04 2c             	add    DWORD PTR [esp+ebp*1],eax
    2a18:	00 00                	add    BYTE PTR [eax],al
    2a1a:	00 02                	add    BYTE PTR [edx],al
    2a1c:	91                   	xchg   ecx,eax
    2a1d:	74 00                	je     2a1f <sysEnter_Vector-0x12d5e1>
    2a1f:	08 04 96             	or     BYTE PTR [esi+edx*4],al
    2a22:	00 00                	add    BYTE PTR [eax],al
    2a24:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2a27:	06                   	push   es
    2a28:	64 00 00             	add    BYTE PTR fs:[eax],al
    2a2b:	00 09                	add    BYTE PTR [ecx],cl
    2a2d:	8f 00                	pop    DWORD PTR [eax]
    2a2f:	00 00                	add    BYTE PTR [eax],al
    2a31:	0a 83 09 00 00 01    	or     al,BYTE PTR [ebx+0x1000009]
    2a37:	0a 2c 00             	or     ch,BYTE PTR [eax+eax*1]
    2a3a:	00 00                	add    BYTE PTR [eax],al
    2a3c:	31 18                	xor    DWORD PTR [eax],ebx
    2a3e:	00 30                	add    BYTE PTR [eax],dh
    2a40:	31 00                	xor    DWORD PTR [eax],eax
    2a42:	00 00                	add    BYTE PTR [eax],al
    2a44:	01 9c 06 73 74 72 00 	add    DWORD PTR [esi+eax*1+0x727473],ebx
    2a4b:	01 0a                	add    DWORD PTR [edx],ecx
    2a4d:	89 00                	mov    DWORD PTR [eax],eax
    2a4f:	00 00                	add    BYTE PTR [eax],al
    2a51:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    2a57:	74 00                	je     2a59 <sysEnter_Vector-0x12d5a7>
    2a59:	01 0b                	add    DWORD PTR [ebx],ecx
    2a5b:	2c 00                	sub    al,0x0
    2a5d:	00 00                	add    BYTE PTR [eax],al
    2a5f:	02 91 74 00 00 de    	add    dl,BYTE PTR [ecx-0x21ffff8c]
    2a65:	00 00                	add    BYTE PTR [eax],al
    2a67:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2a6a:	9e                   	sahf   
    2a6b:	0e                   	push   cs
    2a6c:	00 00                	add    BYTE PTR [eax],al
    2a6e:	04 01                	add    al,0x1
    2a70:	f4                   	hlt    
    2a71:	00 00                	add    BYTE PTR [eax],al
    2a73:	00 0c 9c             	add    BYTE PTR [esp+ebx*4],cl
    2a76:	09 00                	or     DWORD PTR [eax],eax
    2a78:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2a7b:	00 00                	add    BYTE PTR [eax],al
    2a7d:	64 18 00             	sbb    BYTE PTR fs:[eax],al
    2a80:	30 ce                	xor    dh,cl
    2a82:	00 00                	add    BYTE PTR [eax],al
    2a84:	00 38                	add    BYTE PTR [eax],bh
    2a86:	12 00                	adc    al,BYTE PTR [eax]
    2a88:	00 02                	add    BYTE PTR [edx],al
    2a8a:	04 05                	add    al,0x5
    2a8c:	69 6e 74 00 03 94 04 	imul   ebp,DWORD PTR [esi+0x74],0x4940300
    2a93:	00 00                	add    BYTE PTR [eax],al
    2a95:	02 d8                	add    bl,al
    2a97:	37                   	aaa    
    2a98:	00 00                	add    BYTE PTR [eax],al
    2a9a:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2a9d:	07                   	pop    es
    2a9e:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2aa1:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2aa4:	05 05 00 00 00       	add    eax,0x5
    2aa9:	04 08                	add    al,0x8
    2aab:	05 00 00 00 00       	add    eax,0x0
    2ab0:	04 0c                	add    al,0xc
    2ab2:	04 9b                	add    al,0x9b
    2ab4:	00 00                	add    BYTE PTR [eax],al
    2ab6:	00 05 94 09 00 00    	add    BYTE PTR ds:0x994,al
    2abc:	01 0c 25 00 00 00 64 	add    DWORD PTR [eiz*1+0x64000000],ecx
    2ac3:	18 00                	sbb    BYTE PTR [eax],al
    2ac5:	30 67 00             	xor    BYTE PTR [edi+0x0],ah
    2ac8:	00 00                	add    BYTE PTR [eax],al
    2aca:	01 9c 93 00 00 00 06 	add    DWORD PTR [ebx+edx*4+0x6000000],ebx
    2ad1:	73 31                	jae    2b04 <sysEnter_Vector-0x12d4fc>
    2ad3:	00 01                	add    BYTE PTR [ecx],al
    2ad5:	0c 93                	or     al,0x93
    2ad7:	00 00                	add    BYTE PTR [eax],al
    2ad9:	00 02                	add    BYTE PTR [edx],al
    2adb:	91                   	xchg   ecx,eax
    2adc:	00 06                	add    BYTE PTR [esi],al
    2ade:	73 32                	jae    2b12 <sysEnter_Vector-0x12d4ee>
    2ae0:	00 01                	add    BYTE PTR [ecx],al
    2ae2:	0c 93                	or     al,0x93
    2ae4:	00 00                	add    BYTE PTR [eax],al
    2ae6:	00 02                	add    BYTE PTR [edx],al
    2ae8:	91                   	xchg   ecx,eax
    2ae9:	04 06                	add    al,0x6
    2aeb:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2aec:	00 01                	add    BYTE PTR [ecx],al
    2aee:	0c 2c                	or     al,0x2c
    2af0:	00 00                	add    BYTE PTR [eax],al
    2af2:	00 02                	add    BYTE PTR [edx],al
    2af4:	91                   	xchg   ecx,eax
    2af5:	08 00                	or     BYTE PTR [eax],al
    2af7:	07                   	pop    es
    2af8:	04 a0                	add    al,0xa0
    2afa:	00 00                	add    BYTE PTR [eax],al
    2afc:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2aff:	06                   	push   es
    2b00:	64 00 00             	add    BYTE PTR fs:[eax],al
    2b03:	00 08                	add    BYTE PTR [eax],cl
    2b05:	99                   	cdq    
    2b06:	00 00                	add    BYTE PTR [eax],al
    2b08:	00 09                	add    BYTE PTR [ecx],cl
    2b0a:	8b 09                	mov    ecx,DWORD PTR [ecx]
    2b0c:	00 00                	add    BYTE PTR [eax],al
    2b0e:	01 16                	add    DWORD PTR [esi],edx
    2b10:	25 00 00 00 cb       	and    eax,0xcb000000
    2b15:	18 00                	sbb    BYTE PTR [eax],al
    2b17:	30 67 00             	xor    BYTE PTR [edi+0x0],ah
    2b1a:	00 00                	add    BYTE PTR [eax],al
    2b1c:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    2b23:	16                   	push   ss
    2b24:	93                   	xchg   ebx,eax
    2b25:	00 00                	add    BYTE PTR [eax],al
    2b27:	00 02                	add    BYTE PTR [edx],al
    2b29:	91                   	xchg   ecx,eax
    2b2a:	00 06                	add    BYTE PTR [esi],al
    2b2c:	73 32                	jae    2b60 <sysEnter_Vector-0x12d4a0>
    2b2e:	00 01                	add    BYTE PTR [ecx],al
    2b30:	16                   	push   ss
    2b31:	93                   	xchg   ebx,eax
    2b32:	00 00                	add    BYTE PTR [eax],al
    2b34:	00 02                	add    BYTE PTR [edx],al
    2b36:	91                   	xchg   ecx,eax
    2b37:	04 06                	add    al,0x6
    2b39:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2b3a:	00 01                	add    BYTE PTR [ecx],al
    2b3c:	16                   	push   ss
    2b3d:	2c 00                	sub    al,0x0
    2b3f:	00 00                	add    BYTE PTR [eax],al
    2b41:	02 91 08 00 00 f0    	add    dl,BYTE PTR [ecx-0xffffff8]
    2b47:	00 00                	add    BYTE PTR [eax],al
    2b49:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2b4c:	2a 0f                	sub    cl,BYTE PTR [edi]
    2b4e:	00 00                	add    BYTE PTR [eax],al
    2b50:	04 01                	add    al,0x1
    2b52:	f4                   	hlt    
    2b53:	00 00                	add    BYTE PTR [eax],al
    2b55:	00 0c b2             	add    BYTE PTR [edx+esi*4],cl
    2b58:	09 00                	or     DWORD PTR [eax],eax
    2b5a:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2b5d:	00 00                	add    BYTE PTR [eax],al
    2b5f:	34 19                	xor    al,0x19
    2b61:	00 30                	add    BYTE PTR [eax],dh
    2b63:	80 00 00             	add    BYTE PTR [eax],0x0
    2b66:	00 fd                	add    ch,bh
    2b68:	12 00                	adc    al,BYTE PTR [eax]
    2b6a:	00 02                	add    BYTE PTR [edx],al
    2b6c:	04 05                	add    al,0x5
    2b6e:	69 6e 74 00 03 94 04 	imul   ebp,DWORD PTR [esi+0x74],0x4940300
    2b75:	00 00                	add    BYTE PTR [eax],al
    2b77:	02 d8                	add    bl,al
    2b79:	37                   	aaa    
    2b7a:	00 00                	add    BYTE PTR [eax],al
    2b7c:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2b7f:	07                   	pop    es
    2b80:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2b83:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2b86:	05 05 00 00 00       	add    eax,0x5
    2b8b:	04 08                	add    al,0x8
    2b8d:	05 00 00 00 00       	add    eax,0x0
    2b92:	04 0c                	add    al,0xc
    2b94:	04 9b                	add    al,0x9b
    2b96:	00 00                	add    BYTE PTR [eax],al
    2b98:	00 05 c8 09 00 00    	add    BYTE PTR ds:0x9c8,al
    2b9e:	01 0d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ecx
    2ba4:	34 19                	xor    al,0x19
    2ba6:	00 30                	add    BYTE PTR [eax],dh
    2ba8:	60                   	pusha  
    2ba9:	00 00                	add    BYTE PTR [eax],al
    2bab:	00 01                	add    BYTE PTR [ecx],al
    2bad:	9c                   	pushf  
    2bae:	9f                   	lahf   
    2baf:	00 00                	add    BYTE PTR [eax],al
    2bb1:	00 06                	add    BYTE PTR [esi],al
    2bb3:	73 31                	jae    2be6 <sysEnter_Vector-0x12d41a>
    2bb5:	00 01                	add    BYTE PTR [ecx],al
    2bb7:	0d 9f 00 00 00       	or     eax,0x9f
    2bbc:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    2bc2:	00 01                	add    BYTE PTR [ecx],al
    2bc4:	0d ac 00 00 00       	or     eax,0xac
    2bc9:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    2bcf:	01 0d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ecx
    2bd5:	02 91 08 07 73 00    	add    dl,BYTE PTR [ecx+0x730708]
    2bdb:	01 0f                	add    DWORD PTR [edi],ecx
    2bdd:	9f                   	lahf   
    2bde:	00 00                	add    BYTE PTR [eax],al
    2be0:	00 02                	add    BYTE PTR [edx],al
    2be2:	91                   	xchg   ecx,eax
    2be3:	74 00                	je     2be5 <sysEnter_Vector-0x12d41b>
    2be5:	08 04 a5 00 00 00 04 	or     BYTE PTR [eiz*4+0x4000000],al
    2bec:	01 06                	add    DWORD PTR [esi],eax
    2bee:	64 00 00             	add    BYTE PTR fs:[eax],al
    2bf1:	00 08                	add    BYTE PTR [eax],cl
    2bf3:	04 b2                	add    al,0xb2
    2bf5:	00 00                	add    BYTE PTR [eax],al
    2bf7:	00 09                	add    BYTE PTR [ecx],cl
    2bf9:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    2bfa:	00 00                	add    BYTE PTR [eax],al
    2bfc:	00 0a                	add    BYTE PTR [edx],cl
    2bfe:	d1 09                	ror    DWORD PTR [ecx],1
    2c00:	00 00                	add    BYTE PTR [eax],al
    2c02:	01 1b                	add    DWORD PTR [ebx],ebx
    2c04:	9f                   	lahf   
    2c05:	00 00                	add    BYTE PTR [eax],al
    2c07:	00 94 19 00 30 20 00 	add    BYTE PTR [ecx+ebx*1+0x203000],dl
    2c0e:	00 00                	add    BYTE PTR [eax],al
    2c10:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    2c17:	1b 9f 00 00 00 02    	sbb    ebx,DWORD PTR [edi+0x2000000]
    2c1d:	91                   	xchg   ecx,eax
    2c1e:	00 06                	add    BYTE PTR [esi],al
    2c20:	73 32                	jae    2c54 <sysEnter_Vector-0x12d3ac>
    2c22:	00 01                	add    BYTE PTR [ecx],al
    2c24:	1b ac 00 00 00 02 91 	sbb    ebp,DWORD PTR [eax+eax*1-0x6efe0000]
    2c2b:	04 06                	add    al,0x6
    2c2d:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2c2e:	00 01                	add    BYTE PTR [ecx],al
    2c30:	1b 2c 00             	sbb    ebp,DWORD PTR [eax+eax*1]
    2c33:	00 00                	add    BYTE PTR [eax],al
    2c35:	02 91 08 00 00 92    	add    dl,BYTE PTR [ecx-0x6dfffff8]
    2c3b:	01 00                	add    DWORD PTR [eax],eax
    2c3d:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2c40:	c5 0f                	lds    ecx,FWORD PTR [edi]
    2c42:	00 00                	add    BYTE PTR [eax],al
    2c44:	04 01                	add    al,0x1
    2c46:	f4                   	hlt    
    2c47:	00 00                	add    BYTE PTR [eax],al
    2c49:	00 0c d9             	add    BYTE PTR [ecx+ebx*8],cl
    2c4c:	09 00                	or     DWORD PTR [eax],eax
    2c4e:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2c51:	00 00                	add    BYTE PTR [eax],al
    2c53:	b4 19                	mov    ah,0x19
    2c55:	00 30                	add    BYTE PTR [eax],dh
    2c57:	7d 01                	jge    2c5a <sysEnter_Vector-0x12d3a6>
    2c59:	00 00                	add    BYTE PTR [eax],al
    2c5b:	a2 13 00 00 02       	mov    ds:0x2000013,al
    2c60:	01 06                	add    DWORD PTR [esi],eax
    2c62:	64 00 00             	add    BYTE PTR fs:[eax],al
    2c65:	00 02                	add    BYTE PTR [edx],al
    2c67:	01 06                	add    DWORD PTR [esi],eax
    2c69:	5d                   	pop    ebp
    2c6a:	00 00                	add    BYTE PTR [eax],al
    2c6c:	00 02                	add    BYTE PTR [edx],al
    2c6e:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2c74:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2c7b:	02 08                	add    cl,BYTE PTR [eax]
    2c7d:	05 00 00 00 00       	add    eax,0x0
    2c82:	02 01                	add    al,BYTE PTR [ecx]
    2c84:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2c87:	00 00                	add    BYTE PTR [eax],al
    2c89:	02 02                	add    al,BYTE PTR [edx]
    2c8b:	07                   	pop    es
    2c8c:	0e                   	push   cs
    2c8d:	00 00                	add    BYTE PTR [eax],al
    2c8f:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2c92:	00 00                	add    BYTE PTR [eax],al
    2c94:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2c97:	61                   	popa   
    2c98:	00 00                	add    BYTE PTR [eax],al
    2c9a:	00 02                	add    BYTE PTR [edx],al
    2c9c:	04 07                	add    al,0x7
    2c9e:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2ca1:	00 02                	add    BYTE PTR [edx],al
    2ca3:	08 07                	or     BYTE PTR [edi],al
    2ca5:	34 00                	xor    al,0x0
    2ca7:	00 00                	add    BYTE PTR [eax],al
    2ca9:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2cb0:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2cb3:	9b                   	fwait
    2cb4:	00 00                	add    BYTE PTR [eax],al
    2cb6:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    2cbc:	00 06                	add    BYTE PTR [esi],al
    2cbe:	25 00 00 00 02       	and    eax,0x2000000
    2cc3:	01 02                	add    DWORD PTR [edx],eax
    2cc5:	95                   	xchg   ebp,eax
    2cc6:	00 00                	add    BYTE PTR [eax],al
    2cc8:	00 02                	add    BYTE PTR [edx],al
    2cca:	04 07                	add    al,0x7
    2ccc:	39 00                	cmp    DWORD PTR [eax],eax
    2cce:	00 00                	add    BYTE PTR [eax],al
    2cd0:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2cd3:	e1 00                	loope  2cd5 <sysEnter_Vector-0x12d32b>
    2cd5:	00 00                	add    BYTE PTR [eax],al
    2cd7:	05 04 25 00 00       	add    eax,0x2504
    2cdc:	00 07                	add    BYTE PTR [edi],al
    2cde:	fc                   	cld    
    2cdf:	09 00                	or     DWORD PTR [eax],eax
    2ce1:	00 01                	add    BYTE PTR [ecx],al
    2ce3:	3b 8f 00 00 00 b4    	cmp    ecx,DWORD PTR [edi-0x4c000000]
    2ce9:	19 00                	sbb    DWORD PTR [eax],eax
    2ceb:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
    2cee:	00 00                	add    BYTE PTR [eax],al
    2cf0:	01 9c 3a 01 00 00 08 	add    DWORD PTR [edx+edi*1+0x8000001],ebx
    2cf7:	0b 0a                	or     ecx,DWORD PTR [edx]
    2cf9:	00 00                	add    BYTE PTR [eax],al
    2cfb:	01 3b                	add    DWORD PTR [ebx],edi
    2cfd:	7d 00                	jge    2cff <sysEnter_Vector-0x12d301>
    2cff:	00 00                	add    BYTE PTR [eax],al
    2d01:	02 91 00 08 04 0a    	add    dl,BYTE PTR [ecx+0xa040800]
    2d07:	00 00                	add    BYTE PTR [eax],al
    2d09:	01 3b                	add    DWORD PTR [ebx],edi
    2d0b:	3a 01                	cmp    al,BYTE PTR [ecx]
    2d0d:	00 00                	add    BYTE PTR [eax],al
    2d0f:	02 91 04 08 10 0a    	add    dl,BYTE PTR [ecx+0xa100804]
    2d15:	00 00                	add    BYTE PTR [eax],al
    2d17:	01 3b                	add    DWORD PTR [ebx],edi
    2d19:	3a 00                	cmp    al,BYTE PTR [eax]
    2d1b:	00 00                	add    BYTE PTR [eax],al
    2d1d:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    2d23:	01 3d 7d 00 00 00    	add    DWORD PTR ds:0x7d,edi
    2d29:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    2d2c:	61                   	popa   
    2d2d:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    2d30:	01 3e                	add    DWORD PTR [esi],edi
    2d32:	8f 00                	pop    DWORD PTR [eax]
    2d34:	00 00                	add    BYTE PTR [eax],al
    2d36:	01 57 09             	add    DWORD PTR [edi+0x9],edx
    2d39:	63 00                	arpl   WORD PTR [eax],ax
    2d3b:	01 3f                	add    DWORD PTR [edi],edi
    2d3d:	3a 00                	cmp    al,BYTE PTR [eax]
    2d3f:	00 00                	add    BYTE PTR [eax],al
    2d41:	01 53 0a             	add    DWORD PTR [ebx+0xa],edx
    2d44:	ee                   	out    dx,al
    2d45:	09 00                	or     DWORD PTR [eax],eax
    2d47:	00 01                	add    BYTE PTR [ecx],al
    2d49:	40                   	inc    eax
    2d4a:	8f 00                	pop    DWORD PTR [eax]
    2d4c:	00 00                	add    BYTE PTR [eax],al
    2d4e:	0b 6e 65             	or     ebp,DWORD PTR [esi+0x65]
    2d51:	67 00 01             	add    BYTE PTR [bx+di],al
    2d54:	41                   	inc    ecx
    2d55:	3a 00                	cmp    al,BYTE PTR [eax]
    2d57:	00 00                	add    BYTE PTR [eax],al
    2d59:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    2d5c:	79 00                	jns    2d5e <sysEnter_Vector-0x12d2a2>
    2d5e:	01 41 3a             	add    DWORD PTR [ecx+0x3a],eax
    2d61:	00 00                	add    BYTE PTR [eax],al
    2d63:	00 01                	add    BYTE PTR [ecx],al
    2d65:	51                   	push   ecx
    2d66:	0c f5                	or     al,0xf5
    2d68:	09 00                	or     DWORD PTR [eax],eax
    2d6a:	00 01                	add    BYTE PTR [ecx],al
    2d6c:	41                   	inc    ecx
    2d6d:	3a 00                	cmp    al,BYTE PTR [eax]
    2d6f:	00 00                	add    BYTE PTR [eax],al
    2d71:	01 52 00             	add    DWORD PTR [edx+0x0],edx
    2d74:	05 04 9d 00 00       	add    eax,0x9d04
    2d79:	00 0d 4b 00 00 00    	add    BYTE PTR ds:0x4b,cl
    2d7f:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    2d82:	00 00                	add    BYTE PTR [eax],al
    2d84:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
    2d8a:	30 0d af 00 00 00    	xor    BYTE PTR ds:0xaf,cl
    2d90:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
    2d96:	05 03 00 45 00       	add    eax,0x450003
    2d9b:	30 0d 5b 01 00 00    	xor    BYTE PTR ds:0x15b,cl
    2da1:	02 36                	add    dh,BYTE PTR [esi]
    2da3:	56                   	push   esi
    2da4:	00 00                	add    BYTE PTR [eax],al
    2da6:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
    2dac:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
    2db2:	02 37                	add    dh,BYTE PTR [edi]
    2db4:	56                   	push   esi
    2db5:	00 00                	add    BYTE PTR [eax],al
    2db7:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
    2dbd:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
    2dc3:	03 46 3a             	add    eax,DWORD PTR [esi+0x3a]
    2dc6:	01 00                	add    DWORD PTR [eax],eax
    2dc8:	00 05 03 04 45 00    	add    BYTE PTR ds:0x450403,al
    2dce:	30 00                	xor    BYTE PTR [eax],al
    2dd0:	6c                   	ins    BYTE PTR es:[edi],dx
    2dd1:	00 00                	add    BYTE PTR [eax],al
    2dd3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2dd6:	80 10 00             	adc    BYTE PTR [eax],0x0
    2dd9:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2ddc:	f4                   	hlt    
    2ddd:	00 00                	add    BYTE PTR [eax],al
    2ddf:	00 0c 15 0a 00 00 72 	add    BYTE PTR [edx*1+0x7200000a],cl
    2de6:	00 00                	add    BYTE PTR [eax],al
    2de8:	00 34 1b             	add    BYTE PTR [ebx+ebx*1],dh
    2deb:	00 30                	add    BYTE PTR [eax],dh
    2ded:	1d 00 00 00 ef       	sbb    eax,0xef000000
    2df2:	14 00                	adc    al,0x0
    2df4:	00 02                	add    BYTE PTR [edx],al
    2df6:	2c 0a                	sub    al,0xa
    2df8:	00 00                	add    BYTE PTR [eax],al
    2dfa:	01 01                	add    DWORD PTR [ecx],eax
    2dfc:	5b                   	pop    ebx
    2dfd:	00 00                	add    BYTE PTR [eax],al
    2dff:	00 34 1b             	add    BYTE PTR [ebx+ebx*1],dh
    2e02:	00 30                	add    BYTE PTR [eax],dh
    2e04:	1d 00 00 00 01       	sbb    eax,0x1000000
    2e09:	9c                   	pushf  
    2e0a:	5b                   	pop    ebx
    2e0b:	00 00                	add    BYTE PTR [eax],al
    2e0d:	00 03                	add    BYTE PTR [ebx],al
    2e0f:	76 61                	jbe    2e72 <sysEnter_Vector-0x12d18e>
    2e11:	6c                   	ins    BYTE PTR es:[edi],dx
    2e12:	00 01                	add    BYTE PTR [ecx],al
    2e14:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    2e17:	00 00                	add    BYTE PTR [eax],al
    2e19:	02 91 00 03 63 6e    	add    dl,BYTE PTR [ecx+0x6e630300]
    2e1f:	74 00                	je     2e21 <sysEnter_Vector-0x12d1df>
    2e21:	01 01                	add    DWORD PTR [ecx],eax
    2e23:	68 00 00 00 02       	push   0x2000000
    2e28:	91                   	xchg   ecx,eax
    2e29:	04 00                	add    al,0x0
    2e2b:	04 04                	add    al,0x4
    2e2d:	61                   	popa   
    2e2e:	00 00                	add    BYTE PTR [eax],al
    2e30:	00 05 01 06 64 00    	add    BYTE PTR ds:0x640601,al
    2e36:	00 00                	add    BYTE PTR [eax],al
    2e38:	06                   	push   es
    2e39:	04 05                	add    al,0x5
    2e3b:	69 6e 74 00 00 90 01 	imul   ebp,DWORD PTR [esi+0x74],0x1900000
    2e42:	00 00                	add    BYTE PTR [eax],al
    2e44:	04 00                	add    al,0x0
    2e46:	de 10                	ficom  WORD PTR [eax]
    2e48:	00 00                	add    BYTE PTR [eax],al
    2e4a:	04 01                	add    al,0x1
    2e4c:	f4                   	hlt    
    2e4d:	00 00                	add    BYTE PTR [eax],al
    2e4f:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    2e52:	0a 00                	or     al,BYTE PTR [eax]
    2e54:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2e57:	00 00                	add    BYTE PTR [eax],al
    2e59:	54                   	push   esp
    2e5a:	1b 00                	sbb    eax,DWORD PTR [eax]
    2e5c:	30 9c 01 00 00 36 15 	xor    BYTE PTR [ecx+eax*1+0x15360000],bl
    2e63:	00 00                	add    BYTE PTR [eax],al
    2e65:	02 01                	add    al,BYTE PTR [ecx]
    2e67:	06                   	push   es
    2e68:	64 00 00             	add    BYTE PTR fs:[eax],al
    2e6b:	00 02                	add    BYTE PTR [edx],al
    2e6d:	01 06                	add    DWORD PTR [esi],eax
    2e6f:	5d                   	pop    ebp
    2e70:	00 00                	add    BYTE PTR [eax],al
    2e72:	00 02                	add    BYTE PTR [edx],al
    2e74:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2e7a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2e81:	02 08                	add    cl,BYTE PTR [eax]
    2e83:	05 00 00 00 00       	add    eax,0x0
    2e88:	02 01                	add    al,BYTE PTR [ecx]
    2e8a:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2e8d:	00 00                	add    BYTE PTR [eax],al
    2e8f:	02 02                	add    al,BYTE PTR [edx]
    2e91:	07                   	pop    es
    2e92:	0e                   	push   cs
    2e93:	00 00                	add    BYTE PTR [eax],al
    2e95:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2e98:	00 00                	add    BYTE PTR [eax],al
    2e9a:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2e9d:	61                   	popa   
    2e9e:	00 00                	add    BYTE PTR [eax],al
    2ea0:	00 02                	add    BYTE PTR [edx],al
    2ea2:	04 07                	add    al,0x7
    2ea4:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2ea7:	00 02                	add    BYTE PTR [edx],al
    2ea9:	08 07                	or     BYTE PTR [edi],al
    2eab:	34 00                	xor    al,0x0
    2ead:	00 00                	add    BYTE PTR [eax],al
    2eaf:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2eb6:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2eb9:	9b                   	fwait
    2eba:	00 00                	add    BYTE PTR [eax],al
    2ebc:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    2ec2:	00 06                	add    BYTE PTR [esi],al
    2ec4:	25 00 00 00 02       	and    eax,0x2000000
    2ec9:	01 02                	add    DWORD PTR [edx],eax
    2ecb:	95                   	xchg   ebp,eax
    2ecc:	00 00                	add    BYTE PTR [eax],al
    2ece:	00 02                	add    BYTE PTR [edx],al
    2ed0:	04 07                	add    al,0x7
    2ed2:	39 00                	cmp    DWORD PTR [eax],eax
    2ed4:	00 00                	add    BYTE PTR [eax],al
    2ed6:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2ed9:	e1 00                	loope  2edb <sysEnter_Vector-0x12d125>
    2edb:	00 00                	add    BYTE PTR [eax],al
    2edd:	05 04 25 00 00       	add    eax,0x2504
    2ee2:	00 07                	add    BYTE PTR [edi],al
    2ee4:	49                   	dec    ecx
    2ee5:	0a 00                	or     al,BYTE PTR [eax]
    2ee7:	00 01                	add    BYTE PTR [ecx],al
    2ee9:	57                   	push   edi
    2eea:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2eeb:	00 00                	add    BYTE PTR [eax],al
    2eed:	00 54 1b 00          	add    BYTE PTR [ebx+ebx*1+0x0],dl
    2ef1:	30 9c 01 00 00 01 9c 	xor    BYTE PTR [ecx+eax*1-0x63ff0000],bl
    2ef8:	38 01                	cmp    BYTE PTR [ecx],al
    2efa:	00 00                	add    BYTE PTR [eax],al
    2efc:	08 0b                	or     BYTE PTR [ebx],cl
    2efe:	0a 00                	or     al,BYTE PTR [eax]
    2f00:	00 01                	add    BYTE PTR [ecx],al
    2f02:	57                   	push   edi
    2f03:	7d 00                	jge    2f05 <sysEnter_Vector-0x12d0fb>
    2f05:	00 00                	add    BYTE PTR [eax],al
    2f07:	02 91 00 08 04 0a    	add    dl,BYTE PTR [ecx+0xa040800]
    2f0d:	00 00                	add    BYTE PTR [eax],al
    2f0f:	01 57 38             	add    DWORD PTR [edi+0x38],edx
    2f12:	01 00                	add    DWORD PTR [eax],eax
    2f14:	00 02                	add    BYTE PTR [edx],al
    2f16:	91                   	xchg   ecx,eax
    2f17:	04 08                	add    al,0x8
    2f19:	10 0a                	adc    BYTE PTR [edx],cl
    2f1b:	00 00                	add    BYTE PTR [eax],al
    2f1d:	01 57 3a             	add    DWORD PTR [edi+0x3a],edx
    2f20:	00 00                	add    BYTE PTR [eax],al
    2f22:	00 02                	add    BYTE PTR [edx],al
    2f24:	91                   	xchg   ecx,eax
    2f25:	08 09                	or     BYTE PTR [ecx],cl
    2f27:	73 00                	jae    2f29 <sysEnter_Vector-0x12d0d7>
    2f29:	01 59 7d             	add    DWORD PTR [ecx+0x7d],ebx
    2f2c:	00 00                	add    BYTE PTR [eax],al
    2f2e:	00 01                	add    BYTE PTR [ecx],al
    2f30:	56                   	push   esi
    2f31:	09 61 63             	or     DWORD PTR [ecx+0x63],esp
    2f34:	63 00                	arpl   WORD PTR [eax],ax
    2f36:	01 5a 8f             	add    DWORD PTR [edx-0x71],ebx
    2f39:	00 00                	add    BYTE PTR [eax],al
    2f3b:	00 01                	add    BYTE PTR [ecx],al
    2f3d:	57                   	push   edi
    2f3e:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    2f41:	01 5b 3a             	add    DWORD PTR [ebx+0x3a],ebx
    2f44:	00 00                	add    BYTE PTR [eax],al
    2f46:	00 01                	add    BYTE PTR [ecx],al
    2f48:	53                   	push   ebx
    2f49:	0a ee                	or     ch,dh
    2f4b:	09 00                	or     DWORD PTR [eax],eax
    2f4d:	00 01                	add    BYTE PTR [ecx],al
    2f4f:	5c                   	pop    esp
    2f50:	8f 00                	pop    DWORD PTR [eax]
    2f52:	00 00                	add    BYTE PTR [eax],al
    2f54:	0b 6e 65             	or     ebp,DWORD PTR [esi+0x65]
    2f57:	67 00 01             	add    BYTE PTR [bx+di],al
    2f5a:	5d                   	pop    ebp
    2f5b:	3a 00                	cmp    al,BYTE PTR [eax]
    2f5d:	00 00                	add    BYTE PTR [eax],al
    2f5f:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    2f62:	79 00                	jns    2f64 <sysEnter_Vector-0x12d09c>
    2f64:	01 5d 3a             	add    DWORD PTR [ebp+0x3a],ebx
    2f67:	00 00                	add    BYTE PTR [eax],al
    2f69:	00 01                	add    BYTE PTR [ecx],al
    2f6b:	51                   	push   ecx
    2f6c:	0a f5                	or     dh,ch
    2f6e:	09 00                	or     DWORD PTR [eax],eax
    2f70:	00 01                	add    BYTE PTR [ecx],al
    2f72:	5d                   	pop    ebp
    2f73:	3a 00                	cmp    al,BYTE PTR [eax]
    2f75:	00 00                	add    BYTE PTR [eax],al
    2f77:	00 05 04 9d 00 00    	add    BYTE PTR ds:0x9d04,al
    2f7d:	00 0c 4b             	add    BYTE PTR [ebx+ecx*2],cl
    2f80:	00 00                	add    BYTE PTR [eax],al
    2f82:	00 02                	add    BYTE PTR [edx],al
    2f84:	34 56                	xor    al,0x56
    2f86:	00 00                	add    BYTE PTR [eax],al
    2f88:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
    2f8e:	30 0c af             	xor    BYTE PTR [edi+ebp*4],cl
    2f91:	00 00                	add    BYTE PTR [eax],al
    2f93:	00 02                	add    BYTE PTR [edx],al
    2f95:	35 56 00 00 00       	xor    eax,0x56
    2f9a:	05 03 00 45 00       	add    eax,0x450003
    2f9f:	30 0c 5b             	xor    BYTE PTR [ebx+ebx*2],cl
    2fa2:	01 00                	add    DWORD PTR [eax],eax
    2fa4:	00 02                	add    BYTE PTR [edx],al
    2fa6:	36                   	ss
    2fa7:	56                   	push   esi
    2fa8:	00 00                	add    BYTE PTR [eax],al
    2faa:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
    2fb0:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
    2fb3:	00 00                	add    BYTE PTR [eax],al
    2fb5:	00 02                	add    BYTE PTR [edx],al
    2fb7:	37                   	aaa    
    2fb8:	56                   	push   esi
    2fb9:	00 00                	add    BYTE PTR [eax],al
    2fbb:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
    2fc1:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
    2fc4:	00 00                	add    BYTE PTR [eax],al
    2fc6:	00 03                	add    BYTE PTR [ebx],al
    2fc8:	46                   	inc    esi
    2fc9:	38 01                	cmp    BYTE PTR [ecx],al
    2fcb:	00 00                	add    BYTE PTR [eax],al
    2fcd:	05 03 04 45 00       	add    eax,0x450403
    2fd2:	30 00                	xor    BYTE PTR [eax],al
    2fd4:	62 01                	bound  eax,QWORD PTR [ecx]
    2fd6:	00 00                	add    BYTE PTR [eax],al
    2fd8:	04 00                	add    al,0x0
    2fda:	8a 11                	mov    dl,BYTE PTR [ecx]
    2fdc:	00 00                	add    BYTE PTR [eax],al
    2fde:	04 01                	add    al,0x1
    2fe0:	f4                   	hlt    
    2fe1:	00 00                	add    BYTE PTR [eax],al
    2fe3:	00 0c 56             	add    BYTE PTR [esi+edx*2],cl
    2fe6:	0a 00                	or     al,BYTE PTR [eax]
    2fe8:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2feb:	00 00                	add    BYTE PTR [eax],al
    2fed:	f0 1c 00             	lock sbb al,0x0
    2ff0:	30 b6 00 00 00 af    	xor    BYTE PTR [esi-0x51000000],dh
    2ff6:	16                   	push   ss
    2ff7:	00 00                	add    BYTE PTR [eax],al
    2ff9:	02 01                	add    al,BYTE PTR [ecx]
    2ffb:	06                   	push   es
    2ffc:	64 00 00             	add    BYTE PTR fs:[eax],al
    2fff:	00 02                	add    BYTE PTR [edx],al
    3001:	01 06                	add    DWORD PTR [esi],eax
    3003:	5d                   	pop    ebp
    3004:	00 00                	add    BYTE PTR [eax],al
    3006:	00 02                	add    BYTE PTR [edx],al
    3008:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    300e:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3015:	02 08                	add    cl,BYTE PTR [eax]
    3017:	05 00 00 00 00       	add    eax,0x0
    301c:	02 01                	add    al,BYTE PTR [ecx]
    301e:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    3021:	00 00                	add    BYTE PTR [eax],al
    3023:	02 02                	add    al,BYTE PTR [edx]
    3025:	07                   	pop    es
    3026:	0e                   	push   cs
    3027:	00 00                	add    BYTE PTR [eax],al
    3029:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    302c:	00 00                	add    BYTE PTR [eax],al
    302e:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3031:	61                   	popa   
    3032:	00 00                	add    BYTE PTR [eax],al
    3034:	00 02                	add    BYTE PTR [edx],al
    3036:	04 07                	add    al,0x7
    3038:	3e 00 00             	add    BYTE PTR ds:[eax],al
    303b:	00 02                	add    BYTE PTR [edx],al
    303d:	08 07                	or     BYTE PTR [edi],al
    303f:	34 00                	xor    al,0x0
    3041:	00 00                	add    BYTE PTR [eax],al
    3043:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    304a:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    304d:	9b                   	fwait
    304e:	00 00                	add    BYTE PTR [eax],al
    3050:	00 02                	add    BYTE PTR [edx],al
    3052:	01 02                	add    DWORD PTR [edx],eax
    3054:	95                   	xchg   ebp,eax
    3055:	00 00                	add    BYTE PTR [eax],al
    3057:	00 02                	add    BYTE PTR [edx],al
    3059:	04 07                	add    al,0x7
    305b:	39 00                	cmp    DWORD PTR [eax],eax
    305d:	00 00                	add    BYTE PTR [eax],al
    305f:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3062:	e1 00                	loope  3064 <sysEnter_Vector-0x12cf9c>
    3064:	00 00                	add    BYTE PTR [eax],al
    3066:	05 04 25 00 00       	add    eax,0x2504
    306b:	00 06                	add    BYTE PTR [esi],al
    306d:	74 0a                	je     3079 <sysEnter_Vector-0x12cf87>
    306f:	00 00                	add    BYTE PTR [eax],al
    3071:	01 03                	add    DWORD PTR [ebx],eax
    3073:	f0 1c 00             	lock sbb al,0x0
    3076:	30 96 00 00 00 01    	xor    BYTE PTR [esi+0x1000000],dl
    307c:	9c                   	pushf  
    307d:	e6 00                	out    0x0,al
    307f:	00 00                	add    BYTE PTR [eax],al
    3081:	07                   	pop    es
    3082:	50                   	push   eax
    3083:	0a 00                	or     al,BYTE PTR [eax]
    3085:	00 01                	add    BYTE PTR [ecx],al
    3087:	03 92 00 00 00 02    	add    edx,DWORD PTR [edx+0x2000000]
    308d:	91                   	xchg   ecx,eax
    308e:	00 08                	add    BYTE PTR [eax],cl
    3090:	64                   	fs
    3091:	73 74                	jae    3107 <sysEnter_Vector-0x12cef9>
    3093:	00 01                	add    BYTE PTR [ecx],al
    3095:	05 92 00 00 00       	add    eax,0x92
    309a:	02 91 6c 08 73 72    	add    dl,BYTE PTR [ecx+0x7273086c]
    30a0:	63 00                	arpl   WORD PTR [eax],ax
    30a2:	01 05 92 00 00 00    	add    DWORD PTR ds:0x92,eax
    30a8:	02 91 68 08 65 6e    	add    dl,BYTE PTR [ecx+0x6e650868]
    30ae:	64 00 01             	add    BYTE PTR fs:[ecx],al
    30b1:	06                   	push   es
    30b2:	92                   	xchg   edx,eax
    30b3:	00 00                	add    BYTE PTR [eax],al
    30b5:	00 02                	add    BYTE PTR [edx],al
    30b7:	91                   	xchg   ecx,eax
    30b8:	64 00 06             	add    BYTE PTR fs:[esi],al
    30bb:	6c                   	ins    BYTE PTR es:[edi],dx
    30bc:	0a 00                	or     al,BYTE PTR [eax]
    30be:	00 01                	add    BYTE PTR [ecx],al
    30c0:	1f                   	pop    ds
    30c1:	86 1d 00 30 20 00    	xchg   BYTE PTR ds:0x203000,bl
    30c7:	00 00                	add    BYTE PTR [eax],al
    30c9:	01 9c 0a 01 00 00 07 	add    DWORD PTR [edx+ecx*1+0x7000001],ebx
    30d0:	50                   	push   eax
    30d1:	0a 00                	or     al,BYTE PTR [eax]
    30d3:	00 01                	add    BYTE PTR [ecx],al
    30d5:	1f                   	pop    ds
    30d6:	92                   	xchg   edx,eax
    30d7:	00 00                	add    BYTE PTR [eax],al
    30d9:	00 02                	add    BYTE PTR [edx],al
    30db:	91                   	xchg   ecx,eax
    30dc:	00 00                	add    BYTE PTR [eax],al
    30de:	09 4b 00             	or     DWORD PTR [ebx+0x0],ecx
    30e1:	00 00                	add    BYTE PTR [eax],al
    30e3:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    30e6:	00 00                	add    BYTE PTR [eax],al
    30e8:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
    30ee:	30 09                	xor    BYTE PTR [ecx],cl
    30f0:	af                   	scas   eax,DWORD PTR es:[edi]
    30f1:	00 00                	add    BYTE PTR [eax],al
    30f3:	00 02                	add    BYTE PTR [edx],al
    30f5:	35 56 00 00 00       	xor    eax,0x56
    30fa:	05 03 00 45 00       	add    eax,0x450003
    30ff:	30 09                	xor    BYTE PTR [ecx],cl
    3101:	5b                   	pop    ebx
    3102:	01 00                	add    DWORD PTR [eax],eax
    3104:	00 02                	add    BYTE PTR [edx],al
    3106:	36                   	ss
    3107:	56                   	push   esi
    3108:	00 00                	add    BYTE PTR [eax],al
    310a:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
    3110:	30 09                	xor    BYTE PTR [ecx],cl
    3112:	54                   	push   esp
    3113:	00 00                	add    BYTE PTR [eax],al
    3115:	00 02                	add    BYTE PTR [edx],al
    3117:	37                   	aaa    
    3118:	56                   	push   esi
    3119:	00 00                	add    BYTE PTR [eax],al
    311b:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
    3121:	30 09                	xor    BYTE PTR [ecx],cl
    3123:	28 00                	sub    BYTE PTR [eax],al
    3125:	00 00                	add    BYTE PTR [eax],al
    3127:	03 46 5f             	add    eax,DWORD PTR [esi+0x5f]
    312a:	01 00                	add    DWORD PTR [eax],eax
    312c:	00 05 03 04 45 00    	add    BYTE PTR ds:0x450403,al
    3132:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
    3138:	00 00                	add    BYTE PTR [eax],al
    313a:	93                   	xchg   ebx,eax
    313b:	01 00                	add    DWORD PTR [eax],eax
    313d:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3140:	13 12                	adc    edx,DWORD PTR [edx]
    3142:	00 00                	add    BYTE PTR [eax],al
    3144:	04 01                	add    al,0x1
    3146:	f4                   	hlt    
    3147:	00 00                	add    BYTE PTR [eax],al
    3149:	00 0c 85 0a 00 00 72 	add    BYTE PTR [eax*4+0x7200000a],cl
    3150:	00 00                	add    BYTE PTR [eax],al
    3152:	00 a8 1d 00 30 8b    	add    BYTE PTR [eax-0x74cfffe3],ch
    3158:	00 00                	add    BYTE PTR [eax],al
    315a:	00 82 17 00 00 02    	add    BYTE PTR [edx+0x2000017],al
    3160:	01 06                	add    DWORD PTR [esi],eax
    3162:	64 00 00             	add    BYTE PTR fs:[eax],al
    3165:	00 02                	add    BYTE PTR [edx],al
    3167:	01 06                	add    DWORD PTR [esi],eax
    3169:	5d                   	pop    ebp
    316a:	00 00                	add    BYTE PTR [eax],al
    316c:	00 02                	add    BYTE PTR [edx],al
    316e:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    3174:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    317b:	02 08                	add    cl,BYTE PTR [eax]
    317d:	05 00 00 00 00       	add    eax,0x0
    3182:	02 01                	add    al,BYTE PTR [ecx]
    3184:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    3187:	00 00                	add    BYTE PTR [eax],al
    3189:	02 02                	add    al,BYTE PTR [edx]
    318b:	07                   	pop    es
    318c:	0e                   	push   cs
    318d:	00 00                	add    BYTE PTR [eax],al
    318f:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    3192:	00 00                	add    BYTE PTR [eax],al
    3194:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3197:	61                   	popa   
    3198:	00 00                	add    BYTE PTR [eax],al
    319a:	00 02                	add    BYTE PTR [edx],al
    319c:	04 07                	add    al,0x7
    319e:	3e 00 00             	add    BYTE PTR ds:[eax],al
    31a1:	00 02                	add    BYTE PTR [edx],al
    31a3:	08 07                	or     BYTE PTR [edi],al
    31a5:	34 00                	xor    al,0x0
    31a7:	00 00                	add    BYTE PTR [eax],al
    31a9:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    31b0:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    31b3:	9b                   	fwait
    31b4:	00 00                	add    BYTE PTR [eax],al
    31b6:	00 02                	add    BYTE PTR [edx],al
    31b8:	01 02                	add    DWORD PTR [edx],eax
    31ba:	95                   	xchg   ebp,eax
    31bb:	00 00                	add    BYTE PTR [eax],al
    31bd:	00 02                	add    BYTE PTR [edx],al
    31bf:	04 07                	add    al,0x7
    31c1:	39 00                	cmp    DWORD PTR [eax],eax
    31c3:	00 00                	add    BYTE PTR [eax],al
    31c5:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    31c8:	e1 00                	loope  31ca <sysEnter_Vector-0x12ce36>
    31ca:	00 00                	add    BYTE PTR [eax],al
    31cc:	05 04 25 00 00       	add    eax,0x2504
    31d1:	00 06                	add    BYTE PTR [esi],al
    31d3:	7d 0a                	jge    31df <sysEnter_Vector-0x12ce21>
    31d5:	00 00                	add    BYTE PTR [eax],al
    31d7:	01 33                	add    DWORD PTR [ebx],esi
    31d9:	92                   	xchg   edx,eax
    31da:	00 00                	add    BYTE PTR [eax],al
    31dc:	00 a8 1d 00 30 6e    	add    BYTE PTR [eax+0x6e30001d],ch
    31e2:	00 00                	add    BYTE PTR [eax],al
    31e4:	00 01                	add    BYTE PTR [ecx],al
    31e6:	9c                   	pushf  
    31e7:	e4 00                	in     al,0x0
    31e9:	00 00                	add    BYTE PTR [eax],al
    31eb:	07                   	pop    es
    31ec:	a2 0a 00 00 01       	mov    ds:0x100000a,al
    31f1:	33 92 00 00 00 02    	xor    edx,DWORD PTR [edx+0x2000000]
    31f7:	91                   	xchg   ecx,eax
    31f8:	00 07                	add    BYTE PTR [edi],al
    31fa:	9f                   	lahf   
    31fb:	0a 00                	or     al,BYTE PTR [eax]
    31fd:	00 01                	add    BYTE PTR [ecx],al
    31ff:	33 92 00 00 00 02    	xor    edx,DWORD PTR [edx+0x2000000]
    3205:	91                   	xchg   ecx,eax
    3206:	04 08                	add    al,0x8
    3208:	61                   	popa   
    3209:	00 01                	add    BYTE PTR [ecx],al
    320b:	35 92 00 00 00       	xor    eax,0x92
    3210:	01 56 08             	add    DWORD PTR [esi+0x8],edx
    3213:	62 00                	bound  eax,QWORD PTR [eax]
    3215:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
    321b:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
    321e:	09 92 0a 00 00 01    	or     DWORD PTR [edx+0x100000a],edx
    3224:	52                   	push   edx
    3225:	92                   	xchg   edx,eax
    3226:	00 00                	add    BYTE PTR [eax],al
    3228:	00 16                	add    BYTE PTR [esi],dl
    322a:	1e                   	push   ds
    322b:	00 30                	add    BYTE PTR [eax],dh
    322d:	1d 00 00 00 01       	sbb    eax,0x1000000
    3232:	9c                   	pushf  
    3233:	1a 01                	sbb    al,BYTE PTR [ecx]
    3235:	00 00                	add    BYTE PTR [eax],al
    3237:	07                   	pop    es
    3238:	a2 0a 00 00 01       	mov    ds:0x100000a,al
    323d:	52                   	push   edx
    323e:	92                   	xchg   edx,eax
    323f:	00 00                	add    BYTE PTR [eax],al
    3241:	00 02                	add    BYTE PTR [edx],al
    3243:	91                   	xchg   ecx,eax
    3244:	00 07                	add    BYTE PTR [edi],al
    3246:	9f                   	lahf   
    3247:	0a 00                	or     al,BYTE PTR [eax]
    3249:	00 01                	add    BYTE PTR [ecx],al
    324b:	52                   	push   edx
    324c:	92                   	xchg   edx,eax
    324d:	00 00                	add    BYTE PTR [eax],al
    324f:	00 02                	add    BYTE PTR [edx],al
    3251:	91                   	xchg   ecx,eax
    3252:	04 00                	add    al,0x0
    3254:	0a 25 00 00 00 2a    	or     ah,BYTE PTR ds:0x2a000000
    325a:	01 00                	add    DWORD PTR [eax],eax
    325c:	00 0b                	add    BYTE PTR [ebx],cl
    325e:	8b 00                	mov    eax,DWORD PTR [eax]
    3260:	00 00                	add    BYTE PTR [eax],al
    3262:	65 00 0c 99          	add    BYTE PTR gs:[ecx+ebx*4],cl
    3266:	0a 00                	or     al,BYTE PTR [eax]
    3268:	00 01                	add    BYTE PTR [ecx],al
    326a:	19 1a                	sbb    DWORD PTR [edx],ebx
    326c:	01 00                	add    DWORD PTR [eax],eax
    326e:	00 05 03 a0 43 00    	add    BYTE PTR ds:0x43a003,al
    3274:	30 0d 4b 00 00 00    	xor    BYTE PTR ds:0x4b,cl
    327a:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    327d:	00 00                	add    BYTE PTR [eax],al
    327f:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
    3285:	30 0d af 00 00 00    	xor    BYTE PTR ds:0xaf,cl
    328b:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
    3291:	05 03 00 45 00       	add    eax,0x450003
    3296:	30 0d 5b 01 00 00    	xor    BYTE PTR ds:0x15b,cl
    329c:	02 36                	add    dh,BYTE PTR [esi]
    329e:	56                   	push   esi
    329f:	00 00                	add    BYTE PTR [eax],al
    32a1:	00 05 03 f8 44 00    	add    BYTE PTR ds:0x44f803,al
    32a7:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
    32ad:	02 37                	add    dh,BYTE PTR [edi]
    32af:	56                   	push   esi
    32b0:	00 00                	add    BYTE PTR [eax],al
    32b2:	00 05 03 08 45 00    	add    BYTE PTR ds:0x450803,al
    32b8:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
    32be:	03 46 90             	add    eax,DWORD PTR [esi-0x70]
    32c1:	01 00                	add    DWORD PTR [eax],eax
    32c3:	00 05 03 04 45 00    	add    BYTE PTR ds:0x450403,al
    32c9:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
    32cf:	00 00                	add    BYTE PTR [eax],al
    32d1:	44                   	inc    esp
    32d2:	05 00 00 04 00       	add    eax,0x40000
    32d7:	db 12                	fist   DWORD PTR [edx]
    32d9:	00 00                	add    BYTE PTR [eax],al
    32db:	04 01                	add    al,0x1
    32dd:	f4                   	hlt    
    32de:	00 00                	add    BYTE PTR [eax],al
    32e0:	00 0c a9             	add    BYTE PTR [ecx+ebp*4],cl
    32e3:	0a 00                	or     al,BYTE PTR [eax]
    32e5:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    32e8:	00 00                	add    BYTE PTR [eax],al
    32ea:	34 1e                	xor    al,0x1e
    32ec:	00 30                	add    BYTE PTR [eax],dh
    32ee:	bb 0c 00 00 4d       	mov    ebx,0x4d00000c
    32f3:	18 00                	sbb    BYTE PTR [eax],al
    32f5:	00 02                	add    BYTE PTR [edx],al
    32f7:	07                   	pop    es
    32f8:	03 00                	add    eax,DWORD PTR [eax]
    32fa:	00 04 e0             	add    BYTE PTR [eax+eiz*8],al
    32fd:	00 00                	add    BYTE PTR [eax],al
    32ff:	00 06                	add    BYTE PTR [esi],al
    3301:	15 e0 00 00 00       	adc    eax,0xe0
    3306:	03 6c 03 00          	add    ebp,DWORD PTR [ebx+eax*1+0x0]
    330a:	00 00                	add    BYTE PTR [eax],al
    330c:	03 a4 03 00 00 01 03 	add    esp,DWORD PTR [ebx+eax*1+0x3010000]
    3313:	73 02                	jae    3317 <sysEnter_Vector-0x12cce9>
    3315:	00 00                	add    BYTE PTR [eax],al
    3317:	02 03                	add    al,BYTE PTR [ebx]
    3319:	f9                   	stc    
    331a:	02 00                	add    al,BYTE PTR [eax]
    331c:	00 03                	add    BYTE PTR [ebx],al
    331e:	03 53 02             	add    edx,DWORD PTR [ebx+0x2]
    3321:	00 00                	add    BYTE PTR [eax],al
    3323:	04 03                	add    al,0x3
    3325:	be 03 00 00 05       	mov    esi,0x5000003
    332a:	03 1d 03 00 00 06    	add    ebx,DWORD PTR ds:0x6000003
    3330:	03 66 02             	add    esp,DWORD PTR [esi+0x2]
    3333:	00 00                	add    BYTE PTR [eax],al
    3335:	07                   	pop    es
    3336:	03 f4                	add    esi,esp
    3338:	03 00                	add    eax,DWORD PTR [eax]
    333a:	00 4f 03             	add    BYTE PTR [edi+0x3],cl
    333d:	5f                   	pop    edi
    333e:	03 00                	add    eax,DWORD PTR [eax]
    3340:	00 59 03             	add    BYTE PTR [ecx+0x3],bl
    3343:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
    3346:	00 61 03             	add    BYTE PTR [ecx+0x3],ah
    3349:	e5 02                	in     eax,0x2
    334b:	00 00                	add    BYTE PTR [eax],al
    334d:	97                   	xchg   edi,eax
    334e:	04 7c                	add    al,0x7c
    3350:	03 00                	add    eax,DWORD PTR [eax]
    3352:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    3355:	04 52                	add    al,0x52
    3357:	03 00                	add    eax,DWORD PTR [eax]
    3359:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    335d:	e6 03                	out    0x3,al
    335f:	00 00                	add    BYTE PTR [eax],al
    3361:	65 01 04 c7          	add    DWORD PTR gs:[edi+eax*8],eax
    3365:	02 00                	add    al,BYTE PTR [eax]
    3367:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    336a:	04 1b                	add    al,0x1b
    336c:	04 00                	add    al,0x0
    336e:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    3371:	04 2a                	add    al,0x2a
    3373:	03 00                	add    eax,DWORD PTR [eax]
    3375:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    3378:	04 ac                	add    al,0xac
    337a:	02 00                	add    al,BYTE PTR [eax]
    337c:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    337f:	04 93                	add    al,0x93
    3381:	03 00                	add    eax,DWORD PTR [eax]
    3383:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    3386:	04 d5                	add    al,0xd5
    3388:	02 00                	add    al,BYTE PTR [eax]
    338a:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    338d:	04 cc                	add    al,0xcc
    338f:	03 00                	add    eax,DWORD PTR [eax]
    3391:	00 00                	add    BYTE PTR [eax],al
    3393:	03 04 37             	add    eax,DWORD PTR [edi+esi*1]
    3396:	03 00                	add    eax,DWORD PTR [eax]
    3398:	00 01                	add    BYTE PTR [ecx],al
    339a:	03 04 bb             	add    eax,DWORD PTR [ebx+edi*4]
    339d:	02 00                	add    al,BYTE PTR [eax]
    339f:	00 02                	add    BYTE PTR [edx],al
    33a1:	03 04 80             	add    eax,DWORD PTR [eax+eax*4]
    33a4:	02 00                	add    al,BYTE PTR [eax]
    33a6:	00 03                	add    BYTE PTR [ebx],al
    33a8:	03 04 90             	add    eax,DWORD PTR [eax+edx*4]
    33ab:	02 00                	add    al,BYTE PTR [eax]
    33ad:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    33b0:	00 05 04 07 3e 00    	add    BYTE PTR ds:0x3e0704,al
    33b6:	00 00                	add    BYTE PTR [eax],al
    33b8:	05 01 06 64 00       	add    eax,0x640601
    33bd:	00 00                	add    BYTE PTR [eax],al
    33bf:	05 01 06 5d 00       	add    eax,0x5d0601
    33c4:	00 00                	add    BYTE PTR [eax],al
    33c6:	05 02 05 ea 00       	add    eax,0xea0502
    33cb:	00 00                	add    BYTE PTR [eax],al
    33cd:	06                   	push   es
    33ce:	04 05                	add    al,0x5
    33d0:	69 6e 74 00 05 08 05 	imul   ebp,DWORD PTR [esi+0x74],0x5080500
    33d7:	00 00                	add    BYTE PTR [eax],al
    33d9:	00 00                	add    BYTE PTR [eax],al
    33db:	05 01 08 5b 00       	add    eax,0x5b0801
    33e0:	00 00                	add    BYTE PTR [eax],al
    33e2:	05 02 07 0e 00       	add    eax,0xe0702
    33e7:	00 00                	add    BYTE PTR [eax],al
    33e9:	07                   	pop    es
    33ea:	69 00 00 00 02 34    	imul   eax,DWORD PTR [eax],0x34020000
    33f0:	e0 00                	loopne 33f2 <sysEnter_Vector-0x12cc0e>
    33f2:	00 00                	add    BYTE PTR [eax],al
    33f4:	05 08 07 34 00       	add    eax,0x340708
    33f9:	00 00                	add    BYTE PTR [eax],al
    33fb:	05 04 05 05 00       	add    eax,0x50504
    3400:	00 00                	add    BYTE PTR [eax],al
    3402:	05 0c 04 9b 00       	add    eax,0x9b040c
    3407:	00 00                	add    BYTE PTR [eax],al
    3409:	07                   	pop    es
    340a:	4b                   	dec    ebx
    340b:	0b 00                	or     eax,DWORD PTR [eax]
    340d:	00 03                	add    BYTE PTR [ebx],al
    340f:	2a 2a                	sub    ch,BYTE PTR [edx]
    3411:	01 00                	add    DWORD PTR [eax],eax
    3413:	00 08                	add    BYTE PTR [eax],cl
    3415:	74 6d                	je     3484 <sysEnter_Vector-0x12cb7c>
    3417:	00 2c 03             	add    BYTE PTR [ebx+eax*1],ch
    341a:	2c d3                	sub    al,0xd3
    341c:	01 00                	add    DWORD PTR [eax],eax
    341e:	00 09                	add    BYTE PTR [ecx],cl
    3420:	8e 0b                	mov    cs,WORD PTR [ebx]
    3422:	00 00                	add    BYTE PTR [eax],al
    3424:	03 2e                	add    ebp,DWORD PTR [esi]
    3426:	fc                   	cld    
    3427:	00 00                	add    BYTE PTR [eax],al
    3429:	00 00                	add    BYTE PTR [eax],al
    342b:	09 2c 0b             	or     DWORD PTR [ebx+ecx*1],ebp
    342e:	00 00                	add    BYTE PTR [eax],al
    3430:	03 2f                	add    ebp,DWORD PTR [edi]
    3432:	fc                   	cld    
    3433:	00 00                	add    BYTE PTR [eax],al
    3435:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    3438:	be 0a 00 00 03       	mov    esi,0x300000a
    343d:	30 fc                	xor    ah,bh
    343f:	00 00                	add    BYTE PTR [eax],al
    3441:	00 08                	add    BYTE PTR [eax],cl
    3443:	09 86 0b 00 00 03    	or     DWORD PTR [esi+0x300000b],eax
    3449:	31 fc                	xor    esp,edi
    344b:	00 00                	add    BYTE PTR [eax],al
    344d:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    3450:	f6                   	(bad)  
    3451:	0a 00                	or     al,BYTE PTR [eax]
    3453:	00 03                	add    BYTE PTR [ebx],al
    3455:	32 fc                	xor    bh,ah
    3457:	00 00                	add    BYTE PTR [eax],al
    3459:	00 10                	add    BYTE PTR [eax],dl
    345b:	09 fd                	or     ebp,edi
    345d:	0a 00                	or     al,BYTE PTR [eax]
    345f:	00 03                	add    BYTE PTR [ebx],al
    3461:	33 fc                	xor    edi,esp
    3463:	00 00                	add    BYTE PTR [eax],al
    3465:	00 14 09             	add    BYTE PTR [ecx+ecx*1],dl
    3468:	78 0b                	js     3475 <sysEnter_Vector-0x12cb8b>
    346a:	00 00                	add    BYTE PTR [eax],al
    346c:	03 34 fc             	add    esi,DWORD PTR [esp+edi*8]
    346f:	00 00                	add    BYTE PTR [eax],al
    3471:	00 18                	add    BYTE PTR [eax],bl
    3473:	09 33                	or     DWORD PTR [ebx],esi
    3475:	0b 00                	or     eax,DWORD PTR [eax]
    3477:	00 03                	add    BYTE PTR [ebx],al
    3479:	35 fc 00 00 00       	xor    eax,0xfc
    347e:	1c 09                	sbb    al,0x9
    3480:	13 0b                	adc    ecx,DWORD PTR [ebx]
    3482:	00 00                	add    BYTE PTR [eax],al
    3484:	03 36                	add    esi,DWORD PTR [esi]
    3486:	fc                   	cld    
    3487:	00 00                	add    BYTE PTR [eax],al
    3489:	00 20                	add    BYTE PTR [eax],ah
    348b:	09 6e 0b             	or     DWORD PTR [esi+0xb],ebp
    348e:	00 00                	add    BYTE PTR [eax],al
    3490:	03 37                	add    esi,DWORD PTR [edi]
    3492:	2a 01                	sub    al,BYTE PTR [ecx]
    3494:	00 00                	add    BYTE PTR [eax],al
    3496:	24 09                	and    al,0x9
    3498:	95                   	xchg   ebp,eax
    3499:	0b 00                	or     eax,DWORD PTR [eax]
    349b:	00 03                	add    BYTE PTR [ebx],al
    349d:	38 d3                	cmp    bl,dl
    349f:	01 00                	add    DWORD PTR [eax],eax
    34a1:	00 28                	add    BYTE PTR [eax],ch
    34a3:	00 0a                	add    BYTE PTR [edx],cl
    34a5:	04 d9                	add    al,0xd9
    34a7:	01 00                	add    DWORD PTR [eax],eax
    34a9:	00 0b                	add    BYTE PTR [ebx],cl
    34ab:	e7 00                	out    0x0,eax
    34ad:	00 00                	add    BYTE PTR [eax],al
    34af:	05 01 02 95 00       	add    eax,0x950201
    34b4:	00 00                	add    BYTE PTR [eax],al
    34b6:	05 04 07 39 00       	add    eax,0x390704
    34bb:	00 00                	add    BYTE PTR [eax],al
    34bd:	05 04 07 e1 00       	add    eax,0xe10704
    34c2:	00 00                	add    BYTE PTR [eax],al
    34c4:	0a 04 e7             	or     al,BYTE PTR [edi+eiz*8]
    34c7:	00 00                	add    BYTE PTR [eax],al
    34c9:	00 0c c6             	add    BYTE PTR [esi+eax*8],cl
    34cc:	0a 00                	or     al,BYTE PTR [eax]
    34ce:	00 01                	add    BYTE PTR [ecx],al
    34d0:	16                   	push   ss
    34d1:	38 01                	cmp    BYTE PTR [ecx],al
    34d3:	00 00                	add    BYTE PTR [eax],al
    34d5:	34 1e                	xor    al,0x1e
    34d7:	00 30                	add    BYTE PTR [eax],dh
    34d9:	44                   	inc    esp
    34da:	00 00                	add    BYTE PTR [eax],al
    34dc:	00 01                	add    BYTE PTR [ecx],al
    34de:	9c                   	pushf  
    34df:	21 02                	and    DWORD PTR [edx],eax
    34e1:	00 00                	add    BYTE PTR [eax],al
    34e3:	0d 7a 04 00 00       	or     eax,0x47a
    34e8:	01 18                	add    DWORD PTR [eax],ebx
    34ea:	18 01                	sbb    BYTE PTR [ecx],al
    34ec:	00 00                	add    BYTE PTR [eax],al
    34ee:	02 91 6c 00 0e 22    	add    dl,BYTE PTR [ecx+0x220e006c]
    34f4:	0b 00                	or     eax,DWORD PTR [eax]
    34f6:	00 01                	add    BYTE PTR [ecx],al
    34f8:	1e                   	push   ds
    34f9:	8f 02                	pop    DWORD PTR [edx]
    34fb:	00 00                	add    BYTE PTR [eax],al
    34fd:	78 1e                	js     351d <sysEnter_Vector-0x12cae3>
    34ff:	00 30                	add    BYTE PTR [eax],dh
    3501:	19 03                	sbb    DWORD PTR [ebx],eax
    3503:	00 00                	add    BYTE PTR [eax],al
    3505:	01 9c 8f 02 00 00 0f 	add    DWORD PTR [edi+ecx*4+0xf000002],ebx
    350c:	9d                   	popf   
    350d:	0b 00                	or     eax,DWORD PTR [eax]
    350f:	00 01                	add    BYTE PTR [ecx],al
    3511:	1e                   	push   ds
    3512:	95                   	xchg   ebp,eax
    3513:	02 00                	add    al,BYTE PTR [eax]
    3515:	00 02                	add    BYTE PTR [edx],al
    3517:	91                   	xchg   ecx,eax
    3518:	00 0f                	add    BYTE PTR [edi],cl
    351a:	45                   	inc    ebp
    351b:	0b 00                	or     eax,DWORD PTR [eax]
    351d:	00 01                	add    BYTE PTR [ecx],al
    351f:	1e                   	push   ds
    3520:	8f 02                	pop    DWORD PTR [edx]
    3522:	00 00                	add    BYTE PTR [eax],al
    3524:	02 91 04 0d 69 0b    	add    dl,BYTE PTR [ecx+0xb690d04]
    352a:	00 00                	add    BYTE PTR [eax],al
    352c:	01 20                	add    DWORD PTR [eax],esp
    352e:	38 01                	cmp    BYTE PTR [ecx],al
    3530:	00 00                	add    BYTE PTR [eax],al
    3532:	02 91 68 0d 5e 0b    	add    dl,BYTE PTR [ecx+0xb5e0d68]
    3538:	00 00                	add    BYTE PTR [eax],al
    353a:	01 21                	add    DWORD PTR [ecx],esp
    353c:	e5 01                	in     eax,0x1
    353e:	00 00                	add    BYTE PTR [eax],al
    3540:	02 91 64 0d 1c 0b    	add    dl,BYTE PTR [ecx+0xb1c0d64]
    3546:	00 00                	add    BYTE PTR [eax],al
    3548:	01 21                	add    DWORD PTR [ecx],esp
    354a:	e5 01                	in     eax,0x1
    354c:	00 00                	add    BYTE PTR [eax],al
    354e:	02 91 70 0d 00 0b    	add    dl,BYTE PTR [ecx+0xb000d70]
    3554:	00 00                	add    BYTE PTR [eax],al
    3556:	01 22                	add    DWORD PTR [edx],esp
    3558:	fc                   	cld    
    3559:	00 00                	add    BYTE PTR [eax],al
    355b:	00 02                	add    BYTE PTR [edx],al
    355d:	91                   	xchg   ecx,eax
    355e:	6c                   	ins    BYTE PTR es:[edi],dx
    355f:	00 0a                	add    BYTE PTR [edx],cl
    3561:	04 43                	add    al,0x43
    3563:	01 00                	add    DWORD PTR [eax],eax
    3565:	00 0a                	add    BYTE PTR [edx],cl
    3567:	04 9b                	add    al,0x9b
    3569:	02 00                	add    al,BYTE PTR [eax]
    356b:	00 0b                	add    BYTE PTR [ebx],cl
    356d:	38 01                	cmp    BYTE PTR [ecx],al
    356f:	00 00                	add    BYTE PTR [eax],al
    3571:	10 e1                	adc    cl,ah
    3573:	0a 00                	or     al,BYTE PTR [eax]
    3575:	00 01                	add    BYTE PTR [ecx],al
    3577:	3b 8f 02 00 00 91    	cmp    ecx,DWORD PTR [edi-0x6efffffe]
    357d:	21 00                	and    DWORD PTR [eax],eax
    357f:	30 1d 00 00 00 01    	xor    BYTE PTR ds:0x1000000,bl
    3585:	9c                   	pushf  
    3586:	d6                   	(bad)  
    3587:	02 00                	add    al,BYTE PTR [eax]
    3589:	00 0f                	add    BYTE PTR [edi],cl
    358b:	9d                   	popf   
    358c:	0b 00                	or     eax,DWORD PTR [eax]
    358e:	00 01                	add    BYTE PTR [ecx],al
    3590:	3b 95 02 00 00 02    	cmp    edx,DWORD PTR [ebp+0x2000002]
    3596:	91                   	xchg   ecx,eax
    3597:	00 0f                	add    BYTE PTR [edi],cl
    3599:	45                   	inc    ebp
    359a:	0b 00                	or     eax,DWORD PTR [eax]
    359c:	00 01                	add    BYTE PTR [ecx],al
    359e:	3b 8f 02 00 00 02    	cmp    ecx,DWORD PTR [edi+0x2000002]
    35a4:	91                   	xchg   ecx,eax
    35a5:	04 00                	add    al,0x0
    35a7:	10 b4 0a 00 00 01 40 	adc    BYTE PTR [edx+ecx*1+0x40010000],dh
    35ae:	8f 02                	pop    DWORD PTR [edx]
    35b0:	00 00                	add    BYTE PTR [eax],al
    35b2:	ae                   	scas   al,BYTE PTR es:[edi]
    35b3:	21 00                	and    DWORD PTR [eax],eax
    35b5:	30 41 00             	xor    BYTE PTR [ecx+0x0],al
    35b8:	00 00                	add    BYTE PTR [eax],al
    35ba:	01 9c 18 03 00 00 0f 	add    DWORD PTR [eax+ebx*1+0xf000003],ebx
    35c1:	9d                   	popf   
    35c2:	0b 00                	or     eax,DWORD PTR [eax]
    35c4:	00 01                	add    BYTE PTR [ecx],al
    35c6:	40                   	inc    eax
    35c7:	95                   	xchg   ebp,eax
    35c8:	02 00                	add    al,BYTE PTR [eax]
    35ca:	00 02                	add    BYTE PTR [edx],al
    35cc:	91                   	xchg   ecx,eax
    35cd:	00 11                	add    BYTE PTR [ecx],dl
    35cf:	74 00                	je     35d1 <sysEnter_Vector-0x12ca2f>
    35d1:	01 41 38             	add    DWORD PTR [ecx+0x38],eax
    35d4:	01 00                	add    DWORD PTR [eax],eax
    35d6:	00 02                	add    BYTE PTR [edx],al
    35d8:	91                   	xchg   ecx,eax
    35d9:	6c                   	ins    BYTE PTR es:[edi],dx
    35da:	0d 45 0b 00 00       	or     eax,0xb45
    35df:	01 42 43             	add    DWORD PTR [edx+0x43],eax
    35e2:	01 00                	add    DWORD PTR [eax],eax
    35e4:	00 02                	add    BYTE PTR [edx],al
    35e6:	91                   	xchg   ecx,eax
    35e7:	40                   	inc    eax
    35e8:	00 10                	add    BYTE PTR [eax],dl
    35ea:	a3 0b 00 00 01       	mov    ds:0x100000b,eax
    35ef:	48                   	dec    eax
    35f0:	8f 02                	pop    DWORD PTR [edx]
    35f2:	00 00                	add    BYTE PTR [eax],al
    35f4:	ef                   	out    dx,eax
    35f5:	21 00                	and    DWORD PTR [eax],eax
    35f7:	30 35 00 00 00 01    	xor    BYTE PTR ds:0x1000000,dh
    35fd:	9c                   	pushf  
    35fe:	5a                   	pop    edx
    35ff:	03 00                	add    eax,DWORD PTR [eax]
    3601:	00 0f                	add    BYTE PTR [edi],cl
    3603:	9d                   	popf   
    3604:	0b 00                	or     eax,DWORD PTR [eax]
    3606:	00 01                	add    BYTE PTR [ecx],al
    3608:	48                   	dec    eax
    3609:	95                   	xchg   ebp,eax
    360a:	02 00                	add    al,BYTE PTR [eax]
    360c:	00 02                	add    BYTE PTR [edx],al
    360e:	91                   	xchg   ecx,eax
    360f:	00 0f                	add    BYTE PTR [edi],cl
    3611:	45                   	inc    ebp
    3612:	0b 00                	or     eax,DWORD PTR [eax]
    3614:	00 01                	add    BYTE PTR [ecx],al
    3616:	48                   	dec    eax
    3617:	8f 02                	pop    DWORD PTR [edx]
    3619:	00 00                	add    BYTE PTR [eax],al
    361b:	02 91 04 11 74 00    	add    dl,BYTE PTR [ecx+0x741104]
    3621:	01 4a 38             	add    DWORD PTR [edx+0x38],ecx
    3624:	01 00                	add    DWORD PTR [eax],eax
    3626:	00 02                	add    BYTE PTR [edx],al
    3628:	91                   	xchg   ecx,eax
    3629:	74 00                	je     362b <sysEnter_Vector-0x12c9d5>
    362b:	10 52 0b             	adc    BYTE PTR [edx+0xb],dl
    362e:	00 00                	add    BYTE PTR [eax],al
    3630:	01 50 8f             	add    DWORD PTR [eax-0x71],edx
    3633:	02 00                	add    al,BYTE PTR [eax]
    3635:	00 24 22             	add    BYTE PTR [edx+eiz*1],ah
    3638:	00 30                	add    BYTE PTR [eax],dh
    363a:	1d 00 00 00 01       	sbb    eax,0x1000000
    363f:	9c                   	pushf  
    3640:	90                   	nop
    3641:	03 00                	add    eax,DWORD PTR [eax]
    3643:	00 0f                	add    BYTE PTR [edi],cl
    3645:	9d                   	popf   
    3646:	0b 00                	or     eax,DWORD PTR [eax]
    3648:	00 01                	add    BYTE PTR [ecx],al
    364a:	50                   	push   eax
    364b:	95                   	xchg   ebp,eax
    364c:	02 00                	add    al,BYTE PTR [eax]
    364e:	00 02                	add    BYTE PTR [edx],al
    3650:	91                   	xchg   ecx,eax
    3651:	00 0f                	add    BYTE PTR [edi],cl
    3653:	45                   	inc    ebp
    3654:	0b 00                	or     eax,DWORD PTR [eax]
    3656:	00 01                	add    BYTE PTR [ecx],al
    3658:	50                   	push   eax
    3659:	8f 02                	pop    DWORD PTR [edx]
    365b:	00 00                	add    BYTE PTR [eax],al
    365d:	02 91 04 00 0e 67    	add    dl,BYTE PTR [ecx+0x670e0004]
    3663:	0b 00                	or     eax,DWORD PTR [eax]
    3665:	00 01                	add    BYTE PTR [ecx],al
    3667:	54                   	push   esp
    3668:	38 01                	cmp    BYTE PTR [ecx],al
    366a:	00 00                	add    BYTE PTR [eax],al
    366c:	41                   	inc    ecx
    366d:	22 00                	and    al,BYTE PTR [eax]
    366f:	30 41 08             	xor    BYTE PTR [ecx+0x8],al
    3672:	00 00                	add    BYTE PTR [eax],al
    3674:	01 9c 28 04 00 00 0f 	add    DWORD PTR [eax+ebp*1+0xf000004],ebx
    367b:	45                   	inc    ebp
    367c:	0b 00                	or     eax,DWORD PTR [eax]
    367e:	00 01                	add    BYTE PTR [ecx],al
    3680:	54                   	push   esp
    3681:	8f 02                	pop    DWORD PTR [edx]
    3683:	00 00                	add    BYTE PTR [eax],al
    3685:	02 91 00 11 64 61    	add    dl,BYTE PTR [ecx+0x61641100]
    368b:	79 00                	jns    368d <sysEnter_Vector-0x12c973>
    368d:	01 55 2a             	add    DWORD PTR [ebp+0x2a],edx
    3690:	01 00                	add    DWORD PTR [eax],eax
    3692:	00 02                	add    BYTE PTR [edx],al
    3694:	91                   	xchg   ecx,eax
    3695:	68 0d 00 0b 00       	push   0xb000d
    369a:	00 01                	add    BYTE PTR [ecx],al
    369c:	55                   	push   ebp
    369d:	2a 01                	sub    al,BYTE PTR [ecx]
    369f:	00 00                	add    BYTE PTR [eax],al
    36a1:	02 91 54 0d fd 0a    	add    dl,BYTE PTR [ecx+0xafd0d54]
    36a7:	00 00                	add    BYTE PTR [eax],al
    36a9:	01 56 fc             	add    DWORD PTR [esi-0x4],edx
    36ac:	00 00                	add    BYTE PTR [eax],al
    36ae:	00 02                	add    BYTE PTR [edx],al
    36b0:	91                   	xchg   ecx,eax
    36b1:	4c                   	dec    esp
    36b2:	0d 36 0b 00 00       	or     eax,0xb36
    36b7:	01 57 fc             	add    DWORD PTR [edi-0x4],edx
    36ba:	00 00                	add    BYTE PTR [eax],al
    36bc:	00 02                	add    BYTE PTR [edx],al
    36be:	91                   	xchg   ecx,eax
    36bf:	64                   	fs
    36c0:	0d 05 0b 00 00       	or     eax,0xb05
    36c5:	01 57 fc             	add    DWORD PTR [edi-0x4],edx
    36c8:	00 00                	add    BYTE PTR [eax],al
    36ca:	00 02                	add    BYTE PTR [edx],al
    36cc:	91                   	xchg   ecx,eax
    36cd:	60                   	pusha  
    36ce:	0d a2 05 00 00       	or     eax,0x5a2
    36d3:	01 58 2a             	add    DWORD PTR [eax+0x2a],ebx
    36d6:	01 00                	add    DWORD PTR [eax],eax
    36d8:	00 02                	add    BYTE PTR [edx],al
    36da:	91                   	xchg   ecx,eax
    36db:	50                   	push   eax
    36dc:	0d b9 0b 00 00       	or     eax,0xbb9
    36e1:	01 59 fc             	add    DWORD PTR [ecx-0x4],ebx
    36e4:	00 00                	add    BYTE PTR [eax],al
    36e6:	00 02                	add    BYTE PTR [edx],al
    36e8:	91                   	xchg   ecx,eax
    36e9:	5c                   	pop    esp
    36ea:	11 64 73 74          	adc    DWORD PTR [ebx+esi*2+0x74],esp
    36ee:	00 01                	add    BYTE PTR [ecx],al
    36f0:	5a                   	pop    edx
    36f1:	2a 01                	sub    al,BYTE PTR [ecx]
    36f3:	00 00                	add    BYTE PTR [eax],al
    36f5:	02 91 58 00 10 0b    	add    dl,BYTE PTR [ecx+0xb100058]
    36fb:	0b 00                	or     eax,DWORD PTR [eax]
    36fd:	00 01                	add    BYTE PTR [ecx],al
    36ff:	bf 8f 02 00 00       	mov    edi,0x28f
    3704:	82                   	(bad)  
    3705:	2a 00                	sub    al,BYTE PTR [eax]
    3707:	30 6d 00             	xor    BYTE PTR [ebp+0x0],ch
    370a:	00 00                	add    BYTE PTR [eax],al
    370c:	01 9c 6c 04 00 00 0f 	add    DWORD PTR [esp+ebp*2+0xf000004],ebx
    3713:	69 0b 00 00 01 bf    	imul   ecx,DWORD PTR [ebx],0xbf010000
    3719:	8f 02                	pop    DWORD PTR [edx]
    371b:	00 00                	add    BYTE PTR [eax],al
    371d:	02 91 00 0f 3b 0b    	add    dl,BYTE PTR [ecx+0xb3b0f00]
    3723:	00 00                	add    BYTE PTR [eax],al
    3725:	01 bf de 01 00 00    	add    DWORD PTR [edi+0x1de],edi
    372b:	02 91 5c 0d c9 0a    	add    dl,BYTE PTR [ecx+0xac90d5c]
    3731:	00 00                	add    BYTE PTR [eax],al
    3733:	01 c1                	add    ecx,eax
    3735:	38 01                	cmp    BYTE PTR [ecx],al
    3737:	00 00                	add    BYTE PTR [eax],al
    3739:	02 91 6c 00 12 4b    	add    dl,BYTE PTR [ecx+0x4b12006c]
    373f:	00 00                	add    BYTE PTR [eax],al
    3741:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3744:	18 01                	sbb    BYTE PTR [ecx],al
    3746:	00 00                	add    BYTE PTR [eax],al
    3748:	05 03 fc 44 00       	add    eax,0x44fc03
    374d:	30 12                	xor    BYTE PTR [edx],dl
    374f:	af                   	scas   eax,DWORD PTR es:[edi]
    3750:	00 00                	add    BYTE PTR [eax],al
    3752:	00 04 35 18 01 00 00 	add    BYTE PTR [esi*1+0x118],al
    3759:	05 03 00 45 00       	add    eax,0x450003
    375e:	30 12                	xor    BYTE PTR [edx],dl
    3760:	5b                   	pop    ebx
    3761:	01 00                	add    DWORD PTR [eax],eax
    3763:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    3766:	18 01                	sbb    BYTE PTR [ecx],al
    3768:	00 00                	add    BYTE PTR [eax],al
    376a:	05 03 f8 44 00       	add    eax,0x44f803
    376f:	30 12                	xor    BYTE PTR [edx],dl
    3771:	54                   	push   esp
    3772:	00 00                	add    BYTE PTR [eax],al
    3774:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    3777:	18 01                	sbb    BYTE PTR [ecx],al
    3779:	00 00                	add    BYTE PTR [eax],al
    377b:	05 03 08 45 00       	add    eax,0x450803
    3780:	30 12                	xor    BYTE PTR [edx],dl
    3782:	28 00                	sub    BYTE PTR [eax],al
    3784:	00 00                	add    BYTE PTR [eax],al
    3786:	05 46 c1 04 00       	add    eax,0x4c146
    378b:	00 05 03 04 45 00    	add    BYTE PTR ds:0x450403,al
    3791:	30 0a                	xor    BYTE PTR [edx],cl
    3793:	04 f3                	add    al,0xf3
    3795:	01 00                	add    DWORD PTR [eax],eax
    3797:	00 12                	add    BYTE PTR [edx],dl
    3799:	cf                   	iret   
    379a:	0a 00                	or     al,BYTE PTR [eax]
    379c:	00 01                	add    BYTE PTR [ecx],al
    379e:	0c fc                	or     al,0xfc
    37a0:	00 00                	add    BYTE PTR [eax],al
    37a2:	00 05 03 08 44 00    	add    BYTE PTR ds:0x440803,al
    37a8:	30 12                	xor    BYTE PTR [edx],dl
    37aa:	b0 0b                	mov    al,0xb
    37ac:	00 00                	add    BYTE PTR [eax],al
    37ae:	01 0d 2a 01 00 00    	add    DWORD PTR ds:0x12a,ecx
    37b4:	05 03 2c 45 00       	add    eax,0x452c03
    37b9:	30 13                	xor    BYTE PTR [ebx],dl
    37bb:	f3 01 00             	repz add DWORD PTR [eax],eax
    37be:	00 f9                	add    cl,bh
    37c0:	04 00                	add    al,0x0
    37c2:	00 14 ec             	add    BYTE PTR [esp+ebp*8],dl
    37c5:	01 00                	add    DWORD PTR [eax],eax
    37c7:	00 01                	add    BYTE PTR [ecx],al
    37c9:	00 12                	add    BYTE PTR [edx],dl
    37cb:	d9 0a                	(bad)  [edx]
    37cd:	00 00                	add    BYTE PTR [eax],al
    37cf:	01 0e                	add    DWORD PTR [esi],ecx
    37d1:	e9 04 00 00 05       	jmp    50037da <sysEnter_Vector+0x4ed37da>
    37d6:	03 f0                	add    esi,eax
    37d8:	44                   	inc    esp
    37d9:	00 30                	add    BYTE PTR [eax],dh
    37db:	12 ea                	adc    ch,dl
    37dd:	0a 00                	or     al,BYTE PTR [eax]
    37df:	00 01                	add    BYTE PTR [ecx],al
    37e1:	0f fc 00             	paddb  mm0,QWORD PTR [eax]
    37e4:	00 00                	add    BYTE PTR [eax],al
    37e6:	05 03 30 45 00       	add    eax,0x453003
    37eb:	30 13                	xor    BYTE PTR [ebx],dl
    37ed:	fc                   	cld    
    37ee:	00 00                	add    BYTE PTR [eax],al
    37f0:	00 31                	add    BYTE PTR [ecx],dh
    37f2:	05 00 00 14 ec       	add    eax,0xec140000
    37f7:	01 00                	add    DWORD PTR [eax],eax
    37f9:	00 01                	add    BYTE PTR [ecx],al
    37fb:	14 ec                	adc    al,0xec
    37fd:	01 00                	add    DWORD PTR [eax],eax
    37ff:	00 0b                	add    BYTE PTR [ebx],cl
    3801:	00 12                	add    BYTE PTR [edx],dl
    3803:	80 0b 00             	or     BYTE PTR [ebx],0x0
    3806:	00 01                	add    BYTE PTR [ecx],al
    3808:	11 42 05             	adc    DWORD PTR [edx+0x5],eax
    380b:	00 00                	add    BYTE PTR [eax],al
    380d:	05 03 20 42 00       	add    eax,0x422003
    3812:	30 0b                	xor    BYTE PTR [ebx],cl
    3814:	1b                   	.byte 0x1b
    3815:	05                   	.byte 0x5
    3816:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	01 11                	add    DWORD PTR [ecx],edx
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
       b:	11 01                	adc    DWORD PTR [ecx],eax
       d:	12 06                	adc    al,BYTE PTR [esi]
       f:	10 17                	adc    BYTE PTR [edi],dl
      11:	00 00                	add    BYTE PTR [eax],al
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      1b:	0e                   	push   cs
      1c:	00 00                	add    BYTE PTR [eax],al
      1e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      26:	08 00                	or     BYTE PTR [eax],al
      28:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      2b:	00 03                	add    BYTE PTR [ebx],al
      2d:	0e                   	push   cs
      2e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      30:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      32:	49                   	dec    ecx
      33:	13 00                	adc    eax,DWORD PTR [eax]
      35:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      3b:	49                   	dec    ecx
      3c:	13 00                	adc    eax,DWORD PTR [eax]
      3e:	00 06                	add    BYTE PTR [esi],al
      40:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
      44:	00 00                	add    BYTE PTR [eax],al
      46:	07                   	pop    es
      47:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      4a:	19 03                	sbb    DWORD PTR [ebx],eax
      4c:	0e                   	push   cs
      4d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      4f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      51:	27                   	daa    
      52:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      55:	11 01                	adc    DWORD PTR [ecx],eax
      57:	12 06                	adc    al,BYTE PTR [esi]
      59:	40                   	inc    eax
      5a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      60:	00 00                	add    BYTE PTR [eax],al
      62:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
      68:	0b 3b                	or     edi,DWORD PTR [ebx]
      6a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      6d:	02 18                	add    bl,BYTE PTR [eax]
      6f:	00 00                	add    BYTE PTR [eax],al
      71:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
      74:	03 0e                	add    ecx,DWORD PTR [esi]
      76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      7a:	49                   	dec    ecx
      7b:	13 3f                	adc    edi,DWORD PTR [edi]
      7d:	19 02                	sbb    DWORD PTR [edx],eax
      7f:	18 00                	sbb    BYTE PTR [eax],al
      81:	00 00                	add    BYTE PTR [eax],al
      83:	01 11                	add    DWORD PTR [ecx],edx
      85:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      8b:	0e                   	push   cs
      8c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      8e:	11 01                	adc    DWORD PTR [ecx],eax
      90:	12 06                	adc    al,BYTE PTR [esi]
      92:	10 17                	adc    BYTE PTR [edi],dl
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      99:	0b 0b                	or     ecx,DWORD PTR [ebx]
      9b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      9e:	0e                   	push   cs
      9f:	00 00                	add    BYTE PTR [eax],al
      a1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      a4:	0b 0b                	or     ecx,DWORD PTR [ebx]
      a6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      a9:	08 00                	or     BYTE PTR [eax],al
      ab:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      ae:	00 03                	add    BYTE PTR [ebx],al
      b0:	0e                   	push   cs
      b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      b5:	49                   	dec    ecx
      b6:	13 00                	adc    eax,DWORD PTR [eax]
      b8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      be:	49                   	dec    ecx
      bf:	13 00                	adc    eax,DWORD PTR [eax]
      c1:	00 06                	add    BYTE PTR [esi],al
      c3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      c6:	19 03                	sbb    DWORD PTR [ebx],eax
      c8:	0e                   	push   cs
      c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      cd:	27                   	daa    
      ce:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      d1:	11 01                	adc    DWORD PTR [ecx],eax
      d3:	12 06                	adc    al,BYTE PTR [esi]
      d5:	40                   	inc    eax
      d6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      dc:	00 00                	add    BYTE PTR [eax],al
      de:	07                   	pop    es
      df:	05 00 03 0e 3a       	add    eax,0x3a0e0300
      e4:	0b 3b                	or     edi,DWORD PTR [ebx]
      e6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      e9:	02 18                	add    bl,BYTE PTR [eax]
      eb:	00 00                	add    BYTE PTR [eax],al
      ed:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
      f0:	03 08                	add    ecx,DWORD PTR [eax]
      f2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      f4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      f6:	49                   	dec    ecx
      f7:	13 02                	adc    eax,DWORD PTR [edx]
      f9:	18 00                	sbb    BYTE PTR [eax],al
      fb:	00 09                	add    BYTE PTR [ecx],cl
      fd:	34 00                	xor    al,0x0
      ff:	03 0e                	add    ecx,DWORD PTR [esi]
     101:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     103:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     105:	49                   	dec    ecx
     106:	13 3f                	adc    edi,DWORD PTR [edi]
     108:	19 02                	sbb    DWORD PTR [edx],eax
     10a:	18 00                	sbb    BYTE PTR [eax],al
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	01 11                	add    DWORD PTR [ecx],edx
     110:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     116:	0e                   	push   cs
     117:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     119:	11 01                	adc    DWORD PTR [ecx],eax
     11b:	12 06                	adc    al,BYTE PTR [esi]
     11d:	10 17                	adc    BYTE PTR [edi],dl
     11f:	00 00                	add    BYTE PTR [eax],al
     121:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     124:	0b 0b                	or     ecx,DWORD PTR [ebx]
     126:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     129:	0e                   	push   cs
     12a:	00 00                	add    BYTE PTR [eax],al
     12c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     12f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     131:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     134:	08 00                	or     BYTE PTR [eax],al
     136:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     139:	00 03                	add    BYTE PTR [ebx],al
     13b:	0e                   	push   cs
     13c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     13e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     140:	49                   	dec    ecx
     141:	13 00                	adc    eax,DWORD PTR [eax]
     143:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     149:	49                   	dec    ecx
     14a:	13 00                	adc    eax,DWORD PTR [eax]
     14c:	00 06                	add    BYTE PTR [esi],al
     14e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     151:	19 03                	sbb    DWORD PTR [ebx],eax
     153:	0e                   	push   cs
     154:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     156:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     158:	27                   	daa    
     159:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     15c:	11 01                	adc    DWORD PTR [ecx],eax
     15e:	12 06                	adc    al,BYTE PTR [esi]
     160:	40                   	inc    eax
     161:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     167:	00 00                	add    BYTE PTR [eax],al
     169:	07                   	pop    es
     16a:	05 00 03 08 3a       	add    eax,0x3a080300
     16f:	0b 3b                	or     edi,DWORD PTR [ebx]
     171:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     174:	02 18                	add    bl,BYTE PTR [eax]
     176:	00 00                	add    BYTE PTR [eax],al
     178:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     17e:	0b 3b                	or     edi,DWORD PTR [ebx]
     180:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     183:	02 18                	add    bl,BYTE PTR [eax]
     185:	00 00                	add    BYTE PTR [eax],al
     187:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     18a:	03 0e                	add    ecx,DWORD PTR [esi]
     18c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     18e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     190:	49                   	dec    ecx
     191:	13 02                	adc    eax,DWORD PTR [edx]
     193:	18 00                	sbb    BYTE PTR [eax],al
     195:	00 0a                	add    BYTE PTR [edx],cl
     197:	34 00                	xor    al,0x0
     199:	03 08                	add    ecx,DWORD PTR [eax]
     19b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     19d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     19f:	49                   	dec    ecx
     1a0:	13 02                	adc    eax,DWORD PTR [edx]
     1a2:	18 00                	sbb    BYTE PTR [eax],al
     1a4:	00 0b                	add    BYTE PTR [ebx],cl
     1a6:	34 00                	xor    al,0x0
     1a8:	03 0e                	add    ecx,DWORD PTR [esi]
     1aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1ae:	49                   	dec    ecx
     1af:	13 3f                	adc    edi,DWORD PTR [edi]
     1b1:	19 02                	sbb    DWORD PTR [edx],eax
     1b3:	18 00                	sbb    BYTE PTR [eax],al
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	01 11                	add    DWORD PTR [ecx],edx
     1b9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     1bf:	0e                   	push   cs
     1c0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     1c2:	11 01                	adc    DWORD PTR [ecx],eax
     1c4:	12 06                	adc    al,BYTE PTR [esi]
     1c6:	10 17                	adc    BYTE PTR [edi],dl
     1c8:	00 00                	add    BYTE PTR [eax],al
     1ca:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     1cd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1cf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1d2:	0e                   	push   cs
     1d3:	00 00                	add    BYTE PTR [eax],al
     1d5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     1d8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1da:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1dd:	08 00                	or     BYTE PTR [eax],al
     1df:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     1e2:	00 03                	add    BYTE PTR [ebx],al
     1e4:	0e                   	push   cs
     1e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1e9:	49                   	dec    ecx
     1ea:	13 00                	adc    eax,DWORD PTR [eax]
     1ec:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     1f2:	49                   	dec    ecx
     1f3:	13 00                	adc    eax,DWORD PTR [eax]
     1f5:	00 06                	add    BYTE PTR [esi],al
     1f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     1fa:	19 03                	sbb    DWORD PTR [ebx],eax
     1fc:	0e                   	push   cs
     1fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     201:	27                   	daa    
     202:	19 11                	sbb    DWORD PTR [ecx],edx
     204:	01 12                	add    DWORD PTR [edx],edx
     206:	06                   	push   es
     207:	40                   	inc    eax
     208:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     20e:	00 00                	add    BYTE PTR [eax],al
     210:	07                   	pop    es
     211:	05 00 03 08 3a       	add    eax,0x3a080300
     216:	0b 3b                	or     edi,DWORD PTR [ebx]
     218:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     21b:	02 18                	add    bl,BYTE PTR [eax]
     21d:	00 00                	add    BYTE PTR [eax],al
     21f:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     222:	03 08                	add    ecx,DWORD PTR [eax]
     224:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     226:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     228:	49                   	dec    ecx
     229:	13 02                	adc    eax,DWORD PTR [edx]
     22b:	18 00                	sbb    BYTE PTR [eax],al
     22d:	00 09                	add    BYTE PTR [ecx],cl
     22f:	34 00                	xor    al,0x0
     231:	03 0e                	add    ecx,DWORD PTR [esi]
     233:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     235:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     237:	49                   	dec    ecx
     238:	13 02                	adc    eax,DWORD PTR [edx]
     23a:	18 00                	sbb    BYTE PTR [eax],al
     23c:	00 0a                	add    BYTE PTR [edx],cl
     23e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     241:	19 03                	sbb    DWORD PTR [ebx],eax
     243:	0e                   	push   cs
     244:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     246:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     248:	27                   	daa    
     249:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     24c:	11 01                	adc    DWORD PTR [ecx],eax
     24e:	12 06                	adc    al,BYTE PTR [esi]
     250:	40                   	inc    eax
     251:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     257:	00 00                	add    BYTE PTR [eax],al
     259:	0b 0b                	or     ecx,DWORD PTR [ebx]
     25b:	01 11                	add    DWORD PTR [ecx],edx
     25d:	01 12                	add    DWORD PTR [edx],edx
     25f:	06                   	push   es
     260:	00 00                	add    BYTE PTR [eax],al
     262:	0c 34                	or     al,0x34
     264:	00 03                	add    BYTE PTR [ebx],al
     266:	0e                   	push   cs
     267:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     269:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     26b:	49                   	dec    ecx
     26c:	13 3f                	adc    edi,DWORD PTR [edi]
     26e:	19 02                	sbb    DWORD PTR [edx],eax
     270:	18 00                	sbb    BYTE PTR [eax],al
     272:	00 00                	add    BYTE PTR [eax],al
     274:	01 11                	add    DWORD PTR [ecx],edx
     276:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     27c:	0e                   	push   cs
     27d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     27f:	11 01                	adc    DWORD PTR [ecx],eax
     281:	12 06                	adc    al,BYTE PTR [esi]
     283:	10 17                	adc    BYTE PTR [edi],dl
     285:	00 00                	add    BYTE PTR [eax],al
     287:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     28a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     28c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     28f:	0e                   	push   cs
     290:	00 00                	add    BYTE PTR [eax],al
     292:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     295:	0b 0b                	or     ecx,DWORD PTR [ebx]
     297:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     29a:	08 00                	or     BYTE PTR [eax],al
     29c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     29f:	00 03                	add    BYTE PTR [ebx],al
     2a1:	0e                   	push   cs
     2a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2a6:	49                   	dec    ecx
     2a7:	13 00                	adc    eax,DWORD PTR [eax]
     2a9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     2af:	49                   	dec    ecx
     2b0:	13 00                	adc    eax,DWORD PTR [eax]
     2b2:	00 06                	add    BYTE PTR [esi],al
     2b4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2b7:	19 03                	sbb    DWORD PTR [ebx],eax
     2b9:	0e                   	push   cs
     2ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2be:	27                   	daa    
     2bf:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     2c2:	11 01                	adc    DWORD PTR [ecx],eax
     2c4:	12 06                	adc    al,BYTE PTR [esi]
     2c6:	40                   	inc    eax
     2c7:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     2cd:	00 00                	add    BYTE PTR [eax],al
     2cf:	07                   	pop    es
     2d0:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     2d5:	0b 3b                	or     edi,DWORD PTR [ebx]
     2d7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     2da:	02 18                	add    bl,BYTE PTR [eax]
     2dc:	00 00                	add    BYTE PTR [eax],al
     2de:	08 0b                	or     BYTE PTR [ebx],cl
     2e0:	01 11                	add    DWORD PTR [ecx],edx
     2e2:	01 12                	add    DWORD PTR [edx],edx
     2e4:	06                   	push   es
     2e5:	00 00                	add    BYTE PTR [eax],al
     2e7:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     2ea:	03 08                	add    ecx,DWORD PTR [eax]
     2ec:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2ee:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2f0:	49                   	dec    ecx
     2f1:	13 02                	adc    eax,DWORD PTR [edx]
     2f3:	18 00                	sbb    BYTE PTR [eax],al
     2f5:	00 0a                	add    BYTE PTR [edx],cl
     2f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2fa:	19 03                	sbb    DWORD PTR [ebx],eax
     2fc:	0e                   	push   cs
     2fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     301:	27                   	daa    
     302:	19 11                	sbb    DWORD PTR [ecx],edx
     304:	01 12                	add    DWORD PTR [edx],edx
     306:	06                   	push   es
     307:	40                   	inc    eax
     308:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     30e:	00 00                	add    BYTE PTR [eax],al
     310:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     313:	03 0e                	add    ecx,DWORD PTR [esi]
     315:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     317:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     319:	49                   	dec    ecx
     31a:	13 02                	adc    eax,DWORD PTR [edx]
     31c:	18 00                	sbb    BYTE PTR [eax],al
     31e:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     321:	01 11                	add    DWORD PTR [ecx],edx
     323:	01 12                	add    DWORD PTR [edx],edx
     325:	06                   	push   es
     326:	01 13                	add    DWORD PTR [ebx],edx
     328:	00 00                	add    BYTE PTR [eax],al
     32a:	0d 34 00 03 0e       	or     eax,0xe030034
     32f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     331:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     333:	49                   	dec    ecx
     334:	13 3f                	adc    edi,DWORD PTR [edi]
     336:	19 02                	sbb    DWORD PTR [edx],eax
     338:	18 00                	sbb    BYTE PTR [eax],al
     33a:	00 00                	add    BYTE PTR [eax],al
     33c:	01 11                	add    DWORD PTR [ecx],edx
     33e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     344:	0e                   	push   cs
     345:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     347:	11 01                	adc    DWORD PTR [ecx],eax
     349:	12 06                	adc    al,BYTE PTR [esi]
     34b:	10 17                	adc    BYTE PTR [edi],dl
     34d:	00 00                	add    BYTE PTR [eax],al
     34f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     352:	0b 0b                	or     ecx,DWORD PTR [ebx]
     354:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     357:	0e                   	push   cs
     358:	00 00                	add    BYTE PTR [eax],al
     35a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     35d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     35f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     362:	08 00                	or     BYTE PTR [eax],al
     364:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     367:	00 03                	add    BYTE PTR [ebx],al
     369:	0e                   	push   cs
     36a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     36c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     36e:	49                   	dec    ecx
     36f:	13 00                	adc    eax,DWORD PTR [eax]
     371:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     377:	49                   	dec    ecx
     378:	13 00                	adc    eax,DWORD PTR [eax]
     37a:	00 06                	add    BYTE PTR [esi],al
     37c:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     380:	00 00                	add    BYTE PTR [eax],al
     382:	07                   	pop    es
     383:	04 01                	add    al,0x1
     385:	03 0e                	add    ecx,DWORD PTR [esi]
     387:	0b 0b                	or     ecx,DWORD PTR [ebx]
     389:	49                   	dec    ecx
     38a:	13 3a                	adc    edi,DWORD PTR [edx]
     38c:	0b 3b                	or     edi,DWORD PTR [ebx]
     38e:	0b 01                	or     eax,DWORD PTR [ecx]
     390:	13 00                	adc    eax,DWORD PTR [eax]
     392:	00 08                	add    BYTE PTR [eax],cl
     394:	28 00                	sub    BYTE PTR [eax],al
     396:	03 0e                	add    ecx,DWORD PTR [esi]
     398:	1c 0b                	sbb    al,0xb
     39a:	00 00                	add    BYTE PTR [eax],al
     39c:	09 28                	or     DWORD PTR [eax],ebp
     39e:	00 03                	add    BYTE PTR [ebx],al
     3a0:	0e                   	push   cs
     3a1:	1c 05                	sbb    al,0x5
     3a3:	00 00                	add    BYTE PTR [eax],al
     3a5:	0a 0f                	or     cl,BYTE PTR [edi]
     3a7:	00 0b                	add    BYTE PTR [ebx],cl
     3a9:	0b 00                	or     eax,DWORD PTR [eax]
     3ab:	00 0b                	add    BYTE PTR [ebx],cl
     3ad:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     3b0:	19 03                	sbb    DWORD PTR [ebx],eax
     3b2:	0e                   	push   cs
     3b3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3b5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3b7:	27                   	daa    
     3b8:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     3bb:	11 01                	adc    DWORD PTR [ecx],eax
     3bd:	12 06                	adc    al,BYTE PTR [esi]
     3bf:	40                   	inc    eax
     3c0:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3c6:	00 00                	add    BYTE PTR [eax],al
     3c8:	0c 05                	or     al,0x5
     3ca:	00 03                	add    BYTE PTR [ebx],al
     3cc:	0e                   	push   cs
     3cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3d1:	49                   	dec    ecx
     3d2:	13 02                	adc    eax,DWORD PTR [edx]
     3d4:	18 00                	sbb    BYTE PTR [eax],al
     3d6:	00 0d 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,cl
     3dc:	03 0e                	add    ecx,DWORD PTR [esi]
     3de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3e2:	27                   	daa    
     3e3:	19 11                	sbb    DWORD PTR [ecx],edx
     3e5:	01 12                	add    DWORD PTR [edx],edx
     3e7:	06                   	push   es
     3e8:	40                   	inc    eax
     3e9:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3ef:	00 00                	add    BYTE PTR [eax],al
     3f1:	0e                   	push   cs
     3f2:	34 00                	xor    al,0x0
     3f4:	03 0e                	add    ecx,DWORD PTR [esi]
     3f6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3f8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3fa:	49                   	dec    ecx
     3fb:	13 3f                	adc    edi,DWORD PTR [edi]
     3fd:	19 02                	sbb    DWORD PTR [edx],eax
     3ff:	18 00                	sbb    BYTE PTR [eax],al
     401:	00 00                	add    BYTE PTR [eax],al
     403:	01 11                	add    DWORD PTR [ecx],edx
     405:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     40b:	0e                   	push   cs
     40c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     40e:	11 01                	adc    DWORD PTR [ecx],eax
     410:	12 06                	adc    al,BYTE PTR [esi]
     412:	10 17                	adc    BYTE PTR [edi],dl
     414:	00 00                	add    BYTE PTR [eax],al
     416:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     419:	0b 0b                	or     ecx,DWORD PTR [ebx]
     41b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     41e:	0e                   	push   cs
     41f:	00 00                	add    BYTE PTR [eax],al
     421:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     424:	0b 0b                	or     ecx,DWORD PTR [ebx]
     426:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     429:	08 00                	or     BYTE PTR [eax],al
     42b:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     42e:	00 03                	add    BYTE PTR [ebx],al
     430:	0e                   	push   cs
     431:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     433:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     435:	49                   	dec    ecx
     436:	13 00                	adc    eax,DWORD PTR [eax]
     438:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     43e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     440:	49                   	dec    ecx
     441:	13 3a                	adc    edi,DWORD PTR [edx]
     443:	0b 3b                	or     edi,DWORD PTR [ebx]
     445:	0b 01                	or     eax,DWORD PTR [ecx]
     447:	13 00                	adc    eax,DWORD PTR [eax]
     449:	00 06                	add    BYTE PTR [esi],al
     44b:	28 00                	sub    BYTE PTR [eax],al
     44d:	03 0e                	add    ecx,DWORD PTR [esi]
     44f:	1c 0b                	sbb    al,0xb
     451:	00 00                	add    BYTE PTR [eax],al
     453:	07                   	pop    es
     454:	28 00                	sub    BYTE PTR [eax],al
     456:	03 0e                	add    ecx,DWORD PTR [esi]
     458:	1c 05                	sbb    al,0x5
     45a:	00 00                	add    BYTE PTR [eax],al
     45c:	08 0f                	or     BYTE PTR [edi],cl
     45e:	00 0b                	add    BYTE PTR [ebx],cl
     460:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     463:	00 00                	add    BYTE PTR [eax],al
     465:	09 2e                	or     DWORD PTR [esi],ebp
     467:	01 3f                	add    DWORD PTR [edi],edi
     469:	19 03                	sbb    DWORD PTR [ebx],eax
     46b:	0e                   	push   cs
     46c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     46e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     470:	27                   	daa    
     471:	19 11                	sbb    DWORD PTR [ecx],edx
     473:	01 12                	add    DWORD PTR [edx],edx
     475:	06                   	push   es
     476:	40                   	inc    eax
     477:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     47d:	00 00                	add    BYTE PTR [eax],al
     47f:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     485:	0b 3b                	or     edi,DWORD PTR [ebx]
     487:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     48a:	02 18                	add    bl,BYTE PTR [eax]
     48c:	00 00                	add    BYTE PTR [eax],al
     48e:	0b 05 00 03 08 3a    	or     eax,DWORD PTR ds:0x3a080300
     494:	0b 3b                	or     edi,DWORD PTR [ebx]
     496:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     499:	02 18                	add    bl,BYTE PTR [eax]
     49b:	00 00                	add    BYTE PTR [eax],al
     49d:	0c 34                	or     al,0x34
     49f:	00 03                	add    BYTE PTR [ebx],al
     4a1:	0e                   	push   cs
     4a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4a6:	49                   	dec    ecx
     4a7:	13 02                	adc    eax,DWORD PTR [edx]
     4a9:	18 00                	sbb    BYTE PTR [eax],al
     4ab:	00 0d 01 01 49 13    	add    BYTE PTR ds:0x13490101,cl
     4b1:	01 13                	add    DWORD PTR [ebx],edx
     4b3:	00 00                	add    BYTE PTR [eax],al
     4b5:	0e                   	push   cs
     4b6:	21 00                	and    DWORD PTR [eax],eax
     4b8:	49                   	dec    ecx
     4b9:	13 2f                	adc    ebp,DWORD PTR [edi]
     4bb:	0b 00                	or     eax,DWORD PTR [eax]
     4bd:	00 0f                	add    BYTE PTR [edi],cl
     4bf:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4c2:	19 03                	sbb    DWORD PTR [ebx],eax
     4c4:	0e                   	push   cs
     4c5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4c7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4c9:	49                   	dec    ecx
     4ca:	13 11                	adc    edx,DWORD PTR [ecx]
     4cc:	01 12                	add    DWORD PTR [edx],edx
     4ce:	06                   	push   es
     4cf:	40                   	inc    eax
     4d0:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     4d6:	00 00                	add    BYTE PTR [eax],al
     4d8:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     4db:	03 08                	add    ecx,DWORD PTR [eax]
     4dd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4df:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4e1:	49                   	dec    ecx
     4e2:	13 02                	adc    eax,DWORD PTR [edx]
     4e4:	18 00                	sbb    BYTE PTR [eax],al
     4e6:	00 11                	add    BYTE PTR [ecx],dl
     4e8:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4eb:	19 03                	sbb    DWORD PTR [ebx],eax
     4ed:	0e                   	push   cs
     4ee:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4f0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4f2:	27                   	daa    
     4f3:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     4f6:	11 01                	adc    DWORD PTR [ecx],eax
     4f8:	12 06                	adc    al,BYTE PTR [esi]
     4fa:	40                   	inc    eax
     4fb:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     501:	00 00                	add    BYTE PTR [eax],al
     503:	12 0a                	adc    cl,BYTE PTR [edx]
     505:	00 03                	add    BYTE PTR [ebx],al
     507:	0e                   	push   cs
     508:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     50a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     50c:	11 01                	adc    DWORD PTR [ecx],eax
     50e:	00 00                	add    BYTE PTR [eax],al
     510:	13 34 00             	adc    esi,DWORD PTR [eax+eax*1]
     513:	03 0e                	add    ecx,DWORD PTR [esi]
     515:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     517:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     519:	49                   	dec    ecx
     51a:	13 3f                	adc    edi,DWORD PTR [edi]
     51c:	19 02                	sbb    DWORD PTR [edx],eax
     51e:	18 00                	sbb    BYTE PTR [eax],al
     520:	00 00                	add    BYTE PTR [eax],al
     522:	01 11                	add    DWORD PTR [ecx],edx
     524:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     52a:	0e                   	push   cs
     52b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     52d:	11 01                	adc    DWORD PTR [ecx],eax
     52f:	12 06                	adc    al,BYTE PTR [esi]
     531:	10 17                	adc    BYTE PTR [edi],dl
     533:	00 00                	add    BYTE PTR [eax],al
     535:	02 16                	add    dl,BYTE PTR [esi]
     537:	00 03                	add    BYTE PTR [ebx],al
     539:	0e                   	push   cs
     53a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     53c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     53e:	49                   	dec    ecx
     53f:	13 00                	adc    eax,DWORD PTR [eax]
     541:	00 03                	add    BYTE PTR [ebx],al
     543:	0f 00 0b             	str    WORD PTR [ebx]
     546:	0b 03                	or     eax,DWORD PTR [ebx]
     548:	0e                   	push   cs
     549:	49                   	dec    ecx
     54a:	13 00                	adc    eax,DWORD PTR [eax]
     54c:	00 04 24             	add    BYTE PTR [esp],al
     54f:	00 0b                	add    BYTE PTR [ebx],cl
     551:	0b 3e                	or     edi,DWORD PTR [esi]
     553:	0b 03                	or     eax,DWORD PTR [ebx]
     555:	0e                   	push   cs
     556:	00 00                	add    BYTE PTR [eax],al
     558:	05 24 00 0b 0b       	add    eax,0xb0b0024
     55d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     560:	08 00                	or     BYTE PTR [eax],al
     562:	00 06                	add    BYTE PTR [esi],al
     564:	0f 00 0b             	str    WORD PTR [ebx]
     567:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     56a:	00 00                	add    BYTE PTR [eax],al
     56c:	07                   	pop    es
     56d:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     571:	00 00                	add    BYTE PTR [eax],al
     573:	08 04 01             	or     BYTE PTR [ecx+eax*1],al
     576:	03 0e                	add    ecx,DWORD PTR [esi]
     578:	0b 0b                	or     ecx,DWORD PTR [ebx]
     57a:	49                   	dec    ecx
     57b:	13 3a                	adc    edi,DWORD PTR [edx]
     57d:	0b 3b                	or     edi,DWORD PTR [ebx]
     57f:	0b 01                	or     eax,DWORD PTR [ecx]
     581:	13 00                	adc    eax,DWORD PTR [eax]
     583:	00 09                	add    BYTE PTR [ecx],cl
     585:	28 00                	sub    BYTE PTR [eax],al
     587:	03 0e                	add    ecx,DWORD PTR [esi]
     589:	1c 0b                	sbb    al,0xb
     58b:	00 00                	add    BYTE PTR [eax],al
     58d:	0a 28                	or     ch,BYTE PTR [eax]
     58f:	00 03                	add    BYTE PTR [ebx],al
     591:	0e                   	push   cs
     592:	1c 05                	sbb    al,0x5
     594:	00 00                	add    BYTE PTR [eax],al
     596:	0b 0f                	or     ecx,DWORD PTR [edi]
     598:	00 0b                	add    BYTE PTR [ebx],cl
     59a:	0b 00                	or     eax,DWORD PTR [eax]
     59c:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     59f:	01 3f                	add    DWORD PTR [edi],edi
     5a1:	19 03                	sbb    DWORD PTR [ebx],eax
     5a3:	0e                   	push   cs
     5a4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5a6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5a8:	27                   	daa    
     5a9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     5ac:	11 01                	adc    DWORD PTR [ecx],eax
     5ae:	12 06                	adc    al,BYTE PTR [esi]
     5b0:	40                   	inc    eax
     5b1:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     5b7:	00 00                	add    BYTE PTR [eax],al
     5b9:	0d 05 00 03 0e       	or     eax,0xe030005
     5be:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5c0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5c2:	49                   	dec    ecx
     5c3:	13 02                	adc    eax,DWORD PTR [edx]
     5c5:	18 00                	sbb    BYTE PTR [eax],al
     5c7:	00 0e                	add    BYTE PTR [esi],cl
     5c9:	34 00                	xor    al,0x0
     5cb:	03 0e                	add    ecx,DWORD PTR [esi]
     5cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5d1:	49                   	dec    ecx
     5d2:	13 02                	adc    eax,DWORD PTR [edx]
     5d4:	18 00                	sbb    BYTE PTR [eax],al
     5d6:	00 0f                	add    BYTE PTR [edi],cl
     5d8:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     5db:	19 03                	sbb    DWORD PTR [ebx],eax
     5dd:	0e                   	push   cs
     5de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5e2:	11 01                	adc    DWORD PTR [ecx],eax
     5e4:	12 06                	adc    al,BYTE PTR [esi]
     5e6:	40                   	inc    eax
     5e7:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     5ed:	10 2e                	adc    BYTE PTR [esi],ch
     5ef:	00 3f                	add    BYTE PTR [edi],bh
     5f1:	19 03                	sbb    DWORD PTR [ebx],eax
     5f3:	0e                   	push   cs
     5f4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5f6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5f8:	27                   	daa    
     5f9:	19 11                	sbb    DWORD PTR [ecx],edx
     5fb:	01 12                	add    DWORD PTR [edx],edx
     5fd:	06                   	push   es
     5fe:	40                   	inc    eax
     5ff:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     605:	11 2e                	adc    DWORD PTR [esi],ebp
     607:	01 3f                	add    DWORD PTR [edi],edi
     609:	19 03                	sbb    DWORD PTR [ebx],eax
     60b:	0e                   	push   cs
     60c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     60e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     610:	27                   	daa    
     611:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     614:	11 01                	adc    DWORD PTR [ecx],eax
     616:	12 06                	adc    al,BYTE PTR [esi]
     618:	40                   	inc    eax
     619:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     61f:	00 00                	add    BYTE PTR [eax],al
     621:	12 18                	adc    bl,BYTE PTR [eax]
     623:	00 00                	add    BYTE PTR [eax],al
     625:	00 13                	add    BYTE PTR [ebx],dl
     627:	0b 01                	or     eax,DWORD PTR [ecx]
     629:	11 01                	adc    DWORD PTR [ecx],eax
     62b:	12 06                	adc    al,BYTE PTR [esi]
     62d:	00 00                	add    BYTE PTR [eax],al
     62f:	14 34                	adc    al,0x34
     631:	00 03                	add    BYTE PTR [ebx],al
     633:	08 3a                	or     BYTE PTR [edx],bh
     635:	0b 3b                	or     edi,DWORD PTR [ebx]
     637:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     63a:	02 18                	add    bl,BYTE PTR [eax]
     63c:	00 00                	add    BYTE PTR [eax],al
     63e:	15 2e 01 3f 19       	adc    eax,0x193f012e
     643:	03 0e                	add    ecx,DWORD PTR [esi]
     645:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     647:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     649:	27                   	daa    
     64a:	19 11                	sbb    DWORD PTR [ecx],edx
     64c:	01 12                	add    DWORD PTR [edx],edx
     64e:	06                   	push   es
     64f:	40                   	inc    eax
     650:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     656:	00 00                	add    BYTE PTR [eax],al
     658:	16                   	push   ss
     659:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     65c:	19 03                	sbb    DWORD PTR [ebx],eax
     65e:	0e                   	push   cs
     65f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     661:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     663:	49                   	dec    ecx
     664:	13 11                	adc    edx,DWORD PTR [ecx]
     666:	01 12                	add    DWORD PTR [edx],edx
     668:	06                   	push   es
     669:	40                   	inc    eax
     66a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     670:	00 00                	add    BYTE PTR [eax],al
     672:	17                   	pop    ss
     673:	05 00 03 08 3a       	add    eax,0x3a080300
     678:	0b 3b                	or     edi,DWORD PTR [ebx]
     67a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     67d:	02 18                	add    bl,BYTE PTR [eax]
     67f:	00 00                	add    BYTE PTR [eax],al
     681:	18 34 00             	sbb    BYTE PTR [eax+eax*1],dh
     684:	03 0e                	add    ecx,DWORD PTR [esi]
     686:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     688:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     68a:	49                   	dec    ecx
     68b:	13 3f                	adc    edi,DWORD PTR [edi]
     68d:	19 02                	sbb    DWORD PTR [edx],eax
     68f:	18 00                	sbb    BYTE PTR [eax],al
     691:	00 00                	add    BYTE PTR [eax],al
     693:	01 11                	add    DWORD PTR [ecx],edx
     695:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     69b:	0e                   	push   cs
     69c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     69e:	11 01                	adc    DWORD PTR [ecx],eax
     6a0:	12 06                	adc    al,BYTE PTR [esi]
     6a2:	10 17                	adc    BYTE PTR [edi],dl
     6a4:	00 00                	add    BYTE PTR [eax],al
     6a6:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     6a9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6ab:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     6ae:	0e                   	push   cs
     6af:	00 00                	add    BYTE PTR [eax],al
     6b1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     6b4:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6b6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     6b9:	08 00                	or     BYTE PTR [eax],al
     6bb:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     6be:	00 03                	add    BYTE PTR [ebx],al
     6c0:	0e                   	push   cs
     6c1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6c3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6c5:	49                   	dec    ecx
     6c6:	13 00                	adc    eax,DWORD PTR [eax]
     6c8:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     6ce:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6d0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6d2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6d4:	01 13                	add    DWORD PTR [ebx],edx
     6d6:	00 00                	add    BYTE PTR [eax],al
     6d8:	06                   	push   es
     6d9:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     6de:	0b 3b                	or     edi,DWORD PTR [ebx]
     6e0:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     6e3:	38 0b                	cmp    BYTE PTR [ebx],cl
     6e5:	00 00                	add    BYTE PTR [eax],al
     6e7:	07                   	pop    es
     6e8:	0d 00 03 08 3a       	or     eax,0x3a080300
     6ed:	0b 3b                	or     edi,DWORD PTR [ebx]
     6ef:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     6f2:	38 0b                	cmp    BYTE PTR [ebx],cl
     6f4:	00 00                	add    BYTE PTR [eax],al
     6f6:	08 0f                	or     BYTE PTR [edi],cl
     6f8:	00 0b                	add    BYTE PTR [ebx],cl
     6fa:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     6fd:	00 00                	add    BYTE PTR [eax],al
     6ff:	09 04 01             	or     DWORD PTR [ecx+eax*1],eax
     702:	03 0e                	add    ecx,DWORD PTR [esi]
     704:	0b 0b                	or     ecx,DWORD PTR [ebx]
     706:	49                   	dec    ecx
     707:	13 3a                	adc    edi,DWORD PTR [edx]
     709:	0b 3b                	or     edi,DWORD PTR [ebx]
     70b:	0b 01                	or     eax,DWORD PTR [ecx]
     70d:	13 00                	adc    eax,DWORD PTR [eax]
     70f:	00 0a                	add    BYTE PTR [edx],cl
     711:	28 00                	sub    BYTE PTR [eax],al
     713:	03 0e                	add    ecx,DWORD PTR [esi]
     715:	1c 0b                	sbb    al,0xb
     717:	00 00                	add    BYTE PTR [eax],al
     719:	0b 28                	or     ebp,DWORD PTR [eax]
     71b:	00 03                	add    BYTE PTR [ebx],al
     71d:	0e                   	push   cs
     71e:	1c 05                	sbb    al,0x5
     720:	00 00                	add    BYTE PTR [eax],al
     722:	0c 0f                	or     al,0xf
     724:	00 0b                	add    BYTE PTR [ebx],cl
     726:	0b 00                	or     eax,DWORD PTR [eax]
     728:	00 0d 2e 00 3f 19    	add    BYTE PTR ds:0x193f002e,cl
     72e:	03 0e                	add    ecx,DWORD PTR [esi]
     730:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     732:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     734:	11 01                	adc    DWORD PTR [ecx],eax
     736:	12 06                	adc    al,BYTE PTR [esi]
     738:	40                   	inc    eax
     739:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     73f:	0e                   	push   cs
     740:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     743:	19 03                	sbb    DWORD PTR [ebx],eax
     745:	0e                   	push   cs
     746:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     748:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     74a:	27                   	daa    
     74b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     74e:	11 01                	adc    DWORD PTR [ecx],eax
     750:	12 06                	adc    al,BYTE PTR [esi]
     752:	40                   	inc    eax
     753:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     759:	00 00                	add    BYTE PTR [eax],al
     75b:	0f 05                	syscall 
     75d:	00 03                	add    BYTE PTR [ebx],al
     75f:	0e                   	push   cs
     760:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     762:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     764:	49                   	dec    ecx
     765:	13 02                	adc    eax,DWORD PTR [edx]
     767:	18 00                	sbb    BYTE PTR [eax],al
     769:	00 10                	add    BYTE PTR [eax],dl
     76b:	34 00                	xor    al,0x0
     76d:	03 0e                	add    ecx,DWORD PTR [esi]
     76f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     771:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     773:	49                   	dec    ecx
     774:	13 02                	adc    eax,DWORD PTR [edx]
     776:	18 00                	sbb    BYTE PTR [eax],al
     778:	00 11                	add    BYTE PTR [ecx],dl
     77a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     77d:	19 03                	sbb    DWORD PTR [ebx],eax
     77f:	0e                   	push   cs
     780:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     782:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     784:	27                   	daa    
     785:	19 11                	sbb    DWORD PTR [ecx],edx
     787:	01 12                	add    DWORD PTR [edx],edx
     789:	06                   	push   es
     78a:	40                   	inc    eax
     78b:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     791:	00 00                	add    BYTE PTR [eax],al
     793:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     796:	03 08                	add    ecx,DWORD PTR [eax]
     798:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     79a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     79c:	49                   	dec    ecx
     79d:	13 02                	adc    eax,DWORD PTR [edx]
     79f:	18 00                	sbb    BYTE PTR [eax],al
     7a1:	00 13                	add    BYTE PTR [ebx],dl
     7a3:	0a 00                	or     al,BYTE PTR [eax]
     7a5:	03 0e                	add    ecx,DWORD PTR [esi]
     7a7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7a9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7ab:	11 01                	adc    DWORD PTR [ecx],eax
     7ad:	00 00                	add    BYTE PTR [eax],al
     7af:	14 2e                	adc    al,0x2e
     7b1:	01 3f                	add    DWORD PTR [edi],edi
     7b3:	19 03                	sbb    DWORD PTR [ebx],eax
     7b5:	0e                   	push   cs
     7b6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7b8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7ba:	27                   	daa    
     7bb:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     7be:	11 01                	adc    DWORD PTR [ecx],eax
     7c0:	12 06                	adc    al,BYTE PTR [esi]
     7c2:	40                   	inc    eax
     7c3:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     7c9:	00 00                	add    BYTE PTR [eax],al
     7cb:	15 2e 01 3f 19       	adc    eax,0x193f012e
     7d0:	03 0e                	add    ecx,DWORD PTR [esi]
     7d2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7d4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7d6:	27                   	daa    
     7d7:	19 11                	sbb    DWORD PTR [ecx],edx
     7d9:	01 12                	add    DWORD PTR [edx],edx
     7db:	06                   	push   es
     7dc:	40                   	inc    eax
     7dd:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     7e3:	00 00                	add    BYTE PTR [eax],al
     7e5:	16                   	push   ss
     7e6:	34 00                	xor    al,0x0
     7e8:	03 0e                	add    ecx,DWORD PTR [esi]
     7ea:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7ec:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7ee:	49                   	dec    ecx
     7ef:	13 3f                	adc    edi,DWORD PTR [edi]
     7f1:	19 02                	sbb    DWORD PTR [edx],eax
     7f3:	18 00                	sbb    BYTE PTR [eax],al
     7f5:	00 00                	add    BYTE PTR [eax],al
     7f7:	01 11                	add    DWORD PTR [ecx],edx
     7f9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     7ff:	0e                   	push   cs
     800:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     802:	11 01                	adc    DWORD PTR [ecx],eax
     804:	12 06                	adc    al,BYTE PTR [esi]
     806:	10 17                	adc    BYTE PTR [edi],dl
     808:	00 00                	add    BYTE PTR [eax],al
     80a:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     80d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     80f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     812:	0e                   	push   cs
     813:	00 00                	add    BYTE PTR [eax],al
     815:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     818:	0b 0b                	or     ecx,DWORD PTR [ebx]
     81a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     81d:	08 00                	or     BYTE PTR [eax],al
     81f:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     822:	00 0b                	add    BYTE PTR [ebx],cl
     824:	0b 00                	or     eax,DWORD PTR [eax]
     826:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     82c:	49                   	dec    ecx
     82d:	13 00                	adc    eax,DWORD PTR [eax]
     82f:	00 06                	add    BYTE PTR [esi],al
     831:	16                   	push   ss
     832:	00 03                	add    BYTE PTR [ebx],al
     834:	0e                   	push   cs
     835:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     837:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     839:	49                   	dec    ecx
     83a:	13 00                	adc    eax,DWORD PTR [eax]
     83c:	00 07                	add    BYTE PTR [edi],al
     83e:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     842:	00 00                	add    BYTE PTR [eax],al
     844:	08 2e                	or     BYTE PTR [esi],ch
     846:	01 3f                	add    DWORD PTR [edi],edi
     848:	19 03                	sbb    DWORD PTR [ebx],eax
     84a:	0e                   	push   cs
     84b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     84d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     84f:	27                   	daa    
     850:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     853:	11 01                	adc    DWORD PTR [ecx],eax
     855:	12 06                	adc    al,BYTE PTR [esi]
     857:	40                   	inc    eax
     858:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     85e:	00 00                	add    BYTE PTR [eax],al
     860:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     866:	0b 3b                	or     edi,DWORD PTR [ebx]
     868:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     86b:	02 18                	add    bl,BYTE PTR [eax]
     86d:	00 00                	add    BYTE PTR [eax],al
     86f:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     875:	0b 3b                	or     edi,DWORD PTR [ebx]
     877:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     87a:	02 18                	add    bl,BYTE PTR [eax]
     87c:	00 00                	add    BYTE PTR [eax],al
     87e:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     881:	03 08                	add    ecx,DWORD PTR [eax]
     883:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     885:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     887:	49                   	dec    ecx
     888:	13 02                	adc    eax,DWORD PTR [edx]
     88a:	18 00                	sbb    BYTE PTR [eax],al
     88c:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     88f:	01 11                	add    DWORD PTR [ecx],edx
     891:	01 12                	add    DWORD PTR [edx],edx
     893:	06                   	push   es
     894:	01 13                	add    DWORD PTR [ebx],edx
     896:	00 00                	add    BYTE PTR [eax],al
     898:	0d 0b 01 11 01       	or     eax,0x111010b
     89d:	12 06                	adc    al,BYTE PTR [esi]
     89f:	00 00                	add    BYTE PTR [eax],al
     8a1:	0e                   	push   cs
     8a2:	26 00 00             	add    BYTE PTR es:[eax],al
     8a5:	00 0f                	add    BYTE PTR [edi],cl
     8a7:	34 00                	xor    al,0x0
     8a9:	03 0e                	add    ecx,DWORD PTR [esi]
     8ab:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8ad:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8af:	49                   	dec    ecx
     8b0:	13 3f                	adc    edi,DWORD PTR [edi]
     8b2:	19 02                	sbb    DWORD PTR [edx],eax
     8b4:	18 00                	sbb    BYTE PTR [eax],al
     8b6:	00 00                	add    BYTE PTR [eax],al
     8b8:	01 11                	add    DWORD PTR [ecx],edx
     8ba:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     8c0:	0e                   	push   cs
     8c1:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     8c3:	11 01                	adc    DWORD PTR [ecx],eax
     8c5:	12 06                	adc    al,BYTE PTR [esi]
     8c7:	10 17                	adc    BYTE PTR [edi],dl
     8c9:	00 00                	add    BYTE PTR [eax],al
     8cb:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     8ce:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8d0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8d3:	0e                   	push   cs
     8d4:	00 00                	add    BYTE PTR [eax],al
     8d6:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     8d9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8db:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8de:	08 00                	or     BYTE PTR [eax],al
     8e0:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     8e3:	00 03                	add    BYTE PTR [ebx],al
     8e5:	0e                   	push   cs
     8e6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8e8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8ea:	49                   	dec    ecx
     8eb:	13 00                	adc    eax,DWORD PTR [eax]
     8ed:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     8f3:	00 00                	add    BYTE PTR [eax],al
     8f5:	06                   	push   es
     8f6:	0f 00 0b             	str    WORD PTR [ebx]
     8f9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     8fc:	00 00                	add    BYTE PTR [eax],al
     8fe:	07                   	pop    es
     8ff:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     902:	19 03                	sbb    DWORD PTR [ebx],eax
     904:	0e                   	push   cs
     905:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     907:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     909:	27                   	daa    
     90a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     90d:	11 01                	adc    DWORD PTR [ecx],eax
     90f:	12 06                	adc    al,BYTE PTR [esi]
     911:	40                   	inc    eax
     912:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     918:	00 00                	add    BYTE PTR [eax],al
     91a:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     920:	0b 3b                	or     edi,DWORD PTR [ebx]
     922:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     925:	02 18                	add    bl,BYTE PTR [eax]
     927:	00 00                	add    BYTE PTR [eax],al
     929:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     92c:	03 08                	add    ecx,DWORD PTR [eax]
     92e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     930:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     932:	49                   	dec    ecx
     933:	13 02                	adc    eax,DWORD PTR [edx]
     935:	18 00                	sbb    BYTE PTR [eax],al
     937:	00 0a                	add    BYTE PTR [edx],cl
     939:	34 00                	xor    al,0x0
     93b:	03 0e                	add    ecx,DWORD PTR [esi]
     93d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     93f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     941:	49                   	dec    ecx
     942:	13 02                	adc    eax,DWORD PTR [edx]
     944:	18 00                	sbb    BYTE PTR [eax],al
     946:	00 0b                	add    BYTE PTR [ebx],cl
     948:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     94b:	19 03                	sbb    DWORD PTR [ebx],eax
     94d:	0e                   	push   cs
     94e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     950:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     952:	27                   	daa    
     953:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     956:	11 01                	adc    DWORD PTR [ecx],eax
     958:	12 06                	adc    al,BYTE PTR [esi]
     95a:	40                   	inc    eax
     95b:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     961:	00 00                	add    BYTE PTR [eax],al
     963:	0c 34                	or     al,0x34
     965:	00 03                	add    BYTE PTR [ebx],al
     967:	0e                   	push   cs
     968:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     96a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     96c:	49                   	dec    ecx
     96d:	13 3f                	adc    edi,DWORD PTR [edi]
     96f:	19 02                	sbb    DWORD PTR [edx],eax
     971:	18 00                	sbb    BYTE PTR [eax],al
     973:	00 00                	add    BYTE PTR [eax],al
     975:	01 11                	add    DWORD PTR [ecx],edx
     977:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     97d:	0e                   	push   cs
     97e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     980:	11 01                	adc    DWORD PTR [ecx],eax
     982:	12 06                	adc    al,BYTE PTR [esi]
     984:	10 17                	adc    BYTE PTR [edi],dl
     986:	00 00                	add    BYTE PTR [eax],al
     988:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     98b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     98d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     990:	0e                   	push   cs
     991:	00 00                	add    BYTE PTR [eax],al
     993:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     996:	0b 0b                	or     ecx,DWORD PTR [ebx]
     998:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     99b:	08 00                	or     BYTE PTR [eax],al
     99d:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     9a0:	00 03                	add    BYTE PTR [ebx],al
     9a2:	0e                   	push   cs
     9a3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9a5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9a7:	49                   	dec    ecx
     9a8:	13 00                	adc    eax,DWORD PTR [eax]
     9aa:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     9b0:	00 00                	add    BYTE PTR [eax],al
     9b2:	06                   	push   es
     9b3:	0f 00 0b             	str    WORD PTR [ebx]
     9b6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9b9:	00 00                	add    BYTE PTR [eax],al
     9bb:	07                   	pop    es
     9bc:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     9bf:	19 03                	sbb    DWORD PTR [ebx],eax
     9c1:	0e                   	push   cs
     9c2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9c4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9c6:	27                   	daa    
     9c7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     9ca:	11 01                	adc    DWORD PTR [ecx],eax
     9cc:	12 06                	adc    al,BYTE PTR [esi]
     9ce:	40                   	inc    eax
     9cf:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     9d5:	00 00                	add    BYTE PTR [eax],al
     9d7:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     9dd:	0b 3b                	or     edi,DWORD PTR [ebx]
     9df:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9e2:	02 18                	add    bl,BYTE PTR [eax]
     9e4:	00 00                	add    BYTE PTR [eax],al
     9e6:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     9ec:	0b 3b                	or     edi,DWORD PTR [ebx]
     9ee:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9f1:	02 18                	add    bl,BYTE PTR [eax]
     9f3:	00 00                	add    BYTE PTR [eax],al
     9f5:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
     9f8:	03 0e                	add    ecx,DWORD PTR [esi]
     9fa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9fc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9fe:	49                   	dec    ecx
     9ff:	13 3f                	adc    edi,DWORD PTR [edi]
     a01:	19 02                	sbb    DWORD PTR [edx],eax
     a03:	18 00                	sbb    BYTE PTR [eax],al
     a05:	00 00                	add    BYTE PTR [eax],al
     a07:	01 11                	add    DWORD PTR [ecx],edx
     a09:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     a0f:	0e                   	push   cs
     a10:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     a12:	11 01                	adc    DWORD PTR [ecx],eax
     a14:	12 06                	adc    al,BYTE PTR [esi]
     a16:	10 17                	adc    BYTE PTR [edi],dl
     a18:	00 00                	add    BYTE PTR [eax],al
     a1a:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     a1d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a1f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a22:	0e                   	push   cs
     a23:	00 00                	add    BYTE PTR [eax],al
     a25:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     a28:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a2a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a2d:	08 00                	or     BYTE PTR [eax],al
     a2f:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     a32:	00 03                	add    BYTE PTR [ebx],al
     a34:	0e                   	push   cs
     a35:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a37:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a39:	49                   	dec    ecx
     a3a:	13 00                	adc    eax,DWORD PTR [eax]
     a3c:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     a42:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a44:	49                   	dec    ecx
     a45:	13 3a                	adc    edi,DWORD PTR [edx]
     a47:	0b 3b                	or     edi,DWORD PTR [ebx]
     a49:	0b 01                	or     eax,DWORD PTR [ecx]
     a4b:	13 00                	adc    eax,DWORD PTR [eax]
     a4d:	00 06                	add    BYTE PTR [esi],al
     a4f:	28 00                	sub    BYTE PTR [eax],al
     a51:	03 0e                	add    ecx,DWORD PTR [esi]
     a53:	1c 0b                	sbb    al,0xb
     a55:	00 00                	add    BYTE PTR [eax],al
     a57:	07                   	pop    es
     a58:	28 00                	sub    BYTE PTR [eax],al
     a5a:	03 0e                	add    ecx,DWORD PTR [esi]
     a5c:	1c 05                	sbb    al,0x5
     a5e:	00 00                	add    BYTE PTR [eax],al
     a60:	08 0f                	or     BYTE PTR [edi],cl
     a62:	00 0b                	add    BYTE PTR [ebx],cl
     a64:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a67:	00 00                	add    BYTE PTR [eax],al
     a69:	09 2e                	or     DWORD PTR [esi],ebp
     a6b:	01 3f                	add    DWORD PTR [edi],edi
     a6d:	19 03                	sbb    DWORD PTR [ebx],eax
     a6f:	0e                   	push   cs
     a70:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a72:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a74:	27                   	daa    
     a75:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     a78:	11 01                	adc    DWORD PTR [ecx],eax
     a7a:	12 06                	adc    al,BYTE PTR [esi]
     a7c:	40                   	inc    eax
     a7d:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     a83:	00 00                	add    BYTE PTR [eax],al
     a85:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     a8b:	0b 3b                	or     edi,DWORD PTR [ebx]
     a8d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a90:	02 18                	add    bl,BYTE PTR [eax]
     a92:	00 00                	add    BYTE PTR [eax],al
     a94:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     a97:	03 0e                	add    ecx,DWORD PTR [esi]
     a99:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a9b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a9d:	49                   	dec    ecx
     a9e:	13 3f                	adc    edi,DWORD PTR [edi]
     aa0:	19 02                	sbb    DWORD PTR [edx],eax
     aa2:	18 00                	sbb    BYTE PTR [eax],al
     aa4:	00 00                	add    BYTE PTR [eax],al
     aa6:	01 11                	add    DWORD PTR [ecx],edx
     aa8:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     aae:	0e                   	push   cs
     aaf:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     ab1:	11 01                	adc    DWORD PTR [ecx],eax
     ab3:	12 06                	adc    al,BYTE PTR [esi]
     ab5:	10 17                	adc    BYTE PTR [edi],dl
     ab7:	00 00                	add    BYTE PTR [eax],al
     ab9:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     abc:	0b 0b                	or     ecx,DWORD PTR [ebx]
     abe:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ac1:	0e                   	push   cs
     ac2:	00 00                	add    BYTE PTR [eax],al
     ac4:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     ac7:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ac9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     acc:	08 00                	or     BYTE PTR [eax],al
     ace:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     ad1:	00 03                	add    BYTE PTR [ebx],al
     ad3:	0e                   	push   cs
     ad4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ad6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ad8:	49                   	dec    ecx
     ad9:	13 00                	adc    eax,DWORD PTR [eax]
     adb:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     ae1:	49                   	dec    ecx
     ae2:	13 00                	adc    eax,DWORD PTR [eax]
     ae4:	00 06                	add    BYTE PTR [esi],al
     ae6:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     aea:	00 00                	add    BYTE PTR [eax],al
     aec:	07                   	pop    es
     aed:	0f 00 0b             	str    WORD PTR [ebx]
     af0:	0b 00                	or     eax,DWORD PTR [eax]
     af2:	00 08                	add    BYTE PTR [eax],cl
     af4:	13 01                	adc    eax,DWORD PTR [ecx]
     af6:	03 0e                	add    ecx,DWORD PTR [esi]
     af8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     afa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     afc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     afe:	01 13                	add    DWORD PTR [ebx],edx
     b00:	00 00                	add    BYTE PTR [eax],al
     b02:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
     b08:	0b 3b                	or     edi,DWORD PTR [ebx]
     b0a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b0d:	38 0b                	cmp    BYTE PTR [ebx],cl
     b0f:	00 00                	add    BYTE PTR [eax],al
     b11:	0a 15 01 27 19 49    	or     dl,BYTE PTR ds:0x49192701
     b17:	13 01                	adc    eax,DWORD PTR [ecx]
     b19:	13 00                	adc    eax,DWORD PTR [eax]
     b1b:	00 0b                	add    BYTE PTR [ebx],cl
     b1d:	05 00 49 13 00       	add    eax,0x134900
     b22:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     b25:	01 3f                	add    DWORD PTR [edi],edi
     b27:	19 03                	sbb    DWORD PTR [ebx],eax
     b29:	0e                   	push   cs
     b2a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b2c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b2e:	11 01                	adc    DWORD PTR [ecx],eax
     b30:	12 06                	adc    al,BYTE PTR [esi]
     b32:	40                   	inc    eax
     b33:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     b39:	00 00                	add    BYTE PTR [eax],al
     b3b:	0d 34 00 03 0e       	or     eax,0xe030034
     b40:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b42:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b44:	49                   	dec    ecx
     b45:	13 02                	adc    eax,DWORD PTR [edx]
     b47:	18 00                	sbb    BYTE PTR [eax],al
     b49:	00 0e                	add    BYTE PTR [esi],cl
     b4b:	01 01                	add    DWORD PTR [ecx],eax
     b4d:	49                   	dec    ecx
     b4e:	13 01                	adc    eax,DWORD PTR [ecx]
     b50:	13 00                	adc    eax,DWORD PTR [eax]
     b52:	00 0f                	add    BYTE PTR [edi],cl
     b54:	21 00                	and    DWORD PTR [eax],eax
     b56:	49                   	dec    ecx
     b57:	13 2f                	adc    ebp,DWORD PTR [edi]
     b59:	0b 00                	or     eax,DWORD PTR [eax]
     b5b:	00 10                	add    BYTE PTR [eax],dl
     b5d:	34 00                	xor    al,0x0
     b5f:	03 0e                	add    ecx,DWORD PTR [esi]
     b61:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b63:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b65:	49                   	dec    ecx
     b66:	13 3f                	adc    edi,DWORD PTR [edi]
     b68:	19 02                	sbb    DWORD PTR [edx],eax
     b6a:	18 00                	sbb    BYTE PTR [eax],al
     b6c:	00 00                	add    BYTE PTR [eax],al
     b6e:	01 11                	add    DWORD PTR [ecx],edx
     b70:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     b76:	0e                   	push   cs
     b77:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     b79:	11 01                	adc    DWORD PTR [ecx],eax
     b7b:	12 06                	adc    al,BYTE PTR [esi]
     b7d:	10 17                	adc    BYTE PTR [edi],dl
     b7f:	00 00                	add    BYTE PTR [eax],al
     b81:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     b84:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b86:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b89:	0e                   	push   cs
     b8a:	00 00                	add    BYTE PTR [eax],al
     b8c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     b8f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b91:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b94:	08 00                	or     BYTE PTR [eax],al
     b96:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     b99:	00 03                	add    BYTE PTR [ebx],al
     b9b:	0e                   	push   cs
     b9c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b9e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ba0:	49                   	dec    ecx
     ba1:	13 00                	adc    eax,DWORD PTR [eax]
     ba3:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     ba9:	49                   	dec    ecx
     baa:	13 00                	adc    eax,DWORD PTR [eax]
     bac:	00 06                	add    BYTE PTR [esi],al
     bae:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     bb2:	00 00                	add    BYTE PTR [eax],al
     bb4:	07                   	pop    es
     bb5:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     bb8:	19 03                	sbb    DWORD PTR [ebx],eax
     bba:	0e                   	push   cs
     bbb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bbd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bbf:	27                   	daa    
     bc0:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     bc3:	11 01                	adc    DWORD PTR [ecx],eax
     bc5:	12 06                	adc    al,BYTE PTR [esi]
     bc7:	40                   	inc    eax
     bc8:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     bce:	00 00                	add    BYTE PTR [eax],al
     bd0:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     bd6:	0b 3b                	or     edi,DWORD PTR [ebx]
     bd8:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     bdb:	02 18                	add    bl,BYTE PTR [eax]
     bdd:	00 00                	add    BYTE PTR [eax],al
     bdf:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     be5:	0b 3b                	or     edi,DWORD PTR [ebx]
     be7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     bea:	02 18                	add    bl,BYTE PTR [eax]
     bec:	00 00                	add    BYTE PTR [eax],al
     bee:	0a 2e                	or     ch,BYTE PTR [esi]
     bf0:	01 3f                	add    DWORD PTR [edi],edi
     bf2:	19 03                	sbb    DWORD PTR [ebx],eax
     bf4:	0e                   	push   cs
     bf5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bf7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bf9:	27                   	daa    
     bfa:	19 11                	sbb    DWORD PTR [ecx],edx
     bfc:	01 12                	add    DWORD PTR [edx],edx
     bfe:	06                   	push   es
     bff:	40                   	inc    eax
     c00:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     c06:	00 00                	add    BYTE PTR [eax],al
     c08:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     c0b:	03 08                	add    ecx,DWORD PTR [eax]
     c0d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c0f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c11:	49                   	dec    ecx
     c12:	13 02                	adc    eax,DWORD PTR [edx]
     c14:	18 00                	sbb    BYTE PTR [eax],al
     c16:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
     c19:	00 03                	add    BYTE PTR [ebx],al
     c1b:	0e                   	push   cs
     c1c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c1e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c20:	49                   	dec    ecx
     c21:	13 3f                	adc    edi,DWORD PTR [edi]
     c23:	19 02                	sbb    DWORD PTR [edx],eax
     c25:	18 00                	sbb    BYTE PTR [eax],al
     c27:	00 00                	add    BYTE PTR [eax],al
     c29:	01 11                	add    DWORD PTR [ecx],edx
     c2b:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     c31:	0e                   	push   cs
     c32:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     c34:	11 01                	adc    DWORD PTR [ecx],eax
     c36:	12 06                	adc    al,BYTE PTR [esi]
     c38:	10 17                	adc    BYTE PTR [edi],dl
     c3a:	00 00                	add    BYTE PTR [eax],al
     c3c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     c3f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c41:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c44:	0e                   	push   cs
     c45:	00 00                	add    BYTE PTR [eax],al
     c47:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     c4a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c4c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c4f:	08 00                	or     BYTE PTR [eax],al
     c51:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     c54:	00 03                	add    BYTE PTR [ebx],al
     c56:	0e                   	push   cs
     c57:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c59:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c5b:	49                   	dec    ecx
     c5c:	13 00                	adc    eax,DWORD PTR [eax]
     c5e:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     c64:	49                   	dec    ecx
     c65:	13 00                	adc    eax,DWORD PTR [eax]
     c67:	00 06                	add    BYTE PTR [esi],al
     c69:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     c6d:	00 00                	add    BYTE PTR [eax],al
     c6f:	07                   	pop    es
     c70:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     c73:	19 03                	sbb    DWORD PTR [ebx],eax
     c75:	0e                   	push   cs
     c76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c7a:	27                   	daa    
     c7b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c7e:	11 01                	adc    DWORD PTR [ecx],eax
     c80:	12 06                	adc    al,BYTE PTR [esi]
     c82:	40                   	inc    eax
     c83:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     c89:	00 00                	add    BYTE PTR [eax],al
     c8b:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     c91:	0b 3b                	or     edi,DWORD PTR [ebx]
     c93:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c96:	02 18                	add    bl,BYTE PTR [eax]
     c98:	00 00                	add    BYTE PTR [eax],al
     c9a:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     c9d:	03 08                	add    ecx,DWORD PTR [eax]
     c9f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ca1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ca3:	49                   	dec    ecx
     ca4:	13 02                	adc    eax,DWORD PTR [edx]
     ca6:	18 00                	sbb    BYTE PTR [eax],al
     ca8:	00 0a                	add    BYTE PTR [edx],cl
     caa:	34 00                	xor    al,0x0
     cac:	03 0e                	add    ecx,DWORD PTR [esi]
     cae:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cb0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cb2:	49                   	dec    ecx
     cb3:	13 3f                	adc    edi,DWORD PTR [edi]
     cb5:	19 02                	sbb    DWORD PTR [edx],eax
     cb7:	18 00                	sbb    BYTE PTR [eax],al
     cb9:	00 00                	add    BYTE PTR [eax],al
     cbb:	01 11                	add    DWORD PTR [ecx],edx
     cbd:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     cc3:	0e                   	push   cs
     cc4:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     cc6:	11 01                	adc    DWORD PTR [ecx],eax
     cc8:	12 06                	adc    al,BYTE PTR [esi]
     cca:	10 17                	adc    BYTE PTR [edi],dl
     ccc:	00 00                	add    BYTE PTR [eax],al
     cce:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     cd1:	0b 0b                	or     ecx,DWORD PTR [ebx]
     cd3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     cd6:	0e                   	push   cs
     cd7:	00 00                	add    BYTE PTR [eax],al
     cd9:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     cdc:	0b 0b                	or     ecx,DWORD PTR [ebx]
     cde:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ce1:	08 00                	or     BYTE PTR [eax],al
     ce3:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     ce6:	00 03                	add    BYTE PTR [ebx],al
     ce8:	0e                   	push   cs
     ce9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ceb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ced:	49                   	dec    ecx
     cee:	13 00                	adc    eax,DWORD PTR [eax]
     cf0:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     cf6:	49                   	dec    ecx
     cf7:	13 00                	adc    eax,DWORD PTR [eax]
     cf9:	00 06                	add    BYTE PTR [esi],al
     cfb:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     cff:	00 00                	add    BYTE PTR [eax],al
     d01:	07                   	pop    es
     d02:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     d05:	19 03                	sbb    DWORD PTR [ebx],eax
     d07:	0e                   	push   cs
     d08:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d0a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d0c:	27                   	daa    
     d0d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d10:	11 01                	adc    DWORD PTR [ecx],eax
     d12:	12 06                	adc    al,BYTE PTR [esi]
     d14:	40                   	inc    eax
     d15:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     d1b:	00 00                	add    BYTE PTR [eax],al
     d1d:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     d23:	0b 3b                	or     edi,DWORD PTR [ebx]
     d25:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d28:	02 18                	add    bl,BYTE PTR [eax]
     d2a:	00 00                	add    BYTE PTR [eax],al
     d2c:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     d2f:	03 08                	add    ecx,DWORD PTR [eax]
     d31:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d33:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d35:	49                   	dec    ecx
     d36:	13 02                	adc    eax,DWORD PTR [edx]
     d38:	18 00                	sbb    BYTE PTR [eax],al
     d3a:	00 0a                	add    BYTE PTR [edx],cl
     d3c:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     d41:	0b 3b                	or     edi,DWORD PTR [ebx]
     d43:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d46:	02 18                	add    bl,BYTE PTR [eax]
     d48:	00 00                	add    BYTE PTR [eax],al
     d4a:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     d4d:	03 0e                	add    ecx,DWORD PTR [esi]
     d4f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d51:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d53:	49                   	dec    ecx
     d54:	13 3f                	adc    edi,DWORD PTR [edi]
     d56:	19 02                	sbb    DWORD PTR [edx],eax
     d58:	18 00                	sbb    BYTE PTR [eax],al
     d5a:	00 00                	add    BYTE PTR [eax],al
     d5c:	01 11                	add    DWORD PTR [ecx],edx
     d5e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     d64:	0e                   	push   cs
     d65:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     d67:	11 01                	adc    DWORD PTR [ecx],eax
     d69:	12 06                	adc    al,BYTE PTR [esi]
     d6b:	10 17                	adc    BYTE PTR [edi],dl
     d6d:	00 00                	add    BYTE PTR [eax],al
     d6f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     d72:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d74:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d77:	0e                   	push   cs
     d78:	00 00                	add    BYTE PTR [eax],al
     d7a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     d7d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d7f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d82:	08 00                	or     BYTE PTR [eax],al
     d84:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     d87:	00 03                	add    BYTE PTR [ebx],al
     d89:	0e                   	push   cs
     d8a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d8c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d8e:	49                   	dec    ecx
     d8f:	13 00                	adc    eax,DWORD PTR [eax]
     d91:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     d97:	49                   	dec    ecx
     d98:	13 00                	adc    eax,DWORD PTR [eax]
     d9a:	00 06                	add    BYTE PTR [esi],al
     d9c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     d9f:	19 03                	sbb    DWORD PTR [ebx],eax
     da1:	0e                   	push   cs
     da2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     da4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     da6:	27                   	daa    
     da7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     daa:	11 01                	adc    DWORD PTR [ecx],eax
     dac:	12 06                	adc    al,BYTE PTR [esi]
     dae:	40                   	inc    eax
     daf:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     db5:	00 00                	add    BYTE PTR [eax],al
     db7:	07                   	pop    es
     db8:	05 00 03 08 3a       	add    eax,0x3a080300
     dbd:	0b 3b                	or     edi,DWORD PTR [ebx]
     dbf:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     dc2:	02 18                	add    bl,BYTE PTR [eax]
     dc4:	00 00                	add    BYTE PTR [eax],al
     dc6:	08 2e                	or     BYTE PTR [esi],ch
     dc8:	01 3f                	add    DWORD PTR [edi],edi
     dca:	19 03                	sbb    DWORD PTR [ebx],eax
     dcc:	0e                   	push   cs
     dcd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dcf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     dd1:	27                   	daa    
     dd2:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     dd5:	11 01                	adc    DWORD PTR [ecx],eax
     dd7:	12 06                	adc    al,BYTE PTR [esi]
     dd9:	40                   	inc    eax
     dda:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     de0:	00 00                	add    BYTE PTR [eax],al
     de2:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     de5:	03 08                	add    ecx,DWORD PTR [eax]
     de7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     de9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     deb:	49                   	dec    ecx
     dec:	13 02                	adc    eax,DWORD PTR [edx]
     dee:	18 00                	sbb    BYTE PTR [eax],al
     df0:	00 0a                	add    BYTE PTR [edx],cl
     df2:	34 00                	xor    al,0x0
     df4:	03 0e                	add    ecx,DWORD PTR [esi]
     df6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     df8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     dfa:	49                   	dec    ecx
     dfb:	13 3f                	adc    edi,DWORD PTR [edi]
     dfd:	19 02                	sbb    DWORD PTR [edx],eax
     dff:	18 00                	sbb    BYTE PTR [eax],al
     e01:	00 00                	add    BYTE PTR [eax],al
     e03:	01 11                	add    DWORD PTR [ecx],edx
     e05:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     e0b:	0e                   	push   cs
     e0c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     e0e:	11 01                	adc    DWORD PTR [ecx],eax
     e10:	12 06                	adc    al,BYTE PTR [esi]
     e12:	10 17                	adc    BYTE PTR [edi],dl
     e14:	00 00                	add    BYTE PTR [eax],al
     e16:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     e19:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e1b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e1e:	08 00                	or     BYTE PTR [eax],al
     e20:	00 03                	add    BYTE PTR [ebx],al
     e22:	16                   	push   ss
     e23:	00 03                	add    BYTE PTR [ebx],al
     e25:	0e                   	push   cs
     e26:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e28:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e2a:	49                   	dec    ecx
     e2b:	13 00                	adc    eax,DWORD PTR [eax]
     e2d:	00 04 24             	add    BYTE PTR [esp],al
     e30:	00 0b                	add    BYTE PTR [ebx],cl
     e32:	0b 3e                	or     edi,DWORD PTR [esi]
     e34:	0b 03                	or     eax,DWORD PTR [ebx]
     e36:	0e                   	push   cs
     e37:	00 00                	add    BYTE PTR [eax],al
     e39:	05 2e 01 3f 19       	add    eax,0x193f012e
     e3e:	03 0e                	add    ecx,DWORD PTR [esi]
     e40:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e42:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e44:	27                   	daa    
     e45:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e48:	11 01                	adc    DWORD PTR [ecx],eax
     e4a:	12 06                	adc    al,BYTE PTR [esi]
     e4c:	40                   	inc    eax
     e4d:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     e53:	00 00                	add    BYTE PTR [eax],al
     e55:	06                   	push   es
     e56:	05 00 03 08 3a       	add    eax,0x3a080300
     e5b:	0b 3b                	or     edi,DWORD PTR [ebx]
     e5d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e60:	02 18                	add    bl,BYTE PTR [eax]
     e62:	00 00                	add    BYTE PTR [eax],al
     e64:	07                   	pop    es
     e65:	34 00                	xor    al,0x0
     e67:	03 08                	add    ecx,DWORD PTR [eax]
     e69:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e6b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e6d:	49                   	dec    ecx
     e6e:	13 02                	adc    eax,DWORD PTR [edx]
     e70:	18 00                	sbb    BYTE PTR [eax],al
     e72:	00 08                	add    BYTE PTR [eax],cl
     e74:	0f 00 0b             	str    WORD PTR [ebx]
     e77:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e7a:	00 00                	add    BYTE PTR [eax],al
     e7c:	09 26                	or     DWORD PTR [esi],esp
     e7e:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     e81:	00 00                	add    BYTE PTR [eax],al
     e83:	0a 2e                	or     ch,BYTE PTR [esi]
     e85:	01 3f                	add    DWORD PTR [edi],edi
     e87:	19 03                	sbb    DWORD PTR [ebx],eax
     e89:	0e                   	push   cs
     e8a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e8c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e8e:	27                   	daa    
     e8f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e92:	11 01                	adc    DWORD PTR [ecx],eax
     e94:	12 06                	adc    al,BYTE PTR [esi]
     e96:	40                   	inc    eax
     e97:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     e9d:	00 01                	add    BYTE PTR [ecx],al
     e9f:	11 01                	adc    DWORD PTR [ecx],eax
     ea1:	25 0e 13 0b 03       	and    eax,0x30b130e
     ea6:	0e                   	push   cs
     ea7:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     ea9:	11 01                	adc    DWORD PTR [ecx],eax
     eab:	12 06                	adc    al,BYTE PTR [esi]
     ead:	10 17                	adc    BYTE PTR [edi],dl
     eaf:	00 00                	add    BYTE PTR [eax],al
     eb1:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     eb4:	0b 0b                	or     ecx,DWORD PTR [ebx]
     eb6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     eb9:	08 00                	or     BYTE PTR [eax],al
     ebb:	00 03                	add    BYTE PTR [ebx],al
     ebd:	16                   	push   ss
     ebe:	00 03                	add    BYTE PTR [ebx],al
     ec0:	0e                   	push   cs
     ec1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ec3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ec5:	49                   	dec    ecx
     ec6:	13 00                	adc    eax,DWORD PTR [eax]
     ec8:	00 04 24             	add    BYTE PTR [esp],al
     ecb:	00 0b                	add    BYTE PTR [ebx],cl
     ecd:	0b 3e                	or     edi,DWORD PTR [esi]
     ecf:	0b 03                	or     eax,DWORD PTR [ebx]
     ed1:	0e                   	push   cs
     ed2:	00 00                	add    BYTE PTR [eax],al
     ed4:	05 2e 01 3f 19       	add    eax,0x193f012e
     ed9:	03 0e                	add    ecx,DWORD PTR [esi]
     edb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     edd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     edf:	27                   	daa    
     ee0:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     ee3:	11 01                	adc    DWORD PTR [ecx],eax
     ee5:	12 06                	adc    al,BYTE PTR [esi]
     ee7:	40                   	inc    eax
     ee8:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     eee:	00 00                	add    BYTE PTR [eax],al
     ef0:	06                   	push   es
     ef1:	05 00 03 08 3a       	add    eax,0x3a080300
     ef6:	0b 3b                	or     edi,DWORD PTR [ebx]
     ef8:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     efb:	02 18                	add    bl,BYTE PTR [eax]
     efd:	00 00                	add    BYTE PTR [eax],al
     eff:	07                   	pop    es
     f00:	0f 00 0b             	str    WORD PTR [ebx]
     f03:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f06:	00 00                	add    BYTE PTR [eax],al
     f08:	08 26                	or     BYTE PTR [esi],ah
     f0a:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     f0d:	00 00                	add    BYTE PTR [eax],al
     f0f:	09 2e                	or     DWORD PTR [esi],ebp
     f11:	01 3f                	add    DWORD PTR [edi],edi
     f13:	19 03                	sbb    DWORD PTR [ebx],eax
     f15:	0e                   	push   cs
     f16:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f18:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f1a:	27                   	daa    
     f1b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f1e:	11 01                	adc    DWORD PTR [ecx],eax
     f20:	12 06                	adc    al,BYTE PTR [esi]
     f22:	40                   	inc    eax
     f23:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     f29:	00 01                	add    BYTE PTR [ecx],al
     f2b:	11 01                	adc    DWORD PTR [ecx],eax
     f2d:	25 0e 13 0b 03       	and    eax,0x30b130e
     f32:	0e                   	push   cs
     f33:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     f35:	11 01                	adc    DWORD PTR [ecx],eax
     f37:	12 06                	adc    al,BYTE PTR [esi]
     f39:	10 17                	adc    BYTE PTR [edi],dl
     f3b:	00 00                	add    BYTE PTR [eax],al
     f3d:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     f40:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f42:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f45:	08 00                	or     BYTE PTR [eax],al
     f47:	00 03                	add    BYTE PTR [ebx],al
     f49:	16                   	push   ss
     f4a:	00 03                	add    BYTE PTR [ebx],al
     f4c:	0e                   	push   cs
     f4d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f4f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f51:	49                   	dec    ecx
     f52:	13 00                	adc    eax,DWORD PTR [eax]
     f54:	00 04 24             	add    BYTE PTR [esp],al
     f57:	00 0b                	add    BYTE PTR [ebx],cl
     f59:	0b 3e                	or     edi,DWORD PTR [esi]
     f5b:	0b 03                	or     eax,DWORD PTR [ebx]
     f5d:	0e                   	push   cs
     f5e:	00 00                	add    BYTE PTR [eax],al
     f60:	05 2e 01 3f 19       	add    eax,0x193f012e
     f65:	03 0e                	add    ecx,DWORD PTR [esi]
     f67:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f69:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f6b:	27                   	daa    
     f6c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f6f:	11 01                	adc    DWORD PTR [ecx],eax
     f71:	12 06                	adc    al,BYTE PTR [esi]
     f73:	40                   	inc    eax
     f74:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     f7a:	00 00                	add    BYTE PTR [eax],al
     f7c:	06                   	push   es
     f7d:	05 00 03 08 3a       	add    eax,0x3a080300
     f82:	0b 3b                	or     edi,DWORD PTR [ebx]
     f84:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f87:	02 18                	add    bl,BYTE PTR [eax]
     f89:	00 00                	add    BYTE PTR [eax],al
     f8b:	07                   	pop    es
     f8c:	34 00                	xor    al,0x0
     f8e:	03 08                	add    ecx,DWORD PTR [eax]
     f90:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f92:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f94:	49                   	dec    ecx
     f95:	13 02                	adc    eax,DWORD PTR [edx]
     f97:	18 00                	sbb    BYTE PTR [eax],al
     f99:	00 08                	add    BYTE PTR [eax],cl
     f9b:	0f 00 0b             	str    WORD PTR [ebx]
     f9e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fa1:	00 00                	add    BYTE PTR [eax],al
     fa3:	09 26                	or     DWORD PTR [esi],esp
     fa5:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     fa8:	00 00                	add    BYTE PTR [eax],al
     faa:	0a 2e                	or     ch,BYTE PTR [esi]
     fac:	01 3f                	add    DWORD PTR [edi],edi
     fae:	19 03                	sbb    DWORD PTR [ebx],eax
     fb0:	0e                   	push   cs
     fb1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fb3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fb5:	27                   	daa    
     fb6:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     fb9:	11 01                	adc    DWORD PTR [ecx],eax
     fbb:	12 06                	adc    al,BYTE PTR [esi]
     fbd:	40                   	inc    eax
     fbe:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     fc4:	00 01                	add    BYTE PTR [ecx],al
     fc6:	11 01                	adc    DWORD PTR [ecx],eax
     fc8:	25 0e 13 0b 03       	and    eax,0x30b130e
     fcd:	0e                   	push   cs
     fce:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     fd0:	11 01                	adc    DWORD PTR [ecx],eax
     fd2:	12 06                	adc    al,BYTE PTR [esi]
     fd4:	10 17                	adc    BYTE PTR [edi],dl
     fd6:	00 00                	add    BYTE PTR [eax],al
     fd8:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     fdb:	0b 0b                	or     ecx,DWORD PTR [ebx]
     fdd:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     fe0:	0e                   	push   cs
     fe1:	00 00                	add    BYTE PTR [eax],al
     fe3:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     fe6:	0b 0b                	or     ecx,DWORD PTR [ebx]
     fe8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     feb:	08 00                	or     BYTE PTR [eax],al
     fed:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     ff0:	00 03                	add    BYTE PTR [ebx],al
     ff2:	0e                   	push   cs
     ff3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ff5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ff7:	49                   	dec    ecx
     ff8:	13 00                	adc    eax,DWORD PTR [eax]
     ffa:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1000:	49                   	dec    ecx
    1001:	13 00                	adc    eax,DWORD PTR [eax]
    1003:	00 06                	add    BYTE PTR [esi],al
    1005:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1009:	00 00                	add    BYTE PTR [eax],al
    100b:	07                   	pop    es
    100c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    100f:	19 03                	sbb    DWORD PTR [ebx],eax
    1011:	0e                   	push   cs
    1012:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1014:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1016:	27                   	daa    
    1017:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    101a:	11 01                	adc    DWORD PTR [ecx],eax
    101c:	12 06                	adc    al,BYTE PTR [esi]
    101e:	40                   	inc    eax
    101f:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1025:	00 00                	add    BYTE PTR [eax],al
    1027:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    102d:	0b 3b                	or     edi,DWORD PTR [ebx]
    102f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1032:	02 18                	add    bl,BYTE PTR [eax]
    1034:	00 00                	add    BYTE PTR [eax],al
    1036:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1039:	03 08                	add    ecx,DWORD PTR [eax]
    103b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    103d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    103f:	49                   	dec    ecx
    1040:	13 02                	adc    eax,DWORD PTR [edx]
    1042:	18 00                	sbb    BYTE PTR [eax],al
    1044:	00 0a                	add    BYTE PTR [edx],cl
    1046:	34 00                	xor    al,0x0
    1048:	03 0e                	add    ecx,DWORD PTR [esi]
    104a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    104c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    104e:	49                   	dec    ecx
    104f:	13 00                	adc    eax,DWORD PTR [eax]
    1051:	00 0b                	add    BYTE PTR [ebx],cl
    1053:	34 00                	xor    al,0x0
    1055:	03 08                	add    ecx,DWORD PTR [eax]
    1057:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1059:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    105b:	49                   	dec    ecx
    105c:	13 00                	adc    eax,DWORD PTR [eax]
    105e:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    1061:	00 03                	add    BYTE PTR [ebx],al
    1063:	0e                   	push   cs
    1064:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1066:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1068:	49                   	dec    ecx
    1069:	13 02                	adc    eax,DWORD PTR [edx]
    106b:	18 00                	sbb    BYTE PTR [eax],al
    106d:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    1073:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1075:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1077:	49                   	dec    ecx
    1078:	13 3f                	adc    edi,DWORD PTR [edi]
    107a:	19 02                	sbb    DWORD PTR [edx],eax
    107c:	18 00                	sbb    BYTE PTR [eax],al
    107e:	00 00                	add    BYTE PTR [eax],al
    1080:	01 11                	add    DWORD PTR [ecx],edx
    1082:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1088:	0e                   	push   cs
    1089:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    108b:	11 01                	adc    DWORD PTR [ecx],eax
    108d:	12 06                	adc    al,BYTE PTR [esi]
    108f:	10 17                	adc    BYTE PTR [edi],dl
    1091:	00 00                	add    BYTE PTR [eax],al
    1093:	02 2e                	add    ch,BYTE PTR [esi]
    1095:	01 3f                	add    DWORD PTR [edi],edi
    1097:	19 03                	sbb    DWORD PTR [ebx],eax
    1099:	0e                   	push   cs
    109a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    109c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    109e:	27                   	daa    
    109f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    10a2:	11 01                	adc    DWORD PTR [ecx],eax
    10a4:	12 06                	adc    al,BYTE PTR [esi]
    10a6:	40                   	inc    eax
    10a7:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    10ad:	00 00                	add    BYTE PTR [eax],al
    10af:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
    10b5:	0b 3b                	or     edi,DWORD PTR [ebx]
    10b7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    10ba:	02 18                	add    bl,BYTE PTR [eax]
    10bc:	00 00                	add    BYTE PTR [eax],al
    10be:	04 0f                	add    al,0xf
    10c0:	00 0b                	add    BYTE PTR [ebx],cl
    10c2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    10c5:	00 00                	add    BYTE PTR [eax],al
    10c7:	05 24 00 0b 0b       	add    eax,0xb0b0024
    10cc:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10cf:	0e                   	push   cs
    10d0:	00 00                	add    BYTE PTR [eax],al
    10d2:	06                   	push   es
    10d3:	24 00                	and    al,0x0
    10d5:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10d7:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10da:	08 00                	or     BYTE PTR [eax],al
    10dc:	00 00                	add    BYTE PTR [eax],al
    10de:	01 11                	add    DWORD PTR [ecx],edx
    10e0:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    10e6:	0e                   	push   cs
    10e7:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    10e9:	11 01                	adc    DWORD PTR [ecx],eax
    10eb:	12 06                	adc    al,BYTE PTR [esi]
    10ed:	10 17                	adc    BYTE PTR [edi],dl
    10ef:	00 00                	add    BYTE PTR [eax],al
    10f1:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    10f4:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10f6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10f9:	0e                   	push   cs
    10fa:	00 00                	add    BYTE PTR [eax],al
    10fc:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    10ff:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1101:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1104:	08 00                	or     BYTE PTR [eax],al
    1106:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1109:	00 03                	add    BYTE PTR [ebx],al
    110b:	0e                   	push   cs
    110c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    110e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1110:	49                   	dec    ecx
    1111:	13 00                	adc    eax,DWORD PTR [eax]
    1113:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1119:	49                   	dec    ecx
    111a:	13 00                	adc    eax,DWORD PTR [eax]
    111c:	00 06                	add    BYTE PTR [esi],al
    111e:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1122:	00 00                	add    BYTE PTR [eax],al
    1124:	07                   	pop    es
    1125:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1128:	19 03                	sbb    DWORD PTR [ebx],eax
    112a:	0e                   	push   cs
    112b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    112d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    112f:	27                   	daa    
    1130:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1133:	11 01                	adc    DWORD PTR [ecx],eax
    1135:	12 06                	adc    al,BYTE PTR [esi]
    1137:	40                   	inc    eax
    1138:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    113e:	00 00                	add    BYTE PTR [eax],al
    1140:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    1146:	0b 3b                	or     edi,DWORD PTR [ebx]
    1148:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    114b:	02 18                	add    bl,BYTE PTR [eax]
    114d:	00 00                	add    BYTE PTR [eax],al
    114f:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1152:	03 08                	add    ecx,DWORD PTR [eax]
    1154:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1156:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1158:	49                   	dec    ecx
    1159:	13 02                	adc    eax,DWORD PTR [edx]
    115b:	18 00                	sbb    BYTE PTR [eax],al
    115d:	00 0a                	add    BYTE PTR [edx],cl
    115f:	34 00                	xor    al,0x0
    1161:	03 0e                	add    ecx,DWORD PTR [esi]
    1163:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1165:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1167:	49                   	dec    ecx
    1168:	13 00                	adc    eax,DWORD PTR [eax]
    116a:	00 0b                	add    BYTE PTR [ebx],cl
    116c:	34 00                	xor    al,0x0
    116e:	03 08                	add    ecx,DWORD PTR [eax]
    1170:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1172:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1174:	49                   	dec    ecx
    1175:	13 00                	adc    eax,DWORD PTR [eax]
    1177:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    117a:	00 03                	add    BYTE PTR [ebx],al
    117c:	0e                   	push   cs
    117d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    117f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1181:	49                   	dec    ecx
    1182:	13 3f                	adc    edi,DWORD PTR [edi]
    1184:	19 02                	sbb    DWORD PTR [edx],eax
    1186:	18 00                	sbb    BYTE PTR [eax],al
    1188:	00 00                	add    BYTE PTR [eax],al
    118a:	01 11                	add    DWORD PTR [ecx],edx
    118c:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1192:	0e                   	push   cs
    1193:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1195:	11 01                	adc    DWORD PTR [ecx],eax
    1197:	12 06                	adc    al,BYTE PTR [esi]
    1199:	10 17                	adc    BYTE PTR [edi],dl
    119b:	00 00                	add    BYTE PTR [eax],al
    119d:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    11a0:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11a2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11a5:	0e                   	push   cs
    11a6:	00 00                	add    BYTE PTR [eax],al
    11a8:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    11ab:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11ad:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11b0:	08 00                	or     BYTE PTR [eax],al
    11b2:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    11b5:	00 03                	add    BYTE PTR [ebx],al
    11b7:	0e                   	push   cs
    11b8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11ba:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11bc:	49                   	dec    ecx
    11bd:	13 00                	adc    eax,DWORD PTR [eax]
    11bf:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    11c5:	49                   	dec    ecx
    11c6:	13 00                	adc    eax,DWORD PTR [eax]
    11c8:	00 06                	add    BYTE PTR [esi],al
    11ca:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    11cd:	19 03                	sbb    DWORD PTR [ebx],eax
    11cf:	0e                   	push   cs
    11d0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11d2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11d4:	27                   	daa    
    11d5:	19 11                	sbb    DWORD PTR [ecx],edx
    11d7:	01 12                	add    DWORD PTR [edx],edx
    11d9:	06                   	push   es
    11da:	40                   	inc    eax
    11db:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    11e1:	00 00                	add    BYTE PTR [eax],al
    11e3:	07                   	pop    es
    11e4:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    11e9:	0b 3b                	or     edi,DWORD PTR [ebx]
    11eb:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    11ee:	02 18                	add    bl,BYTE PTR [eax]
    11f0:	00 00                	add    BYTE PTR [eax],al
    11f2:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    11f5:	03 08                	add    ecx,DWORD PTR [eax]
    11f7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11f9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11fb:	49                   	dec    ecx
    11fc:	13 02                	adc    eax,DWORD PTR [edx]
    11fe:	18 00                	sbb    BYTE PTR [eax],al
    1200:	00 09                	add    BYTE PTR [ecx],cl
    1202:	34 00                	xor    al,0x0
    1204:	03 0e                	add    ecx,DWORD PTR [esi]
    1206:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1208:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    120a:	49                   	dec    ecx
    120b:	13 3f                	adc    edi,DWORD PTR [edi]
    120d:	19 02                	sbb    DWORD PTR [edx],eax
    120f:	18 00                	sbb    BYTE PTR [eax],al
    1211:	00 00                	add    BYTE PTR [eax],al
    1213:	01 11                	add    DWORD PTR [ecx],edx
    1215:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    121b:	0e                   	push   cs
    121c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    121e:	11 01                	adc    DWORD PTR [ecx],eax
    1220:	12 06                	adc    al,BYTE PTR [esi]
    1222:	10 17                	adc    BYTE PTR [edi],dl
    1224:	00 00                	add    BYTE PTR [eax],al
    1226:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1229:	0b 0b                	or     ecx,DWORD PTR [ebx]
    122b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    122e:	0e                   	push   cs
    122f:	00 00                	add    BYTE PTR [eax],al
    1231:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1234:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1236:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1239:	08 00                	or     BYTE PTR [eax],al
    123b:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    123e:	00 03                	add    BYTE PTR [ebx],al
    1240:	0e                   	push   cs
    1241:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1243:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1245:	49                   	dec    ecx
    1246:	13 00                	adc    eax,DWORD PTR [eax]
    1248:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    124e:	49                   	dec    ecx
    124f:	13 00                	adc    eax,DWORD PTR [eax]
    1251:	00 06                	add    BYTE PTR [esi],al
    1253:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1256:	19 03                	sbb    DWORD PTR [ebx],eax
    1258:	0e                   	push   cs
    1259:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    125b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    125d:	27                   	daa    
    125e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1261:	11 01                	adc    DWORD PTR [ecx],eax
    1263:	12 06                	adc    al,BYTE PTR [esi]
    1265:	40                   	inc    eax
    1266:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    126c:	00 00                	add    BYTE PTR [eax],al
    126e:	07                   	pop    es
    126f:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    1274:	0b 3b                	or     edi,DWORD PTR [ebx]
    1276:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1279:	02 18                	add    bl,BYTE PTR [eax]
    127b:	00 00                	add    BYTE PTR [eax],al
    127d:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    1280:	03 08                	add    ecx,DWORD PTR [eax]
    1282:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1284:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1286:	49                   	dec    ecx
    1287:	13 02                	adc    eax,DWORD PTR [edx]
    1289:	18 00                	sbb    BYTE PTR [eax],al
    128b:	00 09                	add    BYTE PTR [ecx],cl
    128d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1290:	19 03                	sbb    DWORD PTR [ebx],eax
    1292:	0e                   	push   cs
    1293:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1295:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1297:	27                   	daa    
    1298:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    129b:	11 01                	adc    DWORD PTR [ecx],eax
    129d:	12 06                	adc    al,BYTE PTR [esi]
    129f:	40                   	inc    eax
    12a0:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    12a6:	00 00                	add    BYTE PTR [eax],al
    12a8:	0a 01                	or     al,BYTE PTR [ecx]
    12aa:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
    12ad:	01 13                	add    DWORD PTR [ebx],edx
    12af:	00 00                	add    BYTE PTR [eax],al
    12b1:	0b 21                	or     esp,DWORD PTR [ecx]
    12b3:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    12b6:	2f                   	das    
    12b7:	0b 00                	or     eax,DWORD PTR [eax]
    12b9:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    12bc:	00 03                	add    BYTE PTR [ebx],al
    12be:	0e                   	push   cs
    12bf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12c1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12c3:	49                   	dec    ecx
    12c4:	13 02                	adc    eax,DWORD PTR [edx]
    12c6:	18 00                	sbb    BYTE PTR [eax],al
    12c8:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    12ce:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12d0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12d2:	49                   	dec    ecx
    12d3:	13 3f                	adc    edi,DWORD PTR [edi]
    12d5:	19 02                	sbb    DWORD PTR [edx],eax
    12d7:	18 00                	sbb    BYTE PTR [eax],al
    12d9:	00 00                	add    BYTE PTR [eax],al
    12db:	01 11                	add    DWORD PTR [ecx],edx
    12dd:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    12e3:	0e                   	push   cs
    12e4:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    12e6:	11 01                	adc    DWORD PTR [ecx],eax
    12e8:	12 06                	adc    al,BYTE PTR [esi]
    12ea:	10 17                	adc    BYTE PTR [edi],dl
    12ec:	00 00                	add    BYTE PTR [eax],al
    12ee:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    12f1:	03 0e                	add    ecx,DWORD PTR [esi]
    12f3:	0b 0b                	or     ecx,DWORD PTR [ebx]
    12f5:	49                   	dec    ecx
    12f6:	13 3a                	adc    edi,DWORD PTR [edx]
    12f8:	0b 3b                	or     edi,DWORD PTR [ebx]
    12fa:	0b 01                	or     eax,DWORD PTR [ecx]
    12fc:	13 00                	adc    eax,DWORD PTR [eax]
    12fe:	00 03                	add    BYTE PTR [ebx],al
    1300:	28 00                	sub    BYTE PTR [eax],al
    1302:	03 0e                	add    ecx,DWORD PTR [esi]
    1304:	1c 0b                	sbb    al,0xb
    1306:	00 00                	add    BYTE PTR [eax],al
    1308:	04 28                	add    al,0x28
    130a:	00 03                	add    BYTE PTR [ebx],al
    130c:	0e                   	push   cs
    130d:	1c 05                	sbb    al,0x5
    130f:	00 00                	add    BYTE PTR [eax],al
    1311:	05 24 00 0b 0b       	add    eax,0xb0b0024
    1316:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1319:	0e                   	push   cs
    131a:	00 00                	add    BYTE PTR [eax],al
    131c:	06                   	push   es
    131d:	24 00                	and    al,0x0
    131f:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1321:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1324:	08 00                	or     BYTE PTR [eax],al
    1326:	00 07                	add    BYTE PTR [edi],al
    1328:	16                   	push   ss
    1329:	00 03                	add    BYTE PTR [ebx],al
    132b:	0e                   	push   cs
    132c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    132e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1330:	49                   	dec    ecx
    1331:	13 00                	adc    eax,DWORD PTR [eax]
    1333:	00 08                	add    BYTE PTR [eax],cl
    1335:	13 01                	adc    eax,DWORD PTR [ecx]
    1337:	03 08                	add    ecx,DWORD PTR [eax]
    1339:	0b 0b                	or     ecx,DWORD PTR [ebx]
    133b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    133d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    133f:	01 13                	add    DWORD PTR [ebx],edx
    1341:	00 00                	add    BYTE PTR [eax],al
    1343:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
    1349:	0b 3b                	or     edi,DWORD PTR [ebx]
    134b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    134e:	38 0b                	cmp    BYTE PTR [ebx],cl
    1350:	00 00                	add    BYTE PTR [eax],al
    1352:	0a 0f                	or     cl,BYTE PTR [edi]
    1354:	00 0b                	add    BYTE PTR [ebx],cl
    1356:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1359:	00 00                	add    BYTE PTR [eax],al
    135b:	0b 26                	or     esp,DWORD PTR [esi]
    135d:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1360:	00 00                	add    BYTE PTR [eax],al
    1362:	0c 2e                	or     al,0x2e
    1364:	01 3f                	add    DWORD PTR [edi],edi
    1366:	19 03                	sbb    DWORD PTR [ebx],eax
    1368:	0e                   	push   cs
    1369:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    136b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    136d:	49                   	dec    ecx
    136e:	13 11                	adc    edx,DWORD PTR [ecx]
    1370:	01 12                	add    DWORD PTR [edx],edx
    1372:	06                   	push   es
    1373:	40                   	inc    eax
    1374:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    137a:	00 00                	add    BYTE PTR [eax],al
    137c:	0d 34 00 03 0e       	or     eax,0xe030034
    1381:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1383:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1385:	49                   	dec    ecx
    1386:	13 02                	adc    eax,DWORD PTR [edx]
    1388:	18 00                	sbb    BYTE PTR [eax],al
    138a:	00 0e                	add    BYTE PTR [esi],cl
    138c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    138f:	19 03                	sbb    DWORD PTR [ebx],eax
    1391:	0e                   	push   cs
    1392:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1394:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1396:	27                   	daa    
    1397:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    139a:	11 01                	adc    DWORD PTR [ecx],eax
    139c:	12 06                	adc    al,BYTE PTR [esi]
    139e:	40                   	inc    eax
    139f:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    13a5:	00 00                	add    BYTE PTR [eax],al
    13a7:	0f 05                	syscall 
    13a9:	00 03                	add    BYTE PTR [ebx],al
    13ab:	0e                   	push   cs
    13ac:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13ae:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13b0:	49                   	dec    ecx
    13b1:	13 02                	adc    eax,DWORD PTR [edx]
    13b3:	18 00                	sbb    BYTE PTR [eax],al
    13b5:	00 10                	add    BYTE PTR [eax],dl
    13b7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    13ba:	19 03                	sbb    DWORD PTR [ebx],eax
    13bc:	0e                   	push   cs
    13bd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13bf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13c1:	27                   	daa    
    13c2:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13c5:	11 01                	adc    DWORD PTR [ecx],eax
    13c7:	12 06                	adc    al,BYTE PTR [esi]
    13c9:	40                   	inc    eax
    13ca:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    13d0:	00 00                	add    BYTE PTR [eax],al
    13d2:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    13d5:	03 08                	add    ecx,DWORD PTR [eax]
    13d7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13d9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13db:	49                   	dec    ecx
    13dc:	13 02                	adc    eax,DWORD PTR [edx]
    13de:	18 00                	sbb    BYTE PTR [eax],al
    13e0:	00 12                	add    BYTE PTR [edx],dl
    13e2:	34 00                	xor    al,0x0
    13e4:	03 0e                	add    ecx,DWORD PTR [esi]
    13e6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13e8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13ea:	49                   	dec    ecx
    13eb:	13 3f                	adc    edi,DWORD PTR [edi]
    13ed:	19 02                	sbb    DWORD PTR [edx],eax
    13ef:	18 00                	sbb    BYTE PTR [eax],al
    13f1:	00 13                	add    BYTE PTR [ebx],dl
    13f3:	01 01                	add    DWORD PTR [ecx],eax
    13f5:	49                   	dec    ecx
    13f6:	13 01                	adc    eax,DWORD PTR [ecx]
    13f8:	13 00                	adc    eax,DWORD PTR [eax]
    13fa:	00 14 21             	add    BYTE PTR [ecx+eiz*1],dl
    13fd:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1400:	2f                   	das    
    1401:	0b 00                	or     eax,DWORD PTR [eax]
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
   c:	00 00                	add    BYTE PTR [eax],al
   e:	00 00                	add    BYTE PTR [eax],al
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 30                	add    BYTE PTR [eax],dh
  14:	70 00                	jo     16 <sysEnter_Vector-0x12ffea>
	...
  1e:	00 00                	add    BYTE PTR [eax],al
  20:	1c 00                	sbb    al,0x0
  22:	00 00                	add    BYTE PTR [eax],al
  24:	02 00                	add    al,BYTE PTR [eax]
  26:	63 01                	arpl   WORD PTR [ecx],ax
  28:	00 00                	add    BYTE PTR [eax],al
  2a:	04 00                	add    al,0x0
  2c:	00 00                	add    BYTE PTR [eax],al
  2e:	00 00                	add    BYTE PTR [eax],al
  30:	70 00                	jo     32 <sysEnter_Vector-0x12ffce>
  32:	00 30                	add    BYTE PTR [eax],dh
  34:	aa                   	stos   BYTE PTR es:[edi],al
	...
  3d:	00 00                	add    BYTE PTR [eax],al
  3f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	05 03 00 00 04       	add    eax,0x4000003
  4b:	00 00                	add    BYTE PTR [eax],al
  4d:	00 00                	add    BYTE PTR [eax],al
  4f:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
  52:	00 30                	add    BYTE PTR [eax],dh
  54:	97                   	xchg   edi,eax
	...
  5d:	00 00                	add    BYTE PTR [eax],al
  5f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	4a                   	dec    edx
  67:	04 00                	add    al,0x0
  69:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	b4 01                	mov    ah,0x1
  72:	00 30                	add    BYTE PTR [eax],dh
  74:	49                   	dec    ecx
  75:	02 00                	add    al,BYTE PTR [eax]
	...
  7f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	60                   	pusha  
  87:	06                   	push   es
  88:	00 00                	add    BYTE PTR [eax],al
  8a:	04 00                	add    al,0x0
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  93:	30 6b 02             	xor    BYTE PTR [ebx+0x2],ch
	...
  9e:	00 00                	add    BYTE PTR [eax],al
  a0:	1c 00                	sbb    al,0x0
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	16                   	push   ss
  a7:	08 00                	or     BYTE PTR [eax],al
  a9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	6c                   	ins    BYTE PTR es:[edi],dx
  b1:	06                   	push   es
  b2:	00 30                	add    BYTE PTR [eax],dh
  b4:	f2 00 00             	repnz add BYTE PTR [eax],al
	...
  bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	14 0b                	adc    al,0xb
  c8:	00 00                	add    BYTE PTR [eax],al
  ca:	04 00                	add    al,0x0
  cc:	00 00                	add    BYTE PTR [eax],al
  ce:	00 00                	add    BYTE PTR [eax],al
  d0:	60                   	pusha  
  d1:	07                   	pop    es
  d2:	00 30                	add    BYTE PTR [eax],dh
  d4:	52                   	push   edx
  d5:	01 00                	add    DWORD PTR [eax],eax
	...
  df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	c6                   	(bad)  
  e7:	0d 00 00 04 00       	or     eax,0x40000
  ec:	00 00                	add    BYTE PTR [eax],al
  ee:	00 00                	add    BYTE PTR [eax],al
  f0:	b4 08                	mov    ah,0x8
  f2:	00 30                	add    BYTE PTR [eax],dh
  f4:	f3 05 00 00 00 00    	repz add eax,0x0
  fa:	00 00                	add    BYTE PTR [eax],al
  fc:	00 00                	add    BYTE PTR [eax],al
  fe:	00 00                	add    BYTE PTR [eax],al
 100:	1c 00                	sbb    al,0x0
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	4f                   	dec    edi
 107:	14 00                	adc    al,0x0
 109:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 10c:	00 00                	add    BYTE PTR [eax],al
 10e:	00 00                	add    BYTE PTR [eax],al
 110:	a8 0e                	test   al,0xe
 112:	00 30                	add    BYTE PTR [eax],dh
 114:	6d                   	ins    DWORD PTR es:[edi],dx
 115:	03 00                	add    eax,DWORD PTR [eax]
	...
 11f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	be 17 00 00 04       	mov    esi,0x4000017
 12b:	00 00                	add    BYTE PTR [eax],al
 12d:	00 00                	add    BYTE PTR [eax],al
 12f:	00 18                	add    BYTE PTR [eax],bl
 131:	12 00                	adc    al,BYTE PTR [eax]
 133:	30 9b 01 00 00 00    	xor    BYTE PTR [ebx+0x1],bl
 139:	00 00                	add    BYTE PTR [eax],al
 13b:	00 00                	add    BYTE PTR [eax],al
 13d:	00 00                	add    BYTE PTR [eax],al
 13f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	ac                   	lods   al,BYTE PTR ds:[esi]
 147:	19 00                	sbb    DWORD PTR [eax],eax
 149:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 14c:	00 00                	add    BYTE PTR [eax],al
 14e:	00 00                	add    BYTE PTR [eax],al
 150:	b4 13                	mov    ah,0x13
 152:	00 30                	add    BYTE PTR [eax],dh
 154:	e7 00                	out    0x0,eax
	...
 15e:	00 00                	add    BYTE PTR [eax],al
 160:	1c 00                	sbb    al,0x0
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	9b                   	fwait
 167:	1b 00                	sbb    eax,DWORD PTR [eax]
 169:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 16c:	00 00                	add    BYTE PTR [eax],al
 16e:	00 00                	add    BYTE PTR [eax],al
 170:	9c                   	pushf  
 171:	14 00                	adc    al,0x0
 173:	30 14 00             	xor    BYTE PTR [eax+eax*1],dl
	...
 17e:	00 00                	add    BYTE PTR [eax],al
 180:	1c 00                	sbb    al,0x0
 182:	00 00                	add    BYTE PTR [eax],al
 184:	02 00                	add    al,BYTE PTR [eax]
 186:	14 1d                	adc    al,0x1d
 188:	00 00                	add    BYTE PTR [eax],al
 18a:	04 00                	add    al,0x0
 18c:	00 00                	add    BYTE PTR [eax],al
 18e:	00 00                	add    BYTE PTR [eax],al
 190:	b0 14                	mov    al,0x14
 192:	00 30                	add    BYTE PTR [eax],dh
 194:	29 00                	sub    DWORD PTR [eax],eax
	...
 19e:	00 00                	add    BYTE PTR [eax],al
 1a0:	1c 00                	sbb    al,0x0
 1a2:	00 00                	add    BYTE PTR [eax],al
 1a4:	02 00                	add    al,BYTE PTR [eax]
 1a6:	fc                   	cld    
 1a7:	1e                   	push   ds
 1a8:	00 00                	add    BYTE PTR [eax],al
 1aa:	04 00                	add    al,0x0
 1ac:	00 00                	add    BYTE PTR [eax],al
 1ae:	00 00                	add    BYTE PTR [eax],al
 1b0:	dc 14 00             	fcom   QWORD PTR [eax+eax*1]
 1b3:	30 84 00 00 00 00 00 	xor    BYTE PTR [eax+eax*1+0x0],al
 1ba:	00 00                	add    BYTE PTR [eax],al
 1bc:	00 00                	add    BYTE PTR [eax],al
 1be:	00 00                	add    BYTE PTR [eax],al
 1c0:	1c 00                	sbb    al,0x0
 1c2:	00 00                	add    BYTE PTR [eax],al
 1c4:	02 00                	add    al,BYTE PTR [eax]
 1c6:	58                   	pop    eax
 1c7:	23 00                	and    eax,DWORD PTR [eax]
 1c9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 1cc:	00 00                	add    BYTE PTR [eax],al
 1ce:	00 00                	add    BYTE PTR [eax],al
 1d0:	60                   	pusha  
 1d1:	15 00 30 eb 00       	adc    eax,0xeb3000
	...
 1de:	00 00                	add    BYTE PTR [eax],al
 1e0:	1c 00                	sbb    al,0x0
 1e2:	00 00                	add    BYTE PTR [eax],al
 1e4:	02 00                	add    al,BYTE PTR [eax]
 1e6:	09 25 00 00 04 00    	or     DWORD PTR ds:0x40000,esp
 1ec:	00 00                	add    BYTE PTR [eax],al
 1ee:	00 00                	add    BYTE PTR [eax],al
 1f0:	4c                   	dec    esp
 1f1:	16                   	push   ss
 1f2:	00 30                	add    BYTE PTR [eax],dh
 1f4:	5e                   	pop    esi
	...
 1fd:	00 00                	add    BYTE PTR [eax],al
 1ff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 202:	00 00                	add    BYTE PTR [eax],al
 204:	02 00                	add    al,BYTE PTR [eax]
 206:	79 26                	jns    22e <sysEnter_Vector-0x12fdd2>
 208:	00 00                	add    BYTE PTR [eax],al
 20a:	04 00                	add    al,0x0
 20c:	00 00                	add    BYTE PTR [eax],al
 20e:	00 00                	add    BYTE PTR [eax],al
 210:	ac                   	lods   al,BYTE PTR ds:[esi]
 211:	16                   	push   ss
 212:	00 30                	add    BYTE PTR [eax],dh
 214:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
 21a:	00 00                	add    BYTE PTR [eax],al
 21c:	00 00                	add    BYTE PTR [eax],al
 21e:	00 00                	add    BYTE PTR [eax],al
 220:	1c 00                	sbb    al,0x0
 222:	00 00                	add    BYTE PTR [eax],al
 224:	02 00                	add    al,BYTE PTR [eax]
 226:	46                   	inc    esi
 227:	28 00                	sub    BYTE PTR [eax],al
 229:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 22c:	00 00                	add    BYTE PTR [eax],al
 22e:	00 00                	add    BYTE PTR [eax],al
 230:	74 17                	je     249 <sysEnter_Vector-0x12fdb7>
 232:	00 30                	add    BYTE PTR [eax],dh
 234:	89 00                	mov    DWORD PTR [eax],eax
	...
 23e:	00 00                	add    BYTE PTR [eax],al
 240:	1c 00                	sbb    al,0x0
 242:	00 00                	add    BYTE PTR [eax],al
 244:	02 00                	add    al,BYTE PTR [eax]
 246:	96                   	xchg   esi,eax
 247:	29 00                	sub    DWORD PTR [eax],eax
 249:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 24c:	00 00                	add    BYTE PTR [eax],al
 24e:	00 00                	add    BYTE PTR [eax],al
 250:	00 18                	add    BYTE PTR [eax],bl
 252:	00 30                	add    BYTE PTR [eax],dh
 254:	62 00                	bound  eax,QWORD PTR [eax]
	...
 25e:	00 00                	add    BYTE PTR [eax],al
 260:	1c 00                	sbb    al,0x0
 262:	00 00                	add    BYTE PTR [eax],al
 264:	02 00                	add    al,BYTE PTR [eax]
 266:	64 2a 00             	sub    al,BYTE PTR fs:[eax]
 269:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 26c:	00 00                	add    BYTE PTR [eax],al
 26e:	00 00                	add    BYTE PTR [eax],al
 270:	64 18 00             	sbb    BYTE PTR fs:[eax],al
 273:	30 ce                	xor    dh,cl
	...
 27d:	00 00                	add    BYTE PTR [eax],al
 27f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 282:	00 00                	add    BYTE PTR [eax],al
 284:	02 00                	add    al,BYTE PTR [eax]
 286:	46                   	inc    esi
 287:	2b 00                	sub    eax,DWORD PTR [eax]
 289:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 28c:	00 00                	add    BYTE PTR [eax],al
 28e:	00 00                	add    BYTE PTR [eax],al
 290:	34 19                	xor    al,0x19
 292:	00 30                	add    BYTE PTR [eax],dh
 294:	80 00 00             	add    BYTE PTR [eax],0x0
	...
 29f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2a2:	00 00                	add    BYTE PTR [eax],al
 2a4:	02 00                	add    al,BYTE PTR [eax]
 2a6:	3a 2c 00             	cmp    ch,BYTE PTR [eax+eax*1]
 2a9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 2ac:	00 00                	add    BYTE PTR [eax],al
 2ae:	00 00                	add    BYTE PTR [eax],al
 2b0:	b4 19                	mov    ah,0x19
 2b2:	00 30                	add    BYTE PTR [eax],dh
 2b4:	7d 01                	jge    2b7 <sysEnter_Vector-0x12fd49>
	...
 2be:	00 00                	add    BYTE PTR [eax],al
 2c0:	1c 00                	sbb    al,0x0
 2c2:	00 00                	add    BYTE PTR [eax],al
 2c4:	02 00                	add    al,BYTE PTR [eax]
 2c6:	d0 2d 00 00 04 00    	shr    BYTE PTR ds:0x40000,1
 2cc:	00 00                	add    BYTE PTR [eax],al
 2ce:	00 00                	add    BYTE PTR [eax],al
 2d0:	34 1b                	xor    al,0x1b
 2d2:	00 30                	add    BYTE PTR [eax],dh
 2d4:	1d 00 00 00 00       	sbb    eax,0x0
 2d9:	00 00                	add    BYTE PTR [eax],al
 2db:	00 00                	add    BYTE PTR [eax],al
 2dd:	00 00                	add    BYTE PTR [eax],al
 2df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2e2:	00 00                	add    BYTE PTR [eax],al
 2e4:	02 00                	add    al,BYTE PTR [eax]
 2e6:	40                   	inc    eax
 2e7:	2e 00 00             	add    BYTE PTR cs:[eax],al
 2ea:	04 00                	add    al,0x0
 2ec:	00 00                	add    BYTE PTR [eax],al
 2ee:	00 00                	add    BYTE PTR [eax],al
 2f0:	54                   	push   esp
 2f1:	1b 00                	sbb    eax,DWORD PTR [eax]
 2f3:	30 9c 01 00 00 00 00 	xor    BYTE PTR [ecx+eax*1+0x0],bl
 2fa:	00 00                	add    BYTE PTR [eax],al
 2fc:	00 00                	add    BYTE PTR [eax],al
 2fe:	00 00                	add    BYTE PTR [eax],al
 300:	1c 00                	sbb    al,0x0
 302:	00 00                	add    BYTE PTR [eax],al
 304:	02 00                	add    al,BYTE PTR [eax]
 306:	d4 2f                	aam    0x2f
 308:	00 00                	add    BYTE PTR [eax],al
 30a:	04 00                	add    al,0x0
 30c:	00 00                	add    BYTE PTR [eax],al
 30e:	00 00                	add    BYTE PTR [eax],al
 310:	f0 1c 00             	lock sbb al,0x0
 313:	30 b6 00 00 00 00    	xor    BYTE PTR [esi+0x0],dh
 319:	00 00                	add    BYTE PTR [eax],al
 31b:	00 00                	add    BYTE PTR [eax],al
 31d:	00 00                	add    BYTE PTR [eax],al
 31f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 322:	00 00                	add    BYTE PTR [eax],al
 324:	02 00                	add    al,BYTE PTR [eax]
 326:	3a 31                	cmp    dh,BYTE PTR [ecx]
 328:	00 00                	add    BYTE PTR [eax],al
 32a:	04 00                	add    al,0x0
 32c:	00 00                	add    BYTE PTR [eax],al
 32e:	00 00                	add    BYTE PTR [eax],al
 330:	a8 1d                	test   al,0x1d
 332:	00 30                	add    BYTE PTR [eax],dh
 334:	8b 00                	mov    eax,DWORD PTR [eax]
	...
 33e:	00 00                	add    BYTE PTR [eax],al
 340:	1c 00                	sbb    al,0x0
 342:	00 00                	add    BYTE PTR [eax],al
 344:	02 00                	add    al,BYTE PTR [eax]
 346:	d1                   	(bad)  
 347:	32 00                	xor    al,BYTE PTR [eax]
 349:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 34c:	00 00                	add    BYTE PTR [eax],al
 34e:	00 00                	add    BYTE PTR [eax],al
 350:	34 1e                	xor    al,0x1e
 352:	00 30                	add    BYTE PTR [eax],dh
 354:	bb 0c 00 00 00       	mov    ebx,0xc
 359:	00 00                	add    BYTE PTR [eax],al
 35b:	00 00                	add    BYTE PTR [eax],al
 35d:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	d0 00                	rol    BYTE PTR [eax],1
       2:	00 00                	add    BYTE PTR [eax],al
       4:	02 00                	add    al,BYTE PTR [eax]
       6:	b0 00                	mov    al,0x0
       8:	00 00                	add    BYTE PTR [eax],al
       a:	01 01                	add    DWORD PTR [ecx],eax
       c:	fb                   	sti    
       d:	0e                   	push   cs
       e:	0d 00 01 01 01       	or     eax,0x1010100
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
      1b:	2e                   	cs
      1c:	2e                   	cs
      1d:	2f                   	das    
      1e:	2e                   	cs
      1f:	2e                   	cs
      20:	2f                   	das    
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      25:	6a 2f                	push   0x2f
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      31:	63 2f                	arpl   WORD PTR [edi],bp
      33:	73 74                	jae    a9 <sysEnter_Vector-0x12ff57>
      35:	72 69                	jb     a0 <sysEnter_Vector-0x12ff60>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <sysEnter_Vector-0x12ffc5>
      3b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      42:	00 2f                	add    BYTE PTR [edi],ch
      44:	68 6f 6d 65 2f       	push   0x2f656d6f
      49:	79 6f                	jns    ba <sysEnter_Vector-0x12ff46>
      4b:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
      52:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
      55:	73 73                	jae    ca <sysEnter_Vector-0x12ff36>
      57:	2f                   	das    
      58:	6c                   	ins    BYTE PTR es:[edi],dx
      59:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
      60:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
      66:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
      6c:	78 2d                	js     9b <sysEnter_Vector-0x12ff65>
      6e:	67 6e                	outs   dx,BYTE PTR ds:[si]
      70:	75 2f                	jne    a1 <sysEnter_Vector-0x12ff5f>
      72:	35 2e 33 2e 30       	xor    eax,0x302e332e
      77:	2f                   	das    
      78:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      7f:	00 00                	add    BYTE PTR [eax],al
      81:	73 74                	jae    f7 <sysEnter_Vector-0x12ff09>
      83:	72 63                	jb     e8 <sysEnter_Vector-0x12ff18>
      85:	68 72 2e 63 00       	push   0x632e72
      8a:	01 00                	add    DWORD PTR [eax],eax
      8c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
      8f:	6c                   	ins    BYTE PTR es:[edi],dx
      90:	6c                   	ins    BYTE PTR es:[edi],dx
      91:	6f                   	outs   dx,DWORD PTR ds:[esi]
      92:	63 2e                	arpl   WORD PTR [esi],bp
      94:	68 00 02 00 00       	push   0x200
      99:	6c                   	ins    BYTE PTR es:[edi],dx
      9a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
      a1:	4f                   	dec    edi
      a2:	53                   	push   ebx
      a3:	2e                   	cs
      a4:	68 00 02 00 00       	push   0x200
      a9:	73 74                	jae    11f <sysEnter_Vector-0x12fee1>
      ab:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
      b2:	63 
      b3:	2e                   	cs
      b4:	68 00 03 00 00       	push   0x300
      b9:	00 00                	add    BYTE PTR [eax],al
      bb:	05 02 00 00 00       	add    eax,0x2
      c0:	30 1a                	xor    BYTE PTR [edx],bl
      c2:	c9                   	leave  
      c3:	2f                   	das    
      c4:	f3 72 cb             	repz jb 92 <sysEnter_Vector-0x12ff6e>
      c7:	3d 31 c9 2f f3       	cmp    eax,0xf32fc931
      cc:	72 cb                	jb     99 <sysEnter_Vector-0x12ff67>
      ce:	3d 02 02 00 01       	cmp    eax,0x1000202
      d3:	01 03                	add    DWORD PTR [ebx],eax
      d5:	01 00                	add    DWORD PTR [eax],eax
      d7:	00 02                	add    BYTE PTR [edx],al
      d9:	00 b1 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],dh
      df:	01 fb                	add    ebx,edi
      e1:	0e                   	push   cs
      e2:	0d 00 01 01 01       	or     eax,0x1010100
      e7:	01 00                	add    DWORD PTR [eax],eax
      e9:	00 00                	add    BYTE PTR [eax],al
      eb:	01 00                	add    DWORD PTR [eax],eax
      ed:	00 01                	add    BYTE PTR [ecx],al
      ef:	2e                   	cs
      f0:	2e                   	cs
      f1:	2f                   	das    
      f2:	2e                   	cs
      f3:	2e                   	cs
      f4:	2f                   	das    
      f5:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      f9:	6a 2f                	push   0x2f
      fb:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      fe:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     105:	63 2f                	arpl   WORD PTR [edi],bp
     107:	73 74                	jae    17d <sysEnter_Vector-0x12fe83>
     109:	72 69                	jb     174 <sysEnter_Vector-0x12fe8c>
     10b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     10c:	67 73 00             	addr16 jae 10f <sysEnter_Vector-0x12fef1>
     10f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     116:	00 2f                	add    BYTE PTR [edi],ch
     118:	68 6f 6d 65 2f       	push   0x2f656d6f
     11d:	79 6f                	jns    18e <sysEnter_Vector-0x12fe72>
     11f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     126:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     129:	73 73                	jae    19e <sysEnter_Vector-0x12fe62>
     12b:	2f                   	das    
     12c:	6c                   	ins    BYTE PTR es:[edi],dx
     12d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     134:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     13a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     140:	78 2d                	js     16f <sysEnter_Vector-0x12fe91>
     142:	67 6e                	outs   dx,BYTE PTR ds:[si]
     144:	75 2f                	jne    175 <sysEnter_Vector-0x12fe8b>
     146:	35 2e 33 2e 30       	xor    eax,0x302e332e
     14b:	2f                   	das    
     14c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     153:	00 00                	add    BYTE PTR [eax],al
     155:	73 74                	jae    1cb <sysEnter_Vector-0x12fe35>
     157:	72 63                	jb     1bc <sysEnter_Vector-0x12fe44>
     159:	73 70                	jae    1cb <sysEnter_Vector-0x12fe35>
     15b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     15c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     15f:	01 00                	add    DWORD PTR [eax],eax
     161:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     164:	6c                   	ins    BYTE PTR es:[edi],dx
     165:	6c                   	ins    BYTE PTR es:[edi],dx
     166:	6f                   	outs   dx,DWORD PTR ds:[esi]
     167:	63 2e                	arpl   WORD PTR [esi],bp
     169:	68 00 02 00 00       	push   0x200
     16e:	6c                   	ins    BYTE PTR es:[edi],dx
     16f:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     176:	4f                   	dec    edi
     177:	53                   	push   ebx
     178:	2e                   	cs
     179:	68 00 02 00 00       	push   0x200
     17e:	73 74                	jae    1f4 <sysEnter_Vector-0x12fe0c>
     180:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     187:	63 
     188:	2e                   	cs
     189:	68 00 03 00 00       	push   0x300
     18e:	00 00                	add    BYTE PTR [eax],al
     190:	05 02 70 00 00       	add    eax,0x7002
     195:	30 03                	xor    BYTE PTR [ebx],al
     197:	25 01 e7 9f 59       	and    eax,0x599fe701
     19c:	75 00                	jne    19e <sysEnter_Vector-0x12fe62>
     19e:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1a1:	aa                   	stos   BYTE PTR es:[edi],al
     1a2:	00 02                	add    BYTE PTR [edx],al
     1a4:	04 01                	add    al,0x1
     1a6:	06                   	push   es
     1a7:	3c 00                	cmp    al,0x0
     1a9:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1ac:	06                   	push   es
     1ad:	73 00                	jae    1af <sysEnter_Vector-0x12fe51>
     1af:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1b2:	06                   	push   es
     1b3:	82                   	(bad)  
     1b4:	06                   	push   es
     1b5:	6d                   	ins    DWORD PTR es:[edi],dx
     1b6:	91                   	xchg   ecx,eax
     1b7:	4d                   	dec    ebp
     1b8:	e7 9f                	out    0x9f,eax
     1ba:	59                   	pop    ecx
     1bb:	75 00                	jne    1bd <sysEnter_Vector-0x12fe43>
     1bd:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1c0:	aa                   	stos   BYTE PTR es:[edi],al
     1c1:	00 02                	add    BYTE PTR [edx],al
     1c3:	04 01                	add    al,0x1
     1c5:	06                   	push   es
     1c6:	3c 00                	cmp    al,0x0
     1c8:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1cb:	06                   	push   es
     1cc:	73 00                	jae    1ce <sysEnter_Vector-0x12fe32>
     1ce:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1d1:	06                   	push   es
     1d2:	82                   	(bad)  
     1d3:	06                   	push   es
     1d4:	6d                   	ins    DWORD PTR es:[edi],dx
     1d5:	91                   	xchg   ecx,eax
     1d6:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     1d9:	01 01                	add    DWORD PTR [ecx],eax
     1db:	d4 00                	aam    0x0
     1dd:	00 00                	add    BYTE PTR [eax],al
     1df:	02 00                	add    al,BYTE PTR [eax]
     1e1:	b0 00                	mov    al,0x0
     1e3:	00 00                	add    BYTE PTR [eax],al
     1e5:	01 01                	add    DWORD PTR [ecx],eax
     1e7:	fb                   	sti    
     1e8:	0e                   	push   cs
     1e9:	0d 00 01 01 01       	or     eax,0x1010100
     1ee:	01 00                	add    DWORD PTR [eax],eax
     1f0:	00 00                	add    BYTE PTR [eax],al
     1f2:	01 00                	add    DWORD PTR [eax],eax
     1f4:	00 01                	add    BYTE PTR [ecx],al
     1f6:	2e                   	cs
     1f7:	2e                   	cs
     1f8:	2f                   	das    
     1f9:	2e                   	cs
     1fa:	2e                   	cs
     1fb:	2f                   	das    
     1fc:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     200:	6a 2f                	push   0x2f
     202:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     205:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     20c:	63 2f                	arpl   WORD PTR [edi],bp
     20e:	73 74                	jae    284 <sysEnter_Vector-0x12fd7c>
     210:	72 69                	jb     27b <sysEnter_Vector-0x12fd85>
     212:	6e                   	outs   dx,BYTE PTR ds:[esi]
     213:	67 73 00             	addr16 jae 216 <sysEnter_Vector-0x12fdea>
     216:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     21d:	00 2f                	add    BYTE PTR [edi],ch
     21f:	68 6f 6d 65 2f       	push   0x2f656d6f
     224:	79 6f                	jns    295 <sysEnter_Vector-0x12fd6b>
     226:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     22d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     230:	73 73                	jae    2a5 <sysEnter_Vector-0x12fd5b>
     232:	2f                   	das    
     233:	6c                   	ins    BYTE PTR es:[edi],dx
     234:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     23b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     241:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     247:	78 2d                	js     276 <sysEnter_Vector-0x12fd8a>
     249:	67 6e                	outs   dx,BYTE PTR ds:[si]
     24b:	75 2f                	jne    27c <sysEnter_Vector-0x12fd84>
     24d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     252:	2f                   	das    
     253:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	73 74                	jae    2d2 <sysEnter_Vector-0x12fd2e>
     25e:	72 74                	jb     2d4 <sysEnter_Vector-0x12fd2c>
     260:	6f                   	outs   dx,DWORD PTR ds:[esi]
     261:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     264:	00 01                	add    BYTE PTR [ecx],al
     266:	00 00                	add    BYTE PTR [eax],al
     268:	6d                   	ins    DWORD PTR es:[edi],dx
     269:	61                   	popa   
     26a:	6c                   	ins    BYTE PTR es:[edi],dx
     26b:	6c                   	ins    BYTE PTR es:[edi],dx
     26c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     26d:	63 2e                	arpl   WORD PTR [esi],bp
     26f:	68 00 02 00 00       	push   0x200
     274:	6c                   	ins    BYTE PTR es:[edi],dx
     275:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     27c:	4f                   	dec    edi
     27d:	53                   	push   ebx
     27e:	2e                   	cs
     27f:	68 00 02 00 00       	push   0x200
     284:	73 74                	jae    2fa <sysEnter_Vector-0x12fd06>
     286:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     28d:	63 
     28e:	2e                   	cs
     28f:	68 00 03 00 00       	push   0x300
     294:	00 00                	add    BYTE PTR [eax],al
     296:	05 02 1c 01 00       	add    eax,0x11c02
     29b:	30 03                	xor    BYTE PTR [ebx],al
     29d:	28 01                	sub    BYTE PTR [ecx],al
     29f:	f6 67 92             	mul    BYTE PTR [edi-0x6e]
     2a2:	08 2f                	or     BYTE PTR [edi],ch
     2a4:	75 08                	jne    2ae <sysEnter_Vector-0x12fd52>
     2a6:	2f                   	das    
     2a7:	4b                   	dec    ebx
     2a8:	08 c9                	or     cl,cl
     2aa:	c9                   	leave  
     2ab:	08 21                	or     BYTE PTR [ecx],ah
     2ad:	3d 02 07 00 01       	cmp    eax,0x1000702
     2b2:	01 10                	add    DWORD PTR [eax],edx
     2b4:	01 00                	add    DWORD PTR [eax],eax
     2b6:	00 02                	add    BYTE PTR [edx],al
     2b8:	00 93 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],dl
     2be:	01 fb                	add    ebx,edi
     2c0:	0e                   	push   cs
     2c1:	0d 00 01 01 01       	or     eax,0x1010100
     2c6:	01 00                	add    DWORD PTR [eax],eax
     2c8:	00 00                	add    BYTE PTR [eax],al
     2ca:	01 00                	add    DWORD PTR [eax],eax
     2cc:	00 01                	add    BYTE PTR [ecx],al
     2ce:	73 72                	jae    342 <sysEnter_Vector-0x12fcbe>
     2d0:	63 00                	arpl   WORD PTR [eax],ax
     2d2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     2d9:	00 2f                	add    BYTE PTR [edi],ch
     2db:	68 6f 6d 65 2f       	push   0x2f656d6f
     2e0:	79 6f                	jns    351 <sysEnter_Vector-0x12fcaf>
     2e2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     2e9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     2ec:	73 73                	jae    361 <sysEnter_Vector-0x12fc9f>
     2ee:	2f                   	das    
     2ef:	6c                   	ins    BYTE PTR es:[edi],dx
     2f0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     2f7:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     2fd:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     303:	78 2d                	js     332 <sysEnter_Vector-0x12fcce>
     305:	67 6e                	outs   dx,BYTE PTR ds:[si]
     307:	75 2f                	jne    338 <sysEnter_Vector-0x12fcc8>
     309:	35 2e 33 2e 30       	xor    eax,0x302e332e
     30e:	2f                   	das    
     30f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     316:	00 00                	add    BYTE PTR [eax],al
     318:	61                   	popa   
     319:	73 63                	jae    37e <sysEnter_Vector-0x12fc82>
     31b:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     322:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     325:	6c                   	ins    BYTE PTR es:[edi],dx
     326:	6c                   	ins    BYTE PTR es:[edi],dx
     327:	6f                   	outs   dx,DWORD PTR ds:[esi]
     328:	63 2e                	arpl   WORD PTR [esi],bp
     32a:	68 00 02 00 00       	push   0x200
     32f:	6c                   	ins    BYTE PTR es:[edi],dx
     330:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     337:	4f                   	dec    edi
     338:	53                   	push   ebx
     339:	2e                   	cs
     33a:	68 00 02 00 00       	push   0x200
     33f:	73 74                	jae    3b5 <sysEnter_Vector-0x12fc4b>
     341:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     348:	63 
     349:	2e                   	cs
     34a:	68 00 03 00 00       	push   0x300
     34f:	00 00                	add    BYTE PTR [eax],al
     351:	05 02 b4 01 00       	add    eax,0x1b402
     356:	30 03                	xor    BYTE PTR [ebx],al
     358:	09 01                	or     DWORD PTR [ecx],eax
     35a:	08 16                	or     BYTE PTR [esi],dl
     35c:	00 02                	add    BYTE PTR [edx],al
     35e:	04 03                	add    al,0x3
     360:	08 d7                	or     bh,dl
     362:	00 02                	add    BYTE PTR [edx],al
     364:	04 03                	add    al,0x3
     366:	d7                   	xlat   BYTE PTR ds:[ebx]
     367:	00 02                	add    BYTE PTR [edx],al
     369:	04 03                	add    al,0x3
     36b:	08 4b 00             	or     BYTE PTR [ebx+0x0],cl
     36e:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     371:	d3 00                	rol    DWORD PTR [eax],cl
     373:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     376:	06                   	push   es
     377:	82                   	(bad)  
     378:	06                   	push   es
     379:	87 69 08             	xchg   DWORD PTR [ecx+0x8],ebp
     37c:	15 bb 3d 00 02       	adc    eax,0x2003dbb
     381:	04 01                	add    al,0x1
     383:	76 00                	jbe    385 <sysEnter_Vector-0x12fc7b>
     385:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     388:	02 3b                	add    bh,BYTE PTR [ebx]
     38a:	13 08                	adc    ecx,DWORD PTR [eax]
     38c:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     390:	ad                   	lods   eax,DWORD PTR ds:[esi]
     391:	d7                   	xlat   BYTE PTR ds:[ebx]
     392:	69 08 15 bb 3d 00    	imul   ecx,DWORD PTR [eax],0x3dbb15
     398:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     39b:	76 00                	jbe    39d <sysEnter_Vector-0x12fc63>
     39d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3a0:	02 3b                	add    bh,BYTE PTR [ebx]
     3a2:	13 08                	adc    ecx,DWORD PTR [eax]
     3a4:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3a8:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3a9:	d7                   	xlat   BYTE PTR ds:[ebx]
     3aa:	6a f3                	push   0xfffffff3
     3ac:	78 00                	js     3ae <sysEnter_Vector-0x12fc52>
     3ae:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     3b1:	91                   	xchg   ecx,eax
     3b2:	00 02                	add    BYTE PTR [edx],al
     3b4:	04 03                	add    al,0x3
     3b6:	02 24 11             	add    ah,BYTE PTR [ecx+edx*1]
     3b9:	00 02                	add    BYTE PTR [edx],al
     3bb:	04 01                	add    al,0x1
     3bd:	06                   	push   es
     3be:	4a                   	dec    edx
     3bf:	06                   	push   es
     3c0:	e8 3d 02 02 00       	call   20602 <sysEnter_Vector-0x10f9fe>
     3c5:	01 01                	add    DWORD PTR [ecx],eax
     3c7:	06                   	push   es
     3c8:	01 00                	add    DWORD PTR [eax],eax
     3ca:	00 02                	add    BYTE PTR [edx],al
     3cc:	00 99 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],bl
     3d2:	01 fb                	add    ebx,edi
     3d4:	0e                   	push   cs
     3d5:	0d 00 01 01 01       	or     eax,0x1010100
     3da:	01 00                	add    DWORD PTR [eax],eax
     3dc:	00 00                	add    BYTE PTR [eax],al
     3de:	01 00                	add    DWORD PTR [eax],eax
     3e0:	00 01                	add    BYTE PTR [ecx],al
     3e2:	73 72                	jae    456 <sysEnter_Vector-0x12fbaa>
     3e4:	63 00                	arpl   WORD PTR [eax],ax
     3e6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     3ed:	00 2f                	add    BYTE PTR [edi],ch
     3ef:	68 6f 6d 65 2f       	push   0x2f656d6f
     3f4:	79 6f                	jns    465 <sysEnter_Vector-0x12fb9b>
     3f6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     3fd:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     400:	73 73                	jae    475 <sysEnter_Vector-0x12fb8b>
     402:	2f                   	das    
     403:	6c                   	ins    BYTE PTR es:[edi],dx
     404:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     40b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     411:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     417:	78 2d                	js     446 <sysEnter_Vector-0x12fbba>
     419:	67 6e                	outs   dx,BYTE PTR ds:[si]
     41b:	75 2f                	jne    44c <sysEnter_Vector-0x12fbb4>
     41d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     422:	2f                   	das    
     423:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     42a:	00 00                	add    BYTE PTR [eax],al
     42c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     42e:	76 69                	jbe    499 <sysEnter_Vector-0x12fb67>
     430:	72 6f                	jb     4a1 <sysEnter_Vector-0x12fb5f>
     432:	6e                   	outs   dx,BYTE PTR ds:[esi]
     433:	6d                   	ins    DWORD PTR es:[edi],dx
     434:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     436:	74 2e                	je     466 <sysEnter_Vector-0x12fb9a>
     438:	63 00                	arpl   WORD PTR [eax],ax
     43a:	01 00                	add    DWORD PTR [eax],eax
     43c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     43f:	6c                   	ins    BYTE PTR es:[edi],dx
     440:	6c                   	ins    BYTE PTR es:[edi],dx
     441:	6f                   	outs   dx,DWORD PTR ds:[esi]
     442:	63 2e                	arpl   WORD PTR [esi],bp
     444:	68 00 02 00 00       	push   0x200
     449:	6c                   	ins    BYTE PTR es:[edi],dx
     44a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     451:	4f                   	dec    edi
     452:	53                   	push   ebx
     453:	2e                   	cs
     454:	68 00 02 00 00       	push   0x200
     459:	73 74                	jae    4cf <sysEnter_Vector-0x12fb31>
     45b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     462:	63 
     463:	2e                   	cs
     464:	68 00 03 00 00       	push   0x300
     469:	00 00                	add    BYTE PTR [eax],al
     46b:	05 02 00 04 00       	add    eax,0x40002
     470:	30 03                	xor    BYTE PTR [ebx],al
     472:	09 01                	or     DWORD PTR [ecx],eax
     474:	08 21                	or     BYTE PTR [ecx],ah
     476:	91                   	xchg   ecx,eax
     477:	02 36                	add    dh,BYTE PTR [esi]
     479:	14 02                	adc    al,0x2
     47b:	39 13                	cmp    DWORD PTR [ebx],edx
     47d:	00 02                	add    BYTE PTR [edx],al
     47f:	04 02                	add    al,0x2
     481:	7e 00                	jle    483 <sysEnter_Vector-0x12fb7d>
     483:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     486:	06                   	push   es
     487:	4a                   	dec    edx
     488:	06                   	push   es
     489:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     48a:	59                   	pop    ecx
     48b:	5b                   	pop    ebx
     48c:	08 21                	or     BYTE PTR [ecx],ah
     48e:	76 bb                	jbe    44b <sysEnter_Vector-0x12fbb5>
     490:	08 92 08 4b 02 36    	or     BYTE PTR [edx+0x36024b08],dl
     496:	14 08                	adc    al,0x8
     498:	f3 02 25 13 08 f3 00 	repz add ah,BYTE PTR ds:0xf30813
     49f:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     4a2:	03 77 58             	add    esi,DWORD PTR [edi+0x58]
     4a5:	00 02                	add    BYTE PTR [edx],al
     4a7:	04 01                	add    al,0x1
     4a9:	06                   	push   es
     4aa:	4a                   	dec    edx
     4ab:	06                   	push   es
     4ac:	03 0c 9e             	add    ecx,DWORD PTR [esi+ebx*4]
     4af:	bb 08 92 08 9f       	mov    ebx,0x9f089208
     4b4:	08 f3                	or     bl,dh
     4b6:	02 25 13 08 f3 00    	add    ah,BYTE PTR ds:0xf30813
     4bc:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     4bf:	03 79 2e             	add    edi,DWORD PTR [ecx+0x2e]
     4c2:	00 02                	add    BYTE PTR [edx],al
     4c4:	04 01                	add    al,0x1
     4c6:	06                   	push   es
     4c7:	4a                   	dec    edx
     4c8:	06                   	push   es
     4c9:	03 0b                	add    ecx,DWORD PTR [ebx]
     4cb:	9e                   	sahf   
     4cc:	02 05 00 01 01 f8    	add    al,BYTE PTR ds:0xf8010100
     4d2:	00 00                	add    BYTE PTR [eax],al
     4d4:	00 02                	add    BYTE PTR [edx],al
     4d6:	00 cd                	add    ch,cl
     4d8:	00 00                	add    BYTE PTR [eax],al
     4da:	00 01                	add    BYTE PTR [ecx],al
     4dc:	01 fb                	add    ebx,edi
     4de:	0e                   	push   cs
     4df:	0d 00 01 01 01       	or     eax,0x1010100
     4e4:	01 00                	add    DWORD PTR [eax],eax
     4e6:	00 00                	add    BYTE PTR [eax],al
     4e8:	01 00                	add    DWORD PTR [eax],eax
     4ea:	00 01                	add    BYTE PTR [ecx],al
     4ec:	73 72                	jae    560 <sysEnter_Vector-0x12faa0>
     4ee:	63 00                	arpl   WORD PTR [eax],ax
     4f0:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     4f7:	00 2f                	add    BYTE PTR [edi],ch
     4f9:	68 6f 6d 65 2f       	push   0x2f656d6f
     4fe:	79 6f                	jns    56f <sysEnter_Vector-0x12fa91>
     500:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     507:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     50a:	73 73                	jae    57f <sysEnter_Vector-0x12fa81>
     50c:	2f                   	das    
     50d:	6c                   	ins    BYTE PTR es:[edi],dx
     50e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     515:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     51b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     521:	78 2d                	js     550 <sysEnter_Vector-0x12fab0>
     523:	67 6e                	outs   dx,BYTE PTR ds:[si]
     525:	75 2f                	jne    556 <sysEnter_Vector-0x12faaa>
     527:	35 2e 33 2e 30       	xor    eax,0x302e332e
     52c:	2f                   	das    
     52d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     534:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     537:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     53b:	65                   	gs
     53c:	2f                   	das    
     53d:	2e                   	cs
     53e:	2e                   	cs
     53f:	2f                   	das    
     540:	2e                   	cs
     541:	2e                   	cs
     542:	2f                   	das    
     543:	2e                   	cs
     544:	2e                   	cs
     545:	2f                   	das    
     546:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     54a:	6a 2f                	push   0x2f
     54c:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     54f:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     556:	6e                   	outs   dx,BYTE PTR ds:[esi]
     557:	65                   	gs
     558:	6c                   	ins    BYTE PTR es:[edi],dx
     559:	2f                   	das    
     55a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     561:	00 00                	add    BYTE PTR [eax],al
     563:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     56a:	01 00                	add    DWORD PTR [eax],eax
     56c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     56f:	6c                   	ins    BYTE PTR es:[edi],dx
     570:	6c                   	ins    BYTE PTR es:[edi],dx
     571:	6f                   	outs   dx,DWORD PTR ds:[esi]
     572:	63 2e                	arpl   WORD PTR [esi],bp
     574:	68 00 02 00 00       	push   0x200
     579:	6c                   	ins    BYTE PTR es:[edi],dx
     57a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     581:	4f                   	dec    edi
     582:	53                   	push   ebx
     583:	2e                   	cs
     584:	68 00 02 00 00       	push   0x200
     589:	73 74                	jae    5ff <sysEnter_Vector-0x12fa01>
     58b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     592:	63 
     593:	2e                   	cs
     594:	68 00 03 00 00       	push   0x300
     599:	73 79                	jae    614 <sysEnter_Vector-0x12f9ec>
     59b:	73 63                	jae    600 <sysEnter_Vector-0x12fa00>
     59d:	61                   	popa   
     59e:	6c                   	ins    BYTE PTR es:[edi],dx
     59f:	6c                   	ins    BYTE PTR es:[edi],dx
     5a0:	73 2e                	jae    5d0 <sysEnter_Vector-0x12fa30>
     5a2:	68 00 04 00 00       	push   0x400
     5a7:	00 00                	add    BYTE PTR [eax],al
     5a9:	05 02 6c 06 00       	add    eax,0x66c02
     5ae:	30 03                	xor    BYTE PTR [ebx],al
     5b0:	09 01                	or     DWORD PTR [ecx],eax
     5b2:	08 13                	or     BYTE PTR [ebx],dl
     5b4:	08 67 5b             	or     BYTE PTR [edi+0x5b],ah
     5b7:	08 13                	or     BYTE PTR [ebx],dl
     5b9:	08 2f                	or     BYTE PTR [edi],ch
     5bb:	69 e5 08 d7 77 e5    	imul   esp,ebp,0xe577d708
     5c1:	08 d7                	or     bh,dl
     5c3:	78 08                	js     5cd <sysEnter_Vector-0x12fa33>
     5c5:	13 08                	adc    ecx,DWORD PTR [eax]
     5c7:	9f                   	lahf   
     5c8:	02 05 00 01 01 26    	add    al,BYTE PTR ds:0x26010100
     5ce:	01 00                	add    DWORD PTR [eax],eax
     5d0:	00 02                	add    BYTE PTR [edx],al
     5d2:	00 d4                	add    ah,dl
     5d4:	00 00                	add    BYTE PTR [eax],al
     5d6:	00 01                	add    BYTE PTR [ecx],al
     5d8:	01 fb                	add    ebx,edi
     5da:	0e                   	push   cs
     5db:	0d 00 01 01 01       	or     eax,0x1010100
     5e0:	01 00                	add    DWORD PTR [eax],eax
     5e2:	00 00                	add    BYTE PTR [eax],al
     5e4:	01 00                	add    DWORD PTR [eax],eax
     5e6:	00 01                	add    BYTE PTR [ecx],al
     5e8:	73 72                	jae    65c <sysEnter_Vector-0x12f9a4>
     5ea:	63 2f                	arpl   WORD PTR [edi],bp
     5ec:	69 6e 70 75 74 00 69 	imul   ebp,DWORD PTR [esi+0x70],0x69007475
     5f3:	6e                   	outs   dx,BYTE PTR ds:[esi]
     5f4:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     5f8:	65 00 2f             	add    BYTE PTR gs:[edi],ch
     5fb:	68 6f 6d 65 2f       	push   0x2f656d6f
     600:	79 6f                	jns    671 <sysEnter_Vector-0x12f98f>
     602:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     609:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     60c:	73 73                	jae    681 <sysEnter_Vector-0x12f97f>
     60e:	2f                   	das    
     60f:	6c                   	ins    BYTE PTR es:[edi],dx
     610:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     617:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     61d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     623:	78 2d                	js     652 <sysEnter_Vector-0x12f9ae>
     625:	67 6e                	outs   dx,BYTE PTR ds:[si]
     627:	75 2f                	jne    658 <sysEnter_Vector-0x12f9a8>
     629:	35 2e 33 2e 30       	xor    eax,0x302e332e
     62e:	2f                   	das    
     62f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     636:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     639:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     63d:	65                   	gs
     63e:	2f                   	das    
     63f:	2e                   	cs
     640:	2e                   	cs
     641:	2f                   	das    
     642:	2e                   	cs
     643:	2e                   	cs
     644:	2f                   	das    
     645:	2e                   	cs
     646:	2e                   	cs
     647:	2f                   	das    
     648:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     64c:	6a 2f                	push   0x2f
     64e:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     651:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     658:	6e                   	outs   dx,BYTE PTR ds:[esi]
     659:	65                   	gs
     65a:	6c                   	ins    BYTE PTR es:[edi],dx
     65b:	2f                   	das    
     65c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     663:	00 00                	add    BYTE PTR [eax],al
     665:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     66c:	00 01                	add    BYTE PTR [ecx],al
     66e:	00 00                	add    BYTE PTR [eax],al
     670:	6d                   	ins    DWORD PTR es:[edi],dx
     671:	61                   	popa   
     672:	6c                   	ins    BYTE PTR es:[edi],dx
     673:	6c                   	ins    BYTE PTR es:[edi],dx
     674:	6f                   	outs   dx,DWORD PTR ds:[esi]
     675:	63 2e                	arpl   WORD PTR [esi],bp
     677:	68 00 02 00 00       	push   0x200
     67c:	6c                   	ins    BYTE PTR es:[edi],dx
     67d:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     684:	4f                   	dec    edi
     685:	53                   	push   ebx
     686:	2e                   	cs
     687:	68 00 02 00 00       	push   0x200
     68c:	73 74                	jae    702 <sysEnter_Vector-0x12f8fe>
     68e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     695:	63 
     696:	2e                   	cs
     697:	68 00 03 00 00       	push   0x300
     69c:	73 79                	jae    717 <sysEnter_Vector-0x12f8e9>
     69e:	73 63                	jae    703 <sysEnter_Vector-0x12f8fd>
     6a0:	61                   	popa   
     6a1:	6c                   	ins    BYTE PTR es:[edi],dx
     6a2:	6c                   	ins    BYTE PTR es:[edi],dx
     6a3:	73 2e                	jae    6d3 <sysEnter_Vector-0x12f92d>
     6a5:	68 00 04 00 00       	push   0x400
     6aa:	00 00                	add    BYTE PTR [eax],al
     6ac:	05 02 60 07 00       	add    eax,0x76002
     6b1:	30 03                	xor    BYTE PTR [ebx],al
     6b3:	0f 01                	(bad)  
     6b5:	d7                   	xlat   BYTE PTR ds:[ebx]
     6b6:	08 3d 4d 08 67 68    	or     BYTE PTR ds:0x6867084d,bh
     6bc:	75 4b                	jne    709 <sysEnter_Vector-0x12f8f7>
     6be:	08 3d 77 08 14 08    	or     BYTE PTR ds:0x8140877,bh
     6c4:	3d 4b 6a 08 14       	cmp    eax,0x14086a4b
     6c9:	75 84                	jne    64f <sysEnter_Vector-0x12f9b1>
     6cb:	68 00 02 04 01       	push   0x1040200
     6d0:	08 67 33             	or     BYTE PTR [edi+0x33],ah
     6d3:	08 3d 00 02 04 01    	or     BYTE PTR ds:0x1040200,bh
     6d9:	06                   	push   es
     6da:	66 06                	pushw  es
     6dc:	68 ad 68 68 76       	push   0x766868ad
     6e1:	08 5a 00             	or     BYTE PTR [edx+0x0],bl
     6e4:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     6e7:	06                   	push   es
     6e8:	ac                   	lods   al,BYTE PTR ds:[esi]
     6e9:	06                   	push   es
     6ea:	68 5b 00 02 04       	push   0x402005b
     6ef:	02 a0 2f 02 05 00    	add    ah,BYTE PTR [eax+0x5022f]
     6f5:	01 01                	add    DWORD PTR [ecx],eax
     6f7:	b2 01                	mov    dl,0x1
     6f9:	00 00                	add    BYTE PTR [eax],al
     6fb:	02 00                	add    al,BYTE PTR [eax]
     6fd:	eb 00                	jmp    6ff <sysEnter_Vector-0x12f901>
     6ff:	00 00                	add    BYTE PTR [eax],al
     701:	01 01                	add    DWORD PTR [ecx],eax
     703:	fb                   	sti    
     704:	0e                   	push   cs
     705:	0d 00 01 01 01       	or     eax,0x1010100
     70a:	01 00                	add    DWORD PTR [eax],eax
     70c:	00 00                	add    BYTE PTR [eax],al
     70e:	01 00                	add    DWORD PTR [eax],eax
     710:	00 01                	add    BYTE PTR [ecx],al
     712:	73 72                	jae    786 <sysEnter_Vector-0x12f87a>
     714:	63 00                	arpl   WORD PTR [eax],ax
     716:	2f                   	das    
     717:	68 6f 6d 65 2f       	push   0x2f656d6f
     71c:	79 6f                	jns    78d <sysEnter_Vector-0x12f873>
     71e:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     725:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     728:	73 73                	jae    79d <sysEnter_Vector-0x12f863>
     72a:	2f                   	das    
     72b:	6c                   	ins    BYTE PTR es:[edi],dx
     72c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     733:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     739:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     73f:	78 2d                	js     76e <sysEnter_Vector-0x12f892>
     741:	67 6e                	outs   dx,BYTE PTR ds:[si]
     743:	75 2f                	jne    774 <sysEnter_Vector-0x12f88c>
     745:	35 2e 33 2e 30       	xor    eax,0x302e332e
     74a:	2f                   	das    
     74b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     752:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     755:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     759:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     75d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     761:	65                   	gs
     762:	2f                   	das    
     763:	2e                   	cs
     764:	2e                   	cs
     765:	2f                   	das    
     766:	2e                   	cs
     767:	2e                   	cs
     768:	2f                   	das    
     769:	2e                   	cs
     76a:	2e                   	cs
     76b:	2f                   	das    
     76c:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     770:	6a 2f                	push   0x2f
     772:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     775:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     77c:	6e                   	outs   dx,BYTE PTR ds:[esi]
     77d:	65                   	gs
     77e:	6c                   	ins    BYTE PTR es:[edi],dx
     77f:	2f                   	das    
     780:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     787:	00 00                	add    BYTE PTR [eax],al
     789:	6c                   	ins    BYTE PTR es:[edi],dx
     78a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     791:	4f                   	dec    edi
     792:	53                   	push   ebx
     793:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     796:	01 00                	add    DWORD PTR [eax],eax
     798:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     79b:	64                   	fs
     79c:	61                   	popa   
     79d:	72 67                	jb     806 <sysEnter_Vector-0x12f7fa>
     79f:	2e                   	cs
     7a0:	68 00 02 00 00       	push   0x200
     7a5:	73 74                	jae    81b <sysEnter_Vector-0x12f7e5>
     7a7:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     7ae:	63 
     7af:	2e                   	cs
     7b0:	68 00 02 00 00       	push   0x200
     7b5:	73 74                	jae    82b <sysEnter_Vector-0x12f7d5>
     7b7:	64                   	fs
     7b8:	64                   	fs
     7b9:	65                   	gs
     7ba:	66                   	data16
     7bb:	2e                   	cs
     7bc:	68 00 02 00 00       	push   0x200
     7c1:	6d                   	ins    DWORD PTR es:[edi],dx
     7c2:	61                   	popa   
     7c3:	6c                   	ins    BYTE PTR es:[edi],dx
     7c4:	6c                   	ins    BYTE PTR es:[edi],dx
     7c5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7c6:	63 2e                	arpl   WORD PTR [esi],bp
     7c8:	68 00 03 00 00       	push   0x300
     7cd:	6c                   	ins    BYTE PTR es:[edi],dx
     7ce:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     7d5:	4f                   	dec    edi
     7d6:	53                   	push   ebx
     7d7:	2e                   	cs
     7d8:	68 00 03 00 00       	push   0x300
     7dd:	73 79                	jae    858 <sysEnter_Vector-0x12f7a8>
     7df:	73 63                	jae    844 <sysEnter_Vector-0x12f7bc>
     7e1:	61                   	popa   
     7e2:	6c                   	ins    BYTE PTR es:[edi],dx
     7e3:	6c                   	ins    BYTE PTR es:[edi],dx
     7e4:	73 2e                	jae    814 <sysEnter_Vector-0x12f7ec>
     7e6:	68 00 04 00 00       	push   0x400
     7eb:	00 00                	add    BYTE PTR [eax],al
     7ed:	05 02 b4 08 00       	add    eax,0x8b402
     7f2:	30 03                	xor    BYTE PTR [ebx],al
     7f4:	10 01                	adc    BYTE PTR [ecx],al
     7f6:	08 21                	or     BYTE PTR [ecx],ah
     7f8:	75 08                	jne    802 <sysEnter_Vector-0x12f7fe>
     7fa:	67 3d 77 08 21 75    	addr16 cmp eax,0x75210877
     800:	08 83 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],al
     806:	75 08                	jne    810 <sysEnter_Vector-0x12f7f0>
     808:	9f                   	lahf   
     809:	3d 77 08 21 75       	cmp    eax,0x75210877
     80e:	08 bb 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],bh
     814:	75 08                	jne    81e <sysEnter_Vector-0x12f7e2>
     816:	d7                   	xlat   BYTE PTR ds:[ebx]
     817:	3d 77 08 21 08       	cmp    eax,0x8210877
     81c:	67 d8 5a c9          	fcomp  DWORD PTR [bp+si-0x37]
     820:	c9                   	leave  
     821:	08 67 75             	or     BYTE PTR [edi+0x75],ah
     824:	08 6a 2d             	or     BYTE PTR [edx+0x2d],ch
     827:	08 21                	or     BYTE PTR [ecx],ah
     829:	69 08 13 75 77 f4    	imul   ecx,DWORD PTR [eax],0xf4777513
     82f:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     833:	31 f4                	xor    esp,esi
     835:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     839:	31 f4                	xor    esp,esi
     83b:	68 08 91 5a 31       	push   0x315a9108
     840:	08 21                	or     BYTE PTR [ecx],ah
     842:	02 54 13 59          	add    dl,BYTE PTR [ebx+edx*1+0x59]
     846:	77 c9                	ja     811 <sysEnter_Vector-0x12f7ef>
     848:	c9                   	leave  
     849:	3f                   	aas    
     84a:	c9                   	leave  
     84b:	08 83 3f f3 76 c9    	or     BYTE PTR [ebx-0x36890cc1],al
     851:	3d 31 08 21 d8       	cmp    eax,0xd8210831
     856:	bc 08 31 08 75       	mov    esp,0x75083108
     85b:	68 67 02 22 14       	push   0x14220267
     860:	08 ae 4c ca 08 4b    	or     BYTE PTR [esi+0x4b08ca4c],ch
     866:	91                   	xchg   ecx,eax
     867:	67 bc 08 83 08 75    	addr16 mov esp,0x75088308
     86d:	67 02 2f             	add    ch,BYTE PTR [bx]
     870:	14 00                	adc    al,0x0
     872:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     875:	02 31                	add    dh,BYTE PTR [ecx]
     877:	13 00                	adc    eax,DWORD PTR [eax]
     879:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     87c:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     882:	bb 00 02 04 02       	mov    ebx,0x2040200
     887:	03 76 4a             	add    esi,DWORD PTR [esi+0x4a]
     88a:	00 02                	add    BYTE PTR [edx],al
     88c:	04 01                	add    al,0x1
     88e:	06                   	push   es
     88f:	4a                   	dec    edx
     890:	06                   	push   es
     891:	03 0c ba             	add    ecx,DWORD PTR [edx+edi*4]
     894:	08 91 08 86 3f 5b    	or     BYTE PTR [ecx+0x5b3f8608],dl
     89a:	f3 77 08             	repz ja 8a5 <sysEnter_Vector-0x12f75b>
     89d:	67 08 86 3d 31       	or     BYTE PTR [bp+0x313d],al
     8a2:	c9                   	leave  
     8a3:	c9                   	leave  
     8a4:	31 c9                	xor    ecx,ecx
     8a6:	08 13                	or     BYTE PTR [ebx],dl
     8a8:	02 02                	add    al,BYTE PTR [edx]
     8aa:	00 01                	add    BYTE PTR [ecx],al
     8ac:	01 50 01             	add    DWORD PTR [eax+0x1],edx
     8af:	00 00                	add    BYTE PTR [eax],al
     8b1:	02 00                	add    al,BYTE PTR [eax]
     8b3:	db 00                	fild   DWORD PTR [eax]
     8b5:	00 00                	add    BYTE PTR [eax],al
     8b7:	01 01                	add    DWORD PTR [ecx],eax
     8b9:	fb                   	sti    
     8ba:	0e                   	push   cs
     8bb:	0d 00 01 01 01       	or     eax,0x1010100
     8c0:	01 00                	add    DWORD PTR [eax],eax
     8c2:	00 00                	add    BYTE PTR [eax],al
     8c4:	01 00                	add    DWORD PTR [eax],eax
     8c6:	00 01                	add    BYTE PTR [ecx],al
     8c8:	73 72                	jae    93c <sysEnter_Vector-0x12f6c4>
     8ca:	63 00                	arpl   WORD PTR [eax],ax
     8cc:	2f                   	das    
     8cd:	68 6f 6d 65 2f       	push   0x2f656d6f
     8d2:	79 6f                	jns    943 <sysEnter_Vector-0x12f6bd>
     8d4:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     8db:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     8de:	73 73                	jae    953 <sysEnter_Vector-0x12f6ad>
     8e0:	2f                   	das    
     8e1:	6c                   	ins    BYTE PTR es:[edi],dx
     8e2:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     8e9:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     8ef:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     8f5:	78 2d                	js     924 <sysEnter_Vector-0x12f6dc>
     8f7:	67 6e                	outs   dx,BYTE PTR ds:[si]
     8f9:	75 2f                	jne    92a <sysEnter_Vector-0x12f6d6>
     8fb:	35 2e 33 2e 30       	xor    eax,0x302e332e
     900:	2f                   	das    
     901:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     908:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     90b:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     90f:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     913:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     917:	65                   	gs
     918:	2f                   	das    
     919:	2e                   	cs
     91a:	2e                   	cs
     91b:	2f                   	das    
     91c:	2e                   	cs
     91d:	2e                   	cs
     91e:	2f                   	das    
     91f:	2e                   	cs
     920:	2e                   	cs
     921:	2f                   	das    
     922:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     926:	6a 2f                	push   0x2f
     928:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     92b:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     932:	6e                   	outs   dx,BYTE PTR ds:[esi]
     933:	65                   	gs
     934:	6c                   	ins    BYTE PTR es:[edi],dx
     935:	2f                   	das    
     936:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     93d:	00 00                	add    BYTE PTR [eax],al
     93f:	6d                   	ins    DWORD PTR es:[edi],dx
     940:	61                   	popa   
     941:	6c                   	ins    BYTE PTR es:[edi],dx
     942:	6c                   	ins    BYTE PTR es:[edi],dx
     943:	6f                   	outs   dx,DWORD PTR ds:[esi]
     944:	63 2e                	arpl   WORD PTR [esi],bp
     946:	63 00                	arpl   WORD PTR [eax],ax
     948:	01 00                	add    DWORD PTR [eax],eax
     94a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     94d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     954:	63 
     955:	2e                   	cs
     956:	68 00 02 00 00       	push   0x200
     95b:	73 74                	jae    9d1 <sysEnter_Vector-0x12f62f>
     95d:	64                   	fs
     95e:	64                   	fs
     95f:	65                   	gs
     960:	66                   	data16
     961:	2e                   	cs
     962:	68 00 02 00 00       	push   0x200
     967:	6d                   	ins    DWORD PTR es:[edi],dx
     968:	61                   	popa   
     969:	6c                   	ins    BYTE PTR es:[edi],dx
     96a:	6c                   	ins    BYTE PTR es:[edi],dx
     96b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     96c:	63 2e                	arpl   WORD PTR [esi],bp
     96e:	68 00 03 00 00       	push   0x300
     973:	6c                   	ins    BYTE PTR es:[edi],dx
     974:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     97b:	4f                   	dec    edi
     97c:	53                   	push   ebx
     97d:	2e                   	cs
     97e:	68 00 03 00 00       	push   0x300
     983:	73 79                	jae    9fe <sysEnter_Vector-0x12f602>
     985:	73 63                	jae    9ea <sysEnter_Vector-0x12f616>
     987:	61                   	popa   
     988:	6c                   	ins    BYTE PTR es:[edi],dx
     989:	6c                   	ins    BYTE PTR es:[edi],dx
     98a:	73 2e                	jae    9ba <sysEnter_Vector-0x12f646>
     98c:	68 00 04 00 00       	push   0x400
     991:	00 00                	add    BYTE PTR [eax],al
     993:	05 02 a8 0e 00       	add    eax,0xea802
     998:	30 03                	xor    BYTE PTR [ebx],al
     99a:	0c 01                	or     al,0x1
     99c:	08 21                	or     BYTE PTR [ecx],ah
     99e:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
     9a1:	bb bb bb bc 69       	mov    ebx,0x69bcbbbb
     9a6:	f5                   	cmc    
     9a7:	92                   	xchg   edx,eax
     9a8:	08 85 08 67 00 02    	or     BYTE PTR [ebp+0x2006708],al
     9ae:	04 01                	add    al,0x1
     9b0:	06                   	push   es
     9b1:	66 06                	pushw  es
     9b3:	bc f5 91 76 5b       	mov    esp,0x5b7691f5
     9b8:	59                   	pop    ecx
     9b9:	31 f5                	xor    ebp,esi
     9bb:	68 93 00 02 04       	push   0x4020093
     9c0:	02 be 30 03 76 90    	add    bh,BYTE PTR [esi-0x6f89fcd0]
     9c6:	03 0b                	add    ecx,DWORD PTR [ebx]
     9c8:	20 31                	and    BYTE PTR [ecx],dh
     9ca:	08 27                	or     BYTE PTR [edi],ah
     9cc:	08 91 08 13 08 91    	or     BYTE PTR [ecx-0x6ef7ecf8],dl
     9d2:	a0 08 5a 08 e5       	mov    al,ds:0xe5085a08
     9d7:	f3 02 26             	repz add ah,BYTE PTR [esi]
     9da:	13 bc ad ad 08 e7 08 	adc    edi,DWORD PTR [ebp+ebp*4+0x8e708ad]
     9e1:	e5 ad                	in     eax,0xad
     9e3:	91                   	xchg   ecx,eax
     9e4:	91                   	xchg   ecx,eax
     9e5:	75 08                	jne    9ef <sysEnter_Vector-0x12f611>
     9e7:	d7                   	xlat   BYTE PTR ds:[ebx]
     9e8:	d7                   	xlat   BYTE PTR ds:[ebx]
     9e9:	08 13                	or     BYTE PTR [ebx],dl
     9eb:	91                   	xchg   ecx,eax
     9ec:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
     9ef:	91                   	xchg   ecx,eax
     9f0:	3d 5b f3 d7 31       	cmp    eax,0x31d7f35b
     9f5:	c9                   	leave  
     9f6:	ad                   	lods   eax,DWORD PTR ds:[esi]
     9f7:	3f                   	aas    
     9f8:	08 13                	or     BYTE PTR [ebx],dl
     9fa:	08 9f 02 06 00 01    	or     BYTE PTR [edi+0x1000602],bl
     a00:	01 e3                	add    ebx,esp
     a02:	00 00                	add    BYTE PTR [eax],al
     a04:	00 02                	add    BYTE PTR [edx],al
     a06:	00 a0 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ah
     a0c:	01 fb                	add    ebx,edi
     a0e:	0e                   	push   cs
     a0f:	0d 00 01 01 01       	or     eax,0x1010100
     a14:	01 00                	add    DWORD PTR [eax],eax
     a16:	00 00                	add    BYTE PTR [eax],al
     a18:	01 00                	add    DWORD PTR [eax],eax
     a1a:	00 01                	add    BYTE PTR [ecx],al
     a1c:	73 72                	jae    a90 <sysEnter_Vector-0x12f570>
     a1e:	63 00                	arpl   WORD PTR [eax],ax
     a20:	2f                   	das    
     a21:	68 6f 6d 65 2f       	push   0x2f656d6f
     a26:	79 6f                	jns    a97 <sysEnter_Vector-0x12f569>
     a28:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     a2f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     a32:	73 73                	jae    aa7 <sysEnter_Vector-0x12f559>
     a34:	2f                   	das    
     a35:	6c                   	ins    BYTE PTR es:[edi],dx
     a36:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     a3d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     a43:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     a49:	78 2d                	js     a78 <sysEnter_Vector-0x12f588>
     a4b:	67 6e                	outs   dx,BYTE PTR ds:[si]
     a4d:	75 2f                	jne    a7e <sysEnter_Vector-0x12f582>
     a4f:	35 2e 33 2e 30       	xor    eax,0x302e332e
     a54:	2f                   	das    
     a55:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     a5c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     a5f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     a63:	65 00 00             	add    BYTE PTR gs:[eax],al
     a66:	6d                   	ins    DWORD PTR es:[edi],dx
     a67:	65                   	gs
     a68:	6d                   	ins    DWORD PTR es:[edi],dx
     a69:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     a6c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     a6f:	01 00                	add    DWORD PTR [eax],eax
     a71:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     a74:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     a7b:	63 
     a7c:	2e                   	cs
     a7d:	68 00 02 00 00       	push   0x200
     a82:	73 74                	jae    af8 <sysEnter_Vector-0x12f508>
     a84:	64                   	fs
     a85:	64                   	fs
     a86:	65                   	gs
     a87:	66                   	data16
     a88:	2e                   	cs
     a89:	68 00 02 00 00       	push   0x200
     a8e:	6d                   	ins    DWORD PTR es:[edi],dx
     a8f:	61                   	popa   
     a90:	6c                   	ins    BYTE PTR es:[edi],dx
     a91:	6c                   	ins    BYTE PTR es:[edi],dx
     a92:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a93:	63 2e                	arpl   WORD PTR [esi],bp
     a95:	68 00 03 00 00       	push   0x300
     a9a:	6c                   	ins    BYTE PTR es:[edi],dx
     a9b:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     aa2:	4f                   	dec    edi
     aa3:	53                   	push   ebx
     aa4:	2e                   	cs
     aa5:	68 00 03 00 00       	push   0x300
     aaa:	00 00                	add    BYTE PTR [eax],al
     aac:	05 02 18 12 00       	add    eax,0x121802
     ab1:	30 03                	xor    BYTE PTR [ebx],al
     ab3:	0a 01                	or     al,BYTE PTR [ecx]
     ab5:	f5                   	cmc    
     ab6:	d7                   	xlat   BYTE PTR ds:[ebx]
     ab7:	d7                   	xlat   BYTE PTR ds:[ebx]
     ab8:	68 91 67 68 83       	push   0x83686791
     abd:	91                   	xchg   ecx,eax
     abe:	91                   	xchg   ecx,eax
     abf:	2f                   	das    
     ac0:	08 1f                	or     BYTE PTR [edi],bl
     ac2:	e8 08 57 ca 84       	call   84ca61cf <ticksToWait+0x54ca1c9f>
     ac7:	68 83 67 68 83       	push   0x83686783
     acc:	91                   	xchg   ecx,eax
     acd:	91                   	xchg   ecx,eax
     ace:	2f                   	das    
     acf:	08 1f                	or     BYTE PTR [edi],bl
     ad1:	e8 08 57 ca 5c       	call   5cca61de <ticksToWait+0x2cca1cae>
     ad6:	67 68 83 67 67 2f    	addr16 push 0x2f676783
     adc:	08 2d e8 08 65 ca    	or     BYTE PTR ds:0xca6508e8,ch
     ae2:	3e 02 02             	add    al,BYTE PTR ds:[edx]
     ae5:	00 01                	add    BYTE PTR [ecx],al
     ae7:	01 ca                	add    edx,ecx
     ae9:	00 00                	add    BYTE PTR [eax],al
     aeb:	00 02                	add    BYTE PTR [edx],al
     aed:	00 a0 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ah
     af3:	01 fb                	add    ebx,edi
     af5:	0e                   	push   cs
     af6:	0d 00 01 01 01       	or     eax,0x1010100
     afb:	01 00                	add    DWORD PTR [eax],eax
     afd:	00 00                	add    BYTE PTR [eax],al
     aff:	01 00                	add    DWORD PTR [eax],eax
     b01:	00 01                	add    BYTE PTR [ecx],al
     b03:	73 72                	jae    b77 <sysEnter_Vector-0x12f489>
     b05:	63 00                	arpl   WORD PTR [eax],ax
     b07:	2f                   	das    
     b08:	68 6f 6d 65 2f       	push   0x2f656d6f
     b0d:	79 6f                	jns    b7e <sysEnter_Vector-0x12f482>
     b0f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     b16:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     b19:	73 73                	jae    b8e <sysEnter_Vector-0x12f472>
     b1b:	2f                   	das    
     b1c:	6c                   	ins    BYTE PTR es:[edi],dx
     b1d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     b24:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     b2a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     b30:	78 2d                	js     b5f <sysEnter_Vector-0x12f4a1>
     b32:	67 6e                	outs   dx,BYTE PTR ds:[si]
     b34:	75 2f                	jne    b65 <sysEnter_Vector-0x12f49b>
     b36:	35 2e 33 2e 30       	xor    eax,0x302e332e
     b3b:	2f                   	das    
     b3c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b43:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     b46:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     b4a:	65 00 00             	add    BYTE PTR gs:[eax],al
     b4d:	6d                   	ins    DWORD PTR es:[edi],dx
     b4e:	65                   	gs
     b4f:	6d                   	ins    DWORD PTR es:[edi],dx
     b50:	73 65                	jae    bb7 <sysEnter_Vector-0x12f449>
     b52:	74 2e                	je     b82 <sysEnter_Vector-0x12f47e>
     b54:	63 00                	arpl   WORD PTR [eax],ax
     b56:	01 00                	add    DWORD PTR [eax],eax
     b58:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     b5b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     b62:	63 
     b63:	2e                   	cs
     b64:	68 00 02 00 00       	push   0x200
     b69:	73 74                	jae    bdf <sysEnter_Vector-0x12f421>
     b6b:	64                   	fs
     b6c:	64                   	fs
     b6d:	65                   	gs
     b6e:	66                   	data16
     b6f:	2e                   	cs
     b70:	68 00 02 00 00       	push   0x200
     b75:	6d                   	ins    DWORD PTR es:[edi],dx
     b76:	61                   	popa   
     b77:	6c                   	ins    BYTE PTR es:[edi],dx
     b78:	6c                   	ins    BYTE PTR es:[edi],dx
     b79:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b7a:	63 2e                	arpl   WORD PTR [esi],bp
     b7c:	68 00 03 00 00       	push   0x300
     b81:	6c                   	ins    BYTE PTR es:[edi],dx
     b82:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     b89:	4f                   	dec    edi
     b8a:	53                   	push   ebx
     b8b:	2e                   	cs
     b8c:	68 00 03 00 00       	push   0x300
     b91:	00 00                	add    BYTE PTR [eax],al
     b93:	05 02 b4 13 00       	add    eax,0x13b402
     b98:	30 1a                	xor    BYTE PTR [edx],bl
     b9a:	f3 67 67 08 83 67 08 	repz addr32 or BYTE PTR [bp+di+0x867],al
     ba1:	ca 9f 2f             	retf   0x2f9f
     ba4:	d5 bd                	aad    0xbd
     ba6:	9f                   	lahf   
     ba7:	2f                   	das    
     ba8:	f1                   	icebp  
     ba9:	bf d5 cb 3d 31       	mov    edi,0x313dcbd5
     bae:	c9                   	leave  
     baf:	08 13                	or     BYTE PTR [ebx],dl
     bb1:	02 02                	add    al,BYTE PTR [edx]
     bb3:	00 01                	add    BYTE PTR [ecx],al
     bb5:	01 c0                	add    eax,eax
     bb7:	00 00                	add    BYTE PTR [eax],al
     bb9:	00 02                	add    BYTE PTR [edx],al
     bbb:	00 a9 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],ch
     bc1:	01 fb                	add    ebx,edi
     bc3:	0e                   	push   cs
     bc4:	0d 00 01 01 01       	or     eax,0x1010100
     bc9:	01 00                	add    DWORD PTR [eax],eax
     bcb:	00 00                	add    BYTE PTR [eax],al
     bcd:	01 00                	add    DWORD PTR [eax],eax
     bcf:	00 01                	add    BYTE PTR [ecx],al
     bd1:	73 72                	jae    c45 <sysEnter_Vector-0x12f3bb>
     bd3:	63 00                	arpl   WORD PTR [eax],ax
     bd5:	2f                   	das    
     bd6:	68 6f 6d 65 2f       	push   0x2f656d6f
     bdb:	79 6f                	jns    c4c <sysEnter_Vector-0x12f3b4>
     bdd:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     be4:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     be7:	73 73                	jae    c5c <sysEnter_Vector-0x12f3a4>
     be9:	2f                   	das    
     bea:	6c                   	ins    BYTE PTR es:[edi],dx
     beb:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     bf2:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     bf8:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     bfe:	78 2d                	js     c2d <sysEnter_Vector-0x12f3d3>
     c00:	67 6e                	outs   dx,BYTE PTR ds:[si]
     c02:	75 2f                	jne    c33 <sysEnter_Vector-0x12f3cd>
     c04:	35 2e 33 2e 30       	xor    eax,0x302e332e
     c09:	2f                   	das    
     c0a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     c11:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     c14:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     c18:	65 00 00             	add    BYTE PTR gs:[eax],al
     c1b:	6d                   	ins    DWORD PTR es:[edi],dx
     c1c:	6d                   	ins    DWORD PTR es:[edi],dx
     c1d:	61                   	popa   
     c1e:	70 2e                	jo     c4e <sysEnter_Vector-0x12f3b2>
     c20:	63 00                	arpl   WORD PTR [eax],ax
     c22:	01 00                	add    DWORD PTR [eax],eax
     c24:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     c27:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     c2e:	63 
     c2f:	2e                   	cs
     c30:	68 00 02 00 00       	push   0x200
     c35:	73 74                	jae    cab <sysEnter_Vector-0x12f355>
     c37:	64                   	fs
     c38:	64                   	fs
     c39:	65                   	gs
     c3a:	66                   	data16
     c3b:	2e                   	cs
     c3c:	68 00 02 00 00       	push   0x200
     c41:	74 79                	je     cbc <sysEnter_Vector-0x12f344>
     c43:	70 65                	jo     caa <sysEnter_Vector-0x12f356>
     c45:	73 2e                	jae    c75 <sysEnter_Vector-0x12f38b>
     c47:	68 00 03 00 00       	push   0x300
     c4c:	6d                   	ins    DWORD PTR es:[edi],dx
     c4d:	61                   	popa   
     c4e:	6c                   	ins    BYTE PTR es:[edi],dx
     c4f:	6c                   	ins    BYTE PTR es:[edi],dx
     c50:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c51:	63 2e                	arpl   WORD PTR [esi],bp
     c53:	68 00 03 00 00       	push   0x300
     c58:	6c                   	ins    BYTE PTR es:[edi],dx
     c59:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     c60:	4f                   	dec    edi
     c61:	53                   	push   ebx
     c62:	2e                   	cs
     c63:	68 00 03 00 00       	push   0x300
     c68:	00 00                	add    BYTE PTR [eax],al
     c6a:	05 02 9c 14 00       	add    eax,0x149c02
     c6f:	30 03                	xor    BYTE PTR [ebx],al
     c71:	09 01                	or     DWORD PTR [ecx],eax
     c73:	c9                   	leave  
     c74:	59                   	pop    ecx
     c75:	02 02                	add    al,BYTE PTR [edx]
     c77:	00 01                	add    BYTE PTR [ecx],al
     c79:	01 e6                	add    esi,esp
     c7b:	00 00                	add    BYTE PTR [eax],al
     c7d:	00 02                	add    BYTE PTR [edx],al
     c7f:	00 cd                	add    ch,cl
     c81:	00 00                	add    BYTE PTR [eax],al
     c83:	00 01                	add    BYTE PTR [ecx],al
     c85:	01 fb                	add    ebx,edi
     c87:	0e                   	push   cs
     c88:	0d 00 01 01 01       	or     eax,0x1010100
     c8d:	01 00                	add    DWORD PTR [eax],eax
     c8f:	00 00                	add    BYTE PTR [eax],al
     c91:	01 00                	add    DWORD PTR [eax],eax
     c93:	00 01                	add    BYTE PTR [ecx],al
     c95:	73 72                	jae    d09 <sysEnter_Vector-0x12f2f7>
     c97:	63 00                	arpl   WORD PTR [eax],ax
     c99:	2f                   	das    
     c9a:	68 6f 6d 65 2f       	push   0x2f656d6f
     c9f:	79 6f                	jns    d10 <sysEnter_Vector-0x12f2f0>
     ca1:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     ca8:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     cab:	73 73                	jae    d20 <sysEnter_Vector-0x12f2e0>
     cad:	2f                   	das    
     cae:	6c                   	ins    BYTE PTR es:[edi],dx
     caf:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     cb6:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     cbc:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     cc2:	78 2d                	js     cf1 <sysEnter_Vector-0x12f30f>
     cc4:	67 6e                	outs   dx,BYTE PTR ds:[si]
     cc6:	75 2f                	jne    cf7 <sysEnter_Vector-0x12f309>
     cc8:	35 2e 33 2e 30       	xor    eax,0x302e332e
     ccd:	2f                   	das    
     cce:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     cd5:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     cd8:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     cdc:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     ce0:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     ce4:	65                   	gs
     ce5:	2f                   	das    
     ce6:	2e                   	cs
     ce7:	2e                   	cs
     ce8:	2f                   	das    
     ce9:	2e                   	cs
     cea:	2e                   	cs
     ceb:	2f                   	das    
     cec:	2e                   	cs
     ced:	2e                   	cs
     cee:	2f                   	das    
     cef:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     cf3:	6a 2f                	push   0x2f
     cf5:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     cf8:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     cff:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d00:	65                   	gs
     d01:	6c                   	ins    BYTE PTR es:[edi],dx
     d02:	2f                   	das    
     d03:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d0a:	00 00                	add    BYTE PTR [eax],al
     d0c:	70 69                	jo     d77 <sysEnter_Vector-0x12f289>
     d0e:	70 65                	jo     d75 <sysEnter_Vector-0x12f28b>
     d10:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     d13:	01 00                	add    DWORD PTR [eax],eax
     d15:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     d18:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     d1f:	63 
     d20:	2e                   	cs
     d21:	68 00 02 00 00       	push   0x200
     d26:	6d                   	ins    DWORD PTR es:[edi],dx
     d27:	61                   	popa   
     d28:	6c                   	ins    BYTE PTR es:[edi],dx
     d29:	6c                   	ins    BYTE PTR es:[edi],dx
     d2a:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d2b:	63 2e                	arpl   WORD PTR [esi],bp
     d2d:	68 00 03 00 00       	push   0x300
     d32:	6c                   	ins    BYTE PTR es:[edi],dx
     d33:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     d3a:	4f                   	dec    edi
     d3b:	53                   	push   ebx
     d3c:	2e                   	cs
     d3d:	68 00 03 00 00       	push   0x300
     d42:	73 79                	jae    dbd <sysEnter_Vector-0x12f243>
     d44:	73 63                	jae    da9 <sysEnter_Vector-0x12f257>
     d46:	61                   	popa   
     d47:	6c                   	ins    BYTE PTR es:[edi],dx
     d48:	6c                   	ins    BYTE PTR es:[edi],dx
     d49:	73 2e                	jae    d79 <sysEnter_Vector-0x12f287>
     d4b:	68 00 04 00 00       	push   0x400
     d50:	00 00                	add    BYTE PTR [eax],al
     d52:	05 02 b0 14 00       	add    eax,0x14b002
     d57:	30 03                	xor    BYTE PTR [ebx],al
     d59:	0a 01                	or     al,BYTE PTR [ecx]
     d5b:	08 13                	or     BYTE PTR [ebx],dl
     d5d:	08 2f                	or     BYTE PTR [edi],ch
     d5f:	02 05 00 01 01 fa    	add    al,BYTE PTR ds:0xfa010100
     d65:	00 00                	add    BYTE PTR [eax],al
     d67:	00 02                	add    BYTE PTR [edx],al
     d69:	00 d8                	add    al,bl
     d6b:	00 00                	add    BYTE PTR [eax],al
     d6d:	00 01                	add    BYTE PTR [ecx],al
     d6f:	01 fb                	add    ebx,edi
     d71:	0e                   	push   cs
     d72:	0d 00 01 01 01       	or     eax,0x1010100
     d77:	01 00                	add    DWORD PTR [eax],eax
     d79:	00 00                	add    BYTE PTR [eax],al
     d7b:	01 00                	add    DWORD PTR [eax],eax
     d7d:	00 01                	add    BYTE PTR [ecx],al
     d7f:	73 72                	jae    df3 <sysEnter_Vector-0x12f20d>
     d81:	63 00                	arpl   WORD PTR [eax],ax
     d83:	2f                   	das    
     d84:	68 6f 6d 65 2f       	push   0x2f656d6f
     d89:	79 6f                	jns    dfa <sysEnter_Vector-0x12f206>
     d8b:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     d92:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     d95:	73 73                	jae    e0a <sysEnter_Vector-0x12f1f6>
     d97:	2f                   	das    
     d98:	6c                   	ins    BYTE PTR es:[edi],dx
     d99:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     da0:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     da6:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     dac:	78 2d                	js     ddb <sysEnter_Vector-0x12f225>
     dae:	67 6e                	outs   dx,BYTE PTR ds:[si]
     db0:	75 2f                	jne    de1 <sysEnter_Vector-0x12f21f>
     db2:	35 2e 33 2e 30       	xor    eax,0x302e332e
     db7:	2f                   	das    
     db8:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     dbf:	00 2e                	add    BYTE PTR [esi],ch
     dc1:	2e                   	cs
     dc2:	2f                   	das    
     dc3:	2e                   	cs
     dc4:	2e                   	cs
     dc5:	2f                   	das    
     dc6:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     dca:	6a 2f                	push   0x2f
     dcc:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     dcf:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     dd6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     dd7:	65                   	gs
     dd8:	6c                   	ins    BYTE PTR es:[edi],dx
     dd9:	2f                   	das    
     dda:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     de1:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     de4:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     de8:	65 00 00             	add    BYTE PTR gs:[eax],al
     deb:	73 74                	jae    e61 <sysEnter_Vector-0x12f19f>
     ded:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
     df4:	00 
     df5:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     df8:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     dff:	63 
     e00:	2e                   	cs
     e01:	68 00 02 00 00       	push   0x200
     e06:	73 74                	jae    e7c <sysEnter_Vector-0x12f184>
     e08:	64                   	fs
     e09:	64                   	fs
     e0a:	65                   	gs
     e0b:	66                   	data16
     e0c:	2e                   	cs
     e0d:	68 00 02 00 00       	push   0x200
     e12:	64                   	fs
     e13:	6c                   	ins    BYTE PTR es:[edi],dx
     e14:	6c                   	ins    BYTE PTR es:[edi],dx
     e15:	69 73 74 2e 68 00 03 	imul   esi,DWORD PTR [ebx+0x74],0x300682e
     e1c:	00 00                	add    BYTE PTR [eax],al
     e1e:	73 74                	jae    e94 <sysEnter_Vector-0x12f16c>
     e20:	64 69 6f 2e 68 00 04 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x40068
     e27:	00 
     e28:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     e2b:	6c                   	ins    BYTE PTR es:[edi],dx
     e2c:	6c                   	ins    BYTE PTR es:[edi],dx
     e2d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e2e:	63 2e                	arpl   WORD PTR [esi],bp
     e30:	68 00 04 00 00       	push   0x400
     e35:	6c                   	ins    BYTE PTR es:[edi],dx
     e36:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     e3d:	4f                   	dec    edi
     e3e:	53                   	push   ebx
     e3f:	2e                   	cs
     e40:	68 00 04 00 00       	push   0x400
     e45:	00 00                	add    BYTE PTR [eax],al
     e47:	05 02 dc 14 00       	add    eax,0x14dc02
     e4c:	30 03                	xor    BYTE PTR [ebx],al
     e4e:	c3                   	ret    
     e4f:	00 01                	add    BYTE PTR [ecx],al
     e51:	08 22                	or     BYTE PTR [edx],ah
     e53:	76 08                	jbe    e5d <sysEnter_Vector-0x12f1a3>
     e55:	31 d7                	xor    edi,edx
     e57:	d7                   	xlat   BYTE PTR ds:[ebx]
     e58:	d7                   	xlat   BYTE PTR ds:[ebx]
     e59:	d7                   	xlat   BYTE PTR ds:[ebx]
     e5a:	ad                   	lods   eax,DWORD PTR ds:[esi]
     e5b:	e6 21                	out    0x21,al
     e5d:	02 05 00 01 01 cc    	add    al,BYTE PTR ds:0xcc010100
     e63:	00 00                	add    BYTE PTR [eax],al
     e65:	00 02                	add    BYTE PTR [edx],al
     e67:	00 9c 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bl
     e6e:	fb                   	sti    
     e6f:	0e                   	push   cs
     e70:	0d 00 01 01 01       	or     eax,0x1010100
     e75:	01 00                	add    DWORD PTR [eax],eax
     e77:	00 00                	add    BYTE PTR [eax],al
     e79:	01 00                	add    DWORD PTR [eax],eax
     e7b:	00 01                	add    BYTE PTR [ecx],al
     e7d:	73 72                	jae    ef1 <sysEnter_Vector-0x12f10f>
     e7f:	63 2f                	arpl   WORD PTR [edi],bp
     e81:	73 74                	jae    ef7 <sysEnter_Vector-0x12f109>
     e83:	72 69                	jb     eee <sysEnter_Vector-0x12f112>
     e85:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e86:	67 73 00             	addr16 jae e89 <sysEnter_Vector-0x12f177>
     e89:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     e90:	00 2f                	add    BYTE PTR [edi],ch
     e92:	68 6f 6d 65 2f       	push   0x2f656d6f
     e97:	79 6f                	jns    f08 <sysEnter_Vector-0x12f0f8>
     e99:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     ea0:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     ea3:	73 73                	jae    f18 <sysEnter_Vector-0x12f0e8>
     ea5:	2f                   	das    
     ea6:	6c                   	ins    BYTE PTR es:[edi],dx
     ea7:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     eae:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     eb4:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     eba:	78 2d                	js     ee9 <sysEnter_Vector-0x12f117>
     ebc:	67 6e                	outs   dx,BYTE PTR ds:[si]
     ebe:	75 2f                	jne    eef <sysEnter_Vector-0x12f111>
     ec0:	35 2e 33 2e 30       	xor    eax,0x302e332e
     ec5:	2f                   	das    
     ec6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     ecd:	00 00                	add    BYTE PTR [eax],al
     ecf:	73 74                	jae    f45 <sysEnter_Vector-0x12f0bb>
     ed1:	72 63                	jb     f36 <sysEnter_Vector-0x12f0ca>
     ed3:	61                   	popa   
     ed4:	74 2e                	je     f04 <sysEnter_Vector-0x12f0fc>
     ed6:	63 00                	arpl   WORD PTR [eax],ax
     ed8:	01 00                	add    DWORD PTR [eax],eax
     eda:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     edd:	6c                   	ins    BYTE PTR es:[edi],dx
     ede:	6c                   	ins    BYTE PTR es:[edi],dx
     edf:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ee0:	63 2e                	arpl   WORD PTR [esi],bp
     ee2:	68 00 02 00 00       	push   0x200
     ee7:	6c                   	ins    BYTE PTR es:[edi],dx
     ee8:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     eef:	4f                   	dec    edi
     ef0:	53                   	push   ebx
     ef1:	2e                   	cs
     ef2:	68 00 02 00 00       	push   0x200
     ef7:	73 74                	jae    f6d <sysEnter_Vector-0x12f093>
     ef9:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     f00:	63 
     f01:	2e                   	cs
     f02:	68 00 03 00 00       	push   0x300
     f07:	00 00                	add    BYTE PTR [eax],al
     f09:	05 02 60 15 00       	add    eax,0x156002
     f0e:	30 03                	xor    BYTE PTR [ebx],al
     f10:	1d 01 08 21 02       	sbb    eax,0x2210801
     f15:	24 13                	and    al,0x13
     f17:	3d 5b 08 21 02       	cmp    eax,0x221085b
     f1c:	24 13                	and    al,0x13
     f1e:	3d 5a f5 76 2f       	cmp    eax,0x2f76f55a
     f23:	49                   	dec    ecx
     f24:	e8 76 2f 08 4b       	call   4b083e9f <ticksToWait+0x1b07f96f>
     f29:	4b                   	dec    ebx
     f2a:	47                   	inc    edi
     f2b:	ea ad 02 03 00 01 01 	jmp    0x101:0x302ad
     f32:	bb 00 00 00 02       	mov    ebx,0x2000000
     f37:	00 9c 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bl
     f3e:	fb                   	sti    
     f3f:	0e                   	push   cs
     f40:	0d 00 01 01 01       	or     eax,0x1010100
     f45:	01 00                	add    DWORD PTR [eax],eax
     f47:	00 00                	add    BYTE PTR [eax],al
     f49:	01 00                	add    DWORD PTR [eax],eax
     f4b:	00 01                	add    BYTE PTR [ecx],al
     f4d:	73 72                	jae    fc1 <sysEnter_Vector-0x12f03f>
     f4f:	63 2f                	arpl   WORD PTR [edi],bp
     f51:	73 74                	jae    fc7 <sysEnter_Vector-0x12f039>
     f53:	72 69                	jb     fbe <sysEnter_Vector-0x12f042>
     f55:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f56:	67 73 00             	addr16 jae f59 <sysEnter_Vector-0x12f0a7>
     f59:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f60:	00 2f                	add    BYTE PTR [edi],ch
     f62:	68 6f 6d 65 2f       	push   0x2f656d6f
     f67:	79 6f                	jns    fd8 <sysEnter_Vector-0x12f028>
     f69:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     f70:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     f73:	73 73                	jae    fe8 <sysEnter_Vector-0x12f018>
     f75:	2f                   	das    
     f76:	6c                   	ins    BYTE PTR es:[edi],dx
     f77:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     f7e:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     f84:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     f8a:	78 2d                	js     fb9 <sysEnter_Vector-0x12f047>
     f8c:	67 6e                	outs   dx,BYTE PTR ds:[si]
     f8e:	75 2f                	jne    fbf <sysEnter_Vector-0x12f041>
     f90:	35 2e 33 2e 30       	xor    eax,0x302e332e
     f95:	2f                   	das    
     f96:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f9d:	00 00                	add    BYTE PTR [eax],al
     f9f:	73 74                	jae    1015 <sysEnter_Vector-0x12efeb>
     fa1:	72 63                	jb     1006 <sysEnter_Vector-0x12effa>
     fa3:	6d                   	ins    DWORD PTR es:[edi],dx
     fa4:	70 2e                	jo     fd4 <sysEnter_Vector-0x12f02c>
     fa6:	63 00                	arpl   WORD PTR [eax],ax
     fa8:	01 00                	add    DWORD PTR [eax],eax
     faa:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     fad:	6c                   	ins    BYTE PTR es:[edi],dx
     fae:	6c                   	ins    BYTE PTR es:[edi],dx
     faf:	6f                   	outs   dx,DWORD PTR ds:[esi]
     fb0:	63 2e                	arpl   WORD PTR [esi],bp
     fb2:	68 00 02 00 00       	push   0x200
     fb7:	6c                   	ins    BYTE PTR es:[edi],dx
     fb8:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     fbf:	4f                   	dec    edi
     fc0:	53                   	push   ebx
     fc1:	2e                   	cs
     fc2:	68 00 02 00 00       	push   0x200
     fc7:	73 74                	jae    103d <sysEnter_Vector-0x12efc3>
     fc9:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     fd0:	63 
     fd1:	2e                   	cs
     fd2:	68 00 03 00 00       	push   0x300
     fd7:	00 00                	add    BYTE PTR [eax],al
     fd9:	05 02 4c 16 00       	add    eax,0x164c02
     fde:	30 03                	xor    BYTE PTR [ebx],al
     fe0:	18 01                	sbb    BYTE PTR [ecx],al
     fe2:	08 21                	or     BYTE PTR [ecx],ah
     fe4:	3d 41 ad ad 67       	cmp    eax,0x67adad41
     fe9:	d8 92 bb 02 07 00    	fcom   DWORD PTR [edx+0x702bb]
     fef:	01 01                	add    DWORD PTR [ecx],eax
     ff1:	dc 00                	fadd   QWORD PTR [eax]
     ff3:	00 00                	add    BYTE PTR [eax],al
     ff5:	02 00                	add    al,BYTE PTR [eax]
     ff7:	9c                   	pushf  
     ff8:	00 00                	add    BYTE PTR [eax],al
     ffa:	00 01                	add    BYTE PTR [ecx],al
     ffc:	01 fb                	add    ebx,edi
     ffe:	0e                   	push   cs
     fff:	0d 00 01 01 01       	or     eax,0x1010100
    1004:	01 00                	add    DWORD PTR [eax],eax
    1006:	00 00                	add    BYTE PTR [eax],al
    1008:	01 00                	add    DWORD PTR [eax],eax
    100a:	00 01                	add    BYTE PTR [ecx],al
    100c:	73 72                	jae    1080 <sysEnter_Vector-0x12ef80>
    100e:	63 2f                	arpl   WORD PTR [edi],bp
    1010:	73 74                	jae    1086 <sysEnter_Vector-0x12ef7a>
    1012:	72 69                	jb     107d <sysEnter_Vector-0x12ef83>
    1014:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1015:	67 73 00             	addr16 jae 1018 <sysEnter_Vector-0x12efe8>
    1018:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    101f:	00 2f                	add    BYTE PTR [edi],ch
    1021:	68 6f 6d 65 2f       	push   0x2f656d6f
    1026:	79 6f                	jns    1097 <sysEnter_Vector-0x12ef69>
    1028:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    102f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1032:	73 73                	jae    10a7 <sysEnter_Vector-0x12ef59>
    1034:	2f                   	das    
    1035:	6c                   	ins    BYTE PTR es:[edi],dx
    1036:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    103d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1043:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1049:	78 2d                	js     1078 <sysEnter_Vector-0x12ef88>
    104b:	67 6e                	outs   dx,BYTE PTR ds:[si]
    104d:	75 2f                	jne    107e <sysEnter_Vector-0x12ef82>
    104f:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1054:	2f                   	das    
    1055:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    105c:	00 00                	add    BYTE PTR [eax],al
    105e:	73 74                	jae    10d4 <sysEnter_Vector-0x12ef2c>
    1060:	72 63                	jb     10c5 <sysEnter_Vector-0x12ef3b>
    1062:	70 79                	jo     10dd <sysEnter_Vector-0x12ef23>
    1064:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1067:	01 00                	add    DWORD PTR [eax],eax
    1069:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    106c:	6c                   	ins    BYTE PTR es:[edi],dx
    106d:	6c                   	ins    BYTE PTR es:[edi],dx
    106e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    106f:	63 2e                	arpl   WORD PTR [esi],bp
    1071:	68 00 02 00 00       	push   0x200
    1076:	6c                   	ins    BYTE PTR es:[edi],dx
    1077:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    107e:	4f                   	dec    edi
    107f:	53                   	push   ebx
    1080:	2e                   	cs
    1081:	68 00 02 00 00       	push   0x200
    1086:	73 74                	jae    10fc <sysEnter_Vector-0x12ef04>
    1088:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    108f:	63 
    1090:	2e                   	cs
    1091:	68 00 03 00 00       	push   0x300
    1096:	00 00                	add    BYTE PTR [eax],al
    1098:	05 02 ac 16 00       	add    eax,0x16ac02
    109d:	30 16                	xor    BYTE PTR [esi],dl
    109f:	f3 67 00 02          	repz add BYTE PTR [bp+si],al
    10a3:	04 01                	add    al,0x1
    10a5:	06                   	push   es
    10a6:	20 06                	and    BYTE PTR [esi],al
    10a8:	08 ca                	or     dl,cl
    10aa:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    10b0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    10b3:	06                   	push   es
    10b4:	20 06                	and    BYTE PTR [esi],al
    10b6:	08 ca                	or     dl,cl
    10b8:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    10be:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    10c1:	06                   	push   es
    10c2:	20 00                	and    BYTE PTR [eax],al
    10c4:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    10c7:	08 c8                	or     al,cl
    10c9:	06                   	push   es
    10ca:	ca 3d 02             	retf   0x23d
    10cd:	02 00                	add    al,BYTE PTR [eax]
    10cf:	01 01                	add    DWORD PTR [ecx],eax
    10d1:	cb                   	retf   
    10d2:	00 00                	add    BYTE PTR [eax],al
    10d4:	00 02                	add    BYTE PTR [edx],al
    10d6:	00 9e 00 00 00 01    	add    BYTE PTR [esi+0x1000000],bl
    10dc:	01 fb                	add    ebx,edi
    10de:	0e                   	push   cs
    10df:	0d 00 01 01 01       	or     eax,0x1010100
    10e4:	01 00                	add    DWORD PTR [eax],eax
    10e6:	00 00                	add    BYTE PTR [eax],al
    10e8:	01 00                	add    DWORD PTR [eax],eax
    10ea:	00 01                	add    BYTE PTR [ecx],al
    10ec:	73 72                	jae    1160 <sysEnter_Vector-0x12eea0>
    10ee:	63 2f                	arpl   WORD PTR [edi],bp
    10f0:	73 74                	jae    1166 <sysEnter_Vector-0x12ee9a>
    10f2:	72 69                	jb     115d <sysEnter_Vector-0x12eea3>
    10f4:	6e                   	outs   dx,BYTE PTR ds:[esi]
    10f5:	67 73 00             	addr16 jae 10f8 <sysEnter_Vector-0x12ef08>
    10f8:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    10ff:	00 2f                	add    BYTE PTR [edi],ch
    1101:	68 6f 6d 65 2f       	push   0x2f656d6f
    1106:	79 6f                	jns    1177 <sysEnter_Vector-0x12ee89>
    1108:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    110f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1112:	73 73                	jae    1187 <sysEnter_Vector-0x12ee79>
    1114:	2f                   	das    
    1115:	6c                   	ins    BYTE PTR es:[edi],dx
    1116:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    111d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1123:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1129:	78 2d                	js     1158 <sysEnter_Vector-0x12eea8>
    112b:	67 6e                	outs   dx,BYTE PTR ds:[si]
    112d:	75 2f                	jne    115e <sysEnter_Vector-0x12eea2>
    112f:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1134:	2f                   	das    
    1135:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    113c:	00 00                	add    BYTE PTR [eax],al
    113e:	73 74                	jae    11b4 <sysEnter_Vector-0x12ee4c>
    1140:	72 69                	jb     11ab <sysEnter_Vector-0x12ee55>
    1142:	73 6e                	jae    11b2 <sysEnter_Vector-0x12ee4e>
    1144:	75 6d                	jne    11b3 <sysEnter_Vector-0x12ee4d>
    1146:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1149:	01 00                	add    DWORD PTR [eax],eax
    114b:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    114e:	6c                   	ins    BYTE PTR es:[edi],dx
    114f:	6c                   	ins    BYTE PTR es:[edi],dx
    1150:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1151:	63 2e                	arpl   WORD PTR [esi],bp
    1153:	68 00 02 00 00       	push   0x200
    1158:	6c                   	ins    BYTE PTR es:[edi],dx
    1159:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1160:	4f                   	dec    edi
    1161:	53                   	push   ebx
    1162:	2e                   	cs
    1163:	68 00 02 00 00       	push   0x200
    1168:	73 74                	jae    11de <sysEnter_Vector-0x12ee22>
    116a:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1171:	63 
    1172:	2e                   	cs
    1173:	68 00 03 00 00       	push   0x300
    1178:	00 00                	add    BYTE PTR [eax],al
    117a:	05 02 74 17 00       	add    eax,0x177402
    117f:	30 1a                	xor    BYTE PTR [edx],bl
    1181:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    1184:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1187:	06                   	push   es
    1188:	66                   	data16
    1189:	00 02                	add    BYTE PTR [edx],al
    118b:	04 02                	add    al,0x2
    118d:	66 06                	pushw  es
    118f:	75 59                	jne    11ea <sysEnter_Vector-0x12ee16>
    1191:	31 f3                	xor    ebx,esi
    1193:	76 2f                	jbe    11c4 <sysEnter_Vector-0x12ee3c>
    1195:	08 e5                	or     ch,ah
    1197:	72 08                	jb     11a1 <sysEnter_Vector-0x12ee5f>
    1199:	23 5a 02             	and    ebx,DWORD PTR [edx+0x2]
    119c:	02 00                	add    al,BYTE PTR [eax]
    119e:	01 01                	add    DWORD PTR [ecx],eax
    11a0:	94                   	xchg   esp,eax
    11a1:	00 00                	add    BYTE PTR [eax],al
    11a3:	00 02                	add    BYTE PTR [edx],al
    11a5:	00 74 00 00          	add    BYTE PTR [eax+eax*1+0x0],dh
    11a9:	00 01                	add    BYTE PTR [ecx],al
    11ab:	01 fb                	add    ebx,edi
    11ad:	0e                   	push   cs
    11ae:	0d 00 01 01 01       	or     eax,0x1010100
    11b3:	01 00                	add    DWORD PTR [eax],eax
    11b5:	00 00                	add    BYTE PTR [eax],al
    11b7:	01 00                	add    DWORD PTR [eax],eax
    11b9:	00 01                	add    BYTE PTR [ecx],al
    11bb:	73 72                	jae    122f <sysEnter_Vector-0x12edd1>
    11bd:	63 2f                	arpl   WORD PTR [edi],bp
    11bf:	73 74                	jae    1235 <sysEnter_Vector-0x12edcb>
    11c1:	72 69                	jb     122c <sysEnter_Vector-0x12edd4>
    11c3:	6e                   	outs   dx,BYTE PTR ds:[esi]
    11c4:	67 73 00             	addr16 jae 11c7 <sysEnter_Vector-0x12ee39>
    11c7:	2f                   	das    
    11c8:	68 6f 6d 65 2f       	push   0x2f656d6f
    11cd:	79 6f                	jns    123e <sysEnter_Vector-0x12edc2>
    11cf:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    11d6:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    11d9:	73 73                	jae    124e <sysEnter_Vector-0x12edb2>
    11db:	2f                   	das    
    11dc:	6c                   	ins    BYTE PTR es:[edi],dx
    11dd:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    11e4:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    11ea:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    11f0:	78 2d                	js     121f <sysEnter_Vector-0x12ede1>
    11f2:	67 6e                	outs   dx,BYTE PTR ds:[si]
    11f4:	75 2f                	jne    1225 <sysEnter_Vector-0x12eddb>
    11f6:	35 2e 33 2e 30       	xor    eax,0x302e332e
    11fb:	2f                   	das    
    11fc:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1203:	00 00                	add    BYTE PTR [eax],al
    1205:	73 74                	jae    127b <sysEnter_Vector-0x12ed85>
    1207:	72 6c                	jb     1275 <sysEnter_Vector-0x12ed8b>
    1209:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    120b:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    120e:	01 00                	add    DWORD PTR [eax],eax
    1210:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1213:	64                   	fs
    1214:	64                   	fs
    1215:	65                   	gs
    1216:	66                   	data16
    1217:	2e                   	cs
    1218:	68 00 02 00 00       	push   0x200
    121d:	00 00                	add    BYTE PTR [eax],al
    121f:	05 02 00 18 00       	add    eax,0x180002
    1224:	30 14 f3             	xor    BYTE PTR [ebx+esi*8],dl
    1227:	75 2f                	jne    1258 <sysEnter_Vector-0x12eda8>
    1229:	49                   	dec    ecx
    122a:	e6 3d                	out    0x3d,al
    122c:	30 f3                	xor    bl,dh
    122e:	75 2f                	jne    125f <sysEnter_Vector-0x12eda1>
    1230:	49                   	dec    ecx
    1231:	e6 3d                	out    0x3d,al
    1233:	02 02                	add    al,BYTE PTR [edx]
    1235:	00 01                	add    BYTE PTR [ecx],al
    1237:	01 c1                	add    ecx,eax
    1239:	00 00                	add    BYTE PTR [eax],al
    123b:	00 02                	add    BYTE PTR [edx],al
    123d:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    1240:	00 00                	add    BYTE PTR [eax],al
    1242:	01 01                	add    DWORD PTR [ecx],eax
    1244:	fb                   	sti    
    1245:	0e                   	push   cs
    1246:	0d 00 01 01 01       	or     eax,0x1010100
    124b:	01 00                	add    DWORD PTR [eax],eax
    124d:	00 00                	add    BYTE PTR [eax],al
    124f:	01 00                	add    DWORD PTR [eax],eax
    1251:	00 01                	add    BYTE PTR [ecx],al
    1253:	73 72                	jae    12c7 <sysEnter_Vector-0x12ed39>
    1255:	63 2f                	arpl   WORD PTR [edi],bp
    1257:	73 74                	jae    12cd <sysEnter_Vector-0x12ed33>
    1259:	72 69                	jb     12c4 <sysEnter_Vector-0x12ed3c>
    125b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    125c:	67 73 00             	addr16 jae 125f <sysEnter_Vector-0x12eda1>
    125f:	2f                   	das    
    1260:	68 6f 6d 65 2f       	push   0x2f656d6f
    1265:	79 6f                	jns    12d6 <sysEnter_Vector-0x12ed2a>
    1267:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    126e:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1271:	73 73                	jae    12e6 <sysEnter_Vector-0x12ed1a>
    1273:	2f                   	das    
    1274:	6c                   	ins    BYTE PTR es:[edi],dx
    1275:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    127c:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1282:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1288:	78 2d                	js     12b7 <sysEnter_Vector-0x12ed49>
    128a:	67 6e                	outs   dx,BYTE PTR ds:[si]
    128c:	75 2f                	jne    12bd <sysEnter_Vector-0x12ed43>
    128e:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1293:	2f                   	das    
    1294:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    129b:	00 00                	add    BYTE PTR [eax],al
    129d:	73 74                	jae    1313 <sysEnter_Vector-0x12eced>
    129f:	72 6e                	jb     130f <sysEnter_Vector-0x12ecf1>
    12a1:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    12a4:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    12a7:	01 00                	add    DWORD PTR [eax],eax
    12a9:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    12ac:	64                   	fs
    12ad:	64                   	fs
    12ae:	65                   	gs
    12af:	66                   	data16
    12b0:	2e                   	cs
    12b1:	68 00 02 00 00       	push   0x200
    12b6:	00 00                	add    BYTE PTR [eax],al
    12b8:	05 02 64 18 00       	add    eax,0x186402
    12bd:	30 03                	xor    BYTE PTR [ebx],al
    12bf:	0c 01                	or     al,0x1
    12c1:	c9                   	leave  
    12c2:	2f                   	das    
    12c3:	f3 00 02             	repz add BYTE PTR [edx],al
    12c6:	04 01                	add    al,0x1
    12c8:	06                   	push   es
    12c9:	f2 00 02             	repnz add BYTE PTR [edx],al
    12cc:	04 02                	add    al,0x2
    12ce:	74 06                	je     12d6 <sysEnter_Vector-0x12ed2a>
    12d0:	75 9f                	jne    1271 <sysEnter_Vector-0x12ed8f>
    12d2:	70 00                	jo     12d4 <sysEnter_Vector-0x12ed2c>
    12d4:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    12d7:	06                   	push   es
    12d8:	ba 06 6b 59 31       	mov    edx,0x31596b06
    12dd:	c9                   	leave  
    12de:	2f                   	das    
    12df:	f3 00 02             	repz add BYTE PTR [edx],al
    12e2:	04 01                	add    al,0x1
    12e4:	06                   	push   es
    12e5:	f2 00 02             	repnz add BYTE PTR [edx],al
    12e8:	04 02                	add    al,0x2
    12ea:	74 06                	je     12f2 <sysEnter_Vector-0x12ed0e>
    12ec:	75 9f                	jne    128d <sysEnter_Vector-0x12ed73>
    12ee:	70 00                	jo     12f0 <sysEnter_Vector-0x12ed10>
    12f0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    12f3:	06                   	push   es
    12f4:	ba 06 6b 59 02       	mov    edx,0x2596b06
    12f9:	02 00                	add    al,BYTE PTR [eax]
    12fb:	01 01                	add    DWORD PTR [ecx],eax
    12fd:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1302:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    1305:	00 00                	add    BYTE PTR [eax],al
    1307:	01 01                	add    DWORD PTR [ecx],eax
    1309:	fb                   	sti    
    130a:	0e                   	push   cs
    130b:	0d 00 01 01 01       	or     eax,0x1010100
    1310:	01 00                	add    DWORD PTR [eax],eax
    1312:	00 00                	add    BYTE PTR [eax],al
    1314:	01 00                	add    DWORD PTR [eax],eax
    1316:	00 01                	add    BYTE PTR [ecx],al
    1318:	73 72                	jae    138c <sysEnter_Vector-0x12ec74>
    131a:	63 2f                	arpl   WORD PTR [edi],bp
    131c:	73 74                	jae    1392 <sysEnter_Vector-0x12ec6e>
    131e:	72 69                	jb     1389 <sysEnter_Vector-0x12ec77>
    1320:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1321:	67 73 00             	addr16 jae 1324 <sysEnter_Vector-0x12ecdc>
    1324:	2f                   	das    
    1325:	68 6f 6d 65 2f       	push   0x2f656d6f
    132a:	79 6f                	jns    139b <sysEnter_Vector-0x12ec65>
    132c:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1333:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1336:	73 73                	jae    13ab <sysEnter_Vector-0x12ec55>
    1338:	2f                   	das    
    1339:	6c                   	ins    BYTE PTR es:[edi],dx
    133a:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1341:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1347:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    134d:	78 2d                	js     137c <sysEnter_Vector-0x12ec84>
    134f:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1351:	75 2f                	jne    1382 <sysEnter_Vector-0x12ec7e>
    1353:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1358:	2f                   	das    
    1359:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1360:	00 00                	add    BYTE PTR [eax],al
    1362:	73 74                	jae    13d8 <sysEnter_Vector-0x12ec28>
    1364:	72 6e                	jb     13d4 <sysEnter_Vector-0x12ec2c>
    1366:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    1369:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    136c:	01 00                	add    DWORD PTR [eax],eax
    136e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1371:	64                   	fs
    1372:	64                   	fs
    1373:	65                   	gs
    1374:	66                   	data16
    1375:	2e                   	cs
    1376:	68 00 02 00 00       	push   0x200
    137b:	00 00                	add    BYTE PTR [eax],al
    137d:	05 02 34 19 00       	add    eax,0x193402
    1382:	30 03                	xor    BYTE PTR [ebx],al
    1384:	0d 01 f3 67 2f       	or     eax,0x2f67f301
    1389:	08 67 48             	or     BYTE PTR [edi+0x48],ah
    138c:	00 02                	add    BYTE PTR [edx],al
    138e:	04 01                	add    al,0x1
    1390:	06                   	push   es
    1391:	66 06                	pushw  es
    1393:	a2 2f bb 48 6a       	mov    ds:0x6a48bb2f,al
    1398:	3d 31 c9 08 13       	cmp    eax,0x1308c931
    139d:	02 02                	add    al,BYTE PTR [edx]
    139f:	00 01                	add    BYTE PTR [ecx],al
    13a1:	01 49 01             	add    DWORD PTR [ecx+0x1],ecx
    13a4:	00 00                	add    BYTE PTR [eax],al
    13a6:	02 00                	add    al,BYTE PTR [eax]
    13a8:	9c                   	pushf  
    13a9:	00 00                	add    BYTE PTR [eax],al
    13ab:	00 01                	add    BYTE PTR [ecx],al
    13ad:	01 fb                	add    ebx,edi
    13af:	0e                   	push   cs
    13b0:	0d 00 01 01 01       	or     eax,0x1010100
    13b5:	01 00                	add    DWORD PTR [eax],eax
    13b7:	00 00                	add    BYTE PTR [eax],al
    13b9:	01 00                	add    DWORD PTR [eax],eax
    13bb:	00 01                	add    BYTE PTR [ecx],al
    13bd:	73 72                	jae    1431 <sysEnter_Vector-0x12ebcf>
    13bf:	63 2f                	arpl   WORD PTR [edi],bp
    13c1:	73 74                	jae    1437 <sysEnter_Vector-0x12ebc9>
    13c3:	72 69                	jb     142e <sysEnter_Vector-0x12ebd2>
    13c5:	6e                   	outs   dx,BYTE PTR ds:[esi]
    13c6:	67 73 00             	addr16 jae 13c9 <sysEnter_Vector-0x12ec37>
    13c9:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    13d0:	00 2f                	add    BYTE PTR [edi],ch
    13d2:	68 6f 6d 65 2f       	push   0x2f656d6f
    13d7:	79 6f                	jns    1448 <sysEnter_Vector-0x12ebb8>
    13d9:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    13e0:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    13e3:	73 73                	jae    1458 <sysEnter_Vector-0x12eba8>
    13e5:	2f                   	das    
    13e6:	6c                   	ins    BYTE PTR es:[edi],dx
    13e7:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    13ee:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    13f4:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    13fa:	78 2d                	js     1429 <sysEnter_Vector-0x12ebd7>
    13fc:	67 6e                	outs   dx,BYTE PTR ds:[si]
    13fe:	75 2f                	jne    142f <sysEnter_Vector-0x12ebd1>
    1400:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1405:	2f                   	das    
    1406:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    140d:	00 00                	add    BYTE PTR [eax],al
    140f:	73 74                	jae    1485 <sysEnter_Vector-0x12eb7b>
    1411:	72 6f                	jb     1482 <sysEnter_Vector-0x12eb7e>
    1413:	75 6c                	jne    1481 <sysEnter_Vector-0x12eb7f>
    1415:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1418:	01 00                	add    DWORD PTR [eax],eax
    141a:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    141d:	6c                   	ins    BYTE PTR es:[edi],dx
    141e:	6c                   	ins    BYTE PTR es:[edi],dx
    141f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1420:	63 2e                	arpl   WORD PTR [esi],bp
    1422:	68 00 02 00 00       	push   0x200
    1427:	6c                   	ins    BYTE PTR es:[edi],dx
    1428:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    142f:	4f                   	dec    edi
    1430:	53                   	push   ebx
    1431:	2e                   	cs
    1432:	68 00 02 00 00       	push   0x200
    1437:	73 74                	jae    14ad <sysEnter_Vector-0x12eb53>
    1439:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1440:	63 
    1441:	2e                   	cs
    1442:	68 00 03 00 00       	push   0x300
    1447:	00 00                	add    BYTE PTR [eax],al
    1449:	05 02 b4 19 00       	add    eax,0x19b402
    144e:	30 03                	xor    BYTE PTR [ebx],al
    1450:	3b 01                	cmp    eax,DWORD PTR [ecx]
    1452:	08 2f                	or     BYTE PTR [edi],ch
    1454:	40                   	inc    eax
    1455:	00 02                	add    BYTE PTR [edx],al
    1457:	04 01                	add    al,0x1
    1459:	7a 00                	jp     145b <sysEnter_Vector-0x12eba5>
    145b:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    145e:	ad                   	lods   eax,DWORD PTR ds:[esi]
    145f:	59                   	pop    ecx
    1460:	59                   	pop    ecx
    1461:	75 c9                	jne    142c <sysEnter_Vector-0x12ebd4>
    1463:	59                   	pop    ecx
    1464:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1465:	00 02                	add    BYTE PTR [edx],al
    1467:	04 02                	add    al,0x2
    1469:	06                   	push   es
    146a:	66                   	data16
    146b:	00 02                	add    BYTE PTR [edx],al
    146d:	04 03                	add    al,0x3
    146f:	66 06                	pushw  es
    1471:	59                   	pop    ecx
    1472:	00 02                	add    BYTE PTR [edx],al
    1474:	04 01                	add    al,0x1
    1476:	06                   	push   es
    1477:	74 06                	je     147f <sysEnter_Vector-0x12eb81>
    1479:	75 91                	jne    140c <sysEnter_Vector-0x12ebf4>
    147b:	3d 76 67 00 02       	cmp    eax,0x2006776
    1480:	04 01                	add    al,0x1
    1482:	06                   	push   es
    1483:	58                   	pop    eax
    1484:	00 02                	add    BYTE PTR [edx],al
    1486:	04 02                	add    al,0x2
    1488:	74 00                	je     148a <sysEnter_Vector-0x12eb76>
    148a:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    148d:	58                   	pop    eax
    148e:	06                   	push   es
    148f:	3d 08 21 08 2f       	cmp    eax,0x2f082108
    1494:	9f                   	lahf   
    1495:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1499:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    149c:	06                   	push   es
    149d:	58                   	pop    eax
    149e:	00 02                	add    BYTE PTR [edx],al
    14a0:	04 03                	add    al,0x3
    14a2:	58                   	pop    eax
    14a3:	00 02                	add    BYTE PTR [edx],al
    14a5:	04 04                	add    al,0x4
    14a7:	74 00                	je     14a9 <sysEnter_Vector-0x12eb57>
    14a9:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    14ac:	58                   	pop    eax
    14ad:	06                   	push   es
    14ae:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    14b1:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    14b4:	06                   	push   es
    14b5:	66                   	data16
    14b6:	00 02                	add    BYTE PTR [edx],al
    14b8:	04 02                	add    al,0x2
    14ba:	58                   	pop    eax
    14bb:	00 02                	add    BYTE PTR [edx],al
    14bd:	04 03                	add    al,0x3
    14bf:	58                   	pop    eax
    14c0:	06                   	push   es
    14c1:	67 76 59             	addr16 jbe 151d <sysEnter_Vector-0x12eae3>
    14c4:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    14c8:	03 10                	add    edx,DWORD PTR [eax]
    14ca:	ac                   	lods   al,BYTE PTR ds:[esi]
    14cb:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    14ce:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    14d1:	20 67 75             	and    BYTE PTR [edi+0x75],ah
    14d4:	67 2f                	addr16 das 
    14d6:	67 00 02             	add    BYTE PTR [bp+si],al
    14d9:	04 01                	add    al,0x1
    14db:	06                   	push   es
    14dc:	66                   	data16
    14dd:	00 02                	add    BYTE PTR [edx],al
    14df:	04 02                	add    al,0x2
    14e1:	58                   	pop    eax
    14e2:	00 02                	add    BYTE PTR [edx],al
    14e4:	04 04                	add    al,0x4
    14e6:	3c 06                	cmp    al,0x6
    14e8:	59                   	pop    ecx
    14e9:	2f                   	das    
    14ea:	02 08                	add    cl,BYTE PTR [eax]
    14ec:	00 01                	add    BYTE PTR [ecx],al
    14ee:	01 43 00             	add    DWORD PTR [ebx+0x0],eax
    14f1:	00 00                	add    BYTE PTR [eax],al
    14f3:	02 00                	add    al,BYTE PTR [eax]
    14f5:	2d 00 00 00 01       	sub    eax,0x1000000
    14fa:	01 fb                	add    ebx,edi
    14fc:	0e                   	push   cs
    14fd:	0d 00 01 01 01       	or     eax,0x1010100
    1502:	01 00                	add    DWORD PTR [eax],eax
    1504:	00 00                	add    BYTE PTR [eax],al
    1506:	01 00                	add    DWORD PTR [eax],eax
    1508:	00 01                	add    BYTE PTR [ecx],al
    150a:	73 72                	jae    157e <sysEnter_Vector-0x12ea82>
    150c:	63 2f                	arpl   WORD PTR [edi],bp
    150e:	73 74                	jae    1584 <sysEnter_Vector-0x12ea7c>
    1510:	72 69                	jb     157b <sysEnter_Vector-0x12ea85>
    1512:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1513:	67 73 00             	addr16 jae 1516 <sysEnter_Vector-0x12eaea>
    1516:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1519:	72 70                	jb     158b <sysEnter_Vector-0x12ea75>
    151b:	61                   	popa   
    151c:	72 74                	jb     1592 <sysEnter_Vector-0x12ea6e>
    151e:	73 2e                	jae    154e <sysEnter_Vector-0x12eab2>
    1520:	63 00                	arpl   WORD PTR [eax],ax
    1522:	01 00                	add    DWORD PTR [eax],eax
    1524:	00 00                	add    BYTE PTR [eax],al
    1526:	00 05 02 34 1b 00    	add    BYTE PTR ds:0x1b3402,al
    152c:	30 13                	xor    BYTE PTR [ebx],dl
    152e:	c9                   	leave  
    152f:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1530:	3d 02 02 00 01       	cmp    eax,0x1000202
    1535:	01 75 01             	add    DWORD PTR [ebp+0x1],esi
    1538:	00 00                	add    BYTE PTR [eax],al
    153a:	02 00                	add    al,BYTE PTR [eax]
    153c:	9c                   	pushf  
    153d:	00 00                	add    BYTE PTR [eax],al
    153f:	00 01                	add    BYTE PTR [ecx],al
    1541:	01 fb                	add    ebx,edi
    1543:	0e                   	push   cs
    1544:	0d 00 01 01 01       	or     eax,0x1010100
    1549:	01 00                	add    DWORD PTR [eax],eax
    154b:	00 00                	add    BYTE PTR [eax],al
    154d:	01 00                	add    DWORD PTR [eax],eax
    154f:	00 01                	add    BYTE PTR [ecx],al
    1551:	73 72                	jae    15c5 <sysEnter_Vector-0x12ea3b>
    1553:	63 2f                	arpl   WORD PTR [edi],bp
    1555:	73 74                	jae    15cb <sysEnter_Vector-0x12ea35>
    1557:	72 69                	jb     15c2 <sysEnter_Vector-0x12ea3e>
    1559:	6e                   	outs   dx,BYTE PTR ds:[esi]
    155a:	67 73 00             	addr16 jae 155d <sysEnter_Vector-0x12eaa3>
    155d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1564:	00 2f                	add    BYTE PTR [edi],ch
    1566:	68 6f 6d 65 2f       	push   0x2f656d6f
    156b:	79 6f                	jns    15dc <sysEnter_Vector-0x12ea24>
    156d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1574:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1577:	73 73                	jae    15ec <sysEnter_Vector-0x12ea14>
    1579:	2f                   	das    
    157a:	6c                   	ins    BYTE PTR es:[edi],dx
    157b:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1582:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1588:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    158e:	78 2d                	js     15bd <sysEnter_Vector-0x12ea43>
    1590:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1592:	75 2f                	jne    15c3 <sysEnter_Vector-0x12ea3d>
    1594:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1599:	2f                   	das    
    159a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    15a1:	00 00                	add    BYTE PTR [eax],al
    15a3:	73 74                	jae    1619 <sysEnter_Vector-0x12e9e7>
    15a5:	72 74                	jb     161b <sysEnter_Vector-0x12e9e5>
    15a7:	6f                   	outs   dx,DWORD PTR ds:[esi]
    15a8:	6c                   	ins    BYTE PTR es:[edi],dx
    15a9:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    15ac:	01 00                	add    DWORD PTR [eax],eax
    15ae:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    15b1:	6c                   	ins    BYTE PTR es:[edi],dx
    15b2:	6c                   	ins    BYTE PTR es:[edi],dx
    15b3:	6f                   	outs   dx,DWORD PTR ds:[esi]
    15b4:	63 2e                	arpl   WORD PTR [esi],bp
    15b6:	68 00 02 00 00       	push   0x200
    15bb:	6c                   	ins    BYTE PTR es:[edi],dx
    15bc:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    15c3:	4f                   	dec    edi
    15c4:	53                   	push   ebx
    15c5:	2e                   	cs
    15c6:	68 00 02 00 00       	push   0x200
    15cb:	73 74                	jae    1641 <sysEnter_Vector-0x12e9bf>
    15cd:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    15d4:	63 
    15d5:	2e                   	cs
    15d6:	68 00 03 00 00       	push   0x300
    15db:	00 00                	add    BYTE PTR [eax],al
    15dd:	05 02 54 1b 00       	add    eax,0x1b5402
    15e2:	30 03                	xor    BYTE PTR [ebx],al
    15e4:	d7                   	xlat   BYTE PTR ds:[ebx]
    15e5:	00 01                	add    BYTE PTR [ecx],al
    15e7:	08 2f                	or     BYTE PTR [edi],ch
    15e9:	40                   	inc    eax
    15ea:	00 02                	add    BYTE PTR [edx],al
    15ec:	04 01                	add    al,0x1
    15ee:	7c 00                	jl     15f0 <sysEnter_Vector-0x12ea10>
    15f0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    15f3:	ad                   	lods   eax,DWORD PTR ds:[esi]
    15f4:	59                   	pop    ecx
    15f5:	59                   	pop    ecx
    15f6:	75 c9                	jne    15c1 <sysEnter_Vector-0x12ea3f>
    15f8:	59                   	pop    ecx
    15f9:	ad                   	lods   eax,DWORD PTR ds:[esi]
    15fa:	00 02                	add    BYTE PTR [edx],al
    15fc:	04 02                	add    al,0x2
    15fe:	06                   	push   es
    15ff:	66                   	data16
    1600:	00 02                	add    BYTE PTR [edx],al
    1602:	04 03                	add    al,0x3
    1604:	66 06                	pushw  es
    1606:	59                   	pop    ecx
    1607:	00 02                	add    BYTE PTR [edx],al
    1609:	04 01                	add    al,0x1
    160b:	06                   	push   es
    160c:	74 06                	je     1614 <sysEnter_Vector-0x12e9ec>
    160e:	75 91                	jne    15a1 <sysEnter_Vector-0x12ea5f>
    1610:	3d 76 67 00 02       	cmp    eax,0x2006776
    1615:	04 01                	add    al,0x1
    1617:	06                   	push   es
    1618:	58                   	pop    eax
    1619:	00 02                	add    BYTE PTR [edx],al
    161b:	04 02                	add    al,0x2
    161d:	74 00                	je     161f <sysEnter_Vector-0x12e9e1>
    161f:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1622:	58                   	pop    eax
    1623:	06                   	push   es
    1624:	03 13                	add    edx,DWORD PTR [ebx]
    1626:	3c 00                	cmp    al,0x0
    1628:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    162b:	06                   	push   es
    162c:	66                   	data16
    162d:	00 02                	add    BYTE PTR [edx],al
    162f:	04 02                	add    al,0x2
    1631:	74 00                	je     1633 <sysEnter_Vector-0x12e9cd>
    1633:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1636:	06                   	push   es
    1637:	59                   	pop    ecx
    1638:	00 02                	add    BYTE PTR [edx],al
    163a:	04 04                	add    al,0x4
    163c:	08 3d 00 02 04 04    	or     BYTE PTR ds:0x4040200,bh
    1642:	f3 9f                	repz lahf 
    1644:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1648:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    164b:	06                   	push   es
    164c:	58                   	pop    eax
    164d:	00 02                	add    BYTE PTR [edx],al
    164f:	04 03                	add    al,0x3
    1651:	58                   	pop    eax
    1652:	00 02                	add    BYTE PTR [edx],al
    1654:	04 04                	add    al,0x4
    1656:	74 00                	je     1658 <sysEnter_Vector-0x12e9a8>
    1658:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    165b:	58                   	pop    eax
    165c:	06                   	push   es
    165d:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1660:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1663:	06                   	push   es
    1664:	66                   	data16
    1665:	00 02                	add    BYTE PTR [edx],al
    1667:	04 02                	add    al,0x2
    1669:	58                   	pop    eax
    166a:	00 02                	add    BYTE PTR [edx],al
    166c:	04 03                	add    al,0x3
    166e:	58                   	pop    eax
    166f:	06                   	push   es
    1670:	59                   	pop    ecx
    1671:	76 59                	jbe    16cc <sysEnter_Vector-0x12e934>
    1673:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    1677:	03 10                	add    edx,DWORD PTR [eax]
    1679:	ac                   	lods   al,BYTE PTR ds:[esi]
    167a:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    167d:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1680:	20 67 00             	and    BYTE PTR [edi+0x0],ah
    1683:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1686:	06                   	push   es
    1687:	66                   	data16
    1688:	00 02                	add    BYTE PTR [edx],al
    168a:	04 02                	add    al,0x2
    168c:	74 00                	je     168e <sysEnter_Vector-0x12e972>
    168e:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1691:	58                   	pop    eax
    1692:	06                   	push   es
    1693:	4b                   	dec    ebx
    1694:	67 2f                	addr16 das 
    1696:	67 00 02             	add    BYTE PTR [bp+si],al
    1699:	04 01                	add    al,0x1
    169b:	06                   	push   es
    169c:	66                   	data16
    169d:	00 02                	add    BYTE PTR [edx],al
    169f:	04 02                	add    al,0x2
    16a1:	58                   	pop    eax
    16a2:	00 02                	add    BYTE PTR [edx],al
    16a4:	04 04                	add    al,0x4
    16a6:	3c 06                	cmp    al,0x6
    16a8:	59                   	pop    ecx
    16a9:	2f                   	das    
    16aa:	02 08                	add    cl,BYTE PTR [eax]
    16ac:	00 01                	add    BYTE PTR [ecx],al
    16ae:	01 cf                	add    edi,ecx
    16b0:	00 00                	add    BYTE PTR [eax],al
    16b2:	00 02                	add    BYTE PTR [edx],al
    16b4:	00 9d 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],bl
    16ba:	01 fb                	add    ebx,edi
    16bc:	0e                   	push   cs
    16bd:	0d 00 01 01 01       	or     eax,0x1010100
    16c2:	01 00                	add    DWORD PTR [eax],eax
    16c4:	00 00                	add    BYTE PTR [eax],al
    16c6:	01 00                	add    DWORD PTR [eax],eax
    16c8:	00 01                	add    BYTE PTR [ecx],al
    16ca:	73 72                	jae    173e <sysEnter_Vector-0x12e8c2>
    16cc:	63 2f                	arpl   WORD PTR [edi],bp
    16ce:	73 74                	jae    1744 <sysEnter_Vector-0x12e8bc>
    16d0:	72 69                	jb     173b <sysEnter_Vector-0x12e8c5>
    16d2:	6e                   	outs   dx,BYTE PTR ds:[esi]
    16d3:	67 73 00             	addr16 jae 16d6 <sysEnter_Vector-0x12e92a>
    16d6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    16dd:	00 2f                	add    BYTE PTR [edi],ch
    16df:	68 6f 6d 65 2f       	push   0x2f656d6f
    16e4:	79 6f                	jns    1755 <sysEnter_Vector-0x12e8ab>
    16e6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    16ed:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    16f0:	73 73                	jae    1765 <sysEnter_Vector-0x12e89b>
    16f2:	2f                   	das    
    16f3:	6c                   	ins    BYTE PTR es:[edi],dx
    16f4:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    16fb:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1701:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1707:	78 2d                	js     1736 <sysEnter_Vector-0x12e8ca>
    1709:	67 6e                	outs   dx,BYTE PTR ds:[si]
    170b:	75 2f                	jne    173c <sysEnter_Vector-0x12e8c4>
    170d:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1712:	2f                   	das    
    1713:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    171a:	00 00                	add    BYTE PTR [eax],al
    171c:	73 74                	jae    1792 <sysEnter_Vector-0x12e86e>
    171e:	72 74                	jb     1794 <sysEnter_Vector-0x12e86c>
    1720:	72 69                	jb     178b <sysEnter_Vector-0x12e875>
    1722:	6d                   	ins    DWORD PTR es:[edi],dx
    1723:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1726:	01 00                	add    DWORD PTR [eax],eax
    1728:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    172b:	6c                   	ins    BYTE PTR es:[edi],dx
    172c:	6c                   	ins    BYTE PTR es:[edi],dx
    172d:	6f                   	outs   dx,DWORD PTR ds:[esi]
    172e:	63 2e                	arpl   WORD PTR [esi],bp
    1730:	68 00 02 00 00       	push   0x200
    1735:	6c                   	ins    BYTE PTR es:[edi],dx
    1736:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    173d:	4f                   	dec    edi
    173e:	53                   	push   ebx
    173f:	2e                   	cs
    1740:	68 00 02 00 00       	push   0x200
    1745:	73 74                	jae    17bb <sysEnter_Vector-0x12e845>
    1747:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    174e:	63 
    174f:	2e                   	cs
    1750:	68 00 03 00 00       	push   0x300
    1755:	00 00                	add    BYTE PTR [eax],al
    1757:	05 02 f0 1c 00       	add    eax,0x1cf002
    175c:	30 15 08 13 bf 30    	xor    BYTE PTR ds:0x30bf1308,dl
    1762:	48                   	dec    eax
    1763:	b3 08                	mov    bl,0x8
    1765:	9f                   	lahf   
    1766:	30 b8 00 02 04 01    	xor    BYTE PTR [eax+0x1040200],bh
    176c:	06                   	push   es
    176d:	82                   	(bad)  
    176e:	06                   	push   es
    176f:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1770:	84 00                	test   BYTE PTR [eax],al
    1772:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1775:	06                   	push   es
    1776:	20 06                	and    BYTE PTR [esi],al
    1778:	08 ca                	or     dl,cl
    177a:	69 f3 d7 02 02 00    	imul   esi,ebx,0x202d7
    1780:	01 01                	add    DWORD PTR [ecx],eax
    1782:	c7 00 00 00 02 00    	mov    DWORD PTR [eax],0x20000
    1788:	94                   	xchg   esp,eax
    1789:	00 00                	add    BYTE PTR [eax],al
    178b:	00 01                	add    BYTE PTR [ecx],al
    178d:	01 fb                	add    ebx,edi
    178f:	0e                   	push   cs
    1790:	0d 00 01 01 01       	or     eax,0x1010100
    1795:	01 00                	add    DWORD PTR [eax],eax
    1797:	00 00                	add    BYTE PTR [eax],al
    1799:	01 00                	add    DWORD PTR [eax],eax
    179b:	00 01                	add    BYTE PTR [ecx],al
    179d:	73 72                	jae    1811 <sysEnter_Vector-0x12e7ef>
    179f:	63 00                	arpl   WORD PTR [eax],ax
    17a1:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    17a8:	00 2f                	add    BYTE PTR [edi],ch
    17aa:	68 6f 6d 65 2f       	push   0x2f656d6f
    17af:	79 6f                	jns    1820 <sysEnter_Vector-0x12e7e0>
    17b1:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    17b8:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    17bb:	73 73                	jae    1830 <sysEnter_Vector-0x12e7d0>
    17bd:	2f                   	das    
    17be:	6c                   	ins    BYTE PTR es:[edi],dx
    17bf:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    17c6:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    17cc:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    17d2:	78 2d                	js     1801 <sysEnter_Vector-0x12e7ff>
    17d4:	67 6e                	outs   dx,BYTE PTR ds:[si]
    17d6:	75 2f                	jne    1807 <sysEnter_Vector-0x12e7f9>
    17d8:	35 2e 33 2e 30       	xor    eax,0x302e332e
    17dd:	2f                   	das    
    17de:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    17e5:	00 00                	add    BYTE PTR [eax],al
    17e7:	73 74                	jae    185d <sysEnter_Vector-0x12e7a3>
    17e9:	72 73                	jb     185e <sysEnter_Vector-0x12e7a2>
    17eb:	74 72                	je     185f <sysEnter_Vector-0x12e7a1>
    17ed:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    17f0:	01 00                	add    DWORD PTR [eax],eax
    17f2:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    17f5:	6c                   	ins    BYTE PTR es:[edi],dx
    17f6:	6c                   	ins    BYTE PTR es:[edi],dx
    17f7:	6f                   	outs   dx,DWORD PTR ds:[esi]
    17f8:	63 2e                	arpl   WORD PTR [esi],bp
    17fa:	68 00 02 00 00       	push   0x200
    17ff:	6c                   	ins    BYTE PTR es:[edi],dx
    1800:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1807:	4f                   	dec    edi
    1808:	53                   	push   ebx
    1809:	2e                   	cs
    180a:	68 00 02 00 00       	push   0x200
    180f:	73 74                	jae    1885 <sysEnter_Vector-0x12e77b>
    1811:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1818:	63 
    1819:	2e                   	cs
    181a:	68 00 03 00 00       	push   0x300
    181f:	00 00                	add    BYTE PTR [eax],al
    1821:	05 02 a8 1d 00       	add    eax,0x1da802
    1826:	30 03                	xor    BYTE PTR [ebx],al
    1828:	33 01                	xor    eax,DWORD PTR [ecx]
    182a:	ec                   	in     al,dx
    182b:	3d 75 5b cb 3e       	cmp    eax,0x3ecb5b75
    1830:	75 5a                	jne    188c <sysEnter_Vector-0x12e774>
    1832:	08 3f                	or     BYTE PTR [edi],bh
    1834:	2c 23                	sub    al,0x23
    1836:	03 75 58             	add    esi,DWORD PTR [ebp+0x58]
    1839:	1e                   	push   ds
    183a:	00 02                	add    BYTE PTR [edx],al
    183c:	04 01                	add    al,0x1
    183e:	06                   	push   es
    183f:	4a                   	dec    edx
    1840:	06                   	push   es
    1841:	03 0f                	add    ecx,DWORD PTR [edi]
    1843:	9e                   	sahf   
    1844:	59                   	pop    ecx
    1845:	4d                   	dec    ebp
    1846:	c9                   	leave  
    1847:	d7                   	xlat   BYTE PTR ds:[ebx]
    1848:	02 02                	add    al,BYTE PTR [edx]
    184a:	00 01                	add    BYTE PTR [ecx],al
    184c:	01 30                	add    DWORD PTR [eax],esi
    184e:	03 00                	add    eax,DWORD PTR [eax]
    1850:	00 02                	add    BYTE PTR [edx],al
    1852:	00 cc                	add    ah,cl
    1854:	00 00                	add    BYTE PTR [eax],al
    1856:	00 01                	add    BYTE PTR [ecx],al
    1858:	01 fb                	add    ebx,edi
    185a:	0e                   	push   cs
    185b:	0d 00 01 01 01       	or     eax,0x1010100
    1860:	01 00                	add    DWORD PTR [eax],eax
    1862:	00 00                	add    BYTE PTR [eax],al
    1864:	01 00                	add    DWORD PTR [eax],eax
    1866:	00 01                	add    BYTE PTR [ecx],al
    1868:	73 72                	jae    18dc <sysEnter_Vector-0x12e724>
    186a:	63 00                	arpl   WORD PTR [eax],ax
    186c:	2f                   	das    
    186d:	68 6f 6d 65 2f       	push   0x2f656d6f
    1872:	79 6f                	jns    18e3 <sysEnter_Vector-0x12e71d>
    1874:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    187b:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    187e:	73 73                	jae    18f3 <sysEnter_Vector-0x12e70d>
    1880:	2f                   	das    
    1881:	6c                   	ins    BYTE PTR es:[edi],dx
    1882:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1889:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    188f:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1895:	78 2d                	js     18c4 <sysEnter_Vector-0x12e73c>
    1897:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1899:	75 2f                	jne    18ca <sysEnter_Vector-0x12e736>
    189b:	35 2e 33 2e 30       	xor    eax,0x302e332e
    18a0:	2f                   	das    
    18a1:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    18a8:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    18ab:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    18af:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    18b2:	2e                   	cs
    18b3:	2f                   	das    
    18b4:	2e                   	cs
    18b5:	2e                   	cs
    18b6:	2f                   	das    
    18b7:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    18bb:	6a 2f                	push   0x2f
    18bd:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    18c0:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    18c7:	6e                   	outs   dx,BYTE PTR ds:[esi]
    18c8:	65                   	gs
    18c9:	6c                   	ins    BYTE PTR es:[edi],dx
    18ca:	2f                   	das    
    18cb:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    18d2:	00 00                	add    BYTE PTR [eax],al
    18d4:	74 69                	je     193f <sysEnter_Vector-0x12e6c1>
    18d6:	6d                   	ins    DWORD PTR es:[edi],dx
    18d7:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    18db:	01 00                	add    DWORD PTR [eax],eax
    18dd:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    18e0:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    18e7:	63 
    18e8:	2e                   	cs
    18e9:	68 00 02 00 00       	push   0x200
    18ee:	74 69                	je     1959 <sysEnter_Vector-0x12e6a7>
    18f0:	6d                   	ins    DWORD PTR es:[edi],dx
    18f1:	65                   	gs
    18f2:	2e                   	cs
    18f3:	68 00 03 00 00       	push   0x300
    18f8:	6d                   	ins    DWORD PTR es:[edi],dx
    18f9:	61                   	popa   
    18fa:	6c                   	ins    BYTE PTR es:[edi],dx
    18fb:	6c                   	ins    BYTE PTR es:[edi],dx
    18fc:	6f                   	outs   dx,DWORD PTR ds:[esi]
    18fd:	63 2e                	arpl   WORD PTR [esi],bp
    18ff:	68 00 03 00 00       	push   0x300
    1904:	6c                   	ins    BYTE PTR es:[edi],dx
    1905:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    190c:	4f                   	dec    edi
    190d:	53                   	push   ebx
    190e:	2e                   	cs
    190f:	68 00 03 00 00       	push   0x300
    1914:	73 79                	jae    198f <sysEnter_Vector-0x12e671>
    1916:	73 63                	jae    197b <sysEnter_Vector-0x12e685>
    1918:	61                   	popa   
    1919:	6c                   	ins    BYTE PTR es:[edi],dx
    191a:	6c                   	ins    BYTE PTR es:[edi],dx
    191b:	73 2e                	jae    194b <sysEnter_Vector-0x12e6b5>
    191d:	68 00 04 00 00       	push   0x400
    1922:	00 00                	add    BYTE PTR [eax],al
    1924:	05 02 34 1e 00       	add    eax,0x1e3402
    1929:	30 03                	xor    BYTE PTR [ebx],al
    192b:	16                   	push   ss
    192c:	01 08                	add    DWORD PTR [eax],ecx
    192e:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
    1931:	f3 3d 78 08 21 84    	repz cmp eax,0x84210878
    1937:	76 02                	jbe    193b <sysEnter_Vector-0x12e6c5>
    1939:	24 13                	and    al,0x13
    193b:	08 22                	or     BYTE PTR [edx],ah
    193d:	02 2e                	add    ch,BYTE PTR [esi]
    193f:	13 02                	adc    eax,DWORD PTR [edx]
    1941:	2f                   	das    
    1942:	13 08                	adc    ecx,DWORD PTR [eax]
    1944:	67 02 2d             	add    ch,BYTE PTR [di]
    1947:	13 2f                	adc    ebp,DWORD PTR [edi]
    1949:	00 02                	add    BYTE PTR [edx],al
    194b:	04 01                	add    al,0x1
    194d:	06                   	push   es
    194e:	9e                   	sahf   
    194f:	00 02                	add    BYTE PTR [edx],al
    1951:	04 04                	add    al,0x4
    1953:	02 23                	add    ah,BYTE PTR [ebx]
    1955:	12 00                	adc    al,BYTE PTR [eax]
    1957:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    195e:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1961:	74 00                	je     1963 <sysEnter_Vector-0x12e69d>
    1963:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1966:	58                   	pop    eax
    1967:	00 02                	add    BYTE PTR [edx],al
    1969:	04 08                	add    al,0x8
    196b:	06                   	push   es
    196c:	3d 48 00 02 04       	cmp    eax,0x4020048
    1971:	01 06                	add    DWORD PTR [esi],eax
    1973:	9e                   	sahf   
    1974:	00 02                	add    BYTE PTR [edx],al
    1976:	04 04                	add    al,0x4
    1978:	02 23                	add    ah,BYTE PTR [ebx]
    197a:	12 00                	adc    al,BYTE PTR [eax]
    197c:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1983:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1986:	74 00                	je     1988 <sysEnter_Vector-0x12e678>
    1988:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    198b:	58                   	pop    eax
    198c:	06                   	push   es
    198d:	94                   	xchg   esp,eax
    198e:	e5 91                	in     eax,0x91
    1990:	9f                   	lahf   
    1991:	59                   	pop    ecx
    1992:	00 02                	add    BYTE PTR [edx],al
    1994:	04 01                	add    al,0x1
    1996:	06                   	push   es
    1997:	9e                   	sahf   
    1998:	00 02                	add    BYTE PTR [edx],al
    199a:	04 04                	add    al,0x4
    199c:	02 23                	add    ah,BYTE PTR [ebx]
    199e:	12 00                	adc    al,BYTE PTR [eax]
    19a0:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    19a7:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    19aa:	74 00                	je     19ac <sysEnter_Vector-0x12e654>
    19ac:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    19af:	58                   	pop    eax
    19b0:	00 02                	add    BYTE PTR [edx],al
    19b2:	04 08                	add    al,0x8
    19b4:	06                   	push   es
    19b5:	08 9f e2 00 02 04    	or     BYTE PTR [edi+0x40200e2],bl
    19bb:	01 06                	add    DWORD PTR [esi],eax
    19bd:	9e                   	sahf   
    19be:	00 02                	add    BYTE PTR [edx],al
    19c0:	04 04                	add    al,0x4
    19c2:	02 23                	add    ah,BYTE PTR [ebx]
    19c4:	12 00                	adc    al,BYTE PTR [eax]
    19c6:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    19cd:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    19d0:	74 00                	je     19d2 <sysEnter_Vector-0x12e62e>
    19d2:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    19d5:	58                   	pop    eax
    19d6:	06                   	push   es
    19d7:	08 f6                	or     dh,dh
    19d9:	d7                   	xlat   BYTE PTR ds:[ebx]
    19da:	9f                   	lahf   
    19db:	3d 69 c9 d7 30       	cmp    eax,0x30d7c969
    19e0:	08 16                	or     BYTE PTR [esi],dl
    19e2:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
    19e5:	4b                   	dec    ebx
    19e6:	5b                   	pop    ebx
    19e7:	f5                   	cmc    
    19e8:	08 3d e5 30 c9 d7    	or     BYTE PTR ds:0xd7c930e5,bh
    19ee:	30 08                	xor    BYTE PTR [eax],cl
    19f0:	44                   	inc    esp
    19f1:	02 2e                	add    ch,BYTE PTR [esi]
    19f3:	13 02                	adc    eax,DWORD PTR [edx]
    19f5:	3a 13                	cmp    dl,BYTE PTR [ebx]
    19f7:	91                   	xchg   ecx,eax
    19f8:	c9                   	leave  
    19f9:	e6 02                	out    0x2,al
    19fb:	2f                   	das    
    19fc:	13 02                	adc    eax,DWORD PTR [edx]
    19fe:	3c 13                	cmp    al,0x13
    1a00:	9f                   	lahf   
    1a01:	e5 e6                	in     eax,0xe6
    1a03:	08 c9                	or     cl,cl
    1a05:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    1a08:	9f                   	lahf   
    1a09:	e5 4c                	in     eax,0x4c
    1a0b:	02 29                	add    ch,BYTE PTR [ecx]
    1a0d:	13 02                	adc    eax,DWORD PTR [edx]
    1a0f:	2b 13                	sub    edx,DWORD PTR [ebx]
    1a11:	9f                   	lahf   
    1a12:	e5 e6                	in     eax,0xe6
    1a14:	bb 59 08 83 e5       	mov    ebx,0xe5830859
    1a19:	a0 00 02 04 01       	mov    al,ds:0x1040200
    1a1e:	06                   	push   es
    1a1f:	c8 00 02 04          	enter  0x200,0x4
    1a23:	04 02                	add    al,0x2
    1a25:	2c 12                	sub    al,0x12
    1a27:	00 02                	add    BYTE PTR [edx],al
    1a29:	04 05                	add    al,0x5
    1a2b:	02 2f                	add    ch,BYTE PTR [edi]
    1a2d:	12 00                	adc    al,BYTE PTR [eax]
    1a2f:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a32:	74 00                	je     1a34 <sysEnter_Vector-0x12e5cc>
    1a34:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1a37:	58                   	pop    eax
    1a38:	06                   	push   es
    1a39:	08 99 a5 59 00 02    	or     BYTE PTR [ecx+0x20059a5],bl
    1a3f:	04 01                	add    al,0x1
    1a41:	06                   	push   es
    1a42:	c8 00 02 04          	enter  0x200,0x4
    1a46:	04 02                	add    al,0x2
    1a48:	2c 12                	sub    al,0x12
    1a4a:	00 02                	add    BYTE PTR [edx],al
    1a4c:	04 05                	add    al,0x5
    1a4e:	02 2f                	add    ch,BYTE PTR [edi]
    1a50:	12 00                	adc    al,BYTE PTR [eax]
    1a52:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a55:	74 00                	je     1a57 <sysEnter_Vector-0x12e5a9>
    1a57:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1a5a:	58                   	pop    eax
    1a5b:	00 02                	add    BYTE PTR [edx],al
    1a5d:	04 08                	add    al,0x8
    1a5f:	06                   	push   es
    1a60:	08 9f 08 91 9f e0    	or     BYTE PTR [edi-0x1f606ef8],bl
    1a66:	00 02                	add    BYTE PTR [edx],al
    1a68:	04 01                	add    al,0x1
    1a6a:	06                   	push   es
    1a6b:	c8 00 02 04          	enter  0x200,0x4
    1a6f:	04 02                	add    al,0x2
    1a71:	2c 12                	sub    al,0x12
    1a73:	00 02                	add    BYTE PTR [edx],al
    1a75:	04 05                	add    al,0x5
    1a77:	02 2f                	add    ch,BYTE PTR [edi]
    1a79:	12 00                	adc    al,BYTE PTR [eax]
    1a7b:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a7e:	74 00                	je     1a80 <sysEnter_Vector-0x12e580>
    1a80:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1a83:	58                   	pop    eax
    1a84:	06                   	push   es
    1a85:	08 f9                	or     cl,bh
    1a87:	bb 75 00 02 04       	mov    ebx,0x4020075
    1a8c:	01 06                	add    DWORD PTR [esi],eax
    1a8e:	08 2e                	or     BYTE PTR [esi],ch
    1a90:	06                   	push   es
    1a91:	9f                   	lahf   
    1a92:	75 75                	jne    1b09 <sysEnter_Vector-0x12e4f7>
    1a94:	7b d8                	jnp    1a6e <sysEnter_Vector-0x12e592>
    1a96:	00 02                	add    BYTE PTR [edx],al
    1a98:	04 01                	add    al,0x1
    1a9a:	06                   	push   es
    1a9b:	c8 06 75 e5          	enter  0x7506,0xe5
    1a9f:	00 02                	add    BYTE PTR [edx],al
    1aa1:	04 01                	add    al,0x1
    1aa3:	06                   	push   es
    1aa4:	02 22                	add    ah,BYTE PTR [edx]
    1aa6:	12 06                	adc    al,BYTE PTR [esi]
    1aa8:	4b                   	dec    ebx
    1aa9:	00 02                	add    BYTE PTR [edx],al
    1aab:	04 01                	add    al,0x1
    1aad:	06                   	push   es
    1aae:	08 ba 00 02 04 03    	or     BYTE PTR [edx+0x3040200],bh
    1ab4:	02 22                	add    ah,BYTE PTR [edx]
    1ab6:	12 00                	adc    al,BYTE PTR [eax]
    1ab8:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1abb:	74 00                	je     1abd <sysEnter_Vector-0x12e543>
    1abd:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1ac0:	58                   	pop    eax
    1ac1:	00 02                	add    BYTE PTR [edx],al
    1ac3:	04 06                	add    al,0x6
    1ac5:	06                   	push   es
    1ac6:	59                   	pop    ecx
    1ac7:	00 02                	add    BYTE PTR [edx],al
    1ac9:	04 01                	add    al,0x1
    1acb:	06                   	push   es
    1acc:	02 40 12             	add    al,BYTE PTR [eax+0x12]
    1acf:	00 02                	add    BYTE PTR [edx],al
    1ad1:	04 03                	add    al,0x3
    1ad3:	02 42 12             	add    al,BYTE PTR [edx+0x12]
    1ad6:	00 02                	add    BYTE PTR [edx],al
    1ad8:	04 04                	add    al,0x4
    1ada:	74 00                	je     1adc <sysEnter_Vector-0x12e524>
    1adc:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1adf:	58                   	pop    eax
    1ae0:	00 02                	add    BYTE PTR [edx],al
    1ae2:	04 06                	add    al,0x6
    1ae4:	06                   	push   es
    1ae5:	59                   	pop    ecx
    1ae6:	00 02                	add    BYTE PTR [edx],al
    1ae8:	04 01                	add    al,0x1
    1aea:	06                   	push   es
    1aeb:	02 43 12             	add    al,BYTE PTR [ebx+0x12]
    1aee:	00 02                	add    BYTE PTR [edx],al
    1af0:	04 03                	add    al,0x3
    1af2:	02 48 12             	add    cl,BYTE PTR [eax+0x12]
    1af5:	00 02                	add    BYTE PTR [edx],al
    1af7:	04 04                	add    al,0x4
    1af9:	74 00                	je     1afb <sysEnter_Vector-0x12e505>
    1afb:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1afe:	58                   	pop    eax
    1aff:	00 02                	add    BYTE PTR [edx],al
    1b01:	04 06                	add    al,0x6
    1b03:	06                   	push   es
    1b04:	5a                   	pop    edx
    1b05:	00 02                	add    BYTE PTR [edx],al
    1b07:	04 06                	add    al,0x6
    1b09:	c9                   	leave  
    1b0a:	2f                   	das    
    1b0b:	00 02                	add    BYTE PTR [edx],al
    1b0d:	04 01                	add    al,0x1
    1b0f:	06                   	push   es
    1b10:	9e                   	sahf   
    1b11:	00 02                	add    BYTE PTR [edx],al
    1b13:	04 04                	add    al,0x4
    1b15:	02 23                	add    ah,BYTE PTR [ebx]
    1b17:	12 00                	adc    al,BYTE PTR [eax]
    1b19:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1b20:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1b23:	74 00                	je     1b25 <sysEnter_Vector-0x12e4db>
    1b25:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1b28:	58                   	pop    eax
    1b29:	00 02                	add    BYTE PTR [edx],al
    1b2b:	04 08                	add    al,0x8
    1b2d:	06                   	push   es
    1b2e:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    1b31:	e8 bb 00 02 04       	call   4021bf1 <sysEnter_Vector+0x3ef1bf1>
    1b36:	01 06                	add    DWORD PTR [esi],eax
    1b38:	ba 06 4b 68 91       	mov    edx,0x91684b06
    1b3d:	02 31                	add    dh,BYTE PTR [ecx]
    1b3f:	14 02                	adc    al,0x2
    1b41:	2c 14                	sub    al,0x14
    1b43:	00 02                	add    BYTE PTR [edx],al
    1b45:	04 01                	add    al,0x1
    1b47:	06                   	push   es
    1b48:	02 29                	add    ch,BYTE PTR [ecx]
    1b4a:	12 06                	adc    al,BYTE PTR [esi]
    1b4c:	4b                   	dec    ebx
    1b4d:	bd 00 02 04 01       	mov    ebp,0x1040200
    1b52:	06                   	push   es
    1b53:	ba 06 08 5a 4c       	mov    edx,0x4c5a0806
    1b58:	f4                   	hlt    
    1b59:	9f                   	lahf   
    1b5a:	ae                   	scas   al,BYTE PTR es:[edi]
    1b5b:	77 00                	ja     1b5d <sysEnter_Vector-0x12e4a3>
    1b5d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b60:	06                   	push   es
    1b61:	82                   	(bad)  
    1b62:	06                   	push   es
    1b63:	4b                   	dec    ebx
    1b64:	68 00 02 04 01       	push   0x1040200
    1b69:	06                   	push   es
    1b6a:	66 06                	pushw  es
    1b6c:	85 3d 85 08 75 76    	test   DWORD PTR ds:0x76750885,edi
    1b72:	08 f3                	or     bl,dh
    1b74:	67 08 14             	or     BYTE PTR [si],dl
    1b77:	00 02                	add    BYTE PTR [edx],al
    1b79:	04 01                	add    al,0x1
    1b7b:	e5 02                	in     eax,0x2
    1b7d:	07                   	pop    es
    1b7e:	00 01                	add    BYTE PTR [ecx],al
    1b80:	01                   	.byte 0x1

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c                   	ins    BYTE PTR es:[edi],dx
   1:	6f                   	outs   dx,DWORD PTR ds:[esi]
   2:	6e                   	outs   dx,BYTE PTR ds:[esi]
   3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
   7:	6e                   	outs   dx,BYTE PTR ds:[esi]
   8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
   c:	74 00                	je     e <sysEnter_Vector-0x12fff2>
   e:	73 68                	jae    78 <sysEnter_Vector-0x12ff88>
  10:	6f                   	outs   dx,DWORD PTR ds:[esi]
  11:	72 74                	jb     87 <sysEnter_Vector-0x12ff79>
  13:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
  16:	73 69                	jae    81 <sysEnter_Vector-0x12ff7f>
  18:	67 6e                	outs   dx,BYTE PTR ds:[si]
  1a:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  1f:	74 00                	je     21 <sysEnter_Vector-0x12ffdf>
  21:	73 74                	jae    97 <sysEnter_Vector-0x12ff69>
  23:	72 63                	jb     88 <sysEnter_Vector-0x12ff78>
  25:	68 72 00 70 72       	push   0x72700072
  2a:	6f                   	outs   dx,DWORD PTR ds:[esi]
  2b:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
  2e:	73 45                	jae    75 <sysEnter_Vector-0x12ff8b>
  30:	6e                   	outs   dx,BYTE PTR ds:[esi]
  31:	76 70                	jbe    a3 <sysEnter_Vector-0x12ff5d>
  33:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  37:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
  3b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  3c:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
  40:	73 69                	jae    ab <sysEnter_Vector-0x12ff55>
  42:	67 6e                	outs   dx,BYTE PTR ds:[si]
  44:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  49:	74 00                	je     4b <sysEnter_Vector-0x12ffb5>
  4b:	68 65 61 70 42       	push   0x42706165
  50:	61                   	popa   
  51:	73 65                	jae    b8 <sysEnter_Vector-0x12ff48>
  53:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
  57:	63 54 5a 00          	arpl   WORD PTR [edx+ebx*2+0x0],dx
  5b:	75 6e                	jne    cb <sysEnter_Vector-0x12ff35>
  5d:	73 69                	jae    c8 <sysEnter_Vector-0x12ff38>
  5f:	67 6e                	outs   dx,BYTE PTR ds:[si]
  61:	65 64 20 63 68       	gs and BYTE PTR fs:gs:[ebx+0x68],ah
  66:	61                   	popa   
  67:	72 00                	jb     69 <sysEnter_Vector-0x12ff97>
  69:	75 69                	jne    d4 <sysEnter_Vector-0x12ff2c>
  6b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  6c:	74 33                	je     a1 <sysEnter_Vector-0x12ff5f>
  6e:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
  71:	00 2f                	add    BYTE PTR [edi],ch
  73:	68 6f 6d 65 2f       	push   0x2f656d6f
  78:	79 6f                	jns    e9 <sysEnter_Vector-0x12ff17>
  7a:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
  81:	6f                   	outs   dx,DWORD PTR ds:[esi]
  82:	73 2f                	jae    b3 <sysEnter_Vector-0x12ff4d>
  84:	61                   	popa   
  85:	70 72                	jo     f9 <sysEnter_Vector-0x12ff07>
  87:	6f                   	outs   dx,DWORD PTR ds:[esi]
  88:	6a 2f                	push   0x2f
  8a:	6c                   	ins    BYTE PTR es:[edi],dx
  8b:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
  92:	4f                   	dec    edi
  93:	53                   	push   ebx
  94:	00 5f 42             	add    BYTE PTR [edi+0x42],bl
  97:	6f                   	outs   dx,DWORD PTR ds:[esi]
  98:	6f                   	outs   dx,DWORD PTR ds:[esi]
  99:	6c                   	ins    BYTE PTR es:[edi],dx
  9a:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  9e:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
  a2:	75 62                	jne    106 <sysEnter_Vector-0x12fefa>
  a4:	6c                   	ins    BYTE PTR es:[edi],dx
  a5:	65 00 73 74          	add    BYTE PTR gs:[ebx+0x74],dh
  a9:	72 63                	jb     10e <sysEnter_Vector-0x12fef2>
  ab:	68 72 49 00 68       	push   0x68004972
  b0:	65                   	gs
  b1:	61                   	popa   
  b2:	70 43                	jo     f7 <sysEnter_Vector-0x12ff09>
  b4:	75 72                	jne    128 <sysEnter_Vector-0x12fed8>
  b6:	72 00                	jb     b8 <sysEnter_Vector-0x12ff48>
  b8:	2e                   	cs
  b9:	2e                   	cs
  ba:	2f                   	das    
  bb:	2e                   	cs
  bc:	2e                   	cs
  bd:	2f                   	das    
  be:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
  c2:	6a 2f                	push   0x2f
  c4:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
  c7:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
  ce:	63 2f                	arpl   WORD PTR [edi],bp
  d0:	73 74                	jae    146 <sysEnter_Vector-0x12feba>
  d2:	72 69                	jb     13d <sysEnter_Vector-0x12fec3>
  d4:	6e                   	outs   dx,BYTE PTR ds:[esi]
  d5:	67 73 2f             	addr16 jae 107 <sysEnter_Vector-0x12fef9>
  d8:	73 74                	jae    14e <sysEnter_Vector-0x12feb2>
  da:	72 63                	jb     13f <sysEnter_Vector-0x12fec1>
  dc:	68 72 2e 63 00       	push   0x632e72
  e1:	73 69                	jae    14c <sysEnter_Vector-0x12feb4>
  e3:	7a 65                	jp     14a <sysEnter_Vector-0x12feb6>
  e5:	74 79                	je     160 <sysEnter_Vector-0x12fea0>
  e7:	70 65                	jo     14e <sysEnter_Vector-0x12feb2>
  e9:	00 73 68             	add    BYTE PTR [ebx+0x68],dh
  ec:	6f                   	outs   dx,DWORD PTR ds:[esi]
  ed:	72 74                	jb     163 <sysEnter_Vector-0x12fe9d>
  ef:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
  f2:	74 00                	je     f4 <sysEnter_Vector-0x12ff0c>
  f4:	47                   	inc    edi
  f5:	4e                   	dec    esi
  f6:	55                   	push   ebp
  f7:	20 43 31             	and    BYTE PTR [ebx+0x31],al
  fa:	31 20                	xor    DWORD PTR [eax],esp
  fc:	35 2e 33 2e 30       	xor    eax,0x302e332e
 101:	20 2d 6d 61 73 6d    	and    BYTE PTR ds:0x6d73616d,ch
 107:	3d 69 6e 74 65       	cmp    eax,0x65746e69
 10c:	6c                   	ins    BYTE PTR es:[edi],dx
 10d:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
 113:	65                   	gs
 114:	3d 67 65 6e 65       	cmp    eax,0x656e6567
 119:	72 69                	jb     184 <sysEnter_Vector-0x12fe7c>
 11b:	63 20                	arpl   WORD PTR [eax],sp
 11d:	2d 6d 61 72 63       	sub    eax,0x6372616d
 122:	68 3d 70 65 6e       	push   0x6e65703d
 127:	74 69                	je     192 <sysEnter_Vector-0x12fe6e>
 129:	75 6d                	jne    198 <sysEnter_Vector-0x12fe68>
 12b:	70 72                	jo     19f <sysEnter_Vector-0x12fe61>
 12d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 12e:	20 2d 67 20 2d 66    	and    BYTE PTR ds:0x662d2067,ch
 134:	66                   	data16
 135:	72 65                	jb     19c <sysEnter_Vector-0x12fe64>
 137:	65                   	gs
 138:	73 74                	jae    1ae <sysEnter_Vector-0x12fe52>
 13a:	61                   	popa   
 13b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 13c:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
 143:	76 
 144:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
 14b:	74 79                	je     1c6 <sysEnter_Vector-0x12fe3a>
 14d:	3d 68 69 64 64       	cmp    eax,0x64646968
 152:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 154:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
 15a:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 15d:	61                   	popa   
 15e:	70 45                	jo     1a5 <sysEnter_Vector-0x12fe5b>
 160:	6e                   	outs   dx,BYTE PTR ds:[esi]
 161:	64 00 63 68          	add    BYTE PTR fs:[ebx+0x68],ah
 165:	61                   	popa   
 166:	72 73                	jb     1db <sysEnter_Vector-0x12fe25>
 168:	00 2e                	add    BYTE PTR [esi],ch
 16a:	2e                   	cs
 16b:	2f                   	das    
 16c:	2e                   	cs
 16d:	2e                   	cs
 16e:	2f                   	das    
 16f:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 173:	6a 2f                	push   0x2f
 175:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 178:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 17f:	63 2f                	arpl   WORD PTR [edi],bp
 181:	73 74                	jae    1f7 <sysEnter_Vector-0x12fe09>
 183:	72 69                	jb     1ee <sysEnter_Vector-0x12fe12>
 185:	6e                   	outs   dx,BYTE PTR ds:[esi]
 186:	67 73 2f             	addr16 jae 1b8 <sysEnter_Vector-0x12fe48>
 189:	73 74                	jae    1ff <sysEnter_Vector-0x12fe01>
 18b:	72 63                	jb     1f0 <sysEnter_Vector-0x12fe10>
 18d:	73 70                	jae    1ff <sysEnter_Vector-0x12fe01>
 18f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 190:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 193:	73 74                	jae    209 <sysEnter_Vector-0x12fdf7>
 195:	72 63                	jb     1fa <sysEnter_Vector-0x12fe06>
 197:	73 70                	jae    209 <sysEnter_Vector-0x12fdf7>
 199:	6e                   	outs   dx,BYTE PTR ds:[esi]
 19a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 19d:	72 63                	jb     202 <sysEnter_Vector-0x12fdfe>
 19f:	73 70                	jae    211 <sysEnter_Vector-0x12fdef>
 1a1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1a2:	49                   	dec    ecx
 1a3:	00 64 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],ah
 1a7:	69 6d 00 2e 2e 2f 2e 	imul   ebp,DWORD PTR [ebp+0x0],0x2e2f2e2e
 1ae:	2e                   	cs
 1af:	2f                   	das    
 1b0:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 1b4:	6a 2f                	push   0x2f
 1b6:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 1b9:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 1c0:	63 2f                	arpl   WORD PTR [edi],bp
 1c2:	73 74                	jae    238 <sysEnter_Vector-0x12fdc8>
 1c4:	72 69                	jb     22f <sysEnter_Vector-0x12fdd1>
 1c6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1c7:	67 73 2f             	addr16 jae 1f9 <sysEnter_Vector-0x12fe07>
 1ca:	73 74                	jae    240 <sysEnter_Vector-0x12fdc0>
 1cc:	72 74                	jb     242 <sysEnter_Vector-0x12fdbe>
 1ce:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1cf:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
 1d2:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 1d6:	74 73                	je     24b <sysEnter_Vector-0x12fdb5>
 1d8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 1db:	72 74                	jb     251 <sysEnter_Vector-0x12fdaf>
 1dd:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1de:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 1e1:	74 6f                	je     252 <sysEnter_Vector-0x12fdae>
 1e3:	61                   	popa   
 1e4:	49                   	dec    ecx
 1e5:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 1e8:	63 2f                	arpl   WORD PTR [edi],bp
 1ea:	61                   	popa   
 1eb:	73 63                	jae    250 <sysEnter_Vector-0x12fdb0>
 1ed:	69 69 2e 63 00 69 74 	imul   ebp,DWORD PTR [ecx+0x2e],0x74690063
 1f4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1f5:	61                   	popa   
 1f6:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
 1f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1fa:	69 00 72 65 76 65    	imul   eax,DWORD PTR [eax],0x65766572
 200:	72 73                	jb     275 <sysEnter_Vector-0x12fd8b>
 202:	65                   	gs
 203:	49                   	dec    ecx
 204:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 207:	67 6e                	outs   dx,BYTE PTR ds:[si]
 209:	00 76 61             	add    BYTE PTR [esi+0x61],dh
 20c:	6c                   	ins    BYTE PTR es:[edi],dx
 20d:	75 65                	jne    274 <sysEnter_Vector-0x12fd8c>
 20f:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 213:	74 50                	je     265 <sysEnter_Vector-0x12fd9b>
 215:	6f                   	outs   dx,DWORD PTR ds:[esi]
 216:	70 75                	jo     28d <sysEnter_Vector-0x12fd73>
 218:	6c                   	ins    BYTE PTR es:[edi],dx
 219:	61                   	popa   
 21a:	74 65                	je     281 <sysEnter_Vector-0x12fd7f>
 21c:	64 00 73 65          	add    BYTE PTR fs:[ebx+0x65],dh
 220:	74 65                	je     287 <sysEnter_Vector-0x12fd79>
 222:	6e                   	outs   dx,BYTE PTR ds:[esi]
 223:	76 00                	jbe    225 <sysEnter_Vector-0x12fddb>
 225:	67                   	addr16
 226:	65                   	gs
 227:	74 65                	je     28e <sysEnter_Vector-0x12fd72>
 229:	6e                   	outs   dx,BYTE PTR ds:[esi]
 22a:	76 00                	jbe    22c <sysEnter_Vector-0x12fdd4>
 22c:	73 72                	jae    2a0 <sysEnter_Vector-0x12fd60>
 22e:	63 2f                	arpl   WORD PTR [edi],bp
 230:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 232:	76 69                	jbe    29d <sysEnter_Vector-0x12fd63>
 234:	72 6f                	jb     2a5 <sysEnter_Vector-0x12fd5b>
 236:	6e                   	outs   dx,BYTE PTR ds:[esi]
 237:	6d                   	ins    DWORD PTR es:[edi],dx
 238:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 23a:	74 2e                	je     26a <sysEnter_Vector-0x12fd96>
 23c:	63 00                	arpl   WORD PTR [eax],ax
 23e:	76 61                	jbe    2a1 <sysEnter_Vector-0x12fd5f>
 240:	72 6e                	jb     2b0 <sysEnter_Vector-0x12fd50>
 242:	61                   	popa   
 243:	6d                   	ins    DWORD PTR es:[edi],dx
 244:	65 00 67 65          	add    BYTE PTR gs:[edi+0x65],ah
 248:	74 64                	je     2ae <sysEnter_Vector-0x12fd52>
 24a:	69 72 00 63 6c 6f 73 	imul   esi,DWORD PTR [edx+0x0],0x736f6c63
 251:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
 255:	53                   	push   ebx
 256:	43                   	inc    ebx
 257:	41                   	inc    ecx
 258:	4c                   	dec    esp
 259:	4c                   	dec    esp
 25a:	5f                   	pop    edi
 25b:	52                   	push   edx
 25c:	45                   	inc    ebp
 25d:	41                   	inc    ecx
 25e:	44                   	inc    esp
 25f:	00 77 72             	add    BYTE PTR [edi+0x72],dh
 262:	69 74 65 00 53 59 53 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x43535953
 269:	43 
 26a:	41                   	inc    ecx
 26b:	4c                   	dec    esp
 26c:	4c                   	dec    esp
 26d:	5f                   	pop    edi
 26e:	50                   	push   eax
 26f:	49                   	dec    ecx
 270:	50                   	push   eax
 271:	45                   	inc    ebp
 272:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 275:	53                   	push   ebx
 276:	43                   	inc    ebx
 277:	41                   	inc    ecx
 278:	4c                   	dec    esp
 279:	4c                   	dec    esp
 27a:	5f                   	pop    edi
 27b:	4f                   	dec    edi
 27c:	50                   	push   eax
 27d:	45                   	inc    ebp
 27e:	4e                   	dec    esi
 27f:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 282:	53                   	push   ebx
 283:	43                   	inc    ebx
 284:	41                   	inc    ecx
 285:	4c                   	dec    esp
 286:	4c                   	dec    esp
 287:	5f                   	pop    edi
 288:	4d                   	dec    ebp
 289:	41                   	inc    ecx
 28a:	53                   	push   ebx
 28b:	4b                   	dec    ebx
 28c:	53                   	push   ebx
 28d:	49                   	dec    ecx
 28e:	47                   	inc    edi
 28f:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 292:	53                   	push   ebx
 293:	43                   	inc    ebx
 294:	41                   	inc    ecx
 295:	4c                   	dec    esp
 296:	4c                   	dec    esp
 297:	5f                   	pop    edi
 298:	47                   	inc    edi
 299:	45                   	inc    ebp
 29a:	54                   	push   esp
 29b:	44                   	inc    esp
 29c:	45                   	inc    ebp
 29d:	4e                   	dec    esi
 29e:	54                   	push   esp
 29f:	53                   	push   ebx
 2a0:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 2a3:	63 2f                	arpl   WORD PTR [edi],bp
 2a5:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
 2ac:	53                   	push   ebx
 2ad:	59                   	pop    ecx
 2ae:	53                   	push   ebx
 2af:	43                   	inc    ebx
 2b0:	41                   	inc    ecx
 2b1:	4c                   	dec    esp
 2b2:	4c                   	dec    esp
 2b3:	5f                   	pop    edi
 2b4:	52                   	push   edx
 2b5:	45                   	inc    ebp
 2b6:	42                   	inc    edx
 2b7:	4f                   	dec    edi
 2b8:	4f                   	dec    edi
 2b9:	54                   	push   esp
 2ba:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2bd:	53                   	push   ebx
 2be:	43                   	inc    ebx
 2bf:	41                   	inc    ecx
 2c0:	4c                   	dec    esp
 2c1:	4c                   	dec    esp
 2c2:	5f                   	pop    edi
 2c3:	48                   	dec    eax
 2c4:	4c                   	dec    esp
 2c5:	54                   	push   esp
 2c6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2c9:	53                   	push   ebx
 2ca:	43                   	inc    ebx
 2cb:	41                   	inc    ecx
 2cc:	4c                   	dec    esp
 2cd:	4c                   	dec    esp
 2ce:	5f                   	pop    edi
 2cf:	53                   	push   ebx
 2d0:	4c                   	dec    esp
 2d1:	45                   	inc    ebp
 2d2:	45                   	inc    ebp
 2d3:	50                   	push   eax
 2d4:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2d7:	53                   	push   ebx
 2d8:	43                   	inc    ebx
 2d9:	41                   	inc    ecx
 2da:	4c                   	dec    esp
 2db:	4c                   	dec    esp
 2dc:	5f                   	pop    edi
 2dd:	47                   	inc    edi
 2de:	45                   	inc    ebp
 2df:	54                   	push   esp
 2e0:	54                   	push   esp
 2e1:	49                   	dec    ecx
 2e2:	4d                   	dec    ebp
 2e3:	45                   	inc    ebp
 2e4:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2e7:	53                   	push   ebx
 2e8:	43                   	inc    ebx
 2e9:	41                   	inc    ecx
 2ea:	4c                   	dec    esp
 2eb:	4c                   	dec    esp
 2ec:	5f                   	pop    edi
 2ed:	53                   	push   ebx
 2ee:	45                   	inc    ebp
 2ef:	54                   	push   esp
 2f0:	50                   	push   eax
 2f1:	52                   	push   edx
 2f2:	49                   	dec    ecx
 2f3:	4f                   	dec    edi
 2f4:	52                   	push   edx
 2f5:	49                   	dec    ecx
 2f6:	54                   	push   esp
 2f7:	59                   	pop    ecx
 2f8:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2fb:	53                   	push   ebx
 2fc:	43                   	inc    ebx
 2fd:	41                   	inc    ecx
 2fe:	4c                   	dec    esp
 2ff:	4c                   	dec    esp
 300:	5f                   	pop    edi
 301:	43                   	inc    ebx
 302:	4c                   	dec    esp
 303:	4f                   	dec    edi
 304:	53                   	push   ebx
 305:	45                   	inc    ebp
 306:	00 65 73             	add    BYTE PTR [ebp+0x73],ah
 309:	79 73                	jns    37e <sysEnter_Vector-0x12fc82>
 30b:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 30e:	6c                   	ins    BYTE PTR es:[edi],dx
 30f:	73 00                	jae    311 <sysEnter_Vector-0x12fcef>
 311:	6c                   	ins    BYTE PTR es:[edi],dx
 312:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 314:	67 74 68             	addr16 je 37f <sysEnter_Vector-0x12fc81>
 317:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 31a:	61                   	popa   
 31b:	64 00 53 59          	add    BYTE PTR fs:[ebx+0x59],dl
 31f:	53                   	push   ebx
 320:	43                   	inc    ebx
 321:	41                   	inc    ecx
 322:	4c                   	dec    esp
 323:	4c                   	dec    esp
 324:	5f                   	pop    edi
 325:	46                   	inc    esi
 326:	4f                   	dec    edi
 327:	52                   	push   edx
 328:	4b                   	dec    ebx
 329:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 32c:	53                   	push   ebx
 32d:	43                   	inc    ebx
 32e:	41                   	inc    ecx
 32f:	4c                   	dec    esp
 330:	4c                   	dec    esp
 331:	5f                   	pop    edi
 332:	53                   	push   ebx
 333:	54                   	push   esp
 334:	4f                   	dec    edi
 335:	50                   	push   eax
 336:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 339:	53                   	push   ebx
 33a:	43                   	inc    ebx
 33b:	41                   	inc    ecx
 33c:	4c                   	dec    esp
 33d:	4c                   	dec    esp
 33e:	5f                   	pop    edi
 33f:	50                   	push   eax
 340:	52                   	push   edx
 341:	49                   	dec    ecx
 342:	4e                   	dec    esi
 343:	54                   	push   esp
 344:	44                   	inc    esp
 345:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 348:	66                   	data16
 349:	66                   	data16
 34a:	65                   	gs
 34b:	72 43                	jb     390 <sysEnter_Vector-0x12fc70>
 34d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 34e:	75 6e                	jne    3be <sysEnter_Vector-0x12fc42>
 350:	74 00                	je     352 <sysEnter_Vector-0x12fcae>
 352:	53                   	push   ebx
 353:	59                   	pop    ecx
 354:	53                   	push   ebx
 355:	43                   	inc    ebx
 356:	41                   	inc    ecx
 357:	4c                   	dec    esp
 358:	4c                   	dec    esp
 359:	5f                   	pop    edi
 35a:	46                   	inc    esi
 35b:	52                   	push   edx
 35c:	45                   	inc    ebp
 35d:	45                   	inc    ebp
 35e:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 361:	53                   	push   ebx
 362:	43                   	inc    ebx
 363:	41                   	inc    ecx
 364:	4c                   	dec    esp
 365:	4c                   	dec    esp
 366:	5f                   	pop    edi
 367:	45                   	inc    ebp
 368:	58                   	pop    eax
 369:	45                   	inc    ebp
 36a:	43                   	inc    ebx
 36b:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 36e:	53                   	push   ebx
 36f:	43                   	inc    ebx
 370:	41                   	inc    ecx
 371:	4c                   	dec    esp
 372:	4c                   	dec    esp
 373:	5f                   	pop    edi
 374:	49                   	dec    ecx
 375:	4e                   	dec    esi
 376:	56                   	push   esi
 377:	41                   	inc    ecx
 378:	4c                   	dec    esp
 379:	49                   	dec    ecx
 37a:	44                   	inc    esp
 37b:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 37e:	53                   	push   ebx
 37f:	43                   	inc    ebx
 380:	41                   	inc    ecx
 381:	4c                   	dec    esp
 382:	4c                   	dec    esp
 383:	5f                   	pop    edi
 384:	52                   	push   edx
 385:	45                   	inc    ebp
 386:	47                   	inc    edi
 387:	45                   	inc    ebp
 388:	58                   	pop    eax
 389:	49                   	dec    ecx
 38a:	54                   	push   esp
 38b:	48                   	dec    eax
 38c:	41                   	inc    ecx
 38d:	4e                   	dec    esi
 38e:	44                   	inc    esp
 38f:	4c                   	dec    esp
 390:	45                   	inc    ebp
 391:	52                   	push   edx
 392:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 395:	53                   	push   ebx
 396:	43                   	inc    ebx
 397:	41                   	inc    ecx
 398:	4c                   	dec    esp
 399:	4c                   	dec    esp
 39a:	5f                   	pop    edi
 39b:	47                   	inc    edi
 39c:	45                   	inc    ebp
 39d:	54                   	push   esp
 39e:	54                   	push   esp
 39f:	49                   	dec    ecx
 3a0:	43                   	inc    ebx
 3a1:	4b                   	dec    ebx
 3a2:	53                   	push   ebx
 3a3:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3a6:	53                   	push   ebx
 3a7:	43                   	inc    ebx
 3a8:	41                   	inc    ecx
 3a9:	4c                   	dec    esp
 3aa:	4c                   	dec    esp
 3ab:	5f                   	pop    edi
 3ac:	45                   	inc    ebp
 3ad:	4e                   	dec    esi
 3ae:	44                   	inc    esp
 3af:	50                   	push   eax
 3b0:	52                   	push   edx
 3b1:	4f                   	dec    edi
 3b2:	43                   	inc    ebx
 3b3:	45                   	inc    ebp
 3b4:	53                   	push   ebx
 3b5:	53                   	push   ebx
 3b6:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 3b9:	66                   	data16
 3ba:	66                   	data16
 3bb:	65                   	gs
 3bc:	72 00                	jb     3be <sysEnter_Vector-0x12fc42>
 3be:	53                   	push   ebx
 3bf:	59                   	pop    ecx
 3c0:	53                   	push   ebx
 3c1:	43                   	inc    ebx
 3c2:	41                   	inc    ecx
 3c3:	4c                   	dec    esp
 3c4:	4c                   	dec    esp
 3c5:	5f                   	pop    edi
 3c6:	57                   	push   edi
 3c7:	52                   	push   edx
 3c8:	49                   	dec    ecx
 3c9:	54                   	push   esp
 3ca:	45                   	inc    ebp
 3cb:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3ce:	53                   	push   ebx
 3cf:	43                   	inc    ebx
 3d0:	41                   	inc    ecx
 3d1:	4c                   	dec    esp
 3d2:	4c                   	dec    esp
 3d3:	5f                   	pop    edi
 3d4:	50                   	push   eax
 3d5:	52                   	push   edx
 3d6:	49                   	dec    ecx
 3d7:	4e                   	dec    esi
 3d8:	54                   	push   esp
 3d9:	00 68 61             	add    BYTE PTR [eax+0x61],ch
 3dc:	6e                   	outs   dx,BYTE PTR ds:[esi]
 3dd:	64                   	fs
 3de:	6c                   	ins    BYTE PTR es:[edi],dx
 3df:	65 00 73 69          	add    BYTE PTR gs:[ebx+0x69],dh
 3e3:	7a 65                	jp     44a <sysEnter_Vector-0x12fbb6>
 3e5:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3e8:	53                   	push   ebx
 3e9:	43                   	inc    ebx
 3ea:	41                   	inc    ecx
 3eb:	4c                   	dec    esp
 3ec:	4c                   	dec    esp
 3ed:	5f                   	pop    edi
 3ee:	41                   	inc    ecx
 3ef:	4c                   	dec    esp
 3f0:	4c                   	dec    esp
 3f1:	4f                   	dec    edi
 3f2:	43                   	inc    ebx
 3f3:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3f6:	53                   	push   ebx
 3f7:	43                   	inc    ebx
 3f8:	41                   	inc    ecx
 3f9:	4c                   	dec    esp
 3fa:	4c                   	dec    esp
 3fb:	5f                   	pop    edi
 3fc:	47                   	inc    edi
 3fd:	45                   	inc    ebp
 3fe:	54                   	push   esp
 3ff:	43                   	inc    ebx
 400:	57                   	push   edi
 401:	44                   	inc    esp
 402:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 405:	53                   	push   ebx
 406:	43                   	inc    ebx
 407:	41                   	inc    ecx
 408:	4c                   	dec    esp
 409:	4c                   	dec    esp
 40a:	5f                   	pop    edi
 40b:	57                   	push   edi
 40c:	41                   	inc    ecx
 40d:	49                   	dec    ecx
 40e:	54                   	push   esp
 40f:	46                   	inc    esi
 410:	4f                   	dec    edi
 411:	52                   	push   edx
 412:	50                   	push   eax
 413:	49                   	dec    ecx
 414:	44                   	inc    esp
 415:	00 6f 70             	add    BYTE PTR [edi+0x70],ch
 418:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 41a:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 41d:	53                   	push   ebx
 41e:	43                   	inc    ebx
 41f:	41                   	inc    ecx
 420:	4c                   	dec    esp
 421:	4c                   	dec    esp
 422:	5f                   	pop    edi
 423:	53                   	push   ebx
 424:	45                   	inc    ebp
 425:	54                   	push   esp
 426:	53                   	push   ebx
 427:	49                   	dec    ecx
 428:	47                   	inc    edi
 429:	41                   	inc    ecx
 42a:	43                   	inc    ebx
 42b:	54                   	push   esp
 42c:	49                   	dec    ecx
 42d:	4f                   	dec    edi
 42e:	4e                   	dec    esi
 42f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 432:	72 65                	jb     499 <sysEnter_Vector-0x12fb67>
 434:	61                   	popa   
 435:	6d                   	ins    DWORD PTR es:[edi],dx
 436:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 439:	74 73                	je     4ae <sysEnter_Vector-0x12fb52>
 43b:	45                   	inc    ebp
 43c:	72 72                	jb     4b0 <sysEnter_Vector-0x12fb50>
 43e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 43f:	72 00                	jb     441 <sysEnter_Vector-0x12fbbf>
 441:	6c                   	ins    BYTE PTR es:[edi],dx
 442:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 445:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 448:	63 2f                	arpl   WORD PTR [edi],bp
 44a:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
 451:	6e                   	outs   dx,BYTE PTR ds:[esi]
 452:	70 75                	jo     4c9 <sysEnter_Vector-0x12fb37>
 454:	74 2e                	je     484 <sysEnter_Vector-0x12fb7c>
 456:	63 00                	arpl   WORD PTR [eax],ax
 458:	69 6e 63 68 61 72 00 	imul   ebp,DWORD PTR [esi+0x63],0x726168
 45f:	67                   	addr16
 460:	65                   	gs
 461:	74 63                	je     4c6 <sysEnter_Vector-0x12fb3a>
 463:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 466:	78 6c                	js     4d4 <sysEnter_Vector-0x12fb2c>
 468:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 46a:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 46d:	74 73                	je     4e2 <sysEnter_Vector-0x12fb1e>
 46f:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 472:	74 63                	je     4d7 <sysEnter_Vector-0x12fb29>
 474:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 477:	74 73                	je     4ec <sysEnter_Vector-0x12fb14>
 479:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 47c:	74 56                	je     4d4 <sysEnter_Vector-0x12fb2c>
 47e:	61                   	popa   
 47f:	6c                   	ins    BYTE PTR es:[edi],dx
 480:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 483:	69 6e 74 00 6c 61 73 	imul   ebp,DWORD PTR [esi+0x74],0x73616c00
 48a:	74 53                	je     4df <sysEnter_Vector-0x12fb21>
 48c:	70 61                	jo     4ef <sysEnter_Vector-0x12fb11>
 48e:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 491:	74 72                	je     505 <sysEnter_Vector-0x12fafb>
 493:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 496:	7a 65                	jp     4fd <sysEnter_Vector-0x12fb03>
 498:	5f                   	pop    edi
 499:	74 00                	je     49b <sysEnter_Vector-0x12fb65>
 49b:	75 69                	jne    506 <sysEnter_Vector-0x12fafa>
 49d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 49e:	74 70                	je     510 <sysEnter_Vector-0x12faf0>
 4a0:	74 72                	je     514 <sysEnter_Vector-0x12faec>
 4a2:	5f                   	pop    edi
 4a3:	74 00                	je     4a5 <sysEnter_Vector-0x12fb5b>
 4a5:	73 69                	jae    510 <sysEnter_Vector-0x12faf0>
 4a7:	67 44                	addr16 inc esp
 4a9:	61                   	popa   
 4aa:	74 61                	je     50d <sysEnter_Vector-0x12faf3>
 4ac:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 4af:	67 76 50             	addr16 jbe 502 <sysEnter_Vector-0x12fafe>
 4b2:	74 72                	je     526 <sysEnter_Vector-0x12fada>
 4b4:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 4b7:	6f                   	outs   dx,DWORD PTR ds:[esi]
 4b8:	67 72 61             	addr16 jb 51c <sysEnter_Vector-0x12fae4>
 4bb:	6d                   	ins    DWORD PTR es:[edi],dx
 4bc:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 4c0:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
 4c3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4c4:	69 74 00 5f 5f 62 75 	imul   esi,DWORD PTR [eax+eax*1+0x5f],0x6975625f
 4cb:	69 
 4cc:	6c                   	ins    BYTE PTR es:[edi],dx
 4cd:	74 69                	je     538 <sysEnter_Vector-0x12fac8>
 4cf:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4d0:	5f                   	pop    edi
 4d1:	76 61                	jbe    534 <sysEnter_Vector-0x12facc>
 4d3:	5f                   	pop    edi
 4d4:	6c                   	ins    BYTE PTR es:[edi],dx
 4d5:	69 73 74 00 66 6f 72 	imul   esi,DWORD PTR [ebx+0x74],0x726f6600
 4dc:	6b 00 73             	imul   eax,DWORD PTR [eax],0x73
 4df:	70 61                	jo     542 <sysEnter_Vector-0x12fabe>
 4e1:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 4e4:	74 72                	je     558 <sysEnter_Vector-0x12faa8>
 4e6:	00 77 61             	add    BYTE PTR [edi+0x61],dh
 4e9:	69 74 70 69 64 00 44 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65440064
 4f0:	65 
 4f1:	62 75 67             	bound  esi,QWORD PTR [ebp+0x67]
 4f4:	4c                   	dec    esp
 4f5:	65                   	gs
 4f6:	76 65                	jbe    55d <sysEnter_Vector-0x12faa3>
 4f8:	6c                   	ins    BYTE PTR es:[edi],dx
 4f9:	00 63 61             	add    BYTE PTR [ebx+0x61],ah
 4fc:	6c                   	ins    BYTE PTR es:[edi],dx
 4fd:	6c                   	ins    BYTE PTR es:[edi],dx
 4fe:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4ff:	75 6d                	jne    56e <sysEnter_Vector-0x12fa92>
 501:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
 504:	65                   	gs
 505:	65                   	gs
 506:	70 00                	jo     508 <sysEnter_Vector-0x12faf8>
 508:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 50a:	5f                   	pop    edi
 50b:	73 79                	jae    586 <sysEnter_Vector-0x12fa7a>
 50d:	73 63                	jae    572 <sysEnter_Vector-0x12fa8e>
 50f:	61                   	popa   
 510:	6c                   	ins    BYTE PTR es:[edi],dx
 511:	6c                   	ins    BYTE PTR es:[edi],dx
 512:	30 00                	xor    BYTE PTR [eax],al
 514:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 516:	5f                   	pop    edi
 517:	73 79                	jae    592 <sysEnter_Vector-0x12fa6e>
 519:	73 63                	jae    57e <sysEnter_Vector-0x12fa82>
 51b:	61                   	popa   
 51c:	6c                   	ins    BYTE PTR es:[edi],dx
 51d:	6c                   	ins    BYTE PTR es:[edi],dx
 51e:	31 00                	xor    DWORD PTR [eax],eax
 520:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 522:	5f                   	pop    edi
 523:	73 79                	jae    59e <sysEnter_Vector-0x12fa62>
 525:	73 63                	jae    58a <sysEnter_Vector-0x12fa76>
 527:	61                   	popa   
 528:	6c                   	ins    BYTE PTR es:[edi],dx
 529:	6c                   	ins    BYTE PTR es:[edi],dx
 52a:	32 00                	xor    al,BYTE PTR [eax]
 52c:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 52e:	5f                   	pop    edi
 52f:	73 79                	jae    5aa <sysEnter_Vector-0x12fa56>
 531:	73 63                	jae    596 <sysEnter_Vector-0x12fa6a>
 533:	61                   	popa   
 534:	6c                   	ins    BYTE PTR es:[edi],dx
 535:	6c                   	ins    BYTE PTR es:[edi],dx
 536:	33 00                	xor    eax,DWORD PTR [eax]
 538:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 53a:	5f                   	pop    edi
 53b:	73 79                	jae    5b6 <sysEnter_Vector-0x12fa4a>
 53d:	73 63                	jae    5a2 <sysEnter_Vector-0x12fa5e>
 53f:	61                   	popa   
 540:	6c                   	ins    BYTE PTR es:[edi],dx
 541:	6c                   	ins    BYTE PTR es:[edi],dx
 542:	34 00                	xor    al,0x0
 544:	6c                   	ins    BYTE PTR es:[edi],dx
 545:	69 62 63 49 6e 69 74 	imul   esp,DWORD PTR [edx+0x63],0x74696e49
 54c:	69 61 6c 69 7a 65 64 	imul   esp,DWORD PTR [ecx+0x6c],0x64657a69
 553:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 556:	67 6e                	outs   dx,BYTE PTR ds:[si]
 558:	75 63                	jne    5bd <sysEnter_Vector-0x12fa43>
 55a:	5f                   	pop    edi
 55b:	76 61                	jbe    5be <sysEnter_Vector-0x12fa42>
 55d:	5f                   	pop    edi
 55e:	6c                   	ins    BYTE PTR es:[edi],dx
 55f:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
 566:	6e                   	outs   dx,BYTE PTR ds:[esi]
 567:	74 64                	je     5cd <sysEnter_Vector-0x12fa33>
 569:	49                   	dec    ecx
 56a:	00 70 61             	add    BYTE PTR [eax+0x61],dh
 56d:	72 61                	jb     5d0 <sysEnter_Vector-0x12fa30>
 56f:	6d                   	ins    DWORD PTR es:[edi],dx
 570:	31 00                	xor    DWORD PTR [eax],eax
 572:	70 61                	jo     5d5 <sysEnter_Vector-0x12fa2b>
 574:	72 61                	jb     5d7 <sysEnter_Vector-0x12fa29>
 576:	6d                   	ins    DWORD PTR es:[edi],dx
 577:	32 00                	xor    al,BYTE PTR [eax]
 579:	70 61                	jo     5dc <sysEnter_Vector-0x12fa24>
 57b:	72 61                	jb     5de <sysEnter_Vector-0x12fa22>
 57d:	6d                   	ins    DWORD PTR es:[edi],dx
 57e:	33 00                	xor    eax,DWORD PTR [eax]
 580:	70 61                	jo     5e3 <sysEnter_Vector-0x12fa1d>
 582:	72 61                	jb     5e5 <sysEnter_Vector-0x12fa1b>
 584:	6d                   	ins    DWORD PTR es:[edi],dx
 585:	34 00                	xor    al,0x0
 587:	65                   	gs
 588:	78 65                	js     5ef <sysEnter_Vector-0x12fa11>
 58a:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
 58d:	66 6f                	outs   dx,WORD PTR ds:[esi]
 58f:	72 6d                	jb     5fe <sysEnter_Vector-0x12fa02>
 591:	61                   	popa   
 592:	74 00                	je     594 <sysEnter_Vector-0x12fa6c>
 594:	73 69                	jae    5ff <sysEnter_Vector-0x12fa01>
 596:	67 6e                	outs   dx,BYTE PTR ds:[si]
 598:	61                   	popa   
 599:	6c                   	ins    BYTE PTR es:[edi],dx
 59a:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 59d:	65 63 00             	arpl   WORD PTR gs:[eax],ax
 5a0:	5f                   	pop    edi
 5a1:	5f                   	pop    edi
 5a2:	73 65                	jae    609 <sysEnter_Vector-0x12f9f7>
 5a4:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 5a7:	64                   	fs
 5a8:	73 00                	jae    5aa <sysEnter_Vector-0x12fa56>
 5aa:	73 72                	jae    61e <sysEnter_Vector-0x12f9e2>
 5ac:	63 2f                	arpl   WORD PTR [edi],bp
 5ae:	6c                   	ins    BYTE PTR es:[edi],dx
 5af:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
 5b6:	4f                   	dec    edi
 5b7:	53                   	push   ebx
 5b8:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 5bb:	61                   	popa   
 5bc:	72 67                	jb     625 <sysEnter_Vector-0x12f9db>
 5be:	63 00                	arpl   WORD PTR [eax],ax
 5c0:	6c                   	ins    BYTE PTR es:[edi],dx
 5c1:	69 62 63 5f 63 6c 65 	imul   esp,DWORD PTR [edx+0x63],0x656c635f
 5c8:	61                   	popa   
 5c9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5ca:	75 70                	jne    63c <sysEnter_Vector-0x12f9c4>
 5cc:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 5cf:	67 76 00             	addr16 jbe 5d2 <sysEnter_Vector-0x12fa2e>
 5d2:	73 69                	jae    63d <sysEnter_Vector-0x12f9c3>
 5d4:	67 48                	addr16 dec eax
 5d6:	61                   	popa   
 5d7:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5d8:	64                   	fs
 5d9:	6c                   	ins    BYTE PTR es:[edi],dx
 5da:	65                   	gs
 5db:	72 00                	jb     5dd <sysEnter_Vector-0x12fa23>
 5dd:	6d                   	ins    DWORD PTR es:[edi],dx
 5de:	6f                   	outs   dx,DWORD PTR ds:[esi]
 5df:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
 5e6:	6e 
 5e7:	61                   	popa   
 5e8:	6c                   	ins    BYTE PTR es:[edi],dx
 5e9:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 5ec:	67 73 00             	addr16 jae 5ef <sysEnter_Vector-0x12fa11>
 5ef:	70 72                	jo     663 <sysEnter_Vector-0x12f99d>
 5f1:	69 6e 74 49 00 73 74 	imul   ebp,DWORD PTR [esi+0x74],0x74730049
 5f8:	6f                   	outs   dx,DWORD PTR ds:[esi]
 5f9:	70 00                	jo     5fb <sysEnter_Vector-0x12fa05>
 5fb:	67                   	addr16
 5fc:	65                   	gs
 5fd:	74 63                	je     662 <sysEnter_Vector-0x12f99e>
 5ff:	77 64                	ja     665 <sysEnter_Vector-0x12f99b>
 601:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
 604:	6c                   	ins    BYTE PTR es:[edi],dx
 605:	6f                   	outs   dx,DWORD PTR ds:[esi]
 606:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 609:	65                   	gs
 60a:	64                   	fs
 60b:	50                   	push   eax
 60c:	74 72                	je     680 <sysEnter_Vector-0x12f980>
 60e:	00 66 70             	add    BYTE PTR [esi+0x70],ah
 611:	6f                   	outs   dx,DWORD PTR ds:[esi]
 612:	69 6e 74 65 72 00 6e 	imul   ebp,DWORD PTR [esi+0x74],0x6e007265
 619:	65                   	gs
 61a:	77 53                	ja     66f <sysEnter_Vector-0x12f991>
 61c:	69 7a 65 00 6d 61 6c 	imul   edi,DWORD PTR [edx+0x65],0x6c616d00
 623:	6c                   	ins    BYTE PTR es:[edi],dx
 624:	6f                   	outs   dx,DWORD PTR ds:[esi]
 625:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 628:	6c                   	ins    BYTE PTR es:[edi],dx
 629:	65                   	gs
 62a:	61                   	popa   
 62b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 62c:	75 70                	jne    69e <sysEnter_Vector-0x12f962>
 62e:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 631:	72 6b                	jb     69e <sysEnter_Vector-0x12f962>
 633:	65                   	gs
 634:	72 00                	jb     636 <sysEnter_Vector-0x12f9ca>
 636:	6d                   	ins    DWORD PTR es:[edi],dx
 637:	61                   	popa   
 638:	6c                   	ins    BYTE PTR es:[edi],dx
 639:	6c                   	ins    BYTE PTR es:[edi],dx
 63a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 63b:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 63e:	68 65 61 70 50       	push   0x50706165
 643:	74 72                	je     6b7 <sysEnter_Vector-0x12f949>
 645:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 648:	6e                   	outs   dx,BYTE PTR ds:[esi]
 649:	74 38                	je     683 <sysEnter_Vector-0x12f97d>
 64b:	5f                   	pop    edi
 64c:	74 00                	je     64e <sysEnter_Vector-0x12f9b2>
 64e:	66                   	data16
 64f:	72 65                	jb     6b6 <sysEnter_Vector-0x12f94a>
 651:	65 00 6e 65          	add    BYTE PTR gs:[esi+0x65],ch
 655:	65 64 65 64 00 73 68 	gs fs gs add BYTE PTR fs:gs:[ebx+0x68],dh
 65c:	65                   	gs
 65d:	61                   	popa   
 65e:	70 00                	jo     660 <sysEnter_Vector-0x12f9a0>
 660:	69 6e 55 73 65 00 69 	imul   ebp,DWORD PTR [esi+0x55],0x69006573
 667:	6e                   	outs   dx,BYTE PTR ds:[esi]
 668:	69 74 6d 61 6c 6c 6f 	imul   esi,DWORD PTR [ebp+ebp*2+0x61],0x636f6c6c
 66f:	63 
 670:	00 67 6f             	add    BYTE PTR [edi+0x6f],ah
 673:	74 6f                	je     6e4 <sysEnter_Vector-0x12f91c>
 675:	48                   	dec    eax
 676:	65                   	gs
 677:	72 65                	jb     6de <sysEnter_Vector-0x12f922>
 679:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 67c:	61                   	popa   
 67d:	70 50                	jo     6cf <sysEnter_Vector-0x12f931>
 67f:	74 72                	je     6f3 <sysEnter_Vector-0x12f90d>
 681:	4e                   	dec    esi
 682:	65                   	gs
 683:	78 74                	js     6f9 <sysEnter_Vector-0x12f907>
 685:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 688:	77 48                	ja     6d2 <sysEnter_Vector-0x12f92e>
 68a:	65                   	gs
 68b:	61                   	popa   
 68c:	70 52                	jo     6e0 <sysEnter_Vector-0x12f920>
 68e:	65                   	gs
 68f:	71 75                	jno    706 <sysEnter_Vector-0x12f8fa>
 691:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
 698:	75 6c                	jne    706 <sysEnter_Vector-0x12f8fa>
 69a:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
 6a1:	75 65                	jne    708 <sysEnter_Vector-0x12f8f8>
 6a3:	73 74                	jae    719 <sysEnter_Vector-0x12f8e7>
 6a5:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 6a8:	63 2f                	arpl   WORD PTR [edi],bp
 6aa:	6d                   	ins    DWORD PTR es:[edi],dx
 6ab:	61                   	popa   
 6ac:	6c                   	ins    BYTE PTR es:[edi],dx
 6ad:	6c                   	ins    BYTE PTR es:[edi],dx
 6ae:	6f                   	outs   dx,DWORD PTR ds:[esi]
 6af:	63 2e                	arpl   WORD PTR [esi],bp
 6b1:	63 00                	arpl   WORD PTR [eax],ax
 6b3:	66                   	data16
 6b4:	72 65                	jb     71b <sysEnter_Vector-0x12f8e5>
 6b6:	65                   	gs
 6b7:	49                   	dec    ecx
 6b8:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 6bb:	65                   	gs
 6bc:	76 00                	jbe    6be <sysEnter_Vector-0x12f942>
 6be:	68 65 61 70 72       	push   0x72706165
 6c3:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
 6c7:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 6ca:	63 2f                	arpl   WORD PTR [edi],bp
 6cc:	6d                   	ins    DWORD PTR es:[edi],dx
 6cd:	65                   	gs
 6ce:	6d                   	ins    DWORD PTR es:[edi],dx
 6cf:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 6d2:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 6d5:	64                   	fs
 6d6:	65                   	gs
 6d7:	73 74                	jae    74d <sysEnter_Vector-0x12f8b3>
 6d9:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 6dc:	6d                   	ins    DWORD PTR es:[edi],dx
 6dd:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 6e0:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
 6e3:	61                   	popa   
 6e4:	6c                   	ins    BYTE PTR es:[edi],dx
 6e5:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 6e8:	6d                   	ins    DWORD PTR es:[edi],dx
 6e9:	73 65                	jae    750 <sysEnter_Vector-0x12f8b0>
 6eb:	74 00                	je     6ed <sysEnter_Vector-0x12f913>
 6ed:	73 72                	jae    761 <sysEnter_Vector-0x12f89f>
 6ef:	63 2f                	arpl   WORD PTR [edi],bp
 6f1:	6d                   	ins    DWORD PTR es:[edi],dx
 6f2:	65                   	gs
 6f3:	6d                   	ins    DWORD PTR es:[edi],dx
 6f4:	73 65                	jae    75b <sysEnter_Vector-0x12f8a5>
 6f6:	74 2e                	je     726 <sysEnter_Vector-0x12f8da>
 6f8:	63 00                	arpl   WORD PTR [eax],ax
 6fa:	66 56                	push   si
 6fc:	61                   	popa   
 6fd:	6c                   	ins    BYTE PTR es:[edi],dx
 6fe:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 701:	6d                   	ins    DWORD PTR es:[edi],dx
 702:	73 65                	jae    769 <sysEnter_Vector-0x12f897>
 704:	74 49                	je     74f <sysEnter_Vector-0x12f8b1>
 706:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 709:	6e                   	outs   dx,BYTE PTR ds:[esi]
 70a:	74 31                	je     73d <sysEnter_Vector-0x12f8c3>
 70c:	36                   	ss
 70d:	5f                   	pop    edi
 70e:	74 00                	je     710 <sysEnter_Vector-0x12f8f0>
 710:	61                   	popa   
 711:	64                   	fs
 712:	64                   	fs
 713:	72 00                	jb     715 <sysEnter_Vector-0x12f8eb>
 715:	6f                   	outs   dx,DWORD PTR ds:[esi]
 716:	66 66 5f             	data32 pop di
 719:	74 00                	je     71b <sysEnter_Vector-0x12f8e5>
 71b:	70 72                	jo     78f <sysEnter_Vector-0x12f871>
 71d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 71e:	74 00                	je     720 <sysEnter_Vector-0x12f8e0>
 720:	6f                   	outs   dx,DWORD PTR ds:[esi]
 721:	66                   	data16
 722:	66                   	data16
 723:	73 65                	jae    78a <sysEnter_Vector-0x12f876>
 725:	74 00                	je     727 <sysEnter_Vector-0x12f8d9>
 727:	6d                   	ins    DWORD PTR es:[edi],dx
 728:	6d                   	ins    DWORD PTR es:[edi],dx
 729:	61                   	popa   
 72a:	70 00                	jo     72c <sysEnter_Vector-0x12f8d4>
 72c:	73 72                	jae    7a0 <sysEnter_Vector-0x12f860>
 72e:	63 2f                	arpl   WORD PTR [edi],bp
 730:	6d                   	ins    DWORD PTR es:[edi],dx
 731:	6d                   	ins    DWORD PTR es:[edi],dx
 732:	61                   	popa   
 733:	70 2e                	jo     763 <sysEnter_Vector-0x12f89d>
 735:	63 00                	arpl   WORD PTR [eax],ax
 737:	73 72                	jae    7ab <sysEnter_Vector-0x12f855>
 739:	63 2f                	arpl   WORD PTR [edi],bp
 73b:	70 69                	jo     7a6 <sysEnter_Vector-0x12f85a>
 73d:	70 65                	jo     7a4 <sysEnter_Vector-0x12f85c>
 73f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 742:	70 69                	jo     7ad <sysEnter_Vector-0x12f853>
 744:	70 65                	jo     7ab <sysEnter_Vector-0x12f855>
 746:	00 70 69             	add    BYTE PTR [eax+0x69],dh
 749:	70 65                	jo     7b0 <sysEnter_Vector-0x12f850>
 74b:	66                   	data16
 74c:	64 00 73 5f          	add    BYTE PTR fs:[ebx+0x5f],dh
 750:	64                   	fs
 751:	65                   	gs
 752:	76 00                	jbe    754 <sysEnter_Vector-0x12f8ac>
 754:	75 69                	jne    7bf <sysEnter_Vector-0x12f841>
 756:	6e                   	outs   dx,BYTE PTR ds:[esi]
 757:	74 36                	je     78f <sysEnter_Vector-0x12f871>
 759:	34 5f                	xor    al,0x5f
 75b:	74 00                	je     75d <sysEnter_Vector-0x12f8a3>
 75d:	6d                   	ins    DWORD PTR es:[edi],dx
 75e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 75f:	74 5f                	je     7c0 <sysEnter_Vector-0x12f840>
 761:	66                   	data16
 762:	6c                   	ins    BYTE PTR es:[edi],dx
 763:	61                   	popa   
 764:	67 73 00             	addr16 jae 767 <sysEnter_Vector-0x12f899>
 767:	6d                   	ins    DWORD PTR es:[edi],dx
 768:	6b 6e 6f 64          	imul   ebp,DWORD PTR [esi+0x6f],0x64
 76c:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 76f:	78 74                	js     7e5 <sysEnter_Vector-0x12f81b>
 771:	00 6d 6b             	add    BYTE PTR [ebp+0x6b],ch
 774:	64 69 72 00 62 75 66 	imul   esi,DWORD PTR fs:[edx+0x0],0x66667562
 77b:	66 
 77c:	00 6d 6e             	add    BYTE PTR [ebp+0x6e],ch
 77f:	74 5f                	je     7e0 <sysEnter_Vector-0x12f820>
 781:	73 62                	jae    7e5 <sysEnter_Vector-0x12f81b>
 783:	00 73 5f             	add    BYTE PTR [ebx+0x5f],dh
 786:	6c                   	ins    BYTE PTR es:[edi],dx
 787:	69 73 74 00 73 75 70 	imul   esi,DWORD PTR [ebx+0x74],0x70757300
 78e:	65                   	gs
 78f:	72 5f                	jb     7f0 <sysEnter_Vector-0x12f810>
 791:	62 6c 6f 63          	bound  ebp,QWORD PTR [edi+ebp*2+0x63]
 795:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 798:	5f                   	pop    edi
 799:	76 66                	jbe    801 <sysEnter_Vector-0x12f7ff>
 79b:	73 6d                	jae    80a <sysEnter_Vector-0x12f7f6>
 79d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 79e:	75 6e                	jne    80e <sysEnter_Vector-0x12f7f2>
 7a0:	74 00                	je     7a2 <sysEnter_Vector-0x12f85e>
 7a2:	72 65                	jb     809 <sysEnter_Vector-0x12f7f7>
 7a4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7a5:	61                   	popa   
 7a6:	6d                   	ins    DWORD PTR es:[edi],dx
 7a7:	65 00 64 5f 6e       	add    BYTE PTR gs:[edi+ebx*2+0x6e],ah
 7ac:	61                   	popa   
 7ad:	6d                   	ins    DWORD PTR es:[edi],dx
 7ae:	65 00 73 72          	add    BYTE PTR gs:[ebx+0x72],dh
 7b2:	63 2f                	arpl   WORD PTR [edi],bp
 7b4:	73 74                	jae    82a <sysEnter_Vector-0x12f7d6>
 7b6:	64 69 6f 2e 63 00 64 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x65640063
 7bd:	65 
 7be:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7bf:	74 72                	je     833 <sysEnter_Vector-0x12f7cd>
 7c1:	79 00                	jns    7c3 <sysEnter_Vector-0x12f83d>
 7c3:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 7ca:	65                   	gs
 7cb:	72 61                	jb     82e <sysEnter_Vector-0x12f7d2>
 7cd:	74 69                	je     838 <sysEnter_Vector-0x12f7c8>
 7cf:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7d0:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7d1:	73 00                	jae    7d3 <sysEnter_Vector-0x12f82d>
 7d3:	72 6d                	jb     842 <sysEnter_Vector-0x12f7be>
 7d5:	64 69 72 00 69 5f 67 	imul   esi,DWORD PTR fs:[edx+0x0],0x69675f69
 7dc:	69 
 7dd:	64 00 64 6c 6c       	add    BYTE PTR fs:[esp+ebp*2+0x6c],ah
 7e2:	69 73 74 5f 74 00 69 	imul   esi,DWORD PTR [ebx+0x74],0x6900745f
 7e9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7ea:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7eb:	64                   	fs
 7ec:	65                   	gs
 7ed:	5f                   	pop    edi
 7ee:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7ef:	70 65                	jo     856 <sysEnter_Vector-0x12f7aa>
 7f1:	72 61                	jb     854 <sysEnter_Vector-0x12f7ac>
 7f3:	74 69                	je     85e <sysEnter_Vector-0x12f7a2>
 7f5:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7f6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7f7:	73 00                	jae    7f9 <sysEnter_Vector-0x12f807>
 7f9:	69 5f 6f 70 66 6c 61 	imul   ebx,DWORD PTR [edi+0x6f],0x616c6670
 800:	67 73 00             	addr16 jae 803 <sysEnter_Vector-0x12f7fd>
 803:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 80a:	65                   	gs
 80b:	72 61                	jb     86e <sysEnter_Vector-0x12f792>
 80d:	74 69                	je     878 <sysEnter_Vector-0x12f788>
 80f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 810:	6e                   	outs   dx,BYTE PTR ds:[esi]
 811:	73 5f                	jae    872 <sysEnter_Vector-0x12f78e>
 813:	74 00                	je     815 <sysEnter_Vector-0x12f7eb>
 815:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 818:	66 50                	push   ax
 81a:	74 72                	je     88e <sysEnter_Vector-0x12f772>
 81c:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 81f:	64                   	fs
 820:	65                   	gs
 821:	76 00                	jbe    823 <sysEnter_Vector-0x12f7dd>
 823:	70 61                	jo     886 <sysEnter_Vector-0x12f77a>
 825:	79 6c                	jns    893 <sysEnter_Vector-0x12f76d>
 827:	6f                   	outs   dx,DWORD PTR ds:[esi]
 828:	61                   	popa   
 829:	64 00 73 6c          	add    BYTE PTR fs:[ebx+0x6c],dh
 82d:	69 73 74 68 65 61 64 	imul   esi,DWORD PTR [ebx+0x74],0x64616568
 834:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 837:	6f                   	outs   dx,DWORD PTR ds:[esi]
 838:	70 00                	jo     83a <sysEnter_Vector-0x12f7c6>
 83a:	6d                   	ins    DWORD PTR es:[edi],dx
 83b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 83c:	74 5f                	je     89d <sysEnter_Vector-0x12f763>
 83e:	72 6f                	jb     8af <sysEnter_Vector-0x12f751>
 840:	6f                   	outs   dx,DWORD PTR ds:[esi]
 841:	74 00                	je     843 <sysEnter_Vector-0x12f7bd>
 843:	66 6f                	outs   dx,WORD PTR ds:[esi]
 845:	70 73                	jo     8ba <sysEnter_Vector-0x12f746>
 847:	00 66 69             	add    BYTE PTR [esi+0x69],ah
 84a:	6c                   	ins    BYTE PTR es:[edi],dx
 84b:	65                   	gs
 84c:	5f                   	pop    edi
 84d:	74 00                	je     84f <sysEnter_Vector-0x12f7b1>
 84f:	69 5f 66 6c 61 67 73 	imul   ebx,DWORD PTR [edi+0x66],0x7367616c
 856:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 859:	75 69                	jne    8c4 <sysEnter_Vector-0x12f73c>
 85b:	64 00 69 5f          	add    BYTE PTR fs:[ecx+0x5f],ch
 85f:	6d                   	ins    DWORD PTR es:[edi],dx
 860:	6f                   	outs   dx,DWORD PTR ds:[esi]
 861:	64 65 00 63 6f       	fs add BYTE PTR fs:gs:[ebx+0x6f],ah
 866:	6e                   	outs   dx,BYTE PTR ds:[esi]
 867:	73 6f                	jae    8d8 <sysEnter_Vector-0x12f728>
 869:	6c                   	ins    BYTE PTR es:[edi],dx
 86a:	65                   	gs
 86b:	5f                   	pop    edi
 86c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 86d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 86e:	64 65 00 69 6e       	fs add BYTE PTR fs:gs:[ecx+0x6e],ch
 873:	6f                   	outs   dx,DWORD PTR ds:[esi]
 874:	64                   	fs
 875:	65                   	gs
 876:	5f                   	pop    edi
 877:	74 00                	je     879 <sysEnter_Vector-0x12f787>
 879:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 87c:	73 6f                	jae    8ed <sysEnter_Vector-0x12f713>
 87e:	6c                   	ins    BYTE PTR es:[edi],dx
 87f:	65                   	gs
 880:	5f                   	pop    edi
 881:	66 69 6c 65 00 73 5f 	imul   bp,WORD PTR [ebp+eiz*2+0x0],0x5f73
 888:	72 6f                	jb     8f9 <sysEnter_Vector-0x12f707>
 88a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 88b:	74 00                	je     88d <sysEnter_Vector-0x12f773>
 88d:	64                   	fs
 88e:	5f                   	pop    edi
 88f:	69 6e 6f 64 65 00 72 	imul   ebp,DWORD PTR [esi+0x6f],0x72006564
 896:	65                   	gs
 897:	73 65                	jae    8fe <sysEnter_Vector-0x12f702>
 899:	74 52                	je     8ed <sysEnter_Vector-0x12f713>
 89b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 89c:	77 00                	ja     89e <sysEnter_Vector-0x12f762>
 89e:	64                   	fs
 89f:	5f                   	pop    edi
 8a0:	70 61                	jo     903 <sysEnter_Vector-0x12f6fd>
 8a2:	72 65                	jb     909 <sysEnter_Vector-0x12f6f7>
 8a4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8a5:	74 00                	je     8a7 <sysEnter_Vector-0x12f759>
 8a7:	66 5f                	pop    di
 8a9:	69 6e 6f 64 65 00 66 	imul   ebp,DWORD PTR [esi+0x6f],0x66006564
 8b0:	5f                   	pop    edi
 8b1:	70 61                	jo     914 <sysEnter_Vector-0x12f6ec>
 8b3:	74 68                	je     91d <sysEnter_Vector-0x12f6e3>
 8b5:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
 8b8:	65                   	gs
 8b9:	61                   	popa   
 8ba:	74 65                	je     921 <sysEnter_Vector-0x12f6df>
 8bc:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
 8bf:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8c0:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 8c3:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 8c5:	61                   	popa   
 8c6:	74 65                	je     92d <sysEnter_Vector-0x12f6d3>
 8c8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 8cb:	72 63                	jb     930 <sysEnter_Vector-0x12f6d0>
 8cd:	61                   	popa   
 8ce:	74 49                	je     919 <sysEnter_Vector-0x12f6e7>
 8d0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 8d3:	72 63                	jb     938 <sysEnter_Vector-0x12f6c8>
 8d5:	61                   	popa   
 8d6:	74 00                	je     8d8 <sysEnter_Vector-0x12f728>
 8d8:	73 72                	jae    94c <sysEnter_Vector-0x12f6b4>
 8da:	63 2f                	arpl   WORD PTR [edi],bp
 8dc:	73 74                	jae    952 <sysEnter_Vector-0x12f6ae>
 8de:	72 69                	jb     949 <sysEnter_Vector-0x12f6b7>
 8e0:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8e1:	67 73 2f             	addr16 jae 913 <sysEnter_Vector-0x12f6ed>
 8e4:	73 74                	jae    95a <sysEnter_Vector-0x12f6a6>
 8e6:	72 63                	jb     94b <sysEnter_Vector-0x12f6b5>
 8e8:	61                   	popa   
 8e9:	74 2e                	je     919 <sysEnter_Vector-0x12f6e7>
 8eb:	63 00                	arpl   WORD PTR [eax],ax
 8ed:	73 74                	jae    963 <sysEnter_Vector-0x12f69d>
 8ef:	72 63                	jb     954 <sysEnter_Vector-0x12f6ac>
 8f1:	6d                   	ins    DWORD PTR es:[edi],dx
 8f2:	70 00                	jo     8f4 <sysEnter_Vector-0x12f70c>
 8f4:	73 72                	jae    968 <sysEnter_Vector-0x12f698>
 8f6:	63 2f                	arpl   WORD PTR [edi],bp
 8f8:	73 74                	jae    96e <sysEnter_Vector-0x12f692>
 8fa:	72 69                	jb     965 <sysEnter_Vector-0x12f69b>
 8fc:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8fd:	67 73 2f             	addr16 jae 92f <sysEnter_Vector-0x12f6d1>
 900:	73 74                	jae    976 <sysEnter_Vector-0x12f68a>
 902:	72 63                	jb     967 <sysEnter_Vector-0x12f699>
 904:	6d                   	ins    DWORD PTR es:[edi],dx
 905:	70 2e                	jo     935 <sysEnter_Vector-0x12f6cb>
 907:	63 00                	arpl   WORD PTR [eax],ax
 909:	73 74                	jae    97f <sysEnter_Vector-0x12f681>
 90b:	72 63                	jb     970 <sysEnter_Vector-0x12f690>
 90d:	70 79                	jo     988 <sysEnter_Vector-0x12f678>
 90f:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
 912:	75 6e                	jne    982 <sysEnter_Vector-0x12f67e>
 914:	74 00                	je     916 <sysEnter_Vector-0x12f6ea>
 916:	73 74                	jae    98c <sysEnter_Vector-0x12f674>
 918:	72 63                	jb     97d <sysEnter_Vector-0x12f683>
 91a:	70 79                	jo     995 <sysEnter_Vector-0x12f66b>
 91c:	63 00                	arpl   WORD PTR [eax],ax
 91e:	73 74                	jae    994 <sysEnter_Vector-0x12f66c>
 920:	72 63                	jb     985 <sysEnter_Vector-0x12f67b>
 922:	70 79                	jo     99d <sysEnter_Vector-0x12f663>
 924:	49                   	dec    ecx
 925:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 928:	63 2f                	arpl   WORD PTR [edi],bp
 92a:	73 74                	jae    9a0 <sysEnter_Vector-0x12f660>
 92c:	72 69                	jb     997 <sysEnter_Vector-0x12f669>
 92e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 92f:	67 73 2f             	addr16 jae 961 <sysEnter_Vector-0x12f69f>
 932:	73 74                	jae    9a8 <sysEnter_Vector-0x12f658>
 934:	72 63                	jb     999 <sysEnter_Vector-0x12f667>
 936:	70 79                	jo     9b1 <sysEnter_Vector-0x12f64f>
 938:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 93b:	63 68 65             	arpl   WORD PTR [eax+0x65],bp
 93e:	63 6b 5f             	arpl   WORD PTR [ebx+0x5f],bp
 941:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
 948:	74 
 949:	72 69                	jb     9b4 <sysEnter_Vector-0x12f64c>
 94b:	73 6e                	jae    9bb <sysEnter_Vector-0x12f645>
 94d:	75 6d                	jne    9bc <sysEnter_Vector-0x12f644>
 94f:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 952:	63 2f                	arpl   WORD PTR [edi],bp
 954:	73 74                	jae    9ca <sysEnter_Vector-0x12f636>
 956:	72 69                	jb     9c1 <sysEnter_Vector-0x12f63f>
 958:	6e                   	outs   dx,BYTE PTR ds:[esi]
 959:	67 73 2f             	addr16 jae 98b <sysEnter_Vector-0x12f675>
 95c:	73 74                	jae    9d2 <sysEnter_Vector-0x12f62e>
 95e:	72 69                	jb     9c9 <sysEnter_Vector-0x12f637>
 960:	73 6e                	jae    9d0 <sysEnter_Vector-0x12f630>
 962:	75 6d                	jne    9d1 <sysEnter_Vector-0x12f62f>
 964:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 967:	73 74                	jae    9dd <sysEnter_Vector-0x12f623>
 969:	72 6c                	jb     9d7 <sysEnter_Vector-0x12f629>
 96b:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 96d:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 970:	63 2f                	arpl   WORD PTR [edi],bp
 972:	73 74                	jae    9e8 <sysEnter_Vector-0x12f618>
 974:	72 69                	jb     9df <sysEnter_Vector-0x12f621>
 976:	6e                   	outs   dx,BYTE PTR ds:[esi]
 977:	67 73 2f             	addr16 jae 9a9 <sysEnter_Vector-0x12f657>
 97a:	73 74                	jae    9f0 <sysEnter_Vector-0x12f610>
 97c:	72 6c                	jb     9ea <sysEnter_Vector-0x12f616>
 97e:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 980:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 983:	73 74                	jae    9f9 <sysEnter_Vector-0x12f607>
 985:	72 6c                	jb     9f3 <sysEnter_Vector-0x12f60d>
 987:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 989:	49                   	dec    ecx
 98a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 98d:	72 6e                	jb     9fd <sysEnter_Vector-0x12f603>
 98f:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 992:	49                   	dec    ecx
 993:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 996:	72 6e                	jb     a06 <sysEnter_Vector-0x12f5fa>
 998:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 99b:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 99e:	63 2f                	arpl   WORD PTR [edi],bp
 9a0:	73 74                	jae    a16 <sysEnter_Vector-0x12f5ea>
 9a2:	72 69                	jb     a0d <sysEnter_Vector-0x12f5f3>
 9a4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9a5:	67 73 2f             	addr16 jae 9d7 <sysEnter_Vector-0x12f629>
 9a8:	73 74                	jae    a1e <sysEnter_Vector-0x12f5e2>
 9aa:	72 6e                	jb     a1a <sysEnter_Vector-0x12f5e6>
 9ac:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 9af:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9b2:	73 72                	jae    a26 <sysEnter_Vector-0x12f5da>
 9b4:	63 2f                	arpl   WORD PTR [edi],bp
 9b6:	73 74                	jae    a2c <sysEnter_Vector-0x12f5d4>
 9b8:	72 69                	jb     a23 <sysEnter_Vector-0x12f5dd>
 9ba:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9bb:	67 73 2f             	addr16 jae 9ed <sysEnter_Vector-0x12f613>
 9be:	73 74                	jae    a34 <sysEnter_Vector-0x12f5cc>
 9c0:	72 6e                	jb     a30 <sysEnter_Vector-0x12f5d0>
 9c2:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 9c5:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9c8:	73 74                	jae    a3e <sysEnter_Vector-0x12f5c2>
 9ca:	72 6e                	jb     a3a <sysEnter_Vector-0x12f5c6>
 9cc:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 9cf:	49                   	dec    ecx
 9d0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 9d3:	72 6e                	jb     a43 <sysEnter_Vector-0x12f5bd>
 9d5:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 9d8:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 9db:	63 2f                	arpl   WORD PTR [edi],bp
 9dd:	73 74                	jae    a53 <sysEnter_Vector-0x12f5ad>
 9df:	72 69                	jb     a4a <sysEnter_Vector-0x12f5b6>
 9e1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9e2:	67 73 2f             	addr16 jae a14 <sysEnter_Vector-0x12f5ec>
 9e5:	73 74                	jae    a5b <sysEnter_Vector-0x12f5a5>
 9e7:	72 6f                	jb     a58 <sysEnter_Vector-0x12f5a8>
 9e9:	75 6c                	jne    a57 <sysEnter_Vector-0x12f5a9>
 9eb:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9ee:	63 75 74             	arpl   WORD PTR [ebp+0x74],si
 9f1:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9f2:	66                   	data16
 9f3:	66                   	data16
 9f4:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
 9f7:	74 6c                	je     a65 <sysEnter_Vector-0x12f59b>
 9f9:	69 6d 00 73 74 72 74 	imul   ebp,DWORD PTR [ebp+0x0],0x74727473
 a00:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a01:	75 6c                	jne    a6f <sysEnter_Vector-0x12f591>
 a03:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
 a06:	64                   	fs
 a07:	70 74                	jo     a7d <sysEnter_Vector-0x12f583>
 a09:	72 00                	jb     a0b <sysEnter_Vector-0x12f5f5>
 a0b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a0c:	70 74                	jo     a82 <sysEnter_Vector-0x12f57e>
 a0e:	72 00                	jb     a10 <sysEnter_Vector-0x12f5f0>
 a10:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
 a13:	65 00 73 72          	add    BYTE PTR gs:[ebx+0x72],dh
 a17:	63 2f                	arpl   WORD PTR [edi],bp
 a19:	73 74                	jae    a8f <sysEnter_Vector-0x12f571>
 a1b:	72 69                	jb     a86 <sysEnter_Vector-0x12f57a>
 a1d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a1e:	67 73 2f             	addr16 jae a50 <sysEnter_Vector-0x12f5b0>
 a21:	73 74                	jae    a97 <sysEnter_Vector-0x12f569>
 a23:	72 70                	jb     a95 <sysEnter_Vector-0x12f56b>
 a25:	61                   	popa   
 a26:	72 74                	jb     a9c <sysEnter_Vector-0x12f564>
 a28:	73 2e                	jae    a58 <sysEnter_Vector-0x12f5a8>
 a2a:	63 00                	arpl   WORD PTR [eax],ax
 a2c:	73 74                	jae    aa2 <sysEnter_Vector-0x12f55e>
 a2e:	72 6c                	jb     a9c <sysEnter_Vector-0x12f564>
 a30:	65                   	gs
 a31:	66                   	data16
 a32:	74 00                	je     a34 <sysEnter_Vector-0x12f5cc>
 a34:	73 72                	jae    aa8 <sysEnter_Vector-0x12f558>
 a36:	63 2f                	arpl   WORD PTR [edi],bp
 a38:	73 74                	jae    aae <sysEnter_Vector-0x12f552>
 a3a:	72 69                	jb     aa5 <sysEnter_Vector-0x12f55b>
 a3c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a3d:	67 73 2f             	addr16 jae a6f <sysEnter_Vector-0x12f591>
 a40:	73 74                	jae    ab6 <sysEnter_Vector-0x12f54a>
 a42:	72 74                	jb     ab8 <sysEnter_Vector-0x12f548>
 a44:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a45:	6c                   	ins    BYTE PTR es:[edi],dx
 a46:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a49:	73 74                	jae    abf <sysEnter_Vector-0x12f541>
 a4b:	72 74                	jb     ac1 <sysEnter_Vector-0x12f53f>
 a4d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a4e:	6c                   	ins    BYTE PTR es:[edi],dx
 a4f:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 a52:	70 75                	jo     ac9 <sysEnter_Vector-0x12f537>
 a54:	74 00                	je     a56 <sysEnter_Vector-0x12f5aa>
 a56:	73 72                	jae    aca <sysEnter_Vector-0x12f536>
 a58:	63 2f                	arpl   WORD PTR [edi],bp
 a5a:	73 74                	jae    ad0 <sysEnter_Vector-0x12f530>
 a5c:	72 69                	jb     ac7 <sysEnter_Vector-0x12f539>
 a5e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a5f:	67 73 2f             	addr16 jae a91 <sysEnter_Vector-0x12f56f>
 a62:	73 74                	jae    ad8 <sysEnter_Vector-0x12f528>
 a64:	72 74                	jb     ada <sysEnter_Vector-0x12f526>
 a66:	72 69                	jb     ad1 <sysEnter_Vector-0x12f52f>
 a68:	6d                   	ins    DWORD PTR es:[edi],dx
 a69:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a6c:	73 74                	jae    ae2 <sysEnter_Vector-0x12f51e>
 a6e:	72 74                	jb     ae4 <sysEnter_Vector-0x12f51c>
 a70:	72 69                	jb     adb <sysEnter_Vector-0x12f525>
 a72:	6d                   	ins    DWORD PTR es:[edi],dx
 a73:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a76:	72 74                	jb     aec <sysEnter_Vector-0x12f514>
 a78:	72 69                	jb     ae3 <sysEnter_Vector-0x12f51d>
 a7a:	6d                   	ins    DWORD PTR es:[edi],dx
 a7b:	49                   	dec    ecx
 a7c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a7f:	72 73                	jb     af4 <sysEnter_Vector-0x12f50c>
 a81:	74 72                	je     af5 <sysEnter_Vector-0x12f50b>
 a83:	49                   	dec    ecx
 a84:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a87:	63 2f                	arpl   WORD PTR [edi],bp
 a89:	73 74                	jae    aff <sysEnter_Vector-0x12f501>
 a8b:	72 73                	jb     b00 <sysEnter_Vector-0x12f500>
 a8d:	74 72                	je     b01 <sysEnter_Vector-0x12f4ff>
 a8f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a92:	73 74                	jae    b08 <sysEnter_Vector-0x12f4f8>
 a94:	72 73                	jb     b09 <sysEnter_Vector-0x12f4f7>
 a96:	74 72                	je     b0a <sysEnter_Vector-0x12f4f6>
 a98:	00 72 63             	add    BYTE PTR [edx+0x63],dh
 a9b:	73 69                	jae    b06 <sysEnter_Vector-0x12f4fa>
 a9d:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
 aa1:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
 aa4:	72 69                	jb     b0f <sysEnter_Vector-0x12f4f1>
 aa6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 aa7:	67 00 73 72          	add    BYTE PTR [bp+di+0x72],dh
 aab:	63 2f                	arpl   WORD PTR [edi],bp
 aad:	74 69                	je     b18 <sysEnter_Vector-0x12f4e8>
 aaf:	6d                   	ins    DWORD PTR es:[edi],dx
 ab0:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
 ab4:	6c                   	ins    BYTE PTR es:[edi],dx
 ab5:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ab6:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 ab9:	74 69                	je     b24 <sysEnter_Vector-0x12f4dc>
 abb:	6d                   	ins    DWORD PTR es:[edi],dx
 abc:	65 00 74 6d 5f       	add    BYTE PTR gs:[ebp+ebp*2+0x5f],dh
 ac1:	68 6f 75 72 00       	push   0x72756f
 ac6:	67                   	addr16
 ac7:	65                   	gs
 ac8:	74 74                	je     b3e <sysEnter_Vector-0x12f4c2>
 aca:	69 63 6b 73 00 5f 64 	imul   esp,DWORD PTR [ebx+0x6b],0x645f0073
 ad1:	61                   	popa   
 ad2:	79 6c                	jns    b40 <sysEnter_Vector-0x12f4c0>
 ad4:	69 67 68 74 00 5f 74 	imul   esp,DWORD PTR [edi+0x68],0x745f0074
 adb:	7a 6e                	jp     b4b <sysEnter_Vector-0x12f4b5>
 add:	61                   	popa   
 ade:	6d                   	ins    DWORD PTR es:[edi],dx
 adf:	65 00 67 6d          	add    BYTE PTR gs:[edi+0x6d],ah
 ae3:	74 69                	je     b4e <sysEnter_Vector-0x12f4b2>
 ae5:	6d                   	ins    DWORD PTR es:[edi],dx
 ae6:	65                   	gs
 ae7:	5f                   	pop    edi
 ae8:	72 00                	jb     aea <sysEnter_Vector-0x12f516>
 aea:	74 69                	je     b55 <sysEnter_Vector-0x12f4ab>
 aec:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
 aef:	54                   	push   esp
 af0:	6f                   	outs   dx,DWORD PTR ds:[esi]
 af1:	57                   	push   edi
 af2:	61                   	popa   
 af3:	69 74 00 74 6d 5f 6d 	imul   esi,DWORD PTR [eax+eax*1+0x74],0x6f6d5f6d
 afa:	6f 
 afb:	6e                   	outs   dx,BYTE PTR ds:[esi]
 afc:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 b00:	79 65                	jns    b67 <sysEnter_Vector-0x12f499>
 b02:	61                   	popa   
 b03:	72 00                	jb     b05 <sysEnter_Vector-0x12f4fb>
 b05:	6d                   	ins    DWORD PTR es:[edi],dx
 b06:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b07:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b08:	74 68                	je     b72 <sysEnter_Vector-0x12f48e>
 b0a:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 b0d:	74 74                	je     b83 <sysEnter_Vector-0x12f47d>
 b0f:	69 6d 65 00 74 6d 5f 	imul   ebp,DWORD PTR [ebp+0x65],0x5f6d7400
 b16:	69 73 64 73 74 00 64 	imul   esi,DWORD PTR [ebx+0x64],0x64007473
 b1d:	61                   	popa   
 b1e:	79 6e                	jns    b8e <sysEnter_Vector-0x12f472>
 b20:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b21:	00 67 6d             	add    BYTE PTR [edi+0x6d],ah
 b24:	74 69                	je     b8f <sysEnter_Vector-0x12f471>
 b26:	6d                   	ins    DWORD PTR es:[edi],dx
 b27:	65                   	gs
 b28:	5f                   	pop    edi
 b29:	72 49                	jb     b74 <sysEnter_Vector-0x12f48c>
 b2b:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 b2f:	6d                   	ins    DWORD PTR es:[edi],dx
 b30:	69 6e 00 74 6d 5f 79 	imul   ebp,DWORD PTR [esi+0x0],0x795f6d74
 b37:	64                   	fs
 b38:	61                   	popa   
 b39:	79 00                	jns    b3b <sysEnter_Vector-0x12f4c5>
 b3b:	6c                   	ins    BYTE PTR es:[edi],dx
 b3c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b3d:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 b40:	54                   	push   esp
 b41:	69 6d 65 00 74 6d 62 	imul   ebp,DWORD PTR [ebp+0x65],0x626d7400
 b48:	75 66                	jne    bb0 <sysEnter_Vector-0x12f450>
 b4a:	00 74 69 6d          	add    BYTE PTR [ecx+ebp*2+0x6d],dh
 b4e:	65                   	gs
 b4f:	5f                   	pop    edi
 b50:	74 00                	je     b52 <sysEnter_Vector-0x12f4ae>
 b52:	6c                   	ins    BYTE PTR es:[edi],dx
 b53:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b54:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 b57:	74 69                	je     bc2 <sysEnter_Vector-0x12f43e>
 b59:	6d                   	ins    DWORD PTR es:[edi],dx
 b5a:	65                   	gs
 b5b:	5f                   	pop    edi
 b5c:	72 00                	jb     b5e <sysEnter_Vector-0x12f4a2>
 b5e:	64                   	fs
 b5f:	61                   	popa   
 b60:	79 63                	jns    bc5 <sysEnter_Vector-0x12f43b>
 b62:	6c                   	ins    BYTE PTR es:[edi],dx
 b63:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b64:	63 6b 00             	arpl   WORD PTR [ebx+0x0],bp
 b67:	6d                   	ins    DWORD PTR es:[edi],dx
 b68:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
 b6d:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 b71:	67 6d                	ins    DWORD PTR es:[di],dx
 b73:	74 6f                	je     be4 <sysEnter_Vector-0x12f41c>
 b75:	66                   	data16
 b76:	66                   	data16
 b77:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 b7b:	77 64                	ja     be1 <sysEnter_Vector-0x12f41f>
 b7d:	61                   	popa   
 b7e:	79 00                	jns    b80 <sysEnter_Vector-0x12f480>
 b80:	5f                   	pop    edi
 b81:	79 74                	jns    bf7 <sysEnter_Vector-0x12f409>
 b83:	61                   	popa   
 b84:	62 00                	bound  eax,QWORD PTR [eax]
 b86:	74 6d                	je     bf5 <sysEnter_Vector-0x12f40b>
 b88:	5f                   	pop    edi
 b89:	6d                   	ins    DWORD PTR es:[edi],dx
 b8a:	64                   	fs
 b8b:	61                   	popa   
 b8c:	79 00                	jns    b8e <sysEnter_Vector-0x12f472>
 b8e:	74 6d                	je     bfd <sysEnter_Vector-0x12f403>
 b90:	5f                   	pop    edi
 b91:	73 65                	jae    bf8 <sysEnter_Vector-0x12f408>
 b93:	63 00                	arpl   WORD PTR [eax],ax
 b95:	74 6d                	je     c04 <sysEnter_Vector-0x12f3fc>
 b97:	5f                   	pop    edi
 b98:	7a 6f                	jp     c09 <sysEnter_Vector-0x12f3f7>
 b9a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b9b:	65 00 74 69 6d       	add    BYTE PTR gs:[ecx+ebp*2+0x6d],dh
 ba0:	65                   	gs
 ba1:	72 00                	jb     ba3 <sysEnter_Vector-0x12f45d>
 ba3:	6c                   	ins    BYTE PTR es:[edi],dx
 ba4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ba5:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 ba8:	74 69                	je     c13 <sysEnter_Vector-0x12f3ed>
 baa:	6d                   	ins    DWORD PTR es:[edi],dx
 bab:	65                   	gs
 bac:	5f                   	pop    edi
 bad:	72 49                	jb     bf8 <sysEnter_Vector-0x12f408>
 baf:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
 bb2:	73 74                	jae    c28 <sysEnter_Vector-0x12f3d8>
 bb4:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
 bb7:	73 00                	jae    bb9 <sysEnter_Vector-0x12f447>
 bb9:	6f                   	outs   dx,DWORD PTR ds:[esi]
 bba:	76 65                	jbe    c21 <sysEnter_Vector-0x12f3df>
 bbc:	72 66                	jb     c24 <sysEnter_Vector-0x12f3dc>
 bbe:	6c                   	ins    BYTE PTR es:[edi],dx
 bbf:	6f                   	outs   dx,DWORD PTR ds:[esi]
 bc0:	77 00                	ja     bc2 <sysEnter_Vector-0x12f43e>

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    edi
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
   5:	28 47 4e             	sub    BYTE PTR [edi+0x4e],al
   8:	55                   	push   ebp
   9:	29 20                	sub    DWORD PTR [eax],esp
   b:	35 2e 33 2e 30       	xor    eax,0x302e332e
	...
