
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

9f000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"
#include "common.h"

VISIBLE char *strchr(const char *s, int c)
{
9f000000:	55                   	push   ebp
9f000001:	89 e5                	mov    ebp,esp
9f000003:	e8 da 4f 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f000008:	05 34 7c 00 00       	add    eax,0x7c34
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
    while (*s != (char)c)
9f00000d:	eb 17                	jmp    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
        if (!*s++)
9f00000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000012:	8d 50 01             	lea    edx,[eax+0x1]
9f000015:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000018:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00001b:	84 c0                	test   al,al
9f00001d:	75 07                	jne    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
            return 0;
9f00001f:	b8 00 00 00 00       	mov    eax,0x0
9f000024:	eb 10                	jmp    9f000036 <strchr+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
#include "strings.h"
#include "common.h"

VISIBLE char *strchr(const char *s, int c)
{
    while (*s != (char)c)
9f000026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00002c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00002f:	38 d0                	cmp    al,dl
9f000031:	75 dc                	jne    9f00000f <strchr+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
        if (!*s++)
            return 0;
    return (char *)s;
9f000033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:15
}
9f000036:	5d                   	pop    ebp
9f000037:	c3                   	ret    

9f000038 <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18

char *strchrI(const char *s, int c)
{
9f000038:	55                   	push   ebp
9f000039:	89 e5                	mov    ebp,esp
9f00003b:	e8 a2 4f 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f000040:	05 fc 7b 00 00       	add    eax,0x7bfc
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
    while (*s != (char)c)
9f000045:	eb 17                	jmp    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
        if (!*s++)
9f000047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00004a:	8d 50 01             	lea    edx,[eax+0x1]
9f00004d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000050:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000053:	84 c0                	test   al,al
9f000055:	75 07                	jne    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
            return 0;
9f000057:	b8 00 00 00 00       	mov    eax,0x0
9f00005c:	eb 10                	jmp    9f00006e <strchrI+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
    return (char *)s;
}

char *strchrI(const char *s, int c)
{
    while (*s != (char)c)
9f00005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000061:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000064:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000067:	38 d0                	cmp    al,dl
9f000069:	75 dc                	jne    9f000047 <strchrI+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
        if (!*s++)
            return 0;
    return (char *)s;
9f00006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:23
}
9f00006e:	5d                   	pop    ebp
9f00006f:	c3                   	ret    

9f000070 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:39

#include "strings.h"
#include "common.h"

VISIBLE int strcspn(char* string, char* chars)
{
9f000070:	55                   	push   ebp
9f000071:	89 e5                	mov    ebp,esp
9f000073:	56                   	push   esi
9f000074:	53                   	push   ebx
9f000075:	e8 68 4f 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f00007a:	05 c2 7b 00 00       	add    eax,0x7bc2
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f00007f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f000082:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000085:	89 c1                	mov    ecx,eax
9f000087:	eb 29                	jmp    9f0000b2 <strcspn+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	for (p = chars; *p != 0; p++) {
9f000089:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f00008c:	eb 15                	jmp    9f0000a3 <strcspn+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
	    if (c == *p) {
9f00008e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f000091:	38 c8                	cmp    al,cl
9f000093:	75 0b                	jne    9f0000a0 <strcspn+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:45
		return s-string;
9f000095:	89 da                	mov    edx,ebx
9f000097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00009a:	29 c2                	sub    edx,eax
9f00009c:	89 d0                	mov    eax,edx
9f00009e:	eb 21                	jmp    9f0000c1 <strcspn+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43 (discriminator 2)
VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000a0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43 (discriminator 1)
9f0000a3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000a6:	84 c0                	test   al,al
9f0000a8:	75 e4                	jne    9f00008e <strcspn+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)

VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000aa:	83 c3 01             	add    ebx,0x1
9f0000ad:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000b0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
9f0000b2:	89 c8                	mov    eax,ecx
9f0000b4:	84 c0                	test   al,al
9f0000b6:	75 d1                	jne    9f000089 <strcspn+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f0000b8:	89 da                	mov    edx,ebx
9f0000ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000bd:	29 c2                	sub    edx,eax
9f0000bf:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:50
}
9f0000c1:	5b                   	pop    ebx
9f0000c2:	5e                   	pop    esi
9f0000c3:	5d                   	pop    ebp
9f0000c4:	c3                   	ret    

9f0000c5 <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:53

int strcspnI(char* string, char* chars)
{
9f0000c5:	55                   	push   ebp
9f0000c6:	89 e5                	mov    ebp,esp
9f0000c8:	56                   	push   esi
9f0000c9:	53                   	push   ebx
9f0000ca:	e8 13 4f 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0000cf:	05 6d 7b 00 00       	add    eax,0x7b6d
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f0000d7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000da:	89 c1                	mov    ecx,eax
9f0000dc:	eb 29                	jmp    9f000107 <strcspnI+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	for (p = chars; *p != 0; p++) {
9f0000de:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f0000e1:	eb 15                	jmp    9f0000f8 <strcspnI+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
	    if (c == *p) {
9f0000e3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000e6:	38 c8                	cmp    al,cl
9f0000e8:	75 0b                	jne    9f0000f5 <strcspnI+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:59
		return s-string;
9f0000ea:	89 da                	mov    edx,ebx
9f0000ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000ef:	29 c2                	sub    edx,eax
9f0000f1:	89 d0                	mov    eax,edx
9f0000f3:	eb 21                	jmp    9f000116 <strcspnI+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57 (discriminator 2)
int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57 (discriminator 1)
9f0000f8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000fb:	84 c0                	test   al,al
9f0000fd:	75 e4                	jne    9f0000e3 <strcspnI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)

int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000ff:	83 c3 01             	add    ebx,0x1
9f000102:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000105:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
9f000107:	89 c8                	mov    eax,ecx
9f000109:	84 c0                	test   al,al
9f00010b:	75 d1                	jne    9f0000de <strcspnI+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f00010d:	89 da                	mov    edx,ebx
9f00010f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000112:	29 c2                	sub    edx,eax
9f000114:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:64
}
9f000116:	5b                   	pop    ebx
9f000117:	5e                   	pop    esi
9f000118:	5d                   	pop    ebp
9f000119:	c3                   	ret    
9f00011a:	66 90                	xchg   ax,ax

9f00011c <strtokI>:
strtokI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:43

int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

char * strtokI(char* s, /*const*/ char* delim)
{
9f00011c:	55                   	push   ebp
9f00011d:	89 e5                	mov    ebp,esp
9f00011f:	56                   	push   esi
9f000120:	53                   	push   ebx
9f000121:	e8 c0 4e 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f000126:	81 c3 16 7b 00 00    	add    ebx,0x7b16
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:47
    static char *lasts;
    register int ch;

    if (s == 0)
9f00012c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000130:	75 09                	jne    9f00013b <strtokI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
	s = lasts;
9f000132:	8b 83 28 00 00 00    	mov    eax,DWORD PTR [ebx+0x28]
9f000138:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    do {
	if ((ch = *s++) == '\0')
9f00013b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00013e:	8d 50 01             	lea    edx,[eax+0x1]
9f000141:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000147:	0f be f0             	movsx  esi,al
9f00014a:	85 f6                	test   esi,esi
9f00014c:	75 07                	jne    9f000155 <strtokI+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
	    return 0;
9f00014e:	b8 00 00 00 00       	mov    eax,0x0
9f000153:	eb 57                	jmp    9f0001ac <strtokI+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    } while (strchrI(delim, ch));
9f000155:	83 ec 08             	sub    esp,0x8
9f000158:	56                   	push   esi
9f000159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00015c:	e8 d7 fe ff ff       	call   9f000038 <strchrI>
9f000161:	83 c4 10             	add    esp,0x10
9f000164:	85 c0                	test   eax,eax
9f000166:	75 d3                	jne    9f00013b <strtokI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    --s;
9f000168:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
    lasts = s + strcspnI(s, delim);
9f00016c:	83 ec 08             	sub    esp,0x8
9f00016f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000175:	e8 4b ff ff ff       	call   9f0000c5 <strcspnI>
9f00017a:	83 c4 10             	add    esp,0x10
9f00017d:	89 c2                	mov    edx,eax
9f00017f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000182:	01 d0                	add    eax,edx
9f000184:	89 83 28 00 00 00    	mov    DWORD PTR [ebx+0x28],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    if (*lasts != 0)
9f00018a:	8b 83 28 00 00 00    	mov    eax,DWORD PTR [ebx+0x28]
9f000190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000193:	84 c0                	test   al,al
9f000195:	74 12                	je     9f0001a9 <strtokI+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
	*lasts++ = 0;
9f000197:	8b 83 28 00 00 00    	mov    eax,DWORD PTR [ebx+0x28]
9f00019d:	8d 50 01             	lea    edx,[eax+0x1]
9f0001a0:	89 93 28 00 00 00    	mov    DWORD PTR [ebx+0x28],edx
9f0001a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:57
    return s;
9f0001a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:58
}
9f0001ac:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0001af:	5b                   	pop    ebx
9f0001b0:	5e                   	pop    esi
9f0001b1:	5d                   	pop    ebp
9f0001b2:	c3                   	ret    

9f0001b3 <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:61

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
9f0001b3:	55                   	push   ebp
9f0001b4:	89 e5                	mov    ebp,esp
9f0001b6:	56                   	push   esi
9f0001b7:	53                   	push   ebx
9f0001b8:	e8 29 4e 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f0001bd:	81 c3 7f 7a 00 00    	add    ebx,0x7a7f
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:65
    static char *lasts;
    register int ch;

    if (s == 0)
9f0001c3:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0001c7:	75 09                	jne    9f0001d2 <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:66
	s = lasts;
9f0001c9:	8b 83 2c 00 00 00    	mov    eax,DWORD PTR [ebx+0x2c]
9f0001cf:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:68
    do {
	if ((ch = *s++) == '\0')
9f0001d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0001d5:	8d 50 01             	lea    edx,[eax+0x1]
9f0001d8:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0001db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0001de:	0f be f0             	movsx  esi,al
9f0001e1:	85 f6                	test   esi,esi
9f0001e3:	75 07                	jne    9f0001ec <strtok+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:69
	    return 0;
9f0001e5:	b8 00 00 00 00       	mov    eax,0x0
9f0001ea:	eb 57                	jmp    9f000243 <strtok+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:70
    } while (strchrI(delim, ch));
9f0001ec:	83 ec 08             	sub    esp,0x8
9f0001ef:	56                   	push   esi
9f0001f0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0001f3:	e8 40 fe ff ff       	call   9f000038 <strchrI>
9f0001f8:	83 c4 10             	add    esp,0x10
9f0001fb:	85 c0                	test   eax,eax
9f0001fd:	75 d3                	jne    9f0001d2 <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:71
    --s;
9f0001ff:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:72
    lasts = s + strcspnI(s, delim);
9f000203:	83 ec 08             	sub    esp,0x8
9f000206:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000209:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00020c:	e8 b4 fe ff ff       	call   9f0000c5 <strcspnI>
9f000211:	83 c4 10             	add    esp,0x10
9f000214:	89 c2                	mov    edx,eax
9f000216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000219:	01 d0                	add    eax,edx
9f00021b:	89 83 2c 00 00 00    	mov    DWORD PTR [ebx+0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:73
    if (*lasts != 0)
9f000221:	8b 83 2c 00 00 00    	mov    eax,DWORD PTR [ebx+0x2c]
9f000227:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00022a:	84 c0                	test   al,al
9f00022c:	74 12                	je     9f000240 <strtok+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:74
	*lasts++ = 0;
9f00022e:	8b 83 2c 00 00 00    	mov    eax,DWORD PTR [ebx+0x2c]
9f000234:	8d 50 01             	lea    edx,[eax+0x1]
9f000237:	89 93 2c 00 00 00    	mov    DWORD PTR [ebx+0x2c],edx
9f00023d:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:75
    return s;
9f000240:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:76
9f000243:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000246:	5b                   	pop    ebx
9f000247:	5e                   	pop    esi
9f000248:	5d                   	pop    ebp
9f000249:	c3                   	ret    
9f00024a:	66 90                	xchg   ax,ax

9f00024c <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:11

#include "common.h"
#include "strings.h"

void reverseI(char s[])
 {
9f00024c:	55                   	push   ebp
9f00024d:	89 e5                	mov    ebp,esp
9f00024f:	53                   	push   ebx
9f000250:	83 ec 14             	sub    esp,0x14
9f000253:	e8 8a 4d 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f000258:	05 e4 79 00 00       	add    eax,0x79e4
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f00025d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f000264:	83 ec 0c             	sub    esp,0xc
9f000267:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00026a:	89 c3                	mov    ebx,eax
9f00026c:	e8 ff 37 00 00       	call   9f003a70 <strlenI>
9f000271:	83 c4 10             	add    esp,0x10
9f000274:	83 e8 01             	sub    eax,0x1
9f000277:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00027a:	eb 39                	jmp    9f0002b5 <reverseI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         c = s[i];
9f00027c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00027f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000282:	01 d0                	add    eax,edx
9f000284:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000287:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[i] = s[j];
9f00028a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00028d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000290:	01 c2                	add    edx,eax
9f000292:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f000295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000298:	01 c8                	add    eax,ecx
9f00029a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00029d:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:18 (discriminator 3)
         s[j] = c;
9f00029f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0002a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002a5:	01 c2                	add    edx,eax
9f0002a7:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
9f0002ab:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
void reverseI(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f0002ad:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
9f0002b1:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 1)
9f0002b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0002b8:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0002bb:	7c bf                	jl     9f00027c <reverseI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:20
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
9f0002bd:	90                   	nop
9f0002be:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0002c1:	c9                   	leave  
9f0002c2:	c3                   	ret    

9f0002c3 <itoa>:
itoa():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:23

VISIBLE void itoa(int n, char s[])
 {
9f0002c3:	55                   	push   ebp
9f0002c4:	89 e5                	mov    ebp,esp
9f0002c6:	53                   	push   ebx
9f0002c7:	83 ec 14             	sub    esp,0x14
9f0002ca:	e8 13 4d 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0002cf:	05 6d 79 00 00       	add    eax,0x796d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f0002d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002d7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0002da:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0002de:	79 03                	jns    9f0002e3 <itoa+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
         n = -n;          /* make n positive */
9f0002e0:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:28
     i = 0;
9f0002e3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f0002ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0002ed:	8d 50 01             	lea    edx,[eax+0x1]
9f0002f0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0002f3:	89 c2                	mov    edx,eax
9f0002f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0002f8:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f0002fb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0002fe:	ba 67 66 66 66       	mov    edx,0x66666667
9f000303:	89 c8                	mov    eax,ecx
9f000305:	f7 ea                	imul   edx
9f000307:	c1 fa 02             	sar    edx,0x2
9f00030a:	89 c8                	mov    eax,ecx
9f00030c:	c1 f8 1f             	sar    eax,0x1f
9f00030f:	29 c2                	sub    edx,eax
9f000311:	89 d0                	mov    eax,edx
9f000313:	c1 e0 02             	shl    eax,0x2
9f000316:	01 d0                	add    eax,edx
9f000318:	01 c0                	add    eax,eax
9f00031a:	29 c1                	sub    ecx,eax
9f00031c:	89 ca                	mov    edx,ecx
9f00031e:	89 d0                	mov    eax,edx
9f000320:	83 c0 30             	add    eax,0x30
9f000323:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f000325:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000328:	ba 67 66 66 66       	mov    edx,0x66666667
9f00032d:	89 c8                	mov    eax,ecx
9f00032f:	f7 ea                	imul   edx
9f000331:	c1 fa 02             	sar    edx,0x2
9f000334:	89 c8                	mov    eax,ecx
9f000336:	c1 f8 1f             	sar    eax,0x1f
9f000339:	29 c2                	sub    edx,eax
9f00033b:	89 d0                	mov    eax,edx
9f00033d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f000340:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000344:	7f a4                	jg     9f0002ea <itoa+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
     if (sign < 0)
9f000346:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00034a:	79 13                	jns    9f00035f <itoa+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
         s[i++] = '-';
9f00034c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00034f:	8d 50 01             	lea    edx,[eax+0x1]
9f000352:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000355:	89 c2                	mov    edx,eax
9f000357:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00035a:	01 d0                	add    eax,edx
9f00035c:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     s[i] = '\0';
9f00035f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000362:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000365:	01 d0                	add    eax,edx
9f000367:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
     reverseI(s);
9f00036a:	83 ec 0c             	sub    esp,0xc
9f00036d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000370:	e8 d7 fe ff ff       	call   9f00024c <reverseI>
9f000375:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:36
 }
9f000378:	90                   	nop
9f000379:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00037c:	c9                   	leave  
9f00037d:	c3                   	ret    

9f00037e <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:39

 char *itoaI(int n, char s[])
 {
9f00037e:	55                   	push   ebp
9f00037f:	89 e5                	mov    ebp,esp
9f000381:	53                   	push   ebx
9f000382:	83 ec 14             	sub    esp,0x14
9f000385:	e8 58 4c 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f00038a:	05 b2 78 00 00       	add    eax,0x78b2
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:42
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f00038f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000392:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000395:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000399:	79 03                	jns    9f00039e <itoaI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:43
         n = -n;          /* make n positive */
9f00039b:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:44
     i = 0;
9f00039e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f0003a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0003a8:	8d 50 01             	lea    edx,[eax+0x1]
9f0003ab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0003ae:	89 c2                	mov    edx,eax
9f0003b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0003b3:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f0003b6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0003b9:	ba 67 66 66 66       	mov    edx,0x66666667
9f0003be:	89 c8                	mov    eax,ecx
9f0003c0:	f7 ea                	imul   edx
9f0003c2:	c1 fa 02             	sar    edx,0x2
9f0003c5:	89 c8                	mov    eax,ecx
9f0003c7:	c1 f8 1f             	sar    eax,0x1f
9f0003ca:	29 c2                	sub    edx,eax
9f0003cc:	89 d0                	mov    eax,edx
9f0003ce:	c1 e0 02             	shl    eax,0x2
9f0003d1:	01 d0                	add    eax,edx
9f0003d3:	01 c0                	add    eax,eax
9f0003d5:	29 c1                	sub    ecx,eax
9f0003d7:	89 ca                	mov    edx,ecx
9f0003d9:	89 d0                	mov    eax,edx
9f0003db:	83 c0 30             	add    eax,0x30
9f0003de:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:47 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f0003e0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0003e3:	ba 67 66 66 66       	mov    edx,0x66666667
9f0003e8:	89 c8                	mov    eax,ecx
9f0003ea:	f7 ea                	imul   edx
9f0003ec:	c1 fa 02             	sar    edx,0x2
9f0003ef:	89 c8                	mov    eax,ecx
9f0003f1:	c1 f8 1f             	sar    eax,0x1f
9f0003f4:	29 c2                	sub    edx,eax
9f0003f6:	89 d0                	mov    eax,edx
9f0003f8:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f0003fb:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0003ff:	7f a4                	jg     9f0003a5 <itoaI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:48
     if (sign < 0)
9f000401:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000405:	79 13                	jns    9f00041a <itoaI+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
         s[i++] = '-';
9f000407:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00040a:	8d 50 01             	lea    edx,[eax+0x1]
9f00040d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000410:	89 c2                	mov    edx,eax
9f000412:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000415:	01 d0                	add    eax,edx
9f000417:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
     s[i] = '\0';
9f00041a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00041d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000420:	01 d0                	add    eax,edx
9f000422:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:51
     reverseI(s);
9f000425:	83 ec 0c             	sub    esp,0xc
9f000428:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00042b:	e8 1c fe ff ff       	call   9f00024c <reverseI>
9f000430:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:52
     return s;
9f000433:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:53
 }
9f000436:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000439:	c9                   	leave  
9f00043a:	c3                   	ret    

9f00043b <atoiI>:
atoiI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:57

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
int atoiI(char *str)
{
9f00043b:	55                   	push   ebp
9f00043c:	89 e5                	mov    ebp,esp
9f00043e:	83 ec 10             	sub    esp,0x10
9f000441:	e8 9c 4b 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f000446:	05 f6 77 00 00       	add    eax,0x77f6
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:58
    int res = 0; // Initialize result
9f00044b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:62
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f000452:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
9f000459:	eb 28                	jmp    9f000483 <atoiI+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:63 (discriminator 3)
        res = res*10 + str[i] - '0';
9f00045b:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00045e:	89 d0                	mov    eax,edx
9f000460:	c1 e0 02             	shl    eax,0x2
9f000463:	01 d0                	add    eax,edx
9f000465:	01 c0                	add    eax,eax
9f000467:	89 c1                	mov    ecx,eax
9f000469:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f00046c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00046f:	01 d0                	add    eax,edx
9f000471:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000474:	0f be c0             	movsx  eax,al
9f000477:	01 c8                	add    eax,ecx
9f000479:	83 e8 30             	sub    eax,0x30
9f00047c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:62 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f00047f:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:62 (discriminator 1)
9f000483:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f000486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000489:	01 d0                	add    eax,edx
9f00048b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00048e:	84 c0                	test   al,al
9f000490:	75 c9                	jne    9f00045b <atoiI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:66
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
9f000492:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:67
}
9f000495:	c9                   	leave  
9f000496:	c3                   	ret    

9f000497 <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:70

VISIBLE int atoi(char *str)
{
9f000497:	55                   	push   ebp
9f000498:	89 e5                	mov    ebp,esp
9f00049a:	e8 43 4b 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f00049f:	05 9d 77 00 00       	add    eax,0x779d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:71
    return atoiI(str);
9f0004a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0004a7:	e8 8f ff ff ff       	call   9f00043b <atoiI>
9f0004ac:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:72
}
9f0004af:	c9                   	leave  
9f0004b0:	c3                   	ret    
9f0004b1:	66 90                	xchg   ax,ax
9f0004b3:	90                   	nop

9f0004b4 <moveToXY>:
moveToXY():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:16
#include "ascii.h"

const char ansiEscSeq[3] =  {0x1b,0x5b,0};

VISIBLE void moveToXY(int x, int y)
{
9f0004b4:	55                   	push   ebp
9f0004b5:	89 e5                	mov    ebp,esp
9f0004b7:	53                   	push   ebx
9f0004b8:	83 ec 14             	sub    esp,0x14
9f0004bb:	e8 26 4b 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f0004c0:	81 c3 7c 77 00 00    	add    ebx,0x777c
/home/yogi/src/os/aproj/libChrisOS/src/console.c:20
    char cmd[10];
    char xstr[3], ystr[3];
    
    strcpyI(cmd,ansiEscSeq);
9f0004c6:	83 ec 08             	sub    esp,0x8
9f0004c9:	8d 83 84 f6 ff ff    	lea    eax,[ebx-0x97c]
9f0004cf:	50                   	push   eax
9f0004d0:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004d3:	50                   	push   eax
9f0004d4:	e8 83 34 00 00       	call   9f00395c <strcpyI>
9f0004d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:21
    itoaI(x,xstr);
9f0004dc:	83 ec 08             	sub    esp,0x8
9f0004df:	8d 45 eb             	lea    eax,[ebp-0x15]
9f0004e2:	50                   	push   eax
9f0004e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0004e6:	e8 93 fe ff ff       	call   9f00037e <itoaI>
9f0004eb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:22
    strcatI(cmd,xstr);
9f0004ee:	83 ec 08             	sub    esp,0x8
9f0004f1:	8d 45 eb             	lea    eax,[ebp-0x15]
9f0004f4:	50                   	push   eax
9f0004f5:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004f8:	50                   	push   eax
9f0004f9:	e8 cc 32 00 00       	call   9f0037ca <strcatI>
9f0004fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:23
    strcatI(cmd,";");
9f000501:	83 ec 08             	sub    esp,0x8
9f000504:	8d 83 87 f6 ff ff    	lea    eax,[ebx-0x979]
9f00050a:	50                   	push   eax
9f00050b:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00050e:	50                   	push   eax
9f00050f:	e8 b6 32 00 00       	call   9f0037ca <strcatI>
9f000514:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:24
    itoaI(y,ystr);
9f000517:	83 ec 08             	sub    esp,0x8
9f00051a:	8d 45 e8             	lea    eax,[ebp-0x18]
9f00051d:	50                   	push   eax
9f00051e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000521:	e8 58 fe ff ff       	call   9f00037e <itoaI>
9f000526:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:25
    strcatI(cmd,ystr);
9f000529:	83 ec 08             	sub    esp,0x8
9f00052c:	8d 45 e8             	lea    eax,[ebp-0x18]
9f00052f:	50                   	push   eax
9f000530:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000533:	50                   	push   eax
9f000534:	e8 91 32 00 00       	call   9f0037ca <strcatI>
9f000539:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:26
    strcatI(cmd,"H");
9f00053c:	83 ec 08             	sub    esp,0x8
9f00053f:	8d 83 89 f6 ff ff    	lea    eax,[ebx-0x977]
9f000545:	50                   	push   eax
9f000546:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000549:	50                   	push   eax
9f00054a:	e8 7b 32 00 00       	call   9f0037ca <strcatI>
9f00054f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:28
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f000552:	83 ec 08             	sub    esp,0x8
9f000555:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000558:	50                   	push   eax
9f000559:	8d 83 8b f6 ff ff    	lea    eax,[ebx-0x975]
9f00055f:	50                   	push   eax
9f000560:	e8 94 10 00 00       	call   9f0015f9 <printfI>
9f000565:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:29
}
9f000568:	90                   	nop
9f000569:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00056c:	c9                   	leave  
9f00056d:	c3                   	ret    

9f00056e <saveCursorPosition>:
saveCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:32

VISIBLE void saveCursorPosition()
{
9f00056e:	55                   	push   ebp
9f00056f:	89 e5                	mov    ebp,esp
9f000571:	53                   	push   ebx
9f000572:	83 ec 14             	sub    esp,0x14
9f000575:	e8 6c 4a 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f00057a:	81 c3 c2 76 00 00    	add    ebx,0x76c2
/home/yogi/src/os/aproj/libChrisOS/src/console.c:35
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f000580:	83 ec 08             	sub    esp,0x8
9f000583:	8d 83 84 f6 ff ff    	lea    eax,[ebx-0x97c]
9f000589:	50                   	push   eax
9f00058a:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00058d:	50                   	push   eax
9f00058e:	e8 c9 33 00 00       	call   9f00395c <strcpyI>
9f000593:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:36
    strcatI(cmd,"s");
9f000596:	83 ec 08             	sub    esp,0x8
9f000599:	8d 83 8e f6 ff ff    	lea    eax,[ebx-0x972]
9f00059f:	50                   	push   eax
9f0005a0:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005a3:	50                   	push   eax
9f0005a4:	e8 21 32 00 00       	call   9f0037ca <strcatI>
9f0005a9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:38
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f0005ac:	83 ec 08             	sub    esp,0x8
9f0005af:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005b2:	50                   	push   eax
9f0005b3:	8d 83 8b f6 ff ff    	lea    eax,[ebx-0x975]
9f0005b9:	50                   	push   eax
9f0005ba:	e8 3a 10 00 00       	call   9f0015f9 <printfI>
9f0005bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:39
}
9f0005c2:	90                   	nop
9f0005c3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0005c6:	c9                   	leave  
9f0005c7:	c3                   	ret    

9f0005c8 <restoreCursorPosition>:
restoreCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:42

VISIBLE void restoreCursorPosition()
{
9f0005c8:	55                   	push   ebp
9f0005c9:	89 e5                	mov    ebp,esp
9f0005cb:	53                   	push   ebx
9f0005cc:	83 ec 14             	sub    esp,0x14
9f0005cf:	e8 12 4a 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f0005d4:	81 c3 68 76 00 00    	add    ebx,0x7668
/home/yogi/src/os/aproj/libChrisOS/src/console.c:45
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f0005da:	83 ec 08             	sub    esp,0x8
9f0005dd:	8d 83 84 f6 ff ff    	lea    eax,[ebx-0x97c]
9f0005e3:	50                   	push   eax
9f0005e4:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005e7:	50                   	push   eax
9f0005e8:	e8 6f 33 00 00       	call   9f00395c <strcpyI>
9f0005ed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:46
    strcatI(cmd,"u");
9f0005f0:	83 ec 08             	sub    esp,0x8
9f0005f3:	8d 83 90 f6 ff ff    	lea    eax,[ebx-0x970]
9f0005f9:	50                   	push   eax
9f0005fa:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005fd:	50                   	push   eax
9f0005fe:	e8 c7 31 00 00       	call   9f0037ca <strcatI>
9f000603:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:48
//    writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f000606:	83 ec 08             	sub    esp,0x8
9f000609:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00060c:	50                   	push   eax
9f00060d:	8d 83 8b f6 ff ff    	lea    eax,[ebx-0x975]
9f000613:	50                   	push   eax
9f000614:	e8 e0 0f 00 00       	call   9f0015f9 <printfI>
9f000619:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:49
}
9f00061c:	90                   	nop
9f00061d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000620:	c9                   	leave  
9f000621:	c3                   	ret    
9f000622:	66 90                	xchg   ax,ax

9f000624 <getenvI>:
getenvI():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:10
 */
#include "common.h"
#include "strings.h"

int getenvI(char *varname, char *value)
{
9f000624:	55                   	push   ebp
9f000625:	89 e5                	mov    ebp,esp
9f000627:	53                   	push   ebx
9f000628:	83 ec 14             	sub    esp,0x14
9f00062b:	e8 b6 49 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f000630:	81 c3 0c 76 00 00    	add    ebx,0x760c
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11
    for (int cnt=0;cnt<100;cnt++)
9f000636:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f00063d:	eb 7b                	jmp    9f0006ba <getenvI+0x96>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:12
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f00063f:	83 ec 0c             	sub    esp,0xc
9f000642:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000645:	e8 26 34 00 00       	call   9f003a70 <strlenI>
9f00064a:	83 c4 10             	add    esp,0x10
9f00064d:	89 c1                	mov    ecx,eax
9f00064f:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000655:	8b 00                	mov    eax,DWORD PTR [eax]
9f000657:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00065a:	c1 e2 02             	shl    edx,0x2
9f00065d:	01 d0                	add    eax,edx
9f00065f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000661:	83 ec 04             	sub    esp,0x4
9f000664:	51                   	push   ecx
9f000665:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000668:	50                   	push   eax
9f000669:	e8 0d 35 00 00       	call   9f003b7b <strncmpI>
9f00066e:	83 c4 10             	add    esp,0x10
9f000671:	85 c0                	test   eax,eax
9f000673:	75 41                	jne    9f0006b6 <getenvI+0x92>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:14
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
9f000675:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00067b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00067d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000680:	c1 e2 02             	shl    edx,0x2
9f000683:	01 d0                	add    eax,edx
9f000685:	8b 00                	mov    eax,DWORD PTR [eax]
9f000687:	83 ec 08             	sub    esp,0x8
9f00068a:	8d 93 92 f6 ff ff    	lea    edx,[ebx-0x96e]
9f000690:	52                   	push   edx
9f000691:	50                   	push   eax
9f000692:	e8 af 3b 00 00       	call   9f004246 <strstrI>
9f000697:	83 c4 10             	add    esp,0x10
9f00069a:	83 c0 01             	add    eax,0x1
9f00069d:	83 ec 04             	sub    esp,0x4
9f0006a0:	6a 32                	push   0x32
9f0006a2:	50                   	push   eax
9f0006a3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0006a6:	e8 39 35 00 00       	call   9f003be4 <strncpyI>
9f0006ab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:15
            return cnt+1;
9f0006ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0006b1:	83 c0 01             	add    eax,0x1
9f0006b4:	eb 13                	jmp    9f0006c9 <getenvI+0xa5>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 2)
#include "common.h"
#include "strings.h"

int getenvI(char *varname, char *value)
{
    for (int cnt=0;cnt<100;cnt++)
9f0006b6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 1)
9f0006ba:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
9f0006be:	0f 8e 7b ff ff ff    	jle    9f00063f <getenvI+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:17
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
            return cnt+1;
        }
    return 0;
9f0006c4:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:18
}
9f0006c9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0006cc:	c9                   	leave  
9f0006cd:	c3                   	ret    

9f0006ce <getenv>:
getenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:21

VISIBLE int getenv(char *varname, char *value)
{
9f0006ce:	55                   	push   ebp
9f0006cf:	89 e5                	mov    ebp,esp
9f0006d1:	83 ec 08             	sub    esp,0x8
9f0006d4:	e8 09 49 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0006d9:	05 63 75 00 00       	add    eax,0x7563
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:22
    return getenvI(varname, value);
9f0006de:	83 ec 08             	sub    esp,0x8
9f0006e1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0006e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0006e7:	e8 38 ff ff ff       	call   9f000624 <getenvI>
9f0006ec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:23
}
9f0006ef:	c9                   	leave  
9f0006f0:	c3                   	ret    

9f0006f1 <setenv>:
setenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:26

VISIBLE void  setenv(char *varname, char *value)
{
9f0006f1:	55                   	push   ebp
9f0006f2:	89 e5                	mov    ebp,esp
9f0006f4:	53                   	push   ebx
9f0006f5:	83 ec 14             	sub    esp,0x14
9f0006f8:	e8 e9 48 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f0006fd:	81 c3 3f 75 00 00    	add    ebx,0x753f
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:27
    uint32_t lastPopulated = 0;
9f000703:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:29
    
    for (int cnt=0;cnt<100;cnt++)
9f00070a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f000711:	e9 d5 00 00 00       	jmp    9f0007eb <setenv+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:30
        if (processEnvp[cnt]!=0)
9f000716:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00071c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00071e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000721:	c1 e2 02             	shl    edx,0x2
9f000724:	01 d0                	add    eax,edx
9f000726:	8b 00                	mov    eax,DWORD PTR [eax]
9f000728:	85 c0                	test   eax,eax
9f00072a:	0f 84 b7 00 00 00    	je     9f0007e7 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:32
        {
            lastPopulated = (uint32_t)processEnvp[cnt];
9f000730:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000736:	8b 00                	mov    eax,DWORD PTR [eax]
9f000738:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00073b:	c1 e2 02             	shl    edx,0x2
9f00073e:	01 d0                	add    eax,edx
9f000740:	8b 00                	mov    eax,DWORD PTR [eax]
9f000742:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:33
            if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f000745:	83 ec 0c             	sub    esp,0xc
9f000748:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00074b:	e8 20 33 00 00       	call   9f003a70 <strlenI>
9f000750:	83 c4 10             	add    esp,0x10
9f000753:	89 c1                	mov    ecx,eax
9f000755:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00075b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00075d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000760:	c1 e2 02             	shl    edx,0x2
9f000763:	01 d0                	add    eax,edx
9f000765:	8b 00                	mov    eax,DWORD PTR [eax]
9f000767:	83 ec 04             	sub    esp,0x4
9f00076a:	51                   	push   ecx
9f00076b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00076e:	50                   	push   eax
9f00076f:	e8 07 34 00 00       	call   9f003b7b <strncmpI>
9f000774:	83 c4 10             	add    esp,0x10
9f000777:	85 c0                	test   eax,eax
9f000779:	75 6c                	jne    9f0007e7 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:35
            {
                strcpyI(processEnvp[cnt],varname);
9f00077b:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000781:	8b 00                	mov    eax,DWORD PTR [eax]
9f000783:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000786:	c1 e2 02             	shl    edx,0x2
9f000789:	01 d0                	add    eax,edx
9f00078b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00078d:	83 ec 08             	sub    esp,0x8
9f000790:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000793:	50                   	push   eax
9f000794:	e8 c3 31 00 00       	call   9f00395c <strcpyI>
9f000799:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36
                strcatI(processEnvp[cnt],"=");
9f00079c:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0007a2:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007a4:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0007a7:	c1 e2 02             	shl    edx,0x2
9f0007aa:	01 d0                	add    eax,edx
9f0007ac:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007ae:	83 ec 08             	sub    esp,0x8
9f0007b1:	8d 93 92 f6 ff ff    	lea    edx,[ebx-0x96e]
9f0007b7:	52                   	push   edx
9f0007b8:	50                   	push   eax
9f0007b9:	e8 0c 30 00 00       	call   9f0037ca <strcatI>
9f0007be:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:37
                strcatI(processEnvp[cnt],value);
9f0007c1:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0007c7:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007c9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0007cc:	c1 e2 02             	shl    edx,0x2
9f0007cf:	01 d0                	add    eax,edx
9f0007d1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007d3:	83 ec 08             	sub    esp,0x8
9f0007d6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0007d9:	50                   	push   eax
9f0007da:	e8 eb 2f 00 00       	call   9f0037ca <strcatI>
9f0007df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:38
                return;
9f0007e2:	e9 c6 00 00 00       	jmp    9f0008ad <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:29 (discriminator 2)

VISIBLE void  setenv(char *varname, char *value)
{
    uint32_t lastPopulated = 0;
    
    for (int cnt=0;cnt<100;cnt++)
9f0007e7:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:29 (discriminator 1)
9f0007eb:	83 7d f0 63          	cmp    DWORD PTR [ebp-0x10],0x63
9f0007ef:	0f 8e 21 ff ff ff    	jle    9f000716 <setenv+0x25>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f0007f5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f0007fc:	e9 a2 00 00 00       	jmp    9f0008a3 <setenv+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:42
        if (processEnvp[cnt]==0)
9f000801:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000807:	8b 00                	mov    eax,DWORD PTR [eax]
9f000809:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00080c:	c1 e2 02             	shl    edx,0x2
9f00080f:	01 d0                	add    eax,edx
9f000811:	8b 00                	mov    eax,DWORD PTR [eax]
9f000813:	85 c0                	test   eax,eax
9f000815:	0f 85 84 00 00 00    	jne    9f00089f <setenv+0x1ae>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:44
        {
            processEnvp[cnt]=(char*)lastPopulated+512;
9f00081b:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000821:	8b 00                	mov    eax,DWORD PTR [eax]
9f000823:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000826:	c1 e2 02             	shl    edx,0x2
9f000829:	01 d0                	add    eax,edx
9f00082b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00082e:	81 c2 00 02 00 00    	add    edx,0x200
9f000834:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:45
            strcpyI(processEnvp[cnt],varname);
9f000836:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00083c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00083e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000841:	c1 e2 02             	shl    edx,0x2
9f000844:	01 d0                	add    eax,edx
9f000846:	8b 00                	mov    eax,DWORD PTR [eax]
9f000848:	83 ec 08             	sub    esp,0x8
9f00084b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00084e:	50                   	push   eax
9f00084f:	e8 08 31 00 00       	call   9f00395c <strcpyI>
9f000854:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:46
            strcatI(processEnvp[cnt],"=");
9f000857:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00085d:	8b 00                	mov    eax,DWORD PTR [eax]
9f00085f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000862:	c1 e2 02             	shl    edx,0x2
9f000865:	01 d0                	add    eax,edx
9f000867:	8b 00                	mov    eax,DWORD PTR [eax]
9f000869:	83 ec 08             	sub    esp,0x8
9f00086c:	8d 93 92 f6 ff ff    	lea    edx,[ebx-0x96e]
9f000872:	52                   	push   edx
9f000873:	50                   	push   eax
9f000874:	e8 51 2f 00 00       	call   9f0037ca <strcatI>
9f000879:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:47
            strcatI(processEnvp[cnt],value);
9f00087c:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000882:	8b 00                	mov    eax,DWORD PTR [eax]
9f000884:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000887:	c1 e2 02             	shl    edx,0x2
9f00088a:	01 d0                	add    eax,edx
9f00088c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00088e:	83 ec 08             	sub    esp,0x8
9f000891:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000894:	50                   	push   eax
9f000895:	e8 30 2f 00 00       	call   9f0037ca <strcatI>
9f00089a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:48
            return;
9f00089d:	eb 0e                	jmp    9f0008ad <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41 (discriminator 2)
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f00089f:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41 (discriminator 1)
9f0008a3:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
9f0008a7:	0f 8e 54 ff ff ff    	jle    9f000801 <setenv+0x110>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:52
            strcatI(processEnvp[cnt],value);
            return;
        }            
    //NOTE: if we get here, the value is thrown away!        
    
}
9f0008ad:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0008b0:	c9                   	leave  
9f0008b1:	c3                   	ret    

9f0008b2 <getcwdI>:
getcwdI():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:55

char* getcwdI(char* buf, size_t size)
{
9f0008b2:	55                   	push   ebp
9f0008b3:	89 e5                	mov    ebp,esp
9f0008b5:	53                   	push   ebx
9f0008b6:	83 ec 04             	sub    esp,0x4
9f0008b9:	e8 24 47 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0008be:	05 7e 73 00 00       	add    eax,0x737e
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:56
    return (char*)do_syscall2(SYSCALL_GETCWD,(uint32_t)buf,size);
9f0008c3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0008c6:	83 ec 04             	sub    esp,0x4
9f0008c9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0008cc:	52                   	push   edx
9f0008cd:	6a 4f                	push   0x4f
9f0008cf:	89 c3                	mov    ebx,eax
9f0008d1:	e8 c8 0a 00 00       	call   9f00139e <do_syscall2>
9f0008d6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:58
    
}
9f0008d9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0008dc:	c9                   	leave  
9f0008dd:	c3                   	ret    

9f0008de <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:61

VISIBLE char* getcwd(char* buf, size_t size)
{
9f0008de:	55                   	push   ebp
9f0008df:	89 e5                	mov    ebp,esp
9f0008e1:	83 ec 08             	sub    esp,0x8
9f0008e4:	e8 f9 46 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0008e9:	05 53 73 00 00       	add    eax,0x7353
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:62
    return getcwdI(buf,size);
9f0008ee:	83 ec 08             	sub    esp,0x8
9f0008f1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0008f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0008f7:	e8 b6 ff ff ff       	call   9f0008b2 <getcwdI>
9f0008fc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:63
}
9f0008ff:	c9                   	leave  
9f000900:	c3                   	ret    
9f000901:	66 90                	xchg   ax,ax
9f000903:	90                   	nop

9f000904 <getdirI>:
getdirI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:19
    char *resolvePath_inPath;
    char *resolvePath_resPath;
    char *resolvePath_cwd;

int getdirI(char* path, direntry_t *entries, int bufferCount)
{
9f000904:	55                   	push   ebp
9f000905:	89 e5                	mov    ebp,esp
9f000907:	53                   	push   ebx
9f000908:	83 ec 04             	sub    esp,0x4
9f00090b:	e8 d2 46 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f000910:	05 2c 73 00 00       	add    eax,0x732c
/home/yogi/src/os/aproj/libChrisOS/src/file.c:20
    return do_syscall3(SYSCALL_GETDENTS, (uint32_t)path, (uint32_t)entries, bufferCount);
9f000915:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000918:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f00091b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00091e:	53                   	push   ebx
9f00091f:	51                   	push   ecx
9f000920:	52                   	push   edx
9f000921:	68 04 03 00 00       	push   0x304
9f000926:	89 c3                	mov    ebx,eax
9f000928:	e8 35 0a 00 00       	call   9f001362 <do_syscall3>
9f00092d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:22
    
}
9f000930:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000933:	c9                   	leave  
9f000934:	c3                   	ret    

9f000935 <getdir>:
getdir():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:24
VISIBLE int getdir(char* path, direntry_t *entries, int bufferCount)
{
9f000935:	55                   	push   ebp
9f000936:	89 e5                	mov    ebp,esp
9f000938:	83 ec 08             	sub    esp,0x8
9f00093b:	e8 a2 46 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f000940:	05 fc 72 00 00       	add    eax,0x72fc
/home/yogi/src/os/aproj/libChrisOS/src/file.c:25
    return getdirI(path, entries, bufferCount);
9f000945:	83 ec 04             	sub    esp,0x4
9f000948:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f00094b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00094e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000951:	e8 ae ff ff ff       	call   9f000904 <getdirI>
9f000956:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:26
}
9f000959:	c9                   	leave  
9f00095a:	c3                   	ret    

9f00095b <openI>:
openI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:29

void* openI(char* path, const char* mode)
{
9f00095b:	55                   	push   ebp
9f00095c:	89 e5                	mov    ebp,esp
9f00095e:	53                   	push   ebx
9f00095f:	83 ec 04             	sub    esp,0x4
9f000962:	e8 7b 46 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f000967:	05 d5 72 00 00       	add    eax,0x72d5
/home/yogi/src/os/aproj/libChrisOS/src/file.c:31
    //NOTE: Using syscall3 and passing -1 as 3rd parameter, otherwise param3 will be 0 and syscall will think freopen is calling!
    return (void*)do_syscall3(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode,-1);
9f00096c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f00096f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000972:	6a ff                	push   0xffffffff
9f000974:	51                   	push   ecx
9f000975:	52                   	push   edx
9f000976:	6a 02                	push   0x2
9f000978:	89 c3                	mov    ebx,eax
9f00097a:	e8 e3 09 00 00       	call   9f001362 <do_syscall3>
9f00097f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:32
}
9f000982:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000985:	c9                   	leave  
9f000986:	c3                   	ret    

9f000987 <open>:
open():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:35

VISIBLE void* open(char* path, const char* mode)
{
9f000987:	55                   	push   ebp
9f000988:	89 e5                	mov    ebp,esp
9f00098a:	83 ec 08             	sub    esp,0x8
9f00098d:	e8 50 46 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f000992:	05 aa 72 00 00       	add    eax,0x72aa
/home/yogi/src/os/aproj/libChrisOS/src/file.c:36
    return openI(path, mode);
9f000997:	83 ec 08             	sub    esp,0x8
9f00099a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00099d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0009a0:	e8 b6 ff ff ff       	call   9f00095b <openI>
9f0009a5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:37
}
9f0009a8:	c9                   	leave  
9f0009a9:	c3                   	ret    

9f0009aa <file_cleanup>:
file_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:40

void file_cleanup()
{
9f0009aa:	55                   	push   ebp
9f0009ab:	89 e5                	mov    ebp,esp
9f0009ad:	53                   	push   ebx
9f0009ae:	83 ec 04             	sub    esp,0x4
9f0009b1:	e8 30 46 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f0009b6:	81 c3 86 72 00 00    	add    ebx,0x7286
/home/yogi/src/os/aproj/libChrisOS/src/file.c:41
    while (filesToClose)
9f0009bc:	eb 1f                	jmp    9f0009dd <file_cleanup+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:42
        closeI(filesToClose++);
9f0009be:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f0009c4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009c6:	8d 48 04             	lea    ecx,[eax+0x4]
9f0009c9:	8b 93 d8 ff ff ff    	mov    edx,DWORD PTR [ebx-0x28]
9f0009cf:	89 0a                	mov    DWORD PTR [edx],ecx
9f0009d1:	83 ec 0c             	sub    esp,0xc
9f0009d4:	50                   	push   eax
9f0009d5:	e8 bc 00 00 00       	call   9f000a96 <closeI>
9f0009da:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:41
    return openI(path, mode);
}

void file_cleanup()
{
    while (filesToClose)
9f0009dd:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f0009e3:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009e5:	85 c0                	test   eax,eax
9f0009e7:	75 d5                	jne    9f0009be <file_cleanup+0x14>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:43
        closeI(filesToClose++);
    freeI(filesToClose);
9f0009e9:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f0009ef:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009f1:	83 ec 0c             	sub    esp,0xc
9f0009f4:	50                   	push   eax
9f0009f5:	e8 d9 17 00 00       	call   9f0021d3 <freeI>
9f0009fa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:44
}
9f0009fd:	90                   	nop
9f0009fe:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000a01:	c9                   	leave  
9f000a02:	c3                   	ret    

9f000a03 <freopen>:
freopen():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:47

VISIBLE void* freopen(char* path, const char* mode, void *stream)
{
9f000a03:	55                   	push   ebp
9f000a04:	89 e5                	mov    ebp,esp
9f000a06:	56                   	push   esi
9f000a07:	53                   	push   ebx
9f000a08:	83 ec 10             	sub    esp,0x10
9f000a0b:	e8 d6 45 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f000a10:	81 c3 2c 72 00 00    	add    ebx,0x722c
/home/yogi/src/os/aproj/libChrisOS/src/file.c:48
    void *retVal=0;
9f000a16:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:49
    retVal = (void*)do_syscall3(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode, (uint32_t)stream);
9f000a1d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000a20:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000a23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000a26:	51                   	push   ecx
9f000a27:	52                   	push   edx
9f000a28:	50                   	push   eax
9f000a29:	6a 02                	push   0x2
9f000a2b:	e8 32 09 00 00       	call   9f001362 <do_syscall3>
9f000a30:	83 c4 10             	add    esp,0x10
9f000a33:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:50
    if (retVal==NULL)
9f000a36:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f000a3a:	75 07                	jne    9f000a43 <freopen+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:51
        return (void*)-1;
9f000a3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f000a41:	eb 4c                	jmp    9f000a8f <freopen+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:52
    if (filesToClose==NULL)
9f000a43:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000a49:	8b 00                	mov    eax,DWORD PTR [eax]
9f000a4b:	85 c0                	test   eax,eax
9f000a4d:	75 17                	jne    9f000a66 <freopen+0x63>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:54
    {
        filesToClose=mallocI(sizeof(uintptr_t)*25);
9f000a4f:	83 ec 0c             	sub    esp,0xc
9f000a52:	6a 64                	push   0x64
9f000a54:	e8 fc 18 00 00       	call   9f002355 <mallocI>
9f000a59:	83 c4 10             	add    esp,0x10
9f000a5c:	89 c2                	mov    edx,eax
9f000a5e:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000a64:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:56
    }
    filesToClose[filesToCloseCount++]=(uintptr_t)retVal;
9f000a66:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000a6c:	8b 30                	mov    esi,DWORD PTR [eax]
9f000a6e:	8b 83 d0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x30]
9f000a74:	8b 00                	mov    eax,DWORD PTR [eax]
9f000a76:	8d 48 01             	lea    ecx,[eax+0x1]
9f000a79:	8b 93 d0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x30]
9f000a7f:	89 0a                	mov    DWORD PTR [edx],ecx
9f000a81:	c1 e0 02             	shl    eax,0x2
9f000a84:	8d 14 06             	lea    edx,[esi+eax*1]
9f000a87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000a8a:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:57
    return retVal;
9f000a8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:58
}
9f000a8f:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000a92:	5b                   	pop    ebx
9f000a93:	5e                   	pop    esi
9f000a94:	5d                   	pop    ebp
9f000a95:	c3                   	ret    

9f000a96 <closeI>:
closeI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:61

void closeI(void* handle)
{
9f000a96:	55                   	push   ebp
9f000a97:	89 e5                	mov    ebp,esp
9f000a99:	53                   	push   ebx
9f000a9a:	83 ec 04             	sub    esp,0x4
9f000a9d:	e8 40 45 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f000aa2:	05 9a 71 00 00       	add    eax,0x719a
/home/yogi/src/os/aproj/libChrisOS/src/file.c:62
    do_syscall1(SYSCALL_CLOSE, (uint32_t)handle);
9f000aa7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000aaa:	83 ec 08             	sub    esp,0x8
9f000aad:	52                   	push   edx
9f000aae:	6a 03                	push   0x3
9f000ab0:	89 c3                	mov    ebx,eax
9f000ab2:	e8 25 09 00 00       	call   9f0013dc <do_syscall1>
9f000ab7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:63
}
9f000aba:	90                   	nop
9f000abb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000abe:	c9                   	leave  
9f000abf:	c3                   	ret    

9f000ac0 <close>:
close():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:66

VISIBLE void close(void* handle)
{
9f000ac0:	55                   	push   ebp
9f000ac1:	89 e5                	mov    ebp,esp
9f000ac3:	83 ec 08             	sub    esp,0x8
9f000ac6:	e8 17 45 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f000acb:	05 71 71 00 00       	add    eax,0x7171
/home/yogi/src/os/aproj/libChrisOS/src/file.c:67
    return closeI(handle);
9f000ad0:	83 ec 0c             	sub    esp,0xc
9f000ad3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000ad6:	e8 bb ff ff ff       	call   9f000a96 <closeI>
9f000adb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:68
}
9f000ade:	c9                   	leave  
9f000adf:	c3                   	ret    

9f000ae0 <readI>:
readI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:71

int readI(void* handle, void *buffer, int size, int length)
{
9f000ae0:	55                   	push   ebp
9f000ae1:	89 e5                	mov    ebp,esp
9f000ae3:	56                   	push   esi
9f000ae4:	53                   	push   ebx
9f000ae5:	e8 f8 44 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f000aea:	05 52 71 00 00       	add    eax,0x7152
/home/yogi/src/os/aproj/libChrisOS/src/file.c:72
    return do_syscall4(SYSCALL_READ, (uint32_t)handle, (uint32_t)buffer, size, length);
9f000aef:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f000af2:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000af5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000af8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000afb:	83 ec 0c             	sub    esp,0xc
9f000afe:	56                   	push   esi
9f000aff:	53                   	push   ebx
9f000b00:	51                   	push   ecx
9f000b01:	52                   	push   edx
9f000b02:	6a 04                	push   0x4
9f000b04:	89 c3                	mov    ebx,eax
9f000b06:	e8 1d 08 00 00       	call   9f001328 <do_syscall4>
9f000b0b:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:73
}
9f000b0e:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000b11:	5b                   	pop    ebx
9f000b12:	5e                   	pop    esi
9f000b13:	5d                   	pop    ebp
9f000b14:	c3                   	ret    

9f000b15 <read>:
read():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:76

VISIBLE int read(void* handle, void *buffer, int size, int length)
{
9f000b15:	55                   	push   ebp
9f000b16:	89 e5                	mov    ebp,esp
9f000b18:	83 ec 08             	sub    esp,0x8
9f000b1b:	e8 c2 44 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f000b20:	05 1c 71 00 00       	add    eax,0x711c
/home/yogi/src/os/aproj/libChrisOS/src/file.c:77
    return readI(handle, buffer, size, length);
9f000b25:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f000b28:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000b2b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000b2e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000b31:	e8 aa ff ff ff       	call   9f000ae0 <readI>
9f000b36:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:78
}
9f000b39:	c9                   	leave  
9f000b3a:	c3                   	ret    

9f000b3b <writeI>:
writeI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:80
int writeI(void* handle, void *buffer, int size, int length)
{
9f000b3b:	55                   	push   ebp
9f000b3c:	89 e5                	mov    ebp,esp
9f000b3e:	56                   	push   esi
9f000b3f:	53                   	push   ebx
9f000b40:	e8 9d 44 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f000b45:	05 f7 70 00 00       	add    eax,0x70f7
/home/yogi/src/os/aproj/libChrisOS/src/file.c:81
    return do_syscall4(SYSCALL_WRITE, (uint32_t)handle, (uint32_t)buffer, size, length);
9f000b4a:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f000b4d:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000b50:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000b53:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000b56:	83 ec 0c             	sub    esp,0xc
9f000b59:	56                   	push   esi
9f000b5a:	53                   	push   ebx
9f000b5b:	51                   	push   ecx
9f000b5c:	52                   	push   edx
9f000b5d:	6a 05                	push   0x5
9f000b5f:	89 c3                	mov    ebx,eax
9f000b61:	e8 c2 07 00 00       	call   9f001328 <do_syscall4>
9f000b66:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:82
}
9f000b69:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000b6c:	5b                   	pop    ebx
9f000b6d:	5e                   	pop    esi
9f000b6e:	5d                   	pop    ebp
9f000b6f:	c3                   	ret    

9f000b70 <write>:
write():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:85

VISIBLE int write(void* handle, void *buffer, int size, int length)
{
9f000b70:	55                   	push   ebp
9f000b71:	89 e5                	mov    ebp,esp
9f000b73:	83 ec 08             	sub    esp,0x8
9f000b76:	e8 67 44 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f000b7b:	05 c1 70 00 00       	add    eax,0x70c1
/home/yogi/src/os/aproj/libChrisOS/src/file.c:86
    return writeI(handle, buffer, size, length);
9f000b80:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f000b83:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000b86:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000b89:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000b8c:	e8 aa ff ff ff       	call   9f000b3b <writeI>
9f000b91:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:87
}
9f000b94:	c9                   	leave  
9f000b95:	c3                   	ret    

9f000b96 <seekI>:
seekI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:90

int seekI(void* handle, long position, int whence)
{
9f000b96:	55                   	push   ebp
9f000b97:	89 e5                	mov    ebp,esp
9f000b99:	53                   	push   ebx
9f000b9a:	83 ec 04             	sub    esp,0x4
9f000b9d:	e8 40 44 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f000ba2:	05 9a 70 00 00       	add    eax,0x709a
/home/yogi/src/os/aproj/libChrisOS/src/file.c:91
    return do_syscall3(SYSCALL_SEEK, (uint32_t)handle, position, whence);
9f000ba7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000baa:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000bad:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000bb0:	53                   	push   ebx
9f000bb1:	51                   	push   ecx
9f000bb2:	52                   	push   edx
9f000bb3:	6a 0b                	push   0xb
9f000bb5:	89 c3                	mov    ebx,eax
9f000bb7:	e8 a6 07 00 00       	call   9f001362 <do_syscall3>
9f000bbc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:92
}
9f000bbf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000bc2:	c9                   	leave  
9f000bc3:	c3                   	ret    

9f000bc4 <seek>:
seek():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:95

VISIBLE int seek(void* handle, long position, int whence)
{
9f000bc4:	55                   	push   ebp
9f000bc5:	89 e5                	mov    ebp,esp
9f000bc7:	83 ec 08             	sub    esp,0x8
9f000bca:	e8 13 44 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f000bcf:	05 6d 70 00 00       	add    eax,0x706d
/home/yogi/src/os/aproj/libChrisOS/src/file.c:96
    return seekI(handle, position, whence);
9f000bd4:	83 ec 04             	sub    esp,0x4
9f000bd7:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000bda:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000bdd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000be0:	e8 b1 ff ff ff       	call   9f000b96 <seekI>
9f000be5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:97
}
9f000be8:	c9                   	leave  
9f000be9:	c3                   	ret    

9f000bea <statI>:
statI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:99
int statI(char *path, fstat_t *stat)
{
9f000bea:	55                   	push   ebp
9f000beb:	89 e5                	mov    ebp,esp
9f000bed:	53                   	push   ebx
9f000bee:	83 ec 04             	sub    esp,0x4
9f000bf1:	e8 ec 43 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f000bf6:	05 46 70 00 00       	add    eax,0x7046
/home/yogi/src/os/aproj/libChrisOS/src/file.c:100
    return do_syscall2(SYSCALL_STAT, (uint32_t)path, (uint32_t)stat);
9f000bfb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000bfe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000c01:	83 ec 04             	sub    esp,0x4
9f000c04:	51                   	push   ecx
9f000c05:	52                   	push   edx
9f000c06:	6a 0a                	push   0xa
9f000c08:	89 c3                	mov    ebx,eax
9f000c0a:	e8 8f 07 00 00       	call   9f00139e <do_syscall2>
9f000c0f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:101
}
9f000c12:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000c15:	c9                   	leave  
9f000c16:	c3                   	ret    

9f000c17 <stat>:
stat():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:104

VISIBLE int stat(char *path, fstat_t *stat)
{
9f000c17:	55                   	push   ebp
9f000c18:	89 e5                	mov    ebp,esp
9f000c1a:	83 ec 08             	sub    esp,0x8
9f000c1d:	e8 c0 43 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f000c22:	05 1a 70 00 00       	add    eax,0x701a
/home/yogi/src/os/aproj/libChrisOS/src/file.c:105
    return statI(path, stat);
9f000c27:	83 ec 08             	sub    esp,0x8
9f000c2a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000c2d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000c30:	e8 b5 ff ff ff       	call   9f000bea <statI>
9f000c35:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:106
}
9f000c38:	c9                   	leave  
9f000c39:	c3                   	ret    

9f000c3a <resolvePath>:
resolvePath():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:109

VISIBLE int resolvePath(const char *inPath, char *outPath, bool usePathVariable)
{
9f000c3a:	55                   	push   ebp
9f000c3b:	89 e5                	mov    ebp,esp
9f000c3d:	53                   	push   ebx
9f000c3e:	83 ec 34             	sub    esp,0x34
9f000c41:	e8 a0 43 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f000c46:	81 c3 f6 6f 00 00    	add    ebx,0x6ff6
9f000c4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f000c4f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
/home/yogi/src/os/aproj/libChrisOS/src/file.c:110
    char delim[2]=":";
9f000c52:	66 c7 45 e6 3a 00    	mov    WORD PTR [ebp-0x1a],0x3a
/home/yogi/src/os/aproj/libChrisOS/src/file.c:112
    char *token;
    int retVal=-1;
9f000c58:	c7 45 f0 ff ff ff ff 	mov    DWORD PTR [ebp-0x10],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/file.c:115
    fstat_t fstat;
    
    if (!resolvePath_envPath)
9f000c5f:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000c65:	8b 00                	mov    eax,DWORD PTR [eax]
9f000c67:	85 c0                	test   eax,eax
9f000c69:	75 1a                	jne    9f000c85 <resolvePath+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:116
        resolvePath_envPath=mallocI(1024);
9f000c6b:	83 ec 0c             	sub    esp,0xc
9f000c6e:	68 00 04 00 00       	push   0x400
9f000c73:	e8 dd 16 00 00       	call   9f002355 <mallocI>
9f000c78:	83 c4 10             	add    esp,0x10
9f000c7b:	89 c2                	mov    edx,eax
9f000c7d:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000c83:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:117
    if (!resolvePath_cwd)
9f000c85:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000c8b:	8b 00                	mov    eax,DWORD PTR [eax]
9f000c8d:	85 c0                	test   eax,eax
9f000c8f:	75 1a                	jne    9f000cab <resolvePath+0x71>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:118
        resolvePath_cwd=mallocI(1024);
9f000c91:	83 ec 0c             	sub    esp,0xc
9f000c94:	68 00 04 00 00       	push   0x400
9f000c99:	e8 b7 16 00 00       	call   9f002355 <mallocI>
9f000c9e:	83 c4 10             	add    esp,0x10
9f000ca1:	89 c2                	mov    edx,eax
9f000ca3:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000ca9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:119
    if (!resolvePath_inPath)
9f000cab:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000cb1:	8b 00                	mov    eax,DWORD PTR [eax]
9f000cb3:	85 c0                	test   eax,eax
9f000cb5:	75 1a                	jne    9f000cd1 <resolvePath+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:120
            resolvePath_inPath=mallocI(1024);
9f000cb7:	83 ec 0c             	sub    esp,0xc
9f000cba:	68 00 04 00 00       	push   0x400
9f000cbf:	e8 91 16 00 00       	call   9f002355 <mallocI>
9f000cc4:	83 c4 10             	add    esp,0x10
9f000cc7:	89 c2                	mov    edx,eax
9f000cc9:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000ccf:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:121
    if (!resolvePath_resPath)
9f000cd1:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000cd7:	8b 00                	mov    eax,DWORD PTR [eax]
9f000cd9:	85 c0                	test   eax,eax
9f000cdb:	75 1a                	jne    9f000cf7 <resolvePath+0xbd>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:122
        resolvePath_resPath=mallocI(1024);
9f000cdd:	83 ec 0c             	sub    esp,0xc
9f000ce0:	68 00 04 00 00       	push   0x400
9f000ce5:	e8 6b 16 00 00       	call   9f002355 <mallocI>
9f000cea:	83 c4 10             	add    esp,0x10
9f000ced:	89 c2                	mov    edx,eax
9f000cef:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000cf5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:127

    //using the PATH variable, attempt to resolve the path to an executable when a path isn't given in the commandline
    
    //If there is a / character in the path, then don't attempt to resolve
    if (usePathVariable)
9f000cf7:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
9f000cfb:	74 1d                	je     9f000d1a <resolvePath+0xe0>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:128
        getenvI("PATH",resolvePath_envPath);
9f000cfd:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000d03:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d05:	83 ec 08             	sub    esp,0x8
9f000d08:	50                   	push   eax
9f000d09:	8d 83 94 f6 ff ff    	lea    eax,[ebx-0x96c]
9f000d0f:	50                   	push   eax
9f000d10:	e8 0f f9 ff ff       	call   9f000624 <getenvI>
9f000d15:	83 c4 10             	add    esp,0x10
9f000d18:	eb 0b                	jmp    9f000d25 <resolvePath+0xeb>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:130
    else
        resolvePath_envPath[0]='\0';
9f000d1a:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000d20:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d22:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:132

    getcwdI(resolvePath_cwd,1024);
9f000d25:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000d2b:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d2d:	83 ec 08             	sub    esp,0x8
9f000d30:	68 00 04 00 00       	push   0x400
9f000d35:	50                   	push   eax
9f000d36:	e8 77 fb ff ff       	call   9f0008b2 <getcwdI>
9f000d3b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:134
    
    if (strstrI(inPath, "/"))
9f000d3e:	83 ec 08             	sub    esp,0x8
9f000d41:	8d 83 99 f6 ff ff    	lea    eax,[ebx-0x967]
9f000d47:	50                   	push   eax
9f000d48:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000d4b:	e8 f6 34 00 00       	call   9f004246 <strstrI>
9f000d50:	83 c4 10             	add    esp,0x10
9f000d53:	85 c0                	test   eax,eax
9f000d55:	74 53                	je     9f000daa <resolvePath+0x170>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:136
    {
        if (*inPath!='/')
9f000d57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000d5a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000d5d:	3c 2f                	cmp    al,0x2f
9f000d5f:	74 2c                	je     9f000d8d <resolvePath+0x153>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:138
        {
            strcpyI(outPath,resolvePath_cwd);
9f000d61:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000d67:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d69:	83 ec 08             	sub    esp,0x8
9f000d6c:	50                   	push   eax
9f000d6d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000d70:	e8 e7 2b 00 00       	call   9f00395c <strcpyI>
9f000d75:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:139
            strcatI(outPath,"/");
9f000d78:	83 ec 08             	sub    esp,0x8
9f000d7b:	8d 83 99 f6 ff ff    	lea    eax,[ebx-0x967]
9f000d81:	50                   	push   eax
9f000d82:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000d85:	e8 40 2a 00 00       	call   9f0037ca <strcatI>
9f000d8a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:141
        }
        strcatI(outPath,inPath);
9f000d8d:	83 ec 08             	sub    esp,0x8
9f000d90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000d93:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000d96:	e8 2f 2a 00 00       	call   9f0037ca <strcatI>
9f000d9b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:142
        retVal=0;
9f000d9e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f000da5:	e9 b1 01 00 00       	jmp    9f000f5b <resolvePath+0x321>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:146
    }
    else
    {
        strcpyI(resolvePath_inPath,inPath);
9f000daa:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000db0:	8b 00                	mov    eax,DWORD PTR [eax]
9f000db2:	83 ec 08             	sub    esp,0x8
9f000db5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000db8:	50                   	push   eax
9f000db9:	e8 9e 2b 00 00       	call   9f00395c <strcpyI>
9f000dbe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:147
        if (resolvePath_envPath[0])
9f000dc1:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000dc7:	8b 00                	mov    eax,DWORD PTR [eax]
9f000dc9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000dcc:	84 c0                	test   al,al
9f000dce:	74 20                	je     9f000df0 <resolvePath+0x1b6>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:148
            token=strtokI(resolvePath_envPath,delim);
9f000dd0:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000dd6:	8b 00                	mov    eax,DWORD PTR [eax]
9f000dd8:	83 ec 08             	sub    esp,0x8
9f000ddb:	8d 55 e6             	lea    edx,[ebp-0x1a]
9f000dde:	52                   	push   edx
9f000ddf:	50                   	push   eax
9f000de0:	e8 37 f3 ff ff       	call   9f00011c <strtokI>
9f000de5:	83 c4 10             	add    esp,0x10
9f000de8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f000deb:	e9 c9 00 00 00       	jmp    9f000eb9 <resolvePath+0x27f>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:150
        else
            token=NULL;
9f000df0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:151
        while (token!=NULL)
9f000df7:	e9 bd 00 00 00       	jmp    9f000eb9 <resolvePath+0x27f>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:153
        {
            strcpyI(resolvePath_resPath,token);
9f000dfc:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e02:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e04:	83 ec 08             	sub    esp,0x8
9f000e07:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f000e0a:	50                   	push   eax
9f000e0b:	e8 4c 2b 00 00       	call   9f00395c <strcpyI>
9f000e10:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:154
            if (strcmpI(resolvePath_resPath,"/")!=0)
9f000e13:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e19:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e1b:	83 ec 08             	sub    esp,0x8
9f000e1e:	8d 93 99 f6 ff ff    	lea    edx,[ebx-0x967]
9f000e24:	52                   	push   edx
9f000e25:	50                   	push   eax
9f000e26:	e8 75 2a 00 00       	call   9f0038a0 <strcmpI>
9f000e2b:	83 c4 10             	add    esp,0x10
9f000e2e:	85 c0                	test   eax,eax
9f000e30:	74 1b                	je     9f000e4d <resolvePath+0x213>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:155
                strcatI(resolvePath_resPath,"/");
9f000e32:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e38:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e3a:	83 ec 08             	sub    esp,0x8
9f000e3d:	8d 93 99 f6 ff ff    	lea    edx,[ebx-0x967]
9f000e43:	52                   	push   edx
9f000e44:	50                   	push   eax
9f000e45:	e8 80 29 00 00       	call   9f0037ca <strcatI>
9f000e4a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:156
            strcatI(resolvePath_resPath,inPath);
9f000e4d:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e53:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e55:	83 ec 08             	sub    esp,0x8
9f000e58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000e5b:	50                   	push   eax
9f000e5c:	e8 69 29 00 00       	call   9f0037ca <strcatI>
9f000e61:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:157
            int res=statI(resolvePath_resPath,&fstat);
9f000e64:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e6a:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e6c:	83 ec 08             	sub    esp,0x8
9f000e6f:	8d 55 dc             	lea    edx,[ebp-0x24]
9f000e72:	52                   	push   edx
9f000e73:	50                   	push   eax
9f000e74:	e8 71 fd ff ff       	call   9f000bea <statI>
9f000e79:	83 c4 10             	add    esp,0x10
9f000e7c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:158
            if (res==0)
9f000e7f:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f000e83:	75 20                	jne    9f000ea5 <resolvePath+0x26b>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:160
            {
                strcpyI(outPath,resolvePath_resPath);
9f000e85:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e8b:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e8d:	83 ec 08             	sub    esp,0x8
9f000e90:	50                   	push   eax
9f000e91:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000e94:	e8 c3 2a 00 00       	call   9f00395c <strcpyI>
9f000e99:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:161
                retVal=0;
9f000e9c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:162
                break;
9f000ea3:	eb 1e                	jmp    9f000ec3 <resolvePath+0x289>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:164
            }
            token=strtokI(NULL,delim);
9f000ea5:	83 ec 08             	sub    esp,0x8
9f000ea8:	8d 45 e6             	lea    eax,[ebp-0x1a]
9f000eab:	50                   	push   eax
9f000eac:	6a 00                	push   0x0
9f000eae:	e8 69 f2 ff ff       	call   9f00011c <strtokI>
9f000eb3:	83 c4 10             	add    esp,0x10
9f000eb6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:151
        strcpyI(resolvePath_inPath,inPath);
        if (resolvePath_envPath[0])
            token=strtokI(resolvePath_envPath,delim);
        else
            token=NULL;
        while (token!=NULL)
9f000eb9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f000ebd:	0f 85 39 ff ff ff    	jne    9f000dfc <resolvePath+0x1c2>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:167
                break;
            }
            token=strtokI(NULL,delim);
        }

        if (retVal==-1)
9f000ec3:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
9f000ec7:	0f 85 8e 00 00 00    	jne    9f000f5b <resolvePath+0x321>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:169
        {
            strcpyI(resolvePath_resPath,resolvePath_cwd);
9f000ecd:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000ed3:	8b 10                	mov    edx,DWORD PTR [eax]
9f000ed5:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000edb:	8b 00                	mov    eax,DWORD PTR [eax]
9f000edd:	83 ec 08             	sub    esp,0x8
9f000ee0:	52                   	push   edx
9f000ee1:	50                   	push   eax
9f000ee2:	e8 75 2a 00 00       	call   9f00395c <strcpyI>
9f000ee7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:170
            strcatI(resolvePath_resPath,"/");
9f000eea:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000ef0:	8b 00                	mov    eax,DWORD PTR [eax]
9f000ef2:	83 ec 08             	sub    esp,0x8
9f000ef5:	8d 93 99 f6 ff ff    	lea    edx,[ebx-0x967]
9f000efb:	52                   	push   edx
9f000efc:	50                   	push   eax
9f000efd:	e8 c8 28 00 00       	call   9f0037ca <strcatI>
9f000f02:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:171
            strcatI(resolvePath_resPath,inPath);
9f000f05:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000f0b:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f0d:	83 ec 08             	sub    esp,0x8
9f000f10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000f13:	50                   	push   eax
9f000f14:	e8 b1 28 00 00       	call   9f0037ca <strcatI>
9f000f19:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:172
            int res=statI(resolvePath_resPath,&fstat);
9f000f1c:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000f22:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f24:	83 ec 08             	sub    esp,0x8
9f000f27:	8d 55 dc             	lea    edx,[ebp-0x24]
9f000f2a:	52                   	push   edx
9f000f2b:	50                   	push   eax
9f000f2c:	e8 b9 fc ff ff       	call   9f000bea <statI>
9f000f31:	83 c4 10             	add    esp,0x10
9f000f34:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:173
            if (res==0)
9f000f37:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f000f3b:	75 1e                	jne    9f000f5b <resolvePath+0x321>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:175
            {
                strcpyI(outPath,resolvePath_resPath);
9f000f3d:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000f43:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f45:	83 ec 08             	sub    esp,0x8
9f000f48:	50                   	push   eax
9f000f49:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000f4c:	e8 0b 2a 00 00       	call   9f00395c <strcpyI>
9f000f51:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:176
                retVal=0;
9f000f54:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:181
            }
        }
    }
    
    return retVal;
9f000f5b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:182
}
9f000f5e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000f61:	c9                   	leave  
9f000f62:	c3                   	ret    

9f000f63 <tellI>:
tellI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:185

long tellI(void *stream)
{
9f000f63:	55                   	push   ebp
9f000f64:	89 e5                	mov    ebp,esp
9f000f66:	53                   	push   ebx
9f000f67:	83 ec 04             	sub    esp,0x4
9f000f6a:	e8 73 40 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f000f6f:	05 cd 6c 00 00       	add    eax,0x6ccd
/home/yogi/src/os/aproj/libChrisOS/src/file.c:186
    return do_syscall1(SYSCALL_TELL,(uint32_t)stream);
9f000f74:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000f77:	83 ec 08             	sub    esp,0x8
9f000f7a:	52                   	push   edx
9f000f7b:	6a 0c                	push   0xc
9f000f7d:	89 c3                	mov    ebx,eax
9f000f7f:	e8 58 04 00 00       	call   9f0013dc <do_syscall1>
9f000f84:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:187
}
9f000f87:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000f8a:	c9                   	leave  
9f000f8b:	c3                   	ret    

9f000f8c <tell>:
tell():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:190

VISIBLE long tell(void *stream)
{
9f000f8c:	55                   	push   ebp
9f000f8d:	89 e5                	mov    ebp,esp
9f000f8f:	83 ec 08             	sub    esp,0x8
9f000f92:	e8 4b 40 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f000f97:	05 a5 6c 00 00       	add    eax,0x6ca5
/home/yogi/src/os/aproj/libChrisOS/src/file.c:191
    return tellI(stream);
9f000f9c:	83 ec 0c             	sub    esp,0xc
9f000f9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000fa2:	e8 bc ff ff ff       	call   9f000f63 <tellI>
9f000fa7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:192
}
9f000faa:	c9                   	leave  
9f000fab:	c3                   	ret    

9f000fac <getlineI>:
getlineI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:195

size_t getlineI(char **lineptr, size_t *n, void *stream)
{
9f000fac:	55                   	push   ebp
9f000fad:	89 e5                	mov    ebp,esp
9f000faf:	53                   	push   ebx
9f000fb0:	83 ec 24             	sub    esp,0x24
9f000fb3:	e8 2e 40 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f000fb8:	81 c3 84 6c 00 00    	add    ebx,0x6c84
/home/yogi/src/os/aproj/libChrisOS/src/file.c:197
    char *buffer;
    int bytesReturned=0;
9f000fbe:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:198
    size_t bytesParsed=0;
9f000fc5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:199
    char *crPtr=NULL;
9f000fcc:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:200
    char *lineToOutput=*lineptr;
9f000fd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000fd6:	8b 00                	mov    eax,DWORD PTR [eax]
9f000fd8:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:201
    size_t lLinePtrLen=*n;
9f000fdb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000fde:	8b 00                	mov    eax,DWORD PTR [eax]
9f000fe0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:202
    int startFilePos=tellI(stream);
9f000fe3:	83 ec 0c             	sub    esp,0xc
9f000fe6:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000fe9:	e8 75 ff ff ff       	call   9f000f63 <tellI>
9f000fee:	83 c4 10             	add    esp,0x10
9f000ff1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:203
    int retVal=-1;
9f000ff4:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/file.c:205
    
    buffer=mallocI(GETLINE_BUFFER_SIZE);        
9f000ffb:	83 ec 0c             	sub    esp,0xc
9f000ffe:	68 00 04 00 00       	push   0x400
9f001003:	e8 4d 13 00 00       	call   9f002355 <mallocI>
9f001008:	83 c4 10             	add    esp,0x10
9f00100b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:207
    
    while ((bytesReturned=readI(stream, buffer,GETLINE_BUFFER_SIZE,1))>0)
9f00100e:	e9 22 01 00 00       	jmp    9f001135 <getlineI+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:209
    {
        if (crPtr==strstrI(buffer,"\n"))
9f001013:	83 ec 08             	sub    esp,0x8
9f001016:	8d 83 9b f6 ff ff    	lea    eax,[ebx-0x965]
9f00101c:	50                   	push   eax
9f00101d:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001020:	e8 21 32 00 00       	call   9f004246 <strstrI>
9f001025:	83 c4 10             	add    esp,0x10
9f001028:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
9f00102b:	0f 85 cf 00 00 00    	jne    9f001100 <getlineI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:211
        { 
            if (crPtr-buffer+bytesParsed<*n)
9f001031:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f001034:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001037:	29 c2                	sub    edx,eax
9f001039:	89 d0                	mov    eax,edx
9f00103b:	89 c2                	mov    edx,eax
9f00103d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001040:	01 c2                	add    edx,eax
9f001042:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001045:	8b 00                	mov    eax,DWORD PTR [eax]
9f001047:	39 c2                	cmp    edx,eax
9f001049:	73 1f                	jae    9f00106a <getlineI+0xbe>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:212
                strncatI(lineToOutput,buffer,crPtr-buffer);
9f00104b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00104e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001051:	29 c2                	sub    edx,eax
9f001053:	89 d0                	mov    eax,edx
9f001055:	89 c2                	mov    edx,eax
9f001057:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f00105a:	83 ec 04             	sub    esp,0x4
9f00105d:	52                   	push   edx
9f00105e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001061:	50                   	push   eax
9f001062:	e8 a1 27 00 00       	call   9f003808 <strncatI>
9f001067:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:213
            if (bytesParsed+(crPtr-buffer)>*n)
9f00106a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00106d:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001070:	29 c2                	sub    edx,eax
9f001072:	89 d0                	mov    eax,edx
9f001074:	89 c2                	mov    edx,eax
9f001076:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001079:	01 c2                	add    edx,eax
9f00107b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00107e:	8b 00                	mov    eax,DWORD PTR [eax]
9f001080:	39 c2                	cmp    edx,eax
9f001082:	76 21                	jbe    9f0010a5 <getlineI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:214
                reallocI(lineToOutput,bytesParsed+(crPtr-buffer));
9f001084:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f001087:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00108a:	29 c2                	sub    edx,eax
9f00108c:	89 d0                	mov    eax,edx
9f00108e:	89 c2                	mov    edx,eax
9f001090:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001093:	01 c2                	add    edx,eax
9f001095:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001098:	83 ec 08             	sub    esp,0x8
9f00109b:	52                   	push   edx
9f00109c:	50                   	push   eax
9f00109d:	e8 16 15 00 00       	call   9f0025b8 <reallocI>
9f0010a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:215
            strncatI(lineToOutput,buffer,crPtr-buffer);
9f0010a5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0010a8:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0010ab:	29 c2                	sub    edx,eax
9f0010ad:	89 d0                	mov    eax,edx
9f0010af:	89 c2                	mov    edx,eax
9f0010b1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0010b4:	83 ec 04             	sub    esp,0x4
9f0010b7:	52                   	push   edx
9f0010b8:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f0010bb:	50                   	push   eax
9f0010bc:	e8 47 27 00 00       	call   9f003808 <strncatI>
9f0010c1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:216
            bytesParsed+=(crPtr-buffer);
9f0010c4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0010c7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0010ca:	29 c2                	sub    edx,eax
9f0010cc:	89 d0                	mov    eax,edx
9f0010ce:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:217
            seekI(stream, startFilePos+bytesParsed,SEEK_SET);
9f0010d1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f0010d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0010d7:	01 d0                	add    eax,edx
9f0010d9:	83 ec 04             	sub    esp,0x4
9f0010dc:	6a 00                	push   0x0
9f0010de:	50                   	push   eax
9f0010df:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0010e2:	e8 af fa ff ff       	call   9f000b96 <seekI>
9f0010e7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:218
            *n=lLinePtrLen;
9f0010ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0010ed:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0010f0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:219
            lineptr=&lineToOutput;
9f0010f2:	8d 45 d8             	lea    eax,[ebp-0x28]
9f0010f5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:220
            retVal=bytesParsed;
9f0010f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0010fb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:221
            goto getlineReturn;
9f0010fe:	eb 57                	jmp    9f001157 <getlineI+0x1ab>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:225
        }
        else
        {
            lLinePtrLen+=bytesReturned;
9f001100:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001103:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:226
            bytesParsed+=bytesReturned;
9f001106:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001109:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:227
            reallocI(lineToOutput,lLinePtrLen);
9f00110c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f00110f:	83 ec 08             	sub    esp,0x8
9f001112:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001115:	50                   	push   eax
9f001116:	e8 9d 14 00 00       	call   9f0025b8 <reallocI>
9f00111b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:228
            strncatI(lineToOutput,buffer,GETLINE_BUFFER_SIZE);
9f00111e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001121:	83 ec 04             	sub    esp,0x4
9f001124:	68 00 04 00 00       	push   0x400
9f001129:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f00112c:	50                   	push   eax
9f00112d:	e8 d6 26 00 00       	call   9f003808 <strncatI>
9f001132:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:207
    int startFilePos=tellI(stream);
    int retVal=-1;
    
    buffer=mallocI(GETLINE_BUFFER_SIZE);        
    
    while ((bytesReturned=readI(stream, buffer,GETLINE_BUFFER_SIZE,1))>0)
9f001135:	6a 01                	push   0x1
9f001137:	68 00 04 00 00       	push   0x400
9f00113c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f00113f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001142:	e8 99 f9 ff ff       	call   9f000ae0 <readI>
9f001147:	83 c4 10             	add    esp,0x10
9f00114a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f00114d:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f001151:	0f 8f bc fe ff ff    	jg     9f001013 <getlineI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:233
            strncatI(lineToOutput,buffer,GETLINE_BUFFER_SIZE);
        }
    }

getlineReturn:    
    freeI(buffer);
9f001157:	83 ec 0c             	sub    esp,0xc
9f00115a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f00115d:	e8 71 10 00 00       	call   9f0021d3 <freeI>
9f001162:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:234
    return retVal;
9f001165:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:235
}
9f001168:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00116b:	c9                   	leave  
9f00116c:	c3                   	ret    

9f00116d <getline>:
getline():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:238

VISIBLE size_t getline(char **lineptr, size_t *n, void *stream)
{
9f00116d:	55                   	push   ebp
9f00116e:	89 e5                	mov    ebp,esp
9f001170:	83 ec 08             	sub    esp,0x8
9f001173:	e8 6a 3e 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f001178:	05 c4 6a 00 00       	add    eax,0x6ac4
/home/yogi/src/os/aproj/libChrisOS/src/file.c:239
    return getlineI(lineptr, n, stream);
9f00117d:	83 ec 04             	sub    esp,0x4
9f001180:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001183:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001186:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001189:	e8 1e fe ff ff       	call   9f000fac <getlineI>
9f00118e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:240
}
9f001191:	c9                   	leave  
9f001192:	c3                   	ret    

9f001193 <unlink>:
unlink():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:243

VISIBLE int unlink(char *filename)
{
9f001193:	55                   	push   ebp
9f001194:	89 e5                	mov    ebp,esp
9f001196:	53                   	push   ebx
9f001197:	83 ec 04             	sub    esp,0x4
9f00119a:	e8 43 3e 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f00119f:	05 9d 6a 00 00       	add    eax,0x6a9d
/home/yogi/src/os/aproj/libChrisOS/src/file.c:244
    return do_syscall1(SYSCALL_UNLINK,(uintptr_t)filename);
9f0011a4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0011a7:	83 ec 08             	sub    esp,0x8
9f0011aa:	52                   	push   edx
9f0011ab:	6a 0d                	push   0xd
9f0011ad:	89 c3                	mov    ebx,eax
9f0011af:	e8 28 02 00 00       	call   9f0013dc <do_syscall1>
9f0011b4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:245
9f0011b7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0011ba:	c9                   	leave  
9f0011bb:	c3                   	ret    

9f0011bc <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
9f0011bc:	55                   	push   ebp
9f0011bd:	89 e5                	mov    ebp,esp
9f0011bf:	53                   	push   ebx
9f0011c0:	e8 1d 3e 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0011c5:	05 77 6a 00 00       	add    eax,0x6a77
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
9f0011ca:	b8 05 00 00 00       	mov    eax,0x5
9f0011cf:	bb 01 00 00 00       	mov    ebx,0x1
9f0011d4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0011d7:	89 d1                	mov    ecx,edx
9f0011d9:	e8 fc ff ff ff       	call   9f0011da <puts+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
9f0011de:	90                   	nop
9f0011df:	5b                   	pop    ebx
9f0011e0:	5d                   	pop    ebp
9f0011e1:	c3                   	ret    

9f0011e2 <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
9f0011e2:	55                   	push   ebp
9f0011e3:	89 e5                	mov    ebp,esp
9f0011e5:	53                   	push   ebx
9f0011e6:	83 ec 14             	sub    esp,0x14
9f0011e9:	e8 f4 3d 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0011ee:	05 4e 6a 00 00       	add    eax,0x6a4e
9f0011f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0011f6:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
9f0011f9:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
9f0011ff:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
9f001203:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
9f001206:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
9f00120a:	b8 05 00 00 00       	mov    eax,0x5
9f00120f:	bb 01 00 00 00       	mov    ebx,0x1
9f001214:	8d 55 fa             	lea    edx,[ebp-0x6]
9f001217:	89 d1                	mov    ecx,edx
9f001219:	e8 fc ff ff ff       	call   9f00121a <putc+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
9f00121e:	90                   	nop
9f00121f:	83 c4 14             	add    esp,0x14
9f001222:	5b                   	pop    ebx
9f001223:	5d                   	pop    ebp
9f001224:	c3                   	ret    

9f001225 <getchar>:
getchar():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32



VISIBLE char getchar()
{
9f001225:	55                   	push   ebp
9f001226:	89 e5                	mov    ebp,esp
9f001228:	53                   	push   ebx
9f001229:	83 ec 10             	sub    esp,0x10
9f00122c:	e8 b1 3d 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f001231:	05 0b 6a 00 00       	add    eax,0x6a0b
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:36
    char c;
    while (1==1)
    {
        READCHAR(c);
9f001236:	b8 04 00 00 00       	mov    eax,0x4
9f00123b:	ba 00 00 00 00       	mov    edx,0x0
9f001240:	89 d3                	mov    ebx,edx
9f001242:	e8 fc ff ff ff       	call   9f001243 <getchar+0x1e>
9f001247:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:37
        if (c)
9f00124a:	80 7d fb 00          	cmp    BYTE PTR [ebp-0x5],0x0
9f00124e:	74 06                	je     9f001256 <getchar+0x31>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38
            return c;
9f001250:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
9f001254:	eb 0c                	jmp    9f001262 <getchar+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:39
        asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f001256:	b8 02 03 00 00       	mov    eax,0x302
9f00125b:	e8 fc ff ff ff       	call   9f00125c <getchar+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:40
    }
9f001260:	eb d4                	jmp    9f001236 <getchar+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:42
    return 0; //Should not get here
}
9f001262:	83 c4 10             	add    esp,0x10
9f001265:	5b                   	pop    ebx
9f001266:	5d                   	pop    ebp
9f001267:	c3                   	ret    

9f001268 <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
9f001268:	55                   	push   ebp
9f001269:	89 e5                	mov    ebp,esp
9f00126b:	53                   	push   ebx
9f00126c:	83 ec 14             	sub    esp,0x14
9f00126f:	e8 6e 3d 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f001274:	05 c8 69 00 00       	add    eax,0x69c8
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:48
    char inchar;
    int len=0;
9f001279:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    char lbuf[2];
    
    lbuf[0]=lbuf[1]=0;
9f001280:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
9f001284:	0f b6 55 f2          	movzx  edx,BYTE PTR [ebp-0xe]
9f001288:	88 55 f1             	mov    BYTE PTR [ebp-0xf],dl
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52
    if (stream!=1)
9f00128b:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f00128f:	74 19                	je     9f0012aa <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54
    {
        printI("Stream %u not implemented\n",stream);
9f001291:	83 ec 08             	sub    esp,0x8
9f001294:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001297:	8d 90 9d f6 ff ff    	lea    edx,[eax-0x963]
9f00129d:	52                   	push   edx
9f00129e:	89 c3                	mov    ebx,eax
9f0012a0:	e8 a8 03 00 00       	call   9f00164d <printI>
9f0012a5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:55 (discriminator 1)
        getsError: goto getsError;
9f0012a8:	eb fe                	jmp    9f0012a8 <gets+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:60
    }
    
    while (1==1)
    {
        READCHAR(inchar)
9f0012aa:	b8 04 00 00 00       	mov    eax,0x4
9f0012af:	ba 00 00 00 00       	mov    edx,0x0
9f0012b4:	89 d3                	mov    ebx,edx
9f0012b6:	e8 fc ff ff ff       	call   9f0012b7 <gets+0x4f>
9f0012bb:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61
        if (inchar=='\b' && len>0)
9f0012be:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
9f0012c2:	75 17                	jne    9f0012db <gets+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61 (discriminator 1)
9f0012c4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f0012c8:	7e 11                	jle    9f0012db <gets+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
        {
            buffer[len]=0;
9f0012ca:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0012cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0012d0:	01 d0                	add    eax,edx
9f0012d2:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:64
            len--;
9f0012d5:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
9f0012d9:	eb 43                	jmp    9f00131e <gets+0xb6>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:66
        }
        else if (inchar!=0)
9f0012db:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
9f0012df:	74 33                	je     9f001314 <gets+0xac>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:68
        {
            lbuf[0]=inchar;
9f0012e1:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f0012e5:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:70
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
9f0012e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0012eb:	8d 50 01             	lea    edx,[eax+0x1]
9f0012ee:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0012f1:	89 c2                	mov    edx,eax
9f0012f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0012f6:	01 c2                	add    edx,eax
9f0012f8:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f0012fc:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:72
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
9f0012fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001301:	83 c0 01             	add    eax,0x1
9f001304:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f001307:	7d 06                	jge    9f00130f <gets+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:72 (discriminator 1)
9f001309:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
9f00130d:	75 9b                	jne    9f0012aa <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:74
            
                return len;
9f00130f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001312:	eb 0c                	jmp    9f001320 <gets+0xb8>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:77
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f001314:	b8 02 03 00 00       	mov    eax,0x302
9f001319:	e8 fc ff ff ff       	call   9f00131a <gets+0xb2>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:82 (discriminator 2)
        //added these for 1000 hertz clock, not needed for 100 hertz
/*            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt*/

    }
9f00131e:	eb 8a                	jmp    9f0012aa <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:83
}
9f001320:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001323:	c9                   	leave  
9f001324:	c3                   	ret    
9f001325:	66 90                	xchg   ax,ax
9f001327:	90                   	nop

9f001328 <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
bool libcInitialized = false;
char *printBuffer;


int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)
{
9f001328:	55                   	push   ebp
9f001329:	89 e5                	mov    ebp,esp
9f00132b:	56                   	push   esi
9f00132c:	53                   	push   ebx
9f00132d:	83 ec 10             	sub    esp,0x10
9f001330:	e8 ad 3c 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f001335:	05 07 69 00 00       	add    eax,0x6907
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    int retVal=0;
9f00133a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
    SYSCALL4(callnum, param1, param2, param3, param4, retVal);
9f001341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001344:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f001347:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00134a:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f00134d:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
9f001350:	e8 fc ff ff ff       	call   9f001351 <do_syscall4+0x29>
9f001355:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:21
    return retVal;
9f001358:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:22
}
9f00135b:	83 c4 10             	add    esp,0x10
9f00135e:	5b                   	pop    ebx
9f00135f:	5e                   	pop    esi
9f001360:	5d                   	pop    ebp
9f001361:	c3                   	ret    

9f001362 <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25

int do_syscall3(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
9f001362:	55                   	push   ebp
9f001363:	89 e5                	mov    ebp,esp
9f001365:	56                   	push   esi
9f001366:	53                   	push   ebx
9f001367:	83 ec 10             	sub    esp,0x10
9f00136a:	e8 73 3c 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f00136f:	05 cd 68 00 00       	add    eax,0x68cd
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    int retVal=0;
9f001374:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
    SYSCALL3(callnum, param1, param2, param3, retVal);
9f00137b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00137e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f001381:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f001384:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f001387:	be 00 00 00 00       	mov    esi,0x0
9f00138c:	e8 fc ff ff ff       	call   9f00138d <do_syscall3+0x2b>
9f001391:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:28
    return retVal;
9f001394:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:29
}
9f001397:	83 c4 10             	add    esp,0x10
9f00139a:	5b                   	pop    ebx
9f00139b:	5e                   	pop    esi
9f00139c:	5d                   	pop    ebp
9f00139d:	c3                   	ret    

9f00139e <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32

int do_syscall2(int callnum, uint32_t param1, uint32_t param2)
{
9f00139e:	55                   	push   ebp
9f00139f:	89 e5                	mov    ebp,esp
9f0013a1:	56                   	push   esi
9f0013a2:	53                   	push   ebx
9f0013a3:	83 ec 10             	sub    esp,0x10
9f0013a6:	e8 37 3c 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0013ab:	05 91 68 00 00       	add    eax,0x6891
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    int retVal=0;
9f0013b0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
    SYSCALL2(callnum, param1, param2, retVal);
9f0013b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0013ba:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0013bd:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0013c0:	ba 00 00 00 00       	mov    edx,0x0
9f0013c5:	be 00 00 00 00       	mov    esi,0x0
9f0013ca:	e8 fc ff ff ff       	call   9f0013cb <do_syscall2+0x2d>
9f0013cf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:35
    return retVal;
9f0013d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:36
}
9f0013d5:	83 c4 10             	add    esp,0x10
9f0013d8:	5b                   	pop    ebx
9f0013d9:	5e                   	pop    esi
9f0013da:	5d                   	pop    ebp
9f0013db:	c3                   	ret    

9f0013dc <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39

int do_syscall1(int callnum, uint32_t param1)
{
9f0013dc:	55                   	push   ebp
9f0013dd:	89 e5                	mov    ebp,esp
9f0013df:	56                   	push   esi
9f0013e0:	53                   	push   ebx
9f0013e1:	83 ec 10             	sub    esp,0x10
9f0013e4:	e8 f9 3b 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0013e9:	05 53 68 00 00       	add    eax,0x6853
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    int retVal=0;
9f0013ee:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
    SYSCALL1(callnum, param1, retVal);
9f0013f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0013f8:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0013fb:	b9 00 00 00 00       	mov    ecx,0x0
9f001400:	ba 00 00 00 00       	mov    edx,0x0
9f001405:	be 00 00 00 00       	mov    esi,0x0
9f00140a:	e8 fc ff ff ff       	call   9f00140b <do_syscall1+0x2f>
9f00140f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:42
    return retVal;
9f001412:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:43
}
9f001415:	83 c4 10             	add    esp,0x10
9f001418:	5b                   	pop    ebx
9f001419:	5e                   	pop    esi
9f00141a:	5d                   	pop    ebp
9f00141b:	c3                   	ret    

9f00141c <do_syscall0>:
do_syscall0():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46

int do_syscall0(int callnum)
{
9f00141c:	55                   	push   ebp
9f00141d:	89 e5                	mov    ebp,esp
9f00141f:	56                   	push   esi
9f001420:	53                   	push   ebx
9f001421:	83 ec 10             	sub    esp,0x10
9f001424:	e8 b9 3b 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f001429:	05 13 68 00 00       	add    eax,0x6813
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:47
    int retVal=0;
9f00142e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
    SYSCALL0(callnum, retVal);
9f001435:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001438:	bb 00 00 00 00       	mov    ebx,0x0
9f00143d:	b9 00 00 00 00       	mov    ecx,0x0
9f001442:	ba 00 00 00 00       	mov    edx,0x0
9f001447:	be 00 00 00 00       	mov    esi,0x0
9f00144c:	e8 fc ff ff ff       	call   9f00144d <do_syscall0+0x31>
9f001451:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:49
    return retVal;
9f001454:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:50
}
9f001457:	83 c4 10             	add    esp,0x10
9f00145a:	5b                   	pop    ebx
9f00145b:	5e                   	pop    esi
9f00145c:	5d                   	pop    ebp
9f00145d:	c3                   	ret    

9f00145e <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53

VISIBLE void __attribute__((constructor)) libc_init()
{
9f00145e:	55                   	push   ebp
9f00145f:	89 e5                	mov    ebp,esp
9f001461:	53                   	push   ebx
9f001462:	83 ec 04             	sub    esp,0x4
9f001465:	e8 7c 3b 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f00146a:	81 c3 d2 67 00 00    	add    ebx,0x67d2
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:54
    printdI(DEBUG_LIBC,"***libc_init called\n***");
9f001470:	83 ec 08             	sub    esp,0x8
9f001473:	8d 83 b8 f6 ff ff    	lea    eax,[ebx-0x948]
9f001479:	50                   	push   eax
9f00147a:	68 00 00 00 02       	push   0x2000000
9f00147f:	e8 34 02 00 00       	call   9f0016b8 <printdI>
9f001484:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:55
    if (!libcInitialized)
9f001487:	0f b6 83 48 00 00 00 	movzx  eax,BYTE PTR [ebx+0x48]
9f00148e:	83 f0 01             	xor    eax,0x1
9f001491:	84 c0                	test   al,al
9f001493:	74 7c                	je     9f001511 <libc_init+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:57
    {
        initmalloc();
9f001495:	e8 52 0c 00 00       	call   9f0020ec <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:58
        filesToCloseCount=0;
9f00149a:	8b 83 d0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x30]
9f0014a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
//        printfI("libc_init: filesToCloseCount=%u\n",filesToCloseCount);
        //processEnvp = envp;
        __asm__("mov %0,[ebp+52]\n":"=a" (processEnvp));
9f0014a6:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
9f0014a9:	89 c2                	mov    edx,eax
9f0014ab:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0014b1:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:62
        do_syscall0(SYSCALL_INVALID);
9f0014b3:	83 ec 0c             	sub    esp,0xc
9f0014b6:	6a 00                	push   0x0
9f0014b8:	e8 5f ff ff ff       	call   9f00141c <do_syscall0>
9f0014bd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:63
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
9f0014c0:	8d 83 ed 98 ff ff    	lea    eax,[ebx-0x6713]
9f0014c6:	83 ec 08             	sub    esp,0x8
9f0014c9:	50                   	push   eax
9f0014ca:	68 63 01 00 00       	push   0x163
9f0014cf:	e8 08 ff ff ff       	call   9f0013dc <do_syscall1>
9f0014d4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:64
        libcInitialized = true;
9f0014d7:	c6 83 48 00 00 00 01 	mov    BYTE PTR [ebx+0x48],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:65
        printBuffer = mallocI(0x1000);
9f0014de:	83 ec 0c             	sub    esp,0xc
9f0014e1:	68 00 10 00 00       	push   0x1000
9f0014e6:	e8 6a 0e 00 00       	call   9f002355 <mallocI>
9f0014eb:	83 c4 10             	add    esp,0x10
9f0014ee:	89 c2                	mov    edx,eax
9f0014f0:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f0014f6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:66
        printdI(DEBUG_LIBC,"***libc_init completed\n");
9f0014f8:	83 ec 08             	sub    esp,0x8
9f0014fb:	8d 83 d0 f6 ff ff    	lea    eax,[ebx-0x930]
9f001501:	50                   	push   eax
9f001502:	68 00 00 00 02       	push   0x2000000
9f001507:	e8 ac 01 00 00       	call   9f0016b8 <printdI>
9f00150c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
    }
    else
        printI("libc_init called previously, exiting\n");
}
9f00150f:	eb 12                	jmp    9f001523 <libc_init+0xc5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:69
        libcInitialized = true;
        printBuffer = mallocI(0x1000);
        printdI(DEBUG_LIBC,"***libc_init completed\n");
    }
    else
        printI("libc_init called previously, exiting\n");
9f001511:	83 ec 0c             	sub    esp,0xc
9f001514:	8d 83 e8 f6 ff ff    	lea    eax,[ebx-0x918]
9f00151a:	50                   	push   eax
9f00151b:	e8 2d 01 00 00       	call   9f00164d <printI>
9f001520:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
}
9f001523:	90                   	nop
9f001524:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001527:	c9                   	leave  
9f001528:	c3                   	ret    

9f001529 <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:73

void __attribute__((destructor)) libc_cleanup(void)
{
9f001529:	55                   	push   ebp
9f00152a:	89 e5                	mov    ebp,esp
9f00152c:	53                   	push   ebx
9f00152d:	83 ec 04             	sub    esp,0x4
9f001530:	e8 b1 3a 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f001535:	81 c3 07 67 00 00    	add    ebx,0x6707
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:74
    malloc_cleanup();
9f00153b:	e8 bf 11 00 00       	call   9f0026ff <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:75
    file_cleanup();
9f001540:	e8 65 f4 ff ff       	call   9f0009aa <file_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:76
}
9f001545:	90                   	nop
9f001546:	83 c4 04             	add    esp,0x4
9f001549:	5b                   	pop    ebx
9f00154a:	5d                   	pop    ebp
9f00154b:	c3                   	ret    

9f00154c <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:79

VISIBLE int print(const char *format, ...)
{
9f00154c:	55                   	push   ebp
9f00154d:	89 e5                	mov    ebp,esp
9f00154f:	53                   	push   ebx
9f001550:	83 ec 14             	sub    esp,0x14
9f001553:	e8 8e 3a 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f001558:	81 c3 e4 66 00 00    	add    ebx,0x66e4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:81
    va_list args;
    va_start( args, format );
9f00155e:	8d 45 0c             	lea    eax,[ebp+0xc]
9f001561:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:83
    
    int size = vsprintf(printBuffer, format, args);
9f001564:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001567:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f00156d:	8b 00                	mov    eax,DWORD PTR [eax]
9f00156f:	83 ec 04             	sub    esp,0x4
9f001572:	52                   	push   edx
9f001573:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001576:	50                   	push   eax
9f001577:	e8 dd 1c 00 00       	call   9f003259 <vsprintf>
9f00157c:	83 c4 10             	add    esp,0x10
9f00157f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:84
    do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f001582:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001585:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f00158b:	8b 12                	mov    edx,DWORD PTR [edx]
9f00158d:	50                   	push   eax
9f00158e:	52                   	push   edx
9f00158f:	6a 01                	push   0x1
9f001591:	6a 05                	push   0x5
9f001593:	e8 ca fd ff ff       	call   9f001362 <do_syscall3>
9f001598:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:85
    return 0;
9f00159b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:86
}
9f0015a0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0015a3:	c9                   	leave  
9f0015a4:	c3                   	ret    

9f0015a5 <printf>:
printf():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:89

VISIBLE int printf(const char *format, ...)
{
9f0015a5:	55                   	push   ebp
9f0015a6:	89 e5                	mov    ebp,esp
9f0015a8:	53                   	push   ebx
9f0015a9:	83 ec 14             	sub    esp,0x14
9f0015ac:	e8 35 3a 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f0015b1:	81 c3 8b 66 00 00    	add    ebx,0x668b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:91
    va_list args;
    va_start( args, format );
9f0015b7:	8d 45 0c             	lea    eax,[ebp+0xc]
9f0015ba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:93
    
    int size = vsprintf(printBuffer, format, args);
9f0015bd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0015c0:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f0015c6:	8b 00                	mov    eax,DWORD PTR [eax]
9f0015c8:	83 ec 04             	sub    esp,0x4
9f0015cb:	52                   	push   edx
9f0015cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0015cf:	50                   	push   eax
9f0015d0:	e8 84 1c 00 00       	call   9f003259 <vsprintf>
9f0015d5:	83 c4 10             	add    esp,0x10
9f0015d8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:94
    return do_syscall3(SYSCALL_WRITE, STDOUT_FILE, (uint32_t)printBuffer, size);
9f0015db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0015de:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f0015e4:	8b 12                	mov    edx,DWORD PTR [edx]
9f0015e6:	50                   	push   eax
9f0015e7:	52                   	push   edx
9f0015e8:	6a 01                	push   0x1
9f0015ea:	6a 05                	push   0x5
9f0015ec:	e8 71 fd ff ff       	call   9f001362 <do_syscall3>
9f0015f1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:95
}
9f0015f4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0015f7:	c9                   	leave  
9f0015f8:	c3                   	ret    

9f0015f9 <printfI>:
printfI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:98

int printfI(const char *format, ...)
{
9f0015f9:	55                   	push   ebp
9f0015fa:	89 e5                	mov    ebp,esp
9f0015fc:	53                   	push   ebx
9f0015fd:	83 ec 14             	sub    esp,0x14
9f001600:	e8 e1 39 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f001605:	81 c3 37 66 00 00    	add    ebx,0x6637
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:100
    va_list args;
    va_start( args, format );
9f00160b:	8d 45 0c             	lea    eax,[ebp+0xc]
9f00160e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:102
    
    int size = vsprintf(printBuffer, format, args);
9f001611:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001614:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f00161a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00161c:	83 ec 04             	sub    esp,0x4
9f00161f:	52                   	push   edx
9f001620:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001623:	50                   	push   eax
9f001624:	e8 30 1c 00 00       	call   9f003259 <vsprintf>
9f001629:	83 c4 10             	add    esp,0x10
9f00162c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:103
    return do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f00162f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001632:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f001638:	8b 12                	mov    edx,DWORD PTR [edx]
9f00163a:	50                   	push   eax
9f00163b:	52                   	push   edx
9f00163c:	6a 01                	push   0x1
9f00163e:	6a 05                	push   0x5
9f001640:	e8 1d fd ff ff       	call   9f001362 <do_syscall3>
9f001645:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:104
}
9f001648:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00164b:	c9                   	leave  
9f00164c:	c3                   	ret    

9f00164d <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:107

int printI(const char *format, ...)
{
9f00164d:	55                   	push   ebp
9f00164e:	89 e5                	mov    ebp,esp
9f001650:	83 ec 10             	sub    esp,0x10
9f001653:	e8 8a 39 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f001658:	05 e4 65 00 00       	add    eax,0x65e4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:109
    va_list args;
    va_start( args, format );
9f00165d:	8d 45 0c             	lea    eax,[ebp+0xc]
9f001660:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:110
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
9f001663:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001666:	89 c2                	mov    edx,eax
9f001668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00166b:	52                   	push   edx
9f00166c:	50                   	push   eax
9f00166d:	68 00 03 00 00       	push   0x300
9f001672:	e8 27 fd ff ff       	call   9f00139e <do_syscall2>
9f001677:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:111
    return 0;
9f00167a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:112
}
9f00167f:	c9                   	leave  
9f001680:	c3                   	ret    

9f001681 <printd>:
printd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:115

VISIBLE int printd(uint32_t DebugLevel, const char *format, ...)
{
9f001681:	55                   	push   ebp
9f001682:	89 e5                	mov    ebp,esp
9f001684:	83 ec 10             	sub    esp,0x10
9f001687:	e8 56 39 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f00168c:	05 b0 65 00 00       	add    eax,0x65b0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:117
    va_list args;
    va_start( args, format );
9f001691:	8d 45 10             	lea    eax,[ebp+0x10]
9f001694:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:119
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f001697:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00169a:	89 c2                	mov    edx,eax
9f00169c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00169f:	52                   	push   edx
9f0016a0:	50                   	push   eax
9f0016a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0016a4:	68 01 03 00 00       	push   0x301
9f0016a9:	e8 b4 fc ff ff       	call   9f001362 <do_syscall3>
9f0016ae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:120
    return 0;
9f0016b1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:122
    va_end(args);
}
9f0016b6:	c9                   	leave  
9f0016b7:	c3                   	ret    

9f0016b8 <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:125

int printdI(uint32_t DebugLevel, const char *format, ...)
{
9f0016b8:	55                   	push   ebp
9f0016b9:	89 e5                	mov    ebp,esp
9f0016bb:	83 ec 10             	sub    esp,0x10
9f0016be:	e8 1f 39 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0016c3:	05 79 65 00 00       	add    eax,0x6579
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:127
    va_list args;
    va_start( args, format );
9f0016c8:	8d 45 10             	lea    eax,[ebp+0x10]
9f0016cb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:129
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f0016ce:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0016d1:	89 c2                	mov    edx,eax
9f0016d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0016d6:	52                   	push   edx
9f0016d7:	50                   	push   eax
9f0016d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0016db:	68 01 03 00 00       	push   0x301
9f0016e0:	e8 7d fc ff ff       	call   9f001362 <do_syscall3>
9f0016e5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:130
    return 0;
9f0016e8:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:132
    va_end(args);
}
9f0016ed:	c9                   	leave  
9f0016ee:	c3                   	ret    

9f0016ef <sleepMS>:
sleepMS():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:135

VISIBLE unsigned int sleepMS (unsigned int __ms)
{
9f0016ef:	55                   	push   ebp
9f0016f0:	89 e5                	mov    ebp,esp
9f0016f2:	56                   	push   esi
9f0016f3:	53                   	push   ebx
9f0016f4:	83 ec 10             	sub    esp,0x10
9f0016f7:	e8 e6 38 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0016fc:	05 40 65 00 00       	add    eax,0x6540
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:136
    int ms=__ms*MS_PER_TICK;
9f001701:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001704:	69 c0 e8 03 00 00    	imul   eax,eax,0x3e8
9f00170a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00170f:	f7 e2                	mul    edx
9f001711:	89 d0                	mov    eax,edx
9f001713:	c1 e8 05             	shr    eax,0x5
9f001716:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:137
    return SLEEP_TICKS(ms);
9f001719:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00171c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00171f:	b8 70 01 00 00       	mov    eax,0x170
9f001724:	bb 00 00 00 00       	mov    ebx,0x0
9f001729:	b9 00 00 00 00       	mov    ecx,0x0
9f00172e:	ba 00 00 00 00       	mov    edx,0x0
9f001733:	be 00 00 00 00       	mov    esi,0x0
9f001738:	e8 fc ff ff ff       	call   9f001739 <sleepMS+0x4a>
9f00173d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f001740:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001743:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001746:	01 d0                	add    eax,edx
9f001748:	83 e8 01             	sub    eax,0x1
9f00174b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f00174e:	b8 66 01 00 00       	mov    eax,0x166
9f001753:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
9f001756:	b9 00 00 00 00       	mov    ecx,0x0
9f00175b:	ba 00 00 00 00       	mov    edx,0x0
9f001760:	be 00 00 00 00       	mov    esi,0x0
9f001765:	e8 fc ff ff ff       	call   9f001766 <sleepMS+0x77>
9f00176a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00176d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:138
}
9f001770:	83 c4 10             	add    esp,0x10
9f001773:	5b                   	pop    ebx
9f001774:	5e                   	pop    esi
9f001775:	5d                   	pop    ebp
9f001776:	c3                   	ret    

9f001777 <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:141

VISIBLE unsigned int sleep (unsigned int __seconds)
{
9f001777:	55                   	push   ebp
9f001778:	89 e5                	mov    ebp,esp
9f00177a:	56                   	push   esi
9f00177b:	53                   	push   ebx
9f00177c:	83 ec 10             	sub    esp,0x10
9f00177f:	e8 5e 38 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f001784:	05 b8 64 00 00       	add    eax,0x64b8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:142
    return SLEEP_SECONDS(__seconds);
9f001789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00178c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f00178f:	b8 70 01 00 00       	mov    eax,0x170
9f001794:	bb 00 00 00 00       	mov    ebx,0x0
9f001799:	b9 00 00 00 00       	mov    ecx,0x0
9f00179e:	ba 00 00 00 00       	mov    edx,0x0
9f0017a3:	be 00 00 00 00       	mov    esi,0x0
9f0017a8:	e8 fc ff ff ff       	call   9f0017a9 <sleep+0x32>
9f0017ad:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0017b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0017b3:	6b d0 64             	imul   edx,eax,0x64
9f0017b6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0017b9:	01 d0                	add    eax,edx
9f0017bb:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f0017be:	b8 66 01 00 00       	mov    eax,0x166
9f0017c3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f0017c6:	b9 00 00 00 00       	mov    ecx,0x0
9f0017cb:	ba 00 00 00 00       	mov    edx,0x0
9f0017d0:	be 00 00 00 00       	mov    esi,0x0
9f0017d5:	e8 fc ff ff ff       	call   9f0017d6 <sleep+0x5f>
9f0017da:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0017dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:143
}
9f0017e0:	83 c4 10             	add    esp,0x10
9f0017e3:	5b                   	pop    ebx
9f0017e4:	5e                   	pop    esi
9f0017e5:	5d                   	pop    ebp
9f0017e6:	c3                   	ret    

9f0017e7 <sleepTicks>:
sleepTicks():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:146

VISIBLE unsigned int sleepTicks(unsigned int __ticks)
{
9f0017e7:	55                   	push   ebp
9f0017e8:	89 e5                	mov    ebp,esp
9f0017ea:	56                   	push   esi
9f0017eb:	53                   	push   ebx
9f0017ec:	83 ec 10             	sub    esp,0x10
9f0017ef:	e8 ee 37 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0017f4:	05 48 64 00 00       	add    eax,0x6448
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:147
    return SLEEP_TICKS(__ticks);
9f0017f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0017fc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0017ff:	b8 70 01 00 00       	mov    eax,0x170
9f001804:	bb 00 00 00 00       	mov    ebx,0x0
9f001809:	b9 00 00 00 00       	mov    ecx,0x0
9f00180e:	ba 00 00 00 00       	mov    edx,0x0
9f001813:	be 00 00 00 00       	mov    esi,0x0
9f001818:	e8 fc ff ff ff       	call   9f001819 <sleepTicks+0x32>
9f00181d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001820:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001823:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001826:	01 d0                	add    eax,edx
9f001828:	83 e8 01             	sub    eax,0x1
9f00182b:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f00182e:	b8 66 01 00 00       	mov    eax,0x166
9f001833:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f001836:	b9 00 00 00 00       	mov    ecx,0x0
9f00183b:	ba 00 00 00 00       	mov    edx,0x0
9f001840:	be 00 00 00 00       	mov    esi,0x0
9f001845:	e8 fc ff ff ff       	call   9f001846 <sleepTicks+0x5f>
9f00184a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f00184d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:149
    
}
9f001850:	83 c4 10             	add    esp,0x10
9f001853:	5b                   	pop    ebx
9f001854:	5e                   	pop    esi
9f001855:	5d                   	pop    ebp
9f001856:	c3                   	ret    

9f001857 <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:152

void stop()
{
9f001857:	55                   	push   ebp
9f001858:	89 e5                	mov    ebp,esp
9f00185a:	e8 83 37 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f00185f:	05 dd 63 00 00       	add    eax,0x63dd
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:153
    do_syscall0(SYSCALL_STOP);
9f001864:	68 68 01 00 00       	push   0x168
9f001869:	e8 ae fb ff ff       	call   9f00141c <do_syscall0>
9f00186e:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:154
}
9f001871:	90                   	nop
9f001872:	c9                   	leave  
9f001873:	c3                   	ret    

9f001874 <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:157

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
9f001874:	55                   	push   ebp
9f001875:	89 e5                	mov    ebp,esp
9f001877:	e8 66 37 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f00187c:	05 c0 63 00 00       	add    eax,0x63c0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:158
    do_syscall3(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
9f001881:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f001884:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001887:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00188a:	51                   	push   ecx
9f00188b:	52                   	push   edx
9f00188c:	50                   	push   eax
9f00188d:	68 67 01 00 00       	push   0x167
9f001892:	e8 cb fa ff ff       	call   9f001362 <do_syscall3>
9f001897:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:159
}
9f00189a:	90                   	nop
9f00189b:	c9                   	leave  
9f00189c:	c3                   	ret    

9f00189d <fork>:
fork():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:162

VISIBLE int fork()
{
9f00189d:	55                   	push   ebp
9f00189e:	89 e5                	mov    ebp,esp
9f0018a0:	83 ec 10             	sub    esp,0x10
9f0018a3:	e8 3a 37 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0018a8:	05 94 63 00 00       	add    eax,0x6394
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:163
    uint32_t retVal = 0;
9f0018ad:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:165
    //return do_syscall0(SYSCALL_FORK);
    asm("call sysEnter_Vector\n":"=a" (retVal): "a" (SYSCALL_FORK));
9f0018b4:	b8 0e 00 00 00       	mov    eax,0xe
9f0018b9:	e8 fc ff ff ff       	call   9f0018ba <fork+0x1d>
9f0018be:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:166
    return retVal;
9f0018c1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:167
}
9f0018c4:	c9                   	leave  
9f0018c5:	c3                   	ret    

9f0018c6 <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:170

VISIBLE int exec(char* path, int argc, char** argv)
{
9f0018c6:	55                   	push   ebp
9f0018c7:	89 e5                	mov    ebp,esp
9f0018c9:	83 ec 10             	sub    esp,0x10
9f0018cc:	e8 11 37 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0018d1:	05 6b 63 00 00       	add    eax,0x636b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:171
    int pid=0;
9f0018d6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:172
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
9f0018dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0018e0:	8d 80 0e f7 ff ff    	lea    eax,[eax-0x8f2]
9f0018e6:	50                   	push   eax
9f0018e7:	68 00 00 00 02       	push   0x2000000
9f0018ec:	e8 c7 fd ff ff       	call   9f0016b8 <printdI>
9f0018f1:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:173
    pid = do_syscall3(SYSCALL_EXEC, (uintptr_t)path, argc, (uintptr_t)argv);
9f0018f4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0018f7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0018fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0018fd:	51                   	push   ecx
9f0018fe:	52                   	push   edx
9f0018ff:	50                   	push   eax
9f001900:	6a 59                	push   0x59
9f001902:	e8 5b fa ff ff       	call   9f001362 <do_syscall3>
9f001907:	83 c4 10             	add    esp,0x10
9f00190a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:174
    return pid;
9f00190d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:175
}
9f001910:	c9                   	leave  
9f001911:	c3                   	ret    

9f001912 <execb>:
execb():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:178

VISIBLE int execb(char* path)
{
9f001912:	55                   	push   ebp
9f001913:	89 e5                	mov    ebp,esp
9f001915:	53                   	push   ebx
9f001916:	83 ec 24             	sub    esp,0x24
9f001919:	e8 c8 36 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f00191e:	81 c3 1e 63 00 00    	add    ebx,0x631e
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:179
    int pid=0, argc=0;
9f001924:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
9f00192b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:181
    char** argv;
    char* spacePtr=path, *lastSpacePtr=path;
9f001932:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001935:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001938:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00193b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:183
    char* program;
    program=mallocI(512);
9f00193e:	83 ec 0c             	sub    esp,0xc
9f001941:	68 00 02 00 00       	push   0x200
9f001946:	e8 0a 0a 00 00       	call   9f002355 <mallocI>
9f00194b:	83 c4 10             	add    esp,0x10
9f00194e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:186
    do
    {
        spacePtr=strstrI(spacePtr," ");
9f001951:	83 ec 08             	sub    esp,0x8
9f001954:	8d 83 21 f7 ff ff    	lea    eax,[ebx-0x8df]
9f00195a:	50                   	push   eax
9f00195b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00195e:	e8 e3 28 00 00       	call   9f004246 <strstrI>
9f001963:	83 c4 10             	add    esp,0x10
9f001966:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:187
        if (argc==0)
9f001969:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f00196d:	75 44                	jne    9f0019b3 <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:189
        {
            if (spacePtr==0)
9f00196f:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f001973:	75 22                	jne    9f001997 <execb+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:190
                strncpyI(program, path, strlenI(path));
9f001975:	83 ec 0c             	sub    esp,0xc
9f001978:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00197b:	e8 f0 20 00 00       	call   9f003a70 <strlenI>
9f001980:	83 c4 10             	add    esp,0x10
9f001983:	83 ec 04             	sub    esp,0x4
9f001986:	50                   	push   eax
9f001987:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00198a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f00198d:	e8 52 22 00 00       	call   9f003be4 <strncpyI>
9f001992:	83 c4 10             	add    esp,0x10
9f001995:	eb 1c                	jmp    9f0019b3 <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:192
            else
                strncpyI(program, path, spacePtr-path);
9f001997:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00199a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00199d:	29 c2                	sub    edx,eax
9f00199f:	89 d0                	mov    eax,edx
9f0019a1:	83 ec 04             	sub    esp,0x4
9f0019a4:	50                   	push   eax
9f0019a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0019a8:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f0019ab:	e8 34 22 00 00       	call   9f003be4 <strncpyI>
9f0019b0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:194
        }
        argc++;
9f0019b3:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:196
            
    } while (spacePtr++);
9f0019b7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0019ba:	8d 50 01             	lea    edx,[eax+0x1]
9f0019bd:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0019c0:	85 c0                	test   eax,eax
9f0019c2:	75 8d                	jne    9f001951 <execb+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:198
    
    argv=mallocI((argc*50)+(argc*4));
9f0019c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0019c7:	6b c0 36             	imul   eax,eax,0x36
9f0019ca:	83 ec 0c             	sub    esp,0xc
9f0019cd:	50                   	push   eax
9f0019ce:	e8 82 09 00 00       	call   9f002355 <mallocI>
9f0019d3:	83 c4 10             	add    esp,0x10
9f0019d6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:199
    int argvPtr=4*argc;
9f0019d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0019dc:	c1 e0 02             	shl    eax,0x2
9f0019df:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:200
    spacePtr=path;
9f0019e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0019e5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:201
    for (int cnt=0;cnt<argc; cnt++)
9f0019e8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
9f0019ef:	e9 c8 00 00 00       	jmp    9f001abc <execb+0x1aa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:203
    {
        argv[cnt]=(char*)argv+argvPtr;
9f0019f4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0019f7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0019fe:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001a01:	01 d0                	add    eax,edx
9f001a03:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
9f001a06:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
9f001a09:	01 ca                	add    edx,ecx
9f001a0b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:204
        spacePtr=strstrI(spacePtr," ");
9f001a0d:	83 ec 08             	sub    esp,0x8
9f001a10:	8d 83 21 f7 ff ff    	lea    eax,[ebx-0x8df]
9f001a16:	50                   	push   eax
9f001a17:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001a1a:	e8 27 28 00 00       	call   9f004246 <strstrI>
9f001a1f:	83 c4 10             	add    esp,0x10
9f001a22:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:205
        if (spacePtr)
9f001a25:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f001a29:	74 2f                	je     9f001a5a <execb+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:206
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f001a2b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001a2e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001a31:	29 c2                	sub    edx,eax
9f001a33:	89 d0                	mov    eax,edx
9f001a35:	89 c1                	mov    ecx,eax
9f001a37:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001a3a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001a41:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001a44:	01 d0                	add    eax,edx
9f001a46:	8b 00                	mov    eax,DWORD PTR [eax]
9f001a48:	83 ec 04             	sub    esp,0x4
9f001a4b:	51                   	push   ecx
9f001a4c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001a4f:	50                   	push   eax
9f001a50:	e8 8f 21 00 00       	call   9f003be4 <strncpyI>
9f001a55:	83 c4 10             	add    esp,0x10
9f001a58:	eb 31                	jmp    9f001a8b <execb+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:208
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f001a5a:	83 ec 0c             	sub    esp,0xc
9f001a5d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001a60:	e8 0b 20 00 00       	call   9f003a70 <strlenI>
9f001a65:	83 c4 10             	add    esp,0x10
9f001a68:	89 c2                	mov    edx,eax
9f001a6a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001a6d:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f001a74:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001a77:	01 c8                	add    eax,ecx
9f001a79:	8b 00                	mov    eax,DWORD PTR [eax]
9f001a7b:	83 ec 04             	sub    esp,0x4
9f001a7e:	52                   	push   edx
9f001a7f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001a82:	50                   	push   eax
9f001a83:	e8 5c 21 00 00       	call   9f003be4 <strncpyI>
9f001a88:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:209 (discriminator 2)
        strtrimI(argv[cnt]);
9f001a8b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001a8e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001a95:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001a98:	01 d0                	add    eax,edx
9f001a9a:	8b 00                	mov    eax,DWORD PTR [eax]
9f001a9c:	83 ec 0c             	sub    esp,0xc
9f001a9f:	50                   	push   eax
9f001aa0:	e8 07 25 00 00       	call   9f003fac <strtrimI>
9f001aa5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:210 (discriminator 2)
        lastSpacePtr=spacePtr++;
9f001aa8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001aab:	8d 50 01             	lea    edx,[eax+0x1]
9f001aae:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001ab1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:211 (discriminator 2)
        argvPtr+=50;
9f001ab4:	83 45 e8 32          	add    DWORD PTR [ebp-0x18],0x32
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:201 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((argc*50)+(argc*4));
    int argvPtr=4*argc;
    spacePtr=path;
    for (int cnt=0;cnt<argc; cnt++)
9f001ab8:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:201 (discriminator 1)
9f001abc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001abf:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001ac2:	0f 8c 2c ff ff ff    	jl     9f0019f4 <execb+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:213
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
        strtrimI(argv[cnt]);
        lastSpacePtr=spacePtr++;
        argvPtr+=50;
    }
    printdI(DEBUG_LIBC,"libc: execb for %s\n",path);;
9f001ac8:	83 ec 04             	sub    esp,0x4
9f001acb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001ace:	8d 83 23 f7 ff ff    	lea    eax,[ebx-0x8dd]
9f001ad4:	50                   	push   eax
9f001ad5:	68 00 00 00 02       	push   0x2000000
9f001ada:	e8 d9 fb ff ff       	call   9f0016b8 <printdI>
9f001adf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:214
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)program, argc, (uintptr_t)argv);
9f001ae2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
9f001ae5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001ae8:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001aeb:	51                   	push   ecx
9f001aec:	52                   	push   edx
9f001aed:	50                   	push   eax
9f001aee:	68 05 03 00 00       	push   0x305
9f001af3:	e8 6a f8 ff ff       	call   9f001362 <do_syscall3>
9f001af8:	83 c4 10             	add    esp,0x10
9f001afb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:218
/*    __asm__("push ds\nint 0x80\npop ds\n"
            :"=a" (pid)
            :"a" (0x59),"b" (program),"c" (argc),"d" (argv));*/
    return pid;
9f001afe:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:221
    freeI(argv);
    freeI(program);
}
9f001b01:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001b04:	c9                   	leave  
9f001b05:	c3                   	ret    

9f001b06 <execa>:
execa():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:224

VISIBLE int execa(char* path, int argc, char** argv)
{
9f001b06:	55                   	push   ebp
9f001b07:	89 e5                	mov    ebp,esp
9f001b09:	83 ec 10             	sub    esp,0x10
9f001b0c:	e8 d1 34 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f001b11:	05 2b 61 00 00       	add    eax,0x612b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:225
    int pid=0;
9f001b16:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:226
    printdI(DEBUG_LIBC,"libc: execa for %s\n",path);;
9f001b1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001b20:	8d 80 37 f7 ff ff    	lea    eax,[eax-0x8c9]
9f001b26:	50                   	push   eax
9f001b27:	68 00 00 00 02       	push   0x2000000
9f001b2c:	e8 87 fb ff ff       	call   9f0016b8 <printdI>
9f001b31:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:227
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)path, argc, (uintptr_t)argv);
9f001b34:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f001b37:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001b3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b3d:	51                   	push   ecx
9f001b3e:	52                   	push   edx
9f001b3f:	50                   	push   eax
9f001b40:	68 05 03 00 00       	push   0x305
9f001b45:	e8 18 f8 ff ff       	call   9f001362 <do_syscall3>
9f001b4a:	83 c4 10             	add    esp,0x10
9f001b4d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:228
    return pid;
9f001b50:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:229
}
9f001b53:	c9                   	leave  
9f001b54:	c3                   	ret    

9f001b55 <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:232

VISIBLE int waitpid(uint32_t pid)
{
9f001b55:	55                   	push   ebp
9f001b56:	89 e5                	mov    ebp,esp
9f001b58:	e8 85 34 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f001b5d:	05 df 60 00 00       	add    eax,0x60df
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:233
    return do_syscall1(SYSCALL_WAITFORPID,pid);
9f001b62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001b65:	6a 61                	push   0x61
9f001b67:	e8 70 f8 ff ff       	call   9f0013dc <do_syscall1>
9f001b6c:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:234
}
9f001b6f:	c9                   	leave  
9f001b70:	c3                   	ret    

9f001b71 <exit>:
exit():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:238


VISIBLE void exit (int status)
{
9f001b71:	55                   	push   ebp
9f001b72:	89 e5                	mov    ebp,esp
9f001b74:	e8 69 34 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f001b79:	05 c3 60 00 00       	add    eax,0x60c3
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:239
    do_syscall2(SYSCALL_ENDPROCESS, 0, status);
9f001b7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b81:	50                   	push   eax
9f001b82:	6a 00                	push   0x0
9f001b84:	6a 01                	push   0x1
9f001b86:	e8 13 f8 ff ff       	call   9f00139e <do_syscall2>
9f001b8b:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:240
}
9f001b8e:	90                   	nop
9f001b8f:	c9                   	leave  
9f001b90:	c3                   	ret    

9f001b91 <setcwd>:
setcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:243

VISIBLE char* setcwd(char* buf, size_t size)
{
9f001b91:	55                   	push   ebp
9f001b92:	89 e5                	mov    ebp,esp
9f001b94:	e8 49 34 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f001b99:	05 a3 60 00 00       	add    eax,0x60a3
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:244
    return (char*)do_syscall2(SYSCALL_SETCWD,(uint32_t)buf,size);
9f001b9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001ba1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001ba4:	50                   	push   eax
9f001ba5:	6a 50                	push   0x50
9f001ba7:	e8 f2 f7 ff ff       	call   9f00139e <do_syscall2>
9f001bac:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:245
}
9f001baf:	c9                   	leave  
9f001bb0:	c3                   	ret    

9f001bb1 <splitI>:
splitI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:248

size_t splitI(char *buffer, char *argv[], size_t argv_size)
{
9f001bb1:	55                   	push   ebp
9f001bb2:	89 e5                	mov    ebp,esp
9f001bb4:	83 ec 20             	sub    esp,0x20
9f001bb7:	e8 26 34 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f001bbc:	05 80 60 00 00       	add    eax,0x6080
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:251
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
9f001bc1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:252
    size_t argc = 0;
9f001bc8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:254

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f001bcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001bd2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
9f001bd5:	e9 d8 00 00 00       	jmp    9f001cb2 <splitI+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:255
        c = (unsigned char) *p;
9f001bda:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001bdd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001be0:	0f b6 c0             	movzx  eax,al
9f001be3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:256
        switch (state) {
9f001be6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001be9:	83 f8 01             	cmp    eax,0x1
9f001bec:	74 7e                	je     9f001c6c <splitI+0xbb>
9f001bee:	83 f8 01             	cmp    eax,0x1
9f001bf1:	72 0a                	jb     9f001bfd <splitI+0x4c>
9f001bf3:	83 f8 02             	cmp    eax,0x2
9f001bf6:	74 45                	je     9f001c3d <splitI+0x8c>
9f001bf8:	e9 b1 00 00 00       	jmp    9f001cae <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:258
        case DULL:
            if (ISSPACE(c)) {
9f001bfd:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001c01:	0f 94 c0             	sete   al
9f001c04:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
9f001c07:	0f b6 45 eb          	movzx  eax,BYTE PTR [ebp-0x15]
9f001c0b:	84 c0                	test   al,al
9f001c0d:	0f 85 94 00 00 00    	jne    9f001ca7 <splitI+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:262
                continue;
            }

            if (c == '"') {
9f001c13:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001c17:	75 15                	jne    9f001c2e <splitI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:263
                state = IN_STRING;
9f001c19:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:264
                start_of_word = p + 1; 
9f001c20:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001c23:	83 c0 01             	add    eax,0x1
9f001c26:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:265
                continue;
9f001c29:	e9 80 00 00 00       	jmp    9f001cae <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:267
            }
            state = IN_WORD;
9f001c2e:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:268
            start_of_word = p;
9f001c35:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001c38:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:269
            continue;
9f001c3b:	eb 71                	jmp    9f001cae <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:272

        case IN_STRING:
            if (c == '"') {
9f001c3d:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001c41:	75 67                	jne    9f001caa <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:273
                *p = 0;
9f001c43:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001c46:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:274
                argv[argc++] = start_of_word;
9f001c49:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001c4c:	8d 50 01             	lea    edx,[eax+0x1]
9f001c4f:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001c52:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001c59:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001c5c:	01 c2                	add    edx,eax
9f001c5e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001c61:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:275
                state = DULL;
9f001c63:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:277
            }
            continue;
9f001c6a:	eb 3e                	jmp    9f001caa <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:280

        case IN_WORD:
            if (ISSPACE(c)) {
9f001c6c:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001c70:	0f 94 c0             	sete   al
9f001c73:	88 45 ea             	mov    BYTE PTR [ebp-0x16],al
9f001c76:	0f b6 45 ea          	movzx  eax,BYTE PTR [ebp-0x16]
9f001c7a:	84 c0                	test   al,al
9f001c7c:	74 2f                	je     9f001cad <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:281
                *p = 0;
9f001c7e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001c81:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:282
                argv[argc++] = start_of_word;
9f001c84:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001c87:	8d 50 01             	lea    edx,[eax+0x1]
9f001c8a:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001c8d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001c94:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001c97:	01 c2                	add    edx,eax
9f001c99:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001c9c:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:283
                state = DULL;
9f001c9e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:285
            }
            continue;
9f001ca5:	eb 06                	jmp    9f001cad <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:259
    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
        c = (unsigned char) *p;
        switch (state) {
        case DULL:
            if (ISSPACE(c)) {
                continue;
9f001ca7:	90                   	nop
9f001ca8:	eb 04                	jmp    9f001cae <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:277
            if (c == '"') {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f001caa:	90                   	nop
9f001cab:	eb 01                	jmp    9f001cae <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:285
            if (ISSPACE(c)) {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f001cad:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:254 (discriminator 2)
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
    size_t argc = 0;

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f001cae:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:254 (discriminator 1)
9f001cb2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001cb5:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f001cb8:	73 0e                	jae    9f001cc8 <splitI+0x117>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:254 (discriminator 3)
9f001cba:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001cbd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001cc0:	84 c0                	test   al,al
9f001cc2:	0f 85 12 ff ff ff    	jne    9f001bda <splitI+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:289
            }
            continue;
        }
    }

    if (state != DULL && argc < argv_size)
9f001cc8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001ccc:	74 22                	je     9f001cf0 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:289 (discriminator 1)
9f001cce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001cd1:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f001cd4:	73 1a                	jae    9f001cf0 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:290
        argv[argc++] = start_of_word;
9f001cd6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001cd9:	8d 50 01             	lea    edx,[eax+0x1]
9f001cdc:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001cdf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001ce6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001ce9:	01 c2                	add    edx,eax
9f001ceb:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001cee:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:292

    return argc;
9f001cf0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:293
}
9f001cf3:	c9                   	leave  
9f001cf4:	c3                   	ret    

9f001cf5 <split>:
split():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:296

VISIBLE size_t split(char *buffer, char *argv[], size_t argv_size)
{
9f001cf5:	55                   	push   ebp
9f001cf6:	89 e5                	mov    ebp,esp
9f001cf8:	e8 e5 32 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f001cfd:	05 3f 5f 00 00       	add    eax,0x5f3f
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:297
    return splitI(buffer, argv, argv_size);
9f001d02:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001d05:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001d08:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001d0b:	e8 a1 fe ff ff       	call   9f001bb1 <splitI>
9f001d10:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:298
}
9f001d13:	c9                   	leave  
9f001d14:	c3                   	ret    

9f001d15 <cmdlineToArgvI>:
cmdlineToArgvI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:301

char** cmdlineToArgvI(const char* cmdline, int *argc)
{
9f001d15:	55                   	push   ebp
9f001d16:	89 e5                	mov    ebp,esp
9f001d18:	56                   	push   esi
9f001d19:	53                   	push   ebx
9f001d1a:	81 ec 30 04 00 00    	sub    esp,0x430
9f001d20:	e8 c1 32 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f001d25:	81 c3 17 5f 00 00    	add    ebx,0x5f17
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:304
    char** argv;
    char cmd[1024];
    char *spacePtr=cmd, *lastSpacePtr=cmd, *quotePtr=cmd;
9f001d2b:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001d31:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001d34:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001d3a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001d3d:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001d43:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:305
    char dblquote[2] = {'"',0};
9f001d46:	c6 85 d6 fb ff ff 22 	mov    BYTE PTR [ebp-0x42a],0x22
9f001d4d:	c6 85 d7 fb ff ff 00 	mov    BYTE PTR [ebp-0x429],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:306
    *argc = 0;
9f001d54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d57:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:308
    
    strncpyI(cmd,cmdline,1024);
9f001d5d:	83 ec 04             	sub    esp,0x4
9f001d60:	68 00 04 00 00       	push   0x400
9f001d65:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001d68:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001d6e:	50                   	push   eax
9f001d6f:	e8 70 1e 00 00       	call   9f003be4 <strncpyI>
9f001d74:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:309
    strtrimI(cmd);
9f001d77:	83 ec 0c             	sub    esp,0xc
9f001d7a:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001d80:	50                   	push   eax
9f001d81:	e8 26 22 00 00       	call   9f003fac <strtrimI>
9f001d86:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:312
    do
    {
        quotePtr = strnstrI(spacePtr,dblquote,4000);        //Need to honor double quotes
9f001d89:	83 ec 04             	sub    esp,0x4
9f001d8c:	68 a0 0f 00 00       	push   0xfa0
9f001d91:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001d97:	50                   	push   eax
9f001d98:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001d9b:	e8 08 24 00 00       	call   9f0041a8 <strnstrI>
9f001da0:	83 c4 10             	add    esp,0x10
9f001da3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:313
        spacePtr=strstrI(spacePtr," ");
9f001da6:	83 ec 08             	sub    esp,0x8
9f001da9:	8d 83 21 f7 ff ff    	lea    eax,[ebx-0x8df]
9f001daf:	50                   	push   eax
9f001db0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001db3:	e8 8e 24 00 00       	call   9f004246 <strstrI>
9f001db8:	83 c4 10             	add    esp,0x10
9f001dbb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:314
        if (quotePtr!=0 && (quotePtr <= spacePtr))                            //If a double quote shows up before a space ...
9f001dbe:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f001dc2:	74 48                	je     9f001e0c <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:314 (discriminator 1)
9f001dc4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001dc7:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001dca:	77 40                	ja     9f001e0c <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:316
        {
            char *temp = spacePtr;
9f001dcc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001dcf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:317
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);  //Look for the closing double quote
9f001dd2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001dd5:	8d 50 01             	lea    edx,[eax+0x1]
9f001dd8:	83 ec 04             	sub    esp,0x4
9f001ddb:	68 a0 0f 00 00       	push   0xfa0
9f001de0:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001de6:	50                   	push   eax
9f001de7:	52                   	push   edx
9f001de8:	e8 bb 23 00 00       	call   9f0041a8 <strnstrI>
9f001ded:	83 c4 10             	add    esp,0x10
9f001df0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:318
            if (spacePtr>=quotePtr+4000)
9f001df3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001df6:	05 a0 0f 00 00       	add    eax,0xfa0
9f001dfb:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001dfe:	77 08                	ja     9f001e08 <cmdlineToArgvI+0xf3>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:319
                spacePtr = temp;                            //Didn't find it so resume normal processing (space bound)
9f001e00:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f001e03:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001e06:	eb 04                	jmp    9f001e0c <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:321
            else
                spacePtr += 1;                              //Skip the closing quote
9f001e08:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:323
        }
        *argc+=1;
9f001e0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e0f:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e11:	8d 50 01             	lea    edx,[eax+0x1]
9f001e14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e17:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:324
        if (spacePtr!=0 && *spacePtr)
9f001e19:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001e1d:	74 0e                	je     9f001e2d <cmdlineToArgvI+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:324 (discriminator 1)
9f001e1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001e22:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001e25:	84 c0                	test   al,al
9f001e27:	74 04                	je     9f001e2d <cmdlineToArgvI+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:325
            spacePtr++;
9f001e29:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:327
    
    } while (spacePtr!=0 && *spacePtr);
9f001e2d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001e31:	74 0e                	je     9f001e41 <cmdlineToArgvI+0x12c>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:327 (discriminator 1)
9f001e33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001e36:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001e39:	84 c0                	test   al,al
9f001e3b:	0f 85 48 ff ff ff    	jne    9f001d89 <cmdlineToArgvI+0x74>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:329
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
9f001e41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e44:	8b 10                	mov    edx,DWORD PTR [eax]
9f001e46:	89 d0                	mov    eax,edx
9f001e48:	c1 e0 08             	shl    eax,0x8
9f001e4b:	29 d0                	sub    eax,edx
9f001e4d:	89 c2                	mov    edx,eax
9f001e4f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e52:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e54:	c1 e0 02             	shl    eax,0x2
9f001e57:	01 d0                	add    eax,edx
9f001e59:	83 ec 0c             	sub    esp,0xc
9f001e5c:	50                   	push   eax
9f001e5d:	e8 f3 04 00 00       	call   9f002355 <mallocI>
9f001e62:	83 c4 10             	add    esp,0x10
9f001e65:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:330
    int argvPtr=4* *argc;
9f001e68:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e6b:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e6d:	c1 e0 02             	shl    eax,0x2
9f001e70:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:331
    spacePtr=cmd;
9f001e73:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001e79:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:332
    for (int cnt=0;cnt<*argc; cnt++)
9f001e7c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f001e83:	e9 72 01 00 00       	jmp    9f001ffa <cmdlineToArgvI+0x2e5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:334
    {
        argv[cnt]=(char*)argv+argvPtr;
9f001e88:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001e8b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001e92:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001e95:	01 d0                	add    eax,edx
9f001e97:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f001e9a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f001e9d:	01 ca                	add    edx,ecx
9f001e9f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:335
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
9f001ea1:	83 ec 04             	sub    esp,0x4
9f001ea4:	68 a0 0f 00 00       	push   0xfa0
9f001ea9:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001eaf:	50                   	push   eax
9f001eb0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001eb3:	e8 f0 22 00 00       	call   9f0041a8 <strnstrI>
9f001eb8:	83 c4 10             	add    esp,0x10
9f001ebb:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:336
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
9f001ebe:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f001ec2:	0f 84 80 00 00 00    	je     9f001f48 <cmdlineToArgvI+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:336 (discriminator 1)
9f001ec8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001ecb:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001ece:	77 78                	ja     9f001f48 <cmdlineToArgvI+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:338
        {
            char *temp = spacePtr;
9f001ed0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001ed3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:339
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
9f001ed6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001ed9:	8d 50 01             	lea    edx,[eax+0x1]
9f001edc:	83 ec 04             	sub    esp,0x4
9f001edf:	68 a0 0f 00 00       	push   0xfa0
9f001ee4:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001eea:	50                   	push   eax
9f001eeb:	52                   	push   edx
9f001eec:	e8 b7 22 00 00       	call   9f0041a8 <strnstrI>
9f001ef1:	83 c4 10             	add    esp,0x10
9f001ef4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:340
            if (spacePtr>=quotePtr+4000)
9f001ef7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001efa:	05 a0 0f 00 00       	add    eax,0xfa0
9f001eff:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001f02:	77 0b                	ja     9f001f0f <cmdlineToArgvI+0x1fa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:341
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
9f001f04:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001f07:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:337
    for (int cnt=0;cnt<*argc; cnt++)
    {
        argv[cnt]=(char*)argv+argvPtr;
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
        {
9f001f0a:	e9 d4 00 00 00       	jmp    9f001fe3 <cmdlineToArgvI+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:344
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
            if (spacePtr>=quotePtr+4000)
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
            else
            {
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
9f001f0f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001f12:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001f15:	29 c2                	sub    edx,eax
9f001f17:	89 d0                	mov    eax,edx
9f001f19:	83 e8 02             	sub    eax,0x2
9f001f1c:	89 c6                	mov    esi,eax
9f001f1e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001f21:	8d 50 01             	lea    edx,[eax+0x1]
9f001f24:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001f27:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f001f2e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001f31:	01 c8                	add    eax,ecx
9f001f33:	8b 00                	mov    eax,DWORD PTR [eax]
9f001f35:	83 ec 04             	sub    esp,0x4
9f001f38:	56                   	push   esi
9f001f39:	52                   	push   edx
9f001f3a:	50                   	push   eax
9f001f3b:	e8 a4 1c 00 00       	call   9f003be4 <strncpyI>
9f001f40:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:337
    for (int cnt=0;cnt<*argc; cnt++)
    {
        argv[cnt]=(char*)argv+argvPtr;
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
        {
9f001f43:	e9 9b 00 00 00       	jmp    9f001fe3 <cmdlineToArgvI+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:349
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
            }
        }
        else
        {
            spacePtr=strstrI(spacePtr," ");
9f001f48:	83 ec 08             	sub    esp,0x8
9f001f4b:	8d 83 21 f7 ff ff    	lea    eax,[ebx-0x8df]
9f001f51:	50                   	push   eax
9f001f52:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001f55:	e8 ec 22 00 00       	call   9f004246 <strstrI>
9f001f5a:	83 c4 10             	add    esp,0x10
9f001f5d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:350
            if (spacePtr)
9f001f60:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001f64:	74 2f                	je     9f001f95 <cmdlineToArgvI+0x280>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:351
                strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f001f66:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001f69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001f6c:	29 c2                	sub    edx,eax
9f001f6e:	89 d0                	mov    eax,edx
9f001f70:	89 c1                	mov    ecx,eax
9f001f72:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001f75:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001f7c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001f7f:	01 d0                	add    eax,edx
9f001f81:	8b 00                	mov    eax,DWORD PTR [eax]
9f001f83:	83 ec 04             	sub    esp,0x4
9f001f86:	51                   	push   ecx
9f001f87:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001f8a:	50                   	push   eax
9f001f8b:	e8 54 1c 00 00       	call   9f003be4 <strncpyI>
9f001f90:	83 c4 10             	add    esp,0x10
9f001f93:	eb 31                	jmp    9f001fc6 <cmdlineToArgvI+0x2b1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:353
            else
                strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f001f95:	83 ec 0c             	sub    esp,0xc
9f001f98:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001f9b:	e8 d0 1a 00 00       	call   9f003a70 <strlenI>
9f001fa0:	83 c4 10             	add    esp,0x10
9f001fa3:	89 c2                	mov    edx,eax
9f001fa5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001fa8:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f001faf:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001fb2:	01 c8                	add    eax,ecx
9f001fb4:	8b 00                	mov    eax,DWORD PTR [eax]
9f001fb6:	83 ec 04             	sub    esp,0x4
9f001fb9:	52                   	push   edx
9f001fba:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001fbd:	50                   	push   eax
9f001fbe:	e8 21 1c 00 00       	call   9f003be4 <strncpyI>
9f001fc3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:354
            strtrimI(argv[cnt]);
9f001fc6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001fc9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001fd0:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001fd3:	01 d0                	add    eax,edx
9f001fd5:	8b 00                	mov    eax,DWORD PTR [eax]
9f001fd7:	83 ec 0c             	sub    esp,0xc
9f001fda:	50                   	push   eax
9f001fdb:	e8 cc 1f 00 00       	call   9f003fac <strtrimI>
9f001fe0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:356 (discriminator 2)
        }
        lastSpacePtr=spacePtr++;
9f001fe3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001fe6:	8d 50 01             	lea    edx,[eax+0x1]
9f001fe9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f001fec:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:357 (discriminator 2)
        argvPtr+=MAXPARAMLEN;
9f001fef:	81 45 ec ff 00 00 00 	add    DWORD PTR [ebp-0x14],0xff
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:332 (discriminator 2)
    } while (spacePtr!=0 && *spacePtr);
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
    int argvPtr=4* *argc;
    spacePtr=cmd;
    for (int cnt=0;cnt<*argc; cnt++)
9f001ff6:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:332 (discriminator 1)
9f001ffa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001ffd:	8b 00                	mov    eax,DWORD PTR [eax]
9f001fff:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f002002:	0f 8f 80 fe ff ff    	jg     9f001e88 <cmdlineToArgvI+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:359
            strtrimI(argv[cnt]);
        }
        lastSpacePtr=spacePtr++;
        argvPtr+=MAXPARAMLEN;
    }
    return argv;
9f002008:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:360
}
9f00200b:	8d 65 f8             	lea    esp,[ebp-0x8]
9f00200e:	5b                   	pop    ebx
9f00200f:	5e                   	pop    esi
9f002010:	5d                   	pop    ebp
9f002011:	c3                   	ret    

9f002012 <cmdlineToArgv>:
cmdlineToArgv():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:363

VISIBLE char** cmdlineToArgv(char* cmdline, int *argc)
{
9f002012:	55                   	push   ebp
9f002013:	89 e5                	mov    ebp,esp
9f002015:	83 ec 08             	sub    esp,0x8
9f002018:	e8 c5 2f 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f00201d:	05 1f 5c 00 00       	add    eax,0x5c1f
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:364
    return cmdlineToArgvI(cmdline, argc);
9f002022:	83 ec 08             	sub    esp,0x8
9f002025:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002028:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00202b:	e8 e5 fc ff ff       	call   9f001d15 <cmdlineToArgvI>
9f002030:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:365
}
9f002033:	c9                   	leave  
9f002034:	c3                   	ret    

9f002035 <setSTD>:
setSTD():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:368

VISIBLE int setSTD(int std, uint32_t filed)
{
9f002035:	55                   	push   ebp
9f002036:	89 e5                	mov    ebp,esp
9f002038:	e8 a5 2f 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f00203d:	05 ff 5b 00 00       	add    eax,0x5bff
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:369
    return do_syscall2(SYSCALL_SETSTD, std, filed);
9f002042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002045:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002048:	50                   	push   eax
9f002049:	68 06 03 00 00       	push   0x306
9f00204e:	e8 4b f3 ff ff       	call   9f00139e <do_syscall2>
9f002053:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:370
}
9f002056:	c9                   	leave  
9f002057:	c3                   	ret    

9f002058 <takeADump>:
takeADump():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:373

VISIBLE void takeADump()
{
9f002058:	55                   	push   ebp
9f002059:	89 e5                	mov    ebp,esp
9f00205b:	e8 82 2f 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f002060:	05 dc 5b 00 00       	add    eax,0x5bdc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:374
    do_syscall0(SYSCALL_TAKEADUMP);
9f002065:	68 00 09 00 00       	push   0x900
9f00206a:	e8 ad f3 ff ff       	call   9f00141c <do_syscall0>
9f00206f:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:375
9f002072:	90                   	nop
9f002073:	c9                   	leave  
9f002074:	c3                   	ret    
9f002075:	66 90                	xchg   ax,ax
9f002077:	90                   	nop

9f002078 <mmap>:
mmap():
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:14
//#include "../../../kproj/chrisOSKernel/include/syscalls.h"

syscall_mmap_t params;

VISIBLE void* mmap (void *addr,size_t len,int prot,int flags,int fd,off_t offset)
{
9f002078:	55                   	push   ebp
9f002079:	89 e5                	mov    ebp,esp
9f00207b:	53                   	push   ebx
9f00207c:	83 ec 04             	sub    esp,0x4
9f00207f:	e8 5e 2f 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f002084:	05 b8 5b 00 00       	add    eax,0x5bb8
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:16
    
    params.addr = addr;
9f002089:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f00208f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f002092:	89 0a                	mov    DWORD PTR [edx],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:17
    params.len = len;
9f002094:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f002097:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f00209d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:18
    params.prot = prot;
9f0020a0:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f0020a6:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0020a9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:19
    params.flags = flags;
9f0020ac:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f0020b2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
9f0020b5:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:20
    params.fd = fd;
9f0020b8:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f0020be:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
9f0020c1:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:21
    params.offset = offset;
9f0020c4:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f0020ca:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
9f0020cd:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:23
    
    return (void*)do_syscall1(SYSCALL_MMAP, (uint32_t)&params);
9f0020d0:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f0020d6:	83 ec 08             	sub    esp,0x8
9f0020d9:	52                   	push   edx
9f0020da:	6a 11                	push   0x11
9f0020dc:	89 c3                	mov    ebx,eax
9f0020de:	e8 f9 f2 ff ff       	call   9f0013dc <do_syscall1>
9f0020e3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:24
}
9f0020e6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0020e9:	c9                   	leave  
9f0020ea:	c3                   	ret    
9f0020eb:	90                   	nop

9f0020ec <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:22
__attribute__((visibility("default"))) uint32_t heapBase=0;
__attribute__((visibility("default"))) uint32_t heapCurr=0;
__attribute__((visibility("default"))) uint32_t heapEnd=0;

void initmalloc()
{
9f0020ec:	55                   	push   ebp
9f0020ed:	89 e5                	mov    ebp,esp
9f0020ef:	53                   	push   ebx
9f0020f0:	83 ec 04             	sub    esp,0x4
9f0020f3:	e8 ee 2e 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f0020f8:	81 c3 44 5b 00 00    	add    ebx,0x5b44
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:23
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
9f0020fe:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f002104:	8b 00                	mov    eax,DWORD PTR [eax]
9f002106:	50                   	push   eax
9f002107:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f00210d:	50                   	push   eax
9f00210e:	8d 83 4c f7 ff ff    	lea    eax,[ebx-0x8b4]
9f002114:	50                   	push   eax
9f002115:	68 00 00 00 01       	push   0x1000000
9f00211a:	e8 99 f5 ff ff       	call   9f0016b8 <printdI>
9f00211f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:24
    heapBase=0;
9f002122:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f002128:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:25
    heapCurr=0;
9f00212e:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002134:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:26
    heapEnd=0;
9f00213a:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f002140:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:28

}
9f002146:	90                   	nop
9f002147:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00214a:	c9                   	leave  
9f00214b:	c3                   	ret    

9f00214c <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:31

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
9f00214c:	55                   	push   ebp
9f00214d:	89 e5                	mov    ebp,esp
9f00214f:	83 ec 10             	sub    esp,0x10
9f002152:	e8 8b 2e 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f002157:	05 e5 5a 00 00       	add    eax,0x5ae5
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:34
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
9f00215c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00215f:	83 c2 30             	add    edx,0x30
9f002162:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:36
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
9f002165:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f00216b:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f00216d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002170:	01 d1                	add    ecx,edx
9f002172:	8b 90 dc ff ff ff    	mov    edx,DWORD PTR [eax-0x24]
9f002178:	8b 12                	mov    edx,DWORD PTR [edx]
9f00217a:	39 d1                	cmp    ecx,edx
9f00217c:	76 4e                	jbe    9f0021cc <newHeapRequiredToFulfillRequest+0x80>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:39
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
9f00217e:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f002184:	8b 12                	mov    edx,DWORD PTR [edx]
9f002186:	8b 80 dc ff ff ff    	mov    eax,DWORD PTR [eax-0x24]
9f00218c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00218e:	29 c2                	sub    edx,eax
9f002190:	89 d0                	mov    eax,edx
9f002192:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:40
        if (newSize== 0 || newSize%PAGE_SIZE)
9f002195:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
9f002199:	74 0c                	je     9f0021a7 <newHeapRequiredToFulfillRequest+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:40 (discriminator 1)
9f00219b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00219e:	25 ff 0f 00 00       	and    eax,0xfff
9f0021a3:	85 c0                	test   eax,eax
9f0021a5:	74 10                	je     9f0021b7 <newHeapRequiredToFulfillRequest+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:42
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
9f0021a7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0021aa:	25 00 f0 ff ff       	and    eax,0xfffff000
9f0021af:	05 00 10 00 00       	add    eax,0x1000
9f0021b4:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:45
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < ALLOC_REQUEST_SIZE)
9f0021b7:	81 7d fc ff 0f 00 00 	cmp    DWORD PTR [ebp-0x4],0xfff
9f0021be:	77 07                	ja     9f0021c7 <newHeapRequiredToFulfillRequest+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:46
            return ALLOC_REQUEST_SIZE;
9f0021c0:	b8 00 10 00 00       	mov    eax,0x1000
9f0021c5:	eb 0a                	jmp    9f0021d1 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:48
        else
            return newSize;
9f0021c7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0021ca:	eb 05                	jmp    9f0021d1 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:51
    }
    else
        return 0;
9f0021cc:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52
}
9f0021d1:	c9                   	leave  
9f0021d2:	c3                   	ret    

9f0021d3 <freeI>:
freeI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:55

void freeI(void* fpointer)
{
9f0021d3:	55                   	push   ebp
9f0021d4:	89 e5                	mov    ebp,esp
9f0021d6:	53                   	push   ebx
9f0021d7:	83 ec 14             	sub    esp,0x14
9f0021da:	e8 03 2e 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0021df:	05 5d 5a 00 00       	add    eax,0x5a5d
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:58
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if ((uint32_t)fpointer < heapBase || (uint32_t)fpointer > heapCurr)
9f0021e4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0021e7:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f0021ed:	8b 12                	mov    edx,DWORD PTR [edx]
9f0021ef:	39 d1                	cmp    ecx,edx
9f0021f1:	72 4a                	jb     9f00223d <freeI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:58 (discriminator 1)
9f0021f3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0021f6:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f0021fc:	8b 12                	mov    edx,DWORD PTR [edx]
9f0021fe:	39 d1                	cmp    ecx,edx
9f002200:	77 3b                	ja     9f00223d <freeI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:61
        return;
    
    if (fpointer==NULL)
9f002202:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f002206:	74 38                	je     9f002240 <freeI+0x6d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:63
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
9f002208:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00220b:	83 ea 18             	sub    edx,0x18
9f00220e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:66
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
9f002211:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002214:	8b 12                	mov    edx,DWORD PTR [edx]
9f002216:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f00221c:	74 16                	je     9f002234 <freeI+0x61>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:68
    {
        printI("malloc: marker not found error!!!\n");
9f00221e:	83 ec 0c             	sub    esp,0xc
9f002221:	8d 90 70 f7 ff ff    	lea    edx,[eax-0x890]
9f002227:	52                   	push   edx
9f002228:	89 c3                	mov    ebx,eax
9f00222a:	e8 1e f4 ff ff       	call   9f00164d <printI>
9f00222f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:69
        return; //Return silently ... for now
9f002232:	eb 0d                	jmp    9f002241 <freeI+0x6e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:71
    }
    mp->inUse=false;
9f002234:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002237:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
9f00223b:	eb 04                	jmp    9f002241 <freeI+0x6e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:59
void freeI(void* fpointer)
{
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if ((uint32_t)fpointer < heapBase || (uint32_t)fpointer > heapCurr)
        return;
9f00223d:	90                   	nop
9f00223e:	eb 01                	jmp    9f002241 <freeI+0x6e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:62
    
    if (fpointer==NULL)
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
9f002240:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:73
        printI("malloc: marker not found error!!!\n");
        return; //Return silently ... for now
    }
    mp->inUse=false;
    
}
9f002241:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002244:	c9                   	leave  
9f002245:	c3                   	ret    

9f002246 <mallocFindAvailableMemory>:
mallocFindAvailableMemory():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:76

heaprec_t *mallocFindAvailableMemory(size_t size)
{
9f002246:	55                   	push   ebp
9f002247:	89 e5                	mov    ebp,esp
9f002249:	83 ec 10             	sub    esp,0x10
9f00224c:	e8 91 2d 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f002251:	05 eb 59 00 00       	add    eax,0x59eb
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:77
    heaprec_t* heapPtr=(heaprec_t*)heapBase;
9f002256:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f00225c:	8b 12                	mov    edx,DWORD PTR [edx]
9f00225e:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:80
    do
    {
        if (!heapPtr->inUse && heapPtr->len>=size && heapPtr->marker==ALLOC_MARKER_VALUE)
9f002261:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002264:	0f b6 52 08          	movzx  edx,BYTE PTR [edx+0x8]
9f002268:	83 f2 01             	xor    edx,0x1
9f00226b:	84 d2                	test   dl,dl
9f00226d:	74 1d                	je     9f00228c <mallocFindAvailableMemory+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:80 (discriminator 1)
9f00226f:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002272:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
9f002275:	3b 55 08             	cmp    edx,DWORD PTR [ebp+0x8]
9f002278:	72 12                	jb     9f00228c <mallocFindAvailableMemory+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:80 (discriminator 2)
9f00227a:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00227d:	8b 12                	mov    edx,DWORD PTR [edx]
9f00227f:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f002285:	75 05                	jne    9f00228c <mallocFindAvailableMemory+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:81
            return heapPtr;
9f002287:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00228a:	eb 3c                	jmp    9f0022c8 <mallocFindAvailableMemory+0x82>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:82
        if (heapPtr->next)
9f00228c:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00228f:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
9f002292:	85 d2                	test   edx,edx
9f002294:	74 09                	je     9f00229f <mallocFindAvailableMemory+0x59>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:83
            heapPtr=heapPtr->next;
9f002296:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002299:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
9f00229c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:86
        
    }
    while(heapPtr<(heaprec_t*)heapCurr && heapPtr->next && heapPtr->marker==ALLOC_MARKER_VALUE);
9f00229f:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f0022a5:	8b 12                	mov    edx,DWORD PTR [edx]
9f0022a7:	39 55 fc             	cmp    DWORD PTR [ebp-0x4],edx
9f0022aa:	73 17                	jae    9f0022c3 <mallocFindAvailableMemory+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:86 (discriminator 1)
9f0022ac:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0022af:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
9f0022b2:	85 d2                	test   edx,edx
9f0022b4:	74 0d                	je     9f0022c3 <mallocFindAvailableMemory+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:86 (discriminator 2)
9f0022b6:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0022b9:	8b 12                	mov    edx,DWORD PTR [edx]
9f0022bb:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f0022c1:	74 9e                	je     9f002261 <mallocFindAvailableMemory+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:88
    //while (heapPtr->marker==ALLOC_MARKER_VALUE);
    return NULL;
9f0022c3:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
}
9f0022c8:	c9                   	leave  
9f0022c9:	c3                   	ret    

9f0022ca <mallocSanityCheck>:
mallocSanityCheck():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:92

void mallocSanityCheck(heaprec_t *heaprec)
{
9f0022ca:	55                   	push   ebp
9f0022cb:	89 e5                	mov    ebp,esp
9f0022cd:	53                   	push   ebx
9f0022ce:	83 ec 14             	sub    esp,0x14
9f0022d1:	e8 0c 2d 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0022d6:	05 66 59 00 00       	add    eax,0x5966
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:94
#ifdef ALLOC_MALLOC_SANITY_CHECK
    heaprec_t *heapPtr=heaprec;
9f0022db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0022de:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:95
    while (heapPtr>=(heaprec_t*)heapBase && heapPtr->prev!=heapPtr)
9f0022e1:	eb 54                	jmp    9f002337 <mallocSanityCheck+0x6d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:97
    {
        if (heapBase<(uintptr_t)heapPtr-8)
9f0022e3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0022e6:	8d 4a f8             	lea    ecx,[edx-0x8]
9f0022e9:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f0022ef:	8b 12                	mov    edx,DWORD PTR [edx]
9f0022f1:	39 d1                	cmp    ecx,edx
9f0022f3:	76 16                	jbe    9f00230b <mallocSanityCheck+0x41>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:99
        {
                printfI("\n**************************malloc base error!!!**************************\n");
9f0022f5:	83 ec 0c             	sub    esp,0xc
9f0022f8:	8d 90 94 f7 ff ff    	lea    edx,[eax-0x86c]
9f0022fe:	52                   	push   edx
9f0022ff:	89 c3                	mov    ebx,eax
9f002301:	e8 f3 f2 ff ff       	call   9f0015f9 <printfI>
9f002306:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:101 (discriminator 1)
    SanityLoop2:
                goto SanityLoop2;
9f002309:	eb fe                	jmp    9f002309 <mallocSanityCheck+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:103
        }
        if (heapPtr->marker!=ALLOC_MARKER_VALUE)
9f00230b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00230e:	8b 12                	mov    edx,DWORD PTR [edx]
9f002310:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f002316:	74 16                	je     9f00232e <mallocSanityCheck+0x64>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:105
        {
            printfI("\n**************************malloc pointer error!!!**************************\n");
9f002318:	83 ec 0c             	sub    esp,0xc
9f00231b:	8d 90 e0 f7 ff ff    	lea    edx,[eax-0x820]
9f002321:	52                   	push   edx
9f002322:	89 c3                	mov    ebx,eax
9f002324:	e8 d0 f2 ff ff       	call   9f0015f9 <printfI>
9f002329:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:107 (discriminator 2)
SanityLoop:
            goto SanityLoop;
9f00232c:	eb fe                	jmp    9f00232c <mallocSanityCheck+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:109
        }
        heapPtr=heapPtr->prev;
9f00232e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002331:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
9f002334:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:95

void mallocSanityCheck(heaprec_t *heaprec)
{
#ifdef ALLOC_MALLOC_SANITY_CHECK
    heaprec_t *heapPtr=heaprec;
    while (heapPtr>=(heaprec_t*)heapBase && heapPtr->prev!=heapPtr)
9f002337:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f00233d:	8b 12                	mov    edx,DWORD PTR [edx]
9f00233f:	39 55 f4             	cmp    DWORD PTR [ebp-0xc],edx
9f002342:	72 0b                	jb     9f00234f <mallocSanityCheck+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:95 (discriminator 1)
9f002344:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002347:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
9f00234a:	3b 55 f4             	cmp    edx,DWORD PTR [ebp-0xc]
9f00234d:	75 94                	jne    9f0022e3 <mallocSanityCheck+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:112
            goto SanityLoop;
        }
        heapPtr=heapPtr->prev;
    }
#endif
}
9f00234f:	90                   	nop
9f002350:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002353:	c9                   	leave  
9f002354:	c3                   	ret    

9f002355 <mallocI>:
mallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:115

void*  mallocI(size_t size)
{
9f002355:	55                   	push   ebp
9f002356:	89 e5                	mov    ebp,esp
9f002358:	53                   	push   ebx
9f002359:	83 ec 24             	sub    esp,0x24
9f00235c:	e8 85 2c 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f002361:	81 c3 db 58 00 00    	add    ebx,0x58db
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:120
    void* retVal;

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr=NULL;
9f002367:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:121
    size_t requestSize=size;
9f00236e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002371:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:124
    static heaprec_t *lastHRCreated=NULL;

    if (size<ALLOC_MIN_MALLOC_SIZE)
9f002374:	83 7d 08 17          	cmp    DWORD PTR [ebp+0x8],0x17
9f002378:	77 07                	ja     9f002381 <mallocI+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:125
        requestSize=ALLOC_MIN_MALLOC_SIZE;
9f00237a:	c7 45 f4 18 00 00 00 	mov    DWORD PTR [ebp-0xc],0x18
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:126
    printdI(DEBUG_MALLOC,"libc_malloc: Request for 0x%08x bytes\n",requestSize);
9f002381:	83 ec 04             	sub    esp,0x4
9f002384:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002387:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
9f00238d:	50                   	push   eax
9f00238e:	68 00 00 00 01       	push   0x1000000
9f002393:	e8 20 f3 ff ff       	call   9f0016b8 <printdI>
9f002398:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:139
            printdI(DEBUG_MALLOC,"libc_malloc: Reusing heaprec=0x%08x, address=0x%08x (uses=%u)",heapPtr,HEAP_PTR_MEM_ADDR(heapPtr),heapPtr->uses);
            return ((void*)heapPtr)+sizeof(heaprec_t);
        }
    }
*/    
    needed = newHeapRequiredToFulfillRequest(requestSize);
9f00239b:	83 ec 0c             	sub    esp,0xc
9f00239e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0023a1:	e8 a6 fd ff ff       	call   9f00214c <newHeapRequiredToFulfillRequest>
9f0023a6:	83 c4 10             	add    esp,0x10
9f0023a9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:140
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
9f0023ac:	83 ec 04             	sub    esp,0x4
9f0023af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0023b2:	8d 83 57 f8 ff ff    	lea    eax,[ebx-0x7a9]
9f0023b8:	50                   	push   eax
9f0023b9:	68 00 00 00 01       	push   0x1000000
9f0023be:	e8 f5 f2 ff ff       	call   9f0016b8 <printdI>
9f0023c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:141
    if (needed!=0)      //New heap required
9f0023c6:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f0023ca:	0f 84 e5 00 00 00    	je     9f0024b5 <mallocI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:143
    {
        if (heapCurr>0)
9f0023d0:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0023d6:	8b 00                	mov    eax,DWORD PTR [eax]
9f0023d8:	85 c0                	test   eax,eax
9f0023da:	74 17                	je     9f0023f3 <mallocI+0x9e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:144
            mallocSanityCheck(((heaprec_t*)heapCurr)->prev);        
9f0023dc:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0023e2:	8b 00                	mov    eax,DWORD PTR [eax]
9f0023e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0023e7:	83 ec 0c             	sub    esp,0xc
9f0023ea:	50                   	push   eax
9f0023eb:	e8 da fe ff ff       	call   9f0022ca <mallocSanityCheck>
9f0023f0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:145
        allocatedPtr = do_syscall1(SYSCALL_ALLOCHEAP, needed);
9f0023f3:	83 ec 08             	sub    esp,0x8
9f0023f6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0023f9:	68 65 01 00 00       	push   0x165
9f0023fe:	e8 d9 ef ff ff       	call   9f0013dc <do_syscall1>
9f002403:	83 c4 10             	add    esp,0x10
9f002406:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:147
        //This is needed to keep in sync with what the kernel thinks
        memsetI((char*)allocatedPtr,0,needed);
9f002409:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00240c:	83 ec 04             	sub    esp,0x4
9f00240f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002412:	6a 00                	push   0x0
9f002414:	50                   	push   eax
9f002415:	e8 d6 04 00 00       	call   9f0028f0 <memsetI>
9f00241a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:148
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
9f00241d:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f002423:	8b 00                	mov    eax,DWORD PTR [eax]
9f002425:	83 ec 04             	sub    esp,0x4
9f002428:	50                   	push   eax
9f002429:	8d 83 73 f8 ff ff    	lea    eax,[ebx-0x78d]
9f00242f:	50                   	push   eax
9f002430:	68 00 00 00 01       	push   0x1000000
9f002435:	e8 7e f2 ff ff       	call   9f0016b8 <printdI>
9f00243a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:149
        heapEnd=allocatedPtr+needed;
9f00243d:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f002440:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002443:	01 c2                	add    edx,eax
9f002445:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f00244b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:150
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
9f00244d:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f002453:	8b 00                	mov    eax,DWORD PTR [eax]
9f002455:	83 ec 0c             	sub    esp,0xc
9f002458:	50                   	push   eax
9f002459:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f00245c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f00245f:	8d 83 90 f8 ff ff    	lea    eax,[ebx-0x770]
9f002465:	50                   	push   eax
9f002466:	68 00 00 00 01       	push   0x1000000
9f00246b:	e8 48 f2 ff ff       	call   9f0016b8 <printdI>
9f002470:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:151
        if (heapBase==0)    //Hasn't been initialized yet!
9f002473:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f002479:	8b 00                	mov    eax,DWORD PTR [eax]
9f00247b:	85 c0                	test   eax,eax
9f00247d:	75 36                	jne    9f0024b5 <mallocI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:153
        {
            heapCurr=allocatedPtr;
9f00247f:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002485:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f002488:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:154
            heapBase=allocatedPtr;
9f00248a:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f002490:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f002493:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:155
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
9f002495:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f00249b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00249d:	83 ec 04             	sub    esp,0x4
9f0024a0:	50                   	push   eax
9f0024a1:	8d 83 d0 f8 ff ff    	lea    eax,[ebx-0x730]
9f0024a7:	50                   	push   eax
9f0024a8:	68 00 00 00 01       	push   0x1000000
9f0024ad:	e8 06 f2 ff ff       	call   9f0016b8 <printdI>
9f0024b2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:158
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
9f0024b5:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0024bb:	8b 00                	mov    eax,DWORD PTR [eax]
9f0024bd:	83 ec 04             	sub    esp,0x4
9f0024c0:	50                   	push   eax
9f0024c1:	8d 83 0c f9 ff ff    	lea    eax,[ebx-0x6f4]
9f0024c7:	50                   	push   eax
9f0024c8:	68 00 00 00 01       	push   0x1000000
9f0024cd:	e8 e6 f1 ff ff       	call   9f0016b8 <printdI>
9f0024d2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:159
    heapPtr = (heaprec_t*)heapCurr;
9f0024d5:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0024db:	8b 00                	mov    eax,DWORD PTR [eax]
9f0024dd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:160
    heapPtr->marker=ALLOC_MARKER_VALUE;
9f0024e0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0024e3:	c7 00 1f 2f 3f 4f    	mov    DWORD PTR [eax],0x4f3f2f1f
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:161
    heapPtr->len=requestSize;
9f0024e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0024ec:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0024ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:162
    heapPtr->inUse=true;
9f0024f2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0024f5:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:163
    heapPtr->uses++;
9f0024f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0024fc:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
9f002500:	8d 50 01             	lea    edx,[eax+0x1]
9f002503:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002506:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:164
    if (lastHRCreated!=NULL)
9f00250a:	8b 83 74 00 00 00    	mov    eax,DWORD PTR [ebx+0x74]
9f002510:	85 c0                	test   eax,eax
9f002512:	74 18                	je     9f00252c <mallocI+0x1d7>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:166
    {
        heapPtr->prev=lastHRCreated;
9f002514:	8b 93 74 00 00 00    	mov    edx,DWORD PTR [ebx+0x74]
9f00251a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00251d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:167
        heapPtr->prev->next=heapPtr;
9f002520:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002523:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f002526:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002529:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:170
    }

    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08x\n",heapCurr);
9f00252c:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002532:	8b 00                	mov    eax,DWORD PTR [eax]
9f002534:	83 ec 04             	sub    esp,0x4
9f002537:	50                   	push   eax
9f002538:	8d 83 34 f9 ff ff    	lea    eax,[ebx-0x6cc]
9f00253e:	50                   	push   eax
9f00253f:	68 00 00 00 01       	push   0x1000000
9f002544:	e8 6f f1 ff ff       	call   9f0016b8 <printdI>
9f002549:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:171
    retVal=((void*)(heapPtr)+sizeof(heaprec_t));
9f00254c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00254f:	83 c0 18             	add    eax,0x18
9f002552:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:172
    heapCurr+=requestSize+(sizeof(heaprec_t));
9f002555:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f00255b:	8b 10                	mov    edx,DWORD PTR [eax]
9f00255d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002560:	01 d0                	add    eax,edx
9f002562:	8d 50 18             	lea    edx,[eax+0x18]
9f002565:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f00256b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:173
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
9f00256d:	83 ec 04             	sub    esp,0x4
9f002570:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f002573:	8d 83 52 f9 ff ff    	lea    eax,[ebx-0x6ae]
9f002579:	50                   	push   eax
9f00257a:	68 00 00 00 01       	push   0x1000000
9f00257f:	e8 34 f1 ff ff       	call   9f0016b8 <printdI>
9f002584:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:174
    lastHRCreated=heapPtr;
9f002587:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00258a:	89 83 74 00 00 00    	mov    DWORD PTR [ebx+0x74],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:175
    return retVal;
9f002590:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:176
}
9f002593:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002596:	c9                   	leave  
9f002597:	c3                   	ret    

9f002598 <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:179

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
9f002598:	55                   	push   ebp
9f002599:	89 e5                	mov    ebp,esp
9f00259b:	83 ec 08             	sub    esp,0x8
9f00259e:	e8 3f 2a 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0025a3:	05 99 56 00 00       	add    eax,0x5699
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:180
    return mallocI(size);
9f0025a8:	83 ec 0c             	sub    esp,0xc
9f0025ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0025ae:	e8 a2 fd ff ff       	call   9f002355 <mallocI>
9f0025b3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:181
}
9f0025b6:	c9                   	leave  
9f0025b7:	c3                   	ret    

9f0025b8 <reallocI>:
reallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:184

void* reallocI(void *foldptr, uint32_t newlen)
{
9f0025b8:	55                   	push   ebp
9f0025b9:	89 e5                	mov    ebp,esp
9f0025bb:	53                   	push   ebx
9f0025bc:	83 ec 14             	sub    esp,0x14
9f0025bf:	e8 22 2a 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f0025c4:	81 c3 78 56 00 00    	add    ebx,0x5678
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:186
    
    printdI(DEBUG_MALLOC,"libc_realloc: called for old pointer 0x%08x, new size=0x%08x",foldptr,newlen);
9f0025ca:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0025cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0025d0:	8d 83 6c f9 ff ff    	lea    eax,[ebx-0x694]
9f0025d6:	50                   	push   eax
9f0025d7:	68 00 00 00 01       	push   0x1000000
9f0025dc:	e8 d7 f0 ff ff       	call   9f0016b8 <printdI>
9f0025e1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:189

    //Get old heap pointer
    uint32_t realSize=newlen;
9f0025e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0025e7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:191
    heaprec_t* mp;  //-1 means back up to the heaprec_t struct
    HEAP_CURR(foldptr,mp);
9f0025ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0025ed:	83 e8 18             	sub    eax,0x18
9f0025f0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:193

    if (newlen==0)
9f0025f3:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f0025f7:	75 17                	jne    9f002610 <reallocI+0x58>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:194
        printdI(DEBUG_MALLOC,"libc_relloc: Request for 0 bytes, cannot fulfill\n");
9f0025f9:	83 ec 08             	sub    esp,0x8
9f0025fc:	8d 83 ac f9 ff ff    	lea    eax,[ebx-0x654]
9f002602:	50                   	push   eax
9f002603:	68 00 00 00 01       	push   0x1000000
9f002608:	e8 ab f0 ff ff       	call   9f0016b8 <printdI>
9f00260d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:195
    if (newlen==0 || newlen<=mp->len)
9f002610:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002614:	74 0b                	je     9f002621 <reallocI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:195 (discriminator 1)
9f002616:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002619:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f00261c:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f00261f:	72 08                	jb     9f002629 <reallocI+0x71>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:196
        return foldptr;
9f002621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002624:	e9 8d 00 00 00       	jmp    9f0026b6 <reallocI+0xfe>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:198

    if (newlen<ALLOC_MIN_MALLOC_SIZE)
9f002629:	83 7d 0c 17          	cmp    DWORD PTR [ebp+0xc],0x17
9f00262d:	77 07                	ja     9f002636 <reallocI+0x7e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:199
        realSize=ALLOC_MIN_MALLOC_SIZE;
9f00262f:	c7 45 f4 18 00 00 00 	mov    DWORD PTR [ebp-0xc],0x18
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:202
    
    //Allocate space of newlen
    uintptr_t *fnewptr = mallocI(realSize);
9f002636:	83 ec 0c             	sub    esp,0xc
9f002639:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f00263c:	e8 14 fd ff ff       	call   9f002355 <mallocI>
9f002641:	83 c4 10             	add    esp,0x10
9f002644:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:203
    printdI(DEBUG_MALLOC,"\tlibc_realloc: received new malloc pointer 0x%08x, old size=0x%08x, new size=0x%08x\n",fnewptr, mp->len, realSize);
9f002647:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00264a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f00264d:	83 ec 0c             	sub    esp,0xc
9f002650:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002653:	50                   	push   eax
9f002654:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002657:	8d 83 e0 f9 ff ff    	lea    eax,[ebx-0x620]
9f00265d:	50                   	push   eax
9f00265e:	68 00 00 00 01       	push   0x1000000
9f002663:	e8 50 f0 ff ff       	call   9f0016b8 <printdI>
9f002668:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:208
   
    //Copy from old pointer to new memory using the old pointer's length
//    if (newlen>mp->len)
//        memsetI(fnewptr+mp->len,0,newlen-mp->len);
    memcpyI(fnewptr, foldptr, mp->len>realSize?realSize:mp->len);
9f00266b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00266e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
9f002671:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002674:	39 c2                	cmp    edx,eax
9f002676:	0f 46 c2             	cmovbe eax,edx
9f002679:	83 ec 04             	sub    esp,0x4
9f00267c:	50                   	push   eax
9f00267d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002680:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002683:	e8 ac 00 00 00       	call   9f002734 <memcpyI>
9f002688:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:209
    printdI(DEBUG_MALLOC,"\tlibc_realloc: updated new pointer 0x%08x with old pointer data and cleared out remaing if applicable\n",fnewptr);
9f00268b:	83 ec 04             	sub    esp,0x4
9f00268e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002691:	8d 83 38 fa ff ff    	lea    eax,[ebx-0x5c8]
9f002697:	50                   	push   eax
9f002698:	68 00 00 00 01       	push   0x1000000
9f00269d:	e8 16 f0 ff ff       	call   9f0016b8 <printdI>
9f0026a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:212
    
   //free old pointer
    freeI(foldptr);
9f0026a5:	83 ec 0c             	sub    esp,0xc
9f0026a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0026ab:	e8 23 fb ff ff       	call   9f0021d3 <freeI>
9f0026b0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:213
    return fnewptr;
9f0026b3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:214
}
9f0026b6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0026b9:	c9                   	leave  
9f0026ba:	c3                   	ret    

9f0026bb <realloc>:
realloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:217

VISIBLE void* realloc(void *foldptr, uint32_t newlen)
{
9f0026bb:	55                   	push   ebp
9f0026bc:	89 e5                	mov    ebp,esp
9f0026be:	83 ec 08             	sub    esp,0x8
9f0026c1:	e8 1c 29 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0026c6:	05 76 55 00 00       	add    eax,0x5576
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:218
    return reallocI(foldptr, newlen);
9f0026cb:	83 ec 08             	sub    esp,0x8
9f0026ce:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0026d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0026d4:	e8 df fe ff ff       	call   9f0025b8 <reallocI>
9f0026d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:219
}
9f0026dc:	c9                   	leave  
9f0026dd:	c3                   	ret    

9f0026de <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:222

__attribute__((visibility("default"))) void free(void* fpointer)
{
9f0026de:	55                   	push   ebp
9f0026df:	89 e5                	mov    ebp,esp
9f0026e1:	83 ec 08             	sub    esp,0x8
9f0026e4:	e8 f9 28 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0026e9:	05 53 55 00 00       	add    eax,0x5553
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:223
    freeI(fpointer);
9f0026ee:	83 ec 0c             	sub    esp,0xc
9f0026f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0026f4:	e8 da fa ff ff       	call   9f0021d3 <freeI>
9f0026f9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:224
}
9f0026fc:	90                   	nop
9f0026fd:	c9                   	leave  
9f0026fe:	c3                   	ret    

9f0026ff <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:227

void malloc_cleanup()
{
9f0026ff:	55                   	push   ebp
9f002700:	89 e5                	mov    ebp,esp
9f002702:	53                   	push   ebx
9f002703:	83 ec 04             	sub    esp,0x4
9f002706:	e8 d7 28 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f00270b:	05 31 55 00 00       	add    eax,0x5531
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:228
    do_syscall1(SYSCALL_FREE, heapBase);
9f002710:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f002716:	8b 12                	mov    edx,DWORD PTR [edx]
9f002718:	83 ec 08             	sub    esp,0x8
9f00271b:	52                   	push   edx
9f00271c:	68 64 01 00 00       	push   0x164
9f002721:	89 c3                	mov    ebx,eax
9f002723:	e8 b4 ec ff ff       	call   9f0013dc <do_syscall1>
9f002728:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:229
9f00272b:	90                   	nop
9f00272c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00272f:	c9                   	leave  
9f002730:	c3                   	ret    
9f002731:	66 90                	xchg   ax,ax
9f002733:	90                   	nop

9f002734 <memcpyI>:
memcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:12
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time

void *memcpyI(void *dest, const void *src, size_t n)
{
9f002734:	55                   	push   ebp
9f002735:	89 e5                	mov    ebp,esp
9f002737:	83 ec 20             	sub    esp,0x20
9f00273a:	e8 a3 28 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f00273f:	05 fd 54 00 00       	add    eax,0x54fd
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    bool dw,dd;
    
    dd=n%4==0;
9f002744:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002747:	83 e0 03             	and    eax,0x3
9f00274a:	85 c0                	test   eax,eax
9f00274c:	0f 94 c0             	sete   al
9f00274f:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    dw=n%2==0;
9f002752:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002755:	83 e0 01             	and    eax,0x1
9f002758:	85 c0                	test   eax,eax
9f00275a:	0f 94 c0             	sete   al
9f00275d:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:17
    if (dd)
9f002760:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
9f002764:	74 7d                	je     9f0027e3 <memcpyI+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
    {
        n /=4;
9f002766:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002769:	c1 e8 02             	shr    eax,0x2
9f00276c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        const uint32_t *f = src;
9f00276f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002772:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:21
        uint32_t *t = dest;
9f002775:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002778:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23

        if (f < t) {
9f00277b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00277e:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f002781:	73 4b                	jae    9f0027ce <memcpyI+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                f += n;
9f002783:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002786:	c1 e0 02             	shl    eax,0x2
9f002789:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                t += n;
9f00278c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00278f:	c1 e0 02             	shl    eax,0x2
9f002792:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                while ( (n)-- > 0)
9f002795:	eb 12                	jmp    9f0027a9 <memcpyI+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:27
                        *--t = *--f;
9f002797:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
9f00279b:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
9f00279f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0027a2:	8b 10                	mov    edx,DWORD PTR [eax]
9f0027a4:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0027a7:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f0027a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0027ac:	8d 50 ff             	lea    edx,[eax-0x1]
9f0027af:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0027b2:	85 c0                	test   eax,eax
9f0027b4:	75 e1                	jne    9f002797 <memcpyI+0x63>
9f0027b6:	eb 23                	jmp    9f0027db <memcpyI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f0027b8:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0027bb:	8d 50 04             	lea    edx,[eax+0x4]
9f0027be:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f0027c1:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0027c4:	8d 4a 04             	lea    ecx,[edx+0x4]
9f0027c7:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
9f0027ca:	8b 12                	mov    edx,DWORD PTR [edx]
9f0027cc:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f0027ce:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0027d1:	8d 50 ff             	lea    edx,[eax-0x1]
9f0027d4:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0027d7:	85 c0                	test   eax,eax
9f0027d9:	75 dd                	jne    9f0027b8 <memcpyI+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:31
                        *t++ = *f++;
        return dest;
9f0027db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0027de:	e9 ea 00 00 00       	jmp    9f0028cd <memcpyI+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:33
    }
    else if (dw)
9f0027e3:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
9f0027e7:	74 79                	je     9f002862 <memcpyI+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
    {
        n /=2;
9f0027e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0027ec:	d1 e8                	shr    eax,1
9f0027ee:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        const uint32_t *f = src;
9f0027f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0027f4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:37
        uint32_t *t = dest;
9f0027f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0027fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39

        if (f < t) {
9f0027fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002800:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f002803:	73 4b                	jae    9f002850 <memcpyI+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                f += n;
9f002805:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002808:	c1 e0 02             	shl    eax,0x2
9f00280b:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                t += n;
9f00280e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002811:	c1 e0 02             	shl    eax,0x2
9f002814:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                while ( (n)-- > 0)
9f002817:	eb 12                	jmp    9f00282b <memcpyI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:43
                        *--t = *--f;
9f002819:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
9f00281d:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
9f002821:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002824:	8b 10                	mov    edx,DWORD PTR [eax]
9f002826:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002829:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f00282b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00282e:	8d 50 ff             	lea    edx,[eax-0x1]
9f002831:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002834:	85 c0                	test   eax,eax
9f002836:	75 e1                	jne    9f002819 <memcpyI+0xe5>
9f002838:	eb 23                	jmp    9f00285d <memcpyI+0x129>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f00283a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00283d:	8d 50 04             	lea    edx,[eax+0x4]
9f002840:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f002843:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002846:	8d 4a 04             	lea    ecx,[edx+0x4]
9f002849:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
9f00284c:	8b 12                	mov    edx,DWORD PTR [edx]
9f00284e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f002850:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002853:	8d 50 ff             	lea    edx,[eax-0x1]
9f002856:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002859:	85 c0                	test   eax,eax
9f00285b:	75 dd                	jne    9f00283a <memcpyI+0x106>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:47
                        *t++ = *f++;
        return dest;
9f00285d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002860:	eb 6b                	jmp    9f0028cd <memcpyI+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
    }
    else
    {
        const char *f = src;
9f002862:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002865:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:52
        char *t = dest;
9f002868:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00286b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54

        if (f < t) {
9f00286e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002871:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f002874:	73 47                	jae    9f0028bd <memcpyI+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                f += n;
9f002876:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002879:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                t += n;
9f00287c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00287f:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                while (n-- > 0)
9f002882:	eb 13                	jmp    9f002897 <memcpyI+0x163>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:58
                        *--t = *--f;
9f002884:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
9f002888:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
9f00288c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00288f:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002892:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f002895:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
9f002897:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00289a:	8d 50 ff             	lea    edx,[eax-0x1]
9f00289d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0028a0:	85 c0                	test   eax,eax
9f0028a2:	75 e0                	jne    9f002884 <memcpyI+0x150>
9f0028a4:	eb 24                	jmp    9f0028ca <memcpyI+0x196>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
9f0028a6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0028a9:	8d 50 01             	lea    edx,[eax+0x1]
9f0028ac:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f0028af:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0028b2:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0028b5:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
9f0028b8:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0028bb:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
9f0028bd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0028c0:	8d 50 ff             	lea    edx,[eax-0x1]
9f0028c3:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0028c6:	85 c0                	test   eax,eax
9f0028c8:	75 dc                	jne    9f0028a6 <memcpyI+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:62
                        *t++ = *f++;
        return dest;
9f0028ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:64
    }
}
9f0028cd:	c9                   	leave  
9f0028ce:	c3                   	ret    

9f0028cf <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:67

VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
9f0028cf:	55                   	push   ebp
9f0028d0:	89 e5                	mov    ebp,esp
9f0028d2:	e8 0b 27 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0028d7:	05 65 53 00 00       	add    eax,0x5365
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:68
    return memcpyI(dest, src, n);
9f0028dc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0028df:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0028e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0028e5:	e8 4a fe ff ff       	call   9f002734 <memcpyI>
9f0028ea:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:69
9f0028ed:	c9                   	leave  
9f0028ee:	c3                   	ret    
9f0028ef:	90                   	nop

9f0028f0 <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "common.h"

void *memsetI(void *d1, int val, size_t len)
{
9f0028f0:	55                   	push   ebp
9f0028f1:	89 e5                	mov    ebp,esp
9f0028f3:	83 ec 20             	sub    esp,0x20
9f0028f6:	e8 e7 26 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0028fb:	05 41 53 00 00       	add    eax,0x5341
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
9f002900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002903:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
9f002906:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002909:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
9f00290c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00290f:	c1 e0 10             	shl    eax,0x10
9f002912:	89 c2                	mov    edx,eax
9f002914:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002917:	c1 e0 08             	shl    eax,0x8
9f00291a:	09 c2                	or     edx,eax
9f00291c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00291f:	09 d0                	or     eax,edx
9f002921:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
9f002925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002928:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
9f00292b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00292e:	c1 e0 18             	shl    eax,0x18
9f002931:	89 c2                	mov    edx,eax
9f002933:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002936:	c1 e0 10             	shl    eax,0x10
9f002939:	09 c2                	or     edx,eax
9f00293b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00293e:	c1 e0 08             	shl    eax,0x8
9f002941:	09 d0                	or     eax,edx
9f002943:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
9f002946:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
9f002949:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00294c:	83 e0 03             	and    eax,0x3
9f00294f:	85 c0                	test   eax,eax
9f002951:	75 1c                	jne    9f00296f <memsetI+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
9f002953:	eb 0e                	jmp    9f002963 <memsetI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
9f002955:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002958:	8d 50 04             	lea    edx,[eax+0x4]
9f00295b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00295e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f002961:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
9f002963:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
9f002967:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f00296b:	75 e8                	jne    9f002955 <memsetI+0x65>
9f00296d:	eb 43                	jmp    9f0029b2 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
9f00296f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002972:	83 e0 01             	and    eax,0x1
9f002975:	85 c0                	test   eax,eax
9f002977:	75 2c                	jne    9f0029a5 <memsetI+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
9f002979:	eb 10                	jmp    9f00298b <memsetI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
9f00297b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f00297e:	8d 50 02             	lea    edx,[eax+0x2]
9f002981:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f002984:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
9f002988:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
9f00298b:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
9f00298f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002993:	75 e6                	jne    9f00297b <memsetI+0x8b>
9f002995:	eb 1b                	jmp    9f0029b2 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
9f002997:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00299a:	8d 50 01             	lea    edx,[eax+0x1]
9f00299d:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0029a0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0029a3:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
9f0029a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0029a8:	8d 50 ff             	lea    edx,[eax-0x1]
9f0029ab:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0029ae:	85 c0                	test   eax,eax
9f0029b0:	75 e5                	jne    9f002997 <memsetI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
        *d++ = val;
    }
    return d1;
9f0029b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
9f0029b5:	c9                   	leave  
9f0029b6:	c3                   	ret    

9f0029b7 <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

VISIBLE void *memset(void *d1, int val, size_t len)
{
9f0029b7:	55                   	push   ebp
9f0029b8:	89 e5                	mov    ebp,esp
9f0029ba:	e8 23 26 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0029bf:	05 7d 52 00 00       	add    eax,0x527d
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    return memsetI(d1, val, len);
9f0029c4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0029c7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0029ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0029cd:	e8 1e ff ff ff       	call   9f0028f0 <memsetI>
9f0029d2:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
}
9f0029d5:	c9                   	leave  
9f0029d6:	c3                   	ret    
9f0029d7:	90                   	nop

9f0029d8 <pipe>:
pipe():
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:11

#include "common.h"
#include "pipe.h"

VISIBLE int pipe(int pipefd[2])
{
9f0029d8:	55                   	push   ebp
9f0029d9:	89 e5                	mov    ebp,esp
9f0029db:	53                   	push   ebx
9f0029dc:	83 ec 04             	sub    esp,0x4
9f0029df:	e8 fe 25 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0029e4:	05 58 52 00 00       	add    eax,0x5258
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:12
    return do_syscall1(SYSCALL_PIPE, (uintptr_t)pipefd);
9f0029e9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0029ec:	83 ec 08             	sub    esp,0x8
9f0029ef:	52                   	push   edx
9f0029f0:	6a 0f                	push   0xf
9f0029f2:	89 c3                	mov    ebx,eax
9f0029f4:	e8 e3 e9 ff ff       	call   9f0013dc <do_syscall1>
9f0029f9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:13
}
9f0029fc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0029ff:	c9                   	leave  
9f002a00:	c3                   	ret    

9f002a01 <dup3>:
dup3():
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:16

VISIBLE int dup3(int oldfd, int newfd, int flags)
{
9f002a01:	55                   	push   ebp
9f002a02:	89 e5                	mov    ebp,esp
9f002a04:	53                   	push   ebx
9f002a05:	83 ec 04             	sub    esp,0x4
9f002a08:	e8 d5 25 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f002a0d:	05 2f 52 00 00       	add    eax,0x522f
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:17
    return do_syscall3(SYSCALL_DUP3,oldfd,newfd,flags);
9f002a12:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f002a15:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f002a18:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002a1b:	53                   	push   ebx
9f002a1c:	51                   	push   ecx
9f002a1d:	52                   	push   edx
9f002a1e:	6a 10                	push   0x10
9f002a20:	89 c3                	mov    ebx,eax
9f002a22:	e8 3b e9 ff ff       	call   9f001362 <do_syscall3>
9f002a27:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:18
9f002a2a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002a2d:	c9                   	leave  
9f002a2e:	c3                   	ret    
9f002a2f:	90                   	nop

9f002a30 <buildProcInfoTI>:
buildProcInfoTI():
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:17
#include "ascii.h"
#include "file.h"
#include "malloc.h"

procInfo_t *buildProcInfoTI(procInfo_t *procinfo, char *statinfo, int ticksPerUpdateInterval)
{
9f002a30:	55                   	push   ebp
9f002a31:	89 e5                	mov    ebp,esp
9f002a33:	56                   	push   esi
9f002a34:	53                   	push   ebx
9f002a35:	81 ec 50 01 00 00    	sub    esp,0x150
9f002a3b:	e8 a6 25 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f002a40:	81 c3 fc 51 00 00    	add    ebx,0x51fc
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:18
    char delim[4]={'\n','\t',' ','\0'};
9f002a46:	c6 45 e8 0a          	mov    BYTE PTR [ebp-0x18],0xa
9f002a4a:	c6 45 e9 09          	mov    BYTE PTR [ebp-0x17],0x9
9f002a4e:	c6 45 ea 20          	mov    BYTE PTR [ebp-0x16],0x20
9f002a52:	c6 45 eb 00          	mov    BYTE PTR [ebp-0x15],0x0
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:20
    char *token;
    int tokenNumber=1;
9f002a56:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:25
    int pid;
    char name[100], name2[100], name3[100];
    static struct tm tinfo;

    memsetI(name,0,100);
9f002a5d:	83 ec 04             	sub    esp,0x4
9f002a60:	6a 64                	push   0x64
9f002a62:	6a 00                	push   0x0
9f002a64:	8d 45 84             	lea    eax,[ebp-0x7c]
9f002a67:	50                   	push   eax
9f002a68:	e8 83 fe ff ff       	call   9f0028f0 <memsetI>
9f002a6d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:26
    memsetI(name2,0,100);
9f002a70:	83 ec 04             	sub    esp,0x4
9f002a73:	6a 64                	push   0x64
9f002a75:	6a 00                	push   0x0
9f002a77:	8d 85 20 ff ff ff    	lea    eax,[ebp-0xe0]
9f002a7d:	50                   	push   eax
9f002a7e:	e8 6d fe ff ff       	call   9f0028f0 <memsetI>
9f002a83:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:27
    memsetI(name3,0,100);
9f002a86:	83 ec 04             	sub    esp,0x4
9f002a89:	6a 64                	push   0x64
9f002a8b:	6a 00                	push   0x0
9f002a8d:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
9f002a93:	50                   	push   eax
9f002a94:	e8 57 fe ff ff       	call   9f0028f0 <memsetI>
9f002a99:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:29
    
    token=strtokI(statinfo,delim);
9f002a9c:	83 ec 08             	sub    esp,0x8
9f002a9f:	8d 45 e8             	lea    eax,[ebp-0x18]
9f002aa2:	50                   	push   eax
9f002aa3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002aa6:	e8 71 d6 ff ff       	call   9f00011c <strtokI>
9f002aab:	83 c4 10             	add    esp,0x10
9f002aae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:30
    while (token)
9f002ab1:	e9 a5 02 00 00       	jmp    9f002d5b <.L3+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:32
    {
        switch (tokenNumber)
9f002ab6:	83 7d f0 17          	cmp    DWORD PTR [ebp-0x10],0x17
9f002aba:	0f 87 83 02 00 00    	ja     9f002d43 <.L3>
9f002ac0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002ac3:	c1 e0 02             	shl    eax,0x2
9f002ac6:	8b 84 18 c0 fa ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x540]
9f002acd:	01 d8                	add    eax,ebx
9f002acf:	ff e0                	jmp    eax

9f002ad1 <.L4>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:35
        {
            case 1: //pid
                pid=atoiI(token);
9f002ad1:	83 ec 0c             	sub    esp,0xc
9f002ad4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002ad7:	e8 5f d9 ff ff       	call   9f00043b <atoiI>
9f002adc:	83 c4 10             	add    esp,0x10
9f002adf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:36
                procinfo->pid=pid;
9f002ae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ae5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f002ae8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:38
//procinfo->lastUpdateIteration=iteration;
                break;
9f002aea:	e9 54 02 00 00       	jmp    9f002d43 <.L3>

9f002aef <.L7>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:40
            case 3: //state
                procinfo->status=token[0];
9f002aef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002af2:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002af5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002af8:	88 50 2c             	mov    BYTE PTR [eax+0x2c],dl
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:41
                break;
9f002afb:	e9 43 02 00 00       	jmp    9f002d43 <.L3>

9f002b00 <.L8>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:43
            case 4: //ppid
                procinfo->ppid=atoiI(token);
9f002b00:	83 ec 0c             	sub    esp,0xc
9f002b03:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002b06:	e8 30 d9 ff ff       	call   9f00043b <atoiI>
9f002b0b:	83 c4 10             	add    esp,0x10
9f002b0e:	89 c2                	mov    edx,eax
9f002b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002b13:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:44
                break;
9f002b16:	e9 28 02 00 00       	jmp    9f002d43 <.L3>

9f002b1b <.L9>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:46
            case 7: //tty_nr
                procinfo->tty=atoiI(token);
9f002b1b:	83 ec 0c             	sub    esp,0xc
9f002b1e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002b21:	e8 15 d9 ff ff       	call   9f00043b <atoiI>
9f002b26:	83 c4 10             	add    esp,0x10
9f002b29:	89 c2                	mov    edx,eax
9f002b2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002b2e:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:47
                break;
9f002b31:	e9 0d 02 00 00       	jmp    9f002d43 <.L3>

9f002b36 <.L10>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:49
            case 10://minflt
                procinfo->minorFaults=atoiI(token);
9f002b36:	83 ec 0c             	sub    esp,0xc
9f002b39:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002b3c:	e8 fa d8 ff ff       	call   9f00043b <atoiI>
9f002b41:	83 c4 10             	add    esp,0x10
9f002b44:	89 c2                	mov    edx,eax
9f002b46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002b49:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:50
                break;
9f002b4c:	e9 f2 01 00 00       	jmp    9f002d43 <.L3>

9f002b51 <.L11>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:52
            case 11://majflt
                procinfo->majorFaults=atoiI(token);
9f002b51:	83 ec 0c             	sub    esp,0xc
9f002b54:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002b57:	e8 df d8 ff ff       	call   9f00043b <atoiI>
9f002b5c:	83 c4 10             	add    esp,0x10
9f002b5f:	89 c2                	mov    edx,eax
9f002b61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002b64:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:53
                break;
9f002b67:	e9 d7 01 00 00       	jmp    9f002d43 <.L3>

9f002b6c <.L13>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:55
            case 17://priority
                procinfo->priority=atoiI(token);
9f002b6c:	83 ec 0c             	sub    esp,0xc
9f002b6f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002b72:	e8 c4 d8 ff ff       	call   9f00043b <atoiI>
9f002b77:	83 c4 10             	add    esp,0x10
9f002b7a:	89 c2                	mov    edx,eax
9f002b7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002b7f:	89 50 54             	mov    DWORD PTR [eax+0x54],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:56
                break;
9f002b82:	e9 bc 01 00 00       	jmp    9f002d43 <.L3>

9f002b87 <.L6>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:58
            case 2: //comm
                strreplaceI(token,"(","",name);
9f002b87:	8d 45 84             	lea    eax,[ebp-0x7c]
9f002b8a:	50                   	push   eax
9f002b8b:	8d 83 a4 fa ff ff    	lea    eax,[ebx-0x55c]
9f002b91:	50                   	push   eax
9f002b92:	8d 83 a5 fa ff ff    	lea    eax,[ebx-0x55b]
9f002b98:	50                   	push   eax
9f002b99:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002b9c:	e8 c3 14 00 00       	call   9f004064 <strreplaceI>
9f002ba1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:59
                strreplaceI(name,")","",name2);
9f002ba4:	8d 85 20 ff ff ff    	lea    eax,[ebp-0xe0]
9f002baa:	50                   	push   eax
9f002bab:	8d 83 a4 fa ff ff    	lea    eax,[ebx-0x55c]
9f002bb1:	50                   	push   eax
9f002bb2:	8d 83 a7 fa ff ff    	lea    eax,[ebx-0x559]
9f002bb8:	50                   	push   eax
9f002bb9:	8d 45 84             	lea    eax,[ebp-0x7c]
9f002bbc:	50                   	push   eax
9f002bbd:	e8 a2 14 00 00       	call   9f004064 <strreplaceI>
9f002bc2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:60
                sprintfI(name3,"%-10s",name2);
9f002bc5:	83 ec 04             	sub    esp,0x4
9f002bc8:	8d 85 20 ff ff ff    	lea    eax,[ebp-0xe0]
9f002bce:	50                   	push   eax
9f002bcf:	8d 83 a9 fa ff ff    	lea    eax,[ebx-0x557]
9f002bd5:	50                   	push   eax
9f002bd6:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
9f002bdc:	50                   	push   eax
9f002bdd:	e8 bf 0a 00 00       	call   9f0036a1 <sprintfI>
9f002be2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:61
                strncpyI((char*)procinfo->name,name3,9);
9f002be5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002be8:	8d 50 04             	lea    edx,[eax+0x4]
9f002beb:	83 ec 04             	sub    esp,0x4
9f002bee:	6a 09                	push   0x9
9f002bf0:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
9f002bf6:	50                   	push   eax
9f002bf7:	52                   	push   edx
9f002bf8:	e8 e7 0f 00 00       	call   9f003be4 <strncpyI>
9f002bfd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:62
                break;
9f002c00:	e9 3e 01 00 00       	jmp    9f002d43 <.L3>

9f002c05 <.L12>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:64
            case 13://ticks
                procinfo->ticks=atoiI(token);
9f002c05:	83 ec 0c             	sub    esp,0xc
9f002c08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002c0b:	e8 2b d8 ff ff       	call   9f00043b <atoiI>
9f002c10:	83 c4 10             	add    esp,0x10
9f002c13:	89 c2                	mov    edx,eax
9f002c15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002c18:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:65
                procinfo->totalTicks+=(procinfo->ticks - procinfo->lastTicks);
9f002c1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002c1e:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
9f002c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002c24:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
9f002c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002c2a:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
9f002c2d:	29 c1                	sub    ecx,eax
9f002c2f:	89 c8                	mov    eax,ecx
9f002c31:	01 c2                	add    edx,eax
9f002c33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002c36:	89 50 48             	mov    DWORD PTR [eax+0x48],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:66
                time_t runtime_secs=procinfo->totalTicks/TICKS_PER_SECOND;
9f002c39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002c3c:	8b 48 48             	mov    ecx,DWORD PTR [eax+0x48]
9f002c3f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002c44:	89 c8                	mov    eax,ecx
9f002c46:	f7 ea                	imul   edx
9f002c48:	c1 fa 05             	sar    edx,0x5
9f002c4b:	89 c8                	mov    eax,ecx
9f002c4d:	c1 f8 1f             	sar    eax,0x1f
9f002c50:	29 c2                	sub    edx,eax
9f002c52:	89 d0                	mov    eax,edx
9f002c54:	89 85 b8 fe ff ff    	mov    DWORD PTR [ebp-0x148],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:68
                
                memsetI(&tinfo,0,sizeof(struct tm));
9f002c5a:	83 ec 04             	sub    esp,0x4
9f002c5d:	6a 2c                	push   0x2c
9f002c5f:	6a 00                	push   0x0
9f002c61:	8d 83 84 00 00 00    	lea    eax,[ebx+0x84]
9f002c67:	50                   	push   eax
9f002c68:	e8 83 fc ff ff       	call   9f0028f0 <memsetI>
9f002c6d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:69
                gmtime_rI((time_t*)&runtime_secs,&tinfo);
9f002c70:	83 ec 08             	sub    esp,0x8
9f002c73:	8d 83 84 00 00 00    	lea    eax,[ebx+0x84]
9f002c79:	50                   	push   eax
9f002c7a:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
9f002c80:	50                   	push   eax
9f002c81:	e8 92 16 00 00       	call   9f004318 <gmtime_rI>
9f002c86:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:70
                memsetI(procinfo->time,0,40);
9f002c89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002c8c:	83 c0 64             	add    eax,0x64
9f002c8f:	83 ec 04             	sub    esp,0x4
9f002c92:	6a 28                	push   0x28
9f002c94:	6a 00                	push   0x0
9f002c96:	50                   	push   eax
9f002c97:	e8 54 fc ff ff       	call   9f0028f0 <memsetI>
9f002c9c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:71
                sprintfI(procinfo->time,"%02i:%02i:%02i",tinfo.tm_hour,tinfo.tm_min,tinfo.tm_sec);
9f002c9f:	8b 8b 84 00 00 00    	mov    ecx,DWORD PTR [ebx+0x84]
9f002ca5:	8b 93 88 00 00 00    	mov    edx,DWORD PTR [ebx+0x88]
9f002cab:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
9f002cb1:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
9f002cb4:	83 c6 64             	add    esi,0x64
9f002cb7:	83 ec 0c             	sub    esp,0xc
9f002cba:	51                   	push   ecx
9f002cbb:	52                   	push   edx
9f002cbc:	50                   	push   eax
9f002cbd:	8d 83 af fa ff ff    	lea    eax,[ebx-0x551]
9f002cc3:	50                   	push   eax
9f002cc4:	56                   	push   esi
9f002cc5:	e8 d7 09 00 00       	call   9f0036a1 <sprintfI>
9f002cca:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:72
                procinfo->cpu=(((double)procinfo->ticks-(double)procinfo->lastTicks)/(double)ticksPerUpdateInterval)*100;
9f002ccd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002cd0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
9f002cd3:	89 85 b4 fe ff ff    	mov    DWORD PTR [ebp-0x14c],eax
9f002cd9:	db 85 b4 fe ff ff    	fild   DWORD PTR [ebp-0x14c]
9f002cdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ce2:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
9f002ce5:	89 85 b4 fe ff ff    	mov    DWORD PTR [ebp-0x14c],eax
9f002ceb:	db 85 b4 fe ff ff    	fild   DWORD PTR [ebp-0x14c]
9f002cf1:	de e9                	fsubp  st(1),st
9f002cf3:	db 45 10             	fild   DWORD PTR [ebp+0x10]
9f002cf6:	de f9                	fdivp  st(1),st
9f002cf8:	dd 83 3c fb ff ff    	fld    QWORD PTR [ebx-0x4c4]
9f002cfe:	de c9                	fmulp  st(1),st
9f002d00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d03:	dd 58 4c             	fstp   QWORD PTR [eax+0x4c]
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:73
                procinfo->lastTicks=procinfo->ticks;
9f002d06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d09:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
9f002d0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d0f:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:76
                
//procinfo->cpu=(((double)procinfo->ticks-(double)procinfo->lastTicks)/(double)intervalTicks)*100;
                break;
9f002d12:	eb 2f                	jmp    9f002d43 <.L3>

9f002d14 <.L14>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:78
            case 22://vsize
                procinfo->virtualSize=atoiI(token);
9f002d14:	83 ec 0c             	sub    esp,0xc
9f002d17:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002d1a:	e8 1c d7 ff ff       	call   9f00043b <atoiI>
9f002d1f:	83 c4 10             	add    esp,0x10
9f002d22:	89 c2                	mov    edx,eax
9f002d24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d27:	89 50 58             	mov    DWORD PTR [eax+0x58],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:79
                break;
9f002d2a:	eb 17                	jmp    9f002d43 <.L3>

9f002d2c <.L15>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:81
            case 23://rss
                procinfo->memorySize=atoiI(token);
9f002d2c:	83 ec 0c             	sub    esp,0xc
9f002d2f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002d32:	e8 04 d7 ff ff       	call   9f00043b <atoiI>
9f002d37:	83 c4 10             	add    esp,0x10
9f002d3a:	89 c2                	mov    edx,eax
9f002d3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d3f:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:82
                break;
9f002d42:	90                   	nop

9f002d43 <.L3>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:84
        }
        tokenNumber++;
9f002d43:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:85
        token=strtokI(NULL,delim);
9f002d47:	83 ec 08             	sub    esp,0x8
9f002d4a:	8d 45 e8             	lea    eax,[ebp-0x18]
9f002d4d:	50                   	push   eax
9f002d4e:	6a 00                	push   0x0
9f002d50:	e8 c7 d3 ff ff       	call   9f00011c <strtokI>
9f002d55:	83 c4 10             	add    esp,0x10
9f002d58:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:30
    memsetI(name,0,100);
    memsetI(name2,0,100);
    memsetI(name3,0,100);
    
    token=strtokI(statinfo,delim);
    while (token)
9f002d5b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f002d5f:	0f 85 51 fd ff ff    	jne    9f002ab6 <buildProcInfoTI+0x86>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:87
                break;
        }
        tokenNumber++;
        token=strtokI(NULL,delim);
    }
    return procinfo;
9f002d65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:89
    
}
9f002d68:	8d 65 f8             	lea    esp,[ebp-0x8]
9f002d6b:	5b                   	pop    ebx
9f002d6c:	5e                   	pop    esi
9f002d6d:	5d                   	pop    ebp
9f002d6e:	c3                   	ret    

9f002d6f <buildProcInfoT>:
buildProcInfoT():
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:92

VISIBLE procInfo_t *buildProcInfoT(procInfo_t *procinfo, char *statinfo)
{
9f002d6f:	55                   	push   ebp
9f002d70:	89 e5                	mov    ebp,esp
9f002d72:	83 ec 08             	sub    esp,0x8
9f002d75:	e8 68 22 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f002d7a:	05 c2 4e 00 00       	add    eax,0x4ec2
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:93
    return buildProcInfoTI(procinfo, statinfo, 0);
9f002d7f:	83 ec 04             	sub    esp,0x4
9f002d82:	6a 00                	push   0x0
9f002d84:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002d87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002d8a:	e8 a1 fc ff ff       	call   9f002a30 <buildProcInfoTI>
9f002d8f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:94
}
9f002d92:	c9                   	leave  
9f002d93:	c3                   	ret    

9f002d94 <buildAllProcInfoTs>:
buildAllProcInfoTs():
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:97

VISIBLE void buildAllProcInfoTs(procInfo_t **topinfo, int intervalTicks, int iteration)
{
9f002d94:	55                   	push   ebp
9f002d95:	89 e5                	mov    ebp,esp
9f002d97:	56                   	push   esi
9f002d98:	53                   	push   ebx
9f002d99:	81 ec a0 01 00 00    	sub    esp,0x1a0
9f002d9f:	e8 42 22 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f002da4:	81 c3 98 4e 00 00    	add    ebx,0x4e98
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:100
    static direntry_t *dirEntries;
    
    if (!dirEntries)
9f002daa:	8b 83 b0 00 00 00    	mov    eax,DWORD PTR [ebx+0xb0]
9f002db0:	85 c0                	test   eax,eax
9f002db2:	75 16                	jne    9f002dca <buildAllProcInfoTs+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:101
        dirEntries=mallocI(PROCINFO_MAX_PROCESSES*sizeof(direntry_t));
9f002db4:	83 ec 0c             	sub    esp,0xc
9f002db7:	68 00 17 01 00       	push   0x11700
9f002dbc:	e8 94 f5 ff ff       	call   9f002355 <mallocI>
9f002dc1:	83 c4 10             	add    esp,0x10
9f002dc4:	89 83 b0 00 00 00    	mov    DWORD PTR [ebx+0xb0],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:104

    char path[128];
    int procCount=getdirI("/proc/",dirEntries,1024*100);
9f002dca:	8b 83 b0 00 00 00    	mov    eax,DWORD PTR [ebx+0xb0]
9f002dd0:	83 ec 04             	sub    esp,0x4
9f002dd3:	68 00 90 01 00       	push   0x19000
9f002dd8:	50                   	push   eax
9f002dd9:	8d 83 20 fb ff ff    	lea    eax,[ebx-0x4e0]
9f002ddf:	50                   	push   eax
9f002de0:	e8 1f db ff ff       	call   9f000904 <getdirI>
9f002de5:	83 c4 10             	add    esp,0x10
9f002de8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:108
    char statBuffer[256];
    procInfo_t *currProc;

    for (int cnt=0;cnt<procCount;cnt++)
9f002deb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f002df2:	e9 af 01 00 00       	jmp    9f002fa6 <buildAllProcInfoTs+0x212>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:110
    {
        if (dirEntries[cnt].is_dir)
9f002df7:	8b 93 b0 00 00 00    	mov    edx,DWORD PTR [ebx+0xb0]
9f002dfd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002e00:	69 c0 17 01 00 00    	imul   eax,eax,0x117
9f002e06:	01 d0                	add    eax,edx
9f002e08:	0f b6 80 04 01 00 00 	movzx  eax,BYTE PTR [eax+0x104]
9f002e0f:	84 c0                	test   al,al
9f002e11:	0f 84 8b 01 00 00    	je     9f002fa2 <buildAllProcInfoTs+0x20e>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:112
        {
            strcpyI(path,"/proc/");
9f002e17:	83 ec 08             	sub    esp,0x8
9f002e1a:	8d 83 20 fb ff ff    	lea    eax,[ebx-0x4e0]
9f002e20:	50                   	push   eax
9f002e21:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
9f002e27:	50                   	push   eax
9f002e28:	e8 2f 0b 00 00       	call   9f00395c <strcpyI>
9f002e2d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:113
            strcatI(path,dirEntries[cnt].filename);
9f002e30:	8b 93 b0 00 00 00    	mov    edx,DWORD PTR [ebx+0xb0]
9f002e36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002e39:	69 c0 17 01 00 00    	imul   eax,eax,0x117
9f002e3f:	01 d0                	add    eax,edx
9f002e41:	83 ec 08             	sub    esp,0x8
9f002e44:	50                   	push   eax
9f002e45:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
9f002e4b:	50                   	push   eax
9f002e4c:	e8 79 09 00 00       	call   9f0037ca <strcatI>
9f002e51:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:114
            strcatI(path,"/stat");
9f002e54:	83 ec 08             	sub    esp,0x8
9f002e57:	8d 83 27 fb ff ff    	lea    eax,[ebx-0x4d9]
9f002e5d:	50                   	push   eax
9f002e5e:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
9f002e64:	50                   	push   eax
9f002e65:	e8 60 09 00 00       	call   9f0037ca <strcatI>
9f002e6a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:115
            if (strstrI(path,"self")!=NULL)
9f002e6d:	83 ec 08             	sub    esp,0x8
9f002e70:	8d 83 2d fb ff ff    	lea    eax,[ebx-0x4d3]
9f002e76:	50                   	push   eax
9f002e77:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
9f002e7d:	50                   	push   eax
9f002e7e:	e8 c3 13 00 00       	call   9f004246 <strstrI>
9f002e83:	83 c4 10             	add    esp,0x10
9f002e86:	85 c0                	test   eax,eax
9f002e88:	0f 85 13 01 00 00    	jne    9f002fa1 <buildAllProcInfoTs+0x20d>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:117
                continue;
            int *handle=openI(path,"r");
9f002e8e:	83 ec 08             	sub    esp,0x8
9f002e91:	8d 83 32 fb ff ff    	lea    eax,[ebx-0x4ce]
9f002e97:	50                   	push   eax
9f002e98:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
9f002e9e:	50                   	push   eax
9f002e9f:	e8 b7 da ff ff       	call   9f00095b <openI>
9f002ea4:	83 c4 10             	add    esp,0x10
9f002ea7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:118
            if (handle)
9f002eaa:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f002eae:	0f 84 ee 00 00 00    	je     9f002fa2 <buildAllProcInfoTs+0x20e>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:120
            {
                readI(handle,statBuffer,1024,1);
9f002eb4:	6a 01                	push   0x1
9f002eb6:	68 00 04 00 00       	push   0x400
9f002ebb:	8d 85 60 fe ff ff    	lea    eax,[ebp-0x1a0]
9f002ec1:	50                   	push   eax
9f002ec2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002ec5:	e8 16 dc ff ff       	call   9f000ae0 <readI>
9f002eca:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:121
                closeI(handle);
9f002ecd:	83 ec 0c             	sub    esp,0xc
9f002ed0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002ed3:	e8 be db ff ff       	call   9f000a96 <closeI>
9f002ed8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:123
                //buildTopInfo(statBuffer,topinfo);
                char *space=strstrI(statBuffer," ");
9f002edb:	83 ec 08             	sub    esp,0x8
9f002ede:	8d 83 34 fb ff ff    	lea    eax,[ebx-0x4cc]
9f002ee4:	50                   	push   eax
9f002ee5:	8d 85 60 fe ff ff    	lea    eax,[ebp-0x1a0]
9f002eeb:	50                   	push   eax
9f002eec:	e8 55 13 00 00       	call   9f004246 <strstrI>
9f002ef1:	83 c4 10             	add    esp,0x10
9f002ef4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:125
                char pid[8];
                strncpyI(pid,statBuffer,space-statBuffer);
9f002ef7:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f002efa:	8d 85 60 fe ff ff    	lea    eax,[ebp-0x1a0]
9f002f00:	29 c2                	sub    edx,eax
9f002f02:	89 d0                	mov    eax,edx
9f002f04:	83 ec 04             	sub    esp,0x4
9f002f07:	50                   	push   eax
9f002f08:	8d 85 60 fe ff ff    	lea    eax,[ebp-0x1a0]
9f002f0e:	50                   	push   eax
9f002f0f:	8d 85 58 fe ff ff    	lea    eax,[ebp-0x1a8]
9f002f15:	50                   	push   eax
9f002f16:	e8 c9 0c 00 00       	call   9f003be4 <strncpyI>
9f002f1b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:126
                int ipid=atoiI(pid);
9f002f1e:	83 ec 0c             	sub    esp,0xc
9f002f21:	8d 85 58 fe ff ff    	lea    eax,[ebp-0x1a8]
9f002f27:	50                   	push   eax
9f002f28:	e8 0e d5 ff ff       	call   9f00043b <atoiI>
9f002f2d:	83 c4 10             	add    esp,0x10
9f002f30:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:127
                if (topinfo[ipid]==NULL)
9f002f33:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002f36:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f002f3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f40:	01 d0                	add    eax,edx
9f002f42:	8b 00                	mov    eax,DWORD PTR [eax]
9f002f44:	85 c0                	test   eax,eax
9f002f46:	75 22                	jne    9f002f6a <buildAllProcInfoTs+0x1d6>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:128
                    topinfo[ipid]=mallocI(sizeof(procInfo_t));
9f002f48:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002f4b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f002f52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f55:	8d 34 02             	lea    esi,[edx+eax*1]
9f002f58:	83 ec 0c             	sub    esp,0xc
9f002f5b:	68 8c 00 00 00       	push   0x8c
9f002f60:	e8 f0 f3 ff ff       	call   9f002355 <mallocI>
9f002f65:	83 c4 10             	add    esp,0x10
9f002f68:	89 06                	mov    DWORD PTR [esi],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:129
                currProc=topinfo[ipid];
9f002f6a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002f6d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f002f74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f77:	01 d0                	add    eax,edx
9f002f79:	8b 00                	mov    eax,DWORD PTR [eax]
9f002f7b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:130
                buildProcInfoTI(currProc, statBuffer, intervalTicks);
9f002f7e:	83 ec 04             	sub    esp,0x4
9f002f81:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002f84:	8d 85 60 fe ff ff    	lea    eax,[ebp-0x1a0]
9f002f8a:	50                   	push   eax
9f002f8b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f002f8e:	e8 9d fa ff ff       	call   9f002a30 <buildProcInfoTI>
9f002f93:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:131
                currProc->lastUpdateIteration=iteration;
9f002f96:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f002f99:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f002f9c:	89 50 60             	mov    DWORD PTR [eax+0x60],edx
9f002f9f:	eb 01                	jmp    9f002fa2 <buildAllProcInfoTs+0x20e>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:116
        {
            strcpyI(path,"/proc/");
            strcatI(path,dirEntries[cnt].filename);
            strcatI(path,"/stat");
            if (strstrI(path,"self")!=NULL)
                continue;
9f002fa1:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:108 (discriminator 2)
    char path[128];
    int procCount=getdirI("/proc/",dirEntries,1024*100);
    char statBuffer[256];
    procInfo_t *currProc;

    for (int cnt=0;cnt<procCount;cnt++)
9f002fa2:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:108 (discriminator 1)
9f002fa6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002fa9:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f002fac:	0f 8c 45 fe ff ff    	jl     9f002df7 <buildAllProcInfoTs+0x63>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:137
            }
        }
    }
    //free(dirEntries); variable is static so it will exist until the program ends
    //at which time it will be free'd automagically
9f002fb2:	90                   	nop
9f002fb3:	8d 65 f8             	lea    esp,[ebp-0x8]
9f002fb6:	5b                   	pop    ebx
9f002fb7:	5e                   	pop    esi
9f002fb8:	5d                   	pop    ebp
9f002fb9:	c3                   	ret    
9f002fba:	66 90                	xchg   ax,ax

9f002fbc <skip_atoi>:
skip_atoi():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:12
#include <stdarg.h>
#include "common.h"
#include "strings.h"

static int skip_atoi(const char **s)
{
9f002fbc:	55                   	push   ebp
9f002fbd:	89 e5                	mov    ebp,esp
9f002fbf:	53                   	push   ebx
9f002fc0:	83 ec 10             	sub    esp,0x10
9f002fc3:	e8 1a 20 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f002fc8:	05 74 4c 00 00       	add    eax,0x4c74
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:13
	int i = 0;
9f002fcd:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:15

	while (ISDIGIT(**s))
9f002fd4:	eb 29                	jmp    9f002fff <skip_atoi+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:16
		i = i * 10 + *((*s)++) - '0';
9f002fd6:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f002fd9:	89 d0                	mov    eax,edx
9f002fdb:	c1 e0 02             	shl    eax,0x2
9f002fde:	01 d0                	add    eax,edx
9f002fe0:	01 c0                	add    eax,eax
9f002fe2:	89 c3                	mov    ebx,eax
9f002fe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fe7:	8b 00                	mov    eax,DWORD PTR [eax]
9f002fe9:	8d 48 01             	lea    ecx,[eax+0x1]
9f002fec:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002fef:	89 0a                	mov    DWORD PTR [edx],ecx
9f002ff1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002ff4:	0f be c0             	movsx  eax,al
9f002ff7:	01 d8                	add    eax,ebx
9f002ff9:	83 e8 30             	sub    eax,0x30
9f002ffc:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:15

static int skip_atoi(const char **s)
{
	int i = 0;

	while (ISDIGIT(**s))
9f002fff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003002:	8b 00                	mov    eax,DWORD PTR [eax]
9f003004:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003007:	0f be c0             	movsx  eax,al
9f00300a:	83 e8 30             	sub    eax,0x30
9f00300d:	83 f8 09             	cmp    eax,0x9
9f003010:	76 c4                	jbe    9f002fd6 <skip_atoi+0x1a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:17
		i = i * 10 + *((*s)++) - '0';
	return i;
9f003012:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:18
}
9f003015:	83 c4 10             	add    esp,0x10
9f003018:	5b                   	pop    ebx
9f003019:	5d                   	pop    ebp
9f00301a:	c3                   	ret    

9f00301b <number>:
number():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:36
n = ((unsigned long) n) / (unsigned) base; \
__res; })

static char *number(char *str, long num, int base, int size, int precision,
		    int type)
{
9f00301b:	55                   	push   ebp
9f00301c:	89 e5                	mov    ebp,esp
9f00301e:	56                   	push   esi
9f00301f:	53                   	push   ebx
9f003020:	83 ec 60             	sub    esp,0x60
9f003023:	e8 be 1f 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f003028:	81 c3 14 4c 00 00    	add    ebx,0x4c14
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:46
	char c, sign, locase;
	int i;

	/* locase = 0 or 0x20. ORing digits or letters with 'locase'
	 * produces same digits or (maybe lowercased) letters */
	locase = (type & SMALL);
9f00302e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003031:	83 e0 20             	and    eax,0x20
9f003034:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:47
	if (type & LEFT)
9f003037:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00303a:	83 e0 10             	and    eax,0x10
9f00303d:	85 c0                	test   eax,eax
9f00303f:	74 04                	je     9f003045 <number+0x2a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:48
		type &= ~ZEROPAD;
9f003041:	83 65 1c fe          	and    DWORD PTR [ebp+0x1c],0xfffffffe
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:49
	if (base < 2 || base > 16)
9f003045:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f003049:	7e 06                	jle    9f003051 <number+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:49 (discriminator 1)
9f00304b:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f00304f:	7e 0a                	jle    9f00305b <number+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50
		return NULL;
9f003051:	b8 00 00 00 00       	mov    eax,0x0
9f003056:	e9 f7 01 00 00       	jmp    9f003252 <number+0x237>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:51
	c = (type & ZEROPAD) ? '0' : ' ';
9f00305b:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00305e:	83 e0 01             	and    eax,0x1
9f003061:	85 c0                	test   eax,eax
9f003063:	74 07                	je     9f00306c <number+0x51>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:51 (discriminator 1)
9f003065:	b8 30 00 00 00       	mov    eax,0x30
9f00306a:	eb 05                	jmp    9f003071 <number+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:51 (discriminator 2)
9f00306c:	b8 20 00 00 00       	mov    eax,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:51 (discriminator 4)
9f003071:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:52 (discriminator 4)
	sign = 0;
9f003074:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:53 (discriminator 4)
	if (type & SIGN) {
9f003078:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00307b:	83 e0 02             	and    eax,0x2
9f00307e:	85 c0                	test   eax,eax
9f003080:	74 39                	je     9f0030bb <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:54
		if (num < 0) {
9f003082:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f003086:	79 0d                	jns    9f003095 <number+0x7a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:55
			sign = '-';
9f003088:	c6 45 f7 2d          	mov    BYTE PTR [ebp-0x9],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:56
			num = -num;
9f00308c:	f7 5d 0c             	neg    DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:57
			size--;
9f00308f:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f003093:	eb 26                	jmp    9f0030bb <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:58
		} else if (type & PLUS) {
9f003095:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003098:	83 e0 04             	and    eax,0x4
9f00309b:	85 c0                	test   eax,eax
9f00309d:	74 0a                	je     9f0030a9 <number+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:59
			sign = '+';
9f00309f:	c6 45 f7 2b          	mov    BYTE PTR [ebp-0x9],0x2b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:60
			size--;
9f0030a3:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f0030a7:	eb 12                	jmp    9f0030bb <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:61
		} else if (type & SPACE) {
9f0030a9:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0030ac:	83 e0 08             	and    eax,0x8
9f0030af:	85 c0                	test   eax,eax
9f0030b1:	74 08                	je     9f0030bb <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:62
			sign = ' ';
9f0030b3:	c6 45 f7 20          	mov    BYTE PTR [ebp-0x9],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:63
			size--;
9f0030b7:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:66
		}
	}
	if (type & SPECIAL) {
9f0030bb:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0030be:	83 e0 40             	and    eax,0x40
9f0030c1:	85 c0                	test   eax,eax
9f0030c3:	74 16                	je     9f0030db <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:67
		if (base == 16)
9f0030c5:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f0030c9:	75 06                	jne    9f0030d1 <number+0xb6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:68
			size -= 2;
9f0030cb:	83 6d 14 02          	sub    DWORD PTR [ebp+0x14],0x2
9f0030cf:	eb 0a                	jmp    9f0030db <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:69
		else if (base == 8)
9f0030d1:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f0030d5:	75 04                	jne    9f0030db <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:70
			size--;
9f0030d7:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:72
	}
	i = 0;
9f0030db:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:73
	if (num == 0)
9f0030e2:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f0030e6:	75 4d                	jne    9f003135 <number+0x11a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:74
		tmp[i++] = '0';
9f0030e8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0030eb:	8d 50 01             	lea    edx,[eax+0x1]
9f0030ee:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0030f1:	c6 44 05 a6 30       	mov    BYTE PTR [ebp+eax*1-0x5a],0x30
9f0030f6:	eb 43                	jmp    9f00313b <number+0x120>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:77
	else
		while (num != 0)
			tmp[i++] = (digits[__do_div(num, base)] | locase);
9f0030f8:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f0030fb:	8d 41 01             	lea    eax,[ecx+0x1]
9f0030fe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f003101:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003104:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f003107:	ba 00 00 00 00       	mov    edx,0x0
9f00310c:	f7 f6                	div    esi
9f00310e:	89 d0                	mov    eax,edx
9f003110:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f003113:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003116:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f003119:	ba 00 00 00 00       	mov    edx,0x0
9f00311e:	f7 f6                	div    esi
9f003120:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
9f003123:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f003126:	0f b6 84 03 d8 fc ff 	movzx  eax,BYTE PTR [ebx+eax*1-0x328]
9f00312d:	ff 
9f00312e:	0a 45 ef             	or     al,BYTE PTR [ebp-0x11]
9f003131:	88 44 0d a6          	mov    BYTE PTR [ebp+ecx*1-0x5a],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:76
	}
	i = 0;
	if (num == 0)
		tmp[i++] = '0';
	else
		while (num != 0)
9f003135:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f003139:	75 bd                	jne    9f0030f8 <number+0xdd>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:78
			tmp[i++] = (digits[__do_div(num, base)] | locase);
	if (i > precision)
9f00313b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00313e:	3b 45 18             	cmp    eax,DWORD PTR [ebp+0x18]
9f003141:	7e 06                	jle    9f003149 <number+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:79
		precision = i;
9f003143:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003146:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:80
	size -= precision;
9f003149:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f00314c:	29 45 14             	sub    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
	if (!(type & (ZEROPAD + LEFT)))
9f00314f:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003152:	83 e0 11             	and    eax,0x11
9f003155:	85 c0                	test   eax,eax
9f003157:	75 1b                	jne    9f003174 <number+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:82
		while (size-- > 0)
9f003159:	eb 0c                	jmp    9f003167 <number+0x14c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:83
			*str++ = ' ';
9f00315b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00315e:	8d 50 01             	lea    edx,[eax+0x1]
9f003161:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003164:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:82
			tmp[i++] = (digits[__do_div(num, base)] | locase);
	if (i > precision)
		precision = i;
	size -= precision;
	if (!(type & (ZEROPAD + LEFT)))
		while (size-- > 0)
9f003167:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f00316a:	8d 50 ff             	lea    edx,[eax-0x1]
9f00316d:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f003170:	85 c0                	test   eax,eax
9f003172:	7f e7                	jg     9f00315b <number+0x140>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:84
			*str++ = ' ';
	if (sign)
9f003174:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f003178:	74 0f                	je     9f003189 <number+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:85
		*str++ = sign;
9f00317a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00317d:	8d 50 01             	lea    edx,[eax+0x1]
9f003180:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003183:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f003187:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:86
	if (type & SPECIAL) {
9f003189:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00318c:	83 e0 40             	and    eax,0x40
9f00318f:	85 c0                	test   eax,eax
9f003191:	74 38                	je     9f0031cb <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:87
		if (base == 8)
9f003193:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f003197:	75 0e                	jne    9f0031a7 <number+0x18c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:88
			*str++ = '0';
9f003199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00319c:	8d 50 01             	lea    edx,[eax+0x1]
9f00319f:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0031a2:	c6 00 30             	mov    BYTE PTR [eax],0x30
9f0031a5:	eb 24                	jmp    9f0031cb <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:89
		else if (base == 16) {
9f0031a7:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f0031ab:	75 1e                	jne    9f0031cb <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:90
			*str++ = '0';
9f0031ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0031b0:	8d 50 01             	lea    edx,[eax+0x1]
9f0031b3:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0031b6:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:91
			*str++ = ('X' | locase);
9f0031b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0031bc:	8d 50 01             	lea    edx,[eax+0x1]
9f0031bf:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0031c2:	0f b6 55 ef          	movzx  edx,BYTE PTR [ebp-0x11]
9f0031c6:	83 ca 58             	or     edx,0x58
9f0031c9:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
		}
	}
	if (!(type & LEFT))
9f0031cb:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0031ce:	83 e0 10             	and    eax,0x10
9f0031d1:	85 c0                	test   eax,eax
9f0031d3:	75 2c                	jne    9f003201 <number+0x1e6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:95
		while (size-- > 0)
9f0031d5:	eb 0f                	jmp    9f0031e6 <number+0x1cb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:96
			*str++ = c;
9f0031d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0031da:	8d 50 01             	lea    edx,[eax+0x1]
9f0031dd:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0031e0:	0f b6 55 ee          	movzx  edx,BYTE PTR [ebp-0x12]
9f0031e4:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:95
			*str++ = '0';
			*str++ = ('X' | locase);
		}
	}
	if (!(type & LEFT))
		while (size-- > 0)
9f0031e6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f0031e9:	8d 50 ff             	lea    edx,[eax-0x1]
9f0031ec:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f0031ef:	85 c0                	test   eax,eax
9f0031f1:	7f e4                	jg     9f0031d7 <number+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:97
			*str++ = c;
	while (i < precision--)
9f0031f3:	eb 0c                	jmp    9f003201 <number+0x1e6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98
		*str++ = '0';
9f0031f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0031f8:	8d 50 01             	lea    edx,[eax+0x1]
9f0031fb:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0031fe:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:97
		}
	}
	if (!(type & LEFT))
		while (size-- > 0)
			*str++ = c;
	while (i < precision--)
9f003201:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f003204:	8d 50 ff             	lea    edx,[eax-0x1]
9f003207:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
9f00320a:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f00320d:	7f e6                	jg     9f0031f5 <number+0x1da>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:99
		*str++ = '0';
	while (i-- > 0)
9f00320f:	eb 16                	jmp    9f003227 <number+0x20c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
		*str++ = tmp[i];
9f003211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003214:	8d 50 01             	lea    edx,[eax+0x1]
9f003217:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00321a:	8d 4d a6             	lea    ecx,[ebp-0x5a]
9f00321d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f003220:	01 ca                	add    edx,ecx
9f003222:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003225:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:99
	if (!(type & LEFT))
		while (size-- > 0)
			*str++ = c;
	while (i < precision--)
		*str++ = '0';
	while (i-- > 0)
9f003227:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00322a:	8d 50 ff             	lea    edx,[eax-0x1]
9f00322d:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f003230:	85 c0                	test   eax,eax
9f003232:	7f dd                	jg     9f003211 <number+0x1f6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:101
		*str++ = tmp[i];
	while (size-- > 0)
9f003234:	eb 0c                	jmp    9f003242 <number+0x227>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:102
		*str++ = ' ';
9f003236:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003239:	8d 50 01             	lea    edx,[eax+0x1]
9f00323c:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00323f:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:101
			*str++ = c;
	while (i < precision--)
		*str++ = '0';
	while (i-- > 0)
		*str++ = tmp[i];
	while (size-- > 0)
9f003242:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f003245:	8d 50 ff             	lea    edx,[eax-0x1]
9f003248:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f00324b:	85 c0                	test   eax,eax
9f00324d:	7f e7                	jg     9f003236 <number+0x21b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:103
		*str++ = ' ';
	return str;
9f00324f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:104 (discriminator 1)
}
9f003252:	83 c4 60             	add    esp,0x60
9f003255:	5b                   	pop    ebx
9f003256:	5e                   	pop    esi
9f003257:	5d                   	pop    ebp
9f003258:	c3                   	ret    

9f003259 <vsprintf>:
vsprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:106
int vsprintf(char *buf, const char *fmt, va_list args)
{
9f003259:	55                   	push   ebp
9f00325a:	89 e5                	mov    ebp,esp
9f00325c:	53                   	push   ebx
9f00325d:	83 ec 34             	sub    esp,0x34
9f003260:	e8 81 1d 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f003265:	81 c3 d7 49 00 00    	add    ebx,0x49d7
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:120
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f00326b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00326e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
9f003271:	e9 08 04 00 00       	jmp    9f00367e <.L96+0x95>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:121
		if (*fmt != '%') {
9f003276:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003279:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00327c:	3c 25                	cmp    al,0x25
9f00327e:	74 16                	je     9f003296 <vsprintf+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:122
			*str++ = *fmt;
9f003280:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003283:	8d 50 01             	lea    edx,[eax+0x1]
9f003286:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f003289:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00328c:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f00328f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:123
			continue;
9f003291:	e9 df 03 00 00       	jmp    9f003675 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:127
		}

		/* process flags */
		flags = 0;
9f003296:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:129
	      repeat:
		++fmt;		/* this also skips first '%' */
9f00329d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0032a0:	83 c0 01             	add    eax,0x1
9f0032a3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:130
		switch (*fmt) {
9f0032a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0032a9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0032ac:	0f be c0             	movsx  eax,al
9f0032af:	83 e8 20             	sub    eax,0x20
9f0032b2:	83 f8 10             	cmp    eax,0x10
9f0032b5:	77 2c                	ja     9f0032e3 <.L43>
9f0032b7:	c1 e0 02             	shl    eax,0x2
9f0032ba:	8b 84 18 44 fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x4bc]
9f0032c1:	01 d8                	add    eax,ebx
9f0032c3:	ff e0                	jmp    eax

9f0032c5 <.L48>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:132
		case '-':
			flags |= LEFT;
9f0032c5:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:133
			goto repeat;
9f0032c9:	eb d2                	jmp    9f00329d <vsprintf+0x44>

9f0032cb <.L47>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:135
		case '+':
			flags |= PLUS;
9f0032cb:	83 4d dc 04          	or     DWORD PTR [ebp-0x24],0x4
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:136
			goto repeat;
9f0032cf:	eb cc                	jmp    9f00329d <vsprintf+0x44>

9f0032d1 <.L44>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:138
		case ' ':
			flags |= SPACE;
9f0032d1:	83 4d dc 08          	or     DWORD PTR [ebp-0x24],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:139
			goto repeat;
9f0032d5:	eb c6                	jmp    9f00329d <vsprintf+0x44>

9f0032d7 <.L46>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:141
		case '#':
			flags |= SPECIAL;
9f0032d7:	83 4d dc 40          	or     DWORD PTR [ebp-0x24],0x40
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:142
			goto repeat;
9f0032db:	eb c0                	jmp    9f00329d <vsprintf+0x44>

9f0032dd <.L49>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:144
		case '0':
			flags |= ZEROPAD;
9f0032dd:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:145
			goto repeat;
9f0032e1:	eb ba                	jmp    9f00329d <vsprintf+0x44>

9f0032e3 <.L43>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:149
		}

		/* get field width */
		field_width = -1;
9f0032e3:	c7 45 d8 ff ff ff ff 	mov    DWORD PTR [ebp-0x28],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:150
		if (ISDIGIT(*fmt))
9f0032ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0032ed:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0032f0:	0f be c0             	movsx  eax,al
9f0032f3:	83 e8 30             	sub    eax,0x30
9f0032f6:	83 f8 09             	cmp    eax,0x9
9f0032f9:	77 11                	ja     9f00330c <.L43+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:151
			field_width = skip_atoi(&fmt);
9f0032fb:	8d 45 0c             	lea    eax,[ebp+0xc]
9f0032fe:	50                   	push   eax
9f0032ff:	e8 b8 fc ff ff       	call   9f002fbc <skip_atoi>
9f003304:	83 c4 04             	add    esp,0x4
9f003307:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
9f00330a:	eb 2e                	jmp    9f00333a <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:152
		else if (*fmt == '*') {
9f00330c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00330f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003312:	3c 2a                	cmp    al,0x2a
9f003314:	75 24                	jne    9f00333a <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:153
			++fmt;
9f003316:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003319:	83 c0 01             	add    eax,0x1
9f00331c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:155
			/* it's the next argument */
			field_width = va_arg(args, int);
9f00331f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003322:	8d 50 04             	lea    edx,[eax+0x4]
9f003325:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003328:	8b 00                	mov    eax,DWORD PTR [eax]
9f00332a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:156
			if (field_width < 0) {
9f00332d:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f003331:	79 07                	jns    9f00333a <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:157
				field_width = -field_width;
9f003333:	f7 5d d8             	neg    DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:158
				flags |= LEFT;
9f003336:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:163
			}
		}

		/* get the precision */
		precision = -1;
9f00333a:	c7 45 d4 ff ff ff ff 	mov    DWORD PTR [ebp-0x2c],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:164
		if (*fmt == '.') {
9f003341:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003344:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003347:	3c 2e                	cmp    al,0x2e
9f003349:	75 59                	jne    9f0033a4 <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:165
			++fmt;
9f00334b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00334e:	83 c0 01             	add    eax,0x1
9f003351:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:166
			if (ISDIGIT(*fmt))
9f003354:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003357:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00335a:	0f be c0             	movsx  eax,al
9f00335d:	83 e8 30             	sub    eax,0x30
9f003360:	83 f8 09             	cmp    eax,0x9
9f003363:	77 11                	ja     9f003376 <.L43+0x93>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:167
				precision = skip_atoi(&fmt);
9f003365:	8d 45 0c             	lea    eax,[ebp+0xc]
9f003368:	50                   	push   eax
9f003369:	e8 4e fc ff ff       	call   9f002fbc <skip_atoi>
9f00336e:	83 c4 04             	add    esp,0x4
9f003371:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
9f003374:	eb 21                	jmp    9f003397 <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:168
			else if (*fmt == '*') {
9f003376:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003379:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00337c:	3c 2a                	cmp    al,0x2a
9f00337e:	75 17                	jne    9f003397 <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:169
				++fmt;
9f003380:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003383:	83 c0 01             	add    eax,0x1
9f003386:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:171
				/* it's the next argument */
				precision = va_arg(args, int);
9f003389:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00338c:	8d 50 04             	lea    edx,[eax+0x4]
9f00338f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003392:	8b 00                	mov    eax,DWORD PTR [eax]
9f003394:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:173
			}
			if (precision < 0)
9f003397:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
9f00339b:	79 07                	jns    9f0033a4 <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:174
				precision = 0;
9f00339d:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178
		}

		/* get the conversion qualifier */
		qualifier = -1;
9f0033a4:	c7 45 d0 ff ff ff ff 	mov    DWORD PTR [ebp-0x30],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:179
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {
9f0033ab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0033ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0033b1:	3c 68                	cmp    al,0x68
9f0033b3:	74 14                	je     9f0033c9 <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:179 (discriminator 1)
9f0033b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0033b8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0033bb:	3c 6c                	cmp    al,0x6c
9f0033bd:	74 0a                	je     9f0033c9 <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:179 (discriminator 2)
9f0033bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0033c2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0033c5:	3c 4c                	cmp    al,0x4c
9f0033c7:	75 15                	jne    9f0033de <.L43+0xfb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:180
			qualifier = *fmt;
9f0033c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0033cc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0033cf:	0f be c0             	movsx  eax,al
9f0033d2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:181
			++fmt;
9f0033d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0033d8:	83 c0 01             	add    eax,0x1
9f0033db:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:185
		}

		/* default base */
		base = 10;
9f0033de:	c7 45 e8 0a 00 00 00 	mov    DWORD PTR [ebp-0x18],0xa
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:187

		switch (*fmt) {
9f0033e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0033e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0033eb:	0f be c0             	movsx  eax,al
9f0033ee:	83 e8 25             	sub    eax,0x25
9f0033f1:	83 f8 53             	cmp    eax,0x53
9f0033f4:	0f 87 b5 01 00 00    	ja     9f0035af <.L57>
9f0033fa:	c1 e0 02             	shl    eax,0x2
9f0033fd:	8b 84 18 88 fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x478]
9f003404:	01 d8                	add    eax,ebx
9f003406:	ff e0                	jmp    eax

9f003408 <.L61>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
		case 'c':
			if (!(flags & LEFT))
9f003408:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00340b:	83 e0 10             	and    eax,0x10
9f00340e:	85 c0                	test   eax,eax
9f003410:	75 18                	jne    9f00342a <.L61+0x22>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:190
				while (--field_width > 0)
9f003412:	eb 0c                	jmp    9f003420 <.L61+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:191
					*str++ = ' ';
9f003414:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003417:	8d 50 01             	lea    edx,[eax+0x1]
9f00341a:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f00341d:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:190
		base = 10;

		switch (*fmt) {
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
9f003420:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f003424:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f003428:	7f ea                	jg     9f003414 <.L61+0xc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:192
					*str++ = ' ';
			*str++ = (unsigned char)va_arg(args, int);
9f00342a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00342d:	8d 50 01             	lea    edx,[eax+0x1]
9f003430:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f003433:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f003436:	8d 4a 04             	lea    ecx,[edx+0x4]
9f003439:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
9f00343c:	8b 12                	mov    edx,DWORD PTR [edx]
9f00343e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:193
			while (--field_width > 0)
9f003440:	eb 0c                	jmp    9f00344e <.L61+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:194
				*str++ = ' ';
9f003442:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003445:	8d 50 01             	lea    edx,[eax+0x1]
9f003448:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f00344b:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:193
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
					*str++ = ' ';
			*str++ = (unsigned char)va_arg(args, int);
			while (--field_width > 0)
9f00344e:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f003452:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f003456:	7f ea                	jg     9f003442 <.L61+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:195
				*str++ = ' ';
			continue;
9f003458:	e9 18 02 00 00       	jmp    9f003675 <.L96+0x8c>

9f00345d <.L66>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:198

		case 's':
			s = va_arg(args, char *);
9f00345d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003460:	8d 50 04             	lea    edx,[eax+0x4]
9f003463:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003466:	8b 00                	mov    eax,DWORD PTR [eax]
9f003468:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:199
			if (s) //CLR 01/09/2019: Handling case where pointer is NULL
9f00346b:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
9f00346f:	74 13                	je     9f003484 <.L66+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:200
                            len = strlenI(s);
9f003471:	83 ec 0c             	sub    esp,0xc
9f003474:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f003477:	e8 f4 05 00 00       	call   9f003a70 <strlenI>
9f00347c:	83 c4 10             	add    esp,0x10
9f00347f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f003482:	eb 07                	jmp    9f00348b <.L66+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:202
                        else
                            len = 0;
9f003484:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204

			if (!(flags & LEFT))
9f00348b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00348e:	83 e0 10             	and    eax,0x10
9f003491:	85 c0                	test   eax,eax
9f003493:	75 1c                	jne    9f0034b1 <.L66+0x54>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:205
				while (len < field_width--)
9f003495:	eb 0c                	jmp    9f0034a3 <.L66+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206
					*str++ = ' ';
9f003497:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00349a:	8d 50 01             	lea    edx,[eax+0x1]
9f00349d:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0034a0:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:205
                            len = strlenI(s);
                        else
                            len = 0;

			if (!(flags & LEFT))
				while (len < field_width--)
9f0034a3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0034a6:	8d 50 ff             	lea    edx,[eax-0x1]
9f0034a9:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f0034ac:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0034af:	7f e6                	jg     9f003497 <.L66+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:207
					*str++ = ' ';
			for (i = 0; i < len; ++i)
9f0034b1:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f0034b8:	eb 1b                	jmp    9f0034d5 <.L66+0x78>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:208 (discriminator 3)
				*str++ = *s++;
9f0034ba:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0034bd:	8d 50 01             	lea    edx,[eax+0x1]
9f0034c0:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0034c3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f0034c6:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0034c9:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
9f0034cc:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0034cf:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:207 (discriminator 3)
                            len = 0;

			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
9f0034d1:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:207 (discriminator 1)
9f0034d5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0034d8:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0034db:	7c dd                	jl     9f0034ba <.L66+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:209
				*str++ = *s++;
			while (len < field_width--)
9f0034dd:	eb 0c                	jmp    9f0034eb <.L66+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:210
				*str++ = ' ';
9f0034df:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0034e2:	8d 50 01             	lea    edx,[eax+0x1]
9f0034e5:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0034e8:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:209
			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
				*str++ = *s++;
			while (len < field_width--)
9f0034eb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0034ee:	8d 50 ff             	lea    edx,[eax-0x1]
9f0034f1:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f0034f4:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0034f7:	7f e6                	jg     9f0034df <.L66+0x82>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:211
				*str++ = ' ';
			continue;
9f0034f9:	e9 77 01 00 00       	jmp    9f003675 <.L96+0x8c>

9f0034fe <.L65>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:214

		case 'p':
			if (field_width == -1) {
9f0034fe:	83 7d d8 ff          	cmp    DWORD PTR [ebp-0x28],0xffffffff
9f003502:	75 0b                	jne    9f00350f <.L65+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:215
				field_width = 2 * sizeof(void *);
9f003504:	c7 45 d8 08 00 00 00 	mov    DWORD PTR [ebp-0x28],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:216
				flags |= ZEROPAD;
9f00350b:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:219
			}
			str = number(str,
				     (unsigned long)va_arg(args, void *), 16,
9f00350f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003512:	8d 50 04             	lea    edx,[eax+0x4]
9f003515:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003518:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:218
		case 'p':
			if (field_width == -1) {
				field_width = 2 * sizeof(void *);
				flags |= ZEROPAD;
			}
			str = number(str,
9f00351a:	83 ec 08             	sub    esp,0x8
9f00351d:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f003520:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f003523:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f003526:	6a 10                	push   0x10
9f003528:	50                   	push   eax
9f003529:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f00352c:	e8 ea fa ff ff       	call   9f00301b <number>
9f003531:	83 c4 20             	add    esp,0x20
9f003534:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:221
				     (unsigned long)va_arg(args, void *), 16,
				     field_width, precision, flags);
			continue;
9f003537:	e9 39 01 00 00       	jmp    9f003675 <.L96+0x8c>

9f00353c <.L63>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:224

		case 'n':
			if (qualifier == 'l') {
9f00353c:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f003540:	75 20                	jne    9f003562 <.L63+0x26>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:225
				long *ip = va_arg(args, long *);
9f003542:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003545:	8d 50 04             	lea    edx,[eax+0x4]
9f003548:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00354b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00354d:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:226
				*ip = (str - buf);
9f003550:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f003553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003556:	29 c2                	sub    edx,eax
9f003558:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
9f00355b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:231
			} else {
				int *ip = va_arg(args, int *);
				*ip = (str - buf);
			}
			continue;
9f00355d:	e9 13 01 00 00       	jmp    9f003675 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:228
		case 'n':
			if (qualifier == 'l') {
				long *ip = va_arg(args, long *);
				*ip = (str - buf);
			} else {
				int *ip = va_arg(args, int *);
9f003562:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003565:	8d 50 04             	lea    edx,[eax+0x4]
9f003568:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00356b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00356d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:229
				*ip = (str - buf);
9f003570:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f003573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003576:	29 c2                	sub    edx,eax
9f003578:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
9f00357b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:231
			}
			continue;
9f00357d:	e9 f3 00 00 00       	jmp    9f003675 <.L96+0x8c>

9f003582 <.L58>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:234

		case '%':
			*str++ = '%';
9f003582:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003585:	8d 50 01             	lea    edx,[eax+0x1]
9f003588:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f00358b:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:235
			continue;
9f00358e:	e9 e2 00 00 00       	jmp    9f003675 <.L96+0x8c>

9f003593 <.L64>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:239

			/* integer number formats - set up the flags and "break" */
		case 'o':
			base = 8;
9f003593:	c7 45 e8 08 00 00 00 	mov    DWORD PTR [ebp-0x18],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:240
			break;
9f00359a:	eb 4e                	jmp    9f0035ea <.L96+0x1>

9f00359c <.L68>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:243

		case 'x':
			flags |= SMALL;
9f00359c:	83 4d dc 20          	or     DWORD PTR [ebp-0x24],0x20

9f0035a0 <.L60>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:245
		case 'X':
			base = 16;
9f0035a0:	c7 45 e8 10 00 00 00 	mov    DWORD PTR [ebp-0x18],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:246
			break;
9f0035a7:	eb 41                	jmp    9f0035ea <.L96+0x1>

9f0035a9 <.L62>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:250

		case 'd':
		case 'i':
			flags |= SIGN;
9f0035a9:	83 4d dc 02          	or     DWORD PTR [ebp-0x24],0x2
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:252
		case 'u':
			break;
9f0035ad:	eb 3a                	jmp    9f0035e9 <.L96>

9f0035af <.L57>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:255

		default:
			*str++ = '%';
9f0035af:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0035b2:	8d 50 01             	lea    edx,[eax+0x1]
9f0035b5:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0035b8:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:256
			if (*fmt)
9f0035bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0035be:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0035c1:	84 c0                	test   al,al
9f0035c3:	74 16                	je     9f0035db <.L57+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:257
				*str++ = *fmt;
9f0035c5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0035c8:	8d 50 01             	lea    edx,[eax+0x1]
9f0035cb:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0035ce:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0035d1:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0035d4:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:260
			else
				--fmt;
			continue;
9f0035d6:	e9 9a 00 00 00       	jmp    9f003675 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:259
		default:
			*str++ = '%';
			if (*fmt)
				*str++ = *fmt;
			else
				--fmt;
9f0035db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0035de:	83 e8 01             	sub    eax,0x1
9f0035e1:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:260
			continue;
9f0035e4:	e9 8c 00 00 00       	jmp    9f003675 <.L96+0x8c>

9f0035e9 <.L96>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:252

		case 'd':
		case 'i':
			flags |= SIGN;
		case 'u':
			break;
9f0035e9:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:262
				*str++ = *fmt;
			else
				--fmt;
			continue;
		}
		if (qualifier == 'l')
9f0035ea:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f0035ee:	75 10                	jne    9f003600 <.L96+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:263
			num = va_arg(args, unsigned long);
9f0035f0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0035f3:	8d 50 04             	lea    edx,[eax+0x4]
9f0035f6:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0035f9:	8b 00                	mov    eax,DWORD PTR [eax]
9f0035fb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0035fe:	eb 54                	jmp    9f003654 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:264
		else if (qualifier == 'h') {
9f003600:	83 7d d0 68          	cmp    DWORD PTR [ebp-0x30],0x68
9f003604:	75 26                	jne    9f00362c <.L96+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:265
			num = (unsigned short)va_arg(args, int);
9f003606:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003609:	8d 50 04             	lea    edx,[eax+0x4]
9f00360c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00360f:	8b 00                	mov    eax,DWORD PTR [eax]
9f003611:	25 ff ff 00 00       	and    eax,0xffff
9f003616:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:266
			if (flags & SIGN)
9f003619:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00361c:	83 e0 02             	and    eax,0x2
9f00361f:	85 c0                	test   eax,eax
9f003621:	74 31                	je     9f003654 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:267
				num = (short)num;
9f003623:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003626:	98                   	cwde   
9f003627:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00362a:	eb 28                	jmp    9f003654 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:268
		} else if (flags & SIGN)
9f00362c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00362f:	83 e0 02             	and    eax,0x2
9f003632:	85 c0                	test   eax,eax
9f003634:	74 10                	je     9f003646 <.L96+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:269
			num = va_arg(args, int);
9f003636:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003639:	8d 50 04             	lea    edx,[eax+0x4]
9f00363c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00363f:	8b 00                	mov    eax,DWORD PTR [eax]
9f003641:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f003644:	eb 0e                	jmp    9f003654 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:271
		else
			num = va_arg(args, unsigned int);
9f003646:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003649:	8d 50 04             	lea    edx,[eax+0x4]
9f00364c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00364f:	8b 00                	mov    eax,DWORD PTR [eax]
9f003651:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:272
		str = number(str, num, base, field_width, precision, flags);
9f003654:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003657:	83 ec 08             	sub    esp,0x8
9f00365a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f00365d:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f003660:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f003663:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f003666:	50                   	push   eax
9f003667:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f00366a:	e8 ac f9 ff ff       	call   9f00301b <number>
9f00366f:	83 c4 20             	add    esp,0x20
9f003672:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:120 (discriminator 2)
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f003675:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003678:	83 c0 01             	add    eax,0x1
9f00367b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:120 (discriminator 1)
9f00367e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003681:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003684:	84 c0                	test   al,al
9f003686:	0f 85 ea fb ff ff    	jne    9f003276 <vsprintf+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:274
			num = va_arg(args, int);
		else
			num = va_arg(args, unsigned int);
		str = number(str, num, base, field_width, precision, flags);
	}
	*str = '\0';
9f00368c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00368f:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:275
	return str - buf;
9f003692:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f003695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003698:	29 c2                	sub    edx,eax
9f00369a:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:276
}
9f00369c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00369f:	c9                   	leave  
9f0036a0:	c3                   	ret    

9f0036a1 <sprintfI>:
sprintfI():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:279

int sprintfI(char *buf, const char *fmt, ...)
{
9f0036a1:	55                   	push   ebp
9f0036a2:	89 e5                	mov    ebp,esp
9f0036a4:	83 ec 18             	sub    esp,0x18
9f0036a7:	e8 36 19 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0036ac:	05 90 45 00 00       	add    eax,0x4590
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:283
	va_list args;
	int i;

	va_start(args, fmt);
9f0036b1:	8d 45 10             	lea    eax,[ebp+0x10]
9f0036b4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:284
	i = vsprintf(buf, fmt, args);
9f0036b7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0036ba:	83 ec 04             	sub    esp,0x4
9f0036bd:	50                   	push   eax
9f0036be:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0036c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0036c4:	e8 90 fb ff ff       	call   9f003259 <vsprintf>
9f0036c9:	83 c4 10             	add    esp,0x10
9f0036cc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:286
	va_end(args);
	return i;
9f0036cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:287
}
9f0036d2:	c9                   	leave  
9f0036d3:	c3                   	ret    

9f0036d4 <sprintf>:
sprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:290

VISIBLE int sprintf(char *buf, const char *fmt, ...)
{
9f0036d4:	55                   	push   ebp
9f0036d5:	89 e5                	mov    ebp,esp
9f0036d7:	83 ec 18             	sub    esp,0x18
9f0036da:	e8 03 19 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0036df:	05 5d 45 00 00       	add    eax,0x455d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:294
	va_list args;
	int i;

	va_start(args, fmt);
9f0036e4:	8d 45 10             	lea    eax,[ebp+0x10]
9f0036e7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:295
	i = vsprintf(buf, fmt, args);
9f0036ea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0036ed:	83 ec 04             	sub    esp,0x4
9f0036f0:	50                   	push   eax
9f0036f1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0036f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0036f7:	e8 5d fb ff ff       	call   9f003259 <vsprintf>
9f0036fc:	83 c4 10             	add    esp,0x10
9f0036ff:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:297
	va_end(args);
	return i;
9f003702:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:298
9f003705:	c9                   	leave  
9f003706:	c3                   	ret    
9f003707:	90                   	nop

9f003708 <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:18
extern int gets(char* buffer, int maxlen, int stream);


//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
9f003708:	55                   	push   ebp
9f003709:	89 e5                	mov    ebp,esp
9f00370b:	53                   	push   ebx
9f00370c:	83 ec 14             	sub    esp,0x14
9f00370f:	e8 d2 18 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f003714:	81 c3 28 45 00 00    	add    ebx,0x4528
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:20
    char buff[5];
    int buffPtr=0;
9f00371a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:22

    memsetI(buff,0,10);
9f003721:	83 ec 04             	sub    esp,0x4
9f003724:	6a 0a                	push   0xa
9f003726:	6a 00                	push   0x0
9f003728:	8d 45 ef             	lea    eax,[ebp-0x11]
9f00372b:	50                   	push   eax
9f00372c:	e8 bf f1 ff ff       	call   9f0028f0 <memsetI>
9f003731:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:25
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
9f003734:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003737:	8d 50 01             	lea    edx,[eax+0x1]
9f00373a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00373d:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:26
    buff[buffPtr++] = '[';
9f003742:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003745:	8d 50 01             	lea    edx,[eax+0x1]
9f003748:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00374b:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:27
    buff[buffPtr++] = '0';
9f003750:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003753:	8d 50 01             	lea    edx,[eax+0x1]
9f003756:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003759:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:28
    buff[buffPtr++] = 'K';
9f00375e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003761:	8d 50 01             	lea    edx,[eax+0x1]
9f003764:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003767:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:29
    buff[buffPtr] = '\0';
9f00376c:	8d 55 ef             	lea    edx,[ebp-0x11]
9f00376f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003772:	01 d0                	add    eax,edx
9f003774:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:30
    printI(buff);
9f003777:	83 ec 0c             	sub    esp,0xc
9f00377a:	8d 45 ef             	lea    eax,[ebp-0x11]
9f00377d:	50                   	push   eax
9f00377e:	e8 ca de ff ff       	call   9f00164d <printI>
9f003783:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:32
    
    return;
9f003786:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:33
}
9f003787:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00378a:	c9                   	leave  
9f00378b:	c3                   	ret    

9f00378c <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
9f00378c:	55                   	push   ebp
9f00378d:	89 e5                	mov    ebp,esp
9f00378f:	53                   	push   ebx
9f003790:	83 ec 04             	sub    esp,0x4
9f003793:	e8 4e 18 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f003798:	81 c3 a4 44 00 00    	add    ebx,0x44a4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     strcpyI (dest + strlenI (dest), src);
9f00379e:	83 ec 0c             	sub    esp,0xc
9f0037a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0037a4:	e8 c7 02 00 00       	call   9f003a70 <strlenI>
9f0037a9:	83 c4 10             	add    esp,0x10
9f0037ac:	89 c2                	mov    edx,eax
9f0037ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037b1:	01 d0                	add    eax,edx
9f0037b3:	83 ec 08             	sub    esp,0x8
9f0037b6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0037b9:	50                   	push   eax
9f0037ba:	e8 9d 01 00 00       	call   9f00395c <strcpyI>
9f0037bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
     return dest;
9f0037c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:34
   }
9f0037c5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0037c8:	c9                   	leave  
9f0037c9:	c3                   	ret    

9f0037ca <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37

   char* strcatI (char *dest, const char *src)
   {
9f0037ca:	55                   	push   ebp
9f0037cb:	89 e5                	mov    ebp,esp
9f0037cd:	53                   	push   ebx
9f0037ce:	83 ec 04             	sub    esp,0x4
9f0037d1:	e8 10 18 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f0037d6:	81 c3 66 44 00 00    	add    ebx,0x4466
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     strcpyI (dest + strlenI (dest), src);
9f0037dc:	83 ec 0c             	sub    esp,0xc
9f0037df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0037e2:	e8 89 02 00 00       	call   9f003a70 <strlenI>
9f0037e7:	83 c4 10             	add    esp,0x10
9f0037ea:	89 c2                	mov    edx,eax
9f0037ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037ef:	01 d0                	add    eax,edx
9f0037f1:	83 ec 08             	sub    esp,0x8
9f0037f4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0037f7:	50                   	push   eax
9f0037f8:	e8 5f 01 00 00       	call   9f00395c <strcpyI>
9f0037fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
     return dest;
9f003800:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:40
   }
9f003803:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003806:	c9                   	leave  
9f003807:	c3                   	ret    

9f003808 <strncatI>:
strncatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:43
   
char *strncatI(char *dest, const char *src, size_t n)
{
9f003808:	55                   	push   ebp
9f003809:	89 e5                	mov    ebp,esp
9f00380b:	53                   	push   ebx
9f00380c:	83 ec 14             	sub    esp,0x14
9f00380f:	e8 d2 17 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f003814:	81 c3 28 44 00 00    	add    ebx,0x4428
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
    size_t bytesToCopy=0;
9f00381a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:45
    size_t srcStringLen=strlenI(src);;
9f003821:	83 ec 0c             	sub    esp,0xc
9f003824:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003827:	e8 44 02 00 00       	call   9f003a70 <strlenI>
9f00382c:	83 c4 10             	add    esp,0x10
9f00382f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
    
    if (n<=srcStringLen)
9f003832:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003835:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f003838:	77 08                	ja     9f003842 <strncatI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:48
        bytesToCopy=n;
9f00383a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00383d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f003840:	eb 06                	jmp    9f003848 <strncatI+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:50
    else
        bytesToCopy=srcStringLen;
9f003842:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003845:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
    
     strncpyI (dest + strlenI (dest),src,bytesToCopy);
9f003848:	83 ec 0c             	sub    esp,0xc
9f00384b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00384e:	e8 1d 02 00 00       	call   9f003a70 <strlenI>
9f003853:	83 c4 10             	add    esp,0x10
9f003856:	89 c2                	mov    edx,eax
9f003858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00385b:	01 d0                	add    eax,edx
9f00385d:	83 ec 04             	sub    esp,0x4
9f003860:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f003863:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003866:	50                   	push   eax
9f003867:	e8 78 03 00 00       	call   9f003be4 <strncpyI>
9f00386c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
     return dest;
9f00386f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:54
}
9f003872:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003875:	c9                   	leave  
9f003876:	c3                   	ret    

9f003877 <strncat>:
strncat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:57

VISIBLE char *strncat(char *dest, const char *src, size_t n)
{
9f003877:	55                   	push   ebp
9f003878:	89 e5                	mov    ebp,esp
9f00387a:	83 ec 08             	sub    esp,0x8
9f00387d:	e8 60 17 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f003882:	05 ba 43 00 00       	add    eax,0x43ba
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
    return strncatI(dest, src, n);
9f003887:	83 ec 04             	sub    esp,0x4
9f00388a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f00388d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003890:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003893:	e8 70 ff ff ff       	call   9f003808 <strncatI>
9f003898:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:59
9f00389b:	c9                   	leave  
9f00389c:	c3                   	ret    
9f00389d:	66 90                	xchg   ax,ax
9f00389f:	90                   	nop

9f0038a0 <strcmpI>:
strcmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
   equal to or greater than S2.  */

#include "libChrisOS.h"

int strcmpI (const char *p1, const char *p2)
{
9f0038a0:	55                   	push   ebp
9f0038a1:	89 e5                	mov    ebp,esp
9f0038a3:	56                   	push   esi
9f0038a4:	53                   	push   ebx
9f0038a5:	83 ec 10             	sub    esp,0x10
9f0038a8:	e8 35 17 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0038ad:	05 8f 43 00 00       	add    eax,0x438f
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:28
  register const unsigned char *s1 = (const unsigned char *) p1;
9f0038b2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:29
  register const unsigned char *s2 = (const unsigned char *) p2;
9f0038b5:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
9f0038b8:	89 d8                	mov    eax,ebx
9f0038ba:	8d 58 01             	lea    ebx,[eax+0x1]
9f0038bd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0038c0:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
      c2 = (unsigned char) *s2++;
9f0038c3:	89 f0                	mov    eax,esi
9f0038c5:	8d 70 01             	lea    esi,[eax+0x1]
9f0038c8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0038cb:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:36
      if (c1 == '\0')
9f0038ce:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f0038d2:	75 0e                	jne    9f0038e2 <strcmpI+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
	return c1 - c2;
9f0038d4:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f0038d8:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f0038dc:	29 c2                	sub    edx,eax
9f0038de:	89 d0                	mov    eax,edx
9f0038e0:	eb 15                	jmp    9f0038f7 <strcmpI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39
    }
  while (c1 == c2);
9f0038e2:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
9f0038e6:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
9f0038e9:	74 cd                	je     9f0038b8 <strcmpI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:41

  return c1 - c2;
9f0038eb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f0038ef:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f0038f3:	29 c2                	sub    edx,eax
9f0038f5:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:42
}
9f0038f7:	83 c4 10             	add    esp,0x10
9f0038fa:	5b                   	pop    ebx
9f0038fb:	5e                   	pop    esi
9f0038fc:	5d                   	pop    ebp
9f0038fd:	c3                   	ret    

9f0038fe <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:45

VISIBLE int strcmp(const char *p1, const char *p2)
{
9f0038fe:	55                   	push   ebp
9f0038ff:	89 e5                	mov    ebp,esp
9f003901:	e8 dc 16 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f003906:	05 36 43 00 00       	add    eax,0x4336
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:46
    return strcmpI(p1, p2);
9f00390b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00390e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003911:	e8 8a ff ff ff       	call   9f0038a0 <strcmpI>
9f003916:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:47
9f003919:	c9                   	leave  
9f00391a:	c3                   	ret    
9f00391b:	90                   	nop

9f00391c <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
9f00391c:	55                   	push   ebp
9f00391d:	89 e5                	mov    ebp,esp
9f00391f:	83 ec 10             	sub    esp,0x10
9f003922:	e8 bb 16 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f003927:	05 15 43 00 00       	add    eax,0x4315
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
9f00392c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00392f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
9f003932:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
9f003933:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003936:	8d 50 01             	lea    edx,[eax+0x1]
9f003939:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f00393c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00393f:	8d 4a 01             	lea    ecx,[edx+0x1]
9f003942:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f003945:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003948:	88 10                	mov    BYTE PTR [eax],dl
9f00394a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00394d:	84 c0                	test   al,al
9f00394f:	75 e2                	jne    9f003933 <strcpy+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f003951:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003954:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
9f003957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
9f00395a:	c9                   	leave  
9f00395b:	c3                   	ret    

9f00395c <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
9f00395c:	55                   	push   ebp
9f00395d:	89 e5                	mov    ebp,esp
9f00395f:	83 ec 10             	sub    esp,0x10
9f003962:	e8 7b 16 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f003967:	05 d5 42 00 00       	add    eax,0x42d5
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
9f00396c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00396f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
9f003972:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
9f003973:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003976:	8d 50 01             	lea    edx,[eax+0x1]
9f003979:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f00397c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00397f:	8d 4a 01             	lea    ecx,[edx+0x1]
9f003982:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f003985:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003988:	88 10                	mov    BYTE PTR [eax],dl
9f00398a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00398d:	84 c0                	test   al,al
9f00398f:	75 e2                	jne    9f003973 <strcpyI+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f003991:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003994:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
9f003997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
9f00399a:	c9                   	leave  
9f00399b:	c3                   	ret    

9f00399c <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
9f00399c:	55                   	push   ebp
9f00399d:	89 e5                	mov    ebp,esp
9f00399f:	83 ec 10             	sub    esp,0x10
9f0039a2:	e8 3b 16 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0039a7:	05 95 42 00 00       	add    eax,0x4295
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
9f0039ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0039af:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
9f0039b2:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
9f0039b3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0039b6:	8d 50 01             	lea    edx,[eax+0x1]
9f0039b9:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0039bc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0039bf:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0039c2:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f0039c5:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0039c8:	88 10                	mov    BYTE PTR [eax],dl
9f0039ca:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0039cd:	84 c0                	test   al,al
9f0039cf:	74 0d                	je     9f0039de <strcpyc+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
9f0039d1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0039d4:	8d 50 ff             	lea    edx,[eax-0x1]
9f0039d7:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0039da:	85 c0                	test   eax,eax
9f0039dc:	75 d5                	jne    9f0039b3 <strcpyc+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
9f0039de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
9f0039e1:	c9                   	leave  
9f0039e2:	c3                   	ret    
9f0039e3:	90                   	nop

9f0039e4 <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
9f0039e4:	55                   	push   ebp
9f0039e5:	89 e5                	mov    ebp,esp
9f0039e7:	83 ec 04             	sub    esp,0x4
9f0039ea:	e8 f3 15 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0039ef:	05 4d 42 00 00       	add    eax,0x424d
9f0039f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0039f7:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
9f0039fa:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
9f0039fe:	7e 0d                	jle    9f003a0d <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
9f003a00:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
9f003a04:	7f 07                	jg     9f003a0d <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
9f003a06:	b8 01 00 00 00       	mov    eax,0x1
9f003a0b:	eb 05                	jmp    9f003a12 <check_digit+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
9f003a0d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
9f003a12:	c9                   	leave  
9f003a13:	c3                   	ret    

9f003a14 <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
9f003a14:	55                   	push   ebp
9f003a15:	89 e5                	mov    ebp,esp
9f003a17:	83 ec 10             	sub    esp,0x10
9f003a1a:	e8 c3 15 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f003a1f:	05 1d 42 00 00       	add    eax,0x421d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
9f003a24:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
9f003a2b:	eb 27                	jmp    9f003a54 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
9f003a2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003a30:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003a33:	89 c2                	mov    edx,eax
9f003a35:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003a38:	01 d0                	add    eax,edx
9f003a3a:	0f be c0             	movsx  eax,al
9f003a3d:	50                   	push   eax
9f003a3e:	e8 a1 ff ff ff       	call   9f0039e4 <check_digit>
9f003a43:	83 c4 04             	add    esp,0x4
9f003a46:	83 f0 01             	xor    eax,0x1
9f003a49:	84 c0                	test   al,al
9f003a4b:	74 07                	je     9f003a54 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
9f003a4d:	b8 00 00 00 00       	mov    eax,0x0
9f003a52:	eb 17                	jmp    9f003a6b <strisnum+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18

VISIBLE bool strisnum(char* str)
{
    int cnt=0;
    
    while (*str+cnt)
9f003a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003a57:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003a5a:	0f be d0             	movsx  edx,al
9f003a5d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003a60:	01 d0                	add    eax,edx
9f003a62:	85 c0                	test   eax,eax
9f003a64:	75 c7                	jne    9f003a2d <strisnum+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
        if (!check_digit(*str+cnt))
            return false;
    return true;
9f003a66:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
9f003a6b:	c9                   	leave  
9f003a6c:	c3                   	ret    
9f003a6d:	66 90                	xchg   ax,ax
9f003a6f:	90                   	nop

9f003a70 <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
//#include <stddef.h>
#include "libChrisOS.h"

size_t strlenI(const char* str) {
9f003a70:	55                   	push   ebp
9f003a71:	89 e5                	mov    ebp,esp
9f003a73:	83 ec 10             	sub    esp,0x10
9f003a76:	e8 67 15 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f003a7b:	05 c1 41 00 00       	add    eax,0x41c1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
          size_t ret = 0;
9f003a80:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
        while ( str[ret] != 0 )
9f003a87:	eb 04                	jmp    9f003a8d <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
9f003a89:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
//#include <stddef.h>
#include "libChrisOS.h"

size_t strlenI(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
9f003a8d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003a90:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003a93:	01 d0                	add    eax,edx
9f003a95:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003a98:	84 c0                	test   al,al
9f003a9a:	75 ed                	jne    9f003a89 <strlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
                ret++;
        return ret;
9f003a9c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:9
}
9f003a9f:	c9                   	leave  
9f003aa0:	c3                   	ret    

9f003aa1 <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12

__attribute__((visibility("default"))) size_t strlen(const char* str) 
{
9f003aa1:	55                   	push   ebp
9f003aa2:	89 e5                	mov    ebp,esp
9f003aa4:	e8 39 15 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f003aa9:	05 93 41 00 00       	add    eax,0x4193
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
    return strlenI(str);
9f003aae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003ab1:	e8 ba ff ff ff       	call   9f003a70 <strlenI>
9f003ab6:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
}
9f003ab9:	c9                   	leave  
9f003aba:	c3                   	ret    

9f003abb <strnlenI>:
strnlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:17

size_t strnlenI(const char* str, size_t maxlen)
{
9f003abb:	55                   	push   ebp
9f003abc:	89 e5                	mov    ebp,esp
9f003abe:	83 ec 10             	sub    esp,0x10
9f003ac1:	e8 1c 15 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f003ac6:	05 76 41 00 00       	add    eax,0x4176
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:18
  size_t ret = 0;
9f003acb:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19
  while ( str[ret] != 0 && ret<maxlen)
9f003ad2:	eb 04                	jmp    9f003ad8 <strnlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:20
          ret++;
9f003ad4:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19
}

size_t strnlenI(const char* str, size_t maxlen)
{
  size_t ret = 0;
  while ( str[ret] != 0 && ret<maxlen)
9f003ad8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003adb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003ade:	01 d0                	add    eax,edx
9f003ae0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003ae3:	84 c0                	test   al,al
9f003ae5:	74 08                	je     9f003aef <strnlenI+0x34>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19 (discriminator 1)
9f003ae7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003aea:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f003aed:	72 e5                	jb     9f003ad4 <strnlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:21
          ret++;
  return ret;
9f003aef:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:22
}
9f003af2:	c9                   	leave  
9f003af3:	c3                   	ret    

9f003af4 <strnlen>:
strnlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:25

VISIBLE size_t strnlen(const char* str, int maxlen)
{
9f003af4:	55                   	push   ebp
9f003af5:	89 e5                	mov    ebp,esp
9f003af7:	e8 e6 14 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f003afc:	05 40 41 00 00       	add    eax,0x4140
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:26
    return strnlenI(str, maxlen);
9f003b01:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003b04:	50                   	push   eax
9f003b05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003b08:	e8 ae ff ff ff       	call   9f003abb <strnlenI>
9f003b0d:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:27
9f003b10:	c9                   	leave  
9f003b11:	c3                   	ret    
9f003b12:	66 90                	xchg   ax,ax

9f003b14 <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
9f003b14:	55                   	push   ebp
9f003b15:	89 e5                	mov    ebp,esp
9f003b17:	e8 c6 14 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f003b1c:	05 20 41 00 00       	add    eax,0x4120
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
9f003b21:	eb 4b                	jmp    9f003b6e <strncmp+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
9f003b23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b26:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003b29:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003b2c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003b2f:	38 c2                	cmp    dl,al
9f003b31:	74 1e                	je     9f003b51 <strncmp+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f003b33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b36:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003b39:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003b3c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003b3f:	38 c2                	cmp    dl,al
9f003b41:	73 07                	jae    9f003b4a <strncmp+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
9f003b43:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f003b48:	eb 2f                	jmp    9f003b79 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
9f003b4a:	b8 01 00 00 00       	mov    eax,0x1
9f003b4f:	eb 28                	jmp    9f003b79 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
9f003b51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b54:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003b57:	84 c0                	test   al,al
9f003b59:	75 07                	jne    9f003b62 <strncmp+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
9f003b5b:	b8 00 00 00 00       	mov    eax,0x0
9f003b60:	eb 17                	jmp    9f003b79 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f003b62:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f003b66:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f003b6a:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
9f003b6e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003b72:	75 af                	jne    9f003b23 <strncmp+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f003b74:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
9f003b79:	5d                   	pop    ebp
9f003b7a:	c3                   	ret    

9f003b7b <strncmpI>:
strncmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:23

int strncmpI(const char *s1, const char *s2, size_t n)
{
9f003b7b:	55                   	push   ebp
9f003b7c:	89 e5                	mov    ebp,esp
9f003b7e:	e8 5f 14 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f003b83:	05 b9 40 00 00       	add    eax,0x40b9
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
9f003b88:	eb 4b                	jmp    9f003bd5 <strncmpI+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:25
	if (*s1 != *s2)
9f003b8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b8d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003b90:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003b93:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003b96:	38 c2                	cmp    dl,al
9f003b98:	74 1e                	je     9f003bb8 <strncmpI+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f003b9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b9d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003ba0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003ba3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003ba6:	38 c2                	cmp    dl,al
9f003ba8:	73 07                	jae    9f003bb1 <strncmpI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 1)
9f003baa:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f003baf:	eb 2f                	jmp    9f003be0 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 2)
9f003bb1:	b8 01 00 00 00       	mov    eax,0x1
9f003bb6:	eb 28                	jmp    9f003be0 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:27
	else if (*s1 == '\0')
9f003bb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003bbb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003bbe:	84 c0                	test   al,al
9f003bc0:	75 07                	jne    9f003bc9 <strncmpI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:28
	    return 0;
9f003bc2:	b8 00 00 00 00       	mov    eax,0x0
9f003bc7:	eb 17                	jmp    9f003be0 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    return 0;
}

int strncmpI(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f003bc9:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f003bcd:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f003bd1:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24 (discriminator 1)
9f003bd5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003bd9:	75 af                	jne    9f003b8a <strncmpI+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:29
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f003bdb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:30
}
9f003be0:	5d                   	pop    ebp
9f003be1:	c3                   	ret    
9f003be2:	66 90                	xchg   ax,ax

9f003be4 <strncpyI>:
strncpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
9f003be4:	55                   	push   ebp
9f003be5:	89 e5                	mov    ebp,esp
9f003be7:	83 ec 10             	sub    esp,0x10
9f003bea:	e8 f3 13 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f003bef:	05 4d 40 00 00       	add    eax,0x404d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
9f003bf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003bf7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
9f003bfa:	eb 1b                	jmp    9f003c17 <strncpyI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
9f003bfc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003bff:	8d 50 01             	lea    edx,[eax+0x1]
9f003c02:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f003c05:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003c08:	8d 4a 01             	lea    ecx,[edx+0x1]
9f003c0b:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f003c0e:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003c11:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
9f003c13:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
9f003c17:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003c1b:	74 1c                	je     9f003c39 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
9f003c1d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003c20:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003c23:	84 c0                	test   al,al
9f003c25:	75 d5                	jne    9f003bfc <strncpyI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f003c27:	eb 10                	jmp    9f003c39 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
9f003c29:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003c2c:	8d 50 01             	lea    edx,[eax+0x1]
9f003c2f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
9f003c35:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f003c39:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003c3d:	75 ea                	jne    9f003c29 <strncpyI+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    if (n==0)
9f003c3f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003c43:	75 06                	jne    9f003c4b <strncpyI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
        *s='\0';
9f003c45:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003c48:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:26
    return s1;
9f003c4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:27
}
9f003c4e:	c9                   	leave  
9f003c4f:	c3                   	ret    

9f003c50 <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:30

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
9f003c50:	55                   	push   ebp
9f003c51:	89 e5                	mov    ebp,esp
9f003c53:	e8 8a 13 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f003c58:	05 e4 3f 00 00       	add    eax,0x3fe4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:31
    return strncpyI(s1, s2, n);
9f003c5d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f003c60:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003c63:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003c66:	e8 79 ff ff ff       	call   9f003be4 <strncpyI>
9f003c6b:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:32
}
9f003c6e:	c9                   	leave  
9f003c6f:	c3                   	ret    

9f003c70 <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
9f003c70:	55                   	push   ebp
9f003c71:	89 e5                	mov    ebp,esp
9f003c73:	57                   	push   edi
9f003c74:	56                   	push   esi
9f003c75:	53                   	push   ebx
9f003c76:	83 ec 08             	sub    esp,0x8
9f003c79:	e8 64 13 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f003c7e:	05 be 3f 00 00       	add    eax,0x3fbe
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
9f003c83:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f003c86:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
9f003c8d:	89 f0                	mov    eax,esi
9f003c8f:	8d 70 01             	lea    esi,[eax+0x1]
9f003c92:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003c95:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
9f003c98:	83 fb 20             	cmp    ebx,0x20
9f003c9b:	74 f0                	je     9f003c8d <strtoul+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
9f003c9d:	83 fb 2d             	cmp    ebx,0x2d
9f003ca0:	75 14                	jne    9f003cb6 <strtoul+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
9f003ca2:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
9f003ca9:	89 f0                	mov    eax,esi
9f003cab:	8d 70 01             	lea    esi,[eax+0x1]
9f003cae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003cb1:	0f be d8             	movsx  ebx,al
9f003cb4:	eb 10                	jmp    9f003cc6 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
9f003cb6:	83 fb 2b             	cmp    ebx,0x2b
9f003cb9:	75 0b                	jne    9f003cc6 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
9f003cbb:	89 f0                	mov    eax,esi
9f003cbd:	8d 70 01             	lea    esi,[eax+0x1]
9f003cc0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003cc3:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
9f003cc6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003cca:	74 06                	je     9f003cd2 <strtoul+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
9f003ccc:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f003cd0:	75 26                	jne    9f003cf8 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
9f003cd2:	83 fb 30             	cmp    ebx,0x30
9f003cd5:	75 21                	jne    9f003cf8 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f003cd7:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f003cda:	3c 78                	cmp    al,0x78
9f003cdc:	74 07                	je     9f003ce5 <strtoul+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
9f003cde:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f003ce1:	3c 58                	cmp    al,0x58
9f003ce3:	75 13                	jne    9f003cf8 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
9f003ce5:	8d 46 01             	lea    eax,[esi+0x1]
9f003ce8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003ceb:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
9f003cee:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
9f003cf1:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
9f003cf8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003cfc:	75 14                	jne    9f003d12 <strtoul+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
9f003cfe:	83 fb 30             	cmp    ebx,0x30
9f003d01:	75 07                	jne    9f003d0a <strtoul+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
9f003d03:	b8 08 00 00 00       	mov    eax,0x8
9f003d08:	eb 05                	jmp    9f003d0f <strtoul+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
9f003d0a:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
9f003d0f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
9f003d12:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f003d15:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f003d1a:	ba 00 00 00 00       	mov    edx,0x0
9f003d1f:	f7 f1                	div    ecx
9f003d21:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
9f003d24:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f003d27:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f003d2c:	ba 00 00 00 00       	mov    edx,0x0
9f003d31:	f7 f1                	div    ecx
9f003d33:	89 d0                	mov    eax,edx
9f003d35:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
9f003d37:	bf 00 00 00 00       	mov    edi,0x0
9f003d3c:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
9f003d41:	8d 43 d0             	lea    eax,[ebx-0x30]
9f003d44:	83 f8 09             	cmp    eax,0x9
9f003d47:	77 05                	ja     9f003d4e <strtoul+0xde>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
9f003d49:	83 eb 30             	sub    ebx,0x30
9f003d4c:	eb 25                	jmp    9f003d73 <strtoul+0x103>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
9f003d4e:	89 d8                	mov    eax,ebx
9f003d50:	83 c8 20             	or     eax,0x20
9f003d53:	83 e8 61             	sub    eax,0x61
9f003d56:	83 f8 19             	cmp    eax,0x19
9f003d59:	77 56                	ja     9f003db1 <strtoul+0x141>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f003d5b:	83 fb 40             	cmp    ebx,0x40
9f003d5e:	7e 0c                	jle    9f003d6c <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
9f003d60:	83 fb 5a             	cmp    ebx,0x5a
9f003d63:	7f 07                	jg     9f003d6c <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
9f003d65:	b8 37 00 00 00       	mov    eax,0x37
9f003d6a:	eb 05                	jmp    9f003d71 <strtoul+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
9f003d6c:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
9f003d71:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
9f003d73:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f003d76:	7d 3c                	jge    9f003db4 <strtoul+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f003d78:	89 c8                	mov    eax,ecx
9f003d7a:	85 c0                	test   eax,eax
9f003d7c:	78 10                	js     9f003d8e <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
9f003d7e:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f003d81:	77 0b                	ja     9f003d8e <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
9f003d83:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f003d86:	75 0d                	jne    9f003d95 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
9f003d88:	89 d0                	mov    eax,edx
9f003d8a:	39 c3                	cmp    ebx,eax
9f003d8c:	7e 07                	jle    9f003d95 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
9f003d8e:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f003d93:	eb 0f                	jmp    9f003da4 <strtoul+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
9f003d95:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
9f003d9a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003d9d:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
9f003da0:	89 d8                	mov    eax,ebx
9f003da2:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f003da4:	89 f0                	mov    eax,esi
9f003da6:	8d 70 01             	lea    esi,[eax+0x1]
9f003da9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003dac:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f003daf:	eb 90                	jmp    9f003d41 <strtoul+0xd1>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f003db1:	90                   	nop
9f003db2:	eb 01                	jmp    9f003db5 <strtoul+0x145>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
9f003db4:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f003db5:	89 c8                	mov    eax,ecx
9f003db7:	85 c0                	test   eax,eax
9f003db9:	79 07                	jns    9f003dc2 <strtoul+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
9f003dbb:	bf ff ff ff ff       	mov    edi,0xffffffff
9f003dc0:	eb 08                	jmp    9f003dca <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
9f003dc2:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f003dc6:	74 02                	je     9f003dca <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
9f003dc8:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
9f003dca:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f003dce:	74 13                	je     9f003de3 <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
9f003dd0:	89 c8                	mov    eax,ecx
9f003dd2:	85 c0                	test   eax,eax
9f003dd4:	74 05                	je     9f003ddb <strtoul+0x16b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
9f003dd6:	8d 46 ff             	lea    eax,[esi-0x1]
9f003dd9:	eb 03                	jmp    9f003dde <strtoul+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
9f003ddb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
9f003dde:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003de1:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
9f003de3:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
9f003de5:	83 c4 08             	add    esp,0x8
9f003de8:	5b                   	pop    ebx
9f003de9:	5e                   	pop    esi
9f003dea:	5f                   	pop    edi
9f003deb:	5d                   	pop    ebp
9f003dec:	c3                   	ret    
9f003ded:	66 90                	xchg   ax,ax
9f003def:	90                   	nop

9f003df0 <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
9f003df0:	55                   	push   ebp
9f003df1:	89 e5                	mov    ebp,esp
9f003df3:	e8 ea 11 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f003df8:	05 44 3e 00 00       	add    eax,0x3e44
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
9f003dfd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003e00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003e03:	01 d0                	add    eax,edx
9f003e05:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
9f003e08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
9f003e0b:	5d                   	pop    ebp
9f003e0c:	c3                   	ret    
9f003e0d:	66 90                	xchg   ax,ax
9f003e0f:	90                   	nop

9f003e10 <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
9f003e10:	55                   	push   ebp
9f003e11:	89 e5                	mov    ebp,esp
9f003e13:	57                   	push   edi
9f003e14:	56                   	push   esi
9f003e15:	53                   	push   ebx
9f003e16:	83 ec 0c             	sub    esp,0xc
9f003e19:	e8 c4 11 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f003e1e:	05 1e 3e 00 00       	add    eax,0x3e1e
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
9f003e23:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f003e26:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
9f003e2d:	89 f0                	mov    eax,esi
9f003e2f:	8d 70 01             	lea    esi,[eax+0x1]
9f003e32:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003e35:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
9f003e38:	83 fb 20             	cmp    ebx,0x20
9f003e3b:	74 f0                	je     9f003e2d <strtol+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
9f003e3d:	83 fb 2d             	cmp    ebx,0x2d
9f003e40:	75 14                	jne    9f003e56 <strtol+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
9f003e42:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
9f003e49:	89 f0                	mov    eax,esi
9f003e4b:	8d 70 01             	lea    esi,[eax+0x1]
9f003e4e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003e51:	0f be d8             	movsx  ebx,al
9f003e54:	eb 10                	jmp    9f003e66 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
9f003e56:	83 fb 2b             	cmp    ebx,0x2b
9f003e59:	75 0b                	jne    9f003e66 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
9f003e5b:	89 f0                	mov    eax,esi
9f003e5d:	8d 70 01             	lea    esi,[eax+0x1]
9f003e60:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003e63:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
9f003e66:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003e6a:	74 06                	je     9f003e72 <strtol+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
9f003e6c:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f003e70:	75 26                	jne    9f003e98 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
9f003e72:	83 fb 30             	cmp    ebx,0x30
9f003e75:	75 21                	jne    9f003e98 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f003e77:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f003e7a:	3c 78                	cmp    al,0x78
9f003e7c:	74 07                	je     9f003e85 <strtol+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
9f003e7e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f003e81:	3c 58                	cmp    al,0x58
9f003e83:	75 13                	jne    9f003e98 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
9f003e85:	8d 46 01             	lea    eax,[esi+0x1]
9f003e88:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003e8b:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
9f003e8e:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
9f003e91:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
9f003e98:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003e9c:	75 14                	jne    9f003eb2 <strtol+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
9f003e9e:	83 fb 30             	cmp    ebx,0x30
9f003ea1:	75 07                	jne    9f003eaa <strtol+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
9f003ea3:	b8 08 00 00 00       	mov    eax,0x8
9f003ea8:	eb 05                	jmp    9f003eaf <strtol+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
9f003eaa:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
9f003eaf:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
9f003eb2:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f003eb6:	74 07                	je     9f003ebf <strtol+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
9f003eb8:	b8 00 00 00 80       	mov    eax,0x80000000
9f003ebd:	eb 05                	jmp    9f003ec4 <strtol+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
9f003ebf:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
9f003ec4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f003ec7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f003eca:	ba 00 00 00 00       	mov    edx,0x0
9f003ecf:	f7 f1                	div    ecx
9f003ed1:	89 d1                	mov    ecx,edx
9f003ed3:	89 c8                	mov    eax,ecx
9f003ed5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
9f003ed8:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
9f003edb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003ede:	ba 00 00 00 00       	mov    edx,0x0
9f003ee3:	f7 f7                	div    edi
9f003ee5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
9f003ee8:	bf 00 00 00 00       	mov    edi,0x0
9f003eed:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
9f003ef2:	8d 43 d0             	lea    eax,[ebx-0x30]
9f003ef5:	83 f8 09             	cmp    eax,0x9
9f003ef8:	77 05                	ja     9f003eff <strtol+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
9f003efa:	83 eb 30             	sub    ebx,0x30
9f003efd:	eb 25                	jmp    9f003f24 <strtol+0x114>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
9f003eff:	89 d8                	mov    eax,ebx
9f003f01:	83 c8 20             	or     eax,0x20
9f003f04:	83 e8 61             	sub    eax,0x61
9f003f07:	83 f8 19             	cmp    eax,0x19
9f003f0a:	77 55                	ja     9f003f61 <strtol+0x151>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f003f0c:	83 fb 40             	cmp    ebx,0x40
9f003f0f:	7e 0c                	jle    9f003f1d <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
9f003f11:	83 fb 5a             	cmp    ebx,0x5a
9f003f14:	7f 07                	jg     9f003f1d <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
9f003f16:	b8 37 00 00 00       	mov    eax,0x37
9f003f1b:	eb 05                	jmp    9f003f22 <strtol+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
9f003f1d:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
9f003f22:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
9f003f24:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f003f27:	7d 3b                	jge    9f003f64 <strtol+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f003f29:	89 c8                	mov    eax,ecx
9f003f2b:	85 c0                	test   eax,eax
9f003f2d:	78 0f                	js     9f003f3e <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
9f003f2f:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f003f32:	77 0a                	ja     9f003f3e <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
9f003f34:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f003f37:	75 0c                	jne    9f003f45 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
9f003f39:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
9f003f3c:	7e 07                	jle    9f003f45 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
9f003f3e:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f003f43:	eb 0f                	jmp    9f003f54 <strtol+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
9f003f45:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
9f003f4a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003f4d:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
9f003f50:	89 d8                	mov    eax,ebx
9f003f52:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f003f54:	89 f0                	mov    eax,esi
9f003f56:	8d 70 01             	lea    esi,[eax+0x1]
9f003f59:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003f5c:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f003f5f:	eb 91                	jmp    9f003ef2 <strtol+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f003f61:	90                   	nop
9f003f62:	eb 01                	jmp    9f003f65 <strtol+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
9f003f64:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f003f65:	89 c8                	mov    eax,ecx
9f003f67:	85 c0                	test   eax,eax
9f003f69:	79 16                	jns    9f003f81 <strtol+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
9f003f6b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f003f6f:	74 07                	je     9f003f78 <strtol+0x168>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
9f003f71:	b8 00 00 00 80       	mov    eax,0x80000000
9f003f76:	eb 05                	jmp    9f003f7d <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
9f003f78:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
9f003f7d:	89 c7                	mov    edi,eax
9f003f7f:	eb 08                	jmp    9f003f89 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
9f003f81:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f003f85:	74 02                	je     9f003f89 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
9f003f87:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
9f003f89:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f003f8d:	74 13                	je     9f003fa2 <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
9f003f8f:	89 c8                	mov    eax,ecx
9f003f91:	85 c0                	test   eax,eax
9f003f93:	74 05                	je     9f003f9a <strtol+0x18a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
9f003f95:	8d 46 ff             	lea    eax,[esi-0x1]
9f003f98:	eb 03                	jmp    9f003f9d <strtol+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
9f003f9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
9f003f9d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003fa0:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
9f003fa2:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
9f003fa4:	83 c4 0c             	add    esp,0xc
9f003fa7:	5b                   	pop    ebx
9f003fa8:	5e                   	pop    esi
9f003fa9:	5f                   	pop    edi
9f003faa:	5d                   	pop    ebp
9f003fab:	c3                   	ret    

9f003fac <strtrimI>:
strtrimI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

void strtrimI(char *input)
{
9f003fac:	55                   	push   ebp
9f003fad:	89 e5                	mov    ebp,esp
9f003faf:	53                   	push   ebx
9f003fb0:	83 ec 14             	sub    esp,0x14
9f003fb3:	e8 2a 10 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f003fb8:	05 84 3c 00 00       	add    eax,0x3c84
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
9f003fbd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003fc0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003fc3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003fc6:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f003fc9:	eb 04                	jmp    9f003fcf <strtrimI+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
9f003fcb:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *dst = input, *src = input;
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f003fcf:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f003fd2:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003fd5:	80 fa 20             	cmp    dl,0x20
9f003fd8:	74 f1                	je     9f003fcb <strtrimI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
      ++src;
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
9f003fda:	83 ec 0c             	sub    esp,0xc
9f003fdd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f003fe0:	89 c3                	mov    ebx,eax
9f003fe2:	e8 89 fa ff ff       	call   9f003a70 <strlenI>
9f003fe7:	83 c4 10             	add    esp,0x10
9f003fea:	8d 50 ff             	lea    edx,[eax-0x1]
9f003fed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003ff0:	01 d0                	add    eax,edx
9f003ff2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
9f003ff5:	eb 0c                	jmp    9f004003 <strtrimI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
9f003ff7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003ffa:	8d 50 ff             	lea    edx,[eax-0x1]
9f003ffd:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
9f004000:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
   while (end > src && *end==' ')
9f004003:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f004006:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f004009:	76 0a                	jbe    9f004015 <strtrimI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
9f00400b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00400e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004011:	3c 20                	cmp    al,0x20
9f004013:	74 e2                	je     9f003ff7 <strtrimI+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
      *end-- = 0;
   }

   // Move if needed.
   //
   if (src != dst)
9f004015:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f004018:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f00401b:	74 1f                	je     9f00403c <strtrimI+0x90>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
9f00401d:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
9f00401e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f004021:	8d 50 01             	lea    edx,[eax+0x1]
9f004024:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f004027:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00402a:	8d 4a 01             	lea    ecx,[edx+0x1]
9f00402d:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
9f004030:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f004033:	88 10                	mov    BYTE PTR [eax],dl
9f004035:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004038:	84 c0                	test   al,al
9f00403a:	75 e2                	jne    9f00401e <strtrimI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
9f00403c:	90                   	nop
9f00403d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f004040:	c9                   	leave  
9f004041:	c3                   	ret    

9f004042 <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:32

__attribute__((visibility("default"))) void strtrim(char *input)
{
9f004042:	55                   	push   ebp
9f004043:	89 e5                	mov    ebp,esp
9f004045:	83 ec 08             	sub    esp,0x8
9f004048:	e8 95 0f 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f00404d:	05 ef 3b 00 00       	add    eax,0x3bef
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:33
    return strtrimI(input);
9f004052:	83 ec 0c             	sub    esp,0xc
9f004055:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004058:	e8 4f ff ff ff       	call   9f003fac <strtrimI>
9f00405d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:34
}
9f004060:	c9                   	leave  
9f004061:	c3                   	ret    
9f004062:	66 90                	xchg   ax,ax

9f004064 <strreplaceI>:
strreplaceI():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:14



///NOTE: outString has to be big enough to hold the modified string
char *strreplaceI(const char *in, const char *pattern, const char *by, char *outString)
{
9f004064:	55                   	push   ebp
9f004065:	89 e5                	mov    ebp,esp
9f004067:	56                   	push   esi
9f004068:	53                   	push   ebx
9f004069:	83 ec 10             	sub    esp,0x10
9f00406c:	e8 75 0f 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f004071:	81 c3 cb 3b 00 00    	add    ebx,0x3bcb
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:15
    size_t outsize = strlenI(in) + 1;
9f004077:	83 ec 0c             	sub    esp,0xc
9f00407a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00407d:	e8 ee f9 ff ff       	call   9f003a70 <strlenI>
9f004082:	83 c4 10             	add    esp,0x10
9f004085:	83 c0 01             	add    eax,0x1
9f004088:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:18
    // TODO maybe avoid reallocing by counting the non-overlapping occurences of pattern
    // use this to iterate over the output
    size_t resoffset = 0;
9f00408b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:20
    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f004092:	e9 ac 00 00 00       	jmp    9f004143 <strreplaceI+0xdf>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:22
        // copy everything up to the pattern
        memcpyI(outString + resoffset, in, needle - in);
9f004097:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00409a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00409d:	29 c2                	sub    edx,eax
9f00409f:	89 d0                	mov    eax,edx
9f0040a1:	89 c1                	mov    ecx,eax
9f0040a3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f0040a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0040a9:	01 d0                	add    eax,edx
9f0040ab:	83 ec 04             	sub    esp,0x4
9f0040ae:	51                   	push   ecx
9f0040af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0040b2:	50                   	push   eax
9f0040b3:	e8 7c e6 ff ff       	call   9f002734 <memcpyI>
9f0040b8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:23
        resoffset += needle - in;
9f0040bb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0040be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0040c1:	29 c2                	sub    edx,eax
9f0040c3:	89 d0                	mov    eax,edx
9f0040c5:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:26

        // skip the pattern in the input-string
        in = needle + strlenI(pattern);
9f0040c8:	83 ec 0c             	sub    esp,0xc
9f0040cb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0040ce:	e8 9d f9 ff ff       	call   9f003a70 <strlenI>
9f0040d3:	83 c4 10             	add    esp,0x10
9f0040d6:	89 c2                	mov    edx,eax
9f0040d8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0040db:	01 d0                	add    eax,edx
9f0040dd:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:29

        // adjust space for replacement
        outsize = outsize - strlenI(pattern) + strlenI(by);
9f0040e0:	83 ec 0c             	sub    esp,0xc
9f0040e3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0040e6:	e8 85 f9 ff ff       	call   9f003a70 <strlenI>
9f0040eb:	83 c4 10             	add    esp,0x10
9f0040ee:	89 c2                	mov    edx,eax
9f0040f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0040f3:	29 d0                	sub    eax,edx
9f0040f5:	89 c6                	mov    esi,eax
9f0040f7:	83 ec 0c             	sub    esp,0xc
9f0040fa:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0040fd:	e8 6e f9 ff ff       	call   9f003a70 <strlenI>
9f004102:	83 c4 10             	add    esp,0x10
9f004105:	01 f0                	add    eax,esi
9f004107:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:32

        // copy the pattern
        memcpyI(outString + resoffset, by, strlenI(by));
9f00410a:	83 ec 0c             	sub    esp,0xc
9f00410d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f004110:	e8 5b f9 ff ff       	call   9f003a70 <strlenI>
9f004115:	83 c4 10             	add    esp,0x10
9f004118:	89 c1                	mov    ecx,eax
9f00411a:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f00411d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f004120:	01 d0                	add    eax,edx
9f004122:	83 ec 04             	sub    esp,0x4
9f004125:	51                   	push   ecx
9f004126:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f004129:	50                   	push   eax
9f00412a:	e8 05 e6 ff ff       	call   9f002734 <memcpyI>
9f00412f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:33
        resoffset += strlenI(by);
9f004132:	83 ec 0c             	sub    esp,0xc
9f004135:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f004138:	e8 33 f9 ff ff       	call   9f003a70 <strlenI>
9f00413d:	83 c4 10             	add    esp,0x10
9f004140:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:20
    size_t outsize = strlenI(in) + 1;
    // TODO maybe avoid reallocing by counting the non-overlapping occurences of pattern
    // use this to iterate over the output
    size_t resoffset = 0;
    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f004143:	83 ec 08             	sub    esp,0x8
9f004146:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004149:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00414c:	e8 f5 00 00 00       	call   9f004246 <strstrI>
9f004151:	83 c4 10             	add    esp,0x10
9f004154:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f004157:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f00415b:	0f 85 36 ff ff ff    	jne    9f004097 <strreplaceI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:37
        memcpyI(outString + resoffset, by, strlenI(by));
        resoffset += strlenI(by);
    }

    // copy the remaining input
    strcpyI(outString + resoffset, in);
9f004161:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f004164:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f004167:	01 d0                	add    eax,edx
9f004169:	83 ec 08             	sub    esp,0x8
9f00416c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00416f:	50                   	push   eax
9f004170:	e8 e7 f7 ff ff       	call   9f00395c <strcpyI>
9f004175:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:39

    return outString;
9f004178:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:40
}
9f00417b:	8d 65 f8             	lea    esp,[ebp-0x8]
9f00417e:	5b                   	pop    ebx
9f00417f:	5e                   	pop    esi
9f004180:	5d                   	pop    ebp
9f004181:	c3                   	ret    

9f004182 <strreplace>:
strreplace():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:43

VISIBLE char *strreplace(const char *in, const char *pattern, const char *by, char *outString)
{
9f004182:	55                   	push   ebp
9f004183:	89 e5                	mov    ebp,esp
9f004185:	83 ec 08             	sub    esp,0x8
9f004188:	e8 55 0e 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f00418d:	05 af 3a 00 00       	add    eax,0x3aaf
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:44
    return strreplaceI(in, pattern, by, outString);
9f004192:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f004195:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f004198:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00419b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00419e:	e8 c1 fe ff ff       	call   9f004064 <strreplaceI>
9f0041a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:45
}
9f0041a6:	c9                   	leave  
9f0041a7:	c3                   	ret    

9f0041a8 <strnstrI>:
strnstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:53

#include "strings.h"
#include "common.h"

char* strnstrI(char* string, char* substring, int length)
{
9f0041a8:	55                   	push   ebp
9f0041a9:	89 e5                	mov    ebp,esp
9f0041ab:	56                   	push   esi
9f0041ac:	53                   	push   ebx
9f0041ad:	83 ec 10             	sub    esp,0x10
9f0041b0:	e8 2d 0e 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0041b5:	05 87 3a 00 00       	add    eax,0x3a87
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:60

    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */
    int len=length;
9f0041ba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0041bd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
    
    b = substring;
9f0041c0:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:63
    if (*b == 0) {
9f0041c3:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0041c6:	84 c0                	test   al,al
9f0041c8:	75 66                	jne    9f004230 <strnstrI+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64
	return string;
9f0041ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041cd:	eb 70                	jmp    9f00423f <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:67
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f0041cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041d2:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0041d5:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0041d8:	38 c2                	cmp    dl,al
9f0041da:	74 12                	je     9f0041ee <strnstrI+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
            if (len--<=0)
9f0041dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0041df:	8d 50 ff             	lea    edx,[eax-0x1]
9f0041e2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0041e5:	85 c0                	test   eax,eax
9f0041e7:	7f 42                	jg     9f00422b <strnstrI+0x83>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:69
                return string;
9f0041e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041ec:	eb 51                	jmp    9f00423f <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:72
	    continue;
	}
	a = string;
9f0041ee:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
	while (1) {
	    if (*b == 0) {
9f0041f1:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0041f4:	84 c0                	test   al,al
9f0041f6:	75 05                	jne    9f0041fd <strnstrI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:75
		return string;
9f0041f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041fb:	eb 42                	jmp    9f00423f <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
	    }
            if (len--<=0)
9f0041fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f004200:	8d 50 ff             	lea    edx,[eax-0x1]
9f004203:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f004206:	85 c0                	test   eax,eax
9f004208:	7f 05                	jg     9f00420f <strnstrI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:78
                return string;
9f00420a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00420d:	eb 30                	jmp    9f00423f <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
	    if (*a++ != *b++) {
9f00420f:	89 f0                	mov    eax,esi
9f004211:	8d 70 01             	lea    esi,[eax+0x1]
9f004214:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f004217:	89 d8                	mov    eax,ebx
9f004219:	8d 58 01             	lea    ebx,[eax+0x1]
9f00421c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00421f:	38 c2                	cmp    dl,al
9f004221:	75 02                	jne    9f004225 <strnstrI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:82
		break;
	    }
	}
9f004223:	eb cc                	jmp    9f0041f1 <strnstrI+0x49>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:80
		return string;
	    }
            if (len--<=0)
                return string;
	    if (*a++ != *b++) {
		break;
9f004225:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:83
	    }
	}
	b = substring;
9f004226:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f004229:	eb 01                	jmp    9f00422c <strnstrI+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:70
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
            if (len--<=0)
                return string;
	    continue;
9f00422b:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    
    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f00422c:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66 (discriminator 1)
9f004230:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004233:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004236:	84 c0                	test   al,al
9f004238:	75 95                	jne    9f0041cf <strnstrI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:85
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f00423a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:86
}
9f00423f:	83 c4 10             	add    esp,0x10
9f004242:	5b                   	pop    ebx
9f004243:	5e                   	pop    esi
9f004244:	5d                   	pop    ebp
9f004245:	c3                   	ret    

9f004246 <strstrI>:
strstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:89

char* strstrI(const char* string, const char* substring)
{
9f004246:	55                   	push   ebp
9f004247:	89 e5                	mov    ebp,esp
9f004249:	56                   	push   esi
9f00424a:	53                   	push   ebx
9f00424b:	e8 92 0d 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f004250:	05 ec 39 00 00       	add    eax,0x39ec
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:97
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
9f004255:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:98
    if (*b == 0) {
9f004258:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f00425b:	84 c0                	test   al,al
9f00425d:	75 42                	jne    9f0042a1 <strstrI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:99
	return string;
9f00425f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004262:	eb 4c                	jmp    9f0042b0 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:102
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f004264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004267:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f00426a:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f00426d:	38 c2                	cmp    dl,al
9f00426f:	75 2b                	jne    9f00429c <strstrI+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:105
	    continue;
	}
	a = string;
9f004271:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:107
	while (1) {
	    if (*b == 0) {
9f004274:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f004277:	84 c0                	test   al,al
9f004279:	75 05                	jne    9f004280 <strstrI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:108
		return string;
9f00427b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00427e:	eb 30                	jmp    9f0042b0 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:110
	    }
	    if (*a++ != *b++) {
9f004280:	89 f0                	mov    eax,esi
9f004282:	8d 70 01             	lea    esi,[eax+0x1]
9f004285:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f004288:	89 d8                	mov    eax,ebx
9f00428a:	8d 58 01             	lea    ebx,[eax+0x1]
9f00428d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004290:	38 c2                	cmp    dl,al
9f004292:	75 02                	jne    9f004296 <strstrI+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:113
		break;
	    }
	}
9f004294:	eb de                	jmp    9f004274 <strstrI+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:111
	while (1) {
	    if (*b == 0) {
		return string;
	    }
	    if (*a++ != *b++) {
		break;
9f004296:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:114
	    }
	}
	b = substring;
9f004297:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f00429a:	eb 01                	jmp    9f00429d <strstrI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:103
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
	    continue;
9f00429c:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:101

    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f00429d:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:101 (discriminator 1)
9f0042a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0042a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0042a7:	84 c0                	test   al,al
9f0042a9:	75 b9                	jne    9f004264 <strstrI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:116
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f0042ab:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:117
}
9f0042b0:	5b                   	pop    ebx
9f0042b1:	5e                   	pop    esi
9f0042b2:	5d                   	pop    ebp
9f0042b3:	c3                   	ret    

9f0042b4 <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:120

VISIBLE char* strstr(const char* string, const char* substring)
{
9f0042b4:	55                   	push   ebp
9f0042b5:	89 e5                	mov    ebp,esp
9f0042b7:	e8 26 0d 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0042bc:	05 80 39 00 00       	add    eax,0x3980
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:121
    return strstrI(string, substring);
9f0042c1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0042c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0042c7:	e8 7a ff ff ff       	call   9f004246 <strstrI>
9f0042cc:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:122
}
9f0042cf:	c9                   	leave  
9f0042d0:	c3                   	ret    
9f0042d1:	66 90                	xchg   ax,ax
9f0042d3:	90                   	nop

9f0042d4 <getticks>:
getticks():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t getticks(/*time_t* arg*/)
{
9f0042d4:	55                   	push   ebp
9f0042d5:	89 e5                	mov    ebp,esp
9f0042d7:	56                   	push   esi
9f0042d8:	53                   	push   ebx
9f0042d9:	83 ec 10             	sub    esp,0x10
9f0042dc:	e8 01 0d 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0042e1:	05 5b 39 00 00       	add    eax,0x395b
/home/yogi/src/os/aproj/libChrisOS/src/time.c:28
    uint32_t retVal=0;
9f0042e6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:29
    GET_TICKS(retVal);
9f0042ed:	b8 70 01 00 00       	mov    eax,0x170
9f0042f2:	bb 00 00 00 00       	mov    ebx,0x0
9f0042f7:	b9 00 00 00 00       	mov    ecx,0x0
9f0042fc:	ba 00 00 00 00       	mov    edx,0x0
9f004301:	be 00 00 00 00       	mov    esi,0x0
9f004306:	e8 fc ff ff ff       	call   9f004307 <getticks+0x33>
9f00430b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:30
    return (time_t)retVal;
9f00430e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:31
}
9f004311:	83 c4 10             	add    esp,0x10
9f004314:	5b                   	pop    ebx
9f004315:	5e                   	pop    esi
9f004316:	5d                   	pop    ebp
9f004317:	c3                   	ret    

9f004318 <gmtime_rI>:
gmtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:35


struct tm *gmtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f004318:	55                   	push   ebp
9f004319:	89 e5                	mov    ebp,esp
9f00431b:	53                   	push   ebx
9f00431c:	83 ec 10             	sub    esp,0x10
9f00431f:	e8 c2 0c 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f004324:	81 c3 18 39 00 00    	add    ebx,0x3918
/home/yogi/src/os/aproj/libChrisOS/src/time.c:36
  time_t time = *timer;
9f00432a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00432d:	8b 00                	mov    eax,DWORD PTR [eax]
9f00432f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:38
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
9f004332:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40

  dayclock = (unsigned long) time % SECS_DAY;
9f004339:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f00433c:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f004341:	89 c8                	mov    eax,ecx
9f004343:	f7 e2                	mul    edx
9f004345:	89 d0                	mov    eax,edx
9f004347:	c1 e8 10             	shr    eax,0x10
9f00434a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f00434d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f004350:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f004356:	29 c1                	sub    ecx,eax
9f004358:	89 c8                	mov    eax,ecx
9f00435a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  dayno = (unsigned long) time / SECS_DAY;
9f00435d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f004360:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f004365:	f7 e2                	mul    edx
9f004367:	89 d0                	mov    eax,edx
9f004369:	c1 e8 10             	shr    eax,0x10
9f00436c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43

  tmbuf->tm_sec = dayclock % 60;
9f00436f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f004372:	ba 89 88 88 88       	mov    edx,0x88888889
9f004377:	89 c8                	mov    eax,ecx
9f004379:	f7 e2                	mul    edx
9f00437b:	89 d0                	mov    eax,edx
9f00437d:	c1 e8 05             	shr    eax,0x5
9f004380:	89 c2                	mov    edx,eax
9f004382:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f004389:	89 c2                	mov    edx,eax
9f00438b:	89 d0                	mov    eax,edx
9f00438d:	c1 e0 04             	shl    eax,0x4
9f004390:	29 d0                	sub    eax,edx
9f004392:	29 c1                	sub    ecx,eax
9f004394:	89 c8                	mov    eax,ecx
9f004396:	89 c2                	mov    edx,eax
9f004398:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00439b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44
  tmbuf->tm_min = (dayclock % 3600) / 60;
9f00439d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f0043a0:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f0043a5:	89 c8                	mov    eax,ecx
9f0043a7:	f7 e2                	mul    edx
9f0043a9:	89 d0                	mov    eax,edx
9f0043ab:	c1 e8 0b             	shr    eax,0xb
9f0043ae:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
9f0043b4:	29 c1                	sub    ecx,eax
9f0043b6:	89 c8                	mov    eax,ecx
9f0043b8:	ba 89 88 88 88       	mov    edx,0x88888889
9f0043bd:	f7 e2                	mul    edx
9f0043bf:	89 d0                	mov    eax,edx
9f0043c1:	c1 e8 05             	shr    eax,0x5
9f0043c4:	89 c2                	mov    edx,eax
9f0043c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0043c9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45
  tmbuf->tm_hour = dayclock / 3600;
9f0043cc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0043cf:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f0043d4:	f7 e2                	mul    edx
9f0043d6:	89 d0                	mov    eax,edx
9f0043d8:	c1 e8 0b             	shr    eax,0xb
9f0043db:	89 c2                	mov    edx,eax
9f0043dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0043e0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:46
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
9f0043e3:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0043e6:	8d 48 04             	lea    ecx,[eax+0x4]
9f0043e9:	ba 25 49 92 24       	mov    edx,0x24924925
9f0043ee:	89 c8                	mov    eax,ecx
9f0043f0:	f7 e2                	mul    edx
9f0043f2:	89 c8                	mov    eax,ecx
9f0043f4:	29 d0                	sub    eax,edx
9f0043f6:	d1 e8                	shr    eax,1
9f0043f8:	01 d0                	add    eax,edx
9f0043fa:	c1 e8 02             	shr    eax,0x2
9f0043fd:	89 c2                	mov    edx,eax
9f0043ff:	c1 e2 03             	shl    edx,0x3
9f004402:	29 c2                	sub    edx,eax
9f004404:	89 c8                	mov    eax,ecx
9f004406:	29 d0                	sub    eax,edx
9f004408:	89 c2                	mov    edx,eax
9f00440a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00440d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f004410:	eb 66                	jmp    9f004478 <gmtime_rI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
    dayno -= YEARSIZE(year);
9f004412:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f004415:	83 e0 03             	and    eax,0x3
9f004418:	85 c0                	test   eax,eax
9f00441a:	75 50                	jne    9f00446c <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 1)
9f00441c:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f00441f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004424:	89 c8                	mov    eax,ecx
9f004426:	f7 ea                	imul   edx
9f004428:	c1 fa 05             	sar    edx,0x5
9f00442b:	89 c8                	mov    eax,ecx
9f00442d:	c1 f8 1f             	sar    eax,0x1f
9f004430:	29 c2                	sub    edx,eax
9f004432:	89 d0                	mov    eax,edx
9f004434:	6b c0 64             	imul   eax,eax,0x64
9f004437:	29 c1                	sub    ecx,eax
9f004439:	89 c8                	mov    eax,ecx
9f00443b:	85 c0                	test   eax,eax
9f00443d:	75 26                	jne    9f004465 <gmtime_rI+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 4)
9f00443f:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f004442:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004447:	89 c8                	mov    eax,ecx
9f004449:	f7 ea                	imul   edx
9f00444b:	c1 fa 07             	sar    edx,0x7
9f00444e:	89 c8                	mov    eax,ecx
9f004450:	c1 f8 1f             	sar    eax,0x1f
9f004453:	29 c2                	sub    edx,eax
9f004455:	89 d0                	mov    eax,edx
9f004457:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f00445d:	29 c1                	sub    ecx,eax
9f00445f:	89 c8                	mov    eax,ecx
9f004461:	85 c0                	test   eax,eax
9f004463:	75 07                	jne    9f00446c <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 5)
9f004465:	b8 6e 01 00 00       	mov    eax,0x16e
9f00446a:	eb 05                	jmp    9f004471 <gmtime_rI+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 6)
9f00446c:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 8)
9f004471:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49 (discriminator 8)
    year++;
9f004474:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f004478:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00447b:	83 e0 03             	and    eax,0x3
9f00447e:	85 c0                	test   eax,eax
9f004480:	75 50                	jne    9f0044d2 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 1)
9f004482:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f004485:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00448a:	89 c8                	mov    eax,ecx
9f00448c:	f7 ea                	imul   edx
9f00448e:	c1 fa 05             	sar    edx,0x5
9f004491:	89 c8                	mov    eax,ecx
9f004493:	c1 f8 1f             	sar    eax,0x1f
9f004496:	29 c2                	sub    edx,eax
9f004498:	89 d0                	mov    eax,edx
9f00449a:	6b c0 64             	imul   eax,eax,0x64
9f00449d:	29 c1                	sub    ecx,eax
9f00449f:	89 c8                	mov    eax,ecx
9f0044a1:	85 c0                	test   eax,eax
9f0044a3:	75 26                	jne    9f0044cb <gmtime_rI+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 4)
9f0044a5:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0044a8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0044ad:	89 c8                	mov    eax,ecx
9f0044af:	f7 ea                	imul   edx
9f0044b1:	c1 fa 07             	sar    edx,0x7
9f0044b4:	89 c8                	mov    eax,ecx
9f0044b6:	c1 f8 1f             	sar    eax,0x1f
9f0044b9:	29 c2                	sub    edx,eax
9f0044bb:	89 d0                	mov    eax,edx
9f0044bd:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0044c3:	29 c1                	sub    ecx,eax
9f0044c5:	89 c8                	mov    eax,ecx
9f0044c7:	85 c0                	test   eax,eax
9f0044c9:	75 07                	jne    9f0044d2 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 5)
9f0044cb:	b8 6e 01 00 00       	mov    eax,0x16e
9f0044d0:	eb 05                	jmp    9f0044d7 <gmtime_rI+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 6)
9f0044d2:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 8)
9f0044d7:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f0044da:	0f 86 32 ff ff ff    	jbe    9f004412 <gmtime_rI+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
9f0044e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0044e3:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
9f0044e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0044ec:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52
  tmbuf->tm_yday = dayno;
9f0044ef:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0044f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0044f5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:53
  tmbuf->tm_mon = 0;
9f0044f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0044fb:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f004502:	e9 89 00 00 00       	jmp    9f004590 <gmtime_rI+0x278>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
9f004507:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00450a:	83 e0 03             	and    eax,0x3
9f00450d:	85 c0                	test   eax,eax
9f00450f:	75 50                	jne    9f004561 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 1)
9f004511:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f004514:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004519:	89 c8                	mov    eax,ecx
9f00451b:	f7 ea                	imul   edx
9f00451d:	c1 fa 05             	sar    edx,0x5
9f004520:	89 c8                	mov    eax,ecx
9f004522:	c1 f8 1f             	sar    eax,0x1f
9f004525:	29 c2                	sub    edx,eax
9f004527:	89 d0                	mov    eax,edx
9f004529:	6b c0 64             	imul   eax,eax,0x64
9f00452c:	29 c1                	sub    ecx,eax
9f00452e:	89 c8                	mov    eax,ecx
9f004530:	85 c0                	test   eax,eax
9f004532:	75 26                	jne    9f00455a <gmtime_rI+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 4)
9f004534:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f004537:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00453c:	89 c8                	mov    eax,ecx
9f00453e:	f7 ea                	imul   edx
9f004540:	c1 fa 07             	sar    edx,0x7
9f004543:	89 c8                	mov    eax,ecx
9f004545:	c1 f8 1f             	sar    eax,0x1f
9f004548:	29 c2                	sub    edx,eax
9f00454a:	89 d0                	mov    eax,edx
9f00454c:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004552:	29 c1                	sub    ecx,eax
9f004554:	89 c8                	mov    eax,ecx
9f004556:	85 c0                	test   eax,eax
9f004558:	75 07                	jne    9f004561 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 5)
9f00455a:	ba 01 00 00 00       	mov    edx,0x1
9f00455f:	eb 05                	jmp    9f004566 <gmtime_rI+0x24e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 6)
9f004561:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 8)
9f004566:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004569:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f00456c:	89 d0                	mov    eax,edx
9f00456e:	01 c0                	add    eax,eax
9f004570:	01 d0                	add    eax,edx
9f004572:	c1 e0 02             	shl    eax,0x2
9f004575:	01 c8                	add    eax,ecx
9f004577:	8b 84 83 24 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2dc]
9f00457e:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56 (discriminator 8)
    tmbuf->tm_mon++;
9f004581:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004584:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004587:	8d 50 01             	lea    edx,[eax+0x1]
9f00458a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00458d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f004590:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f004593:	83 e0 03             	and    eax,0x3
9f004596:	85 c0                	test   eax,eax
9f004598:	75 50                	jne    9f0045ea <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 1)
9f00459a:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f00459d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0045a2:	89 c8                	mov    eax,ecx
9f0045a4:	f7 ea                	imul   edx
9f0045a6:	c1 fa 05             	sar    edx,0x5
9f0045a9:	89 c8                	mov    eax,ecx
9f0045ab:	c1 f8 1f             	sar    eax,0x1f
9f0045ae:	29 c2                	sub    edx,eax
9f0045b0:	89 d0                	mov    eax,edx
9f0045b2:	6b c0 64             	imul   eax,eax,0x64
9f0045b5:	29 c1                	sub    ecx,eax
9f0045b7:	89 c8                	mov    eax,ecx
9f0045b9:	85 c0                	test   eax,eax
9f0045bb:	75 26                	jne    9f0045e3 <gmtime_rI+0x2cb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 4)
9f0045bd:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0045c0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0045c5:	89 c8                	mov    eax,ecx
9f0045c7:	f7 ea                	imul   edx
9f0045c9:	c1 fa 07             	sar    edx,0x7
9f0045cc:	89 c8                	mov    eax,ecx
9f0045ce:	c1 f8 1f             	sar    eax,0x1f
9f0045d1:	29 c2                	sub    edx,eax
9f0045d3:	89 d0                	mov    eax,edx
9f0045d5:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0045db:	29 c1                	sub    ecx,eax
9f0045dd:	89 c8                	mov    eax,ecx
9f0045df:	85 c0                	test   eax,eax
9f0045e1:	75 07                	jne    9f0045ea <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 5)
9f0045e3:	ba 01 00 00 00       	mov    edx,0x1
9f0045e8:	eb 05                	jmp    9f0045ef <gmtime_rI+0x2d7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 6)
9f0045ea:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 8)
9f0045ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0045f2:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f0045f5:	89 d0                	mov    eax,edx
9f0045f7:	01 c0                	add    eax,eax
9f0045f9:	01 d0                	add    eax,edx
9f0045fb:	c1 e0 02             	shl    eax,0x2
9f0045fe:	01 c8                	add    eax,ecx
9f004600:	8b 84 83 24 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2dc]
9f004607:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f00460a:	0f 86 f7 fe ff ff    	jbe    9f004507 <gmtime_rI+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:58
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
9f004610:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f004613:	83 c0 01             	add    eax,0x1
9f004616:	89 c2                	mov    edx,eax
9f004618:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00461b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:59
  tmbuf->tm_isdst = 0;
9f00461e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004621:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:60
  return tmbuf;
9f004628:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:61
}
9f00462b:	83 c4 10             	add    esp,0x10
9f00462e:	5b                   	pop    ebx
9f00462f:	5d                   	pop    ebp
9f004630:	c3                   	ret    

9f004631 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:64

VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) 
{
9f004631:	55                   	push   ebp
9f004632:	89 e5                	mov    ebp,esp
9f004634:	e8 a9 09 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f004639:	05 03 36 00 00       	add    eax,0x3603
/home/yogi/src/os/aproj/libChrisOS/src/time.c:65
    return gmtime_rI(timer, tmbuf);
9f00463e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004641:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004644:	e8 cf fc ff ff       	call   9f004318 <gmtime_rI>
9f004649:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:66
}
9f00464c:	c9                   	leave  
9f00464d:	c3                   	ret    

9f00464e <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:68

VISIBLE struct tm *localtime(const time_t *timer) {
9f00464e:	55                   	push   ebp
9f00464f:	89 e5                	mov    ebp,esp
9f004651:	83 ec 10             	sub    esp,0x10
9f004654:	e8 89 09 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f004659:	05 e3 35 00 00       	add    eax,0x35e3
/home/yogi/src/os/aproj/libChrisOS/src/time.c:71
  time_t t;
 
  t = *timer + (libcTZ*60*60);
9f00465e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f004661:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f004663:	8b 90 f8 ff ff ff    	mov    edx,DWORD PTR [eax-0x8]
9f004669:	8b 12                	mov    edx,DWORD PTR [edx]
9f00466b:	69 d2 10 0e 00 00    	imul   edx,edx,0xe10
9f004671:	01 ca                	add    edx,ecx
9f004673:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:72
  return gmtime_rI(&t, &tmbuf);
9f004676:	8b 80 fc ff ff ff    	mov    eax,DWORD PTR [eax-0x4]
9f00467c:	50                   	push   eax
9f00467d:	8d 45 fc             	lea    eax,[ebp-0x4]
9f004680:	50                   	push   eax
9f004681:	e8 92 fc ff ff       	call   9f004318 <gmtime_rI>
9f004686:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73
}
9f004689:	c9                   	leave  
9f00468a:	c3                   	ret    

9f00468b <localtime_rI>:
localtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:76

struct tm *localtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f00468b:	55                   	push   ebp
9f00468c:	89 e5                	mov    ebp,esp
9f00468e:	83 ec 10             	sub    esp,0x10
9f004691:	e8 4c 09 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f004696:	05 a6 35 00 00       	add    eax,0x35a6
/home/yogi/src/os/aproj/libChrisOS/src/time.c:79
  time_t t;

  t = *timer - libcTZ;
9f00469b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00469e:	8b 12                	mov    edx,DWORD PTR [edx]
9f0046a0:	8b 80 f8 ff ff ff    	mov    eax,DWORD PTR [eax-0x8]
9f0046a6:	8b 00                	mov    eax,DWORD PTR [eax]
9f0046a8:	29 c2                	sub    edx,eax
9f0046aa:	89 d0                	mov    eax,edx
9f0046ac:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:80
  return gmtime_rI(&t, tmbuf);
9f0046af:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0046b2:	8d 45 fc             	lea    eax,[ebp-0x4]
9f0046b5:	50                   	push   eax
9f0046b6:	e8 5d fc ff ff       	call   9f004318 <gmtime_rI>
9f0046bb:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
}
9f0046be:	c9                   	leave  
9f0046bf:	c3                   	ret    

9f0046c0 <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:83

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
9f0046c0:	55                   	push   ebp
9f0046c1:	89 e5                	mov    ebp,esp
9f0046c3:	e8 1a 09 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f0046c8:	05 74 35 00 00       	add    eax,0x3574
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84
    return localtime_rI(timer, tmbuf);
9f0046cd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0046d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0046d3:	e8 b3 ff ff ff       	call   9f00468b <localtime_rI>
9f0046d8:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:85
}
9f0046db:	c9                   	leave  
9f0046dc:	c3                   	ret    

9f0046dd <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:87

VISIBLE time_t mktime(struct tm *tmbuf) {
9f0046dd:	55                   	push   ebp
9f0046de:	89 e5                	mov    ebp,esp
9f0046e0:	57                   	push   edi
9f0046e1:	56                   	push   esi
9f0046e2:	53                   	push   ebx
9f0046e3:	83 ec 20             	sub    esp,0x20
9f0046e6:	e8 ff 08 00 00       	call   9f004fea <__x86.get_pc_thunk.cx>
9f0046eb:	81 c1 51 35 00 00    	add    ecx,0x3551
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
9f0046f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0046f4:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
9f0046f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0046fa:	8b 18                	mov    ebx,DWORD PTR [eax]
9f0046fc:	ba 89 88 88 88       	mov    edx,0x88888889
9f004701:	89 d8                	mov    eax,ebx
9f004703:	f7 ea                	imul   edx
9f004705:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f004708:	c1 f8 05             	sar    eax,0x5
9f00470b:	89 c2                	mov    edx,eax
9f00470d:	89 d8                	mov    eax,ebx
9f00470f:	c1 f8 1f             	sar    eax,0x1f
9f004712:	29 c2                	sub    edx,eax
9f004714:	89 d0                	mov    eax,edx
9f004716:	8d 14 06             	lea    edx,[esi+eax*1]
9f004719:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00471c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
  tmbuf->tm_sec %= 60;
9f00471f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004722:	8b 18                	mov    ebx,DWORD PTR [eax]
9f004724:	ba 89 88 88 88       	mov    edx,0x88888889
9f004729:	89 d8                	mov    eax,ebx
9f00472b:	f7 ea                	imul   edx
9f00472d:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f004730:	c1 f8 05             	sar    eax,0x5
9f004733:	89 c2                	mov    edx,eax
9f004735:	89 d8                	mov    eax,ebx
9f004737:	c1 f8 1f             	sar    eax,0x1f
9f00473a:	29 c2                	sub    edx,eax
9f00473c:	89 d0                	mov    eax,edx
9f00473e:	89 c2                	mov    edx,eax
9f004740:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f004747:	89 c2                	mov    edx,eax
9f004749:	89 d0                	mov    eax,edx
9f00474b:	c1 e0 04             	shl    eax,0x4
9f00474e:	29 d0                	sub    eax,edx
9f004750:	29 c3                	sub    ebx,eax
9f004752:	89 d8                	mov    eax,ebx
9f004754:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f004757:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:97
  if (tmbuf->tm_sec < 0) {
9f004759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00475c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00475e:	85 c0                	test   eax,eax
9f004760:	79 1c                	jns    9f00477e <mktime+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:98
    tmbuf->tm_sec += 60;
9f004762:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004765:	8b 00                	mov    eax,DWORD PTR [eax]
9f004767:	8d 50 3c             	lea    edx,[eax+0x3c]
9f00476a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00476d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
    tmbuf->tm_min--;
9f00476f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004772:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f004775:	8d 50 ff             	lea    edx,[eax-0x1]
9f004778:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00477b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
9f00477e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004781:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
9f004784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004787:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f00478a:	ba 89 88 88 88       	mov    edx,0x88888889
9f00478f:	89 d8                	mov    eax,ebx
9f004791:	f7 ea                	imul   edx
9f004793:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f004796:	c1 f8 05             	sar    eax,0x5
9f004799:	89 c2                	mov    edx,eax
9f00479b:	89 d8                	mov    eax,ebx
9f00479d:	c1 f8 1f             	sar    eax,0x1f
9f0047a0:	29 c2                	sub    edx,eax
9f0047a2:	89 d0                	mov    eax,edx
9f0047a4:	8d 14 06             	lea    edx,[esi+eax*1]
9f0047a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0047aa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
  tmbuf->tm_min = tmbuf->tm_min % 60;
9f0047ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0047b0:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f0047b3:	ba 89 88 88 88       	mov    edx,0x88888889
9f0047b8:	89 d8                	mov    eax,ebx
9f0047ba:	f7 ea                	imul   edx
9f0047bc:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f0047bf:	c1 f8 05             	sar    eax,0x5
9f0047c2:	89 c2                	mov    edx,eax
9f0047c4:	89 d8                	mov    eax,ebx
9f0047c6:	c1 f8 1f             	sar    eax,0x1f
9f0047c9:	29 c2                	sub    edx,eax
9f0047cb:	89 d0                	mov    eax,edx
9f0047cd:	89 c2                	mov    edx,eax
9f0047cf:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f0047d6:	89 c2                	mov    edx,eax
9f0047d8:	89 d0                	mov    eax,edx
9f0047da:	c1 e0 04             	shl    eax,0x4
9f0047dd:	29 d0                	sub    eax,edx
9f0047df:	29 c3                	sub    ebx,eax
9f0047e1:	89 d8                	mov    eax,ebx
9f0047e3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0047e6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:103
  if (tmbuf->tm_min < 0) {
9f0047e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0047ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0047ef:	85 c0                	test   eax,eax
9f0047f1:	79 1e                	jns    9f004811 <mktime+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:104
    tmbuf->tm_min += 60;
9f0047f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0047f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0047f9:	8d 50 3c             	lea    edx,[eax+0x3c]
9f0047fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0047ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
    tmbuf->tm_hour--;
9f004802:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004805:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f004808:	8d 50 ff             	lea    edx,[eax-0x1]
9f00480b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00480e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
  }
  day = tmbuf->tm_hour / 24;
9f004811:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004814:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f004817:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f00481c:	89 d8                	mov    eax,ebx
9f00481e:	f7 ea                	imul   edx
9f004820:	c1 fa 02             	sar    edx,0x2
9f004823:	89 d8                	mov    eax,ebx
9f004825:	c1 f8 1f             	sar    eax,0x1f
9f004828:	29 c2                	sub    edx,eax
9f00482a:	89 d0                	mov    eax,edx
9f00482c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
9f00482f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004832:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f004835:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f00483a:	89 d8                	mov    eax,ebx
9f00483c:	f7 ea                	imul   edx
9f00483e:	c1 fa 02             	sar    edx,0x2
9f004841:	89 d8                	mov    eax,ebx
9f004843:	c1 f8 1f             	sar    eax,0x1f
9f004846:	29 c2                	sub    edx,eax
9f004848:	89 d0                	mov    eax,edx
9f00484a:	01 c0                	add    eax,eax
9f00484c:	01 d0                	add    eax,edx
9f00484e:	c1 e0 03             	shl    eax,0x3
9f004851:	29 c3                	sub    ebx,eax
9f004853:	89 da                	mov    edx,ebx
9f004855:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004858:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:109
  if (tmbuf->tm_hour < 0) {
9f00485b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00485e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f004861:	85 c0                	test   eax,eax
9f004863:	79 13                	jns    9f004878 <mktime+0x19b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:110
    tmbuf->tm_hour += 24;
9f004865:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004868:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f00486b:	8d 50 18             	lea    edx,[eax+0x18]
9f00486e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004871:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
    day--;
9f004874:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
9f004878:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00487b:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
9f00487e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004881:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004884:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f004889:	89 d8                	mov    eax,ebx
9f00488b:	f7 ea                	imul   edx
9f00488d:	d1 fa                	sar    edx,1
9f00488f:	89 d8                	mov    eax,ebx
9f004891:	c1 f8 1f             	sar    eax,0x1f
9f004894:	29 c2                	sub    edx,eax
9f004896:	89 d0                	mov    eax,edx
9f004898:	8d 14 06             	lea    edx,[esi+eax*1]
9f00489b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00489e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
  tmbuf->tm_mon %= 12;
9f0048a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0048a4:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f0048a7:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f0048ac:	89 d8                	mov    eax,ebx
9f0048ae:	f7 ea                	imul   edx
9f0048b0:	d1 fa                	sar    edx,1
9f0048b2:	89 d8                	mov    eax,ebx
9f0048b4:	c1 f8 1f             	sar    eax,0x1f
9f0048b7:	29 c2                	sub    edx,eax
9f0048b9:	89 d0                	mov    eax,edx
9f0048bb:	01 c0                	add    eax,eax
9f0048bd:	01 d0                	add    eax,edx
9f0048bf:	c1 e0 02             	shl    eax,0x2
9f0048c2:	29 c3                	sub    ebx,eax
9f0048c4:	89 da                	mov    edx,ebx
9f0048c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0048c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:115
  if (tmbuf->tm_mon < 0) {
9f0048cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0048cf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0048d2:	85 c0                	test   eax,eax
9f0048d4:	79 1e                	jns    9f0048f4 <mktime+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
    tmbuf->tm_mon += 12;
9f0048d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0048d9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0048dc:	8d 50 0c             	lea    edx,[eax+0xc]
9f0048df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0048e2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
    tmbuf->tm_year--;
9f0048e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0048e8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0048eb:	8d 50 ff             	lea    edx,[eax-0x1]
9f0048ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0048f1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:119
  }
  day += (tmbuf->tm_mday - 1);
9f0048f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0048f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f0048fa:	83 e8 01             	sub    eax,0x1
9f0048fd:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
  while (day < 0) {
9f004900:	e9 c1 00 00 00       	jmp    9f0049c6 <mktime+0x2e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:121
    if(--tmbuf->tm_mon < 0) {
9f004905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004908:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00490b:	8d 50 ff             	lea    edx,[eax-0x1]
9f00490e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004911:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f004914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00491a:	85 c0                	test   eax,eax
9f00491c:	79 19                	jns    9f004937 <mktime+0x25a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
      tmbuf->tm_year--;
9f00491e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004921:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004924:	8d 50 ff             	lea    edx,[eax-0x1]
9f004927:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00492a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:123
      tmbuf->tm_mon = 11;
9f00492d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004930:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f004937:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00493a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00493d:	83 e0 03             	and    eax,0x3
9f004940:	85 c0                	test   eax,eax
9f004942:	75 62                	jne    9f0049a6 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 1)
9f004944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004947:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00494a:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004950:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004955:	89 d8                	mov    eax,ebx
9f004957:	f7 ea                	imul   edx
9f004959:	c1 fa 05             	sar    edx,0x5
9f00495c:	89 d8                	mov    eax,ebx
9f00495e:	c1 f8 1f             	sar    eax,0x1f
9f004961:	29 c2                	sub    edx,eax
9f004963:	89 d0                	mov    eax,edx
9f004965:	6b c0 64             	imul   eax,eax,0x64
9f004968:	29 c3                	sub    ebx,eax
9f00496a:	89 d8                	mov    eax,ebx
9f00496c:	85 c0                	test   eax,eax
9f00496e:	75 2f                	jne    9f00499f <mktime+0x2c2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 4)
9f004970:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004973:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004976:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f00497c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004981:	89 d8                	mov    eax,ebx
9f004983:	f7 ea                	imul   edx
9f004985:	c1 fa 07             	sar    edx,0x7
9f004988:	89 d8                	mov    eax,ebx
9f00498a:	c1 f8 1f             	sar    eax,0x1f
9f00498d:	29 c2                	sub    edx,eax
9f00498f:	89 d0                	mov    eax,edx
9f004991:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004997:	29 c3                	sub    ebx,eax
9f004999:	89 d8                	mov    eax,ebx
9f00499b:	85 c0                	test   eax,eax
9f00499d:	75 07                	jne    9f0049a6 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 5)
9f00499f:	ba 01 00 00 00       	mov    edx,0x1
9f0049a4:	eb 05                	jmp    9f0049ab <mktime+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 6)
9f0049a6:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 8)
9f0049ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049ae:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f0049b1:	89 d0                	mov    eax,edx
9f0049b3:	01 c0                	add    eax,eax
9f0049b5:	01 d0                	add    eax,edx
9f0049b7:	c1 e0 02             	shl    eax,0x2
9f0049ba:	01 d8                	add    eax,ebx
9f0049bc:	8b 84 81 24 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2dc]
9f0049c3:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
9f0049c6:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0049ca:	0f 88 35 ff ff ff    	js     9f004905 <mktime+0x228>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f0049d0:	e9 c2 00 00 00       	jmp    9f004a97 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f0049d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049d8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0049db:	83 e0 03             	and    eax,0x3
9f0049de:	85 c0                	test   eax,eax
9f0049e0:	75 62                	jne    9f004a44 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 1)
9f0049e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049e5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0049e8:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f0049ee:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0049f3:	89 d8                	mov    eax,ebx
9f0049f5:	f7 ea                	imul   edx
9f0049f7:	c1 fa 05             	sar    edx,0x5
9f0049fa:	89 d8                	mov    eax,ebx
9f0049fc:	c1 f8 1f             	sar    eax,0x1f
9f0049ff:	29 c2                	sub    edx,eax
9f004a01:	89 d0                	mov    eax,edx
9f004a03:	6b c0 64             	imul   eax,eax,0x64
9f004a06:	29 c3                	sub    ebx,eax
9f004a08:	89 d8                	mov    eax,ebx
9f004a0a:	85 c0                	test   eax,eax
9f004a0c:	75 2f                	jne    9f004a3d <mktime+0x360>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 4)
9f004a0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a11:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004a14:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004a1a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004a1f:	89 d8                	mov    eax,ebx
9f004a21:	f7 ea                	imul   edx
9f004a23:	c1 fa 07             	sar    edx,0x7
9f004a26:	89 d8                	mov    eax,ebx
9f004a28:	c1 f8 1f             	sar    eax,0x1f
9f004a2b:	29 c2                	sub    edx,eax
9f004a2d:	89 d0                	mov    eax,edx
9f004a2f:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004a35:	29 c3                	sub    ebx,eax
9f004a37:	89 d8                	mov    eax,ebx
9f004a39:	85 c0                	test   eax,eax
9f004a3b:	75 07                	jne    9f004a44 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 5)
9f004a3d:	ba 01 00 00 00       	mov    edx,0x1
9f004a42:	eb 05                	jmp    9f004a49 <mktime+0x36c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 6)
9f004a44:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 8)
9f004a49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a4c:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004a4f:	89 d0                	mov    eax,edx
9f004a51:	01 c0                	add    eax,eax
9f004a53:	01 d0                	add    eax,edx
9f004a55:	c1 e0 02             	shl    eax,0x2
9f004a58:	01 d8                	add    eax,ebx
9f004a5a:	8b 84 81 24 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2dc]
9f004a61:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:129 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
9f004a64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a67:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004a6a:	8d 50 01             	lea    edx,[eax+0x1]
9f004a6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a70:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f004a73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a76:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004a79:	83 f8 0c             	cmp    eax,0xc
9f004a7c:	75 19                	jne    9f004a97 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:130
      tmbuf->tm_mon = 0;
9f004a7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a81:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:131
      tmbuf->tm_year++;
9f004a88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a8b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004a8e:	8d 50 01             	lea    edx,[eax+0x1]
9f004a91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a94:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f004a97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a9a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004a9d:	83 e0 03             	and    eax,0x3
9f004aa0:	85 c0                	test   eax,eax
9f004aa2:	75 62                	jne    9f004b06 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 1)
9f004aa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004aa7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004aaa:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004ab0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004ab5:	89 d8                	mov    eax,ebx
9f004ab7:	f7 ea                	imul   edx
9f004ab9:	c1 fa 05             	sar    edx,0x5
9f004abc:	89 d8                	mov    eax,ebx
9f004abe:	c1 f8 1f             	sar    eax,0x1f
9f004ac1:	29 c2                	sub    edx,eax
9f004ac3:	89 d0                	mov    eax,edx
9f004ac5:	6b c0 64             	imul   eax,eax,0x64
9f004ac8:	29 c3                	sub    ebx,eax
9f004aca:	89 d8                	mov    eax,ebx
9f004acc:	85 c0                	test   eax,eax
9f004ace:	75 2f                	jne    9f004aff <mktime+0x422>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 4)
9f004ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004ad3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004ad6:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004adc:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004ae1:	89 d8                	mov    eax,ebx
9f004ae3:	f7 ea                	imul   edx
9f004ae5:	c1 fa 07             	sar    edx,0x7
9f004ae8:	89 d8                	mov    eax,ebx
9f004aea:	c1 f8 1f             	sar    eax,0x1f
9f004aed:	29 c2                	sub    edx,eax
9f004aef:	89 d0                	mov    eax,edx
9f004af1:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004af7:	29 c3                	sub    ebx,eax
9f004af9:	89 d8                	mov    eax,ebx
9f004afb:	85 c0                	test   eax,eax
9f004afd:	75 07                	jne    9f004b06 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 5)
9f004aff:	ba 01 00 00 00       	mov    edx,0x1
9f004b04:	eb 05                	jmp    9f004b0b <mktime+0x42e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 6)
9f004b06:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 8)
9f004b0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b0e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004b11:	89 d0                	mov    eax,edx
9f004b13:	01 c0                	add    eax,eax
9f004b15:	01 d0                	add    eax,edx
9f004b17:	c1 e0 02             	shl    eax,0x2
9f004b1a:	01 d8                	add    eax,ebx
9f004b1c:	8b 84 81 24 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2dc]
9f004b23:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f004b26:	0f 8e a9 fe ff ff    	jle    9f0049d5 <mktime+0x2f8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
9f004b2c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f004b2f:	8d 50 01             	lea    edx,[eax+0x1]
9f004b32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b35:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  year = EPOCH_YR;
9f004b38:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
9f004b3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b42:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004b45:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f004b48:	81 ea 6c 07 00 00    	sub    edx,0x76c
9f004b4e:	39 d0                	cmp    eax,edx
9f004b50:	7d 0a                	jge    9f004b5c <mktime+0x47f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136 (discriminator 1)
9f004b52:	b8 19 fc ff ff       	mov    eax,0xfffffc19
9f004b57:	e9 d0 03 00 00       	jmp    9f004f2c <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:137
  seconds = 0;
9f004b5c:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:138
  day = 0;                      // Means days since day 0 now
9f004b63:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:139
  overflow = 0;
9f004b6a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
9f004b71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b74:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004b77:	05 6c 07 00 00       	add    eax,0x76c
9f004b7c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
9f004b7f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004b82:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004b85:	3d 7c c6 59 00       	cmp    eax,0x59c67c
9f004b8a:	7e 07                	jle    9f004b93 <mktime+0x4b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 1)
9f004b8c:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149
  day = (tm_year - year) * 365;
9f004b93:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004b96:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004b99:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
9f004b9f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
9f004ba2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f004ba7:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
9f004baa:	89 c2                	mov    edx,eax
9f004bac:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004baf:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004bb2:	8d 58 03             	lea    ebx,[eax+0x3]
9f004bb5:	85 c0                	test   eax,eax
9f004bb7:	0f 48 c3             	cmovs  eax,ebx
9f004bba:	c1 f8 02             	sar    eax,0x2
9f004bbd:	83 c0 01             	add    eax,0x1
9f004bc0:	39 c2                	cmp    edx,eax
9f004bc2:	7d 04                	jge    9f004bc8 <mktime+0x4eb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 1)
9f004bc4:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
9f004bc8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004bcb:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004bce:	8d 50 03             	lea    edx,[eax+0x3]
9f004bd1:	85 c0                	test   eax,eax
9f004bd3:	0f 48 c2             	cmovs  eax,edx
9f004bd6:	c1 f8 02             	sar    eax,0x2
9f004bd9:	89 c3                	mov    ebx,eax
9f004bdb:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004bde:	83 e0 03             	and    eax,0x3
9f004be1:	85 c0                	test   eax,eax
9f004be3:	74 29                	je     9f004c0e <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151 (discriminator 1)
9f004be5:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004be8:	99                   	cdq    
9f004be9:	c1 ea 1e             	shr    edx,0x1e
9f004bec:	01 d0                	add    eax,edx
9f004bee:	83 e0 03             	and    eax,0x3
9f004bf1:	29 d0                	sub    eax,edx
9f004bf3:	89 c6                	mov    esi,eax
9f004bf5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f004bf8:	99                   	cdq    
9f004bf9:	c1 ea 1e             	shr    edx,0x1e
9f004bfc:	01 d0                	add    eax,edx
9f004bfe:	83 e0 03             	and    eax,0x3
9f004c01:	29 d0                	sub    eax,edx
9f004c03:	39 c6                	cmp    esi,eax
9f004c05:	7d 07                	jge    9f004c0e <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151 (discriminator 3)
9f004c07:	b8 01 00 00 00       	mov    eax,0x1
9f004c0c:	eb 05                	jmp    9f004c13 <mktime+0x536>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151 (discriminator 4)
9f004c0e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151 (discriminator 6)
9f004c13:	01 d8                	add    eax,ebx
9f004c15:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
9f004c18:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004c1b:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004c1e:	89 c3                	mov    ebx,eax
9f004c20:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004c25:	89 d8                	mov    eax,ebx
9f004c27:	f7 ea                	imul   edx
9f004c29:	c1 fa 05             	sar    edx,0x5
9f004c2c:	89 d8                	mov    eax,ebx
9f004c2e:	c1 f8 1f             	sar    eax,0x1f
9f004c31:	89 d7                	mov    edi,edx
9f004c33:	29 c7                	sub    edi,eax
9f004c35:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004c38:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004c3d:	89 d8                	mov    eax,ebx
9f004c3f:	f7 ea                	imul   edx
9f004c41:	c1 fa 05             	sar    edx,0x5
9f004c44:	89 d8                	mov    eax,ebx
9f004c46:	c1 f8 1f             	sar    eax,0x1f
9f004c49:	29 c2                	sub    edx,eax
9f004c4b:	89 d0                	mov    eax,edx
9f004c4d:	6b c0 64             	imul   eax,eax,0x64
9f004c50:	29 c3                	sub    ebx,eax
9f004c52:	89 d8                	mov    eax,ebx
9f004c54:	85 c0                	test   eax,eax
9f004c56:	74 49                	je     9f004ca1 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 1)
9f004c58:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004c5b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004c60:	89 d8                	mov    eax,ebx
9f004c62:	f7 ea                	imul   edx
9f004c64:	c1 fa 05             	sar    edx,0x5
9f004c67:	89 d8                	mov    eax,ebx
9f004c69:	c1 f8 1f             	sar    eax,0x1f
9f004c6c:	89 d6                	mov    esi,edx
9f004c6e:	29 c6                	sub    esi,eax
9f004c70:	6b c6 64             	imul   eax,esi,0x64
9f004c73:	89 de                	mov    esi,ebx
9f004c75:	29 c6                	sub    esi,eax
9f004c77:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f004c7a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004c7f:	89 d8                	mov    eax,ebx
9f004c81:	f7 ea                	imul   edx
9f004c83:	c1 fa 05             	sar    edx,0x5
9f004c86:	89 d8                	mov    eax,ebx
9f004c88:	c1 f8 1f             	sar    eax,0x1f
9f004c8b:	29 c2                	sub    edx,eax
9f004c8d:	89 d0                	mov    eax,edx
9f004c8f:	6b c0 64             	imul   eax,eax,0x64
9f004c92:	29 c3                	sub    ebx,eax
9f004c94:	89 d8                	mov    eax,ebx
9f004c96:	39 c6                	cmp    esi,eax
9f004c98:	7d 07                	jge    9f004ca1 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 3)
9f004c9a:	b8 01 00 00 00       	mov    eax,0x1
9f004c9f:	eb 05                	jmp    9f004ca6 <mktime+0x5c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 4)
9f004ca1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)
9f004ca6:	01 f8                	add    eax,edi
9f004ca8:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
9f004cab:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004cae:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004cb1:	89 c3                	mov    ebx,eax
9f004cb3:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004cb8:	89 d8                	mov    eax,ebx
9f004cba:	f7 ea                	imul   edx
9f004cbc:	c1 fa 07             	sar    edx,0x7
9f004cbf:	89 d8                	mov    eax,ebx
9f004cc1:	c1 f8 1f             	sar    eax,0x1f
9f004cc4:	89 d7                	mov    edi,edx
9f004cc6:	29 c7                	sub    edi,eax
9f004cc8:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004ccb:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004cd0:	89 d8                	mov    eax,ebx
9f004cd2:	f7 ea                	imul   edx
9f004cd4:	c1 fa 07             	sar    edx,0x7
9f004cd7:	89 d8                	mov    eax,ebx
9f004cd9:	c1 f8 1f             	sar    eax,0x1f
9f004cdc:	29 c2                	sub    edx,eax
9f004cde:	89 d0                	mov    eax,edx
9f004ce0:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004ce6:	29 c3                	sub    ebx,eax
9f004ce8:	89 d8                	mov    eax,ebx
9f004cea:	85 c0                	test   eax,eax
9f004cec:	74 4f                	je     9f004d3d <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 1)
9f004cee:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004cf1:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004cf6:	89 d8                	mov    eax,ebx
9f004cf8:	f7 ea                	imul   edx
9f004cfa:	c1 fa 07             	sar    edx,0x7
9f004cfd:	89 d8                	mov    eax,ebx
9f004cff:	c1 f8 1f             	sar    eax,0x1f
9f004d02:	89 d6                	mov    esi,edx
9f004d04:	29 c6                	sub    esi,eax
9f004d06:	69 c6 90 01 00 00    	imul   eax,esi,0x190
9f004d0c:	89 de                	mov    esi,ebx
9f004d0e:	29 c6                	sub    esi,eax
9f004d10:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f004d13:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004d18:	89 d8                	mov    eax,ebx
9f004d1a:	f7 ea                	imul   edx
9f004d1c:	c1 fa 07             	sar    edx,0x7
9f004d1f:	89 d8                	mov    eax,ebx
9f004d21:	c1 f8 1f             	sar    eax,0x1f
9f004d24:	29 c2                	sub    edx,eax
9f004d26:	89 d0                	mov    eax,edx
9f004d28:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004d2e:	29 c3                	sub    ebx,eax
9f004d30:	89 d8                	mov    eax,ebx
9f004d32:	39 c6                	cmp    esi,eax
9f004d34:	7d 07                	jge    9f004d3d <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 3)
9f004d36:	b8 01 00 00 00       	mov    eax,0x1
9f004d3b:	eb 05                	jmp    9f004d42 <mktime+0x665>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 4)
9f004d3d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
9f004d42:	01 f8                	add    eax,edi
9f004d44:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 6)

  yday = month = 0;
9f004d47:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f004d4e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f004d51:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:156 (discriminator 6)
  while (month < tmbuf->tm_mon) {
9f004d54:	eb 7b                	jmp    9f004dd1 <mktime+0x6f4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157
    yday += _ytab[LEAPYEAR(tm_year)][month];
9f004d56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004d59:	83 e0 03             	and    eax,0x3
9f004d5c:	85 c0                	test   eax,eax
9f004d5e:	75 50                	jne    9f004db0 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 1)
9f004d60:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004d63:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004d68:	89 d8                	mov    eax,ebx
9f004d6a:	f7 ea                	imul   edx
9f004d6c:	c1 fa 05             	sar    edx,0x5
9f004d6f:	89 d8                	mov    eax,ebx
9f004d71:	c1 f8 1f             	sar    eax,0x1f
9f004d74:	29 c2                	sub    edx,eax
9f004d76:	89 d0                	mov    eax,edx
9f004d78:	6b c0 64             	imul   eax,eax,0x64
9f004d7b:	29 c3                	sub    ebx,eax
9f004d7d:	89 d8                	mov    eax,ebx
9f004d7f:	85 c0                	test   eax,eax
9f004d81:	75 26                	jne    9f004da9 <mktime+0x6cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 4)
9f004d83:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004d86:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004d8b:	89 d8                	mov    eax,ebx
9f004d8d:	f7 ea                	imul   edx
9f004d8f:	c1 fa 07             	sar    edx,0x7
9f004d92:	89 d8                	mov    eax,ebx
9f004d94:	c1 f8 1f             	sar    eax,0x1f
9f004d97:	29 c2                	sub    edx,eax
9f004d99:	89 d0                	mov    eax,edx
9f004d9b:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004da1:	29 c3                	sub    ebx,eax
9f004da3:	89 d8                	mov    eax,ebx
9f004da5:	85 c0                	test   eax,eax
9f004da7:	75 07                	jne    9f004db0 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 5)
9f004da9:	ba 01 00 00 00       	mov    edx,0x1
9f004dae:	eb 05                	jmp    9f004db5 <mktime+0x6d8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 6)
9f004db0:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 8)
9f004db5:	89 d0                	mov    eax,edx
9f004db7:	01 c0                	add    eax,eax
9f004db9:	01 d0                	add    eax,edx
9f004dbb:	c1 e0 02             	shl    eax,0x2
9f004dbe:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f004dc1:	01 d0                	add    eax,edx
9f004dc3:	8b 84 81 24 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2dc]
9f004dca:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158 (discriminator 8)
    month++;
9f004dcd:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:156
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
9f004dd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004dd4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004dd7:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f004dda:	0f 8f 76 ff ff ff    	jg     9f004d56 <mktime+0x679>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:160
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
9f004de0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004de3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f004de6:	83 e8 01             	sub    eax,0x1
9f004de9:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161
  if (day + yday < 0) overflow|=4;
9f004dec:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f004def:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f004df2:	01 d0                	add    eax,edx
9f004df4:	85 c0                	test   eax,eax
9f004df6:	79 04                	jns    9f004dfc <mktime+0x71f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161 (discriminator 1)
9f004df8:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:162
  day += yday;
9f004dfc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f004dff:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:164

  tmbuf->tm_yday = yday;
9f004e02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004e05:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f004e08:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:165
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
9f004e0b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f004e0e:	8d 58 04             	lea    ebx,[eax+0x4]
9f004e11:	ba 93 24 49 92       	mov    edx,0x92492493
9f004e16:	89 d8                	mov    eax,ebx
9f004e18:	f7 ea                	imul   edx
9f004e1a:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f004e1d:	c1 f8 02             	sar    eax,0x2
9f004e20:	89 c2                	mov    edx,eax
9f004e22:	89 d8                	mov    eax,ebx
9f004e24:	c1 f8 1f             	sar    eax,0x1f
9f004e27:	29 c2                	sub    edx,eax
9f004e29:	89 d0                	mov    eax,edx
9f004e2b:	89 c2                	mov    edx,eax
9f004e2d:	c1 e2 03             	shl    edx,0x3
9f004e30:	29 c2                	sub    edx,eax
9f004e32:	89 d8                	mov    eax,ebx
9f004e34:	29 d0                	sub    eax,edx
9f004e36:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f004e39:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:167

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
9f004e3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004e3f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f004e42:	c1 e0 02             	shl    eax,0x2
9f004e45:	89 c2                	mov    edx,eax
9f004e47:	c1 e2 04             	shl    edx,0x4
9f004e4a:	29 c2                	sub    edx,eax
9f004e4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004e4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f004e52:	01 d0                	add    eax,edx
9f004e54:	c1 e0 02             	shl    eax,0x2
9f004e57:	89 c2                	mov    edx,eax
9f004e59:	c1 e2 04             	shl    edx,0x4
9f004e5c:	29 c2                	sub    edx,eax
9f004e5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004e61:	8b 00                	mov    eax,DWORD PTR [eax]
9f004e63:	01 d0                	add    eax,edx
9f004e65:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:169

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
9f004e68:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f004e6d:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
9f004e70:	89 c3                	mov    ebx,eax
9f004e72:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f004e77:	89 d8                	mov    eax,ebx
9f004e79:	f7 ea                	imul   edx
9f004e7b:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f004e7e:	c1 f8 10             	sar    eax,0x10
9f004e81:	89 c2                	mov    edx,eax
9f004e83:	89 d8                	mov    eax,ebx
9f004e85:	c1 f8 1f             	sar    eax,0x1f
9f004e88:	29 c2                	sub    edx,eax
9f004e8a:	89 d0                	mov    eax,edx
9f004e8c:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f004e8f:	7d 04                	jge    9f004e95 <mktime+0x7b8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:169 (discriminator 1)
9f004e91:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170
  seconds += day * SECS_DAY;
9f004e95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f004e98:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f004e9e:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:173

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f004ea1:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004ea7:	8b 00                	mov    eax,DWORD PTR [eax]
9f004ea9:	85 c0                	test   eax,eax
9f004eab:	7e 16                	jle    9f004ec3 <mktime+0x7e6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:173 (discriminator 1)
9f004ead:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004eb3:	8b 00                	mov    eax,DWORD PTR [eax]
9f004eb5:	ba ff ff ff 7f       	mov    edx,0x7fffffff
9f004eba:	29 c2                	sub    edx,eax
9f004ebc:	89 d0                	mov    eax,edx
9f004ebe:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f004ec1:	7c 1b                	jl     9f004ede <mktime+0x801>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174 (discriminator 3)
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f004ec3:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004ec9:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:173 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f004ecb:	85 c0                	test   eax,eax
9f004ecd:	79 13                	jns    9f004ee2 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f004ecf:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004ed5:	8b 00                	mov    eax,DWORD PTR [eax]
9f004ed7:	f7 d8                	neg    eax
9f004ed9:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f004edc:	7e 04                	jle    9f004ee2 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:175
          overflow|=16;
9f004ede:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177
  }
  seconds += libcTZ;
9f004ee2:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004ee8:	8b 00                	mov    eax,DWORD PTR [eax]
9f004eea:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:179

  if (tmbuf->tm_isdst) {
9f004eed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004ef0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
9f004ef3:	85 c0                	test   eax,eax
9f004ef5:	74 0b                	je     9f004f02 <mktime+0x825>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:180
    dst = _dstbias;
9f004ef7:	8b 81 b4 00 00 00    	mov    eax,DWORD PTR [ecx+0xb4]
9f004efd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
9f004f00:	eb 07                	jmp    9f004f09 <mktime+0x82c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182
  } else {
    dst = 0;
9f004f02:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
9f004f09:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f004f0c:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f004f0f:	7e 04                	jle    9f004f15 <mktime+0x838>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185 (discriminator 1)
9f004f11:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:186
  seconds -= dst;
9f004f15:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f004f18:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188

  if (overflow) return (time_t) overflow-2;
9f004f1b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f004f1f:	74 08                	je     9f004f29 <mktime+0x84c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188 (discriminator 1)
9f004f21:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f004f24:	83 e8 02             	sub    eax,0x2
9f004f27:	eb 03                	jmp    9f004f2c <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:191

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
9f004f29:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:192
}
9f004f2c:	83 c4 20             	add    esp,0x20
9f004f2f:	5b                   	pop    ebx
9f004f30:	5e                   	pop    esi
9f004f31:	5f                   	pop    edi
9f004f32:	5d                   	pop    ebp
9f004f33:	c3                   	ret    

9f004f34 <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:195

VISIBLE struct tm* gettime(struct tm *time, bool localTime)
{
9f004f34:	55                   	push   ebp
9f004f35:	89 e5                	mov    ebp,esp
9f004f37:	56                   	push   esi
9f004f38:	53                   	push   ebx
9f004f39:	83 ec 14             	sub    esp,0x14
9f004f3c:	e8 a1 00 00 00       	call   9f004fe2 <__x86.get_pc_thunk.ax>
9f004f41:	05 fb 2c 00 00       	add    eax,0x2cfb
9f004f46:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004f49:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/aproj/libChrisOS/src/time.c:196
    time_t ticks=0;
9f004f4c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:198
    
    SYSCALL0(SYSCALL_GETTIME, ticks);
9f004f53:	b8 71 01 00 00       	mov    eax,0x171
9f004f58:	bb 00 00 00 00       	mov    ebx,0x0
9f004f5d:	b9 00 00 00 00       	mov    ecx,0x0
9f004f62:	ba 00 00 00 00       	mov    edx,0x0
9f004f67:	be 00 00 00 00       	mov    esi,0x0
9f004f6c:	e8 fc ff ff ff       	call   9f004f6d <gettime+0x39>
9f004f71:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:199
    if (localTime)
9f004f74:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
9f004f78:	74 11                	je     9f004f8b <gettime+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:200
        return localtime_rI(&ticks,time);
9f004f7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004f7d:	8d 45 f4             	lea    eax,[ebp-0xc]
9f004f80:	50                   	push   eax
9f004f81:	e8 05 f7 ff ff       	call   9f00468b <localtime_rI>
9f004f86:	83 c4 08             	add    esp,0x8
9f004f89:	eb 0f                	jmp    9f004f9a <gettime+0x66>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:202
    else
        return gmtime_rI((time_t*)&ticks,time);
9f004f8b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004f8e:	8d 45 f4             	lea    eax,[ebp-0xc]
9f004f91:	50                   	push   eax
9f004f92:	e8 81 f3 ff ff       	call   9f004318 <gmtime_rI>
9f004f97:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:203 (discriminator 1)
}
9f004f9a:	8d 65 f8             	lea    esp,[ebp-0x8]
9f004f9d:	5b                   	pop    ebx
9f004f9e:	5e                   	pop    esi
9f004f9f:	5d                   	pop    ebp
9f004fa0:	c3                   	ret    

9f004fa1 <time>:
time():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:206

VISIBLE time_t time (time_t *result)
{
9f004fa1:	55                   	push   ebp
9f004fa2:	89 e5                	mov    ebp,esp
9f004fa4:	53                   	push   ebx
9f004fa5:	83 ec 14             	sub    esp,0x14
9f004fa8:	e8 39 00 00 00       	call   9f004fe6 <__x86.get_pc_thunk.bx>
9f004fad:	81 c3 8f 2c 00 00    	add    ebx,0x2c8f
/home/yogi/src/os/aproj/libChrisOS/src/time.c:207
    uint32_t ticks = do_syscall0(SYSCALL_GETTIME);
9f004fb3:	83 ec 0c             	sub    esp,0xc
9f004fb6:	68 71 01 00 00       	push   0x171
9f004fbb:	e8 5c c4 ff ff       	call   9f00141c <do_syscall0>
9f004fc0:	83 c4 10             	add    esp,0x10
9f004fc3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:208
    memcpyI(result, &ticks, 4);
9f004fc6:	83 ec 04             	sub    esp,0x4
9f004fc9:	6a 04                	push   0x4
9f004fcb:	8d 45 f4             	lea    eax,[ebp-0xc]
9f004fce:	50                   	push   eax
9f004fcf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004fd2:	e8 5d d7 ff ff       	call   9f002734 <memcpyI>
9f004fd7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:209
    return ticks;
9f004fda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:210
9f004fdd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f004fe0:	c9                   	leave  
9f004fe1:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

9f004fe2 <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
9f004fe2:	8b 04 24             	mov    eax,DWORD PTR [esp]
9f004fe5:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.bx:

9f004fe6 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
9f004fe6:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
9f004fe9:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

9f004fea <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
9f004fea:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
9f004fed:	c3                   	ret    

Disassembly of section .eh_frame:

9f004ff0 <.eh_frame>:
9f004ff0:	14 00                	adc    al,0x0
9f004ff2:	00 00                	add    BYTE PTR [eax],al
9f004ff4:	00 00                	add    BYTE PTR [eax],al
9f004ff6:	00 00                	add    BYTE PTR [eax],al
9f004ff8:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f004ffb:	00 01                	add    BYTE PTR [ecx],al
9f004ffd:	7c 08                	jl     9f005007 <__x86.get_pc_thunk.cx+0x1d>
9f004fff:	01 1b                	add    DWORD PTR [ebx],ebx
9f005001:	0c 04                	or     al,0x4
9f005003:	04 88                	add    al,0x88
9f005005:	01 00                	add    DWORD PTR [eax],eax
9f005007:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00500a:	00 00                	add    BYTE PTR [eax],al
9f00500c:	1c 00                	sbb    al,0x0
9f00500e:	00 00                	add    BYTE PTR [eax],al
9f005010:	f0 af                	lock scas eax,DWORD PTR es:[edi]
9f005012:	ff                   	(bad)  
9f005013:	ff                   	(bad)  
9f005014:	38 00                	cmp    BYTE PTR [eax],al
9f005016:	00 00                	add    BYTE PTR [eax],al
9f005018:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00501b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005021:	74 c5                	je     9f004fe8 <__x86.get_pc_thunk.bx+0x2>
9f005023:	0c 04                	or     al,0x4
9f005025:	04 00                	add    al,0x0
9f005027:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00502a:	00 00                	add    BYTE PTR [eax],al
9f00502c:	3c 00                	cmp    al,0x0
9f00502e:	00 00                	add    BYTE PTR [eax],al
9f005030:	08 b0 ff ff 38 00    	or     BYTE PTR [eax+0x38ffff],dh
9f005036:	00 00                	add    BYTE PTR [eax],al
9f005038:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00503b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005041:	74 c5                	je     9f005008 <__x86.get_pc_thunk.cx+0x1e>
9f005043:	0c 04                	or     al,0x4
9f005045:	04 00                	add    al,0x0
9f005047:	00 10                	add    BYTE PTR [eax],dl
9f005049:	00 00                	add    BYTE PTR [eax],al
9f00504b:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
9f00504f:	00 92 ff ff ff 04    	add    BYTE PTR [edx+0x4ffffff],dl
9f005055:	00 00                	add    BYTE PTR [eax],al
9f005057:	00 00                	add    BYTE PTR [eax],al
9f005059:	00 00                	add    BYTE PTR [eax],al
9f00505b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00505e:	00 00                	add    BYTE PTR [eax],al
9f005060:	70 00                	jo     9f005062 <__x86.get_pc_thunk.cx+0x78>
9f005062:	00 00                	add    BYTE PTR [eax],al
9f005064:	0c b0                	or     al,0xb0
9f005066:	ff                   	(bad)  
9f005067:	ff 55 00             	call   DWORD PTR [ebp+0x0]
9f00506a:	00 00                	add    BYTE PTR [eax],al
9f00506c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00506f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005075:	42                   	inc    edx
9f005076:	86 03                	xchg   BYTE PTR [ebx],al
9f005078:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f00507c:	c3                   	ret    
9f00507d:	41                   	inc    ecx
9f00507e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005082:	04 04                	add    al,0x4
9f005084:	24 00                	and    al,0x0
9f005086:	00 00                	add    BYTE PTR [eax],al
9f005088:	98                   	cwde   
9f005089:	00 00                	add    BYTE PTR [eax],al
9f00508b:	00 39                	add    BYTE PTR [ecx],bh
9f00508d:	b0 ff                	mov    al,0xff
9f00508f:	ff 55 00             	call   DWORD PTR [ebp+0x0]
9f005092:	00 00                	add    BYTE PTR [eax],al
9f005094:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005097:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00509d:	42                   	inc    edx
9f00509e:	86 03                	xchg   BYTE PTR [ebx],al
9f0050a0:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f0050a4:	c3                   	ret    
9f0050a5:	41                   	inc    ecx
9f0050a6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0050aa:	04 04                	add    al,0x4
9f0050ac:	24 00                	and    al,0x0
9f0050ae:	00 00                	add    BYTE PTR [eax],al
9f0050b0:	c0 00 00             	rol    BYTE PTR [eax],0x0
9f0050b3:	00 68 b0             	add    BYTE PTR [eax-0x50],ch
9f0050b6:	ff                   	(bad)  
9f0050b7:	ff 97 00 00 00 00    	call   DWORD PTR [edi+0x0]
9f0050bd:	41                   	inc    ecx
9f0050be:	0e                   	push   cs
9f0050bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0050c5:	42                   	inc    edx
9f0050c6:	86 03                	xchg   BYTE PTR [ebx],al
9f0050c8:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f0050cc:	c3                   	ret    
9f0050cd:	41                   	inc    ecx
9f0050ce:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0050d2:	04 04                	add    al,0x4
9f0050d4:	24 00                	and    al,0x0
9f0050d6:	00 00                	add    BYTE PTR [eax],al
9f0050d8:	e8 00 00 00 d7       	call   760050dd <sysEnter_Vector+0x75ed50dd>
9f0050dd:	b0 ff                	mov    al,0xff
9f0050df:	ff 97 00 00 00 00    	call   DWORD PTR [edi+0x0]
9f0050e5:	41                   	inc    ecx
9f0050e6:	0e                   	push   cs
9f0050e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0050ed:	42                   	inc    edx
9f0050ee:	86 03                	xchg   BYTE PTR [ebx],al
9f0050f0:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f0050f4:	c3                   	ret    
9f0050f5:	41                   	inc    ecx
9f0050f6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0050fa:	04 04                	add    al,0x4
9f0050fc:	10 00                	adc    BYTE PTR [eax],al
9f0050fe:	00 00                	add    BYTE PTR [eax],al
9f005100:	10 01                	adc    BYTE PTR [ecx],al
9f005102:	00 00                	add    BYTE PTR [eax],al
9f005104:	e2 fe                	loop   9f005104 <__x86.get_pc_thunk.cx+0x11a>
9f005106:	ff                   	(bad)  
9f005107:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f00510a:	00 00                	add    BYTE PTR [eax],al
9f00510c:	00 00                	add    BYTE PTR [eax],al
9f00510e:	00 00                	add    BYTE PTR [eax],al
9f005110:	20 00                	and    BYTE PTR [eax],al
9f005112:	00 00                	add    BYTE PTR [eax],al
9f005114:	24 01                	and    al,0x1
9f005116:	00 00                	add    BYTE PTR [eax],al
9f005118:	34 b1                	xor    al,0xb1
9f00511a:	ff                   	(bad)  
9f00511b:	ff 77 00             	push   DWORD PTR [edi+0x0]
9f00511e:	00 00                	add    BYTE PTR [eax],al
9f005120:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005123:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005129:	44                   	inc    esp
9f00512a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00512d:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00512e:	c5 c3 0c             	(bad)  
9f005131:	04 04                	add    al,0x4
9f005133:	00 20                	add    BYTE PTR [eax],ah
9f005135:	00 00                	add    BYTE PTR [eax],al
9f005137:	00 48 01             	add    BYTE PTR [eax+0x1],cl
9f00513a:	00 00                	add    BYTE PTR [eax],al
9f00513c:	87 b1 ff ff bb 00    	xchg   DWORD PTR [ecx+0xbbffff],esi
9f005142:	00 00                	add    BYTE PTR [eax],al
9f005144:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005147:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00514d:	44                   	inc    esp
9f00514e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005151:	b3 c5                	mov    bl,0xc5
9f005153:	c3                   	ret    
9f005154:	0c 04                	or     al,0x4
9f005156:	04 00                	add    al,0x0
9f005158:	20 00                	and    BYTE PTR [eax],al
9f00515a:	00 00                	add    BYTE PTR [eax],al
9f00515c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00515d:	01 00                	add    DWORD PTR [eax],eax
9f00515f:	00 1e                	add    BYTE PTR [esi],bl
9f005161:	b2 ff                	mov    dl,0xff
9f005163:	ff                   	(bad)  
9f005164:	bd 00 00 00 00       	mov    ebp,0x0
9f005169:	41                   	inc    ecx
9f00516a:	0e                   	push   cs
9f00516b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005171:	44                   	inc    esp
9f005172:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005175:	b5 c5                	mov    ch,0xc5
9f005177:	c3                   	ret    
9f005178:	0c 04                	or     al,0x4
9f00517a:	04 00                	add    al,0x0
9f00517c:	1c 00                	sbb    al,0x0
9f00517e:	00 00                	add    BYTE PTR [eax],al
9f005180:	90                   	nop
9f005181:	01 00                	add    DWORD PTR [eax],eax
9f005183:	00 b7 b2 ff ff 5c    	add    BYTE PTR [edi+0x5cffffb2],dh
9f005189:	00 00                	add    BYTE PTR [eax],al
9f00518b:	00 00                	add    BYTE PTR [eax],al
9f00518d:	41                   	inc    ecx
9f00518e:	0e                   	push   cs
9f00518f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005195:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
9f005198:	0c 04                	or     al,0x4
9f00519a:	04 00                	add    al,0x0
9f00519c:	1c 00                	sbb    al,0x0
9f00519e:	00 00                	add    BYTE PTR [eax],al
9f0051a0:	b0 01                	mov    al,0x1
9f0051a2:	00 00                	add    BYTE PTR [eax],al
9f0051a4:	f3 b2 ff             	repz mov dl,0xff
9f0051a7:	ff 1a                	call   FWORD PTR [edx]
9f0051a9:	00 00                	add    BYTE PTR [eax],al
9f0051ab:	00 00                	add    BYTE PTR [eax],al
9f0051ad:	41                   	inc    ecx
9f0051ae:	0e                   	push   cs
9f0051af:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0051b5:	56                   	push   esi
9f0051b6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0051b9:	04 00                	add    al,0x0
9f0051bb:	00 20                	add    BYTE PTR [eax],ah
9f0051bd:	00 00                	add    BYTE PTR [eax],al
9f0051bf:	00 d0                	add    al,dl
9f0051c1:	01 00                	add    DWORD PTR [eax],eax
9f0051c3:	00 f0                	add    al,dh
9f0051c5:	b2 ff                	mov    dl,0xff
9f0051c7:	ff                   	(bad)  
9f0051c8:	ba 00 00 00 00       	mov    edx,0x0
9f0051cd:	41                   	inc    ecx
9f0051ce:	0e                   	push   cs
9f0051cf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0051d5:	44                   	inc    esp
9f0051d6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0051d9:	b2 c5                	mov    dl,0xc5
9f0051db:	c3                   	ret    
9f0051dc:	0c 04                	or     al,0x4
9f0051de:	04 00                	add    al,0x0
9f0051e0:	20 00                	and    BYTE PTR [eax],al
9f0051e2:	00 00                	add    BYTE PTR [eax],al
9f0051e4:	f4                   	hlt    
9f0051e5:	01 00                	add    DWORD PTR [eax],eax
9f0051e7:	00 86 b3 ff ff 5a    	add    BYTE PTR [esi+0x5affffb3],al
9f0051ed:	00 00                	add    BYTE PTR [eax],al
9f0051ef:	00 00                	add    BYTE PTR [eax],al
9f0051f1:	41                   	inc    ecx
9f0051f2:	0e                   	push   cs
9f0051f3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0051f9:	44                   	inc    esp
9f0051fa:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0051fd:	52                   	push   edx
9f0051fe:	c5 c3 0c             	(bad)  
9f005201:	04 04                	add    al,0x4
9f005203:	00 20                	add    BYTE PTR [eax],ah
9f005205:	00 00                	add    BYTE PTR [eax],al
9f005207:	00 18                	add    BYTE PTR [eax],bl
9f005209:	02 00                	add    al,BYTE PTR [eax]
9f00520b:	00 bc b3 ff ff 5a 00 	add    BYTE PTR [ebx+esi*4+0x5affff],bh
9f005212:	00 00                	add    BYTE PTR [eax],al
9f005214:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005217:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00521d:	44                   	inc    esp
9f00521e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005221:	52                   	push   edx
9f005222:	c5 c3 0c             	(bad)  
9f005225:	04 04                	add    al,0x4
9f005227:	00 20                	add    BYTE PTR [eax],ah
9f005229:	00 00                	add    BYTE PTR [eax],al
9f00522b:	00 3c 02             	add    BYTE PTR [edx+eax*1],bh
9f00522e:	00 00                	add    BYTE PTR [eax],al
9f005230:	f4                   	hlt    
9f005231:	b3 ff                	mov    bl,0xff
9f005233:	ff aa 00 00 00 00    	jmp    FWORD PTR [edx+0x0]
9f005239:	41                   	inc    ecx
9f00523a:	0e                   	push   cs
9f00523b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005241:	44                   	inc    esp
9f005242:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005245:	a2 c5 c3 0c 04       	mov    ds:0x40cc3c5,al
9f00524a:	04 00                	add    al,0x0
9f00524c:	1c 00                	sbb    al,0x0
9f00524e:	00 00                	add    BYTE PTR [eax],al
9f005250:	60                   	pusha  
9f005251:	02 00                	add    al,BYTE PTR [eax]
9f005253:	00 7a b4             	add    BYTE PTR [edx-0x4c],bh
9f005256:	ff                   	(bad)  
9f005257:	ff 23                	jmp    DWORD PTR [ebx]
9f005259:	00 00                	add    BYTE PTR [eax],al
9f00525b:	00 00                	add    BYTE PTR [eax],al
9f00525d:	41                   	inc    ecx
9f00525e:	0e                   	push   cs
9f00525f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005265:	5f                   	pop    edi
9f005266:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005269:	04 00                	add    al,0x0
9f00526b:	00 20                	add    BYTE PTR [eax],ah
9f00526d:	00 00                	add    BYTE PTR [eax],al
9f00526f:	00 80 02 00 00 7d    	add    BYTE PTR [eax+0x7d000002],al
9f005275:	b4 ff                	mov    ah,0xff
9f005277:	ff c1                	inc    ecx
9f005279:	01 00                	add    DWORD PTR [eax],eax
9f00527b:	00 00                	add    BYTE PTR [eax],al
9f00527d:	41                   	inc    ecx
9f00527e:	0e                   	push   cs
9f00527f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005285:	44                   	inc    esp
9f005286:	83 03 03             	add    DWORD PTR [ebx],0x3
9f005289:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
9f00528e:	04 04                	add    al,0x4
9f005290:	20 00                	and    BYTE PTR [eax],al
9f005292:	00 00                	add    BYTE PTR [eax],al
9f005294:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f005295:	02 00                	add    al,BYTE PTR [eax]
9f005297:	00 1a                	add    BYTE PTR [edx],bl
9f005299:	b6 ff                	mov    dh,0xff
9f00529b:	ff 2c 00             	jmp    FWORD PTR [eax+eax*1]
9f00529e:	00 00                	add    BYTE PTR [eax],al
9f0052a0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0052a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0052a9:	44                   	inc    esp
9f0052aa:	83 03 64             	add    DWORD PTR [ebx],0x64
9f0052ad:	c5 c3 0c             	(bad)  
9f0052b0:	04 04                	add    al,0x4
9f0052b2:	00 00                	add    BYTE PTR [eax],al
9f0052b4:	1c 00                	sbb    al,0x0
9f0052b6:	00 00                	add    BYTE PTR [eax],al
9f0052b8:	c8 02 00 00          	enter  0x2,0x0
9f0052bc:	22 b6 ff ff 23 00    	and    dh,BYTE PTR [esi+0x23ffff]
9f0052c2:	00 00                	add    BYTE PTR [eax],al
9f0052c4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0052c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0052cd:	5f                   	pop    edi
9f0052ce:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0052d1:	04 00                	add    al,0x0
9f0052d3:	00 20                	add    BYTE PTR [eax],ah
9f0052d5:	00 00                	add    BYTE PTR [eax],al
9f0052d7:	00 e8                	add    al,ch
9f0052d9:	02 00                	add    al,BYTE PTR [eax]
9f0052db:	00 28                	add    BYTE PTR [eax],ch
9f0052dd:	b6 ff                	mov    dh,0xff
9f0052df:	ff 31                	push   DWORD PTR [ecx]
9f0052e1:	00 00                	add    BYTE PTR [eax],al
9f0052e3:	00 00                	add    BYTE PTR [eax],al
9f0052e5:	41                   	inc    ecx
9f0052e6:	0e                   	push   cs
9f0052e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0052ed:	44                   	inc    esp
9f0052ee:	83 03 69             	add    DWORD PTR [ebx],0x69
9f0052f1:	c5 c3 0c             	(bad)  
9f0052f4:	04 04                	add    al,0x4
9f0052f6:	00 00                	add    BYTE PTR [eax],al
9f0052f8:	1c 00                	sbb    al,0x0
9f0052fa:	00 00                	add    BYTE PTR [eax],al
9f0052fc:	0c 03                	or     al,0x3
9f0052fe:	00 00                	add    BYTE PTR [eax],al
9f005300:	35 b6 ff ff 26       	xor    eax,0x26ffffb6
9f005305:	00 00                	add    BYTE PTR [eax],al
9f005307:	00 00                	add    BYTE PTR [eax],al
9f005309:	41                   	inc    ecx
9f00530a:	0e                   	push   cs
9f00530b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005311:	62                   	(bad)  
9f005312:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005315:	04 00                	add    al,0x0
9f005317:	00 20                	add    BYTE PTR [eax],ah
9f005319:	00 00                	add    BYTE PTR [eax],al
9f00531b:	00 2c 03             	add    BYTE PTR [ebx+eax*1],ch
9f00531e:	00 00                	add    BYTE PTR [eax],al
9f005320:	3b b6 ff ff 2c 00    	cmp    esi,DWORD PTR [esi+0x2cffff]
9f005326:	00 00                	add    BYTE PTR [eax],al
9f005328:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00532b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005331:	44                   	inc    esp
9f005332:	83 03 64             	add    DWORD PTR [ebx],0x64
9f005335:	c5 c3 0c             	(bad)  
9f005338:	04 04                	add    al,0x4
9f00533a:	00 00                	add    BYTE PTR [eax],al
9f00533c:	1c 00                	sbb    al,0x0
9f00533e:	00 00                	add    BYTE PTR [eax],al
9f005340:	50                   	push   eax
9f005341:	03 00                	add    eax,DWORD PTR [eax]
9f005343:	00 43 b6             	add    BYTE PTR [ebx-0x4a],al
9f005346:	ff                   	(bad)  
9f005347:	ff 23                	jmp    DWORD PTR [ebx]
9f005349:	00 00                	add    BYTE PTR [eax],al
9f00534b:	00 00                	add    BYTE PTR [eax],al
9f00534d:	41                   	inc    ecx
9f00534e:	0e                   	push   cs
9f00534f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005355:	5f                   	pop    edi
9f005356:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005359:	04 00                	add    al,0x0
9f00535b:	00 20                	add    BYTE PTR [eax],ah
9f00535d:	00 00                	add    BYTE PTR [eax],al
9f00535f:	00 70 03             	add    BYTE PTR [eax+0x3],dh
9f005362:	00 00                	add    BYTE PTR [eax],al
9f005364:	46                   	inc    esi
9f005365:	b6 ff                	mov    dh,0xff
9f005367:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f00536a:	00 00                	add    BYTE PTR [eax],al
9f00536c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00536f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005375:	44                   	inc    esp
9f005376:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005379:	51                   	push   ecx
9f00537a:	c5 c3 0c             	(bad)  
9f00537d:	04 04                	add    al,0x4
9f00537f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f005382:	00 00                	add    BYTE PTR [eax],al
9f005384:	94                   	xchg   esp,eax
9f005385:	03 00                	add    eax,DWORD PTR [eax]
9f005387:	00 7b b6             	add    BYTE PTR [ebx-0x4a],bh
9f00538a:	ff                   	(bad)  
9f00538b:	ff 93 00 00 00 00    	call   DWORD PTR [ebx+0x0]
9f005391:	41                   	inc    ecx
9f005392:	0e                   	push   cs
9f005393:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005399:	45                   	inc    ebp
9f00539a:	86 03                	xchg   BYTE PTR [ebx],al
9f00539c:	83 04 02 88          	add    DWORD PTR [edx+eax*1],0xffffff88
9f0053a0:	c3                   	ret    
9f0053a1:	41                   	inc    ecx
9f0053a2:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0053a6:	04 04                	add    al,0x4
9f0053a8:	20 00                	and    BYTE PTR [eax],al
9f0053aa:	00 00                	add    BYTE PTR [eax],al
9f0053ac:	bc 03 00 00 e6       	mov    esp,0xe6000003
9f0053b1:	b6 ff                	mov    dh,0xff
9f0053b3:	ff 2a                	jmp    FWORD PTR [edx]
9f0053b5:	00 00                	add    BYTE PTR [eax],al
9f0053b7:	00 00                	add    BYTE PTR [eax],al
9f0053b9:	41                   	inc    ecx
9f0053ba:	0e                   	push   cs
9f0053bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0053c1:	44                   	inc    esp
9f0053c2:	83 03 62             	add    DWORD PTR [ebx],0x62
9f0053c5:	c5 c3 0c             	(bad)  
9f0053c8:	04 04                	add    al,0x4
9f0053ca:	00 00                	add    BYTE PTR [eax],al
9f0053cc:	1c 00                	sbb    al,0x0
9f0053ce:	00 00                	add    BYTE PTR [eax],al
9f0053d0:	e0 03                	loopne 9f0053d5 <__x86.get_pc_thunk.cx+0x3eb>
9f0053d2:	00 00                	add    BYTE PTR [eax],al
9f0053d4:	ec                   	in     al,dx
9f0053d5:	b6 ff                	mov    dh,0xff
9f0053d7:	ff 20                	jmp    DWORD PTR [eax]
9f0053d9:	00 00                	add    BYTE PTR [eax],al
9f0053db:	00 00                	add    BYTE PTR [eax],al
9f0053dd:	41                   	inc    ecx
9f0053de:	0e                   	push   cs
9f0053df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0053e5:	5c                   	pop    esp
9f0053e6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0053e9:	04 00                	add    al,0x0
9f0053eb:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0053ee:	00 00                	add    BYTE PTR [eax],al
9f0053f0:	00 04 00             	add    BYTE PTR [eax+eax*1],al
9f0053f3:	00 ec                	add    ah,ch
9f0053f5:	b6 ff                	mov    dh,0xff
9f0053f7:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f0053fd:	41                   	inc    ecx
9f0053fe:	0e                   	push   cs
9f0053ff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005405:	42                   	inc    edx
9f005406:	86 03                	xchg   BYTE PTR [ebx],al
9f005408:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f00540f:	c5 
9f005410:	0c 04                	or     al,0x4
9f005412:	04 00                	add    al,0x0
9f005414:	1c 00                	sbb    al,0x0
9f005416:	00 00                	add    BYTE PTR [eax],al
9f005418:	28 04 00             	sub    BYTE PTR [eax+eax*1],al
9f00541b:	00 f9                	add    cl,bh
9f00541d:	b6 ff                	mov    dh,0xff
9f00541f:	ff 26                	jmp    DWORD PTR [esi]
9f005421:	00 00                	add    BYTE PTR [eax],al
9f005423:	00 00                	add    BYTE PTR [eax],al
9f005425:	41                   	inc    ecx
9f005426:	0e                   	push   cs
9f005427:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00542d:	62                   	(bad)  
9f00542e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005431:	04 00                	add    al,0x0
9f005433:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f005436:	00 00                	add    BYTE PTR [eax],al
9f005438:	48                   	dec    eax
9f005439:	04 00                	add    al,0x0
9f00543b:	00 ff                	add    bh,bh
9f00543d:	b6 ff                	mov    dh,0xff
9f00543f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f005445:	41                   	inc    ecx
9f005446:	0e                   	push   cs
9f005447:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00544d:	42                   	inc    edx
9f00544e:	86 03                	xchg   BYTE PTR [ebx],al
9f005450:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f005457:	c5 
9f005458:	0c 04                	or     al,0x4
9f00545a:	04 00                	add    al,0x0
9f00545c:	1c 00                	sbb    al,0x0
9f00545e:	00 00                	add    BYTE PTR [eax],al
9f005460:	70 04                	jo     9f005466 <__x86.get_pc_thunk.cx+0x47c>
9f005462:	00 00                	add    BYTE PTR [eax],al
9f005464:	0c b7                	or     al,0xb7
9f005466:	ff                   	(bad)  
9f005467:	ff 26                	jmp    DWORD PTR [esi]
9f005469:	00 00                	add    BYTE PTR [eax],al
9f00546b:	00 00                	add    BYTE PTR [eax],al
9f00546d:	41                   	inc    ecx
9f00546e:	0e                   	push   cs
9f00546f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005475:	62                   	(bad)  
9f005476:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005479:	04 00                	add    al,0x0
9f00547b:	00 20                	add    BYTE PTR [eax],ah
9f00547d:	00 00                	add    BYTE PTR [eax],al
9f00547f:	00 90 04 00 00 12    	add    BYTE PTR [eax+0x12000004],dl
9f005485:	b7 ff                	mov    bh,0xff
9f005487:	ff 2e                	jmp    FWORD PTR [esi]
9f005489:	00 00                	add    BYTE PTR [eax],al
9f00548b:	00 00                	add    BYTE PTR [eax],al
9f00548d:	41                   	inc    ecx
9f00548e:	0e                   	push   cs
9f00548f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005495:	44                   	inc    esp
9f005496:	83 03 66             	add    DWORD PTR [ebx],0x66
9f005499:	c5 c3 0c             	(bad)  
9f00549c:	04 04                	add    al,0x4
9f00549e:	00 00                	add    BYTE PTR [eax],al
9f0054a0:	1c 00                	sbb    al,0x0
9f0054a2:	00 00                	add    BYTE PTR [eax],al
9f0054a4:	b4 04                	mov    ah,0x4
9f0054a6:	00 00                	add    BYTE PTR [eax],al
9f0054a8:	1c b7                	sbb    al,0xb7
9f0054aa:	ff                   	(bad)  
9f0054ab:	ff 26                	jmp    DWORD PTR [esi]
9f0054ad:	00 00                	add    BYTE PTR [eax],al
9f0054af:	00 00                	add    BYTE PTR [eax],al
9f0054b1:	41                   	inc    ecx
9f0054b2:	0e                   	push   cs
9f0054b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0054b9:	62                   	(bad)  
9f0054ba:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0054bd:	04 00                	add    al,0x0
9f0054bf:	00 20                	add    BYTE PTR [eax],ah
9f0054c1:	00 00                	add    BYTE PTR [eax],al
9f0054c3:	00 d4                	add    ah,dl
9f0054c5:	04 00                	add    al,0x0
9f0054c7:	00 22                	add    BYTE PTR [edx],ah
9f0054c9:	b7 ff                	mov    bh,0xff
9f0054cb:	ff 2d 00 00 00 00    	jmp    FWORD PTR ds:0x0
9f0054d1:	41                   	inc    ecx
9f0054d2:	0e                   	push   cs
9f0054d3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0054d9:	44                   	inc    esp
9f0054da:	83 03 65             	add    DWORD PTR [ebx],0x65
9f0054dd:	c5 c3 0c             	(bad)  
9f0054e0:	04 04                	add    al,0x4
9f0054e2:	00 00                	add    BYTE PTR [eax],al
9f0054e4:	1c 00                	sbb    al,0x0
9f0054e6:	00 00                	add    BYTE PTR [eax],al
9f0054e8:	f8                   	clc    
9f0054e9:	04 00                	add    al,0x0
9f0054eb:	00 2b                	add    BYTE PTR [ebx],ch
9f0054ed:	b7 ff                	mov    bh,0xff
9f0054ef:	ff 23                	jmp    DWORD PTR [ebx]
9f0054f1:	00 00                	add    BYTE PTR [eax],al
9f0054f3:	00 00                	add    BYTE PTR [eax],al
9f0054f5:	41                   	inc    ecx
9f0054f6:	0e                   	push   cs
9f0054f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0054fd:	5f                   	pop    edi
9f0054fe:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005501:	04 00                	add    al,0x0
9f005503:	00 20                	add    BYTE PTR [eax],ah
9f005505:	00 00                	add    BYTE PTR [eax],al
9f005507:	00 18                	add    BYTE PTR [eax],bl
9f005509:	05 00 00 2e b7       	add    eax,0xb72e0000
9f00550e:	ff                   	(bad)  
9f00550f:	ff 29                	jmp    FWORD PTR [ecx]
9f005511:	03 00                	add    eax,DWORD PTR [eax]
9f005513:	00 00                	add    BYTE PTR [eax],al
9f005515:	41                   	inc    ecx
9f005516:	0e                   	push   cs
9f005517:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00551d:	44                   	inc    esp
9f00551e:	83 03 03             	add    DWORD PTR [ebx],0x3
9f005521:	21 03                	and    DWORD PTR [ebx],eax
9f005523:	c5 c3 0c             	(bad)  
9f005526:	04 04                	add    al,0x4
9f005528:	20 00                	and    BYTE PTR [eax],al
9f00552a:	00 00                	add    BYTE PTR [eax],al
9f00552c:	3c 05                	cmp    al,0x5
9f00552e:	00 00                	add    BYTE PTR [eax],al
9f005530:	33 ba ff ff 29 00    	xor    edi,DWORD PTR [edx+0x29ffff]
9f005536:	00 00                	add    BYTE PTR [eax],al
9f005538:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00553b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005541:	44                   	inc    esp
9f005542:	83 03 61             	add    DWORD PTR [ebx],0x61
9f005545:	c5 c3 0c             	(bad)  
9f005548:	04 04                	add    al,0x4
9f00554a:	00 00                	add    BYTE PTR [eax],al
9f00554c:	1c 00                	sbb    al,0x0
9f00554e:	00 00                	add    BYTE PTR [eax],al
9f005550:	60                   	pusha  
9f005551:	05 00 00 38 ba       	add    eax,0xba380000
9f005556:	ff                   	(bad)  
9f005557:	ff 20                	jmp    DWORD PTR [eax]
9f005559:	00 00                	add    BYTE PTR [eax],al
9f00555b:	00 00                	add    BYTE PTR [eax],al
9f00555d:	41                   	inc    ecx
9f00555e:	0e                   	push   cs
9f00555f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005565:	5c                   	pop    esp
9f005566:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005569:	04 00                	add    al,0x0
9f00556b:	00 20                	add    BYTE PTR [eax],ah
9f00556d:	00 00                	add    BYTE PTR [eax],al
9f00556f:	00 80 05 00 00 38    	add    BYTE PTR [eax+0x38000005],al
9f005575:	ba ff ff c1 01       	mov    edx,0x1c1ffff
9f00557a:	00 00                	add    BYTE PTR [eax],al
9f00557c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00557f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005585:	44                   	inc    esp
9f005586:	83 03 03             	add    DWORD PTR [ebx],0x3
9f005589:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
9f00558e:	04 04                	add    al,0x4
9f005590:	1c 00                	sbb    al,0x0
9f005592:	00 00                	add    BYTE PTR [eax],al
9f005594:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f005595:	05 00 00 d5 bb       	add    eax,0xbbd50000
9f00559a:	ff                   	(bad)  
9f00559b:	ff 26                	jmp    DWORD PTR [esi]
9f00559d:	00 00                	add    BYTE PTR [eax],al
9f00559f:	00 00                	add    BYTE PTR [eax],al
9f0055a1:	41                   	inc    ecx
9f0055a2:	0e                   	push   cs
9f0055a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0055a9:	62                   	(bad)  
9f0055aa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0055ad:	04 00                	add    al,0x0
9f0055af:	00 20                	add    BYTE PTR [eax],ah
9f0055b1:	00 00                	add    BYTE PTR [eax],al
9f0055b3:	00 c4                	add    ah,al
9f0055b5:	05 00 00 db bb       	add    eax,0xbbdb0000
9f0055ba:	ff                   	(bad)  
9f0055bb:	ff 29                	jmp    FWORD PTR [ecx]
9f0055bd:	00 00                	add    BYTE PTR [eax],al
9f0055bf:	00 00                	add    BYTE PTR [eax],al
9f0055c1:	41                   	inc    ecx
9f0055c2:	0e                   	push   cs
9f0055c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0055c9:	44                   	inc    esp
9f0055ca:	83 03 61             	add    DWORD PTR [ebx],0x61
9f0055cd:	c5 c3 0c             	(bad)  
9f0055d0:	04 04                	add    al,0x4
9f0055d2:	00 00                	add    BYTE PTR [eax],al
9f0055d4:	20 00                	and    BYTE PTR [eax],al
9f0055d6:	00 00                	add    BYTE PTR [eax],al
9f0055d8:	e8 05 00 00 e0       	call   7f0055e2 <sysEnter_Vector+0x7eed55e2>
9f0055dd:	bb ff ff 26 00       	mov    ebx,0x26ffff
9f0055e2:	00 00                	add    BYTE PTR [eax],al
9f0055e4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0055e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0055ed:	41                   	inc    ecx
9f0055ee:	83 03 60             	add    DWORD PTR [ebx],0x60
9f0055f1:	c3                   	ret    
9f0055f2:	41                   	inc    ecx
9f0055f3:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0055f6:	04 00                	add    al,0x0
9f0055f8:	20 00                	and    BYTE PTR [eax],al
9f0055fa:	00 00                	add    BYTE PTR [eax],al
9f0055fc:	0c 06                	or     al,0x6
9f0055fe:	00 00                	add    BYTE PTR [eax],al
9f005600:	e2 bb                	loop   9f0055bd <__x86.get_pc_thunk.cx+0x5d3>
9f005602:	ff                   	(bad)  
9f005603:	ff 43 00             	inc    DWORD PTR [ebx+0x0]
9f005606:	00 00                	add    BYTE PTR [eax],al
9f005608:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00560b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005611:	44                   	inc    esp
9f005612:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f005615:	c3                   	ret    
9f005616:	41                   	inc    ecx
9f005617:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00561a:	04 00                	add    al,0x0
9f00561c:	20 00                	and    BYTE PTR [eax],al
9f00561e:	00 00                	add    BYTE PTR [eax],al
9f005620:	30 06                	xor    BYTE PTR [esi],al
9f005622:	00 00                	add    BYTE PTR [eax],al
9f005624:	01 bc ff ff 43 00 00 	add    DWORD PTR [edi+edi*8+0x43ff],edi
9f00562b:	00 00                	add    BYTE PTR [eax],al
9f00562d:	41                   	inc    ecx
9f00562e:	0e                   	push   cs
9f00562f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005635:	44                   	inc    esp
9f005636:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f005639:	c3                   	ret    
9f00563a:	41                   	inc    ecx
9f00563b:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00563e:	04 00                	add    al,0x0
9f005640:	20 00                	and    BYTE PTR [eax],al
9f005642:	00 00                	add    BYTE PTR [eax],al
9f005644:	54                   	push   esp
9f005645:	06                   	push   es
9f005646:	00 00                	add    BYTE PTR [eax],al
9f005648:	20 bc ff ff bd 00 00 	and    BYTE PTR [edi+edi*8+0xbdff],bh
9f00564f:	00 00                	add    BYTE PTR [eax],al
9f005651:	41                   	inc    ecx
9f005652:	0e                   	push   cs
9f005653:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005659:	44                   	inc    esp
9f00565a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00565d:	b5 c5                	mov    ch,0xc5
9f00565f:	c3                   	ret    
9f005660:	0c 04                	or     al,0x4
9f005662:	04 00                	add    al,0x0
9f005664:	24 00                	and    al,0x0
9f005666:	00 00                	add    BYTE PTR [eax],al
9f005668:	78 06                	js     9f005670 <__x86.get_pc_thunk.cx+0x686>
9f00566a:	00 00                	add    BYTE PTR [eax],al
9f00566c:	bc bc ff ff 3a       	mov    esp,0x3affffbc
9f005671:	00 00                	add    BYTE PTR [eax],al
9f005673:	00 00                	add    BYTE PTR [eax],al
9f005675:	41                   	inc    ecx
9f005676:	0e                   	push   cs
9f005677:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00567d:	45                   	inc    ebp
9f00567e:	86 03                	xchg   BYTE PTR [ebx],al
9f005680:	83 04 6f c3          	add    DWORD PTR [edi+ebp*2],0xffffffc3
9f005684:	41                   	inc    ecx
9f005685:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005689:	04 04                	add    al,0x4
9f00568b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00568e:	00 00                	add    BYTE PTR [eax],al
9f005690:	a0 06 00 00 ce       	mov    al,ds:0xce000006
9f005695:	bc ff ff 3c 00       	mov    esp,0x3cffff
9f00569a:	00 00                	add    BYTE PTR [eax],al
9f00569c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00569f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0056a5:	45                   	inc    ebp
9f0056a6:	86 03                	xchg   BYTE PTR [ebx],al
9f0056a8:	83 04 71 c3          	add    DWORD PTR [ecx+esi*2],0xffffffc3
9f0056ac:	41                   	inc    ecx
9f0056ad:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0056b1:	04 04                	add    al,0x4
9f0056b3:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0056b6:	00 00                	add    BYTE PTR [eax],al
9f0056b8:	c8 06 00 00          	enter  0x6,0x0
9f0056bc:	e2 bc                	loop   9f00567a <__x86.get_pc_thunk.cx+0x690>
9f0056be:	ff                   	(bad)  
9f0056bf:	ff                   	(bad)  
9f0056c0:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f0056c3:	00 00                	add    BYTE PTR [eax],al
9f0056c5:	41                   	inc    ecx
9f0056c6:	0e                   	push   cs
9f0056c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0056cd:	45                   	inc    ebp
9f0056ce:	86 03                	xchg   BYTE PTR [ebx],al
9f0056d0:	83 04 73 c3          	add    DWORD PTR [ebx+esi*2],0xffffffc3
9f0056d4:	41                   	inc    ecx
9f0056d5:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0056d9:	04 04                	add    al,0x4
9f0056db:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0056de:	00 00                	add    BYTE PTR [eax],al
9f0056e0:	f0 06                	lock push es
9f0056e2:	00 00                	add    BYTE PTR [eax],al
9f0056e4:	f8                   	clc    
9f0056e5:	bc ff ff 40 00       	mov    esp,0x40ffff
9f0056ea:	00 00                	add    BYTE PTR [eax],al
9f0056ec:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0056ef:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0056f5:	45                   	inc    ebp
9f0056f6:	86 03                	xchg   BYTE PTR [ebx],al
9f0056f8:	83 04 75 c3 41 c6 41 	add    DWORD PTR [esi*2+0x41c641c3],0xffffffc5
9f0056ff:	c5 
9f005700:	0c 04                	or     al,0x4
9f005702:	04 00                	add    al,0x0
9f005704:	24 00                	and    al,0x0
9f005706:	00 00                	add    BYTE PTR [eax],al
9f005708:	18 07                	sbb    BYTE PTR [edi],al
9f00570a:	00 00                	add    BYTE PTR [eax],al
9f00570c:	10 bd ff ff 42 00    	adc    BYTE PTR [ebp+0x42ffff],bh
9f005712:	00 00                	add    BYTE PTR [eax],al
9f005714:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005717:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00571d:	45                   	inc    ebp
9f00571e:	86 03                	xchg   BYTE PTR [ebx],al
9f005720:	83 04 77 c3          	add    DWORD PTR [edi+esi*2],0xffffffc3
9f005724:	41                   	inc    ecx
9f005725:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005729:	04 04                	add    al,0x4
9f00572b:	00 20                	add    BYTE PTR [eax],ah
9f00572d:	00 00                	add    BYTE PTR [eax],al
9f00572f:	00 40 07             	add    BYTE PTR [eax+0x7],al
9f005732:	00 00                	add    BYTE PTR [eax],al
9f005734:	2a bd ff ff cb 00    	sub    bh,BYTE PTR [ebp+0xcbffff]
9f00573a:	00 00                	add    BYTE PTR [eax],al
9f00573c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00573f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005745:	44                   	inc    esp
9f005746:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005749:	c3                   	ret    
9f00574a:	c5 c3 0c             	(bad)  
9f00574d:	04 04                	add    al,0x4
9f00574f:	00 20                	add    BYTE PTR [eax],ah
9f005751:	00 00                	add    BYTE PTR [eax],al
9f005753:	00 64 07 00          	add    BYTE PTR [edi+eax*1+0x0],ah
9f005757:	00 d1                	add    cl,dl
9f005759:	bd ff ff 23 00       	mov    ebp,0x23ffff
9f00575e:	00 00                	add    BYTE PTR [eax],al
9f005760:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005763:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005769:	44                   	inc    esp
9f00576a:	83 03 5a             	add    DWORD PTR [ebx],0x5a
9f00576d:	c3                   	ret    
9f00576e:	41                   	inc    ecx
9f00576f:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005772:	04 00                	add    al,0x0
9f005774:	20 00                	and    BYTE PTR [eax],al
9f005776:	00 00                	add    BYTE PTR [eax],al
9f005778:	88 07                	mov    BYTE PTR [edi],al
9f00577a:	00 00                	add    BYTE PTR [eax],al
9f00577c:	d0 bd ff ff 59 00    	sar    BYTE PTR [ebp+0x59ffff],1
9f005782:	00 00                	add    BYTE PTR [eax],al
9f005784:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005787:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00578d:	44                   	inc    esp
9f00578e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005791:	51                   	push   ecx
9f005792:	c5 c3 0c             	(bad)  
9f005795:	04 04                	add    al,0x4
9f005797:	00 20                	add    BYTE PTR [eax],ah
9f005799:	00 00                	add    BYTE PTR [eax],al
9f00579b:	00 ac 07 00 00 05 be 	add    BYTE PTR [edi+eax*1-0x41fb0000],ch
9f0057a2:	ff                   	(bad)  
9f0057a3:	ff 54 00 00          	call   DWORD PTR [eax+eax*1+0x0]
9f0057a7:	00 00                	add    BYTE PTR [eax],al
9f0057a9:	41                   	inc    ecx
9f0057aa:	0e                   	push   cs
9f0057ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0057b1:	44                   	inc    esp
9f0057b2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0057b5:	4c                   	dec    esp
9f0057b6:	c5 c3 0c             	(bad)  
9f0057b9:	04 04                	add    al,0x4
9f0057bb:	00 20                	add    BYTE PTR [eax],ah
9f0057bd:	00 00                	add    BYTE PTR [eax],al
9f0057bf:	00 d0                	add    al,dl
9f0057c1:	07                   	pop    es
9f0057c2:	00 00                	add    BYTE PTR [eax],al
9f0057c4:	35 be ff ff 54       	xor    eax,0x54ffffbe
9f0057c9:	00 00                	add    BYTE PTR [eax],al
9f0057cb:	00 00                	add    BYTE PTR [eax],al
9f0057cd:	41                   	inc    ecx
9f0057ce:	0e                   	push   cs
9f0057cf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0057d5:	44                   	inc    esp
9f0057d6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0057d9:	4c                   	dec    esp
9f0057da:	c5 c3 0c             	(bad)  
9f0057dd:	04 04                	add    al,0x4
9f0057df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0057e2:	00 00                	add    BYTE PTR [eax],al
9f0057e4:	f4                   	hlt    
9f0057e5:	07                   	pop    es
9f0057e6:	00 00                	add    BYTE PTR [eax],al
9f0057e8:	65                   	gs
9f0057e9:	be ff ff 34 00       	mov    esi,0x34ffff
9f0057ee:	00 00                	add    BYTE PTR [eax],al
9f0057f0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0057f3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0057f9:	70 c5                	jo     9f0057c0 <__x86.get_pc_thunk.cx+0x7d6>
9f0057fb:	0c 04                	or     al,0x4
9f0057fd:	04 00                	add    al,0x0
9f0057ff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005802:	00 00                	add    BYTE PTR [eax],al
9f005804:	14 08                	adc    al,0x8
9f005806:	00 00                	add    BYTE PTR [eax],al
9f005808:	79 be                	jns    9f0057c8 <__x86.get_pc_thunk.cx+0x7de>
9f00580a:	ff                   	(bad)  
9f00580b:	ff 37                	push   DWORD PTR [edi]
9f00580d:	00 00                	add    BYTE PTR [eax],al
9f00580f:	00 00                	add    BYTE PTR [eax],al
9f005811:	41                   	inc    ecx
9f005812:	0e                   	push   cs
9f005813:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005819:	73 c5                	jae    9f0057e0 <__x86.get_pc_thunk.cx+0x7f6>
9f00581b:	0c 04                	or     al,0x4
9f00581d:	04 00                	add    al,0x0
9f00581f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005822:	00 00                	add    BYTE PTR [eax],al
9f005824:	34 08                	xor    al,0x8
9f005826:	00 00                	add    BYTE PTR [eax],al
9f005828:	90                   	nop
9f005829:	be ff ff 37 00       	mov    esi,0x37ffff
9f00582e:	00 00                	add    BYTE PTR [eax],al
9f005830:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005833:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005839:	73 c5                	jae    9f005800 <__x86.get_pc_thunk.cx+0x816>
9f00583b:	0c 04                	or     al,0x4
9f00583d:	04 00                	add    al,0x0
9f00583f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f005842:	00 00                	add    BYTE PTR [eax],al
9f005844:	54                   	push   esp
9f005845:	08 00                	or     BYTE PTR [eax],al
9f005847:	00 a7 be ff ff 88    	add    BYTE PTR [edi-0x77000042],ah
9f00584d:	00 00                	add    BYTE PTR [eax],al
9f00584f:	00 00                	add    BYTE PTR [eax],al
9f005851:	41                   	inc    ecx
9f005852:	0e                   	push   cs
9f005853:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005859:	45                   	inc    ebp
9f00585a:	86 03                	xchg   BYTE PTR [ebx],al
9f00585c:	83 04 02 7d          	add    DWORD PTR [edx+eax*1],0x7d
9f005860:	c3                   	ret    
9f005861:	41                   	inc    ecx
9f005862:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005866:	04 04                	add    al,0x4
9f005868:	24 00                	and    al,0x0
9f00586a:	00 00                	add    BYTE PTR [eax],al
9f00586c:	7c 08                	jl     9f005876 <__x86.get_pc_thunk.cx+0x88c>
9f00586e:	00 00                	add    BYTE PTR [eax],al
9f005870:	07                   	pop    es
9f005871:	bf ff ff 70 00       	mov    edi,0x70ffff
9f005876:	00 00                	add    BYTE PTR [eax],al
9f005878:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00587b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005881:	45                   	inc    ebp
9f005882:	86 03                	xchg   BYTE PTR [ebx],al
9f005884:	83 04 02 65          	add    DWORD PTR [edx+eax*1],0x65
9f005888:	c3                   	ret    
9f005889:	41                   	inc    ecx
9f00588a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00588e:	04 04                	add    al,0x4
9f005890:	24 00                	and    al,0x0
9f005892:	00 00                	add    BYTE PTR [eax],al
9f005894:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f005895:	08 00                	or     BYTE PTR [eax],al
9f005897:	00 4f bf             	add    BYTE PTR [edi-0x41],cl
9f00589a:	ff                   	(bad)  
9f00589b:	ff 70 00             	push   DWORD PTR [eax+0x0]
9f00589e:	00 00                	add    BYTE PTR [eax],al
9f0058a0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0058a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0058a9:	45                   	inc    ebp
9f0058aa:	86 03                	xchg   BYTE PTR [ebx],al
9f0058ac:	83 04 02 65          	add    DWORD PTR [edx+eax*1],0x65
9f0058b0:	c3                   	ret    
9f0058b1:	41                   	inc    ecx
9f0058b2:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0058b6:	04 04                	add    al,0x4
9f0058b8:	1c 00                	sbb    al,0x0
9f0058ba:	00 00                	add    BYTE PTR [eax],al
9f0058bc:	cc                   	int3   
9f0058bd:	08 00                	or     BYTE PTR [eax],al
9f0058bf:	00 97 bf ff ff 1d    	add    BYTE PTR [edi+0x1dffffbf],dl
9f0058c5:	00 00                	add    BYTE PTR [eax],al
9f0058c7:	00 00                	add    BYTE PTR [eax],al
9f0058c9:	41                   	inc    ecx
9f0058ca:	0e                   	push   cs
9f0058cb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0058d1:	59                   	pop    ecx
9f0058d2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0058d5:	04 00                	add    al,0x0
9f0058d7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0058da:	00 00                	add    BYTE PTR [eax],al
9f0058dc:	ec                   	in     al,dx
9f0058dd:	08 00                	or     BYTE PTR [eax],al
9f0058df:	00 94 bf ff ff 29 00 	add    BYTE PTR [edi+edi*4+0x29ffff],dl
9f0058e6:	00 00                	add    BYTE PTR [eax],al
9f0058e8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0058eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0058f1:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f0058f5:	04 00                	add    al,0x0
9f0058f7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0058fa:	00 00                	add    BYTE PTR [eax],al
9f0058fc:	0c 09                	or     al,0x9
9f0058fe:	00 00                	add    BYTE PTR [eax],al
9f005900:	9d                   	popf   
9f005901:	bf ff ff 29 00       	mov    edi,0x29ffff
9f005906:	00 00                	add    BYTE PTR [eax],al
9f005908:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00590b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005911:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f005915:	04 00                	add    al,0x0
9f005917:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00591a:	00 00                	add    BYTE PTR [eax],al
9f00591c:	2c 09                	sub    al,0x9
9f00591e:	00 00                	add    BYTE PTR [eax],al
9f005920:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
9f005921:	bf ff ff 4c 00       	mov    edi,0x4cffff
9f005926:	00 00                	add    BYTE PTR [eax],al
9f005928:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00592b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005931:	02 48 c5             	add    cl,BYTE PTR [eax-0x3b]
9f005934:	0c 04                	or     al,0x4
9f005936:	04 00                	add    al,0x0
9f005938:	20 00                	and    BYTE PTR [eax],al
9f00593a:	00 00                	add    BYTE PTR [eax],al
9f00593c:	4c                   	dec    esp
9f00593d:	09 00                	or     DWORD PTR [eax],eax
9f00593f:	00 d2                	add    dl,dl
9f005941:	bf ff ff f4 01       	mov    edi,0x1f4ffff
9f005946:	00 00                	add    BYTE PTR [eax],al
9f005948:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00594b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005951:	44                   	inc    esp
9f005952:	83 03 03             	add    DWORD PTR [ebx],0x3
9f005955:	ec                   	in     al,dx
9f005956:	01 c5                	add    ebp,eax
9f005958:	c3                   	ret    
9f005959:	0c 04                	or     al,0x4
9f00595b:	04 1c                	add    al,0x1c
9f00595d:	00 00                	add    BYTE PTR [eax],al
9f00595f:	00 70 09             	add    BYTE PTR [eax+0x9],dh
9f005962:	00 00                	add    BYTE PTR [eax],al
9f005964:	a2 c1 ff ff 4f       	mov    ds:0x4fffffc1,al
9f005969:	00 00                	add    BYTE PTR [eax],al
9f00596b:	00 00                	add    BYTE PTR [eax],al
9f00596d:	41                   	inc    ecx
9f00596e:	0e                   	push   cs
9f00596f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005975:	02 4b c5             	add    cl,BYTE PTR [ebx-0x3b]
9f005978:	0c 04                	or     al,0x4
9f00597a:	04 00                	add    al,0x0
9f00597c:	1c 00                	sbb    al,0x0
9f00597e:	00 00                	add    BYTE PTR [eax],al
9f005980:	90                   	nop
9f005981:	09 00                	or     DWORD PTR [eax],eax
9f005983:	00 d1                	add    cl,dl
9f005985:	c1 ff ff             	sar    edi,0xff
9f005988:	1c 00                	sbb    al,0x0
9f00598a:	00 00                	add    BYTE PTR [eax],al
9f00598c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00598f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005995:	58                   	pop    eax
9f005996:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005999:	04 00                	add    al,0x0
9f00599b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00599e:	00 00                	add    BYTE PTR [eax],al
9f0059a0:	b0 09                	mov    al,0x9
9f0059a2:	00 00                	add    BYTE PTR [eax],al
9f0059a4:	cd c1                	int    0xc1
9f0059a6:	ff                   	(bad)  
9f0059a7:	ff 20                	jmp    DWORD PTR [eax]
9f0059a9:	00 00                	add    BYTE PTR [eax],al
9f0059ab:	00 00                	add    BYTE PTR [eax],al
9f0059ad:	41                   	inc    ecx
9f0059ae:	0e                   	push   cs
9f0059af:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0059b5:	5c                   	pop    esp
9f0059b6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0059b9:	04 00                	add    al,0x0
9f0059bb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0059be:	00 00                	add    BYTE PTR [eax],al
9f0059c0:	d0 09                	ror    BYTE PTR [ecx],1
9f0059c2:	00 00                	add    BYTE PTR [eax],al
9f0059c4:	cd c1                	int    0xc1
9f0059c6:	ff                   	(bad)  
9f0059c7:	ff 20                	jmp    DWORD PTR [eax]
9f0059c9:	00 00                	add    BYTE PTR [eax],al
9f0059cb:	00 00                	add    BYTE PTR [eax],al
9f0059cd:	41                   	inc    ecx
9f0059ce:	0e                   	push   cs
9f0059cf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0059d5:	5c                   	pop    esp
9f0059d6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0059d9:	04 00                	add    al,0x0
9f0059db:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0059de:	00 00                	add    BYTE PTR [eax],al
9f0059e0:	f0 09 00             	lock or DWORD PTR [eax],eax
9f0059e3:	00 cd                	add    ch,cl
9f0059e5:	c1 ff ff             	sar    edi,0xff
9f0059e8:	44                   	inc    esp
9f0059e9:	01 00                	add    DWORD PTR [eax],eax
9f0059eb:	00 00                	add    BYTE PTR [eax],al
9f0059ed:	41                   	inc    ecx
9f0059ee:	0e                   	push   cs
9f0059ef:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0059f5:	03 40 01             	add    eax,DWORD PTR [eax+0x1]
9f0059f8:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0059fb:	04 1c                	add    al,0x1c
9f0059fd:	00 00                	add    BYTE PTR [eax],al
9f0059ff:	00 10                	add    BYTE PTR [eax],dl
9f005a01:	0a 00                	or     al,BYTE PTR [eax]
9f005a03:	00 f1                	add    cl,dh
9f005a05:	c2 ff ff             	ret    0xffff
9f005a08:	20 00                	and    BYTE PTR [eax],al
9f005a0a:	00 00                	add    BYTE PTR [eax],al
9f005a0c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005a0f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a15:	5c                   	pop    esp
9f005a16:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005a19:	04 00                	add    al,0x0
9f005a1b:	00 28                	add    BYTE PTR [eax],ch
9f005a1d:	00 00                	add    BYTE PTR [eax],al
9f005a1f:	00 30                	add    BYTE PTR [eax],dh
9f005a21:	0a 00                	or     al,BYTE PTR [eax]
9f005a23:	00 f1                	add    cl,dh
9f005a25:	c2 ff ff             	ret    0xffff
9f005a28:	fd                   	std    
9f005a29:	02 00                	add    al,BYTE PTR [eax]
9f005a2b:	00 00                	add    BYTE PTR [eax],al
9f005a2d:	41                   	inc    ecx
9f005a2e:	0e                   	push   cs
9f005a2f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a35:	48                   	dec    eax
9f005a36:	86 03                	xchg   BYTE PTR [ebx],al
9f005a38:	83 04 03 ef          	add    DWORD PTR [ebx+eax*1],0xffffffef
9f005a3c:	02 c3                	add    al,bl
9f005a3e:	41                   	inc    ecx
9f005a3f:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005a43:	04 04                	add    al,0x4
9f005a45:	00 00                	add    BYTE PTR [eax],al
9f005a47:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005a4a:	00 00                	add    BYTE PTR [eax],al
9f005a4c:	5c                   	pop    esp
9f005a4d:	0a 00                	or     al,BYTE PTR [eax]
9f005a4f:	00 c2                	add    dl,al
9f005a51:	c5 ff ff             	(bad)  
9f005a54:	23 00                	and    eax,DWORD PTR [eax]
9f005a56:	00 00                	add    BYTE PTR [eax],al
9f005a58:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005a5b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a61:	5f                   	pop    edi
9f005a62:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005a65:	04 00                	add    al,0x0
9f005a67:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005a6a:	00 00                	add    BYTE PTR [eax],al
9f005a6c:	7c 0a                	jl     9f005a78 <__x86.get_pc_thunk.cx+0xa8e>
9f005a6e:	00 00                	add    BYTE PTR [eax],al
9f005a70:	c5 c5 ff             	(bad)  
9f005a73:	ff 23                	jmp    DWORD PTR [ebx]
9f005a75:	00 00                	add    BYTE PTR [eax],al
9f005a77:	00 00                	add    BYTE PTR [eax],al
9f005a79:	41                   	inc    ecx
9f005a7a:	0e                   	push   cs
9f005a7b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a81:	5f                   	pop    edi
9f005a82:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005a85:	04 00                	add    al,0x0
9f005a87:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005a8a:	00 00                	add    BYTE PTR [eax],al
9f005a8c:	9c                   	pushf  
9f005a8d:	0a 00                	or     al,BYTE PTR [eax]
9f005a8f:	00 c8                	add    al,cl
9f005a91:	c5 ff ff             	(bad)  
9f005a94:	1d 00 00 00 00       	sbb    eax,0x0
9f005a99:	41                   	inc    ecx
9f005a9a:	0e                   	push   cs
9f005a9b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005aa1:	59                   	pop    ecx
9f005aa2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005aa5:	04 00                	add    al,0x0
9f005aa7:	00 20                	add    BYTE PTR [eax],ah
9f005aa9:	00 00                	add    BYTE PTR [eax],al
9f005aab:	00 bc 0a 00 00 c8 c5 	add    BYTE PTR [edx+ecx*1-0x3a380000],bh
9f005ab2:	ff                   	(bad)  
9f005ab3:	ff 73 00             	push   DWORD PTR [ebx+0x0]
9f005ab6:	00 00                	add    BYTE PTR [eax],al
9f005ab8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005abb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005ac1:	44                   	inc    esp
9f005ac2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005ac5:	6b c5 c3             	imul   eax,ebp,0xffffffc3
9f005ac8:	0c 04                	or     al,0x4
9f005aca:	04 00                	add    al,0x0
9f005acc:	20 00                	and    BYTE PTR [eax],al
9f005ace:	00 00                	add    BYTE PTR [eax],al
9f005ad0:	e0 0a                	loopne 9f005adc <__x86.get_pc_thunk.cx+0xaf2>
9f005ad2:	00 00                	add    BYTE PTR [eax],al
9f005ad4:	18 c6                	sbb    dh,al
9f005ad6:	ff                   	(bad)  
9f005ad7:	ff 60 00             	jmp    DWORD PTR [eax+0x0]
9f005ada:	00 00                	add    BYTE PTR [eax],al
9f005adc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005adf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005ae5:	44                   	inc    esp
9f005ae6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005ae9:	58                   	pop    eax
9f005aea:	c5 c3 0c             	(bad)  
9f005aed:	04 04                	add    al,0x4
9f005aef:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005af2:	00 00                	add    BYTE PTR [eax],al
9f005af4:	04 0b                	add    al,0xb
9f005af6:	00 00                	add    BYTE PTR [eax],al
9f005af8:	54                   	push   esp
9f005af9:	c6                   	(bad)  
9f005afa:	ff                   	(bad)  
9f005afb:	ff 87 00 00 00 00    	inc    DWORD PTR [edi+0x0]
9f005b01:	41                   	inc    ecx
9f005b02:	0e                   	push   cs
9f005b03:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005b09:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
9f005b0f:	00 20                	add    BYTE PTR [eax],ah
9f005b11:	00 00                	add    BYTE PTR [eax],al
9f005b13:	00 24 0b             	add    BYTE PTR [ebx+ecx*1],ah
9f005b16:	00 00                	add    BYTE PTR [eax],al
9f005b18:	bb c6 ff ff 73       	mov    ebx,0x73ffffc6
9f005b1d:	00 00                	add    BYTE PTR [eax],al
9f005b1f:	00 00                	add    BYTE PTR [eax],al
9f005b21:	41                   	inc    ecx
9f005b22:	0e                   	push   cs
9f005b23:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005b29:	44                   	inc    esp
9f005b2a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005b2d:	6b c5 c3             	imul   eax,ebp,0xffffffc3
9f005b30:	0c 04                	or     al,0x4
9f005b32:	04 00                	add    al,0x0
9f005b34:	1c 00                	sbb    al,0x0
9f005b36:	00 00                	add    BYTE PTR [eax],al
9f005b38:	48                   	dec    eax
9f005b39:	0b 00                	or     eax,DWORD PTR [eax]
9f005b3b:	00 0a                	add    BYTE PTR [edx],cl
9f005b3d:	c7                   	(bad)  
9f005b3e:	ff                   	(bad)  
9f005b3f:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
9f005b46:	0e                   	push   cs
9f005b47:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005b4d:	02 80 c5 0c 04 04    	add    al,BYTE PTR [eax+0x4040cc5]
9f005b53:	00 20                	add    BYTE PTR [eax],ah
9f005b55:	00 00                	add    BYTE PTR [eax],al
9f005b57:	00 68 0b             	add    BYTE PTR [eax+0xb],ch
9f005b5a:	00 00                	add    BYTE PTR [eax],al
9f005b5c:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005b5d:	c7                   	(bad)  
9f005b5e:	ff                   	(bad)  
9f005b5f:	ff 8b 00 00 00 00    	dec    DWORD PTR [ebx+0x0]
9f005b65:	41                   	inc    ecx
9f005b66:	0e                   	push   cs
9f005b67:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005b6d:	44                   	inc    esp
9f005b6e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005b71:	83 c5 c3             	add    ebp,0xffffffc3
9f005b74:	0c 04                	or     al,0x4
9f005b76:	04 00                	add    al,0x0
9f005b78:	20 00                	and    BYTE PTR [eax],al
9f005b7a:	00 00                	add    BYTE PTR [eax],al
9f005b7c:	8c 0b                	mov    WORD PTR [ebx],cs
9f005b7e:	00 00                	add    BYTE PTR [eax],al
9f005b80:	d5 c7                	aad    0xc7
9f005b82:	ff                   	(bad)  
9f005b83:	ff 43 02             	inc    DWORD PTR [ebx+0x2]
9f005b86:	00 00                	add    BYTE PTR [eax],al
9f005b88:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005b8b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005b91:	44                   	inc    esp
9f005b92:	83 03 03             	add    DWORD PTR [ebx],0x3
9f005b95:	3b 02                	cmp    eax,DWORD PTR [edx]
9f005b97:	c5 c3 0c             	(bad)  
9f005b9a:	04 04                	add    al,0x4
9f005b9c:	1c 00                	sbb    al,0x0
9f005b9e:	00 00                	add    BYTE PTR [eax],al
9f005ba0:	b0 0b                	mov    al,0xb
9f005ba2:	00 00                	add    BYTE PTR [eax],al
9f005ba4:	f4                   	hlt    
9f005ba5:	c9                   	leave  
9f005ba6:	ff                   	(bad)  
9f005ba7:	ff 20                	jmp    DWORD PTR [eax]
9f005ba9:	00 00                	add    BYTE PTR [eax],al
9f005bab:	00 00                	add    BYTE PTR [eax],al
9f005bad:	41                   	inc    ecx
9f005bae:	0e                   	push   cs
9f005baf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005bb5:	5c                   	pop    esp
9f005bb6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005bb9:	04 00                	add    al,0x0
9f005bbb:	00 20                	add    BYTE PTR [eax],ah
9f005bbd:	00 00                	add    BYTE PTR [eax],al
9f005bbf:	00 d0                	add    al,dl
9f005bc1:	0b 00                	or     eax,DWORD PTR [eax]
9f005bc3:	00 f4                	add    ah,dh
9f005bc5:	c9                   	leave  
9f005bc6:	ff                   	(bad)  
9f005bc7:	ff 03                	inc    DWORD PTR [ebx]
9f005bc9:	01 00                	add    DWORD PTR [eax],eax
9f005bcb:	00 00                	add    BYTE PTR [eax],al
9f005bcd:	41                   	inc    ecx
9f005bce:	0e                   	push   cs
9f005bcf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005bd5:	44                   	inc    esp
9f005bd6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005bd9:	fb                   	sti    
9f005bda:	c5 c3 0c             	(bad)  
9f005bdd:	04 04                	add    al,0x4
9f005bdf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005be2:	00 00                	add    BYTE PTR [eax],al
9f005be4:	f4                   	hlt    
9f005be5:	0b 00                	or     eax,DWORD PTR [eax]
9f005be7:	00 d3                	add    bl,dl
9f005be9:	ca ff ff             	retf   0xffff
9f005bec:	23 00                	and    eax,DWORD PTR [eax]
9f005bee:	00 00                	add    BYTE PTR [eax],al
9f005bf0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005bf3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005bf9:	5f                   	pop    edi
9f005bfa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005bfd:	04 00                	add    al,0x0
9f005bff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005c02:	00 00                	add    BYTE PTR [eax],al
9f005c04:	14 0c                	adc    al,0xc
9f005c06:	00 00                	add    BYTE PTR [eax],al
9f005c08:	d6                   	(bad)  
9f005c09:	ca ff ff             	retf   0xffff
9f005c0c:	21 00                	and    DWORD PTR [eax],eax
9f005c0e:	00 00                	add    BYTE PTR [eax],al
9f005c10:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005c13:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005c19:	5d                   	pop    ebp
9f005c1a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005c1d:	04 00                	add    al,0x0
9f005c1f:	00 20                	add    BYTE PTR [eax],ah
9f005c21:	00 00                	add    BYTE PTR [eax],al
9f005c23:	00 34 0c             	add    BYTE PTR [esp+ecx*1],dh
9f005c26:	00 00                	add    BYTE PTR [eax],al
9f005c28:	d7                   	xlat   BYTE PTR ds:[ebx]
9f005c29:	ca ff ff             	retf   0xffff
9f005c2c:	32 00                	xor    al,BYTE PTR [eax]
9f005c2e:	00 00                	add    BYTE PTR [eax],al
9f005c30:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005c33:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005c39:	44                   	inc    esp
9f005c3a:	83 03 6a             	add    DWORD PTR [ebx],0x6a
9f005c3d:	c5 c3 0c             	(bad)  
9f005c40:	04 04                	add    al,0x4
9f005c42:	00 00                	add    BYTE PTR [eax],al
9f005c44:	1c 00                	sbb    al,0x0
9f005c46:	00 00                	add    BYTE PTR [eax],al
9f005c48:	58                   	pop    eax
9f005c49:	0c 00                	or     al,0x0
9f005c4b:	00 e8                	add    al,ch
9f005c4d:	ca ff ff             	retf   0xffff
9f005c50:	9b                   	fwait
9f005c51:	01 00                	add    DWORD PTR [eax],eax
9f005c53:	00 00                	add    BYTE PTR [eax],al
9f005c55:	41                   	inc    ecx
9f005c56:	0e                   	push   cs
9f005c57:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005c5d:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
9f005c63:	04 1c                	add    al,0x1c
9f005c65:	00 00                	add    BYTE PTR [eax],al
9f005c67:	00 78 0c             	add    BYTE PTR [eax+0xc],bh
9f005c6a:	00 00                	add    BYTE PTR [eax],al
9f005c6c:	63 cc                	arpl   sp,cx
9f005c6e:	ff                   	(bad)  
9f005c6f:	ff 20                	jmp    DWORD PTR [eax]
9f005c71:	00 00                	add    BYTE PTR [eax],al
9f005c73:	00 00                	add    BYTE PTR [eax],al
9f005c75:	41                   	inc    ecx
9f005c76:	0e                   	push   cs
9f005c77:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005c7d:	5c                   	pop    esp
9f005c7e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005c81:	04 00                	add    al,0x0
9f005c83:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005c86:	00 00                	add    BYTE PTR [eax],al
9f005c88:	98                   	cwde   
9f005c89:	0c 00                	or     al,0x0
9f005c8b:	00 64 cc ff          	add    BYTE PTR [esp+ecx*8-0x1],ah
9f005c8f:	ff c7                	inc    edi
9f005c91:	00 00                	add    BYTE PTR [eax],al
9f005c93:	00 00                	add    BYTE PTR [eax],al
9f005c95:	41                   	inc    ecx
9f005c96:	0e                   	push   cs
9f005c97:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005c9d:	02 c3                	add    al,bl
9f005c9f:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005ca2:	04 00                	add    al,0x0
9f005ca4:	1c 00                	sbb    al,0x0
9f005ca6:	00 00                	add    BYTE PTR [eax],al
9f005ca8:	b8 0c 00 00 0b       	mov    eax,0xb00000c
9f005cad:	cd ff                	int    0xff
9f005caf:	ff 20                	jmp    DWORD PTR [eax]
9f005cb1:	00 00                	add    BYTE PTR [eax],al
9f005cb3:	00 00                	add    BYTE PTR [eax],al
9f005cb5:	41                   	inc    ecx
9f005cb6:	0e                   	push   cs
9f005cb7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005cbd:	5c                   	pop    esp
9f005cbe:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005cc1:	04 00                	add    al,0x0
9f005cc3:	00 20                	add    BYTE PTR [eax],ah
9f005cc5:	00 00                	add    BYTE PTR [eax],al
9f005cc7:	00 d8                	add    al,bl
9f005cc9:	0c 00                	or     al,0x0
9f005ccb:	00 0c cd ff ff 29 00 	add    BYTE PTR [ecx*8+0x29ffff],cl
9f005cd2:	00 00                	add    BYTE PTR [eax],al
9f005cd4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005cd7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005cdd:	44                   	inc    esp
9f005cde:	83 03 61             	add    DWORD PTR [ebx],0x61
9f005ce1:	c5 c3 0c             	(bad)  
9f005ce4:	04 04                	add    al,0x4
9f005ce6:	00 00                	add    BYTE PTR [eax],al
9f005ce8:	20 00                	and    BYTE PTR [eax],al
9f005cea:	00 00                	add    BYTE PTR [eax],al
9f005cec:	fc                   	cld    
9f005ced:	0c 00                	or     al,0x0
9f005cef:	00 11                	add    BYTE PTR [ecx],dl
9f005cf1:	cd ff                	int    0xff
9f005cf3:	ff 2e                	jmp    FWORD PTR [esi]
9f005cf5:	00 00                	add    BYTE PTR [eax],al
9f005cf7:	00 00                	add    BYTE PTR [eax],al
9f005cf9:	41                   	inc    ecx
9f005cfa:	0e                   	push   cs
9f005cfb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005d01:	44                   	inc    esp
9f005d02:	83 03 66             	add    DWORD PTR [ebx],0x66
9f005d05:	c5 c3 0c             	(bad)  
9f005d08:	04 04                	add    al,0x4
9f005d0a:	00 00                	add    BYTE PTR [eax],al
9f005d0c:	28 00                	sub    BYTE PTR [eax],al
9f005d0e:	00 00                	add    BYTE PTR [eax],al
9f005d10:	20 0d 00 00 1c cd    	and    BYTE PTR ds:0xcd1c0000,cl
9f005d16:	ff                   	(bad)  
9f005d17:	ff                   	(bad)  
9f005d18:	3f                   	aas    
9f005d19:	03 00                	add    eax,DWORD PTR [eax]
9f005d1b:	00 00                	add    BYTE PTR [eax],al
9f005d1d:	41                   	inc    ecx
9f005d1e:	0e                   	push   cs
9f005d1f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005d25:	48                   	dec    eax
9f005d26:	86 03                	xchg   BYTE PTR [ebx],al
9f005d28:	83 04 03 31          	add    DWORD PTR [ebx+eax*1],0x31
9f005d2c:	03 c3                	add    eax,ebx
9f005d2e:	41                   	inc    ecx
9f005d2f:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005d33:	04 04                	add    al,0x4
9f005d35:	00 00                	add    BYTE PTR [eax],al
9f005d37:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005d3a:	00 00                	add    BYTE PTR [eax],al
9f005d3c:	4c                   	dec    esp
9f005d3d:	0d 00 00 2f d0       	or     eax,0xd02f0000
9f005d42:	ff                   	(bad)  
9f005d43:	ff 25 00 00 00 00    	jmp    DWORD PTR ds:0x0
9f005d49:	41                   	inc    ecx
9f005d4a:	0e                   	push   cs
9f005d4b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005d51:	61                   	popa   
9f005d52:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005d55:	04 00                	add    al,0x0
9f005d57:	00 28                	add    BYTE PTR [eax],ch
9f005d59:	00 00                	add    BYTE PTR [eax],al
9f005d5b:	00 6c 0d 00          	add    BYTE PTR [ebp+ecx*1+0x0],ch
9f005d5f:	00 34 d0             	add    BYTE PTR [eax+edx*8],dh
9f005d62:	ff                   	(bad)  
9f005d63:	ff 26                	jmp    DWORD PTR [esi]
9f005d65:	02 00                	add    al,BYTE PTR [eax]
9f005d67:	00 00                	add    BYTE PTR [eax],al
9f005d69:	41                   	inc    ecx
9f005d6a:	0e                   	push   cs
9f005d6b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005d71:	48                   	dec    eax
9f005d72:	86 03                	xchg   BYTE PTR [ebx],al
9f005d74:	83 04 03 18          	add    DWORD PTR [ebx+eax*1],0x18
9f005d78:	02 c3                	add    al,bl
9f005d7a:	41                   	inc    ecx
9f005d7b:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005d7f:	04 04                	add    al,0x4
9f005d81:	00 00                	add    BYTE PTR [eax],al
9f005d83:	00 20                	add    BYTE PTR [eax],ah
9f005d85:	00 00                	add    BYTE PTR [eax],al
9f005d87:	00 98 0d 00 00 30    	add    BYTE PTR [eax+0x3000000d],bl
9f005d8d:	d2 ff                	sar    bh,cl
9f005d8f:	ff 5f 00             	call   FWORD PTR [edi+0x0]
9f005d92:	00 00                	add    BYTE PTR [eax],al
9f005d94:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005d97:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005d9d:	44                   	inc    esp
9f005d9e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005da1:	56                   	push   esi
9f005da2:	c3                   	ret    
9f005da3:	41                   	inc    ecx
9f005da4:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005da7:	04 28                	add    al,0x28
9f005da9:	00 00                	add    BYTE PTR [eax],al
9f005dab:	00 bc 0d 00 00 6b d2 	add    BYTE PTR [ebp+ecx*1-0x2d950000],bh
9f005db2:	ff                   	(bad)  
9f005db3:	ff                   	(bad)  
9f005db4:	3e 02 00             	add    al,BYTE PTR ds:[eax]
9f005db7:	00 00                	add    BYTE PTR [eax],al
9f005db9:	41                   	inc    ecx
9f005dba:	0e                   	push   cs
9f005dbb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005dc1:	45                   	inc    ebp
9f005dc2:	86 03                	xchg   BYTE PTR [ebx],al
9f005dc4:	83 04 03 33          	add    DWORD PTR [ebx+eax*1],0x33
9f005dc8:	02 c3                	add    al,bl
9f005dca:	41                   	inc    ecx
9f005dcb:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005dcf:	04 04                	add    al,0x4
9f005dd1:	00 00                	add    BYTE PTR [eax],al
9f005dd3:	00 20                	add    BYTE PTR [eax],ah
9f005dd5:	00 00                	add    BYTE PTR [eax],al
9f005dd7:	00 e8                	add    al,ch
9f005dd9:	0d 00 00 7d d4       	or     eax,0xd47d0000
9f005dde:	ff                   	(bad)  
9f005ddf:	ff 48 04             	dec    DWORD PTR [eax+0x4]
9f005de2:	00 00                	add    BYTE PTR [eax],al
9f005de4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005de7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005ded:	44                   	inc    esp
9f005dee:	83 03 03             	add    DWORD PTR [ebx],0x3
9f005df1:	40                   	inc    eax
9f005df2:	04 c5                	add    al,0xc5
9f005df4:	c3                   	ret    
9f005df5:	0c 04                	or     al,0x4
9f005df7:	04 1c                	add    al,0x1c
9f005df9:	00 00                	add    BYTE PTR [eax],al
9f005dfb:	00 0c 0e             	add    BYTE PTR [esi+ecx*1],cl
9f005dfe:	00 00                	add    BYTE PTR [eax],al
9f005e00:	a1 d8 ff ff 33       	mov    eax,ds:0x33ffffd8
9f005e05:	00 00                	add    BYTE PTR [eax],al
9f005e07:	00 00                	add    BYTE PTR [eax],al
9f005e09:	41                   	inc    ecx
9f005e0a:	0e                   	push   cs
9f005e0b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005e11:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005e12:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005e15:	04 00                	add    al,0x0
9f005e17:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005e1a:	00 00                	add    BYTE PTR [eax],al
9f005e1c:	2c 0e                	sub    al,0xe
9f005e1e:	00 00                	add    BYTE PTR [eax],al
9f005e20:	b4 d8                	mov    ah,0xd8
9f005e22:	ff                   	(bad)  
9f005e23:	ff 33                	push   DWORD PTR [ebx]
9f005e25:	00 00                	add    BYTE PTR [eax],al
9f005e27:	00 00                	add    BYTE PTR [eax],al
9f005e29:	41                   	inc    ecx
9f005e2a:	0e                   	push   cs
9f005e2b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005e31:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005e32:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005e35:	04 00                	add    al,0x0
9f005e37:	00 20                	add    BYTE PTR [eax],ah
9f005e39:	00 00                	add    BYTE PTR [eax],al
9f005e3b:	00 4c 0e 00          	add    BYTE PTR [esi+ecx*1+0x0],cl
9f005e3f:	00 c8                	add    al,cl
9f005e41:	d8 ff                	fdivr  st,st(7)
9f005e43:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
9f005e4a:	0e                   	push   cs
9f005e4b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005e51:	44                   	inc    esp
9f005e52:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005e55:	7c c5                	jl     9f005e1c <__x86.get_pc_thunk.cx+0xe32>
9f005e57:	c3                   	ret    
9f005e58:	0c 04                	or     al,0x4
9f005e5a:	04 00                	add    al,0x0
9f005e5c:	20 00                	and    BYTE PTR [eax],al
9f005e5e:	00 00                	add    BYTE PTR [eax],al
9f005e60:	70 0e                	jo     9f005e70 <__x86.get_pc_thunk.cx+0xe86>
9f005e62:	00 00                	add    BYTE PTR [eax],al
9f005e64:	28 d9                	sub    cl,bl
9f005e66:	ff                   	(bad)  
9f005e67:	ff                   	(bad)  
9f005e68:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f005e6b:	00 00                	add    BYTE PTR [eax],al
9f005e6d:	41                   	inc    ecx
9f005e6e:	0e                   	push   cs
9f005e6f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005e75:	44                   	inc    esp
9f005e76:	83 03 76             	add    DWORD PTR [ebx],0x76
9f005e79:	c5 c3 0c             	(bad)  
9f005e7c:	04 04                	add    al,0x4
9f005e7e:	00 00                	add    BYTE PTR [eax],al
9f005e80:	20 00                	and    BYTE PTR [eax],al
9f005e82:	00 00                	add    BYTE PTR [eax],al
9f005e84:	94                   	xchg   esp,eax
9f005e85:	0e                   	push   cs
9f005e86:	00 00                	add    BYTE PTR [eax],al
9f005e88:	42                   	inc    edx
9f005e89:	d9 ff                	fcos   
9f005e8b:	ff                   	(bad)  
9f005e8c:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f005e8f:	00 00                	add    BYTE PTR [eax],al
9f005e91:	41                   	inc    ecx
9f005e92:	0e                   	push   cs
9f005e93:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005e99:	44                   	inc    esp
9f005e9a:	83 03 76             	add    DWORD PTR [ebx],0x76
9f005e9d:	c5 c3 0c             	(bad)  
9f005ea0:	04 04                	add    al,0x4
9f005ea2:	00 00                	add    BYTE PTR [eax],al
9f005ea4:	20 00                	and    BYTE PTR [eax],al
9f005ea6:	00 00                	add    BYTE PTR [eax],al
9f005ea8:	b8 0e 00 00 5c       	mov    eax,0x5c00000e
9f005ead:	d9 ff                	fcos   
9f005eaf:	ff 6f 00             	jmp    FWORD PTR [edi+0x0]
9f005eb2:	00 00                	add    BYTE PTR [eax],al
9f005eb4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005eb7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005ebd:	44                   	inc    esp
9f005ebe:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005ec1:	67 c5 c3 0c          	addr16 (bad) 
9f005ec5:	04 04                	add    al,0x4
9f005ec7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005eca:	00 00                	add    BYTE PTR [eax],al
9f005ecc:	dc 0e                	fmul   QWORD PTR [esi]
9f005ece:	00 00                	add    BYTE PTR [eax],al
9f005ed0:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
9f005ed1:	d9 ff                	fcos   
9f005ed3:	ff 26                	jmp    DWORD PTR [esi]
9f005ed5:	00 00                	add    BYTE PTR [eax],al
9f005ed7:	00 00                	add    BYTE PTR [eax],al
9f005ed9:	41                   	inc    ecx
9f005eda:	0e                   	push   cs
9f005edb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005ee1:	62                   	(bad)  
9f005ee2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005ee5:	04 00                	add    al,0x0
9f005ee7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f005eea:	00 00                	add    BYTE PTR [eax],al
9f005eec:	fc                   	cld    
9f005eed:	0e                   	push   cs
9f005eee:	00 00                	add    BYTE PTR [eax],al
9f005ef0:	b0 d9                	mov    al,0xd9
9f005ef2:	ff                   	(bad)  
9f005ef3:	ff 5e 00             	call   FWORD PTR [esi+0x0]
9f005ef6:	00 00                	add    BYTE PTR [eax],al
9f005ef8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005efb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005f01:	45                   	inc    ebp
9f005f02:	86 03                	xchg   BYTE PTR [ebx],al
9f005f04:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
9f005f08:	c3                   	ret    
9f005f09:	41                   	inc    ecx
9f005f0a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005f0e:	04 04                	add    al,0x4
9f005f10:	1c 00                	sbb    al,0x0
9f005f12:	00 00                	add    BYTE PTR [eax],al
9f005f14:	24 0f                	and    al,0xf
9f005f16:	00 00                	add    BYTE PTR [eax],al
9f005f18:	e6 d9                	out    0xd9,al
9f005f1a:	ff                   	(bad)  
9f005f1b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f005f21:	41                   	inc    ecx
9f005f22:	0e                   	push   cs
9f005f23:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005f29:	59                   	pop    ecx
9f005f2a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005f2d:	04 00                	add    al,0x0
9f005f2f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005f32:	00 00                	add    BYTE PTR [eax],al
9f005f34:	44                   	inc    esp
9f005f35:	0f 00 00             	sldt   WORD PTR [eax]
9f005f38:	e4 d9                	in     al,0xd9
9f005f3a:	ff                   	(bad)  
9f005f3b:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f005f3e:	00 00                	add    BYTE PTR [eax],al
9f005f40:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005f43:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005f49:	7c c5                	jl     9f005f10 <__x86.get_pc_thunk.cx+0xf26>
9f005f4b:	0c 04                	or     al,0x4
9f005f4d:	04 00                	add    al,0x0
9f005f4f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005f52:	00 00                	add    BYTE PTR [eax],al
9f005f54:	64 0f 00 00          	sldt   WORD PTR fs:[eax]
9f005f58:	04 da                	add    al,0xda
9f005f5a:	ff                   	(bad)  
9f005f5b:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f005f5e:	00 00                	add    BYTE PTR [eax],al
9f005f60:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005f63:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005f69:	7c c5                	jl     9f005f30 <__x86.get_pc_thunk.cx+0xf46>
9f005f6b:	0c 04                	or     al,0x4
9f005f6d:	04 00                	add    al,0x0
9f005f6f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005f72:	00 00                	add    BYTE PTR [eax],al
9f005f74:	84 0f                	test   BYTE PTR [edi],cl
9f005f76:	00 00                	add    BYTE PTR [eax],al
9f005f78:	24 da                	and    al,0xda
9f005f7a:	ff                   	(bad)  
9f005f7b:	ff 47 00             	inc    DWORD PTR [edi+0x0]
9f005f7e:	00 00                	add    BYTE PTR [eax],al
9f005f80:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005f83:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005f89:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
9f005f8c:	0c 04                	or     al,0x4
9f005f8e:	04 00                	add    al,0x0
9f005f90:	1c 00                	sbb    al,0x0
9f005f92:	00 00                	add    BYTE PTR [eax],al
9f005f94:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f005f95:	0f 00 00             	sldt   WORD PTR [eax]
9f005f98:	4c                   	dec    esp
9f005f99:	da ff                	(bad)  
9f005f9b:	ff 30                	push   DWORD PTR [eax]
9f005f9d:	00 00                	add    BYTE PTR [eax],al
9f005f9f:	00 00                	add    BYTE PTR [eax],al
9f005fa1:	41                   	inc    ecx
9f005fa2:	0e                   	push   cs
9f005fa3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005fa9:	6c                   	ins    BYTE PTR es:[edi],dx
9f005faa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005fad:	04 00                	add    al,0x0
9f005faf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005fb2:	00 00                	add    BYTE PTR [eax],al
9f005fb4:	c4 0f                	les    ecx,FWORD PTR [edi]
9f005fb6:	00 00                	add    BYTE PTR [eax],al
9f005fb8:	5c                   	pop    esp
9f005fb9:	da ff                	(bad)  
9f005fbb:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f005fbe:	00 00                	add    BYTE PTR [eax],al
9f005fc0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005fc3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005fc9:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
9f005fcc:	0c 04                	or     al,0x4
9f005fce:	04 00                	add    al,0x0
9f005fd0:	1c 00                	sbb    al,0x0
9f005fd2:	00 00                	add    BYTE PTR [eax],al
9f005fd4:	e4 0f                	in     al,0xf
9f005fd6:	00 00                	add    BYTE PTR [eax],al
9f005fd8:	98                   	cwde   
9f005fd9:	da ff                	(bad)  
9f005fdb:	ff 31                	push   DWORD PTR [ecx]
9f005fdd:	00 00                	add    BYTE PTR [eax],al
9f005fdf:	00 00                	add    BYTE PTR [eax],al
9f005fe1:	41                   	inc    ecx
9f005fe2:	0e                   	push   cs
9f005fe3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005fe9:	6d                   	ins    DWORD PTR es:[edi],dx
9f005fea:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005fed:	04 00                	add    al,0x0
9f005fef:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005ff2:	00 00                	add    BYTE PTR [eax],al
9f005ff4:	04 10                	add    al,0x10
9f005ff6:	00 00                	add    BYTE PTR [eax],al
9f005ff8:	a9 da ff ff 1a       	test   eax,0x1affffda
9f005ffd:	00 00                	add    BYTE PTR [eax],al
9f005fff:	00 00                	add    BYTE PTR [eax],al
9f006001:	41                   	inc    ecx
9f006002:	0e                   	push   cs
9f006003:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006009:	56                   	push   esi
9f00600a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00600d:	04 00                	add    al,0x0
9f00600f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006012:	00 00                	add    BYTE PTR [eax],al
9f006014:	24 10                	and    al,0x10
9f006016:	00 00                	add    BYTE PTR [eax],al
9f006018:	a3 da ff ff 39       	mov    ds:0x39ffffda,eax
9f00601d:	00 00                	add    BYTE PTR [eax],al
9f00601f:	00 00                	add    BYTE PTR [eax],al
9f006021:	41                   	inc    ecx
9f006022:	0e                   	push   cs
9f006023:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006029:	75 c5                	jne    9f005ff0 <__x86.get_pc_thunk.cx+0x1006>
9f00602b:	0c 04                	or     al,0x4
9f00602d:	04 00                	add    al,0x0
9f00602f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006032:	00 00                	add    BYTE PTR [eax],al
9f006034:	44                   	inc    esp
9f006035:	10 00                	adc    BYTE PTR [eax],al
9f006037:	00 bc da ff ff 1e 00 	add    BYTE PTR [edx+ebx*8+0x1effff],bh
9f00603e:	00 00                	add    BYTE PTR [eax],al
9f006040:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006043:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006049:	5a                   	pop    edx
9f00604a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00604d:	04 00                	add    al,0x0
9f00604f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006052:	00 00                	add    BYTE PTR [eax],al
9f006054:	64 10 00             	adc    BYTE PTR fs:[eax],al
9f006057:	00 bc da ff ff 67 00 	add    BYTE PTR [edx+ebx*8+0x67ffff],bh
9f00605e:	00 00                	add    BYTE PTR [eax],al
9f006060:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006063:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006069:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f00606c:	0c 04                	or     al,0x4
9f00606e:	04 00                	add    al,0x0
9f006070:	1c 00                	sbb    al,0x0
9f006072:	00 00                	add    BYTE PTR [eax],al
9f006074:	84 10                	test   BYTE PTR [eax],dl
9f006076:	00 00                	add    BYTE PTR [eax],al
9f006078:	03 db                	add    ebx,ebx
9f00607a:	ff                   	(bad)  
9f00607b:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
9f00607e:	00 00                	add    BYTE PTR [eax],al
9f006080:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006083:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006089:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f00608c:	0c 04                	or     al,0x4
9f00608e:	04 00                	add    al,0x0
9f006090:	1c 00                	sbb    al,0x0
9f006092:	00 00                	add    BYTE PTR [eax],al
9f006094:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f006095:	10 00                	adc    BYTE PTR [eax],al
9f006097:	00 4c db ff          	add    BYTE PTR [ebx+ebx*8-0x1],cl
9f00609b:	ff 6c 00 00          	jmp    FWORD PTR [eax+eax*1+0x0]
9f00609f:	00 00                	add    BYTE PTR [eax],al
9f0060a1:	41                   	inc    ecx
9f0060a2:	0e                   	push   cs
9f0060a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0060a9:	02 68 c5             	add    ch,BYTE PTR [eax-0x3b]
9f0060ac:	0c 04                	or     al,0x4
9f0060ae:	04 00                	add    al,0x0
9f0060b0:	1c 00                	sbb    al,0x0
9f0060b2:	00 00                	add    BYTE PTR [eax],al
9f0060b4:	c4 10                	les    edx,FWORD PTR [eax]
9f0060b6:	00 00                	add    BYTE PTR [eax],al
9f0060b8:	98                   	cwde   
9f0060b9:	db ff                	(bad)  
9f0060bb:	ff 20                	jmp    DWORD PTR [eax]
9f0060bd:	00 00                	add    BYTE PTR [eax],al
9f0060bf:	00 00                	add    BYTE PTR [eax],al
9f0060c1:	41                   	inc    ecx
9f0060c2:	0e                   	push   cs
9f0060c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0060c9:	5c                   	pop    esp
9f0060ca:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0060cd:	04 00                	add    al,0x0
9f0060cf:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f0060d2:	00 00                	add    BYTE PTR [eax],al
9f0060d4:	e4 10                	in     al,0x10
9f0060d6:	00 00                	add    BYTE PTR [eax],al
9f0060d8:	98                   	cwde   
9f0060d9:	db ff                	(bad)  
9f0060db:	ff                   	(bad)  
9f0060dc:	7d 01                	jge    9f0060df <__x86.get_pc_thunk.cx+0x10f5>
9f0060de:	00 00                	add    BYTE PTR [eax],al
9f0060e0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0060e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0060e9:	46                   	inc    esi
9f0060ea:	87 03                	xchg   DWORD PTR [ebx],eax
9f0060ec:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f0060ef:	05 03 70 01 c3       	add    eax,0xc3017003
9f0060f4:	41                   	inc    ecx
9f0060f5:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f0060f9:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0060fc:	04 00                	add    al,0x0
9f0060fe:	00 00                	add    BYTE PTR [eax],al
9f006100:	1c 00                	sbb    al,0x0
9f006102:	00 00                	add    BYTE PTR [eax],al
9f006104:	14 11                	adc    al,0x11
9f006106:	00 00                	add    BYTE PTR [eax],al
9f006108:	e8 dc ff ff 1d       	call   bd0060e9 <tmbuf+0x1dffe3c9>
9f00610d:	00 00                	add    BYTE PTR [eax],al
9f00610f:	00 00                	add    BYTE PTR [eax],al
9f006111:	41                   	inc    ecx
9f006112:	0e                   	push   cs
9f006113:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006119:	59                   	pop    ecx
9f00611a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00611d:	04 00                	add    al,0x0
9f00611f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f006122:	00 00                	add    BYTE PTR [eax],al
9f006124:	34 11                	xor    al,0x11
9f006126:	00 00                	add    BYTE PTR [eax],al
9f006128:	e8 dc ff ff 9c       	call   3c006109 <sysEnter_Vector+0x3bed6109>
9f00612d:	01 00                	add    DWORD PTR [eax],eax
9f00612f:	00 00                	add    BYTE PTR [eax],al
9f006131:	41                   	inc    ecx
9f006132:	0e                   	push   cs
9f006133:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006139:	46                   	inc    esi
9f00613a:	87 03                	xchg   DWORD PTR [ebx],eax
9f00613c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f00613f:	05 03 8f 01 c3       	add    eax,0xc3018f03
9f006144:	41                   	inc    ecx
9f006145:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f006149:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00614c:	04 00                	add    al,0x0
9f00614e:	00 00                	add    BYTE PTR [eax],al
9f006150:	20 00                	and    BYTE PTR [eax],al
9f006152:	00 00                	add    BYTE PTR [eax],al
9f006154:	64 11 00             	adc    DWORD PTR fs:[eax],eax
9f006157:	00 54 de ff          	add    BYTE PTR [esi+ebx*8-0x1],dl
9f00615b:	ff 96 00 00 00 00    	call   DWORD PTR [esi+0x0]
9f006161:	41                   	inc    ecx
9f006162:	0e                   	push   cs
9f006163:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006169:	44                   	inc    esp
9f00616a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00616d:	8e c5                	mov    es,ebp
9f00616f:	c3                   	ret    
9f006170:	0c 04                	or     al,0x4
9f006172:	04 00                	add    al,0x0
9f006174:	1c 00                	sbb    al,0x0
9f006176:	00 00                	add    BYTE PTR [eax],al
9f006178:	88 11                	mov    BYTE PTR [ecx],dl
9f00617a:	00 00                	add    BYTE PTR [eax],al
9f00617c:	c6                   	(bad)  
9f00617d:	de ff                	fdivp  st(7),st
9f00617f:	ff 20                	jmp    DWORD PTR [eax]
9f006181:	00 00                	add    BYTE PTR [eax],al
9f006183:	00 00                	add    BYTE PTR [eax],al
9f006185:	41                   	inc    ecx
9f006186:	0e                   	push   cs
9f006187:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00618d:	5c                   	pop    esp
9f00618e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006191:	04 00                	add    al,0x0
9f006193:	00 28                	add    BYTE PTR [eax],ch
9f006195:	00 00                	add    BYTE PTR [eax],al
9f006197:	00 a8 11 00 00 c8    	add    BYTE PTR [eax-0x37ffffef],ch
9f00619d:	de ff                	fdivp  st(7),st
9f00619f:	ff 1e                	call   FWORD PTR [esi]
9f0061a1:	01 00                	add    DWORD PTR [eax],eax
9f0061a3:	00 00                	add    BYTE PTR [eax],al
9f0061a5:	41                   	inc    ecx
9f0061a6:	0e                   	push   cs
9f0061a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0061ad:	45                   	inc    ebp
9f0061ae:	86 03                	xchg   BYTE PTR [ebx],al
9f0061b0:	83 04 03 13          	add    DWORD PTR [ebx+eax*1],0x13
9f0061b4:	01 c3                	add    ebx,eax
9f0061b6:	41                   	inc    ecx
9f0061b7:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0061bb:	04 04                	add    al,0x4
9f0061bd:	00 00                	add    BYTE PTR [eax],al
9f0061bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0061c2:	00 00                	add    BYTE PTR [eax],al
9f0061c4:	d4 11                	aam    0x11
9f0061c6:	00 00                	add    BYTE PTR [eax],al
9f0061c8:	ba df ff ff 26       	mov    edx,0x26ffffdf
9f0061cd:	00 00                	add    BYTE PTR [eax],al
9f0061cf:	00 00                	add    BYTE PTR [eax],al
9f0061d1:	41                   	inc    ecx
9f0061d2:	0e                   	push   cs
9f0061d3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0061d9:	62                   	(bad)  
9f0061da:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0061dd:	04 00                	add    al,0x0
9f0061df:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0061e2:	00 00                	add    BYTE PTR [eax],al
9f0061e4:	f4                   	hlt    
9f0061e5:	11 00                	adc    DWORD PTR [eax],eax
9f0061e7:	00 c0                	add    al,al
9f0061e9:	df ff                	(bad)  
9f0061eb:	ff 9e 00 00 00 00    	call   FWORD PTR [esi+0x0]
9f0061f1:	41                   	inc    ecx
9f0061f2:	0e                   	push   cs
9f0061f3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0061f9:	45                   	inc    ebp
9f0061fa:	86 03                	xchg   BYTE PTR [ebx],al
9f0061fc:	83 04 02 93          	add    DWORD PTR [edx+eax*1],0xffffff93
9f006200:	c3                   	ret    
9f006201:	41                   	inc    ecx
9f006202:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f006206:	04 04                	add    al,0x4
9f006208:	24 00                	and    al,0x0
9f00620a:	00 00                	add    BYTE PTR [eax],al
9f00620c:	1c 12                	sbb    al,0x12
9f00620e:	00 00                	add    BYTE PTR [eax],al
9f006210:	36                   	ss
9f006211:	e0 ff                	loopne 9f006212 <__x86.get_pc_thunk.cx+0x1228>
9f006213:	ff 6e 00             	jmp    FWORD PTR [esi+0x0]
9f006216:	00 00                	add    BYTE PTR [eax],al
9f006218:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00621b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006221:	42                   	inc    edx
9f006222:	86 03                	xchg   BYTE PTR [ebx],al
9f006224:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
9f006228:	c3                   	ret    
9f006229:	41                   	inc    ecx
9f00622a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00622e:	04 04                	add    al,0x4
9f006230:	1c 00                	sbb    al,0x0
9f006232:	00 00                	add    BYTE PTR [eax],al
9f006234:	44                   	inc    esp
9f006235:	12 00                	adc    al,BYTE PTR [eax]
9f006237:	00 7c e0 ff          	add    BYTE PTR [eax+eiz*8-0x1],bh
9f00623b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f006241:	41                   	inc    ecx
9f006242:	0e                   	push   cs
9f006243:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006249:	59                   	pop    ecx
9f00624a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00624d:	04 00                	add    al,0x0
9f00624f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f006252:	00 00                	add    BYTE PTR [eax],al
9f006254:	64 12 00             	adc    al,BYTE PTR fs:[eax]
9f006257:	00 7c e0 ff          	add    BYTE PTR [eax+eiz*8-0x1],bh
9f00625b:	ff 44 00 00          	inc    DWORD PTR [eax+eax*1+0x0]
9f00625f:	00 00                	add    BYTE PTR [eax],al
9f006261:	41                   	inc    ecx
9f006262:	0e                   	push   cs
9f006263:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006269:	45                   	inc    ebp
9f00626a:	86 03                	xchg   BYTE PTR [ebx],al
9f00626c:	83 04 79 c3          	add    DWORD PTR [ecx+edi*2],0xffffffc3
9f006270:	41                   	inc    ecx
9f006271:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f006275:	04 04                	add    al,0x4
9f006277:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00627a:	00 00                	add    BYTE PTR [eax],al
9f00627c:	8c 12                	mov    WORD PTR [edx],ss
9f00627e:	00 00                	add    BYTE PTR [eax],al
9f006280:	98                   	cwde   
9f006281:	e0 ff                	loopne 9f006282 <__x86.get_pc_thunk.cx+0x1298>
9f006283:	ff 19                	call   FWORD PTR [ecx]
9f006285:	03 00                	add    eax,DWORD PTR [eax]
9f006287:	00 00                	add    BYTE PTR [eax],al
9f006289:	41                   	inc    ecx
9f00628a:	0e                   	push   cs
9f00628b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006291:	44                   	inc    esp
9f006292:	83 03 03             	add    DWORD PTR [ebx],0x3
9f006295:	10 03                	adc    BYTE PTR [ebx],al
9f006297:	c3                   	ret    
9f006298:	41                   	inc    ecx
9f006299:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00629c:	04 00                	add    al,0x0
9f00629e:	00 00                	add    BYTE PTR [eax],al
9f0062a0:	1c 00                	sbb    al,0x0
9f0062a2:	00 00                	add    BYTE PTR [eax],al
9f0062a4:	b4 12                	mov    ah,0x12
9f0062a6:	00 00                	add    BYTE PTR [eax],al
9f0062a8:	89 e3                	mov    ebx,esp
9f0062aa:	ff                   	(bad)  
9f0062ab:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f0062b1:	41                   	inc    ecx
9f0062b2:	0e                   	push   cs
9f0062b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0062b9:	59                   	pop    ecx
9f0062ba:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0062bd:	04 00                	add    al,0x0
9f0062bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0062c2:	00 00                	add    BYTE PTR [eax],al
9f0062c4:	d4 12                	aam    0x12
9f0062c6:	00 00                	add    BYTE PTR [eax],al
9f0062c8:	86 e3                	xchg   bl,ah
9f0062ca:	ff                   	(bad)  
9f0062cb:	ff                   	(bad)  
9f0062cc:	3d 00 00 00 00       	cmp    eax,0x0
9f0062d1:	41                   	inc    ecx
9f0062d2:	0e                   	push   cs
9f0062d3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0062d9:	79 c5                	jns    9f0062a0 <__x86.get_pc_thunk.cx+0x12b6>
9f0062db:	0c 04                	or     al,0x4
9f0062dd:	04 00                	add    al,0x0
9f0062df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0062e2:	00 00                	add    BYTE PTR [eax],al
9f0062e4:	f4                   	hlt    
9f0062e5:	12 00                	adc    al,BYTE PTR [eax]
9f0062e7:	00 a3 e3 ff ff 35    	add    BYTE PTR [ebx+0x35ffffe3],ah
9f0062ed:	00 00                	add    BYTE PTR [eax],al
9f0062ef:	00 00                	add    BYTE PTR [eax],al
9f0062f1:	41                   	inc    ecx
9f0062f2:	0e                   	push   cs
9f0062f3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0062f9:	71 c5                	jno    9f0062c0 <__x86.get_pc_thunk.cx+0x12d6>
9f0062fb:	0c 04                	or     al,0x4
9f0062fd:	04 00                	add    al,0x0
9f0062ff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006302:	00 00                	add    BYTE PTR [eax],al
9f006304:	14 13                	adc    al,0x13
9f006306:	00 00                	add    BYTE PTR [eax],al
9f006308:	b8 e3 ff ff 1d       	mov    eax,0x1dffffe3
9f00630d:	00 00                	add    BYTE PTR [eax],al
9f00630f:	00 00                	add    BYTE PTR [eax],al
9f006311:	41                   	inc    ecx
9f006312:	0e                   	push   cs
9f006313:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006319:	59                   	pop    ecx
9f00631a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00631d:	04 00                	add    al,0x0
9f00631f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f006322:	00 00                	add    BYTE PTR [eax],al
9f006324:	34 13                	xor    al,0x13
9f006326:	00 00                	add    BYTE PTR [eax],al
9f006328:	b5 e3                	mov    ch,0xe3
9f00632a:	ff                   	(bad)  
9f00632b:	ff 57 08             	call   DWORD PTR [edi+0x8]
9f00632e:	00 00                	add    BYTE PTR [eax],al
9f006330:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006333:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006339:	46                   	inc    esi
9f00633a:	87 03                	xchg   DWORD PTR [ebx],eax
9f00633c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f00633f:	05 03 4a 08 c3       	add    eax,0xc3084a03
9f006344:	41                   	inc    ecx
9f006345:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f006349:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00634c:	04 00                	add    al,0x0
9f00634e:	00 00                	add    BYTE PTR [eax],al
9f006350:	24 00                	and    al,0x0
9f006352:	00 00                	add    BYTE PTR [eax],al
9f006354:	64 13 00             	adc    eax,DWORD PTR fs:[eax]
9f006357:	00 dc                	add    ah,bl
9f006359:	eb ff                	jmp    9f00635a <__x86.get_pc_thunk.cx+0x1370>
9f00635b:	ff 6d 00             	jmp    FWORD PTR [ebp+0x0]
9f00635e:	00 00                	add    BYTE PTR [eax],al
9f006360:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006363:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006369:	45                   	inc    ebp
9f00636a:	86 03                	xchg   BYTE PTR [ebx],al
9f00636c:	83 04 02 62          	add    DWORD PTR [edx+eax*1],0x62
9f006370:	c3                   	ret    
9f006371:	41                   	inc    ecx
9f006372:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f006376:	04 04                	add    al,0x4
9f006378:	20 00                	and    BYTE PTR [eax],al
9f00637a:	00 00                	add    BYTE PTR [eax],al
9f00637c:	8c 13                	mov    WORD PTR [ebx],ss
9f00637e:	00 00                	add    BYTE PTR [eax],al
9f006380:	21 ec                	and    esp,ebp
9f006382:	ff                   	(bad)  
9f006383:	ff 41 00             	inc    DWORD PTR [ecx+0x0]
9f006386:	00 00                	add    BYTE PTR [eax],al
9f006388:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00638b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006391:	44                   	inc    esp
9f006392:	83 03 79             	add    DWORD PTR [ebx],0x79
9f006395:	c5 c3 0c             	(bad)  
9f006398:	04 04                	add    al,0x4
9f00639a:	00 00                	add    BYTE PTR [eax],al
9f00639c:	10 00                	adc    BYTE PTR [eax],al
9f00639e:	00 00                	add    BYTE PTR [eax],al
9f0063a0:	b0 13                	mov    al,0x13
9f0063a2:	00 00                	add    BYTE PTR [eax],al
9f0063a4:	46                   	inc    esi
9f0063a5:	ec                   	in     al,dx
9f0063a6:	ff                   	(bad)  
9f0063a7:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f0063aa:	00 00                	add    BYTE PTR [eax],al
9f0063ac:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .dynsym:

9f0063b0 <.dynsym>:
	...
9f0063c0:	bf 01 00 00 94       	mov    edi,0x94000001
9f0063c5:	2d 00 9f 26 02       	sub    eax,0x2269f00
9f0063ca:	00 00                	add    BYTE PTR [eax],al
9f0063cc:	12 00                	adc    al,BYTE PTR [eax]
9f0063ce:	01 00                	add    DWORD PTR [eax],eax
9f0063d0:	f9                   	stc    
9f0063d1:	01 00                	add    DWORD PTR [eax],eax
9f0063d3:	00 1c 39             	add    BYTE PTR [ecx+edi*1],bl
9f0063d6:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
9f0063dc:	12 00                	adc    al,BYTE PTR [eax]
9f0063de:	01 00                	add    DWORD PTR [eax],eax
9f0063e0:	2c 01                	sub    al,0x1
9f0063e2:	00 00                	add    BYTE PTR [eax],al
9f0063e4:	55                   	push   ebp
9f0063e5:	1b 00                	sbb    eax,DWORD PTR [eax]
9f0063e7:	9f                   	lahf   
9f0063e8:	1c 00                	sbb    al,0x0
9f0063ea:	00 00                	add    BYTE PTR [eax],al
9f0063ec:	12 00                	adc    al,BYTE PTR [eax]
9f0063ee:	01 00                	add    DWORD PTR [eax],eax
9f0063f0:	e3 00                	jecxz  9f0063f2 <__x86.get_pc_thunk.cx+0x1408>
9f0063f2:	00 00                	add    BYTE PTR [eax],al
9f0063f4:	4c                   	dec    esp
9f0063f5:	15 00 9f 59 00       	adc    eax,0x599f00
9f0063fa:	00 00                	add    BYTE PTR [eax],al
9f0063fc:	12 00                	adc    al,BYTE PTR [eax]
9f0063fe:	01 00                	add    DWORD PTR [eax],eax
9f006400:	d3 01                	rol    DWORD PTR [ecx],cl
9f006402:	00 00                	add    BYTE PTR [eax],al
9f006404:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f006405:	15 00 9f 54 00       	adc    eax,0x549f00
9f00640a:	00 00                	add    BYTE PTR [eax],al
9f00640c:	12 00                	adc    al,BYTE PTR [eax]
9f00640e:	01 00                	add    DWORD PTR [eax],eax
9f006410:	3d 00 00 00 c8       	cmp    eax,0xc8000000
9f006415:	05 00 9f 5a 00       	add    eax,0x5a9f00
9f00641a:	00 00                	add    BYTE PTR [eax],al
9f00641c:	12 00                	adc    al,BYTE PTR [eax]
9f00641e:	01 00                	add    DWORD PTR [eax],eax
9f006420:	08 02                	or     BYTE PTR [edx],al
9f006422:	00 00                	add    BYTE PTR [eax],al
9f006424:	14 3a                	adc    al,0x3a
9f006426:	00 9f 59 00 00 00    	add    BYTE PTR [edi+0x59],bl
9f00642c:	12 00                	adc    al,BYTE PTR [eax]
9f00642e:	01 00                	add    DWORD PTR [eax],eax
9f006430:	da 01                	fiadd  DWORD PTR [ecx]
9f006432:	00 00                	add    BYTE PTR [eax],al
9f006434:	08 37                	or     BYTE PTR [edi],dh
9f006436:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
9f00643c:	12 00                	adc    al,BYTE PTR [eax]
9f00643e:	01 00                	add    DWORD PTR [eax],eax
9f006440:	53                   	push   ebx
9f006441:	00 00                	add    BYTE PTR [eax],al
9f006443:	00 ce                	add    dh,cl
9f006445:	06                   	push   es
9f006446:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f00644c:	12 00                	adc    al,BYTE PTR [eax]
9f00644e:	01 00                	add    DWORD PTR [eax],eax
9f006450:	ab                   	stos   DWORD PTR es:[edi],eax
9f006451:	01 00                	add    DWORD PTR [eax],eax
9f006453:	00 01                	add    BYTE PTR [ecx],al
9f006455:	2a 00                	sub    al,BYTE PTR [eax]
9f006457:	9f                   	lahf   
9f006458:	2e 00 00             	add    BYTE PTR cs:[eax],al
9f00645b:	00 12                	add    BYTE PTR [edx],dl
9f00645d:	00 01                	add    BYTE PTR [ecx],al
9f00645f:	00 d4                	add    ah,dl
9f006461:	00 00                	add    BYTE PTR [eax],al
9f006463:	00 68 12             	add    BYTE PTR [eax+0x12],ch
9f006466:	00 9f bd 00 00 00    	add    BYTE PTR [edi+0xbd],bl
9f00646c:	12 00                	adc    al,BYTE PTR [eax]
9f00646e:	01 00                	add    DWORD PTR [eax],eax
9f006470:	92                   	xchg   edx,eax
9f006471:	00 00                	add    BYTE PTR [eax],al
9f006473:	00 3a                	add    BYTE PTR [edx],bh
9f006475:	0c 00                	or     al,0x0
9f006477:	9f                   	lahf   
9f006478:	29 03                	sub    DWORD PTR [ebx],eax
9f00647a:	00 00                	add    BYTE PTR [eax],al
9f00647c:	12 00                	adc    al,BYTE PTR [eax]
9f00647e:	01 00                	add    DWORD PTR [eax],eax
9f006480:	98                   	cwde   
9f006481:	01 00                	add    DWORD PTR [eax],eax
9f006483:	00 cf                	add    bh,cl
9f006485:	28 00                	sub    BYTE PTR [eax],al
9f006487:	9f                   	lahf   
9f006488:	20 00                	and    BYTE PTR [eax],al
9f00648a:	00 00                	add    BYTE PTR [eax],al
9f00648c:	12 00                	adc    al,BYTE PTR [eax]
9f00648e:	01 00                	add    DWORD PTR [eax],eax
9f006490:	40                   	inc    eax
9f006491:	01 00                	add    DWORD PTR [eax],eax
9f006493:	00 f5                	add    ch,dh
9f006495:	1c 00                	sbb    al,0x0
9f006497:	9f                   	lahf   
9f006498:	20 00                	and    BYTE PTR [eax],al
9f00649a:	00 00                	add    BYTE PTR [eax],al
9f00649c:	12 00                	adc    al,BYTE PTR [eax]
9f00649e:	01 00                	add    DWORD PTR [eax],eax
9f0064a0:	b2 00                	mov    dl,0x0
9f0064a2:	00 00                	add    BYTE PTR [eax],al
9f0064a4:	bc 11 00 9f 26       	mov    esp,0x269f0011
9f0064a9:	00 00                	add    BYTE PTR [eax],al
9f0064ab:	00 12                	add    BYTE PTR [edx],dl
9f0064ad:	00 01                	add    BYTE PTR [ecx],al
9f0064af:	00 84 01 00 00 98 25 	add    BYTE PTR [ecx+eax*1+0x25980000],al
9f0064b6:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f0064bc:	12 00                	adc    al,BYTE PTR [eax]
9f0064be:	01 00                	add    DWORD PTR [eax],eax
9f0064c0:	f8                   	clc    
9f0064c1:	00 00                	add    BYTE PTR [eax],al
9f0064c3:	00 77 17             	add    BYTE PTR [edi+0x17],dh
9f0064c6:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
9f0064cc:	12 00                	adc    al,BYTE PTR [eax]
9f0064ce:	01 00                	add    DWORD PTR [eax],eax
9f0064d0:	46                   	inc    esi
9f0064d1:	01 00                	add    DWORD PTR [eax],eax
9f0064d3:	00 12                	add    BYTE PTR [edx],dl
9f0064d5:	20 00                	and    BYTE PTR [eax],al
9f0064d7:	9f                   	lahf   
9f0064d8:	23 00                	and    eax,DWORD PTR [eax]
9f0064da:	00 00                	add    BYTE PTR [eax],al
9f0064dc:	12 00                	adc    al,BYTE PTR [eax]
9f0064de:	01 00                	add    DWORD PTR [eax],eax
9f0064e0:	30 02                	xor    BYTE PTR [edx],al
9f0064e2:	00 00                	add    BYTE PTR [eax],al
9f0064e4:	70 3c                	jo     9f006522 <__x86.get_pc_thunk.cx+0x1538>
9f0064e6:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
9f0064ec:	12 00                	adc    al,BYTE PTR [eax]
9f0064ee:	01 00                	add    DWORD PTR [eax],eax
9f0064f0:	17                   	pop    ss
9f0064f1:	00 00                	add    BYTE PTR [eax],al
9f0064f3:	00 c3                	add    bl,al
9f0064f5:	02 00                	add    al,BYTE PTR [eax]
9f0064f7:	9f                   	lahf   
9f0064f8:	bb 00 00 00 12       	mov    ebx,0x12000000
9f0064fd:	00 01                	add    BYTE PTR [ecx],al
9f0064ff:	00 5b 01             	add    BYTE PTR [ebx+0x1],bl
9f006502:	00 00                	add    BYTE PTR [eax],al
9f006504:	58                   	pop    eax
9f006505:	20 00                	and    BYTE PTR [eax],al
9f006507:	9f                   	lahf   
9f006508:	1d 00 00 00 12       	sbb    eax,0x12000000
9f00650d:	00 01                	add    BYTE PTR [ecx],al
9f00650f:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
9f006512:	00 00                	add    BYTE PTR [eax],al
9f006514:	78 20                	js     9f006536 <__x86.get_pc_thunk.cx+0x154c>
9f006516:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
9f00651c:	12 00                	adc    al,BYTE PTR [eax]
9f00651e:	01 00                	add    DWORD PTR [eax],eax
9f006520:	71 02                	jno    9f006524 <__x86.get_pc_thunk.cx+0x153a>
9f006522:	00 00                	add    BYTE PTR [eax],al
9f006524:	31 46 00             	xor    DWORD PTR [esi+0x0],eax
9f006527:	9f                   	lahf   
9f006528:	1d 00 00 00 12       	sbb    eax,0x12000000
9f00652d:	00 01                	add    BYTE PTR [ecx],al
9f00652f:	00 40 02             	add    BYTE PTR [eax+0x2],al
9f006532:	00 00                	add    BYTE PTR [eax],al
9f006534:	10 3e                	adc    BYTE PTR [esi],bh
9f006536:	00 9f 9c 01 00 00    	add    BYTE PTR [edi+0x19c],bl
9f00653c:	12 00                	adc    al,BYTE PTR [eax]
9f00653e:	01 00                	add    DWORD PTR [eax],eax
9f006540:	d9 00                	fld    DWORD PTR [eax]
9f006542:	00 00                	add    BYTE PTR [eax],al
9f006544:	5e                   	pop    esi
9f006545:	14 00                	adc    al,0x0
9f006547:	9f                   	lahf   
9f006548:	cb                   	retf   
9f006549:	00 00                	add    BYTE PTR [eax],al
9f00654b:	00 12                	add    BYTE PTR [edx],dl
9f00654d:	00 01                	add    BYTE PTR [ecx],al
9f00654f:	00 a6 01 00 00 d8    	add    BYTE PTR [esi-0x27ffffff],ah
9f006555:	29 00                	sub    DWORD PTR [eax],eax
9f006557:	9f                   	lahf   
9f006558:	29 00                	sub    DWORD PTR [eax],eax
9f00655a:	00 00                	add    BYTE PTR [eax],al
9f00655c:	12 00                	adc    al,BYTE PTR [eax]
9f00655e:	01 00                	add    DWORD PTR [eax],eax
9f006560:	18 02                	sbb    BYTE PTR [edx],al
9f006562:	00 00                	add    BYTE PTR [eax],al
9f006564:	f4                   	hlt    
9f006565:	3a 00                	cmp    al,BYTE PTR [eax]
9f006567:	9f                   	lahf   
9f006568:	1e                   	push   ds
9f006569:	00 00                	add    BYTE PTR [eax],al
9f00656b:	00 12                	add    BYTE PTR [edx],dl
9f00656d:	00 01                	add    BYTE PTR [ecx],al
9f00656f:	00 20                	add    BYTE PTR [eax],ah
9f006571:	01 00                	add    DWORD PTR [eax],eax
9f006573:	00 12                	add    BYTE PTR [edx],dl
9f006575:	19 00                	sbb    DWORD PTR [eax],eax
9f006577:	9f                   	lahf   
9f006578:	f4                   	hlt    
9f006579:	01 00                	add    DWORD PTR [eax],eax
9f00657b:	00 12                	add    BYTE PTR [edx],dl
9f00657d:	00 01                	add    BYTE PTR [ecx],al
9f00657f:	00 82 00 00 00 70    	add    BYTE PTR [edx+0x70000000],al
9f006585:	0b 00                	or     eax,DWORD PTR [eax]
9f006587:	9f                   	lahf   
9f006588:	26 00 00             	add    BYTE PTR es:[eax],al
9f00658b:	00 12                	add    BYTE PTR [edx],dl
9f00658d:	00 01                	add    BYTE PTR [ecx],al
9f00658f:	00 fe                	add    dh,bh
9f006591:	00 00                	add    BYTE PTR [eax],al
9f006593:	00 e7                	add    bh,ah
9f006595:	17                   	pop    ss
9f006596:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
9f00659c:	12 00                	adc    al,BYTE PTR [eax]
9f00659e:	01 00                	add    DWORD PTR [eax],eax
9f0065a0:	e3 01                	jecxz  9f0065a3 <__x86.get_pc_thunk.cx+0x15b9>
9f0065a2:	00 00                	add    BYTE PTR [eax],al
9f0065a4:	8c 37                	mov    WORD PTR [edi],?
9f0065a6:	00 9f 3e 00 00 00    	add    BYTE PTR [edi+0x3e],bl
9f0065ac:	12 00                	adc    al,BYTE PTR [eax]
9f0065ae:	01 00                	add    DWORD PTR [eax],eax
9f0065b0:	68 02 00 00 d4       	push   0xd4000002
9f0065b5:	42                   	inc    edx
9f0065b6:	00 9f 44 00 00 00    	add    BYTE PTR [edi+0x44],bl
9f0065bc:	12 00                	adc    al,BYTE PTR [eax]
9f0065be:	01 00                	add    DWORD PTR [eax],eax
9f0065c0:	9e                   	sahf   
9f0065c1:	00 00                	add    BYTE PTR [eax],al
9f0065c3:	00 8c 0f 00 9f 20 00 	add    BYTE PTR [edi+ecx*1+0x209f00],cl
9f0065ca:	00 00                	add    BYTE PTR [eax],al
9f0065cc:	12 00                	adc    al,BYTE PTR [eax]
9f0065ce:	01 00                	add    DWORD PTR [eax],eax
9f0065d0:	7c 01                	jl     9f0065d3 <__x86.get_pc_thunk.cx+0x15e9>
9f0065d2:	00 00                	add    BYTE PTR [eax],al
9f0065d4:	ac                   	lods   al,BYTE PTR ds:[esi]
9f0065d5:	7c 00                	jl     9f0065d7 <__x86.get_pc_thunk.cx+0x15ed>
9f0065d7:	9f                   	lahf   
9f0065d8:	04 00                	add    al,0x0
9f0065da:	00 00                	add    BYTE PTR [eax],al
9f0065dc:	11 00                	adc    DWORD PTR [eax],eax
9f0065de:	13 00                	adc    eax,DWORD PTR [eax]
9f0065e0:	1b 01                	sbb    eax,DWORD PTR [ecx]
9f0065e2:	00 00                	add    BYTE PTR [eax],al
9f0065e4:	c6                   	(bad)  
9f0065e5:	18 00                	sbb    BYTE PTR [eax],al
9f0065e7:	9f                   	lahf   
9f0065e8:	4c                   	dec    esp
9f0065e9:	00 00                	add    BYTE PTR [eax],al
9f0065eb:	00 12                	add    BYTE PTR [edx],dl
9f0065ed:	00 01                	add    BYTE PTR [ecx],al
9f0065ef:	00 68 00             	add    BYTE PTR [eax+0x0],ch
9f0065f2:	00 00                	add    BYTE PTR [eax],al
9f0065f4:	35 09 00 9f 26       	xor    eax,0x269f0009
9f0065f9:	00 00                	add    BYTE PTR [eax],al
9f0065fb:	00 12                	add    BYTE PTR [edx],dl
9f0065fd:	00 01                	add    BYTE PTR [ecx],al
9f0065ff:	00 90 02 00 00 dd    	add    BYTE PTR [eax-0x22fffffe],dl
9f006605:	46                   	inc    esi
9f006606:	00 9f 57 08 00 00    	add    BYTE PTR [edi+0x857],bl
9f00660c:	12 00                	adc    al,BYTE PTR [eax]
9f00660e:	01 00                	add    DWORD PTR [eax],eax
9f006610:	5a                   	pop    edx
9f006611:	02 00                	add    al,BYTE PTR [eax]
9f006613:	00 b4 42 00 9f 1d 00 	add    BYTE PTR [edx+eax*2+0x1d9f00],dh
9f00661a:	00 00                	add    BYTE PTR [eax],al
9f00661c:	12 00                	adc    al,BYTE PTR [eax]
9f00661e:	01 00                	add    DWORD PTR [eax],eax
9f006620:	6a 01                	push   0x1
9f006622:	00 00                	add    BYTE PTR [eax],al
9f006624:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f006625:	7c 00                	jl     9f006627 <__x86.get_pc_thunk.cx+0x163d>
9f006627:	9f                   	lahf   
9f006628:	04 00                	add    al,0x0
9f00662a:	00 00                	add    BYTE PTR [eax],al
9f00662c:	11 00                	adc    DWORD PTR [eax],eax
9f00662e:	13 00                	adc    eax,DWORD PTR [eax]
9f006630:	7d 00                	jge    9f006632 <__x86.get_pc_thunk.cx+0x1648>
9f006632:	00 00                	add    BYTE PTR [eax],al
9f006634:	15 0b 00 9f 26       	adc    eax,0x269f000b
9f006639:	00 00                	add    BYTE PTR [eax],al
9f00663b:	00 12                	add    BYTE PTR [edx],dl
9f00663d:	00 01                	add    BYTE PTR [ecx],al
9f00663f:	00 73 01             	add    BYTE PTR [ebx+0x1],dh
9f006642:	00 00                	add    BYTE PTR [eax],al
9f006644:	a8 7c                	test   al,0x7c
9f006646:	00 9f 04 00 00 00    	add    BYTE PTR [edi+0x4],bl
9f00664c:	11 00                	adc    DWORD PTR [eax],eax
9f00664e:	13 00                	adc    eax,DWORD PTR [eax]
9f006650:	20 02                	and    BYTE PTR [edx],al
9f006652:	00 00                	add    BYTE PTR [eax],al
9f006654:	14 3b                	adc    al,0x3b
9f006656:	00 9f 67 00 00 00    	add    BYTE PTR [edi+0x67],bl
9f00665c:	12 00                	adc    al,BYTE PTR [eax]
9f00665e:	01 00                	add    DWORD PTR [eax],eax
9f006660:	28 02                	sub    BYTE PTR [edx],al
9f006662:	00 00                	add    BYTE PTR [eax],al
9f006664:	50                   	push   eax
9f006665:	3c 00                	cmp    al,0x0
9f006667:	9f                   	lahf   
9f006668:	20 00                	and    BYTE PTR [eax],al
9f00666a:	00 00                	add    BYTE PTR [eax],al
9f00666c:	12 00                	adc    al,BYTE PTR [eax]
9f00666e:	01 00                	add    DWORD PTR [eax],eax
9f006670:	ab                   	stos   DWORD PTR es:[edi],eax
9f006671:	00 00                	add    BYTE PTR [eax],al
9f006673:	00 93 11 00 9f 29    	add    BYTE PTR [ebx+0x299f0011],dl
9f006679:	00 00                	add    BYTE PTR [eax],al
9f00667b:	00 12                	add    BYTE PTR [edx],dl
9f00667d:	00 01                	add    BYTE PTR [ecx],al
9f00667f:	00 5a 00             	add    BYTE PTR [edx+0x0],bl
9f006682:	00 00                	add    BYTE PTR [eax],al
9f006684:	f1                   	icebp  
9f006685:	06                   	push   es
9f006686:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
9f00668c:	12 00                	adc    al,BYTE PTR [eax]
9f00668e:	01 00                	add    DWORD PTR [eax],eax
9f006690:	8b 01                	mov    eax,DWORD PTR [ecx]
9f006692:	00 00                	add    BYTE PTR [eax],al
9f006694:	bb 26 00 9f 23       	mov    ebx,0x239f0026
9f006699:	00 00                	add    BYTE PTR [eax],al
9f00669b:	00 12                	add    BYTE PTR [edx],dl
9f00669d:	00 01                	add    BYTE PTR [ecx],al
9f00669f:	00 10                	add    BYTE PTR [eax],dl
9f0066a1:	00 00                	add    BYTE PTR [eax],al
9f0066a3:	00 b3 01 00 9f 97    	add    BYTE PTR [ebx-0x6860ffff],dh
9f0066a9:	00 00                	add    BYTE PTR [eax],al
9f0066ab:	00 12                	add    BYTE PTR [edx],dl
9f0066ad:	00 01                	add    BYTE PTR [ecx],al
9f0066af:	00 16                	add    BYTE PTR [esi],dl
9f0066b1:	01 00                	add    DWORD PTR [eax],eax
9f0066b3:	00 9d 18 00 9f 29    	add    BYTE PTR [ebp+0x299f0018],bl
9f0066b9:	00 00                	add    BYTE PTR [eax],al
9f0066bb:	00 12                	add    BYTE PTR [edx],dl
9f0066bd:	00 01                	add    BYTE PTR [ecx],al
9f0066bf:	00 b0 01 00 00 6f    	add    BYTE PTR [eax+0x6f000001],dh
9f0066c5:	2d 00 9f 25 00       	sub    eax,0x259f00
9f0066ca:	00 00                	add    BYTE PTR [eax],al
9f0066cc:	12 00                	adc    al,BYTE PTR [eax]
9f0066ce:	01 00                	add    DWORD PTR [eax],eax
9f0066d0:	ea 01 00 00 77 38 00 	jmp    0x38:0x77000001
9f0066d7:	9f                   	lahf   
9f0066d8:	26 00 00             	add    BYTE PTR es:[eax],al
9f0066db:	00 12                	add    BYTE PTR [edx],dl
9f0066dd:	00 01                	add    BYTE PTR [ecx],al
9f0066df:	00 b7 00 00 00 00    	add    BYTE PTR [edi+0x0],dh
9f0066e5:	00 13                	add    BYTE PTR [ebx],dl
9f0066e7:	00 00                	add    BYTE PTR [eax],al
9f0066e9:	00 00                	add    BYTE PTR [eax],al
9f0066eb:	00 10                	add    BYTE PTR [eax],dl
9f0066ed:	00 01                	add    BYTE PTR [ecx],al
9f0066ef:	00 39                	add    BYTE PTR [ecx],bh
9f0066f1:	01 00                	add    DWORD PTR [eax],eax
9f0066f3:	00 91 1b 00 9f 20    	add    BYTE PTR [ecx+0x209f001b],dl
9f0066f9:	00 00                	add    BYTE PTR [eax],al
9f0066fb:	00 12                	add    BYTE PTR [edx],dl
9f0066fd:	00 01                	add    BYTE PTR [ecx],al
9f0066ff:	00 7a 02             	add    BYTE PTR [edx+0x2],bh
9f006702:	00 00                	add    BYTE PTR [eax],al
9f006704:	4e                   	dec    esi
9f006705:	46                   	inc    esi
9f006706:	00 9f 3d 00 00 00    	add    BYTE PTR [edi+0x3d],bl
9f00670c:	12 00                	adc    al,BYTE PTR [eax]
9f00670e:	01 00                	add    DWORD PTR [eax],eax
9f006710:	9f                   	lahf   
9f006711:	01 00                	add    DWORD PTR [eax],eax
9f006713:	00 b7 29 00 9f 20    	add    BYTE PTR [edi+0x209f0029],dh
9f006719:	00 00                	add    BYTE PTR [eax],al
9f00671b:	00 12                	add    BYTE PTR [edx],dl
9f00671d:	00 01                	add    BYTE PTR [ecx],al
9f00671f:	00 47 02             	add    BYTE PTR [edi+0x2],al
9f006722:	00 00                	add    BYTE PTR [eax],al
9f006724:	42                   	inc    edx
9f006725:	40                   	inc    eax
9f006726:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f00672c:	12 00                	adc    al,BYTE PTR [eax]
9f00672e:	01 00                	add    DWORD PTR [eax],eax
9f006730:	cc                   	int3   
9f006731:	00 00                	add    BYTE PTR [eax],al
9f006733:	00 25 12 00 9f 43    	add    BYTE PTR ds:0x439f0012,ah
9f006739:	00 00                	add    BYTE PTR [eax],al
9f00673b:	00 12                	add    BYTE PTR [edx],dl
9f00673d:	00 01                	add    BYTE PTR [ecx],al
9f00673f:	00 92 02 00 00 a1    	add    BYTE PTR [edx-0x5efffffe],dl
9f006745:	4f                   	dec    edi
9f006746:	00 9f 41 00 00 00    	add    BYTE PTR [edi+0x41],bl
9f00674c:	12 00                	adc    al,BYTE PTR [eax]
9f00674e:	01 00                	add    DWORD PTR [eax],eax
9f006750:	88 00                	mov    BYTE PTR [eax],al
9f006752:	00 00                	add    BYTE PTR [eax],al
9f006754:	c4 0b                	les    ecx,FWORD PTR [ebx]
9f006756:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
9f00675c:	12 00                	adc    al,BYTE PTR [eax]
9f00675e:	01 00                	add    DWORD PTR [eax],eax
9f006760:	c7 00 00 00 e2 11    	mov    DWORD PTR [eax],0x11e20000
9f006766:	00 9f 43 00 00 00    	add    BYTE PTR [edi+0x43],bl
9f00676c:	12 00                	adc    al,BYTE PTR [eax]
9f00676e:	01 00                	add    DWORD PTR [eax],eax
9f006770:	f2 01 00             	repnz add DWORD PTR [eax],eax
9f006773:	00 fe                	add    dh,bh
9f006775:	38 00                	cmp    BYTE PTR [eax],al
9f006777:	9f                   	lahf   
9f006778:	1d 00 00 00 12       	sbb    eax,0x12000000
9f00677d:	00 01                	add    BYTE PTR [ecx],al
9f00677f:	00 61 00             	add    BYTE PTR [ecx+0x0],ah
9f006782:	00 00                	add    BYTE PTR [eax],al
9f006784:	de 08                	fimul  WORD PTR [eax]
9f006786:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f00678c:	12 00                	adc    al,BYTE PTR [eax]
9f00678e:	01 00                	add    DWORD PTR [eax],eax
9f006790:	f0 00 00             	lock add BYTE PTR [eax],al
9f006793:	00 ef                	add    bh,ch
9f006795:	16                   	push   ss
9f006796:	00 9f 88 00 00 00    	add    BYTE PTR [edi+0x88],bl
9f00679c:	12 00                	adc    al,BYTE PTR [eax]
9f00679e:	01 00                	add    DWORD PTR [eax],eax
9f0067a0:	d2 01                	rol    BYTE PTR [ecx],cl
9f0067a2:	00 00                	add    BYTE PTR [eax],al
9f0067a4:	d4 36                	aam    0x36
9f0067a6:	00 9f 33 00 00 00    	add    BYTE PTR [edi+0x33],bl
9f0067ac:	12 00                	adc    al,BYTE PTR [eax]
9f0067ae:	01 00                	add    DWORD PTR [eax],eax
9f0067b0:	e9 00 00 00 81       	jmp    200067b5 <sysEnter_Vector+0x1fed67b5>
9f0067b5:	16                   	push   ss
9f0067b6:	00 9f 37 00 00 00    	add    BYTE PTR [edi+0x37],bl
9f0067bc:	12 00                	adc    al,BYTE PTR [eax]
9f0067be:	01 00                	add    DWORD PTR [eax],eax
9f0067c0:	08 00                	or     BYTE PTR [eax],al
9f0067c2:	00 00                	add    BYTE PTR [eax],al
9f0067c4:	70 00                	jo     9f0067c6 <__x86.get_pc_thunk.cx+0x17dc>
9f0067c6:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
9f0067cc:	12 00                	adc    al,BYTE PTR [eax]
9f0067ce:	01 00                	add    DWORD PTR [eax],eax
9f0067d0:	00 02                	add    BYTE PTR [edx],al
9f0067d2:	00 00                	add    BYTE PTR [eax],al
9f0067d4:	9c                   	pushf  
9f0067d5:	39 00                	cmp    DWORD PTR [eax],eax
9f0067d7:	9f                   	lahf   
9f0067d8:	47                   	inc    edi
9f0067d9:	00 00                	add    BYTE PTR [eax],al
9f0067db:	00 12                	add    BYTE PTR [edx],dl
9f0067dd:	00 01                	add    BYTE PTR [ecx],al
9f0067df:	00 61 02             	add    BYTE PTR [ecx+0x2],ah
9f0067e2:	00 00                	add    BYTE PTR [eax],al
9f0067e4:	f4                   	hlt    
9f0067e5:	7c 00                	jl     9f0067e7 <__x86.get_pc_thunk.cx+0x17fd>
9f0067e7:	9f                   	lahf   
9f0067e8:	04 00                	add    al,0x0
9f0067ea:	00 00                	add    BYTE PTR [eax],al
9f0067ec:	11 00                	adc    DWORD PTR [eax],eax
9f0067ee:	13 00                	adc    eax,DWORD PTR [eax]
9f0067f0:	09 01                	or     DWORD PTR [ecx],eax
9f0067f2:	00 00                	add    BYTE PTR [eax],al
9f0067f4:	74 18                	je     9f00680e <__x86.get_pc_thunk.cx+0x1824>
9f0067f6:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
9f0067fc:	12 00                	adc    al,BYTE PTR [eax]
9f0067fe:	01 00                	add    DWORD PTR [eax],eax
9f006800:	84 02                	test   BYTE PTR [edx],al
9f006802:	00 00                	add    BYTE PTR [eax],al
9f006804:	c0 46 00 9f          	rol    BYTE PTR [esi+0x0],0x9f
9f006808:	1d 00 00 00 12       	sbb    eax,0x12000000
9f00680d:	00 01                	add    BYTE PTR [ecx],al
9f00680f:	00 8d 00 00 00 17    	add    BYTE PTR [ebp+0x17000000],cl
9f006815:	0c 00                	or     al,0x0
9f006817:	9f                   	lahf   
9f006818:	23 00                	and    eax,DWORD PTR [eax]
9f00681a:	00 00                	add    BYTE PTR [eax],al
9f00681c:	12 00                	adc    al,BYTE PTR [eax]
9f00681e:	01 00                	add    DWORD PTR [eax],eax
9f006820:	97                   	xchg   edi,eax
9f006821:	02 00                	add    al,BYTE PTR [eax]
9f006823:	00 34 4f             	add    BYTE PTR [edi+ecx*2],dh
9f006826:	00 9f 6d 00 00 00    	add    BYTE PTR [edi+0x6d],bl
9f00682c:	12 00                	adc    al,BYTE PTR [eax]
9f00682e:	01 00                	add    DWORD PTR [eax],eax
9f006830:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006831:	00 00                	add    BYTE PTR [eax],al
9f006833:	00 03                	add    BYTE PTR [ebx],al
9f006835:	0a 00                	or     al,BYTE PTR [eax]
9f006837:	9f                   	lahf   
9f006838:	93                   	xchg   ebx,eax
9f006839:	00 00                	add    BYTE PTR [eax],al
9f00683b:	00 12                	add    BYTE PTR [edx],dl
9f00683d:	00 01                	add    BYTE PTR [ecx],al
9f00683f:	00 34 01             	add    BYTE PTR [ecx+eax*1],dh
9f006842:	00 00                	add    BYTE PTR [eax],al
9f006844:	71 1b                	jno    9f006861 <__x86.get_pc_thunk.cx+0x1877>
9f006846:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f00684c:	12 00                	adc    al,BYTE PTR [eax]
9f00684e:	01 00                	add    DWORD PTR [eax],eax
9f006850:	1c 00                	sbb    al,0x0
9f006852:	00 00                	add    BYTE PTR [eax],al
9f006854:	97                   	xchg   edi,eax
9f006855:	04 00                	add    al,0x0
9f006857:	9f                   	lahf   
9f006858:	1a 00                	sbb    al,BYTE PTR [eax]
9f00685a:	00 00                	add    BYTE PTR [eax],al
9f00685c:	12 00                	adc    al,BYTE PTR [eax]
9f00685e:	01 00                	add    DWORD PTR [eax],eax
9f006860:	a3 00 00 00 6d       	mov    ds:0x6d000000,eax
9f006865:	11 00                	adc    DWORD PTR [eax],eax
9f006867:	9f                   	lahf   
9f006868:	26 00 00             	add    BYTE PTR es:[eax],al
9f00686b:	00 12                	add    BYTE PTR [edx],dl
9f00686d:	00 01                	add    BYTE PTR [ecx],al
9f00686f:	00 54 01 00          	add    BYTE PTR [ecx+eax*1+0x0],dl
9f006873:	00 35 20 00 9f 23    	add    BYTE PTR ds:0x239f0020,dh
9f006879:	00 00                	add    BYTE PTR [eax],al
9f00687b:	00 12                	add    BYTE PTR [edx],dl
9f00687d:	00 01                	add    BYTE PTR [ecx],al
9f00687f:	00 11                	add    BYTE PTR [ecx],dl
9f006881:	02 00                	add    al,BYTE PTR [eax]
9f006883:	00 a1 3a 00 9f 1a    	add    BYTE PTR [ecx+0x1a9f003a],ah
9f006889:	00 00                	add    BYTE PTR [eax],al
9f00688b:	00 12                	add    BYTE PTR [edx],dl
9f00688d:	00 01                	add    BYTE PTR [ecx],al
9f00688f:	00 72 00             	add    BYTE PTR [edx+0x0],dh
9f006892:	00 00                	add    BYTE PTR [eax],al
9f006894:	87 09                	xchg   DWORD PTR [ecx],ecx
9f006896:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f00689c:	12 00                	adc    al,BYTE PTR [eax]
9f00689e:	01 00                	add    DWORD PTR [eax],eax
9f0068a0:	2a 00                	sub    al,BYTE PTR [eax]
9f0068a2:	00 00                	add    BYTE PTR [eax],al
9f0068a4:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0068a5:	05 00 9f 5a 00       	add    eax,0x5a9f00
9f0068aa:	00 00                	add    BYTE PTR [eax],al
9f0068ac:	12 00                	adc    al,BYTE PTR [eax]
9f0068ae:	01 00                	add    DWORD PTR [eax],eax
9f0068b0:	26 01 00             	add    DWORD PTR es:[eax],eax
9f0068b3:	00 06                	add    BYTE PTR [esi],al
9f0068b5:	1b 00                	sbb    eax,DWORD PTR [eax]
9f0068b7:	9f                   	lahf   
9f0068b8:	4f                   	dec    edi
9f0068b9:	00 00                	add    BYTE PTR [eax],al
9f0068bb:	00 12                	add    BYTE PTR [edx],dl
9f0068bd:	00 01                	add    BYTE PTR [ecx],al
9f0068bf:	00 01                	add    BYTE PTR [ecx],al
9f0068c1:	00 00                	add    BYTE PTR [eax],al
9f0068c3:	00 00                	add    BYTE PTR [eax],al
9f0068c5:	00 00                	add    BYTE PTR [eax],al
9f0068c7:	9f                   	lahf   
9f0068c8:	38 00                	cmp    BYTE PTR [eax],al
9f0068ca:	00 00                	add    BYTE PTR [eax],al
9f0068cc:	12 00                	adc    al,BYTE PTR [eax]
9f0068ce:	01 00                	add    DWORD PTR [eax],eax
9f0068d0:	38 02                	cmp    BYTE PTR [edx],al
9f0068d2:	00 00                	add    BYTE PTR [eax],al
9f0068d4:	f0 3d 00 9f 1d 00    	lock cmp eax,0x1d9f00
9f0068da:	00 00                	add    BYTE PTR [eax],al
9f0068dc:	12 00                	adc    al,BYTE PTR [eax]
9f0068de:	01 00                	add    DWORD PTR [eax],eax
9f0068e0:	4f                   	dec    edi
9f0068e1:	02 00                	add    al,BYTE PTR [eax]
9f0068e3:	00 82 41 00 9f 26    	add    BYTE PTR [edx+0x269f0041],al
9f0068e9:	00 00                	add    BYTE PTR [eax],al
9f0068eb:	00 12                	add    BYTE PTR [edx],dl
9f0068ed:	00 01                	add    BYTE PTR [ecx],al
9f0068ef:	00 77 00             	add    BYTE PTR [edi+0x0],dh
9f0068f2:	00 00                	add    BYTE PTR [eax],al
9f0068f4:	c0 0a 00             	ror    BYTE PTR [edx],0x0
9f0068f7:	9f                   	lahf   
9f0068f8:	20 00                	and    BYTE PTR [eax],al
9f0068fa:	00 00                	add    BYTE PTR [eax],al
9f0068fc:	12 00                	adc    al,BYTE PTR [eax]
9f0068fe:	01 00                	add    DWORD PTR [eax],eax
9f006900:	21 00                	and    DWORD PTR [eax],eax
9f006902:	00 00                	add    BYTE PTR [eax],al
9f006904:	b4 04                	mov    ah,0x4
9f006906:	00 9f ba 00 00 00    	add    BYTE PTR [edi+0xba],bl
9f00690c:	12 00                	adc    al,BYTE PTR [eax]
9f00690e:	01 00                	add    DWORD PTR [eax],eax
9f006910:	93                   	xchg   ebx,eax
9f006911:	01 00                	add    DWORD PTR [eax],eax
9f006913:	00 de                	add    dh,bl
9f006915:	26 00 9f 21 00 00 00 	add    BYTE PTR es:[edi+0x21],bl
9f00691c:	12 00                	adc    al,BYTE PTR [eax]
9f00691e:	01 00                	add    DWORD PTR [eax],eax

Disassembly of section .dynstr:

9f006920 <.dynstr>:
9f006920:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006923:	72 63                	jb     9f006988 <__x86.get_pc_thunk.cx+0x199e>
9f006925:	68 72 00 73 74       	push   0x74730072
9f00692a:	72 63                	jb     9f00698f <__x86.get_pc_thunk.cx+0x19a5>
9f00692c:	73 70                	jae    9f00699e <__x86.get_pc_thunk.cx+0x19b4>
9f00692e:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00692f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006932:	72 74                	jb     9f0069a8 <__x86.get_pc_thunk.cx+0x19be>
9f006934:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006935:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
9f006938:	74 6f                	je     9f0069a9 <__x86.get_pc_thunk.cx+0x19bf>
9f00693a:	61                   	popa   
9f00693b:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
9f00693e:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00693f:	69 00 6d 6f 76 65    	imul   eax,DWORD PTR [eax],0x65766f6d
9f006945:	54                   	push   esp
9f006946:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006947:	58                   	pop    eax
9f006948:	59                   	pop    ecx
9f006949:	00 73 61             	add    BYTE PTR [ebx+0x61],dh
9f00694c:	76 65                	jbe    9f0069b3 <__x86.get_pc_thunk.cx+0x19c9>
9f00694e:	43                   	inc    ebx
9f00694f:	75 72                	jne    9f0069c3 <__x86.get_pc_thunk.cx+0x19d9>
9f006951:	73 6f                	jae    9f0069c2 <__x86.get_pc_thunk.cx+0x19d8>
9f006953:	72 50                	jb     9f0069a5 <__x86.get_pc_thunk.cx+0x19bb>
9f006955:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006956:	73 69                	jae    9f0069c1 <__x86.get_pc_thunk.cx+0x19d7>
9f006958:	74 69                	je     9f0069c3 <__x86.get_pc_thunk.cx+0x19d9>
9f00695a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00695b:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00695c:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f00695f:	73 74                	jae    9f0069d5 <__x86.get_pc_thunk.cx+0x19eb>
9f006961:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006962:	72 65                	jb     9f0069c9 <__x86.get_pc_thunk.cx+0x19df>
9f006964:	43                   	inc    ebx
9f006965:	75 72                	jne    9f0069d9 <__x86.get_pc_thunk.cx+0x19ef>
9f006967:	73 6f                	jae    9f0069d8 <__x86.get_pc_thunk.cx+0x19ee>
9f006969:	72 50                	jb     9f0069bb <__x86.get_pc_thunk.cx+0x19d1>
9f00696b:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00696c:	73 69                	jae    9f0069d7 <__x86.get_pc_thunk.cx+0x19ed>
9f00696e:	74 69                	je     9f0069d9 <__x86.get_pc_thunk.cx+0x19ef>
9f006970:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006971:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006972:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f006975:	74 65                	je     9f0069dc <__x86.get_pc_thunk.cx+0x19f2>
9f006977:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006978:	76 00                	jbe    9f00697a <__x86.get_pc_thunk.cx+0x1990>
9f00697a:	73 65                	jae    9f0069e1 <__x86.get_pc_thunk.cx+0x19f7>
9f00697c:	74 65                	je     9f0069e3 <__x86.get_pc_thunk.cx+0x19f9>
9f00697e:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00697f:	76 00                	jbe    9f006981 <__x86.get_pc_thunk.cx+0x1997>
9f006981:	67                   	addr16
9f006982:	65                   	gs
9f006983:	74 63                	je     9f0069e8 <__x86.get_pc_thunk.cx+0x19fe>
9f006985:	77 64                	ja     9f0069eb <__x86.get_pc_thunk.cx+0x1a01>
9f006987:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f00698a:	74 64                	je     9f0069f0 <__x86.get_pc_thunk.cx+0x1a06>
9f00698c:	69 72 00 66 72 65 6f 	imul   esi,DWORD PTR [edx+0x0],0x6f657266
9f006993:	70 65                	jo     9f0069fa <__x86.get_pc_thunk.cx+0x1a10>
9f006995:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006996:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
9f006999:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00699a:	73 65                	jae    9f006a01 <__x86.get_pc_thunk.cx+0x1a17>
9f00699c:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f00699f:	61                   	popa   
9f0069a0:	64 00 77 72          	add    BYTE PTR fs:[edi+0x72],dh
9f0069a4:	69 74 65 00 73 65 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x6b656573
9f0069ab:	6b 
9f0069ac:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0069af:	61                   	popa   
9f0069b0:	74 00                	je     9f0069b2 <__x86.get_pc_thunk.cx+0x19c8>
9f0069b2:	72 65                	jb     9f006a19 <__x86.get_pc_thunk.cx+0x1a2f>
9f0069b4:	73 6f                	jae    9f006a25 <__x86.get_pc_thunk.cx+0x1a3b>
9f0069b6:	6c                   	ins    BYTE PTR es:[edi],dx
9f0069b7:	76 65                	jbe    9f006a1e <__x86.get_pc_thunk.cx+0x1a34>
9f0069b9:	50                   	push   eax
9f0069ba:	61                   	popa   
9f0069bb:	74 68                	je     9f006a25 <__x86.get_pc_thunk.cx+0x1a3b>
9f0069bd:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
9f0069c1:	6c                   	ins    BYTE PTR es:[edi],dx
9f0069c2:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f0069c5:	74 6c                	je     9f006a33 <__x86.get_pc_thunk.cx+0x1a49>
9f0069c7:	69 6e 65 00 75 6e 6c 	imul   ebp,DWORD PTR [esi+0x65],0x6c6e7500
9f0069ce:	69 6e 6b 00 70 75 74 	imul   ebp,DWORD PTR [esi+0x6b],0x74757000
9f0069d5:	73 00                	jae    9f0069d7 <__x86.get_pc_thunk.cx+0x19ed>
9f0069d7:	73 79                	jae    9f006a52 <__x86.get_pc_thunk.cx+0x1a68>
9f0069d9:	73 45                	jae    9f006a20 <__x86.get_pc_thunk.cx+0x1a36>
9f0069db:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0069dc:	74 65                	je     9f006a43 <__x86.get_pc_thunk.cx+0x1a59>
9f0069de:	72 5f                	jb     9f006a3f <__x86.get_pc_thunk.cx+0x1a55>
9f0069e0:	56                   	push   esi
9f0069e1:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
9f0069e6:	00 70 75             	add    BYTE PTR [eax+0x75],dh
9f0069e9:	74 63                	je     9f006a4e <__x86.get_pc_thunk.cx+0x1a64>
9f0069eb:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f0069ee:	74 63                	je     9f006a53 <__x86.get_pc_thunk.cx+0x1a69>
9f0069f0:	68 61 72 00 67       	push   0x67007261
9f0069f5:	65                   	gs
9f0069f6:	74 73                	je     9f006a6b <__x86.get_pc_thunk.cx+0x1a81>
9f0069f8:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f0069fc:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
9f0069ff:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006a00:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
9f006a07:	74 
9f006a08:	00 70 72             	add    BYTE PTR [eax+0x72],dh
9f006a0b:	69 6e 74 64 00 73 6c 	imul   ebp,DWORD PTR [esi+0x74],0x6c730064
9f006a12:	65                   	gs
9f006a13:	65                   	gs
9f006a14:	70 4d                	jo     9f006a63 <__x86.get_pc_thunk.cx+0x1a79>
9f006a16:	53                   	push   ebx
9f006a17:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
9f006a1a:	65                   	gs
9f006a1b:	65                   	gs
9f006a1c:	70 00                	jo     9f006a1e <__x86.get_pc_thunk.cx+0x1a34>
9f006a1e:	73 6c                	jae    9f006a8c <__x86.get_pc_thunk.cx+0x1aa2>
9f006a20:	65                   	gs
9f006a21:	65                   	gs
9f006a22:	70 54                	jo     9f006a78 <__x86.get_pc_thunk.cx+0x1a8e>
9f006a24:	69 63 6b 73 00 6d 6f 	imul   esp,DWORD PTR [ebx+0x6b],0x6f6d0073
9f006a2b:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
9f006a32:	6e 
9f006a33:	61                   	popa   
9f006a34:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a35:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
9f006a38:	72 6b                	jb     9f006aa5 <__x86.get_pc_thunk.cx+0x1abb>
9f006a3a:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
9f006a3d:	65 63 00             	arpl   WORD PTR gs:[eax],ax
9f006a40:	65                   	gs
9f006a41:	78 65                	js     9f006aa8 <__x86.get_pc_thunk.cx+0x1abe>
9f006a43:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
9f006a46:	65                   	gs
9f006a47:	78 65                	js     9f006aae <__x86.get_pc_thunk.cx+0x1ac4>
9f006a49:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
9f006a4c:	77 61                	ja     9f006aaf <__x86.get_pc_thunk.cx+0x1ac5>
9f006a4e:	69 74 70 69 64 00 65 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x78650064
9f006a55:	78 
9f006a56:	69 74 00 73 65 74 63 	imul   esi,DWORD PTR [eax+eax*1+0x73],0x77637465
9f006a5d:	77 
9f006a5e:	64 00 73 70          	add    BYTE PTR fs:[ebx+0x70],dh
9f006a62:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a63:	69 74 00 63 6d 64 6c 	imul   esi,DWORD PTR [eax+eax*1+0x63],0x696c646d
9f006a6a:	69 
9f006a6b:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006a6c:	65                   	gs
9f006a6d:	54                   	push   esp
9f006a6e:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a6f:	41                   	inc    ecx
9f006a70:	72 67                	jb     9f006ad9 <__x86.get_pc_thunk.cx+0x1aef>
9f006a72:	76 00                	jbe    9f006a74 <__x86.get_pc_thunk.cx+0x1a8a>
9f006a74:	73 65                	jae    9f006adb <__x86.get_pc_thunk.cx+0x1af1>
9f006a76:	74 53                	je     9f006acb <__x86.get_pc_thunk.cx+0x1ae1>
9f006a78:	54                   	push   esp
9f006a79:	44                   	inc    esp
9f006a7a:	00 74 61 6b          	add    BYTE PTR [ecx+eiz*2+0x6b],dh
9f006a7e:	65                   	gs
9f006a7f:	41                   	inc    ecx
9f006a80:	44                   	inc    esp
9f006a81:	75 6d                	jne    9f006af0 <__x86.get_pc_thunk.cx+0x1b06>
9f006a83:	70 00                	jo     9f006a85 <__x86.get_pc_thunk.cx+0x1a9b>
9f006a85:	6d                   	ins    DWORD PTR es:[edi],dx
9f006a86:	6d                   	ins    DWORD PTR es:[edi],dx
9f006a87:	61                   	popa   
9f006a88:	70 00                	jo     9f006a8a <__x86.get_pc_thunk.cx+0x1aa0>
9f006a8a:	68 65 61 70 42       	push   0x42706165
9f006a8f:	61                   	popa   
9f006a90:	73 65                	jae    9f006af7 <__x86.get_pc_thunk.cx+0x1b0d>
9f006a92:	00 68 65             	add    BYTE PTR [eax+0x65],ch
9f006a95:	61                   	popa   
9f006a96:	70 43                	jo     9f006adb <__x86.get_pc_thunk.cx+0x1af1>
9f006a98:	75 72                	jne    9f006b0c <__x86.get_pc_thunk.cx+0x1b22>
9f006a9a:	72 00                	jb     9f006a9c <__x86.get_pc_thunk.cx+0x1ab2>
9f006a9c:	68 65 61 70 45       	push   0x45706165
9f006aa1:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006aa2:	64 00 6d 61          	add    BYTE PTR fs:[ebp+0x61],ch
9f006aa6:	6c                   	ins    BYTE PTR es:[edi],dx
9f006aa7:	6c                   	ins    BYTE PTR es:[edi],dx
9f006aa8:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006aa9:	63 00                	arpl   WORD PTR [eax],ax
9f006aab:	72 65                	jb     9f006b12 <__x86.get_pc_thunk.cx+0x1b28>
9f006aad:	61                   	popa   
9f006aae:	6c                   	ins    BYTE PTR es:[edi],dx
9f006aaf:	6c                   	ins    BYTE PTR es:[edi],dx
9f006ab0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006ab1:	63 00                	arpl   WORD PTR [eax],ax
9f006ab3:	66                   	data16
9f006ab4:	72 65                	jb     9f006b1b <__x86.get_pc_thunk.cx+0x1b31>
9f006ab6:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
9f006aba:	6d                   	ins    DWORD PTR es:[edi],dx
9f006abb:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f006abe:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
9f006ac1:	6d                   	ins    DWORD PTR es:[edi],dx
9f006ac2:	73 65                	jae    9f006b29 <__x86.get_pc_thunk.cx+0x1b3f>
9f006ac4:	74 00                	je     9f006ac6 <__x86.get_pc_thunk.cx+0x1adc>
9f006ac6:	70 69                	jo     9f006b31 <__x86.get_pc_thunk.cx+0x1b47>
9f006ac8:	70 65                	jo     9f006b2f <__x86.get_pc_thunk.cx+0x1b45>
9f006aca:	00 64 75 70          	add    BYTE PTR [ebp+esi*2+0x70],ah
9f006ace:	33 00                	xor    eax,DWORD PTR [eax]
9f006ad0:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
9f006ad3:	6c                   	ins    BYTE PTR es:[edi],dx
9f006ad4:	64                   	fs
9f006ad5:	50                   	push   eax
9f006ad6:	72 6f                	jb     9f006b47 <__x86.get_pc_thunk.cx+0x1b5d>
9f006ad8:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
9f006adb:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f006add:	54                   	push   esp
9f006ade:	00 62 75             	add    BYTE PTR [edx+0x75],ah
9f006ae1:	69 6c 64 41 6c 6c 50 	imul   ebp,DWORD PTR [esp+eiz*2+0x41],0x72506c6c
9f006ae8:	72 
9f006ae9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006aea:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
9f006aed:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f006aef:	54                   	push   esp
9f006af0:	73 00                	jae    9f006af2 <__x86.get_pc_thunk.cx+0x1b08>
9f006af2:	73 70                	jae    9f006b64 <__x86.get_pc_thunk.cx+0x1b7a>
9f006af4:	72 69                	jb     9f006b5f <__x86.get_pc_thunk.cx+0x1b75>
9f006af6:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006af7:	74 66                	je     9f006b5f <__x86.get_pc_thunk.cx+0x1b75>
9f006af9:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f006afc:	73 65                	jae    9f006b63 <__x86.get_pc_thunk.cx+0x1b79>
9f006afe:	74 52                	je     9f006b52 <__x86.get_pc_thunk.cx+0x1b68>
9f006b00:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b01:	77 00                	ja     9f006b03 <__x86.get_pc_thunk.cx+0x1b19>
9f006b03:	73 74                	jae    9f006b79 <__x86.get_pc_thunk.cx+0x1b8f>
9f006b05:	72 63                	jb     9f006b6a <__x86.get_pc_thunk.cx+0x1b80>
9f006b07:	61                   	popa   
9f006b08:	74 00                	je     9f006b0a <__x86.get_pc_thunk.cx+0x1b20>
9f006b0a:	73 74                	jae    9f006b80 <__x86.get_pc_thunk.cx+0x1b96>
9f006b0c:	72 6e                	jb     9f006b7c <__x86.get_pc_thunk.cx+0x1b92>
9f006b0e:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
9f006b11:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006b14:	72 63                	jb     9f006b79 <__x86.get_pc_thunk.cx+0x1b8f>
9f006b16:	6d                   	ins    DWORD PTR es:[edi],dx
9f006b17:	70 00                	jo     9f006b19 <__x86.get_pc_thunk.cx+0x1b2f>
9f006b19:	73 74                	jae    9f006b8f <__x86.get_pc_thunk.cx+0x1ba5>
9f006b1b:	72 63                	jb     9f006b80 <__x86.get_pc_thunk.cx+0x1b96>
9f006b1d:	70 79                	jo     9f006b98 <__x86.get_pc_thunk.cx+0x1bae>
9f006b1f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006b22:	72 63                	jb     9f006b87 <__x86.get_pc_thunk.cx+0x1b9d>
9f006b24:	70 79                	jo     9f006b9f <__x86.get_pc_thunk.cx+0x1bb5>
9f006b26:	63 00                	arpl   WORD PTR [eax],ax
9f006b28:	73 74                	jae    9f006b9e <__x86.get_pc_thunk.cx+0x1bb4>
9f006b2a:	72 69                	jb     9f006b95 <__x86.get_pc_thunk.cx+0x1bab>
9f006b2c:	73 6e                	jae    9f006b9c <__x86.get_pc_thunk.cx+0x1bb2>
9f006b2e:	75 6d                	jne    9f006b9d <__x86.get_pc_thunk.cx+0x1bb3>
9f006b30:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006b33:	72 6c                	jb     9f006ba1 <__x86.get_pc_thunk.cx+0x1bb7>
9f006b35:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f006b37:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006b3a:	72 6e                	jb     9f006baa <__x86.get_pc_thunk.cx+0x1bc0>
9f006b3c:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b3d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f006b3f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006b42:	72 6e                	jb     9f006bb2 <__x86.get_pc_thunk.cx+0x1bc8>
9f006b44:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
9f006b47:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006b4a:	72 6e                	jb     9f006bba <__x86.get_pc_thunk.cx+0x1bd0>
9f006b4c:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f006b4f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006b52:	72 74                	jb     9f006bc8 <__x86.get_pc_thunk.cx+0x1bde>
9f006b54:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b55:	75 6c                	jne    9f006bc3 <__x86.get_pc_thunk.cx+0x1bd9>
9f006b57:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006b5a:	72 6c                	jb     9f006bc8 <__x86.get_pc_thunk.cx+0x1bde>
9f006b5c:	65                   	gs
9f006b5d:	66                   	data16
9f006b5e:	74 00                	je     9f006b60 <__x86.get_pc_thunk.cx+0x1b76>
9f006b60:	73 74                	jae    9f006bd6 <__x86.get_pc_thunk.cx+0x1bec>
9f006b62:	72 74                	jb     9f006bd8 <__x86.get_pc_thunk.cx+0x1bee>
9f006b64:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b65:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b66:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006b69:	72 74                	jb     9f006bdf <__x86.get_pc_thunk.cx+0x1bf5>
9f006b6b:	72 69                	jb     9f006bd6 <__x86.get_pc_thunk.cx+0x1bec>
9f006b6d:	6d                   	ins    DWORD PTR es:[edi],dx
9f006b6e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006b71:	72 72                	jb     9f006be5 <__x86.get_pc_thunk.cx+0x1bfb>
9f006b73:	65                   	gs
9f006b74:	70 6c                	jo     9f006be2 <__x86.get_pc_thunk.cx+0x1bf8>
9f006b76:	61                   	popa   
9f006b77:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
9f006b7a:	73 74                	jae    9f006bf0 <__x86.get_pc_thunk.cx+0x1c06>
9f006b7c:	72 73                	jb     9f006bf1 <__x86.get_pc_thunk.cx+0x1c07>
9f006b7e:	74 72                	je     9f006bf2 <__x86.get_pc_thunk.cx+0x1c08>
9f006b80:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f006b84:	63 54 5a 00          	arpl   WORD PTR [edx+ebx*2+0x0],dx
9f006b88:	67                   	addr16
9f006b89:	65                   	gs
9f006b8a:	74 74                	je     9f006c00 <__x86.get_pc_thunk.cx+0x1c16>
9f006b8c:	69 63 6b 73 00 67 6d 	imul   esp,DWORD PTR [ebx+0x6b],0x6d670073
9f006b93:	74 69                	je     9f006bfe <__x86.get_pc_thunk.cx+0x1c14>
9f006b95:	6d                   	ins    DWORD PTR es:[edi],dx
9f006b96:	65                   	gs
9f006b97:	5f                   	pop    edi
9f006b98:	72 00                	jb     9f006b9a <__x86.get_pc_thunk.cx+0x1bb0>
9f006b9a:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b9b:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b9c:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f006b9f:	74 69                	je     9f006c0a <__x86.get_pc_thunk.cx+0x1c20>
9f006ba1:	6d                   	ins    DWORD PTR es:[edi],dx
9f006ba2:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
9f006ba7:	61                   	popa   
9f006ba8:	6c                   	ins    BYTE PTR es:[edi],dx
9f006ba9:	74 69                	je     9f006c14 <__x86.get_pc_thunk.cx+0x1c2a>
9f006bab:	6d                   	ins    DWORD PTR es:[edi],dx
9f006bac:	65                   	gs
9f006bad:	5f                   	pop    edi
9f006bae:	72 00                	jb     9f006bb0 <__x86.get_pc_thunk.cx+0x1bc6>
9f006bb0:	6d                   	ins    DWORD PTR es:[edi],dx
9f006bb1:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
9f006bb6:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f006bb9:	74 74                	je     9f006c2f <__x86.get_pc_thunk.cx+0x1c45>
9f006bbb:	69                   	.byte 0x69
9f006bbc:	6d                   	ins    DWORD PTR es:[edi],dx
9f006bbd:	65                   	gs
	...

Disassembly of section .hash:

9f006bc0 <.hash>:
9f006bc0:	43                   	inc    ebx
9f006bc1:	00 00                	add    BYTE PTR [eax],al
9f006bc3:	00 57 00             	add    BYTE PTR [edi+0x0],dl
	...
9f006bd2:	00 00                	add    BYTE PTR [eax],al
9f006bd4:	20 00                	and    BYTE PTR [eax],al
9f006bd6:	00 00                	add    BYTE PTR [eax],al
9f006bd8:	51                   	push   ecx
9f006bd9:	00 00                	add    BYTE PTR [eax],al
9f006bdb:	00 45 00             	add    BYTE PTR [ebp+0x0],al
9f006bde:	00 00                	add    BYTE PTR [eax],al
9f006be0:	44                   	inc    esp
9f006be1:	00 00                	add    BYTE PTR [eax],al
9f006be3:	00 1e                	add    BYTE PTR [esi],bl
9f006be5:	00 00                	add    BYTE PTR [eax],al
9f006be7:	00 17                	add    BYTE PTR [edi],dl
9f006be9:	00 00                	add    BYTE PTR [eax],al
9f006beb:	00 00                	add    BYTE PTR [eax],al
9f006bed:	00 00                	add    BYTE PTR [eax],al
9f006bef:	00 13                	add    BYTE PTR [ebx],dl
9f006bf1:	00 00                	add    BYTE PTR [eax],al
9f006bf3:	00 2a                	add    BYTE PTR [edx],ch
9f006bf5:	00 00                	add    BYTE PTR [eax],al
9f006bf7:	00 00                	add    BYTE PTR [eax],al
9f006bf9:	00 00                	add    BYTE PTR [eax],al
9f006bfb:	00 50 00             	add    BYTE PTR [eax+0x0],dl
9f006bfe:	00 00                	add    BYTE PTR [eax],al
9f006c00:	1c 00                	sbb    al,0x0
9f006c02:	00 00                	add    BYTE PTR [eax],al
9f006c04:	3c 00                	cmp    al,0x0
9f006c06:	00 00                	add    BYTE PTR [eax],al
9f006c08:	00 00                	add    BYTE PTR [eax],al
9f006c0a:	00 00                	add    BYTE PTR [eax],al
9f006c0c:	29 00                	sub    DWORD PTR [eax],eax
9f006c0e:	00 00                	add    BYTE PTR [eax],al
9f006c10:	3b 00                	cmp    eax,DWORD PTR [eax]
9f006c12:	00 00                	add    BYTE PTR [eax],al
9f006c14:	14 00                	adc    al,0x0
9f006c16:	00 00                	add    BYTE PTR [eax],al
9f006c18:	00 00                	add    BYTE PTR [eax],al
9f006c1a:	00 00                	add    BYTE PTR [eax],al
9f006c1c:	39 00                	cmp    DWORD PTR [eax],eax
9f006c1e:	00 00                	add    BYTE PTR [eax],al
9f006c20:	4a                   	dec    edx
9f006c21:	00 00                	add    BYTE PTR [eax],al
9f006c23:	00 01                	add    BYTE PTR [ecx],al
9f006c25:	00 00                	add    BYTE PTR [eax],al
9f006c27:	00 35 00 00 00 54    	add    BYTE PTR ds:0x54000000,dh
9f006c2d:	00 00                	add    BYTE PTR [eax],al
9f006c2f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f006c32:	00 00                	add    BYTE PTR [eax],al
9f006c34:	00 00                	add    BYTE PTR [eax],al
9f006c36:	00 00                	add    BYTE PTR [eax],al
9f006c38:	43                   	inc    ebx
9f006c39:	00 00                	add    BYTE PTR [eax],al
9f006c3b:	00 00                	add    BYTE PTR [eax],al
9f006c3d:	00 00                	add    BYTE PTR [eax],al
9f006c3f:	00 52 00             	add    BYTE PTR [edx+0x0],dl
9f006c42:	00 00                	add    BYTE PTR [eax],al
9f006c44:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f006c47:	00 1d 00 00 00 4c    	add    BYTE PTR ds:0x4c000000,bl
9f006c4d:	00 00                	add    BYTE PTR [eax],al
9f006c4f:	00 19                	add    BYTE PTR [ecx],bl
9f006c51:	00 00                	add    BYTE PTR [eax],al
9f006c53:	00 33                	add    BYTE PTR [ebx],dh
9f006c55:	00 00                	add    BYTE PTR [eax],al
9f006c57:	00 00                	add    BYTE PTR [eax],al
9f006c59:	00 00                	add    BYTE PTR [eax],al
9f006c5b:	00 41 00             	add    BYTE PTR [ecx+0x0],al
9f006c5e:	00 00                	add    BYTE PTR [eax],al
9f006c60:	46                   	inc    esi
9f006c61:	00 00                	add    BYTE PTR [eax],al
9f006c63:	00 2f                	add    BYTE PTR [edi],ch
9f006c65:	00 00                	add    BYTE PTR [eax],al
9f006c67:	00 42 00             	add    BYTE PTR [edx+0x0],al
9f006c6a:	00 00                	add    BYTE PTR [eax],al
9f006c6c:	4e                   	dec    esi
9f006c6d:	00 00                	add    BYTE PTR [eax],al
9f006c6f:	00 55 00             	add    BYTE PTR [ebp+0x0],dl
9f006c72:	00 00                	add    BYTE PTR [eax],al
9f006c74:	30 00                	xor    BYTE PTR [eax],al
9f006c76:	00 00                	add    BYTE PTR [eax],al
9f006c78:	4f                   	dec    edi
9f006c79:	00 00                	add    BYTE PTR [eax],al
9f006c7b:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
	...
9f006c92:	00 00                	add    BYTE PTR [eax],al
9f006c94:	47                   	inc    edi
	...
9f006c9d:	00 00                	add    BYTE PTR [eax],al
9f006c9f:	00 3d 00 00 00 00    	add    BYTE PTR ds:0x0,bh
9f006ca5:	00 00                	add    BYTE PTR [eax],al
9f006ca7:	00 0d 00 00 00 37    	add    BYTE PTR ds:0x37000000,cl
9f006cad:	00 00                	add    BYTE PTR [eax],al
9f006caf:	00 00                	add    BYTE PTR [eax],al
9f006cb1:	00 00                	add    BYTE PTR [eax],al
9f006cb3:	00 49 00             	add    BYTE PTR [ecx+0x0],cl
9f006cb6:	00 00                	add    BYTE PTR [eax],al
9f006cb8:	21 00                	and    DWORD PTR [eax],eax
9f006cba:	00 00                	add    BYTE PTR [eax],al
9f006cbc:	56                   	push   esi
9f006cbd:	00 00                	add    BYTE PTR [eax],al
9f006cbf:	00 10                	add    BYTE PTR [eax],dl
9f006cc1:	00 00                	add    BYTE PTR [eax],al
9f006cc3:	00 38                	add    BYTE PTR [eax],bh
9f006cc5:	00 00                	add    BYTE PTR [eax],al
9f006cc7:	00 16                	add    BYTE PTR [esi],dl
9f006cc9:	00 00                	add    BYTE PTR [eax],al
9f006ccb:	00 4b 00             	add    BYTE PTR [ebx+0x0],cl
9f006cce:	00 00                	add    BYTE PTR [eax],al
9f006cd0:	0a 00                	or     al,BYTE PTR [eax]
	...
9f006d02:	00 00                	add    BYTE PTR [eax],al
9f006d04:	0b 00                	or     eax,DWORD PTR [eax]
	...
9f006d1a:	00 00                	add    BYTE PTR [eax],al
9f006d1c:	02 00                	add    al,BYTE PTR [eax]
	...
9f006d26:	00 00                	add    BYTE PTR [eax],al
9f006d28:	09 00                	or     DWORD PTR [eax],eax
	...
9f006d36:	00 00                	add    BYTE PTR [eax],al
9f006d38:	0f 00 00             	sldt   WORD PTR [eax]
	...
9f006d43:	00 07                	add    BYTE PTR [edi],al
9f006d45:	00 00                	add    BYTE PTR [eax],al
9f006d47:	00 00                	add    BYTE PTR [eax],al
9f006d49:	00 00                	add    BYTE PTR [eax],al
9f006d4b:	00 05 00 00 00 00    	add    BYTE PTR ds:0x0,al
9f006d51:	00 00                	add    BYTE PTR [eax],al
9f006d53:	00 06                	add    BYTE PTR [esi],al
	...
9f006d5d:	00 00                	add    BYTE PTR [eax],al
9f006d5f:	00 0e                	add    BYTE PTR [esi],cl
9f006d61:	00 00                	add    BYTE PTR [eax],al
9f006d63:	00 1a                	add    BYTE PTR [edx],bl
9f006d65:	00 00                	add    BYTE PTR [eax],al
9f006d67:	00 08                	add    BYTE PTR [eax],cl
9f006d69:	00 00                	add    BYTE PTR [eax],al
9f006d6b:	00 00                	add    BYTE PTR [eax],al
9f006d6d:	00 00                	add    BYTE PTR [eax],al
9f006d6f:	00 22                	add    BYTE PTR [edx],ah
	...
9f006d79:	00 00                	add    BYTE PTR [eax],al
9f006d7b:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
9f006d7e:	00 00                	add    BYTE PTR [eax],al
9f006d80:	25 00 00 00 00       	and    eax,0x0
9f006d85:	00 00                	add    BYTE PTR [eax],al
9f006d87:	00 04 00             	add    BYTE PTR [eax+eax*1],al
9f006d8a:	00 00                	add    BYTE PTR [eax],al
9f006d8c:	00 00                	add    BYTE PTR [eax],al
9f006d8e:	00 00                	add    BYTE PTR [eax],al
9f006d90:	2b 00                	sub    eax,DWORD PTR [eax]
9f006d92:	00 00                	add    BYTE PTR [eax],al
9f006d94:	00 00                	add    BYTE PTR [eax],al
9f006d96:	00 00                	add    BYTE PTR [eax],al
9f006d98:	1f                   	pop    ds
9f006d99:	00 00                	add    BYTE PTR [eax],al
9f006d9b:	00 00                	add    BYTE PTR [eax],al
9f006d9d:	00 00                	add    BYTE PTR [eax],al
9f006d9f:	00 2e                	add    BYTE PTR [esi],ch
	...
9f006da9:	00 00                	add    BYTE PTR [eax],al
9f006dab:	00 32                	add    BYTE PTR [edx],dh
	...
9f006db5:	00 00                	add    BYTE PTR [eax],al
9f006db7:	00 27                	add    BYTE PTR [edi],ah
9f006db9:	00 00                	add    BYTE PTR [eax],al
9f006dbb:	00 12                	add    BYTE PTR [edx],dl
9f006dbd:	00 00                	add    BYTE PTR [eax],al
9f006dbf:	00 36                	add    BYTE PTR [esi],dh
9f006dc1:	00 00                	add    BYTE PTR [eax],al
9f006dc3:	00 2d 00 00 00 00    	add    BYTE PTR ds:0x0,ch
9f006dc9:	00 00                	add    BYTE PTR [eax],al
9f006dcb:	00 34 00             	add    BYTE PTR [eax+eax*1],dh
9f006dce:	00 00                	add    BYTE PTR [eax],al
9f006dd0:	00 00                	add    BYTE PTR [eax],al
9f006dd2:	00 00                	add    BYTE PTR [eax],al
9f006dd4:	3a 00                	cmp    al,BYTE PTR [eax]
9f006dd6:	00 00                	add    BYTE PTR [eax],al
9f006dd8:	00 00                	add    BYTE PTR [eax],al
9f006dda:	00 00                	add    BYTE PTR [eax],al
9f006ddc:	18 00                	sbb    BYTE PTR [eax],al
9f006dde:	00 00                	add    BYTE PTR [eax],al
9f006de0:	31 00                	xor    DWORD PTR [eax],eax
9f006de2:	00 00                	add    BYTE PTR [eax],al
9f006de4:	1b 00                	sbb    eax,DWORD PTR [eax]
9f006de6:	00 00                	add    BYTE PTR [eax],al
9f006de8:	40                   	inc    eax
9f006de9:	00 00                	add    BYTE PTR [eax],al
9f006deb:	00 15 00 00 00 00    	add    BYTE PTR ds:0x0,dl
9f006df1:	00 00                	add    BYTE PTR [eax],al
9f006df3:	00 00                	add    BYTE PTR [eax],al
9f006df5:	00 00                	add    BYTE PTR [eax],al
9f006df7:	00 28                	add    BYTE PTR [eax],ch
	...
9f006e01:	00 00                	add    BYTE PTR [eax],al
9f006e03:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f006e06:	00 00                	add    BYTE PTR [eax],al
9f006e08:	23 00                	and    eax,DWORD PTR [eax]
9f006e0a:	00 00                	add    BYTE PTR [eax],al
9f006e0c:	00 00                	add    BYTE PTR [eax],al
9f006e0e:	00 00                	add    BYTE PTR [eax],al
9f006e10:	48                   	dec    eax
9f006e11:	00 00                	add    BYTE PTR [eax],al
9f006e13:	00 03                	add    BYTE PTR [ebx],al
9f006e15:	00 00                	add    BYTE PTR [eax],al
9f006e17:	00 26                	add    BYTE PTR [esi],ah
9f006e19:	00 00                	add    BYTE PTR [eax],al
9f006e1b:	00 3f                	add    BYTE PTR [edi],bh
9f006e1d:	00 00                	add    BYTE PTR [eax],al
9f006e1f:	00 00                	add    BYTE PTR [eax],al
9f006e21:	00 00                	add    BYTE PTR [eax],al
9f006e23:	00 11                	add    BYTE PTR [ecx],dl
9f006e25:	00 00                	add    BYTE PTR [eax],al
9f006e27:	00 53 00             	add    BYTE PTR [ebx+0x0],dl
9f006e2a:	00 00                	add    BYTE PTR [eax],al
9f006e2c:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame_hdr:

9f006e30 <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
9f006e30:	01 1b                	add    DWORD PTR [ebx],ebx
9f006e32:	03 3b                	add    edi,DWORD PTR [ebx]
9f006e34:	bc e1 ff ff 90       	mov    esp,0x90ffffe1
9f006e39:	00 00                	add    BYTE PTR [eax],al
9f006e3b:	00 d0                	add    al,dl
9f006e3d:	91                   	xchg   ecx,eax
9f006e3e:	ff                   	(bad)  
9f006e3f:	ff d8                	call   <internal disassembler error>
9f006e41:	e1 ff                	loope  9f006e42 <__GNU_EH_FRAME_HDR+0x12>
9f006e43:	ff 08                	dec    DWORD PTR [eax]
9f006e45:	92                   	xchg   edx,eax
9f006e46:	ff                   	(bad)  
9f006e47:	ff                   	(bad)  
9f006e48:	f8                   	clc    
9f006e49:	e1 ff                	loope  9f006e4a <__GNU_EH_FRAME_HDR+0x1a>
9f006e4b:	ff 40 92             	inc    DWORD PTR [eax-0x6e]
9f006e4e:	ff                   	(bad)  
9f006e4f:	ff 2c e2             	jmp    FWORD PTR [edx+eiz*8]
9f006e52:	ff                   	(bad)  
9f006e53:	ff 95 92 ff ff 54    	call   DWORD PTR [ebp+0x54ffff92]
9f006e59:	e2 ff                	loop   9f006e5a <__GNU_EH_FRAME_HDR+0x2a>
9f006e5b:	ff ec                	jmp    <internal disassembler error>
9f006e5d:	92                   	xchg   edx,eax
9f006e5e:	ff                   	(bad)  
9f006e5f:	ff                   	(bad)  
9f006e60:	7c e2                	jl     9f006e44 <__GNU_EH_FRAME_HDR+0x14>
9f006e62:	ff                   	(bad)  
9f006e63:	ff 83 93 ff ff a4    	inc    DWORD PTR [ebx-0x5b00006d]
9f006e69:	e2 ff                	loop   9f006e6a <__GNU_EH_FRAME_HDR+0x3a>
9f006e6b:	ff 1c 94             	call   FWORD PTR [esp+edx*4]
9f006e6e:	ff                   	(bad)  
9f006e6f:	ff e0                	jmp    eax
9f006e71:	e2 ff                	loop   9f006e72 <__GNU_EH_FRAME_HDR+0x42>
9f006e73:	ff 93 94 ff ff 04    	call   DWORD PTR [ebx+0x4ffff94]
9f006e79:	e3 ff                	jecxz  9f006e7a <__GNU_EH_FRAME_HDR+0x4a>
9f006e7b:	ff 4e 95             	dec    DWORD PTR [esi-0x6b]
9f006e7e:	ff                   	(bad)  
9f006e7f:	ff 28                	jmp    FWORD PTR [eax]
9f006e81:	e3 ff                	jecxz  9f006e82 <__GNU_EH_FRAME_HDR+0x52>
9f006e83:	ff 0b                	dec    DWORD PTR [ebx]
9f006e85:	96                   	xchg   esi,eax
9f006e86:	ff                   	(bad)  
9f006e87:	ff 4c e3 ff          	dec    DWORD PTR [ebx+eiz*8-0x1]
9f006e8b:	ff 67 96             	jmp    DWORD PTR [edi-0x6a]
9f006e8e:	ff                   	(bad)  
9f006e8f:	ff 6c e3 ff          	jmp    FWORD PTR [ebx+eiz*8-0x1]
9f006e93:	ff 84 96 ff ff 8c e3 	inc    DWORD PTR [esi+edx*4-0x1c730001]
9f006e9a:	ff                   	(bad)  
9f006e9b:	ff                   	(bad)  
9f006e9c:	3e                   	ds
9f006e9d:	97                   	xchg   edi,eax
9f006e9e:	ff                   	(bad)  
9f006e9f:	ff b0 e3 ff ff 98    	push   DWORD PTR [eax-0x6700001d]
9f006ea5:	97                   	xchg   edi,eax
9f006ea6:	ff                   	(bad)  
9f006ea7:	ff d4                	call   esp
9f006ea9:	e3 ff                	jecxz  9f006eaa <__GNU_EH_FRAME_HDR+0x7a>
9f006eab:	ff f4                	push   esp
9f006ead:	97                   	xchg   edi,eax
9f006eae:	ff                   	(bad)  
9f006eaf:	ff                   	(bad)  
9f006eb0:	f8                   	clc    
9f006eb1:	e3 ff                	jecxz  9f006eb2 <__GNU_EH_FRAME_HDR+0x82>
9f006eb3:	ff 9e 98 ff ff 1c    	call   FWORD PTR [esi+0x1cffff98]
9f006eb9:	e4 ff                	in     al,0xff
9f006ebb:	ff c1                	inc    ecx
9f006ebd:	98                   	cwde   
9f006ebe:	ff                   	(bad)  
9f006ebf:	ff                   	(bad)  
9f006ec0:	3c e4                	cmp    al,0xe4
9f006ec2:	ff                   	(bad)  
9f006ec3:	ff 82 9a ff ff 60    	inc    DWORD PTR [edx+0x60ffff9a]
9f006ec9:	e4 ff                	in     al,0xff
9f006ecb:	ff ae 9a ff ff 84    	jmp    FWORD PTR [esi-0x7b000066]
9f006ed1:	e4 ff                	in     al,0xff
9f006ed3:	ff d4                	call   esp
9f006ed5:	9a ff ff a4 e4 ff ff 	call   0xffff:0xe4a4ffff
9f006edc:	05 9b ff ff c8       	add    eax,0xc8ffff9b
9f006ee1:	e4 ff                	in     al,0xff
9f006ee3:	ff 2b                	jmp    FWORD PTR [ebx]
9f006ee5:	9b                   	fwait
9f006ee6:	ff                   	(bad)  
9f006ee7:	ff e8                	jmp    <internal disassembler error>
9f006ee9:	e4 ff                	in     al,0xff
9f006eeb:	ff 57 9b             	call   DWORD PTR [edi-0x65]
9f006eee:	ff                   	(bad)  
9f006eef:	ff 0c e5 ff ff 7a 9b 	dec    DWORD PTR [eiz*8-0x64850001]
9f006ef6:	ff                   	(bad)  
9f006ef7:	ff 2c e5 ff ff d3 9b 	jmp    FWORD PTR [eiz*8-0x642c0001]
9f006efe:	ff                   	(bad)  
9f006eff:	ff 50 e5             	call   DWORD PTR [eax-0x1b]
9f006f02:	ff                   	(bad)  
9f006f03:	ff 66 9c             	jmp    DWORD PTR [esi-0x64]
9f006f06:	ff                   	(bad)  
9f006f07:	ff                   	(bad)  
9f006f08:	78 e5                	js     9f006eef <__GNU_EH_FRAME_HDR+0xbf>
9f006f0a:	ff                   	(bad)  
9f006f0b:	ff 90 9c ff ff 9c    	call   DWORD PTR [eax-0x63000064]
9f006f11:	e5 ff                	in     eax,0xff
9f006f13:	ff b0 9c ff ff bc    	push   DWORD PTR [eax-0x43000064]
9f006f19:	e5 ff                	in     eax,0xff
9f006f1b:	ff e5                	jmp    ebp
9f006f1d:	9c                   	pushf  
9f006f1e:	ff                   	(bad)  
9f006f1f:	ff e4                	jmp    esp
9f006f21:	e5 ff                	in     eax,0xff
9f006f23:	ff 0b                	dec    DWORD PTR [ebx]
9f006f25:	9d                   	popf   
9f006f26:	ff                   	(bad)  
9f006f27:	ff 04 e6             	inc    DWORD PTR [esi+eiz*8]
9f006f2a:	ff                   	(bad)  
9f006f2b:	ff 40 9d             	inc    DWORD PTR [eax-0x63]
9f006f2e:	ff                   	(bad)  
9f006f2f:	ff 2c e6             	jmp    FWORD PTR [esi+eiz*8]
9f006f32:	ff                   	(bad)  
9f006f33:	ff 66 9d             	jmp    DWORD PTR [esi-0x63]
9f006f36:	ff                   	(bad)  
9f006f37:	ff 4c e6 ff          	dec    DWORD PTR [esi+eiz*8-0x1]
9f006f3b:	ff 94 9d ff ff 70 e6 	call   DWORD PTR [ebp+ebx*4-0x198f0001]
9f006f42:	ff                   	(bad)  
9f006f43:	ff                   	(bad)  
9f006f44:	ba 9d ff ff 90       	mov    edx,0x90ffff9d
9f006f49:	e6 ff                	out    0xff,al
9f006f4b:	ff e7                	jmp    edi
9f006f4d:	9d                   	popf   
9f006f4e:	ff                   	(bad)  
9f006f4f:	ff b4 e6 ff ff 0a 9e 	push   DWORD PTR [esi+eiz*8-0x61f50001]
9f006f56:	ff                   	(bad)  
9f006f57:	ff d4                	call   esp
9f006f59:	e6 ff                	out    0xff,al
9f006f5b:	ff 33                	push   DWORD PTR [ebx]
9f006f5d:	a1 ff ff f8 e6       	mov    eax,ds:0xe6f8ffff
9f006f62:	ff                   	(bad)  
9f006f63:	ff 5c a1 ff          	call   FWORD PTR [ecx+eiz*4-0x1]
9f006f67:	ff 1c e7             	call   FWORD PTR [edi+eiz*8]
9f006f6a:	ff                   	(bad)  
9f006f6b:	ff                   	(bad)  
9f006f6c:	7c a1                	jl     9f006f0f <__GNU_EH_FRAME_HDR+0xdf>
9f006f6e:	ff                   	(bad)  
9f006f6f:	ff                   	(bad)  
9f006f70:	3c e7                	cmp    al,0xe7
9f006f72:	ff                   	(bad)  
9f006f73:	ff                   	(bad)  
9f006f74:	3d a3 ff ff 60       	cmp    eax,0x60ffffa3
9f006f79:	e7 ff                	out    0xff,eax
9f006f7b:	ff 63 a3             	jmp    DWORD PTR [ebx-0x5d]
9f006f7e:	ff                   	(bad)  
9f006f7f:	ff 80 e7 ff ff 8c    	inc    DWORD PTR [eax-0x73000019]
9f006f85:	a3 ff ff a4 e7       	mov    ds:0xe7a4ffff,eax
9f006f8a:	ff                   	(bad)  
9f006f8b:	ff b2 a3 ff ff c8    	push   DWORD PTR [edx-0x3700005d]
9f006f91:	e7 ff                	out    0xff,eax
9f006f93:	ff f5                	push   ebp
9f006f95:	a3 ff ff ec e7       	mov    ds:0xe7ecffff,eax
9f006f9a:	ff                   	(bad)  
9f006f9b:	ff                   	(bad)  
9f006f9c:	38 a4 ff ff 10 e8 ff 	cmp    BYTE PTR [edi+edi*8-0x17ef01],ah
9f006fa3:	ff                   	(bad)  
9f006fa4:	f8                   	clc    
9f006fa5:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f006fa6:	ff                   	(bad)  
9f006fa7:	ff 34 e8             	push   DWORD PTR [eax+ebp*8]
9f006faa:	ff                   	(bad)  
9f006fab:	ff 32                	push   DWORD PTR [edx]
9f006fad:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f006fae:	ff                   	(bad)  
9f006faf:	ff 5c e8 ff          	call   FWORD PTR [eax+ebp*8-0x1]
9f006fb3:	ff 6e a5             	jmp    FWORD PTR [esi-0x5b]
9f006fb6:	ff                   	(bad)  
9f006fb7:	ff 84 e8 ff ff ac a5 	inc    DWORD PTR [eax+ebp*8-0x5a530001]
9f006fbe:	ff                   	(bad)  
9f006fbf:	ff ac e8 ff ff ec a5 	jmp    FWORD PTR [eax+ebp*8-0x5a130001]
9f006fc6:	ff                   	(bad)  
9f006fc7:	ff d4                	call   esp
9f006fc9:	e8 ff ff 2e a6       	call   452f6fcd <sysEnter_Vector+0x451c6fcd>
9f006fce:	ff                   	(bad)  
9f006fcf:	ff                   	(bad)  
9f006fd0:	fc                   	cld    
9f006fd1:	e8 ff ff f9 a6       	call   45fa6fd5 <sysEnter_Vector+0x45e76fd5>
9f006fd6:	ff                   	(bad)  
9f006fd7:	ff 20                	jmp    DWORD PTR [eax]
9f006fd9:	e9 ff ff 1c a7       	jmp    461d6fdd <sysEnter_Vector+0x460a6fdd>
9f006fde:	ff                   	(bad)  
9f006fdf:	ff 44 e9 ff          	inc    DWORD PTR [ecx+ebp*8-0x1]
9f006fe3:	ff 75 a7             	push   DWORD PTR [ebp-0x59]
9f006fe6:	ff                   	(bad)  
9f006fe7:	ff 68 e9             	jmp    FWORD PTR [eax-0x17]
9f006fea:	ff                   	(bad)  
9f006feb:	ff c9                	dec    ecx
9f006fed:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
9f006fee:	ff                   	(bad)  
9f006fef:	ff 8c e9 ff ff 1d a8 	dec    DWORD PTR [ecx+ebp*8-0x57e20001]
9f006ff6:	ff                   	(bad)  
9f006ff7:	ff b0 e9 ff ff 51    	push   DWORD PTR [eax+0x51ffffe9]
9f006ffd:	a8 ff                	test   al,0xff
9f006fff:	ff d0                	call   eax
9f007001:	e9 ff ff 88 a8       	jmp    47897005 <sysEnter_Vector+0x47767005>
9f007006:	ff                   	(bad)  
9f007007:	ff f0                	push   eax
9f007009:	e9 ff ff bf a8       	jmp    47c0700d <sysEnter_Vector+0x47ad700d>
9f00700e:	ff                   	(bad)  
9f00700f:	ff 10                	call   DWORD PTR [eax]
9f007011:	ea ff ff 47 a9 ff ff 	jmp    0xffff:0xa947ffff
9f007018:	38 ea                	cmp    dl,ch
9f00701a:	ff                   	(bad)  
9f00701b:	ff b7 a9 ff ff 60    	push   DWORD PTR [edi+0x60ffffa9]
9f007021:	ea ff ff 27 aa ff ff 	jmp    0xffff:0xaa27ffff
9f007028:	88 ea                	mov    dl,ch
9f00702a:	ff                   	(bad)  
9f00702b:	ff 44 aa ff          	inc    DWORD PTR [edx+ebp*4-0x1]
9f00702f:	ff a8 ea ff ff 6d    	jmp    FWORD PTR [eax+0x6dffffea]
9f007035:	aa                   	stos   BYTE PTR es:[edi],al
9f007036:	ff                   	(bad)  
9f007037:	ff c8                	dec    eax
9f007039:	ea ff ff 96 aa ff ff 	jmp    0xffff:0xaa96ffff
9f007040:	e8 ea ff ff e2       	call   8200702f <sysEnter_Vector+0x81ed702f>
9f007045:	aa                   	stos   BYTE PTR es:[edi],al
9f007046:	ff                   	(bad)  
9f007047:	ff 08                	dec    DWORD PTR [eax]
9f007049:	eb ff                	jmp    9f00704a <__GNU_EH_FRAME_HDR+0x21a>
9f00704b:	ff d6                	call   esi
9f00704d:	ac                   	lods   al,BYTE PTR ds:[esi]
9f00704e:	ff                   	(bad)  
9f00704f:	ff 2c eb             	jmp    FWORD PTR [ebx+ebp*8]
9f007052:	ff                   	(bad)  
9f007053:	ff 25 ad ff ff 4c    	jmp    DWORD PTR ds:0x4cffffad
9f007059:	eb ff                	jmp    9f00705a <__GNU_EH_FRAME_HDR+0x22a>
9f00705b:	ff 41 ad             	inc    DWORD PTR [ecx-0x53]
9f00705e:	ff                   	(bad)  
9f00705f:	ff 6c eb ff          	jmp    FWORD PTR [ebx+ebp*8-0x1]
9f007063:	ff 61 ad             	jmp    DWORD PTR [ecx-0x53]
9f007066:	ff                   	(bad)  
9f007067:	ff 8c eb ff ff 81 ad 	dec    DWORD PTR [ebx+ebp*8-0x527e0001]
9f00706e:	ff                   	(bad)  
9f00706f:	ff ac eb ff ff c5 ae 	jmp    FWORD PTR [ebx+ebp*8-0x513a0001]
9f007076:	ff                   	(bad)  
9f007077:	ff cc                	dec    esp
9f007079:	eb ff                	jmp    9f00707a <__GNU_EH_FRAME_HDR+0x24a>
9f00707b:	ff e5                	jmp    ebp
9f00707d:	ae                   	scas   al,BYTE PTR es:[edi]
9f00707e:	ff                   	(bad)  
9f00707f:	ff ec                	jmp    <internal disassembler error>
9f007081:	eb ff                	jmp    9f007082 <__GNU_EH_FRAME_HDR+0x252>
9f007083:	ff e2                	jmp    edx
9f007085:	b1 ff                	mov    cl,0xff
9f007087:	ff 18                	call   FWORD PTR [eax]
9f007089:	ec                   	in     al,dx
9f00708a:	ff                   	(bad)  
9f00708b:	ff 05 b2 ff ff 38    	inc    DWORD PTR ds:0x38ffffb2
9f007091:	ec                   	in     al,dx
9f007092:	ff                   	(bad)  
9f007093:	ff 28                	jmp    FWORD PTR [eax]
9f007095:	b2 ff                	mov    dl,0xff
9f007097:	ff 58 ec             	call   FWORD PTR [eax-0x14]
9f00709a:	ff                   	(bad)  
9f00709b:	ff 48 b2             	dec    DWORD PTR [eax-0x4e]
9f00709e:	ff                   	(bad)  
9f00709f:	ff                   	(bad)  
9f0070a0:	78 ec                	js     9f00708e <__GNU_EH_FRAME_HDR+0x25e>
9f0070a2:	ff                   	(bad)  
9f0070a3:	ff                   	(bad)  
9f0070a4:	bc b2 ff ff 9c       	mov    esp,0x9cffffb2
9f0070a9:	ec                   	in     al,dx
9f0070aa:	ff                   	(bad)  
9f0070ab:	ff 1c b3             	call   FWORD PTR [ebx+esi*4]
9f0070ae:	ff                   	(bad)  
9f0070af:	ff c0                	inc    eax
9f0070b1:	ec                   	in     al,dx
9f0070b2:	ff                   	(bad)  
9f0070b3:	ff a3 b3 ff ff e0    	jmp    DWORD PTR [ebx-0x1f00004d]
9f0070b9:	ec                   	in     al,dx
9f0070ba:	ff                   	(bad)  
9f0070bb:	ff 16                	call   DWORD PTR [esi]
9f0070bd:	b4 ff                	mov    ah,0xff
9f0070bf:	ff 04 ed ff ff 9a b4 	inc    DWORD PTR [ebp*8-0x4b650001]
9f0070c6:	ff                   	(bad)  
9f0070c7:	ff 24 ed ff ff 25 b5 	jmp    DWORD PTR [ebp*8-0x4ada0001]
9f0070ce:	ff                   	(bad)  
9f0070cf:	ff 48 ed             	dec    DWORD PTR [eax-0x13]
9f0070d2:	ff                   	(bad)  
9f0070d3:	ff 68 b7             	jmp    FWORD PTR [eax-0x49]
9f0070d6:	ff                   	(bad)  
9f0070d7:	ff 6c ed ff          	jmp    FWORD PTR [ebp+ebp*8-0x1]
9f0070db:	ff 88 b7 ff ff 8c    	dec    DWORD PTR [eax-0x73000049]
9f0070e1:	ed                   	in     eax,dx
9f0070e2:	ff                   	(bad)  
9f0070e3:	ff 8b b8 ff ff b0    	dec    DWORD PTR [ebx-0x4f000048]
9f0070e9:	ed                   	in     eax,dx
9f0070ea:	ff                   	(bad)  
9f0070eb:	ff ae b8 ff ff d0    	jmp    FWORD PTR [esi-0x2f000048]
9f0070f1:	ed                   	in     eax,dx
9f0070f2:	ff                   	(bad)  
9f0070f3:	ff cf                	dec    edi
9f0070f5:	b8 ff ff f0 ed       	mov    eax,0xedf0ffff
9f0070fa:	ff                   	(bad)  
9f0070fb:	ff 04 b9             	inc    DWORD PTR [ecx+edi*4]
9f0070fe:	ff                   	(bad)  
9f0070ff:	ff 14 ee             	call   DWORD PTR [esi+ebp*8]
9f007102:	ff                   	(bad)  
9f007103:	ff 9f ba ff ff 34    	call   FWORD PTR [edi+0x34ffffba]
9f007109:	ee                   	out    dx,al
9f00710a:	ff                   	(bad)  
9f00710b:	ff c0                	inc    eax
9f00710d:	ba ff ff 54 ee       	mov    edx,0xee54ffff
9f007112:	ff                   	(bad)  
9f007113:	ff 87 bb ff ff 74    	inc    DWORD PTR [edi+0x74ffffbb]
9f007119:	ee                   	out    dx,al
9f00711a:	ff                   	(bad)  
9f00711b:	ff a8 bb ff ff 94    	jmp    FWORD PTR [eax-0x6b000045]
9f007121:	ee                   	out    dx,al
9f007122:	ff                   	(bad)  
9f007123:	ff d1                	call   ecx
9f007125:	bb ff ff b8 ee       	mov    ebx,0xeeb8ffff
9f00712a:	ff                   	(bad)  
9f00712b:	ff 00                	inc    DWORD PTR [eax]
9f00712d:	bc ff ff dc ee       	mov    esp,0xeedcffff
9f007132:	ff                   	(bad)  
9f007133:	ff                   	(bad)  
9f007134:	3f                   	aas    
9f007135:	bf ff ff 08 ef       	mov    edi,0xef08ffff
9f00713a:	ff                   	(bad)  
9f00713b:	ff 64 bf ff          	jmp    DWORD PTR [edi+edi*4-0x1]
9f00713f:	ff 28                	jmp    FWORD PTR [eax]
9f007141:	ef                   	out    dx,eax
9f007142:	ff                   	(bad)  
9f007143:	ff 8c c1 ff ff 54 ef 	dec    DWORD PTR [ecx+eax*8-0x10ab0001]
9f00714a:	ff                   	(bad)  
9f00714b:	ff eb                	jmp    <internal disassembler error>
9f00714d:	c1 ff ff             	sar    edi,0xff
9f007150:	78 ef                	js     9f007141 <__GNU_EH_FRAME_HDR+0x311>
9f007152:	ff                   	(bad)  
9f007153:	ff 29                	jmp    FWORD PTR [ecx]
9f007155:	c4                   	(bad)  
9f007156:	ff                   	(bad)  
9f007157:	ff a4 ef ff ff 71 c8 	jmp    DWORD PTR [edi+ebp*8-0x378e0001]
9f00715e:	ff                   	(bad)  
9f00715f:	ff c8                	dec    eax
9f007161:	ef                   	out    dx,eax
9f007162:	ff                   	(bad)  
9f007163:	ff a4 c8 ff ff e8 ef 	jmp    DWORD PTR [eax+ecx*8-0x10170001]
9f00716a:	ff                   	(bad)  
9f00716b:	ff d8                	call   <internal disassembler error>
9f00716d:	c8 ff ff 08          	enter  0xffff,0x8
9f007171:	f0 ff                	lock (bad) 
9f007173:	ff 5c c9 ff          	call   FWORD PTR [ecx+ecx*8-0x1]
9f007177:	ff 2c f0             	jmp    FWORD PTR [eax+esi*8]
9f00717a:	ff                   	(bad)  
9f00717b:	ff 9a c9 ff ff 50    	call   FWORD PTR [edx+0x50ffffc9]
9f007181:	f0 ff                	lock (bad) 
9f007183:	ff d8                	call   <internal disassembler error>
9f007185:	c9                   	leave  
9f007186:	ff                   	(bad)  
9f007187:	ff 74 f0 ff          	push   DWORD PTR [eax+esi*8-0x1]
9f00718b:	ff 47 ca             	inc    DWORD PTR [edi-0x36]
9f00718e:	ff                   	(bad)  
9f00718f:	ff 98 f0 ff ff 70    	call   FWORD PTR [eax+0x70fffff0]
9f007195:	ca ff ff             	retf   0xffff
9f007198:	b8 f0 ff ff ce       	mov    eax,0xcefffff0
9f00719d:	ca ff ff             	retf   0xffff
9f0071a0:	e0 f0                	loopne 9f007192 <__GNU_EH_FRAME_HDR+0x362>
9f0071a2:	ff                   	(bad)  
9f0071a3:	ff ec                	jmp    <internal disassembler error>
9f0071a5:	ca ff ff             	retf   0xffff
9f0071a8:	00 f1                	add    cl,dh
9f0071aa:	ff                   	(bad)  
9f0071ab:	ff 2c cb             	jmp    FWORD PTR [ebx+ecx*8]
9f0071ae:	ff                   	(bad)  
9f0071af:	ff 20                	jmp    DWORD PTR [eax]
9f0071b1:	f1                   	icebp  
9f0071b2:	ff                   	(bad)  
9f0071b3:	ff 6c cb ff          	jmp    FWORD PTR [ebx+ecx*8-0x1]
9f0071b7:	ff 40 f1             	inc    DWORD PTR [eax-0xf]
9f0071ba:	ff                   	(bad)  
9f0071bb:	ff b4 cb ff ff 60 f1 	push   DWORD PTR [ebx+ecx*8-0xe9f0001]
9f0071c2:	ff                   	(bad)  
9f0071c3:	ff e4                	jmp    esp
9f0071c5:	cb                   	retf   
9f0071c6:	ff                   	(bad)  
9f0071c7:	ff 80 f1 ff ff 40    	inc    DWORD PTR [eax+0x40fffff1]
9f0071cd:	cc                   	int3   
9f0071ce:	ff                   	(bad)  
9f0071cf:	ff a0 f1 ff ff 71    	jmp    DWORD PTR [eax+0x71fffff1]
9f0071d5:	cc                   	int3   
9f0071d6:	ff                   	(bad)  
9f0071d7:	ff c0                	inc    eax
9f0071d9:	f1                   	icebp  
9f0071da:	ff                   	(bad)  
9f0071db:	ff 8b cc ff ff e0    	dec    DWORD PTR [ebx-0x1f000034]
9f0071e1:	f1                   	icebp  
9f0071e2:	ff                   	(bad)  
9f0071e3:	ff c4                	inc    esp
9f0071e5:	cc                   	int3   
9f0071e6:	ff                   	(bad)  
9f0071e7:	ff 00                	inc    DWORD PTR [eax]
9f0071e9:	f2 ff                	repnz (bad) 
9f0071eb:	ff e4                	jmp    esp
9f0071ed:	cc                   	int3   
9f0071ee:	ff                   	(bad)  
9f0071ef:	ff 20                	jmp    DWORD PTR [eax]
9f0071f1:	f2 ff                	repnz (bad) 
9f0071f3:	ff 4b cd             	dec    DWORD PTR [ebx-0x33]
9f0071f6:	ff                   	(bad)  
9f0071f7:	ff 40 f2             	inc    DWORD PTR [eax-0xe]
9f0071fa:	ff                   	(bad)  
9f0071fb:	ff b4 cd ff ff 60 f2 	push   DWORD PTR [ebp+ecx*8-0xd9f0001]
9f007202:	ff                   	(bad)  
9f007203:	ff 20                	jmp    DWORD PTR [eax]
9f007205:	ce                   	into   
9f007206:	ff                   	(bad)  
9f007207:	ff 80 f2 ff ff 40    	inc    DWORD PTR [eax+0x40fffff2]
9f00720d:	ce                   	into   
9f00720e:	ff                   	(bad)  
9f00720f:	ff a0 f2 ff ff c0    	jmp    DWORD PTR [eax-0x3f00000e]
9f007215:	cf                   	iret   
9f007216:	ff                   	(bad)  
9f007217:	ff d0                	call   eax
9f007219:	f2 ff                	repnz (bad) 
9f00721b:	ff e0                	jmp    eax
9f00721d:	cf                   	iret   
9f00721e:	ff                   	(bad)  
9f00721f:	ff f0                	push   eax
9f007221:	f2 ff                	repnz (bad) 
9f007223:	ff                   	(bad)  
9f007224:	7c d1                	jl     9f0071f7 <__GNU_EH_FRAME_HDR+0x3c7>
9f007226:	ff                   	(bad)  
9f007227:	ff 20                	jmp    DWORD PTR [eax]
9f007229:	f3 ff                	repz (bad) 
9f00722b:	ff 12                	call   DWORD PTR [edx]
9f00722d:	d2 ff                	sar    bh,cl
9f00722f:	ff 44 f3 ff          	inc    DWORD PTR [ebx+esi*8-0x1]
9f007233:	ff 34 d2             	push   DWORD PTR [edx+edx*8]
9f007236:	ff                   	(bad)  
9f007237:	ff 64 f3 ff          	jmp    DWORD PTR [ebx+esi*8-0x1]
9f00723b:	ff 52 d3             	call   DWORD PTR [edx-0x2d]
9f00723e:	ff                   	(bad)  
9f00723f:	ff 90 f3 ff ff 78    	call   DWORD PTR [eax+0x78fffff3]
9f007245:	d3 ff                	sar    edi,cl
9f007247:	ff b0 f3 ff ff 16    	push   DWORD PTR [eax+0x16fffff3]
9f00724d:	d4 ff                	aam    0xff
9f00724f:	ff d8                	call   <internal disassembler error>
9f007251:	f3 ff                	repz (bad) 
9f007253:	ff 84 d4 ff ff 00 f4 	inc    DWORD PTR [esp+edx*8-0xbff0001]
9f00725a:	ff                   	(bad)  
9f00725b:	ff a4 d4 ff ff 20 f4 	jmp    DWORD PTR [esp+edx*8-0xbdf0001]
9f007262:	ff                   	(bad)  
9f007263:	ff e8                	jmp    <internal disassembler error>
9f007265:	d4 ff                	aam    0xff
9f007267:	ff 48 f4             	dec    DWORD PTR [eax-0xc]
9f00726a:	ff                   	(bad)  
9f00726b:	ff 01                	inc    DWORD PTR [ecx]
9f00726d:	d8 ff                	fdivr  st,st(7)
9f00726f:	ff 70 f4             	push   DWORD PTR [eax-0xc]
9f007272:	ff                   	(bad)  
9f007273:	ff 1e                	call   FWORD PTR [esi]
9f007275:	d8 ff                	fdivr  st,st(7)
9f007277:	ff 90 f4 ff ff 5b    	call   DWORD PTR [eax+0x5bfffff4]
9f00727d:	d8 ff                	fdivr  st,st(7)
9f00727f:	ff b0 f4 ff ff 90    	push   DWORD PTR [eax-0x6f00000c]
9f007285:	d8 ff                	fdivr  st,st(7)
9f007287:	ff d0                	call   eax
9f007289:	f4                   	hlt    
9f00728a:	ff                   	(bad)  
9f00728b:	ff ad d8 ff ff f0    	jmp    FWORD PTR [ebp-0xf000028]
9f007291:	f4                   	hlt    
9f007292:	ff                   	(bad)  
9f007293:	ff 04 e1             	inc    DWORD PTR [ecx+eiz*8]
9f007296:	ff                   	(bad)  
9f007297:	ff 20                	jmp    DWORD PTR [eax]
9f007299:	f5                   	cmc    
9f00729a:	ff                   	(bad)  
9f00729b:	ff 71 e1             	push   DWORD PTR [ecx-0x1f]
9f00729e:	ff                   	(bad)  
9f00729f:	ff 48 f5             	dec    DWORD PTR [eax-0xb]
9f0072a2:	ff                   	(bad)  
9f0072a3:	ff b2 e1 ff ff 18    	push   DWORD PTR [edx+0x18ffffe1]
9f0072a9:	e2 ff                	loop   9f0072aa <__GNU_EH_FRAME_HDR+0x47a>
9f0072ab:	ff b6 e1 ff ff cc    	push   DWORD PTR [esi-0x3300001f]
9f0072b1:	e2 ff                	loop   9f0072b2 <__GNU_EH_FRAME_HDR+0x482>
9f0072b3:	ff                   	(bad)  
9f0072b4:	ba e1 ff ff 6c       	mov    edx,0x6cffffe1
9f0072b9:	f5                   	cmc    
9f0072ba:	ff                   	(bad)  
9f0072bb:	ff                   	.byte 0xff

Disassembly of section .rodata:

9f0072c0 <ansiEscSeq>:
9f0072c0:	1b 5b 00             	sbb    ebx,DWORD PTR [ebx+0x0]
9f0072c3:	3b 00                	cmp    eax,DWORD PTR [eax]
9f0072c5:	48                   	dec    eax
9f0072c6:	00 25 73 00 73 00    	add    BYTE PTR ds:0x730073,ah
9f0072cc:	75 00                	jne    9f0072ce <ansiEscSeq+0xe>
9f0072ce:	3d 00 50 41 54       	cmp    eax,0x54415000
9f0072d3:	48                   	dec    eax
9f0072d4:	00 2f                	add    BYTE PTR [edi],ch
9f0072d6:	00 0a                	add    BYTE PTR [edx],cl
9f0072d8:	00 53 74             	add    BYTE PTR [ebx+0x74],dl
9f0072db:	72 65                	jb     9f007342 <ansiEscSeq+0x82>
9f0072dd:	61                   	popa   
9f0072de:	6d                   	ins    DWORD PTR es:[edi],dx
9f0072df:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
9f0072e5:	74 20                	je     9f007307 <ansiEscSeq+0x47>
9f0072e7:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
9f0072ee:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0072ef:	74 65                	je     9f007356 <ansiEscSeq+0x96>
9f0072f1:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f0072f4:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0072f6:	2a 6c 69 62          	sub    ch,BYTE PTR [ecx+ebp*2+0x62]
9f0072fa:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
9f0072fd:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0072fe:	69 74 20 63 61 6c 6c 	imul   esi,DWORD PTR [eax+eiz*1+0x63],0x656c6c61
9f007305:	65 
9f007306:	64 0a 2a             	or     ch,BYTE PTR fs:[edx]
9f007309:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00730b:	00 2a                	add    BYTE PTR [edx],ch
9f00730d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00730f:	6c                   	ins    BYTE PTR es:[edi],dx
9f007310:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f007317:	74 20                	je     9f007339 <ansiEscSeq+0x79>
9f007319:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f00731c:	70 6c                	jo     9f00738a <ansiEscSeq+0xca>
9f00731e:	65                   	gs
9f00731f:	74 65                	je     9f007386 <ansiEscSeq+0xc6>
9f007321:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f007324:	6c                   	ins    BYTE PTR es:[edi],dx
9f007325:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f00732c:	74 20                	je     9f00734e <ansiEscSeq+0x8e>
9f00732e:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f007331:	6c                   	ins    BYTE PTR es:[edi],dx
9f007332:	65 64 20 70 72       	gs and BYTE PTR fs:gs:[eax+0x72],dh
9f007337:	65                   	gs
9f007338:	76 69                	jbe    9f0073a3 <ansiEscSeq+0xe3>
9f00733a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00733b:	75 73                	jne    9f0073b0 <ansiEscSeq+0xf0>
9f00733d:	6c                   	ins    BYTE PTR es:[edi],dx
9f00733e:	79 2c                	jns    9f00736c <ansiEscSeq+0xac>
9f007340:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f007343:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x6c000a67
9f00734a:	6c 
9f00734b:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f007352:	65 63 20             	arpl   WORD PTR gs:[eax],sp
9f007355:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f007357:	72 20                	jb     9f007379 <ansiEscSeq+0xb9>
9f007359:	25 73 0a 00 20       	and    eax,0x20000a73
9f00735e:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f007362:	63 3a                	arpl   WORD PTR [edx],di
9f007364:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f007367:	65 63 62 20          	arpl   WORD PTR gs:[edx+0x20],sp
9f00736b:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f00736d:	72 20                	jb     9f00738f <ansiEscSeq+0xcf>
9f00736f:	25 73 0a 00 6c       	and    eax,0x6c000a73
9f007374:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f00737b:	65 63 61 20          	arpl   WORD PTR gs:[ecx+0x20],sp
9f00737f:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f007381:	72 20                	jb     9f0073a3 <ansiEscSeq+0xe3>
9f007383:	25 73 0a 00 00       	and    eax,0xa73
9f007388:	68 65 61 70 42       	push   0x42706165
9f00738d:	61                   	popa   
9f00738e:	73 65                	jae    9f0073f5 <ansiEscSeq+0x135>
9f007390:	20 40 20             	and    BYTE PTR [eax+0x20],al
9f007393:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
9f007396:	30 38                	xor    BYTE PTR [eax],bh
9f007398:	58                   	pop    eax
9f007399:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
9f00739f:	30 38                	xor    BYTE PTR [eax],bh
9f0073a1:	58                   	pop    eax
9f0073a2:	20 62 65             	and    BYTE PTR [edx+0x65],ah
9f0073a5:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0073a7:	72 65                	jb     9f00740e <ansiEscSeq+0x14e>
9f0073a9:	0a 00                	or     al,BYTE PTR [eax]
9f0073ab:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f0073ae:	6c                   	ins    BYTE PTR es:[edi],dx
9f0073af:	6c                   	ins    BYTE PTR es:[edi],dx
9f0073b0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0073b1:	63 3a                	arpl   WORD PTR [edx],di
9f0073b3:	20 6d 61             	and    BYTE PTR [ebp+0x61],ch
9f0073b6:	72 6b                	jb     9f007423 <ansiEscSeq+0x163>
9f0073b8:	65                   	gs
9f0073b9:	72 20                	jb     9f0073db <ansiEscSeq+0x11b>
9f0073bb:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0073bc:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0073bd:	74 20                	je     9f0073df <ansiEscSeq+0x11f>
9f0073bf:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0073c1:	75 6e                	jne    9f007431 <ansiEscSeq+0x171>
9f0073c3:	64 20 65 72          	and    BYTE PTR fs:[ebp+0x72],ah
9f0073c7:	72 6f                	jb     9f007438 <ansiEscSeq+0x178>
9f0073c9:	72 21                	jb     9f0073ec <ansiEscSeq+0x12c>
9f0073cb:	21 21                	and    DWORD PTR [ecx],esp
9f0073cd:	0a 00                	or     al,BYTE PTR [eax]
9f0073cf:	00 0a                	add    BYTE PTR [edx],cl
9f0073d1:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0073d3:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0073d5:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0073d7:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0073d9:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0073db:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0073dd:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0073df:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0073e1:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0073e3:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0073e5:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0073e7:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0073e9:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0073eb:	6d                   	ins    DWORD PTR es:[edi],dx
9f0073ec:	61                   	popa   
9f0073ed:	6c                   	ins    BYTE PTR es:[edi],dx
9f0073ee:	6c                   	ins    BYTE PTR es:[edi],dx
9f0073ef:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0073f0:	63 20                	arpl   WORD PTR [eax],sp
9f0073f2:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
9f0073f5:	65 20 65 72          	and    BYTE PTR gs:[ebp+0x72],ah
9f0073f9:	72 6f                	jb     9f00746a <ansiEscSeq+0x1aa>
9f0073fb:	72 21                	jb     9f00741e <ansiEscSeq+0x15e>
9f0073fd:	21 21                	and    DWORD PTR [ecx],esp
9f0073ff:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007401:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007403:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007405:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007407:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007409:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00740b:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00740d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00740f:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007411:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007413:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007415:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007417:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007419:	0a 00                	or     al,BYTE PTR [eax]
9f00741b:	00 0a                	add    BYTE PTR [edx],cl
9f00741d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00741f:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007421:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007423:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007425:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007427:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007429:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00742b:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00742d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00742f:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007431:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007433:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007435:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007437:	6d                   	ins    DWORD PTR es:[edi],dx
9f007438:	61                   	popa   
9f007439:	6c                   	ins    BYTE PTR es:[edi],dx
9f00743a:	6c                   	ins    BYTE PTR es:[edi],dx
9f00743b:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00743c:	63 20                	arpl   WORD PTR [eax],sp
9f00743e:	70 6f                	jo     9f0074af <ansiEscSeq+0x1ef>
9f007440:	69 6e 74 65 72 20 65 	imul   ebp,DWORD PTR [esi+0x74],0x65207265
9f007447:	72 72                	jb     9f0074bb <ansiEscSeq+0x1fb>
9f007449:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00744a:	72 21                	jb     9f00746d <ansiEscSeq+0x1ad>
9f00744c:	21 21                	and    DWORD PTR [ecx],esp
9f00744e:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007450:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007452:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007454:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007456:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007458:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00745a:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00745c:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00745e:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007460:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007462:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007464:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007466:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007468:	0a 00                	or     al,BYTE PTR [eax]
9f00746a:	00 00                	add    BYTE PTR [eax],al
9f00746c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00746d:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f007474:	6c                   	ins    BYTE PTR es:[edi],dx
9f007475:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007476:	63 3a                	arpl   WORD PTR [edx],di
9f007478:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f00747b:	71 75                	jno    9f0074f2 <ansiEscSeq+0x232>
9f00747d:	65                   	gs
9f00747e:	73 74                	jae    9f0074f4 <ansiEscSeq+0x234>
9f007480:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
9f007483:	72 20                	jb     9f0074a5 <ansiEscSeq+0x1e5>
9f007485:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f007488:	30 38                	xor    BYTE PTR [eax],bh
9f00748a:	78 20                	js     9f0074ac <ansiEscSeq+0x1ec>
9f00748c:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
9f00748f:	65                   	gs
9f007490:	73 0a                	jae    9f00749c <ansiEscSeq+0x1dc>
9f007492:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f007496:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f007499:	61                   	popa   
9f00749a:	6c                   	ins    BYTE PTR es:[edi],dx
9f00749b:	6c                   	ins    BYTE PTR es:[edi],dx
9f00749c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00749d:	63 3a                	arpl   WORD PTR [edx],di
9f00749f:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f0074a2:	65                   	gs
9f0074a3:	64                   	fs
9f0074a4:	65                   	gs
9f0074a5:	64                   	fs
9f0074a6:	3d 30 78 25 30       	cmp    eax,0x30257830
9f0074ab:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f0074ae:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f0074b2:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f0074b5:	61                   	popa   
9f0074b6:	6c                   	ins    BYTE PTR es:[edi],dx
9f0074b7:	6c                   	ins    BYTE PTR es:[edi],dx
9f0074b8:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0074b9:	63 3a                	arpl   WORD PTR [edx],di
9f0074bb:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f0074be:	61                   	popa   
9f0074bf:	45                   	inc    ebp
9f0074c0:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0074c1:	64                   	fs
9f0074c2:	3d 30 78 25 30       	cmp    eax,0x30257830
9f0074c7:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f0074ca:	00 00                	add    BYTE PTR [eax],al
9f0074cc:	6c                   	ins    BYTE PTR es:[edi],dx
9f0074cd:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f0074d4:	6c                   	ins    BYTE PTR es:[edi],dx
9f0074d5:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0074d6:	63 3a                	arpl   WORD PTR [edx],di
9f0074d8:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f0074db:	71 20                	jno    9f0074fd <ansiEscSeq+0x23d>
9f0074dd:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f0074e0:	30 38                	xor    BYTE PTR [eax],bh
9f0074e2:	58                   	pop    eax
9f0074e3:	20 62 79             	and    BYTE PTR [edx+0x79],ah
9f0074e6:	74 65                	je     9f00754d <ansiEscSeq+0x28d>
9f0074e8:	73 2c                	jae    9f007516 <ansiEscSeq+0x256>
9f0074ea:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f0074ed:	74 20                	je     9f00750f <ansiEscSeq+0x24f>
9f0074ef:	77 61                	ja     9f007552 <ansiEscSeq+0x292>
9f0074f1:	73 20                	jae    9f007513 <ansiEscSeq+0x253>
9f0074f3:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f0074f6:	30 38                	xor    BYTE PTR [eax],bh
9f0074f8:	58                   	pop    eax
9f0074f9:	2c 20                	sub    al,0x20
9f0074fb:	68 65 61 70 45       	push   0x45706165
9f007500:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007501:	64                   	fs
9f007502:	3d 30 78 25 30       	cmp    eax,0x30257830
9f007507:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f00750a:	00 00                	add    BYTE PTR [eax],al
9f00750c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00750d:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f007514:	6c                   	ins    BYTE PTR es:[edi],dx
9f007515:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007516:	63 3a                	arpl   WORD PTR [edx],di
9f007518:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
9f00751b:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
9f007522:	65 
9f007523:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f007527:	61                   	popa   
9f007528:	70 43                	jo     9f00756d <ansiEscSeq+0x2ad>
9f00752a:	75 72                	jne    9f00759e <ansiEscSeq+0x2de>
9f00752c:	72 20                	jb     9f00754e <ansiEscSeq+0x28e>
9f00752e:	61                   	popa   
9f00752f:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007530:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f007534:	61                   	popa   
9f007535:	70 42                	jo     9f007579 <ansiEscSeq+0x2b9>
9f007537:	61                   	popa   
9f007538:	73 65                	jae    9f00759f <ansiEscSeq+0x2df>
9f00753a:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
9f00753e:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f007541:	30 38                	xor    BYTE PTR [eax],bh
9f007543:	58                   	pop    eax
9f007544:	0a 00                	or     al,BYTE PTR [eax]
9f007546:	00 00                	add    BYTE PTR [eax],al
9f007548:	6c                   	ins    BYTE PTR es:[edi],dx
9f007549:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f007550:	6c                   	ins    BYTE PTR es:[edi],dx
9f007551:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007552:	63 3a                	arpl   WORD PTR [edx],di
9f007554:	63 72 65             	arpl   WORD PTR [edx+0x65],si
9f007557:	61                   	popa   
9f007558:	74 69                	je     9f0075c3 <ansiEscSeq+0x303>
9f00755a:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00755b:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
9f00755f:	61                   	popa   
9f007560:	70 20                	jo     9f007582 <ansiEscSeq+0x2c2>
9f007562:	72 65                	jb     9f0075c9 <ansiEscSeq+0x309>
9f007564:	63 20                	arpl   WORD PTR [eax],sp
9f007566:	40                   	inc    eax
9f007567:	20 30                	and    BYTE PTR [eax],dh
9f007569:	78 25                	js     9f007590 <ansiEscSeq+0x2d0>
9f00756b:	30 38                	xor    BYTE PTR [eax],bh
9f00756d:	58                   	pop    eax
9f00756e:	0a 00                	or     al,BYTE PTR [eax]
9f007570:	6c                   	ins    BYTE PTR es:[edi],dx
9f007571:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f007578:	6c                   	ins    BYTE PTR es:[edi],dx
9f007579:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00757a:	63 3a                	arpl   WORD PTR [edx],di
9f00757c:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f00757f:	61                   	popa   
9f007580:	70 43                	jo     9f0075c5 <ansiEscSeq+0x305>
9f007582:	75 72                	jne    9f0075f6 <ansiEscSeq+0x336>
9f007584:	72 3d                	jb     9f0075c3 <ansiEscSeq+0x303>
9f007586:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f007589:	30 38                	xor    BYTE PTR [eax],bh
9f00758b:	78 0a                	js     9f007597 <ansiEscSeq+0x2d7>
9f00758d:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f007590:	6c                   	ins    BYTE PTR es:[edi],dx
9f007591:	6c                   	ins    BYTE PTR es:[edi],dx
9f007592:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007593:	63 3a                	arpl   WORD PTR [edx],di
9f007595:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f007598:	74 75                	je     9f00760f <ansiEscSeq+0x34f>
9f00759a:	72 6e                	jb     9f00760a <ansiEscSeq+0x34a>
9f00759c:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
9f0075a3:	30 38                	xor    BYTE PTR [eax],bh
9f0075a5:	58                   	pop    eax
9f0075a6:	0a 00                	or     al,BYTE PTR [eax]
9f0075a8:	6c                   	ins    BYTE PTR es:[edi],dx
9f0075a9:	69 62 63 5f 72 65 61 	imul   esp,DWORD PTR [edx+0x63],0x6165725f
9f0075b0:	6c                   	ins    BYTE PTR es:[edi],dx
9f0075b1:	6c                   	ins    BYTE PTR es:[edi],dx
9f0075b2:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0075b3:	63 3a                	arpl   WORD PTR [edx],di
9f0075b5:	20 63 61             	and    BYTE PTR [ebx+0x61],ah
9f0075b8:	6c                   	ins    BYTE PTR es:[edi],dx
9f0075b9:	6c                   	ins    BYTE PTR es:[edi],dx
9f0075ba:	65 64 20 66 6f       	gs and BYTE PTR fs:gs:[esi+0x6f],ah
9f0075bf:	72 20                	jb     9f0075e1 <ansiEscSeq+0x321>
9f0075c1:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0075c2:	6c                   	ins    BYTE PTR es:[edi],dx
9f0075c3:	64 20 70 6f          	and    BYTE PTR fs:[eax+0x6f],dh
9f0075c7:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f0075ce:	78 25                	js     9f0075f5 <ansiEscSeq+0x335>
9f0075d0:	30 38                	xor    BYTE PTR [eax],bh
9f0075d2:	78 2c                	js     9f007600 <ansiEscSeq+0x340>
9f0075d4:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f0075d7:	77 20                	ja     9f0075f9 <ansiEscSeq+0x339>
9f0075d9:	73 69                	jae    9f007644 <ansiEscSeq+0x384>
9f0075db:	7a 65                	jp     9f007642 <ansiEscSeq+0x382>
9f0075dd:	3d 30 78 25 30       	cmp    eax,0x30257830
9f0075e2:	38 78 00             	cmp    BYTE PTR [eax+0x0],bh
9f0075e5:	00 00                	add    BYTE PTR [eax],al
9f0075e7:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f0075eb:	63 5f 72             	arpl   WORD PTR [edi+0x72],bx
9f0075ee:	65                   	gs
9f0075ef:	6c                   	ins    BYTE PTR es:[edi],dx
9f0075f0:	6c                   	ins    BYTE PTR es:[edi],dx
9f0075f1:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0075f2:	63 3a                	arpl   WORD PTR [edx],di
9f0075f4:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f0075f7:	71 75                	jno    9f00766e <ansiEscSeq+0x3ae>
9f0075f9:	65                   	gs
9f0075fa:	73 74                	jae    9f007670 <ansiEscSeq+0x3b0>
9f0075fc:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
9f0075ff:	72 20                	jb     9f007621 <ansiEscSeq+0x361>
9f007601:	30 20                	xor    BYTE PTR [eax],ah
9f007603:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
9f007606:	65                   	gs
9f007607:	73 2c                	jae    9f007635 <ansiEscSeq+0x375>
9f007609:	20 63 61             	and    BYTE PTR [ebx+0x61],ah
9f00760c:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00760d:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00760e:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00760f:	74 20                	je     9f007631 <ansiEscSeq+0x371>
9f007611:	66                   	data16
9f007612:	75 6c                	jne    9f007680 <ansiEscSeq+0x3c0>
9f007614:	66 69 6c 6c 0a 00 00 	imul   bp,WORD PTR [esp+ebp*2+0xa],0x0
9f00761b:	00 09                	add    BYTE PTR [ecx],cl
9f00761d:	6c                   	ins    BYTE PTR es:[edi],dx
9f00761e:	69 62 63 5f 72 65 61 	imul   esp,DWORD PTR [edx+0x63],0x6165725f
9f007625:	6c                   	ins    BYTE PTR es:[edi],dx
9f007626:	6c                   	ins    BYTE PTR es:[edi],dx
9f007627:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007628:	63 3a                	arpl   WORD PTR [edx],di
9f00762a:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f00762d:	63 65 69             	arpl   WORD PTR [ebp+0x69],sp
9f007630:	76 65                	jbe    9f007697 <ansiEscSeq+0x3d7>
9f007632:	64 20 6e 65          	and    BYTE PTR fs:[esi+0x65],ch
9f007636:	77 20                	ja     9f007658 <ansiEscSeq+0x398>
9f007638:	6d                   	ins    DWORD PTR es:[edi],dx
9f007639:	61                   	popa   
9f00763a:	6c                   	ins    BYTE PTR es:[edi],dx
9f00763b:	6c                   	ins    BYTE PTR es:[edi],dx
9f00763c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00763d:	63 20                	arpl   WORD PTR [eax],sp
9f00763f:	70 6f                	jo     9f0076b0 <ansiEscSeq+0x3f0>
9f007641:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f007648:	78 25                	js     9f00766f <ansiEscSeq+0x3af>
9f00764a:	30 38                	xor    BYTE PTR [eax],bh
9f00764c:	78 2c                	js     9f00767a <ansiEscSeq+0x3ba>
9f00764e:	20 6f 6c             	and    BYTE PTR [edi+0x6c],ch
9f007651:	64 20 73 69          	and    BYTE PTR fs:[ebx+0x69],dh
9f007655:	7a 65                	jp     9f0076bc <ansiEscSeq+0x3fc>
9f007657:	3d 30 78 25 30       	cmp    eax,0x30257830
9f00765c:	38 78 2c             	cmp    BYTE PTR [eax+0x2c],bh
9f00765f:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f007662:	77 20                	ja     9f007684 <ansiEscSeq+0x3c4>
9f007664:	73 69                	jae    9f0076cf <ansiEscSeq+0x40f>
9f007666:	7a 65                	jp     9f0076cd <ansiEscSeq+0x40d>
9f007668:	3d 30 78 25 30       	cmp    eax,0x30257830
9f00766d:	38 78 0a             	cmp    BYTE PTR [eax+0xa],bh
9f007670:	00 00                	add    BYTE PTR [eax],al
9f007672:	00 00                	add    BYTE PTR [eax],al
9f007674:	09 6c 69 62          	or     DWORD PTR [ecx+ebp*2+0x62],ebp
9f007678:	63 5f 72             	arpl   WORD PTR [edi+0x72],bx
9f00767b:	65                   	gs
9f00767c:	61                   	popa   
9f00767d:	6c                   	ins    BYTE PTR es:[edi],dx
9f00767e:	6c                   	ins    BYTE PTR es:[edi],dx
9f00767f:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007680:	63 3a                	arpl   WORD PTR [edx],di
9f007682:	20 75 70             	and    BYTE PTR [ebp+0x70],dh
9f007685:	64                   	fs
9f007686:	61                   	popa   
9f007687:	74 65                	je     9f0076ee <ansiEscSeq+0x42e>
9f007689:	64 20 6e 65          	and    BYTE PTR fs:[esi+0x65],ch
9f00768d:	77 20                	ja     9f0076af <ansiEscSeq+0x3ef>
9f00768f:	70 6f                	jo     9f007700 <ansiEscSeq+0x440>
9f007691:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f007698:	78 25                	js     9f0076bf <ansiEscSeq+0x3ff>
9f00769a:	30 38                	xor    BYTE PTR [eax],bh
9f00769c:	78 20                	js     9f0076be <ansiEscSeq+0x3fe>
9f00769e:	77 69                	ja     9f007709 <ansiEscSeq+0x449>
9f0076a0:	74 68                	je     9f00770a <ansiEscSeq+0x44a>
9f0076a2:	20 6f 6c             	and    BYTE PTR [edi+0x6c],ch
9f0076a5:	64 20 70 6f          	and    BYTE PTR fs:[eax+0x6f],dh
9f0076a9:	69 6e 74 65 72 20 64 	imul   ebp,DWORD PTR [esi+0x74],0x64207265
9f0076b0:	61                   	popa   
9f0076b1:	74 61                	je     9f007714 <ansiEscSeq+0x454>
9f0076b3:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
9f0076b6:	64 20 63 6c          	and    BYTE PTR fs:[ebx+0x6c],ah
9f0076ba:	65                   	gs
9f0076bb:	61                   	popa   
9f0076bc:	72 65                	jb     9f007723 <ansiEscSeq+0x463>
9f0076be:	64 20 6f 75          	and    BYTE PTR fs:[edi+0x75],ch
9f0076c2:	74 20                	je     9f0076e4 <ansiEscSeq+0x424>
9f0076c4:	72 65                	jb     9f00772b <ansiEscSeq+0x46b>
9f0076c6:	6d                   	ins    DWORD PTR es:[edi],dx
9f0076c7:	61                   	popa   
9f0076c8:	69 6e 67 20 69 66 20 	imul   ebp,DWORD PTR [esi+0x67],0x20666920
9f0076cf:	61                   	popa   
9f0076d0:	70 70                	jo     9f007742 <ansiEscSeq+0x482>
9f0076d2:	6c                   	ins    BYTE PTR es:[edi],dx
9f0076d3:	69 63 61 62 6c 65 0a 	imul   esp,DWORD PTR [ebx+0x61],0xa656c62
9f0076da:	00 00                	add    BYTE PTR [eax],al
9f0076dc:	00 00                	add    BYTE PTR [eax],al
9f0076de:	00 00                	add    BYTE PTR [eax],al
9f0076e0:	00 28                	add    BYTE PTR [eax],ch
9f0076e2:	00 29                	add    BYTE PTR [ecx],ch
9f0076e4:	00 25 2d 31 30 73    	add    BYTE PTR ds:0x7330312d,ah
9f0076ea:	00 25 30 32 69 3a    	add    BYTE PTR ds:0x3a693230,ah
9f0076f0:	25 30 32 69 3a       	and    eax,0x3a693230
9f0076f5:	25 30 32 69 00       	and    eax,0x693230
9f0076fa:	00 00                	add    BYTE PTR [eax],al
9f0076fc:	07                   	pop    es
9f0076fd:	b1 ff                	mov    cl,0xff
9f0076ff:	ff 95 ae ff ff 4b    	call   DWORD PTR [ebp+0x4bffffae]
9f007705:	af                   	scas   eax,DWORD PTR es:[edi]
9f007706:	ff                   	(bad)  
9f007707:	ff b3 ae ff ff c4    	push   DWORD PTR [ebx-0x3b000052]
9f00770d:	ae                   	scas   al,BYTE PTR es:[edi]
9f00770e:	ff                   	(bad)  
9f00770f:	ff 07                	inc    DWORD PTR [edi]
9f007711:	b1 ff                	mov    cl,0xff
9f007713:	ff 07                	inc    DWORD PTR [edi]
9f007715:	b1 ff                	mov    cl,0xff
9f007717:	ff df                	call   <internal disassembler error>
9f007719:	ae                   	scas   al,BYTE PTR es:[edi]
9f00771a:	ff                   	(bad)  
9f00771b:	ff 07                	inc    DWORD PTR [edi]
9f00771d:	b1 ff                	mov    cl,0xff
9f00771f:	ff 07                	inc    DWORD PTR [edi]
9f007721:	b1 ff                	mov    cl,0xff
9f007723:	ff                   	(bad)  
9f007724:	fa                   	cli    
9f007725:	ae                   	scas   al,BYTE PTR es:[edi]
9f007726:	ff                   	(bad)  
9f007727:	ff 15 af ff ff 07    	call   DWORD PTR ds:0x7ffffaf
9f00772d:	b1 ff                	mov    cl,0xff
9f00772f:	ff c9                	dec    ecx
9f007731:	af                   	scas   eax,DWORD PTR es:[edi]
9f007732:	ff                   	(bad)  
9f007733:	ff 07                	inc    DWORD PTR [edi]
9f007735:	b1 ff                	mov    cl,0xff
9f007737:	ff 07                	inc    DWORD PTR [edi]
9f007739:	b1 ff                	mov    cl,0xff
9f00773b:	ff 07                	inc    DWORD PTR [edi]
9f00773d:	b1 ff                	mov    cl,0xff
9f00773f:	ff 30                	push   DWORD PTR [eax]
9f007741:	af                   	scas   eax,DWORD PTR es:[edi]
9f007742:	ff                   	(bad)  
9f007743:	ff 07                	inc    DWORD PTR [edi]
9f007745:	b1 ff                	mov    cl,0xff
9f007747:	ff 07                	inc    DWORD PTR [edi]
9f007749:	b1 ff                	mov    cl,0xff
9f00774b:	ff 07                	inc    DWORD PTR [edi]
9f00774d:	b1 ff                	mov    cl,0xff
9f00774f:	ff 07                	inc    DWORD PTR [edi]
9f007751:	b1 ff                	mov    cl,0xff
9f007753:	ff d8                	call   <internal disassembler error>
9f007755:	b0 ff                	mov    al,0xff
9f007757:	ff f0                	push   eax
9f007759:	b0 ff                	mov    al,0xff
9f00775b:	ff 2f                	jmp    FWORD PTR [edi]
9f00775d:	70 72                	jo     9f0077d1 <ansiEscSeq+0x511>
9f00775f:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007760:	63 2f                	arpl   WORD PTR [edi],bp
9f007762:	00 2f                	add    BYTE PTR [edi],ch
9f007764:	73 74                	jae    9f0077da <ansiEscSeq+0x51a>
9f007766:	61                   	popa   
9f007767:	74 00                	je     9f007769 <ansiEscSeq+0x4a9>
9f007769:	73 65                	jae    9f0077d0 <ansiEscSeq+0x510>
9f00776b:	6c                   	ins    BYTE PTR es:[edi],dx
9f00776c:	66                   	data16
9f00776d:	00 72 00             	add    BYTE PTR [edx+0x0],dh
9f007770:	20 00                	and    BYTE PTR [eax],al
	...
9f00777e:	59                   	pop    ecx
9f00777f:	40                   	inc    eax
9f007780:	95                   	xchg   ebp,eax
9f007781:	b6 ff                	mov    dh,0xff
9f007783:	ff a7 b6 ff ff a7    	jmp    DWORD PTR [edi-0x5800004a]
9f007789:	b6 ff                	mov    dh,0xff
9f00778b:	ff 9b b6 ff ff a7    	call   FWORD PTR [ebx-0x5800004a]
9f007791:	b6 ff                	mov    dh,0xff
9f007793:	ff a7 b6 ff ff a7    	jmp    DWORD PTR [edi-0x5800004a]
9f007799:	b6 ff                	mov    dh,0xff
9f00779b:	ff a7 b6 ff ff a7    	jmp    DWORD PTR [edi-0x5800004a]
9f0077a1:	b6 ff                	mov    dh,0xff
9f0077a3:	ff a7 b6 ff ff a7    	jmp    DWORD PTR [edi-0x5800004a]
9f0077a9:	b6 ff                	mov    dh,0xff
9f0077ab:	ff 8f b6 ff ff a7    	dec    DWORD PTR [edi-0x5800004a]
9f0077b1:	b6 ff                	mov    dh,0xff
9f0077b3:	ff 89 b6 ff ff a7    	dec    DWORD PTR [ecx-0x5800004a]
9f0077b9:	b6 ff                	mov    dh,0xff
9f0077bb:	ff a7 b6 ff ff a1    	jmp    DWORD PTR [edi-0x5e00004a]
9f0077c1:	b6 ff                	mov    dh,0xff
9f0077c3:	ff 46 b9             	inc    DWORD PTR [esi-0x47]
9f0077c6:	ff                   	(bad)  
9f0077c7:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0077ca:	ff                   	(bad)  
9f0077cb:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0077ce:	ff                   	(bad)  
9f0077cf:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0077d2:	ff                   	(bad)  
9f0077d3:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0077d6:	ff                   	(bad)  
9f0077d7:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0077da:	ff                   	(bad)  
9f0077db:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0077de:	ff                   	(bad)  
9f0077df:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0077e2:	ff                   	(bad)  
9f0077e3:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0077e6:	ff                   	(bad)  
9f0077e7:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0077ea:	ff                   	(bad)  
9f0077eb:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0077ee:	ff                   	(bad)  
9f0077ef:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0077f2:	ff                   	(bad)  
9f0077f3:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0077f6:	ff                   	(bad)  
9f0077f7:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0077fa:	ff                   	(bad)  
9f0077fb:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0077fe:	ff                   	(bad)  
9f0077ff:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f007802:	ff                   	(bad)  
9f007803:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f007806:	ff                   	(bad)  
9f007807:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f00780a:	ff                   	(bad)  
9f00780b:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f00780e:	ff                   	(bad)  
9f00780f:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f007812:	ff                   	(bad)  
9f007813:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f007816:	ff                   	(bad)  
9f007817:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f00781a:	ff                   	(bad)  
9f00781b:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f00781e:	ff                   	(bad)  
9f00781f:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f007822:	ff                   	(bad)  
9f007823:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f007826:	ff                   	(bad)  
9f007827:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f00782a:	ff                   	(bad)  
9f00782b:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f00782e:	ff                   	(bad)  
9f00782f:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f007832:	ff                   	(bad)  
9f007833:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f007836:	ff                   	(bad)  
9f007837:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f00783a:	ff                   	(bad)  
9f00783b:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f00783e:	ff                   	(bad)  
9f00783f:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f007842:	ff                   	(bad)  
9f007843:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f007846:	ff                   	(bad)  
9f007847:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f00784a:	ff                   	(bad)  
9f00784b:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f00784e:	ff                   	(bad)  
9f00784f:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f007852:	ff                   	(bad)  
9f007853:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f007856:	ff                   	(bad)  
9f007857:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f00785a:	ff                   	(bad)  
9f00785b:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f00785e:	ff                   	(bad)  
9f00785f:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f007862:	ff                   	(bad)  
9f007863:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f007866:	ff                   	(bad)  
9f007867:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f00786a:	ff                   	(bad)  
9f00786b:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f00786e:	ff                   	(bad)  
9f00786f:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f007872:	ff                   	(bad)  
9f007873:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f007876:	ff                   	(bad)  
9f007877:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f00787a:	ff                   	(bad)  
9f00787b:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f00787e:	ff                   	(bad)  
9f00787f:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f007882:	ff                   	(bad)  
9f007883:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f007886:	ff                   	(bad)  
9f007887:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f00788a:	ff                   	(bad)  
9f00788b:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f00788e:	ff                   	(bad)  
9f00788f:	ff 64 b9 ff          	jmp    DWORD PTR [ecx+edi*4-0x1]
9f007893:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f007896:	ff                   	(bad)  
9f007897:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f00789a:	ff                   	(bad)  
9f00789b:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f00789e:	ff                   	(bad)  
9f00789f:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0078a2:	ff                   	(bad)  
9f0078a3:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0078a6:	ff                   	(bad)  
9f0078a7:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0078aa:	ff                   	(bad)  
9f0078ab:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0078ae:	ff                   	(bad)  
9f0078af:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0078b2:	ff                   	(bad)  
9f0078b3:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0078b6:	ff                   	(bad)  
9f0078b7:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0078ba:	ff                   	(bad)  
9f0078bb:	ff cc                	dec    esp
9f0078bd:	b7 ff                	mov    bh,0xff
9f0078bf:	ff 6d b9             	jmp    FWORD PTR [ebp-0x47]
9f0078c2:	ff                   	(bad)  
9f0078c3:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0078c6:	ff                   	(bad)  
9f0078c7:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0078ca:	ff                   	(bad)  
9f0078cb:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0078ce:	ff                   	(bad)  
9f0078cf:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0078d2:	ff                   	(bad)  
9f0078d3:	ff 6d b9             	jmp    FWORD PTR [ebp-0x47]
9f0078d6:	ff                   	(bad)  
9f0078d7:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0078da:	ff                   	(bad)  
9f0078db:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0078de:	ff                   	(bad)  
9f0078df:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0078e2:	ff                   	(bad)  
9f0078e3:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0078e6:	ff                   	(bad)  
9f0078e7:	ff 00                	inc    DWORD PTR [eax]
9f0078e9:	b9 ff ff 57 b9       	mov    ecx,0xb957ffff
9f0078ee:	ff                   	(bad)  
9f0078ef:	ff c2                	inc    edx
9f0078f1:	b8 ff ff 73 b9       	mov    eax,0xb973ffff
9f0078f6:	ff                   	(bad)  
9f0078f7:	ff 73 b9             	push   DWORD PTR [ebx-0x47]
9f0078fa:	ff                   	(bad)  
9f0078fb:	ff 21                	jmp    DWORD PTR [ecx]
9f0078fd:	b8 ff ff 73 b9       	mov    eax,0xb973ffff
9f007902:	ff                   	(bad)  
9f007903:	ff ad b9 ff ff 73    	jmp    FWORD PTR [ebp+0x73ffffb9]
9f007909:	b9 ff ff 73 b9       	mov    ecx,0xb973ffff
9f00790e:	ff                   	(bad)  
9f00790f:	ff 60 b9             	jmp    DWORD PTR [eax-0x47]
9f007912:	ff                   	(bad)  
9f007913:	ff 30                	push   DWORD PTR [eax]

9f007914 <digits.1301>:
9f007914:	30 31                	xor    BYTE PTR [ecx],dh
9f007916:	32 33                	xor    dh,BYTE PTR [ebx]
9f007918:	34 35                	xor    al,0x35
9f00791a:	36                   	ss
9f00791b:	37                   	aaa    
9f00791c:	38 39                	cmp    BYTE PTR [ecx],bh
9f00791e:	41                   	inc    ecx
9f00791f:	42                   	inc    edx
9f007920:	43                   	inc    ebx
9f007921:	44                   	inc    esp
9f007922:	45                   	inc    ebp
9f007923:	46                   	inc    esi
	...
9f007940:	47                   	inc    edi
9f007941:	4d                   	dec    ebp
9f007942:	54                   	push   esp
	...

9f007960 <_ytab>:
9f007960:	1f                   	pop    ds
9f007961:	00 00                	add    BYTE PTR [eax],al
9f007963:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f007966:	00 00                	add    BYTE PTR [eax],al
9f007968:	1f                   	pop    ds
9f007969:	00 00                	add    BYTE PTR [eax],al
9f00796b:	00 1e                	add    BYTE PTR [esi],bl
9f00796d:	00 00                	add    BYTE PTR [eax],al
9f00796f:	00 1f                	add    BYTE PTR [edi],bl
9f007971:	00 00                	add    BYTE PTR [eax],al
9f007973:	00 1e                	add    BYTE PTR [esi],bl
9f007975:	00 00                	add    BYTE PTR [eax],al
9f007977:	00 1f                	add    BYTE PTR [edi],bl
9f007979:	00 00                	add    BYTE PTR [eax],al
9f00797b:	00 1f                	add    BYTE PTR [edi],bl
9f00797d:	00 00                	add    BYTE PTR [eax],al
9f00797f:	00 1e                	add    BYTE PTR [esi],bl
9f007981:	00 00                	add    BYTE PTR [eax],al
9f007983:	00 1f                	add    BYTE PTR [edi],bl
9f007985:	00 00                	add    BYTE PTR [eax],al
9f007987:	00 1e                	add    BYTE PTR [esi],bl
9f007989:	00 00                	add    BYTE PTR [eax],al
9f00798b:	00 1f                	add    BYTE PTR [edi],bl
9f00798d:	00 00                	add    BYTE PTR [eax],al
9f00798f:	00 1f                	add    BYTE PTR [edi],bl
9f007991:	00 00                	add    BYTE PTR [eax],al
9f007993:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
9f007999:	00 00                	add    BYTE PTR [eax],al
9f00799b:	00 1e                	add    BYTE PTR [esi],bl
9f00799d:	00 00                	add    BYTE PTR [eax],al
9f00799f:	00 1f                	add    BYTE PTR [edi],bl
9f0079a1:	00 00                	add    BYTE PTR [eax],al
9f0079a3:	00 1e                	add    BYTE PTR [esi],bl
9f0079a5:	00 00                	add    BYTE PTR [eax],al
9f0079a7:	00 1f                	add    BYTE PTR [edi],bl
9f0079a9:	00 00                	add    BYTE PTR [eax],al
9f0079ab:	00 1f                	add    BYTE PTR [edi],bl
9f0079ad:	00 00                	add    BYTE PTR [eax],al
9f0079af:	00 1e                	add    BYTE PTR [esi],bl
9f0079b1:	00 00                	add    BYTE PTR [eax],al
9f0079b3:	00 1f                	add    BYTE PTR [edi],bl
9f0079b5:	00 00                	add    BYTE PTR [eax],al
9f0079b7:	00 1e                	add    BYTE PTR [esi],bl
9f0079b9:	00 00                	add    BYTE PTR [eax],al
9f0079bb:	00 1f                	add    BYTE PTR [edi],bl
9f0079bd:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

9f0079c0 <.rel.dyn>:
9f0079c0:	04 7c                	add    al,0x7c
9f0079c2:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f0079c8:	08 7c 00 9f          	or     BYTE PTR [eax+eax*1-0x61],bh
9f0079cc:	08 00                	or     BYTE PTR [eax],al
9f0079ce:	00 00                	add    BYTE PTR [eax],al
9f0079d0:	0c 7c                	or     al,0x7c
9f0079d2:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f0079d8:	10 7c 00 9f          	adc    BYTE PTR [eax+eax*1-0x61],bh
9f0079dc:	08 00                	or     BYTE PTR [eax],al
9f0079de:	00 00                	add    BYTE PTR [eax],al
9f0079e0:	14 7c                	adc    al,0x7c
9f0079e2:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f0079e8:	1c 7c                	sbb    al,0x7c
9f0079ea:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f0079f0:	28 7c 00 9f          	sub    BYTE PTR [eax+eax*1-0x61],bh
9f0079f4:	08 00                	or     BYTE PTR [eax],al
9f0079f6:	00 00                	add    BYTE PTR [eax],al
9f0079f8:	2c 7c                	sub    al,0x7c
9f0079fa:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f007a00:	30 7c 00 9f          	xor    BYTE PTR [eax+eax*1-0x61],bh
9f007a04:	08 00                	or     BYTE PTR [eax],al
9f007a06:	00 00                	add    BYTE PTR [eax],al
9f007a08:	38 7c 00 9f          	cmp    BYTE PTR [eax+eax*1-0x61],bh
9f007a0c:	08 00                	or     BYTE PTR [eax],al
9f007a0e:	00 00                	add    BYTE PTR [eax],al
9f007a10:	4c                   	dec    esp
9f007a11:	7c 00                	jl     9f007a13 <_ytab+0xb3>
9f007a13:	9f                   	lahf   
9f007a14:	08 00                	or     BYTE PTR [eax],al
9f007a16:	00 00                	add    BYTE PTR [eax],al
9f007a18:	50                   	push   eax
9f007a19:	7c 00                	jl     9f007a1b <_ytab+0xbb>
9f007a1b:	9f                   	lahf   
9f007a1c:	08 00                	or     BYTE PTR [eax],al
9f007a1e:	00 00                	add    BYTE PTR [eax],al
9f007a20:	54                   	push   esp
9f007a21:	7c 00                	jl     9f007a23 <_ytab+0xc3>
9f007a23:	9f                   	lahf   
9f007a24:	08 00                	or     BYTE PTR [eax],al
9f007a26:	00 00                	add    BYTE PTR [eax],al
9f007a28:	da 11                	ficom  DWORD PTR [ecx]
9f007a2a:	00 9f 02 33 00 00    	add    BYTE PTR [edi+0x3302],bl
9f007a30:	1a 12                	sbb    dl,BYTE PTR [edx]
9f007a32:	00 9f 02 33 00 00    	add    BYTE PTR [edi+0x3302],bl
9f007a38:	43                   	inc    ebx
9f007a39:	12 00                	adc    al,BYTE PTR [eax]
9f007a3b:	9f                   	lahf   
9f007a3c:	02 33                	add    dh,BYTE PTR [ebx]
9f007a3e:	00 00                	add    BYTE PTR [eax],al
9f007a40:	5c                   	pop    esp
9f007a41:	12 00                	adc    al,BYTE PTR [eax]
9f007a43:	9f                   	lahf   
9f007a44:	02 33                	add    dh,BYTE PTR [ebx]
9f007a46:	00 00                	add    BYTE PTR [eax],al
9f007a48:	b7 12                	mov    bh,0x12
9f007a4a:	00 9f 02 33 00 00    	add    BYTE PTR [edi+0x3302],bl
9f007a50:	1a 13                	sbb    dl,BYTE PTR [ebx]
9f007a52:	00 9f 02 33 00 00    	add    BYTE PTR [edi+0x3302],bl
9f007a58:	51                   	push   ecx
9f007a59:	13 00                	adc    eax,DWORD PTR [eax]
9f007a5b:	9f                   	lahf   
9f007a5c:	02 33                	add    dh,BYTE PTR [ebx]
9f007a5e:	00 00                	add    BYTE PTR [eax],al
9f007a60:	8d 13                	lea    edx,[ebx]
9f007a62:	00 9f 02 33 00 00    	add    BYTE PTR [edi+0x3302],bl
9f007a68:	cb                   	retf   
9f007a69:	13 00                	adc    eax,DWORD PTR [eax]
9f007a6b:	9f                   	lahf   
9f007a6c:	02 33                	add    dh,BYTE PTR [ebx]
9f007a6e:	00 00                	add    BYTE PTR [eax],al
9f007a70:	0b 14 00             	or     edx,DWORD PTR [eax+eax*1]
9f007a73:	9f                   	lahf   
9f007a74:	02 33                	add    dh,BYTE PTR [ebx]
9f007a76:	00 00                	add    BYTE PTR [eax],al
9f007a78:	4d                   	dec    ebp
9f007a79:	14 00                	adc    al,0x0
9f007a7b:	9f                   	lahf   
9f007a7c:	02 33                	add    dh,BYTE PTR [ebx]
9f007a7e:	00 00                	add    BYTE PTR [eax],al
9f007a80:	39 17                	cmp    DWORD PTR [edi],edx
9f007a82:	00 9f 02 33 00 00    	add    BYTE PTR [edi+0x3302],bl
9f007a88:	66 17                	popw   ss
9f007a8a:	00 9f 02 33 00 00    	add    BYTE PTR [edi+0x3302],bl
9f007a90:	a9 17 00 9f 02       	test   eax,0x29f0017
9f007a95:	33 00                	xor    eax,DWORD PTR [eax]
9f007a97:	00 d6                	add    dh,dl
9f007a99:	17                   	pop    ss
9f007a9a:	00 9f 02 33 00 00    	add    BYTE PTR [edi+0x3302],bl
9f007aa0:	19 18                	sbb    DWORD PTR [eax],ebx
9f007aa2:	00 9f 02 33 00 00    	add    BYTE PTR [edi+0x3302],bl
9f007aa8:	46                   	inc    esi
9f007aa9:	18 00                	sbb    BYTE PTR [eax],al
9f007aab:	9f                   	lahf   
9f007aac:	02 33                	add    dh,BYTE PTR [ebx]
9f007aae:	00 00                	add    BYTE PTR [eax],al
9f007ab0:	ba 18 00 9f 02       	mov    edx,0x29f0018
9f007ab5:	33 00                	xor    eax,DWORD PTR [eax]
9f007ab7:	00 07                	add    BYTE PTR [edi],al
9f007ab9:	43                   	inc    ebx
9f007aba:	00 9f 02 33 00 00    	add    BYTE PTR [edi+0x3302],bl
9f007ac0:	6d                   	ins    DWORD PTR es:[edi],dx
9f007ac1:	4f                   	dec    edi
9f007ac2:	00 9f 02 33 00 00    	add    BYTE PTR [edi+0x3302],bl
9f007ac8:	18 7c 00 9f          	sbb    BYTE PTR [eax+eax*1-0x61],bh
9f007acc:	06                   	push   es
9f007acd:	22 00                	and    al,BYTE PTR [eax]
9f007acf:	00 20                	add    BYTE PTR [eax],ah
9f007ad1:	7c 00                	jl     9f007ad3 <_ytab+0x173>
9f007ad3:	9f                   	lahf   
9f007ad4:	06                   	push   es
9f007ad5:	27                   	daa    
9f007ad6:	00 00                	add    BYTE PTR [eax],al
9f007ad8:	24 7c                	and    al,0x7c
9f007ada:	00 9f 06 29 00 00    	add    BYTE PTR [edi+0x2906],bl
9f007ae0:	34 7c                	xor    al,0x7c
9f007ae2:	00 9f 06 43 00 00    	add    BYTE PTR [edi+0x4306],bl
9f007ae8:	48                   	dec    eax
9f007ae9:	7c 00                	jl     9f007aeb <_ytab+0x18b>
9f007aeb:	9f                   	lahf   
9f007aec:	01 19                	add    DWORD PTR [ecx],ebx
	...

Disassembly of section .data:

9f007b00 <rcsid>:
9f007b00:	24 48                	and    al,0x48
9f007b02:	65                   	gs
9f007b03:	61                   	popa   
9f007b04:	64                   	fs
9f007b05:	65                   	gs
9f007b06:	72 3a                	jb     9f007b42 <rcsid+0x42>
9f007b08:	20 2f                	and    BYTE PTR [edi],ch
9f007b0a:	75 73                	jne    9f007b7f <_DYNAMIC+0x13>
9f007b0c:	65                   	gs
9f007b0d:	72 36                	jb     9f007b45 <rcsid+0x45>
9f007b0f:	2f                   	das    
9f007b10:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007b11:	75 73                	jne    9f007b86 <_DYNAMIC+0x1a>
9f007b13:	74 65                	je     9f007b7a <_DYNAMIC+0xe>
9f007b15:	72 2f                	jb     9f007b46 <rcsid+0x46>
9f007b17:	74 63                	je     9f007b7c <_DYNAMIC+0x10>
9f007b19:	6c                   	ins    BYTE PTR es:[edi],dx
9f007b1a:	2f                   	das    
9f007b1b:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f007b1e:	70 61                	jo     9f007b81 <_DYNAMIC+0x15>
9f007b20:	74 2f                	je     9f007b51 <rcsid+0x51>
9f007b22:	52                   	push   edx
9f007b23:	43                   	inc    ebx
9f007b24:	53                   	push   ebx
9f007b25:	2f                   	das    
9f007b26:	73 74                	jae    9f007b9c <_DYNAMIC+0x30>
9f007b28:	72 73                	jb     9f007b9d <_DYNAMIC+0x31>
9f007b2a:	74 72                	je     9f007b9e <_DYNAMIC+0x32>
9f007b2c:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
9f007b30:	20 31                	and    BYTE PTR [ecx],dh
9f007b32:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
9f007b35:	39 33                	cmp    DWORD PTR [ebx],esi
9f007b37:	2f                   	das    
9f007b38:	30 33                	xor    BYTE PTR [ebx],dh
9f007b3a:	2f                   	das    
9f007b3b:	31 39                	xor    DWORD PTR [ecx],edi
9f007b3d:	20 31                	and    BYTE PTR [ecx],dh
9f007b3f:	35 3a 32 35 3a       	xor    eax,0x3a35323a
9f007b44:	34 30                	xor    al,0x30
9f007b46:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
9f007b49:	73 74                	jae    9f007bbf <_DYNAMIC+0x53>
9f007b4b:	65                   	gs
9f007b4c:	72 20                	jb     9f007b6e <_DYNAMIC+0x2>
9f007b4e:	45                   	inc    ebp
9f007b4f:	78 70                	js     9f007bc1 <_DYNAMIC+0x55>
9f007b51:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
9f007b54:	53                   	push   ebx
9f007b55:	50                   	push   eax
9f007b56:	52                   	push   edx
9f007b57:	49                   	dec    ecx
9f007b58:	54                   	push   esp
9f007b59:	45                   	inc    ebp
9f007b5a:	20 28                	and    BYTE PTR [eax],ch
9f007b5c:	42                   	inc    edx
9f007b5d:	65                   	gs
9f007b5e:	72 6b                	jb     9f007bcb <_DYNAMIC+0x5f>
9f007b60:	65                   	gs
9f007b61:	6c                   	ins    BYTE PTR es:[edi],dx
9f007b62:	65                   	gs
9f007b63:	79 29                	jns    9f007b8e <_DYNAMIC+0x22>
9f007b65:	00 00                	add    BYTE PTR [eax],al
	...

9f007b68 <_daylight>:
9f007b68:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

9f007b6c <_DYNAMIC>:
9f007b6c:	19 00                	sbb    DWORD PTR [eax],eax
9f007b6e:	00 00                	add    BYTE PTR [eax],al
9f007b70:	48                   	dec    eax
9f007b71:	7c 00                	jl     9f007b73 <_DYNAMIC+0x7>
9f007b73:	9f                   	lahf   
9f007b74:	1b 00                	sbb    eax,DWORD PTR [eax]
9f007b76:	00 00                	add    BYTE PTR [eax],al
9f007b78:	04 00                	add    al,0x0
9f007b7a:	00 00                	add    BYTE PTR [eax],al
9f007b7c:	1a 00                	sbb    al,BYTE PTR [eax]
9f007b7e:	00 00                	add    BYTE PTR [eax],al
9f007b80:	4c                   	dec    esp
9f007b81:	7c 00                	jl     9f007b83 <_DYNAMIC+0x17>
9f007b83:	9f                   	lahf   
9f007b84:	1c 00                	sbb    al,0x0
9f007b86:	00 00                	add    BYTE PTR [eax],al
9f007b88:	04 00                	add    al,0x0
9f007b8a:	00 00                	add    BYTE PTR [eax],al
9f007b8c:	04 00                	add    al,0x0
9f007b8e:	00 00                	add    BYTE PTR [eax],al
9f007b90:	c0 6b 00 9f          	shr    BYTE PTR [ebx+0x0],0x9f
9f007b94:	05 00 00 00 20       	add    eax,0x20000000
9f007b99:	69 00 9f 06 00 00    	imul   eax,DWORD PTR [eax],0x69f
9f007b9f:	00 b0 63 00 9f 0a    	add    BYTE PTR [eax+0xa9f0063],dh
9f007ba5:	00 00                	add    BYTE PTR [eax],al
9f007ba7:	00 9f 02 00 00 0b    	add    BYTE PTR [edi+0xb000002],bl
9f007bad:	00 00                	add    BYTE PTR [eax],al
9f007baf:	00 10                	add    BYTE PTR [eax],dl
9f007bb1:	00 00                	add    BYTE PTR [eax],al
9f007bb3:	00 11                	add    BYTE PTR [ecx],dl
9f007bb5:	00 00                	add    BYTE PTR [eax],al
9f007bb7:	00 c0                	add    al,al
9f007bb9:	79 00                	jns    9f007bbb <_DYNAMIC+0x4f>
9f007bbb:	9f                   	lahf   
9f007bbc:	12 00                	adc    al,BYTE PTR [eax]
9f007bbe:	00 00                	add    BYTE PTR [eax],al
9f007bc0:	30 01                	xor    BYTE PTR [ecx],al
9f007bc2:	00 00                	add    BYTE PTR [eax],al
9f007bc4:	13 00                	adc    eax,DWORD PTR [eax]
9f007bc6:	00 00                	add    BYTE PTR [eax],al
9f007bc8:	08 00                	or     BYTE PTR [eax],al
9f007bca:	00 00                	add    BYTE PTR [eax],al
9f007bcc:	16                   	push   ss
9f007bcd:	00 00                	add    BYTE PTR [eax],al
9f007bcf:	00 00                	add    BYTE PTR [eax],al
9f007bd1:	00 00                	add    BYTE PTR [eax],al
9f007bd3:	00 fa                	add    dl,bh
9f007bd5:	ff                   	(bad)  
9f007bd6:	ff 6f 0d             	jmp    FWORD PTR [edi+0xd]
	...

Disassembly of section .got:

9f007c04 <.got>:
9f007c04:	74 7c                	je     9f007c82 <resolvePath_inPath+0x2>
9f007c06:	00 9f 8c 7c 00 9f    	add    BYTE PTR [edi-0x60ff8374],bl
9f007c0c:	6c                   	ins    BYTE PTR es:[edi],dx
9f007c0d:	7c 00                	jl     9f007c0f <_DYNAMIC+0xa3>
9f007c0f:	9f                   	lahf   
9f007c10:	78 7c                	js     9f007c8e <params+0x2>
9f007c12:	00 9f 70 7c 00 9f    	add    BYTE PTR [edi-0x60ff8390],bl
9f007c18:	00 00                	add    BYTE PTR [eax],al
9f007c1a:	00 00                	add    BYTE PTR [eax],al
9f007c1c:	88 7c 00 9f          	mov    BYTE PTR [eax+eax*1-0x61],bh
	...
9f007c28:	60                   	pusha  
9f007c29:	7c 00                	jl     9f007c2b <_DYNAMIC+0xbf>
9f007c2b:	9f                   	lahf   
9f007c2c:	7c 7c                	jl     9f007caa <heapCurr+0x2>
9f007c2e:	00 9f 80 7c 00 9f    	add    BYTE PTR [edi-0x60ff8380],bl
9f007c34:	00 00                	add    BYTE PTR [eax],al
9f007c36:	00 00                	add    BYTE PTR [eax],al
9f007c38:	20 7d 00             	and    BYTE PTR [ebp+0x0],bh
9f007c3b:	9f                   	lahf   

Disassembly of section .got.plt:

9f007c3c <_GLOBAL_OFFSET_TABLE_>:
9f007c3c:	6c                   	ins    BYTE PTR es:[edi],dx
9f007c3d:	7b 00                	jnp    9f007c3f <_GLOBAL_OFFSET_TABLE_+0x3>
9f007c3f:	9f                   	lahf   
	...

Disassembly of section .init_array:

9f007c48 <.init_array>:
9f007c48:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

9f007c4c <.fini_array>:
9f007c4c:	29                   	.byte 0x29
9f007c4d:	15                   	.byte 0x15
9f007c4e:	00                   	.byte 0x0
9f007c4f:	9f                   	lahf   

Disassembly of section .data.rel.local:

9f007c50 <_tzname>:
9f007c50:	40                   	inc    eax
9f007c51:	79 00                	jns    9f007c53 <_tzname+0x3>
9f007c53:	9f                   	lahf   
9f007c54:	40                   	inc    eax
9f007c55:	79 00                	jns    9f007c57 <_tzname+0x7>
9f007c57:	9f                   	lahf   

Disassembly of section .bss:

9f007c60 <processEnvp>:
9f007c60:	00 00                	add    BYTE PTR [eax],al
	...

9f007c64 <lasts.1296>:
9f007c64:	00 00                	add    BYTE PTR [eax],al
	...

9f007c68 <lasts.1304>:
9f007c68:	00 00                	add    BYTE PTR [eax],al
	...

9f007c6c <filesToCloseCount>:
9f007c6c:	00 00                	add    BYTE PTR [eax],al
	...

9f007c70 <filesToClose>:
9f007c70:	00 00                	add    BYTE PTR [eax],al
	...

9f007c74 <resolvePath_envPath>:
9f007c74:	00 00                	add    BYTE PTR [eax],al
	...

9f007c78 <resolvePath_resPath>:
9f007c78:	00 00                	add    BYTE PTR [eax],al
	...

9f007c7c <resolvePath_cwd>:
9f007c7c:	00 00                	add    BYTE PTR [eax],al
	...

9f007c80 <resolvePath_inPath>:
9f007c80:	00 00                	add    BYTE PTR [eax],al
	...

9f007c84 <libcInitialized>:
9f007c84:	00 00                	add    BYTE PTR [eax],al
	...

9f007c88 <printBuffer>:
9f007c88:	00 00                	add    BYTE PTR [eax],al
	...

9f007c8c <params>:
	...

9f007ca4 <heapBase>:
9f007ca4:	00 00                	add    BYTE PTR [eax],al
	...

9f007ca8 <heapCurr>:
9f007ca8:	00 00                	add    BYTE PTR [eax],al
	...

9f007cac <heapEnd>:
9f007cac:	00 00                	add    BYTE PTR [eax],al
	...

9f007cb0 <lastHRCreated.1277>:
	...

9f007cc0 <tinfo.1481>:
	...

9f007cec <dirEntries.1507>:
9f007cec:	00 00                	add    BYTE PTR [eax],al
	...

9f007cf0 <_dstbias>:
9f007cf0:	00 00                	add    BYTE PTR [eax],al
	...

9f007cf4 <libcTZ>:
	...

9f007d00 <ticksToWait>:
	...

9f007d20 <tmbuf>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	09 01                	or     DWORD PTR [ecx],eax
       2:	00 00                	add    BYTE PTR [eax],al
       4:	04 00                	add    al,0x0
       6:	00 00                	add    BYTE PTR [eax],al
       8:	00 00                	add    BYTE PTR [eax],al
       a:	04 01                	add    al,0x1
       c:	c3                   	ret    
       d:	00 00                	add    BYTE PTR [eax],al
       f:	00 0c 84             	add    BYTE PTR [esp+eax*4],cl
      12:	00 00                	add    BYTE PTR [eax],al
      14:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
      17:	00 00                	add    BYTE PTR [eax],al
      19:	00 00                	add    BYTE PTR [eax],al
      1b:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
      21:	00 00                	add    BYTE PTR [eax],al
      23:	00 00                	add    BYTE PTR [eax],al
      25:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
      2c:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
      2f:	32 00                	xor    al,BYTE PTR [eax]
      31:	00 00                	add    BYTE PTR [eax],al
      33:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
      3a:	03 08                	add    ecx,DWORD PTR [eax]
      3c:	05 00 00 00 00       	add    eax,0x0
      41:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
      44:	ad                   	lods   eax,DWORD PTR ds:[esi]
      45:	00 00                	add    BYTE PTR [eax],al
      47:	00 03                	add    BYTE PTR [ebx],al
      49:	01 06                	add    DWORD PTR [esi],eax
      4b:	48                   	dec    eax
      4c:	00 00                	add    BYTE PTR [eax],al
      4e:	00 03                	add    BYTE PTR [ebx],al
      50:	01 08                	add    DWORD PTR [eax],ecx
      52:	3f                   	aas    
      53:	00 00                	add    BYTE PTR [eax],al
      55:	00 03                	add    BYTE PTR [ebx],al
      57:	02 07                	add    al,BYTE PTR [edi]
      59:	0e                   	push   cs
      5a:	00 00                	add    BYTE PTR [eax],al
      5c:	00 03                	add    BYTE PTR [ebx],al
      5e:	04 07                	add    al,0x7
      60:	2d 00 00 00 03       	sub    eax,0x3000000
      65:	01 06                	add    DWORD PTR [esi],eax
      67:	41                   	inc    ecx
      68:	00 00                	add    BYTE PTR [eax],al
      6a:	00 03                	add    BYTE PTR [ebx],al
      6c:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
      72:	03 08                	add    ecx,DWORD PTR [eax]
      74:	07                   	pop    es
      75:	28 00                	sub    BYTE PTR [eax],al
      77:	00 00                	add    BYTE PTR [eax],al
      79:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
      7c:	2a 01                	sub    al,BYTE PTR [ecx]
      7e:	00 00                	add    BYTE PTR [eax],al
      80:	04 04                	add    al,0x4
      82:	48                   	dec    eax
      83:	00 00                	add    BYTE PTR [eax],al
      85:	00 05 21 00 00 00    	add    BYTE PTR ds:0x21,al
      8b:	01 09                	add    DWORD PTR [ecx],ecx
      8d:	80 00 00             	add    BYTE PTR [eax],0x0
      90:	00 00                	add    BYTE PTR [eax],al
      92:	00 00                	add    BYTE PTR [eax],al
      94:	9f                   	lahf   
      95:	38 00                	cmp    BYTE PTR [eax],al
      97:	00 00                	add    BYTE PTR [eax],al
      99:	01 9c b8 00 00 00 06 	add    DWORD PTR [eax+edi*4+0x6000000],ebx
      a0:	73 00                	jae    a2 <sysEnter_Vector-0x12ff5e>
      a2:	01 09                	add    DWORD PTR [ecx],ecx
      a4:	b8 00 00 00 02       	mov    eax,0x2000000
      a9:	91                   	xchg   ecx,eax
      aa:	00 06                	add    BYTE PTR [esi],al
      ac:	63 00                	arpl   WORD PTR [eax],ax
      ae:	01 09                	add    DWORD PTR [ecx],ecx
      b0:	25 00 00 00 02       	and    eax,0x2000000
      b5:	91                   	xchg   ecx,eax
      b6:	04 00                	add    al,0x0
      b8:	04 04                	add    al,0x4
      ba:	be 00 00 00 07       	mov    esi,0x7000000
      bf:	48                   	dec    eax
      c0:	00 00                	add    BYTE PTR [eax],al
      c2:	00 05 70 00 00 00    	add    BYTE PTR ds:0x70,al
      c8:	01 11                	add    DWORD PTR [ecx],edx
      ca:	80 00 00             	add    BYTE PTR [eax],0x0
      cd:	00 38                	add    BYTE PTR [eax],bh
      cf:	00 00                	add    BYTE PTR [eax],al
      d1:	9f                   	lahf   
      d2:	38 00                	cmp    BYTE PTR [eax],al
      d4:	00 00                	add    BYTE PTR [eax],al
      d6:	01 9c f5 00 00 00 06 	add    DWORD PTR [ebp+esi*8+0x6000000],ebx
      dd:	73 00                	jae    df <sysEnter_Vector-0x12ff21>
      df:	01 11                	add    DWORD PTR [ecx],edx
      e1:	b8 00 00 00 02       	mov    eax,0x2000000
      e6:	91                   	xchg   ecx,eax
      e7:	00 06                	add    BYTE PTR [esi],al
      e9:	63 00                	arpl   WORD PTR [eax],ax
      eb:	01 11                	add    DWORD PTR [ecx],edx
      ed:	25 00 00 00 02       	and    eax,0x2000000
      f2:	91                   	xchg   ecx,eax
      f3:	04 00                	add    al,0x0
      f5:	08 78 00             	or     BYTE PTR [eax+0x0],bh
      f8:	00 00                	add    BYTE PTR [eax],al
      fa:	02 33                	add    dh,BYTE PTR [ebx]
      fc:	06                   	push   es
      fd:	01 00                	add    DWORD PTR [eax],eax
      ff:	00 05 03 60 7c 00    	add    BYTE PTR ds:0x7c6003,al
     105:	9f                   	lahf   
     106:	04 04                	add    al,0x4
     108:	80 00 00             	add    BYTE PTR [eax],0x0
     10b:	00 00                	add    BYTE PTR [eax],al
     10d:	48                   	dec    eax
     10e:	01 00                	add    DWORD PTR [eax],eax
     110:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     113:	76 00                	jbe    115 <sysEnter_Vector-0x12feeb>
     115:	00 00                	add    BYTE PTR [eax],al
     117:	04 01                	add    al,0x1
     119:	c3                   	ret    
     11a:	00 00                	add    BYTE PTR [eax],al
     11c:	00 0c 39             	add    BYTE PTR [ecx+edi*1],cl
     11f:	01 00                	add    DWORD PTR [eax],eax
     121:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
     124:	00 00                	add    BYTE PTR [eax],al
     126:	70 00                	jo     128 <sysEnter_Vector-0x12fed8>
     128:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
     12e:	79 00                	jns    130 <sysEnter_Vector-0x12fed0>
     130:	00 00                	add    BYTE PTR [eax],al
     132:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
     139:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
     13c:	32 00                	xor    al,BYTE PTR [eax]
     13e:	00 00                	add    BYTE PTR [eax],al
     140:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
     147:	03 08                	add    ecx,DWORD PTR [eax]
     149:	05 00 00 00 00       	add    eax,0x0
     14e:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
     151:	ad                   	lods   eax,DWORD PTR ds:[esi]
     152:	00 00                	add    BYTE PTR [eax],al
     154:	00 03                	add    BYTE PTR [ebx],al
     156:	01 06                	add    DWORD PTR [esi],eax
     158:	48                   	dec    eax
     159:	00 00                	add    BYTE PTR [eax],al
     15b:	00 03                	add    BYTE PTR [ebx],al
     15d:	01 08                	add    DWORD PTR [eax],ecx
     15f:	3f                   	aas    
     160:	00 00                	add    BYTE PTR [eax],al
     162:	00 03                	add    BYTE PTR [ebx],al
     164:	02 07                	add    al,BYTE PTR [edi]
     166:	0e                   	push   cs
     167:	00 00                	add    BYTE PTR [eax],al
     169:	00 03                	add    BYTE PTR [ebx],al
     16b:	04 07                	add    al,0x7
     16d:	2d 00 00 00 03       	sub    eax,0x3000000
     172:	01 06                	add    DWORD PTR [esi],eax
     174:	41                   	inc    ecx
     175:	00 00                	add    BYTE PTR [eax],al
     177:	00 03                	add    BYTE PTR [ebx],al
     179:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     17f:	03 08                	add    ecx,DWORD PTR [eax]
     181:	07                   	pop    es
     182:	28 00                	sub    BYTE PTR [eax],al
     184:	00 00                	add    BYTE PTR [eax],al
     186:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
     189:	2a 01                	sub    al,BYTE PTR [ecx]
     18b:	00 00                	add    BYTE PTR [eax],al
     18d:	04 04                	add    al,0x4
     18f:	48                   	dec    eax
     190:	00 00                	add    BYTE PTR [eax],al
     192:	00 05 63 01 00 00    	add    BYTE PTR ds:0x163,al
     198:	01 26                	add    DWORD PTR [esi],esp
     19a:	25 00 00 00 70       	and    eax,0x70000000
     19f:	00 00                	add    BYTE PTR [eax],al
     1a1:	9f                   	lahf   
     1a2:	55                   	push   ebp
     1a3:	00 00                	add    BYTE PTR [eax],al
     1a5:	00 01                	add    BYTE PTR [ecx],al
     1a7:	9c                   	pushf  
     1a8:	dd 00                	fld    QWORD PTR [eax]
     1aa:	00 00                	add    BYTE PTR [eax],al
     1ac:	06                   	push   es
     1ad:	c9                   	leave  
     1ae:	10 00                	adc    BYTE PTR [eax],al
     1b0:	00 01                	add    BYTE PTR [ecx],al
     1b2:	26 80 00 00          	add    BYTE PTR es:[eax],0x0
     1b6:	00 02                	add    BYTE PTR [edx],al
     1b8:	91                   	xchg   ecx,eax
     1b9:	00 06                	add    BYTE PTR [esi],al
     1bb:	33 01                	xor    eax,DWORD PTR [ecx]
     1bd:	00 00                	add    BYTE PTR [eax],al
     1bf:	01 26                	add    DWORD PTR [esi],esp
     1c1:	80 00 00             	add    BYTE PTR [eax],0x0
     1c4:	00 02                	add    BYTE PTR [edx],al
     1c6:	91                   	xchg   ecx,eax
     1c7:	04 07                	add    al,0x7
     1c9:	63 00                	arpl   WORD PTR [eax],ax
     1cb:	01 28                	add    DWORD PTR [eax],ebp
     1cd:	48                   	dec    eax
     1ce:	00 00                	add    BYTE PTR [eax],al
     1d0:	00 01                	add    BYTE PTR [ecx],al
     1d2:	51                   	push   ecx
     1d3:	07                   	pop    es
     1d4:	70 00                	jo     1d6 <sysEnter_Vector-0x12fe2a>
     1d6:	01 28                	add    DWORD PTR [eax],ebp
     1d8:	80 00 00             	add    BYTE PTR [eax],0x0
     1db:	00 01                	add    BYTE PTR [ecx],al
     1dd:	56                   	push   esi
     1de:	07                   	pop    es
     1df:	73 00                	jae    1e1 <sysEnter_Vector-0x12fe1f>
     1e1:	01 28                	add    DWORD PTR [eax],ebp
     1e3:	80 00 00             	add    BYTE PTR [eax],0x0
     1e6:	00 01                	add    BYTE PTR [ecx],al
     1e8:	53                   	push   ebx
     1e9:	00 05 6b 01 00 00    	add    BYTE PTR ds:0x16b,al
     1ef:	01 34 25 00 00 00 c5 	add    DWORD PTR [eiz*1-0x3b000000],esi
     1f6:	00 00                	add    BYTE PTR [eax],al
     1f8:	9f                   	lahf   
     1f9:	55                   	push   ebp
     1fa:	00 00                	add    BYTE PTR [eax],al
     1fc:	00 01                	add    BYTE PTR [ecx],al
     1fe:	9c                   	pushf  
     1ff:	34 01                	xor    al,0x1
     201:	00 00                	add    BYTE PTR [eax],al
     203:	06                   	push   es
     204:	c9                   	leave  
     205:	10 00                	adc    BYTE PTR [eax],al
     207:	00 01                	add    BYTE PTR [ecx],al
     209:	34 80                	xor    al,0x80
     20b:	00 00                	add    BYTE PTR [eax],al
     20d:	00 02                	add    BYTE PTR [edx],al
     20f:	91                   	xchg   ecx,eax
     210:	00 06                	add    BYTE PTR [esi],al
     212:	33 01                	xor    eax,DWORD PTR [ecx]
     214:	00 00                	add    BYTE PTR [eax],al
     216:	01 34 80             	add    DWORD PTR [eax+eax*4],esi
     219:	00 00                	add    BYTE PTR [eax],al
     21b:	00 02                	add    BYTE PTR [edx],al
     21d:	91                   	xchg   ecx,eax
     21e:	04 07                	add    al,0x7
     220:	63 00                	arpl   WORD PTR [eax],ax
     222:	01 36                	add    DWORD PTR [esi],esi
     224:	48                   	dec    eax
     225:	00 00                	add    BYTE PTR [eax],al
     227:	00 01                	add    BYTE PTR [ecx],al
     229:	51                   	push   ecx
     22a:	07                   	pop    es
     22b:	70 00                	jo     22d <sysEnter_Vector-0x12fdd3>
     22d:	01 36                	add    DWORD PTR [esi],esi
     22f:	80 00 00             	add    BYTE PTR [eax],0x0
     232:	00 01                	add    BYTE PTR [ecx],al
     234:	56                   	push   esi
     235:	07                   	pop    es
     236:	73 00                	jae    238 <sysEnter_Vector-0x12fdc8>
     238:	01 36                	add    DWORD PTR [esi],esi
     23a:	80 00 00             	add    BYTE PTR [eax],0x0
     23d:	00 01                	add    BYTE PTR [ecx],al
     23f:	53                   	push   ebx
     240:	00 08                	add    BYTE PTR [eax],cl
     242:	78 00                	js     244 <sysEnter_Vector-0x12fdbc>
     244:	00 00                	add    BYTE PTR [eax],al
     246:	02 33                	add    dh,BYTE PTR [ebx]
     248:	45                   	inc    ebp
     249:	01 00                	add    DWORD PTR [eax],eax
     24b:	00 05 03 60 7c 00    	add    BYTE PTR ds:0x7c6003,al
     251:	9f                   	lahf   
     252:	04 04                	add    al,0x4
     254:	80 00 00             	add    BYTE PTR [eax],0x0
     257:	00 00                	add    BYTE PTR [eax],al
     259:	3c 01                	cmp    al,0x1
     25b:	00 00                	add    BYTE PTR [eax],al
     25d:	04 00                	add    al,0x0
     25f:	f4                   	hlt    
     260:	00 00                	add    BYTE PTR [eax],al
     262:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     265:	c3                   	ret    
     266:	00 00                	add    BYTE PTR [eax],al
     268:	00 0c 82             	add    BYTE PTR [edx+eax*4],cl
     26b:	01 00                	add    DWORD PTR [eax],eax
     26d:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
     270:	00 00                	add    BYTE PTR [eax],al
     272:	1c 01                	sbb    al,0x1
     274:	00 9f 2e 01 00 00    	add    BYTE PTR [edi+0x12e],bl
     27a:	23 01                	and    eax,DWORD PTR [ecx]
     27c:	00 00                	add    BYTE PTR [eax],al
     27e:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
     285:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
     288:	32 00                	xor    al,BYTE PTR [eax]
     28a:	00 00                	add    BYTE PTR [eax],al
     28c:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
     293:	03 08                	add    ecx,DWORD PTR [eax]
     295:	05 00 00 00 00       	add    eax,0x0
     29a:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
     29d:	ad                   	lods   eax,DWORD PTR ds:[esi]
     29e:	00 00                	add    BYTE PTR [eax],al
     2a0:	00 03                	add    BYTE PTR [ebx],al
     2a2:	01 06                	add    DWORD PTR [esi],eax
     2a4:	48                   	dec    eax
     2a5:	00 00                	add    BYTE PTR [eax],al
     2a7:	00 03                	add    BYTE PTR [ebx],al
     2a9:	01 08                	add    DWORD PTR [eax],ecx
     2ab:	3f                   	aas    
     2ac:	00 00                	add    BYTE PTR [eax],al
     2ae:	00 03                	add    BYTE PTR [ebx],al
     2b0:	02 07                	add    al,BYTE PTR [edi]
     2b2:	0e                   	push   cs
     2b3:	00 00                	add    BYTE PTR [eax],al
     2b5:	00 03                	add    BYTE PTR [ebx],al
     2b7:	04 07                	add    al,0x7
     2b9:	2d 00 00 00 03       	sub    eax,0x3000000
     2be:	01 06                	add    DWORD PTR [esi],eax
     2c0:	41                   	inc    ecx
     2c1:	00 00                	add    BYTE PTR [eax],al
     2c3:	00 03                	add    BYTE PTR [ebx],al
     2c5:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     2cb:	03 08                	add    ecx,DWORD PTR [eax]
     2cd:	07                   	pop    es
     2ce:	28 00                	sub    BYTE PTR [eax],al
     2d0:	00 00                	add    BYTE PTR [eax],al
     2d2:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
     2d5:	2a 01                	sub    al,BYTE PTR [ecx]
     2d7:	00 00                	add    BYTE PTR [eax],al
     2d9:	04 04                	add    al,0x4
     2db:	48                   	dec    eax
     2dc:	00 00                	add    BYTE PTR [eax],al
     2de:	00 05 74 01 00 00    	add    BYTE PTR ds:0x174,al
     2e4:	01 2a                	add    DWORD PTR [edx],ebp
     2e6:	80 00 00             	add    BYTE PTR [eax],0x0
     2e9:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     2ec:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
     2f2:	01 9c d7 00 00 00 06 	add    DWORD PTR [edi+edx*8+0x6000000],ebx
     2f9:	73 00                	jae    2fb <sysEnter_Vector-0x12fd05>
     2fb:	01 2a                	add    DWORD PTR [edx],ebp
     2fd:	80 00 00             	add    BYTE PTR [eax],0x0
     300:	00 02                	add    BYTE PTR [edx],al
     302:	91                   	xchg   ecx,eax
     303:	00 07                	add    BYTE PTR [edi],al
     305:	7c 01                	jl     308 <sysEnter_Vector-0x12fcf8>
     307:	00 00                	add    BYTE PTR [eax],al
     309:	01 2a                	add    DWORD PTR [edx],ebp
     30b:	80 00 00             	add    BYTE PTR [eax],0x0
     30e:	00 02                	add    BYTE PTR [edx],al
     310:	91                   	xchg   ecx,eax
     311:	04 08                	add    al,0x8
     313:	ab                   	stos   DWORD PTR es:[edi],eax
     314:	01 00                	add    DWORD PTR [eax],eax
     316:	00 01                	add    BYTE PTR [ecx],al
     318:	2c 80                	sub    al,0x80
     31a:	00 00                	add    BYTE PTR [eax],al
     31c:	00 05 03 64 7c 00    	add    BYTE PTR ds:0x7c6403,al
     322:	9f                   	lahf   
     323:	09 63 68             	or     DWORD PTR [ebx+0x68],esp
     326:	00 01                	add    BYTE PTR [ecx],al
     328:	2d 25 00 00 00       	sub    eax,0x25
     32d:	01 56 00             	add    DWORD PTR [esi+0x0],edx
     330:	05 b1 01 00 00       	add    eax,0x1b1
     335:	01 3c 80             	add    DWORD PTR [eax+eax*4],edi
     338:	00 00                	add    BYTE PTR [eax],al
     33a:	00 b3 01 00 9f 97    	add    BYTE PTR [ebx-0x6860ffff],dh
     340:	00 00                	add    BYTE PTR [eax],al
     342:	00 01                	add    BYTE PTR [ecx],al
     344:	9c                   	pushf  
     345:	28 01                	sub    BYTE PTR [ecx],al
     347:	00 00                	add    BYTE PTR [eax],al
     349:	06                   	push   es
     34a:	73 00                	jae    34c <sysEnter_Vector-0x12fcb4>
     34c:	01 3c 80             	add    DWORD PTR [eax+eax*4],edi
     34f:	00 00                	add    BYTE PTR [eax],al
     351:	00 02                	add    BYTE PTR [edx],al
     353:	91                   	xchg   ecx,eax
     354:	00 07                	add    BYTE PTR [edi],al
     356:	7c 01                	jl     359 <sysEnter_Vector-0x12fca7>
     358:	00 00                	add    BYTE PTR [eax],al
     35a:	01 3c 80             	add    DWORD PTR [eax+eax*4],edi
     35d:	00 00                	add    BYTE PTR [eax],al
     35f:	00 02                	add    BYTE PTR [edx],al
     361:	91                   	xchg   ecx,eax
     362:	04 08                	add    al,0x8
     364:	ab                   	stos   DWORD PTR es:[edi],eax
     365:	01 00                	add    DWORD PTR [eax],eax
     367:	00 01                	add    BYTE PTR [ecx],al
     369:	3e 80 00 00          	add    BYTE PTR ds:[eax],0x0
     36d:	00 05 03 68 7c 00    	add    BYTE PTR ds:0x7c6803,al
     373:	9f                   	lahf   
     374:	09 63 68             	or     DWORD PTR [ebx+0x68],esp
     377:	00 01                	add    BYTE PTR [ecx],al
     379:	3f                   	aas    
     37a:	25 00 00 00 01       	and    eax,0x1000000
     37f:	56                   	push   esi
     380:	00 0a                	add    BYTE PTR [edx],cl
     382:	78 00                	js     384 <sysEnter_Vector-0x12fc7c>
     384:	00 00                	add    BYTE PTR [eax],al
     386:	02 33                	add    dh,BYTE PTR [ebx]
     388:	39 01                	cmp    DWORD PTR [ecx],eax
     38a:	00 00                	add    BYTE PTR [eax],al
     38c:	05 03 60 7c 00       	add    eax,0x7c6003
     391:	9f                   	lahf   
     392:	04 04                	add    al,0x4
     394:	80 00 00             	add    BYTE PTR [eax],0x0
     397:	00 00                	add    BYTE PTR [eax],al
     399:	e8 01 00 00 04       	call   400039f <sysEnter_Vector+0x3ed039f>
     39e:	00 90 01 00 00 04    	add    BYTE PTR [eax+0x4000001],dl
     3a4:	01 c3                	add    ebx,eax
     3a6:	00 00                	add    BYTE PTR [eax],al
     3a8:	00 0c d7             	add    BYTE PTR [edi+edx*8],cl
     3ab:	01 00                	add    DWORD PTR [eax],eax
     3ad:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
     3b0:	00 00                	add    BYTE PTR [eax],al
     3b2:	4c                   	dec    esp
     3b3:	02 00                	add    al,BYTE PTR [eax]
     3b5:	9f                   	lahf   
     3b6:	65 02 00             	add    al,BYTE PTR gs:[eax]
     3b9:	00 ae 01 00 00 02    	add    BYTE PTR [esi+0x2000001],ch
     3bf:	01 08                	add    DWORD PTR [eax],ecx
     3c1:	3f                   	aas    
     3c2:	00 00                	add    BYTE PTR [eax],al
     3c4:	00 02                	add    BYTE PTR [edx],al
     3c6:	02 07                	add    al,BYTE PTR [edi]
     3c8:	0e                   	push   cs
     3c9:	00 00                	add    BYTE PTR [eax],al
     3cb:	00 02                	add    BYTE PTR [edx],al
     3cd:	04 07                	add    al,0x7
     3cf:	32 00                	xor    al,BYTE PTR [eax]
     3d1:	00 00                	add    BYTE PTR [eax],al
     3d3:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     3d6:	2d 00 00 00 02       	sub    eax,0x2000000
     3db:	01 06                	add    DWORD PTR [esi],eax
     3dd:	41                   	inc    ecx
     3de:	00 00                	add    BYTE PTR [eax],al
     3e0:	00 02                	add    BYTE PTR [edx],al
     3e2:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     3e8:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     3ef:	02 08                	add    cl,BYTE PTR [eax]
     3f1:	05 00 00 00 00       	add    eax,0x0
     3f6:	02 08                	add    cl,BYTE PTR [eax]
     3f8:	07                   	pop    es
     3f9:	28 00                	sub    BYTE PTR [eax],al
     3fb:	00 00                	add    BYTE PTR [eax],al
     3fd:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     404:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     407:	2a 01                	sub    al,BYTE PTR [ecx]
     409:	00 00                	add    BYTE PTR [eax],al
     40b:	04 04                	add    al,0x4
     40d:	78 00                	js     40f <sysEnter_Vector-0x12fbf1>
     40f:	00 00                	add    BYTE PTR [eax],al
     411:	02 01                	add    al,BYTE PTR [ecx]
     413:	06                   	push   es
     414:	48                   	dec    eax
     415:	00 00                	add    BYTE PTR [eax],al
     417:	00 02                	add    BYTE PTR [edx],al
     419:	0c 04                	or     al,0x4
     41b:	ad                   	lods   eax,DWORD PTR ds:[esi]
     41c:	00 00                	add    BYTE PTR [eax],al
     41e:	00 05 c9 01 00 00    	add    BYTE PTR ds:0x1c9,al
     424:	01 0a                	add    DWORD PTR [edx],ecx
     426:	4c                   	dec    esp
     427:	02 00                	add    al,BYTE PTR [eax]
     429:	9f                   	lahf   
     42a:	77 00                	ja     42c <sysEnter_Vector-0x12fbd4>
     42c:	00 00                	add    BYTE PTR [eax],al
     42e:	01 9c cc 00 00 00 06 	add    DWORD PTR [esp+ecx*8+0x6000000],ebx
     435:	73 00                	jae    437 <sysEnter_Vector-0x12fbc9>
     437:	01 0a                	add    DWORD PTR [edx],ecx
     439:	72 00                	jb     43b <sysEnter_Vector-0x12fbc5>
     43b:	00 00                	add    BYTE PTR [eax],al
     43d:	02 91 00 07 69 00    	add    dl,BYTE PTR [ecx+0x690700]
     443:	01 0c 4f             	add    DWORD PTR [edi+ecx*2],ecx
     446:	00 00                	add    BYTE PTR [eax],al
     448:	00 02                	add    BYTE PTR [edx],al
     44a:	91                   	xchg   ecx,eax
     44b:	6c                   	ins    BYTE PTR es:[edi],dx
     44c:	07                   	pop    es
     44d:	6a 00                	push   0x0
     44f:	01 0c 4f             	add    DWORD PTR [edi+ecx*2],ecx
     452:	00 00                	add    BYTE PTR [eax],al
     454:	00 02                	add    BYTE PTR [edx],al
     456:	91                   	xchg   ecx,eax
     457:	68 07 63 00 01       	push   0x1006307
     45c:	0d 78 00 00 00       	or     eax,0x78
     461:	02 91 67 00 05 b8    	add    dl,BYTE PTR [ecx-0x47faff99]
     467:	01 00                	add    DWORD PTR [eax],eax
     469:	00 01                	add    BYTE PTR [ecx],al
     46b:	16                   	push   ss
     46c:	c3                   	ret    
     46d:	02 00                	add    al,BYTE PTR [eax]
     46f:	9f                   	lahf   
     470:	bb 00 00 00 01       	mov    ebx,0x1000000
     475:	9c                   	pushf  
     476:	14 01                	adc    al,0x1
     478:	00 00                	add    BYTE PTR [eax],al
     47a:	06                   	push   es
     47b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     47c:	00 01                	add    BYTE PTR [ecx],al
     47e:	16                   	push   ss
     47f:	4f                   	dec    edi
     480:	00 00                	add    BYTE PTR [eax],al
     482:	00 02                	add    BYTE PTR [edx],al
     484:	91                   	xchg   ecx,eax
     485:	00 06                	add    BYTE PTR [esi],al
     487:	73 00                	jae    489 <sysEnter_Vector-0x12fb77>
     489:	01 16                	add    DWORD PTR [esi],edx
     48b:	72 00                	jb     48d <sysEnter_Vector-0x12fb73>
     48d:	00 00                	add    BYTE PTR [eax],al
     48f:	02 91 04 07 69 00    	add    dl,BYTE PTR [ecx+0x690704]
     495:	01 18                	add    DWORD PTR [eax],ebx
     497:	4f                   	dec    edi
     498:	00 00                	add    BYTE PTR [eax],al
     49a:	00 02                	add    BYTE PTR [edx],al
     49c:	91                   	xchg   ecx,eax
     49d:	6c                   	ins    BYTE PTR es:[edi],dx
     49e:	08 d2                	or     dl,dl
     4a0:	01 00                	add    DWORD PTR [eax],eax
     4a2:	00 01                	add    BYTE PTR [ecx],al
     4a4:	18 4f 00             	sbb    BYTE PTR [edi+0x0],cl
     4a7:	00 00                	add    BYTE PTR [eax],al
     4a9:	02 91 68 00 09 bd    	add    dl,BYTE PTR [ecx-0x42f6ff98]
     4af:	01 00                	add    DWORD PTR [eax],eax
     4b1:	00 01                	add    BYTE PTR [ecx],al
     4b3:	26                   	es
     4b4:	72 00                	jb     4b6 <sysEnter_Vector-0x12fb4a>
     4b6:	00 00                	add    BYTE PTR [eax],al
     4b8:	7e 03                	jle    4bd <sysEnter_Vector-0x12fb43>
     4ba:	00 9f bd 00 00 00    	add    BYTE PTR [edi+0xbd],bl
     4c0:	01 9c 60 01 00 00 06 	add    DWORD PTR [eax+eiz*2+0x6000001],ebx
     4c7:	6e                   	outs   dx,BYTE PTR ds:[esi]
     4c8:	00 01                	add    BYTE PTR [ecx],al
     4ca:	26                   	es
     4cb:	4f                   	dec    edi
     4cc:	00 00                	add    BYTE PTR [eax],al
     4ce:	00 02                	add    BYTE PTR [edx],al
     4d0:	91                   	xchg   ecx,eax
     4d1:	00 06                	add    BYTE PTR [esi],al
     4d3:	73 00                	jae    4d5 <sysEnter_Vector-0x12fb2b>
     4d5:	01 26                	add    DWORD PTR [esi],esp
     4d7:	72 00                	jb     4d9 <sysEnter_Vector-0x12fb27>
     4d9:	00 00                	add    BYTE PTR [eax],al
     4db:	02 91 04 07 69 00    	add    dl,BYTE PTR [ecx+0x690704]
     4e1:	01 28                	add    DWORD PTR [eax],ebp
     4e3:	4f                   	dec    edi
     4e4:	00 00                	add    BYTE PTR [eax],al
     4e6:	00 02                	add    BYTE PTR [edx],al
     4e8:	91                   	xchg   ecx,eax
     4e9:	6c                   	ins    BYTE PTR es:[edi],dx
     4ea:	08 d2                	or     dl,dl
     4ec:	01 00                	add    DWORD PTR [eax],eax
     4ee:	00 01                	add    BYTE PTR [ecx],al
     4f0:	28 4f 00             	sub    BYTE PTR [edi+0x0],cl
     4f3:	00 00                	add    BYTE PTR [eax],al
     4f5:	02 91 68 00 0a c3    	add    dl,BYTE PTR [ecx-0x3cf5ff98]
     4fb:	01 00                	add    DWORD PTR [eax],eax
     4fd:	00 01                	add    BYTE PTR [ecx],al
     4ff:	38 4f 00             	cmp    BYTE PTR [edi+0x0],cl
     502:	00 00                	add    BYTE PTR [eax],al
     504:	3b 04 00             	cmp    eax,DWORD PTR [eax+eax*1]
     507:	9f                   	lahf   
     508:	5c                   	pop    esp
     509:	00 00                	add    BYTE PTR [eax],al
     50b:	00 01                	add    BYTE PTR [ecx],al
     50d:	9c                   	pushf  
     50e:	ac                   	lods   al,BYTE PTR ds:[esi]
     50f:	01 00                	add    DWORD PTR [eax],eax
     511:	00 06                	add    BYTE PTR [esi],al
     513:	73 74                	jae    589 <sysEnter_Vector-0x12fa77>
     515:	72 00                	jb     517 <sysEnter_Vector-0x12fae9>
     517:	01 38                	add    DWORD PTR [eax],edi
     519:	72 00                	jb     51b <sysEnter_Vector-0x12fae5>
     51b:	00 00                	add    BYTE PTR [eax],al
     51d:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
     523:	73 00                	jae    525 <sysEnter_Vector-0x12fadb>
     525:	01 3a                	add    DWORD PTR [edx],edi
     527:	4f                   	dec    edi
     528:	00 00                	add    BYTE PTR [eax],al
     52a:	00 02                	add    BYTE PTR [edx],al
     52c:	91                   	xchg   ecx,eax
     52d:	74 0b                	je     53a <sysEnter_Vector-0x12fac6>
     52f:	52                   	push   edx
     530:	04 00                	add    al,0x0
     532:	9f                   	lahf   
     533:	40                   	inc    eax
     534:	00 00                	add    BYTE PTR [eax],al
     536:	00 07                	add    BYTE PTR [edi],al
     538:	69 00 01 3e 4f 00    	imul   eax,DWORD PTR [eax],0x4f3e01
     53e:	00 00                	add    BYTE PTR [eax],al
     540:	02 91 70 00 00 09    	add    dl,BYTE PTR [ecx+0x9000070]
     546:	10 0e                	adc    BYTE PTR [esi],cl
     548:	00 00                	add    BYTE PTR [eax],al
     54a:	01 45 4f             	add    DWORD PTR [ebp+0x4f],eax
     54d:	00 00                	add    BYTE PTR [eax],al
     54f:	00 97 04 00 9f 1a    	add    BYTE PTR [edi+0x1a9f0004],dl
     555:	00 00                	add    BYTE PTR [eax],al
     557:	00 01                	add    BYTE PTR [ecx],al
     559:	9c                   	pushf  
     55a:	d4 01                	aam    0x1
     55c:	00 00                	add    BYTE PTR [eax],al
     55e:	06                   	push   es
     55f:	73 74                	jae    5d5 <sysEnter_Vector-0x12fa2b>
     561:	72 00                	jb     563 <sysEnter_Vector-0x12fa9d>
     563:	01 45 72             	add    DWORD PTR [ebp+0x72],eax
     566:	00 00                	add    BYTE PTR [eax],al
     568:	00 02                	add    BYTE PTR [edx],al
     56a:	91                   	xchg   ecx,eax
     56b:	00 00                	add    BYTE PTR [eax],al
     56d:	0c 78                	or     al,0x78
     56f:	00 00                	add    BYTE PTR [eax],al
     571:	00 02                	add    BYTE PTR [edx],al
     573:	33 e5                	xor    esp,ebp
     575:	01 00                	add    DWORD PTR [eax],eax
     577:	00 05 03 60 7c 00    	add    BYTE PTR ds:0x7c6003,al
     57d:	9f                   	lahf   
     57e:	04 04                	add    al,0x4
     580:	72 00                	jb     582 <sysEnter_Vector-0x12fa7e>
     582:	00 00                	add    BYTE PTR [eax],al
     584:	00 ae 01 00 00 04    	add    BYTE PTR [esi+0x4000001],ch
     58a:	00 5c 02 00          	add    BYTE PTR [edx+eax*1+0x0],bl
     58e:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     591:	c3                   	ret    
     592:	00 00                	add    BYTE PTR [eax],al
     594:	00 0c 5c             	add    BYTE PTR [esp+ebx*2],cl
     597:	02 00                	add    al,BYTE PTR [eax]
     599:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
     59c:	00 00                	add    BYTE PTR [eax],al
     59e:	b4 04                	mov    ah,0x4
     5a0:	00 9f 6e 01 00 00    	add    BYTE PTR [edi+0x16e],bl
     5a6:	69 02 00 00 02 01    	imul   eax,DWORD PTR [edx],0x1020000
     5ac:	06                   	push   es
     5ad:	41                   	inc    ecx
     5ae:	00 00                	add    BYTE PTR [eax],al
     5b0:	00 02                	add    BYTE PTR [edx],al
     5b2:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     5b8:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     5bf:	02 08                	add    cl,BYTE PTR [eax]
     5c1:	05 00 00 00 00       	add    eax,0x0
     5c6:	02 01                	add    al,BYTE PTR [ecx]
     5c8:	08 3f                	or     BYTE PTR [edi],bh
     5ca:	00 00                	add    BYTE PTR [eax],al
     5cc:	00 02                	add    BYTE PTR [edx],al
     5ce:	02 07                	add    al,BYTE PTR [edi]
     5d0:	0e                   	push   cs
     5d1:	00 00                	add    BYTE PTR [eax],al
     5d3:	00 04 45 02 00 00 02 	add    BYTE PTR [eax*2+0x2000002],al
     5da:	34 5a                	xor    al,0x5a
     5dc:	00 00                	add    BYTE PTR [eax],al
     5de:	00 02                	add    BYTE PTR [edx],al
     5e0:	04 07                	add    al,0x7
     5e2:	32 00                	xor    al,BYTE PTR [eax]
     5e4:	00 00                	add    BYTE PTR [eax],al
     5e6:	02 08                	add    cl,BYTE PTR [eax]
     5e8:	07                   	pop    es
     5e9:	28 00                	sub    BYTE PTR [eax],al
     5eb:	00 00                	add    BYTE PTR [eax],al
     5ed:	04 01                	add    al,0x1
     5ef:	02 00                	add    al,BYTE PTR [eax]
     5f1:	00 02                	add    BYTE PTR [edx],al
     5f3:	56                   	push   esi
     5f4:	5a                   	pop    edx
     5f5:	00 00                	add    BYTE PTR [eax],al
     5f7:	00 02                	add    BYTE PTR [edx],al
     5f9:	04 05                	add    al,0x5
     5fb:	05 00 00 00 02       	add    eax,0x2000000
     600:	0c 04                	or     al,0x4
     602:	ad                   	lods   eax,DWORD PTR ds:[esi]
     603:	00 00                	add    BYTE PTR [eax],al
     605:	00 02                	add    BYTE PTR [edx],al
     607:	04 07                	add    al,0x7
     609:	2a 01                	sub    al,BYTE PTR [ecx]
     60b:	00 00                	add    BYTE PTR [eax],al
     60d:	02 01                	add    al,BYTE PTR [ecx]
     60f:	06                   	push   es
     610:	48                   	dec    eax
     611:	00 00                	add    BYTE PTR [eax],al
     613:	00 02                	add    BYTE PTR [edx],al
     615:	04 07                	add    al,0x7
     617:	2d 00 00 00 05       	sub    eax,0x5000000
     61c:	04 88                	add    al,0x88
     61e:	00 00                	add    BYTE PTR [eax],al
     620:	00 06                	add    BYTE PTR [esi],al
     622:	4e                   	dec    esi
     623:	02 00                	add    al,BYTE PTR [eax]
     625:	00 01                	add    BYTE PTR [ecx],al
     627:	0f b4 04 00          	lfs    eax,FWORD PTR [eax+eax*1]
     62b:	9f                   	lahf   
     62c:	ba 00 00 00 01       	mov    edx,0x1000000
     631:	9c                   	pushf  
     632:	f4                   	hlt    
     633:	00 00                	add    BYTE PTR [eax],al
     635:	00 07                	add    BYTE PTR [edi],al
     637:	78 00                	js     639 <sysEnter_Vector-0x12f9c7>
     639:	01 0f                	add    DWORD PTR [edi],ecx
     63b:	33 00                	xor    eax,DWORD PTR [eax]
     63d:	00 00                	add    BYTE PTR [eax],al
     63f:	02 91 00 07 79 00    	add    dl,BYTE PTR [ecx+0x790700]
     645:	01 0f                	add    DWORD PTR [edi],ecx
     647:	33 00                	xor    eax,DWORD PTR [eax]
     649:	00 00                	add    BYTE PTR [eax],al
     64b:	02 91 04 08 63 6d    	add    dl,BYTE PTR [ecx+0x6d630804]
     651:	64 00 01             	add    BYTE PTR fs:[ecx],al
     654:	11 f4                	adc    esp,esi
     656:	00 00                	add    BYTE PTR [eax],al
     658:	00 02                	add    BYTE PTR [edx],al
     65a:	91                   	xchg   ecx,eax
     65b:	66 09 0b             	or     WORD PTR [ebx],cx
     65e:	02 00                	add    al,BYTE PTR [eax]
     660:	00 01                	add    BYTE PTR [ecx],al
     662:	12 04 01             	adc    al,BYTE PTR [ecx+eax*1]
     665:	00 00                	add    BYTE PTR [eax],al
     667:	02 91 63 09 57 02    	add    dl,BYTE PTR [ecx+0x2570963]
     66d:	00 00                	add    BYTE PTR [eax],al
     66f:	01 12                	add    DWORD PTR [edx],edx
     671:	04 01                	add    al,0x1
     673:	00 00                	add    BYTE PTR [eax],al
     675:	02 91 60 00 0a 88    	add    dl,BYTE PTR [ecx-0x77f5ffa0]
     67b:	00 00                	add    BYTE PTR [eax],al
     67d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     680:	00 00                	add    BYTE PTR [eax],al
     682:	0b 81 00 00 00 09    	or     eax,DWORD PTR [ecx+0x9000000]
     688:	00 0a                	add    BYTE PTR [edx],cl
     68a:	88 00                	mov    BYTE PTR [eax],al
     68c:	00 00                	add    BYTE PTR [eax],al
     68e:	14 01                	adc    al,0x1
     690:	00 00                	add    BYTE PTR [eax],al
     692:	0b 81 00 00 00 02    	or     eax,DWORD PTR [ecx+0x2000000]
     698:	00 0c ee             	add    BYTE PTR [esi+ebp*8],cl
     69b:	01 00                	add    DWORD PTR [eax],eax
     69d:	00 01                	add    BYTE PTR [ecx],al
     69f:	1f                   	pop    ds
     6a0:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6a1:	05 00 9f 5a 00       	add    eax,0x5a9f00
     6a6:	00 00                	add    BYTE PTR [eax],al
     6a8:	01 9c 38 01 00 00 08 	add    DWORD PTR [eax+edi*1+0x8000001],ebx
     6af:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     6b2:	00 01                	add    BYTE PTR [ecx],al
     6b4:	21 f4                	and    esp,esi
     6b6:	00 00                	add    BYTE PTR [eax],al
     6b8:	00 02                	add    BYTE PTR [edx],al
     6ba:	91                   	xchg   ecx,eax
     6bb:	66                   	data16
     6bc:	00 0c 1d 02 00 00 01 	add    BYTE PTR [ebx*1+0x1000002],cl
     6c3:	29 c8                	sub    eax,ecx
     6c5:	05 00 9f 5a 00       	add    eax,0x5a9f00
     6ca:	00 00                	add    BYTE PTR [eax],al
     6cc:	01 9c 5c 01 00 00 08 	add    DWORD PTR [esp+ebx*2+0x8000001],ebx
     6d3:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     6d6:	00 01                	add    BYTE PTR [ecx],al
     6d8:	2b f4                	sub    esi,esp
     6da:	00 00                	add    BYTE PTR [eax],al
     6dc:	00 02                	add    BYTE PTR [edx],al
     6de:	91                   	xchg   ecx,eax
     6df:	66                   	data16
     6e0:	00 0d 10 02 00 00    	add    BYTE PTR ds:0x210,cl
     6e6:	03 35 6d 01 00 00    	add    esi,DWORD PTR ds:0x16d
     6ec:	05 03 70 7c 00       	add    eax,0x7c7003
     6f1:	9f                   	lahf   
     6f2:	05 04 68 00 00       	add    eax,0x6804
     6f7:	00 0d 33 02 00 00    	add    BYTE PTR ds:0x233,cl
     6fd:	03 36                	add    esi,DWORD PTR [esi]
     6ff:	4f                   	dec    edi
     700:	00 00                	add    BYTE PTR [eax],al
     702:	00 05 03 6c 7c 00    	add    BYTE PTR ds:0x7c6c03,al
     708:	9f                   	lahf   
     709:	0d 78 00 00 00       	or     eax,0x78
     70e:	04 33                	add    al,0x33
     710:	95                   	xchg   ebp,eax
     711:	01 00                	add    DWORD PTR [eax],eax
     713:	00 05 03 60 7c 00    	add    BYTE PTR ds:0x7c6003,al
     719:	9f                   	lahf   
     71a:	05 04 96 00 00       	add    eax,0x9604
     71f:	00 0d e3 01 00 00    	add    BYTE PTR ds:0x1e3,cl
     725:	01 0d ac 01 00 00    	add    DWORD PTR ds:0x1ac,ecx
     72b:	05 03 c0 72 00       	add    eax,0x72c003
     730:	9f                   	lahf   
     731:	0e                   	push   cs
     732:	04 01                	add    al,0x1
     734:	00 00                	add    BYTE PTR [eax],al
     736:	00 0e                	add    BYTE PTR [esi],cl
     738:	03 00                	add    eax,DWORD PTR [eax]
     73a:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     73d:	25 03 00 00 04       	and    eax,0x4000003
     742:	01 c3                	add    ebx,eax
     744:	00 00                	add    BYTE PTR [eax],al
     746:	00 0c c7             	add    BYTE PTR [edi+eax*8],cl
     749:	02 00                	add    al,BYTE PTR [eax]
     74b:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
     74e:	00 00                	add    BYTE PTR [eax],al
     750:	24 06                	and    al,0x6
     752:	00 9f dd 02 00 00    	add    BYTE PTR [edi+0x2dd],bl
     758:	35 03 00 00 02       	xor    eax,0x2000003
     75d:	01 08                	add    DWORD PTR [eax],ecx
     75f:	3f                   	aas    
     760:	00 00                	add    BYTE PTR [eax],al
     762:	00 02                	add    BYTE PTR [edx],al
     764:	02 07                	add    al,BYTE PTR [edi]
     766:	0e                   	push   cs
     767:	00 00                	add    BYTE PTR [eax],al
     769:	00 02                	add    BYTE PTR [edx],al
     76b:	04 07                	add    al,0x7
     76d:	32 00                	xor    al,BYTE PTR [eax]
     76f:	00 00                	add    BYTE PTR [eax],al
     771:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     774:	2d 00 00 00 02       	sub    eax,0x2000000
     779:	01 06                	add    DWORD PTR [esi],eax
     77b:	41                   	inc    ecx
     77c:	00 00                	add    BYTE PTR [eax],al
     77e:	00 02                	add    BYTE PTR [edx],al
     780:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     786:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     78d:	02 08                	add    cl,BYTE PTR [eax]
     78f:	05 00 00 00 00       	add    eax,0x0
     794:	02 08                	add    cl,BYTE PTR [eax]
     796:	07                   	pop    es
     797:	28 00                	sub    BYTE PTR [eax],al
     799:	00 00                	add    BYTE PTR [eax],al
     79b:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     7a2:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     7a5:	2a 01                	sub    al,BYTE PTR [ecx]
     7a7:	00 00                	add    BYTE PTR [eax],al
     7a9:	04 04                	add    al,0x4
     7ab:	78 00                	js     7ad <sysEnter_Vector-0x12f853>
     7ad:	00 00                	add    BYTE PTR [eax],al
     7af:	02 01                	add    al,BYTE PTR [ecx]
     7b1:	06                   	push   es
     7b2:	48                   	dec    eax
     7b3:	00 00                	add    BYTE PTR [eax],al
     7b5:	00 05 45 02 00 00    	add    BYTE PTR ds:0x245,al
     7bb:	02 34 33             	add    dh,BYTE PTR [ebx+esi*1]
     7be:	00 00                	add    BYTE PTR [eax],al
     7c0:	00 05 91 02 00 00    	add    BYTE PTR ds:0x291,al
     7c6:	03 d8                	add    ebx,eax
     7c8:	33 00                	xor    eax,DWORD PTR [eax]
     7ca:	00 00                	add    BYTE PTR [eax],al
     7cc:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     7cf:	ad                   	lods   eax,DWORD PTR ds:[esi]
     7d0:	00 00                	add    BYTE PTR [eax],al
     7d2:	00 06                	add    BYTE PTR [esi],al
     7d4:	6b 03 00             	imul   eax,DWORD PTR [ebx],0x0
     7d7:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
     7da:	00 00                	add    BYTE PTR [eax],al
     7dc:	00 04 15 96 01 00 00 	add    BYTE PTR [edx*1+0x196],al
     7e3:	07                   	pop    es
     7e4:	fd                   	std    
     7e5:	03 00                	add    eax,DWORD PTR [eax]
     7e7:	00 00                	add    BYTE PTR [eax],al
     7e9:	07                   	pop    es
     7ea:	42                   	inc    edx
     7eb:	04 00                	add    al,0x0
     7ed:	00 01                	add    BYTE PTR [ecx],al
     7ef:	07                   	pop    es
     7f0:	84 02                	test   BYTE PTR [edx],al
     7f2:	00 00                	add    BYTE PTR [eax],al
     7f4:	02 07                	add    al,BYTE PTR [edi]
     7f6:	4e                   	dec    esi
     7f7:	03 00                	add    eax,DWORD PTR [eax]
     7f9:	00 03                	add    BYTE PTR [ebx],al
     7fb:	07                   	pop    es
     7fc:	6a 02                	push   0x2
     7fe:	00 00                	add    BYTE PTR [eax],al
     800:	04 07                	add    al,0x7
     802:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
     806:	05 07 24 04 00       	add    eax,0x42407
     80b:	00 0a                	add    BYTE PTR [edx],cl
     80d:	07                   	pop    es
     80e:	8f 03                	pop    DWORD PTR [ebx]
     810:	00 00                	add    BYTE PTR [eax],al
     812:	0b 07                	or     eax,DWORD PTR [edi]
     814:	d6                   	(bad)  
     815:	03 00                	add    eax,DWORD PTR [eax]
     817:	00 0c 07             	add    BYTE PTR [edi+eax*1],cl
     81a:	5c                   	pop    esp
     81b:	03 00                	add    eax,DWORD PTR [eax]
     81d:	00 0d 07 75 03 00    	add    BYTE PTR ds:0x37507,cl
     823:	00 0e                	add    BYTE PTR [esi],cl
     825:	07                   	pop    es
     826:	77 02                	ja     82a <sysEnter_Vector-0x12f7d6>
     828:	00 00                	add    BYTE PTR [eax],al
     82a:	0f 07                	sysret 
     82c:	b7 03                	mov    bh,0x3
     82e:	00 00                	add    BYTE PTR [eax],al
     830:	10 07                	adc    BYTE PTR [edi],al
     832:	a9 04 00 00 11       	test   eax,0x11000004
     837:	07                   	pop    es
     838:	87 04 00             	xchg   DWORD PTR [eax+eax*1],eax
     83b:	00 4f 07             	add    BYTE PTR [edi+0x7],cl
     83e:	5c                   	pop    esp
     83f:	04 00                	add    al,0x0
     841:	00 50 07             	add    BYTE PTR [eax+0x7],dl
     844:	f0 03 00             	lock add eax,DWORD PTR [eax]
     847:	00 59 07             	add    BYTE PTR [ecx+0x7],bl
     84a:	96                   	xchg   esi,eax
     84b:	04 00                	add    al,0x0
     84d:	00 61 07             	add    BYTE PTR [ecx+0x7],ah
     850:	1b 03                	sbb    eax,DWORD PTR [ebx]
     852:	00 00                	add    BYTE PTR [eax],al
     854:	97                   	xchg   edi,eax
     855:	08 0d 04 00 00 63    	or     BYTE PTR ds:0x63000004,cl
     85b:	01 08                	add    DWORD PTR [eax],ecx
     85d:	e3 03                	jecxz  862 <sysEnter_Vector-0x12f79e>
     85f:	00 00                	add    BYTE PTR [eax],al
     861:	64 01 08             	add    DWORD PTR fs:[eax],ecx
     864:	c6 04 00 00          	mov    BYTE PTR [eax+eax*1],0x0
     868:	65 01 08             	add    DWORD PTR gs:[eax],ecx
     86b:	f7 02 00 00 66 01    	test   DWORD PTR [edx],0x1660000
     871:	08 d8                	or     al,bl
     873:	04 00                	add    al,0x0
     875:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     878:	08 82 03 00 00 68    	or     BYTE PTR [edx+0x68000003],al
     87e:	01 08                	add    DWORD PTR [eax],ecx
     880:	b8 02 00 00 69       	mov    eax,0x69000002
     885:	01 08                	add    DWORD PTR [eax],ecx
     887:	31 04 00             	xor    DWORD PTR [eax+eax*1],eax
     88a:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     88d:	08 0b                	or     BYTE PTR [ebx],cl
     88f:	03 00                	add    eax,DWORD PTR [eax]
     891:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
     894:	08 79 04             	or     BYTE PTR [ecx+0x4],bh
     897:	00 00                	add    BYTE PTR [eax],al
     899:	00 03                	add    BYTE PTR [ebx],al
     89b:	08 9c 03 00 00 01 03 	or     BYTE PTR [ebx+eax*1+0x3010000],bl
     8a2:	08 ab 03 00 00 02    	or     BYTE PTR [ebx+0x2000003],ch
     8a8:	03 08                	add    ecx,DWORD PTR [eax]
     8aa:	3e 03 00             	add    eax,DWORD PTR ds:[eax]
     8ad:	00 03                	add    BYTE PTR [ebx],al
     8af:	03 08                	add    ecx,DWORD PTR [eax]
     8b1:	98                   	cwde   
     8b2:	02 00                	add    al,BYTE PTR [eax]
     8b4:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     8b7:	08 e7                	or     bh,ah
     8b9:	02 00                	add    al,BYTE PTR [eax]
     8bb:	00 05 03 08 2f 03    	add    BYTE PTR ds:0x32f0803,al
     8c1:	00 00                	add    BYTE PTR [eax],al
     8c3:	06                   	push   es
     8c4:	03 08                	add    ecx,DWORD PTR [eax]
     8c6:	c4 03                	les    eax,FWORD PTR [ebx]
     8c8:	00 00                	add    BYTE PTR [eax],al
     8ca:	00 09                	add    BYTE PTR [ecx],cl
     8cc:	00 09                	add    BYTE PTR [ecx],cl
     8ce:	b6 04                	mov    dh,0x4
     8d0:	00 00                	add    BYTE PTR [eax],al
     8d2:	01 09                	add    DWORD PTR [ecx],ecx
     8d4:	4f                   	dec    edi
     8d5:	00 00                	add    BYTE PTR [eax],al
     8d7:	00 24 06             	add    BYTE PTR [esi+eax*1],ah
     8da:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
     8e0:	01 9c e4 01 00 00 0a 	add    DWORD PTR [esp+eiz*8+0xa000001],ebx
     8e7:	be 04 00 00 01       	mov    esi,0x1000004
     8ec:	09 72 00             	or     DWORD PTR [edx+0x0],esi
     8ef:	00 00                	add    BYTE PTR [eax],al
     8f1:	02 91 00 0a 05 03    	add    dl,BYTE PTR [ecx+0x3050a00]
     8f7:	00 00                	add    BYTE PTR [eax],al
     8f9:	01 09                	add    DWORD PTR [ecx],ecx
     8fb:	72 00                	jb     8fd <sysEnter_Vector-0x12f703>
     8fd:	00 00                	add    BYTE PTR [eax],al
     8ff:	02 91 04 0b 36 06    	add    dl,BYTE PTR [ecx+0x6360b04]
     905:	00 9f 8e 00 00 00    	add    BYTE PTR [edi+0x8e],bl
     90b:	0c 63                	or     al,0x63
     90d:	6e                   	outs   dx,BYTE PTR ds:[esi]
     90e:	74 00                	je     910 <sysEnter_Vector-0x12f6f0>
     910:	01 0b                	add    DWORD PTR [ebx],ecx
     912:	4f                   	dec    edi
     913:	00 00                	add    BYTE PTR [eax],al
     915:	00 02                	add    BYTE PTR [edx],al
     917:	91                   	xchg   ecx,eax
     918:	6c                   	ins    BYTE PTR es:[edi],dx
     919:	00 00                	add    BYTE PTR [eax],al
     91b:	09 a9 02 00 00 01    	or     DWORD PTR [ecx+0x1000002],ebp
     921:	14 4f                	adc    al,0x4f
     923:	00 00                	add    BYTE PTR [eax],al
     925:	00 ce                	add    dh,cl
     927:	06                   	push   es
     928:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
     92e:	01 9c 1a 02 00 00 0a 	add    DWORD PTR [edx+ebx*1+0xa000002],ebx
     935:	be 04 00 00 01       	mov    esi,0x1000004
     93a:	14 72                	adc    al,0x72
     93c:	00 00                	add    BYTE PTR [eax],al
     93e:	00 02                	add    BYTE PTR [edx],al
     940:	91                   	xchg   ecx,eax
     941:	00 0a                	add    BYTE PTR [edx],cl
     943:	05 03 00 00 01       	add    eax,0x1000003
     948:	14 72                	adc    al,0x72
     94a:	00 00                	add    BYTE PTR [eax],al
     94c:	00 02                	add    BYTE PTR [edx],al
     94e:	91                   	xchg   ecx,eax
     94f:	04 00                	add    al,0x0
     951:	0d 55 04 00 00       	or     eax,0x455
     956:	01 19                	add    DWORD PTR [ecx],ebx
     958:	f1                   	icebp  
     959:	06                   	push   es
     95a:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
     960:	01 9c 8e 02 00 00 0a 	add    DWORD PTR [esi+ecx*4+0xa000002],ebx
     967:	be 04 00 00 01       	mov    esi,0x1000004
     96c:	19 72 00             	sbb    DWORD PTR [edx+0x0],esi
     96f:	00 00                	add    BYTE PTR [eax],al
     971:	02 91 00 0a 05 03    	add    dl,BYTE PTR [ecx+0x3050a00]
     977:	00 00                	add    BYTE PTR [eax],al
     979:	01 19                	add    DWORD PTR [ecx],ebx
     97b:	72 00                	jb     97d <sysEnter_Vector-0x12f683>
     97d:	00 00                	add    BYTE PTR [eax],al
     97f:	02 91 04 0e d9 02    	add    dl,BYTE PTR [ecx+0x2d90e04]
     985:	00 00                	add    BYTE PTR [eax],al
     987:	01 1b                	add    DWORD PTR [ebx],ebx
     989:	7f 00                	jg     98b <sysEnter_Vector-0x12f675>
     98b:	00 00                	add    BYTE PTR [eax],al
     98d:	02 91 6c 0f 0a 07    	add    dl,BYTE PTR [ecx+0x70a0f6c]
     993:	00 9f eb 00 00 00    	add    BYTE PTR [edi+0xeb],bl
     999:	75 02                	jne    99d <sysEnter_Vector-0x12f663>
     99b:	00 00                	add    BYTE PTR [eax],al
     99d:	0c 63                	or     al,0x63
     99f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     9a0:	74 00                	je     9a2 <sysEnter_Vector-0x12f65e>
     9a2:	01 1d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ebx
     9a8:	02 91 68 00 0b f5    	add    dl,BYTE PTR [ecx-0xaf4ff98]
     9ae:	07                   	pop    es
     9af:	00 9f b8 00 00 00    	add    BYTE PTR [edi+0xb8],bl
     9b5:	0c 63                	or     al,0x63
     9b7:	6e                   	outs   dx,BYTE PTR ds:[esi]
     9b8:	74 00                	je     9ba <sysEnter_Vector-0x12f646>
     9ba:	01 29                	add    DWORD PTR [ecx],ebp
     9bc:	4f                   	dec    edi
     9bd:	00 00                	add    BYTE PTR [eax],al
     9bf:	00 02                	add    BYTE PTR [edx],al
     9c1:	91                   	xchg   ecx,eax
     9c2:	64 00 00             	add    BYTE PTR fs:[eax],al
     9c5:	09 b0 02 00 00 01    	or     DWORD PTR [eax+0x1000002],esi
     9cb:	36                   	ss
     9cc:	72 00                	jb     9ce <sysEnter_Vector-0x12f632>
     9ce:	00 00                	add    BYTE PTR [eax],al
     9d0:	b2 08                	mov    dl,0x8
     9d2:	00 9f 2c 00 00 00    	add    BYTE PTR [edi+0x2c],bl
     9d8:	01 9c c4 02 00 00 10 	add    DWORD PTR [esp+eax*8+0x10000002],ebx
     9df:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     9e2:	00 01                	add    BYTE PTR [ecx],al
     9e4:	36                   	ss
     9e5:	72 00                	jb     9e7 <sysEnter_Vector-0x12f619>
     9e7:	00 00                	add    BYTE PTR [eax],al
     9e9:	02 91 00 0a da 06    	add    dl,BYTE PTR [ecx+0x6da0a00]
     9ef:	00 00                	add    BYTE PTR [eax],al
     9f1:	01 36                	add    DWORD PTR [esi],esi
     9f3:	8a 00                	mov    al,BYTE PTR [eax]
     9f5:	00 00                	add    BYTE PTR [eax],al
     9f7:	02 91 04 00 09 ed    	add    dl,BYTE PTR [ecx-0x12f6fffc]
     9fd:	04 00                	add    al,0x0
     9ff:	00 01                	add    BYTE PTR [ecx],al
     a01:	3c 72                	cmp    al,0x72
     a03:	00 00                	add    BYTE PTR [eax],al
     a05:	00 de                	add    dh,bl
     a07:	08 00                	or     BYTE PTR [eax],al
     a09:	9f                   	lahf   
     a0a:	23 00                	and    eax,DWORD PTR [eax]
     a0c:	00 00                	add    BYTE PTR [eax],al
     a0e:	01 9c fa 02 00 00 10 	add    DWORD PTR [edx+edi*8+0x10000002],ebx
     a15:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     a18:	00 01                	add    BYTE PTR [ecx],al
     a1a:	3c 72                	cmp    al,0x72
     a1c:	00 00                	add    BYTE PTR [eax],al
     a1e:	00 02                	add    BYTE PTR [edx],al
     a20:	91                   	xchg   ecx,eax
     a21:	00 0a                	add    BYTE PTR [edx],cl
     a23:	da 06                	fiadd  DWORD PTR [esi]
     a25:	00 00                	add    BYTE PTR [eax],al
     a27:	01 3c 8a             	add    DWORD PTR [edx+ecx*4],edi
     a2a:	00 00                	add    BYTE PTR [eax],al
     a2c:	00 02                	add    BYTE PTR [edx],al
     a2e:	91                   	xchg   ecx,eax
     a2f:	04 00                	add    al,0x0
     a31:	11 78 00             	adc    DWORD PTR [eax+0x0],edi
     a34:	00 00                	add    BYTE PTR [eax],al
     a36:	05 33 0b 03 00       	add    eax,0x30b33
     a3b:	00 05 03 60 7c 00    	add    BYTE PTR ds:0x7c6003,al
     a41:	9f                   	lahf   
     a42:	04 04                	add    al,0x4
     a44:	72 00                	jb     a46 <sysEnter_Vector-0x12f5ba>
     a46:	00 00                	add    BYTE PTR [eax],al
     a48:	00 3d 09 00 00 04    	add    BYTE PTR ds:0x4000009,bh
     a4e:	00 1f                	add    BYTE PTR [edi],bl
     a50:	04 00                	add    al,0x0
     a52:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     a55:	c3                   	ret    
     a56:	00 00                	add    BYTE PTR [eax],al
     a58:	00 0c c4             	add    BYTE PTR [esp+eax*8],cl
     a5b:	06                   	push   es
     a5c:	00 00                	add    BYTE PTR [eax],al
     a5e:	4d                   	dec    ebp
     a5f:	00 00                	add    BYTE PTR [eax],al
     a61:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
     a64:	00 9f b8 08 00 00    	add    BYTE PTR [edi+0x8b8],bl
     a6a:	83 04 00 00          	add    DWORD PTR [eax+eax*1],0x0
     a6e:	02 01                	add    al,BYTE PTR [ecx]
     a70:	08 3f                	or     BYTE PTR [edi],bh
     a72:	00 00                	add    BYTE PTR [eax],al
     a74:	00 02                	add    BYTE PTR [edx],al
     a76:	02 07                	add    al,BYTE PTR [edi]
     a78:	0e                   	push   cs
     a79:	00 00                	add    BYTE PTR [eax],al
     a7b:	00 02                	add    BYTE PTR [edx],al
     a7d:	04 07                	add    al,0x7
     a7f:	32 00                	xor    al,BYTE PTR [eax]
     a81:	00 00                	add    BYTE PTR [eax],al
     a83:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     a86:	2d 00 00 00 02       	sub    eax,0x2000000
     a8b:	01 06                	add    DWORD PTR [esi],eax
     a8d:	41                   	inc    ecx
     a8e:	00 00                	add    BYTE PTR [eax],al
     a90:	00 02                	add    BYTE PTR [edx],al
     a92:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     a98:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     a9f:	02 08                	add    cl,BYTE PTR [eax]
     aa1:	05 00 00 00 00       	add    eax,0x0
     aa6:	02 08                	add    cl,BYTE PTR [eax]
     aa8:	07                   	pop    es
     aa9:	28 00                	sub    BYTE PTR [eax],al
     aab:	00 00                	add    BYTE PTR [eax],al
     aad:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     ab4:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     ab7:	2a 01                	sub    al,BYTE PTR [ecx]
     ab9:	00 00                	add    BYTE PTR [eax],al
     abb:	04 04                	add    al,0x4
     abd:	05 04 7a 00 00       	add    eax,0x7a04
     ac2:	00 02                	add    BYTE PTR [edx],al
     ac4:	01 06                	add    DWORD PTR [esi],eax
     ac6:	48                   	dec    eax
     ac7:	00 00                	add    BYTE PTR [eax],al
     ac9:	00 06                	add    BYTE PTR [esi],al
     acb:	cf                   	iret   
     acc:	06                   	push   es
     acd:	00 00                	add    BYTE PTR [eax],al
     acf:	02 2e                	add    ch,BYTE PTR [esi]
     ad1:	25 00 00 00 06       	and    eax,0x6000000
     ad6:	89 05 00 00 02 31    	mov    DWORD PTR ds:0x31020000,eax
     adc:	2c 00                	sub    al,0x0
     ade:	00 00                	add    BYTE PTR [eax],al
     ae0:	06                   	push   es
     ae1:	45                   	inc    ebp
     ae2:	02 00                	add    al,BYTE PTR [eax]
     ae4:	00 02                	add    BYTE PTR [edx],al
     ae6:	34 33                	xor    al,0x33
     ae8:	00 00                	add    BYTE PTR [eax],al
     aea:	00 06                	add    BYTE PTR [esi],al
     aec:	01 02                	add    DWORD PTR [edx],eax
     aee:	00 00                	add    BYTE PTR [eax],al
     af0:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
     af3:	00 00                	add    BYTE PTR [eax],al
     af5:	00 06                	add    BYTE PTR [esi],al
     af7:	91                   	xchg   ecx,eax
     af8:	02 00                	add    al,BYTE PTR [eax]
     afa:	00 03                	add    BYTE PTR [ebx],al
     afc:	d8 33                	fdiv   DWORD PTR [ebx]
     afe:	00 00                	add    BYTE PTR [eax],al
     b00:	00 02                	add    BYTE PTR [edx],al
     b02:	0c 04                	or     al,0x4
     b04:	ad                   	lods   eax,DWORD PTR ds:[esi]
     b05:	00 00                	add    BYTE PTR [eax],al
     b07:	00 07                	add    BYTE PTR [edi],al
     b09:	6b 03 00             	imul   eax,DWORD PTR [ebx],0x0
     b0c:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
     b0f:	00 00                	add    BYTE PTR [eax],al
     b11:	00 06                	add    BYTE PTR [esi],al
     b13:	15 b9 01 00 00       	adc    eax,0x1b9
     b18:	08 fd                	or     ch,bh
     b1a:	03 00                	add    eax,DWORD PTR [eax]
     b1c:	00 00                	add    BYTE PTR [eax],al
     b1e:	08 42 04             	or     BYTE PTR [edx+0x4],al
     b21:	00 00                	add    BYTE PTR [eax],al
     b23:	01 08                	add    DWORD PTR [eax],ecx
     b25:	84 02                	test   BYTE PTR [edx],al
     b27:	00 00                	add    BYTE PTR [eax],al
     b29:	02 08                	add    cl,BYTE PTR [eax]
     b2b:	4e                   	dec    esi
     b2c:	03 00                	add    eax,DWORD PTR [eax]
     b2e:	00 03                	add    BYTE PTR [ebx],al
     b30:	08 6a 02             	or     BYTE PTR [edx+0x2],ch
     b33:	00 00                	add    BYTE PTR [eax],al
     b35:	04 08                	add    al,0x8
     b37:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
     b3b:	05 08 24 04 00       	add    eax,0x42408
     b40:	00 0a                	add    BYTE PTR [edx],cl
     b42:	08 8f 03 00 00 0b    	or     BYTE PTR [edi+0xb000003],cl
     b48:	08 d6                	or     dh,dl
     b4a:	03 00                	add    eax,DWORD PTR [eax]
     b4c:	00 0c 08             	add    BYTE PTR [eax+ecx*1],cl
     b4f:	5c                   	pop    esp
     b50:	03 00                	add    eax,DWORD PTR [eax]
     b52:	00 0d 08 75 03 00    	add    BYTE PTR ds:0x37508,cl
     b58:	00 0e                	add    BYTE PTR [esi],cl
     b5a:	08 77 02             	or     BYTE PTR [edi+0x2],dh
     b5d:	00 00                	add    BYTE PTR [eax],al
     b5f:	0f 08                	invd   
     b61:	b7 03                	mov    bh,0x3
     b63:	00 00                	add    BYTE PTR [eax],al
     b65:	10 08                	adc    BYTE PTR [eax],cl
     b67:	a9 04 00 00 11       	test   eax,0x11000004
     b6c:	08 87 04 00 00 4f    	or     BYTE PTR [edi+0x4f000004],al
     b72:	08 5c 04 00          	or     BYTE PTR [esp+eax*1+0x0],bl
     b76:	00 50 08             	add    BYTE PTR [eax+0x8],dl
     b79:	f0 03 00             	lock add eax,DWORD PTR [eax]
     b7c:	00 59 08             	add    BYTE PTR [ecx+0x8],bl
     b7f:	96                   	xchg   esi,eax
     b80:	04 00                	add    al,0x0
     b82:	00 61 08             	add    BYTE PTR [ecx+0x8],ah
     b85:	1b 03                	sbb    eax,DWORD PTR [ebx]
     b87:	00 00                	add    BYTE PTR [eax],al
     b89:	97                   	xchg   edi,eax
     b8a:	09 0d 04 00 00 63    	or     DWORD PTR ds:0x63000004,ecx
     b90:	01 09                	add    DWORD PTR [ecx],ecx
     b92:	e3 03                	jecxz  b97 <sysEnter_Vector-0x12f469>
     b94:	00 00                	add    BYTE PTR [eax],al
     b96:	64 01 09             	add    DWORD PTR fs:[ecx],ecx
     b99:	c6 04 00 00          	mov    BYTE PTR [eax+eax*1],0x0
     b9d:	65 01 09             	add    DWORD PTR gs:[ecx],ecx
     ba0:	f7 02 00 00 66 01    	test   DWORD PTR [edx],0x1660000
     ba6:	09 d8                	or     eax,ebx
     ba8:	04 00                	add    al,0x0
     baa:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     bad:	09 82 03 00 00 68    	or     DWORD PTR [edx+0x68000003],eax
     bb3:	01 09                	add    DWORD PTR [ecx],ecx
     bb5:	b8 02 00 00 69       	mov    eax,0x69000002
     bba:	01 09                	add    DWORD PTR [ecx],ecx
     bbc:	31 04 00             	xor    DWORD PTR [eax+eax*1],eax
     bbf:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     bc2:	09 0b                	or     DWORD PTR [ebx],ecx
     bc4:	03 00                	add    eax,DWORD PTR [eax]
     bc6:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
     bc9:	09 79 04             	or     DWORD PTR [ecx+0x4],edi
     bcc:	00 00                	add    BYTE PTR [eax],al
     bce:	00 03                	add    BYTE PTR [ebx],al
     bd0:	09 9c 03 00 00 01 03 	or     DWORD PTR [ebx+eax*1+0x3010000],ebx
     bd7:	09 ab 03 00 00 02    	or     DWORD PTR [ebx+0x2000003],ebp
     bdd:	03 09                	add    ecx,DWORD PTR [ecx]
     bdf:	3e 03 00             	add    eax,DWORD PTR ds:[eax]
     be2:	00 03                	add    BYTE PTR [ebx],al
     be4:	03 09                	add    ecx,DWORD PTR [ecx]
     be6:	98                   	cwde   
     be7:	02 00                	add    al,BYTE PTR [eax]
     be9:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     bec:	09 e7                	or     edi,esp
     bee:	02 00                	add    al,BYTE PTR [eax]
     bf0:	00 05 03 09 2f 03    	add    BYTE PTR ds:0x32f0903,al
     bf6:	00 00                	add    BYTE PTR [eax],al
     bf8:	06                   	push   es
     bf9:	03 09                	add    ecx,DWORD PTR [ecx]
     bfb:	c4 03                	les    eax,FWORD PTR [ebx]
     bfd:	00 00                	add    BYTE PTR [eax],al
     bff:	00 09                	add    BYTE PTR [ecx],cl
     c01:	00 0a                	add    BYTE PTR [edx],cl
     c03:	78 06                	js     c0b <sysEnter_Vector-0x12f3f5>
     c05:	00 00                	add    BYTE PTR [eax],al
     c07:	17                   	pop    ss
     c08:	01 04 1f             	add    DWORD PTR [edi+ebx*1],eax
     c0b:	3b 02                	cmp    eax,DWORD PTR [edx]
     c0d:	00 00                	add    BYTE PTR [eax],al
     c0f:	0b 31                	or     esi,DWORD PTR [ecx]
     c11:	06                   	push   es
     c12:	00 00                	add    BYTE PTR [eax],al
     c14:	04 21                	add    al,0x21
     c16:	3b 02                	cmp    eax,DWORD PTR [edx]
     c18:	00 00                	add    BYTE PTR [eax],al
     c1a:	00 0c 4a             	add    BYTE PTR [edx+ecx*2],cl
     c1d:	06                   	push   es
     c1e:	00 00                	add    BYTE PTR [eax],al
     c20:	04 22                	add    al,0x22
     c22:	81 00 00 00 04 01    	add    DWORD PTR [eax],0x1040000
     c28:	0c 01                	or     al,0x1
     c2a:	06                   	push   es
     c2b:	00 00                	add    BYTE PTR [eax],al
     c2d:	04 23                	add    al,0x23
     c2f:	97                   	xchg   edi,eax
     c30:	00 00                	add    BYTE PTR [eax],al
     c32:	00 05 01 0c da 06    	add    BYTE PTR ds:0x6da0c01,al
     c38:	00 00                	add    BYTE PTR [eax],al
     c3a:	04 24                	add    al,0x24
     c3c:	97                   	xchg   edi,eax
     c3d:	00 00                	add    BYTE PTR [eax],al
     c3f:	00 09                	add    BYTE PTR [ecx],cl
     c41:	01 0c 09             	add    DWORD PTR [ecx+ecx*1],ecx
     c44:	06                   	push   es
     c45:	00 00                	add    BYTE PTR [eax],al
     c47:	04 25                	add    al,0x25
     c49:	8c 00                	mov    WORD PTR [eax],es
     c4b:	00 00                	add    BYTE PTR [eax],al
     c4d:	0d 01 0c 21 05       	or     eax,0x5210c01
     c52:	00 00                	add    BYTE PTR [eax],al
     c54:	04 26                	add    al,0x26
     c56:	8c 00                	mov    WORD PTR [eax],es
     c58:	00 00                	add    BYTE PTR [eax],al
     c5a:	0f 01 0c 92          	sidtd  [edx+edx*4]
     c5e:	05 00 00 04 27       	add    eax,0x27040000
     c63:	8c 00                	mov    WORD PTR [eax],es
     c65:	00 00                	add    BYTE PTR [eax],al
     c67:	11 01                	adc    DWORD PTR [ecx],eax
     c69:	0c 74                	or     al,0x74
     c6b:	05 00 00 04 28       	add    eax,0x28040000
     c70:	8c 00                	mov    WORD PTR [eax],es
     c72:	00 00                	add    BYTE PTR [eax],al
     c74:	13 01                	adc    eax,DWORD PTR [ecx]
     c76:	0c ab                	or     al,0xab
     c78:	06                   	push   es
     c79:	00 00                	add    BYTE PTR [eax],al
     c7b:	04 29                	add    al,0x29
     c7d:	8c 00                	mov    WORD PTR [eax],es
     c7f:	00 00                	add    BYTE PTR [eax],al
     c81:	15 01 00 0d 7a       	adc    eax,0x7a0d0001
     c86:	00 00                	add    BYTE PTR [eax],al
     c88:	00 4c 02 00          	add    BYTE PTR [edx+eax*1+0x0],cl
     c8c:	00 0e                	add    BYTE PTR [esi],cl
     c8e:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
     c91:	00 03                	add    BYTE PTR [ebx],al
     c93:	01 00                	add    DWORD PTR [eax],eax
     c95:	0f 15 06             	unpckhps xmm0,XMMWORD PTR [esi]
     c98:	00 00                	add    BYTE PTR [eax],al
     c9a:	08 04 2c             	or     BYTE PTR [esp+ebp*1],al
     c9d:	71 02                	jno    ca1 <sysEnter_Vector-0x12f35f>
     c9f:	00 00                	add    BYTE PTR [eax],al
     ca1:	0b d7                	or     edx,edi
     ca3:	06                   	push   es
     ca4:	00 00                	add    BYTE PTR [eax],al
     ca6:	04 2e                	add    al,0x2e
     ca8:	97                   	xchg   edi,eax
     ca9:	00 00                	add    BYTE PTR [eax],al
     cab:	00 00                	add    BYTE PTR [eax],al
     cad:	0b af 05 00 00 04    	or     ebp,DWORD PTR [edi+0x4000005]
     cb3:	2f                   	das    
     cb4:	97                   	xchg   edi,eax
     cb5:	00 00                	add    BYTE PTR [eax],al
     cb7:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     cba:	06                   	push   es
     cbb:	51                   	push   ecx
     cbc:	06                   	push   es
     cbd:	00 00                	add    BYTE PTR [eax],al
     cbf:	04 32                	add    al,0x32
     cc1:	b9 01 00 00 06       	mov    ecx,0x6000001
     cc6:	5c                   	pop    esp
     cc7:	06                   	push   es
     cc8:	00 00                	add    BYTE PTR [eax],al
     cca:	04 33                	add    al,0x33
     ccc:	4c                   	dec    esp
     ccd:	02 00                	add    al,BYTE PTR [eax]
     ccf:	00 05 04 8d 02 00    	add    BYTE PTR ds:0x28d04,al
     cd5:	00 10                	add    BYTE PTR [eax],dl
     cd7:	7a 00                	jp     cd9 <sysEnter_Vector-0x12f327>
     cd9:	00 00                	add    BYTE PTR [eax],al
     cdb:	02 01                	add    al,BYTE PTR [ecx]
     cdd:	02 6a 06             	add    ch,BYTE PTR [edx+0x6]
     ce0:	00 00                	add    BYTE PTR [eax],al
     ce2:	11 70 06             	adc    DWORD PTR [eax+0x6],esi
     ce5:	00 00                	add    BYTE PTR [eax],al
     ce7:	01 12                	add    DWORD PTR [edx],edx
     ce9:	4f                   	dec    edi
     cea:	00 00                	add    BYTE PTR [eax],al
     cec:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
     cef:	00 9f 31 00 00 00    	add    BYTE PTR [edi+0x31],bl
     cf5:	01 9c dd 02 00 00 12 	add    DWORD PTR [ebp+ebx*8+0x12000002],ebx
     cfc:	1c 05                	sbb    al,0x5
     cfe:	00 00                	add    BYTE PTR [eax],al
     d00:	01 12                	add    DWORD PTR [edx],edx
     d02:	74 00                	je     d04 <sysEnter_Vector-0x12f2fc>
     d04:	00 00                	add    BYTE PTR [eax],al
     d06:	02 91 00 12 29 06    	add    dl,BYTE PTR [ecx+0x6291200]
     d0c:	00 00                	add    BYTE PTR [eax],al
     d0e:	01 12                	add    DWORD PTR [edx],edx
     d10:	dd 02                	fld    QWORD PTR [edx]
     d12:	00 00                	add    BYTE PTR [eax],al
     d14:	02 91 04 12 37 07    	add    dl,BYTE PTR [ecx+0x7371204]
     d1a:	00 00                	add    BYTE PTR [eax],al
     d1c:	01 12                	add    DWORD PTR [edx],edx
     d1e:	4f                   	dec    edi
     d1f:	00 00                	add    BYTE PTR [eax],al
     d21:	00 02                	add    BYTE PTR [edx],al
     d23:	91                   	xchg   ecx,eax
     d24:	08 00                	or     BYTE PTR [eax],al
     d26:	05 04 71 02 00       	add    eax,0x27104
     d2b:	00 11                	add    BYTE PTR [ecx],dl
     d2d:	30 07                	xor    BYTE PTR [edi],al
     d2f:	00 00                	add    BYTE PTR [eax],al
     d31:	01 17                	add    DWORD PTR [edi],edx
     d33:	4f                   	dec    edi
     d34:	00 00                	add    BYTE PTR [eax],al
     d36:	00 35 09 00 9f 26    	add    BYTE PTR ds:0x269f0009,dh
     d3c:	00 00                	add    BYTE PTR [eax],al
     d3e:	00 01                	add    BYTE PTR [ecx],al
     d40:	9c                   	pushf  
     d41:	27                   	daa    
     d42:	03 00                	add    eax,DWORD PTR [eax]
     d44:	00 12                	add    BYTE PTR [edx],dl
     d46:	1c 05                	sbb    al,0x5
     d48:	00 00                	add    BYTE PTR [eax],al
     d4a:	01 17                	add    DWORD PTR [edi],edx
     d4c:	74 00                	je     d4e <sysEnter_Vector-0x12f2b2>
     d4e:	00 00                	add    BYTE PTR [eax],al
     d50:	02 91 00 12 29 06    	add    dl,BYTE PTR [ecx+0x6291200]
     d56:	00 00                	add    BYTE PTR [eax],al
     d58:	01 17                	add    DWORD PTR [edi],edx
     d5a:	dd 02                	fld    QWORD PTR [edx]
     d5c:	00 00                	add    BYTE PTR [eax],al
     d5e:	02 91 04 12 37 07    	add    dl,BYTE PTR [ecx+0x7371204]
     d64:	00 00                	add    BYTE PTR [eax],al
     d66:	01 17                	add    DWORD PTR [edi],edx
     d68:	4f                   	dec    edi
     d69:	00 00                	add    BYTE PTR [eax],al
     d6b:	00 02                	add    BYTE PTR [edx],al
     d6d:	91                   	xchg   ecx,eax
     d6e:	08 00                	or     BYTE PTR [eax],al
     d70:	11 9d 05 00 00 01    	adc    DWORD PTR [ebp+0x1000005],ebx
     d76:	1c 72                	sbb    al,0x72
     d78:	00 00                	add    BYTE PTR [eax],al
     d7a:	00 5b 09             	add    BYTE PTR [ebx+0x9],bl
     d7d:	00 9f 2c 00 00 00    	add    BYTE PTR [edi+0x2c],bl
     d83:	01 9c 5d 03 00 00 12 	add    DWORD PTR [ebp+ebx*2+0x12000003],ebx
     d8a:	1c 05                	sbb    al,0x5
     d8c:	00 00                	add    BYTE PTR [eax],al
     d8e:	01 1c 74             	add    DWORD PTR [esp+esi*2],ebx
     d91:	00 00                	add    BYTE PTR [eax],al
     d93:	00 02                	add    BYTE PTR [edx],al
     d95:	91                   	xchg   ecx,eax
     d96:	00 12                	add    BYTE PTR [edx],dl
     d98:	93                   	xchg   ebx,eax
     d99:	06                   	push   es
     d9a:	00 00                	add    BYTE PTR [eax],al
     d9c:	01 1c 87             	add    DWORD PTR [edi+eax*4],ebx
     d9f:	02 00                	add    al,BYTE PTR [eax]
     da1:	00 02                	add    BYTE PTR [edx],al
     da3:	91                   	xchg   ecx,eax
     da4:	04 00                	add    al,0x0
     da6:	11 ef                	adc    edi,ebp
     da8:	05 00 00 01 22       	add    eax,0x22010000
     dad:	72 00                	jb     daf <sysEnter_Vector-0x12f251>
     daf:	00 00                	add    BYTE PTR [eax],al
     db1:	87 09                	xchg   DWORD PTR [ecx],ecx
     db3:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
     db9:	01 9c 93 03 00 00 12 	add    DWORD PTR [ebx+edx*4+0x12000003],ebx
     dc0:	1c 05                	sbb    al,0x5
     dc2:	00 00                	add    BYTE PTR [eax],al
     dc4:	01 22                	add    DWORD PTR [edx],esp
     dc6:	74 00                	je     dc8 <sysEnter_Vector-0x12f238>
     dc8:	00 00                	add    BYTE PTR [eax],al
     dca:	02 91 00 12 93 06    	add    dl,BYTE PTR [ecx+0x6931200]
     dd0:	00 00                	add    BYTE PTR [eax],al
     dd2:	01 22                	add    DWORD PTR [edx],esp
     dd4:	87 02                	xchg   DWORD PTR [edx],eax
     dd6:	00 00                	add    BYTE PTR [eax],al
     dd8:	02 91 04 00 13 15    	add    dl,BYTE PTR [ecx+0x15130004]
     dde:	07                   	pop    es
     ddf:	00 00                	add    BYTE PTR [eax],al
     de1:	01 27                	add    DWORD PTR [edi],esp
     de3:	aa                   	stos   BYTE PTR es:[edi],al
     de4:	09 00                	or     DWORD PTR [eax],eax
     de6:	9f                   	lahf   
     de7:	59                   	pop    ecx
     de8:	00 00                	add    BYTE PTR [eax],al
     dea:	00 01                	add    BYTE PTR [ecx],al
     dec:	9c                   	pushf  
     ded:	11 ec                	adc    esp,ebp
     def:	05 00 00 01 2e       	add    eax,0x2e010000
     df4:	72 00                	jb     df6 <sysEnter_Vector-0x12f20a>
     df6:	00 00                	add    BYTE PTR [eax],al
     df8:	03 0a                	add    ecx,DWORD PTR [edx]
     dfa:	00 9f 93 00 00 00    	add    BYTE PTR [edi+0x93],bl
     e00:	01 9c f6 03 00 00 12 	add    DWORD PTR [esi+esi*8+0x12000003],ebx
     e07:	1c 05                	sbb    al,0x5
     e09:	00 00                	add    BYTE PTR [eax],al
     e0b:	01 2e                	add    DWORD PTR [esi],ebp
     e0d:	74 00                	je     e0f <sysEnter_Vector-0x12f1f1>
     e0f:	00 00                	add    BYTE PTR [eax],al
     e11:	02 91 00 12 93 06    	add    dl,BYTE PTR [ecx+0x6931200]
     e17:	00 00                	add    BYTE PTR [eax],al
     e19:	01 2e                	add    DWORD PTR [esi],ebp
     e1b:	87 02                	xchg   DWORD PTR [edx],eax
     e1d:	00 00                	add    BYTE PTR [eax],al
     e1f:	02 91 04 12 15 05    	add    dl,BYTE PTR [ecx+0x5151204]
     e25:	00 00                	add    BYTE PTR [eax],al
     e27:	01 2e                	add    DWORD PTR [esi],ebp
     e29:	72 00                	jb     e2b <sysEnter_Vector-0x12f1d5>
     e2b:	00 00                	add    BYTE PTR [eax],al
     e2d:	02 91 08 14 f4 04    	add    dl,BYTE PTR [ecx+0x4f41408]
     e33:	00 00                	add    BYTE PTR [eax],al
     e35:	01 30                	add    DWORD PTR [eax],esi
     e37:	72 00                	jb     e39 <sysEnter_Vector-0x12f1c7>
     e39:	00 00                	add    BYTE PTR [eax],al
     e3b:	02 91 6c 00 15 b7    	add    dl,BYTE PTR [ecx-0x48eaff94]
     e41:	06                   	push   es
     e42:	00 00                	add    BYTE PTR [eax],al
     e44:	01 3c 96             	add    DWORD PTR [esi+edx*4],edi
     e47:	0a 00                	or     al,BYTE PTR [eax]
     e49:	9f                   	lahf   
     e4a:	2a 00                	sub    al,BYTE PTR [eax]
     e4c:	00 00                	add    BYTE PTR [eax],al
     e4e:	01 9c 1a 04 00 00 12 	add    DWORD PTR [edx+ebx*1+0x12000004],ebx
     e55:	ef                   	out    dx,eax
     e56:	06                   	push   es
     e57:	00 00                	add    BYTE PTR [eax],al
     e59:	01 3c 72             	add    DWORD PTR [edx+esi*2],edi
     e5c:	00 00                	add    BYTE PTR [eax],al
     e5e:	00 02                	add    BYTE PTR [edx],al
     e60:	91                   	xchg   ecx,eax
     e61:	00 00                	add    BYTE PTR [eax],al
     e63:	15 fb 04 00 00       	adc    eax,0x4fb
     e68:	01 41 c0             	add    DWORD PTR [ecx-0x40],eax
     e6b:	0a 00                	or     al,BYTE PTR [eax]
     e6d:	9f                   	lahf   
     e6e:	20 00                	and    BYTE PTR [eax],al
     e70:	00 00                	add    BYTE PTR [eax],al
     e72:	01 9c 3e 04 00 00 12 	add    DWORD PTR [esi+edi*1+0x12000004],ebx
     e79:	ef                   	out    dx,eax
     e7a:	06                   	push   es
     e7b:	00 00                	add    BYTE PTR [eax],al
     e7d:	01 41 72             	add    DWORD PTR [ecx+0x72],eax
     e80:	00 00                	add    BYTE PTR [eax],al
     e82:	00 02                	add    BYTE PTR [edx],al
     e84:	91                   	xchg   ecx,eax
     e85:	00 00                	add    BYTE PTR [eax],al
     e87:	11 81 06 00 00 01    	adc    DWORD PTR [ecx+0x1000006],eax
     e8d:	46                   	inc    esi
     e8e:	4f                   	dec    edi
     e8f:	00 00                	add    BYTE PTR [eax],al
     e91:	00 e0                	add    al,ah
     e93:	0a 00                	or     al,BYTE PTR [eax]
     e95:	9f                   	lahf   
     e96:	35 00 00 00 01       	xor    eax,0x1000000
     e9b:	9c                   	pushf  
     e9c:	90                   	nop
     e9d:	04 00                	add    al,0x0
     e9f:	00 12                	add    BYTE PTR [edx],dl
     ea1:	ef                   	out    dx,eax
     ea2:	06                   	push   es
     ea3:	00 00                	add    BYTE PTR [eax],al
     ea5:	01 46 72             	add    DWORD PTR [esi+0x72],eax
     ea8:	00 00                	add    BYTE PTR [eax],al
     eaa:	00 02                	add    BYTE PTR [edx],al
     eac:	91                   	xchg   ecx,eax
     ead:	00 12                	add    BYTE PTR [edx],dl
     eaf:	98                   	cwde   
     eb0:	06                   	push   es
     eb1:	00 00                	add    BYTE PTR [eax],al
     eb3:	01 46 72             	add    DWORD PTR [esi+0x72],eax
     eb6:	00 00                	add    BYTE PTR [eax],al
     eb8:	00 02                	add    BYTE PTR [edx],al
     eba:	91                   	xchg   ecx,eax
     ebb:	04 12                	add    al,0x12
     ebd:	da 06                	fiadd  DWORD PTR [esi]
     ebf:	00 00                	add    BYTE PTR [eax],al
     ec1:	01 46 4f             	add    DWORD PTR [esi+0x4f],eax
     ec4:	00 00                	add    BYTE PTR [eax],al
     ec6:	00 02                	add    BYTE PTR [edx],al
     ec8:	91                   	xchg   ecx,eax
     ec9:	08 12                	or     BYTE PTR [edx],dl
     ecb:	87 06                	xchg   DWORD PTR [esi],eax
     ecd:	00 00                	add    BYTE PTR [eax],al
     ecf:	01 46 4f             	add    DWORD PTR [esi+0x4f],eax
     ed2:	00 00                	add    BYTE PTR [eax],al
     ed4:	00 02                	add    BYTE PTR [edx],al
     ed6:	91                   	xchg   ecx,eax
     ed7:	0c 00                	or     al,0x0
     ed9:	11 8e 06 00 00 01    	adc    DWORD PTR [esi+0x1000006],ecx
     edf:	4b                   	dec    ebx
     ee0:	4f                   	dec    edi
     ee1:	00 00                	add    BYTE PTR [eax],al
     ee3:	00 15 0b 00 9f 26    	add    BYTE PTR ds:0x269f000b,dl
     ee9:	00 00                	add    BYTE PTR [eax],al
     eeb:	00 01                	add    BYTE PTR [ecx],al
     eed:	9c                   	pushf  
     eee:	e2 04                	loop   ef4 <sysEnter_Vector-0x12f10c>
     ef0:	00 00                	add    BYTE PTR [eax],al
     ef2:	12 ef                	adc    ch,bh
     ef4:	06                   	push   es
     ef5:	00 00                	add    BYTE PTR [eax],al
     ef7:	01 4b 72             	add    DWORD PTR [ebx+0x72],ecx
     efa:	00 00                	add    BYTE PTR [eax],al
     efc:	00 02                	add    BYTE PTR [edx],al
     efe:	91                   	xchg   ecx,eax
     eff:	00 12                	add    BYTE PTR [edx],dl
     f01:	98                   	cwde   
     f02:	06                   	push   es
     f03:	00 00                	add    BYTE PTR [eax],al
     f05:	01 4b 72             	add    DWORD PTR [ebx+0x72],ecx
     f08:	00 00                	add    BYTE PTR [eax],al
     f0a:	00 02                	add    BYTE PTR [edx],al
     f0c:	91                   	xchg   ecx,eax
     f0d:	04 12                	add    al,0x12
     f0f:	da 06                	fiadd  DWORD PTR [esi]
     f11:	00 00                	add    BYTE PTR [eax],al
     f13:	01 4b 4f             	add    DWORD PTR [ebx+0x4f],ecx
     f16:	00 00                	add    BYTE PTR [eax],al
     f18:	00 02                	add    BYTE PTR [edx],al
     f1a:	91                   	xchg   ecx,eax
     f1b:	08 12                	or     BYTE PTR [edx],dl
     f1d:	87 06                	xchg   DWORD PTR [esi],eax
     f1f:	00 00                	add    BYTE PTR [eax],al
     f21:	01 4b 4f             	add    DWORD PTR [ebx+0x4f],ecx
     f24:	00 00                	add    BYTE PTR [eax],al
     f26:	00 02                	add    BYTE PTR [edx],al
     f28:	91                   	xchg   ecx,eax
     f29:	0c 00                	or     al,0x0
     f2b:	11 c3                	adc    ebx,eax
     f2d:	05 00 00 01 4f       	add    eax,0x4f010000
     f32:	4f                   	dec    edi
     f33:	00 00                	add    BYTE PTR [eax],al
     f35:	00 3b                	add    BYTE PTR [ebx],bh
     f37:	0b 00                	or     eax,DWORD PTR [eax]
     f39:	9f                   	lahf   
     f3a:	35 00 00 00 01       	xor    eax,0x1000000
     f3f:	9c                   	pushf  
     f40:	34 05                	xor    al,0x5
     f42:	00 00                	add    BYTE PTR [eax],al
     f44:	12 ef                	adc    ch,bh
     f46:	06                   	push   es
     f47:	00 00                	add    BYTE PTR [eax],al
     f49:	01 4f 72             	add    DWORD PTR [edi+0x72],ecx
     f4c:	00 00                	add    BYTE PTR [eax],al
     f4e:	00 02                	add    BYTE PTR [edx],al
     f50:	91                   	xchg   ecx,eax
     f51:	00 12                	add    BYTE PTR [edx],dl
     f53:	98                   	cwde   
     f54:	06                   	push   es
     f55:	00 00                	add    BYTE PTR [eax],al
     f57:	01 4f 72             	add    DWORD PTR [edi+0x72],ecx
     f5a:	00 00                	add    BYTE PTR [eax],al
     f5c:	00 02                	add    BYTE PTR [edx],al
     f5e:	91                   	xchg   ecx,eax
     f5f:	04 12                	add    al,0x12
     f61:	da 06                	fiadd  DWORD PTR [esi]
     f63:	00 00                	add    BYTE PTR [eax],al
     f65:	01 4f 4f             	add    DWORD PTR [edi+0x4f],ecx
     f68:	00 00                	add    BYTE PTR [eax],al
     f6a:	00 02                	add    BYTE PTR [edx],al
     f6c:	91                   	xchg   ecx,eax
     f6d:	08 12                	or     BYTE PTR [edx],dl
     f6f:	87 06                	xchg   DWORD PTR [esi],eax
     f71:	00 00                	add    BYTE PTR [eax],al
     f73:	01 4f 4f             	add    DWORD PTR [edi+0x4f],ecx
     f76:	00 00                	add    BYTE PTR [eax],al
     f78:	00 02                	add    BYTE PTR [edx],al
     f7a:	91                   	xchg   ecx,eax
     f7b:	0c 00                	or     al,0x0
     f7d:	11 1c 06             	adc    DWORD PTR [esi+eax*1],ebx
     f80:	00 00                	add    BYTE PTR [eax],al
     f82:	01 54 4f 00          	add    DWORD PTR [edi+ecx*2+0x0],edx
     f86:	00 00                	add    BYTE PTR [eax],al
     f88:	70 0b                	jo     f95 <sysEnter_Vector-0x12f06b>
     f8a:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
     f90:	01 9c 86 05 00 00 12 	add    DWORD PTR [esi+eax*4+0x12000005],ebx
     f97:	ef                   	out    dx,eax
     f98:	06                   	push   es
     f99:	00 00                	add    BYTE PTR [eax],al
     f9b:	01 54 72 00          	add    DWORD PTR [edx+esi*2+0x0],edx
     f9f:	00 00                	add    BYTE PTR [eax],al
     fa1:	02 91 00 12 98 06    	add    dl,BYTE PTR [ecx+0x6981200]
     fa7:	00 00                	add    BYTE PTR [eax],al
     fa9:	01 54 72 00          	add    DWORD PTR [edx+esi*2+0x0],edx
     fad:	00 00                	add    BYTE PTR [eax],al
     faf:	02 91 04 12 da 06    	add    dl,BYTE PTR [ecx+0x6da1204]
     fb5:	00 00                	add    BYTE PTR [eax],al
     fb7:	01 54 4f 00          	add    DWORD PTR [edi+ecx*2+0x0],edx
     fbb:	00 00                	add    BYTE PTR [eax],al
     fbd:	02 91 08 12 87 06    	add    dl,BYTE PTR [ecx+0x6871208]
     fc3:	00 00                	add    BYTE PTR [eax],al
     fc5:	01 54 4f 00          	add    DWORD PTR [edi+ecx*2+0x0],edx
     fc9:	00 00                	add    BYTE PTR [eax],al
     fcb:	02 91 0c 00 11 be    	add    dl,BYTE PTR [ecx-0x41eefff4]
     fd1:	06                   	push   es
     fd2:	00 00                	add    BYTE PTR [eax],al
     fd4:	01 59 4f             	add    DWORD PTR [ecx+0x4f],ebx
     fd7:	00 00                	add    BYTE PTR [eax],al
     fd9:	00 96 0b 00 9f 2e    	add    BYTE PTR [esi+0x2e9f000b],dl
     fdf:	00 00                	add    BYTE PTR [eax],al
     fe1:	00 01                	add    BYTE PTR [ecx],al
     fe3:	9c                   	pushf  
     fe4:	ca 05 00             	retf   0x5
     fe7:	00 12                	add    BYTE PTR [edx],dl
     fe9:	ef                   	out    dx,eax
     fea:	06                   	push   es
     feb:	00 00                	add    BYTE PTR [eax],al
     fed:	01 59 72             	add    DWORD PTR [ecx+0x72],ebx
     ff0:	00 00                	add    BYTE PTR [eax],al
     ff2:	00 02                	add    BYTE PTR [edx],al
     ff4:	91                   	xchg   ecx,eax
     ff5:	00 12                	add    BYTE PTR [edx],dl
     ff7:	ba 05 00 00 01       	mov    edx,0x1000005
     ffc:	59                   	pop    ecx
     ffd:	64 00 00             	add    BYTE PTR fs:[eax],al
    1000:	00 02                	add    BYTE PTR [edx],al
    1002:	91                   	xchg   ecx,eax
    1003:	04 12                	add    al,0x12
    1005:	cf                   	iret   
    1006:	05 00 00 01 59       	add    eax,0x59010000
    100b:	4f                   	dec    edi
    100c:	00 00                	add    BYTE PTR [eax],al
    100e:	00 02                	add    BYTE PTR [edx],al
    1010:	91                   	xchg   ecx,eax
    1011:	08 00                	or     BYTE PTR [eax],al
    1013:	11 ca                	adc    edx,ecx
    1015:	05 00 00 01 5e       	add    eax,0x5e010000
    101a:	4f                   	dec    edi
    101b:	00 00                	add    BYTE PTR [eax],al
    101d:	00 c4                	add    ah,al
    101f:	0b 00                	or     eax,DWORD PTR [eax]
    1021:	9f                   	lahf   
    1022:	26 00 00             	add    BYTE PTR es:[eax],al
    1025:	00 01                	add    BYTE PTR [ecx],al
    1027:	9c                   	pushf  
    1028:	0e                   	push   cs
    1029:	06                   	push   es
    102a:	00 00                	add    BYTE PTR [eax],al
    102c:	12 ef                	adc    ch,bh
    102e:	06                   	push   es
    102f:	00 00                	add    BYTE PTR [eax],al
    1031:	01 5e 72             	add    DWORD PTR [esi+0x72],ebx
    1034:	00 00                	add    BYTE PTR [eax],al
    1036:	00 02                	add    BYTE PTR [edx],al
    1038:	91                   	xchg   ecx,eax
    1039:	00 12                	add    BYTE PTR [edx],dl
    103b:	ba 05 00 00 01       	mov    edx,0x1000005
    1040:	5e                   	pop    esi
    1041:	64 00 00             	add    BYTE PTR fs:[eax],al
    1044:	00 02                	add    BYTE PTR [edx],al
    1046:	91                   	xchg   ecx,eax
    1047:	04 12                	add    al,0x12
    1049:	cf                   	iret   
    104a:	05 00 00 01 5e       	add    eax,0x5e010000
    104f:	4f                   	dec    edi
    1050:	00 00                	add    BYTE PTR [eax],al
    1052:	00 02                	add    BYTE PTR [edx],al
    1054:	91                   	xchg   ecx,eax
    1055:	08 00                	or     BYTE PTR [eax],al
    1057:	11 3f                	adc    DWORD PTR [edi],edi
    1059:	05 00 00 01 62       	add    eax,0x62010000
    105e:	4f                   	dec    edi
    105f:	00 00                	add    BYTE PTR [eax],al
    1061:	00 ea                	add    dl,ch
    1063:	0b 00                	or     eax,DWORD PTR [eax]
    1065:	9f                   	lahf   
    1066:	2d 00 00 00 01       	sub    eax,0x1000000
    106b:	9c                   	pushf  
    106c:	44                   	inc    esp
    106d:	06                   	push   es
    106e:	00 00                	add    BYTE PTR [eax],al
    1070:	12 1c 05 00 00 01 62 	adc    bl,BYTE PTR [eax*1+0x62010000]
    1077:	74 00                	je     1079 <sysEnter_Vector-0x12ef87>
    1079:	00 00                	add    BYTE PTR [eax],al
    107b:	02 91 00 12 17 06    	add    dl,BYTE PTR [ecx+0x6171200]
    1081:	00 00                	add    BYTE PTR [eax],al
    1083:	01 62 44             	add    DWORD PTR [edx+0x44],esp
    1086:	06                   	push   es
    1087:	00 00                	add    BYTE PTR [eax],al
    1089:	02 91 04 00 05 04    	add    dl,BYTE PTR [ecx+0x4050004]
    108f:	7c 02                	jl     1093 <sysEnter_Vector-0x12ef6d>
    1091:	00 00                	add    BYTE PTR [eax],al
    1093:	11 17                	adc    DWORD PTR [edi],edx
    1095:	06                   	push   es
    1096:	00 00                	add    BYTE PTR [eax],al
    1098:	01 67 4f             	add    DWORD PTR [edi+0x4f],esp
    109b:	00 00                	add    BYTE PTR [eax],al
    109d:	00 17                	add    BYTE PTR [edi],dl
    109f:	0c 00                	or     al,0x0
    10a1:	9f                   	lahf   
    10a2:	23 00                	and    eax,DWORD PTR [eax]
    10a4:	00 00                	add    BYTE PTR [eax],al
    10a6:	01 9c 80 06 00 00 12 	add    DWORD PTR [eax+eax*4+0x12000006],ebx
    10ad:	1c 05                	sbb    al,0x5
    10af:	00 00                	add    BYTE PTR [eax],al
    10b1:	01 67 74             	add    DWORD PTR [edi+0x74],esp
    10b4:	00 00                	add    BYTE PTR [eax],al
    10b6:	00 02                	add    BYTE PTR [edx],al
    10b8:	91                   	xchg   ecx,eax
    10b9:	00 12                	add    BYTE PTR [edx],dl
    10bb:	17                   	pop    ss
    10bc:	06                   	push   es
    10bd:	00 00                	add    BYTE PTR [eax],al
    10bf:	01 67 44             	add    DWORD PTR [edi+0x44],esp
    10c2:	06                   	push   es
    10c3:	00 00                	add    BYTE PTR [eax],al
    10c5:	02 91 04 00 11 a3    	add    dl,BYTE PTR [ecx-0x5ceefffc]
    10cb:	05 00 00 01 6c       	add    eax,0x6c010000
    10d0:	4f                   	dec    edi
    10d1:	00 00                	add    BYTE PTR [eax],al
    10d3:	00 3a                	add    BYTE PTR [edx],bh
    10d5:	0c 00                	or     al,0x0
    10d7:	9f                   	lahf   
    10d8:	29 03                	sub    DWORD PTR [ebx],eax
    10da:	00 00                	add    BYTE PTR [eax],al
    10dc:	01 9c 30 07 00 00 12 	add    DWORD PTR [eax+esi*1+0x12000007],ebx
    10e3:	02 07                	add    al,BYTE PTR [edi]
    10e5:	00 00                	add    BYTE PTR [eax],al
    10e7:	01 6c 87 02          	add    DWORD PTR [edi+eax*4+0x2],ebp
    10eb:	00 00                	add    BYTE PTR [eax],al
    10ed:	02 91 00 12 3a 06    	add    dl,BYTE PTR [ecx+0x63a1200]
    10f3:	00 00                	add    BYTE PTR [eax],al
    10f5:	01 6c 74 00          	add    DWORD PTR [esp+esi*2+0x0],ebp
    10f9:	00 00                	add    BYTE PTR [eax],al
    10fb:	02 91 04 12 4b 05    	add    dl,BYTE PTR [ecx+0x54b1204]
    1101:	00 00                	add    BYTE PTR [eax],al
    1103:	01 6c 92 02          	add    DWORD PTR [edx+edx*4+0x2],ebp
    1107:	00 00                	add    BYTE PTR [eax],al
    1109:	02 91 4c 14 7c 01    	add    dl,BYTE PTR [ecx+0x17c144c]
    110f:	00 00                	add    BYTE PTR [eax],al
    1111:	01 6e 30             	add    DWORD PTR [esi+0x30],ebp
    1114:	07                   	pop    es
    1115:	00 00                	add    BYTE PTR [eax],al
    1117:	02 91 5e 14 64 06    	add    dl,BYTE PTR [ecx+0x664145e]
    111d:	00 00                	add    BYTE PTR [eax],al
    111f:	01 6f 74             	add    DWORD PTR [edi+0x74],ebp
    1122:	00 00                	add    BYTE PTR [eax],al
    1124:	00 02                	add    BYTE PTR [edx],al
    1126:	91                   	xchg   ecx,eax
    1127:	6c                   	ins    BYTE PTR es:[edi],dx
    1128:	14 f4                	adc    al,0xf4
    112a:	04 00                	add    al,0x0
    112c:	00 01                	add    BYTE PTR [ecx],al
    112e:	70 4f                	jo     117f <sysEnter_Vector-0x12ee81>
    1130:	00 00                	add    BYTE PTR [eax],al
    1132:	00 02                	add    BYTE PTR [edx],al
    1134:	91                   	xchg   ecx,eax
    1135:	68 14 16 06 00       	push   0x61614
    113a:	00 01                	add    BYTE PTR [ecx],al
    113c:	71 7c                	jno    11ba <sysEnter_Vector-0x12ee46>
    113e:	02 00                	add    al,BYTE PTR [eax]
    1140:	00 02                	add    BYTE PTR [edx],al
    1142:	91                   	xchg   ecx,eax
    1143:	54                   	push   esp
    1144:	16                   	push   ss
    1145:	fc                   	cld    
    1146:	0d 00 9f bd 00       	or     eax,0xbd9f00
    114b:	00 00                	add    BYTE PTR [eax],al
    114d:	17                   	pop    ss
    114e:	07                   	pop    es
    114f:	00 00                	add    BYTE PTR [eax],al
    1151:	17                   	pop    ss
    1152:	72 65                	jb     11b9 <sysEnter_Vector-0x12ee47>
    1154:	73 00                	jae    1156 <sysEnter_Vector-0x12eeaa>
    1156:	01 9d 4f 00 00 00    	add    DWORD PTR [ebp+0x4f],ebx
    115c:	02 91 64 00 18 cd    	add    dl,BYTE PTR [ecx-0x32e7ff9c]
    1162:	0e                   	push   cs
    1163:	00 9f 8e 00 00 00    	add    BYTE PTR [edi+0x8e],bl
    1169:	17                   	pop    ss
    116a:	72 65                	jb     11d1 <sysEnter_Vector-0x12ee2f>
    116c:	73 00                	jae    116e <sysEnter_Vector-0x12ee92>
    116e:	01 ac 4f 00 00 00 02 	add    DWORD PTR [edi+ecx*2+0x2000000],ebp
    1175:	91                   	xchg   ecx,eax
    1176:	60                   	pusha  
    1177:	00 00                	add    BYTE PTR [eax],al
    1179:	0d 7a 00 00 00       	or     eax,0x7a
    117e:	40                   	inc    eax
    117f:	07                   	pop    es
    1180:	00 00                	add    BYTE PTR [eax],al
    1182:	19 6b 00             	sbb    DWORD PTR [ebx+0x0],ebp
    1185:	00 00                	add    BYTE PTR [eax],al
    1187:	01 00                	add    DWORD PTR [eax],eax
    1189:	11 2c 05 00 00 01 b8 	adc    DWORD PTR [eax*1-0x47ff0000],ebp
    1190:	64 00 00             	add    BYTE PTR fs:[eax],al
    1193:	00 63 0f             	add    BYTE PTR [ebx+0xf],ah
    1196:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
    119c:	01 9c 68 07 00 00 12 	add    DWORD PTR [eax+ebp*2+0x12000007],ebx
    11a3:	15 05 00 00 01       	adc    eax,0x1000005
    11a8:	b8 72 00 00 00       	mov    eax,0x72
    11ad:	02 91 00 00 11 6f    	add    dl,BYTE PTR [ecx+0x6f110000]
    11b3:	05 00 00 01 bd       	add    eax,0xbd010000
    11b8:	64 00 00             	add    BYTE PTR fs:[eax],al
    11bb:	00 8c 0f 00 9f 20 00 	add    BYTE PTR [edi+ecx*1+0x209f00],cl
    11c2:	00 00                	add    BYTE PTR [eax],al
    11c4:	01 9c 90 07 00 00 12 	add    DWORD PTR [eax+edx*4+0x12000007],ebx
    11cb:	15 05 00 00 01       	adc    eax,0x1000005
    11d0:	bd 72 00 00 00       	mov    ebp,0x72
    11d5:	02 91 00 00 11 80    	add    dl,BYTE PTR [ecx-0x7fef0000]
    11db:	05 00 00 01 c2       	add    eax,0xc2010000
    11e0:	ad                   	lods   eax,DWORD PTR ds:[esi]
    11e1:	00 00                	add    BYTE PTR [eax],al
    11e3:	00 ac 0f 00 9f c1 01 	add    BYTE PTR [edi+ecx*1+0x1c19f00],ch
    11ea:	00 00                	add    BYTE PTR [eax],al
    11ec:	01 9c 4d 08 00 00 12 	add    DWORD PTR [ebp+ecx*2+0x12000008],ebx
    11f3:	42                   	inc    edx
    11f4:	06                   	push   es
    11f5:	00 00                	add    BYTE PTR [eax],al
    11f7:	01 c2                	add    edx,eax
    11f9:	4d                   	dec    ebp
    11fa:	08 00                	or     BYTE PTR [eax],al
    11fc:	00 02                	add    BYTE PTR [edx],al
    11fe:	91                   	xchg   ecx,eax
    11ff:	00 1a                	add    BYTE PTR [edx],bl
    1201:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1202:	00 01                	add    BYTE PTR [ecx],al
    1204:	c2 53 08             	ret    0x853
    1207:	00 00                	add    BYTE PTR [eax],al
    1209:	02 91 04 12 15 05    	add    dl,BYTE PTR [ecx+0x5151204]
    120f:	00 00                	add    BYTE PTR [eax],al
    1211:	01 c2                	add    edx,eax
    1213:	72 00                	jb     1215 <sysEnter_Vector-0x12edeb>
    1215:	00 00                	add    BYTE PTR [eax],al
    1217:	02 91 08 14 98 06    	add    dl,BYTE PTR [ecx+0x6981408]
    121d:	00 00                	add    BYTE PTR [eax],al
    121f:	01 c4                	add    esp,eax
    1221:	74 00                	je     1223 <sysEnter_Vector-0x12eddd>
    1223:	00 00                	add    BYTE PTR [eax],al
    1225:	02 91 54 14 22 07    	add    dl,BYTE PTR [ecx+0x7221454]
    122b:	00 00                	add    BYTE PTR [eax],al
    122d:	01 c5                	add    ebp,eax
    122f:	4f                   	dec    edi
    1230:	00 00                	add    BYTE PTR [eax],al
    1232:	00 02                	add    BYTE PTR [edx],al
    1234:	91                   	xchg   ecx,eax
    1235:	60                   	pusha  
    1236:	14 9f                	adc    al,0x9f
    1238:	06                   	push   es
    1239:	00 00                	add    BYTE PTR [eax],al
    123b:	01 c6                	add    esi,eax
    123d:	ad                   	lods   eax,DWORD PTR ds:[esi]
    123e:	00 00                	add    BYTE PTR [eax],al
    1240:	00 02                	add    BYTE PTR [edx],al
    1242:	91                   	xchg   ecx,eax
    1243:	6c                   	ins    BYTE PTR es:[edi],dx
    1244:	14 45                	adc    al,0x45
    1246:	05 00 00 01 c7       	add    eax,0xc7010000
    124b:	74 00                	je     124d <sysEnter_Vector-0x12edb3>
    124d:	00 00                	add    BYTE PTR [eax],al
    124f:	02 91 5c 14 f4 05    	add    dl,BYTE PTR [ecx+0x5f4145c]
    1255:	00 00                	add    BYTE PTR [eax],al
    1257:	01 c8                	add    eax,ecx
    1259:	74 00                	je     125b <sysEnter_Vector-0x12eda5>
    125b:	00 00                	add    BYTE PTR [eax],al
    125d:	02 91 50 14 09 07    	add    dl,BYTE PTR [ecx+0x7091450]
    1263:	00 00                	add    BYTE PTR [eax],al
    1265:	01 c9                	add    ecx,ecx
    1267:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1268:	00 00                	add    BYTE PTR [eax],al
    126a:	00 02                	add    BYTE PTR [edx],al
    126c:	91                   	xchg   ecx,eax
    126d:	68 14 32 05 00       	push   0x53214
    1272:	00 01                	add    BYTE PTR [ecx],al
    1274:	ca 4f 00             	retf   0x4f
    1277:	00 00                	add    BYTE PTR [eax],al
    1279:	02 91 58 14 f4 04    	add    dl,BYTE PTR [ecx+0x4f41458]
    127f:	00 00                	add    BYTE PTR [eax],al
    1281:	01 cb                	add    ebx,ecx
    1283:	4f                   	dec    edi
    1284:	00 00                	add    BYTE PTR [eax],al
    1286:	00 02                	add    BYTE PTR [edx],al
    1288:	91                   	xchg   ecx,eax
    1289:	64                   	fs
    128a:	1b de                	sbb    ebx,esi
    128c:	05 00 00 01 e8       	add    eax,0xe8010000
    1291:	57                   	push   edi
    1292:	11 00                	adc    DWORD PTR [eax],eax
    1294:	9f                   	lahf   
    1295:	00 05 04 74 00 00    	add    BYTE PTR ds:0x7404,al
    129b:	00 05 04 ad 00 00    	add    BYTE PTR ds:0xad04,al
    12a1:	00 11                	add    BYTE PTR [ecx],dl
    12a3:	d6                   	(bad)  
    12a4:	05 00 00 01 ed       	add    eax,0xed010000
    12a9:	ad                   	lods   eax,DWORD PTR ds:[esi]
    12aa:	00 00                	add    BYTE PTR [eax],al
    12ac:	00 6d 11             	add    BYTE PTR [ebp+0x11],ch
    12af:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
    12b5:	01 9c 9b 08 00 00 12 	add    DWORD PTR [ebx+ebx*4+0x12000008],ebx
    12bc:	42                   	inc    edx
    12bd:	06                   	push   es
    12be:	00 00                	add    BYTE PTR [eax],al
    12c0:	01 ed                	add    ebp,ebp
    12c2:	4d                   	dec    ebp
    12c3:	08 00                	or     BYTE PTR [eax],al
    12c5:	00 02                	add    BYTE PTR [edx],al
    12c7:	91                   	xchg   ecx,eax
    12c8:	00 1a                	add    BYTE PTR [edx],bl
    12ca:	6e                   	outs   dx,BYTE PTR ds:[esi]
    12cb:	00 01                	add    BYTE PTR [ecx],al
    12cd:	ed                   	in     eax,dx
    12ce:	53                   	push   ebx
    12cf:	08 00                	or     BYTE PTR [eax],al
    12d1:	00 02                	add    BYTE PTR [edx],al
    12d3:	91                   	xchg   ecx,eax
    12d4:	04 12                	add    al,0x12
    12d6:	15 05 00 00 01       	adc    eax,0x1000005
    12db:	ed                   	in     eax,dx
    12dc:	72 00                	jb     12de <sysEnter_Vector-0x12ed22>
    12de:	00 00                	add    BYTE PTR [eax],al
    12e0:	02 91 08 00 11 22    	add    dl,BYTE PTR [ecx+0x22110008]
    12e6:	06                   	push   es
    12e7:	00 00                	add    BYTE PTR [eax],al
    12e9:	01 f2                	add    edx,esi
    12eb:	4f                   	dec    edi
    12ec:	00 00                	add    BYTE PTR [eax],al
    12ee:	00 93 11 00 9f 29    	add    BYTE PTR [ebx+0x299f0011],dl
    12f4:	00 00                	add    BYTE PTR [eax],al
    12f6:	00 01                	add    BYTE PTR [ecx],al
    12f8:	9c                   	pushf  
    12f9:	c3                   	ret    
    12fa:	08 00                	or     BYTE PTR [eax],al
    12fc:	00 12                	add    BYTE PTR [edx],dl
    12fe:	31 06                	xor    DWORD PTR [esi],eax
    1300:	00 00                	add    BYTE PTR [eax],al
    1302:	01 f2                	add    edx,esi
    1304:	74 00                	je     1306 <sysEnter_Vector-0x12ecfa>
    1306:	00 00                	add    BYTE PTR [eax],al
    1308:	02 91 00 00 1c 78    	add    dl,BYTE PTR [ecx+0x781c0000]
    130e:	00 00                	add    BYTE PTR [eax],al
    1310:	00 05 33 4d 08 00    	add    BYTE PTR ds:0x84d33,al
    1316:	00 05 03 60 7c 00    	add    BYTE PTR ds:0x7c6003,al
    131c:	9f                   	lahf   
    131d:	1c 10                	sbb    al,0x10
    131f:	02 00                	add    al,BYTE PTR [eax]
    1321:	00 04 35 e5 08 00 00 	add    BYTE PTR [esi*1+0x8e5],al
    1328:	05 03 70 7c 00       	add    eax,0x7c7003
    132d:	9f                   	lahf   
    132e:	05 04 a2 00 00       	add    eax,0xa204
    1333:	00 1c 33             	add    BYTE PTR [ebx+esi*1],bl
    1336:	02 00                	add    al,BYTE PTR [eax]
    1338:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    133b:	97                   	xchg   edi,eax
    133c:	00 00                	add    BYTE PTR [eax],al
    133e:	00 05 03 6c 7c 00    	add    BYTE PTR ds:0x7c6c03,al
    1344:	9f                   	lahf   
    1345:	1c 01                	sbb    al,0x1
    1347:	05 00 00 01 0d       	add    eax,0xd010000
    134c:	74 00                	je     134e <sysEnter_Vector-0x12ecb2>
    134e:	00 00                	add    BYTE PTR [eax],al
    1350:	05 03 74 7c 00       	add    eax,0x7c7403
    1355:	9f                   	lahf   
    1356:	1c f6                	sbb    al,0xf6
    1358:	06                   	push   es
    1359:	00 00                	add    BYTE PTR [eax],al
    135b:	01 0e                	add    DWORD PTR [esi],ecx
    135d:	74 00                	je     135f <sysEnter_Vector-0x12eca1>
    135f:	00 00                	add    BYTE PTR [eax],al
    1361:	05 03 80 7c 00       	add    eax,0x7c8003
    1366:	9f                   	lahf   
    1367:	1c 5b                	sbb    al,0x5b
    1369:	05 00 00 01 0f       	add    eax,0xf010000
    136e:	74 00                	je     1370 <sysEnter_Vector-0x12ec90>
    1370:	00 00                	add    BYTE PTR [eax],al
    1372:	05 03 78 7c 00       	add    eax,0x7c7803
    1377:	9f                   	lahf   
    1378:	1c df                	sbb    al,0xdf
    137a:	06                   	push   es
    137b:	00 00                	add    BYTE PTR [eax],al
    137d:	01 10                	add    DWORD PTR [eax],edx
    137f:	74 00                	je     1381 <sysEnter_Vector-0x12ec7f>
    1381:	00 00                	add    BYTE PTR [eax],al
    1383:	05 03 7c 7c 00       	add    eax,0x7c7c03
    1388:	9f                   	lahf   
    1389:	00 97 02 00 00 04    	add    BYTE PTR [edi+0x4000002],dl
    138f:	00 a1 05 00 00 04    	add    BYTE PTR [ecx+0x4000005],ah
    1395:	01 c3                	add    ebx,eax
    1397:	00 00                	add    BYTE PTR [eax],al
    1399:	00 0c 68             	add    BYTE PTR [eax+ebp*2],cl
    139c:	07                   	pop    es
    139d:	00 00                	add    BYTE PTR [eax],al
    139f:	4d                   	dec    ebp
    13a0:	00 00                	add    BYTE PTR [eax],al
    13a2:	00 bc 11 00 9f 69 01 	add    BYTE PTR [ecx+edx*1+0x1699f00],bh
    13a9:	00 00                	add    BYTE PTR [eax],al
    13ab:	4f                   	dec    edi
    13ac:	06                   	push   es
    13ad:	00 00                	add    BYTE PTR [eax],al
    13af:	02 01                	add    al,BYTE PTR [ecx]
    13b1:	08 3f                	or     BYTE PTR [edi],bh
    13b3:	00 00                	add    BYTE PTR [eax],al
    13b5:	00 02                	add    BYTE PTR [edx],al
    13b7:	02 07                	add    al,BYTE PTR [edi]
    13b9:	0e                   	push   cs
    13ba:	00 00                	add    BYTE PTR [eax],al
    13bc:	00 02                	add    BYTE PTR [edx],al
    13be:	04 07                	add    al,0x7
    13c0:	32 00                	xor    al,BYTE PTR [eax]
    13c2:	00 00                	add    BYTE PTR [eax],al
    13c4:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    13c7:	2d 00 00 00 02       	sub    eax,0x2000000
    13cc:	01 06                	add    DWORD PTR [esi],eax
    13ce:	41                   	inc    ecx
    13cf:	00 00                	add    BYTE PTR [eax],al
    13d1:	00 02                	add    BYTE PTR [edx],al
    13d3:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    13d9:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    13e0:	02 08                	add    cl,BYTE PTR [eax]
    13e2:	05 00 00 00 00       	add    eax,0x0
    13e7:	02 08                	add    cl,BYTE PTR [eax]
    13e9:	07                   	pop    es
    13ea:	28 00                	sub    BYTE PTR [eax],al
    13ec:	00 00                	add    BYTE PTR [eax],al
    13ee:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    13f5:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    13f8:	2a 01                	sub    al,BYTE PTR [ecx]
    13fa:	00 00                	add    BYTE PTR [eax],al
    13fc:	04 04                	add    al,0x4
    13fe:	78 00                	js     1400 <sysEnter_Vector-0x12ec00>
    1400:	00 00                	add    BYTE PTR [eax],al
    1402:	02 01                	add    al,BYTE PTR [ecx]
    1404:	06                   	push   es
    1405:	48                   	dec    eax
    1406:	00 00                	add    BYTE PTR [eax],al
    1408:	00 02                	add    BYTE PTR [edx],al
    140a:	0c 04                	or     al,0x4
    140c:	ad                   	lods   eax,DWORD PTR ds:[esi]
    140d:	00 00                	add    BYTE PTR [eax],al
    140f:	00 05 6b 03 00 00    	add    BYTE PTR ds:0x36b,al
    1415:	04 33                	add    al,0x33
    1417:	00 00                	add    BYTE PTR [eax],al
    1419:	00 02                	add    BYTE PTR [edx],al
    141b:	15 80 01 00 00       	adc    eax,0x180
    1420:	06                   	push   es
    1421:	fd                   	std    
    1422:	03 00                	add    eax,DWORD PTR [eax]
    1424:	00 00                	add    BYTE PTR [eax],al
    1426:	06                   	push   es
    1427:	42                   	inc    edx
    1428:	04 00                	add    al,0x0
    142a:	00 01                	add    BYTE PTR [ecx],al
    142c:	06                   	push   es
    142d:	84 02                	test   BYTE PTR [edx],al
    142f:	00 00                	add    BYTE PTR [eax],al
    1431:	02 06                	add    al,BYTE PTR [esi]
    1433:	4e                   	dec    esi
    1434:	03 00                	add    eax,DWORD PTR [eax]
    1436:	00 03                	add    BYTE PTR [ebx],al
    1438:	06                   	push   es
    1439:	6a 02                	push   0x2
    143b:	00 00                	add    BYTE PTR [eax],al
    143d:	04 06                	add    al,0x6
    143f:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
    1443:	05 06 24 04 00       	add    eax,0x42406
    1448:	00 0a                	add    BYTE PTR [edx],cl
    144a:	06                   	push   es
    144b:	8f 03                	pop    DWORD PTR [ebx]
    144d:	00 00                	add    BYTE PTR [eax],al
    144f:	0b 06                	or     eax,DWORD PTR [esi]
    1451:	d6                   	(bad)  
    1452:	03 00                	add    eax,DWORD PTR [eax]
    1454:	00 0c 06             	add    BYTE PTR [esi+eax*1],cl
    1457:	5c                   	pop    esp
    1458:	03 00                	add    eax,DWORD PTR [eax]
    145a:	00 0d 06 75 03 00    	add    BYTE PTR ds:0x37506,cl
    1460:	00 0e                	add    BYTE PTR [esi],cl
    1462:	06                   	push   es
    1463:	77 02                	ja     1467 <sysEnter_Vector-0x12eb99>
    1465:	00 00                	add    BYTE PTR [eax],al
    1467:	0f 06                	clts   
    1469:	b7 03                	mov    bh,0x3
    146b:	00 00                	add    BYTE PTR [eax],al
    146d:	10 06                	adc    BYTE PTR [esi],al
    146f:	a9 04 00 00 11       	test   eax,0x11000004
    1474:	06                   	push   es
    1475:	87 04 00             	xchg   DWORD PTR [eax+eax*1],eax
    1478:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    147b:	5c                   	pop    esp
    147c:	04 00                	add    al,0x0
    147e:	00 50 06             	add    BYTE PTR [eax+0x6],dl
    1481:	f0 03 00             	lock add eax,DWORD PTR [eax]
    1484:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
    1487:	96                   	xchg   esi,eax
    1488:	04 00                	add    al,0x0
    148a:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
    148d:	1b 03                	sbb    eax,DWORD PTR [ebx]
    148f:	00 00                	add    BYTE PTR [eax],al
    1491:	97                   	xchg   edi,eax
    1492:	07                   	pop    es
    1493:	0d 04 00 00 63       	or     eax,0x63000004
    1498:	01 07                	add    DWORD PTR [edi],eax
    149a:	e3 03                	jecxz  149f <sysEnter_Vector-0x12eb61>
    149c:	00 00                	add    BYTE PTR [eax],al
    149e:	64 01 07             	add    DWORD PTR fs:[edi],eax
    14a1:	c6 04 00 00          	mov    BYTE PTR [eax+eax*1],0x0
    14a5:	65 01 07             	add    DWORD PTR gs:[edi],eax
    14a8:	f7 02 00 00 66 01    	test   DWORD PTR [edx],0x1660000
    14ae:	07                   	pop    es
    14af:	d8 04 00             	fadd   DWORD PTR [eax+eax*1]
    14b2:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    14b5:	07                   	pop    es
    14b6:	82                   	(bad)  
    14b7:	03 00                	add    eax,DWORD PTR [eax]
    14b9:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    14bc:	07                   	pop    es
    14bd:	b8 02 00 00 69       	mov    eax,0x69000002
    14c2:	01 07                	add    DWORD PTR [edi],eax
    14c4:	31 04 00             	xor    DWORD PTR [eax+eax*1],eax
    14c7:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    14ca:	07                   	pop    es
    14cb:	0b 03                	or     eax,DWORD PTR [ebx]
    14cd:	00 00                	add    BYTE PTR [eax],al
    14cf:	71 01                	jno    14d2 <sysEnter_Vector-0x12eb2e>
    14d1:	07                   	pop    es
    14d2:	79 04                	jns    14d8 <sysEnter_Vector-0x12eb28>
    14d4:	00 00                	add    BYTE PTR [eax],al
    14d6:	00 03                	add    BYTE PTR [ebx],al
    14d8:	07                   	pop    es
    14d9:	9c                   	pushf  
    14da:	03 00                	add    eax,DWORD PTR [eax]
    14dc:	00 01                	add    BYTE PTR [ecx],al
    14de:	03 07                	add    eax,DWORD PTR [edi]
    14e0:	ab                   	stos   DWORD PTR es:[edi],eax
    14e1:	03 00                	add    eax,DWORD PTR [eax]
    14e3:	00 02                	add    BYTE PTR [edx],al
    14e5:	03 07                	add    eax,DWORD PTR [edi]
    14e7:	3e 03 00             	add    eax,DWORD PTR ds:[eax]
    14ea:	00 03                	add    BYTE PTR [ebx],al
    14ec:	03 07                	add    eax,DWORD PTR [edi]
    14ee:	98                   	cwde   
    14ef:	02 00                	add    al,BYTE PTR [eax]
    14f1:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    14f4:	07                   	pop    es
    14f5:	e7 02                	out    0x2,eax
    14f7:	00 00                	add    BYTE PTR [eax],al
    14f9:	05 03 07 2f 03       	add    eax,0x32f0703
    14fe:	00 00                	add    BYTE PTR [eax],al
    1500:	06                   	push   es
    1501:	03 07                	add    eax,DWORD PTR [edi]
    1503:	c4 03                	les    eax,FWORD PTR [ebx]
    1505:	00 00                	add    BYTE PTR [eax],al
    1507:	00 09                	add    BYTE PTR [ecx],cl
    1509:	00 08                	add    BYTE PTR [eax],cl
    150b:	55                   	push   ebp
    150c:	07                   	pop    es
    150d:	00 00                	add    BYTE PTR [eax],al
    150f:	01 0f                	add    DWORD PTR [edi],ecx
    1511:	bc 11 00 9f 26       	mov    esp,0x269f0011
    1516:	00 00                	add    BYTE PTR [eax],al
    1518:	00 01                	add    BYTE PTR [ecx],al
    151a:	9c                   	pushf  
    151b:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    151c:	01 00                	add    DWORD PTR [eax],eax
    151e:	00 09                	add    BYTE PTR [ecx],cl
    1520:	98                   	cwde   
    1521:	06                   	push   es
    1522:	00 00                	add    BYTE PTR [eax],al
    1524:	01 0f                	add    DWORD PTR [edi],ecx
    1526:	72 00                	jb     1528 <sysEnter_Vector-0x12ead8>
    1528:	00 00                	add    BYTE PTR [eax],al
    152a:	02 91 00 00 08 50    	add    dl,BYTE PTR [ecx+0x50080000]
    1530:	07                   	pop    es
    1531:	00 00                	add    BYTE PTR [eax],al
    1533:	01 14 e2             	add    DWORD PTR [edx+eiz*8],edx
    1536:	11 00                	adc    DWORD PTR [eax],eax
    1538:	9f                   	lahf   
    1539:	43                   	inc    ebx
    153a:	00 00                	add    BYTE PTR [eax],al
    153c:	00 01                	add    BYTE PTR [ecx],al
    153e:	9c                   	pushf  
    153f:	d4 01                	aam    0x1
    1541:	00 00                	add    BYTE PTR [eax],al
    1543:	0a 63 00             	or     ah,BYTE PTR [ebx+0x0]
    1546:	01 14 78             	add    DWORD PTR [eax+edi*2],edx
    1549:	00 00                	add    BYTE PTR [eax],al
    154b:	00 02                	add    BYTE PTR [edx],al
    154d:	91                   	xchg   ecx,eax
    154e:	60                   	pusha  
    154f:	0b 98 06 00 00 01    	or     ebx,DWORD PTR [eax+0x1000006]
    1555:	16                   	push   ss
    1556:	d4 01                	aam    0x1
    1558:	00 00                	add    BYTE PTR [eax],al
    155a:	02 91 72 00 0c 78    	add    dl,BYTE PTR [ecx+0x780c0072]
    1560:	00 00                	add    BYTE PTR [eax],al
    1562:	00 e4                	add    ah,ah
    1564:	01 00                	add    DWORD PTR [eax],eax
    1566:	00 0d 6b 00 00 00    	add    BYTE PTR ds:0x6b,cl
    156c:	01 00                	add    DWORD PTR [eax],eax
    156e:	0e                   	push   cs
    156f:	43                   	inc    ebx
    1570:	07                   	pop    es
    1571:	00 00                	add    BYTE PTR [eax],al
    1573:	01 1f                	add    DWORD PTR [edi],ebx
    1575:	78 00                	js     1577 <sysEnter_Vector-0x12ea89>
    1577:	00 00                	add    BYTE PTR [eax],al
    1579:	25 12 00 9f 43       	and    eax,0x439f0012
    157e:	00 00                	add    BYTE PTR [eax],al
    1580:	00 01                	add    BYTE PTR [ecx],al
    1582:	9c                   	pushf  
    1583:	0a 02                	or     al,BYTE PTR [edx]
    1585:	00 00                	add    BYTE PTR [eax],al
    1587:	0f 63 00             	packsswb mm0,QWORD PTR [eax]
    158a:	01 21                	add    DWORD PTR [ecx],esp
    158c:	78 00                	js     158e <sysEnter_Vector-0x12ea72>
    158e:	00 00                	add    BYTE PTR [eax],al
    1590:	02 91 73 00 10 4b    	add    dl,BYTE PTR [ecx+0x4b100073]
    1596:	07                   	pop    es
    1597:	00 00                	add    BYTE PTR [eax],al
    1599:	01 2d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ebp
    159f:	68 12 00 9f bd       	push   0xbd9f0012
    15a4:	00 00                	add    BYTE PTR [eax],al
    15a6:	00 01                	add    BYTE PTR [ecx],al
    15a8:	9c                   	pushf  
    15a9:	83 02 00             	add    DWORD PTR [edx],0x0
    15ac:	00 09                	add    BYTE PTR [ecx],cl
    15ae:	98                   	cwde   
    15af:	06                   	push   es
    15b0:	00 00                	add    BYTE PTR [eax],al
    15b2:	01 2d 72 00 00 00    	add    DWORD PTR ds:0x72,ebp
    15b8:	02 91 00 09 5a 07    	add    dl,BYTE PTR [ecx+0x75a0900]
    15be:	00 00                	add    BYTE PTR [eax],al
    15c0:	01 2d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ebp
    15c6:	02 91 04 09 15 05    	add    dl,BYTE PTR [ecx+0x5150904]
    15cc:	00 00                	add    BYTE PTR [eax],al
    15ce:	01 2d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ebp
    15d4:	02 91 08 0b 61 07    	add    dl,BYTE PTR [ecx+0x7610b08]
    15da:	00 00                	add    BYTE PTR [eax],al
    15dc:	01 2f                	add    DWORD PTR [edi],ebp
    15de:	78 00                	js     15e0 <sysEnter_Vector-0x12ea20>
    15e0:	00 00                	add    BYTE PTR [eax],al
    15e2:	02 91 6b 0f 6c 65    	add    dl,BYTE PTR [ecx+0x656c0f6b]
    15e8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    15e9:	00 01                	add    BYTE PTR [ecx],al
    15eb:	30 4f 00             	xor    BYTE PTR [edi+0x0],cl
    15ee:	00 00                	add    BYTE PTR [eax],al
    15f0:	02 91 6c 0b 84 07    	add    dl,BYTE PTR [ecx+0x7840b6c]
    15f6:	00 00                	add    BYTE PTR [eax],al
    15f8:	01 31                	add    DWORD PTR [ecx],esi
    15fa:	d4 01                	aam    0x1
    15fc:	00 00                	add    BYTE PTR [eax],al
    15fe:	02 91 69 11 7a 07    	add    dl,BYTE PTR [ecx+0x77a1169]
    1604:	00 00                	add    BYTE PTR [eax],al
    1606:	01 37                	add    DWORD PTR [edi],esi
    1608:	a8 12                	test   al,0x12
    160a:	00 9f 00 12 78 00    	add    BYTE PTR [edi+0x781200],bl
    1610:	00 00                	add    BYTE PTR [eax],al
    1612:	03 33                	add    esi,DWORD PTR [ebx]
    1614:	94                   	xchg   esp,eax
    1615:	02 00                	add    al,BYTE PTR [eax]
    1617:	00 05 03 60 7c 00    	add    BYTE PTR ds:0x7c6003,al
    161d:	9f                   	lahf   
    161e:	04 04                	add    al,0x4
    1620:	72 00                	jb     1622 <sysEnter_Vector-0x12e9de>
    1622:	00 00                	add    BYTE PTR [eax],al
    1624:	00 79 0b             	add    BYTE PTR [ecx+0xb],bh
    1627:	00 00                	add    BYTE PTR [eax],al
    1629:	04 00                	add    al,0x0
    162b:	b3 06                	mov    bl,0x6
    162d:	00 00                	add    BYTE PTR [eax],al
    162f:	04 01                	add    al,0x1
    1631:	c3                   	ret    
    1632:	00 00                	add    BYTE PTR [eax],al
    1634:	00 0c 44             	add    BYTE PTR [esp+eax*2],cl
    1637:	09 00                	or     DWORD PTR [eax],eax
    1639:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    163c:	00 00                	add    BYTE PTR [eax],al
    163e:	28 13                	sub    BYTE PTR [ebx],dl
    1640:	00 9f 4d 0d 00 00    	add    BYTE PTR [edi+0xd4d],bl
    1646:	1f                   	pop    ds
    1647:	07                   	pop    es
    1648:	00 00                	add    BYTE PTR [eax],al
    164a:	02 01                	add    al,BYTE PTR [ecx]
    164c:	08 3f                	or     BYTE PTR [edi],bh
    164e:	00 00                	add    BYTE PTR [eax],al
    1650:	00 02                	add    BYTE PTR [edx],al
    1652:	02 07                	add    al,BYTE PTR [edi]
    1654:	0e                   	push   cs
    1655:	00 00                	add    BYTE PTR [eax],al
    1657:	00 02                	add    BYTE PTR [edx],al
    1659:	04 07                	add    al,0x7
    165b:	32 00                	xor    al,BYTE PTR [eax]
    165d:	00 00                	add    BYTE PTR [eax],al
    165f:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1662:	2d 00 00 00 02       	sub    eax,0x2000000
    1667:	01 06                	add    DWORD PTR [esi],eax
    1669:	41                   	inc    ecx
    166a:	00 00                	add    BYTE PTR [eax],al
    166c:	00 02                	add    BYTE PTR [edx],al
    166e:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    1674:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    167b:	02 08                	add    cl,BYTE PTR [eax]
    167d:	05 00 00 00 00       	add    eax,0x0
    1682:	02 08                	add    cl,BYTE PTR [eax]
    1684:	07                   	pop    es
    1685:	28 00                	sub    BYTE PTR [eax],al
    1687:	00 00                	add    BYTE PTR [eax],al
    1689:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1690:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1693:	2a 01                	sub    al,BYTE PTR [ecx]
    1695:	00 00                	add    BYTE PTR [eax],al
    1697:	04 04                	add    al,0x4
    1699:	05 04 7a 00 00       	add    eax,0x7a04
    169e:	00 02                	add    BYTE PTR [edx],al
    16a0:	01 06                	add    DWORD PTR [esi],eax
    16a2:	48                   	dec    eax
    16a3:	00 00                	add    BYTE PTR [eax],al
    16a5:	00 06                	add    BYTE PTR [esi],al
    16a7:	b5 08                	mov    ch,0x8
    16a9:	00 00                	add    BYTE PTR [eax],al
    16ab:	02 28                	add    ch,BYTE PTR [eax]
    16ad:	8c 00                	mov    WORD PTR [eax],es
    16af:	00 00                	add    BYTE PTR [eax],al
    16b1:	07                   	pop    es
    16b2:	04 de                	add    al,0xde
    16b4:	07                   	pop    es
    16b5:	00 00                	add    BYTE PTR [eax],al
    16b7:	7a 00                	jp     16b9 <sysEnter_Vector-0x12e947>
    16b9:	00 00                	add    BYTE PTR [eax],al
    16bb:	06                   	push   es
    16bc:	bc 08 00 00 02       	mov    esp,0x2000008
    16c1:	62 81 00 00 00 06    	bound  eax,QWORD PTR [ecx+0x6000000]
    16c7:	45                   	inc    ebp
    16c8:	02 00                	add    al,BYTE PTR [eax]
    16ca:	00 03                	add    BYTE PTR [ebx],al
    16cc:	34 33                	xor    al,0x33
    16ce:	00 00                	add    BYTE PTR [eax],al
    16d0:	00 06                	add    BYTE PTR [esi],al
    16d2:	01 02                	add    DWORD PTR [edx],eax
    16d4:	00 00                	add    BYTE PTR [eax],al
    16d6:	03 56 33             	add    edx,DWORD PTR [esi+0x33]
    16d9:	00 00                	add    BYTE PTR [eax],al
    16db:	00 06                	add    BYTE PTR [esi],al
    16dd:	91                   	xchg   ecx,eax
    16de:	02 00                	add    al,BYTE PTR [eax]
    16e0:	00 04 d8             	add    BYTE PTR [eax+ebx*8],al
    16e3:	33 00                	xor    eax,DWORD PTR [eax]
    16e5:	00 00                	add    BYTE PTR [eax],al
    16e7:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    16ea:	ad                   	lods   eax,DWORD PTR ds:[esi]
    16eb:	00 00                	add    BYTE PTR [eax],al
    16ed:	00 08                	add    BYTE PTR [eax],cl
    16ef:	6b 03 00             	imul   eax,DWORD PTR [ebx],0x0
    16f2:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    16f5:	00 00                	add    BYTE PTR [eax],al
    16f7:	00 05 15 c3 01 00    	add    BYTE PTR ds:0x1c315,al
    16fd:	00 09                	add    BYTE PTR [ecx],cl
    16ff:	fd                   	std    
    1700:	03 00                	add    eax,DWORD PTR [eax]
    1702:	00 00                	add    BYTE PTR [eax],al
    1704:	09 42 04             	or     DWORD PTR [edx+0x4],eax
    1707:	00 00                	add    BYTE PTR [eax],al
    1709:	01 09                	add    DWORD PTR [ecx],ecx
    170b:	84 02                	test   BYTE PTR [edx],al
    170d:	00 00                	add    BYTE PTR [eax],al
    170f:	02 09                	add    cl,BYTE PTR [ecx]
    1711:	4e                   	dec    esi
    1712:	03 00                	add    eax,DWORD PTR [eax]
    1714:	00 03                	add    BYTE PTR [ebx],al
    1716:	09 6a 02             	or     DWORD PTR [edx+0x2],ebp
    1719:	00 00                	add    BYTE PTR [eax],al
    171b:	04 09                	add    al,0x9
    171d:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
    1721:	05 09 24 04 00       	add    eax,0x42409
    1726:	00 0a                	add    BYTE PTR [edx],cl
    1728:	09 8f 03 00 00 0b    	or     DWORD PTR [edi+0xb000003],ecx
    172e:	09 d6                	or     esi,edx
    1730:	03 00                	add    eax,DWORD PTR [eax]
    1732:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    1735:	5c                   	pop    esp
    1736:	03 00                	add    eax,DWORD PTR [eax]
    1738:	00 0d 09 75 03 00    	add    BYTE PTR ds:0x37509,cl
    173e:	00 0e                	add    BYTE PTR [esi],cl
    1740:	09 77 02             	or     DWORD PTR [edi+0x2],esi
    1743:	00 00                	add    BYTE PTR [eax],al
    1745:	0f 09                	wbinvd 
    1747:	b7 03                	mov    bh,0x3
    1749:	00 00                	add    BYTE PTR [eax],al
    174b:	10 09                	adc    BYTE PTR [ecx],cl
    174d:	a9 04 00 00 11       	test   eax,0x11000004
    1752:	09 87 04 00 00 4f    	or     DWORD PTR [edi+0x4f000004],eax
    1758:	09 5c 04 00          	or     DWORD PTR [esp+eax*1+0x0],ebx
    175c:	00 50 09             	add    BYTE PTR [eax+0x9],dl
    175f:	f0 03 00             	lock add eax,DWORD PTR [eax]
    1762:	00 59 09             	add    BYTE PTR [ecx+0x9],bl
    1765:	96                   	xchg   esi,eax
    1766:	04 00                	add    al,0x0
    1768:	00 61 09             	add    BYTE PTR [ecx+0x9],ah
    176b:	1b 03                	sbb    eax,DWORD PTR [ebx]
    176d:	00 00                	add    BYTE PTR [eax],al
    176f:	97                   	xchg   edi,eax
    1770:	0a 0d 04 00 00 63    	or     cl,BYTE PTR ds:0x63000004
    1776:	01 0a                	add    DWORD PTR [edx],ecx
    1778:	e3 03                	jecxz  177d <sysEnter_Vector-0x12e883>
    177a:	00 00                	add    BYTE PTR [eax],al
    177c:	64 01 0a             	add    DWORD PTR fs:[edx],ecx
    177f:	c6 04 00 00          	mov    BYTE PTR [eax+eax*1],0x0
    1783:	65 01 0a             	add    DWORD PTR gs:[edx],ecx
    1786:	f7 02 00 00 66 01    	test   DWORD PTR [edx],0x1660000
    178c:	0a d8                	or     bl,al
    178e:	04 00                	add    al,0x0
    1790:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    1793:	0a 82 03 00 00 68    	or     al,BYTE PTR [edx+0x68000003]
    1799:	01 0a                	add    DWORD PTR [edx],ecx
    179b:	b8 02 00 00 69       	mov    eax,0x69000002
    17a0:	01 0a                	add    DWORD PTR [edx],ecx
    17a2:	31 04 00             	xor    DWORD PTR [eax+eax*1],eax
    17a5:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    17a8:	0a 0b                	or     cl,BYTE PTR [ebx]
    17aa:	03 00                	add    eax,DWORD PTR [eax]
    17ac:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    17af:	0a 79 04             	or     bh,BYTE PTR [ecx+0x4]
    17b2:	00 00                	add    BYTE PTR [eax],al
    17b4:	00 03                	add    BYTE PTR [ebx],al
    17b6:	0a 9c 03 00 00 01 03 	or     bl,BYTE PTR [ebx+eax*1+0x3010000]
    17bd:	0a ab 03 00 00 02    	or     ch,BYTE PTR [ebx+0x2000003]
    17c3:	03 0a                	add    ecx,DWORD PTR [edx]
    17c5:	3e 03 00             	add    eax,DWORD PTR ds:[eax]
    17c8:	00 03                	add    BYTE PTR [ebx],al
    17ca:	03 0a                	add    ecx,DWORD PTR [edx]
    17cc:	98                   	cwde   
    17cd:	02 00                	add    al,BYTE PTR [eax]
    17cf:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    17d2:	0a e7                	or     ah,bh
    17d4:	02 00                	add    al,BYTE PTR [eax]
    17d6:	00 05 03 0a 2f 03    	add    BYTE PTR ds:0x32f0a03,al
    17dc:	00 00                	add    BYTE PTR [eax],al
    17de:	06                   	push   es
    17df:	03 0a                	add    ecx,DWORD PTR [edx]
    17e1:	c4 03                	les    eax,FWORD PTR [ebx]
    17e3:	00 00                	add    BYTE PTR [eax],al
    17e5:	00 09                	add    BYTE PTR [ecx],cl
    17e7:	00 05 04 c9 01 00    	add    BYTE PTR ds:0x1c904,al
    17ed:	00 0b                	add    BYTE PTR [ebx],cl
    17ef:	7a 00                	jp     17f1 <sysEnter_Vector-0x12e80f>
    17f1:	00 00                	add    BYTE PTR [eax],al
    17f3:	02 01                	add    al,BYTE PTR [ecx]
    17f5:	02 6a 06             	add    ch,BYTE PTR [edx+0x6]
    17f8:	00 00                	add    BYTE PTR [eax],al
    17fa:	02 08                	add    cl,BYTE PTR [eax]
    17fc:	04 b2                	add    al,0xb2
    17fe:	00 00                	add    BYTE PTR [eax],al
    1800:	00 0c 7a             	add    BYTE PTR [edx+edi*2],cl
    1803:	08 00                	or     BYTE PTR [eax],al
    1805:	00 01                	add    BYTE PTR [ecx],al
    1807:	11 4f 00             	adc    DWORD PTR [edi+0x0],ecx
    180a:	00 00                	add    BYTE PTR [eax],al
    180c:	28 13                	sub    BYTE PTR [ebx],dl
    180e:	00 9f 3a 00 00 00    	add    BYTE PTR [edi+0x3a],bl
    1814:	01 9c 4a 02 00 00 0d 	add    DWORD PTR [edx+ecx*2+0xd000002],ebx
    181b:	30 08                	xor    BYTE PTR [eax],cl
    181d:	00 00                	add    BYTE PTR [eax],al
    181f:	01 11                	add    DWORD PTR [ecx],edx
    1821:	4f                   	dec    edi
    1822:	00 00                	add    BYTE PTR [eax],al
    1824:	00 02                	add    BYTE PTR [edx],al
    1826:	91                   	xchg   ecx,eax
    1827:	00 0d cc 08 00 00    	add    BYTE PTR ds:0x8cc,cl
    182d:	01 11                	add    DWORD PTR [ecx],edx
    182f:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1834:	91                   	xchg   ecx,eax
    1835:	04 0d                	add    al,0xd
    1837:	d3 08                	ror    DWORD PTR [eax],cl
    1839:	00 00                	add    BYTE PTR [eax],al
    183b:	01 11                	add    DWORD PTR [ecx],edx
    183d:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1842:	91                   	xchg   ecx,eax
    1843:	08 0d da 08 00 00    	or     BYTE PTR ds:0x8da,cl
    1849:	01 11                	add    DWORD PTR [ecx],edx
    184b:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1850:	91                   	xchg   ecx,eax
    1851:	0c 0d                	or     al,0xd
    1853:	e1 08                	loope  185d <sysEnter_Vector-0x12e7a3>
    1855:	00 00                	add    BYTE PTR [eax],al
    1857:	01 11                	add    DWORD PTR [ecx],edx
    1859:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    185e:	91                   	xchg   ecx,eax
    185f:	10 0e                	adc    BYTE PTR [esi],cl
    1861:	f4                   	hlt    
    1862:	04 00                	add    al,0x0
    1864:	00 01                	add    BYTE PTR [ecx],al
    1866:	13 4f 00             	adc    ecx,DWORD PTR [edi+0x0]
    1869:	00 00                	add    BYTE PTR [eax],al
    186b:	02 91 6c 00 0c 6e    	add    dl,BYTE PTR [ecx+0x6e0c006c]
    1871:	08 00                	or     BYTE PTR [eax],al
    1873:	00 01                	add    BYTE PTR [ecx],al
    1875:	18 4f 00             	sbb    BYTE PTR [edi+0x0],cl
    1878:	00 00                	add    BYTE PTR [eax],al
    187a:	62 13                	bound  edx,QWORD PTR [ebx]
    187c:	00 9f 3c 00 00 00    	add    BYTE PTR [edi+0x3c],bl
    1882:	01 9c aa 02 00 00 0d 	add    DWORD PTR [edx+ebp*4+0xd000002],ebx
    1889:	30 08                	xor    BYTE PTR [eax],cl
    188b:	00 00                	add    BYTE PTR [eax],al
    188d:	01 18                	add    DWORD PTR [eax],ebx
    188f:	4f                   	dec    edi
    1890:	00 00                	add    BYTE PTR [eax],al
    1892:	00 02                	add    BYTE PTR [edx],al
    1894:	91                   	xchg   ecx,eax
    1895:	00 0d cc 08 00 00    	add    BYTE PTR ds:0x8cc,cl
    189b:	01 18                	add    DWORD PTR [eax],ebx
    189d:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    18a2:	91                   	xchg   ecx,eax
    18a3:	04 0d                	add    al,0xd
    18a5:	d3 08                	ror    DWORD PTR [eax],cl
    18a7:	00 00                	add    BYTE PTR [eax],al
    18a9:	01 18                	add    DWORD PTR [eax],ebx
    18ab:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    18b0:	91                   	xchg   ecx,eax
    18b1:	08 0d da 08 00 00    	or     BYTE PTR ds:0x8da,cl
    18b7:	01 18                	add    DWORD PTR [eax],ebx
    18b9:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    18be:	91                   	xchg   ecx,eax
    18bf:	0c 0e                	or     al,0xe
    18c1:	f4                   	hlt    
    18c2:	04 00                	add    al,0x0
    18c4:	00 01                	add    BYTE PTR [ecx],al
    18c6:	1a 4f 00             	sbb    cl,BYTE PTR [edi+0x0]
    18c9:	00 00                	add    BYTE PTR [eax],al
    18cb:	02 91 6c 00 0c 62    	add    dl,BYTE PTR [ecx+0x620c006c]
    18d1:	08 00                	or     BYTE PTR [eax],al
    18d3:	00 01                	add    BYTE PTR [ecx],al
    18d5:	1f                   	pop    ds
    18d6:	4f                   	dec    edi
    18d7:	00 00                	add    BYTE PTR [eax],al
    18d9:	00 9e 13 00 9f 3e    	add    BYTE PTR [esi+0x3e9f0013],bl
    18df:	00 00                	add    BYTE PTR [eax],al
    18e1:	00 01                	add    BYTE PTR [ecx],al
    18e3:	9c                   	pushf  
    18e4:	fc                   	cld    
    18e5:	02 00                	add    al,BYTE PTR [eax]
    18e7:	00 0d 30 08 00 00    	add    BYTE PTR ds:0x830,cl
    18ed:	01 1f                	add    DWORD PTR [edi],ebx
    18ef:	4f                   	dec    edi
    18f0:	00 00                	add    BYTE PTR [eax],al
    18f2:	00 02                	add    BYTE PTR [edx],al
    18f4:	91                   	xchg   ecx,eax
    18f5:	00 0d cc 08 00 00    	add    BYTE PTR ds:0x8cc,cl
    18fb:	01 1f                	add    DWORD PTR [edi],ebx
    18fd:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1902:	91                   	xchg   ecx,eax
    1903:	04 0d                	add    al,0xd
    1905:	d3 08                	ror    DWORD PTR [eax],cl
    1907:	00 00                	add    BYTE PTR [eax],al
    1909:	01 1f                	add    DWORD PTR [edi],ebx
    190b:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1910:	91                   	xchg   ecx,eax
    1911:	08 0e                	or     BYTE PTR [esi],cl
    1913:	f4                   	hlt    
    1914:	04 00                	add    al,0x0
    1916:	00 01                	add    BYTE PTR [ecx],al
    1918:	21 4f 00             	and    DWORD PTR [edi+0x0],ecx
    191b:	00 00                	add    BYTE PTR [eax],al
    191d:	02 91 6c 00 0c 56    	add    dl,BYTE PTR [ecx+0x560c006c]
    1923:	08 00                	or     BYTE PTR [eax],al
    1925:	00 01                	add    BYTE PTR [ecx],al
    1927:	26                   	es
    1928:	4f                   	dec    edi
    1929:	00 00                	add    BYTE PTR [eax],al
    192b:	00 dc                	add    ah,bl
    192d:	13 00                	adc    eax,DWORD PTR [eax]
    192f:	9f                   	lahf   
    1930:	40                   	inc    eax
    1931:	00 00                	add    BYTE PTR [eax],al
    1933:	00 01                	add    BYTE PTR [ecx],al
    1935:	9c                   	pushf  
    1936:	40                   	inc    eax
    1937:	03 00                	add    eax,DWORD PTR [eax]
    1939:	00 0d 30 08 00 00    	add    BYTE PTR ds:0x830,cl
    193f:	01 26                	add    DWORD PTR [esi],esp
    1941:	4f                   	dec    edi
    1942:	00 00                	add    BYTE PTR [eax],al
    1944:	00 02                	add    BYTE PTR [edx],al
    1946:	91                   	xchg   ecx,eax
    1947:	00 0d cc 08 00 00    	add    BYTE PTR ds:0x8cc,cl
    194d:	01 26                	add    DWORD PTR [esi],esp
    194f:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1954:	91                   	xchg   ecx,eax
    1955:	04 0e                	add    al,0xe
    1957:	f4                   	hlt    
    1958:	04 00                	add    al,0x0
    195a:	00 01                	add    BYTE PTR [ecx],al
    195c:	28 4f 00             	sub    BYTE PTR [edi+0x0],cl
    195f:	00 00                	add    BYTE PTR [eax],al
    1961:	02 91 6c 00 0c 62    	add    dl,BYTE PTR [ecx+0x620c006c]
    1967:	09 00                	or     DWORD PTR [eax],eax
    1969:	00 01                	add    BYTE PTR [ecx],al
    196b:	2d 4f 00 00 00       	sub    eax,0x4f
    1970:	1c 14                	sbb    al,0x14
    1972:	00 9f 42 00 00 00    	add    BYTE PTR [edi+0x42],bl
    1978:	01 9c 76 03 00 00 0d 	add    DWORD PTR [esi+esi*2+0xd000003],ebx
    197f:	30 08                	xor    BYTE PTR [eax],cl
    1981:	00 00                	add    BYTE PTR [eax],al
    1983:	01 2d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ebp
    1989:	02 91 00 0e f4 04    	add    dl,BYTE PTR [ecx+0x4f40e00]
    198f:	00 00                	add    BYTE PTR [eax],al
    1991:	01 2f                	add    DWORD PTR [edi],ebp
    1993:	4f                   	dec    edi
    1994:	00 00                	add    BYTE PTR [eax],al
    1996:	00 02                	add    BYTE PTR [edx],al
    1998:	91                   	xchg   ecx,eax
    1999:	6c                   	ins    BYTE PTR es:[edi],dx
    199a:	00 0f                	add    BYTE PTR [edi],cl
    199c:	ce                   	into   
    199d:	07                   	pop    es
    199e:	00 00                	add    BYTE PTR [eax],al
    19a0:	01 34 5e             	add    DWORD PTR [esi+ebx*2],esi
    19a3:	14 00                	adc    al,0x0
    19a5:	9f                   	lahf   
    19a6:	cb                   	retf   
    19a7:	00 00                	add    BYTE PTR [eax],al
    19a9:	00 01                	add    BYTE PTR [ecx],al
    19ab:	9c                   	pushf  
    19ac:	10 75 09             	adc    BYTE PTR [ebp+0x9],dh
    19af:	00 00                	add    BYTE PTR [eax],al
    19b1:	01 48 29             	add    DWORD PTR [eax+0x29],ecx
    19b4:	15 00 9f 23 00       	adc    eax,0x239f00
    19b9:	00 00                	add    BYTE PTR [eax],al
    19bb:	01 9c 11 89 07 00 00 	add    DWORD PTR [ecx+edx*1+0x789],ebx
    19c2:	01 4e 4f             	add    DWORD PTR [esi+0x4f],ecx
    19c5:	00 00                	add    BYTE PTR [eax],al
    19c7:	00 4c 15 00          	add    BYTE PTR [ebp+edx*1+0x0],cl
    19cb:	9f                   	lahf   
    19cc:	59                   	pop    ecx
    19cd:	00 00                	add    BYTE PTR [eax],al
    19cf:	00 01                	add    BYTE PTR [ecx],al
    19d1:	9c                   	pushf  
    19d2:	dd 03                	fld    QWORD PTR [ebx]
    19d4:	00 00                	add    BYTE PTR [eax],al
    19d6:	0d 05 09 00 00       	or     eax,0x905
    19db:	01 4e c3             	add    DWORD PTR [esi-0x3d],ecx
    19de:	01 00                	add    DWORD PTR [eax],eax
    19e0:	00 02                	add    BYTE PTR [edx],al
    19e2:	91                   	xchg   ecx,eax
    19e3:	00 12                	add    BYTE PTR [edx],dl
    19e5:	0e                   	push   cs
    19e6:	ca 09 00             	retf   0x9
    19e9:	00 01                	add    BYTE PTR [ecx],al
    19eb:	50                   	push   eax
    19ec:	96                   	xchg   esi,eax
    19ed:	00 00                	add    BYTE PTR [eax],al
    19ef:	00 02                	add    BYTE PTR [edx],al
    19f1:	91                   	xchg   ecx,eax
    19f2:	68 0e da 06 00       	push   0x6da0e
    19f7:	00 01                	add    BYTE PTR [ecx],al
    19f9:	53                   	push   ebx
    19fa:	4f                   	dec    edi
    19fb:	00 00                	add    BYTE PTR [eax],al
    19fd:	00 02                	add    BYTE PTR [edx],al
    19ff:	91                   	xchg   ecx,eax
    1a00:	6c                   	ins    BYTE PTR es:[edi],dx
    1a01:	00 11                	add    BYTE PTR [ecx],dl
    1a03:	fa                   	cli    
    1a04:	0d 00 00 01 58       	or     eax,0x58010000
    1a09:	4f                   	dec    edi
    1a0a:	00 00                	add    BYTE PTR [eax],al
    1a0c:	00 a5 15 00 9f 54    	add    BYTE PTR [ebp+0x549f0015],ah
    1a12:	00 00                	add    BYTE PTR [eax],al
    1a14:	00 01                	add    BYTE PTR [ecx],al
    1a16:	9c                   	pushf  
    1a17:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    1a1a:	00 0d 05 09 00 00    	add    BYTE PTR ds:0x905,cl
    1a20:	01 58 c3             	add    DWORD PTR [eax-0x3d],ebx
    1a23:	01 00                	add    DWORD PTR [eax],eax
    1a25:	00 02                	add    BYTE PTR [edx],al
    1a27:	91                   	xchg   ecx,eax
    1a28:	00 12                	add    BYTE PTR [edx],dl
    1a2a:	0e                   	push   cs
    1a2b:	ca 09 00             	retf   0x9
    1a2e:	00 01                	add    BYTE PTR [ecx],al
    1a30:	5a                   	pop    edx
    1a31:	96                   	xchg   esi,eax
    1a32:	00 00                	add    BYTE PTR [eax],al
    1a34:	00 02                	add    BYTE PTR [edx],al
    1a36:	91                   	xchg   ecx,eax
    1a37:	68 0e da 06 00       	push   0x6da0e
    1a3c:	00 01                	add    BYTE PTR [ecx],al
    1a3e:	5d                   	pop    ebp
    1a3f:	4f                   	dec    edi
    1a40:	00 00                	add    BYTE PTR [eax],al
    1a42:	00 02                	add    BYTE PTR [edx],al
    1a44:	91                   	xchg   ecx,eax
    1a45:	6c                   	ins    BYTE PTR es:[edi],dx
    1a46:	00 11                	add    BYTE PTR [ecx],dl
    1a48:	16                   	push   ss
    1a49:	0e                   	push   cs
    1a4a:	00 00                	add    BYTE PTR [eax],al
    1a4c:	01 61 4f             	add    DWORD PTR [ecx+0x4f],esp
    1a4f:	00 00                	add    BYTE PTR [eax],al
    1a51:	00 f9                	add    cl,bh
    1a53:	15 00 9f 54 00       	adc    eax,0x549f00
    1a58:	00 00                	add    BYTE PTR [eax],al
    1a5a:	01 9c 67 04 00 00 0d 	add    DWORD PTR [edi+eiz*2+0xd000004],ebx
    1a61:	05 09 00 00 01       	add    eax,0x1000009
    1a66:	61                   	popa   
    1a67:	c3                   	ret    
    1a68:	01 00                	add    DWORD PTR [eax],eax
    1a6a:	00 02                	add    BYTE PTR [edx],al
    1a6c:	91                   	xchg   ecx,eax
    1a6d:	00 12                	add    BYTE PTR [edx],dl
    1a6f:	0e                   	push   cs
    1a70:	ca 09 00             	retf   0x9
    1a73:	00 01                	add    BYTE PTR [ecx],al
    1a75:	63 96 00 00 00 02    	arpl   WORD PTR [esi+0x2000000],dx
    1a7b:	91                   	xchg   ecx,eax
    1a7c:	68 0e da 06 00       	push   0x6da0e
    1a81:	00 01                	add    BYTE PTR [ecx],al
    1a83:	66 4f                	dec    di
    1a85:	00 00                	add    BYTE PTR [eax],al
    1a87:	00 02                	add    BYTE PTR [edx],al
    1a89:	91                   	xchg   ecx,eax
    1a8a:	6c                   	ins    BYTE PTR es:[edi],dx
    1a8b:	00 11                	add    BYTE PTR [ecx],dl
    1a8d:	cf                   	iret   
    1a8e:	09 00                	or     DWORD PTR [eax],eax
    1a90:	00 01                	add    BYTE PTR [ecx],al
    1a92:	6a 4f                	push   0x4f
    1a94:	00 00                	add    BYTE PTR [eax],al
    1a96:	00 4d 16             	add    BYTE PTR [ebp+0x16],cl
    1a99:	00 9f 34 00 00 00    	add    BYTE PTR [edi+0x34],bl
    1a9f:	01 9c 9e 04 00 00 0d 	add    DWORD PTR [esi+ebx*4+0xd000004],ebx
    1aa6:	05 09 00 00 01       	add    eax,0x1000009
    1aab:	6a c3                	push   0xffffffc3
    1aad:	01 00                	add    DWORD PTR [eax],eax
    1aaf:	00 02                	add    BYTE PTR [edx],al
    1ab1:	91                   	xchg   ecx,eax
    1ab2:	00 12                	add    BYTE PTR [edx],dl
    1ab4:	0e                   	push   cs
    1ab5:	ca 09 00             	retf   0x9
    1ab8:	00 01                	add    BYTE PTR [ecx],al
    1aba:	6c                   	ins    BYTE PTR es:[edi],dx
    1abb:	96                   	xchg   esi,eax
    1abc:	00 00                	add    BYTE PTR [eax],al
    1abe:	00 02                	add    BYTE PTR [edx],al
    1ac0:	91                   	xchg   ecx,eax
    1ac1:	74 00                	je     1ac3 <sysEnter_Vector-0x12e53d>
    1ac3:	11 db                	adc    ebx,ebx
    1ac5:	09 00                	or     DWORD PTR [eax],eax
    1ac7:	00 01                	add    BYTE PTR [ecx],al
    1ac9:	72 4f                	jb     1b1a <sysEnter_Vector-0x12e4e6>
    1acb:	00 00                	add    BYTE PTR [eax],al
    1acd:	00 81 16 00 9f 37    	add    BYTE PTR [ecx+0x379f0016],al
    1ad3:	00 00                	add    BYTE PTR [eax],al
    1ad5:	00 01                	add    BYTE PTR [ecx],al
    1ad7:	9c                   	pushf  
    1ad8:	e3 04                	jecxz  1ade <sysEnter_Vector-0x12e522>
    1ada:	00 00                	add    BYTE PTR [eax],al
    1adc:	0d 1f 08 00 00       	or     eax,0x81f
    1ae1:	01 72 a1             	add    DWORD PTR [edx-0x5f],esi
    1ae4:	00 00                	add    BYTE PTR [eax],al
    1ae6:	00 02                	add    BYTE PTR [edx],al
    1ae8:	91                   	xchg   ecx,eax
    1ae9:	00 0d 05 09 00 00    	add    BYTE PTR ds:0x905,cl
    1aef:	01 72 c3             	add    DWORD PTR [edx-0x3d],esi
    1af2:	01 00                	add    DWORD PTR [eax],eax
    1af4:	00 02                	add    BYTE PTR [edx],al
    1af6:	91                   	xchg   ecx,eax
    1af7:	04 12                	add    al,0x12
    1af9:	0e                   	push   cs
    1afa:	ca 09 00             	retf   0x9
    1afd:	00 01                	add    BYTE PTR [ecx],al
    1aff:	74 96                	je     1a97 <sysEnter_Vector-0x12e569>
    1b01:	00 00                	add    BYTE PTR [eax],al
    1b03:	00 02                	add    BYTE PTR [edx],al
    1b05:	91                   	xchg   ecx,eax
    1b06:	74 00                	je     1b08 <sysEnter_Vector-0x12e4f8>
    1b08:	11 c4                	adc    esp,eax
    1b0a:	08 00                	or     BYTE PTR [eax],al
    1b0c:	00 01                	add    BYTE PTR [ecx],al
    1b0e:	7c 4f                	jl     1b5f <sysEnter_Vector-0x12e4a1>
    1b10:	00 00                	add    BYTE PTR [eax],al
    1b12:	00 b8 16 00 9f 37    	add    BYTE PTR [eax+0x379f0016],bh
    1b18:	00 00                	add    BYTE PTR [eax],al
    1b1a:	00 01                	add    BYTE PTR [ecx],al
    1b1c:	9c                   	pushf  
    1b1d:	28 05 00 00 0d 1f    	sub    BYTE PTR ds:0x1f0d0000,al
    1b23:	08 00                	or     BYTE PTR [eax],al
    1b25:	00 01                	add    BYTE PTR [ecx],al
    1b27:	7c a1                	jl     1aca <sysEnter_Vector-0x12e536>
    1b29:	00 00                	add    BYTE PTR [eax],al
    1b2b:	00 02                	add    BYTE PTR [edx],al
    1b2d:	91                   	xchg   ecx,eax
    1b2e:	00 0d 05 09 00 00    	add    BYTE PTR ds:0x905,cl
    1b34:	01 7c c3 01          	add    DWORD PTR [ebx+eax*8+0x1],edi
    1b38:	00 00                	add    BYTE PTR [eax],al
    1b3a:	02 91 04 12 0e ca    	add    dl,BYTE PTR [ecx-0x35f1edfc]
    1b40:	09 00                	or     DWORD PTR [eax],eax
    1b42:	00 01                	add    BYTE PTR [ecx],al
    1b44:	7e 96                	jle    1adc <sysEnter_Vector-0x12e524>
    1b46:	00 00                	add    BYTE PTR [eax],al
    1b48:	00 02                	add    BYTE PTR [edx],al
    1b4a:	91                   	xchg   ecx,eax
    1b4b:	74 00                	je     1b4d <sysEnter_Vector-0x12e4b3>
    1b4d:	0c fd                	or     al,0xfd
    1b4f:	08 00                	or     BYTE PTR [eax],al
    1b51:	00 01                	add    BYTE PTR [ecx],al
    1b53:	86 33                	xchg   BYTE PTR [ebx],dh
    1b55:	00 00                	add    BYTE PTR [eax],al
    1b57:	00 ef                	add    bh,ch
    1b59:	16                   	push   ss
    1b5a:	00 9f 88 00 00 00    	add    BYTE PTR [edi+0x88],bl
    1b60:	01 9c 81 05 00 00 0d 	add    DWORD PTR [ecx+eax*4+0xd000005],ebx
    1b67:	86 08                	xchg   BYTE PTR [eax],cl
    1b69:	00 00                	add    BYTE PTR [eax],al
    1b6b:	01 86 33 00 00 00    	add    DWORD PTR [esi+0x33],eax
    1b71:	02 91 00 13 6d 73    	add    dl,BYTE PTR [ecx+0x736d1300]
    1b77:	00 01                	add    BYTE PTR [ecx],al
    1b79:	88 4f 00             	mov    BYTE PTR [edi+0x0],cl
    1b7c:	00 00                	add    BYTE PTR [eax],al
    1b7e:	02 91 6c 14 19 17    	add    dl,BYTE PTR [ecx+0x1719146c]
    1b84:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    1b8a:	13 73 32             	adc    esi,DWORD PTR [ebx+0x32]
    1b8d:	00 01                	add    BYTE PTR [ecx],al
    1b8f:	89 a1 00 00 00 02    	mov    DWORD PTR [ecx+0x2000000],esp
    1b95:	91                   	xchg   ecx,eax
    1b96:	68 13 63 74 00       	push   0x746313
    1b9b:	01 89 a1 00 00 00    	add    DWORD PTR [ecx+0xa1],ecx
    1ba1:	02 91 64 00 00 0c    	add    dl,BYTE PTR [ecx+0xc000064]
    1ba7:	41                   	inc    ecx
    1ba8:	08 00                	or     BYTE PTR [eax],al
    1baa:	00 01                	add    BYTE PTR [ecx],al
    1bac:	8c 33                	mov    WORD PTR [ebx],?
    1bae:	00 00                	add    BYTE PTR [eax],al
    1bb0:	00 77 17             	add    BYTE PTR [edi+0x17],dh
    1bb3:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
    1bb9:	01 9c cd 05 00 00 0d 	add    DWORD PTR [ebp+ecx*8+0xd000005],ebx
    1bc0:	24 09                	and    al,0x9
    1bc2:	00 00                	add    BYTE PTR [eax],al
    1bc4:	01 8c 33 00 00 00 02 	add    DWORD PTR [ebx+esi*1+0x2000000],ecx
    1bcb:	91                   	xchg   ecx,eax
    1bcc:	00 14 89             	add    BYTE PTR [ecx+ecx*4],dl
    1bcf:	17                   	pop    ss
    1bd0:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    1bd6:	13 73 32             	adc    esi,DWORD PTR [ebx+0x32]
    1bd9:	00 01                	add    BYTE PTR [ecx],al
    1bdb:	8e a1 00 00 00 02    	mov    fs,WORD PTR [ecx+0x2000000]
    1be1:	91                   	xchg   ecx,eax
    1be2:	6c                   	ins    BYTE PTR es:[edi],dx
    1be3:	13 63 74             	adc    esp,DWORD PTR [ebx+0x74]
    1be6:	00 01                	add    BYTE PTR [ecx],al
    1be8:	8e a1 00 00 00 02    	mov    fs,WORD PTR [ecx+0x2000000]
    1bee:	91                   	xchg   ecx,eax
    1bef:	68 00 00 0c a4       	push   0xa40c0000
    1bf4:	07                   	pop    es
    1bf5:	00 00                	add    BYTE PTR [eax],al
    1bf7:	01 91 33 00 00 00    	add    DWORD PTR [ecx+0x33],edx
    1bfd:	e7 17                	out    0x17,eax
    1bff:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
    1c05:	01 9c 19 06 00 00 0d 	add    DWORD PTR [ecx+ebx*1+0xd000006],ebx
    1c0c:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1c0d:	09 00                	or     DWORD PTR [eax],eax
    1c0f:	00 01                	add    BYTE PTR [ecx],al
    1c11:	91                   	xchg   ecx,eax
    1c12:	33 00                	xor    eax,DWORD PTR [eax]
    1c14:	00 00                	add    BYTE PTR [eax],al
    1c16:	02 91 00 14 f9 17    	add    dl,BYTE PTR [ecx+0x17f91400]
    1c1c:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    1c22:	13 73 32             	adc    esi,DWORD PTR [ebx+0x32]
    1c25:	00 01                	add    BYTE PTR [ecx],al
    1c27:	93                   	xchg   ebx,eax
    1c28:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1c2d:	91                   	xchg   ecx,eax
    1c2e:	6c                   	ins    BYTE PTR es:[edi],dx
    1c2f:	13 63 74             	adc    esp,DWORD PTR [ebx+0x74]
    1c32:	00 01                	add    BYTE PTR [ecx],al
    1c34:	93                   	xchg   ebx,eax
    1c35:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1c3a:	91                   	xchg   ecx,eax
    1c3b:	68 00 00 0f d6       	push   0xd60f0000
    1c40:	09 00                	or     DWORD PTR [eax],eax
    1c42:	00 01                	add    BYTE PTR [ecx],al
    1c44:	97                   	xchg   edi,eax
    1c45:	57                   	push   edi
    1c46:	18 00                	sbb    BYTE PTR [eax],al
    1c48:	9f                   	lahf   
    1c49:	1d 00 00 00 01       	sbb    eax,0x1000000
    1c4e:	9c                   	pushf  
    1c4f:	15 bd 09 00 00       	adc    eax,0x9bd
    1c54:	01 9c 74 18 00 9f 29 	add    DWORD PTR [esp+esi*2+0x299f0018],ebx
    1c5b:	00 00                	add    BYTE PTR [eax],al
    1c5d:	00 01                	add    BYTE PTR [ecx],al
    1c5f:	9c                   	pushf  
    1c60:	6a 06                	push   0x6
    1c62:	00 00                	add    BYTE PTR [eax],al
    1c64:	0d 18 09 00 00       	or     eax,0x918
    1c69:	01 9c 4f 00 00 00 02 	add    DWORD PTR [edi+ecx*2+0x2000000],ebx
    1c70:	91                   	xchg   ecx,eax
    1c71:	00 0d 9a 09 00 00    	add    BYTE PTR ds:0x99a,cl
    1c77:	01 9c 72 00 00 00 02 	add    DWORD PTR [edx+esi*2+0x2000000],ebx
    1c7e:	91                   	xchg   ecx,eax
    1c7f:	04 0d                	add    al,0xd
    1c81:	9c                   	pushf  
    1c82:	07                   	pop    es
    1c83:	00 00                	add    BYTE PTR [eax],al
    1c85:	01 9c 4f 00 00 00 02 	add    DWORD PTR [edi+ecx*2+0x2000000],ebx
    1c8c:	91                   	xchg   ecx,eax
    1c8d:	08 00                	or     BYTE PTR [eax],al
    1c8f:	16                   	push   ss
    1c90:	f6 07 00             	test   BYTE PTR [edi],0x0
    1c93:	00 01                	add    BYTE PTR [ecx],al
    1c95:	a1 4f 00 00 00       	mov    eax,ds:0x4f
    1c9a:	9d                   	popf   
    1c9b:	18 00                	sbb    BYTE PTR [eax],al
    1c9d:	9f                   	lahf   
    1c9e:	29 00                	sub    DWORD PTR [eax],eax
    1ca0:	00 00                	add    BYTE PTR [eax],al
    1ca2:	01 9c 92 06 00 00 0e 	add    DWORD PTR [edx+edx*4+0xe000006],ebx
    1ca9:	f4                   	hlt    
    1caa:	04 00                	add    al,0x0
    1cac:	00 01                	add    BYTE PTR [ecx],al
    1cae:	a3 a1 00 00 00       	mov    ds:0xa1,eax
    1cb3:	02 91 74 00 11 1f    	add    dl,BYTE PTR [ecx+0x1f110074]
    1cb9:	09 00                	or     DWORD PTR [eax],eax
    1cbb:	00 01                	add    BYTE PTR [ecx],al
    1cbd:	a9 4f 00 00 00       	test   eax,0x4f
    1cc2:	c6                   	(bad)  
    1cc3:	18 00                	sbb    BYTE PTR [eax],al
    1cc5:	9f                   	lahf   
    1cc6:	4c                   	dec    esp
    1cc7:	00 00                	add    BYTE PTR [eax],al
    1cc9:	00 01                	add    BYTE PTR [ecx],al
    1ccb:	9c                   	pushf  
    1ccc:	e4 06                	in     al,0x6
    1cce:	00 00                	add    BYTE PTR [eax],al
    1cd0:	0d 1c 05 00 00       	or     eax,0x51c
    1cd5:	01 a9 74 00 00 00    	add    DWORD PTR [ecx+0x74],ebp
    1cdb:	02 91 00 0d 55 09    	add    dl,BYTE PTR [ecx+0x9550d00]
    1ce1:	00 00                	add    BYTE PTR [eax],al
    1ce3:	01 a9 4f 00 00 00    	add    DWORD PTR [ecx+0x4f],ebp
    1ce9:	02 91 04 0d 82 09    	add    dl,BYTE PTR [ecx+0x9820d04]
    1cef:	00 00                	add    BYTE PTR [eax],al
    1cf1:	01 a9 e4 06 00 00    	add    DWORD PTR [ecx+0x6e4],ebp
    1cf7:	02 91 08 13 70 69    	add    dl,BYTE PTR [ecx+0x69701308]
    1cfd:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1d00:	ab                   	stos   DWORD PTR es:[edi],eax
    1d01:	4f                   	dec    edi
    1d02:	00 00                	add    BYTE PTR [eax],al
    1d04:	00 02                	add    BYTE PTR [edx],al
    1d06:	91                   	xchg   ecx,eax
    1d07:	74 00                	je     1d09 <sysEnter_Vector-0x12e2f7>
    1d09:	05 04 74 00 00       	add    eax,0x7404
    1d0e:	00 11                	add    BYTE PTR [ecx],dl
    1d10:	2a 08                	sub    cl,BYTE PTR [eax]
    1d12:	00 00                	add    BYTE PTR [eax],al
    1d14:	01 b1 4f 00 00 00    	add    DWORD PTR [ecx+0x4f],esi
    1d1a:	12 19                	adc    bl,BYTE PTR [ecx]
    1d1c:	00 9f f4 01 00 00    	add    BYTE PTR [edi+0x1f4],bl
    1d22:	01 9c 8c 07 00 00 0d 	add    DWORD PTR [esp+ecx*4+0xd000007],ebx
    1d29:	1c 05                	sbb    al,0x5
    1d2b:	00 00                	add    BYTE PTR [eax],al
    1d2d:	01 b1 74 00 00 00    	add    DWORD PTR [ecx+0x74],esi
    1d33:	02 91 00 13 70 69    	add    dl,BYTE PTR [ecx+0x69701300]
    1d39:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1d3c:	b3 4f                	mov    bl,0x4f
    1d3e:	00 00                	add    BYTE PTR [eax],al
    1d40:	00 02                	add    BYTE PTR [edx],al
    1d42:	91                   	xchg   ecx,eax
    1d43:	58                   	pop    eax
    1d44:	0e                   	push   cs
    1d45:	55                   	push   ebp
    1d46:	09 00                	or     DWORD PTR [eax],eax
    1d48:	00 01                	add    BYTE PTR [ecx],al
    1d4a:	b3 4f                	mov    bl,0x4f
    1d4c:	00 00                	add    BYTE PTR [eax],al
    1d4e:	00 02                	add    BYTE PTR [edx],al
    1d50:	91                   	xchg   ecx,eax
    1d51:	6c                   	ins    BYTE PTR es:[edi],dx
    1d52:	0e                   	push   cs
    1d53:	82                   	(bad)  
    1d54:	09 00                	or     DWORD PTR [eax],eax
    1d56:	00 01                	add    BYTE PTR [ecx],al
    1d58:	b4 e4                	mov    ah,0xe4
    1d5a:	06                   	push   es
    1d5b:	00 00                	add    BYTE PTR [eax],al
    1d5d:	02 91 50 0e fb 07    	add    dl,BYTE PTR [ecx+0x7fb0e50]
    1d63:	00 00                	add    BYTE PTR [eax],al
    1d65:	01 b5 74 00 00 00    	add    DWORD PTR [ebp+0x74],esi
    1d6b:	02 91 68 0e 8f 07    	add    dl,BYTE PTR [ecx+0x78f0e68]
    1d71:	00 00                	add    BYTE PTR [eax],al
    1d73:	01 b5 74 00 00 00    	add    DWORD PTR [ebp+0x74],esi
    1d79:	02 91 64 0e ef 08    	add    dl,BYTE PTR [ecx+0x8ef0e64]
    1d7f:	00 00                	add    BYTE PTR [eax],al
    1d81:	01 b6 74 00 00 00    	add    DWORD PTR [esi+0x74],esi
    1d87:	02 91 54 0e b8 07    	add    dl,BYTE PTR [ecx+0x7b80e54]
    1d8d:	00 00                	add    BYTE PTR [eax],al
    1d8f:	01 c7                	add    edi,eax
    1d91:	4f                   	dec    edi
    1d92:	00 00                	add    BYTE PTR [eax],al
    1d94:	00 02                	add    BYTE PTR [edx],al
    1d96:	91                   	xchg   ecx,eax
    1d97:	60                   	pusha  
    1d98:	14 e8                	adc    al,0xe8
    1d9a:	19 00                	sbb    DWORD PTR [eax],eax
    1d9c:	9f                   	lahf   
    1d9d:	e0 00                	loopne 1d9f <sysEnter_Vector-0x12e261>
    1d9f:	00 00                	add    BYTE PTR [eax],al
    1da1:	13 63 6e             	adc    esp,DWORD PTR [ebx+0x6e]
    1da4:	74 00                	je     1da6 <sysEnter_Vector-0x12e25a>
    1da6:	01 c9                	add    ecx,ecx
    1da8:	4f                   	dec    edi
    1da9:	00 00                	add    BYTE PTR [eax],al
    1dab:	00 02                	add    BYTE PTR [edx],al
    1dad:	91                   	xchg   ecx,eax
    1dae:	5c                   	pop    esp
    1daf:	00 00                	add    BYTE PTR [eax],al
    1db1:	11 f7                	adc    edi,esi
    1db3:	08 00                	or     BYTE PTR [eax],al
    1db5:	00 01                	add    BYTE PTR [ecx],al
    1db7:	df 4f 00             	fisttp WORD PTR [edi+0x0]
    1dba:	00 00                	add    BYTE PTR [eax],al
    1dbc:	06                   	push   es
    1dbd:	1b 00                	sbb    eax,DWORD PTR [eax]
    1dbf:	9f                   	lahf   
    1dc0:	4f                   	dec    edi
    1dc1:	00 00                	add    BYTE PTR [eax],al
    1dc3:	00 01                	add    BYTE PTR [ecx],al
    1dc5:	9c                   	pushf  
    1dc6:	de 07                	fiadd  WORD PTR [edi]
    1dc8:	00 00                	add    BYTE PTR [eax],al
    1dca:	0d 1c 05 00 00       	or     eax,0x51c
    1dcf:	01 df                	add    edi,ebx
    1dd1:	74 00                	je     1dd3 <sysEnter_Vector-0x12e22d>
    1dd3:	00 00                	add    BYTE PTR [eax],al
    1dd5:	02 91 00 0d 55 09    	add    dl,BYTE PTR [ecx+0x9550d00]
    1ddb:	00 00                	add    BYTE PTR [eax],al
    1ddd:	01 df                	add    edi,ebx
    1ddf:	4f                   	dec    edi
    1de0:	00 00                	add    BYTE PTR [eax],al
    1de2:	00 02                	add    BYTE PTR [edx],al
    1de4:	91                   	xchg   ecx,eax
    1de5:	04 0d                	add    al,0xd
    1de7:	82                   	(bad)  
    1de8:	09 00                	or     DWORD PTR [eax],eax
    1dea:	00 01                	add    BYTE PTR [ecx],al
    1dec:	df e4                	(bad)  
    1dee:	06                   	push   es
    1def:	00 00                	add    BYTE PTR [eax],al
    1df1:	02 91 08 13 70 69    	add    dl,BYTE PTR [ecx+0x69701308]
    1df7:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1dfa:	e1 4f                	loope  1e4b <sysEnter_Vector-0x12e1b5>
    1dfc:	00 00                	add    BYTE PTR [eax],al
    1dfe:	00 02                	add    BYTE PTR [edx],al
    1e00:	91                   	xchg   ecx,eax
    1e01:	74 00                	je     1e03 <sysEnter_Vector-0x12e1fd>
    1e03:	11 17                	adc    DWORD PTR [edi],edx
    1e05:	08 00                	or     BYTE PTR [eax],al
    1e07:	00 01                	add    BYTE PTR [ecx],al
    1e09:	e7 4f                	out    0x4f,eax
    1e0b:	00 00                	add    BYTE PTR [eax],al
    1e0d:	00 55 1b             	add    BYTE PTR [ebp+0x1b],dl
    1e10:	00 9f 1c 00 00 00    	add    BYTE PTR [edi+0x1c],bl
    1e16:	01 9c 06 08 00 00 17 	add    DWORD PTR [esi+eax*1+0x17000008],ebx
    1e1d:	70 69                	jo     1e88 <sysEnter_Vector-0x12e178>
    1e1f:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1e22:	e7 a1                	out    0xa1,eax
    1e24:	00 00                	add    BYTE PTR [eax],al
    1e26:	00 02                	add    BYTE PTR [edx],al
    1e28:	91                   	xchg   ecx,eax
    1e29:	00 00                	add    BYTE PTR [eax],al
    1e2b:	15 87 09 00 00       	adc    eax,0x987
    1e30:	01 ed                	add    ebp,ebp
    1e32:	71 1b                	jno    1e4f <sysEnter_Vector-0x12e1b1>
    1e34:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    1e3a:	01 9c 2a 08 00 00 0d 	add    DWORD PTR [edx+ebp*1+0xd000008],ebx
    1e41:	8c 09                	mov    WORD PTR [ecx],cs
    1e43:	00 00                	add    BYTE PTR [eax],al
    1e45:	01 ed                	add    ebp,ebp
    1e47:	4f                   	dec    edi
    1e48:	00 00                	add    BYTE PTR [eax],al
    1e4a:	00 02                	add    BYTE PTR [edx],al
    1e4c:	91                   	xchg   ecx,eax
    1e4d:	00 00                	add    BYTE PTR [eax],al
    1e4f:	11 e8                	adc    eax,ebp
    1e51:	08 00                	or     BYTE PTR [eax],al
    1e53:	00 01                	add    BYTE PTR [ecx],al
    1e55:	f2 74 00             	repnz je 1e58 <sysEnter_Vector-0x12e1a8>
    1e58:	00 00                	add    BYTE PTR [eax],al
    1e5a:	91                   	xchg   ecx,eax
    1e5b:	1b 00                	sbb    eax,DWORD PTR [eax]
    1e5d:	9f                   	lahf   
    1e5e:	20 00                	and    BYTE PTR [eax],al
    1e60:	00 00                	add    BYTE PTR [eax],al
    1e62:	01 9c 60 08 00 00 17 	add    DWORD PTR [eax+eiz*2+0x17000008],ebx
    1e69:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    1e6c:	00 01                	add    BYTE PTR [ecx],al
    1e6e:	f2 74 00             	repnz je 1e71 <sysEnter_Vector-0x12e18f>
    1e71:	00 00                	add    BYTE PTR [eax],al
    1e73:	02 91 00 0d da 06    	add    dl,BYTE PTR [ecx+0x6da0d00]
    1e79:	00 00                	add    BYTE PTR [eax],al
    1e7b:	01 f2                	add    edx,esi
    1e7d:	b7 00                	mov    bh,0x0
    1e7f:	00 00                	add    BYTE PTR [eax],al
    1e81:	02 91 04 00 0c 6e    	add    dl,BYTE PTR [ecx+0x6e0c0004]
    1e87:	09 00                	or     DWORD PTR [eax],eax
    1e89:	00 01                	add    BYTE PTR [ecx],al
    1e8b:	f7 b7 00 00 00 b1    	div    DWORD PTR [edi-0x4f000000]
    1e91:	1b 00                	sbb    eax,DWORD PTR [eax]
    1e93:	9f                   	lahf   
    1e94:	44                   	inc    esp
    1e95:	01 00                	add    DWORD PTR [eax],eax
    1e97:	00 01                	add    BYTE PTR [ecx],al
    1e99:	9c                   	pushf  
    1e9a:	3f                   	aas    
    1e9b:	09 00                	or     DWORD PTR [eax],eax
    1e9d:	00 0d 98 06 00 00    	add    BYTE PTR ds:0x698,cl
    1ea3:	01 f7                	add    edi,esi
    1ea5:	74 00                	je     1ea7 <sysEnter_Vector-0x12e159>
    1ea7:	00 00                	add    BYTE PTR [eax],al
    1ea9:	02 91 00 0d 82 09    	add    dl,BYTE PTR [ecx+0x9820d00]
    1eaf:	00 00                	add    BYTE PTR [eax],al
    1eb1:	01 f7                	add    edi,esi
    1eb3:	e4 06                	in     al,0x6
    1eb5:	00 00                	add    BYTE PTR [eax],al
    1eb7:	02 91 04 0d 93 08    	add    dl,BYTE PTR [ecx+0x8930d04]
    1ebd:	00 00                	add    BYTE PTR [eax],al
    1ebf:	01 f7                	add    edi,esi
    1ec1:	b7 00                	mov    bh,0x0
    1ec3:	00 00                	add    BYTE PTR [eax],al
    1ec5:	02 91 08 13 70 00    	add    dl,BYTE PTR [ecx+0x701308]
    1ecb:	01 f9                	add    ecx,edi
    1ecd:	74 00                	je     1ecf <sysEnter_Vector-0x12e131>
    1ecf:	00 00                	add    BYTE PTR [eax],al
    1ed1:	02 91 74 0e c0 07    	add    dl,BYTE PTR [ecx+0x7c00e74]
    1ed7:	00 00                	add    BYTE PTR [eax],al
    1ed9:	01 f9                	add    ecx,edi
    1edb:	74 00                	je     1edd <sysEnter_Vector-0x12e123>
    1edd:	00 00                	add    BYTE PTR [eax],al
    1edf:	02 91 70 13 63 00    	add    dl,BYTE PTR [ecx+0x631370]
    1ee5:	01 fa                	add    edx,edi
    1ee7:	4f                   	dec    edi
    1ee8:	00 00                	add    BYTE PTR [eax],al
    1eea:	00 02                	add    BYTE PTR [edx],al
    1eec:	91                   	xchg   ecx,eax
    1eed:	64 08 33             	or     BYTE PTR fs:[ebx],dh
    1ef0:	09 00                	or     DWORD PTR [eax],eax
    1ef2:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    1ef5:	00 00                	add    BYTE PTR [eax],al
    1ef7:	00 01                	add    BYTE PTR [ecx],al
    1ef9:	fb                   	sti    
    1efa:	ec                   	in     al,dx
    1efb:	08 00                	or     BYTE PTR [eax],al
    1efd:	00 09                	add    BYTE PTR [ecx],cl
    1eff:	2e 09 00             	or     DWORD PTR cs:[eax],eax
    1f02:	00 00                	add    BYTE PTR [eax],al
    1f04:	09 8b 08 00 00 01    	or     DWORD PTR [ebx+0x1000008],ecx
    1f0a:	09 3a                	or     DWORD PTR [edx],edi
    1f0c:	09 00                	or     DWORD PTR [eax],eax
    1f0e:	00 02                	add    BYTE PTR [edx],al
    1f10:	00 0e                	add    BYTE PTR [esi],cl
    1f12:	d8 07                	fadd   DWORD PTR [edi]
    1f14:	00 00                	add    BYTE PTR [eax],al
    1f16:	01 fb                	add    ebx,edi
    1f18:	c9                   	leave  
    1f19:	08 00                	or     BYTE PTR [eax],al
    1f1b:	00 02                	add    BYTE PTR [edx],al
    1f1d:	91                   	xchg   ecx,eax
    1f1e:	6c                   	ins    BYTE PTR es:[edi],dx
    1f1f:	0e                   	push   cs
    1f20:	55                   	push   ebp
    1f21:	09 00                	or     DWORD PTR [eax],eax
    1f23:	00 01                	add    BYTE PTR [ecx],al
    1f25:	fc                   	cld    
    1f26:	b7 00                	mov    bh,0x0
    1f28:	00 00                	add    BYTE PTR [eax],al
    1f2a:	02 91 68 18 fd 1b    	add    dl,BYTE PTR [ecx+0x1bfd1868]
    1f30:	00 9f 0e 00 00 00    	add    BYTE PTR [edi+0xe],bl
    1f36:	25 09 00 00 19       	and    eax,0x19000009
    1f3b:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1f3c:	08 00                	or     BYTE PTR [eax],al
    1f3e:	00 01                	add    BYTE PTR [ecx],al
    1f40:	02 01                	add    al,BYTE PTR [ecx]
    1f42:	ce                   	into   
    1f43:	01 00                	add    DWORD PTR [eax],eax
    1f45:	00 02                	add    BYTE PTR [edx],al
    1f47:	91                   	xchg   ecx,eax
    1f48:	63 00                	arpl   WORD PTR [eax],ax
    1f4a:	14 6c                	adc    al,0x6c
    1f4c:	1c 00                	sbb    al,0x0
    1f4e:	9f                   	lahf   
    1f4f:	0e                   	push   cs
    1f50:	00 00                	add    BYTE PTR [eax],al
    1f52:	00 19                	add    BYTE PTR [ecx],bl
    1f54:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1f55:	08 00                	or     BYTE PTR [eax],al
    1f57:	00 01                	add    BYTE PTR [ecx],al
    1f59:	18 01                	sbb    BYTE PTR [ecx],al
    1f5b:	ce                   	into   
    1f5c:	01 00                	add    DWORD PTR [eax],eax
    1f5e:	00 02                	add    BYTE PTR [edx],al
    1f60:	91                   	xchg   ecx,eax
    1f61:	62 00                	bound  eax,QWORD PTR [eax]
    1f63:	00 1a                	add    BYTE PTR [edx],bl
    1f65:	f0 07                	lock pop es
    1f67:	00 00                	add    BYTE PTR [eax],al
    1f69:	01 27                	add    DWORD PTR [edi],esp
    1f6b:	01 b7 00 00 00 f5    	add    DWORD PTR [edi-0xb000000],esi
    1f71:	1c 00                	sbb    al,0x0
    1f73:	9f                   	lahf   
    1f74:	20 00                	and    BYTE PTR [eax],al
    1f76:	00 00                	add    BYTE PTR [eax],al
    1f78:	01 9c 87 09 00 00 1b 	add    DWORD PTR [edi+eax*4+0x1b000009],ebx
    1f7f:	98                   	cwde   
    1f80:	06                   	push   es
    1f81:	00 00                	add    BYTE PTR [eax],al
    1f83:	01 27                	add    DWORD PTR [edi],esp
    1f85:	01 74 00 00          	add    DWORD PTR [eax+eax*1+0x0],esi
    1f89:	00 02                	add    BYTE PTR [edx],al
    1f8b:	91                   	xchg   ecx,eax
    1f8c:	00 1b                	add    BYTE PTR [ebx],bl
    1f8e:	82                   	(bad)  
    1f8f:	09 00                	or     DWORD PTR [eax],eax
    1f91:	00 01                	add    BYTE PTR [ecx],al
    1f93:	27                   	daa    
    1f94:	01 e4                	add    esp,esp
    1f96:	06                   	push   es
    1f97:	00 00                	add    BYTE PTR [eax],al
    1f99:	02 91 04 1b 93 08    	add    dl,BYTE PTR [ecx+0x8931b04]
    1f9f:	00 00                	add    BYTE PTR [eax],al
    1fa1:	01 27                	add    DWORD PTR [edi],esp
    1fa3:	01 b7 00 00 00 02    	add    DWORD PTR [edi+0x2000000],esi
    1fa9:	91                   	xchg   ecx,eax
    1faa:	08 00                	or     BYTE PTR [eax],al
    1fac:	1a 47 08             	sbb    al,BYTE PTR [edi+0x8]
    1faf:	00 00                	add    BYTE PTR [eax],al
    1fb1:	01 2c 01             	add    DWORD PTR [ecx+eax*1],ebp
    1fb4:	e4 06                	in     al,0x6
    1fb6:	00 00                	add    BYTE PTR [eax],al
    1fb8:	15 1d 00 9f fd       	adc    eax,0xfd9f001d
    1fbd:	02 00                	add    al,BYTE PTR [eax]
    1fbf:	00 01                	add    BYTE PTR [ecx],al
    1fc1:	9c                   	pushf  
    1fc2:	76 0a                	jbe    1fce <sysEnter_Vector-0x12e032>
    1fc4:	00 00                	add    BYTE PTR [eax],al
    1fc6:	1b 5a 09             	sbb    ebx,DWORD PTR [edx+0x9]
    1fc9:	00 00                	add    BYTE PTR [eax],al
    1fcb:	01 2c 01             	add    DWORD PTR [ecx+eax*1],ebp
    1fce:	c3                   	ret    
    1fcf:	01 00                	add    DWORD PTR [eax],eax
    1fd1:	00 02                	add    BYTE PTR [edx],al
    1fd3:	91                   	xchg   ecx,eax
    1fd4:	00 1b                	add    BYTE PTR [ebx],bl
    1fd6:	55                   	push   ebp
    1fd7:	09 00                	or     DWORD PTR [eax],eax
    1fd9:	00 01                	add    BYTE PTR [ecx],al
    1fdb:	2c 01                	sub    al,0x1
    1fdd:	76 0a                	jbe    1fe9 <sysEnter_Vector-0x12e017>
    1fdf:	00 00                	add    BYTE PTR [eax],al
    1fe1:	02 91 04 19 82 09    	add    dl,BYTE PTR [ecx+0x9821904]
    1fe7:	00 00                	add    BYTE PTR [eax],al
    1fe9:	01 2e                	add    DWORD PTR [esi],ebp
    1feb:	01 e4                	add    esp,esp
    1fed:	06                   	push   es
    1fee:	00 00                	add    BYTE PTR [eax],al
    1ff0:	02 91 54 1c 63 6d    	add    dl,BYTE PTR [ecx+0x6d631c54]
    1ff6:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1ff9:	2f                   	das    
    1ffa:	01 7c 0a 00          	add    DWORD PTR [edx+ecx*1+0x0],edi
    1ffe:	00 03                	add    BYTE PTR [ebx],al
    2000:	91                   	xchg   ecx,eax
    2001:	d0                   	(bad)  
    2002:	77 19                	ja     201d <sysEnter_Vector-0x12dfe3>
    2004:	fb                   	sti    
    2005:	07                   	pop    es
    2006:	00 00                	add    BYTE PTR [eax],al
    2008:	01 30                	add    DWORD PTR [eax],esi
    200a:	01 74 00 00          	add    DWORD PTR [eax+eax*1+0x0],esi
    200e:	00 02                	add    BYTE PTR [edx],al
    2010:	91                   	xchg   ecx,eax
    2011:	6c                   	ins    BYTE PTR es:[edi],dx
    2012:	19 8f 07 00 00 01    	sbb    DWORD PTR [edi+0x1000007],ecx
    2018:	30 01                	xor    BYTE PTR [ecx],al
    201a:	74 00                	je     201c <sysEnter_Vector-0x12dfe4>
    201c:	00 00                	add    BYTE PTR [eax],al
    201e:	02 91 68 19 af 07    	add    dl,BYTE PTR [ecx+0x7af1968]
    2024:	00 00                	add    BYTE PTR [eax],al
    2026:	01 30                	add    DWORD PTR [eax],esi
    2028:	01 74 00 00          	add    DWORD PTR [eax+eax*1+0x0],esi
    202c:	00 02                	add    BYTE PTR [edx],al
    202e:	91                   	xchg   ecx,eax
    202f:	5c                   	pop    esp
    2030:	19 38                	sbb    DWORD PTR [eax],edi
    2032:	08 00                	or     BYTE PTR [eax],al
    2034:	00 01                	add    BYTE PTR [ecx],al
    2036:	31 01                	xor    DWORD PTR [ecx],eax
    2038:	8d 0a                	lea    ecx,[edx]
    203a:	00 00                	add    BYTE PTR [eax],al
    203c:	03 91 ce 77 19 b8    	add    edx,DWORD PTR [ecx-0x47e68832]
    2042:	07                   	pop    es
    2043:	00 00                	add    BYTE PTR [eax],al
    2045:	01 4a 01             	add    DWORD PTR [edx+0x1],ecx
    2048:	4f                   	dec    edi
    2049:	00 00                	add    BYTE PTR [eax],al
    204b:	00 02                	add    BYTE PTR [edx],al
    204d:	91                   	xchg   ecx,eax
    204e:	64                   	fs
    204f:	18 cc                	sbb    ah,cl
    2051:	1d 00 9f 40 00       	sbb    eax,0x409f00
    2056:	00 00                	add    BYTE PTR [eax],al
    2058:	47                   	inc    edi
    2059:	0a 00                	or     al,BYTE PTR [eax]
    205b:	00 19                	add    BYTE PTR [ecx],bl
    205d:	04 08                	add    al,0x8
    205f:	00 00                	add    BYTE PTR [eax],al
    2061:	01 3c 01             	add    DWORD PTR [ecx+eax*1],edi
    2064:	74 00                	je     2066 <sysEnter_Vector-0x12df9a>
    2066:	00 00                	add    BYTE PTR [eax],al
    2068:	02 91 58 00 14 7c    	add    dl,BYTE PTR [ecx+0x7c140058]
    206e:	1e                   	push   ds
    206f:	00 9f 8c 01 00 00    	add    BYTE PTR [edi+0x18c],bl
    2075:	1c 63                	sbb    al,0x63
    2077:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2078:	74 00                	je     207a <sysEnter_Vector-0x12df86>
    207a:	01 4c 01 4f          	add    DWORD PTR [ecx+eax*1+0x4f],ecx
    207e:	00 00                	add    BYTE PTR [eax],al
    2080:	00 02                	add    BYTE PTR [edx],al
    2082:	91                   	xchg   ecx,eax
    2083:	60                   	pusha  
    2084:	1d 00 00 00 00       	sbb    eax,0x0
    2089:	19 04 08             	sbb    DWORD PTR [eax+ecx*1],eax
    208c:	00 00                	add    BYTE PTR [eax],al
    208e:	01 52 01             	add    DWORD PTR [edx+0x1],edx
    2091:	74 00                	je     2093 <sysEnter_Vector-0x12df6d>
    2093:	00 00                	add    BYTE PTR [eax],al
    2095:	02 91 50 00 00 00    	add    dl,BYTE PTR [ecx+0x50]
    209b:	05 04 4f 00 00       	add    eax,0x4f04
    20a0:	00 1e                	add    BYTE PTR [esi],bl
    20a2:	7a 00                	jp     20a4 <sysEnter_Vector-0x12df5c>
    20a4:	00 00                	add    BYTE PTR [eax],al
    20a6:	8d 0a                	lea    ecx,[edx]
    20a8:	00 00                	add    BYTE PTR [eax],al
    20aa:	1f                   	pop    ds
    20ab:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    20ae:	00 ff                	add    bh,bh
    20b0:	03 00                	add    eax,DWORD PTR [eax]
    20b2:	1e                   	push   ds
    20b3:	7a 00                	jp     20b5 <sysEnter_Vector-0x12df4b>
    20b5:	00 00                	add    BYTE PTR [eax],al
    20b7:	9d                   	popf   
    20b8:	0a 00                	or     al,BYTE PTR [eax]
    20ba:	00 20                	add    BYTE PTR [eax],ah
    20bc:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    20bf:	00 01                	add    BYTE PTR [ecx],al
    20c1:	00 1a                	add    BYTE PTR [edx],bl
    20c3:	09 08                	or     DWORD PTR [eax],ecx
    20c5:	00 00                	add    BYTE PTR [eax],al
    20c7:	01 6a 01             	add    DWORD PTR [edx+0x1],ebp
    20ca:	e4 06                	in     al,0x6
    20cc:	00 00                	add    BYTE PTR [eax],al
    20ce:	12 20                	adc    ah,BYTE PTR [eax]
    20d0:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
    20d6:	01 9c d6 0a 00 00 1b 	add    DWORD PTR [esi+edx*8+0x1b00000a],ebx
    20dd:	5a                   	pop    edx
    20de:	09 00                	or     DWORD PTR [eax],eax
    20e0:	00 01                	add    BYTE PTR [ecx],al
    20e2:	6a 01                	push   0x1
    20e4:	74 00                	je     20e6 <sysEnter_Vector-0x12df1a>
    20e6:	00 00                	add    BYTE PTR [eax],al
    20e8:	02 91 00 1b 55 09    	add    dl,BYTE PTR [ecx+0x9551b00]
    20ee:	00 00                	add    BYTE PTR [eax],al
    20f0:	01 6a 01             	add    DWORD PTR [edx+0x1],ebp
    20f3:	76 0a                	jbe    20ff <sysEnter_Vector-0x12df01>
    20f5:	00 00                	add    BYTE PTR [eax],al
    20f7:	02 91 04 00 1a 93    	add    dl,BYTE PTR [ecx-0x6ce5fffc]
    20fd:	09 00                	or     DWORD PTR [eax],eax
    20ff:	00 01                	add    BYTE PTR [ecx],al
    2101:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2102:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    2105:	00 00                	add    BYTE PTR [eax],al
    2107:	35 20 00 9f 23       	xor    eax,0x239f0020
    210c:	00 00                	add    BYTE PTR [eax],al
    210e:	00 01                	add    BYTE PTR [ecx],al
    2110:	9c                   	pushf  
    2111:	0f 0b                	ud2    
    2113:	00 00                	add    BYTE PTR [eax],al
    2115:	21 73 74             	and    DWORD PTR [ebx+0x74],esi
    2118:	64 00 01             	add    BYTE PTR fs:[ecx],al
    211b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    211c:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    211f:	00 00                	add    BYTE PTR [eax],al
    2121:	02 91 00 1b b7 09    	add    dl,BYTE PTR [ecx+0x9b71b00]
    2127:	00 00                	add    BYTE PTR [eax],al
    2129:	01 6f 01             	add    DWORD PTR [edi+0x1],ebp
    212c:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    2131:	91                   	xchg   ecx,eax
    2132:	04 00                	add    al,0x0
    2134:	22 ad 09 00 00 01    	and    ch,BYTE PTR [ebp+0x1000009]
    213a:	74 01                	je     213d <sysEnter_Vector-0x12dec3>
    213c:	58                   	pop    eax
    213d:	20 00                	and    BYTE PTR [eax],al
    213f:	9f                   	lahf   
    2140:	1d 00 00 00 01       	sbb    eax,0x1000000
    2145:	9c                   	pushf  
    2146:	23 78 00             	and    edi,DWORD PTR [eax+0x0]
    2149:	00 00                	add    BYTE PTR [eax],al
    214b:	06                   	push   es
    214c:	33 e4                	xor    esp,esp
    214e:	06                   	push   es
    214f:	00 00                	add    BYTE PTR [eax],al
    2151:	05 03 60 7c 00       	add    eax,0x7c6003
    2156:	9f                   	lahf   
    2157:	23 10                	and    edx,DWORD PTR [eax]
    2159:	02 00                	add    al,BYTE PTR [eax]
    215b:	00 07                	add    BYTE PTR [edi],al
    215d:	35 43 0b 00 00       	xor    eax,0xb43
    2162:	05 03 70 7c 00       	add    eax,0x7c7003
    2167:	9f                   	lahf   
    2168:	05 04 ac 00 00       	add    eax,0xac04
    216d:	00 23                	add    BYTE PTR [ebx],ah
    216f:	33 02                	xor    eax,DWORD PTR [edx]
    2171:	00 00                	add    BYTE PTR [eax],al
    2173:	07                   	pop    es
    2174:	36 a1 00 00 00 05    	mov    eax,ss:0x5000000
    217a:	03 6c 7c 00          	add    ebp,DWORD PTR [esp+edi*2+0x0]
    217e:	9f                   	lahf   
    217f:	23 9d 08 00 00 01    	and    ebx,DWORD PTR [ebp+0x1000008]
    2185:	0d ce 01 00 00       	or     eax,0x1ce
    218a:	05 03 84 7c 00       	add    eax,0x7c8403
    218f:	9f                   	lahf   
    2190:	23 0c 09             	and    ecx,DWORD PTR [ecx+ecx*1]
    2193:	00 00                	add    BYTE PTR [eax],al
    2195:	01 0e                	add    DWORD PTR [esi],ecx
    2197:	74 00                	je     2199 <sysEnter_Vector-0x12de67>
    2199:	00 00                	add    BYTE PTR [eax],al
    219b:	05 03 88 7c 00       	add    eax,0x7c8803
    21a0:	9f                   	lahf   
    21a1:	00 94 02 00 00 04 00 	add    BYTE PTR [edx+eax*1+0x40000],dl
    21a8:	bf 08 00 00 04       	mov    edi,0x4000008
    21ad:	01 c3                	add    ebx,eax
    21af:	00 00                	add    BYTE PTR [eax],al
    21b1:	00 0c 07             	add    BYTE PTR [edi+eax*1],cl
    21b4:	0a 00                	or     al,BYTE PTR [eax]
    21b6:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    21b9:	00 00                	add    BYTE PTR [eax],al
    21bb:	78 20                	js     21dd <sysEnter_Vector-0x12de23>
    21bd:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    21c3:	cd 09                	int    0x9
    21c5:	00 00                	add    BYTE PTR [eax],al
    21c7:	02 01                	add    al,BYTE PTR [ecx]
    21c9:	08 3f                	or     BYTE PTR [edi],bh
    21cb:	00 00                	add    BYTE PTR [eax],al
    21cd:	00 02                	add    BYTE PTR [edx],al
    21cf:	02 07                	add    al,BYTE PTR [edi]
    21d1:	0e                   	push   cs
    21d2:	00 00                	add    BYTE PTR [eax],al
    21d4:	00 02                	add    BYTE PTR [edx],al
    21d6:	04 07                	add    al,0x7
    21d8:	32 00                	xor    al,BYTE PTR [eax]
    21da:	00 00                	add    BYTE PTR [eax],al
    21dc:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    21df:	2d 00 00 00 02       	sub    eax,0x2000000
    21e4:	01 06                	add    DWORD PTR [esi],eax
    21e6:	41                   	inc    ecx
    21e7:	00 00                	add    BYTE PTR [eax],al
    21e9:	00 02                	add    BYTE PTR [edx],al
    21eb:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    21f1:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    21f8:	02 08                	add    cl,BYTE PTR [eax]
    21fa:	05 00 00 00 00       	add    eax,0x0
    21ff:	02 08                	add    cl,BYTE PTR [eax]
    2201:	07                   	pop    es
    2202:	28 00                	sub    BYTE PTR [eax],al
    2204:	00 00                	add    BYTE PTR [eax],al
    2206:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    220d:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2210:	2a 01                	sub    al,BYTE PTR [ecx]
    2212:	00 00                	add    BYTE PTR [eax],al
    2214:	04 04                	add    al,0x4
    2216:	05 04 7a 00 00       	add    eax,0x7a04
    221b:	00 02                	add    BYTE PTR [edx],al
    221d:	01 06                	add    DWORD PTR [esi],eax
    221f:	48                   	dec    eax
    2220:	00 00                	add    BYTE PTR [eax],al
    2222:	00 06                	add    BYTE PTR [esi],al
    2224:	45                   	inc    ebp
    2225:	02 00                	add    al,BYTE PTR [eax]
    2227:	00 02                	add    BYTE PTR [edx],al
    2229:	34 33                	xor    al,0x33
    222b:	00 00                	add    BYTE PTR [eax],al
    222d:	00 06                	add    BYTE PTR [esi],al
    222f:	91                   	xchg   ecx,eax
    2230:	02 00                	add    al,BYTE PTR [eax]
    2232:	00 03                	add    BYTE PTR [ebx],al
    2234:	d8 33                	fdiv   DWORD PTR [ebx]
    2236:	00 00                	add    BYTE PTR [eax],al
    2238:	00 02                	add    BYTE PTR [edx],al
    223a:	0c 04                	or     al,0x4
    223c:	ad                   	lods   eax,DWORD PTR ds:[esi]
    223d:	00 00                	add    BYTE PTR [eax],al
    223f:	00 07                	add    BYTE PTR [edi],al
    2241:	6b 03 00             	imul   eax,DWORD PTR [ebx],0x0
    2244:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    2247:	00 00                	add    BYTE PTR [eax],al
    2249:	00 04 15 98 01 00 00 	add    BYTE PTR [edx*1+0x198],al
    2250:	08 fd                	or     ch,bh
    2252:	03 00                	add    eax,DWORD PTR [eax]
    2254:	00 00                	add    BYTE PTR [eax],al
    2256:	08 42 04             	or     BYTE PTR [edx+0x4],al
    2259:	00 00                	add    BYTE PTR [eax],al
    225b:	01 08                	add    DWORD PTR [eax],ecx
    225d:	84 02                	test   BYTE PTR [edx],al
    225f:	00 00                	add    BYTE PTR [eax],al
    2261:	02 08                	add    cl,BYTE PTR [eax]
    2263:	4e                   	dec    esi
    2264:	03 00                	add    eax,DWORD PTR [eax]
    2266:	00 03                	add    BYTE PTR [ebx],al
    2268:	08 6a 02             	or     BYTE PTR [edx+0x2],ch
    226b:	00 00                	add    BYTE PTR [eax],al
    226d:	04 08                	add    al,0x8
    226f:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
    2273:	05 08 24 04 00       	add    eax,0x42408
    2278:	00 0a                	add    BYTE PTR [edx],cl
    227a:	08 8f 03 00 00 0b    	or     BYTE PTR [edi+0xb000003],cl
    2280:	08 d6                	or     dh,dl
    2282:	03 00                	add    eax,DWORD PTR [eax]
    2284:	00 0c 08             	add    BYTE PTR [eax+ecx*1],cl
    2287:	5c                   	pop    esp
    2288:	03 00                	add    eax,DWORD PTR [eax]
    228a:	00 0d 08 75 03 00    	add    BYTE PTR ds:0x37508,cl
    2290:	00 0e                	add    BYTE PTR [esi],cl
    2292:	08 77 02             	or     BYTE PTR [edi+0x2],dh
    2295:	00 00                	add    BYTE PTR [eax],al
    2297:	0f 08                	invd   
    2299:	b7 03                	mov    bh,0x3
    229b:	00 00                	add    BYTE PTR [eax],al
    229d:	10 08                	adc    BYTE PTR [eax],cl
    229f:	a9 04 00 00 11       	test   eax,0x11000004
    22a4:	08 87 04 00 00 4f    	or     BYTE PTR [edi+0x4f000004],al
    22aa:	08 5c 04 00          	or     BYTE PTR [esp+eax*1+0x0],bl
    22ae:	00 50 08             	add    BYTE PTR [eax+0x8],dl
    22b1:	f0 03 00             	lock add eax,DWORD PTR [eax]
    22b4:	00 59 08             	add    BYTE PTR [ecx+0x8],bl
    22b7:	96                   	xchg   esi,eax
    22b8:	04 00                	add    al,0x0
    22ba:	00 61 08             	add    BYTE PTR [ecx+0x8],ah
    22bd:	1b 03                	sbb    eax,DWORD PTR [ebx]
    22bf:	00 00                	add    BYTE PTR [eax],al
    22c1:	97                   	xchg   edi,eax
    22c2:	09 0d 04 00 00 63    	or     DWORD PTR ds:0x63000004,ecx
    22c8:	01 09                	add    DWORD PTR [ecx],ecx
    22ca:	e3 03                	jecxz  22cf <sysEnter_Vector-0x12dd31>
    22cc:	00 00                	add    BYTE PTR [eax],al
    22ce:	64 01 09             	add    DWORD PTR fs:[ecx],ecx
    22d1:	c6 04 00 00          	mov    BYTE PTR [eax+eax*1],0x0
    22d5:	65 01 09             	add    DWORD PTR gs:[ecx],ecx
    22d8:	f7 02 00 00 66 01    	test   DWORD PTR [edx],0x1660000
    22de:	09 d8                	or     eax,ebx
    22e0:	04 00                	add    al,0x0
    22e2:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    22e5:	09 82 03 00 00 68    	or     DWORD PTR [edx+0x68000003],eax
    22eb:	01 09                	add    DWORD PTR [ecx],ecx
    22ed:	b8 02 00 00 69       	mov    eax,0x69000002
    22f2:	01 09                	add    DWORD PTR [ecx],ecx
    22f4:	31 04 00             	xor    DWORD PTR [eax+eax*1],eax
    22f7:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    22fa:	09 0b                	or     DWORD PTR [ebx],ecx
    22fc:	03 00                	add    eax,DWORD PTR [eax]
    22fe:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    2301:	09 79 04             	or     DWORD PTR [ecx+0x4],edi
    2304:	00 00                	add    BYTE PTR [eax],al
    2306:	00 03                	add    BYTE PTR [ebx],al
    2308:	09 9c 03 00 00 01 03 	or     DWORD PTR [ebx+eax*1+0x3010000],ebx
    230f:	09 ab 03 00 00 02    	or     DWORD PTR [ebx+0x2000003],ebp
    2315:	03 09                	add    ecx,DWORD PTR [ecx]
    2317:	3e 03 00             	add    eax,DWORD PTR ds:[eax]
    231a:	00 03                	add    BYTE PTR [ebx],al
    231c:	03 09                	add    ecx,DWORD PTR [ecx]
    231e:	98                   	cwde   
    231f:	02 00                	add    al,BYTE PTR [eax]
    2321:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    2324:	09 e7                	or     edi,esp
    2326:	02 00                	add    al,BYTE PTR [eax]
    2328:	00 05 03 09 2f 03    	add    BYTE PTR ds:0x32f0903,al
    232e:	00 00                	add    BYTE PTR [eax],al
    2330:	06                   	push   es
    2331:	03 09                	add    ecx,DWORD PTR [ecx]
    2333:	c4 03                	les    eax,FWORD PTR [ebx]
    2335:	00 00                	add    BYTE PTR [eax],al
    2337:	00 09                	add    BYTE PTR [ecx],cl
    2339:	00 0a                	add    BYTE PTR [edx],cl
    233b:	e7 09                	out    0x9,eax
    233d:	00 00                	add    BYTE PTR [eax],al
    233f:	18 04 3d ec 01 00 00 	sbb    BYTE PTR [edi*1+0x1ec],al
    2346:	0b e2                	or     esp,edx
    2348:	09 00                	or     DWORD PTR [eax],eax
    234a:	00 04 3f             	add    BYTE PTR [edi+edi*1],al
    234d:	72 00                	jb     234f <sysEnter_Vector-0x12dcb1>
    234f:	00 00                	add    BYTE PTR [eax],al
    2351:	00 0c 6c             	add    BYTE PTR [esp+ebp*2],cl
    2354:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    2356:	00 04 40             	add    BYTE PTR [eax+eax*2],al
    2359:	4f                   	dec    edi
    235a:	00 00                	add    BYTE PTR [eax],al
    235c:	00 04 0b             	add    BYTE PTR [ebx+ecx*1],al
    235f:	16                   	push   ss
    2360:	0a 00                	or     al,BYTE PTR [eax]
    2362:	00 04 41             	add    BYTE PTR [ecx+eax*2],al
    2365:	4f                   	dec    edi
    2366:	00 00                	add    BYTE PTR [eax],al
    2368:	00 08                	add    BYTE PTR [eax],cl
    236a:	0b 01                	or     eax,DWORD PTR [ecx]
    236c:	0a 00                	or     al,BYTE PTR [eax]
    236e:	00 04 42             	add    BYTE PTR [edx+eax*2],al
    2371:	4f                   	dec    edi
    2372:	00 00                	add    BYTE PTR [eax],al
    2374:	00 0c 0c             	add    BYTE PTR [esp+ecx*1],cl
    2377:	66                   	data16
    2378:	64 00 04 43          	add    BYTE PTR fs:[ebx+eax*2],al
    237c:	4f                   	dec    edi
    237d:	00 00                	add    BYTE PTR [eax],al
    237f:	00 10                	add    BYTE PTR [eax],dl
    2381:	0b 6b 10             	or     ebp,DWORD PTR [ebx+0x10]
    2384:	00 00                	add    BYTE PTR [eax],al
    2386:	04 44                	add    al,0x44
    2388:	4f                   	dec    edi
    2389:	00 00                	add    BYTE PTR [eax],al
    238b:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
    238e:	06                   	push   es
    238f:	20 0a                	and    BYTE PTR [edx],cl
    2391:	00 00                	add    BYTE PTR [eax],al
    2393:	04 45                	add    al,0x45
    2395:	98                   	cwde   
    2396:	01 00                	add    DWORD PTR [eax],eax
    2398:	00 06                	add    BYTE PTR [esi],al
    239a:	f4                   	hlt    
    239b:	09 00                	or     DWORD PTR [eax],eax
    239d:	00 05 15 64 00 00    	add    BYTE PTR ds:0x6415,al
    23a3:	00 0d 1b 0a 00 00    	add    BYTE PTR ds:0xa1b,cl
    23a9:	01 0d 72 00 00 00    	add    DWORD PTR ds:0x72,ecx
    23af:	78 20                	js     23d1 <sysEnter_Vector-0x12dc2f>
    23b1:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    23b7:	01 9c 6f 02 00 00 0e 	add    DWORD PTR [edi+ebp*2+0xe000002],ebx
    23be:	e2 09                	loop   23c9 <sysEnter_Vector-0x12dc37>
    23c0:	00 00                	add    BYTE PTR [eax],al
    23c2:	01 0d 72 00 00 00    	add    DWORD PTR ds:0x72,ecx
    23c8:	02 91 00 0f 6c 65    	add    dl,BYTE PTR [ecx+0x656c0f00]
    23ce:	6e                   	outs   dx,BYTE PTR ds:[esi]
    23cf:	00 01                	add    BYTE PTR [ecx],al
    23d1:	0d 8c 00 00 00       	or     eax,0x8c
    23d6:	02 91 04 0e 16 0a    	add    dl,BYTE PTR [ecx+0xa160e04]
    23dc:	00 00                	add    BYTE PTR [eax],al
    23de:	01 0d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ecx
    23e4:	02 91 08 0e 01 0a    	add    dl,BYTE PTR [ecx+0xa010e08]
    23ea:	00 00                	add    BYTE PTR [eax],al
    23ec:	01 0d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ecx
    23f2:	02 91 0c 0f 66 64    	add    dl,BYTE PTR [ecx+0x64660f0c]
    23f8:	00 01                	add    BYTE PTR [ecx],al
    23fa:	0d 4f 00 00 00       	or     eax,0x4f
    23ff:	02 91 10 0e 6b 10    	add    dl,BYTE PTR [ecx+0x106b0e10]
    2405:	00 00                	add    BYTE PTR [eax],al
    2407:	01 0d f7 01 00 00    	add    DWORD PTR ds:0x1f7,ecx
    240d:	02 91 14 00 10 78    	add    dl,BYTE PTR [ecx+0x78100014]
    2413:	00 00                	add    BYTE PTR [eax],al
    2415:	00 06                	add    BYTE PTR [esi],al
    2417:	33 80 02 00 00 05    	xor    eax,DWORD PTR [eax+0x5000002]
    241d:	03 60 7c             	add    esp,DWORD PTR [eax+0x7c]
    2420:	00 9f 05 04 74 00    	add    BYTE PTR [edi+0x740405],bl
    2426:	00 00                	add    BYTE PTR [eax],al
    2428:	10 fa                	adc    dl,bh
    242a:	09 00                	or     DWORD PTR [eax],eax
    242c:	00 01                	add    BYTE PTR [ecx],al
    242e:	0b ec                	or     ebp,esp
    2430:	01 00                	add    DWORD PTR [eax],eax
    2432:	00 05 03 8c 7c 00    	add    BYTE PTR ds:0x7c8c03,al
    2438:	9f                   	lahf   
    2439:	00 ec                	add    ah,ch
    243b:	04 00                	add    al,0x0
    243d:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2440:	a1 09 00 00 04       	mov    eax,ds:0x4000009
    2445:	01 c3                	add    ebx,eax
    2447:	00 00                	add    BYTE PTR [eax],al
    2449:	00 0c 26             	add    BYTE PTR [esi+eiz*1],cl
    244c:	0b 00                	or     eax,DWORD PTR [eax]
    244e:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    2451:	00 00                	add    BYTE PTR [eax],al
    2453:	ec                   	in     al,dx
    2454:	20 00                	and    BYTE PTR [eax],al
    2456:	9f                   	lahf   
    2457:	45                   	inc    ebp
    2458:	06                   	push   es
    2459:	00 00                	add    BYTE PTR [eax],al
    245b:	c8 0a 00 00          	enter  0xa,0x0
    245f:	02 01                	add    al,BYTE PTR [ecx]
    2461:	06                   	push   es
    2462:	41                   	inc    ecx
    2463:	00 00                	add    BYTE PTR [eax],al
    2465:	00 02                	add    BYTE PTR [edx],al
    2467:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    246d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2474:	02 08                	add    cl,BYTE PTR [eax]
    2476:	05 00 00 00 00       	add    eax,0x0
    247b:	04 cf                	add    al,0xcf
    247d:	06                   	push   es
    247e:	00 00                	add    BYTE PTR [eax],al
    2480:	02 2e                	add    ch,BYTE PTR [esi]
    2482:	4c                   	dec    esp
    2483:	00 00                	add    BYTE PTR [eax],al
    2485:	00 02                	add    BYTE PTR [edx],al
    2487:	01 08                	add    DWORD PTR [eax],ecx
    2489:	3f                   	aas    
    248a:	00 00                	add    BYTE PTR [eax],al
    248c:	00 04 89             	add    BYTE PTR [ecx+ecx*4],al
    248f:	05 00 00 02 31       	add    eax,0x31020000
    2494:	5e                   	pop    esi
    2495:	00 00                	add    BYTE PTR [eax],al
    2497:	00 02                	add    BYTE PTR [edx],al
    2499:	02 07                	add    al,BYTE PTR [edi]
    249b:	0e                   	push   cs
    249c:	00 00                	add    BYTE PTR [eax],al
    249e:	00 04 45 02 00 00 02 	add    BYTE PTR [eax*2+0x2000002],al
    24a5:	34 70                	xor    al,0x70
    24a7:	00 00                	add    BYTE PTR [eax],al
    24a9:	00 02                	add    BYTE PTR [edx],al
    24ab:	04 07                	add    al,0x7
    24ad:	32 00                	xor    al,BYTE PTR [eax]
    24af:	00 00                	add    BYTE PTR [eax],al
    24b1:	02 08                	add    cl,BYTE PTR [eax]
    24b3:	07                   	pop    es
    24b4:	28 00                	sub    BYTE PTR [eax],al
    24b6:	00 00                	add    BYTE PTR [eax],al
    24b8:	04 01                	add    al,0x1
    24ba:	02 00                	add    al,BYTE PTR [eax]
    24bc:	00 02                	add    BYTE PTR [edx],al
    24be:	56                   	push   esi
    24bf:	70 00                	jo     24c1 <sysEnter_Vector-0x12db3f>
    24c1:	00 00                	add    BYTE PTR [eax],al
    24c3:	04 91                	add    al,0x91
    24c5:	02 00                	add    al,BYTE PTR [eax]
    24c7:	00 03                	add    BYTE PTR [ebx],al
    24c9:	d8 70 00             	fdiv   DWORD PTR [eax+0x0]
    24cc:	00 00                	add    BYTE PTR [eax],al
    24ce:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    24d5:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    24d8:	ad                   	lods   eax,DWORD PTR ds:[esi]
    24d9:	00 00                	add    BYTE PTR [eax],al
    24db:	00 02                	add    BYTE PTR [edx],al
    24dd:	01 06                	add    DWORD PTR [esi],eax
    24df:	48                   	dec    eax
    24e0:	00 00                	add    BYTE PTR [eax],al
    24e2:	00 05 a5 0a 00 00    	add    BYTE PTR ds:0xaa5,al
    24e8:	18 04 2f             	sbb    BYTE PTR [edi+ebp*1],al
    24eb:	0a 01                	or     al,BYTE PTR [ecx]
    24ed:	00 00                	add    BYTE PTR [eax],al
    24ef:	06                   	push   es
    24f0:	71 0a                	jno    24fc <sysEnter_Vector-0x12db04>
    24f2:	00 00                	add    BYTE PTR [eax],al
    24f4:	04 31                	add    al,0x31
    24f6:	65 00 00             	add    BYTE PTR gs:[eax],al
    24f9:	00 00                	add    BYTE PTR [eax],al
    24fb:	07                   	pop    es
    24fc:	6c                   	ins    BYTE PTR es:[edi],dx
    24fd:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    24ff:	00 04 32             	add    BYTE PTR [edx+esi*1],al
    2502:	65 00 00             	add    BYTE PTR gs:[eax],al
    2505:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    2508:	9f                   	lahf   
    2509:	0a 00                	or     al,BYTE PTR [eax]
    250b:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    250e:	0a 01                	or     al,BYTE PTR [ecx]
    2510:	00 00                	add    BYTE PTR [eax],al
    2512:	08 06                	or     BYTE PTR [esi],al
    2514:	11 0b                	adc    DWORD PTR [ebx],ecx
    2516:	00 00                	add    BYTE PTR [eax],al
    2518:	04 34                	add    al,0x34
    251a:	53                   	push   ebx
    251b:	00 00                	add    BYTE PTR [eax],al
    251d:	00 0a                	add    BYTE PTR [edx],cl
    251f:	06                   	push   es
    2520:	98                   	cwde   
    2521:	0a 00                	or     al,BYTE PTR [eax]
    2523:	00 04 35 41 00 00 00 	add    BYTE PTR [esi*1+0x41],al
    252a:	0c 06                	or     al,0x6
    252c:	37                   	aaa    
    252d:	0a 00                	or     al,BYTE PTR [eax]
    252f:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    2532:	11 01                	adc    DWORD PTR [ecx],eax
    2534:	00 00                	add    BYTE PTR [eax],al
    2536:	10 06                	adc    BYTE PTR [esi],al
    2538:	53                   	push   ebx
    2539:	0a 00                	or     al,BYTE PTR [eax]
    253b:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    253e:	11 01                	adc    DWORD PTR [ecx],eax
    2540:	00 00                	add    BYTE PTR [eax],al
    2542:	14 00                	adc    al,0x0
    2544:	02 01                	add    al,BYTE PTR [ecx]
    2546:	02 6a 06             	add    ch,BYTE PTR [edx+0x6]
    2549:	00 00                	add    BYTE PTR [eax],al
    254b:	08 04 a9             	or     BYTE PTR [ecx+ebp*4],al
    254e:	00 00                	add    BYTE PTR [eax],al
    2550:	00 04 58             	add    BYTE PTR [eax+ebx*2],al
    2553:	0a 00                	or     al,BYTE PTR [eax]
    2555:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    2558:	a9 00 00 00 02       	test   eax,0x2000000
    255d:	04 07                	add    al,0x7
    255f:	2d 00 00 00 02       	sub    eax,0x2000000
    2564:	04 07                	add    al,0x7
    2566:	2a 01                	sub    al,BYTE PTR [ecx]
    2568:	00 00                	add    BYTE PTR [eax],al
    256a:	09 04 08             	or     DWORD PTR [eax+ecx*1],eax
    256d:	04 a2                	add    al,0xa2
    256f:	00 00                	add    BYTE PTR [eax],al
    2571:	00 0a                	add    BYTE PTR [edx],cl
    2573:	6b 03 00             	imul   eax,DWORD PTR [ebx],0x0
    2576:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    2579:	00 00                	add    BYTE PTR [eax],al
    257b:	00 06                	add    BYTE PTR [esi],al
    257d:	15 32 02 00 00       	adc    eax,0x232
    2582:	0b fd                	or     edi,ebp
    2584:	03 00                	add    eax,DWORD PTR [eax]
    2586:	00 00                	add    BYTE PTR [eax],al
    2588:	0b 42 04             	or     eax,DWORD PTR [edx+0x4]
    258b:	00 00                	add    BYTE PTR [eax],al
    258d:	01 0b                	add    DWORD PTR [ebx],ecx
    258f:	84 02                	test   BYTE PTR [edx],al
    2591:	00 00                	add    BYTE PTR [eax],al
    2593:	02 0b                	add    cl,BYTE PTR [ebx]
    2595:	4e                   	dec    esi
    2596:	03 00                	add    eax,DWORD PTR [eax]
    2598:	00 03                	add    BYTE PTR [ebx],al
    259a:	0b 6a 02             	or     ebp,DWORD PTR [edx+0x2]
    259d:	00 00                	add    BYTE PTR [eax],al
    259f:	04 0b                	add    al,0xb
    25a1:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
    25a5:	05 0b 24 04 00       	add    eax,0x4240b
    25aa:	00 0a                	add    BYTE PTR [edx],cl
    25ac:	0b 8f 03 00 00 0b    	or     ecx,DWORD PTR [edi+0xb000003]
    25b2:	0b d6                	or     edx,esi
    25b4:	03 00                	add    eax,DWORD PTR [eax]
    25b6:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
    25b9:	5c                   	pop    esp
    25ba:	03 00                	add    eax,DWORD PTR [eax]
    25bc:	00 0d 0b 75 03 00    	add    BYTE PTR ds:0x3750b,cl
    25c2:	00 0e                	add    BYTE PTR [esi],cl
    25c4:	0b 77 02             	or     esi,DWORD PTR [edi+0x2]
    25c7:	00 00                	add    BYTE PTR [eax],al
    25c9:	0f 0b                	ud2    
    25cb:	b7 03                	mov    bh,0x3
    25cd:	00 00                	add    BYTE PTR [eax],al
    25cf:	10 0b                	adc    BYTE PTR [ebx],cl
    25d1:	a9 04 00 00 11       	test   eax,0x11000004
    25d6:	0b 87 04 00 00 4f    	or     eax,DWORD PTR [edi+0x4f000004]
    25dc:	0b 5c 04 00          	or     ebx,DWORD PTR [esp+eax*1+0x0]
    25e0:	00 50 0b             	add    BYTE PTR [eax+0xb],dl
    25e3:	f0 03 00             	lock add eax,DWORD PTR [eax]
    25e6:	00 59 0b             	add    BYTE PTR [ecx+0xb],bl
    25e9:	96                   	xchg   esi,eax
    25ea:	04 00                	add    al,0x0
    25ec:	00 61 0b             	add    BYTE PTR [ecx+0xb],ah
    25ef:	1b 03                	sbb    eax,DWORD PTR [ebx]
    25f1:	00 00                	add    BYTE PTR [eax],al
    25f3:	97                   	xchg   edi,eax
    25f4:	0c 0d                	or     al,0xd
    25f6:	04 00                	add    al,0x0
    25f8:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    25fb:	0c e3                	or     al,0xe3
    25fd:	03 00                	add    eax,DWORD PTR [eax]
    25ff:	00 64 01 0c          	add    BYTE PTR [ecx+eax*1+0xc],ah
    2603:	c6 04 00 00          	mov    BYTE PTR [eax+eax*1],0x0
    2607:	65 01 0c f7          	add    DWORD PTR gs:[edi+esi*8],ecx
    260b:	02 00                	add    al,BYTE PTR [eax]
    260d:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    2610:	0c d8                	or     al,0xd8
    2612:	04 00                	add    al,0x0
    2614:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    2617:	0c 82                	or     al,0x82
    2619:	03 00                	add    eax,DWORD PTR [eax]
    261b:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    261e:	0c b8                	or     al,0xb8
    2620:	02 00                	add    al,BYTE PTR [eax]
    2622:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    2625:	0c 31                	or     al,0x31
    2627:	04 00                	add    al,0x0
    2629:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    262c:	0c 0b                	or     al,0xb
    262e:	03 00                	add    eax,DWORD PTR [eax]
    2630:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    2633:	0c 79                	or     al,0x79
    2635:	04 00                	add    al,0x0
    2637:	00 00                	add    BYTE PTR [eax],al
    2639:	03 0c 9c             	add    ecx,DWORD PTR [esp+ebx*4]
    263c:	03 00                	add    eax,DWORD PTR [eax]
    263e:	00 01                	add    BYTE PTR [ecx],al
    2640:	03 0c ab             	add    ecx,DWORD PTR [ebx+ebp*4]
    2643:	03 00                	add    eax,DWORD PTR [eax]
    2645:	00 02                	add    BYTE PTR [edx],al
    2647:	03 0c 3e             	add    ecx,DWORD PTR [esi+edi*1]
    264a:	03 00                	add    eax,DWORD PTR [eax]
    264c:	00 03                	add    BYTE PTR [ebx],al
    264e:	03 0c 98             	add    ecx,DWORD PTR [eax+ebx*4]
    2651:	02 00                	add    al,BYTE PTR [eax]
    2653:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    2656:	0c e7                	or     al,0xe7
    2658:	02 00                	add    al,BYTE PTR [eax]
    265a:	00 05 03 0c 2f 03    	add    BYTE PTR ds:0x32f0c03,al
    2660:	00 00                	add    BYTE PTR [eax],al
    2662:	06                   	push   es
    2663:	03 0c c4             	add    ecx,DWORD PTR [esp+eax*8]
    2666:	03 00                	add    eax,DWORD PTR [eax]
    2668:	00 00                	add    BYTE PTR [eax],al
    266a:	09 00                	or     DWORD PTR [eax],eax
    266c:	0d ab 0a 00 00       	or     eax,0xaab
    2671:	01 15 ec 20 00 9f    	add    DWORD PTR ds:0x9f0020ec,edx
    2677:	60                   	pusha  
    2678:	00 00                	add    BYTE PTR [eax],al
    267a:	00 01                	add    BYTE PTR [ecx],al
    267c:	9c                   	pushf  
    267d:	0e                   	push   cs
    267e:	78 0a                	js     268a <sysEnter_Vector-0x12d976>
    2680:	00 00                	add    BYTE PTR [eax],al
    2682:	01 1e                	add    DWORD PTR [esi],ebx
    2684:	65 00 00             	add    BYTE PTR gs:[eax],al
    2687:	00 4c 21 00          	add    BYTE PTR [ecx+eiz*1+0x0],cl
    268b:	9f                   	lahf   
    268c:	87 00                	xchg   DWORD PTR [eax],eax
    268e:	00 00                	add    BYTE PTR [eax],al
    2690:	01 9c 79 02 00 00 0f 	add    DWORD PTR [ecx+edi*2+0xf000002],ebx
    2697:	da 06                	fiadd  DWORD PTR [esi]
    2699:	00 00                	add    BYTE PTR [eax],al
    269b:	01 1e                	add    DWORD PTR [esi],ebx
    269d:	89 00                	mov    DWORD PTR [eax],eax
    269f:	00 00                	add    BYTE PTR [eax],al
    26a1:	02 91 00 10 f0 0a    	add    dl,BYTE PTR [ecx+0xaf01000]
    26a7:	00 00                	add    BYTE PTR [eax],al
    26a9:	01 22                	add    DWORD PTR [edx],esp
    26ab:	65 00 00             	add    BYTE PTR gs:[eax],al
    26ae:	00 02                	add    BYTE PTR [edx],al
    26b0:	91                   	xchg   ecx,eax
    26b1:	74 00                	je     26b3 <sysEnter_Vector-0x12d94d>
    26b3:	11 6b 0a             	adc    DWORD PTR [ebx+0xa],ebp
    26b6:	00 00                	add    BYTE PTR [eax],al
    26b8:	01 36                	add    DWORD PTR [esi],esi
    26ba:	d3 21                	shl    DWORD PTR [ecx],cl
    26bc:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    26c2:	01 9c aa 02 00 00 0f 	add    DWORD PTR [edx+ebp*4+0xf000002],ebx
    26c9:	48                   	dec    eax
    26ca:	0b 00                	or     eax,DWORD PTR [eax]
    26cc:	00 01                	add    BYTE PTR [ecx],al
    26ce:	36 30 01             	xor    BYTE PTR ss:[ecx],al
    26d1:	00 00                	add    BYTE PTR [eax],al
    26d3:	02 91 00 12 6d 70    	add    dl,BYTE PTR [ecx+0x706d1200]
    26d9:	00 01                	add    BYTE PTR [ecx],al
    26db:	38 aa 02 00 00 02    	cmp    BYTE PTR [edx+0x2000002],ch
    26e1:	91                   	xchg   ecx,eax
    26e2:	6c                   	ins    BYTE PTR es:[edi],dx
    26e3:	00 08                	add    BYTE PTR [eax],cl
    26e5:	04 17                	add    al,0x17
    26e7:	01 00                	add    DWORD PTR [eax],eax
    26e9:	00 0e                	add    BYTE PTR [esi],cl
    26eb:	5d                   	pop    ebp
    26ec:	0b 00                	or     eax,DWORD PTR [eax]
    26ee:	00 01                	add    BYTE PTR [ecx],al
    26f0:	4b                   	dec    ebx
    26f1:	aa                   	stos   BYTE PTR es:[edi],al
    26f2:	02 00                	add    al,BYTE PTR [eax]
    26f4:	00 46 22             	add    BYTE PTR [esi+0x22],al
    26f7:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
    26fd:	01 9c e6 02 00 00 0f 	add    DWORD PTR [esi+eiz*8+0xf000002],ebx
    2704:	da 06                	fiadd  DWORD PTR [esi]
    2706:	00 00                	add    BYTE PTR [eax],al
    2708:	01 4b 89             	add    DWORD PTR [ebx-0x77],ecx
    270b:	00 00                	add    BYTE PTR [eax],al
    270d:	00 02                	add    BYTE PTR [edx],al
    270f:	91                   	xchg   ecx,eax
    2710:	00 10                	add    BYTE PTR [eax],dl
    2712:	33 0b                	xor    ecx,DWORD PTR [ebx]
    2714:	00 00                	add    BYTE PTR [eax],al
    2716:	01 4d aa             	add    DWORD PTR [ebp-0x56],ecx
    2719:	02 00                	add    al,BYTE PTR [eax]
    271b:	00 02                	add    BYTE PTR [edx],al
    271d:	91                   	xchg   ecx,eax
    271e:	74 00                	je     2720 <sysEnter_Vector-0x12d8e0>
    2720:	11 87 0b 00 00 01    	adc    DWORD PTR [edi+0x100000b],eax
    2726:	5b                   	pop    ebx
    2727:	ca 22 00             	retf   0x22
    272a:	9f                   	lahf   
    272b:	8b 00                	mov    eax,DWORD PTR [eax]
    272d:	00 00                	add    BYTE PTR [eax],al
    272f:	01 9c 2e 03 00 00 0f 	add    DWORD PTR [esi+ebp*1+0xf000003],ebx
    2736:	16                   	push   ss
    2737:	0b 00                	or     eax,DWORD PTR [eax]
    2739:	00 01                	add    BYTE PTR [ecx],al
    273b:	5b                   	pop    ebx
    273c:	aa                   	stos   BYTE PTR es:[edi],al
    273d:	02 00                	add    al,BYTE PTR [eax]
    273f:	00 02                	add    BYTE PTR [edx],al
    2741:	91                   	xchg   ecx,eax
    2742:	00 10                	add    BYTE PTR [eax],dl
    2744:	33 0b                	xor    ecx,DWORD PTR [ebx]
    2746:	00 00                	add    BYTE PTR [eax],al
    2748:	01 5e aa             	add    DWORD PTR [esi-0x56],ebx
    274b:	02 00                	add    al,BYTE PTR [eax]
    274d:	00 02                	add    BYTE PTR [edx],al
    274f:	91                   	xchg   ecx,eax
    2750:	6c                   	ins    BYTE PTR es:[edi],dx
    2751:	13 51 0b             	adc    edx,DWORD PTR [ecx+0xb]
    2754:	00 00                	add    BYTE PTR [eax],al
    2756:	01 64 09 23          	add    DWORD PTR [ecx+ecx*1+0x23],esp
    275a:	00 9f 13 e5 0a 00    	add    BYTE PTR [edi+0xae513],bl
    2760:	00 01                	add    BYTE PTR [ecx],al
    2762:	6a 2c                	push   0x2c
    2764:	23 00                	and    eax,DWORD PTR [eax]
    2766:	9f                   	lahf   
    2767:	00 14 2f             	add    BYTE PTR [edi+ebp*1],dl
    276a:	0a 00                	or     al,BYTE PTR [eax]
    276c:	00 01                	add    BYTE PTR [ecx],al
    276e:	72 30                	jb     27a0 <sysEnter_Vector-0x12d860>
    2770:	01 00                	add    DWORD PTR [eax],eax
    2772:	00 55 23             	add    BYTE PTR [ebp+0x23],dl
    2775:	00 9f 43 02 00 00    	add    BYTE PTR [edi+0x243],bl
    277b:	01 9c ad 03 00 00 0f 	add    DWORD PTR [ebp+ebp*4+0xf000003],ebx
    2782:	da 06                	fiadd  DWORD PTR [esi]
    2784:	00 00                	add    BYTE PTR [eax],al
    2786:	01 72 89             	add    DWORD PTR [edx-0x77],esi
    2789:	00 00                	add    BYTE PTR [eax],al
    278b:	00 02                	add    BYTE PTR [edx],al
    278d:	91                   	xchg   ecx,eax
    278e:	00 10                	add    BYTE PTR [eax],dl
    2790:	f4                   	hlt    
    2791:	04 00                	add    al,0x0
    2793:	00 01                	add    BYTE PTR [ecx],al
    2795:	74 30                	je     27c7 <sysEnter_Vector-0x12d839>
    2797:	01 00                	add    DWORD PTR [eax],eax
    2799:	00 02                	add    BYTE PTR [edx],al
    279b:	91                   	xchg   ecx,eax
    279c:	5c                   	pop    esp
    279d:	10 01                	adc    BYTE PTR [ecx],al
    279f:	0b 00                	or     eax,DWORD PTR [eax]
    27a1:	00 01                	add    BYTE PTR [ecx],al
    27a3:	76 65                	jbe    280a <sysEnter_Vector-0x12d7f6>
    27a5:	00 00                	add    BYTE PTR [eax],al
    27a7:	00 02                	add    BYTE PTR [edx],al
    27a9:	91                   	xchg   ecx,eax
    27aa:	64                   	fs
    27ab:	10 d1                	adc    cl,dl
    27ad:	0a 00                	or     al,BYTE PTR [eax]
    27af:	00 01                	add    BYTE PTR [ecx],al
    27b1:	77 65                	ja     2818 <sysEnter_Vector-0x12d7e8>
    27b3:	00 00                	add    BYTE PTR [eax],al
    27b5:	00 02                	add    BYTE PTR [edx],al
    27b7:	91                   	xchg   ecx,eax
    27b8:	60                   	pusha  
    27b9:	10 33                	adc    BYTE PTR [ebx],dh
    27bb:	0b 00                	or     eax,DWORD PTR [eax]
    27bd:	00 01                	add    BYTE PTR [ecx],al
    27bf:	78 aa                	js     276b <sysEnter_Vector-0x12d895>
    27c1:	02 00                	add    al,BYTE PTR [eax]
    27c3:	00 02                	add    BYTE PTR [edx],al
    27c5:	91                   	xchg   ecx,eax
    27c6:	68 10 b6 0a 00       	push   0xab610
    27cb:	00 01                	add    BYTE PTR [ecx],al
    27cd:	79 89                	jns    2758 <sysEnter_Vector-0x12d8a8>
    27cf:	00 00                	add    BYTE PTR [eax],al
    27d1:	00 02                	add    BYTE PTR [edx],al
    27d3:	91                   	xchg   ecx,eax
    27d4:	6c                   	ins    BYTE PTR es:[edi],dx
    27d5:	10 3c 0a             	adc    BYTE PTR [edx+ecx*1],bh
    27d8:	00 00                	add    BYTE PTR [eax],al
    27da:	01 7a aa             	add    DWORD PTR [edx-0x56],edi
    27dd:	02 00                	add    al,BYTE PTR [eax]
    27df:	00 05 03 b0 7c 00    	add    BYTE PTR ds:0x7cb003,al
    27e5:	9f                   	lahf   
    27e6:	00 14 af             	add    BYTE PTR [edi+ebp*4],dl
    27e9:	0a 00                	or     al,BYTE PTR [eax]
    27eb:	00 01                	add    BYTE PTR [ecx],al
    27ed:	b2 30                	mov    dl,0x30
    27ef:	01 00                	add    DWORD PTR [eax],eax
    27f1:	00 98 25 00 9f 20    	add    BYTE PTR [eax+0x209f0025],bl
    27f7:	00 00                	add    BYTE PTR [eax],al
    27f9:	00 01                	add    BYTE PTR [ecx],al
    27fb:	9c                   	pushf  
    27fc:	d5 03                	aad    0x3
    27fe:	00 00                	add    BYTE PTR [eax],al
    2800:	0f da 06             	pminub mm0,QWORD PTR [esi]
    2803:	00 00                	add    BYTE PTR [eax],al
    2805:	01 b2 89 00 00 00    	add    DWORD PTR [edx+0x89],esi
    280b:	02 91 00 00 14 08    	add    dl,BYTE PTR [ecx+0x8140000]
    2811:	0b 00                	or     eax,DWORD PTR [eax]
    2813:	00 01                	add    BYTE PTR [ecx],al
    2815:	b7 30                	mov    bh,0x30
    2817:	01 00                	add    DWORD PTR [eax],eax
    2819:	00 b8 25 00 9f 03    	add    BYTE PTR [eax+0x39f0025],bh
    281f:	01 00                	add    DWORD PTR [eax],eax
    2821:	00 01                	add    BYTE PTR [ecx],al
    2823:	9c                   	pushf  
    2824:	34 04                	xor    al,0x4
    2826:	00 00                	add    BYTE PTR [eax],al
    2828:	0f 3b                	(bad)  
    282a:	0b 00                	or     eax,DWORD PTR [eax]
    282c:	00 01                	add    BYTE PTR [ecx],al
    282e:	b7 30                	mov    bh,0x30
    2830:	01 00                	add    DWORD PTR [eax],eax
    2832:	00 02                	add    BYTE PTR [edx],al
    2834:	91                   	xchg   ecx,eax
    2835:	00 0f                	add    BYTE PTR [edi],cl
    2837:	de 0a                	fimul  WORD PTR [edx]
    2839:	00 00                	add    BYTE PTR [eax],al
    283b:	01 b7 65 00 00 00    	add    DWORD PTR [edi+0x65],esi
    2841:	02 91 04 10 f8 0a    	add    dl,BYTE PTR [ecx+0xaf81004]
    2847:	00 00                	add    BYTE PTR [eax],al
    2849:	01 bd 65 00 00 00    	add    DWORD PTR [ebp+0x65],edi
    284f:	02 91 6c 12 6d 70    	add    dl,BYTE PTR [ecx+0x706d126c]
    2855:	00 01                	add    BYTE PTR [ecx],al
    2857:	be aa 02 00 00       	mov    esi,0x2aa
    285c:	02 91 68 10 1e 0b    	add    dl,BYTE PTR [ecx+0xb1e1068]
    2862:	00 00                	add    BYTE PTR [eax],al
    2864:	01 ca                	add    edx,ecx
    2866:	34 04                	xor    al,0x4
    2868:	00 00                	add    BYTE PTR [eax],al
    286a:	02 91 64 00 08 04    	add    dl,BYTE PTR [ecx+0x4080064]
    2870:	7e 00                	jle    2872 <sysEnter_Vector-0x12d78e>
    2872:	00 00                	add    BYTE PTR [eax],al
    2874:	14 77                	adc    al,0x77
    2876:	0b 00                	or     eax,DWORD PTR [eax]
    2878:	00 01                	add    BYTE PTR [ecx],al
    287a:	d8 30                	fdiv   DWORD PTR [eax]
    287c:	01 00                	add    DWORD PTR [eax],eax
    287e:	00 bb 26 00 9f 23    	add    BYTE PTR [ebx+0x239f0026],bh
    2884:	00 00                	add    BYTE PTR [eax],al
    2886:	00 01                	add    BYTE PTR [ecx],al
    2888:	9c                   	pushf  
    2889:	70 04                	jo     288f <sysEnter_Vector-0x12d771>
    288b:	00 00                	add    BYTE PTR [eax],al
    288d:	0f 3b                	(bad)  
    288f:	0b 00                	or     eax,DWORD PTR [eax]
    2891:	00 01                	add    BYTE PTR [ecx],al
    2893:	d8 30                	fdiv   DWORD PTR [eax]
    2895:	01 00                	add    DWORD PTR [eax],eax
    2897:	00 02                	add    BYTE PTR [edx],al
    2899:	91                   	xchg   ecx,eax
    289a:	00 0f                	add    BYTE PTR [edi],cl
    289c:	de 0a                	fimul  WORD PTR [edx]
    289e:	00 00                	add    BYTE PTR [eax],al
    28a0:	01 d8                	add    eax,ebx
    28a2:	65 00 00             	add    BYTE PTR gs:[eax],al
    28a5:	00 02                	add    BYTE PTR [edx],al
    28a7:	91                   	xchg   ecx,eax
    28a8:	04 00                	add    al,0x0
    28aa:	11 43 0b             	adc    DWORD PTR [ebx+0xb],eax
    28ad:	00 00                	add    BYTE PTR [eax],al
    28af:	01 dd                	add    ebp,ebx
    28b1:	de 26                	fisub  WORD PTR [esi]
    28b3:	00 9f 21 00 00 00    	add    BYTE PTR [edi+0x21],bl
    28b9:	01 9c 94 04 00 00 0f 	add    DWORD PTR [esp+edx*4+0xf000004],ebx
    28c0:	48                   	dec    eax
    28c1:	0b 00                	or     eax,DWORD PTR [eax]
    28c3:	00 01                	add    BYTE PTR [ecx],al
    28c5:	dd 30                	fnsave [eax]
    28c7:	01 00                	add    DWORD PTR [eax],eax
    28c9:	00 02                	add    BYTE PTR [edx],al
    28cb:	91                   	xchg   ecx,eax
    28cc:	00 00                	add    BYTE PTR [eax],al
    28ce:	0d c2 0a 00 00       	or     eax,0xac2
    28d3:	01 e2                	add    edx,esp
    28d5:	ff 26                	jmp    DWORD PTR [esi]
    28d7:	00 9f 32 00 00 00    	add    BYTE PTR [edi+0x32],bl
    28dd:	01 9c 15 78 00 00 00 	add    DWORD PTR [ebp+edx*1+0x78],ebx
    28e4:	05 33 b6 04 00       	add    eax,0x4b633
    28e9:	00 05 03 60 7c 00    	add    BYTE PTR ds:0x7c6003,al
    28ef:	9f                   	lahf   
    28f0:	08 04 32             	or     BYTE PTR [edx+esi*1],al
    28f3:	01 00                	add    DWORD PTR [eax],eax
    28f5:	00 15 62 0a 00 00    	add    BYTE PTR ds:0xa62,dl
    28fb:	01 11                	add    DWORD PTR [ecx],edx
    28fd:	65 00 00             	add    BYTE PTR gs:[eax],al
    2900:	00 05 03 a4 7c 00    	add    BYTE PTR ds:0x7ca403,al
    2906:	9f                   	lahf   
    2907:	15 4a 0a 00 00       	adc    eax,0xa4a
    290c:	01 12                	add    DWORD PTR [edx],edx
    290e:	65 00 00             	add    BYTE PTR gs:[eax],al
    2911:	00 05 03 a8 7c 00    	add    BYTE PTR ds:0x7ca803,al
    2917:	9f                   	lahf   
    2918:	15 7f 0b 00 00       	adc    eax,0xb7f
    291d:	01 13                	add    DWORD PTR [ebx],edx
    291f:	65 00 00             	add    BYTE PTR gs:[eax],al
    2922:	00 05 03 ac 7c 00    	add    BYTE PTR ds:0x7cac03,al
    2928:	9f                   	lahf   
    2929:	00 e8                	add    al,ch
    292b:	01 00                	add    DWORD PTR [eax],eax
    292d:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2930:	eb 0a                	jmp    293c <sysEnter_Vector-0x12d6c4>
    2932:	00 00                	add    BYTE PTR [eax],al
    2934:	04 01                	add    al,0x1
    2936:	c3                   	ret    
    2937:	00 00                	add    BYTE PTR [eax],al
    2939:	00 0c ad 0b 00 00 4d 	add    BYTE PTR [ebp*4+0x4d00000b],cl
    2940:	00 00                	add    BYTE PTR [eax],al
    2942:	00 34 27             	add    BYTE PTR [edi+eiz*1],dh
    2945:	00 9f bb 01 00 00    	add    BYTE PTR [edi+0x1bb],bl
    294b:	95                   	xchg   ebp,eax
    294c:	0c 00                	or     al,0x0
    294e:	00 02                	add    BYTE PTR [edx],al
    2950:	01 08                	add    DWORD PTR [eax],ecx
    2952:	3f                   	aas    
    2953:	00 00                	add    BYTE PTR [eax],al
    2955:	00 02                	add    BYTE PTR [edx],al
    2957:	02 07                	add    al,BYTE PTR [edi]
    2959:	0e                   	push   cs
    295a:	00 00                	add    BYTE PTR [eax],al
    295c:	00 02                	add    BYTE PTR [edx],al
    295e:	04 07                	add    al,0x7
    2960:	32 00                	xor    al,BYTE PTR [eax]
    2962:	00 00                	add    BYTE PTR [eax],al
    2964:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2967:	2d 00 00 00 02       	sub    eax,0x2000000
    296c:	01 06                	add    DWORD PTR [esi],eax
    296e:	41                   	inc    ecx
    296f:	00 00                	add    BYTE PTR [eax],al
    2971:	00 02                	add    BYTE PTR [edx],al
    2973:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    2979:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2980:	02 08                	add    cl,BYTE PTR [eax]
    2982:	05 00 00 00 00       	add    eax,0x0
    2987:	02 08                	add    cl,BYTE PTR [eax]
    2989:	07                   	pop    es
    298a:	28 00                	sub    BYTE PTR [eax],al
    298c:	00 00                	add    BYTE PTR [eax],al
    298e:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2995:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2998:	2a 01                	sub    al,BYTE PTR [ecx]
    299a:	00 00                	add    BYTE PTR [eax],al
    299c:	04 04                	add    al,0x4
    299e:	05 04 7a 00 00       	add    eax,0x7a04
    29a3:	00 02                	add    BYTE PTR [edx],al
    29a5:	01 06                	add    DWORD PTR [esi],eax
    29a7:	48                   	dec    eax
    29a8:	00 00                	add    BYTE PTR [eax],al
    29aa:	00 06                	add    BYTE PTR [esi],al
    29ac:	45                   	inc    ebp
    29ad:	02 00                	add    al,BYTE PTR [eax]
    29af:	00 02                	add    BYTE PTR [edx],al
    29b1:	34 33                	xor    al,0x33
    29b3:	00 00                	add    BYTE PTR [eax],al
    29b5:	00 05 04 92 00 00    	add    BYTE PTR ds:0x9204,al
    29bb:	00 07                	add    BYTE PTR [edi],al
    29bd:	7a 00                	jp     29bf <sysEnter_Vector-0x12d641>
    29bf:	00 00                	add    BYTE PTR [eax],al
    29c1:	06                   	push   es
    29c2:	91                   	xchg   ecx,eax
    29c3:	02 00                	add    al,BYTE PTR [eax]
    29c5:	00 03                	add    BYTE PTR [ebx],al
    29c7:	d8 33                	fdiv   DWORD PTR [ebx]
    29c9:	00 00                	add    BYTE PTR [eax],al
    29cb:	00 02                	add    BYTE PTR [edx],al
    29cd:	0c 04                	or     al,0x4
    29cf:	ad                   	lods   eax,DWORD PTR ds:[esi]
    29d0:	00 00                	add    BYTE PTR [eax],al
    29d2:	00 08                	add    BYTE PTR [eax],cl
    29d4:	99                   	cdq    
    29d5:	0b 00                	or     eax,DWORD PTR [eax]
    29d7:	00 01                	add    BYTE PTR [ecx],al
    29d9:	0b 72 00             	or     esi,DWORD PTR [edx+0x0]
    29dc:	00 00                	add    BYTE PTR [eax],al
    29de:	34 27                	xor    al,0x27
    29e0:	00 9f 9b 01 00 00    	add    BYTE PTR [edi+0x19b],bl
    29e6:	01 9c 73 01 00 00 09 	add    DWORD PTR [ebx+esi*2+0x9000001],ebx
    29ed:	a1 0b 00 00 01       	mov    eax,ds:0x100000b
    29f2:	0b 72 00             	or     esi,DWORD PTR [edx+0x0]
    29f5:	00 00                	add    BYTE PTR [eax],al
    29f7:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    29fd:	63 00                	arpl   WORD PTR [eax],ax
    29ff:	01 0b                	add    DWORD PTR [ebx],ecx
    2a01:	73 01                	jae    2a04 <sysEnter_Vector-0x12d5fc>
    2a03:	00 00                	add    BYTE PTR [eax],al
    2a05:	02 91 04 0a 6e 00    	add    dl,BYTE PTR [ecx+0x6e0a04]
    2a0b:	01 0b                	add    DWORD PTR [ebx],ecx
    2a0d:	97                   	xchg   edi,eax
    2a0e:	00 00                	add    BYTE PTR [eax],al
    2a10:	00 02                	add    BYTE PTR [edx],al
    2a12:	91                   	xchg   ecx,eax
    2a13:	08 0b                	or     BYTE PTR [ebx],cl
    2a15:	64                   	fs
    2a16:	77 00                	ja     2a18 <sysEnter_Vector-0x12d5e8>
    2a18:	01 0d 7a 01 00 00    	add    DWORD PTR ds:0x17a,ecx
    2a1e:	02 91 5e 0b 64 64    	add    dl,BYTE PTR [ecx+0x64640b5e]
    2a24:	00 01                	add    BYTE PTR [ecx],al
    2a26:	0d 7a 01 00 00       	or     eax,0x17a
    2a2b:	02 91 5f 0c 66 27    	add    dl,BYTE PTR [ecx+0x27660c5f]
    2a31:	00 9f 7d 00 00 00    	add    BYTE PTR [edi+0x7d],bl
    2a37:	2a 01                	sub    al,BYTE PTR [ecx]
    2a39:	00 00                	add    BYTE PTR [eax],al
    2a3b:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    2a3e:	01 14 81             	add    DWORD PTR [ecx+eax*4],edx
    2a41:	01 00                	add    DWORD PTR [eax],eax
    2a43:	00 02                	add    BYTE PTR [edx],al
    2a45:	91                   	xchg   ecx,eax
    2a46:	74 0b                	je     2a53 <sysEnter_Vector-0x12d5ad>
    2a48:	74 00                	je     2a4a <sysEnter_Vector-0x12d5b6>
    2a4a:	01 15 8c 01 00 00    	add    DWORD PTR ds:0x18c,edx
    2a50:	02 91 70 00 0c e9    	add    dl,BYTE PTR [ecx-0x16f3ff90]
    2a56:	27                   	daa    
    2a57:	00 9f 79 00 00 00    	add    BYTE PTR [edi+0x79],bl
    2a5d:	50                   	push   eax
    2a5e:	01 00                	add    DWORD PTR [eax],eax
    2a60:	00 0b                	add    BYTE PTR [ebx],cl
    2a62:	66                   	data16
    2a63:	00 01                	add    BYTE PTR [ecx],al
    2a65:	24 81                	and    al,0x81
    2a67:	01 00                	add    DWORD PTR [eax],eax
    2a69:	00 02                	add    BYTE PTR [edx],al
    2a6b:	91                   	xchg   ecx,eax
    2a6c:	6c                   	ins    BYTE PTR es:[edi],dx
    2a6d:	0b 74 00 01          	or     esi,DWORD PTR [eax+eax*1+0x1]
    2a71:	25 8c 01 00 00       	and    eax,0x18c
    2a76:	02 91 68 00 0d 62    	add    dl,BYTE PTR [ecx+0x620d0068]
    2a7c:	28 00                	sub    BYTE PTR [eax],al
    2a7e:	9f                   	lahf   
    2a7f:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    2a82:	00 0b                	add    BYTE PTR [ebx],cl
    2a84:	66                   	data16
    2a85:	00 01                	add    BYTE PTR [ecx],al
    2a87:	33 8c 00 00 00 02 91 	xor    ecx,DWORD PTR [eax+eax*1-0x6efe0000]
    2a8e:	64 0b 74 00 01       	or     esi,DWORD PTR fs:[eax+eax*1+0x1]
    2a93:	34 74                	xor    al,0x74
    2a95:	00 00                	add    BYTE PTR [eax],al
    2a97:	00 02                	add    BYTE PTR [edx],al
    2a99:	91                   	xchg   ecx,eax
    2a9a:	60                   	pusha  
    2a9b:	00 00                	add    BYTE PTR [eax],al
    2a9d:	05 04 79 01 00       	add    eax,0x17904
    2aa2:	00 0e                	add    BYTE PTR [esi],cl
    2aa4:	02 01                	add    al,BYTE PTR [ecx]
    2aa6:	02 6a 06             	add    ch,BYTE PTR [edx+0x6]
    2aa9:	00 00                	add    BYTE PTR [eax],al
    2aab:	05 04 87 01 00       	add    eax,0x18704
    2ab0:	00 07                	add    BYTE PTR [edi],al
    2ab2:	81 00 00 00 05 04    	add    DWORD PTR [eax],0x4050000
    2ab8:	81 00 00 00 0f a6    	add    DWORD PTR [eax],0xa60f0000
    2abe:	0b 00                	or     eax,DWORD PTR [eax]
    2ac0:	00 01                	add    BYTE PTR [ecx],al
    2ac2:	42                   	inc    edx
    2ac3:	72 00                	jb     2ac5 <sysEnter_Vector-0x12d53b>
    2ac5:	00 00                	add    BYTE PTR [eax],al
    2ac7:	cf                   	iret   
    2ac8:	28 00                	sub    BYTE PTR [eax],al
    2aca:	9f                   	lahf   
    2acb:	20 00                	and    BYTE PTR [eax],al
    2acd:	00 00                	add    BYTE PTR [eax],al
    2acf:	01 9c d4 01 00 00 09 	add    DWORD PTR [esp+edx*8+0x9000001],ebx
    2ad6:	a1 0b 00 00 01       	mov    eax,ds:0x100000b
    2adb:	42                   	inc    edx
    2adc:	72 00                	jb     2ade <sysEnter_Vector-0x12d522>
    2ade:	00 00                	add    BYTE PTR [eax],al
    2ae0:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    2ae6:	63 00                	arpl   WORD PTR [eax],ax
    2ae8:	01 42 73             	add    DWORD PTR [edx+0x73],eax
    2aeb:	01 00                	add    DWORD PTR [eax],eax
    2aed:	00 02                	add    BYTE PTR [edx],al
    2aef:	91                   	xchg   ecx,eax
    2af0:	04 0a                	add    al,0xa
    2af2:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2af3:	00 01                	add    BYTE PTR [ecx],al
    2af5:	42                   	inc    edx
    2af6:	97                   	xchg   edi,eax
    2af7:	00 00                	add    BYTE PTR [eax],al
    2af9:	00 02                	add    BYTE PTR [edx],al
    2afb:	91                   	xchg   ecx,eax
    2afc:	08 00                	or     BYTE PTR [eax],al
    2afe:	10 78 00             	adc    BYTE PTR [eax+0x0],bh
    2b01:	00 00                	add    BYTE PTR [eax],al
    2b03:	04 33                	add    al,0x33
    2b05:	e5 01                	in     eax,0x1
    2b07:	00 00                	add    BYTE PTR [eax],al
    2b09:	05 03 60 7c 00       	add    eax,0x7c6003
    2b0e:	9f                   	lahf   
    2b0f:	05 04 74 00 00       	add    eax,0x7404
    2b14:	00 00                	add    BYTE PTR [eax],al
    2b16:	a0 01 00 00 04       	mov    al,ds:0x4000001
    2b1b:	00 c8                	add    al,cl
    2b1d:	0b 00                	or     eax,DWORD PTR [eax]
    2b1f:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2b22:	c3                   	ret    
    2b23:	00 00                	add    BYTE PTR [eax],al
    2b25:	00 0c ba             	add    BYTE PTR [edx+edi*4],cl
    2b28:	0b 00                	or     eax,DWORD PTR [eax]
    2b2a:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    2b2d:	00 00                	add    BYTE PTR [eax],al
    2b2f:	f0 28 00             	lock sub BYTE PTR [eax],al
    2b32:	9f                   	lahf   
    2b33:	e7 00                	out    0x0,eax
    2b35:	00 00                	add    BYTE PTR [eax],al
    2b37:	70 0d                	jo     2b46 <sysEnter_Vector-0x12d4ba>
    2b39:	00 00                	add    BYTE PTR [eax],al
    2b3b:	02 01                	add    al,BYTE PTR [ecx]
    2b3d:	08 3f                	or     BYTE PTR [edi],bh
    2b3f:	00 00                	add    BYTE PTR [eax],al
    2b41:	00 02                	add    BYTE PTR [edx],al
    2b43:	02 07                	add    al,BYTE PTR [edi]
    2b45:	0e                   	push   cs
    2b46:	00 00                	add    BYTE PTR [eax],al
    2b48:	00 02                	add    BYTE PTR [edx],al
    2b4a:	04 07                	add    al,0x7
    2b4c:	32 00                	xor    al,BYTE PTR [eax]
    2b4e:	00 00                	add    BYTE PTR [eax],al
    2b50:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2b53:	2d 00 00 00 02       	sub    eax,0x2000000
    2b58:	01 06                	add    DWORD PTR [esi],eax
    2b5a:	41                   	inc    ecx
    2b5b:	00 00                	add    BYTE PTR [eax],al
    2b5d:	00 02                	add    BYTE PTR [edx],al
    2b5f:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    2b65:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2b6c:	02 08                	add    cl,BYTE PTR [eax]
    2b6e:	05 00 00 00 00       	add    eax,0x0
    2b73:	02 08                	add    cl,BYTE PTR [eax]
    2b75:	07                   	pop    es
    2b76:	28 00                	sub    BYTE PTR [eax],al
    2b78:	00 00                	add    BYTE PTR [eax],al
    2b7a:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2b81:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2b84:	2a 01                	sub    al,BYTE PTR [ecx]
    2b86:	00 00                	add    BYTE PTR [eax],al
    2b88:	04 04                	add    al,0x4
    2b8a:	05 04 7a 00 00       	add    eax,0x7a04
    2b8f:	00 02                	add    BYTE PTR [edx],al
    2b91:	01 06                	add    DWORD PTR [esi],eax
    2b93:	48                   	dec    eax
    2b94:	00 00                	add    BYTE PTR [eax],al
    2b96:	00 06                	add    BYTE PTR [esi],al
    2b98:	cf                   	iret   
    2b99:	06                   	push   es
    2b9a:	00 00                	add    BYTE PTR [eax],al
    2b9c:	02 2e                	add    ch,BYTE PTR [esi]
    2b9e:	25 00 00 00 06       	and    eax,0x6000000
    2ba3:	89 05 00 00 02 31    	mov    DWORD PTR ds:0x31020000,eax
    2ba9:	2c 00                	sub    al,0x0
    2bab:	00 00                	add    BYTE PTR [eax],al
    2bad:	06                   	push   es
    2bae:	45                   	inc    ebp
    2baf:	02 00                	add    al,BYTE PTR [eax]
    2bb1:	00 02                	add    BYTE PTR [edx],al
    2bb3:	34 33                	xor    al,0x33
    2bb5:	00 00                	add    BYTE PTR [eax],al
    2bb7:	00 06                	add    BYTE PTR [esi],al
    2bb9:	91                   	xchg   ecx,eax
    2bba:	02 00                	add    al,BYTE PTR [eax]
    2bbc:	00 03                	add    BYTE PTR [ebx],al
    2bbe:	d8 33                	fdiv   DWORD PTR [ebx]
    2bc0:	00 00                	add    BYTE PTR [eax],al
    2bc2:	00 02                	add    BYTE PTR [edx],al
    2bc4:	0c 04                	or     al,0x4
    2bc6:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2bc7:	00 00                	add    BYTE PTR [eax],al
    2bc9:	00 07                	add    BYTE PTR [edi],al
    2bcb:	ce                   	into   
    2bcc:	0b 00                	or     eax,DWORD PTR [eax]
    2bce:	00 01                	add    BYTE PTR [ecx],al
    2bd0:	08 72 00             	or     BYTE PTR [edx+0x0],dh
    2bd3:	00 00                	add    BYTE PTR [eax],al
    2bd5:	f0 28 00             	lock sub BYTE PTR [eax],al
    2bd8:	9f                   	lahf   
    2bd9:	c7 00 00 00 01 9c    	mov    DWORD PTR [eax],0x9c010000
    2bdf:	37                   	aaa    
    2be0:	01 00                	add    DWORD PTR [eax],eax
    2be2:	00 08                	add    BYTE PTR [eax],cl
    2be4:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    2be7:	01 08                	add    DWORD PTR [eax],ecx
    2be9:	72 00                	jb     2beb <sysEnter_Vector-0x12d415>
    2beb:	00 00                	add    BYTE PTR [eax],al
    2bed:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    2bf3:	6c                   	ins    BYTE PTR es:[edi],dx
    2bf4:	00 01                	add    BYTE PTR [ecx],al
    2bf6:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
    2bf9:	00 00                	add    BYTE PTR [eax],al
    2bfb:	02 91 04 08 6c 65    	add    dl,BYTE PTR [ecx+0x656c0804]
    2c01:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2c02:	00 01                	add    BYTE PTR [ecx],al
    2c04:	08 a2 00 00 00 02    	or     BYTE PTR [edx+0x2000000],ah
    2c0a:	91                   	xchg   ecx,eax
    2c0b:	08 09                	or     BYTE PTR [ecx],cl
    2c0d:	64 00 01             	add    BYTE PTR fs:[ecx],al
    2c10:	0a 37                	or     dh,BYTE PTR [edi]
    2c12:	01 00                	add    DWORD PTR [eax],eax
    2c14:	00 02                	add    BYTE PTR [edx],al
    2c16:	91                   	xchg   ecx,eax
    2c17:	74 09                	je     2c22 <sysEnter_Vector-0x12d3de>
    2c19:	65 00 01             	add    BYTE PTR gs:[ecx],al
    2c1c:	0b 3d 01 00 00 02    	or     edi,DWORD PTR ds:0x2000001
    2c22:	91                   	xchg   ecx,eax
    2c23:	70 0a                	jo     2c2f <sysEnter_Vector-0x12d3d1>
    2c25:	d6                   	(bad)  
    2c26:	0b 00                	or     eax,DWORD PTR [eax]
    2c28:	00 01                	add    BYTE PTR [ecx],al
    2c2a:	0c 8c                	or     al,0x8c
    2c2c:	00 00                	add    BYTE PTR [eax],al
    2c2e:	00 02                	add    BYTE PTR [edx],al
    2c30:	91                   	xchg   ecx,eax
    2c31:	6a 09                	push   0x9
    2c33:	66                   	data16
    2c34:	00 01                	add    BYTE PTR [ecx],al
    2c36:	0d 43 01 00 00       	or     eax,0x143
    2c3b:	02 91 6c 0a db 0b    	add    dl,BYTE PTR [ecx+0xbdb0a6c]
    2c41:	00 00                	add    BYTE PTR [eax],al
    2c43:	01 0e                	add    DWORD PTR [esi],ecx
    2c45:	97                   	xchg   edi,eax
    2c46:	00 00                	add    BYTE PTR [eax],al
    2c48:	00 02                	add    BYTE PTR [edx],al
    2c4a:	91                   	xchg   ecx,eax
    2c4b:	64 00 05 04 81 00 00 	add    BYTE PTR fs:0x8104,al
    2c52:	00 05 04 8c 00 00    	add    BYTE PTR ds:0x8c04,al
    2c58:	00 05 04 97 00 00    	add    BYTE PTR ds:0x9704,al
    2c5e:	00 0b                	add    BYTE PTR [ebx],cl
    2c60:	c7                   	(bad)  
    2c61:	0b 00                	or     eax,DWORD PTR [eax]
    2c63:	00 01                	add    BYTE PTR [ecx],al
    2c65:	1f                   	pop    ds
    2c66:	72 00                	jb     2c68 <sysEnter_Vector-0x12d398>
    2c68:	00 00                	add    BYTE PTR [eax],al
    2c6a:	b7 29                	mov    bh,0x29
    2c6c:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    2c72:	01 9c 8c 01 00 00 08 	add    DWORD PTR [esp+ecx*4+0x8000001],ebx
    2c79:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    2c7c:	01 1f                	add    DWORD PTR [edi],ebx
    2c7e:	72 00                	jb     2c80 <sysEnter_Vector-0x12d380>
    2c80:	00 00                	add    BYTE PTR [eax],al
    2c82:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    2c88:	6c                   	ins    BYTE PTR es:[edi],dx
    2c89:	00 01                	add    BYTE PTR [ecx],al
    2c8b:	1f                   	pop    ds
    2c8c:	4f                   	dec    edi
    2c8d:	00 00                	add    BYTE PTR [eax],al
    2c8f:	00 02                	add    BYTE PTR [edx],al
    2c91:	91                   	xchg   ecx,eax
    2c92:	04 08                	add    al,0x8
    2c94:	6c                   	ins    BYTE PTR es:[edi],dx
    2c95:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    2c97:	00 01                	add    BYTE PTR [ecx],al
    2c99:	1f                   	pop    ds
    2c9a:	a2 00 00 00 02       	mov    ds:0x2000000,al
    2c9f:	91                   	xchg   ecx,eax
    2ca0:	08 00                	or     BYTE PTR [eax],al
    2ca2:	0c 78                	or     al,0x78
    2ca4:	00 00                	add    BYTE PTR [eax],al
    2ca6:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    2ca9:	9d                   	popf   
    2caa:	01 00                	add    DWORD PTR [eax],eax
    2cac:	00 05 03 60 7c 00    	add    BYTE PTR ds:0x7c6003,al
    2cb2:	9f                   	lahf   
    2cb3:	05 04 74 00 00       	add    eax,0x7404
    2cb8:	00 00                	add    BYTE PTR [eax],al
    2cba:	11 02                	adc    DWORD PTR [edx],eax
    2cbc:	00 00                	add    BYTE PTR [eax],al
    2cbe:	04 00                	add    al,0x0
    2cc0:	85 0c 00             	test   DWORD PTR [eax+eax*1],ecx
    2cc3:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2cc6:	c3                   	ret    
    2cc7:	00 00                	add    BYTE PTR [eax],al
    2cc9:	00 0c f6             	add    BYTE PTR [esi+esi*8],cl
    2ccc:	0b 00                	or     eax,DWORD PTR [eax]
    2cce:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    2cd1:	00 00                	add    BYTE PTR [eax],al
    2cd3:	d8 29                	fsubr  DWORD PTR [ecx]
    2cd5:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    2cdb:	2e                   	cs
    2cdc:	0e                   	push   cs
    2cdd:	00 00                	add    BYTE PTR [eax],al
    2cdf:	02 01                	add    al,BYTE PTR [ecx]
    2ce1:	08 3f                	or     BYTE PTR [edi],bh
    2ce3:	00 00                	add    BYTE PTR [eax],al
    2ce5:	00 02                	add    BYTE PTR [edx],al
    2ce7:	02 07                	add    al,BYTE PTR [edi]
    2ce9:	0e                   	push   cs
    2cea:	00 00                	add    BYTE PTR [eax],al
    2cec:	00 02                	add    BYTE PTR [edx],al
    2cee:	04 07                	add    al,0x7
    2cf0:	32 00                	xor    al,BYTE PTR [eax]
    2cf2:	00 00                	add    BYTE PTR [eax],al
    2cf4:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2cf7:	2d 00 00 00 02       	sub    eax,0x2000000
    2cfc:	01 06                	add    DWORD PTR [esi],eax
    2cfe:	41                   	inc    ecx
    2cff:	00 00                	add    BYTE PTR [eax],al
    2d01:	00 02                	add    BYTE PTR [edx],al
    2d03:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    2d09:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2d10:	02 08                	add    cl,BYTE PTR [eax]
    2d12:	05 00 00 00 00       	add    eax,0x0
    2d17:	02 08                	add    cl,BYTE PTR [eax]
    2d19:	07                   	pop    es
    2d1a:	28 00                	sub    BYTE PTR [eax],al
    2d1c:	00 00                	add    BYTE PTR [eax],al
    2d1e:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2d25:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2d28:	2a 01                	sub    al,BYTE PTR [ecx]
    2d2a:	00 00                	add    BYTE PTR [eax],al
    2d2c:	04 04                	add    al,0x4
    2d2e:	78 00                	js     2d30 <sysEnter_Vector-0x12d2d0>
    2d30:	00 00                	add    BYTE PTR [eax],al
    2d32:	02 01                	add    al,BYTE PTR [ecx]
    2d34:	06                   	push   es
    2d35:	48                   	dec    eax
    2d36:	00 00                	add    BYTE PTR [eax],al
    2d38:	00 05 01 02 00 00    	add    BYTE PTR ds:0x201,al
    2d3e:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
    2d41:	00 00                	add    BYTE PTR [eax],al
    2d43:	00 02                	add    BYTE PTR [edx],al
    2d45:	0c 04                	or     al,0x4
    2d47:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2d48:	00 00                	add    BYTE PTR [eax],al
    2d4a:	00 06                	add    BYTE PTR [esi],al
    2d4c:	6b 03 00             	imul   eax,DWORD PTR [ebx],0x0
    2d4f:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    2d52:	00 00                	add    BYTE PTR [eax],al
    2d54:	00 03                	add    BYTE PTR [ebx],al
    2d56:	15 8b 01 00 00       	adc    eax,0x18b
    2d5b:	07                   	pop    es
    2d5c:	fd                   	std    
    2d5d:	03 00                	add    eax,DWORD PTR [eax]
    2d5f:	00 00                	add    BYTE PTR [eax],al
    2d61:	07                   	pop    es
    2d62:	42                   	inc    edx
    2d63:	04 00                	add    al,0x0
    2d65:	00 01                	add    BYTE PTR [ecx],al
    2d67:	07                   	pop    es
    2d68:	84 02                	test   BYTE PTR [edx],al
    2d6a:	00 00                	add    BYTE PTR [eax],al
    2d6c:	02 07                	add    al,BYTE PTR [edi]
    2d6e:	4e                   	dec    esi
    2d6f:	03 00                	add    eax,DWORD PTR [eax]
    2d71:	00 03                	add    BYTE PTR [ebx],al
    2d73:	07                   	pop    es
    2d74:	6a 02                	push   0x2
    2d76:	00 00                	add    BYTE PTR [eax],al
    2d78:	04 07                	add    al,0x7
    2d7a:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
    2d7e:	05 07 24 04 00       	add    eax,0x42407
    2d83:	00 0a                	add    BYTE PTR [edx],cl
    2d85:	07                   	pop    es
    2d86:	8f 03                	pop    DWORD PTR [ebx]
    2d88:	00 00                	add    BYTE PTR [eax],al
    2d8a:	0b 07                	or     eax,DWORD PTR [edi]
    2d8c:	d6                   	(bad)  
    2d8d:	03 00                	add    eax,DWORD PTR [eax]
    2d8f:	00 0c 07             	add    BYTE PTR [edi+eax*1],cl
    2d92:	5c                   	pop    esp
    2d93:	03 00                	add    eax,DWORD PTR [eax]
    2d95:	00 0d 07 75 03 00    	add    BYTE PTR ds:0x37507,cl
    2d9b:	00 0e                	add    BYTE PTR [esi],cl
    2d9d:	07                   	pop    es
    2d9e:	77 02                	ja     2da2 <sysEnter_Vector-0x12d25e>
    2da0:	00 00                	add    BYTE PTR [eax],al
    2da2:	0f 07                	sysret 
    2da4:	b7 03                	mov    bh,0x3
    2da6:	00 00                	add    BYTE PTR [eax],al
    2da8:	10 07                	adc    BYTE PTR [edi],al
    2daa:	a9 04 00 00 11       	test   eax,0x11000004
    2daf:	07                   	pop    es
    2db0:	87 04 00             	xchg   DWORD PTR [eax+eax*1],eax
    2db3:	00 4f 07             	add    BYTE PTR [edi+0x7],cl
    2db6:	5c                   	pop    esp
    2db7:	04 00                	add    al,0x0
    2db9:	00 50 07             	add    BYTE PTR [eax+0x7],dl
    2dbc:	f0 03 00             	lock add eax,DWORD PTR [eax]
    2dbf:	00 59 07             	add    BYTE PTR [ecx+0x7],bl
    2dc2:	96                   	xchg   esi,eax
    2dc3:	04 00                	add    al,0x0
    2dc5:	00 61 07             	add    BYTE PTR [ecx+0x7],ah
    2dc8:	1b 03                	sbb    eax,DWORD PTR [ebx]
    2dca:	00 00                	add    BYTE PTR [eax],al
    2dcc:	97                   	xchg   edi,eax
    2dcd:	08 0d 04 00 00 63    	or     BYTE PTR ds:0x63000004,cl
    2dd3:	01 08                	add    DWORD PTR [eax],ecx
    2dd5:	e3 03                	jecxz  2dda <sysEnter_Vector-0x12d226>
    2dd7:	00 00                	add    BYTE PTR [eax],al
    2dd9:	64 01 08             	add    DWORD PTR fs:[eax],ecx
    2ddc:	c6 04 00 00          	mov    BYTE PTR [eax+eax*1],0x0
    2de0:	65 01 08             	add    DWORD PTR gs:[eax],ecx
    2de3:	f7 02 00 00 66 01    	test   DWORD PTR [edx],0x1660000
    2de9:	08 d8                	or     al,bl
    2deb:	04 00                	add    al,0x0
    2ded:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    2df0:	08 82 03 00 00 68    	or     BYTE PTR [edx+0x68000003],al
    2df6:	01 08                	add    DWORD PTR [eax],ecx
    2df8:	b8 02 00 00 69       	mov    eax,0x69000002
    2dfd:	01 08                	add    DWORD PTR [eax],ecx
    2dff:	31 04 00             	xor    DWORD PTR [eax+eax*1],eax
    2e02:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    2e05:	08 0b                	or     BYTE PTR [ebx],cl
    2e07:	03 00                	add    eax,DWORD PTR [eax]
    2e09:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    2e0c:	08 79 04             	or     BYTE PTR [ecx+0x4],bh
    2e0f:	00 00                	add    BYTE PTR [eax],al
    2e11:	00 03                	add    BYTE PTR [ebx],al
    2e13:	08 9c 03 00 00 01 03 	or     BYTE PTR [ebx+eax*1+0x3010000],bl
    2e1a:	08 ab 03 00 00 02    	or     BYTE PTR [ebx+0x2000003],ch
    2e20:	03 08                	add    ecx,DWORD PTR [eax]
    2e22:	3e 03 00             	add    eax,DWORD PTR ds:[eax]
    2e25:	00 03                	add    BYTE PTR [ebx],al
    2e27:	03 08                	add    ecx,DWORD PTR [eax]
    2e29:	98                   	cwde   
    2e2a:	02 00                	add    al,BYTE PTR [eax]
    2e2c:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    2e2f:	08 e7                	or     bh,ah
    2e31:	02 00                	add    al,BYTE PTR [eax]
    2e33:	00 05 03 08 2f 03    	add    BYTE PTR ds:0x32f0803,al
    2e39:	00 00                	add    BYTE PTR [eax],al
    2e3b:	06                   	push   es
    2e3c:	03 08                	add    ecx,DWORD PTR [eax]
    2e3e:	c4 03                	les    eax,FWORD PTR [ebx]
    2e40:	00 00                	add    BYTE PTR [eax],al
    2e42:	00 09                	add    BYTE PTR [ecx],cl
    2e44:	00 09                	add    BYTE PTR [ecx],cl
    2e46:	f1                   	icebp  
    2e47:	0b 00                	or     eax,DWORD PTR [eax]
    2e49:	00 01                	add    BYTE PTR [ecx],al
    2e4b:	0a 4f 00             	or     cl,BYTE PTR [edi+0x0]
    2e4e:	00 00                	add    BYTE PTR [eax],al
    2e50:	d8 29                	fsubr  DWORD PTR [ecx]
    2e52:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
    2e58:	01 9c b3 01 00 00 0a 	add    DWORD PTR [ebx+esi*4+0xa000001],ebx
    2e5f:	05 0c 00 00 01       	add    eax,0x100000c
    2e64:	0a b3 01 00 00 02    	or     dh,BYTE PTR [ebx+0x2000001]
    2e6a:	91                   	xchg   ecx,eax
    2e6b:	00 00                	add    BYTE PTR [eax],al
    2e6d:	04 04                	add    al,0x4
    2e6f:	4f                   	dec    edi
    2e70:	00 00                	add    BYTE PTR [eax],al
    2e72:	00 09                	add    BYTE PTR [ecx],cl
    2e74:	e6 0b                	out    0xb,al
    2e76:	00 00                	add    BYTE PTR [eax],al
    2e78:	01 0f                	add    DWORD PTR [edi],ecx
    2e7a:	4f                   	dec    edi
    2e7b:	00 00                	add    BYTE PTR [eax],al
    2e7d:	00 01                	add    BYTE PTR [ecx],al
    2e7f:	2a 00                	sub    al,BYTE PTR [eax]
    2e81:	9f                   	lahf   
    2e82:	2e 00 00             	add    BYTE PTR cs:[eax],al
    2e85:	00 01                	add    BYTE PTR [ecx],al
    2e87:	9c                   	pushf  
    2e88:	fd                   	std    
    2e89:	01 00                	add    DWORD PTR [eax],eax
    2e8b:	00 0a                	add    BYTE PTR [edx],cl
    2e8d:	e0 0b                	loopne 2e9a <sysEnter_Vector-0x12d166>
    2e8f:	00 00                	add    BYTE PTR [eax],al
    2e91:	01 0f                	add    DWORD PTR [edi],ecx
    2e93:	4f                   	dec    edi
    2e94:	00 00                	add    BYTE PTR [eax],al
    2e96:	00 02                	add    BYTE PTR [edx],al
    2e98:	91                   	xchg   ecx,eax
    2e99:	00 0a                	add    BYTE PTR [edx],cl
    2e9b:	eb 0b                	jmp    2ea8 <sysEnter_Vector-0x12d158>
    2e9d:	00 00                	add    BYTE PTR [eax],al
    2e9f:	01 0f                	add    DWORD PTR [edi],ecx
    2ea1:	4f                   	dec    edi
    2ea2:	00 00                	add    BYTE PTR [eax],al
    2ea4:	00 02                	add    BYTE PTR [edx],al
    2ea6:	91                   	xchg   ecx,eax
    2ea7:	04 0a                	add    al,0xa
    2ea9:	01 0a                	add    DWORD PTR [edx],ecx
    2eab:	00 00                	add    BYTE PTR [eax],al
    2ead:	01 0f                	add    DWORD PTR [edi],ecx
    2eaf:	4f                   	dec    edi
    2eb0:	00 00                	add    BYTE PTR [eax],al
    2eb2:	00 02                	add    BYTE PTR [edx],al
    2eb4:	91                   	xchg   ecx,eax
    2eb5:	08 00                	or     BYTE PTR [eax],al
    2eb7:	0b 78 00             	or     edi,DWORD PTR [eax+0x0]
    2eba:	00 00                	add    BYTE PTR [eax],al
    2ebc:	04 33                	add    al,0x33
    2ebe:	0e                   	push   cs
    2ebf:	02 00                	add    al,BYTE PTR [eax]
    2ec1:	00 05 03 60 7c 00    	add    BYTE PTR ds:0x7c6003,al
    2ec7:	9f                   	lahf   
    2ec8:	04 04                	add    al,0x4
    2eca:	72 00                	jb     2ecc <sysEnter_Vector-0x12d134>
    2ecc:	00 00                	add    BYTE PTR [eax],al
    2ece:	00 89 05 00 00 04    	add    BYTE PTR [ecx+0x4000005],cl
    2ed4:	00 24 0d 00 00 04 01 	add    BYTE PTR [ecx*1+0x1040000],ah
    2edb:	c3                   	ret    
    2edc:	00 00                	add    BYTE PTR [eax],al
    2ede:	00 0c 0c             	add    BYTE PTR [esp+ecx*1],cl
    2ee1:	0c 00                	or     al,0x0
    2ee3:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    2ee6:	00 00                	add    BYTE PTR [eax],al
    2ee8:	30 2a                	xor    BYTE PTR [edx],ch
    2eea:	00 9f 8a 05 00 00    	add    BYTE PTR [edi+0x58a],bl
    2ef0:	11 0f                	adc    DWORD PTR [edi],ecx
    2ef2:	00 00                	add    BYTE PTR [eax],al
    2ef4:	02 79 0d             	add    bh,BYTE PTR [ecx+0xd]
    2ef7:	00 00                	add    BYTE PTR [eax],al
    2ef9:	02 19                	add    bl,BYTE PTR [ecx]
    2efb:	30 00                	xor    BYTE PTR [eax],al
    2efd:	00 00                	add    BYTE PTR [eax],al
    2eff:	03 6f 0d             	add    ebp,DWORD PTR [edi+0xd]
    2f02:	00 00                	add    BYTE PTR [eax],al
    2f04:	8c 02                	mov    WORD PTR [edx],es
    2f06:	1b fd                	sbb    edi,ebp
    2f08:	00 00                	add    BYTE PTR [eax],al
    2f0a:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    2f0d:	69 64 00 02 1d fd 00 	imul   esp,DWORD PTR [eax+eax*1+0x2],0xfd1d
    2f14:	00 
    2f15:	00 00                	add    BYTE PTR [eax],al
    2f17:	05 35 06 00 00       	add    eax,0x635
    2f1c:	02 1e                	add    bl,BYTE PTR [esi]
    2f1e:	04 01                	add    al,0x1
    2f20:	00 00                	add    BYTE PTR [eax],al
    2f22:	04 05                	add    al,0x5
    2f24:	8c 09                	mov    WORD PTR [ecx],cs
    2f26:	00 00                	add    BYTE PTR [eax],al
    2f28:	02 1f                	add    bl,BYTE PTR [edi]
    2f2a:	1b 01                	sbb    eax,DWORD PTR [ecx]
    2f2c:	00 00                	add    BYTE PTR [eax],al
    2f2e:	2c 05                	sub    al,0x5
    2f30:	be 0d 00 00 02       	mov    esi,0x200000d
    2f35:	20 fd                	and    ch,bh
    2f37:	00 00                	add    BYTE PTR [eax],al
    2f39:	00 30                	add    BYTE PTR [eax],dh
    2f3b:	04 74                	add    al,0x74
    2f3d:	74 79                	je     2fb8 <sysEnter_Vector-0x12d048>
    2f3f:	00 02                	add    BYTE PTR [edx],al
    2f41:	21 fd                	and    ebp,edi
    2f43:	00 00                	add    BYTE PTR [eax],al
    2f45:	00 34 05 b2 0d 00 00 	add    BYTE PTR [eax*1+0xdb2],dh
    2f4c:	02 22                	add    ah,BYTE PTR [edx]
    2f4e:	fd                   	std    
    2f4f:	00 00                	add    BYTE PTR [eax],al
    2f51:	00 38                	add    BYTE PTR [eax],bh
    2f53:	05 14 0d 00 00       	add    eax,0xd14
    2f58:	02 23                	add    ah,BYTE PTR [ebx]
    2f5a:	fd                   	std    
    2f5b:	00 00                	add    BYTE PTR [eax],al
    2f5d:	00 3c 05 a7 09 00 00 	add    BYTE PTR [eax*1+0x9a7],bh
    2f64:	02 24 fd 00 00 00 40 	add    ah,BYTE PTR [edi*8+0x40000000]
    2f6b:	05 20 0d 00 00       	add    eax,0xd20
    2f70:	02 24 fd 00 00 00 44 	add    ah,BYTE PTR [edi*8+0x44000000]
    2f77:	05 f0 0c 00 00       	add    eax,0xcf0
    2f7c:	02 24 fd 00 00 00 48 	add    ah,BYTE PTR [edi*8+0x48000000]
    2f83:	04 63                	add    al,0x63
    2f85:	70 75                	jo     2ffc <sysEnter_Vector-0x12d004>
    2f87:	00 02                	add    BYTE PTR [edx],al
    2f89:	25 22 01 00 00       	and    eax,0x122
    2f8e:	4c                   	dec    esp
    2f8f:	05 d3 0c 00 00       	add    eax,0xcd3
    2f94:	02 26                	add    ah,BYTE PTR [esi]
    2f96:	fd                   	std    
    2f97:	00 00                	add    BYTE PTR [eax],al
    2f99:	00 54 05 c7          	add    BYTE PTR [ebp+eax*1-0x39],dl
    2f9d:	0c 00                	or     al,0x0
    2f9f:	00 02                	add    BYTE PTR [edx],al
    2fa1:	27                   	daa    
    2fa2:	fd                   	std    
    2fa3:	00 00                	add    BYTE PTR [eax],al
    2fa5:	00 58 05             	add    BYTE PTR [eax+0x5],bl
    2fa8:	dc 0c 00             	fmul   QWORD PTR [eax+eax*1]
    2fab:	00 02                	add    BYTE PTR [edx],al
    2fad:	28 fd                	sub    ch,bh
    2faf:	00 00                	add    BYTE PTR [eax],al
    2fb1:	00 5c 05 43          	add    BYTE PTR [ebp+eax*1+0x43],bl
    2fb5:	0c 00                	or     al,0x0
    2fb7:	00 02                	add    BYTE PTR [edx],al
    2fb9:	29 fd                	sub    ebp,edi
    2fbb:	00 00                	add    BYTE PTR [eax],al
    2fbd:	00 60 05             	add    BYTE PTR [eax+0x5],ah
    2fc0:	b2 06                	mov    dl,0x6
    2fc2:	00 00                	add    BYTE PTR [eax],al
    2fc4:	02 2a                	add    ch,BYTE PTR [edx]
    2fc6:	04 01                	add    al,0x1
    2fc8:	00 00                	add    BYTE PTR [eax],al
    2fca:	64 00 06             	add    BYTE PTR fs:[esi],al
    2fcd:	04 05                	add    al,0x5
    2fcf:	69 6e 74 00 07 1b 01 	imul   ebp,DWORD PTR [esi+0x74],0x11b0700
    2fd6:	00 00                	add    BYTE PTR [eax],al
    2fd8:	14 01                	adc    al,0x1
    2fda:	00 00                	add    BYTE PTR [eax],al
    2fdc:	08 14 01             	or     BYTE PTR [ecx+eax*1],dl
    2fdf:	00 00                	add    BYTE PTR [eax],al
    2fe1:	27                   	daa    
    2fe2:	00 09                	add    BYTE PTR [ecx],cl
    2fe4:	04 07                	add    al,0x7
    2fe6:	2a 01                	sub    al,BYTE PTR [ecx]
    2fe8:	00 00                	add    BYTE PTR [eax],al
    2fea:	09 01                	or     DWORD PTR [ecx],eax
    2fec:	06                   	push   es
    2fed:	48                   	dec    eax
    2fee:	00 00                	add    BYTE PTR [eax],al
    2ff0:	00 09                	add    BYTE PTR [ecx],cl
    2ff2:	08 04 b2             	or     BYTE PTR [edx+esi*4],al
    2ff5:	00 00                	add    BYTE PTR [eax],al
    2ff7:	00 09                	add    BYTE PTR [ecx],cl
    2ff9:	01 08                	add    DWORD PTR [eax],ecx
    2ffb:	3f                   	aas    
    2ffc:	00 00                	add    BYTE PTR [eax],al
    2ffe:	00 09                	add    BYTE PTR [ecx],cl
    3000:	02 07                	add    al,BYTE PTR [edi]
    3002:	0e                   	push   cs
    3003:	00 00                	add    BYTE PTR [eax],al
    3005:	00 09                	add    BYTE PTR [ecx],cl
    3007:	04 07                	add    al,0x7
    3009:	32 00                	xor    al,BYTE PTR [eax]
    300b:	00 00                	add    BYTE PTR [eax],al
    300d:	09 04 07             	or     DWORD PTR [edi+eax*1],eax
    3010:	2d 00 00 00 09       	sub    eax,0x9000000
    3015:	01 06                	add    DWORD PTR [esi],eax
    3017:	41                   	inc    ecx
    3018:	00 00                	add    BYTE PTR [eax],al
    301a:	00 09                	add    BYTE PTR [ecx],cl
    301c:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    3022:	09 08                	or     DWORD PTR [eax],ecx
    3024:	05 00 00 00 00       	add    eax,0x0
    3029:	09 08                	or     DWORD PTR [eax],ecx
    302b:	07                   	pop    es
    302c:	28 00                	sub    BYTE PTR [eax],al
    302e:	00 00                	add    BYTE PTR [eax],al
    3030:	09 04 05 05 00 00 00 	or     DWORD PTR [eax*1+0x5],eax
    3037:	0a 04 1b             	or     al,BYTE PTR [ebx+ebx*1]
    303a:	01 00                	add    DWORD PTR [eax],eax
    303c:	00 02                	add    BYTE PTR [edx],al
    303e:	cf                   	iret   
    303f:	06                   	push   es
    3040:	00 00                	add    BYTE PTR [eax],al
    3042:	03 2e                	add    ebp,DWORD PTR [esi]
    3044:	29 01                	sub    DWORD PTR [ecx],eax
    3046:	00 00                	add    BYTE PTR [eax],al
    3048:	02 89 05 00 00 03    	add    cl,BYTE PTR [ecx+0x3000005]
    304e:	31 30                	xor    DWORD PTR [eax],esi
    3050:	01 00                	add    DWORD PTR [eax],eax
    3052:	00 02                	add    BYTE PTR [edx],al
    3054:	45                   	inc    ebp
    3055:	02 00                	add    al,BYTE PTR [eax]
    3057:	00 03                	add    BYTE PTR [ebx],al
    3059:	34 37                	xor    al,0x37
    305b:	01 00                	add    DWORD PTR [eax],eax
    305d:	00 02                	add    BYTE PTR [edx],al
    305f:	01 02                	add    DWORD PTR [edx],eax
    3061:	00 00                	add    BYTE PTR [eax],al
    3063:	03 56 37             	add    edx,DWORD PTR [esi+0x37]
    3066:	01 00                	add    DWORD PTR [eax],eax
    3068:	00 09                	add    BYTE PTR [ecx],cl
    306a:	0c 04                	or     al,0x4
    306c:	ad                   	lods   eax,DWORD PTR ds:[esi]
    306d:	00 00                	add    BYTE PTR [eax],al
    306f:	00 02                	add    BYTE PTR [edx],al
    3071:	2a 0d 00 00 04 2a    	sub    cl,BYTE PTR ds:0x2a040000
    3077:	61                   	popa   
    3078:	01 00                	add    DWORD PTR [eax],eax
    307a:	00 0b                	add    BYTE PTR [ebx],cl
    307c:	74 6d                	je     30eb <sysEnter_Vector-0x12cf15>
    307e:	00 2c 04             	add    BYTE PTR [esp+eax*1],ch
    3081:	2c 3c                	sub    al,0x3c
    3083:	02 00                	add    al,BYTE PTR [eax]
    3085:	00 05 ab 0d 00 00    	add    BYTE PTR ds:0xdab,al
    308b:	04 2e                	add    al,0x2e
    308d:	fd                   	std    
    308e:	00 00                	add    BYTE PTR [eax],al
    3090:	00 00                	add    BYTE PTR [eax],al
    3092:	05 05 0d 00 00       	add    eax,0xd05
    3097:	04 2f                	add    al,0x2f
    3099:	fd                   	std    
    309a:	00 00                	add    BYTE PTR [eax],al
    309c:	00 04 05 1b 0c 00 00 	add    BYTE PTR [eax*1+0xc1b],al
    30a3:	04 30                	add    al,0x30
    30a5:	fd                   	std    
    30a6:	00 00                	add    BYTE PTR [eax],al
    30a8:	00 08                	add    BYTE PTR [eax],cl
    30aa:	05 8c 0d 00 00       	add    eax,0xd8c
    30af:	04 31                	add    al,0x31
    30b1:	fd                   	std    
    30b2:	00 00                	add    BYTE PTR [eax],al
    30b4:	00 0c 05 71 0c 00 00 	add    BYTE PTR [eax*1+0xc71],cl
    30bb:	04 32                	add    al,0x32
    30bd:	fd                   	std    
    30be:	00 00                	add    BYTE PTR [eax],al
    30c0:	00 10                	add    BYTE PTR [eax],dl
    30c2:	05 8b 0c 00 00       	add    eax,0xc8b
    30c7:	04 33                	add    al,0x33
    30c9:	fd                   	std    
    30ca:	00 00                	add    BYTE PTR [eax],al
    30cc:	00 14 05 84 0d 00 00 	add    BYTE PTR [eax*1+0xd84],dl
    30d3:	04 34                	add    al,0x34
    30d5:	fd                   	std    
    30d6:	00 00                	add    BYTE PTR [eax],al
    30d8:	00 18                	add    BYTE PTR [eax],bl
    30da:	05 0c 0d 00 00       	add    eax,0xd0c
    30df:	04 35                	add    al,0x35
    30e1:	fd                   	std    
    30e2:	00 00                	add    BYTE PTR [eax],al
    30e4:	00 1c 05 be 0c 00 00 	add    BYTE PTR [eax*1+0xcbe],bl
    30eb:	04 36                	add    al,0x36
    30ed:	fd                   	std    
    30ee:	00 00                	add    BYTE PTR [eax],al
    30f0:	00 20                	add    BYTE PTR [eax],ah
    30f2:	05 4b 0d 00 00       	add    eax,0xd4b
    30f7:	04 37                	add    al,0x37
    30f9:	61                   	popa   
    30fa:	01 00                	add    DWORD PTR [eax],eax
    30fc:	00 24 05 30 0c 00 00 	add    BYTE PTR [eax*1+0xc30],ah
    3103:	04 38                	add    al,0x38
    3105:	3c 02                	cmp    al,0x2
    3107:	00 00                	add    BYTE PTR [eax],al
    3109:	28 00                	sub    BYTE PTR [eax],al
    310b:	0a 04 42             	or     al,BYTE PTR [edx+eax*2]
    310e:	02 00                	add    al,BYTE PTR [eax]
    3110:	00 0c 1b             	add    BYTE PTR [ebx+ebx*1],cl
    3113:	01 00                	add    DWORD PTR [eax],eax
    3115:	00 0d 78 06 00 00    	add    BYTE PTR ds:0x678,cl
    311b:	17                   	pop    ss
    311c:	01 05 1f c9 02 00    	add    DWORD PTR ds:0x2c91f,eax
    3122:	00 05 31 06 00 00    	add    BYTE PTR ds:0x631,al
    3128:	05 21 c9 02 00       	add    eax,0x2c921
    312d:	00 00                	add    BYTE PTR [eax],al
    312f:	0e                   	push   cs
    3130:	4a                   	dec    edx
    3131:	06                   	push   es
    3132:	00 00                	add    BYTE PTR [eax],al
    3134:	05 22 6e 01 00       	add    eax,0x16e22
    3139:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    313c:	0e                   	push   cs
    313d:	01 06                	add    DWORD PTR [esi],eax
    313f:	00 00                	add    BYTE PTR [eax],al
    3141:	05 23 84 01 00       	add    eax,0x18423
    3146:	00 05 01 0e da 06    	add    BYTE PTR ds:0x6da0e01,al
    314c:	00 00                	add    BYTE PTR [eax],al
    314e:	05 24 84 01 00       	add    eax,0x18424
    3153:	00 09                	add    BYTE PTR [ecx],cl
    3155:	01 0e                	add    DWORD PTR [esi],ecx
    3157:	09 06                	or     DWORD PTR [esi],eax
    3159:	00 00                	add    BYTE PTR [eax],al
    315b:	05 25 79 01 00       	add    eax,0x17925
    3160:	00 0d 01 0e 21 05    	add    BYTE PTR ds:0x5210e01,cl
    3166:	00 00                	add    BYTE PTR [eax],al
    3168:	05 26 79 01 00       	add    eax,0x17926
    316d:	00 0f                	add    BYTE PTR [edi],cl
    316f:	01 0e                	add    DWORD PTR [esi],ecx
    3171:	92                   	xchg   edx,eax
    3172:	05 00 00 05 27       	add    eax,0x27050000
    3177:	79 01                	jns    317a <sysEnter_Vector-0x12ce86>
    3179:	00 00                	add    BYTE PTR [eax],al
    317b:	11 01                	adc    DWORD PTR [ecx],eax
    317d:	0e                   	push   cs
    317e:	74 05                	je     3185 <sysEnter_Vector-0x12ce7b>
    3180:	00 00                	add    BYTE PTR [eax],al
    3182:	05 28 79 01 00       	add    eax,0x17928
    3187:	00 13                	add    BYTE PTR [ebx],dl
    3189:	01 0e                	add    DWORD PTR [esi],ecx
    318b:	ab                   	stos   DWORD PTR es:[edi],eax
    318c:	06                   	push   es
    318d:	00 00                	add    BYTE PTR [eax],al
    318f:	05 29 79 01 00       	add    eax,0x17929
    3194:	00 15 01 00 07 1b    	add    BYTE PTR ds:0x1b070001,dl
    319a:	01 00                	add    DWORD PTR [eax],eax
    319c:	00 da                	add    dl,bl
    319e:	02 00                	add    al,BYTE PTR [eax]
    31a0:	00 0f                	add    BYTE PTR [edi],cl
    31a2:	14 01                	adc    al,0x1
    31a4:	00 00                	add    BYTE PTR [eax],al
    31a6:	03 01                	add    eax,DWORD PTR [ecx]
    31a8:	00 02                	add    BYTE PTR [edx],al
    31aa:	51                   	push   ecx
    31ab:	06                   	push   es
    31ac:	00 00                	add    BYTE PTR [eax],al
    31ae:	05 32 47 02 00       	add    eax,0x24732
    31b3:	00 09                	add    BYTE PTR [ecx],cl
    31b5:	01 02                	add    DWORD PTR [edx],eax
    31b7:	6a 06                	push   0x6
    31b9:	00 00                	add    BYTE PTR [eax],al
    31bb:	10 ae 0c 00 00 01    	adc    BYTE PTR [esi+0x100000c],ch
    31c1:	10 bf 03 00 00 30    	adc    BYTE PTR [edi+0x30000003],bh
    31c7:	2a 00                	sub    al,BYTE PTR [eax]
    31c9:	9f                   	lahf   
    31ca:	3f                   	aas    
    31cb:	03 00                	add    eax,DWORD PTR [eax]
    31cd:	00 01                	add    BYTE PTR [ecx],al
    31cf:	9c                   	pushf  
    31d0:	bf 03 00 00 11       	mov    edi,0x11000003
    31d5:	e7 0c                	out    0xc,eax
    31d7:	00 00                	add    BYTE PTR [eax],al
    31d9:	01 10                	add    DWORD PTR [eax],edx
    31db:	bf 03 00 00 02       	mov    edi,0x2000003
    31e0:	91                   	xchg   ecx,eax
    31e1:	00 11                	add    BYTE PTR [ecx],dl
    31e3:	9d                   	popf   
    31e4:	0c 00                	or     al,0x0
    31e6:	00 01                	add    BYTE PTR [ecx],al
    31e8:	10 68 01             	adc    BYTE PTR [eax+0x1],ch
    31eb:	00 00                	add    BYTE PTR [eax],al
    31ed:	02 91 04 11 94 0d    	add    dl,BYTE PTR [ecx+0xd941104]
    31f3:	00 00                	add    BYTE PTR [eax],al
    31f5:	01 10                	add    DWORD PTR [eax],edx
    31f7:	fd                   	std    
    31f8:	00 00                	add    BYTE PTR [eax],al
    31fa:	00 02                	add    BYTE PTR [edx],al
    31fc:	91                   	xchg   ecx,eax
    31fd:	08 12                	or     BYTE PTR [edx],dl
    31ff:	7c 01                	jl     3202 <sysEnter_Vector-0x12cdfe>
    3201:	00 00                	add    BYTE PTR [eax],al
    3203:	01 12                	add    DWORD PTR [edx],edx
    3205:	c5 03                	lds    eax,FWORD PTR [ebx]
    3207:	00 00                	add    BYTE PTR [eax],al
    3209:	02 91 60 12 64 06    	add    dl,BYTE PTR [ecx+0x6641260]
    320f:	00 00                	add    BYTE PTR [eax],al
    3211:	01 13                	add    DWORD PTR [ebx],edx
    3213:	68 01 00 00 02       	push   0x2000001
    3218:	91                   	xchg   ecx,eax
    3219:	6c                   	ins    BYTE PTR es:[edi],dx
    321a:	12 55 0d             	adc    dl,BYTE PTR [ebp+0xd]
    321d:	00 00                	add    BYTE PTR [eax],al
    321f:	01 14 fd 00 00 00 02 	add    DWORD PTR [edi*8+0x2000000],edx
    3226:	91                   	xchg   ecx,eax
    3227:	68 13 70 69 64       	push   0x64697013
    322c:	00 01                	add    BYTE PTR [ecx],al
    322e:	15 fd 00 00 00       	adc    eax,0xfd
    3233:	02 91 64 12 35 06    	add    dl,BYTE PTR [ecx+0x6351264]
    3239:	00 00                	add    BYTE PTR [eax],al
    323b:	01 16                	add    DWORD PTR [esi],edx
    323d:	d5 03                	aad    0x3
    323f:	00 00                	add    BYTE PTR [eax],al
    3241:	03 91 fc 7e 12 31    	add    edx,DWORD PTR [ecx+0x31127efc]
    3247:	0d 00 00 01 16       	or     eax,0x16010000
    324c:	d5 03                	aad    0x3
    324e:	00 00                	add    BYTE PTR [eax],al
    3250:	03 91 98 7e 12 37    	add    edx,DWORD PTR [ecx+0x37127e98]
    3256:	0d 00 00 01 16       	or     eax,0x16010000
    325b:	d5 03                	aad    0x3
    325d:	00 00                	add    BYTE PTR [eax],al
    325f:	03 91 b4 7d 12 a0    	add    edx,DWORD PTR [ecx-0x5fed824c]
    3265:	0c 00                	or     al,0x0
    3267:	00 01                	add    BYTE PTR [ecx],al
    3269:	17                   	pop    ss
    326a:	ac                   	lods   al,BYTE PTR ds:[esi]
    326b:	01 00                	add    DWORD PTR [eax],eax
    326d:	00 05 03 c0 7c 00    	add    BYTE PTR ds:0x7cc003,al
    3273:	9f                   	lahf   
    3274:	14 d1                	adc    al,0xd1
    3276:	2a 00                	sub    al,BYTE PTR [eax]
    3278:	9f                   	lahf   
    3279:	72 02                	jb     327d <sysEnter_Vector-0x12cd83>
    327b:	00 00                	add    BYTE PTR [eax],al
    327d:	12 23                	adc    ah,BYTE PTR [ebx]
    327f:	0c 00                	or     al,0x0
    3281:	00 01                	add    BYTE PTR [ecx],al
    3283:	42                   	inc    edx
    3284:	a1 01 00 00 03       	mov    eax,ds:0x3000001
    3289:	91                   	xchg   ecx,eax
    328a:	b0 7d                	mov    al,0x7d
    328c:	00 00                	add    BYTE PTR [eax],al
    328e:	0a 04 25 00 00 00 07 	or     al,BYTE PTR [eiz*1+0x7000000]
    3295:	1b 01                	sbb    eax,DWORD PTR [ecx]
    3297:	00 00                	add    BYTE PTR [eax],al
    3299:	d5 03                	aad    0x3
    329b:	00 00                	add    BYTE PTR [eax],al
    329d:	08 14 01             	or     BYTE PTR [ecx+eax*1],dl
    32a0:	00 00                	add    BYTE PTR [eax],al
    32a2:	03 00                	add    eax,DWORD PTR [eax]
    32a4:	07                   	pop    es
    32a5:	1b 01                	sbb    eax,DWORD PTR [ecx]
    32a7:	00 00                	add    BYTE PTR [eax],al
    32a9:	e5 03                	in     eax,0x3
    32ab:	00 00                	add    BYTE PTR [eax],al
    32ad:	08 14 01             	or     BYTE PTR [ecx+eax*1],dl
    32b0:	00 00                	add    BYTE PTR [eax],al
    32b2:	63 00                	arpl   WORD PTR [eax],ax
    32b4:	10 62 0c             	adc    BYTE PTR [edx+0xc],ah
    32b7:	00 00                	add    BYTE PTR [eax],al
    32b9:	01 5b bf             	add    DWORD PTR [ebx-0x41],ebx
    32bc:	03 00                	add    eax,DWORD PTR [eax]
    32be:	00 6f 2d             	add    BYTE PTR [edi+0x2d],ch
    32c1:	00 9f 25 00 00 00    	add    BYTE PTR [edi+0x25],bl
    32c7:	01 9c 1b 04 00 00 11 	add    DWORD PTR [ebx+ebx*1+0x11000004],ebx
    32ce:	e7 0c                	out    0xc,eax
    32d0:	00 00                	add    BYTE PTR [eax],al
    32d2:	01 5b bf             	add    DWORD PTR [ebx-0x41],ebx
    32d5:	03 00                	add    eax,DWORD PTR [eax]
    32d7:	00 02                	add    BYTE PTR [edx],al
    32d9:	91                   	xchg   ecx,eax
    32da:	00 11                	add    BYTE PTR [ecx],dl
    32dc:	9d                   	popf   
    32dd:	0c 00                	or     al,0x0
    32df:	00 01                	add    BYTE PTR [ecx],al
    32e1:	5b                   	pop    ebx
    32e2:	68 01 00 00 02       	push   0x2000001
    32e7:	91                   	xchg   ecx,eax
    32e8:	04 00                	add    al,0x0
    32ea:	15 78 0c 00 00       	adc    eax,0xc78
    32ef:	01 60 94             	add    DWORD PTR [eax-0x6c],esp
    32f2:	2d 00 9f 26 02       	sub    eax,0x2269f00
    32f7:	00 00                	add    BYTE PTR [eax],al
    32f9:	01 9c 0b 05 00 00 11 	add    DWORD PTR [ebx+ecx*1+0x11000005],ebx
    3300:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    3301:	0c 00                	or     al,0x0
    3303:	00 01                	add    BYTE PTR [ecx],al
    3305:	60                   	pusha  
    3306:	0b 05 00 00 02 91    	or     eax,DWORD PTR ds:0x91020000
    330c:	00 11                	add    BYTE PTR [ecx],dl
    330e:	61                   	popa   
    330f:	0d 00 00 01 60       	or     eax,0x60010000
    3314:	fd                   	std    
    3315:	00 00                	add    BYTE PTR [eax],al
    3317:	00 02                	add    BYTE PTR [edx],al
    3319:	91                   	xchg   ecx,eax
    331a:	04 11                	add    al,0x11
    331c:	93                   	xchg   ebx,eax
    331d:	0c 00                	or     al,0x0
    331f:	00 01                	add    BYTE PTR [ecx],al
    3321:	60                   	pusha  
    3322:	fd                   	std    
    3323:	00 00                	add    BYTE PTR [eax],al
    3325:	00 02                	add    BYTE PTR [edx],al
    3327:	91                   	xchg   ecx,eax
    3328:	08 12                	or     BYTE PTR [edx],dl
    332a:	57                   	push   edi
    332b:	0c 00                	or     al,0x0
    332d:	00 01                	add    BYTE PTR [ecx],al
    332f:	62 11                	bound  edx,QWORD PTR [ecx]
    3331:	05 00 00 05 03       	add    eax,0x3050000
    3336:	ec                   	in     al,dx
    3337:	7c 00                	jl     3339 <sysEnter_Vector-0x12ccc7>
    3339:	9f                   	lahf   
    333a:	12 1c 05 00 00 01 67 	adc    bl,BYTE PTR [eax*1+0x67010000]
    3341:	17                   	pop    ss
    3342:	05 00 00 03 91       	add    eax,0x91030000
    3347:	d8 7e 12             	fdivr  DWORD PTR [esi+0x12]
    334a:	fb                   	sti    
    334b:	0c 00                	or     al,0x0
    334d:	00 01                	add    BYTE PTR [ecx],al
    334f:	68 fd 00 00 00       	push   0xfd
    3354:	02 91 68 12 38 0c    	add    dl,BYTE PTR [ecx+0xc381268]
    335a:	00 00                	add    BYTE PTR [eax],al
    335c:	01 69 27             	add    DWORD PTR [ecx+0x27],ebp
    335f:	05 00 00 03 91       	add    eax,0x91030000
    3364:	d8 7c 12 3d          	fdivr  DWORD PTR [edx+edx*1+0x3d]
    3368:	0d 00 00 01 6a       	or     eax,0x6a010000
    336d:	bf 03 00 00 02       	mov    edi,0x2000003
    3372:	91                   	xchg   ecx,eax
    3373:	58                   	pop    eax
    3374:	14 eb                	adc    al,0xeb
    3376:	2d 00 9f c7 01       	sub    eax,0x1c79f00
    337b:	00 00                	add    BYTE PTR [eax],al
    337d:	13 63 6e             	adc    esp,DWORD PTR [ebx+0x6e]
    3380:	74 00                	je     3382 <sysEnter_Vector-0x12cc7e>
    3382:	01 6c fd 00          	add    DWORD PTR [ebp+edi*8+0x0],ebp
    3386:	00 00                	add    BYTE PTR [eax],al
    3388:	02 91 6c 14 17 2e    	add    dl,BYTE PTR [ecx+0x2e17146c]
    338e:	00 9f 8b 01 00 00    	add    BYTE PTR [edi+0x18b],bl
    3394:	12 ef                	adc    ch,bh
    3396:	06                   	push   es
    3397:	00 00                	add    BYTE PTR [eax],al
    3399:	01 75 37             	add    DWORD PTR [ebp+0x37],esi
    339c:	05 00 00 02 91       	add    eax,0x91020000
    33a1:	64                   	fs
    33a2:	14 b4                	adc    al,0xb4
    33a4:	2e 00 9f ed 00 00 00 	add    BYTE PTR cs:[edi+0xed],bl
    33ab:	12 af 08 00 00 01    	adc    ch,BYTE PTR [edi+0x1000008]
    33b1:	7b 68                	jnp    341b <sysEnter_Vector-0x12cbe5>
    33b3:	01 00                	add    DWORD PTR [eax],eax
    33b5:	00 02                	add    BYTE PTR [edx],al
    33b7:	91                   	xchg   ecx,eax
    33b8:	60                   	pusha  
    33b9:	13 70 69             	adc    esi,DWORD PTR [eax+0x69]
    33bc:	64 00 01             	add    BYTE PTR fs:[ecx],al
    33bf:	7c 3d                	jl     33fe <sysEnter_Vector-0x12cc02>
    33c1:	05 00 00 03 91       	add    eax,0x91030000
    33c6:	d0 7c 12 46          	sar    BYTE PTR [edx+edx*1+0x46],1
    33ca:	0d 00 00 01 7e       	or     eax,0x7e010000
    33cf:	fd                   	std    
    33d0:	00 00                	add    BYTE PTR [eax],al
    33d2:	00 02                	add    BYTE PTR [edx],al
    33d4:	91                   	xchg   ecx,eax
    33d5:	5c                   	pop    esp
    33d6:	00 00                	add    BYTE PTR [eax],al
    33d8:	00 00                	add    BYTE PTR [eax],al
    33da:	0a 04 bf             	or     al,BYTE PTR [edi+edi*4]
    33dd:	03 00                	add    eax,DWORD PTR [eax]
    33df:	00 0a                	add    BYTE PTR [edx],cl
    33e1:	04 da                	add    al,0xda
    33e3:	02 00                	add    al,BYTE PTR [eax]
    33e5:	00 07                	add    BYTE PTR [edi],al
    33e7:	1b 01                	sbb    eax,DWORD PTR [ecx]
    33e9:	00 00                	add    BYTE PTR [eax],al
    33eb:	27                   	daa    
    33ec:	05 00 00 08 14       	add    eax,0x14080000
    33f1:	01 00                	add    DWORD PTR [eax],eax
    33f3:	00 7f 00             	add    BYTE PTR [edi+0x0],bh
    33f6:	07                   	pop    es
    33f7:	1b 01                	sbb    eax,DWORD PTR [ecx]
    33f9:	00 00                	add    BYTE PTR [eax],al
    33fb:	37                   	aaa    
    33fc:	05 00 00 08 14       	add    eax,0x14080000
    3401:	01 00                	add    DWORD PTR [eax],eax
    3403:	00 ff                	add    bh,bh
    3405:	00 0a                	add    BYTE PTR [edx],cl
    3407:	04 fd                	add    al,0xfd
    3409:	00 00                	add    BYTE PTR [eax],al
    340b:	00 07                	add    BYTE PTR [edi],al
    340d:	1b 01                	sbb    eax,DWORD PTR [ecx]
    340f:	00 00                	add    BYTE PTR [eax],al
    3411:	4d                   	dec    ebp
    3412:	05 00 00 08 14       	add    eax,0x14080000
    3417:	01 00                	add    DWORD PTR [eax],eax
    3419:	00 07                	add    BYTE PTR [edi],al
    341b:	00 16                	add    BYTE PTR [esi],dl
    341d:	78 00                	js     341f <sysEnter_Vector-0x12cbe1>
    341f:	00 00                	add    BYTE PTR [eax],al
    3421:	06                   	push   es
    3422:	33 5e 05             	xor    ebx,DWORD PTR [esi+0x5]
    3425:	00 00                	add    BYTE PTR [eax],al
    3427:	05 03 60 7c 00       	add    eax,0x7c6003
    342c:	9f                   	lahf   
    342d:	0a 04 68             	or     al,BYTE PTR [eax+ebp*2]
    3430:	01 00                	add    DWORD PTR [eax],eax
    3432:	00 16                	add    BYTE PTR [esi],dl
    3434:	10 02                	adc    BYTE PTR [edx],al
    3436:	00 00                	add    BYTE PTR [eax],al
    3438:	05 35 75 05 00       	add    eax,0x57535
    343d:	00 05 03 70 7c 00    	add    BYTE PTR ds:0x7c7003,al
    3443:	9f                   	lahf   
    3444:	0a 04 8f             	or     al,BYTE PTR [edi+ecx*4]
    3447:	01 00                	add    DWORD PTR [eax],eax
    3449:	00 16                	add    BYTE PTR [esi],dl
    344b:	33 02                	xor    eax,DWORD PTR [edx]
    344d:	00 00                	add    BYTE PTR [eax],al
    344f:	05 36 84 01 00       	add    eax,0x18436
    3454:	00 05 03 6c 7c 00    	add    BYTE PTR ds:0x7c6c03,al
    345a:	9f                   	lahf   
    345b:	00 bd 03 00 00 04    	add    BYTE PTR [ebp+0x4000003],bh
    3461:	00 5d 0e             	add    BYTE PTR [ebp+0xe],bl
    3464:	00 00                	add    BYTE PTR [eax],al
    3466:	04 01                	add    al,0x1
    3468:	c3                   	ret    
    3469:	00 00                	add    BYTE PTR [eax],al
    346b:	00 0c e3             	add    BYTE PTR [ebx+eiz*8],cl
    346e:	0d 00 00 4d 00       	or     eax,0x4d0000
    3473:	00 00                	add    BYTE PTR [eax],al
    3475:	bc 2f 00 9f 4b       	mov    esp,0x4b9f002f
    347a:	07                   	pop    es
    347b:	00 00                	add    BYTE PTR [eax],al
    347d:	64 10 00             	adc    BYTE PTR fs:[eax],al
    3480:	00 02                	add    BYTE PTR [edx],al
    3482:	b5 08                	mov    ch,0x8
    3484:	00 00                	add    BYTE PTR [eax],al
    3486:	02 28                	add    ch,BYTE PTR [eax]
    3488:	30 00                	xor    BYTE PTR [eax],al
    348a:	00 00                	add    BYTE PTR [eax],al
    348c:	03 04 de             	add    eax,DWORD PTR [esi+ebx*8]
    348f:	07                   	pop    es
    3490:	00 00                	add    BYTE PTR [eax],al
    3492:	3a 00                	cmp    al,BYTE PTR [eax]
    3494:	00 00                	add    BYTE PTR [eax],al
    3496:	04 01                	add    al,0x1
    3498:	06                   	push   es
    3499:	48                   	dec    eax
    349a:	00 00                	add    BYTE PTR [eax],al
    349c:	00 02                	add    BYTE PTR [edx],al
    349e:	bc 08 00 00 02       	mov    esp,0x2000008
    34a3:	62 25 00 00 00 04    	bound  esp,QWORD PTR ds:0x4000000
    34a9:	01 08                	add    DWORD PTR [eax],ecx
    34ab:	3f                   	aas    
    34ac:	00 00                	add    BYTE PTR [eax],al
    34ae:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    34b1:	07                   	pop    es
    34b2:	0e                   	push   cs
    34b3:	00 00                	add    BYTE PTR [eax],al
    34b5:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    34b8:	07                   	pop    es
    34b9:	32 00                	xor    al,BYTE PTR [eax]
    34bb:	00 00                	add    BYTE PTR [eax],al
    34bd:	04 04                	add    al,0x4
    34bf:	07                   	pop    es
    34c0:	2d 00 00 00 04       	sub    eax,0x4000000
    34c5:	01 06                	add    DWORD PTR [esi],eax
    34c7:	41                   	inc    ecx
    34c8:	00 00                	add    BYTE PTR [eax],al
    34ca:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    34cd:	05 b9 00 00 00       	add    eax,0xb9
    34d2:	05 04 05 69 6e       	add    eax,0x6e690504
    34d7:	74 00                	je     34d9 <sysEnter_Vector-0x12cb27>
    34d9:	04 08                	add    al,0x8
    34db:	05 00 00 00 00       	add    eax,0x0
    34e0:	04 08                	add    al,0x8
    34e2:	07                   	pop    es
    34e3:	28 00                	sub    BYTE PTR [eax],al
    34e5:	00 00                	add    BYTE PTR [eax],al
    34e7:	04 04                	add    al,0x4
    34e9:	05 05 00 00 00       	add    eax,0x5
    34ee:	04 04                	add    al,0x4
    34f0:	07                   	pop    es
    34f1:	2a 01                	sub    al,BYTE PTR [ecx]
    34f3:	00 00                	add    BYTE PTR [eax],al
    34f5:	06                   	push   es
    34f6:	04 3a                	add    al,0x3a
    34f8:	00 00                	add    BYTE PTR [eax],al
    34fa:	00 04 0c             	add    BYTE PTR [esp+ecx*1],al
    34fd:	04 ad                	add    al,0xad
    34ff:	00 00                	add    BYTE PTR [eax],al
    3501:	00 07                	add    BYTE PTR [edi],al
    3503:	0b 0e                	or     ecx,DWORD PTR [esi]
    3505:	00 00                	add    BYTE PTR [eax],al
    3507:	01 0b                	add    DWORD PTR [ebx],ecx
    3509:	76 00                	jbe    350b <sysEnter_Vector-0x12caf5>
    350b:	00 00                	add    BYTE PTR [eax],al
    350d:	bc 2f 00 9f 5f       	mov    esp,0x5f9f002f
    3512:	00 00                	add    BYTE PTR [eax],al
    3514:	00 01                	add    BYTE PTR [ecx],al
    3516:	9c                   	pushf  
    3517:	d8 00                	fadd   DWORD PTR [eax]
    3519:	00 00                	add    BYTE PTR [eax],al
    351b:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
    351e:	01 0b                	add    DWORD PTR [ebx],ecx
    3520:	d8 00                	fadd   DWORD PTR [eax]
    3522:	00 00                	add    BYTE PTR [eax],al
    3524:	02 91 00 09 69 00    	add    dl,BYTE PTR [ecx+0x690900]
    352a:	01 0d 76 00 00 00    	add    DWORD PTR ds:0x76,ecx
    3530:	02 91 70 00 06 04    	add    dl,BYTE PTR [ecx+0x4060070]
    3536:	de 00                	fiadd  WORD PTR [eax]
    3538:	00 00                	add    BYTE PTR [eax],al
    353a:	06                   	push   es
    353b:	04 e4                	add    al,0xe4
    353d:	00 00                	add    BYTE PTR [eax],al
    353f:	00 0a                	add    BYTE PTR [edx],cl
    3541:	3a 00                	cmp    al,BYTE PTR [eax]
    3543:	00 00                	add    BYTE PTR [eax],al
    3545:	07                   	pop    es
    3546:	1e                   	push   ds
    3547:	0e                   	push   cs
    3548:	00 00                	add    BYTE PTR [eax],al
    354a:	01 22                	add    DWORD PTR [edx],esp
    354c:	99                   	cdq    
    354d:	00 00                	add    BYTE PTR [eax],al
    354f:	00 1b                	add    BYTE PTR [ebx],bl
    3551:	30 00                	xor    BYTE PTR [eax],al
    3553:	9f                   	lahf   
    3554:	3e 02 00             	add    al,BYTE PTR ds:[eax]
    3557:	00 01                	add    BYTE PTR [ecx],al
    3559:	9c                   	pushf  
    355a:	c3                   	ret    
    355b:	01 00                	add    DWORD PTR [eax],eax
    355d:	00 08                	add    BYTE PTR [eax],cl
    355f:	73 74                	jae    35d5 <sysEnter_Vector-0x12ca2b>
    3561:	72 00                	jb     3563 <sysEnter_Vector-0x12ca9d>
    3563:	01 22                	add    DWORD PTR [edx],esp
    3565:	99                   	cdq    
    3566:	00 00                	add    BYTE PTR [eax],al
    3568:	00 02                	add    BYTE PTR [edx],al
    356a:	91                   	xchg   ecx,eax
    356b:	00 08                	add    BYTE PTR [eax],cl
    356d:	6e                   	outs   dx,BYTE PTR ds:[esi]
    356e:	75 6d                	jne    35dd <sysEnter_Vector-0x12ca23>
    3570:	00 01                	add    BYTE PTR [ecx],al
    3572:	22 8b 00 00 00 02    	and    cl,BYTE PTR [ebx+0x2000000]
    3578:	91                   	xchg   ecx,eax
    3579:	04 0b                	add    al,0xb
    357b:	25 0e 00 00 01       	and    eax,0x100000e
    3580:	22 76 00             	and    dh,BYTE PTR [esi+0x0]
    3583:	00 00                	add    BYTE PTR [eax],al
    3585:	02 91 08 0b da 06    	add    dl,BYTE PTR [ecx+0x6da0b08]
    358b:	00 00                	add    BYTE PTR [eax],al
    358d:	01 22                	add    DWORD PTR [edx],esp
    358f:	76 00                	jbe    3591 <sysEnter_Vector-0x12ca6f>
    3591:	00 00                	add    BYTE PTR [eax],al
    3593:	02 91 0c 0b 2a 0e    	add    dl,BYTE PTR [ecx+0xe2a0b0c]
    3599:	00 00                	add    BYTE PTR [eax],al
    359b:	01 22                	add    DWORD PTR [edx],esp
    359d:	76 00                	jbe    359f <sysEnter_Vector-0x12ca61>
    359f:	00 00                	add    BYTE PTR [eax],al
    35a1:	02 91 10 0b 2e 01    	add    dl,BYTE PTR [ecx+0x12e0b10]
    35a7:	00 00                	add    BYTE PTR [eax],al
    35a9:	01 23                	add    DWORD PTR [ebx],esp
    35ab:	76 00                	jbe    35ad <sysEnter_Vector-0x12ca53>
    35ad:	00 00                	add    BYTE PTR [eax],al
    35af:	02 91 14 0c f1 0d    	add    dl,BYTE PTR [ecx+0xdf10c14]
    35b5:	00 00                	add    BYTE PTR [eax],al
    35b7:	01 26                	add    DWORD PTR [esi],esp
    35b9:	d3 01                	rol    DWORD PTR [ecx],cl
    35bb:	00 00                	add    BYTE PTR [eax],al
    35bd:	05 03 14 79 00       	add    eax,0x791403
    35c2:	9f                   	lahf   
    35c3:	09 74 6d 70          	or     DWORD PTR [ebp+ebp*2+0x70],esi
    35c7:	00 01                	add    BYTE PTR [ecx],al
    35c9:	28 d8                	sub    al,bl
    35cb:	01 00                	add    DWORD PTR [eax],eax
    35cd:	00 03                	add    BYTE PTR [ebx],al
    35cf:	91                   	xchg   ecx,eax
    35d0:	9e                   	sahf   
    35d1:	7f 09                	jg     35dc <sysEnter_Vector-0x12ca24>
    35d3:	63 00                	arpl   WORD PTR [eax],ax
    35d5:	01 29                	add    DWORD PTR [ecx],ebp
    35d7:	3a 00                	cmp    al,BYTE PTR [eax]
    35d9:	00 00                	add    BYTE PTR [eax],al
    35db:	02 91 66 0c d2 01    	add    dl,BYTE PTR [ecx+0x1d20c66]
    35e1:	00 00                	add    BYTE PTR [eax],al
    35e3:	01 29                	add    DWORD PTR [ecx],ebp
    35e5:	3a 00                	cmp    al,BYTE PTR [eax]
    35e7:	00 00                	add    BYTE PTR [eax],al
    35e9:	02 91 6f 0c d6 0d    	add    dl,BYTE PTR [ecx+0xdd60c6f]
    35ef:	00 00                	add    BYTE PTR [eax],al
    35f1:	01 29                	add    DWORD PTR [ecx],ebp
    35f3:	3a 00                	cmp    al,BYTE PTR [eax]
    35f5:	00 00                	add    BYTE PTR [eax],al
    35f7:	02 91 67 09 69 00    	add    dl,BYTE PTR [ecx+0x690967]
    35fd:	01 2a                	add    DWORD PTR [edx],ebp
    35ff:	76 00                	jbe    3601 <sysEnter_Vector-0x12c9ff>
    3601:	00 00                	add    BYTE PTR [eax],al
    3603:	02 91 68 0d 01 31    	add    dl,BYTE PTR [ecx+0x31010d68]
    3609:	00 9f 25 00 00 00    	add    BYTE PTR [edi+0x25],bl
    360f:	0c dd                	or     al,0xdd
    3611:	0d 00 00 01 4d       	or     eax,0x4d010000
    3616:	76 00                	jbe    3618 <sysEnter_Vector-0x12c9e8>
    3618:	00 00                	add    BYTE PTR [eax],al
    361a:	02 91 60 00 00 0e    	add    dl,BYTE PTR [ecx+0xe000060]
    3620:	3a 00                	cmp    al,BYTE PTR [eax]
    3622:	00 00                	add    BYTE PTR [eax],al
    3624:	d3 01                	rol    DWORD PTR [ecx],cl
    3626:	00 00                	add    BYTE PTR [eax],al
    3628:	0f 92 00             	setb   BYTE PTR [eax]
    362b:	00 00                	add    BYTE PTR [eax],al
    362d:	0f 00 0a             	str    WORD PTR [edx]
    3630:	c3                   	ret    
    3631:	01 00                	add    DWORD PTR [eax],eax
    3633:	00 0e                	add    BYTE PTR [esi],cl
    3635:	3a 00                	cmp    al,BYTE PTR [eax]
    3637:	00 00                	add    BYTE PTR [eax],al
    3639:	e8 01 00 00 0f       	call   f00363f <sysEnter_Vector+0xeed363f>
    363e:	92                   	xchg   edx,eax
    363f:	00 00                	add    BYTE PTR [eax],al
    3641:	00 41 00             	add    BYTE PTR [ecx+0x0],al
    3644:	10 f8                	adc    al,bh
    3646:	0d 00 00 01 69       	or     eax,0x69010000
    364b:	76 00                	jbe    364d <sysEnter_Vector-0x12c9b3>
    364d:	00 00                	add    BYTE PTR [eax],al
    364f:	59                   	pop    ecx
    3650:	32 00                	xor    al,BYTE PTR [eax]
    3652:	9f                   	lahf   
    3653:	48                   	dec    eax
    3654:	04 00                	add    al,0x0
    3656:	00 01                	add    BYTE PTR [ecx],al
    3658:	9c                   	pushf  
    3659:	f1                   	icebp  
    365a:	02 00                	add    al,BYTE PTR [eax]
    365c:	00 08                	add    BYTE PTR [eax],cl
    365e:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    3661:	00 01                	add    BYTE PTR [ecx],al
    3663:	69 99 00 00 00 02 91 	imul   ebx,DWORD PTR [ecx+0x2000000],0x66080091
    366a:	00 08 66 
    366d:	6d                   	ins    DWORD PTR es:[edi],dx
    366e:	74 00                	je     3670 <sysEnter_Vector-0x12c990>
    3670:	01 69 de             	add    DWORD PTR [ecx-0x22],ebp
    3673:	00 00                	add    BYTE PTR [eax],al
    3675:	00 02                	add    BYTE PTR [edx],al
    3677:	91                   	xchg   ecx,eax
    3678:	04 0b                	add    al,0xb
    367a:	ca 09 00             	retf   0x9
    367d:	00 01                	add    BYTE PTR [ecx],al
    367f:	69 41 00 00 00 02 91 	imul   eax,DWORD PTR [ecx+0x0],0x91020000
    3686:	08 09                	or     BYTE PTR [ecx],cl
    3688:	6c                   	ins    BYTE PTR es:[edi],dx
    3689:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    368b:	00 01                	add    BYTE PTR [ecx],al
    368d:	6b 76 00 00          	imul   esi,DWORD PTR [esi+0x0],0x0
    3691:	00 02                	add    BYTE PTR [edx],al
    3693:	91                   	xchg   ecx,eax
    3694:	6c                   	ins    BYTE PTR es:[edi],dx
    3695:	09 6e 75             	or     DWORD PTR [esi+0x75],ebp
    3698:	6d                   	ins    DWORD PTR es:[edi],dx
    3699:	00 01                	add    BYTE PTR [ecx],al
    369b:	6c                   	ins    BYTE PTR es:[edi],dx
    369c:	61                   	popa   
    369d:	00 00                	add    BYTE PTR [eax],al
    369f:	00 02                	add    BYTE PTR [edx],al
    36a1:	91                   	xchg   ecx,eax
    36a2:	68 09 69 00 01       	push   0x1006909
    36a7:	6d                   	ins    DWORD PTR es:[edi],dx
    36a8:	76 00                	jbe    36aa <sysEnter_Vector-0x12c956>
    36aa:	00 00                	add    BYTE PTR [eax],al
    36ac:	02 91 64 0c 25 0e    	add    dl,BYTE PTR [ecx+0xe250c64]
    36b2:	00 00                	add    BYTE PTR [eax],al
    36b4:	01 6d 76             	add    DWORD PTR [ebp+0x76],ebp
    36b7:	00 00                	add    BYTE PTR [eax],al
    36b9:	00 02                	add    BYTE PTR [edx],al
    36bb:	91                   	xchg   ecx,eax
    36bc:	60                   	pusha  
    36bd:	09 73 74             	or     DWORD PTR [ebx+0x74],esi
    36c0:	72 00                	jb     36c2 <sysEnter_Vector-0x12c93e>
    36c2:	01 6e 99             	add    DWORD PTR [esi-0x67],ebp
    36c5:	00 00                	add    BYTE PTR [eax],al
    36c7:	00 02                	add    BYTE PTR [edx],al
    36c9:	91                   	xchg   ecx,eax
    36ca:	5c                   	pop    esp
    36cb:	09 73 00             	or     DWORD PTR [ebx+0x0],esi
    36ce:	01 6f de             	add    DWORD PTR [edi-0x22],ebp
    36d1:	00 00                	add    BYTE PTR [eax],al
    36d3:	00 02                	add    BYTE PTR [edx],al
    36d5:	91                   	xchg   ecx,eax
    36d6:	58                   	pop    eax
    36d7:	0c 01                	or     al,0x1
    36d9:	0a 00                	or     al,BYTE PTR [eax]
    36db:	00 01                	add    BYTE PTR [ecx],al
    36dd:	71 76                	jno    3755 <sysEnter_Vector-0x12c8ab>
    36df:	00 00                	add    BYTE PTR [eax],al
    36e1:	00 02                	add    BYTE PTR [edx],al
    36e3:	91                   	xchg   ecx,eax
    36e4:	54                   	push   esp
    36e5:	0c c3                	or     al,0xc3
    36e7:	0d 00 00 01 73       	or     eax,0x73010000
    36ec:	76 00                	jbe    36ee <sysEnter_Vector-0x12c912>
    36ee:	00 00                	add    BYTE PTR [eax],al
    36f0:	02 91 50 0c 2a 0e    	add    dl,BYTE PTR [ecx+0xe2a0c50]
    36f6:	00 00                	add    BYTE PTR [eax],al
    36f8:	01 74 76 00          	add    DWORD PTR [esi+esi*2+0x0],esi
    36fc:	00 00                	add    BYTE PTR [eax],al
    36fe:	02 91 4c 0c 01 0e    	add    dl,BYTE PTR [ecx+0xe010c4c]
    3704:	00 00                	add    BYTE PTR [eax],al
    3706:	01 76 76             	add    DWORD PTR [esi+0x76],esi
    3709:	00 00                	add    BYTE PTR [eax],al
    370b:	00 02                	add    BYTE PTR [edx],al
    370d:	91                   	xchg   ecx,eax
    370e:	48                   	dec    eax
    370f:	11 cf                	adc    edi,ecx
    3711:	0d 00 00 01 80       	or     eax,0x80010000
    3716:	9d                   	popf   
    3717:	32 00                	xor    al,BYTE PTR [eax]
    3719:	9f                   	lahf   
    371a:	12 42 35             	adc    al,BYTE PTR [edx+0x35]
    371d:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
    3723:	d9 02                	fld    DWORD PTR [edx]
    3725:	00 00                	add    BYTE PTR [eax],al
    3727:	09 69 70             	or     DWORD PTR [ecx+0x70],ebp
    372a:	00 01                	add    BYTE PTR [ecx],al
    372c:	e1 f1                	loope  371f <sysEnter_Vector-0x12c8e1>
    372e:	02 00                	add    al,BYTE PTR [eax]
    3730:	00 02                	add    BYTE PTR [edx],al
    3732:	91                   	xchg   ecx,eax
    3733:	44                   	inc    esp
    3734:	00 0d 62 35 00 9f    	add    BYTE PTR ds:0x9f003562,cl
    373a:	1b 00                	sbb    eax,DWORD PTR [eax]
    373c:	00 00                	add    BYTE PTR [eax],al
    373e:	09 69 70             	or     DWORD PTR [ecx+0x70],ebp
    3741:	00 01                	add    BYTE PTR [ecx],al
    3743:	e4 f7                	in     al,0xf7
    3745:	02 00                	add    al,BYTE PTR [eax]
    3747:	00 02                	add    BYTE PTR [edx],al
    3749:	91                   	xchg   ecx,eax
    374a:	40                   	inc    eax
    374b:	00 00                	add    BYTE PTR [eax],al
    374d:	06                   	push   es
    374e:	04 8b                	add    al,0x8b
    3750:	00 00                	add    BYTE PTR [eax],al
    3752:	00 06                	add    BYTE PTR [esi],al
    3754:	04 76                	add    al,0x76
    3756:	00 00                	add    BYTE PTR [eax],al
    3758:	00 13                	add    BYTE PTR [ebx],dl
    375a:	15 0e 00 00 01       	adc    eax,0x100000e
    375f:	16                   	push   ss
    3760:	01 76 00             	add    DWORD PTR [esi+0x0],esi
    3763:	00 00                	add    BYTE PTR [eax],al
    3765:	a1 36 00 9f 33       	mov    eax,ds:0x339f0036
    376a:	00 00                	add    BYTE PTR [eax],al
    376c:	00 01                	add    BYTE PTR [ecx],al
    376e:	9c                   	pushf  
    376f:	53                   	push   ebx
    3770:	03 00                	add    eax,DWORD PTR [eax]
    3772:	00 14 62             	add    BYTE PTR [edx+eiz*2],dl
    3775:	75 66                	jne    37dd <sysEnter_Vector-0x12c823>
    3777:	00 01                	add    BYTE PTR [ecx],al
    3779:	16                   	push   ss
    377a:	01 99 00 00 00 02    	add    DWORD PTR [ecx+0x2000000],ebx
    3780:	91                   	xchg   ecx,eax
    3781:	00 14 66             	add    BYTE PTR [esi+eiz*2],dl
    3784:	6d                   	ins    DWORD PTR es:[edi],dx
    3785:	74 00                	je     3787 <sysEnter_Vector-0x12c879>
    3787:	01 16                	add    DWORD PTR [esi],edx
    3789:	01 de                	add    esi,ebx
    378b:	00 00                	add    BYTE PTR [eax],al
    378d:	00 02                	add    BYTE PTR [edx],al
    378f:	91                   	xchg   ecx,eax
    3790:	04 15                	add    al,0x15
    3792:	16                   	push   ss
    3793:	ca 09 00             	retf   0x9
    3796:	00 01                	add    BYTE PTR [ecx],al
    3798:	18 01                	sbb    BYTE PTR [ecx],al
    379a:	41                   	inc    ecx
    379b:	00 00                	add    BYTE PTR [eax],al
    379d:	00 02                	add    BYTE PTR [edx],al
    379f:	91                   	xchg   ecx,eax
    37a0:	68 17 69 00 01       	push   0x1006917
    37a5:	19 01                	sbb    DWORD PTR [ecx],eax
    37a7:	76 00                	jbe    37a9 <sysEnter_Vector-0x12c857>
    37a9:	00 00                	add    BYTE PTR [eax],al
    37ab:	02 91 6c 00 13 f9    	add    dl,BYTE PTR [ecx-0x6ecff94]
    37b1:	0d 00 00 01 21       	or     eax,0x21010000
    37b6:	01 76 00             	add    DWORD PTR [esi+0x0],esi
    37b9:	00 00                	add    BYTE PTR [eax],al
    37bb:	d4 36                	aam    0x36
    37bd:	00 9f 33 00 00 00    	add    BYTE PTR [edi+0x33],bl
    37c3:	01 9c a9 03 00 00 14 	add    DWORD PTR [ecx+ebp*4+0x14000003],ebx
    37ca:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    37cd:	00 01                	add    BYTE PTR [ecx],al
    37cf:	21 01                	and    DWORD PTR [ecx],eax
    37d1:	99                   	cdq    
    37d2:	00 00                	add    BYTE PTR [eax],al
    37d4:	00 02                	add    BYTE PTR [edx],al
    37d6:	91                   	xchg   ecx,eax
    37d7:	00 14 66             	add    BYTE PTR [esi+eiz*2],dl
    37da:	6d                   	ins    DWORD PTR es:[edi],dx
    37db:	74 00                	je     37dd <sysEnter_Vector-0x12c823>
    37dd:	01 21                	add    DWORD PTR [ecx],esp
    37df:	01 de                	add    esi,ebx
    37e1:	00 00                	add    BYTE PTR [eax],al
    37e3:	00 02                	add    BYTE PTR [edx],al
    37e5:	91                   	xchg   ecx,eax
    37e6:	04 15                	add    al,0x15
    37e8:	16                   	push   ss
    37e9:	ca 09 00             	retf   0x9
    37ec:	00 01                	add    BYTE PTR [ecx],al
    37ee:	23 01                	and    eax,DWORD PTR [ecx]
    37f0:	41                   	inc    ecx
    37f1:	00 00                	add    BYTE PTR [eax],al
    37f3:	00 02                	add    BYTE PTR [edx],al
    37f5:	91                   	xchg   ecx,eax
    37f6:	68 17 69 00 01       	push   0x1006917
    37fb:	24 01                	and    al,0x1
    37fd:	76 00                	jbe    37ff <sysEnter_Vector-0x12c801>
    37ff:	00 00                	add    BYTE PTR [eax],al
    3801:	02 91 6c 00 18 78    	add    dl,BYTE PTR [ecx+0x7818006c]
    3807:	00 00                	add    BYTE PTR [eax],al
    3809:	00 03                	add    BYTE PTR [ebx],al
    380b:	33 ba 03 00 00 05    	xor    edi,DWORD PTR [edx+0x5000003]
    3811:	03 60 7c             	add    esp,DWORD PTR [eax+0x7c]
    3814:	00 9f 06 04 99 00    	add    BYTE PTR [edi+0x990406],bl
    381a:	00 00                	add    BYTE PTR [eax],al
    381c:	00 dc                	add    ah,bl
    381e:	00 00                	add    BYTE PTR [eax],al
    3820:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3823:	b3 0f                	mov    bl,0xf
    3825:	00 00                	add    BYTE PTR [eax],al
    3827:	04 01                	add    al,0x1
    3829:	c3                   	ret    
    382a:	00 00                	add    BYTE PTR [eax],al
    382c:	00 0c 3c             	add    BYTE PTR [esp+edi*1],cl
    382f:	0e                   	push   cs
    3830:	00 00                	add    BYTE PTR [eax],al
    3832:	4d                   	dec    ebp
    3833:	00 00                	add    BYTE PTR [eax],al
    3835:	00 08                	add    BYTE PTR [eax],cl
    3837:	37                   	aaa    
    3838:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
    383e:	2c 12                	sub    al,0x12
    3840:	00 00                	add    BYTE PTR [eax],al
    3842:	02 01                	add    al,BYTE PTR [ecx]
    3844:	08 3f                	or     BYTE PTR [edi],bh
    3846:	00 00                	add    BYTE PTR [eax],al
    3848:	00 02                	add    BYTE PTR [edx],al
    384a:	02 07                	add    al,BYTE PTR [edi]
    384c:	0e                   	push   cs
    384d:	00 00                	add    BYTE PTR [eax],al
    384f:	00 02                	add    BYTE PTR [edx],al
    3851:	04 07                	add    al,0x7
    3853:	32 00                	xor    al,BYTE PTR [eax]
    3855:	00 00                	add    BYTE PTR [eax],al
    3857:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    385a:	2d 00 00 00 02       	sub    eax,0x2000000
    385f:	01 06                	add    DWORD PTR [esi],eax
    3861:	41                   	inc    ecx
    3862:	00 00                	add    BYTE PTR [eax],al
    3864:	00 02                	add    BYTE PTR [edx],al
    3866:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    386c:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3873:	02 08                	add    cl,BYTE PTR [eax]
    3875:	05 00 00 00 00       	add    eax,0x0
    387a:	02 08                	add    cl,BYTE PTR [eax]
    387c:	07                   	pop    es
    387d:	28 00                	sub    BYTE PTR [eax],al
    387f:	00 00                	add    BYTE PTR [eax],al
    3881:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    3888:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    388b:	2a 01                	sub    al,BYTE PTR [ecx]
    388d:	00 00                	add    BYTE PTR [eax],al
    388f:	04 04                	add    al,0x4
    3891:	78 00                	js     3893 <sysEnter_Vector-0x12c76d>
    3893:	00 00                	add    BYTE PTR [eax],al
    3895:	02 01                	add    al,BYTE PTR [ecx]
    3897:	06                   	push   es
    3898:	48                   	dec    eax
    3899:	00 00                	add    BYTE PTR [eax],al
    389b:	00 02                	add    BYTE PTR [edx],al
    389d:	0c 04                	or     al,0x4
    389f:	ad                   	lods   eax,DWORD PTR ds:[esi]
    38a0:	00 00                	add    BYTE PTR [eax],al
    38a2:	00 05 48 0e 00 00    	add    BYTE PTR ds:0xe48,al
    38a8:	01 11                	add    DWORD PTR [ecx],edx
    38aa:	08 37                	or     BYTE PTR [edi],dh
    38ac:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
    38b2:	01 9c b8 00 00 00 06 	add    DWORD PTR [eax+edi*4+0x6000000],ebx
    38b9:	51                   	push   ecx
    38ba:	0e                   	push   cs
    38bb:	00 00                	add    BYTE PTR [eax],al
    38bd:	01 13                	add    DWORD PTR [ebx],edx
    38bf:	b8 00 00 00 02       	mov    eax,0x2000000
    38c4:	91                   	xchg   ecx,eax
    38c5:	67 06                	addr16 push es
    38c7:	34 0e                	xor    al,0xe
    38c9:	00 00                	add    BYTE PTR [eax],al
    38cb:	01 14 4f             	add    DWORD PTR [edi+ecx*2],edx
    38ce:	00 00                	add    BYTE PTR [eax],al
    38d0:	00 02                	add    BYTE PTR [edx],al
    38d2:	91                   	xchg   ecx,eax
    38d3:	6c                   	ins    BYTE PTR es:[edi],dx
    38d4:	00 07                	add    BYTE PTR [edi],al
    38d6:	78 00                	js     38d8 <sysEnter_Vector-0x12c728>
    38d8:	00 00                	add    BYTE PTR [eax],al
    38da:	c8 00 00 00          	enter  0x0,0x0
    38de:	08 6b 00             	or     BYTE PTR [ebx+0x0],ch
    38e1:	00 00                	add    BYTE PTR [eax],al
    38e3:	04 00                	add    al,0x0
    38e5:	09 78 00             	or     DWORD PTR [eax+0x0],edi
    38e8:	00 00                	add    BYTE PTR [eax],al
    38ea:	02 33                	add    dh,BYTE PTR [ebx]
    38ec:	d9 00                	fld    DWORD PTR [eax]
    38ee:	00 00                	add    BYTE PTR [eax],al
    38f0:	05 03 60 7c 00       	add    eax,0x7c6003
    38f5:	9f                   	lahf   
    38f6:	04 04                	add    al,0x4
    38f8:	72 00                	jb     38fa <sysEnter_Vector-0x12c706>
    38fa:	00 00                	add    BYTE PTR [eax],al
    38fc:	00 bc 01 00 00 04 00 	add    BYTE PTR [ecx+eax*1+0x40000],bh
    3903:	30 10                	xor    BYTE PTR [eax],dl
    3905:	00 00                	add    BYTE PTR [eax],al
    3907:	04 01                	add    al,0x1
    3909:	c3                   	ret    
    390a:	00 00                	add    BYTE PTR [eax],al
    390c:	00 0c 7f             	add    BYTE PTR [edi+edi*2],cl
    390f:	0e                   	push   cs
    3910:	00 00                	add    BYTE PTR [eax],al
    3912:	4d                   	dec    ebp
    3913:	00 00                	add    BYTE PTR [eax],al
    3915:	00 8c 37 00 9f 11 01 	add    BYTE PTR [edi+esi*1+0x1119f00],cl
    391c:	00 00                	add    BYTE PTR [eax],al
    391e:	87 12                	xchg   DWORD PTR [edx],edx
    3920:	00 00                	add    BYTE PTR [eax],al
    3922:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    3929:	03 91 02 00 00 02    	add    edx,DWORD PTR [ecx+0x2000002]
    392f:	d8 37                	fdiv   DWORD PTR [edi]
    3931:	00 00                	add    BYTE PTR [eax],al
    3933:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3936:	07                   	pop    es
    3937:	32 00                	xor    al,BYTE PTR [eax]
    3939:	00 00                	add    BYTE PTR [eax],al
    393b:	04 04                	add    al,0x4
    393d:	05 05 00 00 00       	add    eax,0x5
    3942:	04 08                	add    al,0x8
    3944:	05 00 00 00 00       	add    eax,0x0
    3949:	04 0c                	add    al,0xc
    394b:	04 ad                	add    al,0xad
    394d:	00 00                	add    BYTE PTR [eax],al
    394f:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3952:	06                   	push   es
    3953:	48                   	dec    eax
    3954:	00 00                	add    BYTE PTR [eax],al
    3956:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3959:	08 3f                	or     BYTE PTR [edi],bh
    395b:	00 00                	add    BYTE PTR [eax],al
    395d:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    3960:	07                   	pop    es
    3961:	0e                   	push   cs
    3962:	00 00                	add    BYTE PTR [eax],al
    3964:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3967:	07                   	pop    es
    3968:	2d 00 00 00 04       	sub    eax,0x4000000
    396d:	01 06                	add    DWORD PTR [esi],eax
    396f:	41                   	inc    ecx
    3970:	00 00                	add    BYTE PTR [eax],al
    3972:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    3975:	05 b9 00 00 00       	add    eax,0xb9
    397a:	04 08                	add    al,0x8
    397c:	07                   	pop    es
    397d:	28 00                	sub    BYTE PTR [eax],al
    397f:	00 00                	add    BYTE PTR [eax],al
    3981:	04 04                	add    al,0x4
    3983:	07                   	pop    es
    3984:	2a 01                	sub    al,BYTE PTR [ecx]
    3986:	00 00                	add    BYTE PTR [eax],al
    3988:	05 04 53 00 00       	add    eax,0x5304
    398d:	00 06                	add    BYTE PTR [esi],al
    398f:	78 0e                	js     399f <sysEnter_Vector-0x12c661>
    3991:	00 00                	add    BYTE PTR [eax],al
    3993:	01 1e                	add    DWORD PTR [esi],ebx
    3995:	8b 00                	mov    eax,DWORD PTR [eax]
    3997:	00 00                	add    BYTE PTR [eax],al
    3999:	8c 37                	mov    WORD PTR [edi],?
    399b:	00 9f 3e 00 00 00    	add    BYTE PTR [edi+0x3e],bl
    39a1:	01 9c c7 00 00 00 07 	add    DWORD PTR [edi+eax*8+0x7000000],ebx
    39a8:	a1 0b 00 00 01       	mov    eax,ds:0x100000b
    39ad:	1e                   	push   ds
    39ae:	8b 00                	mov    eax,DWORD PTR [eax]
    39b0:	00 00                	add    BYTE PTR [eax],al
    39b2:	02 91 00 08 73 72    	add    dl,BYTE PTR [ecx+0x72730800]
    39b8:	63 00                	arpl   WORD PTR [eax],ax
    39ba:	01 1e                	add    DWORD PTR [esi],ebx
    39bc:	c7 00 00 00 02 91    	mov    DWORD PTR [eax],0x91020000
    39c2:	04 00                	add    al,0x0
    39c4:	05 04 cd 00 00       	add    eax,0xcd04
    39c9:	00 09                	add    BYTE PTR [ecx],cl
    39cb:	53                   	push   ebx
    39cc:	00 00                	add    BYTE PTR [eax],al
    39ce:	00 06                	add    BYTE PTR [esi],al
    39d0:	9c                   	pushf  
    39d1:	0e                   	push   cs
    39d2:	00 00                	add    BYTE PTR [eax],al
    39d4:	01 24 8b             	add    DWORD PTR [ebx+ecx*4],esp
    39d7:	00 00                	add    BYTE PTR [eax],al
    39d9:	00 ca                	add    dl,cl
    39db:	37                   	aaa    
    39dc:	00 9f 3e 00 00 00    	add    BYTE PTR [edi+0x3e],bl
    39e2:	01 9c 08 01 00 00 07 	add    DWORD PTR [eax+ecx*1+0x7000001],ebx
    39e9:	a1 0b 00 00 01       	mov    eax,ds:0x100000b
    39ee:	24 8b                	and    al,0x8b
    39f0:	00 00                	add    BYTE PTR [eax],al
    39f2:	00 02                	add    BYTE PTR [edx],al
    39f4:	91                   	xchg   ecx,eax
    39f5:	00 08                	add    BYTE PTR [eax],cl
    39f7:	73 72                	jae    3a6b <sysEnter_Vector-0x12c595>
    39f9:	63 00                	arpl   WORD PTR [eax],ax
    39fb:	01 24 c7             	add    DWORD PTR [edi+eax*8],esp
    39fe:	00 00                	add    BYTE PTR [eax],al
    3a00:	00 02                	add    BYTE PTR [edx],al
    3a02:	91                   	xchg   ecx,eax
    3a03:	04 00                	add    al,0x0
    3a05:	06                   	push   es
    3a06:	62 0e                	bound  ecx,QWORD PTR [esi]
    3a08:	00 00                	add    BYTE PTR [eax],al
    3a0a:	01 2a                	add    DWORD PTR [edx],ebp
    3a0c:	8b 00                	mov    eax,DWORD PTR [eax]
    3a0e:	00 00                	add    BYTE PTR [eax],al
    3a10:	08 38                	or     BYTE PTR [eax],bh
    3a12:	00 9f 6f 00 00 00    	add    BYTE PTR [edi+0x6f],bl
    3a18:	01 9c 66 01 00 00 07 	add    DWORD PTR [esi+eiz*2+0x7000001],ebx
    3a1f:	a1 0b 00 00 01       	mov    eax,ds:0x100000b
    3a24:	2a 8b 00 00 00 02    	sub    cl,BYTE PTR [ebx+0x2000000]
    3a2a:	91                   	xchg   ecx,eax
    3a2b:	00 08                	add    BYTE PTR [eax],cl
    3a2d:	73 72                	jae    3aa1 <sysEnter_Vector-0x12c55f>
    3a2f:	63 00                	arpl   WORD PTR [eax],ax
    3a31:	01 2a                	add    DWORD PTR [edx],ebp
    3a33:	c7 00 00 00 02 91    	mov    DWORD PTR [eax],0x91020000
    3a39:	04 08                	add    al,0x8
    3a3b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3a3c:	00 01                	add    BYTE PTR [ecx],al
    3a3e:	2a 2c 00             	sub    ch,BYTE PTR [eax+eax*1]
    3a41:	00 00                	add    BYTE PTR [eax],al
    3a43:	02 91 08 0a 56 0e    	add    dl,BYTE PTR [ecx+0xe560a08]
    3a49:	00 00                	add    BYTE PTR [eax],al
    3a4b:	01 2c 2c             	add    DWORD PTR [esp+ebp*1],ebp
    3a4e:	00 00                	add    BYTE PTR [eax],al
    3a50:	00 02                	add    BYTE PTR [edx],al
    3a52:	91                   	xchg   ecx,eax
    3a53:	6c                   	ins    BYTE PTR es:[edi],dx
    3a54:	0a 6b 0e             	or     ch,BYTE PTR [ebx+0xe]
    3a57:	00 00                	add    BYTE PTR [eax],al
    3a59:	01 2d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ebp
    3a5f:	02 91 68 00 06 94    	add    dl,BYTE PTR [ecx-0x6bf9ff98]
    3a65:	0e                   	push   cs
    3a66:	00 00                	add    BYTE PTR [eax],al
    3a68:	01 38                	add    DWORD PTR [eax],edi
    3a6a:	8b 00                	mov    eax,DWORD PTR [eax]
    3a6c:	00 00                	add    BYTE PTR [eax],al
    3a6e:	77 38                	ja     3aa8 <sysEnter_Vector-0x12c558>
    3a70:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
    3a76:	01 9c a8 01 00 00 07 	add    DWORD PTR [eax+ebp*4+0x7000001],ebx
    3a7d:	a1 0b 00 00 01       	mov    eax,ds:0x100000b
    3a82:	38 8b 00 00 00 02    	cmp    BYTE PTR [ebx+0x2000000],cl
    3a88:	91                   	xchg   ecx,eax
    3a89:	00 08                	add    BYTE PTR [eax],cl
    3a8b:	73 72                	jae    3aff <sysEnter_Vector-0x12c501>
    3a8d:	63 00                	arpl   WORD PTR [eax],ax
    3a8f:	01 38                	add    DWORD PTR [eax],edi
    3a91:	c7 00 00 00 02 91    	mov    DWORD PTR [eax],0x91020000
    3a97:	04 08                	add    al,0x8
    3a99:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3a9a:	00 01                	add    BYTE PTR [ecx],al
    3a9c:	38 2c 00             	cmp    BYTE PTR [eax+eax*1],ch
    3a9f:	00 00                	add    BYTE PTR [eax],al
    3aa1:	02 91 08 00 0b 78    	add    dl,BYTE PTR [ecx+0x780b0008]
    3aa7:	00 00                	add    BYTE PTR [eax],al
    3aa9:	00 03                	add    BYTE PTR [ebx],al
    3aab:	33 b9 01 00 00 05    	xor    edi,DWORD PTR [ecx+0x5000001]
    3ab1:	03 60 7c             	add    esp,DWORD PTR [eax+0x7c]
    3ab4:	00 9f 05 04 8b 00    	add    BYTE PTR [edi+0x8b0405],bl
    3aba:	00 00                	add    BYTE PTR [eax],al
    3abc:	00 96 01 00 00 04    	add    BYTE PTR [esi+0x4000001],dl
    3ac2:	00 d1                	add    cl,dl
    3ac4:	10 00                	adc    BYTE PTR [eax],al
    3ac6:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3ac9:	c3                   	ret    
    3aca:	00 00                	add    BYTE PTR [eax],al
    3acc:	00 0c b3             	add    BYTE PTR [ebx+esi*4],cl
    3acf:	0e                   	push   cs
    3ad0:	00 00                	add    BYTE PTR [eax],al
    3ad2:	4d                   	dec    ebp
    3ad3:	00 00                	add    BYTE PTR [eax],al
    3ad5:	00 a0 38 00 9f 7b    	add    BYTE PTR [eax+0x7b9f0038],ah
    3adb:	00 00                	add    BYTE PTR [eax],al
    3add:	00 46 13             	add    BYTE PTR [esi+0x13],al
    3ae0:	00 00                	add    BYTE PTR [eax],al
    3ae2:	02 01                	add    al,BYTE PTR [ecx]
    3ae4:	08 3f                	or     BYTE PTR [edi],bh
    3ae6:	00 00                	add    BYTE PTR [eax],al
    3ae8:	00 02                	add    BYTE PTR [edx],al
    3aea:	02 07                	add    al,BYTE PTR [edi]
    3aec:	0e                   	push   cs
    3aed:	00 00                	add    BYTE PTR [eax],al
    3aef:	00 02                	add    BYTE PTR [edx],al
    3af1:	04 07                	add    al,0x7
    3af3:	32 00                	xor    al,BYTE PTR [eax]
    3af5:	00 00                	add    BYTE PTR [eax],al
    3af7:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3afa:	2d 00 00 00 02       	sub    eax,0x2000000
    3aff:	01 06                	add    DWORD PTR [esi],eax
    3b01:	41                   	inc    ecx
    3b02:	00 00                	add    BYTE PTR [eax],al
    3b04:	00 02                	add    BYTE PTR [edx],al
    3b06:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    3b0c:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3b13:	02 08                	add    cl,BYTE PTR [eax]
    3b15:	05 00 00 00 00       	add    eax,0x0
    3b1a:	02 08                	add    cl,BYTE PTR [eax]
    3b1c:	07                   	pop    es
    3b1d:	28 00                	sub    BYTE PTR [eax],al
    3b1f:	00 00                	add    BYTE PTR [eax],al
    3b21:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    3b28:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3b2b:	2a 01                	sub    al,BYTE PTR [ecx]
    3b2d:	00 00                	add    BYTE PTR [eax],al
    3b2f:	04 04                	add    al,0x4
    3b31:	78 00                	js     3b33 <sysEnter_Vector-0x12c4cd>
    3b33:	00 00                	add    BYTE PTR [eax],al
    3b35:	02 01                	add    al,BYTE PTR [ecx]
    3b37:	06                   	push   es
    3b38:	48                   	dec    eax
    3b39:	00 00                	add    BYTE PTR [eax],al
    3b3b:	00 05 45 02 00 00    	add    BYTE PTR ds:0x245,al
    3b41:	02 34 33             	add    dh,BYTE PTR [ebx+esi*1]
    3b44:	00 00                	add    BYTE PTR [eax],al
    3b46:	00 05 01 02 00 00    	add    BYTE PTR ds:0x201,al
    3b4c:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
    3b4f:	00 00                	add    BYTE PTR [eax],al
    3b51:	00 02                	add    BYTE PTR [edx],al
    3b53:	0c 04                	or     al,0x4
    3b55:	ad                   	lods   eax,DWORD PTR ds:[esi]
    3b56:	00 00                	add    BYTE PTR [eax],al
    3b58:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3b5b:	a2 00 00 00 06       	mov    ds:0x6000000,al
    3b60:	78 00                	js     3b62 <sysEnter_Vector-0x12c49e>
    3b62:	00 00                	add    BYTE PTR [eax],al
    3b64:	02 01                	add    al,BYTE PTR [ecx]
    3b66:	02 6a 06             	add    ch,BYTE PTR [edx+0x6]
    3b69:	00 00                	add    BYTE PTR [eax],al
    3b6b:	02 08                	add    cl,BYTE PTR [eax]
    3b6d:	04 b2                	add    al,0xb2
    3b6f:	00 00                	add    BYTE PTR [eax],al
    3b71:	00 07                	add    BYTE PTR [edi],al
    3b73:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    3b74:	0e                   	push   cs
    3b75:	00 00                	add    BYTE PTR [eax],al
    3b77:	01 1a                	add    DWORD PTR [edx],ebx
    3b79:	4f                   	dec    edi
    3b7a:	00 00                	add    BYTE PTR [eax],al
    3b7c:	00 a0 38 00 9f 5e    	add    BYTE PTR [eax+0x5e9f0038],ah
    3b82:	00 00                	add    BYTE PTR [eax],al
    3b84:	00 01                	add    BYTE PTR [ecx],al
    3b86:	9c                   	pushf  
    3b87:	1b 01                	sbb    eax,DWORD PTR [ecx]
    3b89:	00 00                	add    BYTE PTR [eax],al
    3b8b:	08 70 31             	or     BYTE PTR [eax+0x31],dh
    3b8e:	00 01                	add    BYTE PTR [ecx],al
    3b90:	1a 9c 00 00 00 02 91 	sbb    bl,BYTE PTR [eax+eax*1-0x6efe0000]
    3b97:	00 08                	add    BYTE PTR [eax],cl
    3b99:	70 32                	jo     3bcd <sysEnter_Vector-0x12c433>
    3b9b:	00 01                	add    BYTE PTR [ecx],al
    3b9d:	1a 9c 00 00 00 02 91 	sbb    bl,BYTE PTR [eax+eax*1-0x6efe0000]
    3ba4:	04 09                	add    al,0x9
    3ba6:	73 31                	jae    3bd9 <sysEnter_Vector-0x12c427>
    3ba8:	00 01                	add    BYTE PTR [ecx],al
    3baa:	1c 1b                	sbb    al,0x1b
    3bac:	01 00                	add    DWORD PTR [eax],eax
    3bae:	00 01                	add    BYTE PTR [ecx],al
    3bb0:	53                   	push   ebx
    3bb1:	09 73 32             	or     DWORD PTR [ebx+0x32],esi
    3bb4:	00 01                	add    BYTE PTR [ecx],al
    3bb6:	1d 1b 01 00 00       	sbb    eax,0x11b
    3bbb:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    3bbe:	63 31                	arpl   WORD PTR [ecx],si
    3bc0:	00 01                	add    BYTE PTR [ecx],al
    3bc2:	1e                   	push   ds
    3bc3:	25 00 00 00 02       	and    eax,0x2000000
    3bc8:	91                   	xchg   ecx,eax
    3bc9:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3bca:	09 63 32             	or     DWORD PTR [ebx+0x32],esp
    3bcd:	00 01                	add    BYTE PTR [ecx],al
    3bcf:	1e                   	push   ds
    3bd0:	25 00 00 00 02       	and    eax,0x2000000
    3bd5:	91                   	xchg   ecx,eax
    3bd6:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3bd7:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3bda:	21 01                	and    DWORD PTR [ecx],eax
    3bdc:	00 00                	add    BYTE PTR [eax],al
    3bde:	06                   	push   es
    3bdf:	25 00 00 00 0a       	and    eax,0xa000000
    3be4:	ac                   	lods   al,BYTE PTR ds:[esi]
    3be5:	0e                   	push   cs
    3be6:	00 00                	add    BYTE PTR [eax],al
    3be8:	01 2c 4f             	add    DWORD PTR [edi+ecx*2],ebp
    3beb:	00 00                	add    BYTE PTR [eax],al
    3bed:	00 fe                	add    dh,bh
    3bef:	38 00                	cmp    BYTE PTR [eax],al
    3bf1:	9f                   	lahf   
    3bf2:	1d 00 00 00 01       	sbb    eax,0x1000000
    3bf7:	9c                   	pushf  
    3bf8:	5a                   	pop    edx
    3bf9:	01 00                	add    DWORD PTR [eax],eax
    3bfb:	00 08                	add    BYTE PTR [eax],cl
    3bfd:	70 31                	jo     3c30 <sysEnter_Vector-0x12c3d0>
    3bff:	00 01                	add    BYTE PTR [ecx],al
    3c01:	2c 9c                	sub    al,0x9c
    3c03:	00 00                	add    BYTE PTR [eax],al
    3c05:	00 02                	add    BYTE PTR [edx],al
    3c07:	91                   	xchg   ecx,eax
    3c08:	00 08                	add    BYTE PTR [eax],cl
    3c0a:	70 32                	jo     3c3e <sysEnter_Vector-0x12c3c2>
    3c0c:	00 01                	add    BYTE PTR [ecx],al
    3c0e:	2c 9c                	sub    al,0x9c
    3c10:	00 00                	add    BYTE PTR [eax],al
    3c12:	00 02                	add    BYTE PTR [edx],al
    3c14:	91                   	xchg   ecx,eax
    3c15:	04 00                	add    al,0x0
    3c17:	0b 78 00             	or     edi,DWORD PTR [eax+0x0]
    3c1a:	00 00                	add    BYTE PTR [eax],al
    3c1c:	03 33                	add    esi,DWORD PTR [ebx]
    3c1e:	6b 01 00             	imul   eax,DWORD PTR [ecx],0x0
    3c21:	00 05 03 60 7c 00    	add    BYTE PTR ds:0x7c6003,al
    3c27:	9f                   	lahf   
    3c28:	04 04                	add    al,0x4
    3c2a:	72 00                	jb     3c2c <sysEnter_Vector-0x12c3d4>
    3c2c:	00 00                	add    BYTE PTR [eax],al
    3c2e:	0b 10                	or     edx,DWORD PTR [eax]
    3c30:	02 00                	add    al,BYTE PTR [eax]
    3c32:	00 04 35 82 01 00 00 	add    BYTE PTR [esi*1+0x182],al
    3c39:	05 03 70 7c 00       	add    eax,0x7c7003
    3c3e:	9f                   	lahf   
    3c3f:	04 04                	add    al,0x4
    3c41:	8a 00                	mov    al,BYTE PTR [eax]
    3c43:	00 00                	add    BYTE PTR [eax],al
    3c45:	0b 33                	or     esi,DWORD PTR [ebx]
    3c47:	02 00                	add    al,BYTE PTR [eax]
    3c49:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    3c4c:	7f 00                	jg     3c4e <sysEnter_Vector-0x12c3b2>
    3c4e:	00 00                	add    BYTE PTR [eax],al
    3c50:	05 03 6c 7c 00       	add    eax,0x7c6c03
    3c55:	9f                   	lahf   
    3c56:	00 27                	add    BYTE PTR [edi],ah
    3c58:	01 00                	add    DWORD PTR [eax],eax
    3c5a:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3c5d:	7f 11                	jg     3c70 <sysEnter_Vector-0x12c390>
    3c5f:	00 00                	add    BYTE PTR [eax],al
    3c61:	04 01                	add    al,0x1
    3c63:	c3                   	ret    
    3c64:	00 00                	add    BYTE PTR [eax],al
    3c66:	00 0c e5 0e 00 00 4d 	add    BYTE PTR [eiz*8+0x4d00000e],cl
    3c6d:	00 00                	add    BYTE PTR [eax],al
    3c6f:	00 1c 39             	add    BYTE PTR [ecx+edi*1],bl
    3c72:	00 9f c7 00 00 00    	add    BYTE PTR [edi+0xc7],bl
    3c78:	02 14 00             	add    dl,BYTE PTR [eax+eax*1]
    3c7b:	00 02                	add    BYTE PTR [edx],al
    3c7d:	04 05                	add    al,0x5
    3c7f:	69 6e 74 00 03 04 07 	imul   ebp,DWORD PTR [esi+0x74],0x7040300
    3c86:	32 00                	xor    al,BYTE PTR [eax]
    3c88:	00 00                	add    BYTE PTR [eax],al
    3c8a:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    3c91:	03 08                	add    ecx,DWORD PTR [eax]
    3c93:	05 00 00 00 00       	add    eax,0x0
    3c98:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    3c9b:	ad                   	lods   eax,DWORD PTR ds:[esi]
    3c9c:	00 00                	add    BYTE PTR [eax],al
    3c9e:	00 03                	add    BYTE PTR [ebx],al
    3ca0:	01 06                	add    DWORD PTR [esi],eax
    3ca2:	48                   	dec    eax
    3ca3:	00 00                	add    BYTE PTR [eax],al
    3ca5:	00 04 c8             	add    BYTE PTR [eax+ecx*8],al
    3ca8:	0e                   	push   cs
    3ca9:	00 00                	add    BYTE PTR [eax],al
    3cab:	01 04 8f             	add    DWORD PTR [edi+ecx*4],eax
    3cae:	00 00                	add    BYTE PTR [eax],al
    3cb0:	00 1c 39             	add    BYTE PTR [ecx+edi*1],bl
    3cb3:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    3cb9:	01 9c 8f 00 00 00 05 	add    DWORD PTR [edi+ecx*4+0x5000000],ebx
    3cc0:	73 31                	jae    3cf3 <sysEnter_Vector-0x12c30d>
    3cc2:	00 01                	add    BYTE PTR [ecx],al
    3cc4:	04 8f                	add    al,0x8f
    3cc6:	00 00                	add    BYTE PTR [eax],al
    3cc8:	00 02                	add    BYTE PTR [edx],al
    3cca:	91                   	xchg   ecx,eax
    3ccb:	00 05 73 32 00 01    	add    BYTE PTR ds:0x1003273,al
    3cd1:	04 95                	add    al,0x95
    3cd3:	00 00                	add    BYTE PTR [eax],al
    3cd5:	00 02                	add    BYTE PTR [edx],al
    3cd7:	91                   	xchg   ecx,eax
    3cd8:	04 06                	add    al,0x6
    3cda:	73 00                	jae    3cdc <sysEnter_Vector-0x12c324>
    3cdc:	01 06                	add    DWORD PTR [esi],eax
    3cde:	8f 00                	pop    DWORD PTR [eax]
    3ce0:	00 00                	add    BYTE PTR [eax],al
    3ce2:	02 91 74 00 07 04    	add    dl,BYTE PTR [ecx+0x4070074]
    3ce8:	48                   	dec    eax
    3ce9:	00 00                	add    BYTE PTR [eax],al
    3ceb:	00 07                	add    BYTE PTR [edi],al
    3ced:	04 9b                	add    al,0x9b
    3cef:	00 00                	add    BYTE PTR [eax],al
    3cf1:	00 08                	add    BYTE PTR [eax],cl
    3cf3:	48                   	dec    eax
    3cf4:	00 00                	add    BYTE PTR [eax],al
    3cf6:	00 04 dd 0e 00 00 01 	add    BYTE PTR [ebx*8+0x100000e],al
    3cfd:	0e                   	push   cs
    3cfe:	8f 00                	pop    DWORD PTR [eax]
    3d00:	00 00                	add    BYTE PTR [eax],al
    3d02:	5c                   	pop    esp
    3d03:	39 00                	cmp    DWORD PTR [eax],eax
    3d05:	9f                   	lahf   
    3d06:	40                   	inc    eax
    3d07:	00 00                	add    BYTE PTR [eax],al
    3d09:	00 01                	add    BYTE PTR [ecx],al
    3d0b:	9c                   	pushf  
    3d0c:	e0 00                	loopne 3d0e <sysEnter_Vector-0x12c2f2>
    3d0e:	00 00                	add    BYTE PTR [eax],al
    3d10:	05 73 31 00 01       	add    eax,0x1003173
    3d15:	0e                   	push   cs
    3d16:	8f 00                	pop    DWORD PTR [eax]
    3d18:	00 00                	add    BYTE PTR [eax],al
    3d1a:	02 91 00 05 73 32    	add    dl,BYTE PTR [ecx+0x32730500]
    3d20:	00 01                	add    BYTE PTR [ecx],al
    3d22:	0e                   	push   cs
    3d23:	95                   	xchg   ebp,eax
    3d24:	00 00                	add    BYTE PTR [eax],al
    3d26:	00 02                	add    BYTE PTR [edx],al
    3d28:	91                   	xchg   ecx,eax
    3d29:	04 06                	add    al,0x6
    3d2b:	73 00                	jae    3d2d <sysEnter_Vector-0x12c2d3>
    3d2d:	01 10                	add    DWORD PTR [eax],edx
    3d2f:	8f 00                	pop    DWORD PTR [eax]
    3d31:	00 00                	add    BYTE PTR [eax],al
    3d33:	02 91 74 00 09 d5    	add    dl,BYTE PTR [ecx-0x2af6ff8c]
    3d39:	0e                   	push   cs
    3d3a:	00 00                	add    BYTE PTR [eax],al
    3d3c:	01 18                	add    DWORD PTR [eax],ebx
    3d3e:	8f 00                	pop    DWORD PTR [eax]
    3d40:	00 00                	add    BYTE PTR [eax],al
    3d42:	9c                   	pushf  
    3d43:	39 00                	cmp    DWORD PTR [eax],eax
    3d45:	9f                   	lahf   
    3d46:	47                   	inc    edi
    3d47:	00 00                	add    BYTE PTR [eax],al
    3d49:	00 01                	add    BYTE PTR [ecx],al
    3d4b:	9c                   	pushf  
    3d4c:	05 73 31 00 01       	add    eax,0x1003173
    3d51:	18 8f 00 00 00 02    	sbb    BYTE PTR [edi+0x2000000],cl
    3d57:	91                   	xchg   ecx,eax
    3d58:	00 05 73 32 00 01    	add    BYTE PTR ds:0x1003273,al
    3d5e:	18 95 00 00 00 02    	sbb    BYTE PTR [ebp+0x2000000],dl
    3d64:	91                   	xchg   ecx,eax
    3d65:	04 0a                	add    al,0xa
    3d67:	cf                   	iret   
    3d68:	0e                   	push   cs
    3d69:	00 00                	add    BYTE PTR [eax],al
    3d6b:	01 18                	add    DWORD PTR [eax],ebx
    3d6d:	2c 00                	sub    al,0x0
    3d6f:	00 00                	add    BYTE PTR [eax],al
    3d71:	02 91 08 06 73 00    	add    dl,BYTE PTR [ecx+0x730608]
    3d77:	01 1a                	add    DWORD PTR [edx],ebx
    3d79:	8f 00                	pop    DWORD PTR [eax]
    3d7b:	00 00                	add    BYTE PTR [eax],al
    3d7d:	02 91 74 00 00 42    	add    dl,BYTE PTR [ecx+0x42000074]
    3d83:	01 00                	add    DWORD PTR [eax],eax
    3d85:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3d88:	1c 12                	sbb    al,0x12
    3d8a:	00 00                	add    BYTE PTR [eax],al
    3d8c:	04 01                	add    al,0x1
    3d8e:	c3                   	ret    
    3d8f:	00 00                	add    BYTE PTR [eax],al
    3d91:	00 0c 03             	add    BYTE PTR [ebx+eax*1],cl
    3d94:	0f 00 00             	sldt   WORD PTR [eax]
    3d97:	4d                   	dec    ebp
    3d98:	00 00                	add    BYTE PTR [eax],al
    3d9a:	00 e4                	add    ah,ah
    3d9c:	39 00                	cmp    DWORD PTR [eax],eax
    3d9e:	9f                   	lahf   
    3d9f:	89 00                	mov    DWORD PTR [eax],eax
    3da1:	00 00                	add    BYTE PTR [eax],al
    3da3:	71 14                	jno    3db9 <sysEnter_Vector-0x12c247>
    3da5:	00 00                	add    BYTE PTR [eax],al
    3da7:	02 01                	add    al,BYTE PTR [ecx]
    3da9:	08 3f                	or     BYTE PTR [edi],bh
    3dab:	00 00                	add    BYTE PTR [eax],al
    3dad:	00 02                	add    BYTE PTR [edx],al
    3daf:	02 07                	add    al,BYTE PTR [edi]
    3db1:	0e                   	push   cs
    3db2:	00 00                	add    BYTE PTR [eax],al
    3db4:	00 02                	add    BYTE PTR [edx],al
    3db6:	04 07                	add    al,0x7
    3db8:	32 00                	xor    al,BYTE PTR [eax]
    3dba:	00 00                	add    BYTE PTR [eax],al
    3dbc:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3dbf:	2d 00 00 00 02       	sub    eax,0x2000000
    3dc4:	01 06                	add    DWORD PTR [esi],eax
    3dc6:	41                   	inc    ecx
    3dc7:	00 00                	add    BYTE PTR [eax],al
    3dc9:	00 02                	add    BYTE PTR [edx],al
    3dcb:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    3dd1:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3dd8:	02 08                	add    cl,BYTE PTR [eax]
    3dda:	05 00 00 00 00       	add    eax,0x0
    3ddf:	02 08                	add    cl,BYTE PTR [eax]
    3de1:	07                   	pop    es
    3de2:	28 00                	sub    BYTE PTR [eax],al
    3de4:	00 00                	add    BYTE PTR [eax],al
    3de6:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    3ded:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3df0:	2a 01                	sub    al,BYTE PTR [ecx]
    3df2:	00 00                	add    BYTE PTR [eax],al
    3df4:	04 04                	add    al,0x4
    3df6:	78 00                	js     3df8 <sysEnter_Vector-0x12c208>
    3df8:	00 00                	add    BYTE PTR [eax],al
    3dfa:	02 01                	add    al,BYTE PTR [ecx]
    3dfc:	06                   	push   es
    3dfd:	48                   	dec    eax
    3dfe:	00 00                	add    BYTE PTR [eax],al
    3e00:	00 05 45 02 00 00    	add    BYTE PTR ds:0x245,al
    3e06:	02 34 33             	add    dh,BYTE PTR [ebx+esi*1]
    3e09:	00 00                	add    BYTE PTR [eax],al
    3e0b:	00 05 01 02 00 00    	add    BYTE PTR ds:0x201,al
    3e11:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
    3e14:	00 00                	add    BYTE PTR [eax],al
    3e16:	00 02                	add    BYTE PTR [edx],al
    3e18:	0c 04                	or     al,0x4
    3e1a:	ad                   	lods   eax,DWORD PTR ds:[esi]
    3e1b:	00 00                	add    BYTE PTR [eax],al
    3e1d:	00 02                	add    BYTE PTR [edx],al
    3e1f:	01 02                	add    DWORD PTR [edx],eax
    3e21:	6a 06                	push   0x6
    3e23:	00 00                	add    BYTE PTR [eax],al
    3e25:	02 08                	add    cl,BYTE PTR [eax]
    3e27:	04 b2                	add    al,0xb2
    3e29:	00 00                	add    BYTE PTR [eax],al
    3e2b:	00 06                	add    BYTE PTR [esi],al
    3e2d:	1a 0f                	sbb    cl,BYTE PTR [edi]
    3e2f:	00 00                	add    BYTE PTR [eax],al
    3e31:	01 09                	add    DWORD PTR [ecx],ecx
    3e33:	9c                   	pushf  
    3e34:	00 00                	add    BYTE PTR [eax],al
    3e36:	00 e4                	add    ah,ah
    3e38:	39 00                	cmp    DWORD PTR [eax],eax
    3e3a:	9f                   	lahf   
    3e3b:	30 00                	xor    BYTE PTR [eax],al
    3e3d:	00 00                	add    BYTE PTR [eax],al
    3e3f:	01 9c d0 00 00 00 07 	add    DWORD PTR [eax+edx*8+0x7000000],ebx
    3e46:	63 00                	arpl   WORD PTR [eax],ax
    3e48:	01 09                	add    DWORD PTR [ecx],ecx
    3e4a:	78 00                	js     3e4c <sysEnter_Vector-0x12c1b4>
    3e4c:	00 00                	add    BYTE PTR [eax],al
    3e4e:	02 91 74 00 08 fa    	add    dl,BYTE PTR [ecx-0x5f7ff8c]
    3e54:	0e                   	push   cs
    3e55:	00 00                	add    BYTE PTR [eax],al
    3e57:	01 0e                	add    DWORD PTR [esi],ecx
    3e59:	9c                   	pushf  
    3e5a:	00 00                	add    BYTE PTR [eax],al
    3e5c:	00 14 3a             	add    BYTE PTR [edx+edi*1],dl
    3e5f:	00 9f 59 00 00 00    	add    BYTE PTR [edi+0x59],bl
    3e65:	01 9c 06 01 00 00 07 	add    DWORD PTR [esi+eax*1+0x7000001],ebx
    3e6c:	73 74                	jae    3ee2 <sysEnter_Vector-0x12c11e>
    3e6e:	72 00                	jb     3e70 <sysEnter_Vector-0x12c190>
    3e70:	01 0e                	add    DWORD PTR [esi],ecx
    3e72:	72 00                	jb     3e74 <sysEnter_Vector-0x12c18c>
    3e74:	00 00                	add    BYTE PTR [eax],al
    3e76:	02 91 00 09 63 6e    	add    dl,BYTE PTR [ecx+0x6e630900]
    3e7c:	74 00                	je     3e7e <sysEnter_Vector-0x12c182>
    3e7e:	01 10                	add    DWORD PTR [eax],edx
    3e80:	4f                   	dec    edi
    3e81:	00 00                	add    BYTE PTR [eax],al
    3e83:	00 02                	add    BYTE PTR [edx],al
    3e85:	91                   	xchg   ecx,eax
    3e86:	74 00                	je     3e88 <sysEnter_Vector-0x12c178>
    3e88:	0a 78 00             	or     bh,BYTE PTR [eax+0x0]
    3e8b:	00 00                	add    BYTE PTR [eax],al
    3e8d:	03 33                	add    esi,DWORD PTR [ebx]
    3e8f:	17                   	pop    ss
    3e90:	01 00                	add    DWORD PTR [eax],eax
    3e92:	00 05 03 60 7c 00    	add    BYTE PTR ds:0x7c6003,al
    3e98:	9f                   	lahf   
    3e99:	04 04                	add    al,0x4
    3e9b:	72 00                	jb     3e9d <sysEnter_Vector-0x12c163>
    3e9d:	00 00                	add    BYTE PTR [eax],al
    3e9f:	0a 10                	or     dl,BYTE PTR [eax]
    3ea1:	02 00                	add    al,BYTE PTR [eax]
    3ea3:	00 04 35 2e 01 00 00 	add    BYTE PTR [esi*1+0x12e],al
    3eaa:	05 03 70 7c 00       	add    eax,0x7c7003
    3eaf:	9f                   	lahf   
    3eb0:	04 04                	add    al,0x4
    3eb2:	8a 00                	mov    al,BYTE PTR [eax]
    3eb4:	00 00                	add    BYTE PTR [eax],al
    3eb6:	0a 33                	or     dh,BYTE PTR [ebx]
    3eb8:	02 00                	add    al,BYTE PTR [eax]
    3eba:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    3ebd:	7f 00                	jg     3ebf <sysEnter_Vector-0x12c141>
    3ebf:	00 00                	add    BYTE PTR [eax],al
    3ec1:	05 03 6c 7c 00       	add    eax,0x7c6c03
    3ec6:	9f                   	lahf   
    3ec7:	00 d4                	add    ah,dl
    3ec9:	01 00                	add    DWORD PTR [eax],eax
    3ecb:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3ece:	c3                   	ret    
    3ecf:	12 00                	adc    al,BYTE PTR [eax]
    3ed1:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3ed4:	c3                   	ret    
    3ed5:	00 00                	add    BYTE PTR [eax],al
    3ed7:	00 0c 46             	add    BYTE PTR [esi+eax*2],cl
    3eda:	0f 00 00             	sldt   WORD PTR [eax]
    3edd:	4d                   	dec    ebp
    3ede:	00 00                	add    BYTE PTR [eax],al
    3ee0:	00 70 3a             	add    BYTE PTR [eax+0x3a],dh
    3ee3:	00 9f a2 00 00 00    	add    BYTE PTR [edi+0xa2],bl
    3ee9:	3a 15 00 00 02 01    	cmp    dl,BYTE PTR ds:0x1020000
    3eef:	08 3f                	or     BYTE PTR [edi],bh
    3ef1:	00 00                	add    BYTE PTR [eax],al
    3ef3:	00 02                	add    BYTE PTR [edx],al
    3ef5:	02 07                	add    al,BYTE PTR [edi]
    3ef7:	0e                   	push   cs
    3ef8:	00 00                	add    BYTE PTR [eax],al
    3efa:	00 02                	add    BYTE PTR [edx],al
    3efc:	04 07                	add    al,0x7
    3efe:	32 00                	xor    al,BYTE PTR [eax]
    3f00:	00 00                	add    BYTE PTR [eax],al
    3f02:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3f05:	2d 00 00 00 02       	sub    eax,0x2000000
    3f0a:	01 06                	add    DWORD PTR [esi],eax
    3f0c:	41                   	inc    ecx
    3f0d:	00 00                	add    BYTE PTR [eax],al
    3f0f:	00 02                	add    BYTE PTR [edx],al
    3f11:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    3f17:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3f1e:	02 08                	add    cl,BYTE PTR [eax]
    3f20:	05 00 00 00 00       	add    eax,0x0
    3f25:	02 08                	add    cl,BYTE PTR [eax]
    3f27:	07                   	pop    es
    3f28:	28 00                	sub    BYTE PTR [eax],al
    3f2a:	00 00                	add    BYTE PTR [eax],al
    3f2c:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    3f33:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3f36:	2a 01                	sub    al,BYTE PTR [ecx]
    3f38:	00 00                	add    BYTE PTR [eax],al
    3f3a:	04 04                	add    al,0x4
    3f3c:	78 00                	js     3f3e <sysEnter_Vector-0x12c0c2>
    3f3e:	00 00                	add    BYTE PTR [eax],al
    3f40:	02 01                	add    al,BYTE PTR [ecx]
    3f42:	06                   	push   es
    3f43:	48                   	dec    eax
    3f44:	00 00                	add    BYTE PTR [eax],al
    3f46:	00 05 45 02 00 00    	add    BYTE PTR ds:0x245,al
    3f4c:	02 34 33             	add    dh,BYTE PTR [ebx+esi*1]
    3f4f:	00 00                	add    BYTE PTR [eax],al
    3f51:	00 05 01 02 00 00    	add    BYTE PTR ds:0x201,al
    3f57:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
    3f5a:	00 00                	add    BYTE PTR [eax],al
    3f5c:	00 05 91 02 00 00    	add    BYTE PTR ds:0x291,al
    3f62:	03 d8                	add    ebx,eax
    3f64:	33 00                	xor    eax,DWORD PTR [eax]
    3f66:	00 00                	add    BYTE PTR [eax],al
    3f68:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    3f6b:	ad                   	lods   eax,DWORD PTR ds:[esi]
    3f6c:	00 00                	add    BYTE PTR [eax],al
    3f6e:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3f71:	ad                   	lods   eax,DWORD PTR ds:[esi]
    3f72:	00 00                	add    BYTE PTR [eax],al
    3f74:	00 06                	add    BYTE PTR [esi],al
    3f76:	78 00                	js     3f78 <sysEnter_Vector-0x12c088>
    3f78:	00 00                	add    BYTE PTR [eax],al
    3f7a:	02 01                	add    al,BYTE PTR [ecx]
    3f7c:	02 6a 06             	add    ch,BYTE PTR [edx+0x6]
    3f7f:	00 00                	add    BYTE PTR [eax],al
    3f81:	02 08                	add    cl,BYTE PTR [eax]
    3f83:	04 b2                	add    al,0xb2
    3f85:	00 00                	add    BYTE PTR [eax],al
    3f87:	00 07                	add    BYTE PTR [edi],al
    3f89:	26 0f 00 00          	sldt   WORD PTR es:[eax]
    3f8d:	01 04 95 00 00 00 70 	add    DWORD PTR [edx*4+0x70000000],eax
    3f94:	3a 00                	cmp    al,BYTE PTR [eax]
    3f96:	9f                   	lahf   
    3f97:	31 00                	xor    DWORD PTR [eax],eax
    3f99:	00 00                	add    BYTE PTR [eax],al
    3f9b:	01 9c f6 00 00 00 08 	add    DWORD PTR [esi+esi*8+0x8000000],ebx
    3fa2:	73 74                	jae    4018 <sysEnter_Vector-0x12bfe8>
    3fa4:	72 00                	jb     3fa6 <sysEnter_Vector-0x12c05a>
    3fa6:	01 04 a7             	add    DWORD PTR [edi+eiz*4],eax
    3fa9:	00 00                	add    BYTE PTR [eax],al
    3fab:	00 02                	add    BYTE PTR [edx],al
    3fad:	91                   	xchg   ecx,eax
    3fae:	00 09                	add    BYTE PTR [ecx],cl
    3fb0:	72 65                	jb     4017 <sysEnter_Vector-0x12bfe9>
    3fb2:	74 00                	je     3fb4 <sysEnter_Vector-0x12c04c>
    3fb4:	01 05 95 00 00 00    	add    DWORD PTR ds:0x95,eax
    3fba:	02 91 74 00 0a 2e    	add    dl,BYTE PTR [ecx+0x2e0a0074]
    3fc0:	0f 00 00             	sldt   WORD PTR [eax]
    3fc3:	01 0b                	add    DWORD PTR [ebx],ecx
    3fc5:	95                   	xchg   ebp,eax
    3fc6:	00 00                	add    BYTE PTR [eax],al
    3fc8:	00 a1 3a 00 9f 1a    	add    BYTE PTR [ecx+0x1a9f003a],ah
    3fce:	00 00                	add    BYTE PTR [eax],al
    3fd0:	00 01                	add    BYTE PTR [ecx],al
    3fd2:	9c                   	pushf  
    3fd3:	1e                   	push   ds
    3fd4:	01 00                	add    DWORD PTR [eax],eax
    3fd6:	00 08                	add    BYTE PTR [eax],cl
    3fd8:	73 74                	jae    404e <sysEnter_Vector-0x12bfb2>
    3fda:	72 00                	jb     3fdc <sysEnter_Vector-0x12c024>
    3fdc:	01 0b                	add    DWORD PTR [ebx],ecx
    3fde:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    3fdf:	00 00                	add    BYTE PTR [eax],al
    3fe1:	00 02                	add    BYTE PTR [edx],al
    3fe3:	91                   	xchg   ecx,eax
    3fe4:	00 00                	add    BYTE PTR [eax],al
    3fe6:	07                   	pop    es
    3fe7:	35 0f 00 00 01       	xor    eax,0x100000f
    3fec:	10 95 00 00 00 bb    	adc    BYTE PTR [ebp-0x45000000],dl
    3ff2:	3a 00                	cmp    al,BYTE PTR [eax]
    3ff4:	9f                   	lahf   
    3ff5:	39 00                	cmp    DWORD PTR [eax],eax
    3ff7:	00 00                	add    BYTE PTR [eax],al
    3ff9:	01 9c 62 01 00 00 08 	add    DWORD PTR [edx+eiz*2+0x8000001],ebx
    4000:	73 74                	jae    4076 <sysEnter_Vector-0x12bf8a>
    4002:	72 00                	jb     4004 <sysEnter_Vector-0x12bffc>
    4004:	01 10                	add    DWORD PTR [eax],edx
    4006:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    4007:	00 00                	add    BYTE PTR [eax],al
    4009:	00 02                	add    BYTE PTR [edx],al
    400b:	91                   	xchg   ecx,eax
    400c:	00 0b                	add    BYTE PTR [ebx],cl
    400e:	5a                   	pop    edx
    400f:	07                   	pop    es
    4010:	00 00                	add    BYTE PTR [eax],al
    4012:	01 10                	add    DWORD PTR [eax],edx
    4014:	95                   	xchg   ebp,eax
    4015:	00 00                	add    BYTE PTR [eax],al
    4017:	00 02                	add    BYTE PTR [edx],al
    4019:	91                   	xchg   ecx,eax
    401a:	04 09                	add    al,0x9
    401c:	72 65                	jb     4083 <sysEnter_Vector-0x12bf7d>
    401e:	74 00                	je     4020 <sysEnter_Vector-0x12bfe0>
    4020:	01 12                	add    DWORD PTR [edx],edx
    4022:	95                   	xchg   ebp,eax
    4023:	00 00                	add    BYTE PTR [eax],al
    4025:	00 02                	add    BYTE PTR [edx],al
    4027:	91                   	xchg   ecx,eax
    4028:	74 00                	je     402a <sysEnter_Vector-0x12bfd6>
    402a:	0a 3e                	or     bh,BYTE PTR [esi]
    402c:	0f 00 00             	sldt   WORD PTR [eax]
    402f:	01 18                	add    DWORD PTR [eax],ebx
    4031:	95                   	xchg   ebp,eax
    4032:	00 00                	add    BYTE PTR [eax],al
    4034:	00 f4                	add    ah,dh
    4036:	3a 00                	cmp    al,BYTE PTR [eax]
    4038:	9f                   	lahf   
    4039:	1e                   	push   ds
    403a:	00 00                	add    BYTE PTR [eax],al
    403c:	00 01                	add    BYTE PTR [ecx],al
    403e:	9c                   	pushf  
    403f:	98                   	cwde   
    4040:	01 00                	add    DWORD PTR [eax],eax
    4042:	00 08                	add    BYTE PTR [eax],cl
    4044:	73 74                	jae    40ba <sysEnter_Vector-0x12bf46>
    4046:	72 00                	jb     4048 <sysEnter_Vector-0x12bfb8>
    4048:	01 18                	add    DWORD PTR [eax],ebx
    404a:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    404b:	00 00                	add    BYTE PTR [eax],al
    404d:	00 02                	add    BYTE PTR [edx],al
    404f:	91                   	xchg   ecx,eax
    4050:	00 0b                	add    BYTE PTR [ebx],cl
    4052:	5a                   	pop    edx
    4053:	07                   	pop    es
    4054:	00 00                	add    BYTE PTR [eax],al
    4056:	01 18                	add    DWORD PTR [eax],ebx
    4058:	4f                   	dec    edi
    4059:	00 00                	add    BYTE PTR [eax],al
    405b:	00 02                	add    BYTE PTR [edx],al
    405d:	91                   	xchg   ecx,eax
    405e:	04 00                	add    al,0x0
    4060:	0c 78                	or     al,0x78
    4062:	00 00                	add    BYTE PTR [eax],al
    4064:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    4067:	a9 01 00 00 05       	test   eax,0x5000001
    406c:	03 60 7c             	add    esp,DWORD PTR [eax+0x7c]
    406f:	00 9f 04 04 72 00    	add    BYTE PTR [edi+0x720404],bl
    4075:	00 00                	add    BYTE PTR [eax],al
    4077:	0c 10                	or     al,0x10
    4079:	02 00                	add    al,BYTE PTR [eax]
    407b:	00 05 35 c0 01 00    	add    BYTE PTR ds:0x1c035,al
    4081:	00 05 03 70 7c 00    	add    BYTE PTR ds:0x7c7003,al
    4087:	9f                   	lahf   
    4088:	04 04                	add    al,0x4
    408a:	8a 00                	mov    al,BYTE PTR [eax]
    408c:	00 00                	add    BYTE PTR [eax],al
    408e:	0c 33                	or     al,0x33
    4090:	02 00                	add    al,BYTE PTR [eax]
    4092:	00 05 36 7f 00 00    	add    BYTE PTR ds:0x7f36,al
    4098:	00 05 03 6c 7c 00    	add    BYTE PTR ds:0x7c6c03,al
    409e:	9f                   	lahf   
    409f:	00 de                	add    dh,bl
    40a1:	00 00                	add    BYTE PTR [eax],al
    40a3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    40a6:	80 13 00             	adc    BYTE PTR [ebx],0x0
    40a9:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    40ac:	c3                   	ret    
    40ad:	00 00                	add    BYTE PTR [eax],al
    40af:	00 0c 6c             	add    BYTE PTR [esp+ebp*2],cl
    40b2:	0f 00 00             	sldt   WORD PTR [eax]
    40b5:	4d                   	dec    ebp
    40b6:	00 00                	add    BYTE PTR [eax],al
    40b8:	00 14 3b             	add    BYTE PTR [ebx+edi*1],dl
    40bb:	00 9f ce 00 00 00    	add    BYTE PTR [edi+0xce],bl
    40c1:	0d 16 00 00 02       	or     eax,0x2000016
    40c6:	04 05                	add    al,0x5
    40c8:	69 6e 74 00 03 91 02 	imul   ebp,DWORD PTR [esi+0x74],0x2910300
    40cf:	00 00                	add    BYTE PTR [eax],al
    40d1:	02 d8                	add    bl,al
    40d3:	37                   	aaa    
    40d4:	00 00                	add    BYTE PTR [eax],al
    40d6:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    40d9:	07                   	pop    es
    40da:	32 00                	xor    al,BYTE PTR [eax]
    40dc:	00 00                	add    BYTE PTR [eax],al
    40de:	04 04                	add    al,0x4
    40e0:	05 05 00 00 00       	add    eax,0x5
    40e5:	04 08                	add    al,0x8
    40e7:	05 00 00 00 00       	add    eax,0x0
    40ec:	04 0c                	add    al,0xc
    40ee:	04 ad                	add    al,0xad
    40f0:	00 00                	add    BYTE PTR [eax],al
    40f2:	00 05 64 0f 00 00    	add    BYTE PTR ds:0xf64,al
    40f8:	01 0c 25 00 00 00 14 	add    DWORD PTR [eiz*1+0x14000000],ecx
    40ff:	3b 00                	cmp    eax,DWORD PTR [eax]
    4101:	9f                   	lahf   
    4102:	67 00 00             	add    BYTE PTR [bx+si],al
    4105:	00 01                	add    BYTE PTR [ecx],al
    4107:	9c                   	pushf  
    4108:	93                   	xchg   ebx,eax
    4109:	00 00                	add    BYTE PTR [eax],al
    410b:	00 06                	add    BYTE PTR [esi],al
    410d:	73 31                	jae    4140 <sysEnter_Vector-0x12bec0>
    410f:	00 01                	add    BYTE PTR [ecx],al
    4111:	0c 93                	or     al,0x93
    4113:	00 00                	add    BYTE PTR [eax],al
    4115:	00 02                	add    BYTE PTR [edx],al
    4117:	91                   	xchg   ecx,eax
    4118:	00 06                	add    BYTE PTR [esi],al
    411a:	73 32                	jae    414e <sysEnter_Vector-0x12beb2>
    411c:	00 01                	add    BYTE PTR [ecx],al
    411e:	0c 93                	or     al,0x93
    4120:	00 00                	add    BYTE PTR [eax],al
    4122:	00 02                	add    BYTE PTR [edx],al
    4124:	91                   	xchg   ecx,eax
    4125:	04 06                	add    al,0x6
    4127:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4128:	00 01                	add    BYTE PTR [ecx],al
    412a:	0c 2c                	or     al,0x2c
    412c:	00 00                	add    BYTE PTR [eax],al
    412e:	00 02                	add    BYTE PTR [edx],al
    4130:	91                   	xchg   ecx,eax
    4131:	08 00                	or     BYTE PTR [eax],al
    4133:	07                   	pop    es
    4134:	04 a0                	add    al,0xa0
    4136:	00 00                	add    BYTE PTR [eax],al
    4138:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    413b:	06                   	push   es
    413c:	48                   	dec    eax
    413d:	00 00                	add    BYTE PTR [eax],al
    413f:	00 08                	add    BYTE PTR [eax],cl
    4141:	99                   	cdq    
    4142:	00 00                	add    BYTE PTR [eax],al
    4144:	00 09                	add    BYTE PTR [ecx],cl
    4146:	5b                   	pop    ebx
    4147:	0f 00 00             	sldt   WORD PTR [eax]
    414a:	01 16                	add    DWORD PTR [esi],edx
    414c:	25 00 00 00 7b       	and    eax,0x7b000000
    4151:	3b 00                	cmp    eax,DWORD PTR [eax]
    4153:	9f                   	lahf   
    4154:	67 00 00             	add    BYTE PTR [bx+si],al
    4157:	00 01                	add    BYTE PTR [ecx],al
    4159:	9c                   	pushf  
    415a:	06                   	push   es
    415b:	73 31                	jae    418e <sysEnter_Vector-0x12be72>
    415d:	00 01                	add    BYTE PTR [ecx],al
    415f:	16                   	push   ss
    4160:	93                   	xchg   ebx,eax
    4161:	00 00                	add    BYTE PTR [eax],al
    4163:	00 02                	add    BYTE PTR [edx],al
    4165:	91                   	xchg   ecx,eax
    4166:	00 06                	add    BYTE PTR [esi],al
    4168:	73 32                	jae    419c <sysEnter_Vector-0x12be64>
    416a:	00 01                	add    BYTE PTR [ecx],al
    416c:	16                   	push   ss
    416d:	93                   	xchg   ebx,eax
    416e:	00 00                	add    BYTE PTR [eax],al
    4170:	00 02                	add    BYTE PTR [edx],al
    4172:	91                   	xchg   ecx,eax
    4173:	04 06                	add    al,0x6
    4175:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4176:	00 01                	add    BYTE PTR [ecx],al
    4178:	16                   	push   ss
    4179:	2c 00                	sub    al,0x0
    417b:	00 00                	add    BYTE PTR [eax],al
    417d:	02 91 08 00 00 f0    	add    dl,BYTE PTR [ecx-0xffffff8]
    4183:	00 00                	add    BYTE PTR [eax],al
    4185:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4188:	0c 14                	or     al,0x14
    418a:	00 00                	add    BYTE PTR [eax],al
    418c:	04 01                	add    al,0x1
    418e:	c3                   	ret    
    418f:	00 00                	add    BYTE PTR [eax],al
    4191:	00 0c 82             	add    BYTE PTR [edx+eax*4],cl
    4194:	0f 00 00             	sldt   WORD PTR [eax]
    4197:	4d                   	dec    ebp
    4198:	00 00                	add    BYTE PTR [eax],al
    419a:	00 e4                	add    ah,ah
    419c:	3b 00                	cmp    eax,DWORD PTR [eax]
    419e:	9f                   	lahf   
    419f:	8c 00                	mov    WORD PTR [eax],es
    41a1:	00 00                	add    BYTE PTR [eax],al
    41a3:	d2 16                	rcl    BYTE PTR [esi],cl
    41a5:	00 00                	add    BYTE PTR [eax],al
    41a7:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    41ae:	03 91 02 00 00 02    	add    edx,DWORD PTR [ecx+0x2000002]
    41b4:	d8 37                	fdiv   DWORD PTR [edi]
    41b6:	00 00                	add    BYTE PTR [eax],al
    41b8:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    41bb:	07                   	pop    es
    41bc:	32 00                	xor    al,BYTE PTR [eax]
    41be:	00 00                	add    BYTE PTR [eax],al
    41c0:	04 04                	add    al,0x4
    41c2:	05 05 00 00 00       	add    eax,0x5
    41c7:	04 08                	add    al,0x8
    41c9:	05 00 00 00 00       	add    eax,0x0
    41ce:	04 0c                	add    al,0xc
    41d0:	04 ad                	add    al,0xad
    41d2:	00 00                	add    BYTE PTR [eax],al
    41d4:	00 05 98 0f 00 00    	add    BYTE PTR ds:0xf98,al
    41da:	01 0d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ecx
    41e0:	e4 3b                	in     al,0x3b
    41e2:	00 9f 6c 00 00 00    	add    BYTE PTR [edi+0x6c],bl
    41e8:	01 9c 9f 00 00 00 06 	add    DWORD PTR [edi+ebx*4+0x6000000],ebx
    41ef:	73 31                	jae    4222 <sysEnter_Vector-0x12bdde>
    41f1:	00 01                	add    BYTE PTR [ecx],al
    41f3:	0d 9f 00 00 00       	or     eax,0x9f
    41f8:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    41fe:	00 01                	add    BYTE PTR [ecx],al
    4200:	0d ac 00 00 00       	or     eax,0xac
    4205:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    420b:	01 0d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ecx
    4211:	02 91 08 07 73 00    	add    dl,BYTE PTR [ecx+0x730708]
    4217:	01 0f                	add    DWORD PTR [edi],ecx
    4219:	9f                   	lahf   
    421a:	00 00                	add    BYTE PTR [eax],al
    421c:	00 02                	add    BYTE PTR [edx],al
    421e:	91                   	xchg   ecx,eax
    421f:	74 00                	je     4221 <sysEnter_Vector-0x12bddf>
    4221:	08 04 a5 00 00 00 04 	or     BYTE PTR [eiz*4+0x4000000],al
    4228:	01 06                	add    DWORD PTR [esi],eax
    422a:	48                   	dec    eax
    422b:	00 00                	add    BYTE PTR [eax],al
    422d:	00 08                	add    BYTE PTR [eax],cl
    422f:	04 b2                	add    al,0xb2
    4231:	00 00                	add    BYTE PTR [eax],al
    4233:	00 09                	add    BYTE PTR [ecx],cl
    4235:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    4236:	00 00                	add    BYTE PTR [eax],al
    4238:	00 0a                	add    BYTE PTR [edx],cl
    423a:	a1 0f 00 00 01       	mov    eax,ds:0x100000f
    423f:	1d 9f 00 00 00       	sbb    eax,0x9f
    4244:	50                   	push   eax
    4245:	3c 00                	cmp    al,0x0
    4247:	9f                   	lahf   
    4248:	20 00                	and    BYTE PTR [eax],al
    424a:	00 00                	add    BYTE PTR [eax],al
    424c:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    4253:	1d 9f 00 00 00       	sbb    eax,0x9f
    4258:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    425e:	00 01                	add    BYTE PTR [ecx],al
    4260:	1d ac 00 00 00       	sbb    eax,0xac
    4265:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    426b:	01 1d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ebx
    4271:	02 91 08 00 00 01    	add    dl,BYTE PTR [ecx+0x1000008]
    4277:	01 00                	add    DWORD PTR [eax],eax
    4279:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    427c:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    427d:	14 00                	adc    al,0x0
    427f:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4282:	c3                   	ret    
    4283:	00 00                	add    BYTE PTR [eax],al
    4285:	00 0c bc             	add    BYTE PTR [esp+edi*4],cl
    4288:	0f 00 00             	sldt   WORD PTR [eax]
    428b:	4d                   	dec    ebp
    428c:	00 00                	add    BYTE PTR [eax],al
    428e:	00 70 3c             	add    BYTE PTR [eax+0x3c],dh
    4291:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
    4297:	79 17                	jns    42b0 <sysEnter_Vector-0x12bd50>
    4299:	00 00                	add    BYTE PTR [eax],al
    429b:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    42a2:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    42a5:	32 00                	xor    al,BYTE PTR [eax]
    42a7:	00 00                	add    BYTE PTR [eax],al
    42a9:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    42b0:	03 08                	add    ecx,DWORD PTR [eax]
    42b2:	05 00 00 00 00       	add    eax,0x0
    42b7:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    42ba:	ad                   	lods   eax,DWORD PTR ds:[esi]
    42bb:	00 00                	add    BYTE PTR [eax],al
    42bd:	00 03                	add    BYTE PTR [ebx],al
    42bf:	01 06                	add    DWORD PTR [esi],eax
    42c1:	48                   	dec    eax
    42c2:	00 00                	add    BYTE PTR [eax],al
    42c4:	00 04 d1             	add    BYTE PTR [ecx+edx*8],al
    42c7:	0f 00 00             	sldt   WORD PTR [eax]
    42ca:	01 3b                	add    DWORD PTR [ebx],edi
    42cc:	e6 00                	out    0x0,al
    42ce:	00 00                	add    BYTE PTR [eax],al
    42d0:	70 3c                	jo     430e <sysEnter_Vector-0x12bcf2>
    42d2:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
    42d8:	01 9c e6 00 00 00 05 	add    DWORD PTR [esi+eiz*8+0x5000000],ebx
    42df:	a9 0f 00 00 01       	test   eax,0x100000f
    42e4:	3b ed                	cmp    ebp,ebp
    42e6:	00 00                	add    BYTE PTR [eax],al
    42e8:	00 02                	add    BYTE PTR [edx],al
    42ea:	91                   	xchg   ecx,eax
    42eb:	00 05 d9 0f 00 00    	add    BYTE PTR ds:0xfd9,al
    42f1:	01 3b                	add    DWORD PTR [ebx],edi
    42f3:	f8                   	clc    
    42f4:	00 00                	add    BYTE PTR [eax],al
    42f6:	00 02                	add    BYTE PTR [edx],al
    42f8:	91                   	xchg   ecx,eax
    42f9:	04 05                	add    al,0x5
    42fb:	25 0e 00 00 01       	and    eax,0x100000e
    4300:	3b 25 00 00 00 02    	cmp    esp,DWORD PTR ds:0x2000000
    4306:	91                   	xchg   ecx,eax
    4307:	08 06                	or     BYTE PTR [esi],al
    4309:	73 00                	jae    430b <sysEnter_Vector-0x12bcf5>
    430b:	01 3d ed 00 00 00    	add    DWORD PTR ds:0xed,edi
    4311:	01 56 06             	add    DWORD PTR [esi+0x6],edx
    4314:	61                   	popa   
    4315:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    4318:	01 3e                	add    DWORD PTR [esi],edi
    431a:	e6 00                	out    0x0,al
    431c:	00 00                	add    BYTE PTR [eax],al
    431e:	01 57 06             	add    DWORD PTR [edi+0x6],edx
    4321:	63 00                	arpl   WORD PTR [eax],ax
    4323:	01 3f                	add    DWORD PTR [edi],edi
    4325:	25 00 00 00 01       	and    eax,0x1000000
    432a:	53                   	push   ebx
    432b:	07                   	pop    es
    432c:	ae                   	scas   al,BYTE PTR es:[edi]
    432d:	0f 00 00             	sldt   WORD PTR [eax]
    4330:	01 40 e6             	add    DWORD PTR [eax-0x1a],eax
    4333:	00 00                	add    BYTE PTR [eax],al
    4335:	00 08                	add    BYTE PTR [eax],cl
    4337:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4338:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    433c:	41                   	inc    ecx
    433d:	25 00 00 00 06       	and    eax,0x6000000
    4342:	61                   	popa   
    4343:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4344:	79 00                	jns    4346 <sysEnter_Vector-0x12bcba>
    4346:	01 41 25             	add    DWORD PTR [ecx+0x25],eax
    4349:	00 00                	add    BYTE PTR [eax],al
    434b:	00 01                	add    BYTE PTR [ecx],al
    434d:	51                   	push   ecx
    434e:	09 b5 0f 00 00 01    	or     DWORD PTR [ebp+0x100000f],esi
    4354:	41                   	inc    ecx
    4355:	25 00 00 00 01       	and    eax,0x1000000
    435a:	52                   	push   edx
    435b:	00 03                	add    BYTE PTR [ebx],al
    435d:	04 07                	add    al,0x7
    435f:	2d 00 00 00 0a       	sub    eax,0xa000000
    4364:	04 f3                	add    al,0xf3
    4366:	00 00                	add    BYTE PTR [eax],al
    4368:	00 0b                	add    BYTE PTR [ebx],cl
    436a:	48                   	dec    eax
    436b:	00 00                	add    BYTE PTR [eax],al
    436d:	00 0a                	add    BYTE PTR [edx],cl
    436f:	04 fe                	add    al,0xfe
    4371:	00 00                	add    BYTE PTR [eax],al
    4373:	00 0a                	add    BYTE PTR [edx],cl
    4375:	04 48                	add    al,0x48
    4377:	00 00                	add    BYTE PTR [eax],al
    4379:	00 00                	add    BYTE PTR [eax],al
    437b:	6c                   	ins    BYTE PTR es:[edi],dx
    437c:	00 00                	add    BYTE PTR [eax],al
    437e:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4381:	44                   	inc    esp
    4382:	15 00 00 04 01       	adc    eax,0x1040000
    4387:	c3                   	ret    
    4388:	00 00                	add    BYTE PTR [eax],al
    438a:	00 0c e0             	add    BYTE PTR [eax+eiz*8],cl
    438d:	0f 00 00             	sldt   WORD PTR [eax]
    4390:	4d                   	dec    ebp
    4391:	00 00                	add    BYTE PTR [eax],al
    4393:	00 f0                	add    al,dh
    4395:	3d 00 9f 1d 00       	cmp    eax,0x1d9f00
    439a:	00 00                	add    BYTE PTR [eax],al
    439c:	55                   	push   ebp
    439d:	18 00                	sbb    BYTE PTR [eax],al
    439f:	00 02                	add    BYTE PTR [edx],al
    43a1:	f7                   	(bad)  
    43a2:	0f 00 00             	sldt   WORD PTR [eax]
    43a5:	01 01                	add    DWORD PTR [ecx],eax
    43a7:	5b                   	pop    ebx
    43a8:	00 00                	add    BYTE PTR [eax],al
    43aa:	00 f0                	add    al,dh
    43ac:	3d 00 9f 1d 00       	cmp    eax,0x1d9f00
    43b1:	00 00                	add    BYTE PTR [eax],al
    43b3:	01 9c 5b 00 00 00 03 	add    DWORD PTR [ebx+ebx*2+0x3000000],ebx
    43ba:	76 61                	jbe    441d <sysEnter_Vector-0x12bbe3>
    43bc:	6c                   	ins    BYTE PTR es:[edi],dx
    43bd:	00 01                	add    BYTE PTR [ecx],al
    43bf:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    43c2:	00 00                	add    BYTE PTR [eax],al
    43c4:	02 91 00 03 63 6e    	add    dl,BYTE PTR [ecx+0x6e630300]
    43ca:	74 00                	je     43cc <sysEnter_Vector-0x12bc34>
    43cc:	01 01                	add    DWORD PTR [ecx],eax
    43ce:	68 00 00 00 02       	push   0x2000000
    43d3:	91                   	xchg   ecx,eax
    43d4:	04 00                	add    al,0x0
    43d6:	04 04                	add    al,0x4
    43d8:	61                   	popa   
    43d9:	00 00                	add    BYTE PTR [eax],al
    43db:	00 05 01 06 48 00    	add    BYTE PTR ds:0x480601,al
    43e1:	00 00                	add    BYTE PTR [eax],al
    43e3:	06                   	push   es
    43e4:	04 05                	add    al,0x5
    43e6:	69 6e 74 00 00 ff 00 	imul   ebp,DWORD PTR [esi+0x74],0xff0000
    43ed:	00 00                	add    BYTE PTR [eax],al
    43ef:	04 00                	add    al,0x0
    43f1:	a2 15 00 00 04       	mov    ds:0x4000015,al
    43f6:	01 c3                	add    ebx,eax
    43f8:	00 00                	add    BYTE PTR [eax],al
    43fa:	00 0c 06             	add    BYTE PTR [esi+eax*1],cl
    43fd:	10 00                	adc    BYTE PTR [eax],al
    43ff:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    4402:	00 00                	add    BYTE PTR [eax],al
    4404:	10 3e                	adc    BYTE PTR [esi],bh
    4406:	00 9f 9c 01 00 00    	add    BYTE PTR [edi+0x19c],bl
    440c:	9c                   	pushf  
    440d:	18 00                	sbb    BYTE PTR [eax],al
    440f:	00 02                	add    BYTE PTR [edx],al
    4411:	04 05                	add    al,0x5
    4413:	69 6e 74 00 03 04 07 	imul   ebp,DWORD PTR [esi+0x74],0x7040300
    441a:	32 00                	xor    al,BYTE PTR [eax]
    441c:	00 00                	add    BYTE PTR [eax],al
    441e:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    4425:	03 08                	add    ecx,DWORD PTR [eax]
    4427:	05 00 00 00 00       	add    eax,0x0
    442c:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    442f:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4430:	00 00                	add    BYTE PTR [eax],al
    4432:	00 03                	add    BYTE PTR [ebx],al
    4434:	01 06                	add    DWORD PTR [esi],eax
    4436:	48                   	dec    eax
    4437:	00 00                	add    BYTE PTR [eax],al
    4439:	00 04 ff             	add    BYTE PTR [edi+edi*8],al
    443c:	0f 00 00             	sldt   WORD PTR [eax]
    443f:	01 57 33             	add    DWORD PTR [edi+0x33],edx
    4442:	00 00                	add    BYTE PTR [eax],al
    4444:	00 10                	add    BYTE PTR [eax],dl
    4446:	3e 00 9f 9c 01 00 00 	add    BYTE PTR ds:[edi+0x19c],bl
    444d:	01 9c e4 00 00 00 05 	add    DWORD PTR [esp+eiz*8+0x5000000],ebx
    4454:	a9 0f 00 00 01       	test   eax,0x100000f
    4459:	57                   	push   edi
    445a:	e4 00                	in     al,0x0
    445c:	00 00                	add    BYTE PTR [eax],al
    445e:	02 91 00 05 d9 0f    	add    dl,BYTE PTR [ecx+0xfd90500]
    4464:	00 00                	add    BYTE PTR [eax],al
    4466:	01 57 ef             	add    DWORD PTR [edi-0x11],edx
    4469:	00 00                	add    BYTE PTR [eax],al
    446b:	00 02                	add    BYTE PTR [edx],al
    446d:	91                   	xchg   ecx,eax
    446e:	04 05                	add    al,0x5
    4470:	25 0e 00 00 01       	and    eax,0x100000e
    4475:	57                   	push   edi
    4476:	25 00 00 00 02       	and    eax,0x2000000
    447b:	91                   	xchg   ecx,eax
    447c:	08 06                	or     BYTE PTR [esi],al
    447e:	73 00                	jae    4480 <sysEnter_Vector-0x12bb80>
    4480:	01 59 e4             	add    DWORD PTR [ecx-0x1c],ebx
    4483:	00 00                	add    BYTE PTR [eax],al
    4485:	00 01                	add    BYTE PTR [ecx],al
    4487:	56                   	push   esi
    4488:	06                   	push   es
    4489:	61                   	popa   
    448a:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    448d:	01 5a fb             	add    DWORD PTR [edx-0x5],ebx
    4490:	00 00                	add    BYTE PTR [eax],al
    4492:	00 01                	add    BYTE PTR [ecx],al
    4494:	57                   	push   edi
    4495:	06                   	push   es
    4496:	63 00                	arpl   WORD PTR [eax],ax
    4498:	01 5b 25             	add    DWORD PTR [ebx+0x25],ebx
    449b:	00 00                	add    BYTE PTR [eax],al
    449d:	00 01                	add    BYTE PTR [ecx],al
    449f:	53                   	push   ebx
    44a0:	07                   	pop    es
    44a1:	ae                   	scas   al,BYTE PTR es:[edi]
    44a2:	0f 00 00             	sldt   WORD PTR [eax]
    44a5:	01 5c fb 00          	add    DWORD PTR [ebx+edi*8+0x0],ebx
    44a9:	00 00                	add    BYTE PTR [eax],al
    44ab:	08 6e 65             	or     BYTE PTR [esi+0x65],ch
    44ae:	67 00 01             	add    BYTE PTR [bx+di],al
    44b1:	5d                   	pop    ebp
    44b2:	25 00 00 00 06       	and    eax,0x6000000
    44b7:	61                   	popa   
    44b8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    44b9:	79 00                	jns    44bb <sysEnter_Vector-0x12bb45>
    44bb:	01 5d 25             	add    DWORD PTR [ebp+0x25],ebx
    44be:	00 00                	add    BYTE PTR [eax],al
    44c0:	00 01                	add    BYTE PTR [ecx],al
    44c2:	51                   	push   ecx
    44c3:	07                   	pop    es
    44c4:	b5 0f                	mov    ch,0xf
    44c6:	00 00                	add    BYTE PTR [eax],al
    44c8:	01 5d 25             	add    DWORD PTR [ebp+0x25],ebx
    44cb:	00 00                	add    BYTE PTR [eax],al
    44cd:	00 00                	add    BYTE PTR [eax],al
    44cf:	09 04 ea             	or     DWORD PTR [edx+ebp*8],eax
    44d2:	00 00                	add    BYTE PTR [eax],al
    44d4:	00 0a                	add    BYTE PTR [edx],cl
    44d6:	48                   	dec    eax
    44d7:	00 00                	add    BYTE PTR [eax],al
    44d9:	00 09                	add    BYTE PTR [ecx],cl
    44db:	04 f5                	add    al,0xf5
    44dd:	00 00                	add    BYTE PTR [eax],al
    44df:	00 09                	add    BYTE PTR [ecx],cl
    44e1:	04 48                	add    al,0x48
    44e3:	00 00                	add    BYTE PTR [eax],al
    44e5:	00 03                	add    BYTE PTR [ebx],al
    44e7:	04 07                	add    al,0x7
    44e9:	2d 00 00 00 00       	sub    eax,0x0
    44ee:	c0 00 00             	rol    BYTE PTR [eax],0x0
    44f1:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    44f4:	30 16                	xor    BYTE PTR [esi],dl
    44f6:	00 00                	add    BYTE PTR [eax],al
    44f8:	04 01                	add    al,0x1
    44fa:	c3                   	ret    
    44fb:	00 00                	add    BYTE PTR [eax],al
    44fd:	00 0c 21             	add    BYTE PTR [ecx+eiz*1],cl
    4500:	10 00                	adc    BYTE PTR [eax],al
    4502:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    4505:	00 00                	add    BYTE PTR [eax],al
    4507:	ac                   	lods   al,BYTE PTR ds:[esi]
    4508:	3f                   	aas    
    4509:	00 9f b6 00 00 00    	add    BYTE PTR [edi+0xb6],bl
    450f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    4510:	19 00                	sbb    DWORD PTR [eax],eax
    4512:	00 02                	add    BYTE PTR [edx],al
    4514:	04 05                	add    al,0x5
    4516:	69 6e 74 00 03 04 07 	imul   ebp,DWORD PTR [esi+0x74],0x7040300
    451d:	32 00                	xor    al,BYTE PTR [eax]
    451f:	00 00                	add    BYTE PTR [eax],al
    4521:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    4528:	03 08                	add    ecx,DWORD PTR [eax]
    452a:	05 00 00 00 00       	add    eax,0x0
    452f:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    4532:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4533:	00 00                	add    BYTE PTR [eax],al
    4535:	00 03                	add    BYTE PTR [ebx],al
    4537:	01 06                	add    DWORD PTR [esi],eax
    4539:	48                   	dec    eax
    453a:	00 00                	add    BYTE PTR [eax],al
    453c:	00 04 3f             	add    BYTE PTR [edi+edi*1],al
    453f:	10 00                	adc    BYTE PTR [eax],al
    4541:	00 01                	add    BYTE PTR [ecx],al
    4543:	03 ac 3f 00 9f 96 00 	add    ebp,DWORD PTR [edi+edi*1+0x969f00]
    454a:	00 00                	add    BYTE PTR [eax],al
    454c:	01 9c 9d 00 00 00 05 	add    DWORD PTR [ebp+ebx*4+0x5000000],ebx
    4553:	1b 10                	sbb    edx,DWORD PTR [eax]
    4555:	00 00                	add    BYTE PTR [eax],al
    4557:	01 03                	add    DWORD PTR [ebx],eax
    4559:	9d                   	popf   
    455a:	00 00                	add    BYTE PTR [eax],al
    455c:	00 02                	add    BYTE PTR [edx],al
    455e:	91                   	xchg   ecx,eax
    455f:	00 06                	add    BYTE PTR [esi],al
    4561:	64                   	fs
    4562:	73 74                	jae    45d8 <sysEnter_Vector-0x12ba28>
    4564:	00 01                	add    BYTE PTR [ecx],al
    4566:	05 9d 00 00 00       	add    eax,0x9d
    456b:	02 91 6c 06 73 72    	add    dl,BYTE PTR [ecx+0x7273066c]
    4571:	63 00                	arpl   WORD PTR [eax],ax
    4573:	01 05 9d 00 00 00    	add    DWORD PTR ds:0x9d,eax
    4579:	02 91 68 06 65 6e    	add    dl,BYTE PTR [ecx+0x6e650668]
    457f:	64 00 01             	add    BYTE PTR fs:[ecx],al
    4582:	06                   	push   es
    4583:	9d                   	popf   
    4584:	00 00                	add    BYTE PTR [eax],al
    4586:	00 02                	add    BYTE PTR [edx],al
    4588:	91                   	xchg   ecx,eax
    4589:	64 00 07             	add    BYTE PTR fs:[edi],al
    458c:	04 48                	add    al,0x48
    458e:	00 00                	add    BYTE PTR [eax],al
    4590:	00 08                	add    BYTE PTR [eax],cl
    4592:	37                   	aaa    
    4593:	10 00                	adc    BYTE PTR [eax],al
    4595:	00 01                	add    BYTE PTR [ecx],al
    4597:	1f                   	pop    ds
    4598:	42                   	inc    edx
    4599:	40                   	inc    eax
    459a:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    45a0:	01 9c 05 1b 10 00 00 	add    DWORD PTR [ebp+eax*1+0x101b],ebx
    45a7:	01 1f                	add    DWORD PTR [edi],ebx
    45a9:	9d                   	popf   
    45aa:	00 00                	add    BYTE PTR [eax],al
    45ac:	00 02                	add    BYTE PTR [edx],al
    45ae:	91                   	xchg   ecx,eax
    45af:	00 00                	add    BYTE PTR [eax],al
    45b1:	00 c6                	add    dh,al
    45b3:	01 00                	add    DWORD PTR [eax],eax
    45b5:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    45b8:	b3 16                	mov    bl,0x16
    45ba:	00 00                	add    BYTE PTR [eax],al
    45bc:	04 01                	add    al,0x1
    45be:	c3                   	ret    
    45bf:	00 00                	add    BYTE PTR [eax],al
    45c1:	00 0c 50             	add    BYTE PTR [eax+edx*2],cl
    45c4:	10 00                	adc    BYTE PTR [eax],al
    45c6:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    45c9:	00 00                	add    BYTE PTR [eax],al
    45cb:	64                   	fs
    45cc:	40                   	inc    eax
    45cd:	00 9f 44 01 00 00    	add    BYTE PTR [edi+0x144],bl
    45d3:	06                   	push   es
    45d4:	1a 00                	sbb    al,BYTE PTR [eax]
    45d6:	00 02                	add    BYTE PTR [edx],al
    45d8:	04 05                	add    al,0x5
    45da:	69 6e 74 00 03 91 02 	imul   ebp,DWORD PTR [esi+0x74],0x2910300
    45e1:	00 00                	add    BYTE PTR [eax],al
    45e3:	02 d8                	add    bl,al
    45e5:	37                   	aaa    
    45e6:	00 00                	add    BYTE PTR [eax],al
    45e8:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    45eb:	07                   	pop    es
    45ec:	32 00                	xor    al,BYTE PTR [eax]
    45ee:	00 00                	add    BYTE PTR [eax],al
    45f0:	04 04                	add    al,0x4
    45f2:	05 05 00 00 00       	add    eax,0x5
    45f7:	04 08                	add    al,0x8
    45f9:	05 00 00 00 00       	add    eax,0x0
    45fe:	04 0c                	add    al,0xc
    4600:	04 ad                	add    al,0xad
    4602:	00 00                	add    BYTE PTR [eax],al
    4604:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4607:	06                   	push   es
    4608:	48                   	dec    eax
    4609:	00 00                	add    BYTE PTR [eax],al
    460b:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    460e:	08 3f                	or     BYTE PTR [edi],bh
    4610:	00 00                	add    BYTE PTR [eax],al
    4612:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    4615:	07                   	pop    es
    4616:	0e                   	push   cs
    4617:	00 00                	add    BYTE PTR [eax],al
    4619:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    461c:	07                   	pop    es
    461d:	2d 00 00 00 04       	sub    eax,0x4000000
    4622:	01 06                	add    DWORD PTR [esi],eax
    4624:	41                   	inc    ecx
    4625:	00 00                	add    BYTE PTR [eax],al
    4627:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    462a:	05 b9 00 00 00       	add    eax,0xb9
    462f:	04 08                	add    al,0x8
    4631:	07                   	pop    es
    4632:	28 00                	sub    BYTE PTR [eax],al
    4634:	00 00                	add    BYTE PTR [eax],al
    4636:	04 04                	add    al,0x4
    4638:	07                   	pop    es
    4639:	2a 01                	sub    al,BYTE PTR [ecx]
    463b:	00 00                	add    BYTE PTR [eax],al
    463d:	05 04 53 00 00       	add    eax,0x5304
    4642:	00 03                	add    BYTE PTR [ebx],al
    4644:	45                   	inc    ebp
    4645:	02 00                	add    al,BYTE PTR [eax]
    4647:	00 03                	add    BYTE PTR [ebx],al
    4649:	34 37                	xor    al,0x37
    464b:	00 00                	add    BYTE PTR [eax],al
    464d:	00 03                	add    BYTE PTR [ebx],al
    464f:	01 02                	add    DWORD PTR [edx],eax
    4651:	00 00                	add    BYTE PTR [eax],al
    4653:	03 56 37             	add    edx,DWORD PTR [esi+0x37]
    4656:	00 00                	add    BYTE PTR [eax],al
    4658:	00 05 04 ad 00 00    	add    BYTE PTR ds:0xad04,al
    465e:	00 06                	add    BYTE PTR [esi],al
    4660:	53                   	push   ebx
    4661:	00 00                	add    BYTE PTR [eax],al
    4663:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4666:	02 6a 06             	add    ch,BYTE PTR [edx+0x6]
    4669:	00 00                	add    BYTE PTR [eax],al
    466b:	04 08                	add    al,0x8
    466d:	04 b2                	add    al,0xb2
    466f:	00 00                	add    BYTE PTR [eax],al
    4671:	00 07                	add    BYTE PTR [edi],al
    4673:	85 10                	test   DWORD PTR [eax],edx
    4675:	00 00                	add    BYTE PTR [eax],al
    4677:	01 0d 8b 00 00 00    	add    DWORD PTR ds:0x8b,ecx
    467d:	64                   	fs
    467e:	40                   	inc    eax
    467f:	00 9f 1e 01 00 00    	add    BYTE PTR [edi+0x11e],bl
    4685:	01 9c 3a 01 00 00 08 	add    DWORD PTR [edx+edi*1+0x8000001],ebx
    468c:	69 6e 00 01 0d a7 00 	imul   ebp,DWORD PTR [esi+0x0],0xa70d01
    4693:	00 00                	add    BYTE PTR [eax],al
    4695:	02 91 00 09 7d 10    	add    dl,BYTE PTR [ecx+0x107d0900]
    469b:	00 00                	add    BYTE PTR [eax],al
    469d:	01 0d a7 00 00 00    	add    DWORD PTR ds:0xa7,ecx
    46a3:	02 91 04 08 62 79    	add    dl,BYTE PTR [ecx+0x79620804]
    46a9:	00 01                	add    BYTE PTR [ecx],al
    46ab:	0d a7 00 00 00       	or     eax,0xa7
    46b0:	02 91 08 09 91 10    	add    dl,BYTE PTR [ecx+0x10910908]
    46b6:	00 00                	add    BYTE PTR [eax],al
    46b8:	01 0d 8b 00 00 00    	add    DWORD PTR ds:0x8b,ecx
    46be:	02 91 0c 0a 48 10    	add    dl,BYTE PTR [ecx+0x10480a0c]
    46c4:	00 00                	add    BYTE PTR [eax],al
    46c6:	01 0f                	add    DWORD PTR [edi],ecx
    46c8:	2c 00                	sub    al,0x0
    46ca:	00 00                	add    BYTE PTR [eax],al
    46cc:	02 91 6c 0a 68 10    	add    dl,BYTE PTR [ecx+0x10680a6c]
    46d2:	00 00                	add    BYTE PTR [eax],al
    46d4:	01 12                	add    DWORD PTR [edx],edx
    46d6:	2c 00                	sub    al,0x0
    46d8:	00 00                	add    BYTE PTR [eax],al
    46da:	02 91 68 0a 61 10    	add    dl,BYTE PTR [ecx+0x10610a68]
    46e0:	00 00                	add    BYTE PTR [eax],al
    46e2:	01 13                	add    DWORD PTR [ebx],edx
    46e4:	8b 00                	mov    eax,DWORD PTR [eax]
    46e6:	00 00                	add    BYTE PTR [eax],al
    46e8:	02 91 64 00 07 72    	add    dl,BYTE PTR [ecx+0x72070064]
    46ee:	10 00                	adc    BYTE PTR [eax],al
    46f0:	00 01                	add    BYTE PTR [ecx],al
    46f2:	2a 8b 00 00 00 82    	sub    cl,BYTE PTR [ebx-0x7e000000]
    46f8:	41                   	inc    ecx
    46f9:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
    46ff:	01 9c 8a 01 00 00 08 	add    DWORD PTR [edx+ecx*4+0x8000001],ebx
    4706:	69 6e 00 01 2a a7 00 	imul   ebp,DWORD PTR [esi+0x0],0xa72a01
    470d:	00 00                	add    BYTE PTR [eax],al
    470f:	02 91 00 09 7d 10    	add    dl,BYTE PTR [ecx+0x107d0900]
    4715:	00 00                	add    BYTE PTR [eax],al
    4717:	01 2a                	add    DWORD PTR [edx],ebp
    4719:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    471a:	00 00                	add    BYTE PTR [eax],al
    471c:	00 02                	add    BYTE PTR [edx],al
    471e:	91                   	xchg   ecx,eax
    471f:	04 08                	add    al,0x8
    4721:	62 79 00             	bound  edi,QWORD PTR [ecx+0x0]
    4724:	01 2a                	add    DWORD PTR [edx],ebp
    4726:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    4727:	00 00                	add    BYTE PTR [eax],al
    4729:	00 02                	add    BYTE PTR [edx],al
    472b:	91                   	xchg   ecx,eax
    472c:	08 09                	or     BYTE PTR [ecx],cl
    472e:	91                   	xchg   ecx,eax
    472f:	10 00                	adc    BYTE PTR [eax],al
    4731:	00 01                	add    BYTE PTR [ecx],al
    4733:	2a 8b 00 00 00 02    	sub    cl,BYTE PTR [ebx+0x2000000]
    4739:	91                   	xchg   ecx,eax
    473a:	0c 00                	or     al,0x0
    473c:	0b 78 00             	or     edi,DWORD PTR [eax+0x0]
    473f:	00 00                	add    BYTE PTR [eax],al
    4741:	04 33                	add    al,0x33
    4743:	9b                   	fwait
    4744:	01 00                	add    DWORD PTR [eax],eax
    4746:	00 05 03 60 7c 00    	add    BYTE PTR ds:0x7c6003,al
    474c:	9f                   	lahf   
    474d:	05 04 8b 00 00       	add    eax,0x8b04
    4752:	00 0b                	add    BYTE PTR [ebx],cl
    4754:	10 02                	adc    BYTE PTR [edx],al
    4756:	00 00                	add    BYTE PTR [eax],al
    4758:	05 35 b2 01 00       	add    eax,0x1b235
    475d:	00 05 03 70 7c 00    	add    BYTE PTR ds:0x7c7003,al
    4763:	9f                   	lahf   
    4764:	05 04 9c 00 00       	add    eax,0x9c04
    4769:	00 0b                	add    BYTE PTR [ebx],cl
    476b:	33 02                	xor    eax,DWORD PTR [edx]
    476d:	00 00                	add    BYTE PTR [eax],al
    476f:	05 36 91 00 00       	add    eax,0x9136
    4774:	00 05 03 6c 7c 00    	add    BYTE PTR ds:0x7c6c03,al
    477a:	9f                   	lahf   
    477b:	00 b0 01 00 00 04    	add    BYTE PTR [eax+0x4000001],dh
    4781:	00 54 17 00          	add    BYTE PTR [edi+edx*1+0x0],dl
    4785:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4788:	c3                   	ret    
    4789:	00 00                	add    BYTE PTR [eax],al
    478b:	00 0c a3             	add    BYTE PTR [ebx+eiz*4],cl
    478e:	10 00                	adc    BYTE PTR [eax],al
    4790:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    4793:	00 00                	add    BYTE PTR [eax],al
    4795:	a8 41                	test   al,0x41
    4797:	00 9f 29 01 00 00    	add    BYTE PTR [edi+0x129],bl
    479d:	de 1a                	ficomp WORD PTR [edx]
    479f:	00 00                	add    BYTE PTR [eax],al
    47a1:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    47a8:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    47ab:	32 00                	xor    al,BYTE PTR [eax]
    47ad:	00 00                	add    BYTE PTR [eax],al
    47af:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    47b6:	03 08                	add    ecx,DWORD PTR [eax]
    47b8:	05 00 00 00 00       	add    eax,0x0
    47bd:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    47c0:	ad                   	lods   eax,DWORD PTR ds:[esi]
    47c1:	00 00                	add    BYTE PTR [eax],al
    47c3:	00 03                	add    BYTE PTR [ebx],al
    47c5:	01 06                	add    DWORD PTR [esi],eax
    47c7:	48                   	dec    eax
    47c8:	00 00                	add    BYTE PTR [eax],al
    47ca:	00 03                	add    BYTE PTR [ebx],al
    47cc:	01 08                	add    DWORD PTR [eax],ecx
    47ce:	3f                   	aas    
    47cf:	00 00                	add    BYTE PTR [eax],al
    47d1:	00 03                	add    BYTE PTR [ebx],al
    47d3:	02 07                	add    al,BYTE PTR [edi]
    47d5:	0e                   	push   cs
    47d6:	00 00                	add    BYTE PTR [eax],al
    47d8:	00 03                	add    BYTE PTR [ebx],al
    47da:	04 07                	add    al,0x7
    47dc:	2d 00 00 00 03       	sub    eax,0x3000000
    47e1:	01 06                	add    DWORD PTR [esi],eax
    47e3:	41                   	inc    ecx
    47e4:	00 00                	add    BYTE PTR [eax],al
    47e6:	00 03                	add    BYTE PTR [ebx],al
    47e8:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    47ee:	03 08                	add    ecx,DWORD PTR [eax]
    47f0:	07                   	pop    es
    47f1:	28 00                	sub    BYTE PTR [eax],al
    47f3:	00 00                	add    BYTE PTR [eax],al
    47f5:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    47f8:	2a 01                	sub    al,BYTE PTR [ecx]
    47fa:	00 00                	add    BYTE PTR [eax],al
    47fc:	04 04                	add    al,0x4
    47fe:	48                   	dec    eax
    47ff:	00 00                	add    BYTE PTR [eax],al
    4801:	00 05 b7 10 00 00    	add    BYTE PTR ds:0x10b7,al
    4807:	01 34 80             	add    DWORD PTR [eax+eax*4],esi
    480a:	00 00                	add    BYTE PTR [eax],al
    480c:	00 a8 41 00 9f 9e    	add    BYTE PTR [eax-0x6160ffbf],ch
    4812:	00 00                	add    BYTE PTR [eax],al
    4814:	00 01                	add    BYTE PTR [ecx],al
    4816:	9c                   	pushf  
    4817:	ee                   	out    dx,al
    4818:	00 00                	add    BYTE PTR [eax],al
    481a:	00 06                	add    BYTE PTR [esi],al
    481c:	c9                   	leave  
    481d:	10 00                	adc    BYTE PTR [eax],al
    481f:	00 01                	add    BYTE PTR [ecx],al
    4821:	34 80                	xor    al,0x80
    4823:	00 00                	add    BYTE PTR [eax],al
    4825:	00 02                	add    BYTE PTR [edx],al
    4827:	91                   	xchg   ecx,eax
    4828:	00 06                	add    BYTE PTR [esi],al
    482a:	c6                   	(bad)  
    482b:	10 00                	adc    BYTE PTR [eax],al
    482d:	00 01                	add    BYTE PTR [ecx],al
    482f:	34 80                	xor    al,0x80
    4831:	00 00                	add    BYTE PTR [eax],al
    4833:	00 02                	add    BYTE PTR [edx],al
    4835:	91                   	xchg   ecx,eax
    4836:	04 06                	add    al,0x6
    4838:	87 06                	xchg   DWORD PTR [esi],eax
    483a:	00 00                	add    BYTE PTR [eax],al
    483c:	01 34 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],esi
    4843:	91                   	xchg   ecx,eax
    4844:	08 07                	or     BYTE PTR [edi],al
    4846:	61                   	popa   
    4847:	00 01                	add    BYTE PTR [ecx],al
    4849:	36 80 00 00          	add    BYTE PTR ss:[eax],0x0
    484d:	00 01                	add    BYTE PTR [ecx],al
    484f:	56                   	push   esi
    4850:	07                   	pop    es
    4851:	62 00                	bound  eax,QWORD PTR [eax]
    4853:	01 36                	add    DWORD PTR [esi],esi
    4855:	80 00 00             	add    BYTE PTR [eax],0x0
    4858:	00 01                	add    BYTE PTR [ecx],al
    485a:	53                   	push   ebx
    485b:	07                   	pop    es
    485c:	6c                   	ins    BYTE PTR es:[edi],dx
    485d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    485f:	00 01                	add    BYTE PTR [ecx],al
    4861:	3c 25                	cmp    al,0x25
    4863:	00 00                	add    BYTE PTR [eax],al
    4865:	00 02                	add    BYTE PTR [edx],al
    4867:	91                   	xchg   ecx,eax
    4868:	6c                   	ins    BYTE PTR es:[edi],dx
    4869:	00 05 9b 10 00 00    	add    BYTE PTR ds:0x109b,al
    486f:	01 58 80             	add    DWORD PTR [eax-0x80],ebx
    4872:	00 00                	add    BYTE PTR [eax],al
    4874:	00 46 42             	add    BYTE PTR [esi+0x42],al
    4877:	00 9f 6e 00 00 00    	add    BYTE PTR [edi+0x6e],bl
    487d:	01 9c 3a 01 00 00 06 	add    DWORD PTR [edx+edi*1+0x6000001],ebx
    4884:	c9                   	leave  
    4885:	10 00                	adc    BYTE PTR [eax],al
    4887:	00 01                	add    BYTE PTR [ecx],al
    4889:	58                   	pop    eax
    488a:	3a 01                	cmp    al,BYTE PTR [ecx]
    488c:	00 00                	add    BYTE PTR [eax],al
    488e:	02 91 00 06 c6 10    	add    dl,BYTE PTR [ecx+0x10c60600]
    4894:	00 00                	add    BYTE PTR [eax],al
    4896:	01 58 3a             	add    DWORD PTR [eax+0x3a],ebx
    4899:	01 00                	add    DWORD PTR [eax],eax
    489b:	00 02                	add    BYTE PTR [edx],al
    489d:	91                   	xchg   ecx,eax
    489e:	04 07                	add    al,0x7
    48a0:	61                   	popa   
    48a1:	00 01                	add    BYTE PTR [ecx],al
    48a3:	5a                   	pop    edx
    48a4:	80 00 00             	add    BYTE PTR [eax],0x0
    48a7:	00 01                	add    BYTE PTR [ecx],al
    48a9:	56                   	push   esi
    48aa:	07                   	pop    es
    48ab:	62 00                	bound  eax,QWORD PTR [eax]
    48ad:	01 5a 80             	add    DWORD PTR [edx-0x80],ebx
    48b0:	00 00                	add    BYTE PTR [eax],al
    48b2:	00 01                	add    BYTE PTR [ecx],al
    48b4:	53                   	push   ebx
    48b5:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    48b8:	40                   	inc    eax
    48b9:	01 00                	add    DWORD PTR [eax],eax
    48bb:	00 08                	add    BYTE PTR [eax],cl
    48bd:	48                   	dec    eax
    48be:	00 00                	add    BYTE PTR [eax],al
    48c0:	00 09                	add    BYTE PTR [ecx],cl
    48c2:	b0 10                	mov    al,0x10
    48c4:	00 00                	add    BYTE PTR [eax],al
    48c6:	01 77 80             	add    DWORD PTR [edi-0x80],esi
    48c9:	00 00                	add    BYTE PTR [eax],al
    48cb:	00 b4 42 00 9f 1d 00 	add    BYTE PTR [edx+eax*2+0x1d9f00],dh
    48d2:	00 00                	add    BYTE PTR [eax],al
    48d4:	01 9c 7b 01 00 00 06 	add    DWORD PTR [ebx+edi*2+0x6000001],ebx
    48db:	c9                   	leave  
    48dc:	10 00                	adc    BYTE PTR [eax],al
    48de:	00 01                	add    BYTE PTR [ecx],al
    48e0:	77 3a                	ja     491c <sysEnter_Vector-0x12b6e4>
    48e2:	01 00                	add    DWORD PTR [eax],eax
    48e4:	00 02                	add    BYTE PTR [edx],al
    48e6:	91                   	xchg   ecx,eax
    48e7:	00 06                	add    BYTE PTR [esi],al
    48e9:	c6                   	(bad)  
    48ea:	10 00                	adc    BYTE PTR [eax],al
    48ec:	00 01                	add    BYTE PTR [ecx],al
    48ee:	77 3a                	ja     492a <sysEnter_Vector-0x12b6d6>
    48f0:	01 00                	add    DWORD PTR [eax],eax
    48f2:	00 02                	add    BYTE PTR [edx],al
    48f4:	91                   	xchg   ecx,eax
    48f5:	04 00                	add    al,0x0
    48f7:	0a 48 00             	or     cl,BYTE PTR [eax+0x0]
    48fa:	00 00                	add    BYTE PTR [eax],al
    48fc:	8b 01                	mov    eax,DWORD PTR [ecx]
    48fe:	00 00                	add    BYTE PTR [eax],al
    4900:	0b 79 00             	or     edi,DWORD PTR [ecx+0x0]
    4903:	00 00                	add    BYTE PTR [eax],al
    4905:	65 00 0c c0          	add    BYTE PTR gs:[eax+eax*8],cl
    4909:	10 00                	adc    BYTE PTR [eax],al
    490b:	00 01                	add    BYTE PTR [ecx],al
    490d:	19 7b 01             	sbb    DWORD PTR [ebx+0x1],edi
    4910:	00 00                	add    BYTE PTR [eax],al
    4912:	05 03 00 7b 00       	add    eax,0x7b0003
    4917:	9f                   	lahf   
    4918:	0d 78 00 00 00       	or     eax,0x78
    491d:	02 33                	add    dh,BYTE PTR [ebx]
    491f:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4920:	01 00                	add    DWORD PTR [eax],eax
    4922:	00 05 03 60 7c 00    	add    BYTE PTR ds:0x7c6003,al
    4928:	9f                   	lahf   
    4929:	04 04                	add    al,0x4
    492b:	80 00 00             	add    BYTE PTR [eax],0x0
    492e:	00 00                	add    BYTE PTR [eax],al
    4930:	8f 05 00 00 04 00    	pop    DWORD PTR ds:0x40000
    4936:	16                   	push   ss
    4937:	18 00                	sbb    BYTE PTR [eax],al
    4939:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    493c:	c3                   	ret    
    493d:	00 00                	add    BYTE PTR [eax],al
    493f:	00 0c d0             	add    BYTE PTR [eax+edx*8],cl
    4942:	10 00                	adc    BYTE PTR [eax],al
    4944:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    4947:	00 00                	add    BYTE PTR [eax],al
    4949:	d4 42                	aam    0x42
    494b:	00 9f 0e 0d 00 00    	add    BYTE PTR [edi+0xd0e],bl
    4951:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4952:	1b 00                	sbb    eax,DWORD PTR [eax]
    4954:	00 02                	add    BYTE PTR [edx],al
    4956:	6b 03 00             	imul   eax,DWORD PTR [ebx],0x0
    4959:	00 04 1f             	add    BYTE PTR [edi+ebx*1],al
    495c:	01 00                	add    DWORD PTR [eax],eax
    495e:	00 05 15 1f 01 00    	add    BYTE PTR ds:0x11f15,al
    4964:	00 03                	add    BYTE PTR [ebx],al
    4966:	fd                   	std    
    4967:	03 00                	add    eax,DWORD PTR [eax]
    4969:	00 00                	add    BYTE PTR [eax],al
    496b:	03 42 04             	add    eax,DWORD PTR [edx+0x4]
    496e:	00 00                	add    BYTE PTR [eax],al
    4970:	01 03                	add    DWORD PTR [ebx],eax
    4972:	84 02                	test   BYTE PTR [edx],al
    4974:	00 00                	add    BYTE PTR [eax],al
    4976:	02 03                	add    al,BYTE PTR [ebx]
    4978:	4e                   	dec    esi
    4979:	03 00                	add    eax,DWORD PTR [eax]
    497b:	00 03                	add    BYTE PTR [ebx],al
    497d:	03 6a 02             	add    ebp,DWORD PTR [edx+0x2]
    4980:	00 00                	add    BYTE PTR [eax],al
    4982:	04 03                	add    al,0x3
    4984:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
    4988:	05 03 24 04 00       	add    eax,0x42403
    498d:	00 0a                	add    BYTE PTR [edx],cl
    498f:	03 8f 03 00 00 0b    	add    ecx,DWORD PTR [edi+0xb000003]
    4995:	03 d6                	add    edx,esi
    4997:	03 00                	add    eax,DWORD PTR [eax]
    4999:	00 0c 03             	add    BYTE PTR [ebx+eax*1],cl
    499c:	5c                   	pop    esp
    499d:	03 00                	add    eax,DWORD PTR [eax]
    499f:	00 0d 03 75 03 00    	add    BYTE PTR ds:0x37503,cl
    49a5:	00 0e                	add    BYTE PTR [esi],cl
    49a7:	03 77 02             	add    esi,DWORD PTR [edi+0x2]
    49aa:	00 00                	add    BYTE PTR [eax],al
    49ac:	0f 03 b7 03 00 00 10 	lsl    esi,WORD PTR [edi+0x10000003]
    49b3:	03 a9 04 00 00 11    	add    ebp,DWORD PTR [ecx+0x11000004]
    49b9:	03 87 04 00 00 4f    	add    eax,DWORD PTR [edi+0x4f000004]
    49bf:	03 5c 04 00          	add    ebx,DWORD PTR [esp+eax*1+0x0]
    49c3:	00 50 03             	add    BYTE PTR [eax+0x3],dl
    49c6:	f0 03 00             	lock add eax,DWORD PTR [eax]
    49c9:	00 59 03             	add    BYTE PTR [ecx+0x3],bl
    49cc:	96                   	xchg   esi,eax
    49cd:	04 00                	add    al,0x0
    49cf:	00 61 03             	add    BYTE PTR [ecx+0x3],ah
    49d2:	1b 03                	sbb    eax,DWORD PTR [ebx]
    49d4:	00 00                	add    BYTE PTR [eax],al
    49d6:	97                   	xchg   edi,eax
    49d7:	04 0d                	add    al,0xd
    49d9:	04 00                	add    al,0x0
    49db:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    49de:	04 e3                	add    al,0xe3
    49e0:	03 00                	add    eax,DWORD PTR [eax]
    49e2:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    49e6:	c6 04 00 00          	mov    BYTE PTR [eax+eax*1],0x0
    49ea:	65 01 04 f7          	add    DWORD PTR gs:[edi+esi*8],eax
    49ee:	02 00                	add    al,BYTE PTR [eax]
    49f0:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    49f3:	04 d8                	add    al,0xd8
    49f5:	04 00                	add    al,0x0
    49f7:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    49fa:	04 82                	add    al,0x82
    49fc:	03 00                	add    eax,DWORD PTR [eax]
    49fe:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    4a01:	04 b8                	add    al,0xb8
    4a03:	02 00                	add    al,BYTE PTR [eax]
    4a05:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    4a08:	04 31                	add    al,0x31
    4a0a:	04 00                	add    al,0x0
    4a0c:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    4a0f:	04 0b                	add    al,0xb
    4a11:	03 00                	add    eax,DWORD PTR [eax]
    4a13:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    4a16:	04 79                	add    al,0x79
    4a18:	04 00                	add    al,0x0
    4a1a:	00 00                	add    BYTE PTR [eax],al
    4a1c:	03 04 9c             	add    eax,DWORD PTR [esp+ebx*4]
    4a1f:	03 00                	add    eax,DWORD PTR [eax]
    4a21:	00 01                	add    BYTE PTR [ecx],al
    4a23:	03 04 ab             	add    eax,DWORD PTR [ebx+ebp*4]
    4a26:	03 00                	add    eax,DWORD PTR [eax]
    4a28:	00 02                	add    BYTE PTR [edx],al
    4a2a:	03 04 3e             	add    eax,DWORD PTR [esi+edi*1]
    4a2d:	03 00                	add    eax,DWORD PTR [eax]
    4a2f:	00 03                	add    BYTE PTR [ebx],al
    4a31:	03 04 98             	add    eax,DWORD PTR [eax+ebx*4]
    4a34:	02 00                	add    al,BYTE PTR [eax]
    4a36:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    4a39:	04 e7                	add    al,0xe7
    4a3b:	02 00                	add    al,BYTE PTR [eax]
    4a3d:	00 05 03 04 2f 03    	add    BYTE PTR ds:0x32f0403,al
    4a43:	00 00                	add    BYTE PTR [eax],al
    4a45:	06                   	push   es
    4a46:	03 04 c4             	add    eax,DWORD PTR [esp+eax*8]
    4a49:	03 00                	add    eax,DWORD PTR [eax]
    4a4b:	00 00                	add    BYTE PTR [eax],al
    4a4d:	09 00                	or     DWORD PTR [eax],eax
    4a4f:	05 04 07 32 00       	add    eax,0x320704
    4a54:	00 00                	add    BYTE PTR [eax],al
    4a56:	06                   	push   es
    4a57:	04 05                	add    al,0x5
    4a59:	69 6e 74 00 05 01 08 	imul   ebp,DWORD PTR [esi+0x74],0x8010500
    4a60:	3f                   	aas    
    4a61:	00 00                	add    BYTE PTR [eax],al
    4a63:	00 05 02 07 0e 00    	add    BYTE PTR ds:0xe0702,al
    4a69:	00 00                	add    BYTE PTR [eax],al
    4a6b:	05 04 07 2d 00       	add    eax,0x2d0704
    4a70:	00 00                	add    BYTE PTR [eax],al
    4a72:	05 01 06 41 00       	add    eax,0x410601
    4a77:	00 00                	add    BYTE PTR [eax],al
    4a79:	05 02 05 b9 00       	add    eax,0xb90502
    4a7e:	00 00                	add    BYTE PTR [eax],al
    4a80:	05 08 05 00 00       	add    eax,0x508
    4a85:	00 00                	add    BYTE PTR [eax],al
    4a87:	05 08 07 28 00       	add    eax,0x280708
    4a8c:	00 00                	add    BYTE PTR [eax],al
    4a8e:	05 04 05 05 00       	add    eax,0x50504
    4a93:	00 00                	add    BYTE PTR [eax],al
    4a95:	05 04 07 2a 01       	add    eax,0x12a0704
    4a9a:	00 00                	add    BYTE PTR [eax],al
    4a9c:	07                   	pop    es
    4a9d:	04 72                	add    al,0x72
    4a9f:	01 00                	add    DWORD PTR [eax],eax
    4aa1:	00 05 01 06 48 00    	add    BYTE PTR ds:0x480601,al
    4aa7:	00 00                	add    BYTE PTR [eax],al
    4aa9:	08 45 02             	or     BYTE PTR [ebp+0x2],al
    4aac:	00 00                	add    BYTE PTR [eax],al
    4aae:	02 34 1f             	add    dh,BYTE PTR [edi+ebx*1]
    4ab1:	01 00                	add    DWORD PTR [eax],eax
    4ab3:	00 05 0c 04 ad 00    	add    BYTE PTR ds:0xad040c,al
    4ab9:	00 00                	add    BYTE PTR [eax],al
    4abb:	08 2a                	or     BYTE PTR [edx],ch
    4abd:	0d 00 00 03 2a       	or     eax,0x2a030000
    4ac2:	5e                   	pop    esi
    4ac3:	01 00                	add    DWORD PTR [eax],eax
    4ac5:	00 09                	add    BYTE PTR [ecx],cl
    4ac7:	74 6d                	je     4b36 <sysEnter_Vector-0x12b4ca>
    4ac9:	00 2c 03             	add    BYTE PTR [ebx+eax*1],ch
    4acc:	2c 26                	sub    al,0x26
    4ace:	02 00                	add    al,BYTE PTR [eax]
    4ad0:	00 0a                	add    BYTE PTR [edx],cl
    4ad2:	ab                   	stos   DWORD PTR es:[edi],eax
    4ad3:	0d 00 00 03 2e       	or     eax,0x2e030000
    4ad8:	26 01 00             	add    DWORD PTR es:[eax],eax
    4adb:	00 00                	add    BYTE PTR [eax],al
    4add:	0a 05 0d 00 00 03    	or     al,BYTE PTR ds:0x300000d
    4ae3:	2f                   	das    
    4ae4:	26 01 00             	add    DWORD PTR es:[eax],eax
    4ae7:	00 04 0a             	add    BYTE PTR [edx+ecx*1],al
    4aea:	1b 0c 00             	sbb    ecx,DWORD PTR [eax+eax*1]
    4aed:	00 03                	add    BYTE PTR [ebx],al
    4aef:	30 26                	xor    BYTE PTR [esi],ah
    4af1:	01 00                	add    DWORD PTR [eax],eax
    4af3:	00 08                	add    BYTE PTR [eax],cl
    4af5:	0a 8c 0d 00 00 03 31 	or     cl,BYTE PTR [ebp+ecx*1+0x31030000]
    4afc:	26 01 00             	add    DWORD PTR es:[eax],eax
    4aff:	00 0c 0a             	add    BYTE PTR [edx+ecx*1],cl
    4b02:	71 0c                	jno    4b10 <sysEnter_Vector-0x12b4f0>
    4b04:	00 00                	add    BYTE PTR [eax],al
    4b06:	03 32                	add    esi,DWORD PTR [edx]
    4b08:	26 01 00             	add    DWORD PTR es:[eax],eax
    4b0b:	00 10                	add    BYTE PTR [eax],dl
    4b0d:	0a 8b 0c 00 00 03    	or     cl,BYTE PTR [ebx+0x300000c]
    4b13:	33 26                	xor    esp,DWORD PTR [esi]
    4b15:	01 00                	add    DWORD PTR [eax],eax
    4b17:	00 14 0a             	add    BYTE PTR [edx+ecx*1],dl
    4b1a:	84 0d 00 00 03 34    	test   BYTE PTR ds:0x34030000,cl
    4b20:	26 01 00             	add    DWORD PTR es:[eax],eax
    4b23:	00 18                	add    BYTE PTR [eax],bl
    4b25:	0a 0c 0d 00 00 03 35 	or     cl,BYTE PTR [ecx*1+0x35030000]
    4b2c:	26 01 00             	add    DWORD PTR es:[eax],eax
    4b2f:	00 1c 0a             	add    BYTE PTR [edx+ecx*1],bl
    4b32:	be 0c 00 00 03       	mov    esi,0x300000c
    4b37:	36 26 01 00          	ss add DWORD PTR ss:es:[eax],eax
    4b3b:	00 20                	add    BYTE PTR [eax],ah
    4b3d:	0a 4b 0d             	or     cl,BYTE PTR [ebx+0xd]
    4b40:	00 00                	add    BYTE PTR [eax],al
    4b42:	03 37                	add    esi,DWORD PTR [edi]
    4b44:	5e                   	pop    esi
    4b45:	01 00                	add    DWORD PTR [eax],eax
    4b47:	00 24 0a             	add    BYTE PTR [edx+ecx*1],ah
    4b4a:	30 0c 00             	xor    BYTE PTR [eax+eax*1],cl
    4b4d:	00 03                	add    BYTE PTR [ebx],al
    4b4f:	38 26                	cmp    BYTE PTR [esi],ah
    4b51:	02 00                	add    al,BYTE PTR [eax]
    4b53:	00 28                	add    BYTE PTR [eax],ch
    4b55:	00 07                	add    BYTE PTR [edi],al
    4b57:	04 2c                	add    al,0x2c
    4b59:	02 00                	add    al,BYTE PTR [eax]
    4b5b:	00 0b                	add    BYTE PTR [ebx],cl
    4b5d:	72 01                	jb     4b60 <sysEnter_Vector-0x12b4a0>
    4b5f:	00 00                	add    BYTE PTR [eax],al
    4b61:	0c e5                	or     al,0xe5
    4b63:	10 00                	adc    BYTE PTR [eax],al
    4b65:	00 01                	add    BYTE PTR [ecx],al
    4b67:	1a 8b 01 00 00 d4    	sbb    cl,BYTE PTR [ebx-0x2bffffff]
    4b6d:	42                   	inc    edx
    4b6e:	00 9f 44 00 00 00    	add    BYTE PTR [edi+0x44],bl
    4b74:	01 9c 59 02 00 00 0d 	add    DWORD PTR [ecx+ebx*2+0xd000002],ebx
    4b7b:	f4                   	hlt    
    4b7c:	04 00                	add    al,0x0
    4b7e:	00 01                	add    BYTE PTR [ecx],al
    4b80:	1c 79                	sbb    al,0x79
    4b82:	01 00                	add    DWORD PTR [eax],eax
    4b84:	00 02                	add    BYTE PTR [edx],al
    4b86:	91                   	xchg   ecx,eax
    4b87:	6c                   	ins    BYTE PTR es:[edi],dx
    4b88:	00 0e                	add    BYTE PTR [esi],cl
    4b8a:	30 11                	xor    BYTE PTR [ecx],dl
    4b8c:	00 00                	add    BYTE PTR [eax],al
    4b8e:	01 22                	add    DWORD PTR [edx],esp
    4b90:	c7 02 00 00 18 43    	mov    DWORD PTR [edx],0x43180000
    4b96:	00 9f 19 03 00 00    	add    BYTE PTR [edi+0x319],bl
    4b9c:	01 9c c7 02 00 00 0f 	add    DWORD PTR [edi+eax*8+0xf000002],ebx
    4ba3:	6c                   	ins    BYTE PTR es:[edi],dx
    4ba4:	11 00                	adc    DWORD PTR [eax],eax
    4ba6:	00 01                	add    BYTE PTR [ecx],al
    4ba8:	22 cd                	and    cl,ch
    4baa:	02 00                	add    al,BYTE PTR [eax]
    4bac:	00 02                	add    BYTE PTR [edx],al
    4bae:	91                   	xchg   ecx,eax
    4baf:	00 0f                	add    BYTE PTR [edi],cl
    4bb1:	44                   	inc    esp
    4bb2:	11 00                	adc    DWORD PTR [eax],eax
    4bb4:	00 01                	add    BYTE PTR [ecx],al
    4bb6:	22 c7                	and    al,bh
    4bb8:	02 00                	add    al,BYTE PTR [eax]
    4bba:	00 02                	add    BYTE PTR [edx],al
    4bbc:	91                   	xchg   ecx,eax
    4bbd:	04 0d                	add    al,0xd
    4bbf:	b2 06                	mov    dl,0x6
    4bc1:	00 00                	add    BYTE PTR [eax],al
    4bc3:	01 24 8b             	add    DWORD PTR [ebx+ecx*4],esp
    4bc6:	01 00                	add    DWORD PTR [eax],eax
    4bc8:	00 02                	add    BYTE PTR [edx],al
    4bca:	91                   	xchg   ecx,eax
    4bcb:	68 0d 56 11 00       	push   0x11560d
    4bd0:	00 01                	add    BYTE PTR [ecx],al
    4bd2:	25 3b 01 00 00       	and    eax,0x13b
    4bd7:	02 91 64 0d 2a 11    	add    dl,BYTE PTR [ecx+0x112a0d64]
    4bdd:	00 00                	add    BYTE PTR [eax],al
    4bdf:	01 25 3b 01 00 00    	add    DWORD PTR ds:0x13b,esp
    4be5:	02 91 70 0d 8e 0c    	add    dl,BYTE PTR [ecx+0xc8e0d70]
    4beb:	00 00                	add    BYTE PTR [eax],al
    4bed:	01 26                	add    DWORD PTR [esi],esp
    4bef:	26 01 00             	add    DWORD PTR es:[eax],eax
    4bf2:	00 02                	add    BYTE PTR [edx],al
    4bf4:	91                   	xchg   ecx,eax
    4bf5:	6c                   	ins    BYTE PTR es:[edi],dx
    4bf6:	00 07                	add    BYTE PTR [edi],al
    4bf8:	04 96                	add    al,0x96
    4bfa:	01 00                	add    DWORD PTR [eax],eax
    4bfc:	00 07                	add    BYTE PTR [edi],al
    4bfe:	04 d3                	add    al,0xd3
    4c00:	02 00                	add    al,BYTE PTR [eax]
    4c02:	00 0b                	add    BYTE PTR [ebx],cl
    4c04:	8b 01                	mov    eax,DWORD PTR [ecx]
    4c06:	00 00                	add    BYTE PTR [eax],al
    4c08:	10 07                	adc    BYTE PTR [edi],al
    4c0a:	11 00                	adc    DWORD PTR [eax],eax
    4c0c:	00 01                	add    BYTE PTR [ecx],al
    4c0e:	3f                   	aas    
    4c0f:	c7 02 00 00 31 46    	mov    DWORD PTR [edx],0x46310000
    4c15:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    4c1b:	01 9c 0e 03 00 00 0f 	add    DWORD PTR [esi+ecx*1+0xf000003],ebx
    4c22:	6c                   	ins    BYTE PTR es:[edi],dx
    4c23:	11 00                	adc    DWORD PTR [eax],eax
    4c25:	00 01                	add    BYTE PTR [ecx],al
    4c27:	3f                   	aas    
    4c28:	cd 02                	int    0x2
    4c2a:	00 00                	add    BYTE PTR [eax],al
    4c2c:	02 91 00 0f 44 11    	add    dl,BYTE PTR [ecx+0x11440f00]
    4c32:	00 00                	add    BYTE PTR [eax],al
    4c34:	01 3f                	add    DWORD PTR [edi],edi
    4c36:	c7 02 00 00 02 91    	mov    DWORD PTR [edx],0x91020000
    4c3c:	04 00                	add    al,0x0
    4c3e:	10 db                	adc    bl,bl
    4c40:	10 00                	adc    BYTE PTR [eax],al
    4c42:	00 01                	add    BYTE PTR [ecx],al
    4c44:	44                   	inc    esp
    4c45:	c7 02 00 00 4e 46    	mov    DWORD PTR [edx],0x464e0000
    4c4b:	00 9f 3d 00 00 00    	add    BYTE PTR [edi+0x3d],bl
    4c51:	01 9c 42 03 00 00 0f 	add    DWORD PTR [edx+eax*2+0xf000003],ebx
    4c58:	6c                   	ins    BYTE PTR es:[edi],dx
    4c59:	11 00                	adc    DWORD PTR [eax],eax
    4c5b:	00 01                	add    BYTE PTR [ecx],al
    4c5d:	44                   	inc    esp
    4c5e:	cd 02                	int    0x2
    4c60:	00 00                	add    BYTE PTR [eax],al
    4c62:	02 91 00 11 74 00    	add    dl,BYTE PTR [ecx+0x741100]
    4c68:	01 45 8b             	add    DWORD PTR [ebp-0x75],eax
    4c6b:	01 00                	add    DWORD PTR [eax],eax
    4c6d:	00 02                	add    BYTE PTR [edx],al
    4c6f:	91                   	xchg   ecx,eax
    4c70:	74 00                	je     4c72 <sysEnter_Vector-0x12b38e>
    4c72:	10 72 11             	adc    BYTE PTR [edx+0x11],dh
    4c75:	00 00                	add    BYTE PTR [eax],al
    4c77:	01 4b c7             	add    DWORD PTR [ebx-0x39],ecx
    4c7a:	02 00                	add    al,BYTE PTR [eax]
    4c7c:	00 8b 46 00 9f 35    	add    BYTE PTR [ebx+0x359f0046],cl
    4c82:	00 00                	add    BYTE PTR [eax],al
    4c84:	00 01                	add    BYTE PTR [ecx],al
    4c86:	9c                   	pushf  
    4c87:	84 03                	test   BYTE PTR [ebx],al
    4c89:	00 00                	add    BYTE PTR [eax],al
    4c8b:	0f 6c                	(bad)  
    4c8d:	11 00                	adc    DWORD PTR [eax],eax
    4c8f:	00 01                	add    BYTE PTR [ecx],al
    4c91:	4b                   	dec    ebx
    4c92:	cd 02                	int    0x2
    4c94:	00 00                	add    BYTE PTR [eax],al
    4c96:	02 91 00 0f 44 11    	add    dl,BYTE PTR [ecx+0x11440f00]
    4c9c:	00 00                	add    BYTE PTR [eax],al
    4c9e:	01 4b c7             	add    DWORD PTR [ebx-0x39],ecx
    4ca1:	02 00                	add    al,BYTE PTR [eax]
    4ca3:	00 02                	add    BYTE PTR [edx],al
    4ca5:	91                   	xchg   ecx,eax
    4ca6:	04 11                	add    al,0x11
    4ca8:	74 00                	je     4caa <sysEnter_Vector-0x12b356>
    4caa:	01 4d 8b             	add    DWORD PTR [ebp-0x75],ecx
    4cad:	01 00                	add    DWORD PTR [eax],eax
    4caf:	00 02                	add    BYTE PTR [edx],al
    4cb1:	91                   	xchg   ecx,eax
    4cb2:	74 00                	je     4cb4 <sysEnter_Vector-0x12b34c>
    4cb4:	10 4a 11             	adc    BYTE PTR [edx+0x11],cl
    4cb7:	00 00                	add    BYTE PTR [eax],al
    4cb9:	01 53 c7             	add    DWORD PTR [ebx-0x39],edx
    4cbc:	02 00                	add    al,BYTE PTR [eax]
    4cbe:	00 c0                	add    al,al
    4cc0:	46                   	inc    esi
    4cc1:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    4cc7:	01 9c ba 03 00 00 0f 	add    DWORD PTR [edx+edi*4+0xf000003],ebx
    4cce:	6c                   	ins    BYTE PTR es:[edi],dx
    4ccf:	11 00                	adc    DWORD PTR [eax],eax
    4cd1:	00 01                	add    BYTE PTR [ecx],al
    4cd3:	53                   	push   ebx
    4cd4:	cd 02                	int    0x2
    4cd6:	00 00                	add    BYTE PTR [eax],al
    4cd8:	02 91 00 0f 44 11    	add    dl,BYTE PTR [ecx+0x11440f00]
    4cde:	00 00                	add    BYTE PTR [eax],al
    4ce0:	01 53 c7             	add    DWORD PTR [ebx-0x39],edx
    4ce3:	02 00                	add    al,BYTE PTR [eax]
    4ce5:	00 02                	add    BYTE PTR [edx],al
    4ce7:	91                   	xchg   ecx,eax
    4ce8:	04 00                	add    al,0x0
    4cea:	0e                   	push   cs
    4ceb:	5f                   	pop    edi
    4cec:	11 00                	adc    DWORD PTR [eax],eax
    4cee:	00 01                	add    BYTE PTR [ecx],al
    4cf0:	57                   	push   edi
    4cf1:	8b 01                	mov    eax,DWORD PTR [ecx]
    4cf3:	00 00                	add    BYTE PTR [eax],al
    4cf5:	dd 46 00             	fld    QWORD PTR [esi+0x0]
    4cf8:	9f                   	lahf   
    4cf9:	57                   	push   edi
    4cfa:	08 00                	or     BYTE PTR [eax],al
    4cfc:	00 01                	add    BYTE PTR [ecx],al
    4cfe:	9c                   	pushf  
    4cff:	52                   	push   edx
    4d00:	04 00                	add    al,0x0
    4d02:	00 0f                	add    BYTE PTR [edi],cl
    4d04:	44                   	inc    esp
    4d05:	11 00                	adc    DWORD PTR [eax],eax
    4d07:	00 01                	add    BYTE PTR [ecx],al
    4d09:	57                   	push   edi
    4d0a:	c7 02 00 00 02 91    	mov    DWORD PTR [edx],0x91020000
    4d10:	00 11                	add    BYTE PTR [ecx],dl
    4d12:	64                   	fs
    4d13:	61                   	popa   
    4d14:	79 00                	jns    4d16 <sysEnter_Vector-0x12b2ea>
    4d16:	01 58 5e             	add    DWORD PTR [eax+0x5e],ebx
    4d19:	01 00                	add    DWORD PTR [eax],eax
    4d1b:	00 02                	add    BYTE PTR [edx],al
    4d1d:	91                   	xchg   ecx,eax
    4d1e:	68 0d 8e 0c 00       	push   0xc8e0d
    4d23:	00 01                	add    BYTE PTR [ecx],al
    4d25:	58                   	pop    eax
    4d26:	5e                   	pop    esi
    4d27:	01 00                	add    DWORD PTR [eax],eax
    4d29:	00 02                	add    BYTE PTR [edx],al
    4d2b:	91                   	xchg   ecx,eax
    4d2c:	54                   	push   esp
    4d2d:	0d 8b 0c 00 00       	or     eax,0xc8b
    4d32:	01 59 26             	add    DWORD PTR [ecx+0x26],ebx
    4d35:	01 00                	add    DWORD PTR [eax],eax
    4d37:	00 02                	add    BYTE PTR [edx],al
    4d39:	91                   	xchg   ecx,eax
    4d3a:	4c                   	dec    esp
    4d3b:	0d 0f 0d 00 00       	or     eax,0xd0f
    4d40:	01 5a 26             	add    DWORD PTR [edx+0x26],ebx
    4d43:	01 00                	add    DWORD PTR [eax],eax
    4d45:	00 02                	add    BYTE PTR [edx],al
    4d47:	91                   	xchg   ecx,eax
    4d48:	64                   	fs
    4d49:	0d 1c 11 00 00       	or     eax,0x111c
    4d4e:	01 5a 26             	add    DWORD PTR [edx+0x26],ebx
    4d51:	01 00                	add    DWORD PTR [eax],eax
    4d53:	00 02                	add    BYTE PTR [edx],al
    4d55:	91                   	xchg   ecx,eax
    4d56:	60                   	pusha  
    4d57:	0d 26 09 00 00       	or     eax,0x926
    4d5c:	01 5b 5e             	add    DWORD PTR [ebx+0x5e],ebx
    4d5f:	01 00                	add    DWORD PTR [eax],eax
    4d61:	00 02                	add    BYTE PTR [edx],al
    4d63:	91                   	xchg   ecx,eax
    4d64:	50                   	push   eax
    4d65:	0d 8f 11 00 00       	or     eax,0x118f
    4d6a:	01 5c 26 01          	add    DWORD PTR [esi+eiz*1+0x1],ebx
    4d6e:	00 00                	add    BYTE PTR [eax],al
    4d70:	02 91 5c 11 64 73    	add    dl,BYTE PTR [ecx+0x7364115c]
    4d76:	74 00                	je     4d78 <sysEnter_Vector-0x12b288>
    4d78:	01 5d 5e             	add    DWORD PTR [ebp+0x5e],ebx
    4d7b:	01 00                	add    DWORD PTR [eax],eax
    4d7d:	00 02                	add    BYTE PTR [edx],al
    4d7f:	91                   	xchg   ecx,eax
    4d80:	58                   	pop    eax
    4d81:	00 10                	add    BYTE PTR [eax],dl
    4d83:	22 11                	and    dl,BYTE PTR [ecx]
    4d85:	00 00                	add    BYTE PTR [eax],al
    4d87:	01 c2                	add    edx,eax
    4d89:	c7 02 00 00 34 4f    	mov    DWORD PTR [edx],0x4f340000
    4d8f:	00 9f 6d 00 00 00    	add    BYTE PTR [edi+0x6d],bl
    4d95:	01 9c 96 04 00 00 0f 	add    DWORD PTR [esi+edx*4+0xf000004],ebx
    4d9c:	b2 06                	mov    dl,0x6
    4d9e:	00 00                	add    BYTE PTR [eax],al
    4da0:	01 c2                	add    edx,eax
    4da2:	c7 02 00 00 02 91    	mov    DWORD PTR [edx],0x91020000
    4da8:	00 0f                	add    BYTE PTR [edi],cl
    4daa:	3a 11                	cmp    dl,BYTE PTR [ecx]
    4dac:	00 00                	add    BYTE PTR [eax],al
    4dae:	01 c2                	add    edx,eax
    4db0:	96                   	xchg   esi,eax
    4db1:	04 00                	add    al,0x0
    4db3:	00 02                	add    BYTE PTR [edx],al
    4db5:	91                   	xchg   ecx,eax
    4db6:	5c                   	pop    esp
    4db7:	0d a7 09 00 00       	or     eax,0x9a7
    4dbc:	01 c4                	add    esp,eax
    4dbe:	8b 01                	mov    eax,DWORD PTR [ecx]
    4dc0:	00 00                	add    BYTE PTR [eax],al
    4dc2:	02 91 6c 00 05 01    	add    dl,BYTE PTR [ecx+0x105006c]
    4dc8:	02 6a 06             	add    ch,BYTE PTR [edx+0x6]
    4dcb:	00 00                	add    BYTE PTR [eax],al
    4dcd:	10 b2 06 00 00 01    	adc    BYTE PTR [edx+0x1000006],dh
    4dd3:	cd 8b                	int    0x8b
    4dd5:	01 00                	add    DWORD PTR [eax],eax
    4dd7:	00 a1 4f 00 9f 41    	add    BYTE PTR [ecx+0x419f004f],ah
    4ddd:	00 00                	add    BYTE PTR [eax],al
    4ddf:	00 01                	add    BYTE PTR [ecx],al
    4de1:	9c                   	pushf  
    4de2:	d3 04 00             	rol    DWORD PTR [eax+eax*1],cl
    4de5:	00 0f                	add    BYTE PTR [edi],cl
    4de7:	88 11                	mov    BYTE PTR [ecx],dl
    4de9:	00 00                	add    BYTE PTR [eax],al
    4deb:	01 cd                	add    ebp,ecx
    4ded:	d3 04 00             	rol    DWORD PTR [eax+eax*1],cl
    4df0:	00 02                	add    BYTE PTR [edx],al
    4df2:	91                   	xchg   ecx,eax
    4df3:	00 0d a7 09 00 00    	add    BYTE PTR ds:0x9a7,cl
    4df9:	01 cf                	add    edi,ecx
    4dfb:	79 01                	jns    4dfe <sysEnter_Vector-0x12b202>
    4dfd:	00 00                	add    BYTE PTR [eax],al
    4dff:	02 91 6c 00 07 04    	add    dl,BYTE PTR [ecx+0x407006c]
    4e05:	8b 01                	mov    eax,DWORD PTR [ecx]
    4e07:	00 00                	add    BYTE PTR [eax],al
    4e09:	12 78 00             	adc    bh,BYTE PTR [eax+0x0]
    4e0c:	00 00                	add    BYTE PTR [eax],al
    4e0e:	04 33                	add    al,0x33
    4e10:	ea 04 00 00 05 03 60 	jmp    0x6003:0x5000004
    4e17:	7c 00                	jl     4e19 <sysEnter_Vector-0x12b1e7>
    4e19:	9f                   	lahf   
    4e1a:	07                   	pop    es
    4e1b:	04 6c                	add    al,0x6c
    4e1d:	01 00                	add    DWORD PTR [eax],eax
    4e1f:	00 12                	add    BYTE PTR [edx],dl
    4e21:	ee                   	out    dx,al
    4e22:	10 00                	adc    BYTE PTR [eax],al
    4e24:	00 01                	add    BYTE PTR [ecx],al
    4e26:	0d 26 01 00 00       	or     eax,0x126
    4e2b:	05 03 68 7b 00       	add    eax,0x7b6803
    4e30:	9f                   	lahf   
    4e31:	12 7f 11             	adc    bh,BYTE PTR [edi+0x11]
    4e34:	00 00                	add    BYTE PTR [eax],al
    4e36:	01 0e                	add    DWORD PTR [esi],ecx
    4e38:	5e                   	pop    esi
    4e39:	01 00                	add    DWORD PTR [eax],eax
    4e3b:	00 05 03 f0 7c 00    	add    BYTE PTR ds:0x7cf003,al
    4e41:	9f                   	lahf   
    4e42:	13 6c 01 00          	adc    ebp,DWORD PTR [ecx+eax*1+0x0]
    4e46:	00 22                	add    BYTE PTR [edx],ah
    4e48:	05 00 00 14 65       	add    eax,0x65140000
    4e4d:	01 00                	add    DWORD PTR [eax],eax
    4e4f:	00 01                	add    BYTE PTR [ecx],al
    4e51:	00 12                	add    BYTE PTR [edx],dl
    4e53:	ff 10                	call   DWORD PTR [eax]
    4e55:	00 00                	add    BYTE PTR [eax],al
    4e57:	01 0f                	add    DWORD PTR [edi],ecx
    4e59:	12 05 00 00 05 03    	adc    al,BYTE PTR ds:0x3050000
    4e5f:	50                   	push   eax
    4e60:	7c 00                	jl     4e62 <sysEnter_Vector-0x12b19e>
    4e62:	9f                   	lahf   
    4e63:	12 10                	adc    dl,BYTE PTR [eax]
    4e65:	11 00                	adc    DWORD PTR [eax],eax
    4e67:	00 01                	add    BYTE PTR [ecx],al
    4e69:	10 26                	adc    BYTE PTR [esi],ah
    4e6b:	01 00                	add    DWORD PTR [eax],eax
    4e6d:	00 05 03 00 7d 00    	add    BYTE PTR ds:0x7d0003,al
    4e73:	9f                   	lahf   
    4e74:	12 44 11 00          	adc    al,BYTE PTR [ecx+edx*1+0x0]
    4e78:	00 01                	add    BYTE PTR [ecx],al
    4e7a:	11 96 01 00 00 05    	adc    DWORD PTR [esi+0x5000001],edx
    4e80:	03 20                	add    esp,DWORD PTR [eax]
    4e82:	7d 00                	jge    4e84 <sysEnter_Vector-0x12b17c>
    4e84:	9f                   	lahf   
    4e85:	12 f8                	adc    bh,al
    4e87:	10 00                	adc    BYTE PTR [eax],al
    4e89:	00 01                	add    BYTE PTR [ecx],al
    4e8b:	13 5e 01             	adc    ebx,DWORD PTR [esi+0x1]
    4e8e:	00 00                	add    BYTE PTR [eax],al
    4e90:	05 03 f4 7c 00       	add    eax,0x7cf403
    4e95:	9f                   	lahf   
    4e96:	13 26                	adc    esp,DWORD PTR [esi]
    4e98:	01 00                	add    DWORD PTR [eax],eax
    4e9a:	00 7c 05 00          	add    BYTE PTR [ebp+eax*1+0x0],bh
    4e9e:	00 14 65 01 00 00 01 	add    BYTE PTR [eiz*2+0x1000001],dl
    4ea5:	14 65                	adc    al,0x65
    4ea7:	01 00                	add    DWORD PTR [eax],eax
    4ea9:	00 0b                	add    BYTE PTR [ebx],cl
    4eab:	00 12                	add    BYTE PTR [edx],dl
    4ead:	66 11 00             	adc    WORD PTR [eax],ax
    4eb0:	00 01                	add    BYTE PTR [ecx],al
    4eb2:	15 8d 05 00 00       	adc    eax,0x58d
    4eb7:	05 03 60 79 00       	add    eax,0x796003
    4ebc:	9f                   	lahf   
    4ebd:	0b 66 05             	or     esp,DWORD PTR [esi+0x5]
    4ec0:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	01 11                	add    DWORD PTR [ecx],edx
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
       b:	11 01                	adc    DWORD PTR [ecx],eax
       d:	12 06                	adc    al,BYTE PTR [esi]
       f:	10 17                	adc    BYTE PTR [edi],dl
      11:	00 00                	add    BYTE PTR [eax],al
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      1b:	08 00                	or     BYTE PTR [eax],al
      1d:	00 03                	add    BYTE PTR [ebx],al
      1f:	24 00                	and    al,0x0
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      26:	0e                   	push   cs
      27:	00 00                	add    BYTE PTR [eax],al
      29:	04 0f                	add    al,0xf
      2b:	00 0b                	add    BYTE PTR [ebx],cl
      2d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      30:	00 00                	add    BYTE PTR [eax],al
      32:	05 2e 01 3f 19       	add    eax,0x193f012e
      37:	03 0e                	add    ecx,DWORD PTR [esi]
      39:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      3b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      3d:	27                   	daa    
      3e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      41:	11 01                	adc    DWORD PTR [ecx],eax
      43:	12 06                	adc    al,BYTE PTR [esi]
      45:	40                   	inc    eax
      46:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      4c:	00 00                	add    BYTE PTR [eax],al
      4e:	06                   	push   es
      4f:	05 00 03 08 3a       	add    eax,0x3a080300
      54:	0b 3b                	or     edi,DWORD PTR [ebx]
      56:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      59:	02 18                	add    bl,BYTE PTR [eax]
      5b:	00 00                	add    BYTE PTR [eax],al
      5d:	07                   	pop    es
      5e:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
      62:	00 00                	add    BYTE PTR [eax],al
      64:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
      67:	03 0e                	add    ecx,DWORD PTR [esi]
      69:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      6b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      6d:	49                   	dec    ecx
      6e:	13 3f                	adc    edi,DWORD PTR [edi]
      70:	19 02                	sbb    DWORD PTR [edx],eax
      72:	18 00                	sbb    BYTE PTR [eax],al
      74:	00 00                	add    BYTE PTR [eax],al
      76:	01 11                	add    DWORD PTR [ecx],edx
      78:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      7e:	0e                   	push   cs
      7f:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      81:	11 01                	adc    DWORD PTR [ecx],eax
      83:	12 06                	adc    al,BYTE PTR [esi]
      85:	10 17                	adc    BYTE PTR [edi],dl
      87:	00 00                	add    BYTE PTR [eax],al
      89:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      8c:	0b 0b                	or     ecx,DWORD PTR [ebx]
      8e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      91:	08 00                	or     BYTE PTR [eax],al
      93:	00 03                	add    BYTE PTR [ebx],al
      95:	24 00                	and    al,0x0
      97:	0b 0b                	or     ecx,DWORD PTR [ebx]
      99:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      9c:	0e                   	push   cs
      9d:	00 00                	add    BYTE PTR [eax],al
      9f:	04 0f                	add    al,0xf
      a1:	00 0b                	add    BYTE PTR [ebx],cl
      a3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      a6:	00 00                	add    BYTE PTR [eax],al
      a8:	05 2e 01 3f 19       	add    eax,0x193f012e
      ad:	03 0e                	add    ecx,DWORD PTR [esi]
      af:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      b1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      b3:	27                   	daa    
      b4:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      b7:	11 01                	adc    DWORD PTR [ecx],eax
      b9:	12 06                	adc    al,BYTE PTR [esi]
      bb:	40                   	inc    eax
      bc:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      c2:	00 00                	add    BYTE PTR [eax],al
      c4:	06                   	push   es
      c5:	05 00 03 0e 3a       	add    eax,0x3a0e0300
      ca:	0b 3b                	or     edi,DWORD PTR [ebx]
      cc:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      cf:	02 18                	add    bl,BYTE PTR [eax]
      d1:	00 00                	add    BYTE PTR [eax],al
      d3:	07                   	pop    es
      d4:	34 00                	xor    al,0x0
      d6:	03 08                	add    ecx,DWORD PTR [eax]
      d8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      da:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      dc:	49                   	dec    ecx
      dd:	13 02                	adc    eax,DWORD PTR [edx]
      df:	18 00                	sbb    BYTE PTR [eax],al
      e1:	00 08                	add    BYTE PTR [eax],cl
      e3:	34 00                	xor    al,0x0
      e5:	03 0e                	add    ecx,DWORD PTR [esi]
      e7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      e9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      eb:	49                   	dec    ecx
      ec:	13 3f                	adc    edi,DWORD PTR [edi]
      ee:	19 02                	sbb    DWORD PTR [edx],eax
      f0:	18 00                	sbb    BYTE PTR [eax],al
      f2:	00 00                	add    BYTE PTR [eax],al
      f4:	01 11                	add    DWORD PTR [ecx],edx
      f6:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      fc:	0e                   	push   cs
      fd:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      ff:	11 01                	adc    DWORD PTR [ecx],eax
     101:	12 06                	adc    al,BYTE PTR [esi]
     103:	10 17                	adc    BYTE PTR [edi],dl
     105:	00 00                	add    BYTE PTR [eax],al
     107:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     10a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     10c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     10f:	08 00                	or     BYTE PTR [eax],al
     111:	00 03                	add    BYTE PTR [ebx],al
     113:	24 00                	and    al,0x0
     115:	0b 0b                	or     ecx,DWORD PTR [ebx]
     117:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     11a:	0e                   	push   cs
     11b:	00 00                	add    BYTE PTR [eax],al
     11d:	04 0f                	add    al,0xf
     11f:	00 0b                	add    BYTE PTR [ebx],cl
     121:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     124:	00 00                	add    BYTE PTR [eax],al
     126:	05 2e 01 3f 19       	add    eax,0x193f012e
     12b:	03 0e                	add    ecx,DWORD PTR [esi]
     12d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     12f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     131:	27                   	daa    
     132:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     135:	11 01                	adc    DWORD PTR [ecx],eax
     137:	12 06                	adc    al,BYTE PTR [esi]
     139:	40                   	inc    eax
     13a:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     140:	00 00                	add    BYTE PTR [eax],al
     142:	06                   	push   es
     143:	05 00 03 08 3a       	add    eax,0x3a080300
     148:	0b 3b                	or     edi,DWORD PTR [ebx]
     14a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     14d:	02 18                	add    bl,BYTE PTR [eax]
     14f:	00 00                	add    BYTE PTR [eax],al
     151:	07                   	pop    es
     152:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     157:	0b 3b                	or     edi,DWORD PTR [ebx]
     159:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     15c:	02 18                	add    bl,BYTE PTR [eax]
     15e:	00 00                	add    BYTE PTR [eax],al
     160:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     163:	03 0e                	add    ecx,DWORD PTR [esi]
     165:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     167:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     169:	49                   	dec    ecx
     16a:	13 02                	adc    eax,DWORD PTR [edx]
     16c:	18 00                	sbb    BYTE PTR [eax],al
     16e:	00 09                	add    BYTE PTR [ecx],cl
     170:	34 00                	xor    al,0x0
     172:	03 08                	add    ecx,DWORD PTR [eax]
     174:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     176:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     178:	49                   	dec    ecx
     179:	13 02                	adc    eax,DWORD PTR [edx]
     17b:	18 00                	sbb    BYTE PTR [eax],al
     17d:	00 0a                	add    BYTE PTR [edx],cl
     17f:	34 00                	xor    al,0x0
     181:	03 0e                	add    ecx,DWORD PTR [esi]
     183:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     185:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     187:	49                   	dec    ecx
     188:	13 3f                	adc    edi,DWORD PTR [edi]
     18a:	19 02                	sbb    DWORD PTR [edx],eax
     18c:	18 00                	sbb    BYTE PTR [eax],al
     18e:	00 00                	add    BYTE PTR [eax],al
     190:	01 11                	add    DWORD PTR [ecx],edx
     192:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     198:	0e                   	push   cs
     199:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     19b:	11 01                	adc    DWORD PTR [ecx],eax
     19d:	12 06                	adc    al,BYTE PTR [esi]
     19f:	10 17                	adc    BYTE PTR [edi],dl
     1a1:	00 00                	add    BYTE PTR [eax],al
     1a3:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     1a6:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1a8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1ab:	0e                   	push   cs
     1ac:	00 00                	add    BYTE PTR [eax],al
     1ae:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     1b1:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1b3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1b6:	08 00                	or     BYTE PTR [eax],al
     1b8:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     1bb:	00 0b                	add    BYTE PTR [ebx],cl
     1bd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     1c0:	00 00                	add    BYTE PTR [eax],al
     1c2:	05 2e 01 3f 19       	add    eax,0x193f012e
     1c7:	03 0e                	add    ecx,DWORD PTR [esi]
     1c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1cd:	27                   	daa    
     1ce:	19 11                	sbb    DWORD PTR [ecx],edx
     1d0:	01 12                	add    DWORD PTR [edx],edx
     1d2:	06                   	push   es
     1d3:	40                   	inc    eax
     1d4:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     1da:	00 00                	add    BYTE PTR [eax],al
     1dc:	06                   	push   es
     1dd:	05 00 03 08 3a       	add    eax,0x3a080300
     1e2:	0b 3b                	or     edi,DWORD PTR [ebx]
     1e4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     1e7:	02 18                	add    bl,BYTE PTR [eax]
     1e9:	00 00                	add    BYTE PTR [eax],al
     1eb:	07                   	pop    es
     1ec:	34 00                	xor    al,0x0
     1ee:	03 08                	add    ecx,DWORD PTR [eax]
     1f0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1f2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1f4:	49                   	dec    ecx
     1f5:	13 02                	adc    eax,DWORD PTR [edx]
     1f7:	18 00                	sbb    BYTE PTR [eax],al
     1f9:	00 08                	add    BYTE PTR [eax],cl
     1fb:	34 00                	xor    al,0x0
     1fd:	03 0e                	add    ecx,DWORD PTR [esi]
     1ff:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     201:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     203:	49                   	dec    ecx
     204:	13 02                	adc    eax,DWORD PTR [edx]
     206:	18 00                	sbb    BYTE PTR [eax],al
     208:	00 09                	add    BYTE PTR [ecx],cl
     20a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     20d:	19 03                	sbb    DWORD PTR [ebx],eax
     20f:	0e                   	push   cs
     210:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     212:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     214:	27                   	daa    
     215:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     218:	11 01                	adc    DWORD PTR [ecx],eax
     21a:	12 06                	adc    al,BYTE PTR [esi]
     21c:	40                   	inc    eax
     21d:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     223:	00 00                	add    BYTE PTR [eax],al
     225:	0a 2e                	or     ch,BYTE PTR [esi]
     227:	01 3f                	add    DWORD PTR [edi],edi
     229:	19 03                	sbb    DWORD PTR [ebx],eax
     22b:	0e                   	push   cs
     22c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     22e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     230:	27                   	daa    
     231:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     234:	11 01                	adc    DWORD PTR [ecx],eax
     236:	12 06                	adc    al,BYTE PTR [esi]
     238:	40                   	inc    eax
     239:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     23f:	00 00                	add    BYTE PTR [eax],al
     241:	0b 0b                	or     ecx,DWORD PTR [ebx]
     243:	01 11                	add    DWORD PTR [ecx],edx
     245:	01 12                	add    DWORD PTR [edx],edx
     247:	06                   	push   es
     248:	00 00                	add    BYTE PTR [eax],al
     24a:	0c 34                	or     al,0x34
     24c:	00 03                	add    BYTE PTR [ebx],al
     24e:	0e                   	push   cs
     24f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     251:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     253:	49                   	dec    ecx
     254:	13 3f                	adc    edi,DWORD PTR [edi]
     256:	19 02                	sbb    DWORD PTR [edx],eax
     258:	18 00                	sbb    BYTE PTR [eax],al
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	01 11                	add    DWORD PTR [ecx],edx
     25e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     264:	0e                   	push   cs
     265:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     267:	11 01                	adc    DWORD PTR [ecx],eax
     269:	12 06                	adc    al,BYTE PTR [esi]
     26b:	10 17                	adc    BYTE PTR [edi],dl
     26d:	00 00                	add    BYTE PTR [eax],al
     26f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     272:	0b 0b                	or     ecx,DWORD PTR [ebx]
     274:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     277:	0e                   	push   cs
     278:	00 00                	add    BYTE PTR [eax],al
     27a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     27d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     27f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     282:	08 00                	or     BYTE PTR [eax],al
     284:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     287:	00 03                	add    BYTE PTR [ebx],al
     289:	0e                   	push   cs
     28a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     28c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     28e:	49                   	dec    ecx
     28f:	13 00                	adc    eax,DWORD PTR [eax]
     291:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     297:	49                   	dec    ecx
     298:	13 00                	adc    eax,DWORD PTR [eax]
     29a:	00 06                	add    BYTE PTR [esi],al
     29c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     29f:	19 03                	sbb    DWORD PTR [ebx],eax
     2a1:	0e                   	push   cs
     2a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2a6:	27                   	daa    
     2a7:	19 11                	sbb    DWORD PTR [ecx],edx
     2a9:	01 12                	add    DWORD PTR [edx],edx
     2ab:	06                   	push   es
     2ac:	40                   	inc    eax
     2ad:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     2b3:	00 00                	add    BYTE PTR [eax],al
     2b5:	07                   	pop    es
     2b6:	05 00 03 08 3a       	add    eax,0x3a080300
     2bb:	0b 3b                	or     edi,DWORD PTR [ebx]
     2bd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     2c0:	02 18                	add    bl,BYTE PTR [eax]
     2c2:	00 00                	add    BYTE PTR [eax],al
     2c4:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     2c7:	03 08                	add    ecx,DWORD PTR [eax]
     2c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2cd:	49                   	dec    ecx
     2ce:	13 02                	adc    eax,DWORD PTR [edx]
     2d0:	18 00                	sbb    BYTE PTR [eax],al
     2d2:	00 09                	add    BYTE PTR [ecx],cl
     2d4:	34 00                	xor    al,0x0
     2d6:	03 0e                	add    ecx,DWORD PTR [esi]
     2d8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2da:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2dc:	49                   	dec    ecx
     2dd:	13 02                	adc    eax,DWORD PTR [edx]
     2df:	18 00                	sbb    BYTE PTR [eax],al
     2e1:	00 0a                	add    BYTE PTR [edx],cl
     2e3:	01 01                	add    DWORD PTR [ecx],eax
     2e5:	49                   	dec    ecx
     2e6:	13 01                	adc    eax,DWORD PTR [ecx]
     2e8:	13 00                	adc    eax,DWORD PTR [eax]
     2ea:	00 0b                	add    BYTE PTR [ebx],cl
     2ec:	21 00                	and    DWORD PTR [eax],eax
     2ee:	49                   	dec    ecx
     2ef:	13 2f                	adc    ebp,DWORD PTR [edi]
     2f1:	0b 00                	or     eax,DWORD PTR [eax]
     2f3:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     2f6:	01 3f                	add    DWORD PTR [edi],edi
     2f8:	19 03                	sbb    DWORD PTR [ebx],eax
     2fa:	0e                   	push   cs
     2fb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2fd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2ff:	11 01                	adc    DWORD PTR [ecx],eax
     301:	12 06                	adc    al,BYTE PTR [esi]
     303:	40                   	inc    eax
     304:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     30a:	00 00                	add    BYTE PTR [eax],al
     30c:	0d 34 00 03 0e       	or     eax,0xe030034
     311:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     313:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     315:	49                   	dec    ecx
     316:	13 3f                	adc    edi,DWORD PTR [edi]
     318:	19 02                	sbb    DWORD PTR [edx],eax
     31a:	18 00                	sbb    BYTE PTR [eax],al
     31c:	00 0e                	add    BYTE PTR [esi],cl
     31e:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     322:	00 00                	add    BYTE PTR [eax],al
     324:	00 01                	add    BYTE PTR [ecx],al
     326:	11 01                	adc    DWORD PTR [ecx],eax
     328:	25 0e 13 0b 03       	and    eax,0x30b130e
     32d:	0e                   	push   cs
     32e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     330:	11 01                	adc    DWORD PTR [ecx],eax
     332:	12 06                	adc    al,BYTE PTR [esi]
     334:	10 17                	adc    BYTE PTR [edi],dl
     336:	00 00                	add    BYTE PTR [eax],al
     338:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     33b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     33d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     340:	0e                   	push   cs
     341:	00 00                	add    BYTE PTR [eax],al
     343:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     346:	0b 0b                	or     ecx,DWORD PTR [ebx]
     348:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     34b:	08 00                	or     BYTE PTR [eax],al
     34d:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     350:	00 0b                	add    BYTE PTR [ebx],cl
     352:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     355:	00 00                	add    BYTE PTR [eax],al
     357:	05 16 00 03 0e       	add    eax,0xe030016
     35c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     35e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     360:	49                   	dec    ecx
     361:	13 00                	adc    eax,DWORD PTR [eax]
     363:	00 06                	add    BYTE PTR [esi],al
     365:	04 01                	add    al,0x1
     367:	03 0e                	add    ecx,DWORD PTR [esi]
     369:	0b 0b                	or     ecx,DWORD PTR [ebx]
     36b:	49                   	dec    ecx
     36c:	13 3a                	adc    edi,DWORD PTR [edx]
     36e:	0b 3b                	or     edi,DWORD PTR [ebx]
     370:	0b 01                	or     eax,DWORD PTR [ecx]
     372:	13 00                	adc    eax,DWORD PTR [eax]
     374:	00 07                	add    BYTE PTR [edi],al
     376:	28 00                	sub    BYTE PTR [eax],al
     378:	03 0e                	add    ecx,DWORD PTR [esi]
     37a:	1c 0b                	sbb    al,0xb
     37c:	00 00                	add    BYTE PTR [eax],al
     37e:	08 28                	or     BYTE PTR [eax],ch
     380:	00 03                	add    BYTE PTR [ebx],al
     382:	0e                   	push   cs
     383:	1c 05                	sbb    al,0x5
     385:	00 00                	add    BYTE PTR [eax],al
     387:	09 2e                	or     DWORD PTR [esi],ebp
     389:	01 3f                	add    DWORD PTR [edi],edi
     38b:	19 03                	sbb    DWORD PTR [ebx],eax
     38d:	0e                   	push   cs
     38e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     390:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     392:	27                   	daa    
     393:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     396:	11 01                	adc    DWORD PTR [ecx],eax
     398:	12 06                	adc    al,BYTE PTR [esi]
     39a:	40                   	inc    eax
     39b:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3a1:	00 00                	add    BYTE PTR [eax],al
     3a3:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     3a9:	0b 3b                	or     edi,DWORD PTR [ebx]
     3ab:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     3ae:	02 18                	add    bl,BYTE PTR [eax]
     3b0:	00 00                	add    BYTE PTR [eax],al
     3b2:	0b 0b                	or     ecx,DWORD PTR [ebx]
     3b4:	01 11                	add    DWORD PTR [ecx],edx
     3b6:	01 12                	add    DWORD PTR [edx],edx
     3b8:	06                   	push   es
     3b9:	00 00                	add    BYTE PTR [eax],al
     3bb:	0c 34                	or     al,0x34
     3bd:	00 03                	add    BYTE PTR [ebx],al
     3bf:	08 3a                	or     BYTE PTR [edx],bh
     3c1:	0b 3b                	or     edi,DWORD PTR [ebx]
     3c3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     3c6:	02 18                	add    bl,BYTE PTR [eax]
     3c8:	00 00                	add    BYTE PTR [eax],al
     3ca:	0d 2e 01 3f 19       	or     eax,0x193f012e
     3cf:	03 0e                	add    ecx,DWORD PTR [esi]
     3d1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3d3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3d5:	27                   	daa    
     3d6:	19 11                	sbb    DWORD PTR [ecx],edx
     3d8:	01 12                	add    DWORD PTR [edx],edx
     3da:	06                   	push   es
     3db:	40                   	inc    eax
     3dc:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3e2:	00 00                	add    BYTE PTR [eax],al
     3e4:	0e                   	push   cs
     3e5:	34 00                	xor    al,0x0
     3e7:	03 0e                	add    ecx,DWORD PTR [esi]
     3e9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3eb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3ed:	49                   	dec    ecx
     3ee:	13 02                	adc    eax,DWORD PTR [edx]
     3f0:	18 00                	sbb    BYTE PTR [eax],al
     3f2:	00 0f                	add    BYTE PTR [edi],cl
     3f4:	0b 01                	or     eax,DWORD PTR [ecx]
     3f6:	11 01                	adc    DWORD PTR [ecx],eax
     3f8:	12 06                	adc    al,BYTE PTR [esi]
     3fa:	01 13                	add    DWORD PTR [ebx],edx
     3fc:	00 00                	add    BYTE PTR [eax],al
     3fe:	10 05 00 03 08 3a    	adc    BYTE PTR ds:0x3a080300,al
     404:	0b 3b                	or     edi,DWORD PTR [ebx]
     406:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     409:	02 18                	add    bl,BYTE PTR [eax]
     40b:	00 00                	add    BYTE PTR [eax],al
     40d:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
     410:	03 0e                	add    ecx,DWORD PTR [esi]
     412:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     414:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     416:	49                   	dec    ecx
     417:	13 3f                	adc    edi,DWORD PTR [edi]
     419:	19 02                	sbb    DWORD PTR [edx],eax
     41b:	18 00                	sbb    BYTE PTR [eax],al
     41d:	00 00                	add    BYTE PTR [eax],al
     41f:	01 11                	add    DWORD PTR [ecx],edx
     421:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     427:	0e                   	push   cs
     428:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     42a:	11 01                	adc    DWORD PTR [ecx],eax
     42c:	12 06                	adc    al,BYTE PTR [esi]
     42e:	10 17                	adc    BYTE PTR [edi],dl
     430:	00 00                	add    BYTE PTR [eax],al
     432:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     435:	0b 0b                	or     ecx,DWORD PTR [ebx]
     437:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     43a:	0e                   	push   cs
     43b:	00 00                	add    BYTE PTR [eax],al
     43d:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     440:	0b 0b                	or     ecx,DWORD PTR [ebx]
     442:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     445:	08 00                	or     BYTE PTR [eax],al
     447:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     44a:	00 0b                	add    BYTE PTR [ebx],cl
     44c:	0b 00                	or     eax,DWORD PTR [eax]
     44e:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     454:	49                   	dec    ecx
     455:	13 00                	adc    eax,DWORD PTR [eax]
     457:	00 06                	add    BYTE PTR [esi],al
     459:	16                   	push   ss
     45a:	00 03                	add    BYTE PTR [ebx],al
     45c:	0e                   	push   cs
     45d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     45f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     461:	49                   	dec    ecx
     462:	13 00                	adc    eax,DWORD PTR [eax]
     464:	00 07                	add    BYTE PTR [edi],al
     466:	04 01                	add    al,0x1
     468:	03 0e                	add    ecx,DWORD PTR [esi]
     46a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     46c:	49                   	dec    ecx
     46d:	13 3a                	adc    edi,DWORD PTR [edx]
     46f:	0b 3b                	or     edi,DWORD PTR [ebx]
     471:	0b 01                	or     eax,DWORD PTR [ecx]
     473:	13 00                	adc    eax,DWORD PTR [eax]
     475:	00 08                	add    BYTE PTR [eax],cl
     477:	28 00                	sub    BYTE PTR [eax],al
     479:	03 0e                	add    ecx,DWORD PTR [esi]
     47b:	1c 0b                	sbb    al,0xb
     47d:	00 00                	add    BYTE PTR [eax],al
     47f:	09 28                	or     DWORD PTR [eax],ebp
     481:	00 03                	add    BYTE PTR [ebx],al
     483:	0e                   	push   cs
     484:	1c 05                	sbb    al,0x5
     486:	00 00                	add    BYTE PTR [eax],al
     488:	0a 13                	or     dl,BYTE PTR [ebx]
     48a:	01 03                	add    DWORD PTR [ebx],eax
     48c:	0e                   	push   cs
     48d:	0b 05 3a 0b 3b 0b    	or     eax,DWORD PTR ds:0xb3b0b3a
     493:	01 13                	add    DWORD PTR [ebx],edx
     495:	00 00                	add    BYTE PTR [eax],al
     497:	0b 0d 00 03 0e 3a    	or     ecx,DWORD PTR ds:0x3a0e0300
     49d:	0b 3b                	or     edi,DWORD PTR [ebx]
     49f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     4a2:	38 0b                	cmp    BYTE PTR [ebx],cl
     4a4:	00 00                	add    BYTE PTR [eax],al
     4a6:	0c 0d                	or     al,0xd
     4a8:	00 03                	add    BYTE PTR [ebx],al
     4aa:	0e                   	push   cs
     4ab:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4ad:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4af:	49                   	dec    ecx
     4b0:	13 38                	adc    edi,DWORD PTR [eax]
     4b2:	05 00 00 0d 01       	add    eax,0x10d0000
     4b7:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
     4ba:	01 13                	add    DWORD PTR [ebx],edx
     4bc:	00 00                	add    BYTE PTR [eax],al
     4be:	0e                   	push   cs
     4bf:	21 00                	and    DWORD PTR [eax],eax
     4c1:	49                   	dec    ecx
     4c2:	13 2f                	adc    ebp,DWORD PTR [edi]
     4c4:	05 00 00 0f 13       	add    eax,0x130f0000
     4c9:	01 03                	add    DWORD PTR [ebx],eax
     4cb:	0e                   	push   cs
     4cc:	0b 0b                	or     ecx,DWORD PTR [ebx]
     4ce:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4d0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4d2:	01 13                	add    DWORD PTR [ebx],edx
     4d4:	00 00                	add    BYTE PTR [eax],al
     4d6:	10 26                	adc    BYTE PTR [esi],ah
     4d8:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     4db:	00 00                	add    BYTE PTR [eax],al
     4dd:	11 2e                	adc    DWORD PTR [esi],ebp
     4df:	01 3f                	add    DWORD PTR [edi],edi
     4e1:	19 03                	sbb    DWORD PTR [ebx],eax
     4e3:	0e                   	push   cs
     4e4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4e6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4e8:	27                   	daa    
     4e9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     4ec:	11 01                	adc    DWORD PTR [ecx],eax
     4ee:	12 06                	adc    al,BYTE PTR [esi]
     4f0:	40                   	inc    eax
     4f1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     4f7:	00 00                	add    BYTE PTR [eax],al
     4f9:	12 05 00 03 0e 3a    	adc    al,BYTE PTR ds:0x3a0e0300
     4ff:	0b 3b                	or     edi,DWORD PTR [ebx]
     501:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     504:	02 18                	add    bl,BYTE PTR [eax]
     506:	00 00                	add    BYTE PTR [eax],al
     508:	13 2e                	adc    ebp,DWORD PTR [esi]
     50a:	00 3f                	add    BYTE PTR [edi],bh
     50c:	19 03                	sbb    DWORD PTR [ebx],eax
     50e:	0e                   	push   cs
     50f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     511:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     513:	11 01                	adc    DWORD PTR [ecx],eax
     515:	12 06                	adc    al,BYTE PTR [esi]
     517:	40                   	inc    eax
     518:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     51e:	14 34                	adc    al,0x34
     520:	00 03                	add    BYTE PTR [ebx],al
     522:	0e                   	push   cs
     523:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     525:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     527:	49                   	dec    ecx
     528:	13 02                	adc    eax,DWORD PTR [edx]
     52a:	18 00                	sbb    BYTE PTR [eax],al
     52c:	00 15 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,dl
     532:	03 0e                	add    ecx,DWORD PTR [esi]
     534:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     536:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     538:	27                   	daa    
     539:	19 11                	sbb    DWORD PTR [ecx],edx
     53b:	01 12                	add    DWORD PTR [edx],edx
     53d:	06                   	push   es
     53e:	40                   	inc    eax
     53f:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     545:	00 00                	add    BYTE PTR [eax],al
     547:	16                   	push   ss
     548:	0b 01                	or     eax,DWORD PTR [ecx]
     54a:	11 01                	adc    DWORD PTR [ecx],eax
     54c:	12 06                	adc    al,BYTE PTR [esi]
     54e:	01 13                	add    DWORD PTR [ebx],edx
     550:	00 00                	add    BYTE PTR [eax],al
     552:	17                   	pop    ss
     553:	34 00                	xor    al,0x0
     555:	03 08                	add    ecx,DWORD PTR [eax]
     557:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     559:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     55b:	49                   	dec    ecx
     55c:	13 02                	adc    eax,DWORD PTR [edx]
     55e:	18 00                	sbb    BYTE PTR [eax],al
     560:	00 18                	add    BYTE PTR [eax],bl
     562:	0b 01                	or     eax,DWORD PTR [ecx]
     564:	11 01                	adc    DWORD PTR [ecx],eax
     566:	12 06                	adc    al,BYTE PTR [esi]
     568:	00 00                	add    BYTE PTR [eax],al
     56a:	19 21                	sbb    DWORD PTR [ecx],esp
     56c:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     56f:	2f                   	das    
     570:	0b 00                	or     eax,DWORD PTR [eax]
     572:	00 1a                	add    BYTE PTR [edx],bl
     574:	05 00 03 08 3a       	add    eax,0x3a080300
     579:	0b 3b                	or     edi,DWORD PTR [ebx]
     57b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     57e:	02 18                	add    bl,BYTE PTR [eax]
     580:	00 00                	add    BYTE PTR [eax],al
     582:	1b 0a                	sbb    ecx,DWORD PTR [edx]
     584:	00 03                	add    BYTE PTR [ebx],al
     586:	0e                   	push   cs
     587:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     589:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     58b:	11 01                	adc    DWORD PTR [ecx],eax
     58d:	00 00                	add    BYTE PTR [eax],al
     58f:	1c 34                	sbb    al,0x34
     591:	00 03                	add    BYTE PTR [ebx],al
     593:	0e                   	push   cs
     594:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     596:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     598:	49                   	dec    ecx
     599:	13 3f                	adc    edi,DWORD PTR [edi]
     59b:	19 02                	sbb    DWORD PTR [edx],eax
     59d:	18 00                	sbb    BYTE PTR [eax],al
     59f:	00 00                	add    BYTE PTR [eax],al
     5a1:	01 11                	add    DWORD PTR [ecx],edx
     5a3:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     5a9:	0e                   	push   cs
     5aa:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     5ac:	11 01                	adc    DWORD PTR [ecx],eax
     5ae:	12 06                	adc    al,BYTE PTR [esi]
     5b0:	10 17                	adc    BYTE PTR [edi],dl
     5b2:	00 00                	add    BYTE PTR [eax],al
     5b4:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     5b7:	0b 0b                	or     ecx,DWORD PTR [ebx]
     5b9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     5bc:	0e                   	push   cs
     5bd:	00 00                	add    BYTE PTR [eax],al
     5bf:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     5c2:	0b 0b                	or     ecx,DWORD PTR [ebx]
     5c4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     5c7:	08 00                	or     BYTE PTR [eax],al
     5c9:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     5cc:	00 0b                	add    BYTE PTR [ebx],cl
     5ce:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     5d1:	00 00                	add    BYTE PTR [eax],al
     5d3:	05 04 01 03 0e       	add    eax,0xe030104
     5d8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     5da:	49                   	dec    ecx
     5db:	13 3a                	adc    edi,DWORD PTR [edx]
     5dd:	0b 3b                	or     edi,DWORD PTR [ebx]
     5df:	0b 01                	or     eax,DWORD PTR [ecx]
     5e1:	13 00                	adc    eax,DWORD PTR [eax]
     5e3:	00 06                	add    BYTE PTR [esi],al
     5e5:	28 00                	sub    BYTE PTR [eax],al
     5e7:	03 0e                	add    ecx,DWORD PTR [esi]
     5e9:	1c 0b                	sbb    al,0xb
     5eb:	00 00                	add    BYTE PTR [eax],al
     5ed:	07                   	pop    es
     5ee:	28 00                	sub    BYTE PTR [eax],al
     5f0:	03 0e                	add    ecx,DWORD PTR [esi]
     5f2:	1c 05                	sbb    al,0x5
     5f4:	00 00                	add    BYTE PTR [eax],al
     5f6:	08 2e                	or     BYTE PTR [esi],ch
     5f8:	01 3f                	add    DWORD PTR [edi],edi
     5fa:	19 03                	sbb    DWORD PTR [ebx],eax
     5fc:	0e                   	push   cs
     5fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     601:	27                   	daa    
     602:	19 11                	sbb    DWORD PTR [ecx],edx
     604:	01 12                	add    DWORD PTR [edx],edx
     606:	06                   	push   es
     607:	40                   	inc    eax
     608:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     60e:	00 00                	add    BYTE PTR [eax],al
     610:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     616:	0b 3b                	or     edi,DWORD PTR [ebx]
     618:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     61b:	02 18                	add    bl,BYTE PTR [eax]
     61d:	00 00                	add    BYTE PTR [eax],al
     61f:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     625:	0b 3b                	or     edi,DWORD PTR [ebx]
     627:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     62a:	02 18                	add    bl,BYTE PTR [eax]
     62c:	00 00                	add    BYTE PTR [eax],al
     62e:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     631:	03 0e                	add    ecx,DWORD PTR [esi]
     633:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     635:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     637:	49                   	dec    ecx
     638:	13 02                	adc    eax,DWORD PTR [edx]
     63a:	18 00                	sbb    BYTE PTR [eax],al
     63c:	00 0c 01             	add    BYTE PTR [ecx+eax*1],cl
     63f:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
     642:	01 13                	add    DWORD PTR [ebx],edx
     644:	00 00                	add    BYTE PTR [eax],al
     646:	0d 21 00 49 13       	or     eax,0x13490021
     64b:	2f                   	das    
     64c:	0b 00                	or     eax,DWORD PTR [eax]
     64e:	00 0e                	add    BYTE PTR [esi],cl
     650:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     653:	19 03                	sbb    DWORD PTR [ebx],eax
     655:	0e                   	push   cs
     656:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     658:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     65a:	49                   	dec    ecx
     65b:	13 11                	adc    edx,DWORD PTR [ecx]
     65d:	01 12                	add    DWORD PTR [edx],edx
     65f:	06                   	push   es
     660:	40                   	inc    eax
     661:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     667:	00 00                	add    BYTE PTR [eax],al
     669:	0f 34                	sysenter 
     66b:	00 03                	add    BYTE PTR [ebx],al
     66d:	08 3a                	or     BYTE PTR [edx],bh
     66f:	0b 3b                	or     edi,DWORD PTR [ebx]
     671:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     674:	02 18                	add    bl,BYTE PTR [eax]
     676:	00 00                	add    BYTE PTR [eax],al
     678:	10 2e                	adc    BYTE PTR [esi],ch
     67a:	01 3f                	add    DWORD PTR [edi],edi
     67c:	19 03                	sbb    DWORD PTR [ebx],eax
     67e:	0e                   	push   cs
     67f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     681:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     683:	27                   	daa    
     684:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     687:	11 01                	adc    DWORD PTR [ecx],eax
     689:	12 06                	adc    al,BYTE PTR [esi]
     68b:	40                   	inc    eax
     68c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     692:	00 00                	add    BYTE PTR [eax],al
     694:	11 0a                	adc    DWORD PTR [edx],ecx
     696:	00 03                	add    BYTE PTR [ebx],al
     698:	0e                   	push   cs
     699:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     69b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     69d:	11 01                	adc    DWORD PTR [ecx],eax
     69f:	00 00                	add    BYTE PTR [eax],al
     6a1:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     6a4:	03 0e                	add    ecx,DWORD PTR [esi]
     6a6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6a8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6aa:	49                   	dec    ecx
     6ab:	13 3f                	adc    edi,DWORD PTR [edi]
     6ad:	19 02                	sbb    DWORD PTR [edx],eax
     6af:	18 00                	sbb    BYTE PTR [eax],al
     6b1:	00 00                	add    BYTE PTR [eax],al
     6b3:	01 11                	add    DWORD PTR [ecx],edx
     6b5:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     6bb:	0e                   	push   cs
     6bc:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     6be:	11 01                	adc    DWORD PTR [ecx],eax
     6c0:	12 06                	adc    al,BYTE PTR [esi]
     6c2:	10 17                	adc    BYTE PTR [edi],dl
     6c4:	00 00                	add    BYTE PTR [eax],al
     6c6:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     6c9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6cb:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     6ce:	0e                   	push   cs
     6cf:	00 00                	add    BYTE PTR [eax],al
     6d1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     6d4:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6d6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     6d9:	08 00                	or     BYTE PTR [eax],al
     6db:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     6de:	00 0b                	add    BYTE PTR [ebx],cl
     6e0:	0b 00                	or     eax,DWORD PTR [eax]
     6e2:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     6e8:	49                   	dec    ecx
     6e9:	13 00                	adc    eax,DWORD PTR [eax]
     6eb:	00 06                	add    BYTE PTR [esi],al
     6ed:	16                   	push   ss
     6ee:	00 03                	add    BYTE PTR [ebx],al
     6f0:	0e                   	push   cs
     6f1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6f3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6f5:	49                   	dec    ecx
     6f6:	13 00                	adc    eax,DWORD PTR [eax]
     6f8:	00 07                	add    BYTE PTR [edi],al
     6fa:	0f 00 0b             	str    WORD PTR [ebx]
     6fd:	0b 03                	or     eax,DWORD PTR [ebx]
     6ff:	0e                   	push   cs
     700:	49                   	dec    ecx
     701:	13 00                	adc    eax,DWORD PTR [eax]
     703:	00 08                	add    BYTE PTR [eax],cl
     705:	04 01                	add    al,0x1
     707:	03 0e                	add    ecx,DWORD PTR [esi]
     709:	0b 0b                	or     ecx,DWORD PTR [ebx]
     70b:	49                   	dec    ecx
     70c:	13 3a                	adc    edi,DWORD PTR [edx]
     70e:	0b 3b                	or     edi,DWORD PTR [ebx]
     710:	0b 01                	or     eax,DWORD PTR [ecx]
     712:	13 00                	adc    eax,DWORD PTR [eax]
     714:	00 09                	add    BYTE PTR [ecx],cl
     716:	28 00                	sub    BYTE PTR [eax],al
     718:	03 0e                	add    ecx,DWORD PTR [esi]
     71a:	1c 0b                	sbb    al,0xb
     71c:	00 00                	add    BYTE PTR [eax],al
     71e:	0a 28                	or     ch,BYTE PTR [eax]
     720:	00 03                	add    BYTE PTR [ebx],al
     722:	0e                   	push   cs
     723:	1c 05                	sbb    al,0x5
     725:	00 00                	add    BYTE PTR [eax],al
     727:	0b 26                	or     esp,DWORD PTR [esi]
     729:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     72c:	00 00                	add    BYTE PTR [eax],al
     72e:	0c 2e                	or     al,0x2e
     730:	01 3f                	add    DWORD PTR [edi],edi
     732:	19 03                	sbb    DWORD PTR [ebx],eax
     734:	0e                   	push   cs
     735:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     737:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     739:	27                   	daa    
     73a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     73d:	11 01                	adc    DWORD PTR [ecx],eax
     73f:	12 06                	adc    al,BYTE PTR [esi]
     741:	40                   	inc    eax
     742:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     748:	00 00                	add    BYTE PTR [eax],al
     74a:	0d 05 00 03 0e       	or     eax,0xe030005
     74f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     751:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     753:	49                   	dec    ecx
     754:	13 02                	adc    eax,DWORD PTR [edx]
     756:	18 00                	sbb    BYTE PTR [eax],al
     758:	00 0e                	add    BYTE PTR [esi],cl
     75a:	34 00                	xor    al,0x0
     75c:	03 0e                	add    ecx,DWORD PTR [esi]
     75e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     760:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     762:	49                   	dec    ecx
     763:	13 02                	adc    eax,DWORD PTR [edx]
     765:	18 00                	sbb    BYTE PTR [eax],al
     767:	00 0f                	add    BYTE PTR [edi],cl
     769:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     76c:	19 03                	sbb    DWORD PTR [ebx],eax
     76e:	0e                   	push   cs
     76f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     771:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     773:	11 01                	adc    DWORD PTR [ecx],eax
     775:	12 06                	adc    al,BYTE PTR [esi]
     777:	40                   	inc    eax
     778:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     77e:	10 2e                	adc    BYTE PTR [esi],ch
     780:	00 3f                	add    BYTE PTR [edi],bh
     782:	19 03                	sbb    DWORD PTR [ebx],eax
     784:	0e                   	push   cs
     785:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     787:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     789:	27                   	daa    
     78a:	19 11                	sbb    DWORD PTR [ecx],edx
     78c:	01 12                	add    DWORD PTR [edx],edx
     78e:	06                   	push   es
     78f:	40                   	inc    eax
     790:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     796:	11 2e                	adc    DWORD PTR [esi],ebp
     798:	01 3f                	add    DWORD PTR [edi],edi
     79a:	19 03                	sbb    DWORD PTR [ebx],eax
     79c:	0e                   	push   cs
     79d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     79f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7a1:	27                   	daa    
     7a2:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     7a5:	11 01                	adc    DWORD PTR [ecx],eax
     7a7:	12 06                	adc    al,BYTE PTR [esi]
     7a9:	40                   	inc    eax
     7aa:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     7b0:	00 00                	add    BYTE PTR [eax],al
     7b2:	12 18                	adc    bl,BYTE PTR [eax]
     7b4:	00 00                	add    BYTE PTR [eax],al
     7b6:	00 13                	add    BYTE PTR [ebx],dl
     7b8:	34 00                	xor    al,0x0
     7ba:	03 08                	add    ecx,DWORD PTR [eax]
     7bc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7be:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7c0:	49                   	dec    ecx
     7c1:	13 02                	adc    eax,DWORD PTR [edx]
     7c3:	18 00                	sbb    BYTE PTR [eax],al
     7c5:	00 14 0b             	add    BYTE PTR [ebx+ecx*1],dl
     7c8:	01 11                	add    DWORD PTR [ecx],edx
     7ca:	01 12                	add    DWORD PTR [edx],edx
     7cc:	06                   	push   es
     7cd:	00 00                	add    BYTE PTR [eax],al
     7cf:	15 2e 01 3f 19       	adc    eax,0x193f012e
     7d4:	03 0e                	add    ecx,DWORD PTR [esi]
     7d6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7d8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7da:	27                   	daa    
     7db:	19 11                	sbb    DWORD PTR [ecx],edx
     7dd:	01 12                	add    DWORD PTR [edx],edx
     7df:	06                   	push   es
     7e0:	40                   	inc    eax
     7e1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     7e7:	00 00                	add    BYTE PTR [eax],al
     7e9:	16                   	push   ss
     7ea:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     7ed:	19 03                	sbb    DWORD PTR [ebx],eax
     7ef:	0e                   	push   cs
     7f0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7f2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7f4:	49                   	dec    ecx
     7f5:	13 11                	adc    edx,DWORD PTR [ecx]
     7f7:	01 12                	add    DWORD PTR [edx],edx
     7f9:	06                   	push   es
     7fa:	40                   	inc    eax
     7fb:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     801:	00 00                	add    BYTE PTR [eax],al
     803:	17                   	pop    ss
     804:	05 00 03 08 3a       	add    eax,0x3a080300
     809:	0b 3b                	or     edi,DWORD PTR [ebx]
     80b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     80e:	02 18                	add    bl,BYTE PTR [eax]
     810:	00 00                	add    BYTE PTR [eax],al
     812:	18 0b                	sbb    BYTE PTR [ebx],cl
     814:	01 11                	add    DWORD PTR [ecx],edx
     816:	01 12                	add    DWORD PTR [edx],edx
     818:	06                   	push   es
     819:	01 13                	add    DWORD PTR [ebx],edx
     81b:	00 00                	add    BYTE PTR [eax],al
     81d:	19 34 00             	sbb    DWORD PTR [eax+eax*1],esi
     820:	03 0e                	add    ecx,DWORD PTR [esi]
     822:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     824:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     82a:	00 00                	add    BYTE PTR [eax],al
     82c:	1a 2e                	sbb    ch,BYTE PTR [esi]
     82e:	01 3f                	add    DWORD PTR [edi],edi
     830:	19 03                	sbb    DWORD PTR [ebx],eax
     832:	0e                   	push   cs
     833:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     835:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     83b:	11 01                	adc    DWORD PTR [ecx],eax
     83d:	12 06                	adc    al,BYTE PTR [esi]
     83f:	40                   	inc    eax
     840:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     846:	00 00                	add    BYTE PTR [eax],al
     848:	1b 05 00 03 0e 3a    	sbb    eax,DWORD PTR ds:0x3a0e0300
     84e:	0b 3b                	or     edi,DWORD PTR [ebx]
     850:	05 49 13 02 18       	add    eax,0x18021349
     855:	00 00                	add    BYTE PTR [eax],al
     857:	1c 34                	sbb    al,0x34
     859:	00 03                	add    BYTE PTR [ebx],al
     85b:	08 3a                	or     BYTE PTR [edx],bh
     85d:	0b 3b                	or     edi,DWORD PTR [ebx]
     85f:	05 49 13 02 18       	add    eax,0x18021349
     864:	00 00                	add    BYTE PTR [eax],al
     866:	1d 0b 01 55 17       	sbb    eax,0x1755010b
     86b:	00 00                	add    BYTE PTR [eax],al
     86d:	1e                   	push   ds
     86e:	01 01                	add    DWORD PTR [ecx],eax
     870:	49                   	dec    ecx
     871:	13 01                	adc    eax,DWORD PTR [ecx]
     873:	13 00                	adc    eax,DWORD PTR [eax]
     875:	00 1f                	add    BYTE PTR [edi],bl
     877:	21 00                	and    DWORD PTR [eax],eax
     879:	49                   	dec    ecx
     87a:	13 2f                	adc    ebp,DWORD PTR [edi]
     87c:	05 00 00 20 21       	add    eax,0x21200000
     881:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     884:	2f                   	das    
     885:	0b 00                	or     eax,DWORD PTR [eax]
     887:	00 21                	add    BYTE PTR [ecx],ah
     889:	05 00 03 08 3a       	add    eax,0x3a080300
     88e:	0b 3b                	or     edi,DWORD PTR [ebx]
     890:	05 49 13 02 18       	add    eax,0x18021349
     895:	00 00                	add    BYTE PTR [eax],al
     897:	22 2e                	and    ch,BYTE PTR [esi]
     899:	00 3f                	add    BYTE PTR [edi],bh
     89b:	19 03                	sbb    DWORD PTR [ebx],eax
     89d:	0e                   	push   cs
     89e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8a0:	3b 05 11 01 12 06    	cmp    eax,DWORD PTR ds:0x6120111
     8a6:	40                   	inc    eax
     8a7:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     8ad:	23 34 00             	and    esi,DWORD PTR [eax+eax*1]
     8b0:	03 0e                	add    ecx,DWORD PTR [esi]
     8b2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8b4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8b6:	49                   	dec    ecx
     8b7:	13 3f                	adc    edi,DWORD PTR [edi]
     8b9:	19 02                	sbb    DWORD PTR [edx],eax
     8bb:	18 00                	sbb    BYTE PTR [eax],al
     8bd:	00 00                	add    BYTE PTR [eax],al
     8bf:	01 11                	add    DWORD PTR [ecx],edx
     8c1:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     8c7:	0e                   	push   cs
     8c8:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     8ca:	11 01                	adc    DWORD PTR [ecx],eax
     8cc:	12 06                	adc    al,BYTE PTR [esi]
     8ce:	10 17                	adc    BYTE PTR [edi],dl
     8d0:	00 00                	add    BYTE PTR [eax],al
     8d2:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     8d5:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8d7:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8da:	0e                   	push   cs
     8db:	00 00                	add    BYTE PTR [eax],al
     8dd:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     8e0:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8e2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8e5:	08 00                	or     BYTE PTR [eax],al
     8e7:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     8ea:	00 0b                	add    BYTE PTR [ebx],cl
     8ec:	0b 00                	or     eax,DWORD PTR [eax]
     8ee:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     8f4:	49                   	dec    ecx
     8f5:	13 00                	adc    eax,DWORD PTR [eax]
     8f7:	00 06                	add    BYTE PTR [esi],al
     8f9:	16                   	push   ss
     8fa:	00 03                	add    BYTE PTR [ebx],al
     8fc:	0e                   	push   cs
     8fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     901:	49                   	dec    ecx
     902:	13 00                	adc    eax,DWORD PTR [eax]
     904:	00 07                	add    BYTE PTR [edi],al
     906:	04 01                	add    al,0x1
     908:	03 0e                	add    ecx,DWORD PTR [esi]
     90a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     90c:	49                   	dec    ecx
     90d:	13 3a                	adc    edi,DWORD PTR [edx]
     90f:	0b 3b                	or     edi,DWORD PTR [ebx]
     911:	0b 01                	or     eax,DWORD PTR [ecx]
     913:	13 00                	adc    eax,DWORD PTR [eax]
     915:	00 08                	add    BYTE PTR [eax],cl
     917:	28 00                	sub    BYTE PTR [eax],al
     919:	03 0e                	add    ecx,DWORD PTR [esi]
     91b:	1c 0b                	sbb    al,0xb
     91d:	00 00                	add    BYTE PTR [eax],al
     91f:	09 28                	or     DWORD PTR [eax],ebp
     921:	00 03                	add    BYTE PTR [ebx],al
     923:	0e                   	push   cs
     924:	1c 05                	sbb    al,0x5
     926:	00 00                	add    BYTE PTR [eax],al
     928:	0a 13                	or     dl,BYTE PTR [ebx]
     92a:	01 03                	add    DWORD PTR [ebx],eax
     92c:	0e                   	push   cs
     92d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     92f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     931:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     933:	01 13                	add    DWORD PTR [ebx],edx
     935:	00 00                	add    BYTE PTR [eax],al
     937:	0b 0d 00 03 0e 3a    	or     ecx,DWORD PTR ds:0x3a0e0300
     93d:	0b 3b                	or     edi,DWORD PTR [ebx]
     93f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     942:	38 0b                	cmp    BYTE PTR [ebx],cl
     944:	00 00                	add    BYTE PTR [eax],al
     946:	0c 0d                	or     al,0xd
     948:	00 03                	add    BYTE PTR [ebx],al
     94a:	08 3a                	or     BYTE PTR [edx],bh
     94c:	0b 3b                	or     edi,DWORD PTR [ebx]
     94e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     951:	38 0b                	cmp    BYTE PTR [ebx],cl
     953:	00 00                	add    BYTE PTR [eax],al
     955:	0d 2e 01 3f 19       	or     eax,0x193f012e
     95a:	03 0e                	add    ecx,DWORD PTR [esi]
     95c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     95e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     960:	27                   	daa    
     961:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     964:	11 01                	adc    DWORD PTR [ecx],eax
     966:	12 06                	adc    al,BYTE PTR [esi]
     968:	40                   	inc    eax
     969:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     96f:	00 00                	add    BYTE PTR [eax],al
     971:	0e                   	push   cs
     972:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     977:	0b 3b                	or     edi,DWORD PTR [ebx]
     979:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     97c:	02 18                	add    bl,BYTE PTR [eax]
     97e:	00 00                	add    BYTE PTR [eax],al
     980:	0f 05                	syscall 
     982:	00 03                	add    BYTE PTR [ebx],al
     984:	08 3a                	or     BYTE PTR [edx],bh
     986:	0b 3b                	or     edi,DWORD PTR [ebx]
     988:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     98b:	02 18                	add    bl,BYTE PTR [eax]
     98d:	00 00                	add    BYTE PTR [eax],al
     98f:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     992:	03 0e                	add    ecx,DWORD PTR [esi]
     994:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     996:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     998:	49                   	dec    ecx
     999:	13 3f                	adc    edi,DWORD PTR [edi]
     99b:	19 02                	sbb    DWORD PTR [edx],eax
     99d:	18 00                	sbb    BYTE PTR [eax],al
     99f:	00 00                	add    BYTE PTR [eax],al
     9a1:	01 11                	add    DWORD PTR [ecx],edx
     9a3:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     9a9:	0e                   	push   cs
     9aa:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     9ac:	11 01                	adc    DWORD PTR [ecx],eax
     9ae:	12 06                	adc    al,BYTE PTR [esi]
     9b0:	10 17                	adc    BYTE PTR [edi],dl
     9b2:	00 00                	add    BYTE PTR [eax],al
     9b4:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     9b7:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9b9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     9bc:	0e                   	push   cs
     9bd:	00 00                	add    BYTE PTR [eax],al
     9bf:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     9c2:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9c4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     9c7:	08 00                	or     BYTE PTR [eax],al
     9c9:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     9cc:	00 03                	add    BYTE PTR [ebx],al
     9ce:	0e                   	push   cs
     9cf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9d1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9d3:	49                   	dec    ecx
     9d4:	13 00                	adc    eax,DWORD PTR [eax]
     9d6:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     9dc:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9e2:	01 13                	add    DWORD PTR [ebx],edx
     9e4:	00 00                	add    BYTE PTR [eax],al
     9e6:	06                   	push   es
     9e7:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     9ec:	0b 3b                	or     edi,DWORD PTR [ebx]
     9ee:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9f1:	38 0b                	cmp    BYTE PTR [ebx],cl
     9f3:	00 00                	add    BYTE PTR [eax],al
     9f5:	07                   	pop    es
     9f6:	0d 00 03 08 3a       	or     eax,0x3a080300
     9fb:	0b 3b                	or     edi,DWORD PTR [ebx]
     9fd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a00:	38 0b                	cmp    BYTE PTR [ebx],cl
     a02:	00 00                	add    BYTE PTR [eax],al
     a04:	08 0f                	or     BYTE PTR [edi],cl
     a06:	00 0b                	add    BYTE PTR [ebx],cl
     a08:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a0b:	00 00                	add    BYTE PTR [eax],al
     a0d:	09 0f                	or     DWORD PTR [edi],ecx
     a0f:	00 0b                	add    BYTE PTR [ebx],cl
     a11:	0b 00                	or     eax,DWORD PTR [eax]
     a13:	00 0a                	add    BYTE PTR [edx],cl
     a15:	04 01                	add    al,0x1
     a17:	03 0e                	add    ecx,DWORD PTR [esi]
     a19:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a1b:	49                   	dec    ecx
     a1c:	13 3a                	adc    edi,DWORD PTR [edx]
     a1e:	0b 3b                	or     edi,DWORD PTR [ebx]
     a20:	0b 01                	or     eax,DWORD PTR [ecx]
     a22:	13 00                	adc    eax,DWORD PTR [eax]
     a24:	00 0b                	add    BYTE PTR [ebx],cl
     a26:	28 00                	sub    BYTE PTR [eax],al
     a28:	03 0e                	add    ecx,DWORD PTR [esi]
     a2a:	1c 0b                	sbb    al,0xb
     a2c:	00 00                	add    BYTE PTR [eax],al
     a2e:	0c 28                	or     al,0x28
     a30:	00 03                	add    BYTE PTR [ebx],al
     a32:	0e                   	push   cs
     a33:	1c 05                	sbb    al,0x5
     a35:	00 00                	add    BYTE PTR [eax],al
     a37:	0d 2e 00 3f 19       	or     eax,0x193f002e
     a3c:	03 0e                	add    ecx,DWORD PTR [esi]
     a3e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a40:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a42:	11 01                	adc    DWORD PTR [ecx],eax
     a44:	12 06                	adc    al,BYTE PTR [esi]
     a46:	40                   	inc    eax
     a47:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     a4d:	0e                   	push   cs
     a4e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     a51:	19 03                	sbb    DWORD PTR [ebx],eax
     a53:	0e                   	push   cs
     a54:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a56:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a58:	27                   	daa    
     a59:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     a5c:	11 01                	adc    DWORD PTR [ecx],eax
     a5e:	12 06                	adc    al,BYTE PTR [esi]
     a60:	40                   	inc    eax
     a61:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     a67:	00 00                	add    BYTE PTR [eax],al
     a69:	0f 05                	syscall 
     a6b:	00 03                	add    BYTE PTR [ebx],al
     a6d:	0e                   	push   cs
     a6e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a70:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a72:	49                   	dec    ecx
     a73:	13 02                	adc    eax,DWORD PTR [edx]
     a75:	18 00                	sbb    BYTE PTR [eax],al
     a77:	00 10                	add    BYTE PTR [eax],dl
     a79:	34 00                	xor    al,0x0
     a7b:	03 0e                	add    ecx,DWORD PTR [esi]
     a7d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a7f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a81:	49                   	dec    ecx
     a82:	13 02                	adc    eax,DWORD PTR [edx]
     a84:	18 00                	sbb    BYTE PTR [eax],al
     a86:	00 11                	add    BYTE PTR [ecx],dl
     a88:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     a8b:	19 03                	sbb    DWORD PTR [ebx],eax
     a8d:	0e                   	push   cs
     a8e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a90:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a92:	27                   	daa    
     a93:	19 11                	sbb    DWORD PTR [ecx],edx
     a95:	01 12                	add    DWORD PTR [edx],edx
     a97:	06                   	push   es
     a98:	40                   	inc    eax
     a99:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     a9f:	00 00                	add    BYTE PTR [eax],al
     aa1:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     aa4:	03 08                	add    ecx,DWORD PTR [eax]
     aa6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     aa8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     aaa:	49                   	dec    ecx
     aab:	13 02                	adc    eax,DWORD PTR [edx]
     aad:	18 00                	sbb    BYTE PTR [eax],al
     aaf:	00 13                	add    BYTE PTR [ebx],dl
     ab1:	0a 00                	or     al,BYTE PTR [eax]
     ab3:	03 0e                	add    ecx,DWORD PTR [esi]
     ab5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ab7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ab9:	11 01                	adc    DWORD PTR [ecx],eax
     abb:	00 00                	add    BYTE PTR [eax],al
     abd:	14 2e                	adc    al,0x2e
     abf:	01 3f                	add    DWORD PTR [edi],edi
     ac1:	19 03                	sbb    DWORD PTR [ebx],eax
     ac3:	0e                   	push   cs
     ac4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ac6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ac8:	27                   	daa    
     ac9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     acc:	11 01                	adc    DWORD PTR [ecx],eax
     ace:	12 06                	adc    al,BYTE PTR [esi]
     ad0:	40                   	inc    eax
     ad1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     ad7:	00 00                	add    BYTE PTR [eax],al
     ad9:	15 34 00 03 0e       	adc    eax,0xe030034
     ade:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ae0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ae2:	49                   	dec    ecx
     ae3:	13 3f                	adc    edi,DWORD PTR [edi]
     ae5:	19 02                	sbb    DWORD PTR [edx],eax
     ae7:	18 00                	sbb    BYTE PTR [eax],al
     ae9:	00 00                	add    BYTE PTR [eax],al
     aeb:	01 11                	add    DWORD PTR [ecx],edx
     aed:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     af3:	0e                   	push   cs
     af4:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     af6:	11 01                	adc    DWORD PTR [ecx],eax
     af8:	12 06                	adc    al,BYTE PTR [esi]
     afa:	10 17                	adc    BYTE PTR [edi],dl
     afc:	00 00                	add    BYTE PTR [eax],al
     afe:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     b01:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b03:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b06:	0e                   	push   cs
     b07:	00 00                	add    BYTE PTR [eax],al
     b09:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     b0c:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b0e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b11:	08 00                	or     BYTE PTR [eax],al
     b13:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     b16:	00 0b                	add    BYTE PTR [ebx],cl
     b18:	0b 00                	or     eax,DWORD PTR [eax]
     b1a:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     b20:	49                   	dec    ecx
     b21:	13 00                	adc    eax,DWORD PTR [eax]
     b23:	00 06                	add    BYTE PTR [esi],al
     b25:	16                   	push   ss
     b26:	00 03                	add    BYTE PTR [ebx],al
     b28:	0e                   	push   cs
     b29:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b2b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b2d:	49                   	dec    ecx
     b2e:	13 00                	adc    eax,DWORD PTR [eax]
     b30:	00 07                	add    BYTE PTR [edi],al
     b32:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     b36:	00 00                	add    BYTE PTR [eax],al
     b38:	08 2e                	or     BYTE PTR [esi],ch
     b3a:	01 3f                	add    DWORD PTR [edi],edi
     b3c:	19 03                	sbb    DWORD PTR [ebx],eax
     b3e:	0e                   	push   cs
     b3f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b41:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b43:	27                   	daa    
     b44:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     b47:	11 01                	adc    DWORD PTR [ecx],eax
     b49:	12 06                	adc    al,BYTE PTR [esi]
     b4b:	40                   	inc    eax
     b4c:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     b52:	00 00                	add    BYTE PTR [eax],al
     b54:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     b5a:	0b 3b                	or     edi,DWORD PTR [ebx]
     b5c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b5f:	02 18                	add    bl,BYTE PTR [eax]
     b61:	00 00                	add    BYTE PTR [eax],al
     b63:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     b69:	0b 3b                	or     edi,DWORD PTR [ebx]
     b6b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b6e:	02 18                	add    bl,BYTE PTR [eax]
     b70:	00 00                	add    BYTE PTR [eax],al
     b72:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     b75:	03 08                	add    ecx,DWORD PTR [eax]
     b77:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b79:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b7b:	49                   	dec    ecx
     b7c:	13 02                	adc    eax,DWORD PTR [edx]
     b7e:	18 00                	sbb    BYTE PTR [eax],al
     b80:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     b83:	01 11                	add    DWORD PTR [ecx],edx
     b85:	01 12                	add    DWORD PTR [edx],edx
     b87:	06                   	push   es
     b88:	01 13                	add    DWORD PTR [ebx],edx
     b8a:	00 00                	add    BYTE PTR [eax],al
     b8c:	0d 0b 01 11 01       	or     eax,0x111010b
     b91:	12 06                	adc    al,BYTE PTR [esi]
     b93:	00 00                	add    BYTE PTR [eax],al
     b95:	0e                   	push   cs
     b96:	26 00 00             	add    BYTE PTR es:[eax],al
     b99:	00 0f                	add    BYTE PTR [edi],cl
     b9b:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     b9e:	19 03                	sbb    DWORD PTR [ebx],eax
     ba0:	0e                   	push   cs
     ba1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ba3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ba5:	27                   	daa    
     ba6:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     ba9:	11 01                	adc    DWORD PTR [ecx],eax
     bab:	12 06                	adc    al,BYTE PTR [esi]
     bad:	40                   	inc    eax
     bae:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     bb4:	00 00                	add    BYTE PTR [eax],al
     bb6:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     bb9:	03 0e                	add    ecx,DWORD PTR [esi]
     bbb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bbd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bbf:	49                   	dec    ecx
     bc0:	13 3f                	adc    edi,DWORD PTR [edi]
     bc2:	19 02                	sbb    DWORD PTR [edx],eax
     bc4:	18 00                	sbb    BYTE PTR [eax],al
     bc6:	00 00                	add    BYTE PTR [eax],al
     bc8:	01 11                	add    DWORD PTR [ecx],edx
     bca:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     bd0:	0e                   	push   cs
     bd1:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     bd3:	11 01                	adc    DWORD PTR [ecx],eax
     bd5:	12 06                	adc    al,BYTE PTR [esi]
     bd7:	10 17                	adc    BYTE PTR [edi],dl
     bd9:	00 00                	add    BYTE PTR [eax],al
     bdb:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     bde:	0b 0b                	or     ecx,DWORD PTR [ebx]
     be0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     be3:	0e                   	push   cs
     be4:	00 00                	add    BYTE PTR [eax],al
     be6:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     be9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     beb:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     bee:	08 00                	or     BYTE PTR [eax],al
     bf0:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     bf3:	00 0b                	add    BYTE PTR [ebx],cl
     bf5:	0b 00                	or     eax,DWORD PTR [eax]
     bf7:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     bfd:	49                   	dec    ecx
     bfe:	13 00                	adc    eax,DWORD PTR [eax]
     c00:	00 06                	add    BYTE PTR [esi],al
     c02:	16                   	push   ss
     c03:	00 03                	add    BYTE PTR [ebx],al
     c05:	0e                   	push   cs
     c06:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c08:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c0a:	49                   	dec    ecx
     c0b:	13 00                	adc    eax,DWORD PTR [eax]
     c0d:	00 07                	add    BYTE PTR [edi],al
     c0f:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     c12:	19 03                	sbb    DWORD PTR [ebx],eax
     c14:	0e                   	push   cs
     c15:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c17:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c19:	27                   	daa    
     c1a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c1d:	11 01                	adc    DWORD PTR [ecx],eax
     c1f:	12 06                	adc    al,BYTE PTR [esi]
     c21:	40                   	inc    eax
     c22:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     c28:	00 00                	add    BYTE PTR [eax],al
     c2a:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     c30:	0b 3b                	or     edi,DWORD PTR [ebx]
     c32:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c35:	02 18                	add    bl,BYTE PTR [eax]
     c37:	00 00                	add    BYTE PTR [eax],al
     c39:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     c3c:	03 08                	add    ecx,DWORD PTR [eax]
     c3e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c40:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c42:	49                   	dec    ecx
     c43:	13 02                	adc    eax,DWORD PTR [edx]
     c45:	18 00                	sbb    BYTE PTR [eax],al
     c47:	00 0a                	add    BYTE PTR [edx],cl
     c49:	34 00                	xor    al,0x0
     c4b:	03 0e                	add    ecx,DWORD PTR [esi]
     c4d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c4f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c51:	49                   	dec    ecx
     c52:	13 02                	adc    eax,DWORD PTR [edx]
     c54:	18 00                	sbb    BYTE PTR [eax],al
     c56:	00 0b                	add    BYTE PTR [ebx],cl
     c58:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     c5b:	19 03                	sbb    DWORD PTR [ebx],eax
     c5d:	0e                   	push   cs
     c5e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c60:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c62:	27                   	daa    
     c63:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c66:	11 01                	adc    DWORD PTR [ecx],eax
     c68:	12 06                	adc    al,BYTE PTR [esi]
     c6a:	40                   	inc    eax
     c6b:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     c71:	00 00                	add    BYTE PTR [eax],al
     c73:	0c 34                	or     al,0x34
     c75:	00 03                	add    BYTE PTR [ebx],al
     c77:	0e                   	push   cs
     c78:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c7a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c7c:	49                   	dec    ecx
     c7d:	13 3f                	adc    edi,DWORD PTR [edi]
     c7f:	19 02                	sbb    DWORD PTR [edx],eax
     c81:	18 00                	sbb    BYTE PTR [eax],al
     c83:	00 00                	add    BYTE PTR [eax],al
     c85:	01 11                	add    DWORD PTR [ecx],edx
     c87:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     c8d:	0e                   	push   cs
     c8e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     c90:	11 01                	adc    DWORD PTR [ecx],eax
     c92:	12 06                	adc    al,BYTE PTR [esi]
     c94:	10 17                	adc    BYTE PTR [edi],dl
     c96:	00 00                	add    BYTE PTR [eax],al
     c98:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     c9b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c9d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ca0:	0e                   	push   cs
     ca1:	00 00                	add    BYTE PTR [eax],al
     ca3:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     ca6:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ca8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     cab:	08 00                	or     BYTE PTR [eax],al
     cad:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     cb0:	00 0b                	add    BYTE PTR [ebx],cl
     cb2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     cb5:	00 00                	add    BYTE PTR [eax],al
     cb7:	05 16 00 03 0e       	add    eax,0xe030016
     cbc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cbe:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cc0:	49                   	dec    ecx
     cc1:	13 00                	adc    eax,DWORD PTR [eax]
     cc3:	00 06                	add    BYTE PTR [esi],al
     cc5:	04 01                	add    al,0x1
     cc7:	03 0e                	add    ecx,DWORD PTR [esi]
     cc9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ccb:	49                   	dec    ecx
     ccc:	13 3a                	adc    edi,DWORD PTR [edx]
     cce:	0b 3b                	or     edi,DWORD PTR [ebx]
     cd0:	0b 01                	or     eax,DWORD PTR [ecx]
     cd2:	13 00                	adc    eax,DWORD PTR [eax]
     cd4:	00 07                	add    BYTE PTR [edi],al
     cd6:	28 00                	sub    BYTE PTR [eax],al
     cd8:	03 0e                	add    ecx,DWORD PTR [esi]
     cda:	1c 0b                	sbb    al,0xb
     cdc:	00 00                	add    BYTE PTR [eax],al
     cde:	08 28                	or     BYTE PTR [eax],ch
     ce0:	00 03                	add    BYTE PTR [ebx],al
     ce2:	0e                   	push   cs
     ce3:	1c 05                	sbb    al,0x5
     ce5:	00 00                	add    BYTE PTR [eax],al
     ce7:	09 2e                	or     DWORD PTR [esi],ebp
     ce9:	01 3f                	add    DWORD PTR [edi],edi
     ceb:	19 03                	sbb    DWORD PTR [ebx],eax
     ced:	0e                   	push   cs
     cee:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cf0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cf2:	27                   	daa    
     cf3:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     cf6:	11 01                	adc    DWORD PTR [ecx],eax
     cf8:	12 06                	adc    al,BYTE PTR [esi]
     cfa:	40                   	inc    eax
     cfb:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     d01:	00 00                	add    BYTE PTR [eax],al
     d03:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     d09:	0b 3b                	or     edi,DWORD PTR [ebx]
     d0b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d0e:	02 18                	add    bl,BYTE PTR [eax]
     d10:	00 00                	add    BYTE PTR [eax],al
     d12:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     d15:	03 0e                	add    ecx,DWORD PTR [esi]
     d17:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d19:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d1b:	49                   	dec    ecx
     d1c:	13 3f                	adc    edi,DWORD PTR [edi]
     d1e:	19 02                	sbb    DWORD PTR [edx],eax
     d20:	18 00                	sbb    BYTE PTR [eax],al
     d22:	00 00                	add    BYTE PTR [eax],al
     d24:	01 11                	add    DWORD PTR [ecx],edx
     d26:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     d2c:	0e                   	push   cs
     d2d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     d2f:	11 01                	adc    DWORD PTR [ecx],eax
     d31:	12 06                	adc    al,BYTE PTR [esi]
     d33:	10 17                	adc    BYTE PTR [edi],dl
     d35:	00 00                	add    BYTE PTR [eax],al
     d37:	02 16                	add    dl,BYTE PTR [esi]
     d39:	00 03                	add    BYTE PTR [ebx],al
     d3b:	0e                   	push   cs
     d3c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d3e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d40:	49                   	dec    ecx
     d41:	13 00                	adc    eax,DWORD PTR [eax]
     d43:	00 03                	add    BYTE PTR [ebx],al
     d45:	13 01                	adc    eax,DWORD PTR [ecx]
     d47:	03 0e                	add    ecx,DWORD PTR [esi]
     d49:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d4b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d4d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d4f:	01 13                	add    DWORD PTR [ebx],edx
     d51:	00 00                	add    BYTE PTR [eax],al
     d53:	04 0d                	add    al,0xd
     d55:	00 03                	add    BYTE PTR [ebx],al
     d57:	08 3a                	or     BYTE PTR [edx],bh
     d59:	0b 3b                	or     edi,DWORD PTR [ebx]
     d5b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d5e:	38 0b                	cmp    BYTE PTR [ebx],cl
     d60:	00 00                	add    BYTE PTR [eax],al
     d62:	05 0d 00 03 0e       	add    eax,0xe03000d
     d67:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d69:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d6b:	49                   	dec    ecx
     d6c:	13 38                	adc    edi,DWORD PTR [eax]
     d6e:	0b 00                	or     eax,DWORD PTR [eax]
     d70:	00 06                	add    BYTE PTR [esi],al
     d72:	24 00                	and    al,0x0
     d74:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d76:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d79:	08 00                	or     BYTE PTR [eax],al
     d7b:	00 07                	add    BYTE PTR [edi],al
     d7d:	01 01                	add    DWORD PTR [ecx],eax
     d7f:	49                   	dec    ecx
     d80:	13 01                	adc    eax,DWORD PTR [ecx]
     d82:	13 00                	adc    eax,DWORD PTR [eax]
     d84:	00 08                	add    BYTE PTR [eax],cl
     d86:	21 00                	and    DWORD PTR [eax],eax
     d88:	49                   	dec    ecx
     d89:	13 2f                	adc    ebp,DWORD PTR [edi]
     d8b:	0b 00                	or     eax,DWORD PTR [eax]
     d8d:	00 09                	add    BYTE PTR [ecx],cl
     d8f:	24 00                	and    al,0x0
     d91:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d93:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d96:	0e                   	push   cs
     d97:	00 00                	add    BYTE PTR [eax],al
     d99:	0a 0f                	or     cl,BYTE PTR [edi]
     d9b:	00 0b                	add    BYTE PTR [ebx],cl
     d9d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     da0:	00 00                	add    BYTE PTR [eax],al
     da2:	0b 13                	or     edx,DWORD PTR [ebx]
     da4:	01 03                	add    DWORD PTR [ebx],eax
     da6:	08 0b                	or     BYTE PTR [ebx],cl
     da8:	0b 3a                	or     edi,DWORD PTR [edx]
     daa:	0b 3b                	or     edi,DWORD PTR [ebx]
     dac:	0b 01                	or     eax,DWORD PTR [ecx]
     dae:	13 00                	adc    eax,DWORD PTR [eax]
     db0:	00 0c 26             	add    BYTE PTR [esi+eiz*1],cl
     db3:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     db6:	00 00                	add    BYTE PTR [eax],al
     db8:	0d 13 01 03 0e       	or     eax,0xe030113
     dbd:	0b 05 3a 0b 3b 0b    	or     eax,DWORD PTR ds:0xb3b0b3a
     dc3:	01 13                	add    DWORD PTR [ebx],edx
     dc5:	00 00                	add    BYTE PTR [eax],al
     dc7:	0e                   	push   cs
     dc8:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     dcd:	0b 3b                	or     edi,DWORD PTR [ebx]
     dcf:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     dd2:	38 05 00 00 0f 21    	cmp    BYTE PTR ds:0x210f0000,al
     dd8:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     ddb:	2f                   	das    
     ddc:	05 00 00 10 2e       	add    eax,0x2e100000
     de1:	01 3f                	add    DWORD PTR [edi],edi
     de3:	19 03                	sbb    DWORD PTR [ebx],eax
     de5:	0e                   	push   cs
     de6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     de8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     dea:	27                   	daa    
     deb:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     dee:	11 01                	adc    DWORD PTR [ecx],eax
     df0:	12 06                	adc    al,BYTE PTR [esi]
     df2:	40                   	inc    eax
     df3:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     df9:	00 00                	add    BYTE PTR [eax],al
     dfb:	11 05 00 03 0e 3a    	adc    DWORD PTR ds:0x3a0e0300,eax
     e01:	0b 3b                	or     edi,DWORD PTR [ebx]
     e03:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e06:	02 18                	add    bl,BYTE PTR [eax]
     e08:	00 00                	add    BYTE PTR [eax],al
     e0a:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     e0d:	03 0e                	add    ecx,DWORD PTR [esi]
     e0f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e11:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e13:	49                   	dec    ecx
     e14:	13 02                	adc    eax,DWORD PTR [edx]
     e16:	18 00                	sbb    BYTE PTR [eax],al
     e18:	00 13                	add    BYTE PTR [ebx],dl
     e1a:	34 00                	xor    al,0x0
     e1c:	03 08                	add    ecx,DWORD PTR [eax]
     e1e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e20:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e22:	49                   	dec    ecx
     e23:	13 02                	adc    eax,DWORD PTR [edx]
     e25:	18 00                	sbb    BYTE PTR [eax],al
     e27:	00 14 0b             	add    BYTE PTR [ebx+ecx*1],dl
     e2a:	01 11                	add    DWORD PTR [ecx],edx
     e2c:	01 12                	add    DWORD PTR [edx],edx
     e2e:	06                   	push   es
     e2f:	00 00                	add    BYTE PTR [eax],al
     e31:	15 2e 01 3f 19       	adc    eax,0x193f012e
     e36:	03 0e                	add    ecx,DWORD PTR [esi]
     e38:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e3a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e3c:	27                   	daa    
     e3d:	19 11                	sbb    DWORD PTR [ecx],edx
     e3f:	01 12                	add    DWORD PTR [edx],edx
     e41:	06                   	push   es
     e42:	40                   	inc    eax
     e43:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     e49:	00 00                	add    BYTE PTR [eax],al
     e4b:	16                   	push   ss
     e4c:	34 00                	xor    al,0x0
     e4e:	03 0e                	add    ecx,DWORD PTR [esi]
     e50:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e52:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e54:	49                   	dec    ecx
     e55:	13 3f                	adc    edi,DWORD PTR [edi]
     e57:	19 02                	sbb    DWORD PTR [edx],eax
     e59:	18 00                	sbb    BYTE PTR [eax],al
     e5b:	00 00                	add    BYTE PTR [eax],al
     e5d:	01 11                	add    DWORD PTR [ecx],edx
     e5f:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     e65:	0e                   	push   cs
     e66:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     e68:	11 01                	adc    DWORD PTR [ecx],eax
     e6a:	12 06                	adc    al,BYTE PTR [esi]
     e6c:	10 17                	adc    BYTE PTR [edi],dl
     e6e:	00 00                	add    BYTE PTR [eax],al
     e70:	02 16                	add    dl,BYTE PTR [esi]
     e72:	00 03                	add    BYTE PTR [ebx],al
     e74:	0e                   	push   cs
     e75:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e77:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e79:	49                   	dec    ecx
     e7a:	13 00                	adc    eax,DWORD PTR [eax]
     e7c:	00 03                	add    BYTE PTR [ebx],al
     e7e:	0f 00 0b             	str    WORD PTR [ebx]
     e81:	0b 03                	or     eax,DWORD PTR [ebx]
     e83:	0e                   	push   cs
     e84:	49                   	dec    ecx
     e85:	13 00                	adc    eax,DWORD PTR [eax]
     e87:	00 04 24             	add    BYTE PTR [esp],al
     e8a:	00 0b                	add    BYTE PTR [ebx],cl
     e8c:	0b 3e                	or     edi,DWORD PTR [esi]
     e8e:	0b 03                	or     eax,DWORD PTR [ebx]
     e90:	0e                   	push   cs
     e91:	00 00                	add    BYTE PTR [eax],al
     e93:	05 24 00 0b 0b       	add    eax,0xb0b0024
     e98:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e9b:	08 00                	or     BYTE PTR [eax],al
     e9d:	00 06                	add    BYTE PTR [esi],al
     e9f:	0f 00 0b             	str    WORD PTR [ebx]
     ea2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ea5:	00 00                	add    BYTE PTR [eax],al
     ea7:	07                   	pop    es
     ea8:	2e 01 03             	add    DWORD PTR cs:[ebx],eax
     eab:	0e                   	push   cs
     eac:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     eae:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     eb0:	27                   	daa    
     eb1:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     eb4:	11 01                	adc    DWORD PTR [ecx],eax
     eb6:	12 06                	adc    al,BYTE PTR [esi]
     eb8:	40                   	inc    eax
     eb9:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     ebf:	00 00                	add    BYTE PTR [eax],al
     ec1:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     ec7:	0b 3b                	or     edi,DWORD PTR [ebx]
     ec9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ecc:	02 18                	add    bl,BYTE PTR [eax]
     ece:	00 00                	add    BYTE PTR [eax],al
     ed0:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     ed3:	03 08                	add    ecx,DWORD PTR [eax]
     ed5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ed7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ed9:	49                   	dec    ecx
     eda:	13 02                	adc    eax,DWORD PTR [edx]
     edc:	18 00                	sbb    BYTE PTR [eax],al
     ede:	00 0a                	add    BYTE PTR [edx],cl
     ee0:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     ee4:	00 00                	add    BYTE PTR [eax],al
     ee6:	0b 05 00 03 0e 3a    	or     eax,DWORD PTR ds:0x3a0e0300
     eec:	0b 3b                	or     edi,DWORD PTR [ebx]
     eee:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ef1:	02 18                	add    bl,BYTE PTR [eax]
     ef3:	00 00                	add    BYTE PTR [eax],al
     ef5:	0c 34                	or     al,0x34
     ef7:	00 03                	add    BYTE PTR [ebx],al
     ef9:	0e                   	push   cs
     efa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     efc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     efe:	49                   	dec    ecx
     eff:	13 02                	adc    eax,DWORD PTR [edx]
     f01:	18 00                	sbb    BYTE PTR [eax],al
     f03:	00 0d 0b 01 11 01    	add    BYTE PTR ds:0x111010b,cl
     f09:	12 06                	adc    al,BYTE PTR [esi]
     f0b:	00 00                	add    BYTE PTR [eax],al
     f0d:	0e                   	push   cs
     f0e:	01 01                	add    DWORD PTR [ecx],eax
     f10:	49                   	dec    ecx
     f11:	13 01                	adc    eax,DWORD PTR [ecx]
     f13:	13 00                	adc    eax,DWORD PTR [eax]
     f15:	00 0f                	add    BYTE PTR [edi],cl
     f17:	21 00                	and    DWORD PTR [eax],eax
     f19:	49                   	dec    ecx
     f1a:	13 2f                	adc    ebp,DWORD PTR [edi]
     f1c:	0b 00                	or     eax,DWORD PTR [eax]
     f1e:	00 10                	add    BYTE PTR [eax],dl
     f20:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     f23:	19 03                	sbb    DWORD PTR [ebx],eax
     f25:	0e                   	push   cs
     f26:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f28:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f2a:	27                   	daa    
     f2b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f2e:	11 01                	adc    DWORD PTR [ecx],eax
     f30:	12 06                	adc    al,BYTE PTR [esi]
     f32:	40                   	inc    eax
     f33:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     f39:	00 00                	add    BYTE PTR [eax],al
     f3b:	11 0a                	adc    DWORD PTR [edx],ecx
     f3d:	00 03                	add    BYTE PTR [ebx],al
     f3f:	0e                   	push   cs
     f40:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f42:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f44:	11 01                	adc    DWORD PTR [ecx],eax
     f46:	00 00                	add    BYTE PTR [eax],al
     f48:	12 0b                	adc    cl,BYTE PTR [ebx]
     f4a:	01 11                	add    DWORD PTR [ecx],edx
     f4c:	01 12                	add    DWORD PTR [edx],edx
     f4e:	06                   	push   es
     f4f:	01 13                	add    DWORD PTR [ebx],edx
     f51:	00 00                	add    BYTE PTR [eax],al
     f53:	13 2e                	adc    ebp,DWORD PTR [esi]
     f55:	01 3f                	add    DWORD PTR [edi],edi
     f57:	19 03                	sbb    DWORD PTR [ebx],eax
     f59:	0e                   	push   cs
     f5a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f5c:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     f62:	11 01                	adc    DWORD PTR [ecx],eax
     f64:	12 06                	adc    al,BYTE PTR [esi]
     f66:	40                   	inc    eax
     f67:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     f6d:	00 00                	add    BYTE PTR [eax],al
     f6f:	14 05                	adc    al,0x5
     f71:	00 03                	add    BYTE PTR [ebx],al
     f73:	08 3a                	or     BYTE PTR [edx],bh
     f75:	0b 3b                	or     edi,DWORD PTR [ebx]
     f77:	05 49 13 02 18       	add    eax,0x18021349
     f7c:	00 00                	add    BYTE PTR [eax],al
     f7e:	15 18 00 00 00       	adc    eax,0x18
     f83:	16                   	push   ss
     f84:	34 00                	xor    al,0x0
     f86:	03 0e                	add    ecx,DWORD PTR [esi]
     f88:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f8a:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     f90:	00 00                	add    BYTE PTR [eax],al
     f92:	17                   	pop    ss
     f93:	34 00                	xor    al,0x0
     f95:	03 08                	add    ecx,DWORD PTR [eax]
     f97:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f99:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     f9f:	00 00                	add    BYTE PTR [eax],al
     fa1:	18 34 00             	sbb    BYTE PTR [eax+eax*1],dh
     fa4:	03 0e                	add    ecx,DWORD PTR [esi]
     fa6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fa8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     faa:	49                   	dec    ecx
     fab:	13 3f                	adc    edi,DWORD PTR [edi]
     fad:	19 02                	sbb    DWORD PTR [edx],eax
     faf:	18 00                	sbb    BYTE PTR [eax],al
     fb1:	00 00                	add    BYTE PTR [eax],al
     fb3:	01 11                	add    DWORD PTR [ecx],edx
     fb5:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     fbb:	0e                   	push   cs
     fbc:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     fbe:	11 01                	adc    DWORD PTR [ecx],eax
     fc0:	12 06                	adc    al,BYTE PTR [esi]
     fc2:	10 17                	adc    BYTE PTR [edi],dl
     fc4:	00 00                	add    BYTE PTR [eax],al
     fc6:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     fc9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     fcb:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     fce:	0e                   	push   cs
     fcf:	00 00                	add    BYTE PTR [eax],al
     fd1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     fd4:	0b 0b                	or     ecx,DWORD PTR [ebx]
     fd6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     fd9:	08 00                	or     BYTE PTR [eax],al
     fdb:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     fde:	00 0b                	add    BYTE PTR [ebx],cl
     fe0:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fe3:	00 00                	add    BYTE PTR [eax],al
     fe5:	05 2e 01 3f 19       	add    eax,0x193f012e
     fea:	03 0e                	add    ecx,DWORD PTR [esi]
     fec:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fee:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ff0:	11 01                	adc    DWORD PTR [ecx],eax
     ff2:	12 06                	adc    al,BYTE PTR [esi]
     ff4:	40                   	inc    eax
     ff5:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     ffb:	00 00                	add    BYTE PTR [eax],al
     ffd:	06                   	push   es
     ffe:	34 00                	xor    al,0x0
    1000:	03 0e                	add    ecx,DWORD PTR [esi]
    1002:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1004:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1006:	49                   	dec    ecx
    1007:	13 02                	adc    eax,DWORD PTR [edx]
    1009:	18 00                	sbb    BYTE PTR [eax],al
    100b:	00 07                	add    BYTE PTR [edi],al
    100d:	01 01                	add    DWORD PTR [ecx],eax
    100f:	49                   	dec    ecx
    1010:	13 01                	adc    eax,DWORD PTR [ecx]
    1012:	13 00                	adc    eax,DWORD PTR [eax]
    1014:	00 08                	add    BYTE PTR [eax],cl
    1016:	21 00                	and    DWORD PTR [eax],eax
    1018:	49                   	dec    ecx
    1019:	13 2f                	adc    ebp,DWORD PTR [edi]
    101b:	0b 00                	or     eax,DWORD PTR [eax]
    101d:	00 09                	add    BYTE PTR [ecx],cl
    101f:	34 00                	xor    al,0x0
    1021:	03 0e                	add    ecx,DWORD PTR [esi]
    1023:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1025:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1027:	49                   	dec    ecx
    1028:	13 3f                	adc    edi,DWORD PTR [edi]
    102a:	19 02                	sbb    DWORD PTR [edx],eax
    102c:	18 00                	sbb    BYTE PTR [eax],al
    102e:	00 00                	add    BYTE PTR [eax],al
    1030:	01 11                	add    DWORD PTR [ecx],edx
    1032:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1038:	0e                   	push   cs
    1039:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    103b:	11 01                	adc    DWORD PTR [ecx],eax
    103d:	12 06                	adc    al,BYTE PTR [esi]
    103f:	10 17                	adc    BYTE PTR [edi],dl
    1041:	00 00                	add    BYTE PTR [eax],al
    1043:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1046:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1048:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    104b:	08 00                	or     BYTE PTR [eax],al
    104d:	00 03                	add    BYTE PTR [ebx],al
    104f:	16                   	push   ss
    1050:	00 03                	add    BYTE PTR [ebx],al
    1052:	0e                   	push   cs
    1053:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1055:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1057:	49                   	dec    ecx
    1058:	13 00                	adc    eax,DWORD PTR [eax]
    105a:	00 04 24             	add    BYTE PTR [esp],al
    105d:	00 0b                	add    BYTE PTR [ebx],cl
    105f:	0b 3e                	or     edi,DWORD PTR [esi]
    1061:	0b 03                	or     eax,DWORD PTR [ebx]
    1063:	0e                   	push   cs
    1064:	00 00                	add    BYTE PTR [eax],al
    1066:	05 0f 00 0b 0b       	add    eax,0xb0b000f
    106b:	49                   	dec    ecx
    106c:	13 00                	adc    eax,DWORD PTR [eax]
    106e:	00 06                	add    BYTE PTR [esi],al
    1070:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1073:	19 03                	sbb    DWORD PTR [ebx],eax
    1075:	0e                   	push   cs
    1076:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1078:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    107a:	27                   	daa    
    107b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    107e:	11 01                	adc    DWORD PTR [ecx],eax
    1080:	12 06                	adc    al,BYTE PTR [esi]
    1082:	40                   	inc    eax
    1083:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1089:	00 00                	add    BYTE PTR [eax],al
    108b:	07                   	pop    es
    108c:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    1091:	0b 3b                	or     edi,DWORD PTR [ebx]
    1093:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1096:	02 18                	add    bl,BYTE PTR [eax]
    1098:	00 00                	add    BYTE PTR [eax],al
    109a:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    10a0:	0b 3b                	or     edi,DWORD PTR [ebx]
    10a2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    10a5:	02 18                	add    bl,BYTE PTR [eax]
    10a7:	00 00                	add    BYTE PTR [eax],al
    10a9:	09 26                	or     DWORD PTR [esi],esp
    10ab:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    10ae:	00 00                	add    BYTE PTR [eax],al
    10b0:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
    10b3:	03 0e                	add    ecx,DWORD PTR [esi]
    10b5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10b7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10b9:	49                   	dec    ecx
    10ba:	13 02                	adc    eax,DWORD PTR [edx]
    10bc:	18 00                	sbb    BYTE PTR [eax],al
    10be:	00 0b                	add    BYTE PTR [ebx],cl
    10c0:	34 00                	xor    al,0x0
    10c2:	03 0e                	add    ecx,DWORD PTR [esi]
    10c4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10c6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10c8:	49                   	dec    ecx
    10c9:	13 3f                	adc    edi,DWORD PTR [edi]
    10cb:	19 02                	sbb    DWORD PTR [edx],eax
    10cd:	18 00                	sbb    BYTE PTR [eax],al
    10cf:	00 00                	add    BYTE PTR [eax],al
    10d1:	01 11                	add    DWORD PTR [ecx],edx
    10d3:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    10d9:	0e                   	push   cs
    10da:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    10dc:	11 01                	adc    DWORD PTR [ecx],eax
    10de:	12 06                	adc    al,BYTE PTR [esi]
    10e0:	10 17                	adc    BYTE PTR [edi],dl
    10e2:	00 00                	add    BYTE PTR [eax],al
    10e4:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    10e7:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10e9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10ec:	0e                   	push   cs
    10ed:	00 00                	add    BYTE PTR [eax],al
    10ef:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    10f2:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10f4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10f7:	08 00                	or     BYTE PTR [eax],al
    10f9:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
    10fc:	00 0b                	add    BYTE PTR [ebx],cl
    10fe:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1101:	00 00                	add    BYTE PTR [eax],al
    1103:	05 16 00 03 0e       	add    eax,0xe030016
    1108:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    110a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    110c:	49                   	dec    ecx
    110d:	13 00                	adc    eax,DWORD PTR [eax]
    110f:	00 06                	add    BYTE PTR [esi],al
    1111:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1115:	00 00                	add    BYTE PTR [eax],al
    1117:	07                   	pop    es
    1118:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    111b:	19 03                	sbb    DWORD PTR [ebx],eax
    111d:	0e                   	push   cs
    111e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1120:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1122:	27                   	daa    
    1123:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1126:	11 01                	adc    DWORD PTR [ecx],eax
    1128:	12 06                	adc    al,BYTE PTR [esi]
    112a:	40                   	inc    eax
    112b:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1131:	00 00                	add    BYTE PTR [eax],al
    1133:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    1139:	0b 3b                	or     edi,DWORD PTR [ebx]
    113b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    113e:	02 18                	add    bl,BYTE PTR [eax]
    1140:	00 00                	add    BYTE PTR [eax],al
    1142:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1145:	03 08                	add    ecx,DWORD PTR [eax]
    1147:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1149:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    114b:	49                   	dec    ecx
    114c:	13 02                	adc    eax,DWORD PTR [edx]
    114e:	18 00                	sbb    BYTE PTR [eax],al
    1150:	00 0a                	add    BYTE PTR [edx],cl
    1152:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1155:	19 03                	sbb    DWORD PTR [ebx],eax
    1157:	0e                   	push   cs
    1158:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    115a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    115c:	27                   	daa    
    115d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1160:	11 01                	adc    DWORD PTR [ecx],eax
    1162:	12 06                	adc    al,BYTE PTR [esi]
    1164:	40                   	inc    eax
    1165:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    116b:	00 00                	add    BYTE PTR [eax],al
    116d:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
    1170:	03 0e                	add    ecx,DWORD PTR [esi]
    1172:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1174:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1176:	49                   	dec    ecx
    1177:	13 3f                	adc    edi,DWORD PTR [edi]
    1179:	19 02                	sbb    DWORD PTR [edx],eax
    117b:	18 00                	sbb    BYTE PTR [eax],al
    117d:	00 00                	add    BYTE PTR [eax],al
    117f:	01 11                	add    DWORD PTR [ecx],edx
    1181:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1187:	0e                   	push   cs
    1188:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    118a:	11 01                	adc    DWORD PTR [ecx],eax
    118c:	12 06                	adc    al,BYTE PTR [esi]
    118e:	10 17                	adc    BYTE PTR [edi],dl
    1190:	00 00                	add    BYTE PTR [eax],al
    1192:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1195:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1197:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    119a:	08 00                	or     BYTE PTR [eax],al
    119c:	00 03                	add    BYTE PTR [ebx],al
    119e:	24 00                	and    al,0x0
    11a0:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11a2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11a5:	0e                   	push   cs
    11a6:	00 00                	add    BYTE PTR [eax],al
    11a8:	04 2e                	add    al,0x2e
    11aa:	01 3f                	add    DWORD PTR [edi],edi
    11ac:	19 03                	sbb    DWORD PTR [ebx],eax
    11ae:	0e                   	push   cs
    11af:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11b1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11b3:	27                   	daa    
    11b4:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    11b7:	11 01                	adc    DWORD PTR [ecx],eax
    11b9:	12 06                	adc    al,BYTE PTR [esi]
    11bb:	40                   	inc    eax
    11bc:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    11c2:	00 00                	add    BYTE PTR [eax],al
    11c4:	05 05 00 03 08       	add    eax,0x8030005
    11c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11cd:	49                   	dec    ecx
    11ce:	13 02                	adc    eax,DWORD PTR [edx]
    11d0:	18 00                	sbb    BYTE PTR [eax],al
    11d2:	00 06                	add    BYTE PTR [esi],al
    11d4:	34 00                	xor    al,0x0
    11d6:	03 08                	add    ecx,DWORD PTR [eax]
    11d8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11da:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11dc:	49                   	dec    ecx
    11dd:	13 02                	adc    eax,DWORD PTR [edx]
    11df:	18 00                	sbb    BYTE PTR [eax],al
    11e1:	00 07                	add    BYTE PTR [edi],al
    11e3:	0f 00 0b             	str    WORD PTR [ebx]
    11e6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    11e9:	00 00                	add    BYTE PTR [eax],al
    11eb:	08 26                	or     BYTE PTR [esi],ah
    11ed:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    11f0:	00 00                	add    BYTE PTR [eax],al
    11f2:	09 2e                	or     DWORD PTR [esi],ebp
    11f4:	01 3f                	add    DWORD PTR [edi],edi
    11f6:	19 03                	sbb    DWORD PTR [ebx],eax
    11f8:	0e                   	push   cs
    11f9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11fb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11fd:	27                   	daa    
    11fe:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1201:	11 01                	adc    DWORD PTR [ecx],eax
    1203:	12 06                	adc    al,BYTE PTR [esi]
    1205:	40                   	inc    eax
    1206:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    120c:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
    1212:	0b 3b                	or     edi,DWORD PTR [ebx]
    1214:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1217:	02 18                	add    bl,BYTE PTR [eax]
    1219:	00 00                	add    BYTE PTR [eax],al
    121b:	00 01                	add    BYTE PTR [ecx],al
    121d:	11 01                	adc    DWORD PTR [ecx],eax
    121f:	25 0e 13 0b 03       	and    eax,0x30b130e
    1224:	0e                   	push   cs
    1225:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1227:	11 01                	adc    DWORD PTR [ecx],eax
    1229:	12 06                	adc    al,BYTE PTR [esi]
    122b:	10 17                	adc    BYTE PTR [edi],dl
    122d:	00 00                	add    BYTE PTR [eax],al
    122f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1232:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1234:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1237:	0e                   	push   cs
    1238:	00 00                	add    BYTE PTR [eax],al
    123a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    123d:	0b 0b                	or     ecx,DWORD PTR [ebx]
    123f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1242:	08 00                	or     BYTE PTR [eax],al
    1244:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
    1247:	00 0b                	add    BYTE PTR [ebx],cl
    1249:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    124c:	00 00                	add    BYTE PTR [eax],al
    124e:	05 16 00 03 0e       	add    eax,0xe030016
    1253:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1255:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1257:	49                   	dec    ecx
    1258:	13 00                	adc    eax,DWORD PTR [eax]
    125a:	00 06                	add    BYTE PTR [esi],al
    125c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    125f:	19 03                	sbb    DWORD PTR [ebx],eax
    1261:	0e                   	push   cs
    1262:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1264:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1266:	27                   	daa    
    1267:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    126a:	11 01                	adc    DWORD PTR [ecx],eax
    126c:	12 06                	adc    al,BYTE PTR [esi]
    126e:	40                   	inc    eax
    126f:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1275:	00 00                	add    BYTE PTR [eax],al
    1277:	07                   	pop    es
    1278:	05 00 03 08 3a       	add    eax,0x3a080300
    127d:	0b 3b                	or     edi,DWORD PTR [ebx]
    127f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1282:	02 18                	add    bl,BYTE PTR [eax]
    1284:	00 00                	add    BYTE PTR [eax],al
    1286:	08 2e                	or     BYTE PTR [esi],ch
    1288:	01 3f                	add    DWORD PTR [edi],edi
    128a:	19 03                	sbb    DWORD PTR [ebx],eax
    128c:	0e                   	push   cs
    128d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    128f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1291:	27                   	daa    
    1292:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1295:	11 01                	adc    DWORD PTR [ecx],eax
    1297:	12 06                	adc    al,BYTE PTR [esi]
    1299:	40                   	inc    eax
    129a:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    12a0:	00 00                	add    BYTE PTR [eax],al
    12a2:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    12a5:	03 08                	add    ecx,DWORD PTR [eax]
    12a7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12a9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12ab:	49                   	dec    ecx
    12ac:	13 02                	adc    eax,DWORD PTR [edx]
    12ae:	18 00                	sbb    BYTE PTR [eax],al
    12b0:	00 0a                	add    BYTE PTR [edx],cl
    12b2:	34 00                	xor    al,0x0
    12b4:	03 0e                	add    ecx,DWORD PTR [esi]
    12b6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12b8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12ba:	49                   	dec    ecx
    12bb:	13 3f                	adc    edi,DWORD PTR [edi]
    12bd:	19 02                	sbb    DWORD PTR [edx],eax
    12bf:	18 00                	sbb    BYTE PTR [eax],al
    12c1:	00 00                	add    BYTE PTR [eax],al
    12c3:	01 11                	add    DWORD PTR [ecx],edx
    12c5:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    12cb:	0e                   	push   cs
    12cc:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    12ce:	11 01                	adc    DWORD PTR [ecx],eax
    12d0:	12 06                	adc    al,BYTE PTR [esi]
    12d2:	10 17                	adc    BYTE PTR [edi],dl
    12d4:	00 00                	add    BYTE PTR [eax],al
    12d6:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    12d9:	0b 0b                	or     ecx,DWORD PTR [ebx]
    12db:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    12de:	0e                   	push   cs
    12df:	00 00                	add    BYTE PTR [eax],al
    12e1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    12e4:	0b 0b                	or     ecx,DWORD PTR [ebx]
    12e6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    12e9:	08 00                	or     BYTE PTR [eax],al
    12eb:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
    12ee:	00 0b                	add    BYTE PTR [ebx],cl
    12f0:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    12f3:	00 00                	add    BYTE PTR [eax],al
    12f5:	05 16 00 03 0e       	add    eax,0xe030016
    12fa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12fc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12fe:	49                   	dec    ecx
    12ff:	13 00                	adc    eax,DWORD PTR [eax]
    1301:	00 06                	add    BYTE PTR [esi],al
    1303:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1307:	00 00                	add    BYTE PTR [eax],al
    1309:	07                   	pop    es
    130a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    130d:	19 03                	sbb    DWORD PTR [ebx],eax
    130f:	0e                   	push   cs
    1310:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1312:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1314:	27                   	daa    
    1315:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1318:	11 01                	adc    DWORD PTR [ecx],eax
    131a:	12 06                	adc    al,BYTE PTR [esi]
    131c:	40                   	inc    eax
    131d:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1323:	00 00                	add    BYTE PTR [eax],al
    1325:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    132b:	0b 3b                	or     edi,DWORD PTR [ebx]
    132d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1330:	02 18                	add    bl,BYTE PTR [eax]
    1332:	00 00                	add    BYTE PTR [eax],al
    1334:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1337:	03 08                	add    ecx,DWORD PTR [eax]
    1339:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    133b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    133d:	49                   	dec    ecx
    133e:	13 02                	adc    eax,DWORD PTR [edx]
    1340:	18 00                	sbb    BYTE PTR [eax],al
    1342:	00 0a                	add    BYTE PTR [edx],cl
    1344:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1347:	19 03                	sbb    DWORD PTR [ebx],eax
    1349:	0e                   	push   cs
    134a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    134c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    134e:	27                   	daa    
    134f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1352:	11 01                	adc    DWORD PTR [ecx],eax
    1354:	12 06                	adc    al,BYTE PTR [esi]
    1356:	40                   	inc    eax
    1357:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    135d:	00 00                	add    BYTE PTR [eax],al
    135f:	0b 05 00 03 0e 3a    	or     eax,DWORD PTR ds:0x3a0e0300
    1365:	0b 3b                	or     edi,DWORD PTR [ebx]
    1367:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    136a:	02 18                	add    bl,BYTE PTR [eax]
    136c:	00 00                	add    BYTE PTR [eax],al
    136e:	0c 34                	or     al,0x34
    1370:	00 03                	add    BYTE PTR [ebx],al
    1372:	0e                   	push   cs
    1373:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1375:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1377:	49                   	dec    ecx
    1378:	13 3f                	adc    edi,DWORD PTR [edi]
    137a:	19 02                	sbb    DWORD PTR [edx],eax
    137c:	18 00                	sbb    BYTE PTR [eax],al
    137e:	00 00                	add    BYTE PTR [eax],al
    1380:	01 11                	add    DWORD PTR [ecx],edx
    1382:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1388:	0e                   	push   cs
    1389:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    138b:	11 01                	adc    DWORD PTR [ecx],eax
    138d:	12 06                	adc    al,BYTE PTR [esi]
    138f:	10 17                	adc    BYTE PTR [edi],dl
    1391:	00 00                	add    BYTE PTR [eax],al
    1393:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1396:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1398:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    139b:	08 00                	or     BYTE PTR [eax],al
    139d:	00 03                	add    BYTE PTR [ebx],al
    139f:	16                   	push   ss
    13a0:	00 03                	add    BYTE PTR [ebx],al
    13a2:	0e                   	push   cs
    13a3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13a5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13a7:	49                   	dec    ecx
    13a8:	13 00                	adc    eax,DWORD PTR [eax]
    13aa:	00 04 24             	add    BYTE PTR [esp],al
    13ad:	00 0b                	add    BYTE PTR [ebx],cl
    13af:	0b 3e                	or     edi,DWORD PTR [esi]
    13b1:	0b 03                	or     eax,DWORD PTR [ebx]
    13b3:	0e                   	push   cs
    13b4:	00 00                	add    BYTE PTR [eax],al
    13b6:	05 2e 01 3f 19       	add    eax,0x193f012e
    13bb:	03 0e                	add    ecx,DWORD PTR [esi]
    13bd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13bf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13c1:	27                   	daa    
    13c2:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13c5:	11 01                	adc    DWORD PTR [ecx],eax
    13c7:	12 06                	adc    al,BYTE PTR [esi]
    13c9:	40                   	inc    eax
    13ca:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    13d0:	00 00                	add    BYTE PTR [eax],al
    13d2:	06                   	push   es
    13d3:	05 00 03 08 3a       	add    eax,0x3a080300
    13d8:	0b 3b                	or     edi,DWORD PTR [ebx]
    13da:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    13dd:	02 18                	add    bl,BYTE PTR [eax]
    13df:	00 00                	add    BYTE PTR [eax],al
    13e1:	07                   	pop    es
    13e2:	0f 00 0b             	str    WORD PTR [ebx]
    13e5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    13e8:	00 00                	add    BYTE PTR [eax],al
    13ea:	08 26                	or     BYTE PTR [esi],ah
    13ec:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    13ef:	00 00                	add    BYTE PTR [eax],al
    13f1:	09 2e                	or     DWORD PTR [esi],ebp
    13f3:	01 3f                	add    DWORD PTR [edi],edi
    13f5:	19 03                	sbb    DWORD PTR [ebx],eax
    13f7:	0e                   	push   cs
    13f8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13fa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13fc:	27                   	daa    
    13fd:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1400:	11 01                	adc    DWORD PTR [ecx],eax
    1402:	12 06                	adc    al,BYTE PTR [esi]
    1404:	40                   	inc    eax
    1405:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    140b:	00 01                	add    BYTE PTR [ecx],al
    140d:	11 01                	adc    DWORD PTR [ecx],eax
    140f:	25 0e 13 0b 03       	and    eax,0x30b130e
    1414:	0e                   	push   cs
    1415:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1417:	11 01                	adc    DWORD PTR [ecx],eax
    1419:	12 06                	adc    al,BYTE PTR [esi]
    141b:	10 17                	adc    BYTE PTR [edi],dl
    141d:	00 00                	add    BYTE PTR [eax],al
    141f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1422:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1424:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1427:	08 00                	or     BYTE PTR [eax],al
    1429:	00 03                	add    BYTE PTR [ebx],al
    142b:	16                   	push   ss
    142c:	00 03                	add    BYTE PTR [ebx],al
    142e:	0e                   	push   cs
    142f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1431:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1433:	49                   	dec    ecx
    1434:	13 00                	adc    eax,DWORD PTR [eax]
    1436:	00 04 24             	add    BYTE PTR [esp],al
    1439:	00 0b                	add    BYTE PTR [ebx],cl
    143b:	0b 3e                	or     edi,DWORD PTR [esi]
    143d:	0b 03                	or     eax,DWORD PTR [ebx]
    143f:	0e                   	push   cs
    1440:	00 00                	add    BYTE PTR [eax],al
    1442:	05 2e 01 3f 19       	add    eax,0x193f012e
    1447:	03 0e                	add    ecx,DWORD PTR [esi]
    1449:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    144b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    144d:	27                   	daa    
    144e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1451:	11 01                	adc    DWORD PTR [ecx],eax
    1453:	12 06                	adc    al,BYTE PTR [esi]
    1455:	40                   	inc    eax
    1456:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    145c:	00 00                	add    BYTE PTR [eax],al
    145e:	06                   	push   es
    145f:	05 00 03 08 3a       	add    eax,0x3a080300
    1464:	0b 3b                	or     edi,DWORD PTR [ebx]
    1466:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1469:	02 18                	add    bl,BYTE PTR [eax]
    146b:	00 00                	add    BYTE PTR [eax],al
    146d:	07                   	pop    es
    146e:	34 00                	xor    al,0x0
    1470:	03 08                	add    ecx,DWORD PTR [eax]
    1472:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1474:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1476:	49                   	dec    ecx
    1477:	13 02                	adc    eax,DWORD PTR [edx]
    1479:	18 00                	sbb    BYTE PTR [eax],al
    147b:	00 08                	add    BYTE PTR [eax],cl
    147d:	0f 00 0b             	str    WORD PTR [ebx]
    1480:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1483:	00 00                	add    BYTE PTR [eax],al
    1485:	09 26                	or     DWORD PTR [esi],esp
    1487:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    148a:	00 00                	add    BYTE PTR [eax],al
    148c:	0a 2e                	or     ch,BYTE PTR [esi]
    148e:	01 3f                	add    DWORD PTR [edi],edi
    1490:	19 03                	sbb    DWORD PTR [ebx],eax
    1492:	0e                   	push   cs
    1493:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1495:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1497:	27                   	daa    
    1498:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    149b:	11 01                	adc    DWORD PTR [ecx],eax
    149d:	12 06                	adc    al,BYTE PTR [esi]
    149f:	40                   	inc    eax
    14a0:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
    14a6:	00 01                	add    BYTE PTR [ecx],al
    14a8:	11 01                	adc    DWORD PTR [ecx],eax
    14aa:	25 0e 13 0b 03       	and    eax,0x30b130e
    14af:	0e                   	push   cs
    14b0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    14b2:	11 01                	adc    DWORD PTR [ecx],eax
    14b4:	12 06                	adc    al,BYTE PTR [esi]
    14b6:	10 17                	adc    BYTE PTR [edi],dl
    14b8:	00 00                	add    BYTE PTR [eax],al
    14ba:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    14bd:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14bf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14c2:	08 00                	or     BYTE PTR [eax],al
    14c4:	00 03                	add    BYTE PTR [ebx],al
    14c6:	24 00                	and    al,0x0
    14c8:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14ca:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14cd:	0e                   	push   cs
    14ce:	00 00                	add    BYTE PTR [eax],al
    14d0:	04 2e                	add    al,0x2e
    14d2:	01 3f                	add    DWORD PTR [edi],edi
    14d4:	19 03                	sbb    DWORD PTR [ebx],eax
    14d6:	0e                   	push   cs
    14d7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14d9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14db:	27                   	daa    
    14dc:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    14df:	11 01                	adc    DWORD PTR [ecx],eax
    14e1:	12 06                	adc    al,BYTE PTR [esi]
    14e3:	40                   	inc    eax
    14e4:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    14ea:	00 00                	add    BYTE PTR [eax],al
    14ec:	05 05 00 03 0e       	add    eax,0xe030005
    14f1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14f3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14f5:	49                   	dec    ecx
    14f6:	13 02                	adc    eax,DWORD PTR [edx]
    14f8:	18 00                	sbb    BYTE PTR [eax],al
    14fa:	00 06                	add    BYTE PTR [esi],al
    14fc:	34 00                	xor    al,0x0
    14fe:	03 08                	add    ecx,DWORD PTR [eax]
    1500:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1502:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1504:	49                   	dec    ecx
    1505:	13 02                	adc    eax,DWORD PTR [edx]
    1507:	18 00                	sbb    BYTE PTR [eax],al
    1509:	00 07                	add    BYTE PTR [edi],al
    150b:	34 00                	xor    al,0x0
    150d:	03 0e                	add    ecx,DWORD PTR [esi]
    150f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1511:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1513:	49                   	dec    ecx
    1514:	13 00                	adc    eax,DWORD PTR [eax]
    1516:	00 08                	add    BYTE PTR [eax],cl
    1518:	34 00                	xor    al,0x0
    151a:	03 08                	add    ecx,DWORD PTR [eax]
    151c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    151e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1520:	49                   	dec    ecx
    1521:	13 00                	adc    eax,DWORD PTR [eax]
    1523:	00 09                	add    BYTE PTR [ecx],cl
    1525:	34 00                	xor    al,0x0
    1527:	03 0e                	add    ecx,DWORD PTR [esi]
    1529:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    152b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    152d:	49                   	dec    ecx
    152e:	13 02                	adc    eax,DWORD PTR [edx]
    1530:	18 00                	sbb    BYTE PTR [eax],al
    1532:	00 0a                	add    BYTE PTR [edx],cl
    1534:	0f 00 0b             	str    WORD PTR [ebx]
    1537:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    153a:	00 00                	add    BYTE PTR [eax],al
    153c:	0b 26                	or     esp,DWORD PTR [esi]
    153e:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1541:	00 00                	add    BYTE PTR [eax],al
    1543:	00 01                	add    BYTE PTR [ecx],al
    1545:	11 01                	adc    DWORD PTR [ecx],eax
    1547:	25 0e 13 0b 03       	and    eax,0x30b130e
    154c:	0e                   	push   cs
    154d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    154f:	11 01                	adc    DWORD PTR [ecx],eax
    1551:	12 06                	adc    al,BYTE PTR [esi]
    1553:	10 17                	adc    BYTE PTR [edi],dl
    1555:	00 00                	add    BYTE PTR [eax],al
    1557:	02 2e                	add    ch,BYTE PTR [esi]
    1559:	01 3f                	add    DWORD PTR [edi],edi
    155b:	19 03                	sbb    DWORD PTR [ebx],eax
    155d:	0e                   	push   cs
    155e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1560:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1562:	27                   	daa    
    1563:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1566:	11 01                	adc    DWORD PTR [ecx],eax
    1568:	12 06                	adc    al,BYTE PTR [esi]
    156a:	40                   	inc    eax
    156b:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1571:	00 00                	add    BYTE PTR [eax],al
    1573:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
    1579:	0b 3b                	or     edi,DWORD PTR [ebx]
    157b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    157e:	02 18                	add    bl,BYTE PTR [eax]
    1580:	00 00                	add    BYTE PTR [eax],al
    1582:	04 0f                	add    al,0xf
    1584:	00 0b                	add    BYTE PTR [ebx],cl
    1586:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1589:	00 00                	add    BYTE PTR [eax],al
    158b:	05 24 00 0b 0b       	add    eax,0xb0b0024
    1590:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1593:	0e                   	push   cs
    1594:	00 00                	add    BYTE PTR [eax],al
    1596:	06                   	push   es
    1597:	24 00                	and    al,0x0
    1599:	0b 0b                	or     ecx,DWORD PTR [ebx]
    159b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    159e:	08 00                	or     BYTE PTR [eax],al
    15a0:	00 00                	add    BYTE PTR [eax],al
    15a2:	01 11                	add    DWORD PTR [ecx],edx
    15a4:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    15aa:	0e                   	push   cs
    15ab:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    15ad:	11 01                	adc    DWORD PTR [ecx],eax
    15af:	12 06                	adc    al,BYTE PTR [esi]
    15b1:	10 17                	adc    BYTE PTR [edi],dl
    15b3:	00 00                	add    BYTE PTR [eax],al
    15b5:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    15b8:	0b 0b                	or     ecx,DWORD PTR [ebx]
    15ba:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    15bd:	08 00                	or     BYTE PTR [eax],al
    15bf:	00 03                	add    BYTE PTR [ebx],al
    15c1:	24 00                	and    al,0x0
    15c3:	0b 0b                	or     ecx,DWORD PTR [ebx]
    15c5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    15c8:	0e                   	push   cs
    15c9:	00 00                	add    BYTE PTR [eax],al
    15cb:	04 2e                	add    al,0x2e
    15cd:	01 3f                	add    DWORD PTR [edi],edi
    15cf:	19 03                	sbb    DWORD PTR [ebx],eax
    15d1:	0e                   	push   cs
    15d2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15d4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15d6:	27                   	daa    
    15d7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    15da:	11 01                	adc    DWORD PTR [ecx],eax
    15dc:	12 06                	adc    al,BYTE PTR [esi]
    15de:	40                   	inc    eax
    15df:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    15e5:	00 00                	add    BYTE PTR [eax],al
    15e7:	05 05 00 03 0e       	add    eax,0xe030005
    15ec:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15ee:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15f0:	49                   	dec    ecx
    15f1:	13 02                	adc    eax,DWORD PTR [edx]
    15f3:	18 00                	sbb    BYTE PTR [eax],al
    15f5:	00 06                	add    BYTE PTR [esi],al
    15f7:	34 00                	xor    al,0x0
    15f9:	03 08                	add    ecx,DWORD PTR [eax]
    15fb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15fd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15ff:	49                   	dec    ecx
    1600:	13 02                	adc    eax,DWORD PTR [edx]
    1602:	18 00                	sbb    BYTE PTR [eax],al
    1604:	00 07                	add    BYTE PTR [edi],al
    1606:	34 00                	xor    al,0x0
    1608:	03 0e                	add    ecx,DWORD PTR [esi]
    160a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    160c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    160e:	49                   	dec    ecx
    160f:	13 00                	adc    eax,DWORD PTR [eax]
    1611:	00 08                	add    BYTE PTR [eax],cl
    1613:	34 00                	xor    al,0x0
    1615:	03 08                	add    ecx,DWORD PTR [eax]
    1617:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1619:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    161b:	49                   	dec    ecx
    161c:	13 00                	adc    eax,DWORD PTR [eax]
    161e:	00 09                	add    BYTE PTR [ecx],cl
    1620:	0f 00 0b             	str    WORD PTR [ebx]
    1623:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1626:	00 00                	add    BYTE PTR [eax],al
    1628:	0a 26                	or     ah,BYTE PTR [esi]
    162a:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    162d:	00 00                	add    BYTE PTR [eax],al
    162f:	00 01                	add    BYTE PTR [ecx],al
    1631:	11 01                	adc    DWORD PTR [ecx],eax
    1633:	25 0e 13 0b 03       	and    eax,0x30b130e
    1638:	0e                   	push   cs
    1639:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    163b:	11 01                	adc    DWORD PTR [ecx],eax
    163d:	12 06                	adc    al,BYTE PTR [esi]
    163f:	10 17                	adc    BYTE PTR [edi],dl
    1641:	00 00                	add    BYTE PTR [eax],al
    1643:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1646:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1648:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    164b:	08 00                	or     BYTE PTR [eax],al
    164d:	00 03                	add    BYTE PTR [ebx],al
    164f:	24 00                	and    al,0x0
    1651:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1653:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1656:	0e                   	push   cs
    1657:	00 00                	add    BYTE PTR [eax],al
    1659:	04 2e                	add    al,0x2e
    165b:	01 3f                	add    DWORD PTR [edi],edi
    165d:	19 03                	sbb    DWORD PTR [ebx],eax
    165f:	0e                   	push   cs
    1660:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1662:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1664:	27                   	daa    
    1665:	19 11                	sbb    DWORD PTR [ecx],edx
    1667:	01 12                	add    DWORD PTR [edx],edx
    1669:	06                   	push   es
    166a:	40                   	inc    eax
    166b:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1671:	00 00                	add    BYTE PTR [eax],al
    1673:	05 05 00 03 0e       	add    eax,0xe030005
    1678:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    167a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    167c:	49                   	dec    ecx
    167d:	13 02                	adc    eax,DWORD PTR [edx]
    167f:	18 00                	sbb    BYTE PTR [eax],al
    1681:	00 06                	add    BYTE PTR [esi],al
    1683:	34 00                	xor    al,0x0
    1685:	03 08                	add    ecx,DWORD PTR [eax]
    1687:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1689:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    168b:	49                   	dec    ecx
    168c:	13 02                	adc    eax,DWORD PTR [edx]
    168e:	18 00                	sbb    BYTE PTR [eax],al
    1690:	00 07                	add    BYTE PTR [edi],al
    1692:	0f 00 0b             	str    WORD PTR [ebx]
    1695:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1698:	00 00                	add    BYTE PTR [eax],al
    169a:	08 2e                	or     BYTE PTR [esi],ch
    169c:	01 3f                	add    DWORD PTR [edi],edi
    169e:	19 03                	sbb    DWORD PTR [ebx],eax
    16a0:	0e                   	push   cs
    16a1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    16a3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16a5:	27                   	daa    
    16a6:	19 11                	sbb    DWORD PTR [ecx],edx
    16a8:	01 12                	add    DWORD PTR [edx],edx
    16aa:	06                   	push   es
    16ab:	40                   	inc    eax
    16ac:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
    16b2:	00 01                	add    BYTE PTR [ecx],al
    16b4:	11 01                	adc    DWORD PTR [ecx],eax
    16b6:	25 0e 13 0b 03       	and    eax,0x30b130e
    16bb:	0e                   	push   cs
    16bc:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    16be:	11 01                	adc    DWORD PTR [ecx],eax
    16c0:	12 06                	adc    al,BYTE PTR [esi]
    16c2:	10 17                	adc    BYTE PTR [edi],dl
    16c4:	00 00                	add    BYTE PTR [eax],al
    16c6:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    16c9:	0b 0b                	or     ecx,DWORD PTR [ebx]
    16cb:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    16ce:	08 00                	or     BYTE PTR [eax],al
    16d0:	00 03                	add    BYTE PTR [ebx],al
    16d2:	16                   	push   ss
    16d3:	00 03                	add    BYTE PTR [ebx],al
    16d5:	0e                   	push   cs
    16d6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    16d8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16da:	49                   	dec    ecx
    16db:	13 00                	adc    eax,DWORD PTR [eax]
    16dd:	00 04 24             	add    BYTE PTR [esp],al
    16e0:	00 0b                	add    BYTE PTR [ebx],cl
    16e2:	0b 3e                	or     edi,DWORD PTR [esi]
    16e4:	0b 03                	or     eax,DWORD PTR [ebx]
    16e6:	0e                   	push   cs
    16e7:	00 00                	add    BYTE PTR [eax],al
    16e9:	05 0f 00 0b 0b       	add    eax,0xb0b000f
    16ee:	49                   	dec    ecx
    16ef:	13 00                	adc    eax,DWORD PTR [eax]
    16f1:	00 06                	add    BYTE PTR [esi],al
    16f3:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    16f7:	00 00                	add    BYTE PTR [eax],al
    16f9:	07                   	pop    es
    16fa:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    16fd:	19 03                	sbb    DWORD PTR [ebx],eax
    16ff:	0e                   	push   cs
    1700:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1702:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1704:	27                   	daa    
    1705:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1708:	11 01                	adc    DWORD PTR [ecx],eax
    170a:	12 06                	adc    al,BYTE PTR [esi]
    170c:	40                   	inc    eax
    170d:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1713:	00 00                	add    BYTE PTR [eax],al
    1715:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    171b:	0b 3b                	or     edi,DWORD PTR [ebx]
    171d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1720:	02 18                	add    bl,BYTE PTR [eax]
    1722:	00 00                	add    BYTE PTR [eax],al
    1724:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
    172a:	0b 3b                	or     edi,DWORD PTR [ebx]
    172c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    172f:	02 18                	add    bl,BYTE PTR [eax]
    1731:	00 00                	add    BYTE PTR [eax],al
    1733:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
    1736:	03 0e                	add    ecx,DWORD PTR [esi]
    1738:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    173a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    173c:	49                   	dec    ecx
    173d:	13 02                	adc    eax,DWORD PTR [edx]
    173f:	18 00                	sbb    BYTE PTR [eax],al
    1741:	00 0b                	add    BYTE PTR [ebx],cl
    1743:	34 00                	xor    al,0x0
    1745:	03 0e                	add    ecx,DWORD PTR [esi]
    1747:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1749:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    174b:	49                   	dec    ecx
    174c:	13 3f                	adc    edi,DWORD PTR [edi]
    174e:	19 02                	sbb    DWORD PTR [edx],eax
    1750:	18 00                	sbb    BYTE PTR [eax],al
    1752:	00 00                	add    BYTE PTR [eax],al
    1754:	01 11                	add    DWORD PTR [ecx],edx
    1756:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    175c:	0e                   	push   cs
    175d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    175f:	11 01                	adc    DWORD PTR [ecx],eax
    1761:	12 06                	adc    al,BYTE PTR [esi]
    1763:	10 17                	adc    BYTE PTR [edi],dl
    1765:	00 00                	add    BYTE PTR [eax],al
    1767:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    176a:	0b 0b                	or     ecx,DWORD PTR [ebx]
    176c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    176f:	08 00                	or     BYTE PTR [eax],al
    1771:	00 03                	add    BYTE PTR [ebx],al
    1773:	24 00                	and    al,0x0
    1775:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1777:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    177a:	0e                   	push   cs
    177b:	00 00                	add    BYTE PTR [eax],al
    177d:	04 0f                	add    al,0xf
    177f:	00 0b                	add    BYTE PTR [ebx],cl
    1781:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1784:	00 00                	add    BYTE PTR [eax],al
    1786:	05 2e 01 3f 19       	add    eax,0x193f012e
    178b:	03 0e                	add    ecx,DWORD PTR [esi]
    178d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    178f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1791:	27                   	daa    
    1792:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1795:	11 01                	adc    DWORD PTR [ecx],eax
    1797:	12 06                	adc    al,BYTE PTR [esi]
    1799:	40                   	inc    eax
    179a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    17a0:	00 00                	add    BYTE PTR [eax],al
    17a2:	06                   	push   es
    17a3:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    17a8:	0b 3b                	or     edi,DWORD PTR [ebx]
    17aa:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    17ad:	02 18                	add    bl,BYTE PTR [eax]
    17af:	00 00                	add    BYTE PTR [eax],al
    17b1:	07                   	pop    es
    17b2:	34 00                	xor    al,0x0
    17b4:	03 08                	add    ecx,DWORD PTR [eax]
    17b6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17b8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17ba:	49                   	dec    ecx
    17bb:	13 02                	adc    eax,DWORD PTR [edx]
    17bd:	18 00                	sbb    BYTE PTR [eax],al
    17bf:	00 08                	add    BYTE PTR [eax],cl
    17c1:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    17c5:	00 00                	add    BYTE PTR [eax],al
    17c7:	09 2e                	or     DWORD PTR [esi],ebp
    17c9:	01 3f                	add    DWORD PTR [edi],edi
    17cb:	19 03                	sbb    DWORD PTR [ebx],eax
    17cd:	0e                   	push   cs
    17ce:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17d0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17d2:	27                   	daa    
    17d3:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    17d6:	11 01                	adc    DWORD PTR [ecx],eax
    17d8:	12 06                	adc    al,BYTE PTR [esi]
    17da:	40                   	inc    eax
    17db:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    17e1:	00 00                	add    BYTE PTR [eax],al
    17e3:	0a 01                	or     al,BYTE PTR [ecx]
    17e5:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
    17e8:	01 13                	add    DWORD PTR [ebx],edx
    17ea:	00 00                	add    BYTE PTR [eax],al
    17ec:	0b 21                	or     esp,DWORD PTR [ecx]
    17ee:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    17f1:	2f                   	das    
    17f2:	0b 00                	or     eax,DWORD PTR [eax]
    17f4:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    17f7:	00 03                	add    BYTE PTR [ebx],al
    17f9:	0e                   	push   cs
    17fa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17fc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17fe:	49                   	dec    ecx
    17ff:	13 02                	adc    eax,DWORD PTR [edx]
    1801:	18 00                	sbb    BYTE PTR [eax],al
    1803:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    1809:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    180b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    180d:	49                   	dec    ecx
    180e:	13 3f                	adc    edi,DWORD PTR [edi]
    1810:	19 02                	sbb    DWORD PTR [edx],eax
    1812:	18 00                	sbb    BYTE PTR [eax],al
    1814:	00 00                	add    BYTE PTR [eax],al
    1816:	01 11                	add    DWORD PTR [ecx],edx
    1818:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    181e:	0e                   	push   cs
    181f:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1821:	11 01                	adc    DWORD PTR [ecx],eax
    1823:	12 06                	adc    al,BYTE PTR [esi]
    1825:	10 17                	adc    BYTE PTR [edi],dl
    1827:	00 00                	add    BYTE PTR [eax],al
    1829:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    182c:	03 0e                	add    ecx,DWORD PTR [esi]
    182e:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1830:	49                   	dec    ecx
    1831:	13 3a                	adc    edi,DWORD PTR [edx]
    1833:	0b 3b                	or     edi,DWORD PTR [ebx]
    1835:	0b 01                	or     eax,DWORD PTR [ecx]
    1837:	13 00                	adc    eax,DWORD PTR [eax]
    1839:	00 03                	add    BYTE PTR [ebx],al
    183b:	28 00                	sub    BYTE PTR [eax],al
    183d:	03 0e                	add    ecx,DWORD PTR [esi]
    183f:	1c 0b                	sbb    al,0xb
    1841:	00 00                	add    BYTE PTR [eax],al
    1843:	04 28                	add    al,0x28
    1845:	00 03                	add    BYTE PTR [ebx],al
    1847:	0e                   	push   cs
    1848:	1c 05                	sbb    al,0x5
    184a:	00 00                	add    BYTE PTR [eax],al
    184c:	05 24 00 0b 0b       	add    eax,0xb0b0024
    1851:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1854:	0e                   	push   cs
    1855:	00 00                	add    BYTE PTR [eax],al
    1857:	06                   	push   es
    1858:	24 00                	and    al,0x0
    185a:	0b 0b                	or     ecx,DWORD PTR [ebx]
    185c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    185f:	08 00                	or     BYTE PTR [eax],al
    1861:	00 07                	add    BYTE PTR [edi],al
    1863:	0f 00 0b             	str    WORD PTR [ebx]
    1866:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1869:	00 00                	add    BYTE PTR [eax],al
    186b:	08 16                	or     BYTE PTR [esi],dl
    186d:	00 03                	add    BYTE PTR [ebx],al
    186f:	0e                   	push   cs
    1870:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1872:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1874:	49                   	dec    ecx
    1875:	13 00                	adc    eax,DWORD PTR [eax]
    1877:	00 09                	add    BYTE PTR [ecx],cl
    1879:	13 01                	adc    eax,DWORD PTR [ecx]
    187b:	03 08                	add    ecx,DWORD PTR [eax]
    187d:	0b 0b                	or     ecx,DWORD PTR [ebx]
    187f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1881:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1883:	01 13                	add    DWORD PTR [ebx],edx
    1885:	00 00                	add    BYTE PTR [eax],al
    1887:	0a 0d 00 03 0e 3a    	or     cl,BYTE PTR ds:0x3a0e0300
    188d:	0b 3b                	or     edi,DWORD PTR [ebx]
    188f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1892:	38 0b                	cmp    BYTE PTR [ebx],cl
    1894:	00 00                	add    BYTE PTR [eax],al
    1896:	0b 26                	or     esp,DWORD PTR [esi]
    1898:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    189b:	00 00                	add    BYTE PTR [eax],al
    189d:	0c 2e                	or     al,0x2e
    189f:	01 3f                	add    DWORD PTR [edi],edi
    18a1:	19 03                	sbb    DWORD PTR [ebx],eax
    18a3:	0e                   	push   cs
    18a4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    18a6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    18a8:	49                   	dec    ecx
    18a9:	13 11                	adc    edx,DWORD PTR [ecx]
    18ab:	01 12                	add    DWORD PTR [edx],edx
    18ad:	06                   	push   es
    18ae:	40                   	inc    eax
    18af:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    18b5:	00 00                	add    BYTE PTR [eax],al
    18b7:	0d 34 00 03 0e       	or     eax,0xe030034
    18bc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    18be:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    18c0:	49                   	dec    ecx
    18c1:	13 02                	adc    eax,DWORD PTR [edx]
    18c3:	18 00                	sbb    BYTE PTR [eax],al
    18c5:	00 0e                	add    BYTE PTR [esi],cl
    18c7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    18ca:	19 03                	sbb    DWORD PTR [ebx],eax
    18cc:	0e                   	push   cs
    18cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    18cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    18d1:	27                   	daa    
    18d2:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    18d5:	11 01                	adc    DWORD PTR [ecx],eax
    18d7:	12 06                	adc    al,BYTE PTR [esi]
    18d9:	40                   	inc    eax
    18da:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    18e0:	00 00                	add    BYTE PTR [eax],al
    18e2:	0f 05                	syscall 
    18e4:	00 03                	add    BYTE PTR [ebx],al
    18e6:	0e                   	push   cs
    18e7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    18e9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    18eb:	49                   	dec    ecx
    18ec:	13 02                	adc    eax,DWORD PTR [edx]
    18ee:	18 00                	sbb    BYTE PTR [eax],al
    18f0:	00 10                	add    BYTE PTR [eax],dl
    18f2:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    18f5:	19 03                	sbb    DWORD PTR [ebx],eax
    18f7:	0e                   	push   cs
    18f8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    18fa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    18fc:	27                   	daa    
    18fd:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1900:	11 01                	adc    DWORD PTR [ecx],eax
    1902:	12 06                	adc    al,BYTE PTR [esi]
    1904:	40                   	inc    eax
    1905:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    190b:	00 00                	add    BYTE PTR [eax],al
    190d:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    1910:	03 08                	add    ecx,DWORD PTR [eax]
    1912:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1914:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1916:	49                   	dec    ecx
    1917:	13 02                	adc    eax,DWORD PTR [edx]
    1919:	18 00                	sbb    BYTE PTR [eax],al
    191b:	00 12                	add    BYTE PTR [edx],dl
    191d:	34 00                	xor    al,0x0
    191f:	03 0e                	add    ecx,DWORD PTR [esi]
    1921:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1923:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1925:	49                   	dec    ecx
    1926:	13 3f                	adc    edi,DWORD PTR [edi]
    1928:	19 02                	sbb    DWORD PTR [edx],eax
    192a:	18 00                	sbb    BYTE PTR [eax],al
    192c:	00 13                	add    BYTE PTR [ebx],dl
    192e:	01 01                	add    DWORD PTR [ecx],eax
    1930:	49                   	dec    ecx
    1931:	13 01                	adc    eax,DWORD PTR [ecx]
    1933:	13 00                	adc    eax,DWORD PTR [eax]
    1935:	00 14 21             	add    BYTE PTR [ecx+eiz*1],dl
    1938:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    193b:	2f                   	das    
    193c:	0b 00                	or     eax,DWORD PTR [eax]
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
   c:	00 00                	add    BYTE PTR [eax],al
   e:	00 00                	add    BYTE PTR [eax],al
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
	...
  20:	1c 00                	sbb    al,0x0
  22:	00 00                	add    BYTE PTR [eax],al
  24:	02 00                	add    al,BYTE PTR [eax]
  26:	0d 01 00 00 04       	or     eax,0x4000001
  2b:	00 00                	add    BYTE PTR [eax],al
  2d:	00 00                	add    BYTE PTR [eax],al
  2f:	00 70 00             	add    BYTE PTR [eax+0x0],dh
  32:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
	...
  40:	1c 00                	sbb    al,0x0
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	59                   	pop    ecx
  47:	02 00                	add    al,BYTE PTR [eax]
  49:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  4c:	00 00                	add    BYTE PTR [eax],al
  4e:	00 00                	add    BYTE PTR [eax],al
  50:	1c 01                	sbb    al,0x1
  52:	00 9f 2e 01 00 00    	add    BYTE PTR [edi+0x12e],bl
	...
  60:	1c 00                	sbb    al,0x0
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	99                   	cdq    
  67:	03 00                	add    eax,DWORD PTR [eax]
  69:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	4c                   	dec    esp
  71:	02 00                	add    al,BYTE PTR [eax]
  73:	9f                   	lahf   
  74:	65 02 00             	add    al,BYTE PTR gs:[eax]
	...
  7f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	85 05 00 00 04 00    	test   DWORD PTR ds:0x40000,eax
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	b4 04                	mov    ah,0x4
  92:	00 9f 6e 01 00 00    	add    BYTE PTR [edi+0x16e],bl
	...
  a0:	1c 00                	sbb    al,0x0
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	37                   	aaa    
  a7:	07                   	pop    es
  a8:	00 00                	add    BYTE PTR [eax],al
  aa:	04 00                	add    al,0x0
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	24 06                	and    al,0x6
  b2:	00 9f dd 02 00 00    	add    BYTE PTR [edi+0x2dd],bl
	...
  c0:	1c 00                	sbb    al,0x0
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	49                   	dec    ecx
  c7:	0a 00                	or     al,BYTE PTR [eax]
  c9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  cc:	00 00                	add    BYTE PTR [eax],al
  ce:	00 00                	add    BYTE PTR [eax],al
  d0:	04 09                	add    al,0x9
  d2:	00 9f b8 08 00 00    	add    BYTE PTR [edi+0x8b8],bl
	...
  e0:	1c 00                	sbb    al,0x0
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	8a 13                	mov    dl,BYTE PTR [ebx]
  e8:	00 00                	add    BYTE PTR [eax],al
  ea:	04 00                	add    al,0x0
  ec:	00 00                	add    BYTE PTR [eax],al
  ee:	00 00                	add    BYTE PTR [eax],al
  f0:	bc 11 00 9f 69       	mov    esp,0x699f0011
  f5:	01 00                	add    DWORD PTR [eax],eax
	...
  ff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	25 16 00 00 04       	and    eax,0x4000016
 10b:	00 00                	add    BYTE PTR [eax],al
 10d:	00 00                	add    BYTE PTR [eax],al
 10f:	00 28                	add    BYTE PTR [eax],ch
 111:	13 00                	adc    eax,DWORD PTR [eax]
 113:	9f                   	lahf   
 114:	4d                   	dec    ebp
 115:	0d 00 00 00 00       	or     eax,0x0
 11a:	00 00                	add    BYTE PTR [eax],al
 11c:	00 00                	add    BYTE PTR [eax],al
 11e:	00 00                	add    BYTE PTR [eax],al
 120:	1c 00                	sbb    al,0x0
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	a2 21 00 00 04       	mov    ds:0x4000021,al
 12b:	00 00                	add    BYTE PTR [eax],al
 12d:	00 00                	add    BYTE PTR [eax],al
 12f:	00 78 20             	add    BYTE PTR [eax+0x20],bh
 132:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
	...
 140:	1c 00                	sbb    al,0x0
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	3a 24 00             	cmp    ah,BYTE PTR [eax+eax*1]
 149:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 14c:	00 00                	add    BYTE PTR [eax],al
 14e:	00 00                	add    BYTE PTR [eax],al
 150:	ec                   	in     al,dx
 151:	20 00                	and    BYTE PTR [eax],al
 153:	9f                   	lahf   
 154:	45                   	inc    ebp
 155:	06                   	push   es
	...
 15e:	00 00                	add    BYTE PTR [eax],al
 160:	1c 00                	sbb    al,0x0
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	2a 29                	sub    ch,BYTE PTR [ecx]
 168:	00 00                	add    BYTE PTR [eax],al
 16a:	04 00                	add    al,0x0
 16c:	00 00                	add    BYTE PTR [eax],al
 16e:	00 00                	add    BYTE PTR [eax],al
 170:	34 27                	xor    al,0x27
 172:	00 9f bb 01 00 00    	add    BYTE PTR [edi+0x1bb],bl
	...
 180:	1c 00                	sbb    al,0x0
 182:	00 00                	add    BYTE PTR [eax],al
 184:	02 00                	add    al,BYTE PTR [eax]
 186:	16                   	push   ss
 187:	2b 00                	sub    eax,DWORD PTR [eax]
 189:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 18c:	00 00                	add    BYTE PTR [eax],al
 18e:	00 00                	add    BYTE PTR [eax],al
 190:	f0 28 00             	lock sub BYTE PTR [eax],al
 193:	9f                   	lahf   
 194:	e7 00                	out    0x0,eax
	...
 19e:	00 00                	add    BYTE PTR [eax],al
 1a0:	1c 00                	sbb    al,0x0
 1a2:	00 00                	add    BYTE PTR [eax],al
 1a4:	02 00                	add    al,BYTE PTR [eax]
 1a6:	ba 2c 00 00 04       	mov    edx,0x400002c
 1ab:	00 00                	add    BYTE PTR [eax],al
 1ad:	00 00                	add    BYTE PTR [eax],al
 1af:	00 d8                	add    al,bl
 1b1:	29 00                	sub    DWORD PTR [eax],eax
 1b3:	9f                   	lahf   
 1b4:	57                   	push   edi
	...
 1bd:	00 00                	add    BYTE PTR [eax],al
 1bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 1c2:	00 00                	add    BYTE PTR [eax],al
 1c4:	02 00                	add    al,BYTE PTR [eax]
 1c6:	cf                   	iret   
 1c7:	2e 00 00             	add    BYTE PTR cs:[eax],al
 1ca:	04 00                	add    al,0x0
 1cc:	00 00                	add    BYTE PTR [eax],al
 1ce:	00 00                	add    BYTE PTR [eax],al
 1d0:	30 2a                	xor    BYTE PTR [edx],ch
 1d2:	00 9f 8a 05 00 00    	add    BYTE PTR [edi+0x58a],bl
	...
 1e0:	1c 00                	sbb    al,0x0
 1e2:	00 00                	add    BYTE PTR [eax],al
 1e4:	02 00                	add    al,BYTE PTR [eax]
 1e6:	5c                   	pop    esp
 1e7:	34 00                	xor    al,0x0
 1e9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 1ec:	00 00                	add    BYTE PTR [eax],al
 1ee:	00 00                	add    BYTE PTR [eax],al
 1f0:	bc 2f 00 9f 4b       	mov    esp,0x4b9f002f
 1f5:	07                   	pop    es
	...
 1fe:	00 00                	add    BYTE PTR [eax],al
 200:	1c 00                	sbb    al,0x0
 202:	00 00                	add    BYTE PTR [eax],al
 204:	02 00                	add    al,BYTE PTR [eax]
 206:	1d 38 00 00 04       	sbb    eax,0x4000038
 20b:	00 00                	add    BYTE PTR [eax],al
 20d:	00 00                	add    BYTE PTR [eax],al
 20f:	00 08                	add    BYTE PTR [eax],cl
 211:	37                   	aaa    
 212:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
	...
 220:	1c 00                	sbb    al,0x0
 222:	00 00                	add    BYTE PTR [eax],al
 224:	02 00                	add    al,BYTE PTR [eax]
 226:	fd                   	std    
 227:	38 00                	cmp    BYTE PTR [eax],al
 229:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 22c:	00 00                	add    BYTE PTR [eax],al
 22e:	00 00                	add    BYTE PTR [eax],al
 230:	8c 37                	mov    WORD PTR [edi],?
 232:	00 9f 11 01 00 00    	add    BYTE PTR [edi+0x111],bl
	...
 240:	1c 00                	sbb    al,0x0
 242:	00 00                	add    BYTE PTR [eax],al
 244:	02 00                	add    al,BYTE PTR [eax]
 246:	bd 3a 00 00 04       	mov    ebp,0x400003a
 24b:	00 00                	add    BYTE PTR [eax],al
 24d:	00 00                	add    BYTE PTR [eax],al
 24f:	00 a0 38 00 9f 7b    	add    BYTE PTR [eax+0x7b9f0038],ah
	...
 25d:	00 00                	add    BYTE PTR [eax],al
 25f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 262:	00 00                	add    BYTE PTR [eax],al
 264:	02 00                	add    al,BYTE PTR [eax]
 266:	57                   	push   edi
 267:	3c 00                	cmp    al,0x0
 269:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 26c:	00 00                	add    BYTE PTR [eax],al
 26e:	00 00                	add    BYTE PTR [eax],al
 270:	1c 39                	sbb    al,0x39
 272:	00 9f c7 00 00 00    	add    BYTE PTR [edi+0xc7],bl
	...
 280:	1c 00                	sbb    al,0x0
 282:	00 00                	add    BYTE PTR [eax],al
 284:	02 00                	add    al,BYTE PTR [eax]
 286:	82                   	(bad)  
 287:	3d 00 00 04 00       	cmp    eax,0x40000
 28c:	00 00                	add    BYTE PTR [eax],al
 28e:	00 00                	add    BYTE PTR [eax],al
 290:	e4 39                	in     al,0x39
 292:	00 9f 89 00 00 00    	add    BYTE PTR [edi+0x89],bl
	...
 2a0:	1c 00                	sbb    al,0x0
 2a2:	00 00                	add    BYTE PTR [eax],al
 2a4:	02 00                	add    al,BYTE PTR [eax]
 2a6:	c8 3e 00 00          	enter  0x3e,0x0
 2aa:	04 00                	add    al,0x0
 2ac:	00 00                	add    BYTE PTR [eax],al
 2ae:	00 00                	add    BYTE PTR [eax],al
 2b0:	70 3a                	jo     2ec <sysEnter_Vector-0x12fd14>
 2b2:	00 9f a2 00 00 00    	add    BYTE PTR [edi+0xa2],bl
	...
 2c0:	1c 00                	sbb    al,0x0
 2c2:	00 00                	add    BYTE PTR [eax],al
 2c4:	02 00                	add    al,BYTE PTR [eax]
 2c6:	a0 40 00 00 04       	mov    al,ds:0x4000040
 2cb:	00 00                	add    BYTE PTR [eax],al
 2cd:	00 00                	add    BYTE PTR [eax],al
 2cf:	00 14 3b             	add    BYTE PTR [ebx+edi*1],dl
 2d2:	00 9f ce 00 00 00    	add    BYTE PTR [edi+0xce],bl
	...
 2e0:	1c 00                	sbb    al,0x0
 2e2:	00 00                	add    BYTE PTR [eax],al
 2e4:	02 00                	add    al,BYTE PTR [eax]
 2e6:	82                   	(bad)  
 2e7:	41                   	inc    ecx
 2e8:	00 00                	add    BYTE PTR [eax],al
 2ea:	04 00                	add    al,0x0
 2ec:	00 00                	add    BYTE PTR [eax],al
 2ee:	00 00                	add    BYTE PTR [eax],al
 2f0:	e4 3b                	in     al,0x3b
 2f2:	00 9f 8c 00 00 00    	add    BYTE PTR [edi+0x8c],bl
	...
 300:	1c 00                	sbb    al,0x0
 302:	00 00                	add    BYTE PTR [eax],al
 304:	02 00                	add    al,BYTE PTR [eax]
 306:	76 42                	jbe    34a <sysEnter_Vector-0x12fcb6>
 308:	00 00                	add    BYTE PTR [eax],al
 30a:	04 00                	add    al,0x0
 30c:	00 00                	add    BYTE PTR [eax],al
 30e:	00 00                	add    BYTE PTR [eax],al
 310:	70 3c                	jo     34e <sysEnter_Vector-0x12fcb2>
 312:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
	...
 320:	1c 00                	sbb    al,0x0
 322:	00 00                	add    BYTE PTR [eax],al
 324:	02 00                	add    al,BYTE PTR [eax]
 326:	7b 43                	jnp    36b <sysEnter_Vector-0x12fc95>
 328:	00 00                	add    BYTE PTR [eax],al
 32a:	04 00                	add    al,0x0
 32c:	00 00                	add    BYTE PTR [eax],al
 32e:	00 00                	add    BYTE PTR [eax],al
 330:	f0 3d 00 9f 1d 00    	lock cmp eax,0x1d9f00
	...
 33e:	00 00                	add    BYTE PTR [eax],al
 340:	1c 00                	sbb    al,0x0
 342:	00 00                	add    BYTE PTR [eax],al
 344:	02 00                	add    al,BYTE PTR [eax]
 346:	eb 43                	jmp    38b <sysEnter_Vector-0x12fc75>
 348:	00 00                	add    BYTE PTR [eax],al
 34a:	04 00                	add    al,0x0
 34c:	00 00                	add    BYTE PTR [eax],al
 34e:	00 00                	add    BYTE PTR [eax],al
 350:	10 3e                	adc    BYTE PTR [esi],bh
 352:	00 9f 9c 01 00 00    	add    BYTE PTR [edi+0x19c],bl
	...
 360:	1c 00                	sbb    al,0x0
 362:	00 00                	add    BYTE PTR [eax],al
 364:	02 00                	add    al,BYTE PTR [eax]
 366:	ee                   	out    dx,al
 367:	44                   	inc    esp
 368:	00 00                	add    BYTE PTR [eax],al
 36a:	04 00                	add    al,0x0
 36c:	00 00                	add    BYTE PTR [eax],al
 36e:	00 00                	add    BYTE PTR [eax],al
 370:	ac                   	lods   al,BYTE PTR ds:[esi]
 371:	3f                   	aas    
 372:	00 9f b6 00 00 00    	add    BYTE PTR [edi+0xb6],bl
	...
 380:	1c 00                	sbb    al,0x0
 382:	00 00                	add    BYTE PTR [eax],al
 384:	02 00                	add    al,BYTE PTR [eax]
 386:	b2 45                	mov    dl,0x45
 388:	00 00                	add    BYTE PTR [eax],al
 38a:	04 00                	add    al,0x0
 38c:	00 00                	add    BYTE PTR [eax],al
 38e:	00 00                	add    BYTE PTR [eax],al
 390:	64                   	fs
 391:	40                   	inc    eax
 392:	00 9f 44 01 00 00    	add    BYTE PTR [edi+0x144],bl
	...
 3a0:	1c 00                	sbb    al,0x0
 3a2:	00 00                	add    BYTE PTR [eax],al
 3a4:	02 00                	add    al,BYTE PTR [eax]
 3a6:	7c 47                	jl     3ef <sysEnter_Vector-0x12fc11>
 3a8:	00 00                	add    BYTE PTR [eax],al
 3aa:	04 00                	add    al,0x0
 3ac:	00 00                	add    BYTE PTR [eax],al
 3ae:	00 00                	add    BYTE PTR [eax],al
 3b0:	a8 41                	test   al,0x41
 3b2:	00 9f 29 01 00 00    	add    BYTE PTR [edi+0x129],bl
	...
 3c0:	1c 00                	sbb    al,0x0
 3c2:	00 00                	add    BYTE PTR [eax],al
 3c4:	02 00                	add    al,BYTE PTR [eax]
 3c6:	30 49 00             	xor    BYTE PTR [ecx+0x0],cl
 3c9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 3cc:	00 00                	add    BYTE PTR [eax],al
 3ce:	00 00                	add    BYTE PTR [eax],al
 3d0:	d4 42                	aam    0x42
 3d2:	00 9f 0e 0d 00 00    	add    BYTE PTR [edi+0xd0e],bl
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	75 00                	jne    2 <sysEnter_Vector-0x12fffe>
       2:	00 00                	add    BYTE PTR [eax],al
       4:	02 00                	add    al,BYTE PTR [eax]
       6:	53                   	push   ebx
       7:	00 00                	add    BYTE PTR [eax],al
       9:	00 01                	add    BYTE PTR [ecx],al
       b:	01 fb                	add    ebx,edi
       d:	0e                   	push   cs
       e:	0d 00 01 01 01       	or     eax,0x1010100
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
      1b:	2e                   	cs
      1c:	2e                   	cs
      1d:	2f                   	das    
      1e:	2e                   	cs
      1f:	2e                   	cs
      20:	2f                   	das    
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      25:	6a 2f                	push   0x2f
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      31:	63 2f                	arpl   WORD PTR [edi],bp
      33:	73 74                	jae    a9 <sysEnter_Vector-0x12ff57>
      35:	72 69                	jb     a0 <sysEnter_Vector-0x12ff60>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <sysEnter_Vector-0x12ffc5>
      3b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      42:	00 00                	add    BYTE PTR [eax],al
      44:	73 74                	jae    ba <sysEnter_Vector-0x12ff46>
      46:	72 63                	jb     ab <sysEnter_Vector-0x12ff55>
      48:	68 72 2e 63 00       	push   0x632e72
      4d:	01 00                	add    DWORD PTR [eax],eax
      4f:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
      52:	6d                   	ins    DWORD PTR es:[edi],dx
      53:	6d                   	ins    DWORD PTR es:[edi],dx
      54:	6f                   	outs   dx,DWORD PTR ds:[esi]
      55:	6e                   	outs   dx,BYTE PTR ds:[esi]
      56:	2e                   	cs
      57:	68 00 02 00 00       	push   0x200
      5c:	00 00                	add    BYTE PTR [eax],al
      5e:	05 02 00 00 00       	add    eax,0x2
      63:	9f                   	lahf   
      64:	03 09                	add    ecx,DWORD PTR [ecx]
      66:	01 c9                	add    ecx,ecx
      68:	2f                   	das    
      69:	f3 72 cb             	repz jb 37 <sysEnter_Vector-0x12ffc9>
      6c:	3d 31 c9 2f f3       	cmp    eax,0xf32fc931
      71:	72 cb                	jb     3e <sysEnter_Vector-0x12ffc2>
      73:	3d 02 02 00 01       	cmp    eax,0x1000202
      78:	01 a6 00 00 00 02    	add    DWORD PTR [esi+0x2000000],esp
      7e:	00 54 00 00          	add    BYTE PTR [eax+eax*1+0x0],dl
      82:	00 01                	add    BYTE PTR [ecx],al
      84:	01 fb                	add    ebx,edi
      86:	0e                   	push   cs
      87:	0d 00 01 01 01       	or     eax,0x1010100
      8c:	01 00                	add    DWORD PTR [eax],eax
      8e:	00 00                	add    BYTE PTR [eax],al
      90:	01 00                	add    DWORD PTR [eax],eax
      92:	00 01                	add    BYTE PTR [ecx],al
      94:	2e                   	cs
      95:	2e                   	cs
      96:	2f                   	das    
      97:	2e                   	cs
      98:	2e                   	cs
      99:	2f                   	das    
      9a:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      9e:	6a 2f                	push   0x2f
      a0:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      a3:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      aa:	63 2f                	arpl   WORD PTR [edi],bp
      ac:	73 74                	jae    122 <sysEnter_Vector-0x12fede>
      ae:	72 69                	jb     119 <sysEnter_Vector-0x12fee7>
      b0:	6e                   	outs   dx,BYTE PTR ds:[esi]
      b1:	67 73 00             	addr16 jae b4 <sysEnter_Vector-0x12ff4c>
      b4:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      bb:	00 00                	add    BYTE PTR [eax],al
      bd:	73 74                	jae    133 <sysEnter_Vector-0x12fecd>
      bf:	72 63                	jb     124 <sysEnter_Vector-0x12fedc>
      c1:	73 70                	jae    133 <sysEnter_Vector-0x12fecd>
      c3:	6e                   	outs   dx,BYTE PTR ds:[esi]
      c4:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
      c7:	01 00                	add    DWORD PTR [eax],eax
      c9:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
      cc:	6d                   	ins    DWORD PTR es:[edi],dx
      cd:	6d                   	ins    DWORD PTR es:[edi],dx
      ce:	6f                   	outs   dx,DWORD PTR ds:[esi]
      cf:	6e                   	outs   dx,BYTE PTR ds:[esi]
      d0:	2e                   	cs
      d1:	68 00 02 00 00       	push   0x200
      d6:	00 00                	add    BYTE PTR [eax],al
      d8:	05 02 70 00 00       	add    eax,0x7002
      dd:	9f                   	lahf   
      de:	03 26                	add    esp,DWORD PTR [esi]
      e0:	01 e7                	add    edi,esp
      e2:	9f                   	lahf   
      e3:	59                   	pop    ecx
      e4:	75 00                	jne    e6 <sysEnter_Vector-0x12ff1a>
      e6:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
      e9:	aa                   	stos   BYTE PTR es:[edi],al
      ea:	00 02                	add    BYTE PTR [edx],al
      ec:	04 01                	add    al,0x1
      ee:	06                   	push   es
      ef:	3c 00                	cmp    al,0x0
      f1:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
      f4:	06                   	push   es
      f5:	73 00                	jae    f7 <sysEnter_Vector-0x12ff09>
      f7:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
      fa:	06                   	push   es
      fb:	82                   	(bad)  
      fc:	06                   	push   es
      fd:	6d                   	ins    DWORD PTR es:[edi],dx
      fe:	91                   	xchg   ecx,eax
      ff:	4d                   	dec    ebp
     100:	e7 9f                	out    0x9f,eax
     102:	59                   	pop    ecx
     103:	75 00                	jne    105 <sysEnter_Vector-0x12fefb>
     105:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     108:	aa                   	stos   BYTE PTR es:[edi],al
     109:	00 02                	add    BYTE PTR [edx],al
     10b:	04 01                	add    al,0x1
     10d:	06                   	push   es
     10e:	3c 00                	cmp    al,0x0
     110:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     113:	06                   	push   es
     114:	73 00                	jae    116 <sysEnter_Vector-0x12feea>
     116:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     119:	06                   	push   es
     11a:	82                   	(bad)  
     11b:	06                   	push   es
     11c:	6d                   	ins    DWORD PTR es:[edi],dx
     11d:	91                   	xchg   ecx,eax
     11e:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     121:	01 01                	add    DWORD PTR [ecx],eax
     123:	87 00                	xchg   DWORD PTR [eax],eax
     125:	00 00                	add    BYTE PTR [eax],al
     127:	02 00                	add    al,BYTE PTR [eax]
     129:	53                   	push   ebx
     12a:	00 00                	add    BYTE PTR [eax],al
     12c:	00 01                	add    BYTE PTR [ecx],al
     12e:	01 fb                	add    ebx,edi
     130:	0e                   	push   cs
     131:	0d 00 01 01 01       	or     eax,0x1010100
     136:	01 00                	add    DWORD PTR [eax],eax
     138:	00 00                	add    BYTE PTR [eax],al
     13a:	01 00                	add    DWORD PTR [eax],eax
     13c:	00 01                	add    BYTE PTR [ecx],al
     13e:	2e                   	cs
     13f:	2e                   	cs
     140:	2f                   	das    
     141:	2e                   	cs
     142:	2e                   	cs
     143:	2f                   	das    
     144:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     148:	6a 2f                	push   0x2f
     14a:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     14d:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     154:	63 2f                	arpl   WORD PTR [edi],bp
     156:	73 74                	jae    1cc <sysEnter_Vector-0x12fe34>
     158:	72 69                	jb     1c3 <sysEnter_Vector-0x12fe3d>
     15a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     15b:	67 73 00             	addr16 jae 15e <sysEnter_Vector-0x12fea2>
     15e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     165:	00 00                	add    BYTE PTR [eax],al
     167:	73 74                	jae    1dd <sysEnter_Vector-0x12fe23>
     169:	72 74                	jb     1df <sysEnter_Vector-0x12fe21>
     16b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     16c:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     16f:	00 01                	add    BYTE PTR [ecx],al
     171:	00 00                	add    BYTE PTR [eax],al
     173:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     176:	6d                   	ins    DWORD PTR es:[edi],dx
     177:	6f                   	outs   dx,DWORD PTR ds:[esi]
     178:	6e                   	outs   dx,BYTE PTR ds:[esi]
     179:	2e                   	cs
     17a:	68 00 02 00 00       	push   0x200
     17f:	00 00                	add    BYTE PTR [eax],al
     181:	05 02 1c 01 00       	add    eax,0x11c02
     186:	9f                   	lahf   
     187:	03 2a                	add    ebp,DWORD PTR [edx]
     189:	01 f6                	add    esi,esi
     18b:	67 92                	addr16 xchg edx,eax
     18d:	08 2f                	or     BYTE PTR [edi],ch
     18f:	75 08                	jne    199 <sysEnter_Vector-0x12fe67>
     191:	2f                   	das    
     192:	4b                   	dec    ebx
     193:	08 c9                	or     cl,cl
     195:	c9                   	leave  
     196:	08 21                	or     BYTE PTR [ecx],ah
     198:	3d 77 f6 67 92       	cmp    eax,0x9267f677
     19d:	08 2f                	or     BYTE PTR [edi],ch
     19f:	75 08                	jne    1a9 <sysEnter_Vector-0x12fe57>
     1a1:	2f                   	das    
     1a2:	4b                   	dec    ebx
     1a3:	08 c9                	or     cl,cl
     1a5:	c9                   	leave  
     1a6:	08 21                	or     BYTE PTR [ecx],ah
     1a8:	3d 02 07 00 01       	cmp    eax,0x1000702
     1ad:	01 b7 00 00 00 02    	add    DWORD PTR [edi+0x2000000],esi
     1b3:	00 36                	add    BYTE PTR [esi],dh
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	00 01                	add    BYTE PTR [ecx],al
     1b9:	01 fb                	add    ebx,edi
     1bb:	0e                   	push   cs
     1bc:	0d 00 01 01 01       	or     eax,0x1010100
     1c1:	01 00                	add    DWORD PTR [eax],eax
     1c3:	00 00                	add    BYTE PTR [eax],al
     1c5:	01 00                	add    DWORD PTR [eax],eax
     1c7:	00 01                	add    BYTE PTR [ecx],al
     1c9:	73 72                	jae    23d <sysEnter_Vector-0x12fdc3>
     1cb:	63 00                	arpl   WORD PTR [eax],ax
     1cd:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     1d4:	00 00                	add    BYTE PTR [eax],al
     1d6:	61                   	popa   
     1d7:	73 63                	jae    23c <sysEnter_Vector-0x12fdc4>
     1d9:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     1e0:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     1e3:	6d                   	ins    DWORD PTR es:[edi],dx
     1e4:	6d                   	ins    DWORD PTR es:[edi],dx
     1e5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1e6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     1e7:	2e                   	cs
     1e8:	68 00 02 00 00       	push   0x200
     1ed:	00 00                	add    BYTE PTR [eax],al
     1ef:	05 02 4c 02 00       	add    eax,0x24c02
     1f4:	9f                   	lahf   
     1f5:	03 0a                	add    ecx,DWORD PTR [edx]
     1f7:	01 08                	add    DWORD PTR [eax],ecx
     1f9:	16                   	push   ss
     1fa:	00 02                	add    BYTE PTR [edx],al
     1fc:	04 03                	add    al,0x3
     1fe:	08 d7                	or     bh,dl
     200:	00 02                	add    BYTE PTR [edx],al
     202:	04 03                	add    al,0x3
     204:	d7                   	xlat   BYTE PTR ds:[ebx]
     205:	00 02                	add    BYTE PTR [edx],al
     207:	04 03                	add    al,0x3
     209:	08 4b 00             	or     BYTE PTR [ebx+0x0],cl
     20c:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     20f:	d3 00                	rol    DWORD PTR [eax],cl
     211:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     214:	06                   	push   es
     215:	82                   	(bad)  
     216:	06                   	push   es
     217:	87 69 08             	xchg   DWORD PTR [ecx+0x8],ebp
     21a:	15 bb 3d 00 02       	adc    eax,0x2003dbb
     21f:	04 01                	add    al,0x1
     221:	76 00                	jbe    223 <sysEnter_Vector-0x12fddd>
     223:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     226:	02 3b                	add    bh,BYTE PTR [ebx]
     228:	13 08                	adc    ecx,DWORD PTR [eax]
     22a:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     22e:	ad                   	lods   eax,DWORD PTR ds:[esi]
     22f:	d7                   	xlat   BYTE PTR ds:[ebx]
     230:	69 08 15 bb 3d 00    	imul   ecx,DWORD PTR [eax],0x3dbb15
     236:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     239:	76 00                	jbe    23b <sysEnter_Vector-0x12fdc5>
     23b:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     23e:	02 3b                	add    bh,BYTE PTR [ebx]
     240:	13 08                	adc    ecx,DWORD PTR [eax]
     242:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     246:	ad                   	lods   eax,DWORD PTR ds:[esi]
     247:	d7                   	xlat   BYTE PTR ds:[ebx]
     248:	3d 5c f3 78 00       	cmp    eax,0x78f35c
     24d:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     250:	91                   	xchg   ecx,eax
     251:	00 02                	add    BYTE PTR [edx],al
     253:	04 03                	add    al,0x3
     255:	02 24 11             	add    ah,BYTE PTR [ecx+edx*1]
     258:	00 02                	add    BYTE PTR [edx],al
     25a:	04 01                	add    al,0x1
     25c:	06                   	push   es
     25d:	4a                   	dec    edx
     25e:	06                   	push   es
     25f:	e8 3d 31 c9 ad       	call   adc933a1 <tmbuf+0xec8b681>
     264:	02 02                	add    al,BYTE PTR [edx]
     266:	00 01                	add    BYTE PTR [ecx],al
     268:	01 c8                	add    eax,ecx
     26a:	00 00                	add    BYTE PTR [eax],al
     26c:	00 02                	add    BYTE PTR [edx],al
     26e:	00 8f 00 00 00 01    	add    BYTE PTR [edi+0x1000000],cl
     274:	01 fb                	add    ebx,edi
     276:	0e                   	push   cs
     277:	0d 00 01 01 01       	or     eax,0x1010100
     27c:	01 00                	add    DWORD PTR [eax],eax
     27e:	00 00                	add    BYTE PTR [eax],al
     280:	01 00                	add    DWORD PTR [eax],eax
     282:	00 01                	add    BYTE PTR [ecx],al
     284:	73 72                	jae    2f8 <sysEnter_Vector-0x12fd08>
     286:	63 00                	arpl   WORD PTR [eax],ax
     288:	2f                   	das    
     289:	68 6f 6d 65 2f       	push   0x2f656d6f
     28e:	79 6f                	jns    2ff <sysEnter_Vector-0x12fd01>
     290:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     297:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     29a:	73 73                	jae    30f <sysEnter_Vector-0x12fcf1>
     29c:	2f                   	das    
     29d:	6c                   	ins    BYTE PTR es:[edi],dx
     29e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     2a5:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     2ab:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     2b1:	78 2d                	js     2e0 <sysEnter_Vector-0x12fd20>
     2b3:	67 6e                	outs   dx,BYTE PTR ds:[si]
     2b5:	75 2f                	jne    2e6 <sysEnter_Vector-0x12fd1a>
     2b7:	35 2e 33 2e 30       	xor    eax,0x302e332e
     2bc:	2f                   	das    
     2bd:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     2c4:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     2c7:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     2cb:	65 00 00             	add    BYTE PTR gs:[eax],al
     2ce:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     2d1:	73 6f                	jae    342 <sysEnter_Vector-0x12fcbe>
     2d3:	6c                   	ins    BYTE PTR es:[edi],dx
     2d4:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
     2d8:	01 00                	add    DWORD PTR [eax],eax
     2da:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     2dd:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     2e4:	63 
     2e5:	2e                   	cs
     2e6:	68 00 02 00 00       	push   0x200
     2eb:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     2f2:	03 00                	add    eax,DWORD PTR [eax]
     2f4:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     2f7:	6d                   	ins    DWORD PTR es:[edi],dx
     2f8:	6d                   	ins    DWORD PTR es:[edi],dx
     2f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     2fa:	6e                   	outs   dx,BYTE PTR ds:[esi]
     2fb:	2e                   	cs
     2fc:	68 00 03 00 00       	push   0x300
     301:	00 00                	add    BYTE PTR [eax],al
     303:	05 02 b4 04 00       	add    eax,0x4b402
     308:	9f                   	lahf   
     309:	03 0f                	add    ecx,DWORD PTR [edi]
     30b:	01 08                	add    DWORD PTR [eax],ecx
     30d:	24 08                	and    al,0x8
     30f:	59                   	pop    ecx
     310:	08 21                	or     BYTE PTR [ecx],ah
     312:	08 2f                	or     BYTE PTR [edi],ch
     314:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     317:	21 08                	and    DWORD PTR [eax],ecx
     319:	2f                   	das    
     31a:	08 5a 08             	or     BYTE PTR [edx+0x8],bl
     31d:	59                   	pop    ecx
     31e:	69 08 23 08 59 08    	imul   ecx,DWORD PTR [eax],0x8590823
     324:	5a                   	pop    edx
     325:	08 59 69             	or     BYTE PTR [ecx+0x69],bl
     328:	08 23                	or     BYTE PTR [ebx],ah
     32a:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     32d:	5a                   	pop    edx
     32e:	08 59 02             	or     BYTE PTR [ecx+0x2],bl
     331:	06                   	push   es
     332:	00 01                	add    BYTE PTR [ecx],al
     334:	01 4a 01             	add    DWORD PTR [edx+0x1],ecx
     337:	00 00                	add    BYTE PTR [eax],al
     339:	02 00                	add    al,BYTE PTR [eax]
     33b:	d0 00                	rol    BYTE PTR [eax],1
     33d:	00 00                	add    BYTE PTR [eax],al
     33f:	01 01                	add    DWORD PTR [ecx],eax
     341:	fb                   	sti    
     342:	0e                   	push   cs
     343:	0d 00 01 01 01       	or     eax,0x1010100
     348:	01 00                	add    DWORD PTR [eax],eax
     34a:	00 00                	add    BYTE PTR [eax],al
     34c:	01 00                	add    DWORD PTR [eax],eax
     34e:	00 01                	add    BYTE PTR [ecx],al
     350:	73 72                	jae    3c4 <sysEnter_Vector-0x12fc3c>
     352:	63 00                	arpl   WORD PTR [eax],ax
     354:	2f                   	das    
     355:	68 6f 6d 65 2f       	push   0x2f656d6f
     35a:	79 6f                	jns    3cb <sysEnter_Vector-0x12fc35>
     35c:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     363:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     366:	73 73                	jae    3db <sysEnter_Vector-0x12fc25>
     368:	2f                   	das    
     369:	6c                   	ins    BYTE PTR es:[edi],dx
     36a:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     371:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     377:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     37d:	78 2d                	js     3ac <sysEnter_Vector-0x12fc54>
     37f:	67 6e                	outs   dx,BYTE PTR ds:[si]
     381:	75 2f                	jne    3b2 <sysEnter_Vector-0x12fc4e>
     383:	35 2e 33 2e 30       	xor    eax,0x302e332e
     388:	2f                   	das    
     389:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     390:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     393:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     397:	65                   	gs
     398:	2f                   	das    
     399:	2e                   	cs
     39a:	2e                   	cs
     39b:	2f                   	das    
     39c:	2e                   	cs
     39d:	2e                   	cs
     39e:	2f                   	das    
     39f:	2e                   	cs
     3a0:	2e                   	cs
     3a1:	2f                   	das    
     3a2:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     3a6:	6a 2f                	push   0x2f
     3a8:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     3ab:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     3b2:	6e                   	outs   dx,BYTE PTR ds:[esi]
     3b3:	65                   	gs
     3b4:	6c                   	ins    BYTE PTR es:[edi],dx
     3b5:	2f                   	das    
     3b6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     3bd:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     3c0:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     3c4:	65 00 00             	add    BYTE PTR gs:[eax],al
     3c7:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     3c9:	76 69                	jbe    434 <sysEnter_Vector-0x12fbcc>
     3cb:	72 6f                	jb     43c <sysEnter_Vector-0x12fbc4>
     3cd:	6e                   	outs   dx,BYTE PTR ds:[esi]
     3ce:	6d                   	ins    DWORD PTR es:[edi],dx
     3cf:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     3d1:	74 2e                	je     401 <sysEnter_Vector-0x12fbff>
     3d3:	63 00                	arpl   WORD PTR [eax],ax
     3d5:	01 00                	add    DWORD PTR [eax],eax
     3d7:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     3da:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     3e1:	63 
     3e2:	2e                   	cs
     3e3:	68 00 02 00 00       	push   0x200
     3e8:	73 74                	jae    45e <sysEnter_Vector-0x12fba2>
     3ea:	64                   	fs
     3eb:	64                   	fs
     3ec:	65                   	gs
     3ed:	66                   	data16
     3ee:	2e                   	cs
     3ef:	68 00 02 00 00       	push   0x200
     3f4:	73 79                	jae    46f <sysEnter_Vector-0x12fb91>
     3f6:	73 63                	jae    45b <sysEnter_Vector-0x12fba5>
     3f8:	61                   	popa   
     3f9:	6c                   	ins    BYTE PTR es:[edi],dx
     3fa:	6c                   	ins    BYTE PTR es:[edi],dx
     3fb:	73 2e                	jae    42b <sysEnter_Vector-0x12fbd5>
     3fd:	68 00 03 00 00       	push   0x300
     402:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     405:	6d                   	ins    DWORD PTR es:[edi],dx
     406:	6f                   	outs   dx,DWORD PTR ds:[esi]
     407:	6e                   	outs   dx,BYTE PTR ds:[esi]
     408:	2e                   	cs
     409:	68 00 04 00 00       	push   0x400
     40e:	00 00                	add    BYTE PTR [eax],al
     410:	05 02 24 06 00       	add    eax,0x62402
     415:	9f                   	lahf   
     416:	03 09                	add    ecx,DWORD PTR [ecx]
     418:	01 08                	add    DWORD PTR [eax],ecx
     41a:	21 91 02 36 14 02    	and    DWORD PTR [ecx+0x2143602],edx
     420:	39 13                	cmp    DWORD PTR [ebx],edx
     422:	00 02                	add    BYTE PTR [edx],al
     424:	04 02                	add    al,0x2
     426:	7e 00                	jle    428 <sysEnter_Vector-0x12fbd8>
     428:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     42b:	06                   	push   es
     42c:	4a                   	dec    edx
     42d:	06                   	push   es
     42e:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     42f:	59                   	pop    ecx
     430:	5b                   	pop    ebx
     431:	f3 08 13             	repz or BYTE PTR [ebx],dl
     434:	31 08                	xor    DWORD PTR [eax],ecx
     436:	21 76 bb             	and    DWORD PTR [esi-0x45],esi
     439:	08 92 08 4b 02 36    	or     BYTE PTR [edx+0x36024b08],dl
     43f:	14 08                	adc    al,0x8
     441:	f3 02 25 13 08 f3 00 	repz add ah,BYTE PTR ds:0xf30813
     448:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     44b:	03 77 58             	add    esi,DWORD PTR [edi+0x58]
     44e:	00 02                	add    BYTE PTR [edx],al
     450:	04 01                	add    al,0x1
     452:	06                   	push   es
     453:	4a                   	dec    edx
     454:	06                   	push   es
     455:	03 0c 9e             	add    ecx,DWORD PTR [esi+ebx*4]
     458:	bb 08 92 08 9f       	mov    ebx,0x9f089208
     45d:	08 f3                	or     bl,dh
     45f:	02 25 13 08 f3 00    	add    ah,BYTE PTR ds:0xf30813
     465:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     468:	03 79 2e             	add    edi,DWORD PTR [ecx+0x2e]
     46b:	00 02                	add    BYTE PTR [edx],al
     46d:	04 01                	add    al,0x1
     46f:	06                   	push   es
     470:	4a                   	dec    edx
     471:	06                   	push   es
     472:	03 0b                	add    ecx,DWORD PTR [ebx]
     474:	9e                   	sahf   
     475:	5b                   	pop    ebx
     476:	08 13                	or     BYTE PTR [ebx],dl
     478:	08 5a 5b             	or     BYTE PTR [edx+0x5b],bl
     47b:	f3 08 13             	repz or BYTE PTR [ebx],dl
     47e:	02 02                	add    al,BYTE PTR [edx]
     480:	00 01                	add    BYTE PTR [ecx],al
     482:	01 c8                	add    eax,ecx
     484:	01 00                	add    DWORD PTR [eax],eax
     486:	00 02                	add    BYTE PTR [edx],al
     488:	00 d3                	add    bl,dl
     48a:	00 00                	add    BYTE PTR [eax],al
     48c:	00 01                	add    BYTE PTR [ecx],al
     48e:	01 fb                	add    ebx,edi
     490:	0e                   	push   cs
     491:	0d 00 01 01 01       	or     eax,0x1010100
     496:	01 00                	add    DWORD PTR [eax],eax
     498:	00 00                	add    BYTE PTR [eax],al
     49a:	01 00                	add    DWORD PTR [eax],eax
     49c:	00 01                	add    BYTE PTR [ecx],al
     49e:	73 72                	jae    512 <sysEnter_Vector-0x12faee>
     4a0:	63 00                	arpl   WORD PTR [eax],ax
     4a2:	2f                   	das    
     4a3:	68 6f 6d 65 2f       	push   0x2f656d6f
     4a8:	79 6f                	jns    519 <sysEnter_Vector-0x12fae7>
     4aa:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     4b1:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     4b4:	73 73                	jae    529 <sysEnter_Vector-0x12fad7>
     4b6:	2f                   	das    
     4b7:	6c                   	ins    BYTE PTR es:[edi],dx
     4b8:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     4bf:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     4c5:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     4cb:	78 2d                	js     4fa <sysEnter_Vector-0x12fb06>
     4cd:	67 6e                	outs   dx,BYTE PTR ds:[si]
     4cf:	75 2f                	jne    500 <sysEnter_Vector-0x12fb00>
     4d1:	35 2e 33 2e 30       	xor    eax,0x302e332e
     4d6:	2f                   	das    
     4d7:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     4de:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     4e1:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     4e5:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     4e9:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     4ed:	65                   	gs
     4ee:	2f                   	das    
     4ef:	2e                   	cs
     4f0:	2e                   	cs
     4f1:	2f                   	das    
     4f2:	2e                   	cs
     4f3:	2e                   	cs
     4f4:	2f                   	das    
     4f5:	2e                   	cs
     4f6:	2e                   	cs
     4f7:	2f                   	das    
     4f8:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     4fc:	6a 2f                	push   0x2f
     4fe:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     501:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     508:	6e                   	outs   dx,BYTE PTR ds:[esi]
     509:	65                   	gs
     50a:	6c                   	ins    BYTE PTR es:[edi],dx
     50b:	2f                   	das    
     50c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     513:	00 00                	add    BYTE PTR [eax],al
     515:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     51c:	01 00                	add    DWORD PTR [eax],eax
     51e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     521:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     528:	63 
     529:	2e                   	cs
     52a:	68 00 02 00 00       	push   0x200
     52f:	73 74                	jae    5a5 <sysEnter_Vector-0x12fa5b>
     531:	64                   	fs
     532:	64                   	fs
     533:	65                   	gs
     534:	66                   	data16
     535:	2e                   	cs
     536:	68 00 02 00 00       	push   0x200
     53b:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     542:	03 00                	add    eax,DWORD PTR [eax]
     544:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     547:	6d                   	ins    DWORD PTR es:[edi],dx
     548:	6d                   	ins    DWORD PTR es:[edi],dx
     549:	6f                   	outs   dx,DWORD PTR ds:[esi]
     54a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     54b:	2e                   	cs
     54c:	68 00 03 00 00       	push   0x300
     551:	73 79                	jae    5cc <sysEnter_Vector-0x12fa34>
     553:	73 63                	jae    5b8 <sysEnter_Vector-0x12fa48>
     555:	61                   	popa   
     556:	6c                   	ins    BYTE PTR es:[edi],dx
     557:	6c                   	ins    BYTE PTR es:[edi],dx
     558:	73 2e                	jae    588 <sysEnter_Vector-0x12fa78>
     55a:	68 00 04 00 00       	push   0x400
     55f:	00 00                	add    BYTE PTR [eax],al
     561:	05 02 04 09 00       	add    eax,0x90402
     566:	9f                   	lahf   
     567:	03 12                	add    edx,DWORD PTR [edx]
     569:	01 08                	add    DWORD PTR [eax],ecx
     56b:	13 08                	adc    ecx,DWORD PTR [eax]
     56d:	a0 5a f3 08 3d       	mov    al,ds:0x3d08f35a
     572:	31 08                	xor    DWORD PTR [eax],ecx
     574:	14 08                	adc    al,0x8
     576:	59                   	pop    ecx
     577:	5b                   	pop    ebx
     578:	f3 08 13             	repz or BYTE PTR [ebx],dl
     57b:	31 08                	xor    DWORD PTR [eax],ecx
     57d:	21 2f                	and    DWORD PTR [edi],ebp
     57f:	08 d5                	or     ch,dl
     581:	bc 08 3d 69 08       	mov    esp,0x8693d08
     586:	2f                   	das    
     587:	75 08                	jne    591 <sysEnter_Vector-0x12fa6f>
     589:	83 67 75 bc          	and    DWORD PTR [edi+0x75],0xffffffbc
     58d:	08 68 02             	or     BYTE PTR [eax+0x2],ch
     590:	26 13 3d 77 08 13 08 	adc    edi,DWORD PTR es:0x8130877
     597:	2f                   	das    
     598:	69 f3 d7 31 e5 08    	imul   esi,ebx,0x8e531d7
     59e:	d7                   	xlat   BYTE PTR ds:[ebx]
     59f:	77 f3                	ja     594 <sysEnter_Vector-0x12fa6c>
     5a1:	08 3d 30 e5 08 d7    	or     BYTE PTR ds:0xd708e530,bh
     5a7:	77 f3                	ja     59c <sysEnter_Vector-0x12fa64>
     5a9:	08 3d 31 08 13 08    	or     BYTE PTR ds:0x8130831,bh
     5af:	75 5b                	jne    60c <sysEnter_Vector-0x12f9f4>
     5b1:	f3 08 3d 30 08 13 08 	repz or BYTE PTR ds:0x8130830,bh
     5b8:	67 5b                	addr16 pop ebx
     5ba:	f3 08 13             	repz or BYTE PTR [ebx],dl
     5bd:	31 08                	xor    DWORD PTR [eax],ecx
     5bf:	75 68                	jne    629 <sysEnter_Vector-0x12f9d7>
     5c1:	77 bb                	ja     57e <sysEnter_Vector-0x12fa82>
     5c3:	08 91 bb 08 91 bb    	or     BYTE PTR [ecx-0x446ef745],dl
     5c9:	08 91 bb 08 95 67    	or     BYTE PTR [ecx+0x679508bb],dl
     5cf:	08 bc ae 08 84 08 84 	or     BYTE PTR [esi+ebp*4-0x7bf77bf8],bh
     5d6:	a0 08 67 08 4c       	mov    al,ds:0x4c086708
     5db:	08 13                	or     BYTE PTR [ebx],dl
     5dd:	be 08 67 e5 08       	mov    esi,0x8e56708
     5e2:	e6 75                	out    0x75,al
     5e4:	5a                   	pop    edx
     5e5:	08 67 08             	or     BYTE PTR [edi+0x8],ah
     5e8:	d7                   	xlat   BYTE PTR ds:[ebx]
     5e9:	08 9f 08 67 08 9f    	or     BYTE PTR [edi-0x60f798f8],bl
     5ef:	68 08 67 75 30       	push   0x30756708
     5f4:	03 73 08             	add    esi,DWORD PTR [ebx+0x8]
     5f7:	3c 03                	cmp    al,0x3
     5f9:	10 9e a0 08 bb 08    	adc    BYTE PTR [esi+0x8bb08a0],bl
     5ff:	9f                   	lahf   
     600:	08 67 08             	or     BYTE PTR [edi+0x8],ah
     603:	9f                   	lahf   
     604:	68 08 67 79 3d       	push   0x3d796708
     609:	5b                   	pop    ebx
     60a:	08 13                	or     BYTE PTR [ebx],dl
     60c:	08 2f                	or     BYTE PTR [edi],ch
     60e:	5b                   	pop    ebx
     60f:	f3 d7                	repz xlat BYTE PTR ds:[ebx]
     611:	31 08                	xor    DWORD PTR [eax],ecx
     613:	22 75 75             	and    dh,BYTE PTR [ebp+0x75]
     616:	75 83                	jne    59b <sysEnter_Vector-0x12fa65>
     618:	83 08 13             	or     DWORD PTR [eax],0x13
     61b:	76 08                	jbe    625 <sysEnter_Vector-0x12f9db>
     61d:	30 5a 08             	xor    BYTE PTR [edx+0x8],bl
     620:	ca 08 91             	retf   0x9108
     623:	08 d7                	or     bh,dl
     625:	08 91 08 f3 08 d7    	or     BYTE PTR [ecx-0x28f70cf8],dl
     62b:	c9                   	leave  
     62c:	08 83 83 67 67 32    	or     BYTE PTR [ebx+0x32676783],al
     632:	67 67 08 21          	addr32 or BYTE PTR [bx+di],ah
     636:	03 6b 08             	add    ebp,DWORD PTR [ebx+0x8]
     639:	66 03 1a             	add    bx,WORD PTR [edx]
     63c:	02 22                	add    ah,BYTE PTR [edx]
     63e:	01 d7                	add    edi,edx
     640:	3d 5b f3 08 3d       	cmp    eax,0x3d08f35b
     645:	31 08                	xor    DWORD PTR [eax],ecx
     647:	13 08                	adc    ecx,DWORD PTR [eax]
     649:	2f                   	das    
     64a:	02 05 00 01 01 cc    	add    al,BYTE PTR ds:0xcc010100
     650:	00 00                	add    BYTE PTR [eax],al
     652:	00 02                	add    BYTE PTR [edx],al
     654:	00 77 00             	add    BYTE PTR [edi+0x0],dh
     657:	00 00                	add    BYTE PTR [eax],al
     659:	01 01                	add    DWORD PTR [ecx],eax
     65b:	fb                   	sti    
     65c:	0e                   	push   cs
     65d:	0d 00 01 01 01       	or     eax,0x1010100
     662:	01 00                	add    DWORD PTR [eax],eax
     664:	00 00                	add    BYTE PTR [eax],al
     666:	01 00                	add    DWORD PTR [eax],eax
     668:	00 01                	add    BYTE PTR [ecx],al
     66a:	73 72                	jae    6de <sysEnter_Vector-0x12f922>
     66c:	63 2f                	arpl   WORD PTR [edi],bp
     66e:	69 6e 70 75 74 00 69 	imul   ebp,DWORD PTR [esi+0x70],0x69007475
     675:	6e                   	outs   dx,BYTE PTR ds:[esi]
     676:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     67a:	65                   	gs
     67b:	2f                   	das    
     67c:	2e                   	cs
     67d:	2e                   	cs
     67e:	2f                   	das    
     67f:	2e                   	cs
     680:	2e                   	cs
     681:	2f                   	das    
     682:	2e                   	cs
     683:	2e                   	cs
     684:	2f                   	das    
     685:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     689:	6a 2f                	push   0x2f
     68b:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     68e:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     695:	6e                   	outs   dx,BYTE PTR ds:[esi]
     696:	65                   	gs
     697:	6c                   	ins    BYTE PTR es:[edi],dx
     698:	2f                   	das    
     699:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     6a0:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     6a3:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     6a7:	65 00 00             	add    BYTE PTR gs:[eax],al
     6aa:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     6b1:	00 01                	add    BYTE PTR [ecx],al
     6b3:	00 00                	add    BYTE PTR [eax],al
     6b5:	73 79                	jae    730 <sysEnter_Vector-0x12f8d0>
     6b7:	73 63                	jae    71c <sysEnter_Vector-0x12f8e4>
     6b9:	61                   	popa   
     6ba:	6c                   	ins    BYTE PTR es:[edi],dx
     6bb:	6c                   	ins    BYTE PTR es:[edi],dx
     6bc:	73 2e                	jae    6ec <sysEnter_Vector-0x12f914>
     6be:	68 00 02 00 00       	push   0x200
     6c3:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     6c6:	6d                   	ins    DWORD PTR es:[edi],dx
     6c7:	6f                   	outs   dx,DWORD PTR ds:[esi]
     6c8:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6c9:	2e                   	cs
     6ca:	68 00 03 00 00       	push   0x300
     6cf:	00 00                	add    BYTE PTR [eax],al
     6d1:	05 02 bc 11 00       	add    eax,0x11bc02
     6d6:	9f                   	lahf   
     6d7:	03 0f                	add    ecx,DWORD PTR [edi]
     6d9:	01 d7                	add    edi,edx
     6db:	08 3d 4d 08 67 68    	or     BYTE PTR ds:0x6867084d,bh
     6e1:	75 4b                	jne    72e <sysEnter_Vector-0x12f8d2>
     6e3:	08 3d 79 08 16 08    	or     BYTE PTR ds:0x8160879,bh
     6e9:	3d 67 67 9f 30       	cmp    eax,0x309f6767
     6ee:	6a 08                	push   0x8
     6f0:	14 77                	adc    al,0x77
     6f2:	ad                   	lods   eax,DWORD PTR ds:[esi]
     6f3:	68 00 02 04 01       	push   0x1040200
     6f8:	08 67 33             	or     BYTE PTR [edi+0x33],ah
     6fb:	08 3d 00 02 04 01    	or     BYTE PTR ds:0x1040200,bh
     701:	06                   	push   es
     702:	66 06                	pushw  es
     704:	68 ad 68 68 76       	push   0x766868ad
     709:	08 5a 00             	or     BYTE PTR [edx+0x0],bl
     70c:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     70f:	06                   	push   es
     710:	ac                   	lods   al,BYTE PTR ds:[esi]
     711:	06                   	push   es
     712:	68 5b 00 02 04       	push   0x402005b
     717:	02 a3 2f 02 05 00    	add    ah,BYTE PTR [ebx+0x5022f]
     71d:	01 01                	add    DWORD PTR [ecx],eax
     71f:	aa                   	stos   BYTE PTR es:[edi],al
     720:	02 00                	add    al,BYTE PTR [eax]
     722:	00 02                	add    BYTE PTR [edx],al
     724:	00 e5                	add    ch,ah
     726:	00 00                	add    BYTE PTR [eax],al
     728:	00 01                	add    BYTE PTR [ecx],al
     72a:	01 fb                	add    ebx,edi
     72c:	0e                   	push   cs
     72d:	0d 00 01 01 01       	or     eax,0x1010100
     732:	01 00                	add    DWORD PTR [eax],eax
     734:	00 00                	add    BYTE PTR [eax],al
     736:	01 00                	add    DWORD PTR [eax],eax
     738:	00 01                	add    BYTE PTR [ecx],al
     73a:	73 72                	jae    7ae <sysEnter_Vector-0x12f852>
     73c:	63 00                	arpl   WORD PTR [eax],ax
     73e:	2f                   	das    
     73f:	68 6f 6d 65 2f       	push   0x2f656d6f
     744:	79 6f                	jns    7b5 <sysEnter_Vector-0x12f84b>
     746:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     74d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     750:	73 73                	jae    7c5 <sysEnter_Vector-0x12f83b>
     752:	2f                   	das    
     753:	6c                   	ins    BYTE PTR es:[edi],dx
     754:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     75b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     761:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     767:	78 2d                	js     796 <sysEnter_Vector-0x12f86a>
     769:	67 6e                	outs   dx,BYTE PTR ds:[si]
     76b:	75 2f                	jne    79c <sysEnter_Vector-0x12f864>
     76d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     772:	2f                   	das    
     773:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     77a:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     77d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     781:	65                   	gs
     782:	2f                   	das    
     783:	2e                   	cs
     784:	2e                   	cs
     785:	2f                   	das    
     786:	2e                   	cs
     787:	2e                   	cs
     788:	2f                   	das    
     789:	2e                   	cs
     78a:	2e                   	cs
     78b:	2f                   	das    
     78c:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     790:	6a 2f                	push   0x2f
     792:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     795:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     79c:	6e                   	outs   dx,BYTE PTR ds:[esi]
     79d:	65                   	gs
     79e:	6c                   	ins    BYTE PTR es:[edi],dx
     79f:	2f                   	das    
     7a0:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     7a7:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     7aa:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     7ae:	65 00 00             	add    BYTE PTR gs:[eax],al
     7b1:	6c                   	ins    BYTE PTR es:[edi],dx
     7b2:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     7b9:	4f                   	dec    edi
     7ba:	53                   	push   ebx
     7bb:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     7be:	01 00                	add    DWORD PTR [eax],eax
     7c0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     7c3:	64                   	fs
     7c4:	61                   	popa   
     7c5:	72 67                	jb     82e <sysEnter_Vector-0x12f7d2>
     7c7:	2e                   	cs
     7c8:	68 00 02 00 00       	push   0x200
     7cd:	73 74                	jae    843 <sysEnter_Vector-0x12f7bd>
     7cf:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     7d6:	63 
     7d7:	2e                   	cs
     7d8:	68 00 02 00 00       	push   0x200
     7dd:	73 74                	jae    853 <sysEnter_Vector-0x12f7ad>
     7df:	64                   	fs
     7e0:	64                   	fs
     7e1:	65                   	gs
     7e2:	66                   	data16
     7e3:	2e                   	cs
     7e4:	68 00 02 00 00       	push   0x200
     7e9:	73 79                	jae    864 <sysEnter_Vector-0x12f79c>
     7eb:	73 63                	jae    850 <sysEnter_Vector-0x12f7b0>
     7ed:	61                   	popa   
     7ee:	6c                   	ins    BYTE PTR es:[edi],dx
     7ef:	6c                   	ins    BYTE PTR es:[edi],dx
     7f0:	73 2e                	jae    820 <sysEnter_Vector-0x12f7e0>
     7f2:	68 00 03 00 00       	push   0x300
     7f7:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     7fa:	6d                   	ins    DWORD PTR es:[edi],dx
     7fb:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7fc:	6e                   	outs   dx,BYTE PTR ds:[esi]
     7fd:	2e                   	cs
     7fe:	68 00 04 00 00       	push   0x400
     803:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     80a:	04 00                	add    al,0x0
     80c:	00 00                	add    BYTE PTR [eax],al
     80e:	00 05 02 28 13 00    	add    BYTE PTR ds:0x132802,al
     814:	9f                   	lahf   
     815:	03 11                	add    edx,DWORD PTR [ecx]
     817:	01 08                	add    DWORD PTR [eax],ecx
     819:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
     81c:	67 3d 77 08 21 75    	addr16 cmp eax,0x75210877
     822:	08 83 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],al
     828:	75 08                	jne    832 <sysEnter_Vector-0x12f7ce>
     82a:	9f                   	lahf   
     82b:	3d 77 08 21 75       	cmp    eax,0x75210877
     830:	08 bb 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],bh
     836:	75 08                	jne    840 <sysEnter_Vector-0x12f7c0>
     838:	d7                   	xlat   BYTE PTR ds:[ebx]
     839:	3d 77 08 21 08       	cmp    eax,0x8210877
     83e:	67 d8 59 bd          	fcomp  DWORD PTR [bx+di-0x43]
     842:	c9                   	leave  
     843:	c9                   	leave  
     844:	08 67 75             	or     BYTE PTR [edi+0x75],ah
     847:	08 91 08 6a 2d 08    	or     BYTE PTR [ecx+0x82d6a08],dl
     84d:	21 69 08             	and    DWORD PTR [ecx+0x8],ebp
     850:	21 59 59             	and    DWORD PTR [ecx+0x59],ebx
     853:	77 08                	ja     85d <sysEnter_Vector-0x12f7a3>
     855:	22 68 08             	and    ch,BYTE PTR [eax+0x8]
     858:	c9                   	leave  
     859:	08 83 59 5b 08 22    	or     BYTE PTR [ebx+0x22085b59],al
     85f:	68 08 c9 08 83       	push   0x8308c908
     864:	5b                   	pop    ebx
     865:	08 22                	or     BYTE PTR [edx],ah
     867:	68 08 c9 08 83       	push   0x8308c908
     86c:	5b                   	pop    ebx
     86d:	f4                   	hlt    
     86e:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     872:	31 f4                	xor    esp,esi
     874:	68 08 91 5a 31       	push   0x315a9108
     879:	f4                   	hlt    
     87a:	68 08 91 5a 31       	push   0x315a9108
     87f:	08 21                	or     BYTE PTR [ecx],ah
     881:	08 75 02             	or     BYTE PTR [ebp+0x2],dh
     884:	57                   	push   edi
     885:	13 77 08             	adc    esi,DWORD PTR [edi+0x8]
     888:	21 02                	and    DWORD PTR [edx],eax
     88a:	57                   	push   edi
     88b:	13 77 08             	adc    esi,DWORD PTR [edi+0x8]
     88e:	21 02                	and    DWORD PTR [edx],eax
     890:	57                   	push   edi
     891:	14 77                	adc    al,0x77
     893:	c9                   	leave  
     894:	c9                   	leave  
     895:	3f                   	aas    
     896:	c9                   	leave  
     897:	08 83 3f f3 76 c9    	or     BYTE PTR [ebx-0x36890cc1],al
     89d:	3d 31 f3 75 08       	cmp    eax,0x875f331
     8a2:	67 08 83 3d 31       	or     BYTE PTR [bp+di+0x313d],al
     8a7:	08 21                	or     BYTE PTR [ecx],ah
     8a9:	d8 bc 08 31 08 75 68 	fdivr  DWORD PTR [eax+ecx*1+0x68750831]
     8b0:	67 02 22             	add    ah,BYTE PTR [bp+si]
     8b3:	14 08                	adc    al,0x8
     8b5:	ae                   	scas   al,BYTE PTR es:[edi]
     8b6:	4c                   	dec    esp
     8b7:	ca 08 4b             	retf   0x4b08
     8ba:	91                   	xchg   ecx,eax
     8bb:	67 bc 08 83 08 75    	addr16 mov esp,0x75088308
     8c1:	67 02 2f             	add    ch,BYTE PTR [bx]
     8c4:	14 00                	adc    al,0x0
     8c6:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     8c9:	02 31                	add    dh,BYTE PTR [ecx]
     8cb:	13 00                	adc    eax,DWORD PTR [eax]
     8cd:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     8d0:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     8d6:	bb 00 02 04 02       	mov    ebx,0x2040200
     8db:	03 76 4a             	add    esi,DWORD PTR [esi+0x4a]
     8de:	00 02                	add    BYTE PTR [edx],al
     8e0:	04 01                	add    al,0x1
     8e2:	06                   	push   es
     8e3:	4a                   	dec    edx
     8e4:	06                   	push   es
     8e5:	03 0c ba             	add    ecx,DWORD PTR [edx+edi*4]
     8e8:	08 91 08 b0 3f 5b    	or     BYTE PTR [ecx+0x5b3fb008],dl
     8ee:	f3 75 08             	repz jne 8f9 <sysEnter_Vector-0x12f707>
     8f1:	67 08 ad 3d 31       	or     BYTE PTR [di+0x313d],ch
     8f6:	c9                   	leave  
     8f7:	c9                   	leave  
     8f8:	32 c9                	xor    cl,cl
     8fa:	f3 3f                	repz aas 
     8fc:	c9                   	leave  
     8fd:	08 13                	or     BYTE PTR [ebx],dl
     8ff:	31 f5                	xor    ebp,esi
     901:	75 76                	jne    979 <sysEnter_Vector-0x12f687>
     903:	ad                   	lods   eax,DWORD PTR ds:[esi]
     904:	bb 08 68 08 5c       	mov    ebx,0x5c086808
     909:	67 75 91             	addr16 jne 89d <sysEnter_Vector-0x12f763>
     90c:	5a                   	pop    edx
     90d:	75 67                	jne    976 <sysEnter_Vector-0x12f68a>
     90f:	31 67 67             	xor    DWORD PTR [edi+0x67],esp
     912:	08 91 76 31 08 21    	or     BYTE PTR [ecx+0x21083176],dl
     918:	67 08 91 76 03       	or     BYTE PTR [bx+di+0x376],dl
     91d:	66 2e 03 12          	add    dx,WORD PTR cs:[edx]
     921:	3c 44                	cmp    al,0x44
     923:	00 02                	add    BYTE PTR [edx],al
     925:	04 02                	add    al,0x2
     927:	03 61 20             	add    esp,DWORD PTR [ecx+0x20]
     92a:	00 02                	add    BYTE PTR [edx],al
     92c:	04 01                	add    al,0x1
     92e:	06                   	push   es
     92f:	4a                   	dec    edx
     930:	00 02                	add    BYTE PTR [edx],al
     932:	04 03                	add    al,0x3
     934:	82                   	(bad)  
     935:	06                   	push   es
     936:	03 23                	add    esp,DWORD PTR [ebx]
     938:	d6                   	(bad)  
     939:	00 02                	add    BYTE PTR [edx],al
     93b:	04 01                	add    al,0x1
     93d:	06                   	push   es
     93e:	66 06                	pushw  es
     940:	83 08 92             	or     DWORD PTR [eax],0xffffff92
     943:	3d 31 c9 08 13       	cmp    eax,0x1308c931
     948:	31 08                	xor    DWORD PTR [eax],ecx
     94a:	5b                   	pop    ebx
     94b:	08 9f d7 92 08 91    	or     BYTE PTR [edi-0x6ef76d29],bl
     951:	08 23                	or     BYTE PTR [ebx],ah
     953:	08 bb 08 75 00 02    	or     BYTE PTR [ebx+0x2007508],bh
     959:	04 01                	add    al,0x1
     95b:	06                   	push   es
     95c:	66 06                	pushw  es
     95e:	84 67 08             	test   BYTE PTR [edi+0x8],ah
     961:	f3 c9                	repz leave 
     963:	84 4c c9 00          	test   BYTE PTR [ecx+ecx*8+0x0],cl
     967:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     96a:	06                   	push   es
     96b:	66 06                	pushw  es
     96d:	9f                   	lahf   
     96e:	4c                   	dec    esp
     96f:	00 02                	add    BYTE PTR [edx],al
     971:	04 01                	add    al,0x1
     973:	06                   	push   es
     974:	66 06                	pushw  es
     976:	d8 02                	fadd   DWORD PTR [edx]
     978:	27                   	daa    
     979:	13 ad 91 bc 08 83    	adc    ebp,DWORD PTR [ebp-0x7cf7436f]
     97f:	08 bb 00 02 04 01    	or     BYTE PTR [ebx+0x1040200],bh
     985:	06                   	push   es
     986:	9e                   	sahf   
     987:	06                   	push   es
     988:	84 67 08             	test   BYTE PTR [edi+0x8],ah
     98b:	f3 c9                	repz leave 
     98d:	62 5f 03             	bound  ebx,QWORD PTR [edi+0x3]
     990:	79 02                	jns    994 <sysEnter_Vector-0x12f66c>
     992:	34 01                	xor    al,0x1
     994:	03 0c 58             	add    ecx,DWORD PTR [eax+ebx*2]
     997:	08 75 67             	or     BYTE PTR [ebp+0x67],dh
     99a:	02 2f                	add    ch,BYTE PTR [edi]
     99c:	14 02                	adc    al,0x2
     99e:	31 13                	xor    DWORD PTR [ebx],edx
     9a0:	00 02                	add    BYTE PTR [edx],al
     9a2:	04 02                	add    al,0x2
     9a4:	08 bc 00 02 04 02 bb 	or     BYTE PTR [eax+eax*1-0x44fdfbfe],bh
     9ab:	00 02                	add    BYTE PTR [edx],al
     9ad:	04 02                	add    al,0x2
     9af:	03 67 74             	add    esp,DWORD PTR [edi+0x74]
     9b2:	00 02                	add    BYTE PTR [edx],al
     9b4:	04 01                	add    al,0x1
     9b6:	06                   	push   es
     9b7:	4a                   	dec    edx
     9b8:	06                   	push   es
     9b9:	03 1b                	add    ebx,DWORD PTR [ebx]
     9bb:	d6                   	(bad)  
     9bc:	3d 77 f3 08 13       	cmp    eax,0x1308f377
     9c1:	31 c9                	xor    ecx,ecx
     9c3:	08 3d 31 c9 c9 02    	or     BYTE PTR ds:0x2c9c931,bh
     9c9:	03 00                	add    eax,DWORD PTR [eax]
     9cb:	01 01                	add    DWORD PTR [ecx],eax
     9cd:	f7 00 00 00 02 00    	test   DWORD PTR [eax],0x20000
     9d3:	d8 00                	fadd   DWORD PTR [eax]
     9d5:	00 00                	add    BYTE PTR [eax],al
     9d7:	01 01                	add    DWORD PTR [ecx],eax
     9d9:	fb                   	sti    
     9da:	0e                   	push   cs
     9db:	0d 00 01 01 01       	or     eax,0x1010100
     9e0:	01 00                	add    DWORD PTR [eax],eax
     9e2:	00 00                	add    BYTE PTR [eax],al
     9e4:	01 00                	add    DWORD PTR [eax],eax
     9e6:	00 01                	add    BYTE PTR [ecx],al
     9e8:	73 72                	jae    a5c <sysEnter_Vector-0x12f5a4>
     9ea:	63 00                	arpl   WORD PTR [eax],ax
     9ec:	2f                   	das    
     9ed:	68 6f 6d 65 2f       	push   0x2f656d6f
     9f2:	79 6f                	jns    a63 <sysEnter_Vector-0x12f59d>
     9f4:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     9fb:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     9fe:	73 73                	jae    a73 <sysEnter_Vector-0x12f58d>
     a00:	2f                   	das    
     a01:	6c                   	ins    BYTE PTR es:[edi],dx
     a02:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     a09:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     a0f:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     a15:	78 2d                	js     a44 <sysEnter_Vector-0x12f5bc>
     a17:	67 6e                	outs   dx,BYTE PTR ds:[si]
     a19:	75 2f                	jne    a4a <sysEnter_Vector-0x12f5b6>
     a1b:	35 2e 33 2e 30       	xor    eax,0x302e332e
     a20:	2f                   	das    
     a21:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     a28:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     a2b:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     a2f:	65                   	gs
     a30:	2f                   	das    
     a31:	2e                   	cs
     a32:	2e                   	cs
     a33:	2f                   	das    
     a34:	2e                   	cs
     a35:	2e                   	cs
     a36:	2f                   	das    
     a37:	2e                   	cs
     a38:	2e                   	cs
     a39:	2f                   	das    
     a3a:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     a3e:	6a 2f                	push   0x2f
     a40:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     a43:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     a4a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     a4b:	65                   	gs
     a4c:	6c                   	ins    BYTE PTR es:[edi],dx
     a4d:	2f                   	das    
     a4e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     a55:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     a58:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     a5c:	65 00 00             	add    BYTE PTR gs:[eax],al
     a5f:	6c                   	ins    BYTE PTR es:[edi],dx
     a60:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
     a67:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     a6a:	01 00                	add    DWORD PTR [eax],eax
     a6c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     a6f:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     a76:	63 
     a77:	2e                   	cs
     a78:	68 00 02 00 00       	push   0x200
     a7d:	73 74                	jae    af3 <sysEnter_Vector-0x12f50d>
     a7f:	64                   	fs
     a80:	64                   	fs
     a81:	65                   	gs
     a82:	66                   	data16
     a83:	2e                   	cs
     a84:	68 00 02 00 00       	push   0x200
     a89:	73 79                	jae    b04 <sysEnter_Vector-0x12f4fc>
     a8b:	73 63                	jae    af0 <sysEnter_Vector-0x12f510>
     a8d:	61                   	popa   
     a8e:	6c                   	ins    BYTE PTR es:[edi],dx
     a8f:	6c                   	ins    BYTE PTR es:[edi],dx
     a90:	73 2e                	jae    ac0 <sysEnter_Vector-0x12f540>
     a92:	68 00 03 00 00       	push   0x300
     a97:	74 79                	je     b12 <sysEnter_Vector-0x12f4ee>
     a99:	70 65                	jo     b00 <sysEnter_Vector-0x12f500>
     a9b:	73 2e                	jae    acb <sysEnter_Vector-0x12f535>
     a9d:	68 00 04 00 00       	push   0x400
     aa2:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     aa5:	6d                   	ins    DWORD PTR es:[edi],dx
     aa6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     aa7:	6e                   	outs   dx,BYTE PTR ds:[esi]
     aa8:	2e                   	cs
     aa9:	68 00 04 00 00       	push   0x400
     aae:	00 00                	add    BYTE PTR [eax],al
     ab0:	05 02 78 20 00       	add    eax,0x207802
     ab5:	9f                   	lahf   
     ab6:	03 0d 01 08 14 ad    	add    ecx,DWORD PTR ds:0xad140801
     abc:	bb bb bb bb bc       	mov    ebx,0xbcbbbbbb
     ac1:	08 59 02             	or     BYTE PTR [ecx+0x2],bl
     ac4:	05 00 01 01 c9       	add    eax,0xc9010100
     ac9:	01 00                	add    DWORD PTR [eax],eax
     acb:	00 02                	add    BYTE PTR [edx],al
     acd:	00 d7                	add    bh,dl
     acf:	00 00                	add    BYTE PTR [eax],al
     ad1:	00 01                	add    BYTE PTR [ecx],al
     ad3:	01 fb                	add    ebx,edi
     ad5:	0e                   	push   cs
     ad6:	0d 00 01 01 01       	or     eax,0x1010100
     adb:	01 00                	add    DWORD PTR [eax],eax
     add:	00 00                	add    BYTE PTR [eax],al
     adf:	01 00                	add    DWORD PTR [eax],eax
     ae1:	00 01                	add    BYTE PTR [ecx],al
     ae3:	73 72                	jae    b57 <sysEnter_Vector-0x12f4a9>
     ae5:	63 00                	arpl   WORD PTR [eax],ax
     ae7:	2f                   	das    
     ae8:	68 6f 6d 65 2f       	push   0x2f656d6f
     aed:	79 6f                	jns    b5e <sysEnter_Vector-0x12f4a2>
     aef:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     af6:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     af9:	73 73                	jae    b6e <sysEnter_Vector-0x12f492>
     afb:	2f                   	das    
     afc:	6c                   	ins    BYTE PTR es:[edi],dx
     afd:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     b04:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     b0a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     b10:	78 2d                	js     b3f <sysEnter_Vector-0x12f4c1>
     b12:	67 6e                	outs   dx,BYTE PTR ds:[si]
     b14:	75 2f                	jne    b45 <sysEnter_Vector-0x12f4bb>
     b16:	35 2e 33 2e 30       	xor    eax,0x302e332e
     b1b:	2f                   	das    
     b1c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b23:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     b26:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     b2a:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     b2e:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     b32:	65                   	gs
     b33:	2f                   	das    
     b34:	2e                   	cs
     b35:	2e                   	cs
     b36:	2f                   	das    
     b37:	2e                   	cs
     b38:	2e                   	cs
     b39:	2f                   	das    
     b3a:	2e                   	cs
     b3b:	2e                   	cs
     b3c:	2f                   	das    
     b3d:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     b41:	6a 2f                	push   0x2f
     b43:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     b46:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     b4d:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b4e:	65                   	gs
     b4f:	6c                   	ins    BYTE PTR es:[edi],dx
     b50:	2f                   	das    
     b51:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b58:	00 00                	add    BYTE PTR [eax],al
     b5a:	6d                   	ins    DWORD PTR es:[edi],dx
     b5b:	61                   	popa   
     b5c:	6c                   	ins    BYTE PTR es:[edi],dx
     b5d:	6c                   	ins    BYTE PTR es:[edi],dx
     b5e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b5f:	63 2e                	arpl   WORD PTR [esi],bp
     b61:	63 00                	arpl   WORD PTR [eax],ax
     b63:	01 00                	add    DWORD PTR [eax],eax
     b65:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     b68:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     b6f:	63 
     b70:	2e                   	cs
     b71:	68 00 02 00 00       	push   0x200
     b76:	73 74                	jae    bec <sysEnter_Vector-0x12f414>
     b78:	64                   	fs
     b79:	64                   	fs
     b7a:	65                   	gs
     b7b:	66                   	data16
     b7c:	2e                   	cs
     b7d:	68 00 02 00 00       	push   0x200
     b82:	6d                   	ins    DWORD PTR es:[edi],dx
     b83:	61                   	popa   
     b84:	6c                   	ins    BYTE PTR es:[edi],dx
     b85:	6c                   	ins    BYTE PTR es:[edi],dx
     b86:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b87:	63 2e                	arpl   WORD PTR [esi],bp
     b89:	68 00 03 00 00       	push   0x300
     b8e:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     b91:	6d                   	ins    DWORD PTR es:[edi],dx
     b92:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b93:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b94:	2e                   	cs
     b95:	68 00 03 00 00       	push   0x300
     b9a:	73 79                	jae    c15 <sysEnter_Vector-0x12f3eb>
     b9c:	73 63                	jae    c01 <sysEnter_Vector-0x12f3ff>
     b9e:	61                   	popa   
     b9f:	6c                   	ins    BYTE PTR es:[edi],dx
     ba0:	6c                   	ins    BYTE PTR es:[edi],dx
     ba1:	73 2e                	jae    bd1 <sysEnter_Vector-0x12f42f>
     ba3:	68 00 04 00 00       	push   0x400
     ba8:	00 00                	add    BYTE PTR [eax],al
     baa:	05 02 ec 20 00       	add    eax,0x20ec02
     baf:	9f                   	lahf   
     bb0:	03 15 01 08 21 02    	add    edx,DWORD PTR ds:0x2210801
     bb6:	24 13                	and    al,0x13
     bb8:	bb bb bc 69 f5       	mov    ebx,0xf569bcbb
     bbd:	92                   	xchg   edx,eax
     bbe:	08 85 08 67 00 02    	or     BYTE PTR [ebp+0x2006708],al
     bc4:	04 01                	add    al,0x1
     bc6:	06                   	push   es
     bc7:	66 06                	pushw  es
     bc9:	bc f5 91 76 5b       	mov    esp,0x5b7691f5
     bce:	59                   	pop    ecx
     bcf:	31 08                	xor    DWORD PTR [eax],ecx
     bd1:	15 00 02 04 01       	adc    eax,0x1040200
     bd6:	06                   	push   es
     bd7:	e4 06                	in     al,0x6
     bd9:	e7 68                	out    0x68,eax
     bdb:	93                   	xchg   ebx,eax
     bdc:	ca 08 3d             	retf   0x3d08
     bdf:	30 03                	xor    BYTE PTR [ebx],al
     be1:	74 90                	je     b73 <sysEnter_Vector-0x12f48d>
     be3:	3f                   	aas    
     be4:	03 0b                	add    ecx,DWORD PTR [ebx]
     be6:	20 5b f3             	and    BYTE PTR [ebx-0xd],bl
     be9:	af                   	scas   eax,DWORD PTR es:[edi]
     bea:	00 02                	add    BYTE PTR [edx],al
     bec:	04 01                	add    al,0x1
     bee:	06                   	push   es
     bef:	d6                   	(bad)  
     bf0:	00 02                	add    BYTE PTR [edx],al
     bf2:	04 02                	add    al,0x2
     bf4:	ac                   	lods   al,BYTE PTR ds:[esi]
     bf5:	06                   	push   es
     bf6:	c9                   	leave  
     bf7:	59                   	pop    ecx
     bf8:	9f                   	lahf   
     bf9:	93                   	xchg   ebx,eax
     bfa:	00 02                	add    BYTE PTR [edx],al
     bfc:	04 01                	add    al,0x1
     bfe:	06                   	push   es
     bff:	c8 00 02 04          	enter  0x200,0x4
     c03:	02 9e 06 ca 59 31    	add    bl,BYTE PTR [esi+0x3159ca06]
     c09:	08 14 67             	or     BYTE PTR [edi+eiz*2],dl
     c0c:	30 08                	xor    BYTE PTR [eax],cl
     c0e:	22 00                	and    al,BYTE PTR [eax]
     c10:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     c13:	08 3e                	or     BYTE PTR [esi],bh
     c15:	30 ca                	xor    dl,cl
     c17:	00 02                	add    BYTE PTR [edx],al
     c19:	04 02                	add    al,0x2
     c1b:	08 3e                	or     BYTE PTR [esi],bh
     c1d:	30 03                	xor    BYTE PTR [ebx],al
     c1f:	72 90                	jb     bb1 <sysEnter_Vector-0x12f44f>
     c21:	00 02                	add    BYTE PTR [edx],al
     c23:	04 01                	add    al,0x1
     c25:	06                   	push   es
     c26:	c8 06 03 11          	enter  0x306,0x11
     c2a:	ac                   	lods   al,BYTE PTR ds:[esi]
     c2b:	69 08 25 75 69 67    	imul   ecx,DWORD PTR [eax],0x67697525
     c31:	75 03                	jne    c36 <sysEnter_Vector-0x12f3ca>
     c33:	0d 08 90 08 13       	or     eax,0x13089008
     c38:	08 91 a0 bb 08 67    	or     BYTE PTR [ecx+0x6708bba0],dl
     c3e:	08 5a 08             	or     BYTE PTR [edx+0x8],bl
     c41:	3d 08 e5 f3 02       	cmp    eax,0x2f3e508
     c46:	26 13 bc ad ad 08 e7 	adc    edi,DWORD PTR es:[ebp+ebp*4+0x8e708ad]
     c4d:	08 
     c4e:	e5 ad                	in     eax,0xad
     c50:	91                   	xchg   ecx,eax
     c51:	91                   	xchg   ecx,eax
     c52:	75 08                	jne    c5c <sysEnter_Vector-0x12f3a4>
     c54:	13 a0 bb bd 08 e5    	adc    esp,DWORD PTR [eax-0x1af74245]
     c5a:	91                   	xchg   ecx,eax
     c5b:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
     c5e:	91                   	xchg   ecx,eax
     c5f:	91                   	xchg   ecx,eax
     c60:	3d 5b f3 d7 31       	cmp    eax,0x31d7f35b
     c65:	08 22                	or     BYTE PTR [edx],ah
     c67:	08 93 68 92 67 08    	or     BYTE PTR [ebx+0x8679268],dl
     c6d:	67 00 02             	add    BYTE PTR [bp+si],al
     c70:	04 01                	add    al,0x1
     c72:	06                   	push   es
     c73:	66 06                	pushw  es
     c75:	ad                   	lods   eax,DWORD PTR ds:[esi]
     c76:	84 67 77             	test   BYTE PTR [edi+0x77],ah
     c79:	08 13                	or     BYTE PTR [ebx],dl
     c7b:	02 24 17             	add    ah,BYTE PTR [edi+edx*1]
     c7e:	08 e5                	or     ch,ah
     c80:	08 93 d7 3d 5b f3    	or     BYTE PTR [ebx-0xca4c229],dl
     c86:	08 13                	or     BYTE PTR [ebx],dl
     c88:	31 f3                	xor    ebx,esi
     c8a:	d7                   	xlat   BYTE PTR ds:[ebx]
     c8b:	3f                   	aas    
     c8c:	08 13                	or     BYTE PTR [ebx],dl
     c8e:	08 9f 02 06 00 01    	or     BYTE PTR [edi+0x1000602],bl
     c94:	01 d7                	add    edi,edx
     c96:	00 00                	add    BYTE PTR [eax],al
     c98:	00 02                	add    BYTE PTR [edx],al
     c9a:	00 90 00 00 00 01    	add    BYTE PTR [eax+0x1000000],dl
     ca0:	01 fb                	add    ebx,edi
     ca2:	0e                   	push   cs
     ca3:	0d 00 01 01 01       	or     eax,0x1010100
     ca8:	01 00                	add    DWORD PTR [eax],eax
     caa:	00 00                	add    BYTE PTR [eax],al
     cac:	01 00                	add    DWORD PTR [eax],eax
     cae:	00 01                	add    BYTE PTR [ecx],al
     cb0:	73 72                	jae    d24 <sysEnter_Vector-0x12f2dc>
     cb2:	63 00                	arpl   WORD PTR [eax],ax
     cb4:	2f                   	das    
     cb5:	68 6f 6d 65 2f       	push   0x2f656d6f
     cba:	79 6f                	jns    d2b <sysEnter_Vector-0x12f2d5>
     cbc:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     cc3:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     cc6:	73 73                	jae    d3b <sysEnter_Vector-0x12f2c5>
     cc8:	2f                   	das    
     cc9:	6c                   	ins    BYTE PTR es:[edi],dx
     cca:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     cd1:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     cd7:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     cdd:	78 2d                	js     d0c <sysEnter_Vector-0x12f2f4>
     cdf:	67 6e                	outs   dx,BYTE PTR ds:[si]
     ce1:	75 2f                	jne    d12 <sysEnter_Vector-0x12f2ee>
     ce3:	35 2e 33 2e 30       	xor    eax,0x302e332e
     ce8:	2f                   	das    
     ce9:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     cf0:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     cf3:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     cf7:	65 00 00             	add    BYTE PTR gs:[eax],al
     cfa:	6d                   	ins    DWORD PTR es:[edi],dx
     cfb:	65                   	gs
     cfc:	6d                   	ins    DWORD PTR es:[edi],dx
     cfd:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     d00:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     d03:	01 00                	add    DWORD PTR [eax],eax
     d05:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     d08:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     d0f:	63 
     d10:	2e                   	cs
     d11:	68 00 02 00 00       	push   0x200
     d16:	73 74                	jae    d8c <sysEnter_Vector-0x12f274>
     d18:	64                   	fs
     d19:	64                   	fs
     d1a:	65                   	gs
     d1b:	66                   	data16
     d1c:	2e                   	cs
     d1d:	68 00 02 00 00       	push   0x200
     d22:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     d25:	6d                   	ins    DWORD PTR es:[edi],dx
     d26:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d27:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d28:	2e                   	cs
     d29:	68 00 03 00 00       	push   0x300
     d2e:	00 00                	add    BYTE PTR [eax],al
     d30:	05 02 34 27 00       	add    eax,0x273402
     d35:	9f                   	lahf   
     d36:	03 0b                	add    ecx,DWORD PTR [ebx]
     d38:	01 f5                	add    ebp,esi
     d3a:	d7                   	xlat   BYTE PTR ds:[ebx]
     d3b:	d7                   	xlat   BYTE PTR ds:[ebx]
     d3c:	68 91 67 68 83       	push   0x83686791
     d41:	91                   	xchg   ecx,eax
     d42:	91                   	xchg   ecx,eax
     d43:	2f                   	das    
     d44:	08 1f                	or     BYTE PTR [edi],bl
     d46:	e8 08 57 ca 84       	call   84ca6453 <sysEnter_Vector+0x84b76453>
     d4b:	68 83 67 68 83       	push   0x83686783
     d50:	91                   	xchg   ecx,eax
     d51:	91                   	xchg   ecx,eax
     d52:	2f                   	das    
     d53:	08 1f                	or     BYTE PTR [edi],bl
     d55:	e8 08 57 ca 5c       	call   5cca6462 <sysEnter_Vector+0x5cb76462>
     d5a:	67 68 83 67 67 2f    	addr16 push 0x2f676783
     d60:	08 2d e8 08 65 ca    	or     BYTE PTR ds:0xca6508e8,ch
     d66:	3e                   	ds
     d67:	31 c9                	xor    ecx,ecx
     d69:	08 13                	or     BYTE PTR [ebx],dl
     d6b:	02 02                	add    al,BYTE PTR [edx]
     d6d:	00 01                	add    BYTE PTR [ecx],al
     d6f:	01 ba 00 00 00 02    	add    DWORD PTR [edx+0x2000000],edi
     d75:	00 90 00 00 00 01    	add    BYTE PTR [eax+0x1000000],dl
     d7b:	01 fb                	add    ebx,edi
     d7d:	0e                   	push   cs
     d7e:	0d 00 01 01 01       	or     eax,0x1010100
     d83:	01 00                	add    DWORD PTR [eax],eax
     d85:	00 00                	add    BYTE PTR [eax],al
     d87:	01 00                	add    DWORD PTR [eax],eax
     d89:	00 01                	add    BYTE PTR [ecx],al
     d8b:	73 72                	jae    dff <sysEnter_Vector-0x12f201>
     d8d:	63 00                	arpl   WORD PTR [eax],ax
     d8f:	2f                   	das    
     d90:	68 6f 6d 65 2f       	push   0x2f656d6f
     d95:	79 6f                	jns    e06 <sysEnter_Vector-0x12f1fa>
     d97:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     d9e:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     da1:	73 73                	jae    e16 <sysEnter_Vector-0x12f1ea>
     da3:	2f                   	das    
     da4:	6c                   	ins    BYTE PTR es:[edi],dx
     da5:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     dac:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     db2:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     db8:	78 2d                	js     de7 <sysEnter_Vector-0x12f219>
     dba:	67 6e                	outs   dx,BYTE PTR ds:[si]
     dbc:	75 2f                	jne    ded <sysEnter_Vector-0x12f213>
     dbe:	35 2e 33 2e 30       	xor    eax,0x302e332e
     dc3:	2f                   	das    
     dc4:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     dcb:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     dce:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     dd2:	65 00 00             	add    BYTE PTR gs:[eax],al
     dd5:	6d                   	ins    DWORD PTR es:[edi],dx
     dd6:	65                   	gs
     dd7:	6d                   	ins    DWORD PTR es:[edi],dx
     dd8:	73 65                	jae    e3f <sysEnter_Vector-0x12f1c1>
     dda:	74 2e                	je     e0a <sysEnter_Vector-0x12f1f6>
     ddc:	63 00                	arpl   WORD PTR [eax],ax
     dde:	01 00                	add    DWORD PTR [eax],eax
     de0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     de3:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     dea:	63 
     deb:	2e                   	cs
     dec:	68 00 02 00 00       	push   0x200
     df1:	73 74                	jae    e67 <sysEnter_Vector-0x12f199>
     df3:	64                   	fs
     df4:	64                   	fs
     df5:	65                   	gs
     df6:	66                   	data16
     df7:	2e                   	cs
     df8:	68 00 02 00 00       	push   0x200
     dfd:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     e00:	6d                   	ins    DWORD PTR es:[edi],dx
     e01:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e02:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e03:	2e                   	cs
     e04:	68 00 03 00 00       	push   0x300
     e09:	00 00                	add    BYTE PTR [eax],al
     e0b:	05 02 f0 28 00       	add    eax,0x28f002
     e10:	9f                   	lahf   
     e11:	1a f3                	sbb    dh,bl
     e13:	67 67 08 83 67 08    	addr32 or BYTE PTR [bp+di+0x867],al
     e19:	ca 9f 2f             	retf   0x2f9f
     e1c:	d5 bd                	aad    0xbd
     e1e:	9f                   	lahf   
     e1f:	2f                   	das    
     e20:	f1                   	icebp  
     e21:	bf d5 cb 3d 31       	mov    edi,0x313dcbd5
     e26:	c9                   	leave  
     e27:	08 13                	or     BYTE PTR [ebx],dl
     e29:	02 02                	add    al,BYTE PTR [edx]
     e2b:	00 01                	add    BYTE PTR [ecx],al
     e2d:	01 df                	add    edi,ebx
     e2f:	00 00                	add    BYTE PTR [eax],al
     e31:	00 02                	add    BYTE PTR [edx],al
     e33:	00 c1                	add    cl,al
     e35:	00 00                	add    BYTE PTR [eax],al
     e37:	00 01                	add    BYTE PTR [ecx],al
     e39:	01 fb                	add    ebx,edi
     e3b:	0e                   	push   cs
     e3c:	0d 00 01 01 01       	or     eax,0x1010100
     e41:	01 00                	add    DWORD PTR [eax],eax
     e43:	00 00                	add    BYTE PTR [eax],al
     e45:	01 00                	add    DWORD PTR [eax],eax
     e47:	00 01                	add    BYTE PTR [ecx],al
     e49:	73 72                	jae    ebd <sysEnter_Vector-0x12f143>
     e4b:	63 00                	arpl   WORD PTR [eax],ax
     e4d:	2f                   	das    
     e4e:	68 6f 6d 65 2f       	push   0x2f656d6f
     e53:	79 6f                	jns    ec4 <sysEnter_Vector-0x12f13c>
     e55:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     e5c:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     e5f:	73 73                	jae    ed4 <sysEnter_Vector-0x12f12c>
     e61:	2f                   	das    
     e62:	6c                   	ins    BYTE PTR es:[edi],dx
     e63:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     e6a:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     e70:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     e76:	78 2d                	js     ea5 <sysEnter_Vector-0x12f15b>
     e78:	67 6e                	outs   dx,BYTE PTR ds:[si]
     e7a:	75 2f                	jne    eab <sysEnter_Vector-0x12f155>
     e7c:	35 2e 33 2e 30       	xor    eax,0x302e332e
     e81:	2f                   	das    
     e82:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     e89:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     e8c:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     e90:	65                   	gs
     e91:	2f                   	das    
     e92:	2e                   	cs
     e93:	2e                   	cs
     e94:	2f                   	das    
     e95:	2e                   	cs
     e96:	2e                   	cs
     e97:	2f                   	das    
     e98:	2e                   	cs
     e99:	2e                   	cs
     e9a:	2f                   	das    
     e9b:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     e9f:	6a 2f                	push   0x2f
     ea1:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     ea4:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     eab:	6e                   	outs   dx,BYTE PTR ds:[esi]
     eac:	65                   	gs
     ead:	6c                   	ins    BYTE PTR es:[edi],dx
     eae:	2f                   	das    
     eaf:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     eb6:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     eb9:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     ebd:	65 00 00             	add    BYTE PTR gs:[eax],al
     ec0:	70 69                	jo     f2b <sysEnter_Vector-0x12f0d5>
     ec2:	70 65                	jo     f29 <sysEnter_Vector-0x12f0d7>
     ec4:	5f                   	pop    edi
     ec5:	6c                   	ins    BYTE PTR es:[edi],dx
     ec6:	69 62 2e 63 00 01 00 	imul   esp,DWORD PTR [edx+0x2e],0x10063
     ecd:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     ed0:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     ed7:	63 
     ed8:	2e                   	cs
     ed9:	68 00 02 00 00       	push   0x200
     ede:	73 79                	jae    f59 <sysEnter_Vector-0x12f0a7>
     ee0:	73 63                	jae    f45 <sysEnter_Vector-0x12f0bb>
     ee2:	61                   	popa   
     ee3:	6c                   	ins    BYTE PTR es:[edi],dx
     ee4:	6c                   	ins    BYTE PTR es:[edi],dx
     ee5:	73 2e                	jae    f15 <sysEnter_Vector-0x12f0eb>
     ee7:	68 00 03 00 00       	push   0x300
     eec:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     eef:	6d                   	ins    DWORD PTR es:[edi],dx
     ef0:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ef1:	6e                   	outs   dx,BYTE PTR ds:[esi]
     ef2:	2e                   	cs
     ef3:	68 00 04 00 00       	push   0x400
     ef8:	00 00                	add    BYTE PTR [eax],al
     efa:	05 02 d8 29 00       	add    eax,0x29d802
     eff:	9f                   	lahf   
     f00:	03 0a                	add    ecx,DWORD PTR [edx]
     f02:	01 08                	add    DWORD PTR [eax],ecx
     f04:	13 08                	adc    ecx,DWORD PTR [eax]
     f06:	2f                   	das    
     f07:	5b                   	pop    ebx
     f08:	08 13                	or     BYTE PTR [ebx],dl
     f0a:	08 75 02             	or     BYTE PTR [ebp+0x2],dh
     f0d:	05 00 01 01 4f       	add    eax,0x4f010100
     f12:	01 00                	add    DWORD PTR [eax],eax
     f14:	00 02                	add    BYTE PTR [edx],al
     f16:	00 a8 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ch
     f1c:	01 fb                	add    ebx,edi
     f1e:	0e                   	push   cs
     f1f:	0d 00 01 01 01       	or     eax,0x1010100
     f24:	01 00                	add    DWORD PTR [eax],eax
     f26:	00 00                	add    BYTE PTR [eax],al
     f28:	01 00                	add    DWORD PTR [eax],eax
     f2a:	00 01                	add    BYTE PTR [ecx],al
     f2c:	73 72                	jae    fa0 <sysEnter_Vector-0x12f060>
     f2e:	63 00                	arpl   WORD PTR [eax],ax
     f30:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f37:	00 2f                	add    BYTE PTR [edi],ch
     f39:	68 6f 6d 65 2f       	push   0x2f656d6f
     f3e:	79 6f                	jns    faf <sysEnter_Vector-0x12f051>
     f40:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     f47:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     f4a:	73 73                	jae    fbf <sysEnter_Vector-0x12f041>
     f4c:	2f                   	das    
     f4d:	6c                   	ins    BYTE PTR es:[edi],dx
     f4e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     f55:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     f5b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     f61:	78 2d                	js     f90 <sysEnter_Vector-0x12f070>
     f63:	67 6e                	outs   dx,BYTE PTR ds:[si]
     f65:	75 2f                	jne    f96 <sysEnter_Vector-0x12f06a>
     f67:	35 2e 33 2e 30       	xor    eax,0x302e332e
     f6c:	2f                   	das    
     f6d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f74:	00 00                	add    BYTE PTR [eax],al
     f76:	70 72                	jo     fea <sysEnter_Vector-0x12f016>
     f78:	6f                   	outs   dx,DWORD PTR ds:[esi]
     f79:	63 69 6e             	arpl   WORD PTR [ecx+0x6e],bp
     f7c:	66 6f                	outs   dx,WORD PTR ds:[esi]
     f7e:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     f81:	01 00                	add    DWORD PTR [eax],eax
     f83:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     f86:	6f                   	outs   dx,DWORD PTR ds:[esi]
     f87:	63 69 6e             	arpl   WORD PTR [ecx+0x6e],bp
     f8a:	66 6f                	outs   dx,WORD PTR ds:[esi]
     f8c:	2e                   	cs
     f8d:	68 00 02 00 00       	push   0x200
     f92:	73 74                	jae    1008 <sysEnter_Vector-0x12eff8>
     f94:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     f9b:	63 
     f9c:	2e                   	cs
     f9d:	68 00 03 00 00       	push   0x300
     fa2:	74 69                	je     100d <sysEnter_Vector-0x12eff3>
     fa4:	6d                   	ins    DWORD PTR es:[edi],dx
     fa5:	65                   	gs
     fa6:	2e                   	cs
     fa7:	68 00 02 00 00       	push   0x200
     fac:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     fb3:	02 00                	add    al,BYTE PTR [eax]
     fb5:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     fb8:	6d                   	ins    DWORD PTR es:[edi],dx
     fb9:	6d                   	ins    DWORD PTR es:[edi],dx
     fba:	6f                   	outs   dx,DWORD PTR ds:[esi]
     fbb:	6e                   	outs   dx,BYTE PTR ds:[esi]
     fbc:	2e                   	cs
     fbd:	68 00 02 00 00       	push   0x200
     fc2:	00 00                	add    BYTE PTR [eax],al
     fc4:	05 02 30 2a 00       	add    eax,0x2a3002
     fc9:	9f                   	lahf   
     fca:	03 10                	add    edx,DWORD PTR [eax]
     fcc:	01 08                	add    DWORD PTR [eax],ecx
     fce:	59                   	pop    ecx
     fcf:	f4                   	hlt    
     fd0:	79 08                	jns    fda <sysEnter_Vector-0x12f026>
     fd2:	2f                   	das    
     fd3:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     fd6:	5a                   	pop    edx
     fd7:	08 4b 5a             	or     BYTE PTR [ebx+0x5a],cl
     fda:	08 a1 08 13 84 5a    	or     BYTE PTR [ecx+0x5a841308],ah
     fe0:	bb 5a 08 59 5a       	mov    ebx,0x5a59085a
     fe5:	08 59 5a             	or     BYTE PTR [ecx+0x5a],bl
     fe8:	08 59 5a             	or     BYTE PTR [ecx+0x5a],bl
     feb:	08 59 5a             	or     BYTE PTR [ecx+0x5a],bl
     fee:	08 59 5a             	or     BYTE PTR [ecx+0x5a],bl
     ff1:	08 bb 08 f3 08 e5    	or     BYTE PTR [ebx-0x1af70cf8],bh
     ff7:	08 9f 5a 08 59 08    	or     BYTE PTR [edi+0x859085a],bl
     ffd:	c9                   	leave  
     ffe:	08 f4                	or     ah,dh
    1000:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
    1003:	83 08 59             	or     DWORD PTR [eax],0x59
    1006:	02 2e                	add    ch,BYTE PTR [esi]
    1008:	13 02                	adc    eax,DWORD PTR [edx]
    100a:	39 13                	cmp    DWORD PTR [ebx],edx
    100c:	bd 30 08 59 30       	mov    ebp,0x30590830
    1011:	08 59 22             	or     BYTE PTR [ecx+0x22],bl
    1014:	4b                   	dec    ebx
    1015:	03 49 08             	add    ecx,DWORD PTR [ecx+0x8]
    1018:	3c 03                	cmp    al,0x3
    101a:	39 9e 3e 77 f3 08    	cmp    DWORD PTR [esi+0x8f3773e],ebx
    1020:	2f                   	das    
    1021:	31 08                	xor    DWORD PTR [eax],ecx
    1023:	5b                   	pop    ebx
    1024:	9f                   	lahf   
    1025:	08 5b 08             	or     BYTE PTR [ebx+0x8],bl
    1028:	f6 bc 08 e6 08 83 02 	idiv   BYTE PTR [eax+ecx*1+0x28308e6]
    102f:	24 13                	and    al,0x13
    1031:	08 83 08 f4 08 ad    	or     BYTE PTR [ebx-0x52f70bf8],al
    1037:	a0 08 83 d8 08       	mov    al,ds:0x8d88308
    103c:	ae                   	scas   al,BYTE PTR es:[edi]
    103d:	02 27                	add    ah,BYTE PTR [edi]
    103f:	13 08                	adc    ecx,DWORD PTR [eax]
    1041:	4b                   	dec    ebx
    1042:	08 4b 02             	or     BYTE PTR [ebx+0x2],cl
    1045:	22 13                	and    dl,BYTE PTR [ebx]
    1047:	08 3d 08 75 03 71    	or     BYTE PTR ds:0x71037508,bh
    104d:	ac                   	lods   al,BYTE PTR ds:[esi]
    104e:	00 02                	add    BYTE PTR [edx],al
    1050:	04 02                	add    al,0x2
    1052:	03 78 20             	add    edi,DWORD PTR [eax+0x20]
    1055:	00 02                	add    BYTE PTR [edx],al
    1057:	04 01                	add    al,0x1
    1059:	06                   	push   es
    105a:	4a                   	dec    edx
    105b:	06                   	push   es
    105c:	03 1d ba 02 08 00    	add    ebx,DWORD PTR ds:0x802ba
    1062:	01 01                	add    DWORD PTR [ecx],eax
    1064:	c4 01                	les    eax,FWORD PTR [ecx]
    1066:	00 00                	add    BYTE PTR [eax],al
    1068:	02 00                	add    al,BYTE PTR [eax]
    106a:	81 00 00 00 01 01    	add    DWORD PTR [eax],0x1010000
    1070:	fb                   	sti    
    1071:	0e                   	push   cs
    1072:	0d 00 01 01 01       	or     eax,0x1010100
    1077:	01 00                	add    DWORD PTR [eax],eax
    1079:	00 00                	add    BYTE PTR [eax],al
    107b:	01 00                	add    DWORD PTR [eax],eax
    107d:	00 01                	add    BYTE PTR [ecx],al
    107f:	73 72                	jae    10f3 <sysEnter_Vector-0x12ef0d>
    1081:	63 00                	arpl   WORD PTR [eax],ax
    1083:	2f                   	das    
    1084:	68 6f 6d 65 2f       	push   0x2f656d6f
    1089:	79 6f                	jns    10fa <sysEnter_Vector-0x12ef06>
    108b:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1092:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1095:	73 73                	jae    110a <sysEnter_Vector-0x12eef6>
    1097:	2f                   	das    
    1098:	6c                   	ins    BYTE PTR es:[edi],dx
    1099:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    10a0:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    10a6:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    10ac:	78 2d                	js     10db <sysEnter_Vector-0x12ef25>
    10ae:	67 6e                	outs   dx,BYTE PTR ds:[si]
    10b0:	75 2f                	jne    10e1 <sysEnter_Vector-0x12ef1f>
    10b2:	35 2e 33 2e 30       	xor    eax,0x302e332e
    10b7:	2f                   	das    
    10b8:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    10bf:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    10c2:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    10c6:	65 00 00             	add    BYTE PTR gs:[eax],al
    10c9:	73 70                	jae    113b <sysEnter_Vector-0x12eec5>
    10cb:	72 69                	jb     1136 <sysEnter_Vector-0x12eeca>
    10cd:	6e                   	outs   dx,BYTE PTR ds:[esi]
    10ce:	74 66                	je     1136 <sysEnter_Vector-0x12eeca>
    10d0:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    10d3:	01 00                	add    DWORD PTR [eax],eax
    10d5:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    10d8:	64                   	fs
    10d9:	61                   	popa   
    10da:	72 67                	jb     1143 <sysEnter_Vector-0x12eebd>
    10dc:	2e                   	cs
    10dd:	68 00 02 00 00       	push   0x200
    10e2:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    10e5:	6d                   	ins    DWORD PTR es:[edi],dx
    10e6:	6f                   	outs   dx,DWORD PTR ds:[esi]
    10e7:	6e                   	outs   dx,BYTE PTR ds:[esi]
    10e8:	2e                   	cs
    10e9:	68 00 03 00 00       	push   0x300
    10ee:	00 00                	add    BYTE PTR [eax],al
    10f0:	05 02 bc 2f 00       	add    eax,0x2fbc02
    10f5:	9f                   	lahf   
    10f6:	03 0b                	add    ecx,DWORD PTR [ebx]
    10f8:	01 08                	add    DWORD PTR [eax],ecx
    10fa:	13 76 2f             	adc    esi,DWORD PTR [esi+0x2f]
    10fd:	02 29                	add    ch,BYTE PTR [ecx]
    10ff:	11 08                	adc    DWORD PTR [eax],ecx
    1101:	30 3d 03 12 66 03    	xor    BYTE PTR ds:0x3661203,bh
    1107:	0a 08                	or     cl,BYTE PTR [eax]
    1109:	2e                   	cs
    110a:	91                   	xchg   ecx,eax
    110b:	9f                   	lahf   
    110c:	4b                   	dec    ebx
    110d:	00 02                	add    BYTE PTR [edx],al
    110f:	04 01                	add    al,0x1
    1111:	06                   	push   es
    1112:	66 06                	pushw  es
    1114:	67 9f                	addr16 lahf 
    1116:	00 02                	add    BYTE PTR [edx],al
    1118:	04 01                	add    al,0x1
    111a:	06                   	push   es
    111b:	9e                   	sahf   
    111c:	00 02                	add    BYTE PTR [edx],al
    111e:	04 02                	add    al,0x2
    1120:	74 00                	je     1122 <sysEnter_Vector-0x12eede>
    1122:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1125:	58                   	pop    eax
    1126:	00 02                	add    BYTE PTR [edx],al
    1128:	04 04                	add    al,0x4
    112a:	06                   	push   es
    112b:	3d 00 02 04 04       	cmp    eax,0x4040200
    1130:	4b                   	dec    ebx
    1131:	9f                   	lahf   
    1132:	67 4b                	addr16 dec ebx
    1134:	3d 67 9f 4b 67       	cmp    eax,0x674b9f67
    1139:	9f                   	lahf   
    113a:	4b                   	dec    ebx
    113b:	4d                   	dec    ebp
    113c:	9f                   	lahf   
    113d:	67 67 67 4c          	addr32 addr32 addr16 dec esp
    1141:	75 67                	jne    11aa <sysEnter_Vector-0x12ee56>
    1143:	f5                   	cmc    
    1144:	02 3d 11 68 83 67    	add    bh,BYTE PTR ds:0x67836811
    114a:	67 9f                	addr16 lahf 
    114c:	2f                   	das    
    114d:	b9 ca 67 e5 9f       	mov    ecx,0x9fe567ca
    1152:	67 d7                	xlat   BYTE PTR ds:[bx]
    1154:	67 bb 08 23 9f 2f    	addr16 mov ebx,0x2f9f2308
    115a:	e3 ca                	jecxz  1126 <sysEnter_Vector-0x12eeda>
    115c:	2f                   	das    
    115d:	b9 d8 2f 08 57       	mov    ecx,0x57082fd8
    1162:	ca 2f b9             	retf   0xb92f
    1165:	ca 00 02             	retf   0x200
    1168:	04 01                	add    al,0x1
    116a:	3d 76 03 0e 08       	cmp    eax,0x80e0376
    116f:	20 ad 9f 08 13 5c    	and    BYTE PTR [ebp+0x5c13089f],ch
    1175:	76 91                	jbe    1108 <sysEnter_Vector-0x12eef8>
    1177:	08 d8                	or     al,bl
    1179:	4b                   	dec    ebx
    117a:	30 4b 30             	xor    BYTE PTR [ebx+0x30],cl
    117d:	4b                   	dec    ebx
    117e:	30 4b 30             	xor    BYTE PTR [ebx+0x30],cl
    1181:	4b                   	dec    ebx
    1182:	32 75 08             	xor    dh,BYTE PTR [ebp+0x8]
    1185:	13 08                	adc    ecx,DWORD PTR [eax]
    1187:	13 9f 92 d7 67 3d    	adc    ebx,DWORD PTR [edi+0x3d67d792]
    118d:	4f                   	dec    edi
    118e:	75 9f                	jne    112f <sysEnter_Vector-0x12eed1>
    1190:	91                   	xchg   ecx,eax
    1191:	08 13                	or     BYTE PTR [ebx],dl
    1193:	08 13                	or     BYTE PTR [ebx],dl
    1195:	9f                   	lahf   
    1196:	92                   	xchg   edx,eax
    1197:	d8 67 78             	fsub   DWORD PTR [edi+0x78]
    119a:	75 00                	jne    119c <sysEnter_Vector-0x12ee64>
    119c:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    119f:	06                   	push   es
    11a0:	9e                   	sahf   
    11a1:	00 02                	add    BYTE PTR [edx],al
    11a3:	04 02                	add    al,0x2
    11a5:	9e                   	sahf   
    11a6:	06                   	push   es
    11a7:	9f                   	lahf   
    11a8:	bb 94 76 02 23       	mov    ebx,0x23027694
    11ad:	14 9f                	adc    al,0x9f
    11af:	2f                   	das    
    11b0:	b9 a0 08 59 2f       	mov    ecx,0x2f5908a0
    11b5:	b9 a0 5b d7 67       	mov    ecx,0x67d75ba0
    11ba:	08 30                	or     BYTE PTR [eax],dh
    11bc:	76 9f                	jbe    115d <sysEnter_Vector-0x12eea3>
    11be:	2f                   	das    
    11bf:	b9 d8 00 02 04       	mov    ecx,0x40200d8
    11c4:	03 91 00 02 04 03    	add    edx,DWORD PTR [ecx+0x3040200]
    11ca:	08 65 00             	or     BYTE PTR [ebp+0x0],ah
    11cd:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    11d0:	06                   	push   es
    11d1:	4a                   	dec    edx
    11d2:	06                   	push   es
    11d3:	84 2f                	test   BYTE PTR [edi],ch
    11d5:	b9 d8 5b 67 75       	mov    ecx,0x75675bd8
    11da:	4d                   	dec    ebp
    11db:	ab                   	stos   DWORD PTR es:[edi],eax
    11dc:	08 bd 5b 67 d7 cd    	or     BYTE PTR [ebp-0x322898a5],bh
    11e2:	55                   	push   ebp
    11e3:	d7                   	xlat   BYTE PTR ds:[ebx]
    11e4:	ca 5b bb             	retf   0xbb5b
    11e7:	5c                   	pop    esp
    11e8:	75 31                	jne    121b <sysEnter_Vector-0x12ede5>
    11ea:	4c                   	dec    esp
    11eb:	75 32                	jne    121f <sysEnter_Vector-0x12ede1>
    11ed:	4c                   	dec    esp
    11ee:	31 bb 9f 08 15 57    	xor    DWORD PTR [ebx+0x5715089f],edi
    11f4:	91                   	xchg   ecx,eax
    11f5:	03 78 58             	add    edi,DWORD PTR [eax+0x58]
    11f8:	03 0a                	add    ecx,DWORD PTR [edx]
    11fa:	20 67 f3             	and    BYTE PTR [edi-0xd],ah
    11fd:	67 08 2f             	or     BYTE PTR [bx],ch
    1200:	9f                   	lahf   
    1201:	91                   	xchg   ecx,eax
    1202:	9f                   	lahf   
    1203:	f4                   	hlt    
    1204:	d7                   	xlat   BYTE PTR ds:[ebx]
    1205:	00 02                	add    BYTE PTR [edx],al
    1207:	04 02                	add    al,0x2
    1209:	03 e8                	add    ebp,eax
    120b:	7e 08                	jle    1215 <sysEnter_Vector-0x12edeb>
    120d:	f2 00 02             	repnz add BYTE PTR [edx],al
    1210:	04 01                	add    al,0x1
    1212:	06                   	push   es
    1213:	90                   	nop
    1214:	06                   	push   es
    1215:	03 9a 01 d6 67 9f    	add    ebx,DWORD PTR [edx-0x609829ff]
    121b:	5b                   	pop    ebx
    121c:	f6 67 08             	mul    BYTE PTR [edi+0x8]
    121f:	76 3d                	jbe    125e <sysEnter_Vector-0x12eda2>
    1221:	31 f6                	xor    esi,esi
    1223:	67 08 76 3d          	or     BYTE PTR [bp+0x3d],dh
    1227:	02 02                	add    al,BYTE PTR [edx]
    1229:	00 01                	add    BYTE PTR [ecx],al
    122b:	01 57 00             	add    DWORD PTR [edi+0x0],edx
    122e:	00 00                	add    BYTE PTR [eax],al
    1230:	02 00                	add    al,BYTE PTR [eax]
    1232:	36 00 00             	add    BYTE PTR ss:[eax],al
    1235:	00 01                	add    BYTE PTR [ecx],al
    1237:	01 fb                	add    ebx,edi
    1239:	0e                   	push   cs
    123a:	0d 00 01 01 01       	or     eax,0x1010100
    123f:	01 00                	add    DWORD PTR [eax],eax
    1241:	00 00                	add    BYTE PTR [eax],al
    1243:	01 00                	add    DWORD PTR [eax],eax
    1245:	00 01                	add    BYTE PTR [ecx],al
    1247:	73 72                	jae    12bb <sysEnter_Vector-0x12ed45>
    1249:	63 00                	arpl   WORD PTR [eax],ax
    124b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1252:	00 00                	add    BYTE PTR [eax],al
    1254:	73 74                	jae    12ca <sysEnter_Vector-0x12ed36>
    1256:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
    125d:	00 
    125e:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
    1261:	6d                   	ins    DWORD PTR es:[edi],dx
    1262:	6d                   	ins    DWORD PTR es:[edi],dx
    1263:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1264:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1265:	2e                   	cs
    1266:	68 00 02 00 00       	push   0x200
    126b:	00 00                	add    BYTE PTR [eax],al
    126d:	05 02 08 37 00       	add    eax,0x370802
    1272:	9f                   	lahf   
    1273:	03 11                	add    edx,DWORD PTR [ecx]
    1275:	01 08                	add    DWORD PTR [eax],ecx
    1277:	22 76 08             	and    dh,BYTE PTR [esi+0x8]
    127a:	31 d7                	xor    edi,edx
    127c:	d7                   	xlat   BYTE PTR ds:[ebx]
    127d:	d7                   	xlat   BYTE PTR ds:[ebx]
    127e:	d7                   	xlat   BYTE PTR ds:[ebx]
    127f:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1280:	e6 21                	out    0x21,al
    1282:	02 05 00 01 01 bb    	add    al,BYTE PTR ds:0xbb010100
    1288:	00 00                	add    BYTE PTR [eax],al
    128a:	00 02                	add    BYTE PTR [edx],al
    128c:	00 88 00 00 00 01    	add    BYTE PTR [eax+0x1000000],cl
    1292:	01 fb                	add    ebx,edi
    1294:	0e                   	push   cs
    1295:	0d 00 01 01 01       	or     eax,0x1010100
    129a:	01 00                	add    DWORD PTR [eax],eax
    129c:	00 00                	add    BYTE PTR [eax],al
    129e:	01 00                	add    DWORD PTR [eax],eax
    12a0:	00 01                	add    BYTE PTR [ecx],al
    12a2:	73 72                	jae    1316 <sysEnter_Vector-0x12ecea>
    12a4:	63 2f                	arpl   WORD PTR [edi],bp
    12a6:	73 74                	jae    131c <sysEnter_Vector-0x12ece4>
    12a8:	72 69                	jb     1313 <sysEnter_Vector-0x12eced>
    12aa:	6e                   	outs   dx,BYTE PTR ds:[esi]
    12ab:	67 73 00             	addr16 jae 12ae <sysEnter_Vector-0x12ed52>
    12ae:	2f                   	das    
    12af:	68 6f 6d 65 2f       	push   0x2f656d6f
    12b4:	79 6f                	jns    1325 <sysEnter_Vector-0x12ecdb>
    12b6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    12bd:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    12c0:	73 73                	jae    1335 <sysEnter_Vector-0x12eccb>
    12c2:	2f                   	das    
    12c3:	6c                   	ins    BYTE PTR es:[edi],dx
    12c4:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    12cb:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    12d1:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    12d7:	78 2d                	js     1306 <sysEnter_Vector-0x12ecfa>
    12d9:	67 6e                	outs   dx,BYTE PTR ds:[si]
    12db:	75 2f                	jne    130c <sysEnter_Vector-0x12ecf4>
    12dd:	35 2e 33 2e 30       	xor    eax,0x302e332e
    12e2:	2f                   	das    
    12e3:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    12ea:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    12ed:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    12f1:	65 00 00             	add    BYTE PTR gs:[eax],al
    12f4:	73 74                	jae    136a <sysEnter_Vector-0x12ec96>
    12f6:	72 63                	jb     135b <sysEnter_Vector-0x12eca5>
    12f8:	61                   	popa   
    12f9:	74 2e                	je     1329 <sysEnter_Vector-0x12ecd7>
    12fb:	63 00                	arpl   WORD PTR [eax],ax
    12fd:	01 00                	add    DWORD PTR [eax],eax
    12ff:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1302:	64                   	fs
    1303:	64                   	fs
    1304:	65                   	gs
    1305:	66                   	data16
    1306:	2e                   	cs
    1307:	68 00 02 00 00       	push   0x200
    130c:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    130f:	6d                   	ins    DWORD PTR es:[edi],dx
    1310:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1311:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1312:	2e                   	cs
    1313:	68 00 03 00 00       	push   0x300
    1318:	00 00                	add    BYTE PTR [eax],al
    131a:	05 02 8c 37 00       	add    eax,0x378c02
    131f:	9f                   	lahf   
    1320:	03 1e                	add    ebx,DWORD PTR [esi]
    1322:	01 08                	add    DWORD PTR [eax],ecx
    1324:	21 02                	and    DWORD PTR [edx],eax
    1326:	24 13                	and    al,0x13
    1328:	3d 5b 08 21 02       	cmp    eax,0x221085b
    132d:	24 13                	and    al,0x13
    132f:	3d 5b 08 21 75       	cmp    eax,0x7521085b
    1334:	08 14 83             	or     BYTE PTR [ebx+eax*4],dl
    1337:	84 68 02             	test   BYTE PTR [eax+0x2],ch
    133a:	27                   	daa    
    133b:	13 3d 5b f3 08 3d    	adc    edi,DWORD PTR ds:0x3d08f35b
    1341:	02 02                	add    al,BYTE PTR [edx]
    1343:	00 01                	add    BYTE PTR [ecx],al
    1345:	01 b8 00 00 00 02    	add    DWORD PTR [eax+0x2000000],edi
    134b:	00 96 00 00 00 01    	add    BYTE PTR [esi+0x1000000],dl
    1351:	01 fb                	add    ebx,edi
    1353:	0e                   	push   cs
    1354:	0d 00 01 01 01       	or     eax,0x1010100
    1359:	01 00                	add    DWORD PTR [eax],eax
    135b:	00 00                	add    BYTE PTR [eax],al
    135d:	01 00                	add    DWORD PTR [eax],eax
    135f:	00 01                	add    BYTE PTR [ecx],al
    1361:	73 72                	jae    13d5 <sysEnter_Vector-0x12ec2b>
    1363:	63 2f                	arpl   WORD PTR [edi],bp
    1365:	73 74                	jae    13db <sysEnter_Vector-0x12ec25>
    1367:	72 69                	jb     13d2 <sysEnter_Vector-0x12ec2e>
    1369:	6e                   	outs   dx,BYTE PTR ds:[esi]
    136a:	67 73 00             	addr16 jae 136d <sysEnter_Vector-0x12ec93>
    136d:	2f                   	das    
    136e:	68 6f 6d 65 2f       	push   0x2f656d6f
    1373:	79 6f                	jns    13e4 <sysEnter_Vector-0x12ec1c>
    1375:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    137c:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    137f:	73 73                	jae    13f4 <sysEnter_Vector-0x12ec0c>
    1381:	2f                   	das    
    1382:	6c                   	ins    BYTE PTR es:[edi],dx
    1383:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    138a:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1390:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1396:	78 2d                	js     13c5 <sysEnter_Vector-0x12ec3b>
    1398:	67 6e                	outs   dx,BYTE PTR ds:[si]
    139a:	75 2f                	jne    13cb <sysEnter_Vector-0x12ec35>
    139c:	35 2e 33 2e 30       	xor    eax,0x302e332e
    13a1:	2f                   	das    
    13a2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    13a9:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    13ac:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    13b0:	65 00 00             	add    BYTE PTR gs:[eax],al
    13b3:	73 74                	jae    1429 <sysEnter_Vector-0x12ebd7>
    13b5:	72 63                	jb     141a <sysEnter_Vector-0x12ebe6>
    13b7:	6d                   	ins    DWORD PTR es:[edi],dx
    13b8:	70 2e                	jo     13e8 <sysEnter_Vector-0x12ec18>
    13ba:	63 00                	arpl   WORD PTR [eax],ax
    13bc:	01 00                	add    DWORD PTR [eax],eax
    13be:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    13c1:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    13c8:	63 
    13c9:	2e                   	cs
    13ca:	68 00 02 00 00       	push   0x200
    13cf:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    13d2:	6d                   	ins    DWORD PTR es:[edi],dx
    13d3:	6f                   	outs   dx,DWORD PTR ds:[esi]
    13d4:	6e                   	outs   dx,BYTE PTR ds:[esi]
    13d5:	2e                   	cs
    13d6:	68 00 03 00 00       	push   0x300
    13db:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    13e2:	03 00                	add    eax,DWORD PTR [eax]
    13e4:	00 00                	add    BYTE PTR [eax],al
    13e6:	00 05 02 a0 38 00    	add    BYTE PTR ds:0x38a002,al
    13ec:	9f                   	lahf   
    13ed:	03 1a                	add    ebx,DWORD PTR [edx]
    13ef:	01 08                	add    DWORD PTR [eax],ecx
    13f1:	21 3d 41 ad ad 67    	and    DWORD PTR ds:0x67adad41,edi
    13f7:	d8 92 bb 77 c9 d7    	fcom   DWORD PTR [edx-0x28368845]
    13fd:	02 02                	add    al,BYTE PTR [edx]
    13ff:	00 01                	add    BYTE PTR [ecx],al
    1401:	01 6b 00             	add    DWORD PTR [ebx+0x0],ebp
    1404:	00 00                	add    BYTE PTR [eax],al
    1406:	02 00                	add    al,BYTE PTR [eax]
    1408:	2b 00                	sub    eax,DWORD PTR [eax]
    140a:	00 00                	add    BYTE PTR [eax],al
    140c:	01 01                	add    DWORD PTR [ecx],eax
    140e:	fb                   	sti    
    140f:	0e                   	push   cs
    1410:	0d 00 01 01 01       	or     eax,0x1010100
    1415:	01 00                	add    DWORD PTR [eax],eax
    1417:	00 00                	add    BYTE PTR [eax],al
    1419:	01 00                	add    DWORD PTR [eax],eax
    141b:	00 01                	add    BYTE PTR [ecx],al
    141d:	73 72                	jae    1491 <sysEnter_Vector-0x12eb6f>
    141f:	63 2f                	arpl   WORD PTR [edi],bp
    1421:	73 74                	jae    1497 <sysEnter_Vector-0x12eb69>
    1423:	72 69                	jb     148e <sysEnter_Vector-0x12eb72>
    1425:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1426:	67 73 00             	addr16 jae 1429 <sysEnter_Vector-0x12ebd7>
    1429:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    142c:	72 63                	jb     1491 <sysEnter_Vector-0x12eb6f>
    142e:	70 79                	jo     14a9 <sysEnter_Vector-0x12eb57>
    1430:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1433:	01 00                	add    DWORD PTR [eax],eax
    1435:	00 00                	add    BYTE PTR [eax],al
    1437:	00 05 02 1c 39 00    	add    BYTE PTR ds:0x391c02,al
    143d:	9f                   	lahf   
    143e:	16                   	push   ss
    143f:	f3 67 00 02          	repz add BYTE PTR [bp+si],al
    1443:	04 01                	add    al,0x1
    1445:	06                   	push   es
    1446:	20 06                	and    BYTE PTR [esi],al
    1448:	08 ca                	or     dl,cl
    144a:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    1450:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1453:	06                   	push   es
    1454:	20 06                	and    BYTE PTR [esi],al
    1456:	08 ca                	or     dl,cl
    1458:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    145e:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    1461:	06                   	push   es
    1462:	20 00                	and    BYTE PTR [eax],al
    1464:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1467:	08 c8                	or     al,cl
    1469:	06                   	push   es
    146a:	ca 3d 02             	retf   0x23d
    146d:	02 00                	add    al,BYTE PTR [eax]
    146f:	01 01                	add    DWORD PTR [ecx],eax
    1471:	c5 00                	lds    eax,FWORD PTR [eax]
    1473:	00 00                	add    BYTE PTR [eax],al
    1475:	02 00                	add    al,BYTE PTR [eax]
    1477:	98                   	cwde   
    1478:	00 00                	add    BYTE PTR [eax],al
    147a:	00 01                	add    BYTE PTR [ecx],al
    147c:	01 fb                	add    ebx,edi
    147e:	0e                   	push   cs
    147f:	0d 00 01 01 01       	or     eax,0x1010100
    1484:	01 00                	add    DWORD PTR [eax],eax
    1486:	00 00                	add    BYTE PTR [eax],al
    1488:	01 00                	add    DWORD PTR [eax],eax
    148a:	00 01                	add    BYTE PTR [ecx],al
    148c:	73 72                	jae    1500 <sysEnter_Vector-0x12eb00>
    148e:	63 2f                	arpl   WORD PTR [edi],bp
    1490:	73 74                	jae    1506 <sysEnter_Vector-0x12eafa>
    1492:	72 69                	jb     14fd <sysEnter_Vector-0x12eb03>
    1494:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1495:	67 73 00             	addr16 jae 1498 <sysEnter_Vector-0x12eb68>
    1498:	2f                   	das    
    1499:	68 6f 6d 65 2f       	push   0x2f656d6f
    149e:	79 6f                	jns    150f <sysEnter_Vector-0x12eaf1>
    14a0:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    14a7:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    14aa:	73 73                	jae    151f <sysEnter_Vector-0x12eae1>
    14ac:	2f                   	das    
    14ad:	6c                   	ins    BYTE PTR es:[edi],dx
    14ae:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    14b5:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    14bb:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    14c1:	78 2d                	js     14f0 <sysEnter_Vector-0x12eb10>
    14c3:	67 6e                	outs   dx,BYTE PTR ds:[si]
    14c5:	75 2f                	jne    14f6 <sysEnter_Vector-0x12eb0a>
    14c7:	35 2e 33 2e 30       	xor    eax,0x302e332e
    14cc:	2f                   	das    
    14cd:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    14d4:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    14d7:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    14db:	65 00 00             	add    BYTE PTR gs:[eax],al
    14de:	73 74                	jae    1554 <sysEnter_Vector-0x12eaac>
    14e0:	72 69                	jb     154b <sysEnter_Vector-0x12eab5>
    14e2:	73 6e                	jae    1552 <sysEnter_Vector-0x12eaae>
    14e4:	75 6d                	jne    1553 <sysEnter_Vector-0x12eaad>
    14e6:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    14e9:	01 00                	add    DWORD PTR [eax],eax
    14eb:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    14ee:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    14f5:	63 
    14f6:	2e                   	cs
    14f7:	68 00 02 00 00       	push   0x200
    14fc:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    14ff:	6d                   	ins    DWORD PTR es:[edi],dx
    1500:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1501:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1502:	2e                   	cs
    1503:	68 00 03 00 00       	push   0x300
    1508:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    150f:	03 00                	add    eax,DWORD PTR [eax]
    1511:	00 00                	add    BYTE PTR [eax],al
    1513:	00 05 02 e4 39 00    	add    BYTE PTR ds:0x39e402,al
    1519:	9f                   	lahf   
    151a:	1a 08                	sbb    cl,BYTE PTR [eax]
    151c:	59                   	pop    ecx
    151d:	00 02                	add    BYTE PTR [edx],al
    151f:	04 01                	add    al,0x1
    1521:	06                   	push   es
    1522:	66                   	data16
    1523:	00 02                	add    BYTE PTR [edx],al
    1525:	04 02                	add    al,0x2
    1527:	66 06                	pushw  es
    1529:	75 59                	jne    1584 <sysEnter_Vector-0x12ea7c>
    152b:	31 f3                	xor    ebx,esi
    152d:	76 2f                	jbe    155e <sysEnter_Vector-0x12eaa2>
    152f:	08 e5                	or     ch,ah
    1531:	72 08                	jb     153b <sysEnter_Vector-0x12eac5>
    1533:	23 5a 02             	and    ebx,DWORD PTR [edx+0x2]
    1536:	02 00                	add    al,BYTE PTR [eax]
    1538:	01 01                	add    DWORD PTR [ecx],eax
    153a:	cf                   	iret   
    153b:	00 00                	add    BYTE PTR [eax],al
    153d:	00 02                	add    BYTE PTR [edx],al
    153f:	00 a2 00 00 00 01    	add    BYTE PTR [edx+0x1000000],ah
    1545:	01 fb                	add    ebx,edi
    1547:	0e                   	push   cs
    1548:	0d 00 01 01 01       	or     eax,0x1010100
    154d:	01 00                	add    DWORD PTR [eax],eax
    154f:	00 00                	add    BYTE PTR [eax],al
    1551:	01 00                	add    DWORD PTR [eax],eax
    1553:	00 01                	add    BYTE PTR [ecx],al
    1555:	73 72                	jae    15c9 <sysEnter_Vector-0x12ea37>
    1557:	63 2f                	arpl   WORD PTR [edi],bp
    1559:	73 74                	jae    15cf <sysEnter_Vector-0x12ea31>
    155b:	72 69                	jb     15c6 <sysEnter_Vector-0x12ea3a>
    155d:	6e                   	outs   dx,BYTE PTR ds:[esi]
    155e:	67 73 00             	addr16 jae 1561 <sysEnter_Vector-0x12ea9f>
    1561:	2f                   	das    
    1562:	68 6f 6d 65 2f       	push   0x2f656d6f
    1567:	79 6f                	jns    15d8 <sysEnter_Vector-0x12ea28>
    1569:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1570:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1573:	73 73                	jae    15e8 <sysEnter_Vector-0x12ea18>
    1575:	2f                   	das    
    1576:	6c                   	ins    BYTE PTR es:[edi],dx
    1577:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    157e:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1584:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    158a:	78 2d                	js     15b9 <sysEnter_Vector-0x12ea47>
    158c:	67 6e                	outs   dx,BYTE PTR ds:[si]
    158e:	75 2f                	jne    15bf <sysEnter_Vector-0x12ea41>
    1590:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1595:	2f                   	das    
    1596:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    159d:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    15a0:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    15a4:	65 00 00             	add    BYTE PTR gs:[eax],al
    15a7:	73 74                	jae    161d <sysEnter_Vector-0x12e9e3>
    15a9:	72 6c                	jb     1617 <sysEnter_Vector-0x12e9e9>
    15ab:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    15ad:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    15b0:	01 00                	add    DWORD PTR [eax],eax
    15b2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    15b5:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    15bc:	63 
    15bd:	2e                   	cs
    15be:	68 00 02 00 00       	push   0x200
    15c3:	73 74                	jae    1639 <sysEnter_Vector-0x12e9c7>
    15c5:	64                   	fs
    15c6:	64                   	fs
    15c7:	65                   	gs
    15c8:	66                   	data16
    15c9:	2e                   	cs
    15ca:	68 00 02 00 00       	push   0x200
    15cf:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    15d2:	6d                   	ins    DWORD PTR es:[edi],dx
    15d3:	6f                   	outs   dx,DWORD PTR ds:[esi]
    15d4:	6e                   	outs   dx,BYTE PTR ds:[esi]
    15d5:	2e                   	cs
    15d6:	68 00 03 00 00       	push   0x300
    15db:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    15e2:	03 00                	add    eax,DWORD PTR [eax]
    15e4:	00 00                	add    BYTE PTR [eax],al
    15e6:	00 05 02 70 3a 00    	add    BYTE PTR ds:0x3a7002,al
    15ec:	9f                   	lahf   
    15ed:	15 f3 75 2f 49       	adc    eax,0x492f75f3
    15f2:	e6 3d                	out    0x3d,al
    15f4:	31 c9                	xor    ecx,ecx
    15f6:	ad                   	lods   eax,DWORD PTR ds:[esi]
    15f7:	31 f3                	xor    ebx,esi
    15f9:	75 2f                	jne    162a <sysEnter_Vector-0x12e9d6>
    15fb:	49                   	dec    ecx
    15fc:	00 02                	add    BYTE PTR [edx],al
    15fe:	04 01                	add    al,0x1
    1600:	06                   	push   es
    1601:	e4 06                	in     al,0x6
    1603:	84 3d 31 c9 e5 02    	test   BYTE PTR ds:0x2e5c931,bh
    1609:	02 00                	add    al,BYTE PTR [eax]
    160b:	01 01                	add    DWORD PTR [ecx],eax
    160d:	c1 00 00             	rol    DWORD PTR [eax],0x0
    1610:	00 02                	add    BYTE PTR [edx],al
    1612:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    1615:	00 00                	add    BYTE PTR [eax],al
    1617:	01 01                	add    DWORD PTR [ecx],eax
    1619:	fb                   	sti    
    161a:	0e                   	push   cs
    161b:	0d 00 01 01 01       	or     eax,0x1010100
    1620:	01 00                	add    DWORD PTR [eax],eax
    1622:	00 00                	add    BYTE PTR [eax],al
    1624:	01 00                	add    DWORD PTR [eax],eax
    1626:	00 01                	add    BYTE PTR [ecx],al
    1628:	73 72                	jae    169c <sysEnter_Vector-0x12e964>
    162a:	63 2f                	arpl   WORD PTR [edi],bp
    162c:	73 74                	jae    16a2 <sysEnter_Vector-0x12e95e>
    162e:	72 69                	jb     1699 <sysEnter_Vector-0x12e967>
    1630:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1631:	67 73 00             	addr16 jae 1634 <sysEnter_Vector-0x12e9cc>
    1634:	2f                   	das    
    1635:	68 6f 6d 65 2f       	push   0x2f656d6f
    163a:	79 6f                	jns    16ab <sysEnter_Vector-0x12e955>
    163c:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1643:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1646:	73 73                	jae    16bb <sysEnter_Vector-0x12e945>
    1648:	2f                   	das    
    1649:	6c                   	ins    BYTE PTR es:[edi],dx
    164a:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1651:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1657:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    165d:	78 2d                	js     168c <sysEnter_Vector-0x12e974>
    165f:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1661:	75 2f                	jne    1692 <sysEnter_Vector-0x12e96e>
    1663:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1668:	2f                   	das    
    1669:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1670:	00 00                	add    BYTE PTR [eax],al
    1672:	73 74                	jae    16e8 <sysEnter_Vector-0x12e918>
    1674:	72 6e                	jb     16e4 <sysEnter_Vector-0x12e91c>
    1676:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    1679:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    167c:	01 00                	add    DWORD PTR [eax],eax
    167e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1681:	64                   	fs
    1682:	64                   	fs
    1683:	65                   	gs
    1684:	66                   	data16
    1685:	2e                   	cs
    1686:	68 00 02 00 00       	push   0x200
    168b:	00 00                	add    BYTE PTR [eax],al
    168d:	05 02 14 3b 00       	add    eax,0x3b1402
    1692:	9f                   	lahf   
    1693:	03 0c 01             	add    ecx,DWORD PTR [ecx+eax*1]
    1696:	c9                   	leave  
    1697:	2f                   	das    
    1698:	f3 00 02             	repz add BYTE PTR [edx],al
    169b:	04 01                	add    al,0x1
    169d:	06                   	push   es
    169e:	f2 00 02             	repnz add BYTE PTR [edx],al
    16a1:	04 02                	add    al,0x2
    16a3:	74 06                	je     16ab <sysEnter_Vector-0x12e955>
    16a5:	75 9f                	jne    1646 <sysEnter_Vector-0x12e9ba>
    16a7:	70 00                	jo     16a9 <sysEnter_Vector-0x12e957>
    16a9:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16ac:	06                   	push   es
    16ad:	ba 06 6b 59 31       	mov    edx,0x31596b06
    16b2:	c9                   	leave  
    16b3:	2f                   	das    
    16b4:	f3 00 02             	repz add BYTE PTR [edx],al
    16b7:	04 01                	add    al,0x1
    16b9:	06                   	push   es
    16ba:	f2 00 02             	repnz add BYTE PTR [edx],al
    16bd:	04 02                	add    al,0x2
    16bf:	74 06                	je     16c7 <sysEnter_Vector-0x12e939>
    16c1:	75 9f                	jne    1662 <sysEnter_Vector-0x12e99e>
    16c3:	70 00                	jo     16c5 <sysEnter_Vector-0x12e93b>
    16c5:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16c8:	06                   	push   es
    16c9:	ba 06 6b 59 02       	mov    edx,0x2596b06
    16ce:	02 00                	add    al,BYTE PTR [eax]
    16d0:	01 01                	add    DWORD PTR [ecx],eax
    16d2:	a3 00 00 00 02       	mov    ds:0x2000000,eax
    16d7:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    16da:	00 00                	add    BYTE PTR [eax],al
    16dc:	01 01                	add    DWORD PTR [ecx],eax
    16de:	fb                   	sti    
    16df:	0e                   	push   cs
    16e0:	0d 00 01 01 01       	or     eax,0x1010100
    16e5:	01 00                	add    DWORD PTR [eax],eax
    16e7:	00 00                	add    BYTE PTR [eax],al
    16e9:	01 00                	add    DWORD PTR [eax],eax
    16eb:	00 01                	add    BYTE PTR [ecx],al
    16ed:	73 72                	jae    1761 <sysEnter_Vector-0x12e89f>
    16ef:	63 2f                	arpl   WORD PTR [edi],bp
    16f1:	73 74                	jae    1767 <sysEnter_Vector-0x12e899>
    16f3:	72 69                	jb     175e <sysEnter_Vector-0x12e8a2>
    16f5:	6e                   	outs   dx,BYTE PTR ds:[esi]
    16f6:	67 73 00             	addr16 jae 16f9 <sysEnter_Vector-0x12e907>
    16f9:	2f                   	das    
    16fa:	68 6f 6d 65 2f       	push   0x2f656d6f
    16ff:	79 6f                	jns    1770 <sysEnter_Vector-0x12e890>
    1701:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1708:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    170b:	73 73                	jae    1780 <sysEnter_Vector-0x12e880>
    170d:	2f                   	das    
    170e:	6c                   	ins    BYTE PTR es:[edi],dx
    170f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1716:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    171c:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1722:	78 2d                	js     1751 <sysEnter_Vector-0x12e8af>
    1724:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1726:	75 2f                	jne    1757 <sysEnter_Vector-0x12e8a9>
    1728:	35 2e 33 2e 30       	xor    eax,0x302e332e
    172d:	2f                   	das    
    172e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1735:	00 00                	add    BYTE PTR [eax],al
    1737:	73 74                	jae    17ad <sysEnter_Vector-0x12e853>
    1739:	72 6e                	jb     17a9 <sysEnter_Vector-0x12e857>
    173b:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    173e:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1741:	01 00                	add    DWORD PTR [eax],eax
    1743:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1746:	64                   	fs
    1747:	64                   	fs
    1748:	65                   	gs
    1749:	66                   	data16
    174a:	2e                   	cs
    174b:	68 00 02 00 00       	push   0x200
    1750:	00 00                	add    BYTE PTR [eax],al
    1752:	05 02 e4 3b 00       	add    eax,0x3be402
    1757:	9f                   	lahf   
    1758:	03 0d 01 f3 67 2f    	add    ecx,DWORD PTR ds:0x2f67f301
    175e:	08 67 48             	or     BYTE PTR [edi+0x48],ah
    1761:	00 02                	add    BYTE PTR [edx],al
    1763:	04 01                	add    al,0x1
    1765:	06                   	push   es
    1766:	66 06                	pushw  es
    1768:	a2 2f bb 48 6a       	mov    ds:0x6a48bb2f,al
    176d:	67 67 3d 31 c9 08 13 	addr32 addr16 cmp eax,0x1308c931
    1774:	02 02                	add    al,BYTE PTR [edx]
    1776:	00 01                	add    BYTE PTR [ecx],al
    1778:	01 d8                	add    eax,ebx
    177a:	00 00                	add    BYTE PTR [eax],al
    177c:	00 02                	add    BYTE PTR [edx],al
    177e:	00 2b                	add    BYTE PTR [ebx],ch
    1780:	00 00                	add    BYTE PTR [eax],al
    1782:	00 01                	add    BYTE PTR [ecx],al
    1784:	01 fb                	add    ebx,edi
    1786:	0e                   	push   cs
    1787:	0d 00 01 01 01       	or     eax,0x1010100
    178c:	01 00                	add    DWORD PTR [eax],eax
    178e:	00 00                	add    BYTE PTR [eax],al
    1790:	01 00                	add    DWORD PTR [eax],eax
    1792:	00 01                	add    BYTE PTR [ecx],al
    1794:	73 72                	jae    1808 <sysEnter_Vector-0x12e7f8>
    1796:	63 2f                	arpl   WORD PTR [edi],bp
    1798:	73 74                	jae    180e <sysEnter_Vector-0x12e7f2>
    179a:	72 69                	jb     1805 <sysEnter_Vector-0x12e7fb>
    179c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    179d:	67 73 00             	addr16 jae 17a0 <sysEnter_Vector-0x12e860>
    17a0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    17a3:	72 6f                	jb     1814 <sysEnter_Vector-0x12e7ec>
    17a5:	75 6c                	jne    1813 <sysEnter_Vector-0x12e7ed>
    17a7:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    17aa:	01 00                	add    DWORD PTR [eax],eax
    17ac:	00 00                	add    BYTE PTR [eax],al
    17ae:	00 05 02 70 3c 00    	add    BYTE PTR ds:0x3c7002,al
    17b4:	9f                   	lahf   
    17b5:	03 3b                	add    edi,DWORD PTR [ebx]
    17b7:	01 08                	add    DWORD PTR [eax],ecx
    17b9:	2f                   	das    
    17ba:	40                   	inc    eax
    17bb:	00 02                	add    BYTE PTR [edx],al
    17bd:	04 01                	add    al,0x1
    17bf:	7a 00                	jp     17c1 <sysEnter_Vector-0x12e83f>
    17c1:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    17c4:	ad                   	lods   eax,DWORD PTR ds:[esi]
    17c5:	59                   	pop    ecx
    17c6:	59                   	pop    ecx
    17c7:	75 c9                	jne    1792 <sysEnter_Vector-0x12e86e>
    17c9:	59                   	pop    ecx
    17ca:	ad                   	lods   eax,DWORD PTR ds:[esi]
    17cb:	00 02                	add    BYTE PTR [edx],al
    17cd:	04 02                	add    al,0x2
    17cf:	06                   	push   es
    17d0:	66                   	data16
    17d1:	00 02                	add    BYTE PTR [edx],al
    17d3:	04 03                	add    al,0x3
    17d5:	66 06                	pushw  es
    17d7:	59                   	pop    ecx
    17d8:	00 02                	add    BYTE PTR [edx],al
    17da:	04 01                	add    al,0x1
    17dc:	06                   	push   es
    17dd:	74 06                	je     17e5 <sysEnter_Vector-0x12e81b>
    17df:	75 91                	jne    1772 <sysEnter_Vector-0x12e88e>
    17e1:	3d 76 67 00 02       	cmp    eax,0x2006776
    17e6:	04 01                	add    al,0x1
    17e8:	06                   	push   es
    17e9:	58                   	pop    eax
    17ea:	00 02                	add    BYTE PTR [edx],al
    17ec:	04 02                	add    al,0x2
    17ee:	74 00                	je     17f0 <sysEnter_Vector-0x12e810>
    17f0:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    17f3:	58                   	pop    eax
    17f4:	06                   	push   es
    17f5:	3d 08 21 08 2f       	cmp    eax,0x2f082108
    17fa:	9f                   	lahf   
    17fb:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    17ff:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1802:	06                   	push   es
    1803:	58                   	pop    eax
    1804:	00 02                	add    BYTE PTR [edx],al
    1806:	04 03                	add    al,0x3
    1808:	58                   	pop    eax
    1809:	00 02                	add    BYTE PTR [edx],al
    180b:	04 04                	add    al,0x4
    180d:	74 00                	je     180f <sysEnter_Vector-0x12e7f1>
    180f:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1812:	58                   	pop    eax
    1813:	06                   	push   es
    1814:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1817:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    181a:	06                   	push   es
    181b:	66                   	data16
    181c:	00 02                	add    BYTE PTR [edx],al
    181e:	04 02                	add    al,0x2
    1820:	58                   	pop    eax
    1821:	00 02                	add    BYTE PTR [edx],al
    1823:	04 03                	add    al,0x3
    1825:	58                   	pop    eax
    1826:	06                   	push   es
    1827:	67 76 59             	addr16 jbe 1883 <sysEnter_Vector-0x12e77d>
    182a:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    182e:	03 10                	add    edx,DWORD PTR [eax]
    1830:	ac                   	lods   al,BYTE PTR ds:[esi]
    1831:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    1834:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1837:	20 67 75             	and    BYTE PTR [edi+0x75],ah
    183a:	67 2f                	addr16 das 
    183c:	67 00 02             	add    BYTE PTR [bp+si],al
    183f:	04 01                	add    al,0x1
    1841:	06                   	push   es
    1842:	66                   	data16
    1843:	00 02                	add    BYTE PTR [edx],al
    1845:	04 02                	add    al,0x2
    1847:	58                   	pop    eax
    1848:	00 02                	add    BYTE PTR [edx],al
    184a:	04 04                	add    al,0x4
    184c:	3c 06                	cmp    al,0x6
    184e:	59                   	pop    ecx
    184f:	2f                   	das    
    1850:	02 08                	add    cl,BYTE PTR [eax]
    1852:	00 01                	add    BYTE PTR [ecx],al
    1854:	01 43 00             	add    DWORD PTR [ebx+0x0],eax
    1857:	00 00                	add    BYTE PTR [eax],al
    1859:	02 00                	add    al,BYTE PTR [eax]
    185b:	2d 00 00 00 01       	sub    eax,0x1000000
    1860:	01 fb                	add    ebx,edi
    1862:	0e                   	push   cs
    1863:	0d 00 01 01 01       	or     eax,0x1010100
    1868:	01 00                	add    DWORD PTR [eax],eax
    186a:	00 00                	add    BYTE PTR [eax],al
    186c:	01 00                	add    DWORD PTR [eax],eax
    186e:	00 01                	add    BYTE PTR [ecx],al
    1870:	73 72                	jae    18e4 <sysEnter_Vector-0x12e71c>
    1872:	63 2f                	arpl   WORD PTR [edi],bp
    1874:	73 74                	jae    18ea <sysEnter_Vector-0x12e716>
    1876:	72 69                	jb     18e1 <sysEnter_Vector-0x12e71f>
    1878:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1879:	67 73 00             	addr16 jae 187c <sysEnter_Vector-0x12e784>
    187c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    187f:	72 70                	jb     18f1 <sysEnter_Vector-0x12e70f>
    1881:	61                   	popa   
    1882:	72 74                	jb     18f8 <sysEnter_Vector-0x12e708>
    1884:	73 2e                	jae    18b4 <sysEnter_Vector-0x12e74c>
    1886:	63 00                	arpl   WORD PTR [eax],ax
    1888:	01 00                	add    DWORD PTR [eax],eax
    188a:	00 00                	add    BYTE PTR [eax],al
    188c:	00 05 02 f0 3d 00    	add    BYTE PTR ds:0x3df002,al
    1892:	9f                   	lahf   
    1893:	13 c9                	adc    ecx,ecx
    1895:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1896:	3d 02 02 00 01       	cmp    eax,0x1000202
    189b:	01 04 01             	add    DWORD PTR [ecx+eax*1],eax
    189e:	00 00                	add    BYTE PTR [eax],al
    18a0:	02 00                	add    al,BYTE PTR [eax]
    18a2:	2b 00                	sub    eax,DWORD PTR [eax]
    18a4:	00 00                	add    BYTE PTR [eax],al
    18a6:	01 01                	add    DWORD PTR [ecx],eax
    18a8:	fb                   	sti    
    18a9:	0e                   	push   cs
    18aa:	0d 00 01 01 01       	or     eax,0x1010100
    18af:	01 00                	add    DWORD PTR [eax],eax
    18b1:	00 00                	add    BYTE PTR [eax],al
    18b3:	01 00                	add    DWORD PTR [eax],eax
    18b5:	00 01                	add    BYTE PTR [ecx],al
    18b7:	73 72                	jae    192b <sysEnter_Vector-0x12e6d5>
    18b9:	63 2f                	arpl   WORD PTR [edi],bp
    18bb:	73 74                	jae    1931 <sysEnter_Vector-0x12e6cf>
    18bd:	72 69                	jb     1928 <sysEnter_Vector-0x12e6d8>
    18bf:	6e                   	outs   dx,BYTE PTR ds:[esi]
    18c0:	67 73 00             	addr16 jae 18c3 <sysEnter_Vector-0x12e73d>
    18c3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    18c6:	72 74                	jb     193c <sysEnter_Vector-0x12e6c4>
    18c8:	6f                   	outs   dx,DWORD PTR ds:[esi]
    18c9:	6c                   	ins    BYTE PTR es:[edi],dx
    18ca:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    18cd:	01 00                	add    DWORD PTR [eax],eax
    18cf:	00 00                	add    BYTE PTR [eax],al
    18d1:	00 05 02 10 3e 00    	add    BYTE PTR ds:0x3e1002,al
    18d7:	9f                   	lahf   
    18d8:	03 d7                	add    edx,edi
    18da:	00 01                	add    BYTE PTR [ecx],al
    18dc:	08 2f                	or     BYTE PTR [edi],ch
    18de:	40                   	inc    eax
    18df:	00 02                	add    BYTE PTR [edx],al
    18e1:	04 01                	add    al,0x1
    18e3:	7c 00                	jl     18e5 <sysEnter_Vector-0x12e71b>
    18e5:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    18e8:	ad                   	lods   eax,DWORD PTR ds:[esi]
    18e9:	59                   	pop    ecx
    18ea:	59                   	pop    ecx
    18eb:	75 c9                	jne    18b6 <sysEnter_Vector-0x12e74a>
    18ed:	59                   	pop    ecx
    18ee:	ad                   	lods   eax,DWORD PTR ds:[esi]
    18ef:	00 02                	add    BYTE PTR [edx],al
    18f1:	04 02                	add    al,0x2
    18f3:	06                   	push   es
    18f4:	66                   	data16
    18f5:	00 02                	add    BYTE PTR [edx],al
    18f7:	04 03                	add    al,0x3
    18f9:	66 06                	pushw  es
    18fb:	59                   	pop    ecx
    18fc:	00 02                	add    BYTE PTR [edx],al
    18fe:	04 01                	add    al,0x1
    1900:	06                   	push   es
    1901:	74 06                	je     1909 <sysEnter_Vector-0x12e6f7>
    1903:	75 91                	jne    1896 <sysEnter_Vector-0x12e76a>
    1905:	3d 76 67 00 02       	cmp    eax,0x2006776
    190a:	04 01                	add    al,0x1
    190c:	06                   	push   es
    190d:	58                   	pop    eax
    190e:	00 02                	add    BYTE PTR [edx],al
    1910:	04 02                	add    al,0x2
    1912:	74 00                	je     1914 <sysEnter_Vector-0x12e6ec>
    1914:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1917:	58                   	pop    eax
    1918:	06                   	push   es
    1919:	03 13                	add    edx,DWORD PTR [ebx]
    191b:	3c 00                	cmp    al,0x0
    191d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1920:	06                   	push   es
    1921:	66                   	data16
    1922:	00 02                	add    BYTE PTR [edx],al
    1924:	04 02                	add    al,0x2
    1926:	74 00                	je     1928 <sysEnter_Vector-0x12e6d8>
    1928:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    192b:	06                   	push   es
    192c:	59                   	pop    ecx
    192d:	00 02                	add    BYTE PTR [edx],al
    192f:	04 04                	add    al,0x4
    1931:	08 3d 00 02 04 04    	or     BYTE PTR ds:0x4040200,bh
    1937:	f3 9f                	repz lahf 
    1939:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    193d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1940:	06                   	push   es
    1941:	58                   	pop    eax
    1942:	00 02                	add    BYTE PTR [edx],al
    1944:	04 03                	add    al,0x3
    1946:	58                   	pop    eax
    1947:	00 02                	add    BYTE PTR [edx],al
    1949:	04 04                	add    al,0x4
    194b:	74 00                	je     194d <sysEnter_Vector-0x12e6b3>
    194d:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1950:	58                   	pop    eax
    1951:	06                   	push   es
    1952:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1955:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1958:	06                   	push   es
    1959:	66                   	data16
    195a:	00 02                	add    BYTE PTR [edx],al
    195c:	04 02                	add    al,0x2
    195e:	58                   	pop    eax
    195f:	00 02                	add    BYTE PTR [edx],al
    1961:	04 03                	add    al,0x3
    1963:	58                   	pop    eax
    1964:	06                   	push   es
    1965:	59                   	pop    ecx
    1966:	76 59                	jbe    19c1 <sysEnter_Vector-0x12e63f>
    1968:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    196c:	03 10                	add    edx,DWORD PTR [eax]
    196e:	ac                   	lods   al,BYTE PTR ds:[esi]
    196f:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    1972:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1975:	20 67 00             	and    BYTE PTR [edi+0x0],ah
    1978:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    197b:	06                   	push   es
    197c:	66                   	data16
    197d:	00 02                	add    BYTE PTR [edx],al
    197f:	04 02                	add    al,0x2
    1981:	74 00                	je     1983 <sysEnter_Vector-0x12e67d>
    1983:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1986:	58                   	pop    eax
    1987:	06                   	push   es
    1988:	4b                   	dec    ebx
    1989:	67 2f                	addr16 das 
    198b:	67 00 02             	add    BYTE PTR [bp+si],al
    198e:	04 01                	add    al,0x1
    1990:	06                   	push   es
    1991:	66                   	data16
    1992:	00 02                	add    BYTE PTR [edx],al
    1994:	04 02                	add    al,0x2
    1996:	58                   	pop    eax
    1997:	00 02                	add    BYTE PTR [edx],al
    1999:	04 04                	add    al,0x4
    199b:	3c 06                	cmp    al,0x6
    199d:	59                   	pop    ecx
    199e:	2f                   	das    
    199f:	02 08                	add    cl,BYTE PTR [eax]
    19a1:	00 01                	add    BYTE PTR [ecx],al
    19a3:	01 5e 00             	add    DWORD PTR [esi+0x0],ebx
    19a6:	00 00                	add    BYTE PTR [eax],al
    19a8:	02 00                	add    al,BYTE PTR [eax]
    19aa:	2c 00                	sub    al,0x0
    19ac:	00 00                	add    BYTE PTR [eax],al
    19ae:	01 01                	add    DWORD PTR [ecx],eax
    19b0:	fb                   	sti    
    19b1:	0e                   	push   cs
    19b2:	0d 00 01 01 01       	or     eax,0x1010100
    19b7:	01 00                	add    DWORD PTR [eax],eax
    19b9:	00 00                	add    BYTE PTR [eax],al
    19bb:	01 00                	add    DWORD PTR [eax],eax
    19bd:	00 01                	add    BYTE PTR [ecx],al
    19bf:	73 72                	jae    1a33 <sysEnter_Vector-0x12e5cd>
    19c1:	63 2f                	arpl   WORD PTR [edi],bp
    19c3:	73 74                	jae    1a39 <sysEnter_Vector-0x12e5c7>
    19c5:	72 69                	jb     1a30 <sysEnter_Vector-0x12e5d0>
    19c7:	6e                   	outs   dx,BYTE PTR ds:[esi]
    19c8:	67 73 00             	addr16 jae 19cb <sysEnter_Vector-0x12e635>
    19cb:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    19ce:	72 74                	jb     1a44 <sysEnter_Vector-0x12e5bc>
    19d0:	72 69                	jb     1a3b <sysEnter_Vector-0x12e5c5>
    19d2:	6d                   	ins    DWORD PTR es:[edi],dx
    19d3:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    19d6:	01 00                	add    DWORD PTR [eax],eax
    19d8:	00 00                	add    BYTE PTR [eax],al
    19da:	00 05 02 ac 3f 00    	add    BYTE PTR ds:0x3fac02,al
    19e0:	9f                   	lahf   
    19e1:	15 08 13 bf 30       	adc    eax,0x30bf1308
    19e6:	48                   	dec    eax
    19e7:	b3 08                	mov    bl,0x8
    19e9:	9f                   	lahf   
    19ea:	30 b8 00 02 04 01    	xor    BYTE PTR [eax+0x1040200],bh
    19f0:	06                   	push   es
    19f1:	82                   	(bad)  
    19f2:	06                   	push   es
    19f3:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    19f4:	84 00                	test   BYTE PTR [eax],al
    19f6:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    19f9:	06                   	push   es
    19fa:	20 06                	and    BYTE PTR [esi],al
    19fc:	08 ca                	or     dl,cl
    19fe:	69 f3 d7 02 02 00    	imul   esi,ebx,0x202d7
    1a04:	01 01                	add    DWORD PTR [ecx],eax
    1a06:	d4 00                	aam    0x0
    1a08:	00 00                	add    BYTE PTR [eax],al
    1a0a:	02 00                	add    al,BYTE PTR [eax]
    1a0c:	9e                   	sahf   
    1a0d:	00 00                	add    BYTE PTR [eax],al
    1a0f:	00 01                	add    BYTE PTR [ecx],al
    1a11:	01 fb                	add    ebx,edi
    1a13:	0e                   	push   cs
    1a14:	0d 00 01 01 01       	or     eax,0x1010100
    1a19:	01 00                	add    DWORD PTR [eax],eax
    1a1b:	00 00                	add    BYTE PTR [eax],al
    1a1d:	01 00                	add    DWORD PTR [eax],eax
    1a1f:	00 01                	add    BYTE PTR [ecx],al
    1a21:	73 72                	jae    1a95 <sysEnter_Vector-0x12e56b>
    1a23:	63 00                	arpl   WORD PTR [eax],ax
    1a25:	2f                   	das    
    1a26:	68 6f 6d 65 2f       	push   0x2f656d6f
    1a2b:	79 6f                	jns    1a9c <sysEnter_Vector-0x12e564>
    1a2d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1a34:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1a37:	73 73                	jae    1aac <sysEnter_Vector-0x12e554>
    1a39:	2f                   	das    
    1a3a:	6c                   	ins    BYTE PTR es:[edi],dx
    1a3b:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1a42:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1a48:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1a4e:	78 2d                	js     1a7d <sysEnter_Vector-0x12e583>
    1a50:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1a52:	75 2f                	jne    1a83 <sysEnter_Vector-0x12e57d>
    1a54:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1a59:	2f                   	das    
    1a5a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1a61:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1a64:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1a68:	65 00 00             	add    BYTE PTR gs:[eax],al
    1a6b:	73 74                	jae    1ae1 <sysEnter_Vector-0x12e51f>
    1a6d:	72 72                	jb     1ae1 <sysEnter_Vector-0x12e51f>
    1a6f:	65                   	gs
    1a70:	70 6c                	jo     1ade <sysEnter_Vector-0x12e522>
    1a72:	61                   	popa   
    1a73:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
    1a76:	63 00                	arpl   WORD PTR [eax],ax
    1a78:	01 00                	add    DWORD PTR [eax],eax
    1a7a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1a7d:	64                   	fs
    1a7e:	64                   	fs
    1a7f:	65                   	gs
    1a80:	66                   	data16
    1a81:	2e                   	cs
    1a82:	68 00 02 00 00       	push   0x200
    1a87:	73 74                	jae    1afd <sysEnter_Vector-0x12e503>
    1a89:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1a90:	63 
    1a91:	2e                   	cs
    1a92:	68 00 02 00 00       	push   0x200
    1a97:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    1a9a:	6d                   	ins    DWORD PTR es:[edi],dx
    1a9b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1a9c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1a9d:	2e                   	cs
    1a9e:	68 00 03 00 00       	push   0x300
    1aa3:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1aaa:	03 00                	add    eax,DWORD PTR [eax]
    1aac:	00 00                	add    BYTE PTR [eax],al
    1aae:	00 05 02 64 40 00    	add    BYTE PTR ds:0x406402,al
    1ab4:	9f                   	lahf   
    1ab5:	03 0d 01 08 2f 08    	add    ecx,DWORD PTR ds:0x82f0801
    1abb:	3f                   	aas    
    1abc:	76 5a                	jbe    1b18 <sysEnter_Vector-0x12e4e8>
    1abe:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
    1ac1:	cb                   	retf   
    1ac2:	08 77 02             	or     BYTE PTR [edi+0x2],dh
    1ac5:	2a 15 02 28 13 03    	sub    dl,BYTE PTR ds:0x3132802
    1acb:	73 08                	jae    1ad5 <sysEnter_Vector-0x12e52b>
    1acd:	12 03                	adc    al,BYTE PTR [ebx]
    1acf:	11 08                	adc    DWORD PTR [eax],ecx
    1ad1:	c8 08 68 3d          	enter  0x6808,0x3d
    1ad5:	77 f3                	ja     1aca <sysEnter_Vector-0x12e536>
    1ad7:	08 3d 02 02 00 01    	or     BYTE PTR ds:0x1000202,bh
    1add:	01 8c 00 00 00 02 00 	add    DWORD PTR [eax+eax*1+0x20000],ecx
    1ae4:	37                   	aaa    
    1ae5:	00 00                	add    BYTE PTR [eax],al
    1ae7:	00 01                	add    BYTE PTR [ecx],al
    1ae9:	01 fb                	add    ebx,edi
    1aeb:	0e                   	push   cs
    1aec:	0d 00 01 01 01       	or     eax,0x1010100
    1af1:	01 00                	add    DWORD PTR [eax],eax
    1af3:	00 00                	add    BYTE PTR [eax],al
    1af5:	01 00                	add    DWORD PTR [eax],eax
    1af7:	00 01                	add    BYTE PTR [ecx],al
    1af9:	73 72                	jae    1b6d <sysEnter_Vector-0x12e493>
    1afb:	63 00                	arpl   WORD PTR [eax],ax
    1afd:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1b04:	00 00                	add    BYTE PTR [eax],al
    1b06:	73 74                	jae    1b7c <sysEnter_Vector-0x12e484>
    1b08:	72 73                	jb     1b7d <sysEnter_Vector-0x12e483>
    1b0a:	74 72                	je     1b7e <sysEnter_Vector-0x12e482>
    1b0c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1b0f:	01 00                	add    DWORD PTR [eax],eax
    1b11:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
    1b14:	6d                   	ins    DWORD PTR es:[edi],dx
    1b15:	6d                   	ins    DWORD PTR es:[edi],dx
    1b16:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1b17:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1b18:	2e                   	cs
    1b19:	68 00 02 00 00       	push   0x200
    1b1e:	00 00                	add    BYTE PTR [eax],al
    1b20:	05 02 a8 41 00       	add    eax,0x41a802
    1b25:	9f                   	lahf   
    1b26:	03 34 01             	add    esi,DWORD PTR [ecx+eax*1]
    1b29:	08 27                	or     BYTE PTR [edi],ah
    1b2b:	68 3d 75 5b c9       	push   0xc95b753d
    1b30:	c9                   	leave  
    1b31:	5b                   	pop    ebx
    1b32:	3e                   	ds
    1b33:	75 5a                	jne    1b8f <sysEnter_Vector-0x12e471>
    1b35:	c9                   	leave  
    1b36:	59                   	pop    ecx
    1b37:	08 3f                	or     BYTE PTR [edi],bh
    1b39:	2c 23                	sub    al,0x23
    1b3b:	03 73 58             	add    esi,DWORD PTR [ebx+0x58]
    1b3e:	1c 00                	sbb    al,0x0
    1b40:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b43:	06                   	push   es
    1b44:	4a                   	dec    edx
    1b45:	06                   	push   es
    1b46:	03 13                	add    edx,DWORD PTR [ebx]
    1b48:	9e                   	sahf   
    1b49:	59                   	pop    ecx
    1b4a:	77 ec                	ja     1b38 <sysEnter_Vector-0x12e4c8>
    1b4c:	3d 75 5b cb 3e       	cmp    eax,0x3ecb5b75
    1b51:	75 5a                	jne    1bad <sysEnter_Vector-0x12e453>
    1b53:	08 3f                	or     BYTE PTR [edi],bh
    1b55:	2c 23                	sub    al,0x23
    1b57:	03 75 58             	add    esi,DWORD PTR [ebp+0x58]
    1b5a:	1e                   	push   ds
    1b5b:	00 02                	add    BYTE PTR [edx],al
    1b5d:	04 01                	add    al,0x1
    1b5f:	06                   	push   es
    1b60:	4a                   	dec    edx
    1b61:	06                   	push   es
    1b62:	03 0f                	add    ecx,DWORD PTR [edi]
    1b64:	9e                   	sahf   
    1b65:	59                   	pop    ecx
    1b66:	4d                   	dec    ebp
    1b67:	c9                   	leave  
    1b68:	d7                   	xlat   BYTE PTR ds:[ebx]
    1b69:	02 02                	add    al,BYTE PTR [edx]
    1b6b:	00 01                	add    BYTE PTR [ecx],al
    1b6d:	01 32                	add    DWORD PTR [edx],esi
    1b6f:	03 00                	add    eax,DWORD PTR [eax]
    1b71:	00 02                	add    BYTE PTR [edx],al
    1b73:	00 bc 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bh
    1b7a:	fb                   	sti    
    1b7b:	0e                   	push   cs
    1b7c:	0d 00 01 01 01       	or     eax,0x1010100
    1b81:	01 00                	add    DWORD PTR [eax],eax
    1b83:	00 00                	add    BYTE PTR [eax],al
    1b85:	01 00                	add    DWORD PTR [eax],eax
    1b87:	00 01                	add    BYTE PTR [ecx],al
    1b89:	73 72                	jae    1bfd <sysEnter_Vector-0x12e403>
    1b8b:	63 00                	arpl   WORD PTR [eax],ax
    1b8d:	2f                   	das    
    1b8e:	68 6f 6d 65 2f       	push   0x2f656d6f
    1b93:	79 6f                	jns    1c04 <sysEnter_Vector-0x12e3fc>
    1b95:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1b9c:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1b9f:	73 73                	jae    1c14 <sysEnter_Vector-0x12e3ec>
    1ba1:	2f                   	das    
    1ba2:	6c                   	ins    BYTE PTR es:[edi],dx
    1ba3:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1baa:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1bb0:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1bb6:	78 2d                	js     1be5 <sysEnter_Vector-0x12e41b>
    1bb8:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1bba:	75 2f                	jne    1beb <sysEnter_Vector-0x12e415>
    1bbc:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1bc1:	2f                   	das    
    1bc2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1bc9:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1bcc:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1bd0:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    1bd3:	2e                   	cs
    1bd4:	2f                   	das    
    1bd5:	2e                   	cs
    1bd6:	2e                   	cs
    1bd7:	2f                   	das    
    1bd8:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    1bdc:	6a 2f                	push   0x2f
    1bde:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    1be1:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    1be8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1be9:	65                   	gs
    1bea:	6c                   	ins    BYTE PTR es:[edi],dx
    1beb:	2f                   	das    
    1bec:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1bf3:	00 00                	add    BYTE PTR [eax],al
    1bf5:	74 69                	je     1c60 <sysEnter_Vector-0x12e3a0>
    1bf7:	6d                   	ins    DWORD PTR es:[edi],dx
    1bf8:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    1bfc:	01 00                	add    DWORD PTR [eax],eax
    1bfe:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1c01:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1c08:	63 
    1c09:	2e                   	cs
    1c0a:	68 00 02 00 00       	push   0x200
    1c0f:	74 69                	je     1c7a <sysEnter_Vector-0x12e386>
    1c11:	6d                   	ins    DWORD PTR es:[edi],dx
    1c12:	65                   	gs
    1c13:	2e                   	cs
    1c14:	68 00 03 00 00       	push   0x300
    1c19:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    1c1c:	6d                   	ins    DWORD PTR es:[edi],dx
    1c1d:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1c1e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1c1f:	2e                   	cs
    1c20:	68 00 03 00 00       	push   0x300
    1c25:	73 79                	jae    1ca0 <sysEnter_Vector-0x12e360>
    1c27:	73 63                	jae    1c8c <sysEnter_Vector-0x12e374>
    1c29:	61                   	popa   
    1c2a:	6c                   	ins    BYTE PTR es:[edi],dx
    1c2b:	6c                   	ins    BYTE PTR es:[edi],dx
    1c2c:	73 2e                	jae    1c5c <sysEnter_Vector-0x12e3a4>
    1c2e:	68 00 04 00 00       	push   0x400
    1c33:	00 00                	add    BYTE PTR [eax],al
    1c35:	05 02 d4 42 00       	add    eax,0x42d402
    1c3a:	9f                   	lahf   
    1c3b:	03 1a                	add    ebx,DWORD PTR [edx]
    1c3d:	01 08                	add    DWORD PTR [eax],ecx
    1c3f:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
    1c42:	f3 3d 78 08 21 84    	repz cmp eax,0x84210878
    1c48:	76 02                	jbe    1c4c <sysEnter_Vector-0x12e3b4>
    1c4a:	24 13                	and    al,0x13
    1c4c:	08 22                	or     BYTE PTR [edx],ah
    1c4e:	02 2e                	add    ch,BYTE PTR [esi]
    1c50:	13 02                	adc    eax,DWORD PTR [edx]
    1c52:	2f                   	das    
    1c53:	13 08                	adc    ecx,DWORD PTR [eax]
    1c55:	67 02 2d             	add    ch,BYTE PTR [di]
    1c58:	13 2f                	adc    ebp,DWORD PTR [edi]
    1c5a:	00 02                	add    BYTE PTR [edx],al
    1c5c:	04 01                	add    al,0x1
    1c5e:	06                   	push   es
    1c5f:	9e                   	sahf   
    1c60:	00 02                	add    BYTE PTR [edx],al
    1c62:	04 04                	add    al,0x4
    1c64:	02 23                	add    ah,BYTE PTR [ebx]
    1c66:	12 00                	adc    al,BYTE PTR [eax]
    1c68:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1c6f:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1c72:	74 00                	je     1c74 <sysEnter_Vector-0x12e38c>
    1c74:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1c77:	58                   	pop    eax
    1c78:	00 02                	add    BYTE PTR [edx],al
    1c7a:	04 08                	add    al,0x8
    1c7c:	06                   	push   es
    1c7d:	3d 48 00 02 04       	cmp    eax,0x4020048
    1c82:	01 06                	add    DWORD PTR [esi],eax
    1c84:	9e                   	sahf   
    1c85:	00 02                	add    BYTE PTR [edx],al
    1c87:	04 04                	add    al,0x4
    1c89:	02 23                	add    ah,BYTE PTR [ebx]
    1c8b:	12 00                	adc    al,BYTE PTR [eax]
    1c8d:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1c94:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1c97:	74 00                	je     1c99 <sysEnter_Vector-0x12e367>
    1c99:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1c9c:	58                   	pop    eax
    1c9d:	06                   	push   es
    1c9e:	94                   	xchg   esp,eax
    1c9f:	e5 91                	in     eax,0x91
    1ca1:	9f                   	lahf   
    1ca2:	59                   	pop    ecx
    1ca3:	00 02                	add    BYTE PTR [edx],al
    1ca5:	04 01                	add    al,0x1
    1ca7:	06                   	push   es
    1ca8:	9e                   	sahf   
    1ca9:	00 02                	add    BYTE PTR [edx],al
    1cab:	04 04                	add    al,0x4
    1cad:	02 23                	add    ah,BYTE PTR [ebx]
    1caf:	12 00                	adc    al,BYTE PTR [eax]
    1cb1:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1cb8:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1cbb:	74 00                	je     1cbd <sysEnter_Vector-0x12e343>
    1cbd:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1cc0:	58                   	pop    eax
    1cc1:	00 02                	add    BYTE PTR [edx],al
    1cc3:	04 08                	add    al,0x8
    1cc5:	06                   	push   es
    1cc6:	08 9f e2 00 02 04    	or     BYTE PTR [edi+0x40200e2],bl
    1ccc:	01 06                	add    DWORD PTR [esi],eax
    1cce:	9e                   	sahf   
    1ccf:	00 02                	add    BYTE PTR [edx],al
    1cd1:	04 04                	add    al,0x4
    1cd3:	02 23                	add    ah,BYTE PTR [ebx]
    1cd5:	12 00                	adc    al,BYTE PTR [eax]
    1cd7:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1cde:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1ce1:	74 00                	je     1ce3 <sysEnter_Vector-0x12e31d>
    1ce3:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1ce6:	58                   	pop    eax
    1ce7:	06                   	push   es
    1ce8:	08 f6                	or     dh,dh
    1cea:	d7                   	xlat   BYTE PTR ds:[ebx]
    1ceb:	9f                   	lahf   
    1cec:	3d 69 c9 d7 30       	cmp    eax,0x30d7c969
    1cf1:	f5                   	cmc    
    1cf2:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
    1cf5:	2f                   	das    
    1cf6:	31 f5                	xor    ebp,esi
    1cf8:	08 3d e5 30 c9 d7    	or     BYTE PTR ds:0xd7c930e5,bh
    1cfe:	30 08                	xor    BYTE PTR [eax],cl
    1d00:	44                   	inc    esp
    1d01:	02 2e                	add    ch,BYTE PTR [esi]
    1d03:	13 02                	adc    eax,DWORD PTR [edx]
    1d05:	3a 13                	cmp    dl,BYTE PTR [ebx]
    1d07:	91                   	xchg   ecx,eax
    1d08:	c9                   	leave  
    1d09:	e6 02                	out    0x2,al
    1d0b:	2f                   	das    
    1d0c:	13 02                	adc    eax,DWORD PTR [edx]
    1d0e:	3c 13                	cmp    al,0x13
    1d10:	9f                   	lahf   
    1d11:	e5 e6                	in     eax,0xe6
    1d13:	08 c9                	or     cl,cl
    1d15:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    1d18:	9f                   	lahf   
    1d19:	e5 4c                	in     eax,0x4c
    1d1b:	02 29                	add    ch,BYTE PTR [ecx]
    1d1d:	13 02                	adc    eax,DWORD PTR [edx]
    1d1f:	2b 13                	sub    edx,DWORD PTR [ebx]
    1d21:	9f                   	lahf   
    1d22:	e5 e6                	in     eax,0xe6
    1d24:	bb 59 08 83 e5       	mov    ebx,0xe5830859
    1d29:	a0 00 02 04 01       	mov    al,ds:0x1040200
    1d2e:	06                   	push   es
    1d2f:	c8 00 02 04          	enter  0x200,0x4
    1d33:	04 02                	add    al,0x2
    1d35:	2c 12                	sub    al,0x12
    1d37:	00 02                	add    BYTE PTR [edx],al
    1d39:	04 05                	add    al,0x5
    1d3b:	02 2f                	add    ch,BYTE PTR [edi]
    1d3d:	12 00                	adc    al,BYTE PTR [eax]
    1d3f:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1d42:	74 00                	je     1d44 <sysEnter_Vector-0x12e2bc>
    1d44:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1d47:	58                   	pop    eax
    1d48:	06                   	push   es
    1d49:	08 99 a5 59 00 02    	or     BYTE PTR [ecx+0x20059a5],bl
    1d4f:	04 01                	add    al,0x1
    1d51:	06                   	push   es
    1d52:	c8 00 02 04          	enter  0x200,0x4
    1d56:	04 02                	add    al,0x2
    1d58:	2c 12                	sub    al,0x12
    1d5a:	00 02                	add    BYTE PTR [edx],al
    1d5c:	04 05                	add    al,0x5
    1d5e:	02 2f                	add    ch,BYTE PTR [edi]
    1d60:	12 00                	adc    al,BYTE PTR [eax]
    1d62:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1d65:	74 00                	je     1d67 <sysEnter_Vector-0x12e299>
    1d67:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1d6a:	58                   	pop    eax
    1d6b:	00 02                	add    BYTE PTR [edx],al
    1d6d:	04 08                	add    al,0x8
    1d6f:	06                   	push   es
    1d70:	08 9f 08 91 9f e0    	or     BYTE PTR [edi-0x1f606ef8],bl
    1d76:	00 02                	add    BYTE PTR [edx],al
    1d78:	04 01                	add    al,0x1
    1d7a:	06                   	push   es
    1d7b:	c8 00 02 04          	enter  0x200,0x4
    1d7f:	04 02                	add    al,0x2
    1d81:	2c 12                	sub    al,0x12
    1d83:	00 02                	add    BYTE PTR [edx],al
    1d85:	04 05                	add    al,0x5
    1d87:	02 2f                	add    ch,BYTE PTR [edi]
    1d89:	12 00                	adc    al,BYTE PTR [eax]
    1d8b:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1d8e:	74 00                	je     1d90 <sysEnter_Vector-0x12e270>
    1d90:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1d93:	58                   	pop    eax
    1d94:	06                   	push   es
    1d95:	08 f9                	or     cl,bh
    1d97:	bb 75 00 02 04       	mov    ebx,0x4020075
    1d9c:	01 06                	add    DWORD PTR [esi],eax
    1d9e:	08 2e                	or     BYTE PTR [esi],ch
    1da0:	06                   	push   es
    1da1:	9f                   	lahf   
    1da2:	75 75                	jne    1e19 <sysEnter_Vector-0x12e1e7>
    1da4:	7b d8                	jnp    1d7e <sysEnter_Vector-0x12e282>
    1da6:	00 02                	add    BYTE PTR [edx],al
    1da8:	04 01                	add    al,0x1
    1daa:	06                   	push   es
    1dab:	c8 06 75 e5          	enter  0x7506,0xe5
    1daf:	00 02                	add    BYTE PTR [edx],al
    1db1:	04 01                	add    al,0x1
    1db3:	06                   	push   es
    1db4:	02 22                	add    ah,BYTE PTR [edx]
    1db6:	12 06                	adc    al,BYTE PTR [esi]
    1db8:	4b                   	dec    ebx
    1db9:	00 02                	add    BYTE PTR [edx],al
    1dbb:	04 01                	add    al,0x1
    1dbd:	06                   	push   es
    1dbe:	08 ba 00 02 04 03    	or     BYTE PTR [edx+0x3040200],bh
    1dc4:	02 22                	add    ah,BYTE PTR [edx]
    1dc6:	12 00                	adc    al,BYTE PTR [eax]
    1dc8:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1dcb:	74 00                	je     1dcd <sysEnter_Vector-0x12e233>
    1dcd:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1dd0:	58                   	pop    eax
    1dd1:	00 02                	add    BYTE PTR [edx],al
    1dd3:	04 06                	add    al,0x6
    1dd5:	06                   	push   es
    1dd6:	59                   	pop    ecx
    1dd7:	00 02                	add    BYTE PTR [edx],al
    1dd9:	04 01                	add    al,0x1
    1ddb:	06                   	push   es
    1ddc:	02 40 12             	add    al,BYTE PTR [eax+0x12]
    1ddf:	00 02                	add    BYTE PTR [edx],al
    1de1:	04 03                	add    al,0x3
    1de3:	02 42 12             	add    al,BYTE PTR [edx+0x12]
    1de6:	00 02                	add    BYTE PTR [edx],al
    1de8:	04 04                	add    al,0x4
    1dea:	74 00                	je     1dec <sysEnter_Vector-0x12e214>
    1dec:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1def:	58                   	pop    eax
    1df0:	00 02                	add    BYTE PTR [edx],al
    1df2:	04 06                	add    al,0x6
    1df4:	06                   	push   es
    1df5:	59                   	pop    ecx
    1df6:	00 02                	add    BYTE PTR [edx],al
    1df8:	04 01                	add    al,0x1
    1dfa:	06                   	push   es
    1dfb:	02 43 12             	add    al,BYTE PTR [ebx+0x12]
    1dfe:	00 02                	add    BYTE PTR [edx],al
    1e00:	04 03                	add    al,0x3
    1e02:	02 48 12             	add    cl,BYTE PTR [eax+0x12]
    1e05:	00 02                	add    BYTE PTR [edx],al
    1e07:	04 04                	add    al,0x4
    1e09:	74 00                	je     1e0b <sysEnter_Vector-0x12e1f5>
    1e0b:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1e0e:	58                   	pop    eax
    1e0f:	00 02                	add    BYTE PTR [edx],al
    1e11:	04 06                	add    al,0x6
    1e13:	06                   	push   es
    1e14:	5a                   	pop    edx
    1e15:	00 02                	add    BYTE PTR [edx],al
    1e17:	04 06                	add    al,0x6
    1e19:	c9                   	leave  
    1e1a:	2f                   	das    
    1e1b:	00 02                	add    BYTE PTR [edx],al
    1e1d:	04 01                	add    al,0x1
    1e1f:	06                   	push   es
    1e20:	9e                   	sahf   
    1e21:	00 02                	add    BYTE PTR [edx],al
    1e23:	04 04                	add    al,0x4
    1e25:	02 23                	add    ah,BYTE PTR [ebx]
    1e27:	12 00                	adc    al,BYTE PTR [eax]
    1e29:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1e30:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1e33:	74 00                	je     1e35 <sysEnter_Vector-0x12e1cb>
    1e35:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1e38:	58                   	pop    eax
    1e39:	00 02                	add    BYTE PTR [edx],al
    1e3b:	04 08                	add    al,0x8
    1e3d:	06                   	push   es
    1e3e:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    1e41:	e8 bb 00 02 04       	call   4021f01 <sysEnter_Vector+0x3ef1f01>
    1e46:	01 06                	add    DWORD PTR [esi],eax
    1e48:	ba 06 4b 68 91       	mov    edx,0x91684b06
    1e4d:	02 31                	add    dh,BYTE PTR [ecx]
    1e4f:	14 02                	adc    al,0x2
    1e51:	2c 14                	sub    al,0x14
    1e53:	00 02                	add    BYTE PTR [edx],al
    1e55:	04 01                	add    al,0x1
    1e57:	06                   	push   es
    1e58:	02 29                	add    ch,BYTE PTR [ecx]
    1e5a:	12 06                	adc    al,BYTE PTR [esi]
    1e5c:	4b                   	dec    ebx
    1e5d:	bd 00 02 04 01       	mov    ebp,0x1040200
    1e62:	06                   	push   es
    1e63:	ba 00 02 04 03       	mov    edx,0x3040200
    1e68:	06                   	push   es
    1e69:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    1e6c:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
    1e6f:	81 4b e5 4c ae 9f ae 	or     DWORD PTR [ebx-0x1b],0xae9fae4c
    1e76:	77 00                	ja     1e78 <sysEnter_Vector-0x12e188>
    1e78:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1e7b:	06                   	push   es
    1e7c:	82                   	(bad)  
    1e7d:	06                   	push   es
    1e7e:	4b                   	dec    ebx
    1e7f:	68 00 02 04 01       	push   0x1040200
    1e84:	06                   	push   es
    1e85:	66 06                	pushw  es
    1e87:	85 3d 85 08 75 76    	test   DWORD PTR ds:0x76750885,edi
    1e8d:	08 f3                	or     bl,dh
    1e8f:	67 08 14             	or     BYTE PTR [si],dl
    1e92:	00 02                	add    BYTE PTR [edx],al
    1e94:	04 01                	add    al,0x1
    1e96:	e5 77                	in     eax,0x77
    1e98:	08 21                	or     BYTE PTR [ecx],ah
    1e9a:	08 2f                	or     BYTE PTR [edi],ch
    1e9c:	08 3d 3d 02 05 00    	or     BYTE PTR ds:0x5023d,bh
    1ea2:	01 01                	add    DWORD PTR [ecx],eax

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	6c                   	ins    BYTE PTR es:[edi],dx
       1:	6f                   	outs   dx,DWORD PTR ds:[esi]
       2:	6e                   	outs   dx,BYTE PTR ds:[esi]
       3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
       7:	6e                   	outs   dx,BYTE PTR ds:[esi]
       8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
       c:	74 00                	je     e <sysEnter_Vector-0x12fff2>
       e:	73 68                	jae    78 <sysEnter_Vector-0x12ff88>
      10:	6f                   	outs   dx,DWORD PTR ds:[esi]
      11:	72 74                	jb     87 <sysEnter_Vector-0x12ff79>
      13:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
      16:	73 69                	jae    81 <sysEnter_Vector-0x12ff7f>
      18:	67 6e                	outs   dx,BYTE PTR ds:[si]
      1a:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
      1f:	74 00                	je     21 <sysEnter_Vector-0x12ffdf>
      21:	73 74                	jae    97 <sysEnter_Vector-0x12ff69>
      23:	72 63                	jb     88 <sysEnter_Vector-0x12ff78>
      25:	68 72 00 6c 6f       	push   0x6f6c0072
      2a:	6e                   	outs   dx,BYTE PTR ds:[esi]
      2b:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
      2f:	6e                   	outs   dx,BYTE PTR ds:[esi]
      30:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
      34:	73 69                	jae    9f <sysEnter_Vector-0x12ff61>
      36:	67 6e                	outs   dx,BYTE PTR ds:[si]
      38:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
      3d:	74 00                	je     3f <sysEnter_Vector-0x12ffc1>
      3f:	75 6e                	jne    af <sysEnter_Vector-0x12ff51>
      41:	73 69                	jae    ac <sysEnter_Vector-0x12ff54>
      43:	67 6e                	outs   dx,BYTE PTR ds:[si]
      45:	65 64 20 63 68       	gs and BYTE PTR fs:gs:[ebx+0x68],ah
      4a:	61                   	popa   
      4b:	72 00                	jb     4d <sysEnter_Vector-0x12ffb3>
      4d:	2f                   	das    
      4e:	68 6f 6d 65 2f       	push   0x2f656d6f
      53:	79 6f                	jns    c4 <sysEnter_Vector-0x12ff3c>
      55:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
      5c:	6f                   	outs   dx,DWORD PTR ds:[esi]
      5d:	73 2f                	jae    8e <sysEnter_Vector-0x12ff72>
      5f:	61                   	popa   
      60:	70 72                	jo     d4 <sysEnter_Vector-0x12ff2c>
      62:	6f                   	outs   dx,DWORD PTR ds:[esi]
      63:	6a 2f                	push   0x2f
      65:	6c                   	ins    BYTE PTR es:[edi],dx
      66:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
      6d:	4f                   	dec    edi
      6e:	53                   	push   ebx
      6f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
      72:	72 63                	jb     d7 <sysEnter_Vector-0x12ff29>
      74:	68 72 49 00 70       	push   0x70004972
      79:	72 6f                	jb     ea <sysEnter_Vector-0x12ff16>
      7b:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
      7e:	73 45                	jae    c5 <sysEnter_Vector-0x12ff3b>
      80:	6e                   	outs   dx,BYTE PTR ds:[esi]
      81:	76 70                	jbe    f3 <sysEnter_Vector-0x12ff0d>
      83:	00 2e                	add    BYTE PTR [esi],ch
      85:	2e                   	cs
      86:	2f                   	das    
      87:	2e                   	cs
      88:	2e                   	cs
      89:	2f                   	das    
      8a:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      8e:	6a 2f                	push   0x2f
      90:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      93:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      9a:	63 2f                	arpl   WORD PTR [edi],bp
      9c:	73 74                	jae    112 <sysEnter_Vector-0x12feee>
      9e:	72 69                	jb     109 <sysEnter_Vector-0x12fef7>
      a0:	6e                   	outs   dx,BYTE PTR ds:[esi]
      a1:	67 73 2f             	addr16 jae d3 <sysEnter_Vector-0x12ff2d>
      a4:	73 74                	jae    11a <sysEnter_Vector-0x12fee6>
      a6:	72 63                	jb     10b <sysEnter_Vector-0x12fef5>
      a8:	68 72 2e 63 00       	push   0x632e72
      ad:	6c                   	ins    BYTE PTR es:[edi],dx
      ae:	6f                   	outs   dx,DWORD PTR ds:[esi]
      af:	6e                   	outs   dx,BYTE PTR ds:[esi]
      b0:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
      b4:	75 62                	jne    118 <sysEnter_Vector-0x12fee8>
      b6:	6c                   	ins    BYTE PTR es:[edi],dx
      b7:	65 00 73 68          	add    BYTE PTR gs:[ebx+0x68],dh
      bb:	6f                   	outs   dx,DWORD PTR ds:[esi]
      bc:	72 74                	jb     132 <sysEnter_Vector-0x12fece>
      be:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
      c1:	74 00                	je     c3 <sysEnter_Vector-0x12ff3d>
      c3:	47                   	inc    edi
      c4:	4e                   	dec    esi
      c5:	55                   	push   ebp
      c6:	20 43 31             	and    BYTE PTR [ebx+0x31],al
      c9:	31 20                	xor    DWORD PTR [eax],esp
      cb:	35 2e 33 2e 30       	xor    eax,0x302e332e
      d0:	20 2d 6d 61 73 6d    	and    BYTE PTR ds:0x6d73616d,ch
      d6:	3d 69 6e 74 65       	cmp    eax,0x65746e69
      db:	6c                   	ins    BYTE PTR es:[edi],dx
      dc:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
      e2:	65                   	gs
      e3:	3d 67 65 6e 65       	cmp    eax,0x656e6567
      e8:	72 69                	jb     153 <sysEnter_Vector-0x12fead>
      ea:	63 20                	arpl   WORD PTR [eax],sp
      ec:	2d 6d 61 72 63       	sub    eax,0x6372616d
      f1:	68 3d 70 65 6e       	push   0x6e65703d
      f6:	74 69                	je     161 <sysEnter_Vector-0x12fe9f>
      f8:	75 6d                	jne    167 <sysEnter_Vector-0x12fe99>
      fa:	70 72                	jo     16e <sysEnter_Vector-0x12fe92>
      fc:	6f                   	outs   dx,DWORD PTR ds:[esi]
      fd:	20 2d 67 20 2d 66    	and    BYTE PTR ds:0x662d2067,ch
     103:	66                   	data16
     104:	72 65                	jb     16b <sysEnter_Vector-0x12fe95>
     106:	65                   	gs
     107:	73 74                	jae    17d <sysEnter_Vector-0x12fe83>
     109:	61                   	popa   
     10a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     10b:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
     112:	76 
     113:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
     11a:	74 79                	je     195 <sysEnter_Vector-0x12fe6b>
     11c:	3d 68 69 64 64       	cmp    eax,0x64646968
     121:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     123:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
     129:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     12c:	7a 65                	jp     193 <sysEnter_Vector-0x12fe6d>
     12e:	74 79                	je     1a9 <sysEnter_Vector-0x12fe57>
     130:	70 65                	jo     197 <sysEnter_Vector-0x12fe69>
     132:	00 63 68             	add    BYTE PTR [ebx+0x68],ah
     135:	61                   	popa   
     136:	72 73                	jb     1ab <sysEnter_Vector-0x12fe55>
     138:	00 2e                	add    BYTE PTR [esi],ch
     13a:	2e                   	cs
     13b:	2f                   	das    
     13c:	2e                   	cs
     13d:	2e                   	cs
     13e:	2f                   	das    
     13f:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     143:	6a 2f                	push   0x2f
     145:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     148:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     14f:	63 2f                	arpl   WORD PTR [edi],bp
     151:	73 74                	jae    1c7 <sysEnter_Vector-0x12fe39>
     153:	72 69                	jb     1be <sysEnter_Vector-0x12fe42>
     155:	6e                   	outs   dx,BYTE PTR ds:[esi]
     156:	67 73 2f             	addr16 jae 188 <sysEnter_Vector-0x12fe78>
     159:	73 74                	jae    1cf <sysEnter_Vector-0x12fe31>
     15b:	72 63                	jb     1c0 <sysEnter_Vector-0x12fe40>
     15d:	73 70                	jae    1cf <sysEnter_Vector-0x12fe31>
     15f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     160:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     163:	73 74                	jae    1d9 <sysEnter_Vector-0x12fe27>
     165:	72 63                	jb     1ca <sysEnter_Vector-0x12fe36>
     167:	73 70                	jae    1d9 <sysEnter_Vector-0x12fe27>
     169:	6e                   	outs   dx,BYTE PTR ds:[esi]
     16a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     16d:	72 63                	jb     1d2 <sysEnter_Vector-0x12fe2e>
     16f:	73 70                	jae    1e1 <sysEnter_Vector-0x12fe1f>
     171:	6e                   	outs   dx,BYTE PTR ds:[esi]
     172:	49                   	dec    ecx
     173:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     176:	72 74                	jb     1ec <sysEnter_Vector-0x12fe14>
     178:	6f                   	outs   dx,DWORD PTR ds:[esi]
     179:	6b 49 00 64          	imul   ecx,DWORD PTR [ecx+0x0],0x64
     17d:	65                   	gs
     17e:	6c                   	ins    BYTE PTR es:[edi],dx
     17f:	69 6d 00 2e 2e 2f 2e 	imul   ebp,DWORD PTR [ebp+0x0],0x2e2f2e2e
     186:	2e                   	cs
     187:	2f                   	das    
     188:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     18c:	6a 2f                	push   0x2f
     18e:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     191:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     198:	63 2f                	arpl   WORD PTR [edi],bp
     19a:	73 74                	jae    210 <sysEnter_Vector-0x12fdf0>
     19c:	72 69                	jb     207 <sysEnter_Vector-0x12fdf9>
     19e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     19f:	67 73 2f             	addr16 jae 1d1 <sysEnter_Vector-0x12fe2f>
     1a2:	73 74                	jae    218 <sysEnter_Vector-0x12fde8>
     1a4:	72 74                	jb     21a <sysEnter_Vector-0x12fde6>
     1a6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1a7:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     1aa:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
     1ae:	74 73                	je     223 <sysEnter_Vector-0x12fddd>
     1b0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     1b3:	72 74                	jb     229 <sysEnter_Vector-0x12fdd7>
     1b5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1b6:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
     1b9:	74 6f                	je     22a <sysEnter_Vector-0x12fdd6>
     1bb:	61                   	popa   
     1bc:	00 69 74             	add    BYTE PTR [ecx+0x74],ch
     1bf:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1c0:	61                   	popa   
     1c1:	49                   	dec    ecx
     1c2:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
     1c5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1c6:	69 49 00 72 65 76 65 	imul   ecx,DWORD PTR [ecx+0x0],0x65766572
     1cd:	72 73                	jb     242 <sysEnter_Vector-0x12fdbe>
     1cf:	65                   	gs
     1d0:	49                   	dec    ecx
     1d1:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     1d4:	67 6e                	outs   dx,BYTE PTR ds:[si]
     1d6:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     1d9:	63 2f                	arpl   WORD PTR [edi],bp
     1db:	61                   	popa   
     1dc:	73 63                	jae    241 <sysEnter_Vector-0x12fdbf>
     1de:	69 69 2e 63 00 61 6e 	imul   ebp,DWORD PTR [ecx+0x2e],0x6e610063
     1e5:	73 69                	jae    250 <sysEnter_Vector-0x12fdb0>
     1e7:	45                   	inc    ebp
     1e8:	73 63                	jae    24d <sysEnter_Vector-0x12fdb3>
     1ea:	53                   	push   ebx
     1eb:	65                   	gs
     1ec:	71 00                	jno    1ee <sysEnter_Vector-0x12fe12>
     1ee:	73 61                	jae    251 <sysEnter_Vector-0x12fdaf>
     1f0:	76 65                	jbe    257 <sysEnter_Vector-0x12fda9>
     1f2:	43                   	inc    ebx
     1f3:	75 72                	jne    267 <sysEnter_Vector-0x12fd99>
     1f5:	73 6f                	jae    266 <sysEnter_Vector-0x12fd9a>
     1f7:	72 50                	jb     249 <sysEnter_Vector-0x12fdb7>
     1f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1fa:	73 69                	jae    265 <sysEnter_Vector-0x12fd9b>
     1fc:	74 69                	je     267 <sysEnter_Vector-0x12fd99>
     1fe:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1ff:	6e                   	outs   dx,BYTE PTR ds:[esi]
     200:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
     203:	6e                   	outs   dx,BYTE PTR ds:[esi]
     204:	74 70                	je     276 <sysEnter_Vector-0x12fd8a>
     206:	74 72                	je     27a <sysEnter_Vector-0x12fd86>
     208:	5f                   	pop    edi
     209:	74 00                	je     20b <sysEnter_Vector-0x12fdf5>
     20b:	78 73                	js     280 <sysEnter_Vector-0x12fd80>
     20d:	74 72                	je     281 <sysEnter_Vector-0x12fd7f>
     20f:	00 66 69             	add    BYTE PTR [esi+0x69],ah
     212:	6c                   	ins    BYTE PTR es:[edi],dx
     213:	65                   	gs
     214:	73 54                	jae    26a <sysEnter_Vector-0x12fd96>
     216:	6f                   	outs   dx,DWORD PTR ds:[esi]
     217:	43                   	inc    ebx
     218:	6c                   	ins    BYTE PTR es:[edi],dx
     219:	6f                   	outs   dx,DWORD PTR ds:[esi]
     21a:	73 65                	jae    281 <sysEnter_Vector-0x12fd7f>
     21c:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     21f:	73 74                	jae    295 <sysEnter_Vector-0x12fd6b>
     221:	6f                   	outs   dx,DWORD PTR ds:[esi]
     222:	72 65                	jb     289 <sysEnter_Vector-0x12fd77>
     224:	43                   	inc    ebx
     225:	75 72                	jne    299 <sysEnter_Vector-0x12fd67>
     227:	73 6f                	jae    298 <sysEnter_Vector-0x12fd68>
     229:	72 50                	jb     27b <sysEnter_Vector-0x12fd85>
     22b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     22c:	73 69                	jae    297 <sysEnter_Vector-0x12fd69>
     22e:	74 69                	je     299 <sysEnter_Vector-0x12fd67>
     230:	6f                   	outs   dx,DWORD PTR ds:[esi]
     231:	6e                   	outs   dx,BYTE PTR ds:[esi]
     232:	00 66 69             	add    BYTE PTR [esi+0x69],ah
     235:	6c                   	ins    BYTE PTR es:[edi],dx
     236:	65                   	gs
     237:	73 54                	jae    28d <sysEnter_Vector-0x12fd73>
     239:	6f                   	outs   dx,DWORD PTR ds:[esi]
     23a:	43                   	inc    ebx
     23b:	6c                   	ins    BYTE PTR es:[edi],dx
     23c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     23d:	73 65                	jae    2a4 <sysEnter_Vector-0x12fd5c>
     23f:	43                   	inc    ebx
     240:	6f                   	outs   dx,DWORD PTR ds:[esi]
     241:	75 6e                	jne    2b1 <sysEnter_Vector-0x12fd4f>
     243:	74 00                	je     245 <sysEnter_Vector-0x12fdbb>
     245:	75 69                	jne    2b0 <sysEnter_Vector-0x12fd50>
     247:	6e                   	outs   dx,BYTE PTR ds:[esi]
     248:	74 33                	je     27d <sysEnter_Vector-0x12fd83>
     24a:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
     24d:	00 6d 6f             	add    BYTE PTR [ebp+0x6f],ch
     250:	76 65                	jbe    2b7 <sysEnter_Vector-0x12fd49>
     252:	54                   	push   esp
     253:	6f                   	outs   dx,DWORD PTR ds:[esi]
     254:	58                   	pop    eax
     255:	59                   	pop    ecx
     256:	00 79 73             	add    BYTE PTR [ecx+0x73],bh
     259:	74 72                	je     2cd <sysEnter_Vector-0x12fd33>
     25b:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     25e:	63 2f                	arpl   WORD PTR [edi],bp
     260:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     263:	73 6f                	jae    2d4 <sysEnter_Vector-0x12fd2c>
     265:	6c                   	ins    BYTE PTR es:[edi],dx
     266:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
     26a:	53                   	push   ebx
     26b:	59                   	pop    ecx
     26c:	53                   	push   ebx
     26d:	43                   	inc    ebx
     26e:	41                   	inc    ecx
     26f:	4c                   	dec    esp
     270:	4c                   	dec    esp
     271:	5f                   	pop    edi
     272:	52                   	push   edx
     273:	45                   	inc    ebp
     274:	41                   	inc    ecx
     275:	44                   	inc    esp
     276:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     279:	53                   	push   ebx
     27a:	43                   	inc    ebx
     27b:	41                   	inc    ecx
     27c:	4c                   	dec    esp
     27d:	4c                   	dec    esp
     27e:	5f                   	pop    edi
     27f:	50                   	push   eax
     280:	49                   	dec    ecx
     281:	50                   	push   eax
     282:	45                   	inc    ebp
     283:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     286:	53                   	push   ebx
     287:	43                   	inc    ebx
     288:	41                   	inc    ecx
     289:	4c                   	dec    esp
     28a:	4c                   	dec    esp
     28b:	5f                   	pop    edi
     28c:	4f                   	dec    edi
     28d:	50                   	push   eax
     28e:	45                   	inc    ebp
     28f:	4e                   	dec    esi
     290:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     293:	7a 65                	jp     2fa <sysEnter_Vector-0x12fd06>
     295:	5f                   	pop    edi
     296:	74 00                	je     298 <sysEnter_Vector-0x12fd68>
     298:	53                   	push   ebx
     299:	59                   	pop    ecx
     29a:	53                   	push   ebx
     29b:	43                   	inc    ebx
     29c:	41                   	inc    ecx
     29d:	4c                   	dec    esp
     29e:	4c                   	dec    esp
     29f:	5f                   	pop    edi
     2a0:	47                   	inc    edi
     2a1:	45                   	inc    ebp
     2a2:	54                   	push   esp
     2a3:	44                   	inc    esp
     2a4:	45                   	inc    ebp
     2a5:	4e                   	dec    esi
     2a6:	54                   	push   esp
     2a7:	53                   	push   ebx
     2a8:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     2ab:	74 65                	je     312 <sysEnter_Vector-0x12fcee>
     2ad:	6e                   	outs   dx,BYTE PTR ds:[esi]
     2ae:	76 00                	jbe    2b0 <sysEnter_Vector-0x12fd50>
     2b0:	67                   	addr16
     2b1:	65                   	gs
     2b2:	74 63                	je     317 <sysEnter_Vector-0x12fce9>
     2b4:	77 64                	ja     31a <sysEnter_Vector-0x12fce6>
     2b6:	49                   	dec    ecx
     2b7:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     2ba:	53                   	push   ebx
     2bb:	43                   	inc    ebx
     2bc:	41                   	inc    ecx
     2bd:	4c                   	dec    esp
     2be:	4c                   	dec    esp
     2bf:	5f                   	pop    edi
     2c0:	52                   	push   edx
     2c1:	45                   	inc    ebp
     2c2:	42                   	inc    edx
     2c3:	4f                   	dec    edi
     2c4:	4f                   	dec    edi
     2c5:	54                   	push   esp
     2c6:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     2c9:	63 2f                	arpl   WORD PTR [edi],bp
     2cb:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     2cd:	76 69                	jbe    338 <sysEnter_Vector-0x12fcc8>
     2cf:	72 6f                	jb     340 <sysEnter_Vector-0x12fcc0>
     2d1:	6e                   	outs   dx,BYTE PTR ds:[esi]
     2d2:	6d                   	ins    DWORD PTR es:[edi],dx
     2d3:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     2d5:	74 2e                	je     305 <sysEnter_Vector-0x12fcfb>
     2d7:	63 00                	arpl   WORD PTR [eax],ax
     2d9:	6c                   	ins    BYTE PTR es:[edi],dx
     2da:	61                   	popa   
     2db:	73 74                	jae    351 <sysEnter_Vector-0x12fcaf>
     2dd:	50                   	push   eax
     2de:	6f                   	outs   dx,DWORD PTR ds:[esi]
     2df:	70 75                	jo     356 <sysEnter_Vector-0x12fcaa>
     2e1:	6c                   	ins    BYTE PTR es:[edi],dx
     2e2:	61                   	popa   
     2e3:	74 65                	je     34a <sysEnter_Vector-0x12fcb6>
     2e5:	64 00 53 59          	add    BYTE PTR fs:[ebx+0x59],dl
     2e9:	53                   	push   ebx
     2ea:	43                   	inc    ebx
     2eb:	41                   	inc    ecx
     2ec:	4c                   	dec    esp
     2ed:	4c                   	dec    esp
     2ee:	5f                   	pop    edi
     2ef:	45                   	inc    ebp
     2f0:	58                   	pop    eax
     2f1:	45                   	inc    ebp
     2f2:	43                   	inc    ebx
     2f3:	4e                   	dec    esi
     2f4:	45                   	inc    ebp
     2f5:	57                   	push   edi
     2f6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     2f9:	53                   	push   ebx
     2fa:	43                   	inc    ebx
     2fb:	41                   	inc    ecx
     2fc:	4c                   	dec    esp
     2fd:	4c                   	dec    esp
     2fe:	5f                   	pop    edi
     2ff:	53                   	push   ebx
     300:	4c                   	dec    esp
     301:	45                   	inc    ebp
     302:	45                   	inc    ebp
     303:	50                   	push   eax
     304:	00 76 61             	add    BYTE PTR [esi+0x61],dh
     307:	6c                   	ins    BYTE PTR es:[edi],dx
     308:	75 65                	jne    36f <sysEnter_Vector-0x12fc91>
     30a:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     30d:	53                   	push   ebx
     30e:	43                   	inc    ebx
     30f:	41                   	inc    ecx
     310:	4c                   	dec    esp
     311:	4c                   	dec    esp
     312:	5f                   	pop    edi
     313:	47                   	inc    edi
     314:	45                   	inc    ebp
     315:	54                   	push   esp
     316:	54                   	push   esp
     317:	49                   	dec    ecx
     318:	4d                   	dec    ebp
     319:	45                   	inc    ebp
     31a:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     31d:	53                   	push   ebx
     31e:	43                   	inc    ebx
     31f:	41                   	inc    ecx
     320:	4c                   	dec    esp
     321:	4c                   	dec    esp
     322:	5f                   	pop    edi
     323:	53                   	push   ebx
     324:	45                   	inc    ebp
     325:	54                   	push   esp
     326:	50                   	push   eax
     327:	52                   	push   edx
     328:	49                   	dec    ecx
     329:	4f                   	dec    edi
     32a:	52                   	push   edx
     32b:	49                   	dec    ecx
     32c:	54                   	push   esp
     32d:	59                   	pop    ecx
     32e:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     331:	53                   	push   ebx
     332:	43                   	inc    ebx
     333:	41                   	inc    ecx
     334:	4c                   	dec    esp
     335:	4c                   	dec    esp
     336:	5f                   	pop    edi
     337:	53                   	push   ebx
     338:	45                   	inc    ebp
     339:	54                   	push   esp
     33a:	53                   	push   ebx
     33b:	54                   	push   esp
     33c:	44                   	inc    esp
     33d:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     340:	53                   	push   ebx
     341:	43                   	inc    ebx
     342:	41                   	inc    ecx
     343:	4c                   	dec    esp
     344:	4c                   	dec    esp
     345:	5f                   	pop    edi
     346:	4d                   	dec    ebp
     347:	41                   	inc    ecx
     348:	53                   	push   ebx
     349:	4b                   	dec    ebx
     34a:	53                   	push   ebx
     34b:	49                   	dec    ecx
     34c:	47                   	inc    edi
     34d:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     350:	53                   	push   ebx
     351:	43                   	inc    ebx
     352:	41                   	inc    ecx
     353:	4c                   	dec    esp
     354:	4c                   	dec    esp
     355:	5f                   	pop    edi
     356:	43                   	inc    ebx
     357:	4c                   	dec    esp
     358:	4f                   	dec    edi
     359:	53                   	push   ebx
     35a:	45                   	inc    ebp
     35b:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     35e:	53                   	push   ebx
     35f:	43                   	inc    ebx
     360:	41                   	inc    ecx
     361:	4c                   	dec    esp
     362:	4c                   	dec    esp
     363:	5f                   	pop    edi
     364:	55                   	push   ebp
     365:	4e                   	dec    esi
     366:	4c                   	dec    esp
     367:	49                   	dec    ecx
     368:	4e                   	dec    esi
     369:	4b                   	dec    ebx
     36a:	00 65 73             	add    BYTE PTR [ebp+0x73],ah
     36d:	79 73                	jns    3e2 <sysEnter_Vector-0x12fc1e>
     36f:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
     372:	6c                   	ins    BYTE PTR es:[edi],dx
     373:	73 00                	jae    375 <sysEnter_Vector-0x12fc8b>
     375:	53                   	push   ebx
     376:	59                   	pop    ecx
     377:	53                   	push   ebx
     378:	43                   	inc    ebx
     379:	41                   	inc    ecx
     37a:	4c                   	dec    esp
     37b:	4c                   	dec    esp
     37c:	5f                   	pop    edi
     37d:	46                   	inc    esi
     37e:	4f                   	dec    edi
     37f:	52                   	push   edx
     380:	4b                   	dec    ebx
     381:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     384:	53                   	push   ebx
     385:	43                   	inc    ebx
     386:	41                   	inc    ecx
     387:	4c                   	dec    esp
     388:	4c                   	dec    esp
     389:	5f                   	pop    edi
     38a:	53                   	push   ebx
     38b:	54                   	push   esp
     38c:	4f                   	dec    edi
     38d:	50                   	push   eax
     38e:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     391:	53                   	push   ebx
     392:	43                   	inc    ebx
     393:	41                   	inc    ecx
     394:	4c                   	dec    esp
     395:	4c                   	dec    esp
     396:	5f                   	pop    edi
     397:	53                   	push   ebx
     398:	45                   	inc    ebp
     399:	45                   	inc    ebp
     39a:	4b                   	dec    ebx
     39b:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     39e:	53                   	push   ebx
     39f:	43                   	inc    ebx
     3a0:	41                   	inc    ecx
     3a1:	4c                   	dec    esp
     3a2:	4c                   	dec    esp
     3a3:	5f                   	pop    edi
     3a4:	50                   	push   eax
     3a5:	52                   	push   edx
     3a6:	49                   	dec    ecx
     3a7:	4e                   	dec    esi
     3a8:	54                   	push   esp
     3a9:	44                   	inc    esp
     3aa:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3ad:	53                   	push   ebx
     3ae:	43                   	inc    ebx
     3af:	41                   	inc    ecx
     3b0:	4c                   	dec    esp
     3b1:	4c                   	dec    esp
     3b2:	5f                   	pop    edi
     3b3:	48                   	dec    eax
     3b4:	4c                   	dec    esp
     3b5:	54                   	push   esp
     3b6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3b9:	53                   	push   ebx
     3ba:	43                   	inc    ebx
     3bb:	41                   	inc    ecx
     3bc:	4c                   	dec    esp
     3bd:	4c                   	dec    esp
     3be:	5f                   	pop    edi
     3bf:	44                   	inc    esp
     3c0:	55                   	push   ebp
     3c1:	50                   	push   eax
     3c2:	33 00                	xor    eax,DWORD PTR [eax]
     3c4:	53                   	push   ebx
     3c5:	59                   	pop    ecx
     3c6:	53                   	push   ebx
     3c7:	43                   	inc    ebx
     3c8:	41                   	inc    ecx
     3c9:	4c                   	dec    esp
     3ca:	4c                   	dec    esp
     3cb:	5f                   	pop    edi
     3cc:	54                   	push   esp
     3cd:	41                   	inc    ecx
     3ce:	4b                   	dec    ebx
     3cf:	45                   	inc    ebp
     3d0:	41                   	inc    ecx
     3d1:	44                   	inc    esp
     3d2:	55                   	push   ebp
     3d3:	4d                   	dec    ebp
     3d4:	50                   	push   eax
     3d5:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3d8:	53                   	push   ebx
     3d9:	43                   	inc    ebx
     3da:	41                   	inc    ecx
     3db:	4c                   	dec    esp
     3dc:	4c                   	dec    esp
     3dd:	5f                   	pop    edi
     3de:	54                   	push   esp
     3df:	45                   	inc    ebp
     3e0:	4c                   	dec    esp
     3e1:	4c                   	dec    esp
     3e2:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3e5:	53                   	push   ebx
     3e6:	43                   	inc    ebx
     3e7:	41                   	inc    ecx
     3e8:	4c                   	dec    esp
     3e9:	4c                   	dec    esp
     3ea:	5f                   	pop    edi
     3eb:	46                   	inc    esi
     3ec:	52                   	push   edx
     3ed:	45                   	inc    ebp
     3ee:	45                   	inc    ebp
     3ef:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3f2:	53                   	push   ebx
     3f3:	43                   	inc    ebx
     3f4:	41                   	inc    ecx
     3f5:	4c                   	dec    esp
     3f6:	4c                   	dec    esp
     3f7:	5f                   	pop    edi
     3f8:	45                   	inc    ebp
     3f9:	58                   	pop    eax
     3fa:	45                   	inc    ebp
     3fb:	43                   	inc    ebx
     3fc:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3ff:	53                   	push   ebx
     400:	43                   	inc    ebx
     401:	41                   	inc    ecx
     402:	4c                   	dec    esp
     403:	4c                   	dec    esp
     404:	5f                   	pop    edi
     405:	49                   	dec    ecx
     406:	4e                   	dec    esi
     407:	56                   	push   esi
     408:	41                   	inc    ecx
     409:	4c                   	dec    esp
     40a:	49                   	dec    ecx
     40b:	44                   	inc    esp
     40c:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     40f:	53                   	push   ebx
     410:	43                   	inc    ebx
     411:	41                   	inc    ecx
     412:	4c                   	dec    esp
     413:	4c                   	dec    esp
     414:	5f                   	pop    edi
     415:	52                   	push   edx
     416:	45                   	inc    ebp
     417:	47                   	inc    edi
     418:	45                   	inc    ebp
     419:	58                   	pop    eax
     41a:	49                   	dec    ecx
     41b:	54                   	push   esp
     41c:	48                   	dec    eax
     41d:	41                   	inc    ecx
     41e:	4e                   	dec    esi
     41f:	44                   	inc    esp
     420:	4c                   	dec    esp
     421:	45                   	inc    ebp
     422:	52                   	push   edx
     423:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     426:	53                   	push   ebx
     427:	43                   	inc    ebx
     428:	41                   	inc    ecx
     429:	4c                   	dec    esp
     42a:	4c                   	dec    esp
     42b:	5f                   	pop    edi
     42c:	53                   	push   ebx
     42d:	54                   	push   esp
     42e:	41                   	inc    ecx
     42f:	54                   	push   esp
     430:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     433:	53                   	push   ebx
     434:	43                   	inc    ebx
     435:	41                   	inc    ecx
     436:	4c                   	dec    esp
     437:	4c                   	dec    esp
     438:	5f                   	pop    edi
     439:	47                   	inc    edi
     43a:	45                   	inc    ebp
     43b:	54                   	push   esp
     43c:	54                   	push   esp
     43d:	49                   	dec    ecx
     43e:	43                   	inc    ebx
     43f:	4b                   	dec    ebx
     440:	53                   	push   ebx
     441:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     444:	53                   	push   ebx
     445:	43                   	inc    ebx
     446:	41                   	inc    ecx
     447:	4c                   	dec    esp
     448:	4c                   	dec    esp
     449:	5f                   	pop    edi
     44a:	45                   	inc    ebp
     44b:	4e                   	dec    esi
     44c:	44                   	inc    esp
     44d:	50                   	push   eax
     44e:	52                   	push   edx
     44f:	4f                   	dec    edi
     450:	43                   	inc    ebx
     451:	45                   	inc    ebp
     452:	53                   	push   ebx
     453:	53                   	push   ebx
     454:	00 73 65             	add    BYTE PTR [ebx+0x65],dh
     457:	74 65                	je     4be <sysEnter_Vector-0x12fb42>
     459:	6e                   	outs   dx,BYTE PTR ds:[esi]
     45a:	76 00                	jbe    45c <sysEnter_Vector-0x12fba4>
     45c:	53                   	push   ebx
     45d:	59                   	pop    ecx
     45e:	53                   	push   ebx
     45f:	43                   	inc    ebx
     460:	41                   	inc    ecx
     461:	4c                   	dec    esp
     462:	4c                   	dec    esp
     463:	5f                   	pop    edi
     464:	53                   	push   ebx
     465:	45                   	inc    ebp
     466:	54                   	push   esp
     467:	43                   	inc    ebx
     468:	57                   	push   edi
     469:	44                   	inc    esp
     46a:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     46d:	53                   	push   ebx
     46e:	43                   	inc    ebx
     46f:	41                   	inc    ecx
     470:	4c                   	dec    esp
     471:	4c                   	dec    esp
     472:	5f                   	pop    edi
     473:	57                   	push   edi
     474:	52                   	push   edx
     475:	49                   	dec    ecx
     476:	54                   	push   esp
     477:	45                   	inc    ebp
     478:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     47b:	53                   	push   ebx
     47c:	43                   	inc    ebx
     47d:	41                   	inc    ecx
     47e:	4c                   	dec    esp
     47f:	4c                   	dec    esp
     480:	5f                   	pop    edi
     481:	50                   	push   eax
     482:	52                   	push   edx
     483:	49                   	dec    ecx
     484:	4e                   	dec    esi
     485:	54                   	push   esp
     486:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     489:	53                   	push   ebx
     48a:	43                   	inc    ebx
     48b:	41                   	inc    ecx
     48c:	4c                   	dec    esp
     48d:	4c                   	dec    esp
     48e:	5f                   	pop    edi
     48f:	47                   	inc    edi
     490:	45                   	inc    ebp
     491:	54                   	push   esp
     492:	43                   	inc    ebx
     493:	57                   	push   edi
     494:	44                   	inc    esp
     495:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     498:	53                   	push   ebx
     499:	43                   	inc    ebx
     49a:	41                   	inc    ecx
     49b:	4c                   	dec    esp
     49c:	4c                   	dec    esp
     49d:	5f                   	pop    edi
     49e:	57                   	push   edi
     49f:	41                   	inc    ecx
     4a0:	49                   	dec    ecx
     4a1:	54                   	push   esp
     4a2:	46                   	inc    esi
     4a3:	4f                   	dec    edi
     4a4:	52                   	push   edx
     4a5:	50                   	push   eax
     4a6:	49                   	dec    ecx
     4a7:	44                   	inc    esp
     4a8:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     4ab:	53                   	push   ebx
     4ac:	43                   	inc    ebx
     4ad:	41                   	inc    ecx
     4ae:	4c                   	dec    esp
     4af:	4c                   	dec    esp
     4b0:	5f                   	pop    edi
     4b1:	4d                   	dec    ebp
     4b2:	4d                   	dec    ebp
     4b3:	41                   	inc    ecx
     4b4:	50                   	push   eax
     4b5:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     4b8:	74 65                	je     51f <sysEnter_Vector-0x12fae1>
     4ba:	6e                   	outs   dx,BYTE PTR ds:[esi]
     4bb:	76 49                	jbe    506 <sysEnter_Vector-0x12fafa>
     4bd:	00 76 61             	add    BYTE PTR [esi+0x61],dh
     4c0:	72 6e                	jb     530 <sysEnter_Vector-0x12fad0>
     4c2:	61                   	popa   
     4c3:	6d                   	ins    DWORD PTR es:[edi],dx
     4c4:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
     4c8:	53                   	push   ebx
     4c9:	43                   	inc    ebx
     4ca:	41                   	inc    ecx
     4cb:	4c                   	dec    esp
     4cc:	4c                   	dec    esp
     4cd:	5f                   	pop    edi
     4ce:	41                   	inc    ecx
     4cf:	4c                   	dec    esp
     4d0:	4c                   	dec    esp
     4d1:	4f                   	dec    edi
     4d2:	43                   	inc    ebx
     4d3:	48                   	dec    eax
     4d4:	45                   	inc    ebp
     4d5:	41                   	inc    ecx
     4d6:	50                   	push   eax
     4d7:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     4da:	53                   	push   ebx
     4db:	43                   	inc    ebx
     4dc:	41                   	inc    ecx
     4dd:	4c                   	dec    esp
     4de:	4c                   	dec    esp
     4df:	5f                   	pop    edi
     4e0:	53                   	push   ebx
     4e1:	45                   	inc    ebp
     4e2:	54                   	push   esp
     4e3:	53                   	push   ebx
     4e4:	49                   	dec    ecx
     4e5:	47                   	inc    edi
     4e6:	41                   	inc    ecx
     4e7:	43                   	inc    ebx
     4e8:	54                   	push   esp
     4e9:	49                   	dec    ecx
     4ea:	4f                   	dec    edi
     4eb:	4e                   	dec    esi
     4ec:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     4ef:	74 63                	je     554 <sysEnter_Vector-0x12faac>
     4f1:	77 64                	ja     557 <sysEnter_Vector-0x12faa9>
     4f3:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     4f6:	74 56                	je     54e <sysEnter_Vector-0x12fab2>
     4f8:	61                   	popa   
     4f9:	6c                   	ins    BYTE PTR es:[edi],dx
     4fa:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
     4fd:	6f                   	outs   dx,DWORD PTR ds:[esi]
     4fe:	73 65                	jae    565 <sysEnter_Vector-0x12fa9b>
     500:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     503:	73 6f                	jae    574 <sysEnter_Vector-0x12fa8c>
     505:	6c                   	ins    BYTE PTR es:[edi],dx
     506:	76 65                	jbe    56d <sysEnter_Vector-0x12fa93>
     508:	50                   	push   eax
     509:	61                   	popa   
     50a:	74 68                	je     574 <sysEnter_Vector-0x12fa8c>
     50c:	5f                   	pop    edi
     50d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     50f:	76 50                	jbe    561 <sysEnter_Vector-0x12fa9f>
     511:	61                   	popa   
     512:	74 68                	je     57c <sysEnter_Vector-0x12fa84>
     514:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     517:	72 65                	jb     57e <sysEnter_Vector-0x12fa82>
     519:	61                   	popa   
     51a:	6d                   	ins    DWORD PTR es:[edi],dx
     51b:	00 70 61             	add    BYTE PTR [eax+0x61],dh
     51e:	74 68                	je     588 <sysEnter_Vector-0x12fa78>
     520:	00 77 72             	add    BYTE PTR [edi+0x72],dh
     523:	69 74 65 5f 74 69 6d 	imul   esi,DWORD PTR [ebp+eiz*2+0x5f],0x656d6974
     52a:	65 
     52b:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
     52f:	6c                   	ins    BYTE PTR es:[edi],dx
     530:	49                   	dec    ecx
     531:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     534:	61                   	popa   
     535:	72 74                	jb     5ab <sysEnter_Vector-0x12fa55>
     537:	46                   	inc    esi
     538:	69 6c 65 50 6f 73 00 	imul   ebp,DWORD PTR [ebp+eiz*2+0x50],0x7300736f
     53f:	73 
     540:	74 61                	je     5a3 <sysEnter_Vector-0x12fa5d>
     542:	74 49                	je     58d <sysEnter_Vector-0x12fa73>
     544:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
     547:	50                   	push   eax
     548:	74 72                	je     5bc <sysEnter_Vector-0x12fa44>
     54a:	00 75 73             	add    BYTE PTR [ebp+0x73],dh
     54d:	65                   	gs
     54e:	50                   	push   eax
     54f:	61                   	popa   
     550:	74 68                	je     5ba <sysEnter_Vector-0x12fa46>
     552:	56                   	push   esi
     553:	61                   	popa   
     554:	72 69                	jb     5bf <sysEnter_Vector-0x12fa41>
     556:	61                   	popa   
     557:	62 6c 65 00          	bound  ebp,QWORD PTR [ebp+eiz*2+0x0]
     55b:	72 65                	jb     5c2 <sysEnter_Vector-0x12fa3e>
     55d:	73 6f                	jae    5ce <sysEnter_Vector-0x12fa32>
     55f:	6c                   	ins    BYTE PTR es:[edi],dx
     560:	76 65                	jbe    5c7 <sysEnter_Vector-0x12fa39>
     562:	50                   	push   eax
     563:	61                   	popa   
     564:	74 68                	je     5ce <sysEnter_Vector-0x12fa32>
     566:	5f                   	pop    edi
     567:	72 65                	jb     5ce <sysEnter_Vector-0x12fa32>
     569:	73 50                	jae    5bb <sysEnter_Vector-0x12fa45>
     56b:	61                   	popa   
     56c:	74 68                	je     5d6 <sysEnter_Vector-0x12fa2a>
     56e:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
     572:	6c                   	ins    BYTE PTR es:[edi],dx
     573:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
     576:	65                   	gs
     577:	61                   	popa   
     578:	74 65                	je     5df <sysEnter_Vector-0x12fa21>
     57a:	5f                   	pop    edi
     57b:	64                   	fs
     57c:	61                   	popa   
     57d:	74 65                	je     5e4 <sysEnter_Vector-0x12fa1c>
     57f:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     582:	74 6c                	je     5f0 <sysEnter_Vector-0x12fa10>
     584:	69 6e 65 49 00 75 69 	imul   ebp,DWORD PTR [esi+0x65],0x69750049
     58b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     58c:	74 31                	je     5bf <sysEnter_Vector-0x12fa41>
     58e:	36                   	ss
     58f:	5f                   	pop    edi
     590:	74 00                	je     592 <sysEnter_Vector-0x12fa6e>
     592:	77 72                	ja     606 <sysEnter_Vector-0x12f9fa>
     594:	69 74 65 5f 64 61 74 	imul   esi,DWORD PTR [ebp+eiz*2+0x5f],0x65746164
     59b:	65 
     59c:	00 6f 70             	add    BYTE PTR [edi+0x70],ch
     59f:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     5a1:	49                   	dec    ecx
     5a2:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     5a5:	73 6f                	jae    616 <sysEnter_Vector-0x12f9ea>
     5a7:	6c                   	ins    BYTE PTR es:[edi],dx
     5a8:	76 65                	jbe    60f <sysEnter_Vector-0x12f9f1>
     5aa:	50                   	push   eax
     5ab:	61                   	popa   
     5ac:	74 68                	je     616 <sysEnter_Vector-0x12f9ea>
     5ae:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     5b1:	5f                   	pop    edi
     5b2:	6c                   	ins    BYTE PTR es:[edi],dx
     5b3:	61                   	popa   
     5b4:	73 74                	jae    62a <sysEnter_Vector-0x12f9d6>
     5b6:	6d                   	ins    DWORD PTR es:[edi],dx
     5b7:	6f                   	outs   dx,DWORD PTR ds:[esi]
     5b8:	64 00 70 6f          	add    BYTE PTR fs:[eax+0x6f],dh
     5bc:	73 69                	jae    627 <sysEnter_Vector-0x12f9d9>
     5be:	74 69                	je     629 <sysEnter_Vector-0x12f9d7>
     5c0:	6f                   	outs   dx,DWORD PTR ds:[esi]
     5c1:	6e                   	outs   dx,BYTE PTR ds:[esi]
     5c2:	00 77 72             	add    BYTE PTR [edi+0x72],dh
     5c5:	69 74 65 49 00 73 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x49],0x65657300
     5cc:	65 
     5cd:	6b 00 77             	imul   eax,DWORD PTR [eax],0x77
     5d0:	68 65 6e 63 65       	push   0x65636e65
     5d5:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     5d8:	74 6c                	je     646 <sysEnter_Vector-0x12f9ba>
     5da:	69 6e 65 00 67 65 74 	imul   ebp,DWORD PTR [esi+0x65],0x74656700
     5e1:	6c                   	ins    BYTE PTR es:[edi],dx
     5e2:	69 6e 65 52 65 74 75 	imul   ebp,DWORD PTR [esi+0x65],0x75746552
     5e9:	72 6e                	jb     659 <sysEnter_Vector-0x12f9a7>
     5eb:	00 66 72             	add    BYTE PTR [esi+0x72],ah
     5ee:	65 6f                	outs   dx,DWORD PTR gs:[esi]
     5f0:	70 65                	jo     657 <sysEnter_Vector-0x12f9a9>
     5f2:	6e                   	outs   dx,BYTE PTR ds:[esi]
     5f3:	00 6c 69 6e          	add    BYTE PTR [ecx+ebp*2+0x6e],ch
     5f7:	65                   	gs
     5f8:	54                   	push   esp
     5f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     5fa:	4f                   	dec    edi
     5fb:	75 74                	jne    671 <sysEnter_Vector-0x12f98f>
     5fd:	70 75                	jo     674 <sysEnter_Vector-0x12f98c>
     5ff:	74 00                	je     601 <sysEnter_Vector-0x12f9ff>
     601:	63 6c 75 73          	arpl   WORD PTR [ebp+esi*2+0x73],bp
     605:	74 65                	je     66c <sysEnter_Vector-0x12f994>
     607:	72 00                	jb     609 <sysEnter_Vector-0x12f9f7>
     609:	61                   	popa   
     60a:	63 63 65             	arpl   WORD PTR [ebx+0x65],sp
     60d:	73 73                	jae    682 <sysEnter_Vector-0x12f97e>
     60f:	5f                   	pop    edi
     610:	64                   	fs
     611:	61                   	popa   
     612:	74 65                	je     679 <sysEnter_Vector-0x12f987>
     614:	00 73 66             	add    BYTE PTR [ebx+0x66],dh
     617:	73 74                	jae    68d <sysEnter_Vector-0x12f973>
     619:	61                   	popa   
     61a:	74 00                	je     61c <sysEnter_Vector-0x12f9e4>
     61c:	77 72                	ja     690 <sysEnter_Vector-0x12f970>
     61e:	69 74 65 00 75 6e 6c 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x696c6e75
     625:	69 
     626:	6e                   	outs   dx,BYTE PTR ds:[esi]
     627:	6b 00 65             	imul   eax,DWORD PTR [eax],0x65
     62a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     62b:	74 72                	je     69f <sysEnter_Vector-0x12f961>
     62d:	69 65 73 00 66 69 6c 	imul   esp,DWORD PTR [ebp+0x73],0x6c696600
     634:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     636:	61                   	popa   
     637:	6d                   	ins    DWORD PTR es:[edi],dx
     638:	65 00 6f 75          	add    BYTE PTR gs:[edi+0x75],ch
     63c:	74 50                	je     68e <sysEnter_Vector-0x12f972>
     63e:	61                   	popa   
     63f:	74 68                	je     6a9 <sysEnter_Vector-0x12f957>
     641:	00 6c 69 6e          	add    BYTE PTR [ecx+ebp*2+0x6e],ch
     645:	65                   	gs
     646:	70 74                	jo     6bc <sysEnter_Vector-0x12f944>
     648:	72 00                	jb     64a <sysEnter_Vector-0x12f9b6>
     64a:	69 73 5f 64 69 72 00 	imul   esi,DWORD PTR [ebx+0x5f],0x726964
     651:	64 69 72 65 6e 74 72 	imul   esi,DWORD PTR fs:[edx+0x65],0x7972746e
     658:	79 
     659:	5f                   	pop    edi
     65a:	74 00                	je     65c <sysEnter_Vector-0x12f9a4>
     65c:	66                   	data16
     65d:	73 74                	jae    6d3 <sysEnter_Vector-0x12f92d>
     65f:	61                   	popa   
     660:	74 5f                	je     6c1 <sysEnter_Vector-0x12f93f>
     662:	74 00                	je     664 <sysEnter_Vector-0x12f99c>
     664:	74 6f                	je     6d5 <sysEnter_Vector-0x12f92b>
     666:	6b 65 6e 00          	imul   esp,DWORD PTR [ebp+0x6e],0x0
     66a:	5f                   	pop    edi
     66b:	42                   	inc    edx
     66c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     66d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     66e:	6c                   	ins    BYTE PTR es:[edi],dx
     66f:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     672:	74 64                	je     6d8 <sysEnter_Vector-0x12f928>
     674:	69 72 49 00 64 69 72 	imul   esi,DWORD PTR [edx+0x49],0x72696400
     67b:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     67d:	74 72                	je     6f1 <sysEnter_Vector-0x12f90f>
     67f:	79 00                	jns    681 <sysEnter_Vector-0x12f97f>
     681:	72 65                	jb     6e8 <sysEnter_Vector-0x12f918>
     683:	61                   	popa   
     684:	64                   	fs
     685:	49                   	dec    ecx
     686:	00 6c 65 6e          	add    BYTE PTR [ebp+eiz*2+0x6e],ch
     68a:	67 74 68             	addr16 je 6f5 <sysEnter_Vector-0x12f90b>
     68d:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     690:	61                   	popa   
     691:	64 00 6d 6f          	add    BYTE PTR fs:[ebp+0x6f],ch
     695:	64 65 00 62 75       	fs add BYTE PTR fs:gs:[edx+0x75],ah
     69a:	66                   	data16
     69b:	66                   	data16
     69c:	65                   	gs
     69d:	72 00                	jb     69f <sysEnter_Vector-0x12f961>
     69f:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
     6a2:	65                   	gs
     6a3:	73 50                	jae    6f5 <sysEnter_Vector-0x12f90b>
     6a5:	61                   	popa   
     6a6:	72 73                	jb     71b <sysEnter_Vector-0x12f8e5>
     6a8:	65 64 00 63 72       	gs add BYTE PTR fs:gs:[ebx+0x72],ah
     6ad:	65                   	gs
     6ae:	61                   	popa   
     6af:	74 65                	je     716 <sysEnter_Vector-0x12f8ea>
     6b1:	5f                   	pop    edi
     6b2:	74 69                	je     71d <sysEnter_Vector-0x12f8e3>
     6b4:	6d                   	ins    DWORD PTR es:[edi],dx
     6b5:	65 00 63 6c          	add    BYTE PTR gs:[ebx+0x6c],ah
     6b9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     6ba:	73 65                	jae    721 <sysEnter_Vector-0x12f8df>
     6bc:	49                   	dec    ecx
     6bd:	00 73 65             	add    BYTE PTR [ebx+0x65],dh
     6c0:	65 6b 49 00 73       	imul   ecx,DWORD PTR gs:[ecx+0x0],0x73
     6c5:	72 63                	jb     72a <sysEnter_Vector-0x12f8d6>
     6c7:	2f                   	das    
     6c8:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     6cf:	75 69                	jne    73a <sysEnter_Vector-0x12f8c6>
     6d1:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6d2:	74 38                	je     70c <sysEnter_Vector-0x12f8f4>
     6d4:	5f                   	pop    edi
     6d5:	74 00                	je     6d7 <sysEnter_Vector-0x12f929>
     6d7:	73 74                	jae    74d <sysEnter_Vector-0x12f8b3>
     6d9:	5f                   	pop    edi
     6da:	73 69                	jae    745 <sysEnter_Vector-0x12f8bb>
     6dc:	7a 65                	jp     743 <sysEnter_Vector-0x12f8bd>
     6de:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     6e1:	73 6f                	jae    752 <sysEnter_Vector-0x12f8ae>
     6e3:	6c                   	ins    BYTE PTR es:[edi],dx
     6e4:	76 65                	jbe    74b <sysEnter_Vector-0x12f8b5>
     6e6:	50                   	push   eax
     6e7:	61                   	popa   
     6e8:	74 68                	je     752 <sysEnter_Vector-0x12f8ae>
     6ea:	5f                   	pop    edi
     6eb:	63 77 64             	arpl   WORD PTR [edi+0x64],si
     6ee:	00 68 61             	add    BYTE PTR [eax+0x61],ch
     6f1:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6f2:	64                   	fs
     6f3:	6c                   	ins    BYTE PTR es:[edi],dx
     6f4:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
     6f8:	73 6f                	jae    769 <sysEnter_Vector-0x12f897>
     6fa:	6c                   	ins    BYTE PTR es:[edi],dx
     6fb:	76 65                	jbe    762 <sysEnter_Vector-0x12f89e>
     6fd:	50                   	push   eax
     6fe:	61                   	popa   
     6ff:	74 68                	je     769 <sysEnter_Vector-0x12f897>
     701:	5f                   	pop    edi
     702:	69 6e 50 61 74 68 00 	imul   ebp,DWORD PTR [esi+0x50],0x687461
     709:	6c                   	ins    BYTE PTR es:[edi],dx
     70a:	4c                   	dec    esp
     70b:	69 6e 65 50 74 72 4c 	imul   ebp,DWORD PTR [esi+0x65],0x4c727450
     712:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     714:	00 66 69             	add    BYTE PTR [esi+0x69],ah
     717:	6c                   	ins    BYTE PTR es:[edi],dx
     718:	65                   	gs
     719:	5f                   	pop    edi
     71a:	63 6c 65 61          	arpl   WORD PTR [ebp+eiz*2+0x61],bp
     71e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     71f:	75 70                	jne    791 <sysEnter_Vector-0x12f86f>
     721:	00 62 79             	add    BYTE PTR [edx+0x79],ah
     724:	74 65                	je     78b <sysEnter_Vector-0x12f875>
     726:	73 52                	jae    77a <sysEnter_Vector-0x12f886>
     728:	65                   	gs
     729:	74 75                	je     7a0 <sysEnter_Vector-0x12f860>
     72b:	72 6e                	jb     79b <sysEnter_Vector-0x12f865>
     72d:	65 64 00 67 65       	gs add BYTE PTR fs:gs:[edi+0x65],ah
     732:	74 64                	je     798 <sysEnter_Vector-0x12f868>
     734:	69 72 00 62 75 66 66 	imul   esi,DWORD PTR [edx+0x0],0x66667562
     73b:	65                   	gs
     73c:	72 43                	jb     781 <sysEnter_Vector-0x12f87f>
     73e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     73f:	75 6e                	jne    7af <sysEnter_Vector-0x12f851>
     741:	74 00                	je     743 <sysEnter_Vector-0x12f8bd>
     743:	67                   	addr16
     744:	65                   	gs
     745:	74 63                	je     7aa <sysEnter_Vector-0x12f856>
     747:	68 61 72 00 67       	push   0x67007261
     74c:	65                   	gs
     74d:	74 73                	je     7c2 <sysEnter_Vector-0x12f83e>
     74f:	00 70 75             	add    BYTE PTR [eax+0x75],dh
     752:	74 63                	je     7b7 <sysEnter_Vector-0x12f849>
     754:	00 70 75             	add    BYTE PTR [eax+0x75],dh
     757:	74 73                	je     7cc <sysEnter_Vector-0x12f834>
     759:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     75c:	78 6c                	js     7ca <sysEnter_Vector-0x12f836>
     75e:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     760:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     763:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
     766:	72 00                	jb     768 <sysEnter_Vector-0x12f898>
     768:	73 72                	jae    7dc <sysEnter_Vector-0x12f824>
     76a:	63 2f                	arpl   WORD PTR [edi],bp
     76c:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
     773:	6e                   	outs   dx,BYTE PTR ds:[esi]
     774:	70 75                	jo     7eb <sysEnter_Vector-0x12f815>
     776:	74 2e                	je     7a6 <sysEnter_Vector-0x12f85a>
     778:	63 00                	arpl   WORD PTR [eax],ax
     77a:	67                   	addr16
     77b:	65                   	gs
     77c:	74 73                	je     7f1 <sysEnter_Vector-0x12f80f>
     77e:	45                   	inc    ebp
     77f:	72 72                	jb     7f3 <sysEnter_Vector-0x12f80d>
     781:	6f                   	outs   dx,DWORD PTR ds:[esi]
     782:	72 00                	jb     784 <sysEnter_Vector-0x12f87c>
     784:	6c                   	ins    BYTE PTR es:[edi],dx
     785:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     788:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     78b:	69 6e 74 00 6c 61 73 	imul   ebp,DWORD PTR [esi+0x74],0x73616c00
     792:	74 53                	je     7e7 <sysEnter_Vector-0x12f819>
     794:	70 61                	jo     7f7 <sysEnter_Vector-0x12f809>
     796:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
     799:	74 72                	je     80d <sysEnter_Vector-0x12f7f3>
     79b:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     79e:	67 44                	addr16 inc esp
     7a0:	61                   	popa   
     7a1:	74 61                	je     804 <sysEnter_Vector-0x12f7fc>
     7a3:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
     7a6:	65                   	gs
     7a7:	65                   	gs
     7a8:	70 54                	jo     7fe <sysEnter_Vector-0x12f802>
     7aa:	69 63 6b 73 00 71 75 	imul   esp,DWORD PTR [ebx+0x6b],0x75710073
     7b1:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7b2:	74 65                	je     819 <sysEnter_Vector-0x12f7e7>
     7b4:	50                   	push   eax
     7b5:	74 72                	je     829 <sysEnter_Vector-0x12f7d7>
     7b7:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
     7ba:	67 76 50             	addr16 jbe 80d <sysEnter_Vector-0x12f7f3>
     7bd:	74 72                	je     831 <sysEnter_Vector-0x12f7cf>
     7bf:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     7c2:	61                   	popa   
     7c3:	72 74                	jb     839 <sysEnter_Vector-0x12f7c7>
     7c5:	5f                   	pop    edi
     7c6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7c7:	66 5f                	pop    di
     7c9:	77 6f                	ja     83a <sysEnter_Vector-0x12f7c6>
     7cb:	72 64                	jb     831 <sysEnter_Vector-0x12f7cf>
     7cd:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     7d1:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
     7d4:	6e                   	outs   dx,BYTE PTR ds:[esi]
     7d5:	69 74 00 73 74 61 74 	imul   esi,DWORD PTR [eax+eax*1+0x73],0x65746174
     7dc:	65 
     7dd:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
     7e0:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
     7e3:	6c                   	ins    BYTE PTR es:[edi],dx
     7e4:	74 69                	je     84f <sysEnter_Vector-0x12f7b1>
     7e6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     7e7:	5f                   	pop    edi
     7e8:	76 61                	jbe    84b <sysEnter_Vector-0x12f7b5>
     7ea:	5f                   	pop    edi
     7eb:	6c                   	ins    BYTE PTR es:[edi],dx
     7ec:	69 73 74 00 73 70 6c 	imul   esi,DWORD PTR [ebx+0x74],0x6c707300
     7f3:	69 74 00 66 6f 72 6b 	imul   esi,DWORD PTR [eax+eax*1+0x66],0x6b726f
     7fa:	00 
     7fb:	73 70                	jae    86d <sysEnter_Vector-0x12f793>
     7fd:	61                   	popa   
     7fe:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
     801:	74 72                	je     875 <sysEnter_Vector-0x12f78b>
     803:	00 74 65 6d          	add    BYTE PTR [ebp+eiz*2+0x6d],dh
     807:	70 00                	jo     809 <sysEnter_Vector-0x12f7f7>
     809:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     80c:	6c                   	ins    BYTE PTR es:[edi],dx
     80d:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
     814:	67 76 00             	addr16 jbe 817 <sysEnter_Vector-0x12f7e9>
     817:	77 61                	ja     87a <sysEnter_Vector-0x12f786>
     819:	69 74 70 69 64 00 44 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65440064
     820:	65 
     821:	62 75 67             	bound  esi,QWORD PTR [ebp+0x67]
     824:	4c                   	dec    esp
     825:	65                   	gs
     826:	76 65                	jbe    88d <sysEnter_Vector-0x12f773>
     828:	6c                   	ins    BYTE PTR es:[edi],dx
     829:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
     82c:	65 63 62 00          	arpl   WORD PTR gs:[edx+0x0],sp
     830:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
     833:	6c                   	ins    BYTE PTR es:[edi],dx
     834:	6e                   	outs   dx,BYTE PTR ds:[esi]
     835:	75 6d                	jne    8a4 <sysEnter_Vector-0x12f75c>
     837:	00 64 62 6c          	add    BYTE PTR [edx+eiz*2+0x6c],ah
     83b:	71 75                	jno    8b2 <sysEnter_Vector-0x12f74e>
     83d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     83e:	74 65                	je     8a5 <sysEnter_Vector-0x12f75b>
     840:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
     843:	65                   	gs
     844:	65                   	gs
     845:	70 00                	jo     847 <sysEnter_Vector-0x12f7b9>
     847:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     84a:	6c                   	ins    BYTE PTR es:[edi],dx
     84b:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
     852:	67 76 49             	addr16 jbe 89e <sysEnter_Vector-0x12f762>
     855:	00 64 6f 5f          	add    BYTE PTR [edi+ebp*2+0x5f],ah
     859:	73 79                	jae    8d4 <sysEnter_Vector-0x12f72c>
     85b:	73 63                	jae    8c0 <sysEnter_Vector-0x12f740>
     85d:	61                   	popa   
     85e:	6c                   	ins    BYTE PTR es:[edi],dx
     85f:	6c                   	ins    BYTE PTR es:[edi],dx
     860:	31 00                	xor    DWORD PTR [eax],eax
     862:	64 6f                	outs   dx,DWORD PTR fs:[esi]
     864:	5f                   	pop    edi
     865:	73 79                	jae    8e0 <sysEnter_Vector-0x12f720>
     867:	73 63                	jae    8cc <sysEnter_Vector-0x12f734>
     869:	61                   	popa   
     86a:	6c                   	ins    BYTE PTR es:[edi],dx
     86b:	6c                   	ins    BYTE PTR es:[edi],dx
     86c:	32 00                	xor    al,BYTE PTR [eax]
     86e:	64 6f                	outs   dx,DWORD PTR fs:[esi]
     870:	5f                   	pop    edi
     871:	73 79                	jae    8ec <sysEnter_Vector-0x12f714>
     873:	73 63                	jae    8d8 <sysEnter_Vector-0x12f728>
     875:	61                   	popa   
     876:	6c                   	ins    BYTE PTR es:[edi],dx
     877:	6c                   	ins    BYTE PTR es:[edi],dx
     878:	33 00                	xor    eax,DWORD PTR [eax]
     87a:	64 6f                	outs   dx,DWORD PTR fs:[esi]
     87c:	5f                   	pop    edi
     87d:	73 79                	jae    8f8 <sysEnter_Vector-0x12f708>
     87f:	73 63                	jae    8e4 <sysEnter_Vector-0x12f71c>
     881:	61                   	popa   
     882:	6c                   	ins    BYTE PTR es:[edi],dx
     883:	6c                   	ins    BYTE PTR es:[edi],dx
     884:	34 00                	xor    al,0x0
     886:	5f                   	pop    edi
     887:	5f                   	pop    edi
     888:	6d                   	ins    DWORD PTR es:[edi],dx
     889:	73 00                	jae    88b <sysEnter_Vector-0x12f775>
     88b:	49                   	dec    ecx
     88c:	4e                   	dec    esi
     88d:	5f                   	pop    edi
     88e:	57                   	push   edi
     88f:	4f                   	dec    edi
     890:	52                   	push   edx
     891:	44                   	inc    esp
     892:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
     895:	67 76 5f             	addr16 jbe 8f7 <sysEnter_Vector-0x12f709>
     898:	73 69                	jae    903 <sysEnter_Vector-0x12f6fd>
     89a:	7a 65                	jp     901 <sysEnter_Vector-0x12f6ff>
     89c:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     8a0:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     8a3:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
     8aa:	65 
     8ab:	64 00 69 73          	add    BYTE PTR fs:[ecx+0x73],ch
     8af:	73 70                	jae    921 <sysEnter_Vector-0x12f6df>
     8b1:	61                   	popa   
     8b2:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
     8b5:	5f                   	pop    edi
     8b6:	5f                   	pop    edi
     8b7:	67 6e                	outs   dx,BYTE PTR ds:[si]
     8b9:	75 63                	jne    91e <sysEnter_Vector-0x12f6e2>
     8bb:	5f                   	pop    edi
     8bc:	76 61                	jbe    91f <sysEnter_Vector-0x12f6e1>
     8be:	5f                   	pop    edi
     8bf:	6c                   	ins    BYTE PTR es:[edi],dx
     8c0:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
     8c7:	6e                   	outs   dx,BYTE PTR ds:[esi]
     8c8:	74 64                	je     92e <sysEnter_Vector-0x12f6d2>
     8ca:	49                   	dec    ecx
     8cb:	00 70 61             	add    BYTE PTR [eax+0x61],dh
     8ce:	72 61                	jb     931 <sysEnter_Vector-0x12f6cf>
     8d0:	6d                   	ins    DWORD PTR es:[edi],dx
     8d1:	31 00                	xor    DWORD PTR [eax],eax
     8d3:	70 61                	jo     936 <sysEnter_Vector-0x12f6ca>
     8d5:	72 61                	jb     938 <sysEnter_Vector-0x12f6c8>
     8d7:	6d                   	ins    DWORD PTR es:[edi],dx
     8d8:	32 00                	xor    al,BYTE PTR [eax]
     8da:	70 61                	jo     93d <sysEnter_Vector-0x12f6c3>
     8dc:	72 61                	jb     93f <sysEnter_Vector-0x12f6c1>
     8de:	6d                   	ins    DWORD PTR es:[edi],dx
     8df:	33 00                	xor    eax,DWORD PTR [eax]
     8e1:	70 61                	jo     944 <sysEnter_Vector-0x12f6bc>
     8e3:	72 61                	jb     946 <sysEnter_Vector-0x12f6ba>
     8e5:	6d                   	ins    DWORD PTR es:[edi],dx
     8e6:	34 00                	xor    al,0x0
     8e8:	73 65                	jae    94f <sysEnter_Vector-0x12f6b1>
     8ea:	74 63                	je     94f <sysEnter_Vector-0x12f6b1>
     8ec:	77 64                	ja     952 <sysEnter_Vector-0x12f6ae>
     8ee:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     8f1:	6f                   	outs   dx,DWORD PTR ds:[esi]
     8f2:	67 72 61             	addr16 jb 956 <sysEnter_Vector-0x12f6aa>
     8f5:	6d                   	ins    DWORD PTR es:[edi],dx
     8f6:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
     8f9:	65 63 61 00          	arpl   WORD PTR gs:[ecx+0x0],sp
     8fd:	73 6c                	jae    96b <sysEnter_Vector-0x12f695>
     8ff:	65                   	gs
     900:	65                   	gs
     901:	70 4d                	jo     950 <sysEnter_Vector-0x12f6b0>
     903:	53                   	push   ebx
     904:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
     907:	72 6d                	jb     976 <sysEnter_Vector-0x12f68a>
     909:	61                   	popa   
     90a:	74 00                	je     90c <sysEnter_Vector-0x12f6f4>
     90c:	70 72                	jo     980 <sysEnter_Vector-0x12f680>
     90e:	69 6e 74 42 75 66 66 	imul   ebp,DWORD PTR [esi+0x74],0x66667542
     915:	65                   	gs
     916:	72 00                	jb     918 <sysEnter_Vector-0x12f6e8>
     918:	73 69                	jae    983 <sysEnter_Vector-0x12f67d>
     91a:	67 6e                	outs   dx,BYTE PTR ds:[si]
     91c:	61                   	popa   
     91d:	6c                   	ins    BYTE PTR es:[edi],dx
     91e:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
     921:	65 63 00             	arpl   WORD PTR gs:[eax],ax
     924:	5f                   	pop    edi
     925:	5f                   	pop    edi
     926:	73 65                	jae    98d <sysEnter_Vector-0x12f673>
     928:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     92b:	64                   	fs
     92c:	73 00                	jae    92e <sysEnter_Vector-0x12f6d2>
     92e:	44                   	inc    esp
     92f:	55                   	push   ebp
     930:	4c                   	dec    esp
     931:	4c                   	dec    esp
     932:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     935:	61                   	popa   
     936:	74 65                	je     99d <sysEnter_Vector-0x12f663>
     938:	73 00                	jae    93a <sysEnter_Vector-0x12f6c6>
     93a:	49                   	dec    ecx
     93b:	4e                   	dec    esi
     93c:	5f                   	pop    edi
     93d:	53                   	push   ebx
     93e:	54                   	push   esp
     93f:	52                   	push   edx
     940:	49                   	dec    ecx
     941:	4e                   	dec    esi
     942:	47                   	inc    edi
     943:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     946:	63 2f                	arpl   WORD PTR [edi],bp
     948:	6c                   	ins    BYTE PTR es:[edi],dx
     949:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     950:	4f                   	dec    edi
     951:	53                   	push   ebx
     952:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     955:	61                   	popa   
     956:	72 67                	jb     9bf <sysEnter_Vector-0x12f641>
     958:	63 00                	arpl   WORD PTR [eax],ax
     95a:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     95d:	6c                   	ins    BYTE PTR es:[edi],dx
     95e:	69 6e 65 00 64 6f 5f 	imul   ebp,DWORD PTR [esi+0x65],0x5f6f6400
     965:	73 79                	jae    9e0 <sysEnter_Vector-0x12f620>
     967:	73 63                	jae    9cc <sysEnter_Vector-0x12f634>
     969:	61                   	popa   
     96a:	6c                   	ins    BYTE PTR es:[edi],dx
     96b:	6c                   	ins    BYTE PTR es:[edi],dx
     96c:	30 00                	xor    BYTE PTR [eax],al
     96e:	73 70                	jae    9e0 <sysEnter_Vector-0x12f620>
     970:	6c                   	ins    BYTE PTR es:[edi],dx
     971:	69 74 49 00 6c 69 62 	imul   esi,DWORD PTR [ecx+ecx*2+0x0],0x6362696c
     978:	63 
     979:	5f                   	pop    edi
     97a:	63 6c 65 61          	arpl   WORD PTR [ebp+eiz*2+0x61],bp
     97e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     97f:	75 70                	jne    9f1 <sysEnter_Vector-0x12f60f>
     981:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
     984:	67 76 00             	addr16 jbe 987 <sysEnter_Vector-0x12f679>
     987:	65                   	gs
     988:	78 69                	js     9f3 <sysEnter_Vector-0x12f60d>
     98a:	74 00                	je     98c <sysEnter_Vector-0x12f674>
     98c:	73 74                	jae    a02 <sysEnter_Vector-0x12f5fe>
     98e:	61                   	popa   
     98f:	74 75                	je     a06 <sysEnter_Vector-0x12f5fa>
     991:	73 00                	jae    993 <sysEnter_Vector-0x12f66d>
     993:	73 65                	jae    9fa <sysEnter_Vector-0x12f606>
     995:	74 53                	je     9ea <sysEnter_Vector-0x12f616>
     997:	54                   	push   esp
     998:	44                   	inc    esp
     999:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     99c:	67 48                	addr16 dec eax
     99e:	61                   	popa   
     99f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     9a0:	64                   	fs
     9a1:	6c                   	ins    BYTE PTR es:[edi],dx
     9a2:	65                   	gs
     9a3:	72 00                	jb     9a5 <sysEnter_Vector-0x12f65b>
     9a5:	5f                   	pop    edi
     9a6:	5f                   	pop    edi
     9a7:	74 69                	je     a12 <sysEnter_Vector-0x12f5ee>
     9a9:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
     9ac:	00 74 61 6b          	add    BYTE PTR [ecx+eiz*2+0x6b],dh
     9b0:	65                   	gs
     9b1:	41                   	inc    ecx
     9b2:	44                   	inc    esp
     9b3:	75 6d                	jne    a22 <sysEnter_Vector-0x12f5de>
     9b5:	70 00                	jo     9b7 <sysEnter_Vector-0x12f649>
     9b7:	66 69 6c 65 64 00 6d 	imul   bp,WORD PTR [ebp+eiz*2+0x64],0x6d00
     9be:	6f                   	outs   dx,DWORD PTR ds:[esi]
     9bf:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
     9c6:	6e 
     9c7:	61                   	popa   
     9c8:	6c                   	ins    BYTE PTR es:[edi],dx
     9c9:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
     9cc:	67 73 00             	addr16 jae 9cf <sysEnter_Vector-0x12f631>
     9cf:	70 72                	jo     a43 <sysEnter_Vector-0x12f5bd>
     9d1:	69 6e 74 49 00 73 74 	imul   ebp,DWORD PTR [esi+0x74],0x74730049
     9d8:	6f                   	outs   dx,DWORD PTR ds:[esi]
     9d9:	70 00                	jo     9db <sysEnter_Vector-0x12f625>
     9db:	70 72                	jo     a4f <sysEnter_Vector-0x12f5b1>
     9dd:	69 6e 74 64 00 61 64 	imul   ebp,DWORD PTR [esi+0x74],0x64610064
     9e4:	64                   	fs
     9e5:	72 00                	jb     9e7 <sysEnter_Vector-0x12f619>
     9e7:	73 4d                	jae    a36 <sysEnter_Vector-0x12f5ca>
     9e9:	4d                   	dec    ebp
     9ea:	61                   	popa   
     9eb:	70 53                	jo     a40 <sysEnter_Vector-0x12f5c0>
     9ed:	79 73                	jns    a62 <sysEnter_Vector-0x12f59e>
     9ef:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
     9f2:	6c                   	ins    BYTE PTR es:[edi],dx
     9f3:	00 6f 66             	add    BYTE PTR [edi+0x66],ch
     9f6:	66 5f                	pop    di
     9f8:	74 00                	je     9fa <sysEnter_Vector-0x12f606>
     9fa:	70 61                	jo     a5d <sysEnter_Vector-0x12f5a3>
     9fc:	72 61                	jb     a5f <sysEnter_Vector-0x12f5a1>
     9fe:	6d                   	ins    DWORD PTR es:[edi],dx
     9ff:	73 00                	jae    a01 <sysEnter_Vector-0x12f5ff>
     a01:	66                   	data16
     a02:	6c                   	ins    BYTE PTR es:[edi],dx
     a03:	61                   	popa   
     a04:	67 73 00             	addr16 jae a07 <sysEnter_Vector-0x12f5f9>
     a07:	73 72                	jae    a7b <sysEnter_Vector-0x12f585>
     a09:	63 2f                	arpl   WORD PTR [edi],bp
     a0b:	6c                   	ins    BYTE PTR es:[edi],dx
     a0c:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
     a13:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     a16:	70 72                	jo     a8a <sysEnter_Vector-0x12f576>
     a18:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a19:	74 00                	je     a1b <sysEnter_Vector-0x12f5e5>
     a1b:	6d                   	ins    DWORD PTR es:[edi],dx
     a1c:	6d                   	ins    DWORD PTR es:[edi],dx
     a1d:	61                   	popa   
     a1e:	70 00                	jo     a20 <sysEnter_Vector-0x12f5e0>
     a20:	73 79                	jae    a9b <sysEnter_Vector-0x12f565>
     a22:	73 63                	jae    a87 <sysEnter_Vector-0x12f579>
     a24:	61                   	popa   
     a25:	6c                   	ins    BYTE PTR es:[edi],dx
     a26:	6c                   	ins    BYTE PTR es:[edi],dx
     a27:	5f                   	pop    edi
     a28:	6d                   	ins    DWORD PTR es:[edi],dx
     a29:	6d                   	ins    DWORD PTR es:[edi],dx
     a2a:	61                   	popa   
     a2b:	70 5f                	jo     a8c <sysEnter_Vector-0x12f574>
     a2d:	74 00                	je     a2f <sysEnter_Vector-0x12f5d1>
     a2f:	6d                   	ins    DWORD PTR es:[edi],dx
     a30:	61                   	popa   
     a31:	6c                   	ins    BYTE PTR es:[edi],dx
     a32:	6c                   	ins    BYTE PTR es:[edi],dx
     a33:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a34:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
     a37:	70 72                	jo     aab <sysEnter_Vector-0x12f555>
     a39:	65                   	gs
     a3a:	76 00                	jbe    a3c <sysEnter_Vector-0x12f5c4>
     a3c:	6c                   	ins    BYTE PTR es:[edi],dx
     a3d:	61                   	popa   
     a3e:	73 74                	jae    ab4 <sysEnter_Vector-0x12f54c>
     a40:	48                   	dec    eax
     a41:	52                   	push   edx
     a42:	43                   	inc    ebx
     a43:	72 65                	jb     aaa <sysEnter_Vector-0x12f556>
     a45:	61                   	popa   
     a46:	74 65                	je     aad <sysEnter_Vector-0x12f553>
     a48:	64 00 68 65          	add    BYTE PTR fs:[eax+0x65],ch
     a4c:	61                   	popa   
     a4d:	70 43                	jo     a92 <sysEnter_Vector-0x12f56e>
     a4f:	75 72                	jne    ac3 <sysEnter_Vector-0x12f53d>
     a51:	72 00                	jb     a53 <sysEnter_Vector-0x12f5ad>
     a53:	6e                   	outs   dx,BYTE PTR ds:[esi]
     a54:	65                   	gs
     a55:	78 74                	js     acb <sysEnter_Vector-0x12f535>
     a57:	00 68 65             	add    BYTE PTR [eax+0x65],ch
     a5a:	61                   	popa   
     a5b:	70 72                	jo     acf <sysEnter_Vector-0x12f531>
     a5d:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
     a61:	00 68 65             	add    BYTE PTR [eax+0x65],ch
     a64:	61                   	popa   
     a65:	70 42                	jo     aa9 <sysEnter_Vector-0x12f557>
     a67:	61                   	popa   
     a68:	73 65                	jae    acf <sysEnter_Vector-0x12f531>
     a6a:	00 66 72             	add    BYTE PTR [esi+0x72],ah
     a6d:	65                   	gs
     a6e:	65                   	gs
     a6f:	49                   	dec    ecx
     a70:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     a73:	72 6b                	jb     ae0 <sysEnter_Vector-0x12f520>
     a75:	65                   	gs
     a76:	72 00                	jb     a78 <sysEnter_Vector-0x12f588>
     a78:	6e                   	outs   dx,BYTE PTR ds:[esi]
     a79:	65                   	gs
     a7a:	77 48                	ja     ac4 <sysEnter_Vector-0x12f53c>
     a7c:	65                   	gs
     a7d:	61                   	popa   
     a7e:	70 52                	jo     ad2 <sysEnter_Vector-0x12f52e>
     a80:	65                   	gs
     a81:	71 75                	jno    af8 <sysEnter_Vector-0x12f508>
     a83:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
     a8a:	75 6c                	jne    af8 <sysEnter_Vector-0x12f508>
     a8c:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
     a93:	75 65                	jne    afa <sysEnter_Vector-0x12f506>
     a95:	73 74                	jae    b0b <sysEnter_Vector-0x12f4f5>
     a97:	00 66 69             	add    BYTE PTR [esi+0x69],ah
     a9a:	6c                   	ins    BYTE PTR es:[edi],dx
     a9b:	6c                   	ins    BYTE PTR es:[edi],dx
     a9c:	65                   	gs
     a9d:	72 00                	jb     a9f <sysEnter_Vector-0x12f561>
     a9f:	69 6e 55 73 65 00 73 	imul   ebp,DWORD PTR [esi+0x55],0x73006573
     aa6:	68 65 61 70 00       	push   0x706165
     aab:	69 6e 69 74 6d 61 6c 	imul   ebp,DWORD PTR [esi+0x69],0x6c616d74
     ab2:	6c                   	ins    BYTE PTR es:[edi],dx
     ab3:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ab4:	63 00                	arpl   WORD PTR [eax],ax
     ab6:	72 65                	jb     b1d <sysEnter_Vector-0x12f4e3>
     ab8:	71 75                	jno    b2f <sysEnter_Vector-0x12f4d1>
     aba:	65                   	gs
     abb:	73 74                	jae    b31 <sysEnter_Vector-0x12f4cf>
     abd:	53                   	push   ebx
     abe:	69 7a 65 00 6d 61 6c 	imul   edi,DWORD PTR [edx+0x65],0x6c616d00
     ac5:	6c                   	ins    BYTE PTR es:[edi],dx
     ac6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ac7:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
     aca:	6c                   	ins    BYTE PTR es:[edi],dx
     acb:	65                   	gs
     acc:	61                   	popa   
     acd:	6e                   	outs   dx,BYTE PTR ds:[esi]
     ace:	75 70                	jne    b40 <sysEnter_Vector-0x12f4c0>
     ad0:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
     ad3:	6c                   	ins    BYTE PTR es:[edi],dx
     ad4:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ad5:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
     ad8:	65                   	gs
     ad9:	64                   	fs
     ada:	50                   	push   eax
     adb:	74 72                	je     b4f <sysEnter_Vector-0x12f4b1>
     add:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
     ae0:	77 6c                	ja     b4e <sysEnter_Vector-0x12f4b2>
     ae2:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     ae4:	00 53 61             	add    BYTE PTR [ebx+0x61],dl
     ae7:	6e                   	outs   dx,BYTE PTR ds:[esi]
     ae8:	69 74 79 4c 6f 6f 70 	imul   esi,DWORD PTR [ecx+edi*2+0x4c],0x706f6f
     aef:	00 
     af0:	6e                   	outs   dx,BYTE PTR ds:[esi]
     af1:	65                   	gs
     af2:	77 53                	ja     b47 <sysEnter_Vector-0x12f4b9>
     af4:	69 7a 65 00 72 65 61 	imul   edi,DWORD PTR [edx+0x65],0x61657200
     afb:	6c                   	ins    BYTE PTR es:[edi],dx
     afc:	53                   	push   ebx
     afd:	69 7a 65 00 6e 65 65 	imul   edi,DWORD PTR [edx+0x65],0x65656e00
     b04:	64 65 64 00 72 65    	fs gs add BYTE PTR fs:gs:[edx+0x65],dh
     b0a:	61                   	popa   
     b0b:	6c                   	ins    BYTE PTR es:[edi],dx
     b0c:	6c                   	ins    BYTE PTR es:[edi],dx
     b0d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b0e:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
     b11:	75 73                	jne    b86 <sysEnter_Vector-0x12f47a>
     b13:	65                   	gs
     b14:	73 00                	jae    b16 <sysEnter_Vector-0x12f4ea>
     b16:	68 65 61 70 72       	push   0x72706165
     b1b:	65 63 00             	arpl   WORD PTR gs:[eax],ax
     b1e:	66                   	data16
     b1f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b20:	65                   	gs
     b21:	77 70                	ja     b93 <sysEnter_Vector-0x12f46d>
     b23:	74 72                	je     b97 <sysEnter_Vector-0x12f469>
     b25:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     b28:	63 2f                	arpl   WORD PTR [edi],bp
     b2a:	6d                   	ins    DWORD PTR es:[edi],dx
     b2b:	61                   	popa   
     b2c:	6c                   	ins    BYTE PTR es:[edi],dx
     b2d:	6c                   	ins    BYTE PTR es:[edi],dx
     b2e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b2f:	63 2e                	arpl   WORD PTR [esi],bp
     b31:	63 00                	arpl   WORD PTR [eax],ax
     b33:	68 65 61 70 50       	push   0x50706165
     b38:	74 72                	je     bac <sysEnter_Vector-0x12f454>
     b3a:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
     b3d:	6c                   	ins    BYTE PTR es:[edi],dx
     b3e:	64                   	fs
     b3f:	70 74                	jo     bb5 <sysEnter_Vector-0x12f44b>
     b41:	72 00                	jb     b43 <sysEnter_Vector-0x12f4bd>
     b43:	66                   	data16
     b44:	72 65                	jb     bab <sysEnter_Vector-0x12f455>
     b46:	65 00 66 70          	add    BYTE PTR gs:[esi+0x70],ah
     b4a:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b4b:	69 6e 74 65 72 00 53 	imul   ebp,DWORD PTR [esi+0x74],0x53007265
     b52:	61                   	popa   
     b53:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b54:	69 74 79 4c 6f 6f 70 	imul   esi,DWORD PTR [ecx+edi*2+0x4c],0x32706f6f
     b5b:	32 
     b5c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     b5f:	6c                   	ins    BYTE PTR es:[edi],dx
     b60:	6c                   	ins    BYTE PTR es:[edi],dx
     b61:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b62:	63 46 69             	arpl   WORD PTR [esi+0x69],ax
     b65:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b66:	64                   	fs
     b67:	41                   	inc    ecx
     b68:	76 61                	jbe    bcb <sysEnter_Vector-0x12f435>
     b6a:	69 6c 61 62 6c 65 4d 	imul   ebp,DWORD PTR [ecx+eiz*2+0x62],0x654d656c
     b71:	65 
     b72:	6d                   	ins    DWORD PTR es:[edi],dx
     b73:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b74:	72 79                	jb     bef <sysEnter_Vector-0x12f411>
     b76:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     b79:	61                   	popa   
     b7a:	6c                   	ins    BYTE PTR es:[edi],dx
     b7b:	6c                   	ins    BYTE PTR es:[edi],dx
     b7c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b7d:	63 00                	arpl   WORD PTR [eax],ax
     b7f:	68 65 61 70 45       	push   0x45706165
     b84:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b85:	64 00 6d 61          	add    BYTE PTR fs:[ebp+0x61],ch
     b89:	6c                   	ins    BYTE PTR es:[edi],dx
     b8a:	6c                   	ins    BYTE PTR es:[edi],dx
     b8b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b8c:	63 53 61             	arpl   WORD PTR [ebx+0x61],dx
     b8f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b90:	69 74 79 43 68 65 63 	imul   esi,DWORD PTR [ecx+edi*2+0x43],0x6b636568
     b97:	6b 
     b98:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
     b9b:	6d                   	ins    DWORD PTR es:[edi],dx
     b9c:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     b9f:	49                   	dec    ecx
     ba0:	00 64 65 73          	add    BYTE PTR [ebp+eiz*2+0x73],ah
     ba4:	74 00                	je     ba6 <sysEnter_Vector-0x12f45a>
     ba6:	6d                   	ins    DWORD PTR es:[edi],dx
     ba7:	65                   	gs
     ba8:	6d                   	ins    DWORD PTR es:[edi],dx
     ba9:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     bac:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     baf:	63 2f                	arpl   WORD PTR [edi],bp
     bb1:	6d                   	ins    DWORD PTR es:[edi],dx
     bb2:	65                   	gs
     bb3:	6d                   	ins    DWORD PTR es:[edi],dx
     bb4:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     bb7:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     bba:	73 72                	jae    c2e <sysEnter_Vector-0x12f3d2>
     bbc:	63 2f                	arpl   WORD PTR [edi],bp
     bbe:	6d                   	ins    DWORD PTR es:[edi],dx
     bbf:	65                   	gs
     bc0:	6d                   	ins    DWORD PTR es:[edi],dx
     bc1:	73 65                	jae    c28 <sysEnter_Vector-0x12f3d8>
     bc3:	74 2e                	je     bf3 <sysEnter_Vector-0x12f40d>
     bc5:	63 00                	arpl   WORD PTR [eax],ax
     bc7:	6d                   	ins    DWORD PTR es:[edi],dx
     bc8:	65                   	gs
     bc9:	6d                   	ins    DWORD PTR es:[edi],dx
     bca:	73 65                	jae    c31 <sysEnter_Vector-0x12f3cf>
     bcc:	74 00                	je     bce <sysEnter_Vector-0x12f432>
     bce:	6d                   	ins    DWORD PTR es:[edi],dx
     bcf:	65                   	gs
     bd0:	6d                   	ins    DWORD PTR es:[edi],dx
     bd1:	73 65                	jae    c38 <sysEnter_Vector-0x12f3c8>
     bd3:	74 49                	je     c1e <sysEnter_Vector-0x12f3e2>
     bd5:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
     bd8:	61                   	popa   
     bd9:	6c                   	ins    BYTE PTR es:[edi],dx
     bda:	00 66 56             	add    BYTE PTR [esi+0x56],ah
     bdd:	61                   	popa   
     bde:	6c                   	ins    BYTE PTR es:[edi],dx
     bdf:	00 6f 6c             	add    BYTE PTR [edi+0x6c],ch
     be2:	64                   	fs
     be3:	66                   	data16
     be4:	64 00 64 75 70       	add    BYTE PTR fs:[ebp+esi*2+0x70],ah
     be9:	33 00                	xor    eax,DWORD PTR [eax]
     beb:	6e                   	outs   dx,BYTE PTR ds:[esi]
     bec:	65                   	gs
     bed:	77 66                	ja     c55 <sysEnter_Vector-0x12f3ab>
     bef:	64 00 70 69          	add    BYTE PTR fs:[eax+0x69],dh
     bf3:	70 65                	jo     c5a <sysEnter_Vector-0x12f3a6>
     bf5:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     bf8:	63 2f                	arpl   WORD PTR [edi],bp
     bfa:	70 69                	jo     c65 <sysEnter_Vector-0x12f39b>
     bfc:	70 65                	jo     c63 <sysEnter_Vector-0x12f39d>
     bfe:	5f                   	pop    edi
     bff:	6c                   	ins    BYTE PTR es:[edi],dx
     c00:	69 62 2e 63 00 70 69 	imul   esp,DWORD PTR [edx+0x2e],0x69700063
     c07:	70 65                	jo     c6e <sysEnter_Vector-0x12f392>
     c09:	66                   	data16
     c0a:	64 00 73 72          	add    BYTE PTR fs:[ebx+0x72],dh
     c0e:	63 2f                	arpl   WORD PTR [edi],bp
     c10:	70 72                	jo     c84 <sysEnter_Vector-0x12f37c>
     c12:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c13:	63 69 6e             	arpl   WORD PTR [ecx+0x6e],bp
     c16:	66 6f                	outs   dx,WORD PTR ds:[esi]
     c18:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     c1b:	74 6d                	je     c8a <sysEnter_Vector-0x12f376>
     c1d:	5f                   	pop    edi
     c1e:	68 6f 75 72 00       	push   0x72756f
     c23:	72 75                	jb     c9a <sysEnter_Vector-0x12f366>
     c25:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c26:	74 69                	je     c91 <sysEnter_Vector-0x12f36f>
     c28:	6d                   	ins    DWORD PTR es:[edi],dx
     c29:	65                   	gs
     c2a:	5f                   	pop    edi
     c2b:	73 65                	jae    c92 <sysEnter_Vector-0x12f36e>
     c2d:	63 73 00             	arpl   WORD PTR [ebx+0x0],si
     c30:	74 6d                	je     c9f <sysEnter_Vector-0x12f361>
     c32:	5f                   	pop    edi
     c33:	7a 6f                	jp     ca4 <sysEnter_Vector-0x12f35c>
     c35:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c36:	65 00 73 74          	add    BYTE PTR gs:[ebx+0x74],dh
     c3a:	61                   	popa   
     c3b:	74 42                	je     c7f <sysEnter_Vector-0x12f381>
     c3d:	75 66                	jne    ca5 <sysEnter_Vector-0x12f35b>
     c3f:	66                   	data16
     c40:	65                   	gs
     c41:	72 00                	jb     c43 <sysEnter_Vector-0x12f3bd>
     c43:	6c                   	ins    BYTE PTR es:[edi],dx
     c44:	61                   	popa   
     c45:	73 74                	jae    cbb <sysEnter_Vector-0x12f345>
     c47:	55                   	push   ebp
     c48:	70 64                	jo     cae <sysEnter_Vector-0x12f352>
     c4a:	61                   	popa   
     c4b:	74 65                	je     cb2 <sysEnter_Vector-0x12f34e>
     c4d:	49                   	dec    ecx
     c4e:	74 65                	je     cb5 <sysEnter_Vector-0x12f34b>
     c50:	72 61                	jb     cb3 <sysEnter_Vector-0x12f34d>
     c52:	74 69                	je     cbd <sysEnter_Vector-0x12f343>
     c54:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c55:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c56:	00 64 69 72          	add    BYTE PTR [ecx+ebp*2+0x72],ah
     c5a:	45                   	inc    ebp
     c5b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c5c:	74 72                	je     cd0 <sysEnter_Vector-0x12f330>
     c5e:	69 65 73 00 62 75 69 	imul   esp,DWORD PTR [ebp+0x73],0x69756200
     c65:	6c                   	ins    BYTE PTR es:[edi],dx
     c66:	64                   	fs
     c67:	50                   	push   eax
     c68:	72 6f                	jb     cd9 <sysEnter_Vector-0x12f327>
     c6a:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     c6d:	66 6f                	outs   dx,WORD PTR ds:[esi]
     c6f:	54                   	push   esp
     c70:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
     c74:	6d                   	ins    DWORD PTR es:[edi],dx
     c75:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c76:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c77:	00 62 75             	add    BYTE PTR [edx+0x75],ah
     c7a:	69 6c 64 41 6c 6c 50 	imul   ebp,DWORD PTR [esp+eiz*2+0x41],0x72506c6c
     c81:	72 
     c82:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c83:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     c86:	66 6f                	outs   dx,WORD PTR ds:[esi]
     c88:	54                   	push   esp
     c89:	73 00                	jae    c8b <sysEnter_Vector-0x12f375>
     c8b:	74 6d                	je     cfa <sysEnter_Vector-0x12f306>
     c8d:	5f                   	pop    edi
     c8e:	79 65                	jns    cf5 <sysEnter_Vector-0x12f30b>
     c90:	61                   	popa   
     c91:	72 00                	jb     c93 <sysEnter_Vector-0x12f36d>
     c93:	69 74 65 72 61 74 69 	imul   esi,DWORD PTR [ebp+eiz*2+0x72],0x6f697461
     c9a:	6f 
     c9b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c9c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     c9f:	61                   	popa   
     ca0:	74 69                	je     d0b <sysEnter_Vector-0x12f2f5>
     ca2:	6e                   	outs   dx,BYTE PTR ds:[esi]
     ca3:	66 6f                	outs   dx,WORD PTR ds:[esi]
     ca5:	00 74 6f 70          	add    BYTE PTR [edi+ebp*2+0x70],dh
     ca9:	69 6e 66 6f 00 62 75 	imul   ebp,DWORD PTR [esi+0x66],0x7562006f
     cb0:	69 6c 64 50 72 6f 63 	imul   ebp,DWORD PTR [esp+eiz*2+0x50],0x49636f72
     cb7:	49 
     cb8:	6e                   	outs   dx,BYTE PTR ds:[esi]
     cb9:	66 6f                	outs   dx,WORD PTR ds:[esi]
     cbb:	54                   	push   esp
     cbc:	49                   	dec    ecx
     cbd:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
     cc1:	69 73 64 73 74 00 76 	imul   esi,DWORD PTR [ebx+0x64],0x76007473
     cc8:	69 72 74 75 61 6c 53 	imul   esi,DWORD PTR [edx+0x74],0x536c6175
     ccf:	69 7a 65 00 70 72 69 	imul   edi,DWORD PTR [edx+0x65],0x69727000
     cd6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     cd7:	72 69                	jb     d42 <sysEnter_Vector-0x12f2be>
     cd9:	74 79                	je     d54 <sysEnter_Vector-0x12f2ac>
     cdb:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
     cde:	6d                   	ins    DWORD PTR es:[edi],dx
     cdf:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ce0:	72 79                	jb     d5b <sysEnter_Vector-0x12f2a5>
     ce2:	53                   	push   ebx
     ce3:	69 7a 65 00 70 72 6f 	imul   edi,DWORD PTR [edx+0x65],0x6f727000
     cea:	63 69 6e             	arpl   WORD PTR [ecx+0x6e],bp
     ced:	66 6f                	outs   dx,WORD PTR ds:[esi]
     cef:	00 74 6f 74          	add    BYTE PTR [edi+ebp*2+0x74],dh
     cf3:	61                   	popa   
     cf4:	6c                   	ins    BYTE PTR es:[edi],dx
     cf5:	54                   	push   esp
     cf6:	69 63 6b 73 00 70 72 	imul   esp,DWORD PTR [ebx+0x6b],0x72700073
     cfd:	6f                   	outs   dx,DWORD PTR ds:[esi]
     cfe:	63 43 6f             	arpl   WORD PTR [ebx+0x6f],ax
     d01:	75 6e                	jne    d71 <sysEnter_Vector-0x12f28f>
     d03:	74 00                	je     d05 <sysEnter_Vector-0x12f2fb>
     d05:	74 6d                	je     d74 <sysEnter_Vector-0x12f28c>
     d07:	5f                   	pop    edi
     d08:	6d                   	ins    DWORD PTR es:[edi],dx
     d09:	69 6e 00 74 6d 5f 79 	imul   ebp,DWORD PTR [esi+0x0],0x795f6d74
     d10:	64                   	fs
     d11:	61                   	popa   
     d12:	79 00                	jns    d14 <sysEnter_Vector-0x12f2ec>
     d14:	6d                   	ins    DWORD PTR es:[edi],dx
     d15:	61                   	popa   
     d16:	6a 6f                	push   0x6f
     d18:	72 46                	jb     d60 <sysEnter_Vector-0x12f2a0>
     d1a:	61                   	popa   
     d1b:	75 6c                	jne    d89 <sysEnter_Vector-0x12f277>
     d1d:	74 73                	je     d92 <sysEnter_Vector-0x12f26e>
     d1f:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
     d23:	74 54                	je     d79 <sysEnter_Vector-0x12f287>
     d25:	69 63 6b 73 00 74 69 	imul   esp,DWORD PTR [ebx+0x6b],0x69740073
     d2c:	6d                   	ins    DWORD PTR es:[edi],dx
     d2d:	65                   	gs
     d2e:	5f                   	pop    edi
     d2f:	74 00                	je     d31 <sysEnter_Vector-0x12f2cf>
     d31:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d32:	61                   	popa   
     d33:	6d                   	ins    DWORD PTR es:[edi],dx
     d34:	65 32 00             	xor    al,BYTE PTR gs:[eax]
     d37:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d38:	61                   	popa   
     d39:	6d                   	ins    DWORD PTR es:[edi],dx
     d3a:	65 33 00             	xor    eax,DWORD PTR gs:[eax]
     d3d:	63 75 72             	arpl   WORD PTR [ebp+0x72],si
     d40:	72 50                	jb     d92 <sysEnter_Vector-0x12f26e>
     d42:	72 6f                	jb     db3 <sysEnter_Vector-0x12f24d>
     d44:	63 00                	arpl   WORD PTR [eax],ax
     d46:	69 70 69 64 00 74 6d 	imul   esi,DWORD PTR [eax+0x69],0x6d740064
     d4d:	5f                   	pop    edi
     d4e:	67 6d                	ins    DWORD PTR es:[di],dx
     d50:	74 6f                	je     dc1 <sysEnter_Vector-0x12f23f>
     d52:	66                   	data16
     d53:	66                   	data16
     d54:	00 74 6f 6b          	add    BYTE PTR [edi+ebp*2+0x6b],dh
     d58:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     d5a:	4e                   	dec    esi
     d5b:	75 6d                	jne    dca <sysEnter_Vector-0x12f236>
     d5d:	62 65 72             	bound  esp,QWORD PTR [ebp+0x72]
     d60:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     d63:	74 65                	je     dca <sysEnter_Vector-0x12f236>
     d65:	72 76                	jb     ddd <sysEnter_Vector-0x12f223>
     d67:	61                   	popa   
     d68:	6c                   	ins    BYTE PTR es:[edi],dx
     d69:	54                   	push   esp
     d6a:	69 63 6b 73 00 73 50 	imul   esp,DWORD PTR [ebx+0x6b],0x50730073
     d71:	72 6f                	jb     de2 <sysEnter_Vector-0x12f21e>
     d73:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     d76:	66 6f                	outs   dx,WORD PTR ds:[esi]
     d78:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     d7b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d7c:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     d7f:	66 6f                	outs   dx,WORD PTR ds:[esi]
     d81:	5f                   	pop    edi
     d82:	74 00                	je     d84 <sysEnter_Vector-0x12f27c>
     d84:	74 6d                	je     df3 <sysEnter_Vector-0x12f20d>
     d86:	5f                   	pop    edi
     d87:	77 64                	ja     ded <sysEnter_Vector-0x12f213>
     d89:	61                   	popa   
     d8a:	79 00                	jns    d8c <sysEnter_Vector-0x12f274>
     d8c:	74 6d                	je     dfb <sysEnter_Vector-0x12f205>
     d8e:	5f                   	pop    edi
     d8f:	6d                   	ins    DWORD PTR es:[edi],dx
     d90:	64                   	fs
     d91:	61                   	popa   
     d92:	79 00                	jns    d94 <sysEnter_Vector-0x12f26c>
     d94:	74 69                	je     dff <sysEnter_Vector-0x12f201>
     d96:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
     d99:	50                   	push   eax
     d9a:	65                   	gs
     d9b:	72 55                	jb     df2 <sysEnter_Vector-0x12f20e>
     d9d:	70 64                	jo     e03 <sysEnter_Vector-0x12f1fd>
     d9f:	61                   	popa   
     da0:	74 65                	je     e07 <sysEnter_Vector-0x12f1f9>
     da2:	49                   	dec    ecx
     da3:	6e                   	outs   dx,BYTE PTR ds:[esi]
     da4:	74 65                	je     e0b <sysEnter_Vector-0x12f1f5>
     da6:	72 76                	jb     e1e <sysEnter_Vector-0x12f1e2>
     da8:	61                   	popa   
     da9:	6c                   	ins    BYTE PTR es:[edi],dx
     daa:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
     dae:	73 65                	jae    e15 <sysEnter_Vector-0x12f1eb>
     db0:	63 00                	arpl   WORD PTR [eax],ax
     db2:	6d                   	ins    DWORD PTR es:[edi],dx
     db3:	69 6e 6f 72 46 61 75 	imul   ebp,DWORD PTR [esi+0x6f],0x75614672
     dba:	6c                   	ins    BYTE PTR es:[edi],dx
     dbb:	74 73                	je     e30 <sysEnter_Vector-0x12f1d0>
     dbd:	00 70 70             	add    BYTE PTR [eax+0x70],dh
     dc0:	69 64 00 66 69 65 6c 	imul   esp,DWORD PTR [eax+eax*1+0x66],0x646c6569
     dc7:	64 
     dc8:	5f                   	pop    edi
     dc9:	77 69                	ja     e34 <sysEnter_Vector-0x12f1cc>
     dcb:	64                   	fs
     dcc:	74 68                	je     e36 <sysEnter_Vector-0x12f1ca>
     dce:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     dd1:	70 65                	jo     e38 <sysEnter_Vector-0x12f1c8>
     dd3:	61                   	popa   
     dd4:	74 00                	je     dd6 <sysEnter_Vector-0x12f22a>
     dd6:	6c                   	ins    BYTE PTR es:[edi],dx
     dd7:	6f                   	outs   dx,DWORD PTR ds:[esi]
     dd8:	63 61 73             	arpl   WORD PTR [ecx+0x73],sp
     ddb:	65 00 5f 5f          	add    BYTE PTR gs:[edi+0x5f],bl
     ddf:	72 65                	jb     e46 <sysEnter_Vector-0x12f1ba>
     de1:	73 00                	jae    de3 <sysEnter_Vector-0x12f21d>
     de3:	73 72                	jae    e57 <sysEnter_Vector-0x12f1a9>
     de5:	63 2f                	arpl   WORD PTR [edi],bp
     de7:	73 70                	jae    e59 <sysEnter_Vector-0x12f1a7>
     de9:	72 69                	jb     e54 <sysEnter_Vector-0x12f1ac>
     deb:	6e                   	outs   dx,BYTE PTR ds:[esi]
     dec:	74 66                	je     e54 <sysEnter_Vector-0x12f1ac>
     dee:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     df1:	64 69 67 69 74 73 00 	imul   esp,DWORD PTR fs:[edi+0x69],0x76007374
     df8:	76 
     df9:	73 70                	jae    e6b <sysEnter_Vector-0x12f195>
     dfb:	72 69                	jb     e66 <sysEnter_Vector-0x12f19a>
     dfd:	6e                   	outs   dx,BYTE PTR ds:[esi]
     dfe:	74 66                	je     e66 <sysEnter_Vector-0x12f19a>
     e00:	00 71 75             	add    BYTE PTR [ecx+0x75],dh
     e03:	61                   	popa   
     e04:	6c                   	ins    BYTE PTR es:[edi],dx
     e05:	69 66 69 65 72 00 73 	imul   esp,DWORD PTR [esi+0x69],0x73007265
     e0c:	6b 69 70 5f          	imul   ebp,DWORD PTR [ecx+0x70],0x5f
     e10:	61                   	popa   
     e11:	74 6f                	je     e82 <sysEnter_Vector-0x12f17e>
     e13:	69 00 73 70 72 69    	imul   eax,DWORD PTR [eax],0x69727073
     e19:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e1a:	74 66                	je     e82 <sysEnter_Vector-0x12f17e>
     e1c:	49                   	dec    ecx
     e1d:	00 6e 75             	add    BYTE PTR [esi+0x75],ch
     e20:	6d                   	ins    DWORD PTR es:[edi],dx
     e21:	62 65 72             	bound  esp,QWORD PTR [ebp+0x72]
     e24:	00 62 61             	add    BYTE PTR [edx+0x61],ah
     e27:	73 65                	jae    e8e <sysEnter_Vector-0x12f172>
     e29:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     e2c:	65 63 69 73          	arpl   WORD PTR gs:[ecx+0x73],bp
     e30:	69 6f 6e 00 62 75 66 	imul   ebp,DWORD PTR [edi+0x6e],0x66756200
     e37:	66 50                	push   ax
     e39:	74 72                	je     ead <sysEnter_Vector-0x12f153>
     e3b:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     e3e:	63 2f                	arpl   WORD PTR [edi],bp
     e40:	73 74                	jae    eb6 <sysEnter_Vector-0x12f14a>
     e42:	64 69 6f 2e 63 00 72 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x65720063
     e49:	65 
     e4a:	73 65                	jae    eb1 <sysEnter_Vector-0x12f14f>
     e4c:	74 52                	je     ea0 <sysEnter_Vector-0x12f160>
     e4e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e4f:	77 00                	ja     e51 <sysEnter_Vector-0x12f1af>
     e51:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     e54:	66                   	data16
     e55:	00 62 79             	add    BYTE PTR [edx+0x79],ah
     e58:	74 65                	je     ebf <sysEnter_Vector-0x12f141>
     e5a:	73 54                	jae    eb0 <sysEnter_Vector-0x12f150>
     e5c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e5d:	43                   	inc    ebx
     e5e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e5f:	70 79                	jo     eda <sysEnter_Vector-0x12f126>
     e61:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     e64:	72 6e                	jb     ed4 <sysEnter_Vector-0x12f12c>
     e66:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
     e69:	49                   	dec    ecx
     e6a:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     e6d:	63 53 74             	arpl   WORD PTR [ebx+0x74],dx
     e70:	72 69                	jb     edb <sysEnter_Vector-0x12f125>
     e72:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e73:	67 4c                	addr16 dec esp
     e75:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     e77:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     e7a:	72 63                	jb     edf <sysEnter_Vector-0x12f121>
     e7c:	61                   	popa   
     e7d:	74 00                	je     e7f <sysEnter_Vector-0x12f181>
     e7f:	73 72                	jae    ef3 <sysEnter_Vector-0x12f10d>
     e81:	63 2f                	arpl   WORD PTR [edi],bp
     e83:	73 74                	jae    ef9 <sysEnter_Vector-0x12f107>
     e85:	72 69                	jb     ef0 <sysEnter_Vector-0x12f110>
     e87:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e88:	67 73 2f             	addr16 jae eba <sysEnter_Vector-0x12f146>
     e8b:	73 74                	jae    f01 <sysEnter_Vector-0x12f0ff>
     e8d:	72 63                	jb     ef2 <sysEnter_Vector-0x12f10e>
     e8f:	61                   	popa   
     e90:	74 2e                	je     ec0 <sysEnter_Vector-0x12f140>
     e92:	63 00                	arpl   WORD PTR [eax],ax
     e94:	73 74                	jae    f0a <sysEnter_Vector-0x12f0f6>
     e96:	72 6e                	jb     f06 <sysEnter_Vector-0x12f0fa>
     e98:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
     e9b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     e9e:	72 63                	jb     f03 <sysEnter_Vector-0x12f0fd>
     ea0:	61                   	popa   
     ea1:	74 49                	je     eec <sysEnter_Vector-0x12f114>
     ea3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     ea6:	72 63                	jb     f0b <sysEnter_Vector-0x12f0f5>
     ea8:	6d                   	ins    DWORD PTR es:[edi],dx
     ea9:	70 49                	jo     ef4 <sysEnter_Vector-0x12f10c>
     eab:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     eae:	72 63                	jb     f13 <sysEnter_Vector-0x12f0ed>
     eb0:	6d                   	ins    DWORD PTR es:[edi],dx
     eb1:	70 00                	jo     eb3 <sysEnter_Vector-0x12f14d>
     eb3:	73 72                	jae    f27 <sysEnter_Vector-0x12f0d9>
     eb5:	63 2f                	arpl   WORD PTR [edi],bp
     eb7:	73 74                	jae    f2d <sysEnter_Vector-0x12f0d3>
     eb9:	72 69                	jb     f24 <sysEnter_Vector-0x12f0dc>
     ebb:	6e                   	outs   dx,BYTE PTR ds:[esi]
     ebc:	67 73 2f             	addr16 jae eee <sysEnter_Vector-0x12f112>
     ebf:	73 74                	jae    f35 <sysEnter_Vector-0x12f0cb>
     ec1:	72 63                	jb     f26 <sysEnter_Vector-0x12f0da>
     ec3:	6d                   	ins    DWORD PTR es:[edi],dx
     ec4:	70 2e                	jo     ef4 <sysEnter_Vector-0x12f10c>
     ec6:	63 00                	arpl   WORD PTR [eax],ax
     ec8:	73 74                	jae    f3e <sysEnter_Vector-0x12f0c2>
     eca:	72 63                	jb     f2f <sysEnter_Vector-0x12f0d1>
     ecc:	70 79                	jo     f47 <sysEnter_Vector-0x12f0b9>
     ece:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     ed1:	75 6e                	jne    f41 <sysEnter_Vector-0x12f0bf>
     ed3:	74 00                	je     ed5 <sysEnter_Vector-0x12f12b>
     ed5:	73 74                	jae    f4b <sysEnter_Vector-0x12f0b5>
     ed7:	72 63                	jb     f3c <sysEnter_Vector-0x12f0c4>
     ed9:	70 79                	jo     f54 <sysEnter_Vector-0x12f0ac>
     edb:	63 00                	arpl   WORD PTR [eax],ax
     edd:	73 74                	jae    f53 <sysEnter_Vector-0x12f0ad>
     edf:	72 63                	jb     f44 <sysEnter_Vector-0x12f0bc>
     ee1:	70 79                	jo     f5c <sysEnter_Vector-0x12f0a4>
     ee3:	49                   	dec    ecx
     ee4:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     ee7:	63 2f                	arpl   WORD PTR [edi],bp
     ee9:	73 74                	jae    f5f <sysEnter_Vector-0x12f0a1>
     eeb:	72 69                	jb     f56 <sysEnter_Vector-0x12f0aa>
     eed:	6e                   	outs   dx,BYTE PTR ds:[esi]
     eee:	67 73 2f             	addr16 jae f20 <sysEnter_Vector-0x12f0e0>
     ef1:	73 74                	jae    f67 <sysEnter_Vector-0x12f099>
     ef3:	72 63                	jb     f58 <sysEnter_Vector-0x12f0a8>
     ef5:	70 79                	jo     f70 <sysEnter_Vector-0x12f090>
     ef7:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     efa:	73 74                	jae    f70 <sysEnter_Vector-0x12f090>
     efc:	72 69                	jb     f67 <sysEnter_Vector-0x12f099>
     efe:	73 6e                	jae    f6e <sysEnter_Vector-0x12f092>
     f00:	75 6d                	jne    f6f <sysEnter_Vector-0x12f091>
     f02:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     f05:	63 2f                	arpl   WORD PTR [edi],bp
     f07:	73 74                	jae    f7d <sysEnter_Vector-0x12f083>
     f09:	72 69                	jb     f74 <sysEnter_Vector-0x12f08c>
     f0b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f0c:	67 73 2f             	addr16 jae f3e <sysEnter_Vector-0x12f0c2>
     f0f:	73 74                	jae    f85 <sysEnter_Vector-0x12f07b>
     f11:	72 69                	jb     f7c <sysEnter_Vector-0x12f084>
     f13:	73 6e                	jae    f83 <sysEnter_Vector-0x12f07d>
     f15:	75 6d                	jne    f84 <sysEnter_Vector-0x12f07c>
     f17:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     f1a:	63 68 65             	arpl   WORD PTR [eax+0x65],bp
     f1d:	63 6b 5f             	arpl   WORD PTR [ebx+0x5f],bp
     f20:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
     f27:	74 
     f28:	72 6c                	jb     f96 <sysEnter_Vector-0x12f06a>
     f2a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     f2c:	49                   	dec    ecx
     f2d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f30:	72 6c                	jb     f9e <sysEnter_Vector-0x12f062>
     f32:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     f34:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f37:	72 6e                	jb     fa7 <sysEnter_Vector-0x12f059>
     f39:	6c                   	ins    BYTE PTR es:[edi],dx
     f3a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     f3c:	49                   	dec    ecx
     f3d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f40:	72 6e                	jb     fb0 <sysEnter_Vector-0x12f050>
     f42:	6c                   	ins    BYTE PTR es:[edi],dx
     f43:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     f45:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     f48:	63 2f                	arpl   WORD PTR [edi],bp
     f4a:	73 74                	jae    fc0 <sysEnter_Vector-0x12f040>
     f4c:	72 69                	jb     fb7 <sysEnter_Vector-0x12f049>
     f4e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f4f:	67 73 2f             	addr16 jae f81 <sysEnter_Vector-0x12f07f>
     f52:	73 74                	jae    fc8 <sysEnter_Vector-0x12f038>
     f54:	72 6c                	jb     fc2 <sysEnter_Vector-0x12f03e>
     f56:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     f58:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     f5b:	73 74                	jae    fd1 <sysEnter_Vector-0x12f02f>
     f5d:	72 6e                	jb     fcd <sysEnter_Vector-0x12f033>
     f5f:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
     f62:	49                   	dec    ecx
     f63:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f66:	72 6e                	jb     fd6 <sysEnter_Vector-0x12f02a>
     f68:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
     f6b:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     f6e:	63 2f                	arpl   WORD PTR [edi],bp
     f70:	73 74                	jae    fe6 <sysEnter_Vector-0x12f01a>
     f72:	72 69                	jb     fdd <sysEnter_Vector-0x12f023>
     f74:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f75:	67 73 2f             	addr16 jae fa7 <sysEnter_Vector-0x12f059>
     f78:	73 74                	jae    fee <sysEnter_Vector-0x12f012>
     f7a:	72 6e                	jb     fea <sysEnter_Vector-0x12f016>
     f7c:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
     f7f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     f82:	73 72                	jae    ff6 <sysEnter_Vector-0x12f00a>
     f84:	63 2f                	arpl   WORD PTR [edi],bp
     f86:	73 74                	jae    ffc <sysEnter_Vector-0x12f004>
     f88:	72 69                	jb     ff3 <sysEnter_Vector-0x12f00d>
     f8a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f8b:	67 73 2f             	addr16 jae fbd <sysEnter_Vector-0x12f043>
     f8e:	73 74                	jae    1004 <sysEnter_Vector-0x12effc>
     f90:	72 6e                	jb     1000 <sysEnter_Vector-0x12f000>
     f92:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     f95:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     f98:	73 74                	jae    100e <sysEnter_Vector-0x12eff2>
     f9a:	72 6e                	jb     100a <sysEnter_Vector-0x12eff6>
     f9c:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     f9f:	49                   	dec    ecx
     fa0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     fa3:	72 6e                	jb     1013 <sysEnter_Vector-0x12efed>
     fa5:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     fa8:	00 6e 70             	add    BYTE PTR [esi+0x70],ch
     fab:	74 72                	je     101f <sysEnter_Vector-0x12efe1>
     fad:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
     fb0:	74 6f                	je     1021 <sysEnter_Vector-0x12efdf>
     fb2:	66                   	data16
     fb3:	66                   	data16
     fb4:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
     fb7:	74 6c                	je     1025 <sysEnter_Vector-0x12efdb>
     fb9:	69 6d 00 73 72 63 2f 	imul   ebp,DWORD PTR [ebp+0x0],0x2f637273
     fc0:	73 74                	jae    1036 <sysEnter_Vector-0x12efca>
     fc2:	72 69                	jb     102d <sysEnter_Vector-0x12efd3>
     fc4:	6e                   	outs   dx,BYTE PTR ds:[esi]
     fc5:	67 73 2f             	addr16 jae ff7 <sysEnter_Vector-0x12f009>
     fc8:	73 74                	jae    103e <sysEnter_Vector-0x12efc2>
     fca:	72 6f                	jb     103b <sysEnter_Vector-0x12efc5>
     fcc:	75 6c                	jne    103a <sysEnter_Vector-0x12efc6>
     fce:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     fd1:	73 74                	jae    1047 <sysEnter_Vector-0x12efb9>
     fd3:	72 74                	jb     1049 <sysEnter_Vector-0x12efb7>
     fd5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     fd6:	75 6c                	jne    1044 <sysEnter_Vector-0x12efbc>
     fd8:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
     fdb:	64                   	fs
     fdc:	70 74                	jo     1052 <sysEnter_Vector-0x12efae>
     fde:	72 00                	jb     fe0 <sysEnter_Vector-0x12f020>
     fe0:	73 72                	jae    1054 <sysEnter_Vector-0x12efac>
     fe2:	63 2f                	arpl   WORD PTR [edi],bp
     fe4:	73 74                	jae    105a <sysEnter_Vector-0x12efa6>
     fe6:	72 69                	jb     1051 <sysEnter_Vector-0x12efaf>
     fe8:	6e                   	outs   dx,BYTE PTR ds:[esi]
     fe9:	67 73 2f             	addr16 jae 101b <sysEnter_Vector-0x12efe5>
     fec:	73 74                	jae    1062 <sysEnter_Vector-0x12ef9e>
     fee:	72 70                	jb     1060 <sysEnter_Vector-0x12efa0>
     ff0:	61                   	popa   
     ff1:	72 74                	jb     1067 <sysEnter_Vector-0x12ef99>
     ff3:	73 2e                	jae    1023 <sysEnter_Vector-0x12efdd>
     ff5:	63 00                	arpl   WORD PTR [eax],ax
     ff7:	73 74                	jae    106d <sysEnter_Vector-0x12ef93>
     ff9:	72 6c                	jb     1067 <sysEnter_Vector-0x12ef99>
     ffb:	65                   	gs
     ffc:	66                   	data16
     ffd:	74 00                	je     fff <sysEnter_Vector-0x12f001>
     fff:	73 74                	jae    1075 <sysEnter_Vector-0x12ef8b>
    1001:	72 74                	jb     1077 <sysEnter_Vector-0x12ef89>
    1003:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1004:	6c                   	ins    BYTE PTR es:[edi],dx
    1005:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
    1008:	63 2f                	arpl   WORD PTR [edi],bp
    100a:	73 74                	jae    1080 <sysEnter_Vector-0x12ef80>
    100c:	72 69                	jb     1077 <sysEnter_Vector-0x12ef89>
    100e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    100f:	67 73 2f             	addr16 jae 1041 <sysEnter_Vector-0x12efbf>
    1012:	73 74                	jae    1088 <sysEnter_Vector-0x12ef78>
    1014:	72 74                	jb     108a <sysEnter_Vector-0x12ef76>
    1016:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1017:	6c                   	ins    BYTE PTR es:[edi],dx
    1018:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    101b:	69 6e 70 75 74 00 73 	imul   ebp,DWORD PTR [esi+0x70],0x73007475
    1022:	72 63                	jb     1087 <sysEnter_Vector-0x12ef79>
    1024:	2f                   	das    
    1025:	73 74                	jae    109b <sysEnter_Vector-0x12ef65>
    1027:	72 69                	jb     1092 <sysEnter_Vector-0x12ef6e>
    1029:	6e                   	outs   dx,BYTE PTR ds:[esi]
    102a:	67 73 2f             	addr16 jae 105c <sysEnter_Vector-0x12efa4>
    102d:	73 74                	jae    10a3 <sysEnter_Vector-0x12ef5d>
    102f:	72 74                	jb     10a5 <sysEnter_Vector-0x12ef5b>
    1031:	72 69                	jb     109c <sysEnter_Vector-0x12ef64>
    1033:	6d                   	ins    DWORD PTR es:[edi],dx
    1034:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1037:	73 74                	jae    10ad <sysEnter_Vector-0x12ef53>
    1039:	72 74                	jb     10af <sysEnter_Vector-0x12ef51>
    103b:	72 69                	jb     10a6 <sysEnter_Vector-0x12ef5a>
    103d:	6d                   	ins    DWORD PTR es:[edi],dx
    103e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1041:	72 74                	jb     10b7 <sysEnter_Vector-0x12ef49>
    1043:	72 69                	jb     10ae <sysEnter_Vector-0x12ef52>
    1045:	6d                   	ins    DWORD PTR es:[edi],dx
    1046:	49                   	dec    ecx
    1047:	00 6f 75             	add    BYTE PTR [edi+0x75],ch
    104a:	74 73                	je     10bf <sysEnter_Vector-0x12ef41>
    104c:	69 7a 65 00 73 72 63 	imul   edi,DWORD PTR [edx+0x65],0x63727300
    1053:	2f                   	das    
    1054:	73 74                	jae    10ca <sysEnter_Vector-0x12ef36>
    1056:	72 72                	jb     10ca <sysEnter_Vector-0x12ef36>
    1058:	65                   	gs
    1059:	70 6c                	jo     10c7 <sysEnter_Vector-0x12ef39>
    105b:	61                   	popa   
    105c:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
    105f:	63 00                	arpl   WORD PTR [eax],ax
    1061:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1062:	65                   	gs
    1063:	65                   	gs
    1064:	64                   	fs
    1065:	6c                   	ins    BYTE PTR es:[edi],dx
    1066:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
    106a:	73 6f                	jae    10db <sysEnter_Vector-0x12ef25>
    106c:	66                   	data16
    106d:	66                   	data16
    106e:	73 65                	jae    10d5 <sysEnter_Vector-0x12ef2b>
    1070:	74 00                	je     1072 <sysEnter_Vector-0x12ef8e>
    1072:	73 74                	jae    10e8 <sysEnter_Vector-0x12ef18>
    1074:	72 72                	jb     10e8 <sysEnter_Vector-0x12ef18>
    1076:	65                   	gs
    1077:	70 6c                	jo     10e5 <sysEnter_Vector-0x12ef1b>
    1079:	61                   	popa   
    107a:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
    107d:	70 61                	jo     10e0 <sysEnter_Vector-0x12ef20>
    107f:	74 74                	je     10f5 <sysEnter_Vector-0x12ef0b>
    1081:	65                   	gs
    1082:	72 6e                	jb     10f2 <sysEnter_Vector-0x12ef0e>
    1084:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1087:	72 72                	jb     10fb <sysEnter_Vector-0x12ef05>
    1089:	65                   	gs
    108a:	70 6c                	jo     10f8 <sysEnter_Vector-0x12ef08>
    108c:	61                   	popa   
    108d:	63 65 49             	arpl   WORD PTR [ebp+0x49],sp
    1090:	00 6f 75             	add    BYTE PTR [edi+0x75],ch
    1093:	74 53                	je     10e8 <sysEnter_Vector-0x12ef18>
    1095:	74 72                	je     1109 <sysEnter_Vector-0x12eef7>
    1097:	69 6e 67 00 73 74 72 	imul   ebp,DWORD PTR [esi+0x67],0x72747300
    109e:	73 74                	jae    1114 <sysEnter_Vector-0x12eeec>
    10a0:	72 49                	jb     10eb <sysEnter_Vector-0x12ef15>
    10a2:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
    10a5:	63 2f                	arpl   WORD PTR [edi],bp
    10a7:	73 74                	jae    111d <sysEnter_Vector-0x12eee3>
    10a9:	72 73                	jb     111e <sysEnter_Vector-0x12eee2>
    10ab:	74 72                	je     111f <sysEnter_Vector-0x12eee1>
    10ad:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    10b0:	73 74                	jae    1126 <sysEnter_Vector-0x12eeda>
    10b2:	72 73                	jb     1127 <sysEnter_Vector-0x12eed9>
    10b4:	74 72                	je     1128 <sysEnter_Vector-0x12eed8>
    10b6:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    10b9:	72 6e                	jb     1129 <sysEnter_Vector-0x12eed7>
    10bb:	73 74                	jae    1131 <sysEnter_Vector-0x12eecf>
    10bd:	72 49                	jb     1108 <sysEnter_Vector-0x12eef8>
    10bf:	00 72 63             	add    BYTE PTR [edx+0x63],dh
    10c2:	73 69                	jae    112d <sysEnter_Vector-0x12eed3>
    10c4:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
    10c8:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
    10cb:	72 69                	jb     1136 <sysEnter_Vector-0x12eeca>
    10cd:	6e                   	outs   dx,BYTE PTR ds:[esi]
    10ce:	67 00 73 72          	add    BYTE PTR [bp+di+0x72],dh
    10d2:	63 2f                	arpl   WORD PTR [edi],bp
    10d4:	74 69                	je     113f <sysEnter_Vector-0x12eec1>
    10d6:	6d                   	ins    DWORD PTR es:[edi],dx
    10d7:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    10db:	6c                   	ins    BYTE PTR es:[edi],dx
    10dc:	6f                   	outs   dx,DWORD PTR ds:[esi]
    10dd:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
    10e0:	74 69                	je     114b <sysEnter_Vector-0x12eeb5>
    10e2:	6d                   	ins    DWORD PTR es:[edi],dx
    10e3:	65 00 67 65          	add    BYTE PTR gs:[edi+0x65],ah
    10e7:	74 74                	je     115d <sysEnter_Vector-0x12eea3>
    10e9:	69 63 6b 73 00 5f 64 	imul   esp,DWORD PTR [ebx+0x6b],0x645f0073
    10f0:	61                   	popa   
    10f1:	79 6c                	jns    115f <sysEnter_Vector-0x12eea1>
    10f3:	69 67 68 74 00 6c 69 	imul   esp,DWORD PTR [edi+0x68],0x696c0074
    10fa:	62 63 54             	bound  esp,QWORD PTR [ebx+0x54]
    10fd:	5a                   	pop    edx
    10fe:	00 5f 74             	add    BYTE PTR [edi+0x74],bl
    1101:	7a 6e                	jp     1171 <sysEnter_Vector-0x12ee8f>
    1103:	61                   	popa   
    1104:	6d                   	ins    DWORD PTR es:[edi],dx
    1105:	65 00 67 6d          	add    BYTE PTR gs:[edi+0x6d],ah
    1109:	74 69                	je     1174 <sysEnter_Vector-0x12ee8c>
    110b:	6d                   	ins    DWORD PTR es:[edi],dx
    110c:	65                   	gs
    110d:	5f                   	pop    edi
    110e:	72 00                	jb     1110 <sysEnter_Vector-0x12eef0>
    1110:	74 69                	je     117b <sysEnter_Vector-0x12ee85>
    1112:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
    1115:	54                   	push   esp
    1116:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1117:	57                   	push   edi
    1118:	61                   	popa   
    1119:	69 74 00 6d 6f 6e 74 	imul   esi,DWORD PTR [eax+eax*1+0x6d],0x68746e6f
    1120:	68 
    1121:	00 67 65             	add    BYTE PTR [edi+0x65],ah
    1124:	74 74                	je     119a <sysEnter_Vector-0x12ee66>
    1126:	69 6d 65 00 64 61 79 	imul   ebp,DWORD PTR [ebp+0x65],0x79616400
    112d:	6e                   	outs   dx,BYTE PTR ds:[esi]
    112e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    112f:	00 67 6d             	add    BYTE PTR [edi+0x6d],ah
    1132:	74 69                	je     119d <sysEnter_Vector-0x12ee63>
    1134:	6d                   	ins    DWORD PTR es:[edi],dx
    1135:	65                   	gs
    1136:	5f                   	pop    edi
    1137:	72 49                	jb     1182 <sysEnter_Vector-0x12ee7e>
    1139:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
    113d:	61                   	popa   
    113e:	6c                   	ins    BYTE PTR es:[edi],dx
    113f:	54                   	push   esp
    1140:	69 6d 65 00 74 6d 62 	imul   ebp,DWORD PTR [ebp+0x65],0x626d7400
    1147:	75 66                	jne    11af <sysEnter_Vector-0x12ee51>
    1149:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
    114d:	61                   	popa   
    114e:	6c                   	ins    BYTE PTR es:[edi],dx
    114f:	74 69                	je     11ba <sysEnter_Vector-0x12ee46>
    1151:	6d                   	ins    DWORD PTR es:[edi],dx
    1152:	65                   	gs
    1153:	5f                   	pop    edi
    1154:	72 00                	jb     1156 <sysEnter_Vector-0x12eeaa>
    1156:	64                   	fs
    1157:	61                   	popa   
    1158:	79 63                	jns    11bd <sysEnter_Vector-0x12ee43>
    115a:	6c                   	ins    BYTE PTR es:[edi],dx
    115b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    115c:	63 6b 00             	arpl   WORD PTR [ebx+0x0],bp
    115f:	6d                   	ins    DWORD PTR es:[edi],dx
    1160:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
    1165:	00 5f 79             	add    BYTE PTR [edi+0x79],bl
    1168:	74 61                	je     11cb <sysEnter_Vector-0x12ee35>
    116a:	62 00                	bound  eax,QWORD PTR [eax]
    116c:	74 69                	je     11d7 <sysEnter_Vector-0x12ee29>
    116e:	6d                   	ins    DWORD PTR es:[edi],dx
    116f:	65                   	gs
    1170:	72 00                	jb     1172 <sysEnter_Vector-0x12ee8e>
    1172:	6c                   	ins    BYTE PTR es:[edi],dx
    1173:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1174:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
    1177:	74 69                	je     11e2 <sysEnter_Vector-0x12ee1e>
    1179:	6d                   	ins    DWORD PTR es:[edi],dx
    117a:	65                   	gs
    117b:	5f                   	pop    edi
    117c:	72 49                	jb     11c7 <sysEnter_Vector-0x12ee39>
    117e:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
    1181:	73 74                	jae    11f7 <sysEnter_Vector-0x12ee09>
    1183:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
    1186:	73 00                	jae    1188 <sysEnter_Vector-0x12ee78>
    1188:	72 65                	jb     11ef <sysEnter_Vector-0x12ee11>
    118a:	73 75                	jae    1201 <sysEnter_Vector-0x12edff>
    118c:	6c                   	ins    BYTE PTR es:[edi],dx
    118d:	74 00                	je     118f <sysEnter_Vector-0x12ee71>
    118f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1190:	76 65                	jbe    11f7 <sysEnter_Vector-0x12ee09>
    1192:	72 66                	jb     11fa <sysEnter_Vector-0x12ee06>
    1194:	6c                   	ins    BYTE PTR es:[edi],dx
    1195:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1196:	77 00                	ja     1198 <sysEnter_Vector-0x12ee68>

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    edi
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
   5:	28 47 4e             	sub    BYTE PTR [edi+0x4e],al
   8:	55                   	push   ebp
   9:	29 20                	sub    DWORD PTR [eax],esp
   b:	35 2e 33 2e 30       	xor    eax,0x302e332e
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	a8 0b                	test   al,0xb
   2:	00 00                	add    BYTE PTR [eax],al
   4:	e2 0b                	loop   11 <sysEnter_Vector-0x12ffef>
   6:	00 00                	add    BYTE PTR [eax],al
   8:	e7 0b                	out    0xb,eax
   a:	00 00                	add    BYTE PTR [eax],al
   c:	1b 0c 00             	sbb    ecx,DWORD PTR [eax+eax*1]
	...
