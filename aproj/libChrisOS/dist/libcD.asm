
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

9f000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"
#include "common.h"

VISIBLE char *strchr(const char *s, int c)
{
9f000000:	55                   	push   ebp
9f000001:	89 e5                	mov    ebp,esp
9f000003:	e8 7e 61 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000008:	05 f4 91 00 00       	add    eax,0x91f4
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
    while (*s != (char)c)
9f00000d:	eb 17                	jmp    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
        if (!*s++)
9f00000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000012:	8d 50 01             	lea    edx,[eax+0x1]
9f000015:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000018:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00001b:	84 c0                	test   al,al
9f00001d:	75 07                	jne    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
            return 0;
9f00001f:	b8 00 00 00 00       	mov    eax,0x0
9f000024:	eb 10                	jmp    9f000036 <strchr+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
#include "strings.h"
#include "common.h"

VISIBLE char *strchr(const char *s, int c)
{
    while (*s != (char)c)
9f000026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00002c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00002f:	38 d0                	cmp    al,dl
9f000031:	75 dc                	jne    9f00000f <strchr+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
        if (!*s++)
            return 0;
    return (char *)s;
9f000033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:15
}
9f000036:	5d                   	pop    ebp
9f000037:	c3                   	ret    

9f000038 <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18

char *strchrI(const char *s, int c)
{
9f000038:	55                   	push   ebp
9f000039:	89 e5                	mov    ebp,esp
9f00003b:	e8 46 61 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000040:	05 bc 91 00 00       	add    eax,0x91bc
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
    while (*s != (char)c)
9f000045:	eb 17                	jmp    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
        if (!*s++)
9f000047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00004a:	8d 50 01             	lea    edx,[eax+0x1]
9f00004d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000050:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000053:	84 c0                	test   al,al
9f000055:	75 07                	jne    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
            return 0;
9f000057:	b8 00 00 00 00       	mov    eax,0x0
9f00005c:	eb 10                	jmp    9f00006e <strchrI+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
    return (char *)s;
}

char *strchrI(const char *s, int c)
{
    while (*s != (char)c)
9f00005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000061:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000064:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000067:	38 d0                	cmp    al,dl
9f000069:	75 dc                	jne    9f000047 <strchrI+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
        if (!*s++)
            return 0;
    return (char *)s;
9f00006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:23
}
9f00006e:	5d                   	pop    ebp
9f00006f:	c3                   	ret    

9f000070 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:39

#include "strings.h"
#include "common.h"

VISIBLE int strcspn(char* string, char* chars)
{
9f000070:	55                   	push   ebp
9f000071:	89 e5                	mov    ebp,esp
9f000073:	56                   	push   esi
9f000074:	53                   	push   ebx
9f000075:	e8 0c 61 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f00007a:	05 82 91 00 00       	add    eax,0x9182
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f00007f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f000082:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000085:	89 c1                	mov    ecx,eax
9f000087:	eb 29                	jmp    9f0000b2 <strcspn+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	for (p = chars; *p != 0; p++) {
9f000089:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f00008c:	eb 15                	jmp    9f0000a3 <strcspn+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
	    if (c == *p) {
9f00008e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f000091:	38 c8                	cmp    al,cl
9f000093:	75 0b                	jne    9f0000a0 <strcspn+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:45
		return s-string;
9f000095:	89 da                	mov    edx,ebx
9f000097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00009a:	29 c2                	sub    edx,eax
9f00009c:	89 d0                	mov    eax,edx
9f00009e:	eb 21                	jmp    9f0000c1 <strcspn+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43 (discriminator 2)
VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000a0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43 (discriminator 1)
9f0000a3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000a6:	84 c0                	test   al,al
9f0000a8:	75 e4                	jne    9f00008e <strcspn+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)

VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000aa:	83 c3 01             	add    ebx,0x1
9f0000ad:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000b0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
9f0000b2:	89 c8                	mov    eax,ecx
9f0000b4:	84 c0                	test   al,al
9f0000b6:	75 d1                	jne    9f000089 <strcspn+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f0000b8:	89 da                	mov    edx,ebx
9f0000ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000bd:	29 c2                	sub    edx,eax
9f0000bf:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:50
}
9f0000c1:	5b                   	pop    ebx
9f0000c2:	5e                   	pop    esi
9f0000c3:	5d                   	pop    ebp
9f0000c4:	c3                   	ret    

9f0000c5 <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:53

int strcspnI(char* string, char* chars)
{
9f0000c5:	55                   	push   ebp
9f0000c6:	89 e5                	mov    ebp,esp
9f0000c8:	56                   	push   esi
9f0000c9:	53                   	push   ebx
9f0000ca:	e8 b7 60 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0000cf:	05 2d 91 00 00       	add    eax,0x912d
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f0000d7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000da:	89 c1                	mov    ecx,eax
9f0000dc:	eb 29                	jmp    9f000107 <strcspnI+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	for (p = chars; *p != 0; p++) {
9f0000de:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f0000e1:	eb 15                	jmp    9f0000f8 <strcspnI+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
	    if (c == *p) {
9f0000e3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000e6:	38 c8                	cmp    al,cl
9f0000e8:	75 0b                	jne    9f0000f5 <strcspnI+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:59
		return s-string;
9f0000ea:	89 da                	mov    edx,ebx
9f0000ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000ef:	29 c2                	sub    edx,eax
9f0000f1:	89 d0                	mov    eax,edx
9f0000f3:	eb 21                	jmp    9f000116 <strcspnI+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57 (discriminator 2)
int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57 (discriminator 1)
9f0000f8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000fb:	84 c0                	test   al,al
9f0000fd:	75 e4                	jne    9f0000e3 <strcspnI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)

int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000ff:	83 c3 01             	add    ebx,0x1
9f000102:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000105:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
9f000107:	89 c8                	mov    eax,ecx
9f000109:	84 c0                	test   al,al
9f00010b:	75 d1                	jne    9f0000de <strcspnI+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f00010d:	89 da                	mov    edx,ebx
9f00010f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000112:	29 c2                	sub    edx,eax
9f000114:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:64
}
9f000116:	5b                   	pop    ebx
9f000117:	5e                   	pop    esi
9f000118:	5d                   	pop    ebp
9f000119:	c3                   	ret    
9f00011a:	66 90                	xchg   ax,ax

9f00011c <strtokI>:
strtokI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:43

int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

char * strtokI(char* s, /*const*/ char* delim)
{
9f00011c:	55                   	push   ebp
9f00011d:	89 e5                	mov    ebp,esp
9f00011f:	56                   	push   esi
9f000120:	53                   	push   ebx
9f000121:	e8 aa 60 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f000126:	81 c3 d6 90 00 00    	add    ebx,0x90d6
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:47
    static char *lasts;
    register int ch;

    if (s == 0)
9f00012c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000130:	75 09                	jne    9f00013b <strtokI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
	s = lasts;
9f000132:	8b 83 48 00 00 00    	mov    eax,DWORD PTR [ebx+0x48]
9f000138:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    do {
	if ((ch = *s++) == '\0')
9f00013b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00013e:	8d 50 01             	lea    edx,[eax+0x1]
9f000141:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000147:	0f be f0             	movsx  esi,al
9f00014a:	85 f6                	test   esi,esi
9f00014c:	75 07                	jne    9f000155 <strtokI+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
	    return 0;
9f00014e:	b8 00 00 00 00       	mov    eax,0x0
9f000153:	eb 57                	jmp    9f0001ac <strtokI+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    } while (strchrI(delim, ch));
9f000155:	83 ec 08             	sub    esp,0x8
9f000158:	56                   	push   esi
9f000159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00015c:	e8 d7 fe ff ff       	call   9f000038 <strchrI>
9f000161:	83 c4 10             	add    esp,0x10
9f000164:	85 c0                	test   eax,eax
9f000166:	75 d3                	jne    9f00013b <strtokI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    --s;
9f000168:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
    lasts = s + strcspnI(s, delim);
9f00016c:	83 ec 08             	sub    esp,0x8
9f00016f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000175:	e8 4b ff ff ff       	call   9f0000c5 <strcspnI>
9f00017a:	83 c4 10             	add    esp,0x10
9f00017d:	89 c2                	mov    edx,eax
9f00017f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000182:	01 d0                	add    eax,edx
9f000184:	89 83 48 00 00 00    	mov    DWORD PTR [ebx+0x48],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    if (*lasts != 0)
9f00018a:	8b 83 48 00 00 00    	mov    eax,DWORD PTR [ebx+0x48]
9f000190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000193:	84 c0                	test   al,al
9f000195:	74 12                	je     9f0001a9 <strtokI+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
	*lasts++ = 0;
9f000197:	8b 83 48 00 00 00    	mov    eax,DWORD PTR [ebx+0x48]
9f00019d:	8d 50 01             	lea    edx,[eax+0x1]
9f0001a0:	89 93 48 00 00 00    	mov    DWORD PTR [ebx+0x48],edx
9f0001a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:57
    return s;
9f0001a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:58
}
9f0001ac:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0001af:	5b                   	pop    ebx
9f0001b0:	5e                   	pop    esi
9f0001b1:	5d                   	pop    ebp
9f0001b2:	c3                   	ret    

9f0001b3 <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:61

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
9f0001b3:	55                   	push   ebp
9f0001b4:	89 e5                	mov    ebp,esp
9f0001b6:	56                   	push   esi
9f0001b7:	53                   	push   ebx
9f0001b8:	e8 13 60 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f0001bd:	81 c3 3f 90 00 00    	add    ebx,0x903f
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:65
    static char *lasts;
    register int ch;

    if (s == 0)
9f0001c3:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0001c7:	75 09                	jne    9f0001d2 <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:66
	s = lasts;
9f0001c9:	8b 83 4c 00 00 00    	mov    eax,DWORD PTR [ebx+0x4c]
9f0001cf:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:68
    do {
	if ((ch = *s++) == '\0')
9f0001d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0001d5:	8d 50 01             	lea    edx,[eax+0x1]
9f0001d8:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0001db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0001de:	0f be f0             	movsx  esi,al
9f0001e1:	85 f6                	test   esi,esi
9f0001e3:	75 07                	jne    9f0001ec <strtok+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:69
	    return 0;
9f0001e5:	b8 00 00 00 00       	mov    eax,0x0
9f0001ea:	eb 57                	jmp    9f000243 <strtok+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:70
    } while (strchrI(delim, ch));
9f0001ec:	83 ec 08             	sub    esp,0x8
9f0001ef:	56                   	push   esi
9f0001f0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0001f3:	e8 40 fe ff ff       	call   9f000038 <strchrI>
9f0001f8:	83 c4 10             	add    esp,0x10
9f0001fb:	85 c0                	test   eax,eax
9f0001fd:	75 d3                	jne    9f0001d2 <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:71
    --s;
9f0001ff:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:72
    lasts = s + strcspnI(s, delim);
9f000203:	83 ec 08             	sub    esp,0x8
9f000206:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000209:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00020c:	e8 b4 fe ff ff       	call   9f0000c5 <strcspnI>
9f000211:	83 c4 10             	add    esp,0x10
9f000214:	89 c2                	mov    edx,eax
9f000216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000219:	01 d0                	add    eax,edx
9f00021b:	89 83 4c 00 00 00    	mov    DWORD PTR [ebx+0x4c],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:73
    if (*lasts != 0)
9f000221:	8b 83 4c 00 00 00    	mov    eax,DWORD PTR [ebx+0x4c]
9f000227:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00022a:	84 c0                	test   al,al
9f00022c:	74 12                	je     9f000240 <strtok+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:74
	*lasts++ = 0;
9f00022e:	8b 83 4c 00 00 00    	mov    eax,DWORD PTR [ebx+0x4c]
9f000234:	8d 50 01             	lea    edx,[eax+0x1]
9f000237:	89 93 4c 00 00 00    	mov    DWORD PTR [ebx+0x4c],edx
9f00023d:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:75
    return s;
9f000240:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:76
9f000243:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000246:	5b                   	pop    ebx
9f000247:	5e                   	pop    esi
9f000248:	5d                   	pop    ebp
9f000249:	c3                   	ret    
9f00024a:	66 90                	xchg   ax,ax

9f00024c <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:11

#include "common.h"
#include "strings.h"

void reverseI(char s[])
 {
9f00024c:	55                   	push   ebp
9f00024d:	89 e5                	mov    ebp,esp
9f00024f:	53                   	push   ebx
9f000250:	83 ec 14             	sub    esp,0x14
9f000253:	e8 2e 5f 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000258:	05 a4 8f 00 00       	add    eax,0x8fa4
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f00025d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f000264:	83 ec 0c             	sub    esp,0xc
9f000267:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00026a:	89 c3                	mov    ebx,eax
9f00026c:	e8 a3 49 00 00       	call   9f004c14 <strlenI>
9f000271:	83 c4 10             	add    esp,0x10
9f000274:	83 e8 01             	sub    eax,0x1
9f000277:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00027a:	eb 39                	jmp    9f0002b5 <reverseI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         c = s[i];
9f00027c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00027f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000282:	01 d0                	add    eax,edx
9f000284:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000287:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[i] = s[j];
9f00028a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00028d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000290:	01 c2                	add    edx,eax
9f000292:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f000295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000298:	01 c8                	add    eax,ecx
9f00029a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00029d:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:18 (discriminator 3)
         s[j] = c;
9f00029f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0002a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002a5:	01 c2                	add    edx,eax
9f0002a7:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
9f0002ab:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
void reverseI(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f0002ad:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
9f0002b1:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 1)
9f0002b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0002b8:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0002bb:	7c bf                	jl     9f00027c <reverseI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:20
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
9f0002bd:	90                   	nop
9f0002be:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0002c1:	c9                   	leave  
9f0002c2:	c3                   	ret    

9f0002c3 <itoa>:
itoa():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:23

VISIBLE void itoa(int n, char s[])
 {
9f0002c3:	55                   	push   ebp
9f0002c4:	89 e5                	mov    ebp,esp
9f0002c6:	53                   	push   ebx
9f0002c7:	83 ec 14             	sub    esp,0x14
9f0002ca:	e8 b7 5e 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0002cf:	05 2d 8f 00 00       	add    eax,0x8f2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f0002d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002d7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0002da:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0002de:	79 03                	jns    9f0002e3 <itoa+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
         n = -n;          /* make n positive */
9f0002e0:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:28
     i = 0;
9f0002e3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f0002ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0002ed:	8d 50 01             	lea    edx,[eax+0x1]
9f0002f0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0002f3:	89 c2                	mov    edx,eax
9f0002f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0002f8:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f0002fb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0002fe:	ba 67 66 66 66       	mov    edx,0x66666667
9f000303:	89 c8                	mov    eax,ecx
9f000305:	f7 ea                	imul   edx
9f000307:	c1 fa 02             	sar    edx,0x2
9f00030a:	89 c8                	mov    eax,ecx
9f00030c:	c1 f8 1f             	sar    eax,0x1f
9f00030f:	29 c2                	sub    edx,eax
9f000311:	89 d0                	mov    eax,edx
9f000313:	c1 e0 02             	shl    eax,0x2
9f000316:	01 d0                	add    eax,edx
9f000318:	01 c0                	add    eax,eax
9f00031a:	29 c1                	sub    ecx,eax
9f00031c:	89 ca                	mov    edx,ecx
9f00031e:	89 d0                	mov    eax,edx
9f000320:	83 c0 30             	add    eax,0x30
9f000323:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f000325:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000328:	ba 67 66 66 66       	mov    edx,0x66666667
9f00032d:	89 c8                	mov    eax,ecx
9f00032f:	f7 ea                	imul   edx
9f000331:	c1 fa 02             	sar    edx,0x2
9f000334:	89 c8                	mov    eax,ecx
9f000336:	c1 f8 1f             	sar    eax,0x1f
9f000339:	29 c2                	sub    edx,eax
9f00033b:	89 d0                	mov    eax,edx
9f00033d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f000340:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000344:	7f a4                	jg     9f0002ea <itoa+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
     if (sign < 0)
9f000346:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00034a:	79 13                	jns    9f00035f <itoa+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
         s[i++] = '-';
9f00034c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00034f:	8d 50 01             	lea    edx,[eax+0x1]
9f000352:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000355:	89 c2                	mov    edx,eax
9f000357:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00035a:	01 d0                	add    eax,edx
9f00035c:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     s[i] = '\0';
9f00035f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000362:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000365:	01 d0                	add    eax,edx
9f000367:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
     reverseI(s);
9f00036a:	83 ec 0c             	sub    esp,0xc
9f00036d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000370:	e8 d7 fe ff ff       	call   9f00024c <reverseI>
9f000375:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:36
 }
9f000378:	90                   	nop
9f000379:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00037c:	c9                   	leave  
9f00037d:	c3                   	ret    

9f00037e <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:39

 char *itoaI(int n, char s[])
 {
9f00037e:	55                   	push   ebp
9f00037f:	89 e5                	mov    ebp,esp
9f000381:	53                   	push   ebx
9f000382:	83 ec 14             	sub    esp,0x14
9f000385:	e8 fc 5d 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f00038a:	05 72 8e 00 00       	add    eax,0x8e72
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:42
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f00038f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000392:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000395:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000399:	79 03                	jns    9f00039e <itoaI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:43
         n = -n;          /* make n positive */
9f00039b:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:44
     i = 0;
9f00039e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f0003a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0003a8:	8d 50 01             	lea    edx,[eax+0x1]
9f0003ab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0003ae:	89 c2                	mov    edx,eax
9f0003b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0003b3:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f0003b6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0003b9:	ba 67 66 66 66       	mov    edx,0x66666667
9f0003be:	89 c8                	mov    eax,ecx
9f0003c0:	f7 ea                	imul   edx
9f0003c2:	c1 fa 02             	sar    edx,0x2
9f0003c5:	89 c8                	mov    eax,ecx
9f0003c7:	c1 f8 1f             	sar    eax,0x1f
9f0003ca:	29 c2                	sub    edx,eax
9f0003cc:	89 d0                	mov    eax,edx
9f0003ce:	c1 e0 02             	shl    eax,0x2
9f0003d1:	01 d0                	add    eax,edx
9f0003d3:	01 c0                	add    eax,eax
9f0003d5:	29 c1                	sub    ecx,eax
9f0003d7:	89 ca                	mov    edx,ecx
9f0003d9:	89 d0                	mov    eax,edx
9f0003db:	83 c0 30             	add    eax,0x30
9f0003de:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:47 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f0003e0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0003e3:	ba 67 66 66 66       	mov    edx,0x66666667
9f0003e8:	89 c8                	mov    eax,ecx
9f0003ea:	f7 ea                	imul   edx
9f0003ec:	c1 fa 02             	sar    edx,0x2
9f0003ef:	89 c8                	mov    eax,ecx
9f0003f1:	c1 f8 1f             	sar    eax,0x1f
9f0003f4:	29 c2                	sub    edx,eax
9f0003f6:	89 d0                	mov    eax,edx
9f0003f8:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f0003fb:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0003ff:	7f a4                	jg     9f0003a5 <itoaI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:48
     if (sign < 0)
9f000401:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000405:	79 13                	jns    9f00041a <itoaI+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
         s[i++] = '-';
9f000407:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00040a:	8d 50 01             	lea    edx,[eax+0x1]
9f00040d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000410:	89 c2                	mov    edx,eax
9f000412:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000415:	01 d0                	add    eax,edx
9f000417:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
     s[i] = '\0';
9f00041a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00041d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000420:	01 d0                	add    eax,edx
9f000422:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:51
     reverseI(s);
9f000425:	83 ec 0c             	sub    esp,0xc
9f000428:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00042b:	e8 1c fe ff ff       	call   9f00024c <reverseI>
9f000430:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:52
     return s;
9f000433:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:53
 }
9f000436:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000439:	c9                   	leave  
9f00043a:	c3                   	ret    

9f00043b <atoiI>:
atoiI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:57

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
int atoiI(char *str)
{
9f00043b:	55                   	push   ebp
9f00043c:	89 e5                	mov    ebp,esp
9f00043e:	83 ec 10             	sub    esp,0x10
9f000441:	e8 40 5d 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000446:	05 b6 8d 00 00       	add    eax,0x8db6
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:58
    int res = 0; // Initialize result
9f00044b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:62
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f000452:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
9f000459:	eb 28                	jmp    9f000483 <atoiI+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:63 (discriminator 3)
        res = res*10 + str[i] - '0';
9f00045b:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00045e:	89 d0                	mov    eax,edx
9f000460:	c1 e0 02             	shl    eax,0x2
9f000463:	01 d0                	add    eax,edx
9f000465:	01 c0                	add    eax,eax
9f000467:	89 c1                	mov    ecx,eax
9f000469:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f00046c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00046f:	01 d0                	add    eax,edx
9f000471:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000474:	0f be c0             	movsx  eax,al
9f000477:	01 c8                	add    eax,ecx
9f000479:	83 e8 30             	sub    eax,0x30
9f00047c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:62 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f00047f:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:62 (discriminator 1)
9f000483:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f000486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000489:	01 d0                	add    eax,edx
9f00048b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00048e:	84 c0                	test   al,al
9f000490:	75 c9                	jne    9f00045b <atoiI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:66
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
9f000492:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:67
}
9f000495:	c9                   	leave  
9f000496:	c3                   	ret    

9f000497 <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:70

VISIBLE int atoi(char *str)
{
9f000497:	55                   	push   ebp
9f000498:	89 e5                	mov    ebp,esp
9f00049a:	e8 e7 5c 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f00049f:	05 5d 8d 00 00       	add    eax,0x8d5d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:71
    return atoiI(str);
9f0004a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0004a7:	e8 8f ff ff ff       	call   9f00043b <atoiI>
9f0004ac:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:72
}
9f0004af:	c9                   	leave  
9f0004b0:	c3                   	ret    
9f0004b1:	66 90                	xchg   ax,ax
9f0004b3:	90                   	nop

9f0004b4 <moveToXY>:
moveToXY():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:16
#include "ascii.h"

const char ansiEscSeq[3] =  {0x1b,0x5b,0};

VISIBLE void moveToXY(int x, int y)
{
9f0004b4:	55                   	push   ebp
9f0004b5:	89 e5                	mov    ebp,esp
9f0004b7:	53                   	push   ebx
9f0004b8:	83 ec 14             	sub    esp,0x14
9f0004bb:	e8 10 5d 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f0004c0:	81 c3 3c 8d 00 00    	add    ebx,0x8d3c
/home/yogi/src/os/aproj/libChrisOS/src/console.c:20
    char cmd[10];
    char xstr[3], ystr[3];
    
    strcpyI(cmd,ansiEscSeq);
9f0004c6:	83 ec 08             	sub    esp,0x8
9f0004c9:	8d 83 24 f6 ff ff    	lea    eax,[ebx-0x9dc]
9f0004cf:	50                   	push   eax
9f0004d0:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004d3:	50                   	push   eax
9f0004d4:	e8 27 46 00 00       	call   9f004b00 <strcpyI>
9f0004d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:21
    itoaI(x,xstr);
9f0004dc:	83 ec 08             	sub    esp,0x8
9f0004df:	8d 45 eb             	lea    eax,[ebp-0x15]
9f0004e2:	50                   	push   eax
9f0004e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0004e6:	e8 93 fe ff ff       	call   9f00037e <itoaI>
9f0004eb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:22
    strcatI(cmd,xstr);
9f0004ee:	83 ec 08             	sub    esp,0x8
9f0004f1:	8d 45 eb             	lea    eax,[ebp-0x15]
9f0004f4:	50                   	push   eax
9f0004f5:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004f8:	50                   	push   eax
9f0004f9:	e8 2c 44 00 00       	call   9f00492a <strcatI>
9f0004fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:23
    strcatI(cmd,";");
9f000501:	83 ec 08             	sub    esp,0x8
9f000504:	8d 83 27 f6 ff ff    	lea    eax,[ebx-0x9d9]
9f00050a:	50                   	push   eax
9f00050b:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00050e:	50                   	push   eax
9f00050f:	e8 16 44 00 00       	call   9f00492a <strcatI>
9f000514:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:24
    itoaI(y,ystr);
9f000517:	83 ec 08             	sub    esp,0x8
9f00051a:	8d 45 e8             	lea    eax,[ebp-0x18]
9f00051d:	50                   	push   eax
9f00051e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000521:	e8 58 fe ff ff       	call   9f00037e <itoaI>
9f000526:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:25
    strcatI(cmd,ystr);
9f000529:	83 ec 08             	sub    esp,0x8
9f00052c:	8d 45 e8             	lea    eax,[ebp-0x18]
9f00052f:	50                   	push   eax
9f000530:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000533:	50                   	push   eax
9f000534:	e8 f1 43 00 00       	call   9f00492a <strcatI>
9f000539:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:26
    strcatI(cmd,"H");
9f00053c:	83 ec 08             	sub    esp,0x8
9f00053f:	8d 83 29 f6 ff ff    	lea    eax,[ebx-0x9d7]
9f000545:	50                   	push   eax
9f000546:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000549:	50                   	push   eax
9f00054a:	e8 db 43 00 00       	call   9f00492a <strcatI>
9f00054f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:28
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f000552:	83 ec 08             	sub    esp,0x8
9f000555:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000558:	50                   	push   eax
9f000559:	8d 83 2b f6 ff ff    	lea    eax,[ebx-0x9d5]
9f00055f:	50                   	push   eax
9f000560:	e8 f8 11 00 00       	call   9f00175d <printfI>
9f000565:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:29
}
9f000568:	90                   	nop
9f000569:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00056c:	c9                   	leave  
9f00056d:	c3                   	ret    

9f00056e <saveCursorPosition>:
saveCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:32

VISIBLE void saveCursorPosition()
{
9f00056e:	55                   	push   ebp
9f00056f:	89 e5                	mov    ebp,esp
9f000571:	53                   	push   ebx
9f000572:	83 ec 14             	sub    esp,0x14
9f000575:	e8 56 5c 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f00057a:	81 c3 82 8c 00 00    	add    ebx,0x8c82
/home/yogi/src/os/aproj/libChrisOS/src/console.c:35
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f000580:	83 ec 08             	sub    esp,0x8
9f000583:	8d 83 24 f6 ff ff    	lea    eax,[ebx-0x9dc]
9f000589:	50                   	push   eax
9f00058a:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00058d:	50                   	push   eax
9f00058e:	e8 6d 45 00 00       	call   9f004b00 <strcpyI>
9f000593:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:36
    strcatI(cmd,"s");
9f000596:	83 ec 08             	sub    esp,0x8
9f000599:	8d 83 2e f6 ff ff    	lea    eax,[ebx-0x9d2]
9f00059f:	50                   	push   eax
9f0005a0:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005a3:	50                   	push   eax
9f0005a4:	e8 81 43 00 00       	call   9f00492a <strcatI>
9f0005a9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:38
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f0005ac:	83 ec 08             	sub    esp,0x8
9f0005af:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005b2:	50                   	push   eax
9f0005b3:	8d 83 2b f6 ff ff    	lea    eax,[ebx-0x9d5]
9f0005b9:	50                   	push   eax
9f0005ba:	e8 9e 11 00 00       	call   9f00175d <printfI>
9f0005bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:39
}
9f0005c2:	90                   	nop
9f0005c3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0005c6:	c9                   	leave  
9f0005c7:	c3                   	ret    

9f0005c8 <restoreCursorPosition>:
restoreCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:42

VISIBLE void restoreCursorPosition()
{
9f0005c8:	55                   	push   ebp
9f0005c9:	89 e5                	mov    ebp,esp
9f0005cb:	53                   	push   ebx
9f0005cc:	83 ec 14             	sub    esp,0x14
9f0005cf:	e8 fc 5b 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f0005d4:	81 c3 28 8c 00 00    	add    ebx,0x8c28
/home/yogi/src/os/aproj/libChrisOS/src/console.c:45
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f0005da:	83 ec 08             	sub    esp,0x8
9f0005dd:	8d 83 24 f6 ff ff    	lea    eax,[ebx-0x9dc]
9f0005e3:	50                   	push   eax
9f0005e4:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005e7:	50                   	push   eax
9f0005e8:	e8 13 45 00 00       	call   9f004b00 <strcpyI>
9f0005ed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:46
    strcatI(cmd,"u");
9f0005f0:	83 ec 08             	sub    esp,0x8
9f0005f3:	8d 83 30 f6 ff ff    	lea    eax,[ebx-0x9d0]
9f0005f9:	50                   	push   eax
9f0005fa:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005fd:	50                   	push   eax
9f0005fe:	e8 27 43 00 00       	call   9f00492a <strcatI>
9f000603:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:48
//    writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f000606:	83 ec 08             	sub    esp,0x8
9f000609:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00060c:	50                   	push   eax
9f00060d:	8d 83 2b f6 ff ff    	lea    eax,[ebx-0x9d5]
9f000613:	50                   	push   eax
9f000614:	e8 44 11 00 00       	call   9f00175d <printfI>
9f000619:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:49
}
9f00061c:	90                   	nop
9f00061d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000620:	c9                   	leave  
9f000621:	c3                   	ret    
9f000622:	66 90                	xchg   ax,ax

9f000624 <resolveEnvVarsInStringI>:
resolveEnvVarsInStringI():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:10
 */
#include "common.h"
#include "strings.h"

char *resolveEnvVarsInStringI(char *input)
{
9f000624:	55                   	push   ebp
9f000625:	89 e5                	mov    ebp,esp
9f000627:	57                   	push   edi
9f000628:	53                   	push   ebx
9f000629:	81 ec e0 00 00 00    	sub    esp,0xe0
9f00062f:	e8 9c 5b 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f000634:	81 c3 c8 8b 00 00    	add    ebx,0x8bc8
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11
    char* lOutput=mallocI(4096);
9f00063a:	83 ec 0c             	sub    esp,0xc
9f00063d:	68 00 10 00 00       	push   0x1000
9f000642:	e8 ae 1e 00 00       	call   9f0024f5 <mallocI>
9f000647:	83 c4 10             	add    esp,0x10
9f00064a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:12
    char lVariable[100] = {0};
9f00064d:	8d 55 84             	lea    edx,[ebp-0x7c]
9f000650:	b8 00 00 00 00       	mov    eax,0x0
9f000655:	b9 19 00 00 00       	mov    ecx,0x19
9f00065a:	89 d7                	mov    edi,edx
9f00065c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:13
    char lVariableValue[100] = {0};
9f00065e:	8d 95 20 ff ff ff    	lea    edx,[ebp-0xe0]
9f000664:	b8 00 00 00 00       	mov    eax,0x0
9f000669:	b9 19 00 00 00       	mov    ecx,0x19
9f00066e:	89 d7                	mov    edi,edx
9f000670:	f3 ab                	rep stos DWORD PTR es:[edi],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:14
    char* myInput=input;
9f000672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000675:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:16
    
    strcpyI(lOutput,myInput);
9f000678:	83 ec 08             	sub    esp,0x8
9f00067b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f00067e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f000681:	e8 7a 44 00 00       	call   9f004b00 <strcpyI>
9f000686:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:19
    while (1==1)
    {
        char *startPtr=strstrI(myInput,"$");
9f000689:	83 ec 08             	sub    esp,0x8
9f00068c:	8d 83 32 f6 ff ff    	lea    eax,[ebx-0x9ce]
9f000692:	50                   	push   eax
9f000693:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f000696:	e8 4f 4d 00 00       	call   9f0053ea <strstrI>
9f00069b:	83 c4 10             	add    esp,0x10
9f00069e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:20
        int end=0;
9f0006a1:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:21
        if (startPtr>0)
9f0006a8:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f0006ac:	0f 84 ab 00 00 00    	je     9f00075d <resolveEnvVarsInStringI+0x139>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:23
        {
            strncpyI(lVariable, startPtr++, 1);
9f0006b2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0006b5:	8d 50 01             	lea    edx,[eax+0x1]
9f0006b8:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f0006bb:	83 ec 04             	sub    esp,0x4
9f0006be:	6a 01                	push   0x1
9f0006c0:	50                   	push   eax
9f0006c1:	8d 45 84             	lea    eax,[ebp-0x7c]
9f0006c4:	50                   	push   eax
9f0006c5:	e8 be 46 00 00       	call   9f004d88 <strncpyI>
9f0006ca:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24
            while (ISALPHA(startPtr[end]) || ISDIGIT(startPtr[end]))
9f0006cd:	eb 22                	jmp    9f0006f1 <resolveEnvVarsInStringI+0xcd>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:25
                strncatI(lVariable,&startPtr[end++],1);
9f0006cf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0006d2:	8d 50 01             	lea    edx,[eax+0x1]
9f0006d5:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0006d8:	89 c2                	mov    edx,eax
9f0006da:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0006dd:	01 d0                	add    eax,edx
9f0006df:	83 ec 04             	sub    esp,0x4
9f0006e2:	6a 01                	push   0x1
9f0006e4:	50                   	push   eax
9f0006e5:	8d 45 84             	lea    eax,[ebp-0x7c]
9f0006e8:	50                   	push   eax
9f0006e9:	e8 7a 42 00 00       	call   9f004968 <strncatI>
9f0006ee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24
        char *startPtr=strstrI(myInput,"$");
        int end=0;
        if (startPtr>0)
        {
            strncpyI(lVariable, startPtr++, 1);
            while (ISALPHA(startPtr[end]) || ISDIGIT(startPtr[end]))
9f0006f1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0006f4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0006f7:	01 d0                	add    eax,edx
9f0006f9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0006fc:	83 c8 20             	or     eax,0x20
9f0006ff:	0f be c0             	movsx  eax,al
9f000702:	83 e8 61             	sub    eax,0x61
9f000705:	83 f8 19             	cmp    eax,0x19
9f000708:	76 c5                	jbe    9f0006cf <resolveEnvVarsInStringI+0xab>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 1)
9f00070a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00070d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f000710:	01 d0                	add    eax,edx
9f000712:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000715:	0f be c0             	movsx  eax,al
9f000718:	83 e8 30             	sub    eax,0x30
9f00071b:	83 f8 09             	cmp    eax,0x9
9f00071e:	76 af                	jbe    9f0006cf <resolveEnvVarsInStringI+0xab>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:26
                strncatI(lVariable,&startPtr[end++],1);
            getenvI(lVariable+1,lVariableValue);
9f000720:	8d 45 84             	lea    eax,[ebp-0x7c]
9f000723:	83 c0 01             	add    eax,0x1
9f000726:	83 ec 08             	sub    esp,0x8
9f000729:	8d 95 20 ff ff ff    	lea    edx,[ebp-0xe0]
9f00072f:	52                   	push   edx
9f000730:	50                   	push   eax
9f000731:	e8 52 00 00 00       	call   9f000788 <getenvI>
9f000736:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:27
            strreplaceI(lOutput,lVariable,lVariableValue,lOutput);
9f000739:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f00073c:	8d 85 20 ff ff ff    	lea    eax,[ebp-0xe0]
9f000742:	50                   	push   eax
9f000743:	8d 45 84             	lea    eax,[ebp-0x7c]
9f000746:	50                   	push   eax
9f000747:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f00074a:	e8 b9 4a 00 00       	call   9f005208 <strreplaceI>
9f00074f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:28
            myInput=(int)startPtr;
9f000752:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f000755:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:32
        }
        else
            break;
    }
9f000758:	e9 2c ff ff ff       	jmp    9f000689 <resolveEnvVarsInStringI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:31
            getenvI(lVariable+1,lVariableValue);
            strreplaceI(lOutput,lVariable,lVariableValue,lOutput);
            myInput=(int)startPtr;
        }
        else
            break;
9f00075d:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:33
    }
    return lOutput;
9f00075e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:34
}
9f000761:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000764:	5b                   	pop    ebx
9f000765:	5f                   	pop    edi
9f000766:	5d                   	pop    ebp
9f000767:	c3                   	ret    

9f000768 <resolveEnvVarsInString>:
resolveEnvVarsInString():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:37

VISIBLE char *resolveEnvVarsInString(char *input)
{
9f000768:	55                   	push   ebp
9f000769:	89 e5                	mov    ebp,esp
9f00076b:	83 ec 08             	sub    esp,0x8
9f00076e:	e8 13 5a 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000773:	05 89 8a 00 00       	add    eax,0x8a89
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:38
    return resolveEnvVarsInStringI(input);
9f000778:	83 ec 0c             	sub    esp,0xc
9f00077b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00077e:	e8 a1 fe ff ff       	call   9f000624 <resolveEnvVarsInStringI>
9f000783:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:39
}
9f000786:	c9                   	leave  
9f000787:	c3                   	ret    

9f000788 <getenvI>:
getenvI():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:42

int getenvI(char *varname, char *value)
{
9f000788:	55                   	push   ebp
9f000789:	89 e5                	mov    ebp,esp
9f00078b:	53                   	push   ebx
9f00078c:	83 ec 14             	sub    esp,0x14
9f00078f:	e8 3c 5a 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f000794:	81 c3 68 8a 00 00    	add    ebx,0x8a68
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:43
    for (int cnt=0;cnt<100;cnt++)
9f00079a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f0007a1:	eb 7b                	jmp    9f00081e <getenvI+0x96>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:44
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f0007a3:	83 ec 0c             	sub    esp,0xc
9f0007a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0007a9:	e8 66 44 00 00       	call   9f004c14 <strlenI>
9f0007ae:	83 c4 10             	add    esp,0x10
9f0007b1:	89 c1                	mov    ecx,eax
9f0007b3:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0007b9:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007bb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0007be:	c1 e2 02             	shl    edx,0x2
9f0007c1:	01 d0                	add    eax,edx
9f0007c3:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007c5:	83 ec 04             	sub    esp,0x4
9f0007c8:	51                   	push   ecx
9f0007c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0007cc:	50                   	push   eax
9f0007cd:	e8 4d 45 00 00       	call   9f004d1f <strncmpI>
9f0007d2:	83 c4 10             	add    esp,0x10
9f0007d5:	85 c0                	test   eax,eax
9f0007d7:	75 41                	jne    9f00081a <getenvI+0x92>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:46
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
9f0007d9:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0007df:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007e1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0007e4:	c1 e2 02             	shl    edx,0x2
9f0007e7:	01 d0                	add    eax,edx
9f0007e9:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007eb:	83 ec 08             	sub    esp,0x8
9f0007ee:	8d 93 34 f6 ff ff    	lea    edx,[ebx-0x9cc]
9f0007f4:	52                   	push   edx
9f0007f5:	50                   	push   eax
9f0007f6:	e8 ef 4b 00 00       	call   9f0053ea <strstrI>
9f0007fb:	83 c4 10             	add    esp,0x10
9f0007fe:	83 c0 01             	add    eax,0x1
9f000801:	83 ec 04             	sub    esp,0x4
9f000804:	6a 32                	push   0x32
9f000806:	50                   	push   eax
9f000807:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00080a:	e8 79 45 00 00       	call   9f004d88 <strncpyI>
9f00080f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:47
            return cnt+1;
9f000812:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000815:	83 c0 01             	add    eax,0x1
9f000818:	eb 13                	jmp    9f00082d <getenvI+0xa5>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:43 (discriminator 2)
    return resolveEnvVarsInStringI(input);
}

int getenvI(char *varname, char *value)
{
    for (int cnt=0;cnt<100;cnt++)
9f00081a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:43 (discriminator 1)
9f00081e:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
9f000822:	0f 8e 7b ff ff ff    	jle    9f0007a3 <getenvI+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:49
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
            return cnt+1;
        }
    return 0;
9f000828:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:50
}
9f00082d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000830:	c9                   	leave  
9f000831:	c3                   	ret    

9f000832 <getenv>:
getenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:53

VISIBLE int getenv(char *varname, char *value)
{
9f000832:	55                   	push   ebp
9f000833:	89 e5                	mov    ebp,esp
9f000835:	83 ec 08             	sub    esp,0x8
9f000838:	e8 49 59 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f00083d:	05 bf 89 00 00       	add    eax,0x89bf
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:54
    return getenvI(varname, value);
9f000842:	83 ec 08             	sub    esp,0x8
9f000845:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000848:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00084b:	e8 38 ff ff ff       	call   9f000788 <getenvI>
9f000850:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:55
}
9f000853:	c9                   	leave  
9f000854:	c3                   	ret    

9f000855 <setenv>:
setenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:58

VISIBLE void  setenv(char *varname, char *value)
{
9f000855:	55                   	push   ebp
9f000856:	89 e5                	mov    ebp,esp
9f000858:	53                   	push   ebx
9f000859:	83 ec 14             	sub    esp,0x14
9f00085c:	e8 6f 59 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f000861:	81 c3 9b 89 00 00    	add    ebx,0x899b
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:59
    uint32_t lastPopulated = 0;
9f000867:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:61
    
    for (int cnt=0;cnt<100;cnt++)
9f00086e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f000875:	e9 d5 00 00 00       	jmp    9f00094f <setenv+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:62
        if (processEnvp[cnt]!=0)
9f00087a:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000880:	8b 00                	mov    eax,DWORD PTR [eax]
9f000882:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000885:	c1 e2 02             	shl    edx,0x2
9f000888:	01 d0                	add    eax,edx
9f00088a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00088c:	85 c0                	test   eax,eax
9f00088e:	0f 84 b7 00 00 00    	je     9f00094b <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:64
        {
            lastPopulated = (uint32_t)processEnvp[cnt];
9f000894:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00089a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00089c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00089f:	c1 e2 02             	shl    edx,0x2
9f0008a2:	01 d0                	add    eax,edx
9f0008a4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0008a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:65
            if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f0008a9:	83 ec 0c             	sub    esp,0xc
9f0008ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0008af:	e8 60 43 00 00       	call   9f004c14 <strlenI>
9f0008b4:	83 c4 10             	add    esp,0x10
9f0008b7:	89 c1                	mov    ecx,eax
9f0008b9:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0008bf:	8b 00                	mov    eax,DWORD PTR [eax]
9f0008c1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0008c4:	c1 e2 02             	shl    edx,0x2
9f0008c7:	01 d0                	add    eax,edx
9f0008c9:	8b 00                	mov    eax,DWORD PTR [eax]
9f0008cb:	83 ec 04             	sub    esp,0x4
9f0008ce:	51                   	push   ecx
9f0008cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0008d2:	50                   	push   eax
9f0008d3:	e8 47 44 00 00       	call   9f004d1f <strncmpI>
9f0008d8:	83 c4 10             	add    esp,0x10
9f0008db:	85 c0                	test   eax,eax
9f0008dd:	75 6c                	jne    9f00094b <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:67
            {
                strcpyI(processEnvp[cnt],varname);
9f0008df:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0008e5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0008e7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0008ea:	c1 e2 02             	shl    edx,0x2
9f0008ed:	01 d0                	add    eax,edx
9f0008ef:	8b 00                	mov    eax,DWORD PTR [eax]
9f0008f1:	83 ec 08             	sub    esp,0x8
9f0008f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0008f7:	50                   	push   eax
9f0008f8:	e8 03 42 00 00       	call   9f004b00 <strcpyI>
9f0008fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:68
                strcatI(processEnvp[cnt],"=");
9f000900:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000906:	8b 00                	mov    eax,DWORD PTR [eax]
9f000908:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00090b:	c1 e2 02             	shl    edx,0x2
9f00090e:	01 d0                	add    eax,edx
9f000910:	8b 00                	mov    eax,DWORD PTR [eax]
9f000912:	83 ec 08             	sub    esp,0x8
9f000915:	8d 93 34 f6 ff ff    	lea    edx,[ebx-0x9cc]
9f00091b:	52                   	push   edx
9f00091c:	50                   	push   eax
9f00091d:	e8 08 40 00 00       	call   9f00492a <strcatI>
9f000922:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:69
                strcatI(processEnvp[cnt],value);
9f000925:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00092b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00092d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000930:	c1 e2 02             	shl    edx,0x2
9f000933:	01 d0                	add    eax,edx
9f000935:	8b 00                	mov    eax,DWORD PTR [eax]
9f000937:	83 ec 08             	sub    esp,0x8
9f00093a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00093d:	50                   	push   eax
9f00093e:	e8 e7 3f 00 00       	call   9f00492a <strcatI>
9f000943:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:70
                return;
9f000946:	e9 c6 00 00 00       	jmp    9f000a11 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:61 (discriminator 2)

VISIBLE void  setenv(char *varname, char *value)
{
    uint32_t lastPopulated = 0;
    
    for (int cnt=0;cnt<100;cnt++)
9f00094b:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:61 (discriminator 1)
9f00094f:	83 7d f0 63          	cmp    DWORD PTR [ebp-0x10],0x63
9f000953:	0f 8e 21 ff ff ff    	jle    9f00087a <setenv+0x25>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:73
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f000959:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f000960:	e9 a2 00 00 00       	jmp    9f000a07 <setenv+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:74
        if (processEnvp[cnt]==0)
9f000965:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00096b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00096d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000970:	c1 e2 02             	shl    edx,0x2
9f000973:	01 d0                	add    eax,edx
9f000975:	8b 00                	mov    eax,DWORD PTR [eax]
9f000977:	85 c0                	test   eax,eax
9f000979:	0f 85 84 00 00 00    	jne    9f000a03 <setenv+0x1ae>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:76
        {
            processEnvp[cnt]=(char*)lastPopulated+512;
9f00097f:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000985:	8b 00                	mov    eax,DWORD PTR [eax]
9f000987:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00098a:	c1 e2 02             	shl    edx,0x2
9f00098d:	01 d0                	add    eax,edx
9f00098f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000992:	81 c2 00 02 00 00    	add    edx,0x200
9f000998:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:77
            strcpyI(processEnvp[cnt],varname);
9f00099a:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0009a0:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009a2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0009a5:	c1 e2 02             	shl    edx,0x2
9f0009a8:	01 d0                	add    eax,edx
9f0009aa:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009ac:	83 ec 08             	sub    esp,0x8
9f0009af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0009b2:	50                   	push   eax
9f0009b3:	e8 48 41 00 00       	call   9f004b00 <strcpyI>
9f0009b8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:78
            strcatI(processEnvp[cnt],"=");
9f0009bb:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0009c1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009c3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0009c6:	c1 e2 02             	shl    edx,0x2
9f0009c9:	01 d0                	add    eax,edx
9f0009cb:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009cd:	83 ec 08             	sub    esp,0x8
9f0009d0:	8d 93 34 f6 ff ff    	lea    edx,[ebx-0x9cc]
9f0009d6:	52                   	push   edx
9f0009d7:	50                   	push   eax
9f0009d8:	e8 4d 3f 00 00       	call   9f00492a <strcatI>
9f0009dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:79
            strcatI(processEnvp[cnt],value);
9f0009e0:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0009e6:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009e8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0009eb:	c1 e2 02             	shl    edx,0x2
9f0009ee:	01 d0                	add    eax,edx
9f0009f0:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009f2:	83 ec 08             	sub    esp,0x8
9f0009f5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0009f8:	50                   	push   eax
9f0009f9:	e8 2c 3f 00 00       	call   9f00492a <strcatI>
9f0009fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:80
            return;
9f000a01:	eb 0e                	jmp    9f000a11 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:73 (discriminator 2)
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f000a03:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:73 (discriminator 1)
9f000a07:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
9f000a0b:	0f 8e 54 ff ff ff    	jle    9f000965 <setenv+0x110>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:84
            strcatI(processEnvp[cnt],value);
            return;
        }            
    //NOTE: if we get here, the value is thrown away!        
    
}
9f000a11:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000a14:	c9                   	leave  
9f000a15:	c3                   	ret    

9f000a16 <getcwdI>:
getcwdI():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:87

char* getcwdI(char* buf, size_t size)
{
9f000a16:	55                   	push   ebp
9f000a17:	89 e5                	mov    ebp,esp
9f000a19:	53                   	push   ebx
9f000a1a:	83 ec 04             	sub    esp,0x4
9f000a1d:	e8 64 57 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000a22:	05 da 87 00 00       	add    eax,0x87da
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:88
    return (char*)do_syscall2(SYSCALL_GETCWD,(uint32_t)buf,size);
9f000a27:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000a2a:	83 ec 04             	sub    esp,0x4
9f000a2d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000a30:	52                   	push   edx
9f000a31:	6a 4f                	push   0x4f
9f000a33:	89 c3                	mov    ebx,eax
9f000a35:	e8 c8 0a 00 00       	call   9f001502 <do_syscall2>
9f000a3a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:90
    
}
9f000a3d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000a40:	c9                   	leave  
9f000a41:	c3                   	ret    

9f000a42 <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:93

VISIBLE char* getcwd(char* buf, size_t size)
{
9f000a42:	55                   	push   ebp
9f000a43:	89 e5                	mov    ebp,esp
9f000a45:	83 ec 08             	sub    esp,0x8
9f000a48:	e8 39 57 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000a4d:	05 af 87 00 00       	add    eax,0x87af
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:94
    return getcwdI(buf,size);
9f000a52:	83 ec 08             	sub    esp,0x8
9f000a55:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000a58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000a5b:	e8 b6 ff ff ff       	call   9f000a16 <getcwdI>
9f000a60:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:95
}
9f000a63:	c9                   	leave  
9f000a64:	c3                   	ret    
9f000a65:	66 90                	xchg   ax,ax
9f000a67:	90                   	nop

9f000a68 <getdirI>:
getdirI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:19
    char *resolvePath_inPath;
    char *resolvePath_resPath;
    char *resolvePath_cwd;

int getdirI(char* path, direntry_t *entries, int bufferCount)
{
9f000a68:	55                   	push   ebp
9f000a69:	89 e5                	mov    ebp,esp
9f000a6b:	53                   	push   ebx
9f000a6c:	83 ec 04             	sub    esp,0x4
9f000a6f:	e8 12 57 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000a74:	05 88 87 00 00       	add    eax,0x8788
/home/yogi/src/os/aproj/libChrisOS/src/file.c:20
    return do_syscall3(SYSCALL_GETDENTS, (uint32_t)path, (uint32_t)entries, bufferCount);
9f000a79:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000a7c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000a7f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000a82:	53                   	push   ebx
9f000a83:	51                   	push   ecx
9f000a84:	52                   	push   edx
9f000a85:	68 04 03 00 00       	push   0x304
9f000a8a:	89 c3                	mov    ebx,eax
9f000a8c:	e8 35 0a 00 00       	call   9f0014c6 <do_syscall3>
9f000a91:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:22
    
}
9f000a94:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000a97:	c9                   	leave  
9f000a98:	c3                   	ret    

9f000a99 <getdir>:
getdir():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:24
VISIBLE int getdir(char* path, direntry_t *entries, int bufferCount)
{
9f000a99:	55                   	push   ebp
9f000a9a:	89 e5                	mov    ebp,esp
9f000a9c:	83 ec 08             	sub    esp,0x8
9f000a9f:	e8 e2 56 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000aa4:	05 58 87 00 00       	add    eax,0x8758
/home/yogi/src/os/aproj/libChrisOS/src/file.c:25
    return getdirI(path, entries, bufferCount);
9f000aa9:	83 ec 04             	sub    esp,0x4
9f000aac:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000aaf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000ab2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000ab5:	e8 ae ff ff ff       	call   9f000a68 <getdirI>
9f000aba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:26
}
9f000abd:	c9                   	leave  
9f000abe:	c3                   	ret    

9f000abf <openI>:
openI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:29

void* openI(char* path, const char* mode)
{
9f000abf:	55                   	push   ebp
9f000ac0:	89 e5                	mov    ebp,esp
9f000ac2:	53                   	push   ebx
9f000ac3:	83 ec 04             	sub    esp,0x4
9f000ac6:	e8 bb 56 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000acb:	05 31 87 00 00       	add    eax,0x8731
/home/yogi/src/os/aproj/libChrisOS/src/file.c:31
    //NOTE: Using syscall3 and passing -1 as 3rd parameter, otherwise param3 will be 0 and syscall will think freopen is calling!
    return (void*)do_syscall3(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode,-1);
9f000ad0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000ad3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000ad6:	6a ff                	push   0xffffffff
9f000ad8:	51                   	push   ecx
9f000ad9:	52                   	push   edx
9f000ada:	6a 02                	push   0x2
9f000adc:	89 c3                	mov    ebx,eax
9f000ade:	e8 e3 09 00 00       	call   9f0014c6 <do_syscall3>
9f000ae3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:32
}
9f000ae6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000ae9:	c9                   	leave  
9f000aea:	c3                   	ret    

9f000aeb <open>:
open():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:35

VISIBLE void* open(char* path, const char* mode)
{
9f000aeb:	55                   	push   ebp
9f000aec:	89 e5                	mov    ebp,esp
9f000aee:	83 ec 08             	sub    esp,0x8
9f000af1:	e8 90 56 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000af6:	05 06 87 00 00       	add    eax,0x8706
/home/yogi/src/os/aproj/libChrisOS/src/file.c:36
    return openI(path, mode);
9f000afb:	83 ec 08             	sub    esp,0x8
9f000afe:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000b01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000b04:	e8 b6 ff ff ff       	call   9f000abf <openI>
9f000b09:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:37
}
9f000b0c:	c9                   	leave  
9f000b0d:	c3                   	ret    

9f000b0e <file_cleanup>:
file_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:40

void file_cleanup()
{
9f000b0e:	55                   	push   ebp
9f000b0f:	89 e5                	mov    ebp,esp
9f000b11:	53                   	push   ebx
9f000b12:	83 ec 04             	sub    esp,0x4
9f000b15:	e8 b6 56 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f000b1a:	81 c3 e2 86 00 00    	add    ebx,0x86e2
/home/yogi/src/os/aproj/libChrisOS/src/file.c:41
    while (filesToClose)
9f000b20:	eb 1f                	jmp    9f000b41 <file_cleanup+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:42
        closeI(filesToClose++);
9f000b22:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000b28:	8b 00                	mov    eax,DWORD PTR [eax]
9f000b2a:	8d 48 04             	lea    ecx,[eax+0x4]
9f000b2d:	8b 93 d8 ff ff ff    	mov    edx,DWORD PTR [ebx-0x28]
9f000b33:	89 0a                	mov    DWORD PTR [edx],ecx
9f000b35:	83 ec 0c             	sub    esp,0xc
9f000b38:	50                   	push   eax
9f000b39:	e8 bc 00 00 00       	call   9f000bfa <closeI>
9f000b3e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:41
    return openI(path, mode);
}

void file_cleanup()
{
    while (filesToClose)
9f000b41:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000b47:	8b 00                	mov    eax,DWORD PTR [eax]
9f000b49:	85 c0                	test   eax,eax
9f000b4b:	75 d5                	jne    9f000b22 <file_cleanup+0x14>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:43
        closeI(filesToClose++);
    freeI(filesToClose);
9f000b4d:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000b53:	8b 00                	mov    eax,DWORD PTR [eax]
9f000b55:	83 ec 0c             	sub    esp,0xc
9f000b58:	50                   	push   eax
9f000b59:	e8 15 18 00 00       	call   9f002373 <freeI>
9f000b5e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:44
}
9f000b61:	90                   	nop
9f000b62:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000b65:	c9                   	leave  
9f000b66:	c3                   	ret    

9f000b67 <freopen>:
freopen():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:47

VISIBLE void* freopen(char* path, const char* mode, void *stream)
{
9f000b67:	55                   	push   ebp
9f000b68:	89 e5                	mov    ebp,esp
9f000b6a:	56                   	push   esi
9f000b6b:	53                   	push   ebx
9f000b6c:	83 ec 10             	sub    esp,0x10
9f000b6f:	e8 5c 56 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f000b74:	81 c3 88 86 00 00    	add    ebx,0x8688
/home/yogi/src/os/aproj/libChrisOS/src/file.c:48
    void *retVal=0;
9f000b7a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:49
    retVal = (void*)do_syscall3(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode, (uint32_t)stream);
9f000b81:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000b84:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000b87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000b8a:	51                   	push   ecx
9f000b8b:	52                   	push   edx
9f000b8c:	50                   	push   eax
9f000b8d:	6a 02                	push   0x2
9f000b8f:	e8 32 09 00 00       	call   9f0014c6 <do_syscall3>
9f000b94:	83 c4 10             	add    esp,0x10
9f000b97:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:50
    if (retVal==NULL)
9f000b9a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f000b9e:	75 07                	jne    9f000ba7 <freopen+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:51
        return (void*)-1;
9f000ba0:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f000ba5:	eb 4c                	jmp    9f000bf3 <freopen+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:52
    if (filesToClose==NULL)
9f000ba7:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000bad:	8b 00                	mov    eax,DWORD PTR [eax]
9f000baf:	85 c0                	test   eax,eax
9f000bb1:	75 17                	jne    9f000bca <freopen+0x63>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:54
    {
        filesToClose=mallocI(sizeof(uintptr_t)*25);
9f000bb3:	83 ec 0c             	sub    esp,0xc
9f000bb6:	6a 64                	push   0x64
9f000bb8:	e8 38 19 00 00       	call   9f0024f5 <mallocI>
9f000bbd:	83 c4 10             	add    esp,0x10
9f000bc0:	89 c2                	mov    edx,eax
9f000bc2:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000bc8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:56
    }
    filesToClose[filesToCloseCount++]=(uintptr_t)retVal;
9f000bca:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000bd0:	8b 30                	mov    esi,DWORD PTR [eax]
9f000bd2:	8b 83 d0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x30]
9f000bd8:	8b 00                	mov    eax,DWORD PTR [eax]
9f000bda:	8d 48 01             	lea    ecx,[eax+0x1]
9f000bdd:	8b 93 d0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x30]
9f000be3:	89 0a                	mov    DWORD PTR [edx],ecx
9f000be5:	c1 e0 02             	shl    eax,0x2
9f000be8:	8d 14 06             	lea    edx,[esi+eax*1]
9f000beb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000bee:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:57
    return retVal;
9f000bf0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:58
}
9f000bf3:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000bf6:	5b                   	pop    ebx
9f000bf7:	5e                   	pop    esi
9f000bf8:	5d                   	pop    ebp
9f000bf9:	c3                   	ret    

9f000bfa <closeI>:
closeI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:61

void closeI(void* handle)
{
9f000bfa:	55                   	push   ebp
9f000bfb:	89 e5                	mov    ebp,esp
9f000bfd:	53                   	push   ebx
9f000bfe:	83 ec 04             	sub    esp,0x4
9f000c01:	e8 80 55 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000c06:	05 f6 85 00 00       	add    eax,0x85f6
/home/yogi/src/os/aproj/libChrisOS/src/file.c:62
    do_syscall1(SYSCALL_CLOSE, (uint32_t)handle);
9f000c0b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000c0e:	83 ec 08             	sub    esp,0x8
9f000c11:	52                   	push   edx
9f000c12:	6a 03                	push   0x3
9f000c14:	89 c3                	mov    ebx,eax
9f000c16:	e8 25 09 00 00       	call   9f001540 <do_syscall1>
9f000c1b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:63
}
9f000c1e:	90                   	nop
9f000c1f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000c22:	c9                   	leave  
9f000c23:	c3                   	ret    

9f000c24 <close>:
close():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:66

VISIBLE void close(void* handle)
{
9f000c24:	55                   	push   ebp
9f000c25:	89 e5                	mov    ebp,esp
9f000c27:	83 ec 08             	sub    esp,0x8
9f000c2a:	e8 57 55 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000c2f:	05 cd 85 00 00       	add    eax,0x85cd
/home/yogi/src/os/aproj/libChrisOS/src/file.c:67
    return closeI(handle);
9f000c34:	83 ec 0c             	sub    esp,0xc
9f000c37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000c3a:	e8 bb ff ff ff       	call   9f000bfa <closeI>
9f000c3f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:68
}
9f000c42:	c9                   	leave  
9f000c43:	c3                   	ret    

9f000c44 <readI>:
readI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:71

int readI(void* handle, void *buffer, int size, int length)
{
9f000c44:	55                   	push   ebp
9f000c45:	89 e5                	mov    ebp,esp
9f000c47:	56                   	push   esi
9f000c48:	53                   	push   ebx
9f000c49:	e8 38 55 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000c4e:	05 ae 85 00 00       	add    eax,0x85ae
/home/yogi/src/os/aproj/libChrisOS/src/file.c:72
    return do_syscall4(SYSCALL_READ, (uint32_t)handle, (uint32_t)buffer, size, length);
9f000c53:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f000c56:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000c59:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000c5c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000c5f:	83 ec 0c             	sub    esp,0xc
9f000c62:	56                   	push   esi
9f000c63:	53                   	push   ebx
9f000c64:	51                   	push   ecx
9f000c65:	52                   	push   edx
9f000c66:	6a 04                	push   0x4
9f000c68:	89 c3                	mov    ebx,eax
9f000c6a:	e8 1d 08 00 00       	call   9f00148c <do_syscall4>
9f000c6f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:73
}
9f000c72:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000c75:	5b                   	pop    ebx
9f000c76:	5e                   	pop    esi
9f000c77:	5d                   	pop    ebp
9f000c78:	c3                   	ret    

9f000c79 <read>:
read():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:76

VISIBLE int read(void* handle, void *buffer, int size, int length)
{
9f000c79:	55                   	push   ebp
9f000c7a:	89 e5                	mov    ebp,esp
9f000c7c:	83 ec 08             	sub    esp,0x8
9f000c7f:	e8 02 55 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000c84:	05 78 85 00 00       	add    eax,0x8578
/home/yogi/src/os/aproj/libChrisOS/src/file.c:77
    return readI(handle, buffer, size, length);
9f000c89:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f000c8c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000c8f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000c92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000c95:	e8 aa ff ff ff       	call   9f000c44 <readI>
9f000c9a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:78
}
9f000c9d:	c9                   	leave  
9f000c9e:	c3                   	ret    

9f000c9f <writeI>:
writeI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:80
int writeI(void* handle, void *buffer, int size, int length)
{
9f000c9f:	55                   	push   ebp
9f000ca0:	89 e5                	mov    ebp,esp
9f000ca2:	56                   	push   esi
9f000ca3:	53                   	push   ebx
9f000ca4:	e8 dd 54 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000ca9:	05 53 85 00 00       	add    eax,0x8553
/home/yogi/src/os/aproj/libChrisOS/src/file.c:81
    return do_syscall4(SYSCALL_WRITE, (uint32_t)handle, (uint32_t)buffer, size, length);
9f000cae:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f000cb1:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000cb4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000cb7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000cba:	83 ec 0c             	sub    esp,0xc
9f000cbd:	56                   	push   esi
9f000cbe:	53                   	push   ebx
9f000cbf:	51                   	push   ecx
9f000cc0:	52                   	push   edx
9f000cc1:	6a 05                	push   0x5
9f000cc3:	89 c3                	mov    ebx,eax
9f000cc5:	e8 c2 07 00 00       	call   9f00148c <do_syscall4>
9f000cca:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:82
}
9f000ccd:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000cd0:	5b                   	pop    ebx
9f000cd1:	5e                   	pop    esi
9f000cd2:	5d                   	pop    ebp
9f000cd3:	c3                   	ret    

9f000cd4 <write>:
write():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:85

VISIBLE int write(void* handle, void *buffer, int size, int length)
{
9f000cd4:	55                   	push   ebp
9f000cd5:	89 e5                	mov    ebp,esp
9f000cd7:	83 ec 08             	sub    esp,0x8
9f000cda:	e8 a7 54 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000cdf:	05 1d 85 00 00       	add    eax,0x851d
/home/yogi/src/os/aproj/libChrisOS/src/file.c:86
    return writeI(handle, buffer, size, length);
9f000ce4:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f000ce7:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000cea:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000ced:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000cf0:	e8 aa ff ff ff       	call   9f000c9f <writeI>
9f000cf5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:87
}
9f000cf8:	c9                   	leave  
9f000cf9:	c3                   	ret    

9f000cfa <seekI>:
seekI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:90

int seekI(void* handle, long position, int whence)
{
9f000cfa:	55                   	push   ebp
9f000cfb:	89 e5                	mov    ebp,esp
9f000cfd:	53                   	push   ebx
9f000cfe:	83 ec 04             	sub    esp,0x4
9f000d01:	e8 80 54 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000d06:	05 f6 84 00 00       	add    eax,0x84f6
/home/yogi/src/os/aproj/libChrisOS/src/file.c:91
    return do_syscall3(SYSCALL_SEEK, (uint32_t)handle, position, whence);
9f000d0b:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000d0e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000d11:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000d14:	53                   	push   ebx
9f000d15:	51                   	push   ecx
9f000d16:	52                   	push   edx
9f000d17:	6a 0b                	push   0xb
9f000d19:	89 c3                	mov    ebx,eax
9f000d1b:	e8 a6 07 00 00       	call   9f0014c6 <do_syscall3>
9f000d20:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:92
}
9f000d23:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000d26:	c9                   	leave  
9f000d27:	c3                   	ret    

9f000d28 <seek>:
seek():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:95

VISIBLE int seek(void* handle, long position, int whence)
{
9f000d28:	55                   	push   ebp
9f000d29:	89 e5                	mov    ebp,esp
9f000d2b:	83 ec 08             	sub    esp,0x8
9f000d2e:	e8 53 54 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000d33:	05 c9 84 00 00       	add    eax,0x84c9
/home/yogi/src/os/aproj/libChrisOS/src/file.c:96
    return seekI(handle, position, whence);
9f000d38:	83 ec 04             	sub    esp,0x4
9f000d3b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000d3e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000d41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000d44:	e8 b1 ff ff ff       	call   9f000cfa <seekI>
9f000d49:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:97
}
9f000d4c:	c9                   	leave  
9f000d4d:	c3                   	ret    

9f000d4e <statI>:
statI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:99
int statI(char *path, fstat_t *stat)
{
9f000d4e:	55                   	push   ebp
9f000d4f:	89 e5                	mov    ebp,esp
9f000d51:	53                   	push   ebx
9f000d52:	83 ec 04             	sub    esp,0x4
9f000d55:	e8 2c 54 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000d5a:	05 a2 84 00 00       	add    eax,0x84a2
/home/yogi/src/os/aproj/libChrisOS/src/file.c:100
    return do_syscall2(SYSCALL_STAT, (uint32_t)path, (uint32_t)stat);
9f000d5f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000d62:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000d65:	83 ec 04             	sub    esp,0x4
9f000d68:	51                   	push   ecx
9f000d69:	52                   	push   edx
9f000d6a:	6a 0a                	push   0xa
9f000d6c:	89 c3                	mov    ebx,eax
9f000d6e:	e8 8f 07 00 00       	call   9f001502 <do_syscall2>
9f000d73:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:101
}
9f000d76:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000d79:	c9                   	leave  
9f000d7a:	c3                   	ret    

9f000d7b <stat>:
stat():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:104

VISIBLE int stat(char *path, fstat_t *stat)
{
9f000d7b:	55                   	push   ebp
9f000d7c:	89 e5                	mov    ebp,esp
9f000d7e:	83 ec 08             	sub    esp,0x8
9f000d81:	e8 00 54 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f000d86:	05 76 84 00 00       	add    eax,0x8476
/home/yogi/src/os/aproj/libChrisOS/src/file.c:105
    return statI(path, stat);
9f000d8b:	83 ec 08             	sub    esp,0x8
9f000d8e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000d91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000d94:	e8 b5 ff ff ff       	call   9f000d4e <statI>
9f000d99:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:106
}
9f000d9c:	c9                   	leave  
9f000d9d:	c3                   	ret    

9f000d9e <resolvePath>:
resolvePath():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:109

VISIBLE int resolvePath(const char *inPath, char *outPath, bool usePathVariable)
{
9f000d9e:	55                   	push   ebp
9f000d9f:	89 e5                	mov    ebp,esp
9f000da1:	53                   	push   ebx
9f000da2:	83 ec 34             	sub    esp,0x34
9f000da5:	e8 26 54 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f000daa:	81 c3 52 84 00 00    	add    ebx,0x8452
9f000db0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f000db3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
/home/yogi/src/os/aproj/libChrisOS/src/file.c:110
    char delim[2]=":";
9f000db6:	66 c7 45 e6 3a 00    	mov    WORD PTR [ebp-0x1a],0x3a
/home/yogi/src/os/aproj/libChrisOS/src/file.c:112
    char *token;
    int retVal=-1;
9f000dbc:	c7 45 f0 ff ff ff ff 	mov    DWORD PTR [ebp-0x10],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/file.c:115
    fstat_t fstat;
    
    if (!resolvePath_envPath)
9f000dc3:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000dc9:	8b 00                	mov    eax,DWORD PTR [eax]
9f000dcb:	85 c0                	test   eax,eax
9f000dcd:	75 1a                	jne    9f000de9 <resolvePath+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:116
        resolvePath_envPath=mallocI(1024);
9f000dcf:	83 ec 0c             	sub    esp,0xc
9f000dd2:	68 00 04 00 00       	push   0x400
9f000dd7:	e8 19 17 00 00       	call   9f0024f5 <mallocI>
9f000ddc:	83 c4 10             	add    esp,0x10
9f000ddf:	89 c2                	mov    edx,eax
9f000de1:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000de7:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:117
    if (!resolvePath_cwd)
9f000de9:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000def:	8b 00                	mov    eax,DWORD PTR [eax]
9f000df1:	85 c0                	test   eax,eax
9f000df3:	75 1a                	jne    9f000e0f <resolvePath+0x71>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:118
        resolvePath_cwd=mallocI(1024);
9f000df5:	83 ec 0c             	sub    esp,0xc
9f000df8:	68 00 04 00 00       	push   0x400
9f000dfd:	e8 f3 16 00 00       	call   9f0024f5 <mallocI>
9f000e02:	83 c4 10             	add    esp,0x10
9f000e05:	89 c2                	mov    edx,eax
9f000e07:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000e0d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:119
    if (!resolvePath_inPath)
9f000e0f:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000e15:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e17:	85 c0                	test   eax,eax
9f000e19:	75 1a                	jne    9f000e35 <resolvePath+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:120
            resolvePath_inPath=mallocI(1024);
9f000e1b:	83 ec 0c             	sub    esp,0xc
9f000e1e:	68 00 04 00 00       	push   0x400
9f000e23:	e8 cd 16 00 00       	call   9f0024f5 <mallocI>
9f000e28:	83 c4 10             	add    esp,0x10
9f000e2b:	89 c2                	mov    edx,eax
9f000e2d:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000e33:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:121
    if (!resolvePath_resPath)
9f000e35:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e3b:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e3d:	85 c0                	test   eax,eax
9f000e3f:	75 1a                	jne    9f000e5b <resolvePath+0xbd>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:122
        resolvePath_resPath=mallocI(1024);
9f000e41:	83 ec 0c             	sub    esp,0xc
9f000e44:	68 00 04 00 00       	push   0x400
9f000e49:	e8 a7 16 00 00       	call   9f0024f5 <mallocI>
9f000e4e:	83 c4 10             	add    esp,0x10
9f000e51:	89 c2                	mov    edx,eax
9f000e53:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e59:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:127

    //using the PATH variable, attempt to resolve the path to an executable when a path isn't given in the commandline
    
    //If there is a / character in the path, then don't attempt to resolve
    if (usePathVariable)
9f000e5b:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
9f000e5f:	74 1d                	je     9f000e7e <resolvePath+0xe0>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:128
        getenvI("PATH",resolvePath_envPath);
9f000e61:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000e67:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e69:	83 ec 08             	sub    esp,0x8
9f000e6c:	50                   	push   eax
9f000e6d:	8d 83 36 f6 ff ff    	lea    eax,[ebx-0x9ca]
9f000e73:	50                   	push   eax
9f000e74:	e8 0f f9 ff ff       	call   9f000788 <getenvI>
9f000e79:	83 c4 10             	add    esp,0x10
9f000e7c:	eb 0b                	jmp    9f000e89 <resolvePath+0xeb>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:130
    else
        resolvePath_envPath[0]='\0';
9f000e7e:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000e84:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e86:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:132

    getcwdI(resolvePath_cwd,1024);
9f000e89:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000e8f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e91:	83 ec 08             	sub    esp,0x8
9f000e94:	68 00 04 00 00       	push   0x400
9f000e99:	50                   	push   eax
9f000e9a:	e8 77 fb ff ff       	call   9f000a16 <getcwdI>
9f000e9f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:134
    
    if (strstrI(inPath, "/"))
9f000ea2:	83 ec 08             	sub    esp,0x8
9f000ea5:	8d 83 3b f6 ff ff    	lea    eax,[ebx-0x9c5]
9f000eab:	50                   	push   eax
9f000eac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000eaf:	e8 36 45 00 00       	call   9f0053ea <strstrI>
9f000eb4:	83 c4 10             	add    esp,0x10
9f000eb7:	85 c0                	test   eax,eax
9f000eb9:	74 53                	je     9f000f0e <resolvePath+0x170>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:136
    {
        if (*inPath!='/')
9f000ebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000ebe:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000ec1:	3c 2f                	cmp    al,0x2f
9f000ec3:	74 2c                	je     9f000ef1 <resolvePath+0x153>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:138
        {
            strcpyI(outPath,resolvePath_cwd);
9f000ec5:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000ecb:	8b 00                	mov    eax,DWORD PTR [eax]
9f000ecd:	83 ec 08             	sub    esp,0x8
9f000ed0:	50                   	push   eax
9f000ed1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000ed4:	e8 27 3c 00 00       	call   9f004b00 <strcpyI>
9f000ed9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:139
            strcatI(outPath,"/");
9f000edc:	83 ec 08             	sub    esp,0x8
9f000edf:	8d 83 3b f6 ff ff    	lea    eax,[ebx-0x9c5]
9f000ee5:	50                   	push   eax
9f000ee6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000ee9:	e8 3c 3a 00 00       	call   9f00492a <strcatI>
9f000eee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:141
        }
        strcatI(outPath,inPath);
9f000ef1:	83 ec 08             	sub    esp,0x8
9f000ef4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000ef7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000efa:	e8 2b 3a 00 00       	call   9f00492a <strcatI>
9f000eff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:142
        retVal=0;
9f000f02:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f000f09:	e9 b1 01 00 00       	jmp    9f0010bf <resolvePath+0x321>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:146
    }
    else
    {
        strcpyI(resolvePath_inPath,inPath);
9f000f0e:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000f14:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f16:	83 ec 08             	sub    esp,0x8
9f000f19:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000f1c:	50                   	push   eax
9f000f1d:	e8 de 3b 00 00       	call   9f004b00 <strcpyI>
9f000f22:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:147
        if (resolvePath_envPath[0])
9f000f25:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000f2b:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f2d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000f30:	84 c0                	test   al,al
9f000f32:	74 20                	je     9f000f54 <resolvePath+0x1b6>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:148
            token=strtokI(resolvePath_envPath,delim);
9f000f34:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000f3a:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f3c:	83 ec 08             	sub    esp,0x8
9f000f3f:	8d 55 e6             	lea    edx,[ebp-0x1a]
9f000f42:	52                   	push   edx
9f000f43:	50                   	push   eax
9f000f44:	e8 d3 f1 ff ff       	call   9f00011c <strtokI>
9f000f49:	83 c4 10             	add    esp,0x10
9f000f4c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f000f4f:	e9 c9 00 00 00       	jmp    9f00101d <resolvePath+0x27f>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:150
        else
            token=NULL;
9f000f54:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:151
        while (token!=NULL)
9f000f5b:	e9 bd 00 00 00       	jmp    9f00101d <resolvePath+0x27f>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:153
        {
            strcpyI(resolvePath_resPath,token);
9f000f60:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000f66:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f68:	83 ec 08             	sub    esp,0x8
9f000f6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f000f6e:	50                   	push   eax
9f000f6f:	e8 8c 3b 00 00       	call   9f004b00 <strcpyI>
9f000f74:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:154
            if (strcmpI(resolvePath_resPath,"/")!=0)
9f000f77:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000f7d:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f7f:	83 ec 08             	sub    esp,0x8
9f000f82:	8d 93 3b f6 ff ff    	lea    edx,[ebx-0x9c5]
9f000f88:	52                   	push   edx
9f000f89:	50                   	push   eax
9f000f8a:	e8 b5 3a 00 00       	call   9f004a44 <strcmpI>
9f000f8f:	83 c4 10             	add    esp,0x10
9f000f92:	85 c0                	test   eax,eax
9f000f94:	74 1b                	je     9f000fb1 <resolvePath+0x213>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:155
                strcatI(resolvePath_resPath,"/");
9f000f96:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000f9c:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f9e:	83 ec 08             	sub    esp,0x8
9f000fa1:	8d 93 3b f6 ff ff    	lea    edx,[ebx-0x9c5]
9f000fa7:	52                   	push   edx
9f000fa8:	50                   	push   eax
9f000fa9:	e8 7c 39 00 00       	call   9f00492a <strcatI>
9f000fae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:156
            strcatI(resolvePath_resPath,inPath);
9f000fb1:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000fb7:	8b 00                	mov    eax,DWORD PTR [eax]
9f000fb9:	83 ec 08             	sub    esp,0x8
9f000fbc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000fbf:	50                   	push   eax
9f000fc0:	e8 65 39 00 00       	call   9f00492a <strcatI>
9f000fc5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:157
            int res=statI(resolvePath_resPath,&fstat);
9f000fc8:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000fce:	8b 00                	mov    eax,DWORD PTR [eax]
9f000fd0:	83 ec 08             	sub    esp,0x8
9f000fd3:	8d 55 dc             	lea    edx,[ebp-0x24]
9f000fd6:	52                   	push   edx
9f000fd7:	50                   	push   eax
9f000fd8:	e8 71 fd ff ff       	call   9f000d4e <statI>
9f000fdd:	83 c4 10             	add    esp,0x10
9f000fe0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:158
            if (res==0)
9f000fe3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f000fe7:	75 20                	jne    9f001009 <resolvePath+0x26b>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:160
            {
                strcpyI(outPath,resolvePath_resPath);
9f000fe9:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000fef:	8b 00                	mov    eax,DWORD PTR [eax]
9f000ff1:	83 ec 08             	sub    esp,0x8
9f000ff4:	50                   	push   eax
9f000ff5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000ff8:	e8 03 3b 00 00       	call   9f004b00 <strcpyI>
9f000ffd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:161
                retVal=0;
9f001000:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:162
                break;
9f001007:	eb 1e                	jmp    9f001027 <resolvePath+0x289>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:164
            }
            token=strtokI(NULL,delim);
9f001009:	83 ec 08             	sub    esp,0x8
9f00100c:	8d 45 e6             	lea    eax,[ebp-0x1a]
9f00100f:	50                   	push   eax
9f001010:	6a 00                	push   0x0
9f001012:	e8 05 f1 ff ff       	call   9f00011c <strtokI>
9f001017:	83 c4 10             	add    esp,0x10
9f00101a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:151
        strcpyI(resolvePath_inPath,inPath);
        if (resolvePath_envPath[0])
            token=strtokI(resolvePath_envPath,delim);
        else
            token=NULL;
        while (token!=NULL)
9f00101d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001021:	0f 85 39 ff ff ff    	jne    9f000f60 <resolvePath+0x1c2>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:167
                break;
            }
            token=strtokI(NULL,delim);
        }

        if (retVal==-1)
9f001027:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
9f00102b:	0f 85 8e 00 00 00    	jne    9f0010bf <resolvePath+0x321>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:169
        {
            strcpyI(resolvePath_resPath,resolvePath_cwd);
9f001031:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001037:	8b 10                	mov    edx,DWORD PTR [eax]
9f001039:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f00103f:	8b 00                	mov    eax,DWORD PTR [eax]
9f001041:	83 ec 08             	sub    esp,0x8
9f001044:	52                   	push   edx
9f001045:	50                   	push   eax
9f001046:	e8 b5 3a 00 00       	call   9f004b00 <strcpyI>
9f00104b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:170
            strcatI(resolvePath_resPath,"/");
9f00104e:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f001054:	8b 00                	mov    eax,DWORD PTR [eax]
9f001056:	83 ec 08             	sub    esp,0x8
9f001059:	8d 93 3b f6 ff ff    	lea    edx,[ebx-0x9c5]
9f00105f:	52                   	push   edx
9f001060:	50                   	push   eax
9f001061:	e8 c4 38 00 00       	call   9f00492a <strcatI>
9f001066:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:171
            strcatI(resolvePath_resPath,inPath);
9f001069:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f00106f:	8b 00                	mov    eax,DWORD PTR [eax]
9f001071:	83 ec 08             	sub    esp,0x8
9f001074:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001077:	50                   	push   eax
9f001078:	e8 ad 38 00 00       	call   9f00492a <strcatI>
9f00107d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:172
            int res=statI(resolvePath_resPath,&fstat);
9f001080:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f001086:	8b 00                	mov    eax,DWORD PTR [eax]
9f001088:	83 ec 08             	sub    esp,0x8
9f00108b:	8d 55 dc             	lea    edx,[ebp-0x24]
9f00108e:	52                   	push   edx
9f00108f:	50                   	push   eax
9f001090:	e8 b9 fc ff ff       	call   9f000d4e <statI>
9f001095:	83 c4 10             	add    esp,0x10
9f001098:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:173
            if (res==0)
9f00109b:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f00109f:	75 1e                	jne    9f0010bf <resolvePath+0x321>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:175
            {
                strcpyI(outPath,resolvePath_resPath);
9f0010a1:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f0010a7:	8b 00                	mov    eax,DWORD PTR [eax]
9f0010a9:	83 ec 08             	sub    esp,0x8
9f0010ac:	50                   	push   eax
9f0010ad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0010b0:	e8 4b 3a 00 00       	call   9f004b00 <strcpyI>
9f0010b5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:176
                retVal=0;
9f0010b8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:181
            }
        }
    }
    
    return retVal;
9f0010bf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:182
}
9f0010c2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0010c5:	c9                   	leave  
9f0010c6:	c3                   	ret    

9f0010c7 <tellI>:
tellI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:185

long tellI(void *stream)
{
9f0010c7:	55                   	push   ebp
9f0010c8:	89 e5                	mov    ebp,esp
9f0010ca:	53                   	push   ebx
9f0010cb:	83 ec 04             	sub    esp,0x4
9f0010ce:	e8 b3 50 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0010d3:	05 29 81 00 00       	add    eax,0x8129
/home/yogi/src/os/aproj/libChrisOS/src/file.c:186
    return do_syscall1(SYSCALL_TELL,(uint32_t)stream);
9f0010d8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0010db:	83 ec 08             	sub    esp,0x8
9f0010de:	52                   	push   edx
9f0010df:	6a 0c                	push   0xc
9f0010e1:	89 c3                	mov    ebx,eax
9f0010e3:	e8 58 04 00 00       	call   9f001540 <do_syscall1>
9f0010e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:187
}
9f0010eb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0010ee:	c9                   	leave  
9f0010ef:	c3                   	ret    

9f0010f0 <tell>:
tell():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:190

VISIBLE long tell(void *stream)
{
9f0010f0:	55                   	push   ebp
9f0010f1:	89 e5                	mov    ebp,esp
9f0010f3:	83 ec 08             	sub    esp,0x8
9f0010f6:	e8 8b 50 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0010fb:	05 01 81 00 00       	add    eax,0x8101
/home/yogi/src/os/aproj/libChrisOS/src/file.c:191
    return tellI(stream);
9f001100:	83 ec 0c             	sub    esp,0xc
9f001103:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001106:	e8 bc ff ff ff       	call   9f0010c7 <tellI>
9f00110b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:192
}
9f00110e:	c9                   	leave  
9f00110f:	c3                   	ret    

9f001110 <getlineI>:
getlineI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:195

size_t getlineI(char **lineptr, size_t *n, void *stream)
{
9f001110:	55                   	push   ebp
9f001111:	89 e5                	mov    ebp,esp
9f001113:	53                   	push   ebx
9f001114:	83 ec 24             	sub    esp,0x24
9f001117:	e8 b4 50 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f00111c:	81 c3 e0 80 00 00    	add    ebx,0x80e0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:197
    char *buffer;
    int bytesReturned=0;
9f001122:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:198
    size_t bytesParsed=0;
9f001129:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:199
    char *crPtr=NULL;
9f001130:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:200
    char *lineToOutput=*lineptr;
9f001137:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00113a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00113c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:201
    size_t lLinePtrLen=*n;
9f00113f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001142:	8b 00                	mov    eax,DWORD PTR [eax]
9f001144:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:202
    int startFilePos=tellI(stream);
9f001147:	83 ec 0c             	sub    esp,0xc
9f00114a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f00114d:	e8 75 ff ff ff       	call   9f0010c7 <tellI>
9f001152:	83 c4 10             	add    esp,0x10
9f001155:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:203
    int retVal=-1;
9f001158:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/file.c:205
    
    buffer=mallocI(GETLINE_BUFFER_SIZE);        
9f00115f:	83 ec 0c             	sub    esp,0xc
9f001162:	68 00 04 00 00       	push   0x400
9f001167:	e8 89 13 00 00       	call   9f0024f5 <mallocI>
9f00116c:	83 c4 10             	add    esp,0x10
9f00116f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:207
    
    while ((bytesReturned=readI(stream, buffer,GETLINE_BUFFER_SIZE,1))>0)
9f001172:	e9 22 01 00 00       	jmp    9f001299 <getlineI+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:209
    {
        if (crPtr==strstrI(buffer,"\n"))
9f001177:	83 ec 08             	sub    esp,0x8
9f00117a:	8d 83 3d f6 ff ff    	lea    eax,[ebx-0x9c3]
9f001180:	50                   	push   eax
9f001181:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001184:	e8 61 42 00 00       	call   9f0053ea <strstrI>
9f001189:	83 c4 10             	add    esp,0x10
9f00118c:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
9f00118f:	0f 85 cf 00 00 00    	jne    9f001264 <getlineI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:211
        { 
            if (crPtr-buffer+bytesParsed<*n)
9f001195:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f001198:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00119b:	29 c2                	sub    edx,eax
9f00119d:	89 d0                	mov    eax,edx
9f00119f:	89 c2                	mov    edx,eax
9f0011a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0011a4:	01 c2                	add    edx,eax
9f0011a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0011a9:	8b 00                	mov    eax,DWORD PTR [eax]
9f0011ab:	39 c2                	cmp    edx,eax
9f0011ad:	73 1f                	jae    9f0011ce <getlineI+0xbe>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:212
                strncatI(lineToOutput,buffer,crPtr-buffer);
9f0011af:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0011b2:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0011b5:	29 c2                	sub    edx,eax
9f0011b7:	89 d0                	mov    eax,edx
9f0011b9:	89 c2                	mov    edx,eax
9f0011bb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0011be:	83 ec 04             	sub    esp,0x4
9f0011c1:	52                   	push   edx
9f0011c2:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f0011c5:	50                   	push   eax
9f0011c6:	e8 9d 37 00 00       	call   9f004968 <strncatI>
9f0011cb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:213
            if (bytesParsed+(crPtr-buffer)>*n)
9f0011ce:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0011d1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0011d4:	29 c2                	sub    edx,eax
9f0011d6:	89 d0                	mov    eax,edx
9f0011d8:	89 c2                	mov    edx,eax
9f0011da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0011dd:	01 c2                	add    edx,eax
9f0011df:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0011e2:	8b 00                	mov    eax,DWORD PTR [eax]
9f0011e4:	39 c2                	cmp    edx,eax
9f0011e6:	76 21                	jbe    9f001209 <getlineI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:214
                reallocI(lineToOutput,bytesParsed+(crPtr-buffer));
9f0011e8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0011eb:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0011ee:	29 c2                	sub    edx,eax
9f0011f0:	89 d0                	mov    eax,edx
9f0011f2:	89 c2                	mov    edx,eax
9f0011f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0011f7:	01 c2                	add    edx,eax
9f0011f9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0011fc:	83 ec 08             	sub    esp,0x8
9f0011ff:	52                   	push   edx
9f001200:	50                   	push   eax
9f001201:	e8 cf 15 00 00       	call   9f0027d5 <reallocI>
9f001206:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:215
            strncatI(lineToOutput,buffer,crPtr-buffer);
9f001209:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00120c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00120f:	29 c2                	sub    edx,eax
9f001211:	89 d0                	mov    eax,edx
9f001213:	89 c2                	mov    edx,eax
9f001215:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001218:	83 ec 04             	sub    esp,0x4
9f00121b:	52                   	push   edx
9f00121c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f00121f:	50                   	push   eax
9f001220:	e8 43 37 00 00       	call   9f004968 <strncatI>
9f001225:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:216
            bytesParsed+=(crPtr-buffer);
9f001228:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00122b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00122e:	29 c2                	sub    edx,eax
9f001230:	89 d0                	mov    eax,edx
9f001232:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:217
            seekI(stream, startFilePos+bytesParsed,SEEK_SET);
9f001235:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f001238:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00123b:	01 d0                	add    eax,edx
9f00123d:	83 ec 04             	sub    esp,0x4
9f001240:	6a 00                	push   0x0
9f001242:	50                   	push   eax
9f001243:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001246:	e8 af fa ff ff       	call   9f000cfa <seekI>
9f00124b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:218
            *n=lLinePtrLen;
9f00124e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001251:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001254:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:219
            lineptr=&lineToOutput;
9f001256:	8d 45 d8             	lea    eax,[ebp-0x28]
9f001259:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:220
            retVal=bytesParsed;
9f00125c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00125f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:221
            goto getlineReturn;
9f001262:	eb 57                	jmp    9f0012bb <getlineI+0x1ab>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:225
        }
        else
        {
            lLinePtrLen+=bytesReturned;
9f001264:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001267:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:226
            bytesParsed+=bytesReturned;
9f00126a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00126d:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:227
            reallocI(lineToOutput,lLinePtrLen);
9f001270:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001273:	83 ec 08             	sub    esp,0x8
9f001276:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001279:	50                   	push   eax
9f00127a:	e8 56 15 00 00       	call   9f0027d5 <reallocI>
9f00127f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:228
            strncatI(lineToOutput,buffer,GETLINE_BUFFER_SIZE);
9f001282:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001285:	83 ec 04             	sub    esp,0x4
9f001288:	68 00 04 00 00       	push   0x400
9f00128d:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001290:	50                   	push   eax
9f001291:	e8 d2 36 00 00       	call   9f004968 <strncatI>
9f001296:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:207
    int startFilePos=tellI(stream);
    int retVal=-1;
    
    buffer=mallocI(GETLINE_BUFFER_SIZE);        
    
    while ((bytesReturned=readI(stream, buffer,GETLINE_BUFFER_SIZE,1))>0)
9f001299:	6a 01                	push   0x1
9f00129b:	68 00 04 00 00       	push   0x400
9f0012a0:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f0012a3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0012a6:	e8 99 f9 ff ff       	call   9f000c44 <readI>
9f0012ab:	83 c4 10             	add    esp,0x10
9f0012ae:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f0012b1:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f0012b5:	0f 8f bc fe ff ff    	jg     9f001177 <getlineI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:233
            strncatI(lineToOutput,buffer,GETLINE_BUFFER_SIZE);
        }
    }

getlineReturn:    
    freeI(buffer);
9f0012bb:	83 ec 0c             	sub    esp,0xc
9f0012be:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f0012c1:	e8 ad 10 00 00       	call   9f002373 <freeI>
9f0012c6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:234
    return retVal;
9f0012c9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:235
}
9f0012cc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0012cf:	c9                   	leave  
9f0012d0:	c3                   	ret    

9f0012d1 <getline>:
getline():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:238

VISIBLE size_t getline(char **lineptr, size_t *n, void *stream)
{
9f0012d1:	55                   	push   ebp
9f0012d2:	89 e5                	mov    ebp,esp
9f0012d4:	83 ec 08             	sub    esp,0x8
9f0012d7:	e8 aa 4e 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0012dc:	05 20 7f 00 00       	add    eax,0x7f20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:239
    return getlineI(lineptr, n, stream);
9f0012e1:	83 ec 04             	sub    esp,0x4
9f0012e4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0012e7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0012ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0012ed:	e8 1e fe ff ff       	call   9f001110 <getlineI>
9f0012f2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:240
}
9f0012f5:	c9                   	leave  
9f0012f6:	c3                   	ret    

9f0012f7 <unlink>:
unlink():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:243

VISIBLE int unlink(char *filename)
{
9f0012f7:	55                   	push   ebp
9f0012f8:	89 e5                	mov    ebp,esp
9f0012fa:	53                   	push   ebx
9f0012fb:	83 ec 04             	sub    esp,0x4
9f0012fe:	e8 83 4e 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f001303:	05 f9 7e 00 00       	add    eax,0x7ef9
/home/yogi/src/os/aproj/libChrisOS/src/file.c:244
    return do_syscall1(SYSCALL_UNLINK,(uintptr_t)filename);
9f001308:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00130b:	83 ec 08             	sub    esp,0x8
9f00130e:	52                   	push   edx
9f00130f:	6a 0d                	push   0xd
9f001311:	89 c3                	mov    ebx,eax
9f001313:	e8 28 02 00 00       	call   9f001540 <do_syscall1>
9f001318:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:245
9f00131b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00131e:	c9                   	leave  
9f00131f:	c3                   	ret    

9f001320 <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
9f001320:	55                   	push   ebp
9f001321:	89 e5                	mov    ebp,esp
9f001323:	53                   	push   ebx
9f001324:	e8 5d 4e 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f001329:	05 d3 7e 00 00       	add    eax,0x7ed3
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
9f00132e:	b8 05 00 00 00       	mov    eax,0x5
9f001333:	bb 01 00 00 00       	mov    ebx,0x1
9f001338:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00133b:	89 d1                	mov    ecx,edx
9f00133d:	e8 fc ff ff ff       	call   9f00133e <puts+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
9f001342:	90                   	nop
9f001343:	5b                   	pop    ebx
9f001344:	5d                   	pop    ebp
9f001345:	c3                   	ret    

9f001346 <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
9f001346:	55                   	push   ebp
9f001347:	89 e5                	mov    ebp,esp
9f001349:	53                   	push   ebx
9f00134a:	83 ec 14             	sub    esp,0x14
9f00134d:	e8 34 4e 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f001352:	05 aa 7e 00 00       	add    eax,0x7eaa
9f001357:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00135a:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
9f00135d:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
9f001363:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
9f001367:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
9f00136a:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
9f00136e:	b8 05 00 00 00       	mov    eax,0x5
9f001373:	bb 01 00 00 00       	mov    ebx,0x1
9f001378:	8d 55 fa             	lea    edx,[ebp-0x6]
9f00137b:	89 d1                	mov    ecx,edx
9f00137d:	e8 fc ff ff ff       	call   9f00137e <putc+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
9f001382:	90                   	nop
9f001383:	83 c4 14             	add    esp,0x14
9f001386:	5b                   	pop    ebx
9f001387:	5d                   	pop    ebp
9f001388:	c3                   	ret    

9f001389 <getchar>:
getchar():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32



VISIBLE char getchar()
{
9f001389:	55                   	push   ebp
9f00138a:	89 e5                	mov    ebp,esp
9f00138c:	53                   	push   ebx
9f00138d:	83 ec 10             	sub    esp,0x10
9f001390:	e8 f1 4d 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f001395:	05 67 7e 00 00       	add    eax,0x7e67
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:36
    char c;
    while (1==1)
    {
        READCHAR(c);
9f00139a:	b8 04 00 00 00       	mov    eax,0x4
9f00139f:	ba 00 00 00 00       	mov    edx,0x0
9f0013a4:	89 d3                	mov    ebx,edx
9f0013a6:	e8 fc ff ff ff       	call   9f0013a7 <getchar+0x1e>
9f0013ab:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:37
        if (c)
9f0013ae:	80 7d fb 00          	cmp    BYTE PTR [ebp-0x5],0x0
9f0013b2:	74 06                	je     9f0013ba <getchar+0x31>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38
            return c;
9f0013b4:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
9f0013b8:	eb 0c                	jmp    9f0013c6 <getchar+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:39
        asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f0013ba:	b8 02 03 00 00       	mov    eax,0x302
9f0013bf:	e8 fc ff ff ff       	call   9f0013c0 <getchar+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:40
    }
9f0013c4:	eb d4                	jmp    9f00139a <getchar+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:42
    return 0; //Should not get here
}
9f0013c6:	83 c4 10             	add    esp,0x10
9f0013c9:	5b                   	pop    ebx
9f0013ca:	5d                   	pop    ebp
9f0013cb:	c3                   	ret    

9f0013cc <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
9f0013cc:	55                   	push   ebp
9f0013cd:	89 e5                	mov    ebp,esp
9f0013cf:	53                   	push   ebx
9f0013d0:	83 ec 14             	sub    esp,0x14
9f0013d3:	e8 ae 4d 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0013d8:	05 24 7e 00 00       	add    eax,0x7e24
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:48
    char inchar;
    int len=0;
9f0013dd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    char lbuf[2];
    
    lbuf[0]=lbuf[1]=0;
9f0013e4:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
9f0013e8:	0f b6 55 f2          	movzx  edx,BYTE PTR [ebp-0xe]
9f0013ec:	88 55 f1             	mov    BYTE PTR [ebp-0xf],dl
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52
    if (stream!=1)
9f0013ef:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f0013f3:	74 19                	je     9f00140e <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54
    {
        printI("Stream %u not implemented\n",stream);
9f0013f5:	83 ec 08             	sub    esp,0x8
9f0013f8:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0013fb:	8d 90 3f f6 ff ff    	lea    edx,[eax-0x9c1]
9f001401:	52                   	push   edx
9f001402:	89 c3                	mov    ebx,eax
9f001404:	e8 a8 03 00 00       	call   9f0017b1 <printI>
9f001409:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:55 (discriminator 1)
        getsError: goto getsError;
9f00140c:	eb fe                	jmp    9f00140c <gets+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:60
    }
    
    while (1==1)
    {
        READCHAR(inchar)
9f00140e:	b8 04 00 00 00       	mov    eax,0x4
9f001413:	ba 00 00 00 00       	mov    edx,0x0
9f001418:	89 d3                	mov    ebx,edx
9f00141a:	e8 fc ff ff ff       	call   9f00141b <gets+0x4f>
9f00141f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61
        if (inchar=='\b' && len>0)
9f001422:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
9f001426:	75 17                	jne    9f00143f <gets+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61 (discriminator 1)
9f001428:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f00142c:	7e 11                	jle    9f00143f <gets+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
        {
            buffer[len]=0;
9f00142e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001434:	01 d0                	add    eax,edx
9f001436:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:64
            len--;
9f001439:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
9f00143d:	eb 43                	jmp    9f001482 <gets+0xb6>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:66
        }
        else if (inchar!=0)
9f00143f:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
9f001443:	74 33                	je     9f001478 <gets+0xac>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:68
        {
            lbuf[0]=inchar;
9f001445:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f001449:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:70
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
9f00144c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00144f:	8d 50 01             	lea    edx,[eax+0x1]
9f001452:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f001455:	89 c2                	mov    edx,eax
9f001457:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00145a:	01 c2                	add    edx,eax
9f00145c:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f001460:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:72
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
9f001462:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001465:	83 c0 01             	add    eax,0x1
9f001468:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f00146b:	7d 06                	jge    9f001473 <gets+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:72 (discriminator 1)
9f00146d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
9f001471:	75 9b                	jne    9f00140e <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:74
            
                return len;
9f001473:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001476:	eb 0c                	jmp    9f001484 <gets+0xb8>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:77
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f001478:	b8 02 03 00 00       	mov    eax,0x302
9f00147d:	e8 fc ff ff ff       	call   9f00147e <gets+0xb2>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:82 (discriminator 2)
        //added these for 1000 hertz clock, not needed for 100 hertz
/*            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt*/

    }
9f001482:	eb 8a                	jmp    9f00140e <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:83
}
9f001484:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001487:	c9                   	leave  
9f001488:	c3                   	ret    
9f001489:	66 90                	xchg   ax,ax
9f00148b:	90                   	nop

9f00148c <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
bool libcInitialized = false;
char *printBuffer;


int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)
{
9f00148c:	55                   	push   ebp
9f00148d:	89 e5                	mov    ebp,esp
9f00148f:	56                   	push   esi
9f001490:	53                   	push   ebx
9f001491:	83 ec 10             	sub    esp,0x10
9f001494:	e8 ed 4c 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f001499:	05 63 7d 00 00       	add    eax,0x7d63
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    int retVal=0;
9f00149e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
    SYSCALL4(callnum, param1, param2, param3, param4, retVal);
9f0014a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0014a8:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0014ab:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0014ae:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f0014b1:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
9f0014b4:	e8 fc ff ff ff       	call   9f0014b5 <do_syscall4+0x29>
9f0014b9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:21
    return retVal;
9f0014bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:22
}
9f0014bf:	83 c4 10             	add    esp,0x10
9f0014c2:	5b                   	pop    ebx
9f0014c3:	5e                   	pop    esi
9f0014c4:	5d                   	pop    ebp
9f0014c5:	c3                   	ret    

9f0014c6 <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25

int do_syscall3(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
9f0014c6:	55                   	push   ebp
9f0014c7:	89 e5                	mov    ebp,esp
9f0014c9:	56                   	push   esi
9f0014ca:	53                   	push   ebx
9f0014cb:	83 ec 10             	sub    esp,0x10
9f0014ce:	e8 b3 4c 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0014d3:	05 29 7d 00 00       	add    eax,0x7d29
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    int retVal=0;
9f0014d8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
    SYSCALL3(callnum, param1, param2, param3, retVal);
9f0014df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0014e2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0014e5:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0014e8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f0014eb:	be 00 00 00 00       	mov    esi,0x0
9f0014f0:	e8 fc ff ff ff       	call   9f0014f1 <do_syscall3+0x2b>
9f0014f5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:28
    return retVal;
9f0014f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:29
}
9f0014fb:	83 c4 10             	add    esp,0x10
9f0014fe:	5b                   	pop    ebx
9f0014ff:	5e                   	pop    esi
9f001500:	5d                   	pop    ebp
9f001501:	c3                   	ret    

9f001502 <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32

int do_syscall2(int callnum, uint32_t param1, uint32_t param2)
{
9f001502:	55                   	push   ebp
9f001503:	89 e5                	mov    ebp,esp
9f001505:	56                   	push   esi
9f001506:	53                   	push   ebx
9f001507:	83 ec 10             	sub    esp,0x10
9f00150a:	e8 77 4c 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f00150f:	05 ed 7c 00 00       	add    eax,0x7ced
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    int retVal=0;
9f001514:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
    SYSCALL2(callnum, param1, param2, retVal);
9f00151b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00151e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f001521:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f001524:	ba 00 00 00 00       	mov    edx,0x0
9f001529:	be 00 00 00 00       	mov    esi,0x0
9f00152e:	e8 fc ff ff ff       	call   9f00152f <do_syscall2+0x2d>
9f001533:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:35
    return retVal;
9f001536:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:36
}
9f001539:	83 c4 10             	add    esp,0x10
9f00153c:	5b                   	pop    ebx
9f00153d:	5e                   	pop    esi
9f00153e:	5d                   	pop    ebp
9f00153f:	c3                   	ret    

9f001540 <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39

int do_syscall1(int callnum, uint32_t param1)
{
9f001540:	55                   	push   ebp
9f001541:	89 e5                	mov    ebp,esp
9f001543:	56                   	push   esi
9f001544:	53                   	push   ebx
9f001545:	83 ec 10             	sub    esp,0x10
9f001548:	e8 39 4c 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f00154d:	05 af 7c 00 00       	add    eax,0x7caf
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    int retVal=0;
9f001552:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
    SYSCALL1(callnum, param1, retVal);
9f001559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00155c:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f00155f:	b9 00 00 00 00       	mov    ecx,0x0
9f001564:	ba 00 00 00 00       	mov    edx,0x0
9f001569:	be 00 00 00 00       	mov    esi,0x0
9f00156e:	e8 fc ff ff ff       	call   9f00156f <do_syscall1+0x2f>
9f001573:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:42
    return retVal;
9f001576:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:43
}
9f001579:	83 c4 10             	add    esp,0x10
9f00157c:	5b                   	pop    ebx
9f00157d:	5e                   	pop    esi
9f00157e:	5d                   	pop    ebp
9f00157f:	c3                   	ret    

9f001580 <do_syscall0>:
do_syscall0():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46

int do_syscall0(int callnum)
{
9f001580:	55                   	push   ebp
9f001581:	89 e5                	mov    ebp,esp
9f001583:	56                   	push   esi
9f001584:	53                   	push   ebx
9f001585:	83 ec 10             	sub    esp,0x10
9f001588:	e8 f9 4b 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f00158d:	05 6f 7c 00 00       	add    eax,0x7c6f
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:47
    int retVal=0;
9f001592:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
    SYSCALL0(callnum, retVal);
9f001599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00159c:	bb 00 00 00 00       	mov    ebx,0x0
9f0015a1:	b9 00 00 00 00       	mov    ecx,0x0
9f0015a6:	ba 00 00 00 00       	mov    edx,0x0
9f0015ab:	be 00 00 00 00       	mov    esi,0x0
9f0015b0:	e8 fc ff ff ff       	call   9f0015b1 <do_syscall0+0x31>
9f0015b5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:49
    return retVal;
9f0015b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:50
}
9f0015bb:	83 c4 10             	add    esp,0x10
9f0015be:	5b                   	pop    ebx
9f0015bf:	5e                   	pop    esi
9f0015c0:	5d                   	pop    ebp
9f0015c1:	c3                   	ret    

9f0015c2 <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53

VISIBLE void __attribute__((constructor)) libc_init()
{
9f0015c2:	55                   	push   ebp
9f0015c3:	89 e5                	mov    ebp,esp
9f0015c5:	53                   	push   ebx
9f0015c6:	83 ec 04             	sub    esp,0x4
9f0015c9:	e8 02 4c 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f0015ce:	81 c3 2e 7c 00 00    	add    ebx,0x7c2e
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:54
    printdI(DEBUG_LIBC,"***libc_init called\n***");
9f0015d4:	83 ec 08             	sub    esp,0x8
9f0015d7:	8d 83 5c f6 ff ff    	lea    eax,[ebx-0x9a4]
9f0015dd:	50                   	push   eax
9f0015de:	68 00 00 00 02       	push   0x2000000
9f0015e3:	e8 34 02 00 00       	call   9f00181c <printdI>
9f0015e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:55
    if (!libcInitialized)
9f0015eb:	0f b6 83 68 00 00 00 	movzx  eax,BYTE PTR [ebx+0x68]
9f0015f2:	83 f0 01             	xor    eax,0x1
9f0015f5:	84 c0                	test   al,al
9f0015f7:	74 7c                	je     9f001675 <libc_init+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:57
    {
        initmalloc();
9f0015f9:	e8 8e 0c 00 00       	call   9f00228c <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:58
        filesToCloseCount=0;
9f0015fe:	8b 83 d0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x30]
9f001604:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
//        printfI("libc_init: filesToCloseCount=%u\n",filesToCloseCount);
        //processEnvp = envp;
        __asm__("mov %0,[ebp+52]\n":"=a" (processEnvp));
9f00160a:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
9f00160d:	89 c2                	mov    edx,eax
9f00160f:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f001615:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:62
        do_syscall0(SYSCALL_INVALID);
9f001617:	83 ec 0c             	sub    esp,0xc
9f00161a:	6a 00                	push   0x0
9f00161c:	e8 5f ff ff ff       	call   9f001580 <do_syscall0>
9f001621:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:63
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
9f001624:	8d 83 91 84 ff ff    	lea    eax,[ebx-0x7b6f]
9f00162a:	83 ec 08             	sub    esp,0x8
9f00162d:	50                   	push   eax
9f00162e:	68 63 01 00 00       	push   0x163
9f001633:	e8 08 ff ff ff       	call   9f001540 <do_syscall1>
9f001638:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:64
        libcInitialized = true;
9f00163b:	c6 83 68 00 00 00 01 	mov    BYTE PTR [ebx+0x68],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:65
        printBuffer = mallocI(0x1000);
9f001642:	83 ec 0c             	sub    esp,0xc
9f001645:	68 00 10 00 00       	push   0x1000
9f00164a:	e8 a6 0e 00 00       	call   9f0024f5 <mallocI>
9f00164f:	83 c4 10             	add    esp,0x10
9f001652:	89 c2                	mov    edx,eax
9f001654:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f00165a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:66
        printdI(DEBUG_LIBC,"***libc_init completed\n");
9f00165c:	83 ec 08             	sub    esp,0x8
9f00165f:	8d 83 74 f6 ff ff    	lea    eax,[ebx-0x98c]
9f001665:	50                   	push   eax
9f001666:	68 00 00 00 02       	push   0x2000000
9f00166b:	e8 ac 01 00 00       	call   9f00181c <printdI>
9f001670:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
    }
    else
        printI("libc_init called previously, exiting\n");
}
9f001673:	eb 12                	jmp    9f001687 <libc_init+0xc5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:69
        libcInitialized = true;
        printBuffer = mallocI(0x1000);
        printdI(DEBUG_LIBC,"***libc_init completed\n");
    }
    else
        printI("libc_init called previously, exiting\n");
9f001675:	83 ec 0c             	sub    esp,0xc
9f001678:	8d 83 8c f6 ff ff    	lea    eax,[ebx-0x974]
9f00167e:	50                   	push   eax
9f00167f:	e8 2d 01 00 00       	call   9f0017b1 <printI>
9f001684:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
}
9f001687:	90                   	nop
9f001688:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00168b:	c9                   	leave  
9f00168c:	c3                   	ret    

9f00168d <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:73

void __attribute__((destructor)) libc_cleanup(void)
{
9f00168d:	55                   	push   ebp
9f00168e:	89 e5                	mov    ebp,esp
9f001690:	53                   	push   ebx
9f001691:	83 ec 04             	sub    esp,0x4
9f001694:	e8 37 4b 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f001699:	81 c3 63 7b 00 00    	add    ebx,0x7b63
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:74
    malloc_cleanup();
9f00169f:	e8 78 12 00 00       	call   9f00291c <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:75
    file_cleanup();
9f0016a4:	e8 65 f4 ff ff       	call   9f000b0e <file_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:76
}
9f0016a9:	90                   	nop
9f0016aa:	83 c4 04             	add    esp,0x4
9f0016ad:	5b                   	pop    ebx
9f0016ae:	5d                   	pop    ebp
9f0016af:	c3                   	ret    

9f0016b0 <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:79

VISIBLE int print(const char *format, ...)
{
9f0016b0:	55                   	push   ebp
9f0016b1:	89 e5                	mov    ebp,esp
9f0016b3:	53                   	push   ebx
9f0016b4:	83 ec 14             	sub    esp,0x14
9f0016b7:	e8 14 4b 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f0016bc:	81 c3 40 7b 00 00    	add    ebx,0x7b40
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:81
    va_list args;
    va_start( args, format );
9f0016c2:	8d 45 0c             	lea    eax,[ebp+0xc]
9f0016c5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:83
    
    int size = vsprintf(printBuffer, format, args);
9f0016c8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0016cb:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f0016d1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0016d3:	83 ec 04             	sub    esp,0x4
9f0016d6:	52                   	push   edx
9f0016d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0016da:	50                   	push   eax
9f0016db:	e8 d2 2b 00 00       	call   9f0042b2 <vsprintf>
9f0016e0:	83 c4 10             	add    esp,0x10
9f0016e3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:84
    do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f0016e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0016e9:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f0016ef:	8b 12                	mov    edx,DWORD PTR [edx]
9f0016f1:	50                   	push   eax
9f0016f2:	52                   	push   edx
9f0016f3:	6a 01                	push   0x1
9f0016f5:	6a 05                	push   0x5
9f0016f7:	e8 ca fd ff ff       	call   9f0014c6 <do_syscall3>
9f0016fc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:85
    return 0;
9f0016ff:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:86
}
9f001704:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001707:	c9                   	leave  
9f001708:	c3                   	ret    

9f001709 <printf>:
printf():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:89

VISIBLE int printf(const char *format, ...)
{
9f001709:	55                   	push   ebp
9f00170a:	89 e5                	mov    ebp,esp
9f00170c:	53                   	push   ebx
9f00170d:	83 ec 14             	sub    esp,0x14
9f001710:	e8 bb 4a 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f001715:	81 c3 e7 7a 00 00    	add    ebx,0x7ae7
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:91
    va_list args;
    va_start( args, format );
9f00171b:	8d 45 0c             	lea    eax,[ebp+0xc]
9f00171e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:93
    
    int size = vsprintf(printBuffer, format, args);
9f001721:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001724:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f00172a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00172c:	83 ec 04             	sub    esp,0x4
9f00172f:	52                   	push   edx
9f001730:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001733:	50                   	push   eax
9f001734:	e8 79 2b 00 00       	call   9f0042b2 <vsprintf>
9f001739:	83 c4 10             	add    esp,0x10
9f00173c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:94
    return do_syscall3(SYSCALL_WRITE, STDOUT_FILE, (uint32_t)printBuffer, size);
9f00173f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001742:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f001748:	8b 12                	mov    edx,DWORD PTR [edx]
9f00174a:	50                   	push   eax
9f00174b:	52                   	push   edx
9f00174c:	6a 01                	push   0x1
9f00174e:	6a 05                	push   0x5
9f001750:	e8 71 fd ff ff       	call   9f0014c6 <do_syscall3>
9f001755:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:95
}
9f001758:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00175b:	c9                   	leave  
9f00175c:	c3                   	ret    

9f00175d <printfI>:
printfI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:98

int printfI(const char *format, ...)
{
9f00175d:	55                   	push   ebp
9f00175e:	89 e5                	mov    ebp,esp
9f001760:	53                   	push   ebx
9f001761:	83 ec 14             	sub    esp,0x14
9f001764:	e8 67 4a 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f001769:	81 c3 93 7a 00 00    	add    ebx,0x7a93
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:100
    va_list args;
    va_start( args, format );
9f00176f:	8d 45 0c             	lea    eax,[ebp+0xc]
9f001772:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:102
    
    int size = vsprintf(printBuffer, format, args);
9f001775:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001778:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f00177e:	8b 00                	mov    eax,DWORD PTR [eax]
9f001780:	83 ec 04             	sub    esp,0x4
9f001783:	52                   	push   edx
9f001784:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001787:	50                   	push   eax
9f001788:	e8 25 2b 00 00       	call   9f0042b2 <vsprintf>
9f00178d:	83 c4 10             	add    esp,0x10
9f001790:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:103
    return do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f001793:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001796:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f00179c:	8b 12                	mov    edx,DWORD PTR [edx]
9f00179e:	50                   	push   eax
9f00179f:	52                   	push   edx
9f0017a0:	6a 01                	push   0x1
9f0017a2:	6a 05                	push   0x5
9f0017a4:	e8 1d fd ff ff       	call   9f0014c6 <do_syscall3>
9f0017a9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:104
}
9f0017ac:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0017af:	c9                   	leave  
9f0017b0:	c3                   	ret    

9f0017b1 <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:107

int printI(const char *format, ...)
{
9f0017b1:	55                   	push   ebp
9f0017b2:	89 e5                	mov    ebp,esp
9f0017b4:	83 ec 10             	sub    esp,0x10
9f0017b7:	e8 ca 49 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0017bc:	05 40 7a 00 00       	add    eax,0x7a40
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:109
    va_list args;
    va_start( args, format );
9f0017c1:	8d 45 0c             	lea    eax,[ebp+0xc]
9f0017c4:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:110
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
9f0017c7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0017ca:	89 c2                	mov    edx,eax
9f0017cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0017cf:	52                   	push   edx
9f0017d0:	50                   	push   eax
9f0017d1:	68 00 03 00 00       	push   0x300
9f0017d6:	e8 27 fd ff ff       	call   9f001502 <do_syscall2>
9f0017db:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:111
    return 0;
9f0017de:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:112
}
9f0017e3:	c9                   	leave  
9f0017e4:	c3                   	ret    

9f0017e5 <printd>:
printd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:115

VISIBLE int printd(uint32_t DebugLevel, const char *format, ...)
{
9f0017e5:	55                   	push   ebp
9f0017e6:	89 e5                	mov    ebp,esp
9f0017e8:	83 ec 10             	sub    esp,0x10
9f0017eb:	e8 96 49 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0017f0:	05 0c 7a 00 00       	add    eax,0x7a0c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:117
    va_list args;
    va_start( args, format );
9f0017f5:	8d 45 10             	lea    eax,[ebp+0x10]
9f0017f8:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:119
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f0017fb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0017fe:	89 c2                	mov    edx,eax
9f001800:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001803:	52                   	push   edx
9f001804:	50                   	push   eax
9f001805:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001808:	68 01 03 00 00       	push   0x301
9f00180d:	e8 b4 fc ff ff       	call   9f0014c6 <do_syscall3>
9f001812:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:120
    return 0;
9f001815:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:122
    va_end(args);
}
9f00181a:	c9                   	leave  
9f00181b:	c3                   	ret    

9f00181c <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:125

int printdI(uint32_t DebugLevel, const char *format, ...)
{
9f00181c:	55                   	push   ebp
9f00181d:	89 e5                	mov    ebp,esp
9f00181f:	83 ec 10             	sub    esp,0x10
9f001822:	e8 5f 49 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f001827:	05 d5 79 00 00       	add    eax,0x79d5
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:127
    va_list args;
    va_start( args, format );
9f00182c:	8d 45 10             	lea    eax,[ebp+0x10]
9f00182f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:129
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f001832:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001835:	89 c2                	mov    edx,eax
9f001837:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00183a:	52                   	push   edx
9f00183b:	50                   	push   eax
9f00183c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00183f:	68 01 03 00 00       	push   0x301
9f001844:	e8 7d fc ff ff       	call   9f0014c6 <do_syscall3>
9f001849:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:130
    return 0;
9f00184c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:132
    va_end(args);
}
9f001851:	c9                   	leave  
9f001852:	c3                   	ret    

9f001853 <sleepMS>:
sleepMS():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:135

VISIBLE unsigned int sleepMS (unsigned int __ms)
{
9f001853:	55                   	push   ebp
9f001854:	89 e5                	mov    ebp,esp
9f001856:	56                   	push   esi
9f001857:	53                   	push   ebx
9f001858:	83 ec 10             	sub    esp,0x10
9f00185b:	e8 26 49 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f001860:	05 9c 79 00 00       	add    eax,0x799c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:136
    int ms=__ms*MS_PER_TICK;
9f001865:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001868:	69 c0 e8 03 00 00    	imul   eax,eax,0x3e8
9f00186e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f001873:	f7 e2                	mul    edx
9f001875:	89 d0                	mov    eax,edx
9f001877:	c1 e8 05             	shr    eax,0x5
9f00187a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:137
    return SLEEP_TICKS(ms);
9f00187d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001880:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001883:	b8 70 01 00 00       	mov    eax,0x170
9f001888:	bb 00 00 00 00       	mov    ebx,0x0
9f00188d:	b9 00 00 00 00       	mov    ecx,0x0
9f001892:	ba 00 00 00 00       	mov    edx,0x0
9f001897:	be 00 00 00 00       	mov    esi,0x0
9f00189c:	e8 fc ff ff ff       	call   9f00189d <sleepMS+0x4a>
9f0018a1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f0018a4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0018a7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0018aa:	01 d0                	add    eax,edx
9f0018ac:	83 e8 01             	sub    eax,0x1
9f0018af:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0018b2:	b8 66 01 00 00       	mov    eax,0x166
9f0018b7:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
9f0018ba:	b9 00 00 00 00       	mov    ecx,0x0
9f0018bf:	ba 00 00 00 00       	mov    edx,0x0
9f0018c4:	be 00 00 00 00       	mov    esi,0x0
9f0018c9:	e8 fc ff ff ff       	call   9f0018ca <sleepMS+0x77>
9f0018ce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0018d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:138
}
9f0018d4:	83 c4 10             	add    esp,0x10
9f0018d7:	5b                   	pop    ebx
9f0018d8:	5e                   	pop    esi
9f0018d9:	5d                   	pop    ebp
9f0018da:	c3                   	ret    

9f0018db <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:141

VISIBLE unsigned int sleep (unsigned int __seconds)
{
9f0018db:	55                   	push   ebp
9f0018dc:	89 e5                	mov    ebp,esp
9f0018de:	56                   	push   esi
9f0018df:	53                   	push   ebx
9f0018e0:	83 ec 10             	sub    esp,0x10
9f0018e3:	e8 9e 48 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0018e8:	05 14 79 00 00       	add    eax,0x7914
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:142
    return SLEEP_SECONDS(__seconds);
9f0018ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0018f0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0018f3:	b8 70 01 00 00       	mov    eax,0x170
9f0018f8:	bb 00 00 00 00       	mov    ebx,0x0
9f0018fd:	b9 00 00 00 00       	mov    ecx,0x0
9f001902:	ba 00 00 00 00       	mov    edx,0x0
9f001907:	be 00 00 00 00       	mov    esi,0x0
9f00190c:	e8 fc ff ff ff       	call   9f00190d <sleep+0x32>
9f001911:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001917:	6b d0 64             	imul   edx,eax,0x64
9f00191a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00191d:	01 d0                	add    eax,edx
9f00191f:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f001922:	b8 66 01 00 00       	mov    eax,0x166
9f001927:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f00192a:	b9 00 00 00 00       	mov    ecx,0x0
9f00192f:	ba 00 00 00 00       	mov    edx,0x0
9f001934:	be 00 00 00 00       	mov    esi,0x0
9f001939:	e8 fc ff ff ff       	call   9f00193a <sleep+0x5f>
9f00193e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001941:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:143
}
9f001944:	83 c4 10             	add    esp,0x10
9f001947:	5b                   	pop    ebx
9f001948:	5e                   	pop    esi
9f001949:	5d                   	pop    ebp
9f00194a:	c3                   	ret    

9f00194b <sleepTicks>:
sleepTicks():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:146

VISIBLE unsigned int sleepTicks(unsigned int __ticks)
{
9f00194b:	55                   	push   ebp
9f00194c:	89 e5                	mov    ebp,esp
9f00194e:	56                   	push   esi
9f00194f:	53                   	push   ebx
9f001950:	83 ec 10             	sub    esp,0x10
9f001953:	e8 2e 48 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f001958:	05 a4 78 00 00       	add    eax,0x78a4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:147
    return SLEEP_TICKS(__ticks);
9f00195d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001960:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001963:	b8 70 01 00 00       	mov    eax,0x170
9f001968:	bb 00 00 00 00       	mov    ebx,0x0
9f00196d:	b9 00 00 00 00       	mov    ecx,0x0
9f001972:	ba 00 00 00 00       	mov    edx,0x0
9f001977:	be 00 00 00 00       	mov    esi,0x0
9f00197c:	e8 fc ff ff ff       	call   9f00197d <sleepTicks+0x32>
9f001981:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001984:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001987:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00198a:	01 d0                	add    eax,edx
9f00198c:	83 e8 01             	sub    eax,0x1
9f00198f:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f001992:	b8 66 01 00 00       	mov    eax,0x166
9f001997:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f00199a:	b9 00 00 00 00       	mov    ecx,0x0
9f00199f:	ba 00 00 00 00       	mov    edx,0x0
9f0019a4:	be 00 00 00 00       	mov    esi,0x0
9f0019a9:	e8 fc ff ff ff       	call   9f0019aa <sleepTicks+0x5f>
9f0019ae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0019b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:149
    
}
9f0019b4:	83 c4 10             	add    esp,0x10
9f0019b7:	5b                   	pop    ebx
9f0019b8:	5e                   	pop    esi
9f0019b9:	5d                   	pop    ebp
9f0019ba:	c3                   	ret    

9f0019bb <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:152

void stop()
{
9f0019bb:	55                   	push   ebp
9f0019bc:	89 e5                	mov    ebp,esp
9f0019be:	e8 c3 47 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0019c3:	05 39 78 00 00       	add    eax,0x7839
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:153
    do_syscall0(SYSCALL_STOP);
9f0019c8:	68 68 01 00 00       	push   0x168
9f0019cd:	e8 ae fb ff ff       	call   9f001580 <do_syscall0>
9f0019d2:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:154
}
9f0019d5:	90                   	nop
9f0019d6:	c9                   	leave  
9f0019d7:	c3                   	ret    

9f0019d8 <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:157

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
9f0019d8:	55                   	push   ebp
9f0019d9:	89 e5                	mov    ebp,esp
9f0019db:	e8 a6 47 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0019e0:	05 1c 78 00 00       	add    eax,0x781c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:158
    do_syscall3(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
9f0019e5:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0019e8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0019eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0019ee:	51                   	push   ecx
9f0019ef:	52                   	push   edx
9f0019f0:	50                   	push   eax
9f0019f1:	68 67 01 00 00       	push   0x167
9f0019f6:	e8 cb fa ff ff       	call   9f0014c6 <do_syscall3>
9f0019fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:159
}
9f0019fe:	90                   	nop
9f0019ff:	c9                   	leave  
9f001a00:	c3                   	ret    

9f001a01 <signalTask>:
signalTask():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:162

VISIBLE void signalTask(int signal, int taskNum)
{
9f001a01:	55                   	push   ebp
9f001a02:	89 e5                	mov    ebp,esp
9f001a04:	e8 7d 47 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f001a09:	05 f3 77 00 00       	add    eax,0x77f3
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:163
    do_syscall2(SYSCALL_SIGNAL, signal, taskNum);
9f001a0e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001a11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001a14:	52                   	push   edx
9f001a15:	50                   	push   eax
9f001a16:	68 07 03 00 00       	push   0x307
9f001a1b:	e8 e2 fa ff ff       	call   9f001502 <do_syscall2>
9f001a20:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:164
}
9f001a23:	90                   	nop
9f001a24:	c9                   	leave  
9f001a25:	c3                   	ret    

9f001a26 <fork>:
fork():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:167

VISIBLE int fork()
{
9f001a26:	55                   	push   ebp
9f001a27:	89 e5                	mov    ebp,esp
9f001a29:	83 ec 10             	sub    esp,0x10
9f001a2c:	e8 55 47 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f001a31:	05 cb 77 00 00       	add    eax,0x77cb
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:168
    uint32_t retVal = 0;
9f001a36:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:170
    //return do_syscall0(SYSCALL_FORK);
    return do_syscall0(SYSCALL_FORK);
9f001a3d:	6a 0e                	push   0xe
9f001a3f:	e8 3c fb ff ff       	call   9f001580 <do_syscall0>
9f001a44:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:173
    //asm("call sysEnter_Vector\n":"=a" (retVal): "a" (SYSCALL_FORK));
    return retVal;
}
9f001a47:	c9                   	leave  
9f001a48:	c3                   	ret    

9f001a49 <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:176

VISIBLE int exec(char* path, int argc, char** argv)
{
9f001a49:	55                   	push   ebp
9f001a4a:	89 e5                	mov    ebp,esp
9f001a4c:	83 ec 10             	sub    esp,0x10
9f001a4f:	e8 32 47 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f001a54:	05 a8 77 00 00       	add    eax,0x77a8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:177
    int pid=0;
9f001a59:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:178
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
9f001a60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001a63:	8d 80 b2 f6 ff ff    	lea    eax,[eax-0x94e]
9f001a69:	50                   	push   eax
9f001a6a:	68 00 00 00 02       	push   0x2000000
9f001a6f:	e8 a8 fd ff ff       	call   9f00181c <printdI>
9f001a74:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:179
    pid = do_syscall3(SYSCALL_EXEC, (uintptr_t)path, argc, (uintptr_t)argv);
9f001a77:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f001a7a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001a7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001a80:	51                   	push   ecx
9f001a81:	52                   	push   edx
9f001a82:	50                   	push   eax
9f001a83:	6a 59                	push   0x59
9f001a85:	e8 3c fa ff ff       	call   9f0014c6 <do_syscall3>
9f001a8a:	83 c4 10             	add    esp,0x10
9f001a8d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:180
    return pid;
9f001a90:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:181
}
9f001a93:	c9                   	leave  
9f001a94:	c3                   	ret    

9f001a95 <execb>:
execb():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:184

VISIBLE int execb(char* path)
{
9f001a95:	55                   	push   ebp
9f001a96:	89 e5                	mov    ebp,esp
9f001a98:	53                   	push   ebx
9f001a99:	83 ec 24             	sub    esp,0x24
9f001a9c:	e8 2f 47 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f001aa1:	81 c3 5b 77 00 00    	add    ebx,0x775b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:185
    int pid=0, argc=0;
9f001aa7:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
9f001aae:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:187
    char** argv;
    char* spacePtr=path, *lastSpacePtr=path;
9f001ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001ab8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001abe:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:189
    char* program;
    program=mallocI(512);
9f001ac1:	83 ec 0c             	sub    esp,0xc
9f001ac4:	68 00 02 00 00       	push   0x200
9f001ac9:	e8 27 0a 00 00       	call   9f0024f5 <mallocI>
9f001ace:	83 c4 10             	add    esp,0x10
9f001ad1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:192
    do
    {
        spacePtr=strstrI(spacePtr," ");
9f001ad4:	83 ec 08             	sub    esp,0x8
9f001ad7:	8d 83 c5 f6 ff ff    	lea    eax,[ebx-0x93b]
9f001add:	50                   	push   eax
9f001ade:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001ae1:	e8 04 39 00 00       	call   9f0053ea <strstrI>
9f001ae6:	83 c4 10             	add    esp,0x10
9f001ae9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:193
        if (argc==0)
9f001aec:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001af0:	75 44                	jne    9f001b36 <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:195
        {
            if (spacePtr==0)
9f001af2:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f001af6:	75 22                	jne    9f001b1a <execb+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:196
                strncpyI(program, path, strlenI(path));
9f001af8:	83 ec 0c             	sub    esp,0xc
9f001afb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001afe:	e8 11 31 00 00       	call   9f004c14 <strlenI>
9f001b03:	83 c4 10             	add    esp,0x10
9f001b06:	83 ec 04             	sub    esp,0x4
9f001b09:	50                   	push   eax
9f001b0a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001b0d:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001b10:	e8 73 32 00 00       	call   9f004d88 <strncpyI>
9f001b15:	83 c4 10             	add    esp,0x10
9f001b18:	eb 1c                	jmp    9f001b36 <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:198
            else
                strncpyI(program, path, spacePtr-path);
9f001b1a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b20:	29 c2                	sub    edx,eax
9f001b22:	89 d0                	mov    eax,edx
9f001b24:	83 ec 04             	sub    esp,0x4
9f001b27:	50                   	push   eax
9f001b28:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001b2b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001b2e:	e8 55 32 00 00       	call   9f004d88 <strncpyI>
9f001b33:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:200
        }
        argc++;
9f001b36:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:202
            
    } while (spacePtr++);
9f001b3a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001b3d:	8d 50 01             	lea    edx,[eax+0x1]
9f001b40:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001b43:	85 c0                	test   eax,eax
9f001b45:	75 8d                	jne    9f001ad4 <execb+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:204
    
    argv=mallocI((argc*50)+(argc*4));
9f001b47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001b4a:	6b c0 36             	imul   eax,eax,0x36
9f001b4d:	83 ec 0c             	sub    esp,0xc
9f001b50:	50                   	push   eax
9f001b51:	e8 9f 09 00 00       	call   9f0024f5 <mallocI>
9f001b56:	83 c4 10             	add    esp,0x10
9f001b59:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:205
    int argvPtr=4*argc;
9f001b5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001b5f:	c1 e0 02             	shl    eax,0x2
9f001b62:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:206
    spacePtr=path;
9f001b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b68:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:207
    for (int cnt=0;cnt<argc; cnt++)
9f001b6b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
9f001b72:	e9 c8 00 00 00       	jmp    9f001c3f <execb+0x1aa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:209
    {
        argv[cnt]=(char*)argv+argvPtr;
9f001b77:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001b7a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001b81:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001b84:	01 d0                	add    eax,edx
9f001b86:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
9f001b89:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
9f001b8c:	01 ca                	add    edx,ecx
9f001b8e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:210
        spacePtr=strstrI(spacePtr," ");
9f001b90:	83 ec 08             	sub    esp,0x8
9f001b93:	8d 83 c5 f6 ff ff    	lea    eax,[ebx-0x93b]
9f001b99:	50                   	push   eax
9f001b9a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001b9d:	e8 48 38 00 00       	call   9f0053ea <strstrI>
9f001ba2:	83 c4 10             	add    esp,0x10
9f001ba5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:211
        if (spacePtr)
9f001ba8:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f001bac:	74 2f                	je     9f001bdd <execb+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:212
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f001bae:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001bb1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001bb4:	29 c2                	sub    edx,eax
9f001bb6:	89 d0                	mov    eax,edx
9f001bb8:	89 c1                	mov    ecx,eax
9f001bba:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001bbd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001bc4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001bc7:	01 d0                	add    eax,edx
9f001bc9:	8b 00                	mov    eax,DWORD PTR [eax]
9f001bcb:	83 ec 04             	sub    esp,0x4
9f001bce:	51                   	push   ecx
9f001bcf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001bd2:	50                   	push   eax
9f001bd3:	e8 b0 31 00 00       	call   9f004d88 <strncpyI>
9f001bd8:	83 c4 10             	add    esp,0x10
9f001bdb:	eb 31                	jmp    9f001c0e <execb+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:214
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f001bdd:	83 ec 0c             	sub    esp,0xc
9f001be0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001be3:	e8 2c 30 00 00       	call   9f004c14 <strlenI>
9f001be8:	83 c4 10             	add    esp,0x10
9f001beb:	89 c2                	mov    edx,eax
9f001bed:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001bf0:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f001bf7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001bfa:	01 c8                	add    eax,ecx
9f001bfc:	8b 00                	mov    eax,DWORD PTR [eax]
9f001bfe:	83 ec 04             	sub    esp,0x4
9f001c01:	52                   	push   edx
9f001c02:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001c05:	50                   	push   eax
9f001c06:	e8 7d 31 00 00       	call   9f004d88 <strncpyI>
9f001c0b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:215 (discriminator 2)
        strtrimI(argv[cnt]);
9f001c0e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001c11:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001c18:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001c1b:	01 d0                	add    eax,edx
9f001c1d:	8b 00                	mov    eax,DWORD PTR [eax]
9f001c1f:	83 ec 0c             	sub    esp,0xc
9f001c22:	50                   	push   eax
9f001c23:	e8 28 35 00 00       	call   9f005150 <strtrimI>
9f001c28:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:216 (discriminator 2)
        lastSpacePtr=spacePtr++;
9f001c2b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001c2e:	8d 50 01             	lea    edx,[eax+0x1]
9f001c31:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001c34:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:217 (discriminator 2)
        argvPtr+=50;
9f001c37:	83 45 e8 32          	add    DWORD PTR [ebp-0x18],0x32
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:207 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((argc*50)+(argc*4));
    int argvPtr=4*argc;
    spacePtr=path;
    for (int cnt=0;cnt<argc; cnt++)
9f001c3b:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:207 (discriminator 1)
9f001c3f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001c42:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001c45:	0f 8c 2c ff ff ff    	jl     9f001b77 <execb+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:219
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
        strtrimI(argv[cnt]);
        lastSpacePtr=spacePtr++;
        argvPtr+=50;
    }
    printdI(DEBUG_LIBC,"libc: execb for %s\n",path);;
9f001c4b:	83 ec 04             	sub    esp,0x4
9f001c4e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001c51:	8d 83 c7 f6 ff ff    	lea    eax,[ebx-0x939]
9f001c57:	50                   	push   eax
9f001c58:	68 00 00 00 02       	push   0x2000000
9f001c5d:	e8 ba fb ff ff       	call   9f00181c <printdI>
9f001c62:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:220
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)program, argc, (uintptr_t)argv);
9f001c65:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
9f001c68:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001c6b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001c6e:	51                   	push   ecx
9f001c6f:	52                   	push   edx
9f001c70:	50                   	push   eax
9f001c71:	68 05 03 00 00       	push   0x305
9f001c76:	e8 4b f8 ff ff       	call   9f0014c6 <do_syscall3>
9f001c7b:	83 c4 10             	add    esp,0x10
9f001c7e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:224
/*    __asm__("push ds\nint 0x80\npop ds\n"
            :"=a" (pid)
            :"a" (0x59),"b" (program),"c" (argc),"d" (argv));*/
    return pid;
9f001c81:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:227
    freeI(argv);
    freeI(program);
}
9f001c84:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001c87:	c9                   	leave  
9f001c88:	c3                   	ret    

9f001c89 <execa>:
execa():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:230

VISIBLE int execa(char* path, int argc, char** argv)
{
9f001c89:	55                   	push   ebp
9f001c8a:	89 e5                	mov    ebp,esp
9f001c8c:	83 ec 10             	sub    esp,0x10
9f001c8f:	e8 f2 44 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f001c94:	05 68 75 00 00       	add    eax,0x7568
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:231
    int pid=0;
9f001c99:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:232
    printdI(DEBUG_LIBC,"libc: execa for %s\n",path);;
9f001ca0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001ca3:	8d 80 db f6 ff ff    	lea    eax,[eax-0x925]
9f001ca9:	50                   	push   eax
9f001caa:	68 00 00 00 02       	push   0x2000000
9f001caf:	e8 68 fb ff ff       	call   9f00181c <printdI>
9f001cb4:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:233
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)path, argc, (uintptr_t)argv);
9f001cb7:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f001cba:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001cc0:	51                   	push   ecx
9f001cc1:	52                   	push   edx
9f001cc2:	50                   	push   eax
9f001cc3:	68 05 03 00 00       	push   0x305
9f001cc8:	e8 f9 f7 ff ff       	call   9f0014c6 <do_syscall3>
9f001ccd:	83 c4 10             	add    esp,0x10
9f001cd0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:234
    return pid;
9f001cd3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:235
}
9f001cd6:	c9                   	leave  
9f001cd7:	c3                   	ret    

9f001cd8 <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:238

VISIBLE int waitpid(uint32_t pid)
{
9f001cd8:	55                   	push   ebp
9f001cd9:	89 e5                	mov    ebp,esp
9f001cdb:	e8 a6 44 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f001ce0:	05 1c 75 00 00       	add    eax,0x751c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:239
    return do_syscall1(SYSCALL_WAITFORPID,pid);
9f001ce5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001ce8:	6a 61                	push   0x61
9f001cea:	e8 51 f8 ff ff       	call   9f001540 <do_syscall1>
9f001cef:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:240
}
9f001cf2:	c9                   	leave  
9f001cf3:	c3                   	ret    

9f001cf4 <exit>:
exit():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:244


VISIBLE void exit (int status)
{
9f001cf4:	55                   	push   ebp
9f001cf5:	89 e5                	mov    ebp,esp
9f001cf7:	e8 8a 44 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f001cfc:	05 00 75 00 00       	add    eax,0x7500
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:245
    do_syscall2(SYSCALL_ENDPROCESS, 0, status);
9f001d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001d04:	50                   	push   eax
9f001d05:	6a 00                	push   0x0
9f001d07:	6a 01                	push   0x1
9f001d09:	e8 f4 f7 ff ff       	call   9f001502 <do_syscall2>
9f001d0e:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:246
}
9f001d11:	90                   	nop
9f001d12:	c9                   	leave  
9f001d13:	c3                   	ret    

9f001d14 <setcwd>:
setcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:249

VISIBLE char* setcwd(char* buf, size_t size)
{
9f001d14:	55                   	push   ebp
9f001d15:	89 e5                	mov    ebp,esp
9f001d17:	e8 6a 44 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f001d1c:	05 e0 74 00 00       	add    eax,0x74e0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:250
    return (char*)do_syscall2(SYSCALL_SETCWD,(uint32_t)buf,size);
9f001d21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001d24:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001d27:	50                   	push   eax
9f001d28:	6a 50                	push   0x50
9f001d2a:	e8 d3 f7 ff ff       	call   9f001502 <do_syscall2>
9f001d2f:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:251
}
9f001d32:	c9                   	leave  
9f001d33:	c3                   	ret    

9f001d34 <splitI>:
splitI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:254

size_t splitI(char *buffer, char *argv[], size_t argv_size)
{
9f001d34:	55                   	push   ebp
9f001d35:	89 e5                	mov    ebp,esp
9f001d37:	83 ec 20             	sub    esp,0x20
9f001d3a:	e8 47 44 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f001d3f:	05 bd 74 00 00       	add    eax,0x74bd
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:257
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
9f001d44:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:258
    size_t argc = 0;
9f001d4b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:260

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f001d52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001d55:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
9f001d58:	e9 d8 00 00 00       	jmp    9f001e35 <splitI+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:261
        c = (unsigned char) *p;
9f001d5d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001d60:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001d63:	0f b6 c0             	movzx  eax,al
9f001d66:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:262
        switch (state) {
9f001d69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001d6c:	83 f8 01             	cmp    eax,0x1
9f001d6f:	74 7e                	je     9f001def <splitI+0xbb>
9f001d71:	83 f8 01             	cmp    eax,0x1
9f001d74:	72 0a                	jb     9f001d80 <splitI+0x4c>
9f001d76:	83 f8 02             	cmp    eax,0x2
9f001d79:	74 45                	je     9f001dc0 <splitI+0x8c>
9f001d7b:	e9 b1 00 00 00       	jmp    9f001e31 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:264
        case DULL:
            if (ISSPACE(c)) {
9f001d80:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001d84:	0f 94 c0             	sete   al
9f001d87:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
9f001d8a:	0f b6 45 eb          	movzx  eax,BYTE PTR [ebp-0x15]
9f001d8e:	84 c0                	test   al,al
9f001d90:	0f 85 94 00 00 00    	jne    9f001e2a <splitI+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:268
                continue;
            }

            if (c == '"') {
9f001d96:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001d9a:	75 15                	jne    9f001db1 <splitI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:269
                state = IN_STRING;
9f001d9c:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:270
                start_of_word = p + 1; 
9f001da3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001da6:	83 c0 01             	add    eax,0x1
9f001da9:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:271
                continue;
9f001dac:	e9 80 00 00 00       	jmp    9f001e31 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:273
            }
            state = IN_WORD;
9f001db1:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:274
            start_of_word = p;
9f001db8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001dbb:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:275
            continue;
9f001dbe:	eb 71                	jmp    9f001e31 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:278

        case IN_STRING:
            if (c == '"') {
9f001dc0:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001dc4:	75 67                	jne    9f001e2d <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:279
                *p = 0;
9f001dc6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001dc9:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:280
                argv[argc++] = start_of_word;
9f001dcc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001dcf:	8d 50 01             	lea    edx,[eax+0x1]
9f001dd2:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001dd5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001ddc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001ddf:	01 c2                	add    edx,eax
9f001de1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001de4:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:281
                state = DULL;
9f001de6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:283
            }
            continue;
9f001ded:	eb 3e                	jmp    9f001e2d <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:286

        case IN_WORD:
            if (ISSPACE(c)) {
9f001def:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001df3:	0f 94 c0             	sete   al
9f001df6:	88 45 ea             	mov    BYTE PTR [ebp-0x16],al
9f001df9:	0f b6 45 ea          	movzx  eax,BYTE PTR [ebp-0x16]
9f001dfd:	84 c0                	test   al,al
9f001dff:	74 2f                	je     9f001e30 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:287
                *p = 0;
9f001e01:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001e04:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:288
                argv[argc++] = start_of_word;
9f001e07:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001e0a:	8d 50 01             	lea    edx,[eax+0x1]
9f001e0d:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001e10:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001e17:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e1a:	01 c2                	add    edx,eax
9f001e1c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001e1f:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:289
                state = DULL;
9f001e21:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:291
            }
            continue;
9f001e28:	eb 06                	jmp    9f001e30 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:265
    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
        c = (unsigned char) *p;
        switch (state) {
        case DULL:
            if (ISSPACE(c)) {
                continue;
9f001e2a:	90                   	nop
9f001e2b:	eb 04                	jmp    9f001e31 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:283
            if (c == '"') {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f001e2d:	90                   	nop
9f001e2e:	eb 01                	jmp    9f001e31 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:291
            if (ISSPACE(c)) {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f001e30:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:260 (discriminator 2)
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
    size_t argc = 0;

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f001e31:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:260 (discriminator 1)
9f001e35:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001e38:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f001e3b:	73 0e                	jae    9f001e4b <splitI+0x117>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:260 (discriminator 3)
9f001e3d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001e40:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001e43:	84 c0                	test   al,al
9f001e45:	0f 85 12 ff ff ff    	jne    9f001d5d <splitI+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:295
            }
            continue;
        }
    }

    if (state != DULL && argc < argv_size)
9f001e4b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001e4f:	74 22                	je     9f001e73 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:295 (discriminator 1)
9f001e51:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001e54:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f001e57:	73 1a                	jae    9f001e73 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:296
        argv[argc++] = start_of_word;
9f001e59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001e5c:	8d 50 01             	lea    edx,[eax+0x1]
9f001e5f:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001e62:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001e69:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e6c:	01 c2                	add    edx,eax
9f001e6e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001e71:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:298

    return argc;
9f001e73:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:299
}
9f001e76:	c9                   	leave  
9f001e77:	c3                   	ret    

9f001e78 <split>:
split():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:302

VISIBLE size_t split(char *buffer, char *argv[], size_t argv_size)
{
9f001e78:	55                   	push   ebp
9f001e79:	89 e5                	mov    ebp,esp
9f001e7b:	e8 06 43 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f001e80:	05 7c 73 00 00       	add    eax,0x737c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:303
    return splitI(buffer, argv, argv_size);
9f001e85:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001e88:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001e8b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001e8e:	e8 a1 fe ff ff       	call   9f001d34 <splitI>
9f001e93:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:304
}
9f001e96:	c9                   	leave  
9f001e97:	c3                   	ret    

9f001e98 <cmdlineToArgvI>:
cmdlineToArgvI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:307

char** cmdlineToArgvI(const char* cmdline, int *argc)
{
9f001e98:	55                   	push   ebp
9f001e99:	89 e5                	mov    ebp,esp
9f001e9b:	56                   	push   esi
9f001e9c:	53                   	push   ebx
9f001e9d:	81 ec 30 04 00 00    	sub    esp,0x430
9f001ea3:	e8 28 43 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f001ea8:	81 c3 54 73 00 00    	add    ebx,0x7354
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:310
    char** argv;
    char cmd[1024];
    char *spacePtr=cmd, *lastSpacePtr=cmd, *quotePtr=cmd;
9f001eae:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001eb4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001eb7:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001ebd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001ec0:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001ec6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:311
    char dblquote[2] = {'"',0};
9f001ec9:	c6 85 d6 fb ff ff 22 	mov    BYTE PTR [ebp-0x42a],0x22
9f001ed0:	c6 85 d7 fb ff ff 00 	mov    BYTE PTR [ebp-0x429],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:312
    *argc = 0;
9f001ed7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001eda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:314
    
    strncpyI(cmd,cmdline,1024);
9f001ee0:	83 ec 04             	sub    esp,0x4
9f001ee3:	68 00 04 00 00       	push   0x400
9f001ee8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001eeb:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001ef1:	50                   	push   eax
9f001ef2:	e8 91 2e 00 00       	call   9f004d88 <strncpyI>
9f001ef7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:315
    strtrimI(cmd);
9f001efa:	83 ec 0c             	sub    esp,0xc
9f001efd:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001f03:	50                   	push   eax
9f001f04:	e8 47 32 00 00       	call   9f005150 <strtrimI>
9f001f09:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:318
    do
    {
        quotePtr = strnstrI(spacePtr,dblquote,4000);        //Need to honor double quotes
9f001f0c:	83 ec 04             	sub    esp,0x4
9f001f0f:	68 a0 0f 00 00       	push   0xfa0
9f001f14:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001f1a:	50                   	push   eax
9f001f1b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001f1e:	e8 29 34 00 00       	call   9f00534c <strnstrI>
9f001f23:	83 c4 10             	add    esp,0x10
9f001f26:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:319
        spacePtr=strstrI(spacePtr," ");
9f001f29:	83 ec 08             	sub    esp,0x8
9f001f2c:	8d 83 c5 f6 ff ff    	lea    eax,[ebx-0x93b]
9f001f32:	50                   	push   eax
9f001f33:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001f36:	e8 af 34 00 00       	call   9f0053ea <strstrI>
9f001f3b:	83 c4 10             	add    esp,0x10
9f001f3e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:320
        if (quotePtr!=0 && (quotePtr <= spacePtr))                            //If a double quote shows up before a space ...
9f001f41:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f001f45:	74 48                	je     9f001f8f <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:320 (discriminator 1)
9f001f47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001f4a:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001f4d:	77 40                	ja     9f001f8f <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:322
        {
            char *temp = spacePtr;
9f001f4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001f52:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:323
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);  //Look for the closing double quote
9f001f55:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001f58:	8d 50 01             	lea    edx,[eax+0x1]
9f001f5b:	83 ec 04             	sub    esp,0x4
9f001f5e:	68 a0 0f 00 00       	push   0xfa0
9f001f63:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001f69:	50                   	push   eax
9f001f6a:	52                   	push   edx
9f001f6b:	e8 dc 33 00 00       	call   9f00534c <strnstrI>
9f001f70:	83 c4 10             	add    esp,0x10
9f001f73:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:324
            if (spacePtr>=quotePtr+4000)
9f001f76:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001f79:	05 a0 0f 00 00       	add    eax,0xfa0
9f001f7e:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001f81:	77 08                	ja     9f001f8b <cmdlineToArgvI+0xf3>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:325
                spacePtr = temp;                            //Didn't find it so resume normal processing (space bound)
9f001f83:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f001f86:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001f89:	eb 04                	jmp    9f001f8f <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:327
            else
                spacePtr += 1;                              //Skip the closing quote
9f001f8b:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:329
        }
        *argc+=1;
9f001f8f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001f92:	8b 00                	mov    eax,DWORD PTR [eax]
9f001f94:	8d 50 01             	lea    edx,[eax+0x1]
9f001f97:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001f9a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:330
        if (spacePtr!=0 && *spacePtr)
9f001f9c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001fa0:	74 0e                	je     9f001fb0 <cmdlineToArgvI+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:330 (discriminator 1)
9f001fa2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001fa5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001fa8:	84 c0                	test   al,al
9f001faa:	74 04                	je     9f001fb0 <cmdlineToArgvI+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:331
            spacePtr++;
9f001fac:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:333
    
    } while (spacePtr!=0 && *spacePtr);
9f001fb0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001fb4:	74 0e                	je     9f001fc4 <cmdlineToArgvI+0x12c>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:333 (discriminator 1)
9f001fb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001fb9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001fbc:	84 c0                	test   al,al
9f001fbe:	0f 85 48 ff ff ff    	jne    9f001f0c <cmdlineToArgvI+0x74>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:335
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
9f001fc4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001fc7:	8b 10                	mov    edx,DWORD PTR [eax]
9f001fc9:	89 d0                	mov    eax,edx
9f001fcb:	c1 e0 08             	shl    eax,0x8
9f001fce:	29 d0                	sub    eax,edx
9f001fd0:	89 c2                	mov    edx,eax
9f001fd2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001fd5:	8b 00                	mov    eax,DWORD PTR [eax]
9f001fd7:	c1 e0 02             	shl    eax,0x2
9f001fda:	01 d0                	add    eax,edx
9f001fdc:	83 ec 0c             	sub    esp,0xc
9f001fdf:	50                   	push   eax
9f001fe0:	e8 10 05 00 00       	call   9f0024f5 <mallocI>
9f001fe5:	83 c4 10             	add    esp,0x10
9f001fe8:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:336
    int argvPtr=4* *argc;
9f001feb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001fee:	8b 00                	mov    eax,DWORD PTR [eax]
9f001ff0:	c1 e0 02             	shl    eax,0x2
9f001ff3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:337
    spacePtr=cmd;
9f001ff6:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001ffc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:338
    for (int cnt=0;cnt<*argc; cnt++)
9f001fff:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f002006:	e9 72 01 00 00       	jmp    9f00217d <cmdlineToArgvI+0x2e5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:340
    {
        argv[cnt]=(char*)argv+argvPtr;
9f00200b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00200e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f002015:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002018:	01 d0                	add    eax,edx
9f00201a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f00201d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f002020:	01 ca                	add    edx,ecx
9f002022:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:341
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
9f002024:	83 ec 04             	sub    esp,0x4
9f002027:	68 a0 0f 00 00       	push   0xfa0
9f00202c:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f002032:	50                   	push   eax
9f002033:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002036:	e8 11 33 00 00       	call   9f00534c <strnstrI>
9f00203b:	83 c4 10             	add    esp,0x10
9f00203e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:342
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
9f002041:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f002045:	0f 84 80 00 00 00    	je     9f0020cb <cmdlineToArgvI+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:342 (discriminator 1)
9f00204b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00204e:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f002051:	77 78                	ja     9f0020cb <cmdlineToArgvI+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:344
        {
            char *temp = spacePtr;
9f002053:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002056:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:345
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
9f002059:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00205c:	8d 50 01             	lea    edx,[eax+0x1]
9f00205f:	83 ec 04             	sub    esp,0x4
9f002062:	68 a0 0f 00 00       	push   0xfa0
9f002067:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f00206d:	50                   	push   eax
9f00206e:	52                   	push   edx
9f00206f:	e8 d8 32 00 00       	call   9f00534c <strnstrI>
9f002074:	83 c4 10             	add    esp,0x10
9f002077:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:346
            if (spacePtr>=quotePtr+4000)
9f00207a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00207d:	05 a0 0f 00 00       	add    eax,0xfa0
9f002082:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f002085:	77 0b                	ja     9f002092 <cmdlineToArgvI+0x1fa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:347
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
9f002087:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f00208a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:343
    for (int cnt=0;cnt<*argc; cnt++)
    {
        argv[cnt]=(char*)argv+argvPtr;
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
        {
9f00208d:	e9 d4 00 00 00       	jmp    9f002166 <cmdlineToArgvI+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:350
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
            if (spacePtr>=quotePtr+4000)
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
            else
            {
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
9f002092:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002095:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002098:	29 c2                	sub    edx,eax
9f00209a:	89 d0                	mov    eax,edx
9f00209c:	83 e8 02             	sub    eax,0x2
9f00209f:	89 c6                	mov    esi,eax
9f0020a1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0020a4:	8d 50 01             	lea    edx,[eax+0x1]
9f0020a7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0020aa:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f0020b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0020b4:	01 c8                	add    eax,ecx
9f0020b6:	8b 00                	mov    eax,DWORD PTR [eax]
9f0020b8:	83 ec 04             	sub    esp,0x4
9f0020bb:	56                   	push   esi
9f0020bc:	52                   	push   edx
9f0020bd:	50                   	push   eax
9f0020be:	e8 c5 2c 00 00       	call   9f004d88 <strncpyI>
9f0020c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:343
    for (int cnt=0;cnt<*argc; cnt++)
    {
        argv[cnt]=(char*)argv+argvPtr;
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
        {
9f0020c6:	e9 9b 00 00 00       	jmp    9f002166 <cmdlineToArgvI+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:355
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
            }
        }
        else
        {
            spacePtr=strstrI(spacePtr," ");
9f0020cb:	83 ec 08             	sub    esp,0x8
9f0020ce:	8d 83 c5 f6 ff ff    	lea    eax,[ebx-0x93b]
9f0020d4:	50                   	push   eax
9f0020d5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0020d8:	e8 0d 33 00 00       	call   9f0053ea <strstrI>
9f0020dd:	83 c4 10             	add    esp,0x10
9f0020e0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:356
            if (spacePtr)
9f0020e3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f0020e7:	74 2f                	je     9f002118 <cmdlineToArgvI+0x280>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:357
                strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f0020e9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0020ec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0020ef:	29 c2                	sub    edx,eax
9f0020f1:	89 d0                	mov    eax,edx
9f0020f3:	89 c1                	mov    ecx,eax
9f0020f5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0020f8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0020ff:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002102:	01 d0                	add    eax,edx
9f002104:	8b 00                	mov    eax,DWORD PTR [eax]
9f002106:	83 ec 04             	sub    esp,0x4
9f002109:	51                   	push   ecx
9f00210a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00210d:	50                   	push   eax
9f00210e:	e8 75 2c 00 00       	call   9f004d88 <strncpyI>
9f002113:	83 c4 10             	add    esp,0x10
9f002116:	eb 31                	jmp    9f002149 <cmdlineToArgvI+0x2b1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:359
            else
                strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f002118:	83 ec 0c             	sub    esp,0xc
9f00211b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00211e:	e8 f1 2a 00 00       	call   9f004c14 <strlenI>
9f002123:	83 c4 10             	add    esp,0x10
9f002126:	89 c2                	mov    edx,eax
9f002128:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00212b:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f002132:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002135:	01 c8                	add    eax,ecx
9f002137:	8b 00                	mov    eax,DWORD PTR [eax]
9f002139:	83 ec 04             	sub    esp,0x4
9f00213c:	52                   	push   edx
9f00213d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f002140:	50                   	push   eax
9f002141:	e8 42 2c 00 00       	call   9f004d88 <strncpyI>
9f002146:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:360
            strtrimI(argv[cnt]);
9f002149:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00214c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f002153:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002156:	01 d0                	add    eax,edx
9f002158:	8b 00                	mov    eax,DWORD PTR [eax]
9f00215a:	83 ec 0c             	sub    esp,0xc
9f00215d:	50                   	push   eax
9f00215e:	e8 ed 2f 00 00       	call   9f005150 <strtrimI>
9f002163:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:362 (discriminator 2)
        }
        lastSpacePtr=spacePtr++;
9f002166:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002169:	8d 50 01             	lea    edx,[eax+0x1]
9f00216c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00216f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:363 (discriminator 2)
        argvPtr+=MAXPARAMLEN;
9f002172:	81 45 ec ff 00 00 00 	add    DWORD PTR [ebp-0x14],0xff
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:338 (discriminator 2)
    } while (spacePtr!=0 && *spacePtr);
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
    int argvPtr=4* *argc;
    spacePtr=cmd;
    for (int cnt=0;cnt<*argc; cnt++)
9f002179:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:338 (discriminator 1)
9f00217d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002180:	8b 00                	mov    eax,DWORD PTR [eax]
9f002182:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f002185:	0f 8f 80 fe ff ff    	jg     9f00200b <cmdlineToArgvI+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:365
            strtrimI(argv[cnt]);
        }
        lastSpacePtr=spacePtr++;
        argvPtr+=MAXPARAMLEN;
    }
    return argv;
9f00218b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:366
}
9f00218e:	8d 65 f8             	lea    esp,[ebp-0x8]
9f002191:	5b                   	pop    ebx
9f002192:	5e                   	pop    esi
9f002193:	5d                   	pop    ebp
9f002194:	c3                   	ret    

9f002195 <cmdlineToArgv>:
cmdlineToArgv():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:369

VISIBLE char** cmdlineToArgv(char* cmdline, int *argc)
{
9f002195:	55                   	push   ebp
9f002196:	89 e5                	mov    ebp,esp
9f002198:	83 ec 08             	sub    esp,0x8
9f00219b:	e8 e6 3f 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0021a0:	05 5c 70 00 00       	add    eax,0x705c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:370
    return cmdlineToArgvI(cmdline, argc);
9f0021a5:	83 ec 08             	sub    esp,0x8
9f0021a8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0021ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0021ae:	e8 e5 fc ff ff       	call   9f001e98 <cmdlineToArgvI>
9f0021b3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:371
}
9f0021b6:	c9                   	leave  
9f0021b7:	c3                   	ret    

9f0021b8 <setSTD>:
setSTD():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:374

VISIBLE int setSTD(int std, uint32_t filed)
{
9f0021b8:	55                   	push   ebp
9f0021b9:	89 e5                	mov    ebp,esp
9f0021bb:	e8 c6 3f 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0021c0:	05 3c 70 00 00       	add    eax,0x703c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:375
    return do_syscall2(SYSCALL_SETSTD, std, filed);
9f0021c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0021c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0021cb:	50                   	push   eax
9f0021cc:	68 06 03 00 00       	push   0x306
9f0021d1:	e8 2c f3 ff ff       	call   9f001502 <do_syscall2>
9f0021d6:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:376
}
9f0021d9:	c9                   	leave  
9f0021da:	c3                   	ret    

9f0021db <takeADump>:
takeADump():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:379

VISIBLE void takeADump()
{
9f0021db:	55                   	push   ebp
9f0021dc:	89 e5                	mov    ebp,esp
9f0021de:	e8 a3 3f 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0021e3:	05 19 70 00 00       	add    eax,0x7019
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:380
    do_syscall0(SYSCALL_TAKEADUMP);
9f0021e8:	68 00 09 00 00       	push   0x900
9f0021ed:	e8 8e f3 ff ff       	call   9f001580 <do_syscall0>
9f0021f2:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:381
}
9f0021f5:	90                   	nop
9f0021f6:	c9                   	leave  
9f0021f7:	c3                   	ret    

9f0021f8 <setpriority>:
setpriority():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:384

VISIBLE int setpriority(int which, int who, int prio)
{
9f0021f8:	55                   	push   ebp
9f0021f9:	89 e5                	mov    ebp,esp
9f0021fb:	e8 86 3f 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f002200:	05 fc 6f 00 00       	add    eax,0x6ffc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:385
    return do_syscall1(SYSCALL_SETPRIORITY,prio);
9f002205:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002208:	50                   	push   eax
9f002209:	68 97 00 00 00       	push   0x97
9f00220e:	e8 2d f3 ff ff       	call   9f001540 <do_syscall1>
9f002213:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:386
9f002216:	c9                   	leave  
9f002217:	c3                   	ret    

9f002218 <mmap>:
mmap():
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:14
//#include "../../../kproj/chrisOSKernel/include/syscalls.h"

syscall_mmap_t params;

VISIBLE void* mmap (void *addr,size_t len,int prot,int flags,int fd,off_t offset)
{
9f002218:	55                   	push   ebp
9f002219:	89 e5                	mov    ebp,esp
9f00221b:	53                   	push   ebx
9f00221c:	83 ec 04             	sub    esp,0x4
9f00221f:	e8 62 3f 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f002224:	05 d8 6f 00 00       	add    eax,0x6fd8
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:16
    
    params.addr = addr;
9f002229:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f00222f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f002232:	89 0a                	mov    DWORD PTR [edx],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:17
    params.len = len;
9f002234:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f002237:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f00223d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:18
    params.prot = prot;
9f002240:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f002246:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f002249:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:19
    params.flags = flags;
9f00224c:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f002252:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
9f002255:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:20
    params.fd = fd;
9f002258:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f00225e:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
9f002261:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:21
    params.offset = offset;
9f002264:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f00226a:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
9f00226d:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:23
    
    return (void*)do_syscall1(SYSCALL_MMAP, (uint32_t)&params);
9f002270:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f002276:	83 ec 08             	sub    esp,0x8
9f002279:	52                   	push   edx
9f00227a:	6a 11                	push   0x11
9f00227c:	89 c3                	mov    ebx,eax
9f00227e:	e8 bd f2 ff ff       	call   9f001540 <do_syscall1>
9f002283:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:24
}
9f002286:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002289:	c9                   	leave  
9f00228a:	c3                   	ret    
9f00228b:	90                   	nop

9f00228c <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:22
VISIBLE uint32_t heapBase=0;
VISIBLE uint32_t heapCurr=0;
VISIBLE uint32_t heapEnd=0;

void initmalloc()
{
9f00228c:	55                   	push   ebp
9f00228d:	89 e5                	mov    ebp,esp
9f00228f:	53                   	push   ebx
9f002290:	83 ec 04             	sub    esp,0x4
9f002293:	e8 38 3f 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f002298:	81 c3 64 6f 00 00    	add    ebx,0x6f64
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:23
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
9f00229e:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0022a4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0022a6:	50                   	push   eax
9f0022a7:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0022ad:	50                   	push   eax
9f0022ae:	8d 83 f0 f6 ff ff    	lea    eax,[ebx-0x910]
9f0022b4:	50                   	push   eax
9f0022b5:	68 00 00 00 01       	push   0x1000000
9f0022ba:	e8 5d f5 ff ff       	call   9f00181c <printdI>
9f0022bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:24
    heapBase=0;
9f0022c2:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0022c8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:25
    heapCurr=0;
9f0022ce:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0022d4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:26
    heapEnd=0;
9f0022da:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f0022e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:28

}
9f0022e6:	90                   	nop
9f0022e7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0022ea:	c9                   	leave  
9f0022eb:	c3                   	ret    

9f0022ec <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:31

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
9f0022ec:	55                   	push   ebp
9f0022ed:	89 e5                	mov    ebp,esp
9f0022ef:	83 ec 10             	sub    esp,0x10
9f0022f2:	e8 8f 3e 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0022f7:	05 05 6f 00 00       	add    eax,0x6f05
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:34
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
9f0022fc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0022ff:	83 c2 30             	add    edx,0x30
9f002302:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:36
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
9f002305:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f00230b:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f00230d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002310:	01 d1                	add    ecx,edx
9f002312:	8b 90 dc ff ff ff    	mov    edx,DWORD PTR [eax-0x24]
9f002318:	8b 12                	mov    edx,DWORD PTR [edx]
9f00231a:	39 d1                	cmp    ecx,edx
9f00231c:	76 4e                	jbe    9f00236c <newHeapRequiredToFulfillRequest+0x80>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:39
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
9f00231e:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f002324:	8b 12                	mov    edx,DWORD PTR [edx]
9f002326:	8b 80 dc ff ff ff    	mov    eax,DWORD PTR [eax-0x24]
9f00232c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00232e:	29 c2                	sub    edx,eax
9f002330:	89 d0                	mov    eax,edx
9f002332:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:40
        if (newSize== 0 || newSize%PAGE_SIZE)
9f002335:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
9f002339:	74 0c                	je     9f002347 <newHeapRequiredToFulfillRequest+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:40 (discriminator 1)
9f00233b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00233e:	25 ff 0f 00 00       	and    eax,0xfff
9f002343:	85 c0                	test   eax,eax
9f002345:	74 10                	je     9f002357 <newHeapRequiredToFulfillRequest+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:42
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
9f002347:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00234a:	25 00 f0 ff ff       	and    eax,0xfffff000
9f00234f:	05 00 10 00 00       	add    eax,0x1000
9f002354:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:45
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < MALLOC_MINIMUM_REQUEST_SIZE)
9f002357:	81 7d fc ff 0f 00 00 	cmp    DWORD PTR [ebp-0x4],0xfff
9f00235e:	77 07                	ja     9f002367 <newHeapRequiredToFulfillRequest+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:46
            return MALLOC_MINIMUM_REQUEST_SIZE;
9f002360:	b8 00 10 00 00       	mov    eax,0x1000
9f002365:	eb 0a                	jmp    9f002371 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:48
        else
            return newSize;
9f002367:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00236a:	eb 05                	jmp    9f002371 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:51
    }
    else
        return 0;
9f00236c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52
}
9f002371:	c9                   	leave  
9f002372:	c3                   	ret    

9f002373 <freeI>:
freeI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:55

void freeI(void* fpointer)
{
9f002373:	55                   	push   ebp
9f002374:	89 e5                	mov    ebp,esp
9f002376:	53                   	push   ebx
9f002377:	83 ec 14             	sub    esp,0x14
9f00237a:	e8 07 3e 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f00237f:	05 7d 6e 00 00       	add    eax,0x6e7d
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:58
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if ((uint32_t)fpointer < heapBase || (uint32_t)fpointer > heapCurr)
9f002384:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f002387:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f00238d:	8b 12                	mov    edx,DWORD PTR [edx]
9f00238f:	39 d1                	cmp    ecx,edx
9f002391:	72 4a                	jb     9f0023dd <freeI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:58 (discriminator 1)
9f002393:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f002396:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f00239c:	8b 12                	mov    edx,DWORD PTR [edx]
9f00239e:	39 d1                	cmp    ecx,edx
9f0023a0:	77 3b                	ja     9f0023dd <freeI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:61
        return;
    
    if (fpointer==NULL)
9f0023a2:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0023a6:	74 38                	je     9f0023e0 <freeI+0x6d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:63
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
9f0023a8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0023ab:	83 ea 18             	sub    edx,0x18
9f0023ae:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:66
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=MALLOC_MARKER_VALUE)
9f0023b1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0023b4:	8b 12                	mov    edx,DWORD PTR [edx]
9f0023b6:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f0023bc:	74 16                	je     9f0023d4 <freeI+0x61>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:68
    {
        printI("malloc: marker not found error!!!\n");
9f0023be:	83 ec 0c             	sub    esp,0xc
9f0023c1:	8d 90 14 f7 ff ff    	lea    edx,[eax-0x8ec]
9f0023c7:	52                   	push   edx
9f0023c8:	89 c3                	mov    ebx,eax
9f0023ca:	e8 e2 f3 ff ff       	call   9f0017b1 <printI>
9f0023cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:69
        return; //Return silently ... for now
9f0023d2:	eb 0d                	jmp    9f0023e1 <freeI+0x6e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:71
    }
    mp->inUse=false;
9f0023d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0023d7:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
9f0023db:	eb 04                	jmp    9f0023e1 <freeI+0x6e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:59
void freeI(void* fpointer)
{
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if ((uint32_t)fpointer < heapBase || (uint32_t)fpointer > heapCurr)
        return;
9f0023dd:	90                   	nop
9f0023de:	eb 01                	jmp    9f0023e1 <freeI+0x6e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:62
    
    if (fpointer==NULL)
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
9f0023e0:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:76
    mp->inUse=false;
#ifdef MALLOC_CLEAR_ON_FREE
    uint32_t bytesToClear=0, bytesCleared=0;
    memset(fpointer,mp->len,MALLOC_DEFAULT_CLEAR_VALUE1);
#endif
}
9f0023e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0023e4:	c9                   	leave  
9f0023e5:	c3                   	ret    

9f0023e6 <mallocFindAvailableMemory>:
mallocFindAvailableMemory():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:79

heaprec_t *mallocFindAvailableMemory(size_t size)
{
9f0023e6:	55                   	push   ebp
9f0023e7:	89 e5                	mov    ebp,esp
9f0023e9:	83 ec 10             	sub    esp,0x10
9f0023ec:	e8 95 3d 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0023f1:	05 0b 6e 00 00       	add    eax,0x6e0b
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:80
    heaprec_t* heapPtr=(heaprec_t*)heapBase;
9f0023f6:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f0023fc:	8b 12                	mov    edx,DWORD PTR [edx]
9f0023fe:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:83
    do
    {
        if (!heapPtr->inUse && heapPtr->len>=size && heapPtr->marker==MALLOC_MARKER_VALUE)
9f002401:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002404:	0f b6 52 08          	movzx  edx,BYTE PTR [edx+0x8]
9f002408:	83 f2 01             	xor    edx,0x1
9f00240b:	84 d2                	test   dl,dl
9f00240d:	74 1d                	je     9f00242c <mallocFindAvailableMemory+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:83 (discriminator 1)
9f00240f:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002412:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
9f002415:	3b 55 08             	cmp    edx,DWORD PTR [ebp+0x8]
9f002418:	72 12                	jb     9f00242c <mallocFindAvailableMemory+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:83 (discriminator 2)
9f00241a:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00241d:	8b 12                	mov    edx,DWORD PTR [edx]
9f00241f:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f002425:	75 05                	jne    9f00242c <mallocFindAvailableMemory+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:84
            return heapPtr;
9f002427:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00242a:	eb 3c                	jmp    9f002468 <mallocFindAvailableMemory+0x82>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:85
        if (heapPtr->next)
9f00242c:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00242f:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
9f002432:	85 d2                	test   edx,edx
9f002434:	74 09                	je     9f00243f <mallocFindAvailableMemory+0x59>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:86
            heapPtr=heapPtr->next;
9f002436:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002439:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
9f00243c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
        
    }
    while(heapPtr<(heaprec_t*)heapCurr && heapPtr->next && heapPtr->marker==MALLOC_MARKER_VALUE);
9f00243f:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f002445:	8b 12                	mov    edx,DWORD PTR [edx]
9f002447:	39 55 fc             	cmp    DWORD PTR [ebp-0x4],edx
9f00244a:	73 17                	jae    9f002463 <mallocFindAvailableMemory+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89 (discriminator 1)
9f00244c:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00244f:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
9f002452:	85 d2                	test   edx,edx
9f002454:	74 0d                	je     9f002463 <mallocFindAvailableMemory+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89 (discriminator 2)
9f002456:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002459:	8b 12                	mov    edx,DWORD PTR [edx]
9f00245b:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f002461:	74 9e                	je     9f002401 <mallocFindAvailableMemory+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:91
    //while (heapPtr->marker==ALLOC_MARKER_VALUE);
    return NULL;
9f002463:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:92
}
9f002468:	c9                   	leave  
9f002469:	c3                   	ret    

9f00246a <mallocSanityCheck>:
mallocSanityCheck():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:95

void mallocSanityCheck(heaprec_t *heaprec)
{
9f00246a:	55                   	push   ebp
9f00246b:	89 e5                	mov    ebp,esp
9f00246d:	53                   	push   ebx
9f00246e:	83 ec 14             	sub    esp,0x14
9f002471:	e8 10 3d 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f002476:	05 86 6d 00 00       	add    eax,0x6d86
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:97
#ifdef MALLOC_SANITY_CHECK
    heaprec_t *heapPtr=heaprec;
9f00247b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00247e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98
    while (heapPtr>=(heaprec_t*)heapBase && heapPtr->prev!=heapPtr)
9f002481:	eb 54                	jmp    9f0024d7 <mallocSanityCheck+0x6d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:100
    {
        if (heapBase<(uintptr_t)heapPtr-8)
9f002483:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002486:	8d 4a f8             	lea    ecx,[edx-0x8]
9f002489:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f00248f:	8b 12                	mov    edx,DWORD PTR [edx]
9f002491:	39 d1                	cmp    ecx,edx
9f002493:	76 16                	jbe    9f0024ab <mallocSanityCheck+0x41>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:102
        {
                printfI("\n**************************malloc base error!!!**************************\n");
9f002495:	83 ec 0c             	sub    esp,0xc
9f002498:	8d 90 38 f7 ff ff    	lea    edx,[eax-0x8c8]
9f00249e:	52                   	push   edx
9f00249f:	89 c3                	mov    ebx,eax
9f0024a1:	e8 b7 f2 ff ff       	call   9f00175d <printfI>
9f0024a6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:104 (discriminator 1)
    SanityLoop2:
                goto SanityLoop2;
9f0024a9:	eb fe                	jmp    9f0024a9 <mallocSanityCheck+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:106
        }
        if (heapPtr->marker!=MALLOC_MARKER_VALUE)
9f0024ab:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0024ae:	8b 12                	mov    edx,DWORD PTR [edx]
9f0024b0:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f0024b6:	74 16                	je     9f0024ce <mallocSanityCheck+0x64>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:108
        {
            printfI("\n**************************malloc pointer error!!!**************************\n");
9f0024b8:	83 ec 0c             	sub    esp,0xc
9f0024bb:	8d 90 84 f7 ff ff    	lea    edx,[eax-0x87c]
9f0024c1:	52                   	push   edx
9f0024c2:	89 c3                	mov    ebx,eax
9f0024c4:	e8 94 f2 ff ff       	call   9f00175d <printfI>
9f0024c9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:110 (discriminator 2)
SanityLoop:
            goto SanityLoop;
9f0024cc:	eb fe                	jmp    9f0024cc <mallocSanityCheck+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:112
        }
        heapPtr=heapPtr->prev;
9f0024ce:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0024d1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
9f0024d4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98

void mallocSanityCheck(heaprec_t *heaprec)
{
#ifdef MALLOC_SANITY_CHECK
    heaprec_t *heapPtr=heaprec;
    while (heapPtr>=(heaprec_t*)heapBase && heapPtr->prev!=heapPtr)
9f0024d7:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f0024dd:	8b 12                	mov    edx,DWORD PTR [edx]
9f0024df:	39 55 f4             	cmp    DWORD PTR [ebp-0xc],edx
9f0024e2:	72 0b                	jb     9f0024ef <mallocSanityCheck+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98 (discriminator 1)
9f0024e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0024e7:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
9f0024ea:	3b 55 f4             	cmp    edx,DWORD PTR [ebp-0xc]
9f0024ed:	75 94                	jne    9f002483 <mallocSanityCheck+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:115
            goto SanityLoop;
        }
        heapPtr=heapPtr->prev;
    }
#endif
}
9f0024ef:	90                   	nop
9f0024f0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0024f3:	c9                   	leave  
9f0024f4:	c3                   	ret    

9f0024f5 <mallocI>:
mallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:118

void*  mallocI(size_t size)
{
9f0024f5:	55                   	push   ebp
9f0024f6:	89 e5                	mov    ebp,esp
9f0024f8:	53                   	push   ebx
9f0024f9:	83 ec 24             	sub    esp,0x24
9f0024fc:	e8 cf 3c 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f002501:	81 c3 fb 6c 00 00    	add    ebx,0x6cfb
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:123
    void* retVal;

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr=NULL;
9f002507:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:124
    size_t requestSize=size;
9f00250e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002511:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:127
    static heaprec_t *lastHRCreated=NULL;

    if (size<MALLOC_MIN_SIZE_TO_ALLOCATE)
9f002514:	83 7d 08 17          	cmp    DWORD PTR [ebp+0x8],0x17
9f002518:	77 07                	ja     9f002521 <mallocI+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:128
        requestSize=MALLOC_MIN_SIZE_TO_ALLOCATE;
9f00251a:	c7 45 f4 18 00 00 00 	mov    DWORD PTR [ebp-0xc],0x18
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:129
    printdI(DEBUG_MALLOC,"libc_malloc: Request for 0x%08x bytes\n",requestSize);
9f002521:	83 ec 04             	sub    esp,0x4
9f002524:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002527:	8d 83 d4 f7 ff ff    	lea    eax,[ebx-0x82c]
9f00252d:	50                   	push   eax
9f00252e:	68 00 00 00 01       	push   0x1000000
9f002533:	e8 e4 f2 ff ff       	call   9f00181c <printdI>
9f002538:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:130
    if (heapBase>0)
9f00253b:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f002541:	8b 00                	mov    eax,DWORD PTR [eax]
9f002543:	85 c0                	test   eax,eax
9f002545:	74 71                	je     9f0025b8 <mallocI+0xc3>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:132
    {
        heapPtr=mallocFindAvailableMemory(requestSize);
9f002547:	83 ec 0c             	sub    esp,0xc
9f00254a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f00254d:	e8 94 fe ff ff       	call   9f0023e6 <mallocFindAvailableMemory>
9f002552:	83 c4 10             	add    esp,0x10
9f002555:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:133
        if (heapPtr!=NULL)
9f002558:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00255c:	74 5a                	je     9f0025b8 <mallocI+0xc3>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:135
        {
            heapPtr->inUse=true;
9f00255e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002561:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:136
            heapPtr->uses++;
9f002565:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002568:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
9f00256c:	8d 50 01             	lea    edx,[eax+0x1]
9f00256f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002572:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:137
            printdI(DEBUG_MALLOC,"libc_malloc: Reusing heaprec=0x%08x, address=0x%08x (uses=%u)",heapPtr,HEAP_PTR_MEM_ADDR(heapPtr),heapPtr->uses);
9f002576:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002579:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
9f00257d:	0f b7 d0             	movzx  edx,ax
9f002580:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002586:	8b 00                	mov    eax,DWORD PTR [eax]
9f002588:	83 c0 18             	add    eax,0x18
9f00258b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f00258e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002591:	83 ec 0c             	sub    esp,0xc
9f002594:	52                   	push   edx
9f002595:	50                   	push   eax
9f002596:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f002599:	8d 83 fc f7 ff ff    	lea    eax,[ebx-0x804]
9f00259f:	50                   	push   eax
9f0025a0:	68 00 00 00 01       	push   0x1000000
9f0025a5:	e8 72 f2 ff ff       	call   9f00181c <printdI>
9f0025aa:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:138
            return ((void*)heapPtr)+sizeof(heaprec_t);
9f0025ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0025b0:	83 c0 18             	add    eax,0x18
9f0025b3:	e9 f8 01 00 00       	jmp    9f0027b0 <mallocI+0x2bb>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:142
        }
    }
    
    needed = newHeapRequiredToFulfillRequest(requestSize);
9f0025b8:	83 ec 0c             	sub    esp,0xc
9f0025bb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0025be:	e8 29 fd ff ff       	call   9f0022ec <newHeapRequiredToFulfillRequest>
9f0025c3:	83 c4 10             	add    esp,0x10
9f0025c6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:143
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
9f0025c9:	83 ec 04             	sub    esp,0x4
9f0025cc:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f0025cf:	8d 83 3a f8 ff ff    	lea    eax,[ebx-0x7c6]
9f0025d5:	50                   	push   eax
9f0025d6:	68 00 00 00 01       	push   0x1000000
9f0025db:	e8 3c f2 ff ff       	call   9f00181c <printdI>
9f0025e0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:144
    if (needed!=0)      //New heap required
9f0025e3:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f0025e7:	0f 84 e5 00 00 00    	je     9f0026d2 <mallocI+0x1dd>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:146
    {
        if (heapCurr>0)
9f0025ed:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0025f3:	8b 00                	mov    eax,DWORD PTR [eax]
9f0025f5:	85 c0                	test   eax,eax
9f0025f7:	74 17                	je     9f002610 <mallocI+0x11b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:147
            mallocSanityCheck(((heaprec_t*)heapCurr)->prev);        
9f0025f9:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0025ff:	8b 00                	mov    eax,DWORD PTR [eax]
9f002601:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f002604:	83 ec 0c             	sub    esp,0xc
9f002607:	50                   	push   eax
9f002608:	e8 5d fe ff ff       	call   9f00246a <mallocSanityCheck>
9f00260d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:148
        allocatedPtr = do_syscall1(SYSCALL_ALLOCHEAP, needed);
9f002610:	83 ec 08             	sub    esp,0x8
9f002613:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f002616:	68 65 01 00 00       	push   0x165
9f00261b:	e8 20 ef ff ff       	call   9f001540 <do_syscall1>
9f002620:	83 c4 10             	add    esp,0x10
9f002623:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:150
        //This is needed to keep in sync with what the kernel thinks
        memsetI((char*)allocatedPtr,0,needed);
9f002626:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002629:	83 ec 04             	sub    esp,0x4
9f00262c:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f00262f:	6a 00                	push   0x0
9f002631:	50                   	push   eax
9f002632:	e8 d5 04 00 00       	call   9f002b0c <memsetI>
9f002637:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:151
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
9f00263a:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f002640:	8b 00                	mov    eax,DWORD PTR [eax]
9f002642:	83 ec 04             	sub    esp,0x4
9f002645:	50                   	push   eax
9f002646:	8d 83 56 f8 ff ff    	lea    eax,[ebx-0x7aa]
9f00264c:	50                   	push   eax
9f00264d:	68 00 00 00 01       	push   0x1000000
9f002652:	e8 c5 f1 ff ff       	call   9f00181c <printdI>
9f002657:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:152
        heapEnd=allocatedPtr+needed;
9f00265a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00265d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f002660:	01 c2                	add    edx,eax
9f002662:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f002668:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:153
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
9f00266a:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f002670:	8b 00                	mov    eax,DWORD PTR [eax]
9f002672:	83 ec 0c             	sub    esp,0xc
9f002675:	50                   	push   eax
9f002676:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f002679:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f00267c:	8d 83 74 f8 ff ff    	lea    eax,[ebx-0x78c]
9f002682:	50                   	push   eax
9f002683:	68 00 00 00 01       	push   0x1000000
9f002688:	e8 8f f1 ff ff       	call   9f00181c <printdI>
9f00268d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:154
        if (heapBase==0)    //Hasn't been initialized yet!
9f002690:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f002696:	8b 00                	mov    eax,DWORD PTR [eax]
9f002698:	85 c0                	test   eax,eax
9f00269a:	75 36                	jne    9f0026d2 <mallocI+0x1dd>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:156
        {
            heapCurr=allocatedPtr;
9f00269c:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0026a2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0026a5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:157
            heapBase=allocatedPtr;
9f0026a7:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0026ad:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0026b0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:158
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
9f0026b2:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0026b8:	8b 00                	mov    eax,DWORD PTR [eax]
9f0026ba:	83 ec 04             	sub    esp,0x4
9f0026bd:	50                   	push   eax
9f0026be:	8d 83 b4 f8 ff ff    	lea    eax,[ebx-0x74c]
9f0026c4:	50                   	push   eax
9f0026c5:	68 00 00 00 01       	push   0x1000000
9f0026ca:	e8 4d f1 ff ff       	call   9f00181c <printdI>
9f0026cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:161
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
9f0026d2:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0026d8:	8b 00                	mov    eax,DWORD PTR [eax]
9f0026da:	83 ec 04             	sub    esp,0x4
9f0026dd:	50                   	push   eax
9f0026de:	8d 83 f0 f8 ff ff    	lea    eax,[ebx-0x710]
9f0026e4:	50                   	push   eax
9f0026e5:	68 00 00 00 01       	push   0x1000000
9f0026ea:	e8 2d f1 ff ff       	call   9f00181c <printdI>
9f0026ef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:162
    heapPtr = (heaprec_t*)heapCurr;
9f0026f2:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0026f8:	8b 00                	mov    eax,DWORD PTR [eax]
9f0026fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:163
    heapPtr->marker=MALLOC_MARKER_VALUE;
9f0026fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002700:	c7 00 1f 2f 3f 4f    	mov    DWORD PTR [eax],0x4f3f2f1f
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:164
    heapPtr->len=requestSize;
9f002706:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002709:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00270c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:165
    heapPtr->inUse=true;
9f00270f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002712:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:166
    heapPtr->uses++;
9f002716:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002719:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
9f00271d:	8d 50 01             	lea    edx,[eax+0x1]
9f002720:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002723:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:167
    if (lastHRCreated!=NULL)
9f002727:	8b 83 94 00 00 00    	mov    eax,DWORD PTR [ebx+0x94]
9f00272d:	85 c0                	test   eax,eax
9f00272f:	74 18                	je     9f002749 <mallocI+0x254>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:169
    {
        heapPtr->prev=lastHRCreated;
9f002731:	8b 93 94 00 00 00    	mov    edx,DWORD PTR [ebx+0x94]
9f002737:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00273a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:170
        heapPtr->prev->next=heapPtr;
9f00273d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002740:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f002743:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002746:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:173
    }

    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08x\n",heapCurr);
9f002749:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f00274f:	8b 00                	mov    eax,DWORD PTR [eax]
9f002751:	83 ec 04             	sub    esp,0x4
9f002754:	50                   	push   eax
9f002755:	8d 83 18 f9 ff ff    	lea    eax,[ebx-0x6e8]
9f00275b:	50                   	push   eax
9f00275c:	68 00 00 00 01       	push   0x1000000
9f002761:	e8 b6 f0 ff ff       	call   9f00181c <printdI>
9f002766:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:174
    retVal=((void*)(heapPtr)+sizeof(heaprec_t));
9f002769:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00276c:	83 c0 18             	add    eax,0x18
9f00276f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:175
    heapCurr+=requestSize+(sizeof(heaprec_t));
9f002772:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002778:	8b 10                	mov    edx,DWORD PTR [eax]
9f00277a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00277d:	01 d0                	add    eax,edx
9f00277f:	8d 50 18             	lea    edx,[eax+0x18]
9f002782:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002788:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:176
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
9f00278a:	83 ec 04             	sub    esp,0x4
9f00278d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f002790:	8d 83 36 f9 ff ff    	lea    eax,[ebx-0x6ca]
9f002796:	50                   	push   eax
9f002797:	68 00 00 00 01       	push   0x1000000
9f00279c:	e8 7b f0 ff ff       	call   9f00181c <printdI>
9f0027a1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:177
    lastHRCreated=heapPtr;
9f0027a4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0027a7:	89 83 94 00 00 00    	mov    DWORD PTR [ebx+0x94],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:178
    return retVal;
9f0027ad:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:179
}
9f0027b0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0027b3:	c9                   	leave  
9f0027b4:	c3                   	ret    

9f0027b5 <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:182

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
9f0027b5:	55                   	push   ebp
9f0027b6:	89 e5                	mov    ebp,esp
9f0027b8:	83 ec 08             	sub    esp,0x8
9f0027bb:	e8 c6 39 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0027c0:	05 3c 6a 00 00       	add    eax,0x6a3c
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:183
    return mallocI(size);
9f0027c5:	83 ec 0c             	sub    esp,0xc
9f0027c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0027cb:	e8 25 fd ff ff       	call   9f0024f5 <mallocI>
9f0027d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:184
}
9f0027d3:	c9                   	leave  
9f0027d4:	c3                   	ret    

9f0027d5 <reallocI>:
reallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:187

void* reallocI(void *foldptr, uint32_t newlen)
{
9f0027d5:	55                   	push   ebp
9f0027d6:	89 e5                	mov    ebp,esp
9f0027d8:	53                   	push   ebx
9f0027d9:	83 ec 14             	sub    esp,0x14
9f0027dc:	e8 ef 39 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f0027e1:	81 c3 1b 6a 00 00    	add    ebx,0x6a1b
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:189
    
    printdI(DEBUG_MALLOC,"libc_realloc: called for old pointer 0x%08x, new size=0x%08x",foldptr,newlen);
9f0027e7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0027ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0027ed:	8d 83 50 f9 ff ff    	lea    eax,[ebx-0x6b0]
9f0027f3:	50                   	push   eax
9f0027f4:	68 00 00 00 01       	push   0x1000000
9f0027f9:	e8 1e f0 ff ff       	call   9f00181c <printdI>
9f0027fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:192

    //Get old heap pointer
    uint32_t realSize=newlen;
9f002801:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002804:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:194
    heaprec_t* mp;  //-1 means back up to the heaprec_t struct
    HEAP_CURR(foldptr,mp);
9f002807:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00280a:	83 e8 18             	sub    eax,0x18
9f00280d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:196

    if (newlen==0)
9f002810:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002814:	75 17                	jne    9f00282d <reallocI+0x58>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:197
        printdI(DEBUG_MALLOC,"libc_relloc: Request for 0 bytes, cannot fulfill\n");
9f002816:	83 ec 08             	sub    esp,0x8
9f002819:	8d 83 90 f9 ff ff    	lea    eax,[ebx-0x670]
9f00281f:	50                   	push   eax
9f002820:	68 00 00 00 01       	push   0x1000000
9f002825:	e8 f2 ef ff ff       	call   9f00181c <printdI>
9f00282a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:198
    if (newlen==0 || newlen<=mp->len)
9f00282d:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002831:	74 0b                	je     9f00283e <reallocI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:198 (discriminator 1)
9f002833:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002836:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f002839:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f00283c:	72 08                	jb     9f002846 <reallocI+0x71>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:199
        return foldptr;
9f00283e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002841:	e9 8d 00 00 00       	jmp    9f0028d3 <reallocI+0xfe>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:201

    if (newlen<MALLOC_MIN_SIZE_TO_ALLOCATE)
9f002846:	83 7d 0c 17          	cmp    DWORD PTR [ebp+0xc],0x17
9f00284a:	77 07                	ja     9f002853 <reallocI+0x7e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:202
        realSize=MALLOC_MIN_SIZE_TO_ALLOCATE;
9f00284c:	c7 45 f4 18 00 00 00 	mov    DWORD PTR [ebp-0xc],0x18
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:205
    
    //Allocate space of newlen
    uintptr_t *fnewptr = mallocI(realSize);
9f002853:	83 ec 0c             	sub    esp,0xc
9f002856:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002859:	e8 97 fc ff ff       	call   9f0024f5 <mallocI>
9f00285e:	83 c4 10             	add    esp,0x10
9f002861:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:206
    printdI(DEBUG_MALLOC,"\tlibc_realloc: received new malloc pointer 0x%08x, old size=0x%08x, new size=0x%08x\n",fnewptr, mp->len, realSize);
9f002864:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002867:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f00286a:	83 ec 0c             	sub    esp,0xc
9f00286d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002870:	50                   	push   eax
9f002871:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002874:	8d 83 c4 f9 ff ff    	lea    eax,[ebx-0x63c]
9f00287a:	50                   	push   eax
9f00287b:	68 00 00 00 01       	push   0x1000000
9f002880:	e8 97 ef ff ff       	call   9f00181c <printdI>
9f002885:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:211
   
    //Copy from old pointer to new memory using the old pointer's length
//    if (newlen>mp->len)
//        memsetI(fnewptr+mp->len,0,newlen-mp->len);
    memcpyI(fnewptr, foldptr, mp->len>realSize?realSize:mp->len);
9f002888:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00288b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
9f00288e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002891:	39 c2                	cmp    edx,eax
9f002893:	0f 46 c2             	cmovbe eax,edx
9f002896:	83 ec 04             	sub    esp,0x4
9f002899:	50                   	push   eax
9f00289a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00289d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0028a0:	e8 ab 00 00 00       	call   9f002950 <memcpyI>
9f0028a5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:212
    printdI(DEBUG_MALLOC,"\tlibc_realloc: updated new pointer 0x%08x with old pointer data and cleared out remaing if applicable\n",fnewptr);
9f0028a8:	83 ec 04             	sub    esp,0x4
9f0028ab:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0028ae:	8d 83 1c fa ff ff    	lea    eax,[ebx-0x5e4]
9f0028b4:	50                   	push   eax
9f0028b5:	68 00 00 00 01       	push   0x1000000
9f0028ba:	e8 5d ef ff ff       	call   9f00181c <printdI>
9f0028bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:215
    
   //free old pointer
    freeI(foldptr);
9f0028c2:	83 ec 0c             	sub    esp,0xc
9f0028c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0028c8:	e8 a6 fa ff ff       	call   9f002373 <freeI>
9f0028cd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:216
    return fnewptr;
9f0028d0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:217
}
9f0028d3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0028d6:	c9                   	leave  
9f0028d7:	c3                   	ret    

9f0028d8 <realloc>:
realloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:220

VISIBLE void* realloc(void *foldptr, uint32_t newlen)
{
9f0028d8:	55                   	push   ebp
9f0028d9:	89 e5                	mov    ebp,esp
9f0028db:	83 ec 08             	sub    esp,0x8
9f0028de:	e8 a3 38 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0028e3:	05 19 69 00 00       	add    eax,0x6919
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:221
    return reallocI(foldptr, newlen);
9f0028e8:	83 ec 08             	sub    esp,0x8
9f0028eb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0028ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0028f1:	e8 df fe ff ff       	call   9f0027d5 <reallocI>
9f0028f6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:222
}
9f0028f9:	c9                   	leave  
9f0028fa:	c3                   	ret    

9f0028fb <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:225

__attribute__((visibility("default"))) void free(void* fpointer)
{
9f0028fb:	55                   	push   ebp
9f0028fc:	89 e5                	mov    ebp,esp
9f0028fe:	83 ec 08             	sub    esp,0x8
9f002901:	e8 80 38 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f002906:	05 f6 68 00 00       	add    eax,0x68f6
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:226
    freeI(fpointer);
9f00290b:	83 ec 0c             	sub    esp,0xc
9f00290e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002911:	e8 5d fa ff ff       	call   9f002373 <freeI>
9f002916:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:227
}
9f002919:	90                   	nop
9f00291a:	c9                   	leave  
9f00291b:	c3                   	ret    

9f00291c <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:230

void malloc_cleanup()
{
9f00291c:	55                   	push   ebp
9f00291d:	89 e5                	mov    ebp,esp
9f00291f:	53                   	push   ebx
9f002920:	83 ec 04             	sub    esp,0x4
9f002923:	e8 5e 38 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f002928:	05 d4 68 00 00       	add    eax,0x68d4
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:231
    do_syscall1(SYSCALL_FREE, heapBase);
9f00292d:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f002933:	8b 12                	mov    edx,DWORD PTR [edx]
9f002935:	83 ec 08             	sub    esp,0x8
9f002938:	52                   	push   edx
9f002939:	68 64 01 00 00       	push   0x164
9f00293e:	89 c3                	mov    ebx,eax
9f002940:	e8 fb eb ff ff       	call   9f001540 <do_syscall1>
9f002945:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:232
9f002948:	90                   	nop
9f002949:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00294c:	c9                   	leave  
9f00294d:	c3                   	ret    
9f00294e:	66 90                	xchg   ax,ax

9f002950 <memcpyI>:
memcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:12
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time

void *memcpyI(void *dest, const void *src, size_t n)
{
9f002950:	55                   	push   ebp
9f002951:	89 e5                	mov    ebp,esp
9f002953:	83 ec 20             	sub    esp,0x20
9f002956:	e8 2b 38 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f00295b:	05 a1 68 00 00       	add    eax,0x68a1
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    bool dw,dd;
    
    dd=n%4==0;
9f002960:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002963:	83 e0 03             	and    eax,0x3
9f002966:	85 c0                	test   eax,eax
9f002968:	0f 94 c0             	sete   al
9f00296b:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    dw=n%2==0;
9f00296e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002971:	83 e0 01             	and    eax,0x1
9f002974:	85 c0                	test   eax,eax
9f002976:	0f 94 c0             	sete   al
9f002979:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:17
    if (dd)
9f00297c:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
9f002980:	74 7d                	je     9f0029ff <memcpyI+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
    {
        n /=4;
9f002982:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002985:	c1 e8 02             	shr    eax,0x2
9f002988:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        const uint32_t *f = src;
9f00298b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00298e:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:21
        uint32_t *t = dest;
9f002991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002994:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23

        if (f < t) {
9f002997:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00299a:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f00299d:	73 4b                	jae    9f0029ea <memcpyI+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                f += n;
9f00299f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0029a2:	c1 e0 02             	shl    eax,0x2
9f0029a5:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                t += n;
9f0029a8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0029ab:	c1 e0 02             	shl    eax,0x2
9f0029ae:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                while ( (n)-- > 0)
9f0029b1:	eb 12                	jmp    9f0029c5 <memcpyI+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:27
                        *--t = *--f;
9f0029b3:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
9f0029b7:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
9f0029bb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0029be:	8b 10                	mov    edx,DWORD PTR [eax]
9f0029c0:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0029c3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f0029c5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0029c8:	8d 50 ff             	lea    edx,[eax-0x1]
9f0029cb:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0029ce:	85 c0                	test   eax,eax
9f0029d0:	75 e1                	jne    9f0029b3 <memcpyI+0x63>
9f0029d2:	eb 23                	jmp    9f0029f7 <memcpyI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f0029d4:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0029d7:	8d 50 04             	lea    edx,[eax+0x4]
9f0029da:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f0029dd:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0029e0:	8d 4a 04             	lea    ecx,[edx+0x4]
9f0029e3:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
9f0029e6:	8b 12                	mov    edx,DWORD PTR [edx]
9f0029e8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f0029ea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0029ed:	8d 50 ff             	lea    edx,[eax-0x1]
9f0029f0:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0029f3:	85 c0                	test   eax,eax
9f0029f5:	75 dd                	jne    9f0029d4 <memcpyI+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:31
                        *t++ = *f++;
        return dest;
9f0029f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0029fa:	e9 ea 00 00 00       	jmp    9f002ae9 <memcpyI+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:33
    }
    else if (dw)
9f0029ff:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
9f002a03:	74 79                	je     9f002a7e <memcpyI+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
    {
        n /=2;
9f002a05:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002a08:	d1 e8                	shr    eax,1
9f002a0a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        const uint32_t *f = src;
9f002a0d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002a10:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:37
        uint32_t *t = dest;
9f002a13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a16:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39

        if (f < t) {
9f002a19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002a1c:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f002a1f:	73 4b                	jae    9f002a6c <memcpyI+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                f += n;
9f002a21:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002a24:	c1 e0 02             	shl    eax,0x2
9f002a27:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                t += n;
9f002a2a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002a2d:	c1 e0 02             	shl    eax,0x2
9f002a30:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                while ( (n)-- > 0)
9f002a33:	eb 12                	jmp    9f002a47 <memcpyI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:43
                        *--t = *--f;
9f002a35:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
9f002a39:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
9f002a3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002a40:	8b 10                	mov    edx,DWORD PTR [eax]
9f002a42:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002a45:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f002a47:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002a4a:	8d 50 ff             	lea    edx,[eax-0x1]
9f002a4d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002a50:	85 c0                	test   eax,eax
9f002a52:	75 e1                	jne    9f002a35 <memcpyI+0xe5>
9f002a54:	eb 23                	jmp    9f002a79 <memcpyI+0x129>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f002a56:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002a59:	8d 50 04             	lea    edx,[eax+0x4]
9f002a5c:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f002a5f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002a62:	8d 4a 04             	lea    ecx,[edx+0x4]
9f002a65:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
9f002a68:	8b 12                	mov    edx,DWORD PTR [edx]
9f002a6a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f002a6c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002a6f:	8d 50 ff             	lea    edx,[eax-0x1]
9f002a72:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002a75:	85 c0                	test   eax,eax
9f002a77:	75 dd                	jne    9f002a56 <memcpyI+0x106>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:47
                        *t++ = *f++;
        return dest;
9f002a79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a7c:	eb 6b                	jmp    9f002ae9 <memcpyI+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
    }
    else
    {
        const char *f = src;
9f002a7e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002a81:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:52
        char *t = dest;
9f002a84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a87:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54

        if (f < t) {
9f002a8a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002a8d:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f002a90:	73 47                	jae    9f002ad9 <memcpyI+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                f += n;
9f002a92:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002a95:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                t += n;
9f002a98:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002a9b:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                while (n-- > 0)
9f002a9e:	eb 13                	jmp    9f002ab3 <memcpyI+0x163>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:58
                        *--t = *--f;
9f002aa0:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
9f002aa4:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
9f002aa8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002aab:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002aae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f002ab1:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
9f002ab3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002ab6:	8d 50 ff             	lea    edx,[eax-0x1]
9f002ab9:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002abc:	85 c0                	test   eax,eax
9f002abe:	75 e0                	jne    9f002aa0 <memcpyI+0x150>
9f002ac0:	eb 24                	jmp    9f002ae6 <memcpyI+0x196>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
9f002ac2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f002ac5:	8d 50 01             	lea    edx,[eax+0x1]
9f002ac8:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f002acb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f002ace:	8d 4a 01             	lea    ecx,[edx+0x1]
9f002ad1:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
9f002ad4:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002ad7:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
9f002ad9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002adc:	8d 50 ff             	lea    edx,[eax-0x1]
9f002adf:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002ae2:	85 c0                	test   eax,eax
9f002ae4:	75 dc                	jne    9f002ac2 <memcpyI+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:62
                        *t++ = *f++;
        return dest;
9f002ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:64
    }
}
9f002ae9:	c9                   	leave  
9f002aea:	c3                   	ret    

9f002aeb <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:67

VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
9f002aeb:	55                   	push   ebp
9f002aec:	89 e5                	mov    ebp,esp
9f002aee:	e8 93 36 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f002af3:	05 09 67 00 00       	add    eax,0x6709
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:68
    return memcpyI(dest, src, n);
9f002af8:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002afb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002afe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002b01:	e8 4a fe ff ff       	call   9f002950 <memcpyI>
9f002b06:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:69
9f002b09:	c9                   	leave  
9f002b0a:	c3                   	ret    
9f002b0b:	90                   	nop

9f002b0c <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "common.h"

void *memsetI(void *d1, int val, size_t len)
{
9f002b0c:	55                   	push   ebp
9f002b0d:	89 e5                	mov    ebp,esp
9f002b0f:	83 ec 20             	sub    esp,0x20
9f002b12:	e8 6f 36 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f002b17:	05 e5 66 00 00       	add    eax,0x66e5
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
9f002b1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002b1f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
9f002b22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002b25:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
9f002b28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002b2b:	c1 e0 10             	shl    eax,0x10
9f002b2e:	89 c2                	mov    edx,eax
9f002b30:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002b33:	c1 e0 08             	shl    eax,0x8
9f002b36:	09 c2                	or     edx,eax
9f002b38:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002b3b:	09 d0                	or     eax,edx
9f002b3d:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
9f002b41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002b44:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
9f002b47:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002b4a:	c1 e0 18             	shl    eax,0x18
9f002b4d:	89 c2                	mov    edx,eax
9f002b4f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002b52:	c1 e0 10             	shl    eax,0x10
9f002b55:	09 c2                	or     edx,eax
9f002b57:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002b5a:	c1 e0 08             	shl    eax,0x8
9f002b5d:	09 d0                	or     eax,edx
9f002b5f:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
9f002b62:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
9f002b65:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002b68:	83 e0 03             	and    eax,0x3
9f002b6b:	85 c0                	test   eax,eax
9f002b6d:	75 1c                	jne    9f002b8b <memsetI+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
9f002b6f:	eb 0e                	jmp    9f002b7f <memsetI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
9f002b71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002b74:	8d 50 04             	lea    edx,[eax+0x4]
9f002b77:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002b7a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f002b7d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
9f002b7f:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
9f002b83:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002b87:	75 e8                	jne    9f002b71 <memsetI+0x65>
9f002b89:	eb 43                	jmp    9f002bce <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
9f002b8b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002b8e:	83 e0 01             	and    eax,0x1
9f002b91:	85 c0                	test   eax,eax
9f002b93:	75 2c                	jne    9f002bc1 <memsetI+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
9f002b95:	eb 10                	jmp    9f002ba7 <memsetI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
9f002b97:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f002b9a:	8d 50 02             	lea    edx,[eax+0x2]
9f002b9d:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f002ba0:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
9f002ba4:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
9f002ba7:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
9f002bab:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002baf:	75 e6                	jne    9f002b97 <memsetI+0x8b>
9f002bb1:	eb 1b                	jmp    9f002bce <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
9f002bb3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002bb6:	8d 50 01             	lea    edx,[eax+0x1]
9f002bb9:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f002bbc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002bbf:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
9f002bc1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002bc4:	8d 50 ff             	lea    edx,[eax-0x1]
9f002bc7:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002bca:	85 c0                	test   eax,eax
9f002bcc:	75 e5                	jne    9f002bb3 <memsetI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
        *d++ = val;
    }
    return d1;
9f002bce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
9f002bd1:	c9                   	leave  
9f002bd2:	c3                   	ret    

9f002bd3 <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

VISIBLE void *memset(void *d1, int val, size_t len)
{
9f002bd3:	55                   	push   ebp
9f002bd4:	89 e5                	mov    ebp,esp
9f002bd6:	e8 ab 35 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f002bdb:	05 21 66 00 00       	add    eax,0x6621
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    return memsetI(d1, val, len);
9f002be0:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002be3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002be6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002be9:	e8 1e ff ff ff       	call   9f002b0c <memsetI>
9f002bee:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
}
9f002bf1:	c9                   	leave  
9f002bf2:	c3                   	ret    
9f002bf3:	90                   	nop

9f002bf4 <pipe>:
pipe():
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:11

#include "common.h"
#include "pipe.h"

VISIBLE int pipe(int pipefd[2])
{
9f002bf4:	55                   	push   ebp
9f002bf5:	89 e5                	mov    ebp,esp
9f002bf7:	53                   	push   ebx
9f002bf8:	83 ec 04             	sub    esp,0x4
9f002bfb:	e8 86 35 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f002c00:	05 fc 65 00 00       	add    eax,0x65fc
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:12
    return do_syscall1(SYSCALL_PIPE, (uintptr_t)pipefd);
9f002c05:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002c08:	83 ec 08             	sub    esp,0x8
9f002c0b:	52                   	push   edx
9f002c0c:	6a 0f                	push   0xf
9f002c0e:	89 c3                	mov    ebx,eax
9f002c10:	e8 2b e9 ff ff       	call   9f001540 <do_syscall1>
9f002c15:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:13
}
9f002c18:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002c1b:	c9                   	leave  
9f002c1c:	c3                   	ret    

9f002c1d <dup3>:
dup3():
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:16

VISIBLE int dup3(int oldfd, int newfd, int flags)
{
9f002c1d:	55                   	push   ebp
9f002c1e:	89 e5                	mov    ebp,esp
9f002c20:	53                   	push   ebx
9f002c21:	83 ec 04             	sub    esp,0x4
9f002c24:	e8 5d 35 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f002c29:	05 d3 65 00 00       	add    eax,0x65d3
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:17
    return do_syscall3(SYSCALL_DUP3,oldfd,newfd,flags);
9f002c2e:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f002c31:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f002c34:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002c37:	53                   	push   ebx
9f002c38:	51                   	push   ecx
9f002c39:	52                   	push   edx
9f002c3a:	6a 10                	push   0x10
9f002c3c:	89 c3                	mov    ebx,eax
9f002c3e:	e8 83 e8 ff ff       	call   9f0014c6 <do_syscall3>
9f002c43:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:18
9f002c46:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002c49:	c9                   	leave  
9f002c4a:	c3                   	ret    
9f002c4b:	90                   	nop

9f002c4c <buildProcInfoTI>:
buildProcInfoTI():
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:17
#include "ascii.h"
#include "file.h"
#include "malloc.h"

procInfo_t *buildProcInfoTI(procInfo_t *procinfo, char *statinfo, int ticksPerUpdateInterval)
{
9f002c4c:	55                   	push   ebp
9f002c4d:	89 e5                	mov    ebp,esp
9f002c4f:	56                   	push   esi
9f002c50:	53                   	push   ebx
9f002c51:	81 ec 50 01 00 00    	sub    esp,0x150
9f002c57:	e8 74 35 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f002c5c:	81 c3 a0 65 00 00    	add    ebx,0x65a0
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:18
    char delim[4]={'\n','\t',' ','\0'};
9f002c62:	c6 45 e8 0a          	mov    BYTE PTR [ebp-0x18],0xa
9f002c66:	c6 45 e9 09          	mov    BYTE PTR [ebp-0x17],0x9
9f002c6a:	c6 45 ea 20          	mov    BYTE PTR [ebp-0x16],0x20
9f002c6e:	c6 45 eb 00          	mov    BYTE PTR [ebp-0x15],0x0
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:20
    char *token;
    int tokenNumber=1;
9f002c72:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:25
    int pid;
    char name[100], name2[100], name3[100];
    static struct tm tinfo;

    memsetI(name,0,100);
9f002c79:	83 ec 04             	sub    esp,0x4
9f002c7c:	6a 64                	push   0x64
9f002c7e:	6a 00                	push   0x0
9f002c80:	8d 45 84             	lea    eax,[ebp-0x7c]
9f002c83:	50                   	push   eax
9f002c84:	e8 83 fe ff ff       	call   9f002b0c <memsetI>
9f002c89:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:26
    memsetI(name2,0,100);
9f002c8c:	83 ec 04             	sub    esp,0x4
9f002c8f:	6a 64                	push   0x64
9f002c91:	6a 00                	push   0x0
9f002c93:	8d 85 20 ff ff ff    	lea    eax,[ebp-0xe0]
9f002c99:	50                   	push   eax
9f002c9a:	e8 6d fe ff ff       	call   9f002b0c <memsetI>
9f002c9f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:27
    memsetI(name3,0,100);
9f002ca2:	83 ec 04             	sub    esp,0x4
9f002ca5:	6a 64                	push   0x64
9f002ca7:	6a 00                	push   0x0
9f002ca9:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
9f002caf:	50                   	push   eax
9f002cb0:	e8 57 fe ff ff       	call   9f002b0c <memsetI>
9f002cb5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:29
    
    token=strtokI(statinfo,delim);
9f002cb8:	83 ec 08             	sub    esp,0x8
9f002cbb:	8d 45 e8             	lea    eax,[ebp-0x18]
9f002cbe:	50                   	push   eax
9f002cbf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002cc2:	e8 55 d4 ff ff       	call   9f00011c <strtokI>
9f002cc7:	83 c4 10             	add    esp,0x10
9f002cca:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:30
    while (token)
9f002ccd:	e9 df 02 00 00       	jmp    9f002fb1 <.L3+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:32
    {
        switch (tokenNumber)
9f002cd2:	83 7d f0 17          	cmp    DWORD PTR [ebp-0x10],0x17
9f002cd6:	0f 87 bd 02 00 00    	ja     9f002f99 <.L3>
9f002cdc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002cdf:	c1 e0 02             	shl    eax,0x2
9f002ce2:	8b 84 18 a0 fa ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x560]
9f002ce9:	01 d8                	add    eax,ebx
9f002ceb:	ff e0                	jmp    eax

9f002ced <.L4>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:35
        {
            case 1: //pid
                pid=atoiI(token);
9f002ced:	83 ec 0c             	sub    esp,0xc
9f002cf0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002cf3:	e8 43 d7 ff ff       	call   9f00043b <atoiI>
9f002cf8:	83 c4 10             	add    esp,0x10
9f002cfb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:36
                procinfo->pid=pid;
9f002cfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d01:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f002d04:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:38
//procinfo->lastUpdateIteration=iteration;
                break;
9f002d06:	e9 8e 02 00 00       	jmp    9f002f99 <.L3>

9f002d0b <.L7>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:40
            case 3: //state
                procinfo->status=token[0];
9f002d0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002d0e:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002d11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d14:	88 50 2c             	mov    BYTE PTR [eax+0x2c],dl
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:41
                break;
9f002d17:	e9 7d 02 00 00       	jmp    9f002f99 <.L3>

9f002d1c <.L8>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:43
            case 4: //ppid
                procinfo->ppid=atoiI(token);
9f002d1c:	83 ec 0c             	sub    esp,0xc
9f002d1f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002d22:	e8 14 d7 ff ff       	call   9f00043b <atoiI>
9f002d27:	83 c4 10             	add    esp,0x10
9f002d2a:	89 c2                	mov    edx,eax
9f002d2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d2f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:44
                break;
9f002d32:	e9 62 02 00 00       	jmp    9f002f99 <.L3>

9f002d37 <.L9>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:46
            case 7: //tty_nr
                procinfo->tty=atoiI(token);
9f002d37:	83 ec 0c             	sub    esp,0xc
9f002d3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002d3d:	e8 f9 d6 ff ff       	call   9f00043b <atoiI>
9f002d42:	83 c4 10             	add    esp,0x10
9f002d45:	89 c2                	mov    edx,eax
9f002d47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d4a:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:47
                break;
9f002d4d:	e9 47 02 00 00       	jmp    9f002f99 <.L3>

9f002d52 <.L10>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:49
            case 10://minflt
                procinfo->minorFaults=atoiI(token);
9f002d52:	83 ec 0c             	sub    esp,0xc
9f002d55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002d58:	e8 de d6 ff ff       	call   9f00043b <atoiI>
9f002d5d:	83 c4 10             	add    esp,0x10
9f002d60:	89 c2                	mov    edx,eax
9f002d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d65:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:50
                break;
9f002d68:	e9 2c 02 00 00       	jmp    9f002f99 <.L3>

9f002d6d <.L11>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:52
            case 11://majflt
                procinfo->majorFaults=atoiI(token);
9f002d6d:	83 ec 0c             	sub    esp,0xc
9f002d70:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002d73:	e8 c3 d6 ff ff       	call   9f00043b <atoiI>
9f002d78:	83 c4 10             	add    esp,0x10
9f002d7b:	89 c2                	mov    edx,eax
9f002d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d80:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:53
                break;
9f002d83:	e9 11 02 00 00       	jmp    9f002f99 <.L3>

9f002d88 <.L13>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:55
            case 17://priority
                if (strstrI(token,"-"))
9f002d88:	83 ec 08             	sub    esp,0x8
9f002d8b:	8d 83 84 fa ff ff    	lea    eax,[ebx-0x57c]
9f002d91:	50                   	push   eax
9f002d92:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002d95:	e8 50 26 00 00       	call   9f0053ea <strstrI>
9f002d9a:	83 c4 10             	add    esp,0x10
9f002d9d:	85 c0                	test   eax,eax
9f002d9f:	74 21                	je     9f002dc2 <.L13+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:56
                    procinfo->priority= -atoiI(token+1);
9f002da1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002da4:	83 c0 01             	add    eax,0x1
9f002da7:	83 ec 0c             	sub    esp,0xc
9f002daa:	50                   	push   eax
9f002dab:	e8 8b d6 ff ff       	call   9f00043b <atoiI>
9f002db0:	83 c4 10             	add    esp,0x10
9f002db3:	f7 d8                	neg    eax
9f002db5:	89 c2                	mov    edx,eax
9f002db7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002dba:	89 50 54             	mov    DWORD PTR [eax+0x54],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:59
                else
                    procinfo->priority=atoiI(token);
                break;
9f002dbd:	e9 d7 01 00 00       	jmp    9f002f99 <.L3>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:58
                break;
            case 17://priority
                if (strstrI(token,"-"))
                    procinfo->priority= -atoiI(token+1);
                else
                    procinfo->priority=atoiI(token);
9f002dc2:	83 ec 0c             	sub    esp,0xc
9f002dc5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002dc8:	e8 6e d6 ff ff       	call   9f00043b <atoiI>
9f002dcd:	83 c4 10             	add    esp,0x10
9f002dd0:	89 c2                	mov    edx,eax
9f002dd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002dd5:	89 50 54             	mov    DWORD PTR [eax+0x54],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:59
                break;
9f002dd8:	e9 bc 01 00 00       	jmp    9f002f99 <.L3>

9f002ddd <.L6>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:61
            case 2: //comm
                strreplaceI(token,"(","",name);
9f002ddd:	8d 45 84             	lea    eax,[ebp-0x7c]
9f002de0:	50                   	push   eax
9f002de1:	8d 83 86 fa ff ff    	lea    eax,[ebx-0x57a]
9f002de7:	50                   	push   eax
9f002de8:	8d 83 87 fa ff ff    	lea    eax,[ebx-0x579]
9f002dee:	50                   	push   eax
9f002def:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002df2:	e8 11 24 00 00       	call   9f005208 <strreplaceI>
9f002df7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:62
                strreplaceI(name,")","",name2);
9f002dfa:	8d 85 20 ff ff ff    	lea    eax,[ebp-0xe0]
9f002e00:	50                   	push   eax
9f002e01:	8d 83 86 fa ff ff    	lea    eax,[ebx-0x57a]
9f002e07:	50                   	push   eax
9f002e08:	8d 83 89 fa ff ff    	lea    eax,[ebx-0x577]
9f002e0e:	50                   	push   eax
9f002e0f:	8d 45 84             	lea    eax,[ebp-0x7c]
9f002e12:	50                   	push   eax
9f002e13:	e8 f0 23 00 00       	call   9f005208 <strreplaceI>
9f002e18:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:63
                sprintfI(name3,"%-10s",name2);
9f002e1b:	83 ec 04             	sub    esp,0x4
9f002e1e:	8d 85 20 ff ff ff    	lea    eax,[ebp-0xe0]
9f002e24:	50                   	push   eax
9f002e25:	8d 83 8b fa ff ff    	lea    eax,[ebx-0x575]
9f002e2b:	50                   	push   eax
9f002e2c:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
9f002e32:	50                   	push   eax
9f002e33:	e8 fd 19 00 00       	call   9f004835 <sprintfI>
9f002e38:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:64
                strncpyI((char*)procinfo->name,name3,9);
9f002e3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e3e:	8d 50 04             	lea    edx,[eax+0x4]
9f002e41:	83 ec 04             	sub    esp,0x4
9f002e44:	6a 09                	push   0x9
9f002e46:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
9f002e4c:	50                   	push   eax
9f002e4d:	52                   	push   edx
9f002e4e:	e8 35 1f 00 00       	call   9f004d88 <strncpyI>
9f002e53:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:65
                break;
9f002e56:	e9 3e 01 00 00       	jmp    9f002f99 <.L3>

9f002e5b <.L12>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:67
            case 13://ticks
                procinfo->ticks=atoiI(token);
9f002e5b:	83 ec 0c             	sub    esp,0xc
9f002e5e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002e61:	e8 d5 d5 ff ff       	call   9f00043b <atoiI>
9f002e66:	83 c4 10             	add    esp,0x10
9f002e69:	89 c2                	mov    edx,eax
9f002e6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e6e:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:68
                procinfo->totalTicks+=(procinfo->ticks - procinfo->lastTicks);
9f002e71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e74:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
9f002e77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e7a:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
9f002e7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e80:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
9f002e83:	29 c1                	sub    ecx,eax
9f002e85:	89 c8                	mov    eax,ecx
9f002e87:	01 c2                	add    edx,eax
9f002e89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e8c:	89 50 48             	mov    DWORD PTR [eax+0x48],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:69
                time_t runtime_secs=procinfo->totalTicks/TICKS_PER_SECOND;
9f002e8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e92:	8b 48 48             	mov    ecx,DWORD PTR [eax+0x48]
9f002e95:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002e9a:	89 c8                	mov    eax,ecx
9f002e9c:	f7 ea                	imul   edx
9f002e9e:	c1 fa 05             	sar    edx,0x5
9f002ea1:	89 c8                	mov    eax,ecx
9f002ea3:	c1 f8 1f             	sar    eax,0x1f
9f002ea6:	29 c2                	sub    edx,eax
9f002ea8:	89 d0                	mov    eax,edx
9f002eaa:	89 85 b8 fe ff ff    	mov    DWORD PTR [ebp-0x148],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:71
                
                memsetI(&tinfo,0,sizeof(struct tm));
9f002eb0:	83 ec 04             	sub    esp,0x4
9f002eb3:	6a 2c                	push   0x2c
9f002eb5:	6a 00                	push   0x0
9f002eb7:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
9f002ebd:	50                   	push   eax
9f002ebe:	e8 49 fc ff ff       	call   9f002b0c <memsetI>
9f002ec3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:72
                gmtime_rI((time_t*)&runtime_secs,&tinfo);
9f002ec6:	83 ec 08             	sub    esp,0x8
9f002ec9:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
9f002ecf:	50                   	push   eax
9f002ed0:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
9f002ed6:	50                   	push   eax
9f002ed7:	e8 e0 25 00 00       	call   9f0054bc <gmtime_rI>
9f002edc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:73
                memsetI(procinfo->time,0,40);
9f002edf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ee2:	83 c0 64             	add    eax,0x64
9f002ee5:	83 ec 04             	sub    esp,0x4
9f002ee8:	6a 28                	push   0x28
9f002eea:	6a 00                	push   0x0
9f002eec:	50                   	push   eax
9f002eed:	e8 1a fc ff ff       	call   9f002b0c <memsetI>
9f002ef2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:74
                sprintfI(procinfo->time,"%02i:%02i:%02i",tinfo.tm_hour,tinfo.tm_min,tinfo.tm_sec);
9f002ef5:	8b 8b a4 00 00 00    	mov    ecx,DWORD PTR [ebx+0xa4]
9f002efb:	8b 93 a8 00 00 00    	mov    edx,DWORD PTR [ebx+0xa8]
9f002f01:	8b 83 ac 00 00 00    	mov    eax,DWORD PTR [ebx+0xac]
9f002f07:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
9f002f0a:	83 c6 64             	add    esi,0x64
9f002f0d:	83 ec 0c             	sub    esp,0xc
9f002f10:	51                   	push   ecx
9f002f11:	52                   	push   edx
9f002f12:	50                   	push   eax
9f002f13:	8d 83 91 fa ff ff    	lea    eax,[ebx-0x56f]
9f002f19:	50                   	push   eax
9f002f1a:	56                   	push   esi
9f002f1b:	e8 15 19 00 00       	call   9f004835 <sprintfI>
9f002f20:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:75
                procinfo->cpu=(((double)procinfo->ticks-(double)procinfo->lastTicks)/(double)ticksPerUpdateInterval)*100;
9f002f23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f26:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
9f002f29:	89 85 b4 fe ff ff    	mov    DWORD PTR [ebp-0x14c],eax
9f002f2f:	db 85 b4 fe ff ff    	fild   DWORD PTR [ebp-0x14c]
9f002f35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f38:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
9f002f3b:	89 85 b4 fe ff ff    	mov    DWORD PTR [ebp-0x14c],eax
9f002f41:	db 85 b4 fe ff ff    	fild   DWORD PTR [ebp-0x14c]
9f002f47:	de e9                	fsubp  st(1),st
9f002f49:	db 45 10             	fild   DWORD PTR [ebp+0x10]
9f002f4c:	de f9                	fdivp  st(1),st
9f002f4e:	dd 83 1c fb ff ff    	fld    QWORD PTR [ebx-0x4e4]
9f002f54:	de c9                	fmulp  st(1),st
9f002f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f59:	dd 58 4c             	fstp   QWORD PTR [eax+0x4c]
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:76
                procinfo->lastTicks=procinfo->ticks;
9f002f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f5f:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
9f002f62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f65:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:79
                
//procinfo->cpu=(((double)procinfo->ticks-(double)procinfo->lastTicks)/(double)intervalTicks)*100;
                break;
9f002f68:	eb 2f                	jmp    9f002f99 <.L3>

9f002f6a <.L14>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:81
            case 22://vsize
                procinfo->virtualSize=atoiI(token);
9f002f6a:	83 ec 0c             	sub    esp,0xc
9f002f6d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002f70:	e8 c6 d4 ff ff       	call   9f00043b <atoiI>
9f002f75:	83 c4 10             	add    esp,0x10
9f002f78:	89 c2                	mov    edx,eax
9f002f7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f7d:	89 50 58             	mov    DWORD PTR [eax+0x58],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:82
                break;
9f002f80:	eb 17                	jmp    9f002f99 <.L3>

9f002f82 <.L15>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:84
            case 23://rss
                procinfo->memorySize=atoiI(token);
9f002f82:	83 ec 0c             	sub    esp,0xc
9f002f85:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002f88:	e8 ae d4 ff ff       	call   9f00043b <atoiI>
9f002f8d:	83 c4 10             	add    esp,0x10
9f002f90:	89 c2                	mov    edx,eax
9f002f92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f95:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:85
                break;
9f002f98:	90                   	nop

9f002f99 <.L3>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:87
        }
        tokenNumber++;
9f002f99:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:88
        token=strtokI(NULL,delim);
9f002f9d:	83 ec 08             	sub    esp,0x8
9f002fa0:	8d 45 e8             	lea    eax,[ebp-0x18]
9f002fa3:	50                   	push   eax
9f002fa4:	6a 00                	push   0x0
9f002fa6:	e8 71 d1 ff ff       	call   9f00011c <strtokI>
9f002fab:	83 c4 10             	add    esp,0x10
9f002fae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:30
    memsetI(name,0,100);
    memsetI(name2,0,100);
    memsetI(name3,0,100);
    
    token=strtokI(statinfo,delim);
    while (token)
9f002fb1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f002fb5:	0f 85 17 fd ff ff    	jne    9f002cd2 <buildProcInfoTI+0x86>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:90
                break;
        }
        tokenNumber++;
        token=strtokI(NULL,delim);
    }
    return procinfo;
9f002fbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:92
    
}
9f002fbe:	8d 65 f8             	lea    esp,[ebp-0x8]
9f002fc1:	5b                   	pop    ebx
9f002fc2:	5e                   	pop    esi
9f002fc3:	5d                   	pop    ebp
9f002fc4:	c3                   	ret    

9f002fc5 <buildProcInfoT>:
buildProcInfoT():
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:95

VISIBLE procInfo_t *buildProcInfoT(procInfo_t *procinfo, char *statinfo)
{
9f002fc5:	55                   	push   ebp
9f002fc6:	89 e5                	mov    ebp,esp
9f002fc8:	83 ec 08             	sub    esp,0x8
9f002fcb:	e8 b6 31 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f002fd0:	05 2c 62 00 00       	add    eax,0x622c
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:96
    return buildProcInfoTI(procinfo, statinfo, 0);
9f002fd5:	83 ec 04             	sub    esp,0x4
9f002fd8:	6a 00                	push   0x0
9f002fda:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002fdd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002fe0:	e8 67 fc ff ff       	call   9f002c4c <buildProcInfoTI>
9f002fe5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:97
}
9f002fe8:	c9                   	leave  
9f002fe9:	c3                   	ret    

9f002fea <buildAllProcInfoTs>:
buildAllProcInfoTs():
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:100

VISIBLE void buildAllProcInfoTs(procInfo_t **topinfo, int intervalTicks, int iteration, double* userCPU, double* kernelCPU)
{
9f002fea:	55                   	push   ebp
9f002feb:	89 e5                	mov    ebp,esp
9f002fed:	56                   	push   esi
9f002fee:	53                   	push   ebx
9f002fef:	81 ec b0 01 00 00    	sub    esp,0x1b0
9f002ff5:	e8 d6 31 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f002ffa:	81 c3 02 62 00 00    	add    ebx,0x6202
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:103
    static direntry_t *dirEntries;
    
    *userCPU = *kernelCPU = 0;
9f003000:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f003003:	d9 ee                	fldz   
9f003005:	dd 18                	fstp   QWORD PTR [eax]
9f003007:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f00300a:	dd 00                	fld    QWORD PTR [eax]
9f00300c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f00300f:	dd 18                	fstp   QWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:105
    
    if (!dirEntries)
9f003011:	8b 83 d0 00 00 00    	mov    eax,DWORD PTR [ebx+0xd0]
9f003017:	85 c0                	test   eax,eax
9f003019:	75 16                	jne    9f003031 <buildAllProcInfoTs+0x47>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:106
        dirEntries=mallocI(PROCINFO_MAX_PROCESSES*sizeof(direntry_t));
9f00301b:	83 ec 0c             	sub    esp,0xc
9f00301e:	68 00 17 01 00       	push   0x11700
9f003023:	e8 cd f4 ff ff       	call   9f0024f5 <mallocI>
9f003028:	83 c4 10             	add    esp,0x10
9f00302b:	89 83 d0 00 00 00    	mov    DWORD PTR [ebx+0xd0],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:109

    char path[128];
    int procCount=getdirI("/proc/",dirEntries,1024*100);
9f003031:	8b 83 d0 00 00 00    	mov    eax,DWORD PTR [ebx+0xd0]
9f003037:	83 ec 04             	sub    esp,0x4
9f00303a:	68 00 90 01 00       	push   0x19000
9f00303f:	50                   	push   eax
9f003040:	8d 83 00 fb ff ff    	lea    eax,[ebx-0x500]
9f003046:	50                   	push   eax
9f003047:	e8 1c da ff ff       	call   9f000a68 <getdirI>
9f00304c:	83 c4 10             	add    esp,0x10
9f00304f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:113
    char statBuffer[256];
    procInfo_t *currProc;

    for (int cnt=0;cnt<procCount;cnt++)
9f003052:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f003059:	e9 f0 01 00 00       	jmp    9f00324e <buildAllProcInfoTs+0x264>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:115
    {
        if (dirEntries[cnt].is_dir)
9f00305e:	8b 93 d0 00 00 00    	mov    edx,DWORD PTR [ebx+0xd0]
9f003064:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003067:	69 c0 17 01 00 00    	imul   eax,eax,0x117
9f00306d:	01 d0                	add    eax,edx
9f00306f:	0f b6 80 04 01 00 00 	movzx  eax,BYTE PTR [eax+0x104]
9f003076:	84 c0                	test   al,al
9f003078:	0f 84 cc 01 00 00    	je     9f00324a <buildAllProcInfoTs+0x260>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:117
        {
            strcpyI(path,"/proc/");
9f00307e:	83 ec 08             	sub    esp,0x8
9f003081:	8d 83 00 fb ff ff    	lea    eax,[ebx-0x500]
9f003087:	50                   	push   eax
9f003088:	8d 85 58 ff ff ff    	lea    eax,[ebp-0xa8]
9f00308e:	50                   	push   eax
9f00308f:	e8 6c 1a 00 00       	call   9f004b00 <strcpyI>
9f003094:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:118
            strcatI(path,dirEntries[cnt].filename);
9f003097:	8b 93 d0 00 00 00    	mov    edx,DWORD PTR [ebx+0xd0]
9f00309d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0030a0:	69 c0 17 01 00 00    	imul   eax,eax,0x117
9f0030a6:	01 d0                	add    eax,edx
9f0030a8:	83 ec 08             	sub    esp,0x8
9f0030ab:	50                   	push   eax
9f0030ac:	8d 85 58 ff ff ff    	lea    eax,[ebp-0xa8]
9f0030b2:	50                   	push   eax
9f0030b3:	e8 72 18 00 00       	call   9f00492a <strcatI>
9f0030b8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:119
            strcatI(path,"/stat");
9f0030bb:	83 ec 08             	sub    esp,0x8
9f0030be:	8d 83 07 fb ff ff    	lea    eax,[ebx-0x4f9]
9f0030c4:	50                   	push   eax
9f0030c5:	8d 85 58 ff ff ff    	lea    eax,[ebp-0xa8]
9f0030cb:	50                   	push   eax
9f0030cc:	e8 59 18 00 00       	call   9f00492a <strcatI>
9f0030d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:120
            if (strstrI(path,"self")!=NULL)
9f0030d4:	83 ec 08             	sub    esp,0x8
9f0030d7:	8d 83 0d fb ff ff    	lea    eax,[ebx-0x4f3]
9f0030dd:	50                   	push   eax
9f0030de:	8d 85 58 ff ff ff    	lea    eax,[ebp-0xa8]
9f0030e4:	50                   	push   eax
9f0030e5:	e8 00 23 00 00       	call   9f0053ea <strstrI>
9f0030ea:	83 c4 10             	add    esp,0x10
9f0030ed:	85 c0                	test   eax,eax
9f0030ef:	0f 85 54 01 00 00    	jne    9f003249 <buildAllProcInfoTs+0x25f>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:122
                continue;
            int *handle=openI(path,"r");
9f0030f5:	83 ec 08             	sub    esp,0x8
9f0030f8:	8d 83 12 fb ff ff    	lea    eax,[ebx-0x4ee]
9f0030fe:	50                   	push   eax
9f0030ff:	8d 85 58 ff ff ff    	lea    eax,[ebp-0xa8]
9f003105:	50                   	push   eax
9f003106:	e8 b4 d9 ff ff       	call   9f000abf <openI>
9f00310b:	83 c4 10             	add    esp,0x10
9f00310e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:123
            if (handle)
9f003111:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f003115:	0f 84 2f 01 00 00    	je     9f00324a <buildAllProcInfoTs+0x260>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:126
            {
                //CLR 11/06/2022 - Added return value ... if not > 0 then we didn't get any bytes
                int res = readI(handle,statBuffer,256,1);
9f00311b:	6a 01                	push   0x1
9f00311d:	68 00 01 00 00       	push   0x100
9f003122:	8d 85 58 fe ff ff    	lea    eax,[ebp-0x1a8]
9f003128:	50                   	push   eax
9f003129:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f00312c:	e8 13 db ff ff       	call   9f000c44 <readI>
9f003131:	83 c4 10             	add    esp,0x10
9f003134:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:127
                closeI(handle);
9f003137:	83 ec 0c             	sub    esp,0xc
9f00313a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f00313d:	e8 b8 da ff ff       	call   9f000bfa <closeI>
9f003142:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:129
                //buildTopInfo(statBuffer,topinfo);
                if (res > 0)
9f003145:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f003149:	0f 8e fb 00 00 00    	jle    9f00324a <buildAllProcInfoTs+0x260>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:131
                {
                    char *space=strstrI(statBuffer," ");
9f00314f:	83 ec 08             	sub    esp,0x8
9f003152:	8d 83 14 fb ff ff    	lea    eax,[ebx-0x4ec]
9f003158:	50                   	push   eax
9f003159:	8d 85 58 fe ff ff    	lea    eax,[ebp-0x1a8]
9f00315f:	50                   	push   eax
9f003160:	e8 85 22 00 00       	call   9f0053ea <strstrI>
9f003165:	83 c4 10             	add    esp,0x10
9f003168:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:133
                    char pid[8];
                    strncpyI(pid,statBuffer,space-statBuffer);
9f00316b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00316e:	8d 85 58 fe ff ff    	lea    eax,[ebp-0x1a8]
9f003174:	29 c2                	sub    edx,eax
9f003176:	89 d0                	mov    eax,edx
9f003178:	83 ec 04             	sub    esp,0x4
9f00317b:	50                   	push   eax
9f00317c:	8d 85 58 fe ff ff    	lea    eax,[ebp-0x1a8]
9f003182:	50                   	push   eax
9f003183:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
9f003189:	50                   	push   eax
9f00318a:	e8 f9 1b 00 00       	call   9f004d88 <strncpyI>
9f00318f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:134
                    int ipid=atoiI(pid);
9f003192:	83 ec 0c             	sub    esp,0xc
9f003195:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
9f00319b:	50                   	push   eax
9f00319c:	e8 9a d2 ff ff       	call   9f00043b <atoiI>
9f0031a1:	83 c4 10             	add    esp,0x10
9f0031a4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:135
                    if (topinfo[ipid]==NULL)
9f0031a7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f0031aa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0031b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0031b4:	01 d0                	add    eax,edx
9f0031b6:	8b 00                	mov    eax,DWORD PTR [eax]
9f0031b8:	85 c0                	test   eax,eax
9f0031ba:	75 22                	jne    9f0031de <buildAllProcInfoTs+0x1f4>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:136
                        topinfo[ipid]=mallocI(sizeof(procInfo_t));
9f0031bc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f0031bf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0031c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0031c9:	8d 34 02             	lea    esi,[edx+eax*1]
9f0031cc:	83 ec 0c             	sub    esp,0xc
9f0031cf:	68 8c 00 00 00       	push   0x8c
9f0031d4:	e8 1c f3 ff ff       	call   9f0024f5 <mallocI>
9f0031d9:	83 c4 10             	add    esp,0x10
9f0031dc:	89 06                	mov    DWORD PTR [esi],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:137
                    currProc=topinfo[ipid];
9f0031de:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f0031e1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0031e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0031eb:	01 d0                	add    eax,edx
9f0031ed:	8b 00                	mov    eax,DWORD PTR [eax]
9f0031ef:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:138
                    buildProcInfoTI(currProc, statBuffer, intervalTicks);
9f0031f2:	83 ec 04             	sub    esp,0x4
9f0031f5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0031f8:	8d 85 58 fe ff ff    	lea    eax,[ebp-0x1a8]
9f0031fe:	50                   	push   eax
9f0031ff:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f003202:	e8 45 fa ff ff       	call   9f002c4c <buildProcInfoTI>
9f003207:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:139
                    currProc->lastUpdateIteration=iteration;
9f00320a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00320d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f003210:	89 50 60             	mov    DWORD PTR [eax+0x60],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:140
                    uint32_t* ptr = strstrI(currProc->name,"idle");
9f003213:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f003216:	8d 50 04             	lea    edx,[eax+0x4]
9f003219:	83 ec 08             	sub    esp,0x8
9f00321c:	8d 83 16 fb ff ff    	lea    eax,[ebx-0x4ea]
9f003222:	50                   	push   eax
9f003223:	52                   	push   edx
9f003224:	e8 c1 21 00 00       	call   9f0053ea <strstrI>
9f003229:	83 c4 10             	add    esp,0x10
9f00322c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:141
                    if (ptr == NULL)
9f00322f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f003233:	75 15                	jne    9f00324a <buildAllProcInfoTs+0x260>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:142
                        *userCPU += currProc->cpu;
9f003235:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f003238:	dd 00                	fld    QWORD PTR [eax]
9f00323a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00323d:	dd 40 4c             	fld    QWORD PTR [eax+0x4c]
9f003240:	de c1                	faddp  st(1),st
9f003242:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f003245:	dd 18                	fstp   QWORD PTR [eax]
9f003247:	eb 01                	jmp    9f00324a <buildAllProcInfoTs+0x260>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:121
        {
            strcpyI(path,"/proc/");
            strcatI(path,dirEntries[cnt].filename);
            strcatI(path,"/stat");
            if (strstrI(path,"self")!=NULL)
                continue;
9f003249:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:113 (discriminator 2)
    char path[128];
    int procCount=getdirI("/proc/",dirEntries,1024*100);
    char statBuffer[256];
    procInfo_t *currProc;

    for (int cnt=0;cnt<procCount;cnt++)
9f00324a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:113 (discriminator 1)
9f00324e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003251:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f003254:	0f 8c 04 fe ff ff    	jl     9f00305e <buildAllProcInfoTs+0x74>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:149
            }
        }
    }
    //free(dirEntries); variable is static so it will exist until the program ends
    //at which time it will be free'd automagically
9f00325a:	90                   	nop
9f00325b:	8d 65 f8             	lea    esp,[ebp-0x8]
9f00325e:	5b                   	pop    ebx
9f00325f:	5e                   	pop    esi
9f003260:	5d                   	pop    ebp
9f003261:	c3                   	ret    
9f003262:	66 90                	xchg   ax,ax

9f003264 <modf>:
modf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:62
#define CVTBUFSIZE 512 //CLR 11/14/2022
static char *digits = "0123456789abcdefghijklmnopqrstuvwxyz";
static char *upper_digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

double modf(double inValue, double* inValue2)
{
9f003264:	55                   	push   ebp
9f003265:	89 e5                	mov    ebp,esp
9f003267:	53                   	push   ebx
9f003268:	83 ec 14             	sub    esp,0x14
9f00326b:	e8 16 2f 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f003270:	05 8c 5f 00 00       	add    eax,0x5f8c
9f003275:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003278:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f00327b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00327e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:63
  return modfasm(inValue, inValue2);
9f003281:	83 ec 04             	sub    esp,0x4
9f003284:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f003287:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f00328a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00328d:	89 c3                	mov    ebx,eax
9f00328f:	e8 1c 2f 00 00       	call   9f0061b0 <__x86.get_pc_thunk.ax+0x2a>
9f003294:	83 c4 10             	add    esp,0x10
9f003297:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f00329a:	db 45 ec             	fild   DWORD PTR [ebp-0x14]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:64
}
9f00329d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0032a0:	c9                   	leave  
9f0032a1:	c3                   	ret    

9f0032a2 <cvt>:
cvt():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:66

static char *cvt(double arg, int ndigits, int *decpt, int *sign, char *buf, int eflag) {
9f0032a2:	55                   	push   ebp
9f0032a3:	89 e5                	mov    ebp,esp
9f0032a5:	53                   	push   ebx
9f0032a6:	83 ec 34             	sub    esp,0x34
9f0032a9:	e8 22 2f 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f0032ae:	81 c3 4e 5f 00 00    	add    ebx,0x5f4e
9f0032b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0032b7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
9f0032ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0032bd:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:71
  int r2;
  double fi, fj;
  char *p, *p1;

  if (ndigits < 0) ndigits = 0;
9f0032c0:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0032c4:	79 07                	jns    9f0032cd <cvt+0x2b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:71 (discriminator 1)
9f0032c6:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:72
  if (ndigits >= CVTBUFSIZE - 1) ndigits = CVTBUFSIZE - 2;
9f0032cd:	81 7d 10 fe 01 00 00 	cmp    DWORD PTR [ebp+0x10],0x1fe
9f0032d4:	7e 07                	jle    9f0032dd <cvt+0x3b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:72 (discriminator 1)
9f0032d6:	c7 45 10 fe 01 00 00 	mov    DWORD PTR [ebp+0x10],0x1fe
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:73
  r2 = 0;
9f0032dd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:74
  *sign = 0;
9f0032e4:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f0032e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:75
  p = &buf[0];
9f0032ed:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0032f0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:76
  if (arg < 0) {
9f0032f3:	d9 ee                	fldz   
9f0032f5:	dd 45 d0             	fld    QWORD PTR [ebp-0x30]
9f0032f8:	d9 c9                	fxch   st(1)
9f0032fa:	df e9                	fucomip st,st(1)
9f0032fc:	dd d8                	fstp   st(0)
9f0032fe:	76 11                	jbe    9f003311 <cvt+0x6f>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:77
    *sign = 1;
9f003300:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f003303:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:78
    arg = -arg;
9f003309:	dd 45 d0             	fld    QWORD PTR [ebp-0x30]
9f00330c:	d9 e0                	fchs   
9f00330e:	dd 5d d0             	fstp   QWORD PTR [ebp-0x30]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:80
  }
  arg = modf(arg, &fi);
9f003311:	83 ec 04             	sub    esp,0x4
9f003314:	8d 45 e0             	lea    eax,[ebp-0x20]
9f003317:	50                   	push   eax
9f003318:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f00331b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
9f00331e:	e8 41 ff ff ff       	call   9f003264 <modf>
9f003323:	83 c4 10             	add    esp,0x10
9f003326:	dd 5d d0             	fstp   QWORD PTR [ebp-0x30]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
  p1 = &buf[CVTBUFSIZE];
9f003329:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00332c:	05 00 02 00 00       	add    eax,0x200
9f003331:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:83

  if (fi != 0) {
9f003334:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
9f003337:	d9 ee                	fldz   
9f003339:	df e9                	fucomip st,st(1)
9f00333b:	7a 0e                	jp     9f00334b <cvt+0xa9>
9f00333d:	d9 ee                	fldz   
9f00333f:	df e9                	fucomip st,st(1)
9f003341:	dd d8                	fstp   st(0)
9f003343:	0f 84 ae 00 00 00    	je     9f0033f7 <cvt+0x155>
9f003349:	eb 02                	jmp    9f00334d <cvt+0xab>
9f00334b:	dd d8                	fstp   st(0)
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:84
    p1 = &buf[CVTBUFSIZE];
9f00334d:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003350:	05 00 02 00 00       	add    eax,0x200
9f003355:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:85
    while (fi != 0) {
9f003358:	eb 64                	jmp    9f0033be <cvt+0x11c>
9f00335a:	dd d8                	fstp   st(0)
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:86
      fj = modf(fi / 10, &fi);
9f00335c:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
9f00335f:	dd 83 9c fc ff ff    	fld    QWORD PTR [ebx-0x364]
9f003365:	de f9                	fdivp  st(1),st
9f003367:	83 ec 04             	sub    esp,0x4
9f00336a:	8d 45 e0             	lea    eax,[ebp-0x20]
9f00336d:	50                   	push   eax
9f00336e:	8d 64 24 f8          	lea    esp,[esp-0x8]
9f003372:	dd 1c 24             	fstp   QWORD PTR [esp]
9f003375:	e8 ea fe ff ff       	call   9f003264 <modf>
9f00337a:	83 c4 10             	add    esp,0x10
9f00337d:	dd 5d d8             	fstp   QWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:87
      *--p1 = (int)((fj + .03) * 10) + '0';
9f003380:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
9f003384:	dd 45 d8             	fld    QWORD PTR [ebp-0x28]
9f003387:	dd 83 a4 fc ff ff    	fld    QWORD PTR [ebx-0x35c]
9f00338d:	de c1                	faddp  st(1),st
9f00338f:	dd 83 9c fc ff ff    	fld    QWORD PTR [ebx-0x364]
9f003395:	de c9                	fmulp  st(1),st
9f003397:	d9 7d ce             	fnstcw WORD PTR [ebp-0x32]
9f00339a:	0f b7 45 ce          	movzx  eax,WORD PTR [ebp-0x32]
9f00339e:	b4 0c                	mov    ah,0xc
9f0033a0:	66 89 45 cc          	mov    WORD PTR [ebp-0x34],ax
9f0033a4:	d9 6d cc             	fldcw  WORD PTR [ebp-0x34]
9f0033a7:	db 5d c8             	fistp  DWORD PTR [ebp-0x38]
9f0033aa:	d9 6d ce             	fldcw  WORD PTR [ebp-0x32]
9f0033ad:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
9f0033b0:	83 c0 30             	add    eax,0x30
9f0033b3:	89 c2                	mov    edx,eax
9f0033b5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0033b8:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:88
      r2++;
9f0033ba:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:85
  arg = modf(arg, &fi);
  p1 = &buf[CVTBUFSIZE];

  if (fi != 0) {
    p1 = &buf[CVTBUFSIZE];
    while (fi != 0) {
9f0033be:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
9f0033c1:	d9 ee                	fldz   
9f0033c3:	df e9                	fucomip st,st(1)
9f0033c5:	7a 93                	jp     9f00335a <cvt+0xb8>
9f0033c7:	d9 ee                	fldz   
9f0033c9:	df e9                	fucomip st,st(1)
9f0033cb:	dd d8                	fstp   st(0)
9f0033cd:	75 8d                	jne    9f00335c <cvt+0xba>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:90
      fj = modf(fi / 10, &fi);
      *--p1 = (int)((fj + .03) * 10) + '0';
      r2++;
    }
    while (p1 < &buf[CVTBUFSIZE]) *p++ = *p1++;
9f0033cf:	eb 17                	jmp    9f0033e8 <cvt+0x146>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:90 (discriminator 2)
9f0033d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0033d4:	8d 50 01             	lea    edx,[eax+0x1]
9f0033d7:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0033da:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0033dd:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0033e0:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
9f0033e3:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0033e6:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:90 (discriminator 1)
9f0033e8:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0033eb:	05 00 02 00 00       	add    eax,0x200
9f0033f0:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
9f0033f3:	77 dc                	ja     9f0033d1 <cvt+0x12f>
9f0033f5:	eb 32                	jmp    9f003429 <cvt+0x187>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:91
  } else if (arg > 0) {
9f0033f7:	dd 45 d0             	fld    QWORD PTR [ebp-0x30]
9f0033fa:	d9 ee                	fldz   
9f0033fc:	d9 c9                	fxch   st(1)
9f0033fe:	df e9                	fucomip st,st(1)
9f003400:	dd d8                	fstp   st(0)
9f003402:	76 25                	jbe    9f003429 <cvt+0x187>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:92
    while ((fj = arg * 10) < 1) {
9f003404:	eb 0a                	jmp    9f003410 <cvt+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:93
      arg = fj;
9f003406:	dd 45 d8             	fld    QWORD PTR [ebp-0x28]
9f003409:	dd 5d d0             	fstp   QWORD PTR [ebp-0x30]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
      r2--;
9f00340c:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:92
      *--p1 = (int)((fj + .03) * 10) + '0';
      r2++;
    }
    while (p1 < &buf[CVTBUFSIZE]) *p++ = *p1++;
  } else if (arg > 0) {
    while ((fj = arg * 10) < 1) {
9f003410:	dd 45 d0             	fld    QWORD PTR [ebp-0x30]
9f003413:	dd 83 9c fc ff ff    	fld    QWORD PTR [ebx-0x364]
9f003419:	de c9                	fmulp  st(1),st
9f00341b:	dd 5d d8             	fstp   QWORD PTR [ebp-0x28]
9f00341e:	dd 45 d8             	fld    QWORD PTR [ebp-0x28]
9f003421:	d9 e8                	fld1   
9f003423:	df e9                	fucomip st,st(1)
9f003425:	dd d8                	fstp   st(0)
9f003427:	77 dd                	ja     9f003406 <cvt+0x164>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:97
      arg = fj;
      r2--;
    }
  }
  p1 = &buf[ndigits];
9f003429:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f00342c:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00342f:	01 d0                	add    eax,edx
9f003431:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98
  if (eflag == 0) p1 += r2;
9f003434:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
9f003438:	75 06                	jne    9f003440 <cvt+0x19e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98 (discriminator 1)
9f00343a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00343d:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:99
  *decpt = r2;
9f003440:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f003443:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f003446:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
  if (p1 < &buf[0]) {
9f003448:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00344b:	3b 45 1c             	cmp    eax,DWORD PTR [ebp+0x1c]
9f00344e:	73 5e                	jae    9f0034ae <cvt+0x20c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:101
    buf[0] = '\0';
9f003450:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003453:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:102
    return buf;
9f003456:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003459:	e9 fc 00 00 00       	jmp    9f00355a <cvt+0x2b8>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:105
  }
  while (p <= p1 && p < &buf[CVTBUFSIZE]) {
    arg *= 10;
9f00345e:	dd 45 d0             	fld    QWORD PTR [ebp-0x30]
9f003461:	dd 83 9c fc ff ff    	fld    QWORD PTR [ebx-0x364]
9f003467:	de c9                	fmulp  st(1),st
9f003469:	dd 5d d0             	fstp   QWORD PTR [ebp-0x30]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:106
    arg = modf(arg, &fj);
9f00346c:	83 ec 04             	sub    esp,0x4
9f00346f:	8d 45 d8             	lea    eax,[ebp-0x28]
9f003472:	50                   	push   eax
9f003473:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f003476:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
9f003479:	e8 e6 fd ff ff       	call   9f003264 <modf>
9f00347e:	83 c4 10             	add    esp,0x10
9f003481:	dd 5d d0             	fstp   QWORD PTR [ebp-0x30]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:107
    *p++ = (int) fj + '0';
9f003484:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f003487:	8d 42 01             	lea    eax,[edx+0x1]
9f00348a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00348d:	dd 45 d8             	fld    QWORD PTR [ebp-0x28]
9f003490:	d9 7d ce             	fnstcw WORD PTR [ebp-0x32]
9f003493:	0f b7 45 ce          	movzx  eax,WORD PTR [ebp-0x32]
9f003497:	b4 0c                	mov    ah,0xc
9f003499:	66 89 45 cc          	mov    WORD PTR [ebp-0x34],ax
9f00349d:	d9 6d cc             	fldcw  WORD PTR [ebp-0x34]
9f0034a0:	db 5d c8             	fistp  DWORD PTR [ebp-0x38]
9f0034a3:	d9 6d ce             	fldcw  WORD PTR [ebp-0x32]
9f0034a6:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
9f0034a9:	83 c0 30             	add    eax,0x30
9f0034ac:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:104
  *decpt = r2;
  if (p1 < &buf[0]) {
    buf[0] = '\0';
    return buf;
  }
  while (p <= p1 && p < &buf[CVTBUFSIZE]) {
9f0034ae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0034b1:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
9f0034b4:	77 0d                	ja     9f0034c3 <cvt+0x221>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:104 (discriminator 1)
9f0034b6:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0034b9:	05 00 02 00 00       	add    eax,0x200
9f0034be:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0034c1:	77 9b                	ja     9f00345e <cvt+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:109
    arg *= 10;
    arg = modf(arg, &fj);
    *p++ = (int) fj + '0';
  }
  if (p1 >= &buf[CVTBUFSIZE]) {
9f0034c3:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0034c6:	05 00 02 00 00       	add    eax,0x200
9f0034cb:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
9f0034ce:	77 10                	ja     9f0034e0 <cvt+0x23e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:110
    buf[CVTBUFSIZE - 1] = '\0';
9f0034d0:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0034d3:	05 ff 01 00 00       	add    eax,0x1ff
9f0034d8:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:111
    return buf;
9f0034db:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0034de:	eb 7a                	jmp    9f00355a <cvt+0x2b8>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:113
  }
  p = p1;
9f0034e0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0034e3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:114
  *p1 += 5;
9f0034e6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0034e9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0034ec:	83 c0 05             	add    eax,0x5
9f0034ef:	89 c2                	mov    edx,eax
9f0034f1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0034f4:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:115
  while (*p1 > '9') {
9f0034f6:	eb 4f                	jmp    9f003547 <cvt+0x2a5>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:116
    *p1 = '0';
9f0034f8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0034fb:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:117
    if (p1 > buf) {
9f0034fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003501:	3b 45 1c             	cmp    eax,DWORD PTR [ebp+0x1c]
9f003504:	76 16                	jbe    9f00351c <cvt+0x27a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:118
      ++*--p1;
9f003506:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
9f00350a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00350d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003510:	83 c0 01             	add    eax,0x1
9f003513:	89 c2                	mov    edx,eax
9f003515:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003518:	88 10                	mov    BYTE PTR [eax],dl
9f00351a:	eb 2b                	jmp    9f003547 <cvt+0x2a5>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:120
    } else {
      *p1 = '1';
9f00351c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00351f:	c6 00 31             	mov    BYTE PTR [eax],0x31
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:121
      (*decpt)++;
9f003522:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f003525:	8b 00                	mov    eax,DWORD PTR [eax]
9f003527:	8d 50 01             	lea    edx,[eax+0x1]
9f00352a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f00352d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:122
      if (eflag == 0) {
9f00352f:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
9f003533:	75 12                	jne    9f003547 <cvt+0x2a5>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:123
        if (p > buf) *p = '0';
9f003535:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003538:	3b 45 1c             	cmp    eax,DWORD PTR [ebp+0x1c]
9f00353b:	76 06                	jbe    9f003543 <cvt+0x2a1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:123 (discriminator 1)
9f00353d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003540:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:124
        p++;
9f003543:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:115
    buf[CVTBUFSIZE - 1] = '\0';
    return buf;
  }
  p = p1;
  *p1 += 5;
  while (*p1 > '9') {
9f003547:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00354a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00354d:	3c 39                	cmp    al,0x39
9f00354f:	7f a7                	jg     9f0034f8 <cvt+0x256>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:128
        if (p > buf) *p = '0';
        p++;
      }
    }
  }
  *p = '\0';
9f003551:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003554:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:129
  return buf;
9f003557:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:130 (discriminator 1)
}
9f00355a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00355d:	c9                   	leave  
9f00355e:	c3                   	ret    

9f00355f <skip_atoi>:
skip_atoi():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:138
  const char *sc;
  for (sc = s; *sc != '\0' && count--; ++sc);
  return sc - s;
}
*/
static int skip_atoi(const char **s) {
9f00355f:	55                   	push   ebp
9f003560:	89 e5                	mov    ebp,esp
9f003562:	53                   	push   ebx
9f003563:	83 ec 10             	sub    esp,0x10
9f003566:	e8 1b 2c 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f00356b:	05 91 5c 00 00       	add    eax,0x5c91
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:139
  int i = 0;
9f003570:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:140
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
9f003577:	eb 29                	jmp    9f0035a2 <skip_atoi+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:140 (discriminator 3)
9f003579:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f00357c:	89 d0                	mov    eax,edx
9f00357e:	c1 e0 02             	shl    eax,0x2
9f003581:	01 d0                	add    eax,edx
9f003583:	01 c0                	add    eax,eax
9f003585:	89 c3                	mov    ebx,eax
9f003587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00358a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00358c:	8d 48 01             	lea    ecx,[eax+0x1]
9f00358f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003592:	89 0a                	mov    DWORD PTR [edx],ecx
9f003594:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003597:	0f be c0             	movsx  eax,al
9f00359a:	01 d8                	add    eax,ebx
9f00359c:	83 e8 30             	sub    eax,0x30
9f00359f:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:140 (discriminator 1)
9f0035a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035a5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0035a7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0035aa:	3c 2f                	cmp    al,0x2f
9f0035ac:	7e 0c                	jle    9f0035ba <skip_atoi+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:140 (discriminator 2)
9f0035ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035b1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0035b3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0035b6:	3c 39                	cmp    al,0x39
9f0035b8:	7e bf                	jle    9f003579 <skip_atoi+0x1a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:141
  return i;
9f0035ba:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:142
}
9f0035bd:	83 c4 10             	add    esp,0x10
9f0035c0:	5b                   	pop    ebx
9f0035c1:	5d                   	pop    ebp
9f0035c2:	c3                   	ret    

9f0035c3 <number>:
number():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:144

static char *number(char *str, long num, int base, int size, int precision, int type) {
9f0035c3:	55                   	push   ebp
9f0035c4:	89 e5                	mov    ebp,esp
9f0035c6:	56                   	push   esi
9f0035c7:	53                   	push   ebx
9f0035c8:	83 ec 50             	sub    esp,0x50
9f0035cb:	e8 04 2c 00 00       	call   9f0061d4 <__x86.get_pc_thunk.cx>
9f0035d0:	81 c1 2c 5c 00 00    	add    ecx,0x5c2c
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:146
  char c, sign, tmp[66];
  char *dig = digits;
9f0035d6:	8b 81 20 00 00 00    	mov    eax,DWORD PTR [ecx+0x20]
9f0035dc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:149
  int i;

  if (type & LARGE)  dig = upper_digits;
9f0035df:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0035e2:	83 e0 40             	and    eax,0x40
9f0035e5:	85 c0                	test   eax,eax
9f0035e7:	74 09                	je     9f0035f2 <number+0x2f>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:149 (discriminator 1)
9f0035e9:	8b 81 24 00 00 00    	mov    eax,DWORD PTR [ecx+0x24]
9f0035ef:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:150
  if (type & LEFT) type &= ~ZEROPAD;
9f0035f2:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0035f5:	83 e0 10             	and    eax,0x10
9f0035f8:	85 c0                	test   eax,eax
9f0035fa:	74 04                	je     9f003600 <number+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:150 (discriminator 1)
9f0035fc:	83 65 1c fe          	and    DWORD PTR [ebp+0x1c],0xfffffffe
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:151
  if (base < 2 || base > 36) return 0;
9f003600:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f003604:	7e 06                	jle    9f00360c <number+0x49>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:151 (discriminator 2)
9f003606:	83 7d 10 24          	cmp    DWORD PTR [ebp+0x10],0x24
9f00360a:	7e 0a                	jle    9f003616 <number+0x53>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:151 (discriminator 3)
9f00360c:	b8 00 00 00 00       	mov    eax,0x0
9f003611:	e9 ef 01 00 00       	jmp    9f003805 <number+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:153
  
  c = (type & ZEROPAD) ? '0' : ' ';
9f003616:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003619:	83 e0 01             	and    eax,0x1
9f00361c:	85 c0                	test   eax,eax
9f00361e:	74 07                	je     9f003627 <number+0x64>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:153 (discriminator 1)
9f003620:	b8 30 00 00 00       	mov    eax,0x30
9f003625:	eb 05                	jmp    9f00362c <number+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:153 (discriminator 2)
9f003627:	b8 20 00 00 00       	mov    eax,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:153 (discriminator 4)
9f00362c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:154 (discriminator 4)
  sign = 0;
9f00362f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:155 (discriminator 4)
  if (type & SIGN) {
9f003633:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003636:	83 e0 02             	and    eax,0x2
9f003639:	85 c0                	test   eax,eax
9f00363b:	74 39                	je     9f003676 <number+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:156
    if (num < 0) {
9f00363d:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f003641:	79 0d                	jns    9f003650 <number+0x8d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:157
      sign = '-';
9f003643:	c6 45 f7 2d          	mov    BYTE PTR [ebp-0x9],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:158
      num = -num;
9f003647:	f7 5d 0c             	neg    DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:159
      size--;
9f00364a:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f00364e:	eb 26                	jmp    9f003676 <number+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:160
    } else if (type & PLUS) {
9f003650:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003653:	83 e0 04             	and    eax,0x4
9f003656:	85 c0                	test   eax,eax
9f003658:	74 0a                	je     9f003664 <number+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:161
      sign = '+';
9f00365a:	c6 45 f7 2b          	mov    BYTE PTR [ebp-0x9],0x2b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:162
      size--;
9f00365e:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f003662:	eb 12                	jmp    9f003676 <number+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:163
    } else if (type & SPACE) {
9f003664:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003667:	83 e0 08             	and    eax,0x8
9f00366a:	85 c0                	test   eax,eax
9f00366c:	74 08                	je     9f003676 <number+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:164
      sign = ' ';
9f00366e:	c6 45 f7 20          	mov    BYTE PTR [ebp-0x9],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:165
      size--;
9f003672:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:169
    }
  }

  if (type & SPECIAL) {
9f003676:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003679:	83 e0 20             	and    eax,0x20
9f00367c:	85 c0                	test   eax,eax
9f00367e:	74 16                	je     9f003696 <number+0xd3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:170
    if (base == 16) {
9f003680:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f003684:	75 06                	jne    9f00368c <number+0xc9>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:171
      size -= 2;
9f003686:	83 6d 14 02          	sub    DWORD PTR [ebp+0x14],0x2
9f00368a:	eb 0a                	jmp    9f003696 <number+0xd3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:172
    } else if (base == 8) {
9f00368c:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f003690:	75 04                	jne    9f003696 <number+0xd3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:173
      size--;
9f003692:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:177
    }
  }

  i = 0;
9f003696:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:179

  if (num == 0) {
9f00369d:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f0036a1:	75 42                	jne    9f0036e5 <number+0x122>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:180
    tmp[i++] = '0';
9f0036a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0036a6:	8d 50 01             	lea    edx,[eax+0x1]
9f0036a9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
9f0036ac:	c6 44 05 a9 30       	mov    BYTE PTR [ebp+eax*1-0x57],0x30
9f0036b1:	eb 38                	jmp    9f0036eb <number+0x128>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:183
  } else {
    while (num != 0) {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
9f0036b3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
9f0036b6:	8d 43 01             	lea    eax,[ebx+0x1]
9f0036b9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f0036bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0036bf:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f0036c2:	ba 00 00 00 00       	mov    edx,0x0
9f0036c7:	f7 f6                	div    esi
9f0036c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0036cc:	01 d0                	add    eax,edx
9f0036ce:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0036d1:	88 44 1d a9          	mov    BYTE PTR [ebp+ebx*1-0x57],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:184
      num = ((unsigned long) num) / (unsigned) base;
9f0036d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0036d8:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f0036db:	ba 00 00 00 00       	mov    edx,0x0
9f0036e0:	f7 f6                	div    esi
9f0036e2:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:182
  i = 0;

  if (num == 0) {
    tmp[i++] = '0';
  } else {
    while (num != 0) {
9f0036e5:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f0036e9:	75 c8                	jne    9f0036b3 <number+0xf0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:188
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
9f0036eb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0036ee:	3b 45 18             	cmp    eax,DWORD PTR [ebp+0x18]
9f0036f1:	7e 06                	jle    9f0036f9 <number+0x136>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:188 (discriminator 1)
9f0036f3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0036f6:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
  size -= precision;
9f0036f9:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f0036fc:	29 45 14             	sub    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:190
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
9f0036ff:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003702:	83 e0 11             	and    eax,0x11
9f003705:	85 c0                	test   eax,eax
9f003707:	75 1b                	jne    9f003724 <number+0x161>
9f003709:	eb 0c                	jmp    9f003717 <number+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:190 (discriminator 2)
9f00370b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00370e:	8d 50 01             	lea    edx,[eax+0x1]
9f003711:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003714:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:190 (discriminator 1)
9f003717:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f00371a:	8d 50 ff             	lea    edx,[eax-0x1]
9f00371d:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f003720:	85 c0                	test   eax,eax
9f003722:	7f e7                	jg     9f00370b <number+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:191
  if (sign) *str++ = sign;
9f003724:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f003728:	74 0f                	je     9f003739 <number+0x176>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:191 (discriminator 1)
9f00372a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00372d:	8d 50 01             	lea    edx,[eax+0x1]
9f003730:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003733:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f003737:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:193
  
  if (type & SPECIAL) {
9f003739:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00373c:	83 e0 20             	and    eax,0x20
9f00373f:	85 c0                	test   eax,eax
9f003741:	74 3b                	je     9f00377e <number+0x1bb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:194
    if (base == 8) {
9f003743:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f003747:	75 0e                	jne    9f003757 <number+0x194>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:195
      *str++ = '0';
9f003749:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00374c:	8d 50 01             	lea    edx,[eax+0x1]
9f00374f:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003752:	c6 00 30             	mov    BYTE PTR [eax],0x30
9f003755:	eb 27                	jmp    9f00377e <number+0x1bb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:196
    } else if (base == 16) {
9f003757:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f00375b:	75 21                	jne    9f00377e <number+0x1bb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:197
      *str++ = '0';
9f00375d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003760:	8d 50 01             	lea    edx,[eax+0x1]
9f003763:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003766:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:198
      *str++ = digits[33];
9f003769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00376c:	8d 50 01             	lea    edx,[eax+0x1]
9f00376f:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003772:	8b 91 20 00 00 00    	mov    edx,DWORD PTR [ecx+0x20]
9f003778:	0f b6 52 21          	movzx  edx,BYTE PTR [edx+0x21]
9f00377c:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:202
    }
  }

  if (!(type & LEFT)) while (size-- > 0) *str++ = c;
9f00377e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003781:	83 e0 10             	and    eax,0x10
9f003784:	85 c0                	test   eax,eax
9f003786:	75 2c                	jne    9f0037b4 <number+0x1f1>
9f003788:	eb 0f                	jmp    9f003799 <number+0x1d6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:202 (discriminator 2)
9f00378a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00378d:	8d 50 01             	lea    edx,[eax+0x1]
9f003790:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003793:	0f b6 55 eb          	movzx  edx,BYTE PTR [ebp-0x15]
9f003797:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:202 (discriminator 1)
9f003799:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f00379c:	8d 50 ff             	lea    edx,[eax-0x1]
9f00379f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f0037a2:	85 c0                	test   eax,eax
9f0037a4:	7f e4                	jg     9f00378a <number+0x1c7>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:203
  while (i < precision--) *str++ = '0';
9f0037a6:	eb 0c                	jmp    9f0037b4 <number+0x1f1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:203 (discriminator 2)
9f0037a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037ab:	8d 50 01             	lea    edx,[eax+0x1]
9f0037ae:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0037b1:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:203 (discriminator 1)
9f0037b4:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f0037b7:	8d 50 ff             	lea    edx,[eax-0x1]
9f0037ba:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
9f0037bd:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
9f0037c0:	7f e6                	jg     9f0037a8 <number+0x1e5>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204
  while (i-- > 0) *str++ = tmp[i];
9f0037c2:	eb 16                	jmp    9f0037da <number+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204 (discriminator 2)
9f0037c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037c7:	8d 50 01             	lea    edx,[eax+0x1]
9f0037ca:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0037cd:	8d 4d a9             	lea    ecx,[ebp-0x57]
9f0037d0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0037d3:	01 ca                	add    edx,ecx
9f0037d5:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0037d8:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204 (discriminator 1)
9f0037da:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0037dd:	8d 50 ff             	lea    edx,[eax-0x1]
9f0037e0:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
9f0037e3:	85 c0                	test   eax,eax
9f0037e5:	7f dd                	jg     9f0037c4 <number+0x201>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:205
  while (size-- > 0) *str++ = ' ';
9f0037e7:	eb 0c                	jmp    9f0037f5 <number+0x232>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:205 (discriminator 2)
9f0037e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037ec:	8d 50 01             	lea    edx,[eax+0x1]
9f0037ef:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0037f2:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:205 (discriminator 1)
9f0037f5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f0037f8:	8d 50 ff             	lea    edx,[eax-0x1]
9f0037fb:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f0037fe:	85 c0                	test   eax,eax
9f003800:	7f e7                	jg     9f0037e9 <number+0x226>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:207

  return str;
9f003802:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:208 (discriminator 1)
}
9f003805:	83 c4 50             	add    esp,0x50
9f003808:	5b                   	pop    ebx
9f003809:	5e                   	pop    esi
9f00380a:	5d                   	pop    ebp
9f00380b:	c3                   	ret    

9f00380c <eaddr>:
eaddr():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:210

static char *eaddr(char *str, unsigned char *addr, int size, int precision, int type) {
9f00380c:	55                   	push   ebp
9f00380d:	89 e5                	mov    ebp,esp
9f00380f:	83 ec 30             	sub    esp,0x30
9f003812:	e8 6f 29 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f003817:	05 e5 59 00 00       	add    eax,0x59e5
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:212
  char tmp[24];
  char *dig = digits;
9f00381c:	8b 90 20 00 00 00    	mov    edx,DWORD PTR [eax+0x20]
9f003822:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:215
  int i, len;

  if (type & LARGE)  dig = upper_digits;
9f003825:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
9f003828:	83 e2 40             	and    edx,0x40
9f00382b:	85 d2                	test   edx,edx
9f00382d:	74 09                	je     9f003838 <eaddr+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:215 (discriminator 1)
9f00382f:	8b 80 24 00 00 00    	mov    eax,DWORD PTR [eax+0x24]
9f003835:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:216
  len = 0;
9f003838:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:217
  for (i = 0; i < 6; i++) {
9f00383f:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
9f003846:	eb 66                	jmp    9f0038ae <eaddr+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:218
    if (i != 0) tmp[len++] = ':';
9f003848:	83 7d f8 00          	cmp    DWORD PTR [ebp-0x8],0x0
9f00384c:	74 0e                	je     9f00385c <eaddr+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:218 (discriminator 1)
9f00384e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003851:	8d 50 01             	lea    edx,[eax+0x1]
9f003854:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003857:	c6 44 05 dc 3a       	mov    BYTE PTR [ebp+eax*1-0x24],0x3a
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:219 (discriminator 2)
    tmp[len++] = dig[addr[i] >> 4];
9f00385c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00385f:	8d 50 01             	lea    edx,[eax+0x1]
9f003862:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003865:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
9f003868:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00386b:	01 ca                	add    edx,ecx
9f00386d:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003870:	c0 ea 04             	shr    dl,0x4
9f003873:	0f b6 ca             	movzx  ecx,dl
9f003876:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f003879:	01 ca                	add    edx,ecx
9f00387b:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f00387e:	88 54 05 dc          	mov    BYTE PTR [ebp+eax*1-0x24],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:220 (discriminator 2)
    tmp[len++] = dig[addr[i] & 0x0F];
9f003882:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003885:	8d 50 01             	lea    edx,[eax+0x1]
9f003888:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00388b:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
9f00388e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003891:	01 ca                	add    edx,ecx
9f003893:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003896:	0f b6 d2             	movzx  edx,dl
9f003899:	89 d1                	mov    ecx,edx
9f00389b:	83 e1 0f             	and    ecx,0xf
9f00389e:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0038a1:	01 ca                	add    edx,ecx
9f0038a3:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0038a6:	88 54 05 dc          	mov    BYTE PTR [ebp+eax*1-0x24],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:217 (discriminator 2)
  char *dig = digits;
  int i, len;

  if (type & LARGE)  dig = upper_digits;
  len = 0;
  for (i = 0; i < 6; i++) {
9f0038aa:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:217 (discriminator 1)
9f0038ae:	83 7d f8 05          	cmp    DWORD PTR [ebp-0x8],0x5
9f0038b2:	7e 94                	jle    9f003848 <eaddr+0x3c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:223
    if (i != 0) tmp[len++] = ':';
    tmp[len++] = dig[addr[i] >> 4];
    tmp[len++] = dig[addr[i] & 0x0F];
  }

  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
9f0038b4:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f0038b7:	83 e0 10             	and    eax,0x10
9f0038ba:	85 c0                	test   eax,eax
9f0038bc:	75 1c                	jne    9f0038da <eaddr+0xce>
9f0038be:	eb 0c                	jmp    9f0038cc <eaddr+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:223 (discriminator 2)
9f0038c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0038c3:	8d 50 01             	lea    edx,[eax+0x1]
9f0038c6:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0038c9:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:223 (discriminator 1)
9f0038cc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0038cf:	8d 50 ff             	lea    edx,[eax-0x1]
9f0038d2:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0038d5:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0038d8:	7f e6                	jg     9f0038c0 <eaddr+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:224
  for (i = 0; i < len; ++i) *str++ = tmp[i];
9f0038da:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
9f0038e1:	eb 1a                	jmp    9f0038fd <eaddr+0xf1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:224 (discriminator 3)
9f0038e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0038e6:	8d 50 01             	lea    edx,[eax+0x1]
9f0038e9:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0038ec:	8d 4d dc             	lea    ecx,[ebp-0x24]
9f0038ef:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0038f2:	01 ca                	add    edx,ecx
9f0038f4:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0038f7:	88 10                	mov    BYTE PTR [eax],dl
9f0038f9:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:224 (discriminator 1)
9f0038fd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f003900:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f003903:	7c de                	jl     9f0038e3 <eaddr+0xd7>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:225
  while (len < size--) *str++ = ' ';
9f003905:	eb 0c                	jmp    9f003913 <eaddr+0x107>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:225 (discriminator 2)
9f003907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00390a:	8d 50 01             	lea    edx,[eax+0x1]
9f00390d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003910:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:225 (discriminator 1)
9f003913:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003916:	8d 50 ff             	lea    edx,[eax-0x1]
9f003919:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00391c:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f00391f:	7f e6                	jg     9f003907 <eaddr+0xfb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:227

  return str;
9f003921:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:228
}
9f003924:	c9                   	leave  
9f003925:	c3                   	ret    

9f003926 <iaddr>:
iaddr():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:230

static char *iaddr(char *str, unsigned char *addr, int size, int precision, int type) {
9f003926:	55                   	push   ebp
9f003927:	89 e5                	mov    ebp,esp
9f003929:	57                   	push   edi
9f00392a:	56                   	push   esi
9f00392b:	53                   	push   ebx
9f00392c:	83 ec 30             	sub    esp,0x30
9f00392f:	e8 a0 28 00 00       	call   9f0061d4 <__x86.get_pc_thunk.cx>
9f003934:	81 c1 c8 58 00 00    	add    ecx,0x58c8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:234
  char tmp[24];
  int i, n, len;

  len = 0;
9f00393a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:235
  for (i = 0; i < 4; i++) {
9f003941:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f003948:	e9 75 01 00 00       	jmp    9f003ac2 <iaddr+0x19c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:236
    if (i != 0) tmp[len++] = '.';
9f00394d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f003951:	74 0e                	je     9f003961 <iaddr+0x3b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:236 (discriminator 1)
9f003953:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f003956:	8d 50 01             	lea    edx,[eax+0x1]
9f003959:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f00395c:	c6 44 05 d0 2e       	mov    BYTE PTR [ebp+eax*1-0x30],0x2e
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:237
    n = addr[i];
9f003961:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f003964:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003967:	01 d0                	add    eax,edx
9f003969:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00396c:	0f b6 c0             	movzx  eax,al
9f00396f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:239
    
    if (n == 0) {
9f003972:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f003976:	75 1b                	jne    9f003993 <iaddr+0x6d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:240
      tmp[len++] = digits[0];
9f003978:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00397b:	8d 50 01             	lea    edx,[eax+0x1]
9f00397e:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f003981:	8b 91 20 00 00 00    	mov    edx,DWORD PTR [ecx+0x20]
9f003987:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f00398a:	88 54 05 d0          	mov    BYTE PTR [ebp+eax*1-0x30],dl
9f00398e:	e9 2b 01 00 00       	jmp    9f003abe <iaddr+0x198>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:242
    } else {
      if (n >= 100) {
9f003993:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
9f003997:	0f 8e aa 00 00 00    	jle    9f003a47 <iaddr+0x121>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:243
        tmp[len++] = digits[n / 100];
9f00399d:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
9f0039a0:	8d 43 01             	lea    eax,[ebx+0x1]
9f0039a3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f0039a6:	8b b9 20 00 00 00    	mov    edi,DWORD PTR [ecx+0x20]
9f0039ac:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
9f0039af:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0039b4:	89 f0                	mov    eax,esi
9f0039b6:	f7 ea                	imul   edx
9f0039b8:	c1 fa 05             	sar    edx,0x5
9f0039bb:	89 f0                	mov    eax,esi
9f0039bd:	c1 f8 1f             	sar    eax,0x1f
9f0039c0:	29 c2                	sub    edx,eax
9f0039c2:	89 d0                	mov    eax,edx
9f0039c4:	01 f8                	add    eax,edi
9f0039c6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0039c9:	88 44 1d d0          	mov    BYTE PTR [ebp+ebx*1-0x30],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:244
        n = n % 100;
9f0039cd:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
9f0039d0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0039d5:	89 d8                	mov    eax,ebx
9f0039d7:	f7 ea                	imul   edx
9f0039d9:	c1 fa 05             	sar    edx,0x5
9f0039dc:	89 d8                	mov    eax,ebx
9f0039de:	c1 f8 1f             	sar    eax,0x1f
9f0039e1:	29 c2                	sub    edx,eax
9f0039e3:	89 d0                	mov    eax,edx
9f0039e5:	6b c0 64             	imul   eax,eax,0x64
9f0039e8:	29 c3                	sub    ebx,eax
9f0039ea:	89 d8                	mov    eax,ebx
9f0039ec:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:245
        tmp[len++] = digits[n / 10];
9f0039ef:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
9f0039f2:	8d 43 01             	lea    eax,[ebx+0x1]
9f0039f5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f0039f8:	8b b9 20 00 00 00    	mov    edi,DWORD PTR [ecx+0x20]
9f0039fe:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
9f003a01:	ba 67 66 66 66       	mov    edx,0x66666667
9f003a06:	89 f0                	mov    eax,esi
9f003a08:	f7 ea                	imul   edx
9f003a0a:	c1 fa 02             	sar    edx,0x2
9f003a0d:	89 f0                	mov    eax,esi
9f003a0f:	c1 f8 1f             	sar    eax,0x1f
9f003a12:	29 c2                	sub    edx,eax
9f003a14:	89 d0                	mov    eax,edx
9f003a16:	01 f8                	add    eax,edi
9f003a18:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003a1b:	88 44 1d d0          	mov    BYTE PTR [ebp+ebx*1-0x30],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:246
        n = n % 10;
9f003a1f:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
9f003a22:	ba 67 66 66 66       	mov    edx,0x66666667
9f003a27:	89 d8                	mov    eax,ebx
9f003a29:	f7 ea                	imul   edx
9f003a2b:	c1 fa 02             	sar    edx,0x2
9f003a2e:	89 d8                	mov    eax,ebx
9f003a30:	c1 f8 1f             	sar    eax,0x1f
9f003a33:	29 c2                	sub    edx,eax
9f003a35:	89 d0                	mov    eax,edx
9f003a37:	c1 e0 02             	shl    eax,0x2
9f003a3a:	01 d0                	add    eax,edx
9f003a3c:	01 c0                	add    eax,eax
9f003a3e:	29 c3                	sub    ebx,eax
9f003a40:	89 d8                	mov    eax,ebx
9f003a42:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f003a45:	eb 5c                	jmp    9f003aa3 <iaddr+0x17d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:247
      } else if (n >= 10) {
9f003a47:	83 7d ec 09          	cmp    DWORD PTR [ebp-0x14],0x9
9f003a4b:	7e 56                	jle    9f003aa3 <iaddr+0x17d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:248
        tmp[len++] = digits[n / 10];
9f003a4d:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
9f003a50:	8d 43 01             	lea    eax,[ebx+0x1]
9f003a53:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f003a56:	8b b9 20 00 00 00    	mov    edi,DWORD PTR [ecx+0x20]
9f003a5c:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
9f003a5f:	ba 67 66 66 66       	mov    edx,0x66666667
9f003a64:	89 f0                	mov    eax,esi
9f003a66:	f7 ea                	imul   edx
9f003a68:	c1 fa 02             	sar    edx,0x2
9f003a6b:	89 f0                	mov    eax,esi
9f003a6d:	c1 f8 1f             	sar    eax,0x1f
9f003a70:	29 c2                	sub    edx,eax
9f003a72:	89 d0                	mov    eax,edx
9f003a74:	01 f8                	add    eax,edi
9f003a76:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003a79:	88 44 1d d0          	mov    BYTE PTR [ebp+ebx*1-0x30],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:249
        n = n % 10;
9f003a7d:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
9f003a80:	ba 67 66 66 66       	mov    edx,0x66666667
9f003a85:	89 d8                	mov    eax,ebx
9f003a87:	f7 ea                	imul   edx
9f003a89:	c1 fa 02             	sar    edx,0x2
9f003a8c:	89 d8                	mov    eax,ebx
9f003a8e:	c1 f8 1f             	sar    eax,0x1f
9f003a91:	29 c2                	sub    edx,eax
9f003a93:	89 d0                	mov    eax,edx
9f003a95:	c1 e0 02             	shl    eax,0x2
9f003a98:	01 d0                	add    eax,edx
9f003a9a:	01 c0                	add    eax,eax
9f003a9c:	29 c3                	sub    ebx,eax
9f003a9e:	89 d8                	mov    eax,ebx
9f003aa0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:252
      }

      tmp[len++] = digits[n];
9f003aa3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f003aa6:	8d 50 01             	lea    edx,[eax+0x1]
9f003aa9:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f003aac:	8b 99 20 00 00 00    	mov    ebx,DWORD PTR [ecx+0x20]
9f003ab2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f003ab5:	01 da                	add    edx,ebx
9f003ab7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003aba:	88 54 05 d0          	mov    BYTE PTR [ebp+eax*1-0x30],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:235 (discriminator 2)
static char *iaddr(char *str, unsigned char *addr, int size, int precision, int type) {
  char tmp[24];
  int i, n, len;

  len = 0;
  for (i = 0; i < 4; i++) {
9f003abe:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:235 (discriminator 1)
9f003ac2:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
9f003ac6:	0f 8e 81 fe ff ff    	jle    9f00394d <iaddr+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:256

      tmp[len++] = digits[n];
    }
  }

  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
9f003acc:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f003acf:	83 e0 10             	and    eax,0x10
9f003ad2:	85 c0                	test   eax,eax
9f003ad4:	75 1c                	jne    9f003af2 <iaddr+0x1cc>
9f003ad6:	eb 0c                	jmp    9f003ae4 <iaddr+0x1be>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:256 (discriminator 2)
9f003ad8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003adb:	8d 50 01             	lea    edx,[eax+0x1]
9f003ade:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003ae1:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:256 (discriminator 1)
9f003ae4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003ae7:	8d 50 ff             	lea    edx,[eax-0x1]
9f003aea:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003aed:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f003af0:	7f e6                	jg     9f003ad8 <iaddr+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:257
  for (i = 0; i < len; ++i) *str++ = tmp[i];
9f003af2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f003af9:	eb 1a                	jmp    9f003b15 <iaddr+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:257 (discriminator 3)
9f003afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003afe:	8d 50 01             	lea    edx,[eax+0x1]
9f003b01:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003b04:	8d 4d d0             	lea    ecx,[ebp-0x30]
9f003b07:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f003b0a:	01 ca                	add    edx,ecx
9f003b0c:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003b0f:	88 10                	mov    BYTE PTR [eax],dl
9f003b11:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:257 (discriminator 1)
9f003b15:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003b18:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f003b1b:	7c de                	jl     9f003afb <iaddr+0x1d5>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:258
  while (len < size--) *str++ = ' ';
9f003b1d:	eb 0c                	jmp    9f003b2b <iaddr+0x205>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:258 (discriminator 2)
9f003b1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b22:	8d 50 01             	lea    edx,[eax+0x1]
9f003b25:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003b28:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:258 (discriminator 1)
9f003b2b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003b2e:	8d 50 ff             	lea    edx,[eax-0x1]
9f003b31:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003b34:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f003b37:	7f e6                	jg     9f003b1f <iaddr+0x1f9>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:260

  return str;
9f003b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:261
}
9f003b3c:	83 c4 30             	add    esp,0x30
9f003b3f:	5b                   	pop    ebx
9f003b40:	5e                   	pop    esi
9f003b41:	5f                   	pop    edi
9f003b42:	5d                   	pop    ebp
9f003b43:	c3                   	ret    

9f003b44 <cfltcvt>:
cfltcvt():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:268
#ifndef NOFLOAT

char *ecvtbuf(double arg, int ndigits, int *decpt, int *sign, char *buf);
char *fcvtbuf(double arg, int ndigits, int *decpt, int *sign, char *buf);

static void cfltcvt(double value, char *buffer, char fmt, int precision) {
9f003b44:	55                   	push   ebp
9f003b45:	89 e5                	mov    ebp,esp
9f003b47:	53                   	push   ebx
9f003b48:	81 ec 34 02 00 00    	sub    esp,0x234
9f003b4e:	e8 7d 26 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f003b53:	81 c3 a9 56 00 00    	add    ebx,0x56a9
9f003b59:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f003b5c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003b5f:	89 95 d0 fd ff ff    	mov    DWORD PTR [ebp-0x230],edx
9f003b65:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003b68:	89 95 d4 fd ff ff    	mov    DWORD PTR [ebp-0x22c],edx
9f003b6e:	88 85 cc fd ff ff    	mov    BYTE PTR [ebp-0x234],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:270
  int decpt, sign, exp, pos;
  char *digits = NULL;
9f003b74:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:272
  char cvtbuf[512];
  int capexp = 0;
9f003b7b:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:275
  int magnitude;

  if (fmt == 'G' || fmt == 'E') {
9f003b82:	80 bd cc fd ff ff 47 	cmp    BYTE PTR [ebp-0x234],0x47
9f003b89:	74 09                	je     9f003b94 <cfltcvt+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:275 (discriminator 1)
9f003b8b:	80 bd cc fd ff ff 45 	cmp    BYTE PTR [ebp-0x234],0x45
9f003b92:	75 17                	jne    9f003bab <cfltcvt+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:276
    capexp = 1;
9f003b94:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:277
    fmt += 'a' - 'A';
9f003b9b:	0f b6 85 cc fd ff ff 	movzx  eax,BYTE PTR [ebp-0x234]
9f003ba2:	83 c0 20             	add    eax,0x20
9f003ba5:	88 85 cc fd ff ff    	mov    BYTE PTR [ebp-0x234],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:280
  }

  if (fmt == 'g') {
9f003bab:	80 bd cc fd ff ff 67 	cmp    BYTE PTR [ebp-0x234],0x67
9f003bb2:	75 60                	jne    9f003c14 <cfltcvt+0xd0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:281
    digits = ecvtbuf(value, precision, &decpt, &sign, cvtbuf);
9f003bb4:	83 ec 08             	sub    esp,0x8
9f003bb7:	8d 85 dc fd ff ff    	lea    eax,[ebp-0x224]
9f003bbd:	50                   	push   eax
9f003bbe:	8d 45 dc             	lea    eax,[ebp-0x24]
9f003bc1:	50                   	push   eax
9f003bc2:	8d 45 e0             	lea    eax,[ebp-0x20]
9f003bc5:	50                   	push   eax
9f003bc6:	ff 75 18             	push   DWORD PTR [ebp+0x18]
9f003bc9:	ff b5 d4 fd ff ff    	push   DWORD PTR [ebp-0x22c]
9f003bcf:	ff b5 d0 fd ff ff    	push   DWORD PTR [ebp-0x230]
9f003bd5:	e8 1e 0c 00 00       	call   9f0047f8 <ecvtbuf>
9f003bda:	83 c4 20             	add    esp,0x20
9f003bdd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:282
    magnitude = decpt - 1;
9f003be0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003be3:	83 e8 01             	sub    eax,0x1
9f003be6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:283
    if (magnitude < -4  ||  magnitude > precision - 1) {
9f003be9:	83 7d e4 fc          	cmp    DWORD PTR [ebp-0x1c],0xfffffffc
9f003bed:	7c 0b                	jl     9f003bfa <cfltcvt+0xb6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:283 (discriminator 1)
9f003bef:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f003bf2:	83 e8 01             	sub    eax,0x1
9f003bf5:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
9f003bf8:	7d 0d                	jge    9f003c07 <cfltcvt+0xc3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:284
      fmt = 'e';
9f003bfa:	c6 85 cc fd ff ff 65 	mov    BYTE PTR [ebp-0x234],0x65
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:285
      precision -= 1;
9f003c01:	83 6d 18 01          	sub    DWORD PTR [ebp+0x18],0x1
9f003c05:	eb 0d                	jmp    9f003c14 <cfltcvt+0xd0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:287
    } else {
      fmt = 'f';
9f003c07:	c6 85 cc fd ff ff 66 	mov    BYTE PTR [ebp-0x234],0x66
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:288
      precision -= decpt;
9f003c0e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003c11:	29 45 18             	sub    DWORD PTR [ebp+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:292
    }
  }

  if (fmt == 'e') {
9f003c14:	80 bd cc fd ff ff 65 	cmp    BYTE PTR [ebp-0x234],0x65
9f003c1b:	0f 85 d1 01 00 00    	jne    9f003df2 <cfltcvt+0x2ae>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:293
    digits = ecvtbuf(value, precision + 1, &decpt, &sign, cvtbuf);
9f003c21:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f003c24:	8d 50 01             	lea    edx,[eax+0x1]
9f003c27:	83 ec 08             	sub    esp,0x8
9f003c2a:	8d 85 dc fd ff ff    	lea    eax,[ebp-0x224]
9f003c30:	50                   	push   eax
9f003c31:	8d 45 dc             	lea    eax,[ebp-0x24]
9f003c34:	50                   	push   eax
9f003c35:	8d 45 e0             	lea    eax,[ebp-0x20]
9f003c38:	50                   	push   eax
9f003c39:	52                   	push   edx
9f003c3a:	ff b5 d4 fd ff ff    	push   DWORD PTR [ebp-0x22c]
9f003c40:	ff b5 d0 fd ff ff    	push   DWORD PTR [ebp-0x230]
9f003c46:	e8 ad 0b 00 00       	call   9f0047f8 <ecvtbuf>
9f003c4b:	83 c4 20             	add    esp,0x20
9f003c4e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:295

    if (sign) *buffer++ = '-';
9f003c51:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f003c54:	85 c0                	test   eax,eax
9f003c56:	74 0c                	je     9f003c64 <cfltcvt+0x120>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:295 (discriminator 1)
9f003c58:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003c5b:	8d 50 01             	lea    edx,[eax+0x1]
9f003c5e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003c61:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:296
    *buffer++ = *digits;
9f003c64:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003c67:	8d 50 01             	lea    edx,[eax+0x1]
9f003c6a:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003c6d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f003c70:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003c73:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:297
    if (precision > 0) *buffer++ = '.';
9f003c75:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
9f003c79:	7e 0c                	jle    9f003c87 <cfltcvt+0x143>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:297 (discriminator 1)
9f003c7b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003c7e:	8d 50 01             	lea    edx,[eax+0x1]
9f003c81:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003c84:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:298
    memcpy(buffer, digits + 1, precision);
9f003c87:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f003c8a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f003c8d:	83 c2 01             	add    edx,0x1
9f003c90:	83 ec 04             	sub    esp,0x4
9f003c93:	50                   	push   eax
9f003c94:	52                   	push   edx
9f003c95:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f003c98:	e8 03 25 00 00       	call   9f0061a0 <__x86.get_pc_thunk.ax+0x1a>
9f003c9d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:299
    buffer += precision;
9f003ca0:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f003ca3:	01 45 10             	add    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:300
    *buffer++ = capexp ? 'E' : 'e';
9f003ca6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003ca9:	8d 50 01             	lea    edx,[eax+0x1]
9f003cac:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003caf:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f003cb3:	74 07                	je     9f003cbc <cfltcvt+0x178>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:300 (discriminator 1)
9f003cb5:	ba 45 00 00 00       	mov    edx,0x45
9f003cba:	eb 05                	jmp    9f003cc1 <cfltcvt+0x17d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:300 (discriminator 2)
9f003cbc:	ba 65 00 00 00       	mov    edx,0x65
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:300 (discriminator 4)
9f003cc1:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:302 (discriminator 4)

    if (decpt == 0) {
9f003cc3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003cc6:	85 c0                	test   eax,eax
9f003cc8:	75 2e                	jne    9f003cf8 <cfltcvt+0x1b4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:303
      if (value == 0.0) {
9f003cca:	dd 85 d0 fd ff ff    	fld    QWORD PTR [ebp-0x230]
9f003cd0:	d9 ee                	fldz   
9f003cd2:	df e9                	fucomip st,st(1)
9f003cd4:	dd d8                	fstp   st(0)
9f003cd6:	7a 17                	jp     9f003cef <cfltcvt+0x1ab>
9f003cd8:	dd 85 d0 fd ff ff    	fld    QWORD PTR [ebp-0x230]
9f003cde:	d9 ee                	fldz   
9f003ce0:	df e9                	fucomip st,st(1)
9f003ce2:	dd d8                	fstp   st(0)
9f003ce4:	75 09                	jne    9f003cef <cfltcvt+0x1ab>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:304
        exp = 0;
9f003ce6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f003ced:	eb 12                	jmp    9f003d01 <cfltcvt+0x1bd>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:306
      } else {
        exp = -1;
9f003cef:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
9f003cf6:	eb 09                	jmp    9f003d01 <cfltcvt+0x1bd>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:309
      }
    } else {
      exp = decpt - 1;
9f003cf8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003cfb:	83 e8 01             	sub    eax,0x1
9f003cfe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:312
    }

    if (exp < 0) {
9f003d01:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f003d05:	79 11                	jns    9f003d18 <cfltcvt+0x1d4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:313
      *buffer++ = '-';
9f003d07:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003d0a:	8d 50 01             	lea    edx,[eax+0x1]
9f003d0d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003d10:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:314
      exp = -exp;
9f003d13:	f7 5d f4             	neg    DWORD PTR [ebp-0xc]
9f003d16:	eb 0c                	jmp    9f003d24 <cfltcvt+0x1e0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:316
    } else {
      *buffer++ = '+';
9f003d18:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003d1b:	8d 50 01             	lea    edx,[eax+0x1]
9f003d1e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003d21:	c6 00 2b             	mov    BYTE PTR [eax],0x2b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:319
    }

    buffer[2] = (exp % 10) + '0';
9f003d24:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003d27:	8d 58 02             	lea    ebx,[eax+0x2]
9f003d2a:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003d2d:	ba 67 66 66 66       	mov    edx,0x66666667
9f003d32:	89 c8                	mov    eax,ecx
9f003d34:	f7 ea                	imul   edx
9f003d36:	c1 fa 02             	sar    edx,0x2
9f003d39:	89 c8                	mov    eax,ecx
9f003d3b:	c1 f8 1f             	sar    eax,0x1f
9f003d3e:	29 c2                	sub    edx,eax
9f003d40:	89 d0                	mov    eax,edx
9f003d42:	c1 e0 02             	shl    eax,0x2
9f003d45:	01 d0                	add    eax,edx
9f003d47:	01 c0                	add    eax,eax
9f003d49:	29 c1                	sub    ecx,eax
9f003d4b:	89 ca                	mov    edx,ecx
9f003d4d:	89 d0                	mov    eax,edx
9f003d4f:	83 c0 30             	add    eax,0x30
9f003d52:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:320
    exp = exp / 10;
9f003d54:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003d57:	ba 67 66 66 66       	mov    edx,0x66666667
9f003d5c:	89 c8                	mov    eax,ecx
9f003d5e:	f7 ea                	imul   edx
9f003d60:	c1 fa 02             	sar    edx,0x2
9f003d63:	89 c8                	mov    eax,ecx
9f003d65:	c1 f8 1f             	sar    eax,0x1f
9f003d68:	29 c2                	sub    edx,eax
9f003d6a:	89 d0                	mov    eax,edx
9f003d6c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:321
    buffer[1] = (exp % 10) + '0';
9f003d6f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003d72:	8d 58 01             	lea    ebx,[eax+0x1]
9f003d75:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003d78:	ba 67 66 66 66       	mov    edx,0x66666667
9f003d7d:	89 c8                	mov    eax,ecx
9f003d7f:	f7 ea                	imul   edx
9f003d81:	c1 fa 02             	sar    edx,0x2
9f003d84:	89 c8                	mov    eax,ecx
9f003d86:	c1 f8 1f             	sar    eax,0x1f
9f003d89:	29 c2                	sub    edx,eax
9f003d8b:	89 d0                	mov    eax,edx
9f003d8d:	c1 e0 02             	shl    eax,0x2
9f003d90:	01 d0                	add    eax,edx
9f003d92:	01 c0                	add    eax,eax
9f003d94:	29 c1                	sub    ecx,eax
9f003d96:	89 ca                	mov    edx,ecx
9f003d98:	89 d0                	mov    eax,edx
9f003d9a:	83 c0 30             	add    eax,0x30
9f003d9d:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:322
    exp = exp / 10;
9f003d9f:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003da2:	ba 67 66 66 66       	mov    edx,0x66666667
9f003da7:	89 c8                	mov    eax,ecx
9f003da9:	f7 ea                	imul   edx
9f003dab:	c1 fa 02             	sar    edx,0x2
9f003dae:	89 c8                	mov    eax,ecx
9f003db0:	c1 f8 1f             	sar    eax,0x1f
9f003db3:	29 c2                	sub    edx,eax
9f003db5:	89 d0                	mov    eax,edx
9f003db7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:323
    buffer[0] = (exp % 10) + '0';
9f003dba:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003dbd:	ba 67 66 66 66       	mov    edx,0x66666667
9f003dc2:	89 c8                	mov    eax,ecx
9f003dc4:	f7 ea                	imul   edx
9f003dc6:	c1 fa 02             	sar    edx,0x2
9f003dc9:	89 c8                	mov    eax,ecx
9f003dcb:	c1 f8 1f             	sar    eax,0x1f
9f003dce:	29 c2                	sub    edx,eax
9f003dd0:	89 d0                	mov    eax,edx
9f003dd2:	c1 e0 02             	shl    eax,0x2
9f003dd5:	01 d0                	add    eax,edx
9f003dd7:	01 c0                	add    eax,eax
9f003dd9:	29 c1                	sub    ecx,eax
9f003ddb:	89 ca                	mov    edx,ecx
9f003ddd:	89 d0                	mov    eax,edx
9f003ddf:	83 c0 30             	add    eax,0x30
9f003de2:	89 c2                	mov    edx,eax
9f003de4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003de7:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:324
    buffer += 3;
9f003de9:	83 45 10 03          	add    DWORD PTR [ebp+0x10],0x3
9f003ded:	e9 4b 01 00 00       	jmp    9f003f3d <cfltcvt+0x3f9>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:325
  } else if (fmt == 'f') {
9f003df2:	80 bd cc fd ff ff 66 	cmp    BYTE PTR [ebp-0x234],0x66
9f003df9:	0f 85 3e 01 00 00    	jne    9f003f3d <cfltcvt+0x3f9>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:326
    digits = fcvtbuf(value, precision, &decpt, &sign, cvtbuf);
9f003dff:	83 ec 08             	sub    esp,0x8
9f003e02:	8d 85 dc fd ff ff    	lea    eax,[ebp-0x224]
9f003e08:	50                   	push   eax
9f003e09:	8d 45 dc             	lea    eax,[ebp-0x24]
9f003e0c:	50                   	push   eax
9f003e0d:	8d 45 e0             	lea    eax,[ebp-0x20]
9f003e10:	50                   	push   eax
9f003e11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
9f003e14:	ff b5 d4 fd ff ff    	push   DWORD PTR [ebp-0x22c]
9f003e1a:	ff b5 d0 fd ff ff    	push   DWORD PTR [ebp-0x230]
9f003e20:	e8 96 09 00 00       	call   9f0047bb <fcvtbuf>
9f003e25:	83 c4 20             	add    esp,0x20
9f003e28:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:327
    if (sign) *buffer++ = '-';
9f003e2b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f003e2e:	85 c0                	test   eax,eax
9f003e30:	74 0c                	je     9f003e3e <cfltcvt+0x2fa>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:327 (discriminator 1)
9f003e32:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003e35:	8d 50 01             	lea    edx,[eax+0x1]
9f003e38:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003e3b:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:328
    if (*digits) {
9f003e3e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003e41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003e44:	84 c0                	test   al,al
9f003e46:	0f 84 b2 00 00 00    	je     9f003efe <cfltcvt+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:329
      if (decpt <= 0) {
9f003e4c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003e4f:	85 c0                	test   eax,eax
9f003e51:	7f 63                	jg     9f003eb6 <cfltcvt+0x372>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:330
        *buffer++ = '0';
9f003e53:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003e56:	8d 50 01             	lea    edx,[eax+0x1]
9f003e59:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003e5c:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:331
        *buffer++ = '.';
9f003e5f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003e62:	8d 50 01             	lea    edx,[eax+0x1]
9f003e65:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003e68:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:332
        for (pos = 0; pos < -decpt; pos++) *buffer++ = '0';
9f003e6b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f003e72:	eb 10                	jmp    9f003e84 <cfltcvt+0x340>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:332 (discriminator 3)
9f003e74:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003e77:	8d 50 01             	lea    edx,[eax+0x1]
9f003e7a:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003e7d:	c6 00 30             	mov    BYTE PTR [eax],0x30
9f003e80:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:332 (discriminator 1)
9f003e84:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003e87:	f7 d8                	neg    eax
9f003e89:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f003e8c:	7f e6                	jg     9f003e74 <cfltcvt+0x330>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:333
        while (*digits) *buffer++ = *digits++;
9f003e8e:	eb 17                	jmp    9f003ea7 <cfltcvt+0x363>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:333 (discriminator 2)
9f003e90:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003e93:	8d 50 01             	lea    edx,[eax+0x1]
9f003e96:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003e99:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f003e9c:	8d 4a 01             	lea    ecx,[edx+0x1]
9f003e9f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
9f003ea2:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003ea5:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:333 (discriminator 1)
9f003ea7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003eaa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003ead:	84 c0                	test   al,al
9f003eaf:	75 df                	jne    9f003e90 <cfltcvt+0x34c>
9f003eb1:	e9 87 00 00 00       	jmp    9f003f3d <cfltcvt+0x3f9>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:335
      } else {
        pos = 0;
9f003eb6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:336
        while (*digits) {
9f003ebd:	eb 33                	jmp    9f003ef2 <cfltcvt+0x3ae>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:337
          if (pos++ == decpt) *buffer++ = '.';
9f003ebf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003ec2:	8d 50 01             	lea    edx,[eax+0x1]
9f003ec5:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f003ec8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f003ecb:	39 d0                	cmp    eax,edx
9f003ecd:	75 0c                	jne    9f003edb <cfltcvt+0x397>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:337 (discriminator 1)
9f003ecf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003ed2:	8d 50 01             	lea    edx,[eax+0x1]
9f003ed5:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003ed8:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:338
          *buffer++ = *digits++;
9f003edb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003ede:	8d 50 01             	lea    edx,[eax+0x1]
9f003ee1:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003ee4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f003ee7:	8d 4a 01             	lea    ecx,[edx+0x1]
9f003eea:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
9f003eed:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003ef0:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:336
        *buffer++ = '.';
        for (pos = 0; pos < -decpt; pos++) *buffer++ = '0';
        while (*digits) *buffer++ = *digits++;
      } else {
        pos = 0;
        while (*digits) {
9f003ef2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003ef5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003ef8:	84 c0                	test   al,al
9f003efa:	75 c3                	jne    9f003ebf <cfltcvt+0x37b>
9f003efc:	eb 3f                	jmp    9f003f3d <cfltcvt+0x3f9>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:342
          if (pos++ == decpt) *buffer++ = '.';
          *buffer++ = *digits++;
        }
      }
    } else {
      *buffer++ = '0';
9f003efe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003f01:	8d 50 01             	lea    edx,[eax+0x1]
9f003f04:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003f07:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:343
      if (precision > 0) {
9f003f0a:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
9f003f0e:	7e 2d                	jle    9f003f3d <cfltcvt+0x3f9>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:344
        *buffer++ = '.';
9f003f10:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003f13:	8d 50 01             	lea    edx,[eax+0x1]
9f003f16:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003f19:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:345
        for (pos = 0; pos < precision; pos++) *buffer++ = '0';
9f003f1c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f003f23:	eb 10                	jmp    9f003f35 <cfltcvt+0x3f1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:345 (discriminator 3)
9f003f25:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003f28:	8d 50 01             	lea    edx,[eax+0x1]
9f003f2b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003f2e:	c6 00 30             	mov    BYTE PTR [eax],0x30
9f003f31:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:345 (discriminator 1)
9f003f35:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003f38:	3b 45 18             	cmp    eax,DWORD PTR [ebp+0x18]
9f003f3b:	7c e8                	jl     9f003f25 <cfltcvt+0x3e1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:350
      }
    }
  }

  *buffer = '\0';
9f003f3d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003f40:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:351
}
9f003f43:	90                   	nop
9f003f44:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003f47:	c9                   	leave  
9f003f48:	c3                   	ret    

9f003f49 <forcdecpt>:
forcdecpt():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:353

static void forcdecpt(char *buffer) {
9f003f49:	55                   	push   ebp
9f003f4a:	89 e5                	mov    ebp,esp
9f003f4c:	53                   	push   ebx
9f003f4d:	83 ec 14             	sub    esp,0x14
9f003f50:	e8 31 22 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f003f55:	05 a7 52 00 00       	add    eax,0x52a7
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:354
  while (*buffer) {
9f003f5a:	eb 29                	jmp    9f003f85 <forcdecpt+0x3c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:355
    if (*buffer == '.') return;
9f003f5c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003f5f:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003f62:	80 fa 2e             	cmp    dl,0x2e
9f003f65:	0f 84 81 00 00 00    	je     9f003fec <forcdecpt+0xa3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:356
    if (*buffer == 'e' || *buffer == 'E') break;
9f003f6b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003f6e:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003f71:	80 fa 65             	cmp    dl,0x65
9f003f74:	74 19                	je     9f003f8f <forcdecpt+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:356 (discriminator 1)
9f003f76:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003f79:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003f7c:	80 fa 45             	cmp    dl,0x45
9f003f7f:	74 0e                	je     9f003f8f <forcdecpt+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:357
    buffer++;
9f003f81:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:354

  *buffer = '\0';
}

static void forcdecpt(char *buffer) {
  while (*buffer) {
9f003f85:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003f88:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003f8b:	84 d2                	test   dl,dl
9f003f8d:	75 cd                	jne    9f003f5c <forcdecpt+0x13>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:360
    if (*buffer == '.') return;
    if (*buffer == 'e' || *buffer == 'E') break;
    buffer++;
  }

  if (*buffer) {
9f003f8f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003f92:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003f95:	84 d2                	test   dl,dl
9f003f97:	74 3f                	je     9f003fd8 <forcdecpt+0x8f>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:361
    int n = strlen(buffer);
9f003f99:	83 ec 0c             	sub    esp,0xc
9f003f9c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003f9f:	89 c3                	mov    ebx,eax
9f003fa1:	e8 1a 22 00 00       	call   9f0061c0 <__x86.get_pc_thunk.ax+0x3a>
9f003fa6:	83 c4 10             	add    esp,0x10
9f003fa9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:362
    while (n > 0) {
9f003fac:	eb 1c                	jmp    9f003fca <forcdecpt+0x81>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:363
      buffer[n + 1] = buffer[n];
9f003fae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003fb1:	8d 50 01             	lea    edx,[eax+0x1]
9f003fb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003fb7:	01 c2                	add    edx,eax
9f003fb9:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003fbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003fbf:	01 c8                	add    eax,ecx
9f003fc1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003fc4:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:364
      n--;
9f003fc6:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:362
    buffer++;
  }

  if (*buffer) {
    int n = strlen(buffer);
    while (n > 0) {
9f003fca:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f003fce:	7f de                	jg     9f003fae <forcdecpt+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:367
      buffer[n + 1] = buffer[n];
      n--;
    }

    *buffer = '.';
9f003fd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003fd3:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
9f003fd6:	eb 15                	jmp    9f003fed <forcdecpt+0xa4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:369
  } else {
    *buffer++ = '.';
9f003fd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003fdb:	8d 50 01             	lea    edx,[eax+0x1]
9f003fde:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003fe1:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:370
    *buffer = '\0';
9f003fe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003fe7:	c6 00 00             	mov    BYTE PTR [eax],0x0
9f003fea:	eb 01                	jmp    9f003fed <forcdecpt+0xa4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:355
  *buffer = '\0';
}

static void forcdecpt(char *buffer) {
  while (*buffer) {
    if (*buffer == '.') return;
9f003fec:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:372
    *buffer = '.';
  } else {
    *buffer++ = '.';
    *buffer = '\0';
  }
}
9f003fed:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003ff0:	c9                   	leave  
9f003ff1:	c3                   	ret    

9f003ff2 <cropzeros>:
cropzeros():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:374

static void cropzeros(char *buffer) {
9f003ff2:	55                   	push   ebp
9f003ff3:	89 e5                	mov    ebp,esp
9f003ff5:	83 ec 10             	sub    esp,0x10
9f003ff8:	e8 89 21 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f003ffd:	05 ff 51 00 00       	add    eax,0x51ff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:377
  char *stop;

  while (*buffer && *buffer != '.') buffer++;
9f004002:	eb 04                	jmp    9f004008 <cropzeros+0x16>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:377 (discriminator 3)
9f004004:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:377 (discriminator 1)
9f004008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00400b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00400e:	84 c0                	test   al,al
9f004010:	74 0a                	je     9f00401c <cropzeros+0x2a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:377 (discriminator 2)
9f004012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004015:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004018:	3c 2e                	cmp    al,0x2e
9f00401a:	75 e8                	jne    9f004004 <cropzeros+0x12>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:378
  if (*buffer++) {
9f00401c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00401f:	8d 50 01             	lea    edx,[eax+0x1]
9f004022:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f004025:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004028:	84 c0                	test   al,al
9f00402a:	74 6d                	je     9f004099 <cropzeros+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:379
    while (*buffer && *buffer != 'e' && *buffer != 'E') buffer++;
9f00402c:	eb 04                	jmp    9f004032 <cropzeros+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:379 (discriminator 4)
9f00402e:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:379 (discriminator 1)
9f004032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004035:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004038:	84 c0                	test   al,al
9f00403a:	74 14                	je     9f004050 <cropzeros+0x5e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:379 (discriminator 2)
9f00403c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00403f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004042:	3c 65                	cmp    al,0x65
9f004044:	74 0a                	je     9f004050 <cropzeros+0x5e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:379 (discriminator 3)
9f004046:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004049:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00404c:	3c 45                	cmp    al,0x45
9f00404e:	75 de                	jne    9f00402e <cropzeros+0x3c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:380
    stop = buffer--;
9f004050:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004053:	8d 50 ff             	lea    edx,[eax-0x1]
9f004056:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f004059:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:381
    while (*buffer == '0') buffer--;
9f00405c:	eb 04                	jmp    9f004062 <cropzeros+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:381 (discriminator 2)
9f00405e:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:381 (discriminator 1)
9f004062:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004065:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004068:	3c 30                	cmp    al,0x30
9f00406a:	74 f2                	je     9f00405e <cropzeros+0x6c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:382
    if (*buffer == '.') buffer--;
9f00406c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00406f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004072:	3c 2e                	cmp    al,0x2e
9f004074:	75 04                	jne    9f00407a <cropzeros+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:382 (discriminator 1)
9f004076:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:383 (discriminator 1)
    while (*++buffer = *stop++);
9f00407a:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f00407e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004081:	8d 50 01             	lea    edx,[eax+0x1]
9f004084:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f004087:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f00408a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00408d:	88 10                	mov    BYTE PTR [eax],dl
9f00408f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004092:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004095:	84 c0                	test   al,al
9f004097:	75 e1                	jne    9f00407a <cropzeros+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:385
  }
}
9f004099:	90                   	nop
9f00409a:	c9                   	leave  
9f00409b:	c3                   	ret    

9f00409c <flt>:
flt():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:387

static char *flt(char *str, double num, int size, int precision, char fmt, int flags) {
9f00409c:	55                   	push   ebp
9f00409d:	89 e5                	mov    ebp,esp
9f00409f:	53                   	push   ebx
9f0040a0:	81 ec 24 02 00 00    	sub    esp,0x224
9f0040a6:	e8 25 21 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f0040ab:	81 c3 51 51 00 00    	add    ebx,0x5151
9f0040b1:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0040b4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0040b7:	89 95 e0 fd ff ff    	mov    DWORD PTR [ebp-0x220],edx
9f0040bd:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f0040c0:	89 95 e4 fd ff ff    	mov    DWORD PTR [ebp-0x21c],edx
9f0040c6:	88 85 dc fd ff ff    	mov    BYTE PTR [ebp-0x224],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:393
  char cvtbuf[512];
  char c, sign;
  int n, i;

  // Left align means no zero padding
  if (flags & LEFT) flags &= ~ZEROPAD;
9f0040cc:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
9f0040cf:	83 e0 10             	and    eax,0x10
9f0040d2:	85 c0                	test   eax,eax
9f0040d4:	74 04                	je     9f0040da <flt+0x3e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:393 (discriminator 1)
9f0040d6:	83 65 20 fe          	and    DWORD PTR [ebp+0x20],0xfffffffe
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:396

  // Determine padding and sign char
  c = (flags & ZEROPAD) ? '0' : ' ';
9f0040da:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
9f0040dd:	83 e0 01             	and    eax,0x1
9f0040e0:	85 c0                	test   eax,eax
9f0040e2:	74 07                	je     9f0040eb <flt+0x4f>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:396 (discriminator 1)
9f0040e4:	b8 30 00 00 00       	mov    eax,0x30
9f0040e9:	eb 05                	jmp    9f0040f0 <flt+0x54>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:396 (discriminator 2)
9f0040eb:	b8 20 00 00 00       	mov    eax,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:396 (discriminator 4)
9f0040f0:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:397 (discriminator 4)
  sign = 0;
9f0040f3:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:398 (discriminator 4)
  if (flags & SIGN) {
9f0040f7:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
9f0040fa:	83 e0 02             	and    eax,0x2
9f0040fd:	85 c0                	test   eax,eax
9f0040ff:	74 4e                	je     9f00414f <flt+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:399
    if (num < 0.0) {
9f004101:	d9 ee                	fldz   
9f004103:	dd 85 e0 fd ff ff    	fld    QWORD PTR [ebp-0x220]
9f004109:	d9 c9                	fxch   st(1)
9f00410b:	df e9                	fucomip st,st(1)
9f00410d:	dd d8                	fstp   st(0)
9f00410f:	76 18                	jbe    9f004129 <flt+0x8d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:400
      sign = '-';
9f004111:	c6 45 f7 2d          	mov    BYTE PTR [ebp-0x9],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:401
      num = -num;
9f004115:	dd 85 e0 fd ff ff    	fld    QWORD PTR [ebp-0x220]
9f00411b:	d9 e0                	fchs   
9f00411d:	dd 9d e0 fd ff ff    	fstp   QWORD PTR [ebp-0x220]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:402
      size--;
9f004123:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f004127:	eb 26                	jmp    9f00414f <flt+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:403
    } else if (flags & PLUS) {
9f004129:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
9f00412c:	83 e0 04             	and    eax,0x4
9f00412f:	85 c0                	test   eax,eax
9f004131:	74 0a                	je     9f00413d <flt+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:404
      sign = '+';
9f004133:	c6 45 f7 2b          	mov    BYTE PTR [ebp-0x9],0x2b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:405
      size--;
9f004137:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f00413b:	eb 12                	jmp    9f00414f <flt+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:406
    } else if (flags & SPACE) {
9f00413d:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
9f004140:	83 e0 08             	and    eax,0x8
9f004143:	85 c0                	test   eax,eax
9f004145:	74 08                	je     9f00414f <flt+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:407
      sign = ' ';
9f004147:	c6 45 f7 20          	mov    BYTE PTR [ebp-0x9],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:408
      size--;
9f00414b:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:413
    }
  }

  // Compute the precision value
  if (precision < 0) {
9f00414f:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
9f004153:	79 09                	jns    9f00415e <flt+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:414
    precision = 6; // Default precision: 6
9f004155:	c7 45 18 06 00 00 00 	mov    DWORD PTR [ebp+0x18],0x6
9f00415c:	eb 16                	jmp    9f004174 <flt+0xd8>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:415
  } else if (precision == 0 && fmt == 'g') {
9f00415e:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
9f004162:	75 10                	jne    9f004174 <flt+0xd8>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:415 (discriminator 1)
9f004164:	80 bd dc fd ff ff 67 	cmp    BYTE PTR [ebp-0x224],0x67
9f00416b:	75 07                	jne    9f004174 <flt+0xd8>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:416
    precision = 1; // ANSI specified
9f00416d:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:420
  }

  // Convert floating point number to text
  cfltcvt(num, cvtbuf, fmt, precision);
9f004174:	0f be 85 dc fd ff ff 	movsx  eax,BYTE PTR [ebp-0x224]
9f00417b:	83 ec 0c             	sub    esp,0xc
9f00417e:	ff 75 18             	push   DWORD PTR [ebp+0x18]
9f004181:	50                   	push   eax
9f004182:	8d 85 e8 fd ff ff    	lea    eax,[ebp-0x218]
9f004188:	50                   	push   eax
9f004189:	ff b5 e4 fd ff ff    	push   DWORD PTR [ebp-0x21c]
9f00418f:	ff b5 e0 fd ff ff    	push   DWORD PTR [ebp-0x220]
9f004195:	e8 aa f9 ff ff       	call   9f003b44 <cfltcvt>
9f00419a:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:423

  // '#' and precision == 0 means force a decimal point
  if ((flags & SPECIAL) && precision == 0) forcdecpt(cvtbuf);
9f00419d:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
9f0041a0:	83 e0 20             	and    eax,0x20
9f0041a3:	85 c0                	test   eax,eax
9f0041a5:	74 18                	je     9f0041bf <flt+0x123>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:423 (discriminator 1)
9f0041a7:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
9f0041ab:	75 12                	jne    9f0041bf <flt+0x123>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:423 (discriminator 2)
9f0041ad:	83 ec 0c             	sub    esp,0xc
9f0041b0:	8d 85 e8 fd ff ff    	lea    eax,[ebp-0x218]
9f0041b6:	50                   	push   eax
9f0041b7:	e8 8d fd ff ff       	call   9f003f49 <forcdecpt>
9f0041bc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:426

  // 'g' format means crop zero unless '#' given
  if (fmt == 'g' && !(flags & SPECIAL)) cropzeros(cvtbuf);
9f0041bf:	80 bd dc fd ff ff 67 	cmp    BYTE PTR [ebp-0x224],0x67
9f0041c6:	75 1c                	jne    9f0041e4 <flt+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:426 (discriminator 1)
9f0041c8:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
9f0041cb:	83 e0 20             	and    eax,0x20
9f0041ce:	85 c0                	test   eax,eax
9f0041d0:	75 12                	jne    9f0041e4 <flt+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:426 (discriminator 2)
9f0041d2:	83 ec 0c             	sub    esp,0xc
9f0041d5:	8d 85 e8 fd ff ff    	lea    eax,[ebp-0x218]
9f0041db:	50                   	push   eax
9f0041dc:	e8 11 fe ff ff       	call   9f003ff2 <cropzeros>
9f0041e1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:428

  n = strlen(cvtbuf);
9f0041e4:	83 ec 0c             	sub    esp,0xc
9f0041e7:	8d 85 e8 fd ff ff    	lea    eax,[ebp-0x218]
9f0041ed:	50                   	push   eax
9f0041ee:	e8 cd 1f 00 00       	call   9f0061c0 <__x86.get_pc_thunk.ax+0x3a>
9f0041f3:	83 c4 10             	add    esp,0x10
9f0041f6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:431

  // Output number with alignment and padding
  size -= n;
9f0041f9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0041fc:	29 45 14             	sub    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:432
  if (!(flags & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
9f0041ff:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
9f004202:	83 e0 11             	and    eax,0x11
9f004205:	85 c0                	test   eax,eax
9f004207:	75 1b                	jne    9f004224 <flt+0x188>
9f004209:	eb 0c                	jmp    9f004217 <flt+0x17b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:432 (discriminator 2)
9f00420b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00420e:	8d 50 01             	lea    edx,[eax+0x1]
9f004211:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f004214:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:432 (discriminator 1)
9f004217:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f00421a:	8d 50 ff             	lea    edx,[eax-0x1]
9f00421d:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f004220:	85 c0                	test   eax,eax
9f004222:	7f e7                	jg     9f00420b <flt+0x16f>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:433
  if (sign) *str++ = sign;
9f004224:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f004228:	74 0f                	je     9f004239 <flt+0x19d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:433 (discriminator 1)
9f00422a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00422d:	8d 50 01             	lea    edx,[eax+0x1]
9f004230:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f004233:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f004237:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:434
  if (!(flags & LEFT)) while (size-- > 0) *str++ = c;
9f004239:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
9f00423c:	83 e0 10             	and    eax,0x10
9f00423f:	85 c0                	test   eax,eax
9f004241:	75 1e                	jne    9f004261 <flt+0x1c5>
9f004243:	eb 0f                	jmp    9f004254 <flt+0x1b8>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:434 (discriminator 2)
9f004245:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004248:	8d 50 01             	lea    edx,[eax+0x1]
9f00424b:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00424e:	0f b6 55 ef          	movzx  edx,BYTE PTR [ebp-0x11]
9f004252:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:434 (discriminator 1)
9f004254:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f004257:	8d 50 ff             	lea    edx,[eax-0x1]
9f00425a:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f00425d:	85 c0                	test   eax,eax
9f00425f:	7f e4                	jg     9f004245 <flt+0x1a9>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:435
  for (i = 0; i < n; i++) *str++ = cvtbuf[i];
9f004261:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f004268:	eb 1d                	jmp    9f004287 <flt+0x1eb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:435 (discriminator 3)
9f00426a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00426d:	8d 50 01             	lea    edx,[eax+0x1]
9f004270:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f004273:	8d 8d e8 fd ff ff    	lea    ecx,[ebp-0x218]
9f004279:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00427c:	01 ca                	add    edx,ecx
9f00427e:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f004281:	88 10                	mov    BYTE PTR [eax],dl
9f004283:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:435 (discriminator 1)
9f004287:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00428a:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f00428d:	7c db                	jl     9f00426a <flt+0x1ce>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:436
  while (size-- > 0) *str++ = ' ';
9f00428f:	eb 0c                	jmp    9f00429d <flt+0x201>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:436 (discriminator 2)
9f004291:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004294:	8d 50 01             	lea    edx,[eax+0x1]
9f004297:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00429a:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:436 (discriminator 1)
9f00429d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f0042a0:	8d 50 ff             	lea    edx,[eax-0x1]
9f0042a3:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f0042a6:	85 c0                	test   eax,eax
9f0042a8:	7f e7                	jg     9f004291 <flt+0x1f5>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:438

  return str;
9f0042aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:439
}
9f0042ad:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0042b0:	c9                   	leave  
9f0042b1:	c3                   	ret    

9f0042b2 <vsprintf>:
vsprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:443

#endif

int vsprintf(char *buf, const char *fmt, va_list args) {
9f0042b2:	55                   	push   ebp
9f0042b3:	89 e5                	mov    ebp,esp
9f0042b5:	56                   	push   esi
9f0042b6:	53                   	push   ebx
9f0042b7:	83 ec 30             	sub    esp,0x30
9f0042ba:	e8 11 1f 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f0042bf:	81 c3 3d 4f 00 00    	add    ebx,0x4f3d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:456

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  for (str = buf; *fmt; fmt++) {
9f0042c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0042c8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f0042cb:	e9 93 04 00 00       	jmp    9f004763 <.L247+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:457
    if (*fmt != '%') {
9f0042d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0042d3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0042d6:	3c 25                	cmp    al,0x25
9f0042d8:	74 16                	je     9f0042f0 <vsprintf+0x3e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:458
      *str++ = *fmt;
9f0042da:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0042dd:	8d 50 01             	lea    edx,[eax+0x1]
9f0042e0:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f0042e3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0042e6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0042e9:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:459
      continue;
9f0042eb:	e9 6a 04 00 00       	jmp    9f00475a <.L247+0x74>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:463
    }
                  
    // Process flags
    flags = 0;
9f0042f0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:465
repeat:
    fmt++; // This also skips first '%'
9f0042f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0042fa:	83 c0 01             	add    eax,0x1
9f0042fd:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:466
    switch (*fmt) {
9f004300:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004303:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004306:	0f be c0             	movsx  eax,al
9f004309:	83 e8 20             	sub    eax,0x20
9f00430c:	83 f8 10             	cmp    eax,0x10
9f00430f:	77 2c                	ja     9f00433d <.L190>
9f004311:	c1 e0 02             	shl    eax,0x2
9f004314:	8b 84 18 78 fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x488]
9f00431b:	01 d8                	add    eax,ebx
9f00431d:	ff e0                	jmp    eax

9f00431f <.L195>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:467
      case '-': flags |= LEFT; goto repeat;
9f00431f:	83 4d e0 10          	or     DWORD PTR [ebp-0x20],0x10
9f004323:	eb d2                	jmp    9f0042f7 <vsprintf+0x45>

9f004325 <.L194>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:468
      case '+': flags |= PLUS; goto repeat;
9f004325:	83 4d e0 04          	or     DWORD PTR [ebp-0x20],0x4
9f004329:	eb cc                	jmp    9f0042f7 <vsprintf+0x45>

9f00432b <.L191>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:469
      case ' ': flags |= SPACE; goto repeat;
9f00432b:	83 4d e0 08          	or     DWORD PTR [ebp-0x20],0x8
9f00432f:	eb c6                	jmp    9f0042f7 <vsprintf+0x45>

9f004331 <.L193>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:470
      case '#': flags |= SPECIAL; goto repeat;
9f004331:	83 4d e0 20          	or     DWORD PTR [ebp-0x20],0x20
9f004335:	eb c0                	jmp    9f0042f7 <vsprintf+0x45>

9f004337 <.L196>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:471
      case '0': flags |= ZEROPAD; goto repeat;
9f004337:	83 4d e0 01          	or     DWORD PTR [ebp-0x20],0x1
9f00433b:	eb ba                	jmp    9f0042f7 <vsprintf+0x45>

9f00433d <.L190>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:475
    }
          
    // Get field width
    field_width = -1;
9f00433d:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [ebp-0x24],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:476
    if (is_digit(*fmt)) {
9f004344:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004347:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00434a:	3c 2f                	cmp    al,0x2f
9f00434c:	7e 1b                	jle    9f004369 <.L190+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:476 (discriminator 1)
9f00434e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004351:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004354:	3c 39                	cmp    al,0x39
9f004356:	7f 11                	jg     9f004369 <.L190+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:477
      field_width = skip_atoi(&fmt);
9f004358:	8d 45 0c             	lea    eax,[ebp+0xc]
9f00435b:	50                   	push   eax
9f00435c:	e8 fe f1 ff ff       	call   9f00355f <skip_atoi>
9f004361:	83 c4 04             	add    esp,0x4
9f004364:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
9f004367:	eb 2e                	jmp    9f004397 <.L190+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:478
    } else if (*fmt == '*') {
9f004369:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00436c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00436f:	3c 2a                	cmp    al,0x2a
9f004371:	75 24                	jne    9f004397 <.L190+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:479
      fmt++;
9f004373:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004376:	83 c0 01             	add    eax,0x1
9f004379:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:480
      field_width = va_arg(args, int);
9f00437c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00437f:	8d 50 04             	lea    edx,[eax+0x4]
9f004382:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f004385:	8b 00                	mov    eax,DWORD PTR [eax]
9f004387:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:481
      if (field_width < 0) {
9f00438a:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
9f00438e:	79 07                	jns    9f004397 <.L190+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:482
        field_width = -field_width;
9f004390:	f7 5d dc             	neg    DWORD PTR [ebp-0x24]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:483
        flags |= LEFT;
9f004393:	83 4d e0 10          	or     DWORD PTR [ebp-0x20],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:488
      }
    }

    // Get the precision
    precision = -1;
9f004397:	c7 45 d8 ff ff ff ff 	mov    DWORD PTR [ebp-0x28],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:489
    if (*fmt == '.') {
9f00439e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0043a1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0043a4:	3c 2e                	cmp    al,0x2e
9f0043a6:	75 5c                	jne    9f004404 <.L190+0xc7>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:490
      ++fmt;    
9f0043a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0043ab:	83 c0 01             	add    eax,0x1
9f0043ae:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:491
      if (is_digit(*fmt)) {
9f0043b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0043b4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0043b7:	3c 2f                	cmp    al,0x2f
9f0043b9:	7e 1b                	jle    9f0043d6 <.L190+0x99>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:491 (discriminator 1)
9f0043bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0043be:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0043c1:	3c 39                	cmp    al,0x39
9f0043c3:	7f 11                	jg     9f0043d6 <.L190+0x99>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:492
        precision = skip_atoi(&fmt);
9f0043c5:	8d 45 0c             	lea    eax,[ebp+0xc]
9f0043c8:	50                   	push   eax
9f0043c9:	e8 91 f1 ff ff       	call   9f00355f <skip_atoi>
9f0043ce:	83 c4 04             	add    esp,0x4
9f0043d1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
9f0043d4:	eb 21                	jmp    9f0043f7 <.L190+0xba>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:493
      } else if (*fmt == '*') {
9f0043d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0043d9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0043dc:	3c 2a                	cmp    al,0x2a
9f0043de:	75 17                	jne    9f0043f7 <.L190+0xba>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:494
        ++fmt;
9f0043e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0043e3:	83 c0 01             	add    eax,0x1
9f0043e6:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:495
        precision = va_arg(args, int);
9f0043e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0043ec:	8d 50 04             	lea    edx,[eax+0x4]
9f0043ef:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0043f2:	8b 00                	mov    eax,DWORD PTR [eax]
9f0043f4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:497
      }
      if (precision < 0) precision = 0;
9f0043f7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f0043fb:	79 07                	jns    9f004404 <.L190+0xc7>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:497 (discriminator 1)
9f0043fd:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:501
    }

    // Get the conversion qualifier
    qualifier = -1;
9f004404:	c7 45 d4 ff ff ff ff 	mov    DWORD PTR [ebp-0x2c],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:502
    if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {
9f00440b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00440e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004411:	3c 68                	cmp    al,0x68
9f004413:	74 14                	je     9f004429 <.L190+0xec>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:502 (discriminator 1)
9f004415:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004418:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00441b:	3c 6c                	cmp    al,0x6c
9f00441d:	74 0a                	je     9f004429 <.L190+0xec>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:502 (discriminator 2)
9f00441f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004422:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004425:	3c 4c                	cmp    al,0x4c
9f004427:	75 15                	jne    9f00443e <.L190+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:503
      qualifier = *fmt;
9f004429:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00442c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00442f:	0f be c0             	movsx  eax,al
9f004432:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:504
      fmt++;
9f004435:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004438:	83 c0 01             	add    eax,0x1
9f00443b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:508
    }

    // Default base
    base = 10;
9f00443e:	c7 45 ec 0a 00 00 00 	mov    DWORD PTR [ebp-0x14],0xa
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:510

    switch (*fmt) {
9f004445:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004448:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00444b:	0f be c0             	movsx  eax,al
9f00444e:	83 e8 41             	sub    eax,0x41
9f004451:	83 f8 37             	cmp    eax,0x37
9f004454:	0f 87 4e 02 00 00    	ja     9f0046a8 <.L204>
9f00445a:	c1 e0 02             	shl    eax,0x2
9f00445d:	8b 84 18 bc fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x444]
9f004464:	01 d8                	add    eax,ebx
9f004466:	ff e0                	jmp    eax

9f004468 <.L210>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:512
      case 'c':
        if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';
9f004468:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f00446b:	83 e0 10             	and    eax,0x10
9f00446e:	85 c0                	test   eax,eax
9f004470:	75 18                	jne    9f00448a <.L210+0x22>
9f004472:	eb 0c                	jmp    9f004480 <.L210+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:512 (discriminator 2)
9f004474:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f004477:	8d 50 01             	lea    edx,[eax+0x1]
9f00447a:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f00447d:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:512 (discriminator 1)
9f004480:	83 6d dc 01          	sub    DWORD PTR [ebp-0x24],0x1
9f004484:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
9f004488:	7f ea                	jg     9f004474 <.L210+0xc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:513
        *str++ = (unsigned char) va_arg(args, int);
9f00448a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00448d:	8d 50 01             	lea    edx,[eax+0x1]
9f004490:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f004493:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f004496:	8d 4a 04             	lea    ecx,[edx+0x4]
9f004499:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
9f00449c:	8b 12                	mov    edx,DWORD PTR [edx]
9f00449e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:514
        while (--field_width > 0) *str++ = ' ';
9f0044a0:	eb 0c                	jmp    9f0044ae <.L210+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:514 (discriminator 2)
9f0044a2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0044a5:	8d 50 01             	lea    edx,[eax+0x1]
9f0044a8:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f0044ab:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:514 (discriminator 1)
9f0044ae:	83 6d dc 01          	sub    DWORD PTR [ebp-0x24],0x1
9f0044b2:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
9f0044b6:	7f ea                	jg     9f0044a2 <.L210+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:515
        continue;
9f0044b8:	e9 9d 02 00 00       	jmp    9f00475a <.L247+0x74>

9f0044bd <.L215>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:518

      case 's':
        s = va_arg(args, char *);
9f0044bd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0044c0:	8d 50 04             	lea    edx,[eax+0x4]
9f0044c3:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0044c6:	8b 00                	mov    eax,DWORD PTR [eax]
9f0044c8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:519
        if (!s) s = "<NULL>";
9f0044cb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f0044cf:	75 09                	jne    9f0044da <.L215+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:519 (discriminator 1)
9f0044d1:	8d 83 71 fb ff ff    	lea    eax,[ebx-0x48f]
9f0044d7:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:520
        len = strnlenI(s, precision);
9f0044da:	83 ec 08             	sub    esp,0x8
9f0044dd:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f0044e0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f0044e3:	e8 77 07 00 00       	call   9f004c5f <strnlenI>
9f0044e8:	83 c4 10             	add    esp,0x10
9f0044eb:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:521
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
9f0044ee:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f0044f1:	83 e0 10             	and    eax,0x10
9f0044f4:	85 c0                	test   eax,eax
9f0044f6:	75 1c                	jne    9f004514 <.L215+0x57>
9f0044f8:	eb 0c                	jmp    9f004506 <.L215+0x49>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:521 (discriminator 2)
9f0044fa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0044fd:	8d 50 01             	lea    edx,[eax+0x1]
9f004500:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f004503:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:521 (discriminator 1)
9f004506:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f004509:	8d 50 ff             	lea    edx,[eax-0x1]
9f00450c:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
9f00450f:	3b 45 d0             	cmp    eax,DWORD PTR [ebp-0x30]
9f004512:	7f e6                	jg     9f0044fa <.L215+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:522
        for (i = 0; i < len; ++i) *str++ = *s++;
9f004514:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f00451b:	eb 1b                	jmp    9f004538 <.L215+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:522 (discriminator 3)
9f00451d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f004520:	8d 50 01             	lea    edx,[eax+0x1]
9f004523:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f004526:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f004529:	8d 4a 01             	lea    ecx,[edx+0x1]
9f00452c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
9f00452f:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f004532:	88 10                	mov    BYTE PTR [eax],dl
9f004534:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:522 (discriminator 1)
9f004538:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00453b:	3b 45 d0             	cmp    eax,DWORD PTR [ebp-0x30]
9f00453e:	7c dd                	jl     9f00451d <.L215+0x60>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:523
        while (len < field_width--) *str++ = ' ';
9f004540:	eb 0c                	jmp    9f00454e <.L215+0x91>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:523 (discriminator 2)
9f004542:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f004545:	8d 50 01             	lea    edx,[eax+0x1]
9f004548:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f00454b:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:523 (discriminator 1)
9f00454e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f004551:	8d 50 ff             	lea    edx,[eax-0x1]
9f004554:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
9f004557:	3b 45 d0             	cmp    eax,DWORD PTR [ebp-0x30]
9f00455a:	7f e6                	jg     9f004542 <.L215+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:524
        continue;
9f00455c:	e9 f9 01 00 00       	jmp    9f00475a <.L247+0x74>

9f004561 <.L214>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:527

      case 'p':
        if (field_width == -1) {
9f004561:	83 7d dc ff          	cmp    DWORD PTR [ebp-0x24],0xffffffff
9f004565:	75 0b                	jne    9f004572 <.L214+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:528
          field_width = 2 * sizeof(void *);
9f004567:	c7 45 dc 08 00 00 00 	mov    DWORD PTR [ebp-0x24],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:529
          flags |= ZEROPAD;
9f00456e:	83 4d e0 01          	or     DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:531
        }
        str = number(str, (unsigned long) va_arg(args, void *), 16, field_width, precision, flags);
9f004572:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f004575:	8d 50 04             	lea    edx,[eax+0x4]
9f004578:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00457b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00457d:	83 ec 08             	sub    esp,0x8
9f004580:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f004583:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f004586:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f004589:	6a 10                	push   0x10
9f00458b:	50                   	push   eax
9f00458c:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f00458f:	e8 2f f0 ff ff       	call   9f0035c3 <number>
9f004594:	83 c4 20             	add    esp,0x20
9f004597:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:532
        continue;
9f00459a:	e9 bb 01 00 00       	jmp    9f00475a <.L247+0x74>

9f00459f <.L212>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:535

      case 'n':
        if (qualifier == 'l') {
9f00459f:	83 7d d4 6c          	cmp    DWORD PTR [ebp-0x2c],0x6c
9f0045a3:	75 20                	jne    9f0045c5 <.L212+0x26>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:536
          long *ip = va_arg(args, long *);
9f0045a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0045a8:	8d 50 04             	lea    edx,[eax+0x4]
9f0045ab:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0045ae:	8b 00                	mov    eax,DWORD PTR [eax]
9f0045b0:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:537
          *ip = (str - buf);
9f0045b3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f0045b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0045b9:	29 c2                	sub    edx,eax
9f0045bb:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
9f0045be:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:542
        } else {
          int *ip = va_arg(args, int *);
          *ip = (str - buf);
        }
        continue;
9f0045c0:	e9 95 01 00 00       	jmp    9f00475a <.L247+0x74>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:539
      case 'n':
        if (qualifier == 'l') {
          long *ip = va_arg(args, long *);
          *ip = (str - buf);
        } else {
          int *ip = va_arg(args, int *);
9f0045c5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0045c8:	8d 50 04             	lea    edx,[eax+0x4]
9f0045cb:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0045ce:	8b 00                	mov    eax,DWORD PTR [eax]
9f0045d0:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:540
          *ip = (str - buf);
9f0045d3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f0045d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0045d9:	29 c2                	sub    edx,eax
9f0045db:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
9f0045de:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:542
        }
        continue;
9f0045e0:	e9 75 01 00 00       	jmp    9f00475a <.L247+0x74>

9f0045e5 <.L205>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:545

      case 'A':
        flags |= LARGE;
9f0045e5:	83 4d e0 40          	or     DWORD PTR [ebp-0x20],0x40

9f0045e9 <.L209>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:548

      case 'a':
        if (qualifier == 'l') {
9f0045e9:	83 7d d4 6c          	cmp    DWORD PTR [ebp-0x2c],0x6c
9f0045ed:	75 2b                	jne    9f00461a <.L209+0x31>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:549
          str = eaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
9f0045ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0045f2:	8d 50 04             	lea    edx,[eax+0x4]
9f0045f5:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0045f8:	8b 00                	mov    eax,DWORD PTR [eax]
9f0045fa:	83 ec 0c             	sub    esp,0xc
9f0045fd:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f004600:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f004603:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f004606:	50                   	push   eax
9f004607:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f00460a:	e8 fd f1 ff ff       	call   9f00380c <eaddr>
9f00460f:	83 c4 20             	add    esp,0x20
9f004612:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:553
        } else {
          str = iaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
        }
        continue;
9f004615:	e9 40 01 00 00       	jmp    9f00475a <.L247+0x74>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:551

      case 'a':
        if (qualifier == 'l') {
          str = eaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
        } else {
          str = iaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
9f00461a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00461d:	8d 50 04             	lea    edx,[eax+0x4]
9f004620:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f004623:	8b 00                	mov    eax,DWORD PTR [eax]
9f004625:	83 ec 0c             	sub    esp,0xc
9f004628:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f00462b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f00462e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f004631:	50                   	push   eax
9f004632:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f004635:	e8 ec f2 ff ff       	call   9f003926 <iaddr>
9f00463a:	83 c4 20             	add    esp,0x20
9f00463d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:553
        }
        continue;
9f004640:	e9 15 01 00 00       	jmp    9f00475a <.L247+0x74>

9f004645 <.L213>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:557

      // Integer number formats - set up the flags and "break"
      case 'o':
        base = 8;
9f004645:	c7 45 ec 08 00 00 00 	mov    DWORD PTR [ebp-0x14],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:558
        break;
9f00464c:	e9 96 00 00 00       	jmp    9f0046e7 <.L247+0x1>

9f004651 <.L208>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:561

      case 'X':
        flags |= LARGE;
9f004651:	83 4d e0 40          	or     DWORD PTR [ebp-0x20],0x40

9f004655 <.L217>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:564

      case 'x':
        base = 16;
9f004655:	c7 45 ec 10 00 00 00 	mov    DWORD PTR [ebp-0x14],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:565
        break;
9f00465c:	e9 86 00 00 00       	jmp    9f0046e7 <.L247+0x1>

9f004661 <.L211>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:569

      case 'd':
      case 'i':
        flags |= SIGN;
9f004661:	83 4d e0 02          	or     DWORD PTR [ebp-0x20],0x2
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:572

      case 'u':
        break;
9f004665:	eb 7f                	jmp    9f0046e6 <.L247>

9f004667 <.L207>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:581
      case 'E':
      case 'G':
      case 'e':
      case 'f':
      case 'g':
        str = flt(str, va_arg(args, double), field_width, precision, *fmt, flags | SIGN);
9f004667:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f00466a:	83 c8 02             	or     eax,0x2
9f00466d:	89 c6                	mov    esi,eax
9f00466f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004672:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004675:	0f be d0             	movsx  edx,al
9f004678:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00467b:	8d 48 08             	lea    ecx,[eax+0x8]
9f00467e:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
9f004681:	dd 00                	fld    QWORD PTR [eax]
9f004683:	83 ec 04             	sub    esp,0x4
9f004686:	56                   	push   esi
9f004687:	52                   	push   edx
9f004688:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f00468b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f00468e:	8d 64 24 f8          	lea    esp,[esp-0x8]
9f004692:	dd 1c 24             	fstp   QWORD PTR [esp]
9f004695:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f004698:	e8 ff f9 ff ff       	call   9f00409c <flt>
9f00469d:	83 c4 20             	add    esp,0x20
9f0046a0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:582
        continue;
9f0046a3:	e9 b2 00 00 00       	jmp    9f00475a <.L247+0x74>

9f0046a8 <.L204>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:587

#endif

      default:
        if (*fmt != '%') *str++ = '%';
9f0046a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0046ab:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0046ae:	3c 25                	cmp    al,0x25
9f0046b0:	74 0c                	je     9f0046be <.L204+0x16>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:587 (discriminator 1)
9f0046b2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0046b5:	8d 50 01             	lea    edx,[eax+0x1]
9f0046b8:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f0046bb:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:588
        if (*fmt) {
9f0046be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0046c1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0046c4:	84 c0                	test   al,al
9f0046c6:	74 13                	je     9f0046db <.L204+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:589
          *str++ = *fmt;
9f0046c8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0046cb:	8d 50 01             	lea    edx,[eax+0x1]
9f0046ce:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f0046d1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0046d4:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0046d7:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:593
        } else {
          --fmt;
        }
        continue;
9f0046d9:	eb 7f                	jmp    9f00475a <.L247+0x74>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:591
      default:
        if (*fmt != '%') *str++ = '%';
        if (*fmt) {
          *str++ = *fmt;
        } else {
          --fmt;
9f0046db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0046de:	83 e8 01             	sub    eax,0x1
9f0046e1:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:593
        }
        continue;
9f0046e4:	eb 74                	jmp    9f00475a <.L247+0x74>

9f0046e6 <.L247>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:572
      case 'd':
      case 'i':
        flags |= SIGN;

      case 'u':
        break;
9f0046e6:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:596
          --fmt;
        }
        continue;
    }

    if (qualifier == 'l') {
9f0046e7:	83 7d d4 6c          	cmp    DWORD PTR [ebp-0x2c],0x6c
9f0046eb:	75 10                	jne    9f0046fd <.L247+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:597
      num = va_arg(args, unsigned long);
9f0046ed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0046f0:	8d 50 04             	lea    edx,[eax+0x4]
9f0046f3:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0046f6:	8b 00                	mov    eax,DWORD PTR [eax]
9f0046f8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0046fb:	eb 3c                	jmp    9f004739 <.L247+0x53>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:598
    } else if (qualifier == 'h') {
9f0046fd:	83 7d d4 68          	cmp    DWORD PTR [ebp-0x2c],0x68
9f004701:	75 0e                	jne    9f004711 <.L247+0x2b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:599
      if (flags & SIGN) {
9f004703:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f004706:	83 e0 02             	and    eax,0x2
9f004709:	85 c0                	test   eax,eax
9f00470b:	74 02                	je     9f00470f <.L247+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:600
        num = va_arg(args, short);
9f00470d:	0f 0b                	ud2    
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:602
      } else {
        num = va_arg(args, unsigned short);
9f00470f:	0f 0b                	ud2    
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:604
      }
    } else if (flags & SIGN) {
9f004711:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f004714:	83 e0 02             	and    eax,0x2
9f004717:	85 c0                	test   eax,eax
9f004719:	74 10                	je     9f00472b <.L247+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:605
      num = va_arg(args, int);
9f00471b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00471e:	8d 50 04             	lea    edx,[eax+0x4]
9f004721:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f004724:	8b 00                	mov    eax,DWORD PTR [eax]
9f004726:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f004729:	eb 0e                	jmp    9f004739 <.L247+0x53>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:607
    } else {
      num = va_arg(args, unsigned int);
9f00472b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00472e:	8d 50 04             	lea    edx,[eax+0x4]
9f004731:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f004734:	8b 00                	mov    eax,DWORD PTR [eax]
9f004736:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:610
    }

    str = number(str, num, base, field_width, precision, flags);
9f004739:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00473c:	83 ec 08             	sub    esp,0x8
9f00473f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f004742:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f004745:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f004748:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f00474b:	50                   	push   eax
9f00474c:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f00474f:	e8 6f ee ff ff       	call   9f0035c3 <number>
9f004754:	83 c4 20             	add    esp,0x20
9f004757:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:456 (discriminator 2)

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  for (str = buf; *fmt; fmt++) {
9f00475a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00475d:	83 c0 01             	add    eax,0x1
9f004760:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:456 (discriminator 1)
9f004763:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004766:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004769:	84 c0                	test   al,al
9f00476b:	0f 85 5f fb ff ff    	jne    9f0042d0 <vsprintf+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:613
    }

    str = number(str, num, base, field_width, precision, flags);
  }

  *str = '\0';
9f004771:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f004774:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:614
  return str - buf;
9f004777:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f00477a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00477d:	29 c2                	sub    edx,eax
9f00477f:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:615
}
9f004781:	8d 65 f8             	lea    esp,[ebp-0x8]
9f004784:	5b                   	pop    ebx
9f004785:	5e                   	pop    esi
9f004786:	5d                   	pop    ebp
9f004787:	c3                   	ret    

9f004788 <sprintf>:
sprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:617

VISIBLE int sprintf(char *buf, const char *fmt, ...) {
9f004788:	55                   	push   ebp
9f004789:	89 e5                	mov    ebp,esp
9f00478b:	83 ec 18             	sub    esp,0x18
9f00478e:	e8 f3 19 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004793:	05 69 4a 00 00       	add    eax,0x4a69
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:621
  va_list args;
  int n;

  va_start(args, fmt);
9f004798:	8d 45 10             	lea    eax,[ebp+0x10]
9f00479b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:622
  n = vsprintf(buf, fmt, args);
9f00479e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0047a1:	83 ec 04             	sub    esp,0x4
9f0047a4:	50                   	push   eax
9f0047a5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0047a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0047ab:	e8 02 fb ff ff       	call   9f0042b2 <vsprintf>
9f0047b0:	83 c4 10             	add    esp,0x10
9f0047b3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:625
  va_end(args);

  return n;
9f0047b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:626
}
9f0047b9:	c9                   	leave  
9f0047ba:	c3                   	ret    

9f0047bb <fcvtbuf>:
fcvtbuf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:628

char *fcvtbuf(double arg, int ndigits, int *decpt, int *sign, char *buf) {
9f0047bb:	55                   	push   ebp
9f0047bc:	89 e5                	mov    ebp,esp
9f0047be:	83 ec 18             	sub    esp,0x18
9f0047c1:	e8 c0 19 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0047c6:	05 36 4a 00 00       	add    eax,0x4a36
9f0047cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0047ce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0047d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0047d4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:629
  return cvt(arg, ndigits, decpt, sign, buf, 0);
9f0047d7:	83 ec 04             	sub    esp,0x4
9f0047da:	6a 00                	push   0x0
9f0047dc:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
9f0047df:	ff 75 18             	push   DWORD PTR [ebp+0x18]
9f0047e2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f0047e5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0047e8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0047eb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0047ee:	e8 af ea ff ff       	call   9f0032a2 <cvt>
9f0047f3:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:630
}
9f0047f6:	c9                   	leave  
9f0047f7:	c3                   	ret    

9f0047f8 <ecvtbuf>:
ecvtbuf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:632

char *ecvtbuf(double arg, int ndigits, int *decpt, int *sign, char *buf) {
9f0047f8:	55                   	push   ebp
9f0047f9:	89 e5                	mov    ebp,esp
9f0047fb:	83 ec 18             	sub    esp,0x18
9f0047fe:	e8 83 19 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004803:	05 f9 49 00 00       	add    eax,0x49f9
9f004808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00480b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00480e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004811:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:633
  return cvt(arg, ndigits, decpt, sign, buf, 1);
9f004814:	83 ec 04             	sub    esp,0x4
9f004817:	6a 01                	push   0x1
9f004819:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
9f00481c:	ff 75 18             	push   DWORD PTR [ebp+0x18]
9f00481f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f004822:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f004825:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f004828:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00482b:	e8 72 ea ff ff       	call   9f0032a2 <cvt>
9f004830:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:634
}
9f004833:	c9                   	leave  
9f004834:	c3                   	ret    

9f004835 <sprintfI>:
sprintfI():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:637

int sprintfI(char *buf, const char *fmt, ...)
{
9f004835:	55                   	push   ebp
9f004836:	89 e5                	mov    ebp,esp
9f004838:	83 ec 18             	sub    esp,0x18
9f00483b:	e8 46 19 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004840:	05 bc 49 00 00       	add    eax,0x49bc
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:641
        va_list args;
        int i;

        va_start(args, fmt);
9f004845:	8d 45 10             	lea    eax,[ebp+0x10]
9f004848:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:642
        i = vsprintf(buf, fmt, args);
9f00484b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00484e:	83 ec 04             	sub    esp,0x4
9f004851:	50                   	push   eax
9f004852:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004855:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004858:	e8 55 fa ff ff       	call   9f0042b2 <vsprintf>
9f00485d:	83 c4 10             	add    esp,0x10
9f004860:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:644
        va_end(args);
        return i;
9f004863:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:645
}
9f004866:	c9                   	leave  
9f004867:	c3                   	ret    

9f004868 <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:18
extern int gets(char* buffer, int maxlen, int stream);


//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
9f004868:	55                   	push   ebp
9f004869:	89 e5                	mov    ebp,esp
9f00486b:	53                   	push   ebx
9f00486c:	83 ec 14             	sub    esp,0x14
9f00486f:	e8 5c 19 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f004874:	81 c3 88 49 00 00    	add    ebx,0x4988
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:20
    char buff[5];
    int buffPtr=0;
9f00487a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:22

    memsetI(buff,0,10);
9f004881:	83 ec 04             	sub    esp,0x4
9f004884:	6a 0a                	push   0xa
9f004886:	6a 00                	push   0x0
9f004888:	8d 45 ef             	lea    eax,[ebp-0x11]
9f00488b:	50                   	push   eax
9f00488c:	e8 7b e2 ff ff       	call   9f002b0c <memsetI>
9f004891:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:25
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
9f004894:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f004897:	8d 50 01             	lea    edx,[eax+0x1]
9f00489a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00489d:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:26
    buff[buffPtr++] = '[';
9f0048a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0048a5:	8d 50 01             	lea    edx,[eax+0x1]
9f0048a8:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0048ab:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:27
    buff[buffPtr++] = '0';
9f0048b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0048b3:	8d 50 01             	lea    edx,[eax+0x1]
9f0048b6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0048b9:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:28
    buff[buffPtr++] = 'K';
9f0048be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0048c1:	8d 50 01             	lea    edx,[eax+0x1]
9f0048c4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0048c7:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:29
    buff[buffPtr] = '\0';
9f0048cc:	8d 55 ef             	lea    edx,[ebp-0x11]
9f0048cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0048d2:	01 d0                	add    eax,edx
9f0048d4:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:30
    printI(buff);
9f0048d7:	83 ec 0c             	sub    esp,0xc
9f0048da:	8d 45 ef             	lea    eax,[ebp-0x11]
9f0048dd:	50                   	push   eax
9f0048de:	e8 ce ce ff ff       	call   9f0017b1 <printI>
9f0048e3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:32
    
    return;
9f0048e6:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:33
}
9f0048e7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0048ea:	c9                   	leave  
9f0048eb:	c3                   	ret    

9f0048ec <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
9f0048ec:	55                   	push   ebp
9f0048ed:	89 e5                	mov    ebp,esp
9f0048ef:	53                   	push   ebx
9f0048f0:	83 ec 04             	sub    esp,0x4
9f0048f3:	e8 d8 18 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f0048f8:	81 c3 04 49 00 00    	add    ebx,0x4904
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     strcpyI (dest + strlenI (dest), src);
9f0048fe:	83 ec 0c             	sub    esp,0xc
9f004901:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004904:	e8 0b 03 00 00       	call   9f004c14 <strlenI>
9f004909:	83 c4 10             	add    esp,0x10
9f00490c:	89 c2                	mov    edx,eax
9f00490e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004911:	01 d0                	add    eax,edx
9f004913:	83 ec 08             	sub    esp,0x8
9f004916:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004919:	50                   	push   eax
9f00491a:	e8 e1 01 00 00       	call   9f004b00 <strcpyI>
9f00491f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
     return dest;
9f004922:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:34
   }
9f004925:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f004928:	c9                   	leave  
9f004929:	c3                   	ret    

9f00492a <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37

   char* strcatI (char *dest, const char *src)
   {
9f00492a:	55                   	push   ebp
9f00492b:	89 e5                	mov    ebp,esp
9f00492d:	53                   	push   ebx
9f00492e:	83 ec 04             	sub    esp,0x4
9f004931:	e8 9a 18 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f004936:	81 c3 c6 48 00 00    	add    ebx,0x48c6
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     strcpyI (dest + strlenI (dest), src);
9f00493c:	83 ec 0c             	sub    esp,0xc
9f00493f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004942:	e8 cd 02 00 00       	call   9f004c14 <strlenI>
9f004947:	83 c4 10             	add    esp,0x10
9f00494a:	89 c2                	mov    edx,eax
9f00494c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00494f:	01 d0                	add    eax,edx
9f004951:	83 ec 08             	sub    esp,0x8
9f004954:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004957:	50                   	push   eax
9f004958:	e8 a3 01 00 00       	call   9f004b00 <strcpyI>
9f00495d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
     return dest;
9f004960:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:40
   }
9f004963:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f004966:	c9                   	leave  
9f004967:	c3                   	ret    

9f004968 <strncatI>:
strncatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:43
   
char *strncatI(char *dest, const char *src, size_t n)
{
9f004968:	55                   	push   ebp
9f004969:	89 e5                	mov    ebp,esp
9f00496b:	53                   	push   ebx
9f00496c:	83 ec 14             	sub    esp,0x14
9f00496f:	e8 5c 18 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f004974:	81 c3 88 48 00 00    	add    ebx,0x4888
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
    size_t bytesToCopy=0;
9f00497a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:45
    size_t srcStringLen=strlenI(src);;
9f004981:	83 ec 0c             	sub    esp,0xc
9f004984:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004987:	e8 88 02 00 00       	call   9f004c14 <strlenI>
9f00498c:	83 c4 10             	add    esp,0x10
9f00498f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
    
    if (n<=srcStringLen)
9f004992:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f004995:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f004998:	77 08                	ja     9f0049a2 <strncatI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:48
        bytesToCopy=n;
9f00499a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00499d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0049a0:	eb 06                	jmp    9f0049a8 <strncatI+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:50
    else
        bytesToCopy=srcStringLen;
9f0049a2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0049a5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
    
     strncpyI (dest + strlenI (dest),src,bytesToCopy);
9f0049a8:	83 ec 0c             	sub    esp,0xc
9f0049ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0049ae:	e8 61 02 00 00       	call   9f004c14 <strlenI>
9f0049b3:	83 c4 10             	add    esp,0x10
9f0049b6:	89 c2                	mov    edx,eax
9f0049b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049bb:	01 d0                	add    eax,edx
9f0049bd:	83 ec 04             	sub    esp,0x4
9f0049c0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0049c3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0049c6:	50                   	push   eax
9f0049c7:	e8 bc 03 00 00       	call   9f004d88 <strncpyI>
9f0049cc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
     return dest;
9f0049cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:54
}
9f0049d2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0049d5:	c9                   	leave  
9f0049d6:	c3                   	ret    

9f0049d7 <strncatINoCheck>:
strncatINoCheck():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:57

char *strncatINoCheck(char *dest, const char *src, size_t n)
{
9f0049d7:	55                   	push   ebp
9f0049d8:	89 e5                	mov    ebp,esp
9f0049da:	53                   	push   ebx
9f0049db:	83 ec 14             	sub    esp,0x14
9f0049de:	e8 ed 17 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f0049e3:	81 c3 19 48 00 00    	add    ebx,0x4819
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
    size_t bytesToCopy=n;
9f0049e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0049ec:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:60
    
     strncpyI (dest + strlenI (dest),src,bytesToCopy);
9f0049ef:	83 ec 0c             	sub    esp,0xc
9f0049f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0049f5:	e8 1a 02 00 00       	call   9f004c14 <strlenI>
9f0049fa:	83 c4 10             	add    esp,0x10
9f0049fd:	89 c2                	mov    edx,eax
9f0049ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a02:	01 d0                	add    eax,edx
9f004a04:	83 ec 04             	sub    esp,0x4
9f004a07:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f004a0a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004a0d:	50                   	push   eax
9f004a0e:	e8 75 03 00 00       	call   9f004d88 <strncpyI>
9f004a13:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:61
     return dest;
9f004a16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:62
}
9f004a19:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f004a1c:	c9                   	leave  
9f004a1d:	c3                   	ret    

9f004a1e <strncat>:
strncat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:65

VISIBLE char *strncat(char *dest, const char *src, size_t n)
{
9f004a1e:	55                   	push   ebp
9f004a1f:	89 e5                	mov    ebp,esp
9f004a21:	83 ec 08             	sub    esp,0x8
9f004a24:	e8 5d 17 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004a29:	05 d3 47 00 00       	add    eax,0x47d3
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:66
    return strncatINoCheck/*strncatI*/(dest, src, n);
9f004a2e:	83 ec 04             	sub    esp,0x4
9f004a31:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f004a34:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004a37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004a3a:	e8 98 ff ff ff       	call   9f0049d7 <strncatINoCheck>
9f004a3f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:67
9f004a42:	c9                   	leave  
9f004a43:	c3                   	ret    

9f004a44 <strcmpI>:
strcmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
   equal to or greater than S2.  */

#include "libChrisOS.h"

int strcmpI (const char *p1, const char *p2)
{
9f004a44:	55                   	push   ebp
9f004a45:	89 e5                	mov    ebp,esp
9f004a47:	56                   	push   esi
9f004a48:	53                   	push   ebx
9f004a49:	83 ec 10             	sub    esp,0x10
9f004a4c:	e8 35 17 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004a51:	05 ab 47 00 00       	add    eax,0x47ab
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:28
  register const unsigned char *s1 = (const unsigned char *) p1;
9f004a56:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:29
  register const unsigned char *s2 = (const unsigned char *) p2;
9f004a59:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
9f004a5c:	89 d8                	mov    eax,ebx
9f004a5e:	8d 58 01             	lea    ebx,[eax+0x1]
9f004a61:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004a64:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
      c2 = (unsigned char) *s2++;
9f004a67:	89 f0                	mov    eax,esi
9f004a69:	8d 70 01             	lea    esi,[eax+0x1]
9f004a6c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004a6f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:36
      if (c1 == '\0')
9f004a72:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f004a76:	75 0e                	jne    9f004a86 <strcmpI+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
	return c1 - c2;
9f004a78:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f004a7c:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f004a80:	29 c2                	sub    edx,eax
9f004a82:	89 d0                	mov    eax,edx
9f004a84:	eb 15                	jmp    9f004a9b <strcmpI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39
    }
  while (c1 == c2);
9f004a86:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
9f004a8a:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
9f004a8d:	74 cd                	je     9f004a5c <strcmpI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:41

  return c1 - c2;
9f004a8f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f004a93:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f004a97:	29 c2                	sub    edx,eax
9f004a99:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:42
}
9f004a9b:	83 c4 10             	add    esp,0x10
9f004a9e:	5b                   	pop    ebx
9f004a9f:	5e                   	pop    esi
9f004aa0:	5d                   	pop    ebp
9f004aa1:	c3                   	ret    

9f004aa2 <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:45

VISIBLE int strcmp(const char *p1, const char *p2)
{
9f004aa2:	55                   	push   ebp
9f004aa3:	89 e5                	mov    ebp,esp
9f004aa5:	e8 dc 16 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004aaa:	05 52 47 00 00       	add    eax,0x4752
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:46
    return strcmpI(p1, p2);
9f004aaf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004ab2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004ab5:	e8 8a ff ff ff       	call   9f004a44 <strcmpI>
9f004aba:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:47
9f004abd:	c9                   	leave  
9f004abe:	c3                   	ret    
9f004abf:	90                   	nop

9f004ac0 <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
9f004ac0:	55                   	push   ebp
9f004ac1:	89 e5                	mov    ebp,esp
9f004ac3:	83 ec 10             	sub    esp,0x10
9f004ac6:	e8 bb 16 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004acb:	05 31 47 00 00       	add    eax,0x4731
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
9f004ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004ad3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
9f004ad6:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
9f004ad7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004ada:	8d 50 01             	lea    edx,[eax+0x1]
9f004add:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f004ae0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f004ae3:	8d 4a 01             	lea    ecx,[edx+0x1]
9f004ae6:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f004ae9:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f004aec:	88 10                	mov    BYTE PTR [eax],dl
9f004aee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004af1:	84 c0                	test   al,al
9f004af3:	75 e2                	jne    9f004ad7 <strcpy+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f004af5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004af8:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
9f004afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
9f004afe:	c9                   	leave  
9f004aff:	c3                   	ret    

9f004b00 <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
9f004b00:	55                   	push   ebp
9f004b01:	89 e5                	mov    ebp,esp
9f004b03:	83 ec 10             	sub    esp,0x10
9f004b06:	e8 7b 16 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004b0b:	05 f1 46 00 00       	add    eax,0x46f1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
9f004b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b13:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
9f004b16:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
9f004b17:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004b1a:	8d 50 01             	lea    edx,[eax+0x1]
9f004b1d:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f004b20:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f004b23:	8d 4a 01             	lea    ecx,[edx+0x1]
9f004b26:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f004b29:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f004b2c:	88 10                	mov    BYTE PTR [eax],dl
9f004b2e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004b31:	84 c0                	test   al,al
9f004b33:	75 e2                	jne    9f004b17 <strcpyI+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f004b35:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004b38:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
9f004b3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
9f004b3e:	c9                   	leave  
9f004b3f:	c3                   	ret    

9f004b40 <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
9f004b40:	55                   	push   ebp
9f004b41:	89 e5                	mov    ebp,esp
9f004b43:	83 ec 10             	sub    esp,0x10
9f004b46:	e8 3b 16 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004b4b:	05 b1 46 00 00       	add    eax,0x46b1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
9f004b50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b53:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
9f004b56:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
9f004b57:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004b5a:	8d 50 01             	lea    edx,[eax+0x1]
9f004b5d:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f004b60:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f004b63:	8d 4a 01             	lea    ecx,[edx+0x1]
9f004b66:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f004b69:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f004b6c:	88 10                	mov    BYTE PTR [eax],dl
9f004b6e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004b71:	84 c0                	test   al,al
9f004b73:	74 0d                	je     9f004b82 <strcpyc+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
9f004b75:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f004b78:	8d 50 ff             	lea    edx,[eax-0x1]
9f004b7b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f004b7e:	85 c0                	test   eax,eax
9f004b80:	75 d5                	jne    9f004b57 <strcpyc+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
9f004b82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
9f004b85:	c9                   	leave  
9f004b86:	c3                   	ret    
9f004b87:	90                   	nop

9f004b88 <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
9f004b88:	55                   	push   ebp
9f004b89:	89 e5                	mov    ebp,esp
9f004b8b:	83 ec 04             	sub    esp,0x4
9f004b8e:	e8 f3 15 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004b93:	05 69 46 00 00       	add    eax,0x4669
9f004b98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b9b:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
9f004b9e:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
9f004ba2:	7e 0d                	jle    9f004bb1 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
9f004ba4:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
9f004ba8:	7f 07                	jg     9f004bb1 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
9f004baa:	b8 01 00 00 00       	mov    eax,0x1
9f004baf:	eb 05                	jmp    9f004bb6 <check_digit+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
9f004bb1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
9f004bb6:	c9                   	leave  
9f004bb7:	c3                   	ret    

9f004bb8 <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
9f004bb8:	55                   	push   ebp
9f004bb9:	89 e5                	mov    ebp,esp
9f004bbb:	83 ec 10             	sub    esp,0x10
9f004bbe:	e8 c3 15 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004bc3:	05 39 46 00 00       	add    eax,0x4639
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
9f004bc8:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
9f004bcf:	eb 27                	jmp    9f004bf8 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
9f004bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004bd4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004bd7:	89 c2                	mov    edx,eax
9f004bd9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004bdc:	01 d0                	add    eax,edx
9f004bde:	0f be c0             	movsx  eax,al
9f004be1:	50                   	push   eax
9f004be2:	e8 a1 ff ff ff       	call   9f004b88 <check_digit>
9f004be7:	83 c4 04             	add    esp,0x4
9f004bea:	83 f0 01             	xor    eax,0x1
9f004bed:	84 c0                	test   al,al
9f004bef:	74 07                	je     9f004bf8 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
9f004bf1:	b8 00 00 00 00       	mov    eax,0x0
9f004bf6:	eb 17                	jmp    9f004c0f <strisnum+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18

VISIBLE bool strisnum(char* str)
{
    int cnt=0;
    
    while (*str+cnt)
9f004bf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004bfb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004bfe:	0f be d0             	movsx  edx,al
9f004c01:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004c04:	01 d0                	add    eax,edx
9f004c06:	85 c0                	test   eax,eax
9f004c08:	75 c7                	jne    9f004bd1 <strisnum+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
        if (!check_digit(*str+cnt))
            return false;
    return true;
9f004c0a:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
9f004c0f:	c9                   	leave  
9f004c10:	c3                   	ret    
9f004c11:	66 90                	xchg   ax,ax
9f004c13:	90                   	nop

9f004c14 <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
//#include <stddef.h>
#include "libChrisOS.h"

size_t strlenI(const char* str) {
9f004c14:	55                   	push   ebp
9f004c15:	89 e5                	mov    ebp,esp
9f004c17:	83 ec 10             	sub    esp,0x10
9f004c1a:	e8 67 15 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004c1f:	05 dd 45 00 00       	add    eax,0x45dd
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
          size_t ret = 0;
9f004c24:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
        while ( str[ret] != 0 )
9f004c2b:	eb 04                	jmp    9f004c31 <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
9f004c2d:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
//#include <stddef.h>
#include "libChrisOS.h"

size_t strlenI(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
9f004c31:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f004c34:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004c37:	01 d0                	add    eax,edx
9f004c39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004c3c:	84 c0                	test   al,al
9f004c3e:	75 ed                	jne    9f004c2d <strlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
                ret++;
        return ret;
9f004c40:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:9
}
9f004c43:	c9                   	leave  
9f004c44:	c3                   	ret    

9f004c45 <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12

__attribute__((visibility("default"))) size_t strlen(const char* str) 
{
9f004c45:	55                   	push   ebp
9f004c46:	89 e5                	mov    ebp,esp
9f004c48:	e8 39 15 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004c4d:	05 af 45 00 00       	add    eax,0x45af
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
    return strlenI(str);
9f004c52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004c55:	e8 ba ff ff ff       	call   9f004c14 <strlenI>
9f004c5a:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
}
9f004c5d:	c9                   	leave  
9f004c5e:	c3                   	ret    

9f004c5f <strnlenI>:
strnlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:17

size_t strnlenI(const char* str, size_t maxlen)
{
9f004c5f:	55                   	push   ebp
9f004c60:	89 e5                	mov    ebp,esp
9f004c62:	83 ec 10             	sub    esp,0x10
9f004c65:	e8 1c 15 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004c6a:	05 92 45 00 00       	add    eax,0x4592
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:18
  size_t ret = 0;
9f004c6f:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19
  while ( str[ret] != 0 && ret<maxlen)
9f004c76:	eb 04                	jmp    9f004c7c <strnlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:20
          ret++;
9f004c78:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19
}

size_t strnlenI(const char* str, size_t maxlen)
{
  size_t ret = 0;
  while ( str[ret] != 0 && ret<maxlen)
9f004c7c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f004c7f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004c82:	01 d0                	add    eax,edx
9f004c84:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004c87:	84 c0                	test   al,al
9f004c89:	74 08                	je     9f004c93 <strnlenI+0x34>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19 (discriminator 1)
9f004c8b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004c8e:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f004c91:	72 e5                	jb     9f004c78 <strnlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:21
          ret++;
  return ret;
9f004c93:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:22
}
9f004c96:	c9                   	leave  
9f004c97:	c3                   	ret    

9f004c98 <strnlen>:
strnlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:25

VISIBLE size_t strnlen(const char* str, int maxlen)
{
9f004c98:	55                   	push   ebp
9f004c99:	89 e5                	mov    ebp,esp
9f004c9b:	e8 e6 14 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004ca0:	05 5c 45 00 00       	add    eax,0x455c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:26
    return strnlenI(str, maxlen);
9f004ca5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004ca8:	50                   	push   eax
9f004ca9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004cac:	e8 ae ff ff ff       	call   9f004c5f <strnlenI>
9f004cb1:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:27
9f004cb4:	c9                   	leave  
9f004cb5:	c3                   	ret    
9f004cb6:	66 90                	xchg   ax,ax

9f004cb8 <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
9f004cb8:	55                   	push   ebp
9f004cb9:	89 e5                	mov    ebp,esp
9f004cbb:	e8 c6 14 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004cc0:	05 3c 45 00 00       	add    eax,0x453c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
9f004cc5:	eb 4b                	jmp    9f004d12 <strncmp+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
9f004cc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004cca:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f004ccd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004cd0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004cd3:	38 c2                	cmp    dl,al
9f004cd5:	74 1e                	je     9f004cf5 <strncmp+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f004cd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004cda:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f004cdd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004ce0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004ce3:	38 c2                	cmp    dl,al
9f004ce5:	73 07                	jae    9f004cee <strncmp+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
9f004ce7:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f004cec:	eb 2f                	jmp    9f004d1d <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
9f004cee:	b8 01 00 00 00       	mov    eax,0x1
9f004cf3:	eb 28                	jmp    9f004d1d <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
9f004cf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004cf8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004cfb:	84 c0                	test   al,al
9f004cfd:	75 07                	jne    9f004d06 <strncmp+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
9f004cff:	b8 00 00 00 00       	mov    eax,0x0
9f004d04:	eb 17                	jmp    9f004d1d <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f004d06:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f004d0a:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f004d0e:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
9f004d12:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f004d16:	75 af                	jne    9f004cc7 <strncmp+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f004d18:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
9f004d1d:	5d                   	pop    ebp
9f004d1e:	c3                   	ret    

9f004d1f <strncmpI>:
strncmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:23

int strncmpI(const char *s1, const char *s2, size_t n)
{
9f004d1f:	55                   	push   ebp
9f004d20:	89 e5                	mov    ebp,esp
9f004d22:	e8 5f 14 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004d27:	05 d5 44 00 00       	add    eax,0x44d5
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
9f004d2c:	eb 4b                	jmp    9f004d79 <strncmpI+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:25
	if (*s1 != *s2)
9f004d2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004d31:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f004d34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004d37:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004d3a:	38 c2                	cmp    dl,al
9f004d3c:	74 1e                	je     9f004d5c <strncmpI+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f004d3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004d41:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f004d44:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004d47:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004d4a:	38 c2                	cmp    dl,al
9f004d4c:	73 07                	jae    9f004d55 <strncmpI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 1)
9f004d4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f004d53:	eb 2f                	jmp    9f004d84 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 2)
9f004d55:	b8 01 00 00 00       	mov    eax,0x1
9f004d5a:	eb 28                	jmp    9f004d84 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:27
	else if (*s1 == '\0')
9f004d5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004d5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004d62:	84 c0                	test   al,al
9f004d64:	75 07                	jne    9f004d6d <strncmpI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:28
	    return 0;
9f004d66:	b8 00 00 00 00       	mov    eax,0x0
9f004d6b:	eb 17                	jmp    9f004d84 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    return 0;
}

int strncmpI(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f004d6d:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f004d71:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f004d75:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24 (discriminator 1)
9f004d79:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f004d7d:	75 af                	jne    9f004d2e <strncmpI+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:29
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f004d7f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:30
}
9f004d84:	5d                   	pop    ebp
9f004d85:	c3                   	ret    
9f004d86:	66 90                	xchg   ax,ax

9f004d88 <strncpyI>:
strncpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
9f004d88:	55                   	push   ebp
9f004d89:	89 e5                	mov    ebp,esp
9f004d8b:	83 ec 10             	sub    esp,0x10
9f004d8e:	e8 f3 13 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004d93:	05 69 44 00 00       	add    eax,0x4469
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
9f004d98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004d9b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
9f004d9e:	eb 1b                	jmp    9f004dbb <strncpyI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
9f004da0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004da3:	8d 50 01             	lea    edx,[eax+0x1]
9f004da6:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f004da9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f004dac:	8d 4a 01             	lea    ecx,[edx+0x1]
9f004daf:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f004db2:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f004db5:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
9f004db7:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
9f004dbb:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f004dbf:	74 1c                	je     9f004ddd <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
9f004dc1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004dc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004dc7:	84 c0                	test   al,al
9f004dc9:	75 d5                	jne    9f004da0 <strncpyI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f004dcb:	eb 10                	jmp    9f004ddd <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
9f004dcd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004dd0:	8d 50 01             	lea    edx,[eax+0x1]
9f004dd3:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f004dd6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
9f004dd9:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f004ddd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f004de1:	75 ea                	jne    9f004dcd <strncpyI+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    if (n==0)
9f004de3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f004de7:	75 06                	jne    9f004def <strncpyI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
        *s='\0';
9f004de9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f004dec:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:26
    return s1;
9f004def:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:27
}
9f004df2:	c9                   	leave  
9f004df3:	c3                   	ret    

9f004df4 <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:30

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
9f004df4:	55                   	push   ebp
9f004df5:	89 e5                	mov    ebp,esp
9f004df7:	e8 8a 13 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004dfc:	05 00 44 00 00       	add    eax,0x4400
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:31
    return strncpyI(s1, s2, n);
9f004e01:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f004e04:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004e07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004e0a:	e8 79 ff ff ff       	call   9f004d88 <strncpyI>
9f004e0f:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:32
}
9f004e12:	c9                   	leave  
9f004e13:	c3                   	ret    

9f004e14 <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
9f004e14:	55                   	push   ebp
9f004e15:	89 e5                	mov    ebp,esp
9f004e17:	57                   	push   edi
9f004e18:	56                   	push   esi
9f004e19:	53                   	push   ebx
9f004e1a:	83 ec 08             	sub    esp,0x8
9f004e1d:	e8 64 13 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004e22:	05 da 43 00 00       	add    eax,0x43da
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
9f004e27:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f004e2a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
9f004e31:	89 f0                	mov    eax,esi
9f004e33:	8d 70 01             	lea    esi,[eax+0x1]
9f004e36:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004e39:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
9f004e3c:	83 fb 20             	cmp    ebx,0x20
9f004e3f:	74 f0                	je     9f004e31 <strtoul+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
9f004e41:	83 fb 2d             	cmp    ebx,0x2d
9f004e44:	75 14                	jne    9f004e5a <strtoul+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
9f004e46:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
9f004e4d:	89 f0                	mov    eax,esi
9f004e4f:	8d 70 01             	lea    esi,[eax+0x1]
9f004e52:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004e55:	0f be d8             	movsx  ebx,al
9f004e58:	eb 10                	jmp    9f004e6a <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
9f004e5a:	83 fb 2b             	cmp    ebx,0x2b
9f004e5d:	75 0b                	jne    9f004e6a <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
9f004e5f:	89 f0                	mov    eax,esi
9f004e61:	8d 70 01             	lea    esi,[eax+0x1]
9f004e64:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004e67:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
9f004e6a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f004e6e:	74 06                	je     9f004e76 <strtoul+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
9f004e70:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f004e74:	75 26                	jne    9f004e9c <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
9f004e76:	83 fb 30             	cmp    ebx,0x30
9f004e79:	75 21                	jne    9f004e9c <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f004e7b:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f004e7e:	3c 78                	cmp    al,0x78
9f004e80:	74 07                	je     9f004e89 <strtoul+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
9f004e82:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f004e85:	3c 58                	cmp    al,0x58
9f004e87:	75 13                	jne    9f004e9c <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
9f004e89:	8d 46 01             	lea    eax,[esi+0x1]
9f004e8c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004e8f:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
9f004e92:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
9f004e95:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
9f004e9c:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f004ea0:	75 14                	jne    9f004eb6 <strtoul+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
9f004ea2:	83 fb 30             	cmp    ebx,0x30
9f004ea5:	75 07                	jne    9f004eae <strtoul+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
9f004ea7:	b8 08 00 00 00       	mov    eax,0x8
9f004eac:	eb 05                	jmp    9f004eb3 <strtoul+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
9f004eae:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
9f004eb3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
9f004eb6:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f004eb9:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f004ebe:	ba 00 00 00 00       	mov    edx,0x0
9f004ec3:	f7 f1                	div    ecx
9f004ec5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
9f004ec8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f004ecb:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f004ed0:	ba 00 00 00 00       	mov    edx,0x0
9f004ed5:	f7 f1                	div    ecx
9f004ed7:	89 d0                	mov    eax,edx
9f004ed9:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
9f004edb:	bf 00 00 00 00       	mov    edi,0x0
9f004ee0:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
9f004ee5:	8d 43 d0             	lea    eax,[ebx-0x30]
9f004ee8:	83 f8 09             	cmp    eax,0x9
9f004eeb:	77 05                	ja     9f004ef2 <strtoul+0xde>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
9f004eed:	83 eb 30             	sub    ebx,0x30
9f004ef0:	eb 25                	jmp    9f004f17 <strtoul+0x103>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
9f004ef2:	89 d8                	mov    eax,ebx
9f004ef4:	83 c8 20             	or     eax,0x20
9f004ef7:	83 e8 61             	sub    eax,0x61
9f004efa:	83 f8 19             	cmp    eax,0x19
9f004efd:	77 56                	ja     9f004f55 <strtoul+0x141>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f004eff:	83 fb 40             	cmp    ebx,0x40
9f004f02:	7e 0c                	jle    9f004f10 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
9f004f04:	83 fb 5a             	cmp    ebx,0x5a
9f004f07:	7f 07                	jg     9f004f10 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
9f004f09:	b8 37 00 00 00       	mov    eax,0x37
9f004f0e:	eb 05                	jmp    9f004f15 <strtoul+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
9f004f10:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
9f004f15:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
9f004f17:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f004f1a:	7d 3c                	jge    9f004f58 <strtoul+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f004f1c:	89 c8                	mov    eax,ecx
9f004f1e:	85 c0                	test   eax,eax
9f004f20:	78 10                	js     9f004f32 <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
9f004f22:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f004f25:	77 0b                	ja     9f004f32 <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
9f004f27:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f004f2a:	75 0d                	jne    9f004f39 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
9f004f2c:	89 d0                	mov    eax,edx
9f004f2e:	39 c3                	cmp    ebx,eax
9f004f30:	7e 07                	jle    9f004f39 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
9f004f32:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f004f37:	eb 0f                	jmp    9f004f48 <strtoul+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
9f004f39:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
9f004f3e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f004f41:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
9f004f44:	89 d8                	mov    eax,ebx
9f004f46:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f004f48:	89 f0                	mov    eax,esi
9f004f4a:	8d 70 01             	lea    esi,[eax+0x1]
9f004f4d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004f50:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f004f53:	eb 90                	jmp    9f004ee5 <strtoul+0xd1>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f004f55:	90                   	nop
9f004f56:	eb 01                	jmp    9f004f59 <strtoul+0x145>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
9f004f58:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f004f59:	89 c8                	mov    eax,ecx
9f004f5b:	85 c0                	test   eax,eax
9f004f5d:	79 07                	jns    9f004f66 <strtoul+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
9f004f5f:	bf ff ff ff ff       	mov    edi,0xffffffff
9f004f64:	eb 08                	jmp    9f004f6e <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
9f004f66:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f004f6a:	74 02                	je     9f004f6e <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
9f004f6c:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
9f004f6e:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f004f72:	74 13                	je     9f004f87 <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
9f004f74:	89 c8                	mov    eax,ecx
9f004f76:	85 c0                	test   eax,eax
9f004f78:	74 05                	je     9f004f7f <strtoul+0x16b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
9f004f7a:	8d 46 ff             	lea    eax,[esi-0x1]
9f004f7d:	eb 03                	jmp    9f004f82 <strtoul+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
9f004f7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
9f004f82:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f004f85:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
9f004f87:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
9f004f89:	83 c4 08             	add    esp,0x8
9f004f8c:	5b                   	pop    ebx
9f004f8d:	5e                   	pop    esi
9f004f8e:	5f                   	pop    edi
9f004f8f:	5d                   	pop    ebp
9f004f90:	c3                   	ret    
9f004f91:	66 90                	xchg   ax,ax
9f004f93:	90                   	nop

9f004f94 <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
9f004f94:	55                   	push   ebp
9f004f95:	89 e5                	mov    ebp,esp
9f004f97:	e8 ea 11 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004f9c:	05 60 42 00 00       	add    eax,0x4260
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
9f004fa1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f004fa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004fa7:	01 d0                	add    eax,edx
9f004fa9:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
9f004fac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
9f004faf:	5d                   	pop    ebp
9f004fb0:	c3                   	ret    
9f004fb1:	66 90                	xchg   ax,ax
9f004fb3:	90                   	nop

9f004fb4 <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
9f004fb4:	55                   	push   ebp
9f004fb5:	89 e5                	mov    ebp,esp
9f004fb7:	57                   	push   edi
9f004fb8:	56                   	push   esi
9f004fb9:	53                   	push   ebx
9f004fba:	83 ec 0c             	sub    esp,0xc
9f004fbd:	e8 c4 11 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f004fc2:	05 3a 42 00 00       	add    eax,0x423a
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
9f004fc7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f004fca:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
9f004fd1:	89 f0                	mov    eax,esi
9f004fd3:	8d 70 01             	lea    esi,[eax+0x1]
9f004fd6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004fd9:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
9f004fdc:	83 fb 20             	cmp    ebx,0x20
9f004fdf:	74 f0                	je     9f004fd1 <strtol+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
9f004fe1:	83 fb 2d             	cmp    ebx,0x2d
9f004fe4:	75 14                	jne    9f004ffa <strtol+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
9f004fe6:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
9f004fed:	89 f0                	mov    eax,esi
9f004fef:	8d 70 01             	lea    esi,[eax+0x1]
9f004ff2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004ff5:	0f be d8             	movsx  ebx,al
9f004ff8:	eb 10                	jmp    9f00500a <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
9f004ffa:	83 fb 2b             	cmp    ebx,0x2b
9f004ffd:	75 0b                	jne    9f00500a <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
9f004fff:	89 f0                	mov    eax,esi
9f005001:	8d 70 01             	lea    esi,[eax+0x1]
9f005004:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f005007:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
9f00500a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f00500e:	74 06                	je     9f005016 <strtol+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
9f005010:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f005014:	75 26                	jne    9f00503c <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
9f005016:	83 fb 30             	cmp    ebx,0x30
9f005019:	75 21                	jne    9f00503c <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f00501b:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f00501e:	3c 78                	cmp    al,0x78
9f005020:	74 07                	je     9f005029 <strtol+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
9f005022:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f005025:	3c 58                	cmp    al,0x58
9f005027:	75 13                	jne    9f00503c <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
9f005029:	8d 46 01             	lea    eax,[esi+0x1]
9f00502c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00502f:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
9f005032:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
9f005035:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
9f00503c:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f005040:	75 14                	jne    9f005056 <strtol+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
9f005042:	83 fb 30             	cmp    ebx,0x30
9f005045:	75 07                	jne    9f00504e <strtol+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
9f005047:	b8 08 00 00 00       	mov    eax,0x8
9f00504c:	eb 05                	jmp    9f005053 <strtol+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
9f00504e:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
9f005053:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
9f005056:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00505a:	74 07                	je     9f005063 <strtol+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
9f00505c:	b8 00 00 00 80       	mov    eax,0x80000000
9f005061:	eb 05                	jmp    9f005068 <strtol+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
9f005063:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
9f005068:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00506b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f00506e:	ba 00 00 00 00       	mov    edx,0x0
9f005073:	f7 f1                	div    ecx
9f005075:	89 d1                	mov    ecx,edx
9f005077:	89 c8                	mov    eax,ecx
9f005079:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
9f00507c:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
9f00507f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f005082:	ba 00 00 00 00       	mov    edx,0x0
9f005087:	f7 f7                	div    edi
9f005089:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
9f00508c:	bf 00 00 00 00       	mov    edi,0x0
9f005091:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
9f005096:	8d 43 d0             	lea    eax,[ebx-0x30]
9f005099:	83 f8 09             	cmp    eax,0x9
9f00509c:	77 05                	ja     9f0050a3 <strtol+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
9f00509e:	83 eb 30             	sub    ebx,0x30
9f0050a1:	eb 25                	jmp    9f0050c8 <strtol+0x114>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
9f0050a3:	89 d8                	mov    eax,ebx
9f0050a5:	83 c8 20             	or     eax,0x20
9f0050a8:	83 e8 61             	sub    eax,0x61
9f0050ab:	83 f8 19             	cmp    eax,0x19
9f0050ae:	77 55                	ja     9f005105 <strtol+0x151>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f0050b0:	83 fb 40             	cmp    ebx,0x40
9f0050b3:	7e 0c                	jle    9f0050c1 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
9f0050b5:	83 fb 5a             	cmp    ebx,0x5a
9f0050b8:	7f 07                	jg     9f0050c1 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
9f0050ba:	b8 37 00 00 00       	mov    eax,0x37
9f0050bf:	eb 05                	jmp    9f0050c6 <strtol+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
9f0050c1:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
9f0050c6:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
9f0050c8:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f0050cb:	7d 3b                	jge    9f005108 <strtol+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f0050cd:	89 c8                	mov    eax,ecx
9f0050cf:	85 c0                	test   eax,eax
9f0050d1:	78 0f                	js     9f0050e2 <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
9f0050d3:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f0050d6:	77 0a                	ja     9f0050e2 <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
9f0050d8:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f0050db:	75 0c                	jne    9f0050e9 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
9f0050dd:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
9f0050e0:	7e 07                	jle    9f0050e9 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
9f0050e2:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f0050e7:	eb 0f                	jmp    9f0050f8 <strtol+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
9f0050e9:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
9f0050ee:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0050f1:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
9f0050f4:	89 d8                	mov    eax,ebx
9f0050f6:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f0050f8:	89 f0                	mov    eax,esi
9f0050fa:	8d 70 01             	lea    esi,[eax+0x1]
9f0050fd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f005100:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f005103:	eb 91                	jmp    9f005096 <strtol+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f005105:	90                   	nop
9f005106:	eb 01                	jmp    9f005109 <strtol+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
9f005108:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f005109:	89 c8                	mov    eax,ecx
9f00510b:	85 c0                	test   eax,eax
9f00510d:	79 16                	jns    9f005125 <strtol+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
9f00510f:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f005113:	74 07                	je     9f00511c <strtol+0x168>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
9f005115:	b8 00 00 00 80       	mov    eax,0x80000000
9f00511a:	eb 05                	jmp    9f005121 <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
9f00511c:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
9f005121:	89 c7                	mov    edi,eax
9f005123:	eb 08                	jmp    9f00512d <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
9f005125:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f005129:	74 02                	je     9f00512d <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
9f00512b:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
9f00512d:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f005131:	74 13                	je     9f005146 <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
9f005133:	89 c8                	mov    eax,ecx
9f005135:	85 c0                	test   eax,eax
9f005137:	74 05                	je     9f00513e <strtol+0x18a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
9f005139:	8d 46 ff             	lea    eax,[esi-0x1]
9f00513c:	eb 03                	jmp    9f005141 <strtol+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
9f00513e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
9f005141:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f005144:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
9f005146:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
9f005148:	83 c4 0c             	add    esp,0xc
9f00514b:	5b                   	pop    ebx
9f00514c:	5e                   	pop    esi
9f00514d:	5f                   	pop    edi
9f00514e:	5d                   	pop    ebp
9f00514f:	c3                   	ret    

9f005150 <strtrimI>:
strtrimI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

void strtrimI(char *input)
{
9f005150:	55                   	push   ebp
9f005151:	89 e5                	mov    ebp,esp
9f005153:	53                   	push   ebx
9f005154:	83 ec 14             	sub    esp,0x14
9f005157:	e8 2a 10 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f00515c:	05 a0 40 00 00       	add    eax,0x40a0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
9f005161:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f005164:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f005167:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00516a:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f00516d:	eb 04                	jmp    9f005173 <strtrimI+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
9f00516f:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *dst = input, *src = input;
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f005173:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f005176:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f005179:	80 fa 20             	cmp    dl,0x20
9f00517c:	74 f1                	je     9f00516f <strtrimI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
      ++src;
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
9f00517e:	83 ec 0c             	sub    esp,0xc
9f005181:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f005184:	89 c3                	mov    ebx,eax
9f005186:	e8 89 fa ff ff       	call   9f004c14 <strlenI>
9f00518b:	83 c4 10             	add    esp,0x10
9f00518e:	8d 50 ff             	lea    edx,[eax-0x1]
9f005191:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f005194:	01 d0                	add    eax,edx
9f005196:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
9f005199:	eb 0c                	jmp    9f0051a7 <strtrimI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
9f00519b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00519e:	8d 50 ff             	lea    edx,[eax-0x1]
9f0051a1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
9f0051a4:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
   while (end > src && *end==' ')
9f0051a7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0051aa:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0051ad:	76 0a                	jbe    9f0051b9 <strtrimI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
9f0051af:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0051b2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0051b5:	3c 20                	cmp    al,0x20
9f0051b7:	74 e2                	je     9f00519b <strtrimI+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
      *end-- = 0;
   }

   // Move if needed.
   //
   if (src != dst)
9f0051b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0051bc:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0051bf:	74 1f                	je     9f0051e0 <strtrimI+0x90>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
9f0051c1:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
9f0051c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0051c5:	8d 50 01             	lea    edx,[eax+0x1]
9f0051c8:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0051cb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0051ce:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0051d1:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
9f0051d4:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0051d7:	88 10                	mov    BYTE PTR [eax],dl
9f0051d9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0051dc:	84 c0                	test   al,al
9f0051de:	75 e2                	jne    9f0051c2 <strtrimI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
9f0051e0:	90                   	nop
9f0051e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0051e4:	c9                   	leave  
9f0051e5:	c3                   	ret    

9f0051e6 <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:32

__attribute__((visibility("default"))) void strtrim(char *input)
{
9f0051e6:	55                   	push   ebp
9f0051e7:	89 e5                	mov    ebp,esp
9f0051e9:	83 ec 08             	sub    esp,0x8
9f0051ec:	e8 95 0f 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0051f1:	05 0b 40 00 00       	add    eax,0x400b
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:33
    return strtrimI(input);
9f0051f6:	83 ec 0c             	sub    esp,0xc
9f0051f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0051fc:	e8 4f ff ff ff       	call   9f005150 <strtrimI>
9f005201:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:34
}
9f005204:	c9                   	leave  
9f005205:	c3                   	ret    
9f005206:	66 90                	xchg   ax,ax

9f005208 <strreplaceI>:
strreplaceI():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:14



///NOTE: outString has to be big enough to hold the modified string
char *strreplaceI(const char *in, const char *pattern, const char *by, char *outString)
{
9f005208:	55                   	push   ebp
9f005209:	89 e5                	mov    ebp,esp
9f00520b:	56                   	push   esi
9f00520c:	53                   	push   ebx
9f00520d:	83 ec 10             	sub    esp,0x10
9f005210:	e8 bb 0f 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f005215:	81 c3 e7 3f 00 00    	add    ebx,0x3fe7
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:15
    size_t outsize = strlenI(in) + 1;
9f00521b:	83 ec 0c             	sub    esp,0xc
9f00521e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f005221:	e8 ee f9 ff ff       	call   9f004c14 <strlenI>
9f005226:	83 c4 10             	add    esp,0x10
9f005229:	83 c0 01             	add    eax,0x1
9f00522c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:18
    // TODO maybe avoid reallocing by counting the non-overlapping occurences of pattern
    // use this to iterate over the output
    size_t resoffset = 0;
9f00522f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:20
    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f005236:	e9 ac 00 00 00       	jmp    9f0052e7 <strreplaceI+0xdf>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:22
        // copy everything up to the pattern
        memcpyI(outString + resoffset, in, needle - in);
9f00523b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00523e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005241:	29 c2                	sub    edx,eax
9f005243:	89 d0                	mov    eax,edx
9f005245:	89 c1                	mov    ecx,eax
9f005247:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f00524a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00524d:	01 d0                	add    eax,edx
9f00524f:	83 ec 04             	sub    esp,0x4
9f005252:	51                   	push   ecx
9f005253:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f005256:	50                   	push   eax
9f005257:	e8 f4 d6 ff ff       	call   9f002950 <memcpyI>
9f00525c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:23
        resoffset += needle - in;
9f00525f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f005262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005265:	29 c2                	sub    edx,eax
9f005267:	89 d0                	mov    eax,edx
9f005269:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:26

        // skip the pattern in the input-string
        in = needle + strlenI(pattern);
9f00526c:	83 ec 0c             	sub    esp,0xc
9f00526f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f005272:	e8 9d f9 ff ff       	call   9f004c14 <strlenI>
9f005277:	83 c4 10             	add    esp,0x10
9f00527a:	89 c2                	mov    edx,eax
9f00527c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00527f:	01 d0                	add    eax,edx
9f005281:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:29

        // adjust space for replacement
        outsize = outsize - strlenI(pattern) + strlenI(by);
9f005284:	83 ec 0c             	sub    esp,0xc
9f005287:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00528a:	e8 85 f9 ff ff       	call   9f004c14 <strlenI>
9f00528f:	83 c4 10             	add    esp,0x10
9f005292:	89 c2                	mov    edx,eax
9f005294:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f005297:	29 d0                	sub    eax,edx
9f005299:	89 c6                	mov    esi,eax
9f00529b:	83 ec 0c             	sub    esp,0xc
9f00529e:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0052a1:	e8 6e f9 ff ff       	call   9f004c14 <strlenI>
9f0052a6:	83 c4 10             	add    esp,0x10
9f0052a9:	01 f0                	add    eax,esi
9f0052ab:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:32

        // copy the pattern
        memcpyI(outString + resoffset, by, strlenI(by));
9f0052ae:	83 ec 0c             	sub    esp,0xc
9f0052b1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0052b4:	e8 5b f9 ff ff       	call   9f004c14 <strlenI>
9f0052b9:	83 c4 10             	add    esp,0x10
9f0052bc:	89 c1                	mov    ecx,eax
9f0052be:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f0052c1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0052c4:	01 d0                	add    eax,edx
9f0052c6:	83 ec 04             	sub    esp,0x4
9f0052c9:	51                   	push   ecx
9f0052ca:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0052cd:	50                   	push   eax
9f0052ce:	e8 7d d6 ff ff       	call   9f002950 <memcpyI>
9f0052d3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:33
        resoffset += strlenI(by);
9f0052d6:	83 ec 0c             	sub    esp,0xc
9f0052d9:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0052dc:	e8 33 f9 ff ff       	call   9f004c14 <strlenI>
9f0052e1:	83 c4 10             	add    esp,0x10
9f0052e4:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:20
    size_t outsize = strlenI(in) + 1;
    // TODO maybe avoid reallocing by counting the non-overlapping occurences of pattern
    // use this to iterate over the output
    size_t resoffset = 0;
    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f0052e7:	83 ec 08             	sub    esp,0x8
9f0052ea:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0052ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0052f0:	e8 f5 00 00 00       	call   9f0053ea <strstrI>
9f0052f5:	83 c4 10             	add    esp,0x10
9f0052f8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f0052fb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f0052ff:	0f 85 36 ff ff ff    	jne    9f00523b <strreplaceI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:37
        memcpyI(outString + resoffset, by, strlenI(by));
        resoffset += strlenI(by);
    }

    // copy the remaining input
    strcpyI(outString + resoffset, in);
9f005305:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f005308:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00530b:	01 d0                	add    eax,edx
9f00530d:	83 ec 08             	sub    esp,0x8
9f005310:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f005313:	50                   	push   eax
9f005314:	e8 e7 f7 ff ff       	call   9f004b00 <strcpyI>
9f005319:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:39

    return outString;
9f00531c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:40
}
9f00531f:	8d 65 f8             	lea    esp,[ebp-0x8]
9f005322:	5b                   	pop    ebx
9f005323:	5e                   	pop    esi
9f005324:	5d                   	pop    ebp
9f005325:	c3                   	ret    

9f005326 <strreplace>:
strreplace():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:43

VISIBLE char *strreplace(const char *in, const char *pattern, const char *by, char *outString)
{
9f005326:	55                   	push   ebp
9f005327:	89 e5                	mov    ebp,esp
9f005329:	83 ec 08             	sub    esp,0x8
9f00532c:	e8 55 0e 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f005331:	05 cb 3e 00 00       	add    eax,0x3ecb
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:44
    return strreplaceI(in, pattern, by, outString);
9f005336:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f005339:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f00533c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00533f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f005342:	e8 c1 fe ff ff       	call   9f005208 <strreplaceI>
9f005347:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:45
}
9f00534a:	c9                   	leave  
9f00534b:	c3                   	ret    

9f00534c <strnstrI>:
strnstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:53

#include "strings.h"
#include "common.h"

char* strnstrI(char* string, char* substring, int length)
{
9f00534c:	55                   	push   ebp
9f00534d:	89 e5                	mov    ebp,esp
9f00534f:	56                   	push   esi
9f005350:	53                   	push   ebx
9f005351:	83 ec 10             	sub    esp,0x10
9f005354:	e8 2d 0e 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f005359:	05 a3 3e 00 00       	add    eax,0x3ea3
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:60

    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */
    int len=length;
9f00535e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f005361:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
    
    b = substring;
9f005364:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:63
    if (*b == 0) {
9f005367:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f00536a:	84 c0                	test   al,al
9f00536c:	75 66                	jne    9f0053d4 <strnstrI+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64
	return string;
9f00536e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005371:	eb 70                	jmp    9f0053e3 <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:67
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f005373:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005376:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f005379:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f00537c:	38 c2                	cmp    dl,al
9f00537e:	74 12                	je     9f005392 <strnstrI+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
            if (len--<=0)
9f005380:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f005383:	8d 50 ff             	lea    edx,[eax-0x1]
9f005386:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f005389:	85 c0                	test   eax,eax
9f00538b:	7f 42                	jg     9f0053cf <strnstrI+0x83>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:69
                return string;
9f00538d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005390:	eb 51                	jmp    9f0053e3 <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:72
	    continue;
	}
	a = string;
9f005392:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
	while (1) {
	    if (*b == 0) {
9f005395:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f005398:	84 c0                	test   al,al
9f00539a:	75 05                	jne    9f0053a1 <strnstrI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:75
		return string;
9f00539c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00539f:	eb 42                	jmp    9f0053e3 <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
	    }
            if (len--<=0)
9f0053a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0053a4:	8d 50 ff             	lea    edx,[eax-0x1]
9f0053a7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0053aa:	85 c0                	test   eax,eax
9f0053ac:	7f 05                	jg     9f0053b3 <strnstrI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:78
                return string;
9f0053ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0053b1:	eb 30                	jmp    9f0053e3 <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
	    if (*a++ != *b++) {
9f0053b3:	89 f0                	mov    eax,esi
9f0053b5:	8d 70 01             	lea    esi,[eax+0x1]
9f0053b8:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0053bb:	89 d8                	mov    eax,ebx
9f0053bd:	8d 58 01             	lea    ebx,[eax+0x1]
9f0053c0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0053c3:	38 c2                	cmp    dl,al
9f0053c5:	75 02                	jne    9f0053c9 <strnstrI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:82
		break;
	    }
	}
9f0053c7:	eb cc                	jmp    9f005395 <strnstrI+0x49>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:80
		return string;
	    }
            if (len--<=0)
                return string;
	    if (*a++ != *b++) {
		break;
9f0053c9:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:83
	    }
	}
	b = substring;
9f0053ca:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0053cd:	eb 01                	jmp    9f0053d0 <strnstrI+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:70
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
            if (len--<=0)
                return string;
	    continue;
9f0053cf:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    
    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f0053d0:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66 (discriminator 1)
9f0053d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0053d7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0053da:	84 c0                	test   al,al
9f0053dc:	75 95                	jne    9f005373 <strnstrI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:85
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f0053de:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:86
}
9f0053e3:	83 c4 10             	add    esp,0x10
9f0053e6:	5b                   	pop    ebx
9f0053e7:	5e                   	pop    esi
9f0053e8:	5d                   	pop    ebp
9f0053e9:	c3                   	ret    

9f0053ea <strstrI>:
strstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:89

char* strstrI(const char* string, const char* substring)
{
9f0053ea:	55                   	push   ebp
9f0053eb:	89 e5                	mov    ebp,esp
9f0053ed:	56                   	push   esi
9f0053ee:	53                   	push   ebx
9f0053ef:	e8 92 0d 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0053f4:	05 08 3e 00 00       	add    eax,0x3e08
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:97
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
9f0053f9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:98
    if (*b == 0) {
9f0053fc:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0053ff:	84 c0                	test   al,al
9f005401:	75 42                	jne    9f005445 <strstrI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:99
	return string;
9f005403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005406:	eb 4c                	jmp    9f005454 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:102
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f005408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00540b:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f00540e:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f005411:	38 c2                	cmp    dl,al
9f005413:	75 2b                	jne    9f005440 <strstrI+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:105
	    continue;
	}
	a = string;
9f005415:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:107
	while (1) {
	    if (*b == 0) {
9f005418:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f00541b:	84 c0                	test   al,al
9f00541d:	75 05                	jne    9f005424 <strstrI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:108
		return string;
9f00541f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005422:	eb 30                	jmp    9f005454 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:110
	    }
	    if (*a++ != *b++) {
9f005424:	89 f0                	mov    eax,esi
9f005426:	8d 70 01             	lea    esi,[eax+0x1]
9f005429:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f00542c:	89 d8                	mov    eax,ebx
9f00542e:	8d 58 01             	lea    ebx,[eax+0x1]
9f005431:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f005434:	38 c2                	cmp    dl,al
9f005436:	75 02                	jne    9f00543a <strstrI+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:113
		break;
	    }
	}
9f005438:	eb de                	jmp    9f005418 <strstrI+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:111
	while (1) {
	    if (*b == 0) {
		return string;
	    }
	    if (*a++ != *b++) {
		break;
9f00543a:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:114
	    }
	}
	b = substring;
9f00543b:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f00543e:	eb 01                	jmp    9f005441 <strstrI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:103
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
	    continue;
9f005440:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:101

    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f005441:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:101 (discriminator 1)
9f005445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005448:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00544b:	84 c0                	test   al,al
9f00544d:	75 b9                	jne    9f005408 <strstrI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:116
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f00544f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:117
}
9f005454:	5b                   	pop    ebx
9f005455:	5e                   	pop    esi
9f005456:	5d                   	pop    ebp
9f005457:	c3                   	ret    

9f005458 <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:120

VISIBLE char* strstr(const char* string, const char* substring)
{
9f005458:	55                   	push   ebp
9f005459:	89 e5                	mov    ebp,esp
9f00545b:	e8 26 0d 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f005460:	05 9c 3d 00 00       	add    eax,0x3d9c
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:121
    return strstrI(string, substring);
9f005465:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f005468:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00546b:	e8 7a ff ff ff       	call   9f0053ea <strstrI>
9f005470:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:122
}
9f005473:	c9                   	leave  
9f005474:	c3                   	ret    
9f005475:	66 90                	xchg   ax,ax
9f005477:	90                   	nop

9f005478 <getticks>:
getticks():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t getticks(/*time_t* arg*/)
{
9f005478:	55                   	push   ebp
9f005479:	89 e5                	mov    ebp,esp
9f00547b:	56                   	push   esi
9f00547c:	53                   	push   ebx
9f00547d:	83 ec 10             	sub    esp,0x10
9f005480:	e8 01 0d 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f005485:	05 77 3d 00 00       	add    eax,0x3d77
/home/yogi/src/os/aproj/libChrisOS/src/time.c:28
    uint32_t retVal=0;
9f00548a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:29
    GET_TICKS(retVal);
9f005491:	b8 70 01 00 00       	mov    eax,0x170
9f005496:	bb 00 00 00 00       	mov    ebx,0x0
9f00549b:	b9 00 00 00 00       	mov    ecx,0x0
9f0054a0:	ba 00 00 00 00       	mov    edx,0x0
9f0054a5:	be 00 00 00 00       	mov    esi,0x0
9f0054aa:	e8 fc ff ff ff       	call   9f0054ab <getticks+0x33>
9f0054af:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:30
    return (time_t)retVal;
9f0054b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:31
}
9f0054b5:	83 c4 10             	add    esp,0x10
9f0054b8:	5b                   	pop    ebx
9f0054b9:	5e                   	pop    esi
9f0054ba:	5d                   	pop    ebp
9f0054bb:	c3                   	ret    

9f0054bc <gmtime_rI>:
gmtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:35


struct tm *gmtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f0054bc:	55                   	push   ebp
9f0054bd:	89 e5                	mov    ebp,esp
9f0054bf:	53                   	push   ebx
9f0054c0:	83 ec 10             	sub    esp,0x10
9f0054c3:	e8 08 0d 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f0054c8:	81 c3 34 3d 00 00    	add    ebx,0x3d34
/home/yogi/src/os/aproj/libChrisOS/src/time.c:36
  time_t time = *timer;
9f0054ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0054d1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0054d3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:38
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
9f0054d6:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40

  dayclock = (unsigned long) time % SECS_DAY;
9f0054dd:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f0054e0:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f0054e5:	89 c8                	mov    eax,ecx
9f0054e7:	f7 e2                	mul    edx
9f0054e9:	89 d0                	mov    eax,edx
9f0054eb:	c1 e8 10             	shr    eax,0x10
9f0054ee:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f0054f1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0054f4:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f0054fa:	29 c1                	sub    ecx,eax
9f0054fc:	89 c8                	mov    eax,ecx
9f0054fe:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  dayno = (unsigned long) time / SECS_DAY;
9f005501:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f005504:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f005509:	f7 e2                	mul    edx
9f00550b:	89 d0                	mov    eax,edx
9f00550d:	c1 e8 10             	shr    eax,0x10
9f005510:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43

  tmbuf->tm_sec = dayclock % 60;
9f005513:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f005516:	ba 89 88 88 88       	mov    edx,0x88888889
9f00551b:	89 c8                	mov    eax,ecx
9f00551d:	f7 e2                	mul    edx
9f00551f:	89 d0                	mov    eax,edx
9f005521:	c1 e8 05             	shr    eax,0x5
9f005524:	89 c2                	mov    edx,eax
9f005526:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f00552d:	89 c2                	mov    edx,eax
9f00552f:	89 d0                	mov    eax,edx
9f005531:	c1 e0 04             	shl    eax,0x4
9f005534:	29 d0                	sub    eax,edx
9f005536:	29 c1                	sub    ecx,eax
9f005538:	89 c8                	mov    eax,ecx
9f00553a:	89 c2                	mov    edx,eax
9f00553c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00553f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44
  tmbuf->tm_min = (dayclock % 3600) / 60;
9f005541:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f005544:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f005549:	89 c8                	mov    eax,ecx
9f00554b:	f7 e2                	mul    edx
9f00554d:	89 d0                	mov    eax,edx
9f00554f:	c1 e8 0b             	shr    eax,0xb
9f005552:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
9f005558:	29 c1                	sub    ecx,eax
9f00555a:	89 c8                	mov    eax,ecx
9f00555c:	ba 89 88 88 88       	mov    edx,0x88888889
9f005561:	f7 e2                	mul    edx
9f005563:	89 d0                	mov    eax,edx
9f005565:	c1 e8 05             	shr    eax,0x5
9f005568:	89 c2                	mov    edx,eax
9f00556a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00556d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45
  tmbuf->tm_hour = dayclock / 3600;
9f005570:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f005573:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f005578:	f7 e2                	mul    edx
9f00557a:	89 d0                	mov    eax,edx
9f00557c:	c1 e8 0b             	shr    eax,0xb
9f00557f:	89 c2                	mov    edx,eax
9f005581:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f005584:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:46
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
9f005587:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f00558a:	8d 48 04             	lea    ecx,[eax+0x4]
9f00558d:	ba 25 49 92 24       	mov    edx,0x24924925
9f005592:	89 c8                	mov    eax,ecx
9f005594:	f7 e2                	mul    edx
9f005596:	89 c8                	mov    eax,ecx
9f005598:	29 d0                	sub    eax,edx
9f00559a:	d1 e8                	shr    eax,1
9f00559c:	01 d0                	add    eax,edx
9f00559e:	c1 e8 02             	shr    eax,0x2
9f0055a1:	89 c2                	mov    edx,eax
9f0055a3:	c1 e2 03             	shl    edx,0x3
9f0055a6:	29 c2                	sub    edx,eax
9f0055a8:	89 c8                	mov    eax,ecx
9f0055aa:	29 d0                	sub    eax,edx
9f0055ac:	89 c2                	mov    edx,eax
9f0055ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0055b1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f0055b4:	eb 66                	jmp    9f00561c <gmtime_rI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
    dayno -= YEARSIZE(year);
9f0055b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0055b9:	83 e0 03             	and    eax,0x3
9f0055bc:	85 c0                	test   eax,eax
9f0055be:	75 50                	jne    9f005610 <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 1)
9f0055c0:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0055c3:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0055c8:	89 c8                	mov    eax,ecx
9f0055ca:	f7 ea                	imul   edx
9f0055cc:	c1 fa 05             	sar    edx,0x5
9f0055cf:	89 c8                	mov    eax,ecx
9f0055d1:	c1 f8 1f             	sar    eax,0x1f
9f0055d4:	29 c2                	sub    edx,eax
9f0055d6:	89 d0                	mov    eax,edx
9f0055d8:	6b c0 64             	imul   eax,eax,0x64
9f0055db:	29 c1                	sub    ecx,eax
9f0055dd:	89 c8                	mov    eax,ecx
9f0055df:	85 c0                	test   eax,eax
9f0055e1:	75 26                	jne    9f005609 <gmtime_rI+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 4)
9f0055e3:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0055e6:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0055eb:	89 c8                	mov    eax,ecx
9f0055ed:	f7 ea                	imul   edx
9f0055ef:	c1 fa 07             	sar    edx,0x7
9f0055f2:	89 c8                	mov    eax,ecx
9f0055f4:	c1 f8 1f             	sar    eax,0x1f
9f0055f7:	29 c2                	sub    edx,eax
9f0055f9:	89 d0                	mov    eax,edx
9f0055fb:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f005601:	29 c1                	sub    ecx,eax
9f005603:	89 c8                	mov    eax,ecx
9f005605:	85 c0                	test   eax,eax
9f005607:	75 07                	jne    9f005610 <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 5)
9f005609:	b8 6e 01 00 00       	mov    eax,0x16e
9f00560e:	eb 05                	jmp    9f005615 <gmtime_rI+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 6)
9f005610:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 8)
9f005615:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49 (discriminator 8)
    year++;
9f005618:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f00561c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00561f:	83 e0 03             	and    eax,0x3
9f005622:	85 c0                	test   eax,eax
9f005624:	75 50                	jne    9f005676 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 1)
9f005626:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f005629:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00562e:	89 c8                	mov    eax,ecx
9f005630:	f7 ea                	imul   edx
9f005632:	c1 fa 05             	sar    edx,0x5
9f005635:	89 c8                	mov    eax,ecx
9f005637:	c1 f8 1f             	sar    eax,0x1f
9f00563a:	29 c2                	sub    edx,eax
9f00563c:	89 d0                	mov    eax,edx
9f00563e:	6b c0 64             	imul   eax,eax,0x64
9f005641:	29 c1                	sub    ecx,eax
9f005643:	89 c8                	mov    eax,ecx
9f005645:	85 c0                	test   eax,eax
9f005647:	75 26                	jne    9f00566f <gmtime_rI+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 4)
9f005649:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f00564c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005651:	89 c8                	mov    eax,ecx
9f005653:	f7 ea                	imul   edx
9f005655:	c1 fa 07             	sar    edx,0x7
9f005658:	89 c8                	mov    eax,ecx
9f00565a:	c1 f8 1f             	sar    eax,0x1f
9f00565d:	29 c2                	sub    edx,eax
9f00565f:	89 d0                	mov    eax,edx
9f005661:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f005667:	29 c1                	sub    ecx,eax
9f005669:	89 c8                	mov    eax,ecx
9f00566b:	85 c0                	test   eax,eax
9f00566d:	75 07                	jne    9f005676 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 5)
9f00566f:	b8 6e 01 00 00       	mov    eax,0x16e
9f005674:	eb 05                	jmp    9f00567b <gmtime_rI+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 6)
9f005676:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 8)
9f00567b:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f00567e:	0f 86 32 ff ff ff    	jbe    9f0055b6 <gmtime_rI+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
9f005684:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f005687:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
9f00568d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f005690:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52
  tmbuf->tm_yday = dayno;
9f005693:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f005696:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f005699:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:53
  tmbuf->tm_mon = 0;
9f00569c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00569f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f0056a6:	e9 89 00 00 00       	jmp    9f005734 <gmtime_rI+0x278>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
9f0056ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0056ae:	83 e0 03             	and    eax,0x3
9f0056b1:	85 c0                	test   eax,eax
9f0056b3:	75 50                	jne    9f005705 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 1)
9f0056b5:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0056b8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0056bd:	89 c8                	mov    eax,ecx
9f0056bf:	f7 ea                	imul   edx
9f0056c1:	c1 fa 05             	sar    edx,0x5
9f0056c4:	89 c8                	mov    eax,ecx
9f0056c6:	c1 f8 1f             	sar    eax,0x1f
9f0056c9:	29 c2                	sub    edx,eax
9f0056cb:	89 d0                	mov    eax,edx
9f0056cd:	6b c0 64             	imul   eax,eax,0x64
9f0056d0:	29 c1                	sub    ecx,eax
9f0056d2:	89 c8                	mov    eax,ecx
9f0056d4:	85 c0                	test   eax,eax
9f0056d6:	75 26                	jne    9f0056fe <gmtime_rI+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 4)
9f0056d8:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0056db:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0056e0:	89 c8                	mov    eax,ecx
9f0056e2:	f7 ea                	imul   edx
9f0056e4:	c1 fa 07             	sar    edx,0x7
9f0056e7:	89 c8                	mov    eax,ecx
9f0056e9:	c1 f8 1f             	sar    eax,0x1f
9f0056ec:	29 c2                	sub    edx,eax
9f0056ee:	89 d0                	mov    eax,edx
9f0056f0:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0056f6:	29 c1                	sub    ecx,eax
9f0056f8:	89 c8                	mov    eax,ecx
9f0056fa:	85 c0                	test   eax,eax
9f0056fc:	75 07                	jne    9f005705 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 5)
9f0056fe:	ba 01 00 00 00       	mov    edx,0x1
9f005703:	eb 05                	jmp    9f00570a <gmtime_rI+0x24e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 6)
9f005705:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 8)
9f00570a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00570d:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f005710:	89 d0                	mov    eax,edx
9f005712:	01 c0                	add    eax,eax
9f005714:	01 d0                	add    eax,edx
9f005716:	c1 e0 02             	shl    eax,0x2
9f005719:	01 c8                	add    eax,ecx
9f00571b:	8b 84 83 e4 fc ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x31c]
9f005722:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56 (discriminator 8)
    tmbuf->tm_mon++;
9f005725:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f005728:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00572b:	8d 50 01             	lea    edx,[eax+0x1]
9f00572e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f005731:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f005734:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f005737:	83 e0 03             	and    eax,0x3
9f00573a:	85 c0                	test   eax,eax
9f00573c:	75 50                	jne    9f00578e <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 1)
9f00573e:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f005741:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005746:	89 c8                	mov    eax,ecx
9f005748:	f7 ea                	imul   edx
9f00574a:	c1 fa 05             	sar    edx,0x5
9f00574d:	89 c8                	mov    eax,ecx
9f00574f:	c1 f8 1f             	sar    eax,0x1f
9f005752:	29 c2                	sub    edx,eax
9f005754:	89 d0                	mov    eax,edx
9f005756:	6b c0 64             	imul   eax,eax,0x64
9f005759:	29 c1                	sub    ecx,eax
9f00575b:	89 c8                	mov    eax,ecx
9f00575d:	85 c0                	test   eax,eax
9f00575f:	75 26                	jne    9f005787 <gmtime_rI+0x2cb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 4)
9f005761:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f005764:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005769:	89 c8                	mov    eax,ecx
9f00576b:	f7 ea                	imul   edx
9f00576d:	c1 fa 07             	sar    edx,0x7
9f005770:	89 c8                	mov    eax,ecx
9f005772:	c1 f8 1f             	sar    eax,0x1f
9f005775:	29 c2                	sub    edx,eax
9f005777:	89 d0                	mov    eax,edx
9f005779:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f00577f:	29 c1                	sub    ecx,eax
9f005781:	89 c8                	mov    eax,ecx
9f005783:	85 c0                	test   eax,eax
9f005785:	75 07                	jne    9f00578e <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 5)
9f005787:	ba 01 00 00 00       	mov    edx,0x1
9f00578c:	eb 05                	jmp    9f005793 <gmtime_rI+0x2d7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 6)
9f00578e:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 8)
9f005793:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f005796:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f005799:	89 d0                	mov    eax,edx
9f00579b:	01 c0                	add    eax,eax
9f00579d:	01 d0                	add    eax,edx
9f00579f:	c1 e0 02             	shl    eax,0x2
9f0057a2:	01 c8                	add    eax,ecx
9f0057a4:	8b 84 83 e4 fc ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x31c]
9f0057ab:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f0057ae:	0f 86 f7 fe ff ff    	jbe    9f0056ab <gmtime_rI+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:58
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
9f0057b4:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0057b7:	83 c0 01             	add    eax,0x1
9f0057ba:	89 c2                	mov    edx,eax
9f0057bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0057bf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:59
  tmbuf->tm_isdst = 0;
9f0057c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0057c5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:60
  return tmbuf;
9f0057cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:61
}
9f0057cf:	83 c4 10             	add    esp,0x10
9f0057d2:	5b                   	pop    ebx
9f0057d3:	5d                   	pop    ebp
9f0057d4:	c3                   	ret    

9f0057d5 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:64

VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) 
{
9f0057d5:	55                   	push   ebp
9f0057d6:	89 e5                	mov    ebp,esp
9f0057d8:	e8 a9 09 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0057dd:	05 1f 3a 00 00       	add    eax,0x3a1f
/home/yogi/src/os/aproj/libChrisOS/src/time.c:65
    return gmtime_rI(timer, tmbuf);
9f0057e2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0057e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0057e8:	e8 cf fc ff ff       	call   9f0054bc <gmtime_rI>
9f0057ed:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:66
}
9f0057f0:	c9                   	leave  
9f0057f1:	c3                   	ret    

9f0057f2 <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:68

VISIBLE struct tm *localtime(const time_t *timer) {
9f0057f2:	55                   	push   ebp
9f0057f3:	89 e5                	mov    ebp,esp
9f0057f5:	83 ec 10             	sub    esp,0x10
9f0057f8:	e8 89 09 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0057fd:	05 ff 39 00 00       	add    eax,0x39ff
/home/yogi/src/os/aproj/libChrisOS/src/time.c:71
  time_t t;
 
  t = *timer + (libcTZ*60*60);
9f005802:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f005805:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f005807:	8b 90 f8 ff ff ff    	mov    edx,DWORD PTR [eax-0x8]
9f00580d:	8b 12                	mov    edx,DWORD PTR [edx]
9f00580f:	69 d2 10 0e 00 00    	imul   edx,edx,0xe10
9f005815:	01 ca                	add    edx,ecx
9f005817:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:72
  return gmtime_rI(&t, &tmbuf);
9f00581a:	8b 80 fc ff ff ff    	mov    eax,DWORD PTR [eax-0x4]
9f005820:	50                   	push   eax
9f005821:	8d 45 fc             	lea    eax,[ebp-0x4]
9f005824:	50                   	push   eax
9f005825:	e8 92 fc ff ff       	call   9f0054bc <gmtime_rI>
9f00582a:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73
}
9f00582d:	c9                   	leave  
9f00582e:	c3                   	ret    

9f00582f <localtime_rI>:
localtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:76

struct tm *localtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f00582f:	55                   	push   ebp
9f005830:	89 e5                	mov    ebp,esp
9f005832:	83 ec 10             	sub    esp,0x10
9f005835:	e8 4c 09 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f00583a:	05 c2 39 00 00       	add    eax,0x39c2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:79
  time_t t;

  t = *timer - libcTZ;
9f00583f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f005842:	8b 12                	mov    edx,DWORD PTR [edx]
9f005844:	8b 80 f8 ff ff ff    	mov    eax,DWORD PTR [eax-0x8]
9f00584a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00584c:	29 c2                	sub    edx,eax
9f00584e:	89 d0                	mov    eax,edx
9f005850:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:80
  return gmtime_rI(&t, tmbuf);
9f005853:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f005856:	8d 45 fc             	lea    eax,[ebp-0x4]
9f005859:	50                   	push   eax
9f00585a:	e8 5d fc ff ff       	call   9f0054bc <gmtime_rI>
9f00585f:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
}
9f005862:	c9                   	leave  
9f005863:	c3                   	ret    

9f005864 <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:83

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
9f005864:	55                   	push   ebp
9f005865:	89 e5                	mov    ebp,esp
9f005867:	e8 1a 09 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f00586c:	05 90 39 00 00       	add    eax,0x3990
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84
    return localtime_rI(timer, tmbuf);
9f005871:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f005874:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f005877:	e8 b3 ff ff ff       	call   9f00582f <localtime_rI>
9f00587c:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:85
}
9f00587f:	c9                   	leave  
9f005880:	c3                   	ret    

9f005881 <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:87

VISIBLE time_t mktime(struct tm *tmbuf) {
9f005881:	55                   	push   ebp
9f005882:	89 e5                	mov    ebp,esp
9f005884:	57                   	push   edi
9f005885:	56                   	push   esi
9f005886:	53                   	push   ebx
9f005887:	83 ec 20             	sub    esp,0x20
9f00588a:	e8 45 09 00 00       	call   9f0061d4 <__x86.get_pc_thunk.cx>
9f00588f:	81 c1 6d 39 00 00    	add    ecx,0x396d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
9f005895:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005898:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
9f00589b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00589e:	8b 18                	mov    ebx,DWORD PTR [eax]
9f0058a0:	ba 89 88 88 88       	mov    edx,0x88888889
9f0058a5:	89 d8                	mov    eax,ebx
9f0058a7:	f7 ea                	imul   edx
9f0058a9:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f0058ac:	c1 f8 05             	sar    eax,0x5
9f0058af:	89 c2                	mov    edx,eax
9f0058b1:	89 d8                	mov    eax,ebx
9f0058b3:	c1 f8 1f             	sar    eax,0x1f
9f0058b6:	29 c2                	sub    edx,eax
9f0058b8:	89 d0                	mov    eax,edx
9f0058ba:	8d 14 06             	lea    edx,[esi+eax*1]
9f0058bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0058c0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
  tmbuf->tm_sec %= 60;
9f0058c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0058c6:	8b 18                	mov    ebx,DWORD PTR [eax]
9f0058c8:	ba 89 88 88 88       	mov    edx,0x88888889
9f0058cd:	89 d8                	mov    eax,ebx
9f0058cf:	f7 ea                	imul   edx
9f0058d1:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f0058d4:	c1 f8 05             	sar    eax,0x5
9f0058d7:	89 c2                	mov    edx,eax
9f0058d9:	89 d8                	mov    eax,ebx
9f0058db:	c1 f8 1f             	sar    eax,0x1f
9f0058de:	29 c2                	sub    edx,eax
9f0058e0:	89 d0                	mov    eax,edx
9f0058e2:	89 c2                	mov    edx,eax
9f0058e4:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f0058eb:	89 c2                	mov    edx,eax
9f0058ed:	89 d0                	mov    eax,edx
9f0058ef:	c1 e0 04             	shl    eax,0x4
9f0058f2:	29 d0                	sub    eax,edx
9f0058f4:	29 c3                	sub    ebx,eax
9f0058f6:	89 d8                	mov    eax,ebx
9f0058f8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0058fb:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:97
  if (tmbuf->tm_sec < 0) {
9f0058fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005900:	8b 00                	mov    eax,DWORD PTR [eax]
9f005902:	85 c0                	test   eax,eax
9f005904:	79 1c                	jns    9f005922 <mktime+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:98
    tmbuf->tm_sec += 60;
9f005906:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005909:	8b 00                	mov    eax,DWORD PTR [eax]
9f00590b:	8d 50 3c             	lea    edx,[eax+0x3c]
9f00590e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005911:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
    tmbuf->tm_min--;
9f005913:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005916:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f005919:	8d 50 ff             	lea    edx,[eax-0x1]
9f00591c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00591f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
9f005922:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005925:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
9f005928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00592b:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f00592e:	ba 89 88 88 88       	mov    edx,0x88888889
9f005933:	89 d8                	mov    eax,ebx
9f005935:	f7 ea                	imul   edx
9f005937:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f00593a:	c1 f8 05             	sar    eax,0x5
9f00593d:	89 c2                	mov    edx,eax
9f00593f:	89 d8                	mov    eax,ebx
9f005941:	c1 f8 1f             	sar    eax,0x1f
9f005944:	29 c2                	sub    edx,eax
9f005946:	89 d0                	mov    eax,edx
9f005948:	8d 14 06             	lea    edx,[esi+eax*1]
9f00594b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00594e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
  tmbuf->tm_min = tmbuf->tm_min % 60;
9f005951:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005954:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f005957:	ba 89 88 88 88       	mov    edx,0x88888889
9f00595c:	89 d8                	mov    eax,ebx
9f00595e:	f7 ea                	imul   edx
9f005960:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f005963:	c1 f8 05             	sar    eax,0x5
9f005966:	89 c2                	mov    edx,eax
9f005968:	89 d8                	mov    eax,ebx
9f00596a:	c1 f8 1f             	sar    eax,0x1f
9f00596d:	29 c2                	sub    edx,eax
9f00596f:	89 d0                	mov    eax,edx
9f005971:	89 c2                	mov    edx,eax
9f005973:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f00597a:	89 c2                	mov    edx,eax
9f00597c:	89 d0                	mov    eax,edx
9f00597e:	c1 e0 04             	shl    eax,0x4
9f005981:	29 d0                	sub    eax,edx
9f005983:	29 c3                	sub    ebx,eax
9f005985:	89 d8                	mov    eax,ebx
9f005987:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00598a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:103
  if (tmbuf->tm_min < 0) {
9f00598d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005990:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f005993:	85 c0                	test   eax,eax
9f005995:	79 1e                	jns    9f0059b5 <mktime+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:104
    tmbuf->tm_min += 60;
9f005997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00599a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f00599d:	8d 50 3c             	lea    edx,[eax+0x3c]
9f0059a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0059a3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
    tmbuf->tm_hour--;
9f0059a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0059a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f0059ac:	8d 50 ff             	lea    edx,[eax-0x1]
9f0059af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0059b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
  }
  day = tmbuf->tm_hour / 24;
9f0059b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0059b8:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f0059bb:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f0059c0:	89 d8                	mov    eax,ebx
9f0059c2:	f7 ea                	imul   edx
9f0059c4:	c1 fa 02             	sar    edx,0x2
9f0059c7:	89 d8                	mov    eax,ebx
9f0059c9:	c1 f8 1f             	sar    eax,0x1f
9f0059cc:	29 c2                	sub    edx,eax
9f0059ce:	89 d0                	mov    eax,edx
9f0059d0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
9f0059d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0059d6:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f0059d9:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f0059de:	89 d8                	mov    eax,ebx
9f0059e0:	f7 ea                	imul   edx
9f0059e2:	c1 fa 02             	sar    edx,0x2
9f0059e5:	89 d8                	mov    eax,ebx
9f0059e7:	c1 f8 1f             	sar    eax,0x1f
9f0059ea:	29 c2                	sub    edx,eax
9f0059ec:	89 d0                	mov    eax,edx
9f0059ee:	01 c0                	add    eax,eax
9f0059f0:	01 d0                	add    eax,edx
9f0059f2:	c1 e0 03             	shl    eax,0x3
9f0059f5:	29 c3                	sub    ebx,eax
9f0059f7:	89 da                	mov    edx,ebx
9f0059f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0059fc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:109
  if (tmbuf->tm_hour < 0) {
9f0059ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a02:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f005a05:	85 c0                	test   eax,eax
9f005a07:	79 13                	jns    9f005a1c <mktime+0x19b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:110
    tmbuf->tm_hour += 24;
9f005a09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f005a0f:	8d 50 18             	lea    edx,[eax+0x18]
9f005a12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a15:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
    day--;
9f005a18:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
9f005a1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a1f:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
9f005a22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a25:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f005a28:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f005a2d:	89 d8                	mov    eax,ebx
9f005a2f:	f7 ea                	imul   edx
9f005a31:	d1 fa                	sar    edx,1
9f005a33:	89 d8                	mov    eax,ebx
9f005a35:	c1 f8 1f             	sar    eax,0x1f
9f005a38:	29 c2                	sub    edx,eax
9f005a3a:	89 d0                	mov    eax,edx
9f005a3c:	8d 14 06             	lea    edx,[esi+eax*1]
9f005a3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a42:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
  tmbuf->tm_mon %= 12;
9f005a45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a48:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f005a4b:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f005a50:	89 d8                	mov    eax,ebx
9f005a52:	f7 ea                	imul   edx
9f005a54:	d1 fa                	sar    edx,1
9f005a56:	89 d8                	mov    eax,ebx
9f005a58:	c1 f8 1f             	sar    eax,0x1f
9f005a5b:	29 c2                	sub    edx,eax
9f005a5d:	89 d0                	mov    eax,edx
9f005a5f:	01 c0                	add    eax,eax
9f005a61:	01 d0                	add    eax,edx
9f005a63:	c1 e0 02             	shl    eax,0x2
9f005a66:	29 c3                	sub    ebx,eax
9f005a68:	89 da                	mov    edx,ebx
9f005a6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a6d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:115
  if (tmbuf->tm_mon < 0) {
9f005a70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a73:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f005a76:	85 c0                	test   eax,eax
9f005a78:	79 1e                	jns    9f005a98 <mktime+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
    tmbuf->tm_mon += 12;
9f005a7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a7d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f005a80:	8d 50 0c             	lea    edx,[eax+0xc]
9f005a83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a86:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
    tmbuf->tm_year--;
9f005a89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a8c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005a8f:	8d 50 ff             	lea    edx,[eax-0x1]
9f005a92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a95:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:119
  }
  day += (tmbuf->tm_mday - 1);
9f005a98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005a9b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f005a9e:	83 e8 01             	sub    eax,0x1
9f005aa1:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
  while (day < 0) {
9f005aa4:	e9 c1 00 00 00       	jmp    9f005b6a <mktime+0x2e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:121
    if(--tmbuf->tm_mon < 0) {
9f005aa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005aac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f005aaf:	8d 50 ff             	lea    edx,[eax-0x1]
9f005ab2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005ab5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f005ab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005abb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f005abe:	85 c0                	test   eax,eax
9f005ac0:	79 19                	jns    9f005adb <mktime+0x25a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
      tmbuf->tm_year--;
9f005ac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005ac5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005ac8:	8d 50 ff             	lea    edx,[eax-0x1]
9f005acb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005ace:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:123
      tmbuf->tm_mon = 11;
9f005ad1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005ad4:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f005adb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005ade:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005ae1:	83 e0 03             	and    eax,0x3
9f005ae4:	85 c0                	test   eax,eax
9f005ae6:	75 62                	jne    9f005b4a <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 1)
9f005ae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005aeb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005aee:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f005af4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005af9:	89 d8                	mov    eax,ebx
9f005afb:	f7 ea                	imul   edx
9f005afd:	c1 fa 05             	sar    edx,0x5
9f005b00:	89 d8                	mov    eax,ebx
9f005b02:	c1 f8 1f             	sar    eax,0x1f
9f005b05:	29 c2                	sub    edx,eax
9f005b07:	89 d0                	mov    eax,edx
9f005b09:	6b c0 64             	imul   eax,eax,0x64
9f005b0c:	29 c3                	sub    ebx,eax
9f005b0e:	89 d8                	mov    eax,ebx
9f005b10:	85 c0                	test   eax,eax
9f005b12:	75 2f                	jne    9f005b43 <mktime+0x2c2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 4)
9f005b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005b17:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005b1a:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f005b20:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005b25:	89 d8                	mov    eax,ebx
9f005b27:	f7 ea                	imul   edx
9f005b29:	c1 fa 07             	sar    edx,0x7
9f005b2c:	89 d8                	mov    eax,ebx
9f005b2e:	c1 f8 1f             	sar    eax,0x1f
9f005b31:	29 c2                	sub    edx,eax
9f005b33:	89 d0                	mov    eax,edx
9f005b35:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f005b3b:	29 c3                	sub    ebx,eax
9f005b3d:	89 d8                	mov    eax,ebx
9f005b3f:	85 c0                	test   eax,eax
9f005b41:	75 07                	jne    9f005b4a <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 5)
9f005b43:	ba 01 00 00 00       	mov    edx,0x1
9f005b48:	eb 05                	jmp    9f005b4f <mktime+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 6)
9f005b4a:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 8)
9f005b4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005b52:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f005b55:	89 d0                	mov    eax,edx
9f005b57:	01 c0                	add    eax,eax
9f005b59:	01 d0                	add    eax,edx
9f005b5b:	c1 e0 02             	shl    eax,0x2
9f005b5e:	01 d8                	add    eax,ebx
9f005b60:	8b 84 81 e4 fc ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x31c]
9f005b67:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
9f005b6a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f005b6e:	0f 88 35 ff ff ff    	js     9f005aa9 <mktime+0x228>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f005b74:	e9 c2 00 00 00       	jmp    9f005c3b <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f005b79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005b7c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005b7f:	83 e0 03             	and    eax,0x3
9f005b82:	85 c0                	test   eax,eax
9f005b84:	75 62                	jne    9f005be8 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 1)
9f005b86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005b89:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005b8c:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f005b92:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005b97:	89 d8                	mov    eax,ebx
9f005b99:	f7 ea                	imul   edx
9f005b9b:	c1 fa 05             	sar    edx,0x5
9f005b9e:	89 d8                	mov    eax,ebx
9f005ba0:	c1 f8 1f             	sar    eax,0x1f
9f005ba3:	29 c2                	sub    edx,eax
9f005ba5:	89 d0                	mov    eax,edx
9f005ba7:	6b c0 64             	imul   eax,eax,0x64
9f005baa:	29 c3                	sub    ebx,eax
9f005bac:	89 d8                	mov    eax,ebx
9f005bae:	85 c0                	test   eax,eax
9f005bb0:	75 2f                	jne    9f005be1 <mktime+0x360>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 4)
9f005bb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005bb5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005bb8:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f005bbe:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005bc3:	89 d8                	mov    eax,ebx
9f005bc5:	f7 ea                	imul   edx
9f005bc7:	c1 fa 07             	sar    edx,0x7
9f005bca:	89 d8                	mov    eax,ebx
9f005bcc:	c1 f8 1f             	sar    eax,0x1f
9f005bcf:	29 c2                	sub    edx,eax
9f005bd1:	89 d0                	mov    eax,edx
9f005bd3:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f005bd9:	29 c3                	sub    ebx,eax
9f005bdb:	89 d8                	mov    eax,ebx
9f005bdd:	85 c0                	test   eax,eax
9f005bdf:	75 07                	jne    9f005be8 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 5)
9f005be1:	ba 01 00 00 00       	mov    edx,0x1
9f005be6:	eb 05                	jmp    9f005bed <mktime+0x36c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 6)
9f005be8:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 8)
9f005bed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005bf0:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f005bf3:	89 d0                	mov    eax,edx
9f005bf5:	01 c0                	add    eax,eax
9f005bf7:	01 d0                	add    eax,edx
9f005bf9:	c1 e0 02             	shl    eax,0x2
9f005bfc:	01 d8                	add    eax,ebx
9f005bfe:	8b 84 81 e4 fc ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x31c]
9f005c05:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:129 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
9f005c08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005c0b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f005c0e:	8d 50 01             	lea    edx,[eax+0x1]
9f005c11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005c14:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f005c17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005c1a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f005c1d:	83 f8 0c             	cmp    eax,0xc
9f005c20:	75 19                	jne    9f005c3b <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:130
      tmbuf->tm_mon = 0;
9f005c22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005c25:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:131
      tmbuf->tm_year++;
9f005c2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005c2f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005c32:	8d 50 01             	lea    edx,[eax+0x1]
9f005c35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005c38:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f005c3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005c3e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005c41:	83 e0 03             	and    eax,0x3
9f005c44:	85 c0                	test   eax,eax
9f005c46:	75 62                	jne    9f005caa <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 1)
9f005c48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005c4b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005c4e:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f005c54:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005c59:	89 d8                	mov    eax,ebx
9f005c5b:	f7 ea                	imul   edx
9f005c5d:	c1 fa 05             	sar    edx,0x5
9f005c60:	89 d8                	mov    eax,ebx
9f005c62:	c1 f8 1f             	sar    eax,0x1f
9f005c65:	29 c2                	sub    edx,eax
9f005c67:	89 d0                	mov    eax,edx
9f005c69:	6b c0 64             	imul   eax,eax,0x64
9f005c6c:	29 c3                	sub    ebx,eax
9f005c6e:	89 d8                	mov    eax,ebx
9f005c70:	85 c0                	test   eax,eax
9f005c72:	75 2f                	jne    9f005ca3 <mktime+0x422>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 4)
9f005c74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005c77:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005c7a:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f005c80:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005c85:	89 d8                	mov    eax,ebx
9f005c87:	f7 ea                	imul   edx
9f005c89:	c1 fa 07             	sar    edx,0x7
9f005c8c:	89 d8                	mov    eax,ebx
9f005c8e:	c1 f8 1f             	sar    eax,0x1f
9f005c91:	29 c2                	sub    edx,eax
9f005c93:	89 d0                	mov    eax,edx
9f005c95:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f005c9b:	29 c3                	sub    ebx,eax
9f005c9d:	89 d8                	mov    eax,ebx
9f005c9f:	85 c0                	test   eax,eax
9f005ca1:	75 07                	jne    9f005caa <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 5)
9f005ca3:	ba 01 00 00 00       	mov    edx,0x1
9f005ca8:	eb 05                	jmp    9f005caf <mktime+0x42e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 6)
9f005caa:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 8)
9f005caf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005cb2:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f005cb5:	89 d0                	mov    eax,edx
9f005cb7:	01 c0                	add    eax,eax
9f005cb9:	01 d0                	add    eax,edx
9f005cbb:	c1 e0 02             	shl    eax,0x2
9f005cbe:	01 d8                	add    eax,ebx
9f005cc0:	8b 84 81 e4 fc ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x31c]
9f005cc7:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f005cca:	0f 8e a9 fe ff ff    	jle    9f005b79 <mktime+0x2f8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
9f005cd0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f005cd3:	8d 50 01             	lea    edx,[eax+0x1]
9f005cd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005cd9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  year = EPOCH_YR;
9f005cdc:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
9f005ce3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005ce6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005ce9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f005cec:	81 ea 6c 07 00 00    	sub    edx,0x76c
9f005cf2:	39 d0                	cmp    eax,edx
9f005cf4:	7d 0a                	jge    9f005d00 <mktime+0x47f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136 (discriminator 1)
9f005cf6:	b8 19 fc ff ff       	mov    eax,0xfffffc19
9f005cfb:	e9 d0 03 00 00       	jmp    9f0060d0 <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:137
  seconds = 0;
9f005d00:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:138
  day = 0;                      // Means days since day 0 now
9f005d07:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:139
  overflow = 0;
9f005d0e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
9f005d15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005d18:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f005d1b:	05 6c 07 00 00       	add    eax,0x76c
9f005d20:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
9f005d23:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f005d26:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f005d29:	3d 7c c6 59 00       	cmp    eax,0x59c67c
9f005d2e:	7e 07                	jle    9f005d37 <mktime+0x4b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 1)
9f005d30:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149
  day = (tm_year - year) * 365;
9f005d37:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f005d3a:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f005d3d:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
9f005d43:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
9f005d46:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f005d4b:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
9f005d4e:	89 c2                	mov    edx,eax
9f005d50:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f005d53:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f005d56:	8d 58 03             	lea    ebx,[eax+0x3]
9f005d59:	85 c0                	test   eax,eax
9f005d5b:	0f 48 c3             	cmovs  eax,ebx
9f005d5e:	c1 f8 02             	sar    eax,0x2
9f005d61:	83 c0 01             	add    eax,0x1
9f005d64:	39 c2                	cmp    edx,eax
9f005d66:	7d 04                	jge    9f005d6c <mktime+0x4eb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 1)
9f005d68:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
9f005d6c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f005d6f:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f005d72:	8d 50 03             	lea    edx,[eax+0x3]
9f005d75:	85 c0                	test   eax,eax
9f005d77:	0f 48 c2             	cmovs  eax,edx
9f005d7a:	c1 f8 02             	sar    eax,0x2
9f005d7d:	89 c3                	mov    ebx,eax
9f005d7f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f005d82:	83 e0 03             	and    eax,0x3
9f005d85:	85 c0                	test   eax,eax
9f005d87:	74 29                	je     9f005db2 <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151 (discriminator 1)
9f005d89:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f005d8c:	99                   	cdq    
9f005d8d:	c1 ea 1e             	shr    edx,0x1e
9f005d90:	01 d0                	add    eax,edx
9f005d92:	83 e0 03             	and    eax,0x3
9f005d95:	29 d0                	sub    eax,edx
9f005d97:	89 c6                	mov    esi,eax
9f005d99:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f005d9c:	99                   	cdq    
9f005d9d:	c1 ea 1e             	shr    edx,0x1e
9f005da0:	01 d0                	add    eax,edx
9f005da2:	83 e0 03             	and    eax,0x3
9f005da5:	29 d0                	sub    eax,edx
9f005da7:	39 c6                	cmp    esi,eax
9f005da9:	7d 07                	jge    9f005db2 <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151 (discriminator 3)
9f005dab:	b8 01 00 00 00       	mov    eax,0x1
9f005db0:	eb 05                	jmp    9f005db7 <mktime+0x536>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151 (discriminator 4)
9f005db2:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151 (discriminator 6)
9f005db7:	01 d8                	add    eax,ebx
9f005db9:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
9f005dbc:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f005dbf:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f005dc2:	89 c3                	mov    ebx,eax
9f005dc4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005dc9:	89 d8                	mov    eax,ebx
9f005dcb:	f7 ea                	imul   edx
9f005dcd:	c1 fa 05             	sar    edx,0x5
9f005dd0:	89 d8                	mov    eax,ebx
9f005dd2:	c1 f8 1f             	sar    eax,0x1f
9f005dd5:	89 d7                	mov    edi,edx
9f005dd7:	29 c7                	sub    edi,eax
9f005dd9:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f005ddc:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005de1:	89 d8                	mov    eax,ebx
9f005de3:	f7 ea                	imul   edx
9f005de5:	c1 fa 05             	sar    edx,0x5
9f005de8:	89 d8                	mov    eax,ebx
9f005dea:	c1 f8 1f             	sar    eax,0x1f
9f005ded:	29 c2                	sub    edx,eax
9f005def:	89 d0                	mov    eax,edx
9f005df1:	6b c0 64             	imul   eax,eax,0x64
9f005df4:	29 c3                	sub    ebx,eax
9f005df6:	89 d8                	mov    eax,ebx
9f005df8:	85 c0                	test   eax,eax
9f005dfa:	74 49                	je     9f005e45 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 1)
9f005dfc:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f005dff:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005e04:	89 d8                	mov    eax,ebx
9f005e06:	f7 ea                	imul   edx
9f005e08:	c1 fa 05             	sar    edx,0x5
9f005e0b:	89 d8                	mov    eax,ebx
9f005e0d:	c1 f8 1f             	sar    eax,0x1f
9f005e10:	89 d6                	mov    esi,edx
9f005e12:	29 c6                	sub    esi,eax
9f005e14:	6b c6 64             	imul   eax,esi,0x64
9f005e17:	89 de                	mov    esi,ebx
9f005e19:	29 c6                	sub    esi,eax
9f005e1b:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f005e1e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005e23:	89 d8                	mov    eax,ebx
9f005e25:	f7 ea                	imul   edx
9f005e27:	c1 fa 05             	sar    edx,0x5
9f005e2a:	89 d8                	mov    eax,ebx
9f005e2c:	c1 f8 1f             	sar    eax,0x1f
9f005e2f:	29 c2                	sub    edx,eax
9f005e31:	89 d0                	mov    eax,edx
9f005e33:	6b c0 64             	imul   eax,eax,0x64
9f005e36:	29 c3                	sub    ebx,eax
9f005e38:	89 d8                	mov    eax,ebx
9f005e3a:	39 c6                	cmp    esi,eax
9f005e3c:	7d 07                	jge    9f005e45 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 3)
9f005e3e:	b8 01 00 00 00       	mov    eax,0x1
9f005e43:	eb 05                	jmp    9f005e4a <mktime+0x5c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 4)
9f005e45:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)
9f005e4a:	01 f8                	add    eax,edi
9f005e4c:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
9f005e4f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f005e52:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f005e55:	89 c3                	mov    ebx,eax
9f005e57:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005e5c:	89 d8                	mov    eax,ebx
9f005e5e:	f7 ea                	imul   edx
9f005e60:	c1 fa 07             	sar    edx,0x7
9f005e63:	89 d8                	mov    eax,ebx
9f005e65:	c1 f8 1f             	sar    eax,0x1f
9f005e68:	89 d7                	mov    edi,edx
9f005e6a:	29 c7                	sub    edi,eax
9f005e6c:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f005e6f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005e74:	89 d8                	mov    eax,ebx
9f005e76:	f7 ea                	imul   edx
9f005e78:	c1 fa 07             	sar    edx,0x7
9f005e7b:	89 d8                	mov    eax,ebx
9f005e7d:	c1 f8 1f             	sar    eax,0x1f
9f005e80:	29 c2                	sub    edx,eax
9f005e82:	89 d0                	mov    eax,edx
9f005e84:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f005e8a:	29 c3                	sub    ebx,eax
9f005e8c:	89 d8                	mov    eax,ebx
9f005e8e:	85 c0                	test   eax,eax
9f005e90:	74 4f                	je     9f005ee1 <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 1)
9f005e92:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f005e95:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005e9a:	89 d8                	mov    eax,ebx
9f005e9c:	f7 ea                	imul   edx
9f005e9e:	c1 fa 07             	sar    edx,0x7
9f005ea1:	89 d8                	mov    eax,ebx
9f005ea3:	c1 f8 1f             	sar    eax,0x1f
9f005ea6:	89 d6                	mov    esi,edx
9f005ea8:	29 c6                	sub    esi,eax
9f005eaa:	69 c6 90 01 00 00    	imul   eax,esi,0x190
9f005eb0:	89 de                	mov    esi,ebx
9f005eb2:	29 c6                	sub    esi,eax
9f005eb4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f005eb7:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005ebc:	89 d8                	mov    eax,ebx
9f005ebe:	f7 ea                	imul   edx
9f005ec0:	c1 fa 07             	sar    edx,0x7
9f005ec3:	89 d8                	mov    eax,ebx
9f005ec5:	c1 f8 1f             	sar    eax,0x1f
9f005ec8:	29 c2                	sub    edx,eax
9f005eca:	89 d0                	mov    eax,edx
9f005ecc:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f005ed2:	29 c3                	sub    ebx,eax
9f005ed4:	89 d8                	mov    eax,ebx
9f005ed6:	39 c6                	cmp    esi,eax
9f005ed8:	7d 07                	jge    9f005ee1 <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 3)
9f005eda:	b8 01 00 00 00       	mov    eax,0x1
9f005edf:	eb 05                	jmp    9f005ee6 <mktime+0x665>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 4)
9f005ee1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
9f005ee6:	01 f8                	add    eax,edi
9f005ee8:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 6)

  yday = month = 0;
9f005eeb:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f005ef2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f005ef5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:156 (discriminator 6)
  while (month < tmbuf->tm_mon) {
9f005ef8:	eb 7b                	jmp    9f005f75 <mktime+0x6f4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157
    yday += _ytab[LEAPYEAR(tm_year)][month];
9f005efa:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f005efd:	83 e0 03             	and    eax,0x3
9f005f00:	85 c0                	test   eax,eax
9f005f02:	75 50                	jne    9f005f54 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 1)
9f005f04:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f005f07:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005f0c:	89 d8                	mov    eax,ebx
9f005f0e:	f7 ea                	imul   edx
9f005f10:	c1 fa 05             	sar    edx,0x5
9f005f13:	89 d8                	mov    eax,ebx
9f005f15:	c1 f8 1f             	sar    eax,0x1f
9f005f18:	29 c2                	sub    edx,eax
9f005f1a:	89 d0                	mov    eax,edx
9f005f1c:	6b c0 64             	imul   eax,eax,0x64
9f005f1f:	29 c3                	sub    ebx,eax
9f005f21:	89 d8                	mov    eax,ebx
9f005f23:	85 c0                	test   eax,eax
9f005f25:	75 26                	jne    9f005f4d <mktime+0x6cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 4)
9f005f27:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f005f2a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f005f2f:	89 d8                	mov    eax,ebx
9f005f31:	f7 ea                	imul   edx
9f005f33:	c1 fa 07             	sar    edx,0x7
9f005f36:	89 d8                	mov    eax,ebx
9f005f38:	c1 f8 1f             	sar    eax,0x1f
9f005f3b:	29 c2                	sub    edx,eax
9f005f3d:	89 d0                	mov    eax,edx
9f005f3f:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f005f45:	29 c3                	sub    ebx,eax
9f005f47:	89 d8                	mov    eax,ebx
9f005f49:	85 c0                	test   eax,eax
9f005f4b:	75 07                	jne    9f005f54 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 5)
9f005f4d:	ba 01 00 00 00       	mov    edx,0x1
9f005f52:	eb 05                	jmp    9f005f59 <mktime+0x6d8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 6)
9f005f54:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 8)
9f005f59:	89 d0                	mov    eax,edx
9f005f5b:	01 c0                	add    eax,eax
9f005f5d:	01 d0                	add    eax,edx
9f005f5f:	c1 e0 02             	shl    eax,0x2
9f005f62:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f005f65:	01 d0                	add    eax,edx
9f005f67:	8b 84 81 e4 fc ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x31c]
9f005f6e:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158 (discriminator 8)
    month++;
9f005f71:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:156
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
9f005f75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005f78:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f005f7b:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f005f7e:	0f 8f 76 ff ff ff    	jg     9f005efa <mktime+0x679>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:160
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
9f005f84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005f87:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f005f8a:	83 e8 01             	sub    eax,0x1
9f005f8d:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161
  if (day + yday < 0) overflow|=4;
9f005f90:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f005f93:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f005f96:	01 d0                	add    eax,edx
9f005f98:	85 c0                	test   eax,eax
9f005f9a:	79 04                	jns    9f005fa0 <mktime+0x71f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161 (discriminator 1)
9f005f9c:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:162
  day += yday;
9f005fa0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f005fa3:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:164

  tmbuf->tm_yday = yday;
9f005fa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005fa9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f005fac:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:165
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
9f005faf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f005fb2:	8d 58 04             	lea    ebx,[eax+0x4]
9f005fb5:	ba 93 24 49 92       	mov    edx,0x92492493
9f005fba:	89 d8                	mov    eax,ebx
9f005fbc:	f7 ea                	imul   edx
9f005fbe:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f005fc1:	c1 f8 02             	sar    eax,0x2
9f005fc4:	89 c2                	mov    edx,eax
9f005fc6:	89 d8                	mov    eax,ebx
9f005fc8:	c1 f8 1f             	sar    eax,0x1f
9f005fcb:	29 c2                	sub    edx,eax
9f005fcd:	89 d0                	mov    eax,edx
9f005fcf:	89 c2                	mov    edx,eax
9f005fd1:	c1 e2 03             	shl    edx,0x3
9f005fd4:	29 c2                	sub    edx,eax
9f005fd6:	89 d8                	mov    eax,ebx
9f005fd8:	29 d0                	sub    eax,edx
9f005fda:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f005fdd:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:167

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
9f005fe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005fe3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f005fe6:	c1 e0 02             	shl    eax,0x2
9f005fe9:	89 c2                	mov    edx,eax
9f005feb:	c1 e2 04             	shl    edx,0x4
9f005fee:	29 c2                	sub    edx,eax
9f005ff0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005ff3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f005ff6:	01 d0                	add    eax,edx
9f005ff8:	c1 e0 02             	shl    eax,0x2
9f005ffb:	89 c2                	mov    edx,eax
9f005ffd:	c1 e2 04             	shl    edx,0x4
9f006000:	29 c2                	sub    edx,eax
9f006002:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f006005:	8b 00                	mov    eax,DWORD PTR [eax]
9f006007:	01 d0                	add    eax,edx
9f006009:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:169

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
9f00600c:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f006011:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
9f006014:	89 c3                	mov    ebx,eax
9f006016:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f00601b:	89 d8                	mov    eax,ebx
9f00601d:	f7 ea                	imul   edx
9f00601f:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f006022:	c1 f8 10             	sar    eax,0x10
9f006025:	89 c2                	mov    edx,eax
9f006027:	89 d8                	mov    eax,ebx
9f006029:	c1 f8 1f             	sar    eax,0x1f
9f00602c:	29 c2                	sub    edx,eax
9f00602e:	89 d0                	mov    eax,edx
9f006030:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f006033:	7d 04                	jge    9f006039 <mktime+0x7b8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:169 (discriminator 1)
9f006035:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170
  seconds += day * SECS_DAY;
9f006039:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00603c:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f006042:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:173

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f006045:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f00604b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00604d:	85 c0                	test   eax,eax
9f00604f:	7e 16                	jle    9f006067 <mktime+0x7e6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:173 (discriminator 1)
9f006051:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f006057:	8b 00                	mov    eax,DWORD PTR [eax]
9f006059:	ba ff ff ff 7f       	mov    edx,0x7fffffff
9f00605e:	29 c2                	sub    edx,eax
9f006060:	89 d0                	mov    eax,edx
9f006062:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f006065:	7c 1b                	jl     9f006082 <mktime+0x801>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174 (discriminator 3)
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f006067:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f00606d:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:173 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f00606f:	85 c0                	test   eax,eax
9f006071:	79 13                	jns    9f006086 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f006073:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f006079:	8b 00                	mov    eax,DWORD PTR [eax]
9f00607b:	f7 d8                	neg    eax
9f00607d:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f006080:	7e 04                	jle    9f006086 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:175
          overflow|=16;
9f006082:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177
  }
  seconds += libcTZ;
9f006086:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f00608c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00608e:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:179

  if (tmbuf->tm_isdst) {
9f006091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f006094:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
9f006097:	85 c0                	test   eax,eax
9f006099:	74 0b                	je     9f0060a6 <mktime+0x825>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:180
    dst = _dstbias;
9f00609b:	8b 81 e0 00 00 00    	mov    eax,DWORD PTR [ecx+0xe0]
9f0060a1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
9f0060a4:	eb 07                	jmp    9f0060ad <mktime+0x82c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182
  } else {
    dst = 0;
9f0060a6:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
9f0060ad:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f0060b0:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f0060b3:	7e 04                	jle    9f0060b9 <mktime+0x838>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185 (discriminator 1)
9f0060b5:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:186
  seconds -= dst;
9f0060b9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f0060bc:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188

  if (overflow) return (time_t) overflow-2;
9f0060bf:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f0060c3:	74 08                	je     9f0060cd <mktime+0x84c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188 (discriminator 1)
9f0060c5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0060c8:	83 e8 02             	sub    eax,0x2
9f0060cb:	eb 03                	jmp    9f0060d0 <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:191

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
9f0060cd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:192
}
9f0060d0:	83 c4 20             	add    esp,0x20
9f0060d3:	5b                   	pop    ebx
9f0060d4:	5e                   	pop    esi
9f0060d5:	5f                   	pop    edi
9f0060d6:	5d                   	pop    ebp
9f0060d7:	c3                   	ret    

9f0060d8 <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:195

VISIBLE struct tm* gettime(struct tm *time, bool localTime)
{
9f0060d8:	55                   	push   ebp
9f0060d9:	89 e5                	mov    ebp,esp
9f0060db:	56                   	push   esi
9f0060dc:	53                   	push   ebx
9f0060dd:	83 ec 14             	sub    esp,0x14
9f0060e0:	e8 a1 00 00 00       	call   9f006186 <__x86.get_pc_thunk.ax>
9f0060e5:	05 17 31 00 00       	add    eax,0x3117
9f0060ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0060ed:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/aproj/libChrisOS/src/time.c:196
    time_t ticks=0;
9f0060f0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:198
    
    SYSCALL0(SYSCALL_GETTIME, ticks);
9f0060f7:	b8 71 01 00 00       	mov    eax,0x171
9f0060fc:	bb 00 00 00 00       	mov    ebx,0x0
9f006101:	b9 00 00 00 00       	mov    ecx,0x0
9f006106:	ba 00 00 00 00       	mov    edx,0x0
9f00610b:	be 00 00 00 00       	mov    esi,0x0
9f006110:	e8 fc ff ff ff       	call   9f006111 <gettime+0x39>
9f006115:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:199
    if (localTime)
9f006118:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
9f00611c:	74 11                	je     9f00612f <gettime+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:200
        return localtime_rI(&ticks,time);
9f00611e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f006121:	8d 45 f4             	lea    eax,[ebp-0xc]
9f006124:	50                   	push   eax
9f006125:	e8 05 f7 ff ff       	call   9f00582f <localtime_rI>
9f00612a:	83 c4 08             	add    esp,0x8
9f00612d:	eb 0f                	jmp    9f00613e <gettime+0x66>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:202
    else
        return gmtime_rI((time_t*)&ticks,time);
9f00612f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f006132:	8d 45 f4             	lea    eax,[ebp-0xc]
9f006135:	50                   	push   eax
9f006136:	e8 81 f3 ff ff       	call   9f0054bc <gmtime_rI>
9f00613b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:203 (discriminator 1)
}
9f00613e:	8d 65 f8             	lea    esp,[ebp-0x8]
9f006141:	5b                   	pop    ebx
9f006142:	5e                   	pop    esi
9f006143:	5d                   	pop    ebp
9f006144:	c3                   	ret    

9f006145 <time>:
time():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:206

VISIBLE time_t time (time_t *result)
{
9f006145:	55                   	push   ebp
9f006146:	89 e5                	mov    ebp,esp
9f006148:	53                   	push   ebx
9f006149:	83 ec 14             	sub    esp,0x14
9f00614c:	e8 7f 00 00 00       	call   9f0061d0 <__x86.get_pc_thunk.bx>
9f006151:	81 c3 ab 30 00 00    	add    ebx,0x30ab
/home/yogi/src/os/aproj/libChrisOS/src/time.c:207
    uint32_t ticks = do_syscall0(SYSCALL_GETTIME);
9f006157:	83 ec 0c             	sub    esp,0xc
9f00615a:	68 71 01 00 00       	push   0x171
9f00615f:	e8 1c b4 ff ff       	call   9f001580 <do_syscall0>
9f006164:	83 c4 10             	add    esp,0x10
9f006167:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:208
    memcpyI(result, &ticks, 4);
9f00616a:	83 ec 04             	sub    esp,0x4
9f00616d:	6a 04                	push   0x4
9f00616f:	8d 45 f4             	lea    eax,[ebp-0xc]
9f006172:	50                   	push   eax
9f006173:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f006176:	e8 d5 c7 ff ff       	call   9f002950 <memcpyI>
9f00617b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:209
    return ticks;
9f00617e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:210
9f006181:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f006184:	c9                   	leave  
9f006185:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

9f006186 <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
9f006186:	8b 04 24             	mov    eax,DWORD PTR [esp]
9f006189:	c3                   	ret    

Disassembly of section .plt:

9f006190 <.plt>:
9f006190:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
9f006196:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
9f00619c:	00 00                	add    BYTE PTR [eax],al
9f00619e:	00 00                	add    BYTE PTR [eax],al
9f0061a0:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
9f0061a6:	68 00 00 00 00       	push   0x0
9f0061ab:	e9 e0 ff ff ff       	jmp    9f006190 <__x86.get_pc_thunk.ax+0xa>
9f0061b0:	ff a3 10 00 00 00    	jmp    DWORD PTR [ebx+0x10]
9f0061b6:	68 08 00 00 00       	push   0x8
9f0061bb:	e9 d0 ff ff ff       	jmp    9f006190 <__x86.get_pc_thunk.ax+0xa>
9f0061c0:	ff a3 14 00 00 00    	jmp    DWORD PTR [ebx+0x14]
9f0061c6:	68 10 00 00 00       	push   0x10
9f0061cb:	e9 c0 ff ff ff       	jmp    9f006190 <__x86.get_pc_thunk.ax+0xa>

Disassembly of section .text.__x86.get_pc_thunk.bx:

9f0061d0 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
9f0061d0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
9f0061d3:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

9f0061d4 <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
9f0061d4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
9f0061d7:	c3                   	ret    

Disassembly of section .eh_frame:

9f0061d8 <.eh_frame>:
9f0061d8:	14 00                	adc    al,0x0
9f0061da:	00 00                	add    BYTE PTR [eax],al
9f0061dc:	00 00                	add    BYTE PTR [eax],al
9f0061de:	00 00                	add    BYTE PTR [eax],al
9f0061e0:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f0061e3:	00 01                	add    BYTE PTR [ecx],al
9f0061e5:	7c 08                	jl     9f0061ef <__x86.get_pc_thunk.cx+0x1b>
9f0061e7:	01 1b                	add    DWORD PTR [ebx],ebx
9f0061e9:	0c 04                	or     al,0x4
9f0061eb:	04 88                	add    al,0x88
9f0061ed:	01 00                	add    DWORD PTR [eax],eax
9f0061ef:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0061f2:	00 00                	add    BYTE PTR [eax],al
9f0061f4:	1c 00                	sbb    al,0x0
9f0061f6:	00 00                	add    BYTE PTR [eax],al
9f0061f8:	08 9e ff ff 38 00    	or     BYTE PTR [esi+0x38ffff],bl
9f0061fe:	00 00                	add    BYTE PTR [eax],al
9f006200:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006203:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006209:	74 c5                	je     9f0061d0 <__x86.get_pc_thunk.bx>
9f00620b:	0c 04                	or     al,0x4
9f00620d:	04 00                	add    al,0x0
9f00620f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006212:	00 00                	add    BYTE PTR [eax],al
9f006214:	3c 00                	cmp    al,0x0
9f006216:	00 00                	add    BYTE PTR [eax],al
9f006218:	20 9e ff ff 38 00    	and    BYTE PTR [esi+0x38ffff],bl
9f00621e:	00 00                	add    BYTE PTR [eax],al
9f006220:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006223:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006229:	74 c5                	je     9f0061f0 <__x86.get_pc_thunk.cx+0x1c>
9f00622b:	0c 04                	or     al,0x4
9f00622d:	04 00                	add    al,0x0
9f00622f:	00 10                	add    BYTE PTR [eax],dl
9f006231:	00 00                	add    BYTE PTR [eax],al
9f006233:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
9f006237:	00 4e ff             	add    BYTE PTR [esi-0x1],cl
9f00623a:	ff                   	(bad)  
9f00623b:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f00623e:	00 00                	add    BYTE PTR [eax],al
9f006240:	00 00                	add    BYTE PTR [eax],al
9f006242:	00 00                	add    BYTE PTR [eax],al
9f006244:	24 00                	and    al,0x0
9f006246:	00 00                	add    BYTE PTR [eax],al
9f006248:	70 00                	jo     9f00624a <__x86.get_pc_thunk.cx+0x76>
9f00624a:	00 00                	add    BYTE PTR [eax],al
9f00624c:	24 9e                	and    al,0x9e
9f00624e:	ff                   	(bad)  
9f00624f:	ff 55 00             	call   DWORD PTR [ebp+0x0]
9f006252:	00 00                	add    BYTE PTR [eax],al
9f006254:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006257:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00625d:	42                   	inc    edx
9f00625e:	86 03                	xchg   BYTE PTR [ebx],al
9f006260:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f006264:	c3                   	ret    
9f006265:	41                   	inc    ecx
9f006266:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00626a:	04 04                	add    al,0x4
9f00626c:	24 00                	and    al,0x0
9f00626e:	00 00                	add    BYTE PTR [eax],al
9f006270:	98                   	cwde   
9f006271:	00 00                	add    BYTE PTR [eax],al
9f006273:	00 51 9e             	add    BYTE PTR [ecx-0x62],dl
9f006276:	ff                   	(bad)  
9f006277:	ff 55 00             	call   DWORD PTR [ebp+0x0]
9f00627a:	00 00                	add    BYTE PTR [eax],al
9f00627c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00627f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006285:	42                   	inc    edx
9f006286:	86 03                	xchg   BYTE PTR [ebx],al
9f006288:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f00628c:	c3                   	ret    
9f00628d:	41                   	inc    ecx
9f00628e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f006292:	04 04                	add    al,0x4
9f006294:	24 00                	and    al,0x0
9f006296:	00 00                	add    BYTE PTR [eax],al
9f006298:	c0 00 00             	rol    BYTE PTR [eax],0x0
9f00629b:	00 80 9e ff ff 97    	add    BYTE PTR [eax-0x68000062],al
9f0062a1:	00 00                	add    BYTE PTR [eax],al
9f0062a3:	00 00                	add    BYTE PTR [eax],al
9f0062a5:	41                   	inc    ecx
9f0062a6:	0e                   	push   cs
9f0062a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0062ad:	42                   	inc    edx
9f0062ae:	86 03                	xchg   BYTE PTR [ebx],al
9f0062b0:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f0062b4:	c3                   	ret    
9f0062b5:	41                   	inc    ecx
9f0062b6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0062ba:	04 04                	add    al,0x4
9f0062bc:	24 00                	and    al,0x0
9f0062be:	00 00                	add    BYTE PTR [eax],al
9f0062c0:	e8 00 00 00 ef       	call   8e0062c5 <sysEnter_Vector+0x8ded62c5>
9f0062c5:	9e                   	sahf   
9f0062c6:	ff                   	(bad)  
9f0062c7:	ff 97 00 00 00 00    	call   DWORD PTR [edi+0x0]
9f0062cd:	41                   	inc    ecx
9f0062ce:	0e                   	push   cs
9f0062cf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0062d5:	42                   	inc    edx
9f0062d6:	86 03                	xchg   BYTE PTR [ebx],al
9f0062d8:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f0062dc:	c3                   	ret    
9f0062dd:	41                   	inc    ecx
9f0062de:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0062e2:	04 04                	add    al,0x4
9f0062e4:	10 00                	adc    BYTE PTR [eax],al
9f0062e6:	00 00                	add    BYTE PTR [eax],al
9f0062e8:	10 01                	adc    BYTE PTR [ecx],al
9f0062ea:	00 00                	add    BYTE PTR [eax],al
9f0062ec:	e4 fe                	in     al,0xfe
9f0062ee:	ff                   	(bad)  
9f0062ef:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f0062f2:	00 00                	add    BYTE PTR [eax],al
9f0062f4:	00 00                	add    BYTE PTR [eax],al
9f0062f6:	00 00                	add    BYTE PTR [eax],al
9f0062f8:	20 00                	and    BYTE PTR [eax],al
9f0062fa:	00 00                	add    BYTE PTR [eax],al
9f0062fc:	24 01                	and    al,0x1
9f0062fe:	00 00                	add    BYTE PTR [eax],al
9f006300:	4c                   	dec    esp
9f006301:	9f                   	lahf   
9f006302:	ff                   	(bad)  
9f006303:	ff 77 00             	push   DWORD PTR [edi+0x0]
9f006306:	00 00                	add    BYTE PTR [eax],al
9f006308:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00630b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006311:	44                   	inc    esp
9f006312:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006315:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006316:	c5 c3 0c             	(bad)  
9f006319:	04 04                	add    al,0x4
9f00631b:	00 20                	add    BYTE PTR [eax],ah
9f00631d:	00 00                	add    BYTE PTR [eax],al
9f00631f:	00 48 01             	add    BYTE PTR [eax+0x1],cl
9f006322:	00 00                	add    BYTE PTR [eax],al
9f006324:	9f                   	lahf   
9f006325:	9f                   	lahf   
9f006326:	ff                   	(bad)  
9f006327:	ff                   	(bad)  
9f006328:	bb 00 00 00 00       	mov    ebx,0x0
9f00632d:	41                   	inc    ecx
9f00632e:	0e                   	push   cs
9f00632f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006335:	44                   	inc    esp
9f006336:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006339:	b3 c5                	mov    bl,0xc5
9f00633b:	c3                   	ret    
9f00633c:	0c 04                	or     al,0x4
9f00633e:	04 00                	add    al,0x0
9f006340:	20 00                	and    BYTE PTR [eax],al
9f006342:	00 00                	add    BYTE PTR [eax],al
9f006344:	6c                   	ins    BYTE PTR es:[edi],dx
9f006345:	01 00                	add    DWORD PTR [eax],eax
9f006347:	00 36                	add    BYTE PTR [esi],dh
9f006349:	a0 ff ff bd 00       	mov    al,ds:0xbdffff
9f00634e:	00 00                	add    BYTE PTR [eax],al
9f006350:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006353:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006359:	44                   	inc    esp
9f00635a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00635d:	b5 c5                	mov    ch,0xc5
9f00635f:	c3                   	ret    
9f006360:	0c 04                	or     al,0x4
9f006362:	04 00                	add    al,0x0
9f006364:	1c 00                	sbb    al,0x0
9f006366:	00 00                	add    BYTE PTR [eax],al
9f006368:	90                   	nop
9f006369:	01 00                	add    DWORD PTR [eax],eax
9f00636b:	00 cf                	add    bh,cl
9f00636d:	a0 ff ff 5c 00       	mov    al,ds:0x5cffff
9f006372:	00 00                	add    BYTE PTR [eax],al
9f006374:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006377:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00637d:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
9f006380:	0c 04                	or     al,0x4
9f006382:	04 00                	add    al,0x0
9f006384:	1c 00                	sbb    al,0x0
9f006386:	00 00                	add    BYTE PTR [eax],al
9f006388:	b0 01                	mov    al,0x1
9f00638a:	00 00                	add    BYTE PTR [eax],al
9f00638c:	0b a1 ff ff 1a 00    	or     esp,DWORD PTR [ecx+0x1affff]
9f006392:	00 00                	add    BYTE PTR [eax],al
9f006394:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006397:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00639d:	56                   	push   esi
9f00639e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0063a1:	04 00                	add    al,0x0
9f0063a3:	00 20                	add    BYTE PTR [eax],ah
9f0063a5:	00 00                	add    BYTE PTR [eax],al
9f0063a7:	00 d0                	add    al,dl
9f0063a9:	01 00                	add    DWORD PTR [eax],eax
9f0063ab:	00 08                	add    BYTE PTR [eax],cl
9f0063ad:	a1 ff ff ba 00       	mov    eax,ds:0xbaffff
9f0063b2:	00 00                	add    BYTE PTR [eax],al
9f0063b4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0063b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0063bd:	44                   	inc    esp
9f0063be:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0063c1:	b2 c5                	mov    dl,0xc5
9f0063c3:	c3                   	ret    
9f0063c4:	0c 04                	or     al,0x4
9f0063c6:	04 00                	add    al,0x0
9f0063c8:	20 00                	and    BYTE PTR [eax],al
9f0063ca:	00 00                	add    BYTE PTR [eax],al
9f0063cc:	f4                   	hlt    
9f0063cd:	01 00                	add    DWORD PTR [eax],eax
9f0063cf:	00 9e a1 ff ff 5a    	add    BYTE PTR [esi+0x5affffa1],bl
9f0063d5:	00 00                	add    BYTE PTR [eax],al
9f0063d7:	00 00                	add    BYTE PTR [eax],al
9f0063d9:	41                   	inc    ecx
9f0063da:	0e                   	push   cs
9f0063db:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0063e1:	44                   	inc    esp
9f0063e2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0063e5:	52                   	push   edx
9f0063e6:	c5 c3 0c             	(bad)  
9f0063e9:	04 04                	add    al,0x4
9f0063eb:	00 20                	add    BYTE PTR [eax],ah
9f0063ed:	00 00                	add    BYTE PTR [eax],al
9f0063ef:	00 18                	add    BYTE PTR [eax],bl
9f0063f1:	02 00                	add    al,BYTE PTR [eax]
9f0063f3:	00 d4                	add    ah,dl
9f0063f5:	a1 ff ff 5a 00       	mov    eax,ds:0x5affff
9f0063fa:	00 00                	add    BYTE PTR [eax],al
9f0063fc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0063ff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006405:	44                   	inc    esp
9f006406:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006409:	52                   	push   edx
9f00640a:	c5 c3 0c             	(bad)  
9f00640d:	04 04                	add    al,0x4
9f00640f:	00 28                	add    BYTE PTR [eax],ch
9f006411:	00 00                	add    BYTE PTR [eax],al
9f006413:	00 3c 02             	add    BYTE PTR [edx+eax*1],bh
9f006416:	00 00                	add    BYTE PTR [eax],al
9f006418:	0c a2                	or     al,0xa2
9f00641a:	ff                   	(bad)  
9f00641b:	ff 44 01 00          	inc    DWORD PTR [ecx+eax*1+0x0]
9f00641f:	00 00                	add    BYTE PTR [eax],al
9f006421:	41                   	inc    ecx
9f006422:	0e                   	push   cs
9f006423:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006429:	48                   	dec    eax
9f00642a:	87 03                	xchg   DWORD PTR [ebx],eax
9f00642c:	83 04 03 36          	add    DWORD PTR [ebx+eax*1],0x36
9f006430:	01 c3                	add    ebx,eax
9f006432:	41                   	inc    ecx
9f006433:	c7 41 c5 0c 04 04 00 	mov    DWORD PTR [ecx-0x3b],0x4040c
9f00643a:	00 00                	add    BYTE PTR [eax],al
9f00643c:	1c 00                	sbb    al,0x0
9f00643e:	00 00                	add    BYTE PTR [eax],al
9f006440:	68 02 00 00 24       	push   0x24000002
9f006445:	a3 ff ff 20 00       	mov    ds:0x20ffff,eax
9f00644a:	00 00                	add    BYTE PTR [eax],al
9f00644c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00644f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006455:	5c                   	pop    esp
9f006456:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006459:	04 00                	add    al,0x0
9f00645b:	00 20                	add    BYTE PTR [eax],ah
9f00645d:	00 00                	add    BYTE PTR [eax],al
9f00645f:	00 88 02 00 00 24    	add    BYTE PTR [eax+0x24000002],cl
9f006465:	a3 ff ff aa 00       	mov    ds:0xaaffff,eax
9f00646a:	00 00                	add    BYTE PTR [eax],al
9f00646c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00646f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006475:	44                   	inc    esp
9f006476:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006479:	a2 c5 c3 0c 04       	mov    ds:0x40cc3c5,al
9f00647e:	04 00                	add    al,0x0
9f006480:	1c 00                	sbb    al,0x0
9f006482:	00 00                	add    BYTE PTR [eax],al
9f006484:	ac                   	lods   al,BYTE PTR ds:[esi]
9f006485:	02 00                	add    al,BYTE PTR [eax]
9f006487:	00 aa a3 ff ff 23    	add    BYTE PTR [edx+0x23ffffa3],ch
9f00648d:	00 00                	add    BYTE PTR [eax],al
9f00648f:	00 00                	add    BYTE PTR [eax],al
9f006491:	41                   	inc    ecx
9f006492:	0e                   	push   cs
9f006493:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006499:	5f                   	pop    edi
9f00649a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00649d:	04 00                	add    al,0x0
9f00649f:	00 20                	add    BYTE PTR [eax],ah
9f0064a1:	00 00                	add    BYTE PTR [eax],al
9f0064a3:	00 cc                	add    ah,cl
9f0064a5:	02 00                	add    al,BYTE PTR [eax]
9f0064a7:	00 ad a3 ff ff c1    	add    BYTE PTR [ebp-0x3e00005d],ch
9f0064ad:	01 00                	add    DWORD PTR [eax],eax
9f0064af:	00 00                	add    BYTE PTR [eax],al
9f0064b1:	41                   	inc    ecx
9f0064b2:	0e                   	push   cs
9f0064b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0064b9:	44                   	inc    esp
9f0064ba:	83 03 03             	add    DWORD PTR [ebx],0x3
9f0064bd:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
9f0064c2:	04 04                	add    al,0x4
9f0064c4:	20 00                	and    BYTE PTR [eax],al
9f0064c6:	00 00                	add    BYTE PTR [eax],al
9f0064c8:	f0 02 00             	lock add al,BYTE PTR [eax]
9f0064cb:	00 4a a5             	add    BYTE PTR [edx-0x5b],cl
9f0064ce:	ff                   	(bad)  
9f0064cf:	ff 2c 00             	jmp    FWORD PTR [eax+eax*1]
9f0064d2:	00 00                	add    BYTE PTR [eax],al
9f0064d4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0064d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0064dd:	44                   	inc    esp
9f0064de:	83 03 64             	add    DWORD PTR [ebx],0x64
9f0064e1:	c5 c3 0c             	(bad)  
9f0064e4:	04 04                	add    al,0x4
9f0064e6:	00 00                	add    BYTE PTR [eax],al
9f0064e8:	1c 00                	sbb    al,0x0
9f0064ea:	00 00                	add    BYTE PTR [eax],al
9f0064ec:	14 03                	adc    al,0x3
9f0064ee:	00 00                	add    BYTE PTR [eax],al
9f0064f0:	52                   	push   edx
9f0064f1:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f0064f2:	ff                   	(bad)  
9f0064f3:	ff 23                	jmp    DWORD PTR [ebx]
9f0064f5:	00 00                	add    BYTE PTR [eax],al
9f0064f7:	00 00                	add    BYTE PTR [eax],al
9f0064f9:	41                   	inc    ecx
9f0064fa:	0e                   	push   cs
9f0064fb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006501:	5f                   	pop    edi
9f006502:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006505:	04 00                	add    al,0x0
9f006507:	00 20                	add    BYTE PTR [eax],ah
9f006509:	00 00                	add    BYTE PTR [eax],al
9f00650b:	00 34 03             	add    BYTE PTR [ebx+eax*1],dh
9f00650e:	00 00                	add    BYTE PTR [eax],al
9f006510:	58                   	pop    eax
9f006511:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f006512:	ff                   	(bad)  
9f006513:	ff 31                	push   DWORD PTR [ecx]
9f006515:	00 00                	add    BYTE PTR [eax],al
9f006517:	00 00                	add    BYTE PTR [eax],al
9f006519:	41                   	inc    ecx
9f00651a:	0e                   	push   cs
9f00651b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006521:	44                   	inc    esp
9f006522:	83 03 69             	add    DWORD PTR [ebx],0x69
9f006525:	c5 c3 0c             	(bad)  
9f006528:	04 04                	add    al,0x4
9f00652a:	00 00                	add    BYTE PTR [eax],al
9f00652c:	1c 00                	sbb    al,0x0
9f00652e:	00 00                	add    BYTE PTR [eax],al
9f006530:	58                   	pop    eax
9f006531:	03 00                	add    eax,DWORD PTR [eax]
9f006533:	00 65 a5             	add    BYTE PTR [ebp-0x5b],ah
9f006536:	ff                   	(bad)  
9f006537:	ff 26                	jmp    DWORD PTR [esi]
9f006539:	00 00                	add    BYTE PTR [eax],al
9f00653b:	00 00                	add    BYTE PTR [eax],al
9f00653d:	41                   	inc    ecx
9f00653e:	0e                   	push   cs
9f00653f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006545:	62                   	(bad)  
9f006546:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006549:	04 00                	add    al,0x0
9f00654b:	00 20                	add    BYTE PTR [eax],ah
9f00654d:	00 00                	add    BYTE PTR [eax],al
9f00654f:	00 78 03             	add    BYTE PTR [eax+0x3],bh
9f006552:	00 00                	add    BYTE PTR [eax],al
9f006554:	6b a5 ff ff 2c 00 00 	imul   esp,DWORD PTR [ebp+0x2cffff],0x0
9f00655b:	00 00                	add    BYTE PTR [eax],al
9f00655d:	41                   	inc    ecx
9f00655e:	0e                   	push   cs
9f00655f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006565:	44                   	inc    esp
9f006566:	83 03 64             	add    DWORD PTR [ebx],0x64
9f006569:	c5 c3 0c             	(bad)  
9f00656c:	04 04                	add    al,0x4
9f00656e:	00 00                	add    BYTE PTR [eax],al
9f006570:	1c 00                	sbb    al,0x0
9f006572:	00 00                	add    BYTE PTR [eax],al
9f006574:	9c                   	pushf  
9f006575:	03 00                	add    eax,DWORD PTR [eax]
9f006577:	00 73 a5             	add    BYTE PTR [ebx-0x5b],dh
9f00657a:	ff                   	(bad)  
9f00657b:	ff 23                	jmp    DWORD PTR [ebx]
9f00657d:	00 00                	add    BYTE PTR [eax],al
9f00657f:	00 00                	add    BYTE PTR [eax],al
9f006581:	41                   	inc    ecx
9f006582:	0e                   	push   cs
9f006583:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006589:	5f                   	pop    edi
9f00658a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00658d:	04 00                	add    al,0x0
9f00658f:	00 20                	add    BYTE PTR [eax],ah
9f006591:	00 00                	add    BYTE PTR [eax],al
9f006593:	00 bc 03 00 00 76 a5 	add    BYTE PTR [ebx+eax*1-0x5a8a0000],bh
9f00659a:	ff                   	(bad)  
9f00659b:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f00659e:	00 00                	add    BYTE PTR [eax],al
9f0065a0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0065a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0065a9:	44                   	inc    esp
9f0065aa:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0065ad:	51                   	push   ecx
9f0065ae:	c5 c3 0c             	(bad)  
9f0065b1:	04 04                	add    al,0x4
9f0065b3:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0065b6:	00 00                	add    BYTE PTR [eax],al
9f0065b8:	e0 03                	loopne 9f0065bd <__x86.get_pc_thunk.cx+0x3e9>
9f0065ba:	00 00                	add    BYTE PTR [eax],al
9f0065bc:	ab                   	stos   DWORD PTR es:[edi],eax
9f0065bd:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f0065be:	ff                   	(bad)  
9f0065bf:	ff 93 00 00 00 00    	call   DWORD PTR [ebx+0x0]
9f0065c5:	41                   	inc    ecx
9f0065c6:	0e                   	push   cs
9f0065c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0065cd:	45                   	inc    ebp
9f0065ce:	86 03                	xchg   BYTE PTR [ebx],al
9f0065d0:	83 04 02 88          	add    DWORD PTR [edx+eax*1],0xffffff88
9f0065d4:	c3                   	ret    
9f0065d5:	41                   	inc    ecx
9f0065d6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0065da:	04 04                	add    al,0x4
9f0065dc:	20 00                	and    BYTE PTR [eax],al
9f0065de:	00 00                	add    BYTE PTR [eax],al
9f0065e0:	08 04 00             	or     BYTE PTR [eax+eax*1],al
9f0065e3:	00 16                	add    BYTE PTR [esi],dl
9f0065e5:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
9f0065e6:	ff                   	(bad)  
9f0065e7:	ff 2a                	jmp    FWORD PTR [edx]
9f0065e9:	00 00                	add    BYTE PTR [eax],al
9f0065eb:	00 00                	add    BYTE PTR [eax],al
9f0065ed:	41                   	inc    ecx
9f0065ee:	0e                   	push   cs
9f0065ef:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0065f5:	44                   	inc    esp
9f0065f6:	83 03 62             	add    DWORD PTR [ebx],0x62
9f0065f9:	c5 c3 0c             	(bad)  
9f0065fc:	04 04                	add    al,0x4
9f0065fe:	00 00                	add    BYTE PTR [eax],al
9f006600:	1c 00                	sbb    al,0x0
9f006602:	00 00                	add    BYTE PTR [eax],al
9f006604:	2c 04                	sub    al,0x4
9f006606:	00 00                	add    BYTE PTR [eax],al
9f006608:	1c a6                	sbb    al,0xa6
9f00660a:	ff                   	(bad)  
9f00660b:	ff 20                	jmp    DWORD PTR [eax]
9f00660d:	00 00                	add    BYTE PTR [eax],al
9f00660f:	00 00                	add    BYTE PTR [eax],al
9f006611:	41                   	inc    ecx
9f006612:	0e                   	push   cs
9f006613:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006619:	5c                   	pop    esp
9f00661a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00661d:	04 00                	add    al,0x0
9f00661f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f006622:	00 00                	add    BYTE PTR [eax],al
9f006624:	4c                   	dec    esp
9f006625:	04 00                	add    al,0x0
9f006627:	00 1c a6             	add    BYTE PTR [esi+eiz*4],bl
9f00662a:	ff                   	(bad)  
9f00662b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f006631:	41                   	inc    ecx
9f006632:	0e                   	push   cs
9f006633:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006639:	42                   	inc    edx
9f00663a:	86 03                	xchg   BYTE PTR [ebx],al
9f00663c:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f006643:	c5 
9f006644:	0c 04                	or     al,0x4
9f006646:	04 00                	add    al,0x0
9f006648:	1c 00                	sbb    al,0x0
9f00664a:	00 00                	add    BYTE PTR [eax],al
9f00664c:	74 04                	je     9f006652 <__x86.get_pc_thunk.cx+0x47e>
9f00664e:	00 00                	add    BYTE PTR [eax],al
9f006650:	29 a6 ff ff 26 00    	sub    DWORD PTR [esi+0x26ffff],esp
9f006656:	00 00                	add    BYTE PTR [eax],al
9f006658:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00665b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006661:	62                   	(bad)  
9f006662:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006665:	04 00                	add    al,0x0
9f006667:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00666a:	00 00                	add    BYTE PTR [eax],al
9f00666c:	94                   	xchg   esp,eax
9f00666d:	04 00                	add    al,0x0
9f00666f:	00 2f                	add    BYTE PTR [edi],ch
9f006671:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
9f006672:	ff                   	(bad)  
9f006673:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f006679:	41                   	inc    ecx
9f00667a:	0e                   	push   cs
9f00667b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006681:	42                   	inc    edx
9f006682:	86 03                	xchg   BYTE PTR [ebx],al
9f006684:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f00668b:	c5 
9f00668c:	0c 04                	or     al,0x4
9f00668e:	04 00                	add    al,0x0
9f006690:	1c 00                	sbb    al,0x0
9f006692:	00 00                	add    BYTE PTR [eax],al
9f006694:	bc 04 00 00 3c       	mov    esp,0x3c000004
9f006699:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
9f00669a:	ff                   	(bad)  
9f00669b:	ff 26                	jmp    DWORD PTR [esi]
9f00669d:	00 00                	add    BYTE PTR [eax],al
9f00669f:	00 00                	add    BYTE PTR [eax],al
9f0066a1:	41                   	inc    ecx
9f0066a2:	0e                   	push   cs
9f0066a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0066a9:	62                   	(bad)  
9f0066aa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0066ad:	04 00                	add    al,0x0
9f0066af:	00 20                	add    BYTE PTR [eax],ah
9f0066b1:	00 00                	add    BYTE PTR [eax],al
9f0066b3:	00 dc                	add    ah,bl
9f0066b5:	04 00                	add    al,0x0
9f0066b7:	00 42 a6             	add    BYTE PTR [edx-0x5a],al
9f0066ba:	ff                   	(bad)  
9f0066bb:	ff 2e                	jmp    FWORD PTR [esi]
9f0066bd:	00 00                	add    BYTE PTR [eax],al
9f0066bf:	00 00                	add    BYTE PTR [eax],al
9f0066c1:	41                   	inc    ecx
9f0066c2:	0e                   	push   cs
9f0066c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0066c9:	44                   	inc    esp
9f0066ca:	83 03 66             	add    DWORD PTR [ebx],0x66
9f0066cd:	c5 c3 0c             	(bad)  
9f0066d0:	04 04                	add    al,0x4
9f0066d2:	00 00                	add    BYTE PTR [eax],al
9f0066d4:	1c 00                	sbb    al,0x0
9f0066d6:	00 00                	add    BYTE PTR [eax],al
9f0066d8:	00 05 00 00 4c a6    	add    BYTE PTR ds:0xa64c0000,al
9f0066de:	ff                   	(bad)  
9f0066df:	ff 26                	jmp    DWORD PTR [esi]
9f0066e1:	00 00                	add    BYTE PTR [eax],al
9f0066e3:	00 00                	add    BYTE PTR [eax],al
9f0066e5:	41                   	inc    ecx
9f0066e6:	0e                   	push   cs
9f0066e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0066ed:	62                   	(bad)  
9f0066ee:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0066f1:	04 00                	add    al,0x0
9f0066f3:	00 20                	add    BYTE PTR [eax],ah
9f0066f5:	00 00                	add    BYTE PTR [eax],al
9f0066f7:	00 20                	add    BYTE PTR [eax],ah
9f0066f9:	05 00 00 52 a6       	add    eax,0xa6520000
9f0066fe:	ff                   	(bad)  
9f0066ff:	ff 2d 00 00 00 00    	jmp    FWORD PTR ds:0x0
9f006705:	41                   	inc    ecx
9f006706:	0e                   	push   cs
9f006707:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00670d:	44                   	inc    esp
9f00670e:	83 03 65             	add    DWORD PTR [ebx],0x65
9f006711:	c5 c3 0c             	(bad)  
9f006714:	04 04                	add    al,0x4
9f006716:	00 00                	add    BYTE PTR [eax],al
9f006718:	1c 00                	sbb    al,0x0
9f00671a:	00 00                	add    BYTE PTR [eax],al
9f00671c:	44                   	inc    esp
9f00671d:	05 00 00 5b a6       	add    eax,0xa65b0000
9f006722:	ff                   	(bad)  
9f006723:	ff 23                	jmp    DWORD PTR [ebx]
9f006725:	00 00                	add    BYTE PTR [eax],al
9f006727:	00 00                	add    BYTE PTR [eax],al
9f006729:	41                   	inc    ecx
9f00672a:	0e                   	push   cs
9f00672b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006731:	5f                   	pop    edi
9f006732:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006735:	04 00                	add    al,0x0
9f006737:	00 20                	add    BYTE PTR [eax],ah
9f006739:	00 00                	add    BYTE PTR [eax],al
9f00673b:	00 64 05 00          	add    BYTE PTR [ebp+eax*1+0x0],ah
9f00673f:	00 5e a6             	add    BYTE PTR [esi-0x5a],bl
9f006742:	ff                   	(bad)  
9f006743:	ff 29                	jmp    FWORD PTR [ecx]
9f006745:	03 00                	add    eax,DWORD PTR [eax]
9f006747:	00 00                	add    BYTE PTR [eax],al
9f006749:	41                   	inc    ecx
9f00674a:	0e                   	push   cs
9f00674b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006751:	44                   	inc    esp
9f006752:	83 03 03             	add    DWORD PTR [ebx],0x3
9f006755:	21 03                	and    DWORD PTR [ebx],eax
9f006757:	c5 c3 0c             	(bad)  
9f00675a:	04 04                	add    al,0x4
9f00675c:	20 00                	and    BYTE PTR [eax],al
9f00675e:	00 00                	add    BYTE PTR [eax],al
9f006760:	88 05 00 00 63 a9    	mov    BYTE PTR ds:0xa9630000,al
9f006766:	ff                   	(bad)  
9f006767:	ff 29                	jmp    FWORD PTR [ecx]
9f006769:	00 00                	add    BYTE PTR [eax],al
9f00676b:	00 00                	add    BYTE PTR [eax],al
9f00676d:	41                   	inc    ecx
9f00676e:	0e                   	push   cs
9f00676f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006775:	44                   	inc    esp
9f006776:	83 03 61             	add    DWORD PTR [ebx],0x61
9f006779:	c5 c3 0c             	(bad)  
9f00677c:	04 04                	add    al,0x4
9f00677e:	00 00                	add    BYTE PTR [eax],al
9f006780:	1c 00                	sbb    al,0x0
9f006782:	00 00                	add    BYTE PTR [eax],al
9f006784:	ac                   	lods   al,BYTE PTR ds:[esi]
9f006785:	05 00 00 68 a9       	add    eax,0xa9680000
9f00678a:	ff                   	(bad)  
9f00678b:	ff 20                	jmp    DWORD PTR [eax]
9f00678d:	00 00                	add    BYTE PTR [eax],al
9f00678f:	00 00                	add    BYTE PTR [eax],al
9f006791:	41                   	inc    ecx
9f006792:	0e                   	push   cs
9f006793:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006799:	5c                   	pop    esp
9f00679a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00679d:	04 00                	add    al,0x0
9f00679f:	00 20                	add    BYTE PTR [eax],ah
9f0067a1:	00 00                	add    BYTE PTR [eax],al
9f0067a3:	00 cc                	add    ah,cl
9f0067a5:	05 00 00 68 a9       	add    eax,0xa9680000
9f0067aa:	ff                   	(bad)  
9f0067ab:	ff c1                	inc    ecx
9f0067ad:	01 00                	add    DWORD PTR [eax],eax
9f0067af:	00 00                	add    BYTE PTR [eax],al
9f0067b1:	41                   	inc    ecx
9f0067b2:	0e                   	push   cs
9f0067b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0067b9:	44                   	inc    esp
9f0067ba:	83 03 03             	add    DWORD PTR [ebx],0x3
9f0067bd:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
9f0067c2:	04 04                	add    al,0x4
9f0067c4:	1c 00                	sbb    al,0x0
9f0067c6:	00 00                	add    BYTE PTR [eax],al
9f0067c8:	f0 05 00 00 05 ab    	lock add eax,0xab050000
9f0067ce:	ff                   	(bad)  
9f0067cf:	ff 26                	jmp    DWORD PTR [esi]
9f0067d1:	00 00                	add    BYTE PTR [eax],al
9f0067d3:	00 00                	add    BYTE PTR [eax],al
9f0067d5:	41                   	inc    ecx
9f0067d6:	0e                   	push   cs
9f0067d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0067dd:	62                   	(bad)  
9f0067de:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0067e1:	04 00                	add    al,0x0
9f0067e3:	00 20                	add    BYTE PTR [eax],ah
9f0067e5:	00 00                	add    BYTE PTR [eax],al
9f0067e7:	00 10                	add    BYTE PTR [eax],dl
9f0067e9:	06                   	push   es
9f0067ea:	00 00                	add    BYTE PTR [eax],al
9f0067ec:	0b ab ff ff 29 00    	or     ebp,DWORD PTR [ebx+0x29ffff]
9f0067f2:	00 00                	add    BYTE PTR [eax],al
9f0067f4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0067f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0067fd:	44                   	inc    esp
9f0067fe:	83 03 61             	add    DWORD PTR [ebx],0x61
9f006801:	c5 c3 0c             	(bad)  
9f006804:	04 04                	add    al,0x4
9f006806:	00 00                	add    BYTE PTR [eax],al
9f006808:	20 00                	and    BYTE PTR [eax],al
9f00680a:	00 00                	add    BYTE PTR [eax],al
9f00680c:	34 06                	xor    al,0x6
9f00680e:	00 00                	add    BYTE PTR [eax],al
9f006810:	10 ab ff ff 26 00    	adc    BYTE PTR [ebx+0x26ffff],ch
9f006816:	00 00                	add    BYTE PTR [eax],al
9f006818:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00681b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006821:	41                   	inc    ecx
9f006822:	83 03 60             	add    DWORD PTR [ebx],0x60
9f006825:	c3                   	ret    
9f006826:	41                   	inc    ecx
9f006827:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00682a:	04 00                	add    al,0x0
9f00682c:	20 00                	and    BYTE PTR [eax],al
9f00682e:	00 00                	add    BYTE PTR [eax],al
9f006830:	58                   	pop    eax
9f006831:	06                   	push   es
9f006832:	00 00                	add    BYTE PTR [eax],al
9f006834:	12 ab ff ff 43 00    	adc    ch,BYTE PTR [ebx+0x43ffff]
9f00683a:	00 00                	add    BYTE PTR [eax],al
9f00683c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00683f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006845:	44                   	inc    esp
9f006846:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f006849:	c3                   	ret    
9f00684a:	41                   	inc    ecx
9f00684b:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00684e:	04 00                	add    al,0x0
9f006850:	20 00                	and    BYTE PTR [eax],al
9f006852:	00 00                	add    BYTE PTR [eax],al
9f006854:	7c 06                	jl     9f00685c <__x86.get_pc_thunk.cx+0x688>
9f006856:	00 00                	add    BYTE PTR [eax],al
9f006858:	31 ab ff ff 43 00    	xor    DWORD PTR [ebx+0x43ffff],ebp
9f00685e:	00 00                	add    BYTE PTR [eax],al
9f006860:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006863:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006869:	44                   	inc    esp
9f00686a:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f00686d:	c3                   	ret    
9f00686e:	41                   	inc    ecx
9f00686f:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006872:	04 00                	add    al,0x0
9f006874:	20 00                	and    BYTE PTR [eax],al
9f006876:	00 00                	add    BYTE PTR [eax],al
9f006878:	a0 06 00 00 50       	mov    al,ds:0x50000006
9f00687d:	ab                   	stos   DWORD PTR es:[edi],eax
9f00687e:	ff                   	(bad)  
9f00687f:	ff                   	(bad)  
9f006880:	bd 00 00 00 00       	mov    ebp,0x0
9f006885:	41                   	inc    ecx
9f006886:	0e                   	push   cs
9f006887:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00688d:	44                   	inc    esp
9f00688e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006891:	b5 c5                	mov    ch,0xc5
9f006893:	c3                   	ret    
9f006894:	0c 04                	or     al,0x4
9f006896:	04 00                	add    al,0x0
9f006898:	24 00                	and    al,0x0
9f00689a:	00 00                	add    BYTE PTR [eax],al
9f00689c:	c4 06                	les    eax,FWORD PTR [esi]
9f00689e:	00 00                	add    BYTE PTR [eax],al
9f0068a0:	ec                   	in     al,dx
9f0068a1:	ab                   	stos   DWORD PTR es:[edi],eax
9f0068a2:	ff                   	(bad)  
9f0068a3:	ff                   	(bad)  
9f0068a4:	3a 00                	cmp    al,BYTE PTR [eax]
9f0068a6:	00 00                	add    BYTE PTR [eax],al
9f0068a8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0068ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0068b1:	45                   	inc    ebp
9f0068b2:	86 03                	xchg   BYTE PTR [ebx],al
9f0068b4:	83 04 6f c3          	add    DWORD PTR [edi+ebp*2],0xffffffc3
9f0068b8:	41                   	inc    ecx
9f0068b9:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0068bd:	04 04                	add    al,0x4
9f0068bf:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0068c2:	00 00                	add    BYTE PTR [eax],al
9f0068c4:	ec                   	in     al,dx
9f0068c5:	06                   	push   es
9f0068c6:	00 00                	add    BYTE PTR [eax],al
9f0068c8:	fe                   	(bad)  
9f0068c9:	ab                   	stos   DWORD PTR es:[edi],eax
9f0068ca:	ff                   	(bad)  
9f0068cb:	ff                   	(bad)  
9f0068cc:	3c 00                	cmp    al,0x0
9f0068ce:	00 00                	add    BYTE PTR [eax],al
9f0068d0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0068d3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0068d9:	45                   	inc    ebp
9f0068da:	86 03                	xchg   BYTE PTR [ebx],al
9f0068dc:	83 04 71 c3          	add    DWORD PTR [ecx+esi*2],0xffffffc3
9f0068e0:	41                   	inc    ecx
9f0068e1:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0068e5:	04 04                	add    al,0x4
9f0068e7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0068ea:	00 00                	add    BYTE PTR [eax],al
9f0068ec:	14 07                	adc    al,0x7
9f0068ee:	00 00                	add    BYTE PTR [eax],al
9f0068f0:	12 ac ff ff 3e 00 00 	adc    ch,BYTE PTR [edi+edi*8+0x3eff]
9f0068f7:	00 00                	add    BYTE PTR [eax],al
9f0068f9:	41                   	inc    ecx
9f0068fa:	0e                   	push   cs
9f0068fb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006901:	45                   	inc    ebp
9f006902:	86 03                	xchg   BYTE PTR [ebx],al
9f006904:	83 04 73 c3          	add    DWORD PTR [ebx+esi*2],0xffffffc3
9f006908:	41                   	inc    ecx
9f006909:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00690d:	04 04                	add    al,0x4
9f00690f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f006912:	00 00                	add    BYTE PTR [eax],al
9f006914:	3c 07                	cmp    al,0x7
9f006916:	00 00                	add    BYTE PTR [eax],al
9f006918:	28 ac ff ff 40 00 00 	sub    BYTE PTR [edi+edi*8+0x40ff],ch
9f00691f:	00 00                	add    BYTE PTR [eax],al
9f006921:	41                   	inc    ecx
9f006922:	0e                   	push   cs
9f006923:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006929:	45                   	inc    ebp
9f00692a:	86 03                	xchg   BYTE PTR [ebx],al
9f00692c:	83 04 75 c3 41 c6 41 	add    DWORD PTR [esi*2+0x41c641c3],0xffffffc5
9f006933:	c5 
9f006934:	0c 04                	or     al,0x4
9f006936:	04 00                	add    al,0x0
9f006938:	24 00                	and    al,0x0
9f00693a:	00 00                	add    BYTE PTR [eax],al
9f00693c:	64                   	fs
9f00693d:	07                   	pop    es
9f00693e:	00 00                	add    BYTE PTR [eax],al
9f006940:	40                   	inc    eax
9f006941:	ac                   	lods   al,BYTE PTR ds:[esi]
9f006942:	ff                   	(bad)  
9f006943:	ff 42 00             	inc    DWORD PTR [edx+0x0]
9f006946:	00 00                	add    BYTE PTR [eax],al
9f006948:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00694b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006951:	45                   	inc    ebp
9f006952:	86 03                	xchg   BYTE PTR [ebx],al
9f006954:	83 04 77 c3          	add    DWORD PTR [edi+esi*2],0xffffffc3
9f006958:	41                   	inc    ecx
9f006959:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00695d:	04 04                	add    al,0x4
9f00695f:	00 20                	add    BYTE PTR [eax],ah
9f006961:	00 00                	add    BYTE PTR [eax],al
9f006963:	00 8c 07 00 00 5a ac 	add    BYTE PTR [edi+eax*1-0x53a60000],cl
9f00696a:	ff                   	(bad)  
9f00696b:	ff cb                	dec    ebx
9f00696d:	00 00                	add    BYTE PTR [eax],al
9f00696f:	00 00                	add    BYTE PTR [eax],al
9f006971:	41                   	inc    ecx
9f006972:	0e                   	push   cs
9f006973:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006979:	44                   	inc    esp
9f00697a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00697d:	c3                   	ret    
9f00697e:	c5 c3 0c             	(bad)  
9f006981:	04 04                	add    al,0x4
9f006983:	00 20                	add    BYTE PTR [eax],ah
9f006985:	00 00                	add    BYTE PTR [eax],al
9f006987:	00 b0 07 00 00 01    	add    BYTE PTR [eax+0x1000007],dh
9f00698d:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f00698e:	ff                   	(bad)  
9f00698f:	ff 23                	jmp    DWORD PTR [ebx]
9f006991:	00 00                	add    BYTE PTR [eax],al
9f006993:	00 00                	add    BYTE PTR [eax],al
9f006995:	41                   	inc    ecx
9f006996:	0e                   	push   cs
9f006997:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00699d:	44                   	inc    esp
9f00699e:	83 03 5a             	add    DWORD PTR [ebx],0x5a
9f0069a1:	c3                   	ret    
9f0069a2:	41                   	inc    ecx
9f0069a3:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0069a6:	04 00                	add    al,0x0
9f0069a8:	20 00                	and    BYTE PTR [eax],al
9f0069aa:	00 00                	add    BYTE PTR [eax],al
9f0069ac:	d4 07                	aam    0x7
9f0069ae:	00 00                	add    BYTE PTR [eax],al
9f0069b0:	00 ad ff ff 59 00    	add    BYTE PTR [ebp+0x59ffff],ch
9f0069b6:	00 00                	add    BYTE PTR [eax],al
9f0069b8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0069bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0069c1:	44                   	inc    esp
9f0069c2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0069c5:	51                   	push   ecx
9f0069c6:	c5 c3 0c             	(bad)  
9f0069c9:	04 04                	add    al,0x4
9f0069cb:	00 20                	add    BYTE PTR [eax],ah
9f0069cd:	00 00                	add    BYTE PTR [eax],al
9f0069cf:	00 f8                	add    al,bh
9f0069d1:	07                   	pop    es
9f0069d2:	00 00                	add    BYTE PTR [eax],al
9f0069d4:	35 ad ff ff 54       	xor    eax,0x54ffffad
9f0069d9:	00 00                	add    BYTE PTR [eax],al
9f0069db:	00 00                	add    BYTE PTR [eax],al
9f0069dd:	41                   	inc    ecx
9f0069de:	0e                   	push   cs
9f0069df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0069e5:	44                   	inc    esp
9f0069e6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0069e9:	4c                   	dec    esp
9f0069ea:	c5 c3 0c             	(bad)  
9f0069ed:	04 04                	add    al,0x4
9f0069ef:	00 20                	add    BYTE PTR [eax],ah
9f0069f1:	00 00                	add    BYTE PTR [eax],al
9f0069f3:	00 1c 08             	add    BYTE PTR [eax+ecx*1],bl
9f0069f6:	00 00                	add    BYTE PTR [eax],al
9f0069f8:	65 ad                	lods   eax,DWORD PTR gs:[esi]
9f0069fa:	ff                   	(bad)  
9f0069fb:	ff 54 00 00          	call   DWORD PTR [eax+eax*1+0x0]
9f0069ff:	00 00                	add    BYTE PTR [eax],al
9f006a01:	41                   	inc    ecx
9f006a02:	0e                   	push   cs
9f006a03:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006a09:	44                   	inc    esp
9f006a0a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006a0d:	4c                   	dec    esp
9f006a0e:	c5 c3 0c             	(bad)  
9f006a11:	04 04                	add    al,0x4
9f006a13:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006a16:	00 00                	add    BYTE PTR [eax],al
9f006a18:	40                   	inc    eax
9f006a19:	08 00                	or     BYTE PTR [eax],al
9f006a1b:	00 95 ad ff ff 34    	add    BYTE PTR [ebp+0x34ffffad],dl
9f006a21:	00 00                	add    BYTE PTR [eax],al
9f006a23:	00 00                	add    BYTE PTR [eax],al
9f006a25:	41                   	inc    ecx
9f006a26:	0e                   	push   cs
9f006a27:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006a2d:	70 c5                	jo     9f0069f4 <__x86.get_pc_thunk.cx+0x820>
9f006a2f:	0c 04                	or     al,0x4
9f006a31:	04 00                	add    al,0x0
9f006a33:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006a36:	00 00                	add    BYTE PTR [eax],al
9f006a38:	60                   	pusha  
9f006a39:	08 00                	or     BYTE PTR [eax],al
9f006a3b:	00 a9 ad ff ff 37    	add    BYTE PTR [ecx+0x37ffffad],ch
9f006a41:	00 00                	add    BYTE PTR [eax],al
9f006a43:	00 00                	add    BYTE PTR [eax],al
9f006a45:	41                   	inc    ecx
9f006a46:	0e                   	push   cs
9f006a47:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006a4d:	73 c5                	jae    9f006a14 <__x86.get_pc_thunk.cx+0x840>
9f006a4f:	0c 04                	or     al,0x4
9f006a51:	04 00                	add    al,0x0
9f006a53:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006a56:	00 00                	add    BYTE PTR [eax],al
9f006a58:	80 08 00             	or     BYTE PTR [eax],0x0
9f006a5b:	00 c0                	add    al,al
9f006a5d:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f006a5e:	ff                   	(bad)  
9f006a5f:	ff 37                	push   DWORD PTR [edi]
9f006a61:	00 00                	add    BYTE PTR [eax],al
9f006a63:	00 00                	add    BYTE PTR [eax],al
9f006a65:	41                   	inc    ecx
9f006a66:	0e                   	push   cs
9f006a67:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006a6d:	73 c5                	jae    9f006a34 <__x86.get_pc_thunk.cx+0x860>
9f006a6f:	0c 04                	or     al,0x4
9f006a71:	04 00                	add    al,0x0
9f006a73:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f006a76:	00 00                	add    BYTE PTR [eax],al
9f006a78:	a0 08 00 00 d7       	mov    al,ds:0xd7000008
9f006a7d:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f006a7e:	ff                   	(bad)  
9f006a7f:	ff 88 00 00 00 00    	dec    DWORD PTR [eax+0x0]
9f006a85:	41                   	inc    ecx
9f006a86:	0e                   	push   cs
9f006a87:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006a8d:	45                   	inc    ebp
9f006a8e:	86 03                	xchg   BYTE PTR [ebx],al
9f006a90:	83 04 02 7d          	add    DWORD PTR [edx+eax*1],0x7d
9f006a94:	c3                   	ret    
9f006a95:	41                   	inc    ecx
9f006a96:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f006a9a:	04 04                	add    al,0x4
9f006a9c:	24 00                	and    al,0x0
9f006a9e:	00 00                	add    BYTE PTR [eax],al
9f006aa0:	c8 08 00 00          	enter  0x8,0x0
9f006aa4:	37                   	aaa    
9f006aa5:	ae                   	scas   al,BYTE PTR es:[edi]
9f006aa6:	ff                   	(bad)  
9f006aa7:	ff 70 00             	push   DWORD PTR [eax+0x0]
9f006aaa:	00 00                	add    BYTE PTR [eax],al
9f006aac:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006aaf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006ab5:	45                   	inc    ebp
9f006ab6:	86 03                	xchg   BYTE PTR [ebx],al
9f006ab8:	83 04 02 65          	add    DWORD PTR [edx+eax*1],0x65
9f006abc:	c3                   	ret    
9f006abd:	41                   	inc    ecx
9f006abe:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f006ac2:	04 04                	add    al,0x4
9f006ac4:	24 00                	and    al,0x0
9f006ac6:	00 00                	add    BYTE PTR [eax],al
9f006ac8:	f0 08 00             	lock or BYTE PTR [eax],al
9f006acb:	00 7f ae             	add    BYTE PTR [edi-0x52],bh
9f006ace:	ff                   	(bad)  
9f006acf:	ff 70 00             	push   DWORD PTR [eax+0x0]
9f006ad2:	00 00                	add    BYTE PTR [eax],al
9f006ad4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006ad7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006add:	45                   	inc    ebp
9f006ade:	86 03                	xchg   BYTE PTR [ebx],al
9f006ae0:	83 04 02 65          	add    DWORD PTR [edx+eax*1],0x65
9f006ae4:	c3                   	ret    
9f006ae5:	41                   	inc    ecx
9f006ae6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f006aea:	04 04                	add    al,0x4
9f006aec:	1c 00                	sbb    al,0x0
9f006aee:	00 00                	add    BYTE PTR [eax],al
9f006af0:	18 09                	sbb    BYTE PTR [ecx],cl
9f006af2:	00 00                	add    BYTE PTR [eax],al
9f006af4:	c7                   	(bad)  
9f006af5:	ae                   	scas   al,BYTE PTR es:[edi]
9f006af6:	ff                   	(bad)  
9f006af7:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f006afd:	41                   	inc    ecx
9f006afe:	0e                   	push   cs
9f006aff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006b05:	59                   	pop    ecx
9f006b06:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006b09:	04 00                	add    al,0x0
9f006b0b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006b0e:	00 00                	add    BYTE PTR [eax],al
9f006b10:	38 09                	cmp    BYTE PTR [ecx],cl
9f006b12:	00 00                	add    BYTE PTR [eax],al
9f006b14:	c4 ae ff ff 29 00    	les    ebp,FWORD PTR [esi+0x29ffff]
9f006b1a:	00 00                	add    BYTE PTR [eax],al
9f006b1c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006b1f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006b25:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f006b29:	04 00                	add    al,0x0
9f006b2b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006b2e:	00 00                	add    BYTE PTR [eax],al
9f006b30:	58                   	pop    eax
9f006b31:	09 00                	or     DWORD PTR [eax],eax
9f006b33:	00 cd                	add    ch,cl
9f006b35:	ae                   	scas   al,BYTE PTR es:[edi]
9f006b36:	ff                   	(bad)  
9f006b37:	ff 25 00 00 00 00    	jmp    DWORD PTR ds:0x0
9f006b3d:	41                   	inc    ecx
9f006b3e:	0e                   	push   cs
9f006b3f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006b45:	61                   	popa   
9f006b46:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006b49:	04 00                	add    al,0x0
9f006b4b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006b4e:	00 00                	add    BYTE PTR [eax],al
9f006b50:	78 09                	js     9f006b5b <__x86.get_pc_thunk.cx+0x987>
9f006b52:	00 00                	add    BYTE PTR [eax],al
9f006b54:	d2 ae ff ff 23 00    	shr    BYTE PTR [esi+0x23ffff],cl
9f006b5a:	00 00                	add    BYTE PTR [eax],al
9f006b5c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006b5f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006b65:	5f                   	pop    edi
9f006b66:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006b69:	04 00                	add    al,0x0
9f006b6b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006b6e:	00 00                	add    BYTE PTR [eax],al
9f006b70:	98                   	cwde   
9f006b71:	09 00                	or     DWORD PTR [eax],eax
9f006b73:	00 d5                	add    ch,dl
9f006b75:	ae                   	scas   al,BYTE PTR es:[edi]
9f006b76:	ff                   	(bad)  
9f006b77:	ff 4c 00 00          	dec    DWORD PTR [eax+eax*1+0x0]
9f006b7b:	00 00                	add    BYTE PTR [eax],al
9f006b7d:	41                   	inc    ecx
9f006b7e:	0e                   	push   cs
9f006b7f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006b85:	02 48 c5             	add    cl,BYTE PTR [eax-0x3b]
9f006b88:	0c 04                	or     al,0x4
9f006b8a:	04 00                	add    al,0x0
9f006b8c:	20 00                	and    BYTE PTR [eax],al
9f006b8e:	00 00                	add    BYTE PTR [eax],al
9f006b90:	b8 09 00 00 01       	mov    eax,0x1000009
9f006b95:	af                   	scas   eax,DWORD PTR es:[edi]
9f006b96:	ff                   	(bad)  
9f006b97:	ff f4                	push   esp
9f006b99:	01 00                	add    DWORD PTR [eax],eax
9f006b9b:	00 00                	add    BYTE PTR [eax],al
9f006b9d:	41                   	inc    ecx
9f006b9e:	0e                   	push   cs
9f006b9f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006ba5:	44                   	inc    esp
9f006ba6:	83 03 03             	add    DWORD PTR [ebx],0x3
9f006ba9:	ec                   	in     al,dx
9f006baa:	01 c5                	add    ebp,eax
9f006bac:	c3                   	ret    
9f006bad:	0c 04                	or     al,0x4
9f006baf:	04 1c                	add    al,0x1c
9f006bb1:	00 00                	add    BYTE PTR [eax],al
9f006bb3:	00 dc                	add    ah,bl
9f006bb5:	09 00                	or     DWORD PTR [eax],eax
9f006bb7:	00 d1                	add    cl,dl
9f006bb9:	b0 ff                	mov    al,0xff
9f006bbb:	ff 4f 00             	dec    DWORD PTR [edi+0x0]
9f006bbe:	00 00                	add    BYTE PTR [eax],al
9f006bc0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006bc3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006bc9:	02 4b c5             	add    cl,BYTE PTR [ebx-0x3b]
9f006bcc:	0c 04                	or     al,0x4
9f006bce:	04 00                	add    al,0x0
9f006bd0:	1c 00                	sbb    al,0x0
9f006bd2:	00 00                	add    BYTE PTR [eax],al
9f006bd4:	fc                   	cld    
9f006bd5:	09 00                	or     DWORD PTR [eax],eax
9f006bd7:	00 00                	add    BYTE PTR [eax],al
9f006bd9:	b1 ff                	mov    cl,0xff
9f006bdb:	ff 1c 00             	call   FWORD PTR [eax+eax*1]
9f006bde:	00 00                	add    BYTE PTR [eax],al
9f006be0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006be3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006be9:	58                   	pop    eax
9f006bea:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006bed:	04 00                	add    al,0x0
9f006bef:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006bf2:	00 00                	add    BYTE PTR [eax],al
9f006bf4:	1c 0a                	sbb    al,0xa
9f006bf6:	00 00                	add    BYTE PTR [eax],al
9f006bf8:	fc                   	cld    
9f006bf9:	b0 ff                	mov    al,0xff
9f006bfb:	ff 20                	jmp    DWORD PTR [eax]
9f006bfd:	00 00                	add    BYTE PTR [eax],al
9f006bff:	00 00                	add    BYTE PTR [eax],al
9f006c01:	41                   	inc    ecx
9f006c02:	0e                   	push   cs
9f006c03:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006c09:	5c                   	pop    esp
9f006c0a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006c0d:	04 00                	add    al,0x0
9f006c0f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006c12:	00 00                	add    BYTE PTR [eax],al
9f006c14:	3c 0a                	cmp    al,0xa
9f006c16:	00 00                	add    BYTE PTR [eax],al
9f006c18:	fc                   	cld    
9f006c19:	b0 ff                	mov    al,0xff
9f006c1b:	ff 20                	jmp    DWORD PTR [eax]
9f006c1d:	00 00                	add    BYTE PTR [eax],al
9f006c1f:	00 00                	add    BYTE PTR [eax],al
9f006c21:	41                   	inc    ecx
9f006c22:	0e                   	push   cs
9f006c23:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006c29:	5c                   	pop    esp
9f006c2a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006c2d:	04 00                	add    al,0x0
9f006c2f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006c32:	00 00                	add    BYTE PTR [eax],al
9f006c34:	5c                   	pop    esp
9f006c35:	0a 00                	or     al,BYTE PTR [eax]
9f006c37:	00 fc                	add    ah,bh
9f006c39:	b0 ff                	mov    al,0xff
9f006c3b:	ff 44 01 00          	inc    DWORD PTR [ecx+eax*1+0x0]
9f006c3f:	00 00                	add    BYTE PTR [eax],al
9f006c41:	41                   	inc    ecx
9f006c42:	0e                   	push   cs
9f006c43:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006c49:	03 40 01             	add    eax,DWORD PTR [eax+0x1]
9f006c4c:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006c4f:	04 1c                	add    al,0x1c
9f006c51:	00 00                	add    BYTE PTR [eax],al
9f006c53:	00 7c 0a 00          	add    BYTE PTR [edx+ecx*1+0x0],bh
9f006c57:	00 20                	add    BYTE PTR [eax],ah
9f006c59:	b2 ff                	mov    dl,0xff
9f006c5b:	ff 20                	jmp    DWORD PTR [eax]
9f006c5d:	00 00                	add    BYTE PTR [eax],al
9f006c5f:	00 00                	add    BYTE PTR [eax],al
9f006c61:	41                   	inc    ecx
9f006c62:	0e                   	push   cs
9f006c63:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006c69:	5c                   	pop    esp
9f006c6a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006c6d:	04 00                	add    al,0x0
9f006c6f:	00 28                	add    BYTE PTR [eax],ch
9f006c71:	00 00                	add    BYTE PTR [eax],al
9f006c73:	00 9c 0a 00 00 20 b2 	add    BYTE PTR [edx+ecx*1-0x4de00000],bl
9f006c7a:	ff                   	(bad)  
9f006c7b:	ff                   	(bad)  
9f006c7c:	fd                   	std    
9f006c7d:	02 00                	add    al,BYTE PTR [eax]
9f006c7f:	00 00                	add    BYTE PTR [eax],al
9f006c81:	41                   	inc    ecx
9f006c82:	0e                   	push   cs
9f006c83:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006c89:	48                   	dec    eax
9f006c8a:	86 03                	xchg   BYTE PTR [ebx],al
9f006c8c:	83 04 03 ef          	add    DWORD PTR [ebx+eax*1],0xffffffef
9f006c90:	02 c3                	add    al,bl
9f006c92:	41                   	inc    ecx
9f006c93:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f006c97:	04 04                	add    al,0x4
9f006c99:	00 00                	add    BYTE PTR [eax],al
9f006c9b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006c9e:	00 00                	add    BYTE PTR [eax],al
9f006ca0:	c8 0a 00 00          	enter  0xa,0x0
9f006ca4:	f1                   	icebp  
9f006ca5:	b4 ff                	mov    ah,0xff
9f006ca7:	ff 23                	jmp    DWORD PTR [ebx]
9f006ca9:	00 00                	add    BYTE PTR [eax],al
9f006cab:	00 00                	add    BYTE PTR [eax],al
9f006cad:	41                   	inc    ecx
9f006cae:	0e                   	push   cs
9f006caf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006cb5:	5f                   	pop    edi
9f006cb6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006cb9:	04 00                	add    al,0x0
9f006cbb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006cbe:	00 00                	add    BYTE PTR [eax],al
9f006cc0:	e8 0a 00 00 f4       	call   93006ccf <sysEnter_Vector+0x92ed6ccf>
9f006cc5:	b4 ff                	mov    ah,0xff
9f006cc7:	ff 23                	jmp    DWORD PTR [ebx]
9f006cc9:	00 00                	add    BYTE PTR [eax],al
9f006ccb:	00 00                	add    BYTE PTR [eax],al
9f006ccd:	41                   	inc    ecx
9f006cce:	0e                   	push   cs
9f006ccf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006cd5:	5f                   	pop    edi
9f006cd6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006cd9:	04 00                	add    al,0x0
9f006cdb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006cde:	00 00                	add    BYTE PTR [eax],al
9f006ce0:	08 0b                	or     BYTE PTR [ebx],cl
9f006ce2:	00 00                	add    BYTE PTR [eax],al
9f006ce4:	f7 b4 ff ff 1d 00 00 	div    DWORD PTR [edi+edi*8+0x1dff]
9f006ceb:	00 00                	add    BYTE PTR [eax],al
9f006ced:	41                   	inc    ecx
9f006cee:	0e                   	push   cs
9f006cef:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006cf5:	59                   	pop    ecx
9f006cf6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006cf9:	04 00                	add    al,0x0
9f006cfb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006cfe:	00 00                	add    BYTE PTR [eax],al
9f006d00:	28 0b                	sub    BYTE PTR [ebx],cl
9f006d02:	00 00                	add    BYTE PTR [eax],al
9f006d04:	f4                   	hlt    
9f006d05:	b4 ff                	mov    ah,0xff
9f006d07:	ff 20                	jmp    DWORD PTR [eax]
9f006d09:	00 00                	add    BYTE PTR [eax],al
9f006d0b:	00 00                	add    BYTE PTR [eax],al
9f006d0d:	41                   	inc    ecx
9f006d0e:	0e                   	push   cs
9f006d0f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006d15:	5c                   	pop    esp
9f006d16:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006d19:	04 00                	add    al,0x0
9f006d1b:	00 20                	add    BYTE PTR [eax],ah
9f006d1d:	00 00                	add    BYTE PTR [eax],al
9f006d1f:	00 48 0b             	add    BYTE PTR [eax+0xb],cl
9f006d22:	00 00                	add    BYTE PTR [eax],al
9f006d24:	f4                   	hlt    
9f006d25:	b4 ff                	mov    ah,0xff
9f006d27:	ff 73 00             	push   DWORD PTR [ebx+0x0]
9f006d2a:	00 00                	add    BYTE PTR [eax],al
9f006d2c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006d2f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006d35:	44                   	inc    esp
9f006d36:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006d39:	6b c5 c3             	imul   eax,ebp,0xffffffc3
9f006d3c:	0c 04                	or     al,0x4
9f006d3e:	04 00                	add    al,0x0
9f006d40:	20 00                	and    BYTE PTR [eax],al
9f006d42:	00 00                	add    BYTE PTR [eax],al
9f006d44:	6c                   	ins    BYTE PTR es:[edi],dx
9f006d45:	0b 00                	or     eax,DWORD PTR [eax]
9f006d47:	00 44 b5 ff          	add    BYTE PTR [ebp+esi*4-0x1],al
9f006d4b:	ff 60 00             	jmp    DWORD PTR [eax+0x0]
9f006d4e:	00 00                	add    BYTE PTR [eax],al
9f006d50:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006d53:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006d59:	44                   	inc    esp
9f006d5a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006d5d:	58                   	pop    eax
9f006d5e:	c5 c3 0c             	(bad)  
9f006d61:	04 04                	add    al,0x4
9f006d63:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006d66:	00 00                	add    BYTE PTR [eax],al
9f006d68:	90                   	nop
9f006d69:	0b 00                	or     eax,DWORD PTR [eax]
9f006d6b:	00 80 b5 ff ff 87    	add    BYTE PTR [eax-0x7800004b],al
9f006d71:	00 00                	add    BYTE PTR [eax],al
9f006d73:	00 00                	add    BYTE PTR [eax],al
9f006d75:	41                   	inc    ecx
9f006d76:	0e                   	push   cs
9f006d77:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006d7d:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
9f006d83:	00 20                	add    BYTE PTR [eax],ah
9f006d85:	00 00                	add    BYTE PTR [eax],al
9f006d87:	00 b0 0b 00 00 e7    	add    BYTE PTR [eax-0x18fffff5],dh
9f006d8d:	b5 ff                	mov    ch,0xff
9f006d8f:	ff 73 00             	push   DWORD PTR [ebx+0x0]
9f006d92:	00 00                	add    BYTE PTR [eax],al
9f006d94:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006d97:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006d9d:	44                   	inc    esp
9f006d9e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006da1:	6b c5 c3             	imul   eax,ebp,0xffffffc3
9f006da4:	0c 04                	or     al,0x4
9f006da6:	04 00                	add    al,0x0
9f006da8:	1c 00                	sbb    al,0x0
9f006daa:	00 00                	add    BYTE PTR [eax],al
9f006dac:	d4 0b                	aam    0xb
9f006dae:	00 00                	add    BYTE PTR [eax],al
9f006db0:	36                   	ss
9f006db1:	b6 ff                	mov    dh,0xff
9f006db3:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
9f006dba:	0e                   	push   cs
9f006dbb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006dc1:	02 80 c5 0c 04 04    	add    al,BYTE PTR [eax+0x4040cc5]
9f006dc7:	00 20                	add    BYTE PTR [eax],ah
9f006dc9:	00 00                	add    BYTE PTR [eax],al
9f006dcb:	00 f4                	add    ah,dh
9f006dcd:	0b 00                	or     eax,DWORD PTR [eax]
9f006dcf:	00 9a b6 ff ff 8b    	add    BYTE PTR [edx-0x7400004a],bl
9f006dd5:	00 00                	add    BYTE PTR [eax],al
9f006dd7:	00 00                	add    BYTE PTR [eax],al
9f006dd9:	41                   	inc    ecx
9f006dda:	0e                   	push   cs
9f006ddb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006de1:	44                   	inc    esp
9f006de2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006de5:	83 c5 c3             	add    ebp,0xffffffc3
9f006de8:	0c 04                	or     al,0x4
9f006dea:	04 00                	add    al,0x0
9f006dec:	20 00                	and    BYTE PTR [eax],al
9f006dee:	00 00                	add    BYTE PTR [eax],al
9f006df0:	18 0c 00             	sbb    BYTE PTR [eax+eax*1],cl
9f006df3:	00 01                	add    BYTE PTR [ecx],al
9f006df5:	b7 ff                	mov    bh,0xff
9f006df7:	ff c0                	inc    eax
9f006df9:	02 00                	add    al,BYTE PTR [eax]
9f006dfb:	00 00                	add    BYTE PTR [eax],al
9f006dfd:	41                   	inc    ecx
9f006dfe:	0e                   	push   cs
9f006dff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006e05:	44                   	inc    esp
9f006e06:	83 03 03             	add    DWORD PTR [ebx],0x3
9f006e09:	b8 02 c5 c3 0c       	mov    eax,0xcc3c502
9f006e0e:	04 04                	add    al,0x4
9f006e10:	1c 00                	sbb    al,0x0
9f006e12:	00 00                	add    BYTE PTR [eax],al
9f006e14:	3c 0c                	cmp    al,0xc
9f006e16:	00 00                	add    BYTE PTR [eax],al
9f006e18:	9d                   	popf   
9f006e19:	b9 ff ff 20 00       	mov    ecx,0x20ffff
9f006e1e:	00 00                	add    BYTE PTR [eax],al
9f006e20:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006e23:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006e29:	5c                   	pop    esp
9f006e2a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006e2d:	04 00                	add    al,0x0
9f006e2f:	00 20                	add    BYTE PTR [eax],ah
9f006e31:	00 00                	add    BYTE PTR [eax],al
9f006e33:	00 5c 0c 00          	add    BYTE PTR [esp+ecx*1+0x0],bl
9f006e37:	00 9d b9 ff ff 03    	add    BYTE PTR [ebp+0x3ffffb9],bl
9f006e3d:	01 00                	add    DWORD PTR [eax],eax
9f006e3f:	00 00                	add    BYTE PTR [eax],al
9f006e41:	41                   	inc    ecx
9f006e42:	0e                   	push   cs
9f006e43:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006e49:	44                   	inc    esp
9f006e4a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006e4d:	fb                   	sti    
9f006e4e:	c5 c3 0c             	(bad)  
9f006e51:	04 04                	add    al,0x4
9f006e53:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006e56:	00 00                	add    BYTE PTR [eax],al
9f006e58:	80 0c 00 00          	or     BYTE PTR [eax+eax*1],0x0
9f006e5c:	7c ba                	jl     9f006e18 <__x86.get_pc_thunk.cx+0xc44>
9f006e5e:	ff                   	(bad)  
9f006e5f:	ff 23                	jmp    DWORD PTR [ebx]
9f006e61:	00 00                	add    BYTE PTR [eax],al
9f006e63:	00 00                	add    BYTE PTR [eax],al
9f006e65:	41                   	inc    ecx
9f006e66:	0e                   	push   cs
9f006e67:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006e6d:	5f                   	pop    edi
9f006e6e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006e71:	04 00                	add    al,0x0
9f006e73:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006e76:	00 00                	add    BYTE PTR [eax],al
9f006e78:	a0 0c 00 00 7f       	mov    al,ds:0x7f00000c
9f006e7d:	ba ff ff 21 00       	mov    edx,0x21ffff
9f006e82:	00 00                	add    BYTE PTR [eax],al
9f006e84:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006e87:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006e8d:	5d                   	pop    ebp
9f006e8e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006e91:	04 00                	add    al,0x0
9f006e93:	00 20                	add    BYTE PTR [eax],ah
9f006e95:	00 00                	add    BYTE PTR [eax],al
9f006e97:	00 c0                	add    al,al
9f006e99:	0c 00                	or     al,0x0
9f006e9b:	00 80 ba ff ff 32    	add    BYTE PTR [eax+0x32ffffba],al
9f006ea1:	00 00                	add    BYTE PTR [eax],al
9f006ea3:	00 00                	add    BYTE PTR [eax],al
9f006ea5:	41                   	inc    ecx
9f006ea6:	0e                   	push   cs
9f006ea7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006ead:	44                   	inc    esp
9f006eae:	83 03 6a             	add    DWORD PTR [ebx],0x6a
9f006eb1:	c5 c3 0c             	(bad)  
9f006eb4:	04 04                	add    al,0x4
9f006eb6:	00 00                	add    BYTE PTR [eax],al
9f006eb8:	1c 00                	sbb    al,0x0
9f006eba:	00 00                	add    BYTE PTR [eax],al
9f006ebc:	e4 0c                	in     al,0xc
9f006ebe:	00 00                	add    BYTE PTR [eax],al
9f006ec0:	90                   	nop
9f006ec1:	ba ff ff 9b 01       	mov    edx,0x19bffff
9f006ec6:	00 00                	add    BYTE PTR [eax],al
9f006ec8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006ecb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006ed1:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
9f006ed7:	04 1c                	add    al,0x1c
9f006ed9:	00 00                	add    BYTE PTR [eax],al
9f006edb:	00 04 0d 00 00 0b bc 	add    BYTE PTR [ecx*1-0x43f50000],al
9f006ee2:	ff                   	(bad)  
9f006ee3:	ff 20                	jmp    DWORD PTR [eax]
9f006ee5:	00 00                	add    BYTE PTR [eax],al
9f006ee7:	00 00                	add    BYTE PTR [eax],al
9f006ee9:	41                   	inc    ecx
9f006eea:	0e                   	push   cs
9f006eeb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006ef1:	5c                   	pop    esp
9f006ef2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006ef5:	04 00                	add    al,0x0
9f006ef7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006efa:	00 00                	add    BYTE PTR [eax],al
9f006efc:	24 0d                	and    al,0xd
9f006efe:	00 00                	add    BYTE PTR [eax],al
9f006f00:	0c bc                	or     al,0xbc
9f006f02:	ff                   	(bad)  
9f006f03:	ff c7                	inc    edi
9f006f05:	00 00                	add    BYTE PTR [eax],al
9f006f07:	00 00                	add    BYTE PTR [eax],al
9f006f09:	41                   	inc    ecx
9f006f0a:	0e                   	push   cs
9f006f0b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006f11:	02 c3                	add    al,bl
9f006f13:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006f16:	04 00                	add    al,0x0
9f006f18:	1c 00                	sbb    al,0x0
9f006f1a:	00 00                	add    BYTE PTR [eax],al
9f006f1c:	44                   	inc    esp
9f006f1d:	0d 00 00 b3 bc       	or     eax,0xbcb30000
9f006f22:	ff                   	(bad)  
9f006f23:	ff 20                	jmp    DWORD PTR [eax]
9f006f25:	00 00                	add    BYTE PTR [eax],al
9f006f27:	00 00                	add    BYTE PTR [eax],al
9f006f29:	41                   	inc    ecx
9f006f2a:	0e                   	push   cs
9f006f2b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006f31:	5c                   	pop    esp
9f006f32:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006f35:	04 00                	add    al,0x0
9f006f37:	00 20                	add    BYTE PTR [eax],ah
9f006f39:	00 00                	add    BYTE PTR [eax],al
9f006f3b:	00 64 0d 00          	add    BYTE PTR [ebp+ecx*1+0x0],ah
9f006f3f:	00 b4 bc ff ff 29 00 	add    BYTE PTR [esp+edi*4+0x29ffff],dh
9f006f46:	00 00                	add    BYTE PTR [eax],al
9f006f48:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006f4b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006f51:	44                   	inc    esp
9f006f52:	83 03 61             	add    DWORD PTR [ebx],0x61
9f006f55:	c5 c3 0c             	(bad)  
9f006f58:	04 04                	add    al,0x4
9f006f5a:	00 00                	add    BYTE PTR [eax],al
9f006f5c:	20 00                	and    BYTE PTR [eax],al
9f006f5e:	00 00                	add    BYTE PTR [eax],al
9f006f60:	88 0d 00 00 b9 bc    	mov    BYTE PTR ds:0xbcb90000,cl
9f006f66:	ff                   	(bad)  
9f006f67:	ff 2e                	jmp    FWORD PTR [esi]
9f006f69:	00 00                	add    BYTE PTR [eax],al
9f006f6b:	00 00                	add    BYTE PTR [eax],al
9f006f6d:	41                   	inc    ecx
9f006f6e:	0e                   	push   cs
9f006f6f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006f75:	44                   	inc    esp
9f006f76:	83 03 66             	add    DWORD PTR [ebx],0x66
9f006f79:	c5 c3 0c             	(bad)  
9f006f7c:	04 04                	add    al,0x4
9f006f7e:	00 00                	add    BYTE PTR [eax],al
9f006f80:	28 00                	sub    BYTE PTR [eax],al
9f006f82:	00 00                	add    BYTE PTR [eax],al
9f006f84:	ac                   	lods   al,BYTE PTR ds:[esi]
9f006f85:	0d 00 00 c4 bc       	or     eax,0xbcc40000
9f006f8a:	ff                   	(bad)  
9f006f8b:	ff                   	(bad)  
9f006f8c:	79 03                	jns    9f006f91 <__x86.get_pc_thunk.cx+0xdbd>
9f006f8e:	00 00                	add    BYTE PTR [eax],al
9f006f90:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006f93:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006f99:	48                   	dec    eax
9f006f9a:	86 03                	xchg   BYTE PTR [ebx],al
9f006f9c:	83 04 03 6b          	add    DWORD PTR [ebx+eax*1],0x6b
9f006fa0:	03 c3                	add    eax,ebx
9f006fa2:	41                   	inc    ecx
9f006fa3:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f006fa7:	04 04                	add    al,0x4
9f006fa9:	00 00                	add    BYTE PTR [eax],al
9f006fab:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006fae:	00 00                	add    BYTE PTR [eax],al
9f006fb0:	d8 0d 00 00 11 c0    	fmul   DWORD PTR ds:0xc0110000
9f006fb6:	ff                   	(bad)  
9f006fb7:	ff 25 00 00 00 00    	jmp    DWORD PTR ds:0x0
9f006fbd:	41                   	inc    ecx
9f006fbe:	0e                   	push   cs
9f006fbf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006fc5:	61                   	popa   
9f006fc6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006fc9:	04 00                	add    al,0x0
9f006fcb:	00 28                	add    BYTE PTR [eax],ch
9f006fcd:	00 00                	add    BYTE PTR [eax],al
9f006fcf:	00 f8                	add    al,bh
9f006fd1:	0d 00 00 16 c0       	or     eax,0xc0160000
9f006fd6:	ff                   	(bad)  
9f006fd7:	ff                   	(bad)  
9f006fd8:	78 02                	js     9f006fdc <__x86.get_pc_thunk.cx+0xe08>
9f006fda:	00 00                	add    BYTE PTR [eax],al
9f006fdc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006fdf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006fe5:	48                   	dec    eax
9f006fe6:	86 03                	xchg   BYTE PTR [ebx],al
9f006fe8:	83 04 03 6a          	add    DWORD PTR [ebx+eax*1],0x6a
9f006fec:	02 c3                	add    al,bl
9f006fee:	41                   	inc    ecx
9f006fef:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f006ff3:	04 04                	add    al,0x4
9f006ff5:	00 00                	add    BYTE PTR [eax],al
9f006ff7:	00 20                	add    BYTE PTR [eax],ah
9f006ff9:	00 00                	add    BYTE PTR [eax],al
9f006ffb:	00 24 0e             	add    BYTE PTR [esi+ecx*1],ah
9f006ffe:	00 00                	add    BYTE PTR [eax],al
9f007000:	64                   	fs
9f007001:	c2 ff ff             	ret    0xffff
9f007004:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f007007:	00 00                	add    BYTE PTR [eax],al
9f007009:	41                   	inc    ecx
9f00700a:	0e                   	push   cs
9f00700b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007011:	44                   	inc    esp
9f007012:	83 03 76             	add    DWORD PTR [ebx],0x76
9f007015:	c5 c3 0c             	(bad)  
9f007018:	04 04                	add    al,0x4
9f00701a:	00 00                	add    BYTE PTR [eax],al
9f00701c:	20 00                	and    BYTE PTR [eax],al
9f00701e:	00 00                	add    BYTE PTR [eax],al
9f007020:	48                   	dec    eax
9f007021:	0e                   	push   cs
9f007022:	00 00                	add    BYTE PTR [eax],al
9f007024:	7e c2                	jle    9f006fe8 <__x86.get_pc_thunk.cx+0xe14>
9f007026:	ff                   	(bad)  
9f007027:	ff                   	(bad)  
9f007028:	bd 02 00 00 00       	mov    ebp,0x2
9f00702d:	41                   	inc    ecx
9f00702e:	0e                   	push   cs
9f00702f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007035:	44                   	inc    esp
9f007036:	83 03 03             	add    DWORD PTR [ebx],0x3
9f007039:	b5 02                	mov    ch,0x2
9f00703b:	c5 c3 0c             	(bad)  
9f00703e:	04 04                	add    al,0x4
9f007040:	20 00                	and    BYTE PTR [eax],al
9f007042:	00 00                	add    BYTE PTR [eax],al
9f007044:	6c                   	ins    BYTE PTR es:[edi],dx
9f007045:	0e                   	push   cs
9f007046:	00 00                	add    BYTE PTR [eax],al
9f007048:	17                   	pop    ss
9f007049:	c5 ff ff             	(bad)  
9f00704c:	64 00 00             	add    BYTE PTR fs:[eax],al
9f00704f:	00 00                	add    BYTE PTR [eax],al
9f007051:	41                   	inc    ecx
9f007052:	0e                   	push   cs
9f007053:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007059:	44                   	inc    esp
9f00705a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00705d:	5b                   	pop    ebx
9f00705e:	c3                   	ret    
9f00705f:	41                   	inc    ecx
9f007060:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007063:	04 28                	add    al,0x28
9f007065:	00 00                	add    BYTE PTR [eax],al
9f007067:	00 90 0e 00 00 57    	add    BYTE PTR [eax+0x5700000e],dl
9f00706d:	c5 ff ff             	(bad)  
9f007070:	49                   	dec    ecx
9f007071:	02 00                	add    al,BYTE PTR [eax]
9f007073:	00 00                	add    BYTE PTR [eax],al
9f007075:	41                   	inc    ecx
9f007076:	0e                   	push   cs
9f007077:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00707d:	45                   	inc    ebp
9f00707e:	86 03                	xchg   BYTE PTR [ebx],al
9f007080:	83 04 03 3e          	add    DWORD PTR [ebx+eax*1],0x3e
9f007084:	02 c3                	add    al,bl
9f007086:	41                   	inc    ecx
9f007087:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00708b:	04 04                	add    al,0x4
9f00708d:	00 00                	add    BYTE PTR [eax],al
9f00708f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f007092:	00 00                	add    BYTE PTR [eax],al
9f007094:	bc 0e 00 00 74       	mov    esp,0x7400000e
9f007099:	c7                   	(bad)  
9f00709a:	ff                   	(bad)  
9f00709b:	ff 1a                	call   FWORD PTR [edx]
9f00709d:	01 00                	add    DWORD PTR [eax],eax
9f00709f:	00 00                	add    BYTE PTR [eax],al
9f0070a1:	41                   	inc    ecx
9f0070a2:	0e                   	push   cs
9f0070a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0070a9:	03 16                	add    edx,DWORD PTR [esi]
9f0070ab:	01 c5                	add    ebp,eax
9f0070ad:	0c 04                	or     al,0x4
9f0070af:	04 2c                	add    al,0x2c
9f0070b1:	00 00                	add    BYTE PTR [eax],al
9f0070b3:	00 dc                	add    ah,bl
9f0070b5:	0e                   	push   cs
9f0070b6:	00 00                	add    BYTE PTR [eax],al
9f0070b8:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0070b9:	c8 ff ff 1e          	enter  0xffff,0x1e
9f0070bd:	02 00                	add    al,BYTE PTR [eax]
9f0070bf:	00 00                	add    BYTE PTR [eax],al
9f0070c1:	41                   	inc    ecx
9f0070c2:	0e                   	push   cs
9f0070c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0070c9:	46                   	inc    esi
9f0070ca:	87 03                	xchg   DWORD PTR [ebx],eax
9f0070cc:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f0070cf:	05 03 11 02 c3       	add    eax,0xc3021103
9f0070d4:	41                   	inc    ecx
9f0070d5:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f0070d9:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0070dc:	04 00                	add    al,0x0
9f0070de:	00 00                	add    BYTE PTR [eax],al
9f0070e0:	20 00                	and    BYTE PTR [eax],al
9f0070e2:	00 00                	add    BYTE PTR [eax],al
9f0070e4:	0c 0f                	or     al,0xf
9f0070e6:	00 00                	add    BYTE PTR [eax],al
9f0070e8:	5c                   	pop    esp
9f0070e9:	ca ff ff             	retf   0xffff
9f0070ec:	05 04 00 00 00       	add    eax,0x4
9f0070f1:	41                   	inc    ecx
9f0070f2:	0e                   	push   cs
9f0070f3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0070f9:	47                   	inc    edi
9f0070fa:	83 03 03             	add    DWORD PTR [ebx],0x3
9f0070fd:	fa                   	cli    
9f0070fe:	03 c5                	add    eax,ebp
9f007100:	c3                   	ret    
9f007101:	0c 04                	or     al,0x4
9f007103:	04 20                	add    al,0x20
9f007105:	00 00                	add    BYTE PTR [eax],al
9f007107:	00 30                	add    BYTE PTR [eax],dh
9f007109:	0f 00 00             	sldt   WORD PTR [eax]
9f00710c:	3d ce ff ff a9       	cmp    eax,0xa9ffffce
9f007111:	00 00                	add    BYTE PTR [eax],al
9f007113:	00 00                	add    BYTE PTR [eax],al
9f007115:	41                   	inc    ecx
9f007116:	0e                   	push   cs
9f007117:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00711d:	44                   	inc    esp
9f00711e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f007121:	a1 c5 c3 0c 04       	mov    eax,ds:0x40cc3c5
9f007126:	04 00                	add    al,0x0
9f007128:	1c 00                	sbb    al,0x0
9f00712a:	00 00                	add    BYTE PTR [eax],al
9f00712c:	54                   	push   esp
9f00712d:	0f 00 00             	sldt   WORD PTR [eax]
9f007130:	c2 ce ff             	ret    0xffce
9f007133:	ff aa 00 00 00 00    	jmp    FWORD PTR [edx+0x0]
9f007139:	41                   	inc    ecx
9f00713a:	0e                   	push   cs
9f00713b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007141:	02 a6 c5 0c 04 04    	add    ah,BYTE PTR [esi+0x4040cc5]
9f007147:	00 20                	add    BYTE PTR [eax],ah
9f007149:	00 00                	add    BYTE PTR [eax],al
9f00714b:	00 74 0f 00          	add    BYTE PTR [edi+ecx*1+0x0],dh
9f00714f:	00 4c cf ff          	add    BYTE PTR [edi+ecx*8-0x1],cl
9f007153:	ff 16                	call   DWORD PTR [esi]
9f007155:	02 00                	add    al,BYTE PTR [eax]
9f007157:	00 00                	add    BYTE PTR [eax],al
9f007159:	41                   	inc    ecx
9f00715a:	0e                   	push   cs
9f00715b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007161:	47                   	inc    edi
9f007162:	83 03 03             	add    DWORD PTR [ebx],0x3
9f007165:	0b 02                	or     eax,DWORD PTR [edx]
9f007167:	c5 c3 0c             	(bad)  
9f00716a:	04 04                	add    al,0x4
9f00716c:	28 00                	sub    BYTE PTR [eax],al
9f00716e:	00 00                	add    BYTE PTR [eax],al
9f007170:	98                   	cwde   
9f007171:	0f 00 00             	sldt   WORD PTR [eax]
9f007174:	3e                   	ds
9f007175:	d1 ff                	sar    edi,1
9f007177:	ff d6                	call   esi
9f007179:	04 00                	add    al,0x0
9f00717b:	00 00                	add    BYTE PTR [eax],al
9f00717d:	41                   	inc    ecx
9f00717e:	0e                   	push   cs
9f00717f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007185:	45                   	inc    ebp
9f007186:	86 03                	xchg   BYTE PTR [ebx],al
9f007188:	83 04 03 cb          	add    DWORD PTR [ebx+eax*1],0xffffffcb
9f00718c:	04 c3                	add    al,0xc3
9f00718e:	41                   	inc    ecx
9f00718f:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f007193:	04 04                	add    al,0x4
9f007195:	00 00                	add    BYTE PTR [eax],al
9f007197:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00719a:	00 00                	add    BYTE PTR [eax],al
9f00719c:	c4 0f                	les    ecx,FWORD PTR [edi]
9f00719e:	00 00                	add    BYTE PTR [eax],al
9f0071a0:	e8 d5 ff ff 33       	call   d300717a <tmbuf+0x33ffde5a>
9f0071a5:	00 00                	add    BYTE PTR [eax],al
9f0071a7:	00 00                	add    BYTE PTR [eax],al
9f0071a9:	41                   	inc    ecx
9f0071aa:	0e                   	push   cs
9f0071ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0071b1:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0071b2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0071b5:	04 00                	add    al,0x0
9f0071b7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0071ba:	00 00                	add    BYTE PTR [eax],al
9f0071bc:	e4 0f                	in     al,0xf
9f0071be:	00 00                	add    BYTE PTR [eax],al
9f0071c0:	fb                   	sti    
9f0071c1:	d5 ff                	aad    0xff
9f0071c3:	ff                   	(bad)  
9f0071c4:	3d 00 00 00 00       	cmp    eax,0x0
9f0071c9:	41                   	inc    ecx
9f0071ca:	0e                   	push   cs
9f0071cb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0071d1:	79 c5                	jns    9f007198 <__x86.get_pc_thunk.cx+0xfc4>
9f0071d3:	0c 04                	or     al,0x4
9f0071d5:	04 00                	add    al,0x0
9f0071d7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0071da:	00 00                	add    BYTE PTR [eax],al
9f0071dc:	04 10                	add    al,0x10
9f0071de:	00 00                	add    BYTE PTR [eax],al
9f0071e0:	18 d6                	sbb    dh,dl
9f0071e2:	ff                   	(bad)  
9f0071e3:	ff                   	(bad)  
9f0071e4:	3d 00 00 00 00       	cmp    eax,0x0
9f0071e9:	41                   	inc    ecx
9f0071ea:	0e                   	push   cs
9f0071eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0071f1:	79 c5                	jns    9f0071b8 <__x86.get_pc_thunk.cx+0xfe4>
9f0071f3:	0c 04                	or     al,0x4
9f0071f5:	04 00                	add    al,0x0
9f0071f7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0071fa:	00 00                	add    BYTE PTR [eax],al
9f0071fc:	24 10                	and    al,0x10
9f0071fe:	00 00                	add    BYTE PTR [eax],al
9f007200:	35 d6 ff ff 33       	xor    eax,0x33ffffd6
9f007205:	00 00                	add    BYTE PTR [eax],al
9f007207:	00 00                	add    BYTE PTR [eax],al
9f007209:	41                   	inc    ecx
9f00720a:	0e                   	push   cs
9f00720b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007211:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007212:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007215:	04 00                	add    al,0x0
9f007217:	00 10                	add    BYTE PTR [eax],dl
9f007219:	00 00                	add    BYTE PTR [eax],al
9f00721b:	00 44 10 00          	add    BYTE PTR [eax+edx*1+0x0],al
9f00721f:	00 b4 ef ff ff 04 00 	add    BYTE PTR [edi+ebp*8+0x4ffff],dh
9f007226:	00 00                	add    BYTE PTR [eax],al
9f007228:	00 00                	add    BYTE PTR [eax],al
9f00722a:	00 00                	add    BYTE PTR [eax],al
9f00722c:	20 00                	and    BYTE PTR [eax],al
9f00722e:	00 00                	add    BYTE PTR [eax],al
9f007230:	58                   	pop    eax
9f007231:	10 00                	adc    BYTE PTR [eax],al
9f007233:	00 34 d6             	add    BYTE PTR [esi+edx*8],dh
9f007236:	ff                   	(bad)  
9f007237:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
9f00723e:	0e                   	push   cs
9f00723f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007245:	44                   	inc    esp
9f007246:	83 03 02             	add    DWORD PTR [ebx],0x2
9f007249:	7c c5                	jl     9f007210 <__x86.get_pc_thunk.cx+0x103c>
9f00724b:	c3                   	ret    
9f00724c:	0c 04                	or     al,0x4
9f00724e:	04 00                	add    al,0x0
9f007250:	20 00                	and    BYTE PTR [eax],al
9f007252:	00 00                	add    BYTE PTR [eax],al
9f007254:	7c 10                	jl     9f007266 <__x86.get_pc_thunk.cx+0x1092>
9f007256:	00 00                	add    BYTE PTR [eax],al
9f007258:	94                   	xchg   esp,eax
9f007259:	d6                   	(bad)  
9f00725a:	ff                   	(bad)  
9f00725b:	ff                   	(bad)  
9f00725c:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f00725f:	00 00                	add    BYTE PTR [eax],al
9f007261:	41                   	inc    ecx
9f007262:	0e                   	push   cs
9f007263:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007269:	44                   	inc    esp
9f00726a:	83 03 76             	add    DWORD PTR [ebx],0x76
9f00726d:	c5 c3 0c             	(bad)  
9f007270:	04 04                	add    al,0x4
9f007272:	00 00                	add    BYTE PTR [eax],al
9f007274:	20 00                	and    BYTE PTR [eax],al
9f007276:	00 00                	add    BYTE PTR [eax],al
9f007278:	a0 10 00 00 ae       	mov    al,ds:0xae000010
9f00727d:	d6                   	(bad)  
9f00727e:	ff                   	(bad)  
9f00727f:	ff                   	(bad)  
9f007280:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f007283:	00 00                	add    BYTE PTR [eax],al
9f007285:	41                   	inc    ecx
9f007286:	0e                   	push   cs
9f007287:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00728d:	44                   	inc    esp
9f00728e:	83 03 76             	add    DWORD PTR [ebx],0x76
9f007291:	c5 c3 0c             	(bad)  
9f007294:	04 04                	add    al,0x4
9f007296:	00 00                	add    BYTE PTR [eax],al
9f007298:	20 00                	and    BYTE PTR [eax],al
9f00729a:	00 00                	add    BYTE PTR [eax],al
9f00729c:	c4 10                	les    edx,FWORD PTR [eax]
9f00729e:	00 00                	add    BYTE PTR [eax],al
9f0072a0:	c8 d6 ff ff          	enter  0xffd6,0xff
9f0072a4:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0072a5:	00 00                	add    BYTE PTR [eax],al
9f0072a7:	00 00                	add    BYTE PTR [eax],al
9f0072a9:	41                   	inc    ecx
9f0072aa:	0e                   	push   cs
9f0072ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0072b1:	44                   	inc    esp
9f0072b2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0072b5:	67 c5 c3 0c          	addr16 (bad) 
9f0072b9:	04 04                	add    al,0x4
9f0072bb:	00 20                	add    BYTE PTR [eax],ah
9f0072bd:	00 00                	add    BYTE PTR [eax],al
9f0072bf:	00 e8                	add    al,ch
9f0072c1:	10 00                	adc    BYTE PTR [eax],al
9f0072c3:	00 13                	add    BYTE PTR [ebx],dl
9f0072c5:	d7                   	xlat   BYTE PTR ds:[ebx]
9f0072c6:	ff                   	(bad)  
9f0072c7:	ff 47 00             	inc    DWORD PTR [edi+0x0]
9f0072ca:	00 00                	add    BYTE PTR [eax],al
9f0072cc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0072cf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0072d5:	44                   	inc    esp
9f0072d6:	83 03 7f             	add    DWORD PTR [ebx],0x7f
9f0072d9:	c5 c3 0c             	(bad)  
9f0072dc:	04 04                	add    al,0x4
9f0072de:	00 00                	add    BYTE PTR [eax],al
9f0072e0:	1c 00                	sbb    al,0x0
9f0072e2:	00 00                	add    BYTE PTR [eax],al
9f0072e4:	0c 11                	or     al,0x11
9f0072e6:	00 00                	add    BYTE PTR [eax],al
9f0072e8:	36 d7                	xlat   BYTE PTR ss:[ebx]
9f0072ea:	ff                   	(bad)  
9f0072eb:	ff 26                	jmp    DWORD PTR [esi]
9f0072ed:	00 00                	add    BYTE PTR [eax],al
9f0072ef:	00 00                	add    BYTE PTR [eax],al
9f0072f1:	41                   	inc    ecx
9f0072f2:	0e                   	push   cs
9f0072f3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0072f9:	62                   	(bad)  
9f0072fa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0072fd:	04 00                	add    al,0x0
9f0072ff:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f007302:	00 00                	add    BYTE PTR [eax],al
9f007304:	2c 11                	sub    al,0x11
9f007306:	00 00                	add    BYTE PTR [eax],al
9f007308:	3c d7                	cmp    al,0xd7
9f00730a:	ff                   	(bad)  
9f00730b:	ff 5e 00             	call   FWORD PTR [esi+0x0]
9f00730e:	00 00                	add    BYTE PTR [eax],al
9f007310:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f007313:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007319:	45                   	inc    ebp
9f00731a:	86 03                	xchg   BYTE PTR [ebx],al
9f00731c:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
9f007320:	c3                   	ret    
9f007321:	41                   	inc    ecx
9f007322:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f007326:	04 04                	add    al,0x4
9f007328:	1c 00                	sbb    al,0x0
9f00732a:	00 00                	add    BYTE PTR [eax],al
9f00732c:	54                   	push   esp
9f00732d:	11 00                	adc    DWORD PTR [eax],eax
9f00732f:	00 72 d7             	add    BYTE PTR [edx-0x29],dh
9f007332:	ff                   	(bad)  
9f007333:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f007339:	41                   	inc    ecx
9f00733a:	0e                   	push   cs
9f00733b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007341:	59                   	pop    ecx
9f007342:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007345:	04 00                	add    al,0x0
9f007347:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00734a:	00 00                	add    BYTE PTR [eax],al
9f00734c:	74 11                	je     9f00735f <__x86.get_pc_thunk.cx+0x118b>
9f00734e:	00 00                	add    BYTE PTR [eax],al
9f007350:	70 d7                	jo     9f007329 <__x86.get_pc_thunk.cx+0x1155>
9f007352:	ff                   	(bad)  
9f007353:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f007356:	00 00                	add    BYTE PTR [eax],al
9f007358:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00735b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007361:	7c c5                	jl     9f007328 <__x86.get_pc_thunk.cx+0x1154>
9f007363:	0c 04                	or     al,0x4
9f007365:	04 00                	add    al,0x0
9f007367:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00736a:	00 00                	add    BYTE PTR [eax],al
9f00736c:	94                   	xchg   esp,eax
9f00736d:	11 00                	adc    DWORD PTR [eax],eax
9f00736f:	00 90 d7 ff ff 40    	add    BYTE PTR [eax+0x40ffffd7],dl
9f007375:	00 00                	add    BYTE PTR [eax],al
9f007377:	00 00                	add    BYTE PTR [eax],al
9f007379:	41                   	inc    ecx
9f00737a:	0e                   	push   cs
9f00737b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007381:	7c c5                	jl     9f007348 <__x86.get_pc_thunk.cx+0x1174>
9f007383:	0c 04                	or     al,0x4
9f007385:	04 00                	add    al,0x0
9f007387:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00738a:	00 00                	add    BYTE PTR [eax],al
9f00738c:	b4 11                	mov    ah,0x11
9f00738e:	00 00                	add    BYTE PTR [eax],al
9f007390:	b0 d7                	mov    al,0xd7
9f007392:	ff                   	(bad)  
9f007393:	ff 47 00             	inc    DWORD PTR [edi+0x0]
9f007396:	00 00                	add    BYTE PTR [eax],al
9f007398:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00739b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0073a1:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
9f0073a4:	0c 04                	or     al,0x4
9f0073a6:	04 00                	add    al,0x0
9f0073a8:	1c 00                	sbb    al,0x0
9f0073aa:	00 00                	add    BYTE PTR [eax],al
9f0073ac:	d4 11                	aam    0x11
9f0073ae:	00 00                	add    BYTE PTR [eax],al
9f0073b0:	d8 d7                	fcom   st(7)
9f0073b2:	ff                   	(bad)  
9f0073b3:	ff 30                	push   DWORD PTR [eax]
9f0073b5:	00 00                	add    BYTE PTR [eax],al
9f0073b7:	00 00                	add    BYTE PTR [eax],al
9f0073b9:	41                   	inc    ecx
9f0073ba:	0e                   	push   cs
9f0073bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0073c1:	6c                   	ins    BYTE PTR es:[edi],dx
9f0073c2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0073c5:	04 00                	add    al,0x0
9f0073c7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0073ca:	00 00                	add    BYTE PTR [eax],al
9f0073cc:	f4                   	hlt    
9f0073cd:	11 00                	adc    DWORD PTR [eax],eax
9f0073cf:	00 e8                	add    al,ch
9f0073d1:	d7                   	xlat   BYTE PTR ds:[ebx]
9f0073d2:	ff                   	(bad)  
9f0073d3:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f0073d6:	00 00                	add    BYTE PTR [eax],al
9f0073d8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0073db:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0073e1:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
9f0073e4:	0c 04                	or     al,0x4
9f0073e6:	04 00                	add    al,0x0
9f0073e8:	1c 00                	sbb    al,0x0
9f0073ea:	00 00                	add    BYTE PTR [eax],al
9f0073ec:	14 12                	adc    al,0x12
9f0073ee:	00 00                	add    BYTE PTR [eax],al
9f0073f0:	24 d8                	and    al,0xd8
9f0073f2:	ff                   	(bad)  
9f0073f3:	ff 31                	push   DWORD PTR [ecx]
9f0073f5:	00 00                	add    BYTE PTR [eax],al
9f0073f7:	00 00                	add    BYTE PTR [eax],al
9f0073f9:	41                   	inc    ecx
9f0073fa:	0e                   	push   cs
9f0073fb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007401:	6d                   	ins    DWORD PTR es:[edi],dx
9f007402:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007405:	04 00                	add    al,0x0
9f007407:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00740a:	00 00                	add    BYTE PTR [eax],al
9f00740c:	34 12                	xor    al,0x12
9f00740e:	00 00                	add    BYTE PTR [eax],al
9f007410:	35 d8 ff ff 1a       	xor    eax,0x1affffd8
9f007415:	00 00                	add    BYTE PTR [eax],al
9f007417:	00 00                	add    BYTE PTR [eax],al
9f007419:	41                   	inc    ecx
9f00741a:	0e                   	push   cs
9f00741b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007421:	56                   	push   esi
9f007422:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007425:	04 00                	add    al,0x0
9f007427:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00742a:	00 00                	add    BYTE PTR [eax],al
9f00742c:	54                   	push   esp
9f00742d:	12 00                	adc    al,BYTE PTR [eax]
9f00742f:	00 2f                	add    BYTE PTR [edi],ch
9f007431:	d8 ff                	fdivr  st,st(7)
9f007433:	ff                   	(bad)  
9f007434:	39 00                	cmp    DWORD PTR [eax],eax
9f007436:	00 00                	add    BYTE PTR [eax],al
9f007438:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00743b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007441:	75 c5                	jne    9f007408 <__x86.get_pc_thunk.cx+0x1234>
9f007443:	0c 04                	or     al,0x4
9f007445:	04 00                	add    al,0x0
9f007447:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00744a:	00 00                	add    BYTE PTR [eax],al
9f00744c:	74 12                	je     9f007460 <__x86.get_pc_thunk.cx+0x128c>
9f00744e:	00 00                	add    BYTE PTR [eax],al
9f007450:	48                   	dec    eax
9f007451:	d8 ff                	fdivr  st,st(7)
9f007453:	ff 1e                	call   FWORD PTR [esi]
9f007455:	00 00                	add    BYTE PTR [eax],al
9f007457:	00 00                	add    BYTE PTR [eax],al
9f007459:	41                   	inc    ecx
9f00745a:	0e                   	push   cs
9f00745b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007461:	5a                   	pop    edx
9f007462:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007465:	04 00                	add    al,0x0
9f007467:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00746a:	00 00                	add    BYTE PTR [eax],al
9f00746c:	94                   	xchg   esp,eax
9f00746d:	12 00                	adc    al,BYTE PTR [eax]
9f00746f:	00 48 d8             	add    BYTE PTR [eax-0x28],cl
9f007472:	ff                   	(bad)  
9f007473:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
9f007476:	00 00                	add    BYTE PTR [eax],al
9f007478:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00747b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007481:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f007484:	0c 04                	or     al,0x4
9f007486:	04 00                	add    al,0x0
9f007488:	1c 00                	sbb    al,0x0
9f00748a:	00 00                	add    BYTE PTR [eax],al
9f00748c:	b4 12                	mov    ah,0x12
9f00748e:	00 00                	add    BYTE PTR [eax],al
9f007490:	8f                   	(bad)  
9f007491:	d8 ff                	fdivr  st,st(7)
9f007493:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
9f007496:	00 00                	add    BYTE PTR [eax],al
9f007498:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00749b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0074a1:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f0074a4:	0c 04                	or     al,0x4
9f0074a6:	04 00                	add    al,0x0
9f0074a8:	1c 00                	sbb    al,0x0
9f0074aa:	00 00                	add    BYTE PTR [eax],al
9f0074ac:	d4 12                	aam    0x12
9f0074ae:	00 00                	add    BYTE PTR [eax],al
9f0074b0:	d8 d8                	fcomp  st(0)
9f0074b2:	ff                   	(bad)  
9f0074b3:	ff 6c 00 00          	jmp    FWORD PTR [eax+eax*1+0x0]
9f0074b7:	00 00                	add    BYTE PTR [eax],al
9f0074b9:	41                   	inc    ecx
9f0074ba:	0e                   	push   cs
9f0074bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0074c1:	02 68 c5             	add    ch,BYTE PTR [eax-0x3b]
9f0074c4:	0c 04                	or     al,0x4
9f0074c6:	04 00                	add    al,0x0
9f0074c8:	1c 00                	sbb    al,0x0
9f0074ca:	00 00                	add    BYTE PTR [eax],al
9f0074cc:	f4                   	hlt    
9f0074cd:	12 00                	adc    al,BYTE PTR [eax]
9f0074cf:	00 24 d9             	add    BYTE PTR [ecx+ebx*8],ah
9f0074d2:	ff                   	(bad)  
9f0074d3:	ff 20                	jmp    DWORD PTR [eax]
9f0074d5:	00 00                	add    BYTE PTR [eax],al
9f0074d7:	00 00                	add    BYTE PTR [eax],al
9f0074d9:	41                   	inc    ecx
9f0074da:	0e                   	push   cs
9f0074db:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0074e1:	5c                   	pop    esp
9f0074e2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0074e5:	04 00                	add    al,0x0
9f0074e7:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f0074ea:	00 00                	add    BYTE PTR [eax],al
9f0074ec:	14 13                	adc    al,0x13
9f0074ee:	00 00                	add    BYTE PTR [eax],al
9f0074f0:	24 d9                	and    al,0xd9
9f0074f2:	ff                   	(bad)  
9f0074f3:	ff                   	(bad)  
9f0074f4:	7d 01                	jge    9f0074f7 <__x86.get_pc_thunk.cx+0x1323>
9f0074f6:	00 00                	add    BYTE PTR [eax],al
9f0074f8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0074fb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007501:	46                   	inc    esi
9f007502:	87 03                	xchg   DWORD PTR [ebx],eax
9f007504:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f007507:	05 03 70 01 c3       	add    eax,0xc3017003
9f00750c:	41                   	inc    ecx
9f00750d:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f007511:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007514:	04 00                	add    al,0x0
9f007516:	00 00                	add    BYTE PTR [eax],al
9f007518:	1c 00                	sbb    al,0x0
9f00751a:	00 00                	add    BYTE PTR [eax],al
9f00751c:	44                   	inc    esp
9f00751d:	13 00                	adc    eax,DWORD PTR [eax]
9f00751f:	00 74 da ff          	add    BYTE PTR [edx+ebx*8-0x1],dh
9f007523:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f007529:	41                   	inc    ecx
9f00752a:	0e                   	push   cs
9f00752b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007531:	59                   	pop    ecx
9f007532:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007535:	04 00                	add    al,0x0
9f007537:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f00753a:	00 00                	add    BYTE PTR [eax],al
9f00753c:	64 13 00             	adc    eax,DWORD PTR fs:[eax]
9f00753f:	00 74 da ff          	add    BYTE PTR [edx+ebx*8-0x1],dh
9f007543:	ff 9c 01 00 00 00 41 	call   FWORD PTR [ecx+eax*1+0x41000000]
9f00754a:	0e                   	push   cs
9f00754b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007551:	46                   	inc    esi
9f007552:	87 03                	xchg   DWORD PTR [ebx],eax
9f007554:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f007557:	05 03 8f 01 c3       	add    eax,0xc3018f03
9f00755c:	41                   	inc    ecx
9f00755d:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f007561:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007564:	04 00                	add    al,0x0
9f007566:	00 00                	add    BYTE PTR [eax],al
9f007568:	20 00                	and    BYTE PTR [eax],al
9f00756a:	00 00                	add    BYTE PTR [eax],al
9f00756c:	94                   	xchg   esp,eax
9f00756d:	13 00                	adc    eax,DWORD PTR [eax]
9f00756f:	00 e0                	add    al,ah
9f007571:	db ff                	(bad)  
9f007573:	ff 96 00 00 00 00    	call   DWORD PTR [esi+0x0]
9f007579:	41                   	inc    ecx
9f00757a:	0e                   	push   cs
9f00757b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007581:	44                   	inc    esp
9f007582:	83 03 02             	add    DWORD PTR [ebx],0x2
9f007585:	8e c5                	mov    es,ebp
9f007587:	c3                   	ret    
9f007588:	0c 04                	or     al,0x4
9f00758a:	04 00                	add    al,0x0
9f00758c:	1c 00                	sbb    al,0x0
9f00758e:	00 00                	add    BYTE PTR [eax],al
9f007590:	b8 13 00 00 52       	mov    eax,0x52000013
9f007595:	dc ff                	fdiv   st(7),st
9f007597:	ff 20                	jmp    DWORD PTR [eax]
9f007599:	00 00                	add    BYTE PTR [eax],al
9f00759b:	00 00                	add    BYTE PTR [eax],al
9f00759d:	41                   	inc    ecx
9f00759e:	0e                   	push   cs
9f00759f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0075a5:	5c                   	pop    esp
9f0075a6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0075a9:	04 00                	add    al,0x0
9f0075ab:	00 28                	add    BYTE PTR [eax],ch
9f0075ad:	00 00                	add    BYTE PTR [eax],al
9f0075af:	00 d8                	add    al,bl
9f0075b1:	13 00                	adc    eax,DWORD PTR [eax]
9f0075b3:	00 54 dc ff          	add    BYTE PTR [esp+ebx*8-0x1],dl
9f0075b7:	ff 1e                	call   FWORD PTR [esi]
9f0075b9:	01 00                	add    DWORD PTR [eax],eax
9f0075bb:	00 00                	add    BYTE PTR [eax],al
9f0075bd:	41                   	inc    ecx
9f0075be:	0e                   	push   cs
9f0075bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0075c5:	45                   	inc    ebp
9f0075c6:	86 03                	xchg   BYTE PTR [ebx],al
9f0075c8:	83 04 03 13          	add    DWORD PTR [ebx+eax*1],0x13
9f0075cc:	01 c3                	add    ebx,eax
9f0075ce:	41                   	inc    ecx
9f0075cf:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0075d3:	04 04                	add    al,0x4
9f0075d5:	00 00                	add    BYTE PTR [eax],al
9f0075d7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0075da:	00 00                	add    BYTE PTR [eax],al
9f0075dc:	04 14                	add    al,0x14
9f0075de:	00 00                	add    BYTE PTR [eax],al
9f0075e0:	46                   	inc    esi
9f0075e1:	dd ff                	(bad)  
9f0075e3:	ff 26                	jmp    DWORD PTR [esi]
9f0075e5:	00 00                	add    BYTE PTR [eax],al
9f0075e7:	00 00                	add    BYTE PTR [eax],al
9f0075e9:	41                   	inc    ecx
9f0075ea:	0e                   	push   cs
9f0075eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0075f1:	62                   	(bad)  
9f0075f2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0075f5:	04 00                	add    al,0x0
9f0075f7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0075fa:	00 00                	add    BYTE PTR [eax],al
9f0075fc:	24 14                	and    al,0x14
9f0075fe:	00 00                	add    BYTE PTR [eax],al
9f007600:	4c                   	dec    esp
9f007601:	dd ff                	(bad)  
9f007603:	ff 9e 00 00 00 00    	call   FWORD PTR [esi+0x0]
9f007609:	41                   	inc    ecx
9f00760a:	0e                   	push   cs
9f00760b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007611:	45                   	inc    ebp
9f007612:	86 03                	xchg   BYTE PTR [ebx],al
9f007614:	83 04 02 93          	add    DWORD PTR [edx+eax*1],0xffffff93
9f007618:	c3                   	ret    
9f007619:	41                   	inc    ecx
9f00761a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00761e:	04 04                	add    al,0x4
9f007620:	24 00                	and    al,0x0
9f007622:	00 00                	add    BYTE PTR [eax],al
9f007624:	4c                   	dec    esp
9f007625:	14 00                	adc    al,0x0
9f007627:	00 c2                	add    dl,al
9f007629:	dd ff                	(bad)  
9f00762b:	ff 6e 00             	jmp    FWORD PTR [esi+0x0]
9f00762e:	00 00                	add    BYTE PTR [eax],al
9f007630:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f007633:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007639:	42                   	inc    edx
9f00763a:	86 03                	xchg   BYTE PTR [ebx],al
9f00763c:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
9f007640:	c3                   	ret    
9f007641:	41                   	inc    ecx
9f007642:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f007646:	04 04                	add    al,0x4
9f007648:	1c 00                	sbb    al,0x0
9f00764a:	00 00                	add    BYTE PTR [eax],al
9f00764c:	74 14                	je     9f007662 <__x86.get_pc_thunk.cx+0x148e>
9f00764e:	00 00                	add    BYTE PTR [eax],al
9f007650:	08 de                	or     dh,bl
9f007652:	ff                   	(bad)  
9f007653:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f007659:	41                   	inc    ecx
9f00765a:	0e                   	push   cs
9f00765b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007661:	59                   	pop    ecx
9f007662:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007665:	04 00                	add    al,0x0
9f007667:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00766a:	00 00                	add    BYTE PTR [eax],al
9f00766c:	94                   	xchg   esp,eax
9f00766d:	14 00                	adc    al,0x0
9f00766f:	00 08                	add    BYTE PTR [eax],cl
9f007671:	de ff                	fdivp  st(7),st
9f007673:	ff 44 00 00          	inc    DWORD PTR [eax+eax*1+0x0]
9f007677:	00 00                	add    BYTE PTR [eax],al
9f007679:	41                   	inc    ecx
9f00767a:	0e                   	push   cs
9f00767b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007681:	45                   	inc    ebp
9f007682:	86 03                	xchg   BYTE PTR [ebx],al
9f007684:	83 04 79 c3          	add    DWORD PTR [ecx+edi*2],0xffffffc3
9f007688:	41                   	inc    ecx
9f007689:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00768d:	04 04                	add    al,0x4
9f00768f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f007692:	00 00                	add    BYTE PTR [eax],al
9f007694:	bc 14 00 00 24       	mov    esp,0x24000014
9f007699:	de ff                	fdivp  st(7),st
9f00769b:	ff 19                	call   FWORD PTR [ecx]
9f00769d:	03 00                	add    eax,DWORD PTR [eax]
9f00769f:	00 00                	add    BYTE PTR [eax],al
9f0076a1:	41                   	inc    ecx
9f0076a2:	0e                   	push   cs
9f0076a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0076a9:	44                   	inc    esp
9f0076aa:	83 03 03             	add    DWORD PTR [ebx],0x3
9f0076ad:	10 03                	adc    BYTE PTR [ebx],al
9f0076af:	c3                   	ret    
9f0076b0:	41                   	inc    ecx
9f0076b1:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0076b4:	04 00                	add    al,0x0
9f0076b6:	00 00                	add    BYTE PTR [eax],al
9f0076b8:	1c 00                	sbb    al,0x0
9f0076ba:	00 00                	add    BYTE PTR [eax],al
9f0076bc:	e4 14                	in     al,0x14
9f0076be:	00 00                	add    BYTE PTR [eax],al
9f0076c0:	15 e1 ff ff 1d       	adc    eax,0x1dffffe1
9f0076c5:	00 00                	add    BYTE PTR [eax],al
9f0076c7:	00 00                	add    BYTE PTR [eax],al
9f0076c9:	41                   	inc    ecx
9f0076ca:	0e                   	push   cs
9f0076cb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0076d1:	59                   	pop    ecx
9f0076d2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0076d5:	04 00                	add    al,0x0
9f0076d7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0076da:	00 00                	add    BYTE PTR [eax],al
9f0076dc:	04 15                	add    al,0x15
9f0076de:	00 00                	add    BYTE PTR [eax],al
9f0076e0:	12 e1                	adc    ah,cl
9f0076e2:	ff                   	(bad)  
9f0076e3:	ff                   	(bad)  
9f0076e4:	3d 00 00 00 00       	cmp    eax,0x0
9f0076e9:	41                   	inc    ecx
9f0076ea:	0e                   	push   cs
9f0076eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0076f1:	79 c5                	jns    9f0076b8 <__x86.get_pc_thunk.cx+0x14e4>
9f0076f3:	0c 04                	or     al,0x4
9f0076f5:	04 00                	add    al,0x0
9f0076f7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0076fa:	00 00                	add    BYTE PTR [eax],al
9f0076fc:	24 15                	and    al,0x15
9f0076fe:	00 00                	add    BYTE PTR [eax],al
9f007700:	2f                   	das    
9f007701:	e1 ff                	loope  9f007702 <__x86.get_pc_thunk.cx+0x152e>
9f007703:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f007709:	41                   	inc    ecx
9f00770a:	0e                   	push   cs
9f00770b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007711:	71 c5                	jno    9f0076d8 <__x86.get_pc_thunk.cx+0x1504>
9f007713:	0c 04                	or     al,0x4
9f007715:	04 00                	add    al,0x0
9f007717:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00771a:	00 00                	add    BYTE PTR [eax],al
9f00771c:	44                   	inc    esp
9f00771d:	15 00 00 44 e1       	adc    eax,0xe1440000
9f007722:	ff                   	(bad)  
9f007723:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f007729:	41                   	inc    ecx
9f00772a:	0e                   	push   cs
9f00772b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007731:	59                   	pop    ecx
9f007732:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007735:	04 00                	add    al,0x0
9f007737:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f00773a:	00 00                	add    BYTE PTR [eax],al
9f00773c:	64                   	fs
9f00773d:	15 00 00 41 e1       	adc    eax,0xe1410000
9f007742:	ff                   	(bad)  
9f007743:	ff 57 08             	call   DWORD PTR [edi+0x8]
9f007746:	00 00                	add    BYTE PTR [eax],al
9f007748:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00774b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007751:	46                   	inc    esi
9f007752:	87 03                	xchg   DWORD PTR [ebx],eax
9f007754:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f007757:	05 03 4a 08 c3       	add    eax,0xc3084a03
9f00775c:	41                   	inc    ecx
9f00775d:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f007761:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f007764:	04 00                	add    al,0x0
9f007766:	00 00                	add    BYTE PTR [eax],al
9f007768:	24 00                	and    al,0x0
9f00776a:	00 00                	add    BYTE PTR [eax],al
9f00776c:	94                   	xchg   esp,eax
9f00776d:	15 00 00 68 e9       	adc    eax,0xe9680000
9f007772:	ff                   	(bad)  
9f007773:	ff 6d 00             	jmp    FWORD PTR [ebp+0x0]
9f007776:	00 00                	add    BYTE PTR [eax],al
9f007778:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00777b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f007781:	45                   	inc    ebp
9f007782:	86 03                	xchg   BYTE PTR [ebx],al
9f007784:	83 04 02 62          	add    DWORD PTR [edx+eax*1],0x62
9f007788:	c3                   	ret    
9f007789:	41                   	inc    ecx
9f00778a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00778e:	04 04                	add    al,0x4
9f007790:	20 00                	and    BYTE PTR [eax],al
9f007792:	00 00                	add    BYTE PTR [eax],al
9f007794:	bc 15 00 00 ad       	mov    esp,0xad000015
9f007799:	e9 ff ff 41 00       	jmp    9f42779d <tmbuf+0x41e47d>
9f00779e:	00 00                	add    BYTE PTR [eax],al
9f0077a0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0077a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0077a9:	44                   	inc    esp
9f0077aa:	83 03 79             	add    DWORD PTR [ebx],0x79
9f0077ad:	c5 c3 0c             	(bad)  
9f0077b0:	04 04                	add    al,0x4
	...

Disassembly of section .dynsym:

9f0077b4 <.dynsym>:
	...
9f0077c4:	f6 01 00             	test   BYTE PTR [ecx],0x0
9f0077c7:	00 ea                	add    dl,ch
9f0077c9:	2f                   	das    
9f0077ca:	00 9f 78 02 00 00    	add    BYTE PTR [edi+0x278],bl
9f0077d0:	12 00                	adc    al,BYTE PTR [eax]
9f0077d2:	01 00                	add    DWORD PTR [eax],eax
9f0077d4:	37                   	aaa    
9f0077d5:	02 00                	add    al,BYTE PTR [eax]
9f0077d7:	00 c0                	add    al,al
9f0077d9:	4a                   	dec    edx
9f0077da:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
9f0077e0:	12 00                	adc    al,BYTE PTR [eax]
9f0077e2:	01 00                	add    DWORD PTR [eax],eax
9f0077e4:	4e                   	dec    esi
9f0077e5:	01 00                	add    DWORD PTR [eax],eax
9f0077e7:	00 d8                	add    al,bl
9f0077e9:	1c 00                	sbb    al,0x0
9f0077eb:	9f                   	lahf   
9f0077ec:	1c 00                	sbb    al,0x0
9f0077ee:	00 00                	add    BYTE PTR [eax],al
9f0077f0:	12 00                	adc    al,BYTE PTR [eax]
9f0077f2:	01 00                	add    DWORD PTR [eax],eax
9f0077f4:	fa                   	cli    
9f0077f5:	00 00                	add    BYTE PTR [eax],al
9f0077f7:	00 b0 16 00 9f 59    	add    BYTE PTR [eax+0x599f0016],dh
9f0077fd:	00 00                	add    BYTE PTR [eax],al
9f0077ff:	00 12                	add    BYTE PTR [edx],dl
9f007801:	00 01                	add    BYTE PTR [ecx],al
9f007803:	00 11                	add    BYTE PTR [ecx],dl
9f007805:	02 00                	add    al,BYTE PTR [eax]
9f007807:	00 09                	add    BYTE PTR [ecx],cl
9f007809:	17                   	pop    ss
9f00780a:	00 9f 54 00 00 00    	add    BYTE PTR [edi+0x54],bl
9f007810:	12 00                	adc    al,BYTE PTR [eax]
9f007812:	01 00                	add    DWORD PTR [eax],eax
9f007814:	3d 00 00 00 c8       	cmp    eax,0xc8000000
9f007819:	05 00 9f 5a 00       	add    eax,0x5a9f00
9f00781e:	00 00                	add    BYTE PTR [eax],al
9f007820:	12 00                	adc    al,BYTE PTR [eax]
9f007822:	01 00                	add    DWORD PTR [eax],eax
9f007824:	46                   	inc    esi
9f007825:	02 00                	add    al,BYTE PTR [eax]
9f007827:	00 b8 4b 00 9f 59    	add    BYTE PTR [eax+0x599f004b],bh
9f00782d:	00 00                	add    BYTE PTR [eax],al
9f00782f:	00 12                	add    BYTE PTR [edx],dl
9f007831:	00 01                	add    BYTE PTR [ecx],al
9f007833:	00 18                	add    BYTE PTR [eax],bl
9f007835:	02 00                	add    al,BYTE PTR [eax]
9f007837:	00 68 48             	add    BYTE PTR [eax+0x48],ch
9f00783a:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
9f007840:	12 00                	adc    al,BYTE PTR [eax]
9f007842:	01 00                	add    DWORD PTR [eax],eax
9f007844:	6a 00                	push   0x0
9f007846:	00 00                	add    BYTE PTR [eax],al
9f007848:	32 08                	xor    cl,BYTE PTR [eax]
9f00784a:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f007850:	12 00                	adc    al,BYTE PTR [eax]
9f007852:	01 00                	add    DWORD PTR [eax],eax
9f007854:	e2 01                	loop   9f007857 <__x86.get_pc_thunk.cx+0x1683>
9f007856:	00 00                	add    BYTE PTR [eax],al
9f007858:	1d 2c 00 9f 2e       	sbb    eax,0x2e9f002c
9f00785d:	00 00                	add    BYTE PTR [eax],al
9f00785f:	00 12                	add    BYTE PTR [edx],dl
9f007861:	00 01                	add    BYTE PTR [ecx],al
9f007863:	00 87 01 00 00 f8    	add    BYTE PTR [edi-0x7ffffff],al
9f007869:	21 00                	and    DWORD PTR [eax],eax
9f00786b:	9f                   	lahf   
9f00786c:	20 00                	and    BYTE PTR [eax],al
9f00786e:	00 00                	add    BYTE PTR [eax],al
9f007870:	12 00                	adc    al,BYTE PTR [eax]
9f007872:	01 00                	add    DWORD PTR [eax],eax
9f007874:	eb 00                	jmp    9f007876 <__x86.get_pc_thunk.cx+0x16a2>
9f007876:	00 00                	add    BYTE PTR [eax],al
9f007878:	cc                   	int3   
9f007879:	13 00                	adc    eax,DWORD PTR [eax]
9f00787b:	9f                   	lahf   
9f00787c:	bd 00 00 00 12       	mov    ebp,0x12000000
9f007881:	00 01                	add    BYTE PTR [ecx],al
9f007883:	00 a9 00 00 00 9e    	add    BYTE PTR [ecx-0x62000000],ch
9f007889:	0d 00 9f 29 03       	or     eax,0x3299f00
9f00788e:	00 00                	add    BYTE PTR [eax],al
9f007890:	12 00                	adc    al,BYTE PTR [eax]
9f007892:	01 00                	add    DWORD PTR [eax],eax
9f007894:	c6 01 00             	mov    BYTE PTR [ecx],0x0
9f007897:	00 eb                	add    bl,ch
9f007899:	2a 00                	sub    al,BYTE PTR [eax]
9f00789b:	9f                   	lahf   
9f00789c:	20 00                	and    BYTE PTR [eax],al
9f00789e:	00 00                	add    BYTE PTR [eax],al
9f0078a0:	12 00                	adc    al,BYTE PTR [eax]
9f0078a2:	01 00                	add    DWORD PTR [eax],eax
9f0078a4:	62 01                	bound  eax,QWORD PTR [ecx]
9f0078a6:	00 00                	add    BYTE PTR [eax],al
9f0078a8:	78 1e                	js     9f0078c8 <__x86.get_pc_thunk.cx+0x16f4>
9f0078aa:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f0078b0:	12 00                	adc    al,BYTE PTR [eax]
9f0078b2:	01 00                	add    DWORD PTR [eax],eax
9f0078b4:	c9                   	leave  
9f0078b5:	00 00                	add    BYTE PTR [eax],al
9f0078b7:	00 20                	add    BYTE PTR [eax],ah
9f0078b9:	13 00                	adc    eax,DWORD PTR [eax]
9f0078bb:	9f                   	lahf   
9f0078bc:	26 00 00             	add    BYTE PTR es:[eax],al
9f0078bf:	00 12                	add    BYTE PTR [edx],dl
9f0078c1:	00 01                	add    BYTE PTR [ecx],al
9f0078c3:	00 b2 01 00 00 b5    	add    BYTE PTR [edx-0x4affffff],dh
9f0078c9:	27                   	daa    
9f0078ca:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f0078d0:	12 00                	adc    al,BYTE PTR [eax]
9f0078d2:	01 00                	add    DWORD PTR [eax],eax
9f0078d4:	0f 01 00             	sgdtd  [eax]
9f0078d7:	00 db                	add    bl,bl
9f0078d9:	18 00                	sbb    BYTE PTR [eax],al
9f0078db:	9f                   	lahf   
9f0078dc:	70 00                	jo     9f0078de <__x86.get_pc_thunk.cx+0x170a>
9f0078de:	00 00                	add    BYTE PTR [eax],al
9f0078e0:	12 00                	adc    al,BYTE PTR [eax]
9f0078e2:	01 00                	add    DWORD PTR [eax],eax
9f0078e4:	68 01 00 00 95       	push   0x95000001
9f0078e9:	21 00                	and    DWORD PTR [eax],eax
9f0078eb:	9f                   	lahf   
9f0078ec:	23 00                	and    eax,DWORD PTR [eax]
9f0078ee:	00 00                	add    BYTE PTR [eax],al
9f0078f0:	12 00                	adc    al,BYTE PTR [eax]
9f0078f2:	01 00                	add    DWORD PTR [eax],eax
9f0078f4:	67 02 00             	add    al,BYTE PTR [bx+si]
9f0078f7:	00 14 4e             	add    BYTE PTR [esi+ecx*2],dl
9f0078fa:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
9f007900:	12 00                	adc    al,BYTE PTR [eax]
9f007902:	01 00                	add    DWORD PTR [eax],eax
9f007904:	17                   	pop    ss
9f007905:	00 00                	add    BYTE PTR [eax],al
9f007907:	00 c3                	add    bl,al
9f007909:	02 00                	add    al,BYTE PTR [eax]
9f00790b:	9f                   	lahf   
9f00790c:	bb 00 00 00 12       	mov    ebx,0x12000000
9f007911:	00 01                	add    BYTE PTR [ecx],al
9f007913:	00 7d 01             	add    BYTE PTR [ebp+0x1],bh
9f007916:	00 00                	add    BYTE PTR [eax],al
9f007918:	db 21                	(bad)  [ecx]
9f00791a:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
9f007920:	12 00                	adc    al,BYTE PTR [eax]
9f007922:	01 00                	add    DWORD PTR [eax],eax
9f007924:	93                   	xchg   ebx,eax
9f007925:	01 00                	add    DWORD PTR [eax],eax
9f007927:	00 18                	add    BYTE PTR [eax],bl
9f007929:	22 00                	and    al,BYTE PTR [eax]
9f00792b:	9f                   	lahf   
9f00792c:	73 00                	jae    9f00792e <__x86.get_pc_thunk.cx+0x175a>
9f00792e:	00 00                	add    BYTE PTR [eax],al
9f007930:	12 00                	adc    al,BYTE PTR [eax]
9f007932:	01 00                	add    DWORD PTR [eax],eax
9f007934:	a8 02                	test   al,0x2
9f007936:	00 00                	add    BYTE PTR [eax],al
9f007938:	d5 57                	aad    0x57
9f00793a:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
9f007940:	12 00                	adc    al,BYTE PTR [eax]
9f007942:	01 00                	add    DWORD PTR [eax],eax
9f007944:	77 02                	ja     9f007948 <__x86.get_pc_thunk.cx+0x1774>
9f007946:	00 00                	add    BYTE PTR [eax],al
9f007948:	b4 4f                	mov    ah,0x4f
9f00794a:	00 9f 9c 01 00 00    	add    BYTE PTR [edi+0x19c],bl
9f007950:	12 00                	adc    al,BYTE PTR [eax]
9f007952:	01 00                	add    DWORD PTR [eax],eax
9f007954:	f0 00 00             	lock add BYTE PTR [eax],al
9f007957:	00 c2                	add    dl,al
9f007959:	15 00 9f cb 00       	adc    eax,0xcb9f00
9f00795e:	00 00                	add    BYTE PTR [eax],al
9f007960:	12 00                	adc    al,BYTE PTR [eax]
9f007962:	01 00                	add    DWORD PTR [eax],eax
9f007964:	dd 01                	fld    QWORD PTR [ecx]
9f007966:	00 00                	add    BYTE PTR [eax],al
9f007968:	f4                   	hlt    
9f007969:	2b 00                	sub    eax,DWORD PTR [eax]
9f00796b:	9f                   	lahf   
9f00796c:	29 00                	sub    DWORD PTR [eax],eax
9f00796e:	00 00                	add    BYTE PTR [eax],al
9f007970:	12 00                	adc    al,BYTE PTR [eax]
9f007972:	01 00                	add    DWORD PTR [eax],eax
9f007974:	4f                   	dec    edi
9f007975:	02 00                	add    al,BYTE PTR [eax]
9f007977:	00 98 4c 00 9f 1e    	add    BYTE PTR [eax+0x1e9f004c],bl
9f00797d:	00 00                	add    BYTE PTR [eax],al
9f00797f:	00 12                	add    BYTE PTR [edx],dl
9f007981:	00 01                	add    BYTE PTR [ecx],al
9f007983:	00 42 01             	add    BYTE PTR [edx+0x1],al
9f007986:	00 00                	add    BYTE PTR [eax],al
9f007988:	95                   	xchg   ebp,eax
9f007989:	1a 00                	sbb    al,BYTE PTR [eax]
9f00798b:	9f                   	lahf   
9f00798c:	f4                   	hlt    
9f00798d:	01 00                	add    DWORD PTR [eax],eax
9f00798f:	00 12                	add    BYTE PTR [edx],dl
9f007991:	00 01                	add    BYTE PTR [ecx],al
9f007993:	00 99 00 00 00 d4    	add    BYTE PTR [ecx-0x2c000000],bl
9f007999:	0c 00                	or     al,0x0
9f00799b:	9f                   	lahf   
9f00799c:	26 00 00             	add    BYTE PTR es:[eax],al
9f00799f:	00 12                	add    BYTE PTR [edx],dl
9f0079a1:	00 01                	add    BYTE PTR [ecx],al
9f0079a3:	00 15 01 00 00 4b    	add    BYTE PTR ds:0x4b000001,dl
9f0079a9:	19 00                	sbb    DWORD PTR [eax],eax
9f0079ab:	9f                   	lahf   
9f0079ac:	70 00                	jo     9f0079ae <__x86.get_pc_thunk.cx+0x17da>
9f0079ae:	00 00                	add    BYTE PTR [eax],al
9f0079b0:	12 00                	adc    al,BYTE PTR [eax]
9f0079b2:	01 00                	add    DWORD PTR [eax],eax
9f0079b4:	21 02                	and    DWORD PTR [edx],eax
9f0079b6:	00 00                	add    BYTE PTR [eax],al
9f0079b8:	ec                   	in     al,dx
9f0079b9:	48                   	dec    eax
9f0079ba:	00 9f 3e 00 00 00    	add    BYTE PTR [edi+0x3e],bl
9f0079c0:	12 00                	adc    al,BYTE PTR [eax]
9f0079c2:	01 00                	add    DWORD PTR [eax],eax
9f0079c4:	9f                   	lahf   
9f0079c5:	02 00                	add    al,BYTE PTR [eax]
9f0079c7:	00 78 54             	add    BYTE PTR [eax+0x54],bh
9f0079ca:	00 9f 44 00 00 00    	add    BYTE PTR [edi+0x44],bl
9f0079d0:	12 00                	adc    al,BYTE PTR [eax]
9f0079d2:	01 00                	add    DWORD PTR [eax],eax
9f0079d4:	b5 00                	mov    ch,0x0
9f0079d6:	00 00                	add    BYTE PTR [eax],al
9f0079d8:	f0 10 00             	lock adc BYTE PTR [eax],al
9f0079db:	9f                   	lahf   
9f0079dc:	20 00                	and    BYTE PTR [eax],al
9f0079de:	00 00                	add    BYTE PTR [eax],al
9f0079e0:	12 00                	adc    al,BYTE PTR [eax]
9f0079e2:	01 00                	add    DWORD PTR [eax],eax
9f0079e4:	d4 01                	aam    0x1
	...
9f0079ee:	00 00                	add    BYTE PTR [eax],al
9f0079f0:	12 00                	adc    al,BYTE PTR [eax]
9f0079f2:	1c 00                	sbb    al,0x0
9f0079f4:	aa                   	stos   BYTE PTR es:[edi],al
9f0079f5:	01 00                	add    DWORD PTR [eax],eax
9f0079f7:	00 8c 92 00 9f 04 00 	add    BYTE PTR [edx+edx*4+0x49f00],cl
9f0079fe:	00 00                	add    BYTE PTR [eax],al
9f007a00:	11 00                	adc    DWORD PTR [eax],eax
9f007a02:	15 00 3d 01 00       	adc    eax,0x13d00
9f007a07:	00 49 1a             	add    BYTE PTR [ecx+0x1a],cl
9f007a0a:	00 9f 4c 00 00 00    	add    BYTE PTR [edi+0x4c],bl
9f007a10:	12 00                	adc    al,BYTE PTR [eax]
9f007a12:	01 00                	add    DWORD PTR [eax],eax
9f007a14:	7f 00                	jg     9f007a16 <__x86.get_pc_thunk.cx+0x1842>
9f007a16:	00 00                	add    BYTE PTR [eax],al
9f007a18:	99                   	cdq    
9f007a19:	0a 00                	or     al,BYTE PTR [eax]
9f007a1b:	9f                   	lahf   
9f007a1c:	26 00 00             	add    BYTE PTR es:[eax],al
9f007a1f:	00 12                	add    BYTE PTR [edx],dl
9f007a21:	00 01                	add    BYTE PTR [ecx],al
9f007a23:	00 c7                	add    bh,al
9f007a25:	02 00                	add    al,BYTE PTR [eax]
9f007a27:	00 81 58 00 9f 57    	add    BYTE PTR [ecx+0x579f0058],al
9f007a2d:	08 00                	or     BYTE PTR [eax],al
9f007a2f:	00 12                	add    BYTE PTR [edx],dl
9f007a31:	00 01                	add    BYTE PTR [ecx],al
9f007a33:	00 91 02 00 00 58    	add    BYTE PTR [ecx+0x58000002],dl
9f007a39:	54                   	push   esp
9f007a3a:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
9f007a40:	12 00                	adc    al,BYTE PTR [eax]
9f007a42:	01 00                	add    DWORD PTR [eax],eax
9f007a44:	98                   	cwde   
9f007a45:	01 00                	add    DWORD PTR [eax],eax
9f007a47:	00 84 92 00 9f 04 00 	add    BYTE PTR [edx+edx*4+0x49f00],al
9f007a4e:	00 00                	add    BYTE PTR [eax],al
9f007a50:	11 00                	adc    DWORD PTR [eax],eax
9f007a52:	15 00 94 00 00       	adc    eax,0x9400
9f007a57:	00 79 0c             	add    BYTE PTR [ecx+0xc],bh
9f007a5a:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
9f007a60:	12 00                	adc    al,BYTE PTR [eax]
9f007a62:	01 00                	add    DWORD PTR [eax],eax
9f007a64:	a1 01 00 00 88       	mov    eax,ds:0x88000001
9f007a69:	92                   	xchg   edx,eax
9f007a6a:	00 9f 04 00 00 00    	add    BYTE PTR [edi+0x4],bl
9f007a70:	11 00                	adc    DWORD PTR [eax],eax
9f007a72:	15 00 57 02 00       	adc    eax,0x25700
9f007a77:	00 b8 4c 00 9f 67    	add    BYTE PTR [eax+0x679f004c],bh
9f007a7d:	00 00                	add    BYTE PTR [eax],al
9f007a7f:	00 12                	add    BYTE PTR [edx],dl
9f007a81:	00 01                	add    BYTE PTR [ecx],al
9f007a83:	00 5f 02             	add    BYTE PTR [edi+0x2],bl
9f007a86:	00 00                	add    BYTE PTR [eax],al
9f007a88:	f4                   	hlt    
9f007a89:	4d                   	dec    ebp
9f007a8a:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f007a90:	12 00                	adc    al,BYTE PTR [eax]
9f007a92:	01 00                	add    DWORD PTR [eax],eax
9f007a94:	c2 00 00             	ret    0x0
9f007a97:	00 f7                	add    bh,dh
9f007a99:	12 00                	adc    al,BYTE PTR [eax]
9f007a9b:	9f                   	lahf   
9f007a9c:	29 00                	sub    DWORD PTR [eax],eax
9f007a9e:	00 00                	add    BYTE PTR [eax],al
9f007aa0:	12 00                	adc    al,BYTE PTR [eax]
9f007aa2:	01 00                	add    DWORD PTR [eax],eax
9f007aa4:	71 00                	jno    9f007aa6 <__x86.get_pc_thunk.cx+0x18d2>
9f007aa6:	00 00                	add    BYTE PTR [eax],al
9f007aa8:	55                   	push   ebp
9f007aa9:	08 00                	or     BYTE PTR [eax],al
9f007aab:	9f                   	lahf   
9f007aac:	c1 01 00             	rol    DWORD PTR [ecx],0x0
9f007aaf:	00 12                	add    BYTE PTR [edx],dl
9f007ab1:	00 01                	add    BYTE PTR [ecx],al
9f007ab3:	00 b9 01 00 00 d8    	add    BYTE PTR [ecx-0x27ffffff],bh
9f007ab9:	28 00                	sub    BYTE PTR [eax],al
9f007abb:	9f                   	lahf   
9f007abc:	23 00                	and    eax,DWORD PTR [eax]
9f007abe:	00 00                	add    BYTE PTR [eax],al
9f007ac0:	12 00                	adc    al,BYTE PTR [eax]
9f007ac2:	01 00                	add    DWORD PTR [eax],eax
9f007ac4:	10 00                	adc    BYTE PTR [eax],al
9f007ac6:	00 00                	add    BYTE PTR [eax],al
9f007ac8:	b3 01                	mov    bl,0x1
9f007aca:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
9f007ad0:	12 00                	adc    al,BYTE PTR [eax]
9f007ad2:	01 00                	add    DWORD PTR [eax],eax
9f007ad4:	38 01                	cmp    BYTE PTR [ecx],al
9f007ad6:	00 00                	add    BYTE PTR [eax],al
9f007ad8:	26 1a 00             	sbb    al,BYTE PTR es:[eax]
9f007adb:	9f                   	lahf   
9f007adc:	23 00                	and    eax,DWORD PTR [eax]
9f007ade:	00 00                	add    BYTE PTR [eax],al
9f007ae0:	12 00                	adc    al,BYTE PTR [eax]
9f007ae2:	01 00                	add    DWORD PTR [eax],eax
9f007ae4:	e7 01                	out    0x1,eax
9f007ae6:	00 00                	add    BYTE PTR [eax],al
9f007ae8:	c5 2f                	lds    ebp,FWORD PTR [edi]
9f007aea:	00 9f 25 00 00 00    	add    BYTE PTR [edi+0x25],bl
9f007af0:	12 00                	adc    al,BYTE PTR [eax]
9f007af2:	01 00                	add    DWORD PTR [eax],eax
9f007af4:	2d 01 00 00 01       	sub    eax,0x1000001
9f007af9:	1a 00                	sbb    al,BYTE PTR [eax]
9f007afb:	9f                   	lahf   
9f007afc:	25 00 00 00 12       	and    eax,0x12000000
9f007b01:	00 01                	add    BYTE PTR [ecx],al
9f007b03:	00 28                	add    BYTE PTR [eax],ch
9f007b05:	02 00                	add    al,BYTE PTR [eax]
9f007b07:	00 1e                	add    BYTE PTR [esi],bl
9f007b09:	4a                   	dec    edx
9f007b0a:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
9f007b10:	12 00                	adc    al,BYTE PTR [eax]
9f007b12:	01 00                	add    DWORD PTR [eax],eax
9f007b14:	ce                   	into   
9f007b15:	00 00                	add    BYTE PTR [eax],al
9f007b17:	00 00                	add    BYTE PTR [eax],al
9f007b19:	00 13                	add    BYTE PTR [ebx],dl
9f007b1b:	00 00                	add    BYTE PTR [eax],al
9f007b1d:	00 00                	add    BYTE PTR [eax],al
9f007b1f:	00 10                	add    BYTE PTR [eax],dl
9f007b21:	00 01                	add    BYTE PTR [ecx],al
9f007b23:	00 5b 01             	add    BYTE PTR [ebx+0x1],bl
9f007b26:	00 00                	add    BYTE PTR [eax],al
9f007b28:	14 1d                	adc    al,0x1d
9f007b2a:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f007b30:	12 00                	adc    al,BYTE PTR [eax]
9f007b32:	01 00                	add    DWORD PTR [eax],eax
9f007b34:	b1 02                	mov    cl,0x2
9f007b36:	00 00                	add    BYTE PTR [eax],al
9f007b38:	f2 57                	repnz push edi
9f007b3a:	00 9f 3d 00 00 00    	add    BYTE PTR [edi+0x3d],bl
9f007b40:	12 00                	adc    al,BYTE PTR [eax]
9f007b42:	01 00                	add    DWORD PTR [eax],eax
9f007b44:	cd 01                	int    0x1
9f007b46:	00 00                	add    BYTE PTR [eax],al
9f007b48:	d3 2b                	shr    DWORD PTR [ebx],cl
9f007b4a:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f007b50:	12 00                	adc    al,BYTE PTR [eax]
9f007b52:	01 00                	add    DWORD PTR [eax],eax
9f007b54:	7e 02                	jle    9f007b58 <__x86.get_pc_thunk.cx+0x1984>
9f007b56:	00 00                	add    BYTE PTR [eax],al
9f007b58:	e6 51                	out    0x51,al
9f007b5a:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f007b60:	12 00                	adc    al,BYTE PTR [eax]
9f007b62:	01 00                	add    DWORD PTR [eax],eax
9f007b64:	e3 00                	jecxz  9f007b66 <__x86.get_pc_thunk.cx+0x1992>
9f007b66:	00 00                	add    BYTE PTR [eax],al
9f007b68:	89 13                	mov    DWORD PTR [ebx],edx
9f007b6a:	00 9f 43 00 00 00    	add    BYTE PTR [edi+0x43],bl
9f007b70:	12 00                	adc    al,BYTE PTR [eax]
9f007b72:	01 00                	add    DWORD PTR [eax],eax
9f007b74:	c9                   	leave  
9f007b75:	02 00                	add    al,BYTE PTR [eax]
9f007b77:	00 45 61             	add    BYTE PTR [ebp+0x61],al
9f007b7a:	00 9f 41 00 00 00    	add    BYTE PTR [edi+0x41],bl
9f007b80:	12 00                	adc    al,BYTE PTR [eax]
9f007b82:	01 00                	add    DWORD PTR [eax],eax
9f007b84:	9f                   	lahf   
9f007b85:	00 00                	add    BYTE PTR [eax],al
9f007b87:	00 28                	add    BYTE PTR [eax],ch
9f007b89:	0d 00 9f 26 00       	or     eax,0x269f00
9f007b8e:	00 00                	add    BYTE PTR [eax],al
9f007b90:	12 00                	adc    al,BYTE PTR [eax]
9f007b92:	01 00                	add    DWORD PTR [eax],eax
9f007b94:	de 00                	fiadd  WORD PTR [eax]
9f007b96:	00 00                	add    BYTE PTR [eax],al
9f007b98:	46                   	inc    esi
9f007b99:	13 00                	adc    eax,DWORD PTR [eax]
9f007b9b:	9f                   	lahf   
9f007b9c:	43                   	inc    ebx
9f007b9d:	00 00                	add    BYTE PTR [eax],al
9f007b9f:	00 12                	add    BYTE PTR [edx],dl
9f007ba1:	00 01                	add    BYTE PTR [ecx],al
9f007ba3:	00 30                	add    BYTE PTR [eax],dh
9f007ba5:	02 00                	add    al,BYTE PTR [eax]
9f007ba7:	00 a2 4a 00 9f 1d    	add    BYTE PTR [edx+0x1d9f004a],ah
9f007bad:	00 00                	add    BYTE PTR [eax],al
9f007baf:	00 12                	add    BYTE PTR [edx],dl
9f007bb1:	00 01                	add    BYTE PTR [ecx],al
9f007bb3:	00 78 00             	add    BYTE PTR [eax+0x0],bh
9f007bb6:	00 00                	add    BYTE PTR [eax],al
9f007bb8:	42                   	inc    edx
9f007bb9:	0a 00                	or     al,BYTE PTR [eax]
9f007bbb:	9f                   	lahf   
9f007bbc:	23 00                	and    eax,DWORD PTR [eax]
9f007bbe:	00 00                	add    BYTE PTR [eax],al
9f007bc0:	12 00                	adc    al,BYTE PTR [eax]
9f007bc2:	01 00                	add    DWORD PTR [eax],eax
9f007bc4:	07                   	pop    es
9f007bc5:	01 00                	add    DWORD PTR [eax],eax
9f007bc7:	00 53 18             	add    BYTE PTR [ebx+0x18],dl
9f007bca:	00 9f 88 00 00 00    	add    BYTE PTR [edi+0x88],bl
9f007bd0:	12 00                	adc    al,BYTE PTR [eax]
9f007bd2:	01 00                	add    DWORD PTR [eax],eax
9f007bd4:	10 02                	adc    BYTE PTR [edx],al
9f007bd6:	00 00                	add    BYTE PTR [eax],al
9f007bd8:	88 47 00             	mov    BYTE PTR [edi+0x0],al
9f007bdb:	9f                   	lahf   
9f007bdc:	33 00                	xor    eax,DWORD PTR [eax]
9f007bde:	00 00                	add    BYTE PTR [eax],al
9f007be0:	12 00                	adc    al,BYTE PTR [eax]
9f007be2:	01 00                	add    DWORD PTR [eax],eax
9f007be4:	00 01                	add    BYTE PTR [ecx],al
9f007be6:	00 00                	add    BYTE PTR [eax],al
9f007be8:	e5 17                	in     eax,0x17
9f007bea:	00 9f 37 00 00 00    	add    BYTE PTR [edi+0x37],bl
9f007bf0:	12 00                	adc    al,BYTE PTR [eax]
9f007bf2:	01 00                	add    DWORD PTR [eax],eax
9f007bf4:	08 00                	or     BYTE PTR [eax],al
9f007bf6:	00 00                	add    BYTE PTR [eax],al
9f007bf8:	70 00                	jo     9f007bfa <__x86.get_pc_thunk.cx+0x1a26>
9f007bfa:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
9f007c00:	12 00                	adc    al,BYTE PTR [eax]
9f007c02:	01 00                	add    DWORD PTR [eax],eax
9f007c04:	3e 02 00             	add    al,BYTE PTR ds:[eax]
9f007c07:	00 40 4b             	add    BYTE PTR [eax+0x4b],al
9f007c0a:	00 9f 47 00 00 00    	add    BYTE PTR [edi+0x47],bl
9f007c10:	12 00                	adc    al,BYTE PTR [eax]
9f007c12:	01 00                	add    DWORD PTR [eax],eax
9f007c14:	98                   	cwde   
9f007c15:	02 00                	add    al,BYTE PTR [eax]
9f007c17:	00 e0                	add    al,ah
9f007c19:	92                   	xchg   edx,eax
9f007c1a:	00 9f 04 00 00 00    	add    BYTE PTR [edi+0x4],bl
9f007c20:	11 00                	adc    DWORD PTR [eax],eax
9f007c22:	15 00 20 01 00       	adc    eax,0x12000
9f007c27:	00 d8                	add    al,bl
9f007c29:	19 00                	sbb    DWORD PTR [eax],eax
9f007c2b:	9f                   	lahf   
9f007c2c:	29 00                	sub    DWORD PTR [eax],eax
9f007c2e:	00 00                	add    BYTE PTR [eax],al
9f007c30:	12 00                	adc    al,BYTE PTR [eax]
9f007c32:	01 00                	add    DWORD PTR [eax],eax
9f007c34:	bb 02 00 00 64       	mov    ebx,0x64000002
9f007c39:	58                   	pop    eax
9f007c3a:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
9f007c40:	12 00                	adc    al,BYTE PTR [eax]
9f007c42:	01 00                	add    DWORD PTR [eax],eax
9f007c44:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f007c45:	00 00                	add    BYTE PTR [eax],al
9f007c47:	00 7b 0d             	add    BYTE PTR [ebx+0xd],bh
9f007c4a:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f007c50:	12 00                	adc    al,BYTE PTR [eax]
9f007c52:	01 00                	add    DWORD PTR [eax],eax
9f007c54:	ce                   	into   
9f007c55:	02 00                	add    al,BYTE PTR [eax]
9f007c57:	00 d8                	add    al,bl
9f007c59:	60                   	pusha  
9f007c5a:	00 9f 6d 00 00 00    	add    BYTE PTR [edi+0x6d],bl
9f007c60:	12 00                	adc    al,BYTE PTR [eax]
9f007c62:	01 00                	add    DWORD PTR [eax],eax
9f007c64:	86 00                	xchg   BYTE PTR [eax],al
9f007c66:	00 00                	add    BYTE PTR [eax],al
9f007c68:	67 0b 00             	or     eax,DWORD PTR [bx+si]
9f007c6b:	9f                   	lahf   
9f007c6c:	93                   	xchg   ebx,eax
9f007c6d:	00 00                	add    BYTE PTR [eax],al
9f007c6f:	00 12                	add    BYTE PTR [edx],dl
9f007c71:	00 01                	add    BYTE PTR [ecx],al
9f007c73:	00 56 01             	add    BYTE PTR [esi+0x1],dl
9f007c76:	00 00                	add    BYTE PTR [eax],al
9f007c78:	f4                   	hlt    
9f007c79:	1c 00                	sbb    al,0x0
9f007c7b:	9f                   	lahf   
9f007c7c:	20 00                	and    BYTE PTR [eax],al
9f007c7e:	00 00                	add    BYTE PTR [eax],al
9f007c80:	12 00                	adc    al,BYTE PTR [eax]
9f007c82:	01 00                	add    DWORD PTR [eax],eax
9f007c84:	d5 01                	aad    0x1
	...
9f007c8e:	00 00                	add    BYTE PTR [eax],al
9f007c90:	12 00                	adc    al,BYTE PTR [eax]
9f007c92:	1c 00                	sbb    al,0x0
9f007c94:	1c 00                	sbb    al,0x0
9f007c96:	00 00                	add    BYTE PTR [eax],al
9f007c98:	97                   	xchg   edi,eax
9f007c99:	04 00                	add    al,0x0
9f007c9b:	9f                   	lahf   
9f007c9c:	1a 00                	sbb    al,BYTE PTR [eax]
9f007c9e:	00 00                	add    BYTE PTR [eax],al
9f007ca0:	12 00                	adc    al,BYTE PTR [eax]
9f007ca2:	01 00                	add    DWORD PTR [eax],eax
9f007ca4:	53                   	push   ebx
9f007ca5:	00 00                	add    BYTE PTR [eax],al
9f007ca7:	00 68 07             	add    BYTE PTR [eax+0x7],ch
9f007caa:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f007cb0:	12 00                	adc    al,BYTE PTR [eax]
9f007cb2:	01 00                	add    DWORD PTR [eax],eax
9f007cb4:	ba 00 00 00 d1       	mov    edx,0xd1000000
9f007cb9:	12 00                	adc    al,BYTE PTR [eax]
9f007cbb:	9f                   	lahf   
9f007cbc:	26 00 00             	add    BYTE PTR es:[eax],al
9f007cbf:	00 12                	add    BYTE PTR [edx],dl
9f007cc1:	00 01                	add    BYTE PTR [ecx],al
9f007cc3:	00 76 01             	add    BYTE PTR [esi+0x1],dh
9f007cc6:	00 00                	add    BYTE PTR [eax],al
9f007cc8:	b8 21 00 9f 23       	mov    eax,0x239f0021
9f007ccd:	00 00                	add    BYTE PTR [eax],al
9f007ccf:	00 12                	add    BYTE PTR [edx],dl
9f007cd1:	00 01                	add    BYTE PTR [ecx],al
9f007cd3:	00 09                	add    BYTE PTR [ecx],cl
9f007cd5:	02 00                	add    al,BYTE PTR [eax]
9f007cd7:	00 45 4c             	add    BYTE PTR [ebp+0x4c],al
9f007cda:	00 9f 1a 00 00 00    	add    BYTE PTR [edi+0x1a],bl
9f007ce0:	12 00                	adc    al,BYTE PTR [eax]
9f007ce2:	01 00                	add    DWORD PTR [eax],eax
9f007ce4:	89 00                	mov    DWORD PTR [eax],eax
9f007ce6:	00 00                	add    BYTE PTR [eax],al
9f007ce8:	eb 0a                	jmp    9f007cf4 <__x86.get_pc_thunk.cx+0x1b20>
9f007cea:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f007cf0:	12 00                	adc    al,BYTE PTR [eax]
9f007cf2:	01 00                	add    DWORD PTR [eax],eax
9f007cf4:	2a 00                	sub    al,BYTE PTR [eax]
9f007cf6:	00 00                	add    BYTE PTR [eax],al
9f007cf8:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007cf9:	05 00 9f 5a 00       	add    eax,0x5a9f00
9f007cfe:	00 00                	add    BYTE PTR [eax],al
9f007d00:	12 00                	adc    al,BYTE PTR [eax]
9f007d02:	01 00                	add    DWORD PTR [eax],eax
9f007d04:	48                   	dec    eax
9f007d05:	01 00                	add    DWORD PTR [eax],eax
9f007d07:	00 89 1c 00 9f 4f    	add    BYTE PTR [ecx+0x4f9f001c],cl
9f007d0d:	00 00                	add    BYTE PTR [eax],al
9f007d0f:	00 12                	add    BYTE PTR [edx],dl
9f007d11:	00 01                	add    BYTE PTR [ecx],al
9f007d13:	00 01                	add    BYTE PTR [ecx],al
9f007d15:	00 00                	add    BYTE PTR [eax],al
9f007d17:	00 00                	add    BYTE PTR [eax],al
9f007d19:	00 00                	add    BYTE PTR [eax],al
9f007d1b:	9f                   	lahf   
9f007d1c:	38 00                	cmp    BYTE PTR [eax],al
9f007d1e:	00 00                	add    BYTE PTR [eax],al
9f007d20:	12 00                	adc    al,BYTE PTR [eax]
9f007d22:	01 00                	add    DWORD PTR [eax],eax
9f007d24:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007d25:	02 00                	add    al,BYTE PTR [eax]
9f007d27:	00 94 4f 00 9f 1d 00 	add    BYTE PTR [edi+ecx*2+0x1d9f00],dl
9f007d2e:	00 00                	add    BYTE PTR [eax],al
9f007d30:	12 00                	adc    al,BYTE PTR [eax]
9f007d32:	01 00                	add    DWORD PTR [eax],eax
9f007d34:	86 02                	xchg   BYTE PTR [edx],al
9f007d36:	00 00                	add    BYTE PTR [eax],al
9f007d38:	26                   	es
9f007d39:	53                   	push   ebx
9f007d3a:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
9f007d40:	12 00                	adc    al,BYTE PTR [eax]
9f007d42:	01 00                	add    DWORD PTR [eax],eax
9f007d44:	8e 00                	mov    es,WORD PTR [eax]
9f007d46:	00 00                	add    BYTE PTR [eax],al
9f007d48:	24 0c                	and    al,0xc
9f007d4a:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f007d50:	12 00                	adc    al,BYTE PTR [eax]
9f007d52:	01 00                	add    DWORD PTR [eax],eax
9f007d54:	21 00                	and    DWORD PTR [eax],eax
9f007d56:	00 00                	add    BYTE PTR [eax],al
9f007d58:	b4 04                	mov    ah,0x4
9f007d5a:	00 9f ba 00 00 00    	add    BYTE PTR [edi+0xba],bl
9f007d60:	12 00                	adc    al,BYTE PTR [eax]
9f007d62:	01 00                	add    DWORD PTR [eax],eax
9f007d64:	c1 01 00             	rol    DWORD PTR [ecx],0x0
9f007d67:	00 fb                	add    bl,bh
9f007d69:	28 00                	sub    BYTE PTR [eax],al
9f007d6b:	9f                   	lahf   
9f007d6c:	21 00                	and    DWORD PTR [eax],eax
9f007d6e:	00 00                	add    BYTE PTR [eax],al
9f007d70:	12 00                	adc    al,BYTE PTR [eax]
9f007d72:	01 00                	add    DWORD PTR [eax],eax

Disassembly of section .dynstr:

9f007d74 <.dynstr>:
9f007d74:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007d77:	72 63                	jb     9f007ddc <__x86.get_pc_thunk.cx+0x1c08>
9f007d79:	68 72 00 73 74       	push   0x74730072
9f007d7e:	72 63                	jb     9f007de3 <__x86.get_pc_thunk.cx+0x1c0f>
9f007d80:	73 70                	jae    9f007df2 <__x86.get_pc_thunk.cx+0x1c1e>
9f007d82:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007d83:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007d86:	72 74                	jb     9f007dfc <__x86.get_pc_thunk.cx+0x1c28>
9f007d88:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007d89:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
9f007d8c:	74 6f                	je     9f007dfd <__x86.get_pc_thunk.cx+0x1c29>
9f007d8e:	61                   	popa   
9f007d8f:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
9f007d92:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007d93:	69 00 6d 6f 76 65    	imul   eax,DWORD PTR [eax],0x65766f6d
9f007d99:	54                   	push   esp
9f007d9a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007d9b:	58                   	pop    eax
9f007d9c:	59                   	pop    ecx
9f007d9d:	00 73 61             	add    BYTE PTR [ebx+0x61],dh
9f007da0:	76 65                	jbe    9f007e07 <__x86.get_pc_thunk.cx+0x1c33>
9f007da2:	43                   	inc    ebx
9f007da3:	75 72                	jne    9f007e17 <__x86.get_pc_thunk.cx+0x1c43>
9f007da5:	73 6f                	jae    9f007e16 <__x86.get_pc_thunk.cx+0x1c42>
9f007da7:	72 50                	jb     9f007df9 <__x86.get_pc_thunk.cx+0x1c25>
9f007da9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007daa:	73 69                	jae    9f007e15 <__x86.get_pc_thunk.cx+0x1c41>
9f007dac:	74 69                	je     9f007e17 <__x86.get_pc_thunk.cx+0x1c43>
9f007dae:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007daf:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007db0:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f007db3:	73 74                	jae    9f007e29 <__x86.get_pc_thunk.cx+0x1c55>
9f007db5:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007db6:	72 65                	jb     9f007e1d <__x86.get_pc_thunk.cx+0x1c49>
9f007db8:	43                   	inc    ebx
9f007db9:	75 72                	jne    9f007e2d <__x86.get_pc_thunk.cx+0x1c59>
9f007dbb:	73 6f                	jae    9f007e2c <__x86.get_pc_thunk.cx+0x1c58>
9f007dbd:	72 50                	jb     9f007e0f <__x86.get_pc_thunk.cx+0x1c3b>
9f007dbf:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007dc0:	73 69                	jae    9f007e2b <__x86.get_pc_thunk.cx+0x1c57>
9f007dc2:	74 69                	je     9f007e2d <__x86.get_pc_thunk.cx+0x1c59>
9f007dc4:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007dc5:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007dc6:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f007dc9:	73 6f                	jae    9f007e3a <__x86.get_pc_thunk.cx+0x1c66>
9f007dcb:	6c                   	ins    BYTE PTR es:[edi],dx
9f007dcc:	76 65                	jbe    9f007e33 <__x86.get_pc_thunk.cx+0x1c5f>
9f007dce:	45                   	inc    ebp
9f007dcf:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007dd0:	76 56                	jbe    9f007e28 <__x86.get_pc_thunk.cx+0x1c54>
9f007dd2:	61                   	popa   
9f007dd3:	72 73                	jb     9f007e48 <__x86.get_pc_thunk.cx+0x1c74>
9f007dd5:	49                   	dec    ecx
9f007dd6:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007dd7:	53                   	push   ebx
9f007dd8:	74 72                	je     9f007e4c <__x86.get_pc_thunk.cx+0x1c78>
9f007dda:	69 6e 67 00 67 65 74 	imul   ebp,DWORD PTR [esi+0x67],0x74656700
9f007de1:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f007de3:	76 00                	jbe    9f007de5 <__x86.get_pc_thunk.cx+0x1c11>
9f007de5:	73 65                	jae    9f007e4c <__x86.get_pc_thunk.cx+0x1c78>
9f007de7:	74 65                	je     9f007e4e <__x86.get_pc_thunk.cx+0x1c7a>
9f007de9:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007dea:	76 00                	jbe    9f007dec <__x86.get_pc_thunk.cx+0x1c18>
9f007dec:	67                   	addr16
9f007ded:	65                   	gs
9f007dee:	74 63                	je     9f007e53 <__x86.get_pc_thunk.cx+0x1c7f>
9f007df0:	77 64                	ja     9f007e56 <__x86.get_pc_thunk.cx+0x1c82>
9f007df2:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f007df5:	74 64                	je     9f007e5b <__x86.get_pc_thunk.cx+0x1c87>
9f007df7:	69 72 00 66 72 65 6f 	imul   esi,DWORD PTR [edx+0x0],0x6f657266
9f007dfe:	70 65                	jo     9f007e65 <__x86.get_pc_thunk.cx+0x1c91>
9f007e00:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007e01:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
9f007e04:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007e05:	73 65                	jae    9f007e6c <__x86.get_pc_thunk.cx+0x1c98>
9f007e07:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f007e0a:	61                   	popa   
9f007e0b:	64 00 77 72          	add    BYTE PTR fs:[edi+0x72],dh
9f007e0f:	69 74 65 00 73 65 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x6b656573
9f007e16:	6b 
9f007e17:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007e1a:	61                   	popa   
9f007e1b:	74 00                	je     9f007e1d <__x86.get_pc_thunk.cx+0x1c49>
9f007e1d:	72 65                	jb     9f007e84 <__x86.get_pc_thunk.cx+0x1cb0>
9f007e1f:	73 6f                	jae    9f007e90 <__x86.get_pc_thunk.cx+0x1cbc>
9f007e21:	6c                   	ins    BYTE PTR es:[edi],dx
9f007e22:	76 65                	jbe    9f007e89 <__x86.get_pc_thunk.cx+0x1cb5>
9f007e24:	50                   	push   eax
9f007e25:	61                   	popa   
9f007e26:	74 68                	je     9f007e90 <__x86.get_pc_thunk.cx+0x1cbc>
9f007e28:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
9f007e2c:	6c                   	ins    BYTE PTR es:[edi],dx
9f007e2d:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f007e30:	74 6c                	je     9f007e9e <__x86.get_pc_thunk.cx+0x1cca>
9f007e32:	69 6e 65 00 75 6e 6c 	imul   ebp,DWORD PTR [esi+0x65],0x6c6e7500
9f007e39:	69 6e 6b 00 70 75 74 	imul   ebp,DWORD PTR [esi+0x6b],0x74757000
9f007e40:	73 00                	jae    9f007e42 <__x86.get_pc_thunk.cx+0x1c6e>
9f007e42:	73 79                	jae    9f007ebd <__x86.get_pc_thunk.cx+0x1ce9>
9f007e44:	73 45                	jae    9f007e8b <__x86.get_pc_thunk.cx+0x1cb7>
9f007e46:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007e47:	74 65                	je     9f007eae <__x86.get_pc_thunk.cx+0x1cda>
9f007e49:	72 5f                	jb     9f007eaa <__x86.get_pc_thunk.cx+0x1cd6>
9f007e4b:	56                   	push   esi
9f007e4c:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
9f007e51:	00 70 75             	add    BYTE PTR [eax+0x75],dh
9f007e54:	74 63                	je     9f007eb9 <__x86.get_pc_thunk.cx+0x1ce5>
9f007e56:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f007e59:	74 63                	je     9f007ebe <__x86.get_pc_thunk.cx+0x1cea>
9f007e5b:	68 61 72 00 67       	push   0x67007261
9f007e60:	65                   	gs
9f007e61:	74 73                	je     9f007ed6 <__x86.get_pc_thunk.cx+0x1d02>
9f007e63:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f007e67:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
9f007e6a:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007e6b:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
9f007e72:	74 
9f007e73:	00 70 72             	add    BYTE PTR [eax+0x72],dh
9f007e76:	69 6e 74 64 00 73 6c 	imul   ebp,DWORD PTR [esi+0x74],0x6c730064
9f007e7d:	65                   	gs
9f007e7e:	65                   	gs
9f007e7f:	70 4d                	jo     9f007ece <__x86.get_pc_thunk.cx+0x1cfa>
9f007e81:	53                   	push   ebx
9f007e82:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
9f007e85:	65                   	gs
9f007e86:	65                   	gs
9f007e87:	70 00                	jo     9f007e89 <__x86.get_pc_thunk.cx+0x1cb5>
9f007e89:	73 6c                	jae    9f007ef7 <__x86.get_pc_thunk.cx+0x1d23>
9f007e8b:	65                   	gs
9f007e8c:	65                   	gs
9f007e8d:	70 54                	jo     9f007ee3 <__x86.get_pc_thunk.cx+0x1d0f>
9f007e8f:	69 63 6b 73 00 6d 6f 	imul   esp,DWORD PTR [ebx+0x6b],0x6f6d0073
9f007e96:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
9f007e9d:	6e 
9f007e9e:	61                   	popa   
9f007e9f:	6c                   	ins    BYTE PTR es:[edi],dx
9f007ea0:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
9f007ea3:	67 6e                	outs   dx,BYTE PTR ds:[si]
9f007ea5:	61                   	popa   
9f007ea6:	6c                   	ins    BYTE PTR es:[edi],dx
9f007ea7:	54                   	push   esp
9f007ea8:	61                   	popa   
9f007ea9:	73 6b                	jae    9f007f16 <__x86.get_pc_thunk.cx+0x1d42>
9f007eab:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
9f007eae:	72 6b                	jb     9f007f1b <__x86.get_pc_thunk.cx+0x1d47>
9f007eb0:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
9f007eb3:	65 63 00             	arpl   WORD PTR gs:[eax],ax
9f007eb6:	65                   	gs
9f007eb7:	78 65                	js     9f007f1e <__x86.get_pc_thunk.cx+0x1d4a>
9f007eb9:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
9f007ebc:	65                   	gs
9f007ebd:	78 65                	js     9f007f24 <__x86.get_pc_thunk.cx+0x1d50>
9f007ebf:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
9f007ec2:	77 61                	ja     9f007f25 <__x86.get_pc_thunk.cx+0x1d51>
9f007ec4:	69 74 70 69 64 00 65 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x78650064
9f007ecb:	78 
9f007ecc:	69 74 00 73 65 74 63 	imul   esi,DWORD PTR [eax+eax*1+0x73],0x77637465
9f007ed3:	77 
9f007ed4:	64 00 73 70          	add    BYTE PTR fs:[ebx+0x70],dh
9f007ed8:	6c                   	ins    BYTE PTR es:[edi],dx
9f007ed9:	69 74 00 63 6d 64 6c 	imul   esi,DWORD PTR [eax+eax*1+0x63],0x696c646d
9f007ee0:	69 
9f007ee1:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007ee2:	65                   	gs
9f007ee3:	54                   	push   esp
9f007ee4:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007ee5:	41                   	inc    ecx
9f007ee6:	72 67                	jb     9f007f4f <__x86.get_pc_thunk.cx+0x1d7b>
9f007ee8:	76 00                	jbe    9f007eea <__x86.get_pc_thunk.cx+0x1d16>
9f007eea:	73 65                	jae    9f007f51 <__x86.get_pc_thunk.cx+0x1d7d>
9f007eec:	74 53                	je     9f007f41 <__x86.get_pc_thunk.cx+0x1d6d>
9f007eee:	54                   	push   esp
9f007eef:	44                   	inc    esp
9f007ef0:	00 74 61 6b          	add    BYTE PTR [ecx+eiz*2+0x6b],dh
9f007ef4:	65                   	gs
9f007ef5:	41                   	inc    ecx
9f007ef6:	44                   	inc    esp
9f007ef7:	75 6d                	jne    9f007f66 <__x86.get_pc_thunk.cx+0x1d92>
9f007ef9:	70 00                	jo     9f007efb <__x86.get_pc_thunk.cx+0x1d27>
9f007efb:	73 65                	jae    9f007f62 <__x86.get_pc_thunk.cx+0x1d8e>
9f007efd:	74 70                	je     9f007f6f <__x86.get_pc_thunk.cx+0x1d9b>
9f007eff:	72 69                	jb     9f007f6a <__x86.get_pc_thunk.cx+0x1d96>
9f007f01:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007f02:	72 69                	jb     9f007f6d <__x86.get_pc_thunk.cx+0x1d99>
9f007f04:	74 79                	je     9f007f7f <__x86.get_pc_thunk.cx+0x1dab>
9f007f06:	00 6d 6d             	add    BYTE PTR [ebp+0x6d],ch
9f007f09:	61                   	popa   
9f007f0a:	70 00                	jo     9f007f0c <__x86.get_pc_thunk.cx+0x1d38>
9f007f0c:	68 65 61 70 42       	push   0x42706165
9f007f11:	61                   	popa   
9f007f12:	73 65                	jae    9f007f79 <__x86.get_pc_thunk.cx+0x1da5>
9f007f14:	00 68 65             	add    BYTE PTR [eax+0x65],ch
9f007f17:	61                   	popa   
9f007f18:	70 43                	jo     9f007f5d <__x86.get_pc_thunk.cx+0x1d89>
9f007f1a:	75 72                	jne    9f007f8e <__x86.get_pc_thunk.cx+0x1dba>
9f007f1c:	72 00                	jb     9f007f1e <__x86.get_pc_thunk.cx+0x1d4a>
9f007f1e:	68 65 61 70 45       	push   0x45706165
9f007f23:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007f24:	64 00 6d 61          	add    BYTE PTR fs:[ebp+0x61],ch
9f007f28:	6c                   	ins    BYTE PTR es:[edi],dx
9f007f29:	6c                   	ins    BYTE PTR es:[edi],dx
9f007f2a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007f2b:	63 00                	arpl   WORD PTR [eax],ax
9f007f2d:	72 65                	jb     9f007f94 <__x86.get_pc_thunk.cx+0x1dc0>
9f007f2f:	61                   	popa   
9f007f30:	6c                   	ins    BYTE PTR es:[edi],dx
9f007f31:	6c                   	ins    BYTE PTR es:[edi],dx
9f007f32:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007f33:	63 00                	arpl   WORD PTR [eax],ax
9f007f35:	66                   	data16
9f007f36:	72 65                	jb     9f007f9d <__x86.get_pc_thunk.cx+0x1dc9>
9f007f38:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
9f007f3c:	6d                   	ins    DWORD PTR es:[edi],dx
9f007f3d:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f007f40:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
9f007f43:	6d                   	ins    DWORD PTR es:[edi],dx
9f007f44:	73 65                	jae    9f007fab <__x86.get_pc_thunk.cx+0x1dd7>
9f007f46:	74 00                	je     9f007f48 <__x86.get_pc_thunk.cx+0x1d74>
9f007f48:	5f                   	pop    edi
9f007f49:	6d                   	ins    DWORD PTR es:[edi],dx
9f007f4a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007f4b:	64                   	fs
9f007f4c:	66 61                	popaw  
9f007f4e:	73 6d                	jae    9f007fbd <__x86.get_pc_thunk.cx+0x1de9>
9f007f50:	00 70 69             	add    BYTE PTR [eax+0x69],dh
9f007f53:	70 65                	jo     9f007fba <__x86.get_pc_thunk.cx+0x1de6>
9f007f55:	00 64 75 70          	add    BYTE PTR [ebp+esi*2+0x70],ah
9f007f59:	33 00                	xor    eax,DWORD PTR [eax]
9f007f5b:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
9f007f5e:	6c                   	ins    BYTE PTR es:[edi],dx
9f007f5f:	64                   	fs
9f007f60:	50                   	push   eax
9f007f61:	72 6f                	jb     9f007fd2 <__x86.get_pc_thunk.cx+0x1dfe>
9f007f63:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
9f007f66:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f007f68:	54                   	push   esp
9f007f69:	00 62 75             	add    BYTE PTR [edx+0x75],ah
9f007f6c:	69 6c 64 41 6c 6c 50 	imul   ebp,DWORD PTR [esp+eiz*2+0x41],0x72506c6c
9f007f73:	72 
9f007f74:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007f75:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
9f007f78:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f007f7a:	54                   	push   esp
9f007f7b:	73 00                	jae    9f007f7d <__x86.get_pc_thunk.cx+0x1da9>
9f007f7d:	73 74                	jae    9f007ff3 <__x86.get_pc_thunk.cx+0x1e1f>
9f007f7f:	72 6c                	jb     9f007fed <__x86.get_pc_thunk.cx+0x1e19>
9f007f81:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f007f83:	00 73 70             	add    BYTE PTR [ebx+0x70],dh
9f007f86:	72 69                	jb     9f007ff1 <__x86.get_pc_thunk.cx+0x1e1d>
9f007f88:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007f89:	74 66                	je     9f007ff1 <__x86.get_pc_thunk.cx+0x1e1d>
9f007f8b:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f007f8e:	73 65                	jae    9f007ff5 <__x86.get_pc_thunk.cx+0x1e21>
9f007f90:	74 52                	je     9f007fe4 <__x86.get_pc_thunk.cx+0x1e10>
9f007f92:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007f93:	77 00                	ja     9f007f95 <__x86.get_pc_thunk.cx+0x1dc1>
9f007f95:	73 74                	jae    9f00800b <__x86.get_pc_thunk.cx+0x1e37>
9f007f97:	72 63                	jb     9f007ffc <__x86.get_pc_thunk.cx+0x1e28>
9f007f99:	61                   	popa   
9f007f9a:	74 00                	je     9f007f9c <__x86.get_pc_thunk.cx+0x1dc8>
9f007f9c:	73 74                	jae    9f008012 <__x86.get_pc_thunk.cx+0x1e3e>
9f007f9e:	72 6e                	jb     9f00800e <__x86.get_pc_thunk.cx+0x1e3a>
9f007fa0:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
9f007fa3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007fa6:	72 63                	jb     9f00800b <__x86.get_pc_thunk.cx+0x1e37>
9f007fa8:	6d                   	ins    DWORD PTR es:[edi],dx
9f007fa9:	70 00                	jo     9f007fab <__x86.get_pc_thunk.cx+0x1dd7>
9f007fab:	73 74                	jae    9f008021 <__x86.get_pc_thunk.cx+0x1e4d>
9f007fad:	72 63                	jb     9f008012 <__x86.get_pc_thunk.cx+0x1e3e>
9f007faf:	70 79                	jo     9f00802a <__x86.get_pc_thunk.cx+0x1e56>
9f007fb1:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007fb4:	72 63                	jb     9f008019 <__x86.get_pc_thunk.cx+0x1e45>
9f007fb6:	70 79                	jo     9f008031 <__x86.get_pc_thunk.cx+0x1e5d>
9f007fb8:	63 00                	arpl   WORD PTR [eax],ax
9f007fba:	73 74                	jae    9f008030 <__x86.get_pc_thunk.cx+0x1e5c>
9f007fbc:	72 69                	jb     9f008027 <__x86.get_pc_thunk.cx+0x1e53>
9f007fbe:	73 6e                	jae    9f00802e <__x86.get_pc_thunk.cx+0x1e5a>
9f007fc0:	75 6d                	jne    9f00802f <__x86.get_pc_thunk.cx+0x1e5b>
9f007fc2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007fc5:	72 6e                	jb     9f008035 <__x86.get_pc_thunk.cx+0x1e61>
9f007fc7:	6c                   	ins    BYTE PTR es:[edi],dx
9f007fc8:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f007fca:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007fcd:	72 6e                	jb     9f00803d <__x86.get_pc_thunk.cx+0x1e69>
9f007fcf:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
9f007fd2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007fd5:	72 6e                	jb     9f008045 <__x86.get_pc_thunk.cx+0x1e71>
9f007fd7:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f007fda:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007fdd:	72 74                	jb     9f008053 <__x86.get_pc_thunk.cx+0x1e7f>
9f007fdf:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007fe0:	75 6c                	jne    9f00804e <__x86.get_pc_thunk.cx+0x1e7a>
9f007fe2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007fe5:	72 6c                	jb     9f008053 <__x86.get_pc_thunk.cx+0x1e7f>
9f007fe7:	65                   	gs
9f007fe8:	66                   	data16
9f007fe9:	74 00                	je     9f007feb <__x86.get_pc_thunk.cx+0x1e17>
9f007feb:	73 74                	jae    9f008061 <__x86.get_pc_thunk.cx+0x1e8d>
9f007fed:	72 74                	jb     9f008063 <__x86.get_pc_thunk.cx+0x1e8f>
9f007fef:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007ff0:	6c                   	ins    BYTE PTR es:[edi],dx
9f007ff1:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007ff4:	72 74                	jb     9f00806a <__x86.get_pc_thunk.cx+0x1e96>
9f007ff6:	72 69                	jb     9f008061 <__x86.get_pc_thunk.cx+0x1e8d>
9f007ff8:	6d                   	ins    DWORD PTR es:[edi],dx
9f007ff9:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f007ffc:	72 72                	jb     9f008070 <__x86.get_pc_thunk.cx+0x1e9c>
9f007ffe:	65                   	gs
9f007fff:	70 6c                	jo     9f00806d <__x86.get_pc_thunk.cx+0x1e99>
9f008001:	61                   	popa   
9f008002:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
9f008005:	73 74                	jae    9f00807b <__x86.get_pc_thunk.cx+0x1ea7>
9f008007:	72 73                	jb     9f00807c <__x86.get_pc_thunk.cx+0x1ea8>
9f008009:	74 72                	je     9f00807d <__x86.get_pc_thunk.cx+0x1ea9>
9f00800b:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f00800f:	63 54 5a 00          	arpl   WORD PTR [edx+ebx*2+0x0],dx
9f008013:	67                   	addr16
9f008014:	65                   	gs
9f008015:	74 74                	je     9f00808b <__x86.get_pc_thunk.cx+0x1eb7>
9f008017:	69 63 6b 73 00 67 6d 	imul   esp,DWORD PTR [ebx+0x6b],0x6d670073
9f00801e:	74 69                	je     9f008089 <__x86.get_pc_thunk.cx+0x1eb5>
9f008020:	6d                   	ins    DWORD PTR es:[edi],dx
9f008021:	65                   	gs
9f008022:	5f                   	pop    edi
9f008023:	72 00                	jb     9f008025 <__x86.get_pc_thunk.cx+0x1e51>
9f008025:	6c                   	ins    BYTE PTR es:[edi],dx
9f008026:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008027:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f00802a:	74 69                	je     9f008095 <__x86.get_pc_thunk.cx+0x1ec1>
9f00802c:	6d                   	ins    DWORD PTR es:[edi],dx
9f00802d:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
9f008032:	61                   	popa   
9f008033:	6c                   	ins    BYTE PTR es:[edi],dx
9f008034:	74 69                	je     9f00809f <__x86.get_pc_thunk.cx+0x1ecb>
9f008036:	6d                   	ins    DWORD PTR es:[edi],dx
9f008037:	65                   	gs
9f008038:	5f                   	pop    edi
9f008039:	72 00                	jb     9f00803b <__x86.get_pc_thunk.cx+0x1e67>
9f00803b:	6d                   	ins    DWORD PTR es:[edi],dx
9f00803c:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
9f008041:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f008044:	74 74                	je     9f0080ba <__x86.get_pc_thunk.cx+0x1ee6>
9f008046:	69                   	.byte 0x69
9f008047:	6d                   	ins    DWORD PTR es:[edi],dx
9f008048:	65                   	gs
	...

Disassembly of section .hash:

9f00804c <.hash>:
9f00804c:	43                   	inc    ebx
9f00804d:	00 00                	add    BYTE PTR [eax],al
9f00804f:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
	...
9f00805f:	00 21                	add    BYTE PTR [ecx],ah
9f008061:	00 00                	add    BYTE PTR [eax],al
9f008063:	00 56 00             	add    BYTE PTR [esi+0x0],dl
9f008066:	00 00                	add    BYTE PTR [eax],al
9f008068:	48                   	dec    eax
9f008069:	00 00                	add    BYTE PTR [eax],al
9f00806b:	00 47 00             	add    BYTE PTR [edi+0x0],al
9f00806e:	00 00                	add    BYTE PTR [eax],al
9f008070:	1f                   	pop    ds
9f008071:	00 00                	add    BYTE PTR [eax],al
9f008073:	00 18                	add    BYTE PTR [eax],bl
9f008075:	00 00                	add    BYTE PTR [eax],al
9f008077:	00 00                	add    BYTE PTR [eax],al
9f008079:	00 00                	add    BYTE PTR [eax],al
9f00807b:	00 23                	add    BYTE PTR [ebx],ah
9f00807d:	00 00                	add    BYTE PTR [eax],al
9f00807f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f008082:	00 00                	add    BYTE PTR [eax],al
9f008084:	4f                   	dec    edi
9f008085:	00 00                	add    BYTE PTR [eax],al
9f008087:	00 55 00             	add    BYTE PTR [ebp+0x0],dl
9f00808a:	00 00                	add    BYTE PTR [eax],al
9f00808c:	1d 00 00 00 3f       	sbb    eax,0x3f000000
9f008091:	00 00                	add    BYTE PTR [eax],al
9f008093:	00 00                	add    BYTE PTR [eax],al
9f008095:	00 00                	add    BYTE PTR [eax],al
9f008097:	00 2b                	add    BYTE PTR [ebx],ch
9f008099:	00 00                	add    BYTE PTR [eax],al
9f00809b:	00 3e                	add    BYTE PTR [esi],bh
9f00809d:	00 00                	add    BYTE PTR [eax],al
9f00809f:	00 15 00 00 00 00    	add    BYTE PTR ds:0x0,dl
9f0080a5:	00 00                	add    BYTE PTR [eax],al
9f0080a7:	00 3c 00             	add    BYTE PTR [eax+eax*1],bh
9f0080aa:	00 00                	add    BYTE PTR [eax],al
9f0080ac:	4e                   	dec    esi
9f0080ad:	00 00                	add    BYTE PTR [eax],al
9f0080af:	00 01                	add    BYTE PTR [ecx],al
9f0080b1:	00 00                	add    BYTE PTR [eax],al
9f0080b3:	00 38                	add    BYTE PTR [eax],bh
9f0080b5:	00 00                	add    BYTE PTR [eax],al
9f0080b7:	00 59 00             	add    BYTE PTR [ecx+0x0],bl
9f0080ba:	00 00                	add    BYTE PTR [eax],al
9f0080bc:	2e 00 00             	add    BYTE PTR cs:[eax],al
9f0080bf:	00 00                	add    BYTE PTR [eax],al
9f0080c1:	00 00                	add    BYTE PTR [eax],al
9f0080c3:	00 46 00             	add    BYTE PTR [esi+0x0],al
9f0080c6:	00 00                	add    BYTE PTR [eax],al
9f0080c8:	00 00                	add    BYTE PTR [eax],al
9f0080ca:	00 00                	add    BYTE PTR [eax],al
9f0080cc:	57                   	push   edi
9f0080cd:	00 00                	add    BYTE PTR [eax],al
9f0080cf:	00 41 00             	add    BYTE PTR [ecx+0x0],al
9f0080d2:	00 00                	add    BYTE PTR [eax],al
9f0080d4:	1e                   	push   ds
9f0080d5:	00 00                	add    BYTE PTR [eax],al
9f0080d7:	00 51 00             	add    BYTE PTR [ecx+0x0],dl
9f0080da:	00 00                	add    BYTE PTR [eax],al
9f0080dc:	1a 00                	sbb    al,BYTE PTR [eax]
9f0080de:	00 00                	add    BYTE PTR [eax],al
9f0080e0:	36 00 00             	add    BYTE PTR ss:[eax],al
9f0080e3:	00 00                	add    BYTE PTR [eax],al
9f0080e5:	00 00                	add    BYTE PTR [eax],al
9f0080e7:	00 44 00 00          	add    BYTE PTR [eax+eax*1+0x0],al
9f0080eb:	00 49 00             	add    BYTE PTR [ecx+0x0],cl
9f0080ee:	00 00                	add    BYTE PTR [eax],al
9f0080f0:	31 00                	xor    DWORD PTR [eax],eax
9f0080f2:	00 00                	add    BYTE PTR [eax],al
9f0080f4:	45                   	inc    ebp
9f0080f5:	00 00                	add    BYTE PTR [eax],al
9f0080f7:	00 53 00             	add    BYTE PTR [ebx+0x0],dl
9f0080fa:	00 00                	add    BYTE PTR [eax],al
9f0080fc:	5a                   	pop    edx
9f0080fd:	00 00                	add    BYTE PTR [eax],al
9f0080ff:	00 32                	add    BYTE PTR [edx],dh
9f008101:	00 00                	add    BYTE PTR [eax],al
9f008103:	00 54 00 00          	add    BYTE PTR [eax+eax*1+0x0],dl
9f008107:	00 52 00             	add    BYTE PTR [edx+0x0],dl
	...
9f00811e:	00 00                	add    BYTE PTR [eax],al
9f008120:	4a                   	dec    edx
	...
9f008129:	00 00                	add    BYTE PTR [eax],al
9f00812b:	00 40 00             	add    BYTE PTR [eax+0x0],al
9f00812e:	00 00                	add    BYTE PTR [eax],al
9f008130:	34 00                	xor    al,0x0
9f008132:	00 00                	add    BYTE PTR [eax],al
9f008134:	0e                   	push   cs
9f008135:	00 00                	add    BYTE PTR [eax],al
9f008137:	00 3a                	add    BYTE PTR [edx],bh
9f008139:	00 00                	add    BYTE PTR [eax],al
9f00813b:	00 00                	add    BYTE PTR [eax],al
9f00813d:	00 00                	add    BYTE PTR [eax],al
9f00813f:	00 4c 00 00          	add    BYTE PTR [eax+eax*1+0x0],cl
9f008143:	00 22                	add    BYTE PTR [edx],ah
9f008145:	00 00                	add    BYTE PTR [eax],al
9f008147:	00 5b 00             	add    BYTE PTR [ebx+0x0],bl
9f00814a:	00 00                	add    BYTE PTR [eax],al
9f00814c:	11 00                	adc    DWORD PTR [eax],eax
9f00814e:	00 00                	add    BYTE PTR [eax],al
9f008150:	3b 00                	cmp    eax,DWORD PTR [eax]
9f008152:	00 00                	add    BYTE PTR [eax],al
9f008154:	17                   	pop    ss
9f008155:	00 00                	add    BYTE PTR [eax],al
9f008157:	00 50 00             	add    BYTE PTR [eax+0x0],dl
9f00815a:	00 00                	add    BYTE PTR [eax],al
9f00815c:	4d                   	dec    ebp
	...
9f008189:	00 00                	add    BYTE PTR [eax],al
9f00818b:	00 05 00 00 00 00    	add    BYTE PTR ds:0x0,al
9f008191:	00 00                	add    BYTE PTR [eax],al
9f008193:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
	...
9f0081aa:	00 00                	add    BYTE PTR [eax],al
9f0081ac:	02 00                	add    al,BYTE PTR [eax]
	...
9f0081b6:	00 00                	add    BYTE PTR [eax],al
9f0081b8:	09 00                	or     DWORD PTR [eax],eax
	...
9f0081c6:	00 00                	add    BYTE PTR [eax],al
9f0081c8:	10 00                	adc    BYTE PTR [eax],al
	...
9f0081d2:	00 00                	add    BYTE PTR [eax],al
9f0081d4:	07                   	pop    es
9f0081d5:	00 00                	add    BYTE PTR [eax],al
9f0081d7:	00 00                	add    BYTE PTR [eax],al
9f0081d9:	00 00                	add    BYTE PTR [eax],al
9f0081db:	00 0b                	add    BYTE PTR [ebx],cl
9f0081dd:	00 00                	add    BYTE PTR [eax],al
9f0081df:	00 00                	add    BYTE PTR [eax],al
9f0081e1:	00 00                	add    BYTE PTR [eax],al
9f0081e3:	00 06                	add    BYTE PTR [esi],al
9f0081e5:	00 00                	add    BYTE PTR [eax],al
9f0081e7:	00 00                	add    BYTE PTR [eax],al
9f0081e9:	00 00                	add    BYTE PTR [eax],al
9f0081eb:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
9f0081ee:	00 00                	add    BYTE PTR [eax],al
9f0081f0:	00 00                	add    BYTE PTR [eax],al
9f0081f2:	00 00                	add    BYTE PTR [eax],al
9f0081f4:	0f 00 00             	sldt   WORD PTR [eax]
9f0081f7:	00 1b                	add    BYTE PTR [ebx],bl
9f0081f9:	00 00                	add    BYTE PTR [eax],al
9f0081fb:	00 08                	add    BYTE PTR [eax],cl
9f0081fd:	00 00                	add    BYTE PTR [eax],al
9f0081ff:	00 00                	add    BYTE PTR [eax],al
9f008201:	00 00                	add    BYTE PTR [eax],al
9f008203:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
	...
9f00820e:	00 00                	add    BYTE PTR [eax],al
9f008210:	0d 00 00 00 27       	or     eax,0x27000000
9f008215:	00 00                	add    BYTE PTR [eax],al
9f008217:	00 00                	add    BYTE PTR [eax],al
9f008219:	00 00                	add    BYTE PTR [eax],al
9f00821b:	00 04 00             	add    BYTE PTR [eax+eax*1],al
9f00821e:	00 00                	add    BYTE PTR [eax],al
9f008220:	00 00                	add    BYTE PTR [eax],al
9f008222:	00 00                	add    BYTE PTR [eax],al
9f008224:	2d 00 00 00 00       	sub    eax,0x0
9f008229:	00 00                	add    BYTE PTR [eax],al
9f00822b:	00 20                	add    BYTE PTR [eax],ah
	...
9f008235:	00 00                	add    BYTE PTR [eax],al
9f008237:	00 30                	add    BYTE PTR [eax],dh
	...
9f008241:	00 00                	add    BYTE PTR [eax],al
9f008243:	00 35 00 00 00 00    	add    BYTE PTR ds:0x0,dh
9f008249:	00 00                	add    BYTE PTR [eax],al
9f00824b:	00 00                	add    BYTE PTR [eax],al
9f00824d:	00 00                	add    BYTE PTR [eax],al
9f00824f:	00 29                	add    BYTE PTR [ecx],ch
9f008251:	00 00                	add    BYTE PTR [eax],al
9f008253:	00 13                	add    BYTE PTR [ebx],dl
9f008255:	00 00                	add    BYTE PTR [eax],al
9f008257:	00 39                	add    BYTE PTR [ecx],bh
9f008259:	00 00                	add    BYTE PTR [eax],al
9f00825b:	00 2f                	add    BYTE PTR [edi],ch
9f00825d:	00 00                	add    BYTE PTR [eax],al
9f00825f:	00 00                	add    BYTE PTR [eax],al
9f008261:	00 00                	add    BYTE PTR [eax],al
9f008263:	00 37                	add    BYTE PTR [edi],dh
9f008265:	00 00                	add    BYTE PTR [eax],al
9f008267:	00 00                	add    BYTE PTR [eax],al
9f008269:	00 00                	add    BYTE PTR [eax],al
9f00826b:	00 3d 00 00 00 00    	add    BYTE PTR ds:0x0,bh
9f008271:	00 00                	add    BYTE PTR [eax],al
9f008273:	00 19                	add    BYTE PTR [ecx],bl
9f008275:	00 00                	add    BYTE PTR [eax],al
9f008277:	00 33                	add    BYTE PTR [ebx],dh
9f008279:	00 00                	add    BYTE PTR [eax],al
9f00827b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00827e:	00 00                	add    BYTE PTR [eax],al
9f008280:	43                   	inc    ebx
9f008281:	00 00                	add    BYTE PTR [eax],al
9f008283:	00 16                	add    BYTE PTR [esi],dl
	...
9f00828d:	00 00                	add    BYTE PTR [eax],al
9f00828f:	00 2a                	add    BYTE PTR [edx],ch
9f008291:	00 00                	add    BYTE PTR [eax],al
9f008293:	00 0a                	add    BYTE PTR [edx],cl
	...
9f0082a1:	00 00                	add    BYTE PTR [eax],al
9f0082a3:	00 26                	add    BYTE PTR [esi],ah
9f0082a5:	00 00                	add    BYTE PTR [eax],al
9f0082a7:	00 25 00 00 00 00    	add    BYTE PTR ds:0x0,ah
9f0082ad:	00 00                	add    BYTE PTR [eax],al
9f0082af:	00 4b 00             	add    BYTE PTR [ebx+0x0],cl
9f0082b2:	00 00                	add    BYTE PTR [eax],al
9f0082b4:	03 00                	add    eax,DWORD PTR [eax]
9f0082b6:	00 00                	add    BYTE PTR [eax],al
9f0082b8:	28 00                	sub    BYTE PTR [eax],al
9f0082ba:	00 00                	add    BYTE PTR [eax],al
9f0082bc:	42                   	inc    edx
9f0082bd:	00 00                	add    BYTE PTR [eax],al
9f0082bf:	00 00                	add    BYTE PTR [eax],al
9f0082c1:	00 00                	add    BYTE PTR [eax],al
9f0082c3:	00 12                	add    BYTE PTR [edx],dl
9f0082c5:	00 00                	add    BYTE PTR [eax],al
9f0082c7:	00 58 00             	add    BYTE PTR [eax+0x0],bl
9f0082ca:	00 00                	add    BYTE PTR [eax],al
9f0082cc:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame:

9f0082d0 <.eh_frame>:
9f0082d0:	14 00                	adc    al,0x0
9f0082d2:	00 00                	add    BYTE PTR [eax],al
9f0082d4:	00 00                	add    BYTE PTR [eax],al
9f0082d6:	00 00                	add    BYTE PTR [eax],al
9f0082d8:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f0082db:	00 01                	add    BYTE PTR [ecx],al
9f0082dd:	7c 08                	jl     9f0082e7 <__x86.get_pc_thunk.cx+0x2113>
9f0082df:	01 1b                	add    DWORD PTR [ebx],ebx
9f0082e1:	0c 04                	or     al,0x4
9f0082e3:	04 88                	add    al,0x88
9f0082e5:	01 00                	add    DWORD PTR [eax],eax
9f0082e7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0082ea:	00 00                	add    BYTE PTR [eax],al
9f0082ec:	1c 00                	sbb    al,0x0
9f0082ee:	00 00                	add    BYTE PTR [eax],al
9f0082f0:	a0 de ff ff 40       	mov    al,ds:0x40ffffde
9f0082f5:	00 00                	add    BYTE PTR [eax],al
9f0082f7:	00 00                	add    BYTE PTR [eax],al
9f0082f9:	0e                   	push   cs
9f0082fa:	08 46 0e             	or     BYTE PTR [esi+0xe],al
9f0082fd:	0c 4a                	or     al,0x4a
9f0082ff:	0f 0b                	ud2    
9f008301:	74 04                	je     9f008307 <__x86.get_pc_thunk.cx+0x2133>
9f008303:	78 00                	js     9f008305 <__x86.get_pc_thunk.cx+0x2131>
9f008305:	3f                   	aas    
9f008306:	1a 3b                	sbb    bh,BYTE PTR [ebx]
9f008308:	2a 32                	sub    dh,BYTE PTR [edx]
9f00830a:	24 22                	and    al,0x22
9f00830c:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame_hdr:

9f008310 <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
9f008310:	01 1b                	add    DWORD PTR [ebx],ebx
9f008312:	03 3b                	add    edi,DWORD PTR [ebx]
9f008314:	c4                   	(bad)  
9f008315:	de ff                	fdivp  st(7),st
9f008317:	ff 9f 00 00 00 f0    	call   FWORD PTR [edi-0x10000000]
9f00831d:	7c ff                	jl     9f00831e <__GNU_EH_FRAME_HDR+0xe>
9f00831f:	ff e0                	jmp    eax
9f008321:	de ff                	fdivp  st(7),st
9f008323:	ff 28                	jmp    FWORD PTR [eax]
9f008325:	7d ff                	jge    9f008326 <__GNU_EH_FRAME_HDR+0x16>
9f008327:	ff 00                	inc    DWORD PTR [eax]
9f008329:	df ff                	(bad)  
9f00832b:	ff 60 7d             	jmp    DWORD PTR [eax+0x7d]
9f00832e:	ff                   	(bad)  
9f00832f:	ff 34 df             	push   DWORD PTR [edi+ebx*8]
9f008332:	ff                   	(bad)  
9f008333:	ff b5 7d ff ff 5c    	push   DWORD PTR [ebp+0x5cffff7d]
9f008339:	df ff                	(bad)  
9f00833b:	ff 0c 7e             	dec    DWORD PTR [esi+edi*2]
9f00833e:	ff                   	(bad)  
9f00833f:	ff 84 df ff ff a3 7e 	inc    DWORD PTR [edi+ebx*8+0x7ea3ffff]
9f008346:	ff                   	(bad)  
9f008347:	ff ac df ff ff 3c 7f 	jmp    FWORD PTR [edi+ebx*8+0x7f3cffff]
9f00834e:	ff                   	(bad)  
9f00834f:	ff e8                	jmp    <internal disassembler error>
9f008351:	df ff                	(bad)  
9f008353:	ff b3 7f ff ff 0c    	push   DWORD PTR [ebx+0xcffff7f]
9f008359:	e0 ff                	loopne 9f00835a <__GNU_EH_FRAME_HDR+0x4a>
9f00835b:	ff 6e 80             	jmp    FWORD PTR [esi-0x80]
9f00835e:	ff                   	(bad)  
9f00835f:	ff 30                	push   DWORD PTR [eax]
9f008361:	e0 ff                	loopne 9f008362 <__GNU_EH_FRAME_HDR+0x52>
9f008363:	ff 2b                	jmp    FWORD PTR [ebx]
9f008365:	81 ff ff 54 e0 ff    	cmp    edi,0xffe054ff
9f00836b:	ff 87 81 ff ff 74    	inc    DWORD PTR [edi+0x74ffff81]
9f008371:	e0 ff                	loopne 9f008372 <__GNU_EH_FRAME_HDR+0x62>
9f008373:	ff a4 81 ff ff 94 e0 	jmp    DWORD PTR [ecx+eax*4-0x1f6b0001]
9f00837a:	ff                   	(bad)  
9f00837b:	ff 5e 82             	call   FWORD PTR [esi-0x7e]
9f00837e:	ff                   	(bad)  
9f00837f:	ff                   	(bad)  
9f008380:	b8 e0 ff ff b8       	mov    eax,0xb8ffffe0
9f008385:	82                   	(bad)  
9f008386:	ff                   	(bad)  
9f008387:	ff dc                	call   <internal disassembler error>
9f008389:	e0 ff                	loopne 9f00838a <__GNU_EH_FRAME_HDR+0x7a>
9f00838b:	ff 14 83             	call   DWORD PTR [ebx+eax*4]
9f00838e:	ff                   	(bad)  
9f00838f:	ff 00                	inc    DWORD PTR [eax]
9f008391:	e1 ff                	loope  9f008392 <__GNU_EH_FRAME_HDR+0x82>
9f008393:	ff 58 84             	call   FWORD PTR [eax-0x7c]
9f008396:	ff                   	(bad)  
9f008397:	ff 2c e1             	jmp    FWORD PTR [ecx+eiz*8]
9f00839a:	ff                   	(bad)  
9f00839b:	ff                   	(bad)  
9f00839c:	78 84                	js     9f008322 <__GNU_EH_FRAME_HDR+0x12>
9f00839e:	ff                   	(bad)  
9f00839f:	ff 4c e1 ff          	dec    DWORD PTR [ecx+eiz*8-0x1]
9f0083a3:	ff 22                	jmp    DWORD PTR [edx]
9f0083a5:	85 ff                	test   edi,edi
9f0083a7:	ff 70 e1             	push   DWORD PTR [eax-0x1f]
9f0083aa:	ff                   	(bad)  
9f0083ab:	ff 45 85             	inc    DWORD PTR [ebp-0x7b]
9f0083ae:	ff                   	(bad)  
9f0083af:	ff 90 e1 ff ff 06    	call   DWORD PTR [eax+0x6ffffe1]
9f0083b5:	87 ff                	xchg   edi,edi
9f0083b7:	ff b4 e1 ff ff 32 87 	push   DWORD PTR [ecx+eiz*8-0x78cd0001]
9f0083be:	ff                   	(bad)  
9f0083bf:	ff d8                	call   <internal disassembler error>
9f0083c1:	e1 ff                	loope  9f0083c2 <__GNU_EH_FRAME_HDR+0xb2>
9f0083c3:	ff 58 87             	call   FWORD PTR [eax-0x79]
9f0083c6:	ff                   	(bad)  
9f0083c7:	ff                   	(bad)  
9f0083c8:	f8                   	clc    
9f0083c9:	e1 ff                	loope  9f0083ca <__GNU_EH_FRAME_HDR+0xba>
9f0083cb:	ff 89 87 ff ff 1c    	dec    DWORD PTR [ecx+0x1cffff87]
9f0083d1:	e2 ff                	loop   9f0083d2 <__GNU_EH_FRAME_HDR+0xc2>
9f0083d3:	ff af 87 ff ff 3c    	jmp    FWORD PTR [edi+0x3cffff87]
9f0083d9:	e2 ff                	loop   9f0083da <__GNU_EH_FRAME_HDR+0xca>
9f0083db:	ff db                	call   <internal disassembler error>
9f0083dd:	87 ff                	xchg   edi,edi
9f0083df:	ff 60 e2             	jmp    DWORD PTR [eax-0x1e]
9f0083e2:	ff                   	(bad)  
9f0083e3:	ff                   	(bad)  
9f0083e4:	fe 87 ff ff 80 e2    	inc    BYTE PTR [edi-0x1d7f0001]
9f0083ea:	ff                   	(bad)  
9f0083eb:	ff 57 88             	call   DWORD PTR [edi-0x78]
9f0083ee:	ff                   	(bad)  
9f0083ef:	ff a4 e2 ff ff ea 88 	jmp    DWORD PTR [edx+eiz*8-0x77150001]
9f0083f6:	ff                   	(bad)  
9f0083f7:	ff cc                	dec    esp
9f0083f9:	e2 ff                	loop   9f0083fa <__GNU_EH_FRAME_HDR+0xea>
9f0083fb:	ff 14 89             	call   DWORD PTR [ecx+ecx*4]
9f0083fe:	ff                   	(bad)  
9f0083ff:	ff f0                	push   eax
9f008401:	e2 ff                	loop   9f008402 <__GNU_EH_FRAME_HDR+0xf2>
9f008403:	ff 34 89             	push   DWORD PTR [ecx+ecx*4]
9f008406:	ff                   	(bad)  
9f008407:	ff 10                	call   DWORD PTR [eax]
9f008409:	e3 ff                	jecxz  9f00840a <__GNU_EH_FRAME_HDR+0xfa>
9f00840b:	ff 69 89             	jmp    FWORD PTR [ecx-0x77]
9f00840e:	ff                   	(bad)  
9f00840f:	ff                   	(bad)  
9f008410:	38 e3                	cmp    bl,ah
9f008412:	ff                   	(bad)  
9f008413:	ff 8f 89 ff ff 58    	dec    DWORD PTR [edi+0x58ffff89]
9f008419:	e3 ff                	jecxz  9f00841a <__GNU_EH_FRAME_HDR+0x10a>
9f00841b:	ff c4                	inc    esp
9f00841d:	89 ff                	mov    edi,edi
9f00841f:	ff 80 e3 ff ff ea    	inc    DWORD PTR [eax-0x1500001d]
9f008425:	89 ff                	mov    edi,edi
9f008427:	ff a0 e3 ff ff 18    	jmp    DWORD PTR [eax+0x18ffffe3]
9f00842d:	8a ff                	mov    bh,bh
9f00842f:	ff c4                	inc    esp
9f008431:	e3 ff                	jecxz  9f008432 <__GNU_EH_FRAME_HDR+0x122>
9f008433:	ff                   	(bad)  
9f008434:	3e                   	ds
9f008435:	8a ff                	mov    bh,bh
9f008437:	ff e4                	jmp    esp
9f008439:	e3 ff                	jecxz  9f00843a <__GNU_EH_FRAME_HDR+0x12a>
9f00843b:	ff 6b 8a             	jmp    FWORD PTR [ebx-0x76]
9f00843e:	ff                   	(bad)  
9f00843f:	ff 08                	dec    DWORD PTR [eax]
9f008441:	e4 ff                	in     al,0xff
9f008443:	ff 8e 8a ff ff 28    	dec    DWORD PTR [esi+0x28ffff8a]
9f008449:	e4 ff                	in     al,0xff
9f00844b:	ff b7 8d ff ff 4c    	push   DWORD PTR [edi+0x4cffff8d]
9f008451:	e4 ff                	in     al,0xff
9f008453:	ff e0                	jmp    eax
9f008455:	8d                   	(bad)  
9f008456:	ff                   	(bad)  
9f008457:	ff 70 e4             	push   DWORD PTR [eax-0x1c]
9f00845a:	ff                   	(bad)  
9f00845b:	ff 00                	inc    DWORD PTR [eax]
9f00845d:	8e ff                	mov    ?,edi
9f00845f:	ff 90 e4 ff ff c1    	call   DWORD PTR [eax-0x3e00001c]
9f008465:	8f                   	(bad)  
9f008466:	ff                   	(bad)  
9f008467:	ff b4 e4 ff ff e7 8f 	push   DWORD PTR [esp+eiz*8-0x70180001]
9f00846e:	ff                   	(bad)  
9f00846f:	ff d4                	call   esp
9f008471:	e4 ff                	in     al,0xff
9f008473:	ff 10                	call   DWORD PTR [eax]
9f008475:	90                   	nop
9f008476:	ff                   	(bad)  
9f008477:	ff                   	(bad)  
9f008478:	f8                   	clc    
9f008479:	e4 ff                	in     al,0xff
9f00847b:	ff 36                	push   DWORD PTR [esi]
9f00847d:	90                   	nop
9f00847e:	ff                   	(bad)  
9f00847f:	ff 1c e5 ff ff 79 90 	call   FWORD PTR [eiz*8-0x6f860001]
9f008486:	ff                   	(bad)  
9f008487:	ff 40 e5             	inc    DWORD PTR [eax-0x1b]
9f00848a:	ff                   	(bad)  
9f00848b:	ff                   	(bad)  
9f00848c:	bc 90 ff ff 64       	mov    esp,0x64ffff90
9f008491:	e5 ff                	in     eax,0xff
9f008493:	ff                   	(bad)  
9f008494:	7c 91                	jl     9f008427 <__GNU_EH_FRAME_HDR+0x117>
9f008496:	ff                   	(bad)  
9f008497:	ff 88 e5 ff ff b6    	dec    DWORD PTR [eax-0x4900001b]
9f00849d:	91                   	xchg   ecx,eax
9f00849e:	ff                   	(bad)  
9f00849f:	ff b0 e5 ff ff f2    	push   DWORD PTR [eax-0xd00001b]
9f0084a5:	91                   	xchg   ecx,eax
9f0084a6:	ff                   	(bad)  
9f0084a7:	ff d8                	call   <internal disassembler error>
9f0084a9:	e5 ff                	in     eax,0xff
9f0084ab:	ff 30                	push   DWORD PTR [eax]
9f0084ad:	92                   	xchg   edx,eax
9f0084ae:	ff                   	(bad)  
9f0084af:	ff 00                	inc    DWORD PTR [eax]
9f0084b1:	e6 ff                	out    0xff,al
9f0084b3:	ff 70 92             	push   DWORD PTR [eax-0x6e]
9f0084b6:	ff                   	(bad)  
9f0084b7:	ff 28                	jmp    FWORD PTR [eax]
9f0084b9:	e6 ff                	out    0xff,al
9f0084bb:	ff b2 92 ff ff 50    	push   DWORD PTR [edx+0x50ffff92]
9f0084c1:	e6 ff                	out    0xff,al
9f0084c3:	ff                   	(bad)  
9f0084c4:	7d 93                	jge    9f008459 <__GNU_EH_FRAME_HDR+0x149>
9f0084c6:	ff                   	(bad)  
9f0084c7:	ff 74 e6 ff          	push   DWORD PTR [esi+eiz*8-0x1]
9f0084cb:	ff a0 93 ff ff 98    	jmp    DWORD PTR [eax-0x6700006d]
9f0084d1:	e6 ff                	out    0xff,al
9f0084d3:	ff                   	(bad)  
9f0084d4:	f9                   	stc    
9f0084d5:	93                   	xchg   ebx,eax
9f0084d6:	ff                   	(bad)  
9f0084d7:	ff                   	(bad)  
9f0084d8:	bc e6 ff ff 4d       	mov    esp,0x4dffffe6
9f0084dd:	94                   	xchg   esp,eax
9f0084de:	ff                   	(bad)  
9f0084df:	ff e0                	jmp    eax
9f0084e1:	e6 ff                	out    0xff,al
9f0084e3:	ff a1 94 ff ff 04    	jmp    DWORD PTR [ecx+0x4ffff94]
9f0084e9:	e7 ff                	out    0xff,eax
9f0084eb:	ff d5                	call   ebp
9f0084ed:	94                   	xchg   esp,eax
9f0084ee:	ff                   	(bad)  
9f0084ef:	ff 24 e7             	jmp    DWORD PTR [edi+eiz*8]
9f0084f2:	ff                   	(bad)  
9f0084f3:	ff 0c 95 ff ff 44 e7 	dec    DWORD PTR [edx*4-0x18bb0001]
9f0084fa:	ff                   	(bad)  
9f0084fb:	ff 43 95             	inc    DWORD PTR [ebx-0x6b]
9f0084fe:	ff                   	(bad)  
9f0084ff:	ff 64 e7 ff          	jmp    DWORD PTR [edi+eiz*8-0x1]
9f008503:	ff cb                	dec    ebx
9f008505:	95                   	xchg   ebp,eax
9f008506:	ff                   	(bad)  
9f008507:	ff 8c e7 ff ff 3b 96 	dec    DWORD PTR [edi+eiz*8-0x69c40001]
9f00850e:	ff                   	(bad)  
9f00850f:	ff b4 e7 ff ff ab 96 	push   DWORD PTR [edi+eiz*8-0x69540001]
9f008516:	ff                   	(bad)  
9f008517:	ff dc                	call   <internal disassembler error>
9f008519:	e7 ff                	out    0xff,eax
9f00851b:	ff c8                	dec    eax
9f00851d:	96                   	xchg   esi,eax
9f00851e:	ff                   	(bad)  
9f00851f:	ff                   	(bad)  
9f008520:	fc                   	cld    
9f008521:	e7 ff                	out    0xff,eax
9f008523:	ff f1                	push   ecx
9f008525:	96                   	xchg   esi,eax
9f008526:	ff                   	(bad)  
9f008527:	ff 1c e8             	call   FWORD PTR [eax+ebp*8]
9f00852a:	ff                   	(bad)  
9f00852b:	ff 16                	call   DWORD PTR [esi]
9f00852d:	97                   	xchg   edi,eax
9f00852e:	ff                   	(bad)  
9f00852f:	ff                   	(bad)  
9f008530:	3c e8                	cmp    al,0xe8
9f008532:	ff                   	(bad)  
9f008533:	ff                   	(bad)  
9f008534:	39 97 ff ff 5c e8    	cmp    DWORD PTR [edi-0x17a30001],edx
9f00853a:	ff                   	(bad)  
9f00853b:	ff 85 97 ff ff 7c    	inc    DWORD PTR [ebp+0x7cffff97]
9f008541:	e8 ff ff 79 99       	call   387a8545 <sysEnter_Vector+0x38678545>
9f008546:	ff                   	(bad)  
9f008547:	ff a0 e8 ff ff c8    	jmp    DWORD PTR [eax-0x37000018]
9f00854d:	99                   	cdq    
9f00854e:	ff                   	(bad)  
9f00854f:	ff c0                	inc    eax
9f008551:	e8 ff ff e4 99       	call   38e58555 <sysEnter_Vector+0x38d28555>
9f008556:	ff                   	(bad)  
9f008557:	ff e0                	jmp    eax
9f008559:	e8 ff ff 04 9a       	call   3905855d <sysEnter_Vector+0x38f2855d>
9f00855e:	ff                   	(bad)  
9f00855f:	ff 00                	inc    DWORD PTR [eax]
9f008561:	e9 ff ff 24 9a       	jmp    39258565 <sysEnter_Vector+0x39128565>
9f008566:	ff                   	(bad)  
9f008567:	ff 20                	jmp    DWORD PTR [eax]
9f008569:	e9 ff ff 68 9b       	jmp    3a69856d <sysEnter_Vector+0x3a56856d>
9f00856e:	ff                   	(bad)  
9f00856f:	ff 40 e9             	inc    DWORD PTR [eax-0x17]
9f008572:	ff                   	(bad)  
9f008573:	ff 88 9b ff ff 60    	dec    DWORD PTR [eax+0x60ffff9b]
9f008579:	e9 ff ff 85 9e       	jmp    3d86857d <sysEnter_Vector+0x3d73857d>
9f00857e:	ff                   	(bad)  
9f00857f:	ff 8c e9 ff ff a8 9e 	dec    DWORD PTR [ecx+ebp*8-0x61570001]
9f008586:	ff                   	(bad)  
9f008587:	ff ac e9 ff ff cb 9e 	jmp    FWORD PTR [ecx+ebp*8-0x61340001]
9f00858e:	ff                   	(bad)  
9f00858f:	ff cc                	dec    esp
9f008591:	e9 ff ff e8 9e       	jmp    3de98595 <sysEnter_Vector+0x3dd68595>
9f008596:	ff                   	(bad)  
9f008597:	ff ec                	jmp    <internal disassembler error>
9f008599:	e9 ff ff 08 9f       	jmp    3e09859d <sysEnter_Vector+0x3df6859d>
9f00859e:	ff                   	(bad)  
9f00859f:	ff 0c ea             	dec    DWORD PTR [edx+ebp*8]
9f0085a2:	ff                   	(bad)  
9f0085a3:	ff                   	(bad)  
9f0085a4:	7c 9f                	jl     9f008545 <__GNU_EH_FRAME_HDR+0x235>
9f0085a6:	ff                   	(bad)  
9f0085a7:	ff 30                	push   DWORD PTR [eax]
9f0085a9:	ea ff ff dc 9f ff ff 	jmp    0xffff:0x9fdcffff
9f0085b0:	54                   	push   esp
9f0085b1:	ea ff ff 63 a0 ff ff 	jmp    0xffff:0xa063ffff
9f0085b8:	74 ea                	je     9f0085a4 <__GNU_EH_FRAME_HDR+0x294>
9f0085ba:	ff                   	(bad)  
9f0085bb:	ff d6                	call   esi
9f0085bd:	a0 ff ff 98 ea       	mov    al,ds:0xea98ffff
9f0085c2:	ff                   	(bad)  
9f0085c3:	ff 5a a1             	call   FWORD PTR [edx-0x5f]
9f0085c6:	ff                   	(bad)  
9f0085c7:	ff                   	(bad)  
9f0085c8:	b8 ea ff ff e5       	mov    eax,0xe5ffffea
9f0085cd:	a1 ff ff dc ea       	mov    eax,ds:0xeadcffff
9f0085d2:	ff                   	(bad)  
9f0085d3:	ff a5 a4 ff ff 00    	jmp    DWORD PTR [ebp+0xffffa4]
9f0085d9:	eb ff                	jmp    9f0085da <__GNU_EH_FRAME_HDR+0x2ca>
9f0085db:	ff c5                	inc    ebp
9f0085dd:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f0085de:	ff                   	(bad)  
9f0085df:	ff 20                	jmp    DWORD PTR [eax]
9f0085e1:	eb ff                	jmp    9f0085e2 <__GNU_EH_FRAME_HDR+0x2d2>
9f0085e3:	ff c8                	dec    eax
9f0085e5:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f0085e6:	ff                   	(bad)  
9f0085e7:	ff 44 eb ff          	inc    DWORD PTR [ebx+ebp*8-0x1]
9f0085eb:	ff eb                	jmp    <internal disassembler error>
9f0085ed:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f0085ee:	ff                   	(bad)  
9f0085ef:	ff 64 eb ff          	jmp    DWORD PTR [ebx+ebp*8-0x1]
9f0085f3:	ff 0c a6             	dec    DWORD PTR [esi+eiz*4]
9f0085f6:	ff                   	(bad)  
9f0085f7:	ff 84 eb ff ff 40 a6 	inc    DWORD PTR [ebx+ebp*8-0x59bf0001]
9f0085fe:	ff                   	(bad)  
9f0085ff:	ff a8 eb ff ff db    	jmp    FWORD PTR [eax-0x24000015]
9f008605:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
9f008606:	ff                   	(bad)  
9f008607:	ff c8                	dec    eax
9f008609:	eb ff                	jmp    9f00860a <__GNU_EH_FRAME_HDR+0x2fa>
9f00860b:	ff                   	(bad)  
9f00860c:	fc                   	cld    
9f00860d:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
9f00860e:	ff                   	(bad)  
9f00860f:	ff e8                	jmp    <internal disassembler error>
9f008611:	eb ff                	jmp    9f008612 <__GNU_EH_FRAME_HDR+0x302>
9f008613:	ff c3                	inc    ebx
9f008615:	a8 ff                	test   al,0xff
9f008617:	ff 08                	dec    DWORD PTR [eax]
9f008619:	ec                   	in     al,dx
9f00861a:	ff                   	(bad)  
9f00861b:	ff e4                	jmp    esp
9f00861d:	a8 ff                	test   al,0xff
9f00861f:	ff 28                	jmp    FWORD PTR [eax]
9f008621:	ec                   	in     al,dx
9f008622:	ff                   	(bad)  
9f008623:	ff 0d a9 ff ff 4c    	dec    DWORD PTR ds:0x4cffffa9
9f008629:	ec                   	in     al,dx
9f00862a:	ff                   	(bad)  
9f00862b:	ff                   	(bad)  
9f00862c:	3c a9                	cmp    al,0xa9
9f00862e:	ff                   	(bad)  
9f00862f:	ff 70 ec             	push   DWORD PTR [eax-0x14]
9f008632:	ff                   	(bad)  
9f008633:	ff b5 ac ff ff 9c    	push   DWORD PTR [ebp-0x63000054]
9f008639:	ec                   	in     al,dx
9f00863a:	ff                   	(bad)  
9f00863b:	ff da                	call   <internal disassembler error>
9f00863d:	ac                   	lods   al,BYTE PTR ds:[esi]
9f00863e:	ff                   	(bad)  
9f00863f:	ff                   	(bad)  
9f008640:	bc ec ff ff 54       	mov    esp,0x54ffffec
9f008645:	af                   	scas   eax,DWORD PTR es:[edi]
9f008646:	ff                   	(bad)  
9f008647:	ff e8                	jmp    <internal disassembler error>
9f008649:	ec                   	in     al,dx
9f00864a:	ff                   	(bad)  
9f00864b:	ff 92 af ff ff 0c    	call   DWORD PTR [edx+0xcffffaf]
9f008651:	ed                   	in     eax,dx
9f008652:	ff                   	(bad)  
9f008653:	ff 4f b2             	dec    DWORD PTR [edi-0x4e]
9f008656:	ff                   	(bad)  
9f008657:	ff 30                	push   DWORD PTR [eax]
9f008659:	ed                   	in     eax,dx
9f00865a:	ff                   	(bad)  
9f00865b:	ff b3 b2 ff ff 54    	push   DWORD PTR [ebx+0x54ffffb2]
9f008661:	ed                   	in     eax,dx
9f008662:	ff                   	(bad)  
9f008663:	ff                   	(bad)  
9f008664:	fc                   	cld    
9f008665:	b4 ff                	mov    ah,0xff
9f008667:	ff 80 ed ff ff 16    	inc    DWORD PTR [eax+0x16ffffed]
9f00866d:	b6 ff                	mov    dh,0xff
9f00866f:	ff a0 ed ff ff 34    	jmp    DWORD PTR [eax+0x34ffffed]
9f008675:	b8 ff ff d0 ed       	mov    eax,0xedd0ffff
9f00867a:	ff                   	(bad)  
9f00867b:	ff                   	(bad)  
9f00867c:	39 bc ff ff f4 ed ff 	cmp    DWORD PTR [edi+edi*8-0x120b01],edi
9f008683:	ff e2                	jmp    edx
9f008685:	bc ff ff 18 ee       	mov    esp,0xee18ffff
9f00868a:	ff                   	(bad)  
9f00868b:	ff 8c bd ff ff 38 ee 	dec    DWORD PTR [ebp+edi*4-0x11c70001]
9f008692:	ff                   	(bad)  
9f008693:	ff a2 bf ff ff 5c    	jmp    DWORD PTR [edx+0x5cffffbf]
9f008699:	ee                   	out    dx,al
9f00869a:	ff                   	(bad)  
9f00869b:	ff                   	(bad)  
9f00869c:	78 c4                	js     9f008662 <__GNU_EH_FRAME_HDR+0x352>
9f00869e:	ff                   	(bad)  
9f00869f:	ff 88 ee ff ff ab    	dec    DWORD PTR [eax-0x54000012]
9f0086a5:	c4                   	(bad)  
9f0086a6:	ff                   	(bad)  
9f0086a7:	ff a8 ee ff ff e8    	jmp    FWORD PTR [eax-0x17000012]
9f0086ad:	c4                   	(bad)  
9f0086ae:	ff                   	(bad)  
9f0086af:	ff c8                	dec    eax
9f0086b1:	ee                   	out    dx,al
9f0086b2:	ff                   	(bad)  
9f0086b3:	ff 25 c5 ff ff e8    	jmp    DWORD PTR ds:0xe8ffffc5
9f0086b9:	ee                   	out    dx,al
9f0086ba:	ff                   	(bad)  
9f0086bb:	ff 58 c5             	call   FWORD PTR [eax-0x3b]
9f0086be:	ff                   	(bad)  
9f0086bf:	ff 1c ef             	call   FWORD PTR [edi+ebp*8]
9f0086c2:	ff                   	(bad)  
9f0086c3:	ff dc                	call   <internal disassembler error>
9f0086c5:	c5 ff ff             	(bad)  
9f0086c8:	40                   	inc    eax
9f0086c9:	ef                   	out    dx,eax
9f0086ca:	ff                   	(bad)  
9f0086cb:	ff 1a                	call   FWORD PTR [edx]
9f0086cd:	c6                   	(bad)  
9f0086ce:	ff                   	(bad)  
9f0086cf:	ff 64 ef ff          	jmp    DWORD PTR [edi+ebp*8-0x1]
9f0086d3:	ff 58 c6             	call   FWORD PTR [eax-0x3a]
9f0086d6:	ff                   	(bad)  
9f0086d7:	ff 88 ef ff ff c7    	dec    DWORD PTR [eax-0x38000011]
9f0086dd:	c6                   	(bad)  
9f0086de:	ff                   	(bad)  
9f0086df:	ff ac ef ff ff 0e c7 	jmp    FWORD PTR [edi+ebp*8-0x38f10001]
9f0086e6:	ff                   	(bad)  
9f0086e7:	ff d0                	call   eax
9f0086e9:	ef                   	out    dx,eax
9f0086ea:	ff                   	(bad)  
9f0086eb:	ff 34 c7             	push   DWORD PTR [edi+eax*8]
9f0086ee:	ff                   	(bad)  
9f0086ef:	ff f0                	push   eax
9f0086f1:	ef                   	out    dx,eax
9f0086f2:	ff                   	(bad)  
9f0086f3:	ff 92 c7 ff ff 18    	call   DWORD PTR [edx+0x18ffffc7]
9f0086f9:	f0 ff                	lock (bad) 
9f0086fb:	ff b0 c7 ff ff 38    	push   DWORD PTR [eax+0x38ffffc7]
9f008701:	f0 ff                	lock (bad) 
9f008703:	ff f0                	push   eax
9f008705:	c7                   	(bad)  
9f008706:	ff                   	(bad)  
9f008707:	ff 58 f0             	call   FWORD PTR [eax-0x10]
9f00870a:	ff                   	(bad)  
9f00870b:	ff 30                	push   DWORD PTR [eax]
9f00870d:	c8 ff ff 78          	enter  0xffff,0x78
9f008711:	f0 ff                	lock (bad) 
9f008713:	ff                   	(bad)  
9f008714:	78 c8                	js     9f0086de <__GNU_EH_FRAME_HDR+0x3ce>
9f008716:	ff                   	(bad)  
9f008717:	ff 98 f0 ff ff a8    	call   FWORD PTR [eax-0x57000010]
9f00871d:	c8 ff ff b8          	enter  0xffff,0xb8
9f008721:	f0 ff                	lock (bad) 
9f008723:	ff 04 c9             	inc    DWORD PTR [ecx+ecx*8]
9f008726:	ff                   	(bad)  
9f008727:	ff d8                	call   <internal disassembler error>
9f008729:	f0 ff                	lock (bad) 
9f00872b:	ff 35 c9 ff ff f8    	push   DWORD PTR ds:0xf8ffffc9
9f008731:	f0 ff                	lock (bad) 
9f008733:	ff 4f c9             	dec    DWORD PTR [edi-0x37]
9f008736:	ff                   	(bad)  
9f008737:	ff 18                	call   FWORD PTR [eax]
9f008739:	f1                   	icebp  
9f00873a:	ff                   	(bad)  
9f00873b:	ff 88 c9 ff ff 38    	dec    DWORD PTR [eax+0x38ffffc9]
9f008741:	f1                   	icebp  
9f008742:	ff                   	(bad)  
9f008743:	ff a8 c9 ff ff 58    	jmp    FWORD PTR [eax+0x58ffffc9]
9f008749:	f1                   	icebp  
9f00874a:	ff                   	(bad)  
9f00874b:	ff 0f                	dec    DWORD PTR [edi]
9f00874d:	ca ff ff             	retf   0xffff
9f008750:	78 f1                	js     9f008743 <__GNU_EH_FRAME_HDR+0x433>
9f008752:	ff                   	(bad)  
9f008753:	ff                   	(bad)  
9f008754:	78 ca                	js     9f008720 <__GNU_EH_FRAME_HDR+0x410>
9f008756:	ff                   	(bad)  
9f008757:	ff 98 f1 ff ff e4    	call   FWORD PTR [eax-0x1b00000f]
9f00875d:	ca ff ff             	retf   0xffff
9f008760:	b8 f1 ff ff 04       	mov    eax,0x4fffff1
9f008765:	cb                   	retf   
9f008766:	ff                   	(bad)  
9f008767:	ff d8                	call   <internal disassembler error>
9f008769:	f1                   	icebp  
9f00876a:	ff                   	(bad)  
9f00876b:	ff 84 cc ff ff 08 f2 	inc    DWORD PTR [esp+ecx*8-0xdf70001]
9f008772:	ff                   	(bad)  
9f008773:	ff a4 cc ff ff 28 f2 	jmp    DWORD PTR [esp+ecx*8-0xdd70001]
9f00877a:	ff                   	(bad)  
9f00877b:	ff 40 ce             	inc    DWORD PTR [eax-0x32]
9f00877e:	ff                   	(bad)  
9f00877f:	ff 58 f2             	call   FWORD PTR [eax-0xe]
9f008782:	ff                   	(bad)  
9f008783:	ff d6                	call   esi
9f008785:	ce                   	into   
9f008786:	ff                   	(bad)  
9f008787:	ff                   	(bad)  
9f008788:	7c f2                	jl     9f00877c <__GNU_EH_FRAME_HDR+0x46c>
9f00878a:	ff                   	(bad)  
9f00878b:	ff                   	(bad)  
9f00878c:	f8                   	clc    
9f00878d:	ce                   	into   
9f00878e:	ff                   	(bad)  
9f00878f:	ff 9c f2 ff ff 16 d0 	call   FWORD PTR [edx+esi*8-0x2fe90001]
9f008796:	ff                   	(bad)  
9f008797:	ff c8                	dec    eax
9f008799:	f2 ff                	repnz (bad) 
9f00879b:	ff                   	(bad)  
9f00879c:	3c d0                	cmp    al,0xd0
9f00879e:	ff                   	(bad)  
9f00879f:	ff e8                	jmp    <internal disassembler error>
9f0087a1:	f2 ff                	repnz (bad) 
9f0087a3:	ff da                	call   <internal disassembler error>
9f0087a5:	d0 ff                	sar    bh,1
9f0087a7:	ff 10                	call   DWORD PTR [eax]
9f0087a9:	f3 ff                	repz (bad) 
9f0087ab:	ff 48 d1             	dec    DWORD PTR [eax-0x2f]
9f0087ae:	ff                   	(bad)  
9f0087af:	ff                   	(bad)  
9f0087b0:	38 f3                	cmp    bl,dh
9f0087b2:	ff                   	(bad)  
9f0087b3:	ff 68 d1             	jmp    FWORD PTR [eax-0x2f]
9f0087b6:	ff                   	(bad)  
9f0087b7:	ff 58 f3             	call   FWORD PTR [eax-0xd]
9f0087ba:	ff                   	(bad)  
9f0087bb:	ff ac d1 ff ff 80 f3 	jmp    FWORD PTR [ecx+edx*8-0xc7f0001]
9f0087c2:	ff                   	(bad)  
9f0087c3:	ff c5                	inc    ebp
9f0087c5:	d4 ff                	aam    0xff
9f0087c7:	ff a8 f3 ff ff e2    	jmp    FWORD PTR [eax-0x1d00000d]
9f0087cd:	d4 ff                	aam    0xff
9f0087cf:	ff c8                	dec    eax
9f0087d1:	f3 ff                	repz (bad) 
9f0087d3:	ff 1f                	call   FWORD PTR [edi]
9f0087d5:	d5 ff                	aad    0xff
9f0087d7:	ff e8                	jmp    <internal disassembler error>
9f0087d9:	f3 ff                	repz (bad) 
9f0087db:	ff 54 d5 ff          	call   DWORD PTR [ebp+edx*8-0x1]
9f0087df:	ff 08                	dec    DWORD PTR [eax]
9f0087e1:	f4                   	hlt    
9f0087e2:	ff                   	(bad)  
9f0087e3:	ff 71 d5             	push   DWORD PTR [ecx-0x2b]
9f0087e6:	ff                   	(bad)  
9f0087e7:	ff 28                	jmp    FWORD PTR [eax]
9f0087e9:	f4                   	hlt    
9f0087ea:	ff                   	(bad)  
9f0087eb:	ff c8                	dec    eax
9f0087ed:	dd ff                	(bad)  
9f0087ef:	ff 58 f4             	call   FWORD PTR [eax-0xc]
9f0087f2:	ff                   	(bad)  
9f0087f3:	ff 35 de ff ff 80    	push   DWORD PTR ds:0x80ffffde
9f0087f9:	f4                   	hlt    
9f0087fa:	ff                   	(bad)  
9f0087fb:	ff 76 de             	push   DWORD PTR [esi-0x22]
9f0087fe:	ff                   	(bad)  
9f0087ff:	ff 20                	jmp    DWORD PTR [eax]
9f008801:	df ff                	(bad)  
9f008803:	ff c0                	inc    eax
9f008805:	de ff                	fdivp  st(7),st
9f008807:	ff d4                	call   esp
9f008809:	df ff                	(bad)  
9f00880b:	ff c4                	inc    esp
9f00880d:	de ff                	fdivp  st(7),st
9f00880f:	ff 08                	dec    DWORD PTR [eax]
9f008811:	ef                   	out    dx,eax
9f008812:	ff                   	(bad)  
9f008813:	ff                   	.byte 0xff

Disassembly of section .rodata:

9f008820 <ansiEscSeq>:
9f008820:	1b 5b 00             	sbb    ebx,DWORD PTR [ebx+0x0]
9f008823:	3b 00                	cmp    eax,DWORD PTR [eax]
9f008825:	48                   	dec    eax
9f008826:	00 25 73 00 73 00    	add    BYTE PTR ds:0x730073,ah
9f00882c:	75 00                	jne    9f00882e <ansiEscSeq+0xe>
9f00882e:	24 00                	and    al,0x0
9f008830:	3d 00 50 41 54       	cmp    eax,0x54415000
9f008835:	48                   	dec    eax
9f008836:	00 2f                	add    BYTE PTR [edi],ch
9f008838:	00 0a                	add    BYTE PTR [edx],cl
9f00883a:	00 53 74             	add    BYTE PTR [ebx+0x74],dl
9f00883d:	72 65                	jb     9f0088a4 <ansiEscSeq+0x84>
9f00883f:	61                   	popa   
9f008840:	6d                   	ins    DWORD PTR es:[edi],dx
9f008841:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
9f008847:	74 20                	je     9f008869 <ansiEscSeq+0x49>
9f008849:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
9f008850:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f008851:	74 65                	je     9f0088b8 <ansiEscSeq+0x98>
9f008853:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f008856:	00 00                	add    BYTE PTR [eax],al
9f008858:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00885a:	2a 6c 69 62          	sub    ch,BYTE PTR [ecx+ebp*2+0x62]
9f00885e:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
9f008861:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f008862:	69 74 20 63 61 6c 6c 	imul   esi,DWORD PTR [eax+eiz*1+0x63],0x656c6c61
9f008869:	65 
9f00886a:	64 0a 2a             	or     ch,BYTE PTR fs:[edx]
9f00886d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00886f:	00 2a                	add    BYTE PTR [edx],ch
9f008871:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008873:	6c                   	ins    BYTE PTR es:[edi],dx
9f008874:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f00887b:	74 20                	je     9f00889d <ansiEscSeq+0x7d>
9f00887d:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f008880:	70 6c                	jo     9f0088ee <ansiEscSeq+0xce>
9f008882:	65                   	gs
9f008883:	74 65                	je     9f0088ea <ansiEscSeq+0xca>
9f008885:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f008888:	6c                   	ins    BYTE PTR es:[edi],dx
9f008889:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f008890:	74 20                	je     9f0088b2 <ansiEscSeq+0x92>
9f008892:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f008895:	6c                   	ins    BYTE PTR es:[edi],dx
9f008896:	65 64 20 70 72       	gs and BYTE PTR fs:gs:[eax+0x72],dh
9f00889b:	65                   	gs
9f00889c:	76 69                	jbe    9f008907 <ansiEscSeq+0xe7>
9f00889e:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00889f:	75 73                	jne    9f008914 <ansiEscSeq+0xf4>
9f0088a1:	6c                   	ins    BYTE PTR es:[edi],dx
9f0088a2:	79 2c                	jns    9f0088d0 <ansiEscSeq+0xb0>
9f0088a4:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f0088a7:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x6c000a67
9f0088ae:	6c 
9f0088af:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f0088b6:	65 63 20             	arpl   WORD PTR gs:[eax],sp
9f0088b9:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0088bb:	72 20                	jb     9f0088dd <ansiEscSeq+0xbd>
9f0088bd:	25 73 0a 00 20       	and    eax,0x20000a73
9f0088c2:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f0088c6:	63 3a                	arpl   WORD PTR [edx],di
9f0088c8:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f0088cb:	65 63 62 20          	arpl   WORD PTR gs:[edx+0x20],sp
9f0088cf:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0088d1:	72 20                	jb     9f0088f3 <ansiEscSeq+0xd3>
9f0088d3:	25 73 0a 00 6c       	and    eax,0x6c000a73
9f0088d8:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f0088df:	65 63 61 20          	arpl   WORD PTR gs:[ecx+0x20],sp
9f0088e3:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0088e5:	72 20                	jb     9f008907 <ansiEscSeq+0xe7>
9f0088e7:	25 73 0a 00 00       	and    eax,0xa73
9f0088ec:	68 65 61 70 42       	push   0x42706165
9f0088f1:	61                   	popa   
9f0088f2:	73 65                	jae    9f008959 <ansiEscSeq+0x139>
9f0088f4:	20 40 20             	and    BYTE PTR [eax+0x20],al
9f0088f7:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
9f0088fa:	30 38                	xor    BYTE PTR [eax],bh
9f0088fc:	58                   	pop    eax
9f0088fd:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
9f008903:	30 38                	xor    BYTE PTR [eax],bh
9f008905:	58                   	pop    eax
9f008906:	20 62 65             	and    BYTE PTR [edx+0x65],ah
9f008909:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f00890b:	72 65                	jb     9f008972 <ansiEscSeq+0x152>
9f00890d:	0a 00                	or     al,BYTE PTR [eax]
9f00890f:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f008912:	6c                   	ins    BYTE PTR es:[edi],dx
9f008913:	6c                   	ins    BYTE PTR es:[edi],dx
9f008914:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008915:	63 3a                	arpl   WORD PTR [edx],di
9f008917:	20 6d 61             	and    BYTE PTR [ebp+0x61],ch
9f00891a:	72 6b                	jb     9f008987 <ansiEscSeq+0x167>
9f00891c:	65                   	gs
9f00891d:	72 20                	jb     9f00893f <ansiEscSeq+0x11f>
9f00891f:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f008920:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008921:	74 20                	je     9f008943 <ansiEscSeq+0x123>
9f008923:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f008925:	75 6e                	jne    9f008995 <ansiEscSeq+0x175>
9f008927:	64 20 65 72          	and    BYTE PTR fs:[ebp+0x72],ah
9f00892b:	72 6f                	jb     9f00899c <ansiEscSeq+0x17c>
9f00892d:	72 21                	jb     9f008950 <ansiEscSeq+0x130>
9f00892f:	21 21                	and    DWORD PTR [ecx],esp
9f008931:	0a 00                	or     al,BYTE PTR [eax]
9f008933:	00 0a                	add    BYTE PTR [edx],cl
9f008935:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008937:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008939:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00893b:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00893d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00893f:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008941:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008943:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008945:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008947:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008949:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00894b:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00894d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00894f:	6d                   	ins    DWORD PTR es:[edi],dx
9f008950:	61                   	popa   
9f008951:	6c                   	ins    BYTE PTR es:[edi],dx
9f008952:	6c                   	ins    BYTE PTR es:[edi],dx
9f008953:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008954:	63 20                	arpl   WORD PTR [eax],sp
9f008956:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
9f008959:	65 20 65 72          	and    BYTE PTR gs:[ebp+0x72],ah
9f00895d:	72 6f                	jb     9f0089ce <ansiEscSeq+0x1ae>
9f00895f:	72 21                	jb     9f008982 <ansiEscSeq+0x162>
9f008961:	21 21                	and    DWORD PTR [ecx],esp
9f008963:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008965:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008967:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008969:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00896b:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00896d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00896f:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008971:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008973:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008975:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008977:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008979:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00897b:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00897d:	0a 00                	or     al,BYTE PTR [eax]
9f00897f:	00 0a                	add    BYTE PTR [edx],cl
9f008981:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008983:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008985:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008987:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008989:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00898b:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00898d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00898f:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008991:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008993:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008995:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008997:	2a 2a                	sub    ch,BYTE PTR [edx]
9f008999:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00899b:	6d                   	ins    DWORD PTR es:[edi],dx
9f00899c:	61                   	popa   
9f00899d:	6c                   	ins    BYTE PTR es:[edi],dx
9f00899e:	6c                   	ins    BYTE PTR es:[edi],dx
9f00899f:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0089a0:	63 20                	arpl   WORD PTR [eax],sp
9f0089a2:	70 6f                	jo     9f008a13 <ansiEscSeq+0x1f3>
9f0089a4:	69 6e 74 65 72 20 65 	imul   ebp,DWORD PTR [esi+0x74],0x65207265
9f0089ab:	72 72                	jb     9f008a1f <ansiEscSeq+0x1ff>
9f0089ad:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0089ae:	72 21                	jb     9f0089d1 <ansiEscSeq+0x1b1>
9f0089b0:	21 21                	and    DWORD PTR [ecx],esp
9f0089b2:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0089b4:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0089b6:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0089b8:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0089ba:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0089bc:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0089be:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0089c0:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0089c2:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0089c4:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0089c6:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0089c8:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0089ca:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0089cc:	0a 00                	or     al,BYTE PTR [eax]
9f0089ce:	00 00                	add    BYTE PTR [eax],al
9f0089d0:	6c                   	ins    BYTE PTR es:[edi],dx
9f0089d1:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f0089d8:	6c                   	ins    BYTE PTR es:[edi],dx
9f0089d9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0089da:	63 3a                	arpl   WORD PTR [edx],di
9f0089dc:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f0089df:	71 75                	jno    9f008a56 <ansiEscSeq+0x236>
9f0089e1:	65                   	gs
9f0089e2:	73 74                	jae    9f008a58 <ansiEscSeq+0x238>
9f0089e4:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
9f0089e7:	72 20                	jb     9f008a09 <ansiEscSeq+0x1e9>
9f0089e9:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f0089ec:	30 38                	xor    BYTE PTR [eax],bh
9f0089ee:	78 20                	js     9f008a10 <ansiEscSeq+0x1f0>
9f0089f0:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
9f0089f3:	65                   	gs
9f0089f4:	73 0a                	jae    9f008a00 <ansiEscSeq+0x1e0>
9f0089f6:	00 00                	add    BYTE PTR [eax],al
9f0089f8:	6c                   	ins    BYTE PTR es:[edi],dx
9f0089f9:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f008a00:	6c                   	ins    BYTE PTR es:[edi],dx
9f008a01:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008a02:	63 3a                	arpl   WORD PTR [edx],di
9f008a04:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f008a07:	75 73                	jne    9f008a7c <ansiEscSeq+0x25c>
9f008a09:	69 6e 67 20 68 65 61 	imul   ebp,DWORD PTR [esi+0x67],0x61656820
9f008a10:	70 72                	jo     9f008a84 <ansiEscSeq+0x264>
9f008a12:	65 63 3d 30 78 25 30 	arpl   WORD PTR gs:0x30257830,di
9f008a19:	38 78 2c             	cmp    BYTE PTR [eax+0x2c],bh
9f008a1c:	20 61 64             	and    BYTE PTR [ecx+0x64],ah
9f008a1f:	64                   	fs
9f008a20:	72 65                	jb     9f008a87 <ansiEscSeq+0x267>
9f008a22:	73 73                	jae    9f008a97 <ansiEscSeq+0x277>
9f008a24:	3d 30 78 25 30       	cmp    eax,0x30257830
9f008a29:	38 78 20             	cmp    BYTE PTR [eax+0x20],bh
9f008a2c:	28 75 73             	sub    BYTE PTR [ebp+0x73],dh
9f008a2f:	65                   	gs
9f008a30:	73 3d                	jae    9f008a6f <ansiEscSeq+0x24f>
9f008a32:	25 75 29 00 6c       	and    eax,0x6c002975
9f008a37:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f008a3e:	6c                   	ins    BYTE PTR es:[edi],dx
9f008a3f:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008a40:	63 3a                	arpl   WORD PTR [edx],di
9f008a42:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f008a45:	65                   	gs
9f008a46:	64                   	fs
9f008a47:	65                   	gs
9f008a48:	64                   	fs
9f008a49:	3d 30 78 25 30       	cmp    eax,0x30257830
9f008a4e:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f008a51:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f008a55:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f008a58:	61                   	popa   
9f008a59:	6c                   	ins    BYTE PTR es:[edi],dx
9f008a5a:	6c                   	ins    BYTE PTR es:[edi],dx
9f008a5b:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008a5c:	63 3a                	arpl   WORD PTR [edx],di
9f008a5e:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f008a61:	61                   	popa   
9f008a62:	45                   	inc    ebp
9f008a63:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f008a64:	64                   	fs
9f008a65:	3d 30 78 25 30       	cmp    eax,0x30257830
9f008a6a:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f008a6d:	00 00                	add    BYTE PTR [eax],al
9f008a6f:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f008a73:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f008a76:	61                   	popa   
9f008a77:	6c                   	ins    BYTE PTR es:[edi],dx
9f008a78:	6c                   	ins    BYTE PTR es:[edi],dx
9f008a79:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008a7a:	63 3a                	arpl   WORD PTR [edx],di
9f008a7c:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f008a7f:	71 20                	jno    9f008aa1 <ansiEscSeq+0x281>
9f008a81:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f008a84:	30 38                	xor    BYTE PTR [eax],bh
9f008a86:	58                   	pop    eax
9f008a87:	20 62 79             	and    BYTE PTR [edx+0x79],ah
9f008a8a:	74 65                	je     9f008af1 <ansiEscSeq+0x2d1>
9f008a8c:	73 2c                	jae    9f008aba <ansiEscSeq+0x29a>
9f008a8e:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f008a91:	74 20                	je     9f008ab3 <ansiEscSeq+0x293>
9f008a93:	77 61                	ja     9f008af6 <ansiEscSeq+0x2d6>
9f008a95:	73 20                	jae    9f008ab7 <ansiEscSeq+0x297>
9f008a97:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f008a9a:	30 38                	xor    BYTE PTR [eax],bh
9f008a9c:	58                   	pop    eax
9f008a9d:	2c 20                	sub    al,0x20
9f008a9f:	68 65 61 70 45       	push   0x45706165
9f008aa4:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f008aa5:	64                   	fs
9f008aa6:	3d 30 78 25 30       	cmp    eax,0x30257830
9f008aab:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f008aae:	00 00                	add    BYTE PTR [eax],al
9f008ab0:	6c                   	ins    BYTE PTR es:[edi],dx
9f008ab1:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f008ab8:	6c                   	ins    BYTE PTR es:[edi],dx
9f008ab9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008aba:	63 3a                	arpl   WORD PTR [edx],di
9f008abc:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
9f008abf:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
9f008ac6:	65 
9f008ac7:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f008acb:	61                   	popa   
9f008acc:	70 43                	jo     9f008b11 <ansiEscSeq+0x2f1>
9f008ace:	75 72                	jne    9f008b42 <ansiEscSeq+0x322>
9f008ad0:	72 20                	jb     9f008af2 <ansiEscSeq+0x2d2>
9f008ad2:	61                   	popa   
9f008ad3:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f008ad4:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f008ad8:	61                   	popa   
9f008ad9:	70 42                	jo     9f008b1d <ansiEscSeq+0x2fd>
9f008adb:	61                   	popa   
9f008adc:	73 65                	jae    9f008b43 <ansiEscSeq+0x323>
9f008ade:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
9f008ae2:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f008ae5:	30 38                	xor    BYTE PTR [eax],bh
9f008ae7:	58                   	pop    eax
9f008ae8:	0a 00                	or     al,BYTE PTR [eax]
9f008aea:	00 00                	add    BYTE PTR [eax],al
9f008aec:	6c                   	ins    BYTE PTR es:[edi],dx
9f008aed:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f008af4:	6c                   	ins    BYTE PTR es:[edi],dx
9f008af5:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008af6:	63 3a                	arpl   WORD PTR [edx],di
9f008af8:	63 72 65             	arpl   WORD PTR [edx+0x65],si
9f008afb:	61                   	popa   
9f008afc:	74 69                	je     9f008b67 <ansiEscSeq+0x347>
9f008afe:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f008aff:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
9f008b03:	61                   	popa   
9f008b04:	70 20                	jo     9f008b26 <ansiEscSeq+0x306>
9f008b06:	72 65                	jb     9f008b6d <ansiEscSeq+0x34d>
9f008b08:	63 20                	arpl   WORD PTR [eax],sp
9f008b0a:	40                   	inc    eax
9f008b0b:	20 30                	and    BYTE PTR [eax],dh
9f008b0d:	78 25                	js     9f008b34 <ansiEscSeq+0x314>
9f008b0f:	30 38                	xor    BYTE PTR [eax],bh
9f008b11:	58                   	pop    eax
9f008b12:	0a 00                	or     al,BYTE PTR [eax]
9f008b14:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b15:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f008b1c:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b1d:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008b1e:	63 3a                	arpl   WORD PTR [edx],di
9f008b20:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f008b23:	61                   	popa   
9f008b24:	70 43                	jo     9f008b69 <ansiEscSeq+0x349>
9f008b26:	75 72                	jne    9f008b9a <ansiEscSeq+0x37a>
9f008b28:	72 3d                	jb     9f008b67 <ansiEscSeq+0x347>
9f008b2a:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f008b2d:	30 38                	xor    BYTE PTR [eax],bh
9f008b2f:	78 0a                	js     9f008b3b <ansiEscSeq+0x31b>
9f008b31:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f008b34:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b35:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b36:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008b37:	63 3a                	arpl   WORD PTR [edx],di
9f008b39:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f008b3c:	74 75                	je     9f008bb3 <ansiEscSeq+0x393>
9f008b3e:	72 6e                	jb     9f008bae <ansiEscSeq+0x38e>
9f008b40:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
9f008b47:	30 38                	xor    BYTE PTR [eax],bh
9f008b49:	58                   	pop    eax
9f008b4a:	0a 00                	or     al,BYTE PTR [eax]
9f008b4c:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b4d:	69 62 63 5f 72 65 61 	imul   esp,DWORD PTR [edx+0x63],0x6165725f
9f008b54:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b55:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b56:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008b57:	63 3a                	arpl   WORD PTR [edx],di
9f008b59:	20 63 61             	and    BYTE PTR [ebx+0x61],ah
9f008b5c:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b5d:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b5e:	65 64 20 66 6f       	gs and BYTE PTR fs:gs:[esi+0x6f],ah
9f008b63:	72 20                	jb     9f008b85 <ansiEscSeq+0x365>
9f008b65:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008b66:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b67:	64 20 70 6f          	and    BYTE PTR fs:[eax+0x6f],dh
9f008b6b:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f008b72:	78 25                	js     9f008b99 <ansiEscSeq+0x379>
9f008b74:	30 38                	xor    BYTE PTR [eax],bh
9f008b76:	78 2c                	js     9f008ba4 <ansiEscSeq+0x384>
9f008b78:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f008b7b:	77 20                	ja     9f008b9d <ansiEscSeq+0x37d>
9f008b7d:	73 69                	jae    9f008be8 <ansiEscSeq+0x3c8>
9f008b7f:	7a 65                	jp     9f008be6 <ansiEscSeq+0x3c6>
9f008b81:	3d 30 78 25 30       	cmp    eax,0x30257830
9f008b86:	38 78 00             	cmp    BYTE PTR [eax+0x0],bh
9f008b89:	00 00                	add    BYTE PTR [eax],al
9f008b8b:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f008b8f:	63 5f 72             	arpl   WORD PTR [edi+0x72],bx
9f008b92:	65                   	gs
9f008b93:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b94:	6c                   	ins    BYTE PTR es:[edi],dx
9f008b95:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008b96:	63 3a                	arpl   WORD PTR [edx],di
9f008b98:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f008b9b:	71 75                	jno    9f008c12 <ansiEscSeq+0x3f2>
9f008b9d:	65                   	gs
9f008b9e:	73 74                	jae    9f008c14 <ansiEscSeq+0x3f4>
9f008ba0:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
9f008ba3:	72 20                	jb     9f008bc5 <ansiEscSeq+0x3a5>
9f008ba5:	30 20                	xor    BYTE PTR [eax],ah
9f008ba7:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
9f008baa:	65                   	gs
9f008bab:	73 2c                	jae    9f008bd9 <ansiEscSeq+0x3b9>
9f008bad:	20 63 61             	and    BYTE PTR [ebx+0x61],ah
9f008bb0:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f008bb1:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f008bb2:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008bb3:	74 20                	je     9f008bd5 <ansiEscSeq+0x3b5>
9f008bb5:	66                   	data16
9f008bb6:	75 6c                	jne    9f008c24 <ansiEscSeq+0x404>
9f008bb8:	66 69 6c 6c 0a 00 00 	imul   bp,WORD PTR [esp+ebp*2+0xa],0x0
9f008bbf:	00 09                	add    BYTE PTR [ecx],cl
9f008bc1:	6c                   	ins    BYTE PTR es:[edi],dx
9f008bc2:	69 62 63 5f 72 65 61 	imul   esp,DWORD PTR [edx+0x63],0x6165725f
9f008bc9:	6c                   	ins    BYTE PTR es:[edi],dx
9f008bca:	6c                   	ins    BYTE PTR es:[edi],dx
9f008bcb:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008bcc:	63 3a                	arpl   WORD PTR [edx],di
9f008bce:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f008bd1:	63 65 69             	arpl   WORD PTR [ebp+0x69],sp
9f008bd4:	76 65                	jbe    9f008c3b <ansiEscSeq+0x41b>
9f008bd6:	64 20 6e 65          	and    BYTE PTR fs:[esi+0x65],ch
9f008bda:	77 20                	ja     9f008bfc <ansiEscSeq+0x3dc>
9f008bdc:	6d                   	ins    DWORD PTR es:[edi],dx
9f008bdd:	61                   	popa   
9f008bde:	6c                   	ins    BYTE PTR es:[edi],dx
9f008bdf:	6c                   	ins    BYTE PTR es:[edi],dx
9f008be0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008be1:	63 20                	arpl   WORD PTR [eax],sp
9f008be3:	70 6f                	jo     9f008c54 <ansiEscSeq+0x434>
9f008be5:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f008bec:	78 25                	js     9f008c13 <ansiEscSeq+0x3f3>
9f008bee:	30 38                	xor    BYTE PTR [eax],bh
9f008bf0:	78 2c                	js     9f008c1e <ansiEscSeq+0x3fe>
9f008bf2:	20 6f 6c             	and    BYTE PTR [edi+0x6c],ch
9f008bf5:	64 20 73 69          	and    BYTE PTR fs:[ebx+0x69],dh
9f008bf9:	7a 65                	jp     9f008c60 <ansiEscSeq+0x440>
9f008bfb:	3d 30 78 25 30       	cmp    eax,0x30257830
9f008c00:	38 78 2c             	cmp    BYTE PTR [eax+0x2c],bh
9f008c03:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f008c06:	77 20                	ja     9f008c28 <ansiEscSeq+0x408>
9f008c08:	73 69                	jae    9f008c73 <ansiEscSeq+0x453>
9f008c0a:	7a 65                	jp     9f008c71 <ansiEscSeq+0x451>
9f008c0c:	3d 30 78 25 30       	cmp    eax,0x30257830
9f008c11:	38 78 0a             	cmp    BYTE PTR [eax+0xa],bh
9f008c14:	00 00                	add    BYTE PTR [eax],al
9f008c16:	00 00                	add    BYTE PTR [eax],al
9f008c18:	09 6c 69 62          	or     DWORD PTR [ecx+ebp*2+0x62],ebp
9f008c1c:	63 5f 72             	arpl   WORD PTR [edi+0x72],bx
9f008c1f:	65                   	gs
9f008c20:	61                   	popa   
9f008c21:	6c                   	ins    BYTE PTR es:[edi],dx
9f008c22:	6c                   	ins    BYTE PTR es:[edi],dx
9f008c23:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008c24:	63 3a                	arpl   WORD PTR [edx],di
9f008c26:	20 75 70             	and    BYTE PTR [ebp+0x70],dh
9f008c29:	64                   	fs
9f008c2a:	61                   	popa   
9f008c2b:	74 65                	je     9f008c92 <ansiEscSeq+0x472>
9f008c2d:	64 20 6e 65          	and    BYTE PTR fs:[esi+0x65],ch
9f008c31:	77 20                	ja     9f008c53 <ansiEscSeq+0x433>
9f008c33:	70 6f                	jo     9f008ca4 <ansiEscSeq+0x484>
9f008c35:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f008c3c:	78 25                	js     9f008c63 <ansiEscSeq+0x443>
9f008c3e:	30 38                	xor    BYTE PTR [eax],bh
9f008c40:	78 20                	js     9f008c62 <ansiEscSeq+0x442>
9f008c42:	77 69                	ja     9f008cad <ansiEscSeq+0x48d>
9f008c44:	74 68                	je     9f008cae <ansiEscSeq+0x48e>
9f008c46:	20 6f 6c             	and    BYTE PTR [edi+0x6c],ch
9f008c49:	64 20 70 6f          	and    BYTE PTR fs:[eax+0x6f],dh
9f008c4d:	69 6e 74 65 72 20 64 	imul   ebp,DWORD PTR [esi+0x74],0x64207265
9f008c54:	61                   	popa   
9f008c55:	74 61                	je     9f008cb8 <ansiEscSeq+0x498>
9f008c57:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
9f008c5a:	64 20 63 6c          	and    BYTE PTR fs:[ebx+0x6c],ah
9f008c5e:	65                   	gs
9f008c5f:	61                   	popa   
9f008c60:	72 65                	jb     9f008cc7 <ansiEscSeq+0x4a7>
9f008c62:	64 20 6f 75          	and    BYTE PTR fs:[edi+0x75],ch
9f008c66:	74 20                	je     9f008c88 <ansiEscSeq+0x468>
9f008c68:	72 65                	jb     9f008ccf <ansiEscSeq+0x4af>
9f008c6a:	6d                   	ins    DWORD PTR es:[edi],dx
9f008c6b:	61                   	popa   
9f008c6c:	69 6e 67 20 69 66 20 	imul   ebp,DWORD PTR [esi+0x67],0x20666920
9f008c73:	61                   	popa   
9f008c74:	70 70                	jo     9f008ce6 <ansiEscSeq+0x4c6>
9f008c76:	6c                   	ins    BYTE PTR es:[edi],dx
9f008c77:	69 63 61 62 6c 65 0a 	imul   esp,DWORD PTR [ebx+0x61],0xa656c62
9f008c7e:	00 00                	add    BYTE PTR [eax],al
9f008c80:	2d 00 00 28 00       	sub    eax,0x280000
9f008c85:	29 00                	sub    DWORD PTR [eax],eax
9f008c87:	25 2d 31 30 73       	and    eax,0x7330312d
9f008c8c:	00 25 30 32 69 3a    	add    BYTE PTR ds:0x3a693230,ah
9f008c92:	25 30 32 69 3a       	and    eax,0x3a693230
9f008c97:	25 30 32 69 00       	and    eax,0x693230
9f008c9c:	9d                   	popf   
9f008c9d:	9d                   	popf   
9f008c9e:	ff                   	(bad)  
9f008c9f:	ff f1                	push   ecx
9f008ca1:	9a ff ff e1 9b ff ff 	call   0xffff:0x9be1ffff
9f008ca8:	0f 9b ff             	setnp  bh
9f008cab:	ff 20                	jmp    DWORD PTR [eax]
9f008cad:	9b                   	fwait
9f008cae:	ff                   	(bad)  
9f008caf:	ff 9d 9d ff ff 9d    	call   FWORD PTR [ebp-0x62000063]
9f008cb5:	9d                   	popf   
9f008cb6:	ff                   	(bad)  
9f008cb7:	ff                   	(bad)  
9f008cb8:	3b 9b ff ff 9d 9d    	cmp    ebx,DWORD PTR [ebx-0x62620001]
9f008cbe:	ff                   	(bad)  
9f008cbf:	ff 9d 9d ff ff 56    	call   FWORD PTR [ebp+0x56ffff9d]
9f008cc5:	9b                   	fwait
9f008cc6:	ff                   	(bad)  
9f008cc7:	ff 71 9b             	push   DWORD PTR [ecx-0x65]
9f008cca:	ff                   	(bad)  
9f008ccb:	ff 9d 9d ff ff 5f    	call   FWORD PTR [ebp+0x5fffff9d]
9f008cd1:	9c                   	pushf  
9f008cd2:	ff                   	(bad)  
9f008cd3:	ff 9d 9d ff ff 9d    	call   FWORD PTR [ebp-0x62000063]
9f008cd9:	9d                   	popf   
9f008cda:	ff                   	(bad)  
9f008cdb:	ff 9d 9d ff ff 8c    	call   FWORD PTR [ebp-0x73000063]
9f008ce1:	9b                   	fwait
9f008ce2:	ff                   	(bad)  
9f008ce3:	ff 9d 9d ff ff 9d    	call   FWORD PTR [ebp-0x62000063]
9f008ce9:	9d                   	popf   
9f008cea:	ff                   	(bad)  
9f008ceb:	ff 9d 9d ff ff 9d    	call   FWORD PTR [ebp-0x62000063]
9f008cf1:	9d                   	popf   
9f008cf2:	ff                   	(bad)  
9f008cf3:	ff 6e 9d             	jmp    FWORD PTR [esi-0x63]
9f008cf6:	ff                   	(bad)  
9f008cf7:	ff 86 9d ff ff 2f    	inc    DWORD PTR [esi+0x2fffff9d]
9f008cfd:	70 72                	jo     9f008d71 <ansiEscSeq+0x551>
9f008cff:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f008d00:	63 2f                	arpl   WORD PTR [edi],bp
9f008d02:	00 2f                	add    BYTE PTR [edi],ch
9f008d04:	73 74                	jae    9f008d7a <ansiEscSeq+0x55a>
9f008d06:	61                   	popa   
9f008d07:	74 00                	je     9f008d09 <ansiEscSeq+0x4e9>
9f008d09:	73 65                	jae    9f008d70 <ansiEscSeq+0x550>
9f008d0b:	6c                   	ins    BYTE PTR es:[edi],dx
9f008d0c:	66                   	data16
9f008d0d:	00 72 00             	add    BYTE PTR [edx+0x0],dh
9f008d10:	20 00                	and    BYTE PTR [eax],al
9f008d12:	69 64 6c 65 00 00 00 	imul   esp,DWORD PTR [esp+ebp*2+0x65],0x0
9f008d19:	00 
9f008d1a:	00 00                	add    BYTE PTR [eax],al
9f008d1c:	00 00                	add    BYTE PTR [eax],al
9f008d1e:	59                   	pop    ecx
9f008d1f:	40                   	inc    eax
9f008d20:	30 31                	xor    BYTE PTR [ecx],dh
9f008d22:	32 33                	xor    dh,BYTE PTR [ebx]
9f008d24:	34 35                	xor    al,0x35
9f008d26:	36                   	ss
9f008d27:	37                   	aaa    
9f008d28:	38 39                	cmp    BYTE PTR [ecx],bh
9f008d2a:	61                   	popa   
9f008d2b:	62 63 64             	bound  esp,QWORD PTR [ebx+0x64]
9f008d2e:	65                   	gs
9f008d2f:	66 67 68 69 6a       	addr16 pushw 0x6a69
9f008d34:	6b 6c 6d 6e 6f       	imul   ebp,DWORD PTR [ebp+ebp*2+0x6e],0x6f
9f008d39:	70 71                	jo     9f008dac <ansiEscSeq+0x58c>
9f008d3b:	72 73                	jb     9f008db0 <ansiEscSeq+0x590>
9f008d3d:	74 75                	je     9f008db4 <ansiEscSeq+0x594>
9f008d3f:	76 77                	jbe    9f008db8 <ansiEscSeq+0x598>
9f008d41:	78 79                	js     9f008dbc <ansiEscSeq+0x59c>
9f008d43:	7a 00                	jp     9f008d45 <ansiEscSeq+0x525>
9f008d45:	00 00                	add    BYTE PTR [eax],al
9f008d47:	00 30                	add    BYTE PTR [eax],dh
9f008d49:	31 32                	xor    DWORD PTR [edx],esi
9f008d4b:	33 34 35 36 37 38 39 	xor    esi,DWORD PTR [esi*1+0x39383736]
9f008d52:	41                   	inc    ecx
9f008d53:	42                   	inc    edx
9f008d54:	43                   	inc    ebx
9f008d55:	44                   	inc    esp
9f008d56:	45                   	inc    ebp
9f008d57:	46                   	inc    esi
9f008d58:	47                   	inc    edi
9f008d59:	48                   	dec    eax
9f008d5a:	49                   	dec    ecx
9f008d5b:	4a                   	dec    edx
9f008d5c:	4b                   	dec    ebx
9f008d5d:	4c                   	dec    esp
9f008d5e:	4d                   	dec    ebp
9f008d5f:	4e                   	dec    esi
9f008d60:	4f                   	dec    edi
9f008d61:	50                   	push   eax
9f008d62:	51                   	push   ecx
9f008d63:	52                   	push   edx
9f008d64:	53                   	push   ebx
9f008d65:	54                   	push   esp
9f008d66:	55                   	push   ebp
9f008d67:	56                   	push   esi
9f008d68:	57                   	push   edi
9f008d69:	58                   	pop    eax
9f008d6a:	59                   	pop    ecx
9f008d6b:	5a                   	pop    edx
9f008d6c:	00 3c 4e             	add    BYTE PTR [esi+ecx*2],bh
9f008d6f:	55                   	push   ebp
9f008d70:	4c                   	dec    esp
9f008d71:	4c                   	dec    esp
9f008d72:	3e 00 2f             	add    BYTE PTR ds:[edi],ch
9f008d75:	b1 ff                	mov    cl,0xff
9f008d77:	ff 41 b1             	inc    DWORD PTR [ecx-0x4f]
9f008d7a:	ff                   	(bad)  
9f008d7b:	ff 41 b1             	inc    DWORD PTR [ecx-0x4f]
9f008d7e:	ff                   	(bad)  
9f008d7f:	ff 35 b1 ff ff 41    	push   DWORD PTR ds:0x41ffffb1
9f008d85:	b1 ff                	mov    cl,0xff
9f008d87:	ff 41 b1             	inc    DWORD PTR [ecx-0x4f]
9f008d8a:	ff                   	(bad)  
9f008d8b:	ff 41 b1             	inc    DWORD PTR [ecx-0x4f]
9f008d8e:	ff                   	(bad)  
9f008d8f:	ff 41 b1             	inc    DWORD PTR [ecx-0x4f]
9f008d92:	ff                   	(bad)  
9f008d93:	ff 41 b1             	inc    DWORD PTR [ecx-0x4f]
9f008d96:	ff                   	(bad)  
9f008d97:	ff 41 b1             	inc    DWORD PTR [ecx-0x4f]
9f008d9a:	ff                   	(bad)  
9f008d9b:	ff 41 b1             	inc    DWORD PTR [ecx-0x4f]
9f008d9e:	ff                   	(bad)  
9f008d9f:	ff 29                	jmp    FWORD PTR [ecx]
9f008da1:	b1 ff                	mov    cl,0xff
9f008da3:	ff 41 b1             	inc    DWORD PTR [ecx-0x4f]
9f008da6:	ff                   	(bad)  
9f008da7:	ff 23                	jmp    DWORD PTR [ebx]
9f008da9:	b1 ff                	mov    cl,0xff
9f008dab:	ff 41 b1             	inc    DWORD PTR [ecx-0x4f]
9f008dae:	ff                   	(bad)  
9f008daf:	ff 41 b1             	inc    DWORD PTR [ecx-0x4f]
9f008db2:	ff                   	(bad)  
9f008db3:	ff                   	(bad)  
9f008db4:	3b b1 ff ff e9 b3    	cmp    esi,DWORD PTR [ecx-0x4c160001]
9f008dba:	ff                   	(bad)  
9f008dbb:	ff ac b4 ff ff ac b4 	jmp    FWORD PTR [esp+esi*4-0x4b530001]
9f008dc2:	ff                   	(bad)  
9f008dc3:	ff ac b4 ff ff 6b b4 	jmp    FWORD PTR [esp+esi*4-0x4b940001]
9f008dca:	ff                   	(bad)  
9f008dcb:	ff ac b4 ff ff 6b b4 	jmp    FWORD PTR [esp+esi*4-0x4b940001]
9f008dd2:	ff                   	(bad)  
9f008dd3:	ff ac b4 ff ff ac b4 	jmp    FWORD PTR [esp+esi*4-0x4b530001]
9f008dda:	ff                   	(bad)  
9f008ddb:	ff ac b4 ff ff ac b4 	jmp    FWORD PTR [esp+esi*4-0x4b530001]
9f008de2:	ff                   	(bad)  
9f008de3:	ff ac b4 ff ff ac b4 	jmp    FWORD PTR [esp+esi*4-0x4b530001]
9f008dea:	ff                   	(bad)  
9f008deb:	ff ac b4 ff ff ac b4 	jmp    FWORD PTR [esp+esi*4-0x4b530001]
9f008df2:	ff                   	(bad)  
9f008df3:	ff ac b4 ff ff ac b4 	jmp    FWORD PTR [esp+esi*4-0x4b530001]
9f008dfa:	ff                   	(bad)  
9f008dfb:	ff ac b4 ff ff ac b4 	jmp    FWORD PTR [esp+esi*4-0x4b530001]
9f008e02:	ff                   	(bad)  
9f008e03:	ff ac b4 ff ff ac b4 	jmp    FWORD PTR [esp+esi*4-0x4b530001]
9f008e0a:	ff                   	(bad)  
9f008e0b:	ff ac b4 ff ff ac b4 	jmp    FWORD PTR [esp+esi*4-0x4b530001]
9f008e12:	ff                   	(bad)  
9f008e13:	ff 55 b4             	call   DWORD PTR [ebp-0x4c]
9f008e16:	ff                   	(bad)  
9f008e17:	ff ac b4 ff ff ac b4 	jmp    FWORD PTR [esp+esi*4-0x4b530001]
9f008e1e:	ff                   	(bad)  
9f008e1f:	ff ac b4 ff ff ac b4 	jmp    FWORD PTR [esp+esi*4-0x4b530001]
9f008e26:	ff                   	(bad)  
9f008e27:	ff ac b4 ff ff ac b4 	jmp    FWORD PTR [esp+esi*4-0x4b530001]
9f008e2e:	ff                   	(bad)  
9f008e2f:	ff ac b4 ff ff ac b4 	jmp    FWORD PTR [esp+esi*4-0x4b530001]
9f008e36:	ff                   	(bad)  
9f008e37:	ff ed                	jmp    <internal disassembler error>
9f008e39:	b3 ff                	mov    bl,0xff
9f008e3b:	ff ac b4 ff ff 6c b2 	jmp    FWORD PTR [esp+esi*4-0x4d930001]
9f008e42:	ff                   	(bad)  
9f008e43:	ff 65 b4             	jmp    DWORD PTR [ebp-0x4c]
9f008e46:	ff                   	(bad)  
9f008e47:	ff 6b b4             	jmp    FWORD PTR [ebx-0x4c]
9f008e4a:	ff                   	(bad)  
9f008e4b:	ff 6b b4             	jmp    FWORD PTR [ebx-0x4c]
9f008e4e:	ff                   	(bad)  
9f008e4f:	ff 6b b4             	jmp    FWORD PTR [ebx-0x4c]
9f008e52:	ff                   	(bad)  
9f008e53:	ff ac b4 ff ff 65 b4 	jmp    FWORD PTR [esp+esi*4-0x4b9a0001]
9f008e5a:	ff                   	(bad)  
9f008e5b:	ff ac b4 ff ff ac b4 	jmp    FWORD PTR [esp+esi*4-0x4b530001]
9f008e62:	ff                   	(bad)  
9f008e63:	ff ac b4 ff ff ac b4 	jmp    FWORD PTR [esp+esi*4-0x4b530001]
9f008e6a:	ff                   	(bad)  
9f008e6b:	ff a3 b3 ff ff 49    	jmp    DWORD PTR [ebx+0x49ffffb3]
9f008e71:	b4 ff                	mov    ah,0xff
9f008e73:	ff 65 b3             	jmp    DWORD PTR [ebp-0x4d]
9f008e76:	ff                   	(bad)  
9f008e77:	ff ac b4 ff ff ac b4 	jmp    FWORD PTR [esp+esi*4-0x4b530001]
9f008e7e:	ff                   	(bad)  
9f008e7f:	ff c1                	inc    ecx
9f008e81:	b2 ff                	mov    dl,0xff
9f008e83:	ff ac b4 ff ff ea b4 	jmp    FWORD PTR [esp+esi*4-0x4b150001]
9f008e8a:	ff                   	(bad)  
9f008e8b:	ff ac b4 ff ff ac b4 	jmp    FWORD PTR [esp+esi*4-0x4b530001]
9f008e92:	ff                   	(bad)  
9f008e93:	ff 59 b4             	call   FWORD PTR [ecx-0x4c]
9f008e96:	ff                   	(bad)  
9f008e97:	ff 00                	inc    DWORD PTR [eax]
9f008e99:	00 00                	add    BYTE PTR [eax],al
9f008e9b:	00 00                	add    BYTE PTR [eax],al
9f008e9d:	00 24 40             	add    BYTE PTR [eax+eax*2],ah
9f008ea0:	b8 1e 85 eb 51       	mov    eax,0x51eb851e
9f008ea5:	b8 9e 3f 00 00       	mov    eax,0x3f9e
	...
9f008ebe:	00 00                	add    BYTE PTR [eax],al
9f008ec0:	47                   	inc    edi
9f008ec1:	4d                   	dec    ebp
9f008ec2:	54                   	push   esp
	...

9f008ee0 <_ytab>:
9f008ee0:	1f                   	pop    ds
9f008ee1:	00 00                	add    BYTE PTR [eax],al
9f008ee3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f008ee6:	00 00                	add    BYTE PTR [eax],al
9f008ee8:	1f                   	pop    ds
9f008ee9:	00 00                	add    BYTE PTR [eax],al
9f008eeb:	00 1e                	add    BYTE PTR [esi],bl
9f008eed:	00 00                	add    BYTE PTR [eax],al
9f008eef:	00 1f                	add    BYTE PTR [edi],bl
9f008ef1:	00 00                	add    BYTE PTR [eax],al
9f008ef3:	00 1e                	add    BYTE PTR [esi],bl
9f008ef5:	00 00                	add    BYTE PTR [eax],al
9f008ef7:	00 1f                	add    BYTE PTR [edi],bl
9f008ef9:	00 00                	add    BYTE PTR [eax],al
9f008efb:	00 1f                	add    BYTE PTR [edi],bl
9f008efd:	00 00                	add    BYTE PTR [eax],al
9f008eff:	00 1e                	add    BYTE PTR [esi],bl
9f008f01:	00 00                	add    BYTE PTR [eax],al
9f008f03:	00 1f                	add    BYTE PTR [edi],bl
9f008f05:	00 00                	add    BYTE PTR [eax],al
9f008f07:	00 1e                	add    BYTE PTR [esi],bl
9f008f09:	00 00                	add    BYTE PTR [eax],al
9f008f0b:	00 1f                	add    BYTE PTR [edi],bl
9f008f0d:	00 00                	add    BYTE PTR [eax],al
9f008f0f:	00 1f                	add    BYTE PTR [edi],bl
9f008f11:	00 00                	add    BYTE PTR [eax],al
9f008f13:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
9f008f19:	00 00                	add    BYTE PTR [eax],al
9f008f1b:	00 1e                	add    BYTE PTR [esi],bl
9f008f1d:	00 00                	add    BYTE PTR [eax],al
9f008f1f:	00 1f                	add    BYTE PTR [edi],bl
9f008f21:	00 00                	add    BYTE PTR [eax],al
9f008f23:	00 1e                	add    BYTE PTR [esi],bl
9f008f25:	00 00                	add    BYTE PTR [eax],al
9f008f27:	00 1f                	add    BYTE PTR [edi],bl
9f008f29:	00 00                	add    BYTE PTR [eax],al
9f008f2b:	00 1f                	add    BYTE PTR [edi],bl
9f008f2d:	00 00                	add    BYTE PTR [eax],al
9f008f2f:	00 1e                	add    BYTE PTR [esi],bl
9f008f31:	00 00                	add    BYTE PTR [eax],al
9f008f33:	00 1f                	add    BYTE PTR [edi],bl
9f008f35:	00 00                	add    BYTE PTR [eax],al
9f008f37:	00 1e                	add    BYTE PTR [esi],bl
9f008f39:	00 00                	add    BYTE PTR [eax],al
9f008f3b:	00 1f                	add    BYTE PTR [edi],bl
9f008f3d:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

9f008f40 <.rel.dyn>:
9f008f40:	c4 91 00 9f 08 00    	les    edx,FWORD PTR [ecx+0x89f00]
9f008f46:	00 00                	add    BYTE PTR [eax],al
9f008f48:	c8 91 00 9f          	enter  0x91,0x9f
9f008f4c:	08 00                	or     BYTE PTR [eax],al
9f008f4e:	00 00                	add    BYTE PTR [eax],al
9f008f50:	cc                   	int3   
9f008f51:	91                   	xchg   ecx,eax
9f008f52:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f008f58:	d0 91 00 9f 08 00    	rcl    BYTE PTR [ecx+0x89f00],1
9f008f5e:	00 00                	add    BYTE PTR [eax],al
9f008f60:	d4 91                	aam    0x91
9f008f62:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f008f68:	dc 91 00 9f 08 00    	fcom   QWORD PTR [ecx+0x89f00]
9f008f6e:	00 00                	add    BYTE PTR [eax],al
9f008f70:	e8 91 00 9f 08       	call   a79f9006 <tmbuf+0x89efce6>
9f008f75:	00 00                	add    BYTE PTR [eax],al
9f008f77:	00 ec                	add    ah,ch
9f008f79:	91                   	xchg   ecx,eax
9f008f7a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f008f80:	f0 91                	lock xchg ecx,eax
9f008f82:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f008f88:	f8                   	clc    
9f008f89:	91                   	xchg   ecx,eax
9f008f8a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f008f90:	18 92 00 9f 08 00    	sbb    BYTE PTR [edx+0x89f00],dl
9f008f96:	00 00                	add    BYTE PTR [eax],al
9f008f98:	1c 92                	sbb    al,0x92
9f008f9a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f008fa0:	20 92 00 9f 08 00    	and    BYTE PTR [edx+0x89f00],dl
9f008fa6:	00 00                	add    BYTE PTR [eax],al
9f008fa8:	24 92                	and    al,0x92
9f008faa:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f008fb0:	28 92 00 9f 08 00    	sub    BYTE PTR [edx+0x89f00],dl
9f008fb6:	00 00                	add    BYTE PTR [eax],al
9f008fb8:	3e 13 00             	adc    eax,DWORD PTR ds:[eax]
9f008fbb:	9f                   	lahf   
9f008fbc:	02 36                	add    dh,BYTE PTR [esi]
9f008fbe:	00 00                	add    BYTE PTR [eax],al
9f008fc0:	7e 13                	jle    9f008fd5 <_ytab+0xf5>
9f008fc2:	00 9f 02 36 00 00    	add    BYTE PTR [edi+0x3602],bl
9f008fc8:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
9f008fc9:	13 00                	adc    eax,DWORD PTR [eax]
9f008fcb:	9f                   	lahf   
9f008fcc:	02 36                	add    dh,BYTE PTR [esi]
9f008fce:	00 00                	add    BYTE PTR [eax],al
9f008fd0:	c0 13 00             	rcl    BYTE PTR [ebx],0x0
9f008fd3:	9f                   	lahf   
9f008fd4:	02 36                	add    dh,BYTE PTR [esi]
9f008fd6:	00 00                	add    BYTE PTR [eax],al
9f008fd8:	1b 14 00             	sbb    edx,DWORD PTR [eax+eax*1]
9f008fdb:	9f                   	lahf   
9f008fdc:	02 36                	add    dh,BYTE PTR [esi]
9f008fde:	00 00                	add    BYTE PTR [eax],al
9f008fe0:	7e 14                	jle    9f008ff6 <_ytab+0x116>
9f008fe2:	00 9f 02 36 00 00    	add    BYTE PTR [edi+0x3602],bl
9f008fe8:	b5 14                	mov    ch,0x14
9f008fea:	00 9f 02 36 00 00    	add    BYTE PTR [edi+0x3602],bl
9f008ff0:	f1                   	icebp  
9f008ff1:	14 00                	adc    al,0x0
9f008ff3:	9f                   	lahf   
9f008ff4:	02 36                	add    dh,BYTE PTR [esi]
9f008ff6:	00 00                	add    BYTE PTR [eax],al
9f008ff8:	2f                   	das    
9f008ff9:	15 00 9f 02 36       	adc    eax,0x36029f00
9f008ffe:	00 00                	add    BYTE PTR [eax],al
9f009000:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f009001:	15 00 9f 02 36       	adc    eax,0x36029f00
9f009006:	00 00                	add    BYTE PTR [eax],al
9f009008:	b1 15                	mov    cl,0x15
9f00900a:	00 9f 02 36 00 00    	add    BYTE PTR [edi+0x3602],bl
9f009010:	9d                   	popf   
9f009011:	18 00                	sbb    BYTE PTR [eax],al
9f009013:	9f                   	lahf   
9f009014:	02 36                	add    dh,BYTE PTR [esi]
9f009016:	00 00                	add    BYTE PTR [eax],al
9f009018:	ca 18 00             	retf   0x18
9f00901b:	9f                   	lahf   
9f00901c:	02 36                	add    dh,BYTE PTR [esi]
9f00901e:	00 00                	add    BYTE PTR [eax],al
9f009020:	0d 19 00 9f 02       	or     eax,0x29f0019
9f009025:	36 00 00             	add    BYTE PTR ss:[eax],al
9f009028:	3a 19                	cmp    bl,BYTE PTR [ecx]
9f00902a:	00 9f 02 36 00 00    	add    BYTE PTR [edi+0x3602],bl
9f009030:	7d 19                	jge    9f00904b <_ytab+0x16b>
9f009032:	00 9f 02 36 00 00    	add    BYTE PTR [edi+0x3602],bl
9f009038:	aa                   	stos   BYTE PTR es:[edi],al
9f009039:	19 00                	sbb    DWORD PTR [eax],eax
9f00903b:	9f                   	lahf   
9f00903c:	02 36                	add    dh,BYTE PTR [esi]
9f00903e:	00 00                	add    BYTE PTR [eax],al
9f009040:	ab                   	stos   DWORD PTR es:[edi],eax
9f009041:	54                   	push   esp
9f009042:	00 9f 02 36 00 00    	add    BYTE PTR [edi+0x3602],bl
9f009048:	11 61 00             	adc    DWORD PTR [ecx+0x0],esp
9f00904b:	9f                   	lahf   
9f00904c:	02 36                	add    dh,BYTE PTR [esi]
9f00904e:	00 00                	add    BYTE PTR [eax],al
9f009050:	d8 91 00 9f 06 24    	fcom   DWORD PTR [ecx+0x24069f00]
9f009056:	00 00                	add    BYTE PTR [eax],al
9f009058:	e0 91                	loopne 9f008feb <_ytab+0x10b>
9f00905a:	00 9f 06 29 00 00    	add    BYTE PTR [edi+0x2906],bl
9f009060:	e4 91                	in     al,0x91
9f009062:	00 9f 06 2b 00 00    	add    BYTE PTR [edi+0x2b06],bl
9f009068:	f4                   	hlt    
9f009069:	91                   	xchg   ecx,eax
9f00906a:	00 9f 06 46 00 00    	add    BYTE PTR [edi+0x4606],bl
9f009070:	14 92                	adc    al,0x92
9f009072:	00 9f 01 1a 00 00    	add    BYTE PTR [edi+0x1a01],bl
9f009078:	08 92 00 9f 07 0e    	or     BYTE PTR [edx+0xe079f00],dl
9f00907e:	00 00                	add    BYTE PTR [eax],al
9f009080:	0c 92                	or     al,0x92
9f009082:	00 9f 07 4d 00 00    	add    BYTE PTR [edi+0x4d07],bl
9f009088:	10 92 00 9f 07 52    	adc    BYTE PTR [edx+0x52079f00],dl
	...

Disassembly of section .data:

9f0090a0 <rcsid>:
9f0090a0:	24 48                	and    al,0x48
9f0090a2:	65                   	gs
9f0090a3:	61                   	popa   
9f0090a4:	64                   	fs
9f0090a5:	65                   	gs
9f0090a6:	72 3a                	jb     9f0090e2 <rcsid+0x42>
9f0090a8:	20 2f                	and    BYTE PTR [edi],ch
9f0090aa:	75 73                	jne    9f00911f <_DYNAMIC+0x13>
9f0090ac:	65                   	gs
9f0090ad:	72 36                	jb     9f0090e5 <rcsid+0x45>
9f0090af:	2f                   	das    
9f0090b0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0090b1:	75 73                	jne    9f009126 <_DYNAMIC+0x1a>
9f0090b3:	74 65                	je     9f00911a <_DYNAMIC+0xe>
9f0090b5:	72 2f                	jb     9f0090e6 <rcsid+0x46>
9f0090b7:	74 63                	je     9f00911c <_DYNAMIC+0x10>
9f0090b9:	6c                   	ins    BYTE PTR es:[edi],dx
9f0090ba:	2f                   	das    
9f0090bb:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f0090be:	70 61                	jo     9f009121 <_DYNAMIC+0x15>
9f0090c0:	74 2f                	je     9f0090f1 <rcsid+0x51>
9f0090c2:	52                   	push   edx
9f0090c3:	43                   	inc    ebx
9f0090c4:	53                   	push   ebx
9f0090c5:	2f                   	das    
9f0090c6:	73 74                	jae    9f00913c <_DYNAMIC+0x30>
9f0090c8:	72 73                	jb     9f00913d <_DYNAMIC+0x31>
9f0090ca:	74 72                	je     9f00913e <_DYNAMIC+0x32>
9f0090cc:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
9f0090d0:	20 31                	and    BYTE PTR [ecx],dh
9f0090d2:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
9f0090d5:	39 33                	cmp    DWORD PTR [ebx],esi
9f0090d7:	2f                   	das    
9f0090d8:	30 33                	xor    BYTE PTR [ebx],dh
9f0090da:	2f                   	das    
9f0090db:	31 39                	xor    DWORD PTR [ecx],edi
9f0090dd:	20 31                	and    BYTE PTR [ecx],dh
9f0090df:	35 3a 32 35 3a       	xor    eax,0x3a35323a
9f0090e4:	34 30                	xor    al,0x30
9f0090e6:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
9f0090e9:	73 74                	jae    9f00915f <_DYNAMIC+0x53>
9f0090eb:	65                   	gs
9f0090ec:	72 20                	jb     9f00910e <_DYNAMIC+0x2>
9f0090ee:	45                   	inc    ebp
9f0090ef:	78 70                	js     9f009161 <_DYNAMIC+0x55>
9f0090f1:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
9f0090f4:	53                   	push   ebx
9f0090f5:	50                   	push   eax
9f0090f6:	52                   	push   edx
9f0090f7:	49                   	dec    ecx
9f0090f8:	54                   	push   esp
9f0090f9:	45                   	inc    ebp
9f0090fa:	20 28                	and    BYTE PTR [eax],ch
9f0090fc:	42                   	inc    edx
9f0090fd:	65                   	gs
9f0090fe:	72 6b                	jb     9f00916b <_DYNAMIC+0x5f>
9f009100:	65                   	gs
9f009101:	6c                   	ins    BYTE PTR es:[edi],dx
9f009102:	65                   	gs
9f009103:	79 29                	jns    9f00912e <_DYNAMIC+0x22>
9f009105:	00 00                	add    BYTE PTR [eax],al
	...

9f009108 <_daylight>:
9f009108:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

9f00910c <_DYNAMIC>:
9f00910c:	19 00                	sbb    DWORD PTR [eax],eax
9f00910e:	00 00                	add    BYTE PTR [eax],al
9f009110:	14 92                	adc    al,0x92
9f009112:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
9f009118:	04 00                	add    al,0x0
9f00911a:	00 00                	add    BYTE PTR [eax],al
9f00911c:	1a 00                	sbb    al,BYTE PTR [eax]
9f00911e:	00 00                	add    BYTE PTR [eax],al
9f009120:	18 92 00 9f 1c 00    	sbb    BYTE PTR [edx+0x1c9f00],dl
9f009126:	00 00                	add    BYTE PTR [eax],al
9f009128:	04 00                	add    al,0x0
9f00912a:	00 00                	add    BYTE PTR [eax],al
9f00912c:	04 00                	add    al,0x0
9f00912e:	00 00                	add    BYTE PTR [eax],al
9f009130:	4c                   	dec    esp
9f009131:	80 00 9f             	add    BYTE PTR [eax],0x9f
9f009134:	05 00 00 00 74       	add    eax,0x74000000
9f009139:	7d 00                	jge    9f00913b <_DYNAMIC+0x2f>
9f00913b:	9f                   	lahf   
9f00913c:	06                   	push   es
9f00913d:	00 00                	add    BYTE PTR [eax],al
9f00913f:	00 b4 77 00 9f 0a 00 	add    BYTE PTR [edi+esi*2+0xa9f00],dh
9f009146:	00 00                	add    BYTE PTR [eax],al
9f009148:	d6                   	(bad)  
9f009149:	02 00                	add    al,BYTE PTR [eax]
9f00914b:	00 0b                	add    BYTE PTR [ebx],cl
9f00914d:	00 00                	add    BYTE PTR [eax],al
9f00914f:	00 10                	add    BYTE PTR [eax],dl
9f009151:	00 00                	add    BYTE PTR [eax],al
9f009153:	00 03                	add    BYTE PTR [ebx],al
9f009155:	00 00                	add    BYTE PTR [eax],al
9f009157:	00 fc                	add    ah,bh
9f009159:	91                   	xchg   ecx,eax
9f00915a:	00 9f 02 00 00 00    	add    BYTE PTR [edi+0x2],bl
9f009160:	18 00                	sbb    BYTE PTR [eax],al
9f009162:	00 00                	add    BYTE PTR [eax],al
9f009164:	14 00                	adc    al,0x0
9f009166:	00 00                	add    BYTE PTR [eax],al
9f009168:	11 00                	adc    DWORD PTR [eax],eax
9f00916a:	00 00                	add    BYTE PTR [eax],al
9f00916c:	17                   	pop    ss
9f00916d:	00 00                	add    BYTE PTR [eax],al
9f00916f:	00 78 90             	add    BYTE PTR [eax-0x70],bh
9f009172:	00 9f 11 00 00 00    	add    BYTE PTR [edi+0x11],bl
9f009178:	40                   	inc    eax
9f009179:	8f 00                	pop    DWORD PTR [eax]
9f00917b:	9f                   	lahf   
9f00917c:	12 00                	adc    al,BYTE PTR [eax]
9f00917e:	00 00                	add    BYTE PTR [eax],al
9f009180:	38 01                	cmp    BYTE PTR [ecx],al
9f009182:	00 00                	add    BYTE PTR [eax],al
9f009184:	13 00                	adc    eax,DWORD PTR [eax]
9f009186:	00 00                	add    BYTE PTR [eax],al
9f009188:	08 00                	or     BYTE PTR [eax],al
9f00918a:	00 00                	add    BYTE PTR [eax],al
9f00918c:	16                   	push   ss
9f00918d:	00 00                	add    BYTE PTR [eax],al
9f00918f:	00 00                	add    BYTE PTR [eax],al
9f009191:	00 00                	add    BYTE PTR [eax],al
9f009193:	00 fa                	add    dl,bh
9f009195:	ff                   	(bad)  
9f009196:	ff 6f 0f             	jmp    FWORD PTR [edi+0xf]
	...

Disassembly of section .got:

9f0091c4 <.got>:
9f0091c4:	54                   	push   esp
9f0091c5:	92                   	xchg   edx,eax
9f0091c6:	00 9f 6c 92 00 9f    	add    BYTE PTR [edi-0x60ff6d94],bl
9f0091cc:	4c                   	dec    esp
9f0091cd:	92                   	xchg   edx,eax
9f0091ce:	00 9f 58 92 00 9f    	add    BYTE PTR [edi-0x60ff6da8],bl
9f0091d4:	50                   	push   eax
9f0091d5:	92                   	xchg   edx,eax
9f0091d6:	00 9f 00 00 00 00    	add    BYTE PTR [edi+0x0],bl
9f0091dc:	68 92 00 9f 00       	push   0x9f0092
9f0091e1:	00 00                	add    BYTE PTR [eax],al
9f0091e3:	00 00                	add    BYTE PTR [eax],al
9f0091e5:	00 00                	add    BYTE PTR [eax],al
9f0091e7:	00 40 92             	add    BYTE PTR [eax-0x6e],al
9f0091ea:	00 9f 5c 92 00 9f    	add    BYTE PTR [edi-0x60ff6da4],bl
9f0091f0:	60                   	pusha  
9f0091f1:	92                   	xchg   edx,eax
9f0091f2:	00 9f 00 00 00 00    	add    BYTE PTR [edi+0x0],bl
9f0091f8:	20                   	.byte 0x20
9f0091f9:	93                   	xchg   ebx,eax
9f0091fa:	00                   	.byte 0x0
9f0091fb:	9f                   	lahf   

Disassembly of section .got.plt:

9f0091fc <_GLOBAL_OFFSET_TABLE_>:
9f0091fc:	0c 91                	or     al,0x91
9f0091fe:	00 9f 00 00 00 00    	add    BYTE PTR [edi+0x0],bl
9f009204:	00 00                	add    BYTE PTR [eax],al
9f009206:	00 00                	add    BYTE PTR [eax],al
9f009208:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
9f009209:	61                   	popa   
9f00920a:	00 9f b6 61 00 9f    	add    BYTE PTR [edi-0x60ff9e4a],bl
9f009210:	c6                   	(bad)  
9f009211:	61                   	popa   
9f009212:	00                   	.byte 0x0
9f009213:	9f                   	lahf   

Disassembly of section .init_array:

9f009214 <.init_array>:
9f009214:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

9f009218 <.fini_array>:
9f009218:	8d 16                	lea    edx,[esi]
9f00921a:	00                   	.byte 0x0
9f00921b:	9f                   	lahf   

Disassembly of section .data.rel.local:

9f00921c <digits>:
9f00921c:	20 8d 00 9f 48 8d    	and    BYTE PTR [ebp-0x72b76100],cl

9f009220 <upper_digits>:
9f009220:	48                   	dec    eax
9f009221:	8d 00                	lea    eax,[eax]
9f009223:	9f                   	lahf   

9f009224 <_tzname>:
9f009224:	c0 8e 00 9f c0 8e 00 	ror    BYTE PTR [esi-0x713f6100],0x0
9f00922b:	9f                   	lahf   

Disassembly of section .bss:

9f009240 <processEnvp>:
9f009240:	00 00                	add    BYTE PTR [eax],al
	...

9f009244 <lasts.1297>:
9f009244:	00 00                	add    BYTE PTR [eax],al
	...

9f009248 <lasts.1305>:
9f009248:	00 00                	add    BYTE PTR [eax],al
	...

9f00924c <filesToCloseCount>:
9f00924c:	00 00                	add    BYTE PTR [eax],al
	...

9f009250 <filesToClose>:
9f009250:	00 00                	add    BYTE PTR [eax],al
	...

9f009254 <resolvePath_envPath>:
9f009254:	00 00                	add    BYTE PTR [eax],al
	...

9f009258 <resolvePath_resPath>:
9f009258:	00 00                	add    BYTE PTR [eax],al
	...

9f00925c <resolvePath_cwd>:
9f00925c:	00 00                	add    BYTE PTR [eax],al
	...

9f009260 <resolvePath_inPath>:
9f009260:	00 00                	add    BYTE PTR [eax],al
	...

9f009264 <libcInitialized>:
9f009264:	00 00                	add    BYTE PTR [eax],al
	...

9f009268 <printBuffer>:
9f009268:	00 00                	add    BYTE PTR [eax],al
	...

9f00926c <params>:
	...

9f009284 <heapBase>:
9f009284:	00 00                	add    BYTE PTR [eax],al
	...

9f009288 <heapCurr>:
9f009288:	00 00                	add    BYTE PTR [eax],al
	...

9f00928c <heapEnd>:
9f00928c:	00 00                	add    BYTE PTR [eax],al
	...

9f009290 <lastHRCreated.1278>:
	...

9f0092a0 <tinfo.1484>:
	...

9f0092cc <dirEntries.1512>:
9f0092cc:	00 00                	add    BYTE PTR [eax],al
	...

9f0092d0 <cpuid_extended_feature_bits>:
9f0092d0:	00 00                	add    BYTE PTR [eax],al
	...

9f0092d4 <cpuid_procinfo>:
	...

9f0092dc <_dstbias>:
9f0092dc:	00 00                	add    BYTE PTR [eax],al
	...

9f0092e0 <libcTZ>:
	...

9f009300 <ticksToWait>:
	...

9f009320 <tmbuf>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:15
.globl  _modfasm
.type _modfasm, @function

modfasm:
_modfasm:
                push    ebp
       0:	09 01                	or     DWORD PTR [ecx],eax
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:16
                mov     ebp,esp
       2:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:18
                push    edi                     # Save register edi
                fldd    [ebp+8]           # Load real from stack
       4:	04 00                	add    al,0x0
       6:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:19
                mov     edi,dword [ebp+16]      # Put integer address in edi
       8:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:20
                fld    st(0)                     # Duplicate st
       a:	04 01                	add    al,0x1
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:21
                frndint                         # Round to integer
       c:	c3                   	ret    
       d:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:22
                fcom    st(1)                     # Compare with orignal value
       f:	00 0c 84             	add    BYTE PTR [esp+eax*4],cl
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:23
                fstsw   ax                      # Get the FPU status word
      12:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:24
                testd    byte [ebp+15],0x80      # Test if number is negative
      14:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
      17:	00 00                	add    BYTE PTR [eax],al
      19:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:25
                jz      __fmodf1                # Re-direct if positive
      1b:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:29
                sahf                            # Store AH to flags
                jnb     __fmodf2                # Re-direct if greater or equal
                fld1                            # Load the constant 1
                fadd                            # Increment integer part
      21:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:30
                jmp     __fmodf2                # End of case
      23:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:31
__fmodf1:       sahf                            # Store AH to flags
      25:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:35
                jna     __fmodf2                # Re-direct if less or equal
                fld1                            # Load constant 1
                fsub                            # Decrement integer part
__fmodf2:       fstd     [edi]             # Store integer part
      2c:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:36
                fsub                            # Subtract to get fraction
      2f:	32 00                	xor    al,BYTE PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:38
                pop     edi                     # Restore register edi
                mov     esp,ebp                 # Restore stack pointer
      31:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:39
                pop     ebp
      33:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
      3a:	03 08                	add    ecx,DWORD PTR [eax]
      3c:	05 00 00 00 00       	add    eax,0x0
      41:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
      44:	ad                   	lods   eax,DWORD PTR ds:[esi]
      45:	00 00                	add    BYTE PTR [eax],al
      47:	00 03                	add    BYTE PTR [ebx],al
      49:	01 06                	add    DWORD PTR [esi],eax
      4b:	48                   	dec    eax
      4c:	00 00                	add    BYTE PTR [eax],al
      4e:	00 03                	add    BYTE PTR [ebx],al
      50:	01 08                	add    DWORD PTR [eax],ecx
      52:	3f                   	aas    
      53:	00 00                	add    BYTE PTR [eax],al
      55:	00 03                	add    BYTE PTR [ebx],al
      57:	02 07                	add    al,BYTE PTR [edi]
      59:	0e                   	push   cs
      5a:	00 00                	add    BYTE PTR [eax],al
      5c:	00 03                	add    BYTE PTR [ebx],al
      5e:	04 07                	add    al,0x7
      60:	2d 00 00 00 03       	sub    eax,0x3000000
      65:	01 06                	add    DWORD PTR [esi],eax
      67:	41                   	inc    ecx
      68:	00 00                	add    BYTE PTR [eax],al
      6a:	00 03                	add    BYTE PTR [ebx],al
      6c:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
      72:	03 08                	add    ecx,DWORD PTR [eax]
      74:	07                   	pop    es
      75:	28 00                	sub    BYTE PTR [eax],al
      77:	00 00                	add    BYTE PTR [eax],al
      79:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
      7c:	2a 01                	sub    al,BYTE PTR [ecx]
      7e:	00 00                	add    BYTE PTR [eax],al
      80:	04 04                	add    al,0x4
      82:	48                   	dec    eax
      83:	00 00                	add    BYTE PTR [eax],al
      85:	00 05 21 00 00 00    	add    BYTE PTR ds:0x21,al
      8b:	01 09                	add    DWORD PTR [ecx],ecx
      8d:	80 00 00             	add    BYTE PTR [eax],0x0
      90:	00 00                	add    BYTE PTR [eax],al
      92:	00 00                	add    BYTE PTR [eax],al
      94:	9f                   	lahf   
      95:	38 00                	cmp    BYTE PTR [eax],al
      97:	00 00                	add    BYTE PTR [eax],al
      99:	01 9c b8 00 00 00 06 	add    DWORD PTR [eax+edi*4+0x6000000],ebx
      a0:	73 00                	jae    a2 <__fmodf2+0x76>
      a2:	01 09                	add    DWORD PTR [ecx],ecx
      a4:	b8 00 00 00 02       	mov    eax,0x2000000
      a9:	91                   	xchg   ecx,eax
      aa:	00 06                	add    BYTE PTR [esi],al
      ac:	63 00                	arpl   WORD PTR [eax],ax
      ae:	01 09                	add    DWORD PTR [ecx],ecx
      b0:	25 00 00 00 02       	and    eax,0x2000000
      b5:	91                   	xchg   ecx,eax
      b6:	04 00                	add    al,0x0
      b8:	04 04                	add    al,0x4
      ba:	be 00 00 00 07       	mov    esi,0x7000000
      bf:	48                   	dec    eax
      c0:	00 00                	add    BYTE PTR [eax],al
      c2:	00 05 70 00 00 00    	add    BYTE PTR ds:0x70,al
      c8:	01 11                	add    DWORD PTR [ecx],edx
      ca:	80 00 00             	add    BYTE PTR [eax],0x0
      cd:	00 38                	add    BYTE PTR [eax],bh
      cf:	00 00                	add    BYTE PTR [eax],al
      d1:	9f                   	lahf   
      d2:	38 00                	cmp    BYTE PTR [eax],al
      d4:	00 00                	add    BYTE PTR [eax],al
      d6:	01 9c f5 00 00 00 06 	add    DWORD PTR [ebp+esi*8+0x6000000],ebx
      dd:	73 00                	jae    df <__fmodf2+0xb3>
      df:	01 11                	add    DWORD PTR [ecx],edx
      e1:	b8 00 00 00 02       	mov    eax,0x2000000
      e6:	91                   	xchg   ecx,eax
      e7:	00 06                	add    BYTE PTR [esi],al
      e9:	63 00                	arpl   WORD PTR [eax],ax
      eb:	01 11                	add    DWORD PTR [ecx],edx
      ed:	25 00 00 00 02       	and    eax,0x2000000
      f2:	91                   	xchg   ecx,eax
      f3:	04 00                	add    al,0x0
      f5:	08 78 00             	or     BYTE PTR [eax+0x0],bh
      f8:	00 00                	add    BYTE PTR [eax],al
      fa:	02 33                	add    dh,BYTE PTR [ebx]
      fc:	06                   	push   es
      fd:	01 00                	add    DWORD PTR [eax],eax
      ff:	00 05 03 40 92 00    	add    BYTE PTR ds:0x924003,al
     105:	9f                   	lahf   
     106:	04 04                	add    al,0x4
     108:	80 00 00             	add    BYTE PTR [eax],0x0
     10b:	00 00                	add    BYTE PTR [eax],al
     10d:	48                   	dec    eax
     10e:	01 00                	add    DWORD PTR [eax],eax
     110:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     113:	76 00                	jbe    115 <__fmodf2+0xe9>
     115:	00 00                	add    BYTE PTR [eax],al
     117:	04 01                	add    al,0x1
     119:	c3                   	ret    
     11a:	00 00                	add    BYTE PTR [eax],al
     11c:	00 0c 39             	add    BYTE PTR [ecx+edi*1],cl
     11f:	01 00                	add    DWORD PTR [eax],eax
     121:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
     124:	00 00                	add    BYTE PTR [eax],al
     126:	70 00                	jo     128 <__fmodf2+0xfc>
     128:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
     12e:	79 00                	jns    130 <__fmodf2+0x104>
     130:	00 00                	add    BYTE PTR [eax],al
     132:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
     139:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
     13c:	32 00                	xor    al,BYTE PTR [eax]
     13e:	00 00                	add    BYTE PTR [eax],al
     140:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
     147:	03 08                	add    ecx,DWORD PTR [eax]
     149:	05 00 00 00 00       	add    eax,0x0
     14e:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
     151:	ad                   	lods   eax,DWORD PTR ds:[esi]
     152:	00 00                	add    BYTE PTR [eax],al
     154:	00 03                	add    BYTE PTR [ebx],al
     156:	01 06                	add    DWORD PTR [esi],eax
     158:	48                   	dec    eax
     159:	00 00                	add    BYTE PTR [eax],al
     15b:	00 03                	add    BYTE PTR [ebx],al
     15d:	01 08                	add    DWORD PTR [eax],ecx
     15f:	3f                   	aas    
     160:	00 00                	add    BYTE PTR [eax],al
     162:	00 03                	add    BYTE PTR [ebx],al
     164:	02 07                	add    al,BYTE PTR [edi]
     166:	0e                   	push   cs
     167:	00 00                	add    BYTE PTR [eax],al
     169:	00 03                	add    BYTE PTR [ebx],al
     16b:	04 07                	add    al,0x7
     16d:	2d 00 00 00 03       	sub    eax,0x3000000
     172:	01 06                	add    DWORD PTR [esi],eax
     174:	41                   	inc    ecx
     175:	00 00                	add    BYTE PTR [eax],al
     177:	00 03                	add    BYTE PTR [ebx],al
     179:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     17f:	03 08                	add    ecx,DWORD PTR [eax]
     181:	07                   	pop    es
     182:	28 00                	sub    BYTE PTR [eax],al
     184:	00 00                	add    BYTE PTR [eax],al
     186:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
     189:	2a 01                	sub    al,BYTE PTR [ecx]
     18b:	00 00                	add    BYTE PTR [eax],al
     18d:	04 04                	add    al,0x4
     18f:	48                   	dec    eax
     190:	00 00                	add    BYTE PTR [eax],al
     192:	00 05 63 01 00 00    	add    BYTE PTR ds:0x163,al
     198:	01 26                	add    DWORD PTR [esi],esp
     19a:	25 00 00 00 70       	and    eax,0x70000000
     19f:	00 00                	add    BYTE PTR [eax],al
     1a1:	9f                   	lahf   
     1a2:	55                   	push   ebp
     1a3:	00 00                	add    BYTE PTR [eax],al
     1a5:	00 01                	add    BYTE PTR [ecx],al
     1a7:	9c                   	pushf  
     1a8:	dd 00                	fld    QWORD PTR [eax]
     1aa:	00 00                	add    BYTE PTR [eax],al
     1ac:	06                   	push   es
     1ad:	45                   	inc    ebp
     1ae:	12 00                	adc    al,BYTE PTR [eax]
     1b0:	00 01                	add    BYTE PTR [ecx],al
     1b2:	26 80 00 00          	add    BYTE PTR es:[eax],0x0
     1b6:	00 02                	add    BYTE PTR [edx],al
     1b8:	91                   	xchg   ecx,eax
     1b9:	00 06                	add    BYTE PTR [esi],al
     1bb:	33 01                	xor    eax,DWORD PTR [ecx]
     1bd:	00 00                	add    BYTE PTR [eax],al
     1bf:	01 26                	add    DWORD PTR [esi],esp
     1c1:	80 00 00             	add    BYTE PTR [eax],0x0
     1c4:	00 02                	add    BYTE PTR [edx],al
     1c6:	91                   	xchg   ecx,eax
     1c7:	04 07                	add    al,0x7
     1c9:	63 00                	arpl   WORD PTR [eax],ax
     1cb:	01 28                	add    DWORD PTR [eax],ebp
     1cd:	48                   	dec    eax
     1ce:	00 00                	add    BYTE PTR [eax],al
     1d0:	00 01                	add    BYTE PTR [ecx],al
     1d2:	51                   	push   ecx
     1d3:	07                   	pop    es
     1d4:	70 00                	jo     1d6 <__fmodf2+0x1aa>
     1d6:	01 28                	add    DWORD PTR [eax],ebp
     1d8:	80 00 00             	add    BYTE PTR [eax],0x0
     1db:	00 01                	add    BYTE PTR [ecx],al
     1dd:	56                   	push   esi
     1de:	07                   	pop    es
     1df:	73 00                	jae    1e1 <__fmodf2+0x1b5>
     1e1:	01 28                	add    DWORD PTR [eax],ebp
     1e3:	80 00 00             	add    BYTE PTR [eax],0x0
     1e6:	00 01                	add    BYTE PTR [ecx],al
     1e8:	53                   	push   ebx
     1e9:	00 05 6b 01 00 00    	add    BYTE PTR ds:0x16b,al
     1ef:	01 34 25 00 00 00 c5 	add    DWORD PTR [eiz*1-0x3b000000],esi
     1f6:	00 00                	add    BYTE PTR [eax],al
     1f8:	9f                   	lahf   
     1f9:	55                   	push   ebp
     1fa:	00 00                	add    BYTE PTR [eax],al
     1fc:	00 01                	add    BYTE PTR [ecx],al
     1fe:	9c                   	pushf  
     1ff:	34 01                	xor    al,0x1
     201:	00 00                	add    BYTE PTR [eax],al
     203:	06                   	push   es
     204:	45                   	inc    ebp
     205:	12 00                	adc    al,BYTE PTR [eax]
     207:	00 01                	add    BYTE PTR [ecx],al
     209:	34 80                	xor    al,0x80
     20b:	00 00                	add    BYTE PTR [eax],al
     20d:	00 02                	add    BYTE PTR [edx],al
     20f:	91                   	xchg   ecx,eax
     210:	00 06                	add    BYTE PTR [esi],al
     212:	33 01                	xor    eax,DWORD PTR [ecx]
     214:	00 00                	add    BYTE PTR [eax],al
     216:	01 34 80             	add    DWORD PTR [eax+eax*4],esi
     219:	00 00                	add    BYTE PTR [eax],al
     21b:	00 02                	add    BYTE PTR [edx],al
     21d:	91                   	xchg   ecx,eax
     21e:	04 07                	add    al,0x7
     220:	63 00                	arpl   WORD PTR [eax],ax
     222:	01 36                	add    DWORD PTR [esi],esi
     224:	48                   	dec    eax
     225:	00 00                	add    BYTE PTR [eax],al
     227:	00 01                	add    BYTE PTR [ecx],al
     229:	51                   	push   ecx
     22a:	07                   	pop    es
     22b:	70 00                	jo     22d <__fmodf2+0x201>
     22d:	01 36                	add    DWORD PTR [esi],esi
     22f:	80 00 00             	add    BYTE PTR [eax],0x0
     232:	00 01                	add    BYTE PTR [ecx],al
     234:	56                   	push   esi
     235:	07                   	pop    es
     236:	73 00                	jae    238 <__fmodf2+0x20c>
     238:	01 36                	add    DWORD PTR [esi],esi
     23a:	80 00 00             	add    BYTE PTR [eax],0x0
     23d:	00 01                	add    BYTE PTR [ecx],al
     23f:	53                   	push   ebx
     240:	00 08                	add    BYTE PTR [eax],cl
     242:	78 00                	js     244 <__fmodf2+0x218>
     244:	00 00                	add    BYTE PTR [eax],al
     246:	02 33                	add    dh,BYTE PTR [ebx]
     248:	45                   	inc    ebp
     249:	01 00                	add    DWORD PTR [eax],eax
     24b:	00 05 03 40 92 00    	add    BYTE PTR ds:0x924003,al
     251:	9f                   	lahf   
     252:	04 04                	add    al,0x4
     254:	80 00 00             	add    BYTE PTR [eax],0x0
     257:	00 00                	add    BYTE PTR [eax],al
     259:	3c 01                	cmp    al,0x1
     25b:	00 00                	add    BYTE PTR [eax],al
     25d:	04 00                	add    al,0x0
     25f:	f4                   	hlt    
     260:	00 00                	add    BYTE PTR [eax],al
     262:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     265:	c3                   	ret    
     266:	00 00                	add    BYTE PTR [eax],al
     268:	00 0c 82             	add    BYTE PTR [edx+eax*4],cl
     26b:	01 00                	add    DWORD PTR [eax],eax
     26d:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
     270:	00 00                	add    BYTE PTR [eax],al
     272:	1c 01                	sbb    al,0x1
     274:	00 9f 2e 01 00 00    	add    BYTE PTR [edi+0x12e],bl
     27a:	23 01                	and    eax,DWORD PTR [ecx]
     27c:	00 00                	add    BYTE PTR [eax],al
     27e:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
     285:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
     288:	32 00                	xor    al,BYTE PTR [eax]
     28a:	00 00                	add    BYTE PTR [eax],al
     28c:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
     293:	03 08                	add    ecx,DWORD PTR [eax]
     295:	05 00 00 00 00       	add    eax,0x0
     29a:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
     29d:	ad                   	lods   eax,DWORD PTR ds:[esi]
     29e:	00 00                	add    BYTE PTR [eax],al
     2a0:	00 03                	add    BYTE PTR [ebx],al
     2a2:	01 06                	add    DWORD PTR [esi],eax
     2a4:	48                   	dec    eax
     2a5:	00 00                	add    BYTE PTR [eax],al
     2a7:	00 03                	add    BYTE PTR [ebx],al
     2a9:	01 08                	add    DWORD PTR [eax],ecx
     2ab:	3f                   	aas    
     2ac:	00 00                	add    BYTE PTR [eax],al
     2ae:	00 03                	add    BYTE PTR [ebx],al
     2b0:	02 07                	add    al,BYTE PTR [edi]
     2b2:	0e                   	push   cs
     2b3:	00 00                	add    BYTE PTR [eax],al
     2b5:	00 03                	add    BYTE PTR [ebx],al
     2b7:	04 07                	add    al,0x7
     2b9:	2d 00 00 00 03       	sub    eax,0x3000000
     2be:	01 06                	add    DWORD PTR [esi],eax
     2c0:	41                   	inc    ecx
     2c1:	00 00                	add    BYTE PTR [eax],al
     2c3:	00 03                	add    BYTE PTR [ebx],al
     2c5:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     2cb:	03 08                	add    ecx,DWORD PTR [eax]
     2cd:	07                   	pop    es
     2ce:	28 00                	sub    BYTE PTR [eax],al
     2d0:	00 00                	add    BYTE PTR [eax],al
     2d2:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
     2d5:	2a 01                	sub    al,BYTE PTR [ecx]
     2d7:	00 00                	add    BYTE PTR [eax],al
     2d9:	04 04                	add    al,0x4
     2db:	48                   	dec    eax
     2dc:	00 00                	add    BYTE PTR [eax],al
     2de:	00 05 74 01 00 00    	add    BYTE PTR ds:0x174,al
     2e4:	01 2a                	add    DWORD PTR [edx],ebp
     2e6:	80 00 00             	add    BYTE PTR [eax],0x0
     2e9:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     2ec:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
     2f2:	01 9c d7 00 00 00 06 	add    DWORD PTR [edi+edx*8+0x6000000],ebx
     2f9:	73 00                	jae    2fb <__fmodf2+0x2cf>
     2fb:	01 2a                	add    DWORD PTR [edx],ebp
     2fd:	80 00 00             	add    BYTE PTR [eax],0x0
     300:	00 02                	add    BYTE PTR [edx],al
     302:	91                   	xchg   ecx,eax
     303:	00 07                	add    BYTE PTR [edi],al
     305:	7c 01                	jl     308 <__fmodf2+0x2dc>
     307:	00 00                	add    BYTE PTR [eax],al
     309:	01 2a                	add    DWORD PTR [edx],ebp
     30b:	80 00 00             	add    BYTE PTR [eax],0x0
     30e:	00 02                	add    BYTE PTR [edx],al
     310:	91                   	xchg   ecx,eax
     311:	04 08                	add    al,0x8
     313:	ab                   	stos   DWORD PTR es:[edi],eax
     314:	01 00                	add    DWORD PTR [eax],eax
     316:	00 01                	add    BYTE PTR [ecx],al
     318:	2c 80                	sub    al,0x80
     31a:	00 00                	add    BYTE PTR [eax],al
     31c:	00 05 03 44 92 00    	add    BYTE PTR ds:0x924403,al
     322:	9f                   	lahf   
     323:	09 63 68             	or     DWORD PTR [ebx+0x68],esp
     326:	00 01                	add    BYTE PTR [ecx],al
     328:	2d 25 00 00 00       	sub    eax,0x25
     32d:	01 56 00             	add    DWORD PTR [esi+0x0],edx
     330:	05 b1 01 00 00       	add    eax,0x1b1
     335:	01 3c 80             	add    DWORD PTR [eax+eax*4],edi
     338:	00 00                	add    BYTE PTR [eax],al
     33a:	00 b3 01 00 9f 97    	add    BYTE PTR [ebx-0x6860ffff],dh
     340:	00 00                	add    BYTE PTR [eax],al
     342:	00 01                	add    BYTE PTR [ecx],al
     344:	9c                   	pushf  
     345:	28 01                	sub    BYTE PTR [ecx],al
     347:	00 00                	add    BYTE PTR [eax],al
     349:	06                   	push   es
     34a:	73 00                	jae    34c <__fmodf2+0x320>
     34c:	01 3c 80             	add    DWORD PTR [eax+eax*4],edi
     34f:	00 00                	add    BYTE PTR [eax],al
     351:	00 02                	add    BYTE PTR [edx],al
     353:	91                   	xchg   ecx,eax
     354:	00 07                	add    BYTE PTR [edi],al
     356:	7c 01                	jl     359 <__fmodf2+0x32d>
     358:	00 00                	add    BYTE PTR [eax],al
     35a:	01 3c 80             	add    DWORD PTR [eax+eax*4],edi
     35d:	00 00                	add    BYTE PTR [eax],al
     35f:	00 02                	add    BYTE PTR [edx],al
     361:	91                   	xchg   ecx,eax
     362:	04 08                	add    al,0x8
     364:	ab                   	stos   DWORD PTR es:[edi],eax
     365:	01 00                	add    DWORD PTR [eax],eax
     367:	00 01                	add    BYTE PTR [ecx],al
     369:	3e 80 00 00          	add    BYTE PTR ds:[eax],0x0
     36d:	00 05 03 48 92 00    	add    BYTE PTR ds:0x924803,al
     373:	9f                   	lahf   
     374:	09 63 68             	or     DWORD PTR [ebx+0x68],esp
     377:	00 01                	add    BYTE PTR [ecx],al
     379:	3f                   	aas    
     37a:	25 00 00 00 01       	and    eax,0x1000000
     37f:	56                   	push   esi
     380:	00 0a                	add    BYTE PTR [edx],cl
     382:	78 00                	js     384 <__fmodf2+0x358>
     384:	00 00                	add    BYTE PTR [eax],al
     386:	02 33                	add    dh,BYTE PTR [ebx]
     388:	39 01                	cmp    DWORD PTR [ecx],eax
     38a:	00 00                	add    BYTE PTR [eax],al
     38c:	05 03 40 92 00       	add    eax,0x924003
     391:	9f                   	lahf   
     392:	04 04                	add    al,0x4
     394:	80 00 00             	add    BYTE PTR [eax],0x0
     397:	00 00                	add    BYTE PTR [eax],al
     399:	e8 01 00 00 04       	call   400039f <sysEnter_Vector+0x3ed039f>
     39e:	00 90 01 00 00 04    	add    BYTE PTR [eax+0x4000001],dl
     3a4:	01 c3                	add    ebx,eax
     3a6:	00 00                	add    BYTE PTR [eax],al
     3a8:	00 0c d7             	add    BYTE PTR [edi+edx*8],cl
     3ab:	01 00                	add    DWORD PTR [eax],eax
     3ad:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
     3b0:	00 00                	add    BYTE PTR [eax],al
     3b2:	4c                   	dec    esp
     3b3:	02 00                	add    al,BYTE PTR [eax]
     3b5:	9f                   	lahf   
     3b6:	65 02 00             	add    al,BYTE PTR gs:[eax]
     3b9:	00 ae 01 00 00 02    	add    BYTE PTR [esi+0x2000001],ch
     3bf:	01 08                	add    DWORD PTR [eax],ecx
     3c1:	3f                   	aas    
     3c2:	00 00                	add    BYTE PTR [eax],al
     3c4:	00 02                	add    BYTE PTR [edx],al
     3c6:	02 07                	add    al,BYTE PTR [edi]
     3c8:	0e                   	push   cs
     3c9:	00 00                	add    BYTE PTR [eax],al
     3cb:	00 02                	add    BYTE PTR [edx],al
     3cd:	04 07                	add    al,0x7
     3cf:	32 00                	xor    al,BYTE PTR [eax]
     3d1:	00 00                	add    BYTE PTR [eax],al
     3d3:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     3d6:	2d 00 00 00 02       	sub    eax,0x2000000
     3db:	01 06                	add    DWORD PTR [esi],eax
     3dd:	41                   	inc    ecx
     3de:	00 00                	add    BYTE PTR [eax],al
     3e0:	00 02                	add    BYTE PTR [edx],al
     3e2:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     3e8:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     3ef:	02 08                	add    cl,BYTE PTR [eax]
     3f1:	05 00 00 00 00       	add    eax,0x0
     3f6:	02 08                	add    cl,BYTE PTR [eax]
     3f8:	07                   	pop    es
     3f9:	28 00                	sub    BYTE PTR [eax],al
     3fb:	00 00                	add    BYTE PTR [eax],al
     3fd:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     404:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     407:	2a 01                	sub    al,BYTE PTR [ecx]
     409:	00 00                	add    BYTE PTR [eax],al
     40b:	04 04                	add    al,0x4
     40d:	78 00                	js     40f <__fmodf2+0x3e3>
     40f:	00 00                	add    BYTE PTR [eax],al
     411:	02 01                	add    al,BYTE PTR [ecx]
     413:	06                   	push   es
     414:	48                   	dec    eax
     415:	00 00                	add    BYTE PTR [eax],al
     417:	00 02                	add    BYTE PTR [edx],al
     419:	0c 04                	or     al,0x4
     41b:	ad                   	lods   eax,DWORD PTR ds:[esi]
     41c:	00 00                	add    BYTE PTR [eax],al
     41e:	00 05 c9 01 00 00    	add    BYTE PTR ds:0x1c9,al
     424:	01 0a                	add    DWORD PTR [edx],ecx
     426:	4c                   	dec    esp
     427:	02 00                	add    al,BYTE PTR [eax]
     429:	9f                   	lahf   
     42a:	77 00                	ja     42c <__fmodf2+0x400>
     42c:	00 00                	add    BYTE PTR [eax],al
     42e:	01 9c cc 00 00 00 06 	add    DWORD PTR [esp+ecx*8+0x6000000],ebx
     435:	73 00                	jae    437 <__fmodf2+0x40b>
     437:	01 0a                	add    DWORD PTR [edx],ecx
     439:	72 00                	jb     43b <__fmodf2+0x40f>
     43b:	00 00                	add    BYTE PTR [eax],al
     43d:	02 91 00 07 69 00    	add    dl,BYTE PTR [ecx+0x690700]
     443:	01 0c 4f             	add    DWORD PTR [edi+ecx*2],ecx
     446:	00 00                	add    BYTE PTR [eax],al
     448:	00 02                	add    BYTE PTR [edx],al
     44a:	91                   	xchg   ecx,eax
     44b:	6c                   	ins    BYTE PTR es:[edi],dx
     44c:	07                   	pop    es
     44d:	6a 00                	push   0x0
     44f:	01 0c 4f             	add    DWORD PTR [edi+ecx*2],ecx
     452:	00 00                	add    BYTE PTR [eax],al
     454:	00 02                	add    BYTE PTR [edx],al
     456:	91                   	xchg   ecx,eax
     457:	68 07 63 00 01       	push   0x1006307
     45c:	0d 78 00 00 00       	or     eax,0x78
     461:	02 91 67 00 05 b8    	add    dl,BYTE PTR [ecx-0x47faff99]
     467:	01 00                	add    DWORD PTR [eax],eax
     469:	00 01                	add    BYTE PTR [ecx],al
     46b:	16                   	push   ss
     46c:	c3                   	ret    
     46d:	02 00                	add    al,BYTE PTR [eax]
     46f:	9f                   	lahf   
     470:	bb 00 00 00 01       	mov    ebx,0x1000000
     475:	9c                   	pushf  
     476:	14 01                	adc    al,0x1
     478:	00 00                	add    BYTE PTR [eax],al
     47a:	06                   	push   es
     47b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     47c:	00 01                	add    BYTE PTR [ecx],al
     47e:	16                   	push   ss
     47f:	4f                   	dec    edi
     480:	00 00                	add    BYTE PTR [eax],al
     482:	00 02                	add    BYTE PTR [edx],al
     484:	91                   	xchg   ecx,eax
     485:	00 06                	add    BYTE PTR [esi],al
     487:	73 00                	jae    489 <__fmodf2+0x45d>
     489:	01 16                	add    DWORD PTR [esi],edx
     48b:	72 00                	jb     48d <__fmodf2+0x461>
     48d:	00 00                	add    BYTE PTR [eax],al
     48f:	02 91 04 07 69 00    	add    dl,BYTE PTR [ecx+0x690704]
     495:	01 18                	add    DWORD PTR [eax],ebx
     497:	4f                   	dec    edi
     498:	00 00                	add    BYTE PTR [eax],al
     49a:	00 02                	add    BYTE PTR [edx],al
     49c:	91                   	xchg   ecx,eax
     49d:	6c                   	ins    BYTE PTR es:[edi],dx
     49e:	08 d2                	or     dl,dl
     4a0:	01 00                	add    DWORD PTR [eax],eax
     4a2:	00 01                	add    BYTE PTR [ecx],al
     4a4:	18 4f 00             	sbb    BYTE PTR [edi+0x0],cl
     4a7:	00 00                	add    BYTE PTR [eax],al
     4a9:	02 91 68 00 09 bd    	add    dl,BYTE PTR [ecx-0x42f6ff98]
     4af:	01 00                	add    DWORD PTR [eax],eax
     4b1:	00 01                	add    BYTE PTR [ecx],al
     4b3:	26                   	es
     4b4:	72 00                	jb     4b6 <__fmodf2+0x48a>
     4b6:	00 00                	add    BYTE PTR [eax],al
     4b8:	7e 03                	jle    4bd <__fmodf2+0x491>
     4ba:	00 9f bd 00 00 00    	add    BYTE PTR [edi+0xbd],bl
     4c0:	01 9c 60 01 00 00 06 	add    DWORD PTR [eax+eiz*2+0x6000001],ebx
     4c7:	6e                   	outs   dx,BYTE PTR ds:[esi]
     4c8:	00 01                	add    BYTE PTR [ecx],al
     4ca:	26                   	es
     4cb:	4f                   	dec    edi
     4cc:	00 00                	add    BYTE PTR [eax],al
     4ce:	00 02                	add    BYTE PTR [edx],al
     4d0:	91                   	xchg   ecx,eax
     4d1:	00 06                	add    BYTE PTR [esi],al
     4d3:	73 00                	jae    4d5 <__fmodf2+0x4a9>
     4d5:	01 26                	add    DWORD PTR [esi],esp
     4d7:	72 00                	jb     4d9 <__fmodf2+0x4ad>
     4d9:	00 00                	add    BYTE PTR [eax],al
     4db:	02 91 04 07 69 00    	add    dl,BYTE PTR [ecx+0x690704]
     4e1:	01 28                	add    DWORD PTR [eax],ebp
     4e3:	4f                   	dec    edi
     4e4:	00 00                	add    BYTE PTR [eax],al
     4e6:	00 02                	add    BYTE PTR [edx],al
     4e8:	91                   	xchg   ecx,eax
     4e9:	6c                   	ins    BYTE PTR es:[edi],dx
     4ea:	08 d2                	or     dl,dl
     4ec:	01 00                	add    DWORD PTR [eax],eax
     4ee:	00 01                	add    BYTE PTR [ecx],al
     4f0:	28 4f 00             	sub    BYTE PTR [edi+0x0],cl
     4f3:	00 00                	add    BYTE PTR [eax],al
     4f5:	02 91 68 00 0a c3    	add    dl,BYTE PTR [ecx-0x3cf5ff98]
     4fb:	01 00                	add    DWORD PTR [eax],eax
     4fd:	00 01                	add    BYTE PTR [ecx],al
     4ff:	38 4f 00             	cmp    BYTE PTR [edi+0x0],cl
     502:	00 00                	add    BYTE PTR [eax],al
     504:	3b 04 00             	cmp    eax,DWORD PTR [eax+eax*1]
     507:	9f                   	lahf   
     508:	5c                   	pop    esp
     509:	00 00                	add    BYTE PTR [eax],al
     50b:	00 01                	add    BYTE PTR [ecx],al
     50d:	9c                   	pushf  
     50e:	ac                   	lods   al,BYTE PTR ds:[esi]
     50f:	01 00                	add    DWORD PTR [eax],eax
     511:	00 06                	add    BYTE PTR [esi],al
     513:	73 74                	jae    589 <__fmodf2+0x55d>
     515:	72 00                	jb     517 <__fmodf2+0x4eb>
     517:	01 38                	add    DWORD PTR [eax],edi
     519:	72 00                	jb     51b <__fmodf2+0x4ef>
     51b:	00 00                	add    BYTE PTR [eax],al
     51d:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
     523:	73 00                	jae    525 <__fmodf2+0x4f9>
     525:	01 3a                	add    DWORD PTR [edx],edi
     527:	4f                   	dec    edi
     528:	00 00                	add    BYTE PTR [eax],al
     52a:	00 02                	add    BYTE PTR [edx],al
     52c:	91                   	xchg   ecx,eax
     52d:	74 0b                	je     53a <__fmodf2+0x50e>
     52f:	52                   	push   edx
     530:	04 00                	add    al,0x0
     532:	9f                   	lahf   
     533:	40                   	inc    eax
     534:	00 00                	add    BYTE PTR [eax],al
     536:	00 07                	add    BYTE PTR [edi],al
     538:	69 00 01 3e 4f 00    	imul   eax,DWORD PTR [eax],0x4f3e01
     53e:	00 00                	add    BYTE PTR [eax],al
     540:	02 91 70 00 00 09    	add    dl,BYTE PTR [ecx+0x9000070]
     546:	5c                   	pop    esp
     547:	0f 00 00             	sldt   WORD PTR [eax]
     54a:	01 45 4f             	add    DWORD PTR [ebp+0x4f],eax
     54d:	00 00                	add    BYTE PTR [eax],al
     54f:	00 97 04 00 9f 1a    	add    BYTE PTR [edi+0x1a9f0004],dl
     555:	00 00                	add    BYTE PTR [eax],al
     557:	00 01                	add    BYTE PTR [ecx],al
     559:	9c                   	pushf  
     55a:	d4 01                	aam    0x1
     55c:	00 00                	add    BYTE PTR [eax],al
     55e:	06                   	push   es
     55f:	73 74                	jae    5d5 <__fmodf2+0x5a9>
     561:	72 00                	jb     563 <__fmodf2+0x537>
     563:	01 45 72             	add    DWORD PTR [ebp+0x72],eax
     566:	00 00                	add    BYTE PTR [eax],al
     568:	00 02                	add    BYTE PTR [edx],al
     56a:	91                   	xchg   ecx,eax
     56b:	00 00                	add    BYTE PTR [eax],al
     56d:	0c 78                	or     al,0x78
     56f:	00 00                	add    BYTE PTR [eax],al
     571:	00 02                	add    BYTE PTR [edx],al
     573:	33 e5                	xor    esp,ebp
     575:	01 00                	add    DWORD PTR [eax],eax
     577:	00 05 03 40 92 00    	add    BYTE PTR ds:0x924003,al
     57d:	9f                   	lahf   
     57e:	04 04                	add    al,0x4
     580:	72 00                	jb     582 <__fmodf2+0x556>
     582:	00 00                	add    BYTE PTR [eax],al
     584:	00 ae 01 00 00 04    	add    BYTE PTR [esi+0x4000001],ch
     58a:	00 5c 02 00          	add    BYTE PTR [edx+eax*1+0x0],bl
     58e:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     591:	c3                   	ret    
     592:	00 00                	add    BYTE PTR [eax],al
     594:	00 0c 5c             	add    BYTE PTR [esp+ebx*2],cl
     597:	02 00                	add    al,BYTE PTR [eax]
     599:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
     59c:	00 00                	add    BYTE PTR [eax],al
     59e:	b4 04                	mov    ah,0x4
     5a0:	00 9f 6e 01 00 00    	add    BYTE PTR [edi+0x16e],bl
     5a6:	69 02 00 00 02 01    	imul   eax,DWORD PTR [edx],0x1020000
     5ac:	06                   	push   es
     5ad:	41                   	inc    ecx
     5ae:	00 00                	add    BYTE PTR [eax],al
     5b0:	00 02                	add    BYTE PTR [edx],al
     5b2:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     5b8:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     5bf:	02 08                	add    cl,BYTE PTR [eax]
     5c1:	05 00 00 00 00       	add    eax,0x0
     5c6:	02 01                	add    al,BYTE PTR [ecx]
     5c8:	08 3f                	or     BYTE PTR [edi],bh
     5ca:	00 00                	add    BYTE PTR [eax],al
     5cc:	00 02                	add    BYTE PTR [edx],al
     5ce:	02 07                	add    al,BYTE PTR [edi]
     5d0:	0e                   	push   cs
     5d1:	00 00                	add    BYTE PTR [eax],al
     5d3:	00 04 45 02 00 00 02 	add    BYTE PTR [eax*2+0x2000002],al
     5da:	34 5a                	xor    al,0x5a
     5dc:	00 00                	add    BYTE PTR [eax],al
     5de:	00 02                	add    BYTE PTR [edx],al
     5e0:	04 07                	add    al,0x7
     5e2:	32 00                	xor    al,BYTE PTR [eax]
     5e4:	00 00                	add    BYTE PTR [eax],al
     5e6:	02 08                	add    cl,BYTE PTR [eax]
     5e8:	07                   	pop    es
     5e9:	28 00                	sub    BYTE PTR [eax],al
     5eb:	00 00                	add    BYTE PTR [eax],al
     5ed:	04 01                	add    al,0x1
     5ef:	02 00                	add    al,BYTE PTR [eax]
     5f1:	00 02                	add    BYTE PTR [edx],al
     5f3:	56                   	push   esi
     5f4:	5a                   	pop    edx
     5f5:	00 00                	add    BYTE PTR [eax],al
     5f7:	00 02                	add    BYTE PTR [edx],al
     5f9:	04 05                	add    al,0x5
     5fb:	05 00 00 00 02       	add    eax,0x2000000
     600:	0c 04                	or     al,0x4
     602:	ad                   	lods   eax,DWORD PTR ds:[esi]
     603:	00 00                	add    BYTE PTR [eax],al
     605:	00 02                	add    BYTE PTR [edx],al
     607:	04 07                	add    al,0x7
     609:	2a 01                	sub    al,BYTE PTR [ecx]
     60b:	00 00                	add    BYTE PTR [eax],al
     60d:	02 01                	add    al,BYTE PTR [ecx]
     60f:	06                   	push   es
     610:	48                   	dec    eax
     611:	00 00                	add    BYTE PTR [eax],al
     613:	00 02                	add    BYTE PTR [edx],al
     615:	04 07                	add    al,0x7
     617:	2d 00 00 00 05       	sub    eax,0x5000000
     61c:	04 88                	add    al,0x88
     61e:	00 00                	add    BYTE PTR [eax],al
     620:	00 06                	add    BYTE PTR [esi],al
     622:	4e                   	dec    esi
     623:	02 00                	add    al,BYTE PTR [eax]
     625:	00 01                	add    BYTE PTR [ecx],al
     627:	0f b4 04 00          	lfs    eax,FWORD PTR [eax+eax*1]
     62b:	9f                   	lahf   
     62c:	ba 00 00 00 01       	mov    edx,0x1000000
     631:	9c                   	pushf  
     632:	f4                   	hlt    
     633:	00 00                	add    BYTE PTR [eax],al
     635:	00 07                	add    BYTE PTR [edi],al
     637:	78 00                	js     639 <__fmodf2+0x60d>
     639:	01 0f                	add    DWORD PTR [edi],ecx
     63b:	33 00                	xor    eax,DWORD PTR [eax]
     63d:	00 00                	add    BYTE PTR [eax],al
     63f:	02 91 00 07 79 00    	add    dl,BYTE PTR [ecx+0x790700]
     645:	01 0f                	add    DWORD PTR [edi],ecx
     647:	33 00                	xor    eax,DWORD PTR [eax]
     649:	00 00                	add    BYTE PTR [eax],al
     64b:	02 91 04 08 63 6d    	add    dl,BYTE PTR [ecx+0x6d630804]
     651:	64 00 01             	add    BYTE PTR fs:[ecx],al
     654:	11 f4                	adc    esp,esi
     656:	00 00                	add    BYTE PTR [eax],al
     658:	00 02                	add    BYTE PTR [edx],al
     65a:	91                   	xchg   ecx,eax
     65b:	66 09 0b             	or     WORD PTR [ebx],cx
     65e:	02 00                	add    al,BYTE PTR [eax]
     660:	00 01                	add    BYTE PTR [ecx],al
     662:	12 04 01             	adc    al,BYTE PTR [ecx+eax*1]
     665:	00 00                	add    BYTE PTR [eax],al
     667:	02 91 63 09 57 02    	add    dl,BYTE PTR [ecx+0x2570963]
     66d:	00 00                	add    BYTE PTR [eax],al
     66f:	01 12                	add    DWORD PTR [edx],edx
     671:	04 01                	add    al,0x1
     673:	00 00                	add    BYTE PTR [eax],al
     675:	02 91 60 00 0a 88    	add    dl,BYTE PTR [ecx-0x77f5ffa0]
     67b:	00 00                	add    BYTE PTR [eax],al
     67d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     680:	00 00                	add    BYTE PTR [eax],al
     682:	0b 81 00 00 00 09    	or     eax,DWORD PTR [ecx+0x9000000]
     688:	00 0a                	add    BYTE PTR [edx],cl
     68a:	88 00                	mov    BYTE PTR [eax],al
     68c:	00 00                	add    BYTE PTR [eax],al
     68e:	14 01                	adc    al,0x1
     690:	00 00                	add    BYTE PTR [eax],al
     692:	0b 81 00 00 00 02    	or     eax,DWORD PTR [ecx+0x2000000]
     698:	00 0c ee             	add    BYTE PTR [esi+ebp*8],cl
     69b:	01 00                	add    DWORD PTR [eax],eax
     69d:	00 01                	add    BYTE PTR [ecx],al
     69f:	1f                   	pop    ds
     6a0:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6a1:	05 00 9f 5a 00       	add    eax,0x5a9f00
     6a6:	00 00                	add    BYTE PTR [eax],al
     6a8:	01 9c 38 01 00 00 08 	add    DWORD PTR [eax+edi*1+0x8000001],ebx
     6af:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     6b2:	00 01                	add    BYTE PTR [ecx],al
     6b4:	21 f4                	and    esp,esi
     6b6:	00 00                	add    BYTE PTR [eax],al
     6b8:	00 02                	add    BYTE PTR [edx],al
     6ba:	91                   	xchg   ecx,eax
     6bb:	66                   	data16
     6bc:	00 0c 1d 02 00 00 01 	add    BYTE PTR [ebx*1+0x1000002],cl
     6c3:	29 c8                	sub    eax,ecx
     6c5:	05 00 9f 5a 00       	add    eax,0x5a9f00
     6ca:	00 00                	add    BYTE PTR [eax],al
     6cc:	01 9c 5c 01 00 00 08 	add    DWORD PTR [esp+ebx*2+0x8000001],ebx
     6d3:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     6d6:	00 01                	add    BYTE PTR [ecx],al
     6d8:	2b f4                	sub    esi,esp
     6da:	00 00                	add    BYTE PTR [eax],al
     6dc:	00 02                	add    BYTE PTR [edx],al
     6de:	91                   	xchg   ecx,eax
     6df:	66                   	data16
     6e0:	00 0d 10 02 00 00    	add    BYTE PTR ds:0x210,cl
     6e6:	03 35 6d 01 00 00    	add    esi,DWORD PTR ds:0x16d
     6ec:	05 03 50 92 00       	add    eax,0x925003
     6f1:	9f                   	lahf   
     6f2:	05 04 68 00 00       	add    eax,0x6804
     6f7:	00 0d 33 02 00 00    	add    BYTE PTR ds:0x233,cl
     6fd:	03 36                	add    esi,DWORD PTR [esi]
     6ff:	4f                   	dec    edi
     700:	00 00                	add    BYTE PTR [eax],al
     702:	00 05 03 4c 92 00    	add    BYTE PTR ds:0x924c03,al
     708:	9f                   	lahf   
     709:	0d 78 00 00 00       	or     eax,0x78
     70e:	04 33                	add    al,0x33
     710:	95                   	xchg   ebp,eax
     711:	01 00                	add    DWORD PTR [eax],eax
     713:	00 05 03 40 92 00    	add    BYTE PTR ds:0x924003,al
     719:	9f                   	lahf   
     71a:	05 04 96 00 00       	add    eax,0x9604
     71f:	00 0d e3 01 00 00    	add    BYTE PTR ds:0x1e3,cl
     725:	01 0d ac 01 00 00    	add    DWORD PTR ds:0x1ac,ecx
     72b:	05 03 20 88 00       	add    eax,0x882003
     730:	9f                   	lahf   
     731:	0e                   	push   cs
     732:	04 01                	add    al,0x1
     734:	00 00                	add    BYTE PTR [eax],al
     736:	00 f9                	add    cl,bh
     738:	03 00                	add    eax,DWORD PTR [eax]
     73a:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     73d:	25 03 00 00 04       	and    eax,0x4000003
     742:	01 c3                	add    ebx,eax
     744:	00 00                	add    BYTE PTR [eax],al
     746:	00 0c ed 02 00 00 4d 	add    BYTE PTR [ebp*8+0x4d000002],cl
     74d:	00 00                	add    BYTE PTR [eax],al
     74f:	00 24 06             	add    BYTE PTR [esi+eax*1],ah
     752:	00 9f 41 04 00 00    	add    BYTE PTR [edi+0x441],bl
     758:	35 03 00 00 02       	xor    eax,0x2000003
     75d:	01 08                	add    DWORD PTR [eax],ecx
     75f:	3f                   	aas    
     760:	00 00                	add    BYTE PTR [eax],al
     762:	00 02                	add    BYTE PTR [edx],al
     764:	02 07                	add    al,BYTE PTR [edi]
     766:	0e                   	push   cs
     767:	00 00                	add    BYTE PTR [eax],al
     769:	00 02                	add    BYTE PTR [edx],al
     76b:	04 07                	add    al,0x7
     76d:	32 00                	xor    al,BYTE PTR [eax]
     76f:	00 00                	add    BYTE PTR [eax],al
     771:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     774:	2d 00 00 00 02       	sub    eax,0x2000000
     779:	01 06                	add    DWORD PTR [esi],eax
     77b:	41                   	inc    ecx
     77c:	00 00                	add    BYTE PTR [eax],al
     77e:	00 02                	add    BYTE PTR [edx],al
     780:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     786:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     78d:	02 08                	add    cl,BYTE PTR [eax]
     78f:	05 00 00 00 00       	add    eax,0x0
     794:	02 08                	add    cl,BYTE PTR [eax]
     796:	07                   	pop    es
     797:	28 00                	sub    BYTE PTR [eax],al
     799:	00 00                	add    BYTE PTR [eax],al
     79b:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     7a2:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     7a5:	2a 01                	sub    al,BYTE PTR [ecx]
     7a7:	00 00                	add    BYTE PTR [eax],al
     7a9:	04 04                	add    al,0x4
     7ab:	78 00                	js     7ad <__fmodf2+0x781>
     7ad:	00 00                	add    BYTE PTR [eax],al
     7af:	02 01                	add    al,BYTE PTR [ecx]
     7b1:	06                   	push   es
     7b2:	48                   	dec    eax
     7b3:	00 00                	add    BYTE PTR [eax],al
     7b5:	00 05 45 02 00 00    	add    BYTE PTR ds:0x245,al
     7bb:	02 34 33             	add    dh,BYTE PTR [ebx+esi*1]
     7be:	00 00                	add    BYTE PTR [eax],al
     7c0:	00 05 91 02 00 00    	add    BYTE PTR ds:0x291,al
     7c6:	03 d8                	add    ebx,eax
     7c8:	33 00                	xor    eax,DWORD PTR [eax]
     7ca:	00 00                	add    BYTE PTR [eax],al
     7cc:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     7cf:	ad                   	lods   eax,DWORD PTR ds:[esi]
     7d0:	00 00                	add    BYTE PTR [eax],al
     7d2:	00 06                	add    BYTE PTR [esi],al
     7d4:	a0 03 00 00 04       	mov    al,ds:0x4000003
     7d9:	33 00                	xor    eax,DWORD PTR [eax]
     7db:	00 00                	add    BYTE PTR [eax],al
     7dd:	04 15                	add    al,0x15
     7df:	9d                   	popf   
     7e0:	01 00                	add    DWORD PTR [eax],eax
     7e2:	00 07                	add    BYTE PTR [edi],al
     7e4:	51                   	push   ecx
     7e5:	04 00                	add    al,0x0
     7e7:	00 00                	add    BYTE PTR [eax],al
     7e9:	07                   	pop    es
     7ea:	96                   	xchg   esi,eax
     7eb:	04 00                	add    al,0x0
     7ed:	00 01                	add    BYTE PTR [ecx],al
     7ef:	07                   	pop    es
     7f0:	84 02                	test   BYTE PTR [edx],al
     7f2:	00 00                	add    BYTE PTR [eax],al
     7f4:	02 07                	add    al,BYTE PTR [edi]
     7f6:	83 03 00             	add    DWORD PTR [ebx],0x0
     7f9:	00 03                	add    BYTE PTR [ebx],al
     7fb:	07                   	pop    es
     7fc:	6a 02                	push   0x2
     7fe:	00 00                	add    BYTE PTR [eax],al
     800:	04 07                	add    al,0x7
     802:	da 04 00             	fiadd  DWORD PTR [eax+eax*1]
     805:	00 05 07 78 04 00    	add    BYTE PTR ds:0x47807,al
     80b:	00 0a                	add    BYTE PTR [edx],cl
     80d:	07                   	pop    es
     80e:	c4 03                	les    eax,FWORD PTR [ebx]
     810:	00 00                	add    BYTE PTR [eax],al
     812:	0b 07                	or     eax,DWORD PTR [edi]
     814:	2a 04 00             	sub    al,BYTE PTR [eax+eax*1]
     817:	00 0c 07             	add    BYTE PTR [edi+eax*1],cl
     81a:	91                   	xchg   ecx,eax
     81b:	03 00                	add    eax,DWORD PTR [eax]
     81d:	00 0d 07 aa 03 00    	add    BYTE PTR ds:0x3aa07,cl
     823:	00 0e                	add    BYTE PTR [esi],cl
     825:	07                   	pop    es
     826:	77 02                	ja     82a <__fmodf2+0x7fe>
     828:	00 00                	add    BYTE PTR [eax],al
     82a:	0f 07                	sysret 
     82c:	f4                   	hlt    
     82d:	03 00                	add    eax,DWORD PTR [eax]
     82f:	00 10                	add    BYTE PTR [eax],dl
     831:	07                   	pop    es
     832:	27                   	daa    
     833:	05 00 00 11 07       	add    eax,0x7110000
     838:	05 05 00 00 4f       	add    eax,0x4f000005
     83d:	07                   	pop    es
     83e:	cb                   	retf   
     83f:	04 00                	add    al,0x0
     841:	00 50 07             	add    BYTE PTR [eax+0x7],dl
     844:	44                   	inc    esp
     845:	04 00                	add    al,0x0
     847:	00 59 07             	add    BYTE PTR [ecx+0x7],bl
     84a:	14 05                	adc    al,0x5
     84c:	00 00                	add    BYTE PTR [eax],al
     84e:	61                   	popa   
     84f:	07                   	pop    es
     850:	49                   	dec    ecx
     851:	03 00                	add    eax,DWORD PTR [eax]
     853:	00 97 08 61 04 00    	add    BYTE PTR [edi+0x46108],dl
     859:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     85c:	08 37                	or     BYTE PTR [edi],dh
     85e:	04 00                	add    al,0x0
     860:	00 64 01 08          	add    BYTE PTR [ecx+eax*1+0x8],ah
     864:	44                   	inc    esp
     865:	05 00 00 65 01       	add    eax,0x1650000
     86a:	08 25 03 00 00 66    	or     BYTE PTR ds:0x66000003,ah
     870:	01 08                	add    DWORD PTR [eax],ecx
     872:	56                   	push   esi
     873:	05 00 00 67 01       	add    eax,0x1670000
     878:	08 b7 03 00 00 68    	or     BYTE PTR [edi+0x68000003],dh
     87e:	01 08                	add    DWORD PTR [eax],ecx
     880:	d6                   	(bad)  
     881:	02 00                	add    al,BYTE PTR [eax]
     883:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
     886:	08 85 04 00 00 70    	or     BYTE PTR [ebp+0x70000004],al
     88c:	01 08                	add    DWORD PTR [eax],ecx
     88e:	39 03                	cmp    DWORD PTR [ebx],eax
     890:	00 00                	add    BYTE PTR [eax],al
     892:	71 01                	jno    895 <__fmodf2+0x869>
     894:	08 e8                	or     al,ch
     896:	04 00                	add    al,0x0
     898:	00 00                	add    BYTE PTR [eax],al
     89a:	03 08                	add    ecx,DWORD PTR [eax]
     89c:	d9 03                	fld    DWORD PTR [ebx]
     89e:	00 00                	add    BYTE PTR [eax],al
     8a0:	01 03                	add    DWORD PTR [ebx],eax
     8a2:	08 e8                	or     al,ch
     8a4:	03 00                	add    eax,DWORD PTR [eax]
     8a6:	00 02                	add    BYTE PTR [edx],al
     8a8:	03 08                	add    ecx,DWORD PTR [eax]
     8aa:	73 03                	jae    8af <__fmodf2+0x883>
     8ac:	00 00                	add    BYTE PTR [eax],al
     8ae:	03 03                	add    eax,DWORD PTR [ebx]
     8b0:	08 b6 02 00 00 04    	or     BYTE PTR [esi+0x4000002],dh
     8b6:	03 08                	add    ecx,DWORD PTR [eax]
     8b8:	15 03 00 00 05       	adc    eax,0x5000003
     8bd:	03 08                	add    ecx,DWORD PTR [eax]
     8bf:	64 03 00             	add    eax,DWORD PTR fs:[eax]
     8c2:	00 06                	add    BYTE PTR [esi],al
     8c4:	03 08                	add    ecx,DWORD PTR [eax]
     8c6:	b2 04                	mov    dl,0x4
     8c8:	00 00                	add    BYTE PTR [eax],al
     8ca:	07                   	pop    es
     8cb:	03 08                	add    ecx,DWORD PTR [eax]
     8cd:	01 04 00             	add    DWORD PTR [eax+eax*1],eax
     8d0:	00 00                	add    BYTE PTR [eax],al
     8d2:	09 00                	or     DWORD PTR [eax],eax
     8d4:	09 9e 02 00 00 01    	or     DWORD PTR [esi+0x1000002],ebx
     8da:	09 72 00             	or     DWORD PTR [edx+0x0],esi
     8dd:	00 00                	add    BYTE PTR [eax],al
     8df:	24 06                	and    al,0x6
     8e1:	00 9f 44 01 00 00    	add    BYTE PTR [edi+0x144],bl
     8e7:	01 9c 49 02 00 00 0a 	add    DWORD PTR [ecx+ecx*2+0xa000002],ebx
     8ee:	98                   	cwde   
     8ef:	02 00                	add    al,BYTE PTR [eax]
     8f1:	00 01                	add    BYTE PTR [ecx],al
     8f3:	09 72 00             	or     DWORD PTR [edx+0x0],esi
     8f6:	00 00                	add    BYTE PTR [eax],al
     8f8:	02 91 00 0b d1 03    	add    dl,BYTE PTR [ecx+0x3d10b00]
     8fe:	00 00                	add    BYTE PTR [eax],al
     900:	01 0b                	add    DWORD PTR [ebx],ecx
     902:	72 00                	jb     904 <__fmodf2+0x8d8>
     904:	00 00                	add    BYTE PTR [eax],al
     906:	02 91 64 0c 0d 03    	add    dl,BYTE PTR [ecx+0x30d0c64]
     90c:	00 00                	add    BYTE PTR [eax],al
     90e:	01 0b                	add    DWORD PTR [ebx],ecx
     910:	4f                   	dec    edi
     911:	00 00                	add    BYTE PTR [eax],al
     913:	00 e3                	add    bl,ah
     915:	01 00                	add    DWORD PTR [eax],eax
     917:	00 0d 00 0b c1 04    	add    BYTE PTR ds:0x4c10b00,cl
     91d:	00 00                	add    BYTE PTR [eax],al
     91f:	01 0c 49             	add    DWORD PTR [ecx+ecx*2],ecx
     922:	02 00                	add    al,BYTE PTR [eax]
     924:	00 03                	add    BYTE PTR [ebx],al
     926:	91                   	xchg   ecx,eax
     927:	fc                   	cld    
     928:	7e 0b                	jle    935 <__fmodf2+0x909>
     92a:	f6 04 00 00          	test   BYTE PTR [eax+eax*1],0x0
     92e:	01 0d 49 02 00 00    	add    DWORD PTR ds:0x249,ecx
     934:	03 91 98 7e 0b e5    	add    edx,DWORD PTR [ecx-0x1af48168]
     93a:	02 00                	add    al,BYTE PTR [eax]
     93c:	00 01                	add    BYTE PTR [ecx],al
     93e:	0e                   	push   cs
     93f:	72 00                	jb     941 <__fmodf2+0x915>
     941:	00 00                	add    BYTE PTR [eax],al
     943:	02 91 6c 0e 00 00    	add    dl,BYTE PTR [ecx+0xe6c]
     949:	00 00                	add    BYTE PTR [eax],al
     94b:	0b a9 04 00 00 01    	or     ebp,DWORD PTR [ecx+0x1000004]
     951:	13 72 00             	adc    esi,DWORD PTR [edx+0x0]
     954:	00 00                	add    BYTE PTR [eax],al
     956:	02 91 60 0f 65 6e    	add    dl,BYTE PTR [ecx+0x6e650f60]
     95c:	64 00 01             	add    BYTE PTR fs:[ecx],al
     95f:	14 4f                	adc    al,0x4f
     961:	00 00                	add    BYTE PTR [eax],al
     963:	00 02                	add    BYTE PTR [edx],al
     965:	91                   	xchg   ecx,eax
     966:	68 10 b2 06 00       	push   0x6b210
     96b:	9f                   	lahf   
     96c:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
     96d:	00 00                	add    BYTE PTR [eax],al
     96f:	00 11                	add    BYTE PTR [ecx],dl
     971:	34 05                	xor    al,0x5
     973:	00 00                	add    BYTE PTR [eax],al
     975:	01 1a                	add    DWORD PTR [edx],ebx
     977:	4f                   	dec    edi
     978:	00 00                	add    BYTE PTR [eax],al
     97a:	00 0d 00 00 00 00    	add    BYTE PTR ds:0x0,cl
     980:	12 78 00             	adc    bh,BYTE PTR [eax+0x0]
     983:	00 00                	add    BYTE PTR [eax],al
     985:	59                   	pop    ecx
     986:	02 00                	add    al,BYTE PTR [eax]
     988:	00 13                	add    BYTE PTR [ebx],dl
     98a:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
     98d:	00 63 00             	add    BYTE PTR [ebx+0x0],ah
     990:	09 13                	or     DWORD PTR [ebx],edx
     992:	04 00                	add    al,0x0
     994:	00 01                	add    BYTE PTR [ecx],al
     996:	24 72                	and    al,0x72
     998:	00 00                	add    BYTE PTR [eax],al
     99a:	00 68 07             	add    BYTE PTR [eax+0x7],ch
     99d:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
     9a3:	01 9c 81 02 00 00 0a 	add    DWORD PTR [ecx+eax*4+0xa000002],ebx
     9aa:	98                   	cwde   
     9ab:	02 00                	add    al,BYTE PTR [eax]
     9ad:	00 01                	add    BYTE PTR [ecx],al
     9af:	24 72                	and    al,0x72
     9b1:	00 00                	add    BYTE PTR [eax],al
     9b3:	00 02                	add    BYTE PTR [edx],al
     9b5:	91                   	xchg   ecx,eax
     9b6:	00 00                	add    BYTE PTR [eax],al
     9b8:	09 34 05 00 00 01 29 	or     DWORD PTR [eax*1+0x29010000],esi
     9bf:	4f                   	dec    edi
     9c0:	00 00                	add    BYTE PTR [eax],al
     9c2:	00 88 07 00 9f aa    	add    BYTE PTR [eax-0x5560fff9],cl
     9c8:	00 00                	add    BYTE PTR [eax],al
     9ca:	00 01                	add    BYTE PTR [ecx],al
     9cc:	9c                   	pushf  
     9cd:	cf                   	iret   
     9ce:	02 00                	add    al,BYTE PTR [eax]
     9d0:	00 0a                	add    BYTE PTR [edx],cl
     9d2:	3c 05                	cmp    al,0x5
     9d4:	00 00                	add    BYTE PTR [eax],al
     9d6:	01 29                	add    DWORD PTR [ecx],ebp
     9d8:	72 00                	jb     9da <__fmodf2+0x9ae>
     9da:	00 00                	add    BYTE PTR [eax],al
     9dc:	02 91 00 0a 33 03    	add    dl,BYTE PTR [ecx+0x3330a00]
     9e2:	00 00                	add    BYTE PTR [eax],al
     9e4:	01 29                	add    DWORD PTR [ecx],ebp
     9e6:	72 00                	jb     9e8 <__fmodf2+0x9bc>
     9e8:	00 00                	add    BYTE PTR [eax],al
     9ea:	02 91 04 10 9a 07    	add    dl,BYTE PTR [ecx+0x79a1004]
     9f0:	00 9f 8e 00 00 00    	add    BYTE PTR [edi+0x8e],bl
     9f6:	0f 63 6e 74          	packsswb mm5,QWORD PTR [esi+0x74]
     9fa:	00 01                	add    BYTE PTR [ecx],al
     9fc:	2b 4f 00             	sub    ecx,DWORD PTR [edi+0x0]
     9ff:	00 00                	add    BYTE PTR [eax],al
     a01:	02 91 6c 00 00 09    	add    dl,BYTE PTR [ecx+0x900006c]
     a07:	c7 02 00 00 01 34    	mov    DWORD PTR [edx],0x34010000
     a0d:	4f                   	dec    edi
     a0e:	00 00                	add    BYTE PTR [eax],al
     a10:	00 32                	add    BYTE PTR [edx],dh
     a12:	08 00                	or     BYTE PTR [eax],al
     a14:	9f                   	lahf   
     a15:	23 00                	and    eax,DWORD PTR [eax]
     a17:	00 00                	add    BYTE PTR [eax],al
     a19:	01 9c 05 03 00 00 0a 	add    DWORD PTR [ebp+eax*1+0xa000003],ebx
     a20:	3c 05                	cmp    al,0x5
     a22:	00 00                	add    BYTE PTR [eax],al
     a24:	01 34 72             	add    DWORD PTR [edx+esi*2],esi
     a27:	00 00                	add    BYTE PTR [eax],al
     a29:	00 02                	add    BYTE PTR [edx],al
     a2b:	91                   	xchg   ecx,eax
     a2c:	00 0a                	add    BYTE PTR [edx],cl
     a2e:	33 03                	xor    eax,DWORD PTR [ebx]
     a30:	00 00                	add    BYTE PTR [eax],al
     a32:	01 34 72             	add    DWORD PTR [edx+esi*2],esi
     a35:	00 00                	add    BYTE PTR [eax],al
     a37:	00 02                	add    BYTE PTR [edx],al
     a39:	91                   	xchg   ecx,eax
     a3a:	04 00                	add    al,0x0
     a3c:	14 5d                	adc    al,0x5d
     a3e:	03 00                	add    eax,DWORD PTR [eax]
     a40:	00 01                	add    BYTE PTR [ecx],al
     a42:	39 55 08             	cmp    DWORD PTR [ebp+0x8],edx
     a45:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
     a4b:	01 9c 79 03 00 00 0a 	add    DWORD PTR [ecx+edi*2+0xa000003],ebx
     a52:	3c 05                	cmp    al,0x5
     a54:	00 00                	add    BYTE PTR [eax],al
     a56:	01 39                	add    DWORD PTR [ecx],edi
     a58:	72 00                	jb     a5a <__fmodf2+0xa2e>
     a5a:	00 00                	add    BYTE PTR [eax],al
     a5c:	02 91 00 0a 33 03    	add    dl,BYTE PTR [ecx+0x3330a00]
     a62:	00 00                	add    BYTE PTR [eax],al
     a64:	01 39                	add    DWORD PTR [ecx],edi
     a66:	72 00                	jb     a68 <__fmodf2+0xa3c>
     a68:	00 00                	add    BYTE PTR [eax],al
     a6a:	02 91 04 0b ff 02    	add    dl,BYTE PTR [ecx+0x2ff0b04]
     a70:	00 00                	add    BYTE PTR [eax],al
     a72:	01 3b                	add    DWORD PTR [ebx],edi
     a74:	7f 00                	jg     a76 <__fmodf2+0xa4a>
     a76:	00 00                	add    BYTE PTR [eax],al
     a78:	02 91 6c 15 6e 08    	add    dl,BYTE PTR [ecx+0x86e156c]
     a7e:	00 9f eb 00 00 00    	add    BYTE PTR [edi+0xeb],bl
     a84:	60                   	pusha  
     a85:	03 00                	add    eax,DWORD PTR [eax]
     a87:	00 0f                	add    BYTE PTR [edi],cl
     a89:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
     a8c:	00 01                	add    BYTE PTR [ecx],al
     a8e:	3d 4f 00 00 00       	cmp    eax,0x4f
     a93:	02 91 68 00 10 59    	add    dl,BYTE PTR [ecx+0x59100068]
     a99:	09 00                	or     DWORD PTR [eax],eax
     a9b:	9f                   	lahf   
     a9c:	b8 00 00 00 0f       	mov    eax,0xf000000
     aa1:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
     aa4:	00 01                	add    BYTE PTR [ecx],al
     aa6:	49                   	dec    ecx
     aa7:	4f                   	dec    edi
     aa8:	00 00                	add    BYTE PTR [eax],al
     aaa:	00 02                	add    BYTE PTR [edx],al
     aac:	91                   	xchg   ecx,eax
     aad:	64 00 00             	add    BYTE PTR fs:[eax],al
     ab0:	09 ce                	or     esi,ecx
     ab2:	02 00                	add    al,BYTE PTR [eax]
     ab4:	00 01                	add    BYTE PTR [ecx],al
     ab6:	56                   	push   esi
     ab7:	72 00                	jb     ab9 <__fmodf2+0xa8d>
     ab9:	00 00                	add    BYTE PTR [eax],al
     abb:	16                   	push   ss
     abc:	0a 00                	or     al,BYTE PTR [eax]
     abe:	9f                   	lahf   
     abf:	2c 00                	sub    al,0x0
     ac1:	00 00                	add    BYTE PTR [eax],al
     ac3:	01 9c af 03 00 00 16 	add    DWORD PTR [edi+ebp*4+0x16000003],ebx
     aca:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     acd:	00 01                	add    BYTE PTR [ecx],al
     acf:	56                   	push   esi
     ad0:	72 00                	jb     ad2 <__fmodf2+0xaa6>
     ad2:	00 00                	add    BYTE PTR [eax],al
     ad4:	02 91 00 0a 58 07    	add    dl,BYTE PTR [ecx+0x7580a00]
     ada:	00 00                	add    BYTE PTR [eax],al
     adc:	01 56 8a             	add    DWORD PTR [esi-0x76],edx
     adf:	00 00                	add    BYTE PTR [eax],al
     ae1:	00 02                	add    BYTE PTR [edx],al
     ae3:	91                   	xchg   ecx,eax
     ae4:	04 00                	add    al,0x0
     ae6:	09 6b 05             	or     DWORD PTR [ebx+0x5],ebp
     ae9:	00 00                	add    BYTE PTR [eax],al
     aeb:	01 5c 72 00          	add    DWORD PTR [edx+esi*2+0x0],ebx
     aef:	00 00                	add    BYTE PTR [eax],al
     af1:	42                   	inc    edx
     af2:	0a 00                	or     al,BYTE PTR [eax]
     af4:	9f                   	lahf   
     af5:	23 00                	and    eax,DWORD PTR [eax]
     af7:	00 00                	add    BYTE PTR [eax],al
     af9:	01 9c e5 03 00 00 16 	add    DWORD PTR [ebp+eiz*8+0x16000003],ebx
     b00:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     b03:	00 01                	add    BYTE PTR [ecx],al
     b05:	5c                   	pop    esp
     b06:	72 00                	jb     b08 <__fmodf2+0xadc>
     b08:	00 00                	add    BYTE PTR [eax],al
     b0a:	02 91 00 0a 58 07    	add    dl,BYTE PTR [ecx+0x7580a00]
     b10:	00 00                	add    BYTE PTR [eax],al
     b12:	01 5c 8a 00          	add    DWORD PTR [edx+ecx*4+0x0],ebx
     b16:	00 00                	add    BYTE PTR [eax],al
     b18:	02 91 04 00 17 78    	add    dl,BYTE PTR [ecx+0x78170004]
     b1e:	00 00                	add    BYTE PTR [eax],al
     b20:	00 05 33 f6 03 00    	add    BYTE PTR ds:0x3f633,al
     b26:	00 05 03 40 92 00    	add    BYTE PTR ds:0x924003,al
     b2c:	9f                   	lahf   
     b2d:	04 04                	add    al,0x4
     b2f:	72 00                	jb     b31 <__fmodf2+0xb05>
     b31:	00 00                	add    BYTE PTR [eax],al
     b33:	00 44 09 00          	add    BYTE PTR [ecx+ecx*1+0x0],al
     b37:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     b3a:	61                   	popa   
     b3b:	04 00                	add    al,0x0
     b3d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     b40:	c3                   	ret    
     b41:	00 00                	add    BYTE PTR [eax],al
     b43:	00 0c 42             	add    BYTE PTR [edx+eax*2],cl
     b46:	07                   	pop    es
     b47:	00 00                	add    BYTE PTR [eax],al
     b49:	4d                   	dec    ebp
     b4a:	00 00                	add    BYTE PTR [eax],al
     b4c:	00 68 0a             	add    BYTE PTR [eax+0xa],ch
     b4f:	00 9f b8 08 00 00    	add    BYTE PTR [edi+0x8b8],bl
     b55:	ad                   	lods   eax,DWORD PTR ds:[esi]
     b56:	04 00                	add    al,0x0
     b58:	00 02                	add    BYTE PTR [edx],al
     b5a:	01 08                	add    DWORD PTR [eax],ecx
     b5c:	3f                   	aas    
     b5d:	00 00                	add    BYTE PTR [eax],al
     b5f:	00 02                	add    BYTE PTR [edx],al
     b61:	02 07                	add    al,BYTE PTR [edi]
     b63:	0e                   	push   cs
     b64:	00 00                	add    BYTE PTR [eax],al
     b66:	00 02                	add    BYTE PTR [edx],al
     b68:	04 07                	add    al,0x7
     b6a:	32 00                	xor    al,BYTE PTR [eax]
     b6c:	00 00                	add    BYTE PTR [eax],al
     b6e:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     b71:	2d 00 00 00 02       	sub    eax,0x2000000
     b76:	01 06                	add    DWORD PTR [esi],eax
     b78:	41                   	inc    ecx
     b79:	00 00                	add    BYTE PTR [eax],al
     b7b:	00 02                	add    BYTE PTR [edx],al
     b7d:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     b83:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     b8a:	02 08                	add    cl,BYTE PTR [eax]
     b8c:	05 00 00 00 00       	add    eax,0x0
     b91:	02 08                	add    cl,BYTE PTR [eax]
     b93:	07                   	pop    es
     b94:	28 00                	sub    BYTE PTR [eax],al
     b96:	00 00                	add    BYTE PTR [eax],al
     b98:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     b9f:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     ba2:	2a 01                	sub    al,BYTE PTR [ecx]
     ba4:	00 00                	add    BYTE PTR [eax],al
     ba6:	04 04                	add    al,0x4
     ba8:	05 04 7a 00 00       	add    eax,0x7a04
     bad:	00 02                	add    BYTE PTR [edx],al
     baf:	01 06                	add    DWORD PTR [esi],eax
     bb1:	48                   	dec    eax
     bb2:	00 00                	add    BYTE PTR [eax],al
     bb4:	00 06                	add    BYTE PTR [esi],al
     bb6:	4d                   	dec    ebp
     bb7:	07                   	pop    es
     bb8:	00 00                	add    BYTE PTR [eax],al
     bba:	02 2e                	add    ch,BYTE PTR [esi]
     bbc:	25 00 00 00 06       	and    eax,0x6000000
     bc1:	07                   	pop    es
     bc2:	06                   	push   es
     bc3:	00 00                	add    BYTE PTR [eax],al
     bc5:	02 31                	add    dh,BYTE PTR [ecx]
     bc7:	2c 00                	sub    al,0x0
     bc9:	00 00                	add    BYTE PTR [eax],al
     bcb:	06                   	push   es
     bcc:	45                   	inc    ebp
     bcd:	02 00                	add    al,BYTE PTR [eax]
     bcf:	00 02                	add    BYTE PTR [edx],al
     bd1:	34 33                	xor    al,0x33
     bd3:	00 00                	add    BYTE PTR [eax],al
     bd5:	00 06                	add    BYTE PTR [esi],al
     bd7:	01 02                	add    DWORD PTR [edx],eax
     bd9:	00 00                	add    BYTE PTR [eax],al
     bdb:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
     bde:	00 00                	add    BYTE PTR [eax],al
     be0:	00 06                	add    BYTE PTR [esi],al
     be2:	91                   	xchg   ecx,eax
     be3:	02 00                	add    al,BYTE PTR [eax]
     be5:	00 03                	add    BYTE PTR [ebx],al
     be7:	d8 33                	fdiv   DWORD PTR [ebx]
     be9:	00 00                	add    BYTE PTR [eax],al
     beb:	00 02                	add    BYTE PTR [edx],al
     bed:	0c 04                	or     al,0x4
     bef:	ad                   	lods   eax,DWORD PTR ds:[esi]
     bf0:	00 00                	add    BYTE PTR [eax],al
     bf2:	00 07                	add    BYTE PTR [edi],al
     bf4:	a0 03 00 00 04       	mov    al,ds:0x4000003
     bf9:	33 00                	xor    eax,DWORD PTR [eax]
     bfb:	00 00                	add    BYTE PTR [eax],al
     bfd:	06                   	push   es
     bfe:	15 c0 01 00 00       	adc    eax,0x1c0
     c03:	08 51 04             	or     BYTE PTR [ecx+0x4],dl
     c06:	00 00                	add    BYTE PTR [eax],al
     c08:	00 08                	add    BYTE PTR [eax],cl
     c0a:	96                   	xchg   esi,eax
     c0b:	04 00                	add    al,0x0
     c0d:	00 01                	add    BYTE PTR [ecx],al
     c0f:	08 84 02 00 00 02 08 	or     BYTE PTR [edx+eax*1+0x8020000],al
     c16:	83 03 00             	add    DWORD PTR [ebx],0x0
     c19:	00 03                	add    BYTE PTR [ebx],al
     c1b:	08 6a 02             	or     BYTE PTR [edx+0x2],ch
     c1e:	00 00                	add    BYTE PTR [eax],al
     c20:	04 08                	add    al,0x8
     c22:	da 04 00             	fiadd  DWORD PTR [eax+eax*1]
     c25:	00 05 08 78 04 00    	add    BYTE PTR ds:0x47808,al
     c2b:	00 0a                	add    BYTE PTR [edx],cl
     c2d:	08 c4                	or     ah,al
     c2f:	03 00                	add    eax,DWORD PTR [eax]
     c31:	00 0b                	add    BYTE PTR [ebx],cl
     c33:	08 2a                	or     BYTE PTR [edx],ch
     c35:	04 00                	add    al,0x0
     c37:	00 0c 08             	add    BYTE PTR [eax+ecx*1],cl
     c3a:	91                   	xchg   ecx,eax
     c3b:	03 00                	add    eax,DWORD PTR [eax]
     c3d:	00 0d 08 aa 03 00    	add    BYTE PTR ds:0x3aa08,cl
     c43:	00 0e                	add    BYTE PTR [esi],cl
     c45:	08 77 02             	or     BYTE PTR [edi+0x2],dh
     c48:	00 00                	add    BYTE PTR [eax],al
     c4a:	0f 08                	invd   
     c4c:	f4                   	hlt    
     c4d:	03 00                	add    eax,DWORD PTR [eax]
     c4f:	00 10                	add    BYTE PTR [eax],dl
     c51:	08 27                	or     BYTE PTR [edi],ah
     c53:	05 00 00 11 08       	add    eax,0x8110000
     c58:	05 05 00 00 4f       	add    eax,0x4f000005
     c5d:	08 cb                	or     bl,cl
     c5f:	04 00                	add    al,0x0
     c61:	00 50 08             	add    BYTE PTR [eax+0x8],dl
     c64:	44                   	inc    esp
     c65:	04 00                	add    al,0x0
     c67:	00 59 08             	add    BYTE PTR [ecx+0x8],bl
     c6a:	14 05                	adc    al,0x5
     c6c:	00 00                	add    BYTE PTR [eax],al
     c6e:	61                   	popa   
     c6f:	08 49 03             	or     BYTE PTR [ecx+0x3],cl
     c72:	00 00                	add    BYTE PTR [eax],al
     c74:	97                   	xchg   edi,eax
     c75:	09 61 04             	or     DWORD PTR [ecx+0x4],esp
     c78:	00 00                	add    BYTE PTR [eax],al
     c7a:	63 01                	arpl   WORD PTR [ecx],ax
     c7c:	09 37                	or     DWORD PTR [edi],esi
     c7e:	04 00                	add    al,0x0
     c80:	00 64 01 09          	add    BYTE PTR [ecx+eax*1+0x9],ah
     c84:	44                   	inc    esp
     c85:	05 00 00 65 01       	add    eax,0x1650000
     c8a:	09 25 03 00 00 66    	or     DWORD PTR ds:0x66000003,esp
     c90:	01 09                	add    DWORD PTR [ecx],ecx
     c92:	56                   	push   esi
     c93:	05 00 00 67 01       	add    eax,0x1670000
     c98:	09 b7 03 00 00 68    	or     DWORD PTR [edi+0x68000003],esi
     c9e:	01 09                	add    DWORD PTR [ecx],ecx
     ca0:	d6                   	(bad)  
     ca1:	02 00                	add    al,BYTE PTR [eax]
     ca3:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
     ca6:	09 85 04 00 00 70    	or     DWORD PTR [ebp+0x70000004],eax
     cac:	01 09                	add    DWORD PTR [ecx],ecx
     cae:	39 03                	cmp    DWORD PTR [ebx],eax
     cb0:	00 00                	add    BYTE PTR [eax],al
     cb2:	71 01                	jno    cb5 <__fmodf2+0xc89>
     cb4:	09 e8                	or     eax,ebp
     cb6:	04 00                	add    al,0x0
     cb8:	00 00                	add    BYTE PTR [eax],al
     cba:	03 09                	add    ecx,DWORD PTR [ecx]
     cbc:	d9 03                	fld    DWORD PTR [ebx]
     cbe:	00 00                	add    BYTE PTR [eax],al
     cc0:	01 03                	add    DWORD PTR [ebx],eax
     cc2:	09 e8                	or     eax,ebp
     cc4:	03 00                	add    eax,DWORD PTR [eax]
     cc6:	00 02                	add    BYTE PTR [edx],al
     cc8:	03 09                	add    ecx,DWORD PTR [ecx]
     cca:	73 03                	jae    ccf <__fmodf2+0xca3>
     ccc:	00 00                	add    BYTE PTR [eax],al
     cce:	03 03                	add    eax,DWORD PTR [ebx]
     cd0:	09 b6 02 00 00 04    	or     DWORD PTR [esi+0x4000002],esi
     cd6:	03 09                	add    ecx,DWORD PTR [ecx]
     cd8:	15 03 00 00 05       	adc    eax,0x5000003
     cdd:	03 09                	add    ecx,DWORD PTR [ecx]
     cdf:	64 03 00             	add    eax,DWORD PTR fs:[eax]
     ce2:	00 06                	add    BYTE PTR [esi],al
     ce4:	03 09                	add    ecx,DWORD PTR [ecx]
     ce6:	b2 04                	mov    dl,0x4
     ce8:	00 00                	add    BYTE PTR [eax],al
     cea:	07                   	pop    es
     ceb:	03 09                	add    ecx,DWORD PTR [ecx]
     ced:	01 04 00             	add    DWORD PTR [eax+eax*1],eax
     cf0:	00 00                	add    BYTE PTR [eax],al
     cf2:	09 00                	or     DWORD PTR [eax],eax
     cf4:	0a f6                	or     dh,dh
     cf6:	06                   	push   es
     cf7:	00 00                	add    BYTE PTR [eax],al
     cf9:	17                   	pop    ss
     cfa:	01 04 1f             	add    DWORD PTR [edi+ebx*1],eax
     cfd:	42                   	inc    edx
     cfe:	02 00                	add    al,BYTE PTR [eax]
     d00:	00 0b                	add    BYTE PTR [ebx],cl
     d02:	af                   	scas   eax,DWORD PTR es:[edi]
     d03:	06                   	push   es
     d04:	00 00                	add    BYTE PTR [eax],al
     d06:	04 21                	add    al,0x21
     d08:	42                   	inc    edx
     d09:	02 00                	add    al,BYTE PTR [eax]
     d0b:	00 00                	add    BYTE PTR [eax],al
     d0d:	0c c8                	or     al,0xc8
     d0f:	06                   	push   es
     d10:	00 00                	add    BYTE PTR [eax],al
     d12:	04 22                	add    al,0x22
     d14:	81 00 00 00 04 01    	add    DWORD PTR [eax],0x1040000
     d1a:	0c 7f                	or     al,0x7f
     d1c:	06                   	push   es
     d1d:	00 00                	add    BYTE PTR [eax],al
     d1f:	04 23                	add    al,0x23
     d21:	97                   	xchg   edi,eax
     d22:	00 00                	add    BYTE PTR [eax],al
     d24:	00 05 01 0c 58 07    	add    BYTE PTR ds:0x7580c01,al
     d2a:	00 00                	add    BYTE PTR [eax],al
     d2c:	04 24                	add    al,0x24
     d2e:	97                   	xchg   edi,eax
     d2f:	00 00                	add    BYTE PTR [eax],al
     d31:	00 09                	add    BYTE PTR [ecx],cl
     d33:	01 0c 87             	add    DWORD PTR [edi+eax*4],ecx
     d36:	06                   	push   es
     d37:	00 00                	add    BYTE PTR [eax],al
     d39:	04 25                	add    al,0x25
     d3b:	8c 00                	mov    WORD PTR [eax],es
     d3d:	00 00                	add    BYTE PTR [eax],al
     d3f:	0d 01 0c 9f 05       	or     eax,0x59f0c01
     d44:	00 00                	add    BYTE PTR [eax],al
     d46:	04 26                	add    al,0x26
     d48:	8c 00                	mov    WORD PTR [eax],es
     d4a:	00 00                	add    BYTE PTR [eax],al
     d4c:	0f 01 0c 10          	sidtd  [eax+edx*1]
     d50:	06                   	push   es
     d51:	00 00                	add    BYTE PTR [eax],al
     d53:	04 27                	add    al,0x27
     d55:	8c 00                	mov    WORD PTR [eax],es
     d57:	00 00                	add    BYTE PTR [eax],al
     d59:	11 01                	adc    DWORD PTR [ecx],eax
     d5b:	0c f2                	or     al,0xf2
     d5d:	05 00 00 04 28       	add    eax,0x28040000
     d62:	8c 00                	mov    WORD PTR [eax],es
     d64:	00 00                	add    BYTE PTR [eax],al
     d66:	13 01                	adc    eax,DWORD PTR [ecx]
     d68:	0c 29                	or     al,0x29
     d6a:	07                   	pop    es
     d6b:	00 00                	add    BYTE PTR [eax],al
     d6d:	04 29                	add    al,0x29
     d6f:	8c 00                	mov    WORD PTR [eax],es
     d71:	00 00                	add    BYTE PTR [eax],al
     d73:	15 01 00 0d 7a       	adc    eax,0x7a0d0001
     d78:	00 00                	add    BYTE PTR [eax],al
     d7a:	00 53 02             	add    BYTE PTR [ebx+0x2],dl
     d7d:	00 00                	add    BYTE PTR [eax],al
     d7f:	0e                   	push   cs
     d80:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
     d83:	00 03                	add    BYTE PTR [ebx],al
     d85:	01 00                	add    DWORD PTR [eax],eax
     d87:	0f 93 06             	setae  BYTE PTR [esi]
     d8a:	00 00                	add    BYTE PTR [eax],al
     d8c:	08 04 2c             	or     BYTE PTR [esp+ebp*1],al
     d8f:	78 02                	js     d93 <__fmodf2+0xd67>
     d91:	00 00                	add    BYTE PTR [eax],al
     d93:	0b 55 07             	or     edx,DWORD PTR [ebp+0x7]
     d96:	00 00                	add    BYTE PTR [eax],al
     d98:	04 2e                	add    al,0x2e
     d9a:	97                   	xchg   edi,eax
     d9b:	00 00                	add    BYTE PTR [eax],al
     d9d:	00 00                	add    BYTE PTR [eax],al
     d9f:	0b 2d 06 00 00 04    	or     ebp,DWORD PTR ds:0x4000006
     da5:	2f                   	das    
     da6:	97                   	xchg   edi,eax
     da7:	00 00                	add    BYTE PTR [eax],al
     da9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     dac:	06                   	push   es
     dad:	cf                   	iret   
     dae:	06                   	push   es
     daf:	00 00                	add    BYTE PTR [eax],al
     db1:	04 32                	add    al,0x32
     db3:	c0 01 00             	rol    BYTE PTR [ecx],0x0
     db6:	00 06                	add    BYTE PTR [esi],al
     db8:	da 06                	fiadd  DWORD PTR [esi]
     dba:	00 00                	add    BYTE PTR [eax],al
     dbc:	04 33                	add    al,0x33
     dbe:	53                   	push   ebx
     dbf:	02 00                	add    al,BYTE PTR [eax]
     dc1:	00 05 04 94 02 00    	add    BYTE PTR ds:0x29404,al
     dc7:	00 10                	add    BYTE PTR [eax],dl
     dc9:	7a 00                	jp     dcb <__fmodf2+0xd9f>
     dcb:	00 00                	add    BYTE PTR [eax],al
     dcd:	02 01                	add    al,BYTE PTR [ecx]
     dcf:	02 e8                	add    ch,al
     dd1:	06                   	push   es
     dd2:	00 00                	add    BYTE PTR [eax],al
     dd4:	11 ee                	adc    esi,ebp
     dd6:	06                   	push   es
     dd7:	00 00                	add    BYTE PTR [eax],al
     dd9:	01 12                	add    DWORD PTR [edx],edx
     ddb:	4f                   	dec    edi
     ddc:	00 00                	add    BYTE PTR [eax],al
     dde:	00 68 0a             	add    BYTE PTR [eax+0xa],ch
     de1:	00 9f 31 00 00 00    	add    BYTE PTR [edi+0x31],bl
     de7:	01 9c e4 02 00 00 12 	add    DWORD PTR [esp+eiz*8+0x12000002],ebx
     dee:	9a 05 00 00 01 12 74 	call   0x7412:0x1000005
     df5:	00 00                	add    BYTE PTR [eax],al
     df7:	00 02                	add    BYTE PTR [edx],al
     df9:	91                   	xchg   ecx,eax
     dfa:	00 12                	add    BYTE PTR [edx],dl
     dfc:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     dfd:	06                   	push   es
     dfe:	00 00                	add    BYTE PTR [eax],al
     e00:	01 12                	add    DWORD PTR [edx],edx
     e02:	e4 02                	in     al,0x2
     e04:	00 00                	add    BYTE PTR [eax],al
     e06:	02 91 04 12 b5 07    	add    dl,BYTE PTR [ecx+0x7b51204]
     e0c:	00 00                	add    BYTE PTR [eax],al
     e0e:	01 12                	add    DWORD PTR [edx],edx
     e10:	4f                   	dec    edi
     e11:	00 00                	add    BYTE PTR [eax],al
     e13:	00 02                	add    BYTE PTR [edx],al
     e15:	91                   	xchg   ecx,eax
     e16:	08 00                	or     BYTE PTR [eax],al
     e18:	05 04 78 02 00       	add    eax,0x27804
     e1d:	00 11                	add    BYTE PTR [ecx],dl
     e1f:	ae                   	scas   al,BYTE PTR es:[edi]
     e20:	07                   	pop    es
     e21:	00 00                	add    BYTE PTR [eax],al
     e23:	01 17                	add    DWORD PTR [edi],edx
     e25:	4f                   	dec    edi
     e26:	00 00                	add    BYTE PTR [eax],al
     e28:	00 99 0a 00 9f 26    	add    BYTE PTR [ecx+0x269f000a],bl
     e2e:	00 00                	add    BYTE PTR [eax],al
     e30:	00 01                	add    BYTE PTR [ecx],al
     e32:	9c                   	pushf  
     e33:	2e 03 00             	add    eax,DWORD PTR cs:[eax]
     e36:	00 12                	add    BYTE PTR [edx],dl
     e38:	9a 05 00 00 01 17 74 	call   0x7417:0x1000005
     e3f:	00 00                	add    BYTE PTR [eax],al
     e41:	00 02                	add    BYTE PTR [edx],al
     e43:	91                   	xchg   ecx,eax
     e44:	00 12                	add    BYTE PTR [edx],dl
     e46:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     e47:	06                   	push   es
     e48:	00 00                	add    BYTE PTR [eax],al
     e4a:	01 17                	add    DWORD PTR [edi],edx
     e4c:	e4 02                	in     al,0x2
     e4e:	00 00                	add    BYTE PTR [eax],al
     e50:	02 91 04 12 b5 07    	add    dl,BYTE PTR [ecx+0x7b51204]
     e56:	00 00                	add    BYTE PTR [eax],al
     e58:	01 17                	add    DWORD PTR [edi],edx
     e5a:	4f                   	dec    edi
     e5b:	00 00                	add    BYTE PTR [eax],al
     e5d:	00 02                	add    BYTE PTR [edx],al
     e5f:	91                   	xchg   ecx,eax
     e60:	08 00                	or     BYTE PTR [eax],al
     e62:	11 1b                	adc    DWORD PTR [ebx],ebx
     e64:	06                   	push   es
     e65:	00 00                	add    BYTE PTR [eax],al
     e67:	01 1c 72             	add    DWORD PTR [edx+esi*2],ebx
     e6a:	00 00                	add    BYTE PTR [eax],al
     e6c:	00 bf 0a 00 9f 2c    	add    BYTE PTR [edi+0x2c9f000a],bh
     e72:	00 00                	add    BYTE PTR [eax],al
     e74:	00 01                	add    BYTE PTR [ecx],al
     e76:	9c                   	pushf  
     e77:	64 03 00             	add    eax,DWORD PTR fs:[eax]
     e7a:	00 12                	add    BYTE PTR [edx],dl
     e7c:	9a 05 00 00 01 1c 74 	call   0x741c:0x1000005
     e83:	00 00                	add    BYTE PTR [eax],al
     e85:	00 02                	add    BYTE PTR [edx],al
     e87:	91                   	xchg   ecx,eax
     e88:	00 12                	add    BYTE PTR [edx],dl
     e8a:	11 07                	adc    DWORD PTR [edi],eax
     e8c:	00 00                	add    BYTE PTR [eax],al
     e8e:	01 1c 8e             	add    DWORD PTR [esi+ecx*4],ebx
     e91:	02 00                	add    al,BYTE PTR [eax]
     e93:	00 02                	add    BYTE PTR [edx],al
     e95:	91                   	xchg   ecx,eax
     e96:	04 00                	add    al,0x0
     e98:	11 6d 06             	adc    DWORD PTR [ebp+0x6],ebp
     e9b:	00 00                	add    BYTE PTR [eax],al
     e9d:	01 22                	add    DWORD PTR [edx],esp
     e9f:	72 00                	jb     ea1 <__fmodf2+0xe75>
     ea1:	00 00                	add    BYTE PTR [eax],al
     ea3:	eb 0a                	jmp    eaf <__fmodf2+0xe83>
     ea5:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
     eab:	01 9c 9a 03 00 00 12 	add    DWORD PTR [edx+ebx*4+0x12000003],ebx
     eb2:	9a 05 00 00 01 22 74 	call   0x7422:0x1000005
     eb9:	00 00                	add    BYTE PTR [eax],al
     ebb:	00 02                	add    BYTE PTR [edx],al
     ebd:	91                   	xchg   ecx,eax
     ebe:	00 12                	add    BYTE PTR [edx],dl
     ec0:	11 07                	adc    DWORD PTR [edi],eax
     ec2:	00 00                	add    BYTE PTR [eax],al
     ec4:	01 22                	add    DWORD PTR [edx],esp
     ec6:	8e 02                	mov    es,WORD PTR [edx]
     ec8:	00 00                	add    BYTE PTR [eax],al
     eca:	02 91 04 00 13 93    	add    dl,BYTE PTR [ecx-0x6cecfffc]
     ed0:	07                   	pop    es
     ed1:	00 00                	add    BYTE PTR [eax],al
     ed3:	01 27                	add    DWORD PTR [edi],esp
     ed5:	0e                   	push   cs
     ed6:	0b 00                	or     eax,DWORD PTR [eax]
     ed8:	9f                   	lahf   
     ed9:	59                   	pop    ecx
     eda:	00 00                	add    BYTE PTR [eax],al
     edc:	00 01                	add    BYTE PTR [ecx],al
     ede:	9c                   	pushf  
     edf:	11 6a 06             	adc    DWORD PTR [edx+0x6],ebp
     ee2:	00 00                	add    BYTE PTR [eax],al
     ee4:	01 2e                	add    DWORD PTR [esi],ebp
     ee6:	72 00                	jb     ee8 <__fmodf2+0xebc>
     ee8:	00 00                	add    BYTE PTR [eax],al
     eea:	67 0b 00             	or     eax,DWORD PTR [bx+si]
     eed:	9f                   	lahf   
     eee:	93                   	xchg   ebx,eax
     eef:	00 00                	add    BYTE PTR [eax],al
     ef1:	00 01                	add    BYTE PTR [ecx],al
     ef3:	9c                   	pushf  
     ef4:	fd                   	std    
     ef5:	03 00                	add    eax,DWORD PTR [eax]
     ef7:	00 12                	add    BYTE PTR [edx],dl
     ef9:	9a 05 00 00 01 2e 74 	call   0x742e:0x1000005
     f00:	00 00                	add    BYTE PTR [eax],al
     f02:	00 02                	add    BYTE PTR [edx],al
     f04:	91                   	xchg   ecx,eax
     f05:	00 12                	add    BYTE PTR [edx],dl
     f07:	11 07                	adc    DWORD PTR [edi],eax
     f09:	00 00                	add    BYTE PTR [eax],al
     f0b:	01 2e                	add    DWORD PTR [esi],ebp
     f0d:	8e 02                	mov    es,WORD PTR [edx]
     f0f:	00 00                	add    BYTE PTR [eax],al
     f11:	02 91 04 12 93 05    	add    dl,BYTE PTR [ecx+0x5931204]
     f17:	00 00                	add    BYTE PTR [eax],al
     f19:	01 2e                	add    DWORD PTR [esi],ebp
     f1b:	72 00                	jb     f1d <__fmodf2+0xef1>
     f1d:	00 00                	add    BYTE PTR [eax],al
     f1f:	02 91 08 14 72 05    	add    dl,BYTE PTR [ecx+0x5721408]
     f25:	00 00                	add    BYTE PTR [eax],al
     f27:	01 30                	add    DWORD PTR [eax],esi
     f29:	72 00                	jb     f2b <__fmodf2+0xeff>
     f2b:	00 00                	add    BYTE PTR [eax],al
     f2d:	02 91 6c 00 15 35    	add    dl,BYTE PTR [ecx+0x3515006c]
     f33:	07                   	pop    es
     f34:	00 00                	add    BYTE PTR [eax],al
     f36:	01 3c fa             	add    DWORD PTR [edx+edi*8],edi
     f39:	0b 00                	or     eax,DWORD PTR [eax]
     f3b:	9f                   	lahf   
     f3c:	2a 00                	sub    al,BYTE PTR [eax]
     f3e:	00 00                	add    BYTE PTR [eax],al
     f40:	01 9c 21 04 00 00 12 	add    DWORD PTR [ecx+eiz*1+0x12000004],ebx
     f47:	6d                   	ins    DWORD PTR es:[edi],dx
     f48:	07                   	pop    es
     f49:	00 00                	add    BYTE PTR [eax],al
     f4b:	01 3c 72             	add    DWORD PTR [edx+esi*2],edi
     f4e:	00 00                	add    BYTE PTR [eax],al
     f50:	00 02                	add    BYTE PTR [edx],al
     f52:	91                   	xchg   ecx,eax
     f53:	00 00                	add    BYTE PTR [eax],al
     f55:	15 79 05 00 00       	adc    eax,0x579
     f5a:	01 41 24             	add    DWORD PTR [ecx+0x24],eax
     f5d:	0c 00                	or     al,0x0
     f5f:	9f                   	lahf   
     f60:	20 00                	and    BYTE PTR [eax],al
     f62:	00 00                	add    BYTE PTR [eax],al
     f64:	01 9c 45 04 00 00 12 	add    DWORD PTR [ebp+eax*2+0x12000004],ebx
     f6b:	6d                   	ins    DWORD PTR es:[edi],dx
     f6c:	07                   	pop    es
     f6d:	00 00                	add    BYTE PTR [eax],al
     f6f:	01 41 72             	add    DWORD PTR [ecx+0x72],eax
     f72:	00 00                	add    BYTE PTR [eax],al
     f74:	00 02                	add    BYTE PTR [edx],al
     f76:	91                   	xchg   ecx,eax
     f77:	00 00                	add    BYTE PTR [eax],al
     f79:	11 ff                	adc    edi,edi
     f7b:	06                   	push   es
     f7c:	00 00                	add    BYTE PTR [eax],al
     f7e:	01 46 4f             	add    DWORD PTR [esi+0x4f],eax
     f81:	00 00                	add    BYTE PTR [eax],al
     f83:	00 44 0c 00          	add    BYTE PTR [esp+ecx*1+0x0],al
     f87:	9f                   	lahf   
     f88:	35 00 00 00 01       	xor    eax,0x1000000
     f8d:	9c                   	pushf  
     f8e:	97                   	xchg   edi,eax
     f8f:	04 00                	add    al,0x0
     f91:	00 12                	add    BYTE PTR [edx],dl
     f93:	6d                   	ins    DWORD PTR es:[edi],dx
     f94:	07                   	pop    es
     f95:	00 00                	add    BYTE PTR [eax],al
     f97:	01 46 72             	add    DWORD PTR [esi+0x72],eax
     f9a:	00 00                	add    BYTE PTR [eax],al
     f9c:	00 02                	add    BYTE PTR [edx],al
     f9e:	91                   	xchg   ecx,eax
     f9f:	00 12                	add    BYTE PTR [edx],dl
     fa1:	16                   	push   ss
     fa2:	07                   	pop    es
     fa3:	00 00                	add    BYTE PTR [eax],al
     fa5:	01 46 72             	add    DWORD PTR [esi+0x72],eax
     fa8:	00 00                	add    BYTE PTR [eax],al
     faa:	00 02                	add    BYTE PTR [edx],al
     fac:	91                   	xchg   ecx,eax
     fad:	04 12                	add    al,0x12
     faf:	58                   	pop    eax
     fb0:	07                   	pop    es
     fb1:	00 00                	add    BYTE PTR [eax],al
     fb3:	01 46 4f             	add    DWORD PTR [esi+0x4f],eax
     fb6:	00 00                	add    BYTE PTR [eax],al
     fb8:	00 02                	add    BYTE PTR [edx],al
     fba:	91                   	xchg   ecx,eax
     fbb:	08 12                	or     BYTE PTR [edx],dl
     fbd:	05 07 00 00 01       	add    eax,0x1000007
     fc2:	46                   	inc    esi
     fc3:	4f                   	dec    edi
     fc4:	00 00                	add    BYTE PTR [eax],al
     fc6:	00 02                	add    BYTE PTR [edx],al
     fc8:	91                   	xchg   ecx,eax
     fc9:	0c 00                	or     al,0x0
     fcb:	11 0c 07             	adc    DWORD PTR [edi+eax*1],ecx
     fce:	00 00                	add    BYTE PTR [eax],al
     fd0:	01 4b 4f             	add    DWORD PTR [ebx+0x4f],ecx
     fd3:	00 00                	add    BYTE PTR [eax],al
     fd5:	00 79 0c             	add    BYTE PTR [ecx+0xc],bh
     fd8:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
     fde:	01 9c e9 04 00 00 12 	add    DWORD PTR [ecx+ebp*8+0x12000004],ebx
     fe5:	6d                   	ins    DWORD PTR es:[edi],dx
     fe6:	07                   	pop    es
     fe7:	00 00                	add    BYTE PTR [eax],al
     fe9:	01 4b 72             	add    DWORD PTR [ebx+0x72],ecx
     fec:	00 00                	add    BYTE PTR [eax],al
     fee:	00 02                	add    BYTE PTR [edx],al
     ff0:	91                   	xchg   ecx,eax
     ff1:	00 12                	add    BYTE PTR [edx],dl
     ff3:	16                   	push   ss
     ff4:	07                   	pop    es
     ff5:	00 00                	add    BYTE PTR [eax],al
     ff7:	01 4b 72             	add    DWORD PTR [ebx+0x72],ecx
     ffa:	00 00                	add    BYTE PTR [eax],al
     ffc:	00 02                	add    BYTE PTR [edx],al
     ffe:	91                   	xchg   ecx,eax
     fff:	04 12                	add    al,0x12
    1001:	58                   	pop    eax
    1002:	07                   	pop    es
    1003:	00 00                	add    BYTE PTR [eax],al
    1005:	01 4b 4f             	add    DWORD PTR [ebx+0x4f],ecx
    1008:	00 00                	add    BYTE PTR [eax],al
    100a:	00 02                	add    BYTE PTR [edx],al
    100c:	91                   	xchg   ecx,eax
    100d:	08 12                	or     BYTE PTR [edx],dl
    100f:	05 07 00 00 01       	add    eax,0x1000007
    1014:	4b                   	dec    ebx
    1015:	4f                   	dec    edi
    1016:	00 00                	add    BYTE PTR [eax],al
    1018:	00 02                	add    BYTE PTR [edx],al
    101a:	91                   	xchg   ecx,eax
    101b:	0c 00                	or     al,0x0
    101d:	11 41 06             	adc    DWORD PTR [ecx+0x6],eax
    1020:	00 00                	add    BYTE PTR [eax],al
    1022:	01 4f 4f             	add    DWORD PTR [edi+0x4f],ecx
    1025:	00 00                	add    BYTE PTR [eax],al
    1027:	00 9f 0c 00 9f 35    	add    BYTE PTR [edi+0x359f000c],bl
    102d:	00 00                	add    BYTE PTR [eax],al
    102f:	00 01                	add    BYTE PTR [ecx],al
    1031:	9c                   	pushf  
    1032:	3b 05 00 00 12 6d    	cmp    eax,DWORD PTR ds:0x6d120000
    1038:	07                   	pop    es
    1039:	00 00                	add    BYTE PTR [eax],al
    103b:	01 4f 72             	add    DWORD PTR [edi+0x72],ecx
    103e:	00 00                	add    BYTE PTR [eax],al
    1040:	00 02                	add    BYTE PTR [edx],al
    1042:	91                   	xchg   ecx,eax
    1043:	00 12                	add    BYTE PTR [edx],dl
    1045:	16                   	push   ss
    1046:	07                   	pop    es
    1047:	00 00                	add    BYTE PTR [eax],al
    1049:	01 4f 72             	add    DWORD PTR [edi+0x72],ecx
    104c:	00 00                	add    BYTE PTR [eax],al
    104e:	00 02                	add    BYTE PTR [edx],al
    1050:	91                   	xchg   ecx,eax
    1051:	04 12                	add    al,0x12
    1053:	58                   	pop    eax
    1054:	07                   	pop    es
    1055:	00 00                	add    BYTE PTR [eax],al
    1057:	01 4f 4f             	add    DWORD PTR [edi+0x4f],ecx
    105a:	00 00                	add    BYTE PTR [eax],al
    105c:	00 02                	add    BYTE PTR [edx],al
    105e:	91                   	xchg   ecx,eax
    105f:	08 12                	or     BYTE PTR [edx],dl
    1061:	05 07 00 00 01       	add    eax,0x1000007
    1066:	4f                   	dec    edi
    1067:	4f                   	dec    edi
    1068:	00 00                	add    BYTE PTR [eax],al
    106a:	00 02                	add    BYTE PTR [edx],al
    106c:	91                   	xchg   ecx,eax
    106d:	0c 00                	or     al,0x0
    106f:	11 9a 06 00 00 01    	adc    DWORD PTR [edx+0x1000006],ebx
    1075:	54                   	push   esp
    1076:	4f                   	dec    edi
    1077:	00 00                	add    BYTE PTR [eax],al
    1079:	00 d4                	add    ah,dl
    107b:	0c 00                	or     al,0x0
    107d:	9f                   	lahf   
    107e:	26 00 00             	add    BYTE PTR es:[eax],al
    1081:	00 01                	add    BYTE PTR [ecx],al
    1083:	9c                   	pushf  
    1084:	8d 05 00 00 12 6d    	lea    eax,ds:0x6d120000
    108a:	07                   	pop    es
    108b:	00 00                	add    BYTE PTR [eax],al
    108d:	01 54 72 00          	add    DWORD PTR [edx+esi*2+0x0],edx
    1091:	00 00                	add    BYTE PTR [eax],al
    1093:	02 91 00 12 16 07    	add    dl,BYTE PTR [ecx+0x7161200]
    1099:	00 00                	add    BYTE PTR [eax],al
    109b:	01 54 72 00          	add    DWORD PTR [edx+esi*2+0x0],edx
    109f:	00 00                	add    BYTE PTR [eax],al
    10a1:	02 91 04 12 58 07    	add    dl,BYTE PTR [ecx+0x7581204]
    10a7:	00 00                	add    BYTE PTR [eax],al
    10a9:	01 54 4f 00          	add    DWORD PTR [edi+ecx*2+0x0],edx
    10ad:	00 00                	add    BYTE PTR [eax],al
    10af:	02 91 08 12 05 07    	add    dl,BYTE PTR [ecx+0x7051208]
    10b5:	00 00                	add    BYTE PTR [eax],al
    10b7:	01 54 4f 00          	add    DWORD PTR [edi+ecx*2+0x0],edx
    10bb:	00 00                	add    BYTE PTR [eax],al
    10bd:	02 91 0c 00 11 3c    	add    dl,BYTE PTR [ecx+0x3c11000c]
    10c3:	07                   	pop    es
    10c4:	00 00                	add    BYTE PTR [eax],al
    10c6:	01 59 4f             	add    DWORD PTR [ecx+0x4f],ebx
    10c9:	00 00                	add    BYTE PTR [eax],al
    10cb:	00 fa                	add    dl,bh
    10cd:	0c 00                	or     al,0x0
    10cf:	9f                   	lahf   
    10d0:	2e 00 00             	add    BYTE PTR cs:[eax],al
    10d3:	00 01                	add    BYTE PTR [ecx],al
    10d5:	9c                   	pushf  
    10d6:	d1 05 00 00 12 6d    	rol    DWORD PTR ds:0x6d120000,1
    10dc:	07                   	pop    es
    10dd:	00 00                	add    BYTE PTR [eax],al
    10df:	01 59 72             	add    DWORD PTR [ecx+0x72],ebx
    10e2:	00 00                	add    BYTE PTR [eax],al
    10e4:	00 02                	add    BYTE PTR [edx],al
    10e6:	91                   	xchg   ecx,eax
    10e7:	00 12                	add    BYTE PTR [edx],dl
    10e9:	38 06                	cmp    BYTE PTR [esi],al
    10eb:	00 00                	add    BYTE PTR [eax],al
    10ed:	01 59 64             	add    DWORD PTR [ecx+0x64],ebx
    10f0:	00 00                	add    BYTE PTR [eax],al
    10f2:	00 02                	add    BYTE PTR [edx],al
    10f4:	91                   	xchg   ecx,eax
    10f5:	04 12                	add    al,0x12
    10f7:	4d                   	dec    ebp
    10f8:	06                   	push   es
    10f9:	00 00                	add    BYTE PTR [eax],al
    10fb:	01 59 4f             	add    DWORD PTR [ecx+0x4f],ebx
    10fe:	00 00                	add    BYTE PTR [eax],al
    1100:	00 02                	add    BYTE PTR [edx],al
    1102:	91                   	xchg   ecx,eax
    1103:	08 00                	or     BYTE PTR [eax],al
    1105:	11 48 06             	adc    DWORD PTR [eax+0x6],ecx
    1108:	00 00                	add    BYTE PTR [eax],al
    110a:	01 5e 4f             	add    DWORD PTR [esi+0x4f],ebx
    110d:	00 00                	add    BYTE PTR [eax],al
    110f:	00 28                	add    BYTE PTR [eax],ch
    1111:	0d 00 9f 26 00       	or     eax,0x269f00
    1116:	00 00                	add    BYTE PTR [eax],al
    1118:	01 9c 15 06 00 00 12 	add    DWORD PTR [ebp+edx*1+0x12000006],ebx
    111f:	6d                   	ins    DWORD PTR es:[edi],dx
    1120:	07                   	pop    es
    1121:	00 00                	add    BYTE PTR [eax],al
    1123:	01 5e 72             	add    DWORD PTR [esi+0x72],ebx
    1126:	00 00                	add    BYTE PTR [eax],al
    1128:	00 02                	add    BYTE PTR [edx],al
    112a:	91                   	xchg   ecx,eax
    112b:	00 12                	add    BYTE PTR [edx],dl
    112d:	38 06                	cmp    BYTE PTR [esi],al
    112f:	00 00                	add    BYTE PTR [eax],al
    1131:	01 5e 64             	add    DWORD PTR [esi+0x64],ebx
    1134:	00 00                	add    BYTE PTR [eax],al
    1136:	00 02                	add    BYTE PTR [edx],al
    1138:	91                   	xchg   ecx,eax
    1139:	04 12                	add    al,0x12
    113b:	4d                   	dec    ebp
    113c:	06                   	push   es
    113d:	00 00                	add    BYTE PTR [eax],al
    113f:	01 5e 4f             	add    DWORD PTR [esi+0x4f],ebx
    1142:	00 00                	add    BYTE PTR [eax],al
    1144:	00 02                	add    BYTE PTR [edx],al
    1146:	91                   	xchg   ecx,eax
    1147:	08 00                	or     BYTE PTR [eax],al
    1149:	11 bd 05 00 00 01    	adc    DWORD PTR [ebp+0x1000005],edi
    114f:	62 4f 00             	bound  ecx,QWORD PTR [edi+0x0]
    1152:	00 00                	add    BYTE PTR [eax],al
    1154:	4e                   	dec    esi
    1155:	0d 00 9f 2d 00       	or     eax,0x2d9f00
    115a:	00 00                	add    BYTE PTR [eax],al
    115c:	01 9c 4b 06 00 00 12 	add    DWORD PTR [ebx+ecx*2+0x12000006],ebx
    1163:	9a 05 00 00 01 62 74 	call   0x7462:0x1000005
    116a:	00 00                	add    BYTE PTR [eax],al
    116c:	00 02                	add    BYTE PTR [edx],al
    116e:	91                   	xchg   ecx,eax
    116f:	00 12                	add    BYTE PTR [edx],dl
    1171:	95                   	xchg   ebp,eax
    1172:	06                   	push   es
    1173:	00 00                	add    BYTE PTR [eax],al
    1175:	01 62 4b             	add    DWORD PTR [edx+0x4b],esp
    1178:	06                   	push   es
    1179:	00 00                	add    BYTE PTR [eax],al
    117b:	02 91 04 00 05 04    	add    dl,BYTE PTR [ecx+0x4050004]
    1181:	83 02 00             	add    DWORD PTR [edx],0x0
    1184:	00 11                	add    BYTE PTR [ecx],dl
    1186:	95                   	xchg   ebp,eax
    1187:	06                   	push   es
    1188:	00 00                	add    BYTE PTR [eax],al
    118a:	01 67 4f             	add    DWORD PTR [edi+0x4f],esp
    118d:	00 00                	add    BYTE PTR [eax],al
    118f:	00 7b 0d             	add    BYTE PTR [ebx+0xd],bh
    1192:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
    1198:	01 9c 87 06 00 00 12 	add    DWORD PTR [edi+eax*4+0x12000006],ebx
    119f:	9a 05 00 00 01 67 74 	call   0x7467:0x1000005
    11a6:	00 00                	add    BYTE PTR [eax],al
    11a8:	00 02                	add    BYTE PTR [edx],al
    11aa:	91                   	xchg   ecx,eax
    11ab:	00 12                	add    BYTE PTR [edx],dl
    11ad:	95                   	xchg   ebp,eax
    11ae:	06                   	push   es
    11af:	00 00                	add    BYTE PTR [eax],al
    11b1:	01 67 4b             	add    DWORD PTR [edi+0x4b],esp
    11b4:	06                   	push   es
    11b5:	00 00                	add    BYTE PTR [eax],al
    11b7:	02 91 04 00 11 21    	add    dl,BYTE PTR [ecx+0x21110004]
    11bd:	06                   	push   es
    11be:	00 00                	add    BYTE PTR [eax],al
    11c0:	01 6c 4f 00          	add    DWORD PTR [edi+ecx*2+0x0],ebp
    11c4:	00 00                	add    BYTE PTR [eax],al
    11c6:	9e                   	sahf   
    11c7:	0d 00 9f 29 03       	or     eax,0x3299f00
    11cc:	00 00                	add    BYTE PTR [eax],al
    11ce:	01 9c 37 07 00 00 12 	add    DWORD PTR [edi+esi*1+0x12000007],ebx
    11d5:	80 07 00             	add    BYTE PTR [edi],0x0
    11d8:	00 01                	add    BYTE PTR [ecx],al
    11da:	6c                   	ins    BYTE PTR es:[edi],dx
    11db:	8e 02                	mov    es,WORD PTR [edx]
    11dd:	00 00                	add    BYTE PTR [eax],al
    11df:	02 91 00 12 b8 06    	add    dl,BYTE PTR [ecx+0x6b81200]
    11e5:	00 00                	add    BYTE PTR [eax],al
    11e7:	01 6c 74 00          	add    DWORD PTR [esp+esi*2+0x0],ebp
    11eb:	00 00                	add    BYTE PTR [eax],al
    11ed:	02 91 04 12 c9 05    	add    dl,BYTE PTR [ecx+0x5c91204]
    11f3:	00 00                	add    BYTE PTR [eax],al
    11f5:	01 6c 99 02          	add    DWORD PTR [ecx+ebx*4+0x2],ebp
    11f9:	00 00                	add    BYTE PTR [eax],al
    11fb:	02 91 4c 14 7c 01    	add    dl,BYTE PTR [ecx+0x17c144c]
    1201:	00 00                	add    BYTE PTR [eax],al
    1203:	01 6e 37             	add    DWORD PTR [esi+0x37],ebp
    1206:	07                   	pop    es
    1207:	00 00                	add    BYTE PTR [eax],al
    1209:	02 91 5e 14 e2 06    	add    dl,BYTE PTR [ecx+0x6e2145e]
    120f:	00 00                	add    BYTE PTR [eax],al
    1211:	01 6f 74             	add    DWORD PTR [edi+0x74],ebp
    1214:	00 00                	add    BYTE PTR [eax],al
    1216:	00 02                	add    BYTE PTR [edx],al
    1218:	91                   	xchg   ecx,eax
    1219:	6c                   	ins    BYTE PTR es:[edi],dx
    121a:	14 72                	adc    al,0x72
    121c:	05 00 00 01 70       	add    eax,0x70010000
    1221:	4f                   	dec    edi
    1222:	00 00                	add    BYTE PTR [eax],al
    1224:	00 02                	add    BYTE PTR [edx],al
    1226:	91                   	xchg   ecx,eax
    1227:	68 14 94 06 00       	push   0x69414
    122c:	00 01                	add    BYTE PTR [ecx],al
    122e:	71 83                	jno    11b3 <__fmodf2+0x1187>
    1230:	02 00                	add    al,BYTE PTR [eax]
    1232:	00 02                	add    BYTE PTR [edx],al
    1234:	91                   	xchg   ecx,eax
    1235:	54                   	push   esp
    1236:	16                   	push   ss
    1237:	60                   	pusha  
    1238:	0f 00 9f bd 00 00 00 	ltr    WORD PTR [edi+0xbd]
    123f:	1e                   	push   ds
    1240:	07                   	pop    es
    1241:	00 00                	add    BYTE PTR [eax],al
    1243:	17                   	pop    ss
    1244:	72 65                	jb     12ab <__fmodf2+0x127f>
    1246:	73 00                	jae    1248 <__fmodf2+0x121c>
    1248:	01 9d 4f 00 00 00    	add    DWORD PTR [ebp+0x4f],ebx
    124e:	02 91 64 00 18 31    	add    dl,BYTE PTR [ecx+0x31180064]
    1254:	10 00                	adc    BYTE PTR [eax],al
    1256:	9f                   	lahf   
    1257:	8e 00                	mov    es,WORD PTR [eax]
    1259:	00 00                	add    BYTE PTR [eax],al
    125b:	17                   	pop    ss
    125c:	72 65                	jb     12c3 <__fmodf2+0x1297>
    125e:	73 00                	jae    1260 <__fmodf2+0x1234>
    1260:	01 ac 4f 00 00 00 02 	add    DWORD PTR [edi+ecx*2+0x2000000],ebp
    1267:	91                   	xchg   ecx,eax
    1268:	60                   	pusha  
    1269:	00 00                	add    BYTE PTR [eax],al
    126b:	0d 7a 00 00 00       	or     eax,0x7a
    1270:	47                   	inc    edi
    1271:	07                   	pop    es
    1272:	00 00                	add    BYTE PTR [eax],al
    1274:	19 6b 00             	sbb    DWORD PTR [ebx+0x0],ebp
    1277:	00 00                	add    BYTE PTR [eax],al
    1279:	01 00                	add    DWORD PTR [eax],eax
    127b:	11 aa 05 00 00 01    	adc    DWORD PTR [edx+0x1000005],ebp
    1281:	b8 64 00 00 00       	mov    eax,0x64
    1286:	c7                   	(bad)  
    1287:	10 00                	adc    BYTE PTR [eax],al
    1289:	9f                   	lahf   
    128a:	29 00                	sub    DWORD PTR [eax],eax
    128c:	00 00                	add    BYTE PTR [eax],al
    128e:	01 9c 6f 07 00 00 12 	add    DWORD PTR [edi+ebp*2+0x12000007],ebx
    1295:	93                   	xchg   ebx,eax
    1296:	05 00 00 01 b8       	add    eax,0xb8010000
    129b:	72 00                	jb     129d <__fmodf2+0x1271>
    129d:	00 00                	add    BYTE PTR [eax],al
    129f:	02 91 00 00 11 ed    	add    dl,BYTE PTR [ecx-0x12ef0000]
    12a5:	05 00 00 01 bd       	add    eax,0xbd010000
    12aa:	64 00 00             	add    BYTE PTR fs:[eax],al
    12ad:	00 f0                	add    al,dh
    12af:	10 00                	adc    BYTE PTR [eax],al
    12b1:	9f                   	lahf   
    12b2:	20 00                	and    BYTE PTR [eax],al
    12b4:	00 00                	add    BYTE PTR [eax],al
    12b6:	01 9c 97 07 00 00 12 	add    DWORD PTR [edi+edx*4+0x12000007],ebx
    12bd:	93                   	xchg   ebx,eax
    12be:	05 00 00 01 bd       	add    eax,0xbd010000
    12c3:	72 00                	jb     12c5 <__fmodf2+0x1299>
    12c5:	00 00                	add    BYTE PTR [eax],al
    12c7:	02 91 00 00 11 fe    	add    dl,BYTE PTR [ecx-0x1ef0000]
    12cd:	05 00 00 01 c2       	add    eax,0xc2010000
    12d2:	ad                   	lods   eax,DWORD PTR ds:[esi]
    12d3:	00 00                	add    BYTE PTR [eax],al
    12d5:	00 10                	add    BYTE PTR [eax],dl
    12d7:	11 00                	adc    DWORD PTR [eax],eax
    12d9:	9f                   	lahf   
    12da:	c1 01 00             	rol    DWORD PTR [ecx],0x0
    12dd:	00 01                	add    BYTE PTR [ecx],al
    12df:	9c                   	pushf  
    12e0:	54                   	push   esp
    12e1:	08 00                	or     BYTE PTR [eax],al
    12e3:	00 12                	add    BYTE PTR [edx],dl
    12e5:	c0 06 00             	rol    BYTE PTR [esi],0x0
    12e8:	00 01                	add    BYTE PTR [ecx],al
    12ea:	c2 54 08             	ret    0x854
    12ed:	00 00                	add    BYTE PTR [eax],al
    12ef:	02 91 00 1a 6e 00    	add    dl,BYTE PTR [ecx+0x6e1a00]
    12f5:	01 c2                	add    edx,eax
    12f7:	5a                   	pop    edx
    12f8:	08 00                	or     BYTE PTR [eax],al
    12fa:	00 02                	add    BYTE PTR [edx],al
    12fc:	91                   	xchg   ecx,eax
    12fd:	04 12                	add    al,0x12
    12ff:	93                   	xchg   ebx,eax
    1300:	05 00 00 01 c2       	add    eax,0xc2010000
    1305:	72 00                	jb     1307 <__fmodf2+0x12db>
    1307:	00 00                	add    BYTE PTR [eax],al
    1309:	02 91 08 14 16 07    	add    dl,BYTE PTR [ecx+0x7161408]
    130f:	00 00                	add    BYTE PTR [eax],al
    1311:	01 c4                	add    esp,eax
    1313:	74 00                	je     1315 <__fmodf2+0x12e9>
    1315:	00 00                	add    BYTE PTR [eax],al
    1317:	02 91 54 14 a0 07    	add    dl,BYTE PTR [ecx+0x7a01454]
    131d:	00 00                	add    BYTE PTR [eax],al
    131f:	01 c5                	add    ebp,eax
    1321:	4f                   	dec    edi
    1322:	00 00                	add    BYTE PTR [eax],al
    1324:	00 02                	add    BYTE PTR [edx],al
    1326:	91                   	xchg   ecx,eax
    1327:	60                   	pusha  
    1328:	14 1d                	adc    al,0x1d
    132a:	07                   	pop    es
    132b:	00 00                	add    BYTE PTR [eax],al
    132d:	01 c6                	add    esi,eax
    132f:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1330:	00 00                	add    BYTE PTR [eax],al
    1332:	00 02                	add    BYTE PTR [edx],al
    1334:	91                   	xchg   ecx,eax
    1335:	6c                   	ins    BYTE PTR es:[edi],dx
    1336:	14 c3                	adc    al,0xc3
    1338:	05 00 00 01 c7       	add    eax,0xc7010000
    133d:	74 00                	je     133f <__fmodf2+0x1313>
    133f:	00 00                	add    BYTE PTR [eax],al
    1341:	02 91 5c 14 72 06    	add    dl,BYTE PTR [ecx+0x672145c]
    1347:	00 00                	add    BYTE PTR [eax],al
    1349:	01 c8                	add    eax,ecx
    134b:	74 00                	je     134d <__fmodf2+0x1321>
    134d:	00 00                	add    BYTE PTR [eax],al
    134f:	02 91 50 14 87 07    	add    dl,BYTE PTR [ecx+0x7871450]
    1355:	00 00                	add    BYTE PTR [eax],al
    1357:	01 c9                	add    ecx,ecx
    1359:	ad                   	lods   eax,DWORD PTR ds:[esi]
    135a:	00 00                	add    BYTE PTR [eax],al
    135c:	00 02                	add    BYTE PTR [edx],al
    135e:	91                   	xchg   ecx,eax
    135f:	68 14 b0 05 00       	push   0x5b014
    1364:	00 01                	add    BYTE PTR [ecx],al
    1366:	ca 4f 00             	retf   0x4f
    1369:	00 00                	add    BYTE PTR [eax],al
    136b:	02 91 58 14 72 05    	add    dl,BYTE PTR [ecx+0x5721458]
    1371:	00 00                	add    BYTE PTR [eax],al
    1373:	01 cb                	add    ebx,ecx
    1375:	4f                   	dec    edi
    1376:	00 00                	add    BYTE PTR [eax],al
    1378:	00 02                	add    BYTE PTR [edx],al
    137a:	91                   	xchg   ecx,eax
    137b:	64 1b 5c 06 00       	sbb    ebx,DWORD PTR fs:[esi+eax*1+0x0]
    1380:	00 01                	add    BYTE PTR [ecx],al
    1382:	e8 bb 12 00 9f       	call   9f002642 <mallocI+0x14d>
    1387:	00 05 04 74 00 00    	add    BYTE PTR ds:0x7404,al
    138d:	00 05 04 ad 00 00    	add    BYTE PTR ds:0xad04,al
    1393:	00 11                	add    BYTE PTR [ecx],dl
    1395:	54                   	push   esp
    1396:	06                   	push   es
    1397:	00 00                	add    BYTE PTR [eax],al
    1399:	01 ed                	add    ebp,ebp
    139b:	ad                   	lods   eax,DWORD PTR ds:[esi]
    139c:	00 00                	add    BYTE PTR [eax],al
    139e:	00 d1                	add    cl,dl
    13a0:	12 00                	adc    al,BYTE PTR [eax]
    13a2:	9f                   	lahf   
    13a3:	26 00 00             	add    BYTE PTR es:[eax],al
    13a6:	00 01                	add    BYTE PTR [ecx],al
    13a8:	9c                   	pushf  
    13a9:	a2 08 00 00 12       	mov    ds:0x12000008,al
    13ae:	c0 06 00             	rol    BYTE PTR [esi],0x0
    13b1:	00 01                	add    BYTE PTR [ecx],al
    13b3:	ed                   	in     eax,dx
    13b4:	54                   	push   esp
    13b5:	08 00                	or     BYTE PTR [eax],al
    13b7:	00 02                	add    BYTE PTR [edx],al
    13b9:	91                   	xchg   ecx,eax
    13ba:	00 1a                	add    BYTE PTR [edx],bl
    13bc:	6e                   	outs   dx,BYTE PTR ds:[esi]
    13bd:	00 01                	add    BYTE PTR [ecx],al
    13bf:	ed                   	in     eax,dx
    13c0:	5a                   	pop    edx
    13c1:	08 00                	or     BYTE PTR [eax],al
    13c3:	00 02                	add    BYTE PTR [edx],al
    13c5:	91                   	xchg   ecx,eax
    13c6:	04 12                	add    al,0x12
    13c8:	93                   	xchg   ebx,eax
    13c9:	05 00 00 01 ed       	add    eax,0xed010000
    13ce:	72 00                	jb     13d0 <__fmodf2+0x13a4>
    13d0:	00 00                	add    BYTE PTR [eax],al
    13d2:	02 91 08 00 11 a0    	add    dl,BYTE PTR [ecx-0x5feefff8]
    13d8:	06                   	push   es
    13d9:	00 00                	add    BYTE PTR [eax],al
    13db:	01 f2                	add    edx,esi
    13dd:	4f                   	dec    edi
    13de:	00 00                	add    BYTE PTR [eax],al
    13e0:	00 f7                	add    bh,dh
    13e2:	12 00                	adc    al,BYTE PTR [eax]
    13e4:	9f                   	lahf   
    13e5:	29 00                	sub    DWORD PTR [eax],eax
    13e7:	00 00                	add    BYTE PTR [eax],al
    13e9:	01 9c ca 08 00 00 12 	add    DWORD PTR [edx+ecx*8+0x12000008],ebx
    13f0:	af                   	scas   eax,DWORD PTR es:[edi]
    13f1:	06                   	push   es
    13f2:	00 00                	add    BYTE PTR [eax],al
    13f4:	01 f2                	add    edx,esi
    13f6:	74 00                	je     13f8 <__fmodf2+0x13cc>
    13f8:	00 00                	add    BYTE PTR [eax],al
    13fa:	02 91 00 00 1c 78    	add    dl,BYTE PTR [ecx+0x781c0000]
    1400:	00 00                	add    BYTE PTR [eax],al
    1402:	00 05 33 54 08 00    	add    BYTE PTR ds:0x85433,al
    1408:	00 05 03 40 92 00    	add    BYTE PTR ds:0x924003,al
    140e:	9f                   	lahf   
    140f:	1c 10                	sbb    al,0x10
    1411:	02 00                	add    al,BYTE PTR [eax]
    1413:	00 04 35 ec 08 00 00 	add    BYTE PTR [esi*1+0x8ec],al
    141a:	05 03 50 92 00       	add    eax,0x925003
    141f:	9f                   	lahf   
    1420:	05 04 a2 00 00       	add    eax,0xa204
    1425:	00 1c 33             	add    BYTE PTR [ebx+esi*1],bl
    1428:	02 00                	add    al,BYTE PTR [eax]
    142a:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    142d:	97                   	xchg   edi,eax
    142e:	00 00                	add    BYTE PTR [eax],al
    1430:	00 05 03 4c 92 00    	add    BYTE PTR ds:0x924c03,al
    1436:	9f                   	lahf   
    1437:	1c 7f                	sbb    al,0x7f
    1439:	05 00 00 01 0d       	add    eax,0xd010000
    143e:	74 00                	je     1440 <__fmodf2+0x1414>
    1440:	00 00                	add    BYTE PTR [eax],al
    1442:	05 03 54 92 00       	add    eax,0x925403
    1447:	9f                   	lahf   
    1448:	1c 74                	sbb    al,0x74
    144a:	07                   	pop    es
    144b:	00 00                	add    BYTE PTR [eax],al
    144d:	01 0e                	add    DWORD PTR [esi],ecx
    144f:	74 00                	je     1451 <__fmodf2+0x1425>
    1451:	00 00                	add    BYTE PTR [eax],al
    1453:	05 03 60 92 00       	add    eax,0x926003
    1458:	9f                   	lahf   
    1459:	1c d9                	sbb    al,0xd9
    145b:	05 00 00 01 0f       	add    eax,0xf010000
    1460:	74 00                	je     1462 <__fmodf2+0x1436>
    1462:	00 00                	add    BYTE PTR [eax],al
    1464:	05 03 58 92 00       	add    eax,0x925803
    1469:	9f                   	lahf   
    146a:	1c 5d                	sbb    al,0x5d
    146c:	07                   	pop    es
    146d:	00 00                	add    BYTE PTR [eax],al
    146f:	01 10                	add    DWORD PTR [eax],edx
    1471:	74 00                	je     1473 <__fmodf2+0x1447>
    1473:	00 00                	add    BYTE PTR [eax],al
    1475:	05 03 5c 92 00       	add    eax,0x925c03
    147a:	9f                   	lahf   
    147b:	00 9e 02 00 00 04    	add    BYTE PTR [esi+0x4000002],bl
    1481:	00 e3                	add    bl,ah
    1483:	05 00 00 04 01       	add    eax,0x1040000
    1488:	c3                   	ret    
    1489:	00 00                	add    BYTE PTR [eax],al
    148b:	00 0c e6             	add    BYTE PTR [esi+eiz*8],cl
    148e:	07                   	pop    es
    148f:	00 00                	add    BYTE PTR [eax],al
    1491:	4d                   	dec    ebp
    1492:	00 00                	add    BYTE PTR [eax],al
    1494:	00 20                	add    BYTE PTR [eax],ah
    1496:	13 00                	adc    eax,DWORD PTR [eax]
    1498:	9f                   	lahf   
    1499:	69 01 00 00 79 06    	imul   eax,DWORD PTR [ecx],0x6790000
    149f:	00 00                	add    BYTE PTR [eax],al
    14a1:	02 01                	add    al,BYTE PTR [ecx]
    14a3:	08 3f                	or     BYTE PTR [edi],bh
    14a5:	00 00                	add    BYTE PTR [eax],al
    14a7:	00 02                	add    BYTE PTR [edx],al
    14a9:	02 07                	add    al,BYTE PTR [edi]
    14ab:	0e                   	push   cs
    14ac:	00 00                	add    BYTE PTR [eax],al
    14ae:	00 02                	add    BYTE PTR [edx],al
    14b0:	04 07                	add    al,0x7
    14b2:	32 00                	xor    al,BYTE PTR [eax]
    14b4:	00 00                	add    BYTE PTR [eax],al
    14b6:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    14b9:	2d 00 00 00 02       	sub    eax,0x2000000
    14be:	01 06                	add    DWORD PTR [esi],eax
    14c0:	41                   	inc    ecx
    14c1:	00 00                	add    BYTE PTR [eax],al
    14c3:	00 02                	add    BYTE PTR [edx],al
    14c5:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    14cb:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    14d2:	02 08                	add    cl,BYTE PTR [eax]
    14d4:	05 00 00 00 00       	add    eax,0x0
    14d9:	02 08                	add    cl,BYTE PTR [eax]
    14db:	07                   	pop    es
    14dc:	28 00                	sub    BYTE PTR [eax],al
    14de:	00 00                	add    BYTE PTR [eax],al
    14e0:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    14e7:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    14ea:	2a 01                	sub    al,BYTE PTR [ecx]
    14ec:	00 00                	add    BYTE PTR [eax],al
    14ee:	04 04                	add    al,0x4
    14f0:	78 00                	js     14f2 <__fmodf2+0x14c6>
    14f2:	00 00                	add    BYTE PTR [eax],al
    14f4:	02 01                	add    al,BYTE PTR [ecx]
    14f6:	06                   	push   es
    14f7:	48                   	dec    eax
    14f8:	00 00                	add    BYTE PTR [eax],al
    14fa:	00 02                	add    BYTE PTR [edx],al
    14fc:	0c 04                	or     al,0x4
    14fe:	ad                   	lods   eax,DWORD PTR ds:[esi]
    14ff:	00 00                	add    BYTE PTR [eax],al
    1501:	00 05 a0 03 00 00    	add    BYTE PTR ds:0x3a0,al
    1507:	04 33                	add    al,0x33
    1509:	00 00                	add    BYTE PTR [eax],al
    150b:	00 02                	add    BYTE PTR [edx],al
    150d:	15 87 01 00 00       	adc    eax,0x187
    1512:	06                   	push   es
    1513:	51                   	push   ecx
    1514:	04 00                	add    al,0x0
    1516:	00 00                	add    BYTE PTR [eax],al
    1518:	06                   	push   es
    1519:	96                   	xchg   esi,eax
    151a:	04 00                	add    al,0x0
    151c:	00 01                	add    BYTE PTR [ecx],al
    151e:	06                   	push   es
    151f:	84 02                	test   BYTE PTR [edx],al
    1521:	00 00                	add    BYTE PTR [eax],al
    1523:	02 06                	add    al,BYTE PTR [esi]
    1525:	83 03 00             	add    DWORD PTR [ebx],0x0
    1528:	00 03                	add    BYTE PTR [ebx],al
    152a:	06                   	push   es
    152b:	6a 02                	push   0x2
    152d:	00 00                	add    BYTE PTR [eax],al
    152f:	04 06                	add    al,0x6
    1531:	da 04 00             	fiadd  DWORD PTR [eax+eax*1]
    1534:	00 05 06 78 04 00    	add    BYTE PTR ds:0x47806,al
    153a:	00 0a                	add    BYTE PTR [edx],cl
    153c:	06                   	push   es
    153d:	c4 03                	les    eax,FWORD PTR [ebx]
    153f:	00 00                	add    BYTE PTR [eax],al
    1541:	0b 06                	or     eax,DWORD PTR [esi]
    1543:	2a 04 00             	sub    al,BYTE PTR [eax+eax*1]
    1546:	00 0c 06             	add    BYTE PTR [esi+eax*1],cl
    1549:	91                   	xchg   ecx,eax
    154a:	03 00                	add    eax,DWORD PTR [eax]
    154c:	00 0d 06 aa 03 00    	add    BYTE PTR ds:0x3aa06,cl
    1552:	00 0e                	add    BYTE PTR [esi],cl
    1554:	06                   	push   es
    1555:	77 02                	ja     1559 <__fmodf2+0x152d>
    1557:	00 00                	add    BYTE PTR [eax],al
    1559:	0f 06                	clts   
    155b:	f4                   	hlt    
    155c:	03 00                	add    eax,DWORD PTR [eax]
    155e:	00 10                	add    BYTE PTR [eax],dl
    1560:	06                   	push   es
    1561:	27                   	daa    
    1562:	05 00 00 11 06       	add    eax,0x6110000
    1567:	05 05 00 00 4f       	add    eax,0x4f000005
    156c:	06                   	push   es
    156d:	cb                   	retf   
    156e:	04 00                	add    al,0x0
    1570:	00 50 06             	add    BYTE PTR [eax+0x6],dl
    1573:	44                   	inc    esp
    1574:	04 00                	add    al,0x0
    1576:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
    1579:	14 05                	adc    al,0x5
    157b:	00 00                	add    BYTE PTR [eax],al
    157d:	61                   	popa   
    157e:	06                   	push   es
    157f:	49                   	dec    ecx
    1580:	03 00                	add    eax,DWORD PTR [eax]
    1582:	00 97 07 61 04 00    	add    BYTE PTR [edi+0x46107],dl
    1588:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    158b:	07                   	pop    es
    158c:	37                   	aaa    
    158d:	04 00                	add    al,0x0
    158f:	00 64 01 07          	add    BYTE PTR [ecx+eax*1+0x7],ah
    1593:	44                   	inc    esp
    1594:	05 00 00 65 01       	add    eax,0x1650000
    1599:	07                   	pop    es
    159a:	25 03 00 00 66       	and    eax,0x66000003
    159f:	01 07                	add    DWORD PTR [edi],eax
    15a1:	56                   	push   esi
    15a2:	05 00 00 67 01       	add    eax,0x1670000
    15a7:	07                   	pop    es
    15a8:	b7 03                	mov    bh,0x3
    15aa:	00 00                	add    BYTE PTR [eax],al
    15ac:	68 01 07 d6 02       	push   0x2d60701
    15b1:	00 00                	add    BYTE PTR [eax],al
    15b3:	69 01 07 85 04 00    	imul   eax,DWORD PTR [ecx],0x48507
    15b9:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    15bc:	07                   	pop    es
    15bd:	39 03                	cmp    DWORD PTR [ebx],eax
    15bf:	00 00                	add    BYTE PTR [eax],al
    15c1:	71 01                	jno    15c4 <__fmodf2+0x1598>
    15c3:	07                   	pop    es
    15c4:	e8 04 00 00 00       	call   15cd <__fmodf2+0x15a1>
    15c9:	03 07                	add    eax,DWORD PTR [edi]
    15cb:	d9 03                	fld    DWORD PTR [ebx]
    15cd:	00 00                	add    BYTE PTR [eax],al
    15cf:	01 03                	add    DWORD PTR [ebx],eax
    15d1:	07                   	pop    es
    15d2:	e8 03 00 00 02       	call   20015da <sysEnter_Vector+0x1ed15da>
    15d7:	03 07                	add    eax,DWORD PTR [edi]
    15d9:	73 03                	jae    15de <__fmodf2+0x15b2>
    15db:	00 00                	add    BYTE PTR [eax],al
    15dd:	03 03                	add    eax,DWORD PTR [ebx]
    15df:	07                   	pop    es
    15e0:	b6 02                	mov    dh,0x2
    15e2:	00 00                	add    BYTE PTR [eax],al
    15e4:	04 03                	add    al,0x3
    15e6:	07                   	pop    es
    15e7:	15 03 00 00 05       	adc    eax,0x5000003
    15ec:	03 07                	add    eax,DWORD PTR [edi]
    15ee:	64 03 00             	add    eax,DWORD PTR fs:[eax]
    15f1:	00 06                	add    BYTE PTR [esi],al
    15f3:	03 07                	add    eax,DWORD PTR [edi]
    15f5:	b2 04                	mov    dl,0x4
    15f7:	00 00                	add    BYTE PTR [eax],al
    15f9:	07                   	pop    es
    15fa:	03 07                	add    eax,DWORD PTR [edi]
    15fc:	01 04 00             	add    DWORD PTR [eax+eax*1],eax
    15ff:	00 00                	add    BYTE PTR [eax],al
    1601:	09 00                	or     DWORD PTR [eax],eax
    1603:	08 d3                	or     bl,dl
    1605:	07                   	pop    es
    1606:	00 00                	add    BYTE PTR [eax],al
    1608:	01 0f                	add    DWORD PTR [edi],ecx
    160a:	20 13                	and    BYTE PTR [ebx],dl
    160c:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
    1612:	01 9c ab 01 00 00 09 	add    DWORD PTR [ebx+ebp*4+0x9000001],ebx
    1619:	16                   	push   ss
    161a:	07                   	pop    es
    161b:	00 00                	add    BYTE PTR [eax],al
    161d:	01 0f                	add    DWORD PTR [edi],ecx
    161f:	72 00                	jb     1621 <__fmodf2+0x15f5>
    1621:	00 00                	add    BYTE PTR [eax],al
    1623:	02 91 00 00 08 ce    	add    dl,BYTE PTR [ecx-0x31f80000]
    1629:	07                   	pop    es
    162a:	00 00                	add    BYTE PTR [eax],al
    162c:	01 14 46             	add    DWORD PTR [esi+eax*2],edx
    162f:	13 00                	adc    eax,DWORD PTR [eax]
    1631:	9f                   	lahf   
    1632:	43                   	inc    ebx
    1633:	00 00                	add    BYTE PTR [eax],al
    1635:	00 01                	add    BYTE PTR [ecx],al
    1637:	9c                   	pushf  
    1638:	db 01                	fild   DWORD PTR [ecx]
    163a:	00 00                	add    BYTE PTR [eax],al
    163c:	0a 63 00             	or     ah,BYTE PTR [ebx+0x0]
    163f:	01 14 78             	add    DWORD PTR [eax+edi*2],edx
    1642:	00 00                	add    BYTE PTR [eax],al
    1644:	00 02                	add    BYTE PTR [edx],al
    1646:	91                   	xchg   ecx,eax
    1647:	60                   	pusha  
    1648:	0b 16                	or     edx,DWORD PTR [esi]
    164a:	07                   	pop    es
    164b:	00 00                	add    BYTE PTR [eax],al
    164d:	01 16                	add    DWORD PTR [esi],edx
    164f:	db 01                	fild   DWORD PTR [ecx]
    1651:	00 00                	add    BYTE PTR [eax],al
    1653:	02 91 72 00 0c 78    	add    dl,BYTE PTR [ecx+0x780c0072]
    1659:	00 00                	add    BYTE PTR [eax],al
    165b:	00 eb                	add    bl,ch
    165d:	01 00                	add    DWORD PTR [eax],eax
    165f:	00 0d 6b 00 00 00    	add    BYTE PTR ds:0x6b,cl
    1665:	01 00                	add    DWORD PTR [eax],eax
    1667:	0e                   	push   cs
    1668:	c1 07 00             	rol    DWORD PTR [edi],0x0
    166b:	00 01                	add    BYTE PTR [ecx],al
    166d:	1f                   	pop    ds
    166e:	78 00                	js     1670 <__fmodf2+0x1644>
    1670:	00 00                	add    BYTE PTR [eax],al
    1672:	89 13                	mov    DWORD PTR [ebx],edx
    1674:	00 9f 43 00 00 00    	add    BYTE PTR [edi+0x43],bl
    167a:	01 9c 11 02 00 00 0f 	add    DWORD PTR [ecx+edx*1+0xf000002],ebx
    1681:	63 00                	arpl   WORD PTR [eax],ax
    1683:	01 21                	add    DWORD PTR [ecx],esp
    1685:	78 00                	js     1687 <__fmodf2+0x165b>
    1687:	00 00                	add    BYTE PTR [eax],al
    1689:	02 91 73 00 10 c9    	add    dl,BYTE PTR [ecx-0x36efff8d]
    168f:	07                   	pop    es
    1690:	00 00                	add    BYTE PTR [eax],al
    1692:	01 2d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ebp
    1698:	cc                   	int3   
    1699:	13 00                	adc    eax,DWORD PTR [eax]
    169b:	9f                   	lahf   
    169c:	bd 00 00 00 01       	mov    ebp,0x1000000
    16a1:	9c                   	pushf  
    16a2:	8a 02                	mov    al,BYTE PTR [edx]
    16a4:	00 00                	add    BYTE PTR [eax],al
    16a6:	09 16                	or     DWORD PTR [esi],edx
    16a8:	07                   	pop    es
    16a9:	00 00                	add    BYTE PTR [eax],al
    16ab:	01 2d 72 00 00 00    	add    DWORD PTR ds:0x72,ebp
    16b1:	02 91 00 09 d8 07    	add    dl,BYTE PTR [ecx+0x7d80900]
    16b7:	00 00                	add    BYTE PTR [eax],al
    16b9:	01 2d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ebp
    16bf:	02 91 04 09 93 05    	add    dl,BYTE PTR [ecx+0x5930904]
    16c5:	00 00                	add    BYTE PTR [eax],al
    16c7:	01 2d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ebp
    16cd:	02 91 08 0b df 07    	add    dl,BYTE PTR [ecx+0x7df0b08]
    16d3:	00 00                	add    BYTE PTR [eax],al
    16d5:	01 2f                	add    DWORD PTR [edi],ebp
    16d7:	78 00                	js     16d9 <__fmodf2+0x16ad>
    16d9:	00 00                	add    BYTE PTR [eax],al
    16db:	02 91 6b 0f 6c 65    	add    dl,BYTE PTR [ecx+0x656c0f6b]
    16e1:	6e                   	outs   dx,BYTE PTR ds:[esi]
    16e2:	00 01                	add    BYTE PTR [ecx],al
    16e4:	30 4f 00             	xor    BYTE PTR [edi+0x0],cl
    16e7:	00 00                	add    BYTE PTR [eax],al
    16e9:	02 91 6c 0b 02 08    	add    dl,BYTE PTR [ecx+0x8020b6c]
    16ef:	00 00                	add    BYTE PTR [eax],al
    16f1:	01 31                	add    DWORD PTR [ecx],esi
    16f3:	db 01                	fild   DWORD PTR [ecx]
    16f5:	00 00                	add    BYTE PTR [eax],al
    16f7:	02 91 69 11 f8 07    	add    dl,BYTE PTR [ecx+0x7f81169]
    16fd:	00 00                	add    BYTE PTR [eax],al
    16ff:	01 37                	add    DWORD PTR [edi],esi
    1701:	0c 14                	or     al,0x14
    1703:	00 9f 00 12 78 00    	add    BYTE PTR [edi+0x781200],bl
    1709:	00 00                	add    BYTE PTR [eax],al
    170b:	03 33                	add    esi,DWORD PTR [ebx]
    170d:	9b                   	fwait
    170e:	02 00                	add    al,BYTE PTR [eax]
    1710:	00 05 03 40 92 00    	add    BYTE PTR ds:0x924003,al
    1716:	9f                   	lahf   
    1717:	04 04                	add    al,0x4
    1719:	72 00                	jb     171b <__fmodf2+0x16ef>
    171b:	00 00                	add    BYTE PTR [eax],al
    171d:	00 fe                	add    dh,bh
    171f:	0b 00                	or     eax,DWORD PTR [eax]
    1721:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1724:	f5                   	cmc    
    1725:	06                   	push   es
    1726:	00 00                	add    BYTE PTR [eax],al
    1728:	04 01                	add    al,0x1
    172a:	c3                   	ret    
    172b:	00 00                	add    BYTE PTR [eax],al
    172d:	00 0c c9             	add    BYTE PTR [ecx+ecx*8],cl
    1730:	09 00                	or     DWORD PTR [eax],eax
    1732:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    1735:	00 00                	add    BYTE PTR [eax],al
    1737:	8c 14 00             	mov    WORD PTR [eax+eax*1],ss
    173a:	9f                   	lahf   
    173b:	8c 0d 00 00 49 07    	mov    WORD PTR ds:0x7490000,cs
    1741:	00 00                	add    BYTE PTR [eax],al
    1743:	02 01                	add    al,BYTE PTR [ecx]
    1745:	08 3f                	or     BYTE PTR [edi],bh
    1747:	00 00                	add    BYTE PTR [eax],al
    1749:	00 02                	add    BYTE PTR [edx],al
    174b:	02 07                	add    al,BYTE PTR [edi]
    174d:	0e                   	push   cs
    174e:	00 00                	add    BYTE PTR [eax],al
    1750:	00 02                	add    BYTE PTR [edx],al
    1752:	04 07                	add    al,0x7
    1754:	32 00                	xor    al,BYTE PTR [eax]
    1756:	00 00                	add    BYTE PTR [eax],al
    1758:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    175b:	2d 00 00 00 02       	sub    eax,0x2000000
    1760:	01 06                	add    DWORD PTR [esi],eax
    1762:	41                   	inc    ecx
    1763:	00 00                	add    BYTE PTR [eax],al
    1765:	00 02                	add    BYTE PTR [edx],al
    1767:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    176d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1774:	02 08                	add    cl,BYTE PTR [eax]
    1776:	05 00 00 00 00       	add    eax,0x0
    177b:	02 08                	add    cl,BYTE PTR [eax]
    177d:	07                   	pop    es
    177e:	28 00                	sub    BYTE PTR [eax],al
    1780:	00 00                	add    BYTE PTR [eax],al
    1782:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1789:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    178c:	2a 01                	sub    al,BYTE PTR [ecx]
    178e:	00 00                	add    BYTE PTR [eax],al
    1790:	04 04                	add    al,0x4
    1792:	05 04 7a 00 00       	add    eax,0x7a04
    1797:	00 02                	add    BYTE PTR [edx],al
    1799:	01 06                	add    DWORD PTR [esi],eax
    179b:	48                   	dec    eax
    179c:	00 00                	add    BYTE PTR [eax],al
    179e:	00 06                	add    BYTE PTR [esi],al
    17a0:	35 09 00 00 02       	xor    eax,0x2000009
    17a5:	28 8c 00 00 00 07 04 	sub    BYTE PTR [eax+eax*1+0x4070000],cl
    17ac:	61                   	popa   
    17ad:	08 00                	or     BYTE PTR [eax],al
    17af:	00 7a 00             	add    BYTE PTR [edx+0x0],bh
    17b2:	00 00                	add    BYTE PTR [eax],al
    17b4:	06                   	push   es
    17b5:	3c 09                	cmp    al,0x9
    17b7:	00 00                	add    BYTE PTR [eax],al
    17b9:	02 62 81             	add    ah,BYTE PTR [edx-0x7f]
    17bc:	00 00                	add    BYTE PTR [eax],al
    17be:	00 06                	add    BYTE PTR [esi],al
    17c0:	45                   	inc    ebp
    17c1:	02 00                	add    al,BYTE PTR [eax]
    17c3:	00 03                	add    BYTE PTR [ebx],al
    17c5:	34 33                	xor    al,0x33
    17c7:	00 00                	add    BYTE PTR [eax],al
    17c9:	00 06                	add    BYTE PTR [esi],al
    17cb:	01 02                	add    DWORD PTR [edx],eax
    17cd:	00 00                	add    BYTE PTR [eax],al
    17cf:	03 56 33             	add    edx,DWORD PTR [esi+0x33]
    17d2:	00 00                	add    BYTE PTR [eax],al
    17d4:	00 06                	add    BYTE PTR [esi],al
    17d6:	91                   	xchg   ecx,eax
    17d7:	02 00                	add    al,BYTE PTR [eax]
    17d9:	00 04 d8             	add    BYTE PTR [eax+ebx*8],al
    17dc:	33 00                	xor    eax,DWORD PTR [eax]
    17de:	00 00                	add    BYTE PTR [eax],al
    17e0:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    17e3:	ad                   	lods   eax,DWORD PTR ds:[esi]
    17e4:	00 00                	add    BYTE PTR [eax],al
    17e6:	00 08                	add    BYTE PTR [eax],cl
    17e8:	a0 03 00 00 04       	mov    al,ds:0x4000003
    17ed:	33 00                	xor    eax,DWORD PTR [eax]
    17ef:	00 00                	add    BYTE PTR [eax],al
    17f1:	05 15 ca 01 00       	add    eax,0x1ca15
    17f6:	00 09                	add    BYTE PTR [ecx],cl
    17f8:	51                   	push   ecx
    17f9:	04 00                	add    al,0x0
    17fb:	00 00                	add    BYTE PTR [eax],al
    17fd:	09 96 04 00 00 01    	or     DWORD PTR [esi+0x1000004],edx
    1803:	09 84 02 00 00 02 09 	or     DWORD PTR [edx+eax*1+0x9020000],eax
    180a:	83 03 00             	add    DWORD PTR [ebx],0x0
    180d:	00 03                	add    BYTE PTR [ebx],al
    180f:	09 6a 02             	or     DWORD PTR [edx+0x2],ebp
    1812:	00 00                	add    BYTE PTR [eax],al
    1814:	04 09                	add    al,0x9
    1816:	da 04 00             	fiadd  DWORD PTR [eax+eax*1]
    1819:	00 05 09 78 04 00    	add    BYTE PTR ds:0x47809,al
    181f:	00 0a                	add    BYTE PTR [edx],cl
    1821:	09 c4                	or     esp,eax
    1823:	03 00                	add    eax,DWORD PTR [eax]
    1825:	00 0b                	add    BYTE PTR [ebx],cl
    1827:	09 2a                	or     DWORD PTR [edx],ebp
    1829:	04 00                	add    al,0x0
    182b:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    182e:	91                   	xchg   ecx,eax
    182f:	03 00                	add    eax,DWORD PTR [eax]
    1831:	00 0d 09 aa 03 00    	add    BYTE PTR ds:0x3aa09,cl
    1837:	00 0e                	add    BYTE PTR [esi],cl
    1839:	09 77 02             	or     DWORD PTR [edi+0x2],esi
    183c:	00 00                	add    BYTE PTR [eax],al
    183e:	0f 09                	wbinvd 
    1840:	f4                   	hlt    
    1841:	03 00                	add    eax,DWORD PTR [eax]
    1843:	00 10                	add    BYTE PTR [eax],dl
    1845:	09 27                	or     DWORD PTR [edi],esp
    1847:	05 00 00 11 09       	add    eax,0x9110000
    184c:	05 05 00 00 4f       	add    eax,0x4f000005
    1851:	09 cb                	or     ebx,ecx
    1853:	04 00                	add    al,0x0
    1855:	00 50 09             	add    BYTE PTR [eax+0x9],dl
    1858:	44                   	inc    esp
    1859:	04 00                	add    al,0x0
    185b:	00 59 09             	add    BYTE PTR [ecx+0x9],bl
    185e:	14 05                	adc    al,0x5
    1860:	00 00                	add    BYTE PTR [eax],al
    1862:	61                   	popa   
    1863:	09 49 03             	or     DWORD PTR [ecx+0x3],ecx
    1866:	00 00                	add    BYTE PTR [eax],al
    1868:	97                   	xchg   edi,eax
    1869:	0a 61 04             	or     ah,BYTE PTR [ecx+0x4]
    186c:	00 00                	add    BYTE PTR [eax],al
    186e:	63 01                	arpl   WORD PTR [ecx],ax
    1870:	0a 37                	or     dh,BYTE PTR [edi]
    1872:	04 00                	add    al,0x0
    1874:	00 64 01 0a          	add    BYTE PTR [ecx+eax*1+0xa],ah
    1878:	44                   	inc    esp
    1879:	05 00 00 65 01       	add    eax,0x1650000
    187e:	0a 25 03 00 00 66    	or     ah,BYTE PTR ds:0x66000003
    1884:	01 0a                	add    DWORD PTR [edx],ecx
    1886:	56                   	push   esi
    1887:	05 00 00 67 01       	add    eax,0x1670000
    188c:	0a b7 03 00 00 68    	or     dh,BYTE PTR [edi+0x68000003]
    1892:	01 0a                	add    DWORD PTR [edx],ecx
    1894:	d6                   	(bad)  
    1895:	02 00                	add    al,BYTE PTR [eax]
    1897:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    189a:	0a 85 04 00 00 70    	or     al,BYTE PTR [ebp+0x70000004]
    18a0:	01 0a                	add    DWORD PTR [edx],ecx
    18a2:	39 03                	cmp    DWORD PTR [ebx],eax
    18a4:	00 00                	add    BYTE PTR [eax],al
    18a6:	71 01                	jno    18a9 <__fmodf2+0x187d>
    18a8:	0a e8                	or     ch,al
    18aa:	04 00                	add    al,0x0
    18ac:	00 00                	add    BYTE PTR [eax],al
    18ae:	03 0a                	add    ecx,DWORD PTR [edx]
    18b0:	d9 03                	fld    DWORD PTR [ebx]
    18b2:	00 00                	add    BYTE PTR [eax],al
    18b4:	01 03                	add    DWORD PTR [ebx],eax
    18b6:	0a e8                	or     ch,al
    18b8:	03 00                	add    eax,DWORD PTR [eax]
    18ba:	00 02                	add    BYTE PTR [edx],al
    18bc:	03 0a                	add    ecx,DWORD PTR [edx]
    18be:	73 03                	jae    18c3 <__fmodf2+0x1897>
    18c0:	00 00                	add    BYTE PTR [eax],al
    18c2:	03 03                	add    eax,DWORD PTR [ebx]
    18c4:	0a b6 02 00 00 04    	or     dh,BYTE PTR [esi+0x4000002]
    18ca:	03 0a                	add    ecx,DWORD PTR [edx]
    18cc:	15 03 00 00 05       	adc    eax,0x5000003
    18d1:	03 0a                	add    ecx,DWORD PTR [edx]
    18d3:	64 03 00             	add    eax,DWORD PTR fs:[eax]
    18d6:	00 06                	add    BYTE PTR [esi],al
    18d8:	03 0a                	add    ecx,DWORD PTR [edx]
    18da:	b2 04                	mov    dl,0x4
    18dc:	00 00                	add    BYTE PTR [eax],al
    18de:	07                   	pop    es
    18df:	03 0a                	add    ecx,DWORD PTR [edx]
    18e1:	01 04 00             	add    DWORD PTR [eax+eax*1],eax
    18e4:	00 00                	add    BYTE PTR [eax],al
    18e6:	09 00                	or     DWORD PTR [eax],eax
    18e8:	05 04 d0 01 00       	add    eax,0x1d004
    18ed:	00 0b                	add    BYTE PTR [ebx],cl
    18ef:	7a 00                	jp     18f1 <__fmodf2+0x18c5>
    18f1:	00 00                	add    BYTE PTR [eax],al
    18f3:	02 01                	add    al,BYTE PTR [ecx]
    18f5:	02 e8                	add    ch,al
    18f7:	06                   	push   es
    18f8:	00 00                	add    BYTE PTR [eax],al
    18fa:	02 08                	add    cl,BYTE PTR [eax]
    18fc:	04 b2                	add    al,0xb2
    18fe:	00 00                	add    BYTE PTR [eax],al
    1900:	00 0c f4             	add    BYTE PTR [esp+esi*8],cl
    1903:	08 00                	or     BYTE PTR [eax],al
    1905:	00 01                	add    BYTE PTR [ecx],al
    1907:	11 4f 00             	adc    DWORD PTR [edi+0x0],ecx
    190a:	00 00                	add    BYTE PTR [eax],al
    190c:	8c 14 00             	mov    WORD PTR [eax+eax*1],ss
    190f:	9f                   	lahf   
    1910:	3a 00                	cmp    al,BYTE PTR [eax]
    1912:	00 00                	add    BYTE PTR [eax],al
    1914:	01 9c 51 02 00 00 0d 	add    DWORD PTR [ecx+edx*2+0xd000002],ebx
    191b:	b9 08 00 00 01       	mov    ecx,0x1000008
    1920:	11 4f 00             	adc    DWORD PTR [edi+0x0],ecx
    1923:	00 00                	add    BYTE PTR [eax],al
    1925:	02 91 00 0d 51 09    	add    dl,BYTE PTR [ecx+0x9510d00]
    192b:	00 00                	add    BYTE PTR [eax],al
    192d:	01 11                	add    DWORD PTR [ecx],edx
    192f:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1934:	91                   	xchg   ecx,eax
    1935:	04 0d                	add    al,0xd
    1937:	58                   	pop    eax
    1938:	09 00                	or     DWORD PTR [eax],eax
    193a:	00 01                	add    BYTE PTR [ecx],al
    193c:	11 a1 00 00 00 02    	adc    DWORD PTR [ecx+0x2000000],esp
    1942:	91                   	xchg   ecx,eax
    1943:	08 0d 5f 09 00 00    	or     BYTE PTR ds:0x95f,cl
    1949:	01 11                	add    DWORD PTR [ecx],edx
    194b:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1950:	91                   	xchg   ecx,eax
    1951:	0c 0d                	or     al,0xd
    1953:	66 09 00             	or     WORD PTR [eax],ax
    1956:	00 01                	add    BYTE PTR [ecx],al
    1958:	11 a1 00 00 00 02    	adc    DWORD PTR [ecx+0x2000000],esp
    195e:	91                   	xchg   ecx,eax
    195f:	10 0e                	adc    BYTE PTR [esi],cl
    1961:	72 05                	jb     1968 <__fmodf2+0x193c>
    1963:	00 00                	add    BYTE PTR [eax],al
    1965:	01 13                	add    DWORD PTR [ebx],edx
    1967:	4f                   	dec    edi
    1968:	00 00                	add    BYTE PTR [eax],al
    196a:	00 02                	add    BYTE PTR [edx],al
    196c:	91                   	xchg   ecx,eax
    196d:	6c                   	ins    BYTE PTR es:[edi],dx
    196e:	00 0c e8             	add    BYTE PTR [eax+ebp*8],cl
    1971:	08 00                	or     BYTE PTR [eax],al
    1973:	00 01                	add    BYTE PTR [ecx],al
    1975:	18 4f 00             	sbb    BYTE PTR [edi+0x0],cl
    1978:	00 00                	add    BYTE PTR [eax],al
    197a:	c6                   	(bad)  
    197b:	14 00                	adc    al,0x0
    197d:	9f                   	lahf   
    197e:	3c 00                	cmp    al,0x0
    1980:	00 00                	add    BYTE PTR [eax],al
    1982:	01 9c b1 02 00 00 0d 	add    DWORD PTR [ecx+esi*4+0xd000002],ebx
    1989:	b9 08 00 00 01       	mov    ecx,0x1000008
    198e:	18 4f 00             	sbb    BYTE PTR [edi+0x0],cl
    1991:	00 00                	add    BYTE PTR [eax],al
    1993:	02 91 00 0d 51 09    	add    dl,BYTE PTR [ecx+0x9510d00]
    1999:	00 00                	add    BYTE PTR [eax],al
    199b:	01 18                	add    DWORD PTR [eax],ebx
    199d:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    19a2:	91                   	xchg   ecx,eax
    19a3:	04 0d                	add    al,0xd
    19a5:	58                   	pop    eax
    19a6:	09 00                	or     DWORD PTR [eax],eax
    19a8:	00 01                	add    BYTE PTR [ecx],al
    19aa:	18 a1 00 00 00 02    	sbb    BYTE PTR [ecx+0x2000000],ah
    19b0:	91                   	xchg   ecx,eax
    19b1:	08 0d 5f 09 00 00    	or     BYTE PTR ds:0x95f,cl
    19b7:	01 18                	add    DWORD PTR [eax],ebx
    19b9:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    19be:	91                   	xchg   ecx,eax
    19bf:	0c 0e                	or     al,0xe
    19c1:	72 05                	jb     19c8 <__fmodf2+0x199c>
    19c3:	00 00                	add    BYTE PTR [eax],al
    19c5:	01 1a                	add    DWORD PTR [edx],ebx
    19c7:	4f                   	dec    edi
    19c8:	00 00                	add    BYTE PTR [eax],al
    19ca:	00 02                	add    BYTE PTR [edx],al
    19cc:	91                   	xchg   ecx,eax
    19cd:	6c                   	ins    BYTE PTR es:[edi],dx
    19ce:	00 0c dc             	add    BYTE PTR [esp+ebx*8],cl
    19d1:	08 00                	or     BYTE PTR [eax],al
    19d3:	00 01                	add    BYTE PTR [ecx],al
    19d5:	1f                   	pop    ds
    19d6:	4f                   	dec    edi
    19d7:	00 00                	add    BYTE PTR [eax],al
    19d9:	00 02                	add    BYTE PTR [edx],al
    19db:	15 00 9f 3e 00       	adc    eax,0x3e9f00
    19e0:	00 00                	add    BYTE PTR [eax],al
    19e2:	01 9c 03 03 00 00 0d 	add    DWORD PTR [ebx+eax*1+0xd000003],ebx
    19e9:	b9 08 00 00 01       	mov    ecx,0x1000008
    19ee:	1f                   	pop    ds
    19ef:	4f                   	dec    edi
    19f0:	00 00                	add    BYTE PTR [eax],al
    19f2:	00 02                	add    BYTE PTR [edx],al
    19f4:	91                   	xchg   ecx,eax
    19f5:	00 0d 51 09 00 00    	add    BYTE PTR ds:0x951,cl
    19fb:	01 1f                	add    DWORD PTR [edi],ebx
    19fd:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1a02:	91                   	xchg   ecx,eax
    1a03:	04 0d                	add    al,0xd
    1a05:	58                   	pop    eax
    1a06:	09 00                	or     DWORD PTR [eax],eax
    1a08:	00 01                	add    BYTE PTR [ecx],al
    1a0a:	1f                   	pop    ds
    1a0b:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1a10:	91                   	xchg   ecx,eax
    1a11:	08 0e                	or     BYTE PTR [esi],cl
    1a13:	72 05                	jb     1a1a <__fmodf2+0x19ee>
    1a15:	00 00                	add    BYTE PTR [eax],al
    1a17:	01 21                	add    DWORD PTR [ecx],esp
    1a19:	4f                   	dec    edi
    1a1a:	00 00                	add    BYTE PTR [eax],al
    1a1c:	00 02                	add    BYTE PTR [edx],al
    1a1e:	91                   	xchg   ecx,eax
    1a1f:	6c                   	ins    BYTE PTR es:[edi],dx
    1a20:	00 0c d0             	add    BYTE PTR [eax+edx*8],cl
    1a23:	08 00                	or     BYTE PTR [eax],al
    1a25:	00 01                	add    BYTE PTR [ecx],al
    1a27:	26                   	es
    1a28:	4f                   	dec    edi
    1a29:	00 00                	add    BYTE PTR [eax],al
    1a2b:	00 40 15             	add    BYTE PTR [eax+0x15],al
    1a2e:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    1a34:	01 9c 47 03 00 00 0d 	add    DWORD PTR [edi+eax*2+0xd000003],ebx
    1a3b:	b9 08 00 00 01       	mov    ecx,0x1000008
    1a40:	26                   	es
    1a41:	4f                   	dec    edi
    1a42:	00 00                	add    BYTE PTR [eax],al
    1a44:	00 02                	add    BYTE PTR [edx],al
    1a46:	91                   	xchg   ecx,eax
    1a47:	00 0d 51 09 00 00    	add    BYTE PTR ds:0x951,cl
    1a4d:	01 26                	add    DWORD PTR [esi],esp
    1a4f:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1a54:	91                   	xchg   ecx,eax
    1a55:	04 0e                	add    al,0xe
    1a57:	72 05                	jb     1a5e <__fmodf2+0x1a32>
    1a59:	00 00                	add    BYTE PTR [eax],al
    1a5b:	01 28                	add    DWORD PTR [eax],ebp
    1a5d:	4f                   	dec    edi
    1a5e:	00 00                	add    BYTE PTR [eax],al
    1a60:	00 02                	add    BYTE PTR [edx],al
    1a62:	91                   	xchg   ecx,eax
    1a63:	6c                   	ins    BYTE PTR es:[edi],dx
    1a64:	00 0c e7             	add    BYTE PTR [edi+eiz*8],cl
    1a67:	09 00                	or     DWORD PTR [eax],eax
    1a69:	00 01                	add    BYTE PTR [ecx],al
    1a6b:	2d 4f 00 00 00       	sub    eax,0x4f
    1a70:	80 15 00 9f 42 00 00 	adc    BYTE PTR ds:0x429f00,0x0
    1a77:	00 01                	add    BYTE PTR [ecx],al
    1a79:	9c                   	pushf  
    1a7a:	7d 03                	jge    1a7f <__fmodf2+0x1a53>
    1a7c:	00 00                	add    BYTE PTR [eax],al
    1a7e:	0d b9 08 00 00       	or     eax,0x8b9
    1a83:	01 2d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ebp
    1a89:	02 91 00 0e 72 05    	add    dl,BYTE PTR [ecx+0x5720e00]
    1a8f:	00 00                	add    BYTE PTR [eax],al
    1a91:	01 2f                	add    DWORD PTR [edi],ebp
    1a93:	4f                   	dec    edi
    1a94:	00 00                	add    BYTE PTR [eax],al
    1a96:	00 02                	add    BYTE PTR [edx],al
    1a98:	91                   	xchg   ecx,eax
    1a99:	6c                   	ins    BYTE PTR es:[edi],dx
    1a9a:	00 0f                	add    BYTE PTR [edi],cl
    1a9c:	51                   	push   ecx
    1a9d:	08 00                	or     BYTE PTR [eax],al
    1a9f:	00 01                	add    BYTE PTR [ecx],al
    1aa1:	34 c2                	xor    al,0xc2
    1aa3:	15 00 9f cb 00       	adc    eax,0xcb9f00
    1aa8:	00 00                	add    BYTE PTR [eax],al
    1aaa:	01 9c 10 06 0a 00 00 	add    DWORD PTR [eax+edx*1+0xa06],ebx
    1ab1:	01 48 8d             	add    DWORD PTR [eax-0x73],ecx
    1ab4:	16                   	push   ss
    1ab5:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
    1abb:	01 9c 11 07 08 00 00 	add    DWORD PTR [ecx+edx*1+0x807],ebx
    1ac2:	01 4e 4f             	add    DWORD PTR [esi+0x4f],ecx
    1ac5:	00 00                	add    BYTE PTR [eax],al
    1ac7:	00 b0 16 00 9f 59    	add    BYTE PTR [eax+0x599f0016],dh
    1acd:	00 00                	add    BYTE PTR [eax],al
    1acf:	00 01                	add    BYTE PTR [ecx],al
    1ad1:	9c                   	pushf  
    1ad2:	e4 03                	in     al,0x3
    1ad4:	00 00                	add    BYTE PTR [eax],al
    1ad6:	0d 8a 09 00 00       	or     eax,0x98a
    1adb:	01 4e ca             	add    DWORD PTR [esi-0x36],ecx
    1ade:	01 00                	add    DWORD PTR [eax],eax
    1ae0:	00 02                	add    BYTE PTR [edx],al
    1ae2:	91                   	xchg   ecx,eax
    1ae3:	00 12                	add    BYTE PTR [edx],dl
    1ae5:	0e                   	push   cs
    1ae6:	72 0a                	jb     1af2 <__fmodf2+0x1ac6>
    1ae8:	00 00                	add    BYTE PTR [eax],al
    1aea:	01 50 96             	add    DWORD PTR [eax-0x6a],edx
    1aed:	00 00                	add    BYTE PTR [eax],al
    1aef:	00 02                	add    BYTE PTR [edx],al
    1af1:	91                   	xchg   ecx,eax
    1af2:	68 0e 58 07 00       	push   0x7580e
    1af7:	00 01                	add    BYTE PTR [ecx],al
    1af9:	53                   	push   ebx
    1afa:	4f                   	dec    edi
    1afb:	00 00                	add    BYTE PTR [eax],al
    1afd:	00 02                	add    BYTE PTR [edx],al
    1aff:	91                   	xchg   ecx,eax
    1b00:	6c                   	ins    BYTE PTR es:[edi],dx
    1b01:	00 11                	add    BYTE PTR [ecx],dl
    1b03:	05 0f 00 00 01       	add    eax,0x100000f
    1b08:	58                   	pop    eax
    1b09:	4f                   	dec    edi
    1b0a:	00 00                	add    BYTE PTR [eax],al
    1b0c:	00 09                	add    BYTE PTR [ecx],cl
    1b0e:	17                   	pop    ss
    1b0f:	00 9f 54 00 00 00    	add    BYTE PTR [edi+0x54],bl
    1b15:	01 9c 29 04 00 00 0d 	add    DWORD PTR [ecx+ebp*1+0xd000004],ebx
    1b1c:	8a 09                	mov    cl,BYTE PTR [ecx]
    1b1e:	00 00                	add    BYTE PTR [eax],al
    1b20:	01 58 ca             	add    DWORD PTR [eax-0x36],ebx
    1b23:	01 00                	add    DWORD PTR [eax],eax
    1b25:	00 02                	add    BYTE PTR [edx],al
    1b27:	91                   	xchg   ecx,eax
    1b28:	00 12                	add    BYTE PTR [edx],dl
    1b2a:	0e                   	push   cs
    1b2b:	72 0a                	jb     1b37 <__fmodf2+0x1b0b>
    1b2d:	00 00                	add    BYTE PTR [eax],al
    1b2f:	01 5a 96             	add    DWORD PTR [edx-0x6a],ebx
    1b32:	00 00                	add    BYTE PTR [eax],al
    1b34:	00 02                	add    BYTE PTR [edx],al
    1b36:	91                   	xchg   ecx,eax
    1b37:	68 0e 58 07 00       	push   0x7580e
    1b3c:	00 01                	add    BYTE PTR [ecx],al
    1b3e:	5d                   	pop    ebp
    1b3f:	4f                   	dec    edi
    1b40:	00 00                	add    BYTE PTR [eax],al
    1b42:	00 02                	add    BYTE PTR [edx],al
    1b44:	91                   	xchg   ecx,eax
    1b45:	6c                   	ins    BYTE PTR es:[edi],dx
    1b46:	00 11                	add    BYTE PTR [ecx],dl
    1b48:	fb                   	sti    
    1b49:	0e                   	push   cs
    1b4a:	00 00                	add    BYTE PTR [eax],al
    1b4c:	01 61 4f             	add    DWORD PTR [ecx+0x4f],esp
    1b4f:	00 00                	add    BYTE PTR [eax],al
    1b51:	00 5d 17             	add    BYTE PTR [ebp+0x17],bl
    1b54:	00 9f 54 00 00 00    	add    BYTE PTR [edi+0x54],bl
    1b5a:	01 9c 6e 04 00 00 0d 	add    DWORD PTR [esi+ebp*2+0xd000004],ebx
    1b61:	8a 09                	mov    cl,BYTE PTR [ecx]
    1b63:	00 00                	add    BYTE PTR [eax],al
    1b65:	01 61 ca             	add    DWORD PTR [ecx-0x36],esp
    1b68:	01 00                	add    DWORD PTR [eax],eax
    1b6a:	00 02                	add    BYTE PTR [edx],al
    1b6c:	91                   	xchg   ecx,eax
    1b6d:	00 12                	add    BYTE PTR [edx],dl
    1b6f:	0e                   	push   cs
    1b70:	72 0a                	jb     1b7c <__fmodf2+0x1b50>
    1b72:	00 00                	add    BYTE PTR [eax],al
    1b74:	01 63 96             	add    DWORD PTR [ebx-0x6a],esp
    1b77:	00 00                	add    BYTE PTR [eax],al
    1b79:	00 02                	add    BYTE PTR [edx],al
    1b7b:	91                   	xchg   ecx,eax
    1b7c:	68 0e 58 07 00       	push   0x7580e
    1b81:	00 01                	add    BYTE PTR [ecx],al
    1b83:	66 4f                	dec    di
    1b85:	00 00                	add    BYTE PTR [eax],al
    1b87:	00 02                	add    BYTE PTR [edx],al
    1b89:	91                   	xchg   ecx,eax
    1b8a:	6c                   	ins    BYTE PTR es:[edi],dx
    1b8b:	00 11                	add    BYTE PTR [ecx],dl
    1b8d:	77 0a                	ja     1b99 <__fmodf2+0x1b6d>
    1b8f:	00 00                	add    BYTE PTR [eax],al
    1b91:	01 6a 4f             	add    DWORD PTR [edx+0x4f],ebp
    1b94:	00 00                	add    BYTE PTR [eax],al
    1b96:	00 b1 17 00 9f 34    	add    BYTE PTR [ecx+0x349f0017],dh
    1b9c:	00 00                	add    BYTE PTR [eax],al
    1b9e:	00 01                	add    BYTE PTR [ecx],al
    1ba0:	9c                   	pushf  
    1ba1:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1ba2:	04 00                	add    al,0x0
    1ba4:	00 0d 8a 09 00 00    	add    BYTE PTR ds:0x98a,cl
    1baa:	01 6a ca             	add    DWORD PTR [edx-0x36],ebp
    1bad:	01 00                	add    DWORD PTR [eax],eax
    1baf:	00 02                	add    BYTE PTR [edx],al
    1bb1:	91                   	xchg   ecx,eax
    1bb2:	00 12                	add    BYTE PTR [edx],dl
    1bb4:	0e                   	push   cs
    1bb5:	72 0a                	jb     1bc1 <__fmodf2+0x1b95>
    1bb7:	00 00                	add    BYTE PTR [eax],al
    1bb9:	01 6c 96 00          	add    DWORD PTR [esi+edx*4+0x0],ebp
    1bbd:	00 00                	add    BYTE PTR [eax],al
    1bbf:	02 91 74 00 11 83    	add    dl,BYTE PTR [ecx-0x7ceeff8c]
    1bc5:	0a 00                	or     al,BYTE PTR [eax]
    1bc7:	00 01                	add    BYTE PTR [ecx],al
    1bc9:	72 4f                	jb     1c1a <__fmodf2+0x1bee>
    1bcb:	00 00                	add    BYTE PTR [eax],al
    1bcd:	00 e5                	add    ch,ah
    1bcf:	17                   	pop    ss
    1bd0:	00 9f 37 00 00 00    	add    BYTE PTR [edi+0x37],bl
    1bd6:	01 9c ea 04 00 00 0d 	add    DWORD PTR [edx+ebp*8+0xd000004],ebx
    1bdd:	a8 08                	test   al,0x8
    1bdf:	00 00                	add    BYTE PTR [eax],al
    1be1:	01 72 a1             	add    DWORD PTR [edx-0x5f],esi
    1be4:	00 00                	add    BYTE PTR [eax],al
    1be6:	00 02                	add    BYTE PTR [edx],al
    1be8:	91                   	xchg   ecx,eax
    1be9:	00 0d 8a 09 00 00    	add    BYTE PTR ds:0x98a,cl
    1bef:	01 72 ca             	add    DWORD PTR [edx-0x36],esi
    1bf2:	01 00                	add    DWORD PTR [eax],eax
    1bf4:	00 02                	add    BYTE PTR [edx],al
    1bf6:	91                   	xchg   ecx,eax
    1bf7:	04 12                	add    al,0x12
    1bf9:	0e                   	push   cs
    1bfa:	72 0a                	jb     1c06 <__fmodf2+0x1bda>
    1bfc:	00 00                	add    BYTE PTR [eax],al
    1bfe:	01 74 96 00          	add    DWORD PTR [esi+edx*4+0x0],esi
    1c02:	00 00                	add    BYTE PTR [eax],al
    1c04:	02 91 74 00 11 49    	add    dl,BYTE PTR [ecx+0x49110074]
    1c0a:	09 00                	or     DWORD PTR [eax],eax
    1c0c:	00 01                	add    BYTE PTR [ecx],al
    1c0e:	7c 4f                	jl     1c5f <__fmodf2+0x1c33>
    1c10:	00 00                	add    BYTE PTR [eax],al
    1c12:	00 1c 18             	add    BYTE PTR [eax+ebx*1],bl
    1c15:	00 9f 37 00 00 00    	add    BYTE PTR [edi+0x37],bl
    1c1b:	01 9c 2f 05 00 00 0d 	add    DWORD PTR [edi+ebp*1+0xd000005],ebx
    1c22:	a8 08                	test   al,0x8
    1c24:	00 00                	add    BYTE PTR [eax],al
    1c26:	01 7c a1 00          	add    DWORD PTR [ecx+eiz*4+0x0],edi
    1c2a:	00 00                	add    BYTE PTR [eax],al
    1c2c:	02 91 00 0d 8a 09    	add    dl,BYTE PTR [ecx+0x98a0d00]
    1c32:	00 00                	add    BYTE PTR [eax],al
    1c34:	01 7c ca 01          	add    DWORD PTR [edx+ecx*8+0x1],edi
    1c38:	00 00                	add    BYTE PTR [eax],al
    1c3a:	02 91 04 12 0e 72    	add    dl,BYTE PTR [ecx+0x720e1204]
    1c40:	0a 00                	or     al,BYTE PTR [eax]
    1c42:	00 01                	add    BYTE PTR [ecx],al
    1c44:	7e 96                	jle    1bdc <__fmodf2+0x1bb0>
    1c46:	00 00                	add    BYTE PTR [eax],al
    1c48:	00 02                	add    BYTE PTR [edx],al
    1c4a:	91                   	xchg   ecx,eax
    1c4b:	74 00                	je     1c4d <__fmodf2+0x1c21>
    1c4d:	0c 82                	or     al,0x82
    1c4f:	09 00                	or     DWORD PTR [eax],eax
    1c51:	00 01                	add    BYTE PTR [ecx],al
    1c53:	86 33                	xchg   BYTE PTR [ebx],dh
    1c55:	00 00                	add    BYTE PTR [eax],al
    1c57:	00 53 18             	add    BYTE PTR [ebx+0x18],dl
    1c5a:	00 9f 88 00 00 00    	add    BYTE PTR [edi+0x88],bl
    1c60:	01 9c 88 05 00 00 0d 	add    DWORD PTR [eax+ecx*4+0xd000005],ebx
    1c67:	00 09                	add    BYTE PTR [ecx],cl
    1c69:	00 00                	add    BYTE PTR [eax],al
    1c6b:	01 86 33 00 00 00    	add    DWORD PTR [esi+0x33],eax
    1c71:	02 91 00 13 6d 73    	add    dl,BYTE PTR [ecx+0x736d1300]
    1c77:	00 01                	add    BYTE PTR [ecx],al
    1c79:	88 4f 00             	mov    BYTE PTR [edi+0x0],cl
    1c7c:	00 00                	add    BYTE PTR [eax],al
    1c7e:	02 91 6c 14 7d 18    	add    dl,BYTE PTR [ecx+0x187d146c]
    1c84:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    1c8a:	13 73 32             	adc    esi,DWORD PTR [ebx+0x32]
    1c8d:	00 01                	add    BYTE PTR [ecx],al
    1c8f:	89 a1 00 00 00 02    	mov    DWORD PTR [ecx+0x2000000],esp
    1c95:	91                   	xchg   ecx,eax
    1c96:	68 13 63 74 00       	push   0x746313
    1c9b:	01 89 a1 00 00 00    	add    DWORD PTR [ecx+0xa1],ecx
    1ca1:	02 91 64 00 00 0c    	add    dl,BYTE PTR [ecx+0xc000064]
    1ca7:	ca 08 00             	retf   0x8
    1caa:	00 01                	add    BYTE PTR [ecx],al
    1cac:	8c 33                	mov    WORD PTR [ebx],?
    1cae:	00 00                	add    BYTE PTR [eax],al
    1cb0:	00 db                	add    bl,bl
    1cb2:	18 00                	sbb    BYTE PTR [eax],al
    1cb4:	9f                   	lahf   
    1cb5:	70 00                	jo     1cb7 <__fmodf2+0x1c8b>
    1cb7:	00 00                	add    BYTE PTR [eax],al
    1cb9:	01 9c d4 05 00 00 0d 	add    DWORD PTR [esp+edx*8+0xd000005],ebx
    1cc0:	a9 09 00 00 01       	test   eax,0x1000009
    1cc5:	8c 33                	mov    WORD PTR [ebx],?
    1cc7:	00 00                	add    BYTE PTR [eax],al
    1cc9:	00 02                	add    BYTE PTR [edx],al
    1ccb:	91                   	xchg   ecx,eax
    1ccc:	00 14 ed 18 00 9f 57 	add    BYTE PTR [ebp*8+0x579f0018],dl
    1cd3:	00 00                	add    BYTE PTR [eax],al
    1cd5:	00 13                	add    BYTE PTR [ebx],dl
    1cd7:	73 32                	jae    1d0b <__fmodf2+0x1cdf>
    1cd9:	00 01                	add    BYTE PTR [ecx],al
    1cdb:	8e a1 00 00 00 02    	mov    fs,WORD PTR [ecx+0x2000000]
    1ce1:	91                   	xchg   ecx,eax
    1ce2:	6c                   	ins    BYTE PTR es:[edi],dx
    1ce3:	13 63 74             	adc    esp,DWORD PTR [ebx+0x74]
    1ce6:	00 01                	add    BYTE PTR [ecx],al
    1ce8:	8e a1 00 00 00 02    	mov    fs,WORD PTR [ecx+0x2000000]
    1cee:	91                   	xchg   ecx,eax
    1cef:	68 00 00 0c 22       	push   0x220c0000
    1cf4:	08 00                	or     BYTE PTR [eax],al
    1cf6:	00 01                	add    BYTE PTR [ecx],al
    1cf8:	91                   	xchg   ecx,eax
    1cf9:	33 00                	xor    eax,DWORD PTR [eax]
    1cfb:	00 00                	add    BYTE PTR [eax],al
    1cfd:	4b                   	dec    ebx
    1cfe:	19 00                	sbb    DWORD PTR [eax],eax
    1d00:	9f                   	lahf   
    1d01:	70 00                	jo     1d03 <__fmodf2+0x1cd7>
    1d03:	00 00                	add    BYTE PTR [eax],al
    1d05:	01 9c 20 06 00 00 0d 	add    DWORD PTR [eax+eiz*1+0xd000006],ebx
    1d0c:	4d                   	dec    ebp
    1d0d:	0a 00                	or     al,BYTE PTR [eax]
    1d0f:	00 01                	add    BYTE PTR [ecx],al
    1d11:	91                   	xchg   ecx,eax
    1d12:	33 00                	xor    eax,DWORD PTR [eax]
    1d14:	00 00                	add    BYTE PTR [eax],al
    1d16:	02 91 00 14 5d 19    	add    dl,BYTE PTR [ecx+0x195d1400]
    1d1c:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    1d22:	13 73 32             	adc    esi,DWORD PTR [ebx+0x32]
    1d25:	00 01                	add    BYTE PTR [ecx],al
    1d27:	93                   	xchg   ebx,eax
    1d28:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1d2d:	91                   	xchg   ecx,eax
    1d2e:	6c                   	ins    BYTE PTR es:[edi],dx
    1d2f:	13 63 74             	adc    esp,DWORD PTR [ebx+0x74]
    1d32:	00 01                	add    BYTE PTR [ecx],al
    1d34:	93                   	xchg   ebx,eax
    1d35:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1d3a:	91                   	xchg   ecx,eax
    1d3b:	68 00 00 0f 7e       	push   0x7e0f0000
    1d40:	0a 00                	or     al,BYTE PTR [eax]
    1d42:	00 01                	add    BYTE PTR [ecx],al
    1d44:	97                   	xchg   edi,eax
    1d45:	bb 19 00 9f 1d       	mov    ebx,0x1d9f0019
    1d4a:	00 00                	add    BYTE PTR [eax],al
    1d4c:	00 01                	add    BYTE PTR [ecx],al
    1d4e:	9c                   	pushf  
    1d4f:	15 65 0a 00 00       	adc    eax,0xa65
    1d54:	01 9c d8 19 00 9f 29 	add    DWORD PTR [eax+ebx*8+0x299f0019],ebx
    1d5b:	00 00                	add    BYTE PTR [eax],al
    1d5d:	00 01                	add    BYTE PTR [ecx],al
    1d5f:	9c                   	pushf  
    1d60:	71 06                	jno    1d68 <__fmodf2+0x1d3c>
    1d62:	00 00                	add    BYTE PTR [eax],al
    1d64:	0d 9d 09 00 00       	or     eax,0x99d
    1d69:	01 9c 4f 00 00 00 02 	add    DWORD PTR [edi+ecx*2+0x2000000],ebx
    1d70:	91                   	xchg   ecx,eax
    1d71:	00 0d 42 0a 00 00    	add    BYTE PTR ds:0xa42,cl
    1d77:	01 9c 72 00 00 00 02 	add    DWORD PTR [edx+esi*2+0x2000000],ebx
    1d7e:	91                   	xchg   ecx,eax
    1d7f:	04 0d                	add    al,0xd
    1d81:	1a 08                	sbb    cl,BYTE PTR [eax]
    1d83:	00 00                	add    BYTE PTR [eax],al
    1d85:	01 9c 4f 00 00 00 02 	add    DWORD PTR [edi+ecx*2+0x2000000],ebx
    1d8c:	91                   	xchg   ecx,eax
    1d8d:	08 00                	or     BYTE PTR [eax],al
    1d8f:	15 79 08 00 00       	adc    eax,0x879
    1d94:	01 a1 01 1a 00 9f    	add    DWORD PTR [ecx-0x60ffe5ff],esp
    1d9a:	25 00 00 00 01       	and    eax,0x1000000
    1d9f:	9c                   	pushf  
    1da0:	a3 06 00 00 0d       	mov    ds:0xd000006,eax
    1da5:	9d                   	popf   
    1da6:	09 00                	or     DWORD PTR [eax],eax
    1da8:	00 01                	add    BYTE PTR [ecx],al
    1daa:	a1 4f 00 00 00       	mov    eax,ds:0x4f
    1daf:	02 91 00 0d 13 0a    	add    dl,BYTE PTR [ecx+0xa130d00]
    1db5:	00 00                	add    BYTE PTR [eax],al
    1db7:	01 a1 4f 00 00 00    	add    DWORD PTR [ecx+0x4f],esp
    1dbd:	02 91 04 00 16 4c    	add    dl,BYTE PTR [ecx+0x4c160004]
    1dc3:	08 00                	or     BYTE PTR [eax],al
    1dc5:	00 01                	add    BYTE PTR [ecx],al
    1dc7:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    1dc8:	4f                   	dec    edi
    1dc9:	00 00                	add    BYTE PTR [eax],al
    1dcb:	00 26                	add    BYTE PTR [esi],ah
    1dcd:	1a 00                	sbb    al,BYTE PTR [eax]
    1dcf:	9f                   	lahf   
    1dd0:	23 00                	and    eax,DWORD PTR [eax]
    1dd2:	00 00                	add    BYTE PTR [eax],al
    1dd4:	01 9c cb 06 00 00 0e 	add    DWORD PTR [ebx+ecx*8+0xe000006],ebx
    1ddb:	72 05                	jb     1de2 <__fmodf2+0x1db6>
    1ddd:	00 00                	add    BYTE PTR [eax],al
    1ddf:	01 a8 a1 00 00 00    	add    DWORD PTR [eax+0xa1],ebp
    1de5:	02 91 74 00 11 a4    	add    dl,BYTE PTR [ecx-0x5beeff8c]
    1deb:	09 00                	or     DWORD PTR [eax],eax
    1ded:	00 01                	add    BYTE PTR [ecx],al
    1def:	af                   	scas   eax,DWORD PTR es:[edi]
    1df0:	4f                   	dec    edi
    1df1:	00 00                	add    BYTE PTR [eax],al
    1df3:	00 49 1a             	add    BYTE PTR [ecx+0x1a],cl
    1df6:	00 9f 4c 00 00 00    	add    BYTE PTR [edi+0x4c],bl
    1dfc:	01 9c 1d 07 00 00 0d 	add    DWORD PTR [ebp+ebx*1+0xd000007],ebx
    1e03:	9a 05 00 00 01 af 74 	call   0x74af:0x1000005
    1e0a:	00 00                	add    BYTE PTR [eax],al
    1e0c:	00 02                	add    BYTE PTR [edx],al
    1e0e:	91                   	xchg   ecx,eax
    1e0f:	00 0d da 09 00 00    	add    BYTE PTR ds:0x9da,cl
    1e15:	01 af 4f 00 00 00    	add    DWORD PTR [edi+0x4f],ebp
    1e1b:	02 91 04 0d 2a 0a    	add    dl,BYTE PTR [ecx+0xa2a0d04]
    1e21:	00 00                	add    BYTE PTR [eax],al
    1e23:	01 af 1d 07 00 00    	add    DWORD PTR [edi+0x71d],ebp
    1e29:	02 91 08 13 70 69    	add    dl,BYTE PTR [ecx+0x69701308]
    1e2f:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1e32:	b1 4f                	mov    cl,0x4f
    1e34:	00 00                	add    BYTE PTR [eax],al
    1e36:	00 02                	add    BYTE PTR [edx],al
    1e38:	91                   	xchg   ecx,eax
    1e39:	74 00                	je     1e3b <__fmodf2+0x1e0f>
    1e3b:	05 04 74 00 00       	add    eax,0x7404
    1e40:	00 11                	add    BYTE PTR [ecx],dl
    1e42:	b3 08                	mov    bl,0x8
    1e44:	00 00                	add    BYTE PTR [eax],al
    1e46:	01 b7 4f 00 00 00    	add    DWORD PTR [edi+0x4f],esi
    1e4c:	95                   	xchg   ebp,eax
    1e4d:	1a 00                	sbb    al,BYTE PTR [eax]
    1e4f:	9f                   	lahf   
    1e50:	f4                   	hlt    
    1e51:	01 00                	add    DWORD PTR [eax],eax
    1e53:	00 01                	add    BYTE PTR [ecx],al
    1e55:	9c                   	pushf  
    1e56:	c5 07                	lds    eax,FWORD PTR [edi]
    1e58:	00 00                	add    BYTE PTR [eax],al
    1e5a:	0d 9a 05 00 00       	or     eax,0x59a
    1e5f:	01 b7 74 00 00 00    	add    DWORD PTR [edi+0x74],esi
    1e65:	02 91 00 13 70 69    	add    dl,BYTE PTR [ecx+0x69701300]
    1e6b:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1e6e:	b9 4f 00 00 00       	mov    ecx,0x4f
    1e73:	02 91 58 0e da 09    	add    dl,BYTE PTR [ecx+0x9da0e58]
    1e79:	00 00                	add    BYTE PTR [eax],al
    1e7b:	01 b9 4f 00 00 00    	add    DWORD PTR [ecx+0x4f],edi
    1e81:	02 91 6c 0e 2a 0a    	add    dl,BYTE PTR [ecx+0xa2a0e6c]
    1e87:	00 00                	add    BYTE PTR [eax],al
    1e89:	01 ba 1d 07 00 00    	add    DWORD PTR [edx+0x71d],edi
    1e8f:	02 91 50 0e 84 08    	add    dl,BYTE PTR [ecx+0x8840e50]
    1e95:	00 00                	add    BYTE PTR [eax],al
    1e97:	01 bb 74 00 00 00    	add    DWORD PTR [ebx+0x74],edi
    1e9d:	02 91 68 0e 0d 08    	add    dl,BYTE PTR [ecx+0x80d0e68]
    1ea3:	00 00                	add    BYTE PTR [eax],al
    1ea5:	01 bb 74 00 00 00    	add    DWORD PTR [ebx+0x74],edi
    1eab:	02 91 64 0e 74 09    	add    dl,BYTE PTR [ecx+0x9740e64]
    1eb1:	00 00                	add    BYTE PTR [eax],al
    1eb3:	01 bc 74 00 00 00 02 	add    DWORD PTR [esp+esi*2+0x2000000],edi
    1eba:	91                   	xchg   ecx,eax
    1ebb:	54                   	push   esp
    1ebc:	0e                   	push   cs
    1ebd:	36 08 00             	or     BYTE PTR ss:[eax],al
    1ec0:	00 01                	add    BYTE PTR [ecx],al
    1ec2:	cd 4f                	int    0x4f
    1ec4:	00 00                	add    BYTE PTR [eax],al
    1ec6:	00 02                	add    BYTE PTR [edx],al
    1ec8:	91                   	xchg   ecx,eax
    1ec9:	60                   	pusha  
    1eca:	14 6b                	adc    al,0x6b
    1ecc:	1b 00                	sbb    eax,DWORD PTR [eax]
    1ece:	9f                   	lahf   
    1ecf:	e0 00                	loopne 1ed1 <__fmodf2+0x1ea5>
    1ed1:	00 00                	add    BYTE PTR [eax],al
    1ed3:	13 63 6e             	adc    esp,DWORD PTR [ebx+0x6e]
    1ed6:	74 00                	je     1ed8 <__fmodf2+0x1eac>
    1ed8:	01 cf                	add    edi,ecx
    1eda:	4f                   	dec    edi
    1edb:	00 00                	add    BYTE PTR [eax],al
    1edd:	00 02                	add    BYTE PTR [edx],al
    1edf:	91                   	xchg   ecx,eax
    1ee0:	5c                   	pop    esp
    1ee1:	00 00                	add    BYTE PTR [eax],al
    1ee3:	11 7c 09 00          	adc    DWORD PTR [ecx+ecx*1+0x0],edi
    1ee7:	00 01                	add    BYTE PTR [ecx],al
    1ee9:	e5 4f                	in     eax,0x4f
    1eeb:	00 00                	add    BYTE PTR [eax],al
    1eed:	00 89 1c 00 9f 4f    	add    BYTE PTR [ecx+0x4f9f001c],cl
    1ef3:	00 00                	add    BYTE PTR [eax],al
    1ef5:	00 01                	add    BYTE PTR [ecx],al
    1ef7:	9c                   	pushf  
    1ef8:	17                   	pop    ss
    1ef9:	08 00                	or     BYTE PTR [eax],al
    1efb:	00 0d 9a 05 00 00    	add    BYTE PTR ds:0x59a,cl
    1f01:	01 e5                	add    ebp,esp
    1f03:	74 00                	je     1f05 <__fmodf2+0x1ed9>
    1f05:	00 00                	add    BYTE PTR [eax],al
    1f07:	02 91 00 0d da 09    	add    dl,BYTE PTR [ecx+0x9da0d00]
    1f0d:	00 00                	add    BYTE PTR [eax],al
    1f0f:	01 e5                	add    ebp,esp
    1f11:	4f                   	dec    edi
    1f12:	00 00                	add    BYTE PTR [eax],al
    1f14:	00 02                	add    BYTE PTR [edx],al
    1f16:	91                   	xchg   ecx,eax
    1f17:	04 0d                	add    al,0xd
    1f19:	2a 0a                	sub    cl,BYTE PTR [edx]
    1f1b:	00 00                	add    BYTE PTR [eax],al
    1f1d:	01 e5                	add    ebp,esp
    1f1f:	1d 07 00 00 02       	sbb    eax,0x2000007
    1f24:	91                   	xchg   ecx,eax
    1f25:	08 13                	or     BYTE PTR [ebx],dl
    1f27:	70 69                	jo     1f92 <__fmodf2+0x1f66>
    1f29:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1f2c:	e7 4f                	out    0x4f,eax
    1f2e:	00 00                	add    BYTE PTR [eax],al
    1f30:	00 02                	add    BYTE PTR [edx],al
    1f32:	91                   	xchg   ecx,eax
    1f33:	74 00                	je     1f35 <__fmodf2+0x1f09>
    1f35:	11 a0 08 00 00 01    	adc    DWORD PTR [eax+0x1000008],esp
    1f3b:	ed                   	in     eax,dx
    1f3c:	4f                   	dec    edi
    1f3d:	00 00                	add    BYTE PTR [eax],al
    1f3f:	00 d8                	add    al,bl
    1f41:	1c 00                	sbb    al,0x0
    1f43:	9f                   	lahf   
    1f44:	1c 00                	sbb    al,0x0
    1f46:	00 00                	add    BYTE PTR [eax],al
    1f48:	01 9c 3f 08 00 00 17 	add    DWORD PTR [edi+edi*1+0x17000008],ebx
    1f4f:	70 69                	jo     1fba <__fmodf2+0x1f8e>
    1f51:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1f54:	ed                   	in     eax,dx
    1f55:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1f5a:	91                   	xchg   ecx,eax
    1f5b:	00 00                	add    BYTE PTR [eax],al
    1f5d:	15 2f 0a 00 00       	adc    eax,0xa2f
    1f62:	01 f3                	add    ebx,esi
    1f64:	f4                   	hlt    
    1f65:	1c 00                	sbb    al,0x0
    1f67:	9f                   	lahf   
    1f68:	20 00                	and    BYTE PTR [eax],al
    1f6a:	00 00                	add    BYTE PTR [eax],al
    1f6c:	01 9c 63 08 00 00 0d 	add    DWORD PTR [ebx+eiz*2+0xd000008],ebx
    1f73:	34 0a                	xor    al,0xa
    1f75:	00 00                	add    BYTE PTR [eax],al
    1f77:	01 f3                	add    ebx,esi
    1f79:	4f                   	dec    edi
    1f7a:	00 00                	add    BYTE PTR [eax],al
    1f7c:	00 02                	add    BYTE PTR [edx],al
    1f7e:	91                   	xchg   ecx,eax
    1f7f:	00 00                	add    BYTE PTR [eax],al
    1f81:	11 6d 09             	adc    DWORD PTR [ebp+0x9],ebp
    1f84:	00 00                	add    BYTE PTR [eax],al
    1f86:	01 f8                	add    eax,edi
    1f88:	74 00                	je     1f8a <__fmodf2+0x1f5e>
    1f8a:	00 00                	add    BYTE PTR [eax],al
    1f8c:	14 1d                	adc    al,0x1d
    1f8e:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    1f94:	01 9c 99 08 00 00 17 	add    DWORD PTR [ecx+ebx*4+0x17000008],ebx
    1f9b:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    1f9e:	00 01                	add    BYTE PTR [ecx],al
    1fa0:	f8                   	clc    
    1fa1:	74 00                	je     1fa3 <__fmodf2+0x1f77>
    1fa3:	00 00                	add    BYTE PTR [eax],al
    1fa5:	02 91 00 0d 58 07    	add    dl,BYTE PTR [ecx+0x7580d00]
    1fab:	00 00                	add    BYTE PTR [eax],al
    1fad:	01 f8                	add    eax,edi
    1faf:	b7 00                	mov    bh,0x0
    1fb1:	00 00                	add    BYTE PTR [eax],al
    1fb3:	02 91 04 00 0c f3    	add    dl,BYTE PTR [ecx-0xcf3fffc]
    1fb9:	09 00                	or     DWORD PTR [eax],eax
    1fbb:	00 01                	add    BYTE PTR [ecx],al
    1fbd:	fd                   	std    
    1fbe:	b7 00                	mov    bh,0x0
    1fc0:	00 00                	add    BYTE PTR [eax],al
    1fc2:	34 1d                	xor    al,0x1d
    1fc4:	00 9f 44 01 00 00    	add    BYTE PTR [edi+0x144],bl
    1fca:	01 9c 7c 09 00 00 0d 	add    DWORD PTR [esp+edi*2+0xd000009],ebx
    1fd1:	16                   	push   ss
    1fd2:	07                   	pop    es
    1fd3:	00 00                	add    BYTE PTR [eax],al
    1fd5:	01 fd                	add    ebp,edi
    1fd7:	74 00                	je     1fd9 <__fmodf2+0x1fad>
    1fd9:	00 00                	add    BYTE PTR [eax],al
    1fdb:	02 91 00 0d 2a 0a    	add    dl,BYTE PTR [ecx+0xa2a0d00]
    1fe1:	00 00                	add    BYTE PTR [eax],al
    1fe3:	01 fd                	add    ebp,edi
    1fe5:	1d 07 00 00 02       	sbb    eax,0x2000007
    1fea:	91                   	xchg   ecx,eax
    1feb:	04 0d                	add    al,0xd
    1fed:	0d 09 00 00 01       	or     eax,0x1000009
    1ff2:	fd                   	std    
    1ff3:	b7 00                	mov    bh,0x0
    1ff5:	00 00                	add    BYTE PTR [eax],al
    1ff7:	02 91 08 13 70 00    	add    dl,BYTE PTR [ecx+0x701308]
    1ffd:	01 ff                	add    edi,edi
    1fff:	74 00                	je     2001 <__fmodf2+0x1fd5>
    2001:	00 00                	add    BYTE PTR [eax],al
    2003:	02 91 74 0e 3e 08    	add    dl,BYTE PTR [ecx+0x83e0e74]
    2009:	00 00                	add    BYTE PTR [eax],al
    200b:	01 ff                	add    edi,edi
    200d:	74 00                	je     200f <__fmodf2+0x1fe3>
    200f:	00 00                	add    BYTE PTR [eax],al
    2011:	02 91 70 18 63 00    	add    dl,BYTE PTR [ecx+0x631870]
    2017:	01 00                	add    DWORD PTR [eax],eax
    2019:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    201c:	00 00                	add    BYTE PTR [eax],al
    201e:	02 91 64 19 b8 09    	add    dl,BYTE PTR [ecx+0x9b81964]
    2024:	00 00                	add    BYTE PTR [eax],al
    2026:	04 33                	add    al,0x33
    2028:	00 00                	add    BYTE PTR [eax],al
    202a:	00 01                	add    BYTE PTR [ecx],al
    202c:	01 01                	add    DWORD PTR [ecx],eax
    202e:	27                   	daa    
    202f:	09 00                	or     DWORD PTR [eax],eax
    2031:	00 09                	add    BYTE PTR [ecx],cl
    2033:	b3 09                	mov    bl,0x9
    2035:	00 00                	add    BYTE PTR [eax],al
    2037:	00 09                	add    BYTE PTR [ecx],cl
    2039:	05 09 00 00 01       	add    eax,0x1000009
    203e:	09 bf 09 00 00 02    	or     DWORD PTR [edi+0x2000009],edi
    2044:	00 1a                	add    BYTE PTR [edx],bl
    2046:	5b                   	pop    ebx
    2047:	08 00                	or     BYTE PTR [eax],al
    2049:	00 01                	add    BYTE PTR [ecx],al
    204b:	01 01                	add    DWORD PTR [ecx],eax
    204d:	03 09                	add    ecx,DWORD PTR [ecx]
    204f:	00 00                	add    BYTE PTR [eax],al
    2051:	02 91 6c 1a da 09    	add    dl,BYTE PTR [ecx+0x9da1a6c]
    2057:	00 00                	add    BYTE PTR [eax],al
    2059:	01 02                	add    DWORD PTR [edx],eax
    205b:	01 b7 00 00 00 02    	add    DWORD PTR [edi+0x2000000],esi
    2061:	91                   	xchg   ecx,eax
    2062:	68 1b 80 1d 00       	push   0x1d801b
    2067:	9f                   	lahf   
    2068:	0e                   	push   cs
    2069:	00 00                	add    BYTE PTR [eax],al
    206b:	00 62 09             	add    BYTE PTR [edx+0x9],ah
    206e:	00 00                	add    BYTE PTR [eax],al
    2070:	1a 2d 09 00 00 01    	sbb    ch,BYTE PTR ds:0x1000009
    2076:	08 01                	or     BYTE PTR [ecx],al
    2078:	d5 01                	aad    0x1
    207a:	00 00                	add    BYTE PTR [eax],al
    207c:	02 91 63 00 14 ef    	add    dl,BYTE PTR [ecx-0x10ebff9d]
    2082:	1d 00 9f 0e 00       	sbb    eax,0xe9f00
    2087:	00 00                	add    BYTE PTR [eax],al
    2089:	1a 2d 09 00 00 01    	sbb    ch,BYTE PTR ds:0x1000009
    208f:	1e                   	push   ds
    2090:	01 d5                	add    ebp,edx
    2092:	01 00                	add    DWORD PTR [eax],eax
    2094:	00 02                	add    BYTE PTR [edx],al
    2096:	91                   	xchg   ecx,eax
    2097:	62 00                	bound  eax,QWORD PTR [eax]
    2099:	00 1c 73             	add    BYTE PTR [ebx+esi*2],bl
    209c:	08 00                	or     BYTE PTR [eax],al
    209e:	00 01                	add    BYTE PTR [ecx],al
    20a0:	2d 01 b7 00 00       	sub    eax,0xb701
    20a5:	00 78 1e             	add    BYTE PTR [eax+0x1e],bh
    20a8:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    20ae:	01 9c c4 09 00 00 1d 	add    DWORD PTR [esp+eax*8+0x1d000009],ebx
    20b5:	16                   	push   ss
    20b6:	07                   	pop    es
    20b7:	00 00                	add    BYTE PTR [eax],al
    20b9:	01 2d 01 74 00 00    	add    DWORD PTR ds:0x7401,ebp
    20bf:	00 02                	add    BYTE PTR [edx],al
    20c1:	91                   	xchg   ecx,eax
    20c2:	00 1d 2a 0a 00 00    	add    BYTE PTR ds:0xa2a,bl
    20c8:	01 2d 01 1d 07 00    	add    DWORD PTR ds:0x71d01,ebp
    20ce:	00 02                	add    BYTE PTR [edx],al
    20d0:	91                   	xchg   ecx,eax
    20d1:	04 1d                	add    al,0x1d
    20d3:	0d 09 00 00 01       	or     eax,0x1000009
    20d8:	2d 01 b7 00 00       	sub    eax,0xb701
    20dd:	00 02                	add    BYTE PTR [edx],al
    20df:	91                   	xchg   ecx,eax
    20e0:	08 00                	or     BYTE PTR [eax],al
    20e2:	1c 1b                	sbb    al,0x1b
    20e4:	0a 00                	or     al,BYTE PTR [eax]
    20e6:	00 01                	add    BYTE PTR [ecx],al
    20e8:	32 01                	xor    al,BYTE PTR [ecx]
    20ea:	1d 07 00 00 98       	sbb    eax,0x98000007
    20ef:	1e                   	push   ds
    20f0:	00 9f fd 02 00 00    	add    BYTE PTR [edi+0x2fd],bl
    20f6:	01 9c b3 0a 00 00 1d 	add    DWORD PTR [ebx+esi*4+0x1d00000a],ebx
    20fd:	df 09                	fisttp WORD PTR [ecx]
    20ff:	00 00                	add    BYTE PTR [eax],al
    2101:	01 32                	add    DWORD PTR [edx],esi
    2103:	01 ca                	add    edx,ecx
    2105:	01 00                	add    DWORD PTR [eax],eax
    2107:	00 02                	add    BYTE PTR [edx],al
    2109:	91                   	xchg   ecx,eax
    210a:	00 1d da 09 00 00    	add    BYTE PTR ds:0x9da,bl
    2110:	01 32                	add    DWORD PTR [edx],esi
    2112:	01 b3 0a 00 00 02    	add    DWORD PTR [ebx+0x200000a],esi
    2118:	91                   	xchg   ecx,eax
    2119:	04 1a                	add    al,0x1a
    211b:	2a 0a                	sub    cl,BYTE PTR [edx]
    211d:	00 00                	add    BYTE PTR [eax],al
    211f:	01 34 01             	add    DWORD PTR [ecx+eax*1],esi
    2122:	1d 07 00 00 02       	sbb    eax,0x2000007
    2127:	91                   	xchg   ecx,eax
    2128:	54                   	push   esp
    2129:	18 63 6d             	sbb    BYTE PTR [ebx+0x6d],ah
    212c:	64 00 01             	add    BYTE PTR fs:[ecx],al
    212f:	35 01 b9 0a 00       	xor    eax,0xab901
    2134:	00 03                	add    BYTE PTR [ebx],al
    2136:	91                   	xchg   ecx,eax
    2137:	d0                   	(bad)  
    2138:	77 1a                	ja     2154 <__fmodf2+0x2128>
    213a:	84 08                	test   BYTE PTR [eax],cl
    213c:	00 00                	add    BYTE PTR [eax],al
    213e:	01 36                	add    DWORD PTR [esi],esi
    2140:	01 74 00 00          	add    DWORD PTR [eax+eax*1+0x0],esi
    2144:	00 02                	add    BYTE PTR [edx],al
    2146:	91                   	xchg   ecx,eax
    2147:	6c                   	ins    BYTE PTR es:[edi],dx
    2148:	1a 0d 08 00 00 01    	sbb    cl,BYTE PTR ds:0x1000008
    214e:	36 01 74 00 00       	add    DWORD PTR ss:[eax+eax*1+0x0],esi
    2153:	00 02                	add    BYTE PTR [edx],al
    2155:	91                   	xchg   ecx,eax
    2156:	68 1a 2d 08 00       	push   0x82d1a
    215b:	00 01                	add    BYTE PTR [ecx],al
    215d:	36 01 74 00 00       	add    DWORD PTR ss:[eax+eax*1+0x0],esi
    2162:	00 02                	add    BYTE PTR [edx],al
    2164:	91                   	xchg   ecx,eax
    2165:	5c                   	pop    esp
    2166:	1a c1                	sbb    al,cl
    2168:	08 00                	or     BYTE PTR [eax],al
    216a:	00 01                	add    BYTE PTR [ecx],al
    216c:	37                   	aaa    
    216d:	01 ca                	add    edx,ecx
    216f:	0a 00                	or     al,BYTE PTR [eax]
    2171:	00 03                	add    BYTE PTR [ebx],al
    2173:	91                   	xchg   ecx,eax
    2174:	ce                   	into   
    2175:	77 1a                	ja     2191 <__fmodf2+0x2165>
    2177:	36 08 00             	or     BYTE PTR ss:[eax],al
    217a:	00 01                	add    BYTE PTR [ecx],al
    217c:	50                   	push   eax
    217d:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    2180:	00 00                	add    BYTE PTR [eax],al
    2182:	02 91 64 1b 4f 1f    	add    dl,BYTE PTR [ecx+0x1f4f1b64]
    2188:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    218e:	84 0a                	test   BYTE PTR [edx],cl
    2190:	00 00                	add    BYTE PTR [eax],al
    2192:	1a 8d 08 00 00 01    	sbb    cl,BYTE PTR [ebp+0x1000008]
    2198:	42                   	inc    edx
    2199:	01 74 00 00          	add    DWORD PTR [eax+eax*1+0x0],esi
    219d:	00 02                	add    BYTE PTR [edx],al
    219f:	91                   	xchg   ecx,eax
    21a0:	58                   	pop    eax
    21a1:	00 14 ff             	add    BYTE PTR [edi+edi*8],dl
    21a4:	1f                   	pop    ds
    21a5:	00 9f 8c 01 00 00    	add    BYTE PTR [edi+0x18c],bl
    21ab:	18 63 6e             	sbb    BYTE PTR [ebx+0x6e],ah
    21ae:	74 00                	je     21b0 <__fmodf2+0x2184>
    21b0:	01 52 01             	add    DWORD PTR [edx+0x1],edx
    21b3:	4f                   	dec    edi
    21b4:	00 00                	add    BYTE PTR [eax],al
    21b6:	00 02                	add    BYTE PTR [edx],al
    21b8:	91                   	xchg   ecx,eax
    21b9:	60                   	pusha  
    21ba:	1e                   	push   ds
    21bb:	18 00                	sbb    BYTE PTR [eax],al
    21bd:	00 00                	add    BYTE PTR [eax],al
    21bf:	1a 8d 08 00 00 01    	sbb    cl,BYTE PTR [ebp+0x1000008]
    21c5:	58                   	pop    eax
    21c6:	01 74 00 00          	add    DWORD PTR [eax+eax*1+0x0],esi
    21ca:	00 02                	add    BYTE PTR [edx],al
    21cc:	91                   	xchg   ecx,eax
    21cd:	50                   	push   eax
    21ce:	00 00                	add    BYTE PTR [eax],al
    21d0:	00 05 04 4f 00 00    	add    BYTE PTR ds:0x4f04,al
    21d6:	00 1f                	add    BYTE PTR [edi],bl
    21d8:	7a 00                	jp     21da <__fmodf2+0x21ae>
    21da:	00 00                	add    BYTE PTR [eax],al
    21dc:	ca 0a 00             	retf   0xa
    21df:	00 20                	add    BYTE PTR [eax],ah
    21e1:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    21e4:	00 ff                	add    bh,bh
    21e6:	03 00                	add    eax,DWORD PTR [eax]
    21e8:	1f                   	pop    ds
    21e9:	7a 00                	jp     21eb <__fmodf2+0x21bf>
    21eb:	00 00                	add    BYTE PTR [eax],al
    21ed:	da 0a                	fimul  DWORD PTR [edx]
    21ef:	00 00                	add    BYTE PTR [eax],al
    21f1:	21 6b 00             	and    DWORD PTR [ebx+0x0],ebp
    21f4:	00 00                	add    BYTE PTR [eax],al
    21f6:	01 00                	add    DWORD PTR [eax],eax
    21f8:	1c 92                	sbb    al,0x92
    21fa:	08 00                	or     BYTE PTR [eax],al
    21fc:	00 01                	add    BYTE PTR [ecx],al
    21fe:	70 01                	jo     2201 <__fmodf2+0x21d5>
    2200:	1d 07 00 00 95       	sbb    eax,0x95000007
    2205:	21 00                	and    DWORD PTR [eax],eax
    2207:	9f                   	lahf   
    2208:	23 00                	and    eax,DWORD PTR [eax]
    220a:	00 00                	add    BYTE PTR [eax],al
    220c:	01 9c 13 0b 00 00 1d 	add    DWORD PTR [ebx+edx*1+0x1d00000b],ebx
    2213:	df 09                	fisttp WORD PTR [ecx]
    2215:	00 00                	add    BYTE PTR [eax],al
    2217:	01 70 01             	add    DWORD PTR [eax+0x1],esi
    221a:	74 00                	je     221c <__fmodf2+0x21f0>
    221c:	00 00                	add    BYTE PTR [eax],al
    221e:	02 91 00 1d da 09    	add    dl,BYTE PTR [ecx+0x9da1d00]
    2224:	00 00                	add    BYTE PTR [eax],al
    2226:	01 70 01             	add    DWORD PTR [eax+0x1],esi
    2229:	b3 0a                	mov    bl,0xa
    222b:	00 00                	add    BYTE PTR [eax],al
    222d:	02 91 04 00 1c 3b    	add    dl,BYTE PTR [ecx+0x3b1c0004]
    2233:	0a 00                	or     al,BYTE PTR [eax]
    2235:	00 01                	add    BYTE PTR [ecx],al
    2237:	75 01                	jne    223a <__fmodf2+0x220e>
    2239:	4f                   	dec    edi
    223a:	00 00                	add    BYTE PTR [eax],al
    223c:	00 b8 21 00 9f 23    	add    BYTE PTR [eax+0x239f0021],bh
    2242:	00 00                	add    BYTE PTR [eax],al
    2244:	00 01                	add    BYTE PTR [ecx],al
    2246:	9c                   	pushf  
    2247:	4c                   	dec    esp
    2248:	0b 00                	or     eax,DWORD PTR [eax]
    224a:	00 22                	add    BYTE PTR [edx],ah
    224c:	73 74                	jae    22c2 <__fmodf2+0x2296>
    224e:	64 00 01             	add    BYTE PTR fs:[ecx],al
    2251:	75 01                	jne    2254 <__fmodf2+0x2228>
    2253:	4f                   	dec    edi
    2254:	00 00                	add    BYTE PTR [eax],al
    2256:	00 02                	add    BYTE PTR [edx],al
    2258:	91                   	xchg   ecx,eax
    2259:	00 1d 5f 0a 00 00    	add    BYTE PTR ds:0xa5f,bl
    225f:	01 75 01             	add    DWORD PTR [ebp+0x1],esi
    2262:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    2267:	91                   	xchg   ecx,eax
    2268:	04 00                	add    al,0x0
    226a:	23 55 0a             	and    edx,DWORD PTR [ebp+0xa]
    226d:	00 00                	add    BYTE PTR [eax],al
    226f:	01 7a 01             	add    DWORD PTR [edx+0x1],edi
    2272:	db 21                	(bad)  [ecx]
    2274:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    227a:	01 9c 1c fa 09 00 00 	add    DWORD PTR [esp+ebx*1+0x9fa],ebx
    2281:	01 7f 01             	add    DWORD PTR [edi+0x1],edi
    2284:	4f                   	dec    edi
    2285:	00 00                	add    BYTE PTR [eax],al
    2287:	00 f8                	add    al,bh
    2289:	21 00                	and    DWORD PTR [eax],eax
    228b:	9f                   	lahf   
    228c:	20 00                	and    BYTE PTR [eax],al
    228e:	00 00                	add    BYTE PTR [eax],al
    2290:	01 9c a6 0b 00 00 1d 	add    DWORD PTR [esi+eiz*4+0x1d00000b],ebx
    2297:	27                   	daa    
    2298:	09 00                	or     DWORD PTR [eax],eax
    229a:	00 01                	add    BYTE PTR [ecx],al
    229c:	7f 01                	jg     229f <__fmodf2+0x2273>
    229e:	4f                   	dec    edi
    229f:	00 00                	add    BYTE PTR [eax],al
    22a1:	00 02                	add    BYTE PTR [edx],al
    22a3:	91                   	xchg   ecx,eax
    22a4:	00 22                	add    BYTE PTR [edx],ah
    22a6:	77 68                	ja     2310 <__fmodf2+0x22e4>
    22a8:	6f                   	outs   dx,DWORD PTR ds:[esi]
    22a9:	00 01                	add    BYTE PTR [ecx],al
    22ab:	7f 01                	jg     22ae <__fmodf2+0x2282>
    22ad:	4f                   	dec    edi
    22ae:	00 00                	add    BYTE PTR [eax],al
    22b0:	00 02                	add    BYTE PTR [edx],al
    22b2:	91                   	xchg   ecx,eax
    22b3:	04 1d                	add    al,0x1d
    22b5:	44                   	inc    esp
    22b6:	09 00                	or     DWORD PTR [eax],eax
    22b8:	00 01                	add    BYTE PTR [ecx],al
    22ba:	7f 01                	jg     22bd <__fmodf2+0x2291>
    22bc:	4f                   	dec    edi
    22bd:	00 00                	add    BYTE PTR [eax],al
    22bf:	00 02                	add    BYTE PTR [edx],al
    22c1:	91                   	xchg   ecx,eax
    22c2:	08 00                	or     BYTE PTR [eax],al
    22c4:	24 78                	and    al,0x78
    22c6:	00 00                	add    BYTE PTR [eax],al
    22c8:	00 06                	add    BYTE PTR [esi],al
    22ca:	33 1d 07 00 00 05    	xor    ebx,DWORD PTR ds:0x5000007
    22d0:	03 40 92             	add    eax,DWORD PTR [eax-0x6e]
    22d3:	00 9f 24 10 02 00    	add    BYTE PTR [edi+0x21024],bl
    22d9:	00 07                	add    BYTE PTR [edi],al
    22db:	35 c8 0b 00 00       	xor    eax,0xbc8
    22e0:	05 03 50 92 00       	add    eax,0x925003
    22e5:	9f                   	lahf   
    22e6:	05 04 ac 00 00       	add    eax,0xac04
    22eb:	00 24 33             	add    BYTE PTR [ebx+esi*1],ah
    22ee:	02 00                	add    al,BYTE PTR [eax]
    22f0:	00 07                	add    BYTE PTR [edi],al
    22f2:	36 a1 00 00 00 05    	mov    eax,ss:0x5000000
    22f8:	03 4c 92 00          	add    ecx,DWORD PTR [edx+edx*4+0x0]
    22fc:	9f                   	lahf   
    22fd:	24 17                	and    al,0x17
    22ff:	09 00                	or     DWORD PTR [eax],eax
    2301:	00 01                	add    BYTE PTR [ecx],al
    2303:	0d d5 01 00 00       	or     eax,0x1d5
    2308:	05 03 64 92 00       	add    eax,0x926403
    230d:	9f                   	lahf   
    230e:	24 91                	and    al,0x91
    2310:	09 00                	or     DWORD PTR [eax],eax
    2312:	00 01                	add    BYTE PTR [ecx],al
    2314:	0e                   	push   cs
    2315:	74 00                	je     2317 <__fmodf2+0x22eb>
    2317:	00 00                	add    BYTE PTR [eax],al
    2319:	05 03 68 92 00       	add    eax,0x926803
    231e:	9f                   	lahf   
    231f:	00 9b 02 00 00 04    	add    BYTE PTR [ebx+0x4000002],bl
    2325:	00 12                	add    BYTE PTR [edx],dl
    2327:	09 00                	or     DWORD PTR [eax],eax
    2329:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    232c:	c3                   	ret    
    232d:	00 00                	add    BYTE PTR [eax],al
    232f:	00 0c aa             	add    BYTE PTR [edx+ebp*4],cl
    2332:	0a 00                	or     al,BYTE PTR [eax]
    2334:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    2337:	00 00                	add    BYTE PTR [eax],al
    2339:	18 22                	sbb    BYTE PTR [edx],ah
    233b:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    2341:	fe 09                	dec    BYTE PTR [ecx]
    2343:	00 00                	add    BYTE PTR [eax],al
    2345:	02 01                	add    al,BYTE PTR [ecx]
    2347:	08 3f                	or     BYTE PTR [edi],bh
    2349:	00 00                	add    BYTE PTR [eax],al
    234b:	00 02                	add    BYTE PTR [edx],al
    234d:	02 07                	add    al,BYTE PTR [edi]
    234f:	0e                   	push   cs
    2350:	00 00                	add    BYTE PTR [eax],al
    2352:	00 02                	add    BYTE PTR [edx],al
    2354:	04 07                	add    al,0x7
    2356:	32 00                	xor    al,BYTE PTR [eax]
    2358:	00 00                	add    BYTE PTR [eax],al
    235a:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    235d:	2d 00 00 00 02       	sub    eax,0x2000000
    2362:	01 06                	add    DWORD PTR [esi],eax
    2364:	41                   	inc    ecx
    2365:	00 00                	add    BYTE PTR [eax],al
    2367:	00 02                	add    BYTE PTR [edx],al
    2369:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    236f:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2376:	02 08                	add    cl,BYTE PTR [eax]
    2378:	05 00 00 00 00       	add    eax,0x0
    237d:	02 08                	add    cl,BYTE PTR [eax]
    237f:	07                   	pop    es
    2380:	28 00                	sub    BYTE PTR [eax],al
    2382:	00 00                	add    BYTE PTR [eax],al
    2384:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    238b:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    238e:	2a 01                	sub    al,BYTE PTR [ecx]
    2390:	00 00                	add    BYTE PTR [eax],al
    2392:	04 04                	add    al,0x4
    2394:	05 04 7a 00 00       	add    eax,0x7a04
    2399:	00 02                	add    BYTE PTR [edx],al
    239b:	01 06                	add    DWORD PTR [esi],eax
    239d:	48                   	dec    eax
    239e:	00 00                	add    BYTE PTR [eax],al
    23a0:	00 06                	add    BYTE PTR [esi],al
    23a2:	45                   	inc    ebp
    23a3:	02 00                	add    al,BYTE PTR [eax]
    23a5:	00 02                	add    BYTE PTR [edx],al
    23a7:	34 33                	xor    al,0x33
    23a9:	00 00                	add    BYTE PTR [eax],al
    23ab:	00 06                	add    BYTE PTR [esi],al
    23ad:	91                   	xchg   ecx,eax
    23ae:	02 00                	add    al,BYTE PTR [eax]
    23b0:	00 03                	add    BYTE PTR [ebx],al
    23b2:	d8 33                	fdiv   DWORD PTR [ebx]
    23b4:	00 00                	add    BYTE PTR [eax],al
    23b6:	00 02                	add    BYTE PTR [edx],al
    23b8:	0c 04                	or     al,0x4
    23ba:	ad                   	lods   eax,DWORD PTR ds:[esi]
    23bb:	00 00                	add    BYTE PTR [eax],al
    23bd:	00 07                	add    BYTE PTR [edi],al
    23bf:	a0 03 00 00 04       	mov    al,ds:0x4000003
    23c4:	33 00                	xor    eax,DWORD PTR [eax]
    23c6:	00 00                	add    BYTE PTR [eax],al
    23c8:	04 15                	add    al,0x15
    23ca:	9f                   	lahf   
    23cb:	01 00                	add    DWORD PTR [eax],eax
    23cd:	00 08                	add    BYTE PTR [eax],cl
    23cf:	51                   	push   ecx
    23d0:	04 00                	add    al,0x0
    23d2:	00 00                	add    BYTE PTR [eax],al
    23d4:	08 96 04 00 00 01    	or     BYTE PTR [esi+0x1000004],dl
    23da:	08 84 02 00 00 02 08 	or     BYTE PTR [edx+eax*1+0x8020000],al
    23e1:	83 03 00             	add    DWORD PTR [ebx],0x0
    23e4:	00 03                	add    BYTE PTR [ebx],al
    23e6:	08 6a 02             	or     BYTE PTR [edx+0x2],ch
    23e9:	00 00                	add    BYTE PTR [eax],al
    23eb:	04 08                	add    al,0x8
    23ed:	da 04 00             	fiadd  DWORD PTR [eax+eax*1]
    23f0:	00 05 08 78 04 00    	add    BYTE PTR ds:0x47808,al
    23f6:	00 0a                	add    BYTE PTR [edx],cl
    23f8:	08 c4                	or     ah,al
    23fa:	03 00                	add    eax,DWORD PTR [eax]
    23fc:	00 0b                	add    BYTE PTR [ebx],cl
    23fe:	08 2a                	or     BYTE PTR [edx],ch
    2400:	04 00                	add    al,0x0
    2402:	00 0c 08             	add    BYTE PTR [eax+ecx*1],cl
    2405:	91                   	xchg   ecx,eax
    2406:	03 00                	add    eax,DWORD PTR [eax]
    2408:	00 0d 08 aa 03 00    	add    BYTE PTR ds:0x3aa08,cl
    240e:	00 0e                	add    BYTE PTR [esi],cl
    2410:	08 77 02             	or     BYTE PTR [edi+0x2],dh
    2413:	00 00                	add    BYTE PTR [eax],al
    2415:	0f 08                	invd   
    2417:	f4                   	hlt    
    2418:	03 00                	add    eax,DWORD PTR [eax]
    241a:	00 10                	add    BYTE PTR [eax],dl
    241c:	08 27                	or     BYTE PTR [edi],ah
    241e:	05 00 00 11 08       	add    eax,0x8110000
    2423:	05 05 00 00 4f       	add    eax,0x4f000005
    2428:	08 cb                	or     bl,cl
    242a:	04 00                	add    al,0x0
    242c:	00 50 08             	add    BYTE PTR [eax+0x8],dl
    242f:	44                   	inc    esp
    2430:	04 00                	add    al,0x0
    2432:	00 59 08             	add    BYTE PTR [ecx+0x8],bl
    2435:	14 05                	adc    al,0x5
    2437:	00 00                	add    BYTE PTR [eax],al
    2439:	61                   	popa   
    243a:	08 49 03             	or     BYTE PTR [ecx+0x3],cl
    243d:	00 00                	add    BYTE PTR [eax],al
    243f:	97                   	xchg   edi,eax
    2440:	09 61 04             	or     DWORD PTR [ecx+0x4],esp
    2443:	00 00                	add    BYTE PTR [eax],al
    2445:	63 01                	arpl   WORD PTR [ecx],ax
    2447:	09 37                	or     DWORD PTR [edi],esi
    2449:	04 00                	add    al,0x0
    244b:	00 64 01 09          	add    BYTE PTR [ecx+eax*1+0x9],ah
    244f:	44                   	inc    esp
    2450:	05 00 00 65 01       	add    eax,0x1650000
    2455:	09 25 03 00 00 66    	or     DWORD PTR ds:0x66000003,esp
    245b:	01 09                	add    DWORD PTR [ecx],ecx
    245d:	56                   	push   esi
    245e:	05 00 00 67 01       	add    eax,0x1670000
    2463:	09 b7 03 00 00 68    	or     DWORD PTR [edi+0x68000003],esi
    2469:	01 09                	add    DWORD PTR [ecx],ecx
    246b:	d6                   	(bad)  
    246c:	02 00                	add    al,BYTE PTR [eax]
    246e:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    2471:	09 85 04 00 00 70    	or     DWORD PTR [ebp+0x70000004],eax
    2477:	01 09                	add    DWORD PTR [ecx],ecx
    2479:	39 03                	cmp    DWORD PTR [ebx],eax
    247b:	00 00                	add    BYTE PTR [eax],al
    247d:	71 01                	jno    2480 <__fmodf2+0x2454>
    247f:	09 e8                	or     eax,ebp
    2481:	04 00                	add    al,0x0
    2483:	00 00                	add    BYTE PTR [eax],al
    2485:	03 09                	add    ecx,DWORD PTR [ecx]
    2487:	d9 03                	fld    DWORD PTR [ebx]
    2489:	00 00                	add    BYTE PTR [eax],al
    248b:	01 03                	add    DWORD PTR [ebx],eax
    248d:	09 e8                	or     eax,ebp
    248f:	03 00                	add    eax,DWORD PTR [eax]
    2491:	00 02                	add    BYTE PTR [edx],al
    2493:	03 09                	add    ecx,DWORD PTR [ecx]
    2495:	73 03                	jae    249a <__fmodf2+0x246e>
    2497:	00 00                	add    BYTE PTR [eax],al
    2499:	03 03                	add    eax,DWORD PTR [ebx]
    249b:	09 b6 02 00 00 04    	or     DWORD PTR [esi+0x4000002],esi
    24a1:	03 09                	add    ecx,DWORD PTR [ecx]
    24a3:	15 03 00 00 05       	adc    eax,0x5000003
    24a8:	03 09                	add    ecx,DWORD PTR [ecx]
    24aa:	64 03 00             	add    eax,DWORD PTR fs:[eax]
    24ad:	00 06                	add    BYTE PTR [esi],al
    24af:	03 09                	add    ecx,DWORD PTR [ecx]
    24b1:	b2 04                	mov    dl,0x4
    24b3:	00 00                	add    BYTE PTR [eax],al
    24b5:	07                   	pop    es
    24b6:	03 09                	add    ecx,DWORD PTR [ecx]
    24b8:	01 04 00             	add    DWORD PTR [eax+eax*1],eax
    24bb:	00 00                	add    BYTE PTR [eax],al
    24bd:	09 00                	or     DWORD PTR [eax],eax
    24bf:	0a 8a 0a 00 00 18    	or     cl,BYTE PTR [edx+0x1800000a]
    24c5:	04 3e                	add    al,0x3e
    24c7:	f3 01 00             	repz add DWORD PTR [eax],eax
    24ca:	00 0b                	add    BYTE PTR [ebx],cl
    24cc:	87 0e                	xchg   DWORD PTR [esi],ecx
    24ce:	00 00                	add    BYTE PTR [eax],al
    24d0:	04 40                	add    al,0x40
    24d2:	72 00                	jb     24d4 <__fmodf2+0x24a8>
    24d4:	00 00                	add    BYTE PTR [eax],al
    24d6:	00 0c 6c             	add    BYTE PTR [esp+ebp*2],cl
    24d9:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    24db:	00 04 41             	add    BYTE PTR [ecx+eax*2],al
    24de:	4f                   	dec    edi
    24df:	00 00                	add    BYTE PTR [eax],al
    24e1:	00 04 0b             	add    BYTE PTR [ebx+ecx*1],al
    24e4:	b9 0a 00 00 04       	mov    ecx,0x400000a
    24e9:	42                   	inc    edx
    24ea:	4f                   	dec    edi
    24eb:	00 00                	add    BYTE PTR [eax],al
    24ed:	00 08                	add    BYTE PTR [eax],cl
    24ef:	0b a4 0a 00 00 04 43 	or     esp,DWORD PTR [edx+ecx*1+0x43040000]
    24f6:	4f                   	dec    edi
    24f7:	00 00                	add    BYTE PTR [eax],al
    24f9:	00 0c 0c             	add    BYTE PTR [esp+ecx*1],cl
    24fc:	66                   	data16
    24fd:	64 00 04 44          	add    BYTE PTR fs:[esp+eax*2],al
    2501:	4f                   	dec    edi
    2502:	00 00                	add    BYTE PTR [eax],al
    2504:	00 10                	add    BYTE PTR [eax],dl
    2506:	0b e7                	or     esp,edi
    2508:	11 00                	adc    DWORD PTR [eax],eax
    250a:	00 04 45 4f 00 00 00 	add    BYTE PTR [eax*2+0x4f],al
    2511:	14 00                	adc    al,0x0
    2513:	06                   	push   es
    2514:	c3                   	ret    
    2515:	0a 00                	or     al,BYTE PTR [eax]
    2517:	00 04 46             	add    BYTE PTR [esi+eax*2],al
    251a:	9f                   	lahf   
    251b:	01 00                	add    DWORD PTR [eax],eax
    251d:	00 06                	add    BYTE PTR [esi],al
    251f:	97                   	xchg   edi,eax
    2520:	0a 00                	or     al,BYTE PTR [eax]
    2522:	00 05 15 64 00 00    	add    BYTE PTR ds:0x6415,al
    2528:	00 0d be 0a 00 00    	add    BYTE PTR ds:0xabe,cl
    252e:	01 0d 72 00 00 00    	add    DWORD PTR ds:0x72,ecx
    2534:	18 22                	sbb    BYTE PTR [edx],ah
    2536:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    253c:	01 9c 76 02 00 00 0e 	add    DWORD PTR [esi+esi*2+0xe000002],ebx
    2543:	87 0e                	xchg   DWORD PTR [esi],ecx
    2545:	00 00                	add    BYTE PTR [eax],al
    2547:	01 0d 72 00 00 00    	add    DWORD PTR ds:0x72,ecx
    254d:	02 91 00 0f 6c 65    	add    dl,BYTE PTR [ecx+0x656c0f00]
    2553:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2554:	00 01                	add    BYTE PTR [ecx],al
    2556:	0d 8c 00 00 00       	or     eax,0x8c
    255b:	02 91 04 0e b9 0a    	add    dl,BYTE PTR [ecx+0xab90e04]
    2561:	00 00                	add    BYTE PTR [eax],al
    2563:	01 0d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ecx
    2569:	02 91 08 0e a4 0a    	add    dl,BYTE PTR [ecx+0xaa40e08]
    256f:	00 00                	add    BYTE PTR [eax],al
    2571:	01 0d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ecx
    2577:	02 91 0c 0f 66 64    	add    dl,BYTE PTR [ecx+0x64660f0c]
    257d:	00 01                	add    BYTE PTR [ecx],al
    257f:	0d 4f 00 00 00       	or     eax,0x4f
    2584:	02 91 10 0e e7 11    	add    dl,BYTE PTR [ecx+0x11e70e10]
    258a:	00 00                	add    BYTE PTR [eax],al
    258c:	01 0d fe 01 00 00    	add    DWORD PTR ds:0x1fe,ecx
    2592:	02 91 14 00 10 78    	add    dl,BYTE PTR [ecx+0x78100014]
    2598:	00 00                	add    BYTE PTR [eax],al
    259a:	00 06                	add    BYTE PTR [esi],al
    259c:	33 87 02 00 00 05    	xor    eax,DWORD PTR [edi+0x5000002]
    25a2:	03 40 92             	add    eax,DWORD PTR [eax-0x6e]
    25a5:	00 9f 05 04 74 00    	add    BYTE PTR [edi+0x740405],bl
    25ab:	00 00                	add    BYTE PTR [eax],al
    25ad:	10 9d 0a 00 00 01    	adc    BYTE PTR [ebp+0x100000a],bl
    25b3:	0b f3                	or     esi,ebx
    25b5:	01 00                	add    DWORD PTR [eax],eax
    25b7:	00 05 03 6c 92 00    	add    BYTE PTR ds:0x926c03,al
    25bd:	9f                   	lahf   
    25be:	00 0b                	add    BYTE PTR [ebx],cl
    25c0:	05 00 00 04 00       	add    eax,0x40000
    25c5:	f4                   	hlt    
    25c6:	09 00                	or     DWORD PTR [eax],eax
    25c8:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    25cb:	c3                   	ret    
    25cc:	00 00                	add    BYTE PTR [eax],al
    25ce:	00 0c c1             	add    BYTE PTR [ecx+eax*8],cl
    25d1:	0b 00                	or     eax,DWORD PTR [eax]
    25d3:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    25d6:	00 00                	add    BYTE PTR [eax],al
    25d8:	8c 22                	mov    WORD PTR [edx],fs
    25da:	00 9f c2 06 00 00    	add    BYTE PTR [edi+0x6c2],bl
    25e0:	f9                   	stc    
    25e1:	0a 00                	or     al,BYTE PTR [eax]
    25e3:	00 02                	add    BYTE PTR [edx],al
    25e5:	01 06                	add    DWORD PTR [esi],eax
    25e7:	41                   	inc    ecx
    25e8:	00 00                	add    BYTE PTR [eax],al
    25ea:	00 02                	add    BYTE PTR [edx],al
    25ec:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    25f2:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    25f9:	02 08                	add    cl,BYTE PTR [eax]
    25fb:	05 00 00 00 00       	add    eax,0x0
    2600:	04 4d                	add    al,0x4d
    2602:	07                   	pop    es
    2603:	00 00                	add    BYTE PTR [eax],al
    2605:	02 2e                	add    ch,BYTE PTR [esi]
    2607:	4c                   	dec    esp
    2608:	00 00                	add    BYTE PTR [eax],al
    260a:	00 02                	add    BYTE PTR [edx],al
    260c:	01 08                	add    DWORD PTR [eax],ecx
    260e:	3f                   	aas    
    260f:	00 00                	add    BYTE PTR [eax],al
    2611:	00 04 07             	add    BYTE PTR [edi+eax*1],al
    2614:	06                   	push   es
    2615:	00 00                	add    BYTE PTR [eax],al
    2617:	02 31                	add    dh,BYTE PTR [ecx]
    2619:	5e                   	pop    esi
    261a:	00 00                	add    BYTE PTR [eax],al
    261c:	00 02                	add    BYTE PTR [edx],al
    261e:	02 07                	add    al,BYTE PTR [edi]
    2620:	0e                   	push   cs
    2621:	00 00                	add    BYTE PTR [eax],al
    2623:	00 04 45 02 00 00 02 	add    BYTE PTR [eax*2+0x2000002],al
    262a:	34 70                	xor    al,0x70
    262c:	00 00                	add    BYTE PTR [eax],al
    262e:	00 02                	add    BYTE PTR [edx],al
    2630:	04 07                	add    al,0x7
    2632:	32 00                	xor    al,BYTE PTR [eax]
    2634:	00 00                	add    BYTE PTR [eax],al
    2636:	02 08                	add    cl,BYTE PTR [eax]
    2638:	07                   	pop    es
    2639:	28 00                	sub    BYTE PTR [eax],al
    263b:	00 00                	add    BYTE PTR [eax],al
    263d:	04 01                	add    al,0x1
    263f:	02 00                	add    al,BYTE PTR [eax]
    2641:	00 02                	add    BYTE PTR [edx],al
    2643:	56                   	push   esi
    2644:	70 00                	jo     2646 <__fmodf2+0x261a>
    2646:	00 00                	add    BYTE PTR [eax],al
    2648:	04 91                	add    al,0x91
    264a:	02 00                	add    al,BYTE PTR [eax]
    264c:	00 03                	add    BYTE PTR [ebx],al
    264e:	d8 70 00             	fdiv   DWORD PTR [eax+0x0]
    2651:	00 00                	add    BYTE PTR [eax],al
    2653:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    265a:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    265d:	ad                   	lods   eax,DWORD PTR ds:[esi]
    265e:	00 00                	add    BYTE PTR [eax],al
    2660:	00 02                	add    BYTE PTR [edx],al
    2662:	01 06                	add    DWORD PTR [esi],eax
    2664:	48                   	dec    eax
    2665:	00 00                	add    BYTE PTR [eax],al
    2667:	00 05 40 0b 00 00    	add    BYTE PTR ds:0xb40,al
    266d:	18 04 33             	sbb    BYTE PTR [ebx+esi*1],al
    2670:	0a 01                	or     al,BYTE PTR [ecx]
    2672:	00 00                	add    BYTE PTR [eax],al
    2674:	06                   	push   es
    2675:	0c 0b                	or     al,0xb
    2677:	00 00                	add    BYTE PTR [eax],al
    2679:	04 35                	add    al,0x35
    267b:	65 00 00             	add    BYTE PTR gs:[eax],al
    267e:	00 00                	add    BYTE PTR [eax],al
    2680:	07                   	pop    es
    2681:	6c                   	ins    BYTE PTR es:[edi],dx
    2682:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    2684:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    2687:	65 00 00             	add    BYTE PTR gs:[eax],al
    268a:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    268d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    268f:	00 00                	add    BYTE PTR [eax],al
    2691:	04 37                	add    al,0x37
    2693:	0a 01                	or     al,BYTE PTR [ecx]
    2695:	00 00                	add    BYTE PTR [eax],al
    2697:	08 06                	or     BYTE PTR [esi],al
    2699:	ac                   	lods   al,BYTE PTR ds:[esi]
    269a:	0b 00                	or     eax,DWORD PTR [eax]
    269c:	00 04 38             	add    BYTE PTR [eax+edi*1],al
    269f:	53                   	push   ebx
    26a0:	00 00                	add    BYTE PTR [eax],al
    26a2:	00 0a                	add    BYTE PTR [edx],cl
    26a4:	06                   	push   es
    26a5:	33 0b                	xor    ecx,DWORD PTR [ebx]
    26a7:	00 00                	add    BYTE PTR [eax],al
    26a9:	04 39                	add    al,0x39
    26ab:	41                   	inc    ecx
    26ac:	00 00                	add    BYTE PTR [eax],al
    26ae:	00 0c 06             	add    BYTE PTR [esi+eax*1],cl
    26b1:	d2 0a                	ror    BYTE PTR [edx],cl
    26b3:	00 00                	add    BYTE PTR [eax],al
    26b5:	04 3a                	add    al,0x3a
    26b7:	11 01                	adc    DWORD PTR [ecx],eax
    26b9:	00 00                	add    BYTE PTR [eax],al
    26bb:	10 06                	adc    BYTE PTR [esi],al
    26bd:	ee                   	out    dx,al
    26be:	0a 00                	or     al,BYTE PTR [eax]
    26c0:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    26c3:	11 01                	adc    DWORD PTR [ecx],eax
    26c5:	00 00                	add    BYTE PTR [eax],al
    26c7:	14 00                	adc    al,0x0
    26c9:	02 01                	add    al,BYTE PTR [ecx]
    26cb:	02 e8                	add    ch,al
    26cd:	06                   	push   es
    26ce:	00 00                	add    BYTE PTR [eax],al
    26d0:	08 04 a9             	or     BYTE PTR [ecx+ebp*4],al
    26d3:	00 00                	add    BYTE PTR [eax],al
    26d5:	00 04 f3             	add    BYTE PTR [ebx+esi*8],al
    26d8:	0a 00                	or     al,BYTE PTR [eax]
    26da:	00 04 3b             	add    BYTE PTR [ebx+edi*1],al
    26dd:	a9 00 00 00 02       	test   eax,0x2000000
    26e2:	04 07                	add    al,0x7
    26e4:	2d 00 00 00 02       	sub    eax,0x2000000
    26e9:	04 07                	add    al,0x7
    26eb:	2a 01                	sub    al,BYTE PTR [ecx]
    26ed:	00 00                	add    BYTE PTR [eax],al
    26ef:	09 04 08             	or     DWORD PTR [eax+ecx*1],eax
    26f2:	04 a2                	add    al,0xa2
    26f4:	00 00                	add    BYTE PTR [eax],al
    26f6:	00 0a                	add    BYTE PTR [edx],cl
    26f8:	a0 03 00 00 04       	mov    al,ds:0x4000003
    26fd:	70 00                	jo     26ff <__fmodf2+0x26d3>
    26ff:	00 00                	add    BYTE PTR [eax],al
    2701:	06                   	push   es
    2702:	15 39 02 00 00       	adc    eax,0x239
    2707:	0b 51 04             	or     edx,DWORD PTR [ecx+0x4]
    270a:	00 00                	add    BYTE PTR [eax],al
    270c:	00 0b                	add    BYTE PTR [ebx],cl
    270e:	96                   	xchg   esi,eax
    270f:	04 00                	add    al,0x0
    2711:	00 01                	add    BYTE PTR [ecx],al
    2713:	0b 84 02 00 00 02 0b 	or     eax,DWORD PTR [edx+eax*1+0xb020000]
    271a:	83 03 00             	add    DWORD PTR [ebx],0x0
    271d:	00 03                	add    BYTE PTR [ebx],al
    271f:	0b 6a 02             	or     ebp,DWORD PTR [edx+0x2]
    2722:	00 00                	add    BYTE PTR [eax],al
    2724:	04 0b                	add    al,0xb
    2726:	da 04 00             	fiadd  DWORD PTR [eax+eax*1]
    2729:	00 05 0b 78 04 00    	add    BYTE PTR ds:0x4780b,al
    272f:	00 0a                	add    BYTE PTR [edx],cl
    2731:	0b c4                	or     eax,esp
    2733:	03 00                	add    eax,DWORD PTR [eax]
    2735:	00 0b                	add    BYTE PTR [ebx],cl
    2737:	0b 2a                	or     ebp,DWORD PTR [edx]
    2739:	04 00                	add    al,0x0
    273b:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
    273e:	91                   	xchg   ecx,eax
    273f:	03 00                	add    eax,DWORD PTR [eax]
    2741:	00 0d 0b aa 03 00    	add    BYTE PTR ds:0x3aa0b,cl
    2747:	00 0e                	add    BYTE PTR [esi],cl
    2749:	0b 77 02             	or     esi,DWORD PTR [edi+0x2]
    274c:	00 00                	add    BYTE PTR [eax],al
    274e:	0f 0b                	ud2    
    2750:	f4                   	hlt    
    2751:	03 00                	add    eax,DWORD PTR [eax]
    2753:	00 10                	add    BYTE PTR [eax],dl
    2755:	0b 27                	or     esp,DWORD PTR [edi]
    2757:	05 00 00 11 0b       	add    eax,0xb110000
    275c:	05 05 00 00 4f       	add    eax,0x4f000005
    2761:	0b cb                	or     ecx,ebx
    2763:	04 00                	add    al,0x0
    2765:	00 50 0b             	add    BYTE PTR [eax+0xb],dl
    2768:	44                   	inc    esp
    2769:	04 00                	add    al,0x0
    276b:	00 59 0b             	add    BYTE PTR [ecx+0xb],bl
    276e:	14 05                	adc    al,0x5
    2770:	00 00                	add    BYTE PTR [eax],al
    2772:	61                   	popa   
    2773:	0b 49 03             	or     ecx,DWORD PTR [ecx+0x3]
    2776:	00 00                	add    BYTE PTR [eax],al
    2778:	97                   	xchg   edi,eax
    2779:	0c 61                	or     al,0x61
    277b:	04 00                	add    al,0x0
    277d:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    2780:	0c 37                	or     al,0x37
    2782:	04 00                	add    al,0x0
    2784:	00 64 01 0c          	add    BYTE PTR [ecx+eax*1+0xc],ah
    2788:	44                   	inc    esp
    2789:	05 00 00 65 01       	add    eax,0x1650000
    278e:	0c 25                	or     al,0x25
    2790:	03 00                	add    eax,DWORD PTR [eax]
    2792:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    2795:	0c 56                	or     al,0x56
    2797:	05 00 00 67 01       	add    eax,0x1670000
    279c:	0c b7                	or     al,0xb7
    279e:	03 00                	add    eax,DWORD PTR [eax]
    27a0:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    27a3:	0c d6                	or     al,0xd6
    27a5:	02 00                	add    al,BYTE PTR [eax]
    27a7:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    27aa:	0c 85                	or     al,0x85
    27ac:	04 00                	add    al,0x0
    27ae:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    27b1:	0c 39                	or     al,0x39
    27b3:	03 00                	add    eax,DWORD PTR [eax]
    27b5:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    27b8:	0c e8                	or     al,0xe8
    27ba:	04 00                	add    al,0x0
    27bc:	00 00                	add    BYTE PTR [eax],al
    27be:	03 0c d9             	add    ecx,DWORD PTR [ecx+ebx*8]
    27c1:	03 00                	add    eax,DWORD PTR [eax]
    27c3:	00 01                	add    BYTE PTR [ecx],al
    27c5:	03 0c e8             	add    ecx,DWORD PTR [eax+ebp*8]
    27c8:	03 00                	add    eax,DWORD PTR [eax]
    27ca:	00 02                	add    BYTE PTR [edx],al
    27cc:	03 0c 73             	add    ecx,DWORD PTR [ebx+esi*2]
    27cf:	03 00                	add    eax,DWORD PTR [eax]
    27d1:	00 03                	add    BYTE PTR [ebx],al
    27d3:	03 0c b6             	add    ecx,DWORD PTR [esi+esi*4]
    27d6:	02 00                	add    al,BYTE PTR [eax]
    27d8:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    27db:	0c 15                	or     al,0x15
    27dd:	03 00                	add    eax,DWORD PTR [eax]
    27df:	00 05 03 0c 64 03    	add    BYTE PTR ds:0x3640c03,al
    27e5:	00 00                	add    BYTE PTR [eax],al
    27e7:	06                   	push   es
    27e8:	03 0c b2             	add    ecx,DWORD PTR [edx+esi*4]
    27eb:	04 00                	add    al,0x0
    27ed:	00 07                	add    BYTE PTR [edi],al
    27ef:	03 0c 01             	add    ecx,DWORD PTR [ecx+eax*1]
    27f2:	04 00                	add    al,0x0
    27f4:	00 00                	add    BYTE PTR [eax],al
    27f6:	09 00                	or     DWORD PTR [eax],eax
    27f8:	0d 46 0b 00 00       	or     eax,0xb46
    27fd:	01 15 8c 22 00 9f    	add    DWORD PTR ds:0x9f00228c,edx
    2803:	60                   	pusha  
    2804:	00 00                	add    BYTE PTR [eax],al
    2806:	00 01                	add    BYTE PTR [ecx],al
    2808:	9c                   	pushf  
    2809:	0e                   	push   cs
    280a:	13 0b                	adc    ecx,DWORD PTR [ebx]
    280c:	00 00                	add    BYTE PTR [eax],al
    280e:	01 1e                	add    DWORD PTR [esi],ebx
    2810:	65 00 00             	add    BYTE PTR gs:[eax],al
    2813:	00 ec                	add    ah,ch
    2815:	22 00                	and    al,BYTE PTR [eax]
    2817:	9f                   	lahf   
    2818:	87 00                	xchg   DWORD PTR [eax],eax
    281a:	00 00                	add    BYTE PTR [eax],al
    281c:	01 9c 80 02 00 00 0f 	add    DWORD PTR [eax+eax*4+0xf000002],ebx
    2823:	58                   	pop    eax
    2824:	07                   	pop    es
    2825:	00 00                	add    BYTE PTR [eax],al
    2827:	01 1e                	add    DWORD PTR [esi],ebx
    2829:	89 00                	mov    DWORD PTR [eax],eax
    282b:	00 00                	add    BYTE PTR [eax],al
    282d:	02 91 00 10 8b 0b    	add    dl,BYTE PTR [ecx+0xb8b1000]
    2833:	00 00                	add    BYTE PTR [eax],al
    2835:	01 22                	add    DWORD PTR [edx],esp
    2837:	65 00 00             	add    BYTE PTR gs:[eax],al
    283a:	00 02                	add    BYTE PTR [edx],al
    283c:	91                   	xchg   ecx,eax
    283d:	74 00                	je     283f <__fmodf2+0x2813>
    283f:	11 06                	adc    DWORD PTR [esi],eax
    2841:	0b 00                	or     eax,DWORD PTR [eax]
    2843:	00 01                	add    BYTE PTR [ecx],al
    2845:	36                   	ss
    2846:	73 23                	jae    286b <__fmodf2+0x283f>
    2848:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    284e:	01 9c b1 02 00 00 0f 	add    DWORD PTR [ecx+esi*4+0xf000002],ebx
    2855:	e3 0b                	jecxz  2862 <__fmodf2+0x2836>
    2857:	00 00                	add    BYTE PTR [eax],al
    2859:	01 36                	add    DWORD PTR [esi],esi
    285b:	30 01                	xor    BYTE PTR [ecx],al
    285d:	00 00                	add    BYTE PTR [eax],al
    285f:	02 91 00 12 6d 70    	add    dl,BYTE PTR [ecx+0x706d1200]
    2865:	00 01                	add    BYTE PTR [ecx],al
    2867:	38 b1 02 00 00 02    	cmp    BYTE PTR [ecx+0x2000002],dh
    286d:	91                   	xchg   ecx,eax
    286e:	6c                   	ins    BYTE PTR es:[edi],dx
    286f:	00 08                	add    BYTE PTR [eax],cl
    2871:	04 17                	add    al,0x17
    2873:	01 00                	add    DWORD PTR [eax],eax
    2875:	00 0e                	add    BYTE PTR [esi],cl
    2877:	f8                   	clc    
    2878:	0b 00                	or     eax,DWORD PTR [eax]
    287a:	00 01                	add    BYTE PTR [ecx],al
    287c:	4e                   	dec    esi
    287d:	b1 02                	mov    cl,0x2
    287f:	00 00                	add    BYTE PTR [eax],al
    2881:	e6 23                	out    0x23,al
    2883:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
    2889:	01 9c ed 02 00 00 0f 	add    DWORD PTR [ebp+ebp*8+0xf000002],ebx
    2890:	58                   	pop    eax
    2891:	07                   	pop    es
    2892:	00 00                	add    BYTE PTR [eax],al
    2894:	01 4e 89             	add    DWORD PTR [esi-0x77],ecx
    2897:	00 00                	add    BYTE PTR [eax],al
    2899:	00 02                	add    BYTE PTR [edx],al
    289b:	91                   	xchg   ecx,eax
    289c:	00 10                	add    BYTE PTR [eax],dl
    289e:	ce                   	into   
    289f:	0b 00                	or     eax,DWORD PTR [eax]
    28a1:	00 01                	add    BYTE PTR [ecx],al
    28a3:	50                   	push   eax
    28a4:	b1 02                	mov    cl,0x2
    28a6:	00 00                	add    BYTE PTR [eax],al
    28a8:	02 91 74 00 11 22    	add    dl,BYTE PTR [ecx+0x22110074]
    28ae:	0c 00                	or     al,0x0
    28b0:	00 01                	add    BYTE PTR [ecx],al
    28b2:	5e                   	pop    esi
    28b3:	6a 24                	push   0x24
    28b5:	00 9f 8b 00 00 00    	add    BYTE PTR [edi+0x8b],bl
    28bb:	01 9c 35 03 00 00 0f 	add    DWORD PTR [ebp+esi*1+0xf000003],ebx
    28c2:	b1 0b                	mov    cl,0xb
    28c4:	00 00                	add    BYTE PTR [eax],al
    28c6:	01 5e b1             	add    DWORD PTR [esi-0x4f],ebx
    28c9:	02 00                	add    al,BYTE PTR [eax]
    28cb:	00 02                	add    BYTE PTR [edx],al
    28cd:	91                   	xchg   ecx,eax
    28ce:	00 10                	add    BYTE PTR [eax],dl
    28d0:	ce                   	into   
    28d1:	0b 00                	or     eax,DWORD PTR [eax]
    28d3:	00 01                	add    BYTE PTR [ecx],al
    28d5:	61                   	popa   
    28d6:	b1 02                	mov    cl,0x2
    28d8:	00 00                	add    BYTE PTR [eax],al
    28da:	02 91 6c 13 ec 0b    	add    dl,BYTE PTR [ecx+0xbec136c]
    28e0:	00 00                	add    BYTE PTR [eax],al
    28e2:	01 67 a9             	add    DWORD PTR [edi-0x57],esp
    28e5:	24 00                	and    al,0x0
    28e7:	9f                   	lahf   
    28e8:	13 80 0b 00 00 01    	adc    eax,DWORD PTR [eax+0x100000b]
    28ee:	6d                   	ins    DWORD PTR es:[edi],dx
    28ef:	cc                   	int3   
    28f0:	24 00                	and    al,0x0
    28f2:	9f                   	lahf   
    28f3:	00 14 0d 03 00 00 01 	add    BYTE PTR [ecx*1+0x1000003],dl
    28fa:	75 30                	jne    292c <__fmodf2+0x2900>
    28fc:	01 00                	add    DWORD PTR [eax],eax
    28fe:	00 f5                	add    ch,dh
    2900:	24 00                	and    al,0x0
    2902:	9f                   	lahf   
    2903:	c0 02 00             	rol    BYTE PTR [edx],0x0
    2906:	00 01                	add    BYTE PTR [ecx],al
    2908:	9c                   	pushf  
    2909:	cc                   	int3   
    290a:	03 00                	add    eax,DWORD PTR [eax]
    290c:	00 0f                	add    BYTE PTR [edi],cl
    290e:	58                   	pop    eax
    290f:	07                   	pop    es
    2910:	00 00                	add    BYTE PTR [eax],al
    2912:	01 75 89             	add    DWORD PTR [ebp-0x77],esi
    2915:	00 00                	add    BYTE PTR [eax],al
    2917:	00 02                	add    BYTE PTR [edx],al
    2919:	91                   	xchg   ecx,eax
    291a:	00 10                	add    BYTE PTR [eax],dl
    291c:	72 05                	jb     2923 <__fmodf2+0x28f7>
    291e:	00 00                	add    BYTE PTR [eax],al
    2920:	01 77 30             	add    DWORD PTR [edi+0x30],esi
    2923:	01 00                	add    DWORD PTR [eax],eax
    2925:	00 02                	add    BYTE PTR [edx],al
    2927:	91                   	xchg   ecx,eax
    2928:	58                   	pop    eax
    2929:	10 9c 0b 00 00 01 79 	adc    BYTE PTR [ebx+ecx*1+0x79010000],bl
    2930:	65 00 00             	add    BYTE PTR gs:[eax],al
    2933:	00 02                	add    BYTE PTR [edx],al
    2935:	91                   	xchg   ecx,eax
    2936:	60                   	pusha  
    2937:	10 6c 0b 00          	adc    BYTE PTR [ebx+ecx*1+0x0],ch
    293b:	00 01                	add    BYTE PTR [ecx],al
    293d:	7a 65                	jp     29a4 <__fmodf2+0x2978>
    293f:	00 00                	add    BYTE PTR [eax],al
    2941:	00 02                	add    BYTE PTR [edx],al
    2943:	91                   	xchg   ecx,eax
    2944:	5c                   	pop    esp
    2945:	10 ce                	adc    dh,cl
    2947:	0b 00                	or     eax,DWORD PTR [eax]
    2949:	00 01                	add    BYTE PTR [ecx],al
    294b:	7b b1                	jnp    28fe <__fmodf2+0x28d2>
    294d:	02 00                	add    al,BYTE PTR [eax]
    294f:	00 02                	add    BYTE PTR [edx],al
    2951:	91                   	xchg   ecx,eax
    2952:	68 10 51 0b 00       	push   0xb5110
    2957:	00 01                	add    BYTE PTR [ecx],al
    2959:	7c 89                	jl     28e4 <__fmodf2+0x28b8>
    295b:	00 00                	add    BYTE PTR [eax],al
    295d:	00 02                	add    BYTE PTR [edx],al
    295f:	91                   	xchg   ecx,eax
    2960:	6c                   	ins    BYTE PTR es:[edi],dx
    2961:	10 d7                	adc    bh,dl
    2963:	0a 00                	or     al,BYTE PTR [eax]
    2965:	00 01                	add    BYTE PTR [ecx],al
    2967:	7d b1                	jge    291a <__fmodf2+0x28ee>
    2969:	02 00                	add    al,BYTE PTR [eax]
    296b:	00 05 03 90 92 00    	add    BYTE PTR ds:0x929003,al
    2971:	9f                   	lahf   
    2972:	15 80 25 00 9f       	adc    eax,0x9f002580
    2977:	11 00                	adc    DWORD PTR [eax],eax
    2979:	00 00                	add    BYTE PTR [eax],al
    297b:	12 70 74             	adc    dh,BYTE PTR [eax+0x74]
    297e:	72 00                	jb     2980 <__fmodf2+0x2954>
    2980:	01 89 30 01 00 00    	add    DWORD PTR [ecx+0x130],ecx
    2986:	02 91 64 00 00 14    	add    dl,BYTE PTR [ecx+0x14000064]
    298c:	4a                   	dec    edx
    298d:	0b 00                	or     eax,DWORD PTR [eax]
    298f:	00 01                	add    BYTE PTR [ecx],al
    2991:	b5 30                	mov    ch,0x30
    2993:	01 00                	add    DWORD PTR [eax],eax
    2995:	00 b5 27 00 9f 20    	add    BYTE PTR [ebp+0x209f0027],dh
    299b:	00 00                	add    BYTE PTR [eax],al
    299d:	00 01                	add    BYTE PTR [ecx],al
    299f:	9c                   	pushf  
    29a0:	f4                   	hlt    
    29a1:	03 00                	add    eax,DWORD PTR [eax]
    29a3:	00 0f                	add    BYTE PTR [edi],cl
    29a5:	58                   	pop    eax
    29a6:	07                   	pop    es
    29a7:	00 00                	add    BYTE PTR [eax],al
    29a9:	01 b5 89 00 00 00    	add    DWORD PTR [ebp+0x89],esi
    29af:	02 91 00 00 14 a3    	add    dl,BYTE PTR [ecx-0x5cec0000]
    29b5:	0b 00                	or     eax,DWORD PTR [eax]
    29b7:	00 01                	add    BYTE PTR [ecx],al
    29b9:	ba 30 01 00 00       	mov    edx,0x130
    29be:	d5 27                	aad    0x27
    29c0:	00 9f 03 01 00 00    	add    BYTE PTR [edi+0x103],bl
    29c6:	01 9c 53 04 00 00 0f 	add    DWORD PTR [ebx+edx*2+0xf000004],ebx
    29cd:	d6                   	(bad)  
    29ce:	0b 00                	or     eax,DWORD PTR [eax]
    29d0:	00 01                	add    BYTE PTR [ecx],al
    29d2:	ba 30 01 00 00       	mov    edx,0x130
    29d7:	02 91 00 0f 79 0b    	add    dl,BYTE PTR [ecx+0xb790f00]
    29dd:	00 00                	add    BYTE PTR [eax],al
    29df:	01 ba 65 00 00 00    	add    DWORD PTR [edx+0x65],edi
    29e5:	02 91 04 10 93 0b    	add    dl,BYTE PTR [ecx+0xb931004]
    29eb:	00 00                	add    BYTE PTR [eax],al
    29ed:	01 c0                	add    eax,eax
    29ef:	65 00 00             	add    BYTE PTR gs:[eax],al
    29f2:	00 02                	add    BYTE PTR [edx],al
    29f4:	91                   	xchg   ecx,eax
    29f5:	6c                   	ins    BYTE PTR es:[edi],dx
    29f6:	12 6d 70             	adc    ch,BYTE PTR [ebp+0x70]
    29f9:	00 01                	add    BYTE PTR [ecx],al
    29fb:	c1                   	(bad)  
    29fc:	b1 02                	mov    cl,0x2
    29fe:	00 00                	add    BYTE PTR [eax],al
    2a00:	02 91 68 10 b9 0b    	add    dl,BYTE PTR [ecx+0xbb91068]
    2a06:	00 00                	add    BYTE PTR [eax],al
    2a08:	01 cd                	add    ebp,ecx
    2a0a:	53                   	push   ebx
    2a0b:	04 00                	add    al,0x0
    2a0d:	00 02                	add    BYTE PTR [edx],al
    2a0f:	91                   	xchg   ecx,eax
    2a10:	64 00 08             	add    BYTE PTR fs:[eax],cl
    2a13:	04 7e                	add    al,0x7e
    2a15:	00 00                	add    BYTE PTR [eax],al
    2a17:	00 14 12             	add    BYTE PTR [edx+edx*1],dl
    2a1a:	0c 00                	or     al,0x0
    2a1c:	00 01                	add    BYTE PTR [ecx],al
    2a1e:	db 30                	(bad)  [eax]
    2a20:	01 00                	add    DWORD PTR [eax],eax
    2a22:	00 d8                	add    al,bl
    2a24:	28 00                	sub    BYTE PTR [eax],al
    2a26:	9f                   	lahf   
    2a27:	23 00                	and    eax,DWORD PTR [eax]
    2a29:	00 00                	add    BYTE PTR [eax],al
    2a2b:	01 9c 8f 04 00 00 0f 	add    DWORD PTR [edi+ecx*4+0xf000004],ebx
    2a32:	d6                   	(bad)  
    2a33:	0b 00                	or     eax,DWORD PTR [eax]
    2a35:	00 01                	add    BYTE PTR [ecx],al
    2a37:	db 30                	(bad)  [eax]
    2a39:	01 00                	add    DWORD PTR [eax],eax
    2a3b:	00 02                	add    BYTE PTR [edx],al
    2a3d:	91                   	xchg   ecx,eax
    2a3e:	00 0f                	add    BYTE PTR [edi],cl
    2a40:	79 0b                	jns    2a4d <__fmodf2+0x2a21>
    2a42:	00 00                	add    BYTE PTR [eax],al
    2a44:	01 db                	add    ebx,ebx
    2a46:	65 00 00             	add    BYTE PTR gs:[eax],al
    2a49:	00 02                	add    BYTE PTR [edx],al
    2a4b:	91                   	xchg   ecx,eax
    2a4c:	04 00                	add    al,0x0
    2a4e:	11 de                	adc    esi,ebx
    2a50:	0b 00                	or     eax,DWORD PTR [eax]
    2a52:	00 01                	add    BYTE PTR [ecx],al
    2a54:	e0 fb                	loopne 2a51 <__fmodf2+0x2a25>
    2a56:	28 00                	sub    BYTE PTR [eax],al
    2a58:	9f                   	lahf   
    2a59:	21 00                	and    DWORD PTR [eax],eax
    2a5b:	00 00                	add    BYTE PTR [eax],al
    2a5d:	01 9c b3 04 00 00 0f 	add    DWORD PTR [ebx+esi*4+0xf000004],ebx
    2a64:	e3 0b                	jecxz  2a71 <__fmodf2+0x2a45>
    2a66:	00 00                	add    BYTE PTR [eax],al
    2a68:	01 e0                	add    eax,esp
    2a6a:	30 01                	xor    BYTE PTR [ecx],al
    2a6c:	00 00                	add    BYTE PTR [eax],al
    2a6e:	02 91 00 00 0d 5d    	add    dl,BYTE PTR [ecx+0x5d0d0000]
    2a74:	0b 00                	or     eax,DWORD PTR [eax]
    2a76:	00 01                	add    BYTE PTR [ecx],al
    2a78:	e5 1c                	in     eax,0x1c
    2a7a:	29 00                	sub    DWORD PTR [eax],eax
    2a7c:	9f                   	lahf   
    2a7d:	32 00                	xor    al,BYTE PTR [eax]
    2a7f:	00 00                	add    BYTE PTR [eax],al
    2a81:	01 9c 16 78 00 00 00 	add    DWORD PTR [esi+edx*1+0x78],ebx
    2a88:	05 33 d5 04 00       	add    eax,0x4d533
    2a8d:	00 05 03 40 92 00    	add    BYTE PTR ds:0x924003,al
    2a93:	9f                   	lahf   
    2a94:	08 04 32             	or     BYTE PTR [edx+esi*1],al
    2a97:	01 00                	add    DWORD PTR [eax],eax
    2a99:	00 16                	add    BYTE PTR [esi],dl
    2a9b:	fd                   	std    
    2a9c:	0a 00                	or     al,BYTE PTR [eax]
    2a9e:	00 01                	add    BYTE PTR [ecx],al
    2aa0:	11 65 00             	adc    DWORD PTR [ebp+0x0],esp
    2aa3:	00 00                	add    BYTE PTR [eax],al
    2aa5:	05 03 84 92 00       	add    eax,0x928403
    2aaa:	9f                   	lahf   
    2aab:	16                   	push   ss
    2aac:	e5 0a                	in     eax,0xa
    2aae:	00 00                	add    BYTE PTR [eax],al
    2ab0:	01 12                	add    DWORD PTR [edx],edx
    2ab2:	65 00 00             	add    BYTE PTR gs:[eax],al
    2ab5:	00 05 03 88 92 00    	add    BYTE PTR ds:0x928803,al
    2abb:	9f                   	lahf   
    2abc:	16                   	push   ss
    2abd:	1a 0c 00             	sbb    cl,BYTE PTR [eax+eax*1]
    2ac0:	00 01                	add    BYTE PTR [ecx],al
    2ac2:	13 65 00             	adc    esp,DWORD PTR [ebp+0x0]
    2ac5:	00 00                	add    BYTE PTR [eax],al
    2ac7:	05 03 8c 92 00       	add    eax,0x928c03
    2acc:	9f                   	lahf   
    2acd:	00 e8                	add    al,ch
    2acf:	01 00                	add    DWORD PTR [eax],eax
    2ad1:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2ad4:	47                   	inc    edi
    2ad5:	0b 00                	or     eax,DWORD PTR [eax]
    2ad7:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2ada:	c3                   	ret    
    2adb:	00 00                	add    BYTE PTR [eax],al
    2add:	00 0c 48             	add    BYTE PTR [eax+ecx*2],cl
    2ae0:	0c 00                	or     al,0x0
    2ae2:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    2ae5:	00 00                	add    BYTE PTR [eax],al
    2ae7:	50                   	push   eax
    2ae8:	29 00                	sub    DWORD PTR [eax],eax
    2aea:	9f                   	lahf   
    2aeb:	bb 01 00 00 cf       	mov    ebx,0xcf000001
    2af0:	0c 00                	or     al,0x0
    2af2:	00 02                	add    BYTE PTR [edx],al
    2af4:	01 08                	add    DWORD PTR [eax],ecx
    2af6:	3f                   	aas    
    2af7:	00 00                	add    BYTE PTR [eax],al
    2af9:	00 02                	add    BYTE PTR [edx],al
    2afb:	02 07                	add    al,BYTE PTR [edi]
    2afd:	0e                   	push   cs
    2afe:	00 00                	add    BYTE PTR [eax],al
    2b00:	00 02                	add    BYTE PTR [edx],al
    2b02:	04 07                	add    al,0x7
    2b04:	32 00                	xor    al,BYTE PTR [eax]
    2b06:	00 00                	add    BYTE PTR [eax],al
    2b08:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2b0b:	2d 00 00 00 02       	sub    eax,0x2000000
    2b10:	01 06                	add    DWORD PTR [esi],eax
    2b12:	41                   	inc    ecx
    2b13:	00 00                	add    BYTE PTR [eax],al
    2b15:	00 02                	add    BYTE PTR [edx],al
    2b17:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    2b1d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2b24:	02 08                	add    cl,BYTE PTR [eax]
    2b26:	05 00 00 00 00       	add    eax,0x0
    2b2b:	02 08                	add    cl,BYTE PTR [eax]
    2b2d:	07                   	pop    es
    2b2e:	28 00                	sub    BYTE PTR [eax],al
    2b30:	00 00                	add    BYTE PTR [eax],al
    2b32:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2b39:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2b3c:	2a 01                	sub    al,BYTE PTR [ecx]
    2b3e:	00 00                	add    BYTE PTR [eax],al
    2b40:	04 04                	add    al,0x4
    2b42:	05 04 7a 00 00       	add    eax,0x7a04
    2b47:	00 02                	add    BYTE PTR [edx],al
    2b49:	01 06                	add    DWORD PTR [esi],eax
    2b4b:	48                   	dec    eax
    2b4c:	00 00                	add    BYTE PTR [eax],al
    2b4e:	00 06                	add    BYTE PTR [esi],al
    2b50:	45                   	inc    ebp
    2b51:	02 00                	add    al,BYTE PTR [eax]
    2b53:	00 02                	add    BYTE PTR [edx],al
    2b55:	34 33                	xor    al,0x33
    2b57:	00 00                	add    BYTE PTR [eax],al
    2b59:	00 05 04 92 00 00    	add    BYTE PTR ds:0x9204,al
    2b5f:	00 07                	add    BYTE PTR [edi],al
    2b61:	7a 00                	jp     2b63 <__fmodf2+0x2b37>
    2b63:	00 00                	add    BYTE PTR [eax],al
    2b65:	06                   	push   es
    2b66:	91                   	xchg   ecx,eax
    2b67:	02 00                	add    al,BYTE PTR [eax]
    2b69:	00 03                	add    BYTE PTR [ebx],al
    2b6b:	d8 33                	fdiv   DWORD PTR [ebx]
    2b6d:	00 00                	add    BYTE PTR [eax],al
    2b6f:	00 02                	add    BYTE PTR [edx],al
    2b71:	0c 04                	or     al,0x4
    2b73:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2b74:	00 00                	add    BYTE PTR [eax],al
    2b76:	00 08                	add    BYTE PTR [eax],cl
    2b78:	34 0c                	xor    al,0xc
    2b7a:	00 00                	add    BYTE PTR [eax],al
    2b7c:	01 0b                	add    DWORD PTR [ebx],ecx
    2b7e:	72 00                	jb     2b80 <__fmodf2+0x2b54>
    2b80:	00 00                	add    BYTE PTR [eax],al
    2b82:	50                   	push   eax
    2b83:	29 00                	sub    DWORD PTR [eax],eax
    2b85:	9f                   	lahf   
    2b86:	9b                   	fwait
    2b87:	01 00                	add    DWORD PTR [eax],eax
    2b89:	00 01                	add    BYTE PTR [ecx],al
    2b8b:	9c                   	pushf  
    2b8c:	73 01                	jae    2b8f <__fmodf2+0x2b63>
    2b8e:	00 00                	add    BYTE PTR [eax],al
    2b90:	09 3c 0c             	or     DWORD PTR [esp+ecx*1],edi
    2b93:	00 00                	add    BYTE PTR [eax],al
    2b95:	01 0b                	add    DWORD PTR [ebx],ecx
    2b97:	72 00                	jb     2b99 <__fmodf2+0x2b6d>
    2b99:	00 00                	add    BYTE PTR [eax],al
    2b9b:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    2ba1:	63 00                	arpl   WORD PTR [eax],ax
    2ba3:	01 0b                	add    DWORD PTR [ebx],ecx
    2ba5:	73 01                	jae    2ba8 <__fmodf2+0x2b7c>
    2ba7:	00 00                	add    BYTE PTR [eax],al
    2ba9:	02 91 04 0a 6e 00    	add    dl,BYTE PTR [ecx+0x6e0a04]
    2baf:	01 0b                	add    DWORD PTR [ebx],ecx
    2bb1:	97                   	xchg   edi,eax
    2bb2:	00 00                	add    BYTE PTR [eax],al
    2bb4:	00 02                	add    BYTE PTR [edx],al
    2bb6:	91                   	xchg   ecx,eax
    2bb7:	08 0b                	or     BYTE PTR [ebx],cl
    2bb9:	64                   	fs
    2bba:	77 00                	ja     2bbc <__fmodf2+0x2b90>
    2bbc:	01 0d 7a 01 00 00    	add    DWORD PTR ds:0x17a,ecx
    2bc2:	02 91 5e 0b 64 64    	add    dl,BYTE PTR [ecx+0x64640b5e]
    2bc8:	00 01                	add    BYTE PTR [ecx],al
    2bca:	0d 7a 01 00 00       	or     eax,0x17a
    2bcf:	02 91 5f 0c 82 29    	add    dl,BYTE PTR [ecx+0x29820c5f]
    2bd5:	00 9f 7d 00 00 00    	add    BYTE PTR [edi+0x7d],bl
    2bdb:	2a 01                	sub    al,BYTE PTR [ecx]
    2bdd:	00 00                	add    BYTE PTR [eax],al
    2bdf:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    2be2:	01 14 81             	add    DWORD PTR [ecx+eax*4],edx
    2be5:	01 00                	add    DWORD PTR [eax],eax
    2be7:	00 02                	add    BYTE PTR [edx],al
    2be9:	91                   	xchg   ecx,eax
    2bea:	74 0b                	je     2bf7 <__fmodf2+0x2bcb>
    2bec:	74 00                	je     2bee <__fmodf2+0x2bc2>
    2bee:	01 15 8c 01 00 00    	add    DWORD PTR ds:0x18c,edx
    2bf4:	02 91 70 00 0c 05    	add    dl,BYTE PTR [ecx+0x50c0070]
    2bfa:	2a 00                	sub    al,BYTE PTR [eax]
    2bfc:	9f                   	lahf   
    2bfd:	79 00                	jns    2bff <__fmodf2+0x2bd3>
    2bff:	00 00                	add    BYTE PTR [eax],al
    2c01:	50                   	push   eax
    2c02:	01 00                	add    DWORD PTR [eax],eax
    2c04:	00 0b                	add    BYTE PTR [ebx],cl
    2c06:	66                   	data16
    2c07:	00 01                	add    BYTE PTR [ecx],al
    2c09:	24 81                	and    al,0x81
    2c0b:	01 00                	add    DWORD PTR [eax],eax
    2c0d:	00 02                	add    BYTE PTR [edx],al
    2c0f:	91                   	xchg   ecx,eax
    2c10:	6c                   	ins    BYTE PTR es:[edi],dx
    2c11:	0b 74 00 01          	or     esi,DWORD PTR [eax+eax*1+0x1]
    2c15:	25 8c 01 00 00       	and    eax,0x18c
    2c1a:	02 91 68 00 0d 7e    	add    dl,BYTE PTR [ecx+0x7e0d0068]
    2c20:	2a 00                	sub    al,BYTE PTR [eax]
    2c22:	9f                   	lahf   
    2c23:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    2c26:	00 0b                	add    BYTE PTR [ebx],cl
    2c28:	66                   	data16
    2c29:	00 01                	add    BYTE PTR [ecx],al
    2c2b:	33 8c 00 00 00 02 91 	xor    ecx,DWORD PTR [eax+eax*1-0x6efe0000]
    2c32:	64 0b 74 00 01       	or     esi,DWORD PTR fs:[eax+eax*1+0x1]
    2c37:	34 74                	xor    al,0x74
    2c39:	00 00                	add    BYTE PTR [eax],al
    2c3b:	00 02                	add    BYTE PTR [edx],al
    2c3d:	91                   	xchg   ecx,eax
    2c3e:	60                   	pusha  
    2c3f:	00 00                	add    BYTE PTR [eax],al
    2c41:	05 04 79 01 00       	add    eax,0x17904
    2c46:	00 0e                	add    BYTE PTR [esi],cl
    2c48:	02 01                	add    al,BYTE PTR [ecx]
    2c4a:	02 e8                	add    ch,al
    2c4c:	06                   	push   es
    2c4d:	00 00                	add    BYTE PTR [eax],al
    2c4f:	05 04 87 01 00       	add    eax,0x18704
    2c54:	00 07                	add    BYTE PTR [edi],al
    2c56:	81 00 00 00 05 04    	add    DWORD PTR [eax],0x4050000
    2c5c:	81 00 00 00 0f 41    	add    DWORD PTR [eax],0x410f0000
    2c62:	0c 00                	or     al,0x0
    2c64:	00 01                	add    BYTE PTR [ecx],al
    2c66:	42                   	inc    edx
    2c67:	72 00                	jb     2c69 <__fmodf2+0x2c3d>
    2c69:	00 00                	add    BYTE PTR [eax],al
    2c6b:	eb 2a                	jmp    2c97 <__fmodf2+0x2c6b>
    2c6d:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    2c73:	01 9c d4 01 00 00 09 	add    DWORD PTR [esp+edx*8+0x9000001],ebx
    2c7a:	3c 0c                	cmp    al,0xc
    2c7c:	00 00                	add    BYTE PTR [eax],al
    2c7e:	01 42 72             	add    DWORD PTR [edx+0x72],eax
    2c81:	00 00                	add    BYTE PTR [eax],al
    2c83:	00 02                	add    BYTE PTR [edx],al
    2c85:	91                   	xchg   ecx,eax
    2c86:	00 0a                	add    BYTE PTR [edx],cl
    2c88:	73 72                	jae    2cfc <__fmodf2+0x2cd0>
    2c8a:	63 00                	arpl   WORD PTR [eax],ax
    2c8c:	01 42 73             	add    DWORD PTR [edx+0x73],eax
    2c8f:	01 00                	add    DWORD PTR [eax],eax
    2c91:	00 02                	add    BYTE PTR [edx],al
    2c93:	91                   	xchg   ecx,eax
    2c94:	04 0a                	add    al,0xa
    2c96:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2c97:	00 01                	add    BYTE PTR [ecx],al
    2c99:	42                   	inc    edx
    2c9a:	97                   	xchg   edi,eax
    2c9b:	00 00                	add    BYTE PTR [eax],al
    2c9d:	00 02                	add    BYTE PTR [edx],al
    2c9f:	91                   	xchg   ecx,eax
    2ca0:	08 00                	or     BYTE PTR [eax],al
    2ca2:	10 78 00             	adc    BYTE PTR [eax+0x0],bh
    2ca5:	00 00                	add    BYTE PTR [eax],al
    2ca7:	04 33                	add    al,0x33
    2ca9:	e5 01                	in     eax,0x1
    2cab:	00 00                	add    BYTE PTR [eax],al
    2cad:	05 03 40 92 00       	add    eax,0x924003
    2cb2:	9f                   	lahf   
    2cb3:	05 04 74 00 00       	add    eax,0x7404
    2cb8:	00 00                	add    BYTE PTR [eax],al
    2cba:	a0 01 00 00 04       	mov    al,ds:0x4000001
    2cbf:	00 24 0c             	add    BYTE PTR [esp+ecx*1],ah
    2cc2:	00 00                	add    BYTE PTR [eax],al
    2cc4:	04 01                	add    al,0x1
    2cc6:	c3                   	ret    
    2cc7:	00 00                	add    BYTE PTR [eax],al
    2cc9:	00 0c 55 0c 00 00 4d 	add    BYTE PTR [edx*2+0x4d00000c],cl
    2cd0:	00 00                	add    BYTE PTR [eax],al
    2cd2:	00 0c 2b             	add    BYTE PTR [ebx+ebp*1],cl
    2cd5:	00 9f e7 00 00 00    	add    BYTE PTR [edi+0xe7],bl
    2cdb:	aa                   	stos   BYTE PTR es:[edi],al
    2cdc:	0d 00 00 02 01       	or     eax,0x1020000
    2ce1:	08 3f                	or     BYTE PTR [edi],bh
    2ce3:	00 00                	add    BYTE PTR [eax],al
    2ce5:	00 02                	add    BYTE PTR [edx],al
    2ce7:	02 07                	add    al,BYTE PTR [edi]
    2ce9:	0e                   	push   cs
    2cea:	00 00                	add    BYTE PTR [eax],al
    2cec:	00 02                	add    BYTE PTR [edx],al
    2cee:	04 07                	add    al,0x7
    2cf0:	32 00                	xor    al,BYTE PTR [eax]
    2cf2:	00 00                	add    BYTE PTR [eax],al
    2cf4:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2cf7:	2d 00 00 00 02       	sub    eax,0x2000000
    2cfc:	01 06                	add    DWORD PTR [esi],eax
    2cfe:	41                   	inc    ecx
    2cff:	00 00                	add    BYTE PTR [eax],al
    2d01:	00 02                	add    BYTE PTR [edx],al
    2d03:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    2d09:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2d10:	02 08                	add    cl,BYTE PTR [eax]
    2d12:	05 00 00 00 00       	add    eax,0x0
    2d17:	02 08                	add    cl,BYTE PTR [eax]
    2d19:	07                   	pop    es
    2d1a:	28 00                	sub    BYTE PTR [eax],al
    2d1c:	00 00                	add    BYTE PTR [eax],al
    2d1e:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2d25:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2d28:	2a 01                	sub    al,BYTE PTR [ecx]
    2d2a:	00 00                	add    BYTE PTR [eax],al
    2d2c:	04 04                	add    al,0x4
    2d2e:	05 04 7a 00 00       	add    eax,0x7a04
    2d33:	00 02                	add    BYTE PTR [edx],al
    2d35:	01 06                	add    DWORD PTR [esi],eax
    2d37:	48                   	dec    eax
    2d38:	00 00                	add    BYTE PTR [eax],al
    2d3a:	00 06                	add    BYTE PTR [esi],al
    2d3c:	4d                   	dec    ebp
    2d3d:	07                   	pop    es
    2d3e:	00 00                	add    BYTE PTR [eax],al
    2d40:	02 2e                	add    ch,BYTE PTR [esi]
    2d42:	25 00 00 00 06       	and    eax,0x6000000
    2d47:	07                   	pop    es
    2d48:	06                   	push   es
    2d49:	00 00                	add    BYTE PTR [eax],al
    2d4b:	02 31                	add    dh,BYTE PTR [ecx]
    2d4d:	2c 00                	sub    al,0x0
    2d4f:	00 00                	add    BYTE PTR [eax],al
    2d51:	06                   	push   es
    2d52:	45                   	inc    ebp
    2d53:	02 00                	add    al,BYTE PTR [eax]
    2d55:	00 02                	add    BYTE PTR [edx],al
    2d57:	34 33                	xor    al,0x33
    2d59:	00 00                	add    BYTE PTR [eax],al
    2d5b:	00 06                	add    BYTE PTR [esi],al
    2d5d:	91                   	xchg   ecx,eax
    2d5e:	02 00                	add    al,BYTE PTR [eax]
    2d60:	00 03                	add    BYTE PTR [ebx],al
    2d62:	d8 33                	fdiv   DWORD PTR [ebx]
    2d64:	00 00                	add    BYTE PTR [eax],al
    2d66:	00 02                	add    BYTE PTR [edx],al
    2d68:	0c 04                	or     al,0x4
    2d6a:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2d6b:	00 00                	add    BYTE PTR [eax],al
    2d6d:	00 07                	add    BYTE PTR [edi],al
    2d6f:	69 0c 00 00 01 08 72 	imul   ecx,DWORD PTR [eax+eax*1],0x72080100
    2d76:	00 00                	add    BYTE PTR [eax],al
    2d78:	00 0c 2b             	add    BYTE PTR [ebx+ebp*1],cl
    2d7b:	00 9f c7 00 00 00    	add    BYTE PTR [edi+0xc7],bl
    2d81:	01 9c 37 01 00 00 08 	add    DWORD PTR [edi+esi*1+0x8000001],ebx
    2d88:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    2d8b:	01 08                	add    DWORD PTR [eax],ecx
    2d8d:	72 00                	jb     2d8f <__fmodf2+0x2d63>
    2d8f:	00 00                	add    BYTE PTR [eax],al
    2d91:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    2d97:	6c                   	ins    BYTE PTR es:[edi],dx
    2d98:	00 01                	add    BYTE PTR [ecx],al
    2d9a:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
    2d9d:	00 00                	add    BYTE PTR [eax],al
    2d9f:	02 91 04 08 6c 65    	add    dl,BYTE PTR [ecx+0x656c0804]
    2da5:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2da6:	00 01                	add    BYTE PTR [ecx],al
    2da8:	08 a2 00 00 00 02    	or     BYTE PTR [edx+0x2000000],ah
    2dae:	91                   	xchg   ecx,eax
    2daf:	08 09                	or     BYTE PTR [ecx],cl
    2db1:	64 00 01             	add    BYTE PTR fs:[ecx],al
    2db4:	0a 37                	or     dh,BYTE PTR [edi]
    2db6:	01 00                	add    DWORD PTR [eax],eax
    2db8:	00 02                	add    BYTE PTR [edx],al
    2dba:	91                   	xchg   ecx,eax
    2dbb:	74 09                	je     2dc6 <__fmodf2+0x2d9a>
    2dbd:	65 00 01             	add    BYTE PTR gs:[ecx],al
    2dc0:	0b 3d 01 00 00 02    	or     edi,DWORD PTR ds:0x2000001
    2dc6:	91                   	xchg   ecx,eax
    2dc7:	70 0a                	jo     2dd3 <__fmodf2+0x2da7>
    2dc9:	71 0c                	jno    2dd7 <__fmodf2+0x2dab>
    2dcb:	00 00                	add    BYTE PTR [eax],al
    2dcd:	01 0c 8c             	add    DWORD PTR [esp+ecx*4],ecx
    2dd0:	00 00                	add    BYTE PTR [eax],al
    2dd2:	00 02                	add    BYTE PTR [edx],al
    2dd4:	91                   	xchg   ecx,eax
    2dd5:	6a 09                	push   0x9
    2dd7:	66                   	data16
    2dd8:	00 01                	add    BYTE PTR [ecx],al
    2dda:	0d 43 01 00 00       	or     eax,0x143
    2ddf:	02 91 6c 0a 76 0c    	add    dl,BYTE PTR [ecx+0xc760a6c]
    2de5:	00 00                	add    BYTE PTR [eax],al
    2de7:	01 0e                	add    DWORD PTR [esi],ecx
    2de9:	97                   	xchg   edi,eax
    2dea:	00 00                	add    BYTE PTR [eax],al
    2dec:	00 02                	add    BYTE PTR [edx],al
    2dee:	91                   	xchg   ecx,eax
    2def:	64 00 05 04 81 00 00 	add    BYTE PTR fs:0x8104,al
    2df6:	00 05 04 8c 00 00    	add    BYTE PTR ds:0x8c04,al
    2dfc:	00 05 04 97 00 00    	add    BYTE PTR ds:0x9704,al
    2e02:	00 0b                	add    BYTE PTR [ebx],cl
    2e04:	62 0c 00             	bound  ecx,QWORD PTR [eax+eax*1]
    2e07:	00 01                	add    BYTE PTR [ecx],al
    2e09:	1f                   	pop    ds
    2e0a:	72 00                	jb     2e0c <__fmodf2+0x2de0>
    2e0c:	00 00                	add    BYTE PTR [eax],al
    2e0e:	d3 2b                	shr    DWORD PTR [ebx],cl
    2e10:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    2e16:	01 9c 8c 01 00 00 08 	add    DWORD PTR [esp+ecx*4+0x8000001],ebx
    2e1d:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    2e20:	01 1f                	add    DWORD PTR [edi],ebx
    2e22:	72 00                	jb     2e24 <__fmodf2+0x2df8>
    2e24:	00 00                	add    BYTE PTR [eax],al
    2e26:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    2e2c:	6c                   	ins    BYTE PTR es:[edi],dx
    2e2d:	00 01                	add    BYTE PTR [ecx],al
    2e2f:	1f                   	pop    ds
    2e30:	4f                   	dec    edi
    2e31:	00 00                	add    BYTE PTR [eax],al
    2e33:	00 02                	add    BYTE PTR [edx],al
    2e35:	91                   	xchg   ecx,eax
    2e36:	04 08                	add    al,0x8
    2e38:	6c                   	ins    BYTE PTR es:[edi],dx
    2e39:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    2e3b:	00 01                	add    BYTE PTR [ecx],al
    2e3d:	1f                   	pop    ds
    2e3e:	a2 00 00 00 02       	mov    ds:0x2000000,al
    2e43:	91                   	xchg   ecx,eax
    2e44:	08 00                	or     BYTE PTR [eax],al
    2e46:	0c 78                	or     al,0x78
    2e48:	00 00                	add    BYTE PTR [eax],al
    2e4a:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    2e4d:	9d                   	popf   
    2e4e:	01 00                	add    DWORD PTR [eax],eax
    2e50:	00 05 03 40 92 00    	add    BYTE PTR ds:0x924003,al
    2e56:	9f                   	lahf   
    2e57:	05 04 74 00 00       	add    eax,0x7404
    2e5c:	00 00                	add    BYTE PTR [eax],al
    2e5e:	54                   	push   esp
    2e5f:	00 00                	add    BYTE PTR [eax],al
    2e61:	00 02                	add    BYTE PTR [edx],al
    2e63:	00 e1                	add    cl,ah
    2e65:	0c 00                	or     al,0x0
    2e67:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2e6a:	68 0e 00 00 00       	push   0xe
    2e6f:	00 00                	add    BYTE PTR [eax],al
    2e71:	00 35 00 00 00 73    	add    BYTE PTR ds:0x73000000,dh
    2e77:	72 63                	jb     2edc <__fmodf2+0x2eb0>
    2e79:	2f                   	das    
    2e7a:	6d                   	ins    DWORD PTR es:[edi],dx
    2e7b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2e7c:	64                   	fs
    2e7d:	66                   	data16
    2e7e:	2e                   	cs
    2e7f:	61                   	popa   
    2e80:	73 6d                	jae    2eef <__fmodf2+0x2ec3>
    2e82:	00 2f                	add    BYTE PTR [edi],ch
    2e84:	68 6f 6d 65 2f       	push   0x2f656d6f
    2e89:	79 6f                	jns    2efa <__fmodf2+0x2ece>
    2e8b:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
    2e92:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2e93:	73 2f                	jae    2ec4 <__fmodf2+0x2e98>
    2e95:	61                   	popa   
    2e96:	70 72                	jo     2f0a <__fmodf2+0x2ede>
    2e98:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2e99:	6a 2f                	push   0x2f
    2e9b:	6c                   	ins    BYTE PTR es:[edi],dx
    2e9c:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    2ea3:	4f                   	dec    edi
    2ea4:	53                   	push   ebx
    2ea5:	00 47 4e             	add    BYTE PTR [edi+0x4e],al
    2ea8:	55                   	push   ebp
    2ea9:	20 41 53             	and    BYTE PTR [ecx+0x53],al
    2eac:	20 32                	and    BYTE PTR [edx],dh
    2eae:	2e 32 33             	xor    dh,BYTE PTR cs:[ebx]
    2eb1:	2e 31 00             	xor    DWORD PTR cs:[eax],eax
    2eb4:	01 80 18 02 00 00    	add    DWORD PTR [eax+0x218],eax
    2eba:	04 00                	add    al,0x0
    2ebc:	f5                   	cmc    
    2ebd:	0c 00                	or     al,0x0
    2ebf:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2ec2:	c3                   	ret    
    2ec3:	00 00                	add    BYTE PTR [eax],al
    2ec5:	00 0c 91             	add    BYTE PTR [ecx+edx*4],cl
    2ec8:	0c 00                	or     al,0x0
    2eca:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    2ecd:	00 00                	add    BYTE PTR [eax],al
    2ecf:	f4                   	hlt    
    2ed0:	2b 00                	sub    eax,DWORD PTR [eax]
    2ed2:	9f                   	lahf   
    2ed3:	57                   	push   edi
    2ed4:	00 00                	add    BYTE PTR [eax],al
    2ed6:	00 bd 0e 00 00 02    	add    BYTE PTR [ebp+0x200000e],bh
    2edc:	01 08                	add    DWORD PTR [eax],ecx
    2ede:	3f                   	aas    
    2edf:	00 00                	add    BYTE PTR [eax],al
    2ee1:	00 02                	add    BYTE PTR [edx],al
    2ee3:	02 07                	add    al,BYTE PTR [edi]
    2ee5:	0e                   	push   cs
    2ee6:	00 00                	add    BYTE PTR [eax],al
    2ee8:	00 02                	add    BYTE PTR [edx],al
    2eea:	04 07                	add    al,0x7
    2eec:	32 00                	xor    al,BYTE PTR [eax]
    2eee:	00 00                	add    BYTE PTR [eax],al
    2ef0:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2ef3:	2d 00 00 00 02       	sub    eax,0x2000000
    2ef8:	01 06                	add    DWORD PTR [esi],eax
    2efa:	41                   	inc    ecx
    2efb:	00 00                	add    BYTE PTR [eax],al
    2efd:	00 02                	add    BYTE PTR [edx],al
    2eff:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    2f05:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2f0c:	02 08                	add    cl,BYTE PTR [eax]
    2f0e:	05 00 00 00 00       	add    eax,0x0
    2f13:	02 08                	add    cl,BYTE PTR [eax]
    2f15:	07                   	pop    es
    2f16:	28 00                	sub    BYTE PTR [eax],al
    2f18:	00 00                	add    BYTE PTR [eax],al
    2f1a:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2f21:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2f24:	2a 01                	sub    al,BYTE PTR [ecx]
    2f26:	00 00                	add    BYTE PTR [eax],al
    2f28:	04 04                	add    al,0x4
    2f2a:	78 00                	js     2f2c <__fmodf2+0x2f00>
    2f2c:	00 00                	add    BYTE PTR [eax],al
    2f2e:	02 01                	add    al,BYTE PTR [ecx]
    2f30:	06                   	push   es
    2f31:	48                   	dec    eax
    2f32:	00 00                	add    BYTE PTR [eax],al
    2f34:	00 05 01 02 00 00    	add    BYTE PTR ds:0x201,al
    2f3a:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
    2f3d:	00 00                	add    BYTE PTR [eax],al
    2f3f:	00 02                	add    BYTE PTR [edx],al
    2f41:	0c 04                	or     al,0x4
    2f43:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2f44:	00 00                	add    BYTE PTR [eax],al
    2f46:	00 06                	add    BYTE PTR [esi],al
    2f48:	a0 03 00 00 04       	mov    al,ds:0x4000003
    2f4d:	33 00                	xor    eax,DWORD PTR [eax]
    2f4f:	00 00                	add    BYTE PTR [eax],al
    2f51:	03 15 92 01 00 00    	add    edx,DWORD PTR ds:0x192
    2f57:	07                   	pop    es
    2f58:	51                   	push   ecx
    2f59:	04 00                	add    al,0x0
    2f5b:	00 00                	add    BYTE PTR [eax],al
    2f5d:	07                   	pop    es
    2f5e:	96                   	xchg   esi,eax
    2f5f:	04 00                	add    al,0x0
    2f61:	00 01                	add    BYTE PTR [ecx],al
    2f63:	07                   	pop    es
    2f64:	84 02                	test   BYTE PTR [edx],al
    2f66:	00 00                	add    BYTE PTR [eax],al
    2f68:	02 07                	add    al,BYTE PTR [edi]
    2f6a:	83 03 00             	add    DWORD PTR [ebx],0x0
    2f6d:	00 03                	add    BYTE PTR [ebx],al
    2f6f:	07                   	pop    es
    2f70:	6a 02                	push   0x2
    2f72:	00 00                	add    BYTE PTR [eax],al
    2f74:	04 07                	add    al,0x7
    2f76:	da 04 00             	fiadd  DWORD PTR [eax+eax*1]
    2f79:	00 05 07 78 04 00    	add    BYTE PTR ds:0x47807,al
    2f7f:	00 0a                	add    BYTE PTR [edx],cl
    2f81:	07                   	pop    es
    2f82:	c4 03                	les    eax,FWORD PTR [ebx]
    2f84:	00 00                	add    BYTE PTR [eax],al
    2f86:	0b 07                	or     eax,DWORD PTR [edi]
    2f88:	2a 04 00             	sub    al,BYTE PTR [eax+eax*1]
    2f8b:	00 0c 07             	add    BYTE PTR [edi+eax*1],cl
    2f8e:	91                   	xchg   ecx,eax
    2f8f:	03 00                	add    eax,DWORD PTR [eax]
    2f91:	00 0d 07 aa 03 00    	add    BYTE PTR ds:0x3aa07,cl
    2f97:	00 0e                	add    BYTE PTR [esi],cl
    2f99:	07                   	pop    es
    2f9a:	77 02                	ja     2f9e <__fmodf2+0x2f72>
    2f9c:	00 00                	add    BYTE PTR [eax],al
    2f9e:	0f 07                	sysret 
    2fa0:	f4                   	hlt    
    2fa1:	03 00                	add    eax,DWORD PTR [eax]
    2fa3:	00 10                	add    BYTE PTR [eax],dl
    2fa5:	07                   	pop    es
    2fa6:	27                   	daa    
    2fa7:	05 00 00 11 07       	add    eax,0x7110000
    2fac:	05 05 00 00 4f       	add    eax,0x4f000005
    2fb1:	07                   	pop    es
    2fb2:	cb                   	retf   
    2fb3:	04 00                	add    al,0x0
    2fb5:	00 50 07             	add    BYTE PTR [eax+0x7],dl
    2fb8:	44                   	inc    esp
    2fb9:	04 00                	add    al,0x0
    2fbb:	00 59 07             	add    BYTE PTR [ecx+0x7],bl
    2fbe:	14 05                	adc    al,0x5
    2fc0:	00 00                	add    BYTE PTR [eax],al
    2fc2:	61                   	popa   
    2fc3:	07                   	pop    es
    2fc4:	49                   	dec    ecx
    2fc5:	03 00                	add    eax,DWORD PTR [eax]
    2fc7:	00 97 08 61 04 00    	add    BYTE PTR [edi+0x46108],dl
    2fcd:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    2fd0:	08 37                	or     BYTE PTR [edi],dh
    2fd2:	04 00                	add    al,0x0
    2fd4:	00 64 01 08          	add    BYTE PTR [ecx+eax*1+0x8],ah
    2fd8:	44                   	inc    esp
    2fd9:	05 00 00 65 01       	add    eax,0x1650000
    2fde:	08 25 03 00 00 66    	or     BYTE PTR ds:0x66000003,ah
    2fe4:	01 08                	add    DWORD PTR [eax],ecx
    2fe6:	56                   	push   esi
    2fe7:	05 00 00 67 01       	add    eax,0x1670000
    2fec:	08 b7 03 00 00 68    	or     BYTE PTR [edi+0x68000003],dh
    2ff2:	01 08                	add    DWORD PTR [eax],ecx
    2ff4:	d6                   	(bad)  
    2ff5:	02 00                	add    al,BYTE PTR [eax]
    2ff7:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    2ffa:	08 85 04 00 00 70    	or     BYTE PTR [ebp+0x70000004],al
    3000:	01 08                	add    DWORD PTR [eax],ecx
    3002:	39 03                	cmp    DWORD PTR [ebx],eax
    3004:	00 00                	add    BYTE PTR [eax],al
    3006:	71 01                	jno    3009 <__fmodf2+0x2fdd>
    3008:	08 e8                	or     al,ch
    300a:	04 00                	add    al,0x0
    300c:	00 00                	add    BYTE PTR [eax],al
    300e:	03 08                	add    ecx,DWORD PTR [eax]
    3010:	d9 03                	fld    DWORD PTR [ebx]
    3012:	00 00                	add    BYTE PTR [eax],al
    3014:	01 03                	add    DWORD PTR [ebx],eax
    3016:	08 e8                	or     al,ch
    3018:	03 00                	add    eax,DWORD PTR [eax]
    301a:	00 02                	add    BYTE PTR [edx],al
    301c:	03 08                	add    ecx,DWORD PTR [eax]
    301e:	73 03                	jae    3023 <__fmodf2+0x2ff7>
    3020:	00 00                	add    BYTE PTR [eax],al
    3022:	03 03                	add    eax,DWORD PTR [ebx]
    3024:	08 b6 02 00 00 04    	or     BYTE PTR [esi+0x4000002],dh
    302a:	03 08                	add    ecx,DWORD PTR [eax]
    302c:	15 03 00 00 05       	adc    eax,0x5000003
    3031:	03 08                	add    ecx,DWORD PTR [eax]
    3033:	64 03 00             	add    eax,DWORD PTR fs:[eax]
    3036:	00 06                	add    BYTE PTR [esi],al
    3038:	03 08                	add    ecx,DWORD PTR [eax]
    303a:	b2 04                	mov    dl,0x4
    303c:	00 00                	add    BYTE PTR [eax],al
    303e:	07                   	pop    es
    303f:	03 08                	add    ecx,DWORD PTR [eax]
    3041:	01 04 00             	add    DWORD PTR [eax+eax*1],eax
    3044:	00 00                	add    BYTE PTR [eax],al
    3046:	09 00                	or     DWORD PTR [eax],eax
    3048:	09 8c 0c 00 00 01 0a 	or     DWORD PTR [esp+ecx*1+0xa010000],ecx
    304f:	4f                   	dec    edi
    3050:	00 00                	add    BYTE PTR [eax],al
    3052:	00 f4                	add    ah,dh
    3054:	2b 00                	sub    eax,DWORD PTR [eax]
    3056:	9f                   	lahf   
    3057:	29 00                	sub    DWORD PTR [eax],eax
    3059:	00 00                	add    BYTE PTR [eax],al
    305b:	01 9c ba 01 00 00 0a 	add    DWORD PTR [edx+edi*4+0xa000001],ebx
    3062:	a0 0c 00 00 01       	mov    al,ds:0x100000c
    3067:	0a ba 01 00 00 02    	or     bh,BYTE PTR [edx+0x2000001]
    306d:	91                   	xchg   ecx,eax
    306e:	00 00                	add    BYTE PTR [eax],al
    3070:	04 04                	add    al,0x4
    3072:	4f                   	dec    edi
    3073:	00 00                	add    BYTE PTR [eax],al
    3075:	00 09                	add    BYTE PTR [ecx],cl
    3077:	81 0c 00 00 01 0f 4f 	or     DWORD PTR [eax+eax*1],0x4f0f0100
    307e:	00 00                	add    BYTE PTR [eax],al
    3080:	00 1d 2c 00 9f 2e    	add    BYTE PTR ds:0x2e9f002c,bl
    3086:	00 00                	add    BYTE PTR [eax],al
    3088:	00 01                	add    BYTE PTR [ecx],al
    308a:	9c                   	pushf  
    308b:	04 02                	add    al,0x2
    308d:	00 00                	add    BYTE PTR [eax],al
    308f:	0a 7b 0c             	or     bh,BYTE PTR [ebx+0xc]
    3092:	00 00                	add    BYTE PTR [eax],al
    3094:	01 0f                	add    DWORD PTR [edi],ecx
    3096:	4f                   	dec    edi
    3097:	00 00                	add    BYTE PTR [eax],al
    3099:	00 02                	add    BYTE PTR [edx],al
    309b:	91                   	xchg   ecx,eax
    309c:	00 0a                	add    BYTE PTR [edx],cl
    309e:	86 0c 00             	xchg   BYTE PTR [eax+eax*1],cl
    30a1:	00 01                	add    BYTE PTR [ecx],al
    30a3:	0f 4f 00             	cmovg  eax,DWORD PTR [eax]
    30a6:	00 00                	add    BYTE PTR [eax],al
    30a8:	02 91 04 0a a4 0a    	add    dl,BYTE PTR [ecx+0xaa40a04]
    30ae:	00 00                	add    BYTE PTR [eax],al
    30b0:	01 0f                	add    DWORD PTR [edi],ecx
    30b2:	4f                   	dec    edi
    30b3:	00 00                	add    BYTE PTR [eax],al
    30b5:	00 02                	add    BYTE PTR [edx],al
    30b7:	91                   	xchg   ecx,eax
    30b8:	08 00                	or     BYTE PTR [eax],al
    30ba:	0b 78 00             	or     edi,DWORD PTR [eax+0x0]
    30bd:	00 00                	add    BYTE PTR [eax],al
    30bf:	04 33                	add    al,0x33
    30c1:	15 02 00 00 05       	adc    eax,0x5000002
    30c6:	03 40 92             	add    eax,DWORD PTR [eax-0x6e]
    30c9:	00 9f 04 04 72 00    	add    BYTE PTR [edi+0x720404],bl
    30cf:	00 00                	add    BYTE PTR [eax],al
    30d1:	00 d7                	add    bh,dl
    30d3:	05 00 00 04 00       	add    eax,0x40000
    30d8:	94                   	xchg   esp,eax
    30d9:	0d 00 00 04 01       	or     eax,0x1040000
    30de:	c3                   	ret    
    30df:	00 00                	add    BYTE PTR [eax],al
    30e1:	00 0c a7             	add    BYTE PTR [edi+eiz*4],cl
    30e4:	0c 00                	or     al,0x0
    30e6:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    30e9:	00 00                	add    BYTE PTR [eax],al
    30eb:	4c                   	dec    esp
    30ec:	2c 00                	sub    al,0x0
    30ee:	9f                   	lahf   
    30ef:	16                   	push   ss
    30f0:	06                   	push   es
    30f1:	00 00                	add    BYTE PTR [eax],al
    30f3:	a0 0f 00 00 02       	mov    al,ds:0x200000f
    30f8:	0a 0e                	or     cl,BYTE PTR [esi]
    30fa:	00 00                	add    BYTE PTR [eax],al
    30fc:	02 19                	add    bl,BYTE PTR [ecx]
    30fe:	30 00                	xor    BYTE PTR [eax],al
    3100:	00 00                	add    BYTE PTR [eax],al
    3102:	03 00                	add    eax,DWORD PTR [eax]
    3104:	0e                   	push   cs
    3105:	00 00                	add    BYTE PTR [eax],al
    3107:	8c 02                	mov    WORD PTR [edx],es
    3109:	1b fd                	sbb    edi,ebp
    310b:	00 00                	add    BYTE PTR [eax],al
    310d:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    3110:	69 64 00 02 1d fd 00 	imul   esp,DWORD PTR [eax+eax*1+0x2],0xfd1d
    3117:	00 
    3118:	00 00                	add    BYTE PTR [eax],al
    311a:	05 b3 06 00 00       	add    eax,0x6b3
    311f:	02 1e                	add    bl,BYTE PTR [esi]
    3121:	04 01                	add    al,0x1
    3123:	00 00                	add    BYTE PTR [eax],al
    3125:	04 05                	add    al,0x5
    3127:	34 0a                	xor    al,0xa
    3129:	00 00                	add    BYTE PTR [eax],al
    312b:	02 1f                	add    bl,BYTE PTR [edi]
    312d:	1b 01                	sbb    eax,DWORD PTR [ecx]
    312f:	00 00                	add    BYTE PTR [eax],al
    3131:	2c 05                	sub    al,0x5
    3133:	59                   	pop    ecx
    3134:	0e                   	push   cs
    3135:	00 00                	add    BYTE PTR [eax],al
    3137:	02 20                	add    ah,BYTE PTR [eax]
    3139:	fd                   	std    
    313a:	00 00                	add    BYTE PTR [eax],al
    313c:	00 30                	add    BYTE PTR [eax],dh
    313e:	04 74                	add    al,0x74
    3140:	74 79                	je     31bb <__fmodf2+0x318f>
    3142:	00 02                	add    BYTE PTR [edx],al
    3144:	21 fd                	and    ebp,edi
    3146:	00 00                	add    BYTE PTR [eax],al
    3148:	00 34 05 43 0e 00 00 	add    BYTE PTR [eax*1+0xe43],dh
    314f:	02 22                	add    ah,BYTE PTR [edx]
    3151:	fd                   	std    
    3152:	00 00                	add    BYTE PTR [eax],al
    3154:	00 38                	add    BYTE PTR [eax],bh
    3156:	05 9d 0d 00 00       	add    eax,0xd9d
    315b:	02 23                	add    ah,BYTE PTR [ebx]
    315d:	fd                   	std    
    315e:	00 00                	add    BYTE PTR [eax],al
    3160:	00 3c 05 4f 0a 00 00 	add    BYTE PTR [eax*1+0xa4f],bh
    3167:	02 24 fd 00 00 00 40 	add    ah,BYTE PTR [edi*8+0x40000000]
    316e:	05 b1 0d 00 00       	add    eax,0xdb1
    3173:	02 24 fd 00 00 00 44 	add    ah,BYTE PTR [edi*8+0x44000000]
    317a:	05 79 0d 00 00       	add    eax,0xd79
    317f:	02 24 fd 00 00 00 48 	add    ah,BYTE PTR [edi*8+0x48000000]
    3186:	04 63                	add    al,0x63
    3188:	70 75                	jo     31ff <__fmodf2+0x31d3>
    318a:	00 02                	add    BYTE PTR [edx],al
    318c:	25 22 01 00 00       	and    eax,0x122
    3191:	4c                   	dec    esp
    3192:	05 fd 09 00 00       	add    eax,0x9fd
    3197:	02 26                	add    ah,BYTE PTR [esi]
    3199:	fd                   	std    
    319a:	00 00                	add    BYTE PTR [eax],al
    319c:	00 54 05 62          	add    BYTE PTR [ebp+eax*1+0x62],dl
    31a0:	0d 00 00 02 27       	or     eax,0x27020000
    31a5:	fd                   	std    
    31a6:	00 00                	add    BYTE PTR [eax],al
    31a8:	00 58 05             	add    BYTE PTR [eax+0x5],bl
    31ab:	6e                   	outs   dx,BYTE PTR ds:[esi]
    31ac:	0d 00 00 02 28       	or     eax,0x28020000
    31b1:	fd                   	std    
    31b2:	00 00                	add    BYTE PTR [eax],al
    31b4:	00 5c 05 de          	add    BYTE PTR [ebp+eax*1-0x22],bl
    31b8:	0c 00                	or     al,0x0
    31ba:	00 02                	add    BYTE PTR [edx],al
    31bc:	29 fd                	sub    ebp,edi
    31be:	00 00                	add    BYTE PTR [eax],al
    31c0:	00 60 05             	add    BYTE PTR [eax+0x5],ah
    31c3:	30 07                	xor    BYTE PTR [edi],al
    31c5:	00 00                	add    BYTE PTR [eax],al
    31c7:	02 2a                	add    ch,BYTE PTR [edx]
    31c9:	04 01                	add    al,0x1
    31cb:	00 00                	add    BYTE PTR [eax],al
    31cd:	64 00 06             	add    BYTE PTR fs:[esi],al
    31d0:	04 05                	add    al,0x5
    31d2:	69 6e 74 00 07 1b 01 	imul   ebp,DWORD PTR [esi+0x74],0x11b0700
    31d9:	00 00                	add    BYTE PTR [eax],al
    31db:	14 01                	adc    al,0x1
    31dd:	00 00                	add    BYTE PTR [eax],al
    31df:	08 14 01             	or     BYTE PTR [ecx+eax*1],dl
    31e2:	00 00                	add    BYTE PTR [eax],al
    31e4:	27                   	daa    
    31e5:	00 09                	add    BYTE PTR [ecx],cl
    31e7:	04 07                	add    al,0x7
    31e9:	2a 01                	sub    al,BYTE PTR [ecx]
    31eb:	00 00                	add    BYTE PTR [eax],al
    31ed:	09 01                	or     DWORD PTR [ecx],eax
    31ef:	06                   	push   es
    31f0:	48                   	dec    eax
    31f1:	00 00                	add    BYTE PTR [eax],al
    31f3:	00 09                	add    BYTE PTR [ecx],cl
    31f5:	08 04 b2             	or     BYTE PTR [edx+esi*4],al
    31f8:	00 00                	add    BYTE PTR [eax],al
    31fa:	00 09                	add    BYTE PTR [ecx],cl
    31fc:	01 08                	add    DWORD PTR [eax],ecx
    31fe:	3f                   	aas    
    31ff:	00 00                	add    BYTE PTR [eax],al
    3201:	00 09                	add    BYTE PTR [ecx],cl
    3203:	02 07                	add    al,BYTE PTR [edi]
    3205:	0e                   	push   cs
    3206:	00 00                	add    BYTE PTR [eax],al
    3208:	00 09                	add    BYTE PTR [ecx],cl
    320a:	04 07                	add    al,0x7
    320c:	32 00                	xor    al,BYTE PTR [eax]
    320e:	00 00                	add    BYTE PTR [eax],al
    3210:	09 04 07             	or     DWORD PTR [edi+eax*1],eax
    3213:	2d 00 00 00 09       	sub    eax,0x9000000
    3218:	01 06                	add    DWORD PTR [esi],eax
    321a:	41                   	inc    ecx
    321b:	00 00                	add    BYTE PTR [eax],al
    321d:	00 09                	add    BYTE PTR [ecx],cl
    321f:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    3225:	09 08                	or     DWORD PTR [eax],ecx
    3227:	05 00 00 00 00       	add    eax,0x0
    322c:	09 08                	or     DWORD PTR [eax],ecx
    322e:	07                   	pop    es
    322f:	28 00                	sub    BYTE PTR [eax],al
    3231:	00 00                	add    BYTE PTR [eax],al
    3233:	09 04 05 05 00 00 00 	or     DWORD PTR [eax*1+0x5],eax
    323a:	0a 04 1b             	or     al,BYTE PTR [ebx+ebx*1]
    323d:	01 00                	add    DWORD PTR [eax],eax
    323f:	00 02                	add    BYTE PTR [edx],al
    3241:	4d                   	dec    ebp
    3242:	07                   	pop    es
    3243:	00 00                	add    BYTE PTR [eax],al
    3245:	03 2e                	add    ebp,DWORD PTR [esi]
    3247:	29 01                	sub    DWORD PTR [ecx],eax
    3249:	00 00                	add    BYTE PTR [eax],al
    324b:	02 07                	add    al,BYTE PTR [edi]
    324d:	06                   	push   es
    324e:	00 00                	add    BYTE PTR [eax],al
    3250:	03 31                	add    esi,DWORD PTR [ecx]
    3252:	30 01                	xor    BYTE PTR [ecx],al
    3254:	00 00                	add    BYTE PTR [eax],al
    3256:	02 45 02             	add    al,BYTE PTR [ebp+0x2]
    3259:	00 00                	add    BYTE PTR [eax],al
    325b:	03 34 37             	add    esi,DWORD PTR [edi+esi*1]
    325e:	01 00                	add    DWORD PTR [eax],eax
    3260:	00 02                	add    BYTE PTR [edx],al
    3262:	01 02                	add    DWORD PTR [edx],eax
    3264:	00 00                	add    BYTE PTR [eax],al
    3266:	03 56 37             	add    edx,DWORD PTR [esi+0x37]
    3269:	01 00                	add    DWORD PTR [eax],eax
    326b:	00 09                	add    BYTE PTR [ecx],cl
    326d:	0c 04                	or     al,0x4
    326f:	ad                   	lods   eax,DWORD PTR ds:[esi]
    3270:	00 00                	add    BYTE PTR [eax],al
    3272:	00 02                	add    BYTE PTR [edx],al
    3274:	bb 0d 00 00 04       	mov    ebx,0x400000d
    3279:	2a 61 01             	sub    ah,BYTE PTR [ecx+0x1]
    327c:	00 00                	add    BYTE PTR [eax],al
    327e:	0b 74 6d 00          	or     esi,DWORD PTR [ebp+ebp*2+0x0]
    3282:	2c 04                	sub    al,0x4
    3284:	2c 3c                	sub    al,0x3c
    3286:	02 00                	add    al,BYTE PTR [eax]
    3288:	00 05 3c 0e 00 00    	add    BYTE PTR ds:0xe3c,al
    328e:	04 2e                	add    al,0x2e
    3290:	fd                   	std    
    3291:	00 00                	add    BYTE PTR [eax],al
    3293:	00 00                	add    BYTE PTR [eax],al
    3295:	05 8e 0d 00 00       	add    eax,0xd8e
    329a:	04 2f                	add    al,0x2f
    329c:	fd                   	std    
    329d:	00 00                	add    BYTE PTR [eax],al
    329f:	00 04 05 b6 0c 00 00 	add    BYTE PTR [eax*1+0xcb6],al
    32a6:	04 30                	add    al,0x30
    32a8:	fd                   	std    
    32a9:	00 00                	add    BYTE PTR [eax],al
    32ab:	00 08                	add    BYTE PTR [eax],cl
    32ad:	05 1d 0e 00 00       	add    eax,0xe1d
    32b2:	04 31                	add    al,0x31
    32b4:	fd                   	std    
    32b5:	00 00                	add    BYTE PTR [eax],al
    32b7:	00 0c 05 0c 0d 00 00 	add    BYTE PTR [eax*1+0xd0c],cl
    32be:	04 32                	add    al,0x32
    32c0:	fd                   	std    
    32c1:	00 00                	add    BYTE PTR [eax],al
    32c3:	00 10                	add    BYTE PTR [eax],dl
    32c5:	05 26 0d 00 00       	add    eax,0xd26
    32ca:	04 33                	add    al,0x33
    32cc:	fd                   	std    
    32cd:	00 00                	add    BYTE PTR [eax],al
    32cf:	00 14 05 15 0e 00 00 	add    BYTE PTR [eax*1+0xe15],dl
    32d6:	04 34                	add    al,0x34
    32d8:	fd                   	std    
    32d9:	00 00                	add    BYTE PTR [eax],al
    32db:	00 18                	add    BYTE PTR [eax],bl
    32dd:	05 95 0d 00 00       	add    eax,0xd95
    32e2:	04 35                	add    al,0x35
    32e4:	fd                   	std    
    32e5:	00 00                	add    BYTE PTR [eax],al
    32e7:	00 1c 05 59 0d 00 00 	add    BYTE PTR [eax*1+0xd59],bl
    32ee:	04 36                	add    al,0x36
    32f0:	fd                   	std    
    32f1:	00 00                	add    BYTE PTR [eax],al
    32f3:	00 20                	add    BYTE PTR [eax],ah
    32f5:	05 dc 0d 00 00       	add    eax,0xddc
    32fa:	04 37                	add    al,0x37
    32fc:	61                   	popa   
    32fd:	01 00                	add    DWORD PTR [eax],eax
    32ff:	00 24 05 cb 0c 00 00 	add    BYTE PTR [eax*1+0xccb],ah
    3306:	04 38                	add    al,0x38
    3308:	3c 02                	cmp    al,0x2
    330a:	00 00                	add    BYTE PTR [eax],al
    330c:	28 00                	sub    BYTE PTR [eax],al
    330e:	0a 04 42             	or     al,BYTE PTR [edx+eax*2]
    3311:	02 00                	add    al,BYTE PTR [eax]
    3313:	00 0c 1b             	add    BYTE PTR [ebx+ebx*1],cl
    3316:	01 00                	add    DWORD PTR [eax],eax
    3318:	00 0d f6 06 00 00    	add    BYTE PTR ds:0x6f6,cl
    331e:	17                   	pop    ss
    331f:	01 05 1f c9 02 00    	add    DWORD PTR ds:0x2c91f,eax
    3325:	00 05 af 06 00 00    	add    BYTE PTR ds:0x6af,al
    332b:	05 21 c9 02 00       	add    eax,0x2c921
    3330:	00 00                	add    BYTE PTR [eax],al
    3332:	0e                   	push   cs
    3333:	c8 06 00 00          	enter  0x6,0x0
    3337:	05 22 6e 01 00       	add    eax,0x16e22
    333c:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    333f:	0e                   	push   cs
    3340:	7f 06                	jg     3348 <__fmodf2+0x331c>
    3342:	00 00                	add    BYTE PTR [eax],al
    3344:	05 23 84 01 00       	add    eax,0x18423
    3349:	00 05 01 0e 58 07    	add    BYTE PTR ds:0x7580e01,al
    334f:	00 00                	add    BYTE PTR [eax],al
    3351:	05 24 84 01 00       	add    eax,0x18424
    3356:	00 09                	add    BYTE PTR [ecx],cl
    3358:	01 0e                	add    DWORD PTR [esi],ecx
    335a:	87 06                	xchg   DWORD PTR [esi],eax
    335c:	00 00                	add    BYTE PTR [eax],al
    335e:	05 25 79 01 00       	add    eax,0x17925
    3363:	00 0d 01 0e 9f 05    	add    BYTE PTR ds:0x59f0e01,cl
    3369:	00 00                	add    BYTE PTR [eax],al
    336b:	05 26 79 01 00       	add    eax,0x17926
    3370:	00 0f                	add    BYTE PTR [edi],cl
    3372:	01 0e                	add    DWORD PTR [esi],ecx
    3374:	10 06                	adc    BYTE PTR [esi],al
    3376:	00 00                	add    BYTE PTR [eax],al
    3378:	05 27 79 01 00       	add    eax,0x17927
    337d:	00 11                	add    BYTE PTR [ecx],dl
    337f:	01 0e                	add    DWORD PTR [esi],ecx
    3381:	f2 05 00 00 05 28    	repnz add eax,0x28050000
    3387:	79 01                	jns    338a <__fmodf2+0x335e>
    3389:	00 00                	add    BYTE PTR [eax],al
    338b:	13 01                	adc    eax,DWORD PTR [ecx]
    338d:	0e                   	push   cs
    338e:	29 07                	sub    DWORD PTR [edi],eax
    3390:	00 00                	add    BYTE PTR [eax],al
    3392:	05 29 79 01 00       	add    eax,0x17929
    3397:	00 15 01 00 07 1b    	add    BYTE PTR ds:0x1b070001,dl
    339d:	01 00                	add    DWORD PTR [eax],eax
    339f:	00 da                	add    dl,bl
    33a1:	02 00                	add    al,BYTE PTR [eax]
    33a3:	00 0f                	add    BYTE PTR [edi],cl
    33a5:	14 01                	adc    al,0x1
    33a7:	00 00                	add    BYTE PTR [eax],al
    33a9:	03 01                	add    eax,DWORD PTR [ecx]
    33ab:	00 02                	add    BYTE PTR [edx],al
    33ad:	cf                   	iret   
    33ae:	06                   	push   es
    33af:	00 00                	add    BYTE PTR [eax],al
    33b1:	05 32 47 02 00       	add    eax,0x24732
    33b6:	00 09                	add    BYTE PTR [ecx],cl
    33b8:	01 02                	add    DWORD PTR [edx],eax
    33ba:	e8 06 00 00 10       	call   100033c5 <sysEnter_Vector+0xfed33c5>
    33bf:	49                   	dec    ecx
    33c0:	0d 00 00 01 10       	or     eax,0x10010000
    33c5:	bf 03 00 00 4c       	mov    edi,0x4c000003
    33ca:	2c 00                	sub    al,0x0
    33cc:	9f                   	lahf   
    33cd:	79 03                	jns    33d2 <__fmodf2+0x33a6>
    33cf:	00 00                	add    BYTE PTR [eax],al
    33d1:	01 9c bf 03 00 00 11 	add    DWORD PTR [edi+edi*4+0x11000003],ebx
    33d8:	a8 0e                	test   al,0xe
    33da:	00 00                	add    BYTE PTR [eax],al
    33dc:	01 10                	add    DWORD PTR [eax],edx
    33de:	bf 03 00 00 02       	mov    edi,0x2000003
    33e3:	91                   	xchg   ecx,eax
    33e4:	00 11                	add    BYTE PTR [ecx],dl
    33e6:	38 0d 00 00 01 10    	cmp    BYTE PTR ds:0x10010000,cl
    33ec:	68 01 00 00 02       	push   0x2000001
    33f1:	91                   	xchg   ecx,eax
    33f2:	04 11                	add    al,0x11
    33f4:	25 0e 00 00 01       	and    eax,0x100000e
    33f9:	10 fd                	adc    ch,bh
    33fb:	00 00                	add    BYTE PTR [eax],al
    33fd:	00 02                	add    BYTE PTR [edx],al
    33ff:	91                   	xchg   ecx,eax
    3400:	08 12                	or     BYTE PTR [edx],dl
    3402:	7c 01                	jl     3405 <__fmodf2+0x33d9>
    3404:	00 00                	add    BYTE PTR [eax],al
    3406:	01 12                	add    DWORD PTR [edx],edx
    3408:	c5 03                	lds    eax,FWORD PTR [ebx]
    340a:	00 00                	add    BYTE PTR [eax],al
    340c:	02 91 60 12 e2 06    	add    dl,BYTE PTR [ecx+0x6e21260]
    3412:	00 00                	add    BYTE PTR [eax],al
    3414:	01 13                	add    DWORD PTR [ebx],edx
    3416:	68 01 00 00 02       	push   0x2000001
    341b:	91                   	xchg   ecx,eax
    341c:	6c                   	ins    BYTE PTR es:[edi],dx
    341d:	12 e6                	adc    ah,dh
    341f:	0d 00 00 01 14       	or     eax,0x14010000
    3424:	fd                   	std    
    3425:	00 00                	add    BYTE PTR [eax],al
    3427:	00 02                	add    BYTE PTR [edx],al
    3429:	91                   	xchg   ecx,eax
    342a:	68 13 70 69 64       	push   0x64697013
    342f:	00 01                	add    BYTE PTR [ecx],al
    3431:	15 fd 00 00 00       	adc    eax,0xfd
    3436:	02 91 64 12 b3 06    	add    dl,BYTE PTR [ecx+0x6b31264]
    343c:	00 00                	add    BYTE PTR [eax],al
    343e:	01 16                	add    DWORD PTR [esi],edx
    3440:	d5 03                	aad    0x3
    3442:	00 00                	add    BYTE PTR [eax],al
    3444:	03 91 fc 7e 12 c2    	add    edx,DWORD PTR [ecx-0x3ded8104]
    344a:	0d 00 00 01 16       	or     eax,0x16010000
    344f:	d5 03                	aad    0x3
    3451:	00 00                	add    BYTE PTR [eax],al
    3453:	03 91 98 7e 12 c8    	add    edx,DWORD PTR [ecx-0x37ed8168]
    3459:	0d 00 00 01 16       	or     eax,0x16010000
    345e:	d5 03                	aad    0x3
    3460:	00 00                	add    BYTE PTR [eax],al
    3462:	03 91 b4 7d 12 3b    	add    edx,DWORD PTR [ecx+0x3b127db4]
    3468:	0d 00 00 01 17       	or     eax,0x17010000
    346d:	ac                   	lods   al,BYTE PTR ds:[esi]
    346e:	01 00                	add    DWORD PTR [eax],eax
    3470:	00 05 03 a0 92 00    	add    BYTE PTR ds:0x92a003,al
    3476:	9f                   	lahf   
    3477:	14 ed                	adc    al,0xed
    3479:	2c 00                	sub    al,0x0
    347b:	9f                   	lahf   
    347c:	ac                   	lods   al,BYTE PTR ds:[esi]
    347d:	02 00                	add    al,BYTE PTR [eax]
    347f:	00 12                	add    BYTE PTR [edx],dl
    3481:	be 0c 00 00 01       	mov    esi,0x100000c
    3486:	45                   	inc    ebp
    3487:	a1 01 00 00 03       	mov    eax,ds:0x3000001
    348c:	91                   	xchg   ecx,eax
    348d:	b0 7d                	mov    al,0x7d
    348f:	00 00                	add    BYTE PTR [eax],al
    3491:	0a 04 25 00 00 00 07 	or     al,BYTE PTR [eiz*1+0x7000000]
    3498:	1b 01                	sbb    eax,DWORD PTR [ecx]
    349a:	00 00                	add    BYTE PTR [eax],al
    349c:	d5 03                	aad    0x3
    349e:	00 00                	add    BYTE PTR [eax],al
    34a0:	08 14 01             	or     BYTE PTR [ecx+eax*1],dl
    34a3:	00 00                	add    BYTE PTR [eax],al
    34a5:	03 00                	add    eax,DWORD PTR [eax]
    34a7:	07                   	pop    es
    34a8:	1b 01                	sbb    eax,DWORD PTR [ecx]
    34aa:	00 00                	add    BYTE PTR [eax],al
    34ac:	e5 03                	in     eax,0x3
    34ae:	00 00                	add    BYTE PTR [eax],al
    34b0:	08 14 01             	or     BYTE PTR [ecx+eax*1],dl
    34b3:	00 00                	add    BYTE PTR [eax],al
    34b5:	63 00                	arpl   WORD PTR [eax],ax
    34b7:	10 fd                	adc    ch,bh
    34b9:	0c 00                	or     al,0x0
    34bb:	00 01                	add    BYTE PTR [ecx],al
    34bd:	5e                   	pop    esi
    34be:	bf 03 00 00 c5       	mov    edi,0xc5000003
    34c3:	2f                   	das    
    34c4:	00 9f 25 00 00 00    	add    BYTE PTR [edi+0x25],bl
    34ca:	01 9c 1b 04 00 00 11 	add    DWORD PTR [ebx+ebx*1+0x11000004],ebx
    34d1:	a8 0e                	test   al,0xe
    34d3:	00 00                	add    BYTE PTR [eax],al
    34d5:	01 5e bf             	add    DWORD PTR [esi-0x41],ebx
    34d8:	03 00                	add    eax,DWORD PTR [eax]
    34da:	00 02                	add    BYTE PTR [edx],al
    34dc:	91                   	xchg   ecx,eax
    34dd:	00 11                	add    BYTE PTR [ecx],dl
    34df:	38 0d 00 00 01 5e    	cmp    BYTE PTR ds:0x5e010000,cl
    34e5:	68 01 00 00 02       	push   0x2000001
    34ea:	91                   	xchg   ecx,eax
    34eb:	04 00                	add    al,0x0
    34ed:	15 13 0d 00 00       	adc    eax,0xd13
    34f2:	01 63 ea             	add    DWORD PTR [ebx-0x16],esp
    34f5:	2f                   	das    
    34f6:	00 9f 78 02 00 00    	add    BYTE PTR [edi+0x278],bl
    34fc:	01 9c 4d 05 00 00 11 	add    DWORD PTR [ebp+ecx*2+0x11000005],ebx
    3503:	41                   	inc    ecx
    3504:	0d 00 00 01 63       	or     eax,0x63010000
    3509:	4d                   	dec    ebp
    350a:	05 00 00 02 91       	add    eax,0x91020000
    350f:	00 11                	add    BYTE PTR [ecx],dl
    3511:	f2 0d 00 00 01 63    	repnz or eax,0x63010000
    3517:	fd                   	std    
    3518:	00 00                	add    BYTE PTR [eax],al
    351a:	00 02                	add    BYTE PTR [edx],al
    351c:	91                   	xchg   ecx,eax
    351d:	04 11                	add    al,0x11
    351f:	2e                   	cs
    3520:	0d 00 00 01 63       	or     eax,0x63010000
    3525:	fd                   	std    
    3526:	00 00                	add    BYTE PTR [eax],al
    3528:	00 02                	add    BYTE PTR [edx],al
    352a:	91                   	xchg   ecx,eax
    352b:	08 11                	or     BYTE PTR [ecx],dl
    352d:	a9 0d 00 00 01       	test   eax,0x100000d
    3532:	63 53 05             	arpl   WORD PTR [ebx+0x5],dx
    3535:	00 00                	add    BYTE PTR [eax],al
    3537:	02 91 0c 11 4f 0e    	add    dl,BYTE PTR [ecx+0xe4f110c]
    353d:	00 00                	add    BYTE PTR [eax],al
    353f:	01 63 53             	add    DWORD PTR [ebx+0x53],esp
    3542:	05 00 00 02 91       	add    eax,0x91020000
    3547:	10 12                	adc    BYTE PTR [edx],dl
    3549:	f2 0c 00             	repnz or al,0x0
    354c:	00 01                	add    BYTE PTR [ecx],al
    354e:	65                   	gs
    354f:	59                   	pop    ecx
    3550:	05 00 00 05 03       	add    eax,0x3050000
    3555:	cc                   	int3   
    3556:	92                   	xchg   edx,eax
    3557:	00 9f 12 9a 05 00    	add    BYTE PTR [edi+0x59a12],bl
    355d:	00 01                	add    BYTE PTR [ecx],al
    355f:	6c                   	ins    BYTE PTR es:[edi],dx
    3560:	5f                   	pop    edi
    3561:	05 00 00 03 91       	add    eax,0x91030000
    3566:	d0 7e 12             	sar    BYTE PTR [esi+0x12],1
    3569:	84 0d 00 00 01 6d    	test   BYTE PTR ds:0x6d010000,cl
    356f:	fd                   	std    
    3570:	00 00                	add    BYTE PTR [eax],al
    3572:	00 02                	add    BYTE PTR [edx],al
    3574:	91                   	xchg   ecx,eax
    3575:	68 12 d3 0c 00       	push   0xcd312
    357a:	00 01                	add    BYTE PTR [ecx],al
    357c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    357d:	6f                   	outs   dx,DWORD PTR ds:[esi]
    357e:	05 00 00 03 91       	add    eax,0x91030000
    3583:	d0 7c 12 ce          	sar    BYTE PTR [edx+edx*1-0x32],1
    3587:	0d 00 00 01 6f       	or     eax,0x6f010000
    358c:	bf 03 00 00 02       	mov    edi,0x2000003
    3591:	91                   	xchg   ecx,eax
    3592:	54                   	push   esp
    3593:	14 52                	adc    al,0x52
    3595:	30 00                	xor    BYTE PTR [eax],al
    3597:	9f                   	lahf   
    3598:	08 02                	or     BYTE PTR [edx],al
    359a:	00 00                	add    BYTE PTR [eax],al
    359c:	13 63 6e             	adc    esp,DWORD PTR [ebx+0x6e]
    359f:	74 00                	je     35a1 <__fmodf2+0x3575>
    35a1:	01 71 fd             	add    DWORD PTR [ecx-0x3],esi
    35a4:	00 00                	add    BYTE PTR [eax],al
    35a6:	00 02                	add    BYTE PTR [edx],al
    35a8:	91                   	xchg   ecx,eax
    35a9:	6c                   	ins    BYTE PTR es:[edi],dx
    35aa:	14 7e                	adc    al,0x7e
    35ac:	30 00                	xor    BYTE PTR [eax],al
    35ae:	9f                   	lahf   
    35af:	cc                   	int3   
    35b0:	01 00                	add    DWORD PTR [eax],eax
    35b2:	00 12                	add    BYTE PTR [edx],dl
    35b4:	6d                   	ins    DWORD PTR es:[edi],dx
    35b5:	07                   	pop    es
    35b6:	00 00                	add    BYTE PTR [eax],al
    35b8:	01 7a 7f             	add    DWORD PTR [edx+0x7f],edi
    35bb:	05 00 00 02 91       	add    eax,0x91020000
    35c0:	64                   	fs
    35c1:	14 1b                	adc    al,0x1b
    35c3:	31 00                	xor    DWORD PTR [eax],eax
    35c5:	9f                   	lahf   
    35c6:	2e 01 00             	add    DWORD PTR cs:[eax],eax
    35c9:	00 13                	add    BYTE PTR [ebx],dl
    35cb:	72 65                	jb     3632 <__fmodf2+0x3606>
    35cd:	73 00                	jae    35cf <__fmodf2+0x35a3>
    35cf:	01 7e fd             	add    DWORD PTR [esi-0x3],edi
    35d2:	00 00                	add    BYTE PTR [eax],al
    35d4:	00 02                	add    BYTE PTR [edx],al
    35d6:	91                   	xchg   ecx,eax
    35d7:	60                   	pusha  
    35d8:	14 4f                	adc    al,0x4f
    35da:	31 00                	xor    DWORD PTR [eax],eax
    35dc:	9f                   	lahf   
    35dd:	fa                   	cli    
    35de:	00 00                	add    BYTE PTR [eax],al
    35e0:	00 12                	add    BYTE PTR [edx],dl
    35e2:	2f                   	das    
    35e3:	09 00                	or     DWORD PTR [eax],eax
    35e5:	00 01                	add    BYTE PTR [ecx],al
    35e7:	83 68 01 00          	sub    DWORD PTR [eax+0x1],0x0
    35eb:	00 02                	add    BYTE PTR [edx],al
    35ed:	91                   	xchg   ecx,eax
    35ee:	5c                   	pop    esp
    35ef:	13 70 69             	adc    esi,DWORD PTR [eax+0x69]
    35f2:	64 00 01             	add    BYTE PTR fs:[ecx],al
    35f5:	84 85 05 00 00 03    	test   BYTE PTR [ebp+0x3000005],al
    35fb:	91                   	xchg   ecx,eax
    35fc:	c8 7c 12 d7          	enter  0x127c,0xd7
    3600:	0d 00 00 01 86       	or     eax,0x86010000
    3605:	fd                   	std    
    3606:	00 00                	add    BYTE PTR [eax],al
    3608:	00 02                	add    BYTE PTR [edx],al
    360a:	91                   	xchg   ecx,eax
    360b:	58                   	pop    eax
    360c:	13 70 74             	adc    esi,DWORD PTR [eax+0x74]
    360f:	72 00                	jb     3611 <__fmodf2+0x35e5>
    3611:	01 8c 95 05 00 00 02 	add    DWORD PTR [ebp+edx*4+0x2000005],ecx
    3618:	91                   	xchg   ecx,eax
    3619:	50                   	push   eax
    361a:	00 00                	add    BYTE PTR [eax],al
    361c:	00 00                	add    BYTE PTR [eax],al
    361e:	00 0a                	add    BYTE PTR [edx],cl
    3620:	04 bf                	add    al,0xbf
    3622:	03 00                	add    eax,DWORD PTR [eax]
    3624:	00 0a                	add    BYTE PTR [edx],cl
    3626:	04 22                	add    al,0x22
    3628:	01 00                	add    DWORD PTR [eax],eax
    362a:	00 0a                	add    BYTE PTR [edx],cl
    362c:	04 da                	add    al,0xda
    362e:	02 00                	add    al,BYTE PTR [eax]
    3630:	00 07                	add    BYTE PTR [edi],al
    3632:	1b 01                	sbb    eax,DWORD PTR [ecx]
    3634:	00 00                	add    BYTE PTR [eax],al
    3636:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3637:	05 00 00 08 14       	add    eax,0x14080000
    363c:	01 00                	add    DWORD PTR [eax],eax
    363e:	00 7f 00             	add    BYTE PTR [edi+0x0],bh
    3641:	07                   	pop    es
    3642:	1b 01                	sbb    eax,DWORD PTR [ecx]
    3644:	00 00                	add    BYTE PTR [eax],al
    3646:	7f 05                	jg     364d <__fmodf2+0x3621>
    3648:	00 00                	add    BYTE PTR [eax],al
    364a:	08 14 01             	or     BYTE PTR [ecx+eax*1],dl
    364d:	00 00                	add    BYTE PTR [eax],al
    364f:	ff 00                	inc    DWORD PTR [eax]
    3651:	0a 04 fd 00 00 00 07 	or     al,BYTE PTR [edi*8+0x7000000]
    3658:	1b 01                	sbb    eax,DWORD PTR [ecx]
    365a:	00 00                	add    BYTE PTR [eax],al
    365c:	95                   	xchg   ebp,eax
    365d:	05 00 00 08 14       	add    eax,0x14080000
    3662:	01 00                	add    DWORD PTR [eax],eax
    3664:	00 07                	add    BYTE PTR [edi],al
    3666:	00 0a                	add    BYTE PTR [edx],cl
    3668:	04 84                	add    al,0x84
    366a:	01 00                	add    DWORD PTR [eax],eax
    366c:	00 16                	add    BYTE PTR [esi],dl
    366e:	78 00                	js     3670 <__fmodf2+0x3644>
    3670:	00 00                	add    BYTE PTR [eax],al
    3672:	06                   	push   es
    3673:	33 ac 05 00 00 05 03 	xor    ebp,DWORD PTR [ebp+eax*1+0x3050000]
    367a:	40                   	inc    eax
    367b:	92                   	xchg   edx,eax
    367c:	00 9f 0a 04 68 01    	add    BYTE PTR [edi+0x168040a],bl
    3682:	00 00                	add    BYTE PTR [eax],al
    3684:	16                   	push   ss
    3685:	10 02                	adc    BYTE PTR [edx],al
    3687:	00 00                	add    BYTE PTR [eax],al
    3689:	05 35 c3 05 00       	add    eax,0x5c335
    368e:	00 05 03 50 92 00    	add    BYTE PTR ds:0x925003,al
    3694:	9f                   	lahf   
    3695:	0a 04 8f             	or     al,BYTE PTR [edi+ecx*4]
    3698:	01 00                	add    DWORD PTR [eax],eax
    369a:	00 16                	add    BYTE PTR [esi],dl
    369c:	33 02                	xor    eax,DWORD PTR [edx]
    369e:	00 00                	add    BYTE PTR [eax],al
    36a0:	05 36 84 01 00       	add    eax,0x18436
    36a5:	00 05 03 4c 92 00    	add    BYTE PTR ds:0x924c03,al
    36ab:	9f                   	lahf   
    36ac:	00 41 0a             	add    BYTE PTR [ecx+0xa],al
    36af:	00 00                	add    BYTE PTR [eax],al
    36b1:	04 00                	add    al,0x0
    36b3:	cd 0e                	int    0xe
    36b5:	00 00                	add    BYTE PTR [eax],al
    36b7:	04 01                	add    al,0x1
    36b9:	c3                   	ret    
    36ba:	00 00                	add    BYTE PTR [eax],al
    36bc:	00 0c 8c             	add    BYTE PTR [esp+ecx*4],cl
    36bf:	0e                   	push   cs
    36c0:	00 00                	add    BYTE PTR [eax],al
    36c2:	4d                   	dec    ebp
    36c3:	00 00                	add    BYTE PTR [eax],al
    36c5:	00 64 32 00          	add    BYTE PTR [edx+esi*1+0x0],ah
    36c9:	9f                   	lahf   
    36ca:	04 16                	add    al,0x16
    36cc:	00 00                	add    BYTE PTR [eax],al
    36ce:	00 11                	add    BYTE PTR [ecx],dl
    36d0:	00 00                	add    BYTE PTR [eax],al
    36d2:	02 01                	add    al,BYTE PTR [ecx]
    36d4:	08 3f                	or     BYTE PTR [edi],bh
    36d6:	00 00                	add    BYTE PTR [eax],al
    36d8:	00 02                	add    BYTE PTR [edx],al
    36da:	02 07                	add    al,BYTE PTR [edi]
    36dc:	0e                   	push   cs
    36dd:	00 00                	add    BYTE PTR [eax],al
    36df:	00 02                	add    BYTE PTR [edx],al
    36e1:	04 07                	add    al,0x7
    36e3:	32 00                	xor    al,BYTE PTR [eax]
    36e5:	00 00                	add    BYTE PTR [eax],al
    36e7:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    36ea:	2d 00 00 00 02       	sub    eax,0x2000000
    36ef:	01 06                	add    DWORD PTR [esi],eax
    36f1:	41                   	inc    ecx
    36f2:	00 00                	add    BYTE PTR [eax],al
    36f4:	00 02                	add    BYTE PTR [edx],al
    36f6:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    36fc:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3703:	02 08                	add    cl,BYTE PTR [eax]
    3705:	05 00 00 00 00       	add    eax,0x0
    370a:	02 08                	add    cl,BYTE PTR [eax]
    370c:	07                   	pop    es
    370d:	28 00                	sub    BYTE PTR [eax],al
    370f:	00 00                	add    BYTE PTR [eax],al
    3711:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    3718:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    371b:	2a 01                	sub    al,BYTE PTR [ecx]
    371d:	00 00                	add    BYTE PTR [eax],al
    371f:	04 04                	add    al,0x4
    3721:	78 00                	js     3723 <__fmodf2+0x36f7>
    3723:	00 00                	add    BYTE PTR [eax],al
    3725:	02 01                	add    al,BYTE PTR [ecx]
    3727:	06                   	push   es
    3728:	48                   	dec    eax
    3729:	00 00                	add    BYTE PTR [eax],al
    372b:	00 05 4d 07 00 00    	add    BYTE PTR ds:0x74d,al
    3731:	02 2e                	add    ch,BYTE PTR [esi]
    3733:	25 00 00 00 05       	and    eax,0x5000000
    3738:	45                   	inc    ebp
    3739:	02 00                	add    al,BYTE PTR [eax]
    373b:	00 02                	add    BYTE PTR [edx],al
    373d:	34 33                	xor    al,0x33
    373f:	00 00                	add    BYTE PTR [eax],al
    3741:	00 05 01 02 00 00    	add    BYTE PTR ds:0x201,al
    3747:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
    374a:	00 00                	add    BYTE PTR [eax],al
    374c:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    374f:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    3750:	00 00                	add    BYTE PTR [eax],al
    3752:	00 06                	add    BYTE PTR [esi],al
    3754:	78 00                	js     3756 <__fmodf2+0x372a>
    3756:	00 00                	add    BYTE PTR [eax],al
    3758:	07                   	pop    es
    3759:	78 00                	js     375b <__fmodf2+0x372f>
    375b:	00 00                	add    BYTE PTR [eax],al
    375d:	bb 00 00 00 08       	mov    ebx,0x8000000
    3762:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    3765:	00 17                	add    BYTE PTR [edi],dl
    3767:	00 05 35 09 00 00    	add    BYTE PTR ds:0x935,al
    376d:	03 28                	add    ebp,DWORD PTR [eax]
    376f:	c6 00 00             	mov    BYTE PTR [eax],0x0
    3772:	00 09                	add    BYTE PTR [ecx],cl
    3774:	04 61                	add    al,0x61
    3776:	08 00                	or     BYTE PTR [eax],al
    3778:	00 78 00             	add    BYTE PTR [eax+0x0],bh
    377b:	00 00                	add    BYTE PTR [eax],al
    377d:	05 3c 09 00 00       	add    eax,0x93c
    3782:	03 62 bb             	add    esp,DWORD PTR [edx-0x45]
    3785:	00 00                	add    BYTE PTR [eax],al
    3787:	00 0a                	add    BYTE PTR [edx],cl
    3789:	05 04 58 5c 01       	add    eax,0x15c5804
    378e:	00 00                	add    BYTE PTR [eax],al
    3790:	0b 99 0f 00 00 04    	or     ebx,DWORD PTR [ecx+0x400000f]
    3796:	59                   	pop    ecx
    3797:	7f 00                	jg     3799 <__fmodf2+0x376d>
    3799:	00 00                	add    BYTE PTR [eax],al
    379b:	01 04 04             	add    DWORD PTR [esp+eax*1],eax
    379e:	00 0b                	add    BYTE PTR [ebx],cl
    37a0:	d1 0e                	ror    DWORD PTR [esi],1
    37a2:	00 00                	add    BYTE PTR [eax],al
    37a4:	04 5a                	add    al,0x5a
    37a6:	7f 00                	jg     37a8 <__fmodf2+0x377c>
    37a8:	00 00                	add    BYTE PTR [eax],al
    37aa:	01 04 00             	add    DWORD PTR [eax+eax*1],eax
    37ad:	00 0b                	add    BYTE PTR [ebx],cl
    37af:	ed                   	in     eax,dx
    37b0:	0e                   	push   cs
    37b1:	00 00                	add    BYTE PTR [eax],al
    37b3:	04 5b                	add    al,0x5b
    37b5:	7f 00                	jg     37b7 <__fmodf2+0x378b>
    37b7:	00 00                	add    BYTE PTR [eax],al
    37b9:	01 04 04             	add    DWORD PTR [esp+eax*1],eax
    37bc:	01 0b                	add    DWORD PTR [ebx],ecx
    37be:	2e 01 00             	add    DWORD PTR cs:[eax],eax
    37c1:	00 04 5c             	add    BYTE PTR [esp+ebx*2],al
    37c4:	7f 00                	jg     37c6 <__fmodf2+0x379a>
    37c6:	00 00                	add    BYTE PTR [eax],al
    37c8:	01 02                	add    DWORD PTR [edx],eax
    37ca:	02 01                	add    al,BYTE PTR [ecx]
    37cc:	0b b1 0e 00 00 04    	or     esi,DWORD PTR [ecx+0x400000e]
    37d2:	5d                   	pop    ebp
    37d3:	7f 00                	jg     37d5 <__fmodf2+0x37a9>
    37d5:	00 00                	add    BYTE PTR [eax],al
    37d7:	01 02                	add    DWORD PTR [edx],eax
    37d9:	00 01                	add    BYTE PTR [ecx],al
    37db:	0b d0                	or     edx,eax
    37dd:	0e                   	push   cs
    37de:	00 00                	add    BYTE PTR [eax],al
    37e0:	04 5e                	add    al,0x5e
    37e2:	7f 00                	jg     37e4 <__fmodf2+0x37b8>
    37e4:	00 00                	add    BYTE PTR [eax],al
    37e6:	01 04 04             	add    DWORD PTR [esp+eax*1],eax
    37e9:	02 0b                	add    cl,BYTE PTR [ebx]
    37eb:	ec                   	in     al,dx
    37ec:	0e                   	push   cs
    37ed:	00 00                	add    BYTE PTR [eax],al
    37ef:	04 5f                	add    al,0x5f
    37f1:	7f 00                	jg     37f3 <__fmodf2+0x37c7>
    37f3:	00 00                	add    BYTE PTR [eax],al
    37f5:	01 08                	add    DWORD PTR [eax],ecx
    37f7:	00 03                	add    BYTE PTR [ebx],al
    37f9:	0b b6 0e 00 00 04    	or     esi,DWORD PTR [esi+0x400000e]
    37ff:	60                   	pusha  
    3800:	7f 00                	jg     3802 <__fmodf2+0x37d6>
    3802:	00 00                	add    BYTE PTR [eax],al
    3804:	01 04 04             	add    DWORD PTR [esp+eax*1],eax
    3807:	04 00                	add    al,0x0
    3809:	0c 08                	or     al,0x8
    380b:	04 56                	add    al,0x56
    380d:	75 01                	jne    3810 <__fmodf2+0x37e4>
    380f:	00 00                	add    BYTE PTR [eax],al
    3811:	0d db 00 00 00       	or     eax,0xdb
    3816:	0e                   	push   cs
    3817:	72 65                	jb     387e <__fmodf2+0x3852>
    3819:	67 00 04             	add    BYTE PTR [si],al
    381c:	62 8a 00 00 00 00    	bound  ecx,QWORD PTR [edx+0x0]
    3822:	0a 04 04             	or     al,BYTE PTR [esp+eax*1]
    3825:	db ab 01 00 00 0b    	fld    TBYTE PTR [ebx+0xb000001]
    382b:	d7                   	xlat   BYTE PTR ds:[ebx]
    382c:	0e                   	push   cs
    382d:	00 00                	add    BYTE PTR [eax],al
    382f:	04 dc                	add    al,0xdc
    3831:	7f 00                	jg     3833 <__fmodf2+0x3807>
    3833:	00 00                	add    BYTE PTR [eax],al
    3835:	01 01                	add    DWORD PTR [ecx],eax
    3837:	07                   	pop    es
    3838:	00 0b                	add    BYTE PTR [ebx],cl
    383a:	26 0f 00 00          	sldt   WORD PTR es:[eax]
    383e:	04 dd                	add    al,0xdd
    3840:	7f 00                	jg     3842 <__fmodf2+0x3816>
    3842:	00 00                	add    BYTE PTR [eax],al
    3844:	01 01                	add    DWORD PTR [ecx],eax
    3846:	06                   	push   es
    3847:	00 0b                	add    BYTE PTR [ebx],cl
    3849:	90                   	nop
    384a:	0f 00 00             	sldt   WORD PTR [eax]
    384d:	04 de                	add    al,0xde
    384f:	8a 00                	mov    al,BYTE PTR [eax]
    3851:	00 00                	add    BYTE PTR [eax],al
    3853:	04 1e                	add    al,0x1e
    3855:	00 00                	add    BYTE PTR [eax],al
    3857:	00 0c 04             	add    BYTE PTR [esp+eax*1],cl
    385a:	04 da                	add    al,0xda
    385c:	c4 01                	les    eax,FWORD PTR [ecx]
    385e:	00 00                	add    BYTE PTR [eax],al
    3860:	0d 75 01 00 00       	or     eax,0x175
    3865:	0e                   	push   cs
    3866:	72 65                	jb     38cd <__fmodf2+0x38a1>
    3868:	67 00 04             	add    BYTE PTR [si],al
    386b:	e0 8a                	loopne 37f7 <__fmodf2+0x37cb>
    386d:	00 00                	add    BYTE PTR [eax],al
    386f:	00 00                	add    BYTE PTR [eax],al
    3871:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    3874:	ad                   	lods   eax,DWORD PTR ds:[esi]
    3875:	00 00                	add    BYTE PTR [eax],al
    3877:	00 02                	add    BYTE PTR [edx],al
    3879:	01 02                	add    DWORD PTR [edx],eax
    387b:	e8 06 00 00 02       	call   2003886 <sysEnter_Vector+0x1ed3886>
    3880:	08 04 b2             	or     BYTE PTR [edx+esi*4],al
    3883:	00 00                	add    BYTE PTR [eax],al
    3885:	00 0f                	add    BYTE PTR [edi],cl
    3887:	81 0e 00 00 01 3d    	or     DWORD PTR [esi],0x3d010000
    388d:	d2 01                	rol    BYTE PTR [ecx],cl
    388f:	00 00                	add    BYTE PTR [eax],al
    3891:	64 32 00             	xor    al,BYTE PTR fs:[eax]
    3894:	9f                   	lahf   
    3895:	3e 00 00             	add    BYTE PTR ds:[eax],al
    3898:	00 01                	add    BYTE PTR [ecx],al
    389a:	9c                   	pushf  
    389b:	1c 02                	sbb    al,0x2
    389d:	00 00                	add    BYTE PTR [eax],al
    389f:	10 79 0e             	adc    BYTE PTR [ecx+0xe],bh
    38a2:	00 00                	add    BYTE PTR [eax],al
    38a4:	01 3d d2 01 00 00    	add    DWORD PTR ds:0x1d2,edi
    38aa:	02 91 68 10 e3 0e    	add    dl,BYTE PTR [ecx+0xee31068]
    38b0:	00 00                	add    BYTE PTR [eax],al
    38b2:	01 3d 1c 02 00 00    	add    DWORD PTR ds:0x21c,edi
    38b8:	02 91 08 11 9a 0e    	add    dl,BYTE PTR [ecx+0xe9a1108]
    38be:	00 00                	add    BYTE PTR [eax],al
    38c0:	01 3f                	add    DWORD PTR [edi],edi
    38c2:	4f                   	dec    edi
    38c3:	00 00                	add    BYTE PTR [eax],al
    38c5:	00 12                	add    BYTE PTR [edx],dl
    38c7:	00 00                	add    BYTE PTR [eax],al
    38c9:	04 04                	add    al,0x4
    38cb:	d2 01                	rol    BYTE PTR [ecx],cl
    38cd:	00 00                	add    BYTE PTR [eax],al
    38cf:	13 63 76             	adc    esp,DWORD PTR [ebx+0x76]
    38d2:	74 00                	je     38d4 <__fmodf2+0x38a8>
    38d4:	01 42 72             	add    DWORD PTR [edx+0x72],eax
    38d7:	00 00                	add    BYTE PTR [eax],al
    38d9:	00 a2 32 00 9f bd    	add    BYTE PTR [edx-0x4260ffce],ah
    38df:	02 00                	add    al,BYTE PTR [eax]
    38e1:	00 01                	add    BYTE PTR [ecx],al
    38e3:	9c                   	pushf  
    38e4:	d0 02                	rol    BYTE PTR [edx],1
    38e6:	00 00                	add    BYTE PTR [eax],al
    38e8:	14 61                	adc    al,0x61
    38ea:	72 67                	jb     3953 <__fmodf2+0x3927>
    38ec:	00 01                	add    BYTE PTR [ecx],al
    38ee:	42                   	inc    edx
    38ef:	d2 01                	rol    BYTE PTR [ecx],cl
    38f1:	00 00                	add    BYTE PTR [eax],al
    38f3:	02 91 48 10 6a 0e    	add    dl,BYTE PTR [ecx+0xe6a1048]
    38f9:	00 00                	add    BYTE PTR [eax],al
    38fb:	01 42 4f             	add    DWORD PTR [edx+0x4f],eax
    38fe:	00 00                	add    BYTE PTR [eax],al
    3900:	00 02                	add    BYTE PTR [edx],al
    3902:	91                   	xchg   ecx,eax
    3903:	08 10                	or     BYTE PTR [eax],dl
    3905:	20 0f                	and    BYTE PTR [edi],cl
    3907:	00 00                	add    BYTE PTR [eax],al
    3909:	01 42 d0             	add    DWORD PTR [edx-0x30],eax
    390c:	02 00                	add    al,BYTE PTR [eax]
    390e:	00 02                	add    BYTE PTR [edx],al
    3910:	91                   	xchg   ecx,eax
    3911:	0c 10                	or     al,0x10
    3913:	d2 01                	rol    BYTE PTR [ecx],cl
    3915:	00 00                	add    BYTE PTR [eax],al
    3917:	01 42 d0             	add    DWORD PTR [edx-0x30],eax
    391a:	02 00                	add    al,BYTE PTR [eax]
    391c:	00 02                	add    BYTE PTR [edx],al
    391e:	91                   	xchg   ecx,eax
    391f:	10 14 62             	adc    BYTE PTR [edx+eiz*2],dl
    3922:	75 66                	jne    398a <__fmodf2+0x395e>
    3924:	00 01                	add    BYTE PTR [ecx],al
    3926:	42                   	inc    edx
    3927:	72 00                	jb     3929 <__fmodf2+0x38fd>
    3929:	00 00                	add    BYTE PTR [eax],al
    392b:	02 91 14 10 0c 0f    	add    dl,BYTE PTR [ecx+0xf0c1014]
    3931:	00 00                	add    BYTE PTR [eax],al
    3933:	01 42 4f             	add    DWORD PTR [edx+0x4f],eax
    3936:	00 00                	add    BYTE PTR [eax],al
    3938:	00 02                	add    BYTE PTR [edx],al
    393a:	91                   	xchg   ecx,eax
    393b:	18 15 72 32 00 01    	sbb    BYTE PTR ds:0x1003272,dl
    3941:	43                   	inc    ebx
    3942:	4f                   	dec    edi
    3943:	00 00                	add    BYTE PTR [eax],al
    3945:	00 02                	add    BYTE PTR [edx],al
    3947:	91                   	xchg   ecx,eax
    3948:	6c                   	ins    BYTE PTR es:[edi],dx
    3949:	15 66 69 00 01       	adc    eax,0x1006966
    394e:	44                   	inc    esp
    394f:	d2 01                	rol    BYTE PTR [ecx],cl
    3951:	00 00                	add    BYTE PTR [eax],al
    3953:	02 91 58 15 66 6a    	add    dl,BYTE PTR [ecx+0x6a661558]
    3959:	00 01                	add    BYTE PTR [ecx],al
    395b:	44                   	inc    esp
    395c:	d2 01                	rol    BYTE PTR [ecx],cl
    395e:	00 00                	add    BYTE PTR [eax],al
    3960:	02 91 50 15 70 00    	add    dl,BYTE PTR [ecx+0x701550]
    3966:	01 45 72             	add    DWORD PTR [ebp+0x72],eax
    3969:	00 00                	add    BYTE PTR [eax],al
    396b:	00 02                	add    BYTE PTR [edx],al
    396d:	91                   	xchg   ecx,eax
    396e:	68 15 70 31 00       	push   0x317015
    3973:	01 45 72             	add    DWORD PTR [ebp+0x72],eax
    3976:	00 00                	add    BYTE PTR [eax],al
    3978:	00 02                	add    BYTE PTR [edx],al
    397a:	91                   	xchg   ecx,eax
    397b:	64 00 04 04          	add    BYTE PTR fs:[esp+eax*1],al
    397f:	4f                   	dec    edi
    3980:	00 00                	add    BYTE PTR [eax],al
    3982:	00 16                	add    BYTE PTR [esi],dl
    3984:	57                   	push   edi
    3985:	0f 00 00             	sldt   WORD PTR [eax]
    3988:	01 8a 4f 00 00 00    	add    DWORD PTR [edx+0x4f],ecx
    398e:	5f                   	pop    edi
    398f:	35 00 9f 64 00       	xor    eax,0x649f00
    3994:	00 00                	add    BYTE PTR [eax],al
    3996:	01 9c 08 03 00 00 14 	add    DWORD PTR [eax+ecx*1+0x14000003],ebx
    399d:	73 00                	jae    399f <__fmodf2+0x3973>
    399f:	01 8a 08 03 00 00    	add    DWORD PTR [edx+0x308],ecx
    39a5:	02 91 00 15 69 00    	add    dl,BYTE PTR [ecx+0x691500]
    39ab:	01 8b 4f 00 00 00    	add    DWORD PTR [ebx+0x4f],ecx
    39b1:	02 91 70 00 04 04    	add    dl,BYTE PTR [ecx+0x4040070]
    39b7:	a0 00 00 00 16       	mov    al,ds:0x16000000
    39bc:	84 0f                	test   BYTE PTR [edi],cl
    39be:	00 00                	add    BYTE PTR [eax],al
    39c0:	01 90 72 00 00 00    	add    DWORD PTR [eax+0x72],edx
    39c6:	c3                   	ret    
    39c7:	35 00 9f 49 02       	xor    eax,0x2499f00
    39cc:	00 00                	add    BYTE PTR [eax],al
    39ce:	01 9c bf 03 00 00 14 	add    DWORD PTR [edi+edi*4+0x14000003],ebx
    39d5:	73 74                	jae    3a4b <__fmodf2+0x3a1f>
    39d7:	72 00                	jb     39d9 <__fmodf2+0x39ad>
    39d9:	01 90 72 00 00 00    	add    DWORD PTR [eax+0x72],edx
    39df:	02 91 00 14 6e 75    	add    dl,BYTE PTR [ecx+0x756e1400]
    39e5:	6d                   	ins    DWORD PTR es:[edi],dx
    39e6:	00 01                	add    BYTE PTR [ecx],al
    39e8:	90                   	nop
    39e9:	64 00 00             	add    BYTE PTR fs:[eax],al
    39ec:	00 02                	add    BYTE PTR [edx],al
    39ee:	91                   	xchg   ecx,eax
    39ef:	04 10                	add    al,0x10
    39f1:	8b 0f                	mov    ecx,DWORD PTR [edi]
    39f3:	00 00                	add    BYTE PTR [eax],al
    39f5:	01 90 4f 00 00 00    	add    DWORD PTR [eax+0x4f],edx
    39fb:	02 91 08 10 58 07    	add    dl,BYTE PTR [ecx+0x7581008]
    3a01:	00 00                	add    BYTE PTR [eax],al
    3a03:	01 90 4f 00 00 00    	add    DWORD PTR [eax+0x4f],edx
    3a09:	02 91 0c 10 a5 0f    	add    dl,BYTE PTR [ecx+0xfa5100c]
    3a0f:	00 00                	add    BYTE PTR [eax],al
    3a11:	01 90 4f 00 00 00    	add    DWORD PTR [eax+0x4f],edx
    3a17:	02 91 10 10 2e 01    	add    dl,BYTE PTR [ecx+0x12e1010]
    3a1d:	00 00                	add    BYTE PTR [eax],al
    3a1f:	01 90 4f 00 00 00    	add    DWORD PTR [eax+0x4f],edx
    3a25:	02 91 14 15 63 00    	add    dl,BYTE PTR [ecx+0x631514]
    3a2b:	01 91 78 00 00 00    	add    DWORD PTR [ecx+0x78],edx
    3a31:	02 91 63 17 d2 01    	add    dl,BYTE PTR [ecx+0x1d21763]
    3a37:	00 00                	add    BYTE PTR [eax],al
    3a39:	01 91 78 00 00 00    	add    DWORD PTR [ecx+0x78],edx
    3a3f:	02 91 6f 15 74 6d    	add    dl,BYTE PTR [ecx+0x6d74156f]
    3a45:	70 00                	jo     3a47 <__fmodf2+0x3a1b>
    3a47:	01 91 bf 03 00 00    	add    DWORD PTR [ecx+0x3bf],edx
    3a4d:	03 91 a1 7f 15 64    	add    edx,DWORD PTR [ecx+0x64157fa1]
    3a53:	69 67 00 01 92 72 00 	imul   esp,DWORD PTR [edi+0x0],0x729201
    3a5a:	00 00                	add    BYTE PTR [eax],al
    3a5c:	02 91 68 15 69 00    	add    dl,BYTE PTR [ecx+0x691568]
    3a62:	01 93 4f 00 00 00    	add    DWORD PTR [ebx+0x4f],edx
    3a68:	02 91 64 00 07 78    	add    dl,BYTE PTR [ecx+0x78070064]
    3a6e:	00 00                	add    BYTE PTR [eax],al
    3a70:	00 cf                	add    bh,cl
    3a72:	03 00                	add    eax,DWORD PTR [eax]
    3a74:	00 08                	add    BYTE PTR [eax],cl
    3a76:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    3a79:	00 41 00             	add    BYTE PTR [ecx+0x0],al
    3a7c:	16                   	push   ss
    3a7d:	86 0e                	xchg   BYTE PTR [esi],cl
    3a7f:	00 00                	add    BYTE PTR [eax],al
    3a81:	01 d2                	add    edx,edx
    3a83:	72 00                	jb     3a85 <__fmodf2+0x3a59>
    3a85:	00 00                	add    BYTE PTR [eax],al
    3a87:	0c 38                	or     al,0x38
    3a89:	00 9f 1a 01 00 00    	add    BYTE PTR [edi+0x11a],bl
    3a8f:	01 9c 65 04 00 00 14 	add    DWORD PTR [ebp+eiz*2+0x14000004],ebx
    3a96:	73 74                	jae    3b0c <__fmodf2+0x3ae0>
    3a98:	72 00                	jb     3a9a <__fmodf2+0x3a6e>
    3a9a:	01 d2                	add    edx,edx
    3a9c:	72 00                	jb     3a9e <__fmodf2+0x3a72>
    3a9e:	00 00                	add    BYTE PTR [eax],al
    3aa0:	02 91 00 10 87 0e    	add    dl,BYTE PTR [ecx+0xe871000]
    3aa6:	00 00                	add    BYTE PTR [eax],al
    3aa8:	01 d2                	add    edx,edx
    3aaa:	65                   	gs
    3aab:	04 00                	add    al,0x0
    3aad:	00 02                	add    BYTE PTR [edx],al
    3aaf:	91                   	xchg   ecx,eax
    3ab0:	04 10                	add    al,0x10
    3ab2:	58                   	pop    eax
    3ab3:	07                   	pop    es
    3ab4:	00 00                	add    BYTE PTR [eax],al
    3ab6:	01 d2                	add    edx,edx
    3ab8:	4f                   	dec    edi
    3ab9:	00 00                	add    BYTE PTR [eax],al
    3abb:	00 02                	add    BYTE PTR [edx],al
    3abd:	91                   	xchg   ecx,eax
    3abe:	08 10                	or     BYTE PTR [eax],dl
    3ac0:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    3ac1:	0f 00 00             	sldt   WORD PTR [eax]
    3ac4:	01 d2                	add    edx,edx
    3ac6:	4f                   	dec    edi
    3ac7:	00 00                	add    BYTE PTR [eax],al
    3ac9:	00 02                	add    BYTE PTR [edx],al
    3acb:	91                   	xchg   ecx,eax
    3acc:	0c 10                	or     al,0x10
    3ace:	2e 01 00             	add    DWORD PTR cs:[eax],eax
    3ad1:	00 01                	add    BYTE PTR [ecx],al
    3ad3:	d2 4f 00             	ror    BYTE PTR [edi+0x0],cl
    3ad6:	00 00                	add    BYTE PTR [eax],al
    3ad8:	02 91 10 15 74 6d    	add    dl,BYTE PTR [ecx+0x6d741510]
    3ade:	70 00                	jo     3ae0 <__fmodf2+0x3ab4>
    3ae0:	01 d3                	add    ebx,edx
    3ae2:	ab                   	stos   DWORD PTR es:[edi],eax
    3ae3:	00 00                	add    BYTE PTR [eax],al
    3ae5:	00 02                	add    BYTE PTR [edx],al
    3ae7:	91                   	xchg   ecx,eax
    3ae8:	54                   	push   esp
    3ae9:	15 64 69 67 00       	adc    eax,0x676964
    3aee:	01 d4                	add    esp,edx
    3af0:	72 00                	jb     3af2 <__fmodf2+0x3ac6>
    3af2:	00 00                	add    BYTE PTR [eax],al
    3af4:	02 91 74 15 69 00    	add    dl,BYTE PTR [ecx+0x691574]
    3afa:	01 d5                	add    ebp,edx
    3afc:	4f                   	dec    edi
    3afd:	00 00                	add    BYTE PTR [eax],al
    3aff:	00 02                	add    BYTE PTR [edx],al
    3b01:	91                   	xchg   ecx,eax
    3b02:	70 15                	jo     3b19 <__fmodf2+0x3aed>
    3b04:	6c                   	ins    BYTE PTR es:[edi],dx
    3b05:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    3b07:	00 01                	add    BYTE PTR [ecx],al
    3b09:	d5 4f                	aad    0x4f
    3b0b:	00 00                	add    BYTE PTR [eax],al
    3b0d:	00 02                	add    BYTE PTR [edx],al
    3b0f:	91                   	xchg   ecx,eax
    3b10:	6c                   	ins    BYTE PTR es:[edi],dx
    3b11:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3b14:	25 00 00 00 16       	and    eax,0x16000000
    3b19:	f4                   	hlt    
    3b1a:	0e                   	push   cs
    3b1b:	00 00                	add    BYTE PTR [eax],al
    3b1d:	01 e6                	add    esi,esp
    3b1f:	72 00                	jb     3b21 <__fmodf2+0x3af5>
    3b21:	00 00                	add    BYTE PTR [eax],al
    3b23:	26 39 00             	cmp    DWORD PTR es:[eax],eax
    3b26:	9f                   	lahf   
    3b27:	1e                   	push   ds
    3b28:	02 00                	add    al,BYTE PTR [eax]
    3b2a:	00 01                	add    BYTE PTR [ecx],al
    3b2c:	9c                   	pushf  
    3b2d:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
    3b30:	00 14 73             	add    BYTE PTR [ebx+esi*2],dl
    3b33:	74 72                	je     3ba7 <__fmodf2+0x3b7b>
    3b35:	00 01                	add    BYTE PTR [ecx],al
    3b37:	e6 72                	out    0x72,al
    3b39:	00 00                	add    BYTE PTR [eax],al
    3b3b:	00 02                	add    BYTE PTR [edx],al
    3b3d:	91                   	xchg   ecx,eax
    3b3e:	00 10                	add    BYTE PTR [eax],dl
    3b40:	87 0e                	xchg   DWORD PTR [esi],ecx
    3b42:	00 00                	add    BYTE PTR [eax],al
    3b44:	01 e6                	add    esi,esp
    3b46:	65                   	gs
    3b47:	04 00                	add    al,0x0
    3b49:	00 02                	add    BYTE PTR [edx],al
    3b4b:	91                   	xchg   ecx,eax
    3b4c:	04 10                	add    al,0x10
    3b4e:	58                   	pop    eax
    3b4f:	07                   	pop    es
    3b50:	00 00                	add    BYTE PTR [eax],al
    3b52:	01 e6                	add    esi,esp
    3b54:	4f                   	dec    edi
    3b55:	00 00                	add    BYTE PTR [eax],al
    3b57:	00 02                	add    BYTE PTR [edx],al
    3b59:	91                   	xchg   ecx,eax
    3b5a:	08 10                	or     BYTE PTR [eax],dl
    3b5c:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    3b5d:	0f 00 00             	sldt   WORD PTR [eax]
    3b60:	01 e6                	add    esi,esp
    3b62:	4f                   	dec    edi
    3b63:	00 00                	add    BYTE PTR [eax],al
    3b65:	00 02                	add    BYTE PTR [edx],al
    3b67:	91                   	xchg   ecx,eax
    3b68:	0c 10                	or     al,0x10
    3b6a:	2e 01 00             	add    DWORD PTR cs:[eax],eax
    3b6d:	00 01                	add    BYTE PTR [ecx],al
    3b6f:	e6 4f                	out    0x4f,al
    3b71:	00 00                	add    BYTE PTR [eax],al
    3b73:	00 02                	add    BYTE PTR [edx],al
    3b75:	91                   	xchg   ecx,eax
    3b76:	10 15 74 6d 70 00    	adc    BYTE PTR ds:0x706d74,dl
    3b7c:	01 e7                	add    edi,esp
    3b7e:	ab                   	stos   DWORD PTR es:[edi],eax
    3b7f:	00 00                	add    BYTE PTR [eax],al
    3b81:	00 02                	add    BYTE PTR [edx],al
    3b83:	91                   	xchg   ecx,eax
    3b84:	48                   	dec    eax
    3b85:	15 69 00 01 e8       	adc    eax,0xe8010069
    3b8a:	4f                   	dec    edi
    3b8b:	00 00                	add    BYTE PTR [eax],al
    3b8d:	00 02                	add    BYTE PTR [edx],al
    3b8f:	91                   	xchg   ecx,eax
    3b90:	68 15 6e 00 01       	push   0x1006e15
    3b95:	e8 4f 00 00 00       	call   3be9 <__fmodf2+0x3bbd>
    3b9a:	02 91 64 15 6c 65    	add    dl,BYTE PTR [ecx+0x656c1564]
    3ba0:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3ba1:	00 01                	add    BYTE PTR [ecx],al
    3ba3:	e8 4f 00 00 00       	call   3bf7 <__fmodf2+0x3bcb>
    3ba8:	02 91 60 00 18 7c    	add    dl,BYTE PTR [ecx+0x7c180060]
    3bae:	0f 00 00             	sldt   WORD PTR [eax]
    3bb1:	01 0c 01             	add    DWORD PTR [ecx+eax*1],ecx
    3bb4:	44                   	inc    esp
    3bb5:	3b 00                	cmp    eax,DWORD PTR [eax]
    3bb7:	9f                   	lahf   
    3bb8:	05 04 00 00 01       	add    eax,0x1000004
    3bbd:	9c                   	pushf  
    3bbe:	cd 05                	int    0x5
    3bc0:	00 00                	add    BYTE PTR [eax],al
    3bc2:	19 33                	sbb    DWORD PTR [ebx],esi
    3bc4:	03 00                	add    eax,DWORD PTR [eax]
    3bc6:	00 01                	add    BYTE PTR [ecx],al
    3bc8:	0c 01                	or     al,0x1
    3bca:	d2 01                	rol    BYTE PTR [ecx],cl
    3bcc:	00 00                	add    BYTE PTR [eax],al
    3bce:	03 91 c8 7b 19 16    	add    edx,DWORD PTR [ecx+0x16197bc8]
    3bd4:	07                   	pop    es
    3bd5:	00 00                	add    BYTE PTR [eax],al
    3bd7:	01 0c 01             	add    DWORD PTR [ecx+eax*1],ecx
    3bda:	72 00                	jb     3bdc <__fmodf2+0x3bb0>
    3bdc:	00 00                	add    BYTE PTR [eax],al
    3bde:	02 91 08 1a 66 6d    	add    dl,BYTE PTR [ecx+0x6d661a08]
    3be4:	74 00                	je     3be6 <__fmodf2+0x3bba>
    3be6:	01 0c 01             	add    DWORD PTR [ecx+eax*1],ecx
    3be9:	78 00                	js     3beb <__fmodf2+0x3bbf>
    3beb:	00 00                	add    BYTE PTR [eax],al
    3bed:	03 91 c4 7b 19 a5    	add    edx,DWORD PTR [ecx-0x5ae6843c]
    3bf3:	0f 00 00             	sldt   WORD PTR [eax]
    3bf6:	01 0c 01             	add    DWORD PTR [ecx+eax*1],ecx
    3bf9:	4f                   	dec    edi
    3bfa:	00 00                	add    BYTE PTR [eax],al
    3bfc:	00 02                	add    BYTE PTR [edx],al
    3bfe:	91                   	xchg   ecx,eax
    3bff:	10 1b                	adc    BYTE PTR [ebx],bl
    3c01:	20 0f                	and    BYTE PTR [edi],cl
    3c03:	00 00                	add    BYTE PTR [eax],al
    3c05:	01 0d 01 4f 00 00    	add    DWORD PTR ds:0x4f01,ecx
    3c0b:	00 02                	add    BYTE PTR [edx],al
    3c0d:	91                   	xchg   ecx,eax
    3c0e:	58                   	pop    eax
    3c0f:	1b d2                	sbb    edx,edx
    3c11:	01 00                	add    DWORD PTR [eax],eax
    3c13:	00 01                	add    BYTE PTR [ecx],al
    3c15:	0d 01 4f 00 00       	or     eax,0x4f01
    3c1a:	00 02                	add    BYTE PTR [edx],al
    3c1c:	91                   	xchg   ecx,eax
    3c1d:	54                   	push   esp
    3c1e:	1c 65                	sbb    al,0x65
    3c20:	78 70                	js     3c92 <__fmodf2+0x3c66>
    3c22:	00 01                	add    BYTE PTR [ecx],al
    3c24:	0d 01 4f 00 00       	or     eax,0x4f01
    3c29:	00 02                	add    BYTE PTR [edx],al
    3c2b:	91                   	xchg   ecx,eax
    3c2c:	6c                   	ins    BYTE PTR es:[edi],dx
    3c2d:	1c 70                	sbb    al,0x70
    3c2f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3c30:	73 00                	jae    3c32 <__fmodf2+0x3c06>
    3c32:	01 0d 01 4f 00 00    	add    DWORD PTR ds:0x4f01,ecx
    3c38:	00 02                	add    BYTE PTR [edx],al
    3c3a:	91                   	xchg   ecx,eax
    3c3b:	68 1b c1 0e 00       	push   0xec11b
    3c40:	00 01                	add    BYTE PTR [ecx],al
    3c42:	0e                   	push   cs
    3c43:	01 72 00             	add    DWORD PTR [edx+0x0],esi
    3c46:	00 00                	add    BYTE PTR [eax],al
    3c48:	02 91 64 1b 62 0f    	add    dl,BYTE PTR [ecx+0xf621b64]
    3c4e:	00 00                	add    BYTE PTR [eax],al
    3c50:	01 0f                	add    DWORD PTR [edi],ecx
    3c52:	01 cd                	add    ebp,ecx
    3c54:	05 00 00 03 91       	add    eax,0x91030000
    3c59:	d4 7b                	aam    0x7b
    3c5b:	1b 9e 0f 00 00 01    	sbb    ebx,DWORD PTR [esi+0x100000f]
    3c61:	10 01                	adc    BYTE PTR [ecx],al
    3c63:	4f                   	dec    edi
    3c64:	00 00                	add    BYTE PTR [eax],al
    3c66:	00 02                	add    BYTE PTR [edx],al
    3c68:	91                   	xchg   ecx,eax
    3c69:	60                   	pusha  
    3c6a:	1b 72 0f             	sbb    esi,DWORD PTR [edx+0xf]
    3c6d:	00 00                	add    BYTE PTR [eax],al
    3c6f:	01 11                	add    DWORD PTR [ecx],edx
    3c71:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    3c74:	00 00                	add    BYTE PTR [eax],al
    3c76:	02 91 5c 00 07 78    	add    dl,BYTE PTR [ecx+0x7807005c]
    3c7c:	00 00                	add    BYTE PTR [eax],al
    3c7e:	00 de                	add    dh,bl
    3c80:	05 00 00 1d 6b       	add    eax,0x6b1d0000
    3c85:	00 00                	add    BYTE PTR [eax],al
    3c87:	00 ff                	add    bh,bh
    3c89:	01 00                	add    DWORD PTR [eax],eax
    3c8b:	18 1c 0f             	sbb    BYTE PTR [edi+ecx*1],bl
    3c8e:	00 00                	add    BYTE PTR [eax],al
    3c90:	01 61 01             	add    DWORD PTR [ecx+0x1],esp
    3c93:	49                   	dec    ecx
    3c94:	3f                   	aas    
    3c95:	00 9f a9 00 00 00    	add    BYTE PTR [edi+0xa9],bl
    3c9b:	01 9c 1b 06 00 00 19 	add    DWORD PTR [ebx+ebx*1+0x19000006],ebx
    3ca2:	16                   	push   ss
    3ca3:	07                   	pop    es
    3ca4:	00 00                	add    BYTE PTR [eax],al
    3ca6:	01 61 01             	add    DWORD PTR [ecx+0x1],esp
    3ca9:	72 00                	jb     3cab <__fmodf2+0x3c7f>
    3cab:	00 00                	add    BYTE PTR [eax],al
    3cad:	02 91 00 1e 99 3f    	add    dl,BYTE PTR [ecx+0x3f991e00]
    3cb3:	00 9f 3d 00 00 00    	add    BYTE PTR [edi+0x3d],bl
    3cb9:	1c 6e                	sbb    al,0x6e
    3cbb:	00 01                	add    BYTE PTR [ecx],al
    3cbd:	69 01 4f 00 00 00    	imul   eax,DWORD PTR [ecx],0x4f
    3cc3:	02 91 6c 00 00 1f    	add    dl,BYTE PTR [ecx+0x1f00006c]
    3cc9:	12 0f                	adc    cl,BYTE PTR [edi]
    3ccb:	00 00                	add    BYTE PTR [eax],al
    3ccd:	01 76 01             	add    DWORD PTR [esi+0x1],esi
    3cd0:	f2 3f                	repnz aas 
    3cd2:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
    3cd8:	01 9c 50 06 00 00 19 	add    DWORD PTR [eax+edx*2+0x19000006],ebx
    3cdf:	16                   	push   ss
    3ce0:	07                   	pop    es
    3ce1:	00 00                	add    BYTE PTR [eax],al
    3ce3:	01 76 01             	add    DWORD PTR [esi+0x1],esi
    3ce6:	72 00                	jb     3ce8 <__fmodf2+0x3cbc>
    3ce8:	00 00                	add    BYTE PTR [eax],al
    3cea:	02 91 00 1b 7e 0a    	add    dl,BYTE PTR [ecx+0xa7e1b00]
    3cf0:	00 00                	add    BYTE PTR [eax],al
    3cf2:	01 77 01             	add    DWORD PTR [edi+0x1],esi
    3cf5:	72 00                	jb     3cf7 <__fmodf2+0x3ccb>
    3cf7:	00 00                	add    BYTE PTR [eax],al
    3cf9:	02 91 74 00 20 66    	add    dl,BYTE PTR [ecx+0x66200074]
    3cff:	6c                   	ins    BYTE PTR es:[edi],dx
    3d00:	74 00                	je     3d02 <__fmodf2+0x3cd6>
    3d02:	01 83 01 72 00 00    	add    DWORD PTR [ebx+0x7201],eax
    3d08:	00 9c 40 00 9f 16 02 	add    BYTE PTR [eax+eax*2+0x2169f00],bl
    3d0f:	00 00                	add    BYTE PTR [eax],al
    3d11:	01 9c 0d 07 00 00 1a 	add    DWORD PTR [ebp+ecx*1+0x1a000007],ebx
    3d18:	73 74                	jae    3d8e <__fmodf2+0x3d62>
    3d1a:	72 00                	jb     3d1c <__fmodf2+0x3cf0>
    3d1c:	01 83 01 72 00 00    	add    DWORD PTR [ebx+0x7201],eax
    3d22:	00 02                	add    BYTE PTR [edx],al
    3d24:	91                   	xchg   ecx,eax
    3d25:	00 1a                	add    BYTE PTR [edx],bl
    3d27:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3d28:	75 6d                	jne    3d97 <__fmodf2+0x3d6b>
    3d2a:	00 01                	add    BYTE PTR [ecx],al
    3d2c:	83 01 d2             	add    DWORD PTR [ecx],0xffffffd2
    3d2f:	01 00                	add    DWORD PTR [eax],eax
    3d31:	00 03                	add    BYTE PTR [ebx],al
    3d33:	91                   	xchg   ecx,eax
    3d34:	d8 7b 19             	fdivr  DWORD PTR [ebx+0x19]
    3d37:	58                   	pop    eax
    3d38:	07                   	pop    es
    3d39:	00 00                	add    BYTE PTR [eax],al
    3d3b:	01 83 01 4f 00 00    	add    DWORD PTR [ebx+0x4f01],eax
    3d41:	00 02                	add    BYTE PTR [edx],al
    3d43:	91                   	xchg   ecx,eax
    3d44:	0c 19                	or     al,0x19
    3d46:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    3d47:	0f 00 00             	sldt   WORD PTR [eax]
    3d4a:	01 83 01 4f 00 00    	add    DWORD PTR [ebx+0x4f01],eax
    3d50:	00 02                	add    BYTE PTR [edx],al
    3d52:	91                   	xchg   ecx,eax
    3d53:	10 1a                	adc    BYTE PTR [edx],bl
    3d55:	66 6d                	ins    WORD PTR es:[edi],dx
    3d57:	74 00                	je     3d59 <__fmodf2+0x3d2d>
    3d59:	01 83 01 78 00 00    	add    DWORD PTR [ebx+0x7801],eax
    3d5f:	00 03                	add    BYTE PTR [ebx],al
    3d61:	91                   	xchg   ecx,eax
    3d62:	d4 7b                	aam    0x7b
    3d64:	19 a4 0a 00 00 01 83 	sbb    DWORD PTR [edx+ecx*1-0x7cff0000],esp
    3d6b:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    3d6e:	00 00                	add    BYTE PTR [eax],al
    3d70:	02 91 18 1b 62 0f    	add    dl,BYTE PTR [ecx+0xf621b18]
    3d76:	00 00                	add    BYTE PTR [eax],al
    3d78:	01 84 01 cd 05 00 00 	add    DWORD PTR [ecx+eax*1+0x5cd],eax
    3d7f:	03 91 e0 7b 1c 63    	add    edx,DWORD PTR [ecx+0x631c7be0]
    3d85:	00 01                	add    BYTE PTR [ecx],al
    3d87:	85 01                	test   DWORD PTR [ecx],eax
    3d89:	78 00                	js     3d8b <__fmodf2+0x3d5f>
    3d8b:	00 00                	add    BYTE PTR [eax],al
    3d8d:	02 91 67 1b d2 01    	add    dl,BYTE PTR [ecx+0x1d21b67]
    3d93:	00 00                	add    BYTE PTR [eax],al
    3d95:	01 85 01 78 00 00    	add    DWORD PTR [ebp+0x7801],eax
    3d9b:	00 02                	add    BYTE PTR [edx],al
    3d9d:	91                   	xchg   ecx,eax
    3d9e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3d9f:	1c 6e                	sbb    al,0x6e
    3da1:	00 01                	add    BYTE PTR [ecx],al
    3da3:	86 01                	xchg   BYTE PTR [ecx],al
    3da5:	4f                   	dec    edi
    3da6:	00 00                	add    BYTE PTR [eax],al
    3da8:	00 02                	add    BYTE PTR [edx],al
    3daa:	91                   	xchg   ecx,eax
    3dab:	60                   	pusha  
    3dac:	1c 69                	sbb    al,0x69
    3dae:	00 01                	add    BYTE PTR [ecx],al
    3db0:	86 01                	xchg   BYTE PTR [ecx],al
    3db2:	4f                   	dec    edi
    3db3:	00 00                	add    BYTE PTR [eax],al
    3db5:	00 02                	add    BYTE PTR [edx],al
    3db7:	91                   	xchg   ecx,eax
    3db8:	68 00 21 03 0f       	push   0xf032100
    3dbd:	00 00                	add    BYTE PTR [eax],al
    3dbf:	01 bb 01 4f 00 00    	add    DWORD PTR [ebx+0x4f01],edi
    3dc5:	00 b2 42 00 9f d6    	add    BYTE PTR [edx-0x2960ffbe],dh
    3dcb:	04 00                	add    al,0x0
    3dcd:	00 01                	add    BYTE PTR [ecx],al
    3dcf:	9c                   	pushf  
    3dd0:	43                   	inc    ebx
    3dd1:	08 00                	or     BYTE PTR [eax],al
    3dd3:	00 1a                	add    BYTE PTR [edx],bl
    3dd5:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    3dd8:	00 01                	add    BYTE PTR [ecx],al
    3dda:	bb 01 72 00 00       	mov    ebx,0x7201
    3ddf:	00 02                	add    BYTE PTR [edx],al
    3de1:	91                   	xchg   ecx,eax
    3de2:	00 1a                	add    BYTE PTR [edx],bl
    3de4:	66 6d                	ins    WORD PTR es:[edi],dx
    3de6:	74 00                	je     3de8 <__fmodf2+0x3dbc>
    3de8:	01 bb 01 a0 00 00    	add    DWORD PTR [ebx+0xa001],edi
    3dee:	00 02                	add    BYTE PTR [edx],al
    3df0:	91                   	xchg   ecx,eax
    3df1:	04 19                	add    al,0x19
    3df3:	72 0a                	jb     3dff <__fmodf2+0x3dd3>
    3df5:	00 00                	add    BYTE PTR [eax],al
    3df7:	01 bb 01 d0 00 00    	add    DWORD PTR [ebx+0xd001],edi
    3dfd:	00 02                	add    BYTE PTR [edx],al
    3dff:	91                   	xchg   ecx,eax
    3e00:	08 1c 6c             	or     BYTE PTR [esp+ebp*2],bl
    3e03:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    3e05:	00 01                	add    BYTE PTR [ecx],al
    3e07:	bc 01 4f 00 00       	mov    esp,0x4f01
    3e0c:	00 02                	add    BYTE PTR [edx],al
    3e0e:	91                   	xchg   ecx,eax
    3e0f:	48                   	dec    eax
    3e10:	1c 6e                	sbb    al,0x6e
    3e12:	75 6d                	jne    3e81 <__fmodf2+0x3e55>
    3e14:	00 01                	add    BYTE PTR [ecx],al
    3e16:	bd 01 3a 00 00       	mov    ebp,0x3a01
    3e1b:	00 02                	add    BYTE PTR [edx],al
    3e1d:	91                   	xchg   ecx,eax
    3e1e:	6c                   	ins    BYTE PTR es:[edi],dx
    3e1f:	1c 69                	sbb    al,0x69
    3e21:	00 01                	add    BYTE PTR [ecx],al
    3e23:	be 01 4f 00 00       	mov    esi,0x4f01
    3e28:	00 02                	add    BYTE PTR [edx],al
    3e2a:	91                   	xchg   ecx,eax
    3e2b:	68 1b 8b 0f 00       	push   0xf8b1b
    3e30:	00 01                	add    BYTE PTR [ecx],al
    3e32:	be 01 4f 00 00       	mov    esi,0x4f01
    3e37:	00 02                	add    BYTE PTR [edx],al
    3e39:	91                   	xchg   ecx,eax
    3e3a:	64                   	fs
    3e3b:	1c 73                	sbb    al,0x73
    3e3d:	74 72                	je     3eb1 <__fmodf2+0x3e85>
    3e3f:	00 01                	add    BYTE PTR [ecx],al
    3e41:	bf 01 72 00 00       	mov    edi,0x7201
    3e46:	00 02                	add    BYTE PTR [edx],al
    3e48:	91                   	xchg   ecx,eax
    3e49:	60                   	pusha  
    3e4a:	1c 73                	sbb    al,0x73
    3e4c:	00 01                	add    BYTE PTR [ecx],al
    3e4e:	c0 01 72             	rol    BYTE PTR [ecx],0x72
    3e51:	00 00                	add    BYTE PTR [eax],al
    3e53:	00 02                	add    BYTE PTR [edx],al
    3e55:	91                   	xchg   ecx,eax
    3e56:	5c                   	pop    esp
    3e57:	1b a4 0a 00 00 01 c2 	sbb    esp,DWORD PTR [edx+ecx*1-0x3dff0000]
    3e5e:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    3e61:	00 00                	add    BYTE PTR [eax],al
    3e63:	02 91 58 1b 5e 0e    	add    dl,BYTE PTR [ecx+0xe5e1b58]
    3e69:	00 00                	add    BYTE PTR [eax],al
    3e6b:	01 c4                	add    esp,eax
    3e6d:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    3e70:	00 00                	add    BYTE PTR [eax],al
    3e72:	02 91 54 1b a5 0f    	add    dl,BYTE PTR [ecx+0xfa51b54]
    3e78:	00 00                	add    BYTE PTR [eax],al
    3e7a:	01 c5                	add    ebp,eax
    3e7c:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    3e7f:	00 00                	add    BYTE PTR [eax],al
    3e81:	02 91 50 1b 4d 0f    	add    dl,BYTE PTR [ecx+0xf4d1b50]
    3e87:	00 00                	add    BYTE PTR [eax],al
    3e89:	01 c6                	add    esi,eax
    3e8b:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    3e8e:	00 00                	add    BYTE PTR [eax],al
    3e90:	02 91 4c 22 72 0e    	add    dl,BYTE PTR [ecx+0xe72224c]
    3e96:	00 00                	add    BYTE PTR [eax],al
    3e98:	01 d0                	add    eax,edx
    3e9a:	01 f7                	add    edi,esi
    3e9c:	42                   	inc    edx
    3e9d:	00 9f 1e 68 44 00    	add    BYTE PTR [edi+0x44681e],bl
    3ea3:	9f                   	lahf   
    3ea4:	7f 02                	jg     3ea8 <__fmodf2+0x3e7c>
    3ea6:	00 00                	add    BYTE PTR [eax],al
    3ea8:	23 69 0f             	and    ebp,DWORD PTR [ecx+0xf]
    3eab:	00 00                	add    BYTE PTR [eax],al
    3ead:	01 08                	add    DWORD PTR [eax],ecx
    3eaf:	02 4f 00             	add    cl,BYTE PTR [edi+0x0]
    3eb2:	00 00                	add    BYTE PTR [eax],al
    3eb4:	0d 08 00 00 12       	or     eax,0x12000008
    3eb9:	00 24 a5 45 00 9f 1b 	add    BYTE PTR [eiz*4+0x1b9f0045],ah
    3ec0:	00 00                	add    BYTE PTR [eax],al
    3ec2:	00 29                	add    BYTE PTR [ecx],ch
    3ec4:	08 00                	or     BYTE PTR [eax],al
    3ec6:	00 1c 69             	add    BYTE PTR [ecx+ebp*2],bl
    3ec9:	70 00                	jo     3ecb <__fmodf2+0x3e9f>
    3ecb:	01 18                	add    DWORD PTR [eax],ebx
    3ecd:	02 43 08             	add    al,BYTE PTR [ebx+0x8]
    3ed0:	00 00                	add    BYTE PTR [eax],al
    3ed2:	02 91 44 00 1e c5    	add    dl,BYTE PTR [ecx-0x3ae1ffbc]
    3ed8:	45                   	inc    ebp
    3ed9:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
    3edf:	1c 69                	sbb    al,0x69
    3ee1:	70 00                	jo     3ee3 <__fmodf2+0x3eb7>
    3ee3:	01 1b                	add    DWORD PTR [ebx],ebx
    3ee5:	02 d0                	add    dl,al
    3ee7:	02 00                	add    al,BYTE PTR [eax]
    3ee9:	00 02                	add    BYTE PTR [edx],al
    3eeb:	91                   	xchg   ecx,eax
    3eec:	40                   	inc    eax
    3eed:	00 00                	add    BYTE PTR [eax],al
    3eef:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3ef2:	64 00 00             	add    BYTE PTR fs:[eax],al
    3ef5:	00 21                	add    BYTE PTR [ecx],ah
    3ef7:	04 0f                	add    al,0xf
    3ef9:	00 00                	add    BYTE PTR [eax],al
    3efb:	01 69 02             	add    DWORD PTR [ecx+0x2],ebp
    3efe:	4f                   	dec    edi
    3eff:	00 00                	add    BYTE PTR [eax],al
    3f01:	00 88 47 00 9f 33    	add    BYTE PTR [eax+0x339f0047],cl
    3f07:	00 00                	add    BYTE PTR [eax],al
    3f09:	00 01                	add    BYTE PTR [ecx],al
    3f0b:	9c                   	pushf  
    3f0c:	9f                   	lahf   
    3f0d:	08 00                	or     BYTE PTR [eax],al
    3f0f:	00 1a                	add    BYTE PTR [edx],bl
    3f11:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    3f14:	00 01                	add    BYTE PTR [ecx],al
    3f16:	69 02 72 00 00 00    	imul   eax,DWORD PTR [edx],0x72
    3f1c:	02 91 00 1a 66 6d    	add    dl,BYTE PTR [ecx+0x6d661a00]
    3f22:	74 00                	je     3f24 <__fmodf2+0x3ef8>
    3f24:	01 69 02             	add    DWORD PTR [ecx+0x2],ebp
    3f27:	a0 00 00 00 02       	mov    al,ds:0x2000000
    3f2c:	91                   	xchg   ecx,eax
    3f2d:	04 12                	add    al,0x12
    3f2f:	1b 72 0a             	sbb    esi,DWORD PTR [edx+0xa]
    3f32:	00 00                	add    BYTE PTR [eax],al
    3f34:	01 6a 02             	add    DWORD PTR [edx+0x2],ebp
    3f37:	d0 00                	rol    BYTE PTR [eax],1
    3f39:	00 00                	add    BYTE PTR [eax],al
    3f3b:	02 91 68 1c 6e 00    	add    dl,BYTE PTR [ecx+0x6e1c68]
    3f41:	01 6b 02             	add    DWORD PTR [ebx+0x2],ebp
    3f44:	4f                   	dec    edi
    3f45:	00 00                	add    BYTE PTR [eax],al
    3f47:	00 02                	add    BYTE PTR [edx],al
    3f49:	91                   	xchg   ecx,eax
    3f4a:	6c                   	ins    BYTE PTR es:[edi],dx
    3f4b:	00 21                	add    BYTE PTR [ecx],ah
    3f4d:	c8 0e 00 00          	enter  0xe,0x0
    3f51:	01 74 02 72          	add    DWORD PTR [edx+eax*1+0x72],esi
    3f55:	00 00                	add    BYTE PTR [eax],al
    3f57:	00 bb 47 00 9f 3d    	add    BYTE PTR [ebx+0x3d9f0047],bh
    3f5d:	00 00                	add    BYTE PTR [eax],al
    3f5f:	00 01                	add    BYTE PTR [ecx],al
    3f61:	9c                   	pushf  
    3f62:	05 09 00 00 1a       	add    eax,0x1a000009
    3f67:	61                   	popa   
    3f68:	72 67                	jb     3fd1 <__fmodf2+0x3fa5>
    3f6a:	00 01                	add    BYTE PTR [ecx],al
    3f6c:	74 02                	je     3f70 <__fmodf2+0x3f44>
    3f6e:	d2 01                	rol    BYTE PTR [ecx],cl
    3f70:	00 00                	add    BYTE PTR [eax],al
    3f72:	02 91 68 19 6a 0e    	add    dl,BYTE PTR [ecx+0xe6a1968]
    3f78:	00 00                	add    BYTE PTR [eax],al
    3f7a:	01 74 02 4f          	add    DWORD PTR [edx+eax*1+0x4f],esi
    3f7e:	00 00                	add    BYTE PTR [eax],al
    3f80:	00 02                	add    BYTE PTR [edx],al
    3f82:	91                   	xchg   ecx,eax
    3f83:	08 19                	or     BYTE PTR [ecx],bl
    3f85:	20 0f                	and    BYTE PTR [edi],cl
    3f87:	00 00                	add    BYTE PTR [eax],al
    3f89:	01 74 02 d0          	add    DWORD PTR [edx+eax*1-0x30],esi
    3f8d:	02 00                	add    al,BYTE PTR [eax]
    3f8f:	00 02                	add    BYTE PTR [edx],al
    3f91:	91                   	xchg   ecx,eax
    3f92:	0c 19                	or     al,0x19
    3f94:	d2 01                	rol    BYTE PTR [ecx],cl
    3f96:	00 00                	add    BYTE PTR [eax],al
    3f98:	01 74 02 d0          	add    DWORD PTR [edx+eax*1-0x30],esi
    3f9c:	02 00                	add    al,BYTE PTR [eax]
    3f9e:	00 02                	add    BYTE PTR [edx],al
    3fa0:	91                   	xchg   ecx,eax
    3fa1:	10 1a                	adc    BYTE PTR [edx],bl
    3fa3:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    3fa6:	00 01                	add    BYTE PTR [ecx],al
    3fa8:	74 02                	je     3fac <__fmodf2+0x3f80>
    3faa:	72 00                	jb     3fac <__fmodf2+0x3f80>
    3fac:	00 00                	add    BYTE PTR [eax],al
    3fae:	02 91 14 00 21 61    	add    dl,BYTE PTR [ecx+0x61210014]
    3fb4:	0f 00 00             	sldt   WORD PTR [eax]
    3fb7:	01 78 02             	add    DWORD PTR [eax+0x2],edi
    3fba:	72 00                	jb     3fbc <__fmodf2+0x3f90>
    3fbc:	00 00                	add    BYTE PTR [eax],al
    3fbe:	f8                   	clc    
    3fbf:	47                   	inc    edi
    3fc0:	00 9f 3d 00 00 00    	add    BYTE PTR [edi+0x3d],bl
    3fc6:	01 9c 6b 09 00 00 1a 	add    DWORD PTR [ebx+ebp*2+0x1a000009],ebx
    3fcd:	61                   	popa   
    3fce:	72 67                	jb     4037 <__fmodf2+0x400b>
    3fd0:	00 01                	add    BYTE PTR [ecx],al
    3fd2:	78 02                	js     3fd6 <__fmodf2+0x3faa>
    3fd4:	d2 01                	rol    BYTE PTR [ecx],cl
    3fd6:	00 00                	add    BYTE PTR [eax],al
    3fd8:	02 91 68 19 6a 0e    	add    dl,BYTE PTR [ecx+0xe6a1968]
    3fde:	00 00                	add    BYTE PTR [eax],al
    3fe0:	01 78 02             	add    DWORD PTR [eax+0x2],edi
    3fe3:	4f                   	dec    edi
    3fe4:	00 00                	add    BYTE PTR [eax],al
    3fe6:	00 02                	add    BYTE PTR [edx],al
    3fe8:	91                   	xchg   ecx,eax
    3fe9:	08 19                	or     BYTE PTR [ecx],bl
    3feb:	20 0f                	and    BYTE PTR [edi],cl
    3fed:	00 00                	add    BYTE PTR [eax],al
    3fef:	01 78 02             	add    DWORD PTR [eax+0x2],edi
    3ff2:	d0 02                	rol    BYTE PTR [edx],1
    3ff4:	00 00                	add    BYTE PTR [eax],al
    3ff6:	02 91 0c 19 d2 01    	add    dl,BYTE PTR [ecx+0x1d2190c]
    3ffc:	00 00                	add    BYTE PTR [eax],al
    3ffe:	01 78 02             	add    DWORD PTR [eax+0x2],edi
    4001:	d0 02                	rol    BYTE PTR [edx],1
    4003:	00 00                	add    BYTE PTR [eax],al
    4005:	02 91 10 1a 62 75    	add    dl,BYTE PTR [ecx+0x75621a10]
    400b:	66                   	data16
    400c:	00 01                	add    BYTE PTR [ecx],al
    400e:	78 02                	js     4012 <__fmodf2+0x3fe6>
    4010:	72 00                	jb     4012 <__fmodf2+0x3fe6>
    4012:	00 00                	add    BYTE PTR [eax],al
    4014:	02 91 14 00 21 fa    	add    dl,BYTE PTR [ecx-0x5deffec]
    401a:	0e                   	push   cs
    401b:	00 00                	add    BYTE PTR [eax],al
    401d:	01 7c 02 4f          	add    DWORD PTR [edx+eax*1+0x4f],edi
    4021:	00 00                	add    BYTE PTR [eax],al
    4023:	00 35 48 00 9f 33    	add    BYTE PTR ds:0x339f0048,dh
    4029:	00 00                	add    BYTE PTR [eax],al
    402b:	00 01                	add    BYTE PTR [ecx],al
    402d:	9c                   	pushf  
    402e:	c1 09 00             	ror    DWORD PTR [ecx],0x0
    4031:	00 1a                	add    BYTE PTR [edx],bl
    4033:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    4036:	00 01                	add    BYTE PTR [ecx],al
    4038:	7c 02                	jl     403c <__fmodf2+0x4010>
    403a:	72 00                	jb     403c <__fmodf2+0x4010>
    403c:	00 00                	add    BYTE PTR [eax],al
    403e:	02 91 00 1a 66 6d    	add    dl,BYTE PTR [ecx+0x6d661a00]
    4044:	74 00                	je     4046 <__fmodf2+0x401a>
    4046:	01 7c 02 a0          	add    DWORD PTR [edx+eax*1-0x60],edi
    404a:	00 00                	add    BYTE PTR [eax],al
    404c:	00 02                	add    BYTE PTR [edx],al
    404e:	91                   	xchg   ecx,eax
    404f:	04 12                	add    al,0x12
    4051:	1b 72 0a             	sbb    esi,DWORD PTR [edx+0xa]
    4054:	00 00                	add    BYTE PTR [eax],al
    4056:	01 7e 02             	add    DWORD PTR [esi+0x2],edi
    4059:	d0 00                	rol    BYTE PTR [eax],1
    405b:	00 00                	add    BYTE PTR [eax],al
    405d:	02 91 68 1c 69 00    	add    dl,BYTE PTR [ecx+0x691c68]
    4063:	01 7f 02             	add    DWORD PTR [edi+0x2],edi
    4066:	4f                   	dec    edi
    4067:	00 00                	add    BYTE PTR [eax],al
    4069:	00 02                	add    BYTE PTR [edx],al
    406b:	91                   	xchg   ecx,eax
    406c:	6c                   	ins    BYTE PTR es:[edi],dx
    406d:	00 17                	add    BYTE PTR [edi],dl
    406f:	c1 0e 00             	ror    DWORD PTR [esi],0x0
    4072:	00 01                	add    BYTE PTR [ecx],al
    4074:	3a 72 00             	cmp    dh,BYTE PTR [edx+0x0]
    4077:	00 00                	add    BYTE PTR [eax],al
    4079:	05 03 1c 92 00       	add    eax,0x921c03
    407e:	9f                   	lahf   
    407f:	17                   	pop    ss
    4080:	bb 0e 00 00 01       	mov    ebx,0x100000e
    4085:	3b 72 00             	cmp    esi,DWORD PTR [edx+0x0]
    4088:	00 00                	add    BYTE PTR [eax],al
    408a:	05 03 20 92 00       	add    eax,0x922003
    408f:	9f                   	lahf   
    4090:	25 a2 0e 00 00       	and    eax,0xea2
    4095:	04 63                	add    al,0x63
    4097:	5c                   	pop    esp
    4098:	01 00                	add    DWORD PTR [eax],eax
    409a:	00 05 03 d4 92 00    	add    BYTE PTR ds:0x92d403,al
    40a0:	9f                   	lahf   
    40a1:	25 31 0f 00 00       	and    eax,0xf31
    40a6:	04 e1                	add    al,0xe1
    40a8:	ab                   	stos   DWORD PTR es:[edi],eax
    40a9:	01 00                	add    DWORD PTR [eax],eax
    40ab:	00 05 03 d0 92 00    	add    BYTE PTR ds:0x92d003,al
    40b1:	9f                   	lahf   
    40b2:	25 78 00 00 00       	and    eax,0x78
    40b7:	05 33 16 0a 00       	add    eax,0xa1633
    40bc:	00 05 03 40 92 00    	add    BYTE PTR ds:0x924003,al
    40c2:	9f                   	lahf   
    40c3:	04 04                	add    al,0x4
    40c5:	72 00                	jb     40c7 <__fmodf2+0x409b>
    40c7:	00 00                	add    BYTE PTR [eax],al
    40c9:	25 10 02 00 00       	and    eax,0x210
    40ce:	06                   	push   es
    40cf:	35 2d 0a 00 00       	xor    eax,0xa2d
    40d4:	05 03 50 92 00       	add    eax,0x925003
    40d9:	9f                   	lahf   
    40da:	04 04                	add    al,0x4
    40dc:	95                   	xchg   ebp,eax
    40dd:	00 00                	add    BYTE PTR [eax],al
    40df:	00 25 33 02 00 00    	add    BYTE PTR ds:0x233,ah
    40e5:	06                   	push   es
    40e6:	36 8a 00             	mov    al,BYTE PTR ss:[eax]
    40e9:	00 00                	add    BYTE PTR [eax],al
    40eb:	05 03 4c 92 00       	add    eax,0x924c03
    40f0:	9f                   	lahf   
    40f1:	00 dc                	add    ah,bl
    40f3:	00 00                	add    BYTE PTR [eax],al
    40f5:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    40f8:	06                   	push   es
    40f9:	11 00                	adc    DWORD PTR [eax],eax
    40fb:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    40fe:	c3                   	ret    
    40ff:	00 00                	add    BYTE PTR [eax],al
    4101:	00 0c b7             	add    BYTE PTR [edi+esi*4],cl
    4104:	0f 00 00             	sldt   WORD PTR [eax]
    4107:	4d                   	dec    ebp
    4108:	00 00                	add    BYTE PTR [eax],al
    410a:	00 68 48             	add    BYTE PTR [eax+0x48],ch
    410d:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
    4113:	a3 16 00 00 02       	mov    ds:0x2000016,eax
    4118:	01 08                	add    DWORD PTR [eax],ecx
    411a:	3f                   	aas    
    411b:	00 00                	add    BYTE PTR [eax],al
    411d:	00 02                	add    BYTE PTR [edx],al
    411f:	02 07                	add    al,BYTE PTR [edi]
    4121:	0e                   	push   cs
    4122:	00 00                	add    BYTE PTR [eax],al
    4124:	00 02                	add    BYTE PTR [edx],al
    4126:	04 07                	add    al,0x7
    4128:	32 00                	xor    al,BYTE PTR [eax]
    412a:	00 00                	add    BYTE PTR [eax],al
    412c:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    412f:	2d 00 00 00 02       	sub    eax,0x2000000
    4134:	01 06                	add    DWORD PTR [esi],eax
    4136:	41                   	inc    ecx
    4137:	00 00                	add    BYTE PTR [eax],al
    4139:	00 02                	add    BYTE PTR [edx],al
    413b:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    4141:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    4148:	02 08                	add    cl,BYTE PTR [eax]
    414a:	05 00 00 00 00       	add    eax,0x0
    414f:	02 08                	add    cl,BYTE PTR [eax]
    4151:	07                   	pop    es
    4152:	28 00                	sub    BYTE PTR [eax],al
    4154:	00 00                	add    BYTE PTR [eax],al
    4156:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    415d:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    4160:	2a 01                	sub    al,BYTE PTR [ecx]
    4162:	00 00                	add    BYTE PTR [eax],al
    4164:	04 04                	add    al,0x4
    4166:	78 00                	js     4168 <__fmodf2+0x413c>
    4168:	00 00                	add    BYTE PTR [eax],al
    416a:	02 01                	add    al,BYTE PTR [ecx]
    416c:	06                   	push   es
    416d:	48                   	dec    eax
    416e:	00 00                	add    BYTE PTR [eax],al
    4170:	00 02                	add    BYTE PTR [edx],al
    4172:	0c 04                	or     al,0x4
    4174:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4175:	00 00                	add    BYTE PTR [eax],al
    4177:	00 05 c3 0f 00 00    	add    BYTE PTR ds:0xfc3,al
    417d:	01 11                	add    DWORD PTR [ecx],edx
    417f:	68 48 00 9f 84       	push   0x849f0048
    4184:	00 00                	add    BYTE PTR [eax],al
    4186:	00 01                	add    BYTE PTR [ecx],al
    4188:	9c                   	pushf  
    4189:	b8 00 00 00 06       	mov    eax,0x6000000
    418e:	cc                   	int3   
    418f:	0f 00 00             	sldt   WORD PTR [eax]
    4192:	01 13                	add    DWORD PTR [ebx],edx
    4194:	b8 00 00 00 02       	mov    eax,0x2000000
    4199:	91                   	xchg   ecx,eax
    419a:	67 06                	addr16 push es
    419c:	af                   	scas   eax,DWORD PTR es:[edi]
    419d:	0f 00 00             	sldt   WORD PTR [eax]
    41a0:	01 14 4f             	add    DWORD PTR [edi+ecx*2],edx
    41a3:	00 00                	add    BYTE PTR [eax],al
    41a5:	00 02                	add    BYTE PTR [edx],al
    41a7:	91                   	xchg   ecx,eax
    41a8:	6c                   	ins    BYTE PTR es:[edi],dx
    41a9:	00 07                	add    BYTE PTR [edi],al
    41ab:	78 00                	js     41ad <__fmodf2+0x4181>
    41ad:	00 00                	add    BYTE PTR [eax],al
    41af:	c8 00 00 00          	enter  0x0,0x0
    41b3:	08 6b 00             	or     BYTE PTR [ebx+0x0],ch
    41b6:	00 00                	add    BYTE PTR [eax],al
    41b8:	04 00                	add    al,0x0
    41ba:	09 78 00             	or     DWORD PTR [eax+0x0],edi
    41bd:	00 00                	add    BYTE PTR [eax],al
    41bf:	02 33                	add    dh,BYTE PTR [ebx]
    41c1:	d9 00                	fld    DWORD PTR [eax]
    41c3:	00 00                	add    BYTE PTR [eax],al
    41c5:	05 03 40 92 00       	add    eax,0x924003
    41ca:	9f                   	lahf   
    41cb:	04 04                	add    al,0x4
    41cd:	72 00                	jb     41cf <__fmodf2+0x41a3>
    41cf:	00 00                	add    BYTE PTR [eax],al
    41d1:	00 0c 02             	add    BYTE PTR [edx+eax*1],cl
    41d4:	00 00                	add    BYTE PTR [eax],al
    41d6:	04 00                	add    al,0x0
    41d8:	83 11 00             	adc    DWORD PTR [ecx],0x0
    41db:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    41de:	c3                   	ret    
    41df:	00 00                	add    BYTE PTR [eax],al
    41e1:	00 0c fa             	add    BYTE PTR [edx+edi*8],cl
    41e4:	0f 00 00             	sldt   WORD PTR [eax]
    41e7:	4d                   	dec    ebp
    41e8:	00 00                	add    BYTE PTR [eax],al
    41ea:	00 ec                	add    ah,ch
    41ec:	48                   	dec    eax
    41ed:	00 9f 58 01 00 00    	add    BYTE PTR [edi+0x158],bl
    41f3:	fe                   	(bad)  
    41f4:	16                   	push   ss
    41f5:	00 00                	add    BYTE PTR [eax],al
    41f7:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    41fe:	03 91 02 00 00 02    	add    edx,DWORD PTR [ecx+0x2000002]
    4204:	d8 37                	fdiv   DWORD PTR [edi]
    4206:	00 00                	add    BYTE PTR [eax],al
    4208:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    420b:	07                   	pop    es
    420c:	32 00                	xor    al,BYTE PTR [eax]
    420e:	00 00                	add    BYTE PTR [eax],al
    4210:	04 04                	add    al,0x4
    4212:	05 05 00 00 00       	add    eax,0x5
    4217:	04 08                	add    al,0x8
    4219:	05 00 00 00 00       	add    eax,0x0
    421e:	04 0c                	add    al,0xc
    4220:	04 ad                	add    al,0xad
    4222:	00 00                	add    BYTE PTR [eax],al
    4224:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4227:	06                   	push   es
    4228:	48                   	dec    eax
    4229:	00 00                	add    BYTE PTR [eax],al
    422b:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    422e:	08 3f                	or     BYTE PTR [edi],bh
    4230:	00 00                	add    BYTE PTR [eax],al
    4232:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    4235:	07                   	pop    es
    4236:	0e                   	push   cs
    4237:	00 00                	add    BYTE PTR [eax],al
    4239:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    423c:	07                   	pop    es
    423d:	2d 00 00 00 04       	sub    eax,0x4000000
    4242:	01 06                	add    DWORD PTR [esi],eax
    4244:	41                   	inc    ecx
    4245:	00 00                	add    BYTE PTR [eax],al
    4247:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    424a:	05 b9 00 00 00       	add    eax,0xb9
    424f:	04 08                	add    al,0x8
    4251:	07                   	pop    es
    4252:	28 00                	sub    BYTE PTR [eax],al
    4254:	00 00                	add    BYTE PTR [eax],al
    4256:	04 04                	add    al,0x4
    4258:	07                   	pop    es
    4259:	2a 01                	sub    al,BYTE PTR [ecx]
    425b:	00 00                	add    BYTE PTR [eax],al
    425d:	05 04 53 00 00       	add    eax,0x5304
    4262:	00 06                	add    BYTE PTR [esi],al
    4264:	f3 0f 00 00          	repz sldt WORD PTR [eax]
    4268:	01 1e                	add    DWORD PTR [esi],ebx
    426a:	8b 00                	mov    eax,DWORD PTR [eax]
    426c:	00 00                	add    BYTE PTR [eax],al
    426e:	ec                   	in     al,dx
    426f:	48                   	dec    eax
    4270:	00 9f 3e 00 00 00    	add    BYTE PTR [edi+0x3e],bl
    4276:	01 9c c7 00 00 00 07 	add    DWORD PTR [edi+eax*8+0x7000000],ebx
    427d:	3c 0c                	cmp    al,0xc
    427f:	00 00                	add    BYTE PTR [eax],al
    4281:	01 1e                	add    DWORD PTR [esi],ebx
    4283:	8b 00                	mov    eax,DWORD PTR [eax]
    4285:	00 00                	add    BYTE PTR [eax],al
    4287:	02 91 00 08 73 72    	add    dl,BYTE PTR [ecx+0x72730800]
    428d:	63 00                	arpl   WORD PTR [eax],ax
    428f:	01 1e                	add    DWORD PTR [esi],ebx
    4291:	c7 00 00 00 02 91    	mov    DWORD PTR [eax],0x91020000
    4297:	04 00                	add    al,0x0
    4299:	05 04 cd 00 00       	add    eax,0xcd04
    429e:	00 09                	add    BYTE PTR [ecx],cl
    42a0:	53                   	push   ebx
    42a1:	00 00                	add    BYTE PTR [eax],al
    42a3:	00 06                	add    BYTE PTR [esi],al
    42a5:	27                   	daa    
    42a6:	10 00                	adc    BYTE PTR [eax],al
    42a8:	00 01                	add    BYTE PTR [ecx],al
    42aa:	24 8b                	and    al,0x8b
    42ac:	00 00                	add    BYTE PTR [eax],al
    42ae:	00 2a                	add    BYTE PTR [edx],ch
    42b0:	49                   	dec    ecx
    42b1:	00 9f 3e 00 00 00    	add    BYTE PTR [edi+0x3e],bl
    42b7:	01 9c 08 01 00 00 07 	add    DWORD PTR [eax+ecx*1+0x7000001],ebx
    42be:	3c 0c                	cmp    al,0xc
    42c0:	00 00                	add    BYTE PTR [eax],al
    42c2:	01 24 8b             	add    DWORD PTR [ebx+ecx*4],esp
    42c5:	00 00                	add    BYTE PTR [eax],al
    42c7:	00 02                	add    BYTE PTR [edx],al
    42c9:	91                   	xchg   ecx,eax
    42ca:	00 08                	add    BYTE PTR [eax],cl
    42cc:	73 72                	jae    4340 <__fmodf2+0x4314>
    42ce:	63 00                	arpl   WORD PTR [eax],ax
    42d0:	01 24 c7             	add    DWORD PTR [edi+eax*8],esp
    42d3:	00 00                	add    BYTE PTR [eax],al
    42d5:	00 02                	add    BYTE PTR [edx],al
    42d7:	91                   	xchg   ecx,eax
    42d8:	04 00                	add    al,0x0
    42da:	06                   	push   es
    42db:	dd 0f                	fisttp QWORD PTR [edi]
    42dd:	00 00                	add    BYTE PTR [eax],al
    42df:	01 2a                	add    DWORD PTR [edx],ebp
    42e1:	8b 00                	mov    eax,DWORD PTR [eax]
    42e3:	00 00                	add    BYTE PTR [eax],al
    42e5:	68 49 00 9f 6f       	push   0x6f9f0049
    42ea:	00 00                	add    BYTE PTR [eax],al
    42ec:	00 01                	add    BYTE PTR [ecx],al
    42ee:	9c                   	pushf  
    42ef:	66 01 00             	add    WORD PTR [eax],ax
    42f2:	00 07                	add    BYTE PTR [edi],al
    42f4:	3c 0c                	cmp    al,0xc
    42f6:	00 00                	add    BYTE PTR [eax],al
    42f8:	01 2a                	add    DWORD PTR [edx],ebp
    42fa:	8b 00                	mov    eax,DWORD PTR [eax]
    42fc:	00 00                	add    BYTE PTR [eax],al
    42fe:	02 91 00 08 73 72    	add    dl,BYTE PTR [ecx+0x72730800]
    4304:	63 00                	arpl   WORD PTR [eax],ax
    4306:	01 2a                	add    DWORD PTR [edx],ebp
    4308:	c7 00 00 00 02 91    	mov    DWORD PTR [eax],0x91020000
    430e:	04 08                	add    al,0x8
    4310:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4311:	00 01                	add    BYTE PTR [ecx],al
    4313:	2a 2c 00             	sub    ch,BYTE PTR [eax+eax*1]
    4316:	00 00                	add    BYTE PTR [eax],al
    4318:	02 91 08 0a d1 0f    	add    dl,BYTE PTR [ecx+0xfd10a08]
    431e:	00 00                	add    BYTE PTR [eax],al
    4320:	01 2c 2c             	add    DWORD PTR [esp+ebp*1],ebp
    4323:	00 00                	add    BYTE PTR [eax],al
    4325:	00 02                	add    BYTE PTR [edx],al
    4327:	91                   	xchg   ecx,eax
    4328:	6c                   	ins    BYTE PTR es:[edi],dx
    4329:	0a e6                	or     ah,dh
    432b:	0f 00 00             	sldt   WORD PTR [eax]
    432e:	01 2d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ebp
    4334:	02 91 68 00 06 17    	add    dl,BYTE PTR [ecx+0x17060068]
    433a:	10 00                	adc    BYTE PTR [eax],al
    433c:	00 01                	add    BYTE PTR [ecx],al
    433e:	38 8b 00 00 00 d7    	cmp    BYTE PTR [ebx-0x29000000],cl
    4344:	49                   	dec    ecx
    4345:	00 9f 47 00 00 00    	add    BYTE PTR [edi+0x47],bl
    434b:	01 9c b6 01 00 00 07 	add    DWORD PTR [esi+esi*4+0x7000001],ebx
    4352:	3c 0c                	cmp    al,0xc
    4354:	00 00                	add    BYTE PTR [eax],al
    4356:	01 38                	add    DWORD PTR [eax],edi
    4358:	8b 00                	mov    eax,DWORD PTR [eax]
    435a:	00 00                	add    BYTE PTR [eax],al
    435c:	02 91 00 08 73 72    	add    dl,BYTE PTR [ecx+0x72730800]
    4362:	63 00                	arpl   WORD PTR [eax],ax
    4364:	01 38                	add    DWORD PTR [eax],edi
    4366:	c7 00 00 00 02 91    	mov    DWORD PTR [eax],0x91020000
    436c:	04 08                	add    al,0x8
    436e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    436f:	00 01                	add    BYTE PTR [ecx],al
    4371:	38 2c 00             	cmp    BYTE PTR [eax+eax*1],ch
    4374:	00 00                	add    BYTE PTR [eax],al
    4376:	02 91 08 0a d1 0f    	add    dl,BYTE PTR [ecx+0xfd10a08]
    437c:	00 00                	add    BYTE PTR [eax],al
    437e:	01 3a                	add    DWORD PTR [edx],edi
    4380:	2c 00                	sub    al,0x0
    4382:	00 00                	add    BYTE PTR [eax],al
    4384:	02 91 6c 00 06 0f    	add    dl,BYTE PTR [ecx+0xf06006c]
    438a:	10 00                	adc    BYTE PTR [eax],al
    438c:	00 01                	add    BYTE PTR [ecx],al
    438e:	40                   	inc    eax
    438f:	8b 00                	mov    eax,DWORD PTR [eax]
    4391:	00 00                	add    BYTE PTR [eax],al
    4393:	1e                   	push   ds
    4394:	4a                   	dec    edx
    4395:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
    439b:	01 9c f8 01 00 00 07 	add    DWORD PTR [eax+edi*8+0x7000001],ebx
    43a2:	3c 0c                	cmp    al,0xc
    43a4:	00 00                	add    BYTE PTR [eax],al
    43a6:	01 40 8b             	add    DWORD PTR [eax-0x75],eax
    43a9:	00 00                	add    BYTE PTR [eax],al
    43ab:	00 02                	add    BYTE PTR [edx],al
    43ad:	91                   	xchg   ecx,eax
    43ae:	00 08                	add    BYTE PTR [eax],cl
    43b0:	73 72                	jae    4424 <__fmodf2+0x43f8>
    43b2:	63 00                	arpl   WORD PTR [eax],ax
    43b4:	01 40 c7             	add    DWORD PTR [eax-0x39],eax
    43b7:	00 00                	add    BYTE PTR [eax],al
    43b9:	00 02                	add    BYTE PTR [edx],al
    43bb:	91                   	xchg   ecx,eax
    43bc:	04 08                	add    al,0x8
    43be:	6e                   	outs   dx,BYTE PTR ds:[esi]
    43bf:	00 01                	add    BYTE PTR [ecx],al
    43c1:	40                   	inc    eax
    43c2:	2c 00                	sub    al,0x0
    43c4:	00 00                	add    BYTE PTR [eax],al
    43c6:	02 91 08 00 0b 78    	add    dl,BYTE PTR [ecx+0x780b0008]
    43cc:	00 00                	add    BYTE PTR [eax],al
    43ce:	00 03                	add    BYTE PTR [ebx],al
    43d0:	33 09                	xor    ecx,DWORD PTR [ecx]
    43d2:	02 00                	add    al,BYTE PTR [eax]
    43d4:	00 05 03 40 92 00    	add    BYTE PTR ds:0x924003,al
    43da:	9f                   	lahf   
    43db:	05 04 8b 00 00       	add    eax,0x8b04
    43e0:	00 00                	add    BYTE PTR [eax],al
    43e2:	96                   	xchg   esi,eax
    43e3:	01 00                	add    DWORD PTR [eax],eax
    43e5:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    43e8:	24 12                	and    al,0x12
    43ea:	00 00                	add    BYTE PTR [eax],al
    43ec:	04 01                	add    al,0x1
    43ee:	c3                   	ret    
    43ef:	00 00                	add    BYTE PTR [eax],al
    43f1:	00 0c 3e             	add    BYTE PTR [esi+edi*1],cl
    43f4:	10 00                	adc    BYTE PTR [eax],al
    43f6:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    43f9:	00 00                	add    BYTE PTR [eax],al
    43fb:	44                   	inc    esp
    43fc:	4a                   	dec    edx
    43fd:	00 9f 7b 00 00 00    	add    BYTE PTR [edi+0x7b],bl
    4403:	c5 17                	lds    edx,FWORD PTR [edi]
    4405:	00 00                	add    BYTE PTR [eax],al
    4407:	02 01                	add    al,BYTE PTR [ecx]
    4409:	08 3f                	or     BYTE PTR [edi],bh
    440b:	00 00                	add    BYTE PTR [eax],al
    440d:	00 02                	add    BYTE PTR [edx],al
    440f:	02 07                	add    al,BYTE PTR [edi]
    4411:	0e                   	push   cs
    4412:	00 00                	add    BYTE PTR [eax],al
    4414:	00 02                	add    BYTE PTR [edx],al
    4416:	04 07                	add    al,0x7
    4418:	32 00                	xor    al,BYTE PTR [eax]
    441a:	00 00                	add    BYTE PTR [eax],al
    441c:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    441f:	2d 00 00 00 02       	sub    eax,0x2000000
    4424:	01 06                	add    DWORD PTR [esi],eax
    4426:	41                   	inc    ecx
    4427:	00 00                	add    BYTE PTR [eax],al
    4429:	00 02                	add    BYTE PTR [edx],al
    442b:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    4431:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    4438:	02 08                	add    cl,BYTE PTR [eax]
    443a:	05 00 00 00 00       	add    eax,0x0
    443f:	02 08                	add    cl,BYTE PTR [eax]
    4441:	07                   	pop    es
    4442:	28 00                	sub    BYTE PTR [eax],al
    4444:	00 00                	add    BYTE PTR [eax],al
    4446:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    444d:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    4450:	2a 01                	sub    al,BYTE PTR [ecx]
    4452:	00 00                	add    BYTE PTR [eax],al
    4454:	04 04                	add    al,0x4
    4456:	78 00                	js     4458 <__fmodf2+0x442c>
    4458:	00 00                	add    BYTE PTR [eax],al
    445a:	02 01                	add    al,BYTE PTR [ecx]
    445c:	06                   	push   es
    445d:	48                   	dec    eax
    445e:	00 00                	add    BYTE PTR [eax],al
    4460:	00 05 45 02 00 00    	add    BYTE PTR ds:0x245,al
    4466:	02 34 33             	add    dh,BYTE PTR [ebx+esi*1]
    4469:	00 00                	add    BYTE PTR [eax],al
    446b:	00 05 01 02 00 00    	add    BYTE PTR ds:0x201,al
    4471:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
    4474:	00 00                	add    BYTE PTR [eax],al
    4476:	00 02                	add    BYTE PTR [edx],al
    4478:	0c 04                	or     al,0x4
    447a:	ad                   	lods   eax,DWORD PTR ds:[esi]
    447b:	00 00                	add    BYTE PTR [eax],al
    447d:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    4480:	a2 00 00 00 06       	mov    ds:0x6000000,al
    4485:	78 00                	js     4487 <__fmodf2+0x445b>
    4487:	00 00                	add    BYTE PTR [eax],al
    4489:	02 01                	add    al,BYTE PTR [ecx]
    448b:	02 e8                	add    ch,al
    448d:	06                   	push   es
    448e:	00 00                	add    BYTE PTR [eax],al
    4490:	02 08                	add    cl,BYTE PTR [eax]
    4492:	04 b2                	add    al,0xb2
    4494:	00 00                	add    BYTE PTR [eax],al
    4496:	00 07                	add    BYTE PTR [edi],al
    4498:	2f                   	das    
    4499:	10 00                	adc    BYTE PTR [eax],al
    449b:	00 01                	add    BYTE PTR [ecx],al
    449d:	1a 4f 00             	sbb    cl,BYTE PTR [edi+0x0]
    44a0:	00 00                	add    BYTE PTR [eax],al
    44a2:	44                   	inc    esp
    44a3:	4a                   	dec    edx
    44a4:	00 9f 5e 00 00 00    	add    BYTE PTR [edi+0x5e],bl
    44aa:	01 9c 1b 01 00 00 08 	add    DWORD PTR [ebx+ebx*1+0x8000001],ebx
    44b1:	70 31                	jo     44e4 <__fmodf2+0x44b8>
    44b3:	00 01                	add    BYTE PTR [ecx],al
    44b5:	1a 9c 00 00 00 02 91 	sbb    bl,BYTE PTR [eax+eax*1-0x6efe0000]
    44bc:	00 08                	add    BYTE PTR [eax],cl
    44be:	70 32                	jo     44f2 <__fmodf2+0x44c6>
    44c0:	00 01                	add    BYTE PTR [ecx],al
    44c2:	1a 9c 00 00 00 02 91 	sbb    bl,BYTE PTR [eax+eax*1-0x6efe0000]
    44c9:	04 09                	add    al,0x9
    44cb:	73 31                	jae    44fe <__fmodf2+0x44d2>
    44cd:	00 01                	add    BYTE PTR [ecx],al
    44cf:	1c 1b                	sbb    al,0x1b
    44d1:	01 00                	add    DWORD PTR [eax],eax
    44d3:	00 01                	add    BYTE PTR [ecx],al
    44d5:	53                   	push   ebx
    44d6:	09 73 32             	or     DWORD PTR [ebx+0x32],esi
    44d9:	00 01                	add    BYTE PTR [ecx],al
    44db:	1d 1b 01 00 00       	sbb    eax,0x11b
    44e0:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    44e3:	63 31                	arpl   WORD PTR [ecx],si
    44e5:	00 01                	add    BYTE PTR [ecx],al
    44e7:	1e                   	push   ds
    44e8:	25 00 00 00 02       	and    eax,0x2000000
    44ed:	91                   	xchg   ecx,eax
    44ee:	6f                   	outs   dx,DWORD PTR ds:[esi]
    44ef:	09 63 32             	or     DWORD PTR [ebx+0x32],esp
    44f2:	00 01                	add    BYTE PTR [ecx],al
    44f4:	1e                   	push   ds
    44f5:	25 00 00 00 02       	and    eax,0x2000000
    44fa:	91                   	xchg   ecx,eax
    44fb:	6e                   	outs   dx,BYTE PTR ds:[esi]
    44fc:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    44ff:	21 01                	and    DWORD PTR [ecx],eax
    4501:	00 00                	add    BYTE PTR [eax],al
    4503:	06                   	push   es
    4504:	25 00 00 00 0a       	and    eax,0xa000000
    4509:	37                   	aaa    
    450a:	10 00                	adc    BYTE PTR [eax],al
    450c:	00 01                	add    BYTE PTR [ecx],al
    450e:	2c 4f                	sub    al,0x4f
    4510:	00 00                	add    BYTE PTR [eax],al
    4512:	00 a2 4a 00 9f 1d    	add    BYTE PTR [edx+0x1d9f004a],ah
    4518:	00 00                	add    BYTE PTR [eax],al
    451a:	00 01                	add    BYTE PTR [ecx],al
    451c:	9c                   	pushf  
    451d:	5a                   	pop    edx
    451e:	01 00                	add    DWORD PTR [eax],eax
    4520:	00 08                	add    BYTE PTR [eax],cl
    4522:	70 31                	jo     4555 <__fmodf2+0x4529>
    4524:	00 01                	add    BYTE PTR [ecx],al
    4526:	2c 9c                	sub    al,0x9c
    4528:	00 00                	add    BYTE PTR [eax],al
    452a:	00 02                	add    BYTE PTR [edx],al
    452c:	91                   	xchg   ecx,eax
    452d:	00 08                	add    BYTE PTR [eax],cl
    452f:	70 32                	jo     4563 <__fmodf2+0x4537>
    4531:	00 01                	add    BYTE PTR [ecx],al
    4533:	2c 9c                	sub    al,0x9c
    4535:	00 00                	add    BYTE PTR [eax],al
    4537:	00 02                	add    BYTE PTR [edx],al
    4539:	91                   	xchg   ecx,eax
    453a:	04 00                	add    al,0x0
    453c:	0b 78 00             	or     edi,DWORD PTR [eax+0x0]
    453f:	00 00                	add    BYTE PTR [eax],al
    4541:	03 33                	add    esi,DWORD PTR [ebx]
    4543:	6b 01 00             	imul   eax,DWORD PTR [ecx],0x0
    4546:	00 05 03 40 92 00    	add    BYTE PTR ds:0x924003,al
    454c:	9f                   	lahf   
    454d:	04 04                	add    al,0x4
    454f:	72 00                	jb     4551 <__fmodf2+0x4525>
    4551:	00 00                	add    BYTE PTR [eax],al
    4553:	0b 10                	or     edx,DWORD PTR [eax]
    4555:	02 00                	add    al,BYTE PTR [eax]
    4557:	00 04 35 82 01 00 00 	add    BYTE PTR [esi*1+0x182],al
    455e:	05 03 50 92 00       	add    eax,0x925003
    4563:	9f                   	lahf   
    4564:	04 04                	add    al,0x4
    4566:	8a 00                	mov    al,BYTE PTR [eax]
    4568:	00 00                	add    BYTE PTR [eax],al
    456a:	0b 33                	or     esi,DWORD PTR [ebx]
    456c:	02 00                	add    al,BYTE PTR [eax]
    456e:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    4571:	7f 00                	jg     4573 <__fmodf2+0x4547>
    4573:	00 00                	add    BYTE PTR [eax],al
    4575:	05 03 4c 92 00       	add    eax,0x924c03
    457a:	9f                   	lahf   
    457b:	00 27                	add    BYTE PTR [edi],ah
    457d:	01 00                	add    DWORD PTR [eax],eax
    457f:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4582:	d2 12                	rcl    BYTE PTR [edx],cl
    4584:	00 00                	add    BYTE PTR [eax],al
    4586:	04 01                	add    al,0x1
    4588:	c3                   	ret    
    4589:	00 00                	add    BYTE PTR [eax],al
    458b:	00 0c 70             	add    BYTE PTR [eax+esi*2],cl
    458e:	10 00                	adc    BYTE PTR [eax],al
    4590:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    4593:	00 00                	add    BYTE PTR [eax],al
    4595:	c0 4a 00 9f          	ror    BYTE PTR [edx+0x0],0x9f
    4599:	c7 00 00 00 81 18    	mov    DWORD PTR [eax],0x18810000
    459f:	00 00                	add    BYTE PTR [eax],al
    45a1:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    45a8:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    45ab:	32 00                	xor    al,BYTE PTR [eax]
    45ad:	00 00                	add    BYTE PTR [eax],al
    45af:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    45b6:	03 08                	add    ecx,DWORD PTR [eax]
    45b8:	05 00 00 00 00       	add    eax,0x0
    45bd:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    45c0:	ad                   	lods   eax,DWORD PTR ds:[esi]
    45c1:	00 00                	add    BYTE PTR [eax],al
    45c3:	00 03                	add    BYTE PTR [ebx],al
    45c5:	01 06                	add    DWORD PTR [esi],eax
    45c7:	48                   	dec    eax
    45c8:	00 00                	add    BYTE PTR [eax],al
    45ca:	00 04 53             	add    BYTE PTR [ebx+edx*2],al
    45cd:	10 00                	adc    BYTE PTR [eax],al
    45cf:	00 01                	add    BYTE PTR [ecx],al
    45d1:	04 8f                	add    al,0x8f
    45d3:	00 00                	add    BYTE PTR [eax],al
    45d5:	00 c0                	add    al,al
    45d7:	4a                   	dec    edx
    45d8:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    45de:	01 9c 8f 00 00 00 05 	add    DWORD PTR [edi+ecx*4+0x5000000],ebx
    45e5:	73 31                	jae    4618 <__fmodf2+0x45ec>
    45e7:	00 01                	add    BYTE PTR [ecx],al
    45e9:	04 8f                	add    al,0x8f
    45eb:	00 00                	add    BYTE PTR [eax],al
    45ed:	00 02                	add    BYTE PTR [edx],al
    45ef:	91                   	xchg   ecx,eax
    45f0:	00 05 73 32 00 01    	add    BYTE PTR ds:0x1003273,al
    45f6:	04 95                	add    al,0x95
    45f8:	00 00                	add    BYTE PTR [eax],al
    45fa:	00 02                	add    BYTE PTR [edx],al
    45fc:	91                   	xchg   ecx,eax
    45fd:	04 06                	add    al,0x6
    45ff:	73 00                	jae    4601 <__fmodf2+0x45d5>
    4601:	01 06                	add    DWORD PTR [esi],eax
    4603:	8f 00                	pop    DWORD PTR [eax]
    4605:	00 00                	add    BYTE PTR [eax],al
    4607:	02 91 74 00 07 04    	add    dl,BYTE PTR [ecx+0x4070074]
    460d:	48                   	dec    eax
    460e:	00 00                	add    BYTE PTR [eax],al
    4610:	00 07                	add    BYTE PTR [edi],al
    4612:	04 9b                	add    al,0x9b
    4614:	00 00                	add    BYTE PTR [eax],al
    4616:	00 08                	add    BYTE PTR [eax],cl
    4618:	48                   	dec    eax
    4619:	00 00                	add    BYTE PTR [eax],al
    461b:	00 04 68             	add    BYTE PTR [eax+ebp*2],al
    461e:	10 00                	adc    BYTE PTR [eax],al
    4620:	00 01                	add    BYTE PTR [ecx],al
    4622:	0e                   	push   cs
    4623:	8f 00                	pop    DWORD PTR [eax]
    4625:	00 00                	add    BYTE PTR [eax],al
    4627:	00 4b 00             	add    BYTE PTR [ebx+0x0],cl
    462a:	9f                   	lahf   
    462b:	40                   	inc    eax
    462c:	00 00                	add    BYTE PTR [eax],al
    462e:	00 01                	add    BYTE PTR [ecx],al
    4630:	9c                   	pushf  
    4631:	e0 00                	loopne 4633 <__fmodf2+0x4607>
    4633:	00 00                	add    BYTE PTR [eax],al
    4635:	05 73 31 00 01       	add    eax,0x1003173
    463a:	0e                   	push   cs
    463b:	8f 00                	pop    DWORD PTR [eax]
    463d:	00 00                	add    BYTE PTR [eax],al
    463f:	02 91 00 05 73 32    	add    dl,BYTE PTR [ecx+0x32730500]
    4645:	00 01                	add    BYTE PTR [ecx],al
    4647:	0e                   	push   cs
    4648:	95                   	xchg   ebp,eax
    4649:	00 00                	add    BYTE PTR [eax],al
    464b:	00 02                	add    BYTE PTR [edx],al
    464d:	91                   	xchg   ecx,eax
    464e:	04 06                	add    al,0x6
    4650:	73 00                	jae    4652 <__fmodf2+0x4626>
    4652:	01 10                	add    DWORD PTR [eax],edx
    4654:	8f 00                	pop    DWORD PTR [eax]
    4656:	00 00                	add    BYTE PTR [eax],al
    4658:	02 91 74 00 09 60    	add    dl,BYTE PTR [ecx+0x60090074]
    465e:	10 00                	adc    BYTE PTR [eax],al
    4660:	00 01                	add    BYTE PTR [ecx],al
    4662:	18 8f 00 00 00 40    	sbb    BYTE PTR [edi+0x40000000],cl
    4668:	4b                   	dec    ebx
    4669:	00 9f 47 00 00 00    	add    BYTE PTR [edi+0x47],bl
    466f:	01 9c 05 73 31 00 01 	add    DWORD PTR [ebp+eax*1+0x1003173],ebx
    4676:	18 8f 00 00 00 02    	sbb    BYTE PTR [edi+0x2000000],cl
    467c:	91                   	xchg   ecx,eax
    467d:	00 05 73 32 00 01    	add    BYTE PTR ds:0x1003273,al
    4683:	18 95 00 00 00 02    	sbb    BYTE PTR [ebp+0x2000000],dl
    4689:	91                   	xchg   ecx,eax
    468a:	04 0a                	add    al,0xa
    468c:	5a                   	pop    edx
    468d:	10 00                	adc    BYTE PTR [eax],al
    468f:	00 01                	add    BYTE PTR [ecx],al
    4691:	18 2c 00             	sbb    BYTE PTR [eax+eax*1],ch
    4694:	00 00                	add    BYTE PTR [eax],al
    4696:	02 91 08 06 73 00    	add    dl,BYTE PTR [ecx+0x730608]
    469c:	01 1a                	add    DWORD PTR [edx],ebx
    469e:	8f 00                	pop    DWORD PTR [eax]
    46a0:	00 00                	add    BYTE PTR [eax],al
    46a2:	02 91 74 00 00 42    	add    dl,BYTE PTR [ecx+0x42000074]
    46a8:	01 00                	add    DWORD PTR [eax],eax
    46aa:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    46ad:	6f                   	outs   dx,DWORD PTR ds:[esi]
    46ae:	13 00                	adc    eax,DWORD PTR [eax]
    46b0:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    46b3:	c3                   	ret    
    46b4:	00 00                	add    BYTE PTR [eax],al
    46b6:	00 0c 8e             	add    BYTE PTR [esi+ecx*4],cl
    46b9:	10 00                	adc    BYTE PTR [eax],al
    46bb:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    46be:	00 00                	add    BYTE PTR [eax],al
    46c0:	88 4b 00             	mov    BYTE PTR [ebx+0x0],cl
    46c3:	9f                   	lahf   
    46c4:	89 00                	mov    DWORD PTR [eax],eax
    46c6:	00 00                	add    BYTE PTR [eax],al
    46c8:	f0 18 00             	lock sbb BYTE PTR [eax],al
    46cb:	00 02                	add    BYTE PTR [edx],al
    46cd:	01 08                	add    DWORD PTR [eax],ecx
    46cf:	3f                   	aas    
    46d0:	00 00                	add    BYTE PTR [eax],al
    46d2:	00 02                	add    BYTE PTR [edx],al
    46d4:	02 07                	add    al,BYTE PTR [edi]
    46d6:	0e                   	push   cs
    46d7:	00 00                	add    BYTE PTR [eax],al
    46d9:	00 02                	add    BYTE PTR [edx],al
    46db:	04 07                	add    al,0x7
    46dd:	32 00                	xor    al,BYTE PTR [eax]
    46df:	00 00                	add    BYTE PTR [eax],al
    46e1:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    46e4:	2d 00 00 00 02       	sub    eax,0x2000000
    46e9:	01 06                	add    DWORD PTR [esi],eax
    46eb:	41                   	inc    ecx
    46ec:	00 00                	add    BYTE PTR [eax],al
    46ee:	00 02                	add    BYTE PTR [edx],al
    46f0:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    46f6:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    46fd:	02 08                	add    cl,BYTE PTR [eax]
    46ff:	05 00 00 00 00       	add    eax,0x0
    4704:	02 08                	add    cl,BYTE PTR [eax]
    4706:	07                   	pop    es
    4707:	28 00                	sub    BYTE PTR [eax],al
    4709:	00 00                	add    BYTE PTR [eax],al
    470b:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    4712:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    4715:	2a 01                	sub    al,BYTE PTR [ecx]
    4717:	00 00                	add    BYTE PTR [eax],al
    4719:	04 04                	add    al,0x4
    471b:	78 00                	js     471d <__fmodf2+0x46f1>
    471d:	00 00                	add    BYTE PTR [eax],al
    471f:	02 01                	add    al,BYTE PTR [ecx]
    4721:	06                   	push   es
    4722:	48                   	dec    eax
    4723:	00 00                	add    BYTE PTR [eax],al
    4725:	00 05 45 02 00 00    	add    BYTE PTR ds:0x245,al
    472b:	02 34 33             	add    dh,BYTE PTR [ebx+esi*1]
    472e:	00 00                	add    BYTE PTR [eax],al
    4730:	00 05 01 02 00 00    	add    BYTE PTR ds:0x201,al
    4736:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
    4739:	00 00                	add    BYTE PTR [eax],al
    473b:	00 02                	add    BYTE PTR [edx],al
    473d:	0c 04                	or     al,0x4
    473f:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4740:	00 00                	add    BYTE PTR [eax],al
    4742:	00 02                	add    BYTE PTR [edx],al
    4744:	01 02                	add    DWORD PTR [edx],eax
    4746:	e8 06 00 00 02       	call   2004751 <sysEnter_Vector+0x1ed4751>
    474b:	08 04 b2             	or     BYTE PTR [edx+esi*4],al
    474e:	00 00                	add    BYTE PTR [eax],al
    4750:	00 06                	add    BYTE PTR [esi],al
    4752:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    4753:	10 00                	adc    BYTE PTR [eax],al
    4755:	00 01                	add    BYTE PTR [ecx],al
    4757:	09 9c 00 00 00 88 4b 	or     DWORD PTR [eax+eax*1+0x4b880000],ebx
    475e:	00 9f 30 00 00 00    	add    BYTE PTR [edi+0x30],bl
    4764:	01 9c d0 00 00 00 07 	add    DWORD PTR [eax+edx*8+0x7000000],ebx
    476b:	63 00                	arpl   WORD PTR [eax],ax
    476d:	01 09                	add    DWORD PTR [ecx],ecx
    476f:	78 00                	js     4771 <__fmodf2+0x4745>
    4771:	00 00                	add    BYTE PTR [eax],al
    4773:	02 91 74 00 08 85    	add    dl,BYTE PTR [ecx-0x7af7ff8c]
    4779:	10 00                	adc    BYTE PTR [eax],al
    477b:	00 01                	add    BYTE PTR [ecx],al
    477d:	0e                   	push   cs
    477e:	9c                   	pushf  
    477f:	00 00                	add    BYTE PTR [eax],al
    4781:	00 b8 4b 00 9f 59    	add    BYTE PTR [eax+0x599f004b],bh
    4787:	00 00                	add    BYTE PTR [eax],al
    4789:	00 01                	add    BYTE PTR [ecx],al
    478b:	9c                   	pushf  
    478c:	06                   	push   es
    478d:	01 00                	add    DWORD PTR [eax],eax
    478f:	00 07                	add    BYTE PTR [edi],al
    4791:	73 74                	jae    4807 <__fmodf2+0x47db>
    4793:	72 00                	jb     4795 <__fmodf2+0x4769>
    4795:	01 0e                	add    DWORD PTR [esi],ecx
    4797:	72 00                	jb     4799 <__fmodf2+0x476d>
    4799:	00 00                	add    BYTE PTR [eax],al
    479b:	02 91 00 09 63 6e    	add    dl,BYTE PTR [ecx+0x6e630900]
    47a1:	74 00                	je     47a3 <__fmodf2+0x4777>
    47a3:	01 10                	add    DWORD PTR [eax],edx
    47a5:	4f                   	dec    edi
    47a6:	00 00                	add    BYTE PTR [eax],al
    47a8:	00 02                	add    BYTE PTR [edx],al
    47aa:	91                   	xchg   ecx,eax
    47ab:	74 00                	je     47ad <__fmodf2+0x4781>
    47ad:	0a 78 00             	or     bh,BYTE PTR [eax+0x0]
    47b0:	00 00                	add    BYTE PTR [eax],al
    47b2:	03 33                	add    esi,DWORD PTR [ebx]
    47b4:	17                   	pop    ss
    47b5:	01 00                	add    DWORD PTR [eax],eax
    47b7:	00 05 03 40 92 00    	add    BYTE PTR ds:0x924003,al
    47bd:	9f                   	lahf   
    47be:	04 04                	add    al,0x4
    47c0:	72 00                	jb     47c2 <__fmodf2+0x4796>
    47c2:	00 00                	add    BYTE PTR [eax],al
    47c4:	0a 10                	or     dl,BYTE PTR [eax]
    47c6:	02 00                	add    al,BYTE PTR [eax]
    47c8:	00 04 35 2e 01 00 00 	add    BYTE PTR [esi*1+0x12e],al
    47cf:	05 03 50 92 00       	add    eax,0x925003
    47d4:	9f                   	lahf   
    47d5:	04 04                	add    al,0x4
    47d7:	8a 00                	mov    al,BYTE PTR [eax]
    47d9:	00 00                	add    BYTE PTR [eax],al
    47db:	0a 33                	or     dh,BYTE PTR [ebx]
    47dd:	02 00                	add    al,BYTE PTR [eax]
    47df:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    47e2:	7f 00                	jg     47e4 <__fmodf2+0x47b8>
    47e4:	00 00                	add    BYTE PTR [eax],al
    47e6:	05 03 4c 92 00       	add    eax,0x924c03
    47eb:	9f                   	lahf   
    47ec:	00 d4                	add    ah,dl
    47ee:	01 00                	add    DWORD PTR [eax],eax
    47f0:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    47f3:	16                   	push   ss
    47f4:	14 00                	adc    al,0x0
    47f6:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    47f9:	c3                   	ret    
    47fa:	00 00                	add    BYTE PTR [eax],al
    47fc:	00 0c c8             	add    BYTE PTR [eax+ecx*8],cl
    47ff:	10 00                	adc    BYTE PTR [eax],al
    4801:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    4804:	00 00                	add    BYTE PTR [eax],al
    4806:	14 4c                	adc    al,0x4c
    4808:	00 9f a2 00 00 00    	add    BYTE PTR [edi+0xa2],bl
    480e:	b9 19 00 00 02       	mov    ecx,0x2000019
    4813:	01 08                	add    DWORD PTR [eax],ecx
    4815:	3f                   	aas    
    4816:	00 00                	add    BYTE PTR [eax],al
    4818:	00 02                	add    BYTE PTR [edx],al
    481a:	02 07                	add    al,BYTE PTR [edi]
    481c:	0e                   	push   cs
    481d:	00 00                	add    BYTE PTR [eax],al
    481f:	00 02                	add    BYTE PTR [edx],al
    4821:	04 07                	add    al,0x7
    4823:	32 00                	xor    al,BYTE PTR [eax]
    4825:	00 00                	add    BYTE PTR [eax],al
    4827:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    482a:	2d 00 00 00 02       	sub    eax,0x2000000
    482f:	01 06                	add    DWORD PTR [esi],eax
    4831:	41                   	inc    ecx
    4832:	00 00                	add    BYTE PTR [eax],al
    4834:	00 02                	add    BYTE PTR [edx],al
    4836:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    483c:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    4843:	02 08                	add    cl,BYTE PTR [eax]
    4845:	05 00 00 00 00       	add    eax,0x0
    484a:	02 08                	add    cl,BYTE PTR [eax]
    484c:	07                   	pop    es
    484d:	28 00                	sub    BYTE PTR [eax],al
    484f:	00 00                	add    BYTE PTR [eax],al
    4851:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    4858:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    485b:	2a 01                	sub    al,BYTE PTR [ecx]
    485d:	00 00                	add    BYTE PTR [eax],al
    485f:	04 04                	add    al,0x4
    4861:	78 00                	js     4863 <__fmodf2+0x4837>
    4863:	00 00                	add    BYTE PTR [eax],al
    4865:	02 01                	add    al,BYTE PTR [ecx]
    4867:	06                   	push   es
    4868:	48                   	dec    eax
    4869:	00 00                	add    BYTE PTR [eax],al
    486b:	00 05 45 02 00 00    	add    BYTE PTR ds:0x245,al
    4871:	02 34 33             	add    dh,BYTE PTR [ebx+esi*1]
    4874:	00 00                	add    BYTE PTR [eax],al
    4876:	00 05 01 02 00 00    	add    BYTE PTR ds:0x201,al
    487c:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
    487f:	00 00                	add    BYTE PTR [eax],al
    4881:	00 05 91 02 00 00    	add    BYTE PTR ds:0x291,al
    4887:	03 d8                	add    ebx,eax
    4889:	33 00                	xor    eax,DWORD PTR [eax]
    488b:	00 00                	add    BYTE PTR [eax],al
    488d:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    4890:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4891:	00 00                	add    BYTE PTR [eax],al
    4893:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    4896:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4897:	00 00                	add    BYTE PTR [eax],al
    4899:	00 06                	add    BYTE PTR [esi],al
    489b:	78 00                	js     489d <__fmodf2+0x4871>
    489d:	00 00                	add    BYTE PTR [eax],al
    489f:	02 01                	add    al,BYTE PTR [ecx]
    48a1:	02 e8                	add    ch,al
    48a3:	06                   	push   es
    48a4:	00 00                	add    BYTE PTR [eax],al
    48a6:	02 08                	add    cl,BYTE PTR [eax]
    48a8:	04 b2                	add    al,0xb2
    48aa:	00 00                	add    BYTE PTR [eax],al
    48ac:	00 07                	add    BYTE PTR [edi],al
    48ae:	b1 10                	mov    cl,0x10
    48b0:	00 00                	add    BYTE PTR [eax],al
    48b2:	01 04 95 00 00 00 14 	add    DWORD PTR [edx*4+0x14000000],eax
    48b9:	4c                   	dec    esp
    48ba:	00 9f 31 00 00 00    	add    BYTE PTR [edi+0x31],bl
    48c0:	01 9c f6 00 00 00 08 	add    DWORD PTR [esi+esi*8+0x8000000],ebx
    48c7:	73 74                	jae    493d <__fmodf2+0x4911>
    48c9:	72 00                	jb     48cb <__fmodf2+0x489f>
    48cb:	01 04 a7             	add    DWORD PTR [edi+eiz*4],eax
    48ce:	00 00                	add    BYTE PTR [eax],al
    48d0:	00 02                	add    BYTE PTR [edx],al
    48d2:	91                   	xchg   ecx,eax
    48d3:	00 09                	add    BYTE PTR [ecx],cl
    48d5:	72 65                	jb     493c <__fmodf2+0x4910>
    48d7:	74 00                	je     48d9 <__fmodf2+0x48ad>
    48d9:	01 05 95 00 00 00    	add    DWORD PTR ds:0x95,eax
    48df:	02 91 74 00 0a b9    	add    dl,BYTE PTR [ecx-0x46f5ff8c]
    48e5:	10 00                	adc    BYTE PTR [eax],al
    48e7:	00 01                	add    BYTE PTR [ecx],al
    48e9:	0b 95 00 00 00 45    	or     edx,DWORD PTR [ebp+0x45000000]
    48ef:	4c                   	dec    esp
    48f0:	00 9f 1a 00 00 00    	add    BYTE PTR [edi+0x1a],bl
    48f6:	01 9c 1e 01 00 00 08 	add    DWORD PTR [esi+ebx*1+0x8000001],ebx
    48fd:	73 74                	jae    4973 <__fmodf2+0x4947>
    48ff:	72 00                	jb     4901 <__fmodf2+0x48d5>
    4901:	01 0b                	add    DWORD PTR [ebx],ecx
    4903:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    4904:	00 00                	add    BYTE PTR [eax],al
    4906:	00 02                	add    BYTE PTR [edx],al
    4908:	91                   	xchg   ecx,eax
    4909:	00 00                	add    BYTE PTR [eax],al
    490b:	07                   	pop    es
    490c:	69 0f 00 00 01 10    	imul   ecx,DWORD PTR [edi],0x10010000
    4912:	95                   	xchg   ebp,eax
    4913:	00 00                	add    BYTE PTR [eax],al
    4915:	00 5f 4c             	add    BYTE PTR [edi+0x4c],bl
    4918:	00 9f 39 00 00 00    	add    BYTE PTR [edi+0x39],bl
    491e:	01 9c 62 01 00 00 08 	add    DWORD PTR [edx+eiz*2+0x8000001],ebx
    4925:	73 74                	jae    499b <__fmodf2+0x496f>
    4927:	72 00                	jb     4929 <__fmodf2+0x48fd>
    4929:	01 10                	add    DWORD PTR [eax],edx
    492b:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    492c:	00 00                	add    BYTE PTR [eax],al
    492e:	00 02                	add    BYTE PTR [edx],al
    4930:	91                   	xchg   ecx,eax
    4931:	00 0b                	add    BYTE PTR [ebx],cl
    4933:	d8 07                	fadd   DWORD PTR [edi]
    4935:	00 00                	add    BYTE PTR [eax],al
    4937:	01 10                	add    DWORD PTR [eax],edx
    4939:	95                   	xchg   ebp,eax
    493a:	00 00                	add    BYTE PTR [eax],al
    493c:	00 02                	add    BYTE PTR [edx],al
    493e:	91                   	xchg   ecx,eax
    493f:	04 09                	add    al,0x9
    4941:	72 65                	jb     49a8 <__fmodf2+0x497c>
    4943:	74 00                	je     4945 <__fmodf2+0x4919>
    4945:	01 12                	add    DWORD PTR [edx],edx
    4947:	95                   	xchg   ebp,eax
    4948:	00 00                	add    BYTE PTR [eax],al
    494a:	00 02                	add    BYTE PTR [edx],al
    494c:	91                   	xchg   ecx,eax
    494d:	74 00                	je     494f <__fmodf2+0x4923>
    494f:	0a c0                	or     al,al
    4951:	10 00                	adc    BYTE PTR [eax],al
    4953:	00 01                	add    BYTE PTR [ecx],al
    4955:	18 95 00 00 00 98    	sbb    BYTE PTR [ebp-0x68000000],dl
    495b:	4c                   	dec    esp
    495c:	00 9f 1e 00 00 00    	add    BYTE PTR [edi+0x1e],bl
    4962:	01 9c 98 01 00 00 08 	add    DWORD PTR [eax+ebx*4+0x8000001],ebx
    4969:	73 74                	jae    49df <__fmodf2+0x49b3>
    496b:	72 00                	jb     496d <__fmodf2+0x4941>
    496d:	01 18                	add    DWORD PTR [eax],ebx
    496f:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    4970:	00 00                	add    BYTE PTR [eax],al
    4972:	00 02                	add    BYTE PTR [edx],al
    4974:	91                   	xchg   ecx,eax
    4975:	00 0b                	add    BYTE PTR [ebx],cl
    4977:	d8 07                	fadd   DWORD PTR [edi]
    4979:	00 00                	add    BYTE PTR [eax],al
    497b:	01 18                	add    DWORD PTR [eax],ebx
    497d:	4f                   	dec    edi
    497e:	00 00                	add    BYTE PTR [eax],al
    4980:	00 02                	add    BYTE PTR [edx],al
    4982:	91                   	xchg   ecx,eax
    4983:	04 00                	add    al,0x0
    4985:	0c 78                	or     al,0x78
    4987:	00 00                	add    BYTE PTR [eax],al
    4989:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    498c:	a9 01 00 00 05       	test   eax,0x5000001
    4991:	03 40 92             	add    eax,DWORD PTR [eax-0x6e]
    4994:	00 9f 04 04 72 00    	add    BYTE PTR [edi+0x720404],bl
    499a:	00 00                	add    BYTE PTR [eax],al
    499c:	0c 10                	or     al,0x10
    499e:	02 00                	add    al,BYTE PTR [eax]
    49a0:	00 05 35 c0 01 00    	add    BYTE PTR ds:0x1c035,al
    49a6:	00 05 03 50 92 00    	add    BYTE PTR ds:0x925003,al
    49ac:	9f                   	lahf   
    49ad:	04 04                	add    al,0x4
    49af:	8a 00                	mov    al,BYTE PTR [eax]
    49b1:	00 00                	add    BYTE PTR [eax],al
    49b3:	0c 33                	or     al,0x33
    49b5:	02 00                	add    al,BYTE PTR [eax]
    49b7:	00 05 36 7f 00 00    	add    BYTE PTR ds:0x7f36,al
    49bd:	00 05 03 4c 92 00    	add    BYTE PTR ds:0x924c03,al
    49c3:	9f                   	lahf   
    49c4:	00 de                	add    dh,bl
    49c6:	00 00                	add    BYTE PTR [eax],al
    49c8:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    49cb:	d3 14 00             	rcl    DWORD PTR [eax+eax*1],cl
    49ce:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    49d1:	c3                   	ret    
    49d2:	00 00                	add    BYTE PTR [eax],al
    49d4:	00 0c ee             	add    BYTE PTR [esi+ebp*8],cl
    49d7:	10 00                	adc    BYTE PTR [eax],al
    49d9:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    49dc:	00 00                	add    BYTE PTR [eax],al
    49de:	b8 4c 00 9f ce       	mov    eax,0xce9f004c
    49e3:	00 00                	add    BYTE PTR [eax],al
    49e5:	00 8c 1a 00 00 02 04 	add    BYTE PTR [edx+ebx*1+0x4020000],cl
    49ec:	05 69 6e 74 00       	add    eax,0x746e69
    49f1:	03 91 02 00 00 02    	add    edx,DWORD PTR [ecx+0x2000002]
    49f7:	d8 37                	fdiv   DWORD PTR [edi]
    49f9:	00 00                	add    BYTE PTR [eax],al
    49fb:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    49fe:	07                   	pop    es
    49ff:	32 00                	xor    al,BYTE PTR [eax]
    4a01:	00 00                	add    BYTE PTR [eax],al
    4a03:	04 04                	add    al,0x4
    4a05:	05 05 00 00 00       	add    eax,0x5
    4a0a:	04 08                	add    al,0x8
    4a0c:	05 00 00 00 00       	add    eax,0x0
    4a11:	04 0c                	add    al,0xc
    4a13:	04 ad                	add    al,0xad
    4a15:	00 00                	add    BYTE PTR [eax],al
    4a17:	00 05 e6 10 00 00    	add    BYTE PTR ds:0x10e6,al
    4a1d:	01 0c 25 00 00 00 b8 	add    DWORD PTR [eiz*1-0x48000000],ecx
    4a24:	4c                   	dec    esp
    4a25:	00 9f 67 00 00 00    	add    BYTE PTR [edi+0x67],bl
    4a2b:	01 9c 93 00 00 00 06 	add    DWORD PTR [ebx+edx*4+0x6000000],ebx
    4a32:	73 31                	jae    4a65 <__fmodf2+0x4a39>
    4a34:	00 01                	add    BYTE PTR [ecx],al
    4a36:	0c 93                	or     al,0x93
    4a38:	00 00                	add    BYTE PTR [eax],al
    4a3a:	00 02                	add    BYTE PTR [edx],al
    4a3c:	91                   	xchg   ecx,eax
    4a3d:	00 06                	add    BYTE PTR [esi],al
    4a3f:	73 32                	jae    4a73 <__fmodf2+0x4a47>
    4a41:	00 01                	add    BYTE PTR [ecx],al
    4a43:	0c 93                	or     al,0x93
    4a45:	00 00                	add    BYTE PTR [eax],al
    4a47:	00 02                	add    BYTE PTR [edx],al
    4a49:	91                   	xchg   ecx,eax
    4a4a:	04 06                	add    al,0x6
    4a4c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4a4d:	00 01                	add    BYTE PTR [ecx],al
    4a4f:	0c 2c                	or     al,0x2c
    4a51:	00 00                	add    BYTE PTR [eax],al
    4a53:	00 02                	add    BYTE PTR [edx],al
    4a55:	91                   	xchg   ecx,eax
    4a56:	08 00                	or     BYTE PTR [eax],al
    4a58:	07                   	pop    es
    4a59:	04 a0                	add    al,0xa0
    4a5b:	00 00                	add    BYTE PTR [eax],al
    4a5d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4a60:	06                   	push   es
    4a61:	48                   	dec    eax
    4a62:	00 00                	add    BYTE PTR [eax],al
    4a64:	00 08                	add    BYTE PTR [eax],cl
    4a66:	99                   	cdq    
    4a67:	00 00                	add    BYTE PTR [eax],al
    4a69:	00 09                	add    BYTE PTR [ecx],cl
    4a6b:	dd 10                	fst    QWORD PTR [eax]
    4a6d:	00 00                	add    BYTE PTR [eax],al
    4a6f:	01 16                	add    DWORD PTR [esi],edx
    4a71:	25 00 00 00 1f       	and    eax,0x1f000000
    4a76:	4d                   	dec    ebp
    4a77:	00 9f 67 00 00 00    	add    BYTE PTR [edi+0x67],bl
    4a7d:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    4a84:	16                   	push   ss
    4a85:	93                   	xchg   ebx,eax
    4a86:	00 00                	add    BYTE PTR [eax],al
    4a88:	00 02                	add    BYTE PTR [edx],al
    4a8a:	91                   	xchg   ecx,eax
    4a8b:	00 06                	add    BYTE PTR [esi],al
    4a8d:	73 32                	jae    4ac1 <__fmodf2+0x4a95>
    4a8f:	00 01                	add    BYTE PTR [ecx],al
    4a91:	16                   	push   ss
    4a92:	93                   	xchg   ebx,eax
    4a93:	00 00                	add    BYTE PTR [eax],al
    4a95:	00 02                	add    BYTE PTR [edx],al
    4a97:	91                   	xchg   ecx,eax
    4a98:	04 06                	add    al,0x6
    4a9a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4a9b:	00 01                	add    BYTE PTR [ecx],al
    4a9d:	16                   	push   ss
    4a9e:	2c 00                	sub    al,0x0
    4aa0:	00 00                	add    BYTE PTR [eax],al
    4aa2:	02 91 08 00 00 f0    	add    dl,BYTE PTR [ecx-0xffffff8]
    4aa8:	00 00                	add    BYTE PTR [eax],al
    4aaa:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4aad:	5f                   	pop    edi
    4aae:	15 00 00 04 01       	adc    eax,0x1040000
    4ab3:	c3                   	ret    
    4ab4:	00 00                	add    BYTE PTR [eax],al
    4ab6:	00 0c 04             	add    BYTE PTR [esp+eax*1],cl
    4ab9:	11 00                	adc    DWORD PTR [eax],eax
    4abb:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    4abe:	00 00                	add    BYTE PTR [eax],al
    4ac0:	88 4d 00             	mov    BYTE PTR [ebp+0x0],cl
    4ac3:	9f                   	lahf   
    4ac4:	8c 00                	mov    WORD PTR [eax],es
    4ac6:	00 00                	add    BYTE PTR [eax],al
    4ac8:	51                   	push   ecx
    4ac9:	1b 00                	sbb    eax,DWORD PTR [eax]
    4acb:	00 02                	add    BYTE PTR [edx],al
    4acd:	04 05                	add    al,0x5
    4acf:	69 6e 74 00 03 91 02 	imul   ebp,DWORD PTR [esi+0x74],0x2910300
    4ad6:	00 00                	add    BYTE PTR [eax],al
    4ad8:	02 d8                	add    bl,al
    4ada:	37                   	aaa    
    4adb:	00 00                	add    BYTE PTR [eax],al
    4add:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    4ae0:	07                   	pop    es
    4ae1:	32 00                	xor    al,BYTE PTR [eax]
    4ae3:	00 00                	add    BYTE PTR [eax],al
    4ae5:	04 04                	add    al,0x4
    4ae7:	05 05 00 00 00       	add    eax,0x5
    4aec:	04 08                	add    al,0x8
    4aee:	05 00 00 00 00       	add    eax,0x0
    4af3:	04 0c                	add    al,0xc
    4af5:	04 ad                	add    al,0xad
    4af7:	00 00                	add    BYTE PTR [eax],al
    4af9:	00 05 1a 11 00 00    	add    BYTE PTR ds:0x111a,al
    4aff:	01 0d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ecx
    4b05:	88 4d 00             	mov    BYTE PTR [ebp+0x0],cl
    4b08:	9f                   	lahf   
    4b09:	6c                   	ins    BYTE PTR es:[edi],dx
    4b0a:	00 00                	add    BYTE PTR [eax],al
    4b0c:	00 01                	add    BYTE PTR [ecx],al
    4b0e:	9c                   	pushf  
    4b0f:	9f                   	lahf   
    4b10:	00 00                	add    BYTE PTR [eax],al
    4b12:	00 06                	add    BYTE PTR [esi],al
    4b14:	73 31                	jae    4b47 <__fmodf2+0x4b1b>
    4b16:	00 01                	add    BYTE PTR [ecx],al
    4b18:	0d 9f 00 00 00       	or     eax,0x9f
    4b1d:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    4b23:	00 01                	add    BYTE PTR [ecx],al
    4b25:	0d ac 00 00 00       	or     eax,0xac
    4b2a:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    4b30:	01 0d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ecx
    4b36:	02 91 08 07 73 00    	add    dl,BYTE PTR [ecx+0x730708]
    4b3c:	01 0f                	add    DWORD PTR [edi],ecx
    4b3e:	9f                   	lahf   
    4b3f:	00 00                	add    BYTE PTR [eax],al
    4b41:	00 02                	add    BYTE PTR [edx],al
    4b43:	91                   	xchg   ecx,eax
    4b44:	74 00                	je     4b46 <__fmodf2+0x4b1a>
    4b46:	08 04 a5 00 00 00 04 	or     BYTE PTR [eiz*4+0x4000000],al
    4b4d:	01 06                	add    DWORD PTR [esi],eax
    4b4f:	48                   	dec    eax
    4b50:	00 00                	add    BYTE PTR [eax],al
    4b52:	00 08                	add    BYTE PTR [eax],cl
    4b54:	04 b2                	add    al,0xb2
    4b56:	00 00                	add    BYTE PTR [eax],al
    4b58:	00 09                	add    BYTE PTR [ecx],cl
    4b5a:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    4b5b:	00 00                	add    BYTE PTR [eax],al
    4b5d:	00 0a                	add    BYTE PTR [edx],cl
    4b5f:	23 11                	and    edx,DWORD PTR [ecx]
    4b61:	00 00                	add    BYTE PTR [eax],al
    4b63:	01 1d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ebx
    4b69:	f4                   	hlt    
    4b6a:	4d                   	dec    ebp
    4b6b:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    4b71:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    4b78:	1d 9f 00 00 00       	sbb    eax,0x9f
    4b7d:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    4b83:	00 01                	add    BYTE PTR [ecx],al
    4b85:	1d ac 00 00 00       	sbb    eax,0xac
    4b8a:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    4b90:	01 1d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ebx
    4b96:	02 91 08 00 00 01    	add    dl,BYTE PTR [ecx+0x1000008]
    4b9c:	01 00                	add    DWORD PTR [eax],eax
    4b9e:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4ba1:	fa                   	cli    
    4ba2:	15 00 00 04 01       	adc    eax,0x1040000
    4ba7:	c3                   	ret    
    4ba8:	00 00                	add    BYTE PTR [eax],al
    4baa:	00 0c 3e             	add    BYTE PTR [esi+edi*1],cl
    4bad:	11 00                	adc    DWORD PTR [eax],eax
    4baf:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    4bb2:	00 00                	add    BYTE PTR [eax],al
    4bb4:	14 4e                	adc    al,0x4e
    4bb6:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
    4bbc:	f8                   	clc    
    4bbd:	1b 00                	sbb    eax,DWORD PTR [eax]
    4bbf:	00 02                	add    BYTE PTR [edx],al
    4bc1:	04 05                	add    al,0x5
    4bc3:	69 6e 74 00 03 04 07 	imul   ebp,DWORD PTR [esi+0x74],0x7040300
    4bca:	32 00                	xor    al,BYTE PTR [eax]
    4bcc:	00 00                	add    BYTE PTR [eax],al
    4bce:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    4bd5:	03 08                	add    ecx,DWORD PTR [eax]
    4bd7:	05 00 00 00 00       	add    eax,0x0
    4bdc:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    4bdf:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4be0:	00 00                	add    BYTE PTR [eax],al
    4be2:	00 03                	add    BYTE PTR [ebx],al
    4be4:	01 06                	add    DWORD PTR [esi],eax
    4be6:	48                   	dec    eax
    4be7:	00 00                	add    BYTE PTR [eax],al
    4be9:	00 04 53             	add    BYTE PTR [ebx+edx*2],al
    4bec:	11 00                	adc    DWORD PTR [eax],eax
    4bee:	00 01                	add    BYTE PTR [ecx],al
    4bf0:	3b e6                	cmp    esp,esi
    4bf2:	00 00                	add    BYTE PTR [eax],al
    4bf4:	00 14 4e             	add    BYTE PTR [esi+ecx*2],dl
    4bf7:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
    4bfd:	01 9c e6 00 00 00 05 	add    DWORD PTR [esi+eiz*8+0x5000000],ebx
    4c04:	2b 11                	sub    edx,DWORD PTR [ecx]
    4c06:	00 00                	add    BYTE PTR [eax],al
    4c08:	01 3b                	add    DWORD PTR [ebx],edi
    4c0a:	ed                   	in     eax,dx
    4c0b:	00 00                	add    BYTE PTR [eax],al
    4c0d:	00 02                	add    BYTE PTR [edx],al
    4c0f:	91                   	xchg   ecx,eax
    4c10:	00 05 5b 11 00 00    	add    BYTE PTR ds:0x115b,al
    4c16:	01 3b                	add    DWORD PTR [ebx],edi
    4c18:	f8                   	clc    
    4c19:	00 00                	add    BYTE PTR [eax],al
    4c1b:	00 02                	add    BYTE PTR [edx],al
    4c1d:	91                   	xchg   ecx,eax
    4c1e:	04 05                	add    al,0x5
    4c20:	8b 0f                	mov    ecx,DWORD PTR [edi]
    4c22:	00 00                	add    BYTE PTR [eax],al
    4c24:	01 3b                	add    DWORD PTR [ebx],edi
    4c26:	25 00 00 00 02       	and    eax,0x2000000
    4c2b:	91                   	xchg   ecx,eax
    4c2c:	08 06                	or     BYTE PTR [esi],al
    4c2e:	73 00                	jae    4c30 <__fmodf2+0x4c04>
    4c30:	01 3d ed 00 00 00    	add    DWORD PTR ds:0xed,edi
    4c36:	01 56 06             	add    DWORD PTR [esi+0x6],edx
    4c39:	61                   	popa   
    4c3a:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    4c3d:	01 3e                	add    DWORD PTR [esi],edi
    4c3f:	e6 00                	out    0x0,al
    4c41:	00 00                	add    BYTE PTR [eax],al
    4c43:	01 57 06             	add    DWORD PTR [edi+0x6],edx
    4c46:	63 00                	arpl   WORD PTR [eax],ax
    4c48:	01 3f                	add    DWORD PTR [edi],edi
    4c4a:	25 00 00 00 01       	and    eax,0x1000000
    4c4f:	53                   	push   ebx
    4c50:	07                   	pop    es
    4c51:	30 11                	xor    BYTE PTR [ecx],dl
    4c53:	00 00                	add    BYTE PTR [eax],al
    4c55:	01 40 e6             	add    DWORD PTR [eax-0x1a],eax
    4c58:	00 00                	add    BYTE PTR [eax],al
    4c5a:	00 08                	add    BYTE PTR [eax],cl
    4c5c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4c5d:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    4c61:	41                   	inc    ecx
    4c62:	25 00 00 00 06       	and    eax,0x6000000
    4c67:	61                   	popa   
    4c68:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4c69:	79 00                	jns    4c6b <__fmodf2+0x4c3f>
    4c6b:	01 41 25             	add    DWORD PTR [ecx+0x25],eax
    4c6e:	00 00                	add    BYTE PTR [eax],al
    4c70:	00 01                	add    BYTE PTR [ecx],al
    4c72:	51                   	push   ecx
    4c73:	09 37                	or     DWORD PTR [edi],esi
    4c75:	11 00                	adc    DWORD PTR [eax],eax
    4c77:	00 01                	add    BYTE PTR [ecx],al
    4c79:	41                   	inc    ecx
    4c7a:	25 00 00 00 01       	and    eax,0x1000000
    4c7f:	52                   	push   edx
    4c80:	00 03                	add    BYTE PTR [ebx],al
    4c82:	04 07                	add    al,0x7
    4c84:	2d 00 00 00 0a       	sub    eax,0xa000000
    4c89:	04 f3                	add    al,0xf3
    4c8b:	00 00                	add    BYTE PTR [eax],al
    4c8d:	00 0b                	add    BYTE PTR [ebx],cl
    4c8f:	48                   	dec    eax
    4c90:	00 00                	add    BYTE PTR [eax],al
    4c92:	00 0a                	add    BYTE PTR [edx],cl
    4c94:	04 fe                	add    al,0xfe
    4c96:	00 00                	add    BYTE PTR [eax],al
    4c98:	00 0a                	add    BYTE PTR [edx],cl
    4c9a:	04 48                	add    al,0x48
    4c9c:	00 00                	add    BYTE PTR [eax],al
    4c9e:	00 00                	add    BYTE PTR [eax],al
    4ca0:	6c                   	ins    BYTE PTR es:[edi],dx
    4ca1:	00 00                	add    BYTE PTR [eax],al
    4ca3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4ca6:	97                   	xchg   edi,eax
    4ca7:	16                   	push   ss
    4ca8:	00 00                	add    BYTE PTR [eax],al
    4caa:	04 01                	add    al,0x1
    4cac:	c3                   	ret    
    4cad:	00 00                	add    BYTE PTR [eax],al
    4caf:	00 0c 62             	add    BYTE PTR [edx+eiz*2],cl
    4cb2:	11 00                	adc    DWORD PTR [eax],eax
    4cb4:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    4cb7:	00 00                	add    BYTE PTR [eax],al
    4cb9:	94                   	xchg   esp,eax
    4cba:	4f                   	dec    edi
    4cbb:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    4cc1:	d4 1c                	aam    0x1c
    4cc3:	00 00                	add    BYTE PTR [eax],al
    4cc5:	02 79 11             	add    bh,BYTE PTR [ecx+0x11]
    4cc8:	00 00                	add    BYTE PTR [eax],al
    4cca:	01 01                	add    DWORD PTR [ecx],eax
    4ccc:	5b                   	pop    ebx
    4ccd:	00 00                	add    BYTE PTR [eax],al
    4ccf:	00 94 4f 00 9f 1d 00 	add    BYTE PTR [edi+ecx*2+0x1d9f00],dl
    4cd6:	00 00                	add    BYTE PTR [eax],al
    4cd8:	01 9c 5b 00 00 00 03 	add    DWORD PTR [ebx+ebx*2+0x3000000],ebx
    4cdf:	76 61                	jbe    4d42 <__fmodf2+0x4d16>
    4ce1:	6c                   	ins    BYTE PTR es:[edi],dx
    4ce2:	00 01                	add    BYTE PTR [ecx],al
    4ce4:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    4ce7:	00 00                	add    BYTE PTR [eax],al
    4ce9:	02 91 00 03 63 6e    	add    dl,BYTE PTR [ecx+0x6e630300]
    4cef:	74 00                	je     4cf1 <__fmodf2+0x4cc5>
    4cf1:	01 01                	add    DWORD PTR [ecx],eax
    4cf3:	68 00 00 00 02       	push   0x2000000
    4cf8:	91                   	xchg   ecx,eax
    4cf9:	04 00                	add    al,0x0
    4cfb:	04 04                	add    al,0x4
    4cfd:	61                   	popa   
    4cfe:	00 00                	add    BYTE PTR [eax],al
    4d00:	00 05 01 06 48 00    	add    BYTE PTR ds:0x480601,al
    4d06:	00 00                	add    BYTE PTR [eax],al
    4d08:	06                   	push   es
    4d09:	04 05                	add    al,0x5
    4d0b:	69 6e 74 00 00 ff 00 	imul   ebp,DWORD PTR [esi+0x74],0xff0000
    4d12:	00 00                	add    BYTE PTR [eax],al
    4d14:	04 00                	add    al,0x0
    4d16:	f5                   	cmc    
    4d17:	16                   	push   ss
    4d18:	00 00                	add    BYTE PTR [eax],al
    4d1a:	04 01                	add    al,0x1
    4d1c:	c3                   	ret    
    4d1d:	00 00                	add    BYTE PTR [eax],al
    4d1f:	00 0c 88             	add    BYTE PTR [eax+ecx*4],cl
    4d22:	11 00                	adc    DWORD PTR [eax],eax
    4d24:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    4d27:	00 00                	add    BYTE PTR [eax],al
    4d29:	b4 4f                	mov    ah,0x4f
    4d2b:	00 9f 9c 01 00 00    	add    BYTE PTR [edi+0x19c],bl
    4d31:	1b 1d 00 00 02 04    	sbb    ebx,DWORD PTR ds:0x4020000
    4d37:	05 69 6e 74 00       	add    eax,0x746e69
    4d3c:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    4d3f:	32 00                	xor    al,BYTE PTR [eax]
    4d41:	00 00                	add    BYTE PTR [eax],al
    4d43:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    4d4a:	03 08                	add    ecx,DWORD PTR [eax]
    4d4c:	05 00 00 00 00       	add    eax,0x0
    4d51:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    4d54:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4d55:	00 00                	add    BYTE PTR [eax],al
    4d57:	00 03                	add    BYTE PTR [ebx],al
    4d59:	01 06                	add    DWORD PTR [esi],eax
    4d5b:	48                   	dec    eax
    4d5c:	00 00                	add    BYTE PTR [eax],al
    4d5e:	00 04 81             	add    BYTE PTR [ecx+eax*4],al
    4d61:	11 00                	adc    DWORD PTR [eax],eax
    4d63:	00 01                	add    BYTE PTR [ecx],al
    4d65:	57                   	push   edi
    4d66:	33 00                	xor    eax,DWORD PTR [eax]
    4d68:	00 00                	add    BYTE PTR [eax],al
    4d6a:	b4 4f                	mov    ah,0x4f
    4d6c:	00 9f 9c 01 00 00    	add    BYTE PTR [edi+0x19c],bl
    4d72:	01 9c e4 00 00 00 05 	add    DWORD PTR [esp+eiz*8+0x5000000],ebx
    4d79:	2b 11                	sub    edx,DWORD PTR [ecx]
    4d7b:	00 00                	add    BYTE PTR [eax],al
    4d7d:	01 57 e4             	add    DWORD PTR [edi-0x1c],edx
    4d80:	00 00                	add    BYTE PTR [eax],al
    4d82:	00 02                	add    BYTE PTR [edx],al
    4d84:	91                   	xchg   ecx,eax
    4d85:	00 05 5b 11 00 00    	add    BYTE PTR ds:0x115b,al
    4d8b:	01 57 ef             	add    DWORD PTR [edi-0x11],edx
    4d8e:	00 00                	add    BYTE PTR [eax],al
    4d90:	00 02                	add    BYTE PTR [edx],al
    4d92:	91                   	xchg   ecx,eax
    4d93:	04 05                	add    al,0x5
    4d95:	8b 0f                	mov    ecx,DWORD PTR [edi]
    4d97:	00 00                	add    BYTE PTR [eax],al
    4d99:	01 57 25             	add    DWORD PTR [edi+0x25],edx
    4d9c:	00 00                	add    BYTE PTR [eax],al
    4d9e:	00 02                	add    BYTE PTR [edx],al
    4da0:	91                   	xchg   ecx,eax
    4da1:	08 06                	or     BYTE PTR [esi],al
    4da3:	73 00                	jae    4da5 <__fmodf2+0x4d79>
    4da5:	01 59 e4             	add    DWORD PTR [ecx-0x1c],ebx
    4da8:	00 00                	add    BYTE PTR [eax],al
    4daa:	00 01                	add    BYTE PTR [ecx],al
    4dac:	56                   	push   esi
    4dad:	06                   	push   es
    4dae:	61                   	popa   
    4daf:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    4db2:	01 5a fb             	add    DWORD PTR [edx-0x5],ebx
    4db5:	00 00                	add    BYTE PTR [eax],al
    4db7:	00 01                	add    BYTE PTR [ecx],al
    4db9:	57                   	push   edi
    4dba:	06                   	push   es
    4dbb:	63 00                	arpl   WORD PTR [eax],ax
    4dbd:	01 5b 25             	add    DWORD PTR [ebx+0x25],ebx
    4dc0:	00 00                	add    BYTE PTR [eax],al
    4dc2:	00 01                	add    BYTE PTR [ecx],al
    4dc4:	53                   	push   ebx
    4dc5:	07                   	pop    es
    4dc6:	30 11                	xor    BYTE PTR [ecx],dl
    4dc8:	00 00                	add    BYTE PTR [eax],al
    4dca:	01 5c fb 00          	add    DWORD PTR [ebx+edi*8+0x0],ebx
    4dce:	00 00                	add    BYTE PTR [eax],al
    4dd0:	08 6e 65             	or     BYTE PTR [esi+0x65],ch
    4dd3:	67 00 01             	add    BYTE PTR [bx+di],al
    4dd6:	5d                   	pop    ebp
    4dd7:	25 00 00 00 06       	and    eax,0x6000000
    4ddc:	61                   	popa   
    4ddd:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4dde:	79 00                	jns    4de0 <__fmodf2+0x4db4>
    4de0:	01 5d 25             	add    DWORD PTR [ebp+0x25],ebx
    4de3:	00 00                	add    BYTE PTR [eax],al
    4de5:	00 01                	add    BYTE PTR [ecx],al
    4de7:	51                   	push   ecx
    4de8:	07                   	pop    es
    4de9:	37                   	aaa    
    4dea:	11 00                	adc    DWORD PTR [eax],eax
    4dec:	00 01                	add    BYTE PTR [ecx],al
    4dee:	5d                   	pop    ebp
    4def:	25 00 00 00 00       	and    eax,0x0
    4df4:	09 04 ea             	or     DWORD PTR [edx+ebp*8],eax
    4df7:	00 00                	add    BYTE PTR [eax],al
    4df9:	00 0a                	add    BYTE PTR [edx],cl
    4dfb:	48                   	dec    eax
    4dfc:	00 00                	add    BYTE PTR [eax],al
    4dfe:	00 09                	add    BYTE PTR [ecx],cl
    4e00:	04 f5                	add    al,0xf5
    4e02:	00 00                	add    BYTE PTR [eax],al
    4e04:	00 09                	add    BYTE PTR [ecx],cl
    4e06:	04 48                	add    al,0x48
    4e08:	00 00                	add    BYTE PTR [eax],al
    4e0a:	00 03                	add    BYTE PTR [ebx],al
    4e0c:	04 07                	add    al,0x7
    4e0e:	2d 00 00 00 00       	sub    eax,0x0
    4e13:	c0 00 00             	rol    BYTE PTR [eax],0x0
    4e16:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4e19:	83 17 00             	adc    DWORD PTR [edi],0x0
    4e1c:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4e1f:	c3                   	ret    
    4e20:	00 00                	add    BYTE PTR [eax],al
    4e22:	00 0c 9d 11 00 00 4d 	add    BYTE PTR [ebx*4+0x4d000011],cl
    4e29:	00 00                	add    BYTE PTR [eax],al
    4e2b:	00 50 51             	add    BYTE PTR [eax+0x51],dl
    4e2e:	00 9f b6 00 00 00    	add    BYTE PTR [edi+0xb6],bl
    4e34:	23 1e                	and    ebx,DWORD PTR [esi]
    4e36:	00 00                	add    BYTE PTR [eax],al
    4e38:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    4e3f:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    4e42:	32 00                	xor    al,BYTE PTR [eax]
    4e44:	00 00                	add    BYTE PTR [eax],al
    4e46:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    4e4d:	03 08                	add    ecx,DWORD PTR [eax]
    4e4f:	05 00 00 00 00       	add    eax,0x0
    4e54:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    4e57:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4e58:	00 00                	add    BYTE PTR [eax],al
    4e5a:	00 03                	add    BYTE PTR [ebx],al
    4e5c:	01 06                	add    DWORD PTR [esi],eax
    4e5e:	48                   	dec    eax
    4e5f:	00 00                	add    BYTE PTR [eax],al
    4e61:	00 04 bb             	add    BYTE PTR [ebx+edi*4],al
    4e64:	11 00                	adc    DWORD PTR [eax],eax
    4e66:	00 01                	add    BYTE PTR [ecx],al
    4e68:	03 50 51             	add    edx,DWORD PTR [eax+0x51]
    4e6b:	00 9f 96 00 00 00    	add    BYTE PTR [edi+0x96],bl
    4e71:	01 9c 9d 00 00 00 05 	add    DWORD PTR [ebp+ebx*4+0x5000000],ebx
    4e78:	98                   	cwde   
    4e79:	02 00                	add    al,BYTE PTR [eax]
    4e7b:	00 01                	add    BYTE PTR [ecx],al
    4e7d:	03 9d 00 00 00 02    	add    ebx,DWORD PTR [ebp+0x2000000]
    4e83:	91                   	xchg   ecx,eax
    4e84:	00 06                	add    BYTE PTR [esi],al
    4e86:	64                   	fs
    4e87:	73 74                	jae    4efd <__fmodf2+0x4ed1>
    4e89:	00 01                	add    BYTE PTR [ecx],al
    4e8b:	05 9d 00 00 00       	add    eax,0x9d
    4e90:	02 91 6c 06 73 72    	add    dl,BYTE PTR [ecx+0x7273066c]
    4e96:	63 00                	arpl   WORD PTR [eax],ax
    4e98:	01 05 9d 00 00 00    	add    DWORD PTR ds:0x9d,eax
    4e9e:	02 91 68 06 65 6e    	add    dl,BYTE PTR [ecx+0x6e650668]
    4ea4:	64 00 01             	add    BYTE PTR fs:[ecx],al
    4ea7:	06                   	push   es
    4ea8:	9d                   	popf   
    4ea9:	00 00                	add    BYTE PTR [eax],al
    4eab:	00 02                	add    BYTE PTR [edx],al
    4ead:	91                   	xchg   ecx,eax
    4eae:	64 00 07             	add    BYTE PTR fs:[edi],al
    4eb1:	04 48                	add    al,0x48
    4eb3:	00 00                	add    BYTE PTR [eax],al
    4eb5:	00 08                	add    BYTE PTR [eax],cl
    4eb7:	b3 11                	mov    bl,0x11
    4eb9:	00 00                	add    BYTE PTR [eax],al
    4ebb:	01 1f                	add    DWORD PTR [edi],ebx
    4ebd:	e6 51                	out    0x51,al
    4ebf:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    4ec5:	01 9c 05 98 02 00 00 	add    DWORD PTR [ebp+eax*1+0x298],ebx
    4ecc:	01 1f                	add    DWORD PTR [edi],ebx
    4ece:	9d                   	popf   
    4ecf:	00 00                	add    BYTE PTR [eax],al
    4ed1:	00 02                	add    BYTE PTR [edx],al
    4ed3:	91                   	xchg   ecx,eax
    4ed4:	00 00                	add    BYTE PTR [eax],al
    4ed6:	00 c6                	add    dh,al
    4ed8:	01 00                	add    DWORD PTR [eax],eax
    4eda:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4edd:	06                   	push   es
    4ede:	18 00                	sbb    BYTE PTR [eax],al
    4ee0:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4ee3:	c3                   	ret    
    4ee4:	00 00                	add    BYTE PTR [eax],al
    4ee6:	00 0c cc             	add    BYTE PTR [esp+ecx*8],cl
    4ee9:	11 00                	adc    DWORD PTR [eax],eax
    4eeb:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    4eee:	00 00                	add    BYTE PTR [eax],al
    4ef0:	08 52 00             	or     BYTE PTR [edx+0x0],dl
    4ef3:	9f                   	lahf   
    4ef4:	44                   	inc    esp
    4ef5:	01 00                	add    DWORD PTR [eax],eax
    4ef7:	00 85 1e 00 00 02    	add    BYTE PTR [ebp+0x200001e],al
    4efd:	04 05                	add    al,0x5
    4eff:	69 6e 74 00 03 91 02 	imul   ebp,DWORD PTR [esi+0x74],0x2910300
    4f06:	00 00                	add    BYTE PTR [eax],al
    4f08:	02 d8                	add    bl,al
    4f0a:	37                   	aaa    
    4f0b:	00 00                	add    BYTE PTR [eax],al
    4f0d:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    4f10:	07                   	pop    es
    4f11:	32 00                	xor    al,BYTE PTR [eax]
    4f13:	00 00                	add    BYTE PTR [eax],al
    4f15:	04 04                	add    al,0x4
    4f17:	05 05 00 00 00       	add    eax,0x5
    4f1c:	04 08                	add    al,0x8
    4f1e:	05 00 00 00 00       	add    eax,0x0
    4f23:	04 0c                	add    al,0xc
    4f25:	04 ad                	add    al,0xad
    4f27:	00 00                	add    BYTE PTR [eax],al
    4f29:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4f2c:	06                   	push   es
    4f2d:	48                   	dec    eax
    4f2e:	00 00                	add    BYTE PTR [eax],al
    4f30:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4f33:	08 3f                	or     BYTE PTR [edi],bh
    4f35:	00 00                	add    BYTE PTR [eax],al
    4f37:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    4f3a:	07                   	pop    es
    4f3b:	0e                   	push   cs
    4f3c:	00 00                	add    BYTE PTR [eax],al
    4f3e:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    4f41:	07                   	pop    es
    4f42:	2d 00 00 00 04       	sub    eax,0x4000000
    4f47:	01 06                	add    DWORD PTR [esi],eax
    4f49:	41                   	inc    ecx
    4f4a:	00 00                	add    BYTE PTR [eax],al
    4f4c:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    4f4f:	05 b9 00 00 00       	add    eax,0xb9
    4f54:	04 08                	add    al,0x8
    4f56:	07                   	pop    es
    4f57:	28 00                	sub    BYTE PTR [eax],al
    4f59:	00 00                	add    BYTE PTR [eax],al
    4f5b:	04 04                	add    al,0x4
    4f5d:	07                   	pop    es
    4f5e:	2a 01                	sub    al,BYTE PTR [ecx]
    4f60:	00 00                	add    BYTE PTR [eax],al
    4f62:	05 04 53 00 00       	add    eax,0x5304
    4f67:	00 03                	add    BYTE PTR [ebx],al
    4f69:	45                   	inc    ebp
    4f6a:	02 00                	add    al,BYTE PTR [eax]
    4f6c:	00 03                	add    BYTE PTR [ebx],al
    4f6e:	34 37                	xor    al,0x37
    4f70:	00 00                	add    BYTE PTR [eax],al
    4f72:	00 03                	add    BYTE PTR [ebx],al
    4f74:	01 02                	add    DWORD PTR [edx],eax
    4f76:	00 00                	add    BYTE PTR [eax],al
    4f78:	03 56 37             	add    edx,DWORD PTR [esi+0x37]
    4f7b:	00 00                	add    BYTE PTR [eax],al
    4f7d:	00 05 04 ad 00 00    	add    BYTE PTR ds:0xad04,al
    4f83:	00 06                	add    BYTE PTR [esi],al
    4f85:	53                   	push   ebx
    4f86:	00 00                	add    BYTE PTR [eax],al
    4f88:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4f8b:	02 e8                	add    ch,al
    4f8d:	06                   	push   es
    4f8e:	00 00                	add    BYTE PTR [eax],al
    4f90:	04 08                	add    al,0x8
    4f92:	04 b2                	add    al,0xb2
    4f94:	00 00                	add    BYTE PTR [eax],al
    4f96:	00 07                	add    BYTE PTR [edi],al
    4f98:	01 12                	add    DWORD PTR [edx],edx
    4f9a:	00 00                	add    BYTE PTR [eax],al
    4f9c:	01 0d 8b 00 00 00    	add    DWORD PTR ds:0x8b,ecx
    4fa2:	08 52 00             	or     BYTE PTR [edx+0x0],dl
    4fa5:	9f                   	lahf   
    4fa6:	1e                   	push   ds
    4fa7:	01 00                	add    DWORD PTR [eax],eax
    4fa9:	00 01                	add    BYTE PTR [ecx],al
    4fab:	9c                   	pushf  
    4fac:	3a 01                	cmp    al,BYTE PTR [ecx]
    4fae:	00 00                	add    BYTE PTR [eax],al
    4fb0:	08 69 6e             	or     BYTE PTR [ecx+0x6e],ch
    4fb3:	00 01                	add    BYTE PTR [ecx],al
    4fb5:	0d a7 00 00 00       	or     eax,0xa7
    4fba:	02 91 00 09 f9 11    	add    dl,BYTE PTR [ecx+0x11f90900]
    4fc0:	00 00                	add    BYTE PTR [eax],al
    4fc2:	01 0d a7 00 00 00    	add    DWORD PTR ds:0xa7,ecx
    4fc8:	02 91 04 08 62 79    	add    dl,BYTE PTR [ecx+0x79620804]
    4fce:	00 01                	add    BYTE PTR [ecx],al
    4fd0:	0d a7 00 00 00       	or     eax,0xa7
    4fd5:	02 91 08 09 0d 12    	add    dl,BYTE PTR [ecx+0x120d0908]
    4fdb:	00 00                	add    BYTE PTR [eax],al
    4fdd:	01 0d 8b 00 00 00    	add    DWORD PTR ds:0x8b,ecx
    4fe3:	02 91 0c 0a c4 11    	add    dl,BYTE PTR [ecx+0x11c40a0c]
    4fe9:	00 00                	add    BYTE PTR [eax],al
    4feb:	01 0f                	add    DWORD PTR [edi],ecx
    4fed:	2c 00                	sub    al,0x0
    4fef:	00 00                	add    BYTE PTR [eax],al
    4ff1:	02 91 6c 0a e4 11    	add    dl,BYTE PTR [ecx+0x11e40a6c]
    4ff7:	00 00                	add    BYTE PTR [eax],al
    4ff9:	01 12                	add    DWORD PTR [edx],edx
    4ffb:	2c 00                	sub    al,0x0
    4ffd:	00 00                	add    BYTE PTR [eax],al
    4fff:	02 91 68 0a dd 11    	add    dl,BYTE PTR [ecx+0x11dd0a68]
    5005:	00 00                	add    BYTE PTR [eax],al
    5007:	01 13                	add    DWORD PTR [ebx],edx
    5009:	8b 00                	mov    eax,DWORD PTR [eax]
    500b:	00 00                	add    BYTE PTR [eax],al
    500d:	02 91 64 00 07 ee    	add    dl,BYTE PTR [ecx-0x11f8ff9c]
    5013:	11 00                	adc    DWORD PTR [eax],eax
    5015:	00 01                	add    BYTE PTR [ecx],al
    5017:	2a 8b 00 00 00 26    	sub    cl,BYTE PTR [ebx+0x26000000]
    501d:	53                   	push   ebx
    501e:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
    5024:	01 9c 8a 01 00 00 08 	add    DWORD PTR [edx+ecx*4+0x8000001],ebx
    502b:	69 6e 00 01 2a a7 00 	imul   ebp,DWORD PTR [esi+0x0],0xa72a01
    5032:	00 00                	add    BYTE PTR [eax],al
    5034:	02 91 00 09 f9 11    	add    dl,BYTE PTR [ecx+0x11f90900]
    503a:	00 00                	add    BYTE PTR [eax],al
    503c:	01 2a                	add    DWORD PTR [edx],ebp
    503e:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    503f:	00 00                	add    BYTE PTR [eax],al
    5041:	00 02                	add    BYTE PTR [edx],al
    5043:	91                   	xchg   ecx,eax
    5044:	04 08                	add    al,0x8
    5046:	62 79 00             	bound  edi,QWORD PTR [ecx+0x0]
    5049:	01 2a                	add    DWORD PTR [edx],ebp
    504b:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    504c:	00 00                	add    BYTE PTR [eax],al
    504e:	00 02                	add    BYTE PTR [edx],al
    5050:	91                   	xchg   ecx,eax
    5051:	08 09                	or     BYTE PTR [ecx],cl
    5053:	0d 12 00 00 01       	or     eax,0x1000012
    5058:	2a 8b 00 00 00 02    	sub    cl,BYTE PTR [ebx+0x2000000]
    505e:	91                   	xchg   ecx,eax
    505f:	0c 00                	or     al,0x0
    5061:	0b 78 00             	or     edi,DWORD PTR [eax+0x0]
    5064:	00 00                	add    BYTE PTR [eax],al
    5066:	04 33                	add    al,0x33
    5068:	9b                   	fwait
    5069:	01 00                	add    DWORD PTR [eax],eax
    506b:	00 05 03 40 92 00    	add    BYTE PTR ds:0x924003,al
    5071:	9f                   	lahf   
    5072:	05 04 8b 00 00       	add    eax,0x8b04
    5077:	00 0b                	add    BYTE PTR [ebx],cl
    5079:	10 02                	adc    BYTE PTR [edx],al
    507b:	00 00                	add    BYTE PTR [eax],al
    507d:	05 35 b2 01 00       	add    eax,0x1b235
    5082:	00 05 03 50 92 00    	add    BYTE PTR ds:0x925003,al
    5088:	9f                   	lahf   
    5089:	05 04 9c 00 00       	add    eax,0x9c04
    508e:	00 0b                	add    BYTE PTR [ebx],cl
    5090:	33 02                	xor    eax,DWORD PTR [edx]
    5092:	00 00                	add    BYTE PTR [eax],al
    5094:	05 36 91 00 00       	add    eax,0x9136
    5099:	00 05 03 4c 92 00    	add    BYTE PTR ds:0x924c03,al
    509f:	9f                   	lahf   
    50a0:	00 b0 01 00 00 04    	add    BYTE PTR [eax+0x4000001],dh
    50a6:	00 a7 18 00 00 04    	add    BYTE PTR [edi+0x4000018],ah
    50ac:	01 c3                	add    ebx,eax
    50ae:	00 00                	add    BYTE PTR [eax],al
    50b0:	00 0c 1f             	add    BYTE PTR [edi+ebx*1],cl
    50b3:	12 00                	adc    al,BYTE PTR [eax]
    50b5:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    50b8:	00 00                	add    BYTE PTR [eax],al
    50ba:	4c                   	dec    esp
    50bb:	53                   	push   ebx
    50bc:	00 9f 29 01 00 00    	add    BYTE PTR [edi+0x129],bl
    50c2:	5d                   	pop    ebp
    50c3:	1f                   	pop    ds
    50c4:	00 00                	add    BYTE PTR [eax],al
    50c6:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    50cd:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    50d0:	32 00                	xor    al,BYTE PTR [eax]
    50d2:	00 00                	add    BYTE PTR [eax],al
    50d4:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    50db:	03 08                	add    ecx,DWORD PTR [eax]
    50dd:	05 00 00 00 00       	add    eax,0x0
    50e2:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    50e5:	ad                   	lods   eax,DWORD PTR ds:[esi]
    50e6:	00 00                	add    BYTE PTR [eax],al
    50e8:	00 03                	add    BYTE PTR [ebx],al
    50ea:	01 06                	add    DWORD PTR [esi],eax
    50ec:	48                   	dec    eax
    50ed:	00 00                	add    BYTE PTR [eax],al
    50ef:	00 03                	add    BYTE PTR [ebx],al
    50f1:	01 08                	add    DWORD PTR [eax],ecx
    50f3:	3f                   	aas    
    50f4:	00 00                	add    BYTE PTR [eax],al
    50f6:	00 03                	add    BYTE PTR [ebx],al
    50f8:	02 07                	add    al,BYTE PTR [edi]
    50fa:	0e                   	push   cs
    50fb:	00 00                	add    BYTE PTR [eax],al
    50fd:	00 03                	add    BYTE PTR [ebx],al
    50ff:	04 07                	add    al,0x7
    5101:	2d 00 00 00 03       	sub    eax,0x3000000
    5106:	01 06                	add    DWORD PTR [esi],eax
    5108:	41                   	inc    ecx
    5109:	00 00                	add    BYTE PTR [eax],al
    510b:	00 03                	add    BYTE PTR [ebx],al
    510d:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    5113:	03 08                	add    ecx,DWORD PTR [eax]
    5115:	07                   	pop    es
    5116:	28 00                	sub    BYTE PTR [eax],al
    5118:	00 00                	add    BYTE PTR [eax],al
    511a:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    511d:	2a 01                	sub    al,BYTE PTR [ecx]
    511f:	00 00                	add    BYTE PTR [eax],al
    5121:	04 04                	add    al,0x4
    5123:	48                   	dec    eax
    5124:	00 00                	add    BYTE PTR [eax],al
    5126:	00 05 33 12 00 00    	add    BYTE PTR ds:0x1233,al
    512c:	01 34 80             	add    DWORD PTR [eax+eax*4],esi
    512f:	00 00                	add    BYTE PTR [eax],al
    5131:	00 4c 53 00          	add    BYTE PTR [ebx+edx*2+0x0],cl
    5135:	9f                   	lahf   
    5136:	9e                   	sahf   
    5137:	00 00                	add    BYTE PTR [eax],al
    5139:	00 01                	add    BYTE PTR [ecx],al
    513b:	9c                   	pushf  
    513c:	ee                   	out    dx,al
    513d:	00 00                	add    BYTE PTR [eax],al
    513f:	00 06                	add    BYTE PTR [esi],al
    5141:	45                   	inc    ebp
    5142:	12 00                	adc    al,BYTE PTR [eax]
    5144:	00 01                	add    BYTE PTR [ecx],al
    5146:	34 80                	xor    al,0x80
    5148:	00 00                	add    BYTE PTR [eax],al
    514a:	00 02                	add    BYTE PTR [edx],al
    514c:	91                   	xchg   ecx,eax
    514d:	00 06                	add    BYTE PTR [esi],al
    514f:	42                   	inc    edx
    5150:	12 00                	adc    al,BYTE PTR [eax]
    5152:	00 01                	add    BYTE PTR [ecx],al
    5154:	34 80                	xor    al,0x80
    5156:	00 00                	add    BYTE PTR [eax],al
    5158:	00 02                	add    BYTE PTR [edx],al
    515a:	91                   	xchg   ecx,eax
    515b:	04 06                	add    al,0x6
    515d:	05 07 00 00 01       	add    eax,0x1000007
    5162:	34 25                	xor    al,0x25
    5164:	00 00                	add    BYTE PTR [eax],al
    5166:	00 02                	add    BYTE PTR [edx],al
    5168:	91                   	xchg   ecx,eax
    5169:	08 07                	or     BYTE PTR [edi],al
    516b:	61                   	popa   
    516c:	00 01                	add    BYTE PTR [ecx],al
    516e:	36 80 00 00          	add    BYTE PTR ss:[eax],0x0
    5172:	00 01                	add    BYTE PTR [ecx],al
    5174:	56                   	push   esi
    5175:	07                   	pop    es
    5176:	62 00                	bound  eax,QWORD PTR [eax]
    5178:	01 36                	add    DWORD PTR [esi],esi
    517a:	80 00 00             	add    BYTE PTR [eax],0x0
    517d:	00 01                	add    BYTE PTR [ecx],al
    517f:	53                   	push   ebx
    5180:	07                   	pop    es
    5181:	6c                   	ins    BYTE PTR es:[edi],dx
    5182:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    5184:	00 01                	add    BYTE PTR [ecx],al
    5186:	3c 25                	cmp    al,0x25
    5188:	00 00                	add    BYTE PTR [eax],al
    518a:	00 02                	add    BYTE PTR [edx],al
    518c:	91                   	xchg   ecx,eax
    518d:	6c                   	ins    BYTE PTR es:[edi],dx
    518e:	00 05 17 12 00 00    	add    BYTE PTR ds:0x1217,al
    5194:	01 58 80             	add    DWORD PTR [eax-0x80],ebx
    5197:	00 00                	add    BYTE PTR [eax],al
    5199:	00 ea                	add    dl,ch
    519b:	53                   	push   ebx
    519c:	00 9f 6e 00 00 00    	add    BYTE PTR [edi+0x6e],bl
    51a2:	01 9c 3a 01 00 00 06 	add    DWORD PTR [edx+edi*1+0x6000001],ebx
    51a9:	45                   	inc    ebp
    51aa:	12 00                	adc    al,BYTE PTR [eax]
    51ac:	00 01                	add    BYTE PTR [ecx],al
    51ae:	58                   	pop    eax
    51af:	3a 01                	cmp    al,BYTE PTR [ecx]
    51b1:	00 00                	add    BYTE PTR [eax],al
    51b3:	02 91 00 06 42 12    	add    dl,BYTE PTR [ecx+0x12420600]
    51b9:	00 00                	add    BYTE PTR [eax],al
    51bb:	01 58 3a             	add    DWORD PTR [eax+0x3a],ebx
    51be:	01 00                	add    DWORD PTR [eax],eax
    51c0:	00 02                	add    BYTE PTR [edx],al
    51c2:	91                   	xchg   ecx,eax
    51c3:	04 07                	add    al,0x7
    51c5:	61                   	popa   
    51c6:	00 01                	add    BYTE PTR [ecx],al
    51c8:	5a                   	pop    edx
    51c9:	80 00 00             	add    BYTE PTR [eax],0x0
    51cc:	00 01                	add    BYTE PTR [ecx],al
    51ce:	56                   	push   esi
    51cf:	07                   	pop    es
    51d0:	62 00                	bound  eax,QWORD PTR [eax]
    51d2:	01 5a 80             	add    DWORD PTR [edx-0x80],ebx
    51d5:	00 00                	add    BYTE PTR [eax],al
    51d7:	00 01                	add    BYTE PTR [ecx],al
    51d9:	53                   	push   ebx
    51da:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    51dd:	40                   	inc    eax
    51de:	01 00                	add    DWORD PTR [eax],eax
    51e0:	00 08                	add    BYTE PTR [eax],cl
    51e2:	48                   	dec    eax
    51e3:	00 00                	add    BYTE PTR [eax],al
    51e5:	00 09                	add    BYTE PTR [ecx],cl
    51e7:	2c 12                	sub    al,0x12
    51e9:	00 00                	add    BYTE PTR [eax],al
    51eb:	01 77 80             	add    DWORD PTR [edi-0x80],esi
    51ee:	00 00                	add    BYTE PTR [eax],al
    51f0:	00 58 54             	add    BYTE PTR [eax+0x54],bl
    51f3:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    51f9:	01 9c 7b 01 00 00 06 	add    DWORD PTR [ebx+edi*2+0x6000001],ebx
    5200:	45                   	inc    ebp
    5201:	12 00                	adc    al,BYTE PTR [eax]
    5203:	00 01                	add    BYTE PTR [ecx],al
    5205:	77 3a                	ja     5241 <__fmodf2+0x5215>
    5207:	01 00                	add    DWORD PTR [eax],eax
    5209:	00 02                	add    BYTE PTR [edx],al
    520b:	91                   	xchg   ecx,eax
    520c:	00 06                	add    BYTE PTR [esi],al
    520e:	42                   	inc    edx
    520f:	12 00                	adc    al,BYTE PTR [eax]
    5211:	00 01                	add    BYTE PTR [ecx],al
    5213:	77 3a                	ja     524f <__fmodf2+0x5223>
    5215:	01 00                	add    DWORD PTR [eax],eax
    5217:	00 02                	add    BYTE PTR [edx],al
    5219:	91                   	xchg   ecx,eax
    521a:	04 00                	add    al,0x0
    521c:	0a 48 00             	or     cl,BYTE PTR [eax+0x0]
    521f:	00 00                	add    BYTE PTR [eax],al
    5221:	8b 01                	mov    eax,DWORD PTR [ecx]
    5223:	00 00                	add    BYTE PTR [eax],al
    5225:	0b 79 00             	or     edi,DWORD PTR [ecx+0x0]
    5228:	00 00                	add    BYTE PTR [eax],al
    522a:	65 00 0c 3c          	add    BYTE PTR gs:[esp+edi*1],cl
    522e:	12 00                	adc    al,BYTE PTR [eax]
    5230:	00 01                	add    BYTE PTR [ecx],al
    5232:	19 7b 01             	sbb    DWORD PTR [ebx+0x1],edi
    5235:	00 00                	add    BYTE PTR [eax],al
    5237:	05 03 a0 90 00       	add    eax,0x90a003
    523c:	9f                   	lahf   
    523d:	0d 78 00 00 00       	or     eax,0x78
    5242:	02 33                	add    dh,BYTE PTR [ebx]
    5244:	ad                   	lods   eax,DWORD PTR ds:[esi]
    5245:	01 00                	add    DWORD PTR [eax],eax
    5247:	00 05 03 40 92 00    	add    BYTE PTR ds:0x924003,al
    524d:	9f                   	lahf   
    524e:	04 04                	add    al,0x4
    5250:	80 00 00             	add    BYTE PTR [eax],0x0
    5253:	00 00                	add    BYTE PTR [eax],al
    5255:	96                   	xchg   esi,eax
    5256:	05 00 00 04 00       	add    eax,0x40000
    525b:	69 19 00 00 04 01    	imul   ebx,DWORD PTR [ecx],0x1040000
    5261:	c3                   	ret    
    5262:	00 00                	add    BYTE PTR [eax],al
    5264:	00 0c 4c             	add    BYTE PTR [esp+ecx*2],cl
    5267:	12 00                	adc    al,BYTE PTR [eax]
    5269:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    526c:	00 00                	add    BYTE PTR [eax],al
    526e:	78 54                	js     52c4 <__fmodf2+0x5298>
    5270:	00 9f 0e 0d 00 00    	add    BYTE PTR [edi+0xd0e],bl
    5276:	ed                   	in     eax,dx
    5277:	1f                   	pop    ds
    5278:	00 00                	add    BYTE PTR [eax],al
    527a:	02 a0 03 00 00 04    	add    ah,BYTE PTR [eax+0x4000003]
    5280:	26 01 00             	add    DWORD PTR es:[eax],eax
    5283:	00 05 15 26 01 00    	add    BYTE PTR ds:0x12615,al
    5289:	00 03                	add    BYTE PTR [ebx],al
    528b:	51                   	push   ecx
    528c:	04 00                	add    al,0x0
    528e:	00 00                	add    BYTE PTR [eax],al
    5290:	03 96 04 00 00 01    	add    edx,DWORD PTR [esi+0x1000004]
    5296:	03 84 02 00 00 02 03 	add    eax,DWORD PTR [edx+eax*1+0x3020000]
    529d:	83 03 00             	add    DWORD PTR [ebx],0x0
    52a0:	00 03                	add    BYTE PTR [ebx],al
    52a2:	03 6a 02             	add    ebp,DWORD PTR [edx+0x2]
    52a5:	00 00                	add    BYTE PTR [eax],al
    52a7:	04 03                	add    al,0x3
    52a9:	da 04 00             	fiadd  DWORD PTR [eax+eax*1]
    52ac:	00 05 03 78 04 00    	add    BYTE PTR ds:0x47803,al
    52b2:	00 0a                	add    BYTE PTR [edx],cl
    52b4:	03 c4                	add    eax,esp
    52b6:	03 00                	add    eax,DWORD PTR [eax]
    52b8:	00 0b                	add    BYTE PTR [ebx],cl
    52ba:	03 2a                	add    ebp,DWORD PTR [edx]
    52bc:	04 00                	add    al,0x0
    52be:	00 0c 03             	add    BYTE PTR [ebx+eax*1],cl
    52c1:	91                   	xchg   ecx,eax
    52c2:	03 00                	add    eax,DWORD PTR [eax]
    52c4:	00 0d 03 aa 03 00    	add    BYTE PTR ds:0x3aa03,cl
    52ca:	00 0e                	add    BYTE PTR [esi],cl
    52cc:	03 77 02             	add    esi,DWORD PTR [edi+0x2]
    52cf:	00 00                	add    BYTE PTR [eax],al
    52d1:	0f 03 f4             	lsl    esi,sp
    52d4:	03 00                	add    eax,DWORD PTR [eax]
    52d6:	00 10                	add    BYTE PTR [eax],dl
    52d8:	03 27                	add    esp,DWORD PTR [edi]
    52da:	05 00 00 11 03       	add    eax,0x3110000
    52df:	05 05 00 00 4f       	add    eax,0x4f000005
    52e4:	03 cb                	add    ecx,ebx
    52e6:	04 00                	add    al,0x0
    52e8:	00 50 03             	add    BYTE PTR [eax+0x3],dl
    52eb:	44                   	inc    esp
    52ec:	04 00                	add    al,0x0
    52ee:	00 59 03             	add    BYTE PTR [ecx+0x3],bl
    52f1:	14 05                	adc    al,0x5
    52f3:	00 00                	add    BYTE PTR [eax],al
    52f5:	61                   	popa   
    52f6:	03 49 03             	add    ecx,DWORD PTR [ecx+0x3]
    52f9:	00 00                	add    BYTE PTR [eax],al
    52fb:	97                   	xchg   edi,eax
    52fc:	04 61                	add    al,0x61
    52fe:	04 00                	add    al,0x0
    5300:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    5303:	04 37                	add    al,0x37
    5305:	04 00                	add    al,0x0
    5307:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    530b:	44                   	inc    esp
    530c:	05 00 00 65 01       	add    eax,0x1650000
    5311:	04 25                	add    al,0x25
    5313:	03 00                	add    eax,DWORD PTR [eax]
    5315:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    5318:	04 56                	add    al,0x56
    531a:	05 00 00 67 01       	add    eax,0x1670000
    531f:	04 b7                	add    al,0xb7
    5321:	03 00                	add    eax,DWORD PTR [eax]
    5323:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    5326:	04 d6                	add    al,0xd6
    5328:	02 00                	add    al,BYTE PTR [eax]
    532a:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    532d:	04 85                	add    al,0x85
    532f:	04 00                	add    al,0x0
    5331:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    5334:	04 39                	add    al,0x39
    5336:	03 00                	add    eax,DWORD PTR [eax]
    5338:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    533b:	04 e8                	add    al,0xe8
    533d:	04 00                	add    al,0x0
    533f:	00 00                	add    BYTE PTR [eax],al
    5341:	03 04 d9             	add    eax,DWORD PTR [ecx+ebx*8]
    5344:	03 00                	add    eax,DWORD PTR [eax]
    5346:	00 01                	add    BYTE PTR [ecx],al
    5348:	03 04 e8             	add    eax,DWORD PTR [eax+ebp*8]
    534b:	03 00                	add    eax,DWORD PTR [eax]
    534d:	00 02                	add    BYTE PTR [edx],al
    534f:	03 04 73             	add    eax,DWORD PTR [ebx+esi*2]
    5352:	03 00                	add    eax,DWORD PTR [eax]
    5354:	00 03                	add    BYTE PTR [ebx],al
    5356:	03 04 b6             	add    eax,DWORD PTR [esi+esi*4]
    5359:	02 00                	add    al,BYTE PTR [eax]
    535b:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    535e:	04 15                	add    al,0x15
    5360:	03 00                	add    eax,DWORD PTR [eax]
    5362:	00 05 03 04 64 03    	add    BYTE PTR ds:0x3640403,al
    5368:	00 00                	add    BYTE PTR [eax],al
    536a:	06                   	push   es
    536b:	03 04 b2             	add    eax,DWORD PTR [edx+esi*4]
    536e:	04 00                	add    al,0x0
    5370:	00 07                	add    BYTE PTR [edi],al
    5372:	03 04 01             	add    eax,DWORD PTR [ecx+eax*1]
    5375:	04 00                	add    al,0x0
    5377:	00 00                	add    BYTE PTR [eax],al
    5379:	09 00                	or     DWORD PTR [eax],eax
    537b:	05 04 07 32 00       	add    eax,0x320704
    5380:	00 00                	add    BYTE PTR [eax],al
    5382:	06                   	push   es
    5383:	04 05                	add    al,0x5
    5385:	69 6e 74 00 05 01 08 	imul   ebp,DWORD PTR [esi+0x74],0x8010500
    538c:	3f                   	aas    
    538d:	00 00                	add    BYTE PTR [eax],al
    538f:	00 05 02 07 0e 00    	add    BYTE PTR ds:0xe0702,al
    5395:	00 00                	add    BYTE PTR [eax],al
    5397:	05 04 07 2d 00       	add    eax,0x2d0704
    539c:	00 00                	add    BYTE PTR [eax],al
    539e:	05 01 06 41 00       	add    eax,0x410601
    53a3:	00 00                	add    BYTE PTR [eax],al
    53a5:	05 02 05 b9 00       	add    eax,0xb90502
    53aa:	00 00                	add    BYTE PTR [eax],al
    53ac:	05 08 05 00 00       	add    eax,0x508
    53b1:	00 00                	add    BYTE PTR [eax],al
    53b3:	05 08 07 28 00       	add    eax,0x280708
    53b8:	00 00                	add    BYTE PTR [eax],al
    53ba:	05 04 05 05 00       	add    eax,0x50504
    53bf:	00 00                	add    BYTE PTR [eax],al
    53c1:	05 04 07 2a 01       	add    eax,0x12a0704
    53c6:	00 00                	add    BYTE PTR [eax],al
    53c8:	07                   	pop    es
    53c9:	04 79                	add    al,0x79
    53cb:	01 00                	add    DWORD PTR [eax],eax
    53cd:	00 05 01 06 48 00    	add    BYTE PTR ds:0x480601,al
    53d3:	00 00                	add    BYTE PTR [eax],al
    53d5:	08 45 02             	or     BYTE PTR [ebp+0x2],al
    53d8:	00 00                	add    BYTE PTR [eax],al
    53da:	02 34 26             	add    dh,BYTE PTR [esi+eiz*1]
    53dd:	01 00                	add    DWORD PTR [eax],eax
    53df:	00 05 0c 04 ad 00    	add    BYTE PTR ds:0xad040c,al
    53e5:	00 00                	add    BYTE PTR [eax],al
    53e7:	08 bb 0d 00 00 03    	or     BYTE PTR [ebx+0x300000d],bh
    53ed:	2a 65 01             	sub    ah,BYTE PTR [ebp+0x1]
    53f0:	00 00                	add    BYTE PTR [eax],al
    53f2:	09 74 6d 00          	or     DWORD PTR [ebp+ebp*2+0x0],esi
    53f6:	2c 03                	sub    al,0x3
    53f8:	2c 2d                	sub    al,0x2d
    53fa:	02 00                	add    al,BYTE PTR [eax]
    53fc:	00 0a                	add    BYTE PTR [edx],cl
    53fe:	3c 0e                	cmp    al,0xe
    5400:	00 00                	add    BYTE PTR [eax],al
    5402:	03 2e                	add    ebp,DWORD PTR [esi]
    5404:	2d 01 00 00 00       	sub    eax,0x1
    5409:	0a 8e 0d 00 00 03    	or     cl,BYTE PTR [esi+0x300000d]
    540f:	2f                   	das    
    5410:	2d 01 00 00 04       	sub    eax,0x4000001
    5415:	0a b6 0c 00 00 03    	or     dh,BYTE PTR [esi+0x300000c]
    541b:	30 2d 01 00 00 08    	xor    BYTE PTR ds:0x8000001,ch
    5421:	0a 1d 0e 00 00 03    	or     bl,BYTE PTR ds:0x300000e
    5427:	31 2d 01 00 00 0c    	xor    DWORD PTR ds:0xc000001,ebp
    542d:	0a 0c 0d 00 00 03 32 	or     cl,BYTE PTR [ecx*1+0x32030000]
    5434:	2d 01 00 00 10       	sub    eax,0x10000001
    5439:	0a 26                	or     ah,BYTE PTR [esi]
    543b:	0d 00 00 03 33       	or     eax,0x33030000
    5440:	2d 01 00 00 14       	sub    eax,0x14000001
    5445:	0a 15 0e 00 00 03    	or     dl,BYTE PTR ds:0x300000e
    544b:	34 2d                	xor    al,0x2d
    544d:	01 00                	add    DWORD PTR [eax],eax
    544f:	00 18                	add    BYTE PTR [eax],bl
    5451:	0a 95 0d 00 00 03    	or     dl,BYTE PTR [ebp+0x300000d]
    5457:	35 2d 01 00 00       	xor    eax,0x12d
    545c:	1c 0a                	sbb    al,0xa
    545e:	59                   	pop    ecx
    545f:	0d 00 00 03 36       	or     eax,0x36030000
    5464:	2d 01 00 00 20       	sub    eax,0x20000001
    5469:	0a dc                	or     bl,ah
    546b:	0d 00 00 03 37       	or     eax,0x37030000
    5470:	65 01 00             	add    DWORD PTR gs:[eax],eax
    5473:	00 24 0a             	add    BYTE PTR [edx+ecx*1],ah
    5476:	cb                   	retf   
    5477:	0c 00                	or     al,0x0
    5479:	00 03                	add    BYTE PTR [ebx],al
    547b:	38 2d 02 00 00 28    	cmp    BYTE PTR ds:0x28000002,ch
    5481:	00 07                	add    BYTE PTR [edi],al
    5483:	04 33                	add    al,0x33
    5485:	02 00                	add    al,BYTE PTR [eax]
    5487:	00 0b                	add    BYTE PTR [ebx],cl
    5489:	79 01                	jns    548c <__fmodf2+0x5460>
    548b:	00 00                	add    BYTE PTR [eax],al
    548d:	0c 61                	or     al,0x61
    548f:	12 00                	adc    al,BYTE PTR [eax]
    5491:	00 01                	add    BYTE PTR [ecx],al
    5493:	1a 92 01 00 00 78    	sbb    dl,BYTE PTR [edx+0x78000001]
    5499:	54                   	push   esp
    549a:	00 9f 44 00 00 00    	add    BYTE PTR [edi+0x44],bl
    54a0:	01 9c 60 02 00 00 0d 	add    DWORD PTR [eax+eiz*2+0xd000002],ebx
    54a7:	72 05                	jb     54ae <__fmodf2+0x5482>
    54a9:	00 00                	add    BYTE PTR [eax],al
    54ab:	01 1c 80             	add    DWORD PTR [eax+eax*4],ebx
    54ae:	01 00                	add    DWORD PTR [eax],eax
    54b0:	00 02                	add    BYTE PTR [edx],al
    54b2:	91                   	xchg   ecx,eax
    54b3:	6c                   	ins    BYTE PTR es:[edi],dx
    54b4:	00 0e                	add    BYTE PTR [esi],cl
    54b6:	ac                   	lods   al,BYTE PTR ds:[esi]
    54b7:	12 00                	adc    al,BYTE PTR [eax]
    54b9:	00 01                	add    BYTE PTR [ecx],al
    54bb:	22 ce                	and    cl,dh
    54bd:	02 00                	add    al,BYTE PTR [eax]
    54bf:	00 bc 54 00 9f 19 03 	add    BYTE PTR [esp+edx*2+0x3199f00],bh
    54c6:	00 00                	add    BYTE PTR [eax],al
    54c8:	01 9c ce 02 00 00 0f 	add    DWORD PTR [esi+ecx*8+0xf000002],ebx
    54cf:	e8 12 00 00 01       	call   10054e6 <sysEnter_Vector+0xed54e6>
    54d4:	22 d4                	and    dl,ah
    54d6:	02 00                	add    al,BYTE PTR [eax]
    54d8:	00 02                	add    BYTE PTR [edx],al
    54da:	91                   	xchg   ecx,eax
    54db:	00 0f                	add    BYTE PTR [edi],cl
    54dd:	c0 12 00             	rcl    BYTE PTR [edx],0x0
    54e0:	00 01                	add    BYTE PTR [ecx],al
    54e2:	22 ce                	and    cl,dh
    54e4:	02 00                	add    al,BYTE PTR [eax]
    54e6:	00 02                	add    BYTE PTR [edx],al
    54e8:	91                   	xchg   ecx,eax
    54e9:	04 0d                	add    al,0xd
    54eb:	30 07                	xor    BYTE PTR [edi],al
    54ed:	00 00                	add    BYTE PTR [eax],al
    54ef:	01 24 92             	add    DWORD PTR [edx+edx*4],esp
    54f2:	01 00                	add    DWORD PTR [eax],eax
    54f4:	00 02                	add    BYTE PTR [edx],al
    54f6:	91                   	xchg   ecx,eax
    54f7:	68 0d d2 12 00       	push   0x12d20d
    54fc:	00 01                	add    BYTE PTR [ecx],al
    54fe:	25 42 01 00 00       	and    eax,0x142
    5503:	02 91 64 0d a6 12    	add    dl,BYTE PTR [ecx+0x12a60d64]
    5509:	00 00                	add    BYTE PTR [eax],al
    550b:	01 25 42 01 00 00    	add    DWORD PTR ds:0x142,esp
    5511:	02 91 70 0d 29 0d    	add    dl,BYTE PTR [ecx+0xd290d70]
    5517:	00 00                	add    BYTE PTR [eax],al
    5519:	01 26                	add    DWORD PTR [esi],esp
    551b:	2d 01 00 00 02       	sub    eax,0x2000001
    5520:	91                   	xchg   ecx,eax
    5521:	6c                   	ins    BYTE PTR es:[edi],dx
    5522:	00 07                	add    BYTE PTR [edi],al
    5524:	04 9d                	add    al,0x9d
    5526:	01 00                	add    DWORD PTR [eax],eax
    5528:	00 07                	add    BYTE PTR [edi],al
    552a:	04 da                	add    al,0xda
    552c:	02 00                	add    al,BYTE PTR [eax]
    552e:	00 0b                	add    BYTE PTR [ebx],cl
    5530:	92                   	xchg   edx,eax
    5531:	01 00                	add    DWORD PTR [eax],eax
    5533:	00 10                	add    BYTE PTR [eax],dl
    5535:	83 12 00             	adc    DWORD PTR [edx],0x0
    5538:	00 01                	add    BYTE PTR [ecx],al
    553a:	3f                   	aas    
    553b:	ce                   	into   
    553c:	02 00                	add    al,BYTE PTR [eax]
    553e:	00 d5                	add    ch,dl
    5540:	57                   	push   edi
    5541:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    5547:	01 9c 15 03 00 00 0f 	add    DWORD PTR [ebp+edx*1+0xf000003],ebx
    554e:	e8 12 00 00 01       	call   1005565 <sysEnter_Vector+0xed5565>
    5553:	3f                   	aas    
    5554:	d4 02                	aam    0x2
    5556:	00 00                	add    BYTE PTR [eax],al
    5558:	02 91 00 0f c0 12    	add    dl,BYTE PTR [ecx+0x12c00f00]
    555e:	00 00                	add    BYTE PTR [eax],al
    5560:	01 3f                	add    DWORD PTR [edi],edi
    5562:	ce                   	into   
    5563:	02 00                	add    al,BYTE PTR [eax]
    5565:	00 02                	add    BYTE PTR [edx],al
    5567:	91                   	xchg   ecx,eax
    5568:	04 00                	add    al,0x0
    556a:	10 57 12             	adc    BYTE PTR [edi+0x12],dl
    556d:	00 00                	add    BYTE PTR [eax],al
    556f:	01 44 ce 02          	add    DWORD PTR [esi+ecx*8+0x2],eax
    5573:	00 00                	add    BYTE PTR [eax],al
    5575:	f2 57                	repnz push edi
    5577:	00 9f 3d 00 00 00    	add    BYTE PTR [edi+0x3d],bl
    557d:	01 9c 49 03 00 00 0f 	add    DWORD PTR [ecx+ecx*2+0xf000003],ebx
    5584:	e8 12 00 00 01       	call   100559b <sysEnter_Vector+0xed559b>
    5589:	44                   	inc    esp
    558a:	d4 02                	aam    0x2
    558c:	00 00                	add    BYTE PTR [eax],al
    558e:	02 91 00 11 74 00    	add    dl,BYTE PTR [ecx+0x741100]
    5594:	01 45 92             	add    DWORD PTR [ebp-0x6e],eax
    5597:	01 00                	add    DWORD PTR [eax],eax
    5599:	00 02                	add    BYTE PTR [edx],al
    559b:	91                   	xchg   ecx,eax
    559c:	74 00                	je     559e <__fmodf2+0x5572>
    559e:	10 ee                	adc    dh,ch
    55a0:	12 00                	adc    al,BYTE PTR [eax]
    55a2:	00 01                	add    BYTE PTR [ecx],al
    55a4:	4b                   	dec    ebx
    55a5:	ce                   	into   
    55a6:	02 00                	add    al,BYTE PTR [eax]
    55a8:	00 2f                	add    BYTE PTR [edi],ch
    55aa:	58                   	pop    eax
    55ab:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
    55b1:	01 9c 8b 03 00 00 0f 	add    DWORD PTR [ebx+ecx*4+0xf000003],ebx
    55b8:	e8 12 00 00 01       	call   10055cf <sysEnter_Vector+0xed55cf>
    55bd:	4b                   	dec    ebx
    55be:	d4 02                	aam    0x2
    55c0:	00 00                	add    BYTE PTR [eax],al
    55c2:	02 91 00 0f c0 12    	add    dl,BYTE PTR [ecx+0x12c00f00]
    55c8:	00 00                	add    BYTE PTR [eax],al
    55ca:	01 4b ce             	add    DWORD PTR [ebx-0x32],ecx
    55cd:	02 00                	add    al,BYTE PTR [eax]
    55cf:	00 02                	add    BYTE PTR [edx],al
    55d1:	91                   	xchg   ecx,eax
    55d2:	04 11                	add    al,0x11
    55d4:	74 00                	je     55d6 <__fmodf2+0x55aa>
    55d6:	01 4d 92             	add    DWORD PTR [ebp-0x6e],ecx
    55d9:	01 00                	add    DWORD PTR [eax],eax
    55db:	00 02                	add    BYTE PTR [edx],al
    55dd:	91                   	xchg   ecx,eax
    55de:	74 00                	je     55e0 <__fmodf2+0x55b4>
    55e0:	10 c6                	adc    dh,al
    55e2:	12 00                	adc    al,BYTE PTR [eax]
    55e4:	00 01                	add    BYTE PTR [ecx],al
    55e6:	53                   	push   ebx
    55e7:	ce                   	into   
    55e8:	02 00                	add    al,BYTE PTR [eax]
    55ea:	00 64 58 00          	add    BYTE PTR [eax+ebx*2+0x0],ah
    55ee:	9f                   	lahf   
    55ef:	1d 00 00 00 01       	sbb    eax,0x1000000
    55f4:	9c                   	pushf  
    55f5:	c1 03 00             	rol    DWORD PTR [ebx],0x0
    55f8:	00 0f                	add    BYTE PTR [edi],cl
    55fa:	e8 12 00 00 01       	call   1005611 <sysEnter_Vector+0xed5611>
    55ff:	53                   	push   ebx
    5600:	d4 02                	aam    0x2
    5602:	00 00                	add    BYTE PTR [eax],al
    5604:	02 91 00 0f c0 12    	add    dl,BYTE PTR [ecx+0x12c00f00]
    560a:	00 00                	add    BYTE PTR [eax],al
    560c:	01 53 ce             	add    DWORD PTR [ebx-0x32],edx
    560f:	02 00                	add    al,BYTE PTR [eax]
    5611:	00 02                	add    BYTE PTR [edx],al
    5613:	91                   	xchg   ecx,eax
    5614:	04 00                	add    al,0x0
    5616:	0e                   	push   cs
    5617:	db 12                	fist   DWORD PTR [edx]
    5619:	00 00                	add    BYTE PTR [eax],al
    561b:	01 57 92             	add    DWORD PTR [edi-0x6e],edx
    561e:	01 00                	add    DWORD PTR [eax],eax
    5620:	00 81 58 00 9f 57    	add    BYTE PTR [ecx+0x579f0058],al
    5626:	08 00                	or     BYTE PTR [eax],al
    5628:	00 01                	add    BYTE PTR [ecx],al
    562a:	9c                   	pushf  
    562b:	59                   	pop    ecx
    562c:	04 00                	add    al,0x0
    562e:	00 0f                	add    BYTE PTR [edi],cl
    5630:	c0 12 00             	rcl    BYTE PTR [edx],0x0
    5633:	00 01                	add    BYTE PTR [ecx],al
    5635:	57                   	push   edi
    5636:	ce                   	into   
    5637:	02 00                	add    al,BYTE PTR [eax]
    5639:	00 02                	add    BYTE PTR [edx],al
    563b:	91                   	xchg   ecx,eax
    563c:	00 11                	add    BYTE PTR [ecx],dl
    563e:	64                   	fs
    563f:	61                   	popa   
    5640:	79 00                	jns    5642 <__fmodf2+0x5616>
    5642:	01 58 65             	add    DWORD PTR [eax+0x65],ebx
    5645:	01 00                	add    DWORD PTR [eax],eax
    5647:	00 02                	add    BYTE PTR [edx],al
    5649:	91                   	xchg   ecx,eax
    564a:	68 0d 29 0d 00       	push   0xd290d
    564f:	00 01                	add    BYTE PTR [ecx],al
    5651:	58                   	pop    eax
    5652:	65 01 00             	add    DWORD PTR gs:[eax],eax
    5655:	00 02                	add    BYTE PTR [edx],al
    5657:	91                   	xchg   ecx,eax
    5658:	54                   	push   esp
    5659:	0d 26 0d 00 00       	or     eax,0xd26
    565e:	01 59 2d             	add    DWORD PTR [ecx+0x2d],ebx
    5661:	01 00                	add    DWORD PTR [eax],eax
    5663:	00 02                	add    BYTE PTR [edx],al
    5665:	91                   	xchg   ecx,eax
    5666:	4c                   	dec    esp
    5667:	0d 98 0d 00 00       	or     eax,0xd98
    566c:	01 5a 2d             	add    DWORD PTR [edx+0x2d],ebx
    566f:	01 00                	add    DWORD PTR [eax],eax
    5671:	00 02                	add    BYTE PTR [edx],al
    5673:	91                   	xchg   ecx,eax
    5674:	64                   	fs
    5675:	0d 98 12 00 00       	or     eax,0x1298
    567a:	01 5a 2d             	add    DWORD PTR [edx+0x2d],ebx
    567d:	01 00                	add    DWORD PTR [eax],eax
    567f:	00 02                	add    BYTE PTR [edx],al
    5681:	91                   	xchg   ecx,eax
    5682:	60                   	pusha  
    5683:	0d ab 09 00 00       	or     eax,0x9ab
    5688:	01 5b 65             	add    DWORD PTR [ebx+0x65],ebx
    568b:	01 00                	add    DWORD PTR [eax],eax
    568d:	00 02                	add    BYTE PTR [edx],al
    568f:	91                   	xchg   ecx,eax
    5690:	50                   	push   eax
    5691:	0d 0b 13 00 00       	or     eax,0x130b
    5696:	01 5c 2d 01          	add    DWORD PTR [ebp+ebp*1+0x1],ebx
    569a:	00 00                	add    BYTE PTR [eax],al
    569c:	02 91 5c 11 64 73    	add    dl,BYTE PTR [ecx+0x7364115c]
    56a2:	74 00                	je     56a4 <__fmodf2+0x5678>
    56a4:	01 5d 65             	add    DWORD PTR [ebp+0x65],ebx
    56a7:	01 00                	add    DWORD PTR [eax],eax
    56a9:	00 02                	add    BYTE PTR [edx],al
    56ab:	91                   	xchg   ecx,eax
    56ac:	58                   	pop    eax
    56ad:	00 10                	add    BYTE PTR [eax],dl
    56af:	9e                   	sahf   
    56b0:	12 00                	adc    al,BYTE PTR [eax]
    56b2:	00 01                	add    BYTE PTR [ecx],al
    56b4:	c2 ce 02             	ret    0x2ce
    56b7:	00 00                	add    BYTE PTR [eax],al
    56b9:	d8 60 00             	fsub   DWORD PTR [eax+0x0]
    56bc:	9f                   	lahf   
    56bd:	6d                   	ins    DWORD PTR es:[edi],dx
    56be:	00 00                	add    BYTE PTR [eax],al
    56c0:	00 01                	add    BYTE PTR [ecx],al
    56c2:	9c                   	pushf  
    56c3:	9d                   	popf   
    56c4:	04 00                	add    al,0x0
    56c6:	00 0f                	add    BYTE PTR [edi],cl
    56c8:	30 07                	xor    BYTE PTR [edi],al
    56ca:	00 00                	add    BYTE PTR [eax],al
    56cc:	01 c2                	add    edx,eax
    56ce:	ce                   	into   
    56cf:	02 00                	add    al,BYTE PTR [eax]
    56d1:	00 02                	add    BYTE PTR [edx],al
    56d3:	91                   	xchg   ecx,eax
    56d4:	00 0f                	add    BYTE PTR [edi],cl
    56d6:	b6 12                	mov    dh,0x12
    56d8:	00 00                	add    BYTE PTR [eax],al
    56da:	01 c2                	add    edx,eax
    56dc:	9d                   	popf   
    56dd:	04 00                	add    al,0x0
    56df:	00 02                	add    BYTE PTR [edx],al
    56e1:	91                   	xchg   ecx,eax
    56e2:	5c                   	pop    esp
    56e3:	0d 4f 0a 00 00       	or     eax,0xa4f
    56e8:	01 c4                	add    esp,eax
    56ea:	92                   	xchg   edx,eax
    56eb:	01 00                	add    DWORD PTR [eax],eax
    56ed:	00 02                	add    BYTE PTR [edx],al
    56ef:	91                   	xchg   ecx,eax
    56f0:	6c                   	ins    BYTE PTR es:[edi],dx
    56f1:	00 05 01 02 e8 06    	add    BYTE PTR ds:0x6e80201,al
    56f7:	00 00                	add    BYTE PTR [eax],al
    56f9:	10 30                	adc    BYTE PTR [eax],dh
    56fb:	07                   	pop    es
    56fc:	00 00                	add    BYTE PTR [eax],al
    56fe:	01 cd                	add    ebp,ecx
    5700:	92                   	xchg   edx,eax
    5701:	01 00                	add    DWORD PTR [eax],eax
    5703:	00 45 61             	add    BYTE PTR [ebp+0x61],al
    5706:	00 9f 41 00 00 00    	add    BYTE PTR [edi+0x41],bl
    570c:	01 9c da 04 00 00 0f 	add    DWORD PTR [edx+ebx*8+0xf000004],ebx
    5713:	04 13                	add    al,0x13
    5715:	00 00                	add    BYTE PTR [eax],al
    5717:	01 cd                	add    ebp,ecx
    5719:	da 04 00             	fiadd  DWORD PTR [eax+eax*1]
    571c:	00 02                	add    BYTE PTR [edx],al
    571e:	91                   	xchg   ecx,eax
    571f:	00 0d 4f 0a 00 00    	add    BYTE PTR ds:0xa4f,cl
    5725:	01 cf                	add    edi,ecx
    5727:	80 01 00             	add    BYTE PTR [ecx],0x0
    572a:	00 02                	add    BYTE PTR [edx],al
    572c:	91                   	xchg   ecx,eax
    572d:	6c                   	ins    BYTE PTR es:[edi],dx
    572e:	00 07                	add    BYTE PTR [edi],al
    5730:	04 92                	add    al,0x92
    5732:	01 00                	add    DWORD PTR [eax],eax
    5734:	00 12                	add    BYTE PTR [edx],dl
    5736:	78 00                	js     5738 <__fmodf2+0x570c>
    5738:	00 00                	add    BYTE PTR [eax],al
    573a:	04 33                	add    al,0x33
    573c:	f1                   	icebp  
    573d:	04 00                	add    al,0x0
    573f:	00 05 03 40 92 00    	add    BYTE PTR ds:0x924003,al
    5745:	9f                   	lahf   
    5746:	07                   	pop    es
    5747:	04 73                	add    al,0x73
    5749:	01 00                	add    DWORD PTR [eax],eax
    574b:	00 12                	add    BYTE PTR [edx],dl
    574d:	6a 12                	push   0x12
    574f:	00 00                	add    BYTE PTR [eax],al
    5751:	01 0d 2d 01 00 00    	add    DWORD PTR ds:0x12d,ecx
    5757:	05 03 08 91 00       	add    eax,0x910803
    575c:	9f                   	lahf   
    575d:	12 fb                	adc    bh,bl
    575f:	12 00                	adc    al,BYTE PTR [eax]
    5761:	00 01                	add    BYTE PTR [ecx],al
    5763:	0e                   	push   cs
    5764:	65 01 00             	add    DWORD PTR gs:[eax],eax
    5767:	00 05 03 dc 92 00    	add    BYTE PTR ds:0x92dc03,al
    576d:	9f                   	lahf   
    576e:	13 73 01             	adc    esi,DWORD PTR [ebx+0x1]
    5771:	00 00                	add    BYTE PTR [eax],al
    5773:	29 05 00 00 14 6c    	sub    DWORD PTR ds:0x6c140000,eax
    5779:	01 00                	add    DWORD PTR [eax],eax
    577b:	00 01                	add    BYTE PTR [ecx],al
    577d:	00 12                	add    BYTE PTR [edx],dl
    577f:	7b 12                	jnp    5793 <__fmodf2+0x5767>
    5781:	00 00                	add    BYTE PTR [eax],al
    5783:	01 0f                	add    DWORD PTR [edi],ecx
    5785:	19 05 00 00 05 03    	sbb    DWORD PTR ds:0x3050000,eax
    578b:	24 92                	and    al,0x92
    578d:	00 9f 12 8c 12 00    	add    BYTE PTR [edi+0x128c12],bl
    5793:	00 01                	add    BYTE PTR [ecx],al
    5795:	10 2d 01 00 00 05    	adc    BYTE PTR ds:0x5000001,ch
    579b:	03 00                	add    eax,DWORD PTR [eax]
    579d:	93                   	xchg   ebx,eax
    579e:	00 9f 12 c0 12 00    	add    BYTE PTR [edi+0x12c012],bl
    57a4:	00 01                	add    BYTE PTR [ecx],al
    57a6:	11 9d 01 00 00 05    	adc    DWORD PTR [ebp+0x5000001],ebx
    57ac:	03 20                	add    esp,DWORD PTR [eax]
    57ae:	93                   	xchg   ebx,eax
    57af:	00 9f 12 74 12 00    	add    BYTE PTR [edi+0x127412],bl
    57b5:	00 01                	add    BYTE PTR [ecx],al
    57b7:	13 65 01             	adc    esp,DWORD PTR [ebp+0x1]
    57ba:	00 00                	add    BYTE PTR [eax],al
    57bc:	05 03 e0 92 00       	add    eax,0x92e003
    57c1:	9f                   	lahf   
    57c2:	13 2d 01 00 00 83    	adc    ebp,DWORD PTR ds:0x83000001
    57c8:	05 00 00 14 6c       	add    eax,0x6c140000
    57cd:	01 00                	add    DWORD PTR [eax],eax
    57cf:	00 01                	add    BYTE PTR [ecx],al
    57d1:	14 6c                	adc    al,0x6c
    57d3:	01 00                	add    DWORD PTR [eax],eax
    57d5:	00 0b                	add    BYTE PTR [ebx],cl
    57d7:	00 12                	add    BYTE PTR [edx],dl
    57d9:	e2 12                	loop   57ed <__fmodf2+0x57c1>
    57db:	00 00                	add    BYTE PTR [eax],al
    57dd:	01 15 94 05 00 00    	add    DWORD PTR ds:0x594,edx
    57e3:	05 03 e0 8e 00       	add    eax,0x8ee003
    57e8:	9f                   	lahf   
    57e9:	0b 6d 05             	or     ebp,DWORD PTR [ebp+0x5]
    57ec:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:15
.globl  _modfasm
.type _modfasm, @function

modfasm:
_modfasm:
                push    ebp
       0:	01 11                	add    DWORD PTR [ecx],edx
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:16
                mov     ebp,esp
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:19
                push    edi                     # Save register edi
                fldd    [ebp+8]           # Load real from stack
                mov     edi,dword [ebp+16]      # Put integer address in edi
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:20
                fld    st(0)                     # Duplicate st
       b:	11 01                	adc    DWORD PTR [ecx],eax
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:21
                frndint                         # Round to integer
       d:	12 06                	adc    al,BYTE PTR [esi]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:22
                fcom    st(1)                     # Compare with orignal value
       f:	10 17                	adc    BYTE PTR [edi],dl
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:23
                fstsw   ax                      # Get the FPU status word
      11:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:24
                testd    byte [ebp+15],0x80      # Test if number is negative
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:25
                jz      __fmodf1                # Re-direct if positive
      1b:	08 00                	or     BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:27
                sahf                            # Store AH to flags
                jnb     __fmodf2                # Re-direct if greater or equal
      1d:	00 03                	add    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:28
                fld1                            # Load the constant 1
      1f:	24 00                	and    al,0x0
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:29
                fadd                            # Increment integer part
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:30
                jmp     __fmodf2                # End of case
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:32
__fmodf1:       sahf                            # Store AH to flags
                jna     __fmodf2                # Re-direct if less or equal
      26:	0e                   	push   cs
      27:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:33
                fld1                            # Load constant 1
      29:	04 0f                	add    al,0xf
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:34
                fsub                            # Decrement integer part
      2b:	00 0b                	add    BYTE PTR [ebx],cl
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:35
__fmodf2:       fstd     [edi]             # Store integer part
      2d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:37
                fsub                            # Subtract to get fraction
                pop     edi                     # Restore register edi
      30:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:38
                mov     esp,ebp                 # Restore stack pointer
      32:	05 2e 01 3f 19       	add    eax,0x193f012e
      37:	03 0e                	add    ecx,DWORD PTR [esi]
      39:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      3b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      3d:	27                   	daa    
      3e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      41:	11 01                	adc    DWORD PTR [ecx],eax
      43:	12 06                	adc    al,BYTE PTR [esi]
      45:	40                   	inc    eax
      46:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      4c:	00 00                	add    BYTE PTR [eax],al
      4e:	06                   	push   es
      4f:	05 00 03 08 3a       	add    eax,0x3a080300
      54:	0b 3b                	or     edi,DWORD PTR [ebx]
      56:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      59:	02 18                	add    bl,BYTE PTR [eax]
      5b:	00 00                	add    BYTE PTR [eax],al
      5d:	07                   	pop    es
      5e:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
      62:	00 00                	add    BYTE PTR [eax],al
      64:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
      67:	03 0e                	add    ecx,DWORD PTR [esi]
      69:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      6b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      6d:	49                   	dec    ecx
      6e:	13 3f                	adc    edi,DWORD PTR [edi]
      70:	19 02                	sbb    DWORD PTR [edx],eax
      72:	18 00                	sbb    BYTE PTR [eax],al
      74:	00 00                	add    BYTE PTR [eax],al
      76:	01 11                	add    DWORD PTR [ecx],edx
      78:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      7e:	0e                   	push   cs
      7f:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      81:	11 01                	adc    DWORD PTR [ecx],eax
      83:	12 06                	adc    al,BYTE PTR [esi]
      85:	10 17                	adc    BYTE PTR [edi],dl
      87:	00 00                	add    BYTE PTR [eax],al
      89:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      8c:	0b 0b                	or     ecx,DWORD PTR [ebx]
      8e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      91:	08 00                	or     BYTE PTR [eax],al
      93:	00 03                	add    BYTE PTR [ebx],al
      95:	24 00                	and    al,0x0
      97:	0b 0b                	or     ecx,DWORD PTR [ebx]
      99:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      9c:	0e                   	push   cs
      9d:	00 00                	add    BYTE PTR [eax],al
      9f:	04 0f                	add    al,0xf
      a1:	00 0b                	add    BYTE PTR [ebx],cl
      a3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      a6:	00 00                	add    BYTE PTR [eax],al
      a8:	05 2e 01 3f 19       	add    eax,0x193f012e
      ad:	03 0e                	add    ecx,DWORD PTR [esi]
      af:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      b1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      b3:	27                   	daa    
      b4:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      b7:	11 01                	adc    DWORD PTR [ecx],eax
      b9:	12 06                	adc    al,BYTE PTR [esi]
      bb:	40                   	inc    eax
      bc:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      c2:	00 00                	add    BYTE PTR [eax],al
      c4:	06                   	push   es
      c5:	05 00 03 0e 3a       	add    eax,0x3a0e0300
      ca:	0b 3b                	or     edi,DWORD PTR [ebx]
      cc:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      cf:	02 18                	add    bl,BYTE PTR [eax]
      d1:	00 00                	add    BYTE PTR [eax],al
      d3:	07                   	pop    es
      d4:	34 00                	xor    al,0x0
      d6:	03 08                	add    ecx,DWORD PTR [eax]
      d8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      da:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      dc:	49                   	dec    ecx
      dd:	13 02                	adc    eax,DWORD PTR [edx]
      df:	18 00                	sbb    BYTE PTR [eax],al
      e1:	00 08                	add    BYTE PTR [eax],cl
      e3:	34 00                	xor    al,0x0
      e5:	03 0e                	add    ecx,DWORD PTR [esi]
      e7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      e9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      eb:	49                   	dec    ecx
      ec:	13 3f                	adc    edi,DWORD PTR [edi]
      ee:	19 02                	sbb    DWORD PTR [edx],eax
      f0:	18 00                	sbb    BYTE PTR [eax],al
      f2:	00 00                	add    BYTE PTR [eax],al
      f4:	01 11                	add    DWORD PTR [ecx],edx
      f6:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      fc:	0e                   	push   cs
      fd:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      ff:	11 01                	adc    DWORD PTR [ecx],eax
     101:	12 06                	adc    al,BYTE PTR [esi]
     103:	10 17                	adc    BYTE PTR [edi],dl
     105:	00 00                	add    BYTE PTR [eax],al
     107:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     10a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     10c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     10f:	08 00                	or     BYTE PTR [eax],al
     111:	00 03                	add    BYTE PTR [ebx],al
     113:	24 00                	and    al,0x0
     115:	0b 0b                	or     ecx,DWORD PTR [ebx]
     117:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     11a:	0e                   	push   cs
     11b:	00 00                	add    BYTE PTR [eax],al
     11d:	04 0f                	add    al,0xf
     11f:	00 0b                	add    BYTE PTR [ebx],cl
     121:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     124:	00 00                	add    BYTE PTR [eax],al
     126:	05 2e 01 3f 19       	add    eax,0x193f012e
     12b:	03 0e                	add    ecx,DWORD PTR [esi]
     12d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     12f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     131:	27                   	daa    
     132:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     135:	11 01                	adc    DWORD PTR [ecx],eax
     137:	12 06                	adc    al,BYTE PTR [esi]
     139:	40                   	inc    eax
     13a:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     140:	00 00                	add    BYTE PTR [eax],al
     142:	06                   	push   es
     143:	05 00 03 08 3a       	add    eax,0x3a080300
     148:	0b 3b                	or     edi,DWORD PTR [ebx]
     14a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     14d:	02 18                	add    bl,BYTE PTR [eax]
     14f:	00 00                	add    BYTE PTR [eax],al
     151:	07                   	pop    es
     152:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     157:	0b 3b                	or     edi,DWORD PTR [ebx]
     159:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     15c:	02 18                	add    bl,BYTE PTR [eax]
     15e:	00 00                	add    BYTE PTR [eax],al
     160:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     163:	03 0e                	add    ecx,DWORD PTR [esi]
     165:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     167:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     169:	49                   	dec    ecx
     16a:	13 02                	adc    eax,DWORD PTR [edx]
     16c:	18 00                	sbb    BYTE PTR [eax],al
     16e:	00 09                	add    BYTE PTR [ecx],cl
     170:	34 00                	xor    al,0x0
     172:	03 08                	add    ecx,DWORD PTR [eax]
     174:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     176:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     178:	49                   	dec    ecx
     179:	13 02                	adc    eax,DWORD PTR [edx]
     17b:	18 00                	sbb    BYTE PTR [eax],al
     17d:	00 0a                	add    BYTE PTR [edx],cl
     17f:	34 00                	xor    al,0x0
     181:	03 0e                	add    ecx,DWORD PTR [esi]
     183:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     185:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     187:	49                   	dec    ecx
     188:	13 3f                	adc    edi,DWORD PTR [edi]
     18a:	19 02                	sbb    DWORD PTR [edx],eax
     18c:	18 00                	sbb    BYTE PTR [eax],al
     18e:	00 00                	add    BYTE PTR [eax],al
     190:	01 11                	add    DWORD PTR [ecx],edx
     192:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     198:	0e                   	push   cs
     199:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     19b:	11 01                	adc    DWORD PTR [ecx],eax
     19d:	12 06                	adc    al,BYTE PTR [esi]
     19f:	10 17                	adc    BYTE PTR [edi],dl
     1a1:	00 00                	add    BYTE PTR [eax],al
     1a3:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     1a6:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1a8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1ab:	0e                   	push   cs
     1ac:	00 00                	add    BYTE PTR [eax],al
     1ae:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     1b1:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1b3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1b6:	08 00                	or     BYTE PTR [eax],al
     1b8:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     1bb:	00 0b                	add    BYTE PTR [ebx],cl
     1bd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     1c0:	00 00                	add    BYTE PTR [eax],al
     1c2:	05 2e 01 3f 19       	add    eax,0x193f012e
     1c7:	03 0e                	add    ecx,DWORD PTR [esi]
     1c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1cd:	27                   	daa    
     1ce:	19 11                	sbb    DWORD PTR [ecx],edx
     1d0:	01 12                	add    DWORD PTR [edx],edx
     1d2:	06                   	push   es
     1d3:	40                   	inc    eax
     1d4:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     1da:	00 00                	add    BYTE PTR [eax],al
     1dc:	06                   	push   es
     1dd:	05 00 03 08 3a       	add    eax,0x3a080300
     1e2:	0b 3b                	or     edi,DWORD PTR [ebx]
     1e4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     1e7:	02 18                	add    bl,BYTE PTR [eax]
     1e9:	00 00                	add    BYTE PTR [eax],al
     1eb:	07                   	pop    es
     1ec:	34 00                	xor    al,0x0
     1ee:	03 08                	add    ecx,DWORD PTR [eax]
     1f0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1f2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1f4:	49                   	dec    ecx
     1f5:	13 02                	adc    eax,DWORD PTR [edx]
     1f7:	18 00                	sbb    BYTE PTR [eax],al
     1f9:	00 08                	add    BYTE PTR [eax],cl
     1fb:	34 00                	xor    al,0x0
     1fd:	03 0e                	add    ecx,DWORD PTR [esi]
     1ff:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     201:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     203:	49                   	dec    ecx
     204:	13 02                	adc    eax,DWORD PTR [edx]
     206:	18 00                	sbb    BYTE PTR [eax],al
     208:	00 09                	add    BYTE PTR [ecx],cl
     20a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     20d:	19 03                	sbb    DWORD PTR [ebx],eax
     20f:	0e                   	push   cs
     210:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     212:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     214:	27                   	daa    
     215:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     218:	11 01                	adc    DWORD PTR [ecx],eax
     21a:	12 06                	adc    al,BYTE PTR [esi]
     21c:	40                   	inc    eax
     21d:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     223:	00 00                	add    BYTE PTR [eax],al
     225:	0a 2e                	or     ch,BYTE PTR [esi]
     227:	01 3f                	add    DWORD PTR [edi],edi
     229:	19 03                	sbb    DWORD PTR [ebx],eax
     22b:	0e                   	push   cs
     22c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     22e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     230:	27                   	daa    
     231:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     234:	11 01                	adc    DWORD PTR [ecx],eax
     236:	12 06                	adc    al,BYTE PTR [esi]
     238:	40                   	inc    eax
     239:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     23f:	00 00                	add    BYTE PTR [eax],al
     241:	0b 0b                	or     ecx,DWORD PTR [ebx]
     243:	01 11                	add    DWORD PTR [ecx],edx
     245:	01 12                	add    DWORD PTR [edx],edx
     247:	06                   	push   es
     248:	00 00                	add    BYTE PTR [eax],al
     24a:	0c 34                	or     al,0x34
     24c:	00 03                	add    BYTE PTR [ebx],al
     24e:	0e                   	push   cs
     24f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     251:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     253:	49                   	dec    ecx
     254:	13 3f                	adc    edi,DWORD PTR [edi]
     256:	19 02                	sbb    DWORD PTR [edx],eax
     258:	18 00                	sbb    BYTE PTR [eax],al
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	01 11                	add    DWORD PTR [ecx],edx
     25e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     264:	0e                   	push   cs
     265:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     267:	11 01                	adc    DWORD PTR [ecx],eax
     269:	12 06                	adc    al,BYTE PTR [esi]
     26b:	10 17                	adc    BYTE PTR [edi],dl
     26d:	00 00                	add    BYTE PTR [eax],al
     26f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     272:	0b 0b                	or     ecx,DWORD PTR [ebx]
     274:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     277:	0e                   	push   cs
     278:	00 00                	add    BYTE PTR [eax],al
     27a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     27d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     27f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     282:	08 00                	or     BYTE PTR [eax],al
     284:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     287:	00 03                	add    BYTE PTR [ebx],al
     289:	0e                   	push   cs
     28a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     28c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     28e:	49                   	dec    ecx
     28f:	13 00                	adc    eax,DWORD PTR [eax]
     291:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     297:	49                   	dec    ecx
     298:	13 00                	adc    eax,DWORD PTR [eax]
     29a:	00 06                	add    BYTE PTR [esi],al
     29c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     29f:	19 03                	sbb    DWORD PTR [ebx],eax
     2a1:	0e                   	push   cs
     2a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2a6:	27                   	daa    
     2a7:	19 11                	sbb    DWORD PTR [ecx],edx
     2a9:	01 12                	add    DWORD PTR [edx],edx
     2ab:	06                   	push   es
     2ac:	40                   	inc    eax
     2ad:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     2b3:	00 00                	add    BYTE PTR [eax],al
     2b5:	07                   	pop    es
     2b6:	05 00 03 08 3a       	add    eax,0x3a080300
     2bb:	0b 3b                	or     edi,DWORD PTR [ebx]
     2bd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     2c0:	02 18                	add    bl,BYTE PTR [eax]
     2c2:	00 00                	add    BYTE PTR [eax],al
     2c4:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     2c7:	03 08                	add    ecx,DWORD PTR [eax]
     2c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2cd:	49                   	dec    ecx
     2ce:	13 02                	adc    eax,DWORD PTR [edx]
     2d0:	18 00                	sbb    BYTE PTR [eax],al
     2d2:	00 09                	add    BYTE PTR [ecx],cl
     2d4:	34 00                	xor    al,0x0
     2d6:	03 0e                	add    ecx,DWORD PTR [esi]
     2d8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2da:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2dc:	49                   	dec    ecx
     2dd:	13 02                	adc    eax,DWORD PTR [edx]
     2df:	18 00                	sbb    BYTE PTR [eax],al
     2e1:	00 0a                	add    BYTE PTR [edx],cl
     2e3:	01 01                	add    DWORD PTR [ecx],eax
     2e5:	49                   	dec    ecx
     2e6:	13 01                	adc    eax,DWORD PTR [ecx]
     2e8:	13 00                	adc    eax,DWORD PTR [eax]
     2ea:	00 0b                	add    BYTE PTR [ebx],cl
     2ec:	21 00                	and    DWORD PTR [eax],eax
     2ee:	49                   	dec    ecx
     2ef:	13 2f                	adc    ebp,DWORD PTR [edi]
     2f1:	0b 00                	or     eax,DWORD PTR [eax]
     2f3:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     2f6:	01 3f                	add    DWORD PTR [edi],edi
     2f8:	19 03                	sbb    DWORD PTR [ebx],eax
     2fa:	0e                   	push   cs
     2fb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2fd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2ff:	11 01                	adc    DWORD PTR [ecx],eax
     301:	12 06                	adc    al,BYTE PTR [esi]
     303:	40                   	inc    eax
     304:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     30a:	00 00                	add    BYTE PTR [eax],al
     30c:	0d 34 00 03 0e       	or     eax,0xe030034
     311:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     313:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     315:	49                   	dec    ecx
     316:	13 3f                	adc    edi,DWORD PTR [edi]
     318:	19 02                	sbb    DWORD PTR [edx],eax
     31a:	18 00                	sbb    BYTE PTR [eax],al
     31c:	00 0e                	add    BYTE PTR [esi],cl
     31e:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     322:	00 00                	add    BYTE PTR [eax],al
     324:	00 01                	add    BYTE PTR [ecx],al
     326:	11 01                	adc    DWORD PTR [ecx],eax
     328:	25 0e 13 0b 03       	and    eax,0x30b130e
     32d:	0e                   	push   cs
     32e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     330:	11 01                	adc    DWORD PTR [ecx],eax
     332:	12 06                	adc    al,BYTE PTR [esi]
     334:	10 17                	adc    BYTE PTR [edi],dl
     336:	00 00                	add    BYTE PTR [eax],al
     338:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     33b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     33d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     340:	0e                   	push   cs
     341:	00 00                	add    BYTE PTR [eax],al
     343:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     346:	0b 0b                	or     ecx,DWORD PTR [ebx]
     348:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     34b:	08 00                	or     BYTE PTR [eax],al
     34d:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     350:	00 0b                	add    BYTE PTR [ebx],cl
     352:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     355:	00 00                	add    BYTE PTR [eax],al
     357:	05 16 00 03 0e       	add    eax,0xe030016
     35c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     35e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     360:	49                   	dec    ecx
     361:	13 00                	adc    eax,DWORD PTR [eax]
     363:	00 06                	add    BYTE PTR [esi],al
     365:	04 01                	add    al,0x1
     367:	03 0e                	add    ecx,DWORD PTR [esi]
     369:	0b 0b                	or     ecx,DWORD PTR [ebx]
     36b:	49                   	dec    ecx
     36c:	13 3a                	adc    edi,DWORD PTR [edx]
     36e:	0b 3b                	or     edi,DWORD PTR [ebx]
     370:	0b 01                	or     eax,DWORD PTR [ecx]
     372:	13 00                	adc    eax,DWORD PTR [eax]
     374:	00 07                	add    BYTE PTR [edi],al
     376:	28 00                	sub    BYTE PTR [eax],al
     378:	03 0e                	add    ecx,DWORD PTR [esi]
     37a:	1c 0b                	sbb    al,0xb
     37c:	00 00                	add    BYTE PTR [eax],al
     37e:	08 28                	or     BYTE PTR [eax],ch
     380:	00 03                	add    BYTE PTR [ebx],al
     382:	0e                   	push   cs
     383:	1c 05                	sbb    al,0x5
     385:	00 00                	add    BYTE PTR [eax],al
     387:	09 2e                	or     DWORD PTR [esi],ebp
     389:	01 3f                	add    DWORD PTR [edi],edi
     38b:	19 03                	sbb    DWORD PTR [ebx],eax
     38d:	0e                   	push   cs
     38e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     390:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     392:	27                   	daa    
     393:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     396:	11 01                	adc    DWORD PTR [ecx],eax
     398:	12 06                	adc    al,BYTE PTR [esi]
     39a:	40                   	inc    eax
     39b:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3a1:	00 00                	add    BYTE PTR [eax],al
     3a3:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     3a9:	0b 3b                	or     edi,DWORD PTR [ebx]
     3ab:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     3ae:	02 18                	add    bl,BYTE PTR [eax]
     3b0:	00 00                	add    BYTE PTR [eax],al
     3b2:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     3b5:	03 0e                	add    ecx,DWORD PTR [esi]
     3b7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3b9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3bb:	49                   	dec    ecx
     3bc:	13 02                	adc    eax,DWORD PTR [edx]
     3be:	18 00                	sbb    BYTE PTR [eax],al
     3c0:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     3c3:	01 3f                	add    DWORD PTR [edi],edi
     3c5:	19 03                	sbb    DWORD PTR [ebx],eax
     3c7:	0e                   	push   cs
     3c8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3ca:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3cc:	49                   	dec    ecx
     3cd:	13 3c 19             	adc    edi,DWORD PTR [ecx+ebx*1]
     3d0:	01 13                	add    DWORD PTR [ebx],edx
     3d2:	00 00                	add    BYTE PTR [eax],al
     3d4:	0d 18 00 00 00       	or     eax,0x18
     3d9:	0e                   	push   cs
     3da:	0b 01                	or     eax,DWORD PTR [ecx]
     3dc:	55                   	push   ebp
     3dd:	17                   	pop    ss
     3de:	00 00                	add    BYTE PTR [eax],al
     3e0:	0f 34                	sysenter 
     3e2:	00 03                	add    BYTE PTR [ebx],al
     3e4:	08 3a                	or     BYTE PTR [edx],bh
     3e6:	0b 3b                	or     edi,DWORD PTR [ebx]
     3e8:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     3eb:	02 18                	add    bl,BYTE PTR [eax]
     3ed:	00 00                	add    BYTE PTR [eax],al
     3ef:	10 0b                	adc    BYTE PTR [ebx],cl
     3f1:	01 11                	add    DWORD PTR [ecx],edx
     3f3:	01 12                	add    DWORD PTR [edx],edx
     3f5:	06                   	push   es
     3f6:	00 00                	add    BYTE PTR [eax],al
     3f8:	11 2e                	adc    DWORD PTR [esi],ebp
     3fa:	01 3f                	add    DWORD PTR [edi],edi
     3fc:	19 03                	sbb    DWORD PTR [ebx],eax
     3fe:	0e                   	push   cs
     3ff:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     401:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     403:	49                   	dec    ecx
     404:	13 3c 19             	adc    edi,DWORD PTR [ecx+ebx*1]
     407:	00 00                	add    BYTE PTR [eax],al
     409:	12 01                	adc    al,BYTE PTR [ecx]
     40b:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
     40e:	01 13                	add    DWORD PTR [ebx],edx
     410:	00 00                	add    BYTE PTR [eax],al
     412:	13 21                	adc    esp,DWORD PTR [ecx]
     414:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     417:	2f                   	das    
     418:	0b 00                	or     eax,DWORD PTR [eax]
     41a:	00 14 2e             	add    BYTE PTR [esi+ebp*1],dl
     41d:	01 3f                	add    DWORD PTR [edi],edi
     41f:	19 03                	sbb    DWORD PTR [ebx],eax
     421:	0e                   	push   cs
     422:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     424:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     426:	27                   	daa    
     427:	19 11                	sbb    DWORD PTR [ecx],edx
     429:	01 12                	add    DWORD PTR [edx],edx
     42b:	06                   	push   es
     42c:	40                   	inc    eax
     42d:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     433:	00 00                	add    BYTE PTR [eax],al
     435:	15 0b 01 11 01       	adc    eax,0x111010b
     43a:	12 06                	adc    al,BYTE PTR [esi]
     43c:	01 13                	add    DWORD PTR [ebx],edx
     43e:	00 00                	add    BYTE PTR [eax],al
     440:	16                   	push   ss
     441:	05 00 03 08 3a       	add    eax,0x3a080300
     446:	0b 3b                	or     edi,DWORD PTR [ebx]
     448:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     44b:	02 18                	add    bl,BYTE PTR [eax]
     44d:	00 00                	add    BYTE PTR [eax],al
     44f:	17                   	pop    ss
     450:	34 00                	xor    al,0x0
     452:	03 0e                	add    ecx,DWORD PTR [esi]
     454:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     456:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     458:	49                   	dec    ecx
     459:	13 3f                	adc    edi,DWORD PTR [edi]
     45b:	19 02                	sbb    DWORD PTR [edx],eax
     45d:	18 00                	sbb    BYTE PTR [eax],al
     45f:	00 00                	add    BYTE PTR [eax],al
     461:	01 11                	add    DWORD PTR [ecx],edx
     463:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     469:	0e                   	push   cs
     46a:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     46c:	11 01                	adc    DWORD PTR [ecx],eax
     46e:	12 06                	adc    al,BYTE PTR [esi]
     470:	10 17                	adc    BYTE PTR [edi],dl
     472:	00 00                	add    BYTE PTR [eax],al
     474:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     477:	0b 0b                	or     ecx,DWORD PTR [ebx]
     479:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     47c:	0e                   	push   cs
     47d:	00 00                	add    BYTE PTR [eax],al
     47f:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     482:	0b 0b                	or     ecx,DWORD PTR [ebx]
     484:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     487:	08 00                	or     BYTE PTR [eax],al
     489:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     48c:	00 0b                	add    BYTE PTR [ebx],cl
     48e:	0b 00                	or     eax,DWORD PTR [eax]
     490:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     496:	49                   	dec    ecx
     497:	13 00                	adc    eax,DWORD PTR [eax]
     499:	00 06                	add    BYTE PTR [esi],al
     49b:	16                   	push   ss
     49c:	00 03                	add    BYTE PTR [ebx],al
     49e:	0e                   	push   cs
     49f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4a1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4a3:	49                   	dec    ecx
     4a4:	13 00                	adc    eax,DWORD PTR [eax]
     4a6:	00 07                	add    BYTE PTR [edi],al
     4a8:	04 01                	add    al,0x1
     4aa:	03 0e                	add    ecx,DWORD PTR [esi]
     4ac:	0b 0b                	or     ecx,DWORD PTR [ebx]
     4ae:	49                   	dec    ecx
     4af:	13 3a                	adc    edi,DWORD PTR [edx]
     4b1:	0b 3b                	or     edi,DWORD PTR [ebx]
     4b3:	0b 01                	or     eax,DWORD PTR [ecx]
     4b5:	13 00                	adc    eax,DWORD PTR [eax]
     4b7:	00 08                	add    BYTE PTR [eax],cl
     4b9:	28 00                	sub    BYTE PTR [eax],al
     4bb:	03 0e                	add    ecx,DWORD PTR [esi]
     4bd:	1c 0b                	sbb    al,0xb
     4bf:	00 00                	add    BYTE PTR [eax],al
     4c1:	09 28                	or     DWORD PTR [eax],ebp
     4c3:	00 03                	add    BYTE PTR [ebx],al
     4c5:	0e                   	push   cs
     4c6:	1c 05                	sbb    al,0x5
     4c8:	00 00                	add    BYTE PTR [eax],al
     4ca:	0a 13                	or     dl,BYTE PTR [ebx]
     4cc:	01 03                	add    DWORD PTR [ebx],eax
     4ce:	0e                   	push   cs
     4cf:	0b 05 3a 0b 3b 0b    	or     eax,DWORD PTR ds:0xb3b0b3a
     4d5:	01 13                	add    DWORD PTR [ebx],edx
     4d7:	00 00                	add    BYTE PTR [eax],al
     4d9:	0b 0d 00 03 0e 3a    	or     ecx,DWORD PTR ds:0x3a0e0300
     4df:	0b 3b                	or     edi,DWORD PTR [ebx]
     4e1:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     4e4:	38 0b                	cmp    BYTE PTR [ebx],cl
     4e6:	00 00                	add    BYTE PTR [eax],al
     4e8:	0c 0d                	or     al,0xd
     4ea:	00 03                	add    BYTE PTR [ebx],al
     4ec:	0e                   	push   cs
     4ed:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4ef:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4f1:	49                   	dec    ecx
     4f2:	13 38                	adc    edi,DWORD PTR [eax]
     4f4:	05 00 00 0d 01       	add    eax,0x10d0000
     4f9:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
     4fc:	01 13                	add    DWORD PTR [ebx],edx
     4fe:	00 00                	add    BYTE PTR [eax],al
     500:	0e                   	push   cs
     501:	21 00                	and    DWORD PTR [eax],eax
     503:	49                   	dec    ecx
     504:	13 2f                	adc    ebp,DWORD PTR [edi]
     506:	05 00 00 0f 13       	add    eax,0x130f0000
     50b:	01 03                	add    DWORD PTR [ebx],eax
     50d:	0e                   	push   cs
     50e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     510:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     512:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     514:	01 13                	add    DWORD PTR [ebx],edx
     516:	00 00                	add    BYTE PTR [eax],al
     518:	10 26                	adc    BYTE PTR [esi],ah
     51a:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     51d:	00 00                	add    BYTE PTR [eax],al
     51f:	11 2e                	adc    DWORD PTR [esi],ebp
     521:	01 3f                	add    DWORD PTR [edi],edi
     523:	19 03                	sbb    DWORD PTR [ebx],eax
     525:	0e                   	push   cs
     526:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     528:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     52a:	27                   	daa    
     52b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     52e:	11 01                	adc    DWORD PTR [ecx],eax
     530:	12 06                	adc    al,BYTE PTR [esi]
     532:	40                   	inc    eax
     533:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     539:	00 00                	add    BYTE PTR [eax],al
     53b:	12 05 00 03 0e 3a    	adc    al,BYTE PTR ds:0x3a0e0300
     541:	0b 3b                	or     edi,DWORD PTR [ebx]
     543:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     546:	02 18                	add    bl,BYTE PTR [eax]
     548:	00 00                	add    BYTE PTR [eax],al
     54a:	13 2e                	adc    ebp,DWORD PTR [esi]
     54c:	00 3f                	add    BYTE PTR [edi],bh
     54e:	19 03                	sbb    DWORD PTR [ebx],eax
     550:	0e                   	push   cs
     551:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     553:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     555:	11 01                	adc    DWORD PTR [ecx],eax
     557:	12 06                	adc    al,BYTE PTR [esi]
     559:	40                   	inc    eax
     55a:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     560:	14 34                	adc    al,0x34
     562:	00 03                	add    BYTE PTR [ebx],al
     564:	0e                   	push   cs
     565:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     567:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     569:	49                   	dec    ecx
     56a:	13 02                	adc    eax,DWORD PTR [edx]
     56c:	18 00                	sbb    BYTE PTR [eax],al
     56e:	00 15 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,dl
     574:	03 0e                	add    ecx,DWORD PTR [esi]
     576:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     578:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     57a:	27                   	daa    
     57b:	19 11                	sbb    DWORD PTR [ecx],edx
     57d:	01 12                	add    DWORD PTR [edx],edx
     57f:	06                   	push   es
     580:	40                   	inc    eax
     581:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     587:	00 00                	add    BYTE PTR [eax],al
     589:	16                   	push   ss
     58a:	0b 01                	or     eax,DWORD PTR [ecx]
     58c:	11 01                	adc    DWORD PTR [ecx],eax
     58e:	12 06                	adc    al,BYTE PTR [esi]
     590:	01 13                	add    DWORD PTR [ebx],edx
     592:	00 00                	add    BYTE PTR [eax],al
     594:	17                   	pop    ss
     595:	34 00                	xor    al,0x0
     597:	03 08                	add    ecx,DWORD PTR [eax]
     599:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     59b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     59d:	49                   	dec    ecx
     59e:	13 02                	adc    eax,DWORD PTR [edx]
     5a0:	18 00                	sbb    BYTE PTR [eax],al
     5a2:	00 18                	add    BYTE PTR [eax],bl
     5a4:	0b 01                	or     eax,DWORD PTR [ecx]
     5a6:	11 01                	adc    DWORD PTR [ecx],eax
     5a8:	12 06                	adc    al,BYTE PTR [esi]
     5aa:	00 00                	add    BYTE PTR [eax],al
     5ac:	19 21                	sbb    DWORD PTR [ecx],esp
     5ae:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     5b1:	2f                   	das    
     5b2:	0b 00                	or     eax,DWORD PTR [eax]
     5b4:	00 1a                	add    BYTE PTR [edx],bl
     5b6:	05 00 03 08 3a       	add    eax,0x3a080300
     5bb:	0b 3b                	or     edi,DWORD PTR [ebx]
     5bd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     5c0:	02 18                	add    bl,BYTE PTR [eax]
     5c2:	00 00                	add    BYTE PTR [eax],al
     5c4:	1b 0a                	sbb    ecx,DWORD PTR [edx]
     5c6:	00 03                	add    BYTE PTR [ebx],al
     5c8:	0e                   	push   cs
     5c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5cd:	11 01                	adc    DWORD PTR [ecx],eax
     5cf:	00 00                	add    BYTE PTR [eax],al
     5d1:	1c 34                	sbb    al,0x34
     5d3:	00 03                	add    BYTE PTR [ebx],al
     5d5:	0e                   	push   cs
     5d6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5d8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5da:	49                   	dec    ecx
     5db:	13 3f                	adc    edi,DWORD PTR [edi]
     5dd:	19 02                	sbb    DWORD PTR [edx],eax
     5df:	18 00                	sbb    BYTE PTR [eax],al
     5e1:	00 00                	add    BYTE PTR [eax],al
     5e3:	01 11                	add    DWORD PTR [ecx],edx
     5e5:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     5eb:	0e                   	push   cs
     5ec:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     5ee:	11 01                	adc    DWORD PTR [ecx],eax
     5f0:	12 06                	adc    al,BYTE PTR [esi]
     5f2:	10 17                	adc    BYTE PTR [edi],dl
     5f4:	00 00                	add    BYTE PTR [eax],al
     5f6:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     5f9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     5fb:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     5fe:	0e                   	push   cs
     5ff:	00 00                	add    BYTE PTR [eax],al
     601:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     604:	0b 0b                	or     ecx,DWORD PTR [ebx]
     606:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     609:	08 00                	or     BYTE PTR [eax],al
     60b:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     60e:	00 0b                	add    BYTE PTR [ebx],cl
     610:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     613:	00 00                	add    BYTE PTR [eax],al
     615:	05 04 01 03 0e       	add    eax,0xe030104
     61a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     61c:	49                   	dec    ecx
     61d:	13 3a                	adc    edi,DWORD PTR [edx]
     61f:	0b 3b                	or     edi,DWORD PTR [ebx]
     621:	0b 01                	or     eax,DWORD PTR [ecx]
     623:	13 00                	adc    eax,DWORD PTR [eax]
     625:	00 06                	add    BYTE PTR [esi],al
     627:	28 00                	sub    BYTE PTR [eax],al
     629:	03 0e                	add    ecx,DWORD PTR [esi]
     62b:	1c 0b                	sbb    al,0xb
     62d:	00 00                	add    BYTE PTR [eax],al
     62f:	07                   	pop    es
     630:	28 00                	sub    BYTE PTR [eax],al
     632:	03 0e                	add    ecx,DWORD PTR [esi]
     634:	1c 05                	sbb    al,0x5
     636:	00 00                	add    BYTE PTR [eax],al
     638:	08 2e                	or     BYTE PTR [esi],ch
     63a:	01 3f                	add    DWORD PTR [edi],edi
     63c:	19 03                	sbb    DWORD PTR [ebx],eax
     63e:	0e                   	push   cs
     63f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     641:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     643:	27                   	daa    
     644:	19 11                	sbb    DWORD PTR [ecx],edx
     646:	01 12                	add    DWORD PTR [edx],edx
     648:	06                   	push   es
     649:	40                   	inc    eax
     64a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     650:	00 00                	add    BYTE PTR [eax],al
     652:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     658:	0b 3b                	or     edi,DWORD PTR [ebx]
     65a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     65d:	02 18                	add    bl,BYTE PTR [eax]
     65f:	00 00                	add    BYTE PTR [eax],al
     661:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     667:	0b 3b                	or     edi,DWORD PTR [ebx]
     669:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     66c:	02 18                	add    bl,BYTE PTR [eax]
     66e:	00 00                	add    BYTE PTR [eax],al
     670:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     673:	03 0e                	add    ecx,DWORD PTR [esi]
     675:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     677:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     679:	49                   	dec    ecx
     67a:	13 02                	adc    eax,DWORD PTR [edx]
     67c:	18 00                	sbb    BYTE PTR [eax],al
     67e:	00 0c 01             	add    BYTE PTR [ecx+eax*1],cl
     681:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
     684:	01 13                	add    DWORD PTR [ebx],edx
     686:	00 00                	add    BYTE PTR [eax],al
     688:	0d 21 00 49 13       	or     eax,0x13490021
     68d:	2f                   	das    
     68e:	0b 00                	or     eax,DWORD PTR [eax]
     690:	00 0e                	add    BYTE PTR [esi],cl
     692:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     695:	19 03                	sbb    DWORD PTR [ebx],eax
     697:	0e                   	push   cs
     698:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     69a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     69c:	49                   	dec    ecx
     69d:	13 11                	adc    edx,DWORD PTR [ecx]
     69f:	01 12                	add    DWORD PTR [edx],edx
     6a1:	06                   	push   es
     6a2:	40                   	inc    eax
     6a3:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     6a9:	00 00                	add    BYTE PTR [eax],al
     6ab:	0f 34                	sysenter 
     6ad:	00 03                	add    BYTE PTR [ebx],al
     6af:	08 3a                	or     BYTE PTR [edx],bh
     6b1:	0b 3b                	or     edi,DWORD PTR [ebx]
     6b3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     6b6:	02 18                	add    bl,BYTE PTR [eax]
     6b8:	00 00                	add    BYTE PTR [eax],al
     6ba:	10 2e                	adc    BYTE PTR [esi],ch
     6bc:	01 3f                	add    DWORD PTR [edi],edi
     6be:	19 03                	sbb    DWORD PTR [ebx],eax
     6c0:	0e                   	push   cs
     6c1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6c3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6c5:	27                   	daa    
     6c6:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     6c9:	11 01                	adc    DWORD PTR [ecx],eax
     6cb:	12 06                	adc    al,BYTE PTR [esi]
     6cd:	40                   	inc    eax
     6ce:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     6d4:	00 00                	add    BYTE PTR [eax],al
     6d6:	11 0a                	adc    DWORD PTR [edx],ecx
     6d8:	00 03                	add    BYTE PTR [ebx],al
     6da:	0e                   	push   cs
     6db:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6dd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6df:	11 01                	adc    DWORD PTR [ecx],eax
     6e1:	00 00                	add    BYTE PTR [eax],al
     6e3:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     6e6:	03 0e                	add    ecx,DWORD PTR [esi]
     6e8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6ea:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6ec:	49                   	dec    ecx
     6ed:	13 3f                	adc    edi,DWORD PTR [edi]
     6ef:	19 02                	sbb    DWORD PTR [edx],eax
     6f1:	18 00                	sbb    BYTE PTR [eax],al
     6f3:	00 00                	add    BYTE PTR [eax],al
     6f5:	01 11                	add    DWORD PTR [ecx],edx
     6f7:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     6fd:	0e                   	push   cs
     6fe:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     700:	11 01                	adc    DWORD PTR [ecx],eax
     702:	12 06                	adc    al,BYTE PTR [esi]
     704:	10 17                	adc    BYTE PTR [edi],dl
     706:	00 00                	add    BYTE PTR [eax],al
     708:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     70b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     70d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     710:	0e                   	push   cs
     711:	00 00                	add    BYTE PTR [eax],al
     713:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     716:	0b 0b                	or     ecx,DWORD PTR [ebx]
     718:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     71b:	08 00                	or     BYTE PTR [eax],al
     71d:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     720:	00 0b                	add    BYTE PTR [ebx],cl
     722:	0b 00                	or     eax,DWORD PTR [eax]
     724:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     72a:	49                   	dec    ecx
     72b:	13 00                	adc    eax,DWORD PTR [eax]
     72d:	00 06                	add    BYTE PTR [esi],al
     72f:	16                   	push   ss
     730:	00 03                	add    BYTE PTR [ebx],al
     732:	0e                   	push   cs
     733:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     735:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     737:	49                   	dec    ecx
     738:	13 00                	adc    eax,DWORD PTR [eax]
     73a:	00 07                	add    BYTE PTR [edi],al
     73c:	0f 00 0b             	str    WORD PTR [ebx]
     73f:	0b 03                	or     eax,DWORD PTR [ebx]
     741:	0e                   	push   cs
     742:	49                   	dec    ecx
     743:	13 00                	adc    eax,DWORD PTR [eax]
     745:	00 08                	add    BYTE PTR [eax],cl
     747:	04 01                	add    al,0x1
     749:	03 0e                	add    ecx,DWORD PTR [esi]
     74b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     74d:	49                   	dec    ecx
     74e:	13 3a                	adc    edi,DWORD PTR [edx]
     750:	0b 3b                	or     edi,DWORD PTR [ebx]
     752:	0b 01                	or     eax,DWORD PTR [ecx]
     754:	13 00                	adc    eax,DWORD PTR [eax]
     756:	00 09                	add    BYTE PTR [ecx],cl
     758:	28 00                	sub    BYTE PTR [eax],al
     75a:	03 0e                	add    ecx,DWORD PTR [esi]
     75c:	1c 0b                	sbb    al,0xb
     75e:	00 00                	add    BYTE PTR [eax],al
     760:	0a 28                	or     ch,BYTE PTR [eax]
     762:	00 03                	add    BYTE PTR [ebx],al
     764:	0e                   	push   cs
     765:	1c 05                	sbb    al,0x5
     767:	00 00                	add    BYTE PTR [eax],al
     769:	0b 26                	or     esp,DWORD PTR [esi]
     76b:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     76e:	00 00                	add    BYTE PTR [eax],al
     770:	0c 2e                	or     al,0x2e
     772:	01 3f                	add    DWORD PTR [edi],edi
     774:	19 03                	sbb    DWORD PTR [ebx],eax
     776:	0e                   	push   cs
     777:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     779:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     77b:	27                   	daa    
     77c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     77f:	11 01                	adc    DWORD PTR [ecx],eax
     781:	12 06                	adc    al,BYTE PTR [esi]
     783:	40                   	inc    eax
     784:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     78a:	00 00                	add    BYTE PTR [eax],al
     78c:	0d 05 00 03 0e       	or     eax,0xe030005
     791:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     793:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     795:	49                   	dec    ecx
     796:	13 02                	adc    eax,DWORD PTR [edx]
     798:	18 00                	sbb    BYTE PTR [eax],al
     79a:	00 0e                	add    BYTE PTR [esi],cl
     79c:	34 00                	xor    al,0x0
     79e:	03 0e                	add    ecx,DWORD PTR [esi]
     7a0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7a2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7a4:	49                   	dec    ecx
     7a5:	13 02                	adc    eax,DWORD PTR [edx]
     7a7:	18 00                	sbb    BYTE PTR [eax],al
     7a9:	00 0f                	add    BYTE PTR [edi],cl
     7ab:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     7ae:	19 03                	sbb    DWORD PTR [ebx],eax
     7b0:	0e                   	push   cs
     7b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7b5:	11 01                	adc    DWORD PTR [ecx],eax
     7b7:	12 06                	adc    al,BYTE PTR [esi]
     7b9:	40                   	inc    eax
     7ba:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     7c0:	10 2e                	adc    BYTE PTR [esi],ch
     7c2:	00 3f                	add    BYTE PTR [edi],bh
     7c4:	19 03                	sbb    DWORD PTR [ebx],eax
     7c6:	0e                   	push   cs
     7c7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7c9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7cb:	27                   	daa    
     7cc:	19 11                	sbb    DWORD PTR [ecx],edx
     7ce:	01 12                	add    DWORD PTR [edx],edx
     7d0:	06                   	push   es
     7d1:	40                   	inc    eax
     7d2:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     7d8:	11 2e                	adc    DWORD PTR [esi],ebp
     7da:	01 3f                	add    DWORD PTR [edi],edi
     7dc:	19 03                	sbb    DWORD PTR [ebx],eax
     7de:	0e                   	push   cs
     7df:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7e1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7e3:	27                   	daa    
     7e4:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     7e7:	11 01                	adc    DWORD PTR [ecx],eax
     7e9:	12 06                	adc    al,BYTE PTR [esi]
     7eb:	40                   	inc    eax
     7ec:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     7f2:	00 00                	add    BYTE PTR [eax],al
     7f4:	12 18                	adc    bl,BYTE PTR [eax]
     7f6:	00 00                	add    BYTE PTR [eax],al
     7f8:	00 13                	add    BYTE PTR [ebx],dl
     7fa:	34 00                	xor    al,0x0
     7fc:	03 08                	add    ecx,DWORD PTR [eax]
     7fe:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     800:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     802:	49                   	dec    ecx
     803:	13 02                	adc    eax,DWORD PTR [edx]
     805:	18 00                	sbb    BYTE PTR [eax],al
     807:	00 14 0b             	add    BYTE PTR [ebx+ecx*1],dl
     80a:	01 11                	add    DWORD PTR [ecx],edx
     80c:	01 12                	add    DWORD PTR [edx],edx
     80e:	06                   	push   es
     80f:	00 00                	add    BYTE PTR [eax],al
     811:	15 2e 01 3f 19       	adc    eax,0x193f012e
     816:	03 0e                	add    ecx,DWORD PTR [esi]
     818:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     81a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     81c:	27                   	daa    
     81d:	19 11                	sbb    DWORD PTR [ecx],edx
     81f:	01 12                	add    DWORD PTR [edx],edx
     821:	06                   	push   es
     822:	40                   	inc    eax
     823:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     829:	00 00                	add    BYTE PTR [eax],al
     82b:	16                   	push   ss
     82c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     82f:	19 03                	sbb    DWORD PTR [ebx],eax
     831:	0e                   	push   cs
     832:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     834:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     836:	49                   	dec    ecx
     837:	13 11                	adc    edx,DWORD PTR [ecx]
     839:	01 12                	add    DWORD PTR [edx],edx
     83b:	06                   	push   es
     83c:	40                   	inc    eax
     83d:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     843:	00 00                	add    BYTE PTR [eax],al
     845:	17                   	pop    ss
     846:	05 00 03 08 3a       	add    eax,0x3a080300
     84b:	0b 3b                	or     edi,DWORD PTR [ebx]
     84d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     850:	02 18                	add    bl,BYTE PTR [eax]
     852:	00 00                	add    BYTE PTR [eax],al
     854:	18 34 00             	sbb    BYTE PTR [eax+eax*1],dh
     857:	03 08                	add    ecx,DWORD PTR [eax]
     859:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     85b:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     861:	00 00                	add    BYTE PTR [eax],al
     863:	19 04 01             	sbb    DWORD PTR [ecx+eax*1],eax
     866:	03 0e                	add    ecx,DWORD PTR [esi]
     868:	0b 0b                	or     ecx,DWORD PTR [ebx]
     86a:	49                   	dec    ecx
     86b:	13 3a                	adc    edi,DWORD PTR [edx]
     86d:	0b 3b                	or     edi,DWORD PTR [ebx]
     86f:	05 01 13 00 00       	add    eax,0x1301
     874:	1a 34 00             	sbb    dh,BYTE PTR [eax+eax*1]
     877:	03 0e                	add    ecx,DWORD PTR [esi]
     879:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     87b:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     881:	00 00                	add    BYTE PTR [eax],al
     883:	1b 0b                	sbb    ecx,DWORD PTR [ebx]
     885:	01 11                	add    DWORD PTR [ecx],edx
     887:	01 12                	add    DWORD PTR [edx],edx
     889:	06                   	push   es
     88a:	01 13                	add    DWORD PTR [ebx],edx
     88c:	00 00                	add    BYTE PTR [eax],al
     88e:	1c 2e                	sbb    al,0x2e
     890:	01 3f                	add    DWORD PTR [edi],edi
     892:	19 03                	sbb    DWORD PTR [ebx],eax
     894:	0e                   	push   cs
     895:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     897:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     89d:	11 01                	adc    DWORD PTR [ecx],eax
     89f:	12 06                	adc    al,BYTE PTR [esi]
     8a1:	40                   	inc    eax
     8a2:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     8a8:	00 00                	add    BYTE PTR [eax],al
     8aa:	1d 05 00 03 0e       	sbb    eax,0xe030005
     8af:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8b1:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     8b7:	00 00                	add    BYTE PTR [eax],al
     8b9:	1e                   	push   ds
     8ba:	0b 01                	or     eax,DWORD PTR [ecx]
     8bc:	55                   	push   ebp
     8bd:	17                   	pop    ss
     8be:	00 00                	add    BYTE PTR [eax],al
     8c0:	1f                   	pop    ds
     8c1:	01 01                	add    DWORD PTR [ecx],eax
     8c3:	49                   	dec    ecx
     8c4:	13 01                	adc    eax,DWORD PTR [ecx]
     8c6:	13 00                	adc    eax,DWORD PTR [eax]
     8c8:	00 20                	add    BYTE PTR [eax],ah
     8ca:	21 00                	and    DWORD PTR [eax],eax
     8cc:	49                   	dec    ecx
     8cd:	13 2f                	adc    ebp,DWORD PTR [edi]
     8cf:	05 00 00 21 21       	add    eax,0x21210000
     8d4:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     8d7:	2f                   	das    
     8d8:	0b 00                	or     eax,DWORD PTR [eax]
     8da:	00 22                	add    BYTE PTR [edx],ah
     8dc:	05 00 03 08 3a       	add    eax,0x3a080300
     8e1:	0b 3b                	or     edi,DWORD PTR [ebx]
     8e3:	05 49 13 02 18       	add    eax,0x18021349
     8e8:	00 00                	add    BYTE PTR [eax],al
     8ea:	23 2e                	and    ebp,DWORD PTR [esi]
     8ec:	00 3f                	add    BYTE PTR [edi],bh
     8ee:	19 03                	sbb    DWORD PTR [ebx],eax
     8f0:	0e                   	push   cs
     8f1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8f3:	3b 05 11 01 12 06    	cmp    eax,DWORD PTR ds:0x6120111
     8f9:	40                   	inc    eax
     8fa:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     900:	24 34                	and    al,0x34
     902:	00 03                	add    BYTE PTR [ebx],al
     904:	0e                   	push   cs
     905:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     907:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     909:	49                   	dec    ecx
     90a:	13 3f                	adc    edi,DWORD PTR [edi]
     90c:	19 02                	sbb    DWORD PTR [edx],eax
     90e:	18 00                	sbb    BYTE PTR [eax],al
     910:	00 00                	add    BYTE PTR [eax],al
     912:	01 11                	add    DWORD PTR [ecx],edx
     914:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     91a:	0e                   	push   cs
     91b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     91d:	11 01                	adc    DWORD PTR [ecx],eax
     91f:	12 06                	adc    al,BYTE PTR [esi]
     921:	10 17                	adc    BYTE PTR [edi],dl
     923:	00 00                	add    BYTE PTR [eax],al
     925:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     928:	0b 0b                	or     ecx,DWORD PTR [ebx]
     92a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     92d:	0e                   	push   cs
     92e:	00 00                	add    BYTE PTR [eax],al
     930:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     933:	0b 0b                	or     ecx,DWORD PTR [ebx]
     935:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     938:	08 00                	or     BYTE PTR [eax],al
     93a:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     93d:	00 0b                	add    BYTE PTR [ebx],cl
     93f:	0b 00                	or     eax,DWORD PTR [eax]
     941:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     947:	49                   	dec    ecx
     948:	13 00                	adc    eax,DWORD PTR [eax]
     94a:	00 06                	add    BYTE PTR [esi],al
     94c:	16                   	push   ss
     94d:	00 03                	add    BYTE PTR [ebx],al
     94f:	0e                   	push   cs
     950:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     952:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     954:	49                   	dec    ecx
     955:	13 00                	adc    eax,DWORD PTR [eax]
     957:	00 07                	add    BYTE PTR [edi],al
     959:	04 01                	add    al,0x1
     95b:	03 0e                	add    ecx,DWORD PTR [esi]
     95d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     95f:	49                   	dec    ecx
     960:	13 3a                	adc    edi,DWORD PTR [edx]
     962:	0b 3b                	or     edi,DWORD PTR [ebx]
     964:	0b 01                	or     eax,DWORD PTR [ecx]
     966:	13 00                	adc    eax,DWORD PTR [eax]
     968:	00 08                	add    BYTE PTR [eax],cl
     96a:	28 00                	sub    BYTE PTR [eax],al
     96c:	03 0e                	add    ecx,DWORD PTR [esi]
     96e:	1c 0b                	sbb    al,0xb
     970:	00 00                	add    BYTE PTR [eax],al
     972:	09 28                	or     DWORD PTR [eax],ebp
     974:	00 03                	add    BYTE PTR [ebx],al
     976:	0e                   	push   cs
     977:	1c 05                	sbb    al,0x5
     979:	00 00                	add    BYTE PTR [eax],al
     97b:	0a 13                	or     dl,BYTE PTR [ebx]
     97d:	01 03                	add    DWORD PTR [ebx],eax
     97f:	0e                   	push   cs
     980:	0b 0b                	or     ecx,DWORD PTR [ebx]
     982:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     984:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     986:	01 13                	add    DWORD PTR [ebx],edx
     988:	00 00                	add    BYTE PTR [eax],al
     98a:	0b 0d 00 03 0e 3a    	or     ecx,DWORD PTR ds:0x3a0e0300
     990:	0b 3b                	or     edi,DWORD PTR [ebx]
     992:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     995:	38 0b                	cmp    BYTE PTR [ebx],cl
     997:	00 00                	add    BYTE PTR [eax],al
     999:	0c 0d                	or     al,0xd
     99b:	00 03                	add    BYTE PTR [ebx],al
     99d:	08 3a                	or     BYTE PTR [edx],bh
     99f:	0b 3b                	or     edi,DWORD PTR [ebx]
     9a1:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9a4:	38 0b                	cmp    BYTE PTR [ebx],cl
     9a6:	00 00                	add    BYTE PTR [eax],al
     9a8:	0d 2e 01 3f 19       	or     eax,0x193f012e
     9ad:	03 0e                	add    ecx,DWORD PTR [esi]
     9af:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9b1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9b3:	27                   	daa    
     9b4:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     9b7:	11 01                	adc    DWORD PTR [ecx],eax
     9b9:	12 06                	adc    al,BYTE PTR [esi]
     9bb:	40                   	inc    eax
     9bc:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     9c2:	00 00                	add    BYTE PTR [eax],al
     9c4:	0e                   	push   cs
     9c5:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     9ca:	0b 3b                	or     edi,DWORD PTR [ebx]
     9cc:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9cf:	02 18                	add    bl,BYTE PTR [eax]
     9d1:	00 00                	add    BYTE PTR [eax],al
     9d3:	0f 05                	syscall 
     9d5:	00 03                	add    BYTE PTR [ebx],al
     9d7:	08 3a                	or     BYTE PTR [edx],bh
     9d9:	0b 3b                	or     edi,DWORD PTR [ebx]
     9db:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9de:	02 18                	add    bl,BYTE PTR [eax]
     9e0:	00 00                	add    BYTE PTR [eax],al
     9e2:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     9e5:	03 0e                	add    ecx,DWORD PTR [esi]
     9e7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9e9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9eb:	49                   	dec    ecx
     9ec:	13 3f                	adc    edi,DWORD PTR [edi]
     9ee:	19 02                	sbb    DWORD PTR [edx],eax
     9f0:	18 00                	sbb    BYTE PTR [eax],al
     9f2:	00 00                	add    BYTE PTR [eax],al
     9f4:	01 11                	add    DWORD PTR [ecx],edx
     9f6:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     9fc:	0e                   	push   cs
     9fd:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     9ff:	11 01                	adc    DWORD PTR [ecx],eax
     a01:	12 06                	adc    al,BYTE PTR [esi]
     a03:	10 17                	adc    BYTE PTR [edi],dl
     a05:	00 00                	add    BYTE PTR [eax],al
     a07:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     a0a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a0c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a0f:	0e                   	push   cs
     a10:	00 00                	add    BYTE PTR [eax],al
     a12:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     a15:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a17:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a1a:	08 00                	or     BYTE PTR [eax],al
     a1c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     a1f:	00 03                	add    BYTE PTR [ebx],al
     a21:	0e                   	push   cs
     a22:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a24:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a26:	49                   	dec    ecx
     a27:	13 00                	adc    eax,DWORD PTR [eax]
     a29:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     a2f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a31:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a33:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a35:	01 13                	add    DWORD PTR [ebx],edx
     a37:	00 00                	add    BYTE PTR [eax],al
     a39:	06                   	push   es
     a3a:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     a3f:	0b 3b                	or     edi,DWORD PTR [ebx]
     a41:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a44:	38 0b                	cmp    BYTE PTR [ebx],cl
     a46:	00 00                	add    BYTE PTR [eax],al
     a48:	07                   	pop    es
     a49:	0d 00 03 08 3a       	or     eax,0x3a080300
     a4e:	0b 3b                	or     edi,DWORD PTR [ebx]
     a50:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a53:	38 0b                	cmp    BYTE PTR [ebx],cl
     a55:	00 00                	add    BYTE PTR [eax],al
     a57:	08 0f                	or     BYTE PTR [edi],cl
     a59:	00 0b                	add    BYTE PTR [ebx],cl
     a5b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a5e:	00 00                	add    BYTE PTR [eax],al
     a60:	09 0f                	or     DWORD PTR [edi],ecx
     a62:	00 0b                	add    BYTE PTR [ebx],cl
     a64:	0b 00                	or     eax,DWORD PTR [eax]
     a66:	00 0a                	add    BYTE PTR [edx],cl
     a68:	04 01                	add    al,0x1
     a6a:	03 0e                	add    ecx,DWORD PTR [esi]
     a6c:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a6e:	49                   	dec    ecx
     a6f:	13 3a                	adc    edi,DWORD PTR [edx]
     a71:	0b 3b                	or     edi,DWORD PTR [ebx]
     a73:	0b 01                	or     eax,DWORD PTR [ecx]
     a75:	13 00                	adc    eax,DWORD PTR [eax]
     a77:	00 0b                	add    BYTE PTR [ebx],cl
     a79:	28 00                	sub    BYTE PTR [eax],al
     a7b:	03 0e                	add    ecx,DWORD PTR [esi]
     a7d:	1c 0b                	sbb    al,0xb
     a7f:	00 00                	add    BYTE PTR [eax],al
     a81:	0c 28                	or     al,0x28
     a83:	00 03                	add    BYTE PTR [ebx],al
     a85:	0e                   	push   cs
     a86:	1c 05                	sbb    al,0x5
     a88:	00 00                	add    BYTE PTR [eax],al
     a8a:	0d 2e 00 3f 19       	or     eax,0x193f002e
     a8f:	03 0e                	add    ecx,DWORD PTR [esi]
     a91:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a93:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a95:	11 01                	adc    DWORD PTR [ecx],eax
     a97:	12 06                	adc    al,BYTE PTR [esi]
     a99:	40                   	inc    eax
     a9a:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     aa0:	0e                   	push   cs
     aa1:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     aa4:	19 03                	sbb    DWORD PTR [ebx],eax
     aa6:	0e                   	push   cs
     aa7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     aa9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     aab:	27                   	daa    
     aac:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     aaf:	11 01                	adc    DWORD PTR [ecx],eax
     ab1:	12 06                	adc    al,BYTE PTR [esi]
     ab3:	40                   	inc    eax
     ab4:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     aba:	00 00                	add    BYTE PTR [eax],al
     abc:	0f 05                	syscall 
     abe:	00 03                	add    BYTE PTR [ebx],al
     ac0:	0e                   	push   cs
     ac1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ac3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ac5:	49                   	dec    ecx
     ac6:	13 02                	adc    eax,DWORD PTR [edx]
     ac8:	18 00                	sbb    BYTE PTR [eax],al
     aca:	00 10                	add    BYTE PTR [eax],dl
     acc:	34 00                	xor    al,0x0
     ace:	03 0e                	add    ecx,DWORD PTR [esi]
     ad0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ad2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ad4:	49                   	dec    ecx
     ad5:	13 02                	adc    eax,DWORD PTR [edx]
     ad7:	18 00                	sbb    BYTE PTR [eax],al
     ad9:	00 11                	add    BYTE PTR [ecx],dl
     adb:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     ade:	19 03                	sbb    DWORD PTR [ebx],eax
     ae0:	0e                   	push   cs
     ae1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ae3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ae5:	27                   	daa    
     ae6:	19 11                	sbb    DWORD PTR [ecx],edx
     ae8:	01 12                	add    DWORD PTR [edx],edx
     aea:	06                   	push   es
     aeb:	40                   	inc    eax
     aec:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     af2:	00 00                	add    BYTE PTR [eax],al
     af4:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     af7:	03 08                	add    ecx,DWORD PTR [eax]
     af9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     afb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     afd:	49                   	dec    ecx
     afe:	13 02                	adc    eax,DWORD PTR [edx]
     b00:	18 00                	sbb    BYTE PTR [eax],al
     b02:	00 13                	add    BYTE PTR [ebx],dl
     b04:	0a 00                	or     al,BYTE PTR [eax]
     b06:	03 0e                	add    ecx,DWORD PTR [esi]
     b08:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b0a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b0c:	11 01                	adc    DWORD PTR [ecx],eax
     b0e:	00 00                	add    BYTE PTR [eax],al
     b10:	14 2e                	adc    al,0x2e
     b12:	01 3f                	add    DWORD PTR [edi],edi
     b14:	19 03                	sbb    DWORD PTR [ebx],eax
     b16:	0e                   	push   cs
     b17:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b19:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b1b:	27                   	daa    
     b1c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     b1f:	11 01                	adc    DWORD PTR [ecx],eax
     b21:	12 06                	adc    al,BYTE PTR [esi]
     b23:	40                   	inc    eax
     b24:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     b2a:	00 00                	add    BYTE PTR [eax],al
     b2c:	15 0b 01 11 01       	adc    eax,0x111010b
     b31:	12 06                	adc    al,BYTE PTR [esi]
     b33:	00 00                	add    BYTE PTR [eax],al
     b35:	16                   	push   ss
     b36:	34 00                	xor    al,0x0
     b38:	03 0e                	add    ecx,DWORD PTR [esi]
     b3a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b3c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b3e:	49                   	dec    ecx
     b3f:	13 3f                	adc    edi,DWORD PTR [edi]
     b41:	19 02                	sbb    DWORD PTR [edx],eax
     b43:	18 00                	sbb    BYTE PTR [eax],al
     b45:	00 00                	add    BYTE PTR [eax],al
     b47:	01 11                	add    DWORD PTR [ecx],edx
     b49:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     b4f:	0e                   	push   cs
     b50:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     b52:	11 01                	adc    DWORD PTR [ecx],eax
     b54:	12 06                	adc    al,BYTE PTR [esi]
     b56:	10 17                	adc    BYTE PTR [edi],dl
     b58:	00 00                	add    BYTE PTR [eax],al
     b5a:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     b5d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b5f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b62:	0e                   	push   cs
     b63:	00 00                	add    BYTE PTR [eax],al
     b65:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     b68:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b6a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b6d:	08 00                	or     BYTE PTR [eax],al
     b6f:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     b72:	00 0b                	add    BYTE PTR [ebx],cl
     b74:	0b 00                	or     eax,DWORD PTR [eax]
     b76:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     b7c:	49                   	dec    ecx
     b7d:	13 00                	adc    eax,DWORD PTR [eax]
     b7f:	00 06                	add    BYTE PTR [esi],al
     b81:	16                   	push   ss
     b82:	00 03                	add    BYTE PTR [ebx],al
     b84:	0e                   	push   cs
     b85:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b87:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b89:	49                   	dec    ecx
     b8a:	13 00                	adc    eax,DWORD PTR [eax]
     b8c:	00 07                	add    BYTE PTR [edi],al
     b8e:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     b92:	00 00                	add    BYTE PTR [eax],al
     b94:	08 2e                	or     BYTE PTR [esi],ch
     b96:	01 3f                	add    DWORD PTR [edi],edi
     b98:	19 03                	sbb    DWORD PTR [ebx],eax
     b9a:	0e                   	push   cs
     b9b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b9d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b9f:	27                   	daa    
     ba0:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     ba3:	11 01                	adc    DWORD PTR [ecx],eax
     ba5:	12 06                	adc    al,BYTE PTR [esi]
     ba7:	40                   	inc    eax
     ba8:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     bae:	00 00                	add    BYTE PTR [eax],al
     bb0:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     bb6:	0b 3b                	or     edi,DWORD PTR [ebx]
     bb8:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     bbb:	02 18                	add    bl,BYTE PTR [eax]
     bbd:	00 00                	add    BYTE PTR [eax],al
     bbf:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     bc5:	0b 3b                	or     edi,DWORD PTR [ebx]
     bc7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     bca:	02 18                	add    bl,BYTE PTR [eax]
     bcc:	00 00                	add    BYTE PTR [eax],al
     bce:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     bd1:	03 08                	add    ecx,DWORD PTR [eax]
     bd3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bd5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bd7:	49                   	dec    ecx
     bd8:	13 02                	adc    eax,DWORD PTR [edx]
     bda:	18 00                	sbb    BYTE PTR [eax],al
     bdc:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     bdf:	01 11                	add    DWORD PTR [ecx],edx
     be1:	01 12                	add    DWORD PTR [edx],edx
     be3:	06                   	push   es
     be4:	01 13                	add    DWORD PTR [ebx],edx
     be6:	00 00                	add    BYTE PTR [eax],al
     be8:	0d 0b 01 11 01       	or     eax,0x111010b
     bed:	12 06                	adc    al,BYTE PTR [esi]
     bef:	00 00                	add    BYTE PTR [eax],al
     bf1:	0e                   	push   cs
     bf2:	26 00 00             	add    BYTE PTR es:[eax],al
     bf5:	00 0f                	add    BYTE PTR [edi],cl
     bf7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     bfa:	19 03                	sbb    DWORD PTR [ebx],eax
     bfc:	0e                   	push   cs
     bfd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c01:	27                   	daa    
     c02:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c05:	11 01                	adc    DWORD PTR [ecx],eax
     c07:	12 06                	adc    al,BYTE PTR [esi]
     c09:	40                   	inc    eax
     c0a:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     c10:	00 00                	add    BYTE PTR [eax],al
     c12:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     c15:	03 0e                	add    ecx,DWORD PTR [esi]
     c17:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c19:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c1b:	49                   	dec    ecx
     c1c:	13 3f                	adc    edi,DWORD PTR [edi]
     c1e:	19 02                	sbb    DWORD PTR [edx],eax
     c20:	18 00                	sbb    BYTE PTR [eax],al
     c22:	00 00                	add    BYTE PTR [eax],al
     c24:	01 11                	add    DWORD PTR [ecx],edx
     c26:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     c2c:	0e                   	push   cs
     c2d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     c2f:	11 01                	adc    DWORD PTR [ecx],eax
     c31:	12 06                	adc    al,BYTE PTR [esi]
     c33:	10 17                	adc    BYTE PTR [edi],dl
     c35:	00 00                	add    BYTE PTR [eax],al
     c37:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     c3a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c3c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c3f:	0e                   	push   cs
     c40:	00 00                	add    BYTE PTR [eax],al
     c42:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     c45:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c47:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c4a:	08 00                	or     BYTE PTR [eax],al
     c4c:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     c4f:	00 0b                	add    BYTE PTR [ebx],cl
     c51:	0b 00                	or     eax,DWORD PTR [eax]
     c53:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     c59:	49                   	dec    ecx
     c5a:	13 00                	adc    eax,DWORD PTR [eax]
     c5c:	00 06                	add    BYTE PTR [esi],al
     c5e:	16                   	push   ss
     c5f:	00 03                	add    BYTE PTR [ebx],al
     c61:	0e                   	push   cs
     c62:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c64:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c66:	49                   	dec    ecx
     c67:	13 00                	adc    eax,DWORD PTR [eax]
     c69:	00 07                	add    BYTE PTR [edi],al
     c6b:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     c6e:	19 03                	sbb    DWORD PTR [ebx],eax
     c70:	0e                   	push   cs
     c71:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c73:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c75:	27                   	daa    
     c76:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c79:	11 01                	adc    DWORD PTR [ecx],eax
     c7b:	12 06                	adc    al,BYTE PTR [esi]
     c7d:	40                   	inc    eax
     c7e:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     c84:	00 00                	add    BYTE PTR [eax],al
     c86:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     c8c:	0b 3b                	or     edi,DWORD PTR [ebx]
     c8e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c91:	02 18                	add    bl,BYTE PTR [eax]
     c93:	00 00                	add    BYTE PTR [eax],al
     c95:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     c98:	03 08                	add    ecx,DWORD PTR [eax]
     c9a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c9c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c9e:	49                   	dec    ecx
     c9f:	13 02                	adc    eax,DWORD PTR [edx]
     ca1:	18 00                	sbb    BYTE PTR [eax],al
     ca3:	00 0a                	add    BYTE PTR [edx],cl
     ca5:	34 00                	xor    al,0x0
     ca7:	03 0e                	add    ecx,DWORD PTR [esi]
     ca9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cab:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cad:	49                   	dec    ecx
     cae:	13 02                	adc    eax,DWORD PTR [edx]
     cb0:	18 00                	sbb    BYTE PTR [eax],al
     cb2:	00 0b                	add    BYTE PTR [ebx],cl
     cb4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     cb7:	19 03                	sbb    DWORD PTR [ebx],eax
     cb9:	0e                   	push   cs
     cba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cbc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cbe:	27                   	daa    
     cbf:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     cc2:	11 01                	adc    DWORD PTR [ecx],eax
     cc4:	12 06                	adc    al,BYTE PTR [esi]
     cc6:	40                   	inc    eax
     cc7:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     ccd:	00 00                	add    BYTE PTR [eax],al
     ccf:	0c 34                	or     al,0x34
     cd1:	00 03                	add    BYTE PTR [ebx],al
     cd3:	0e                   	push   cs
     cd4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cd6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cd8:	49                   	dec    ecx
     cd9:	13 3f                	adc    edi,DWORD PTR [edi]
     cdb:	19 02                	sbb    DWORD PTR [edx],eax
     cdd:	18 00                	sbb    BYTE PTR [eax],al
     cdf:	00 00                	add    BYTE PTR [eax],al
     ce1:	01 11                	add    DWORD PTR [ecx],edx
     ce3:	00 10                	add    BYTE PTR [eax],dl
     ce5:	06                   	push   es
     ce6:	11 01                	adc    DWORD PTR [ecx],eax
     ce8:	12 01                	adc    al,BYTE PTR [ecx]
     cea:	03 08                	add    ecx,DWORD PTR [eax]
     cec:	1b 08                	sbb    ecx,DWORD PTR [eax]
     cee:	25 08 13 05 00       	and    eax,0x51308
     cf3:	00 00                	add    BYTE PTR [eax],al
     cf5:	01 11                	add    DWORD PTR [ecx],edx
     cf7:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     cfd:	0e                   	push   cs
     cfe:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     d00:	11 01                	adc    DWORD PTR [ecx],eax
     d02:	12 06                	adc    al,BYTE PTR [esi]
     d04:	10 17                	adc    BYTE PTR [edi],dl
     d06:	00 00                	add    BYTE PTR [eax],al
     d08:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     d0b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d0d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d10:	0e                   	push   cs
     d11:	00 00                	add    BYTE PTR [eax],al
     d13:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     d16:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d1b:	08 00                	or     BYTE PTR [eax],al
     d1d:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     d20:	00 0b                	add    BYTE PTR [ebx],cl
     d22:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d25:	00 00                	add    BYTE PTR [eax],al
     d27:	05 16 00 03 0e       	add    eax,0xe030016
     d2c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d2e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d30:	49                   	dec    ecx
     d31:	13 00                	adc    eax,DWORD PTR [eax]
     d33:	00 06                	add    BYTE PTR [esi],al
     d35:	04 01                	add    al,0x1
     d37:	03 0e                	add    ecx,DWORD PTR [esi]
     d39:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d3b:	49                   	dec    ecx
     d3c:	13 3a                	adc    edi,DWORD PTR [edx]
     d3e:	0b 3b                	or     edi,DWORD PTR [ebx]
     d40:	0b 01                	or     eax,DWORD PTR [ecx]
     d42:	13 00                	adc    eax,DWORD PTR [eax]
     d44:	00 07                	add    BYTE PTR [edi],al
     d46:	28 00                	sub    BYTE PTR [eax],al
     d48:	03 0e                	add    ecx,DWORD PTR [esi]
     d4a:	1c 0b                	sbb    al,0xb
     d4c:	00 00                	add    BYTE PTR [eax],al
     d4e:	08 28                	or     BYTE PTR [eax],ch
     d50:	00 03                	add    BYTE PTR [ebx],al
     d52:	0e                   	push   cs
     d53:	1c 05                	sbb    al,0x5
     d55:	00 00                	add    BYTE PTR [eax],al
     d57:	09 2e                	or     DWORD PTR [esi],ebp
     d59:	01 3f                	add    DWORD PTR [edi],edi
     d5b:	19 03                	sbb    DWORD PTR [ebx],eax
     d5d:	0e                   	push   cs
     d5e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d60:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d62:	27                   	daa    
     d63:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d66:	11 01                	adc    DWORD PTR [ecx],eax
     d68:	12 06                	adc    al,BYTE PTR [esi]
     d6a:	40                   	inc    eax
     d6b:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     d71:	00 00                	add    BYTE PTR [eax],al
     d73:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     d79:	0b 3b                	or     edi,DWORD PTR [ebx]
     d7b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d7e:	02 18                	add    bl,BYTE PTR [eax]
     d80:	00 00                	add    BYTE PTR [eax],al
     d82:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     d85:	03 0e                	add    ecx,DWORD PTR [esi]
     d87:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d89:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d8b:	49                   	dec    ecx
     d8c:	13 3f                	adc    edi,DWORD PTR [edi]
     d8e:	19 02                	sbb    DWORD PTR [edx],eax
     d90:	18 00                	sbb    BYTE PTR [eax],al
     d92:	00 00                	add    BYTE PTR [eax],al
     d94:	01 11                	add    DWORD PTR [ecx],edx
     d96:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     d9c:	0e                   	push   cs
     d9d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     d9f:	11 01                	adc    DWORD PTR [ecx],eax
     da1:	12 06                	adc    al,BYTE PTR [esi]
     da3:	10 17                	adc    BYTE PTR [edi],dl
     da5:	00 00                	add    BYTE PTR [eax],al
     da7:	02 16                	add    dl,BYTE PTR [esi]
     da9:	00 03                	add    BYTE PTR [ebx],al
     dab:	0e                   	push   cs
     dac:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dae:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     db0:	49                   	dec    ecx
     db1:	13 00                	adc    eax,DWORD PTR [eax]
     db3:	00 03                	add    BYTE PTR [ebx],al
     db5:	13 01                	adc    eax,DWORD PTR [ecx]
     db7:	03 0e                	add    ecx,DWORD PTR [esi]
     db9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     dbb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dbd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     dbf:	01 13                	add    DWORD PTR [ebx],edx
     dc1:	00 00                	add    BYTE PTR [eax],al
     dc3:	04 0d                	add    al,0xd
     dc5:	00 03                	add    BYTE PTR [ebx],al
     dc7:	08 3a                	or     BYTE PTR [edx],bh
     dc9:	0b 3b                	or     edi,DWORD PTR [ebx]
     dcb:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     dce:	38 0b                	cmp    BYTE PTR [ebx],cl
     dd0:	00 00                	add    BYTE PTR [eax],al
     dd2:	05 0d 00 03 0e       	add    eax,0xe03000d
     dd7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dd9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ddb:	49                   	dec    ecx
     ddc:	13 38                	adc    edi,DWORD PTR [eax]
     dde:	0b 00                	or     eax,DWORD PTR [eax]
     de0:	00 06                	add    BYTE PTR [esi],al
     de2:	24 00                	and    al,0x0
     de4:	0b 0b                	or     ecx,DWORD PTR [ebx]
     de6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     de9:	08 00                	or     BYTE PTR [eax],al
     deb:	00 07                	add    BYTE PTR [edi],al
     ded:	01 01                	add    DWORD PTR [ecx],eax
     def:	49                   	dec    ecx
     df0:	13 01                	adc    eax,DWORD PTR [ecx]
     df2:	13 00                	adc    eax,DWORD PTR [eax]
     df4:	00 08                	add    BYTE PTR [eax],cl
     df6:	21 00                	and    DWORD PTR [eax],eax
     df8:	49                   	dec    ecx
     df9:	13 2f                	adc    ebp,DWORD PTR [edi]
     dfb:	0b 00                	or     eax,DWORD PTR [eax]
     dfd:	00 09                	add    BYTE PTR [ecx],cl
     dff:	24 00                	and    al,0x0
     e01:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e03:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e06:	0e                   	push   cs
     e07:	00 00                	add    BYTE PTR [eax],al
     e09:	0a 0f                	or     cl,BYTE PTR [edi]
     e0b:	00 0b                	add    BYTE PTR [ebx],cl
     e0d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e10:	00 00                	add    BYTE PTR [eax],al
     e12:	0b 13                	or     edx,DWORD PTR [ebx]
     e14:	01 03                	add    DWORD PTR [ebx],eax
     e16:	08 0b                	or     BYTE PTR [ebx],cl
     e18:	0b 3a                	or     edi,DWORD PTR [edx]
     e1a:	0b 3b                	or     edi,DWORD PTR [ebx]
     e1c:	0b 01                	or     eax,DWORD PTR [ecx]
     e1e:	13 00                	adc    eax,DWORD PTR [eax]
     e20:	00 0c 26             	add    BYTE PTR [esi+eiz*1],cl
     e23:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     e26:	00 00                	add    BYTE PTR [eax],al
     e28:	0d 13 01 03 0e       	or     eax,0xe030113
     e2d:	0b 05 3a 0b 3b 0b    	or     eax,DWORD PTR ds:0xb3b0b3a
     e33:	01 13                	add    DWORD PTR [ebx],edx
     e35:	00 00                	add    BYTE PTR [eax],al
     e37:	0e                   	push   cs
     e38:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     e3d:	0b 3b                	or     edi,DWORD PTR [ebx]
     e3f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e42:	38 05 00 00 0f 21    	cmp    BYTE PTR ds:0x210f0000,al
     e48:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     e4b:	2f                   	das    
     e4c:	05 00 00 10 2e       	add    eax,0x2e100000
     e51:	01 3f                	add    DWORD PTR [edi],edi
     e53:	19 03                	sbb    DWORD PTR [ebx],eax
     e55:	0e                   	push   cs
     e56:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e58:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e5a:	27                   	daa    
     e5b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e5e:	11 01                	adc    DWORD PTR [ecx],eax
     e60:	12 06                	adc    al,BYTE PTR [esi]
     e62:	40                   	inc    eax
     e63:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     e69:	00 00                	add    BYTE PTR [eax],al
     e6b:	11 05 00 03 0e 3a    	adc    DWORD PTR ds:0x3a0e0300,eax
     e71:	0b 3b                	or     edi,DWORD PTR [ebx]
     e73:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e76:	02 18                	add    bl,BYTE PTR [eax]
     e78:	00 00                	add    BYTE PTR [eax],al
     e7a:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     e7d:	03 0e                	add    ecx,DWORD PTR [esi]
     e7f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e81:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e83:	49                   	dec    ecx
     e84:	13 02                	adc    eax,DWORD PTR [edx]
     e86:	18 00                	sbb    BYTE PTR [eax],al
     e88:	00 13                	add    BYTE PTR [ebx],dl
     e8a:	34 00                	xor    al,0x0
     e8c:	03 08                	add    ecx,DWORD PTR [eax]
     e8e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e90:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e92:	49                   	dec    ecx
     e93:	13 02                	adc    eax,DWORD PTR [edx]
     e95:	18 00                	sbb    BYTE PTR [eax],al
     e97:	00 14 0b             	add    BYTE PTR [ebx+ecx*1],dl
     e9a:	01 11                	add    DWORD PTR [ecx],edx
     e9c:	01 12                	add    DWORD PTR [edx],edx
     e9e:	06                   	push   es
     e9f:	00 00                	add    BYTE PTR [eax],al
     ea1:	15 2e 01 3f 19       	adc    eax,0x193f012e
     ea6:	03 0e                	add    ecx,DWORD PTR [esi]
     ea8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     eaa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     eac:	27                   	daa    
     ead:	19 11                	sbb    DWORD PTR [ecx],edx
     eaf:	01 12                	add    DWORD PTR [edx],edx
     eb1:	06                   	push   es
     eb2:	40                   	inc    eax
     eb3:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     eb9:	00 00                	add    BYTE PTR [eax],al
     ebb:	16                   	push   ss
     ebc:	34 00                	xor    al,0x0
     ebe:	03 0e                	add    ecx,DWORD PTR [esi]
     ec0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ec2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ec4:	49                   	dec    ecx
     ec5:	13 3f                	adc    edi,DWORD PTR [edi]
     ec7:	19 02                	sbb    DWORD PTR [edx],eax
     ec9:	18 00                	sbb    BYTE PTR [eax],al
     ecb:	00 00                	add    BYTE PTR [eax],al
     ecd:	01 11                	add    DWORD PTR [ecx],edx
     ecf:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     ed5:	0e                   	push   cs
     ed6:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     ed8:	11 01                	adc    DWORD PTR [ecx],eax
     eda:	12 06                	adc    al,BYTE PTR [esi]
     edc:	10 17                	adc    BYTE PTR [edi],dl
     ede:	00 00                	add    BYTE PTR [eax],al
     ee0:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     ee3:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ee5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ee8:	0e                   	push   cs
     ee9:	00 00                	add    BYTE PTR [eax],al
     eeb:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     eee:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ef0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ef3:	08 00                	or     BYTE PTR [eax],al
     ef5:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     ef8:	00 0b                	add    BYTE PTR [ebx],cl
     efa:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     efd:	00 00                	add    BYTE PTR [eax],al
     eff:	05 16 00 03 0e       	add    eax,0xe030016
     f04:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f06:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f08:	49                   	dec    ecx
     f09:	13 00                	adc    eax,DWORD PTR [eax]
     f0b:	00 06                	add    BYTE PTR [esi],al
     f0d:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     f11:	00 00                	add    BYTE PTR [eax],al
     f13:	07                   	pop    es
     f14:	01 01                	add    DWORD PTR [ecx],eax
     f16:	49                   	dec    ecx
     f17:	13 01                	adc    eax,DWORD PTR [ecx]
     f19:	13 00                	adc    eax,DWORD PTR [eax]
     f1b:	00 08                	add    BYTE PTR [eax],cl
     f1d:	21 00                	and    DWORD PTR [eax],eax
     f1f:	49                   	dec    ecx
     f20:	13 2f                	adc    ebp,DWORD PTR [edi]
     f22:	0b 00                	or     eax,DWORD PTR [eax]
     f24:	00 09                	add    BYTE PTR [ecx],cl
     f26:	0f 00 0b             	str    WORD PTR [ebx]
     f29:	0b 03                	or     eax,DWORD PTR [ebx]
     f2b:	0e                   	push   cs
     f2c:	49                   	dec    ecx
     f2d:	13 00                	adc    eax,DWORD PTR [eax]
     f2f:	00 0a                	add    BYTE PTR [edx],cl
     f31:	13 01                	adc    eax,DWORD PTR [ecx]
     f33:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f35:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f37:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f39:	01 13                	add    DWORD PTR [ebx],edx
     f3b:	00 00                	add    BYTE PTR [eax],al
     f3d:	0b 0d 00 03 0e 3a    	or     ecx,DWORD PTR ds:0x3a0e0300
     f43:	0b 3b                	or     edi,DWORD PTR [ebx]
     f45:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f48:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f4a:	0d 0b 0c 0b 38       	or     eax,0x380b0c0b
     f4f:	0b 00                	or     eax,DWORD PTR [eax]
     f51:	00 0c 17             	add    BYTE PTR [edi+edx*1],cl
     f54:	01 0b                	add    DWORD PTR [ebx],ecx
     f56:	0b 3a                	or     edi,DWORD PTR [edx]
     f58:	0b 3b                	or     edi,DWORD PTR [ebx]
     f5a:	0b 01                	or     eax,DWORD PTR [ecx]
     f5c:	13 00                	adc    eax,DWORD PTR [eax]
     f5e:	00 0d 0d 00 49 13    	add    BYTE PTR ds:0x1349000d,cl
     f64:	00 00                	add    BYTE PTR [eax],al
     f66:	0e                   	push   cs
     f67:	0d 00 03 08 3a       	or     eax,0x3a080300
     f6c:	0b 3b                	or     edi,DWORD PTR [ebx]
     f6e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f71:	00 00                	add    BYTE PTR [eax],al
     f73:	0f 2e 01             	ucomiss xmm0,DWORD PTR [ecx]
     f76:	3f                   	aas    
     f77:	19 03                	sbb    DWORD PTR [ebx],eax
     f79:	0e                   	push   cs
     f7a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f7c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f7e:	27                   	daa    
     f7f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f82:	11 01                	adc    DWORD PTR [ecx],eax
     f84:	12 06                	adc    al,BYTE PTR [esi]
     f86:	40                   	inc    eax
     f87:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     f8d:	00 00                	add    BYTE PTR [eax],al
     f8f:	10 05 00 03 0e 3a    	adc    BYTE PTR ds:0x3a0e0300,al
     f95:	0b 3b                	or     edi,DWORD PTR [ebx]
     f97:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f9a:	02 18                	add    bl,BYTE PTR [eax]
     f9c:	00 00                	add    BYTE PTR [eax],al
     f9e:	11 2e                	adc    DWORD PTR [esi],ebp
     fa0:	01 3f                	add    DWORD PTR [edi],edi
     fa2:	19 03                	sbb    DWORD PTR [ebx],eax
     fa4:	0e                   	push   cs
     fa5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fa7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fa9:	49                   	dec    ecx
     faa:	13 3c 19             	adc    edi,DWORD PTR [ecx+ebx*1]
     fad:	00 00                	add    BYTE PTR [eax],al
     faf:	12 18                	adc    bl,BYTE PTR [eax]
     fb1:	00 00                	add    BYTE PTR [eax],al
     fb3:	00 13                	add    BYTE PTR [ebx],dl
     fb5:	2e 01 03             	add    DWORD PTR cs:[ebx],eax
     fb8:	08 3a                	or     BYTE PTR [edx],bh
     fba:	0b 3b                	or     edi,DWORD PTR [ebx]
     fbc:	0b 27                	or     esp,DWORD PTR [edi]
     fbe:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     fc1:	11 01                	adc    DWORD PTR [ecx],eax
     fc3:	12 06                	adc    al,BYTE PTR [esi]
     fc5:	40                   	inc    eax
     fc6:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     fcc:	00 00                	add    BYTE PTR [eax],al
     fce:	14 05                	adc    al,0x5
     fd0:	00 03                	add    BYTE PTR [ebx],al
     fd2:	08 3a                	or     BYTE PTR [edx],bh
     fd4:	0b 3b                	or     edi,DWORD PTR [ebx]
     fd6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fd9:	02 18                	add    bl,BYTE PTR [eax]
     fdb:	00 00                	add    BYTE PTR [eax],al
     fdd:	15 34 00 03 08       	adc    eax,0x8030034
     fe2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fe4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fe6:	49                   	dec    ecx
     fe7:	13 02                	adc    eax,DWORD PTR [edx]
     fe9:	18 00                	sbb    BYTE PTR [eax],al
     feb:	00 16                	add    BYTE PTR [esi],dl
     fed:	2e 01 03             	add    DWORD PTR cs:[ebx],eax
     ff0:	0e                   	push   cs
     ff1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ff3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ff5:	27                   	daa    
     ff6:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     ff9:	11 01                	adc    DWORD PTR [ecx],eax
     ffb:	12 06                	adc    al,BYTE PTR [esi]
     ffd:	40                   	inc    eax
     ffe:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1004:	00 00                	add    BYTE PTR [eax],al
    1006:	17                   	pop    ss
    1007:	34 00                	xor    al,0x0
    1009:	03 0e                	add    ecx,DWORD PTR [esi]
    100b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    100d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    100f:	49                   	dec    ecx
    1010:	13 02                	adc    eax,DWORD PTR [edx]
    1012:	18 00                	sbb    BYTE PTR [eax],al
    1014:	00 18                	add    BYTE PTR [eax],bl
    1016:	2e 01 03             	add    DWORD PTR cs:[ebx],eax
    1019:	0e                   	push   cs
    101a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    101c:	3b 05 27 19 11 01    	cmp    eax,DWORD PTR ds:0x1111927
    1022:	12 06                	adc    al,BYTE PTR [esi]
    1024:	40                   	inc    eax
    1025:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    102b:	00 00                	add    BYTE PTR [eax],al
    102d:	19 05 00 03 0e 3a    	sbb    DWORD PTR ds:0x3a0e0300,eax
    1033:	0b 3b                	or     edi,DWORD PTR [ebx]
    1035:	05 49 13 02 18       	add    eax,0x18021349
    103a:	00 00                	add    BYTE PTR [eax],al
    103c:	1a 05 00 03 08 3a    	sbb    al,BYTE PTR ds:0x3a080300
    1042:	0b 3b                	or     edi,DWORD PTR [ebx]
    1044:	05 49 13 02 18       	add    eax,0x18021349
    1049:	00 00                	add    BYTE PTR [eax],al
    104b:	1b 34 00             	sbb    esi,DWORD PTR [eax+eax*1]
    104e:	03 0e                	add    ecx,DWORD PTR [esi]
    1050:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1052:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
    1058:	00 00                	add    BYTE PTR [eax],al
    105a:	1c 34                	sbb    al,0x34
    105c:	00 03                	add    BYTE PTR [ebx],al
    105e:	08 3a                	or     BYTE PTR [edx],bh
    1060:	0b 3b                	or     edi,DWORD PTR [ebx]
    1062:	05 49 13 02 18       	add    eax,0x18021349
    1067:	00 00                	add    BYTE PTR [eax],al
    1069:	1d 21 00 49 13       	sbb    eax,0x13490021
    106e:	2f                   	das    
    106f:	05 00 00 1e 0b       	add    eax,0xb1e0000
    1074:	01 11                	add    DWORD PTR [ecx],edx
    1076:	01 12                	add    DWORD PTR [edx],edx
    1078:	06                   	push   es
    1079:	00 00                	add    BYTE PTR [eax],al
    107b:	1f                   	pop    ds
    107c:	2e 01 03             	add    DWORD PTR cs:[ebx],eax
    107f:	0e                   	push   cs
    1080:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1082:	3b 05 27 19 11 01    	cmp    eax,DWORD PTR ds:0x1111927
    1088:	12 06                	adc    al,BYTE PTR [esi]
    108a:	40                   	inc    eax
    108b:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1091:	00 00                	add    BYTE PTR [eax],al
    1093:	20 2e                	and    BYTE PTR [esi],ch
    1095:	01 03                	add    DWORD PTR [ebx],eax
    1097:	08 3a                	or     BYTE PTR [edx],bh
    1099:	0b 3b                	or     edi,DWORD PTR [ebx]
    109b:	05 27 19 49 13       	add    eax,0x13491927
    10a0:	11 01                	adc    DWORD PTR [ecx],eax
    10a2:	12 06                	adc    al,BYTE PTR [esi]
    10a4:	40                   	inc    eax
    10a5:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    10ab:	00 00                	add    BYTE PTR [eax],al
    10ad:	21 2e                	and    DWORD PTR [esi],ebp
    10af:	01 3f                	add    DWORD PTR [edi],edi
    10b1:	19 03                	sbb    DWORD PTR [ebx],eax
    10b3:	0e                   	push   cs
    10b4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10b6:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
    10bc:	11 01                	adc    DWORD PTR [ecx],eax
    10be:	12 06                	adc    al,BYTE PTR [esi]
    10c0:	40                   	inc    eax
    10c1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    10c7:	00 00                	add    BYTE PTR [eax],al
    10c9:	22 0a                	and    cl,BYTE PTR [edx]
    10cb:	00 03                	add    BYTE PTR [ebx],al
    10cd:	0e                   	push   cs
    10ce:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10d0:	3b 05 11 01 00 00    	cmp    eax,DWORD PTR ds:0x111
    10d6:	23 2e                	and    ebp,DWORD PTR [esi]
    10d8:	01 3f                	add    DWORD PTR [edi],edi
    10da:	19 03                	sbb    DWORD PTR [ebx],eax
    10dc:	0e                   	push   cs
    10dd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10df:	3b 05 49 13 3c 19    	cmp    eax,DWORD PTR ds:0x193c1349
    10e5:	01 13                	add    DWORD PTR [ebx],edx
    10e7:	00 00                	add    BYTE PTR [eax],al
    10e9:	24 0b                	and    al,0xb
    10eb:	01 11                	add    DWORD PTR [ecx],edx
    10ed:	01 12                	add    DWORD PTR [edx],edx
    10ef:	06                   	push   es
    10f0:	01 13                	add    DWORD PTR [ebx],edx
    10f2:	00 00                	add    BYTE PTR [eax],al
    10f4:	25 34 00 03 0e       	and    eax,0xe030034
    10f9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10fb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10fd:	49                   	dec    ecx
    10fe:	13 3f                	adc    edi,DWORD PTR [edi]
    1100:	19 02                	sbb    DWORD PTR [edx],eax
    1102:	18 00                	sbb    BYTE PTR [eax],al
    1104:	00 00                	add    BYTE PTR [eax],al
    1106:	01 11                	add    DWORD PTR [ecx],edx
    1108:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    110e:	0e                   	push   cs
    110f:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1111:	11 01                	adc    DWORD PTR [ecx],eax
    1113:	12 06                	adc    al,BYTE PTR [esi]
    1115:	10 17                	adc    BYTE PTR [edi],dl
    1117:	00 00                	add    BYTE PTR [eax],al
    1119:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    111c:	0b 0b                	or     ecx,DWORD PTR [ebx]
    111e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1121:	0e                   	push   cs
    1122:	00 00                	add    BYTE PTR [eax],al
    1124:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1127:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1129:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    112c:	08 00                	or     BYTE PTR [eax],al
    112e:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
    1131:	00 0b                	add    BYTE PTR [ebx],cl
    1133:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1136:	00 00                	add    BYTE PTR [eax],al
    1138:	05 2e 01 3f 19       	add    eax,0x193f012e
    113d:	03 0e                	add    ecx,DWORD PTR [esi]
    113f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1141:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1143:	11 01                	adc    DWORD PTR [ecx],eax
    1145:	12 06                	adc    al,BYTE PTR [esi]
    1147:	40                   	inc    eax
    1148:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    114e:	00 00                	add    BYTE PTR [eax],al
    1150:	06                   	push   es
    1151:	34 00                	xor    al,0x0
    1153:	03 0e                	add    ecx,DWORD PTR [esi]
    1155:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1157:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1159:	49                   	dec    ecx
    115a:	13 02                	adc    eax,DWORD PTR [edx]
    115c:	18 00                	sbb    BYTE PTR [eax],al
    115e:	00 07                	add    BYTE PTR [edi],al
    1160:	01 01                	add    DWORD PTR [ecx],eax
    1162:	49                   	dec    ecx
    1163:	13 01                	adc    eax,DWORD PTR [ecx]
    1165:	13 00                	adc    eax,DWORD PTR [eax]
    1167:	00 08                	add    BYTE PTR [eax],cl
    1169:	21 00                	and    DWORD PTR [eax],eax
    116b:	49                   	dec    ecx
    116c:	13 2f                	adc    ebp,DWORD PTR [edi]
    116e:	0b 00                	or     eax,DWORD PTR [eax]
    1170:	00 09                	add    BYTE PTR [ecx],cl
    1172:	34 00                	xor    al,0x0
    1174:	03 0e                	add    ecx,DWORD PTR [esi]
    1176:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1178:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    117a:	49                   	dec    ecx
    117b:	13 3f                	adc    edi,DWORD PTR [edi]
    117d:	19 02                	sbb    DWORD PTR [edx],eax
    117f:	18 00                	sbb    BYTE PTR [eax],al
    1181:	00 00                	add    BYTE PTR [eax],al
    1183:	01 11                	add    DWORD PTR [ecx],edx
    1185:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    118b:	0e                   	push   cs
    118c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    118e:	11 01                	adc    DWORD PTR [ecx],eax
    1190:	12 06                	adc    al,BYTE PTR [esi]
    1192:	10 17                	adc    BYTE PTR [edi],dl
    1194:	00 00                	add    BYTE PTR [eax],al
    1196:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1199:	0b 0b                	or     ecx,DWORD PTR [ebx]
    119b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    119e:	08 00                	or     BYTE PTR [eax],al
    11a0:	00 03                	add    BYTE PTR [ebx],al
    11a2:	16                   	push   ss
    11a3:	00 03                	add    BYTE PTR [ebx],al
    11a5:	0e                   	push   cs
    11a6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11a8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11aa:	49                   	dec    ecx
    11ab:	13 00                	adc    eax,DWORD PTR [eax]
    11ad:	00 04 24             	add    BYTE PTR [esp],al
    11b0:	00 0b                	add    BYTE PTR [ebx],cl
    11b2:	0b 3e                	or     edi,DWORD PTR [esi]
    11b4:	0b 03                	or     eax,DWORD PTR [ebx]
    11b6:	0e                   	push   cs
    11b7:	00 00                	add    BYTE PTR [eax],al
    11b9:	05 0f 00 0b 0b       	add    eax,0xb0b000f
    11be:	49                   	dec    ecx
    11bf:	13 00                	adc    eax,DWORD PTR [eax]
    11c1:	00 06                	add    BYTE PTR [esi],al
    11c3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    11c6:	19 03                	sbb    DWORD PTR [ebx],eax
    11c8:	0e                   	push   cs
    11c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11cd:	27                   	daa    
    11ce:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    11d1:	11 01                	adc    DWORD PTR [ecx],eax
    11d3:	12 06                	adc    al,BYTE PTR [esi]
    11d5:	40                   	inc    eax
    11d6:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    11dc:	00 00                	add    BYTE PTR [eax],al
    11de:	07                   	pop    es
    11df:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    11e4:	0b 3b                	or     edi,DWORD PTR [ebx]
    11e6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    11e9:	02 18                	add    bl,BYTE PTR [eax]
    11eb:	00 00                	add    BYTE PTR [eax],al
    11ed:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    11f3:	0b 3b                	or     edi,DWORD PTR [ebx]
    11f5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    11f8:	02 18                	add    bl,BYTE PTR [eax]
    11fa:	00 00                	add    BYTE PTR [eax],al
    11fc:	09 26                	or     DWORD PTR [esi],esp
    11fe:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1201:	00 00                	add    BYTE PTR [eax],al
    1203:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
    1206:	03 0e                	add    ecx,DWORD PTR [esi]
    1208:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    120a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    120c:	49                   	dec    ecx
    120d:	13 02                	adc    eax,DWORD PTR [edx]
    120f:	18 00                	sbb    BYTE PTR [eax],al
    1211:	00 0b                	add    BYTE PTR [ebx],cl
    1213:	34 00                	xor    al,0x0
    1215:	03 0e                	add    ecx,DWORD PTR [esi]
    1217:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1219:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    121b:	49                   	dec    ecx
    121c:	13 3f                	adc    edi,DWORD PTR [edi]
    121e:	19 02                	sbb    DWORD PTR [edx],eax
    1220:	18 00                	sbb    BYTE PTR [eax],al
    1222:	00 00                	add    BYTE PTR [eax],al
    1224:	01 11                	add    DWORD PTR [ecx],edx
    1226:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    122c:	0e                   	push   cs
    122d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    122f:	11 01                	adc    DWORD PTR [ecx],eax
    1231:	12 06                	adc    al,BYTE PTR [esi]
    1233:	10 17                	adc    BYTE PTR [edi],dl
    1235:	00 00                	add    BYTE PTR [eax],al
    1237:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    123a:	0b 0b                	or     ecx,DWORD PTR [ebx]
    123c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    123f:	0e                   	push   cs
    1240:	00 00                	add    BYTE PTR [eax],al
    1242:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1245:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1247:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    124a:	08 00                	or     BYTE PTR [eax],al
    124c:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
    124f:	00 0b                	add    BYTE PTR [ebx],cl
    1251:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1254:	00 00                	add    BYTE PTR [eax],al
    1256:	05 16 00 03 0e       	add    eax,0xe030016
    125b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    125d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    125f:	49                   	dec    ecx
    1260:	13 00                	adc    eax,DWORD PTR [eax]
    1262:	00 06                	add    BYTE PTR [esi],al
    1264:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1268:	00 00                	add    BYTE PTR [eax],al
    126a:	07                   	pop    es
    126b:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    126e:	19 03                	sbb    DWORD PTR [ebx],eax
    1270:	0e                   	push   cs
    1271:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1273:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1275:	27                   	daa    
    1276:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1279:	11 01                	adc    DWORD PTR [ecx],eax
    127b:	12 06                	adc    al,BYTE PTR [esi]
    127d:	40                   	inc    eax
    127e:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1284:	00 00                	add    BYTE PTR [eax],al
    1286:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    128c:	0b 3b                	or     edi,DWORD PTR [ebx]
    128e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1291:	02 18                	add    bl,BYTE PTR [eax]
    1293:	00 00                	add    BYTE PTR [eax],al
    1295:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1298:	03 08                	add    ecx,DWORD PTR [eax]
    129a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    129c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    129e:	49                   	dec    ecx
    129f:	13 02                	adc    eax,DWORD PTR [edx]
    12a1:	18 00                	sbb    BYTE PTR [eax],al
    12a3:	00 0a                	add    BYTE PTR [edx],cl
    12a5:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    12a8:	19 03                	sbb    DWORD PTR [ebx],eax
    12aa:	0e                   	push   cs
    12ab:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12ad:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12af:	27                   	daa    
    12b0:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    12b3:	11 01                	adc    DWORD PTR [ecx],eax
    12b5:	12 06                	adc    al,BYTE PTR [esi]
    12b7:	40                   	inc    eax
    12b8:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    12be:	00 00                	add    BYTE PTR [eax],al
    12c0:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
    12c3:	03 0e                	add    ecx,DWORD PTR [esi]
    12c5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12c7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12c9:	49                   	dec    ecx
    12ca:	13 3f                	adc    edi,DWORD PTR [edi]
    12cc:	19 02                	sbb    DWORD PTR [edx],eax
    12ce:	18 00                	sbb    BYTE PTR [eax],al
    12d0:	00 00                	add    BYTE PTR [eax],al
    12d2:	01 11                	add    DWORD PTR [ecx],edx
    12d4:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    12da:	0e                   	push   cs
    12db:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    12dd:	11 01                	adc    DWORD PTR [ecx],eax
    12df:	12 06                	adc    al,BYTE PTR [esi]
    12e1:	10 17                	adc    BYTE PTR [edi],dl
    12e3:	00 00                	add    BYTE PTR [eax],al
    12e5:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    12e8:	0b 0b                	or     ecx,DWORD PTR [ebx]
    12ea:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    12ed:	08 00                	or     BYTE PTR [eax],al
    12ef:	00 03                	add    BYTE PTR [ebx],al
    12f1:	24 00                	and    al,0x0
    12f3:	0b 0b                	or     ecx,DWORD PTR [ebx]
    12f5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    12f8:	0e                   	push   cs
    12f9:	00 00                	add    BYTE PTR [eax],al
    12fb:	04 2e                	add    al,0x2e
    12fd:	01 3f                	add    DWORD PTR [edi],edi
    12ff:	19 03                	sbb    DWORD PTR [ebx],eax
    1301:	0e                   	push   cs
    1302:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1304:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1306:	27                   	daa    
    1307:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    130a:	11 01                	adc    DWORD PTR [ecx],eax
    130c:	12 06                	adc    al,BYTE PTR [esi]
    130e:	40                   	inc    eax
    130f:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1315:	00 00                	add    BYTE PTR [eax],al
    1317:	05 05 00 03 08       	add    eax,0x8030005
    131c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    131e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1320:	49                   	dec    ecx
    1321:	13 02                	adc    eax,DWORD PTR [edx]
    1323:	18 00                	sbb    BYTE PTR [eax],al
    1325:	00 06                	add    BYTE PTR [esi],al
    1327:	34 00                	xor    al,0x0
    1329:	03 08                	add    ecx,DWORD PTR [eax]
    132b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    132d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    132f:	49                   	dec    ecx
    1330:	13 02                	adc    eax,DWORD PTR [edx]
    1332:	18 00                	sbb    BYTE PTR [eax],al
    1334:	00 07                	add    BYTE PTR [edi],al
    1336:	0f 00 0b             	str    WORD PTR [ebx]
    1339:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    133c:	00 00                	add    BYTE PTR [eax],al
    133e:	08 26                	or     BYTE PTR [esi],ah
    1340:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1343:	00 00                	add    BYTE PTR [eax],al
    1345:	09 2e                	or     DWORD PTR [esi],ebp
    1347:	01 3f                	add    DWORD PTR [edi],edi
    1349:	19 03                	sbb    DWORD PTR [ebx],eax
    134b:	0e                   	push   cs
    134c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    134e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1350:	27                   	daa    
    1351:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1354:	11 01                	adc    DWORD PTR [ecx],eax
    1356:	12 06                	adc    al,BYTE PTR [esi]
    1358:	40                   	inc    eax
    1359:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    135f:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
    1365:	0b 3b                	or     edi,DWORD PTR [ebx]
    1367:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    136a:	02 18                	add    bl,BYTE PTR [eax]
    136c:	00 00                	add    BYTE PTR [eax],al
    136e:	00 01                	add    BYTE PTR [ecx],al
    1370:	11 01                	adc    DWORD PTR [ecx],eax
    1372:	25 0e 13 0b 03       	and    eax,0x30b130e
    1377:	0e                   	push   cs
    1378:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    137a:	11 01                	adc    DWORD PTR [ecx],eax
    137c:	12 06                	adc    al,BYTE PTR [esi]
    137e:	10 17                	adc    BYTE PTR [edi],dl
    1380:	00 00                	add    BYTE PTR [eax],al
    1382:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1385:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1387:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    138a:	0e                   	push   cs
    138b:	00 00                	add    BYTE PTR [eax],al
    138d:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1390:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1392:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1395:	08 00                	or     BYTE PTR [eax],al
    1397:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
    139a:	00 0b                	add    BYTE PTR [ebx],cl
    139c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    139f:	00 00                	add    BYTE PTR [eax],al
    13a1:	05 16 00 03 0e       	add    eax,0xe030016
    13a6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13a8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13aa:	49                   	dec    ecx
    13ab:	13 00                	adc    eax,DWORD PTR [eax]
    13ad:	00 06                	add    BYTE PTR [esi],al
    13af:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    13b2:	19 03                	sbb    DWORD PTR [ebx],eax
    13b4:	0e                   	push   cs
    13b5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13b7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13b9:	27                   	daa    
    13ba:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13bd:	11 01                	adc    DWORD PTR [ecx],eax
    13bf:	12 06                	adc    al,BYTE PTR [esi]
    13c1:	40                   	inc    eax
    13c2:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    13c8:	00 00                	add    BYTE PTR [eax],al
    13ca:	07                   	pop    es
    13cb:	05 00 03 08 3a       	add    eax,0x3a080300
    13d0:	0b 3b                	or     edi,DWORD PTR [ebx]
    13d2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    13d5:	02 18                	add    bl,BYTE PTR [eax]
    13d7:	00 00                	add    BYTE PTR [eax],al
    13d9:	08 2e                	or     BYTE PTR [esi],ch
    13db:	01 3f                	add    DWORD PTR [edi],edi
    13dd:	19 03                	sbb    DWORD PTR [ebx],eax
    13df:	0e                   	push   cs
    13e0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13e2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13e4:	27                   	daa    
    13e5:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13e8:	11 01                	adc    DWORD PTR [ecx],eax
    13ea:	12 06                	adc    al,BYTE PTR [esi]
    13ec:	40                   	inc    eax
    13ed:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    13f3:	00 00                	add    BYTE PTR [eax],al
    13f5:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    13f8:	03 08                	add    ecx,DWORD PTR [eax]
    13fa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13fc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13fe:	49                   	dec    ecx
    13ff:	13 02                	adc    eax,DWORD PTR [edx]
    1401:	18 00                	sbb    BYTE PTR [eax],al
    1403:	00 0a                	add    BYTE PTR [edx],cl
    1405:	34 00                	xor    al,0x0
    1407:	03 0e                	add    ecx,DWORD PTR [esi]
    1409:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    140b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    140d:	49                   	dec    ecx
    140e:	13 3f                	adc    edi,DWORD PTR [edi]
    1410:	19 02                	sbb    DWORD PTR [edx],eax
    1412:	18 00                	sbb    BYTE PTR [eax],al
    1414:	00 00                	add    BYTE PTR [eax],al
    1416:	01 11                	add    DWORD PTR [ecx],edx
    1418:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    141e:	0e                   	push   cs
    141f:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1421:	11 01                	adc    DWORD PTR [ecx],eax
    1423:	12 06                	adc    al,BYTE PTR [esi]
    1425:	10 17                	adc    BYTE PTR [edi],dl
    1427:	00 00                	add    BYTE PTR [eax],al
    1429:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    142c:	0b 0b                	or     ecx,DWORD PTR [ebx]
    142e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1431:	0e                   	push   cs
    1432:	00 00                	add    BYTE PTR [eax],al
    1434:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1437:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1439:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    143c:	08 00                	or     BYTE PTR [eax],al
    143e:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
    1441:	00 0b                	add    BYTE PTR [ebx],cl
    1443:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1446:	00 00                	add    BYTE PTR [eax],al
    1448:	05 16 00 03 0e       	add    eax,0xe030016
    144d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    144f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1451:	49                   	dec    ecx
    1452:	13 00                	adc    eax,DWORD PTR [eax]
    1454:	00 06                	add    BYTE PTR [esi],al
    1456:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    145a:	00 00                	add    BYTE PTR [eax],al
    145c:	07                   	pop    es
    145d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1460:	19 03                	sbb    DWORD PTR [ebx],eax
    1462:	0e                   	push   cs
    1463:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1465:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1467:	27                   	daa    
    1468:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    146b:	11 01                	adc    DWORD PTR [ecx],eax
    146d:	12 06                	adc    al,BYTE PTR [esi]
    146f:	40                   	inc    eax
    1470:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1476:	00 00                	add    BYTE PTR [eax],al
    1478:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    147e:	0b 3b                	or     edi,DWORD PTR [ebx]
    1480:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1483:	02 18                	add    bl,BYTE PTR [eax]
    1485:	00 00                	add    BYTE PTR [eax],al
    1487:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    148a:	03 08                	add    ecx,DWORD PTR [eax]
    148c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    148e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1490:	49                   	dec    ecx
    1491:	13 02                	adc    eax,DWORD PTR [edx]
    1493:	18 00                	sbb    BYTE PTR [eax],al
    1495:	00 0a                	add    BYTE PTR [edx],cl
    1497:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    149a:	19 03                	sbb    DWORD PTR [ebx],eax
    149c:	0e                   	push   cs
    149d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    149f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14a1:	27                   	daa    
    14a2:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    14a5:	11 01                	adc    DWORD PTR [ecx],eax
    14a7:	12 06                	adc    al,BYTE PTR [esi]
    14a9:	40                   	inc    eax
    14aa:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    14b0:	00 00                	add    BYTE PTR [eax],al
    14b2:	0b 05 00 03 0e 3a    	or     eax,DWORD PTR ds:0x3a0e0300
    14b8:	0b 3b                	or     edi,DWORD PTR [ebx]
    14ba:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    14bd:	02 18                	add    bl,BYTE PTR [eax]
    14bf:	00 00                	add    BYTE PTR [eax],al
    14c1:	0c 34                	or     al,0x34
    14c3:	00 03                	add    BYTE PTR [ebx],al
    14c5:	0e                   	push   cs
    14c6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14c8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14ca:	49                   	dec    ecx
    14cb:	13 3f                	adc    edi,DWORD PTR [edi]
    14cd:	19 02                	sbb    DWORD PTR [edx],eax
    14cf:	18 00                	sbb    BYTE PTR [eax],al
    14d1:	00 00                	add    BYTE PTR [eax],al
    14d3:	01 11                	add    DWORD PTR [ecx],edx
    14d5:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    14db:	0e                   	push   cs
    14dc:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    14de:	11 01                	adc    DWORD PTR [ecx],eax
    14e0:	12 06                	adc    al,BYTE PTR [esi]
    14e2:	10 17                	adc    BYTE PTR [edi],dl
    14e4:	00 00                	add    BYTE PTR [eax],al
    14e6:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    14e9:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14eb:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14ee:	08 00                	or     BYTE PTR [eax],al
    14f0:	00 03                	add    BYTE PTR [ebx],al
    14f2:	16                   	push   ss
    14f3:	00 03                	add    BYTE PTR [ebx],al
    14f5:	0e                   	push   cs
    14f6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14f8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14fa:	49                   	dec    ecx
    14fb:	13 00                	adc    eax,DWORD PTR [eax]
    14fd:	00 04 24             	add    BYTE PTR [esp],al
    1500:	00 0b                	add    BYTE PTR [ebx],cl
    1502:	0b 3e                	or     edi,DWORD PTR [esi]
    1504:	0b 03                	or     eax,DWORD PTR [ebx]
    1506:	0e                   	push   cs
    1507:	00 00                	add    BYTE PTR [eax],al
    1509:	05 2e 01 3f 19       	add    eax,0x193f012e
    150e:	03 0e                	add    ecx,DWORD PTR [esi]
    1510:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1512:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1514:	27                   	daa    
    1515:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1518:	11 01                	adc    DWORD PTR [ecx],eax
    151a:	12 06                	adc    al,BYTE PTR [esi]
    151c:	40                   	inc    eax
    151d:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1523:	00 00                	add    BYTE PTR [eax],al
    1525:	06                   	push   es
    1526:	05 00 03 08 3a       	add    eax,0x3a080300
    152b:	0b 3b                	or     edi,DWORD PTR [ebx]
    152d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1530:	02 18                	add    bl,BYTE PTR [eax]
    1532:	00 00                	add    BYTE PTR [eax],al
    1534:	07                   	pop    es
    1535:	0f 00 0b             	str    WORD PTR [ebx]
    1538:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    153b:	00 00                	add    BYTE PTR [eax],al
    153d:	08 26                	or     BYTE PTR [esi],ah
    153f:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1542:	00 00                	add    BYTE PTR [eax],al
    1544:	09 2e                	or     DWORD PTR [esi],ebp
    1546:	01 3f                	add    DWORD PTR [edi],edi
    1548:	19 03                	sbb    DWORD PTR [ebx],eax
    154a:	0e                   	push   cs
    154b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    154d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    154f:	27                   	daa    
    1550:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1553:	11 01                	adc    DWORD PTR [ecx],eax
    1555:	12 06                	adc    al,BYTE PTR [esi]
    1557:	40                   	inc    eax
    1558:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    155e:	00 01                	add    BYTE PTR [ecx],al
    1560:	11 01                	adc    DWORD PTR [ecx],eax
    1562:	25 0e 13 0b 03       	and    eax,0x30b130e
    1567:	0e                   	push   cs
    1568:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    156a:	11 01                	adc    DWORD PTR [ecx],eax
    156c:	12 06                	adc    al,BYTE PTR [esi]
    156e:	10 17                	adc    BYTE PTR [edi],dl
    1570:	00 00                	add    BYTE PTR [eax],al
    1572:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1575:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1577:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    157a:	08 00                	or     BYTE PTR [eax],al
    157c:	00 03                	add    BYTE PTR [ebx],al
    157e:	16                   	push   ss
    157f:	00 03                	add    BYTE PTR [ebx],al
    1581:	0e                   	push   cs
    1582:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1584:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1586:	49                   	dec    ecx
    1587:	13 00                	adc    eax,DWORD PTR [eax]
    1589:	00 04 24             	add    BYTE PTR [esp],al
    158c:	00 0b                	add    BYTE PTR [ebx],cl
    158e:	0b 3e                	or     edi,DWORD PTR [esi]
    1590:	0b 03                	or     eax,DWORD PTR [ebx]
    1592:	0e                   	push   cs
    1593:	00 00                	add    BYTE PTR [eax],al
    1595:	05 2e 01 3f 19       	add    eax,0x193f012e
    159a:	03 0e                	add    ecx,DWORD PTR [esi]
    159c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    159e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15a0:	27                   	daa    
    15a1:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    15a4:	11 01                	adc    DWORD PTR [ecx],eax
    15a6:	12 06                	adc    al,BYTE PTR [esi]
    15a8:	40                   	inc    eax
    15a9:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    15af:	00 00                	add    BYTE PTR [eax],al
    15b1:	06                   	push   es
    15b2:	05 00 03 08 3a       	add    eax,0x3a080300
    15b7:	0b 3b                	or     edi,DWORD PTR [ebx]
    15b9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    15bc:	02 18                	add    bl,BYTE PTR [eax]
    15be:	00 00                	add    BYTE PTR [eax],al
    15c0:	07                   	pop    es
    15c1:	34 00                	xor    al,0x0
    15c3:	03 08                	add    ecx,DWORD PTR [eax]
    15c5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15c7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15c9:	49                   	dec    ecx
    15ca:	13 02                	adc    eax,DWORD PTR [edx]
    15cc:	18 00                	sbb    BYTE PTR [eax],al
    15ce:	00 08                	add    BYTE PTR [eax],cl
    15d0:	0f 00 0b             	str    WORD PTR [ebx]
    15d3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    15d6:	00 00                	add    BYTE PTR [eax],al
    15d8:	09 26                	or     DWORD PTR [esi],esp
    15da:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    15dd:	00 00                	add    BYTE PTR [eax],al
    15df:	0a 2e                	or     ch,BYTE PTR [esi]
    15e1:	01 3f                	add    DWORD PTR [edi],edi
    15e3:	19 03                	sbb    DWORD PTR [ebx],eax
    15e5:	0e                   	push   cs
    15e6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15e8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15ea:	27                   	daa    
    15eb:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    15ee:	11 01                	adc    DWORD PTR [ecx],eax
    15f0:	12 06                	adc    al,BYTE PTR [esi]
    15f2:	40                   	inc    eax
    15f3:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
    15f9:	00 01                	add    BYTE PTR [ecx],al
    15fb:	11 01                	adc    DWORD PTR [ecx],eax
    15fd:	25 0e 13 0b 03       	and    eax,0x30b130e
    1602:	0e                   	push   cs
    1603:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1605:	11 01                	adc    DWORD PTR [ecx],eax
    1607:	12 06                	adc    al,BYTE PTR [esi]
    1609:	10 17                	adc    BYTE PTR [edi],dl
    160b:	00 00                	add    BYTE PTR [eax],al
    160d:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1610:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1612:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1615:	08 00                	or     BYTE PTR [eax],al
    1617:	00 03                	add    BYTE PTR [ebx],al
    1619:	24 00                	and    al,0x0
    161b:	0b 0b                	or     ecx,DWORD PTR [ebx]
    161d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1620:	0e                   	push   cs
    1621:	00 00                	add    BYTE PTR [eax],al
    1623:	04 2e                	add    al,0x2e
    1625:	01 3f                	add    DWORD PTR [edi],edi
    1627:	19 03                	sbb    DWORD PTR [ebx],eax
    1629:	0e                   	push   cs
    162a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    162c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    162e:	27                   	daa    
    162f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1632:	11 01                	adc    DWORD PTR [ecx],eax
    1634:	12 06                	adc    al,BYTE PTR [esi]
    1636:	40                   	inc    eax
    1637:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    163d:	00 00                	add    BYTE PTR [eax],al
    163f:	05 05 00 03 0e       	add    eax,0xe030005
    1644:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1646:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1648:	49                   	dec    ecx
    1649:	13 02                	adc    eax,DWORD PTR [edx]
    164b:	18 00                	sbb    BYTE PTR [eax],al
    164d:	00 06                	add    BYTE PTR [esi],al
    164f:	34 00                	xor    al,0x0
    1651:	03 08                	add    ecx,DWORD PTR [eax]
    1653:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1655:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1657:	49                   	dec    ecx
    1658:	13 02                	adc    eax,DWORD PTR [edx]
    165a:	18 00                	sbb    BYTE PTR [eax],al
    165c:	00 07                	add    BYTE PTR [edi],al
    165e:	34 00                	xor    al,0x0
    1660:	03 0e                	add    ecx,DWORD PTR [esi]
    1662:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1664:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1666:	49                   	dec    ecx
    1667:	13 00                	adc    eax,DWORD PTR [eax]
    1669:	00 08                	add    BYTE PTR [eax],cl
    166b:	34 00                	xor    al,0x0
    166d:	03 08                	add    ecx,DWORD PTR [eax]
    166f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1671:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1673:	49                   	dec    ecx
    1674:	13 00                	adc    eax,DWORD PTR [eax]
    1676:	00 09                	add    BYTE PTR [ecx],cl
    1678:	34 00                	xor    al,0x0
    167a:	03 0e                	add    ecx,DWORD PTR [esi]
    167c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    167e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1680:	49                   	dec    ecx
    1681:	13 02                	adc    eax,DWORD PTR [edx]
    1683:	18 00                	sbb    BYTE PTR [eax],al
    1685:	00 0a                	add    BYTE PTR [edx],cl
    1687:	0f 00 0b             	str    WORD PTR [ebx]
    168a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    168d:	00 00                	add    BYTE PTR [eax],al
    168f:	0b 26                	or     esp,DWORD PTR [esi]
    1691:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1694:	00 00                	add    BYTE PTR [eax],al
    1696:	00 01                	add    BYTE PTR [ecx],al
    1698:	11 01                	adc    DWORD PTR [ecx],eax
    169a:	25 0e 13 0b 03       	and    eax,0x30b130e
    169f:	0e                   	push   cs
    16a0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    16a2:	11 01                	adc    DWORD PTR [ecx],eax
    16a4:	12 06                	adc    al,BYTE PTR [esi]
    16a6:	10 17                	adc    BYTE PTR [edi],dl
    16a8:	00 00                	add    BYTE PTR [eax],al
    16aa:	02 2e                	add    ch,BYTE PTR [esi]
    16ac:	01 3f                	add    DWORD PTR [edi],edi
    16ae:	19 03                	sbb    DWORD PTR [ebx],eax
    16b0:	0e                   	push   cs
    16b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    16b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16b5:	27                   	daa    
    16b6:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    16b9:	11 01                	adc    DWORD PTR [ecx],eax
    16bb:	12 06                	adc    al,BYTE PTR [esi]
    16bd:	40                   	inc    eax
    16be:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    16c4:	00 00                	add    BYTE PTR [eax],al
    16c6:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
    16cc:	0b 3b                	or     edi,DWORD PTR [ebx]
    16ce:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    16d1:	02 18                	add    bl,BYTE PTR [eax]
    16d3:	00 00                	add    BYTE PTR [eax],al
    16d5:	04 0f                	add    al,0xf
    16d7:	00 0b                	add    BYTE PTR [ebx],cl
    16d9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    16dc:	00 00                	add    BYTE PTR [eax],al
    16de:	05 24 00 0b 0b       	add    eax,0xb0b0024
    16e3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    16e6:	0e                   	push   cs
    16e7:	00 00                	add    BYTE PTR [eax],al
    16e9:	06                   	push   es
    16ea:	24 00                	and    al,0x0
    16ec:	0b 0b                	or     ecx,DWORD PTR [ebx]
    16ee:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    16f1:	08 00                	or     BYTE PTR [eax],al
    16f3:	00 00                	add    BYTE PTR [eax],al
    16f5:	01 11                	add    DWORD PTR [ecx],edx
    16f7:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    16fd:	0e                   	push   cs
    16fe:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1700:	11 01                	adc    DWORD PTR [ecx],eax
    1702:	12 06                	adc    al,BYTE PTR [esi]
    1704:	10 17                	adc    BYTE PTR [edi],dl
    1706:	00 00                	add    BYTE PTR [eax],al
    1708:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    170b:	0b 0b                	or     ecx,DWORD PTR [ebx]
    170d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1710:	08 00                	or     BYTE PTR [eax],al
    1712:	00 03                	add    BYTE PTR [ebx],al
    1714:	24 00                	and    al,0x0
    1716:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1718:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    171b:	0e                   	push   cs
    171c:	00 00                	add    BYTE PTR [eax],al
    171e:	04 2e                	add    al,0x2e
    1720:	01 3f                	add    DWORD PTR [edi],edi
    1722:	19 03                	sbb    DWORD PTR [ebx],eax
    1724:	0e                   	push   cs
    1725:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1727:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1729:	27                   	daa    
    172a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    172d:	11 01                	adc    DWORD PTR [ecx],eax
    172f:	12 06                	adc    al,BYTE PTR [esi]
    1731:	40                   	inc    eax
    1732:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1738:	00 00                	add    BYTE PTR [eax],al
    173a:	05 05 00 03 0e       	add    eax,0xe030005
    173f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1741:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1743:	49                   	dec    ecx
    1744:	13 02                	adc    eax,DWORD PTR [edx]
    1746:	18 00                	sbb    BYTE PTR [eax],al
    1748:	00 06                	add    BYTE PTR [esi],al
    174a:	34 00                	xor    al,0x0
    174c:	03 08                	add    ecx,DWORD PTR [eax]
    174e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1750:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1752:	49                   	dec    ecx
    1753:	13 02                	adc    eax,DWORD PTR [edx]
    1755:	18 00                	sbb    BYTE PTR [eax],al
    1757:	00 07                	add    BYTE PTR [edi],al
    1759:	34 00                	xor    al,0x0
    175b:	03 0e                	add    ecx,DWORD PTR [esi]
    175d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    175f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1761:	49                   	dec    ecx
    1762:	13 00                	adc    eax,DWORD PTR [eax]
    1764:	00 08                	add    BYTE PTR [eax],cl
    1766:	34 00                	xor    al,0x0
    1768:	03 08                	add    ecx,DWORD PTR [eax]
    176a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    176c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    176e:	49                   	dec    ecx
    176f:	13 00                	adc    eax,DWORD PTR [eax]
    1771:	00 09                	add    BYTE PTR [ecx],cl
    1773:	0f 00 0b             	str    WORD PTR [ebx]
    1776:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1779:	00 00                	add    BYTE PTR [eax],al
    177b:	0a 26                	or     ah,BYTE PTR [esi]
    177d:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1780:	00 00                	add    BYTE PTR [eax],al
    1782:	00 01                	add    BYTE PTR [ecx],al
    1784:	11 01                	adc    DWORD PTR [ecx],eax
    1786:	25 0e 13 0b 03       	and    eax,0x30b130e
    178b:	0e                   	push   cs
    178c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    178e:	11 01                	adc    DWORD PTR [ecx],eax
    1790:	12 06                	adc    al,BYTE PTR [esi]
    1792:	10 17                	adc    BYTE PTR [edi],dl
    1794:	00 00                	add    BYTE PTR [eax],al
    1796:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1799:	0b 0b                	or     ecx,DWORD PTR [ebx]
    179b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    179e:	08 00                	or     BYTE PTR [eax],al
    17a0:	00 03                	add    BYTE PTR [ebx],al
    17a2:	24 00                	and    al,0x0
    17a4:	0b 0b                	or     ecx,DWORD PTR [ebx]
    17a6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    17a9:	0e                   	push   cs
    17aa:	00 00                	add    BYTE PTR [eax],al
    17ac:	04 2e                	add    al,0x2e
    17ae:	01 3f                	add    DWORD PTR [edi],edi
    17b0:	19 03                	sbb    DWORD PTR [ebx],eax
    17b2:	0e                   	push   cs
    17b3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17b5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17b7:	27                   	daa    
    17b8:	19 11                	sbb    DWORD PTR [ecx],edx
    17ba:	01 12                	add    DWORD PTR [edx],edx
    17bc:	06                   	push   es
    17bd:	40                   	inc    eax
    17be:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    17c4:	00 00                	add    BYTE PTR [eax],al
    17c6:	05 05 00 03 0e       	add    eax,0xe030005
    17cb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17cd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17cf:	49                   	dec    ecx
    17d0:	13 02                	adc    eax,DWORD PTR [edx]
    17d2:	18 00                	sbb    BYTE PTR [eax],al
    17d4:	00 06                	add    BYTE PTR [esi],al
    17d6:	34 00                	xor    al,0x0
    17d8:	03 08                	add    ecx,DWORD PTR [eax]
    17da:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17dc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17de:	49                   	dec    ecx
    17df:	13 02                	adc    eax,DWORD PTR [edx]
    17e1:	18 00                	sbb    BYTE PTR [eax],al
    17e3:	00 07                	add    BYTE PTR [edi],al
    17e5:	0f 00 0b             	str    WORD PTR [ebx]
    17e8:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    17eb:	00 00                	add    BYTE PTR [eax],al
    17ed:	08 2e                	or     BYTE PTR [esi],ch
    17ef:	01 3f                	add    DWORD PTR [edi],edi
    17f1:	19 03                	sbb    DWORD PTR [ebx],eax
    17f3:	0e                   	push   cs
    17f4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17f6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17f8:	27                   	daa    
    17f9:	19 11                	sbb    DWORD PTR [ecx],edx
    17fb:	01 12                	add    DWORD PTR [edx],edx
    17fd:	06                   	push   es
    17fe:	40                   	inc    eax
    17ff:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
    1805:	00 01                	add    BYTE PTR [ecx],al
    1807:	11 01                	adc    DWORD PTR [ecx],eax
    1809:	25 0e 13 0b 03       	and    eax,0x30b130e
    180e:	0e                   	push   cs
    180f:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1811:	11 01                	adc    DWORD PTR [ecx],eax
    1813:	12 06                	adc    al,BYTE PTR [esi]
    1815:	10 17                	adc    BYTE PTR [edi],dl
    1817:	00 00                	add    BYTE PTR [eax],al
    1819:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    181c:	0b 0b                	or     ecx,DWORD PTR [ebx]
    181e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1821:	08 00                	or     BYTE PTR [eax],al
    1823:	00 03                	add    BYTE PTR [ebx],al
    1825:	16                   	push   ss
    1826:	00 03                	add    BYTE PTR [ebx],al
    1828:	0e                   	push   cs
    1829:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    182b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    182d:	49                   	dec    ecx
    182e:	13 00                	adc    eax,DWORD PTR [eax]
    1830:	00 04 24             	add    BYTE PTR [esp],al
    1833:	00 0b                	add    BYTE PTR [ebx],cl
    1835:	0b 3e                	or     edi,DWORD PTR [esi]
    1837:	0b 03                	or     eax,DWORD PTR [ebx]
    1839:	0e                   	push   cs
    183a:	00 00                	add    BYTE PTR [eax],al
    183c:	05 0f 00 0b 0b       	add    eax,0xb0b000f
    1841:	49                   	dec    ecx
    1842:	13 00                	adc    eax,DWORD PTR [eax]
    1844:	00 06                	add    BYTE PTR [esi],al
    1846:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    184a:	00 00                	add    BYTE PTR [eax],al
    184c:	07                   	pop    es
    184d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1850:	19 03                	sbb    DWORD PTR [ebx],eax
    1852:	0e                   	push   cs
    1853:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1855:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1857:	27                   	daa    
    1858:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    185b:	11 01                	adc    DWORD PTR [ecx],eax
    185d:	12 06                	adc    al,BYTE PTR [esi]
    185f:	40                   	inc    eax
    1860:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1866:	00 00                	add    BYTE PTR [eax],al
    1868:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    186e:	0b 3b                	or     edi,DWORD PTR [ebx]
    1870:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1873:	02 18                	add    bl,BYTE PTR [eax]
    1875:	00 00                	add    BYTE PTR [eax],al
    1877:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
    187d:	0b 3b                	or     edi,DWORD PTR [ebx]
    187f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1882:	02 18                	add    bl,BYTE PTR [eax]
    1884:	00 00                	add    BYTE PTR [eax],al
    1886:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
    1889:	03 0e                	add    ecx,DWORD PTR [esi]
    188b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    188d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    188f:	49                   	dec    ecx
    1890:	13 02                	adc    eax,DWORD PTR [edx]
    1892:	18 00                	sbb    BYTE PTR [eax],al
    1894:	00 0b                	add    BYTE PTR [ebx],cl
    1896:	34 00                	xor    al,0x0
    1898:	03 0e                	add    ecx,DWORD PTR [esi]
    189a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    189c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    189e:	49                   	dec    ecx
    189f:	13 3f                	adc    edi,DWORD PTR [edi]
    18a1:	19 02                	sbb    DWORD PTR [edx],eax
    18a3:	18 00                	sbb    BYTE PTR [eax],al
    18a5:	00 00                	add    BYTE PTR [eax],al
    18a7:	01 11                	add    DWORD PTR [ecx],edx
    18a9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    18af:	0e                   	push   cs
    18b0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    18b2:	11 01                	adc    DWORD PTR [ecx],eax
    18b4:	12 06                	adc    al,BYTE PTR [esi]
    18b6:	10 17                	adc    BYTE PTR [edi],dl
    18b8:	00 00                	add    BYTE PTR [eax],al
    18ba:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    18bd:	0b 0b                	or     ecx,DWORD PTR [ebx]
    18bf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    18c2:	08 00                	or     BYTE PTR [eax],al
    18c4:	00 03                	add    BYTE PTR [ebx],al
    18c6:	24 00                	and    al,0x0
    18c8:	0b 0b                	or     ecx,DWORD PTR [ebx]
    18ca:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    18cd:	0e                   	push   cs
    18ce:	00 00                	add    BYTE PTR [eax],al
    18d0:	04 0f                	add    al,0xf
    18d2:	00 0b                	add    BYTE PTR [ebx],cl
    18d4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    18d7:	00 00                	add    BYTE PTR [eax],al
    18d9:	05 2e 01 3f 19       	add    eax,0x193f012e
    18de:	03 0e                	add    ecx,DWORD PTR [esi]
    18e0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    18e2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    18e4:	27                   	daa    
    18e5:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    18e8:	11 01                	adc    DWORD PTR [ecx],eax
    18ea:	12 06                	adc    al,BYTE PTR [esi]
    18ec:	40                   	inc    eax
    18ed:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    18f3:	00 00                	add    BYTE PTR [eax],al
    18f5:	06                   	push   es
    18f6:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    18fb:	0b 3b                	or     edi,DWORD PTR [ebx]
    18fd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1900:	02 18                	add    bl,BYTE PTR [eax]
    1902:	00 00                	add    BYTE PTR [eax],al
    1904:	07                   	pop    es
    1905:	34 00                	xor    al,0x0
    1907:	03 08                	add    ecx,DWORD PTR [eax]
    1909:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    190b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    190d:	49                   	dec    ecx
    190e:	13 02                	adc    eax,DWORD PTR [edx]
    1910:	18 00                	sbb    BYTE PTR [eax],al
    1912:	00 08                	add    BYTE PTR [eax],cl
    1914:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1918:	00 00                	add    BYTE PTR [eax],al
    191a:	09 2e                	or     DWORD PTR [esi],ebp
    191c:	01 3f                	add    DWORD PTR [edi],edi
    191e:	19 03                	sbb    DWORD PTR [ebx],eax
    1920:	0e                   	push   cs
    1921:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1923:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1925:	27                   	daa    
    1926:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1929:	11 01                	adc    DWORD PTR [ecx],eax
    192b:	12 06                	adc    al,BYTE PTR [esi]
    192d:	40                   	inc    eax
    192e:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1934:	00 00                	add    BYTE PTR [eax],al
    1936:	0a 01                	or     al,BYTE PTR [ecx]
    1938:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
    193b:	01 13                	add    DWORD PTR [ebx],edx
    193d:	00 00                	add    BYTE PTR [eax],al
    193f:	0b 21                	or     esp,DWORD PTR [ecx]
    1941:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1944:	2f                   	das    
    1945:	0b 00                	or     eax,DWORD PTR [eax]
    1947:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    194a:	00 03                	add    BYTE PTR [ebx],al
    194c:	0e                   	push   cs
    194d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    194f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1951:	49                   	dec    ecx
    1952:	13 02                	adc    eax,DWORD PTR [edx]
    1954:	18 00                	sbb    BYTE PTR [eax],al
    1956:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    195c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    195e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1960:	49                   	dec    ecx
    1961:	13 3f                	adc    edi,DWORD PTR [edi]
    1963:	19 02                	sbb    DWORD PTR [edx],eax
    1965:	18 00                	sbb    BYTE PTR [eax],al
    1967:	00 00                	add    BYTE PTR [eax],al
    1969:	01 11                	add    DWORD PTR [ecx],edx
    196b:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1971:	0e                   	push   cs
    1972:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1974:	11 01                	adc    DWORD PTR [ecx],eax
    1976:	12 06                	adc    al,BYTE PTR [esi]
    1978:	10 17                	adc    BYTE PTR [edi],dl
    197a:	00 00                	add    BYTE PTR [eax],al
    197c:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    197f:	03 0e                	add    ecx,DWORD PTR [esi]
    1981:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1983:	49                   	dec    ecx
    1984:	13 3a                	adc    edi,DWORD PTR [edx]
    1986:	0b 3b                	or     edi,DWORD PTR [ebx]
    1988:	0b 01                	or     eax,DWORD PTR [ecx]
    198a:	13 00                	adc    eax,DWORD PTR [eax]
    198c:	00 03                	add    BYTE PTR [ebx],al
    198e:	28 00                	sub    BYTE PTR [eax],al
    1990:	03 0e                	add    ecx,DWORD PTR [esi]
    1992:	1c 0b                	sbb    al,0xb
    1994:	00 00                	add    BYTE PTR [eax],al
    1996:	04 28                	add    al,0x28
    1998:	00 03                	add    BYTE PTR [ebx],al
    199a:	0e                   	push   cs
    199b:	1c 05                	sbb    al,0x5
    199d:	00 00                	add    BYTE PTR [eax],al
    199f:	05 24 00 0b 0b       	add    eax,0xb0b0024
    19a4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    19a7:	0e                   	push   cs
    19a8:	00 00                	add    BYTE PTR [eax],al
    19aa:	06                   	push   es
    19ab:	24 00                	and    al,0x0
    19ad:	0b 0b                	or     ecx,DWORD PTR [ebx]
    19af:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    19b2:	08 00                	or     BYTE PTR [eax],al
    19b4:	00 07                	add    BYTE PTR [edi],al
    19b6:	0f 00 0b             	str    WORD PTR [ebx]
    19b9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    19bc:	00 00                	add    BYTE PTR [eax],al
    19be:	08 16                	or     BYTE PTR [esi],dl
    19c0:	00 03                	add    BYTE PTR [ebx],al
    19c2:	0e                   	push   cs
    19c3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    19c5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    19c7:	49                   	dec    ecx
    19c8:	13 00                	adc    eax,DWORD PTR [eax]
    19ca:	00 09                	add    BYTE PTR [ecx],cl
    19cc:	13 01                	adc    eax,DWORD PTR [ecx]
    19ce:	03 08                	add    ecx,DWORD PTR [eax]
    19d0:	0b 0b                	or     ecx,DWORD PTR [ebx]
    19d2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    19d4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    19d6:	01 13                	add    DWORD PTR [ebx],edx
    19d8:	00 00                	add    BYTE PTR [eax],al
    19da:	0a 0d 00 03 0e 3a    	or     cl,BYTE PTR ds:0x3a0e0300
    19e0:	0b 3b                	or     edi,DWORD PTR [ebx]
    19e2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    19e5:	38 0b                	cmp    BYTE PTR [ebx],cl
    19e7:	00 00                	add    BYTE PTR [eax],al
    19e9:	0b 26                	or     esp,DWORD PTR [esi]
    19eb:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    19ee:	00 00                	add    BYTE PTR [eax],al
    19f0:	0c 2e                	or     al,0x2e
    19f2:	01 3f                	add    DWORD PTR [edi],edi
    19f4:	19 03                	sbb    DWORD PTR [ebx],eax
    19f6:	0e                   	push   cs
    19f7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    19f9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    19fb:	49                   	dec    ecx
    19fc:	13 11                	adc    edx,DWORD PTR [ecx]
    19fe:	01 12                	add    DWORD PTR [edx],edx
    1a00:	06                   	push   es
    1a01:	40                   	inc    eax
    1a02:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1a08:	00 00                	add    BYTE PTR [eax],al
    1a0a:	0d 34 00 03 0e       	or     eax,0xe030034
    1a0f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1a11:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1a13:	49                   	dec    ecx
    1a14:	13 02                	adc    eax,DWORD PTR [edx]
    1a16:	18 00                	sbb    BYTE PTR [eax],al
    1a18:	00 0e                	add    BYTE PTR [esi],cl
    1a1a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1a1d:	19 03                	sbb    DWORD PTR [ebx],eax
    1a1f:	0e                   	push   cs
    1a20:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1a22:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1a24:	27                   	daa    
    1a25:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1a28:	11 01                	adc    DWORD PTR [ecx],eax
    1a2a:	12 06                	adc    al,BYTE PTR [esi]
    1a2c:	40                   	inc    eax
    1a2d:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1a33:	00 00                	add    BYTE PTR [eax],al
    1a35:	0f 05                	syscall 
    1a37:	00 03                	add    BYTE PTR [ebx],al
    1a39:	0e                   	push   cs
    1a3a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1a3c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1a3e:	49                   	dec    ecx
    1a3f:	13 02                	adc    eax,DWORD PTR [edx]
    1a41:	18 00                	sbb    BYTE PTR [eax],al
    1a43:	00 10                	add    BYTE PTR [eax],dl
    1a45:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1a48:	19 03                	sbb    DWORD PTR [ebx],eax
    1a4a:	0e                   	push   cs
    1a4b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1a4d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1a4f:	27                   	daa    
    1a50:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1a53:	11 01                	adc    DWORD PTR [ecx],eax
    1a55:	12 06                	adc    al,BYTE PTR [esi]
    1a57:	40                   	inc    eax
    1a58:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1a5e:	00 00                	add    BYTE PTR [eax],al
    1a60:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    1a63:	03 08                	add    ecx,DWORD PTR [eax]
    1a65:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1a67:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1a69:	49                   	dec    ecx
    1a6a:	13 02                	adc    eax,DWORD PTR [edx]
    1a6c:	18 00                	sbb    BYTE PTR [eax],al
    1a6e:	00 12                	add    BYTE PTR [edx],dl
    1a70:	34 00                	xor    al,0x0
    1a72:	03 0e                	add    ecx,DWORD PTR [esi]
    1a74:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1a76:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1a78:	49                   	dec    ecx
    1a79:	13 3f                	adc    edi,DWORD PTR [edi]
    1a7b:	19 02                	sbb    DWORD PTR [edx],eax
    1a7d:	18 00                	sbb    BYTE PTR [eax],al
    1a7f:	00 13                	add    BYTE PTR [ebx],dl
    1a81:	01 01                	add    DWORD PTR [ecx],eax
    1a83:	49                   	dec    ecx
    1a84:	13 01                	adc    eax,DWORD PTR [ecx]
    1a86:	13 00                	adc    eax,DWORD PTR [eax]
    1a88:	00 14 21             	add    BYTE PTR [ecx+eiz*1],dl
    1a8b:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1a8e:	2f                   	das    
    1a8f:	0b 00                	or     eax,DWORD PTR [eax]
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:15
.globl  _modfasm
.type _modfasm, @function

modfasm:
_modfasm:
                push    ebp
   0:	1c 00                	sbb    al,0x0
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:16
                mov     ebp,esp
   2:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:18
                push    edi                     # Save register edi
                fldd    [ebp+8]           # Load real from stack
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:19
                mov     edi,dword [ebp+16]      # Put integer address in edi
   8:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:20
                fld    st(0)                     # Duplicate st
   a:	04 00                	add    al,0x0
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:21
                frndint                         # Round to integer
   c:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:22
                fcom    st(1)                     # Compare with orignal value
   e:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:23
                fstsw   ax                      # Get the FPU status word
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
	...
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:28
                testd    byte [ebp+15],0x80      # Test if number is negative
                jz      __fmodf1                # Re-direct if positive
                sahf                            # Store AH to flags
                jnb     __fmodf2                # Re-direct if greater or equal
                fld1                            # Load the constant 1
  20:	1c 00                	sbb    al,0x0
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:29
                fadd                            # Increment integer part
  22:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:30
                jmp     __fmodf2                # End of case
  24:	02 00                	add    al,BYTE PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:32
__fmodf1:       sahf                            # Store AH to flags
                jna     __fmodf2                # Re-direct if less or equal
  26:	0d 01 00 00 04       	or     eax,0x4000001
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:34
                fld1                            # Load constant 1
                fsub                            # Decrement integer part
  2b:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:35
__fmodf2:       fstd     [edi]             # Store integer part
  2d:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:36
                fsub                            # Subtract to get fraction
  2f:	00 70 00             	add    BYTE PTR [eax+0x0],dh
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:38
                pop     edi                     # Restore register edi
                mov     esp,ebp                 # Restore stack pointer
  32:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
	...
  40:	1c 00                	sbb    al,0x0
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	59                   	pop    ecx
  47:	02 00                	add    al,BYTE PTR [eax]
  49:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  4c:	00 00                	add    BYTE PTR [eax],al
  4e:	00 00                	add    BYTE PTR [eax],al
  50:	1c 01                	sbb    al,0x1
  52:	00 9f 2e 01 00 00    	add    BYTE PTR [edi+0x12e],bl
	...
  60:	1c 00                	sbb    al,0x0
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	99                   	cdq    
  67:	03 00                	add    eax,DWORD PTR [eax]
  69:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	4c                   	dec    esp
  71:	02 00                	add    al,BYTE PTR [eax]
  73:	9f                   	lahf   
  74:	65 02 00             	add    al,BYTE PTR gs:[eax]
	...
  7f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	85 05 00 00 04 00    	test   DWORD PTR ds:0x40000,eax
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	b4 04                	mov    ah,0x4
  92:	00 9f 6e 01 00 00    	add    BYTE PTR [edi+0x16e],bl
	...
  a0:	1c 00                	sbb    al,0x0
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	37                   	aaa    
  a7:	07                   	pop    es
  a8:	00 00                	add    BYTE PTR [eax],al
  aa:	04 00                	add    al,0x0
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	24 06                	and    al,0x6
  b2:	00 9f 41 04 00 00    	add    BYTE PTR [edi+0x441],bl
	...
  c0:	1c 00                	sbb    al,0x0
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	34 0b                	xor    al,0xb
  c8:	00 00                	add    BYTE PTR [eax],al
  ca:	04 00                	add    al,0x0
  cc:	00 00                	add    BYTE PTR [eax],al
  ce:	00 00                	add    BYTE PTR [eax],al
  d0:	68 0a 00 9f b8       	push   0xb89f000a
  d5:	08 00                	or     BYTE PTR [eax],al
	...
  df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	7c 14                	jl     fc <__fmodf2+0xd0>
  e8:	00 00                	add    BYTE PTR [eax],al
  ea:	04 00                	add    al,0x0
  ec:	00 00                	add    BYTE PTR [eax],al
  ee:	00 00                	add    BYTE PTR [eax],al
  f0:	20 13                	and    BYTE PTR [ebx],dl
  f2:	00 9f 69 01 00 00    	add    BYTE PTR [edi+0x169],bl
	...
 100:	1c 00                	sbb    al,0x0
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	1e                   	push   ds
 107:	17                   	pop    ss
 108:	00 00                	add    BYTE PTR [eax],al
 10a:	04 00                	add    al,0x0
 10c:	00 00                	add    BYTE PTR [eax],al
 10e:	00 00                	add    BYTE PTR [eax],al
 110:	8c 14 00             	mov    WORD PTR [eax+eax*1],ss
 113:	9f                   	lahf   
 114:	8c 0d 00 00 00 00    	mov    WORD PTR ds:0x0,cs
 11a:	00 00                	add    BYTE PTR [eax],al
 11c:	00 00                	add    BYTE PTR [eax],al
 11e:	00 00                	add    BYTE PTR [eax],al
 120:	1c 00                	sbb    al,0x0
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	20 23                	and    BYTE PTR [ebx],ah
 128:	00 00                	add    BYTE PTR [eax],al
 12a:	04 00                	add    al,0x0
 12c:	00 00                	add    BYTE PTR [eax],al
 12e:	00 00                	add    BYTE PTR [eax],al
 130:	18 22                	sbb    BYTE PTR [edx],ah
 132:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
	...
 140:	1c 00                	sbb    al,0x0
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	bf 25 00 00 04       	mov    edi,0x4000025
 14b:	00 00                	add    BYTE PTR [eax],al
 14d:	00 00                	add    BYTE PTR [eax],al
 14f:	00 8c 22 00 9f c2 06 	add    BYTE PTR [edx+eiz*1+0x6c29f00],cl
	...
 15e:	00 00                	add    BYTE PTR [eax],al
 160:	1c 00                	sbb    al,0x0
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	ce                   	into   
 167:	2a 00                	sub    al,BYTE PTR [eax]
 169:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 16c:	00 00                	add    BYTE PTR [eax],al
 16e:	00 00                	add    BYTE PTR [eax],al
 170:	50                   	push   eax
 171:	29 00                	sub    DWORD PTR [eax],eax
 173:	9f                   	lahf   
 174:	bb 01 00 00 00       	mov    ebx,0x1
 179:	00 00                	add    BYTE PTR [eax],al
 17b:	00 00                	add    BYTE PTR [eax],al
 17d:	00 00                	add    BYTE PTR [eax],al
 17f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 182:	00 00                	add    BYTE PTR [eax],al
 184:	02 00                	add    al,BYTE PTR [eax]
 186:	ba 2c 00 00 04       	mov    edx,0x400002c
 18b:	00 00                	add    BYTE PTR [eax],al
 18d:	00 00                	add    BYTE PTR [eax],al
 18f:	00 0c 2b             	add    BYTE PTR [ebx+ebp*1],cl
 192:	00 9f e7 00 00 00    	add    BYTE PTR [edi+0xe7],bl
	...
 1a0:	1c 00                	sbb    al,0x0
 1a2:	00 00                	add    BYTE PTR [eax],al
 1a4:	02 00                	add    al,BYTE PTR [eax]
 1a6:	5e                   	pop    esi
 1a7:	2e 00 00             	add    BYTE PTR cs:[eax],al
 1aa:	04 00                	add    al,0x0
	...
 1b4:	35 00 00 00 00       	xor    eax,0x0
 1b9:	00 00                	add    BYTE PTR [eax],al
 1bb:	00 00                	add    BYTE PTR [eax],al
 1bd:	00 00                	add    BYTE PTR [eax],al
 1bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 1c2:	00 00                	add    BYTE PTR [eax],al
 1c4:	02 00                	add    al,BYTE PTR [eax]
 1c6:	b6 2e                	mov    dh,0x2e
 1c8:	00 00                	add    BYTE PTR [eax],al
 1ca:	04 00                	add    al,0x0
 1cc:	00 00                	add    BYTE PTR [eax],al
 1ce:	00 00                	add    BYTE PTR [eax],al
 1d0:	f4                   	hlt    
 1d1:	2b 00                	sub    eax,DWORD PTR [eax]
 1d3:	9f                   	lahf   
 1d4:	57                   	push   edi
	...
 1dd:	00 00                	add    BYTE PTR [eax],al
 1df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 1e2:	00 00                	add    BYTE PTR [eax],al
 1e4:	02 00                	add    al,BYTE PTR [eax]
 1e6:	d2                   	(bad)  
 1e7:	30 00                	xor    BYTE PTR [eax],al
 1e9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 1ec:	00 00                	add    BYTE PTR [eax],al
 1ee:	00 00                	add    BYTE PTR [eax],al
 1f0:	4c                   	dec    esp
 1f1:	2c 00                	sub    al,0x0
 1f3:	9f                   	lahf   
 1f4:	16                   	push   ss
 1f5:	06                   	push   es
	...
 1fe:	00 00                	add    BYTE PTR [eax],al
 200:	1c 00                	sbb    al,0x0
 202:	00 00                	add    BYTE PTR [eax],al
 204:	02 00                	add    al,BYTE PTR [eax]
 206:	ad                   	lods   eax,DWORD PTR ds:[esi]
 207:	36 00 00             	add    BYTE PTR ss:[eax],al
 20a:	04 00                	add    al,0x0
 20c:	00 00                	add    BYTE PTR [eax],al
 20e:	00 00                	add    BYTE PTR [eax],al
 210:	64 32 00             	xor    al,BYTE PTR fs:[eax]
 213:	9f                   	lahf   
 214:	04 16                	add    al,0x16
	...
 21e:	00 00                	add    BYTE PTR [eax],al
 220:	1c 00                	sbb    al,0x0
 222:	00 00                	add    BYTE PTR [eax],al
 224:	02 00                	add    al,BYTE PTR [eax]
 226:	f2 40                	repnz inc eax
 228:	00 00                	add    BYTE PTR [eax],al
 22a:	04 00                	add    al,0x0
 22c:	00 00                	add    BYTE PTR [eax],al
 22e:	00 00                	add    BYTE PTR [eax],al
 230:	68 48 00 9f 84       	push   0x849f0048
	...
 23d:	00 00                	add    BYTE PTR [eax],al
 23f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 242:	00 00                	add    BYTE PTR [eax],al
 244:	02 00                	add    al,BYTE PTR [eax]
 246:	d2 41 00             	rol    BYTE PTR [ecx+0x0],cl
 249:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 24c:	00 00                	add    BYTE PTR [eax],al
 24e:	00 00                	add    BYTE PTR [eax],al
 250:	ec                   	in     al,dx
 251:	48                   	dec    eax
 252:	00 9f 58 01 00 00    	add    BYTE PTR [edi+0x158],bl
	...
 260:	1c 00                	sbb    al,0x0
 262:	00 00                	add    BYTE PTR [eax],al
 264:	02 00                	add    al,BYTE PTR [eax]
 266:	e2 43                	loop   2ab <__fmodf2+0x27f>
 268:	00 00                	add    BYTE PTR [eax],al
 26a:	04 00                	add    al,0x0
 26c:	00 00                	add    BYTE PTR [eax],al
 26e:	00 00                	add    BYTE PTR [eax],al
 270:	44                   	inc    esp
 271:	4a                   	dec    edx
 272:	00 9f 7b 00 00 00    	add    BYTE PTR [edi+0x7b],bl
	...
 280:	1c 00                	sbb    al,0x0
 282:	00 00                	add    BYTE PTR [eax],al
 284:	02 00                	add    al,BYTE PTR [eax]
 286:	7c 45                	jl     2cd <__fmodf2+0x2a1>
 288:	00 00                	add    BYTE PTR [eax],al
 28a:	04 00                	add    al,0x0
 28c:	00 00                	add    BYTE PTR [eax],al
 28e:	00 00                	add    BYTE PTR [eax],al
 290:	c0 4a 00 9f          	ror    BYTE PTR [edx+0x0],0x9f
 294:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
 29a:	00 00                	add    BYTE PTR [eax],al
 29c:	00 00                	add    BYTE PTR [eax],al
 29e:	00 00                	add    BYTE PTR [eax],al
 2a0:	1c 00                	sbb    al,0x0
 2a2:	00 00                	add    BYTE PTR [eax],al
 2a4:	02 00                	add    al,BYTE PTR [eax]
 2a6:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
 2a7:	46                   	inc    esi
 2a8:	00 00                	add    BYTE PTR [eax],al
 2aa:	04 00                	add    al,0x0
 2ac:	00 00                	add    BYTE PTR [eax],al
 2ae:	00 00                	add    BYTE PTR [eax],al
 2b0:	88 4b 00             	mov    BYTE PTR [ebx+0x0],cl
 2b3:	9f                   	lahf   
 2b4:	89 00                	mov    DWORD PTR [eax],eax
	...
 2be:	00 00                	add    BYTE PTR [eax],al
 2c0:	1c 00                	sbb    al,0x0
 2c2:	00 00                	add    BYTE PTR [eax],al
 2c4:	02 00                	add    al,BYTE PTR [eax]
 2c6:	ed                   	in     eax,dx
 2c7:	47                   	inc    edi
 2c8:	00 00                	add    BYTE PTR [eax],al
 2ca:	04 00                	add    al,0x0
 2cc:	00 00                	add    BYTE PTR [eax],al
 2ce:	00 00                	add    BYTE PTR [eax],al
 2d0:	14 4c                	adc    al,0x4c
 2d2:	00 9f a2 00 00 00    	add    BYTE PTR [edi+0xa2],bl
	...
 2e0:	1c 00                	sbb    al,0x0
 2e2:	00 00                	add    BYTE PTR [eax],al
 2e4:	02 00                	add    al,BYTE PTR [eax]
 2e6:	c5 49 00             	lds    ecx,FWORD PTR [ecx+0x0]
 2e9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 2ec:	00 00                	add    BYTE PTR [eax],al
 2ee:	00 00                	add    BYTE PTR [eax],al
 2f0:	b8 4c 00 9f ce       	mov    eax,0xce9f004c
	...
 2fd:	00 00                	add    BYTE PTR [eax],al
 2ff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 302:	00 00                	add    BYTE PTR [eax],al
 304:	02 00                	add    al,BYTE PTR [eax]
 306:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
 307:	4a                   	dec    edx
 308:	00 00                	add    BYTE PTR [eax],al
 30a:	04 00                	add    al,0x0
 30c:	00 00                	add    BYTE PTR [eax],al
 30e:	00 00                	add    BYTE PTR [eax],al
 310:	88 4d 00             	mov    BYTE PTR [ebp+0x0],cl
 313:	9f                   	lahf   
 314:	8c 00                	mov    WORD PTR [eax],es
	...
 31e:	00 00                	add    BYTE PTR [eax],al
 320:	1c 00                	sbb    al,0x0
 322:	00 00                	add    BYTE PTR [eax],al
 324:	02 00                	add    al,BYTE PTR [eax]
 326:	9b                   	fwait
 327:	4b                   	dec    ebx
 328:	00 00                	add    BYTE PTR [eax],al
 32a:	04 00                	add    al,0x0
 32c:	00 00                	add    BYTE PTR [eax],al
 32e:	00 00                	add    BYTE PTR [eax],al
 330:	14 4e                	adc    al,0x4e
 332:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
	...
 340:	1c 00                	sbb    al,0x0
 342:	00 00                	add    BYTE PTR [eax],al
 344:	02 00                	add    al,BYTE PTR [eax]
 346:	a0 4c 00 00 04       	mov    al,ds:0x400004c
 34b:	00 00                	add    BYTE PTR [eax],al
 34d:	00 00                	add    BYTE PTR [eax],al
 34f:	00 94 4f 00 9f 1d 00 	add    BYTE PTR [edi+ecx*2+0x1d9f00],dl
	...
 35e:	00 00                	add    BYTE PTR [eax],al
 360:	1c 00                	sbb    al,0x0
 362:	00 00                	add    BYTE PTR [eax],al
 364:	02 00                	add    al,BYTE PTR [eax]
 366:	10 4d 00             	adc    BYTE PTR [ebp+0x0],cl
 369:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 36c:	00 00                	add    BYTE PTR [eax],al
 36e:	00 00                	add    BYTE PTR [eax],al
 370:	b4 4f                	mov    ah,0x4f
 372:	00 9f 9c 01 00 00    	add    BYTE PTR [edi+0x19c],bl
	...
 380:	1c 00                	sbb    al,0x0
 382:	00 00                	add    BYTE PTR [eax],al
 384:	02 00                	add    al,BYTE PTR [eax]
 386:	13 4e 00             	adc    ecx,DWORD PTR [esi+0x0]
 389:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 38c:	00 00                	add    BYTE PTR [eax],al
 38e:	00 00                	add    BYTE PTR [eax],al
 390:	50                   	push   eax
 391:	51                   	push   ecx
 392:	00 9f b6 00 00 00    	add    BYTE PTR [edi+0xb6],bl
	...
 3a0:	1c 00                	sbb    al,0x0
 3a2:	00 00                	add    BYTE PTR [eax],al
 3a4:	02 00                	add    al,BYTE PTR [eax]
 3a6:	d7                   	xlat   BYTE PTR ds:[ebx]
 3a7:	4e                   	dec    esi
 3a8:	00 00                	add    BYTE PTR [eax],al
 3aa:	04 00                	add    al,0x0
 3ac:	00 00                	add    BYTE PTR [eax],al
 3ae:	00 00                	add    BYTE PTR [eax],al
 3b0:	08 52 00             	or     BYTE PTR [edx+0x0],dl
 3b3:	9f                   	lahf   
 3b4:	44                   	inc    esp
 3b5:	01 00                	add    DWORD PTR [eax],eax
	...
 3bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 3c2:	00 00                	add    BYTE PTR [eax],al
 3c4:	02 00                	add    al,BYTE PTR [eax]
 3c6:	a1 50 00 00 04       	mov    eax,ds:0x4000050
 3cb:	00 00                	add    BYTE PTR [eax],al
 3cd:	00 00                	add    BYTE PTR [eax],al
 3cf:	00 4c 53 00          	add    BYTE PTR [ebx+edx*2+0x0],cl
 3d3:	9f                   	lahf   
 3d4:	29 01                	sub    DWORD PTR [ecx],eax
	...
 3de:	00 00                	add    BYTE PTR [eax],al
 3e0:	1c 00                	sbb    al,0x0
 3e2:	00 00                	add    BYTE PTR [eax],al
 3e4:	02 00                	add    al,BYTE PTR [eax]
 3e6:	55                   	push   ebp
 3e7:	52                   	push   edx
 3e8:	00 00                	add    BYTE PTR [eax],al
 3ea:	04 00                	add    al,0x0
 3ec:	00 00                	add    BYTE PTR [eax],al
 3ee:	00 00                	add    BYTE PTR [eax],al
 3f0:	78 54                	js     446 <__fmodf2+0x41a>
 3f2:	00 9f 0e 0d 00 00    	add    BYTE PTR [edi+0xd0e],bl
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:15
.globl  _modfasm
.type _modfasm, @function

modfasm:
_modfasm:
                push    ebp
       0:	75 00                	jne    2 <_modfasm+0x2>
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:16
                mov     ebp,esp
       2:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:18
                push    edi                     # Save register edi
                fldd    [ebp+8]           # Load real from stack
       4:	02 00                	add    al,BYTE PTR [eax]
       6:	53                   	push   ebx
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:19
                mov     edi,dword [ebp+16]      # Put integer address in edi
       7:	00 00                	add    BYTE PTR [eax],al
       9:	00 01                	add    BYTE PTR [ecx],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:20
                fld    st(0)                     # Duplicate st
       b:	01 fb                	add    ebx,edi
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:21
                frndint                         # Round to integer
       d:	0e                   	push   cs
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:22
                fcom    st(1)                     # Compare with orignal value
       e:	0d 00 01 01 01       	or     eax,0x1010100
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:24
                fstsw   ax                      # Get the FPU status word
                testd    byte [ebp+15],0x80      # Test if number is negative
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:25
                jz      __fmodf1                # Re-direct if positive
      1b:	2e                   	cs
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:26
                sahf                            # Store AH to flags
      1c:	2e                   	cs
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:27
                jnb     __fmodf2                # Re-direct if greater or equal
      1d:	2f                   	das    
      1e:	2e                   	cs
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:28
                fld1                            # Load the constant 1
      1f:	2e                   	cs
      20:	2f                   	das    
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:29
                fadd                            # Increment integer part
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:31
                jmp     __fmodf2                # End of case
__fmodf1:       sahf                            # Store AH to flags
      25:	6a 2f                	push   0x2f
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:32
                jna     __fmodf2                # Re-direct if less or equal
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:34
                fld1                            # Load constant 1
                fsub                            # Decrement integer part
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:38
__fmodf2:       fstd     [edi]             # Store integer part
                fsub                            # Subtract to get fraction
                pop     edi                     # Restore register edi
                mov     esp,ebp                 # Restore stack pointer
      31:	63 2f                	arpl   WORD PTR [edi],bp
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:39
                pop     ebp
      33:	73 74                	jae    a9 <__fmodf2+0x7d>
      35:	72 69                	jb     a0 <__fmodf2+0x74>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <__fmodf2+0xf>
      3b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      42:	00 00                	add    BYTE PTR [eax],al
      44:	73 74                	jae    ba <__fmodf2+0x8e>
      46:	72 63                	jb     ab <__fmodf2+0x7f>
      48:	68 72 2e 63 00       	push   0x632e72
      4d:	01 00                	add    DWORD PTR [eax],eax
      4f:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
      52:	6d                   	ins    DWORD PTR es:[edi],dx
      53:	6d                   	ins    DWORD PTR es:[edi],dx
      54:	6f                   	outs   dx,DWORD PTR ds:[esi]
      55:	6e                   	outs   dx,BYTE PTR ds:[esi]
      56:	2e                   	cs
      57:	68 00 02 00 00       	push   0x200
      5c:	00 00                	add    BYTE PTR [eax],al
      5e:	05 02 00 00 00       	add    eax,0x2
      63:	9f                   	lahf   
      64:	03 09                	add    ecx,DWORD PTR [ecx]
      66:	01 c9                	add    ecx,ecx
      68:	2f                   	das    
      69:	f3 72 cb             	repz jb 37 <__fmodf2+0xb>
      6c:	3d 31 c9 2f f3       	cmp    eax,0xf32fc931
      71:	72 cb                	jb     3e <__fmodf2+0x12>
      73:	3d 02 02 00 01       	cmp    eax,0x1000202
      78:	01 a6 00 00 00 02    	add    DWORD PTR [esi+0x2000000],esp
      7e:	00 54 00 00          	add    BYTE PTR [eax+eax*1+0x0],dl
      82:	00 01                	add    BYTE PTR [ecx],al
      84:	01 fb                	add    ebx,edi
      86:	0e                   	push   cs
      87:	0d 00 01 01 01       	or     eax,0x1010100
      8c:	01 00                	add    DWORD PTR [eax],eax
      8e:	00 00                	add    BYTE PTR [eax],al
      90:	01 00                	add    DWORD PTR [eax],eax
      92:	00 01                	add    BYTE PTR [ecx],al
      94:	2e                   	cs
      95:	2e                   	cs
      96:	2f                   	das    
      97:	2e                   	cs
      98:	2e                   	cs
      99:	2f                   	das    
      9a:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      9e:	6a 2f                	push   0x2f
      a0:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      a3:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      aa:	63 2f                	arpl   WORD PTR [edi],bp
      ac:	73 74                	jae    122 <__fmodf2+0xf6>
      ae:	72 69                	jb     119 <__fmodf2+0xed>
      b0:	6e                   	outs   dx,BYTE PTR ds:[esi]
      b1:	67 73 00             	addr16 jae b4 <__fmodf2+0x88>
      b4:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      bb:	00 00                	add    BYTE PTR [eax],al
      bd:	73 74                	jae    133 <__fmodf2+0x107>
      bf:	72 63                	jb     124 <__fmodf2+0xf8>
      c1:	73 70                	jae    133 <__fmodf2+0x107>
      c3:	6e                   	outs   dx,BYTE PTR ds:[esi]
      c4:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
      c7:	01 00                	add    DWORD PTR [eax],eax
      c9:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
      cc:	6d                   	ins    DWORD PTR es:[edi],dx
      cd:	6d                   	ins    DWORD PTR es:[edi],dx
      ce:	6f                   	outs   dx,DWORD PTR ds:[esi]
      cf:	6e                   	outs   dx,BYTE PTR ds:[esi]
      d0:	2e                   	cs
      d1:	68 00 02 00 00       	push   0x200
      d6:	00 00                	add    BYTE PTR [eax],al
      d8:	05 02 70 00 00       	add    eax,0x7002
      dd:	9f                   	lahf   
      de:	03 26                	add    esp,DWORD PTR [esi]
      e0:	01 e7                	add    edi,esp
      e2:	9f                   	lahf   
      e3:	59                   	pop    ecx
      e4:	75 00                	jne    e6 <__fmodf2+0xba>
      e6:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
      e9:	aa                   	stos   BYTE PTR es:[edi],al
      ea:	00 02                	add    BYTE PTR [edx],al
      ec:	04 01                	add    al,0x1
      ee:	06                   	push   es
      ef:	3c 00                	cmp    al,0x0
      f1:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
      f4:	06                   	push   es
      f5:	73 00                	jae    f7 <__fmodf2+0xcb>
      f7:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
      fa:	06                   	push   es
      fb:	82                   	(bad)  
      fc:	06                   	push   es
      fd:	6d                   	ins    DWORD PTR es:[edi],dx
      fe:	91                   	xchg   ecx,eax
      ff:	4d                   	dec    ebp
     100:	e7 9f                	out    0x9f,eax
     102:	59                   	pop    ecx
     103:	75 00                	jne    105 <__fmodf2+0xd9>
     105:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     108:	aa                   	stos   BYTE PTR es:[edi],al
     109:	00 02                	add    BYTE PTR [edx],al
     10b:	04 01                	add    al,0x1
     10d:	06                   	push   es
     10e:	3c 00                	cmp    al,0x0
     110:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     113:	06                   	push   es
     114:	73 00                	jae    116 <__fmodf2+0xea>
     116:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     119:	06                   	push   es
     11a:	82                   	(bad)  
     11b:	06                   	push   es
     11c:	6d                   	ins    DWORD PTR es:[edi],dx
     11d:	91                   	xchg   ecx,eax
     11e:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     121:	01 01                	add    DWORD PTR [ecx],eax
     123:	87 00                	xchg   DWORD PTR [eax],eax
     125:	00 00                	add    BYTE PTR [eax],al
     127:	02 00                	add    al,BYTE PTR [eax]
     129:	53                   	push   ebx
     12a:	00 00                	add    BYTE PTR [eax],al
     12c:	00 01                	add    BYTE PTR [ecx],al
     12e:	01 fb                	add    ebx,edi
     130:	0e                   	push   cs
     131:	0d 00 01 01 01       	or     eax,0x1010100
     136:	01 00                	add    DWORD PTR [eax],eax
     138:	00 00                	add    BYTE PTR [eax],al
     13a:	01 00                	add    DWORD PTR [eax],eax
     13c:	00 01                	add    BYTE PTR [ecx],al
     13e:	2e                   	cs
     13f:	2e                   	cs
     140:	2f                   	das    
     141:	2e                   	cs
     142:	2e                   	cs
     143:	2f                   	das    
     144:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     148:	6a 2f                	push   0x2f
     14a:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     14d:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     154:	63 2f                	arpl   WORD PTR [edi],bp
     156:	73 74                	jae    1cc <__fmodf2+0x1a0>
     158:	72 69                	jb     1c3 <__fmodf2+0x197>
     15a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     15b:	67 73 00             	addr16 jae 15e <__fmodf2+0x132>
     15e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     165:	00 00                	add    BYTE PTR [eax],al
     167:	73 74                	jae    1dd <__fmodf2+0x1b1>
     169:	72 74                	jb     1df <__fmodf2+0x1b3>
     16b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     16c:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     16f:	00 01                	add    BYTE PTR [ecx],al
     171:	00 00                	add    BYTE PTR [eax],al
     173:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     176:	6d                   	ins    DWORD PTR es:[edi],dx
     177:	6f                   	outs   dx,DWORD PTR ds:[esi]
     178:	6e                   	outs   dx,BYTE PTR ds:[esi]
     179:	2e                   	cs
     17a:	68 00 02 00 00       	push   0x200
     17f:	00 00                	add    BYTE PTR [eax],al
     181:	05 02 1c 01 00       	add    eax,0x11c02
     186:	9f                   	lahf   
     187:	03 2a                	add    ebp,DWORD PTR [edx]
     189:	01 f6                	add    esi,esi
     18b:	67 92                	addr16 xchg edx,eax
     18d:	08 2f                	or     BYTE PTR [edi],ch
     18f:	75 08                	jne    199 <__fmodf2+0x16d>
     191:	2f                   	das    
     192:	4b                   	dec    ebx
     193:	08 c9                	or     cl,cl
     195:	c9                   	leave  
     196:	08 21                	or     BYTE PTR [ecx],ah
     198:	3d 77 f6 67 92       	cmp    eax,0x9267f677
     19d:	08 2f                	or     BYTE PTR [edi],ch
     19f:	75 08                	jne    1a9 <__fmodf2+0x17d>
     1a1:	2f                   	das    
     1a2:	4b                   	dec    ebx
     1a3:	08 c9                	or     cl,cl
     1a5:	c9                   	leave  
     1a6:	08 21                	or     BYTE PTR [ecx],ah
     1a8:	3d 02 07 00 01       	cmp    eax,0x1000702
     1ad:	01 b7 00 00 00 02    	add    DWORD PTR [edi+0x2000000],esi
     1b3:	00 36                	add    BYTE PTR [esi],dh
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	00 01                	add    BYTE PTR [ecx],al
     1b9:	01 fb                	add    ebx,edi
     1bb:	0e                   	push   cs
     1bc:	0d 00 01 01 01       	or     eax,0x1010100
     1c1:	01 00                	add    DWORD PTR [eax],eax
     1c3:	00 00                	add    BYTE PTR [eax],al
     1c5:	01 00                	add    DWORD PTR [eax],eax
     1c7:	00 01                	add    BYTE PTR [ecx],al
     1c9:	73 72                	jae    23d <__fmodf2+0x211>
     1cb:	63 00                	arpl   WORD PTR [eax],ax
     1cd:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     1d4:	00 00                	add    BYTE PTR [eax],al
     1d6:	61                   	popa   
     1d7:	73 63                	jae    23c <__fmodf2+0x210>
     1d9:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     1e0:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     1e3:	6d                   	ins    DWORD PTR es:[edi],dx
     1e4:	6d                   	ins    DWORD PTR es:[edi],dx
     1e5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1e6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     1e7:	2e                   	cs
     1e8:	68 00 02 00 00       	push   0x200
     1ed:	00 00                	add    BYTE PTR [eax],al
     1ef:	05 02 4c 02 00       	add    eax,0x24c02
     1f4:	9f                   	lahf   
     1f5:	03 0a                	add    ecx,DWORD PTR [edx]
     1f7:	01 08                	add    DWORD PTR [eax],ecx
     1f9:	16                   	push   ss
     1fa:	00 02                	add    BYTE PTR [edx],al
     1fc:	04 03                	add    al,0x3
     1fe:	08 d7                	or     bh,dl
     200:	00 02                	add    BYTE PTR [edx],al
     202:	04 03                	add    al,0x3
     204:	d7                   	xlat   BYTE PTR ds:[ebx]
     205:	00 02                	add    BYTE PTR [edx],al
     207:	04 03                	add    al,0x3
     209:	08 4b 00             	or     BYTE PTR [ebx+0x0],cl
     20c:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     20f:	d3 00                	rol    DWORD PTR [eax],cl
     211:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     214:	06                   	push   es
     215:	82                   	(bad)  
     216:	06                   	push   es
     217:	87 69 08             	xchg   DWORD PTR [ecx+0x8],ebp
     21a:	15 bb 3d 00 02       	adc    eax,0x2003dbb
     21f:	04 01                	add    al,0x1
     221:	76 00                	jbe    223 <__fmodf2+0x1f7>
     223:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     226:	02 3b                	add    bh,BYTE PTR [ebx]
     228:	13 08                	adc    ecx,DWORD PTR [eax]
     22a:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     22e:	ad                   	lods   eax,DWORD PTR ds:[esi]
     22f:	d7                   	xlat   BYTE PTR ds:[ebx]
     230:	69 08 15 bb 3d 00    	imul   ecx,DWORD PTR [eax],0x3dbb15
     236:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     239:	76 00                	jbe    23b <__fmodf2+0x20f>
     23b:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     23e:	02 3b                	add    bh,BYTE PTR [ebx]
     240:	13 08                	adc    ecx,DWORD PTR [eax]
     242:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     246:	ad                   	lods   eax,DWORD PTR ds:[esi]
     247:	d7                   	xlat   BYTE PTR ds:[ebx]
     248:	3d 5c f3 78 00       	cmp    eax,0x78f35c
     24d:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     250:	91                   	xchg   ecx,eax
     251:	00 02                	add    BYTE PTR [edx],al
     253:	04 03                	add    al,0x3
     255:	02 24 11             	add    ah,BYTE PTR [ecx+edx*1]
     258:	00 02                	add    BYTE PTR [edx],al
     25a:	04 01                	add    al,0x1
     25c:	06                   	push   es
     25d:	4a                   	dec    edx
     25e:	06                   	push   es
     25f:	e8 3d 31 c9 ad       	call   adc933a1 <tmbuf+0xec8a081>
     264:	02 02                	add    al,BYTE PTR [edx]
     266:	00 01                	add    BYTE PTR [ecx],al
     268:	01 c8                	add    eax,ecx
     26a:	00 00                	add    BYTE PTR [eax],al
     26c:	00 02                	add    BYTE PTR [edx],al
     26e:	00 8f 00 00 00 01    	add    BYTE PTR [edi+0x1000000],cl
     274:	01 fb                	add    ebx,edi
     276:	0e                   	push   cs
     277:	0d 00 01 01 01       	or     eax,0x1010100
     27c:	01 00                	add    DWORD PTR [eax],eax
     27e:	00 00                	add    BYTE PTR [eax],al
     280:	01 00                	add    DWORD PTR [eax],eax
     282:	00 01                	add    BYTE PTR [ecx],al
     284:	73 72                	jae    2f8 <__fmodf2+0x2cc>
     286:	63 00                	arpl   WORD PTR [eax],ax
     288:	2f                   	das    
     289:	68 6f 6d 65 2f       	push   0x2f656d6f
     28e:	79 6f                	jns    2ff <__fmodf2+0x2d3>
     290:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     297:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     29a:	73 73                	jae    30f <__fmodf2+0x2e3>
     29c:	2f                   	das    
     29d:	6c                   	ins    BYTE PTR es:[edi],dx
     29e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     2a5:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     2ab:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     2b1:	78 2d                	js     2e0 <__fmodf2+0x2b4>
     2b3:	67 6e                	outs   dx,BYTE PTR ds:[si]
     2b5:	75 2f                	jne    2e6 <__fmodf2+0x2ba>
     2b7:	35 2e 33 2e 30       	xor    eax,0x302e332e
     2bc:	2f                   	das    
     2bd:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     2c4:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     2c7:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     2cb:	65 00 00             	add    BYTE PTR gs:[eax],al
     2ce:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     2d1:	73 6f                	jae    342 <__fmodf2+0x316>
     2d3:	6c                   	ins    BYTE PTR es:[edi],dx
     2d4:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
     2d8:	01 00                	add    DWORD PTR [eax],eax
     2da:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     2dd:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     2e4:	63 
     2e5:	2e                   	cs
     2e6:	68 00 02 00 00       	push   0x200
     2eb:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     2f2:	03 00                	add    eax,DWORD PTR [eax]
     2f4:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     2f7:	6d                   	ins    DWORD PTR es:[edi],dx
     2f8:	6d                   	ins    DWORD PTR es:[edi],dx
     2f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     2fa:	6e                   	outs   dx,BYTE PTR ds:[esi]
     2fb:	2e                   	cs
     2fc:	68 00 03 00 00       	push   0x300
     301:	00 00                	add    BYTE PTR [eax],al
     303:	05 02 b4 04 00       	add    eax,0x4b402
     308:	9f                   	lahf   
     309:	03 0f                	add    ecx,DWORD PTR [edi]
     30b:	01 08                	add    DWORD PTR [eax],ecx
     30d:	24 08                	and    al,0x8
     30f:	59                   	pop    ecx
     310:	08 21                	or     BYTE PTR [ecx],ah
     312:	08 2f                	or     BYTE PTR [edi],ch
     314:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     317:	21 08                	and    DWORD PTR [eax],ecx
     319:	2f                   	das    
     31a:	08 5a 08             	or     BYTE PTR [edx+0x8],bl
     31d:	59                   	pop    ecx
     31e:	69 08 23 08 59 08    	imul   ecx,DWORD PTR [eax],0x8590823
     324:	5a                   	pop    edx
     325:	08 59 69             	or     BYTE PTR [ecx+0x69],bl
     328:	08 23                	or     BYTE PTR [ebx],ah
     32a:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     32d:	5a                   	pop    edx
     32e:	08 59 02             	or     BYTE PTR [ecx+0x2],bl
     331:	06                   	push   es
     332:	00 01                	add    BYTE PTR [ecx],al
     334:	01 74 01 00          	add    DWORD PTR [ecx+eax*1+0x0],esi
     338:	00 02                	add    BYTE PTR [edx],al
     33a:	00 d0                	add    al,dl
     33c:	00 00                	add    BYTE PTR [eax],al
     33e:	00 01                	add    BYTE PTR [ecx],al
     340:	01 fb                	add    ebx,edi
     342:	0e                   	push   cs
     343:	0d 00 01 01 01       	or     eax,0x1010100
     348:	01 00                	add    DWORD PTR [eax],eax
     34a:	00 00                	add    BYTE PTR [eax],al
     34c:	01 00                	add    DWORD PTR [eax],eax
     34e:	00 01                	add    BYTE PTR [ecx],al
     350:	73 72                	jae    3c4 <__fmodf2+0x398>
     352:	63 00                	arpl   WORD PTR [eax],ax
     354:	2f                   	das    
     355:	68 6f 6d 65 2f       	push   0x2f656d6f
     35a:	79 6f                	jns    3cb <__fmodf2+0x39f>
     35c:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     363:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     366:	73 73                	jae    3db <__fmodf2+0x3af>
     368:	2f                   	das    
     369:	6c                   	ins    BYTE PTR es:[edi],dx
     36a:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     371:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     377:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     37d:	78 2d                	js     3ac <__fmodf2+0x380>
     37f:	67 6e                	outs   dx,BYTE PTR ds:[si]
     381:	75 2f                	jne    3b2 <__fmodf2+0x386>
     383:	35 2e 33 2e 30       	xor    eax,0x302e332e
     388:	2f                   	das    
     389:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     390:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     393:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     397:	65                   	gs
     398:	2f                   	das    
     399:	2e                   	cs
     39a:	2e                   	cs
     39b:	2f                   	das    
     39c:	2e                   	cs
     39d:	2e                   	cs
     39e:	2f                   	das    
     39f:	2e                   	cs
     3a0:	2e                   	cs
     3a1:	2f                   	das    
     3a2:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     3a6:	6a 2f                	push   0x2f
     3a8:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     3ab:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     3b2:	6e                   	outs   dx,BYTE PTR ds:[esi]
     3b3:	65                   	gs
     3b4:	6c                   	ins    BYTE PTR es:[edi],dx
     3b5:	2f                   	das    
     3b6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     3bd:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     3c0:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     3c4:	65 00 00             	add    BYTE PTR gs:[eax],al
     3c7:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     3c9:	76 69                	jbe    434 <__fmodf2+0x408>
     3cb:	72 6f                	jb     43c <__fmodf2+0x410>
     3cd:	6e                   	outs   dx,BYTE PTR ds:[esi]
     3ce:	6d                   	ins    DWORD PTR es:[edi],dx
     3cf:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     3d1:	74 2e                	je     401 <__fmodf2+0x3d5>
     3d3:	63 00                	arpl   WORD PTR [eax],ax
     3d5:	01 00                	add    DWORD PTR [eax],eax
     3d7:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     3da:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     3e1:	63 
     3e2:	2e                   	cs
     3e3:	68 00 02 00 00       	push   0x200
     3e8:	73 74                	jae    45e <__fmodf2+0x432>
     3ea:	64                   	fs
     3eb:	64                   	fs
     3ec:	65                   	gs
     3ed:	66                   	data16
     3ee:	2e                   	cs
     3ef:	68 00 02 00 00       	push   0x200
     3f4:	73 79                	jae    46f <__fmodf2+0x443>
     3f6:	73 63                	jae    45b <__fmodf2+0x42f>
     3f8:	61                   	popa   
     3f9:	6c                   	ins    BYTE PTR es:[edi],dx
     3fa:	6c                   	ins    BYTE PTR es:[edi],dx
     3fb:	73 2e                	jae    42b <__fmodf2+0x3ff>
     3fd:	68 00 03 00 00       	push   0x300
     402:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     405:	6d                   	ins    DWORD PTR es:[edi],dx
     406:	6f                   	outs   dx,DWORD PTR ds:[esi]
     407:	6e                   	outs   dx,BYTE PTR ds:[esi]
     408:	2e                   	cs
     409:	68 00 04 00 00       	push   0x400
     40e:	00 00                	add    BYTE PTR [eax],al
     410:	05 02 24 06 00       	add    eax,0x62402
     415:	9f                   	lahf   
     416:	03 09                	add    ecx,DWORD PTR [ecx]
     418:	01 08                	add    DWORD PTR [eax],ecx
     41a:	59                   	pop    ecx
     41b:	08 2f                	or     BYTE PTR [edi],ch
     41d:	08 13                	or     BYTE PTR [ebx],dl
     41f:	08 3d 68 08 15 08    	or     BYTE PTR ds:0x8150868,bh
     425:	75 75                	jne    49c <__fmodf2+0x470>
     427:	a0 08 9f 2f 08       	mov    al,ds:0x82f9f08
     42c:	ff 00                	inc    DWORD PTR [eax]
     42e:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     431:	06                   	push   es
     432:	08 82 06 08 5a 08    	or     BYTE PTR [edx+0x85a0806],al
     438:	83 08 83             	or     DWORD PTR [eax],0xffffff83
     43b:	6a 57                	push   0x57
     43d:	22 3d 77 f3 d7 31    	and    bh,BYTE PTR ds:0x31d7f377
     443:	08 21                	or     BYTE PTR [ecx],ah
     445:	91                   	xchg   ecx,eax
     446:	02 36                	add    dh,BYTE PTR [esi]
     448:	14 02                	adc    al,0x2
     44a:	39 13                	cmp    DWORD PTR [ebx],edx
     44c:	00 02                	add    BYTE PTR [edx],al
     44e:	04 02                	add    al,0x2
     450:	7e 00                	jle    452 <__fmodf2+0x426>
     452:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     455:	06                   	push   es
     456:	4a                   	dec    edx
     457:	06                   	push   es
     458:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     459:	59                   	pop    ecx
     45a:	5b                   	pop    ebx
     45b:	f3 08 13             	repz or BYTE PTR [ebx],dl
     45e:	31 08                	xor    DWORD PTR [eax],ecx
     460:	21 76 bb             	and    DWORD PTR [esi-0x45],esi
     463:	08 92 08 4b 02 36    	or     BYTE PTR [edx+0x36024b08],dl
     469:	14 08                	adc    al,0x8
     46b:	f3 02 25 13 08 f3 00 	repz add ah,BYTE PTR ds:0xf30813
     472:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     475:	03 77 58             	add    esi,DWORD PTR [edi+0x58]
     478:	00 02                	add    BYTE PTR [edx],al
     47a:	04 01                	add    al,0x1
     47c:	06                   	push   es
     47d:	4a                   	dec    edx
     47e:	06                   	push   es
     47f:	03 0c 9e             	add    ecx,DWORD PTR [esi+ebx*4]
     482:	bb 08 92 08 9f       	mov    ebx,0x9f089208
     487:	08 f3                	or     bl,dh
     489:	02 25 13 08 f3 00    	add    ah,BYTE PTR ds:0xf30813
     48f:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     492:	03 79 2e             	add    edi,DWORD PTR [ecx+0x2e]
     495:	00 02                	add    BYTE PTR [edx],al
     497:	04 01                	add    al,0x1
     499:	06                   	push   es
     49a:	4a                   	dec    edx
     49b:	06                   	push   es
     49c:	03 0b                	add    ecx,DWORD PTR [ebx]
     49e:	9e                   	sahf   
     49f:	5b                   	pop    ebx
     4a0:	08 13                	or     BYTE PTR [ebx],dl
     4a2:	08 5a 5b             	or     BYTE PTR [edx+0x5b],bl
     4a5:	f3 08 13             	repz or BYTE PTR [ebx],dl
     4a8:	02 02                	add    al,BYTE PTR [edx]
     4aa:	00 01                	add    BYTE PTR [ecx],al
     4ac:	01 c8                	add    eax,ecx
     4ae:	01 00                	add    DWORD PTR [eax],eax
     4b0:	00 02                	add    BYTE PTR [edx],al
     4b2:	00 d3                	add    bl,dl
     4b4:	00 00                	add    BYTE PTR [eax],al
     4b6:	00 01                	add    BYTE PTR [ecx],al
     4b8:	01 fb                	add    ebx,edi
     4ba:	0e                   	push   cs
     4bb:	0d 00 01 01 01       	or     eax,0x1010100
     4c0:	01 00                	add    DWORD PTR [eax],eax
     4c2:	00 00                	add    BYTE PTR [eax],al
     4c4:	01 00                	add    DWORD PTR [eax],eax
     4c6:	00 01                	add    BYTE PTR [ecx],al
     4c8:	73 72                	jae    53c <__fmodf2+0x510>
     4ca:	63 00                	arpl   WORD PTR [eax],ax
     4cc:	2f                   	das    
     4cd:	68 6f 6d 65 2f       	push   0x2f656d6f
     4d2:	79 6f                	jns    543 <__fmodf2+0x517>
     4d4:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     4db:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     4de:	73 73                	jae    553 <__fmodf2+0x527>
     4e0:	2f                   	das    
     4e1:	6c                   	ins    BYTE PTR es:[edi],dx
     4e2:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     4e9:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     4ef:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     4f5:	78 2d                	js     524 <__fmodf2+0x4f8>
     4f7:	67 6e                	outs   dx,BYTE PTR ds:[si]
     4f9:	75 2f                	jne    52a <__fmodf2+0x4fe>
     4fb:	35 2e 33 2e 30       	xor    eax,0x302e332e
     500:	2f                   	das    
     501:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     508:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     50b:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     50f:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     513:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     517:	65                   	gs
     518:	2f                   	das    
     519:	2e                   	cs
     51a:	2e                   	cs
     51b:	2f                   	das    
     51c:	2e                   	cs
     51d:	2e                   	cs
     51e:	2f                   	das    
     51f:	2e                   	cs
     520:	2e                   	cs
     521:	2f                   	das    
     522:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     526:	6a 2f                	push   0x2f
     528:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     52b:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     532:	6e                   	outs   dx,BYTE PTR ds:[esi]
     533:	65                   	gs
     534:	6c                   	ins    BYTE PTR es:[edi],dx
     535:	2f                   	das    
     536:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     53d:	00 00                	add    BYTE PTR [eax],al
     53f:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     546:	01 00                	add    DWORD PTR [eax],eax
     548:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     54b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     552:	63 
     553:	2e                   	cs
     554:	68 00 02 00 00       	push   0x200
     559:	73 74                	jae    5cf <__fmodf2+0x5a3>
     55b:	64                   	fs
     55c:	64                   	fs
     55d:	65                   	gs
     55e:	66                   	data16
     55f:	2e                   	cs
     560:	68 00 02 00 00       	push   0x200
     565:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     56c:	03 00                	add    eax,DWORD PTR [eax]
     56e:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     571:	6d                   	ins    DWORD PTR es:[edi],dx
     572:	6d                   	ins    DWORD PTR es:[edi],dx
     573:	6f                   	outs   dx,DWORD PTR ds:[esi]
     574:	6e                   	outs   dx,BYTE PTR ds:[esi]
     575:	2e                   	cs
     576:	68 00 03 00 00       	push   0x300
     57b:	73 79                	jae    5f6 <__fmodf2+0x5ca>
     57d:	73 63                	jae    5e2 <__fmodf2+0x5b6>
     57f:	61                   	popa   
     580:	6c                   	ins    BYTE PTR es:[edi],dx
     581:	6c                   	ins    BYTE PTR es:[edi],dx
     582:	73 2e                	jae    5b2 <__fmodf2+0x586>
     584:	68 00 04 00 00       	push   0x400
     589:	00 00                	add    BYTE PTR [eax],al
     58b:	05 02 68 0a 00       	add    eax,0xa6802
     590:	9f                   	lahf   
     591:	03 12                	add    edx,DWORD PTR [edx]
     593:	01 08                	add    DWORD PTR [eax],ecx
     595:	13 08                	adc    ecx,DWORD PTR [eax]
     597:	a0 5a f3 08 3d       	mov    al,ds:0x3d08f35a
     59c:	31 08                	xor    DWORD PTR [eax],ecx
     59e:	14 08                	adc    al,0x8
     5a0:	59                   	pop    ecx
     5a1:	5b                   	pop    ebx
     5a2:	f3 08 13             	repz or BYTE PTR [ebx],dl
     5a5:	31 08                	xor    DWORD PTR [eax],ecx
     5a7:	21 2f                	and    DWORD PTR [edi],ebp
     5a9:	08 d5                	or     ch,dl
     5ab:	bc 08 3d 69 08       	mov    esp,0x8693d08
     5b0:	2f                   	das    
     5b1:	75 08                	jne    5bb <__fmodf2+0x58f>
     5b3:	83 67 75 bc          	and    DWORD PTR [edi+0x75],0xffffffbc
     5b7:	08 68 02             	or     BYTE PTR [eax+0x2],ch
     5ba:	26 13 3d 77 08 13 08 	adc    edi,DWORD PTR es:0x8130877
     5c1:	2f                   	das    
     5c2:	69 f3 d7 31 e5 08    	imul   esi,ebx,0x8e531d7
     5c8:	d7                   	xlat   BYTE PTR ds:[ebx]
     5c9:	77 f3                	ja     5be <__fmodf2+0x592>
     5cb:	08 3d 30 e5 08 d7    	or     BYTE PTR ds:0xd708e530,bh
     5d1:	77 f3                	ja     5c6 <__fmodf2+0x59a>
     5d3:	08 3d 31 08 13 08    	or     BYTE PTR ds:0x8130831,bh
     5d9:	75 5b                	jne    636 <__fmodf2+0x60a>
     5db:	f3 08 3d 30 08 13 08 	repz or BYTE PTR ds:0x8130830,bh
     5e2:	67 5b                	addr16 pop ebx
     5e4:	f3 08 13             	repz or BYTE PTR [ebx],dl
     5e7:	31 08                	xor    DWORD PTR [eax],ecx
     5e9:	75 68                	jne    653 <__fmodf2+0x627>
     5eb:	77 bb                	ja     5a8 <__fmodf2+0x57c>
     5ed:	08 91 bb 08 91 bb    	or     BYTE PTR [ecx-0x446ef745],dl
     5f3:	08 91 bb 08 95 67    	or     BYTE PTR [ecx+0x679508bb],dl
     5f9:	08 bc ae 08 84 08 84 	or     BYTE PTR [esi+ebp*4-0x7bf77bf8],bh
     600:	a0 08 67 08 4c       	mov    al,ds:0x4c086708
     605:	08 13                	or     BYTE PTR [ebx],dl
     607:	be 08 67 e5 08       	mov    esi,0x8e56708
     60c:	e6 75                	out    0x75,al
     60e:	5a                   	pop    edx
     60f:	08 67 08             	or     BYTE PTR [edi+0x8],ah
     612:	d7                   	xlat   BYTE PTR ds:[ebx]
     613:	08 9f 08 67 08 9f    	or     BYTE PTR [edi-0x60f798f8],bl
     619:	68 08 67 75 30       	push   0x30756708
     61e:	03 73 08             	add    esi,DWORD PTR [ebx+0x8]
     621:	3c 03                	cmp    al,0x3
     623:	10 9e a0 08 bb 08    	adc    BYTE PTR [esi+0x8bb08a0],bl
     629:	9f                   	lahf   
     62a:	08 67 08             	or     BYTE PTR [edi+0x8],ah
     62d:	9f                   	lahf   
     62e:	68 08 67 79 3d       	push   0x3d796708
     633:	5b                   	pop    ebx
     634:	08 13                	or     BYTE PTR [ebx],dl
     636:	08 2f                	or     BYTE PTR [edi],ch
     638:	5b                   	pop    ebx
     639:	f3 d7                	repz xlat BYTE PTR ds:[ebx]
     63b:	31 08                	xor    DWORD PTR [eax],ecx
     63d:	22 75 75             	and    dh,BYTE PTR [ebp+0x75]
     640:	75 83                	jne    5c5 <__fmodf2+0x599>
     642:	83 08 13             	or     DWORD PTR [eax],0x13
     645:	76 08                	jbe    64f <__fmodf2+0x623>
     647:	30 5a 08             	xor    BYTE PTR [edx+0x8],bl
     64a:	ca 08 91             	retf   0x9108
     64d:	08 d7                	or     bh,dl
     64f:	08 91 08 f3 08 d7    	or     BYTE PTR [ecx-0x28f70cf8],dl
     655:	c9                   	leave  
     656:	08 83 83 67 67 32    	or     BYTE PTR [ebx+0x32676783],al
     65c:	67 67 08 21          	addr32 or BYTE PTR [bx+di],ah
     660:	03 6b 08             	add    ebp,DWORD PTR [ebx+0x8]
     663:	66 03 1a             	add    bx,WORD PTR [edx]
     666:	02 22                	add    ah,BYTE PTR [edx]
     668:	01 d7                	add    edi,edx
     66a:	3d 5b f3 08 3d       	cmp    eax,0x3d08f35b
     66f:	31 08                	xor    DWORD PTR [eax],ecx
     671:	13 08                	adc    ecx,DWORD PTR [eax]
     673:	2f                   	das    
     674:	02 05 00 01 01 cc    	add    al,BYTE PTR ds:0xcc010100
     67a:	00 00                	add    BYTE PTR [eax],al
     67c:	00 02                	add    BYTE PTR [edx],al
     67e:	00 77 00             	add    BYTE PTR [edi+0x0],dh
     681:	00 00                	add    BYTE PTR [eax],al
     683:	01 01                	add    DWORD PTR [ecx],eax
     685:	fb                   	sti    
     686:	0e                   	push   cs
     687:	0d 00 01 01 01       	or     eax,0x1010100
     68c:	01 00                	add    DWORD PTR [eax],eax
     68e:	00 00                	add    BYTE PTR [eax],al
     690:	01 00                	add    DWORD PTR [eax],eax
     692:	00 01                	add    BYTE PTR [ecx],al
     694:	73 72                	jae    708 <__fmodf2+0x6dc>
     696:	63 2f                	arpl   WORD PTR [edi],bp
     698:	69 6e 70 75 74 00 69 	imul   ebp,DWORD PTR [esi+0x70],0x69007475
     69f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6a0:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     6a4:	65                   	gs
     6a5:	2f                   	das    
     6a6:	2e                   	cs
     6a7:	2e                   	cs
     6a8:	2f                   	das    
     6a9:	2e                   	cs
     6aa:	2e                   	cs
     6ab:	2f                   	das    
     6ac:	2e                   	cs
     6ad:	2e                   	cs
     6ae:	2f                   	das    
     6af:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     6b3:	6a 2f                	push   0x2f
     6b5:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     6b8:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     6bf:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6c0:	65                   	gs
     6c1:	6c                   	ins    BYTE PTR es:[edi],dx
     6c2:	2f                   	das    
     6c3:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     6ca:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     6cd:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     6d1:	65 00 00             	add    BYTE PTR gs:[eax],al
     6d4:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     6db:	00 01                	add    BYTE PTR [ecx],al
     6dd:	00 00                	add    BYTE PTR [eax],al
     6df:	73 79                	jae    75a <__fmodf2+0x72e>
     6e1:	73 63                	jae    746 <__fmodf2+0x71a>
     6e3:	61                   	popa   
     6e4:	6c                   	ins    BYTE PTR es:[edi],dx
     6e5:	6c                   	ins    BYTE PTR es:[edi],dx
     6e6:	73 2e                	jae    716 <__fmodf2+0x6ea>
     6e8:	68 00 02 00 00       	push   0x200
     6ed:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     6f0:	6d                   	ins    DWORD PTR es:[edi],dx
     6f1:	6f                   	outs   dx,DWORD PTR ds:[esi]
     6f2:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6f3:	2e                   	cs
     6f4:	68 00 03 00 00       	push   0x300
     6f9:	00 00                	add    BYTE PTR [eax],al
     6fb:	05 02 20 13 00       	add    eax,0x132002
     700:	9f                   	lahf   
     701:	03 0f                	add    ecx,DWORD PTR [edi]
     703:	01 d7                	add    edi,edx
     705:	08 3d 4d 08 67 68    	or     BYTE PTR ds:0x6867084d,bh
     70b:	75 4b                	jne    758 <__fmodf2+0x72c>
     70d:	08 3d 79 08 16 08    	or     BYTE PTR ds:0x8160879,bh
     713:	3d 67 67 9f 30       	cmp    eax,0x309f6767
     718:	6a 08                	push   0x8
     71a:	14 77                	adc    al,0x77
     71c:	ad                   	lods   eax,DWORD PTR ds:[esi]
     71d:	68 00 02 04 01       	push   0x1040200
     722:	08 67 33             	or     BYTE PTR [edi+0x33],ah
     725:	08 3d 00 02 04 01    	or     BYTE PTR ds:0x1040200,bh
     72b:	06                   	push   es
     72c:	66 06                	pushw  es
     72e:	68 ad 68 68 76       	push   0x766868ad
     733:	08 5a 00             	or     BYTE PTR [edx+0x0],bl
     736:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     739:	06                   	push   es
     73a:	ac                   	lods   al,BYTE PTR ds:[esi]
     73b:	06                   	push   es
     73c:	68 5b 00 02 04       	push   0x402005b
     741:	02 a3 2f 02 05 00    	add    ah,BYTE PTR [ebx+0x5022f]
     747:	01 01                	add    DWORD PTR [ecx],eax
     749:	b1 02                	mov    cl,0x2
     74b:	00 00                	add    BYTE PTR [eax],al
     74d:	02 00                	add    al,BYTE PTR [eax]
     74f:	e5 00                	in     eax,0x0
     751:	00 00                	add    BYTE PTR [eax],al
     753:	01 01                	add    DWORD PTR [ecx],eax
     755:	fb                   	sti    
     756:	0e                   	push   cs
     757:	0d 00 01 01 01       	or     eax,0x1010100
     75c:	01 00                	add    DWORD PTR [eax],eax
     75e:	00 00                	add    BYTE PTR [eax],al
     760:	01 00                	add    DWORD PTR [eax],eax
     762:	00 01                	add    BYTE PTR [ecx],al
     764:	73 72                	jae    7d8 <__fmodf2+0x7ac>
     766:	63 00                	arpl   WORD PTR [eax],ax
     768:	2f                   	das    
     769:	68 6f 6d 65 2f       	push   0x2f656d6f
     76e:	79 6f                	jns    7df <__fmodf2+0x7b3>
     770:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     777:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     77a:	73 73                	jae    7ef <__fmodf2+0x7c3>
     77c:	2f                   	das    
     77d:	6c                   	ins    BYTE PTR es:[edi],dx
     77e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     785:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     78b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     791:	78 2d                	js     7c0 <__fmodf2+0x794>
     793:	67 6e                	outs   dx,BYTE PTR ds:[si]
     795:	75 2f                	jne    7c6 <__fmodf2+0x79a>
     797:	35 2e 33 2e 30       	xor    eax,0x302e332e
     79c:	2f                   	das    
     79d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     7a4:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     7a7:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     7ab:	65                   	gs
     7ac:	2f                   	das    
     7ad:	2e                   	cs
     7ae:	2e                   	cs
     7af:	2f                   	das    
     7b0:	2e                   	cs
     7b1:	2e                   	cs
     7b2:	2f                   	das    
     7b3:	2e                   	cs
     7b4:	2e                   	cs
     7b5:	2f                   	das    
     7b6:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     7ba:	6a 2f                	push   0x2f
     7bc:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     7bf:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     7c6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     7c7:	65                   	gs
     7c8:	6c                   	ins    BYTE PTR es:[edi],dx
     7c9:	2f                   	das    
     7ca:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     7d1:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     7d4:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     7d8:	65 00 00             	add    BYTE PTR gs:[eax],al
     7db:	6c                   	ins    BYTE PTR es:[edi],dx
     7dc:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     7e3:	4f                   	dec    edi
     7e4:	53                   	push   ebx
     7e5:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     7e8:	01 00                	add    DWORD PTR [eax],eax
     7ea:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     7ed:	64                   	fs
     7ee:	61                   	popa   
     7ef:	72 67                	jb     858 <__fmodf2+0x82c>
     7f1:	2e                   	cs
     7f2:	68 00 02 00 00       	push   0x200
     7f7:	73 74                	jae    86d <__fmodf2+0x841>
     7f9:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     800:	63 
     801:	2e                   	cs
     802:	68 00 02 00 00       	push   0x200
     807:	73 74                	jae    87d <__fmodf2+0x851>
     809:	64                   	fs
     80a:	64                   	fs
     80b:	65                   	gs
     80c:	66                   	data16
     80d:	2e                   	cs
     80e:	68 00 02 00 00       	push   0x200
     813:	73 79                	jae    88e <__fmodf2+0x862>
     815:	73 63                	jae    87a <__fmodf2+0x84e>
     817:	61                   	popa   
     818:	6c                   	ins    BYTE PTR es:[edi],dx
     819:	6c                   	ins    BYTE PTR es:[edi],dx
     81a:	73 2e                	jae    84a <__fmodf2+0x81e>
     81c:	68 00 03 00 00       	push   0x300
     821:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     824:	6d                   	ins    DWORD PTR es:[edi],dx
     825:	6f                   	outs   dx,DWORD PTR ds:[esi]
     826:	6e                   	outs   dx,BYTE PTR ds:[esi]
     827:	2e                   	cs
     828:	68 00 04 00 00       	push   0x400
     82d:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     834:	04 00                	add    al,0x0
     836:	00 00                	add    BYTE PTR [eax],al
     838:	00 05 02 8c 14 00    	add    BYTE PTR ds:0x148c02,al
     83e:	9f                   	lahf   
     83f:	03 11                	add    edx,DWORD PTR [ecx]
     841:	01 08                	add    DWORD PTR [eax],ecx
     843:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
     846:	67 3d 77 08 21 75    	addr16 cmp eax,0x75210877
     84c:	08 83 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],al
     852:	75 08                	jne    85c <__fmodf2+0x830>
     854:	9f                   	lahf   
     855:	3d 77 08 21 75       	cmp    eax,0x75210877
     85a:	08 bb 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],bh
     860:	75 08                	jne    86a <__fmodf2+0x83e>
     862:	d7                   	xlat   BYTE PTR ds:[ebx]
     863:	3d 77 08 21 08       	cmp    eax,0x8210877
     868:	67 d8 59 bd          	fcomp  DWORD PTR [bx+di-0x43]
     86c:	c9                   	leave  
     86d:	c9                   	leave  
     86e:	08 67 75             	or     BYTE PTR [edi+0x75],ah
     871:	08 91 08 6a 2d 08    	or     BYTE PTR [ecx+0x82d6a08],dl
     877:	21 69 08             	and    DWORD PTR [ecx+0x8],ebp
     87a:	21 59 59             	and    DWORD PTR [ecx+0x59],ebx
     87d:	77 08                	ja     887 <__fmodf2+0x85b>
     87f:	22 68 08             	and    ch,BYTE PTR [eax+0x8]
     882:	c9                   	leave  
     883:	08 83 59 5b 08 22    	or     BYTE PTR [ebx+0x22085b59],al
     889:	68 08 c9 08 83       	push   0x8308c908
     88e:	5b                   	pop    ebx
     88f:	08 22                	or     BYTE PTR [edx],ah
     891:	68 08 c9 08 83       	push   0x8308c908
     896:	5b                   	pop    ebx
     897:	f4                   	hlt    
     898:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     89c:	31 f4                	xor    esp,esi
     89e:	68 08 91 5a 31       	push   0x315a9108
     8a3:	f4                   	hlt    
     8a4:	68 08 91 5a 31       	push   0x315a9108
     8a9:	08 21                	or     BYTE PTR [ecx],ah
     8ab:	08 75 02             	or     BYTE PTR [ebp+0x2],dh
     8ae:	57                   	push   edi
     8af:	13 77 08             	adc    esi,DWORD PTR [edi+0x8]
     8b2:	21 02                	and    DWORD PTR [edx],eax
     8b4:	57                   	push   edi
     8b5:	13 77 08             	adc    esi,DWORD PTR [edi+0x8]
     8b8:	21 02                	and    DWORD PTR [edx],eax
     8ba:	57                   	push   edi
     8bb:	14 77                	adc    al,0x77
     8bd:	c9                   	leave  
     8be:	c9                   	leave  
     8bf:	3f                   	aas    
     8c0:	c9                   	leave  
     8c1:	08 83 3f c9 08 4b    	or     BYTE PTR [ebx+0x4b08c93f],al
     8c7:	3f                   	aas    
     8c8:	f3 76 a1             	repz jbe 86c <__fmodf2+0x840>
     8cb:	31 f3                	xor    ebx,esi
     8cd:	75 08                	jne    8d7 <__fmodf2+0x8ab>
     8cf:	67 08 83 3d 31       	or     BYTE PTR [bp+di+0x313d],al
     8d4:	08 21                	or     BYTE PTR [ecx],ah
     8d6:	d8 bc 08 31 08 75 68 	fdivr  DWORD PTR [eax+ecx*1+0x68750831]
     8dd:	67 02 22             	add    ah,BYTE PTR [bp+si]
     8e0:	14 08                	adc    al,0x8
     8e2:	ae                   	scas   al,BYTE PTR es:[edi]
     8e3:	4c                   	dec    esp
     8e4:	ca 08 4b             	retf   0x4b08
     8e7:	91                   	xchg   ecx,eax
     8e8:	67 bc 08 83 08 75    	addr16 mov esp,0x75088308
     8ee:	67 02 2f             	add    ch,BYTE PTR [bx]
     8f1:	14 00                	adc    al,0x0
     8f3:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     8f6:	02 31                	add    dh,BYTE PTR [ecx]
     8f8:	13 00                	adc    eax,DWORD PTR [eax]
     8fa:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     8fd:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     903:	bb 00 02 04 02       	mov    ebx,0x2040200
     908:	03 76 4a             	add    esi,DWORD PTR [esi+0x4a]
     90b:	00 02                	add    BYTE PTR [edx],al
     90d:	04 01                	add    al,0x1
     90f:	06                   	push   es
     910:	4a                   	dec    edx
     911:	06                   	push   es
     912:	03 0c ba             	add    ecx,DWORD PTR [edx+edi*4]
     915:	08 91 08 b0 3f 5b    	or     BYTE PTR [ecx+0x5b3fb008],dl
     91b:	f3 75 08             	repz jne 926 <__fmodf2+0x8fa>
     91e:	67 08 ad 3d 31       	or     BYTE PTR [di+0x313d],ch
     923:	c9                   	leave  
     924:	c9                   	leave  
     925:	32 c9                	xor    cl,cl
     927:	f3 3f                	repz aas 
     929:	c9                   	leave  
     92a:	08 13                	or     BYTE PTR [ebx],dl
     92c:	31 f5                	xor    ebp,esi
     92e:	75 76                	jne    9a6 <__fmodf2+0x97a>
     930:	ad                   	lods   eax,DWORD PTR ds:[esi]
     931:	bb 08 68 08 5c       	mov    ebx,0x5c086808
     936:	67 75 91             	addr16 jne 8ca <__fmodf2+0x89e>
     939:	5a                   	pop    edx
     93a:	75 67                	jne    9a3 <__fmodf2+0x977>
     93c:	31 67 67             	xor    DWORD PTR [edi+0x67],esp
     93f:	08 91 76 31 08 21    	or     BYTE PTR [ecx+0x21083176],dl
     945:	67 08 91 76 03       	or     BYTE PTR [bx+di+0x376],dl
     94a:	66 2e 03 12          	add    dx,WORD PTR cs:[edx]
     94e:	3c 44                	cmp    al,0x44
     950:	00 02                	add    BYTE PTR [edx],al
     952:	04 02                	add    al,0x2
     954:	03 61 20             	add    esp,DWORD PTR [ecx+0x20]
     957:	00 02                	add    BYTE PTR [edx],al
     959:	04 01                	add    al,0x1
     95b:	06                   	push   es
     95c:	4a                   	dec    edx
     95d:	00 02                	add    BYTE PTR [edx],al
     95f:	04 03                	add    al,0x3
     961:	82                   	(bad)  
     962:	06                   	push   es
     963:	03 23                	add    esp,DWORD PTR [ebx]
     965:	d6                   	(bad)  
     966:	00 02                	add    BYTE PTR [edx],al
     968:	04 01                	add    al,0x1
     96a:	06                   	push   es
     96b:	66 06                	pushw  es
     96d:	83 08 92             	or     DWORD PTR [eax],0xffffff92
     970:	3d 31 c9 08 13       	cmp    eax,0x1308c931
     975:	31 08                	xor    DWORD PTR [eax],ecx
     977:	5b                   	pop    ebx
     978:	08 9f d7 92 08 91    	or     BYTE PTR [edi-0x6ef76d29],bl
     97e:	08 23                	or     BYTE PTR [ebx],ah
     980:	08 bb 08 75 00 02    	or     BYTE PTR [ebx+0x2007508],bh
     986:	04 01                	add    al,0x1
     988:	06                   	push   es
     989:	66 06                	pushw  es
     98b:	84 67 08             	test   BYTE PTR [edi+0x8],ah
     98e:	f3 c9                	repz leave 
     990:	84 4c c9 00          	test   BYTE PTR [ecx+ecx*8+0x0],cl
     994:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     997:	06                   	push   es
     998:	66 06                	pushw  es
     99a:	9f                   	lahf   
     99b:	4c                   	dec    esp
     99c:	00 02                	add    BYTE PTR [edx],al
     99e:	04 01                	add    al,0x1
     9a0:	06                   	push   es
     9a1:	66 06                	pushw  es
     9a3:	d8 02                	fadd   DWORD PTR [edx]
     9a5:	27                   	daa    
     9a6:	13 ad 91 bc 08 83    	adc    ebp,DWORD PTR [ebp-0x7cf7436f]
     9ac:	08 bb 00 02 04 01    	or     BYTE PTR [ebx+0x1040200],bh
     9b2:	06                   	push   es
     9b3:	9e                   	sahf   
     9b4:	06                   	push   es
     9b5:	84 67 08             	test   BYTE PTR [edi+0x8],ah
     9b8:	f3 c9                	repz leave 
     9ba:	62 5f 03             	bound  ebx,QWORD PTR [edi+0x3]
     9bd:	79 02                	jns    9c1 <__fmodf2+0x995>
     9bf:	34 01                	xor    al,0x1
     9c1:	03 0c 58             	add    ecx,DWORD PTR [eax+ebx*2]
     9c4:	08 75 67             	or     BYTE PTR [ebp+0x67],dh
     9c7:	02 2f                	add    ch,BYTE PTR [edi]
     9c9:	14 02                	adc    al,0x2
     9cb:	31 13                	xor    DWORD PTR [ebx],edx
     9cd:	00 02                	add    BYTE PTR [edx],al
     9cf:	04 02                	add    al,0x2
     9d1:	08 bc 00 02 04 02 bb 	or     BYTE PTR [eax+eax*1-0x44fdfbfe],bh
     9d8:	00 02                	add    BYTE PTR [edx],al
     9da:	04 02                	add    al,0x2
     9dc:	03 67 74             	add    esp,DWORD PTR [edi+0x74]
     9df:	00 02                	add    BYTE PTR [edx],al
     9e1:	04 01                	add    al,0x1
     9e3:	06                   	push   es
     9e4:	4a                   	dec    edx
     9e5:	06                   	push   es
     9e6:	03 1b                	add    ebx,DWORD PTR [ebx]
     9e8:	d6                   	(bad)  
     9e9:	3d 77 f3 08 13       	cmp    eax,0x1308f377
     9ee:	31 c9                	xor    ecx,ecx
     9f0:	08 3d 31 c9 c9 3f    	or     BYTE PTR ds:0x3fc9c931,bh
     9f6:	c9                   	leave  
     9f7:	08 13                	or     BYTE PTR [ebx],dl
     9f9:	02 02                	add    al,BYTE PTR [edx]
     9fb:	00 01                	add    BYTE PTR [ecx],al
     9fd:	01 f7                	add    edi,esi
     9ff:	00 00                	add    BYTE PTR [eax],al
     a01:	00 02                	add    BYTE PTR [edx],al
     a03:	00 d8                	add    al,bl
     a05:	00 00                	add    BYTE PTR [eax],al
     a07:	00 01                	add    BYTE PTR [ecx],al
     a09:	01 fb                	add    ebx,edi
     a0b:	0e                   	push   cs
     a0c:	0d 00 01 01 01       	or     eax,0x1010100
     a11:	01 00                	add    DWORD PTR [eax],eax
     a13:	00 00                	add    BYTE PTR [eax],al
     a15:	01 00                	add    DWORD PTR [eax],eax
     a17:	00 01                	add    BYTE PTR [ecx],al
     a19:	73 72                	jae    a8d <__fmodf2+0xa61>
     a1b:	63 00                	arpl   WORD PTR [eax],ax
     a1d:	2f                   	das    
     a1e:	68 6f 6d 65 2f       	push   0x2f656d6f
     a23:	79 6f                	jns    a94 <__fmodf2+0xa68>
     a25:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     a2c:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     a2f:	73 73                	jae    aa4 <__fmodf2+0xa78>
     a31:	2f                   	das    
     a32:	6c                   	ins    BYTE PTR es:[edi],dx
     a33:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     a3a:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     a40:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     a46:	78 2d                	js     a75 <__fmodf2+0xa49>
     a48:	67 6e                	outs   dx,BYTE PTR ds:[si]
     a4a:	75 2f                	jne    a7b <__fmodf2+0xa4f>
     a4c:	35 2e 33 2e 30       	xor    eax,0x302e332e
     a51:	2f                   	das    
     a52:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     a59:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     a5c:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     a60:	65                   	gs
     a61:	2f                   	das    
     a62:	2e                   	cs
     a63:	2e                   	cs
     a64:	2f                   	das    
     a65:	2e                   	cs
     a66:	2e                   	cs
     a67:	2f                   	das    
     a68:	2e                   	cs
     a69:	2e                   	cs
     a6a:	2f                   	das    
     a6b:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     a6f:	6a 2f                	push   0x2f
     a71:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     a74:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     a7b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     a7c:	65                   	gs
     a7d:	6c                   	ins    BYTE PTR es:[edi],dx
     a7e:	2f                   	das    
     a7f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     a86:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     a89:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     a8d:	65 00 00             	add    BYTE PTR gs:[eax],al
     a90:	6c                   	ins    BYTE PTR es:[edi],dx
     a91:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
     a98:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     a9b:	01 00                	add    DWORD PTR [eax],eax
     a9d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     aa0:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     aa7:	63 
     aa8:	2e                   	cs
     aa9:	68 00 02 00 00       	push   0x200
     aae:	73 74                	jae    b24 <__fmodf2+0xaf8>
     ab0:	64                   	fs
     ab1:	64                   	fs
     ab2:	65                   	gs
     ab3:	66                   	data16
     ab4:	2e                   	cs
     ab5:	68 00 02 00 00       	push   0x200
     aba:	73 79                	jae    b35 <__fmodf2+0xb09>
     abc:	73 63                	jae    b21 <__fmodf2+0xaf5>
     abe:	61                   	popa   
     abf:	6c                   	ins    BYTE PTR es:[edi],dx
     ac0:	6c                   	ins    BYTE PTR es:[edi],dx
     ac1:	73 2e                	jae    af1 <__fmodf2+0xac5>
     ac3:	68 00 03 00 00       	push   0x300
     ac8:	74 79                	je     b43 <__fmodf2+0xb17>
     aca:	70 65                	jo     b31 <__fmodf2+0xb05>
     acc:	73 2e                	jae    afc <__fmodf2+0xad0>
     ace:	68 00 04 00 00       	push   0x400
     ad3:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     ad6:	6d                   	ins    DWORD PTR es:[edi],dx
     ad7:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ad8:	6e                   	outs   dx,BYTE PTR ds:[esi]
     ad9:	2e                   	cs
     ada:	68 00 04 00 00       	push   0x400
     adf:	00 00                	add    BYTE PTR [eax],al
     ae1:	05 02 18 22 00       	add    eax,0x221802
     ae6:	9f                   	lahf   
     ae7:	03 0d 01 08 14 ad    	add    ecx,DWORD PTR ds:0xad140801
     aed:	bb bb bb bb bc       	mov    ebx,0xbcbbbbbb
     af2:	08 59 02             	or     BYTE PTR [ecx+0x2],bl
     af5:	05 00 01 01 d2       	add    eax,0xd2010100
     afa:	01 00                	add    DWORD PTR [eax],eax
     afc:	00 02                	add    BYTE PTR [edx],al
     afe:	00 d7                	add    bh,dl
     b00:	00 00                	add    BYTE PTR [eax],al
     b02:	00 01                	add    BYTE PTR [ecx],al
     b04:	01 fb                	add    ebx,edi
     b06:	0e                   	push   cs
     b07:	0d 00 01 01 01       	or     eax,0x1010100
     b0c:	01 00                	add    DWORD PTR [eax],eax
     b0e:	00 00                	add    BYTE PTR [eax],al
     b10:	01 00                	add    DWORD PTR [eax],eax
     b12:	00 01                	add    BYTE PTR [ecx],al
     b14:	73 72                	jae    b88 <__fmodf2+0xb5c>
     b16:	63 00                	arpl   WORD PTR [eax],ax
     b18:	2f                   	das    
     b19:	68 6f 6d 65 2f       	push   0x2f656d6f
     b1e:	79 6f                	jns    b8f <__fmodf2+0xb63>
     b20:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     b27:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     b2a:	73 73                	jae    b9f <__fmodf2+0xb73>
     b2c:	2f                   	das    
     b2d:	6c                   	ins    BYTE PTR es:[edi],dx
     b2e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     b35:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     b3b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     b41:	78 2d                	js     b70 <__fmodf2+0xb44>
     b43:	67 6e                	outs   dx,BYTE PTR ds:[si]
     b45:	75 2f                	jne    b76 <__fmodf2+0xb4a>
     b47:	35 2e 33 2e 30       	xor    eax,0x302e332e
     b4c:	2f                   	das    
     b4d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b54:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     b57:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     b5b:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     b5f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     b63:	65                   	gs
     b64:	2f                   	das    
     b65:	2e                   	cs
     b66:	2e                   	cs
     b67:	2f                   	das    
     b68:	2e                   	cs
     b69:	2e                   	cs
     b6a:	2f                   	das    
     b6b:	2e                   	cs
     b6c:	2e                   	cs
     b6d:	2f                   	das    
     b6e:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     b72:	6a 2f                	push   0x2f
     b74:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     b77:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     b7e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b7f:	65                   	gs
     b80:	6c                   	ins    BYTE PTR es:[edi],dx
     b81:	2f                   	das    
     b82:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b89:	00 00                	add    BYTE PTR [eax],al
     b8b:	6d                   	ins    DWORD PTR es:[edi],dx
     b8c:	61                   	popa   
     b8d:	6c                   	ins    BYTE PTR es:[edi],dx
     b8e:	6c                   	ins    BYTE PTR es:[edi],dx
     b8f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b90:	63 2e                	arpl   WORD PTR [esi],bp
     b92:	63 00                	arpl   WORD PTR [eax],ax
     b94:	01 00                	add    DWORD PTR [eax],eax
     b96:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     b99:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     ba0:	63 
     ba1:	2e                   	cs
     ba2:	68 00 02 00 00       	push   0x200
     ba7:	73 74                	jae    c1d <__fmodf2+0xbf1>
     ba9:	64                   	fs
     baa:	64                   	fs
     bab:	65                   	gs
     bac:	66                   	data16
     bad:	2e                   	cs
     bae:	68 00 02 00 00       	push   0x200
     bb3:	6d                   	ins    DWORD PTR es:[edi],dx
     bb4:	61                   	popa   
     bb5:	6c                   	ins    BYTE PTR es:[edi],dx
     bb6:	6c                   	ins    BYTE PTR es:[edi],dx
     bb7:	6f                   	outs   dx,DWORD PTR ds:[esi]
     bb8:	63 2e                	arpl   WORD PTR [esi],bp
     bba:	68 00 03 00 00       	push   0x300
     bbf:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     bc2:	6d                   	ins    DWORD PTR es:[edi],dx
     bc3:	6f                   	outs   dx,DWORD PTR ds:[esi]
     bc4:	6e                   	outs   dx,BYTE PTR ds:[esi]
     bc5:	2e                   	cs
     bc6:	68 00 03 00 00       	push   0x300
     bcb:	73 79                	jae    c46 <__fmodf2+0xc1a>
     bcd:	73 63                	jae    c32 <__fmodf2+0xc06>
     bcf:	61                   	popa   
     bd0:	6c                   	ins    BYTE PTR es:[edi],dx
     bd1:	6c                   	ins    BYTE PTR es:[edi],dx
     bd2:	73 2e                	jae    c02 <__fmodf2+0xbd6>
     bd4:	68 00 04 00 00       	push   0x400
     bd9:	00 00                	add    BYTE PTR [eax],al
     bdb:	05 02 8c 22 00       	add    eax,0x228c02
     be0:	9f                   	lahf   
     be1:	03 15 01 08 21 02    	add    edx,DWORD PTR ds:0x2210801
     be7:	24 13                	and    al,0x13
     be9:	bb bb bc 69 f5       	mov    ebx,0xf569bcbb
     bee:	92                   	xchg   edx,eax
     bef:	08 85 08 67 00 02    	or     BYTE PTR [ebp+0x2006708],al
     bf5:	04 01                	add    al,0x1
     bf7:	06                   	push   es
     bf8:	66 06                	pushw  es
     bfa:	bc f5 91 76 5b       	mov    esp,0x5b7691f5
     bff:	59                   	pop    ecx
     c00:	31 08                	xor    DWORD PTR [eax],ecx
     c02:	15 00 02 04 01       	adc    eax,0x1040200
     c07:	06                   	push   es
     c08:	e4 06                	in     al,0x6
     c0a:	e7 68                	out    0x68,eax
     c0c:	93                   	xchg   ebx,eax
     c0d:	ca 08 3d             	retf   0x3d08
     c10:	30 03                	xor    BYTE PTR [ebx],al
     c12:	74 90                	je     ba4 <__fmodf2+0xb78>
     c14:	3f                   	aas    
     c15:	03 0e                	add    ecx,DWORD PTR [esi]
     c17:	20 5b f3             	and    BYTE PTR [ebx-0xd],bl
     c1a:	af                   	scas   eax,DWORD PTR es:[edi]
     c1b:	00 02                	add    BYTE PTR [edx],al
     c1d:	04 01                	add    al,0x1
     c1f:	06                   	push   es
     c20:	d6                   	(bad)  
     c21:	00 02                	add    BYTE PTR [edx],al
     c23:	04 02                	add    al,0x2
     c25:	ac                   	lods   al,BYTE PTR ds:[esi]
     c26:	06                   	push   es
     c27:	c9                   	leave  
     c28:	59                   	pop    ecx
     c29:	9f                   	lahf   
     c2a:	93                   	xchg   ebx,eax
     c2b:	00 02                	add    BYTE PTR [edx],al
     c2d:	04 01                	add    al,0x1
     c2f:	06                   	push   es
     c30:	c8 00 02 04          	enter  0x200,0x4
     c34:	02 9e 06 ca 59 31    	add    bl,BYTE PTR [esi+0x3159ca06]
     c3a:	08 14 67             	or     BYTE PTR [edi+eiz*2],dl
     c3d:	30 08                	xor    BYTE PTR [eax],cl
     c3f:	22 00                	and    al,BYTE PTR [eax]
     c41:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     c44:	08 3e                	or     BYTE PTR [esi],bh
     c46:	30 ca                	xor    dl,cl
     c48:	00 02                	add    BYTE PTR [edx],al
     c4a:	04 02                	add    al,0x2
     c4c:	08 3e                	or     BYTE PTR [esi],bh
     c4e:	30 03                	xor    BYTE PTR [ebx],al
     c50:	72 90                	jb     be2 <__fmodf2+0xbb6>
     c52:	00 02                	add    BYTE PTR [edx],al
     c54:	04 01                	add    al,0x1
     c56:	06                   	push   es
     c57:	c8 06 03 11          	enter  0x306,0x11
     c5b:	ac                   	lods   al,BYTE PTR ds:[esi]
     c5c:	69 08 25 75 69 67    	imul   ecx,DWORD PTR [eax],0x67697525
     c62:	75 08                	jne    c6c <__fmodf2+0xc40>
     c64:	91                   	xchg   ecx,eax
     c65:	bc 08 13 68 75       	mov    esp,0x75681308
     c6a:	08 13                	or     BYTE PTR [ebx],dl
     c6c:	02 37                	add    dh,BYTE PTR [edi]
     c6e:	13 b0 08 13 08 91    	adc    esi,DWORD PTR [eax-0x6ef7ecf8]
     c74:	a0 bb 08 67 08       	mov    al,ds:0x86708bb
     c79:	5a                   	pop    edx
     c7a:	08 3d 08 e5 f3 02    	or     BYTE PTR ds:0x2f3e508,bh
     c80:	26 13 bc ad ad 08 e7 	adc    edi,DWORD PTR es:[ebp+ebp*4+0x8e708ad]
     c87:	08 
     c88:	e5 ad                	in     eax,0xad
     c8a:	91                   	xchg   ecx,eax
     c8b:	91                   	xchg   ecx,eax
     c8c:	75 08                	jne    c96 <__fmodf2+0xc6a>
     c8e:	13 a0 bb bd 08 e5    	adc    esp,DWORD PTR [eax-0x1af74245]
     c94:	91                   	xchg   ecx,eax
     c95:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
     c98:	91                   	xchg   ecx,eax
     c99:	91                   	xchg   ecx,eax
     c9a:	3d 5b f3 d7 31       	cmp    eax,0x31d7f35b
     c9f:	08 22                	or     BYTE PTR [edx],ah
     ca1:	08 93 68 92 67 08    	or     BYTE PTR [ebx+0x8679268],dl
     ca7:	67 00 02             	add    BYTE PTR [bp+si],al
     caa:	04 01                	add    al,0x1
     cac:	06                   	push   es
     cad:	66 06                	pushw  es
     caf:	ad                   	lods   eax,DWORD PTR ds:[esi]
     cb0:	84 67 77             	test   BYTE PTR [edi+0x77],ah
     cb3:	08 13                	or     BYTE PTR [ebx],dl
     cb5:	02 24 17             	add    ah,BYTE PTR [edi+edx*1]
     cb8:	08 e5                	or     ch,ah
     cba:	08 93 d7 3d 5b f3    	or     BYTE PTR [ebx-0xca4c229],dl
     cc0:	08 13                	or     BYTE PTR [ebx],dl
     cc2:	31 f3                	xor    ebx,esi
     cc4:	d7                   	xlat   BYTE PTR ds:[ebx]
     cc5:	3f                   	aas    
     cc6:	08 13                	or     BYTE PTR [ebx],dl
     cc8:	08 9f 02 06 00 01    	or     BYTE PTR [edi+0x1000602],bl
     cce:	01 d7                	add    edi,edx
     cd0:	00 00                	add    BYTE PTR [eax],al
     cd2:	00 02                	add    BYTE PTR [edx],al
     cd4:	00 90 00 00 00 01    	add    BYTE PTR [eax+0x1000000],dl
     cda:	01 fb                	add    ebx,edi
     cdc:	0e                   	push   cs
     cdd:	0d 00 01 01 01       	or     eax,0x1010100
     ce2:	01 00                	add    DWORD PTR [eax],eax
     ce4:	00 00                	add    BYTE PTR [eax],al
     ce6:	01 00                	add    DWORD PTR [eax],eax
     ce8:	00 01                	add    BYTE PTR [ecx],al
     cea:	73 72                	jae    d5e <__fmodf2+0xd32>
     cec:	63 00                	arpl   WORD PTR [eax],ax
     cee:	2f                   	das    
     cef:	68 6f 6d 65 2f       	push   0x2f656d6f
     cf4:	79 6f                	jns    d65 <__fmodf2+0xd39>
     cf6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     cfd:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     d00:	73 73                	jae    d75 <__fmodf2+0xd49>
     d02:	2f                   	das    
     d03:	6c                   	ins    BYTE PTR es:[edi],dx
     d04:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     d0b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     d11:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     d17:	78 2d                	js     d46 <__fmodf2+0xd1a>
     d19:	67 6e                	outs   dx,BYTE PTR ds:[si]
     d1b:	75 2f                	jne    d4c <__fmodf2+0xd20>
     d1d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     d22:	2f                   	das    
     d23:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d2a:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     d2d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     d31:	65 00 00             	add    BYTE PTR gs:[eax],al
     d34:	6d                   	ins    DWORD PTR es:[edi],dx
     d35:	65                   	gs
     d36:	6d                   	ins    DWORD PTR es:[edi],dx
     d37:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     d3a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     d3d:	01 00                	add    DWORD PTR [eax],eax
     d3f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     d42:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     d49:	63 
     d4a:	2e                   	cs
     d4b:	68 00 02 00 00       	push   0x200
     d50:	73 74                	jae    dc6 <__fmodf2+0xd9a>
     d52:	64                   	fs
     d53:	64                   	fs
     d54:	65                   	gs
     d55:	66                   	data16
     d56:	2e                   	cs
     d57:	68 00 02 00 00       	push   0x200
     d5c:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     d5f:	6d                   	ins    DWORD PTR es:[edi],dx
     d60:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d61:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d62:	2e                   	cs
     d63:	68 00 03 00 00       	push   0x300
     d68:	00 00                	add    BYTE PTR [eax],al
     d6a:	05 02 50 29 00       	add    eax,0x295002
     d6f:	9f                   	lahf   
     d70:	03 0b                	add    ecx,DWORD PTR [ebx]
     d72:	01 f5                	add    ebp,esi
     d74:	d7                   	xlat   BYTE PTR ds:[ebx]
     d75:	d7                   	xlat   BYTE PTR ds:[ebx]
     d76:	68 91 67 68 83       	push   0x83686791
     d7b:	91                   	xchg   ecx,eax
     d7c:	91                   	xchg   ecx,eax
     d7d:	2f                   	das    
     d7e:	08 1f                	or     BYTE PTR [edi],bl
     d80:	e8 08 57 ca 84       	call   84ca648d <sysEnter_Vector+0x84b7648d>
     d85:	68 83 67 68 83       	push   0x83686783
     d8a:	91                   	xchg   ecx,eax
     d8b:	91                   	xchg   ecx,eax
     d8c:	2f                   	das    
     d8d:	08 1f                	or     BYTE PTR [edi],bl
     d8f:	e8 08 57 ca 5c       	call   5cca649c <sysEnter_Vector+0x5cb7649c>
     d94:	67 68 83 67 67 2f    	addr16 push 0x2f676783
     d9a:	08 2d e8 08 65 ca    	or     BYTE PTR ds:0xca6508e8,ch
     da0:	3e                   	ds
     da1:	31 c9                	xor    ecx,ecx
     da3:	08 13                	or     BYTE PTR [ebx],dl
     da5:	02 02                	add    al,BYTE PTR [edx]
     da7:	00 01                	add    BYTE PTR [ecx],al
     da9:	01 ba 00 00 00 02    	add    DWORD PTR [edx+0x2000000],edi
     daf:	00 90 00 00 00 01    	add    BYTE PTR [eax+0x1000000],dl
     db5:	01 fb                	add    ebx,edi
     db7:	0e                   	push   cs
     db8:	0d 00 01 01 01       	or     eax,0x1010100
     dbd:	01 00                	add    DWORD PTR [eax],eax
     dbf:	00 00                	add    BYTE PTR [eax],al
     dc1:	01 00                	add    DWORD PTR [eax],eax
     dc3:	00 01                	add    BYTE PTR [ecx],al
     dc5:	73 72                	jae    e39 <__fmodf2+0xe0d>
     dc7:	63 00                	arpl   WORD PTR [eax],ax
     dc9:	2f                   	das    
     dca:	68 6f 6d 65 2f       	push   0x2f656d6f
     dcf:	79 6f                	jns    e40 <__fmodf2+0xe14>
     dd1:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     dd8:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     ddb:	73 73                	jae    e50 <__fmodf2+0xe24>
     ddd:	2f                   	das    
     dde:	6c                   	ins    BYTE PTR es:[edi],dx
     ddf:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     de6:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     dec:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     df2:	78 2d                	js     e21 <__fmodf2+0xdf5>
     df4:	67 6e                	outs   dx,BYTE PTR ds:[si]
     df6:	75 2f                	jne    e27 <__fmodf2+0xdfb>
     df8:	35 2e 33 2e 30       	xor    eax,0x302e332e
     dfd:	2f                   	das    
     dfe:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     e05:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     e08:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     e0c:	65 00 00             	add    BYTE PTR gs:[eax],al
     e0f:	6d                   	ins    DWORD PTR es:[edi],dx
     e10:	65                   	gs
     e11:	6d                   	ins    DWORD PTR es:[edi],dx
     e12:	73 65                	jae    e79 <__fmodf2+0xe4d>
     e14:	74 2e                	je     e44 <__fmodf2+0xe18>
     e16:	63 00                	arpl   WORD PTR [eax],ax
     e18:	01 00                	add    DWORD PTR [eax],eax
     e1a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     e1d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     e24:	63 
     e25:	2e                   	cs
     e26:	68 00 02 00 00       	push   0x200
     e2b:	73 74                	jae    ea1 <__fmodf2+0xe75>
     e2d:	64                   	fs
     e2e:	64                   	fs
     e2f:	65                   	gs
     e30:	66                   	data16
     e31:	2e                   	cs
     e32:	68 00 02 00 00       	push   0x200
     e37:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     e3a:	6d                   	ins    DWORD PTR es:[edi],dx
     e3b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e3c:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e3d:	2e                   	cs
     e3e:	68 00 03 00 00       	push   0x300
     e43:	00 00                	add    BYTE PTR [eax],al
     e45:	05 02 0c 2b 00       	add    eax,0x2b0c02
     e4a:	9f                   	lahf   
     e4b:	1a f3                	sbb    dh,bl
     e4d:	67 67 08 83 67 08    	addr32 or BYTE PTR [bp+di+0x867],al
     e53:	ca 9f 2f             	retf   0x2f9f
     e56:	d5 bd                	aad    0xbd
     e58:	9f                   	lahf   
     e59:	2f                   	das    
     e5a:	f1                   	icebp  
     e5b:	bf d5 cb 3d 31       	mov    edi,0x313dcbd5
     e60:	c9                   	leave  
     e61:	08 13                	or     BYTE PTR [ebx],dl
     e63:	02 02                	add    al,BYTE PTR [edx]
     e65:	00 01                	add    BYTE PTR [ecx],al
     e67:	01 51 00             	add    DWORD PTR [ecx+0x0],edx
     e6a:	00 00                	add    BYTE PTR [eax],al
     e6c:	02 00                	add    al,BYTE PTR [eax]
     e6e:	23 00                	and    eax,DWORD PTR [eax]
     e70:	00 00                	add    BYTE PTR [eax],al
     e72:	01 01                	add    DWORD PTR [ecx],eax
     e74:	fb                   	sti    
     e75:	0e                   	push   cs
     e76:	0d 00 01 01 01       	or     eax,0x1010100
     e7b:	01 00                	add    DWORD PTR [eax],eax
     e7d:	00 00                	add    BYTE PTR [eax],al
     e7f:	01 00                	add    DWORD PTR [eax],eax
     e81:	00 01                	add    BYTE PTR [ecx],al
     e83:	73 72                	jae    ef7 <__fmodf2+0xecb>
     e85:	63 00                	arpl   WORD PTR [eax],ax
     e87:	00 6d 6f             	add    BYTE PTR [ebp+0x6f],ch
     e8a:	64                   	fs
     e8b:	66                   	data16
     e8c:	2e                   	cs
     e8d:	61                   	popa   
     e8e:	73 6d                	jae    efd <__fmodf2+0xed1>
     e90:	00 01                	add    BYTE PTR [ecx],al
     e92:	00 00                	add    BYTE PTR [eax],al
     e94:	00 00                	add    BYTE PTR [eax],al
     e96:	05 02 00 00 00       	add    eax,0x2
     e9b:	00 03                	add    BYTE PTR [ebx],al
     e9d:	0e                   	push   cs
     e9e:	01 21                	add    DWORD PTR [ecx],esp
     ea0:	2f                   	das    
     ea1:	21 3d 3d 2f 2f 2f    	and    DWORD PTR ds:0x2f2f2f3d,edi
     ea7:	3d 75 2f 21 2f       	cmp    eax,0x2f212f75
     eac:	2f                   	das    
     ead:	2f                   	das    
     eae:	2f                   	das    
     eaf:	21 2f                	and    DWORD PTR [edi],ebp
     eb1:	2f                   	das    
     eb2:	2f                   	das    
     eb3:	2f                   	das    
     eb4:	2f                   	das    
     eb5:	21 2f                	and    DWORD PTR [edi],ebp
     eb7:	21 02                	and    DWORD PTR [edx],eax
     eb9:	01 00                	add    DWORD PTR [eax],eax
     ebb:	01 01                	add    DWORD PTR [ecx],eax
     ebd:	df 00                	fild   WORD PTR [eax]
     ebf:	00 00                	add    BYTE PTR [eax],al
     ec1:	02 00                	add    al,BYTE PTR [eax]
     ec3:	c1 00 00             	rol    DWORD PTR [eax],0x0
     ec6:	00 01                	add    BYTE PTR [ecx],al
     ec8:	01 fb                	add    ebx,edi
     eca:	0e                   	push   cs
     ecb:	0d 00 01 01 01       	or     eax,0x1010100
     ed0:	01 00                	add    DWORD PTR [eax],eax
     ed2:	00 00                	add    BYTE PTR [eax],al
     ed4:	01 00                	add    DWORD PTR [eax],eax
     ed6:	00 01                	add    BYTE PTR [ecx],al
     ed8:	73 72                	jae    f4c <__fmodf2+0xf20>
     eda:	63 00                	arpl   WORD PTR [eax],ax
     edc:	2f                   	das    
     edd:	68 6f 6d 65 2f       	push   0x2f656d6f
     ee2:	79 6f                	jns    f53 <__fmodf2+0xf27>
     ee4:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     eeb:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     eee:	73 73                	jae    f63 <__fmodf2+0xf37>
     ef0:	2f                   	das    
     ef1:	6c                   	ins    BYTE PTR es:[edi],dx
     ef2:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     ef9:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     eff:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     f05:	78 2d                	js     f34 <__fmodf2+0xf08>
     f07:	67 6e                	outs   dx,BYTE PTR ds:[si]
     f09:	75 2f                	jne    f3a <__fmodf2+0xf0e>
     f0b:	35 2e 33 2e 30       	xor    eax,0x302e332e
     f10:	2f                   	das    
     f11:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f18:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     f1b:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     f1f:	65                   	gs
     f20:	2f                   	das    
     f21:	2e                   	cs
     f22:	2e                   	cs
     f23:	2f                   	das    
     f24:	2e                   	cs
     f25:	2e                   	cs
     f26:	2f                   	das    
     f27:	2e                   	cs
     f28:	2e                   	cs
     f29:	2f                   	das    
     f2a:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     f2e:	6a 2f                	push   0x2f
     f30:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     f33:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     f3a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f3b:	65                   	gs
     f3c:	6c                   	ins    BYTE PTR es:[edi],dx
     f3d:	2f                   	das    
     f3e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f45:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     f48:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     f4c:	65 00 00             	add    BYTE PTR gs:[eax],al
     f4f:	70 69                	jo     fba <__fmodf2+0xf8e>
     f51:	70 65                	jo     fb8 <__fmodf2+0xf8c>
     f53:	5f                   	pop    edi
     f54:	6c                   	ins    BYTE PTR es:[edi],dx
     f55:	69 62 2e 63 00 01 00 	imul   esp,DWORD PTR [edx+0x2e],0x10063
     f5c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f5f:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     f66:	63 
     f67:	2e                   	cs
     f68:	68 00 02 00 00       	push   0x200
     f6d:	73 79                	jae    fe8 <__fmodf2+0xfbc>
     f6f:	73 63                	jae    fd4 <__fmodf2+0xfa8>
     f71:	61                   	popa   
     f72:	6c                   	ins    BYTE PTR es:[edi],dx
     f73:	6c                   	ins    BYTE PTR es:[edi],dx
     f74:	73 2e                	jae    fa4 <__fmodf2+0xf78>
     f76:	68 00 03 00 00       	push   0x300
     f7b:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     f7e:	6d                   	ins    DWORD PTR es:[edi],dx
     f7f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     f80:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f81:	2e                   	cs
     f82:	68 00 04 00 00       	push   0x400
     f87:	00 00                	add    BYTE PTR [eax],al
     f89:	05 02 f4 2b 00       	add    eax,0x2bf402
     f8e:	9f                   	lahf   
     f8f:	03 0a                	add    ecx,DWORD PTR [edx]
     f91:	01 08                	add    DWORD PTR [eax],ecx
     f93:	13 08                	adc    ecx,DWORD PTR [eax]
     f95:	2f                   	das    
     f96:	5b                   	pop    ebx
     f97:	08 13                	or     BYTE PTR [ebx],dl
     f99:	08 75 02             	or     BYTE PTR [ebp+0x2],dh
     f9c:	05 00 01 01 5c       	add    eax,0x5c010100
     fa1:	01 00                	add    DWORD PTR [eax],eax
     fa3:	00 02                	add    BYTE PTR [edx],al
     fa5:	00 a8 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ch
     fab:	01 fb                	add    ebx,edi
     fad:	0e                   	push   cs
     fae:	0d 00 01 01 01       	or     eax,0x1010100
     fb3:	01 00                	add    DWORD PTR [eax],eax
     fb5:	00 00                	add    BYTE PTR [eax],al
     fb7:	01 00                	add    DWORD PTR [eax],eax
     fb9:	00 01                	add    BYTE PTR [ecx],al
     fbb:	73 72                	jae    102f <__fmodf2+0x1003>
     fbd:	63 00                	arpl   WORD PTR [eax],ax
     fbf:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     fc6:	00 2f                	add    BYTE PTR [edi],ch
     fc8:	68 6f 6d 65 2f       	push   0x2f656d6f
     fcd:	79 6f                	jns    103e <__fmodf2+0x1012>
     fcf:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     fd6:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     fd9:	73 73                	jae    104e <__fmodf2+0x1022>
     fdb:	2f                   	das    
     fdc:	6c                   	ins    BYTE PTR es:[edi],dx
     fdd:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     fe4:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     fea:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     ff0:	78 2d                	js     101f <__fmodf2+0xff3>
     ff2:	67 6e                	outs   dx,BYTE PTR ds:[si]
     ff4:	75 2f                	jne    1025 <__fmodf2+0xff9>
     ff6:	35 2e 33 2e 30       	xor    eax,0x302e332e
     ffb:	2f                   	das    
     ffc:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1003:	00 00                	add    BYTE PTR [eax],al
    1005:	70 72                	jo     1079 <__fmodf2+0x104d>
    1007:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1008:	63 69 6e             	arpl   WORD PTR [ecx+0x6e],bp
    100b:	66 6f                	outs   dx,WORD PTR ds:[esi]
    100d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1010:	01 00                	add    DWORD PTR [eax],eax
    1012:	00 70 72             	add    BYTE PTR [eax+0x72],dh
    1015:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1016:	63 69 6e             	arpl   WORD PTR [ecx+0x6e],bp
    1019:	66 6f                	outs   dx,WORD PTR ds:[esi]
    101b:	2e                   	cs
    101c:	68 00 02 00 00       	push   0x200
    1021:	73 74                	jae    1097 <__fmodf2+0x106b>
    1023:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    102a:	63 
    102b:	2e                   	cs
    102c:	68 00 03 00 00       	push   0x300
    1031:	74 69                	je     109c <__fmodf2+0x1070>
    1033:	6d                   	ins    DWORD PTR es:[edi],dx
    1034:	65                   	gs
    1035:	2e                   	cs
    1036:	68 00 02 00 00       	push   0x200
    103b:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1042:	02 00                	add    al,BYTE PTR [eax]
    1044:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
    1047:	6d                   	ins    DWORD PTR es:[edi],dx
    1048:	6d                   	ins    DWORD PTR es:[edi],dx
    1049:	6f                   	outs   dx,DWORD PTR ds:[esi]
    104a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    104b:	2e                   	cs
    104c:	68 00 02 00 00       	push   0x200
    1051:	00 00                	add    BYTE PTR [eax],al
    1053:	05 02 4c 2c 00       	add    eax,0x2c4c02
    1058:	9f                   	lahf   
    1059:	03 10                	add    edx,DWORD PTR [eax]
    105b:	01 08                	add    DWORD PTR [eax],ecx
    105d:	59                   	pop    ecx
    105e:	f4                   	hlt    
    105f:	79 08                	jns    1069 <__fmodf2+0x103d>
    1061:	2f                   	das    
    1062:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
    1065:	5a                   	pop    edx
    1066:	08 4b 5a             	or     BYTE PTR [ebx+0x5a],cl
    1069:	08 a1 08 13 84 5a    	or     BYTE PTR [ecx+0x5a841308],ah
    106f:	bb 5a 08 59 5a       	mov    ebx,0x5a59085a
    1074:	08 59 5a             	or     BYTE PTR [ecx+0x5a],bl
    1077:	08 59 5a             	or     BYTE PTR [ecx+0x5a],bl
    107a:	08 59 5a             	or     BYTE PTR [ecx+0x5a],bl
    107d:	08 83 08 af 57 08    	or     BYTE PTR [ebx+0x857af08],al
    1083:	59                   	pop    ecx
    1084:	5a                   	pop    edx
    1085:	08 bb 08 f3 08 e5    	or     BYTE PTR [ebx-0x1af70cf8],bh
    108b:	08 9f 5a 08 59 08    	or     BYTE PTR [edi+0x859085a],bl
    1091:	c9                   	leave  
    1092:	08 f4                	or     ah,dh
    1094:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
    1097:	83 08 59             	or     DWORD PTR [eax],0x59
    109a:	02 2e                	add    ch,BYTE PTR [esi]
    109c:	13 02                	adc    eax,DWORD PTR [edx]
    109e:	39 13                	cmp    DWORD PTR [ebx],edx
    10a0:	bd 30 08 59 30       	mov    ebp,0x30590830
    10a5:	08 59 22             	or     BYTE PTR [ecx+0x22],bl
    10a8:	4b                   	dec    ebx
    10a9:	03 46 08             	add    eax,DWORD PTR [esi+0x8]
    10ac:	3c 03                	cmp    al,0x3
    10ae:	3c 9e                	cmp    al,0x9e
    10b0:	3e                   	ds
    10b1:	77 f3                	ja     10a6 <__fmodf2+0x107a>
    10b3:	08 2f                	or     BYTE PTR [edi],ch
    10b5:	31 08                	xor    DWORD PTR [eax],ecx
    10b7:	5b                   	pop    ebx
    10b8:	08 14 9f             	or     BYTE PTR [edi+ebx*4],dl
    10bb:	08 5b 08             	or     BYTE PTR [ebx+0x8],bl
    10be:	f6 bc 08 e6 08 83 02 	idiv   BYTE PTR [eax+ecx*1+0x28308e6]
    10c5:	24 13                	and    al,0x13
    10c7:	08 83 08 f4 08 ad    	or     BYTE PTR [ebx-0x52f70bf8],al
    10cd:	a1 08 ad d8 a0       	mov    eax,ds:0xa0d8ad08
    10d2:	08 ae 02 27 13 08    	or     BYTE PTR [esi+0x8132702],ch
    10d8:	4b                   	dec    ebx
    10d9:	08 4b 02             	or     BYTE PTR [ebx+0x2],cl
    10dc:	22 13                	and    dl,BYTE PTR [ebx]
    10de:	08 3d 08 75 91 08    	or     BYTE PTR ds:0x8917508,bh
    10e4:	ad                   	lods   eax,DWORD PTR ds:[esi]
    10e5:	67 03 6b 08          	add    ebp,DWORD PTR [bp+di+0x8]
    10e9:	3c 00                	cmp    al,0x0
    10eb:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    10ee:	03 78 20             	add    edi,DWORD PTR [eax+0x20]
    10f1:	00 02                	add    BYTE PTR [edx],al
    10f3:	04 01                	add    al,0x1
    10f5:	06                   	push   es
    10f6:	4a                   	dec    edx
    10f7:	06                   	push   es
    10f8:	03 24 ba             	add    esp,DWORD PTR [edx+edi*4]
    10fb:	02 08                	add    cl,BYTE PTR [eax]
    10fd:	00 01                	add    BYTE PTR [ecx],al
    10ff:	01 9f 05 00 00 02    	add    DWORD PTR [edi+0x2000005],ebx
    1105:	00 c5                	add    ch,al
    1107:	00 00                	add    BYTE PTR [eax],al
    1109:	00 01                	add    BYTE PTR [ecx],al
    110b:	01 fb                	add    ebx,edi
    110d:	0e                   	push   cs
    110e:	0d 00 01 01 01       	or     eax,0x1010100
    1113:	01 00                	add    DWORD PTR [eax],eax
    1115:	00 00                	add    BYTE PTR [eax],al
    1117:	01 00                	add    DWORD PTR [eax],eax
    1119:	00 01                	add    BYTE PTR [ecx],al
    111b:	73 72                	jae    118f <__fmodf2+0x1163>
    111d:	63 00                	arpl   WORD PTR [eax],ax
    111f:	2f                   	das    
    1120:	68 6f 6d 65 2f       	push   0x2f656d6f
    1125:	79 6f                	jns    1196 <__fmodf2+0x116a>
    1127:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    112e:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1131:	73 73                	jae    11a6 <__fmodf2+0x117a>
    1133:	2f                   	das    
    1134:	6c                   	ins    BYTE PTR es:[edi],dx
    1135:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    113c:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1142:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1148:	78 2d                	js     1177 <__fmodf2+0x114b>
    114a:	67 6e                	outs   dx,BYTE PTR ds:[si]
    114c:	75 2f                	jne    117d <__fmodf2+0x1151>
    114e:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1153:	2f                   	das    
    1154:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    115b:	00 2e                	add    BYTE PTR [esi],ch
    115d:	2e                   	cs
    115e:	2f                   	das    
    115f:	2e                   	cs
    1160:	2e                   	cs
    1161:	2f                   	das    
    1162:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    1166:	6a 2f                	push   0x2f
    1168:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    116b:	69 73 4f 53 2f 69 6e 	imul   esi,DWORD PTR [ebx+0x4f],0x6e692f53
    1172:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1176:	65                   	gs
    1177:	2f                   	das    
    1178:	69 33 38 36 00 69    	imul   esi,DWORD PTR [ebx],0x69003638
    117e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    117f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1183:	65 00 00             	add    BYTE PTR gs:[eax],al
    1186:	73 70                	jae    11f8 <__fmodf2+0x11cc>
    1188:	72 69                	jb     11f3 <__fmodf2+0x11c7>
    118a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    118b:	74 66                	je     11f3 <__fmodf2+0x11c7>
    118d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1190:	01 00                	add    DWORD PTR [eax],eax
    1192:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1195:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    119c:	63 
    119d:	2e                   	cs
    119e:	68 00 02 00 00       	push   0x200
    11a3:	73 74                	jae    1219 <__fmodf2+0x11ed>
    11a5:	64                   	fs
    11a6:	61                   	popa   
    11a7:	72 67                	jb     1210 <__fmodf2+0x11e4>
    11a9:	2e                   	cs
    11aa:	68 00 02 00 00       	push   0x200
    11af:	63 70 75             	arpl   WORD PTR [eax+0x75],si
    11b2:	2e                   	cs
    11b3:	68 00 03 00 00       	push   0x300
    11b8:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    11bb:	6d                   	ins    DWORD PTR es:[edi],dx
    11bc:	6f                   	outs   dx,DWORD PTR ds:[esi]
    11bd:	6e                   	outs   dx,BYTE PTR ds:[esi]
    11be:	2e                   	cs
    11bf:	68 00 04 00 00       	push   0x400
    11c4:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    11cb:	04 00                	add    al,0x0
    11cd:	00 00                	add    BYTE PTR [eax],al
    11cf:	00 05 02 64 32 00    	add    BYTE PTR ds:0x326402,al
    11d5:	9f                   	lahf   
    11d6:	03 3d 01 08 bb 08    	add    edi,DWORD PTR ds:0x8bb0801
    11dc:	ad                   	lods   eax,DWORD PTR ds:[esi]
    11dd:	5a                   	pop    edx
    11de:	08 cd                	or     ch,cl
    11e0:	00 02                	add    BYTE PTR [edx],al
    11e2:	04 01                	add    al,0x1
    11e4:	06                   	push   es
    11e5:	66 06                	pushw  es
    11e7:	75 00                	jne    11e9 <__fmodf2+0x11bd>
    11e9:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    11ec:	06                   	push   es
    11ed:	90                   	nop
    11ee:	06                   	push   es
    11ef:	75 75                	jne    1266 <__fmodf2+0x123a>
    11f1:	91                   	xchg   ecx,eax
    11f2:	67 c9                	addr16 leave 
    11f4:	91                   	xchg   ecx,eax
    11f5:	84 08                	test   BYTE PTR [eax],cl
    11f7:	75 ae                	jne    11a7 <__fmodf2+0x117b>
    11f9:	08 83 ad 4b 02 24    	or     BYTE PTR [ebx+0x24024bad],al
    11ff:	13 02                	adc    eax,DWORD PTR [edx]
    1201:	3a 13                	cmp    dl,BYTE PTR [ebx]
    1203:	47                   	inc    edi
    1204:	08 17                	or     BYTE PTR [edi],dl
    1206:	00 02                	add    BYTE PTR [edx],al
    1208:	04 02                	add    al,0x2
    120a:	06                   	push   es
    120b:	2e 00 02             	add    BYTE PTR cs:[edx],al
    120e:	04 01                	add    al,0x1
    1210:	08 66 06             	or     BYTE PTR [esi+0x6],ah
    1213:	e5 c9                	in     eax,0xc9
    1215:	2f                   	das    
    1216:	67 48                	addr16 dec eax
    1218:	08 87 ad 00 02 04    	or     BYTE PTR [edi+0x40200ad],al
    121e:	01 06                	add    DWORD PTR [esi],eax
    1220:	66 06                	pushw  es
    1222:	67 83 83 67 85 d7    	add    DWORD PTR [bp+di-0x7a99],0xffffffd7
    1228:	08 75 02             	or     BYTE PTR [ebp+0x2],dh
    122b:	2a 0f                	sub    cl,BYTE PTR [edi]
    122d:	00 02                	add    BYTE PTR [edx],al
    122f:	04 01                	add    al,0x1
    1231:	06                   	push   es
    1232:	82                   	(bad)  
    1233:	06                   	push   es
    1234:	cd c9                	int    0xc9
    1236:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1237:	5a                   	pop    edx
    1238:	67 f3 2f             	addr16 repz das 
    123b:	67 83 08 5a          	or     DWORD PTR [bx+si],0x5a
    123f:	67 c9                	addr16 leave 
    1241:	67 00 02             	add    BYTE PTR [bp+si],al
    1244:	04 01                	add    al,0x1
    1246:	06                   	push   es
    1247:	82                   	(bad)  
    1248:	06                   	push   es
    1249:	67 03 77 4a          	add    esi,DWORD PTR [bx+0x4a]
    124d:	03 0d 9e 67 00 02    	add    ecx,DWORD PTR ds:0x200679e
    1253:	04 01                	add    al,0x1
    1255:	3d 60 08 13 75       	cmp    eax,0x75130860
    125a:	00 02                	add    BYTE PTR [edx],al
    125c:	04 03                	add    al,0x3
    125e:	06                   	push   es
    125f:	2e 00 02             	add    BYTE PTR cs:[edx],al
    1262:	04 01                	add    al,0x1
    1264:	02 29                	add    ch,BYTE PTR [ecx]
    1266:	12 00                	adc    al,BYTE PTR [eax]
    1268:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    126b:	ba 06 bb 3d 68       	mov    edx,0x683dbb06
    1270:	08 30                	or     BYTE PTR [eax],dh
    1272:	93                   	xchg   ebx,eax
    1273:	00 02                	add    BYTE PTR [edx],al
    1275:	04 01                	add    al,0x1
    1277:	06                   	push   es
    1278:	9e                   	sahf   
    1279:	06                   	push   es
    127a:	91                   	xchg   ecx,eax
    127b:	00 02                	add    BYTE PTR [edx],al
    127d:	04 01                	add    al,0x1
    127f:	06                   	push   es
    1280:	9e                   	sahf   
    1281:	06                   	push   es
    1282:	4b                   	dec    ebx
    1283:	00 02                	add    BYTE PTR [edx],al
    1285:	04 02                	add    al,0x2
    1287:	06                   	push   es
    1288:	66                   	data16
    1289:	00 02                	add    BYTE PTR [edx],al
    128b:	04 03                	add    al,0x3
    128d:	66 06                	pushw  es
    128f:	a0 00 02 04 01       	mov    al,ds:0x1040200
    1294:	06                   	push   es
    1295:	9e                   	sahf   
    1296:	00 02                	add    BYTE PTR [edx],al
    1298:	04 02                	add    al,0x2
    129a:	74 00                	je     129c <__fmodf2+0x1270>
    129c:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    129f:	58                   	pop    eax
    12a0:	00 02                	add    BYTE PTR [edx],al
    12a2:	04 04                	add    al,0x4
    12a4:	06                   	push   es
    12a5:	3d 00 02 04 04       	cmp    eax,0x4040200
    12aa:	4b                   	dec    ebx
    12ab:	9f                   	lahf   
    12ac:	67 4b                	addr16 dec ebx
    12ae:	3d 67 9f 4b 67       	cmp    eax,0x674b9f67
    12b3:	9f                   	lahf   
    12b4:	4b                   	dec    ebx
    12b5:	4e                   	dec    esi
    12b6:	9f                   	lahf   
    12b7:	67 67 67 4e          	addr32 addr32 addr16 dec esi
    12bb:	76 67                	jbe    1324 <__fmodf2+0x12f8>
    12bd:	f5                   	cmc    
    12be:	02 22                	add    ah,BYTE PTR [edx]
    12c0:	13 f0                	adc    esi,eax
    12c2:	6c                   	ins    BYTE PTR es:[edi],dx
    12c3:	00 02                	add    BYTE PTR [edx],al
    12c5:	04 01                	add    al,0x1
    12c7:	06                   	push   es
    12c8:	82                   	(bad)  
    12c9:	06                   	push   es
    12ca:	67 67 00 02          	addr32 add BYTE PTR [bp+si],al
    12ce:	04 02                	add    al,0x2
    12d0:	06                   	push   es
    12d1:	ba 00 02 04 01       	mov    edx,0x1040200
    12d6:	ba 06 c9 00 02       	mov    edx,0x200c906
    12db:	04 01                	add    al,0x1
    12dd:	06                   	push   es
    12de:	66 06                	pushw  es
    12e0:	e6 9f                	out    0x9f,al
    12e2:	67 d7                	xlat   BYTE PTR ds:[bx]
    12e4:	67 bb 08 4e 00 02    	addr16 mov ebx,0x2004e08
    12ea:	04 02                	add    al,0x2
    12ec:	06                   	push   es
    12ed:	ba 00 02 04 01       	mov    edx,0x1040200
    12f2:	e4 06                	in     al,0x6
    12f4:	c9                   	leave  
    12f5:	00 02                	add    BYTE PTR [edx],al
    12f7:	04 02                	add    al,0x2
    12f9:	06                   	push   es
    12fa:	2e 00 02             	add    BYTE PTR cs:[edx],al
    12fd:	04 01                	add    al,0x1
    12ff:	ba 06 d7 00 02       	mov    edx,0x200d706
    1304:	04 02                	add    al,0x2
    1306:	06                   	push   es
    1307:	2e 00 02             	add    BYTE PTR cs:[edx],al
    130a:	04 01                	add    al,0x1
    130c:	08 58 06             	or     BYTE PTR [eax+0x6],bl
    130f:	c9                   	leave  
    1310:	00 02                	add    BYTE PTR [edx],al
    1312:	04 02                	add    al,0x2
    1314:	06                   	push   es
    1315:	2e 00 02             	add    BYTE PTR cs:[edx],al
    1318:	04 01                	add    al,0x1
    131a:	ba 06 ca 00 02       	mov    edx,0x200ca06
    131f:	04 01                	add    al,0x1
    1321:	3d 76 f4 93 00       	cmp    eax,0x93f476
    1326:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1329:	06                   	push   es
    132a:	9e                   	sahf   
    132b:	06                   	push   es
    132c:	91                   	xchg   ecx,eax
    132d:	75 91                	jne    12c0 <__fmodf2+0x1294>
    132f:	00 02                	add    BYTE PTR [edx],al
    1331:	04 01                	add    al,0x1
    1333:	06                   	push   es
    1334:	66                   	data16
    1335:	00 02                	add    BYTE PTR [edx],al
    1337:	04 02                	add    al,0x2
    1339:	06                   	push   es
    133a:	d7                   	xlat   BYTE PTR ds:[ebx]
    133b:	00 02                	add    BYTE PTR [edx],al
    133d:	04 02                	add    al,0x2
    133f:	02 26                	add    ah,BYTE PTR [esi]
    1341:	13 00                	adc    eax,DWORD PTR [eax]
    1343:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    1346:	02 28                	add    ch,BYTE PTR [eax]
    1348:	0f 00 02             	sldt   WORD PTR [edx]
    134b:	04 01                	add    al,0x1
    134d:	06                   	push   es
    134e:	4a                   	dec    edx
    134f:	06                   	push   es
    1350:	6c                   	ins    BYTE PTR es:[edi],dx
    1351:	00 02                	add    BYTE PTR [edx],al
    1353:	04 02                	add    al,0x2
    1355:	06                   	push   es
    1356:	ba 00 02 04 01       	mov    edx,0x1040200
    135b:	ba 06 d7 00 02       	mov    edx,0x200d706
    1360:	04 03                	add    al,0x3
    1362:	06                   	push   es
    1363:	90                   	nop
    1364:	00 02                	add    BYTE PTR [edx],al
    1366:	04 01                	add    al,0x1
    1368:	08 90 06 83 00 02    	or     BYTE PTR [eax+0x2008306],dl
    136e:	04 02                	add    al,0x2
    1370:	06                   	push   es
    1371:	2e 00 02             	add    BYTE PTR cs:[edx],al
    1374:	04 01                	add    al,0x1
    1376:	ba 06 d8 3d 30       	mov    edx,0x303dd806
    137b:	08 40 75             	or     BYTE PTR [eax+0x75],al
    137e:	bb 00 02 04 01       	mov    ebx,0x1040200
    1383:	06                   	push   es
    1384:	66 06                	pushw  es
    1386:	d7                   	xlat   BYTE PTR ds:[ebx]
    1387:	08 14 67             	or     BYTE PTR [edi+eiz*2],dl
    138a:	08 a0 9f 02 30 13    	or     BYTE PTR [eax+0x1330029f],ah
    1390:	02 22                	add    ah,BYTE PTR [edx]
    1392:	13 02                	adc    eax,DWORD PTR [edx]
    1394:	30 13                	xor    BYTE PTR [ebx],dl
    1396:	02 28                	add    ch,BYTE PTR [eax]
    1398:	13 67 02             	adc    esp,DWORD PTR [edi+0x2]
    139b:	30 13                	xor    BYTE PTR [ebx],dl
    139d:	02 26                	add    ah,BYTE PTR [esi]
    139f:	15 00 02 04 02       	adc    eax,0x2040200
    13a4:	03 6f 08             	add    ebp,DWORD PTR [edi+0x8]
    13a7:	9e                   	sahf   
    13a8:	00 02                	add    BYTE PTR [edx],al
    13aa:	04 01                	add    al,0x1
    13ac:	06                   	push   es
    13ad:	4a                   	dec    edx
    13ae:	06                   	push   es
    13af:	03 15 9e 00 02 04    	add    edx,DWORD PTR ds:0x402009e
    13b5:	02 06                	add    al,BYTE PTR [esi]
    13b7:	ba 00 02 04 01       	mov    edx,0x1040200
    13bc:	ba 06 d7 00 02       	mov    edx,0x200d706
    13c1:	04 03                	add    al,0x3
    13c3:	06                   	push   es
    13c4:	90                   	nop
    13c5:	00 02                	add    BYTE PTR [edx],al
    13c7:	04 01                	add    al,0x1
    13c9:	08 90 06 83 00 02    	or     BYTE PTR [eax+0x2008306],dl
    13cf:	04 02                	add    al,0x2
    13d1:	06                   	push   es
    13d2:	2e 00 02             	add    BYTE PTR cs:[edx],al
    13d5:	04 01                	add    al,0x1
    13d7:	ba 06 d8 3d 89       	mov    edx,0x893dd806
    13dc:	02 30                	add    dh,BYTE PTR [eax]
    13de:	14 76                	adc    al,0x76
    13e0:	77 00                	ja     13e2 <__fmodf2+0x13b6>
    13e2:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    13e5:	06                   	push   es
    13e6:	90                   	nop
    13e7:	06                   	push   es
    13e8:	91                   	xchg   ecx,eax
    13e9:	75 f5                	jne    13e0 <__fmodf2+0x13b4>
    13eb:	91                   	xchg   ecx,eax
    13ec:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    13ef:	91                   	xchg   ecx,eax
    13f0:	00 02                	add    BYTE PTR [edx],al
    13f2:	04 01                	add    al,0x1
    13f4:	06                   	push   es
    13f5:	66 06                	pushw  es
    13f7:	ad                   	lods   eax,DWORD PTR ds:[esi]
    13f8:	75 68                	jne    1462 <__fmodf2+0x1436>
    13fa:	75 6a                	jne    1466 <__fmodf2+0x143a>
    13fc:	c9                   	leave  
    13fd:	02 30                	add    dh,BYTE PTR [eax]
    13ff:	14 00                	adc    al,0x0
    1401:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1404:	06                   	push   es
    1405:	74 06                	je     140d <__fmodf2+0x13e1>
    1407:	bb 08 13 00 02       	mov    ebx,0x2001308
    140c:	04 01                	add    al,0x1
    140e:	06                   	push   es
    140f:	66 06                	pushw  es
    1411:	bb 08 83 67 00       	mov    ebx,0x678308
    1416:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1419:	06                   	push   es
    141a:	e4 00                	in     al,0x0
    141c:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    141f:	74 00                	je     1421 <__fmodf2+0x13f5>
    1421:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1424:	58                   	pop    eax
    1425:	00 02                	add    BYTE PTR [edx],al
    1427:	04 04                	add    al,0x4
    1429:	06                   	push   es
    142a:	30 75 08             	xor    BYTE PTR [ebp+0x8],dh
    142d:	ad                   	lods   eax,DWORD PTR ds:[esi]
    142e:	92                   	xchg   edx,eax
    142f:	93                   	xchg   ebx,eax
    1430:	93                   	xchg   ebx,eax
    1431:	67 bb 5a bd 02 30    	addr16 mov ebx,0x3002bd5a
    1437:	13 08                	adc    ecx,DWORD PTR [eax]
    1439:	9f                   	lahf   
    143a:	02 30                	add    dh,BYTE PTR [eax]
    143c:	13 08                	adc    ecx,DWORD PTR [eax]
    143e:	9f                   	lahf   
    143f:	02 2f                	add    ch,BYTE PTR [edi]
    1441:	13 91 c9 02 2c 13    	adc    edx,DWORD PTR [ecx+0x132c02c9]
    1447:	00 02                	add    BYTE PTR [edx],al
    1449:	04 01                	add    al,0x1
    144b:	06                   	push   es
    144c:	74 06                	je     1454 <__fmodf2+0x1428>
    144e:	bb d7 75 bb bb       	mov    ebx,0xbbbb75d7
    1453:	00 02                	add    BYTE PTR [edx],al
    1455:	04 03                	add    al,0x3
    1457:	06                   	push   es
    1458:	90                   	nop
    1459:	00 02                	add    BYTE PTR [edx],al
    145b:	04 01                	add    al,0x1
    145d:	f2 06                	repnz push es
    145f:	9f                   	lahf   
    1460:	00 02                	add    BYTE PTR [edx],al
    1462:	04 02                	add    al,0x2
    1464:	06                   	push   es
    1465:	2e 00 02             	add    BYTE PTR cs:[edx],al
    1468:	04 01                	add    al,0x1
    146a:	08 66 06             	or     BYTE PTR [esi+0x6],ah
    146d:	e6 75                	out    0x75,al
    146f:	2f                   	das    
    1470:	00 02                	add    BYTE PTR [edx],al
    1472:	04 01                	add    al,0x1
    1474:	06                   	push   es
    1475:	f2 06                	repnz push es
    1477:	bb 08 64 c0 bb       	mov    ebx,0xbbc06408
    147c:	67 bb 00 02 04 03    	addr16 mov ebx,0x3040200
    1482:	06                   	push   es
    1483:	90                   	nop
    1484:	00 02                	add    BYTE PTR [edx],al
    1486:	04 01                	add    al,0x1
    1488:	f2 06                	repnz push es
    148a:	87 67 68             	xchg   DWORD PTR [edi+0x68],esp
    148d:	08 13                	or     BYTE PTR [ebx],dl
    148f:	2f                   	das    
    1490:	e5 00                	in     eax,0x0
    1492:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1495:	06                   	push   es
    1496:	ac                   	lods   al,BYTE PTR ds:[esi]
    1497:	06                   	push   es
    1498:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1499:	47                   	inc    edi
    149a:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    149b:	9f                   	lahf   
    149c:	08 2f                	or     BYTE PTR [edi],ch
    149e:	2f                   	das    
    149f:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    14a2:	6b 84 bb 03 71 82 03 	imul   eax,DWORD PTR [ebx+edi*4+0x3827103],0x11
    14a9:	11 
    14aa:	20 5a f5             	and    BYTE PTR [edx-0xb],bl
    14ad:	00 02                	add    BYTE PTR [edx],al
    14af:	04 03                	add    al,0x3
    14b1:	06                   	push   es
    14b2:	2e 00 02             	add    BYTE PTR cs:[edx],al
    14b5:	04 01                	add    al,0x1
    14b7:	4a                   	dec    edx
    14b8:	00 02                	add    BYTE PTR [edx],al
    14ba:	04 02                	add    al,0x2
    14bc:	9e                   	sahf   
    14bd:	06                   	push   es
    14be:	9f                   	lahf   
    14bf:	f3 00 02             	repz add BYTE PTR [edx],al
    14c2:	04 04                	add    al,0x4
    14c4:	06                   	push   es
    14c5:	2e 00 02             	add    BYTE PTR cs:[edx],al
    14c8:	04 01                	add    al,0x1
    14ca:	4a                   	dec    edx
    14cb:	00 02                	add    BYTE PTR [edx],al
    14cd:	04 02                	add    al,0x2
    14cf:	9e                   	sahf   
    14d0:	00 02                	add    BYTE PTR [edx],al
    14d2:	04 03                	add    al,0x3
    14d4:	9e                   	sahf   
    14d5:	06                   	push   es
    14d6:	9f                   	lahf   
    14d7:	bb 00 02 04 02       	mov    ebx,0x2040200
    14dc:	06                   	push   es
    14dd:	2e 00 02             	add    BYTE PTR cs:[edx],al
    14e0:	04 01                	add    al,0x1
    14e2:	4a                   	dec    edx
    14e3:	06                   	push   es
    14e4:	9f                   	lahf   
    14e5:	00 02                	add    BYTE PTR [edx],al
    14e7:	04 01                	add    al,0x1
    14e9:	06                   	push   es
    14ea:	9e                   	sahf   
    14eb:	00 02                	add    BYTE PTR [edx],al
    14ed:	04 01                	add    al,0x1
    14ef:	06                   	push   es
    14f0:	4b                   	dec    ebx
    14f1:	08 d8                	or     al,bl
    14f3:	3e 02 30             	add    dh,BYTE PTR ds:[eax]
    14f6:	18 00                	sbb    BYTE PTR [eax],al
    14f8:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    14fb:	06                   	push   es
    14fc:	9e                   	sahf   
    14fd:	06                   	push   es
    14fe:	4d                   	dec    ebp
    14ff:	00 02                	add    BYTE PTR [edx],al
    1501:	04 01                	add    al,0x1
    1503:	06                   	push   es
    1504:	9e                   	sahf   
    1505:	00 02                	add    BYTE PTR [edx],al
    1507:	04 02                	add    al,0x2
    1509:	74 00                	je     150b <__fmodf2+0x14df>
    150b:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    150e:	58                   	pop    eax
    150f:	00 02                	add    BYTE PTR [edx],al
    1511:	04 04                	add    al,0x4
    1513:	06                   	push   es
    1514:	3d 00 02 04 04       	cmp    eax,0x4040200
    1519:	4b                   	dec    ebx
    151a:	9f                   	lahf   
    151b:	f3 4b                	repz dec ebx
    151d:	d7                   	xlat   BYTE PTR ds:[ebx]
    151e:	67 9f                	addr16 lahf 
    1520:	4b                   	dec    ebx
    1521:	67 9f                	addr16 lahf 
    1523:	4b                   	dec    ebx
    1524:	4f                   	dec    edi
    1525:	67 91                	addr16 xchg ecx,eax
    1527:	00 02                	add    BYTE PTR [edx],al
    1529:	04 01                	add    al,0x1
    152b:	06                   	push   es
    152c:	66 06                	pushw  es
    152e:	91                   	xchg   ecx,eax
    152f:	78 02                	js     1533 <__fmodf2+0x1507>
    1531:	29 15 00 02 04 01    	sub    DWORD PTR ds:0x1040200,edx
    1537:	06                   	push   es
    1538:	9e                   	sahf   
    1539:	00 02                	add    BYTE PTR [edx],al
    153b:	04 02                	add    al,0x2
    153d:	66 06                	pushw  es
    153f:	08 23                	or     BYTE PTR [ebx],ah
    1541:	00 02                	add    BYTE PTR [edx],al
    1543:	04 01                	add    al,0x1
    1545:	06                   	push   es
    1546:	90                   	nop
    1547:	00 02                	add    BYTE PTR [edx],al
    1549:	04 02                	add    al,0x2
    154b:	9e                   	sahf   
    154c:	06                   	push   es
    154d:	08 22                	or     BYTE PTR [edx],ah
    154f:	08 4d 67             	or     BYTE PTR [ebp+0x67],cl
    1552:	00 02                	add    BYTE PTR [edx],al
    1554:	04 02                	add    al,0x2
    1556:	06                   	push   es
    1557:	ba 00 02 04 01       	mov    edx,0x1040200
    155c:	ba 06 c9 00 02       	mov    edx,0x200c906
    1561:	04 01                	add    al,0x1
    1563:	06                   	push   es
    1564:	66 06                	pushw  es
    1566:	e5 00                	in     eax,0x0
    1568:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    156b:	06                   	push   es
    156c:	ba 00 02 04 01       	mov    edx,0x1040200
    1571:	e4 06                	in     al,0x6
    1573:	c9                   	leave  
    1574:	00 02                	add    BYTE PTR [edx],al
    1576:	04 03                	add    al,0x3
    1578:	06                   	push   es
    1579:	90                   	nop
    157a:	00 02                	add    BYTE PTR [edx],al
    157c:	04 01                	add    al,0x1
    157e:	08 ba 06 83 00 02    	or     BYTE PTR [edx+0x2008306],bh
    1584:	04 02                	add    al,0x2
    1586:	06                   	push   es
    1587:	2e 00 02             	add    BYTE PTR cs:[edx],al
    158a:	04 01                	add    al,0x1
    158c:	ba 06 ca 3d 5c       	mov    edx,0x5c3dca06
    1591:	03 0d 08 2e ad 9f    	add    ecx,DWORD PTR ds:0x9fad2e08
    1597:	08 13                	or     BYTE PTR [ebx],dl
    1599:	5c                   	pop    esp
    159a:	76 91                	jbe    152d <__fmodf2+0x1501>
    159c:	08 d7                	or     bh,dl
    159e:	67 67 67 67 6a 75    	addr32 addr32 addr32 addr16 push 0x75
    15a4:	00 02                	add    BYTE PTR [edx],al
    15a6:	04 01                	add    al,0x1
    15a8:	06                   	push   es
    15a9:	9e                   	sahf   
    15aa:	06                   	push   es
    15ab:	9f                   	lahf   
    15ac:	08 13                	or     BYTE PTR [ebx],dl
    15ae:	9f                   	lahf   
    15af:	91                   	xchg   ecx,eax
    15b0:	d7                   	xlat   BYTE PTR ds:[ebx]
    15b1:	67 3d 4f 75 9f 91    	addr16 cmp eax,0x919f754f
    15b7:	00 02                	add    BYTE PTR [edx],al
    15b9:	04 01                	add    al,0x1
    15bb:	06                   	push   es
    15bc:	9e                   	sahf   
    15bd:	06                   	push   es
    15be:	9f                   	lahf   
    15bf:	08 13                	or     BYTE PTR [ebx],dl
    15c1:	9f                   	lahf   
    15c2:	91                   	xchg   ecx,eax
    15c3:	d8 00                	fadd   DWORD PTR [eax]
    15c5:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    15c8:	06                   	push   es
    15c9:	66 06                	pushw  es
    15cb:	78 75                	js     1642 <__fmodf2+0x1616>
    15cd:	00 02                	add    BYTE PTR [edx],al
    15cf:	04 01                	add    al,0x1
    15d1:	06                   	push   es
    15d2:	9e                   	sahf   
    15d3:	00 02                	add    BYTE PTR [edx],al
    15d5:	04 02                	add    al,0x2
    15d7:	9e                   	sahf   
    15d8:	06                   	push   es
    15d9:	9f                   	lahf   
    15da:	bb 94 76 02 23       	mov    ebx,0x23027694
    15df:	14 00                	adc    al,0x0
    15e1:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    15e4:	06                   	push   es
    15e5:	ba 00 02 04 01       	mov    edx,0x1040200
    15ea:	ba 06 9f 08 59       	mov    edx,0x59089f06
    15ef:	00 02                	add    BYTE PTR [edx],al
    15f1:	04 02                	add    al,0x2
    15f3:	06                   	push   es
    15f4:	2e 00 02             	add    BYTE PTR cs:[edx],al
    15f7:	04 01                	add    al,0x1
    15f9:	ba 06 9f 5b d7       	mov    edx,0xd75b9f06
    15fe:	00 02                	add    BYTE PTR [edx],al
    1600:	04 01                	add    al,0x1
    1602:	06                   	push   es
    1603:	66 06                	pushw  es
    1605:	91                   	xchg   ecx,eax
    1606:	08 3d 00 02 04 02    	or     BYTE PTR ds:0x2040200,bh
    160c:	06                   	push   es
    160d:	ba 00 02 04 01       	mov    edx,0x1040200
    1612:	ba 06 d7 00 02       	mov    edx,0x200d706
    1617:	04 03                	add    al,0x3
    1619:	06                   	push   es
    161a:	90                   	nop
    161b:	00 02                	add    BYTE PTR [edx],al
    161d:	04 01                	add    al,0x1
    161f:	08 9e 06 83 00 02    	or     BYTE PTR [esi+0x2008306],bl
    1625:	04 02                	add    al,0x2
    1627:	06                   	push   es
    1628:	2e 00 02             	add    BYTE PTR cs:[edx],al
    162b:	04 01                	add    al,0x1
    162d:	ba 06 d7 5b 67       	mov    edx,0x675bd706
    1632:	75 4c                	jne    1680 <__fmodf2+0x1654>
    1634:	02 28                	add    ch,BYTE PTR [eax]
    1636:	13 5b 67             	adc    ebx,DWORD PTR [ebx+0x67]
    1639:	d7                   	xlat   BYTE PTR ds:[ebx]
    163a:	cd 55                	int    0x55
    163c:	d7                   	xlat   BYTE PTR ds:[ebx]
    163d:	ca 5b 4d             	retf   0x4d5b
    1640:	67 02 26 16 56       	add    ah,BYTE PTR ds:0x5616
    1645:	02 26                	add    ah,BYTE PTR [esi]
    1647:	14 5c                	adc    al,0x5c
    1649:	75 5b                	jne    16a6 <__fmodf2+0x167a>
    164b:	4d                   	dec    ebp
    164c:	75 5c                	jne    16aa <__fmodf2+0x167e>
    164e:	4d                   	dec    ebp
    164f:	03 09                	add    ecx,DWORD PTR [ecx]
    1651:	2e 02 3c 13          	add    bh,BYTE PTR cs:[ebx+edx*1]
    1655:	5d                   	pop    ebp
    1656:	00 02                	add    BYTE PTR [edx],al
    1658:	04 01                	add    al,0x1
    165a:	06                   	push   es
    165b:	9e                   	sahf   
    165c:	06                   	push   es
    165d:	bb 9f 08 16 2c       	mov    ebx,0x2c16089f
    1662:	92                   	xchg   edx,eax
    1663:	03 6b 2e             	add    ebp,DWORD PTR [ebx+0x2e]
    1666:	03 18                	add    ebx,DWORD PTR [eax]
    1668:	20 67 f3             	and    BYTE PTR [edi-0xd],ah
    166b:	67 9f                	addr16 lahf 
    166d:	30 30                	xor    BYTE PTR [eax],dh
    166f:	9f                   	lahf   
    1670:	f4                   	hlt    
    1671:	d9 00                	fld    DWORD PTR [eax]
    1673:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    1676:	03 e6                	add    esp,esi
    1678:	7e 08                	jle    1682 <__fmodf2+0x1656>
    167a:	f2 00 02             	repnz add BYTE PTR [edx],al
    167d:	04 01                	add    al,0x1
    167f:	06                   	push   es
    1680:	90                   	nop
    1681:	06                   	push   es
    1682:	03 9d 01 d6 67 9f    	add    ebx,DWORD PTR [ebp-0x609829ff]
    1688:	76 f6                	jbe    1680 <__fmodf2+0x1654>
    168a:	67 08 77 3d          	or     BYTE PTR [bx+0x3d],dh
    168e:	30 08                	xor    BYTE PTR [eax],cl
    1690:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1691:	08 d7                	or     bh,dl
    1693:	30 08                	xor    BYTE PTR [eax],cl
    1695:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1696:	08 d7                	or     bh,dl
    1698:	31 f6                	xor    esi,esi
    169a:	67 08 76 3d          	or     BYTE PTR [bp+0x3d],dh
    169e:	02 02                	add    al,BYTE PTR [edx]
    16a0:	00 01                	add    BYTE PTR [ecx],al
    16a2:	01 57 00             	add    DWORD PTR [edi+0x0],edx
    16a5:	00 00                	add    BYTE PTR [eax],al
    16a7:	02 00                	add    al,BYTE PTR [eax]
    16a9:	36 00 00             	add    BYTE PTR ss:[eax],al
    16ac:	00 01                	add    BYTE PTR [ecx],al
    16ae:	01 fb                	add    ebx,edi
    16b0:	0e                   	push   cs
    16b1:	0d 00 01 01 01       	or     eax,0x1010100
    16b6:	01 00                	add    DWORD PTR [eax],eax
    16b8:	00 00                	add    BYTE PTR [eax],al
    16ba:	01 00                	add    DWORD PTR [eax],eax
    16bc:	00 01                	add    BYTE PTR [ecx],al
    16be:	73 72                	jae    1732 <__fmodf2+0x1706>
    16c0:	63 00                	arpl   WORD PTR [eax],ax
    16c2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    16c9:	00 00                	add    BYTE PTR [eax],al
    16cb:	73 74                	jae    1741 <__fmodf2+0x1715>
    16cd:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
    16d4:	00 
    16d5:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
    16d8:	6d                   	ins    DWORD PTR es:[edi],dx
    16d9:	6d                   	ins    DWORD PTR es:[edi],dx
    16da:	6f                   	outs   dx,DWORD PTR ds:[esi]
    16db:	6e                   	outs   dx,BYTE PTR ds:[esi]
    16dc:	2e                   	cs
    16dd:	68 00 02 00 00       	push   0x200
    16e2:	00 00                	add    BYTE PTR [eax],al
    16e4:	05 02 68 48 00       	add    eax,0x486802
    16e9:	9f                   	lahf   
    16ea:	03 11                	add    edx,DWORD PTR [ecx]
    16ec:	01 08                	add    DWORD PTR [eax],ecx
    16ee:	22 76 08             	and    dh,BYTE PTR [esi+0x8]
    16f1:	31 d7                	xor    edi,edx
    16f3:	d7                   	xlat   BYTE PTR ds:[ebx]
    16f4:	d7                   	xlat   BYTE PTR ds:[ebx]
    16f5:	d7                   	xlat   BYTE PTR ds:[ebx]
    16f6:	ad                   	lods   eax,DWORD PTR ds:[esi]
    16f7:	e6 21                	out    0x21,al
    16f9:	02 05 00 01 01 c3    	add    al,BYTE PTR ds:0xc3010100
    16ff:	00 00                	add    BYTE PTR [eax],al
    1701:	00 02                	add    BYTE PTR [edx],al
    1703:	00 88 00 00 00 01    	add    BYTE PTR [eax+0x1000000],cl
    1709:	01 fb                	add    ebx,edi
    170b:	0e                   	push   cs
    170c:	0d 00 01 01 01       	or     eax,0x1010100
    1711:	01 00                	add    DWORD PTR [eax],eax
    1713:	00 00                	add    BYTE PTR [eax],al
    1715:	01 00                	add    DWORD PTR [eax],eax
    1717:	00 01                	add    BYTE PTR [ecx],al
    1719:	73 72                	jae    178d <__fmodf2+0x1761>
    171b:	63 2f                	arpl   WORD PTR [edi],bp
    171d:	73 74                	jae    1793 <__fmodf2+0x1767>
    171f:	72 69                	jb     178a <__fmodf2+0x175e>
    1721:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1722:	67 73 00             	addr16 jae 1725 <__fmodf2+0x16f9>
    1725:	2f                   	das    
    1726:	68 6f 6d 65 2f       	push   0x2f656d6f
    172b:	79 6f                	jns    179c <__fmodf2+0x1770>
    172d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1734:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1737:	73 73                	jae    17ac <__fmodf2+0x1780>
    1739:	2f                   	das    
    173a:	6c                   	ins    BYTE PTR es:[edi],dx
    173b:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1742:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1748:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    174e:	78 2d                	js     177d <__fmodf2+0x1751>
    1750:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1752:	75 2f                	jne    1783 <__fmodf2+0x1757>
    1754:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1759:	2f                   	das    
    175a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1761:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1764:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1768:	65 00 00             	add    BYTE PTR gs:[eax],al
    176b:	73 74                	jae    17e1 <__fmodf2+0x17b5>
    176d:	72 63                	jb     17d2 <__fmodf2+0x17a6>
    176f:	61                   	popa   
    1770:	74 2e                	je     17a0 <__fmodf2+0x1774>
    1772:	63 00                	arpl   WORD PTR [eax],ax
    1774:	01 00                	add    DWORD PTR [eax],eax
    1776:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1779:	64                   	fs
    177a:	64                   	fs
    177b:	65                   	gs
    177c:	66                   	data16
    177d:	2e                   	cs
    177e:	68 00 02 00 00       	push   0x200
    1783:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    1786:	6d                   	ins    DWORD PTR es:[edi],dx
    1787:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1788:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1789:	2e                   	cs
    178a:	68 00 03 00 00       	push   0x300
    178f:	00 00                	add    BYTE PTR [eax],al
    1791:	05 02 ec 48 00       	add    eax,0x48ec02
    1796:	9f                   	lahf   
    1797:	03 1e                	add    ebx,DWORD PTR [esi]
    1799:	01 08                	add    DWORD PTR [eax],ecx
    179b:	21 02                	and    DWORD PTR [edx],eax
    179d:	24 13                	and    al,0x13
    179f:	3d 5b 08 21 02       	cmp    eax,0x221085b
    17a4:	24 13                	and    al,0x13
    17a6:	3d 5b 08 21 75       	cmp    eax,0x7521085b
    17ab:	08 14 83             	or     BYTE PTR [ebx+eax*4],dl
    17ae:	84 68 02             	test   BYTE PTR [eax+0x2],ch
    17b1:	27                   	daa    
    17b2:	13 3d 5b 08 21 68    	adc    edi,DWORD PTR ds:0x6821085b
    17b8:	02 27                	add    ah,BYTE PTR [edi]
    17ba:	13 3d 5b f3 08 3d    	adc    edi,DWORD PTR ds:0x3d08f35b
    17c0:	02 02                	add    al,BYTE PTR [edx]
    17c2:	00 01                	add    BYTE PTR [ecx],al
    17c4:	01 b8 00 00 00 02    	add    DWORD PTR [eax+0x2000000],edi
    17ca:	00 96 00 00 00 01    	add    BYTE PTR [esi+0x1000000],dl
    17d0:	01 fb                	add    ebx,edi
    17d2:	0e                   	push   cs
    17d3:	0d 00 01 01 01       	or     eax,0x1010100
    17d8:	01 00                	add    DWORD PTR [eax],eax
    17da:	00 00                	add    BYTE PTR [eax],al
    17dc:	01 00                	add    DWORD PTR [eax],eax
    17de:	00 01                	add    BYTE PTR [ecx],al
    17e0:	73 72                	jae    1854 <__fmodf2+0x1828>
    17e2:	63 2f                	arpl   WORD PTR [edi],bp
    17e4:	73 74                	jae    185a <__fmodf2+0x182e>
    17e6:	72 69                	jb     1851 <__fmodf2+0x1825>
    17e8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    17e9:	67 73 00             	addr16 jae 17ec <__fmodf2+0x17c0>
    17ec:	2f                   	das    
    17ed:	68 6f 6d 65 2f       	push   0x2f656d6f
    17f2:	79 6f                	jns    1863 <__fmodf2+0x1837>
    17f4:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    17fb:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    17fe:	73 73                	jae    1873 <__fmodf2+0x1847>
    1800:	2f                   	das    
    1801:	6c                   	ins    BYTE PTR es:[edi],dx
    1802:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1809:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    180f:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1815:	78 2d                	js     1844 <__fmodf2+0x1818>
    1817:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1819:	75 2f                	jne    184a <__fmodf2+0x181e>
    181b:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1820:	2f                   	das    
    1821:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1828:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    182b:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    182f:	65 00 00             	add    BYTE PTR gs:[eax],al
    1832:	73 74                	jae    18a8 <__fmodf2+0x187c>
    1834:	72 63                	jb     1899 <__fmodf2+0x186d>
    1836:	6d                   	ins    DWORD PTR es:[edi],dx
    1837:	70 2e                	jo     1867 <__fmodf2+0x183b>
    1839:	63 00                	arpl   WORD PTR [eax],ax
    183b:	01 00                	add    DWORD PTR [eax],eax
    183d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1840:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1847:	63 
    1848:	2e                   	cs
    1849:	68 00 02 00 00       	push   0x200
    184e:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    1851:	6d                   	ins    DWORD PTR es:[edi],dx
    1852:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1853:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1854:	2e                   	cs
    1855:	68 00 03 00 00       	push   0x300
    185a:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1861:	03 00                	add    eax,DWORD PTR [eax]
    1863:	00 00                	add    BYTE PTR [eax],al
    1865:	00 05 02 44 4a 00    	add    BYTE PTR ds:0x4a4402,al
    186b:	9f                   	lahf   
    186c:	03 1a                	add    ebx,DWORD PTR [edx]
    186e:	01 08                	add    DWORD PTR [eax],ecx
    1870:	21 3d 41 ad ad 67    	and    DWORD PTR ds:0x67adad41,edi
    1876:	d8 92 bb 77 c9 d7    	fcom   DWORD PTR [edx-0x28368845]
    187c:	02 02                	add    al,BYTE PTR [edx]
    187e:	00 01                	add    BYTE PTR [ecx],al
    1880:	01 6b 00             	add    DWORD PTR [ebx+0x0],ebp
    1883:	00 00                	add    BYTE PTR [eax],al
    1885:	02 00                	add    al,BYTE PTR [eax]
    1887:	2b 00                	sub    eax,DWORD PTR [eax]
    1889:	00 00                	add    BYTE PTR [eax],al
    188b:	01 01                	add    DWORD PTR [ecx],eax
    188d:	fb                   	sti    
    188e:	0e                   	push   cs
    188f:	0d 00 01 01 01       	or     eax,0x1010100
    1894:	01 00                	add    DWORD PTR [eax],eax
    1896:	00 00                	add    BYTE PTR [eax],al
    1898:	01 00                	add    DWORD PTR [eax],eax
    189a:	00 01                	add    BYTE PTR [ecx],al
    189c:	73 72                	jae    1910 <__fmodf2+0x18e4>
    189e:	63 2f                	arpl   WORD PTR [edi],bp
    18a0:	73 74                	jae    1916 <__fmodf2+0x18ea>
    18a2:	72 69                	jb     190d <__fmodf2+0x18e1>
    18a4:	6e                   	outs   dx,BYTE PTR ds:[esi]
    18a5:	67 73 00             	addr16 jae 18a8 <__fmodf2+0x187c>
    18a8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    18ab:	72 63                	jb     1910 <__fmodf2+0x18e4>
    18ad:	70 79                	jo     1928 <__fmodf2+0x18fc>
    18af:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    18b2:	01 00                	add    DWORD PTR [eax],eax
    18b4:	00 00                	add    BYTE PTR [eax],al
    18b6:	00 05 02 c0 4a 00    	add    BYTE PTR ds:0x4ac002,al
    18bc:	9f                   	lahf   
    18bd:	16                   	push   ss
    18be:	f3 67 00 02          	repz add BYTE PTR [bp+si],al
    18c2:	04 01                	add    al,0x1
    18c4:	06                   	push   es
    18c5:	20 06                	and    BYTE PTR [esi],al
    18c7:	08 ca                	or     dl,cl
    18c9:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    18cf:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    18d2:	06                   	push   es
    18d3:	20 06                	and    BYTE PTR [esi],al
    18d5:	08 ca                	or     dl,cl
    18d7:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    18dd:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    18e0:	06                   	push   es
    18e1:	20 00                	and    BYTE PTR [eax],al
    18e3:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    18e6:	08 c8                	or     al,cl
    18e8:	06                   	push   es
    18e9:	ca 3d 02             	retf   0x23d
    18ec:	02 00                	add    al,BYTE PTR [eax]
    18ee:	01 01                	add    DWORD PTR [ecx],eax
    18f0:	c5 00                	lds    eax,FWORD PTR [eax]
    18f2:	00 00                	add    BYTE PTR [eax],al
    18f4:	02 00                	add    al,BYTE PTR [eax]
    18f6:	98                   	cwde   
    18f7:	00 00                	add    BYTE PTR [eax],al
    18f9:	00 01                	add    BYTE PTR [ecx],al
    18fb:	01 fb                	add    ebx,edi
    18fd:	0e                   	push   cs
    18fe:	0d 00 01 01 01       	or     eax,0x1010100
    1903:	01 00                	add    DWORD PTR [eax],eax
    1905:	00 00                	add    BYTE PTR [eax],al
    1907:	01 00                	add    DWORD PTR [eax],eax
    1909:	00 01                	add    BYTE PTR [ecx],al
    190b:	73 72                	jae    197f <__fmodf2+0x1953>
    190d:	63 2f                	arpl   WORD PTR [edi],bp
    190f:	73 74                	jae    1985 <__fmodf2+0x1959>
    1911:	72 69                	jb     197c <__fmodf2+0x1950>
    1913:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1914:	67 73 00             	addr16 jae 1917 <__fmodf2+0x18eb>
    1917:	2f                   	das    
    1918:	68 6f 6d 65 2f       	push   0x2f656d6f
    191d:	79 6f                	jns    198e <__fmodf2+0x1962>
    191f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1926:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1929:	73 73                	jae    199e <__fmodf2+0x1972>
    192b:	2f                   	das    
    192c:	6c                   	ins    BYTE PTR es:[edi],dx
    192d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1934:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    193a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1940:	78 2d                	js     196f <__fmodf2+0x1943>
    1942:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1944:	75 2f                	jne    1975 <__fmodf2+0x1949>
    1946:	35 2e 33 2e 30       	xor    eax,0x302e332e
    194b:	2f                   	das    
    194c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1953:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1956:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    195a:	65 00 00             	add    BYTE PTR gs:[eax],al
    195d:	73 74                	jae    19d3 <__fmodf2+0x19a7>
    195f:	72 69                	jb     19ca <__fmodf2+0x199e>
    1961:	73 6e                	jae    19d1 <__fmodf2+0x19a5>
    1963:	75 6d                	jne    19d2 <__fmodf2+0x19a6>
    1965:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1968:	01 00                	add    DWORD PTR [eax],eax
    196a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    196d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1974:	63 
    1975:	2e                   	cs
    1976:	68 00 02 00 00       	push   0x200
    197b:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    197e:	6d                   	ins    DWORD PTR es:[edi],dx
    197f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1980:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1981:	2e                   	cs
    1982:	68 00 03 00 00       	push   0x300
    1987:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    198e:	03 00                	add    eax,DWORD PTR [eax]
    1990:	00 00                	add    BYTE PTR [eax],al
    1992:	00 05 02 88 4b 00    	add    BYTE PTR ds:0x4b8802,al
    1998:	9f                   	lahf   
    1999:	1a 08                	sbb    cl,BYTE PTR [eax]
    199b:	59                   	pop    ecx
    199c:	00 02                	add    BYTE PTR [edx],al
    199e:	04 01                	add    al,0x1
    19a0:	06                   	push   es
    19a1:	66                   	data16
    19a2:	00 02                	add    BYTE PTR [edx],al
    19a4:	04 02                	add    al,0x2
    19a6:	66 06                	pushw  es
    19a8:	75 59                	jne    1a03 <__fmodf2+0x19d7>
    19aa:	31 f3                	xor    ebx,esi
    19ac:	76 2f                	jbe    19dd <__fmodf2+0x19b1>
    19ae:	08 e5                	or     ch,ah
    19b0:	72 08                	jb     19ba <__fmodf2+0x198e>
    19b2:	23 5a 02             	and    ebx,DWORD PTR [edx+0x2]
    19b5:	02 00                	add    al,BYTE PTR [eax]
    19b7:	01 01                	add    DWORD PTR [ecx],eax
    19b9:	cf                   	iret   
    19ba:	00 00                	add    BYTE PTR [eax],al
    19bc:	00 02                	add    BYTE PTR [edx],al
    19be:	00 a2 00 00 00 01    	add    BYTE PTR [edx+0x1000000],ah
    19c4:	01 fb                	add    ebx,edi
    19c6:	0e                   	push   cs
    19c7:	0d 00 01 01 01       	or     eax,0x1010100
    19cc:	01 00                	add    DWORD PTR [eax],eax
    19ce:	00 00                	add    BYTE PTR [eax],al
    19d0:	01 00                	add    DWORD PTR [eax],eax
    19d2:	00 01                	add    BYTE PTR [ecx],al
    19d4:	73 72                	jae    1a48 <__fmodf2+0x1a1c>
    19d6:	63 2f                	arpl   WORD PTR [edi],bp
    19d8:	73 74                	jae    1a4e <__fmodf2+0x1a22>
    19da:	72 69                	jb     1a45 <__fmodf2+0x1a19>
    19dc:	6e                   	outs   dx,BYTE PTR ds:[esi]
    19dd:	67 73 00             	addr16 jae 19e0 <__fmodf2+0x19b4>
    19e0:	2f                   	das    
    19e1:	68 6f 6d 65 2f       	push   0x2f656d6f
    19e6:	79 6f                	jns    1a57 <__fmodf2+0x1a2b>
    19e8:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    19ef:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    19f2:	73 73                	jae    1a67 <__fmodf2+0x1a3b>
    19f4:	2f                   	das    
    19f5:	6c                   	ins    BYTE PTR es:[edi],dx
    19f6:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    19fd:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1a03:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1a09:	78 2d                	js     1a38 <__fmodf2+0x1a0c>
    1a0b:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1a0d:	75 2f                	jne    1a3e <__fmodf2+0x1a12>
    1a0f:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1a14:	2f                   	das    
    1a15:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1a1c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1a1f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1a23:	65 00 00             	add    BYTE PTR gs:[eax],al
    1a26:	73 74                	jae    1a9c <__fmodf2+0x1a70>
    1a28:	72 6c                	jb     1a96 <__fmodf2+0x1a6a>
    1a2a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1a2c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1a2f:	01 00                	add    DWORD PTR [eax],eax
    1a31:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1a34:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1a3b:	63 
    1a3c:	2e                   	cs
    1a3d:	68 00 02 00 00       	push   0x200
    1a42:	73 74                	jae    1ab8 <__fmodf2+0x1a8c>
    1a44:	64                   	fs
    1a45:	64                   	fs
    1a46:	65                   	gs
    1a47:	66                   	data16
    1a48:	2e                   	cs
    1a49:	68 00 02 00 00       	push   0x200
    1a4e:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    1a51:	6d                   	ins    DWORD PTR es:[edi],dx
    1a52:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1a53:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1a54:	2e                   	cs
    1a55:	68 00 03 00 00       	push   0x300
    1a5a:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1a61:	03 00                	add    eax,DWORD PTR [eax]
    1a63:	00 00                	add    BYTE PTR [eax],al
    1a65:	00 05 02 14 4c 00    	add    BYTE PTR ds:0x4c1402,al
    1a6b:	9f                   	lahf   
    1a6c:	15 f3 75 2f 49       	adc    eax,0x492f75f3
    1a71:	e6 3d                	out    0x3d,al
    1a73:	31 c9                	xor    ecx,ecx
    1a75:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1a76:	31 f3                	xor    ebx,esi
    1a78:	75 2f                	jne    1aa9 <__fmodf2+0x1a7d>
    1a7a:	49                   	dec    ecx
    1a7b:	00 02                	add    BYTE PTR [edx],al
    1a7d:	04 01                	add    al,0x1
    1a7f:	06                   	push   es
    1a80:	e4 06                	in     al,0x6
    1a82:	84 3d 31 c9 e5 02    	test   BYTE PTR ds:0x2e5c931,bh
    1a88:	02 00                	add    al,BYTE PTR [eax]
    1a8a:	01 01                	add    DWORD PTR [ecx],eax
    1a8c:	c1 00 00             	rol    DWORD PTR [eax],0x0
    1a8f:	00 02                	add    BYTE PTR [edx],al
    1a91:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    1a94:	00 00                	add    BYTE PTR [eax],al
    1a96:	01 01                	add    DWORD PTR [ecx],eax
    1a98:	fb                   	sti    
    1a99:	0e                   	push   cs
    1a9a:	0d 00 01 01 01       	or     eax,0x1010100
    1a9f:	01 00                	add    DWORD PTR [eax],eax
    1aa1:	00 00                	add    BYTE PTR [eax],al
    1aa3:	01 00                	add    DWORD PTR [eax],eax
    1aa5:	00 01                	add    BYTE PTR [ecx],al
    1aa7:	73 72                	jae    1b1b <__fmodf2+0x1aef>
    1aa9:	63 2f                	arpl   WORD PTR [edi],bp
    1aab:	73 74                	jae    1b21 <__fmodf2+0x1af5>
    1aad:	72 69                	jb     1b18 <__fmodf2+0x1aec>
    1aaf:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1ab0:	67 73 00             	addr16 jae 1ab3 <__fmodf2+0x1a87>
    1ab3:	2f                   	das    
    1ab4:	68 6f 6d 65 2f       	push   0x2f656d6f
    1ab9:	79 6f                	jns    1b2a <__fmodf2+0x1afe>
    1abb:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1ac2:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1ac5:	73 73                	jae    1b3a <__fmodf2+0x1b0e>
    1ac7:	2f                   	das    
    1ac8:	6c                   	ins    BYTE PTR es:[edi],dx
    1ac9:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1ad0:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1ad6:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1adc:	78 2d                	js     1b0b <__fmodf2+0x1adf>
    1ade:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1ae0:	75 2f                	jne    1b11 <__fmodf2+0x1ae5>
    1ae2:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1ae7:	2f                   	das    
    1ae8:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1aef:	00 00                	add    BYTE PTR [eax],al
    1af1:	73 74                	jae    1b67 <__fmodf2+0x1b3b>
    1af3:	72 6e                	jb     1b63 <__fmodf2+0x1b37>
    1af5:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    1af8:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1afb:	01 00                	add    DWORD PTR [eax],eax
    1afd:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1b00:	64                   	fs
    1b01:	64                   	fs
    1b02:	65                   	gs
    1b03:	66                   	data16
    1b04:	2e                   	cs
    1b05:	68 00 02 00 00       	push   0x200
    1b0a:	00 00                	add    BYTE PTR [eax],al
    1b0c:	05 02 b8 4c 00       	add    eax,0x4cb802
    1b11:	9f                   	lahf   
    1b12:	03 0c 01             	add    ecx,DWORD PTR [ecx+eax*1]
    1b15:	c9                   	leave  
    1b16:	2f                   	das    
    1b17:	f3 00 02             	repz add BYTE PTR [edx],al
    1b1a:	04 01                	add    al,0x1
    1b1c:	06                   	push   es
    1b1d:	f2 00 02             	repnz add BYTE PTR [edx],al
    1b20:	04 02                	add    al,0x2
    1b22:	74 06                	je     1b2a <__fmodf2+0x1afe>
    1b24:	75 9f                	jne    1ac5 <__fmodf2+0x1a99>
    1b26:	70 00                	jo     1b28 <__fmodf2+0x1afc>
    1b28:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b2b:	06                   	push   es
    1b2c:	ba 06 6b 59 31       	mov    edx,0x31596b06
    1b31:	c9                   	leave  
    1b32:	2f                   	das    
    1b33:	f3 00 02             	repz add BYTE PTR [edx],al
    1b36:	04 01                	add    al,0x1
    1b38:	06                   	push   es
    1b39:	f2 00 02             	repnz add BYTE PTR [edx],al
    1b3c:	04 02                	add    al,0x2
    1b3e:	74 06                	je     1b46 <__fmodf2+0x1b1a>
    1b40:	75 9f                	jne    1ae1 <__fmodf2+0x1ab5>
    1b42:	70 00                	jo     1b44 <__fmodf2+0x1b18>
    1b44:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b47:	06                   	push   es
    1b48:	ba 06 6b 59 02       	mov    edx,0x2596b06
    1b4d:	02 00                	add    al,BYTE PTR [eax]
    1b4f:	01 01                	add    DWORD PTR [ecx],eax
    1b51:	a3 00 00 00 02       	mov    ds:0x2000000,eax
    1b56:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    1b59:	00 00                	add    BYTE PTR [eax],al
    1b5b:	01 01                	add    DWORD PTR [ecx],eax
    1b5d:	fb                   	sti    
    1b5e:	0e                   	push   cs
    1b5f:	0d 00 01 01 01       	or     eax,0x1010100
    1b64:	01 00                	add    DWORD PTR [eax],eax
    1b66:	00 00                	add    BYTE PTR [eax],al
    1b68:	01 00                	add    DWORD PTR [eax],eax
    1b6a:	00 01                	add    BYTE PTR [ecx],al
    1b6c:	73 72                	jae    1be0 <__fmodf2+0x1bb4>
    1b6e:	63 2f                	arpl   WORD PTR [edi],bp
    1b70:	73 74                	jae    1be6 <__fmodf2+0x1bba>
    1b72:	72 69                	jb     1bdd <__fmodf2+0x1bb1>
    1b74:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1b75:	67 73 00             	addr16 jae 1b78 <__fmodf2+0x1b4c>
    1b78:	2f                   	das    
    1b79:	68 6f 6d 65 2f       	push   0x2f656d6f
    1b7e:	79 6f                	jns    1bef <__fmodf2+0x1bc3>
    1b80:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1b87:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1b8a:	73 73                	jae    1bff <__fmodf2+0x1bd3>
    1b8c:	2f                   	das    
    1b8d:	6c                   	ins    BYTE PTR es:[edi],dx
    1b8e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1b95:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1b9b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1ba1:	78 2d                	js     1bd0 <__fmodf2+0x1ba4>
    1ba3:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1ba5:	75 2f                	jne    1bd6 <__fmodf2+0x1baa>
    1ba7:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1bac:	2f                   	das    
    1bad:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1bb4:	00 00                	add    BYTE PTR [eax],al
    1bb6:	73 74                	jae    1c2c <__fmodf2+0x1c00>
    1bb8:	72 6e                	jb     1c28 <__fmodf2+0x1bfc>
    1bba:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    1bbd:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1bc0:	01 00                	add    DWORD PTR [eax],eax
    1bc2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1bc5:	64                   	fs
    1bc6:	64                   	fs
    1bc7:	65                   	gs
    1bc8:	66                   	data16
    1bc9:	2e                   	cs
    1bca:	68 00 02 00 00       	push   0x200
    1bcf:	00 00                	add    BYTE PTR [eax],al
    1bd1:	05 02 88 4d 00       	add    eax,0x4d8802
    1bd6:	9f                   	lahf   
    1bd7:	03 0d 01 f3 67 2f    	add    ecx,DWORD PTR ds:0x2f67f301
    1bdd:	08 67 48             	or     BYTE PTR [edi+0x48],ah
    1be0:	00 02                	add    BYTE PTR [edx],al
    1be2:	04 01                	add    al,0x1
    1be4:	06                   	push   es
    1be5:	66 06                	pushw  es
    1be7:	a2 2f bb 48 6a       	mov    ds:0x6a48bb2f,al
    1bec:	67 67 3d 31 c9 08 13 	addr32 addr16 cmp eax,0x1308c931
    1bf3:	02 02                	add    al,BYTE PTR [edx]
    1bf5:	00 01                	add    BYTE PTR [ecx],al
    1bf7:	01 d8                	add    eax,ebx
    1bf9:	00 00                	add    BYTE PTR [eax],al
    1bfb:	00 02                	add    BYTE PTR [edx],al
    1bfd:	00 2b                	add    BYTE PTR [ebx],ch
    1bff:	00 00                	add    BYTE PTR [eax],al
    1c01:	00 01                	add    BYTE PTR [ecx],al
    1c03:	01 fb                	add    ebx,edi
    1c05:	0e                   	push   cs
    1c06:	0d 00 01 01 01       	or     eax,0x1010100
    1c0b:	01 00                	add    DWORD PTR [eax],eax
    1c0d:	00 00                	add    BYTE PTR [eax],al
    1c0f:	01 00                	add    DWORD PTR [eax],eax
    1c11:	00 01                	add    BYTE PTR [ecx],al
    1c13:	73 72                	jae    1c87 <__fmodf2+0x1c5b>
    1c15:	63 2f                	arpl   WORD PTR [edi],bp
    1c17:	73 74                	jae    1c8d <__fmodf2+0x1c61>
    1c19:	72 69                	jb     1c84 <__fmodf2+0x1c58>
    1c1b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1c1c:	67 73 00             	addr16 jae 1c1f <__fmodf2+0x1bf3>
    1c1f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1c22:	72 6f                	jb     1c93 <__fmodf2+0x1c67>
    1c24:	75 6c                	jne    1c92 <__fmodf2+0x1c66>
    1c26:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1c29:	01 00                	add    DWORD PTR [eax],eax
    1c2b:	00 00                	add    BYTE PTR [eax],al
    1c2d:	00 05 02 14 4e 00    	add    BYTE PTR ds:0x4e1402,al
    1c33:	9f                   	lahf   
    1c34:	03 3b                	add    edi,DWORD PTR [ebx]
    1c36:	01 08                	add    DWORD PTR [eax],ecx
    1c38:	2f                   	das    
    1c39:	40                   	inc    eax
    1c3a:	00 02                	add    BYTE PTR [edx],al
    1c3c:	04 01                	add    al,0x1
    1c3e:	7a 00                	jp     1c40 <__fmodf2+0x1c14>
    1c40:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1c43:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1c44:	59                   	pop    ecx
    1c45:	59                   	pop    ecx
    1c46:	75 c9                	jne    1c11 <__fmodf2+0x1be5>
    1c48:	59                   	pop    ecx
    1c49:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1c4a:	00 02                	add    BYTE PTR [edx],al
    1c4c:	04 02                	add    al,0x2
    1c4e:	06                   	push   es
    1c4f:	66                   	data16
    1c50:	00 02                	add    BYTE PTR [edx],al
    1c52:	04 03                	add    al,0x3
    1c54:	66 06                	pushw  es
    1c56:	59                   	pop    ecx
    1c57:	00 02                	add    BYTE PTR [edx],al
    1c59:	04 01                	add    al,0x1
    1c5b:	06                   	push   es
    1c5c:	74 06                	je     1c64 <__fmodf2+0x1c38>
    1c5e:	75 91                	jne    1bf1 <__fmodf2+0x1bc5>
    1c60:	3d 76 67 00 02       	cmp    eax,0x2006776
    1c65:	04 01                	add    al,0x1
    1c67:	06                   	push   es
    1c68:	58                   	pop    eax
    1c69:	00 02                	add    BYTE PTR [edx],al
    1c6b:	04 02                	add    al,0x2
    1c6d:	74 00                	je     1c6f <__fmodf2+0x1c43>
    1c6f:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1c72:	58                   	pop    eax
    1c73:	06                   	push   es
    1c74:	3d 08 21 08 2f       	cmp    eax,0x2f082108
    1c79:	9f                   	lahf   
    1c7a:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1c7e:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1c81:	06                   	push   es
    1c82:	58                   	pop    eax
    1c83:	00 02                	add    BYTE PTR [edx],al
    1c85:	04 03                	add    al,0x3
    1c87:	58                   	pop    eax
    1c88:	00 02                	add    BYTE PTR [edx],al
    1c8a:	04 04                	add    al,0x4
    1c8c:	74 00                	je     1c8e <__fmodf2+0x1c62>
    1c8e:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1c91:	58                   	pop    eax
    1c92:	06                   	push   es
    1c93:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1c96:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1c99:	06                   	push   es
    1c9a:	66                   	data16
    1c9b:	00 02                	add    BYTE PTR [edx],al
    1c9d:	04 02                	add    al,0x2
    1c9f:	58                   	pop    eax
    1ca0:	00 02                	add    BYTE PTR [edx],al
    1ca2:	04 03                	add    al,0x3
    1ca4:	58                   	pop    eax
    1ca5:	06                   	push   es
    1ca6:	67 76 59             	addr16 jbe 1d02 <__fmodf2+0x1cd6>
    1ca9:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    1cad:	03 10                	add    edx,DWORD PTR [eax]
    1caf:	ac                   	lods   al,BYTE PTR ds:[esi]
    1cb0:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    1cb3:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1cb6:	20 67 75             	and    BYTE PTR [edi+0x75],ah
    1cb9:	67 2f                	addr16 das 
    1cbb:	67 00 02             	add    BYTE PTR [bp+si],al
    1cbe:	04 01                	add    al,0x1
    1cc0:	06                   	push   es
    1cc1:	66                   	data16
    1cc2:	00 02                	add    BYTE PTR [edx],al
    1cc4:	04 02                	add    al,0x2
    1cc6:	58                   	pop    eax
    1cc7:	00 02                	add    BYTE PTR [edx],al
    1cc9:	04 04                	add    al,0x4
    1ccb:	3c 06                	cmp    al,0x6
    1ccd:	59                   	pop    ecx
    1cce:	2f                   	das    
    1ccf:	02 08                	add    cl,BYTE PTR [eax]
    1cd1:	00 01                	add    BYTE PTR [ecx],al
    1cd3:	01 43 00             	add    DWORD PTR [ebx+0x0],eax
    1cd6:	00 00                	add    BYTE PTR [eax],al
    1cd8:	02 00                	add    al,BYTE PTR [eax]
    1cda:	2d 00 00 00 01       	sub    eax,0x1000000
    1cdf:	01 fb                	add    ebx,edi
    1ce1:	0e                   	push   cs
    1ce2:	0d 00 01 01 01       	or     eax,0x1010100
    1ce7:	01 00                	add    DWORD PTR [eax],eax
    1ce9:	00 00                	add    BYTE PTR [eax],al
    1ceb:	01 00                	add    DWORD PTR [eax],eax
    1ced:	00 01                	add    BYTE PTR [ecx],al
    1cef:	73 72                	jae    1d63 <__fmodf2+0x1d37>
    1cf1:	63 2f                	arpl   WORD PTR [edi],bp
    1cf3:	73 74                	jae    1d69 <__fmodf2+0x1d3d>
    1cf5:	72 69                	jb     1d60 <__fmodf2+0x1d34>
    1cf7:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1cf8:	67 73 00             	addr16 jae 1cfb <__fmodf2+0x1ccf>
    1cfb:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1cfe:	72 70                	jb     1d70 <__fmodf2+0x1d44>
    1d00:	61                   	popa   
    1d01:	72 74                	jb     1d77 <__fmodf2+0x1d4b>
    1d03:	73 2e                	jae    1d33 <__fmodf2+0x1d07>
    1d05:	63 00                	arpl   WORD PTR [eax],ax
    1d07:	01 00                	add    DWORD PTR [eax],eax
    1d09:	00 00                	add    BYTE PTR [eax],al
    1d0b:	00 05 02 94 4f 00    	add    BYTE PTR ds:0x4f9402,al
    1d11:	9f                   	lahf   
    1d12:	13 c9                	adc    ecx,ecx
    1d14:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1d15:	3d 02 02 00 01       	cmp    eax,0x1000202
    1d1a:	01 04 01             	add    DWORD PTR [ecx+eax*1],eax
    1d1d:	00 00                	add    BYTE PTR [eax],al
    1d1f:	02 00                	add    al,BYTE PTR [eax]
    1d21:	2b 00                	sub    eax,DWORD PTR [eax]
    1d23:	00 00                	add    BYTE PTR [eax],al
    1d25:	01 01                	add    DWORD PTR [ecx],eax
    1d27:	fb                   	sti    
    1d28:	0e                   	push   cs
    1d29:	0d 00 01 01 01       	or     eax,0x1010100
    1d2e:	01 00                	add    DWORD PTR [eax],eax
    1d30:	00 00                	add    BYTE PTR [eax],al
    1d32:	01 00                	add    DWORD PTR [eax],eax
    1d34:	00 01                	add    BYTE PTR [ecx],al
    1d36:	73 72                	jae    1daa <__fmodf2+0x1d7e>
    1d38:	63 2f                	arpl   WORD PTR [edi],bp
    1d3a:	73 74                	jae    1db0 <__fmodf2+0x1d84>
    1d3c:	72 69                	jb     1da7 <__fmodf2+0x1d7b>
    1d3e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1d3f:	67 73 00             	addr16 jae 1d42 <__fmodf2+0x1d16>
    1d42:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1d45:	72 74                	jb     1dbb <__fmodf2+0x1d8f>
    1d47:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1d48:	6c                   	ins    BYTE PTR es:[edi],dx
    1d49:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1d4c:	01 00                	add    DWORD PTR [eax],eax
    1d4e:	00 00                	add    BYTE PTR [eax],al
    1d50:	00 05 02 b4 4f 00    	add    BYTE PTR ds:0x4fb402,al
    1d56:	9f                   	lahf   
    1d57:	03 d7                	add    edx,edi
    1d59:	00 01                	add    BYTE PTR [ecx],al
    1d5b:	08 2f                	or     BYTE PTR [edi],ch
    1d5d:	40                   	inc    eax
    1d5e:	00 02                	add    BYTE PTR [edx],al
    1d60:	04 01                	add    al,0x1
    1d62:	7c 00                	jl     1d64 <__fmodf2+0x1d38>
    1d64:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1d67:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1d68:	59                   	pop    ecx
    1d69:	59                   	pop    ecx
    1d6a:	75 c9                	jne    1d35 <__fmodf2+0x1d09>
    1d6c:	59                   	pop    ecx
    1d6d:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1d6e:	00 02                	add    BYTE PTR [edx],al
    1d70:	04 02                	add    al,0x2
    1d72:	06                   	push   es
    1d73:	66                   	data16
    1d74:	00 02                	add    BYTE PTR [edx],al
    1d76:	04 03                	add    al,0x3
    1d78:	66 06                	pushw  es
    1d7a:	59                   	pop    ecx
    1d7b:	00 02                	add    BYTE PTR [edx],al
    1d7d:	04 01                	add    al,0x1
    1d7f:	06                   	push   es
    1d80:	74 06                	je     1d88 <__fmodf2+0x1d5c>
    1d82:	75 91                	jne    1d15 <__fmodf2+0x1ce9>
    1d84:	3d 76 67 00 02       	cmp    eax,0x2006776
    1d89:	04 01                	add    al,0x1
    1d8b:	06                   	push   es
    1d8c:	58                   	pop    eax
    1d8d:	00 02                	add    BYTE PTR [edx],al
    1d8f:	04 02                	add    al,0x2
    1d91:	74 00                	je     1d93 <__fmodf2+0x1d67>
    1d93:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1d96:	58                   	pop    eax
    1d97:	06                   	push   es
    1d98:	03 13                	add    edx,DWORD PTR [ebx]
    1d9a:	3c 00                	cmp    al,0x0
    1d9c:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1d9f:	06                   	push   es
    1da0:	66                   	data16
    1da1:	00 02                	add    BYTE PTR [edx],al
    1da3:	04 02                	add    al,0x2
    1da5:	74 00                	je     1da7 <__fmodf2+0x1d7b>
    1da7:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1daa:	06                   	push   es
    1dab:	59                   	pop    ecx
    1dac:	00 02                	add    BYTE PTR [edx],al
    1dae:	04 04                	add    al,0x4
    1db0:	08 3d 00 02 04 04    	or     BYTE PTR ds:0x4040200,bh
    1db6:	f3 9f                	repz lahf 
    1db8:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1dbc:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1dbf:	06                   	push   es
    1dc0:	58                   	pop    eax
    1dc1:	00 02                	add    BYTE PTR [edx],al
    1dc3:	04 03                	add    al,0x3
    1dc5:	58                   	pop    eax
    1dc6:	00 02                	add    BYTE PTR [edx],al
    1dc8:	04 04                	add    al,0x4
    1dca:	74 00                	je     1dcc <__fmodf2+0x1da0>
    1dcc:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1dcf:	58                   	pop    eax
    1dd0:	06                   	push   es
    1dd1:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1dd4:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1dd7:	06                   	push   es
    1dd8:	66                   	data16
    1dd9:	00 02                	add    BYTE PTR [edx],al
    1ddb:	04 02                	add    al,0x2
    1ddd:	58                   	pop    eax
    1dde:	00 02                	add    BYTE PTR [edx],al
    1de0:	04 03                	add    al,0x3
    1de2:	58                   	pop    eax
    1de3:	06                   	push   es
    1de4:	59                   	pop    ecx
    1de5:	76 59                	jbe    1e40 <__fmodf2+0x1e14>
    1de7:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    1deb:	03 10                	add    edx,DWORD PTR [eax]
    1ded:	ac                   	lods   al,BYTE PTR ds:[esi]
    1dee:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    1df1:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1df4:	20 67 00             	and    BYTE PTR [edi+0x0],ah
    1df7:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1dfa:	06                   	push   es
    1dfb:	66                   	data16
    1dfc:	00 02                	add    BYTE PTR [edx],al
    1dfe:	04 02                	add    al,0x2
    1e00:	74 00                	je     1e02 <__fmodf2+0x1dd6>
    1e02:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1e05:	58                   	pop    eax
    1e06:	06                   	push   es
    1e07:	4b                   	dec    ebx
    1e08:	67 2f                	addr16 das 
    1e0a:	67 00 02             	add    BYTE PTR [bp+si],al
    1e0d:	04 01                	add    al,0x1
    1e0f:	06                   	push   es
    1e10:	66                   	data16
    1e11:	00 02                	add    BYTE PTR [edx],al
    1e13:	04 02                	add    al,0x2
    1e15:	58                   	pop    eax
    1e16:	00 02                	add    BYTE PTR [edx],al
    1e18:	04 04                	add    al,0x4
    1e1a:	3c 06                	cmp    al,0x6
    1e1c:	59                   	pop    ecx
    1e1d:	2f                   	das    
    1e1e:	02 08                	add    cl,BYTE PTR [eax]
    1e20:	00 01                	add    BYTE PTR [ecx],al
    1e22:	01 5e 00             	add    DWORD PTR [esi+0x0],ebx
    1e25:	00 00                	add    BYTE PTR [eax],al
    1e27:	02 00                	add    al,BYTE PTR [eax]
    1e29:	2c 00                	sub    al,0x0
    1e2b:	00 00                	add    BYTE PTR [eax],al
    1e2d:	01 01                	add    DWORD PTR [ecx],eax
    1e2f:	fb                   	sti    
    1e30:	0e                   	push   cs
    1e31:	0d 00 01 01 01       	or     eax,0x1010100
    1e36:	01 00                	add    DWORD PTR [eax],eax
    1e38:	00 00                	add    BYTE PTR [eax],al
    1e3a:	01 00                	add    DWORD PTR [eax],eax
    1e3c:	00 01                	add    BYTE PTR [ecx],al
    1e3e:	73 72                	jae    1eb2 <__fmodf2+0x1e86>
    1e40:	63 2f                	arpl   WORD PTR [edi],bp
    1e42:	73 74                	jae    1eb8 <__fmodf2+0x1e8c>
    1e44:	72 69                	jb     1eaf <__fmodf2+0x1e83>
    1e46:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1e47:	67 73 00             	addr16 jae 1e4a <__fmodf2+0x1e1e>
    1e4a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1e4d:	72 74                	jb     1ec3 <__fmodf2+0x1e97>
    1e4f:	72 69                	jb     1eba <__fmodf2+0x1e8e>
    1e51:	6d                   	ins    DWORD PTR es:[edi],dx
    1e52:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1e55:	01 00                	add    DWORD PTR [eax],eax
    1e57:	00 00                	add    BYTE PTR [eax],al
    1e59:	00 05 02 50 51 00    	add    BYTE PTR ds:0x515002,al
    1e5f:	9f                   	lahf   
    1e60:	15 08 13 bf 30       	adc    eax,0x30bf1308
    1e65:	48                   	dec    eax
    1e66:	b3 08                	mov    bl,0x8
    1e68:	9f                   	lahf   
    1e69:	30 b8 00 02 04 01    	xor    BYTE PTR [eax+0x1040200],bh
    1e6f:	06                   	push   es
    1e70:	82                   	(bad)  
    1e71:	06                   	push   es
    1e72:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1e73:	84 00                	test   BYTE PTR [eax],al
    1e75:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1e78:	06                   	push   es
    1e79:	20 06                	and    BYTE PTR [esi],al
    1e7b:	08 ca                	or     dl,cl
    1e7d:	69 f3 d7 02 02 00    	imul   esi,ebx,0x202d7
    1e83:	01 01                	add    DWORD PTR [ecx],eax
    1e85:	d4 00                	aam    0x0
    1e87:	00 00                	add    BYTE PTR [eax],al
    1e89:	02 00                	add    al,BYTE PTR [eax]
    1e8b:	9e                   	sahf   
    1e8c:	00 00                	add    BYTE PTR [eax],al
    1e8e:	00 01                	add    BYTE PTR [ecx],al
    1e90:	01 fb                	add    ebx,edi
    1e92:	0e                   	push   cs
    1e93:	0d 00 01 01 01       	or     eax,0x1010100
    1e98:	01 00                	add    DWORD PTR [eax],eax
    1e9a:	00 00                	add    BYTE PTR [eax],al
    1e9c:	01 00                	add    DWORD PTR [eax],eax
    1e9e:	00 01                	add    BYTE PTR [ecx],al
    1ea0:	73 72                	jae    1f14 <__fmodf2+0x1ee8>
    1ea2:	63 00                	arpl   WORD PTR [eax],ax
    1ea4:	2f                   	das    
    1ea5:	68 6f 6d 65 2f       	push   0x2f656d6f
    1eaa:	79 6f                	jns    1f1b <__fmodf2+0x1eef>
    1eac:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1eb3:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1eb6:	73 73                	jae    1f2b <__fmodf2+0x1eff>
    1eb8:	2f                   	das    
    1eb9:	6c                   	ins    BYTE PTR es:[edi],dx
    1eba:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1ec1:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1ec7:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1ecd:	78 2d                	js     1efc <__fmodf2+0x1ed0>
    1ecf:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1ed1:	75 2f                	jne    1f02 <__fmodf2+0x1ed6>
    1ed3:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1ed8:	2f                   	das    
    1ed9:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1ee0:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1ee3:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1ee7:	65 00 00             	add    BYTE PTR gs:[eax],al
    1eea:	73 74                	jae    1f60 <__fmodf2+0x1f34>
    1eec:	72 72                	jb     1f60 <__fmodf2+0x1f34>
    1eee:	65                   	gs
    1eef:	70 6c                	jo     1f5d <__fmodf2+0x1f31>
    1ef1:	61                   	popa   
    1ef2:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
    1ef5:	63 00                	arpl   WORD PTR [eax],ax
    1ef7:	01 00                	add    DWORD PTR [eax],eax
    1ef9:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1efc:	64                   	fs
    1efd:	64                   	fs
    1efe:	65                   	gs
    1eff:	66                   	data16
    1f00:	2e                   	cs
    1f01:	68 00 02 00 00       	push   0x200
    1f06:	73 74                	jae    1f7c <__fmodf2+0x1f50>
    1f08:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1f0f:	63 
    1f10:	2e                   	cs
    1f11:	68 00 02 00 00       	push   0x200
    1f16:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    1f19:	6d                   	ins    DWORD PTR es:[edi],dx
    1f1a:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1f1b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1f1c:	2e                   	cs
    1f1d:	68 00 03 00 00       	push   0x300
    1f22:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1f29:	03 00                	add    eax,DWORD PTR [eax]
    1f2b:	00 00                	add    BYTE PTR [eax],al
    1f2d:	00 05 02 08 52 00    	add    BYTE PTR ds:0x520802,al
    1f33:	9f                   	lahf   
    1f34:	03 0d 01 08 2f 08    	add    ecx,DWORD PTR ds:0x82f0801
    1f3a:	3f                   	aas    
    1f3b:	76 5a                	jbe    1f97 <__fmodf2+0x1f6b>
    1f3d:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
    1f40:	cb                   	retf   
    1f41:	08 77 02             	or     BYTE PTR [edi+0x2],dh
    1f44:	2a 15 02 28 13 03    	sub    dl,BYTE PTR ds:0x3132802
    1f4a:	73 08                	jae    1f54 <__fmodf2+0x1f28>
    1f4c:	12 03                	adc    al,BYTE PTR [ebx]
    1f4e:	11 08                	adc    DWORD PTR [eax],ecx
    1f50:	c8 08 68 3d          	enter  0x6808,0x3d
    1f54:	77 f3                	ja     1f49 <__fmodf2+0x1f1d>
    1f56:	08 3d 02 02 00 01    	or     BYTE PTR ds:0x1000202,bh
    1f5c:	01 8c 00 00 00 02 00 	add    DWORD PTR [eax+eax*1+0x20000],ecx
    1f63:	37                   	aaa    
    1f64:	00 00                	add    BYTE PTR [eax],al
    1f66:	00 01                	add    BYTE PTR [ecx],al
    1f68:	01 fb                	add    ebx,edi
    1f6a:	0e                   	push   cs
    1f6b:	0d 00 01 01 01       	or     eax,0x1010100
    1f70:	01 00                	add    DWORD PTR [eax],eax
    1f72:	00 00                	add    BYTE PTR [eax],al
    1f74:	01 00                	add    DWORD PTR [eax],eax
    1f76:	00 01                	add    BYTE PTR [ecx],al
    1f78:	73 72                	jae    1fec <__fmodf2+0x1fc0>
    1f7a:	63 00                	arpl   WORD PTR [eax],ax
    1f7c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1f83:	00 00                	add    BYTE PTR [eax],al
    1f85:	73 74                	jae    1ffb <__fmodf2+0x1fcf>
    1f87:	72 73                	jb     1ffc <__fmodf2+0x1fd0>
    1f89:	74 72                	je     1ffd <__fmodf2+0x1fd1>
    1f8b:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1f8e:	01 00                	add    DWORD PTR [eax],eax
    1f90:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
    1f93:	6d                   	ins    DWORD PTR es:[edi],dx
    1f94:	6d                   	ins    DWORD PTR es:[edi],dx
    1f95:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1f96:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1f97:	2e                   	cs
    1f98:	68 00 02 00 00       	push   0x200
    1f9d:	00 00                	add    BYTE PTR [eax],al
    1f9f:	05 02 4c 53 00       	add    eax,0x534c02
    1fa4:	9f                   	lahf   
    1fa5:	03 34 01             	add    esi,DWORD PTR [ecx+eax*1]
    1fa8:	08 27                	or     BYTE PTR [edi],ah
    1faa:	68 3d 75 5b c9       	push   0xc95b753d
    1faf:	c9                   	leave  
    1fb0:	5b                   	pop    ebx
    1fb1:	3e                   	ds
    1fb2:	75 5a                	jne    200e <__fmodf2+0x1fe2>
    1fb4:	c9                   	leave  
    1fb5:	59                   	pop    ecx
    1fb6:	08 3f                	or     BYTE PTR [edi],bh
    1fb8:	2c 23                	sub    al,0x23
    1fba:	03 73 58             	add    esi,DWORD PTR [ebx+0x58]
    1fbd:	1c 00                	sbb    al,0x0
    1fbf:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1fc2:	06                   	push   es
    1fc3:	4a                   	dec    edx
    1fc4:	06                   	push   es
    1fc5:	03 13                	add    edx,DWORD PTR [ebx]
    1fc7:	9e                   	sahf   
    1fc8:	59                   	pop    ecx
    1fc9:	77 ec                	ja     1fb7 <__fmodf2+0x1f8b>
    1fcb:	3d 75 5b cb 3e       	cmp    eax,0x3ecb5b75
    1fd0:	75 5a                	jne    202c <__fmodf2+0x2000>
    1fd2:	08 3f                	or     BYTE PTR [edi],bh
    1fd4:	2c 23                	sub    al,0x23
    1fd6:	03 75 58             	add    esi,DWORD PTR [ebp+0x58]
    1fd9:	1e                   	push   ds
    1fda:	00 02                	add    BYTE PTR [edx],al
    1fdc:	04 01                	add    al,0x1
    1fde:	06                   	push   es
    1fdf:	4a                   	dec    edx
    1fe0:	06                   	push   es
    1fe1:	03 0f                	add    ecx,DWORD PTR [edi]
    1fe3:	9e                   	sahf   
    1fe4:	59                   	pop    ecx
    1fe5:	4d                   	dec    ebp
    1fe6:	c9                   	leave  
    1fe7:	d7                   	xlat   BYTE PTR ds:[ebx]
    1fe8:	02 02                	add    al,BYTE PTR [edx]
    1fea:	00 01                	add    BYTE PTR [ecx],al
    1fec:	01 32                	add    DWORD PTR [edx],esi
    1fee:	03 00                	add    eax,DWORD PTR [eax]
    1ff0:	00 02                	add    BYTE PTR [edx],al
    1ff2:	00 bc 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bh
    1ff9:	fb                   	sti    
    1ffa:	0e                   	push   cs
    1ffb:	0d 00 01 01 01       	or     eax,0x1010100
    2000:	01 00                	add    DWORD PTR [eax],eax
    2002:	00 00                	add    BYTE PTR [eax],al
    2004:	01 00                	add    DWORD PTR [eax],eax
    2006:	00 01                	add    BYTE PTR [ecx],al
    2008:	73 72                	jae    207c <__fmodf2+0x2050>
    200a:	63 00                	arpl   WORD PTR [eax],ax
    200c:	2f                   	das    
    200d:	68 6f 6d 65 2f       	push   0x2f656d6f
    2012:	79 6f                	jns    2083 <__fmodf2+0x2057>
    2014:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    201b:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    201e:	73 73                	jae    2093 <__fmodf2+0x2067>
    2020:	2f                   	das    
    2021:	6c                   	ins    BYTE PTR es:[edi],dx
    2022:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    2029:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    202f:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    2035:	78 2d                	js     2064 <__fmodf2+0x2038>
    2037:	67 6e                	outs   dx,BYTE PTR ds:[si]
    2039:	75 2f                	jne    206a <__fmodf2+0x203e>
    203b:	35 2e 33 2e 30       	xor    eax,0x302e332e
    2040:	2f                   	das    
    2041:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    2048:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    204b:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    204f:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    2052:	2e                   	cs
    2053:	2f                   	das    
    2054:	2e                   	cs
    2055:	2e                   	cs
    2056:	2f                   	das    
    2057:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    205b:	6a 2f                	push   0x2f
    205d:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    2060:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    2067:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2068:	65                   	gs
    2069:	6c                   	ins    BYTE PTR es:[edi],dx
    206a:	2f                   	das    
    206b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    2072:	00 00                	add    BYTE PTR [eax],al
    2074:	74 69                	je     20df <__fmodf2+0x20b3>
    2076:	6d                   	ins    DWORD PTR es:[edi],dx
    2077:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    207b:	01 00                	add    DWORD PTR [eax],eax
    207d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    2080:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    2087:	63 
    2088:	2e                   	cs
    2089:	68 00 02 00 00       	push   0x200
    208e:	74 69                	je     20f9 <__fmodf2+0x20cd>
    2090:	6d                   	ins    DWORD PTR es:[edi],dx
    2091:	65                   	gs
    2092:	2e                   	cs
    2093:	68 00 03 00 00       	push   0x300
    2098:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    209b:	6d                   	ins    DWORD PTR es:[edi],dx
    209c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    209d:	6e                   	outs   dx,BYTE PTR ds:[esi]
    209e:	2e                   	cs
    209f:	68 00 03 00 00       	push   0x300
    20a4:	73 79                	jae    211f <__fmodf2+0x20f3>
    20a6:	73 63                	jae    210b <__fmodf2+0x20df>
    20a8:	61                   	popa   
    20a9:	6c                   	ins    BYTE PTR es:[edi],dx
    20aa:	6c                   	ins    BYTE PTR es:[edi],dx
    20ab:	73 2e                	jae    20db <__fmodf2+0x20af>
    20ad:	68 00 04 00 00       	push   0x400
    20b2:	00 00                	add    BYTE PTR [eax],al
    20b4:	05 02 78 54 00       	add    eax,0x547802
    20b9:	9f                   	lahf   
    20ba:	03 1a                	add    ebx,DWORD PTR [edx]
    20bc:	01 08                	add    DWORD PTR [eax],ecx
    20be:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
    20c1:	f3 3d 78 08 21 84    	repz cmp eax,0x84210878
    20c7:	76 02                	jbe    20cb <__fmodf2+0x209f>
    20c9:	24 13                	and    al,0x13
    20cb:	08 22                	or     BYTE PTR [edx],ah
    20cd:	02 2e                	add    ch,BYTE PTR [esi]
    20cf:	13 02                	adc    eax,DWORD PTR [edx]
    20d1:	2f                   	das    
    20d2:	13 08                	adc    ecx,DWORD PTR [eax]
    20d4:	67 02 2d             	add    ch,BYTE PTR [di]
    20d7:	13 2f                	adc    ebp,DWORD PTR [edi]
    20d9:	00 02                	add    BYTE PTR [edx],al
    20db:	04 01                	add    al,0x1
    20dd:	06                   	push   es
    20de:	9e                   	sahf   
    20df:	00 02                	add    BYTE PTR [edx],al
    20e1:	04 04                	add    al,0x4
    20e3:	02 23                	add    ah,BYTE PTR [ebx]
    20e5:	12 00                	adc    al,BYTE PTR [eax]
    20e7:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    20ee:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    20f1:	74 00                	je     20f3 <__fmodf2+0x20c7>
    20f3:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    20f6:	58                   	pop    eax
    20f7:	00 02                	add    BYTE PTR [edx],al
    20f9:	04 08                	add    al,0x8
    20fb:	06                   	push   es
    20fc:	3d 48 00 02 04       	cmp    eax,0x4020048
    2101:	01 06                	add    DWORD PTR [esi],eax
    2103:	9e                   	sahf   
    2104:	00 02                	add    BYTE PTR [edx],al
    2106:	04 04                	add    al,0x4
    2108:	02 23                	add    ah,BYTE PTR [ebx]
    210a:	12 00                	adc    al,BYTE PTR [eax]
    210c:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    2113:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2116:	74 00                	je     2118 <__fmodf2+0x20ec>
    2118:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    211b:	58                   	pop    eax
    211c:	06                   	push   es
    211d:	94                   	xchg   esp,eax
    211e:	e5 91                	in     eax,0x91
    2120:	9f                   	lahf   
    2121:	59                   	pop    ecx
    2122:	00 02                	add    BYTE PTR [edx],al
    2124:	04 01                	add    al,0x1
    2126:	06                   	push   es
    2127:	9e                   	sahf   
    2128:	00 02                	add    BYTE PTR [edx],al
    212a:	04 04                	add    al,0x4
    212c:	02 23                	add    ah,BYTE PTR [ebx]
    212e:	12 00                	adc    al,BYTE PTR [eax]
    2130:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    2137:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    213a:	74 00                	je     213c <__fmodf2+0x2110>
    213c:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    213f:	58                   	pop    eax
    2140:	00 02                	add    BYTE PTR [edx],al
    2142:	04 08                	add    al,0x8
    2144:	06                   	push   es
    2145:	08 9f e2 00 02 04    	or     BYTE PTR [edi+0x40200e2],bl
    214b:	01 06                	add    DWORD PTR [esi],eax
    214d:	9e                   	sahf   
    214e:	00 02                	add    BYTE PTR [edx],al
    2150:	04 04                	add    al,0x4
    2152:	02 23                	add    ah,BYTE PTR [ebx]
    2154:	12 00                	adc    al,BYTE PTR [eax]
    2156:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    215d:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2160:	74 00                	je     2162 <__fmodf2+0x2136>
    2162:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2165:	58                   	pop    eax
    2166:	06                   	push   es
    2167:	08 f6                	or     dh,dh
    2169:	d7                   	xlat   BYTE PTR ds:[ebx]
    216a:	9f                   	lahf   
    216b:	3d 69 c9 d7 30       	cmp    eax,0x30d7c969
    2170:	f5                   	cmc    
    2171:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
    2174:	2f                   	das    
    2175:	31 f5                	xor    ebp,esi
    2177:	08 3d e5 30 c9 d7    	or     BYTE PTR ds:0xd7c930e5,bh
    217d:	30 08                	xor    BYTE PTR [eax],cl
    217f:	44                   	inc    esp
    2180:	02 2e                	add    ch,BYTE PTR [esi]
    2182:	13 02                	adc    eax,DWORD PTR [edx]
    2184:	3a 13                	cmp    dl,BYTE PTR [ebx]
    2186:	91                   	xchg   ecx,eax
    2187:	c9                   	leave  
    2188:	e6 02                	out    0x2,al
    218a:	2f                   	das    
    218b:	13 02                	adc    eax,DWORD PTR [edx]
    218d:	3c 13                	cmp    al,0x13
    218f:	9f                   	lahf   
    2190:	e5 e6                	in     eax,0xe6
    2192:	08 c9                	or     cl,cl
    2194:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    2197:	9f                   	lahf   
    2198:	e5 4c                	in     eax,0x4c
    219a:	02 29                	add    ch,BYTE PTR [ecx]
    219c:	13 02                	adc    eax,DWORD PTR [edx]
    219e:	2b 13                	sub    edx,DWORD PTR [ebx]
    21a0:	9f                   	lahf   
    21a1:	e5 e6                	in     eax,0xe6
    21a3:	bb 59 08 83 e5       	mov    ebx,0xe5830859
    21a8:	a0 00 02 04 01       	mov    al,ds:0x1040200
    21ad:	06                   	push   es
    21ae:	c8 00 02 04          	enter  0x200,0x4
    21b2:	04 02                	add    al,0x2
    21b4:	2c 12                	sub    al,0x12
    21b6:	00 02                	add    BYTE PTR [edx],al
    21b8:	04 05                	add    al,0x5
    21ba:	02 2f                	add    ch,BYTE PTR [edi]
    21bc:	12 00                	adc    al,BYTE PTR [eax]
    21be:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    21c1:	74 00                	je     21c3 <__fmodf2+0x2197>
    21c3:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    21c6:	58                   	pop    eax
    21c7:	06                   	push   es
    21c8:	08 99 a5 59 00 02    	or     BYTE PTR [ecx+0x20059a5],bl
    21ce:	04 01                	add    al,0x1
    21d0:	06                   	push   es
    21d1:	c8 00 02 04          	enter  0x200,0x4
    21d5:	04 02                	add    al,0x2
    21d7:	2c 12                	sub    al,0x12
    21d9:	00 02                	add    BYTE PTR [edx],al
    21db:	04 05                	add    al,0x5
    21dd:	02 2f                	add    ch,BYTE PTR [edi]
    21df:	12 00                	adc    al,BYTE PTR [eax]
    21e1:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    21e4:	74 00                	je     21e6 <__fmodf2+0x21ba>
    21e6:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    21e9:	58                   	pop    eax
    21ea:	00 02                	add    BYTE PTR [edx],al
    21ec:	04 08                	add    al,0x8
    21ee:	06                   	push   es
    21ef:	08 9f 08 91 9f e0    	or     BYTE PTR [edi-0x1f606ef8],bl
    21f5:	00 02                	add    BYTE PTR [edx],al
    21f7:	04 01                	add    al,0x1
    21f9:	06                   	push   es
    21fa:	c8 00 02 04          	enter  0x200,0x4
    21fe:	04 02                	add    al,0x2
    2200:	2c 12                	sub    al,0x12
    2202:	00 02                	add    BYTE PTR [edx],al
    2204:	04 05                	add    al,0x5
    2206:	02 2f                	add    ch,BYTE PTR [edi]
    2208:	12 00                	adc    al,BYTE PTR [eax]
    220a:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    220d:	74 00                	je     220f <__fmodf2+0x21e3>
    220f:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2212:	58                   	pop    eax
    2213:	06                   	push   es
    2214:	08 f9                	or     cl,bh
    2216:	bb 75 00 02 04       	mov    ebx,0x4020075
    221b:	01 06                	add    DWORD PTR [esi],eax
    221d:	08 2e                	or     BYTE PTR [esi],ch
    221f:	06                   	push   es
    2220:	9f                   	lahf   
    2221:	75 75                	jne    2298 <__fmodf2+0x226c>
    2223:	7b d8                	jnp    21fd <__fmodf2+0x21d1>
    2225:	00 02                	add    BYTE PTR [edx],al
    2227:	04 01                	add    al,0x1
    2229:	06                   	push   es
    222a:	c8 06 75 e5          	enter  0x7506,0xe5
    222e:	00 02                	add    BYTE PTR [edx],al
    2230:	04 01                	add    al,0x1
    2232:	06                   	push   es
    2233:	02 22                	add    ah,BYTE PTR [edx]
    2235:	12 06                	adc    al,BYTE PTR [esi]
    2237:	4b                   	dec    ebx
    2238:	00 02                	add    BYTE PTR [edx],al
    223a:	04 01                	add    al,0x1
    223c:	06                   	push   es
    223d:	08 ba 00 02 04 03    	or     BYTE PTR [edx+0x3040200],bh
    2243:	02 22                	add    ah,BYTE PTR [edx]
    2245:	12 00                	adc    al,BYTE PTR [eax]
    2247:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    224a:	74 00                	je     224c <__fmodf2+0x2220>
    224c:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    224f:	58                   	pop    eax
    2250:	00 02                	add    BYTE PTR [edx],al
    2252:	04 06                	add    al,0x6
    2254:	06                   	push   es
    2255:	59                   	pop    ecx
    2256:	00 02                	add    BYTE PTR [edx],al
    2258:	04 01                	add    al,0x1
    225a:	06                   	push   es
    225b:	02 40 12             	add    al,BYTE PTR [eax+0x12]
    225e:	00 02                	add    BYTE PTR [edx],al
    2260:	04 03                	add    al,0x3
    2262:	02 42 12             	add    al,BYTE PTR [edx+0x12]
    2265:	00 02                	add    BYTE PTR [edx],al
    2267:	04 04                	add    al,0x4
    2269:	74 00                	je     226b <__fmodf2+0x223f>
    226b:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    226e:	58                   	pop    eax
    226f:	00 02                	add    BYTE PTR [edx],al
    2271:	04 06                	add    al,0x6
    2273:	06                   	push   es
    2274:	59                   	pop    ecx
    2275:	00 02                	add    BYTE PTR [edx],al
    2277:	04 01                	add    al,0x1
    2279:	06                   	push   es
    227a:	02 43 12             	add    al,BYTE PTR [ebx+0x12]
    227d:	00 02                	add    BYTE PTR [edx],al
    227f:	04 03                	add    al,0x3
    2281:	02 48 12             	add    cl,BYTE PTR [eax+0x12]
    2284:	00 02                	add    BYTE PTR [edx],al
    2286:	04 04                	add    al,0x4
    2288:	74 00                	je     228a <__fmodf2+0x225e>
    228a:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    228d:	58                   	pop    eax
    228e:	00 02                	add    BYTE PTR [edx],al
    2290:	04 06                	add    al,0x6
    2292:	06                   	push   es
    2293:	5a                   	pop    edx
    2294:	00 02                	add    BYTE PTR [edx],al
    2296:	04 06                	add    al,0x6
    2298:	c9                   	leave  
    2299:	2f                   	das    
    229a:	00 02                	add    BYTE PTR [edx],al
    229c:	04 01                	add    al,0x1
    229e:	06                   	push   es
    229f:	9e                   	sahf   
    22a0:	00 02                	add    BYTE PTR [edx],al
    22a2:	04 04                	add    al,0x4
    22a4:	02 23                	add    ah,BYTE PTR [ebx]
    22a6:	12 00                	adc    al,BYTE PTR [eax]
    22a8:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    22af:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    22b2:	74 00                	je     22b4 <__fmodf2+0x2288>
    22b4:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    22b7:	58                   	pop    eax
    22b8:	00 02                	add    BYTE PTR [edx],al
    22ba:	04 08                	add    al,0x8
    22bc:	06                   	push   es
    22bd:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    22c0:	e8 bb 00 02 04       	call   4022380 <sysEnter_Vector+0x3ef2380>
    22c5:	01 06                	add    DWORD PTR [esi],eax
    22c7:	ba 06 4b 68 91       	mov    edx,0x91684b06
    22cc:	02 31                	add    dh,BYTE PTR [ecx]
    22ce:	14 02                	adc    al,0x2
    22d0:	2c 14                	sub    al,0x14
    22d2:	00 02                	add    BYTE PTR [edx],al
    22d4:	04 01                	add    al,0x1
    22d6:	06                   	push   es
    22d7:	02 29                	add    ch,BYTE PTR [ecx]
    22d9:	12 06                	adc    al,BYTE PTR [esi]
    22db:	4b                   	dec    ebx
    22dc:	bd 00 02 04 01       	mov    ebp,0x1040200
    22e1:	06                   	push   es
    22e2:	ba 00 02 04 03       	mov    edx,0x3040200
    22e7:	06                   	push   es
    22e8:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    22eb:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
    22ee:	81 4b e5 4c ae 9f ae 	or     DWORD PTR [ebx-0x1b],0xae9fae4c
    22f5:	77 00                	ja     22f7 <__fmodf2+0x22cb>
    22f7:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    22fa:	06                   	push   es
    22fb:	82                   	(bad)  
    22fc:	06                   	push   es
    22fd:	4b                   	dec    ebx
    22fe:	68 00 02 04 01       	push   0x1040200
    2303:	06                   	push   es
    2304:	66 06                	pushw  es
    2306:	85 3d 85 08 75 76    	test   DWORD PTR ds:0x76750885,edi
    230c:	08 f3                	or     bl,dh
    230e:	67 08 14             	or     BYTE PTR [si],dl
    2311:	00 02                	add    BYTE PTR [edx],al
    2313:	04 01                	add    al,0x1
    2315:	e5 77                	in     eax,0x77
    2317:	08 21                	or     BYTE PTR [ecx],ah
    2319:	08 2f                	or     BYTE PTR [edi],ch
    231b:	08 3d 3d 02 05 00    	or     BYTE PTR ds:0x5023d,bh
    2321:	01 01                	add    DWORD PTR [ecx],eax

Disassembly of section .debug_str:

00000000 <.debug_str>:
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:15
.globl  _modfasm
.type _modfasm, @function

modfasm:
_modfasm:
                push    ebp
       0:	6c                   	ins    BYTE PTR es:[edi],dx
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:16
                mov     ebp,esp
       1:	6f                   	outs   dx,DWORD PTR ds:[esi]
       2:	6e                   	outs   dx,BYTE PTR ds:[esi]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:17
                push    edi                     # Save register edi
       3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:19
                fldd    [ebp+8]           # Load real from stack
                mov     edi,dword [ebp+16]      # Put integer address in edi
       7:	6e                   	outs   dx,BYTE PTR ds:[esi]
       8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:21
                fld    st(0)                     # Duplicate st
                frndint                         # Round to integer
       c:	74 00                	je     e <_modfasm+0xe>
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:22
                fcom    st(1)                     # Compare with orignal value
       e:	73 68                	jae    78 <__fmodf2+0x4c>
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:23
                fstsw   ax                      # Get the FPU status word
      10:	6f                   	outs   dx,DWORD PTR ds:[esi]
      11:	72 74                	jb     87 <__fmodf2+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:24
                testd    byte [ebp+15],0x80      # Test if number is negative
      13:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
      16:	73 69                	jae    81 <__fmodf2+0x55>
      18:	67 6e                	outs   dx,BYTE PTR ds:[si]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:25
                jz      __fmodf1                # Re-direct if positive
      1a:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:28
                sahf                            # Store AH to flags
                jnb     __fmodf2                # Re-direct if greater or equal
                fld1                            # Load the constant 1
      1f:	74 00                	je     21 <_modfasm+0x21>
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:29
                fadd                            # Increment integer part
      21:	73 74                	jae    97 <__fmodf2+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:30
                jmp     __fmodf2                # End of case
      23:	72 63                	jb     88 <__fmodf2+0x5c>
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:31
__fmodf1:       sahf                            # Store AH to flags
      25:	68 72 00 6c 6f       	push   0x6f6c0072
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:34
                jna     __fmodf2                # Re-direct if less or equal
                fld1                            # Load constant 1
                fsub                            # Decrement integer part
      2a:	6e                   	outs   dx,BYTE PTR ds:[esi]
      2b:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:36
__fmodf2:       fstd     [edi]             # Store integer part
                fsub                            # Subtract to get fraction
      2f:	6e                   	outs   dx,BYTE PTR ds:[esi]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:37
                pop     edi                     # Restore register edi
      30:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:40
                mov     esp,ebp                 # Restore stack pointer
                pop     ebp
      34:	73 69                	jae    9f <__fmodf2+0x73>
      36:	67 6e                	outs   dx,BYTE PTR ds:[si]
      38:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
      3d:	74 00                	je     3f <__fmodf2+0x13>
      3f:	75 6e                	jne    af <__fmodf2+0x83>
      41:	73 69                	jae    ac <__fmodf2+0x80>
      43:	67 6e                	outs   dx,BYTE PTR ds:[si]
      45:	65 64 20 63 68       	gs and BYTE PTR fs:gs:[ebx+0x68],ah
      4a:	61                   	popa   
      4b:	72 00                	jb     4d <__fmodf2+0x21>
      4d:	2f                   	das    
      4e:	68 6f 6d 65 2f       	push   0x2f656d6f
      53:	79 6f                	jns    c4 <__fmodf2+0x98>
      55:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
      5c:	6f                   	outs   dx,DWORD PTR ds:[esi]
      5d:	73 2f                	jae    8e <__fmodf2+0x62>
      5f:	61                   	popa   
      60:	70 72                	jo     d4 <__fmodf2+0xa8>
      62:	6f                   	outs   dx,DWORD PTR ds:[esi]
      63:	6a 2f                	push   0x2f
      65:	6c                   	ins    BYTE PTR es:[edi],dx
      66:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
      6d:	4f                   	dec    edi
      6e:	53                   	push   ebx
      6f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
      72:	72 63                	jb     d7 <__fmodf2+0xab>
      74:	68 72 49 00 70       	push   0x70004972
      79:	72 6f                	jb     ea <__fmodf2+0xbe>
      7b:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
      7e:	73 45                	jae    c5 <__fmodf2+0x99>
      80:	6e                   	outs   dx,BYTE PTR ds:[esi]
      81:	76 70                	jbe    f3 <__fmodf2+0xc7>
      83:	00 2e                	add    BYTE PTR [esi],ch
      85:	2e                   	cs
      86:	2f                   	das    
      87:	2e                   	cs
      88:	2e                   	cs
      89:	2f                   	das    
      8a:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      8e:	6a 2f                	push   0x2f
      90:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      93:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      9a:	63 2f                	arpl   WORD PTR [edi],bp
      9c:	73 74                	jae    112 <__fmodf2+0xe6>
      9e:	72 69                	jb     109 <__fmodf2+0xdd>
      a0:	6e                   	outs   dx,BYTE PTR ds:[esi]
      a1:	67 73 2f             	addr16 jae d3 <__fmodf2+0xa7>
      a4:	73 74                	jae    11a <__fmodf2+0xee>
      a6:	72 63                	jb     10b <__fmodf2+0xdf>
      a8:	68 72 2e 63 00       	push   0x632e72
      ad:	6c                   	ins    BYTE PTR es:[edi],dx
      ae:	6f                   	outs   dx,DWORD PTR ds:[esi]
      af:	6e                   	outs   dx,BYTE PTR ds:[esi]
      b0:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
      b4:	75 62                	jne    118 <__fmodf2+0xec>
      b6:	6c                   	ins    BYTE PTR es:[edi],dx
      b7:	65 00 73 68          	add    BYTE PTR gs:[ebx+0x68],dh
      bb:	6f                   	outs   dx,DWORD PTR ds:[esi]
      bc:	72 74                	jb     132 <__fmodf2+0x106>
      be:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
      c1:	74 00                	je     c3 <__fmodf2+0x97>
      c3:	47                   	inc    edi
      c4:	4e                   	dec    esi
      c5:	55                   	push   ebp
      c6:	20 43 31             	and    BYTE PTR [ebx+0x31],al
      c9:	31 20                	xor    DWORD PTR [eax],esp
      cb:	35 2e 33 2e 30       	xor    eax,0x302e332e
      d0:	20 2d 6d 61 73 6d    	and    BYTE PTR ds:0x6d73616d,ch
      d6:	3d 69 6e 74 65       	cmp    eax,0x65746e69
      db:	6c                   	ins    BYTE PTR es:[edi],dx
      dc:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
      e2:	65                   	gs
      e3:	3d 67 65 6e 65       	cmp    eax,0x656e6567
      e8:	72 69                	jb     153 <__fmodf2+0x127>
      ea:	63 20                	arpl   WORD PTR [eax],sp
      ec:	2d 6d 61 72 63       	sub    eax,0x6372616d
      f1:	68 3d 70 65 6e       	push   0x6e65703d
      f6:	74 69                	je     161 <__fmodf2+0x135>
      f8:	75 6d                	jne    167 <__fmodf2+0x13b>
      fa:	70 72                	jo     16e <__fmodf2+0x142>
      fc:	6f                   	outs   dx,DWORD PTR ds:[esi]
      fd:	20 2d 67 20 2d 66    	and    BYTE PTR ds:0x662d2067,ch
     103:	66                   	data16
     104:	72 65                	jb     16b <__fmodf2+0x13f>
     106:	65                   	gs
     107:	73 74                	jae    17d <__fmodf2+0x151>
     109:	61                   	popa   
     10a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     10b:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
     112:	76 
     113:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
     11a:	74 79                	je     195 <__fmodf2+0x169>
     11c:	3d 68 69 64 64       	cmp    eax,0x64646968
     121:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     123:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
     129:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     12c:	7a 65                	jp     193 <__fmodf2+0x167>
     12e:	74 79                	je     1a9 <__fmodf2+0x17d>
     130:	70 65                	jo     197 <__fmodf2+0x16b>
     132:	00 63 68             	add    BYTE PTR [ebx+0x68],ah
     135:	61                   	popa   
     136:	72 73                	jb     1ab <__fmodf2+0x17f>
     138:	00 2e                	add    BYTE PTR [esi],ch
     13a:	2e                   	cs
     13b:	2f                   	das    
     13c:	2e                   	cs
     13d:	2e                   	cs
     13e:	2f                   	das    
     13f:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     143:	6a 2f                	push   0x2f
     145:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     148:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     14f:	63 2f                	arpl   WORD PTR [edi],bp
     151:	73 74                	jae    1c7 <__fmodf2+0x19b>
     153:	72 69                	jb     1be <__fmodf2+0x192>
     155:	6e                   	outs   dx,BYTE PTR ds:[esi]
     156:	67 73 2f             	addr16 jae 188 <__fmodf2+0x15c>
     159:	73 74                	jae    1cf <__fmodf2+0x1a3>
     15b:	72 63                	jb     1c0 <__fmodf2+0x194>
     15d:	73 70                	jae    1cf <__fmodf2+0x1a3>
     15f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     160:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     163:	73 74                	jae    1d9 <__fmodf2+0x1ad>
     165:	72 63                	jb     1ca <__fmodf2+0x19e>
     167:	73 70                	jae    1d9 <__fmodf2+0x1ad>
     169:	6e                   	outs   dx,BYTE PTR ds:[esi]
     16a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     16d:	72 63                	jb     1d2 <__fmodf2+0x1a6>
     16f:	73 70                	jae    1e1 <__fmodf2+0x1b5>
     171:	6e                   	outs   dx,BYTE PTR ds:[esi]
     172:	49                   	dec    ecx
     173:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     176:	72 74                	jb     1ec <__fmodf2+0x1c0>
     178:	6f                   	outs   dx,DWORD PTR ds:[esi]
     179:	6b 49 00 64          	imul   ecx,DWORD PTR [ecx+0x0],0x64
     17d:	65                   	gs
     17e:	6c                   	ins    BYTE PTR es:[edi],dx
     17f:	69 6d 00 2e 2e 2f 2e 	imul   ebp,DWORD PTR [ebp+0x0],0x2e2f2e2e
     186:	2e                   	cs
     187:	2f                   	das    
     188:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     18c:	6a 2f                	push   0x2f
     18e:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     191:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     198:	63 2f                	arpl   WORD PTR [edi],bp
     19a:	73 74                	jae    210 <__fmodf2+0x1e4>
     19c:	72 69                	jb     207 <__fmodf2+0x1db>
     19e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     19f:	67 73 2f             	addr16 jae 1d1 <__fmodf2+0x1a5>
     1a2:	73 74                	jae    218 <__fmodf2+0x1ec>
     1a4:	72 74                	jb     21a <__fmodf2+0x1ee>
     1a6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1a7:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     1aa:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
     1ae:	74 73                	je     223 <__fmodf2+0x1f7>
     1b0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     1b3:	72 74                	jb     229 <__fmodf2+0x1fd>
     1b5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1b6:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
     1b9:	74 6f                	je     22a <__fmodf2+0x1fe>
     1bb:	61                   	popa   
     1bc:	00 69 74             	add    BYTE PTR [ecx+0x74],ch
     1bf:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1c0:	61                   	popa   
     1c1:	49                   	dec    ecx
     1c2:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
     1c5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1c6:	69 49 00 72 65 76 65 	imul   ecx,DWORD PTR [ecx+0x0],0x65766572
     1cd:	72 73                	jb     242 <__fmodf2+0x216>
     1cf:	65                   	gs
     1d0:	49                   	dec    ecx
     1d1:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     1d4:	67 6e                	outs   dx,BYTE PTR ds:[si]
     1d6:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     1d9:	63 2f                	arpl   WORD PTR [edi],bp
     1db:	61                   	popa   
     1dc:	73 63                	jae    241 <__fmodf2+0x215>
     1de:	69 69 2e 63 00 61 6e 	imul   ebp,DWORD PTR [ecx+0x2e],0x6e610063
     1e5:	73 69                	jae    250 <__fmodf2+0x224>
     1e7:	45                   	inc    ebp
     1e8:	73 63                	jae    24d <__fmodf2+0x221>
     1ea:	53                   	push   ebx
     1eb:	65                   	gs
     1ec:	71 00                	jno    1ee <__fmodf2+0x1c2>
     1ee:	73 61                	jae    251 <__fmodf2+0x225>
     1f0:	76 65                	jbe    257 <__fmodf2+0x22b>
     1f2:	43                   	inc    ebx
     1f3:	75 72                	jne    267 <__fmodf2+0x23b>
     1f5:	73 6f                	jae    266 <__fmodf2+0x23a>
     1f7:	72 50                	jb     249 <__fmodf2+0x21d>
     1f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1fa:	73 69                	jae    265 <__fmodf2+0x239>
     1fc:	74 69                	je     267 <__fmodf2+0x23b>
     1fe:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1ff:	6e                   	outs   dx,BYTE PTR ds:[esi]
     200:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
     203:	6e                   	outs   dx,BYTE PTR ds:[esi]
     204:	74 70                	je     276 <__fmodf2+0x24a>
     206:	74 72                	je     27a <__fmodf2+0x24e>
     208:	5f                   	pop    edi
     209:	74 00                	je     20b <__fmodf2+0x1df>
     20b:	78 73                	js     280 <__fmodf2+0x254>
     20d:	74 72                	je     281 <__fmodf2+0x255>
     20f:	00 66 69             	add    BYTE PTR [esi+0x69],ah
     212:	6c                   	ins    BYTE PTR es:[edi],dx
     213:	65                   	gs
     214:	73 54                	jae    26a <__fmodf2+0x23e>
     216:	6f                   	outs   dx,DWORD PTR ds:[esi]
     217:	43                   	inc    ebx
     218:	6c                   	ins    BYTE PTR es:[edi],dx
     219:	6f                   	outs   dx,DWORD PTR ds:[esi]
     21a:	73 65                	jae    281 <__fmodf2+0x255>
     21c:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     21f:	73 74                	jae    295 <__fmodf2+0x269>
     221:	6f                   	outs   dx,DWORD PTR ds:[esi]
     222:	72 65                	jb     289 <__fmodf2+0x25d>
     224:	43                   	inc    ebx
     225:	75 72                	jne    299 <__fmodf2+0x26d>
     227:	73 6f                	jae    298 <__fmodf2+0x26c>
     229:	72 50                	jb     27b <__fmodf2+0x24f>
     22b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     22c:	73 69                	jae    297 <__fmodf2+0x26b>
     22e:	74 69                	je     299 <__fmodf2+0x26d>
     230:	6f                   	outs   dx,DWORD PTR ds:[esi]
     231:	6e                   	outs   dx,BYTE PTR ds:[esi]
     232:	00 66 69             	add    BYTE PTR [esi+0x69],ah
     235:	6c                   	ins    BYTE PTR es:[edi],dx
     236:	65                   	gs
     237:	73 54                	jae    28d <__fmodf2+0x261>
     239:	6f                   	outs   dx,DWORD PTR ds:[esi]
     23a:	43                   	inc    ebx
     23b:	6c                   	ins    BYTE PTR es:[edi],dx
     23c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     23d:	73 65                	jae    2a4 <__fmodf2+0x278>
     23f:	43                   	inc    ebx
     240:	6f                   	outs   dx,DWORD PTR ds:[esi]
     241:	75 6e                	jne    2b1 <__fmodf2+0x285>
     243:	74 00                	je     245 <__fmodf2+0x219>
     245:	75 69                	jne    2b0 <__fmodf2+0x284>
     247:	6e                   	outs   dx,BYTE PTR ds:[esi]
     248:	74 33                	je     27d <__fmodf2+0x251>
     24a:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
     24d:	00 6d 6f             	add    BYTE PTR [ebp+0x6f],ch
     250:	76 65                	jbe    2b7 <__fmodf2+0x28b>
     252:	54                   	push   esp
     253:	6f                   	outs   dx,DWORD PTR ds:[esi]
     254:	58                   	pop    eax
     255:	59                   	pop    ecx
     256:	00 79 73             	add    BYTE PTR [ecx+0x73],bh
     259:	74 72                	je     2cd <__fmodf2+0x2a1>
     25b:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     25e:	63 2f                	arpl   WORD PTR [edi],bp
     260:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     263:	73 6f                	jae    2d4 <__fmodf2+0x2a8>
     265:	6c                   	ins    BYTE PTR es:[edi],dx
     266:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
     26a:	53                   	push   ebx
     26b:	59                   	pop    ecx
     26c:	53                   	push   ebx
     26d:	43                   	inc    ebx
     26e:	41                   	inc    ecx
     26f:	4c                   	dec    esp
     270:	4c                   	dec    esp
     271:	5f                   	pop    edi
     272:	52                   	push   edx
     273:	45                   	inc    ebp
     274:	41                   	inc    ecx
     275:	44                   	inc    esp
     276:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     279:	53                   	push   ebx
     27a:	43                   	inc    ebx
     27b:	41                   	inc    ecx
     27c:	4c                   	dec    esp
     27d:	4c                   	dec    esp
     27e:	5f                   	pop    edi
     27f:	50                   	push   eax
     280:	49                   	dec    ecx
     281:	50                   	push   eax
     282:	45                   	inc    ebp
     283:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     286:	53                   	push   ebx
     287:	43                   	inc    ebx
     288:	41                   	inc    ecx
     289:	4c                   	dec    esp
     28a:	4c                   	dec    esp
     28b:	5f                   	pop    edi
     28c:	4f                   	dec    edi
     28d:	50                   	push   eax
     28e:	45                   	inc    ebp
     28f:	4e                   	dec    esi
     290:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     293:	7a 65                	jp     2fa <__fmodf2+0x2ce>
     295:	5f                   	pop    edi
     296:	74 00                	je     298 <__fmodf2+0x26c>
     298:	69 6e 70 75 74 00 72 	imul   ebp,DWORD PTR [esi+0x70],0x72007475
     29f:	65                   	gs
     2a0:	73 6f                	jae    311 <__fmodf2+0x2e5>
     2a2:	6c                   	ins    BYTE PTR es:[edi],dx
     2a3:	76 65                	jbe    30a <__fmodf2+0x2de>
     2a5:	45                   	inc    ebp
     2a6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     2a7:	76 56                	jbe    2ff <__fmodf2+0x2d3>
     2a9:	61                   	popa   
     2aa:	72 73                	jb     31f <__fmodf2+0x2f3>
     2ac:	49                   	dec    ecx
     2ad:	6e                   	outs   dx,BYTE PTR ds:[esi]
     2ae:	53                   	push   ebx
     2af:	74 72                	je     323 <__fmodf2+0x2f7>
     2b1:	69 6e 67 49 00 53 59 	imul   ebp,DWORD PTR [esi+0x67],0x59530049
     2b8:	53                   	push   ebx
     2b9:	43                   	inc    ebx
     2ba:	41                   	inc    ecx
     2bb:	4c                   	dec    esp
     2bc:	4c                   	dec    esp
     2bd:	5f                   	pop    edi
     2be:	47                   	inc    edi
     2bf:	45                   	inc    ebp
     2c0:	54                   	push   esp
     2c1:	44                   	inc    esp
     2c2:	45                   	inc    ebp
     2c3:	4e                   	dec    esi
     2c4:	54                   	push   esp
     2c5:	53                   	push   ebx
     2c6:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     2c9:	74 65                	je     330 <__fmodf2+0x304>
     2cb:	6e                   	outs   dx,BYTE PTR ds:[esi]
     2cc:	76 00                	jbe    2ce <__fmodf2+0x2a2>
     2ce:	67                   	addr16
     2cf:	65                   	gs
     2d0:	74 63                	je     335 <__fmodf2+0x309>
     2d2:	77 64                	ja     338 <__fmodf2+0x30c>
     2d4:	49                   	dec    ecx
     2d5:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     2d8:	53                   	push   ebx
     2d9:	43                   	inc    ebx
     2da:	41                   	inc    ecx
     2db:	4c                   	dec    esp
     2dc:	4c                   	dec    esp
     2dd:	5f                   	pop    edi
     2de:	52                   	push   edx
     2df:	45                   	inc    ebp
     2e0:	42                   	inc    edx
     2e1:	4f                   	dec    edi
     2e2:	4f                   	dec    edi
     2e3:	54                   	push   esp
     2e4:	00 6d 79             	add    BYTE PTR [ebp+0x79],ch
     2e7:	49                   	dec    ecx
     2e8:	6e                   	outs   dx,BYTE PTR ds:[esi]
     2e9:	70 75                	jo     360 <__fmodf2+0x334>
     2eb:	74 00                	je     2ed <__fmodf2+0x2c1>
     2ed:	73 72                	jae    361 <__fmodf2+0x335>
     2ef:	63 2f                	arpl   WORD PTR [edi],bp
     2f1:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     2f3:	76 69                	jbe    35e <__fmodf2+0x332>
     2f5:	72 6f                	jb     366 <__fmodf2+0x33a>
     2f7:	6e                   	outs   dx,BYTE PTR ds:[esi]
     2f8:	6d                   	ins    DWORD PTR es:[edi],dx
     2f9:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     2fb:	74 2e                	je     32b <__fmodf2+0x2ff>
     2fd:	63 00                	arpl   WORD PTR [eax],ax
     2ff:	6c                   	ins    BYTE PTR es:[edi],dx
     300:	61                   	popa   
     301:	73 74                	jae    377 <__fmodf2+0x34b>
     303:	50                   	push   eax
     304:	6f                   	outs   dx,DWORD PTR ds:[esi]
     305:	70 75                	jo     37c <__fmodf2+0x350>
     307:	6c                   	ins    BYTE PTR es:[edi],dx
     308:	61                   	popa   
     309:	74 65                	je     370 <__fmodf2+0x344>
     30b:	64 00 6d 61          	add    BYTE PTR fs:[ebp+0x61],ch
     30f:	6c                   	ins    BYTE PTR es:[edi],dx
     310:	6c                   	ins    BYTE PTR es:[edi],dx
     311:	6f                   	outs   dx,DWORD PTR ds:[esi]
     312:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
     315:	53                   	push   ebx
     316:	59                   	pop    ecx
     317:	53                   	push   ebx
     318:	43                   	inc    ebx
     319:	41                   	inc    ecx
     31a:	4c                   	dec    esp
     31b:	4c                   	dec    esp
     31c:	5f                   	pop    edi
     31d:	45                   	inc    ebp
     31e:	58                   	pop    eax
     31f:	45                   	inc    ebp
     320:	43                   	inc    ebx
     321:	4e                   	dec    esi
     322:	45                   	inc    ebp
     323:	57                   	push   edi
     324:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     327:	53                   	push   ebx
     328:	43                   	inc    ebx
     329:	41                   	inc    ecx
     32a:	4c                   	dec    esp
     32b:	4c                   	dec    esp
     32c:	5f                   	pop    edi
     32d:	53                   	push   ebx
     32e:	4c                   	dec    esp
     32f:	45                   	inc    ebp
     330:	45                   	inc    ebp
     331:	50                   	push   eax
     332:	00 76 61             	add    BYTE PTR [esi+0x61],dh
     335:	6c                   	ins    BYTE PTR es:[edi],dx
     336:	75 65                	jne    39d <__fmodf2+0x371>
     338:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     33b:	53                   	push   ebx
     33c:	43                   	inc    ebx
     33d:	41                   	inc    ecx
     33e:	4c                   	dec    esp
     33f:	4c                   	dec    esp
     340:	5f                   	pop    edi
     341:	47                   	inc    edi
     342:	45                   	inc    ebp
     343:	54                   	push   esp
     344:	54                   	push   esp
     345:	49                   	dec    ecx
     346:	4d                   	dec    ebp
     347:	45                   	inc    ebp
     348:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     34b:	53                   	push   ebx
     34c:	43                   	inc    ebx
     34d:	41                   	inc    ecx
     34e:	4c                   	dec    esp
     34f:	4c                   	dec    esp
     350:	5f                   	pop    edi
     351:	53                   	push   ebx
     352:	45                   	inc    ebp
     353:	54                   	push   esp
     354:	50                   	push   eax
     355:	52                   	push   edx
     356:	49                   	dec    ecx
     357:	4f                   	dec    edi
     358:	52                   	push   edx
     359:	49                   	dec    ecx
     35a:	54                   	push   esp
     35b:	59                   	pop    ecx
     35c:	00 73 65             	add    BYTE PTR [ebx+0x65],dh
     35f:	74 65                	je     3c6 <__fmodf2+0x39a>
     361:	6e                   	outs   dx,BYTE PTR ds:[esi]
     362:	76 00                	jbe    364 <__fmodf2+0x338>
     364:	53                   	push   ebx
     365:	59                   	pop    ecx
     366:	53                   	push   ebx
     367:	43                   	inc    ebx
     368:	41                   	inc    ecx
     369:	4c                   	dec    esp
     36a:	4c                   	dec    esp
     36b:	5f                   	pop    edi
     36c:	53                   	push   ebx
     36d:	45                   	inc    ebp
     36e:	54                   	push   esp
     36f:	53                   	push   ebx
     370:	54                   	push   esp
     371:	44                   	inc    esp
     372:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     375:	53                   	push   ebx
     376:	43                   	inc    ebx
     377:	41                   	inc    ecx
     378:	4c                   	dec    esp
     379:	4c                   	dec    esp
     37a:	5f                   	pop    edi
     37b:	4d                   	dec    ebp
     37c:	41                   	inc    ecx
     37d:	53                   	push   ebx
     37e:	4b                   	dec    ebx
     37f:	53                   	push   ebx
     380:	49                   	dec    ecx
     381:	47                   	inc    edi
     382:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     385:	53                   	push   ebx
     386:	43                   	inc    ebx
     387:	41                   	inc    ecx
     388:	4c                   	dec    esp
     389:	4c                   	dec    esp
     38a:	5f                   	pop    edi
     38b:	43                   	inc    ebx
     38c:	4c                   	dec    esp
     38d:	4f                   	dec    edi
     38e:	53                   	push   ebx
     38f:	45                   	inc    ebp
     390:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     393:	53                   	push   ebx
     394:	43                   	inc    ebx
     395:	41                   	inc    ecx
     396:	4c                   	dec    esp
     397:	4c                   	dec    esp
     398:	5f                   	pop    edi
     399:	55                   	push   ebp
     39a:	4e                   	dec    esi
     39b:	4c                   	dec    esp
     39c:	49                   	dec    ecx
     39d:	4e                   	dec    esi
     39e:	4b                   	dec    ebx
     39f:	00 65 73             	add    BYTE PTR [ebp+0x73],ah
     3a2:	79 73                	jns    417 <__fmodf2+0x3eb>
     3a4:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
     3a7:	6c                   	ins    BYTE PTR es:[edi],dx
     3a8:	73 00                	jae    3aa <__fmodf2+0x37e>
     3aa:	53                   	push   ebx
     3ab:	59                   	pop    ecx
     3ac:	53                   	push   ebx
     3ad:	43                   	inc    ebx
     3ae:	41                   	inc    ecx
     3af:	4c                   	dec    esp
     3b0:	4c                   	dec    esp
     3b1:	5f                   	pop    edi
     3b2:	46                   	inc    esi
     3b3:	4f                   	dec    edi
     3b4:	52                   	push   edx
     3b5:	4b                   	dec    ebx
     3b6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3b9:	53                   	push   ebx
     3ba:	43                   	inc    ebx
     3bb:	41                   	inc    ecx
     3bc:	4c                   	dec    esp
     3bd:	4c                   	dec    esp
     3be:	5f                   	pop    edi
     3bf:	53                   	push   ebx
     3c0:	54                   	push   esp
     3c1:	4f                   	dec    edi
     3c2:	50                   	push   eax
     3c3:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3c6:	53                   	push   ebx
     3c7:	43                   	inc    ebx
     3c8:	41                   	inc    ecx
     3c9:	4c                   	dec    esp
     3ca:	4c                   	dec    esp
     3cb:	5f                   	pop    edi
     3cc:	53                   	push   ebx
     3cd:	45                   	inc    ebp
     3ce:	45                   	inc    ebp
     3cf:	4b                   	dec    ebx
     3d0:	00 6c 4f 75          	add    BYTE PTR [edi+ecx*2+0x75],ch
     3d4:	74 70                	je     446 <__fmodf2+0x41a>
     3d6:	75 74                	jne    44c <__fmodf2+0x420>
     3d8:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3db:	53                   	push   ebx
     3dc:	43                   	inc    ebx
     3dd:	41                   	inc    ecx
     3de:	4c                   	dec    esp
     3df:	4c                   	dec    esp
     3e0:	5f                   	pop    edi
     3e1:	50                   	push   eax
     3e2:	52                   	push   edx
     3e3:	49                   	dec    ecx
     3e4:	4e                   	dec    esi
     3e5:	54                   	push   esp
     3e6:	44                   	inc    esp
     3e7:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3ea:	53                   	push   ebx
     3eb:	43                   	inc    ebx
     3ec:	41                   	inc    ecx
     3ed:	4c                   	dec    esp
     3ee:	4c                   	dec    esp
     3ef:	5f                   	pop    edi
     3f0:	48                   	dec    eax
     3f1:	4c                   	dec    esp
     3f2:	54                   	push   esp
     3f3:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3f6:	53                   	push   ebx
     3f7:	43                   	inc    ebx
     3f8:	41                   	inc    ecx
     3f9:	4c                   	dec    esp
     3fa:	4c                   	dec    esp
     3fb:	5f                   	pop    edi
     3fc:	44                   	inc    esp
     3fd:	55                   	push   ebp
     3fe:	50                   	push   eax
     3ff:	33 00                	xor    eax,DWORD PTR [eax]
     401:	53                   	push   ebx
     402:	59                   	pop    ecx
     403:	53                   	push   ebx
     404:	43                   	inc    ebx
     405:	41                   	inc    ecx
     406:	4c                   	dec    esp
     407:	4c                   	dec    esp
     408:	5f                   	pop    edi
     409:	54                   	push   esp
     40a:	41                   	inc    ecx
     40b:	4b                   	dec    ebx
     40c:	45                   	inc    ebp
     40d:	41                   	inc    ecx
     40e:	44                   	inc    esp
     40f:	55                   	push   ebp
     410:	4d                   	dec    ebp
     411:	50                   	push   eax
     412:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     415:	73 6f                	jae    486 <__fmodf2+0x45a>
     417:	6c                   	ins    BYTE PTR es:[edi],dx
     418:	76 65                	jbe    47f <__fmodf2+0x453>
     41a:	45                   	inc    ebp
     41b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     41c:	76 56                	jbe    474 <__fmodf2+0x448>
     41e:	61                   	popa   
     41f:	72 73                	jb     494 <__fmodf2+0x468>
     421:	49                   	dec    ecx
     422:	6e                   	outs   dx,BYTE PTR ds:[esi]
     423:	53                   	push   ebx
     424:	74 72                	je     498 <__fmodf2+0x46c>
     426:	69 6e 67 00 53 59 53 	imul   ebp,DWORD PTR [esi+0x67],0x53595300
     42d:	43                   	inc    ebx
     42e:	41                   	inc    ecx
     42f:	4c                   	dec    esp
     430:	4c                   	dec    esp
     431:	5f                   	pop    edi
     432:	54                   	push   esp
     433:	45                   	inc    ebp
     434:	4c                   	dec    esp
     435:	4c                   	dec    esp
     436:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     439:	53                   	push   ebx
     43a:	43                   	inc    ebx
     43b:	41                   	inc    ecx
     43c:	4c                   	dec    esp
     43d:	4c                   	dec    esp
     43e:	5f                   	pop    edi
     43f:	46                   	inc    esi
     440:	52                   	push   edx
     441:	45                   	inc    ebp
     442:	45                   	inc    ebp
     443:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     446:	53                   	push   ebx
     447:	43                   	inc    ebx
     448:	41                   	inc    ecx
     449:	4c                   	dec    esp
     44a:	4c                   	dec    esp
     44b:	5f                   	pop    edi
     44c:	45                   	inc    ebp
     44d:	58                   	pop    eax
     44e:	45                   	inc    ebp
     44f:	43                   	inc    ebx
     450:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     453:	53                   	push   ebx
     454:	43                   	inc    ebx
     455:	41                   	inc    ecx
     456:	4c                   	dec    esp
     457:	4c                   	dec    esp
     458:	5f                   	pop    edi
     459:	49                   	dec    ecx
     45a:	4e                   	dec    esi
     45b:	56                   	push   esi
     45c:	41                   	inc    ecx
     45d:	4c                   	dec    esp
     45e:	49                   	dec    ecx
     45f:	44                   	inc    esp
     460:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     463:	53                   	push   ebx
     464:	43                   	inc    ebx
     465:	41                   	inc    ecx
     466:	4c                   	dec    esp
     467:	4c                   	dec    esp
     468:	5f                   	pop    edi
     469:	52                   	push   edx
     46a:	45                   	inc    ebp
     46b:	47                   	inc    edi
     46c:	45                   	inc    ebp
     46d:	58                   	pop    eax
     46e:	49                   	dec    ecx
     46f:	54                   	push   esp
     470:	48                   	dec    eax
     471:	41                   	inc    ecx
     472:	4e                   	dec    esi
     473:	44                   	inc    esp
     474:	4c                   	dec    esp
     475:	45                   	inc    ebp
     476:	52                   	push   edx
     477:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     47a:	53                   	push   ebx
     47b:	43                   	inc    ebx
     47c:	41                   	inc    ecx
     47d:	4c                   	dec    esp
     47e:	4c                   	dec    esp
     47f:	5f                   	pop    edi
     480:	53                   	push   ebx
     481:	54                   	push   esp
     482:	41                   	inc    ecx
     483:	54                   	push   esp
     484:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     487:	53                   	push   ebx
     488:	43                   	inc    ebx
     489:	41                   	inc    ecx
     48a:	4c                   	dec    esp
     48b:	4c                   	dec    esp
     48c:	5f                   	pop    edi
     48d:	47                   	inc    edi
     48e:	45                   	inc    ebp
     48f:	54                   	push   esp
     490:	54                   	push   esp
     491:	49                   	dec    ecx
     492:	43                   	inc    ebx
     493:	4b                   	dec    ebx
     494:	53                   	push   ebx
     495:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     498:	53                   	push   ebx
     499:	43                   	inc    ebx
     49a:	41                   	inc    ecx
     49b:	4c                   	dec    esp
     49c:	4c                   	dec    esp
     49d:	5f                   	pop    edi
     49e:	45                   	inc    ebp
     49f:	4e                   	dec    esi
     4a0:	44                   	inc    esp
     4a1:	50                   	push   eax
     4a2:	52                   	push   edx
     4a3:	4f                   	dec    edi
     4a4:	43                   	inc    ebx
     4a5:	45                   	inc    ebp
     4a6:	53                   	push   ebx
     4a7:	53                   	push   ebx
     4a8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     4ab:	61                   	popa   
     4ac:	72 74                	jb     522 <__fmodf2+0x4f6>
     4ae:	50                   	push   eax
     4af:	74 72                	je     523 <__fmodf2+0x4f7>
     4b1:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     4b4:	53                   	push   ebx
     4b5:	43                   	inc    ebx
     4b6:	41                   	inc    ecx
     4b7:	4c                   	dec    esp
     4b8:	4c                   	dec    esp
     4b9:	5f                   	pop    edi
     4ba:	53                   	push   ebx
     4bb:	49                   	dec    ecx
     4bc:	47                   	inc    edi
     4bd:	4e                   	dec    esi
     4be:	41                   	inc    ecx
     4bf:	4c                   	dec    esp
     4c0:	00 6c 56 61          	add    BYTE PTR [esi+edx*2+0x61],ch
     4c4:	72 69                	jb     52f <__fmodf2+0x503>
     4c6:	61                   	popa   
     4c7:	62 6c 65 00          	bound  ebp,QWORD PTR [ebp+eiz*2+0x0]
     4cb:	53                   	push   ebx
     4cc:	59                   	pop    ecx
     4cd:	53                   	push   ebx
     4ce:	43                   	inc    ebx
     4cf:	41                   	inc    ecx
     4d0:	4c                   	dec    esp
     4d1:	4c                   	dec    esp
     4d2:	5f                   	pop    edi
     4d3:	53                   	push   ebx
     4d4:	45                   	inc    ebp
     4d5:	54                   	push   esp
     4d6:	43                   	inc    ebx
     4d7:	57                   	push   edi
     4d8:	44                   	inc    esp
     4d9:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     4dc:	53                   	push   ebx
     4dd:	43                   	inc    ebx
     4de:	41                   	inc    ecx
     4df:	4c                   	dec    esp
     4e0:	4c                   	dec    esp
     4e1:	5f                   	pop    edi
     4e2:	57                   	push   edi
     4e3:	52                   	push   edx
     4e4:	49                   	dec    ecx
     4e5:	54                   	push   esp
     4e6:	45                   	inc    ebp
     4e7:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     4ea:	53                   	push   ebx
     4eb:	43                   	inc    ebx
     4ec:	41                   	inc    ecx
     4ed:	4c                   	dec    esp
     4ee:	4c                   	dec    esp
     4ef:	5f                   	pop    edi
     4f0:	50                   	push   eax
     4f1:	52                   	push   edx
     4f2:	49                   	dec    ecx
     4f3:	4e                   	dec    esi
     4f4:	54                   	push   esp
     4f5:	00 6c 56 61          	add    BYTE PTR [esi+edx*2+0x61],ch
     4f9:	72 69                	jb     564 <__fmodf2+0x538>
     4fb:	61                   	popa   
     4fc:	62 6c 65 56          	bound  ebp,QWORD PTR [ebp+eiz*2+0x56]
     500:	61                   	popa   
     501:	6c                   	ins    BYTE PTR es:[edi],dx
     502:	75 65                	jne    569 <__fmodf2+0x53d>
     504:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     507:	53                   	push   ebx
     508:	43                   	inc    ebx
     509:	41                   	inc    ecx
     50a:	4c                   	dec    esp
     50b:	4c                   	dec    esp
     50c:	5f                   	pop    edi
     50d:	47                   	inc    edi
     50e:	45                   	inc    ebp
     50f:	54                   	push   esp
     510:	43                   	inc    ebx
     511:	57                   	push   edi
     512:	44                   	inc    esp
     513:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     516:	53                   	push   ebx
     517:	43                   	inc    ebx
     518:	41                   	inc    ecx
     519:	4c                   	dec    esp
     51a:	4c                   	dec    esp
     51b:	5f                   	pop    edi
     51c:	57                   	push   edi
     51d:	41                   	inc    ecx
     51e:	49                   	dec    ecx
     51f:	54                   	push   esp
     520:	46                   	inc    esi
     521:	4f                   	dec    edi
     522:	52                   	push   edx
     523:	50                   	push   eax
     524:	49                   	dec    ecx
     525:	44                   	inc    esp
     526:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     529:	53                   	push   ebx
     52a:	43                   	inc    ebx
     52b:	41                   	inc    ecx
     52c:	4c                   	dec    esp
     52d:	4c                   	dec    esp
     52e:	5f                   	pop    edi
     52f:	4d                   	dec    ebp
     530:	4d                   	dec    ebp
     531:	41                   	inc    ecx
     532:	50                   	push   eax
     533:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     536:	74 65                	je     59d <__fmodf2+0x571>
     538:	6e                   	outs   dx,BYTE PTR ds:[esi]
     539:	76 49                	jbe    584 <__fmodf2+0x558>
     53b:	00 76 61             	add    BYTE PTR [esi+0x61],dh
     53e:	72 6e                	jb     5ae <__fmodf2+0x582>
     540:	61                   	popa   
     541:	6d                   	ins    DWORD PTR es:[edi],dx
     542:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
     546:	53                   	push   ebx
     547:	43                   	inc    ebx
     548:	41                   	inc    ecx
     549:	4c                   	dec    esp
     54a:	4c                   	dec    esp
     54b:	5f                   	pop    edi
     54c:	41                   	inc    ecx
     54d:	4c                   	dec    esp
     54e:	4c                   	dec    esp
     54f:	4f                   	dec    edi
     550:	43                   	inc    ebx
     551:	48                   	dec    eax
     552:	45                   	inc    ebp
     553:	41                   	inc    ecx
     554:	50                   	push   eax
     555:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     558:	53                   	push   ebx
     559:	43                   	inc    ebx
     55a:	41                   	inc    ecx
     55b:	4c                   	dec    esp
     55c:	4c                   	dec    esp
     55d:	5f                   	pop    edi
     55e:	53                   	push   ebx
     55f:	45                   	inc    ebp
     560:	54                   	push   esp
     561:	53                   	push   ebx
     562:	49                   	dec    ecx
     563:	47                   	inc    edi
     564:	41                   	inc    ecx
     565:	43                   	inc    ebx
     566:	54                   	push   esp
     567:	49                   	dec    ecx
     568:	4f                   	dec    edi
     569:	4e                   	dec    esi
     56a:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     56d:	74 63                	je     5d2 <__fmodf2+0x5a6>
     56f:	77 64                	ja     5d5 <__fmodf2+0x5a9>
     571:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     574:	74 56                	je     5cc <__fmodf2+0x5a0>
     576:	61                   	popa   
     577:	6c                   	ins    BYTE PTR es:[edi],dx
     578:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
     57b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     57c:	73 65                	jae    5e3 <__fmodf2+0x5b7>
     57e:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     581:	73 6f                	jae    5f2 <__fmodf2+0x5c6>
     583:	6c                   	ins    BYTE PTR es:[edi],dx
     584:	76 65                	jbe    5eb <__fmodf2+0x5bf>
     586:	50                   	push   eax
     587:	61                   	popa   
     588:	74 68                	je     5f2 <__fmodf2+0x5c6>
     58a:	5f                   	pop    edi
     58b:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     58d:	76 50                	jbe    5df <__fmodf2+0x5b3>
     58f:	61                   	popa   
     590:	74 68                	je     5fa <__fmodf2+0x5ce>
     592:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     595:	72 65                	jb     5fc <__fmodf2+0x5d0>
     597:	61                   	popa   
     598:	6d                   	ins    DWORD PTR es:[edi],dx
     599:	00 70 61             	add    BYTE PTR [eax+0x61],dh
     59c:	74 68                	je     606 <__fmodf2+0x5da>
     59e:	00 77 72             	add    BYTE PTR [edi+0x72],dh
     5a1:	69 74 65 5f 74 69 6d 	imul   esi,DWORD PTR [ebp+eiz*2+0x5f],0x656d6974
     5a8:	65 
     5a9:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
     5ad:	6c                   	ins    BYTE PTR es:[edi],dx
     5ae:	49                   	dec    ecx
     5af:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     5b2:	61                   	popa   
     5b3:	72 74                	jb     629 <__fmodf2+0x5fd>
     5b5:	46                   	inc    esi
     5b6:	69 6c 65 50 6f 73 00 	imul   ebp,DWORD PTR [ebp+eiz*2+0x50],0x7300736f
     5bd:	73 
     5be:	74 61                	je     621 <__fmodf2+0x5f5>
     5c0:	74 49                	je     60b <__fmodf2+0x5df>
     5c2:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
     5c5:	50                   	push   eax
     5c6:	74 72                	je     63a <__fmodf2+0x60e>
     5c8:	00 75 73             	add    BYTE PTR [ebp+0x73],dh
     5cb:	65                   	gs
     5cc:	50                   	push   eax
     5cd:	61                   	popa   
     5ce:	74 68                	je     638 <__fmodf2+0x60c>
     5d0:	56                   	push   esi
     5d1:	61                   	popa   
     5d2:	72 69                	jb     63d <__fmodf2+0x611>
     5d4:	61                   	popa   
     5d5:	62 6c 65 00          	bound  ebp,QWORD PTR [ebp+eiz*2+0x0]
     5d9:	72 65                	jb     640 <__fmodf2+0x614>
     5db:	73 6f                	jae    64c <__fmodf2+0x620>
     5dd:	6c                   	ins    BYTE PTR es:[edi],dx
     5de:	76 65                	jbe    645 <__fmodf2+0x619>
     5e0:	50                   	push   eax
     5e1:	61                   	popa   
     5e2:	74 68                	je     64c <__fmodf2+0x620>
     5e4:	5f                   	pop    edi
     5e5:	72 65                	jb     64c <__fmodf2+0x620>
     5e7:	73 50                	jae    639 <__fmodf2+0x60d>
     5e9:	61                   	popa   
     5ea:	74 68                	je     654 <__fmodf2+0x628>
     5ec:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
     5f0:	6c                   	ins    BYTE PTR es:[edi],dx
     5f1:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
     5f4:	65                   	gs
     5f5:	61                   	popa   
     5f6:	74 65                	je     65d <__fmodf2+0x631>
     5f8:	5f                   	pop    edi
     5f9:	64                   	fs
     5fa:	61                   	popa   
     5fb:	74 65                	je     662 <__fmodf2+0x636>
     5fd:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     600:	74 6c                	je     66e <__fmodf2+0x642>
     602:	69 6e 65 49 00 75 69 	imul   ebp,DWORD PTR [esi+0x65],0x69750049
     609:	6e                   	outs   dx,BYTE PTR ds:[esi]
     60a:	74 31                	je     63d <__fmodf2+0x611>
     60c:	36                   	ss
     60d:	5f                   	pop    edi
     60e:	74 00                	je     610 <__fmodf2+0x5e4>
     610:	77 72                	ja     684 <__fmodf2+0x658>
     612:	69 74 65 5f 64 61 74 	imul   esi,DWORD PTR [ebp+eiz*2+0x5f],0x65746164
     619:	65 
     61a:	00 6f 70             	add    BYTE PTR [edi+0x70],ch
     61d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     61f:	49                   	dec    ecx
     620:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     623:	73 6f                	jae    694 <__fmodf2+0x668>
     625:	6c                   	ins    BYTE PTR es:[edi],dx
     626:	76 65                	jbe    68d <__fmodf2+0x661>
     628:	50                   	push   eax
     629:	61                   	popa   
     62a:	74 68                	je     694 <__fmodf2+0x668>
     62c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     62f:	5f                   	pop    edi
     630:	6c                   	ins    BYTE PTR es:[edi],dx
     631:	61                   	popa   
     632:	73 74                	jae    6a8 <__fmodf2+0x67c>
     634:	6d                   	ins    DWORD PTR es:[edi],dx
     635:	6f                   	outs   dx,DWORD PTR ds:[esi]
     636:	64 00 70 6f          	add    BYTE PTR fs:[eax+0x6f],dh
     63a:	73 69                	jae    6a5 <__fmodf2+0x679>
     63c:	74 69                	je     6a7 <__fmodf2+0x67b>
     63e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     63f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     640:	00 77 72             	add    BYTE PTR [edi+0x72],dh
     643:	69 74 65 49 00 73 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x49],0x65657300
     64a:	65 
     64b:	6b 00 77             	imul   eax,DWORD PTR [eax],0x77
     64e:	68 65 6e 63 65       	push   0x65636e65
     653:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     656:	74 6c                	je     6c4 <__fmodf2+0x698>
     658:	69 6e 65 00 67 65 74 	imul   ebp,DWORD PTR [esi+0x65],0x74656700
     65f:	6c                   	ins    BYTE PTR es:[edi],dx
     660:	69 6e 65 52 65 74 75 	imul   ebp,DWORD PTR [esi+0x65],0x75746552
     667:	72 6e                	jb     6d7 <__fmodf2+0x6ab>
     669:	00 66 72             	add    BYTE PTR [esi+0x72],ah
     66c:	65 6f                	outs   dx,DWORD PTR gs:[esi]
     66e:	70 65                	jo     6d5 <__fmodf2+0x6a9>
     670:	6e                   	outs   dx,BYTE PTR ds:[esi]
     671:	00 6c 69 6e          	add    BYTE PTR [ecx+ebp*2+0x6e],ch
     675:	65                   	gs
     676:	54                   	push   esp
     677:	6f                   	outs   dx,DWORD PTR ds:[esi]
     678:	4f                   	dec    edi
     679:	75 74                	jne    6ef <__fmodf2+0x6c3>
     67b:	70 75                	jo     6f2 <__fmodf2+0x6c6>
     67d:	74 00                	je     67f <__fmodf2+0x653>
     67f:	63 6c 75 73          	arpl   WORD PTR [ebp+esi*2+0x73],bp
     683:	74 65                	je     6ea <__fmodf2+0x6be>
     685:	72 00                	jb     687 <__fmodf2+0x65b>
     687:	61                   	popa   
     688:	63 63 65             	arpl   WORD PTR [ebx+0x65],sp
     68b:	73 73                	jae    700 <__fmodf2+0x6d4>
     68d:	5f                   	pop    edi
     68e:	64                   	fs
     68f:	61                   	popa   
     690:	74 65                	je     6f7 <__fmodf2+0x6cb>
     692:	00 73 66             	add    BYTE PTR [ebx+0x66],dh
     695:	73 74                	jae    70b <__fmodf2+0x6df>
     697:	61                   	popa   
     698:	74 00                	je     69a <__fmodf2+0x66e>
     69a:	77 72                	ja     70e <__fmodf2+0x6e2>
     69c:	69 74 65 00 75 6e 6c 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x696c6e75
     6a3:	69 
     6a4:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6a5:	6b 00 65             	imul   eax,DWORD PTR [eax],0x65
     6a8:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6a9:	74 72                	je     71d <__fmodf2+0x6f1>
     6ab:	69 65 73 00 66 69 6c 	imul   esp,DWORD PTR [ebp+0x73],0x6c696600
     6b2:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     6b4:	61                   	popa   
     6b5:	6d                   	ins    DWORD PTR es:[edi],dx
     6b6:	65 00 6f 75          	add    BYTE PTR gs:[edi+0x75],ch
     6ba:	74 50                	je     70c <__fmodf2+0x6e0>
     6bc:	61                   	popa   
     6bd:	74 68                	je     727 <__fmodf2+0x6fb>
     6bf:	00 6c 69 6e          	add    BYTE PTR [ecx+ebp*2+0x6e],ch
     6c3:	65                   	gs
     6c4:	70 74                	jo     73a <__fmodf2+0x70e>
     6c6:	72 00                	jb     6c8 <__fmodf2+0x69c>
     6c8:	69 73 5f 64 69 72 00 	imul   esi,DWORD PTR [ebx+0x5f],0x726964
     6cf:	64 69 72 65 6e 74 72 	imul   esi,DWORD PTR fs:[edx+0x65],0x7972746e
     6d6:	79 
     6d7:	5f                   	pop    edi
     6d8:	74 00                	je     6da <__fmodf2+0x6ae>
     6da:	66                   	data16
     6db:	73 74                	jae    751 <__fmodf2+0x725>
     6dd:	61                   	popa   
     6de:	74 5f                	je     73f <__fmodf2+0x713>
     6e0:	74 00                	je     6e2 <__fmodf2+0x6b6>
     6e2:	74 6f                	je     753 <__fmodf2+0x727>
     6e4:	6b 65 6e 00          	imul   esp,DWORD PTR [ebp+0x6e],0x0
     6e8:	5f                   	pop    edi
     6e9:	42                   	inc    edx
     6ea:	6f                   	outs   dx,DWORD PTR ds:[esi]
     6eb:	6f                   	outs   dx,DWORD PTR ds:[esi]
     6ec:	6c                   	ins    BYTE PTR es:[edi],dx
     6ed:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     6f0:	74 64                	je     756 <__fmodf2+0x72a>
     6f2:	69 72 49 00 64 69 72 	imul   esi,DWORD PTR [edx+0x49],0x72696400
     6f9:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     6fb:	74 72                	je     76f <__fmodf2+0x743>
     6fd:	79 00                	jns    6ff <__fmodf2+0x6d3>
     6ff:	72 65                	jb     766 <__fmodf2+0x73a>
     701:	61                   	popa   
     702:	64                   	fs
     703:	49                   	dec    ecx
     704:	00 6c 65 6e          	add    BYTE PTR [ebp+eiz*2+0x6e],ch
     708:	67 74 68             	addr16 je 773 <__fmodf2+0x747>
     70b:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     70e:	61                   	popa   
     70f:	64 00 6d 6f          	add    BYTE PTR fs:[ebp+0x6f],ch
     713:	64 65 00 62 75       	fs add BYTE PTR fs:gs:[edx+0x75],ah
     718:	66                   	data16
     719:	66                   	data16
     71a:	65                   	gs
     71b:	72 00                	jb     71d <__fmodf2+0x6f1>
     71d:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
     720:	65                   	gs
     721:	73 50                	jae    773 <__fmodf2+0x747>
     723:	61                   	popa   
     724:	72 73                	jb     799 <__fmodf2+0x76d>
     726:	65 64 00 63 72       	gs add BYTE PTR fs:gs:[ebx+0x72],ah
     72b:	65                   	gs
     72c:	61                   	popa   
     72d:	74 65                	je     794 <__fmodf2+0x768>
     72f:	5f                   	pop    edi
     730:	74 69                	je     79b <__fmodf2+0x76f>
     732:	6d                   	ins    DWORD PTR es:[edi],dx
     733:	65 00 63 6c          	add    BYTE PTR gs:[ebx+0x6c],ah
     737:	6f                   	outs   dx,DWORD PTR ds:[esi]
     738:	73 65                	jae    79f <__fmodf2+0x773>
     73a:	49                   	dec    ecx
     73b:	00 73 65             	add    BYTE PTR [ebx+0x65],dh
     73e:	65 6b 49 00 73       	imul   ecx,DWORD PTR gs:[ecx+0x0],0x73
     743:	72 63                	jb     7a8 <__fmodf2+0x77c>
     745:	2f                   	das    
     746:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     74d:	75 69                	jne    7b8 <__fmodf2+0x78c>
     74f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     750:	74 38                	je     78a <__fmodf2+0x75e>
     752:	5f                   	pop    edi
     753:	74 00                	je     755 <__fmodf2+0x729>
     755:	73 74                	jae    7cb <__fmodf2+0x79f>
     757:	5f                   	pop    edi
     758:	73 69                	jae    7c3 <__fmodf2+0x797>
     75a:	7a 65                	jp     7c1 <__fmodf2+0x795>
     75c:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     75f:	73 6f                	jae    7d0 <__fmodf2+0x7a4>
     761:	6c                   	ins    BYTE PTR es:[edi],dx
     762:	76 65                	jbe    7c9 <__fmodf2+0x79d>
     764:	50                   	push   eax
     765:	61                   	popa   
     766:	74 68                	je     7d0 <__fmodf2+0x7a4>
     768:	5f                   	pop    edi
     769:	63 77 64             	arpl   WORD PTR [edi+0x64],si
     76c:	00 68 61             	add    BYTE PTR [eax+0x61],ch
     76f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     770:	64                   	fs
     771:	6c                   	ins    BYTE PTR es:[edi],dx
     772:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
     776:	73 6f                	jae    7e7 <__fmodf2+0x7bb>
     778:	6c                   	ins    BYTE PTR es:[edi],dx
     779:	76 65                	jbe    7e0 <__fmodf2+0x7b4>
     77b:	50                   	push   eax
     77c:	61                   	popa   
     77d:	74 68                	je     7e7 <__fmodf2+0x7bb>
     77f:	5f                   	pop    edi
     780:	69 6e 50 61 74 68 00 	imul   ebp,DWORD PTR [esi+0x50],0x687461
     787:	6c                   	ins    BYTE PTR es:[edi],dx
     788:	4c                   	dec    esp
     789:	69 6e 65 50 74 72 4c 	imul   ebp,DWORD PTR [esi+0x65],0x4c727450
     790:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     792:	00 66 69             	add    BYTE PTR [esi+0x69],ah
     795:	6c                   	ins    BYTE PTR es:[edi],dx
     796:	65                   	gs
     797:	5f                   	pop    edi
     798:	63 6c 65 61          	arpl   WORD PTR [ebp+eiz*2+0x61],bp
     79c:	6e                   	outs   dx,BYTE PTR ds:[esi]
     79d:	75 70                	jne    80f <__fmodf2+0x7e3>
     79f:	00 62 79             	add    BYTE PTR [edx+0x79],ah
     7a2:	74 65                	je     809 <__fmodf2+0x7dd>
     7a4:	73 52                	jae    7f8 <__fmodf2+0x7cc>
     7a6:	65                   	gs
     7a7:	74 75                	je     81e <__fmodf2+0x7f2>
     7a9:	72 6e                	jb     819 <__fmodf2+0x7ed>
     7ab:	65 64 00 67 65       	gs add BYTE PTR fs:gs:[edi+0x65],ah
     7b0:	74 64                	je     816 <__fmodf2+0x7ea>
     7b2:	69 72 00 62 75 66 66 	imul   esi,DWORD PTR [edx+0x0],0x66667562
     7b9:	65                   	gs
     7ba:	72 43                	jb     7ff <__fmodf2+0x7d3>
     7bc:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7bd:	75 6e                	jne    82d <__fmodf2+0x801>
     7bf:	74 00                	je     7c1 <__fmodf2+0x795>
     7c1:	67                   	addr16
     7c2:	65                   	gs
     7c3:	74 63                	je     828 <__fmodf2+0x7fc>
     7c5:	68 61 72 00 67       	push   0x67007261
     7ca:	65                   	gs
     7cb:	74 73                	je     840 <__fmodf2+0x814>
     7cd:	00 70 75             	add    BYTE PTR [eax+0x75],dh
     7d0:	74 63                	je     835 <__fmodf2+0x809>
     7d2:	00 70 75             	add    BYTE PTR [eax+0x75],dh
     7d5:	74 73                	je     84a <__fmodf2+0x81e>
     7d7:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     7da:	78 6c                	js     848 <__fmodf2+0x81c>
     7dc:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     7de:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     7e1:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
     7e4:	72 00                	jb     7e6 <__fmodf2+0x7ba>
     7e6:	73 72                	jae    85a <__fmodf2+0x82e>
     7e8:	63 2f                	arpl   WORD PTR [edi],bp
     7ea:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
     7f1:	6e                   	outs   dx,BYTE PTR ds:[esi]
     7f2:	70 75                	jo     869 <__fmodf2+0x83d>
     7f4:	74 2e                	je     824 <__fmodf2+0x7f8>
     7f6:	63 00                	arpl   WORD PTR [eax],ax
     7f8:	67                   	addr16
     7f9:	65                   	gs
     7fa:	74 73                	je     86f <__fmodf2+0x843>
     7fc:	45                   	inc    ebp
     7fd:	72 72                	jb     871 <__fmodf2+0x845>
     7ff:	6f                   	outs   dx,DWORD PTR ds:[esi]
     800:	72 00                	jb     802 <__fmodf2+0x7d6>
     802:	6c                   	ins    BYTE PTR es:[edi],dx
     803:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     806:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     809:	69 6e 74 00 6c 61 73 	imul   ebp,DWORD PTR [esi+0x74],0x73616c00
     810:	74 53                	je     865 <__fmodf2+0x839>
     812:	70 61                	jo     875 <__fmodf2+0x849>
     814:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
     817:	74 72                	je     88b <__fmodf2+0x85f>
     819:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     81c:	67 44                	addr16 inc esp
     81e:	61                   	popa   
     81f:	74 61                	je     882 <__fmodf2+0x856>
     821:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
     824:	65                   	gs
     825:	65                   	gs
     826:	70 54                	jo     87c <__fmodf2+0x850>
     828:	69 63 6b 73 00 71 75 	imul   esp,DWORD PTR [ebx+0x6b],0x75710073
     82f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     830:	74 65                	je     897 <__fmodf2+0x86b>
     832:	50                   	push   eax
     833:	74 72                	je     8a7 <__fmodf2+0x87b>
     835:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
     838:	67 76 50             	addr16 jbe 88b <__fmodf2+0x85f>
     83b:	74 72                	je     8af <__fmodf2+0x883>
     83d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     840:	61                   	popa   
     841:	72 74                	jb     8b7 <__fmodf2+0x88b>
     843:	5f                   	pop    edi
     844:	6f                   	outs   dx,DWORD PTR ds:[esi]
     845:	66 5f                	pop    di
     847:	77 6f                	ja     8b8 <__fmodf2+0x88c>
     849:	72 64                	jb     8af <__fmodf2+0x883>
     84b:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
     84e:	72 6b                	jb     8bb <__fmodf2+0x88f>
     850:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     854:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
     857:	6e                   	outs   dx,BYTE PTR ds:[esi]
     858:	69 74 00 73 74 61 74 	imul   esi,DWORD PTR [eax+eax*1+0x73],0x65746174
     85f:	65 
     860:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
     863:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
     866:	6c                   	ins    BYTE PTR es:[edi],dx
     867:	74 69                	je     8d2 <__fmodf2+0x8a6>
     869:	6e                   	outs   dx,BYTE PTR ds:[esi]
     86a:	5f                   	pop    edi
     86b:	76 61                	jbe    8ce <__fmodf2+0x8a2>
     86d:	5f                   	pop    edi
     86e:	6c                   	ins    BYTE PTR es:[edi],dx
     86f:	69 73 74 00 73 70 6c 	imul   esi,DWORD PTR [ebx+0x74],0x6c707300
     876:	69 74 00 73 69 67 6e 	imul   esi,DWORD PTR [eax+eax*1+0x73],0x616e6769
     87d:	61 
     87e:	6c                   	ins    BYTE PTR es:[edi],dx
     87f:	54                   	push   esp
     880:	61                   	popa   
     881:	73 6b                	jae    8ee <__fmodf2+0x8c2>
     883:	00 73 70             	add    BYTE PTR [ebx+0x70],dh
     886:	61                   	popa   
     887:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
     88a:	74 72                	je     8fe <__fmodf2+0x8d2>
     88c:	00 74 65 6d          	add    BYTE PTR [ebp+eiz*2+0x6d],dh
     890:	70 00                	jo     892 <__fmodf2+0x866>
     892:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     895:	6c                   	ins    BYTE PTR es:[edi],dx
     896:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
     89d:	67 76 00             	addr16 jbe 8a0 <__fmodf2+0x874>
     8a0:	77 61                	ja     903 <__fmodf2+0x8d7>
     8a2:	69 74 70 69 64 00 44 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65440064
     8a9:	65 
     8aa:	62 75 67             	bound  esi,QWORD PTR [ebp+0x67]
     8ad:	4c                   	dec    esp
     8ae:	65                   	gs
     8af:	76 65                	jbe    916 <__fmodf2+0x8ea>
     8b1:	6c                   	ins    BYTE PTR es:[edi],dx
     8b2:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
     8b5:	65 63 62 00          	arpl   WORD PTR gs:[edx+0x0],sp
     8b9:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
     8bc:	6c                   	ins    BYTE PTR es:[edi],dx
     8bd:	6e                   	outs   dx,BYTE PTR ds:[esi]
     8be:	75 6d                	jne    92d <__fmodf2+0x901>
     8c0:	00 64 62 6c          	add    BYTE PTR [edx+eiz*2+0x6c],ah
     8c4:	71 75                	jno    93b <__fmodf2+0x90f>
     8c6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     8c7:	74 65                	je     92e <__fmodf2+0x902>
     8c9:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
     8cc:	65                   	gs
     8cd:	65                   	gs
     8ce:	70 00                	jo     8d0 <__fmodf2+0x8a4>
     8d0:	64 6f                	outs   dx,DWORD PTR fs:[esi]
     8d2:	5f                   	pop    edi
     8d3:	73 79                	jae    94e <__fmodf2+0x922>
     8d5:	73 63                	jae    93a <__fmodf2+0x90e>
     8d7:	61                   	popa   
     8d8:	6c                   	ins    BYTE PTR es:[edi],dx
     8d9:	6c                   	ins    BYTE PTR es:[edi],dx
     8da:	31 00                	xor    DWORD PTR [eax],eax
     8dc:	64 6f                	outs   dx,DWORD PTR fs:[esi]
     8de:	5f                   	pop    edi
     8df:	73 79                	jae    95a <__fmodf2+0x92e>
     8e1:	73 63                	jae    946 <__fmodf2+0x91a>
     8e3:	61                   	popa   
     8e4:	6c                   	ins    BYTE PTR es:[edi],dx
     8e5:	6c                   	ins    BYTE PTR es:[edi],dx
     8e6:	32 00                	xor    al,BYTE PTR [eax]
     8e8:	64 6f                	outs   dx,DWORD PTR fs:[esi]
     8ea:	5f                   	pop    edi
     8eb:	73 79                	jae    966 <__fmodf2+0x93a>
     8ed:	73 63                	jae    952 <__fmodf2+0x926>
     8ef:	61                   	popa   
     8f0:	6c                   	ins    BYTE PTR es:[edi],dx
     8f1:	6c                   	ins    BYTE PTR es:[edi],dx
     8f2:	33 00                	xor    eax,DWORD PTR [eax]
     8f4:	64 6f                	outs   dx,DWORD PTR fs:[esi]
     8f6:	5f                   	pop    edi
     8f7:	73 79                	jae    972 <__fmodf2+0x946>
     8f9:	73 63                	jae    95e <__fmodf2+0x932>
     8fb:	61                   	popa   
     8fc:	6c                   	ins    BYTE PTR es:[edi],dx
     8fd:	6c                   	ins    BYTE PTR es:[edi],dx
     8fe:	34 00                	xor    al,0x0
     900:	5f                   	pop    edi
     901:	5f                   	pop    edi
     902:	6d                   	ins    DWORD PTR es:[edi],dx
     903:	73 00                	jae    905 <__fmodf2+0x8d9>
     905:	49                   	dec    ecx
     906:	4e                   	dec    esi
     907:	5f                   	pop    edi
     908:	57                   	push   edi
     909:	4f                   	dec    edi
     90a:	52                   	push   edx
     90b:	44                   	inc    esp
     90c:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
     90f:	67 76 5f             	addr16 jbe 971 <__fmodf2+0x945>
     912:	73 69                	jae    97d <__fmodf2+0x951>
     914:	7a 65                	jp     97b <__fmodf2+0x94f>
     916:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     91a:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     91d:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
     924:	65 
     925:	64 00 77 68          	add    BYTE PTR fs:[edi+0x68],dh
     929:	69 63 68 00 69 73 73 	imul   esp,DWORD PTR [ebx+0x68],0x73736900
     930:	70 61                	jo     993 <__fmodf2+0x967>
     932:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
     935:	5f                   	pop    edi
     936:	5f                   	pop    edi
     937:	67 6e                	outs   dx,BYTE PTR ds:[si]
     939:	75 63                	jne    99e <__fmodf2+0x972>
     93b:	5f                   	pop    edi
     93c:	76 61                	jbe    99f <__fmodf2+0x973>
     93e:	5f                   	pop    edi
     93f:	6c                   	ins    BYTE PTR es:[edi],dx
     940:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
     947:	6f                   	outs   dx,DWORD PTR ds:[esi]
     948:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     94b:	69 6e 74 64 49 00 70 	imul   ebp,DWORD PTR [esi+0x74],0x70004964
     952:	61                   	popa   
     953:	72 61                	jb     9b6 <__fmodf2+0x98a>
     955:	6d                   	ins    DWORD PTR es:[edi],dx
     956:	31 00                	xor    DWORD PTR [eax],eax
     958:	70 61                	jo     9bb <__fmodf2+0x98f>
     95a:	72 61                	jb     9bd <__fmodf2+0x991>
     95c:	6d                   	ins    DWORD PTR es:[edi],dx
     95d:	32 00                	xor    al,BYTE PTR [eax]
     95f:	70 61                	jo     9c2 <__fmodf2+0x996>
     961:	72 61                	jb     9c4 <__fmodf2+0x998>
     963:	6d                   	ins    DWORD PTR es:[edi],dx
     964:	33 00                	xor    eax,DWORD PTR [eax]
     966:	70 61                	jo     9c9 <__fmodf2+0x99d>
     968:	72 61                	jb     9cb <__fmodf2+0x99f>
     96a:	6d                   	ins    DWORD PTR es:[edi],dx
     96b:	34 00                	xor    al,0x0
     96d:	73 65                	jae    9d4 <__fmodf2+0x9a8>
     96f:	74 63                	je     9d4 <__fmodf2+0x9a8>
     971:	77 64                	ja     9d7 <__fmodf2+0x9ab>
     973:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     976:	6f                   	outs   dx,DWORD PTR ds:[esi]
     977:	67 72 61             	addr16 jb 9db <__fmodf2+0x9af>
     97a:	6d                   	ins    DWORD PTR es:[edi],dx
     97b:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
     97e:	65 63 61 00          	arpl   WORD PTR gs:[ecx+0x0],sp
     982:	73 6c                	jae    9f0 <__fmodf2+0x9c4>
     984:	65                   	gs
     985:	65                   	gs
     986:	70 4d                	jo     9d5 <__fmodf2+0x9a9>
     988:	53                   	push   ebx
     989:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
     98c:	72 6d                	jb     9fb <__fmodf2+0x9cf>
     98e:	61                   	popa   
     98f:	74 00                	je     991 <__fmodf2+0x965>
     991:	70 72                	jo     a05 <__fmodf2+0x9d9>
     993:	69 6e 74 42 75 66 66 	imul   ebp,DWORD PTR [esi+0x74],0x66667542
     99a:	65                   	gs
     99b:	72 00                	jb     99d <__fmodf2+0x971>
     99d:	73 69                	jae    a08 <__fmodf2+0x9dc>
     99f:	67 6e                	outs   dx,BYTE PTR ds:[si]
     9a1:	61                   	popa   
     9a2:	6c                   	ins    BYTE PTR es:[edi],dx
     9a3:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
     9a6:	65 63 00             	arpl   WORD PTR gs:[eax],ax
     9a9:	5f                   	pop    edi
     9aa:	5f                   	pop    edi
     9ab:	73 65                	jae    a12 <__fmodf2+0x9e6>
     9ad:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     9b0:	64                   	fs
     9b1:	73 00                	jae    9b3 <__fmodf2+0x987>
     9b3:	44                   	inc    esp
     9b4:	55                   	push   ebp
     9b5:	4c                   	dec    esp
     9b6:	4c                   	dec    esp
     9b7:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     9ba:	61                   	popa   
     9bb:	74 65                	je     a22 <__fmodf2+0x9f6>
     9bd:	73 00                	jae    9bf <__fmodf2+0x993>
     9bf:	49                   	dec    ecx
     9c0:	4e                   	dec    esi
     9c1:	5f                   	pop    edi
     9c2:	53                   	push   ebx
     9c3:	54                   	push   esp
     9c4:	52                   	push   edx
     9c5:	49                   	dec    ecx
     9c6:	4e                   	dec    esi
     9c7:	47                   	inc    edi
     9c8:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     9cb:	63 2f                	arpl   WORD PTR [edi],bp
     9cd:	6c                   	ins    BYTE PTR es:[edi],dx
     9ce:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     9d5:	4f                   	dec    edi
     9d6:	53                   	push   ebx
     9d7:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     9da:	61                   	popa   
     9db:	72 67                	jb     a44 <__fmodf2+0xa18>
     9dd:	63 00                	arpl   WORD PTR [eax],ax
     9df:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     9e2:	6c                   	ins    BYTE PTR es:[edi],dx
     9e3:	69 6e 65 00 64 6f 5f 	imul   ebp,DWORD PTR [esi+0x65],0x5f6f6400
     9ea:	73 79                	jae    a65 <__fmodf2+0xa39>
     9ec:	73 63                	jae    a51 <__fmodf2+0xa25>
     9ee:	61                   	popa   
     9ef:	6c                   	ins    BYTE PTR es:[edi],dx
     9f0:	6c                   	ins    BYTE PTR es:[edi],dx
     9f1:	30 00                	xor    BYTE PTR [eax],al
     9f3:	73 70                	jae    a65 <__fmodf2+0xa39>
     9f5:	6c                   	ins    BYTE PTR es:[edi],dx
     9f6:	69 74 49 00 73 65 74 	imul   esi,DWORD PTR [ecx+ecx*2+0x0],0x70746573
     9fd:	70 
     9fe:	72 69                	jb     a69 <__fmodf2+0xa3d>
     a00:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a01:	72 69                	jb     a6c <__fmodf2+0xa40>
     a03:	74 79                	je     a7e <__fmodf2+0xa52>
     a05:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     a09:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
     a0c:	6c                   	ins    BYTE PTR es:[edi],dx
     a0d:	65                   	gs
     a0e:	61                   	popa   
     a0f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     a10:	75 70                	jne    a82 <__fmodf2+0xa56>
     a12:	00 74 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],dh
     a16:	6b 4e 75 6d          	imul   ecx,DWORD PTR [esi+0x75],0x6d
     a1a:	00 63 6d             	add    BYTE PTR [ebx+0x6d],ah
     a1d:	64                   	fs
     a1e:	6c                   	ins    BYTE PTR es:[edi],dx
     a1f:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
     a26:	67 76 49             	addr16 jbe a72 <__fmodf2+0xa46>
     a29:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
     a2c:	67 76 00             	addr16 jbe a2f <__fmodf2+0xa03>
     a2f:	65                   	gs
     a30:	78 69                	js     a9b <__fmodf2+0xa6f>
     a32:	74 00                	je     a34 <__fmodf2+0xa08>
     a34:	73 74                	jae    aaa <__fmodf2+0xa7e>
     a36:	61                   	popa   
     a37:	74 75                	je     aae <__fmodf2+0xa82>
     a39:	73 00                	jae    a3b <__fmodf2+0xa0f>
     a3b:	73 65                	jae    aa2 <__fmodf2+0xa76>
     a3d:	74 53                	je     a92 <__fmodf2+0xa66>
     a3f:	54                   	push   esp
     a40:	44                   	inc    esp
     a41:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     a44:	67 48                	addr16 dec eax
     a46:	61                   	popa   
     a47:	6e                   	outs   dx,BYTE PTR ds:[esi]
     a48:	64                   	fs
     a49:	6c                   	ins    BYTE PTR es:[edi],dx
     a4a:	65                   	gs
     a4b:	72 00                	jb     a4d <__fmodf2+0xa21>
     a4d:	5f                   	pop    edi
     a4e:	5f                   	pop    edi
     a4f:	74 69                	je     aba <__fmodf2+0xa8e>
     a51:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
     a54:	00 74 61 6b          	add    BYTE PTR [ecx+eiz*2+0x6b],dh
     a58:	65                   	gs
     a59:	41                   	inc    ecx
     a5a:	44                   	inc    esp
     a5b:	75 6d                	jne    aca <__fmodf2+0xa9e>
     a5d:	70 00                	jo     a5f <__fmodf2+0xa33>
     a5f:	66 69 6c 65 64 00 6d 	imul   bp,WORD PTR [ebp+eiz*2+0x64],0x6d00
     a66:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a67:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
     a6e:	6e 
     a6f:	61                   	popa   
     a70:	6c                   	ins    BYTE PTR es:[edi],dx
     a71:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
     a74:	67 73 00             	addr16 jae a77 <__fmodf2+0xa4b>
     a77:	70 72                	jo     aeb <__fmodf2+0xabf>
     a79:	69 6e 74 49 00 73 74 	imul   ebp,DWORD PTR [esi+0x74],0x74730049
     a80:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a81:	70 00                	jo     a83 <__fmodf2+0xa57>
     a83:	70 72                	jo     af7 <__fmodf2+0xacb>
     a85:	69 6e 74 64 00 73 4d 	imul   ebp,DWORD PTR [esi+0x74],0x4d730064
     a8c:	4d                   	dec    ebp
     a8d:	61                   	popa   
     a8e:	70 53                	jo     ae3 <__fmodf2+0xab7>
     a90:	79 73                	jns    b05 <__fmodf2+0xad9>
     a92:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
     a95:	6c                   	ins    BYTE PTR es:[edi],dx
     a96:	00 6f 66             	add    BYTE PTR [edi+0x66],ch
     a99:	66 5f                	pop    di
     a9b:	74 00                	je     a9d <__fmodf2+0xa71>
     a9d:	70 61                	jo     b00 <__fmodf2+0xad4>
     a9f:	72 61                	jb     b02 <__fmodf2+0xad6>
     aa1:	6d                   	ins    DWORD PTR es:[edi],dx
     aa2:	73 00                	jae    aa4 <__fmodf2+0xa78>
     aa4:	66                   	data16
     aa5:	6c                   	ins    BYTE PTR es:[edi],dx
     aa6:	61                   	popa   
     aa7:	67 73 00             	addr16 jae aaa <__fmodf2+0xa7e>
     aaa:	73 72                	jae    b1e <__fmodf2+0xaf2>
     aac:	63 2f                	arpl   WORD PTR [edi],bp
     aae:	6c                   	ins    BYTE PTR es:[edi],dx
     aaf:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
     ab6:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     ab9:	70 72                	jo     b2d <__fmodf2+0xb01>
     abb:	6f                   	outs   dx,DWORD PTR ds:[esi]
     abc:	74 00                	je     abe <__fmodf2+0xa92>
     abe:	6d                   	ins    DWORD PTR es:[edi],dx
     abf:	6d                   	ins    DWORD PTR es:[edi],dx
     ac0:	61                   	popa   
     ac1:	70 00                	jo     ac3 <__fmodf2+0xa97>
     ac3:	73 79                	jae    b3e <__fmodf2+0xb12>
     ac5:	73 63                	jae    b2a <__fmodf2+0xafe>
     ac7:	61                   	popa   
     ac8:	6c                   	ins    BYTE PTR es:[edi],dx
     ac9:	6c                   	ins    BYTE PTR es:[edi],dx
     aca:	5f                   	pop    edi
     acb:	6d                   	ins    DWORD PTR es:[edi],dx
     acc:	6d                   	ins    DWORD PTR es:[edi],dx
     acd:	61                   	popa   
     ace:	70 5f                	jo     b2f <__fmodf2+0xb03>
     ad0:	74 00                	je     ad2 <__fmodf2+0xaa6>
     ad2:	70 72                	jo     b46 <__fmodf2+0xb1a>
     ad4:	65                   	gs
     ad5:	76 00                	jbe    ad7 <__fmodf2+0xaab>
     ad7:	6c                   	ins    BYTE PTR es:[edi],dx
     ad8:	61                   	popa   
     ad9:	73 74                	jae    b4f <__fmodf2+0xb23>
     adb:	48                   	dec    eax
     adc:	52                   	push   edx
     add:	43                   	inc    ebx
     ade:	72 65                	jb     b45 <__fmodf2+0xb19>
     ae0:	61                   	popa   
     ae1:	74 65                	je     b48 <__fmodf2+0xb1c>
     ae3:	64 00 68 65          	add    BYTE PTR fs:[eax+0x65],ch
     ae7:	61                   	popa   
     ae8:	70 43                	jo     b2d <__fmodf2+0xb01>
     aea:	75 72                	jne    b5e <__fmodf2+0xb32>
     aec:	72 00                	jb     aee <__fmodf2+0xac2>
     aee:	6e                   	outs   dx,BYTE PTR ds:[esi]
     aef:	65                   	gs
     af0:	78 74                	js     b66 <__fmodf2+0xb3a>
     af2:	00 68 65             	add    BYTE PTR [eax+0x65],ch
     af5:	61                   	popa   
     af6:	70 72                	jo     b6a <__fmodf2+0xb3e>
     af8:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
     afc:	00 68 65             	add    BYTE PTR [eax+0x65],ch
     aff:	61                   	popa   
     b00:	70 42                	jo     b44 <__fmodf2+0xb18>
     b02:	61                   	popa   
     b03:	73 65                	jae    b6a <__fmodf2+0xb3e>
     b05:	00 66 72             	add    BYTE PTR [esi+0x72],ah
     b08:	65                   	gs
     b09:	65                   	gs
     b0a:	49                   	dec    ecx
     b0b:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     b0e:	72 6b                	jb     b7b <__fmodf2+0xb4f>
     b10:	65                   	gs
     b11:	72 00                	jb     b13 <__fmodf2+0xae7>
     b13:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b14:	65                   	gs
     b15:	77 48                	ja     b5f <__fmodf2+0xb33>
     b17:	65                   	gs
     b18:	61                   	popa   
     b19:	70 52                	jo     b6d <__fmodf2+0xb41>
     b1b:	65                   	gs
     b1c:	71 75                	jno    b93 <__fmodf2+0xb67>
     b1e:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
     b25:	75 6c                	jne    b93 <__fmodf2+0xb67>
     b27:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
     b2e:	75 65                	jne    b95 <__fmodf2+0xb69>
     b30:	73 74                	jae    ba6 <__fmodf2+0xb7a>
     b32:	00 66 69             	add    BYTE PTR [esi+0x69],ah
     b35:	6c                   	ins    BYTE PTR es:[edi],dx
     b36:	6c                   	ins    BYTE PTR es:[edi],dx
     b37:	65                   	gs
     b38:	72 00                	jb     b3a <__fmodf2+0xb0e>
     b3a:	69 6e 55 73 65 00 73 	imul   ebp,DWORD PTR [esi+0x55],0x73006573
     b41:	68 65 61 70 00       	push   0x706165
     b46:	69 6e 69 74 6d 61 6c 	imul   ebp,DWORD PTR [esi+0x69],0x6c616d74
     b4d:	6c                   	ins    BYTE PTR es:[edi],dx
     b4e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b4f:	63 00                	arpl   WORD PTR [eax],ax
     b51:	72 65                	jb     bb8 <__fmodf2+0xb8c>
     b53:	71 75                	jno    bca <__fmodf2+0xb9e>
     b55:	65                   	gs
     b56:	73 74                	jae    bcc <__fmodf2+0xba0>
     b58:	53                   	push   ebx
     b59:	69 7a 65 00 6d 61 6c 	imul   edi,DWORD PTR [edx+0x65],0x6c616d00
     b60:	6c                   	ins    BYTE PTR es:[edi],dx
     b61:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b62:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
     b65:	6c                   	ins    BYTE PTR es:[edi],dx
     b66:	65                   	gs
     b67:	61                   	popa   
     b68:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b69:	75 70                	jne    bdb <__fmodf2+0xbaf>
     b6b:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
     b6e:	6c                   	ins    BYTE PTR es:[edi],dx
     b6f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b70:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
     b73:	65                   	gs
     b74:	64                   	fs
     b75:	50                   	push   eax
     b76:	74 72                	je     bea <__fmodf2+0xbbe>
     b78:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
     b7b:	77 6c                	ja     be9 <__fmodf2+0xbbd>
     b7d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     b7f:	00 53 61             	add    BYTE PTR [ebx+0x61],dl
     b82:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b83:	69 74 79 4c 6f 6f 70 	imul   esi,DWORD PTR [ecx+edi*2+0x4c],0x706f6f
     b8a:	00 
     b8b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b8c:	65                   	gs
     b8d:	77 53                	ja     be2 <__fmodf2+0xbb6>
     b8f:	69 7a 65 00 72 65 61 	imul   edi,DWORD PTR [edx+0x65],0x61657200
     b96:	6c                   	ins    BYTE PTR es:[edi],dx
     b97:	53                   	push   ebx
     b98:	69 7a 65 00 6e 65 65 	imul   edi,DWORD PTR [edx+0x65],0x65656e00
     b9f:	64 65 64 00 72 65    	fs gs add BYTE PTR fs:gs:[edx+0x65],dh
     ba5:	61                   	popa   
     ba6:	6c                   	ins    BYTE PTR es:[edi],dx
     ba7:	6c                   	ins    BYTE PTR es:[edi],dx
     ba8:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ba9:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
     bac:	75 73                	jne    c21 <__fmodf2+0xbf5>
     bae:	65                   	gs
     baf:	73 00                	jae    bb1 <__fmodf2+0xb85>
     bb1:	68 65 61 70 72       	push   0x72706165
     bb6:	65 63 00             	arpl   WORD PTR gs:[eax],ax
     bb9:	66                   	data16
     bba:	6e                   	outs   dx,BYTE PTR ds:[esi]
     bbb:	65                   	gs
     bbc:	77 70                	ja     c2e <__fmodf2+0xc02>
     bbe:	74 72                	je     c32 <__fmodf2+0xc06>
     bc0:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     bc3:	63 2f                	arpl   WORD PTR [edi],bp
     bc5:	6d                   	ins    DWORD PTR es:[edi],dx
     bc6:	61                   	popa   
     bc7:	6c                   	ins    BYTE PTR es:[edi],dx
     bc8:	6c                   	ins    BYTE PTR es:[edi],dx
     bc9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     bca:	63 2e                	arpl   WORD PTR [esi],bp
     bcc:	63 00                	arpl   WORD PTR [eax],ax
     bce:	68 65 61 70 50       	push   0x50706165
     bd3:	74 72                	je     c47 <__fmodf2+0xc1b>
     bd5:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
     bd8:	6c                   	ins    BYTE PTR es:[edi],dx
     bd9:	64                   	fs
     bda:	70 74                	jo     c50 <__fmodf2+0xc24>
     bdc:	72 00                	jb     bde <__fmodf2+0xbb2>
     bde:	66                   	data16
     bdf:	72 65                	jb     c46 <__fmodf2+0xc1a>
     be1:	65 00 66 70          	add    BYTE PTR gs:[esi+0x70],ah
     be5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     be6:	69 6e 74 65 72 00 53 	imul   ebp,DWORD PTR [esi+0x74],0x53007265
     bed:	61                   	popa   
     bee:	6e                   	outs   dx,BYTE PTR ds:[esi]
     bef:	69 74 79 4c 6f 6f 70 	imul   esi,DWORD PTR [ecx+edi*2+0x4c],0x32706f6f
     bf6:	32 
     bf7:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     bfa:	6c                   	ins    BYTE PTR es:[edi],dx
     bfb:	6c                   	ins    BYTE PTR es:[edi],dx
     bfc:	6f                   	outs   dx,DWORD PTR ds:[esi]
     bfd:	63 46 69             	arpl   WORD PTR [esi+0x69],ax
     c00:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c01:	64                   	fs
     c02:	41                   	inc    ecx
     c03:	76 61                	jbe    c66 <__fmodf2+0xc3a>
     c05:	69 6c 61 62 6c 65 4d 	imul   ebp,DWORD PTR [ecx+eiz*2+0x62],0x654d656c
     c0c:	65 
     c0d:	6d                   	ins    DWORD PTR es:[edi],dx
     c0e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c0f:	72 79                	jb     c8a <__fmodf2+0xc5e>
     c11:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     c14:	61                   	popa   
     c15:	6c                   	ins    BYTE PTR es:[edi],dx
     c16:	6c                   	ins    BYTE PTR es:[edi],dx
     c17:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c18:	63 00                	arpl   WORD PTR [eax],ax
     c1a:	68 65 61 70 45       	push   0x45706165
     c1f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c20:	64 00 6d 61          	add    BYTE PTR fs:[ebp+0x61],ch
     c24:	6c                   	ins    BYTE PTR es:[edi],dx
     c25:	6c                   	ins    BYTE PTR es:[edi],dx
     c26:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c27:	63 53 61             	arpl   WORD PTR [ebx+0x61],dx
     c2a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c2b:	69 74 79 43 68 65 63 	imul   esi,DWORD PTR [ecx+edi*2+0x43],0x6b636568
     c32:	6b 
     c33:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
     c36:	6d                   	ins    DWORD PTR es:[edi],dx
     c37:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     c3a:	49                   	dec    ecx
     c3b:	00 64 65 73          	add    BYTE PTR [ebp+eiz*2+0x73],ah
     c3f:	74 00                	je     c41 <__fmodf2+0xc15>
     c41:	6d                   	ins    DWORD PTR es:[edi],dx
     c42:	65                   	gs
     c43:	6d                   	ins    DWORD PTR es:[edi],dx
     c44:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     c47:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     c4a:	63 2f                	arpl   WORD PTR [edi],bp
     c4c:	6d                   	ins    DWORD PTR es:[edi],dx
     c4d:	65                   	gs
     c4e:	6d                   	ins    DWORD PTR es:[edi],dx
     c4f:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     c52:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     c55:	73 72                	jae    cc9 <__fmodf2+0xc9d>
     c57:	63 2f                	arpl   WORD PTR [edi],bp
     c59:	6d                   	ins    DWORD PTR es:[edi],dx
     c5a:	65                   	gs
     c5b:	6d                   	ins    DWORD PTR es:[edi],dx
     c5c:	73 65                	jae    cc3 <__fmodf2+0xc97>
     c5e:	74 2e                	je     c8e <__fmodf2+0xc62>
     c60:	63 00                	arpl   WORD PTR [eax],ax
     c62:	6d                   	ins    DWORD PTR es:[edi],dx
     c63:	65                   	gs
     c64:	6d                   	ins    DWORD PTR es:[edi],dx
     c65:	73 65                	jae    ccc <__fmodf2+0xca0>
     c67:	74 00                	je     c69 <__fmodf2+0xc3d>
     c69:	6d                   	ins    DWORD PTR es:[edi],dx
     c6a:	65                   	gs
     c6b:	6d                   	ins    DWORD PTR es:[edi],dx
     c6c:	73 65                	jae    cd3 <__fmodf2+0xca7>
     c6e:	74 49                	je     cb9 <__fmodf2+0xc8d>
     c70:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
     c73:	61                   	popa   
     c74:	6c                   	ins    BYTE PTR es:[edi],dx
     c75:	00 66 56             	add    BYTE PTR [esi+0x56],ah
     c78:	61                   	popa   
     c79:	6c                   	ins    BYTE PTR es:[edi],dx
     c7a:	00 6f 6c             	add    BYTE PTR [edi+0x6c],ch
     c7d:	64                   	fs
     c7e:	66                   	data16
     c7f:	64 00 64 75 70       	add    BYTE PTR fs:[ebp+esi*2+0x70],ah
     c84:	33 00                	xor    eax,DWORD PTR [eax]
     c86:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c87:	65                   	gs
     c88:	77 66                	ja     cf0 <__fmodf2+0xcc4>
     c8a:	64 00 70 69          	add    BYTE PTR fs:[eax+0x69],dh
     c8e:	70 65                	jo     cf5 <__fmodf2+0xcc9>
     c90:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     c93:	63 2f                	arpl   WORD PTR [edi],bp
     c95:	70 69                	jo     d00 <__fmodf2+0xcd4>
     c97:	70 65                	jo     cfe <__fmodf2+0xcd2>
     c99:	5f                   	pop    edi
     c9a:	6c                   	ins    BYTE PTR es:[edi],dx
     c9b:	69 62 2e 63 00 70 69 	imul   esp,DWORD PTR [edx+0x2e],0x69700063
     ca2:	70 65                	jo     d09 <__fmodf2+0xcdd>
     ca4:	66                   	data16
     ca5:	64 00 73 72          	add    BYTE PTR fs:[ebx+0x72],dh
     ca9:	63 2f                	arpl   WORD PTR [edi],bp
     cab:	70 72                	jo     d1f <__fmodf2+0xcf3>
     cad:	6f                   	outs   dx,DWORD PTR ds:[esi]
     cae:	63 69 6e             	arpl   WORD PTR [ecx+0x6e],bp
     cb1:	66 6f                	outs   dx,WORD PTR ds:[esi]
     cb3:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     cb6:	74 6d                	je     d25 <__fmodf2+0xcf9>
     cb8:	5f                   	pop    edi
     cb9:	68 6f 75 72 00       	push   0x72756f
     cbe:	72 75                	jb     d35 <__fmodf2+0xd09>
     cc0:	6e                   	outs   dx,BYTE PTR ds:[esi]
     cc1:	74 69                	je     d2c <__fmodf2+0xd00>
     cc3:	6d                   	ins    DWORD PTR es:[edi],dx
     cc4:	65                   	gs
     cc5:	5f                   	pop    edi
     cc6:	73 65                	jae    d2d <__fmodf2+0xd01>
     cc8:	63 73 00             	arpl   WORD PTR [ebx+0x0],si
     ccb:	74 6d                	je     d3a <__fmodf2+0xd0e>
     ccd:	5f                   	pop    edi
     cce:	7a 6f                	jp     d3f <__fmodf2+0xd13>
     cd0:	6e                   	outs   dx,BYTE PTR ds:[esi]
     cd1:	65 00 73 74          	add    BYTE PTR gs:[ebx+0x74],dh
     cd5:	61                   	popa   
     cd6:	74 42                	je     d1a <__fmodf2+0xcee>
     cd8:	75 66                	jne    d40 <__fmodf2+0xd14>
     cda:	66                   	data16
     cdb:	65                   	gs
     cdc:	72 00                	jb     cde <__fmodf2+0xcb2>
     cde:	6c                   	ins    BYTE PTR es:[edi],dx
     cdf:	61                   	popa   
     ce0:	73 74                	jae    d56 <__fmodf2+0xd2a>
     ce2:	55                   	push   ebp
     ce3:	70 64                	jo     d49 <__fmodf2+0xd1d>
     ce5:	61                   	popa   
     ce6:	74 65                	je     d4d <__fmodf2+0xd21>
     ce8:	49                   	dec    ecx
     ce9:	74 65                	je     d50 <__fmodf2+0xd24>
     ceb:	72 61                	jb     d4e <__fmodf2+0xd22>
     ced:	74 69                	je     d58 <__fmodf2+0xd2c>
     cef:	6f                   	outs   dx,DWORD PTR ds:[esi]
     cf0:	6e                   	outs   dx,BYTE PTR ds:[esi]
     cf1:	00 64 69 72          	add    BYTE PTR [ecx+ebp*2+0x72],ah
     cf5:	45                   	inc    ebp
     cf6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     cf7:	74 72                	je     d6b <__fmodf2+0xd3f>
     cf9:	69 65 73 00 62 75 69 	imul   esp,DWORD PTR [ebp+0x73],0x69756200
     d00:	6c                   	ins    BYTE PTR es:[edi],dx
     d01:	64                   	fs
     d02:	50                   	push   eax
     d03:	72 6f                	jb     d74 <__fmodf2+0xd48>
     d05:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     d08:	66 6f                	outs   dx,WORD PTR ds:[esi]
     d0a:	54                   	push   esp
     d0b:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
     d0f:	6d                   	ins    DWORD PTR es:[edi],dx
     d10:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d11:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d12:	00 62 75             	add    BYTE PTR [edx+0x75],ah
     d15:	69 6c 64 41 6c 6c 50 	imul   ebp,DWORD PTR [esp+eiz*2+0x41],0x72506c6c
     d1c:	72 
     d1d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d1e:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     d21:	66 6f                	outs   dx,WORD PTR ds:[esi]
     d23:	54                   	push   esp
     d24:	73 00                	jae    d26 <__fmodf2+0xcfa>
     d26:	74 6d                	je     d95 <__fmodf2+0xd69>
     d28:	5f                   	pop    edi
     d29:	79 65                	jns    d90 <__fmodf2+0xd64>
     d2b:	61                   	popa   
     d2c:	72 00                	jb     d2e <__fmodf2+0xd02>
     d2e:	69 74 65 72 61 74 69 	imul   esi,DWORD PTR [ebp+eiz*2+0x72],0x6f697461
     d35:	6f 
     d36:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d37:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     d3a:	61                   	popa   
     d3b:	74 69                	je     da6 <__fmodf2+0xd7a>
     d3d:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d3e:	66 6f                	outs   dx,WORD PTR ds:[esi]
     d40:	00 74 6f 70          	add    BYTE PTR [edi+ebp*2+0x70],dh
     d44:	69 6e 66 6f 00 62 75 	imul   ebp,DWORD PTR [esi+0x66],0x7562006f
     d4b:	69 6c 64 50 72 6f 63 	imul   ebp,DWORD PTR [esp+eiz*2+0x50],0x49636f72
     d52:	49 
     d53:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d54:	66 6f                	outs   dx,WORD PTR ds:[esi]
     d56:	54                   	push   esp
     d57:	49                   	dec    ecx
     d58:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
     d5c:	69 73 64 73 74 00 76 	imul   esi,DWORD PTR [ebx+0x64],0x76007473
     d63:	69 72 74 75 61 6c 53 	imul   esi,DWORD PTR [edx+0x74],0x536c6175
     d6a:	69 7a 65 00 6d 65 6d 	imul   edi,DWORD PTR [edx+0x65],0x6d656d00
     d71:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d72:	72 79                	jb     ded <__fmodf2+0xdc1>
     d74:	53                   	push   ebx
     d75:	69 7a 65 00 74 6f 74 	imul   edi,DWORD PTR [edx+0x65],0x746f7400
     d7c:	61                   	popa   
     d7d:	6c                   	ins    BYTE PTR es:[edi],dx
     d7e:	54                   	push   esp
     d7f:	69 63 6b 73 00 70 72 	imul   esp,DWORD PTR [ebx+0x6b],0x72700073
     d86:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d87:	63 43 6f             	arpl   WORD PTR [ebx+0x6f],ax
     d8a:	75 6e                	jne    dfa <__fmodf2+0xdce>
     d8c:	74 00                	je     d8e <__fmodf2+0xd62>
     d8e:	74 6d                	je     dfd <__fmodf2+0xdd1>
     d90:	5f                   	pop    edi
     d91:	6d                   	ins    DWORD PTR es:[edi],dx
     d92:	69 6e 00 74 6d 5f 79 	imul   ebp,DWORD PTR [esi+0x0],0x795f6d74
     d99:	64                   	fs
     d9a:	61                   	popa   
     d9b:	79 00                	jns    d9d <__fmodf2+0xd71>
     d9d:	6d                   	ins    DWORD PTR es:[edi],dx
     d9e:	61                   	popa   
     d9f:	6a 6f                	push   0x6f
     da1:	72 46                	jb     de9 <__fmodf2+0xdbd>
     da3:	61                   	popa   
     da4:	75 6c                	jne    e12 <__fmodf2+0xde6>
     da6:	74 73                	je     e1b <__fmodf2+0xdef>
     da8:	00 75 73             	add    BYTE PTR [ebp+0x73],dh
     dab:	65                   	gs
     dac:	72 43                	jb     df1 <__fmodf2+0xdc5>
     dae:	50                   	push   eax
     daf:	55                   	push   ebp
     db0:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
     db4:	74 54                	je     e0a <__fmodf2+0xdde>
     db6:	69 63 6b 73 00 74 69 	imul   esp,DWORD PTR [ebx+0x6b],0x69740073
     dbd:	6d                   	ins    DWORD PTR es:[edi],dx
     dbe:	65                   	gs
     dbf:	5f                   	pop    edi
     dc0:	74 00                	je     dc2 <__fmodf2+0xd96>
     dc2:	6e                   	outs   dx,BYTE PTR ds:[esi]
     dc3:	61                   	popa   
     dc4:	6d                   	ins    DWORD PTR es:[edi],dx
     dc5:	65 32 00             	xor    al,BYTE PTR gs:[eax]
     dc8:	6e                   	outs   dx,BYTE PTR ds:[esi]
     dc9:	61                   	popa   
     dca:	6d                   	ins    DWORD PTR es:[edi],dx
     dcb:	65 33 00             	xor    eax,DWORD PTR gs:[eax]
     dce:	63 75 72             	arpl   WORD PTR [ebp+0x72],si
     dd1:	72 50                	jb     e23 <__fmodf2+0xdf7>
     dd3:	72 6f                	jb     e44 <__fmodf2+0xe18>
     dd5:	63 00                	arpl   WORD PTR [eax],ax
     dd7:	69 70 69 64 00 74 6d 	imul   esi,DWORD PTR [eax+0x69],0x6d740064
     dde:	5f                   	pop    edi
     ddf:	67 6d                	ins    DWORD PTR es:[di],dx
     de1:	74 6f                	je     e52 <__fmodf2+0xe26>
     de3:	66                   	data16
     de4:	66                   	data16
     de5:	00 74 6f 6b          	add    BYTE PTR [edi+ebp*2+0x6b],dh
     de9:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     deb:	4e                   	dec    esi
     dec:	75 6d                	jne    e5b <__fmodf2+0xe2f>
     dee:	62 65 72             	bound  esp,QWORD PTR [ebp+0x72]
     df1:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     df4:	74 65                	je     e5b <__fmodf2+0xe2f>
     df6:	72 76                	jb     e6e <__fmodf2+0xe42>
     df8:	61                   	popa   
     df9:	6c                   	ins    BYTE PTR es:[edi],dx
     dfa:	54                   	push   esp
     dfb:	69 63 6b 73 00 73 50 	imul   esp,DWORD PTR [ebx+0x6b],0x50730073
     e02:	72 6f                	jb     e73 <__fmodf2+0xe47>
     e04:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     e07:	66 6f                	outs   dx,WORD PTR ds:[esi]
     e09:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     e0c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e0d:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     e10:	66 6f                	outs   dx,WORD PTR ds:[esi]
     e12:	5f                   	pop    edi
     e13:	74 00                	je     e15 <__fmodf2+0xde9>
     e15:	74 6d                	je     e84 <__fmodf2+0xe58>
     e17:	5f                   	pop    edi
     e18:	77 64                	ja     e7e <__fmodf2+0xe52>
     e1a:	61                   	popa   
     e1b:	79 00                	jns    e1d <__fmodf2+0xdf1>
     e1d:	74 6d                	je     e8c <__fmodf2+0xe60>
     e1f:	5f                   	pop    edi
     e20:	6d                   	ins    DWORD PTR es:[edi],dx
     e21:	64                   	fs
     e22:	61                   	popa   
     e23:	79 00                	jns    e25 <__fmodf2+0xdf9>
     e25:	74 69                	je     e90 <__fmodf2+0xe64>
     e27:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
     e2a:	50                   	push   eax
     e2b:	65                   	gs
     e2c:	72 55                	jb     e83 <__fmodf2+0xe57>
     e2e:	70 64                	jo     e94 <__fmodf2+0xe68>
     e30:	61                   	popa   
     e31:	74 65                	je     e98 <__fmodf2+0xe6c>
     e33:	49                   	dec    ecx
     e34:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e35:	74 65                	je     e9c <__fmodf2+0xe70>
     e37:	72 76                	jb     eaf <__fmodf2+0xe83>
     e39:	61                   	popa   
     e3a:	6c                   	ins    BYTE PTR es:[edi],dx
     e3b:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
     e3f:	73 65                	jae    ea6 <__fmodf2+0xe7a>
     e41:	63 00                	arpl   WORD PTR [eax],ax
     e43:	6d                   	ins    DWORD PTR es:[edi],dx
     e44:	69 6e 6f 72 46 61 75 	imul   ebp,DWORD PTR [esi+0x6f],0x75614672
     e4b:	6c                   	ins    BYTE PTR es:[edi],dx
     e4c:	74 73                	je     ec1 <__fmodf2+0xe95>
     e4e:	00 6b 65             	add    BYTE PTR [ebx+0x65],ch
     e51:	72 6e                	jb     ec1 <__fmodf2+0xe95>
     e53:	65                   	gs
     e54:	6c                   	ins    BYTE PTR es:[edi],dx
     e55:	43                   	inc    ebx
     e56:	50                   	push   eax
     e57:	55                   	push   ebp
     e58:	00 70 70             	add    BYTE PTR [eax+0x70],dh
     e5b:	69 64 00 66 69 65 6c 	imul   esp,DWORD PTR [eax+eax*1+0x66],0x646c6569
     e62:	64 
     e63:	5f                   	pop    edi
     e64:	77 69                	ja     ecf <__fmodf2+0xea3>
     e66:	64                   	fs
     e67:	74 68                	je     ed1 <__fmodf2+0xea5>
     e69:	00 6e 64             	add    BYTE PTR [esi+0x64],ch
     e6c:	69 67 69 74 73 00 72 	imul   esp,DWORD PTR [edi+0x69],0x72007374
     e73:	65                   	gs
     e74:	70 65                	jo     edb <__fmodf2+0xeaf>
     e76:	61                   	popa   
     e77:	74 00                	je     e79 <__fmodf2+0xe4d>
     e79:	69 6e 56 61 6c 75 65 	imul   ebp,DWORD PTR [esi+0x56],0x65756c61
     e80:	00 6d 6f             	add    BYTE PTR [ebp+0x6f],ch
     e83:	64                   	fs
     e84:	66                   	data16
     e85:	00 65 61             	add    BYTE PTR [ebp+0x61],ah
     e88:	64                   	fs
     e89:	64                   	fs
     e8a:	72 00                	jb     e8c <__fmodf2+0xe60>
     e8c:	73 72                	jae    f00 <__fmodf2+0xed4>
     e8e:	63 2f                	arpl   WORD PTR [edi],bp
     e90:	73 70                	jae    f02 <__fmodf2+0xed6>
     e92:	72 69                	jb     efd <__fmodf2+0xed1>
     e94:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e95:	74 66                	je     efd <__fmodf2+0xed1>
     e97:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     e9a:	6d                   	ins    DWORD PTR es:[edi],dx
     e9b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e9c:	64                   	fs
     e9d:	66 61                	popaw  
     e9f:	73 6d                	jae    f0e <__fmodf2+0xee2>
     ea1:	00 63 70             	add    BYTE PTR [ebx+0x70],ah
     ea4:	75 69                	jne    f0f <__fmodf2+0xee3>
     ea6:	64                   	fs
     ea7:	5f                   	pop    edi
     ea8:	70 72                	jo     f1c <__fmodf2+0xef0>
     eaa:	6f                   	outs   dx,DWORD PTR ds:[esi]
     eab:	63 69 6e             	arpl   WORD PTR [ecx+0x6e],bp
     eae:	66 6f                	outs   dx,WORD PTR ds:[esi]
     eb0:	00 70 61             	add    BYTE PTR [eax+0x61],dh
     eb3:	64 31 00             	xor    DWORD PTR fs:[eax],eax
     eb6:	70 61                	jo     f19 <__fmodf2+0xeed>
     eb8:	64 32 00             	xor    al,BYTE PTR fs:[eax]
     ebb:	75 70                	jne    f2d <__fmodf2+0xf01>
     ebd:	70 65                	jo     f24 <__fmodf2+0xef8>
     ebf:	72 5f                	jb     f20 <__fmodf2+0xef4>
     ec1:	64 69 67 69 74 73 00 	imul   esp,DWORD PTR fs:[edi+0x69],0x66007374
     ec8:	66 
     ec9:	63 76 74             	arpl   WORD PTR [esi+0x74],si
     ecc:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     ecf:	00 65 6d             	add    BYTE PTR [ebp+0x6d],ah
     ed2:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ed3:	64                   	fs
     ed4:	65                   	gs
     ed5:	6c                   	ins    BYTE PTR es:[edi],dx
     ed6:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     ed9:	65                   	gs
     eda:	66                   	data16
     edb:	65                   	gs
     edc:	74 63                	je     f41 <__fmodf2+0xf15>
     ede:	68 77 74 31 00       	push   0x317477
     ee3:	69 6e 56 61 6c 75 65 	imul   ebp,DWORD PTR [esi+0x56],0x65756c61
     eea:	32 00                	xor    al,BYTE PTR [eax]
     eec:	65                   	gs
     eed:	66 61                	popaw  
     eef:	6d                   	ins    DWORD PTR es:[edi],dx
     ef0:	69 6c 79 00 69 61 64 	imul   ebp,DWORD PTR [ecx+edi*2+0x0],0x64646169
     ef7:	64 
     ef8:	72 00                	jb     efa <__fmodf2+0xece>
     efa:	73 70                	jae    f6c <__fmodf2+0xf40>
     efc:	72 69                	jb     f67 <__fmodf2+0xf3b>
     efe:	6e                   	outs   dx,BYTE PTR ds:[esi]
     eff:	74 66                	je     f67 <__fmodf2+0xf3b>
     f01:	49                   	dec    ecx
     f02:	00 76 73             	add    BYTE PTR [esi+0x73],dh
     f05:	70 72                	jo     f79 <__fmodf2+0xf4d>
     f07:	69 6e 74 66 00 65 66 	imul   ebp,DWORD PTR [esi+0x74],0x66650066
     f0e:	6c                   	ins    BYTE PTR es:[edi],dx
     f0f:	61                   	popa   
     f10:	67 00 63 72          	add    BYTE PTR [bp+di+0x72],ah
     f14:	6f                   	outs   dx,DWORD PTR ds:[esi]
     f15:	70 7a                	jo     f91 <__fmodf2+0xf65>
     f17:	65                   	gs
     f18:	72 6f                	jb     f89 <__fmodf2+0xf5d>
     f1a:	73 00                	jae    f1c <__fmodf2+0xef0>
     f1c:	66 6f                	outs   dx,WORD PTR ds:[esi]
     f1e:	72 63                	jb     f83 <__fmodf2+0xf57>
     f20:	64 65 63 70 74       	fs arpl WORD PTR fs:gs:[eax+0x74],si
     f25:	00 61 76             	add    BYTE PTR [ecx+0x76],ah
     f28:	78 35                	js     f5f <__fmodf2+0xf33>
     f2a:	31 32                	xor    DWORD PTR [edx],esi
     f2c:	76 62                	jbe    f90 <__fmodf2+0xf64>
     f2e:	6d                   	ins    DWORD PTR es:[edi],dx
     f2f:	69 00 63 70 75 69    	imul   eax,DWORD PTR [eax],0x69757063
     f35:	64                   	fs
     f36:	5f                   	pop    edi
     f37:	65                   	gs
     f38:	78 74                	js     fae <__fmodf2+0xf82>
     f3a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     f3c:	64                   	fs
     f3d:	65                   	gs
     f3e:	64                   	fs
     f3f:	5f                   	pop    edi
     f40:	66                   	data16
     f41:	65                   	gs
     f42:	61                   	popa   
     f43:	74 75                	je     fba <__fmodf2+0xf8e>
     f45:	72 65                	jb     fac <__fmodf2+0xf80>
     f47:	5f                   	pop    edi
     f48:	62 69 74             	bound  ebp,QWORD PTR [ecx+0x74]
     f4b:	73 00                	jae    f4d <__fmodf2+0xf21>
     f4d:	71 75                	jno    fc4 <__fmodf2+0xf98>
     f4f:	61                   	popa   
     f50:	6c                   	ins    BYTE PTR es:[edi],dx
     f51:	69 66 69 65 72 00 73 	imul   esp,DWORD PTR [esi+0x69],0x73007265
     f58:	6b 69 70 5f          	imul   ebp,DWORD PTR [ecx+0x70],0x5f
     f5c:	61                   	popa   
     f5d:	74 6f                	je     fce <__fmodf2+0xfa2>
     f5f:	69 00 65 63 76 74    	imul   eax,DWORD PTR [eax],0x74766365
     f65:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     f68:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f6b:	72 6e                	jb     fdb <__fmodf2+0xfaf>
     f6d:	6c                   	ins    BYTE PTR es:[edi],dx
     f6e:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     f70:	49                   	dec    ecx
     f71:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     f74:	67 6e                	outs   dx,BYTE PTR ds:[si]
     f76:	69 74 75 64 65 00 63 	imul   esi,DWORD PTR [ebp+esi*2+0x64],0x66630065
     f7d:	66 
     f7e:	6c                   	ins    BYTE PTR es:[edi],dx
     f7f:	74 63                	je     fe4 <__fmodf2+0xfb8>
     f81:	76 74                	jbe    ff7 <__fmodf2+0xfcb>
     f83:	00 6e 75             	add    BYTE PTR [esi+0x75],ch
     f86:	6d                   	ins    DWORD PTR es:[edi],dx
     f87:	62 65 72             	bound  esp,QWORD PTR [ebp+0x72]
     f8a:	00 62 61             	add    BYTE PTR [edx+0x61],ah
     f8d:	73 65                	jae    ff4 <__fmodf2+0xfc8>
     f8f:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     f92:	73 65                	jae    ff9 <__fmodf2+0xfcd>
     f94:	72 76                	jb     100c <__fmodf2+0xfe0>
     f96:	65 64 00 73 74       	gs add BYTE PTR fs:gs:[ebx+0x74],dh
     f9b:	65                   	gs
     f9c:	70 00                	jo     f9e <__fmodf2+0xf72>
     f9e:	63 61 70             	arpl   WORD PTR [ecx+0x70],sp
     fa1:	65                   	gs
     fa2:	78 70                	js     1014 <__fmodf2+0xfe8>
     fa4:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     fa7:	65 63 69 73          	arpl   WORD PTR gs:[ecx+0x73],bp
     fab:	69 6f 6e 00 62 75 66 	imul   ebp,DWORD PTR [edi+0x6e],0x66756200
     fb2:	66 50                	push   ax
     fb4:	74 72                	je     1028 <__fmodf2+0xffc>
     fb6:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     fb9:	63 2f                	arpl   WORD PTR [edi],bp
     fbb:	73 74                	jae    1031 <__fmodf2+0x1005>
     fbd:	64 69 6f 2e 63 00 72 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x65720063
     fc4:	65 
     fc5:	73 65                	jae    102c <__fmodf2+0x1000>
     fc7:	74 52                	je     101b <__fmodf2+0xfef>
     fc9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     fca:	77 00                	ja     fcc <__fmodf2+0xfa0>
     fcc:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     fcf:	66                   	data16
     fd0:	00 62 79             	add    BYTE PTR [edx+0x79],ah
     fd3:	74 65                	je     103a <__fmodf2+0x100e>
     fd5:	73 54                	jae    102b <__fmodf2+0xfff>
     fd7:	6f                   	outs   dx,DWORD PTR ds:[esi]
     fd8:	43                   	inc    ebx
     fd9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     fda:	70 79                	jo     1055 <__fmodf2+0x1029>
     fdc:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     fdf:	72 6e                	jb     104f <__fmodf2+0x1023>
     fe1:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
     fe4:	49                   	dec    ecx
     fe5:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     fe8:	63 53 74             	arpl   WORD PTR [ebx+0x74],dx
     feb:	72 69                	jb     1056 <__fmodf2+0x102a>
     fed:	6e                   	outs   dx,BYTE PTR ds:[esi]
     fee:	67 4c                	addr16 dec esp
     ff0:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     ff2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     ff5:	72 63                	jb     105a <__fmodf2+0x102e>
     ff7:	61                   	popa   
     ff8:	74 00                	je     ffa <__fmodf2+0xfce>
     ffa:	73 72                	jae    106e <__fmodf2+0x1042>
     ffc:	63 2f                	arpl   WORD PTR [edi],bp
     ffe:	73 74                	jae    1074 <__fmodf2+0x1048>
    1000:	72 69                	jb     106b <__fmodf2+0x103f>
    1002:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1003:	67 73 2f             	addr16 jae 1035 <__fmodf2+0x1009>
    1006:	73 74                	jae    107c <__fmodf2+0x1050>
    1008:	72 63                	jb     106d <__fmodf2+0x1041>
    100a:	61                   	popa   
    100b:	74 2e                	je     103b <__fmodf2+0x100f>
    100d:	63 00                	arpl   WORD PTR [eax],ax
    100f:	73 74                	jae    1085 <__fmodf2+0x1059>
    1011:	72 6e                	jb     1081 <__fmodf2+0x1055>
    1013:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
    1016:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1019:	72 6e                	jb     1089 <__fmodf2+0x105d>
    101b:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
    101e:	49                   	dec    ecx
    101f:	4e                   	dec    esi
    1020:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1021:	43                   	inc    ebx
    1022:	68 65 63 6b 00       	push   0x6b6365
    1027:	73 74                	jae    109d <__fmodf2+0x1071>
    1029:	72 63                	jb     108e <__fmodf2+0x1062>
    102b:	61                   	popa   
    102c:	74 49                	je     1077 <__fmodf2+0x104b>
    102e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1031:	72 63                	jb     1096 <__fmodf2+0x106a>
    1033:	6d                   	ins    DWORD PTR es:[edi],dx
    1034:	70 49                	jo     107f <__fmodf2+0x1053>
    1036:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1039:	72 63                	jb     109e <__fmodf2+0x1072>
    103b:	6d                   	ins    DWORD PTR es:[edi],dx
    103c:	70 00                	jo     103e <__fmodf2+0x1012>
    103e:	73 72                	jae    10b2 <__fmodf2+0x1086>
    1040:	63 2f                	arpl   WORD PTR [edi],bp
    1042:	73 74                	jae    10b8 <__fmodf2+0x108c>
    1044:	72 69                	jb     10af <__fmodf2+0x1083>
    1046:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1047:	67 73 2f             	addr16 jae 1079 <__fmodf2+0x104d>
    104a:	73 74                	jae    10c0 <__fmodf2+0x1094>
    104c:	72 63                	jb     10b1 <__fmodf2+0x1085>
    104e:	6d                   	ins    DWORD PTR es:[edi],dx
    104f:	70 2e                	jo     107f <__fmodf2+0x1053>
    1051:	63 00                	arpl   WORD PTR [eax],ax
    1053:	73 74                	jae    10c9 <__fmodf2+0x109d>
    1055:	72 63                	jb     10ba <__fmodf2+0x108e>
    1057:	70 79                	jo     10d2 <__fmodf2+0x10a6>
    1059:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
    105c:	75 6e                	jne    10cc <__fmodf2+0x10a0>
    105e:	74 00                	je     1060 <__fmodf2+0x1034>
    1060:	73 74                	jae    10d6 <__fmodf2+0x10aa>
    1062:	72 63                	jb     10c7 <__fmodf2+0x109b>
    1064:	70 79                	jo     10df <__fmodf2+0x10b3>
    1066:	63 00                	arpl   WORD PTR [eax],ax
    1068:	73 74                	jae    10de <__fmodf2+0x10b2>
    106a:	72 63                	jb     10cf <__fmodf2+0x10a3>
    106c:	70 79                	jo     10e7 <__fmodf2+0x10bb>
    106e:	49                   	dec    ecx
    106f:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
    1072:	63 2f                	arpl   WORD PTR [edi],bp
    1074:	73 74                	jae    10ea <__fmodf2+0x10be>
    1076:	72 69                	jb     10e1 <__fmodf2+0x10b5>
    1078:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1079:	67 73 2f             	addr16 jae 10ab <__fmodf2+0x107f>
    107c:	73 74                	jae    10f2 <__fmodf2+0x10c6>
    107e:	72 63                	jb     10e3 <__fmodf2+0x10b7>
    1080:	70 79                	jo     10fb <__fmodf2+0x10cf>
    1082:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1085:	73 74                	jae    10fb <__fmodf2+0x10cf>
    1087:	72 69                	jb     10f2 <__fmodf2+0x10c6>
    1089:	73 6e                	jae    10f9 <__fmodf2+0x10cd>
    108b:	75 6d                	jne    10fa <__fmodf2+0x10ce>
    108d:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
    1090:	63 2f                	arpl   WORD PTR [edi],bp
    1092:	73 74                	jae    1108 <__fmodf2+0x10dc>
    1094:	72 69                	jb     10ff <__fmodf2+0x10d3>
    1096:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1097:	67 73 2f             	addr16 jae 10c9 <__fmodf2+0x109d>
    109a:	73 74                	jae    1110 <__fmodf2+0x10e4>
    109c:	72 69                	jb     1107 <__fmodf2+0x10db>
    109e:	73 6e                	jae    110e <__fmodf2+0x10e2>
    10a0:	75 6d                	jne    110f <__fmodf2+0x10e3>
    10a2:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    10a5:	63 68 65             	arpl   WORD PTR [eax+0x65],bp
    10a8:	63 6b 5f             	arpl   WORD PTR [ebx+0x5f],bp
    10ab:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
    10b2:	74 
    10b3:	72 6c                	jb     1121 <__fmodf2+0x10f5>
    10b5:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    10b7:	49                   	dec    ecx
    10b8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    10bb:	72 6c                	jb     1129 <__fmodf2+0x10fd>
    10bd:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    10bf:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    10c2:	72 6e                	jb     1132 <__fmodf2+0x1106>
    10c4:	6c                   	ins    BYTE PTR es:[edi],dx
    10c5:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    10c7:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
    10ca:	63 2f                	arpl   WORD PTR [edi],bp
    10cc:	73 74                	jae    1142 <__fmodf2+0x1116>
    10ce:	72 69                	jb     1139 <__fmodf2+0x110d>
    10d0:	6e                   	outs   dx,BYTE PTR ds:[esi]
    10d1:	67 73 2f             	addr16 jae 1103 <__fmodf2+0x10d7>
    10d4:	73 74                	jae    114a <__fmodf2+0x111e>
    10d6:	72 6c                	jb     1144 <__fmodf2+0x1118>
    10d8:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    10da:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    10dd:	73 74                	jae    1153 <__fmodf2+0x1127>
    10df:	72 6e                	jb     114f <__fmodf2+0x1123>
    10e1:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    10e4:	49                   	dec    ecx
    10e5:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    10e8:	72 6e                	jb     1158 <__fmodf2+0x112c>
    10ea:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    10ed:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
    10f0:	63 2f                	arpl   WORD PTR [edi],bp
    10f2:	73 74                	jae    1168 <__fmodf2+0x113c>
    10f4:	72 69                	jb     115f <__fmodf2+0x1133>
    10f6:	6e                   	outs   dx,BYTE PTR ds:[esi]
    10f7:	67 73 2f             	addr16 jae 1129 <__fmodf2+0x10fd>
    10fa:	73 74                	jae    1170 <__fmodf2+0x1144>
    10fc:	72 6e                	jb     116c <__fmodf2+0x1140>
    10fe:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    1101:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1104:	73 72                	jae    1178 <__fmodf2+0x114c>
    1106:	63 2f                	arpl   WORD PTR [edi],bp
    1108:	73 74                	jae    117e <__fmodf2+0x1152>
    110a:	72 69                	jb     1175 <__fmodf2+0x1149>
    110c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    110d:	67 73 2f             	addr16 jae 113f <__fmodf2+0x1113>
    1110:	73 74                	jae    1186 <__fmodf2+0x115a>
    1112:	72 6e                	jb     1182 <__fmodf2+0x1156>
    1114:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    1117:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    111a:	73 74                	jae    1190 <__fmodf2+0x1164>
    111c:	72 6e                	jb     118c <__fmodf2+0x1160>
    111e:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    1121:	49                   	dec    ecx
    1122:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1125:	72 6e                	jb     1195 <__fmodf2+0x1169>
    1127:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    112a:	00 6e 70             	add    BYTE PTR [esi+0x70],ch
    112d:	74 72                	je     11a1 <__fmodf2+0x1175>
    112f:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
    1132:	74 6f                	je     11a3 <__fmodf2+0x1177>
    1134:	66                   	data16
    1135:	66                   	data16
    1136:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
    1139:	74 6c                	je     11a7 <__fmodf2+0x117b>
    113b:	69 6d 00 73 72 63 2f 	imul   ebp,DWORD PTR [ebp+0x0],0x2f637273
    1142:	73 74                	jae    11b8 <__fmodf2+0x118c>
    1144:	72 69                	jb     11af <__fmodf2+0x1183>
    1146:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1147:	67 73 2f             	addr16 jae 1179 <__fmodf2+0x114d>
    114a:	73 74                	jae    11c0 <__fmodf2+0x1194>
    114c:	72 6f                	jb     11bd <__fmodf2+0x1191>
    114e:	75 6c                	jne    11bc <__fmodf2+0x1190>
    1150:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1153:	73 74                	jae    11c9 <__fmodf2+0x119d>
    1155:	72 74                	jb     11cb <__fmodf2+0x119f>
    1157:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1158:	75 6c                	jne    11c6 <__fmodf2+0x119a>
    115a:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
    115d:	64                   	fs
    115e:	70 74                	jo     11d4 <__fmodf2+0x11a8>
    1160:	72 00                	jb     1162 <__fmodf2+0x1136>
    1162:	73 72                	jae    11d6 <__fmodf2+0x11aa>
    1164:	63 2f                	arpl   WORD PTR [edi],bp
    1166:	73 74                	jae    11dc <__fmodf2+0x11b0>
    1168:	72 69                	jb     11d3 <__fmodf2+0x11a7>
    116a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    116b:	67 73 2f             	addr16 jae 119d <__fmodf2+0x1171>
    116e:	73 74                	jae    11e4 <__fmodf2+0x11b8>
    1170:	72 70                	jb     11e2 <__fmodf2+0x11b6>
    1172:	61                   	popa   
    1173:	72 74                	jb     11e9 <__fmodf2+0x11bd>
    1175:	73 2e                	jae    11a5 <__fmodf2+0x1179>
    1177:	63 00                	arpl   WORD PTR [eax],ax
    1179:	73 74                	jae    11ef <__fmodf2+0x11c3>
    117b:	72 6c                	jb     11e9 <__fmodf2+0x11bd>
    117d:	65                   	gs
    117e:	66                   	data16
    117f:	74 00                	je     1181 <__fmodf2+0x1155>
    1181:	73 74                	jae    11f7 <__fmodf2+0x11cb>
    1183:	72 74                	jb     11f9 <__fmodf2+0x11cd>
    1185:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1186:	6c                   	ins    BYTE PTR es:[edi],dx
    1187:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
    118a:	63 2f                	arpl   WORD PTR [edi],bp
    118c:	73 74                	jae    1202 <__fmodf2+0x11d6>
    118e:	72 69                	jb     11f9 <__fmodf2+0x11cd>
    1190:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1191:	67 73 2f             	addr16 jae 11c3 <__fmodf2+0x1197>
    1194:	73 74                	jae    120a <__fmodf2+0x11de>
    1196:	72 74                	jb     120c <__fmodf2+0x11e0>
    1198:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1199:	6c                   	ins    BYTE PTR es:[edi],dx
    119a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    119d:	73 72                	jae    1211 <__fmodf2+0x11e5>
    119f:	63 2f                	arpl   WORD PTR [edi],bp
    11a1:	73 74                	jae    1217 <__fmodf2+0x11eb>
    11a3:	72 69                	jb     120e <__fmodf2+0x11e2>
    11a5:	6e                   	outs   dx,BYTE PTR ds:[esi]
    11a6:	67 73 2f             	addr16 jae 11d8 <__fmodf2+0x11ac>
    11a9:	73 74                	jae    121f <__fmodf2+0x11f3>
    11ab:	72 74                	jb     1221 <__fmodf2+0x11f5>
    11ad:	72 69                	jb     1218 <__fmodf2+0x11ec>
    11af:	6d                   	ins    DWORD PTR es:[edi],dx
    11b0:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    11b3:	73 74                	jae    1229 <__fmodf2+0x11fd>
    11b5:	72 74                	jb     122b <__fmodf2+0x11ff>
    11b7:	72 69                	jb     1222 <__fmodf2+0x11f6>
    11b9:	6d                   	ins    DWORD PTR es:[edi],dx
    11ba:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    11bd:	72 74                	jb     1233 <__fmodf2+0x1207>
    11bf:	72 69                	jb     122a <__fmodf2+0x11fe>
    11c1:	6d                   	ins    DWORD PTR es:[edi],dx
    11c2:	49                   	dec    ecx
    11c3:	00 6f 75             	add    BYTE PTR [edi+0x75],ch
    11c6:	74 73                	je     123b <__fmodf2+0x120f>
    11c8:	69 7a 65 00 73 72 63 	imul   edi,DWORD PTR [edx+0x65],0x63727300
    11cf:	2f                   	das    
    11d0:	73 74                	jae    1246 <__fmodf2+0x121a>
    11d2:	72 72                	jb     1246 <__fmodf2+0x121a>
    11d4:	65                   	gs
    11d5:	70 6c                	jo     1243 <__fmodf2+0x1217>
    11d7:	61                   	popa   
    11d8:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
    11db:	63 00                	arpl   WORD PTR [eax],ax
    11dd:	6e                   	outs   dx,BYTE PTR ds:[esi]
    11de:	65                   	gs
    11df:	65                   	gs
    11e0:	64                   	fs
    11e1:	6c                   	ins    BYTE PTR es:[edi],dx
    11e2:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
    11e6:	73 6f                	jae    1257 <__fmodf2+0x122b>
    11e8:	66                   	data16
    11e9:	66                   	data16
    11ea:	73 65                	jae    1251 <__fmodf2+0x1225>
    11ec:	74 00                	je     11ee <__fmodf2+0x11c2>
    11ee:	73 74                	jae    1264 <__fmodf2+0x1238>
    11f0:	72 72                	jb     1264 <__fmodf2+0x1238>
    11f2:	65                   	gs
    11f3:	70 6c                	jo     1261 <__fmodf2+0x1235>
    11f5:	61                   	popa   
    11f6:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
    11f9:	70 61                	jo     125c <__fmodf2+0x1230>
    11fb:	74 74                	je     1271 <__fmodf2+0x1245>
    11fd:	65                   	gs
    11fe:	72 6e                	jb     126e <__fmodf2+0x1242>
    1200:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1203:	72 72                	jb     1277 <__fmodf2+0x124b>
    1205:	65                   	gs
    1206:	70 6c                	jo     1274 <__fmodf2+0x1248>
    1208:	61                   	popa   
    1209:	63 65 49             	arpl   WORD PTR [ebp+0x49],sp
    120c:	00 6f 75             	add    BYTE PTR [edi+0x75],ch
    120f:	74 53                	je     1264 <__fmodf2+0x1238>
    1211:	74 72                	je     1285 <__fmodf2+0x1259>
    1213:	69 6e 67 00 73 74 72 	imul   ebp,DWORD PTR [esi+0x67],0x72747300
    121a:	73 74                	jae    1290 <__fmodf2+0x1264>
    121c:	72 49                	jb     1267 <__fmodf2+0x123b>
    121e:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
    1221:	63 2f                	arpl   WORD PTR [edi],bp
    1223:	73 74                	jae    1299 <__fmodf2+0x126d>
    1225:	72 73                	jb     129a <__fmodf2+0x126e>
    1227:	74 72                	je     129b <__fmodf2+0x126f>
    1229:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    122c:	73 74                	jae    12a2 <__fmodf2+0x1276>
    122e:	72 73                	jb     12a3 <__fmodf2+0x1277>
    1230:	74 72                	je     12a4 <__fmodf2+0x1278>
    1232:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1235:	72 6e                	jb     12a5 <__fmodf2+0x1279>
    1237:	73 74                	jae    12ad <__fmodf2+0x1281>
    1239:	72 49                	jb     1284 <__fmodf2+0x1258>
    123b:	00 72 63             	add    BYTE PTR [edx+0x63],dh
    123e:	73 69                	jae    12a9 <__fmodf2+0x127d>
    1240:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
    1244:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
    1247:	72 69                	jb     12b2 <__fmodf2+0x1286>
    1249:	6e                   	outs   dx,BYTE PTR ds:[esi]
    124a:	67 00 73 72          	add    BYTE PTR [bp+di+0x72],dh
    124e:	63 2f                	arpl   WORD PTR [edi],bp
    1250:	74 69                	je     12bb <__fmodf2+0x128f>
    1252:	6d                   	ins    DWORD PTR es:[edi],dx
    1253:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    1257:	6c                   	ins    BYTE PTR es:[edi],dx
    1258:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1259:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
    125c:	74 69                	je     12c7 <__fmodf2+0x129b>
    125e:	6d                   	ins    DWORD PTR es:[edi],dx
    125f:	65 00 67 65          	add    BYTE PTR gs:[edi+0x65],ah
    1263:	74 74                	je     12d9 <__fmodf2+0x12ad>
    1265:	69 63 6b 73 00 5f 64 	imul   esp,DWORD PTR [ebx+0x6b],0x645f0073
    126c:	61                   	popa   
    126d:	79 6c                	jns    12db <__fmodf2+0x12af>
    126f:	69 67 68 74 00 6c 69 	imul   esp,DWORD PTR [edi+0x68],0x696c0074
    1276:	62 63 54             	bound  esp,QWORD PTR [ebx+0x54]
    1279:	5a                   	pop    edx
    127a:	00 5f 74             	add    BYTE PTR [edi+0x74],bl
    127d:	7a 6e                	jp     12ed <__fmodf2+0x12c1>
    127f:	61                   	popa   
    1280:	6d                   	ins    DWORD PTR es:[edi],dx
    1281:	65 00 67 6d          	add    BYTE PTR gs:[edi+0x6d],ah
    1285:	74 69                	je     12f0 <__fmodf2+0x12c4>
    1287:	6d                   	ins    DWORD PTR es:[edi],dx
    1288:	65                   	gs
    1289:	5f                   	pop    edi
    128a:	72 00                	jb     128c <__fmodf2+0x1260>
    128c:	74 69                	je     12f7 <__fmodf2+0x12cb>
    128e:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
    1291:	54                   	push   esp
    1292:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1293:	57                   	push   edi
    1294:	61                   	popa   
    1295:	69 74 00 6d 6f 6e 74 	imul   esi,DWORD PTR [eax+eax*1+0x6d],0x68746e6f
    129c:	68 
    129d:	00 67 65             	add    BYTE PTR [edi+0x65],ah
    12a0:	74 74                	je     1316 <__fmodf2+0x12ea>
    12a2:	69 6d 65 00 64 61 79 	imul   ebp,DWORD PTR [ebp+0x65],0x79616400
    12a9:	6e                   	outs   dx,BYTE PTR ds:[esi]
    12aa:	6f                   	outs   dx,DWORD PTR ds:[esi]
    12ab:	00 67 6d             	add    BYTE PTR [edi+0x6d],ah
    12ae:	74 69                	je     1319 <__fmodf2+0x12ed>
    12b0:	6d                   	ins    DWORD PTR es:[edi],dx
    12b1:	65                   	gs
    12b2:	5f                   	pop    edi
    12b3:	72 49                	jb     12fe <__fmodf2+0x12d2>
    12b5:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
    12b9:	61                   	popa   
    12ba:	6c                   	ins    BYTE PTR es:[edi],dx
    12bb:	54                   	push   esp
    12bc:	69 6d 65 00 74 6d 62 	imul   ebp,DWORD PTR [ebp+0x65],0x626d7400
    12c3:	75 66                	jne    132b <__fmodf2+0x12ff>
    12c5:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
    12c9:	61                   	popa   
    12ca:	6c                   	ins    BYTE PTR es:[edi],dx
    12cb:	74 69                	je     1336 <__fmodf2+0x130a>
    12cd:	6d                   	ins    DWORD PTR es:[edi],dx
    12ce:	65                   	gs
    12cf:	5f                   	pop    edi
    12d0:	72 00                	jb     12d2 <__fmodf2+0x12a6>
    12d2:	64                   	fs
    12d3:	61                   	popa   
    12d4:	79 63                	jns    1339 <__fmodf2+0x130d>
    12d6:	6c                   	ins    BYTE PTR es:[edi],dx
    12d7:	6f                   	outs   dx,DWORD PTR ds:[esi]
    12d8:	63 6b 00             	arpl   WORD PTR [ebx+0x0],bp
    12db:	6d                   	ins    DWORD PTR es:[edi],dx
    12dc:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
    12e1:	00 5f 79             	add    BYTE PTR [edi+0x79],bl
    12e4:	74 61                	je     1347 <__fmodf2+0x131b>
    12e6:	62 00                	bound  eax,QWORD PTR [eax]
    12e8:	74 69                	je     1353 <__fmodf2+0x1327>
    12ea:	6d                   	ins    DWORD PTR es:[edi],dx
    12eb:	65                   	gs
    12ec:	72 00                	jb     12ee <__fmodf2+0x12c2>
    12ee:	6c                   	ins    BYTE PTR es:[edi],dx
    12ef:	6f                   	outs   dx,DWORD PTR ds:[esi]
    12f0:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
    12f3:	74 69                	je     135e <__fmodf2+0x1332>
    12f5:	6d                   	ins    DWORD PTR es:[edi],dx
    12f6:	65                   	gs
    12f7:	5f                   	pop    edi
    12f8:	72 49                	jb     1343 <__fmodf2+0x1317>
    12fa:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
    12fd:	73 74                	jae    1373 <__fmodf2+0x1347>
    12ff:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
    1302:	73 00                	jae    1304 <__fmodf2+0x12d8>
    1304:	72 65                	jb     136b <__fmodf2+0x133f>
    1306:	73 75                	jae    137d <__fmodf2+0x1351>
    1308:	6c                   	ins    BYTE PTR es:[edi],dx
    1309:	74 00                	je     130b <__fmodf2+0x12df>
    130b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    130c:	76 65                	jbe    1373 <__fmodf2+0x1347>
    130e:	72 66                	jb     1376 <__fmodf2+0x134a>
    1310:	6c                   	ins    BYTE PTR es:[edi],dx
    1311:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1312:	77 00                	ja     1314 <__fmodf2+0x12e8>

Disassembly of section .comment:

00000000 <.comment>:
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:15
.globl  _modfasm
.type _modfasm, @function

modfasm:
_modfasm:
                push    ebp
   0:	47                   	inc    edi
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:16
                mov     ebp,esp
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:17
                push    edi                     # Save register edi
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:18
                fldd    [ebp+8]           # Load real from stack
   5:	28 47 4e             	sub    BYTE PTR [edi+0x4e],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:19
                mov     edi,dword [ebp+16]      # Put integer address in edi
   8:	55                   	push   ebp
   9:	29 20                	sub    DWORD PTR [eax],esp
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:20
                fld    st(0)                     # Duplicate st
   b:	35 2e 33 2e 30       	xor    eax,0x302e332e
	...

Disassembly of section .TEXT:

00000000 <_modfasm>:
_modfasm():
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:15
.globl  _modfasm
.type _modfasm, @function

modfasm:
_modfasm:
                push    ebp
   0:	55                   	push   ebp
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:16
                mov     ebp,esp
   1:	89 e5                	mov    ebp,esp
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:17
                push    edi                     # Save register edi
   3:	57                   	push   edi
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:18
                fldd    [ebp+8]           # Load real from stack
   4:	d9 45 08             	fld    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:19
                mov     edi,dword [ebp+16]      # Put integer address in edi
   7:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:20
                fld    st(0)                     # Duplicate st
   a:	d9 c0                	fld    st(0)
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:21
                frndint                         # Round to integer
   c:	d9 fc                	frndint 
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:22
                fcom    st(1)                     # Compare with orignal value
   e:	d8 d1                	fcom   st(1)
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:23
                fstsw   ax                      # Get the FPU status word
  10:	9b df e0             	fstsw  ax
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:24
                testd    byte [ebp+15],0x80      # Test if number is negative
  13:	f7 45 10 80 00 00 00 	test   DWORD PTR [ebp+0x10],0x80
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:25
                jz      __fmodf1                # Re-direct if positive
  1a:	74 09                	je     25 <__fmodf1>
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:26
                sahf                            # Store AH to flags
  1c:	9e                   	sahf   
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:27
                jnb     __fmodf2                # Re-direct if greater or equal
  1d:	73 0d                	jae    2c <__fmodf2>
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:28
                fld1                            # Load the constant 1
  1f:	d9 e8                	fld1   
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:29
                fadd                            # Increment integer part
  21:	de c1                	faddp  st(1),st
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:30
                jmp     __fmodf2                # End of case
  23:	eb 07                	jmp    2c <__fmodf2>

00000025 <__fmodf1>:
__fmodf1():
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:31
__fmodf1:       sahf                            # Store AH to flags
  25:	9e                   	sahf   
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:32
                jna     __fmodf2                # Re-direct if less or equal
  26:	76 04                	jbe    2c <__fmodf2>
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:33
                fld1                            # Load constant 1
  28:	d9 e8                	fld1   
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:34
                fsub                            # Decrement integer part
  2a:	de e9                	fsubp  st(1),st

0000002c <__fmodf2>:
__fmodf2():
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:35
__fmodf2:       fstd     [edi]             # Store integer part
  2c:	dd 17                	fst    QWORD PTR [edi]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:36
                fsub                            # Subtract to get fraction
  2e:	de e9                	fsubp  st(1),st
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:37
                pop     edi                     # Restore register edi
  30:	5f                   	pop    edi
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:38
                mov     esp,ebp                 # Restore stack pointer
  31:	89 ec                	mov    esp,ebp
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:39
                pop     ebp
  33:	5d                   	pop    ebp
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:40
  34:	c3                   	ret    

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:15
.globl  _modfasm
.type _modfasm, @function

modfasm:
_modfasm:
                push    ebp
   0:	65 00 00             	add    BYTE PTR gs:[eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:17
                mov     ebp,esp
                push    edi                     # Save register edi
   3:	00 34 01             	add    BYTE PTR [ecx+eax*1],dh
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:18
                fldd    [ebp+8]           # Load real from stack
   6:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:19
                mov     edi,dword [ebp+16]      # Put integer address in edi
   8:	39 01                	cmp    DWORD PTR [ecx],eax
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:20
                fld    st(0)                     # Duplicate st
   a:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:21
                frndint                         # Round to integer
   c:	3a 01                	cmp    al,BYTE PTR [ecx]
	...
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:24
                fcom    st(1)                     # Compare with orignal value
                fstsw   ax                      # Get the FPU status word
                testd    byte [ebp+15],0x80      # Test if number is negative
  16:	00 00                	add    BYTE PTR [eax],al
  18:	c7                   	(bad)  
  19:	0b 00                	or     eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:25
                jz      __fmodf1                # Re-direct if positive
  1b:	00 01                	add    BYTE PTR [ecx],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:27
                sahf                            # Store AH to flags
                jnb     __fmodf2                # Re-direct if greater or equal
  1d:	0c 00                	or     al,0x0
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:28
                fld1                            # Load the constant 1
  1f:	00 06                	add    BYTE PTR [esi],al
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:29
                fadd                            # Increment integer part
  21:	0c 00                	or     al,0x0
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:30
                jmp     __fmodf2                # End of case
  23:	00 3a                	add    BYTE PTR [edx],bh
/home/yogi/src/os/aproj/libChrisOS/src/modf.asm:31
__fmodf1:       sahf                            # Store AH to flags
  25:	0c 00                	or     al,0x0
	...
